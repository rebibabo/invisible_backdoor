<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15721.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:38">qcow2_co_readv</name><parameter_list pos:start="1:39" pos:end="3:68">(<parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><name pos:start="1:40" pos:end="1:55">BlockDriverState</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">bs</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:79"><decl pos:start="1:62" pos:end="1:79"><type pos:start="1:62" pos:end="1:79"><name pos:start="1:62" pos:end="1:68">int64_t</name></type> <name pos:start="1:70" pos:end="1:79">sector_num</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:47">remaining_sectors</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:67"><decl pos:start="3:50" pos:end="3:67"><type pos:start="3:50" pos:end="3:67"><name pos:start="3:50" pos:end="3:61">QEMUIOVector</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:67">qiov</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="279:1">{<block_content pos:start="7:5" pos:end="277:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:24">index_in_cluster</name></decl>, <decl pos:start="9:27" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:27" pos:end="9:28">n1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:22">cur_nr_sectors</name></decl>;</decl_stmt> <comment type="block" pos:start="13:25" pos:end="13:68">/* number of sectors in current iteration */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:27">cluster_offset</name> <init pos:start="15:29" pos:end="15:31">= <expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:23">bytes_done</name> <init pos:start="17:25" pos:end="17:27">= <expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:16">QEMUIOVector</name></type> <name pos:start="19:18" pos:end="19:24">hd_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:25">cluster_data</name> <init pos:start="21:27" pos:end="21:32">= <expr pos:start="21:29" pos:end="21:32"><name pos:start="21:29" pos:end="21:32">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:42"><expr pos:start="25:5" pos:end="25:41"><call pos:start="25:5" pos:end="25:41"><name pos:start="25:5" pos:end="25:19">qemu_iovec_init</name><argument_list pos:start="25:20" pos:end="25:41">(<argument pos:start="25:21" pos:end="25:28"><expr pos:start="25:21" pos:end="25:28"><operator pos:start="25:21" pos:end="25:21">&amp;</operator><name pos:start="25:22" pos:end="25:28">hd_qiov</name></expr></argument>, <argument pos:start="25:31" pos:end="25:40"><expr pos:start="25:31" pos:end="25:40"><name pos:start="25:31" pos:end="25:40"><name pos:start="25:31" pos:end="25:34">qiov</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:40">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><call pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:22">qemu_co_mutex_lock</name><argument_list pos:start="29:23" pos:end="29:32">(<argument pos:start="29:24" pos:end="29:31"><expr pos:start="29:24" pos:end="29:31"><operator pos:start="29:24" pos:end="29:24">&amp;</operator><name pos:start="29:25" pos:end="29:31"><name pos:start="29:25" pos:end="29:25">s</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="33:5" pos:end="259:5">while <condition pos:start="33:11" pos:end="33:34">(<expr pos:start="33:12" pos:end="33:33"><name pos:start="33:12" pos:end="33:28">remaining_sectors</name> <operator pos:start="33:30" pos:end="33:31">!=</operator> <literal type="number" pos:start="33:33" pos:end="33:33">0</literal></expr>)</condition> <block pos:start="33:36" pos:end="259:5">{<block_content pos:start="39:9" pos:end="257:43">



        <comment type="block" pos:start="37:9" pos:end="37:34">/* prepare next request */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:43"><expr pos:start="39:9" pos:end="39:42"><name pos:start="39:9" pos:end="39:22">cur_nr_sectors</name> <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:42">remaining_sectors</name></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:28">(<expr pos:start="41:13" pos:end="41:27"><name pos:start="41:13" pos:end="41:27"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:27">crypt_method</name></name></expr>)</condition> <block pos:start="41:30" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:62">

            <expr_stmt pos:start="43:13" pos:end="45:62"><expr pos:start="43:13" pos:end="45:61"><name pos:start="43:13" pos:end="43:26">cur_nr_sectors</name> <operator pos:start="43:28" pos:end="43:28">=</operator> <call pos:start="43:30" pos:end="45:61"><name pos:start="43:30" pos:end="43:32">MIN</name><argument_list pos:start="43:33" pos:end="45:61">(<argument pos:start="43:34" pos:end="43:47"><expr pos:start="43:34" pos:end="43:47"><name pos:start="43:34" pos:end="43:47">cur_nr_sectors</name></expr></argument>,

                <argument pos:start="45:17" pos:end="45:60"><expr pos:start="45:17" pos:end="45:60"><name pos:start="45:17" pos:end="45:39">QCOW_MAX_CRYPT_CLUSTERS</name> <operator pos:start="45:41" pos:end="45:41">*</operator> <name pos:start="45:43" pos:end="45:60"><name pos:start="45:43" pos:end="45:43">s</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:60">cluster_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="53:46"><expr pos:start="51:9" pos:end="53:45"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="53:45"><name pos:start="51:15" pos:end="51:38">qcow2_get_cluster_offset</name><argument_list pos:start="51:39" pos:end="53:45">(<argument pos:start="51:40" pos:end="51:41"><expr pos:start="51:40" pos:end="51:41"><name pos:start="51:40" pos:end="51:41">bs</name></expr></argument>, <argument pos:start="51:44" pos:end="51:58"><expr pos:start="51:44" pos:end="51:58"><name pos:start="51:44" pos:end="51:53">sector_num</name> <operator pos:start="51:55" pos:end="51:56">&lt;&lt;</operator> <literal type="number" pos:start="51:58" pos:end="51:58">9</literal></expr></argument>,

            <argument pos:start="53:13" pos:end="53:27"><expr pos:start="53:13" pos:end="53:27"><operator pos:start="53:13" pos:end="53:13">&amp;</operator><name pos:start="53:14" pos:end="53:27">cur_nr_sectors</name></expr></argument>, <argument pos:start="53:30" pos:end="53:44"><expr pos:start="53:30" pos:end="53:44"><operator pos:start="53:30" pos:end="53:30">&amp;</operator><name pos:start="53:31" pos:end="53:44">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:22">

            <goto pos:start="57:13" pos:end="57:22">goto <name pos:start="57:18" pos:end="57:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:65"><expr pos:start="63:9" pos:end="63:64"><name pos:start="63:9" pos:end="63:24">index_in_cluster</name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:37">sector_num</name> <operator pos:start="63:39" pos:end="63:39">&amp;</operator> <operator pos:start="63:41" pos:end="63:41">(</operator><name pos:start="63:42" pos:end="63:59"><name pos:start="63:42" pos:end="63:42">s</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:59">cluster_sectors</name></name> <operator pos:start="63:61" pos:end="63:61">-</operator> <literal type="number" pos:start="63:63" pos:end="63:63">1</literal><operator pos:start="63:64" pos:end="63:64">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:35"><expr pos:start="67:9" pos:end="67:34"><call pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:24">qemu_iovec_reset</name><argument_list pos:start="67:25" pos:end="67:34">(<argument pos:start="67:26" pos:end="67:33"><expr pos:start="67:26" pos:end="67:33"><operator pos:start="67:26" pos:end="67:26">&amp;</operator><name pos:start="67:27" pos:end="67:33">hd_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="71:34"><expr pos:start="69:9" pos:end="71:33"><call pos:start="69:9" pos:end="71:33"><name pos:start="69:9" pos:end="69:25">qemu_iovec_concat</name><argument_list pos:start="69:26" pos:end="71:33">(<argument pos:start="69:27" pos:end="69:34"><expr pos:start="69:27" pos:end="69:34"><operator pos:start="69:27" pos:end="69:27">&amp;</operator><name pos:start="69:28" pos:end="69:34">hd_qiov</name></expr></argument>, <argument pos:start="69:37" pos:end="69:40"><expr pos:start="69:37" pos:end="69:40"><name pos:start="69:37" pos:end="69:40">qiov</name></expr></argument>, <argument pos:start="69:43" pos:end="69:52"><expr pos:start="69:43" pos:end="69:52"><name pos:start="69:43" pos:end="69:52">bytes_done</name></expr></argument>,

            <argument pos:start="71:13" pos:end="71:32"><expr pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:26">cur_nr_sectors</name> <operator pos:start="71:28" pos:end="71:28">*</operator> <literal type="number" pos:start="71:30" pos:end="71:32">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="75:9" pos:end="249:9">switch <condition pos:start="75:16" pos:end="75:20">(<expr pos:start="75:17" pos:end="75:19"><name pos:start="75:17" pos:end="75:19">ret</name></expr>)</condition> <block pos:start="75:22" pos:end="249:9">{<block_content pos:start="77:9" pos:end="247:22">

        <case pos:start="77:9" pos:end="77:39">case <expr pos:start="77:14" pos:end="77:38"><name pos:start="77:14" pos:end="77:38">QCOW2_CLUSTER_UNALLOCATED</name></expr>:</case>



            <if_stmt pos:start="81:13" pos:end="115:13"><if pos:start="81:13" pos:end="109:13">if <condition pos:start="81:16" pos:end="81:31">(<expr pos:start="81:17" pos:end="81:30"><name pos:start="81:17" pos:end="81:30"><name pos:start="81:17" pos:end="81:18">bs</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:30">backing_hd</name></name></expr>)</condition> <block pos:start="81:33" pos:end="109:13">{<block_content pos:start="85:17" pos:end="107:17">

                <comment type="block" pos:start="83:17" pos:end="83:46">/* read from the base image */</comment>

                <expr_stmt pos:start="85:17" pos:end="87:48"><expr pos:start="85:17" pos:end="87:47"><name pos:start="85:17" pos:end="85:18">n1</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="87:47"><name pos:start="85:22" pos:end="85:40">qcow2_backing_read1</name><argument_list pos:start="85:41" pos:end="87:47">(<argument pos:start="85:42" pos:end="85:55"><expr pos:start="85:42" pos:end="85:55"><name pos:start="85:42" pos:end="85:55"><name pos:start="85:42" pos:end="85:43">bs</name><operator pos:start="85:44" pos:end="85:45">-&gt;</operator><name pos:start="85:46" pos:end="85:55">backing_hd</name></name></expr></argument>, <argument pos:start="85:58" pos:end="85:65"><expr pos:start="85:58" pos:end="85:65"><operator pos:start="85:58" pos:end="85:58">&amp;</operator><name pos:start="85:59" pos:end="85:65">hd_qiov</name></expr></argument>,

                    <argument pos:start="87:21" pos:end="87:30"><expr pos:start="87:21" pos:end="87:30"><name pos:start="87:21" pos:end="87:30">sector_num</name></expr></argument>, <argument pos:start="87:33" pos:end="87:46"><expr pos:start="87:33" pos:end="87:46"><name pos:start="87:33" pos:end="87:46">cur_nr_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="89:17" pos:end="107:17"><if pos:start="89:17" pos:end="107:17">if <condition pos:start="89:20" pos:end="89:27">(<expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:22">n1</name> <operator pos:start="89:24" pos:end="89:24">&gt;</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>)</condition> <block pos:start="89:29" pos:end="107:17">{<block_content pos:start="91:21" pos:end="105:21">

                    <expr_stmt pos:start="91:21" pos:end="91:68"><expr pos:start="91:21" pos:end="91:67"><call pos:start="91:21" pos:end="91:67"><name pos:start="91:21" pos:end="91:32">BLKDBG_EVENT</name><argument_list pos:start="91:33" pos:end="91:67">(<argument pos:start="91:34" pos:end="91:41"><expr pos:start="91:34" pos:end="91:41"><name pos:start="91:34" pos:end="91:41"><name pos:start="91:34" pos:end="91:35">bs</name><operator pos:start="91:36" pos:end="91:37">-&gt;</operator><name pos:start="91:38" pos:end="91:41">file</name></name></expr></argument>, <argument pos:start="91:44" pos:end="91:66"><expr pos:start="91:44" pos:end="91:66"><name pos:start="91:44" pos:end="91:66">BLKDBG_READ_BACKING_AIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:51"><expr pos:start="93:21" pos:end="93:50"><call pos:start="93:21" pos:end="93:50"><name pos:start="93:21" pos:end="93:40">qemu_co_mutex_unlock</name><argument_list pos:start="93:41" pos:end="93:50">(<argument pos:start="93:42" pos:end="93:49"><expr pos:start="93:42" pos:end="93:49"><operator pos:start="93:42" pos:end="93:42">&amp;</operator><name pos:start="93:43" pos:end="93:49"><name pos:start="93:43" pos:end="93:43">s</name><operator pos:start="93:44" pos:end="93:45">-&gt;</operator><name pos:start="93:46" pos:end="93:49">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="97:54"><expr pos:start="95:21" pos:end="97:53"><name pos:start="95:21" pos:end="95:23">ret</name> <operator pos:start="95:25" pos:end="95:25">=</operator> <call pos:start="95:27" pos:end="97:53"><name pos:start="95:27" pos:end="95:39">bdrv_co_readv</name><argument_list pos:start="95:40" pos:end="97:53">(<argument pos:start="95:41" pos:end="95:54"><expr pos:start="95:41" pos:end="95:54"><name pos:start="95:41" pos:end="95:54"><name pos:start="95:41" pos:end="95:42">bs</name><operator pos:start="95:43" pos:end="95:44">-&gt;</operator><name pos:start="95:45" pos:end="95:54">backing_hd</name></name></expr></argument>, <argument pos:start="95:57" pos:end="95:66"><expr pos:start="95:57" pos:end="95:66"><name pos:start="95:57" pos:end="95:66">sector_num</name></expr></argument>,

                                        <argument pos:start="97:41" pos:end="97:42"><expr pos:start="97:41" pos:end="97:42"><name pos:start="97:41" pos:end="97:42">n1</name></expr></argument>, <argument pos:start="97:45" pos:end="97:52"><expr pos:start="97:45" pos:end="97:52"><operator pos:start="97:45" pos:end="97:45">&amp;</operator><name pos:start="97:46" pos:end="97:52">hd_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:49"><expr pos:start="99:21" pos:end="99:48"><call pos:start="99:21" pos:end="99:48"><name pos:start="99:21" pos:end="99:38">qemu_co_mutex_lock</name><argument_list pos:start="99:39" pos:end="99:48">(<argument pos:start="99:40" pos:end="99:47"><expr pos:start="99:40" pos:end="99:47"><operator pos:start="99:40" pos:end="99:40">&amp;</operator><name pos:start="99:41" pos:end="99:47"><name pos:start="99:41" pos:end="99:41">s</name><operator pos:start="99:42" pos:end="99:43">-&gt;</operator><name pos:start="99:44" pos:end="99:47">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="101:21" pos:end="105:21"><if pos:start="101:21" pos:end="105:21">if <condition pos:start="101:24" pos:end="101:32">(<expr pos:start="101:25" pos:end="101:31"><name pos:start="101:25" pos:end="101:27">ret</name> <operator pos:start="101:29" pos:end="101:29">&lt;</operator> <literal type="number" pos:start="101:31" pos:end="101:31">0</literal></expr>)</condition> <block pos:start="101:34" pos:end="105:21">{<block_content pos:start="103:25" pos:end="103:34">

                        <goto pos:start="103:25" pos:end="103:34">goto <name pos:start="103:30" pos:end="103:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="109:15" pos:end="115:13">else <block pos:start="109:20" pos:end="115:13">{<block_content pos:start="113:17" pos:end="113:72">

                <comment type="block" pos:start="111:17" pos:end="111:57">/* Note: in this case, no need to wait */</comment>

                <expr_stmt pos:start="113:17" pos:end="113:72"><expr pos:start="113:17" pos:end="113:71"><call pos:start="113:17" pos:end="113:71"><name pos:start="113:17" pos:end="113:33">qemu_iovec_memset</name><argument_list pos:start="113:34" pos:end="113:71">(<argument pos:start="113:35" pos:end="113:42"><expr pos:start="113:35" pos:end="113:42"><operator pos:start="113:35" pos:end="113:35">&amp;</operator><name pos:start="113:36" pos:end="113:42">hd_qiov</name></expr></argument>, <argument pos:start="113:45" pos:end="113:45"><expr pos:start="113:45" pos:end="113:45"><literal type="number" pos:start="113:45" pos:end="113:45">0</literal></expr></argument>, <argument pos:start="113:48" pos:end="113:48"><expr pos:start="113:48" pos:end="113:48"><literal type="number" pos:start="113:48" pos:end="113:48">0</literal></expr></argument>, <argument pos:start="113:51" pos:end="113:70"><expr pos:start="113:51" pos:end="113:70"><literal type="number" pos:start="113:51" pos:end="113:53">512</literal> <operator pos:start="113:55" pos:end="113:55">*</operator> <name pos:start="113:57" pos:end="113:70">cur_nr_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>



        <case pos:start="121:9" pos:end="121:32">case <expr pos:start="121:14" pos:end="121:31"><name pos:start="121:14" pos:end="121:31">QCOW2_CLUSTER_ZERO</name></expr>:</case>

            <if_stmt pos:start="123:13" pos:end="129:13"><if pos:start="123:13" pos:end="129:13">if <condition pos:start="123:16" pos:end="123:36">(<expr pos:start="123:17" pos:end="123:35"><name pos:start="123:17" pos:end="123:31"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:31">qcow_version</name></name> <operator pos:start="123:33" pos:end="123:33">&lt;</operator> <literal type="number" pos:start="123:35" pos:end="123:35">3</literal></expr>)</condition> <block pos:start="123:38" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:26">

                <expr_stmt pos:start="125:17" pos:end="125:27"><expr pos:start="125:17" pos:end="125:26"><name pos:start="125:17" pos:end="125:19">ret</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <operator pos:start="125:23" pos:end="125:23">-</operator><name pos:start="125:24" pos:end="125:26">EIO</name></expr>;</expr_stmt>

                <goto pos:start="127:17" pos:end="127:26">goto <name pos:start="127:22" pos:end="127:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:68"><expr pos:start="131:13" pos:end="131:67"><call pos:start="131:13" pos:end="131:67"><name pos:start="131:13" pos:end="131:29">qemu_iovec_memset</name><argument_list pos:start="131:30" pos:end="131:67">(<argument pos:start="131:31" pos:end="131:38"><expr pos:start="131:31" pos:end="131:38"><operator pos:start="131:31" pos:end="131:31">&amp;</operator><name pos:start="131:32" pos:end="131:38">hd_qiov</name></expr></argument>, <argument pos:start="131:41" pos:end="131:41"><expr pos:start="131:41" pos:end="131:41"><literal type="number" pos:start="131:41" pos:end="131:41">0</literal></expr></argument>, <argument pos:start="131:44" pos:end="131:44"><expr pos:start="131:44" pos:end="131:44"><literal type="number" pos:start="131:44" pos:end="131:44">0</literal></expr></argument>, <argument pos:start="131:47" pos:end="131:66"><expr pos:start="131:47" pos:end="131:66"><literal type="number" pos:start="131:47" pos:end="131:49">512</literal> <operator pos:start="131:51" pos:end="131:51">*</operator> <name pos:start="131:53" pos:end="131:66">cur_nr_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>



        <case pos:start="137:9" pos:end="137:38">case <expr pos:start="137:14" pos:end="137:37"><name pos:start="137:14" pos:end="137:37">QCOW2_CLUSTER_COMPRESSED</name></expr>:</case>

            <comment type="block" pos:start="139:13" pos:end="139:57">/* add AIO support for compressed blocks ? */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:63"><expr pos:start="141:13" pos:end="141:62"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <call pos:start="141:19" pos:end="141:62"><name pos:start="141:19" pos:end="141:42">qcow2_decompress_cluster</name><argument_list pos:start="141:43" pos:end="141:62">(<argument pos:start="141:44" pos:end="141:45"><expr pos:start="141:44" pos:end="141:45"><name pos:start="141:44" pos:end="141:45">bs</name></expr></argument>, <argument pos:start="141:48" pos:end="141:61"><expr pos:start="141:48" pos:end="141:61"><name pos:start="141:48" pos:end="141:61">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="147:13"><if pos:start="143:13" pos:end="147:13">if <condition pos:start="143:16" pos:end="143:24">(<expr pos:start="143:17" pos:end="143:23"><name pos:start="143:17" pos:end="143:19">ret</name> <operator pos:start="143:21" pos:end="143:21">&lt;</operator> <literal type="number" pos:start="143:23" pos:end="143:23">0</literal></expr>)</condition> <block pos:start="143:26" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:26">

                <goto pos:start="145:17" pos:end="145:26">goto <name pos:start="145:22" pos:end="145:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="151:13" pos:end="155:38"><expr pos:start="151:13" pos:end="155:37"><call pos:start="151:13" pos:end="155:37"><name pos:start="151:13" pos:end="151:31">qemu_iovec_from_buf</name><argument_list pos:start="151:32" pos:end="155:37">(<argument pos:start="151:33" pos:end="151:40"><expr pos:start="151:33" pos:end="151:40"><operator pos:start="151:33" pos:end="151:33">&amp;</operator><name pos:start="151:34" pos:end="151:40">hd_qiov</name></expr></argument>, <argument pos:start="151:43" pos:end="151:43"><expr pos:start="151:43" pos:end="151:43"><literal type="number" pos:start="151:43" pos:end="151:43">0</literal></expr></argument>,

                <argument pos:start="153:17" pos:end="153:57"><expr pos:start="153:17" pos:end="153:57"><name pos:start="153:17" pos:end="153:32"><name pos:start="153:17" pos:end="153:17">s</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:32">cluster_cache</name></name> <operator pos:start="153:34" pos:end="153:34">+</operator> <name pos:start="153:36" pos:end="153:51">index_in_cluster</name> <operator pos:start="153:53" pos:end="153:53">*</operator> <literal type="number" pos:start="153:55" pos:end="153:57">512</literal></expr></argument>,

                <argument pos:start="155:17" pos:end="155:36"><expr pos:start="155:17" pos:end="155:36"><literal type="number" pos:start="155:17" pos:end="155:19">512</literal> <operator pos:start="155:21" pos:end="155:21">*</operator> <name pos:start="155:23" pos:end="155:36">cur_nr_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>



        <case pos:start="161:9" pos:end="161:34">case <expr pos:start="161:14" pos:end="161:33"><name pos:start="161:14" pos:end="161:33">QCOW2_CLUSTER_NORMAL</name></expr>:</case>

            <if_stmt pos:start="163:13" pos:end="169:13"><if pos:start="163:13" pos:end="169:13">if <condition pos:start="163:16" pos:end="163:44">(<expr pos:start="163:17" pos:end="163:43"><operator pos:start="163:17" pos:end="163:17">(</operator><name pos:start="163:18" pos:end="163:31">cluster_offset</name> <operator pos:start="163:33" pos:end="163:33">&amp;</operator> <literal type="number" pos:start="163:35" pos:end="163:37">511</literal><operator pos:start="163:38" pos:end="163:38">)</operator> <operator pos:start="163:40" pos:end="163:41">!=</operator> <literal type="number" pos:start="163:43" pos:end="163:43">0</literal></expr>)</condition> <block pos:start="163:46" pos:end="169:13">{<block_content pos:start="165:17" pos:end="167:26">

                <expr_stmt pos:start="165:17" pos:end="165:27"><expr pos:start="165:17" pos:end="165:26"><name pos:start="165:17" pos:end="165:19">ret</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <operator pos:start="165:23" pos:end="165:23">-</operator><name pos:start="165:24" pos:end="165:26">EIO</name></expr>;</expr_stmt>

                <goto pos:start="167:17" pos:end="167:26">goto <name pos:start="167:22" pos:end="167:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="173:13" pos:end="203:13"><if pos:start="173:13" pos:end="203:13">if <condition pos:start="173:16" pos:end="173:32">(<expr pos:start="173:17" pos:end="173:31"><name pos:start="173:17" pos:end="173:31"><name pos:start="173:17" pos:end="173:17">s</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:31">crypt_method</name></name></expr>)</condition> <block pos:start="173:34" pos:end="203:13">{<block_content pos:start="183:17" pos:end="201:42">

                <comment type="block" pos:start="175:17" pos:end="181:19">/*

                 * For encrypted images, read everything into a temporary

                 * contiguous buffer on which the AES functions can work.

                 */</comment>

                <if_stmt pos:start="183:17" pos:end="189:17"><if pos:start="183:17" pos:end="189:17">if <condition pos:start="183:20" pos:end="183:34">(<expr pos:start="183:21" pos:end="183:33"><operator pos:start="183:21" pos:end="183:21">!</operator><name pos:start="183:22" pos:end="183:33">cluster_data</name></expr>)</condition> <block pos:start="183:36" pos:end="189:17">{<block_content pos:start="185:21" pos:end="187:87">

                    <expr_stmt pos:start="185:21" pos:end="187:87"><expr pos:start="185:21" pos:end="187:86"><name pos:start="185:21" pos:end="185:32">cluster_data</name> <operator pos:start="185:34" pos:end="185:34">=</operator>

                        <call pos:start="187:25" pos:end="187:86"><name pos:start="187:25" pos:end="187:39">qemu_blockalign</name><argument_list pos:start="187:40" pos:end="187:86">(<argument pos:start="187:41" pos:end="187:42"><expr pos:start="187:41" pos:end="187:42"><name pos:start="187:41" pos:end="187:42">bs</name></expr></argument>, <argument pos:start="187:45" pos:end="187:85"><expr pos:start="187:45" pos:end="187:85"><name pos:start="187:45" pos:end="187:67">QCOW_MAX_CRYPT_CLUSTERS</name> <operator pos:start="187:69" pos:end="187:69">*</operator> <name pos:start="187:71" pos:end="187:85"><name pos:start="187:71" pos:end="187:71">s</name><operator pos:start="187:72" pos:end="187:73">-&gt;</operator><name pos:start="187:74" pos:end="187:85">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="193:17" pos:end="195:66"><expr pos:start="193:17" pos:end="195:65"><call pos:start="193:17" pos:end="195:65"><name pos:start="193:17" pos:end="193:22">assert</name><argument_list pos:start="193:23" pos:end="195:65">(<argument pos:start="193:24" pos:end="195:64"><expr pos:start="193:24" pos:end="195:64"><name pos:start="193:24" pos:end="193:37">cur_nr_sectors</name> <operator pos:start="193:39" pos:end="193:40">&lt;=</operator>

                    <name pos:start="195:21" pos:end="195:43">QCOW_MAX_CRYPT_CLUSTERS</name> <operator pos:start="195:45" pos:end="195:45">*</operator> <name pos:start="195:47" pos:end="195:64"><name pos:start="195:47" pos:end="195:47">s</name><operator pos:start="195:48" pos:end="195:49">-&gt;</operator><name pos:start="195:50" pos:end="195:64">cluster_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:43"><expr pos:start="197:17" pos:end="197:42"><call pos:start="197:17" pos:end="197:42"><name pos:start="197:17" pos:end="197:32">qemu_iovec_reset</name><argument_list pos:start="197:33" pos:end="197:42">(<argument pos:start="197:34" pos:end="197:41"><expr pos:start="197:34" pos:end="197:41"><operator pos:start="197:34" pos:end="197:34">&amp;</operator><name pos:start="197:35" pos:end="197:41">hd_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="201:42"><expr pos:start="199:17" pos:end="201:41"><call pos:start="199:17" pos:end="201:41"><name pos:start="199:17" pos:end="199:30">qemu_iovec_add</name><argument_list pos:start="199:31" pos:end="201:41">(<argument pos:start="199:32" pos:end="199:39"><expr pos:start="199:32" pos:end="199:39"><operator pos:start="199:32" pos:end="199:32">&amp;</operator><name pos:start="199:33" pos:end="199:39">hd_qiov</name></expr></argument>, <argument pos:start="199:42" pos:end="199:53"><expr pos:start="199:42" pos:end="199:53"><name pos:start="199:42" pos:end="199:53">cluster_data</name></expr></argument>,

                    <argument pos:start="201:21" pos:end="201:40"><expr pos:start="201:21" pos:end="201:40"><literal type="number" pos:start="201:21" pos:end="201:23">512</literal> <operator pos:start="201:25" pos:end="201:25">*</operator> <name pos:start="201:27" pos:end="201:40">cur_nr_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:52"><expr pos:start="207:13" pos:end="207:51"><call pos:start="207:13" pos:end="207:51"><name pos:start="207:13" pos:end="207:24">BLKDBG_EVENT</name><argument_list pos:start="207:25" pos:end="207:51">(<argument pos:start="207:26" pos:end="207:33"><expr pos:start="207:26" pos:end="207:33"><name pos:start="207:26" pos:end="207:33"><name pos:start="207:26" pos:end="207:27">bs</name><operator pos:start="207:28" pos:end="207:29">-&gt;</operator><name pos:start="207:30" pos:end="207:33">file</name></name></expr></argument>, <argument pos:start="207:36" pos:end="207:50"><expr pos:start="207:36" pos:end="207:50"><name pos:start="207:36" pos:end="207:50">BLKDBG_READ_AIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:43"><expr pos:start="209:13" pos:end="209:42"><call pos:start="209:13" pos:end="209:42"><name pos:start="209:13" pos:end="209:32">qemu_co_mutex_unlock</name><argument_list pos:start="209:33" pos:end="209:42">(<argument pos:start="209:34" pos:end="209:41"><expr pos:start="209:34" pos:end="209:41"><operator pos:start="209:34" pos:end="209:34">&amp;</operator><name pos:start="209:35" pos:end="209:41"><name pos:start="209:35" pos:end="209:35">s</name><operator pos:start="209:36" pos:end="209:37">-&gt;</operator><name pos:start="209:38" pos:end="209:41">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="215:58"><expr pos:start="211:13" pos:end="215:57"><name pos:start="211:13" pos:end="211:15">ret</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <call pos:start="211:19" pos:end="215:57"><name pos:start="211:19" pos:end="211:31">bdrv_co_readv</name><argument_list pos:start="211:32" pos:end="215:57">(<argument pos:start="211:33" pos:end="211:40"><expr pos:start="211:33" pos:end="211:40"><name pos:start="211:33" pos:end="211:40"><name pos:start="211:33" pos:end="211:34">bs</name><operator pos:start="211:35" pos:end="211:36">-&gt;</operator><name pos:start="211:37" pos:end="211:40">file</name></name></expr></argument>,

                                <argument pos:start="213:33" pos:end="213:72"><expr pos:start="213:33" pos:end="213:72"><operator pos:start="213:33" pos:end="213:33">(</operator><name pos:start="213:34" pos:end="213:47">cluster_offset</name> <operator pos:start="213:49" pos:end="213:50">&gt;&gt;</operator> <literal type="number" pos:start="213:52" pos:end="213:52">9</literal><operator pos:start="213:53" pos:end="213:53">)</operator> <operator pos:start="213:55" pos:end="213:55">+</operator> <name pos:start="213:57" pos:end="213:72">index_in_cluster</name></expr></argument>,

                                <argument pos:start="215:33" pos:end="215:46"><expr pos:start="215:33" pos:end="215:46"><name pos:start="215:33" pos:end="215:46">cur_nr_sectors</name></expr></argument>, <argument pos:start="215:49" pos:end="215:56"><expr pos:start="215:49" pos:end="215:56"><operator pos:start="215:49" pos:end="215:49">&amp;</operator><name pos:start="215:50" pos:end="215:56">hd_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:41"><expr pos:start="217:13" pos:end="217:40"><call pos:start="217:13" pos:end="217:40"><name pos:start="217:13" pos:end="217:30">qemu_co_mutex_lock</name><argument_list pos:start="217:31" pos:end="217:40">(<argument pos:start="217:32" pos:end="217:39"><expr pos:start="217:32" pos:end="217:39"><operator pos:start="217:32" pos:end="217:32">&amp;</operator><name pos:start="217:33" pos:end="217:39"><name pos:start="217:33" pos:end="217:33">s</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:39">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="223:13"><if pos:start="219:13" pos:end="223:13">if <condition pos:start="219:16" pos:end="219:24">(<expr pos:start="219:17" pos:end="219:23"><name pos:start="219:17" pos:end="219:19">ret</name> <operator pos:start="219:21" pos:end="219:21">&lt;</operator> <literal type="number" pos:start="219:23" pos:end="219:23">0</literal></expr>)</condition> <block pos:start="219:26" pos:end="223:13">{<block_content pos:start="221:17" pos:end="221:26">

                <goto pos:start="221:17" pos:end="221:26">goto <name pos:start="221:22" pos:end="221:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="225:13" pos:end="235:13"><if pos:start="225:13" pos:end="235:13">if <condition pos:start="225:16" pos:end="225:32">(<expr pos:start="225:17" pos:end="225:31"><name pos:start="225:17" pos:end="225:31"><name pos:start="225:17" pos:end="225:17">s</name><operator pos:start="225:18" pos:end="225:19">-&gt;</operator><name pos:start="225:20" pos:end="225:31">crypt_method</name></name></expr>)</condition> <block pos:start="225:34" pos:end="235:13">{<block_content pos:start="227:17" pos:end="233:56">

                <expr_stmt pos:start="227:17" pos:end="229:74"><expr pos:start="227:17" pos:end="229:73"><call pos:start="227:17" pos:end="229:73"><name pos:start="227:17" pos:end="227:37">qcow2_encrypt_sectors</name><argument_list pos:start="227:38" pos:end="229:73">(<argument pos:start="227:39" pos:end="227:39"><expr pos:start="227:39" pos:end="227:39"><name pos:start="227:39" pos:end="227:39">s</name></expr></argument>, <argument pos:start="227:42" pos:end="227:51"><expr pos:start="227:42" pos:end="227:51"><name pos:start="227:42" pos:end="227:51">sector_num</name></expr></argument>,  <argument pos:start="227:55" pos:end="227:66"><expr pos:start="227:55" pos:end="227:66"><name pos:start="227:55" pos:end="227:66">cluster_data</name></expr></argument>,

                    <argument pos:start="229:21" pos:end="229:32"><expr pos:start="229:21" pos:end="229:32"><name pos:start="229:21" pos:end="229:32">cluster_data</name></expr></argument>, <argument pos:start="229:35" pos:end="229:48"><expr pos:start="229:35" pos:end="229:48"><name pos:start="229:35" pos:end="229:48">cur_nr_sectors</name></expr></argument>, <argument pos:start="229:51" pos:end="229:51"><expr pos:start="229:51" pos:end="229:51"><literal type="number" pos:start="229:51" pos:end="229:51">0</literal></expr></argument>, <argument pos:start="229:54" pos:end="229:72"><expr pos:start="229:54" pos:end="229:72"><operator pos:start="229:54" pos:end="229:54">&amp;</operator><name pos:start="229:55" pos:end="229:72"><name pos:start="229:55" pos:end="229:55">s</name><operator pos:start="229:56" pos:end="229:57">-&gt;</operator><name pos:start="229:58" pos:end="229:72">aes_decrypt_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="233:56"><expr pos:start="231:17" pos:end="233:55"><call pos:start="231:17" pos:end="233:55"><name pos:start="231:17" pos:end="231:35">qemu_iovec_from_buf</name><argument_list pos:start="231:36" pos:end="233:55">(<argument pos:start="231:37" pos:end="231:40"><expr pos:start="231:37" pos:end="231:40"><name pos:start="231:37" pos:end="231:40">qiov</name></expr></argument>, <argument pos:start="231:43" pos:end="231:52"><expr pos:start="231:43" pos:end="231:52"><name pos:start="231:43" pos:end="231:52">bytes_done</name></expr></argument>,

                    <argument pos:start="233:21" pos:end="233:32"><expr pos:start="233:21" pos:end="233:32"><name pos:start="233:21" pos:end="233:32">cluster_data</name></expr></argument>, <argument pos:start="233:35" pos:end="233:54"><expr pos:start="233:35" pos:end="233:54"><literal type="number" pos:start="233:35" pos:end="233:37">512</literal> <operator pos:start="233:39" pos:end="233:39">*</operator> <name pos:start="233:41" pos:end="233:54">cur_nr_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="237:13" pos:end="237:18">break;</break>



        <default pos:start="241:9" pos:end="241:16">default:</default>

            <expr_stmt pos:start="243:13" pos:end="243:35"><expr pos:start="243:13" pos:end="243:34"><call pos:start="243:13" pos:end="243:34"><name pos:start="243:13" pos:end="243:32">g_assert_not_reached</name><argument_list pos:start="243:33" pos:end="243:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:23"><expr pos:start="245:13" pos:end="245:22"><name pos:start="245:13" pos:end="245:15">ret</name> <operator pos:start="245:17" pos:end="245:17">=</operator> <operator pos:start="245:19" pos:end="245:19">-</operator><name pos:start="245:20" pos:end="245:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="247:13" pos:end="247:22">goto <name pos:start="247:18" pos:end="247:21">fail</name>;</goto>

        </block_content>}</block></switch>



        <expr_stmt pos:start="253:9" pos:end="253:44"><expr pos:start="253:9" pos:end="253:43"><name pos:start="253:9" pos:end="253:25">remaining_sectors</name> <operator pos:start="253:27" pos:end="253:28">-=</operator> <name pos:start="253:30" pos:end="253:43">cur_nr_sectors</name></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:37"><expr pos:start="255:9" pos:end="255:36"><name pos:start="255:9" pos:end="255:18">sector_num</name> <operator pos:start="255:20" pos:end="255:21">+=</operator> <name pos:start="255:23" pos:end="255:36">cur_nr_sectors</name></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:43"><expr pos:start="257:9" pos:end="257:42"><name pos:start="257:9" pos:end="257:18">bytes_done</name> <operator pos:start="257:20" pos:end="257:21">+=</operator> <name pos:start="257:23" pos:end="257:36">cur_nr_sectors</name> <operator pos:start="257:38" pos:end="257:38">*</operator> <literal type="number" pos:start="257:40" pos:end="257:42">512</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="261:5" pos:end="261:12"><expr pos:start="261:5" pos:end="261:11"><name pos:start="261:5" pos:end="261:7">ret</name> <operator pos:start="261:9" pos:end="261:9">=</operator> <literal type="number" pos:start="261:11" pos:end="261:11">0</literal></expr>;</expr_stmt>



<label pos:start="265:1" pos:end="265:5"><name pos:start="265:1" pos:end="265:4">fail</name>:</label>

    <expr_stmt pos:start="267:5" pos:end="267:35"><expr pos:start="267:5" pos:end="267:34"><call pos:start="267:5" pos:end="267:34"><name pos:start="267:5" pos:end="267:24">qemu_co_mutex_unlock</name><argument_list pos:start="267:25" pos:end="267:34">(<argument pos:start="267:26" pos:end="267:33"><expr pos:start="267:26" pos:end="267:33"><operator pos:start="267:26" pos:end="267:26">&amp;</operator><name pos:start="267:27" pos:end="267:33"><name pos:start="267:27" pos:end="267:27">s</name><operator pos:start="267:28" pos:end="267:29">-&gt;</operator><name pos:start="267:30" pos:end="267:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="271:5" pos:end="271:33"><expr pos:start="271:5" pos:end="271:32"><call pos:start="271:5" pos:end="271:32"><name pos:start="271:5" pos:end="271:22">qemu_iovec_destroy</name><argument_list pos:start="271:23" pos:end="271:32">(<argument pos:start="271:24" pos:end="271:31"><expr pos:start="271:24" pos:end="271:31"><operator pos:start="271:24" pos:end="271:24">&amp;</operator><name pos:start="271:25" pos:end="271:31">hd_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:29"><expr pos:start="273:5" pos:end="273:28"><call pos:start="273:5" pos:end="273:28"><name pos:start="273:5" pos:end="273:14">qemu_vfree</name><argument_list pos:start="273:15" pos:end="273:28">(<argument pos:start="273:16" pos:end="273:27"><expr pos:start="273:16" pos:end="273:27"><name pos:start="273:16" pos:end="273:27">cluster_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="277:5" pos:end="277:15">return <expr pos:start="277:12" pos:end="277:14"><name pos:start="277:12" pos:end="277:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
