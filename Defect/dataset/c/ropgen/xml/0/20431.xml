<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20431.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">net_init_nic</name><parameter_list pos:start="1:24" pos:end="3:59">(<parameter pos:start="1:25" pos:end="1:52"><decl pos:start="1:25" pos:end="1:52"><type pos:start="1:25" pos:end="1:52"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:46">NetClientOptions</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">opts</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:70"><decl pos:start="1:55" pos:end="1:70"><type pos:start="1:55" pos:end="1:70"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">name</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:44"><decl pos:start="3:25" pos:end="3:44"><type pos:start="3:25" pos:end="3:44"><name pos:start="3:25" pos:end="3:38">NetClientState</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:44">peer</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:51">Error</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier><modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:58">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:15">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">NICInfo</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:31"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:29">NetLegacyNicOptions</name> <modifier pos:start="11:31" pos:end="11:31">*</modifier></type><name pos:start="11:32" pos:end="11:34">nic</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:54"><expr pos:start="15:5" pos:end="15:53"><call pos:start="15:5" pos:end="15:53"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:53">(<argument pos:start="15:12" pos:end="15:52"><expr pos:start="15:12" pos:end="15:52"><name pos:start="15:12" pos:end="15:21"><name pos:start="15:12" pos:end="15:15">opts</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:21">type</name></name> <operator pos:start="15:23" pos:end="15:24">==</operator> <name pos:start="15:26" pos:end="15:52">NET_CLIENT_OPTIONS_KIND_NIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:22"><expr pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:7">nic</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:21"><name pos:start="17:11" pos:end="17:14">opts</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:17">u</name><operator pos:start="17:18" pos:end="17:18">.</operator><name pos:start="17:19" pos:end="17:21">nic</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:7">idx</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:28"><name pos:start="21:11" pos:end="21:26">nic_get_free_idx</name><argument_list pos:start="21:27" pos:end="21:28">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:41">(<expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:11">idx</name> <operator pos:start="23:13" pos:end="23:14">==</operator> <operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal> <operator pos:start="23:19" pos:end="23:20">||</operator> <name pos:start="23:22" pos:end="23:28">nb_nics</name> <operator pos:start="23:30" pos:end="23:31">&gt;=</operator> <name pos:start="23:33" pos:end="23:40">MAX_NICS</name></expr>)</condition> <block pos:start="23:43" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:42"><expr pos:start="25:9" pos:end="25:41"><call pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="25:41">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="25:40"><expr pos:start="25:26" pos:end="25:40"><literal type="string" pos:start="25:26" pos:end="25:40">"too many NICs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:24"><expr pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:6">nd</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <operator pos:start="33:10" pos:end="33:10">&amp;</operator><name pos:start="33:11" pos:end="33:23"><name pos:start="33:11" pos:end="33:18">nd_table</name><index pos:start="33:19" pos:end="33:23">[<expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">idx</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><call pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:30">(<argument pos:start="37:12" pos:end="37:13"><expr pos:start="37:12" pos:end="37:13"><name pos:start="37:12" pos:end="37:13">nd</name></expr></argument>, <argument pos:start="37:16" pos:end="37:16"><expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr></argument>, <argument pos:start="37:19" pos:end="37:29"><expr pos:start="37:19" pos:end="37:29"><sizeof pos:start="37:19" pos:end="37:29">sizeof<argument_list pos:start="37:25" pos:end="37:29">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><operator pos:start="37:26" pos:end="37:26">*</operator><name pos:start="37:27" pos:end="37:28">nd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="59:5"><if pos:start="41:5" pos:end="53:5">if <condition pos:start="41:8" pos:end="41:24">(<expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:11">nic</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:23">has_netdev</name></name></expr>)</condition> <block pos:start="41:26" pos:end="53:5">{<block_content pos:start="43:9" pos:end="51:9">

        <expr_stmt pos:start="43:9" pos:end="43:51"><expr pos:start="43:9" pos:end="43:50"><name pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:10">nd</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:18">netdev</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:50"><name pos:start="43:22" pos:end="43:37">qemu_find_netdev</name><argument_list pos:start="43:38" pos:end="43:50">(<argument pos:start="43:39" pos:end="43:49"><expr pos:start="43:39" pos:end="43:49"><name pos:start="43:39" pos:end="43:49"><name pos:start="43:39" pos:end="43:41">nic</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:49">netdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:24">(<expr pos:start="45:13" pos:end="45:23"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:23"><name pos:start="45:14" pos:end="45:15">nd</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:23">netdev</name></name></expr>)</condition> <block pos:start="45:26" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:22">

            <expr_stmt pos:start="47:13" pos:end="47:67"><expr pos:start="47:13" pos:end="47:66"><call pos:start="47:13" pos:end="47:66"><name pos:start="47:13" pos:end="47:22">error_setg</name><argument_list pos:start="47:23" pos:end="47:66">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">errp</name></expr></argument>, <argument pos:start="47:30" pos:end="47:52"><expr pos:start="47:30" pos:end="47:52"><literal type="string" pos:start="47:30" pos:end="47:52">"netdev '%s' not found"</literal></expr></argument>, <argument pos:start="47:55" pos:end="47:65"><expr pos:start="47:55" pos:end="47:65"><name pos:start="47:55" pos:end="47:65"><name pos:start="47:55" pos:end="47:57">nic</name><operator pos:start="47:58" pos:end="47:59">-&gt;</operator><name pos:start="47:60" pos:end="47:65">netdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:22">return <expr pos:start="49:20" pos:end="49:21"><operator pos:start="49:20" pos:end="49:20">-</operator><literal type="number" pos:start="49:21" pos:end="49:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="59:5">else <block pos:start="53:12" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:26">

        <expr_stmt pos:start="55:9" pos:end="55:21"><expr pos:start="55:9" pos:end="55:20"><call pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:14">assert</name><argument_list pos:start="55:15" pos:end="55:20">(<argument pos:start="55:16" pos:end="55:19"><expr pos:start="55:16" pos:end="55:19"><name pos:start="55:16" pos:end="55:19">peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:26"><expr pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:10">nd</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:18">netdev</name></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <name pos:start="57:22" pos:end="57:25">peer</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:30"><expr pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:12"><name pos:start="61:5" pos:end="61:6">nd</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:12">name</name></name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:29"><name pos:start="61:16" pos:end="61:23">g_strdup</name><argument_list pos:start="61:24" pos:end="61:29">(<argument pos:start="61:25" pos:end="61:28"><expr pos:start="61:25" pos:end="61:28"><name pos:start="61:25" pos:end="61:28">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:23">(<expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:11">nic</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:22">has_model</name></name></expr>)</condition> <block pos:start="63:25" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:41">

        <expr_stmt pos:start="65:9" pos:end="65:41"><expr pos:start="65:9" pos:end="65:40"><name pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:10">nd</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:17">model</name></name> <operator pos:start="65:19" pos:end="65:19">=</operator> <call pos:start="65:21" pos:end="65:40"><name pos:start="65:21" pos:end="65:28">g_strdup</name><argument_list pos:start="65:29" pos:end="65:40">(<argument pos:start="65:30" pos:end="65:39"><expr pos:start="65:30" pos:end="65:39"><name pos:start="65:30" pos:end="65:39"><name pos:start="65:30" pos:end="65:32">nic</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:39">model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:22">(<expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:11">nic</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:21">has_addr</name></name></expr>)</condition> <block pos:start="69:24" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:42">

        <expr_stmt pos:start="71:9" pos:end="71:42"><expr pos:start="71:9" pos:end="71:41"><name pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:10">nd</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:19">devaddr</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:41"><name pos:start="71:23" pos:end="71:30">g_strdup</name><argument_list pos:start="71:31" pos:end="71:41">(<argument pos:start="71:32" pos:end="71:40"><expr pos:start="71:32" pos:end="71:40"><name pos:start="71:32" pos:end="71:40"><name pos:start="71:32" pos:end="71:34">nic</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:40">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="85:5"><if pos:start="77:5" pos:end="85:5">if <condition pos:start="77:8" pos:end="79:59">(<expr pos:start="77:9" pos:end="79:58"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:11">nic</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:24">has_macaddr</name></name> <operator pos:start="77:26" pos:end="77:27">&amp;&amp;</operator>

        <call pos:start="79:9" pos:end="79:54"><name pos:start="79:9" pos:end="79:25">net_parse_macaddr</name><argument_list pos:start="79:26" pos:end="79:54">(<argument pos:start="79:27" pos:end="79:39"><expr pos:start="79:27" pos:end="79:39"><name pos:start="79:27" pos:end="79:39"><name pos:start="79:27" pos:end="79:28">nd</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:37">macaddr</name><operator pos:start="79:38" pos:end="79:38">.</operator><name pos:start="79:39" pos:end="79:39">a</name></name></expr></argument>, <argument pos:start="79:42" pos:end="79:53"><expr pos:start="79:42" pos:end="79:53"><name pos:start="79:42" pos:end="79:53"><name pos:start="79:42" pos:end="79:44">nic</name><operator pos:start="79:45" pos:end="79:46">-&gt;</operator><name pos:start="79:47" pos:end="79:53">macaddr</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:56" pos:end="79:56">&lt;</operator> <literal type="number" pos:start="79:58" pos:end="79:58">0</literal></expr>)</condition> <block pos:start="79:61" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:18">

        <expr_stmt pos:start="81:9" pos:end="81:64"><expr pos:start="81:9" pos:end="81:63"><call pos:start="81:9" pos:end="81:63"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="81:63">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="81:62"><expr pos:start="81:26" pos:end="81:62"><literal type="string" pos:start="81:26" pos:end="81:62">"invalid syntax for ethernet address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:18">return <expr pos:start="83:16" pos:end="83:17"><operator pos:start="83:16" pos:end="83:16">-</operator><literal type="number" pos:start="83:17" pos:end="83:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="89:47">(<expr pos:start="87:9" pos:end="89:46"><name pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:11">nic</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:24">has_macaddr</name></name> <operator pos:start="87:26" pos:end="87:27">&amp;&amp;</operator>

        <call pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:31">is_multicast_ether_addr</name><argument_list pos:start="89:32" pos:end="89:46">(<argument pos:start="89:33" pos:end="89:45"><expr pos:start="89:33" pos:end="89:45"><name pos:start="89:33" pos:end="89:45"><name pos:start="89:33" pos:end="89:34">nd</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:43">macaddr</name><operator pos:start="89:44" pos:end="89:44">.</operator><name pos:start="89:45" pos:end="89:45">a</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:49" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:18">

        <expr_stmt pos:start="91:9" pos:end="93:75"><expr pos:start="91:9" pos:end="93:74"><call pos:start="91:9" pos:end="93:74"><name pos:start="91:9" pos:end="91:18">error_setg</name><argument_list pos:start="91:19" pos:end="93:74">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">errp</name></expr></argument>,

                   <argument pos:start="93:20" pos:end="93:73"><expr pos:start="93:20" pos:end="93:73"><literal type="string" pos:start="93:20" pos:end="93:73">"NIC cannot have multicast MAC address (odd 1st byte)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:18">return <expr pos:start="95:16" pos:end="95:17"><operator pos:start="95:16" pos:end="95:16">-</operator><literal type="number" pos:start="95:17" pos:end="95:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:48"><expr pos:start="99:5" pos:end="99:47"><call pos:start="99:5" pos:end="99:47"><name pos:start="99:5" pos:end="99:33">qemu_macaddr_default_if_unset</name><argument_list pos:start="99:34" pos:end="99:47">(<argument pos:start="99:35" pos:end="99:46"><expr pos:start="99:35" pos:end="99:46"><operator pos:start="99:35" pos:end="99:35">&amp;</operator><name pos:start="99:36" pos:end="99:46"><name pos:start="99:36" pos:end="99:37">nd</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:46">macaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="103:5" pos:end="119:5"><if pos:start="103:5" pos:end="115:5">if <condition pos:start="103:8" pos:end="103:25">(<expr pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:11">nic</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:24">has_vectors</name></name></expr>)</condition> <block pos:start="103:27" pos:end="115:5">{<block_content pos:start="105:9" pos:end="113:36">

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:37">(<expr pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:15">nic</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:24">vectors</name></name> <operator pos:start="105:26" pos:end="105:26">&gt;</operator> <literal type="number" pos:start="105:28" pos:end="105:36">0x7ffffff</literal></expr>)</condition> <block pos:start="105:39" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:22">

            <expr_stmt pos:start="107:13" pos:end="107:76"><expr pos:start="107:13" pos:end="107:75"><call pos:start="107:13" pos:end="107:75"><name pos:start="107:13" pos:end="107:22">error_setg</name><argument_list pos:start="107:23" pos:end="107:75">(<argument pos:start="107:24" pos:end="107:27"><expr pos:start="107:24" pos:end="107:27"><name pos:start="107:24" pos:end="107:27">errp</name></expr></argument>, <argument pos:start="107:30" pos:end="107:60"><expr pos:start="107:30" pos:end="107:60"><literal type="string" pos:start="107:30" pos:end="107:54">"invalid # of vectors: %"</literal><name pos:start="107:55" pos:end="107:60">PRIu32</name></expr></argument>, <argument pos:start="107:63" pos:end="107:74"><expr pos:start="107:63" pos:end="107:74"><name pos:start="107:63" pos:end="107:74"><name pos:start="107:63" pos:end="107:65">nic</name><operator pos:start="107:66" pos:end="107:67">-&gt;</operator><name pos:start="107:68" pos:end="107:74">vectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:22">return <expr pos:start="109:20" pos:end="109:21"><operator pos:start="109:20" pos:end="109:20">-</operator><literal type="number" pos:start="109:21" pos:end="109:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:36"><expr pos:start="113:9" pos:end="113:35"><name pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:10">nd</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:20">nvectors</name></name> <operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:35"><name pos:start="113:24" pos:end="113:26">nic</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:35">vectors</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="119:5">else <block pos:start="115:12" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:48">

        <expr_stmt pos:start="117:9" pos:end="117:48"><expr pos:start="117:9" pos:end="117:47"><name pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:10">nd</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:20">nvectors</name></name> <operator pos:start="117:22" pos:end="117:22">=</operator> <name pos:start="117:24" pos:end="117:47">DEV_NVECTORS_UNSPECIFIED</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:17"><expr pos:start="123:5" pos:end="123:16"><name pos:start="123:5" pos:end="123:12"><name pos:start="123:5" pos:end="123:6">nd</name><operator pos:start="123:7" pos:end="123:8">-&gt;</operator><name pos:start="123:9" pos:end="123:12">used</name></name> <operator pos:start="123:14" pos:end="123:14">=</operator> <literal type="number" pos:start="123:16" pos:end="123:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:14"><expr pos:start="125:5" pos:end="125:13"><name pos:start="125:5" pos:end="125:11">nb_nics</name><operator pos:start="125:12" pos:end="125:13">++</operator></expr>;</expr_stmt>



    <return pos:start="129:5" pos:end="129:15">return <expr pos:start="129:12" pos:end="129:14"><name pos:start="129:12" pos:end="129:14">idx</name></expr>;</return>

</block_content>}</block></function>
</unit>
