<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17706.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:33">qmp_migrate_set_capabilities</name><parameter_list pos:start="1:34" pos:end="3:47">(<parameter pos:start="1:35" pos:end="1:71"><decl pos:start="1:35" pos:end="1:71"><type pos:start="1:35" pos:end="1:71"><name pos:start="1:35" pos:end="1:63">MigrationCapabilityStatusList</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:71">params</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:39">Error</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="103:1">{<block_content pos:start="7:5" pos:end="101:5">

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MigrationState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:45">= <expr pos:start="7:25" pos:end="7:45"><call pos:start="7:25" pos:end="7:45"><name pos:start="7:25" pos:end="7:43">migrate_get_current</name><argument_list pos:start="7:44" pos:end="7:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:35"><name pos:start="9:5" pos:end="9:33">MigrationCapabilityStatusList</name> <modifier pos:start="9:35" pos:end="9:35">*</modifier></type><name pos:start="9:36" pos:end="9:38">cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:51"><decl pos:start="11:5" pos:end="11:50"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:25">old_postcopy_cap</name> <init pos:start="11:27" pos:end="11:50">= <expr pos:start="11:29" pos:end="11:50"><call pos:start="11:29" pos:end="11:50"><name pos:start="11:29" pos:end="11:48">migrate_postcopy_ram</name><argument_list pos:start="11:49" pos:end="11:50">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:47">(<expr pos:start="15:9" pos:end="15:46"><call pos:start="15:9" pos:end="15:46"><name pos:start="15:9" pos:end="15:36">migration_is_setup_or_active</name><argument_list pos:start="15:37" pos:end="15:46">(<argument pos:start="15:38" pos:end="15:45"><expr pos:start="15:38" pos:end="15:45"><name pos:start="15:38" pos:end="15:45"><name pos:start="15:38" pos:end="15:38">s</name><operator pos:start="15:39" pos:end="15:40">-&gt;</operator><name pos:start="15:41" pos:end="15:45">state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:49" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:48"><expr pos:start="17:9" pos:end="17:47"><call pos:start="17:9" pos:end="17:47"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:47">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:46"><expr pos:start="17:26" pos:end="17:46"><name pos:start="17:26" pos:end="17:46">QERR_MIGRATION_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="25:5" pos:end="47:5">for <control pos:start="25:9" pos:end="25:44">(<init pos:start="25:10" pos:end="25:22"><expr pos:start="25:10" pos:end="25:21"><name pos:start="25:10" pos:end="25:12">cap</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:21">params</name></expr>;</init> <condition pos:start="25:24" pos:end="25:27"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">cap</name></expr>;</condition> <incr pos:start="25:29" pos:end="25:43"><expr pos:start="25:29" pos:end="25:43"><name pos:start="25:29" pos:end="25:31">cap</name> <operator pos:start="25:33" pos:end="25:33">=</operator> <name pos:start="25:35" pos:end="25:43"><name pos:start="25:35" pos:end="25:37">cap</name><operator pos:start="25:38" pos:end="25:39">-&gt;</operator><name pos:start="25:40" pos:end="25:43">next</name></name></expr></incr>)</control> <block pos:start="25:46" pos:end="47:5">{<block_content pos:start="29:9" pos:end="45:76">

<cpp:ifndef pos:start="27:1" pos:end="27:35">#<cpp:directive pos:start="27:2" pos:end="27:7">ifndef</cpp:directive> <name pos:start="27:9" pos:end="27:35">CONFIG_LIVE_BLOCK_MIGRATION</name></cpp:ifndef>

        <if_stmt pos:start="29:9" pos:end="44:0"><if pos:start="29:9" pos:end="44:0">if <condition pos:start="29:12" pos:end="31:33">(<expr pos:start="29:13" pos:end="31:32"><name pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:15">cap</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:22">value</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:34">capability</name></name> <operator pos:start="29:36" pos:end="29:37">==</operator> <name pos:start="29:39" pos:end="29:64">MIGRATION_CAPABILITY_BLOCK</name>

            <operator pos:start="31:13" pos:end="31:14">&amp;&amp;</operator> <name pos:start="31:16" pos:end="31:32"><name pos:start="31:16" pos:end="31:18">cap</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:25">value</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:32">state</name></name></expr>)</condition> <block pos:start="31:35" pos:end="44:0">{<block_content pos:start="33:13" pos:end="39:21">

            <expr_stmt pos:start="33:13" pos:end="35:42"><expr pos:start="33:13" pos:end="35:41"><call pos:start="33:13" pos:end="35:41"><name pos:start="33:13" pos:end="33:22">error_setg</name><argument_list pos:start="33:23" pos:end="35:41">(<argument pos:start="33:24" pos:end="33:27"><expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">errp</name></expr></argument>, <argument pos:start="33:30" pos:end="35:40"><expr pos:start="33:30" pos:end="35:40"><literal type="string" pos:start="33:30" pos:end="33:80">"QEMU compiled without old-style (blk/-b, inc/-i) "</literal>

                       <literal type="string" pos:start="35:24" pos:end="35:40">"block migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:71"><expr pos:start="37:13" pos:end="37:70"><call pos:start="37:13" pos:end="37:70"><name pos:start="37:13" pos:end="37:29">error_append_hint</name><argument_list pos:start="37:30" pos:end="37:70">(<argument pos:start="37:31" pos:end="37:34"><expr pos:start="37:31" pos:end="37:34"><name pos:start="37:31" pos:end="37:34">errp</name></expr></argument>, <argument pos:start="37:37" pos:end="37:69"><expr pos:start="37:37" pos:end="37:69"><literal type="string" pos:start="37:37" pos:end="37:69">"Use drive_mirror+NBD instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="39:13" pos:end="39:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="45:9" pos:end="45:76"><expr pos:start="45:9" pos:end="45:75"><name pos:start="45:9" pos:end="45:55"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:31">enabled_capabilities</name><index pos:start="45:32" pos:end="45:55">[<expr pos:start="45:33" pos:end="45:54"><name pos:start="45:33" pos:end="45:54"><name pos:start="45:33" pos:end="45:35">cap</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:42">value</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:54">capability</name></name></expr>]</index></name> <operator pos:start="45:57" pos:end="45:57">=</operator> <name pos:start="45:59" pos:end="45:75"><name pos:start="45:59" pos:end="45:61">cap</name><operator pos:start="45:62" pos:end="45:63">-&gt;</operator><name pos:start="45:64" pos:end="45:68">value</name><operator pos:start="45:69" pos:end="45:70">-&gt;</operator><name pos:start="45:71" pos:end="45:75">state</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="51:5" pos:end="101:5"><if pos:start="51:5" pos:end="101:5">if <condition pos:start="51:8" pos:end="51:31">(<expr pos:start="51:9" pos:end="51:30"><call pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:28">migrate_postcopy_ram</name><argument_list pos:start="51:29" pos:end="51:30">()</argument_list></call></expr>)</condition> <block pos:start="51:33" pos:end="101:5">{<block_content pos:start="53:9" pos:end="99:9">

        <if_stmt pos:start="53:9" pos:end="73:9"><if pos:start="53:9" pos:end="73:9">if <condition pos:start="53:12" pos:end="53:38">(<expr pos:start="53:13" pos:end="53:37"><call pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:35">migrate_use_compression</name><argument_list pos:start="53:36" pos:end="53:37">()</argument_list></call></expr>)</condition> <block pos:start="53:40" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:22">

            <comment type="block" pos:start="55:13" pos:end="63:15">/* The decompression threads asynchronously write into RAM

             * rather than use the atomic copies needed to avoid

             * userfaulting.  It should be possible to fix the decompression

             * threads for compatibility in future.

             */</comment>

            <expr_stmt pos:start="65:13" pos:end="67:40"><expr pos:start="65:13" pos:end="67:39"><call pos:start="65:13" pos:end="67:39"><name pos:start="65:13" pos:end="65:24">error_report</name><argument_list pos:start="65:25" pos:end="67:39">(<argument pos:start="65:26" pos:end="67:38"><expr pos:start="65:26" pos:end="67:38"><literal type="string" pos:start="65:26" pos:end="65:69">"Postcopy is not currently compatible with "</literal>

                         <literal type="string" pos:start="67:26" pos:end="67:38">"compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="71:22"><expr pos:start="69:13" pos:end="71:21"><name pos:start="69:13" pos:end="69:70"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:35">enabled_capabilities</name><index pos:start="69:36" pos:end="69:70">[<expr pos:start="69:37" pos:end="69:69"><name pos:start="69:37" pos:end="69:69">MIGRATION_CAPABILITY_POSTCOPY_RAM</name></expr>]</index></name> <operator pos:start="69:72" pos:end="69:72">=</operator>

                <name pos:start="71:17" pos:end="71:21">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="75:9" pos:end="81:11">/* This check is reasonably expensive, so only when it's being

         * set the first time, also it's only the destination that needs

         * special support.

         */</comment>

        <if_stmt pos:start="83:9" pos:end="99:9"><if pos:start="83:9" pos:end="99:9">if <condition pos:start="83:12" pos:end="85:46">(<expr pos:start="83:13" pos:end="85:45"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:29">old_postcopy_cap</name> <operator pos:start="83:31" pos:end="83:32">&amp;&amp;</operator> <call pos:start="83:34" pos:end="83:68"><name pos:start="83:34" pos:end="83:47">runstate_check</name><argument_list pos:start="83:48" pos:end="83:68">(<argument pos:start="83:49" pos:end="83:67"><expr pos:start="83:49" pos:end="83:67"><name pos:start="83:49" pos:end="83:67">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call> <operator pos:start="83:70" pos:end="83:71">&amp;&amp;</operator>

            <operator pos:start="85:13" pos:end="85:13">!</operator><call pos:start="85:14" pos:end="85:45"><name pos:start="85:14" pos:end="85:43">postcopy_ram_supported_by_host</name><argument_list pos:start="85:44" pos:end="85:45">()</argument_list></call></expr>)</condition> <block pos:start="85:48" pos:end="99:9">{<block_content pos:start="93:13" pos:end="97:22">

            <comment type="block" pos:start="87:13" pos:end="91:15">/* postcopy_ram_supported_by_host will have emitted a more

             * detailed message

             */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:54"><expr pos:start="93:13" pos:end="93:53"><call pos:start="93:13" pos:end="93:53"><name pos:start="93:13" pos:end="93:24">error_report</name><argument_list pos:start="93:25" pos:end="93:53">(<argument pos:start="93:26" pos:end="93:52"><expr pos:start="93:26" pos:end="93:52"><literal type="string" pos:start="93:26" pos:end="93:52">"Postcopy is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="97:22"><expr pos:start="95:13" pos:end="97:21"><name pos:start="95:13" pos:end="95:70"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:35">enabled_capabilities</name><index pos:start="95:36" pos:end="95:70">[<expr pos:start="95:37" pos:end="95:69"><name pos:start="95:37" pos:end="95:69">MIGRATION_CAPABILITY_POSTCOPY_RAM</name></expr>]</index></name> <operator pos:start="95:72" pos:end="95:72">=</operator>

                <name pos:start="97:17" pos:end="97:21">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
