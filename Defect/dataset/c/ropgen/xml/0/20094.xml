<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20094.c" pos:tabs="8"><function pos:start="1:1" pos:end="439:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">pc_q35_init</name><parameter_list pos:start="1:24" pos:end="1:46">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:36">MachineState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:45">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="439:1">{<block_content pos:start="5:5" pos:end="437:5">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">PCMachineState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:24">pcms</name> <init pos:start="5:26" pos:end="5:46">= <expr pos:start="5:28" pos:end="5:46"><call pos:start="5:28" pos:end="5:46"><name pos:start="5:28" pos:end="5:37">PC_MACHINE</name><argument_list pos:start="5:38" pos:end="5:46">(<argument pos:start="5:39" pos:end="5:45"><expr pos:start="5:39" pos:end="5:45"><name pos:start="5:39" pos:end="5:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">Q35PCIHost</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:24">q35_host</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">PCIHostState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">phb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">PCIBus</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:20">host_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">PCIDevice</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:18">lpc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">BusState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:36"><name pos:start="15:15" pos:end="15:20">idebus</name><index pos:start="15:21" pos:end="15:36">[<expr pos:start="15:22" pos:end="15:35"><name pos:start="15:22" pos:end="15:35">MAX_SATA_PORTS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">ISADevice</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:24">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:29"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:28">pci_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:28">rom_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:28">ram_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">GSIState</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:23">gsi_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">ISABus</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:19">pci_enabled</name> <init pos:start="29:21" pos:end="29:23">= <expr pos:start="29:23" pos:end="29:23"><literal type="number" pos:start="29:23" pos:end="29:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:18"><decl pos:start="31:5" pos:end="31:17"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">qemu_irq</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:17">gsi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:10"><decl pos:start="35:5" pos:end="35:9"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:27"><decl pos:start="37:5" pos:end="37:26"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:16">ICH9LPCState</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:26">ich9_lpc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">PCIDevice</name> <modifier pos:start="39:15" pos:end="39:15">*</modifier></type><name pos:start="39:16" pos:end="39:19">ahci</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:28"><decl pos:start="41:5" pos:end="41:27"><type pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:15">DeviceState</name> <modifier pos:start="41:17" pos:end="41:17">*</modifier></type><name pos:start="41:18" pos:end="41:27">icc_bridge</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:28"><decl pos:start="43:5" pos:end="43:27"><type pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:15">PcGuestInfo</name> <modifier pos:start="43:17" pos:end="43:17">*</modifier></type><name pos:start="43:18" pos:end="43:27">guest_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:22"><decl pos:start="45:5" pos:end="45:21"><type pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:14">ram_addr_t</name></type> <name pos:start="45:16" pos:end="45:21">lowmem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:34"><decl pos:start="47:5" pos:end="47:33"><type pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:13">DriveInfo</name> <modifier pos:start="47:15" pos:end="47:15">*</modifier></type><name pos:start="47:16" pos:end="47:33"><name pos:start="47:16" pos:end="47:17">hd</name><index pos:start="47:18" pos:end="47:33">[<expr pos:start="47:19" pos:end="47:32"><name pos:start="47:19" pos:end="47:32">MAX_SATA_PORTS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:50"><decl pos:start="49:5" pos:end="49:49"><type pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:16">MachineClass</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:20">mc</name> <init pos:start="49:22" pos:end="49:49">= <expr pos:start="49:24" pos:end="49:49"><call pos:start="49:24" pos:end="49:49"><name pos:start="49:24" pos:end="49:40">MACHINE_GET_CLASS</name><argument_list pos:start="49:41" pos:end="49:49">(<argument pos:start="49:42" pos:end="49:48"><expr pos:start="49:42" pos:end="49:48"><name pos:start="49:42" pos:end="49:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="53:5" pos:end="69:7">/* Check whether RAM fits below 4G (leaving 1/2 GByte for IO memory

     * and 256 Mbytes for PCI Express Enhanced Configuration Access Mapping

     * also known as MMCFG).

     * If it doesn't, we need to split it in chunks below and above 4G.

     * In any case, try to make sure that guest addresses aligned at

     * 1G boundaries get mapped to host addresses aligned at 1G boundaries.

     * For old machine types, use whatever split we used historically to avoid

     * breaking migration.

     */</comment>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:40">(<expr pos:start="71:9" pos:end="71:39"><name pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:15">machine</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:25">ram_size</name></name> <operator pos:start="71:27" pos:end="71:28">&gt;=</operator> <literal type="number" pos:start="71:30" pos:end="71:39">0xb0000000</literal></expr>)</condition> <block pos:start="71:42" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:58">

        <expr_stmt pos:start="73:9" pos:end="73:58"><expr pos:start="73:9" pos:end="73:57"><name pos:start="73:9" pos:end="73:14">lowmem</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <ternary pos:start="73:18" pos:end="73:57"><condition pos:start="73:18" pos:end="73:33"><expr pos:start="73:18" pos:end="73:31"><name pos:start="73:18" pos:end="73:31">gigabyte_align</name></expr> ?</condition><then pos:start="73:35" pos:end="73:44"> <expr pos:start="73:35" pos:end="73:44"><literal type="number" pos:start="73:35" pos:end="73:44">0x80000000</literal></expr> </then><else pos:start="73:46" pos:end="73:57">: <expr pos:start="73:48" pos:end="73:57"><literal type="number" pos:start="73:48" pos:end="73:57">0xb0000000</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:28">

        <expr_stmt pos:start="77:9" pos:end="77:28"><expr pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:14">lowmem</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:27">0xb0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="87:7">/* Handle the machine opt max-ram-below-4g.  It is basically doing

     * min(qemu limit, user limit).

     */</comment>

    <if_stmt pos:start="89:5" pos:end="105:5"><if pos:start="89:5" pos:end="105:5">if <condition pos:start="89:8" pos:end="89:40">(<expr pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:14">lowmem</name> <operator pos:start="89:16" pos:end="89:16">&gt;</operator> <name pos:start="89:18" pos:end="89:39"><name pos:start="89:18" pos:end="89:21">pcms</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:39">max_ram_below_4g</name></name></expr>)</condition> <block pos:start="89:42" pos:end="105:5">{<block_content pos:start="91:9" pos:end="103:9">

        <expr_stmt pos:start="91:9" pos:end="91:40"><expr pos:start="91:9" pos:end="91:39"><name pos:start="91:9" pos:end="91:14">lowmem</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <name pos:start="91:18" pos:end="91:39"><name pos:start="91:18" pos:end="91:21">pcms</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:39">max_ram_below_4g</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="103:9">if <condition pos:start="93:12" pos:end="95:40">(<expr pos:start="93:13" pos:end="95:39"><name pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:19">machine</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:29">ram_size</name></name> <operator pos:start="93:31" pos:end="93:31">-</operator> <name pos:start="93:33" pos:end="93:38">lowmem</name> <operator pos:start="93:40" pos:end="93:40">&gt;</operator> <name pos:start="93:42" pos:end="93:47">lowmem</name> <operator pos:start="93:49" pos:end="93:50">&amp;&amp;</operator>

            <name pos:start="95:13" pos:end="95:18">lowmem</name> <operator pos:start="95:20" pos:end="95:20">&amp;</operator> <operator pos:start="95:22" pos:end="95:22">(</operator><operator pos:start="95:23" pos:end="95:23">(</operator><literal type="number" pos:start="95:24" pos:end="95:27">1ULL</literal> <operator pos:start="95:29" pos:end="95:30">&lt;&lt;</operator> <literal type="number" pos:start="95:32" pos:end="95:33">30</literal><operator pos:start="95:34" pos:end="95:34">)</operator> <operator pos:start="95:36" pos:end="95:36">-</operator> <literal type="number" pos:start="95:38" pos:end="95:38">1</literal><operator pos:start="95:39" pos:end="95:39">)</operator></expr>)</condition> <block pos:start="95:42" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:49">

            <expr_stmt pos:start="97:13" pos:end="101:49"><expr pos:start="97:13" pos:end="101:48"><call pos:start="97:13" pos:end="101:48"><name pos:start="97:13" pos:end="97:24">error_report</name><argument_list pos:start="97:25" pos:end="101:48">(<argument pos:start="97:26" pos:end="99:76"><expr pos:start="97:26" pos:end="99:76"><literal type="string" pos:start="97:26" pos:end="97:72">"Warning: Large machine and max_ram_below_4g(%"</literal><name pos:start="97:73" pos:end="97:78">PRIu64</name>

                         <literal type="string" pos:start="99:26" pos:end="99:76">") not a multiple of 1G; possible bad performance."</literal></expr></argument>,

                         <argument pos:start="101:26" pos:end="101:47"><expr pos:start="101:26" pos:end="101:47"><name pos:start="101:26" pos:end="101:47"><name pos:start="101:26" pos:end="101:29">pcms</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:47">max_ram_below_4g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="121:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:36">(<expr pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:15">machine</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:25">ram_size</name></name> <operator pos:start="109:27" pos:end="109:28">&gt;=</operator> <name pos:start="109:30" pos:end="109:35">lowmem</name></expr>)</condition> <block pos:start="109:38" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:41">

        <expr_stmt pos:start="111:9" pos:end="111:61"><expr pos:start="111:9" pos:end="111:60"><name pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:12">pcms</name><operator pos:start="111:13" pos:end="111:14">-&gt;</operator><name pos:start="111:15" pos:end="111:31">above_4g_mem_size</name></name> <operator pos:start="111:33" pos:end="111:33">=</operator> <name pos:start="111:35" pos:end="111:51"><name pos:start="111:35" pos:end="111:41">machine</name><operator pos:start="111:42" pos:end="111:43">-&gt;</operator><name pos:start="111:44" pos:end="111:51">ram_size</name></name> <operator pos:start="111:53" pos:end="111:53">-</operator> <name pos:start="111:55" pos:end="111:60">lowmem</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:41"><expr pos:start="113:9" pos:end="113:40"><name pos:start="113:9" pos:end="113:31"><name pos:start="113:9" pos:end="113:12">pcms</name><operator pos:start="113:13" pos:end="113:14">-&gt;</operator><name pos:start="113:15" pos:end="113:31">below_4g_mem_size</name></name> <operator pos:start="113:33" pos:end="113:33">=</operator> <name pos:start="113:35" pos:end="113:40">lowmem</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="121:5">else <block pos:start="115:12" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:52">

        <expr_stmt pos:start="117:9" pos:end="117:36"><expr pos:start="117:9" pos:end="117:35"><name pos:start="117:9" pos:end="117:31"><name pos:start="117:9" pos:end="117:12">pcms</name><operator pos:start="117:13" pos:end="117:14">-&gt;</operator><name pos:start="117:15" pos:end="117:31">above_4g_mem_size</name></name> <operator pos:start="117:33" pos:end="117:33">=</operator> <literal type="number" pos:start="117:35" pos:end="117:35">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:52"><expr pos:start="119:9" pos:end="119:51"><name pos:start="119:9" pos:end="119:31"><name pos:start="119:9" pos:end="119:12">pcms</name><operator pos:start="119:13" pos:end="119:14">-&gt;</operator><name pos:start="119:15" pos:end="119:31">below_4g_mem_size</name></name> <operator pos:start="119:33" pos:end="119:33">=</operator> <name pos:start="119:35" pos:end="119:51"><name pos:start="119:35" pos:end="119:41">machine</name><operator pos:start="119:42" pos:end="119:43">-&gt;</operator><name pos:start="119:44" pos:end="119:51">ram_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:62">(<expr pos:start="125:9" pos:end="125:61"><call pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:19">xen_enabled</name><argument_list pos:start="125:20" pos:end="125:21">()</argument_list></call> <operator pos:start="125:23" pos:end="125:24">&amp;&amp;</operator> <call pos:start="125:26" pos:end="125:56"><name pos:start="125:26" pos:end="125:37">xen_hvm_init</name><argument_list pos:start="125:38" pos:end="125:56">(<argument pos:start="125:39" pos:end="125:42"><expr pos:start="125:39" pos:end="125:42"><name pos:start="125:39" pos:end="125:42">pcms</name></expr></argument>, <argument pos:start="125:45" pos:end="125:55"><expr pos:start="125:45" pos:end="125:55"><operator pos:start="125:45" pos:end="125:45">&amp;</operator><name pos:start="125:46" pos:end="125:55">ram_memory</name></expr></argument>)</argument_list></call> <operator pos:start="125:58" pos:end="125:59">!=</operator> <literal type="number" pos:start="125:61" pos:end="125:61">0</literal></expr>)</condition> <block pos:start="125:64" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:16">

        <expr_stmt pos:start="127:9" pos:end="127:80"><expr pos:start="127:9" pos:end="127:79"><call pos:start="127:9" pos:end="127:79"><name pos:start="127:9" pos:end="127:15">fprintf</name><argument_list pos:start="127:16" pos:end="127:79">(<argument pos:start="127:17" pos:end="127:22"><expr pos:start="127:17" pos:end="127:22"><name pos:start="127:17" pos:end="127:22">stderr</name></expr></argument>, <argument pos:start="127:25" pos:end="127:78"><expr pos:start="127:25" pos:end="127:78"><literal type="string" pos:start="127:25" pos:end="127:78">"xen hardware virtual machine initialisation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:16"><expr pos:start="129:9" pos:end="129:15"><call pos:start="129:9" pos:end="129:15"><name pos:start="129:9" pos:end="129:12">exit</name><argument_list pos:start="129:13" pos:end="129:15">(<argument pos:start="129:14" pos:end="129:14"><expr pos:start="129:14" pos:end="129:14"><literal type="number" pos:start="129:14" pos:end="129:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:52"><expr pos:start="135:5" pos:end="135:51"><name pos:start="135:5" pos:end="135:14">icc_bridge</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <call pos:start="135:18" pos:end="135:51"><name pos:start="135:18" pos:end="135:28">qdev_create</name><argument_list pos:start="135:29" pos:end="135:51">(<argument pos:start="135:30" pos:end="135:33"><expr pos:start="135:30" pos:end="135:33"><name pos:start="135:30" pos:end="135:33">NULL</name></expr></argument>, <argument pos:start="135:36" pos:end="135:50"><expr pos:start="135:36" pos:end="135:50"><name pos:start="135:36" pos:end="135:50">TYPE_ICC_BRIDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="139:56"><expr pos:start="137:5" pos:end="139:55"><call pos:start="137:5" pos:end="139:55"><name pos:start="137:5" pos:end="137:29">object_property_add_child</name><argument_list pos:start="137:30" pos:end="139:55">(<argument pos:start="137:31" pos:end="137:48"><expr pos:start="137:31" pos:end="137:48"><call pos:start="137:31" pos:end="137:48"><name pos:start="137:31" pos:end="137:46">qdev_get_machine</name><argument_list pos:start="137:47" pos:end="137:48">()</argument_list></call></expr></argument>, <argument pos:start="137:51" pos:end="137:62"><expr pos:start="137:51" pos:end="137:62"><literal type="string" pos:start="137:51" pos:end="137:62">"icc-bridge"</literal></expr></argument>,

                              <argument pos:start="139:31" pos:end="139:48"><expr pos:start="139:31" pos:end="139:48"><call pos:start="139:31" pos:end="139:48"><name pos:start="139:31" pos:end="139:36">OBJECT</name><argument_list pos:start="139:37" pos:end="139:48">(<argument pos:start="139:38" pos:end="139:47"><expr pos:start="139:38" pos:end="139:47"><name pos:start="139:38" pos:end="139:47">icc_bridge</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="139:51" pos:end="139:54"><expr pos:start="139:51" pos:end="139:54"><name pos:start="139:51" pos:end="139:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:49"><expr pos:start="143:5" pos:end="143:48"><call pos:start="143:5" pos:end="143:48"><name pos:start="143:5" pos:end="143:16">pc_cpus_init</name><argument_list pos:start="143:17" pos:end="143:48">(<argument pos:start="143:18" pos:end="143:35"><expr pos:start="143:18" pos:end="143:35"><name pos:start="143:18" pos:end="143:35"><name pos:start="143:18" pos:end="143:24">machine</name><operator pos:start="143:25" pos:end="143:26">-&gt;</operator><name pos:start="143:27" pos:end="143:35">cpu_model</name></name></expr></argument>, <argument pos:start="143:38" pos:end="143:47"><expr pos:start="143:38" pos:end="143:47"><name pos:start="143:38" pos:end="143:47">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:38"><expr pos:start="145:5" pos:end="145:37"><call pos:start="145:5" pos:end="145:37"><name pos:start="145:5" pos:end="145:16">pc_acpi_init</name><argument_list pos:start="145:17" pos:end="145:37">(<argument pos:start="145:18" pos:end="145:36"><expr pos:start="145:18" pos:end="145:36"><literal type="string" pos:start="145:18" pos:end="145:36">"q35-acpi-dsdt.aml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:22"><expr pos:start="149:5" pos:end="149:21"><call pos:start="149:5" pos:end="149:21"><name pos:start="149:5" pos:end="149:19">kvmclock_create</name><argument_list pos:start="149:20" pos:end="149:21">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:21">/* pci enabled */</comment>

    <if_stmt pos:start="155:5" pos:end="169:5"><if pos:start="155:5" pos:end="163:5">if <condition pos:start="155:8" pos:end="155:20">(<expr pos:start="155:9" pos:end="155:19"><name pos:start="155:9" pos:end="155:19">pci_enabled</name></expr>)</condition> <block pos:start="155:22" pos:end="163:5">{<block_content pos:start="157:9" pos:end="161:32">

        <expr_stmt pos:start="157:9" pos:end="157:44"><expr pos:start="157:9" pos:end="157:43"><name pos:start="157:9" pos:end="157:18">pci_memory</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <call pos:start="157:22" pos:end="157:43"><name pos:start="157:22" pos:end="157:26">g_new</name><argument_list pos:start="157:27" pos:end="157:43">(<argument pos:start="157:28" pos:end="157:39"><expr pos:start="157:28" pos:end="157:39"><name pos:start="157:28" pos:end="157:39">MemoryRegion</name></expr></argument>, <argument pos:start="157:42" pos:end="157:42"><expr pos:start="157:42" pos:end="157:42"><literal type="number" pos:start="157:42" pos:end="157:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:64"><expr pos:start="159:9" pos:end="159:63"><call pos:start="159:9" pos:end="159:63"><name pos:start="159:9" pos:end="159:26">memory_region_init</name><argument_list pos:start="159:27" pos:end="159:63">(<argument pos:start="159:28" pos:end="159:37"><expr pos:start="159:28" pos:end="159:37"><name pos:start="159:28" pos:end="159:37">pci_memory</name></expr></argument>, <argument pos:start="159:40" pos:end="159:43"><expr pos:start="159:40" pos:end="159:43"><name pos:start="159:40" pos:end="159:43">NULL</name></expr></argument>, <argument pos:start="159:46" pos:end="159:50"><expr pos:start="159:46" pos:end="159:50"><literal type="string" pos:start="159:46" pos:end="159:50">"pci"</literal></expr></argument>, <argument pos:start="159:53" pos:end="159:62"><expr pos:start="159:53" pos:end="159:62"><name pos:start="159:53" pos:end="159:62">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:32"><expr pos:start="161:9" pos:end="161:31"><name pos:start="161:9" pos:end="161:18">rom_memory</name> <operator pos:start="161:20" pos:end="161:20">=</operator> <name pos:start="161:22" pos:end="161:31">pci_memory</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="169:5">else <block pos:start="163:12" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:41">

        <expr_stmt pos:start="165:9" pos:end="165:26"><expr pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:18">pci_memory</name> <operator pos:start="165:20" pos:end="165:20">=</operator> <name pos:start="165:22" pos:end="165:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:41"><expr pos:start="167:9" pos:end="167:40"><name pos:start="167:9" pos:end="167:18">rom_memory</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <call pos:start="167:22" pos:end="167:40"><name pos:start="167:22" pos:end="167:38">get_system_memory</name><argument_list pos:start="167:39" pos:end="167:40">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:42"><expr pos:start="173:5" pos:end="173:41"><name pos:start="173:5" pos:end="173:14">guest_info</name> <operator pos:start="173:16" pos:end="173:16">=</operator> <call pos:start="173:18" pos:end="173:41"><name pos:start="173:18" pos:end="173:35">pc_guest_info_init</name><argument_list pos:start="173:36" pos:end="173:41">(<argument pos:start="173:37" pos:end="173:40"><expr pos:start="173:37" pos:end="173:40"><name pos:start="173:37" pos:end="173:40">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:37"><expr pos:start="175:5" pos:end="175:36"><name pos:start="175:5" pos:end="175:28"><name pos:start="175:5" pos:end="175:14">guest_info</name><operator pos:start="175:15" pos:end="175:16">-&gt;</operator><name pos:start="175:17" pos:end="175:28">isapc_ram_fw</name></name> <operator pos:start="175:30" pos:end="175:30">=</operator> <name pos:start="175:32" pos:end="175:36">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:48"><expr pos:start="177:5" pos:end="177:47"><name pos:start="177:5" pos:end="177:30"><name pos:start="177:5" pos:end="177:14">guest_info</name><operator pos:start="177:15" pos:end="177:16">-&gt;</operator><name pos:start="177:17" pos:end="177:30">has_acpi_build</name></name> <operator pos:start="177:32" pos:end="177:32">=</operator> <name pos:start="177:34" pos:end="177:47">has_acpi_build</name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:58"><expr pos:start="179:5" pos:end="179:57"><name pos:start="179:5" pos:end="179:35"><name pos:start="179:5" pos:end="179:14">guest_info</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:35">has_reserved_memory</name></name> <operator pos:start="179:37" pos:end="179:37">=</operator> <name pos:start="179:39" pos:end="179:57">has_reserved_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:42"><expr pos:start="181:5" pos:end="181:41"><name pos:start="181:5" pos:end="181:27"><name pos:start="181:5" pos:end="181:14">guest_info</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:27">rsdp_in_ram</name></name> <operator pos:start="181:29" pos:end="181:29">=</operator> <name pos:start="181:31" pos:end="181:41">rsdp_in_ram</name></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="189:7">/* Migration was not supported in 2.0 for Q35, so do not bother

     * with this hack (see hw/i386/acpi-build.c).

     */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:43"><expr pos:start="191:5" pos:end="191:42"><name pos:start="191:5" pos:end="191:38"><name pos:start="191:5" pos:end="191:14">guest_info</name><operator pos:start="191:15" pos:end="191:16">-&gt;</operator><name pos:start="191:17" pos:end="191:38">legacy_acpi_table_size</name></name> <operator pos:start="191:40" pos:end="191:40">=</operator> <literal type="number" pos:start="191:42" pos:end="191:42">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="195:5" pos:end="205:5"><if pos:start="195:5" pos:end="205:5">if <condition pos:start="195:8" pos:end="195:24">(<expr pos:start="195:9" pos:end="195:23"><name pos:start="195:9" pos:end="195:23">smbios_defaults</name></expr>)</condition> <block pos:start="195:26" pos:end="205:5">{<block_content pos:start="199:9" pos:end="203:51">

        <comment type="block" pos:start="197:9" pos:end="197:55">/* These values are guest ABI, do not change */</comment>

        <expr_stmt pos:start="199:9" pos:end="203:51"><expr pos:start="199:9" pos:end="203:50"><call pos:start="199:9" pos:end="203:50"><name pos:start="199:9" pos:end="199:27">smbios_set_defaults</name><argument_list pos:start="199:28" pos:end="203:50">(<argument pos:start="199:29" pos:end="199:34"><expr pos:start="199:29" pos:end="199:34"><literal type="string" pos:start="199:29" pos:end="199:34">"QEMU"</literal></expr></argument>, <argument pos:start="199:37" pos:end="199:68"><expr pos:start="199:37" pos:end="199:68"><literal type="string" pos:start="199:37" pos:end="199:68">"Standard PC (Q35 + ICH9, 2009)"</literal></expr></argument>,

                            <argument pos:start="201:29" pos:end="201:36"><expr pos:start="201:29" pos:end="201:36"><name pos:start="201:29" pos:end="201:36"><name pos:start="201:29" pos:end="201:30">mc</name><operator pos:start="201:31" pos:end="201:32">-&gt;</operator><name pos:start="201:33" pos:end="201:36">name</name></name></expr></argument>, <argument pos:start="201:39" pos:end="201:56"><expr pos:start="201:39" pos:end="201:56"><name pos:start="201:39" pos:end="201:56">smbios_legacy_mode</name></expr></argument>, <argument pos:start="201:59" pos:end="201:77"><expr pos:start="201:59" pos:end="201:77"><name pos:start="201:59" pos:end="201:77">smbios_uuid_encoded</name></expr></argument>,

                            <argument pos:start="203:29" pos:end="203:49"><expr pos:start="203:29" pos:end="203:49"><name pos:start="203:29" pos:end="203:49">SMBIOS_ENTRY_POINT_21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="209:5" pos:end="209:40">/* allocate ram and load rom/bios */</comment>

    <if_stmt pos:start="211:5" pos:end="217:5"><if pos:start="211:5" pos:end="217:5">if <condition pos:start="211:8" pos:end="211:23">(<expr pos:start="211:9" pos:end="211:22"><operator pos:start="211:9" pos:end="211:9">!</operator><call pos:start="211:10" pos:end="211:22"><name pos:start="211:10" pos:end="211:20">xen_enabled</name><argument_list pos:start="211:21" pos:end="211:22">()</argument_list></call></expr>)</condition> <block pos:start="211:25" pos:end="217:5">{<block_content pos:start="213:9" pos:end="215:60">

        <expr_stmt pos:start="213:9" pos:end="215:60"><expr pos:start="213:9" pos:end="215:59"><call pos:start="213:9" pos:end="215:59"><name pos:start="213:9" pos:end="213:22">pc_memory_init</name><argument_list pos:start="213:23" pos:end="215:59">(<argument pos:start="213:24" pos:end="213:27"><expr pos:start="213:24" pos:end="213:27"><name pos:start="213:24" pos:end="213:27">pcms</name></expr></argument>, <argument pos:start="213:30" pos:end="213:48"><expr pos:start="213:30" pos:end="213:48"><call pos:start="213:30" pos:end="213:48"><name pos:start="213:30" pos:end="213:46">get_system_memory</name><argument_list pos:start="213:47" pos:end="213:48">()</argument_list></call></expr></argument>,

                       <argument pos:start="215:24" pos:end="215:33"><expr pos:start="215:24" pos:end="215:33"><name pos:start="215:24" pos:end="215:33">rom_memory</name></expr></argument>, <argument pos:start="215:36" pos:end="215:46"><expr pos:start="215:36" pos:end="215:46"><operator pos:start="215:36" pos:end="215:36">&amp;</operator><name pos:start="215:37" pos:end="215:46">ram_memory</name></expr></argument>, <argument pos:start="215:49" pos:end="215:58"><expr pos:start="215:49" pos:end="215:58"><name pos:start="215:49" pos:end="215:58">guest_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="221:5" pos:end="221:19">/* irq lines */</comment>

    <expr_stmt pos:start="223:5" pos:end="223:46"><expr pos:start="223:5" pos:end="223:45"><name pos:start="223:5" pos:end="223:13">gsi_state</name> <operator pos:start="223:15" pos:end="223:15">=</operator> <call pos:start="223:17" pos:end="223:45"><name pos:start="223:17" pos:end="223:25">g_malloc0</name><argument_list pos:start="223:26" pos:end="223:45">(<argument pos:start="223:27" pos:end="223:44"><expr pos:start="223:27" pos:end="223:44"><sizeof pos:start="223:27" pos:end="223:44">sizeof<argument_list pos:start="223:33" pos:end="223:44">(<argument pos:start="223:34" pos:end="223:43"><expr pos:start="223:34" pos:end="223:43"><operator pos:start="223:34" pos:end="223:34">*</operator><name pos:start="223:35" pos:end="223:43">gsi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="237:5"><if pos:start="225:5" pos:end="233:5">if <condition pos:start="225:8" pos:end="225:32">(<expr pos:start="225:9" pos:end="225:31"><call pos:start="225:9" pos:end="225:31"><name pos:start="225:9" pos:end="225:29">kvm_irqchip_in_kernel</name><argument_list pos:start="225:30" pos:end="225:31">()</argument_list></call></expr>)</condition> <block pos:start="225:34" pos:end="233:5">{<block_content pos:start="227:9" pos:end="231:47">

        <expr_stmt pos:start="227:9" pos:end="227:46"><expr pos:start="227:9" pos:end="227:45"><call pos:start="227:9" pos:end="227:45"><name pos:start="227:9" pos:end="227:32">kvm_pc_setup_irq_routing</name><argument_list pos:start="227:33" pos:end="227:45">(<argument pos:start="227:34" pos:end="227:44"><expr pos:start="227:34" pos:end="227:44"><name pos:start="227:34" pos:end="227:44">pci_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="231:47"><expr pos:start="229:9" pos:end="231:46"><name pos:start="229:9" pos:end="229:11">gsi</name> <operator pos:start="229:13" pos:end="229:13">=</operator> <call pos:start="229:15" pos:end="231:46"><name pos:start="229:15" pos:end="229:32">qemu_allocate_irqs</name><argument_list pos:start="229:33" pos:end="231:46">(<argument pos:start="229:34" pos:end="229:51"><expr pos:start="229:34" pos:end="229:51"><name pos:start="229:34" pos:end="229:51">kvm_pc_gsi_handler</name></expr></argument>, <argument pos:start="229:54" pos:end="229:62"><expr pos:start="229:54" pos:end="229:62"><name pos:start="229:54" pos:end="229:62">gsi_state</name></expr></argument>,

                                 <argument pos:start="231:34" pos:end="231:45"><expr pos:start="231:34" pos:end="231:45"><name pos:start="231:34" pos:end="231:45">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="233:7" pos:end="237:5">else <block pos:start="233:12" pos:end="237:5">{<block_content pos:start="235:9" pos:end="235:71">

        <expr_stmt pos:start="235:9" pos:end="235:71"><expr pos:start="235:9" pos:end="235:70"><name pos:start="235:9" pos:end="235:11">gsi</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <call pos:start="235:15" pos:end="235:70"><name pos:start="235:15" pos:end="235:32">qemu_allocate_irqs</name><argument_list pos:start="235:33" pos:end="235:70">(<argument pos:start="235:34" pos:end="235:44"><expr pos:start="235:34" pos:end="235:44"><name pos:start="235:34" pos:end="235:44">gsi_handler</name></expr></argument>, <argument pos:start="235:47" pos:end="235:55"><expr pos:start="235:47" pos:end="235:55"><name pos:start="235:47" pos:end="235:55">gsi_state</name></expr></argument>, <argument pos:start="235:58" pos:end="235:69"><expr pos:start="235:58" pos:end="235:69"><name pos:start="235:58" pos:end="235:69">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:29">/* create pci host bus */</comment>

    <expr_stmt pos:start="243:5" pos:end="243:72"><expr pos:start="243:5" pos:end="243:71"><name pos:start="243:5" pos:end="243:12">q35_host</name> <operator pos:start="243:14" pos:end="243:14">=</operator> <call pos:start="243:16" pos:end="243:71"><name pos:start="243:16" pos:end="243:30">Q35_HOST_DEVICE</name><argument_list pos:start="243:31" pos:end="243:71">(<argument pos:start="243:32" pos:end="243:70"><expr pos:start="243:32" pos:end="243:70"><call pos:start="243:32" pos:end="243:70"><name pos:start="243:32" pos:end="243:42">qdev_create</name><argument_list pos:start="243:43" pos:end="243:70">(<argument pos:start="243:44" pos:end="243:47"><expr pos:start="243:44" pos:end="243:47"><name pos:start="243:44" pos:end="243:47">NULL</name></expr></argument>, <argument pos:start="243:50" pos:end="243:69"><expr pos:start="243:50" pos:end="243:69"><name pos:start="243:50" pos:end="243:69">TYPE_Q35_HOST_DEVICE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:81"><expr pos:start="247:5" pos:end="247:80"><call pos:start="247:5" pos:end="247:80"><name pos:start="247:5" pos:end="247:29">object_property_add_child</name><argument_list pos:start="247:30" pos:end="247:80">(<argument pos:start="247:31" pos:end="247:48"><expr pos:start="247:31" pos:end="247:48"><call pos:start="247:31" pos:end="247:48"><name pos:start="247:31" pos:end="247:46">qdev_get_machine</name><argument_list pos:start="247:47" pos:end="247:48">()</argument_list></call></expr></argument>, <argument pos:start="247:51" pos:end="247:55"><expr pos:start="247:51" pos:end="247:55"><literal type="string" pos:start="247:51" pos:end="247:55">"q35"</literal></expr></argument>, <argument pos:start="247:58" pos:end="247:73"><expr pos:start="247:58" pos:end="247:73"><call pos:start="247:58" pos:end="247:73"><name pos:start="247:58" pos:end="247:63">OBJECT</name><argument_list pos:start="247:64" pos:end="247:73">(<argument pos:start="247:65" pos:end="247:72"><expr pos:start="247:65" pos:end="247:72"><name pos:start="247:65" pos:end="247:72">q35_host</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="247:76" pos:end="247:79"><expr pos:start="247:76" pos:end="247:79"><name pos:start="247:76" pos:end="247:79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:42"><expr pos:start="249:5" pos:end="249:41"><name pos:start="249:5" pos:end="249:28"><name pos:start="249:5" pos:end="249:12">q35_host</name><operator pos:start="249:13" pos:end="249:14">-&gt;</operator><name pos:start="249:15" pos:end="249:17">mch</name><operator pos:start="249:18" pos:end="249:18">.</operator><name pos:start="249:19" pos:end="249:28">ram_memory</name></name> <operator pos:start="249:30" pos:end="249:30">=</operator> <name pos:start="249:32" pos:end="249:41">ram_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:49"><expr pos:start="251:5" pos:end="251:48"><name pos:start="251:5" pos:end="251:35"><name pos:start="251:5" pos:end="251:12">q35_host</name><operator pos:start="251:13" pos:end="251:14">-&gt;</operator><name pos:start="251:15" pos:end="251:17">mch</name><operator pos:start="251:18" pos:end="251:18">.</operator><name pos:start="251:19" pos:end="251:35">pci_address_space</name></name> <operator pos:start="251:37" pos:end="251:37">=</operator> <name pos:start="251:39" pos:end="251:48">pci_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:54"><expr pos:start="253:5" pos:end="253:53"><name pos:start="253:5" pos:end="253:31"><name pos:start="253:5" pos:end="253:12">q35_host</name><operator pos:start="253:13" pos:end="253:14">-&gt;</operator><name pos:start="253:15" pos:end="253:17">mch</name><operator pos:start="253:18" pos:end="253:18">.</operator><name pos:start="253:19" pos:end="253:31">system_memory</name></name> <operator pos:start="253:33" pos:end="253:33">=</operator> <call pos:start="253:35" pos:end="253:53"><name pos:start="253:35" pos:end="253:51">get_system_memory</name><argument_list pos:start="253:52" pos:end="253:53">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:53"><expr pos:start="255:5" pos:end="255:52"><name pos:start="255:5" pos:end="255:34"><name pos:start="255:5" pos:end="255:12">q35_host</name><operator pos:start="255:13" pos:end="255:14">-&gt;</operator><name pos:start="255:15" pos:end="255:17">mch</name><operator pos:start="255:18" pos:end="255:18">.</operator><name pos:start="255:19" pos:end="255:34">address_space_io</name></name> <operator pos:start="255:36" pos:end="255:36">=</operator> <call pos:start="255:38" pos:end="255:52"><name pos:start="255:38" pos:end="255:50">get_system_io</name><argument_list pos:start="255:51" pos:end="255:52">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:62"><expr pos:start="257:5" pos:end="257:61"><name pos:start="257:5" pos:end="257:35"><name pos:start="257:5" pos:end="257:12">q35_host</name><operator pos:start="257:13" pos:end="257:14">-&gt;</operator><name pos:start="257:15" pos:end="257:17">mch</name><operator pos:start="257:18" pos:end="257:18">.</operator><name pos:start="257:19" pos:end="257:35">below_4g_mem_size</name></name> <operator pos:start="257:37" pos:end="257:37">=</operator> <name pos:start="257:39" pos:end="257:61"><name pos:start="257:39" pos:end="257:42">pcms</name><operator pos:start="257:43" pos:end="257:44">-&gt;</operator><name pos:start="257:45" pos:end="257:61">below_4g_mem_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:62"><expr pos:start="259:5" pos:end="259:61"><name pos:start="259:5" pos:end="259:35"><name pos:start="259:5" pos:end="259:12">q35_host</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:17">mch</name><operator pos:start="259:18" pos:end="259:18">.</operator><name pos:start="259:19" pos:end="259:35">above_4g_mem_size</name></name> <operator pos:start="259:37" pos:end="259:37">=</operator> <name pos:start="259:39" pos:end="259:61"><name pos:start="259:39" pos:end="259:42">pcms</name><operator pos:start="259:43" pos:end="259:44">-&gt;</operator><name pos:start="259:45" pos:end="259:61">above_4g_mem_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:42"><expr pos:start="261:5" pos:end="261:41"><name pos:start="261:5" pos:end="261:28"><name pos:start="261:5" pos:end="261:12">q35_host</name><operator pos:start="261:13" pos:end="261:14">-&gt;</operator><name pos:start="261:15" pos:end="261:17">mch</name><operator pos:start="261:18" pos:end="261:18">.</operator><name pos:start="261:19" pos:end="261:28">guest_info</name></name> <operator pos:start="261:30" pos:end="261:30">=</operator> <name pos:start="261:32" pos:end="261:41">guest_info</name></expr>;</expr_stmt>

    <comment type="block" pos:start="263:5" pos:end="263:13">/* pci */</comment>

    <expr_stmt pos:start="265:5" pos:end="265:39"><expr pos:start="265:5" pos:end="265:38"><call pos:start="265:5" pos:end="265:38"><name pos:start="265:5" pos:end="265:20">qdev_init_nofail</name><argument_list pos:start="265:21" pos:end="265:38">(<argument pos:start="265:22" pos:end="265:37"><expr pos:start="265:22" pos:end="265:37"><call pos:start="265:22" pos:end="265:37"><name pos:start="265:22" pos:end="265:27">DEVICE</name><argument_list pos:start="265:28" pos:end="265:37">(<argument pos:start="265:29" pos:end="265:36"><expr pos:start="265:29" pos:end="265:36"><name pos:start="265:29" pos:end="265:36">q35_host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:36"><expr pos:start="267:5" pos:end="267:35"><name pos:start="267:5" pos:end="267:7">phb</name> <operator pos:start="267:9" pos:end="267:9">=</operator> <call pos:start="267:11" pos:end="267:35"><name pos:start="267:11" pos:end="267:25">PCI_HOST_BRIDGE</name><argument_list pos:start="267:26" pos:end="267:35">(<argument pos:start="267:27" pos:end="267:34"><expr pos:start="267:27" pos:end="267:34"><name pos:start="267:27" pos:end="267:34">q35_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:24"><expr pos:start="269:5" pos:end="269:23"><name pos:start="269:5" pos:end="269:12">host_bus</name> <operator pos:start="269:14" pos:end="269:14">=</operator> <name pos:start="269:16" pos:end="269:23"><name pos:start="269:16" pos:end="269:18">phb</name><operator pos:start="269:19" pos:end="269:20">-&gt;</operator><name pos:start="269:21" pos:end="269:23">bus</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="271:5" pos:end="271:24">/* create ISA bus */</comment>

    <expr_stmt pos:start="273:5" pos:end="277:64"><expr pos:start="273:5" pos:end="277:63"><name pos:start="273:5" pos:end="273:7">lpc</name> <operator pos:start="273:9" pos:end="273:9">=</operator> <call pos:start="273:11" pos:end="277:63"><name pos:start="273:11" pos:end="273:41">pci_create_simple_multifunction</name><argument_list pos:start="273:42" pos:end="277:63">(<argument pos:start="273:43" pos:end="273:50"><expr pos:start="273:43" pos:end="273:50"><name pos:start="273:43" pos:end="273:50">host_bus</name></expr></argument>, <argument pos:start="273:53" pos:end="275:56"><expr pos:start="273:53" pos:end="275:56"><call pos:start="273:53" pos:end="275:56"><name pos:start="273:53" pos:end="273:61">PCI_DEVFN</name><argument_list pos:start="273:62" pos:end="275:56">(<argument pos:start="273:63" pos:end="273:74"><expr pos:start="273:63" pos:end="273:74"><name pos:start="273:63" pos:end="273:74">ICH9_LPC_DEV</name></expr></argument>,

                                          <argument pos:start="275:43" pos:end="275:55"><expr pos:start="275:43" pos:end="275:55"><name pos:start="275:43" pos:end="275:55">ICH9_LPC_FUNC</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="275:59" pos:end="275:62"><expr pos:start="275:59" pos:end="275:62"><name pos:start="275:59" pos:end="275:62">true</name></expr></argument>,

                                          <argument pos:start="277:43" pos:end="277:62"><expr pos:start="277:43" pos:end="277:62"><name pos:start="277:43" pos:end="277:62">TYPE_ICH9_LPC_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="281:5" pos:end="289:75"><expr pos:start="281:5" pos:end="289:74"><call pos:start="281:5" pos:end="289:74"><name pos:start="281:5" pos:end="281:28">object_property_add_link</name><argument_list pos:start="281:29" pos:end="289:74">(<argument pos:start="281:30" pos:end="281:44"><expr pos:start="281:30" pos:end="281:44"><call pos:start="281:30" pos:end="281:44"><name pos:start="281:30" pos:end="281:35">OBJECT</name><argument_list pos:start="281:36" pos:end="281:44">(<argument pos:start="281:37" pos:end="281:43"><expr pos:start="281:37" pos:end="281:43"><name pos:start="281:37" pos:end="281:43">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="281:47" pos:end="281:73"><expr pos:start="281:47" pos:end="281:73"><name pos:start="281:47" pos:end="281:73">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>,

                             <argument pos:start="283:30" pos:end="283:49"><expr pos:start="283:30" pos:end="283:49"><name pos:start="283:30" pos:end="283:49">TYPE_HOTPLUG_HANDLER</name></expr></argument>,

                             <argument pos:start="285:30" pos:end="285:55"><expr pos:start="285:30" pos:end="285:55"><operator pos:start="285:30" pos:end="285:30">(</operator><name pos:start="285:31" pos:end="285:36">Object</name> <operator pos:start="285:38" pos:end="285:38">*</operator><operator pos:start="285:39" pos:end="285:39">*</operator><operator pos:start="285:40" pos:end="285:40">)</operator><operator pos:start="285:41" pos:end="285:41">&amp;</operator><name pos:start="285:42" pos:end="285:55"><name pos:start="285:42" pos:end="285:45">pcms</name><operator pos:start="285:46" pos:end="285:47">-&gt;</operator><name pos:start="285:48" pos:end="285:55">acpi_dev</name></name></expr></argument>,

                             <argument pos:start="287:30" pos:end="287:59"><expr pos:start="287:30" pos:end="287:59"><name pos:start="287:30" pos:end="287:59">object_property_allow_set_link</name></expr></argument>,

                             <argument pos:start="289:30" pos:end="289:59"><expr pos:start="289:30" pos:end="289:59"><name pos:start="289:30" pos:end="289:59">OBJ_PROP_LINK_UNREF_ON_RELEASE</name></expr></argument>, <argument pos:start="289:62" pos:end="289:73"><expr pos:start="289:62" pos:end="289:73"><operator pos:start="289:62" pos:end="289:62">&amp;</operator><name pos:start="289:63" pos:end="289:73">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="293:72"><expr pos:start="291:5" pos:end="293:71"><call pos:start="291:5" pos:end="293:71"><name pos:start="291:5" pos:end="291:28">object_property_set_link</name><argument_list pos:start="291:29" pos:end="293:71">(<argument pos:start="291:30" pos:end="291:44"><expr pos:start="291:30" pos:end="291:44"><call pos:start="291:30" pos:end="291:44"><name pos:start="291:30" pos:end="291:35">OBJECT</name><argument_list pos:start="291:36" pos:end="291:44">(<argument pos:start="291:37" pos:end="291:43"><expr pos:start="291:37" pos:end="291:43"><name pos:start="291:37" pos:end="291:43">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="291:47" pos:end="291:57"><expr pos:start="291:47" pos:end="291:57"><call pos:start="291:47" pos:end="291:57"><name pos:start="291:47" pos:end="291:52">OBJECT</name><argument_list pos:start="291:53" pos:end="291:57">(<argument pos:start="291:54" pos:end="291:56"><expr pos:start="291:54" pos:end="291:56"><name pos:start="291:54" pos:end="291:56">lpc</name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="293:30" pos:end="293:56"><expr pos:start="293:30" pos:end="293:56"><name pos:start="293:30" pos:end="293:56">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>, <argument pos:start="293:59" pos:end="293:70"><expr pos:start="293:59" pos:end="293:70"><operator pos:start="293:59" pos:end="293:59">&amp;</operator><name pos:start="293:60" pos:end="293:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="297:5" pos:end="297:36"><expr pos:start="297:5" pos:end="297:35"><name pos:start="297:5" pos:end="297:12">ich9_lpc</name> <operator pos:start="297:14" pos:end="297:14">=</operator> <call pos:start="297:16" pos:end="297:35"><name pos:start="297:16" pos:end="297:30">ICH9_LPC_DEVICE</name><argument_list pos:start="297:31" pos:end="297:35">(<argument pos:start="297:32" pos:end="297:34"><expr pos:start="297:32" pos:end="297:34"><name pos:start="297:32" pos:end="297:34">lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:24"><expr pos:start="299:5" pos:end="299:23"><name pos:start="299:5" pos:end="299:17"><name pos:start="299:5" pos:end="299:12">ich9_lpc</name><operator pos:start="299:13" pos:end="299:14">-&gt;</operator><name pos:start="299:15" pos:end="299:17">pic</name></name> <operator pos:start="299:19" pos:end="299:19">=</operator> <name pos:start="299:21" pos:end="299:23">gsi</name></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:45"><expr pos:start="301:5" pos:end="301:44"><name pos:start="301:5" pos:end="301:20"><name pos:start="301:5" pos:end="301:12">ich9_lpc</name><operator pos:start="301:13" pos:end="301:14">-&gt;</operator><name pos:start="301:15" pos:end="301:20">ioapic</name></name> <operator pos:start="301:22" pos:end="301:22">=</operator> <name pos:start="301:24" pos:end="301:44"><name pos:start="301:24" pos:end="301:32">gsi_state</name><operator pos:start="301:33" pos:end="301:34">-&gt;</operator><name pos:start="301:35" pos:end="301:44">ioapic_irq</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="305:36"><expr pos:start="303:5" pos:end="305:35"><call pos:start="303:5" pos:end="305:35"><name pos:start="303:5" pos:end="303:16">pci_bus_irqs</name><argument_list pos:start="303:17" pos:end="305:35">(<argument pos:start="303:18" pos:end="303:25"><expr pos:start="303:18" pos:end="303:25"><name pos:start="303:18" pos:end="303:25">host_bus</name></expr></argument>, <argument pos:start="303:28" pos:end="303:43"><expr pos:start="303:28" pos:end="303:43"><name pos:start="303:28" pos:end="303:43">ich9_lpc_set_irq</name></expr></argument>, <argument pos:start="303:46" pos:end="303:61"><expr pos:start="303:46" pos:end="303:61"><name pos:start="303:46" pos:end="303:61">ich9_lpc_map_irq</name></expr></argument>, <argument pos:start="303:64" pos:end="303:71"><expr pos:start="303:64" pos:end="303:71"><name pos:start="303:64" pos:end="303:71">ich9_lpc</name></expr></argument>,

                 <argument pos:start="305:18" pos:end="305:34"><expr pos:start="305:18" pos:end="305:34"><name pos:start="305:18" pos:end="305:34">ICH9_LPC_NB_PIRQS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:67"><expr pos:start="307:5" pos:end="307:66"><call pos:start="307:5" pos:end="307:66"><name pos:start="307:5" pos:end="307:28">pci_bus_set_route_irq_fn</name><argument_list pos:start="307:29" pos:end="307:66">(<argument pos:start="307:30" pos:end="307:37"><expr pos:start="307:30" pos:end="307:37"><name pos:start="307:30" pos:end="307:37">host_bus</name></expr></argument>, <argument pos:start="307:40" pos:end="307:65"><expr pos:start="307:40" pos:end="307:65"><name pos:start="307:40" pos:end="307:65">ich9_route_intx_pin_to_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:32"><expr pos:start="309:5" pos:end="309:31"><name pos:start="309:5" pos:end="309:11">isa_bus</name> <operator pos:start="309:13" pos:end="309:13">=</operator> <name pos:start="309:15" pos:end="309:31"><name pos:start="309:15" pos:end="309:22">ich9_lpc</name><operator pos:start="309:23" pos:end="309:24">-&gt;</operator><name pos:start="309:25" pos:end="309:31">isa_bus</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="313:5" pos:end="313:17">/*end early*/</comment>

    <expr_stmt pos:start="315:5" pos:end="315:31"><expr pos:start="315:5" pos:end="315:30"><call pos:start="315:5" pos:end="315:30"><name pos:start="315:5" pos:end="315:16">isa_bus_irqs</name><argument_list pos:start="315:17" pos:end="315:30">(<argument pos:start="315:18" pos:end="315:24"><expr pos:start="315:18" pos:end="315:24"><name pos:start="315:18" pos:end="315:24">isa_bus</name></expr></argument>, <argument pos:start="315:27" pos:end="315:29"><expr pos:start="315:27" pos:end="315:29"><name pos:start="315:27" pos:end="315:29">gsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="319:5" pos:end="331:5"><if pos:start="319:5" pos:end="323:5">if <condition pos:start="319:8" pos:end="319:32">(<expr pos:start="319:9" pos:end="319:31"><call pos:start="319:9" pos:end="319:31"><name pos:start="319:9" pos:end="319:29">kvm_irqchip_in_kernel</name><argument_list pos:start="319:30" pos:end="319:31">()</argument_list></call></expr>)</condition> <block pos:start="319:34" pos:end="323:5">{<block_content pos:start="321:9" pos:end="321:40">

        <expr_stmt pos:start="321:9" pos:end="321:40"><expr pos:start="321:9" pos:end="321:39"><name pos:start="321:9" pos:end="321:13">i8259</name> <operator pos:start="321:15" pos:end="321:15">=</operator> <call pos:start="321:17" pos:end="321:39"><name pos:start="321:17" pos:end="321:30">kvm_i8259_init</name><argument_list pos:start="321:31" pos:end="321:39">(<argument pos:start="321:32" pos:end="321:38"><expr pos:start="321:32" pos:end="321:38"><name pos:start="321:32" pos:end="321:38">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="323:7" pos:end="327:5">else if <condition pos:start="323:15" pos:end="323:29">(<expr pos:start="323:16" pos:end="323:28"><call pos:start="323:16" pos:end="323:28"><name pos:start="323:16" pos:end="323:26">xen_enabled</name><argument_list pos:start="323:27" pos:end="323:28">()</argument_list></call></expr>)</condition> <block pos:start="323:31" pos:end="327:5">{<block_content pos:start="325:9" pos:end="325:48">

        <expr_stmt pos:start="325:9" pos:end="325:48"><expr pos:start="325:9" pos:end="325:47"><name pos:start="325:9" pos:end="325:13">i8259</name> <operator pos:start="325:15" pos:end="325:15">=</operator> <call pos:start="325:17" pos:end="325:47"><name pos:start="325:17" pos:end="325:45">xen_interrupt_controller_init</name><argument_list pos:start="325:46" pos:end="325:47">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="327:7" pos:end="331:5">else <block pos:start="327:12" pos:end="331:5">{<block_content pos:start="329:9" pos:end="329:59">

        <expr_stmt pos:start="329:9" pos:end="329:59"><expr pos:start="329:9" pos:end="329:58"><name pos:start="329:9" pos:end="329:13">i8259</name> <operator pos:start="329:15" pos:end="329:15">=</operator> <call pos:start="329:17" pos:end="329:58"><name pos:start="329:17" pos:end="329:26">i8259_init</name><argument_list pos:start="329:27" pos:end="329:58">(<argument pos:start="329:28" pos:end="329:34"><expr pos:start="329:28" pos:end="329:34"><name pos:start="329:28" pos:end="329:34">isa_bus</name></expr></argument>, <argument pos:start="329:37" pos:end="329:57"><expr pos:start="329:37" pos:end="329:57"><call pos:start="329:37" pos:end="329:57"><name pos:start="329:37" pos:end="329:55">pc_allocate_cpu_irq</name><argument_list pos:start="329:56" pos:end="329:57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="335:5" pos:end="339:5">for <control pos:start="335:9" pos:end="335:38">(<init pos:start="335:10" pos:end="335:15"><expr pos:start="335:10" pos:end="335:14"><name pos:start="335:10" pos:end="335:10">i</name> <operator pos:start="335:12" pos:end="335:12">=</operator> <literal type="number" pos:start="335:14" pos:end="335:14">0</literal></expr>;</init> <condition pos:start="335:17" pos:end="335:33"><expr pos:start="335:17" pos:end="335:32"><name pos:start="335:17" pos:end="335:17">i</name> <operator pos:start="335:19" pos:end="335:19">&lt;</operator> <name pos:start="335:21" pos:end="335:32">ISA_NUM_IRQS</name></expr>;</condition> <incr pos:start="335:35" pos:end="335:37"><expr pos:start="335:35" pos:end="335:37"><name pos:start="335:35" pos:end="335:35">i</name><operator pos:start="335:36" pos:end="335:37">++</operator></expr></incr>)</control> <block pos:start="335:40" pos:end="339:5">{<block_content pos:start="337:9" pos:end="337:43">

        <expr_stmt pos:start="337:9" pos:end="337:43"><expr pos:start="337:9" pos:end="337:42"><name pos:start="337:9" pos:end="337:31"><name pos:start="337:9" pos:end="337:17">gsi_state</name><operator pos:start="337:18" pos:end="337:19">-&gt;</operator><name pos:start="337:20" pos:end="337:28">i8259_irq</name><index pos:start="337:29" pos:end="337:31">[<expr pos:start="337:30" pos:end="337:30"><name pos:start="337:30" pos:end="337:30">i</name></expr>]</index></name> <operator pos:start="337:33" pos:end="337:33">=</operator> <name pos:start="337:35" pos:end="337:42"><name pos:start="337:35" pos:end="337:39">i8259</name><index pos:start="337:40" pos:end="337:42">[<expr pos:start="337:41" pos:end="337:41"><name pos:start="337:41" pos:end="337:41">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="341:5" pos:end="345:5"><if pos:start="341:5" pos:end="345:5">if <condition pos:start="341:8" pos:end="341:20">(<expr pos:start="341:9" pos:end="341:19"><name pos:start="341:9" pos:end="341:19">pci_enabled</name></expr>)</condition> <block pos:start="341:22" pos:end="345:5">{<block_content pos:start="343:9" pos:end="343:42">

        <expr_stmt pos:start="343:9" pos:end="343:42"><expr pos:start="343:9" pos:end="343:41"><call pos:start="343:9" pos:end="343:41"><name pos:start="343:9" pos:end="343:23">ioapic_init_gsi</name><argument_list pos:start="343:24" pos:end="343:41">(<argument pos:start="343:25" pos:end="343:33"><expr pos:start="343:25" pos:end="343:33"><name pos:start="343:25" pos:end="343:33">gsi_state</name></expr></argument>, <argument pos:start="343:36" pos:end="343:40"><expr pos:start="343:36" pos:end="343:40"><literal type="string" pos:start="343:36" pos:end="343:40">"q35"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:33"><expr pos:start="347:5" pos:end="347:32"><call pos:start="347:5" pos:end="347:32"><name pos:start="347:5" pos:end="347:20">qdev_init_nofail</name><argument_list pos:start="347:21" pos:end="347:32">(<argument pos:start="347:22" pos:end="347:31"><expr pos:start="347:22" pos:end="347:31"><name pos:start="347:22" pos:end="347:31">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="351:5" pos:end="351:34"><expr pos:start="351:5" pos:end="351:33"><call pos:start="351:5" pos:end="351:33"><name pos:start="351:5" pos:end="351:24">pc_register_ferr_irq</name><argument_list pos:start="351:25" pos:end="351:33">(<argument pos:start="351:26" pos:end="351:32"><expr pos:start="351:26" pos:end="351:32"><name pos:start="351:26" pos:end="351:32"><name pos:start="351:26" pos:end="351:28">gsi</name><index pos:start="351:29" pos:end="351:32">[<expr pos:start="351:30" pos:end="351:31"><literal type="number" pos:start="351:30" pos:end="351:31">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="355:5" pos:end="355:44"><expr pos:start="355:5" pos:end="355:43"><call pos:start="355:5" pos:end="355:43"><name pos:start="355:5" pos:end="355:10">assert</name><argument_list pos:start="355:11" pos:end="355:43">(<argument pos:start="355:12" pos:end="355:42"><expr pos:start="355:12" pos:end="355:42"><name pos:start="355:12" pos:end="355:23"><name pos:start="355:12" pos:end="355:15">pcms</name><operator pos:start="355:16" pos:end="355:17">-&gt;</operator><name pos:start="355:18" pos:end="355:23">vmport</name></name> <operator pos:start="355:25" pos:end="355:26">!=</operator> <name pos:start="355:28" pos:end="355:42">ON_OFF_AUTO_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="357:5" pos:end="361:5"><if pos:start="357:5" pos:end="361:5">if <condition pos:start="357:8" pos:end="357:41">(<expr pos:start="357:9" pos:end="357:40"><name pos:start="357:9" pos:end="357:20"><name pos:start="357:9" pos:end="357:12">pcms</name><operator pos:start="357:13" pos:end="357:14">-&gt;</operator><name pos:start="357:15" pos:end="357:20">vmport</name></name> <operator pos:start="357:22" pos:end="357:23">==</operator> <name pos:start="357:25" pos:end="357:40">ON_OFF_AUTO_AUTO</name></expr>)</condition> <block pos:start="357:43" pos:end="361:5">{<block_content pos:start="359:9" pos:end="359:72">

        <expr_stmt pos:start="359:9" pos:end="359:72"><expr pos:start="359:9" pos:end="359:71"><name pos:start="359:9" pos:end="359:20"><name pos:start="359:9" pos:end="359:12">pcms</name><operator pos:start="359:13" pos:end="359:14">-&gt;</operator><name pos:start="359:15" pos:end="359:20">vmport</name></name> <operator pos:start="359:22" pos:end="359:22">=</operator> <ternary pos:start="359:24" pos:end="359:71"><condition pos:start="359:24" pos:end="359:38"><expr pos:start="359:24" pos:end="359:36"><call pos:start="359:24" pos:end="359:36"><name pos:start="359:24" pos:end="359:34">xen_enabled</name><argument_list pos:start="359:35" pos:end="359:36">()</argument_list></call></expr> ?</condition><then pos:start="359:40" pos:end="359:54"> <expr pos:start="359:40" pos:end="359:54"><name pos:start="359:40" pos:end="359:54">ON_OFF_AUTO_OFF</name></expr> </then><else pos:start="359:56" pos:end="359:71">: <expr pos:start="359:58" pos:end="359:71"><name pos:start="359:58" pos:end="359:71">ON_OFF_AUTO_ON</name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="365:5" pos:end="365:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="367:5" pos:end="369:69"><expr pos:start="367:5" pos:end="369:68"><call pos:start="367:5" pos:end="369:68"><name pos:start="367:5" pos:end="367:24">pc_basic_device_init</name><argument_list pos:start="367:25" pos:end="369:68">(<argument pos:start="367:26" pos:end="367:32"><expr pos:start="367:26" pos:end="367:32"><name pos:start="367:26" pos:end="367:32">isa_bus</name></expr></argument>, <argument pos:start="367:35" pos:end="367:37"><expr pos:start="367:35" pos:end="367:37"><name pos:start="367:35" pos:end="367:37">gsi</name></expr></argument>, <argument pos:start="367:40" pos:end="367:49"><expr pos:start="367:40" pos:end="367:49"><operator pos:start="367:40" pos:end="367:40">&amp;</operator><name pos:start="367:41" pos:end="367:49">rtc_state</name></expr></argument>, <argument pos:start="367:52" pos:end="367:65"><expr pos:start="367:52" pos:end="367:65"><operator pos:start="367:52" pos:end="367:52">!</operator><name pos:start="367:53" pos:end="367:65"><name pos:start="367:53" pos:end="367:54">mc</name><operator pos:start="367:55" pos:end="367:56">-&gt;</operator><name pos:start="367:57" pos:end="367:65">no_floppy</name></name></expr></argument>,

                         <argument pos:start="369:26" pos:end="369:57"><expr pos:start="369:26" pos:end="369:57"><operator pos:start="369:26" pos:end="369:26">(</operator><name pos:start="369:27" pos:end="369:38"><name pos:start="369:27" pos:end="369:30">pcms</name><operator pos:start="369:31" pos:end="369:32">-&gt;</operator><name pos:start="369:33" pos:end="369:38">vmport</name></name> <operator pos:start="369:40" pos:end="369:41">!=</operator> <name pos:start="369:43" pos:end="369:56">ON_OFF_AUTO_ON</name><operator pos:start="369:57" pos:end="369:57">)</operator></expr></argument>, <argument pos:start="369:60" pos:end="369:67"><expr pos:start="369:60" pos:end="369:67"><literal type="number" pos:start="369:60" pos:end="369:67">0xff0104</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="373:5" pos:end="373:33">/* connect pm stuff to lpc */</comment>

    <expr_stmt pos:start="375:5" pos:end="375:72"><expr pos:start="375:5" pos:end="375:71"><call pos:start="375:5" pos:end="375:71"><name pos:start="375:5" pos:end="375:20">ich9_lpc_pm_init</name><argument_list pos:start="375:21" pos:end="375:71">(<argument pos:start="375:22" pos:end="375:24"><expr pos:start="375:22" pos:end="375:24"><name pos:start="375:22" pos:end="375:24">lpc</name></expr></argument>, <argument pos:start="375:27" pos:end="375:57"><expr pos:start="375:27" pos:end="375:57"><call pos:start="375:27" pos:end="375:57"><name pos:start="375:27" pos:end="375:51">pc_machine_is_smm_enabled</name><argument_list pos:start="375:52" pos:end="375:57">(<argument pos:start="375:53" pos:end="375:56"><expr pos:start="375:53" pos:end="375:56"><name pos:start="375:53" pos:end="375:56">pcms</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="375:60" pos:end="375:70"><expr pos:start="375:60" pos:end="375:70"><operator pos:start="375:60" pos:end="375:60">!</operator><name pos:start="375:61" pos:end="375:70"><name pos:start="375:61" pos:end="375:62">mc</name><operator pos:start="375:63" pos:end="375:64">-&gt;</operator><name pos:start="375:65" pos:end="375:70">no_tco</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="379:5" pos:end="379:69">/* ahci and SATA device, for q35 1 ahci controller is built-in */</comment>

    <expr_stmt pos:start="381:5" pos:end="387:62"><expr pos:start="381:5" pos:end="387:61"><name pos:start="381:5" pos:end="381:8">ahci</name> <operator pos:start="381:10" pos:end="381:10">=</operator> <call pos:start="381:12" pos:end="387:61"><name pos:start="381:12" pos:end="381:42">pci_create_simple_multifunction</name><argument_list pos:start="381:43" pos:end="387:61">(<argument pos:start="381:44" pos:end="381:51"><expr pos:start="381:44" pos:end="381:51"><name pos:start="381:44" pos:end="381:51">host_bus</name></expr></argument>,

                                           <argument pos:start="383:44" pos:end="385:69"><expr pos:start="383:44" pos:end="385:69"><call pos:start="383:44" pos:end="385:69"><name pos:start="383:44" pos:end="383:52">PCI_DEVFN</name><argument_list pos:start="383:53" pos:end="385:69">(<argument pos:start="383:54" pos:end="383:67"><expr pos:start="383:54" pos:end="383:67"><name pos:start="383:54" pos:end="383:67">ICH9_SATA1_DEV</name></expr></argument>,

                                                     <argument pos:start="385:54" pos:end="385:68"><expr pos:start="385:54" pos:end="385:68"><name pos:start="385:54" pos:end="385:68">ICH9_SATA1_FUNC</name></expr></argument>)</argument_list></call></expr></argument>,

                                           <argument pos:start="387:44" pos:end="387:47"><expr pos:start="387:44" pos:end="387:47"><name pos:start="387:44" pos:end="387:47">true</name></expr></argument>, <argument pos:start="387:50" pos:end="387:60"><expr pos:start="387:50" pos:end="387:60"><literal type="string" pos:start="387:50" pos:end="387:60">"ich9-ahci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="389:57"><expr pos:start="389:5" pos:end="389:56"><name pos:start="389:5" pos:end="389:13"><name pos:start="389:5" pos:end="389:10">idebus</name><index pos:start="389:11" pos:end="389:13">[<expr pos:start="389:12" pos:end="389:12"><literal type="number" pos:start="389:12" pos:end="389:12">0</literal></expr>]</index></name> <operator pos:start="389:15" pos:end="389:15">=</operator> <call pos:start="389:17" pos:end="389:56"><name pos:start="389:17" pos:end="389:34">qdev_get_child_bus</name><argument_list pos:start="389:35" pos:end="389:56">(<argument pos:start="389:36" pos:end="389:46"><expr pos:start="389:36" pos:end="389:46"><operator pos:start="389:36" pos:end="389:36">&amp;</operator><name pos:start="389:37" pos:end="389:46"><name pos:start="389:37" pos:end="389:40">ahci</name><operator pos:start="389:41" pos:end="389:42">-&gt;</operator><name pos:start="389:43" pos:end="389:46">qdev</name></name></expr></argument>, <argument pos:start="389:49" pos:end="389:55"><expr pos:start="389:49" pos:end="389:55"><literal type="string" pos:start="389:49" pos:end="389:55">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:57"><expr pos:start="391:5" pos:end="391:56"><name pos:start="391:5" pos:end="391:13"><name pos:start="391:5" pos:end="391:10">idebus</name><index pos:start="391:11" pos:end="391:13">[<expr pos:start="391:12" pos:end="391:12"><literal type="number" pos:start="391:12" pos:end="391:12">1</literal></expr>]</index></name> <operator pos:start="391:15" pos:end="391:15">=</operator> <call pos:start="391:17" pos:end="391:56"><name pos:start="391:17" pos:end="391:34">qdev_get_child_bus</name><argument_list pos:start="391:35" pos:end="391:56">(<argument pos:start="391:36" pos:end="391:46"><expr pos:start="391:36" pos:end="391:46"><operator pos:start="391:36" pos:end="391:36">&amp;</operator><name pos:start="391:37" pos:end="391:46"><name pos:start="391:37" pos:end="391:40">ahci</name><operator pos:start="391:41" pos:end="391:42">-&gt;</operator><name pos:start="391:43" pos:end="391:46">qdev</name></name></expr></argument>, <argument pos:start="391:49" pos:end="391:55"><expr pos:start="391:49" pos:end="391:55"><literal type="string" pos:start="391:49" pos:end="391:55">"ide.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:59"><expr pos:start="393:5" pos:end="393:58"><call pos:start="393:5" pos:end="393:58"><name pos:start="393:5" pos:end="393:12">g_assert</name><argument_list pos:start="393:13" pos:end="393:58">(<argument pos:start="393:14" pos:end="393:57"><expr pos:start="393:14" pos:end="393:57"><name pos:start="393:14" pos:end="393:27">MAX_SATA_PORTS</name> <operator pos:start="393:29" pos:end="393:30">==</operator> <call pos:start="393:32" pos:end="393:45"><name pos:start="393:32" pos:end="393:39">ICH_AHCI</name><argument_list pos:start="393:40" pos:end="393:45">(<argument pos:start="393:41" pos:end="393:44"><expr pos:start="393:41" pos:end="393:44"><name pos:start="393:41" pos:end="393:44">ahci</name></expr></argument>)</argument_list></call><operator pos:start="393:46" pos:end="393:47">-&gt;</operator><name pos:start="393:48" pos:end="393:57"><name pos:start="393:48" pos:end="393:51">ahci</name><operator pos:start="393:52" pos:end="393:52">.</operator><name pos:start="393:53" pos:end="393:57">ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:50"><expr pos:start="395:5" pos:end="395:49"><call pos:start="395:5" pos:end="395:49"><name pos:start="395:5" pos:end="395:17">ide_drive_get</name><argument_list pos:start="395:18" pos:end="395:49">(<argument pos:start="395:19" pos:end="395:20"><expr pos:start="395:19" pos:end="395:20"><name pos:start="395:19" pos:end="395:20">hd</name></expr></argument>, <argument pos:start="395:23" pos:end="395:48"><expr pos:start="395:23" pos:end="395:48"><call pos:start="395:23" pos:end="395:36"><name pos:start="395:23" pos:end="395:30">ICH_AHCI</name><argument_list pos:start="395:31" pos:end="395:36">(<argument pos:start="395:32" pos:end="395:35"><expr pos:start="395:32" pos:end="395:35"><name pos:start="395:32" pos:end="395:35">ahci</name></expr></argument>)</argument_list></call><operator pos:start="395:37" pos:end="395:38">-&gt;</operator><name pos:start="395:39" pos:end="395:48"><name pos:start="395:39" pos:end="395:42">ahci</name><operator pos:start="395:43" pos:end="395:43">.</operator><name pos:start="395:44" pos:end="395:48">ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:35"><expr pos:start="397:5" pos:end="397:34"><call pos:start="397:5" pos:end="397:34"><name pos:start="397:5" pos:end="397:24">ahci_ide_create_devs</name><argument_list pos:start="397:25" pos:end="397:34">(<argument pos:start="397:26" pos:end="397:29"><expr pos:start="397:26" pos:end="397:29"><name pos:start="397:26" pos:end="397:29">ahci</name></expr></argument>, <argument pos:start="397:32" pos:end="397:33"><expr pos:start="397:32" pos:end="397:33"><name pos:start="397:32" pos:end="397:33">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="401:5" pos:end="407:5"><if pos:start="401:5" pos:end="407:5">if <condition pos:start="401:8" pos:end="401:22">(<expr pos:start="401:9" pos:end="401:21"><call pos:start="401:9" pos:end="401:21"><name pos:start="401:9" pos:end="401:19">usb_enabled</name><argument_list pos:start="401:20" pos:end="401:21">()</argument_list></call></expr>)</condition> <block pos:start="401:24" pos:end="407:5">{<block_content pos:start="405:9" pos:end="405:57">

        <comment type="block" pos:start="403:9" pos:end="403:61">/* Should we create 6 UHCI according to ich9 spec? */</comment>

        <expr_stmt pos:start="405:9" pos:end="405:57"><expr pos:start="405:9" pos:end="405:56"><call pos:start="405:9" pos:end="405:56"><name pos:start="405:9" pos:end="405:40">ehci_create_ich9_with_companions</name><argument_list pos:start="405:41" pos:end="405:56">(<argument pos:start="405:42" pos:end="405:49"><expr pos:start="405:42" pos:end="405:49"><name pos:start="405:42" pos:end="405:49">host_bus</name></expr></argument>, <argument pos:start="405:52" pos:end="405:55"><expr pos:start="405:52" pos:end="405:55"><literal type="number" pos:start="405:52" pos:end="405:55">0x1d</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="411:5" pos:end="411:42">/* TODO: Populate SPD eeprom data.  */</comment>

    <expr_stmt pos:start="413:5" pos:end="419:34"><expr pos:start="413:5" pos:end="419:33"><call pos:start="413:5" pos:end="419:33"><name pos:start="413:5" pos:end="413:21">smbus_eeprom_init</name><argument_list pos:start="413:22" pos:end="419:33">(<argument pos:start="413:23" pos:end="417:43"><expr pos:start="413:23" pos:end="417:43"><call pos:start="413:23" pos:end="417:43"><name pos:start="413:23" pos:end="413:35">ich9_smb_init</name><argument_list pos:start="413:36" pos:end="417:43">(<argument pos:start="413:37" pos:end="413:44"><expr pos:start="413:37" pos:end="413:44"><name pos:start="413:37" pos:end="413:44">host_bus</name></expr></argument>,

                                    <argument pos:start="415:37" pos:end="415:74"><expr pos:start="415:37" pos:end="415:74"><call pos:start="415:37" pos:end="415:74"><name pos:start="415:37" pos:end="415:45">PCI_DEVFN</name><argument_list pos:start="415:46" pos:end="415:74">(<argument pos:start="415:47" pos:end="415:58"><expr pos:start="415:47" pos:end="415:58"><name pos:start="415:47" pos:end="415:58">ICH9_SMB_DEV</name></expr></argument>, <argument pos:start="415:61" pos:end="415:73"><expr pos:start="415:61" pos:end="415:73"><name pos:start="415:61" pos:end="415:73">ICH9_SMB_FUNC</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="417:37" pos:end="417:42"><expr pos:start="417:37" pos:end="417:42"><literal type="number" pos:start="417:37" pos:end="417:42">0xb100</literal></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="419:23" pos:end="419:23"><expr pos:start="419:23" pos:end="419:23"><literal type="number" pos:start="419:23" pos:end="419:23">8</literal></expr></argument>, <argument pos:start="419:26" pos:end="419:29"><expr pos:start="419:26" pos:end="419:29"><name pos:start="419:26" pos:end="419:29">NULL</name></expr></argument>, <argument pos:start="419:32" pos:end="419:32"><expr pos:start="419:32" pos:end="419:32"><literal type="number" pos:start="419:32" pos:end="419:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="423:5" pos:end="423:56"><expr pos:start="423:5" pos:end="423:55"><call pos:start="423:5" pos:end="423:55"><name pos:start="423:5" pos:end="423:16">pc_cmos_init</name><argument_list pos:start="423:17" pos:end="423:55">(<argument pos:start="423:18" pos:end="423:21"><expr pos:start="423:18" pos:end="423:21"><name pos:start="423:18" pos:end="423:21">pcms</name></expr></argument>, <argument pos:start="423:24" pos:end="423:32"><expr pos:start="423:24" pos:end="423:32"><name pos:start="423:24" pos:end="423:32"><name pos:start="423:24" pos:end="423:29">idebus</name><index pos:start="423:30" pos:end="423:32">[<expr pos:start="423:31" pos:end="423:31"><literal type="number" pos:start="423:31" pos:end="423:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="423:35" pos:end="423:43"><expr pos:start="423:35" pos:end="423:43"><name pos:start="423:35" pos:end="423:43"><name pos:start="423:35" pos:end="423:40">idebus</name><index pos:start="423:41" pos:end="423:43">[<expr pos:start="423:42" pos:end="423:42"><literal type="number" pos:start="423:42" pos:end="423:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="423:46" pos:end="423:54"><expr pos:start="423:46" pos:end="423:54"><name pos:start="423:46" pos:end="423:54">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="427:5" pos:end="427:71">/* the rest devices to which pci devfn is automatically assigned */</comment>

    <expr_stmt pos:start="429:5" pos:end="429:35"><expr pos:start="429:5" pos:end="429:34"><call pos:start="429:5" pos:end="429:34"><name pos:start="429:5" pos:end="429:15">pc_vga_init</name><argument_list pos:start="429:16" pos:end="429:34">(<argument pos:start="429:17" pos:end="429:23"><expr pos:start="429:17" pos:end="429:23"><name pos:start="429:17" pos:end="429:23">isa_bus</name></expr></argument>, <argument pos:start="429:26" pos:end="429:33"><expr pos:start="429:26" pos:end="429:33"><name pos:start="429:26" pos:end="429:33">host_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:35"><expr pos:start="431:5" pos:end="431:34"><call pos:start="431:5" pos:end="431:34"><name pos:start="431:5" pos:end="431:15">pc_nic_init</name><argument_list pos:start="431:16" pos:end="431:34">(<argument pos:start="431:17" pos:end="431:23"><expr pos:start="431:17" pos:end="431:23"><name pos:start="431:17" pos:end="431:23">isa_bus</name></expr></argument>, <argument pos:start="431:26" pos:end="431:33"><expr pos:start="431:26" pos:end="431:33"><name pos:start="431:26" pos:end="431:33">host_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="433:5" pos:end="437:5"><if pos:start="433:5" pos:end="437:5">if <condition pos:start="433:8" pos:end="433:20">(<expr pos:start="433:9" pos:end="433:19"><name pos:start="433:9" pos:end="433:19">pci_enabled</name></expr>)</condition> <block pos:start="433:22" pos:end="437:5">{<block_content pos:start="435:9" pos:end="435:37">

        <expr_stmt pos:start="435:9" pos:end="435:37"><expr pos:start="435:9" pos:end="435:36"><call pos:start="435:9" pos:end="435:36"><name pos:start="435:9" pos:end="435:26">pc_pci_device_init</name><argument_list pos:start="435:27" pos:end="435:36">(<argument pos:start="435:28" pos:end="435:35"><expr pos:start="435:28" pos:end="435:35"><name pos:start="435:28" pos:end="435:35">host_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
