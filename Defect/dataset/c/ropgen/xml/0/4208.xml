<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4208.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">dec_bcc</name><parameter_list pos:start="1:20" pos:end="1:37">(<parameter pos:start="1:21" pos:end="1:36"><decl pos:start="1:21" pos:end="1:36"><type pos:start="1:21" pos:end="1:34"><name pos:start="1:21" pos:end="1:32">DisasContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">dc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:64">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:19">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:22">dslot</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:39"><expr pos:start="11:5" pos:end="11:38"><name pos:start="11:5" pos:end="11:6">cc</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <call pos:start="11:10" pos:end="11:38"><name pos:start="11:10" pos:end="11:22">EXTRACT_FIELD</name><argument_list pos:start="11:23" pos:end="11:38">(<argument pos:start="11:24" pos:end="11:29"><expr pos:start="11:24" pos:end="11:29"><name pos:start="11:24" pos:end="11:29"><name pos:start="11:24" pos:end="11:25">dc</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:29">ir</name></name></expr></argument>, <argument pos:start="11:32" pos:end="11:33"><expr pos:start="11:32" pos:end="11:33"><literal type="number" pos:start="11:32" pos:end="11:33">21</literal></expr></argument>, <argument pos:start="11:36" pos:end="11:37"><expr pos:start="11:36" pos:end="11:37"><literal type="number" pos:start="11:36" pos:end="11:37">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:9">dslot</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:14">dc</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:18">ir</name></name> <operator pos:start="13:20" pos:end="13:20">&amp;</operator> <operator pos:start="13:22" pos:end="13:22">(</operator><literal type="number" pos:start="13:23" pos:end="13:23">1</literal> <operator pos:start="13:25" pos:end="13:26">&lt;&lt;</operator> <literal type="number" pos:start="13:28" pos:end="13:29">25</literal><operator pos:start="13:30" pos:end="13:30">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:65"><expr pos:start="15:5" pos:end="15:64"><call pos:start="15:5" pos:end="15:64"><name pos:start="15:5" pos:end="15:11">LOG_DIS</name><argument_list pos:start="15:12" pos:end="15:64">(<argument pos:start="15:13" pos:end="15:28"><expr pos:start="15:13" pos:end="15:28"><literal type="string" pos:start="15:13" pos:end="15:28">"bcc%s r%d %x\n"</literal></expr></argument>, <argument pos:start="15:31" pos:end="15:46"><expr pos:start="15:31" pos:end="15:46"><ternary pos:start="15:31" pos:end="15:46"><condition pos:start="15:31" pos:end="15:37"><expr pos:start="15:31" pos:end="15:35"><name pos:start="15:31" pos:end="15:35">dslot</name></expr> ?</condition><then pos:start="15:39" pos:end="15:41"> <expr pos:start="15:39" pos:end="15:41"><literal type="string" pos:start="15:39" pos:end="15:41">"d"</literal></expr> </then><else pos:start="15:43" pos:end="15:46">: <expr pos:start="15:45" pos:end="15:46"><literal type="string" pos:start="15:45" pos:end="15:46">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="15:49" pos:end="15:54"><expr pos:start="15:49" pos:end="15:54"><name pos:start="15:49" pos:end="15:54"><name pos:start="15:49" pos:end="15:50">dc</name><operator pos:start="15:51" pos:end="15:52">-&gt;</operator><name pos:start="15:53" pos:end="15:54">ra</name></name></expr></argument>, <argument pos:start="15:57" pos:end="15:63"><expr pos:start="15:57" pos:end="15:63"><name pos:start="15:57" pos:end="15:63"><name pos:start="15:57" pos:end="15:58">dc</name><operator pos:start="15:59" pos:end="15:60">-&gt;</operator><name pos:start="15:61" pos:end="15:63">imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:6">dc</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:22">delayed_branch</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <literal type="number" pos:start="19:26" pos:end="19:26">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><name pos:start="21:9" pos:end="21:13">dslot</name></expr>)</condition> <block pos:start="21:16" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:57">

        <expr_stmt pos:start="23:9" pos:end="23:31"><expr pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:10">dc</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:26">delayed_branch</name></name> <operator pos:start="23:28" pos:end="23:28">=</operator> <literal type="number" pos:start="23:30" pos:end="23:30">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:10">dc</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:20">tb_flags</name></name> <operator pos:start="25:22" pos:end="25:23">|=</operator> <name pos:start="25:25" pos:end="25:30">D_FLAG</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="29:57"><expr pos:start="27:9" pos:end="29:56"><call pos:start="27:9" pos:end="29:56"><name pos:start="27:9" pos:end="27:21">tcg_gen_st_tl</name><argument_list pos:start="27:22" pos:end="29:56">(<argument pos:start="27:23" pos:end="27:75"><expr pos:start="27:23" pos:end="27:75"><call pos:start="27:23" pos:end="27:75"><name pos:start="27:23" pos:end="27:34">tcg_const_tl</name><argument_list pos:start="27:35" pos:end="27:75">(<argument pos:start="27:36" pos:end="27:74"><expr pos:start="27:36" pos:end="27:74"><name pos:start="27:36" pos:end="27:45"><name pos:start="27:36" pos:end="27:37">dc</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:45">type_b</name></name> <operator pos:start="27:47" pos:end="27:48">&amp;&amp;</operator> <operator pos:start="27:50" pos:end="27:50">(</operator><name pos:start="27:51" pos:end="27:62"><name pos:start="27:51" pos:end="27:52">dc</name><operator pos:start="27:53" pos:end="27:54">-&gt;</operator><name pos:start="27:55" pos:end="27:62">tb_flags</name></name> <operator pos:start="27:64" pos:end="27:64">&amp;</operator> <name pos:start="27:66" pos:end="27:73">IMM_FLAG</name><operator pos:start="27:74" pos:end="27:74">)</operator></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="29:23" pos:end="29:29"><expr pos:start="29:23" pos:end="29:29"><name pos:start="29:23" pos:end="29:29">cpu_env</name></expr></argument>, <argument pos:start="29:32" pos:end="29:55"><expr pos:start="29:32" pos:end="29:55"><call pos:start="29:32" pos:end="29:55"><name pos:start="29:32" pos:end="29:39">offsetof</name><argument_list pos:start="29:40" pos:end="29:55">(<argument pos:start="29:41" pos:end="29:48"><expr pos:start="29:41" pos:end="29:48"><name pos:start="29:41" pos:end="29:48">CPUState</name></expr></argument>, <argument pos:start="29:51" pos:end="29:54"><expr pos:start="29:51" pos:end="29:54"><name pos:start="29:51" pos:end="29:54">bimm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="49:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:38">(<expr pos:start="35:9" pos:end="35:37"><call pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:33">dec_alu_op_b_is_small_imm</name><argument_list pos:start="35:34" pos:end="35:37">(<argument pos:start="35:35" pos:end="35:36"><expr pos:start="35:35" pos:end="35:36"><name pos:start="35:35" pos:end="35:36">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:40" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:54">

        <decl_stmt pos:start="37:9" pos:end="37:53"><decl pos:start="37:9" pos:end="37:52"><type pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:15">int32_t</name></type> <name pos:start="37:17" pos:end="37:22">offset</name> <init pos:start="37:24" pos:end="37:52">= <expr pos:start="37:26" pos:end="37:52"><operator pos:start="37:26" pos:end="37:26">(</operator><name pos:start="37:27" pos:end="37:33">int32_t</name><operator pos:start="37:34" pos:end="37:34">)</operator><operator pos:start="37:35" pos:end="37:35">(</operator><operator pos:start="37:36" pos:end="37:36">(</operator><name pos:start="37:37" pos:end="37:43">int16_t</name><operator pos:start="37:44" pos:end="37:44">)</operator><name pos:start="37:45" pos:end="37:51"><name pos:start="37:45" pos:end="37:46">dc</name><operator pos:start="37:47" pos:end="37:48">-&gt;</operator><name pos:start="37:49" pos:end="37:51">imm</name></name><operator pos:start="37:52" pos:end="37:52">)</operator></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="37:55" pos:end="37:73">/* sign-extend.  */</comment>



        <expr_stmt pos:start="41:9" pos:end="41:54"><expr pos:start="41:9" pos:end="41:53"><call pos:start="41:9" pos:end="41:53"><name pos:start="41:9" pos:end="41:23">tcg_gen_movi_tl</name><argument_list pos:start="41:24" pos:end="41:53">(<argument pos:start="41:25" pos:end="41:35"><expr pos:start="41:25" pos:end="41:35"><name pos:start="41:25" pos:end="41:35">env_btarget</name></expr></argument>, <argument pos:start="41:38" pos:end="41:52"><expr pos:start="41:38" pos:end="41:52"><name pos:start="41:38" pos:end="41:43"><name pos:start="41:38" pos:end="41:39">dc</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:43">pc</name></name> <operator pos:start="41:45" pos:end="41:45">+</operator> <name pos:start="41:47" pos:end="41:52">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="49:5">else <block pos:start="43:12" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:70">

        <expr_stmt pos:start="45:9" pos:end="45:45"><expr pos:start="45:9" pos:end="45:44"><call pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:23">tcg_gen_movi_tl</name><argument_list pos:start="45:24" pos:end="45:44">(<argument pos:start="45:25" pos:end="45:35"><expr pos:start="45:25" pos:end="45:35"><name pos:start="45:25" pos:end="45:35">env_btarget</name></expr></argument>, <argument pos:start="45:38" pos:end="45:43"><expr pos:start="45:38" pos:end="45:43"><name pos:start="45:38" pos:end="45:43"><name pos:start="45:38" pos:end="45:39">dc</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:43">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:70"><expr pos:start="47:9" pos:end="47:69"><call pos:start="47:9" pos:end="47:69"><name pos:start="47:9" pos:end="47:22">tcg_gen_add_tl</name><argument_list pos:start="47:23" pos:end="47:69">(<argument pos:start="47:24" pos:end="47:34"><expr pos:start="47:24" pos:end="47:34"><name pos:start="47:24" pos:end="47:34">env_btarget</name></expr></argument>, <argument pos:start="47:37" pos:end="47:47"><expr pos:start="47:37" pos:end="47:47"><name pos:start="47:37" pos:end="47:47">env_btarget</name></expr></argument>, <argument pos:start="47:50" pos:end="47:68"><expr pos:start="47:50" pos:end="47:68"><operator pos:start="47:50" pos:end="47:50">*</operator><operator pos:start="47:51" pos:end="47:51">(</operator><call pos:start="47:52" pos:end="47:67"><name pos:start="47:52" pos:end="47:63">dec_alu_op_b</name><argument_list pos:start="47:64" pos:end="47:67">(<argument pos:start="47:65" pos:end="47:66"><expr pos:start="47:65" pos:end="47:66"><name pos:start="47:65" pos:end="47:66">dc</name></expr></argument>)</argument_list></call><operator pos:start="47:68" pos:end="47:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:11">jmp</name></name> <operator pos:start="51:13" pos:end="51:13">=</operator> <name pos:start="51:15" pos:end="51:26">JMP_INDIRECT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:64"><expr pos:start="53:5" pos:end="53:63"><call pos:start="53:5" pos:end="53:63"><name pos:start="53:5" pos:end="53:11">eval_cc</name><argument_list pos:start="53:12" pos:end="53:63">(<argument pos:start="53:13" pos:end="53:14"><expr pos:start="53:13" pos:end="53:14"><name pos:start="53:13" pos:end="53:14">dc</name></expr></argument>, <argument pos:start="53:17" pos:end="53:18"><expr pos:start="53:17" pos:end="53:18"><name pos:start="53:17" pos:end="53:18">cc</name></expr></argument>, <argument pos:start="53:21" pos:end="53:30"><expr pos:start="53:21" pos:end="53:30"><name pos:start="53:21" pos:end="53:30">env_btaken</name></expr></argument>, <argument pos:start="53:33" pos:end="53:45"><expr pos:start="53:33" pos:end="53:45"><name pos:start="53:33" pos:end="53:45"><name pos:start="53:33" pos:end="53:37">cpu_R</name><index pos:start="53:38" pos:end="53:45">[<expr pos:start="53:39" pos:end="53:44"><name pos:start="53:39" pos:end="53:44"><name pos:start="53:39" pos:end="53:40">dc</name><operator pos:start="53:41" pos:end="53:42">-&gt;</operator><name pos:start="53:43" pos:end="53:44">ra</name></name></expr>]</index></name></expr></argument>, <argument pos:start="53:48" pos:end="53:62"><expr pos:start="53:48" pos:end="53:62"><call pos:start="53:48" pos:end="53:62"><name pos:start="53:48" pos:end="53:59">tcg_const_tl</name><argument_list pos:start="53:60" pos:end="53:62">(<argument pos:start="53:61" pos:end="53:61"><expr pos:start="53:61" pos:end="53:61"><literal type="number" pos:start="53:61" pos:end="53:61">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
