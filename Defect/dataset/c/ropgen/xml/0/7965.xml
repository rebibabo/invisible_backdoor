<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7965.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:35">handle_cpu_signal</name><parameter_list pos:start="1:36" pos:end="5:46">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:45">uintptr_t</name></type> <name pos:start="1:47" pos:end="1:48">pc</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:71"><decl pos:start="1:51" pos:end="1:71"><type pos:start="1:51" pos:end="1:71"><name pos:start="1:51" pos:end="1:58">unsigned</name> <name pos:start="1:60" pos:end="1:63">long</name></type> <name pos:start="1:65" pos:end="1:71">address</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:48"><decl pos:start="3:37" pos:end="3:48"><type pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:48">is_write</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:67"><decl pos:start="3:51" pos:end="3:67"><type pos:start="3:51" pos:end="3:67"><name pos:start="3:51" pos:end="3:58">sigset_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:67">old_set</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:45"><decl pos:start="5:37" pos:end="5:45"><type pos:start="5:37" pos:end="5:45"><name pos:start="5:37" pos:end="5:40">void</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:45">puc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="85:1">{<block_content pos:start="9:5" pos:end="83:13">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">TranslationBlock</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="22:0"><if pos:start="15:5" pos:end="22:0">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:22">cpu_single_env</name></expr>)</condition> <block pos:start="15:25" pos:end="22:0">{<block_content pos:start="17:9" pos:end="17:29">

        <expr_stmt pos:start="17:9" pos:end="17:29"><expr pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:11">env</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:28">cpu_single_env</name></expr>;</expr_stmt> <comment type="block" pos:start="17:31" pos:end="17:80">/* XXX: find a correct solution for multithread */</comment>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="21:1" pos:end="21:25">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:11">defined</name><argument_list pos:start="21:12" pos:end="21:25">(<argument pos:start="21:13" pos:end="21:24"><expr pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:24">DEBUG_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="23:5" pos:end="28:0"><expr pos:start="23:5" pos:end="25:65"><call pos:start="23:5" pos:end="25:65"><name pos:start="23:5" pos:end="23:15">qemu_printf</name><argument_list pos:start="23:16" pos:end="25:65">(<argument pos:start="23:17" pos:end="23:78"><expr pos:start="23:17" pos:end="23:78"><literal type="string" pos:start="23:17" pos:end="23:78">"qemu: SIGSEGV pc=0x%08lx address=%08lx w=%d oldset=0x%08lx\n"</literal></expr></argument>,

                <argument pos:start="25:17" pos:end="25:18"><expr pos:start="25:17" pos:end="25:18"><name pos:start="25:17" pos:end="25:18">pc</name></expr></argument>, <argument pos:start="25:21" pos:end="25:27"><expr pos:start="25:21" pos:end="25:27"><name pos:start="25:21" pos:end="25:27">address</name></expr></argument>, <argument pos:start="25:30" pos:end="25:37"><expr pos:start="25:30" pos:end="25:37"><name pos:start="25:30" pos:end="25:37">is_write</name></expr></argument>, <argument pos:start="25:40" pos:end="25:64"><expr pos:start="25:40" pos:end="25:64"><operator pos:start="25:40" pos:end="25:40">*</operator><operator pos:start="25:41" pos:end="25:41">(</operator><name pos:start="25:42" pos:end="25:49">unsigned</name> <name pos:start="25:51" pos:end="25:54">long</name> <operator pos:start="25:56" pos:end="25:56">*</operator><operator pos:start="25:57" pos:end="25:57">)</operator><name pos:start="25:58" pos:end="25:64">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="29:5" pos:end="29:28">/* XXX: locking issue */</comment>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:58">(<expr pos:start="31:9" pos:end="31:57"><name pos:start="31:9" pos:end="31:16">is_write</name> <operator pos:start="31:18" pos:end="31:19">&amp;&amp;</operator> <call pos:start="31:21" pos:end="31:57"><name pos:start="31:21" pos:end="31:34">page_unprotect</name><argument_list pos:start="31:35" pos:end="31:57">(<argument pos:start="31:36" pos:end="31:47"><expr pos:start="31:36" pos:end="31:47"><call pos:start="31:36" pos:end="31:47"><name pos:start="31:36" pos:end="31:38">h2g</name><argument_list pos:start="31:39" pos:end="31:47">(<argument pos:start="31:40" pos:end="31:46"><expr pos:start="31:40" pos:end="31:46"><name pos:start="31:40" pos:end="31:46">address</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:50" pos:end="31:51"><expr pos:start="31:50" pos:end="31:51"><name pos:start="31:50" pos:end="31:51">pc</name></expr></argument>, <argument pos:start="31:54" pos:end="31:56"><expr pos:start="31:54" pos:end="31:56"><name pos:start="31:54" pos:end="31:56">puc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:60" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:17">

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:35">/* see if it is an MMU fault */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:69"><expr pos:start="41:5" pos:end="41:68"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:68"><name pos:start="41:11" pos:end="41:30">cpu_handle_mmu_fault</name><argument_list pos:start="41:31" pos:end="41:68">(<argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:34">env</name></expr></argument>, <argument pos:start="41:37" pos:end="41:43"><expr pos:start="41:37" pos:end="41:43"><name pos:start="41:37" pos:end="41:43">address</name></expr></argument>, <argument pos:start="41:46" pos:end="41:53"><expr pos:start="41:46" pos:end="41:53"><name pos:start="41:46" pos:end="41:53">is_write</name></expr></argument>, <argument pos:start="41:56" pos:end="41:67"><expr pos:start="41:56" pos:end="41:67"><name pos:start="41:56" pos:end="41:67">MMU_USER_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:17">

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return> <comment type="block" pos:start="45:19" pos:end="45:40">/* not an MMU fault */</comment>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:17">(<expr pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:14">==</operator> <literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>)</condition> <block pos:start="49:19" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:17">

        <return pos:start="51:9" pos:end="51:17">return <expr pos:start="51:16" pos:end="51:16"><literal type="number" pos:start="51:16" pos:end="51:16">1</literal></expr>;</return> <comment type="block" pos:start="51:19" pos:end="51:80">/* the MMU fault was handled without causing real CPU fault */</comment>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="55:5" pos:end="55:38">/* now we have a real cpu fault */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:24"><expr pos:start="57:5" pos:end="57:23"><name pos:start="57:5" pos:end="57:6">tb</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <call pos:start="57:10" pos:end="57:23"><name pos:start="57:10" pos:end="57:19">tb_find_pc</name><argument_list pos:start="57:20" pos:end="57:23">(<argument pos:start="57:21" pos:end="57:22"><expr pos:start="57:21" pos:end="57:22"><name pos:start="57:21" pos:end="57:22">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:11">(<expr pos:start="59:9" pos:end="59:10"><name pos:start="59:9" pos:end="59:10">tb</name></expr>)</condition> <block pos:start="59:13" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:39">

        <comment type="block" pos:start="61:9" pos:end="63:33">/* the PC is inside the translated code. It means that we have

           a virtual CPU fault */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:39"><expr pos:start="65:9" pos:end="65:38"><call pos:start="65:9" pos:end="65:38"><name pos:start="65:9" pos:end="65:25">cpu_restore_state</name><argument_list pos:start="65:26" pos:end="65:38">(<argument pos:start="65:27" pos:end="65:28"><expr pos:start="65:27" pos:end="65:28"><name pos:start="65:27" pos:end="65:28">tb</name></expr></argument>, <argument pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><name pos:start="65:31" pos:end="65:33">env</name></expr></argument>, <argument pos:start="65:36" pos:end="65:37"><expr pos:start="65:36" pos:end="65:37"><name pos:start="65:36" pos:end="65:37">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="73:36">/* we restore the process signal mask as the sigreturn should

       do it (XXX: use sigsetjmp) */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:44"><expr pos:start="75:5" pos:end="75:43"><call pos:start="75:5" pos:end="75:43"><name pos:start="75:5" pos:end="75:15">sigprocmask</name><argument_list pos:start="75:16" pos:end="75:43">(<argument pos:start="75:17" pos:end="75:27"><expr pos:start="75:17" pos:end="75:27"><name pos:start="75:17" pos:end="75:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="75:30" pos:end="75:36"><expr pos:start="75:30" pos:end="75:36"><name pos:start="75:30" pos:end="75:36">old_set</name></expr></argument>, <argument pos:start="75:39" pos:end="75:42"><expr pos:start="75:39" pos:end="75:42"><name pos:start="75:39" pos:end="75:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:26"><expr pos:start="77:5" pos:end="77:25"><call pos:start="77:5" pos:end="77:25"><name pos:start="77:5" pos:end="77:20">exception_action</name><argument_list pos:start="77:21" pos:end="77:25">(<argument pos:start="77:22" pos:end="77:24"><expr pos:start="77:22" pos:end="77:24"><name pos:start="77:22" pos:end="77:24">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:26">/* never comes here */</comment>

    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
