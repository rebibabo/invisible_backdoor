<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20069.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">xen_host_pci_get_value</name><parameter_list pos:start="1:34" pos:end="3:65">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:50">XenHostPCIDevice</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">d</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:71"><decl pos:start="1:56" pos:end="1:71"><type pos:start="1:56" pos:end="1:71"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:65">char</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:71">name</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:54"><decl pos:start="3:35" pos:end="3:54"><type pos:start="3:35" pos:end="3:54"><name pos:start="3:35" pos:end="3:42">unsigned</name> <name pos:start="3:44" pos:end="3:46">int</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:54">pvalue</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:64"><decl pos:start="3:57" pos:end="3:64"><type pos:start="3:57" pos:end="3:64"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:64">base</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:14">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:23"><name pos:start="7:10" pos:end="7:13">path</name><index pos:start="7:14" pos:end="7:23">[<expr pos:start="7:15" pos:end="7:22"><name pos:start="7:15" pos:end="7:22">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:48"><name pos:start="9:10" pos:end="9:12">buf</name><index pos:start="9:13" pos:end="9:48">[<expr pos:start="9:14" pos:end="9:47"><name pos:start="9:14" pos:end="9:47">XEN_HOST_PCI_GET_VALUE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name></decl>, <decl pos:start="11:13" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:14">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:23">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:16">endptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:57"><expr pos:start="19:5" pos:end="19:56"><call pos:start="19:5" pos:end="19:56"><name pos:start="19:5" pos:end="19:27">xen_host_pci_sysfs_path</name><argument_list pos:start="19:28" pos:end="19:56">(<argument pos:start="19:29" pos:end="19:29"><expr pos:start="19:29" pos:end="19:29"><name pos:start="19:29" pos:end="19:29">d</name></expr></argument>, <argument pos:start="19:32" pos:end="19:35"><expr pos:start="19:32" pos:end="19:35"><name pos:start="19:32" pos:end="19:35">name</name></expr></argument>, <argument pos:start="19:38" pos:end="19:41"><expr pos:start="19:38" pos:end="19:41"><name pos:start="19:38" pos:end="19:41">path</name></expr></argument>, <argument pos:start="19:44" pos:end="19:55"><expr pos:start="19:44" pos:end="19:55"><sizeof pos:start="19:44" pos:end="19:55">sizeof<argument_list pos:start="19:50" pos:end="19:55">(<argument pos:start="19:51" pos:end="19:54"><expr pos:start="19:51" pos:end="19:54"><name pos:start="19:51" pos:end="19:54">path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:6">fd</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <call pos:start="23:10" pos:end="23:29"><name pos:start="23:10" pos:end="23:13">open</name><argument_list pos:start="23:14" pos:end="23:29">(<argument pos:start="23:15" pos:end="23:18"><expr pos:start="23:15" pos:end="23:18"><name pos:start="23:15" pos:end="23:18">path</name></expr></argument>, <argument pos:start="23:21" pos:end="23:28"><expr pos:start="23:21" pos:end="23:28"><name pos:start="23:21" pos:end="23:28">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:10">fd</name> <operator pos:start="25:12" pos:end="25:13">==</operator> <operator pos:start="25:15" pos:end="25:15">-</operator><literal type="number" pos:start="25:16" pos:end="25:16">1</literal></expr>)</condition> <block pos:start="25:19" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:22">

        <expr_stmt pos:start="27:9" pos:end="27:78"><expr pos:start="27:9" pos:end="27:77"><call pos:start="27:9" pos:end="27:77"><name pos:start="27:9" pos:end="27:24">XEN_HOST_PCI_LOG</name><argument_list pos:start="27:25" pos:end="27:77">(<argument pos:start="27:26" pos:end="27:53"><expr pos:start="27:26" pos:end="27:53"><literal type="string" pos:start="27:26" pos:end="27:53">"Error: Can't open %s: %s\n"</literal></expr></argument>, <argument pos:start="27:56" pos:end="27:59"><expr pos:start="27:56" pos:end="27:59"><name pos:start="27:56" pos:end="27:59">path</name></expr></argument>, <argument pos:start="27:62" pos:end="27:76"><expr pos:start="27:62" pos:end="27:76"><call pos:start="27:62" pos:end="27:76"><name pos:start="27:62" pos:end="27:69">strerror</name><argument_list pos:start="27:70" pos:end="27:76">(<argument pos:start="27:71" pos:end="27:75"><expr pos:start="27:71" pos:end="27:75"><name pos:start="27:71" pos:end="27:75">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:22">return <expr pos:start="29:16" pos:end="29:21"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <do pos:start="33:5" pos:end="45:21">do <block pos:start="33:8" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9">

        <expr_stmt pos:start="35:9" pos:end="35:46"><expr pos:start="35:9" pos:end="35:45"><name pos:start="35:9" pos:end="35:10">rc</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:45"><name pos:start="35:14" pos:end="35:17">read</name><argument_list pos:start="35:18" pos:end="35:45">(<argument pos:start="35:19" pos:end="35:20"><expr pos:start="35:19" pos:end="35:20"><name pos:start="35:19" pos:end="35:20">fd</name></expr></argument>, <argument pos:start="35:23" pos:end="35:26"><expr pos:start="35:23" pos:end="35:26"><operator pos:start="35:23" pos:end="35:23">&amp;</operator><name pos:start="35:24" pos:end="35:26">buf</name></expr></argument>, <argument pos:start="35:29" pos:end="35:44"><expr pos:start="35:29" pos:end="35:44"><sizeof pos:start="35:29" pos:end="35:40">sizeof <argument_list pos:start="35:36" pos:end="35:40">(<argument pos:start="35:37" pos:end="35:39"><expr pos:start="35:37" pos:end="35:39"><name pos:start="35:37" pos:end="35:39">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="35:42" pos:end="35:42">-</operator> <literal type="number" pos:start="35:44" pos:end="35:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:37">(<expr pos:start="37:13" pos:end="37:36"><name pos:start="37:13" pos:end="37:14">rc</name> <operator pos:start="37:16" pos:end="37:16">&lt;</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal> <operator pos:start="37:20" pos:end="37:21">&amp;&amp;</operator> <name pos:start="37:23" pos:end="37:27">errno</name> <operator pos:start="37:29" pos:end="37:30">!=</operator> <name pos:start="37:32" pos:end="37:36">EINTR</name></expr>)</condition> <block pos:start="37:39" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:21">

            <expr_stmt pos:start="39:13" pos:end="39:24"><expr pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:14">rc</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <operator pos:start="39:18" pos:end="39:18">-</operator><name pos:start="39:19" pos:end="39:23">errno</name></expr>;</expr_stmt>

            <goto pos:start="41:13" pos:end="41:21">goto <name pos:start="41:18" pos:end="41:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="45:13" pos:end="45:20">(<expr pos:start="45:14" pos:end="45:19"><name pos:start="45:14" pos:end="45:15">rc</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition>;</do>

    <expr_stmt pos:start="47:5" pos:end="47:16"><expr pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:11"><name pos:start="47:5" pos:end="47:7">buf</name><index pos:start="47:8" pos:end="47:11">[<expr pos:start="47:9" pos:end="47:10"><name pos:start="47:9" pos:end="47:10">rc</name></expr>]</index></name> <operator pos:start="47:13" pos:end="47:13">=</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:9">value</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:38"><name pos:start="49:13" pos:end="49:18">strtol</name><argument_list pos:start="49:19" pos:end="49:38">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">buf</name></expr></argument>, <argument pos:start="49:25" pos:end="49:31"><expr pos:start="49:25" pos:end="49:31"><operator pos:start="49:25" pos:end="49:25">&amp;</operator><name pos:start="49:26" pos:end="49:31">endptr</name></expr></argument>, <argument pos:start="49:34" pos:end="49:37"><expr pos:start="49:34" pos:end="49:37"><name pos:start="49:34" pos:end="49:37">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="65:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:41">(<expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:14">endptr</name> <operator pos:start="51:16" pos:end="51:17">==</operator> <name pos:start="51:19" pos:end="51:21">buf</name> <operator pos:start="51:23" pos:end="51:24">||</operator> <operator pos:start="51:26" pos:end="51:26">*</operator><name pos:start="51:27" pos:end="51:32">endptr</name> <operator pos:start="51:34" pos:end="51:35">!=</operator> <literal type="char" pos:start="51:37" pos:end="51:40">'\n'</literal></expr>)</condition> <block pos:start="51:43" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:16">

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:10">rc</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <operator pos:start="53:14" pos:end="53:14">-</operator><literal type="number" pos:start="53:15" pos:end="53:15">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="55:7" pos:end="59:5">else if <condition pos:start="55:15" pos:end="55:75">(<expr pos:start="55:16" pos:end="55:74"><operator pos:start="55:16" pos:end="55:16">(</operator><name pos:start="55:17" pos:end="55:21">value</name> <operator pos:start="55:23" pos:end="55:24">==</operator> <name pos:start="55:26" pos:end="55:33">LONG_MIN</name> <operator pos:start="55:35" pos:end="55:36">||</operator> <name pos:start="55:38" pos:end="55:42">value</name> <operator pos:start="55:44" pos:end="55:45">==</operator> <name pos:start="55:47" pos:end="55:54">LONG_MAX</name><operator pos:start="55:55" pos:end="55:55">)</operator> <operator pos:start="55:57" pos:end="55:58">&amp;&amp;</operator> <name pos:start="55:60" pos:end="55:64">errno</name> <operator pos:start="55:66" pos:end="55:67">==</operator> <name pos:start="55:69" pos:end="55:74">ERANGE</name></expr>)</condition> <block pos:start="55:77" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:20">

        <expr_stmt pos:start="57:9" pos:end="57:20"><expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:10">rc</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <operator pos:start="57:14" pos:end="57:14">-</operator><name pos:start="57:15" pos:end="57:19">errno</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="65:5">else <block pos:start="59:12" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:24">

        <expr_stmt pos:start="61:9" pos:end="61:15"><expr pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:10">rc</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:24"><expr pos:start="63:9" pos:end="63:23"><operator pos:start="63:9" pos:end="63:9">*</operator><name pos:start="63:10" pos:end="63:15">pvalue</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:23">value</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<label pos:start="67:1" pos:end="67:4"><name pos:start="67:1" pos:end="67:3">out</name>:</label>

    <expr_stmt pos:start="69:5" pos:end="69:14"><expr pos:start="69:5" pos:end="69:13"><call pos:start="69:5" pos:end="69:13"><name pos:start="69:5" pos:end="69:9">close</name><argument_list pos:start="69:10" pos:end="69:13">(<argument pos:start="69:11" pos:end="69:12"><expr pos:start="69:11" pos:end="69:12"><name pos:start="69:11" pos:end="69:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="71:5" pos:end="71:14">return <expr pos:start="71:12" pos:end="71:13"><name pos:start="71:12" pos:end="71:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
