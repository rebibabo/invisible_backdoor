<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15899.c" pos:tabs="8"><function pos:start="1:1" pos:end="463:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qcow2_create2</name><parameter_list pos:start="1:25" pos:end="9:38">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><specifier pos:start="1:26" pos:end="1:30">const</specifier> <name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:45">filename</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><name pos:start="1:48" pos:end="1:54">int64_t</name></type> <name pos:start="1:56" pos:end="1:65">total_size</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:49"><decl pos:start="3:26" pos:end="3:49"><type pos:start="3:26" pos:end="3:49"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:35">char</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:49">backing_file</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:77"><decl pos:start="3:52" pos:end="3:77"><type pos:start="3:52" pos:end="3:77"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:61">char</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:77">backing_format</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:34"><decl pos:start="5:26" pos:end="5:34"><type pos:start="5:26" pos:end="5:34"><name pos:start="5:26" pos:end="5:28">int</name></type> <name pos:start="5:30" pos:end="5:34">flags</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:55"><decl pos:start="5:37" pos:end="5:55"><type pos:start="5:37" pos:end="5:55"><name pos:start="5:37" pos:end="5:42">size_t</name></type> <name pos:start="5:44" pos:end="5:55">cluster_size</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:78"><decl pos:start="5:58" pos:end="5:78"><type pos:start="5:58" pos:end="5:78"><name pos:start="5:58" pos:end="5:69">PreallocMode</name></type> <name pos:start="5:71" pos:end="5:78">prealloc</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:39"><decl pos:start="7:26" pos:end="7:39"><type pos:start="7:26" pos:end="7:39"><name pos:start="7:26" pos:end="7:33">QemuOpts</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:39">opts</name></decl></parameter>, <parameter pos:start="7:42" pos:end="7:52"><decl pos:start="7:42" pos:end="7:52"><type pos:start="7:42" pos:end="7:52"><name pos:start="7:42" pos:end="7:44">int</name></type> <name pos:start="7:46" pos:end="7:52">version</name></decl></parameter>, <parameter pos:start="7:55" pos:end="7:72"><decl pos:start="7:55" pos:end="7:72"><type pos:start="7:55" pos:end="7:72"><name pos:start="7:55" pos:end="7:57">int</name></type> <name pos:start="7:59" pos:end="7:72">refcount_order</name></decl></parameter>,

                         <parameter pos:start="9:26" pos:end="9:37"><decl pos:start="9:26" pos:end="9:37"><type pos:start="9:26" pos:end="9:37"><name pos:start="9:26" pos:end="9:30">Error</name> <modifier pos:start="9:32" pos:end="9:32">*</modifier><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:37">errp</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="463:1">{<block_content pos:start="15:5" pos:end="461:15">

    <comment type="block" pos:start="13:5" pos:end="13:32">/* Calculate cluster_bits */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20">cluster_bits</name></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:16">cluster_bits</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <call pos:start="17:20" pos:end="17:36"><name pos:start="17:20" pos:end="17:22">ffs</name><argument_list pos:start="17:23" pos:end="17:36">(<argument pos:start="17:24" pos:end="17:35"><expr pos:start="17:24" pos:end="17:35"><name pos:start="17:24" pos:end="17:35">cluster_size</name></expr></argument>)</argument_list></call> <operator pos:start="17:38" pos:end="17:38">-</operator> <literal type="number" pos:start="17:40" pos:end="17:40">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="31:5">if <condition pos:start="19:8" pos:end="21:44">(<expr pos:start="19:9" pos:end="21:43"><name pos:start="19:9" pos:end="19:57"><name pos:start="19:9" pos:end="19:20">cluster_bits</name> <argument_list type="generic" pos:start="19:22" pos:end="19:57">&lt; <argument pos:start="19:24" pos:end="19:55"><expr pos:start="19:24" pos:end="19:55"><name pos:start="19:24" pos:end="19:39">MIN_CLUSTER_BITS</name> <operator pos:start="19:41" pos:end="19:42">||</operator> <name pos:start="19:44" pos:end="19:55">cluster_bits</name></expr></argument> &gt;</argument_list></name> <name pos:start="19:59" pos:end="19:74">MAX_CLUSTER_BITS</name> <operator pos:start="19:76" pos:end="19:77">||</operator>

        <operator pos:start="21:9" pos:end="21:9">(</operator><literal type="number" pos:start="21:10" pos:end="21:10">1</literal> <operator pos:start="21:12" pos:end="21:13">&lt;&lt;</operator> <name pos:start="21:15" pos:end="21:26">cluster_bits</name><operator pos:start="21:27" pos:end="21:27">)</operator> <operator pos:start="21:29" pos:end="21:30">!=</operator> <name pos:start="21:32" pos:end="21:43">cluster_size</name></expr>)</condition>

    <block pos:start="23:5" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:23">

        <expr_stmt pos:start="25:9" pos:end="27:79"><expr pos:start="25:9" pos:end="27:78"><call pos:start="25:9" pos:end="27:78"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="27:78">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="27:24"><expr pos:start="25:26" pos:end="27:24"><literal type="string" pos:start="25:26" pos:end="25:78">"Cluster size must be a power of two between %d and "</literal>

                   <literal type="string" pos:start="27:20" pos:end="27:24">"%dk"</literal></expr></argument>, <argument pos:start="27:27" pos:end="27:47"><expr pos:start="27:27" pos:end="27:47"><literal type="number" pos:start="27:27" pos:end="27:27">1</literal> <operator pos:start="27:29" pos:end="27:30">&lt;&lt;</operator> <name pos:start="27:32" pos:end="27:47">MIN_CLUSTER_BITS</name></expr></argument>, <argument pos:start="27:50" pos:end="27:77"><expr pos:start="27:50" pos:end="27:77"><literal type="number" pos:start="27:50" pos:end="27:50">1</literal> <operator pos:start="27:52" pos:end="27:53">&lt;&lt;</operator> <operator pos:start="27:55" pos:end="27:55">(</operator><name pos:start="27:56" pos:end="27:71">MAX_CLUSTER_BITS</name> <operator pos:start="27:73" pos:end="27:73">-</operator> <literal type="number" pos:start="27:75" pos:end="27:76">10</literal><operator pos:start="27:77" pos:end="27:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="57:7">/*

     * Open the image file and write a minimal qcow2 header.

     *

     * We keep things simple and start with a zero-sized image. We also

     * do without refcount blocks or a L1 table for now. We'll fix the

     * inconsistency later.

     *

     * We do need a refcount table because growing the refcount table means

     * allocating two new refcount blocks - the seconds of which would be at

     * 2 GB for 64k clusters, and we don't want to have a 2 GB initial file

     * size for any qcow2 image.

     */</comment>

    <decl_stmt pos:start="59:5" pos:end="59:25"><decl pos:start="59:5" pos:end="59:24"><type pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:20">BlockDriverState</name><modifier pos:start="59:21" pos:end="59:21">*</modifier></type> <name pos:start="59:23" pos:end="59:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:23"><decl pos:start="61:5" pos:end="61:22"><type pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:14">QCowHeader</name> <modifier pos:start="61:16" pos:end="61:16">*</modifier></type><name pos:start="61:17" pos:end="61:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:29"><decl pos:start="63:5" pos:end="63:28"><type pos:start="63:5" pos:end="63:13"><name pos:start="63:5" pos:end="63:12">uint64_t</name><modifier pos:start="63:13" pos:end="63:13">*</modifier></type> <name pos:start="63:15" pos:end="63:28">refcount_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:28"><decl pos:start="65:5" pos:end="65:27"><type pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:9">Error</name> <modifier pos:start="65:11" pos:end="65:11">*</modifier></type><name pos:start="65:12" pos:end="65:20">local_err</name> <init pos:start="65:22" pos:end="65:27">= <expr pos:start="65:24" pos:end="65:27"><name pos:start="65:24" pos:end="65:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:12"><decl pos:start="67:5" pos:end="67:11"><type pos:start="67:5" pos:end="67:7"><name pos:start="67:5" pos:end="67:7">int</name></type> <name pos:start="67:9" pos:end="67:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="71:5" pos:end="193:5"><if pos:start="71:5" pos:end="193:5">if <condition pos:start="71:8" pos:end="71:75">(<expr pos:start="71:9" pos:end="71:74"><name pos:start="71:9" pos:end="71:16">prealloc</name> <operator pos:start="71:18" pos:end="71:19">==</operator> <name pos:start="71:21" pos:end="71:38">PREALLOC_MODE_FULL</name> <operator pos:start="71:40" pos:end="71:41">||</operator> <name pos:start="71:43" pos:end="71:50">prealloc</name> <operator pos:start="71:52" pos:end="71:53">==</operator> <name pos:start="71:55" pos:end="71:74">PREALLOC_MODE_FALLOC</name></expr>)</condition> <block pos:start="71:77" pos:end="193:5">{<block_content pos:start="83:9" pos:end="191:35">

        <comment type="block" pos:start="73:9" pos:end="81:48">/* Note: The following calculation does not need to be exact; if it is a

         * bit off, either some bytes will be "leaked" (which is fine) or we

         * will need to increase the file size by some bytes (which is fine,

         * too, as long as the bulk is allocated here). Therefore, using

         * floating point arithmetic is fine. */</comment>

        <decl_stmt pos:start="83:9" pos:end="83:30"><decl pos:start="83:9" pos:end="83:29"><type pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:15">int64_t</name></type> <name pos:start="83:17" pos:end="83:25">meta_size</name> <init pos:start="83:27" pos:end="83:29">= <expr pos:start="83:29" pos:end="83:29"><literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="85:9" pos:end="85:52"><decl pos:start="85:9" pos:end="85:27"><type pos:start="85:9" pos:end="85:16"><name pos:start="85:9" pos:end="85:16">uint64_t</name></type> <name pos:start="85:18" pos:end="85:27">nreftablee</name></decl>, <decl pos:start="85:30" pos:end="85:39"><type ref="prev" pos:start="85:9" pos:end="85:16"/><name pos:start="85:30" pos:end="85:39">nrefblocke</name></decl>, <decl pos:start="85:42" pos:end="85:45"><type ref="prev" pos:start="85:9" pos:end="85:16"/><name pos:start="85:42" pos:end="85:45">nl1e</name></decl>, <decl pos:start="85:48" pos:end="85:51"><type ref="prev" pos:start="85:9" pos:end="85:16"/><name pos:start="85:48" pos:end="85:51">nl2e</name></decl>;</decl_stmt>

        <decl_stmt pos:start="87:9" pos:end="87:76"><decl pos:start="87:9" pos:end="87:75"><type pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:15">int64_t</name></type> <name pos:start="87:17" pos:end="87:34">aligned_total_size</name> <init pos:start="87:36" pos:end="87:75">= <expr pos:start="87:38" pos:end="87:75"><call pos:start="87:38" pos:end="87:75"><name pos:start="87:38" pos:end="87:49">align_offset</name><argument_list pos:start="87:50" pos:end="87:75">(<argument pos:start="87:51" pos:end="87:60"><expr pos:start="87:51" pos:end="87:60"><name pos:start="87:51" pos:end="87:60">total_size</name></expr></argument>, <argument pos:start="87:63" pos:end="87:74"><expr pos:start="87:63" pos:end="87:74"><name pos:start="87:63" pos:end="87:74">cluster_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:41"><decl pos:start="89:9" pos:end="89:25"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:25">refblock_bits</name></decl>, <decl pos:start="89:28" pos:end="89:40"><type ref="prev" pos:start="89:9" pos:end="89:11"/><name pos:start="89:28" pos:end="89:40">refblock_size</name></decl>;</decl_stmt>

        <comment type="block" pos:start="91:9" pos:end="91:42">/* refcount entry size in bytes */</comment>

        <decl_stmt pos:start="93:9" pos:end="93:49"><decl pos:start="93:9" pos:end="93:48"><type pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:14">double</name></type> <name pos:start="93:16" pos:end="93:19">rces</name> <init pos:start="93:21" pos:end="93:48">= <expr pos:start="93:23" pos:end="93:48"><operator pos:start="93:23" pos:end="93:23">(</operator><literal type="number" pos:start="93:24" pos:end="93:24">1</literal> <operator pos:start="93:26" pos:end="93:27">&lt;&lt;</operator> <name pos:start="93:29" pos:end="93:42">refcount_order</name><operator pos:start="93:43" pos:end="93:43">)</operator> <operator pos:start="93:45" pos:end="93:45">/</operator> <literal type="number" pos:start="93:47" pos:end="93:48">8.</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="97:9" pos:end="97:30">/* see qcow2_open() */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:60"><expr pos:start="99:9" pos:end="99:59"><name pos:start="99:9" pos:end="99:21">refblock_bits</name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:36">cluster_bits</name> <operator pos:start="99:38" pos:end="99:38">-</operator> <operator pos:start="99:40" pos:end="99:40">(</operator><name pos:start="99:41" pos:end="99:54">refcount_order</name> <operator pos:start="99:56" pos:end="99:56">-</operator> <literal type="number" pos:start="99:58" pos:end="99:58">3</literal><operator pos:start="99:59" pos:end="99:59">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:21">refblock_size</name> <operator pos:start="101:23" pos:end="101:23">=</operator> <literal type="number" pos:start="101:25" pos:end="101:25">1</literal> <operator pos:start="101:27" pos:end="101:28">&lt;&lt;</operator> <name pos:start="101:30" pos:end="101:42">refblock_bits</name></expr>;</expr_stmt>



        <comment type="block" pos:start="105:9" pos:end="105:31">/* header: 1 cluster */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:34"><expr pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:17">meta_size</name> <operator pos:start="107:19" pos:end="107:20">+=</operator> <name pos:start="107:22" pos:end="107:33">cluster_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:37">/* total size of L2 tables */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:49"><expr pos:start="113:9" pos:end="113:48"><name pos:start="113:9" pos:end="113:12">nl2e</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <name pos:start="113:16" pos:end="113:33">aligned_total_size</name> <operator pos:start="113:35" pos:end="113:35">/</operator> <name pos:start="113:37" pos:end="113:48">cluster_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:67"><expr pos:start="115:9" pos:end="115:66"><name pos:start="115:9" pos:end="115:12">nl2e</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <call pos:start="115:16" pos:end="115:66"><name pos:start="115:16" pos:end="115:27">align_offset</name><argument_list pos:start="115:28" pos:end="115:66">(<argument pos:start="115:29" pos:end="115:32"><expr pos:start="115:29" pos:end="115:32"><name pos:start="115:29" pos:end="115:32">nl2e</name></expr></argument>, <argument pos:start="115:35" pos:end="115:65"><expr pos:start="115:35" pos:end="115:65"><name pos:start="115:35" pos:end="115:46">cluster_size</name> <operator pos:start="115:48" pos:end="115:48">/</operator> <sizeof pos:start="115:50" pos:end="115:65">sizeof<argument_list pos:start="115:56" pos:end="115:65">(<argument pos:start="115:57" pos:end="115:64"><expr pos:start="115:57" pos:end="115:64"><name pos:start="115:57" pos:end="115:64">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:45"><expr pos:start="117:9" pos:end="117:44"><name pos:start="117:9" pos:end="117:17">meta_size</name> <operator pos:start="117:19" pos:end="117:20">+=</operator> <name pos:start="117:22" pos:end="117:25">nl2e</name> <operator pos:start="117:27" pos:end="117:27">*</operator> <sizeof pos:start="117:29" pos:end="117:44">sizeof<argument_list pos:start="117:35" pos:end="117:44">(<argument pos:start="117:36" pos:end="117:43"><expr pos:start="117:36" pos:end="117:43"><name pos:start="117:36" pos:end="117:43">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:37">/* total size of L1 tables */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:54"><expr pos:start="123:9" pos:end="123:53"><name pos:start="123:9" pos:end="123:12">nl1e</name> <operator pos:start="123:14" pos:end="123:14">=</operator> <name pos:start="123:16" pos:end="123:19">nl2e</name> <operator pos:start="123:21" pos:end="123:21">*</operator> <sizeof pos:start="123:23" pos:end="123:38">sizeof<argument_list pos:start="123:29" pos:end="123:38">(<argument pos:start="123:30" pos:end="123:37"><expr pos:start="123:30" pos:end="123:37"><name pos:start="123:30" pos:end="123:37">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="123:40" pos:end="123:40">/</operator> <name pos:start="123:42" pos:end="123:53">cluster_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:67"><expr pos:start="125:9" pos:end="125:66"><name pos:start="125:9" pos:end="125:12">nl1e</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <call pos:start="125:16" pos:end="125:66"><name pos:start="125:16" pos:end="125:27">align_offset</name><argument_list pos:start="125:28" pos:end="125:66">(<argument pos:start="125:29" pos:end="125:32"><expr pos:start="125:29" pos:end="125:32"><name pos:start="125:29" pos:end="125:32">nl1e</name></expr></argument>, <argument pos:start="125:35" pos:end="125:65"><expr pos:start="125:35" pos:end="125:65"><name pos:start="125:35" pos:end="125:46">cluster_size</name> <operator pos:start="125:48" pos:end="125:48">/</operator> <sizeof pos:start="125:50" pos:end="125:65">sizeof<argument_list pos:start="125:56" pos:end="125:65">(<argument pos:start="125:57" pos:end="125:64"><expr pos:start="125:57" pos:end="125:64"><name pos:start="125:57" pos:end="125:64">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:45"><expr pos:start="127:9" pos:end="127:44"><name pos:start="127:9" pos:end="127:17">meta_size</name> <operator pos:start="127:19" pos:end="127:20">+=</operator> <name pos:start="127:22" pos:end="127:25">nl1e</name> <operator pos:start="127:27" pos:end="127:27">*</operator> <sizeof pos:start="127:29" pos:end="127:44">sizeof<argument_list pos:start="127:35" pos:end="127:44">(<argument pos:start="127:36" pos:end="127:43"><expr pos:start="127:36" pos:end="127:43"><name pos:start="127:36" pos:end="127:43">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



        <comment type="block" pos:start="131:9" pos:end="163:11">/* total size of refcount blocks

         *

         * note: every host cluster is reference-counted, including metadata

         * (even refcount blocks are recursively included).

         * Let:

         *   a = total_size (this is the guest disk size)

         *   m = meta size not including refcount blocks and refcount tables

         *   c = cluster size

         *   y1 = number of refcount blocks entries

         *   y2 = meta size including everything

         *   rces = refcount entry size in bytes

         * then,

         *   y1 = (y2 + a)/c

         *   y2 = y1 * rces + y1 * rces * sizeof(u64) / c + m

         * we can get y1:

         *   y1 = (a + m) / (c - rces - rces * sizeof(u64) / c)

         */</comment>

        <expr_stmt pos:start="165:9" pos:end="169:65"><expr pos:start="165:9" pos:end="169:64"><name pos:start="165:9" pos:end="165:18">nrefblocke</name> <operator pos:start="165:20" pos:end="165:20">=</operator> <operator pos:start="165:22" pos:end="165:22">(</operator><name pos:start="165:23" pos:end="165:40">aligned_total_size</name> <operator pos:start="165:42" pos:end="165:42">+</operator> <name pos:start="165:44" pos:end="165:52">meta_size</name> <operator pos:start="165:54" pos:end="165:54">+</operator> <name pos:start="165:56" pos:end="165:67">cluster_size</name><operator pos:start="165:68" pos:end="165:68">)</operator>

                   <operator pos:start="167:20" pos:end="167:20">/</operator> <operator pos:start="167:22" pos:end="167:22">(</operator><name pos:start="167:23" pos:end="167:34">cluster_size</name> <operator pos:start="167:36" pos:end="167:36">-</operator> <name pos:start="167:38" pos:end="167:41">rces</name> <operator pos:start="167:43" pos:end="167:43">-</operator> <name pos:start="167:45" pos:end="167:48">rces</name> <operator pos:start="167:50" pos:end="167:50">*</operator> <sizeof pos:start="167:52" pos:end="167:67">sizeof<argument_list pos:start="167:58" pos:end="167:67">(<argument pos:start="167:59" pos:end="167:66"><expr pos:start="167:59" pos:end="167:66"><name pos:start="167:59" pos:end="167:66">uint64_t</name></expr></argument>)</argument_list></sizeof>

                                                 <operator pos:start="169:50" pos:end="169:50">/</operator> <name pos:start="169:52" pos:end="169:63">cluster_size</name><operator pos:start="169:64" pos:end="169:64">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:76"><expr pos:start="171:9" pos:end="171:75"><name pos:start="171:9" pos:end="171:17">meta_size</name> <operator pos:start="171:19" pos:end="171:20">+=</operator> <call pos:start="171:22" pos:end="171:60"><name pos:start="171:22" pos:end="171:33">DIV_ROUND_UP</name><argument_list pos:start="171:34" pos:end="171:60">(<argument pos:start="171:35" pos:end="171:44"><expr pos:start="171:35" pos:end="171:44"><name pos:start="171:35" pos:end="171:44">nrefblocke</name></expr></argument>, <argument pos:start="171:47" pos:end="171:59"><expr pos:start="171:47" pos:end="171:59"><name pos:start="171:47" pos:end="171:59">refblock_size</name></expr></argument>)</argument_list></call> <operator pos:start="171:62" pos:end="171:62">*</operator> <name pos:start="171:64" pos:end="171:75">cluster_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="175:9" pos:end="175:43">/* total size of refcount tables */</comment>

        <expr_stmt pos:start="177:9" pos:end="177:48"><expr pos:start="177:9" pos:end="177:47"><name pos:start="177:9" pos:end="177:18">nreftablee</name> <operator pos:start="177:20" pos:end="177:20">=</operator> <name pos:start="177:22" pos:end="177:31">nrefblocke</name> <operator pos:start="177:33" pos:end="177:33">/</operator> <name pos:start="177:35" pos:end="177:47">refblock_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:79"><expr pos:start="179:9" pos:end="179:78"><name pos:start="179:9" pos:end="179:18">nreftablee</name> <operator pos:start="179:20" pos:end="179:20">=</operator> <call pos:start="179:22" pos:end="179:78"><name pos:start="179:22" pos:end="179:33">align_offset</name><argument_list pos:start="179:34" pos:end="179:78">(<argument pos:start="179:35" pos:end="179:44"><expr pos:start="179:35" pos:end="179:44"><name pos:start="179:35" pos:end="179:44">nreftablee</name></expr></argument>, <argument pos:start="179:47" pos:end="179:77"><expr pos:start="179:47" pos:end="179:77"><name pos:start="179:47" pos:end="179:58">cluster_size</name> <operator pos:start="179:60" pos:end="179:60">/</operator> <sizeof pos:start="179:62" pos:end="179:77">sizeof<argument_list pos:start="179:68" pos:end="179:77">(<argument pos:start="179:69" pos:end="179:76"><expr pos:start="179:69" pos:end="179:76"><name pos:start="179:69" pos:end="179:76">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:51"><expr pos:start="181:9" pos:end="181:50"><name pos:start="181:9" pos:end="181:17">meta_size</name> <operator pos:start="181:19" pos:end="181:20">+=</operator> <name pos:start="181:22" pos:end="181:31">nreftablee</name> <operator pos:start="181:33" pos:end="181:33">*</operator> <sizeof pos:start="181:35" pos:end="181:50">sizeof<argument_list pos:start="181:41" pos:end="181:50">(<argument pos:start="181:42" pos:end="181:49"><expr pos:start="181:42" pos:end="181:49"><name pos:start="181:42" pos:end="181:49">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



        <expr_stmt pos:start="185:9" pos:end="187:74"><expr pos:start="185:9" pos:end="187:73"><call pos:start="185:9" pos:end="187:73"><name pos:start="185:9" pos:end="185:27">qemu_opt_set_number</name><argument_list pos:start="185:28" pos:end="187:73">(<argument pos:start="185:29" pos:end="185:32"><expr pos:start="185:29" pos:end="185:32"><name pos:start="185:29" pos:end="185:32">opts</name></expr></argument>, <argument pos:start="185:35" pos:end="185:48"><expr pos:start="185:35" pos:end="185:48"><name pos:start="185:35" pos:end="185:48">BLOCK_OPT_SIZE</name></expr></argument>,

                            <argument pos:start="187:29" pos:end="187:58"><expr pos:start="187:29" pos:end="187:58"><name pos:start="187:29" pos:end="187:46">aligned_total_size</name> <operator pos:start="187:48" pos:end="187:48">+</operator> <name pos:start="187:50" pos:end="187:58">meta_size</name></expr></argument>, <argument pos:start="187:61" pos:end="187:72"><expr pos:start="187:61" pos:end="187:72"><operator pos:start="187:61" pos:end="187:61">&amp;</operator><name pos:start="187:62" pos:end="187:72">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="191:35"><expr pos:start="189:9" pos:end="191:34"><call pos:start="189:9" pos:end="191:34"><name pos:start="189:9" pos:end="189:20">qemu_opt_set</name><argument_list pos:start="189:21" pos:end="191:34">(<argument pos:start="189:22" pos:end="189:25"><expr pos:start="189:22" pos:end="189:25"><name pos:start="189:22" pos:end="189:25">opts</name></expr></argument>, <argument pos:start="189:28" pos:end="189:45"><expr pos:start="189:28" pos:end="189:45"><name pos:start="189:28" pos:end="189:45">BLOCK_OPT_PREALLOC</name></expr></argument>, <argument pos:start="189:48" pos:end="189:76"><expr pos:start="189:48" pos:end="189:76"><name pos:start="189:48" pos:end="189:76"><name pos:start="189:48" pos:end="189:66">PreallocMode_lookup</name><index pos:start="189:67" pos:end="189:76">[<expr pos:start="189:68" pos:end="189:75"><name pos:start="189:68" pos:end="189:75">prealloc</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="191:22" pos:end="191:33"><expr pos:start="191:22" pos:end="191:33"><operator pos:start="191:22" pos:end="191:22">&amp;</operator><name pos:start="191:23" pos:end="191:33">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:55"><expr pos:start="197:5" pos:end="197:54"><name pos:start="197:5" pos:end="197:7">ret</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <call pos:start="197:11" pos:end="197:54"><name pos:start="197:11" pos:end="197:26">bdrv_create_file</name><argument_list pos:start="197:27" pos:end="197:54">(<argument pos:start="197:28" pos:end="197:35"><expr pos:start="197:28" pos:end="197:35"><name pos:start="197:28" pos:end="197:35">filename</name></expr></argument>, <argument pos:start="197:38" pos:end="197:41"><expr pos:start="197:38" pos:end="197:41"><name pos:start="197:38" pos:end="197:41">opts</name></expr></argument>, <argument pos:start="197:44" pos:end="197:53"><expr pos:start="197:44" pos:end="197:53"><operator pos:start="197:44" pos:end="197:44">&amp;</operator><name pos:start="197:45" pos:end="197:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="205:5"><if pos:start="199:5" pos:end="205:5">if <condition pos:start="199:8" pos:end="199:16">(<expr pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:11">ret</name> <operator pos:start="199:13" pos:end="199:13">&lt;</operator> <literal type="number" pos:start="199:15" pos:end="199:15">0</literal></expr>)</condition> <block pos:start="199:18" pos:end="205:5">{<block_content pos:start="201:9" pos:end="203:19">

        <expr_stmt pos:start="201:9" pos:end="201:41"><expr pos:start="201:9" pos:end="201:40"><call pos:start="201:9" pos:end="201:40"><name pos:start="201:9" pos:end="201:23">error_propagate</name><argument_list pos:start="201:24" pos:end="201:40">(<argument pos:start="201:25" pos:end="201:28"><expr pos:start="201:25" pos:end="201:28"><name pos:start="201:25" pos:end="201:28">errp</name></expr></argument>, <argument pos:start="201:31" pos:end="201:39"><expr pos:start="201:31" pos:end="201:39"><name pos:start="201:31" pos:end="201:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="203:9" pos:end="203:19">return <expr pos:start="203:16" pos:end="203:18"><name pos:start="203:16" pos:end="203:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:14"><expr pos:start="209:5" pos:end="209:13"><name pos:start="209:5" pos:end="209:6">bs</name> <operator pos:start="209:8" pos:end="209:8">=</operator> <name pos:start="209:10" pos:end="209:13">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="213:38"><expr pos:start="211:5" pos:end="213:37"><name pos:start="211:5" pos:end="211:7">ret</name> <operator pos:start="211:9" pos:end="211:9">=</operator> <call pos:start="211:11" pos:end="213:37"><name pos:start="211:11" pos:end="211:19">bdrv_open</name><argument_list pos:start="211:20" pos:end="213:37">(<argument pos:start="211:21" pos:end="211:23"><expr pos:start="211:21" pos:end="211:23"><operator pos:start="211:21" pos:end="211:21">&amp;</operator><name pos:start="211:22" pos:end="211:23">bs</name></expr></argument>, <argument pos:start="211:26" pos:end="211:33"><expr pos:start="211:26" pos:end="211:33"><name pos:start="211:26" pos:end="211:33">filename</name></expr></argument>, <argument pos:start="211:36" pos:end="211:39"><expr pos:start="211:36" pos:end="211:39"><name pos:start="211:36" pos:end="211:39">NULL</name></expr></argument>, <argument pos:start="211:42" pos:end="211:45"><expr pos:start="211:42" pos:end="211:45"><name pos:start="211:42" pos:end="211:45">NULL</name></expr></argument>, <argument pos:start="211:48" pos:end="211:76"><expr pos:start="211:48" pos:end="211:76"><name pos:start="211:48" pos:end="211:58">BDRV_O_RDWR</name> <operator pos:start="211:60" pos:end="211:60">|</operator> <name pos:start="211:62" pos:end="211:76">BDRV_O_PROTOCOL</name></expr></argument>,

                    <argument pos:start="213:21" pos:end="213:24"><expr pos:start="213:21" pos:end="213:24"><name pos:start="213:21" pos:end="213:24">NULL</name></expr></argument>, <argument pos:start="213:27" pos:end="213:36"><expr pos:start="213:27" pos:end="213:36"><operator pos:start="213:27" pos:end="213:27">&amp;</operator><name pos:start="213:28" pos:end="213:36">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="215:5" pos:end="221:5"><if pos:start="215:5" pos:end="221:5">if <condition pos:start="215:8" pos:end="215:16">(<expr pos:start="215:9" pos:end="215:15"><name pos:start="215:9" pos:end="215:11">ret</name> <operator pos:start="215:13" pos:end="215:13">&lt;</operator> <literal type="number" pos:start="215:15" pos:end="215:15">0</literal></expr>)</condition> <block pos:start="215:18" pos:end="221:5">{<block_content pos:start="217:9" pos:end="219:19">

        <expr_stmt pos:start="217:9" pos:end="217:41"><expr pos:start="217:9" pos:end="217:40"><call pos:start="217:9" pos:end="217:40"><name pos:start="217:9" pos:end="217:23">error_propagate</name><argument_list pos:start="217:24" pos:end="217:40">(<argument pos:start="217:25" pos:end="217:28"><expr pos:start="217:25" pos:end="217:28"><name pos:start="217:25" pos:end="217:28">errp</name></expr></argument>, <argument pos:start="217:31" pos:end="217:39"><expr pos:start="217:31" pos:end="217:39"><name pos:start="217:31" pos:end="217:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="219:9" pos:end="219:19">return <expr pos:start="219:16" pos:end="219:18"><name pos:start="219:16" pos:end="219:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:26">/* Write the header */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:65"><expr pos:start="227:5" pos:end="227:64"><call pos:start="227:5" pos:end="227:64"><name pos:start="227:5" pos:end="227:21">QEMU_BUILD_BUG_ON</name><argument_list pos:start="227:22" pos:end="227:64">(<argument pos:start="227:23" pos:end="227:63"><expr pos:start="227:23" pos:end="227:63"><operator pos:start="227:23" pos:end="227:23">(</operator><literal type="number" pos:start="227:24" pos:end="227:24">1</literal> <operator pos:start="227:26" pos:end="227:27">&lt;&lt;</operator> <name pos:start="227:29" pos:end="227:44">MIN_CLUSTER_BITS</name><operator pos:start="227:45" pos:end="227:45">)</operator> <operator pos:start="227:47" pos:end="227:47">&lt;</operator> <sizeof pos:start="227:49" pos:end="227:63">sizeof<argument_list pos:start="227:55" pos:end="227:63">(<argument pos:start="227:56" pos:end="227:62"><expr pos:start="227:56" pos:end="227:62"><operator pos:start="227:56" pos:end="227:56">*</operator><name pos:start="227:57" pos:end="227:62">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:37"><expr pos:start="229:5" pos:end="229:36"><name pos:start="229:5" pos:end="229:10">header</name> <operator pos:start="229:12" pos:end="229:12">=</operator> <call pos:start="229:14" pos:end="229:36"><name pos:start="229:14" pos:end="229:22">g_malloc0</name><argument_list pos:start="229:23" pos:end="229:36">(<argument pos:start="229:24" pos:end="229:35"><expr pos:start="229:24" pos:end="229:35"><name pos:start="229:24" pos:end="229:35">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="253:6"><expr pos:start="231:5" pos:end="253:5"><operator pos:start="231:5" pos:end="231:5">*</operator><name pos:start="231:6" pos:end="231:11">header</name> <operator pos:start="231:13" pos:end="231:13">=</operator> <operator pos:start="231:15" pos:end="231:15">(</operator><name pos:start="231:16" pos:end="231:25">QCowHeader</name><operator pos:start="231:26" pos:end="231:26">)</operator> <block pos:start="231:28" pos:end="253:5">{

        <expr pos:start="233:9" pos:end="233:61"><operator pos:start="233:9" pos:end="233:9">.</operator><name pos:start="233:10" pos:end="233:14">magic</name>                      <operator pos:start="233:37" pos:end="233:37">=</operator> <call pos:start="233:39" pos:end="233:61"><name pos:start="233:39" pos:end="233:49">cpu_to_be32</name><argument_list pos:start="233:50" pos:end="233:61">(<argument pos:start="233:51" pos:end="233:60"><expr pos:start="233:51" pos:end="233:60"><name pos:start="233:51" pos:end="233:60">QCOW_MAGIC</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="235:9" pos:end="235:58"><operator pos:start="235:9" pos:end="235:9">.</operator><name pos:start="235:10" pos:end="235:16">version</name>                    <operator pos:start="235:37" pos:end="235:37">=</operator> <call pos:start="235:39" pos:end="235:58"><name pos:start="235:39" pos:end="235:49">cpu_to_be32</name><argument_list pos:start="235:50" pos:end="235:58">(<argument pos:start="235:51" pos:end="235:57"><expr pos:start="235:51" pos:end="235:57"><name pos:start="235:51" pos:end="235:57">version</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="237:9" pos:end="237:63"><operator pos:start="237:9" pos:end="237:9">.</operator><name pos:start="237:10" pos:end="237:21">cluster_bits</name>               <operator pos:start="237:37" pos:end="237:37">=</operator> <call pos:start="237:39" pos:end="237:63"><name pos:start="237:39" pos:end="237:49">cpu_to_be32</name><argument_list pos:start="237:50" pos:end="237:63">(<argument pos:start="237:51" pos:end="237:62"><expr pos:start="237:51" pos:end="237:62"><name pos:start="237:51" pos:end="237:62">cluster_bits</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="239:9" pos:end="239:52"><operator pos:start="239:9" pos:end="239:9">.</operator><name pos:start="239:10" pos:end="239:13">size</name>                       <operator pos:start="239:37" pos:end="239:37">=</operator> <call pos:start="239:39" pos:end="239:52"><name pos:start="239:39" pos:end="239:49">cpu_to_be64</name><argument_list pos:start="239:50" pos:end="239:52">(<argument pos:start="239:51" pos:end="239:51"><expr pos:start="239:51" pos:end="239:51"><literal type="number" pos:start="239:51" pos:end="239:51">0</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="241:9" pos:end="241:52"><operator pos:start="241:9" pos:end="241:9">.</operator><name pos:start="241:10" pos:end="241:24">l1_table_offset</name>            <operator pos:start="241:37" pos:end="241:37">=</operator> <call pos:start="241:39" pos:end="241:52"><name pos:start="241:39" pos:end="241:49">cpu_to_be64</name><argument_list pos:start="241:50" pos:end="241:52">(<argument pos:start="241:51" pos:end="241:51"><expr pos:start="241:51" pos:end="241:51"><literal type="number" pos:start="241:51" pos:end="241:51">0</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="243:9" pos:end="243:52"><operator pos:start="243:9" pos:end="243:9">.</operator><name pos:start="243:10" pos:end="243:16">l1_size</name>                    <operator pos:start="243:37" pos:end="243:37">=</operator> <call pos:start="243:39" pos:end="243:52"><name pos:start="243:39" pos:end="243:49">cpu_to_be32</name><argument_list pos:start="243:50" pos:end="243:52">(<argument pos:start="243:51" pos:end="243:51"><expr pos:start="243:51" pos:end="243:51"><literal type="number" pos:start="243:51" pos:end="243:51">0</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="245:9" pos:end="245:63"><operator pos:start="245:9" pos:end="245:9">.</operator><name pos:start="245:10" pos:end="245:30">refcount_table_offset</name>      <operator pos:start="245:37" pos:end="245:37">=</operator> <call pos:start="245:39" pos:end="245:63"><name pos:start="245:39" pos:end="245:49">cpu_to_be64</name><argument_list pos:start="245:50" pos:end="245:63">(<argument pos:start="245:51" pos:end="245:62"><expr pos:start="245:51" pos:end="245:62"><name pos:start="245:51" pos:end="245:62">cluster_size</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="247:9" pos:end="247:52"><operator pos:start="247:9" pos:end="247:9">.</operator><name pos:start="247:10" pos:end="247:32">refcount_table_clusters</name>    <operator pos:start="247:37" pos:end="247:37">=</operator> <call pos:start="247:39" pos:end="247:52"><name pos:start="247:39" pos:end="247:49">cpu_to_be32</name><argument_list pos:start="247:50" pos:end="247:52">(<argument pos:start="247:51" pos:end="247:51"><expr pos:start="247:51" pos:end="247:51"><literal type="number" pos:start="247:51" pos:end="247:51">1</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="249:9" pos:end="249:65"><operator pos:start="249:9" pos:end="249:9">.</operator><name pos:start="249:10" pos:end="249:23">refcount_order</name>             <operator pos:start="249:37" pos:end="249:37">=</operator> <call pos:start="249:39" pos:end="249:65"><name pos:start="249:39" pos:end="249:49">cpu_to_be32</name><argument_list pos:start="249:50" pos:end="249:65">(<argument pos:start="249:51" pos:end="249:64"><expr pos:start="249:51" pos:end="249:64"><name pos:start="249:51" pos:end="249:64">refcount_order</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="251:9" pos:end="251:66"><operator pos:start="251:9" pos:end="251:9">.</operator><name pos:start="251:10" pos:end="251:22">header_length</name>              <operator pos:start="251:37" pos:end="251:37">=</operator> <call pos:start="251:39" pos:end="251:66"><name pos:start="251:39" pos:end="251:49">cpu_to_be32</name><argument_list pos:start="251:50" pos:end="251:66">(<argument pos:start="251:51" pos:end="251:65"><expr pos:start="251:51" pos:end="251:65"><sizeof pos:start="251:51" pos:end="251:65">sizeof<argument_list pos:start="251:57" pos:end="251:65">(<argument pos:start="251:58" pos:end="251:64"><expr pos:start="251:58" pos:end="251:64"><operator pos:start="251:58" pos:end="251:58">*</operator><name pos:start="251:59" pos:end="251:64">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,

    }</block></expr>;</expr_stmt>



    <if_stmt pos:start="257:5" pos:end="265:5"><if pos:start="257:5" pos:end="261:5">if <condition pos:start="257:8" pos:end="257:35">(<expr pos:start="257:9" pos:end="257:34"><name pos:start="257:9" pos:end="257:13">flags</name> <operator pos:start="257:15" pos:end="257:15">&amp;</operator> <name pos:start="257:17" pos:end="257:34">BLOCK_FLAG_ENCRYPT</name></expr>)</condition> <block pos:start="257:37" pos:end="261:5">{<block_content pos:start="259:9" pos:end="259:59">

        <expr_stmt pos:start="259:9" pos:end="259:59"><expr pos:start="259:9" pos:end="259:58"><name pos:start="259:9" pos:end="259:28"><name pos:start="259:9" pos:end="259:14">header</name><operator pos:start="259:15" pos:end="259:16">-&gt;</operator><name pos:start="259:17" pos:end="259:28">crypt_method</name></name> <operator pos:start="259:30" pos:end="259:30">=</operator> <call pos:start="259:32" pos:end="259:58"><name pos:start="259:32" pos:end="259:42">cpu_to_be32</name><argument_list pos:start="259:43" pos:end="259:58">(<argument pos:start="259:44" pos:end="259:57"><expr pos:start="259:44" pos:end="259:57"><name pos:start="259:44" pos:end="259:57">QCOW_CRYPT_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="261:7" pos:end="265:5">else <block pos:start="261:12" pos:end="265:5">{<block_content pos:start="263:9" pos:end="263:60">

        <expr_stmt pos:start="263:9" pos:end="263:60"><expr pos:start="263:9" pos:end="263:59"><name pos:start="263:9" pos:end="263:28"><name pos:start="263:9" pos:end="263:14">header</name><operator pos:start="263:15" pos:end="263:16">-&gt;</operator><name pos:start="263:17" pos:end="263:28">crypt_method</name></name> <operator pos:start="263:30" pos:end="263:30">=</operator> <call pos:start="263:32" pos:end="263:59"><name pos:start="263:32" pos:end="263:42">cpu_to_be32</name><argument_list pos:start="263:43" pos:end="263:59">(<argument pos:start="263:44" pos:end="263:58"><expr pos:start="263:44" pos:end="263:58"><name pos:start="263:44" pos:end="263:58">QCOW_CRYPT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="269:5" pos:end="275:5"><if pos:start="269:5" pos:end="275:5">if <condition pos:start="269:8" pos:end="269:42">(<expr pos:start="269:9" pos:end="269:41"><name pos:start="269:9" pos:end="269:13">flags</name> <operator pos:start="269:15" pos:end="269:15">&amp;</operator> <name pos:start="269:17" pos:end="269:41">BLOCK_FLAG_LAZY_REFCOUNTS</name></expr>)</condition> <block pos:start="269:44" pos:end="275:5">{<block_content pos:start="271:9" pos:end="273:53">

        <expr_stmt pos:start="271:9" pos:end="273:53"><expr pos:start="271:9" pos:end="273:52"><name pos:start="271:9" pos:end="271:35"><name pos:start="271:9" pos:end="271:14">header</name><operator pos:start="271:15" pos:end="271:16">-&gt;</operator><name pos:start="271:17" pos:end="271:35">compatible_features</name></name> <operator pos:start="271:37" pos:end="271:38">|=</operator>

            <call pos:start="273:13" pos:end="273:52"><name pos:start="273:13" pos:end="273:23">cpu_to_be64</name><argument_list pos:start="273:24" pos:end="273:52">(<argument pos:start="273:25" pos:end="273:51"><expr pos:start="273:25" pos:end="273:51"><name pos:start="273:25" pos:end="273:51">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="279:5" pos:end="279:51"><expr pos:start="279:5" pos:end="279:50"><name pos:start="279:5" pos:end="279:7">ret</name> <operator pos:start="279:9" pos:end="279:9">=</operator> <call pos:start="279:11" pos:end="279:50"><name pos:start="279:11" pos:end="279:21">bdrv_pwrite</name><argument_list pos:start="279:22" pos:end="279:50">(<argument pos:start="279:23" pos:end="279:24"><expr pos:start="279:23" pos:end="279:24"><name pos:start="279:23" pos:end="279:24">bs</name></expr></argument>, <argument pos:start="279:27" pos:end="279:27"><expr pos:start="279:27" pos:end="279:27"><literal type="number" pos:start="279:27" pos:end="279:27">0</literal></expr></argument>, <argument pos:start="279:30" pos:end="279:35"><expr pos:start="279:30" pos:end="279:35"><name pos:start="279:30" pos:end="279:35">header</name></expr></argument>, <argument pos:start="279:38" pos:end="279:49"><expr pos:start="279:38" pos:end="279:49"><name pos:start="279:38" pos:end="279:49">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:19"><expr pos:start="281:5" pos:end="281:18"><call pos:start="281:5" pos:end="281:18"><name pos:start="281:5" pos:end="281:10">g_free</name><argument_list pos:start="281:11" pos:end="281:18">(<argument pos:start="281:12" pos:end="281:17"><expr pos:start="281:12" pos:end="281:17"><name pos:start="281:12" pos:end="281:17">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="283:5" pos:end="289:5"><if pos:start="283:5" pos:end="289:5">if <condition pos:start="283:8" pos:end="283:16">(<expr pos:start="283:9" pos:end="283:15"><name pos:start="283:9" pos:end="283:11">ret</name> <operator pos:start="283:13" pos:end="283:13">&lt;</operator> <literal type="number" pos:start="283:15" pos:end="283:15">0</literal></expr>)</condition> <block pos:start="283:18" pos:end="289:5">{<block_content pos:start="285:9" pos:end="287:17">

        <expr_stmt pos:start="285:9" pos:end="285:69"><expr pos:start="285:9" pos:end="285:68"><call pos:start="285:9" pos:end="285:68"><name pos:start="285:9" pos:end="285:24">error_setg_errno</name><argument_list pos:start="285:25" pos:end="285:68">(<argument pos:start="285:26" pos:end="285:29"><expr pos:start="285:26" pos:end="285:29"><name pos:start="285:26" pos:end="285:29">errp</name></expr></argument>, <argument pos:start="285:32" pos:end="285:35"><expr pos:start="285:32" pos:end="285:35"><operator pos:start="285:32" pos:end="285:32">-</operator><name pos:start="285:33" pos:end="285:35">ret</name></expr></argument>, <argument pos:start="285:38" pos:end="285:67"><expr pos:start="285:38" pos:end="285:67"><literal type="string" pos:start="285:38" pos:end="285:67">"Could not write qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="287:9" pos:end="287:17">goto <name pos:start="287:14" pos:end="287:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="293:5" pos:end="293:56">/* Write a refcount table with one refcount block */</comment>

    <expr_stmt pos:start="295:5" pos:end="295:49"><expr pos:start="295:5" pos:end="295:48"><name pos:start="295:5" pos:end="295:18">refcount_table</name> <operator pos:start="295:20" pos:end="295:20">=</operator> <call pos:start="295:22" pos:end="295:48"><name pos:start="295:22" pos:end="295:30">g_malloc0</name><argument_list pos:start="295:31" pos:end="295:48">(<argument pos:start="295:32" pos:end="295:47"><expr pos:start="295:32" pos:end="295:47"><literal type="number" pos:start="295:32" pos:end="295:32">2</literal> <operator pos:start="295:34" pos:end="295:34">*</operator> <name pos:start="295:36" pos:end="295:47">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:54"><expr pos:start="297:5" pos:end="297:53"><name pos:start="297:5" pos:end="297:21"><name pos:start="297:5" pos:end="297:18">refcount_table</name><index pos:start="297:19" pos:end="297:21">[<expr pos:start="297:20" pos:end="297:20"><literal type="number" pos:start="297:20" pos:end="297:20">0</literal></expr>]</index></name> <operator pos:start="297:23" pos:end="297:23">=</operator> <call pos:start="297:25" pos:end="297:53"><name pos:start="297:25" pos:end="297:35">cpu_to_be64</name><argument_list pos:start="297:36" pos:end="297:53">(<argument pos:start="297:37" pos:end="297:52"><expr pos:start="297:37" pos:end="297:52"><literal type="number" pos:start="297:37" pos:end="297:37">2</literal> <operator pos:start="297:39" pos:end="297:39">*</operator> <name pos:start="297:41" pos:end="297:52">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:74"><expr pos:start="299:5" pos:end="299:73"><name pos:start="299:5" pos:end="299:7">ret</name> <operator pos:start="299:9" pos:end="299:9">=</operator> <call pos:start="299:11" pos:end="299:73"><name pos:start="299:11" pos:end="299:21">bdrv_pwrite</name><argument_list pos:start="299:22" pos:end="299:73">(<argument pos:start="299:23" pos:end="299:24"><expr pos:start="299:23" pos:end="299:24"><name pos:start="299:23" pos:end="299:24">bs</name></expr></argument>, <argument pos:start="299:27" pos:end="299:38"><expr pos:start="299:27" pos:end="299:38"><name pos:start="299:27" pos:end="299:38">cluster_size</name></expr></argument>, <argument pos:start="299:41" pos:end="299:54"><expr pos:start="299:41" pos:end="299:54"><name pos:start="299:41" pos:end="299:54">refcount_table</name></expr></argument>, <argument pos:start="299:57" pos:end="299:72"><expr pos:start="299:57" pos:end="299:72"><literal type="number" pos:start="299:57" pos:end="299:57">2</literal> <operator pos:start="299:59" pos:end="299:59">*</operator> <name pos:start="299:61" pos:end="299:72">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:27"><expr pos:start="301:5" pos:end="301:26"><call pos:start="301:5" pos:end="301:26"><name pos:start="301:5" pos:end="301:10">g_free</name><argument_list pos:start="301:11" pos:end="301:26">(<argument pos:start="301:12" pos:end="301:25"><expr pos:start="301:12" pos:end="301:25"><name pos:start="301:12" pos:end="301:25">refcount_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="305:5" pos:end="311:5"><if pos:start="305:5" pos:end="311:5">if <condition pos:start="305:8" pos:end="305:16">(<expr pos:start="305:9" pos:end="305:15"><name pos:start="305:9" pos:end="305:11">ret</name> <operator pos:start="305:13" pos:end="305:13">&lt;</operator> <literal type="number" pos:start="305:15" pos:end="305:15">0</literal></expr>)</condition> <block pos:start="305:18" pos:end="311:5">{<block_content pos:start="307:9" pos:end="309:17">

        <expr_stmt pos:start="307:9" pos:end="307:71"><expr pos:start="307:9" pos:end="307:70"><call pos:start="307:9" pos:end="307:70"><name pos:start="307:9" pos:end="307:24">error_setg_errno</name><argument_list pos:start="307:25" pos:end="307:70">(<argument pos:start="307:26" pos:end="307:29"><expr pos:start="307:26" pos:end="307:29"><name pos:start="307:26" pos:end="307:29">errp</name></expr></argument>, <argument pos:start="307:32" pos:end="307:35"><expr pos:start="307:32" pos:end="307:35"><operator pos:start="307:32" pos:end="307:32">-</operator><name pos:start="307:33" pos:end="307:35">ret</name></expr></argument>, <argument pos:start="307:38" pos:end="307:69"><expr pos:start="307:38" pos:end="307:69"><literal type="string" pos:start="307:38" pos:end="307:69">"Could not write refcount table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="309:9" pos:end="309:17">goto <name pos:start="309:14" pos:end="309:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="315:5" pos:end="315:19"><expr pos:start="315:5" pos:end="315:18"><call pos:start="315:5" pos:end="315:18"><name pos:start="315:5" pos:end="315:14">bdrv_unref</name><argument_list pos:start="315:15" pos:end="315:18">(<argument pos:start="315:16" pos:end="315:17"><expr pos:start="315:16" pos:end="315:17"><name pos:start="315:16" pos:end="315:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:14"><expr pos:start="317:5" pos:end="317:13"><name pos:start="317:5" pos:end="317:6">bs</name> <operator pos:start="317:8" pos:end="317:8">=</operator> <name pos:start="317:10" pos:end="317:13">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="321:5" pos:end="329:7">/*

     * And now open the image and make it consistent first (i.e. increase the

     * refcount of the cluster that is occupied by the header and the refcount

     * table)

     */</comment>

    <expr_stmt pos:start="331:5" pos:end="335:45"><expr pos:start="331:5" pos:end="335:44"><name pos:start="331:5" pos:end="331:7">ret</name> <operator pos:start="331:9" pos:end="331:9">=</operator> <call pos:start="331:11" pos:end="335:44"><name pos:start="331:11" pos:end="331:19">bdrv_open</name><argument_list pos:start="331:20" pos:end="335:44">(<argument pos:start="331:21" pos:end="331:23"><expr pos:start="331:21" pos:end="331:23"><operator pos:start="331:21" pos:end="331:21">&amp;</operator><name pos:start="331:22" pos:end="331:23">bs</name></expr></argument>, <argument pos:start="331:26" pos:end="331:33"><expr pos:start="331:26" pos:end="331:33"><name pos:start="331:26" pos:end="331:33">filename</name></expr></argument>, <argument pos:start="331:36" pos:end="331:39"><expr pos:start="331:36" pos:end="331:39"><name pos:start="331:36" pos:end="331:39">NULL</name></expr></argument>, <argument pos:start="331:42" pos:end="331:45"><expr pos:start="331:42" pos:end="331:45"><name pos:start="331:42" pos:end="331:45">NULL</name></expr></argument>,

                    <argument pos:start="333:21" pos:end="333:67"><expr pos:start="333:21" pos:end="333:67"><name pos:start="333:21" pos:end="333:31">BDRV_O_RDWR</name> <operator pos:start="333:33" pos:end="333:33">|</operator> <name pos:start="333:35" pos:end="333:49">BDRV_O_CACHE_WB</name> <operator pos:start="333:51" pos:end="333:51">|</operator> <name pos:start="333:53" pos:end="333:67">BDRV_O_NO_FLUSH</name></expr></argument>,

                    <argument pos:start="335:21" pos:end="335:31"><expr pos:start="335:21" pos:end="335:31"><operator pos:start="335:21" pos:end="335:21">&amp;</operator><name pos:start="335:22" pos:end="335:31">bdrv_qcow2</name></expr></argument>, <argument pos:start="335:34" pos:end="335:43"><expr pos:start="335:34" pos:end="335:43"><operator pos:start="335:34" pos:end="335:34">&amp;</operator><name pos:start="335:35" pos:end="335:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="337:5" pos:end="343:5"><if pos:start="337:5" pos:end="343:5">if <condition pos:start="337:8" pos:end="337:16">(<expr pos:start="337:9" pos:end="337:15"><name pos:start="337:9" pos:end="337:11">ret</name> <operator pos:start="337:13" pos:end="337:13">&lt;</operator> <literal type="number" pos:start="337:15" pos:end="337:15">0</literal></expr>)</condition> <block pos:start="337:18" pos:end="343:5">{<block_content pos:start="339:9" pos:end="341:17">

        <expr_stmt pos:start="339:9" pos:end="339:41"><expr pos:start="339:9" pos:end="339:40"><call pos:start="339:9" pos:end="339:40"><name pos:start="339:9" pos:end="339:23">error_propagate</name><argument_list pos:start="339:24" pos:end="339:40">(<argument pos:start="339:25" pos:end="339:28"><expr pos:start="339:25" pos:end="339:28"><name pos:start="339:25" pos:end="339:28">errp</name></expr></argument>, <argument pos:start="339:31" pos:end="339:39"><expr pos:start="339:31" pos:end="339:39"><name pos:start="339:31" pos:end="339:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="341:9" pos:end="341:17">goto <name pos:start="341:14" pos:end="341:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="347:5" pos:end="347:53"><expr pos:start="347:5" pos:end="347:52"><name pos:start="347:5" pos:end="347:7">ret</name> <operator pos:start="347:9" pos:end="347:9">=</operator> <call pos:start="347:11" pos:end="347:52"><name pos:start="347:11" pos:end="347:30">qcow2_alloc_clusters</name><argument_list pos:start="347:31" pos:end="347:52">(<argument pos:start="347:32" pos:end="347:33"><expr pos:start="347:32" pos:end="347:33"><name pos:start="347:32" pos:end="347:33">bs</name></expr></argument>, <argument pos:start="347:36" pos:end="347:51"><expr pos:start="347:36" pos:end="347:51"><literal type="number" pos:start="347:36" pos:end="347:36">3</literal> <operator pos:start="347:38" pos:end="347:38">*</operator> <name pos:start="347:40" pos:end="347:51">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="349:5" pos:end="365:5"><if pos:start="349:5" pos:end="359:5">if <condition pos:start="349:8" pos:end="349:16">(<expr pos:start="349:9" pos:end="349:15"><name pos:start="349:9" pos:end="349:11">ret</name> <operator pos:start="349:13" pos:end="349:13">&lt;</operator> <literal type="number" pos:start="349:15" pos:end="349:15">0</literal></expr>)</condition> <block pos:start="349:18" pos:end="359:5">{<block_content pos:start="351:9" pos:end="355:17">

        <expr_stmt pos:start="351:9" pos:end="353:54"><expr pos:start="351:9" pos:end="353:53"><call pos:start="351:9" pos:end="353:53"><name pos:start="351:9" pos:end="351:24">error_setg_errno</name><argument_list pos:start="351:25" pos:end="353:53">(<argument pos:start="351:26" pos:end="351:29"><expr pos:start="351:26" pos:end="351:29"><name pos:start="351:26" pos:end="351:29">errp</name></expr></argument>, <argument pos:start="351:32" pos:end="351:35"><expr pos:start="351:32" pos:end="351:35"><operator pos:start="351:32" pos:end="351:32">-</operator><name pos:start="351:33" pos:end="351:35">ret</name></expr></argument>, <argument pos:start="351:38" pos:end="353:52"><expr pos:start="351:38" pos:end="353:52"><literal type="string" pos:start="351:38" pos:end="351:77">"Could not allocate clusters for qcow2 "</literal>

                         <literal type="string" pos:start="353:26" pos:end="353:52">"header and refcount table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="355:9" pos:end="355:17">goto <name pos:start="355:14" pos:end="355:16">out</name>;</goto>



    </block_content>}</block></if> <if type="elseif" pos:start="359:7" pos:end="365:5">else if <condition pos:start="359:15" pos:end="359:24">(<expr pos:start="359:16" pos:end="359:23"><name pos:start="359:16" pos:end="359:18">ret</name> <operator pos:start="359:20" pos:end="359:21">!=</operator> <literal type="number" pos:start="359:23" pos:end="359:23">0</literal></expr>)</condition> <block pos:start="359:26" pos:end="365:5">{<block_content pos:start="361:9" pos:end="363:16">

        <expr_stmt pos:start="361:9" pos:end="361:77"><expr pos:start="361:9" pos:end="361:76"><call pos:start="361:9" pos:end="361:76"><name pos:start="361:9" pos:end="361:20">error_report</name><argument_list pos:start="361:21" pos:end="361:76">(<argument pos:start="361:22" pos:end="361:75"><expr pos:start="361:22" pos:end="361:75"><literal type="string" pos:start="361:22" pos:end="361:75">"Huh, first cluster in empty image is already in use?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:16"><expr pos:start="363:9" pos:end="363:15"><call pos:start="363:9" pos:end="363:15"><name pos:start="363:9" pos:end="363:13">abort</name><argument_list pos:start="363:14" pos:end="363:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="369:5" pos:end="369:76">/* Okay, now that we have a valid image, let's give it the right size */</comment>

    <expr_stmt pos:start="371:5" pos:end="371:40"><expr pos:start="371:5" pos:end="371:39"><name pos:start="371:5" pos:end="371:7">ret</name> <operator pos:start="371:9" pos:end="371:9">=</operator> <call pos:start="371:11" pos:end="371:39"><name pos:start="371:11" pos:end="371:23">bdrv_truncate</name><argument_list pos:start="371:24" pos:end="371:39">(<argument pos:start="371:25" pos:end="371:26"><expr pos:start="371:25" pos:end="371:26"><name pos:start="371:25" pos:end="371:26">bs</name></expr></argument>, <argument pos:start="371:29" pos:end="371:38"><expr pos:start="371:29" pos:end="371:38"><name pos:start="371:29" pos:end="371:38">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="373:5" pos:end="379:5"><if pos:start="373:5" pos:end="379:5">if <condition pos:start="373:8" pos:end="373:16">(<expr pos:start="373:9" pos:end="373:15"><name pos:start="373:9" pos:end="373:11">ret</name> <operator pos:start="373:13" pos:end="373:13">&lt;</operator> <literal type="number" pos:start="373:15" pos:end="373:15">0</literal></expr>)</condition> <block pos:start="373:18" pos:end="379:5">{<block_content pos:start="375:9" pos:end="377:17">

        <expr_stmt pos:start="375:9" pos:end="375:63"><expr pos:start="375:9" pos:end="375:62"><call pos:start="375:9" pos:end="375:62"><name pos:start="375:9" pos:end="375:24">error_setg_errno</name><argument_list pos:start="375:25" pos:end="375:62">(<argument pos:start="375:26" pos:end="375:29"><expr pos:start="375:26" pos:end="375:29"><name pos:start="375:26" pos:end="375:29">errp</name></expr></argument>, <argument pos:start="375:32" pos:end="375:35"><expr pos:start="375:32" pos:end="375:35"><operator pos:start="375:32" pos:end="375:32">-</operator><name pos:start="375:33" pos:end="375:35">ret</name></expr></argument>, <argument pos:start="375:38" pos:end="375:61"><expr pos:start="375:38" pos:end="375:61"><literal type="string" pos:start="375:38" pos:end="375:61">"Could not resize image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="377:9" pos:end="377:17">goto <name pos:start="377:14" pos:end="377:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="383:5" pos:end="383:43">/* Want a backing file? There you go.*/</comment>

    <if_stmt pos:start="385:5" pos:end="399:5"><if pos:start="385:5" pos:end="399:5">if <condition pos:start="385:8" pos:end="385:21">(<expr pos:start="385:9" pos:end="385:20"><name pos:start="385:9" pos:end="385:20">backing_file</name></expr>)</condition> <block pos:start="385:23" pos:end="399:5">{<block_content pos:start="387:9" pos:end="397:9">

        <expr_stmt pos:start="387:9" pos:end="387:73"><expr pos:start="387:9" pos:end="387:72"><name pos:start="387:9" pos:end="387:11">ret</name> <operator pos:start="387:13" pos:end="387:13">=</operator> <call pos:start="387:15" pos:end="387:72"><name pos:start="387:15" pos:end="387:38">bdrv_change_backing_file</name><argument_list pos:start="387:39" pos:end="387:72">(<argument pos:start="387:40" pos:end="387:41"><expr pos:start="387:40" pos:end="387:41"><name pos:start="387:40" pos:end="387:41">bs</name></expr></argument>, <argument pos:start="387:44" pos:end="387:55"><expr pos:start="387:44" pos:end="387:55"><name pos:start="387:44" pos:end="387:55">backing_file</name></expr></argument>, <argument pos:start="387:58" pos:end="387:71"><expr pos:start="387:58" pos:end="387:71"><name pos:start="387:58" pos:end="387:71">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="389:9" pos:end="397:9"><if pos:start="389:9" pos:end="397:9">if <condition pos:start="389:12" pos:end="389:20">(<expr pos:start="389:13" pos:end="389:19"><name pos:start="389:13" pos:end="389:15">ret</name> <operator pos:start="389:17" pos:end="389:17">&lt;</operator> <literal type="number" pos:start="389:19" pos:end="389:19">0</literal></expr>)</condition> <block pos:start="389:22" pos:end="397:9">{<block_content pos:start="391:13" pos:end="395:21">

            <expr_stmt pos:start="391:13" pos:end="393:79"><expr pos:start="391:13" pos:end="393:78"><call pos:start="391:13" pos:end="393:78"><name pos:start="391:13" pos:end="391:28">error_setg_errno</name><argument_list pos:start="391:29" pos:end="393:78">(<argument pos:start="391:30" pos:end="391:33"><expr pos:start="391:30" pos:end="391:33"><name pos:start="391:30" pos:end="391:33">errp</name></expr></argument>, <argument pos:start="391:36" pos:end="391:39"><expr pos:start="391:36" pos:end="391:39"><operator pos:start="391:36" pos:end="391:36">-</operator><name pos:start="391:37" pos:end="391:39">ret</name></expr></argument>, <argument pos:start="391:42" pos:end="393:47"><expr pos:start="391:42" pos:end="393:47"><literal type="string" pos:start="391:42" pos:end="391:78">"Could not assign backing file '%s' "</literal>

                             <literal type="string" pos:start="393:30" pos:end="393:47">"with format '%s'"</literal></expr></argument>, <argument pos:start="393:50" pos:end="393:61"><expr pos:start="393:50" pos:end="393:61"><name pos:start="393:50" pos:end="393:61">backing_file</name></expr></argument>, <argument pos:start="393:64" pos:end="393:77"><expr pos:start="393:64" pos:end="393:77"><name pos:start="393:64" pos:end="393:77">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="395:13" pos:end="395:21">goto <name pos:start="395:18" pos:end="395:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="403:5" pos:end="403:68">/* And if we're supposed to preallocate metadata, do that now */</comment>

    <if_stmt pos:start="405:5" pos:end="423:5"><if pos:start="405:5" pos:end="423:5">if <condition pos:start="405:8" pos:end="405:38">(<expr pos:start="405:9" pos:end="405:37"><name pos:start="405:9" pos:end="405:16">prealloc</name> <operator pos:start="405:18" pos:end="405:19">!=</operator> <name pos:start="405:21" pos:end="405:37">PREALLOC_MODE_OFF</name></expr>)</condition> <block pos:start="405:40" pos:end="423:5">{<block_content pos:start="407:9" pos:end="421:9">

        <decl_stmt pos:start="407:9" pos:end="407:38"><decl pos:start="407:9" pos:end="407:37"><type pos:start="407:9" pos:end="407:23"><name pos:start="407:9" pos:end="407:21">BDRVQcowState</name> <modifier pos:start="407:23" pos:end="407:23">*</modifier></type><name pos:start="407:24" pos:end="407:24">s</name> <init pos:start="407:26" pos:end="407:37">= <expr pos:start="407:28" pos:end="407:37"><name pos:start="407:28" pos:end="407:37"><name pos:start="407:28" pos:end="407:29">bs</name><operator pos:start="407:30" pos:end="407:31">-&gt;</operator><name pos:start="407:32" pos:end="407:37">opaque</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="409:9" pos:end="409:37"><expr pos:start="409:9" pos:end="409:36"><call pos:start="409:9" pos:end="409:36"><name pos:start="409:9" pos:end="409:26">qemu_co_mutex_lock</name><argument_list pos:start="409:27" pos:end="409:36">(<argument pos:start="409:28" pos:end="409:35"><expr pos:start="409:28" pos:end="409:35"><operator pos:start="409:28" pos:end="409:28">&amp;</operator><name pos:start="409:29" pos:end="409:35"><name pos:start="409:29" pos:end="409:29">s</name><operator pos:start="409:30" pos:end="409:31">-&gt;</operator><name pos:start="409:32" pos:end="409:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="411:9" pos:end="411:30"><expr pos:start="411:9" pos:end="411:29"><name pos:start="411:9" pos:end="411:11">ret</name> <operator pos:start="411:13" pos:end="411:13">=</operator> <call pos:start="411:15" pos:end="411:29"><name pos:start="411:15" pos:end="411:25">preallocate</name><argument_list pos:start="411:26" pos:end="411:29">(<argument pos:start="411:27" pos:end="411:28"><expr pos:start="411:27" pos:end="411:28"><name pos:start="411:27" pos:end="411:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:39"><expr pos:start="413:9" pos:end="413:38"><call pos:start="413:9" pos:end="413:38"><name pos:start="413:9" pos:end="413:28">qemu_co_mutex_unlock</name><argument_list pos:start="413:29" pos:end="413:38">(<argument pos:start="413:30" pos:end="413:37"><expr pos:start="413:30" pos:end="413:37"><operator pos:start="413:30" pos:end="413:30">&amp;</operator><name pos:start="413:31" pos:end="413:37"><name pos:start="413:31" pos:end="413:31">s</name><operator pos:start="413:32" pos:end="413:33">-&gt;</operator><name pos:start="413:34" pos:end="413:37">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="415:9" pos:end="421:9"><if pos:start="415:9" pos:end="421:9">if <condition pos:start="415:12" pos:end="415:20">(<expr pos:start="415:13" pos:end="415:19"><name pos:start="415:13" pos:end="415:15">ret</name> <operator pos:start="415:17" pos:end="415:17">&lt;</operator> <literal type="number" pos:start="415:19" pos:end="415:19">0</literal></expr>)</condition> <block pos:start="415:22" pos:end="421:9">{<block_content pos:start="417:13" pos:end="419:21">

            <expr_stmt pos:start="417:13" pos:end="417:75"><expr pos:start="417:13" pos:end="417:74"><call pos:start="417:13" pos:end="417:74"><name pos:start="417:13" pos:end="417:28">error_setg_errno</name><argument_list pos:start="417:29" pos:end="417:74">(<argument pos:start="417:30" pos:end="417:33"><expr pos:start="417:30" pos:end="417:33"><name pos:start="417:30" pos:end="417:33">errp</name></expr></argument>, <argument pos:start="417:36" pos:end="417:39"><expr pos:start="417:36" pos:end="417:39"><operator pos:start="417:36" pos:end="417:36">-</operator><name pos:start="417:37" pos:end="417:39">ret</name></expr></argument>, <argument pos:start="417:42" pos:end="417:73"><expr pos:start="417:42" pos:end="417:73"><literal type="string" pos:start="417:42" pos:end="417:73">"Could not preallocate metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="419:13" pos:end="419:21">goto <name pos:start="419:18" pos:end="419:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="427:5" pos:end="427:19"><expr pos:start="427:5" pos:end="427:18"><call pos:start="427:5" pos:end="427:18"><name pos:start="427:5" pos:end="427:14">bdrv_unref</name><argument_list pos:start="427:15" pos:end="427:18">(<argument pos:start="427:16" pos:end="427:17"><expr pos:start="427:16" pos:end="427:17"><name pos:start="427:16" pos:end="427:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:14"><expr pos:start="429:5" pos:end="429:13"><name pos:start="429:5" pos:end="429:6">bs</name> <operator pos:start="429:8" pos:end="429:8">=</operator> <name pos:start="429:10" pos:end="429:13">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="433:5" pos:end="433:79">/* Reopen the image without BDRV_O_NO_FLUSH to flush it before returning */</comment>

    <expr_stmt pos:start="435:5" pos:end="439:45"><expr pos:start="435:5" pos:end="439:44"><name pos:start="435:5" pos:end="435:7">ret</name> <operator pos:start="435:9" pos:end="435:9">=</operator> <call pos:start="435:11" pos:end="439:44"><name pos:start="435:11" pos:end="435:19">bdrv_open</name><argument_list pos:start="435:20" pos:end="439:44">(<argument pos:start="435:21" pos:end="435:23"><expr pos:start="435:21" pos:end="435:23"><operator pos:start="435:21" pos:end="435:21">&amp;</operator><name pos:start="435:22" pos:end="435:23">bs</name></expr></argument>, <argument pos:start="435:26" pos:end="435:33"><expr pos:start="435:26" pos:end="435:33"><name pos:start="435:26" pos:end="435:33">filename</name></expr></argument>, <argument pos:start="435:36" pos:end="435:39"><expr pos:start="435:36" pos:end="435:39"><name pos:start="435:36" pos:end="435:39">NULL</name></expr></argument>, <argument pos:start="435:42" pos:end="435:45"><expr pos:start="435:42" pos:end="435:45"><name pos:start="435:42" pos:end="435:45">NULL</name></expr></argument>,

                    <argument pos:start="437:21" pos:end="437:69"><expr pos:start="437:21" pos:end="437:69"><name pos:start="437:21" pos:end="437:31">BDRV_O_RDWR</name> <operator pos:start="437:33" pos:end="437:33">|</operator> <name pos:start="437:35" pos:end="437:49">BDRV_O_CACHE_WB</name> <operator pos:start="437:51" pos:end="437:51">|</operator> <name pos:start="437:53" pos:end="437:69">BDRV_O_NO_BACKING</name></expr></argument>,

                    <argument pos:start="439:21" pos:end="439:31"><expr pos:start="439:21" pos:end="439:31"><operator pos:start="439:21" pos:end="439:21">&amp;</operator><name pos:start="439:22" pos:end="439:31">bdrv_qcow2</name></expr></argument>, <argument pos:start="439:34" pos:end="439:43"><expr pos:start="439:34" pos:end="439:43"><operator pos:start="439:34" pos:end="439:34">&amp;</operator><name pos:start="439:35" pos:end="439:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="441:5" pos:end="447:5"><if pos:start="441:5" pos:end="447:5">if <condition pos:start="441:8" pos:end="441:18">(<expr pos:start="441:9" pos:end="441:17"><name pos:start="441:9" pos:end="441:17">local_err</name></expr>)</condition> <block pos:start="441:20" pos:end="447:5">{<block_content pos:start="443:9" pos:end="445:17">

        <expr_stmt pos:start="443:9" pos:end="443:41"><expr pos:start="443:9" pos:end="443:40"><call pos:start="443:9" pos:end="443:40"><name pos:start="443:9" pos:end="443:23">error_propagate</name><argument_list pos:start="443:24" pos:end="443:40">(<argument pos:start="443:25" pos:end="443:28"><expr pos:start="443:25" pos:end="443:28"><name pos:start="443:25" pos:end="443:28">errp</name></expr></argument>, <argument pos:start="443:31" pos:end="443:39"><expr pos:start="443:31" pos:end="443:39"><name pos:start="443:31" pos:end="443:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="445:9" pos:end="445:17">goto <name pos:start="445:14" pos:end="445:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="451:5" pos:end="451:12"><expr pos:start="451:5" pos:end="451:11"><name pos:start="451:5" pos:end="451:7">ret</name> <operator pos:start="451:9" pos:end="451:9">=</operator> <literal type="number" pos:start="451:11" pos:end="451:11">0</literal></expr>;</expr_stmt>

<label pos:start="453:1" pos:end="453:4"><name pos:start="453:1" pos:end="453:3">out</name>:</label>

    <if_stmt pos:start="455:5" pos:end="459:5"><if pos:start="455:5" pos:end="459:5">if <condition pos:start="455:8" pos:end="455:11">(<expr pos:start="455:9" pos:end="455:10"><name pos:start="455:9" pos:end="455:10">bs</name></expr>)</condition> <block pos:start="455:13" pos:end="459:5">{<block_content pos:start="457:9" pos:end="457:23">

        <expr_stmt pos:start="457:9" pos:end="457:23"><expr pos:start="457:9" pos:end="457:22"><call pos:start="457:9" pos:end="457:22"><name pos:start="457:9" pos:end="457:18">bdrv_unref</name><argument_list pos:start="457:19" pos:end="457:22">(<argument pos:start="457:20" pos:end="457:21"><expr pos:start="457:20" pos:end="457:21"><name pos:start="457:20" pos:end="457:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="461:5" pos:end="461:15">return <expr pos:start="461:12" pos:end="461:14"><name pos:start="461:12" pos:end="461:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
