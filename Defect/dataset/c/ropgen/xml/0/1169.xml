<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1169.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">pxa2xx_ssp_write</name><parameter_list pos:start="1:29" pos:end="3:61">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:49">hwaddr</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:45"><decl pos:start="3:30" pos:end="3:45"><type pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:45">value64</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:60"><decl pos:start="3:48" pos:end="3:60"><type pos:start="3:48" pos:end="3:60"><name pos:start="3:48" pos:end="3:55">unsigned</name></type> <name pos:start="3:57" pos:end="3:60">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="179:1">{<block_content pos:start="7:5" pos:end="177:5">

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PXA2xxSSPState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:49">= <expr pos:start="7:25" pos:end="7:49"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:39">PXA2xxSSPState</name> <operator pos:start="7:41" pos:end="7:41">*</operator><operator pos:start="7:42" pos:end="7:42">)</operator> <name pos:start="7:44" pos:end="7:49">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">value</name> <init pos:start="9:20" pos:end="9:28">= <expr pos:start="9:22" pos:end="9:28"><name pos:start="9:22" pos:end="9:28">value64</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="177:5">switch <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><name pos:start="13:13" pos:end="13:16">addr</name></expr>)</condition> <block pos:start="13:19" pos:end="177:5">{<block_content pos:start="15:5" pos:end="175:14">

    <case pos:start="15:5" pos:end="15:15">case <expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:14">SSCR0</name></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:40"><expr pos:start="17:9" pos:end="17:39"><name pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:15">sscr</name><index pos:start="17:16" pos:end="17:18">[<expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr>]</index></name> <operator pos:start="17:20" pos:end="17:20">=</operator> <name pos:start="17:22" pos:end="17:26">value</name> <operator pos:start="17:28" pos:end="17:28">&amp;</operator> <literal type="number" pos:start="17:30" pos:end="17:39">0xc7ffffff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:38"><expr pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:17">enable</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <name pos:start="19:21" pos:end="19:25">value</name> <operator pos:start="19:27" pos:end="19:27">&amp;</operator> <name pos:start="19:29" pos:end="19:37">SSCR0_SSE</name></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:70"><if pos:start="21:9" pos:end="23:70">if <condition pos:start="21:12" pos:end="21:30">(<expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:17">value</name> <operator pos:start="21:19" pos:end="21:19">&amp;</operator> <name pos:start="21:21" pos:end="21:29">SSCR0_MOD</name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:70"><block_content pos:start="23:13" pos:end="23:70">

            <expr_stmt pos:start="23:13" pos:end="23:70"><expr pos:start="23:13" pos:end="23:69"><call pos:start="23:13" pos:end="23:69"><name pos:start="23:13" pos:end="23:18">printf</name><argument_list pos:start="23:19" pos:end="23:69">(<argument pos:start="23:20" pos:end="23:54"><expr pos:start="23:20" pos:end="23:54"><literal type="string" pos:start="23:20" pos:end="23:54">"%s: Attempt to use network mode\n"</literal></expr></argument>, <argument pos:start="23:57" pos:end="23:68"><expr pos:start="23:57" pos:end="23:68"><name pos:start="23:57" pos:end="23:68">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="29:46"><if pos:start="25:9" pos:end="29:46">if <condition pos:start="25:12" pos:end="25:46">(<expr pos:start="25:13" pos:end="25:45"><name pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:21">enable</name></name> <operator pos:start="25:23" pos:end="25:24">&amp;&amp;</operator> <call pos:start="25:26" pos:end="25:41"><name pos:start="25:26" pos:end="25:34">SSCR0_DSS</name><argument_list pos:start="25:35" pos:end="25:41">(<argument pos:start="25:36" pos:end="25:40"><expr pos:start="25:36" pos:end="25:40"><name pos:start="25:36" pos:end="25:40">value</name></expr></argument>)</argument_list></call> <operator pos:start="25:43" pos:end="25:43">&lt;</operator> <literal type="number" pos:start="25:45" pos:end="25:45">4</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="29:46"><block_content pos:start="27:13" pos:end="29:46">

            <expr_stmt pos:start="27:13" pos:end="29:46"><expr pos:start="27:13" pos:end="29:45"><call pos:start="27:13" pos:end="29:45"><name pos:start="27:13" pos:end="27:18">printf</name><argument_list pos:start="27:19" pos:end="29:45">(<argument pos:start="27:20" pos:end="27:51"><expr pos:start="27:20" pos:end="27:51"><literal type="string" pos:start="27:20" pos:end="27:51">"%s: Wrong data size: %i bits\n"</literal></expr></argument>, <argument pos:start="27:54" pos:end="27:65"><expr pos:start="27:54" pos:end="27:65"><name pos:start="27:54" pos:end="27:65">__FUNCTION__</name></expr></argument>,

                            <argument pos:start="29:29" pos:end="29:44"><expr pos:start="29:29" pos:end="29:44"><call pos:start="29:29" pos:end="29:44"><name pos:start="29:29" pos:end="29:37">SSCR0_DSS</name><argument_list pos:start="29:38" pos:end="29:44">(<argument pos:start="29:39" pos:end="29:43"><expr pos:start="29:39" pos:end="29:43"><name pos:start="29:39" pos:end="29:43">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:33">(<expr pos:start="31:13" pos:end="31:32"><operator pos:start="31:13" pos:end="31:13">!</operator><operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:19">value</name> <operator pos:start="31:21" pos:end="31:21">&amp;</operator> <name pos:start="31:23" pos:end="31:31">SSCR0_SSE</name><operator pos:start="31:32" pos:end="31:32">)</operator></expr>)</condition> <block pos:start="31:35" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:28">

            <expr_stmt pos:start="33:13" pos:end="33:24"><expr pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:19">sssr</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <literal type="number" pos:start="33:23" pos:end="33:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:25"><expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:20">ssitr</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:28"><expr pos:start="37:13" pos:end="37:27"><name pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:23">rx_level</name></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <literal type="number" pos:start="37:27" pos:end="37:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><call pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:30">pxa2xx_ssp_fifo_update</name><argument_list pos:start="41:31" pos:end="41:33">(<argument pos:start="41:32" pos:end="41:32"><expr pos:start="41:32" pos:end="41:32"><name pos:start="41:32" pos:end="41:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>



    <case pos:start="47:5" pos:end="47:15">case <expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:14">SSCR1</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:27"><expr pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:15">sscr</name><index pos:start="49:16" pos:end="49:18">[<expr pos:start="49:17" pos:end="49:17"><literal type="number" pos:start="49:17" pos:end="49:17">1</literal></expr>]</index></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <name pos:start="49:22" pos:end="49:26">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="53:71"><if pos:start="51:9" pos:end="53:71">if <condition pos:start="51:12" pos:end="51:45">(<expr pos:start="51:13" pos:end="51:44"><name pos:start="51:13" pos:end="51:17">value</name> <operator pos:start="51:19" pos:end="51:19">&amp;</operator> <operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:30">SSCR1_LBM</name> <operator pos:start="51:32" pos:end="51:32">|</operator> <name pos:start="51:34" pos:end="51:43">SSCR1_EFWR</name><operator pos:start="51:44" pos:end="51:44">)</operator></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:71"><block_content pos:start="53:13" pos:end="53:71">

            <expr_stmt pos:start="53:13" pos:end="53:71"><expr pos:start="53:13" pos:end="53:70"><call pos:start="53:13" pos:end="53:70"><name pos:start="53:13" pos:end="53:18">printf</name><argument_list pos:start="53:19" pos:end="53:70">(<argument pos:start="53:20" pos:end="53:55"><expr pos:start="53:20" pos:end="53:55"><literal type="string" pos:start="53:20" pos:end="53:55">"%s: Attempt to use SSP test mode\n"</literal></expr></argument>, <argument pos:start="53:58" pos:end="53:69"><expr pos:start="53:58" pos:end="53:69"><name pos:start="53:58" pos:end="53:69">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><call pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:30">pxa2xx_ssp_fifo_update</name><argument_list pos:start="55:31" pos:end="55:33">(<argument pos:start="55:32" pos:end="55:32"><expr pos:start="55:32" pos:end="55:32"><name pos:start="55:32" pos:end="55:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>



    <case pos:start="61:5" pos:end="61:15">case <expr pos:start="61:10" pos:end="61:14"><name pos:start="61:10" pos:end="61:14">SSPSP</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:16">sspsp</name></name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:24">value</name></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>



    <case pos:start="69:5" pos:end="69:14">case <expr pos:start="69:10" pos:end="69:13"><name pos:start="69:10" pos:end="69:13">SSTO</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:24"><expr pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:15">ssto</name></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:23">value</name></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>



    <case pos:start="77:5" pos:end="77:15">case <expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:14">SSITR</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">ssitr</name></name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:24">value</name> <operator pos:start="79:26" pos:end="79:26">&amp;</operator> <name pos:start="79:28" pos:end="79:36">SSITR_INT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:33"><expr pos:start="81:9" pos:end="81:32"><call pos:start="81:9" pos:end="81:32"><name pos:start="81:9" pos:end="81:29">pxa2xx_ssp_int_update</name><argument_list pos:start="81:30" pos:end="81:32">(<argument pos:start="81:31" pos:end="81:31"><expr pos:start="81:31" pos:end="81:31"><name pos:start="81:31" pos:end="81:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>



    <case pos:start="87:5" pos:end="87:14">case <expr pos:start="87:10" pos:end="87:13"><name pos:start="87:10" pos:end="87:13">SSSR</name></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:38"><expr pos:start="89:9" pos:end="89:37"><name pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:15">sssr</name></name> <operator pos:start="89:17" pos:end="89:18">&amp;=</operator> <operator pos:start="89:20" pos:end="89:20">~</operator><operator pos:start="89:21" pos:end="89:21">(</operator><name pos:start="89:22" pos:end="89:26">value</name> <operator pos:start="89:28" pos:end="89:28">&amp;</operator> <name pos:start="89:30" pos:end="89:36">SSSR_RW</name><operator pos:start="89:37" pos:end="89:37">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><call pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:29">pxa2xx_ssp_int_update</name><argument_list pos:start="91:30" pos:end="91:32">(<argument pos:start="91:31" pos:end="91:31"><expr pos:start="91:31" pos:end="91:31"><name pos:start="91:31" pos:end="91:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>



    <case pos:start="97:5" pos:end="97:14">case <expr pos:start="97:10" pos:end="97:13"><name pos:start="97:10" pos:end="97:13">SSDR</name></expr>:</case>

        <if_stmt pos:start="99:9" pos:end="113:54"><if pos:start="99:9" pos:end="109:9">if <condition pos:start="99:12" pos:end="99:36">(<expr pos:start="99:13" pos:end="99:35"><call pos:start="99:13" pos:end="99:35"><name pos:start="99:13" pos:end="99:23">SSCR0_UWIRE</name><argument_list pos:start="99:24" pos:end="99:35">(<argument pos:start="99:25" pos:end="99:34"><expr pos:start="99:25" pos:end="99:34"><name pos:start="99:25" pos:end="99:34"><name pos:start="99:25" pos:end="99:25">s</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:31">sscr</name><index pos:start="99:32" pos:end="99:34">[<expr pos:start="99:33" pos:end="99:33"><literal type="number" pos:start="99:33" pos:end="99:33">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:38" pos:end="109:9">{<block_content pos:start="101:13" pos:end="107:30">

            <if_stmt pos:start="101:13" pos:end="107:30"><if pos:start="101:13" pos:end="103:32">if <condition pos:start="101:16" pos:end="101:40">(<expr pos:start="101:17" pos:end="101:39"><name pos:start="101:17" pos:end="101:26"><name pos:start="101:17" pos:end="101:17">s</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:23">sscr</name><index pos:start="101:24" pos:end="101:26">[<expr pos:start="101:25" pos:end="101:25"><literal type="number" pos:start="101:25" pos:end="101:25">1</literal></expr>]</index></name> <operator pos:start="101:28" pos:end="101:28">&amp;</operator> <name pos:start="101:30" pos:end="101:39">SSCR1_MWDS</name></expr>)</condition><block type="pseudo" pos:start="103:17" pos:end="103:32"><block_content pos:start="103:17" pos:end="103:32">

                <expr_stmt pos:start="103:17" pos:end="103:32"><expr pos:start="103:17" pos:end="103:31"><name pos:start="103:17" pos:end="103:21">value</name> <operator pos:start="103:23" pos:end="103:24">&amp;=</operator> <literal type="number" pos:start="103:26" pos:end="103:31">0xffff</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="105:13" pos:end="107:30">else<block type="pseudo" pos:start="107:17" pos:end="107:30"><block_content pos:start="107:17" pos:end="107:30">

                <expr_stmt pos:start="107:17" pos:end="107:30"><expr pos:start="107:17" pos:end="107:29"><name pos:start="107:17" pos:end="107:21">value</name> <operator pos:start="107:23" pos:end="107:24">&amp;=</operator> <literal type="number" pos:start="107:26" pos:end="107:29">0xff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="109:11" pos:end="113:54">else<block type="pseudo" pos:start="113:13" pos:end="113:54"><block_content pos:start="113:13" pos:end="113:54">

            <comment type="block" pos:start="111:13" pos:end="111:60">/* Note how 32bits overflow does no harm here */</comment>

            <expr_stmt pos:start="113:13" pos:end="113:54"><expr pos:start="113:13" pos:end="113:53"><name pos:start="113:13" pos:end="113:17">value</name> <operator pos:start="113:19" pos:end="113:20">&amp;=</operator> <operator pos:start="113:22" pos:end="113:22">(</operator><literal type="number" pos:start="113:23" pos:end="113:23">1</literal> <operator pos:start="113:25" pos:end="113:26">&lt;&lt;</operator> <call pos:start="113:28" pos:end="113:48"><name pos:start="113:28" pos:end="113:36">SSCR0_DSS</name><argument_list pos:start="113:37" pos:end="113:48">(<argument pos:start="113:38" pos:end="113:47"><expr pos:start="113:38" pos:end="113:47"><name pos:start="113:38" pos:end="113:47"><name pos:start="113:38" pos:end="113:38">s</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:44">sscr</name><index pos:start="113:45" pos:end="113:47">[<expr pos:start="113:46" pos:end="113:46"><literal type="number" pos:start="113:46" pos:end="113:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="113:49" pos:end="113:49">)</operator> <operator pos:start="113:51" pos:end="113:51">-</operator> <literal type="number" pos:start="113:53" pos:end="113:53">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <comment type="block" pos:start="117:9" pos:end="121:11">/* Data goes from here to the Tx FIFO and is shifted out from

         * there directly to the slave, no need to buffer it.

         */</comment>

        <if_stmt pos:start="123:9" pos:end="139:9"><if pos:start="123:9" pos:end="139:9">if <condition pos:start="123:12" pos:end="123:22">(<expr pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:21">enable</name></name></expr>)</condition> <block pos:start="123:24" pos:end="139:9">{<block_content pos:start="125:13" pos:end="137:13">

            <decl_stmt pos:start="125:13" pos:end="125:29"><decl pos:start="125:13" pos:end="125:28"><type pos:start="125:13" pos:end="125:20"><name pos:start="125:13" pos:end="125:20">uint32_t</name></type> <name pos:start="125:22" pos:end="125:28">readval</name></decl>;</decl_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:50"><expr pos:start="127:13" pos:end="127:49"><name pos:start="127:13" pos:end="127:19">readval</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="127:49"><name pos:start="127:23" pos:end="127:34">ssi_transfer</name><argument_list pos:start="127:35" pos:end="127:49">(<argument pos:start="127:36" pos:end="127:41"><expr pos:start="127:36" pos:end="127:41"><name pos:start="127:36" pos:end="127:41"><name pos:start="127:36" pos:end="127:36">s</name><operator pos:start="127:37" pos:end="127:38">-&gt;</operator><name pos:start="127:39" pos:end="127:41">bus</name></name></expr></argument>, <argument pos:start="127:44" pos:end="127:48"><expr pos:start="127:44" pos:end="127:48"><name pos:start="127:44" pos:end="127:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="137:13"><if pos:start="129:13" pos:end="133:13">if <condition pos:start="129:16" pos:end="129:35">(<expr pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:27"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:27">rx_level</name></name> <operator pos:start="129:29" pos:end="129:29">&lt;</operator> <literal type="number" pos:start="129:31" pos:end="129:34">0x10</literal></expr>)</condition> <block pos:start="129:37" pos:end="133:13">{<block_content pos:start="131:17" pos:end="131:75">

                <expr_stmt pos:start="131:17" pos:end="131:75"><expr pos:start="131:17" pos:end="131:74"><name pos:start="131:17" pos:end="131:64"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:26">rx_fifo</name><index pos:start="131:27" pos:end="131:64">[<expr pos:start="131:28" pos:end="131:63"><operator pos:start="131:28" pos:end="131:28">(</operator><name pos:start="131:29" pos:end="131:39"><name pos:start="131:29" pos:end="131:29">s</name><operator pos:start="131:30" pos:end="131:31">-&gt;</operator><name pos:start="131:32" pos:end="131:39">rx_start</name></name> <operator pos:start="131:41" pos:end="131:41">+</operator> <name pos:start="131:43" pos:end="131:53"><name pos:start="131:43" pos:end="131:43">s</name><operator pos:start="131:44" pos:end="131:45">-&gt;</operator><name pos:start="131:46" pos:end="131:53">rx_level</name></name> <operator pos:start="131:55" pos:end="131:56">++</operator><operator pos:start="131:57" pos:end="131:57">)</operator> <operator pos:start="131:59" pos:end="131:59">&amp;</operator> <literal type="number" pos:start="131:61" pos:end="131:63">0xf</literal></expr>]</index></name> <operator pos:start="131:66" pos:end="131:66">=</operator> <name pos:start="131:68" pos:end="131:74">readval</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="133:15" pos:end="137:13">else <block pos:start="133:20" pos:end="137:13">{<block_content pos:start="135:17" pos:end="135:36">

                <expr_stmt pos:start="135:17" pos:end="135:36"><expr pos:start="135:17" pos:end="135:35"><name pos:start="135:17" pos:end="135:23"><name pos:start="135:17" pos:end="135:17">s</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:23">sssr</name></name> <operator pos:start="135:25" pos:end="135:26">|=</operator> <name pos:start="135:28" pos:end="135:35">SSSR_ROR</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:34"><expr pos:start="141:9" pos:end="141:33"><call pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:30">pxa2xx_ssp_fifo_update</name><argument_list pos:start="141:31" pos:end="141:33">(<argument pos:start="141:32" pos:end="141:32"><expr pos:start="141:32" pos:end="141:32"><name pos:start="141:32" pos:end="141:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>



    <case pos:start="147:5" pos:end="147:15">case <expr pos:start="147:10" pos:end="147:14"><name pos:start="147:10" pos:end="147:14">SSTSA</name></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:16"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:16">sstsa</name></name> <operator pos:start="149:18" pos:end="149:18">=</operator> <name pos:start="149:20" pos:end="149:24">value</name></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>



    <case pos:start="155:5" pos:end="155:15">case <expr pos:start="155:10" pos:end="155:14"><name pos:start="155:10" pos:end="155:14">SSRSA</name></expr>:</case>

        <expr_stmt pos:start="157:9" pos:end="157:25"><expr pos:start="157:9" pos:end="157:24"><name pos:start="157:9" pos:end="157:16"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:16">ssrsa</name></name> <operator pos:start="157:18" pos:end="157:18">=</operator> <name pos:start="157:20" pos:end="157:24">value</name></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>



    <case pos:start="163:5" pos:end="163:15">case <expr pos:start="163:10" pos:end="163:14"><name pos:start="163:10" pos:end="163:14">SSACD</name></expr>:</case>

        <expr_stmt pos:start="165:9" pos:end="165:25"><expr pos:start="165:9" pos:end="165:24"><name pos:start="165:9" pos:end="165:16"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:16">ssacd</name></name> <operator pos:start="165:18" pos:end="165:18">=</operator> <name pos:start="165:20" pos:end="165:24">value</name></expr>;</expr_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>



    <default pos:start="171:5" pos:end="171:12">default:</default>

        <expr_stmt pos:start="173:9" pos:end="173:69"><expr pos:start="173:9" pos:end="173:68"><call pos:start="173:9" pos:end="173:68"><name pos:start="173:9" pos:end="173:14">printf</name><argument_list pos:start="173:15" pos:end="173:68">(<argument pos:start="173:16" pos:end="173:47"><expr pos:start="173:16" pos:end="173:47"><literal type="string" pos:start="173:16" pos:end="173:34">"%s: Bad register "</literal> <name pos:start="173:36" pos:end="173:42">REG_FMT</name> <literal type="string" pos:start="173:44" pos:end="173:47">"\n"</literal></expr></argument>, <argument pos:start="173:50" pos:end="173:61"><expr pos:start="173:50" pos:end="173:61"><name pos:start="173:50" pos:end="173:61">__FUNCTION__</name></expr></argument>, <argument pos:start="173:64" pos:end="173:67"><expr pos:start="173:64" pos:end="173:67"><name pos:start="173:64" pos:end="173:67">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
