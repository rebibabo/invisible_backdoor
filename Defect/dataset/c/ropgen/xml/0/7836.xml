<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7836.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">CPUState</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:21">ppc4xx_init</name> <parameter_list pos:start="1:23" pos:end="5:39">(<parameter pos:start="1:24" pos:end="1:44"><decl pos:start="1:24" pos:end="1:44"><type pos:start="1:24" pos:end="1:44"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:44">cpu_model</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:43"><decl pos:start="3:24" pos:end="3:43"><type pos:start="3:24" pos:end="3:43"><name pos:start="3:24" pos:end="3:34">clk_setup_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:43">cpu_clk</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:64"><decl pos:start="3:46" pos:end="3:64"><type pos:start="3:46" pos:end="3:64"><name pos:start="3:46" pos:end="3:56">clk_setup_t</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:64">tb_clk</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:38"><decl pos:start="5:24" pos:end="5:38"><type pos:start="5:24" pos:end="5:38"><name pos:start="5:24" pos:end="5:31">uint32_t</name></type> <name pos:start="5:33" pos:end="5:38">sysclk</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="47:1">{<block_content pos:start="9:5" pos:end="45:15">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">env</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:19">/* init CPUs */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:7">env</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:29"><name pos:start="15:11" pos:end="15:18">cpu_init</name><argument_list pos:start="15:19" pos:end="15:29">(<argument pos:start="15:20" pos:end="15:28"><expr pos:start="15:20" pos:end="15:28"><name pos:start="15:20" pos:end="15:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:13">(<expr pos:start="17:9" pos:end="17:12"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:12">env</name></expr>)</condition> <block pos:start="17:15" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:16">

        <expr_stmt pos:start="19:9" pos:end="21:27"><expr pos:start="19:9" pos:end="21:26"><call pos:start="19:9" pos:end="21:26"><name pos:start="19:9" pos:end="19:15">fprintf</name><argument_list pos:start="19:16" pos:end="21:26">(<argument pos:start="19:17" pos:end="19:22"><expr pos:start="19:17" pos:end="19:22"><name pos:start="19:17" pos:end="19:22">stderr</name></expr></argument>, <argument pos:start="19:25" pos:end="19:68"><expr pos:start="19:25" pos:end="19:68"><literal type="string" pos:start="19:25" pos:end="19:68">"Unable to find PowerPC %s CPU definition\n"</literal></expr></argument>,

                <argument pos:start="21:17" pos:end="21:25"><expr pos:start="21:17" pos:end="21:25"><name pos:start="21:17" pos:end="21:25">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:15"><call pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:12">exit</name><argument_list pos:start="23:13" pos:end="23:15">(<argument pos:start="23:14" pos:end="23:14"><expr pos:start="23:14" pos:end="23:14"><literal type="number" pos:start="23:14" pos:end="23:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:11">cpu_clk</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:15">cb</name></name> <operator pos:start="27:17" pos:end="27:17">=</operator> <name pos:start="27:19" pos:end="27:22">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="27:25" pos:end="27:77">/* We don't care about CPU clock frequency changes */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:26"><expr pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:11">cpu_clk</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:19">opaque</name></name> <operator pos:start="29:21" pos:end="29:21">=</operator> <name pos:start="29:23" pos:end="29:25">env</name></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:43">/* Set time-base frequency to sysclk */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:10">tb_clk</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:14">cb</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:49"><name pos:start="33:18" pos:end="33:36">ppc_emb_timers_init</name><argument_list pos:start="33:37" pos:end="33:49">(<argument pos:start="33:38" pos:end="33:40"><expr pos:start="33:38" pos:end="33:40"><name pos:start="33:38" pos:end="33:40">env</name></expr></argument>, <argument pos:start="33:43" pos:end="33:48"><expr pos:start="33:43" pos:end="33:48"><name pos:start="33:43" pos:end="33:48">sysclk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:10">tb_clk</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:18">opaque</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:24">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:34"><expr pos:start="37:5" pos:end="37:33"><call pos:start="37:5" pos:end="37:33"><name pos:start="37:5" pos:end="37:16">ppc_dcr_init</name><argument_list pos:start="37:17" pos:end="37:33">(<argument pos:start="37:18" pos:end="37:20"><expr pos:start="37:18" pos:end="37:20"><name pos:start="37:18" pos:end="37:20">env</name></expr></argument>, <argument pos:start="37:23" pos:end="37:26"><expr pos:start="37:23" pos:end="37:26"><name pos:start="37:23" pos:end="37:26">NULL</name></expr></argument>, <argument pos:start="37:29" pos:end="37:32"><expr pos:start="37:29" pos:end="37:32"><name pos:start="37:29" pos:end="37:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:33">/* Register qemu callbacks */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:60"><expr pos:start="41:5" pos:end="41:59"><call pos:start="41:5" pos:end="41:59"><name pos:start="41:5" pos:end="41:23">qemu_register_reset</name><argument_list pos:start="41:24" pos:end="41:59">(<argument pos:start="41:25" pos:end="41:53"><expr pos:start="41:25" pos:end="41:53"><operator pos:start="41:25" pos:end="41:25">(</operator><name pos:start="41:26" pos:end="41:41">QEMUResetHandler</name><operator pos:start="41:42" pos:end="41:42">*</operator><operator pos:start="41:43" pos:end="41:43">)</operator><operator pos:start="41:44" pos:end="41:44">&amp;</operator><name pos:start="41:45" pos:end="41:53">cpu_reset</name></expr></argument>, <argument pos:start="41:56" pos:end="41:58"><expr pos:start="41:56" pos:end="41:58"><name pos:start="41:56" pos:end="41:58">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="45:5" pos:end="45:15">return <expr pos:start="45:12" pos:end="45:14"><name pos:start="45:12" pos:end="45:14">env</name></expr>;</return>

</block_content>}</block></function>
</unit>
