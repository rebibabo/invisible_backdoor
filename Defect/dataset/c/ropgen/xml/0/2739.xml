<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2739.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:22"><name pos:start="1:1" pos:end="1:8">if_start</name><argument_list pos:start="1:9" pos:end="1:22">(<argument pos:start="1:10" pos:end="1:21">Slirp *slirp</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:36">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:16">now</name> <init pos:start="5:18" pos:end="5:46">= <expr pos:start="5:20" pos:end="5:46"><call pos:start="5:20" pos:end="5:46"><name pos:start="5:20" pos:end="5:36">qemu_get_clock_ns</name><argument_list pos:start="5:37" pos:end="5:46">(<argument pos:start="5:38" pos:end="5:45"><expr pos:start="5:38" pos:end="5:45"><name pos:start="5:38" pos:end="5:45">rt_clock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">requeued</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:20">from_batchq</name> <init pos:start="9:22" pos:end="9:28">= <expr pos:start="9:24" pos:end="9:28"><name pos:start="9:24" pos:end="9:28">false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:32"><decl pos:start="11:9" pos:end="11:24"><type pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:19"><name pos:start="11:9" pos:end="11:14">struct</name> <name pos:start="11:16" pos:end="11:19">mbuf</name></name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">ifm</name></decl>, <decl pos:start="11:27" pos:end="11:31"><type ref="prev" pos:start="11:9" pos:end="11:21"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:31">ifqt</name></decl>;</decl_stmt>



	<expr_stmt pos:start="15:9" pos:end="15:31"><expr pos:start="15:9" pos:end="15:30"><call pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:18">DEBUG_CALL</name><argument_list pos:start="15:19" pos:end="15:30">(<argument pos:start="15:20" pos:end="15:29"><expr pos:start="15:20" pos:end="15:29"><literal type="string" pos:start="15:20" pos:end="15:29">"if_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="19:9" pos:end="21:18"><if pos:start="19:9" pos:end="21:18">if <condition pos:start="19:12" pos:end="19:34">(<expr pos:start="19:13" pos:end="19:33"><name pos:start="19:13" pos:end="19:28"><name pos:start="19:13" pos:end="19:17">slirp</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:28">if_queued</name></name> <operator pos:start="19:30" pos:end="19:31">==</operator> <literal type="number" pos:start="19:33" pos:end="19:33">0</literal></expr>)</condition><block type="pseudo" pos:start="21:12" pos:end="21:18"><block_content pos:start="21:12" pos:end="21:18">

	   <return pos:start="21:12" pos:end="21:18">return;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="21:20" pos:end="21:38">/* Nothing to do */</comment>



 <label pos:start="25:2" pos:end="25:7"><name pos:start="25:2" pos:end="25:6">again</name>:</label>

        <comment type="block" pos:start="27:9" pos:end="27:43">/* check if we can really output */</comment>

        <if_stmt pos:start="29:9" pos:end="31:19"><if pos:start="29:9" pos:end="31:19">if <condition pos:start="29:12" pos:end="29:45">(<expr pos:start="29:13" pos:end="29:44"><operator pos:start="29:13" pos:end="29:13">!</operator><call pos:start="29:14" pos:end="29:44"><name pos:start="29:14" pos:end="29:29">slirp_can_output</name><argument_list pos:start="29:30" pos:end="29:44">(<argument pos:start="29:31" pos:end="29:43"><expr pos:start="29:31" pos:end="29:43"><name pos:start="29:31" pos:end="29:43"><name pos:start="29:31" pos:end="29:35">slirp</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:43">opaque</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:19"><block_content pos:start="31:13" pos:end="31:19">

            <return pos:start="31:13" pos:end="31:19">return;</return></block_content></block></if></if_stmt>



	<comment type="block" pos:start="35:9" pos:end="41:11">/*

	 * See which queue to get next packet from

	 * If there's something in the fastq, select it immediately

	 */</comment>

	<if_stmt pos:start="43:9" pos:end="63:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:57">(<expr pos:start="43:13" pos:end="43:56"><name pos:start="43:13" pos:end="43:36"><name pos:start="43:13" pos:end="43:17">slirp</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:27">if_fastq</name><operator pos:start="43:28" pos:end="43:28">.</operator><name pos:start="43:29" pos:end="43:36">ifq_next</name></name> <operator pos:start="43:38" pos:end="43:39">!=</operator> <operator pos:start="43:41" pos:end="43:41">&amp;</operator><name pos:start="43:42" pos:end="43:56"><name pos:start="43:42" pos:end="43:46">slirp</name><operator pos:start="43:47" pos:end="43:48">-&gt;</operator><name pos:start="43:49" pos:end="43:56">if_fastq</name></name></expr>)</condition> <block pos:start="43:59" pos:end="47:9">{<block_content pos:start="45:17" pos:end="45:47">

		<expr_stmt pos:start="45:17" pos:end="45:47"><expr pos:start="45:17" pos:end="45:46"><name pos:start="45:17" pos:end="45:19">ifm</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:46"><name pos:start="45:23" pos:end="45:27">slirp</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:37">if_fastq</name><operator pos:start="45:38" pos:end="45:38">.</operator><name pos:start="45:39" pos:end="45:46">ifq_next</name></name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="47:11" pos:end="63:9">else <block pos:start="47:16" pos:end="63:9">{<block_content pos:start="51:17" pos:end="61:35">

		<comment type="block" pos:start="49:17" pos:end="49:62">/* Nothing on fastq, see if next_m is valid */</comment>

		<if_stmt pos:start="51:17" pos:end="57:51"><if pos:start="51:17" pos:end="53:39">if <condition pos:start="51:20" pos:end="51:55">(<expr pos:start="51:21" pos:end="51:54"><name pos:start="51:21" pos:end="51:33"><name pos:start="51:21" pos:end="51:25">slirp</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:33">next_m</name></name> <operator pos:start="51:35" pos:end="51:36">!=</operator> <operator pos:start="51:38" pos:end="51:38">&amp;</operator><name pos:start="51:39" pos:end="51:54"><name pos:start="51:39" pos:end="51:43">slirp</name><operator pos:start="51:44" pos:end="51:45">-&gt;</operator><name pos:start="51:46" pos:end="51:54">if_batchq</name></name></expr>)</condition><block type="pseudo" pos:start="53:20" pos:end="53:39"><block_content pos:start="53:20" pos:end="53:39">

		   <expr_stmt pos:start="53:20" pos:end="53:39"><expr pos:start="53:20" pos:end="53:38"><name pos:start="53:20" pos:end="53:22">ifm</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <name pos:start="53:26" pos:end="53:38"><name pos:start="53:26" pos:end="53:30">slirp</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:38">next_m</name></name></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="55:17" pos:end="57:51">else<block type="pseudo" pos:start="57:20" pos:end="57:51"><block_content pos:start="57:20" pos:end="57:51">

		   <expr_stmt pos:start="57:20" pos:end="57:51"><expr pos:start="57:20" pos:end="57:50"><name pos:start="57:20" pos:end="57:22">ifm</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:50"><name pos:start="57:26" pos:end="57:30">slirp</name><operator pos:start="57:31" pos:end="57:32">-&gt;</operator><name pos:start="57:33" pos:end="57:41">if_batchq</name><operator pos:start="57:42" pos:end="57:42">.</operator><name pos:start="57:43" pos:end="57:50">ifq_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="61:17" pos:end="61:35"><expr pos:start="61:17" pos:end="61:34"><name pos:start="61:17" pos:end="61:27">from_batchq</name> <operator pos:start="61:29" pos:end="61:29">=</operator> <name pos:start="61:31" pos:end="61:34">true</name></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:27"><expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:13">slirp</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:24">if_queued</name></name><operator pos:start="67:25" pos:end="67:26">--</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="71:9" pos:end="71:58">/* Try to send packet unless it already expired */</comment>

        <if_stmt pos:start="73:9" pos:end="81:9"><if pos:start="73:9" pos:end="81:9">if <condition pos:start="73:12" pos:end="73:65">(<expr pos:start="73:13" pos:end="73:64"><name pos:start="73:13" pos:end="73:32"><name pos:start="73:13" pos:end="73:15">ifm</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:32">expiration_date</name></name> <operator pos:start="73:34" pos:end="73:35">&gt;=</operator> <name pos:start="73:37" pos:end="73:39">now</name> <operator pos:start="73:41" pos:end="73:42">&amp;&amp;</operator> <operator pos:start="73:44" pos:end="73:44">!</operator><call pos:start="73:45" pos:end="73:64"><name pos:start="73:45" pos:end="73:52">if_encap</name><argument_list pos:start="73:53" pos:end="73:64">(<argument pos:start="73:54" pos:end="73:58"><expr pos:start="73:54" pos:end="73:58"><name pos:start="73:54" pos:end="73:58">slirp</name></expr></argument>, <argument pos:start="73:61" pos:end="73:63"><expr pos:start="73:61" pos:end="73:63"><name pos:start="73:61" pos:end="73:63">ifm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:67" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:21">

            <comment type="block" pos:start="75:13" pos:end="75:65">/* Packet is delayed due to pending ARP resolution */</comment>

            <expr_stmt pos:start="77:13" pos:end="77:23"><expr pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:20">requeued</name><operator pos:start="77:21" pos:end="77:22">++</operator></expr>;</expr_stmt>

            <goto pos:start="79:13" pos:end="79:21">goto <name pos:start="79:18" pos:end="79:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:24">(<expr pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:23">from_batchq</name></expr>)</condition> <block pos:start="85:26" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:42">

            <comment type="block" pos:start="87:13" pos:end="87:60">/* Set which packet to send on next iteration */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:42"><expr pos:start="89:13" pos:end="89:41"><name pos:start="89:13" pos:end="89:25"><name pos:start="89:13" pos:end="89:17">slirp</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:25">next_m</name></name> <operator pos:start="89:27" pos:end="89:27">=</operator> <name pos:start="89:29" pos:end="89:41"><name pos:start="89:29" pos:end="89:31">ifm</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:41">ifq_next</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="95:9" pos:end="95:38">/* Remove it from the queue */</comment>

	<expr_stmt pos:start="97:9" pos:end="97:29"><expr pos:start="97:9" pos:end="97:28"><name pos:start="97:9" pos:end="97:12">ifqt</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <name pos:start="97:16" pos:end="97:28"><name pos:start="97:16" pos:end="97:18">ifm</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:28">ifq_prev</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:20"><expr pos:start="99:9" pos:end="99:19"><call pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:14">remque</name><argument_list pos:start="99:15" pos:end="99:19">(<argument pos:start="99:16" pos:end="99:18"><expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">ifm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="103:9" pos:end="103:71">/* If there are more packets for this session, re-queue them */</comment>

	<if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:56">(<expr pos:start="105:13" pos:end="105:55"><name pos:start="105:13" pos:end="105:25"><name pos:start="105:13" pos:end="105:15">ifm</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:25">ifs_next</name></name> <operator pos:start="105:27" pos:end="105:28">!=</operator> <comment type="block" pos:start="105:30" pos:end="105:51">/* ifm-&gt;ifs_prev != */</comment> <name pos:start="105:53" pos:end="105:55">ifm</name></expr>)</condition> <block pos:start="105:58" pos:end="111:9">{<block_content pos:start="107:17" pos:end="109:32">

		<expr_stmt pos:start="107:17" pos:end="107:44"><expr pos:start="107:17" pos:end="107:43"><call pos:start="107:17" pos:end="107:43"><name pos:start="107:17" pos:end="107:22">insque</name><argument_list pos:start="107:23" pos:end="107:43">(<argument pos:start="107:24" pos:end="107:36"><expr pos:start="107:24" pos:end="107:36"><name pos:start="107:24" pos:end="107:36"><name pos:start="107:24" pos:end="107:26">ifm</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:36">ifs_next</name></name></expr></argument>, <argument pos:start="107:39" pos:end="107:42"><expr pos:start="107:39" pos:end="107:42"><name pos:start="107:39" pos:end="107:42">ifqt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="109:17" pos:end="109:32"><expr pos:start="109:17" pos:end="109:31"><call pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:26">ifs_remque</name><argument_list pos:start="109:27" pos:end="109:31">(<argument pos:start="109:28" pos:end="109:30"><expr pos:start="109:28" pos:end="109:30"><name pos:start="109:28" pos:end="109:30">ifm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="115:9" pos:end="115:30">/* Update so_queued */</comment>

	<if_stmt pos:start="117:9" pos:end="125:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:24">(<expr pos:start="117:13" pos:end="117:23"><name pos:start="117:13" pos:end="117:23"><name pos:start="117:13" pos:end="117:15">ifm</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:23">ifq_so</name></name></expr>)</condition> <block pos:start="117:26" pos:end="125:9">{<block_content pos:start="119:17" pos:end="123:47">

		<if_stmt pos:start="119:17" pos:end="123:47"><if pos:start="119:17" pos:end="123:47">if <condition pos:start="119:20" pos:end="119:50">(<expr pos:start="119:21" pos:end="119:49"><operator pos:start="119:21" pos:end="119:22">--</operator><name pos:start="119:23" pos:end="119:44"><name pos:start="119:23" pos:end="119:25">ifm</name><operator pos:start="119:26" pos:end="119:27">-&gt;</operator><name pos:start="119:28" pos:end="119:33">ifq_so</name><operator pos:start="119:34" pos:end="119:35">-&gt;</operator><name pos:start="119:36" pos:end="119:44">so_queued</name></name> <operator pos:start="119:46" pos:end="119:47">==</operator> <literal type="number" pos:start="119:49" pos:end="119:49">0</literal></expr>)</condition><block type="pseudo" pos:start="123:20" pos:end="123:47"><block_content pos:start="123:20" pos:end="123:47">

		   <comment type="block" pos:start="121:20" pos:end="121:65">/* If there's no more queued, reset nqueued */</comment>

		   <expr_stmt pos:start="123:20" pos:end="123:47"><expr pos:start="123:20" pos:end="123:46"><name pos:start="123:20" pos:end="123:42"><name pos:start="123:20" pos:end="123:22">ifm</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:30">ifq_so</name><operator pos:start="123:31" pos:end="123:32">-&gt;</operator><name pos:start="123:33" pos:end="123:42">so_nqueued</name></name> <operator pos:start="123:44" pos:end="123:44">=</operator> <literal type="number" pos:start="123:46" pos:end="123:46">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:20"><expr pos:start="129:9" pos:end="129:19"><call pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:14">m_free</name><argument_list pos:start="129:15" pos:end="129:19">(<argument pos:start="129:16" pos:end="129:18"><expr pos:start="129:16" pos:end="129:18"><name pos:start="129:16" pos:end="129:18">ifm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



 <label pos:start="133:2" pos:end="133:5"><name pos:start="133:2" pos:end="133:4">out</name>:</label>

	<if_stmt pos:start="135:9" pos:end="137:22"><if pos:start="135:9" pos:end="137:22">if <condition pos:start="135:12" pos:end="135:29">(<expr pos:start="135:13" pos:end="135:28"><name pos:start="135:13" pos:end="135:28"><name pos:start="135:13" pos:end="135:17">slirp</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:28">if_queued</name></name></expr>)</condition><block type="pseudo" pos:start="137:12" pos:end="137:22"><block_content pos:start="137:12" pos:end="137:22">

	   <goto pos:start="137:12" pos:end="137:22">goto <name pos:start="137:17" pos:end="137:21">again</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:36"><expr pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:13">slirp</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:24">if_queued</name></name> <operator pos:start="141:26" pos:end="141:26">=</operator> <name pos:start="141:28" pos:end="141:35">requeued</name></expr>;</expr_stmt>

</block_content>}</block>
</unit>
