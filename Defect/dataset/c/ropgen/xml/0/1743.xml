<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1743.c" pos:tabs="8"><function pos:start="1:1" pos:end="231:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:14">mm_support</name><parameter_list pos:start="1:15" pos:end="1:20">(<parameter pos:start="1:16" pos:end="1:19"><decl pos:start="1:16" pos:end="1:19"><type pos:start="1:16" pos:end="1:19"><name pos:start="1:16" pos:end="1:19">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="231:1">{<block_content pos:start="5:5" pos:end="229:5">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">rval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">eax</name></decl>, <decl pos:start="7:14" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:16">ebx</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:21">ecx</name></decl>, <decl pos:start="7:24" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:24" pos:end="7:26">edx</name></decl>;</decl_stmt>

    

    <asm pos:start="11:5" pos:end="49:28">__asm__ <specifier pos:start="11:13" pos:end="11:24">__volatile__</specifier> (

                          <comment type="block" pos:start="13:27" pos:end="13:73">/* See if CPUID instruction is supported ... */</comment>

                          <comment type="block" pos:start="15:27" pos:end="15:73">/* ... Get copies of EFLAGS into eax and ecx */</comment>

                          "pushf\n\t"

                          "pop %0\n\t"

                          "movl %0, %1\n\t"

                          

                          <comment type="block" pos:start="25:27" pos:end="25:75">/* ... Toggle the ID bit in one copy and store */</comment>

                          <comment type="block" pos:start="27:27" pos:end="27:53">/*     to the EFLAGS reg */</comment>

                          "xorl $0x200000, %0\n\t"

                          "push %0\n\t"

                          "popf\n\t"

                          

                          <comment type="block" pos:start="37:27" pos:end="37:71">/* ... Get the (hopefully modified) EFLAGS */</comment>

                          "pushf\n\t"

                          "pop %0\n\t"

                          : "=a" (eax), "=c" (ecx)

                          :

                          : "cc" 

                          );</asm>

    

    <if_stmt pos:start="53:5" pos:end="55:17"><if pos:start="53:5" pos:end="55:17">if <condition pos:start="53:8" pos:end="53:19">(<expr pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:11">eax</name> <operator pos:start="53:13" pos:end="53:14">==</operator> <name pos:start="53:16" pos:end="53:18">ecx</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:17"><block_content pos:start="55:9" pos:end="55:17">

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="55:19" pos:end="55:43">/* CPUID not supported */</comment>

    

    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><call pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:9">cpuid</name><argument_list pos:start="59:10" pos:end="59:32">(<argument pos:start="59:11" pos:end="59:11"><expr pos:start="59:11" pos:end="59:11"><literal type="number" pos:start="59:11" pos:end="59:11">0</literal></expr></argument>, <argument pos:start="59:14" pos:end="59:16"><expr pos:start="59:14" pos:end="59:16"><name pos:start="59:14" pos:end="59:16">eax</name></expr></argument>, <argument pos:start="59:19" pos:end="59:21"><expr pos:start="59:19" pos:end="59:21"><name pos:start="59:19" pos:end="59:21">ebx</name></expr></argument>, <argument pos:start="59:24" pos:end="59:26"><expr pos:start="59:24" pos:end="59:26"><name pos:start="59:24" pos:end="59:26">ecx</name></expr></argument>, <argument pos:start="59:29" pos:end="59:31"><expr pos:start="59:29" pos:end="59:31"><name pos:start="59:29" pos:end="59:31">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="229:5"><if pos:start="63:5" pos:end="93:5">if <condition pos:start="63:8" pos:end="67:26">(<expr pos:start="63:9" pos:end="67:25"><name pos:start="63:9" pos:end="63:11">ebx</name> <operator pos:start="63:13" pos:end="63:14">==</operator> <literal type="number" pos:start="63:16" pos:end="63:25">0x756e6547</literal> <operator pos:start="63:27" pos:end="63:28">&amp;&amp;</operator>

        <name pos:start="65:9" pos:end="65:11">edx</name> <operator pos:start="65:13" pos:end="65:14">==</operator> <literal type="number" pos:start="65:16" pos:end="65:25">0x49656e69</literal> <operator pos:start="65:27" pos:end="65:28">&amp;&amp;</operator>

        <name pos:start="67:9" pos:end="67:11">ecx</name> <operator pos:start="67:13" pos:end="67:14">==</operator> <literal type="number" pos:start="67:16" pos:end="67:25">0x6c65746e</literal></expr>)</condition> <block pos:start="67:28" pos:end="93:5">{<block_content pos:start="73:5" pos:end="91:20">

        

        <comment type="block" pos:start="71:9" pos:end="71:19">/* intel */</comment>

    <label pos:start="73:5" pos:end="73:14"><name pos:start="73:5" pos:end="73:13">inteltest</name>:</label>

        <expr_stmt pos:start="75:9" pos:end="75:37"><expr pos:start="75:9" pos:end="75:36"><call pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:13">cpuid</name><argument_list pos:start="75:14" pos:end="75:36">(<argument pos:start="75:15" pos:end="75:15"><expr pos:start="75:15" pos:end="75:15"><literal type="number" pos:start="75:15" pos:end="75:15">1</literal></expr></argument>, <argument pos:start="75:18" pos:end="75:20"><expr pos:start="75:18" pos:end="75:20"><name pos:start="75:18" pos:end="75:20">eax</name></expr></argument>, <argument pos:start="75:23" pos:end="75:25"><expr pos:start="75:23" pos:end="75:25"><name pos:start="75:23" pos:end="75:25">ebx</name></expr></argument>, <argument pos:start="75:28" pos:end="75:30"><expr pos:start="75:28" pos:end="75:30"><name pos:start="75:28" pos:end="75:30">ecx</name></expr></argument>, <argument pos:start="75:33" pos:end="75:35"><expr pos:start="75:33" pos:end="75:35"><name pos:start="75:33" pos:end="75:35">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="79:21"><if pos:start="77:9" pos:end="79:21">if <condition pos:start="77:12" pos:end="77:36">(<expr pos:start="77:13" pos:end="77:35"><operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:16">edx</name> <operator pos:start="77:18" pos:end="77:18">&amp;</operator> <literal type="number" pos:start="77:20" pos:end="77:29">0x00800000</literal><operator pos:start="77:30" pos:end="77:30">)</operator> <operator pos:start="77:32" pos:end="77:33">==</operator> <literal type="number" pos:start="77:35" pos:end="77:35">0</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:21"><block_content pos:start="79:13" pos:end="79:21">

            <return pos:start="79:13" pos:end="79:21">return <expr pos:start="79:20" pos:end="79:20"><literal type="number" pos:start="79:20" pos:end="79:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:22"><expr pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:12">rval</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <name pos:start="81:16" pos:end="81:21">MM_MMX</name></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="85:39"><if pos:start="83:9" pos:end="85:39">if <condition pos:start="83:12" pos:end="83:29">(<expr pos:start="83:13" pos:end="83:28"><name pos:start="83:13" pos:end="83:15">edx</name> <operator pos:start="83:17" pos:end="83:17">&amp;</operator> <literal type="number" pos:start="83:19" pos:end="83:28">0x02000000</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:39"><block_content pos:start="85:13" pos:end="85:39"> 

            <expr_stmt pos:start="85:13" pos:end="85:39"><expr pos:start="85:13" pos:end="85:38"><name pos:start="85:13" pos:end="85:16">rval</name> <operator pos:start="85:18" pos:end="85:19">|=</operator> <name pos:start="85:21" pos:end="85:29">MM_MMXEXT</name> <operator pos:start="85:31" pos:end="85:31">|</operator> <name pos:start="85:33" pos:end="85:38">MM_SSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="89:28"><if pos:start="87:9" pos:end="89:28">if <condition pos:start="87:12" pos:end="87:29">(<expr pos:start="87:13" pos:end="87:28"><name pos:start="87:13" pos:end="87:15">edx</name> <operator pos:start="87:17" pos:end="87:17">&amp;</operator> <literal type="number" pos:start="87:19" pos:end="87:28">0x04000000</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:28"><block_content pos:start="89:13" pos:end="89:28"> 

            <expr_stmt pos:start="89:13" pos:end="89:28"><expr pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:16">rval</name> <operator pos:start="89:18" pos:end="89:19">|=</operator> <name pos:start="89:21" pos:end="89:27">MM_SSE2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="91:9" pos:end="91:20">return <expr pos:start="91:16" pos:end="91:19"><name pos:start="91:16" pos:end="91:19">rval</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="93:7" pos:end="125:5">else if <condition pos:start="93:15" pos:end="97:33">(<expr pos:start="93:16" pos:end="97:32"><name pos:start="93:16" pos:end="93:18">ebx</name> <operator pos:start="93:20" pos:end="93:21">==</operator> <literal type="number" pos:start="93:23" pos:end="93:32">0x68747541</literal> <operator pos:start="93:34" pos:end="93:35">&amp;&amp;</operator>

               <name pos:start="95:16" pos:end="95:18">edx</name> <operator pos:start="95:20" pos:end="95:21">==</operator> <literal type="number" pos:start="95:23" pos:end="95:32">0x69746e65</literal> <operator pos:start="95:34" pos:end="95:35">&amp;&amp;</operator>

               <name pos:start="97:16" pos:end="97:18">ecx</name> <operator pos:start="97:20" pos:end="97:21">==</operator> <literal type="number" pos:start="97:23" pos:end="97:32">0x444d4163</literal></expr>)</condition> <block pos:start="97:35" pos:end="125:5">{<block_content pos:start="101:9" pos:end="123:20">

        <comment type="block" pos:start="99:9" pos:end="99:17">/* AMD */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:46"><expr pos:start="101:9" pos:end="101:45"><call pos:start="101:9" pos:end="101:45"><name pos:start="101:9" pos:end="101:13">cpuid</name><argument_list pos:start="101:14" pos:end="101:45">(<argument pos:start="101:15" pos:end="101:24"><expr pos:start="101:15" pos:end="101:24"><literal type="number" pos:start="101:15" pos:end="101:24">0x80000000</literal></expr></argument>, <argument pos:start="101:27" pos:end="101:29"><expr pos:start="101:27" pos:end="101:29"><name pos:start="101:27" pos:end="101:29">eax</name></expr></argument>, <argument pos:start="101:32" pos:end="101:34"><expr pos:start="101:32" pos:end="101:34"><name pos:start="101:32" pos:end="101:34">ebx</name></expr></argument>, <argument pos:start="101:37" pos:end="101:39"><expr pos:start="101:37" pos:end="101:39"><name pos:start="101:37" pos:end="101:39">ecx</name></expr></argument>, <argument pos:start="101:42" pos:end="101:44"><expr pos:start="101:42" pos:end="101:44"><name pos:start="101:42" pos:end="101:44">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="105:27"><if pos:start="103:9" pos:end="105:27">if <condition pos:start="103:12" pos:end="103:39">(<expr pos:start="103:13" pos:end="103:38"><operator pos:start="103:13" pos:end="103:13">(</operator><name pos:start="103:14" pos:end="103:21">unsigned</name><operator pos:start="103:22" pos:end="103:22">)</operator><name pos:start="103:23" pos:end="103:25">eax</name> <operator pos:start="103:27" pos:end="103:27">&lt;</operator> <literal type="number" pos:start="103:29" pos:end="103:38">0x80000001</literal></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:27"><block_content pos:start="105:13" pos:end="105:27">

            <goto pos:start="105:13" pos:end="105:27">goto <name pos:start="105:18" pos:end="105:26">inteltest</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:46"><expr pos:start="107:9" pos:end="107:45"><call pos:start="107:9" pos:end="107:45"><name pos:start="107:9" pos:end="107:13">cpuid</name><argument_list pos:start="107:14" pos:end="107:45">(<argument pos:start="107:15" pos:end="107:24"><expr pos:start="107:15" pos:end="107:24"><literal type="number" pos:start="107:15" pos:end="107:24">0x80000001</literal></expr></argument>, <argument pos:start="107:27" pos:end="107:29"><expr pos:start="107:27" pos:end="107:29"><name pos:start="107:27" pos:end="107:29">eax</name></expr></argument>, <argument pos:start="107:32" pos:end="107:34"><expr pos:start="107:32" pos:end="107:34"><name pos:start="107:32" pos:end="107:34">ebx</name></expr></argument>, <argument pos:start="107:37" pos:end="107:39"><expr pos:start="107:37" pos:end="107:39"><name pos:start="107:37" pos:end="107:39">ecx</name></expr></argument>, <argument pos:start="107:42" pos:end="107:44"><expr pos:start="107:42" pos:end="107:44"><name pos:start="107:42" pos:end="107:44">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="111:21"><if pos:start="109:9" pos:end="111:21">if <condition pos:start="109:12" pos:end="109:36">(<expr pos:start="109:13" pos:end="109:35"><operator pos:start="109:13" pos:end="109:13">(</operator><name pos:start="109:14" pos:end="109:16">edx</name> <operator pos:start="109:18" pos:end="109:18">&amp;</operator> <literal type="number" pos:start="109:20" pos:end="109:29">0x00800000</literal><operator pos:start="109:30" pos:end="109:30">)</operator> <operator pos:start="109:32" pos:end="109:33">==</operator> <literal type="number" pos:start="109:35" pos:end="109:35">0</literal></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:21"><block_content pos:start="111:13" pos:end="111:21">

            <return pos:start="111:13" pos:end="111:21">return <expr pos:start="111:20" pos:end="111:20"><literal type="number" pos:start="111:20" pos:end="111:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:22"><expr pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:12">rval</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <name pos:start="113:16" pos:end="113:21">MM_MMX</name></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="117:29"><if pos:start="115:9" pos:end="117:29">if <condition pos:start="115:12" pos:end="115:29">(<expr pos:start="115:13" pos:end="115:28"><name pos:start="115:13" pos:end="115:15">edx</name> <operator pos:start="115:17" pos:end="115:17">&amp;</operator> <literal type="number" pos:start="115:19" pos:end="115:28">0x80000000</literal></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:29"><block_content pos:start="117:13" pos:end="117:29">

            <expr_stmt pos:start="117:13" pos:end="117:29"><expr pos:start="117:13" pos:end="117:28"><name pos:start="117:13" pos:end="117:16">rval</name> <operator pos:start="117:18" pos:end="117:19">|=</operator> <name pos:start="117:21" pos:end="117:28">MM_3DNOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="119:9" pos:end="121:30"><if pos:start="119:9" pos:end="121:30">if <condition pos:start="119:12" pos:end="119:29">(<expr pos:start="119:13" pos:end="119:28"><name pos:start="119:13" pos:end="119:15">edx</name> <operator pos:start="119:17" pos:end="119:17">&amp;</operator> <literal type="number" pos:start="119:19" pos:end="119:28">0x00400000</literal></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:30"><block_content pos:start="121:13" pos:end="121:30">

            <expr_stmt pos:start="121:13" pos:end="121:30"><expr pos:start="121:13" pos:end="121:29"><name pos:start="121:13" pos:end="121:16">rval</name> <operator pos:start="121:18" pos:end="121:19">|=</operator> <name pos:start="121:21" pos:end="121:29">MM_MMXEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="123:9" pos:end="123:20">return <expr pos:start="123:16" pos:end="123:19"><name pos:start="123:16" pos:end="123:19">rval</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="125:7" pos:end="161:5">else if <condition pos:start="125:15" pos:end="129:33">(<expr pos:start="125:16" pos:end="129:32"><name pos:start="125:16" pos:end="125:18">ebx</name> <operator pos:start="125:20" pos:end="125:21">==</operator> <literal type="number" pos:start="125:23" pos:end="125:32">0x746e6543</literal> <operator pos:start="125:34" pos:end="125:35">&amp;&amp;</operator>

               <name pos:start="127:16" pos:end="127:18">edx</name> <operator pos:start="127:20" pos:end="127:21">==</operator> <literal type="number" pos:start="127:23" pos:end="127:32">0x48727561</literal> <operator pos:start="127:34" pos:end="127:35">&amp;&amp;</operator>

               <name pos:start="129:16" pos:end="129:18">ecx</name> <operator pos:start="129:20" pos:end="129:21">==</operator> <literal type="number" pos:start="129:23" pos:end="129:32">0x736c7561</literal></expr>)</condition> <block pos:start="129:35" pos:end="161:5">{<block_content pos:start="133:9" pos:end="159:20">  <comment type="block" pos:start="129:38" pos:end="129:58">/*  "CentaurHauls" */</comment>

        <comment type="block" pos:start="131:9" pos:end="131:20">/* VIA C3 */</comment>

        <expr_stmt pos:start="133:9" pos:end="133:46"><expr pos:start="133:9" pos:end="133:45"><call pos:start="133:9" pos:end="133:45"><name pos:start="133:9" pos:end="133:13">cpuid</name><argument_list pos:start="133:14" pos:end="133:45">(<argument pos:start="133:15" pos:end="133:24"><expr pos:start="133:15" pos:end="133:24"><literal type="number" pos:start="133:15" pos:end="133:24">0x80000000</literal></expr></argument>, <argument pos:start="133:27" pos:end="133:29"><expr pos:start="133:27" pos:end="133:29"><name pos:start="133:27" pos:end="133:29">eax</name></expr></argument>, <argument pos:start="133:32" pos:end="133:34"><expr pos:start="133:32" pos:end="133:34"><name pos:start="133:32" pos:end="133:34">ebx</name></expr></argument>, <argument pos:start="133:37" pos:end="133:39"><expr pos:start="133:37" pos:end="133:39"><name pos:start="133:37" pos:end="133:39">ecx</name></expr></argument>, <argument pos:start="133:42" pos:end="133:44"><expr pos:start="133:42" pos:end="133:44"><name pos:start="133:42" pos:end="133:44">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="137:27"><if pos:start="135:9" pos:end="137:27">if <condition pos:start="135:12" pos:end="135:39">(<expr pos:start="135:13" pos:end="135:38"><operator pos:start="135:13" pos:end="135:13">(</operator><name pos:start="135:14" pos:end="135:21">unsigned</name><operator pos:start="135:22" pos:end="135:22">)</operator><name pos:start="135:23" pos:end="135:25">eax</name> <operator pos:start="135:27" pos:end="135:27">&lt;</operator> <literal type="number" pos:start="135:29" pos:end="135:38">0x80000001</literal></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:27"><block_content pos:start="137:13" pos:end="137:27">

            <goto pos:start="137:13" pos:end="137:27">goto <name pos:start="137:18" pos:end="137:26">inteltest</name>;</goto></block_content></block></if></if_stmt>	

	<expr_stmt pos:start="139:9" pos:end="139:46"><expr pos:start="139:9" pos:end="139:45"><call pos:start="139:9" pos:end="139:45"><name pos:start="139:9" pos:end="139:13">cpuid</name><argument_list pos:start="139:14" pos:end="139:45">(<argument pos:start="139:15" pos:end="139:24"><expr pos:start="139:15" pos:end="139:24"><literal type="number" pos:start="139:15" pos:end="139:24">0x80000001</literal></expr></argument>, <argument pos:start="139:27" pos:end="139:29"><expr pos:start="139:27" pos:end="139:29"><name pos:start="139:27" pos:end="139:29">eax</name></expr></argument>, <argument pos:start="139:32" pos:end="139:34"><expr pos:start="139:32" pos:end="139:34"><name pos:start="139:32" pos:end="139:34">ebx</name></expr></argument>, <argument pos:start="139:37" pos:end="139:39"><expr pos:start="139:37" pos:end="139:39"><name pos:start="139:37" pos:end="139:39">ecx</name></expr></argument>, <argument pos:start="139:42" pos:end="139:44"><expr pos:start="139:42" pos:end="139:44"><name pos:start="139:42" pos:end="139:44">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="141:9" pos:end="141:17"><expr pos:start="141:9" pos:end="141:16"><name pos:start="141:9" pos:end="141:12">rval</name> <operator pos:start="141:14" pos:end="141:14">=</operator> <literal type="number" pos:start="141:16" pos:end="141:16">0</literal></expr>;</expr_stmt>      

	<if_stmt pos:start="143:9" pos:end="145:27"><if pos:start="143:9" pos:end="145:27">if<condition pos:start="143:11" pos:end="143:30">( <expr pos:start="143:13" pos:end="143:28"><name pos:start="143:13" pos:end="143:15">edx</name> <operator pos:start="143:17" pos:end="143:17">&amp;</operator> <operator pos:start="143:19" pos:end="143:19">(</operator> <literal type="number" pos:start="143:21" pos:end="143:21">1</literal> <operator pos:start="143:23" pos:end="143:24">&lt;&lt;</operator> <literal type="number" pos:start="143:26" pos:end="143:27">31</literal><operator pos:start="143:28" pos:end="143:28">)</operator></expr> )</condition><block type="pseudo" pos:start="145:11" pos:end="145:27"><block_content pos:start="145:11" pos:end="145:27">

	  <expr_stmt pos:start="145:11" pos:end="145:27"><expr pos:start="145:11" pos:end="145:26"><name pos:start="145:11" pos:end="145:14">rval</name> <operator pos:start="145:16" pos:end="145:17">|=</operator> <name pos:start="145:19" pos:end="145:26">MM_3DNOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="147:9" pos:end="149:25"><if pos:start="147:9" pos:end="149:25">if<condition pos:start="147:11" pos:end="147:30">( <expr pos:start="147:13" pos:end="147:28"><name pos:start="147:13" pos:end="147:15">edx</name> <operator pos:start="147:17" pos:end="147:17">&amp;</operator> <operator pos:start="147:19" pos:end="147:19">(</operator> <literal type="number" pos:start="147:21" pos:end="147:21">1</literal> <operator pos:start="147:23" pos:end="147:24">&lt;&lt;</operator> <literal type="number" pos:start="147:26" pos:end="147:27">23</literal><operator pos:start="147:28" pos:end="147:28">)</operator></expr> )</condition><block type="pseudo" pos:start="149:11" pos:end="149:25"><block_content pos:start="149:11" pos:end="149:25">

	  <expr_stmt pos:start="149:11" pos:end="149:25"><expr pos:start="149:11" pos:end="149:24"><name pos:start="149:11" pos:end="149:14">rval</name> <operator pos:start="149:16" pos:end="149:17">|=</operator> <name pos:start="149:19" pos:end="149:24">MM_MMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="151:9" pos:end="153:28"><if pos:start="151:9" pos:end="153:28">if<condition pos:start="151:11" pos:end="151:30">( <expr pos:start="151:13" pos:end="151:28"><name pos:start="151:13" pos:end="151:15">edx</name> <operator pos:start="151:17" pos:end="151:17">&amp;</operator> <operator pos:start="151:19" pos:end="151:19">(</operator> <literal type="number" pos:start="151:21" pos:end="151:21">1</literal> <operator pos:start="151:23" pos:end="151:24">&lt;&lt;</operator> <literal type="number" pos:start="151:26" pos:end="151:27">24</literal><operator pos:start="151:28" pos:end="151:28">)</operator></expr> )</condition><block type="pseudo" pos:start="153:11" pos:end="153:28"><block_content pos:start="153:11" pos:end="153:28">

	  <expr_stmt pos:start="153:11" pos:end="153:28"><expr pos:start="153:11" pos:end="153:27"><name pos:start="153:11" pos:end="153:14">rval</name> <operator pos:start="153:16" pos:end="153:17">|=</operator> <name pos:start="153:19" pos:end="153:27">MM_MMXEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="155:9" pos:end="157:27"><if pos:start="155:9" pos:end="157:27">if<condition pos:start="155:11" pos:end="155:19">(<expr pos:start="155:12" pos:end="155:18"><name pos:start="155:12" pos:end="155:15">rval</name><operator pos:start="155:16" pos:end="155:17">==</operator><literal type="number" pos:start="155:18" pos:end="155:18">0</literal></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:27"><block_content pos:start="157:13" pos:end="157:27">

            <goto pos:start="157:13" pos:end="157:27">goto <name pos:start="157:18" pos:end="157:26">inteltest</name>;</goto></block_content></block></if></if_stmt>

	<return pos:start="159:9" pos:end="159:20">return <expr pos:start="159:16" pos:end="159:19"><name pos:start="159:16" pos:end="159:19">rval</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="161:7" pos:end="203:5">else if <condition pos:start="161:15" pos:end="165:33">(<expr pos:start="161:16" pos:end="165:32"><name pos:start="161:16" pos:end="161:18">ebx</name> <operator pos:start="161:20" pos:end="161:21">==</operator> <literal type="number" pos:start="161:23" pos:end="161:32">0x69727943</literal> <operator pos:start="161:34" pos:end="161:35">&amp;&amp;</operator>

               <name pos:start="163:16" pos:end="163:18">edx</name> <operator pos:start="163:20" pos:end="163:21">==</operator> <literal type="number" pos:start="163:23" pos:end="163:32">0x736e4978</literal> <operator pos:start="163:34" pos:end="163:35">&amp;&amp;</operator>

               <name pos:start="165:16" pos:end="165:18">ecx</name> <operator pos:start="165:20" pos:end="165:21">==</operator> <literal type="number" pos:start="165:23" pos:end="165:32">0x64616574</literal></expr>)</condition> <block pos:start="165:35" pos:end="203:5">{<block_content pos:start="185:9" pos:end="201:20">

        <comment type="block" pos:start="167:9" pos:end="167:27">/* Cyrix Section */</comment>

        <comment type="block" pos:start="169:9" pos:end="169:63">/* See if extended CPUID level 80000001 is supported */</comment>

        <comment type="block" pos:start="171:9" pos:end="183:10">/* The value of CPUID/80000001 for the 6x86MX is undefined

           according to the Cyrix CPU Detection Guide (Preliminary

           Rev. 1.01 table 1), so we'll check the value of eax for

           CPUID/0 to see if standard CPUID level 2 is supported.

           According to the table, the only CPU which supports level

           2 is also the only one which supports extended CPUID levels.

        */</comment>

        <if_stmt pos:start="185:9" pos:end="187:27"><if pos:start="185:9" pos:end="187:27">if <condition pos:start="185:12" pos:end="185:21">(<expr pos:start="185:13" pos:end="185:20"><name pos:start="185:13" pos:end="185:15">eax</name> <operator pos:start="185:17" pos:end="185:18">!=</operator> <literal type="number" pos:start="185:20" pos:end="185:20">2</literal></expr>)</condition><block type="pseudo" pos:start="187:13" pos:end="187:27"><block_content pos:start="187:13" pos:end="187:27"> 

            <goto pos:start="187:13" pos:end="187:27">goto <name pos:start="187:18" pos:end="187:26">inteltest</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:46"><expr pos:start="189:9" pos:end="189:45"><call pos:start="189:9" pos:end="189:45"><name pos:start="189:9" pos:end="189:13">cpuid</name><argument_list pos:start="189:14" pos:end="189:45">(<argument pos:start="189:15" pos:end="189:24"><expr pos:start="189:15" pos:end="189:24"><literal type="number" pos:start="189:15" pos:end="189:24">0x80000001</literal></expr></argument>, <argument pos:start="189:27" pos:end="189:29"><expr pos:start="189:27" pos:end="189:29"><name pos:start="189:27" pos:end="189:29">eax</name></expr></argument>, <argument pos:start="189:32" pos:end="189:34"><expr pos:start="189:32" pos:end="189:34"><name pos:start="189:32" pos:end="189:34">ebx</name></expr></argument>, <argument pos:start="189:37" pos:end="189:39"><expr pos:start="189:37" pos:end="189:39"><name pos:start="189:37" pos:end="189:39">ecx</name></expr></argument>, <argument pos:start="189:42" pos:end="189:44"><expr pos:start="189:42" pos:end="189:44"><name pos:start="189:42" pos:end="189:44">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="193:21"><if pos:start="191:9" pos:end="193:21">if <condition pos:start="191:12" pos:end="191:36">(<expr pos:start="191:13" pos:end="191:35"><operator pos:start="191:13" pos:end="191:13">(</operator><name pos:start="191:14" pos:end="191:16">eax</name> <operator pos:start="191:18" pos:end="191:18">&amp;</operator> <literal type="number" pos:start="191:20" pos:end="191:29">0x00800000</literal><operator pos:start="191:30" pos:end="191:30">)</operator> <operator pos:start="191:32" pos:end="191:33">==</operator> <literal type="number" pos:start="191:35" pos:end="191:35">0</literal></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:21"><block_content pos:start="193:13" pos:end="193:21">

            <return pos:start="193:13" pos:end="193:21">return <expr pos:start="193:20" pos:end="193:20"><literal type="number" pos:start="193:20" pos:end="193:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:22"><expr pos:start="195:9" pos:end="195:21"><name pos:start="195:9" pos:end="195:12">rval</name> <operator pos:start="195:14" pos:end="195:14">=</operator> <name pos:start="195:16" pos:end="195:21">MM_MMX</name></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="199:30"><if pos:start="197:9" pos:end="199:30">if <condition pos:start="197:12" pos:end="197:29">(<expr pos:start="197:13" pos:end="197:28"><name pos:start="197:13" pos:end="197:15">eax</name> <operator pos:start="197:17" pos:end="197:17">&amp;</operator> <literal type="number" pos:start="197:19" pos:end="197:28">0x01000000</literal></expr>)</condition><block type="pseudo" pos:start="199:13" pos:end="199:30"><block_content pos:start="199:13" pos:end="199:30">

            <expr_stmt pos:start="199:13" pos:end="199:30"><expr pos:start="199:13" pos:end="199:29"><name pos:start="199:13" pos:end="199:16">rval</name> <operator pos:start="199:18" pos:end="199:19">|=</operator> <name pos:start="199:21" pos:end="199:29">MM_MMXEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="201:9" pos:end="201:20">return <expr pos:start="201:16" pos:end="201:19"><name pos:start="201:16" pos:end="201:19">rval</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="203:7" pos:end="225:5">else if <condition pos:start="203:15" pos:end="207:33">(<expr pos:start="203:16" pos:end="207:32"><name pos:start="203:16" pos:end="203:18">ebx</name> <operator pos:start="203:20" pos:end="203:21">==</operator> <literal type="number" pos:start="203:23" pos:end="203:32">0x756e6547</literal> <operator pos:start="203:34" pos:end="203:35">&amp;&amp;</operator>

               <name pos:start="205:16" pos:end="205:18">edx</name> <operator pos:start="205:20" pos:end="205:21">==</operator> <literal type="number" pos:start="205:23" pos:end="205:32">0x54656e69</literal> <operator pos:start="205:34" pos:end="205:35">&amp;&amp;</operator>

               <name pos:start="207:16" pos:end="207:18">ecx</name> <operator pos:start="207:20" pos:end="207:21">==</operator> <literal type="number" pos:start="207:23" pos:end="207:32">0x3638784d</literal></expr>)</condition> <block pos:start="207:35" pos:end="225:5">{<block_content pos:start="211:9" pos:end="223:22">

        <comment type="block" pos:start="209:9" pos:end="209:29">/* Tranmeta Crusoe */</comment>

        <expr_stmt pos:start="211:9" pos:end="211:46"><expr pos:start="211:9" pos:end="211:45"><call pos:start="211:9" pos:end="211:45"><name pos:start="211:9" pos:end="211:13">cpuid</name><argument_list pos:start="211:14" pos:end="211:45">(<argument pos:start="211:15" pos:end="211:24"><expr pos:start="211:15" pos:end="211:24"><literal type="number" pos:start="211:15" pos:end="211:24">0x80000000</literal></expr></argument>, <argument pos:start="211:27" pos:end="211:29"><expr pos:start="211:27" pos:end="211:29"><name pos:start="211:27" pos:end="211:29">eax</name></expr></argument>, <argument pos:start="211:32" pos:end="211:34"><expr pos:start="211:32" pos:end="211:34"><name pos:start="211:32" pos:end="211:34">ebx</name></expr></argument>, <argument pos:start="211:37" pos:end="211:39"><expr pos:start="211:37" pos:end="211:39"><name pos:start="211:37" pos:end="211:39">ecx</name></expr></argument>, <argument pos:start="211:42" pos:end="211:44"><expr pos:start="211:42" pos:end="211:44"><name pos:start="211:42" pos:end="211:44">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="215:21"><if pos:start="213:9" pos:end="215:21">if <condition pos:start="213:12" pos:end="213:39">(<expr pos:start="213:13" pos:end="213:38"><operator pos:start="213:13" pos:end="213:13">(</operator><name pos:start="213:14" pos:end="213:21">unsigned</name><operator pos:start="213:22" pos:end="213:22">)</operator><name pos:start="213:23" pos:end="213:25">eax</name> <operator pos:start="213:27" pos:end="213:27">&lt;</operator> <literal type="number" pos:start="213:29" pos:end="213:38">0x80000001</literal></expr>)</condition><block type="pseudo" pos:start="215:13" pos:end="215:21"><block_content pos:start="215:13" pos:end="215:21">

            <return pos:start="215:13" pos:end="215:21">return <expr pos:start="215:20" pos:end="215:20"><literal type="number" pos:start="215:20" pos:end="215:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:46"><expr pos:start="217:9" pos:end="217:45"><call pos:start="217:9" pos:end="217:45"><name pos:start="217:9" pos:end="217:13">cpuid</name><argument_list pos:start="217:14" pos:end="217:45">(<argument pos:start="217:15" pos:end="217:24"><expr pos:start="217:15" pos:end="217:24"><literal type="number" pos:start="217:15" pos:end="217:24">0x80000001</literal></expr></argument>, <argument pos:start="217:27" pos:end="217:29"><expr pos:start="217:27" pos:end="217:29"><name pos:start="217:27" pos:end="217:29">eax</name></expr></argument>, <argument pos:start="217:32" pos:end="217:34"><expr pos:start="217:32" pos:end="217:34"><name pos:start="217:32" pos:end="217:34">ebx</name></expr></argument>, <argument pos:start="217:37" pos:end="217:39"><expr pos:start="217:37" pos:end="217:39"><name pos:start="217:37" pos:end="217:39">ecx</name></expr></argument>, <argument pos:start="217:42" pos:end="217:44"><expr pos:start="217:42" pos:end="217:44"><name pos:start="217:42" pos:end="217:44">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="219:9" pos:end="221:21"><if pos:start="219:9" pos:end="221:21">if <condition pos:start="219:12" pos:end="219:36">(<expr pos:start="219:13" pos:end="219:35"><operator pos:start="219:13" pos:end="219:13">(</operator><name pos:start="219:14" pos:end="219:16">edx</name> <operator pos:start="219:18" pos:end="219:18">&amp;</operator> <literal type="number" pos:start="219:20" pos:end="219:29">0x00800000</literal><operator pos:start="219:30" pos:end="219:30">)</operator> <operator pos:start="219:32" pos:end="219:33">==</operator> <literal type="number" pos:start="219:35" pos:end="219:35">0</literal></expr>)</condition><block type="pseudo" pos:start="221:13" pos:end="221:21"><block_content pos:start="221:13" pos:end="221:21">

            <return pos:start="221:13" pos:end="221:21">return <expr pos:start="221:20" pos:end="221:20"><literal type="number" pos:start="221:20" pos:end="221:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <return pos:start="223:9" pos:end="223:22">return <expr pos:start="223:16" pos:end="223:21"><name pos:start="223:16" pos:end="223:21">MM_MMX</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="229:5">else <block pos:start="225:12" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:17">

        <return pos:start="227:9" pos:end="227:17">return <expr pos:start="227:16" pos:end="227:16"><literal type="number" pos:start="227:16" pos:end="227:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
