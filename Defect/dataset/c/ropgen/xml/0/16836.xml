<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16836.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">ff_acelp_interpolate</name><parameter_list pos:start="1:26" pos:end="15:19">(

        <parameter pos:start="3:9" pos:end="3:20"><decl pos:start="3:9" pos:end="3:20"><type pos:start="3:9" pos:end="3:20"><name pos:start="3:9" pos:end="3:15">int16_t</name><modifier pos:start="3:16" pos:end="3:16">*</modifier></type> <name pos:start="3:18" pos:end="3:20">out</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:25"><decl pos:start="5:9" pos:end="5:25"><type pos:start="5:9" pos:end="5:25"><specifier pos:start="5:9" pos:end="5:13">const</specifier> <name pos:start="5:15" pos:end="5:21">int16_t</name><modifier pos:start="5:22" pos:end="5:22">*</modifier></type> <name pos:start="5:24" pos:end="5:25">in</name></decl></parameter>,

        <parameter pos:start="7:9" pos:end="7:36"><decl pos:start="7:9" pos:end="7:36"><type pos:start="7:9" pos:end="7:36"><specifier pos:start="7:9" pos:end="7:13">const</specifier> <name pos:start="7:15" pos:end="7:21">int16_t</name><modifier pos:start="7:22" pos:end="7:22">*</modifier></type> <name pos:start="7:24" pos:end="7:36">filter_coeffs</name></decl></parameter>,

        <parameter pos:start="9:9" pos:end="9:21"><decl pos:start="9:9" pos:end="9:21"><type pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:21">precision</name></decl></parameter>,

        <parameter pos:start="11:9" pos:end="11:20"><decl pos:start="11:9" pos:end="11:20"><type pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:20">frac_pos</name></decl></parameter>,

        <parameter pos:start="13:9" pos:end="13:25"><decl pos:start="13:9" pos:end="13:25"><type pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:25">filter_length</name></decl></parameter>,

        <parameter pos:start="15:9" pos:end="15:18"><decl pos:start="15:9" pos:end="15:18"><type pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:18">length</name></decl></parameter>)</parameter_list>

<block pos:start="17:1" pos:end="75:1">{<block_content pos:start="19:5" pos:end="73:5">

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">n</name></decl>, <decl pos:start="19:12" pos:end="19:12"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:12">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:66"><expr pos:start="23:5" pos:end="23:65"><call pos:start="23:5" pos:end="23:65"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:65">(<argument pos:start="23:12" pos:end="23:64"><expr pos:start="23:12" pos:end="23:64"><name pos:start="23:12" pos:end="23:27">pitch_delay_frac</name> <operator pos:start="23:29" pos:end="23:30">&gt;=</operator> <literal type="number" pos:start="23:32" pos:end="23:32">0</literal> <operator pos:start="23:34" pos:end="23:35">&amp;&amp;</operator> <name pos:start="23:37" pos:end="23:52">pitch_delay_frac</name> <operator pos:start="23:54" pos:end="23:54">&lt;</operator> <name pos:start="23:56" pos:end="23:64">precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="27:5" pos:end="73:5">for<control pos:start="27:8" pos:end="27:27">(<init pos:start="27:9" pos:end="27:12"><expr pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:9">n</name><operator pos:start="27:10" pos:end="27:10">=</operator><literal type="number" pos:start="27:11" pos:end="27:11">0</literal></expr>;</init> <condition pos:start="27:14" pos:end="27:22"><expr pos:start="27:14" pos:end="27:21"><name pos:start="27:14" pos:end="27:14">n</name><operator pos:start="27:15" pos:end="27:15">&lt;</operator><name pos:start="27:16" pos:end="27:21">length</name></expr>;</condition> <incr pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:24">n</name><operator pos:start="27:25" pos:end="27:26">++</operator></expr></incr>)</control>

    <block pos:start="29:5" pos:end="73:5">{<block_content pos:start="31:9" pos:end="71:40">

        <decl_stmt pos:start="31:9" pos:end="31:20"><decl pos:start="31:9" pos:end="31:19"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:15">idx</name> <init pos:start="31:17" pos:end="31:19">= <expr pos:start="31:19" pos:end="31:19"><literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:23"><decl pos:start="33:9" pos:end="33:22"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:13">v</name> <init pos:start="33:15" pos:end="33:22">= <expr pos:start="33:17" pos:end="33:22"><literal type="number" pos:start="33:17" pos:end="33:22">0x4000</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="37:9" pos:end="69:9">for<control pos:start="37:12" pos:end="37:34">(<init pos:start="37:13" pos:end="37:16"><expr pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:13">i</name><operator pos:start="37:14" pos:end="37:14">=</operator><literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>;</init> <condition pos:start="37:18" pos:end="37:33"><expr pos:start="37:18" pos:end="37:32"><name pos:start="37:18" pos:end="37:18">i</name><operator pos:start="37:19" pos:end="37:19">&lt;</operator><name pos:start="37:20" pos:end="37:32">filter_length</name></expr>;</condition><incr/>)</control>

        <block pos:start="39:9" pos:end="69:9">{<block_content pos:start="61:13" pos:end="67:59">



            <comment type="block" pos:start="43:13" pos:end="49:78">/* The reference G.729 and AMR fixed point code performs clipping after

               each of the two following accumulations.

               Since clipping affects only the synthetic OVERFLOW test without

               causing an int type overflow, it was moved outside the loop. */</comment>



            <comment type="block" pos:start="53:13" pos:end="57:63">/*  R(x):=ac_v[-k+x]

                v += R(n-i)*ff_acelp_interp_filter(t+6i)

                v += R(n+i+1)*ff_acelp_interp_filter(6-t+6i) */</comment>



            <expr_stmt pos:start="61:13" pos:end="61:59"><expr pos:start="61:13" pos:end="61:58"><name pos:start="61:13" pos:end="61:13">v</name> <operator pos:start="61:15" pos:end="61:16">+=</operator> <name pos:start="61:18" pos:end="61:26"><name pos:start="61:18" pos:end="61:19">in</name><index pos:start="61:20" pos:end="61:26">[<expr pos:start="61:21" pos:end="61:25"><name pos:start="61:21" pos:end="61:21">n</name> <operator pos:start="61:23" pos:end="61:23">+</operator> <name pos:start="61:25" pos:end="61:25">i</name></expr>]</index></name> <operator pos:start="61:28" pos:end="61:28">*</operator> <name pos:start="61:30" pos:end="61:58"><name pos:start="61:30" pos:end="61:42">filter_coeffs</name><index pos:start="61:43" pos:end="61:58">[<expr pos:start="61:44" pos:end="61:57"><name pos:start="61:44" pos:end="61:46">idx</name> <operator pos:start="61:48" pos:end="61:48">+</operator> <name pos:start="61:50" pos:end="61:57">frac_pos</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:29"><expr pos:start="63:13" pos:end="63:28"><name pos:start="63:13" pos:end="63:15">idx</name> <operator pos:start="63:17" pos:end="63:18">+=</operator> <name pos:start="63:20" pos:end="63:28">precision</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:16"><expr pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:13">i</name><operator pos:start="65:14" pos:end="65:15">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:59"><expr pos:start="67:13" pos:end="67:58"><name pos:start="67:13" pos:end="67:13">v</name> <operator pos:start="67:15" pos:end="67:16">+=</operator> <name pos:start="67:18" pos:end="67:26"><name pos:start="67:18" pos:end="67:19">in</name><index pos:start="67:20" pos:end="67:26">[<expr pos:start="67:21" pos:end="67:25"><name pos:start="67:21" pos:end="67:21">n</name> <operator pos:start="67:23" pos:end="67:23">-</operator> <name pos:start="67:25" pos:end="67:25">i</name></expr>]</index></name> <operator pos:start="67:28" pos:end="67:28">*</operator> <name pos:start="67:30" pos:end="67:58"><name pos:start="67:30" pos:end="67:42">filter_coeffs</name><index pos:start="67:43" pos:end="67:58">[<expr pos:start="67:44" pos:end="67:57"><name pos:start="67:44" pos:end="67:46">idx</name> <operator pos:start="67:48" pos:end="67:48">-</operator> <name pos:start="67:50" pos:end="67:57">frac_pos</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="71:9" pos:end="71:40"><expr pos:start="71:9" pos:end="71:39"><name pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:11">out</name><index pos:start="71:12" pos:end="71:14">[<expr pos:start="71:13" pos:end="71:13"><name pos:start="71:13" pos:end="71:13">n</name></expr>]</index></name> <operator pos:start="71:16" pos:end="71:16">=</operator> <call pos:start="71:18" pos:end="71:39"><name pos:start="71:18" pos:end="71:30">av_clip_int16</name><argument_list pos:start="71:31" pos:end="71:39">(<argument pos:start="71:32" pos:end="71:38"><expr pos:start="71:32" pos:end="71:38"><name pos:start="71:32" pos:end="71:32">v</name> <operator pos:start="71:34" pos:end="71:35">&gt;&gt;</operator> <literal type="number" pos:start="71:37" pos:end="71:38">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
