<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9030.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">cpu_exec_step</name><parameter_list pos:start="1:26" pos:end="1:40">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:36"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUClass</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cc</name> <init pos:start="5:18" pos:end="5:37">= <expr pos:start="5:20" pos:end="5:37"><call pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:32">CPU_GET_CLASS</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">TranslationBlock</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:24">cs_base</name></decl>, <decl pos:start="9:27" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:27" pos:end="9:28">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">cflags</name> <init pos:start="13:21" pos:end="13:42">= <expr pos:start="13:23" pos:end="13:42"><literal type="number" pos:start="13:23" pos:end="13:23">1</literal> <operator pos:start="13:25" pos:end="13:25">|</operator> <name pos:start="13:27" pos:end="13:42">CF_IGNORE_ICOUNT</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="69:5"><if pos:start="17:5" pos:end="49:5">if <condition pos:start="17:8" pos:end="17:40">(<expr pos:start="17:9" pos:end="17:39"><call pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:17">sigsetjmp</name><argument_list pos:start="17:18" pos:end="17:34">(<argument pos:start="17:19" pos:end="17:30"><expr pos:start="17:19" pos:end="17:30"><name pos:start="17:19" pos:end="17:30"><name pos:start="17:19" pos:end="17:21">cpu</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:30">jmp_env</name></name></expr></argument>, <argument pos:start="17:33" pos:end="17:33"><expr pos:start="17:33" pos:end="17:33"><literal type="number" pos:start="17:33" pos:end="17:33">0</literal></expr></argument>)</argument_list></call> <operator pos:start="17:36" pos:end="17:37">==</operator> <literal type="number" pos:start="17:39" pos:end="17:39">0</literal></expr>)</condition> <block pos:start="17:42" pos:end="49:5">{<block_content pos:start="19:9" pos:end="47:31">

        <expr_stmt pos:start="19:9" pos:end="21:57"><expr pos:start="19:9" pos:end="21:56"><name pos:start="19:9" pos:end="19:10">tb</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="21:56"><name pos:start="19:14" pos:end="19:33">tb_lookup__cpu_state</name><argument_list pos:start="19:34" pos:end="21:56">(<argument pos:start="19:35" pos:end="19:37"><expr pos:start="19:35" pos:end="19:37"><name pos:start="19:35" pos:end="19:37">cpu</name></expr></argument>, <argument pos:start="19:40" pos:end="19:42"><expr pos:start="19:40" pos:end="19:42"><operator pos:start="19:40" pos:end="19:40">&amp;</operator><name pos:start="19:41" pos:end="19:42">pc</name></expr></argument>, <argument pos:start="19:45" pos:end="19:52"><expr pos:start="19:45" pos:end="19:52"><operator pos:start="19:45" pos:end="19:45">&amp;</operator><name pos:start="19:46" pos:end="19:52">cs_base</name></expr></argument>, <argument pos:start="19:55" pos:end="19:60"><expr pos:start="19:55" pos:end="19:60"><operator pos:start="19:55" pos:end="19:55">&amp;</operator><name pos:start="19:56" pos:end="19:60">flags</name></expr></argument>,

                                  <argument pos:start="21:35" pos:end="21:55"><expr pos:start="21:35" pos:end="21:55"><name pos:start="21:35" pos:end="21:40">cflags</name> <operator pos:start="21:42" pos:end="21:42">&amp;</operator> <name pos:start="21:44" pos:end="21:55">CF_HASH_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="35:9"><if pos:start="23:9" pos:end="35:9">if <condition pos:start="23:12" pos:end="23:23">(<expr pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:14">tb</name> <operator pos:start="23:16" pos:end="23:17">==</operator> <name pos:start="23:19" pos:end="23:22">NULL</name></expr>)</condition> <block pos:start="23:25" pos:end="35:9">{<block_content pos:start="25:13" pos:end="33:26">

            <expr_stmt pos:start="25:13" pos:end="25:24"><expr pos:start="25:13" pos:end="25:23"><call pos:start="25:13" pos:end="25:23"><name pos:start="25:13" pos:end="25:21">mmap_lock</name><argument_list pos:start="25:22" pos:end="25:23">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:22"><expr pos:start="27:13" pos:end="27:21"><call pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:19">tb_lock</name><argument_list pos:start="27:20" pos:end="27:21">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:62"><expr pos:start="29:13" pos:end="29:61"><name pos:start="29:13" pos:end="29:14">tb</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:61"><name pos:start="29:18" pos:end="29:28">tb_gen_code</name><argument_list pos:start="29:29" pos:end="29:61">(<argument pos:start="29:30" pos:end="29:32"><expr pos:start="29:30" pos:end="29:32"><name pos:start="29:30" pos:end="29:32">cpu</name></expr></argument>, <argument pos:start="29:35" pos:end="29:36"><expr pos:start="29:35" pos:end="29:36"><name pos:start="29:35" pos:end="29:36">pc</name></expr></argument>, <argument pos:start="29:39" pos:end="29:45"><expr pos:start="29:39" pos:end="29:45"><name pos:start="29:39" pos:end="29:45">cs_base</name></expr></argument>, <argument pos:start="29:48" pos:end="29:52"><expr pos:start="29:48" pos:end="29:52"><name pos:start="29:48" pos:end="29:52">flags</name></expr></argument>, <argument pos:start="29:55" pos:end="29:60"><expr pos:start="29:55" pos:end="29:60"><name pos:start="29:55" pos:end="29:60">cflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:24"><expr pos:start="31:13" pos:end="31:23"><call pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:21">tb_unlock</name><argument_list pos:start="31:22" pos:end="31:23">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:26"><expr pos:start="33:13" pos:end="33:25"><call pos:start="33:13" pos:end="33:25"><name pos:start="33:13" pos:end="33:23">mmap_unlock</name><argument_list pos:start="33:24" pos:end="33:25">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:32"><expr pos:start="39:9" pos:end="39:31"><call pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:10">cc</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:26">cpu_exec_enter</name></name><argument_list pos:start="39:27" pos:end="39:31">(<argument pos:start="39:28" pos:end="39:30"><expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="41:9" pos:end="41:40">/* execute the generated code */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:21">trace_exec_tb</name><argument_list pos:start="43:22" pos:end="43:29">(<argument pos:start="43:23" pos:end="43:24"><expr pos:start="43:23" pos:end="43:24"><name pos:start="43:23" pos:end="43:24">tb</name></expr></argument>, <argument pos:start="43:27" pos:end="43:28"><expr pos:start="43:27" pos:end="43:28"><name pos:start="43:27" pos:end="43:28">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><call pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:19">cpu_tb_exec</name><argument_list pos:start="45:20" pos:end="45:28">(<argument pos:start="45:21" pos:end="45:23"><expr pos:start="45:21" pos:end="45:23"><name pos:start="45:21" pos:end="45:23">cpu</name></expr></argument>, <argument pos:start="45:26" pos:end="45:27"><expr pos:start="45:26" pos:end="45:27"><name pos:start="45:26" pos:end="45:27">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><call pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:10">cc</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:25">cpu_exec_exit</name></name><argument_list pos:start="47:26" pos:end="47:30">(<argument pos:start="47:27" pos:end="47:29"><expr pos:start="47:27" pos:end="47:29"><name pos:start="47:27" pos:end="47:29">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="69:5">else <block pos:start="49:12" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:24">

        <comment type="block" pos:start="51:9" pos:end="59:11">/* We may have exited due to another problem here, so we need

         * to reset any tb_locks we may have taken but didn't release.

         * The mmap_lock is dropped by tb_gen_code if it runs out of

         * memory.

         */</comment>

<cpp:ifndef pos:start="61:1" pos:end="61:22">#<cpp:directive pos:start="61:2" pos:end="61:7">ifndef</cpp:directive> <name pos:start="61:9" pos:end="61:22">CONFIG_SOFTMMU</name></cpp:ifndef>

        <expr_stmt pos:start="63:9" pos:end="66:0"><expr pos:start="63:9" pos:end="63:43"><call pos:start="63:9" pos:end="63:43"><name pos:start="63:9" pos:end="63:24">tcg_debug_assert</name><argument_list pos:start="63:25" pos:end="63:43">(<argument pos:start="63:26" pos:end="63:42"><expr pos:start="63:26" pos:end="63:42"><operator pos:start="63:26" pos:end="63:26">!</operator><call pos:start="63:27" pos:end="63:42"><name pos:start="63:27" pos:end="63:40">have_mmap_lock</name><argument_list pos:start="63:41" pos:end="63:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="67:9" pos:end="67:24"><expr pos:start="67:9" pos:end="67:23"><call pos:start="67:9" pos:end="67:23"><name pos:start="67:9" pos:end="67:21">tb_lock_reset</name><argument_list pos:start="67:22" pos:end="67:23">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
