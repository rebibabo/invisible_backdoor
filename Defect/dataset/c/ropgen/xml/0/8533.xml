<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8533.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:30">ff_network_wait_fd_timeout</name><parameter_list pos:start="1:31" pos:end="1:91">(<parameter pos:start="1:32" pos:end="1:37"><decl pos:start="1:32" pos:end="1:37"><type pos:start="1:32" pos:end="1:37"><name pos:start="1:32" pos:end="1:34">int</name></type> <name pos:start="1:36" pos:end="1:37">fd</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:48"><decl pos:start="1:40" pos:end="1:48"><type pos:start="1:40" pos:end="1:48"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:48">write</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:57">int64_t</name></type> <name pos:start="1:59" pos:end="1:65">timeout</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:90"><decl pos:start="1:68" pos:end="1:90"><type pos:start="1:68" pos:end="1:90"><name pos:start="1:68" pos:end="1:82">AVIOInterruptCB</name> <modifier pos:start="1:84" pos:end="1:84">*</modifier></type><name pos:start="1:85" pos:end="1:90">int_cb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:5">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:22">wait_start</name> <init pos:start="7:24" pos:end="7:26">= <expr pos:start="7:26" pos:end="7:26"><literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="11:5" pos:end="35:5">while <condition pos:start="11:11" pos:end="11:13">(<expr pos:start="11:12" pos:end="11:12"><literal type="number" pos:start="11:12" pos:end="11:12">1</literal></expr>)</condition> <block pos:start="11:15" pos:end="35:5">{<block_content pos:start="13:9" pos:end="33:9">

        <expr_stmt pos:start="13:9" pos:end="13:44"><expr pos:start="13:9" pos:end="13:43"><name pos:start="13:9" pos:end="13:11">ret</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <call pos:start="13:15" pos:end="13:43"><name pos:start="13:15" pos:end="13:32">ff_network_wait_fd</name><argument_list pos:start="13:33" pos:end="13:43">(<argument pos:start="13:34" pos:end="13:35"><expr pos:start="13:34" pos:end="13:35"><name pos:start="13:34" pos:end="13:35">fd</name></expr></argument>, <argument pos:start="13:38" pos:end="13:42"><expr pos:start="13:38" pos:end="13:42"><name pos:start="13:38" pos:end="13:42">write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="15:9" pos:end="17:23"><if pos:start="15:9" pos:end="17:23">if <condition pos:start="15:12" pos:end="15:35">(<expr pos:start="15:13" pos:end="15:34"><name pos:start="15:13" pos:end="15:15">ret</name> <operator pos:start="15:17" pos:end="15:18">!=</operator> <call pos:start="15:20" pos:end="15:34"><name pos:start="15:20" pos:end="15:26">AVERROR</name><argument_list pos:start="15:27" pos:end="15:34">(<argument pos:start="15:28" pos:end="15:33"><expr pos:start="15:28" pos:end="15:33"><name pos:start="15:28" pos:end="15:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:23"><block_content pos:start="17:13" pos:end="17:23">

            <return pos:start="17:13" pos:end="17:23">return <expr pos:start="17:20" pos:end="17:22"><name pos:start="17:20" pos:end="17:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="19:9" pos:end="21:32"><if pos:start="19:9" pos:end="21:32">if <condition pos:start="19:12" pos:end="19:39">(<expr pos:start="19:13" pos:end="19:38"><call pos:start="19:13" pos:end="19:38"><name pos:start="19:13" pos:end="19:30">ff_check_interrupt</name><argument_list pos:start="19:31" pos:end="19:38">(<argument pos:start="19:32" pos:end="19:37"><expr pos:start="19:32" pos:end="19:37"><name pos:start="19:32" pos:end="19:37">int_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:32"><block_content pos:start="21:13" pos:end="21:32">

            <return pos:start="21:13" pos:end="21:32">return <expr pos:start="21:20" pos:end="21:31"><name pos:start="21:20" pos:end="21:31">AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="33:9">if <condition pos:start="23:12" pos:end="23:24">(<expr pos:start="23:13" pos:end="23:23"><name pos:start="23:13" pos:end="23:19">timeout</name> <operator pos:start="23:21" pos:end="23:21">&gt;</operator> <literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr>)</condition> <block pos:start="23:26" pos:end="33:9">{<block_content pos:start="25:13" pos:end="31:42">

            <if_stmt pos:start="25:13" pos:end="31:42"><if pos:start="25:13" pos:end="27:42">if <condition pos:start="25:16" pos:end="25:28">(<expr pos:start="25:17" pos:end="25:27"><operator pos:start="25:17" pos:end="25:17">!</operator><name pos:start="25:18" pos:end="25:27">wait_start</name></expr>)</condition><block type="pseudo" pos:start="27:17" pos:end="27:42"><block_content pos:start="27:17" pos:end="27:42">

                <expr_stmt pos:start="27:17" pos:end="27:42"><expr pos:start="27:17" pos:end="27:41"><name pos:start="27:17" pos:end="27:26">wait_start</name> <operator pos:start="27:28" pos:end="27:28">=</operator> <call pos:start="27:30" pos:end="27:41"><name pos:start="27:30" pos:end="27:39">av_gettime</name><argument_list pos:start="27:40" pos:end="27:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="29:13" pos:end="31:42">else if <condition pos:start="29:21" pos:end="29:57">(<expr pos:start="29:22" pos:end="29:56"><call pos:start="29:22" pos:end="29:33"><name pos:start="29:22" pos:end="29:31">av_gettime</name><argument_list pos:start="29:32" pos:end="29:33">()</argument_list></call> <operator pos:start="29:35" pos:end="29:35">-</operator> <name pos:start="29:37" pos:end="29:46">wait_start</name> <operator pos:start="29:48" pos:end="29:48">&gt;</operator> <name pos:start="29:50" pos:end="29:56">timeout</name></expr>)</condition><block type="pseudo" pos:start="31:17" pos:end="31:42"><block_content pos:start="31:17" pos:end="31:42">

                <return pos:start="31:17" pos:end="31:42">return <expr pos:start="31:24" pos:end="31:41"><call pos:start="31:24" pos:end="31:41"><name pos:start="31:24" pos:end="31:30">AVERROR</name><argument_list pos:start="31:31" pos:end="31:41">(<argument pos:start="31:32" pos:end="31:40"><expr pos:start="31:32" pos:end="31:40"><name pos:start="31:32" pos:end="31:40">ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
