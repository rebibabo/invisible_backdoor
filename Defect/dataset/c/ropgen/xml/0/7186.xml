<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7186.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">ff_rtp_send_aac</name><parameter_list pos:start="1:21" pos:end="1:72">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:36">AVFormatContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">s1</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:61"><decl pos:start="1:43" pos:end="1:61"><type pos:start="1:43" pos:end="1:61"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:55">uint8_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">buff</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:71"><decl pos:start="1:64" pos:end="1:71"><type pos:start="1:64" pos:end="1:71"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:71">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:5">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">RTPMuxContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:36">= <expr pos:start="5:24" pos:end="5:36"><name pos:start="5:24" pos:end="5:36"><name pos:start="5:24" pos:end="5:25">s1</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name></decl>, <decl pos:start="7:14" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:28">max_packet_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">p</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:38">/* skip ADTS header, if present */</comment>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:53">(<expr pos:start="15:9" pos:end="15:52"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:23"><name pos:start="15:10" pos:end="15:11">s1</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:20">streams</name><index pos:start="15:21" pos:end="15:23">[<expr pos:start="15:22" pos:end="15:22"><literal type="number" pos:start="15:22" pos:end="15:22">0</literal></expr>]</index></name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:46"><name pos:start="15:26" pos:end="15:30">codec</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:46">extradata_size</name></name><operator pos:start="15:47" pos:end="15:47">)</operator> <operator pos:start="15:49" pos:end="15:50">==</operator> <literal type="number" pos:start="15:52" pos:end="15:52">0</literal></expr>)</condition> <block pos:start="15:55" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:18"><expr pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:12">size</name> <operator pos:start="17:14" pos:end="17:15">-=</operator> <literal type="number" pos:start="17:17" pos:end="17:17">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:18"><expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:12">buff</name> <operator pos:start="19:14" pos:end="19:15">+=</operator> <literal type="number" pos:start="19:17" pos:end="19:17">7</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:64"><expr pos:start="23:5" pos:end="23:63"><name pos:start="23:5" pos:end="23:19">max_packet_size</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:41"><name pos:start="23:23" pos:end="23:23">s</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:41">max_payload_size</name></name> <operator pos:start="23:43" pos:end="23:43">-</operator> <name pos:start="23:45" pos:end="23:63">MAX_AU_HEADERS_SIZE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:41">/* test if the packet must be sent */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:7">len</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <operator pos:start="29:11" pos:end="29:11">(</operator><name pos:start="29:12" pos:end="29:21"><name pos:start="29:12" pos:end="29:12">s</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:21">buf_ptr</name></name> <operator pos:start="29:23" pos:end="29:23">-</operator> <name pos:start="29:25" pos:end="29:30"><name pos:start="29:25" pos:end="29:25">s</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:30">buf</name></name><operator pos:start="29:31" pos:end="29:31">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="59:5"><if pos:start="31:5" pos:end="59:5">if <condition pos:start="31:8" pos:end="31:96">(<expr pos:start="31:9" pos:end="31:95"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:22"><name pos:start="31:10" pos:end="31:10">s</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:22">num_frames</name></name> <operator pos:start="31:24" pos:end="31:25">==</operator> <name pos:start="31:27" pos:end="31:47">MAX_FRAMES_PER_PACKET</name><operator pos:start="31:48" pos:end="31:48">)</operator> <operator pos:start="31:50" pos:end="31:51">||</operator> <operator pos:start="31:53" pos:end="31:53">(</operator><name pos:start="31:54" pos:end="31:56">len</name> <operator pos:start="31:58" pos:end="31:59">&amp;&amp;</operator> <operator pos:start="31:61" pos:end="31:61">(</operator><name pos:start="31:62" pos:end="31:64">len</name> <operator pos:start="31:66" pos:end="31:66">+</operator> <name pos:start="31:68" pos:end="31:71">size</name><operator pos:start="31:72" pos:end="31:72">)</operator> <operator pos:start="31:74" pos:end="31:74">&gt;</operator> <name pos:start="31:76" pos:end="31:94"><name pos:start="31:76" pos:end="31:76">s</name><operator pos:start="31:77" pos:end="31:78">-&gt;</operator><name pos:start="31:79" pos:end="31:94">max_payload_size</name></name><operator pos:start="31:95" pos:end="31:95">)</operator></expr>)</condition> <block pos:start="31:98" pos:end="59:5">{<block_content pos:start="33:9" pos:end="57:26">

        <decl_stmt pos:start="33:9" pos:end="33:40"><decl pos:start="33:9" pos:end="33:39"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:19">au_size</name> <init pos:start="33:21" pos:end="33:39">= <expr pos:start="33:23" pos:end="33:39"><name pos:start="33:23" pos:end="33:35"><name pos:start="33:23" pos:end="33:23">s</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:35">num_frames</name></name> <operator pos:start="33:37" pos:end="33:37">*</operator> <literal type="number" pos:start="33:39" pos:end="33:39">2</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:55"><expr pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:9">p</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <name pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:18">buf</name></name> <operator pos:start="37:20" pos:end="37:20">+</operator> <name pos:start="37:22" pos:end="37:40">MAX_AU_HEADERS_SIZE</name> <operator pos:start="37:42" pos:end="37:42">-</operator> <name pos:start="37:44" pos:end="37:50">au_size</name> <operator pos:start="37:52" pos:end="37:52">-</operator> <literal type="number" pos:start="37:54" pos:end="37:54">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:24">(<expr pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:13">p</name> <operator pos:start="39:15" pos:end="39:16">!=</operator> <name pos:start="39:18" pos:end="39:23"><name pos:start="39:18" pos:end="39:18">s</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:23">buf</name></name></expr>)</condition> <block pos:start="39:26" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:48">

            <expr_stmt pos:start="41:13" pos:end="41:48"><expr pos:start="41:13" pos:end="41:47"><call pos:start="41:13" pos:end="41:47"><name pos:start="41:13" pos:end="41:19">memmove</name><argument_list pos:start="41:20" pos:end="41:47">(<argument pos:start="41:21" pos:end="41:25"><expr pos:start="41:21" pos:end="41:25"><name pos:start="41:21" pos:end="41:21">p</name> <operator pos:start="41:23" pos:end="41:23">+</operator> <literal type="number" pos:start="41:25" pos:end="41:25">2</literal></expr></argument>, <argument pos:start="41:28" pos:end="41:37"><expr pos:start="41:28" pos:end="41:37"><name pos:start="41:28" pos:end="41:33"><name pos:start="41:28" pos:end="41:28">s</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:33">buf</name></name> <operator pos:start="41:35" pos:end="41:35">+</operator> <literal type="number" pos:start="41:37" pos:end="41:37">2</literal></expr></argument>, <argument pos:start="41:40" pos:end="41:46"><expr pos:start="41:40" pos:end="41:46"><name pos:start="41:40" pos:end="41:46">au_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="45:9" pos:end="45:38">/* Write the AU header size */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:43"><expr pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:12"><name pos:start="47:9" pos:end="47:9">p</name><index pos:start="47:10" pos:end="47:12">[<expr pos:start="47:11" pos:end="47:11"><literal type="number" pos:start="47:11" pos:end="47:11">0</literal></expr>]</index></name> <operator pos:start="47:14" pos:end="47:14">=</operator> <operator pos:start="47:16" pos:end="47:16">(</operator><operator pos:start="47:17" pos:end="47:17">(</operator><name pos:start="47:18" pos:end="47:24">au_size</name> <operator pos:start="47:26" pos:end="47:26">*</operator> <literal type="number" pos:start="47:28" pos:end="47:28">8</literal><operator pos:start="47:29" pos:end="47:29">)</operator> <operator pos:start="47:31" pos:end="47:31">&amp;</operator> <literal type="number" pos:start="47:33" pos:end="47:36">0xFF</literal><operator pos:start="47:37" pos:end="47:37">)</operator> <operator pos:start="47:39" pos:end="47:40">&gt;&gt;</operator> <literal type="number" pos:start="47:42" pos:end="47:42">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:12"><name pos:start="49:9" pos:end="49:9">p</name><index pos:start="49:10" pos:end="49:12">[<expr pos:start="49:11" pos:end="49:11"><literal type="number" pos:start="49:11" pos:end="49:11">1</literal></expr>]</index></name> <operator pos:start="49:14" pos:end="49:14">=</operator> <operator pos:start="49:16" pos:end="49:16">(</operator><name pos:start="49:17" pos:end="49:23">au_size</name> <operator pos:start="49:25" pos:end="49:25">*</operator> <literal type="number" pos:start="49:27" pos:end="49:27">8</literal><operator pos:start="49:28" pos:end="49:28">)</operator> <operator pos:start="49:30" pos:end="49:30">&amp;</operator> <literal type="number" pos:start="49:32" pos:end="49:35">0xFF</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><call pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:24">ff_rtp_send_data</name><argument_list pos:start="53:25" pos:end="53:50">(<argument pos:start="53:26" pos:end="53:27"><expr pos:start="53:26" pos:end="53:27"><name pos:start="53:26" pos:end="53:27">s1</name></expr></argument>, <argument pos:start="53:30" pos:end="53:30"><expr pos:start="53:30" pos:end="53:30"><name pos:start="53:30" pos:end="53:30">p</name></expr></argument>, <argument pos:start="53:33" pos:end="53:46"><expr pos:start="53:33" pos:end="53:46"><name pos:start="53:33" pos:end="53:42"><name pos:start="53:33" pos:end="53:33">s</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:42">buf_ptr</name></name> <operator pos:start="53:44" pos:end="53:44">-</operator> <name pos:start="53:46" pos:end="53:46">p</name></expr></argument>, <argument pos:start="53:49" pos:end="53:49"><expr pos:start="53:49" pos:end="53:49"><literal type="number" pos:start="53:49" pos:end="53:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:26"><expr pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:21">num_frames</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <literal type="number" pos:start="57:25" pos:end="57:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:27">(<expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:21">num_frames</name></name> <operator pos:start="61:23" pos:end="61:24">==</operator> <literal type="number" pos:start="61:26" pos:end="61:26">0</literal></expr>)</condition> <block pos:start="61:29" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:40">

        <expr_stmt pos:start="63:9" pos:end="63:50"><expr pos:start="63:9" pos:end="63:49"><name pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:18">buf_ptr</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:27"><name pos:start="63:22" pos:end="63:22">s</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:27">buf</name></name> <operator pos:start="63:29" pos:end="63:29">+</operator> <name pos:start="63:31" pos:end="63:49">MAX_AU_HEADERS_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:20">timestamp</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:39"><name pos:start="65:24" pos:end="65:24">s</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:39">cur_timestamp</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="119:5"><if pos:start="71:5" pos:end="83:5">if <condition pos:start="71:8" pos:end="71:32">(<expr pos:start="71:9" pos:end="71:31"><name pos:start="71:9" pos:end="71:12">size</name> <operator pos:start="71:14" pos:end="71:15">&lt;=</operator> <name pos:start="71:17" pos:end="71:31">max_packet_size</name></expr>)</condition> <block pos:start="71:34" pos:end="83:5">{<block_content pos:start="73:9" pos:end="81:27">

        <expr_stmt pos:start="73:9" pos:end="73:45"><expr pos:start="73:9" pos:end="73:44"><name pos:start="73:9" pos:end="73:9">p</name> <operator pos:start="73:11" pos:end="73:11">=</operator> <name pos:start="73:13" pos:end="73:18"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:18">buf</name></name> <operator pos:start="73:20" pos:end="73:20">+</operator> <name pos:start="73:22" pos:end="73:34"><name pos:start="73:22" pos:end="73:22">s</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:34">num_frames</name></name><operator pos:start="73:35" pos:end="73:36">++</operator> <operator pos:start="73:38" pos:end="73:38">*</operator> <literal type="number" pos:start="73:40" pos:end="73:42">2</literal> <operator pos:start="73:42" pos:end="73:42">+</operator> <literal type="number" pos:start="73:44" pos:end="73:44">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:25"><expr pos:start="75:9" pos:end="75:24"><operator pos:start="75:9" pos:end="75:9">*</operator><name pos:start="75:10" pos:end="75:10">p</name><operator pos:start="75:11" pos:end="75:12">++</operator> <operator pos:start="75:14" pos:end="75:14">=</operator> <name pos:start="75:16" pos:end="75:19">size</name> <operator pos:start="75:21" pos:end="75:22">&gt;&gt;</operator> <literal type="number" pos:start="75:24" pos:end="75:24">5</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:32"><expr pos:start="77:9" pos:end="77:31"><operator pos:start="77:9" pos:end="77:9">*</operator><name pos:start="77:10" pos:end="77:10">p</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <operator pos:start="77:14" pos:end="77:14">(</operator><name pos:start="77:15" pos:end="77:18">size</name> <operator pos:start="77:20" pos:end="77:20">&amp;</operator> <literal type="number" pos:start="77:22" pos:end="77:25">0x1F</literal><operator pos:start="77:26" pos:end="77:26">)</operator> <operator pos:start="77:28" pos:end="77:29">&lt;&lt;</operator> <literal type="number" pos:start="77:31" pos:end="77:31">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:39"><expr pos:start="79:9" pos:end="79:38"><call pos:start="79:9" pos:end="79:38"><name pos:start="79:9" pos:end="79:14">memcpy</name><argument_list pos:start="79:15" pos:end="79:38">(<argument pos:start="79:16" pos:end="79:25"><expr pos:start="79:16" pos:end="79:25"><name pos:start="79:16" pos:end="79:25"><name pos:start="79:16" pos:end="79:16">s</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:25">buf_ptr</name></name></expr></argument>, <argument pos:start="79:28" pos:end="79:31"><expr pos:start="79:28" pos:end="79:31"><name pos:start="79:28" pos:end="79:31">buff</name></expr></argument>, <argument pos:start="79:34" pos:end="79:37"><expr pos:start="79:34" pos:end="79:37"><name pos:start="79:34" pos:end="79:37">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:27"><expr pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:18">buf_ptr</name></name> <operator pos:start="81:20" pos:end="81:21">+=</operator> <name pos:start="81:23" pos:end="81:26">size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="119:5">else <block pos:start="83:12" pos:end="119:5">{<block_content pos:start="85:9" pos:end="117:9">

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:55">(<expr pos:start="85:13" pos:end="85:54"><name pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:22">buf_ptr</name></name> <operator pos:start="85:24" pos:end="85:25">!=</operator> <name pos:start="85:27" pos:end="85:32"><name pos:start="85:27" pos:end="85:27">s</name><operator pos:start="85:28" pos:end="85:29">-&gt;</operator><name pos:start="85:30" pos:end="85:32">buf</name></name> <operator pos:start="85:34" pos:end="85:34">+</operator> <name pos:start="85:36" pos:end="85:54">MAX_AU_HEADERS_SIZE</name></expr>)</condition> <block pos:start="85:57" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:23">

            <expr_stmt pos:start="87:13" pos:end="87:53"><expr pos:start="87:13" pos:end="87:52"><call pos:start="87:13" pos:end="87:52"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="87:52">(<argument pos:start="87:20" pos:end="87:21"><expr pos:start="87:20" pos:end="87:21"><name pos:start="87:20" pos:end="87:21">s1</name></expr></argument>, <argument pos:start="87:24" pos:end="87:35"><expr pos:start="87:24" pos:end="87:35"><name pos:start="87:24" pos:end="87:35">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:38" pos:end="87:51"><expr pos:start="87:38" pos:end="87:51"><literal type="string" pos:start="87:38" pos:end="87:51">"Strange...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:23"><expr pos:start="89:13" pos:end="89:22"><call pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:20">av_abort</name><argument_list pos:start="89:21" pos:end="89:22">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:50"><expr pos:start="93:9" pos:end="93:49"><name pos:start="93:9" pos:end="93:23">max_packet_size</name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:45"><name pos:start="93:27" pos:end="93:27">s</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:45">max_payload_size</name></name> <operator pos:start="93:47" pos:end="93:47">-</operator> <literal type="number" pos:start="93:49" pos:end="93:49">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:19"><expr pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:9">p</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <name pos:start="95:13" pos:end="95:18"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:18">buf</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:17"><expr pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:12"><name pos:start="97:9" pos:end="97:9">p</name><index pos:start="97:10" pos:end="97:12">[<expr pos:start="97:11" pos:end="97:11"><literal type="number" pos:start="97:11" pos:end="97:11">0</literal></expr>]</index></name> <operator pos:start="97:14" pos:end="97:14">=</operator> <literal type="number" pos:start="97:16" pos:end="97:16">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:18"><expr pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:12"><name pos:start="99:9" pos:end="99:9">p</name><index pos:start="99:10" pos:end="99:12">[<expr pos:start="99:11" pos:end="99:11"><literal type="number" pos:start="99:11" pos:end="99:11">1</literal></expr>]</index></name> <operator pos:start="99:14" pos:end="99:14">=</operator> <literal type="number" pos:start="99:16" pos:end="99:17">16</literal></expr>;</expr_stmt>

        <while pos:start="101:9" pos:end="117:9">while <condition pos:start="101:15" pos:end="101:24">(<expr pos:start="101:16" pos:end="101:23"><name pos:start="101:16" pos:end="101:19">size</name> <operator pos:start="101:21" pos:end="101:21">&gt;</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>)</condition> <block pos:start="101:26" pos:end="117:9">{<block_content pos:start="103:13" pos:end="115:24">

            <expr_stmt pos:start="103:13" pos:end="103:47"><expr pos:start="103:13" pos:end="103:46"><name pos:start="103:13" pos:end="103:15">len</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:46"><name pos:start="103:19" pos:end="103:23">FFMIN</name><argument_list pos:start="103:24" pos:end="103:46">(<argument pos:start="103:25" pos:end="103:28"><expr pos:start="103:25" pos:end="103:28"><name pos:start="103:25" pos:end="103:28">size</name></expr></argument>, <argument pos:start="103:31" pos:end="103:45"><expr pos:start="103:31" pos:end="103:45"><name pos:start="103:31" pos:end="103:45">max_packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:28"><expr pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:16"><name pos:start="105:13" pos:end="105:13">p</name><index pos:start="105:14" pos:end="105:16">[<expr pos:start="105:15" pos:end="105:15"><literal type="number" pos:start="105:15" pos:end="105:15">2</literal></expr>]</index></name> <operator pos:start="105:18" pos:end="105:18">=</operator> <name pos:start="105:20" pos:end="105:22">len</name> <operator pos:start="105:24" pos:end="105:25">&gt;&gt;</operator> <literal type="number" pos:start="105:27" pos:end="105:27">5</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:38"><expr pos:start="107:13" pos:end="107:37"><name pos:start="107:13" pos:end="107:16"><name pos:start="107:13" pos:end="107:13">p</name><index pos:start="107:14" pos:end="107:16">[<expr pos:start="107:15" pos:end="107:15"><literal type="number" pos:start="107:15" pos:end="107:15">3</literal></expr>]</index></name> <operator pos:start="107:18" pos:end="107:18">=</operator> <operator pos:start="107:20" pos:end="107:20">(</operator><name pos:start="107:21" pos:end="107:24">size</name> <operator pos:start="107:26" pos:end="107:26">&amp;</operator> <literal type="number" pos:start="107:28" pos:end="107:31">0x1F</literal><operator pos:start="107:32" pos:end="107:32">)</operator> <operator pos:start="107:34" pos:end="107:35">&lt;&lt;</operator> <literal type="number" pos:start="107:37" pos:end="107:37">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:37"><expr pos:start="109:13" pos:end="109:36"><call pos:start="109:13" pos:end="109:36"><name pos:start="109:13" pos:end="109:18">memcpy</name><argument_list pos:start="109:19" pos:end="109:36">(<argument pos:start="109:20" pos:end="109:24"><expr pos:start="109:20" pos:end="109:24"><name pos:start="109:20" pos:end="109:20">p</name> <operator pos:start="109:22" pos:end="109:22">+</operator> <literal type="number" pos:start="109:24" pos:end="109:24">4</literal></expr></argument>, <argument pos:start="109:27" pos:end="109:30"><expr pos:start="109:27" pos:end="109:30"><name pos:start="109:27" pos:end="109:30">buff</name></expr></argument>, <argument pos:start="109:33" pos:end="109:35"><expr pos:start="109:33" pos:end="109:35"><name pos:start="109:33" pos:end="109:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:58"><expr pos:start="111:13" pos:end="111:57"><call pos:start="111:13" pos:end="111:57"><name pos:start="111:13" pos:end="111:28">ff_rtp_send_data</name><argument_list pos:start="111:29" pos:end="111:57">(<argument pos:start="111:30" pos:end="111:31"><expr pos:start="111:30" pos:end="111:31"><name pos:start="111:30" pos:end="111:31">s1</name></expr></argument>, <argument pos:start="111:34" pos:end="111:34"><expr pos:start="111:34" pos:end="111:34"><name pos:start="111:34" pos:end="111:34">p</name></expr></argument>, <argument pos:start="111:37" pos:end="111:43"><expr pos:start="111:37" pos:end="111:43"><name pos:start="111:37" pos:end="111:39">len</name> <operator pos:start="111:41" pos:end="111:41">+</operator> <literal type="number" pos:start="111:43" pos:end="111:43">4</literal></expr></argument>, <argument pos:start="111:46" pos:end="111:56"><expr pos:start="111:46" pos:end="111:56"><name pos:start="111:46" pos:end="111:48">len</name> <operator pos:start="111:50" pos:end="111:51">==</operator> <name pos:start="111:53" pos:end="111:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:24"><expr pos:start="113:13" pos:end="113:23"><name pos:start="113:13" pos:end="113:16">size</name> <operator pos:start="113:18" pos:end="113:19">-=</operator> <name pos:start="113:21" pos:end="113:23">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:24"><expr pos:start="115:13" pos:end="115:23"><name pos:start="115:13" pos:end="115:16">buff</name> <operator pos:start="115:18" pos:end="115:19">+=</operator> <name pos:start="115:21" pos:end="115:23">len</name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
