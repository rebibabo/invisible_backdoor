<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1248.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">spapr_fixup_cpu_dt</name><parameter_list pos:start="1:30" pos:end="1:66">(<parameter pos:start="1:31" pos:end="1:39"><decl pos:start="1:31" pos:end="1:39"><type pos:start="1:31" pos:end="1:39"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">fdt</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:65"><decl pos:start="1:42" pos:end="1:65"><type pos:start="1:42" pos:end="1:65"><name pos:start="1:42" pos:end="1:58">sPAPRMachineState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:65">spapr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:15">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:23">offset</name></decl>, <decl pos:start="5:26" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:26" pos:end="5:36">cpus_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:22"><name pos:start="9:10" pos:end="9:18">cpu_model</name><index pos:start="9:19" pos:end="9:22">[<expr pos:start="9:20" pos:end="9:21"><literal type="number" pos:start="9:20" pos:end="9:21">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">smt</name> <init pos:start="11:13" pos:end="11:34">= <expr pos:start="11:15" pos:end="11:34"><call pos:start="11:15" pos:end="11:34"><name pos:start="11:15" pos:end="11:32">kvmppc_smt_threads</name><argument_list pos:start="11:33" pos:end="11:34">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:67"><decl pos:start="13:5" pos:end="13:66"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:28"><name pos:start="13:14" pos:end="13:26">pft_size_prop</name><index pos:start="13:27" pos:end="13:28">[]</index></name> <init pos:start="13:30" pos:end="13:66">= <expr pos:start="13:32" pos:end="13:66"><block pos:start="13:32" pos:end="13:66">{<expr pos:start="13:33" pos:end="13:33"><literal type="number" pos:start="13:33" pos:end="13:33">0</literal></expr>, <macro pos:start="13:36" pos:end="13:65"><name pos:start="13:36" pos:end="13:46">cpu_to_be32</name><argument_list pos:start="13:47" pos:end="13:65">(<argument pos:start="13:48" pos:end="13:64">spapr-&gt;htab_shift</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>



    <macro pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:15">CPU_FOREACH</name><argument_list pos:start="17:16" pos:end="17:19">(<argument pos:start="17:17" pos:end="17:18">cs</argument>)</argument_list></macro> <block pos:start="17:21" pos:end="111:5">{<block_content pos:start="19:9" pos:end="109:77">

        <decl_stmt pos:start="19:9" pos:end="19:42"><decl pos:start="19:9" pos:end="19:41"><type pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:18">PowerPCCPU</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:23">cpu</name> <init pos:start="19:25" pos:end="19:41">= <expr pos:start="19:27" pos:end="19:41"><call pos:start="19:27" pos:end="19:41"><name pos:start="19:27" pos:end="19:37">POWERPC_CPU</name><argument_list pos:start="19:38" pos:end="19:41">(<argument pos:start="19:39" pos:end="19:40"><expr pos:start="19:39" pos:end="19:40"><name pos:start="19:39" pos:end="19:40">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:47"><decl pos:start="21:9" pos:end="21:46"><type pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:19">DeviceClass</name> <modifier pos:start="21:21" pos:end="21:21">*</modifier></type><name pos:start="21:22" pos:end="21:23">dc</name> <init pos:start="21:25" pos:end="21:46">= <expr pos:start="21:27" pos:end="21:46"><call pos:start="21:27" pos:end="21:46"><name pos:start="21:27" pos:end="21:42">DEVICE_GET_CLASS</name><argument_list pos:start="21:43" pos:end="21:46">(<argument pos:start="21:44" pos:end="21:45"><expr pos:start="21:44" pos:end="21:45"><name pos:start="21:44" pos:end="21:45">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:39"><decl pos:start="23:9" pos:end="23:38"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:17">index</name> <init pos:start="23:19" pos:end="23:38">= <expr pos:start="23:21" pos:end="23:38"><call pos:start="23:21" pos:end="23:38"><name pos:start="23:21" pos:end="23:33">spapr_vcpu_id</name><argument_list pos:start="23:34" pos:end="23:38">(<argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><name pos:start="23:35" pos:end="23:37">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:71"><decl pos:start="25:9" pos:end="25:70"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:22">compat_smt</name> <init pos:start="25:24" pos:end="25:70">= <expr pos:start="25:26" pos:end="25:70"><call pos:start="25:26" pos:end="25:70"><name pos:start="25:26" pos:end="25:28">MIN</name><argument_list pos:start="25:29" pos:end="25:70">(<argument pos:start="25:30" pos:end="25:40"><expr pos:start="25:30" pos:end="25:40"><name pos:start="25:30" pos:end="25:40">smp_threads</name></expr></argument>, <argument pos:start="25:43" pos:end="25:69"><expr pos:start="25:43" pos:end="25:69"><call pos:start="25:43" pos:end="25:69"><name pos:start="25:43" pos:end="25:64">ppc_compat_max_threads</name><argument_list pos:start="25:65" pos:end="25:69">(<argument pos:start="25:66" pos:end="25:68"><expr pos:start="25:66" pos:end="25:68"><name pos:start="25:66" pos:end="25:68">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:31">(<expr pos:start="29:13" pos:end="29:30"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:18">index</name> <operator pos:start="29:20" pos:end="29:20">%</operator> <name pos:start="29:22" pos:end="29:24">smt</name><operator pos:start="29:25" pos:end="29:25">)</operator> <operator pos:start="29:27" pos:end="29:28">!=</operator> <literal type="number" pos:start="29:30" pos:end="29:30">0</literal></expr>)</condition> <block pos:start="29:33" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:21">

            <continue pos:start="31:13" pos:end="31:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:16">snprintf</name><argument_list pos:start="37:17" pos:end="37:60">(<argument pos:start="37:18" pos:end="37:26"><expr pos:start="37:18" pos:end="37:26"><name pos:start="37:18" pos:end="37:26">cpu_model</name></expr></argument>, <argument pos:start="37:29" pos:end="37:30"><expr pos:start="37:29" pos:end="37:30"><literal type="number" pos:start="37:29" pos:end="37:30">32</literal></expr></argument>, <argument pos:start="37:33" pos:end="37:39"><expr pos:start="37:33" pos:end="37:39"><literal type="string" pos:start="37:33" pos:end="37:39">"%s@%x"</literal></expr></argument>, <argument pos:start="37:42" pos:end="37:52"><expr pos:start="37:42" pos:end="37:52"><name pos:start="37:42" pos:end="37:52"><name pos:start="37:42" pos:end="37:43">dc</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:52">fw_name</name></name></expr></argument>, <argument pos:start="37:55" pos:end="37:59"><expr pos:start="37:55" pos:end="37:59"><name pos:start="37:55" pos:end="37:59">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:52"><expr pos:start="41:9" pos:end="41:51"><name pos:start="41:9" pos:end="41:19">cpus_offset</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:51"><name pos:start="41:23" pos:end="41:37">fdt_path_offset</name><argument_list pos:start="41:38" pos:end="41:51">(<argument pos:start="41:39" pos:end="41:41"><expr pos:start="41:39" pos:end="41:41"><name pos:start="41:39" pos:end="41:41">fdt</name></expr></argument>, <argument pos:start="41:44" pos:end="41:50"><expr pos:start="41:44" pos:end="41:50"><literal type="string" pos:start="41:44" pos:end="41:50">"/cpus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:28">(<expr pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:23">cpus_offset</name> <operator pos:start="43:25" pos:end="43:25">&lt;</operator> <literal type="number" pos:start="43:27" pos:end="43:27">0</literal></expr>)</condition> <block pos:start="43:30" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:13">

            <expr_stmt pos:start="45:13" pos:end="45:58"><expr pos:start="45:13" pos:end="45:57"><name pos:start="45:13" pos:end="45:23">cpus_offset</name> <operator pos:start="45:25" pos:end="45:25">=</operator> <call pos:start="45:27" pos:end="45:57"><name pos:start="45:27" pos:end="45:41">fdt_add_subnode</name><argument_list pos:start="45:42" pos:end="45:57">(<argument pos:start="45:43" pos:end="45:45"><expr pos:start="45:43" pos:end="45:45"><name pos:start="45:43" pos:end="45:45">fdt</name></expr></argument>, <argument pos:start="45:48" pos:end="45:48"><expr pos:start="45:48" pos:end="45:48"><literal type="number" pos:start="45:48" pos:end="45:48">0</literal></expr></argument>, <argument pos:start="45:51" pos:end="45:56"><expr pos:start="45:51" pos:end="45:56"><literal type="string" pos:start="45:51" pos:end="45:56">"cpus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="51:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:32">(<expr pos:start="47:17" pos:end="47:31"><name pos:start="47:17" pos:end="47:27">cpus_offset</name> <operator pos:start="47:29" pos:end="47:29">&lt;</operator> <literal type="number" pos:start="47:31" pos:end="47:31">0</literal></expr>)</condition> <block pos:start="47:34" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:35">

                <return pos:start="49:17" pos:end="49:35">return <expr pos:start="49:24" pos:end="49:34"><name pos:start="49:24" pos:end="49:34">cpus_offset</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:65"><expr pos:start="55:9" pos:end="55:64"><name pos:start="55:9" pos:end="55:14">offset</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:64"><name pos:start="55:18" pos:end="55:35">fdt_subnode_offset</name><argument_list pos:start="55:36" pos:end="55:64">(<argument pos:start="55:37" pos:end="55:39"><expr pos:start="55:37" pos:end="55:39"><name pos:start="55:37" pos:end="55:39">fdt</name></expr></argument>, <argument pos:start="55:42" pos:end="55:52"><expr pos:start="55:42" pos:end="55:52"><name pos:start="55:42" pos:end="55:52">cpus_offset</name></expr></argument>, <argument pos:start="55:55" pos:end="55:63"><expr pos:start="55:55" pos:end="55:63"><name pos:start="55:55" pos:end="55:63">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="67:9">if <condition pos:start="57:12" pos:end="57:23">(<expr pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:18">offset</name> <operator pos:start="57:20" pos:end="57:20">&lt;</operator> <literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr>)</condition> <block pos:start="57:25" pos:end="67:9">{<block_content pos:start="59:13" pos:end="65:13">

            <expr_stmt pos:start="59:13" pos:end="59:66"><expr pos:start="59:13" pos:end="59:65"><name pos:start="59:13" pos:end="59:18">offset</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <call pos:start="59:22" pos:end="59:65"><name pos:start="59:22" pos:end="59:36">fdt_add_subnode</name><argument_list pos:start="59:37" pos:end="59:65">(<argument pos:start="59:38" pos:end="59:40"><expr pos:start="59:38" pos:end="59:40"><name pos:start="59:38" pos:end="59:40">fdt</name></expr></argument>, <argument pos:start="59:43" pos:end="59:53"><expr pos:start="59:43" pos:end="59:53"><name pos:start="59:43" pos:end="59:53">cpus_offset</name></expr></argument>, <argument pos:start="59:56" pos:end="59:64"><expr pos:start="59:56" pos:end="59:64"><name pos:start="59:56" pos:end="59:64">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="65:13"><if pos:start="61:13" pos:end="65:13">if <condition pos:start="61:16" pos:end="61:27">(<expr pos:start="61:17" pos:end="61:26"><name pos:start="61:17" pos:end="61:22">offset</name> <operator pos:start="61:24" pos:end="61:24">&lt;</operator> <literal type="number" pos:start="61:26" pos:end="61:26">0</literal></expr>)</condition> <block pos:start="61:29" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:30">

                <return pos:start="63:17" pos:end="63:30">return <expr pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:29">offset</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="73:64"><expr pos:start="71:9" pos:end="73:63"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="73:63"><name pos:start="71:15" pos:end="71:25">fdt_setprop</name><argument_list pos:start="71:26" pos:end="73:63">(<argument pos:start="71:27" pos:end="71:29"><expr pos:start="71:27" pos:end="71:29"><name pos:start="71:27" pos:end="71:29">fdt</name></expr></argument>, <argument pos:start="71:32" pos:end="71:37"><expr pos:start="71:32" pos:end="71:37"><name pos:start="71:32" pos:end="71:37">offset</name></expr></argument>, <argument pos:start="71:40" pos:end="71:53"><expr pos:start="71:40" pos:end="71:53"><literal type="string" pos:start="71:40" pos:end="71:53">"ibm,pft-size"</literal></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:39"><expr pos:start="73:27" pos:end="73:39"><name pos:start="73:27" pos:end="73:39">pft_size_prop</name></expr></argument>, <argument pos:start="73:42" pos:end="73:62"><expr pos:start="73:42" pos:end="73:62"><sizeof pos:start="73:42" pos:end="73:62">sizeof<argument_list pos:start="73:48" pos:end="73:62">(<argument pos:start="73:49" pos:end="73:61"><expr pos:start="73:49" pos:end="73:61"><name pos:start="73:49" pos:end="73:61">pft_size_prop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:20">(<expr pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">&lt;</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>)</condition> <block pos:start="75:22" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:23">

            <return pos:start="77:13" pos:end="77:23">return <expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="83:9" pos:end="93:9"><if pos:start="83:9" pos:end="93:9">if <condition pos:start="83:12" pos:end="83:30">(<expr pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:25">nb_numa_nodes</name> <operator pos:start="83:27" pos:end="83:27">&gt;</operator> <literal type="number" pos:start="83:29" pos:end="83:29">1</literal></expr>)</condition> <block pos:start="83:32" pos:end="93:9">{<block_content pos:start="85:13" pos:end="91:13">

            <expr_stmt pos:start="85:13" pos:end="85:60"><expr pos:start="85:13" pos:end="85:59"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:59"><name pos:start="85:19" pos:end="85:41">spapr_fixup_cpu_numa_dt</name><argument_list pos:start="85:42" pos:end="85:59">(<argument pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><name pos:start="85:43" pos:end="85:45">fdt</name></expr></argument>, <argument pos:start="85:48" pos:end="85:53"><expr pos:start="85:48" pos:end="85:53"><name pos:start="85:48" pos:end="85:53">offset</name></expr></argument>, <argument pos:start="85:56" pos:end="85:58"><expr pos:start="85:56" pos:end="85:58"><name pos:start="85:56" pos:end="85:58">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="91:13"><if pos:start="87:13" pos:end="91:13">if <condition pos:start="87:16" pos:end="87:24">(<expr pos:start="87:17" pos:end="87:23"><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">&lt;</operator> <literal type="number" pos:start="87:23" pos:end="87:23">0</literal></expr>)</condition> <block pos:start="87:26" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:27">

                <return pos:start="89:17" pos:end="89:27">return <expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:67"><expr pos:start="97:9" pos:end="97:66"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:66"><name pos:start="97:15" pos:end="97:36">spapr_fixup_cpu_smt_dt</name><argument_list pos:start="97:37" pos:end="97:66">(<argument pos:start="97:38" pos:end="97:40"><expr pos:start="97:38" pos:end="97:40"><name pos:start="97:38" pos:end="97:40">fdt</name></expr></argument>, <argument pos:start="97:43" pos:end="97:48"><expr pos:start="97:43" pos:end="97:48"><name pos:start="97:43" pos:end="97:48">offset</name></expr></argument>, <argument pos:start="97:51" pos:end="97:53"><expr pos:start="97:51" pos:end="97:53"><name pos:start="97:51" pos:end="97:53">cpu</name></expr></argument>, <argument pos:start="97:56" pos:end="97:65"><expr pos:start="97:56" pos:end="97:65"><name pos:start="97:56" pos:end="97:65">compat_smt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:20">(<expr pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">&lt;</operator> <literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr>)</condition> <block pos:start="99:22" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:23">

            <return pos:start="101:13" pos:end="101:23">return <expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="109:77"><expr pos:start="107:9" pos:end="109:76"><call pos:start="107:9" pos:end="109:76"><name pos:start="107:9" pos:end="107:34">spapr_populate_pa_features</name><argument_list pos:start="107:35" pos:end="109:76">(<argument pos:start="107:36" pos:end="107:38"><expr pos:start="107:36" pos:end="107:38"><name pos:start="107:36" pos:end="107:38">cpu</name></expr></argument>, <argument pos:start="107:41" pos:end="107:43"><expr pos:start="107:41" pos:end="107:43"><name pos:start="107:41" pos:end="107:43">fdt</name></expr></argument>, <argument pos:start="107:46" pos:end="107:51"><expr pos:start="107:46" pos:end="107:51"><name pos:start="107:46" pos:end="107:51">offset</name></expr></argument>,

                                         <argument pos:start="109:42" pos:end="109:75"><expr pos:start="109:42" pos:end="109:75"><name pos:start="109:42" pos:end="109:75"><name pos:start="109:42" pos:end="109:46">spapr</name><operator pos:start="109:47" pos:end="109:48">-&gt;</operator><name pos:start="109:49" pos:end="109:75">cas_legacy_guest_workaround</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <return pos:start="113:5" pos:end="113:15">return <expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
