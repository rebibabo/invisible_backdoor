<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26013.c" pos:tabs="8"><function pos:start="1:1" pos:end="375:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">always_inline</name> <name pos:start="1:22" pos:end="1:25">void</name></type> <name pos:start="1:27" pos:end="1:56">gen_intermediate_code_internal</name> <parameter_list pos:start="1:58" pos:end="5:72">(<parameter pos:start="1:59" pos:end="1:71"><decl pos:start="1:59" pos:end="1:71"><type pos:start="1:59" pos:end="1:71"><name pos:start="1:59" pos:end="1:66">CPUState</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">env</name></decl></parameter>,

                                                          <parameter pos:start="3:59" pos:end="3:78"><decl pos:start="3:59" pos:end="3:78"><type pos:start="3:59" pos:end="3:78"><name pos:start="3:59" pos:end="3:74">TranslationBlock</name> <modifier pos:start="3:76" pos:end="3:76">*</modifier></type><name pos:start="3:77" pos:end="3:78">tb</name></decl></parameter>,

                                                          <parameter pos:start="5:59" pos:end="5:71"><decl pos:start="5:59" pos:end="5:71"><type pos:start="5:59" pos:end="5:71"><name pos:start="5:59" pos:end="5:61">int</name></type> <name pos:start="5:63" pos:end="5:71">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="375:1">{<block_content pos:start="9:5" pos:end="374:0">

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">ctx</name></decl>, <decl pos:start="9:23" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:27">ctxp</name> <init pos:start="9:29" pos:end="9:34">= <expr pos:start="9:31" pos:end="9:34"><operator pos:start="9:31" pos:end="9:31">&amp;</operator><name pos:start="9:32" pos:end="9:34">ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:17">opc_handler_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier><modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:25">table</name></decl>, <decl pos:start="11:28" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:20"><modifier pos:start="11:28" pos:end="11:28">*</modifier></type><name pos:start="11:29" pos:end="11:35">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint16_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">CPUBreakpoint</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">j</name></decl>, <decl pos:start="19:12" pos:end="19:18"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:13">lj</name> <init pos:start="19:15" pos:end="19:18">= <expr pos:start="19:17" pos:end="19:18"><operator pos:start="19:17" pos:end="19:17">-</operator><literal type="number" pos:start="19:18" pos:end="19:18">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">max_insns</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:12">pc_start</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:21"><name pos:start="27:16" pos:end="27:17">tb</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:45"><expr pos:start="29:5" pos:end="29:44"><name pos:start="29:5" pos:end="29:15">gen_opc_end</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:29">gen_opc_buf</name> <operator pos:start="29:31" pos:end="29:31">+</operator> <name pos:start="29:33" pos:end="29:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:7">ctx</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:11">nip</name></name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:22">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:16"><expr pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:7">ctx</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:10">tb</name></name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:38"><expr pos:start="35:5" pos:end="35:37"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:17">exception</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:37">POWERPC_EXCP_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:7">ctx</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:14">spr_cb</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:28"><name pos:start="37:18" pos:end="37:20">env</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:28">spr_cb</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:7">ctx</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:15">mem_idx</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:30"><name pos:start="39:19" pos:end="39:21">env</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:30">mmu_idx</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:19">access_type</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <operator pos:start="41:23" pos:end="41:23">-</operator><literal type="number" pos:start="41:24" pos:end="41:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:53"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:7">ctx</name><operator pos:start="43:8" pos:end="43:8">.</operator><name pos:start="43:9" pos:end="43:15">le_mode</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <ternary pos:start="43:19" pos:end="43:53"><condition pos:start="43:19" pos:end="43:47"><expr pos:start="43:19" pos:end="43:45"><name pos:start="43:19" pos:end="43:29"><name pos:start="43:19" pos:end="43:21">env</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:29">hflags</name></name> <operator pos:start="43:31" pos:end="43:31">&amp;</operator> <operator pos:start="43:33" pos:end="43:33">(</operator><literal type="number" pos:start="43:34" pos:end="43:34">1</literal> <operator pos:start="43:36" pos:end="43:37">&lt;&lt;</operator> <name pos:start="43:39" pos:end="43:44">MSR_LE</name><operator pos:start="43:45" pos:end="43:45">)</operator></expr> ?</condition><then pos:start="43:49" pos:end="43:49"> <expr pos:start="43:49" pos:end="43:49"><literal type="number" pos:start="43:49" pos:end="43:49">1</literal></expr> </then><else pos:start="43:51" pos:end="43:53">: <expr pos:start="43:53" pos:end="43:53"><literal type="number" pos:start="43:53" pos:end="43:53">0</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:if pos:start="45:1" pos:end="45:25">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:25"><call pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:11">defined</name><argument_list pos:start="45:12" pos:end="45:25">(<argument pos:start="45:13" pos:end="45:24"><expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:24"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:7">ctx</name><operator pos:start="47:8" pos:end="47:8">.</operator><name pos:start="47:9" pos:end="47:15">sf_mode</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:24">msr_sf</name></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="51:5" pos:end="51:29"><expr pos:start="51:5" pos:end="51:28"><name pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:7">ctx</name><operator pos:start="51:8" pos:end="51:8">.</operator><name pos:start="51:9" pos:end="51:19">fpu_enabled</name></name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:28">msr_fp</name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:28"><if pos:start="53:5" pos:end="55:34">if <condition pos:start="53:8" pos:end="53:51">(<expr pos:start="53:9" pos:end="53:50"><operator pos:start="53:9" pos:end="53:9">(</operator><name pos:start="53:10" pos:end="53:19"><name pos:start="53:10" pos:end="53:12">env</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:19">flags</name></name> <operator pos:start="53:21" pos:end="53:21">&amp;</operator> <name pos:start="53:23" pos:end="53:38">POWERPC_FLAG_SPE</name><operator pos:start="53:39" pos:end="53:39">)</operator> <operator pos:start="53:41" pos:end="53:42">&amp;&amp;</operator> <name pos:start="53:44" pos:end="53:50">msr_spe</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:34"><block_content pos:start="55:9" pos:end="55:34">

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:11">ctx</name><operator pos:start="55:12" pos:end="55:12">.</operator><name pos:start="55:13" pos:end="55:23">spe_enabled</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:33">msr_spe</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="57:5" pos:end="59:28">else<block type="pseudo" pos:start="59:9" pos:end="59:28"><block_content pos:start="59:9" pos:end="59:28">

        <expr_stmt pos:start="59:9" pos:end="59:28"><expr pos:start="59:9" pos:end="59:27"><name pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:11">ctx</name><operator pos:start="59:12" pos:end="59:12">.</operator><name pos:start="59:13" pos:end="59:23">spe_enabled</name></name> <operator pos:start="59:25" pos:end="59:25">=</operator> <literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="61:5" pos:end="67:32"><if pos:start="61:5" pos:end="63:37">if <condition pos:start="61:8" pos:end="61:50">(<expr pos:start="61:9" pos:end="61:49"><operator pos:start="61:9" pos:end="61:9">(</operator><name pos:start="61:10" pos:end="61:19"><name pos:start="61:10" pos:end="61:12">env</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:19">flags</name></name> <operator pos:start="61:21" pos:end="61:21">&amp;</operator> <name pos:start="61:23" pos:end="61:38">POWERPC_FLAG_VRE</name><operator pos:start="61:39" pos:end="61:39">)</operator> <operator pos:start="61:41" pos:end="61:42">&amp;&amp;</operator> <name pos:start="61:44" pos:end="61:49">msr_vr</name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:37"><block_content pos:start="63:9" pos:end="63:37">

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:11">ctx</name><operator pos:start="63:12" pos:end="63:12">.</operator><name pos:start="63:13" pos:end="63:27">altivec_enabled</name></name> <operator pos:start="63:29" pos:end="63:29">=</operator> <name pos:start="63:31" pos:end="63:36">msr_vr</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="65:5" pos:end="67:32">else<block type="pseudo" pos:start="67:9" pos:end="67:32"><block_content pos:start="67:9" pos:end="67:32">

        <expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:27"><name pos:start="67:9" pos:end="67:11">ctx</name><operator pos:start="67:12" pos:end="67:12">.</operator><name pos:start="67:13" pos:end="67:27">altivec_enabled</name></name> <operator pos:start="67:29" pos:end="67:29">=</operator> <literal type="number" pos:start="67:31" pos:end="67:31">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="69:5" pos:end="75:35"><if pos:start="69:5" pos:end="71:49">if <condition pos:start="69:8" pos:end="69:49">(<expr pos:start="69:9" pos:end="69:48"><operator pos:start="69:9" pos:end="69:9">(</operator><name pos:start="69:10" pos:end="69:19"><name pos:start="69:10" pos:end="69:12">env</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:19">flags</name></name> <operator pos:start="69:21" pos:end="69:21">&amp;</operator> <name pos:start="69:23" pos:end="69:37">POWERPC_FLAG_SE</name><operator pos:start="69:38" pos:end="69:38">)</operator> <operator pos:start="69:40" pos:end="69:41">&amp;&amp;</operator> <name pos:start="69:43" pos:end="69:48">msr_se</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:49"><block_content pos:start="71:9" pos:end="71:49">

        <expr_stmt pos:start="71:9" pos:end="71:49"><expr pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:11">ctx</name><operator pos:start="71:12" pos:end="71:12">.</operator><name pos:start="71:13" pos:end="71:30">singlestep_enabled</name></name> <operator pos:start="71:32" pos:end="71:32">=</operator> <name pos:start="71:34" pos:end="71:48">CPU_SINGLE_STEP</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="73:5" pos:end="75:35">else<block type="pseudo" pos:start="75:9" pos:end="75:35"><block_content pos:start="75:9" pos:end="75:35">

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:11">ctx</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:30">singlestep_enabled</name></name> <operator pos:start="75:32" pos:end="75:32">=</operator> <literal type="number" pos:start="75:34" pos:end="75:34">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="77:5" pos:end="79:50"><if pos:start="77:5" pos:end="79:50">if <condition pos:start="77:8" pos:end="77:49">(<expr pos:start="77:9" pos:end="77:48"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:19"><name pos:start="77:10" pos:end="77:12">env</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:19">flags</name></name> <operator pos:start="77:21" pos:end="77:21">&amp;</operator> <name pos:start="77:23" pos:end="77:37">POWERPC_FLAG_BE</name><operator pos:start="77:38" pos:end="77:38">)</operator> <operator pos:start="77:40" pos:end="77:41">&amp;&amp;</operator> <name pos:start="77:43" pos:end="77:48">msr_be</name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:50"><block_content pos:start="79:9" pos:end="79:50">

        <expr_stmt pos:start="79:9" pos:end="79:50"><expr pos:start="79:9" pos:end="79:49"><name pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:11">ctx</name><operator pos:start="79:12" pos:end="79:12">.</operator><name pos:start="79:13" pos:end="79:30">singlestep_enabled</name></name> <operator pos:start="79:32" pos:end="79:33">|=</operator> <name pos:start="79:35" pos:end="79:49">CPU_BRANCH_STEP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="86:0"><if pos:start="81:5" pos:end="86:0">if <condition pos:start="81:8" pos:end="81:42">(<expr pos:start="81:9" pos:end="81:41"><call pos:start="81:9" pos:end="81:41"><name pos:start="81:9" pos:end="81:16">unlikely</name><argument_list pos:start="81:17" pos:end="81:41">(<argument pos:start="81:18" pos:end="81:40"><expr pos:start="81:18" pos:end="81:40"><name pos:start="81:18" pos:end="81:40"><name pos:start="81:18" pos:end="81:20">env</name><operator pos:start="81:21" pos:end="81:22">-&gt;</operator><name pos:start="81:23" pos:end="81:40">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="86:0"><block_content pos:start="83:9" pos:end="86:0">

        <expr_stmt pos:start="83:9" pos:end="86:0"><expr pos:start="83:9" pos:end="83:53"><name pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:11">ctx</name><operator pos:start="83:12" pos:end="83:12">.</operator><name pos:start="83:13" pos:end="83:30">singlestep_enabled</name></name> <operator pos:start="83:32" pos:end="83:33">|=</operator> <name pos:start="83:35" pos:end="83:53">GDBSTUB_SINGLE_STEP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="85:1" pos:end="85:33">#<cpp:directive pos:start="85:2" pos:end="85:3">if</cpp:directive> <expr pos:start="85:5" pos:end="85:33"><call pos:start="85:5" pos:end="85:28"><name pos:start="85:5" pos:end="85:11">defined</name> <argument_list pos:start="85:13" pos:end="85:28">(<argument pos:start="85:14" pos:end="85:27"><expr pos:start="85:14" pos:end="85:27"><name pos:start="85:14" pos:end="85:27">DO_SINGLE_STEP</name></expr></argument>)</argument_list></call> <operator pos:start="85:30" pos:end="85:31">&amp;&amp;</operator> <literal type="number" pos:start="85:33" pos:end="85:33">0</literal></expr></cpp:if>

    <comment type="block" pos:start="87:5" pos:end="87:32">/* Single step trace mode */</comment>

    <expr_stmt pos:start="89:5" pos:end="92:0"><expr pos:start="89:5" pos:end="89:14"><name pos:start="89:5" pos:end="89:10">msr_se</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="93:5" pos:end="93:18"><expr pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:13">num_insns</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <literal type="number" pos:start="93:17" pos:end="93:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:43"><expr pos:start="95:5" pos:end="95:42"><name pos:start="95:5" pos:end="95:13">max_insns</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <name pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:18">tb</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:26">cflags</name></name> <operator pos:start="95:28" pos:end="95:28">&amp;</operator> <name pos:start="95:30" pos:end="95:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="99:34"><if pos:start="97:5" pos:end="99:34">if <condition pos:start="97:8" pos:end="97:23">(<expr pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:17">max_insns</name> <operator pos:start="97:19" pos:end="97:20">==</operator> <literal type="number" pos:start="97:22" pos:end="97:22">0</literal></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:34"><block_content pos:start="99:9" pos:end="99:34">

        <expr_stmt pos:start="99:9" pos:end="99:34"><expr pos:start="99:9" pos:end="99:33"><name pos:start="99:9" pos:end="99:17">max_insns</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <name pos:start="99:21" pos:end="99:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:23"><expr pos:start="103:5" pos:end="103:22"><call pos:start="103:5" pos:end="103:22"><name pos:start="103:5" pos:end="103:20">gen_icount_start</name><argument_list pos:start="103:21" pos:end="103:22">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="105:5" pos:end="105:55">/* Set env in case of segfault during code fetch */</comment>

    <while pos:start="107:5" pos:end="305:5">while <condition pos:start="107:11" pos:end="107:75">(<expr pos:start="107:12" pos:end="107:74"><name pos:start="107:12" pos:end="107:24"><name pos:start="107:12" pos:end="107:14">ctx</name><operator pos:start="107:15" pos:end="107:15">.</operator><name pos:start="107:16" pos:end="107:24">exception</name></name> <operator pos:start="107:26" pos:end="107:27">==</operator> <name pos:start="107:29" pos:end="107:45">POWERPC_EXCP_NONE</name> <operator pos:start="107:47" pos:end="107:48">&amp;&amp;</operator> <name pos:start="107:50" pos:end="107:60">gen_opc_ptr</name> <operator pos:start="107:62" pos:end="107:62">&lt;</operator> <name pos:start="107:64" pos:end="107:74">gen_opc_end</name></expr>)</condition> <block pos:start="107:77" pos:end="305:5">{<block_content pos:start="109:9" pos:end="304:0">

        <if_stmt pos:start="109:9" pos:end="123:9"><if pos:start="109:9" pos:end="123:9">if <condition pos:start="109:12" pos:end="109:54">(<expr pos:start="109:13" pos:end="109:53"><call pos:start="109:13" pos:end="109:53"><name pos:start="109:13" pos:end="109:20">unlikely</name><argument_list pos:start="109:21" pos:end="109:53">(<argument pos:start="109:22" pos:end="109:52"><expr pos:start="109:22" pos:end="109:52"><operator pos:start="109:22" pos:end="109:22">!</operator><call pos:start="109:23" pos:end="109:52"><name pos:start="109:23" pos:end="109:33">TAILQ_EMPTY</name><argument_list pos:start="109:34" pos:end="109:52">(<argument pos:start="109:35" pos:end="109:51"><expr pos:start="109:35" pos:end="109:51"><operator pos:start="109:35" pos:end="109:35">&amp;</operator><name pos:start="109:36" pos:end="109:51"><name pos:start="109:36" pos:end="109:38">env</name><operator pos:start="109:39" pos:end="109:40">-&gt;</operator><name pos:start="109:41" pos:end="109:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:56" pos:end="123:9">{<block_content pos:start="111:13" pos:end="121:13">

            <macro pos:start="111:13" pos:end="111:55"><name pos:start="111:13" pos:end="111:25">TAILQ_FOREACH</name><argument_list pos:start="111:26" pos:end="111:55">(<argument pos:start="111:27" pos:end="111:28">bp</argument>, <argument pos:start="111:31" pos:end="111:47">&amp;env-&gt;breakpoints</argument>, <argument pos:start="111:50" pos:end="111:54">entry</argument>)</argument_list></macro> <block pos:start="111:57" pos:end="121:13">{<block_content pos:start="113:17" pos:end="119:17">

                <if_stmt pos:start="113:17" pos:end="119:17"><if pos:start="113:17" pos:end="119:17">if <condition pos:start="113:20" pos:end="113:38">(<expr pos:start="113:21" pos:end="113:37"><name pos:start="113:21" pos:end="113:26"><name pos:start="113:21" pos:end="113:22">bp</name><operator pos:start="113:23" pos:end="113:24">-&gt;</operator><name pos:start="113:25" pos:end="113:26">pc</name></name> <operator pos:start="113:28" pos:end="113:29">==</operator> <name pos:start="113:31" pos:end="113:37"><name pos:start="113:31" pos:end="113:33">ctx</name><operator pos:start="113:34" pos:end="113:34">.</operator><name pos:start="113:35" pos:end="113:37">nip</name></name></expr>)</condition> <block pos:start="113:40" pos:end="119:17">{<block_content pos:start="115:21" pos:end="117:26">

                    <expr_stmt pos:start="115:21" pos:end="115:46"><expr pos:start="115:21" pos:end="115:45"><call pos:start="115:21" pos:end="115:45"><name pos:start="115:21" pos:end="115:39">gen_debug_exception</name><argument_list pos:start="115:40" pos:end="115:45">(<argument pos:start="115:41" pos:end="115:44"><expr pos:start="115:41" pos:end="115:44"><name pos:start="115:41" pos:end="115:44">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="117:21" pos:end="117:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="125:9" pos:end="145:9"><if pos:start="125:9" pos:end="145:9">if <condition pos:start="125:12" pos:end="125:32">(<expr pos:start="125:13" pos:end="125:31"><call pos:start="125:13" pos:end="125:31"><name pos:start="125:13" pos:end="125:20">unlikely</name><argument_list pos:start="125:21" pos:end="125:31">(<argument pos:start="125:22" pos:end="125:30"><expr pos:start="125:22" pos:end="125:30"><name pos:start="125:22" pos:end="125:30">search_pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:34" pos:end="145:9">{<block_content pos:start="127:13" pos:end="143:13">

            <expr_stmt pos:start="127:13" pos:end="127:42"><expr pos:start="127:13" pos:end="127:41"><name pos:start="127:13" pos:end="127:13">j</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <name pos:start="127:17" pos:end="127:27">gen_opc_ptr</name> <operator pos:start="127:29" pos:end="127:29">-</operator> <name pos:start="127:31" pos:end="127:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="143:13"><if pos:start="129:13" pos:end="143:13">if <condition pos:start="129:16" pos:end="129:23">(<expr pos:start="129:17" pos:end="129:22"><name pos:start="129:17" pos:end="129:18">lj</name> <operator pos:start="129:20" pos:end="129:20">&lt;</operator> <name pos:start="129:22" pos:end="129:22">j</name></expr>)</condition> <block pos:start="129:25" pos:end="143:13">{<block_content pos:start="131:17" pos:end="141:47">

                <expr_stmt pos:start="131:17" pos:end="131:21"><expr pos:start="131:17" pos:end="131:20"><name pos:start="131:17" pos:end="131:18">lj</name><operator pos:start="131:19" pos:end="131:20">++</operator></expr>;</expr_stmt>

                <while pos:start="133:17" pos:end="135:50">while <condition pos:start="133:23" pos:end="133:30">(<expr pos:start="133:24" pos:end="133:29"><name pos:start="133:24" pos:end="133:25">lj</name> <operator pos:start="133:27" pos:end="133:27">&lt;</operator> <name pos:start="133:29" pos:end="133:29">j</name></expr>)</condition><block type="pseudo" pos:start="135:21" pos:end="135:50"><block_content pos:start="135:21" pos:end="135:50">

                    <expr_stmt pos:start="135:21" pos:end="135:50"><expr pos:start="135:21" pos:end="135:49"><name pos:start="135:21" pos:end="135:45"><name pos:start="135:21" pos:end="135:39">gen_opc_instr_start</name><index pos:start="135:40" pos:end="135:45">[<expr pos:start="135:41" pos:end="135:44"><name pos:start="135:41" pos:end="135:42">lj</name><operator pos:start="135:43" pos:end="135:44">++</operator></expr>]</index></name> <operator pos:start="135:47" pos:end="135:47">=</operator> <literal type="number" pos:start="135:49" pos:end="135:49">0</literal></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="137:17" pos:end="137:41"><expr pos:start="137:17" pos:end="137:40"><name pos:start="137:17" pos:end="137:30"><name pos:start="137:17" pos:end="137:26">gen_opc_pc</name><index pos:start="137:27" pos:end="137:30">[<expr pos:start="137:28" pos:end="137:29"><name pos:start="137:28" pos:end="137:29">lj</name></expr>]</index></name> <operator pos:start="137:32" pos:end="137:32">=</operator> <name pos:start="137:34" pos:end="137:40"><name pos:start="137:34" pos:end="137:36">ctx</name><operator pos:start="137:37" pos:end="137:37">.</operator><name pos:start="137:38" pos:end="137:40">nip</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:44"><expr pos:start="139:17" pos:end="139:43"><name pos:start="139:17" pos:end="139:39"><name pos:start="139:17" pos:end="139:35">gen_opc_instr_start</name><index pos:start="139:36" pos:end="139:39">[<expr pos:start="139:37" pos:end="139:38"><name pos:start="139:37" pos:end="139:38">lj</name></expr>]</index></name> <operator pos:start="139:41" pos:end="139:41">=</operator> <literal type="number" pos:start="139:43" pos:end="139:43">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:47"><expr pos:start="141:17" pos:end="141:46"><name pos:start="141:17" pos:end="141:34"><name pos:start="141:17" pos:end="141:30">gen_opc_icount</name><index pos:start="141:31" pos:end="141:34">[<expr pos:start="141:32" pos:end="141:33"><name pos:start="141:32" pos:end="141:33">lj</name></expr>]</index></name> <operator pos:start="141:36" pos:end="141:36">=</operator> <name pos:start="141:38" pos:end="141:46">num_insns</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:40"><expr pos:start="147:9" pos:end="147:39"><call pos:start="147:9" pos:end="147:39"><name pos:start="147:9" pos:end="147:17">LOG_DISAS</name><argument_list pos:start="147:18" pos:end="147:39">(<argument pos:start="147:19" pos:end="147:38"><expr pos:start="147:19" pos:end="147:38"><literal type="string" pos:start="147:19" pos:end="147:38">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="151:53"><expr pos:start="149:9" pos:end="151:52"><call pos:start="149:9" pos:end="151:52"><name pos:start="149:9" pos:end="149:17">LOG_DISAS</name><argument_list pos:start="149:18" pos:end="151:52">(<argument pos:start="149:19" pos:end="149:50"><expr pos:start="149:19" pos:end="149:50"><literal type="string" pos:start="149:19" pos:end="149:24">"nip="</literal> <name pos:start="149:26" pos:end="149:30">ADDRX</name> <literal type="string" pos:start="149:32" pos:end="149:50">" super=%d ir=%d\n"</literal></expr></argument>,

                  <argument pos:start="151:19" pos:end="151:25"><expr pos:start="151:19" pos:end="151:25"><name pos:start="151:19" pos:end="151:25"><name pos:start="151:19" pos:end="151:21">ctx</name><operator pos:start="151:22" pos:end="151:22">.</operator><name pos:start="151:23" pos:end="151:25">nip</name></name></expr></argument>, <argument pos:start="151:28" pos:end="151:38"><expr pos:start="151:28" pos:end="151:38"><name pos:start="151:28" pos:end="151:38"><name pos:start="151:28" pos:end="151:30">ctx</name><operator pos:start="151:31" pos:end="151:31">.</operator><name pos:start="151:32" pos:end="151:38">mem_idx</name></name></expr></argument>, <argument pos:start="151:41" pos:end="151:51"><expr pos:start="151:41" pos:end="151:51"><operator pos:start="151:41" pos:end="151:41">(</operator><name pos:start="151:42" pos:end="151:44">int</name><operator pos:start="151:45" pos:end="151:45">)</operator><name pos:start="151:46" pos:end="151:51">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="155:27"><if pos:start="153:9" pos:end="155:27">if <condition pos:start="153:12" pos:end="153:68">(<expr pos:start="153:13" pos:end="153:67"><name pos:start="153:13" pos:end="153:21">num_insns</name> <operator pos:start="153:23" pos:end="153:23">+</operator> <literal type="number" pos:start="153:25" pos:end="153:25">1</literal> <operator pos:start="153:27" pos:end="153:28">==</operator> <name pos:start="153:30" pos:end="153:38">max_insns</name> <operator pos:start="153:40" pos:end="153:41">&amp;&amp;</operator> <operator pos:start="153:43" pos:end="153:43">(</operator><name pos:start="153:44" pos:end="153:53"><name pos:start="153:44" pos:end="153:45">tb</name><operator pos:start="153:46" pos:end="153:47">-&gt;</operator><name pos:start="153:48" pos:end="153:53">cflags</name></name> <operator pos:start="153:55" pos:end="153:55">&amp;</operator> <name pos:start="153:57" pos:end="153:66">CF_LAST_IO</name><operator pos:start="153:67" pos:end="153:67">)</operator></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:27"><block_content pos:start="155:13" pos:end="155:27">

            <expr_stmt pos:start="155:13" pos:end="155:27"><expr pos:start="155:13" pos:end="155:26"><call pos:start="155:13" pos:end="155:26"><name pos:start="155:13" pos:end="155:24">gen_io_start</name><argument_list pos:start="155:25" pos:end="155:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="157:9" pos:end="165:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:34">(<expr pos:start="157:13" pos:end="157:33"><call pos:start="157:13" pos:end="157:33"><name pos:start="157:13" pos:end="157:20">unlikely</name><argument_list pos:start="157:21" pos:end="157:33">(<argument pos:start="157:22" pos:end="157:32"><expr pos:start="157:22" pos:end="157:32"><name pos:start="157:22" pos:end="157:32"><name pos:start="157:22" pos:end="157:24">ctx</name><operator pos:start="157:25" pos:end="157:25">.</operator><name pos:start="157:26" pos:end="157:32">le_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:36" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:52">

            <expr_stmt pos:start="159:13" pos:end="159:52"><expr pos:start="159:13" pos:end="159:51"><name pos:start="159:13" pos:end="159:22"><name pos:start="159:13" pos:end="159:15">ctx</name><operator pos:start="159:16" pos:end="159:16">.</operator><name pos:start="159:17" pos:end="159:22">opcode</name></name> <operator pos:start="159:24" pos:end="159:24">=</operator> <call pos:start="159:26" pos:end="159:51"><name pos:start="159:26" pos:end="159:32">bswap32</name><argument_list pos:start="159:33" pos:end="159:51">(<argument pos:start="159:34" pos:end="159:50"><expr pos:start="159:34" pos:end="159:50"><call pos:start="159:34" pos:end="159:50"><name pos:start="159:34" pos:end="159:41">ldl_code</name><argument_list pos:start="159:42" pos:end="159:50">(<argument pos:start="159:43" pos:end="159:49"><expr pos:start="159:43" pos:end="159:49"><name pos:start="159:43" pos:end="159:49"><name pos:start="159:43" pos:end="159:45">ctx</name><operator pos:start="159:46" pos:end="159:46">.</operator><name pos:start="159:47" pos:end="159:49">nip</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="161:11" pos:end="165:9">else <block pos:start="161:16" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:43">

            <expr_stmt pos:start="163:13" pos:end="163:43"><expr pos:start="163:13" pos:end="163:42"><name pos:start="163:13" pos:end="163:22"><name pos:start="163:13" pos:end="163:15">ctx</name><operator pos:start="163:16" pos:end="163:16">.</operator><name pos:start="163:17" pos:end="163:22">opcode</name></name> <operator pos:start="163:24" pos:end="163:24">=</operator> <call pos:start="163:26" pos:end="163:42"><name pos:start="163:26" pos:end="163:33">ldl_code</name><argument_list pos:start="163:34" pos:end="163:42">(<argument pos:start="163:35" pos:end="163:41"><expr pos:start="163:35" pos:end="163:41"><name pos:start="163:35" pos:end="163:41"><name pos:start="163:35" pos:end="163:37">ctx</name><operator pos:start="163:38" pos:end="163:38">.</operator><name pos:start="163:39" pos:end="163:41">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="167:9" pos:end="171:72"><expr pos:start="167:9" pos:end="171:71"><call pos:start="167:9" pos:end="171:71"><name pos:start="167:9" pos:end="167:17">LOG_DISAS</name><argument_list pos:start="167:18" pos:end="171:71">(<argument pos:start="167:19" pos:end="167:65"><expr pos:start="167:19" pos:end="167:65"><literal type="string" pos:start="167:19" pos:end="167:65">"translate opcode %08x (%02x %02x %02x) (%s)\n"</literal></expr></argument>,

                    <argument pos:start="169:21" pos:end="169:30"><expr pos:start="169:21" pos:end="169:30"><name pos:start="169:21" pos:end="169:30"><name pos:start="169:21" pos:end="169:23">ctx</name><operator pos:start="169:24" pos:end="169:24">.</operator><name pos:start="169:25" pos:end="169:30">opcode</name></name></expr></argument>, <argument pos:start="169:33" pos:end="169:48"><expr pos:start="169:33" pos:end="169:48"><call pos:start="169:33" pos:end="169:48"><name pos:start="169:33" pos:end="169:36">opc1</name><argument_list pos:start="169:37" pos:end="169:48">(<argument pos:start="169:38" pos:end="169:47"><expr pos:start="169:38" pos:end="169:47"><name pos:start="169:38" pos:end="169:47"><name pos:start="169:38" pos:end="169:40">ctx</name><operator pos:start="169:41" pos:end="169:41">.</operator><name pos:start="169:42" pos:end="169:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="169:51" pos:end="169:66"><expr pos:start="169:51" pos:end="169:66"><call pos:start="169:51" pos:end="169:66"><name pos:start="169:51" pos:end="169:54">opc2</name><argument_list pos:start="169:55" pos:end="169:66">(<argument pos:start="169:56" pos:end="169:65"><expr pos:start="169:56" pos:end="169:65"><name pos:start="169:56" pos:end="169:65"><name pos:start="169:56" pos:end="169:58">ctx</name><operator pos:start="169:59" pos:end="169:59">.</operator><name pos:start="169:60" pos:end="169:65">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="171:21" pos:end="171:36"><expr pos:start="171:21" pos:end="171:36"><call pos:start="171:21" pos:end="171:36"><name pos:start="171:21" pos:end="171:24">opc3</name><argument_list pos:start="171:25" pos:end="171:36">(<argument pos:start="171:26" pos:end="171:35"><expr pos:start="171:26" pos:end="171:35"><name pos:start="171:26" pos:end="171:35"><name pos:start="171:26" pos:end="171:28">ctx</name><operator pos:start="171:29" pos:end="171:29">.</operator><name pos:start="171:30" pos:end="171:35">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:39" pos:end="171:70"><expr pos:start="171:39" pos:end="171:70"><ternary pos:start="171:39" pos:end="171:70"><condition pos:start="171:39" pos:end="171:53"><expr pos:start="171:39" pos:end="171:51"><name pos:start="171:39" pos:end="171:51">little_endian</name></expr> ?</condition><then pos:start="171:55" pos:end="171:62"> <expr pos:start="171:55" pos:end="171:62"><literal type="string" pos:start="171:55" pos:end="171:62">"little"</literal></expr> </then><else pos:start="171:64" pos:end="171:70">: <expr pos:start="171:66" pos:end="171:70"><literal type="string" pos:start="171:66" pos:end="171:70">"big"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:21"><expr pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:11">ctx</name><operator pos:start="173:12" pos:end="173:12">.</operator><name pos:start="173:13" pos:end="173:15">nip</name></name> <operator pos:start="173:17" pos:end="173:18">+=</operator> <literal type="number" pos:start="173:20" pos:end="173:20">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:29"><expr pos:start="175:9" pos:end="175:28"><name pos:start="175:9" pos:end="175:13">table</name> <operator pos:start="175:15" pos:end="175:15">=</operator> <name pos:start="175:17" pos:end="175:28"><name pos:start="175:17" pos:end="175:19">env</name><operator pos:start="175:20" pos:end="175:21">-&gt;</operator><name pos:start="175:22" pos:end="175:28">opcodes</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:20"><expr pos:start="177:9" pos:end="177:19"><name pos:start="177:9" pos:end="177:17">num_insns</name><operator pos:start="177:18" pos:end="177:19">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:42"><expr pos:start="179:9" pos:end="179:41"><name pos:start="179:9" pos:end="179:15">handler</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <name pos:start="179:19" pos:end="179:41"><name pos:start="179:19" pos:end="179:23">table</name><index pos:start="179:24" pos:end="179:41">[<expr pos:start="179:25" pos:end="179:40"><call pos:start="179:25" pos:end="179:40"><name pos:start="179:25" pos:end="179:28">opc1</name><argument_list pos:start="179:29" pos:end="179:40">(<argument pos:start="179:30" pos:end="179:39"><expr pos:start="179:30" pos:end="179:39"><name pos:start="179:30" pos:end="179:39"><name pos:start="179:30" pos:end="179:32">ctx</name><operator pos:start="179:33" pos:end="179:33">.</operator><name pos:start="179:34" pos:end="179:39">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="195:9"><if pos:start="181:9" pos:end="195:9">if <condition pos:start="181:12" pos:end="181:40">(<expr pos:start="181:13" pos:end="181:39"><call pos:start="181:13" pos:end="181:39"><name pos:start="181:13" pos:end="181:30">is_indirect_opcode</name><argument_list pos:start="181:31" pos:end="181:39">(<argument pos:start="181:32" pos:end="181:38"><expr pos:start="181:32" pos:end="181:38"><name pos:start="181:32" pos:end="181:38">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:42" pos:end="195:9">{<block_content pos:start="183:13" pos:end="193:13">

            <expr_stmt pos:start="183:13" pos:end="183:39"><expr pos:start="183:13" pos:end="183:38"><name pos:start="183:13" pos:end="183:17">table</name> <operator pos:start="183:19" pos:end="183:19">=</operator> <call pos:start="183:21" pos:end="183:38"><name pos:start="183:21" pos:end="183:29">ind_table</name><argument_list pos:start="183:30" pos:end="183:38">(<argument pos:start="183:31" pos:end="183:37"><expr pos:start="183:31" pos:end="183:37"><name pos:start="183:31" pos:end="183:37">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:46"><expr pos:start="185:13" pos:end="185:45"><name pos:start="185:13" pos:end="185:19">handler</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <name pos:start="185:23" pos:end="185:45"><name pos:start="185:23" pos:end="185:27">table</name><index pos:start="185:28" pos:end="185:45">[<expr pos:start="185:29" pos:end="185:44"><call pos:start="185:29" pos:end="185:44"><name pos:start="185:29" pos:end="185:32">opc2</name><argument_list pos:start="185:33" pos:end="185:44">(<argument pos:start="185:34" pos:end="185:43"><expr pos:start="185:34" pos:end="185:43"><name pos:start="185:34" pos:end="185:43"><name pos:start="185:34" pos:end="185:36">ctx</name><operator pos:start="185:37" pos:end="185:37">.</operator><name pos:start="185:38" pos:end="185:43">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="187:13" pos:end="193:13"><if pos:start="187:13" pos:end="193:13">if <condition pos:start="187:16" pos:end="187:44">(<expr pos:start="187:17" pos:end="187:43"><call pos:start="187:17" pos:end="187:43"><name pos:start="187:17" pos:end="187:34">is_indirect_opcode</name><argument_list pos:start="187:35" pos:end="187:43">(<argument pos:start="187:36" pos:end="187:42"><expr pos:start="187:36" pos:end="187:42"><name pos:start="187:36" pos:end="187:42">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:46" pos:end="193:13">{<block_content pos:start="189:17" pos:end="191:50">

                <expr_stmt pos:start="189:17" pos:end="189:43"><expr pos:start="189:17" pos:end="189:42"><name pos:start="189:17" pos:end="189:21">table</name> <operator pos:start="189:23" pos:end="189:23">=</operator> <call pos:start="189:25" pos:end="189:42"><name pos:start="189:25" pos:end="189:33">ind_table</name><argument_list pos:start="189:34" pos:end="189:42">(<argument pos:start="189:35" pos:end="189:41"><expr pos:start="189:35" pos:end="189:41"><name pos:start="189:35" pos:end="189:41">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:50"><expr pos:start="191:17" pos:end="191:49"><name pos:start="191:17" pos:end="191:23">handler</name> <operator pos:start="191:25" pos:end="191:25">=</operator> <name pos:start="191:27" pos:end="191:49"><name pos:start="191:27" pos:end="191:31">table</name><index pos:start="191:32" pos:end="191:49">[<expr pos:start="191:33" pos:end="191:48"><call pos:start="191:33" pos:end="191:48"><name pos:start="191:33" pos:end="191:36">opc3</name><argument_list pos:start="191:37" pos:end="191:48">(<argument pos:start="191:38" pos:end="191:47"><expr pos:start="191:38" pos:end="191:47"><name pos:start="191:38" pos:end="191:47"><name pos:start="191:38" pos:end="191:40">ctx</name><operator pos:start="191:41" pos:end="191:41">.</operator><name pos:start="191:42" pos:end="191:47">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="197:9" pos:end="197:40">/* Is opcode *REALLY* valid ? */</comment>

        <if_stmt pos:start="199:9" pos:end="259:9"><if pos:start="199:9" pos:end="223:9">if <condition pos:start="199:12" pos:end="199:55">(<expr pos:start="199:13" pos:end="199:54"><call pos:start="199:13" pos:end="199:54"><name pos:start="199:13" pos:end="199:20">unlikely</name><argument_list pos:start="199:21" pos:end="199:54">(<argument pos:start="199:22" pos:end="199:53"><expr pos:start="199:22" pos:end="199:53"><name pos:start="199:22" pos:end="199:37"><name pos:start="199:22" pos:end="199:28">handler</name><operator pos:start="199:29" pos:end="199:30">-&gt;</operator><name pos:start="199:31" pos:end="199:37">handler</name></name> <operator pos:start="199:39" pos:end="199:40">==</operator> <operator pos:start="199:42" pos:end="199:42">&amp;</operator><name pos:start="199:43" pos:end="199:53">gen_invalid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:57" pos:end="223:9">{<block_content pos:start="201:13" pos:end="221:13">

            <if_stmt pos:start="201:13" pos:end="221:13"><if pos:start="201:13" pos:end="211:13">if <condition pos:start="201:16" pos:end="201:35">(<expr pos:start="201:17" pos:end="201:34"><call pos:start="201:17" pos:end="201:34"><name pos:start="201:17" pos:end="201:32">qemu_log_enabled</name><argument_list pos:start="201:33" pos:end="201:34">()</argument_list></call></expr>)</condition> <block pos:start="201:37" pos:end="211:13">{<block_content pos:start="203:17" pos:end="209:82">

                <expr_stmt pos:start="203:17" pos:end="209:82"><expr pos:start="203:17" pos:end="209:81"><call pos:start="203:17" pos:end="209:81"><name pos:start="203:17" pos:end="203:24">qemu_log</name><argument_list pos:start="203:25" pos:end="209:81">(<argument pos:start="203:26" pos:end="205:68"><expr pos:start="203:26" pos:end="205:68"><literal type="string" pos:start="203:26" pos:end="203:55">"invalid/unsupported opcode: "</literal>

                          <literal type="string" pos:start="205:27" pos:end="205:54">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="205:56" pos:end="205:60">ADDRX</name> <literal type="string" pos:start="205:62" pos:end="205:68">" %d\n"</literal></expr></argument>,

                          <argument pos:start="207:27" pos:end="207:42"><expr pos:start="207:27" pos:end="207:42"><call pos:start="207:27" pos:end="207:42"><name pos:start="207:27" pos:end="207:30">opc1</name><argument_list pos:start="207:31" pos:end="207:42">(<argument pos:start="207:32" pos:end="207:41"><expr pos:start="207:32" pos:end="207:41"><name pos:start="207:32" pos:end="207:41"><name pos:start="207:32" pos:end="207:34">ctx</name><operator pos:start="207:35" pos:end="207:35">.</operator><name pos:start="207:36" pos:end="207:41">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="207:45" pos:end="207:60"><expr pos:start="207:45" pos:end="207:60"><call pos:start="207:45" pos:end="207:60"><name pos:start="207:45" pos:end="207:48">opc2</name><argument_list pos:start="207:49" pos:end="207:60">(<argument pos:start="207:50" pos:end="207:59"><expr pos:start="207:50" pos:end="207:59"><name pos:start="207:50" pos:end="207:59"><name pos:start="207:50" pos:end="207:52">ctx</name><operator pos:start="207:53" pos:end="207:53">.</operator><name pos:start="207:54" pos:end="207:59">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="209:27" pos:end="209:42"><expr pos:start="209:27" pos:end="209:42"><call pos:start="209:27" pos:end="209:42"><name pos:start="209:27" pos:end="209:30">opc3</name><argument_list pos:start="209:31" pos:end="209:42">(<argument pos:start="209:32" pos:end="209:41"><expr pos:start="209:32" pos:end="209:41"><name pos:start="209:32" pos:end="209:41"><name pos:start="209:32" pos:end="209:34">ctx</name><operator pos:start="209:35" pos:end="209:35">.</operator><name pos:start="209:36" pos:end="209:41">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="209:45" pos:end="209:54"><expr pos:start="209:45" pos:end="209:54"><name pos:start="209:45" pos:end="209:54"><name pos:start="209:45" pos:end="209:47">ctx</name><operator pos:start="209:48" pos:end="209:48">.</operator><name pos:start="209:49" pos:end="209:54">opcode</name></name></expr></argument>, <argument pos:start="209:57" pos:end="209:67"><expr pos:start="209:57" pos:end="209:67"><name pos:start="209:57" pos:end="209:63"><name pos:start="209:57" pos:end="209:59">ctx</name><operator pos:start="209:60" pos:end="209:60">.</operator><name pos:start="209:61" pos:end="209:63">nip</name></name> <operator pos:start="209:65" pos:end="209:65">-</operator> <literal type="number" pos:start="209:67" pos:end="209:67">4</literal></expr></argument>, <argument pos:start="209:70" pos:end="209:80"><expr pos:start="209:70" pos:end="209:80"><operator pos:start="209:70" pos:end="209:70">(</operator><name pos:start="209:71" pos:end="209:73">int</name><operator pos:start="209:74" pos:end="209:74">)</operator><name pos:start="209:75" pos:end="209:80">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="211:15" pos:end="221:13">else <block pos:start="211:20" pos:end="221:13">{<block_content pos:start="213:17" pos:end="219:79">

                <expr_stmt pos:start="213:17" pos:end="219:79"><expr pos:start="213:17" pos:end="219:78"><call pos:start="213:17" pos:end="219:78"><name pos:start="213:17" pos:end="213:22">printf</name><argument_list pos:start="213:23" pos:end="219:78">(<argument pos:start="213:24" pos:end="215:65"><expr pos:start="213:24" pos:end="215:65"><literal type="string" pos:start="213:24" pos:end="213:53">"invalid/unsupported opcode: "</literal>

                       <literal type="string" pos:start="215:24" pos:end="215:51">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="215:53" pos:end="215:57">ADDRX</name> <literal type="string" pos:start="215:59" pos:end="215:65">" %d\n"</literal></expr></argument>,

                       <argument pos:start="217:24" pos:end="217:39"><expr pos:start="217:24" pos:end="217:39"><call pos:start="217:24" pos:end="217:39"><name pos:start="217:24" pos:end="217:27">opc1</name><argument_list pos:start="217:28" pos:end="217:39">(<argument pos:start="217:29" pos:end="217:38"><expr pos:start="217:29" pos:end="217:38"><name pos:start="217:29" pos:end="217:38"><name pos:start="217:29" pos:end="217:31">ctx</name><operator pos:start="217:32" pos:end="217:32">.</operator><name pos:start="217:33" pos:end="217:38">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="217:42" pos:end="217:57"><expr pos:start="217:42" pos:end="217:57"><call pos:start="217:42" pos:end="217:57"><name pos:start="217:42" pos:end="217:45">opc2</name><argument_list pos:start="217:46" pos:end="217:57">(<argument pos:start="217:47" pos:end="217:56"><expr pos:start="217:47" pos:end="217:56"><name pos:start="217:47" pos:end="217:56"><name pos:start="217:47" pos:end="217:49">ctx</name><operator pos:start="217:50" pos:end="217:50">.</operator><name pos:start="217:51" pos:end="217:56">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="219:24" pos:end="219:39"><expr pos:start="219:24" pos:end="219:39"><call pos:start="219:24" pos:end="219:39"><name pos:start="219:24" pos:end="219:27">opc3</name><argument_list pos:start="219:28" pos:end="219:39">(<argument pos:start="219:29" pos:end="219:38"><expr pos:start="219:29" pos:end="219:38"><name pos:start="219:29" pos:end="219:38"><name pos:start="219:29" pos:end="219:31">ctx</name><operator pos:start="219:32" pos:end="219:32">.</operator><name pos:start="219:33" pos:end="219:38">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="219:42" pos:end="219:51"><expr pos:start="219:42" pos:end="219:51"><name pos:start="219:42" pos:end="219:51"><name pos:start="219:42" pos:end="219:44">ctx</name><operator pos:start="219:45" pos:end="219:45">.</operator><name pos:start="219:46" pos:end="219:51">opcode</name></name></expr></argument>, <argument pos:start="219:54" pos:end="219:64"><expr pos:start="219:54" pos:end="219:64"><name pos:start="219:54" pos:end="219:60"><name pos:start="219:54" pos:end="219:56">ctx</name><operator pos:start="219:57" pos:end="219:57">.</operator><name pos:start="219:58" pos:end="219:60">nip</name></name> <operator pos:start="219:62" pos:end="219:62">-</operator> <literal type="number" pos:start="219:64" pos:end="219:64">4</literal></expr></argument>, <argument pos:start="219:67" pos:end="219:77"><expr pos:start="219:67" pos:end="219:77"><operator pos:start="219:67" pos:end="219:67">(</operator><name pos:start="219:68" pos:end="219:70">int</name><operator pos:start="219:71" pos:end="219:71">)</operator><name pos:start="219:72" pos:end="219:77">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="223:11" pos:end="259:9">else <block pos:start="223:16" pos:end="259:9">{<block_content pos:start="225:13" pos:end="257:13">

            <if_stmt pos:start="225:13" pos:end="257:13"><if pos:start="225:13" pos:end="257:13">if <condition pos:start="225:16" pos:end="225:61">(<expr pos:start="225:17" pos:end="225:60"><call pos:start="225:17" pos:end="225:60"><name pos:start="225:17" pos:end="225:24">unlikely</name><argument_list pos:start="225:25" pos:end="225:60">(<argument pos:start="225:26" pos:end="225:59"><expr pos:start="225:26" pos:end="225:59"><operator pos:start="225:26" pos:end="225:26">(</operator><name pos:start="225:27" pos:end="225:36"><name pos:start="225:27" pos:end="225:29">ctx</name><operator pos:start="225:30" pos:end="225:30">.</operator><name pos:start="225:31" pos:end="225:36">opcode</name></name> <operator pos:start="225:38" pos:end="225:38">&amp;</operator> <name pos:start="225:40" pos:end="225:53"><name pos:start="225:40" pos:end="225:46">handler</name><operator pos:start="225:47" pos:end="225:48">-&gt;</operator><name pos:start="225:49" pos:end="225:53">inval</name></name><operator pos:start="225:54" pos:end="225:54">)</operator> <operator pos:start="225:56" pos:end="225:57">!=</operator> <literal type="number" pos:start="225:59" pos:end="225:59">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:63" pos:end="257:13">{<block_content pos:start="227:17" pos:end="255:22">

                <if_stmt pos:start="227:17" pos:end="251:17"><if pos:start="227:17" pos:end="239:17">if <condition pos:start="227:20" pos:end="227:39">(<expr pos:start="227:21" pos:end="227:38"><call pos:start="227:21" pos:end="227:38"><name pos:start="227:21" pos:end="227:36">qemu_log_enabled</name><argument_list pos:start="227:37" pos:end="227:38">()</argument_list></call></expr>)</condition> <block pos:start="227:41" pos:end="239:17">{<block_content pos:start="229:21" pos:end="237:55">

                    <expr_stmt pos:start="229:21" pos:end="237:55"><expr pos:start="229:21" pos:end="237:54"><call pos:start="229:21" pos:end="237:54"><name pos:start="229:21" pos:end="229:28">qemu_log</name><argument_list pos:start="229:29" pos:end="237:54">(<argument pos:start="229:30" pos:end="231:69"><expr pos:start="229:30" pos:end="231:69"><literal type="string" pos:start="229:30" pos:end="229:62">"invalid bits: %08x for opcode: "</literal>

                              <literal type="string" pos:start="231:31" pos:end="231:58">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="231:60" pos:end="231:64">ADDRX</name> <literal type="string" pos:start="231:66" pos:end="231:69">"\n"</literal></expr></argument>,

                              <argument pos:start="233:31" pos:end="233:57"><expr pos:start="233:31" pos:end="233:57"><name pos:start="233:31" pos:end="233:40"><name pos:start="233:31" pos:end="233:33">ctx</name><operator pos:start="233:34" pos:end="233:34">.</operator><name pos:start="233:35" pos:end="233:40">opcode</name></name> <operator pos:start="233:42" pos:end="233:42">&amp;</operator> <name pos:start="233:44" pos:end="233:57"><name pos:start="233:44" pos:end="233:50">handler</name><operator pos:start="233:51" pos:end="233:52">-&gt;</operator><name pos:start="233:53" pos:end="233:57">inval</name></name></expr></argument>, <argument pos:start="233:60" pos:end="233:75"><expr pos:start="233:60" pos:end="233:75"><call pos:start="233:60" pos:end="233:75"><name pos:start="233:60" pos:end="233:63">opc1</name><argument_list pos:start="233:64" pos:end="233:75">(<argument pos:start="233:65" pos:end="233:74"><expr pos:start="233:65" pos:end="233:74"><name pos:start="233:65" pos:end="233:74"><name pos:start="233:65" pos:end="233:67">ctx</name><operator pos:start="233:68" pos:end="233:68">.</operator><name pos:start="233:69" pos:end="233:74">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="235:31" pos:end="235:46"><expr pos:start="235:31" pos:end="235:46"><call pos:start="235:31" pos:end="235:46"><name pos:start="235:31" pos:end="235:34">opc2</name><argument_list pos:start="235:35" pos:end="235:46">(<argument pos:start="235:36" pos:end="235:45"><expr pos:start="235:36" pos:end="235:45"><name pos:start="235:36" pos:end="235:45"><name pos:start="235:36" pos:end="235:38">ctx</name><operator pos:start="235:39" pos:end="235:39">.</operator><name pos:start="235:40" pos:end="235:45">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="235:49" pos:end="235:64"><expr pos:start="235:49" pos:end="235:64"><call pos:start="235:49" pos:end="235:64"><name pos:start="235:49" pos:end="235:52">opc3</name><argument_list pos:start="235:53" pos:end="235:64">(<argument pos:start="235:54" pos:end="235:63"><expr pos:start="235:54" pos:end="235:63"><name pos:start="235:54" pos:end="235:63"><name pos:start="235:54" pos:end="235:56">ctx</name><operator pos:start="235:57" pos:end="235:57">.</operator><name pos:start="235:58" pos:end="235:63">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="237:31" pos:end="237:40"><expr pos:start="237:31" pos:end="237:40"><name pos:start="237:31" pos:end="237:40"><name pos:start="237:31" pos:end="237:33">ctx</name><operator pos:start="237:34" pos:end="237:34">.</operator><name pos:start="237:35" pos:end="237:40">opcode</name></name></expr></argument>, <argument pos:start="237:43" pos:end="237:53"><expr pos:start="237:43" pos:end="237:53"><name pos:start="237:43" pos:end="237:49"><name pos:start="237:43" pos:end="237:45">ctx</name><operator pos:start="237:46" pos:end="237:46">.</operator><name pos:start="237:47" pos:end="237:49">nip</name></name> <operator pos:start="237:51" pos:end="237:51">-</operator> <literal type="number" pos:start="237:53" pos:end="237:53">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="239:19" pos:end="251:17">else <block pos:start="239:24" pos:end="251:17">{<block_content pos:start="241:21" pos:end="249:52">

                    <expr_stmt pos:start="241:21" pos:end="249:52"><expr pos:start="241:21" pos:end="249:51"><call pos:start="241:21" pos:end="249:51"><name pos:start="241:21" pos:end="241:26">printf</name><argument_list pos:start="241:27" pos:end="249:51">(<argument pos:start="241:28" pos:end="243:66"><expr pos:start="241:28" pos:end="243:66"><literal type="string" pos:start="241:28" pos:end="241:60">"invalid bits: %08x for opcode: "</literal>

                           <literal type="string" pos:start="243:28" pos:end="243:55">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="243:57" pos:end="243:61">ADDRX</name> <literal type="string" pos:start="243:63" pos:end="243:66">"\n"</literal></expr></argument>,

                           <argument pos:start="245:28" pos:end="245:54"><expr pos:start="245:28" pos:end="245:54"><name pos:start="245:28" pos:end="245:37"><name pos:start="245:28" pos:end="245:30">ctx</name><operator pos:start="245:31" pos:end="245:31">.</operator><name pos:start="245:32" pos:end="245:37">opcode</name></name> <operator pos:start="245:39" pos:end="245:39">&amp;</operator> <name pos:start="245:41" pos:end="245:54"><name pos:start="245:41" pos:end="245:47">handler</name><operator pos:start="245:48" pos:end="245:49">-&gt;</operator><name pos:start="245:50" pos:end="245:54">inval</name></name></expr></argument>, <argument pos:start="245:57" pos:end="245:72"><expr pos:start="245:57" pos:end="245:72"><call pos:start="245:57" pos:end="245:72"><name pos:start="245:57" pos:end="245:60">opc1</name><argument_list pos:start="245:61" pos:end="245:72">(<argument pos:start="245:62" pos:end="245:71"><expr pos:start="245:62" pos:end="245:71"><name pos:start="245:62" pos:end="245:71"><name pos:start="245:62" pos:end="245:64">ctx</name><operator pos:start="245:65" pos:end="245:65">.</operator><name pos:start="245:66" pos:end="245:71">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="247:28" pos:end="247:43"><expr pos:start="247:28" pos:end="247:43"><call pos:start="247:28" pos:end="247:43"><name pos:start="247:28" pos:end="247:31">opc2</name><argument_list pos:start="247:32" pos:end="247:43">(<argument pos:start="247:33" pos:end="247:42"><expr pos:start="247:33" pos:end="247:42"><name pos:start="247:33" pos:end="247:42"><name pos:start="247:33" pos:end="247:35">ctx</name><operator pos:start="247:36" pos:end="247:36">.</operator><name pos:start="247:37" pos:end="247:42">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="247:46" pos:end="247:61"><expr pos:start="247:46" pos:end="247:61"><call pos:start="247:46" pos:end="247:61"><name pos:start="247:46" pos:end="247:49">opc3</name><argument_list pos:start="247:50" pos:end="247:61">(<argument pos:start="247:51" pos:end="247:60"><expr pos:start="247:51" pos:end="247:60"><name pos:start="247:51" pos:end="247:60"><name pos:start="247:51" pos:end="247:53">ctx</name><operator pos:start="247:54" pos:end="247:54">.</operator><name pos:start="247:55" pos:end="247:60">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="249:28" pos:end="249:37"><expr pos:start="249:28" pos:end="249:37"><name pos:start="249:28" pos:end="249:37"><name pos:start="249:28" pos:end="249:30">ctx</name><operator pos:start="249:31" pos:end="249:31">.</operator><name pos:start="249:32" pos:end="249:37">opcode</name></name></expr></argument>, <argument pos:start="249:40" pos:end="249:50"><expr pos:start="249:40" pos:end="249:50"><name pos:start="249:40" pos:end="249:46"><name pos:start="249:40" pos:end="249:42">ctx</name><operator pos:start="249:43" pos:end="249:43">.</operator><name pos:start="249:44" pos:end="249:46">nip</name></name> <operator pos:start="249:48" pos:end="249:48">-</operator> <literal type="number" pos:start="249:50" pos:end="249:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:68"><expr pos:start="253:17" pos:end="253:67"><call pos:start="253:17" pos:end="253:67"><name pos:start="253:17" pos:end="253:35">gen_inval_exception</name><argument_list pos:start="253:36" pos:end="253:67">(<argument pos:start="253:37" pos:end="253:40"><expr pos:start="253:37" pos:end="253:40"><name pos:start="253:37" pos:end="253:40">ctxp</name></expr></argument>, <argument pos:start="253:43" pos:end="253:66"><expr pos:start="253:43" pos:end="253:66"><name pos:start="253:43" pos:end="253:66">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="255:17" pos:end="255:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="261:9" pos:end="264:0"><expr pos:start="261:9" pos:end="261:35"><operator pos:start="261:9" pos:end="261:9">(</operator><operator pos:start="261:10" pos:end="261:10">*</operator><operator pos:start="261:11" pos:end="261:11">(</operator><name pos:start="261:12" pos:end="261:27"><name pos:start="261:12" pos:end="261:18">handler</name><operator pos:start="261:19" pos:end="261:20">-&gt;</operator><name pos:start="261:21" pos:end="261:27">handler</name></name><operator pos:start="261:28" pos:end="261:28">)</operator><operator pos:start="261:29" pos:end="261:29">)</operator><operator pos:start="261:30" pos:end="261:30">(</operator><operator pos:start="261:31" pos:end="261:31">&amp;</operator><name pos:start="261:32" pos:end="261:34">ctx</name><operator pos:start="261:35" pos:end="261:35">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="263:1" pos:end="263:30">#<cpp:directive pos:start="263:2" pos:end="263:3">if</cpp:directive> <expr pos:start="263:5" pos:end="263:30"><call pos:start="263:5" pos:end="263:30"><name pos:start="263:5" pos:end="263:11">defined</name><argument_list pos:start="263:12" pos:end="263:30">(<argument pos:start="263:13" pos:end="263:29"><expr pos:start="263:13" pos:end="263:29"><name pos:start="263:13" pos:end="263:29">DO_PPC_STATISTICS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="265:9" pos:end="268:0"><expr pos:start="265:9" pos:end="265:24"><name pos:start="265:9" pos:end="265:22"><name pos:start="265:9" pos:end="265:15">handler</name><operator pos:start="265:16" pos:end="265:17">-&gt;</operator><name pos:start="265:18" pos:end="265:22">count</name></name><operator pos:start="265:23" pos:end="265:24">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="267:1" pos:end="267:6">#<cpp:directive pos:start="267:2" pos:end="267:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="269:9" pos:end="269:41">/* Check trace mode exceptions */</comment>

        <if_stmt pos:start="271:9" pos:end="300:0"><if pos:start="271:9" pos:end="283:9">if <condition pos:start="271:12" pos:end="279:59">(<expr pos:start="271:13" pos:end="279:58"><call pos:start="271:13" pos:end="279:58"><name pos:start="271:13" pos:end="271:20">unlikely</name><argument_list pos:start="271:21" pos:end="279:58">(<argument pos:start="271:22" pos:end="279:57"><expr pos:start="271:22" pos:end="279:57"><name pos:start="271:22" pos:end="271:43"><name pos:start="271:22" pos:end="271:24">ctx</name><operator pos:start="271:25" pos:end="271:25">.</operator><name pos:start="271:26" pos:end="271:43">singlestep_enabled</name></name> <operator pos:start="271:45" pos:end="271:45">&amp;</operator> <name pos:start="271:47" pos:end="271:61">CPU_SINGLE_STEP</name> <operator pos:start="271:63" pos:end="271:64">&amp;&amp;</operator>

                     <operator pos:start="273:22" pos:end="273:22">(</operator><name pos:start="273:23" pos:end="273:29"><name pos:start="273:23" pos:end="273:25">ctx</name><operator pos:start="273:26" pos:end="273:26">.</operator><name pos:start="273:27" pos:end="273:29">nip</name></name> <operator pos:start="273:31" pos:end="273:32">&lt;=</operator> <literal type="number" pos:start="273:34" pos:end="273:38">0x100</literal> <operator pos:start="273:40" pos:end="273:41">||</operator> <name pos:start="273:43" pos:end="273:49"><name pos:start="273:43" pos:end="273:45">ctx</name><operator pos:start="273:46" pos:end="273:46">.</operator><name pos:start="273:47" pos:end="273:49">nip</name></name> <operator pos:start="273:51" pos:end="273:51">&gt;</operator> <literal type="number" pos:start="273:53" pos:end="273:57">0xF00</literal><operator pos:start="273:58" pos:end="273:58">)</operator> <operator pos:start="273:60" pos:end="273:61">&amp;&amp;</operator>

                     <name pos:start="275:22" pos:end="275:34"><name pos:start="275:22" pos:end="275:24">ctx</name><operator pos:start="275:25" pos:end="275:25">.</operator><name pos:start="275:26" pos:end="275:34">exception</name></name> <operator pos:start="275:36" pos:end="275:37">!=</operator> <name pos:start="275:39" pos:end="275:53">POWERPC_SYSCALL</name> <operator pos:start="275:55" pos:end="275:56">&amp;&amp;</operator>

                     <name pos:start="277:22" pos:end="277:34"><name pos:start="277:22" pos:end="277:24">ctx</name><operator pos:start="277:25" pos:end="277:25">.</operator><name pos:start="277:26" pos:end="277:34">exception</name></name> <operator pos:start="277:36" pos:end="277:37">!=</operator> <name pos:start="277:39" pos:end="277:55">POWERPC_EXCP_TRAP</name> <operator pos:start="277:57" pos:end="277:58">&amp;&amp;</operator>

                     <name pos:start="279:22" pos:end="279:34"><name pos:start="279:22" pos:end="279:24">ctx</name><operator pos:start="279:25" pos:end="279:25">.</operator><name pos:start="279:26" pos:end="279:34">exception</name></name> <operator pos:start="279:36" pos:end="279:37">!=</operator> <name pos:start="279:39" pos:end="279:57">POWERPC_EXCP_BRANCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="279:61" pos:end="283:9">{<block_content pos:start="281:13" pos:end="281:52">

            <expr_stmt pos:start="281:13" pos:end="281:52"><expr pos:start="281:13" pos:end="281:51"><call pos:start="281:13" pos:end="281:51"><name pos:start="281:13" pos:end="281:25">gen_exception</name><argument_list pos:start="281:26" pos:end="281:51">(<argument pos:start="281:27" pos:end="281:30"><expr pos:start="281:27" pos:end="281:30"><name pos:start="281:27" pos:end="281:30">ctxp</name></expr></argument>, <argument pos:start="281:33" pos:end="281:50"><expr pos:start="281:33" pos:end="281:50"><name pos:start="281:33" pos:end="281:50">POWERPC_EXCP_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="283:11" pos:end="300:0">else if <condition pos:start="283:19" pos:end="287:52">(<expr pos:start="283:20" pos:end="287:51"><call pos:start="283:20" pos:end="287:51"><name pos:start="283:20" pos:end="283:27">unlikely</name><argument_list pos:start="283:28" pos:end="287:51">(<argument pos:start="283:29" pos:end="287:50"><expr pos:start="283:29" pos:end="287:50"><operator pos:start="283:29" pos:end="283:29">(</operator><operator pos:start="283:30" pos:end="283:30">(</operator><name pos:start="283:31" pos:end="283:37"><name pos:start="283:31" pos:end="283:33">ctx</name><operator pos:start="283:34" pos:end="283:34">.</operator><name pos:start="283:35" pos:end="283:37">nip</name></name> <operator pos:start="283:39" pos:end="283:39">&amp;</operator> <operator pos:start="283:41" pos:end="283:41">(</operator><name pos:start="283:42" pos:end="283:57">TARGET_PAGE_SIZE</name> <operator pos:start="283:59" pos:end="283:59">-</operator> <literal type="number" pos:start="283:61" pos:end="283:61">1</literal><operator pos:start="283:62" pos:end="283:62">)</operator><operator pos:start="283:63" pos:end="283:63">)</operator> <operator pos:start="283:65" pos:end="283:66">==</operator> <literal type="number" pos:start="283:68" pos:end="283:68">0</literal><operator pos:start="283:69" pos:end="283:69">)</operator> <operator pos:start="283:71" pos:end="283:72">||</operator>

                            <operator pos:start="285:29" pos:end="285:29">(</operator><name pos:start="285:30" pos:end="285:52"><name pos:start="285:30" pos:end="285:32">env</name><operator pos:start="285:33" pos:end="285:34">-&gt;</operator><name pos:start="285:35" pos:end="285:52">singlestep_enabled</name></name><operator pos:start="285:53" pos:end="285:53">)</operator> <operator pos:start="285:55" pos:end="285:56">||</operator>

                            <name pos:start="287:29" pos:end="287:37">num_insns</name> <operator pos:start="287:39" pos:end="287:40">&gt;=</operator> <name pos:start="287:42" pos:end="287:50">max_insns</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="287:54" pos:end="300:0">{<block_content pos:start="295:13" pos:end="295:18">

            <comment type="block" pos:start="289:13" pos:end="293:15">/* if we reach a page boundary or are single stepping, stop

             * generation

             */</comment>

            <break pos:start="295:13" pos:end="295:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="299:1" pos:end="299:28">#<cpp:directive pos:start="299:2" pos:end="299:3">if</cpp:directive> <expr pos:start="299:5" pos:end="299:28"><call pos:start="299:5" pos:end="299:28"><name pos:start="299:5" pos:end="299:11">defined</name> <argument_list pos:start="299:13" pos:end="299:28">(<argument pos:start="299:14" pos:end="299:27"><expr pos:start="299:14" pos:end="299:27"><name pos:start="299:14" pos:end="299:27">DO_SINGLE_STEP</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <break pos:start="301:9" pos:end="304:0">break;</break>

<cpp:endif pos:start="303:1" pos:end="303:6">#<cpp:directive pos:start="303:2" pos:end="303:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></while>

    <if_stmt pos:start="307:5" pos:end="309:21"><if pos:start="307:5" pos:end="309:21">if <condition pos:start="307:8" pos:end="307:32">(<expr pos:start="307:9" pos:end="307:31"><name pos:start="307:9" pos:end="307:18"><name pos:start="307:9" pos:end="307:10">tb</name><operator pos:start="307:11" pos:end="307:12">-&gt;</operator><name pos:start="307:13" pos:end="307:18">cflags</name></name> <operator pos:start="307:20" pos:end="307:20">&amp;</operator> <name pos:start="307:22" pos:end="307:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="309:9" pos:end="309:21"><block_content pos:start="309:9" pos:end="309:21">

        <expr_stmt pos:start="309:9" pos:end="309:21"><expr pos:start="309:9" pos:end="309:20"><call pos:start="309:9" pos:end="309:20"><name pos:start="309:9" pos:end="309:18">gen_io_end</name><argument_list pos:start="309:19" pos:end="309:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="311:5" pos:end="327:5"><if pos:start="311:5" pos:end="315:5">if <condition pos:start="311:8" pos:end="311:43">(<expr pos:start="311:9" pos:end="311:42"><name pos:start="311:9" pos:end="311:21"><name pos:start="311:9" pos:end="311:11">ctx</name><operator pos:start="311:12" pos:end="311:12">.</operator><name pos:start="311:13" pos:end="311:21">exception</name></name> <operator pos:start="311:23" pos:end="311:24">==</operator> <name pos:start="311:26" pos:end="311:42">POWERPC_EXCP_NONE</name></expr>)</condition> <block pos:start="311:45" pos:end="315:5">{<block_content pos:start="313:9" pos:end="313:38">

        <expr_stmt pos:start="313:9" pos:end="313:38"><expr pos:start="313:9" pos:end="313:37"><call pos:start="313:9" pos:end="313:37"><name pos:start="313:9" pos:end="313:19">gen_goto_tb</name><argument_list pos:start="313:20" pos:end="313:37">(<argument pos:start="313:21" pos:end="313:24"><expr pos:start="313:21" pos:end="313:24"><operator pos:start="313:21" pos:end="313:21">&amp;</operator><name pos:start="313:22" pos:end="313:24">ctx</name></expr></argument>, <argument pos:start="313:27" pos:end="313:27"><expr pos:start="313:27" pos:end="313:27"><literal type="number" pos:start="313:27" pos:end="313:27">0</literal></expr></argument>, <argument pos:start="313:30" pos:end="313:36"><expr pos:start="313:30" pos:end="313:36"><name pos:start="313:30" pos:end="313:36"><name pos:start="313:30" pos:end="313:32">ctx</name><operator pos:start="313:33" pos:end="313:33">.</operator><name pos:start="313:34" pos:end="313:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="315:7" pos:end="327:5">else if <condition pos:start="315:15" pos:end="315:52">(<expr pos:start="315:16" pos:end="315:51"><name pos:start="315:16" pos:end="315:28"><name pos:start="315:16" pos:end="315:18">ctx</name><operator pos:start="315:19" pos:end="315:19">.</operator><name pos:start="315:20" pos:end="315:28">exception</name></name> <operator pos:start="315:30" pos:end="315:31">!=</operator> <name pos:start="315:33" pos:end="315:51">POWERPC_EXCP_BRANCH</name></expr>)</condition> <block pos:start="315:54" pos:end="327:5">{<block_content pos:start="317:9" pos:end="325:27">

        <if_stmt pos:start="317:9" pos:end="321:9"><if pos:start="317:9" pos:end="321:9">if <condition pos:start="317:12" pos:end="317:46">(<expr pos:start="317:13" pos:end="317:45"><call pos:start="317:13" pos:end="317:45"><name pos:start="317:13" pos:end="317:20">unlikely</name><argument_list pos:start="317:21" pos:end="317:45">(<argument pos:start="317:22" pos:end="317:44"><expr pos:start="317:22" pos:end="317:44"><name pos:start="317:22" pos:end="317:44"><name pos:start="317:22" pos:end="317:24">env</name><operator pos:start="317:25" pos:end="317:26">-&gt;</operator><name pos:start="317:27" pos:end="317:44">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="317:48" pos:end="321:9">{<block_content pos:start="319:13" pos:end="319:38">

            <expr_stmt pos:start="319:13" pos:end="319:38"><expr pos:start="319:13" pos:end="319:37"><call pos:start="319:13" pos:end="319:37"><name pos:start="319:13" pos:end="319:31">gen_debug_exception</name><argument_list pos:start="319:32" pos:end="319:37">(<argument pos:start="319:33" pos:end="319:36"><expr pos:start="319:33" pos:end="319:36"><name pos:start="319:33" pos:end="319:36">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="323:9" pos:end="323:45">/* Generate the return instruction */</comment>

        <expr_stmt pos:start="325:9" pos:end="325:27"><expr pos:start="325:9" pos:end="325:26"><call pos:start="325:9" pos:end="325:26"><name pos:start="325:9" pos:end="325:23">tcg_gen_exit_tb</name><argument_list pos:start="325:24" pos:end="325:26">(<argument pos:start="325:25" pos:end="325:25"><expr pos:start="325:25" pos:end="325:25"><literal type="number" pos:start="325:25" pos:end="325:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="329:5" pos:end="329:34"><expr pos:start="329:5" pos:end="329:33"><call pos:start="329:5" pos:end="329:33"><name pos:start="329:5" pos:end="329:18">gen_icount_end</name><argument_list pos:start="329:19" pos:end="329:33">(<argument pos:start="329:20" pos:end="329:21"><expr pos:start="329:20" pos:end="329:21"><name pos:start="329:20" pos:end="329:21">tb</name></expr></argument>, <argument pos:start="329:24" pos:end="329:32"><expr pos:start="329:24" pos:end="329:32"><name pos:start="329:24" pos:end="329:32">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:32"><expr pos:start="331:5" pos:end="331:31"><operator pos:start="331:5" pos:end="331:5">*</operator><name pos:start="331:6" pos:end="331:16">gen_opc_ptr</name> <operator pos:start="331:18" pos:end="331:18">=</operator> <name pos:start="331:20" pos:end="331:31">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="333:5" pos:end="352:0"><if pos:start="333:5" pos:end="343:5">if <condition pos:start="333:8" pos:end="333:28">(<expr pos:start="333:9" pos:end="333:27"><call pos:start="333:9" pos:end="333:27"><name pos:start="333:9" pos:end="333:16">unlikely</name><argument_list pos:start="333:17" pos:end="333:27">(<argument pos:start="333:18" pos:end="333:26"><expr pos:start="333:18" pos:end="333:26"><name pos:start="333:18" pos:end="333:26">search_pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="333:30" pos:end="343:5">{<block_content pos:start="335:9" pos:end="341:42">

        <expr_stmt pos:start="335:9" pos:end="335:38"><expr pos:start="335:9" pos:end="335:37"><name pos:start="335:9" pos:end="335:9">j</name> <operator pos:start="335:11" pos:end="335:11">=</operator> <name pos:start="335:13" pos:end="335:23">gen_opc_ptr</name> <operator pos:start="335:25" pos:end="335:25">-</operator> <name pos:start="335:27" pos:end="335:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:13"><expr pos:start="337:9" pos:end="337:12"><name pos:start="337:9" pos:end="337:10">lj</name><operator pos:start="337:11" pos:end="337:12">++</operator></expr>;</expr_stmt>

        <while pos:start="339:9" pos:end="341:42">while <condition pos:start="339:15" pos:end="339:23">(<expr pos:start="339:16" pos:end="339:22"><name pos:start="339:16" pos:end="339:17">lj</name> <operator pos:start="339:19" pos:end="339:20">&lt;=</operator> <name pos:start="339:22" pos:end="339:22">j</name></expr>)</condition><block type="pseudo" pos:start="341:13" pos:end="341:42"><block_content pos:start="341:13" pos:end="341:42">

            <expr_stmt pos:start="341:13" pos:end="341:42"><expr pos:start="341:13" pos:end="341:41"><name pos:start="341:13" pos:end="341:37"><name pos:start="341:13" pos:end="341:31">gen_opc_instr_start</name><index pos:start="341:32" pos:end="341:37">[<expr pos:start="341:33" pos:end="341:36"><name pos:start="341:33" pos:end="341:34">lj</name><operator pos:start="341:35" pos:end="341:36">++</operator></expr>]</index></name> <operator pos:start="341:39" pos:end="341:39">=</operator> <literal type="number" pos:start="341:41" pos:end="341:41">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="343:7" pos:end="352:0">else <block pos:start="343:12" pos:end="352:0">{<block_content pos:start="345:9" pos:end="347:31">

        <expr_stmt pos:start="345:9" pos:end="345:38"><expr pos:start="345:9" pos:end="345:37"><name pos:start="345:9" pos:end="345:16"><name pos:start="345:9" pos:end="345:10">tb</name><operator pos:start="345:11" pos:end="345:12">-&gt;</operator><name pos:start="345:13" pos:end="345:16">size</name></name> <operator pos:start="345:18" pos:end="345:18">=</operator> <name pos:start="345:20" pos:end="345:26"><name pos:start="345:20" pos:end="345:22">ctx</name><operator pos:start="345:23" pos:end="345:23">.</operator><name pos:start="345:24" pos:end="345:26">nip</name></name> <operator pos:start="345:28" pos:end="345:28">-</operator> <name pos:start="345:30" pos:end="345:37">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:31"><expr pos:start="347:9" pos:end="347:30"><name pos:start="347:9" pos:end="347:18"><name pos:start="347:9" pos:end="347:10">tb</name><operator pos:start="347:11" pos:end="347:12">-&gt;</operator><name pos:start="347:13" pos:end="347:18">icount</name></name> <operator pos:start="347:20" pos:end="347:20">=</operator> <name pos:start="347:22" pos:end="347:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="351:1" pos:end="351:24">#<cpp:directive pos:start="351:2" pos:end="351:3">if</cpp:directive> <expr pos:start="351:5" pos:end="351:24"><call pos:start="351:5" pos:end="351:24"><name pos:start="351:5" pos:end="351:11">defined</name><argument_list pos:start="351:12" pos:end="351:24">(<argument pos:start="351:13" pos:end="351:23"><expr pos:start="351:13" pos:end="351:23"><name pos:start="351:13" pos:end="351:23">DEBUG_DISAS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="353:5" pos:end="353:82"><expr pos:start="353:5" pos:end="353:81"><call pos:start="353:5" pos:end="353:81"><name pos:start="353:5" pos:end="353:17">qemu_log_mask</name><argument_list pos:start="353:18" pos:end="353:81">(<argument pos:start="353:19" pos:end="353:32"><expr pos:start="353:19" pos:end="353:32"><name pos:start="353:19" pos:end="353:32">CPU_LOG_TB_CPU</name></expr></argument>, <argument pos:start="353:35" pos:end="353:65"><expr pos:start="353:35" pos:end="353:65"><literal type="string" pos:start="353:35" pos:end="353:65">"---------------- excp: %04x\n"</literal></expr></argument>, <argument pos:start="353:68" pos:end="353:80"><expr pos:start="353:68" pos:end="353:80"><name pos:start="353:68" pos:end="353:80"><name pos:start="353:68" pos:end="353:70">ctx</name><operator pos:start="353:71" pos:end="353:71">.</operator><name pos:start="353:72" pos:end="353:80">exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:47"><expr pos:start="355:5" pos:end="355:46"><call pos:start="355:5" pos:end="355:46"><name pos:start="355:5" pos:end="355:22">log_cpu_state_mask</name><argument_list pos:start="355:23" pos:end="355:46">(<argument pos:start="355:24" pos:end="355:37"><expr pos:start="355:24" pos:end="355:37"><name pos:start="355:24" pos:end="355:37">CPU_LOG_TB_CPU</name></expr></argument>, <argument pos:start="355:40" pos:end="355:42"><expr pos:start="355:40" pos:end="355:42"><name pos:start="355:40" pos:end="355:42">env</name></expr></argument>, <argument pos:start="355:45" pos:end="355:45"><expr pos:start="355:45" pos:end="355:45"><literal type="number" pos:start="355:45" pos:end="355:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="357:5" pos:end="374:0"><if pos:start="357:5" pos:end="374:0">if <condition pos:start="357:8" pos:end="357:46">(<expr pos:start="357:9" pos:end="357:45"><call pos:start="357:9" pos:end="357:45"><name pos:start="357:9" pos:end="357:26">qemu_loglevel_mask</name><argument_list pos:start="357:27" pos:end="357:45">(<argument pos:start="357:28" pos:end="357:44"><expr pos:start="357:28" pos:end="357:44"><name pos:start="357:28" pos:end="357:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="357:48" pos:end="374:0">{<block_content pos:start="359:9" pos:end="369:23">

        <decl_stmt pos:start="359:9" pos:end="359:18"><decl pos:start="359:9" pos:end="359:17"><type pos:start="359:9" pos:end="359:11"><name pos:start="359:9" pos:end="359:11">int</name></type> <name pos:start="359:13" pos:end="359:17">flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="361:9" pos:end="361:30"><expr pos:start="361:9" pos:end="361:29"><name pos:start="361:9" pos:end="361:13">flags</name> <operator pos:start="361:15" pos:end="361:15">=</operator> <name pos:start="361:17" pos:end="361:29"><name pos:start="361:17" pos:end="361:19">env</name><operator pos:start="361:20" pos:end="361:21">-&gt;</operator><name pos:start="361:22" pos:end="361:29">bfd_mach</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:35"><expr pos:start="363:9" pos:end="363:34"><name pos:start="363:9" pos:end="363:13">flags</name> <operator pos:start="363:15" pos:end="363:16">|=</operator> <name pos:start="363:18" pos:end="363:28"><name pos:start="363:18" pos:end="363:20">ctx</name><operator pos:start="363:21" pos:end="363:21">.</operator><name pos:start="363:22" pos:end="363:28">le_mode</name></name> <operator pos:start="363:30" pos:end="363:31">&lt;&lt;</operator> <literal type="number" pos:start="363:33" pos:end="363:34">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:54"><expr pos:start="365:9" pos:end="365:53"><call pos:start="365:9" pos:end="365:53"><name pos:start="365:9" pos:end="365:16">qemu_log</name><argument_list pos:start="365:17" pos:end="365:53">(<argument pos:start="365:18" pos:end="365:27"><expr pos:start="365:18" pos:end="365:27"><literal type="string" pos:start="365:18" pos:end="365:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="365:30" pos:end="365:52"><expr pos:start="365:30" pos:end="365:52"><call pos:start="365:30" pos:end="365:52"><name pos:start="365:30" pos:end="365:42">lookup_symbol</name><argument_list pos:start="365:43" pos:end="365:52">(<argument pos:start="365:44" pos:end="365:51"><expr pos:start="365:44" pos:end="365:51"><name pos:start="365:44" pos:end="365:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:62"><expr pos:start="367:9" pos:end="367:61"><call pos:start="367:9" pos:end="367:61"><name pos:start="367:9" pos:end="367:24">log_target_disas</name><argument_list pos:start="367:25" pos:end="367:61">(<argument pos:start="367:26" pos:end="367:33"><expr pos:start="367:26" pos:end="367:33"><name pos:start="367:26" pos:end="367:33">pc_start</name></expr></argument>, <argument pos:start="367:36" pos:end="367:53"><expr pos:start="367:36" pos:end="367:53"><name pos:start="367:36" pos:end="367:42"><name pos:start="367:36" pos:end="367:38">ctx</name><operator pos:start="367:39" pos:end="367:39">.</operator><name pos:start="367:40" pos:end="367:42">nip</name></name> <operator pos:start="367:44" pos:end="367:44">-</operator> <name pos:start="367:46" pos:end="367:53">pc_start</name></expr></argument>, <argument pos:start="367:56" pos:end="367:60"><expr pos:start="367:56" pos:end="367:60"><name pos:start="367:56" pos:end="367:60">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:23"><expr pos:start="369:9" pos:end="369:22"><call pos:start="369:9" pos:end="369:22"><name pos:start="369:9" pos:end="369:16">qemu_log</name><argument_list pos:start="369:17" pos:end="369:22">(<argument pos:start="369:18" pos:end="369:21"><expr pos:start="369:18" pos:end="369:21"><literal type="string" pos:start="369:18" pos:end="369:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="373:1" pos:end="373:6">#<cpp:directive pos:start="373:2" pos:end="373:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
