<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15925.c" pos:tabs="8"><function pos:start="1:1" pos:end="355:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">s390_init</name><parameter_list pos:start="1:22" pos:end="1:48">(<parameter pos:start="1:23" pos:end="1:47"><decl pos:start="1:23" pos:end="1:47"><type pos:start="1:23" pos:end="1:43"><name pos:start="1:23" pos:end="1:41">QEMUMachineInitArgs</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="355:1">{<block_content pos:start="5:5" pos:end="353:5">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:26">my_ram_size</name> <init pos:start="5:28" pos:end="5:43">= <expr pos:start="5:30" pos:end="5:43"><name pos:start="5:30" pos:end="5:43"><name pos:start="5:30" pos:end="5:33">args</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:53">= <expr pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:37">args</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:55">= <expr pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:38">args</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">CPUS390XState</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">env</name> <init pos:start="15:24" pos:end="15:29">= <expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">sysmem</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:44">get_system_memory</name><argument_list pos:start="17:45" pos:end="17:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">ram</name> <init pos:start="19:23" pos:end="19:46">= <expr pos:start="19:25" pos:end="19:46"><call pos:start="19:25" pos:end="19:46"><name pos:start="19:25" pos:end="19:29">g_new</name><argument_list pos:start="19:30" pos:end="19:46">(<argument pos:start="19:31" pos:end="19:42"><expr pos:start="19:31" pos:end="19:42"><name pos:start="19:31" pos:end="19:42">MemoryRegion</name></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">ram_addr_t</name></type> <name pos:start="21:16" pos:end="21:26">kernel_size</name> <init pos:start="21:28" pos:end="21:30">= <expr pos:start="21:30" pos:end="21:30"><literal type="number" pos:start="21:30" pos:end="21:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:28">initrd_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:14">ram_addr_t</name></type> <name pos:start="25:16" pos:end="25:26">initrd_size</name> <init pos:start="25:28" pos:end="25:30">= <expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:13">shift</name> <init pos:start="27:15" pos:end="27:17">= <expr pos:start="27:17" pos:end="27:17"><literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:11">uint8_t</name> <modifier pos:start="29:13" pos:end="29:13">*</modifier></type><name pos:start="29:14" pos:end="29:25">storage_keys</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:8">void</name> <modifier pos:start="31:10" pos:end="31:10">*</modifier></type><name pos:start="31:11" pos:end="31:23">virtio_region</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:29"><decl pos:start="33:5" pos:end="33:28"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:10">hwaddr</name></type> <name pos:start="33:12" pos:end="33:28">virtio_region_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:31"><decl pos:start="35:5" pos:end="35:30"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:10">hwaddr</name></type> <name pos:start="35:12" pos:end="35:30">virtio_region_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:10"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="41:5" pos:end="43:58">/* s390x ram size detection needs a 16bit multiplier + an increment. So

       guests &gt; 64GB can be specified in 2MB steps etc. */</comment>

    <while pos:start="45:5" pos:end="49:5">while <condition pos:start="45:11" pos:end="45:49">(<expr pos:start="45:12" pos:end="45:48"><operator pos:start="45:12" pos:end="45:12">(</operator><name pos:start="45:13" pos:end="45:23">my_ram_size</name> <operator pos:start="45:25" pos:end="45:26">&gt;&gt;</operator> <operator pos:start="45:28" pos:end="45:28">(</operator><literal type="number" pos:start="45:29" pos:end="45:32">20</literal> <operator pos:start="45:32" pos:end="45:32">+</operator> <name pos:start="45:34" pos:end="45:38">shift</name><operator pos:start="45:39" pos:end="45:39">)</operator><operator pos:start="45:40" pos:end="45:40">)</operator> <operator pos:start="45:42" pos:end="45:42">&gt;</operator> <literal type="number" pos:start="45:44" pos:end="45:48">65535</literal></expr>)</condition> <block pos:start="45:51" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:16">

        <expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:13">shift</name><operator pos:start="47:14" pos:end="47:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="51:5" pos:end="51:62"><expr pos:start="51:5" pos:end="51:61"><name pos:start="51:5" pos:end="51:15">my_ram_size</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:29">my_ram_size</name> <operator pos:start="51:31" pos:end="51:32">&gt;&gt;</operator> <operator pos:start="51:34" pos:end="51:34">(</operator><literal type="number" pos:start="51:35" pos:end="51:38">20</literal> <operator pos:start="51:38" pos:end="51:38">+</operator> <name pos:start="51:40" pos:end="51:44">shift</name><operator pos:start="51:45" pos:end="51:45">)</operator> <operator pos:start="51:47" pos:end="51:48">&lt;&lt;</operator> <operator pos:start="51:50" pos:end="51:50">(</operator><literal type="number" pos:start="51:51" pos:end="51:54">20</literal> <operator pos:start="51:54" pos:end="51:54">+</operator> <name pos:start="51:56" pos:end="51:60">shift</name><operator pos:start="51:61" pos:end="51:61">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:71">/* lets propagate the changed ram size into the global variable. */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:27"><expr pos:start="57:5" pos:end="57:26"><name pos:start="57:5" pos:end="57:12">ram_size</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:26">my_ram_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:19">/* get a BUS */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:50"><expr pos:start="63:5" pos:end="63:49"><name pos:start="63:5" pos:end="63:12">s390_bus</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:49"><name pos:start="63:16" pos:end="63:35">s390_virtio_bus_init</name><argument_list pos:start="63:36" pos:end="63:49">(<argument pos:start="63:37" pos:end="63:48"><expr pos:start="63:37" pos:end="63:48"><operator pos:start="63:37" pos:end="63:37">&amp;</operator><name pos:start="63:38" pos:end="63:48">my_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:21"><expr pos:start="65:5" pos:end="65:20"><call pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:18">s390_sclp_init</name><argument_list pos:start="65:19" pos:end="65:20">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:57"><expr pos:start="71:5" pos:end="71:56"><call pos:start="71:5" pos:end="71:56"><name pos:start="71:5" pos:end="71:26">memory_region_init_ram</name><argument_list pos:start="71:27" pos:end="71:56">(<argument pos:start="71:28" pos:end="71:30"><expr pos:start="71:28" pos:end="71:30"><name pos:start="71:28" pos:end="71:30">ram</name></expr></argument>, <argument pos:start="71:33" pos:end="71:42"><expr pos:start="71:33" pos:end="71:42"><literal type="string" pos:start="71:33" pos:end="71:42">"s390.ram"</literal></expr></argument>, <argument pos:start="71:45" pos:end="71:55"><expr pos:start="71:45" pos:end="71:55"><name pos:start="71:45" pos:end="71:55">my_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:37"><expr pos:start="73:5" pos:end="73:36"><call pos:start="73:5" pos:end="73:36"><name pos:start="73:5" pos:end="73:31">vmstate_register_ram_global</name><argument_list pos:start="73:32" pos:end="73:36">(<argument pos:start="73:33" pos:end="73:35"><expr pos:start="73:33" pos:end="73:35"><name pos:start="73:33" pos:end="73:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:48"><expr pos:start="75:5" pos:end="75:47"><call pos:start="75:5" pos:end="75:47"><name pos:start="75:5" pos:end="75:31">memory_region_add_subregion</name><argument_list pos:start="75:32" pos:end="75:47">(<argument pos:start="75:33" pos:end="75:38"><expr pos:start="75:33" pos:end="75:38"><name pos:start="75:33" pos:end="75:38">sysmem</name></expr></argument>, <argument pos:start="75:41" pos:end="75:41"><expr pos:start="75:41" pos:end="75:41"><literal type="number" pos:start="75:41" pos:end="75:41">0</literal></expr></argument>, <argument pos:start="75:44" pos:end="75:46"><expr pos:start="75:44" pos:end="75:46"><name pos:start="75:44" pos:end="75:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:29">/* clear virtio region */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:47"><expr pos:start="81:5" pos:end="81:46"><name pos:start="81:5" pos:end="81:21">virtio_region_len</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:35">my_ram_size</name> <operator pos:start="81:37" pos:end="81:37">-</operator> <name pos:start="81:39" pos:end="81:46">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:35"><expr pos:start="83:5" pos:end="83:34"><name pos:start="83:5" pos:end="83:23">virtio_region_start</name> <operator pos:start="83:25" pos:end="83:25">=</operator> <name pos:start="83:27" pos:end="83:34">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="87:70"><expr pos:start="85:5" pos:end="87:69"><name pos:start="85:5" pos:end="85:17">virtio_region</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <call pos:start="85:21" pos:end="87:69"><name pos:start="85:21" pos:end="85:43">cpu_physical_memory_map</name><argument_list pos:start="85:44" pos:end="87:69">(<argument pos:start="85:45" pos:end="85:63"><expr pos:start="85:45" pos:end="85:63"><name pos:start="85:45" pos:end="85:63">virtio_region_start</name></expr></argument>,

                                            <argument pos:start="87:45" pos:end="87:62"><expr pos:start="87:45" pos:end="87:62"><operator pos:start="87:45" pos:end="87:45">&amp;</operator><name pos:start="87:46" pos:end="87:62">virtio_region_len</name></expr></argument>, <argument pos:start="87:65" pos:end="87:68"><expr pos:start="87:65" pos:end="87:68"><name pos:start="87:65" pos:end="87:68">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:48"><expr pos:start="89:5" pos:end="89:47"><call pos:start="89:5" pos:end="89:47"><name pos:start="89:5" pos:end="89:10">memset</name><argument_list pos:start="89:11" pos:end="89:47">(<argument pos:start="89:12" pos:end="89:24"><expr pos:start="89:12" pos:end="89:24"><name pos:start="89:12" pos:end="89:24">virtio_region</name></expr></argument>, <argument pos:start="89:27" pos:end="89:27"><expr pos:start="89:27" pos:end="89:27"><literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr></argument>, <argument pos:start="89:30" pos:end="89:46"><expr pos:start="89:30" pos:end="89:46"><name pos:start="89:30" pos:end="89:46">virtio_region_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="93:49"><expr pos:start="91:5" pos:end="93:48"><call pos:start="91:5" pos:end="93:48"><name pos:start="91:5" pos:end="91:29">cpu_physical_memory_unmap</name><argument_list pos:start="91:30" pos:end="93:48">(<argument pos:start="91:31" pos:end="91:43"><expr pos:start="91:31" pos:end="91:43"><name pos:start="91:31" pos:end="91:43">virtio_region</name></expr></argument>, <argument pos:start="91:46" pos:end="91:62"><expr pos:start="91:46" pos:end="91:62"><name pos:start="91:46" pos:end="91:62">virtio_region_len</name></expr></argument>, <argument pos:start="91:65" pos:end="91:65"><expr pos:start="91:65" pos:end="91:65"><literal type="number" pos:start="91:65" pos:end="91:65">1</literal></expr></argument>,

                              <argument pos:start="93:31" pos:end="93:47"><expr pos:start="93:31" pos:end="93:47"><name pos:start="93:31" pos:end="93:47">virtio_region_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:31">/* allocate storage keys */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:16">storage_keys</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <call pos:start="99:20" pos:end="99:60"><name pos:start="99:20" pos:end="99:28">g_malloc0</name><argument_list pos:start="99:29" pos:end="99:60">(<argument pos:start="99:30" pos:end="99:59"><expr pos:start="99:30" pos:end="99:59"><name pos:start="99:30" pos:end="99:40">my_ram_size</name> <operator pos:start="99:42" pos:end="99:42">/</operator> <name pos:start="99:44" pos:end="99:59">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:19">/* init CPUs */</comment>

    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:26">(<expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:17">cpu_model</name> <operator pos:start="105:19" pos:end="105:20">==</operator> <name pos:start="105:22" pos:end="105:25">NULL</name></expr>)</condition> <block pos:start="105:28" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:27">

        <expr_stmt pos:start="107:9" pos:end="107:27"><expr pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:17">cpu_model</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <literal type="string" pos:start="107:21" pos:end="107:26">"host"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:56"><expr pos:start="113:5" pos:end="113:55"><name pos:start="113:5" pos:end="113:14">ipi_states</name> <operator pos:start="113:16" pos:end="113:16">=</operator> <call pos:start="113:18" pos:end="113:55"><name pos:start="113:18" pos:end="113:25">g_malloc</name><argument_list pos:start="113:26" pos:end="113:55">(<argument pos:start="113:27" pos:end="113:54"><expr pos:start="113:27" pos:end="113:54"><sizeof pos:start="113:27" pos:end="113:43">sizeof<argument_list pos:start="113:33" pos:end="113:43">(<argument pos:start="113:34" pos:end="113:42"><expr pos:start="113:34" pos:end="113:42"><name pos:start="113:34" pos:end="113:40">S390CPU</name> <operator pos:start="113:42" pos:end="113:42">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="113:45" pos:end="113:45">*</operator> <name pos:start="113:47" pos:end="113:54">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="117:5" pos:end="143:5">for <control pos:start="117:9" pos:end="117:34">(<init pos:start="117:10" pos:end="117:15"><expr pos:start="117:10" pos:end="117:14"><name pos:start="117:10" pos:end="117:10">i</name> <operator pos:start="117:12" pos:end="117:12">=</operator> <literal type="number" pos:start="117:14" pos:end="117:14">0</literal></expr>;</init> <condition pos:start="117:17" pos:end="117:29"><expr pos:start="117:17" pos:end="117:28"><name pos:start="117:17" pos:end="117:17">i</name> <operator pos:start="117:19" pos:end="117:19">&lt;</operator> <name pos:start="117:21" pos:end="117:28">smp_cpus</name></expr>;</condition> <incr pos:start="117:31" pos:end="117:33"><expr pos:start="117:31" pos:end="117:33"><name pos:start="117:31" pos:end="117:31">i</name><operator pos:start="117:32" pos:end="117:33">++</operator></expr></incr>)</control> <block pos:start="117:36" pos:end="143:5">{<block_content pos:start="119:9" pos:end="141:45">

        <decl_stmt pos:start="119:9" pos:end="119:21"><decl pos:start="119:9" pos:end="119:20"><type pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:15">S390CPU</name> <modifier pos:start="119:17" pos:end="119:17">*</modifier></type><name pos:start="119:18" pos:end="119:20">cpu</name></decl>;</decl_stmt>

        <decl_stmt pos:start="121:9" pos:end="121:31"><decl pos:start="121:9" pos:end="121:30"><type pos:start="121:9" pos:end="121:23"><name pos:start="121:9" pos:end="121:21">CPUS390XState</name> <modifier pos:start="121:23" pos:end="121:23">*</modifier></type><name pos:start="121:24" pos:end="121:30">tmp_env</name></decl>;</decl_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:40"><expr pos:start="125:9" pos:end="125:39"><name pos:start="125:9" pos:end="125:11">cpu</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <call pos:start="125:15" pos:end="125:39"><name pos:start="125:15" pos:end="125:28">cpu_s390x_init</name><argument_list pos:start="125:29" pos:end="125:39">(<argument pos:start="125:30" pos:end="125:38"><expr pos:start="125:30" pos:end="125:38"><name pos:start="125:30" pos:end="125:38">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:28"><expr pos:start="127:9" pos:end="127:27"><name pos:start="127:9" pos:end="127:15">tmp_env</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <operator pos:start="127:19" pos:end="127:19">&amp;</operator><name pos:start="127:20" pos:end="127:27"><name pos:start="127:20" pos:end="127:22">cpu</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:27">env</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="133:9"><if pos:start="129:9" pos:end="133:9">if <condition pos:start="129:12" pos:end="129:17">(<expr pos:start="129:13" pos:end="129:16"><operator pos:start="129:13" pos:end="129:13">!</operator><name pos:start="129:14" pos:end="129:16">env</name></expr>)</condition> <block pos:start="129:19" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:26">

            <expr_stmt pos:start="131:13" pos:end="131:26"><expr pos:start="131:13" pos:end="131:25"><name pos:start="131:13" pos:end="131:15">env</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <name pos:start="131:19" pos:end="131:25">tmp_env</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:28"><expr pos:start="135:9" pos:end="135:27"><name pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:18">ipi_states</name><index pos:start="135:19" pos:end="135:21">[<expr pos:start="135:20" pos:end="135:20"><name pos:start="135:20" pos:end="135:20">i</name></expr>]</index></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:27">cpu</name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:28"><expr pos:start="137:9" pos:end="137:27"><name pos:start="137:9" pos:end="137:23"><name pos:start="137:9" pos:end="137:15">tmp_env</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:23">halted</name></name> <operator pos:start="137:25" pos:end="137:25">=</operator> <literal type="number" pos:start="137:27" pos:end="137:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:44"><expr pos:start="139:9" pos:end="139:43"><name pos:start="139:9" pos:end="139:32"><name pos:start="139:9" pos:end="139:15">tmp_env</name><operator pos:start="139:16" pos:end="139:17">-&gt;</operator><name pos:start="139:18" pos:end="139:32">exception_index</name></name> <operator pos:start="139:34" pos:end="139:34">=</operator> <name pos:start="139:36" pos:end="139:43">EXCP_HLT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:45"><expr pos:start="141:9" pos:end="141:44"><name pos:start="141:9" pos:end="141:29"><name pos:start="141:9" pos:end="141:15">tmp_env</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:29">storage_keys</name></name> <operator pos:start="141:31" pos:end="141:31">=</operator> <name pos:start="141:33" pos:end="141:44">storage_keys</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="147:5" pos:end="147:28">/* One CPU has to run */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:30"><expr pos:start="149:5" pos:end="149:29"><call pos:start="149:5" pos:end="149:29"><name pos:start="149:5" pos:end="149:24">s390_add_running_cpu</name><argument_list pos:start="149:25" pos:end="149:29">(<argument pos:start="149:26" pos:end="149:28"><expr pos:start="149:26" pos:end="149:28"><name pos:start="149:26" pos:end="149:28">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="153:5" pos:end="237:5"><if pos:start="153:5" pos:end="191:5">if <condition pos:start="153:8" pos:end="153:24">(<expr pos:start="153:9" pos:end="153:23"><name pos:start="153:9" pos:end="153:23">kernel_filename</name></expr>)</condition> <block pos:start="153:26" pos:end="191:5">{<block_content pos:start="157:9" pos:end="189:46">



        <expr_stmt pos:start="157:9" pos:end="159:56"><expr pos:start="157:9" pos:end="159:55"><name pos:start="157:9" pos:end="157:19">kernel_size</name> <operator pos:start="157:21" pos:end="157:21">=</operator> <call pos:start="157:23" pos:end="159:55"><name pos:start="157:23" pos:end="157:30">load_elf</name><argument_list pos:start="157:31" pos:end="159:55">(<argument pos:start="157:32" pos:end="157:46"><expr pos:start="157:32" pos:end="157:46"><name pos:start="157:32" pos:end="157:46">kernel_filename</name></expr></argument>, <argument pos:start="157:49" pos:end="157:52"><expr pos:start="157:49" pos:end="157:52"><name pos:start="157:49" pos:end="157:52">NULL</name></expr></argument>, <argument pos:start="157:55" pos:end="157:58"><expr pos:start="157:55" pos:end="157:58"><name pos:start="157:55" pos:end="157:58">NULL</name></expr></argument>, <argument pos:start="157:61" pos:end="157:64"><expr pos:start="157:61" pos:end="157:64"><name pos:start="157:61" pos:end="157:64">NULL</name></expr></argument>, <argument pos:start="157:67" pos:end="157:70"><expr pos:start="157:67" pos:end="157:70"><name pos:start="157:67" pos:end="157:70">NULL</name></expr></argument>,

                               <argument pos:start="159:32" pos:end="159:35"><expr pos:start="159:32" pos:end="159:35"><name pos:start="159:32" pos:end="159:35">NULL</name></expr></argument>, <argument pos:start="159:38" pos:end="159:38"><expr pos:start="159:38" pos:end="159:38"><literal type="number" pos:start="159:38" pos:end="159:38">1</literal></expr></argument>, <argument pos:start="159:41" pos:end="159:51"><expr pos:start="159:41" pos:end="159:51"><name pos:start="159:41" pos:end="159:51">ELF_MACHINE</name></expr></argument>, <argument pos:start="159:54" pos:end="159:54"><expr pos:start="159:54" pos:end="159:54"><literal type="number" pos:start="159:54" pos:end="159:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="165:9"><if pos:start="161:9" pos:end="165:9">if <condition pos:start="161:12" pos:end="161:32">(<expr pos:start="161:13" pos:end="161:31"><name pos:start="161:13" pos:end="161:23">kernel_size</name> <operator pos:start="161:25" pos:end="161:26">==</operator> <operator pos:start="161:28" pos:end="161:28">-</operator><literal type="number" pos:start="161:29" pos:end="161:31">1UL</literal></expr>)</condition> <block pos:start="161:34" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:76">

            <expr_stmt pos:start="163:13" pos:end="163:76"><expr pos:start="163:13" pos:end="163:75"><name pos:start="163:13" pos:end="163:23">kernel_size</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <call pos:start="163:27" pos:end="163:75"><name pos:start="163:27" pos:end="163:45">load_image_targphys</name><argument_list pos:start="163:46" pos:end="163:75">(<argument pos:start="163:47" pos:end="163:61"><expr pos:start="163:47" pos:end="163:61"><name pos:start="163:47" pos:end="163:61">kernel_filename</name></expr></argument>, <argument pos:start="163:64" pos:end="163:64"><expr pos:start="163:64" pos:end="163:64"><literal type="number" pos:start="163:64" pos:end="163:64">0</literal></expr></argument>, <argument pos:start="163:67" pos:end="163:74"><expr pos:start="163:67" pos:end="163:74"><name pos:start="163:67" pos:end="163:74">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="167:9" pos:end="175:9"><if pos:start="167:9" pos:end="175:9">if <condition pos:start="167:12" pos:end="167:32">(<expr pos:start="167:13" pos:end="167:31"><name pos:start="167:13" pos:end="167:23">kernel_size</name> <operator pos:start="167:25" pos:end="167:26">==</operator> <operator pos:start="167:28" pos:end="167:28">-</operator><literal type="number" pos:start="167:29" pos:end="167:31">1UL</literal></expr>)</condition> <block pos:start="167:34" pos:end="175:9">{<block_content pos:start="169:13" pos:end="173:20">

            <expr_stmt pos:start="169:13" pos:end="171:37"><expr pos:start="169:13" pos:end="171:36"><call pos:start="169:13" pos:end="171:36"><name pos:start="169:13" pos:end="169:19">fprintf</name><argument_list pos:start="169:20" pos:end="171:36">(<argument pos:start="169:21" pos:end="169:26"><expr pos:start="169:21" pos:end="169:26"><name pos:start="169:21" pos:end="169:26">stderr</name></expr></argument>, <argument pos:start="169:29" pos:end="169:64"><expr pos:start="169:29" pos:end="169:64"><literal type="string" pos:start="169:29" pos:end="169:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="171:21" pos:end="171:35"><expr pos:start="171:21" pos:end="171:35"><name pos:start="171:21" pos:end="171:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:20"><expr pos:start="173:13" pos:end="173:19"><call pos:start="173:13" pos:end="173:19"><name pos:start="173:13" pos:end="173:16">exit</name><argument_list pos:start="173:17" pos:end="173:19">(<argument pos:start="173:18" pos:end="173:18"><expr pos:start="173:18" pos:end="173:18"><literal type="number" pos:start="173:18" pos:end="173:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="177:9" pos:end="185:11">/*

         * we can not rely on the ELF entry point, since up to 3.2 this

         * value was 0x800 (the SALIPL loader) and it wont work. For

         * all (Linux) cases 0x10000 (KERN_IMAGE_START) should be fine.

         */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:41"><expr pos:start="187:9" pos:end="187:40"><name pos:start="187:9" pos:end="187:21"><name pos:start="187:9" pos:end="187:11">env</name><operator pos:start="187:12" pos:end="187:13">-&gt;</operator><name pos:start="187:14" pos:end="187:16">psw</name><operator pos:start="187:17" pos:end="187:17">.</operator><name pos:start="187:18" pos:end="187:21">addr</name></name> <operator pos:start="187:23" pos:end="187:23">=</operator> <name pos:start="187:25" pos:end="187:40">KERN_IMAGE_START</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:46"><expr pos:start="189:9" pos:end="189:45"><name pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:11">env</name><operator pos:start="189:12" pos:end="189:13">-&gt;</operator><name pos:start="189:14" pos:end="189:16">psw</name><operator pos:start="189:17" pos:end="189:17">.</operator><name pos:start="189:18" pos:end="189:21">mask</name></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <literal type="number" pos:start="189:25" pos:end="189:45">0x0000000180000000ULL</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="191:7" pos:end="237:5">else <block pos:start="191:12" pos:end="237:5">{<block_content pos:start="193:9" pos:end="235:46">

        <decl_stmt pos:start="193:9" pos:end="193:33"><decl pos:start="193:9" pos:end="193:32"><type pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:18">ram_addr_t</name></type> <name pos:start="193:20" pos:end="193:28">bios_size</name> <init pos:start="193:30" pos:end="193:32">= <expr pos:start="193:32" pos:end="193:32"><literal type="number" pos:start="193:32" pos:end="193:32">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="195:9" pos:end="195:28"><decl pos:start="195:9" pos:end="195:27"><type pos:start="195:9" pos:end="195:14"><name pos:start="195:9" pos:end="195:12">char</name> <modifier pos:start="195:14" pos:end="195:14">*</modifier></type><name pos:start="195:15" pos:end="195:27">bios_filename</name></decl>;</decl_stmt>



        <comment type="block" pos:start="199:9" pos:end="199:34">/* Load zipl bootloader */</comment>

        <if_stmt pos:start="201:9" pos:end="205:9"><if pos:start="201:9" pos:end="205:9">if <condition pos:start="201:12" pos:end="201:30">(<expr pos:start="201:13" pos:end="201:29"><name pos:start="201:13" pos:end="201:21">bios_name</name> <operator pos:start="201:23" pos:end="201:24">==</operator> <name pos:start="201:26" pos:end="201:29">NULL</name></expr>)</condition> <block pos:start="201:32" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:38">

            <expr_stmt pos:start="203:13" pos:end="203:38"><expr pos:start="203:13" pos:end="203:37"><name pos:start="203:13" pos:end="203:21">bios_name</name> <operator pos:start="203:23" pos:end="203:23">=</operator> <name pos:start="203:25" pos:end="203:37">ZIPL_FILENAME</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="209:9" pos:end="209:71"><expr pos:start="209:9" pos:end="209:70"><name pos:start="209:9" pos:end="209:21">bios_filename</name> <operator pos:start="209:23" pos:end="209:23">=</operator> <call pos:start="209:25" pos:end="209:70"><name pos:start="209:25" pos:end="209:38">qemu_find_file</name><argument_list pos:start="209:39" pos:end="209:70">(<argument pos:start="209:40" pos:end="209:58"><expr pos:start="209:40" pos:end="209:58"><name pos:start="209:40" pos:end="209:58">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="209:61" pos:end="209:69"><expr pos:start="209:61" pos:end="209:69"><name pos:start="209:61" pos:end="209:69">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:77"><expr pos:start="211:9" pos:end="211:76"><name pos:start="211:9" pos:end="211:17">bios_size</name> <operator pos:start="211:19" pos:end="211:19">=</operator> <call pos:start="211:21" pos:end="211:76"><name pos:start="211:21" pos:end="211:39">load_image_targphys</name><argument_list pos:start="211:40" pos:end="211:76">(<argument pos:start="211:41" pos:end="211:53"><expr pos:start="211:41" pos:end="211:53"><name pos:start="211:41" pos:end="211:53">bios_filename</name></expr></argument>, <argument pos:start="211:56" pos:end="211:69"><expr pos:start="211:56" pos:end="211:69"><name pos:start="211:56" pos:end="211:69">ZIPL_LOAD_ADDR</name></expr></argument>, <argument pos:start="211:72" pos:end="211:75"><expr pos:start="211:72" pos:end="211:75"><literal type="number" pos:start="211:72" pos:end="211:75">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:30"><expr pos:start="213:9" pos:end="213:29"><call pos:start="213:9" pos:end="213:29"><name pos:start="213:9" pos:end="213:14">g_free</name><argument_list pos:start="213:15" pos:end="213:29">(<argument pos:start="213:16" pos:end="213:28"><expr pos:start="213:16" pos:end="213:28"><name pos:start="213:16" pos:end="213:28">bios_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="217:9" pos:end="221:9"><if pos:start="217:9" pos:end="221:9">if <condition pos:start="217:12" pos:end="217:32">(<expr pos:start="217:13" pos:end="217:31"><operator pos:start="217:13" pos:end="217:13">(</operator><name pos:start="217:14" pos:end="217:17">long</name><operator pos:start="217:18" pos:end="217:18">)</operator><name pos:start="217:19" pos:end="217:27">bios_size</name> <operator pos:start="217:29" pos:end="217:29">&lt;</operator> <literal type="number" pos:start="217:31" pos:end="217:31">0</literal></expr>)</condition> <block pos:start="217:34" pos:end="221:9">{<block_content pos:start="219:13" pos:end="219:68">

            <expr_stmt pos:start="219:13" pos:end="219:68"><expr pos:start="219:13" pos:end="219:67"><call pos:start="219:13" pos:end="219:67"><name pos:start="219:13" pos:end="219:20">hw_error</name><argument_list pos:start="219:21" pos:end="219:67">(<argument pos:start="219:22" pos:end="219:55"><expr pos:start="219:22" pos:end="219:55"><literal type="string" pos:start="219:22" pos:end="219:55">"could not load bootloader '%s'\n"</literal></expr></argument>, <argument pos:start="219:58" pos:end="219:66"><expr pos:start="219:58" pos:end="219:66"><name pos:start="219:58" pos:end="219:66">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="225:9" pos:end="229:9"><if pos:start="225:9" pos:end="229:9">if <condition pos:start="225:12" pos:end="225:29">(<expr pos:start="225:13" pos:end="225:28"><name pos:start="225:13" pos:end="225:21">bios_size</name> <operator pos:start="225:23" pos:end="225:23">&gt;</operator> <literal type="number" pos:start="225:25" pos:end="225:28">4096</literal></expr>)</condition> <block pos:start="225:31" pos:end="229:9">{<block_content pos:start="227:13" pos:end="227:52">

            <expr_stmt pos:start="227:13" pos:end="227:52"><expr pos:start="227:13" pos:end="227:51"><call pos:start="227:13" pos:end="227:51"><name pos:start="227:13" pos:end="227:20">hw_error</name><argument_list pos:start="227:21" pos:end="227:51">(<argument pos:start="227:22" pos:end="227:50"><expr pos:start="227:22" pos:end="227:50"><literal type="string" pos:start="227:22" pos:end="227:50">"stage1 bootloader is &gt; 4k\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="233:9" pos:end="233:35"><expr pos:start="233:9" pos:end="233:34"><name pos:start="233:9" pos:end="233:21"><name pos:start="233:9" pos:end="233:11">env</name><operator pos:start="233:12" pos:end="233:13">-&gt;</operator><name pos:start="233:14" pos:end="233:16">psw</name><operator pos:start="233:17" pos:end="233:17">.</operator><name pos:start="233:18" pos:end="233:21">addr</name></name> <operator pos:start="233:23" pos:end="233:23">=</operator> <name pos:start="233:25" pos:end="233:34">ZIPL_START</name></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:46"><expr pos:start="235:9" pos:end="235:45"><name pos:start="235:9" pos:end="235:21"><name pos:start="235:9" pos:end="235:11">env</name><operator pos:start="235:12" pos:end="235:13">-&gt;</operator><name pos:start="235:14" pos:end="235:16">psw</name><operator pos:start="235:17" pos:end="235:17">.</operator><name pos:start="235:18" pos:end="235:21">mask</name></name> <operator pos:start="235:23" pos:end="235:23">=</operator> <literal type="number" pos:start="235:25" pos:end="235:45">0x0000000180000000ULL</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="241:5" pos:end="273:5"><if pos:start="241:5" pos:end="273:5">if <condition pos:start="241:8" pos:end="241:24">(<expr pos:start="241:9" pos:end="241:23"><name pos:start="241:9" pos:end="241:23">initrd_filename</name></expr>)</condition> <block pos:start="241:26" pos:end="273:5">{<block_content pos:start="243:9" pos:end="271:54">

        <expr_stmt pos:start="243:9" pos:end="243:37"><expr pos:start="243:9" pos:end="243:36"><name pos:start="243:9" pos:end="243:21">initrd_offset</name> <operator pos:start="243:23" pos:end="243:23">=</operator> <name pos:start="243:25" pos:end="243:36">INITRD_START</name></expr>;</expr_stmt>

        <while pos:start="245:9" pos:end="249:9">while <condition pos:start="245:15" pos:end="245:54">(<expr pos:start="245:16" pos:end="245:53"><name pos:start="245:16" pos:end="245:26">kernel_size</name> <operator pos:start="245:28" pos:end="245:28">+</operator> <literal type="number" pos:start="245:30" pos:end="245:37">0x100000</literal> <operator pos:start="245:39" pos:end="245:39">&gt;</operator> <name pos:start="245:41" pos:end="245:53">initrd_offset</name></expr>)</condition> <block pos:start="245:56" pos:end="249:9">{<block_content pos:start="247:13" pos:end="247:38">

            <expr_stmt pos:start="247:13" pos:end="247:38"><expr pos:start="247:13" pos:end="247:37"><name pos:start="247:13" pos:end="247:25">initrd_offset</name> <operator pos:start="247:27" pos:end="247:28">+=</operator> <literal type="number" pos:start="247:30" pos:end="247:37">0x100000</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="251:9" pos:end="253:68"><expr pos:start="251:9" pos:end="253:67"><name pos:start="251:9" pos:end="251:19">initrd_size</name> <operator pos:start="251:21" pos:end="251:21">=</operator> <call pos:start="251:23" pos:end="253:67"><name pos:start="251:23" pos:end="251:41">load_image_targphys</name><argument_list pos:start="251:42" pos:end="253:67">(<argument pos:start="251:43" pos:end="251:57"><expr pos:start="251:43" pos:end="251:57"><name pos:start="251:43" pos:end="251:57">initrd_filename</name></expr></argument>, <argument pos:start="251:60" pos:end="251:72"><expr pos:start="251:60" pos:end="251:72"><name pos:start="251:60" pos:end="251:72">initrd_offset</name></expr></argument>,

                                          <argument pos:start="253:43" pos:end="253:66"><expr pos:start="253:43" pos:end="253:66"><name pos:start="253:43" pos:end="253:50">ram_size</name> <operator pos:start="253:52" pos:end="253:52">-</operator> <name pos:start="253:54" pos:end="253:66">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="255:9" pos:end="263:9"><if pos:start="255:9" pos:end="263:9">if <condition pos:start="255:12" pos:end="255:32">(<expr pos:start="255:13" pos:end="255:31"><name pos:start="255:13" pos:end="255:23">initrd_size</name> <operator pos:start="255:25" pos:end="255:26">==</operator> <operator pos:start="255:28" pos:end="255:28">-</operator><literal type="number" pos:start="255:29" pos:end="255:31">1UL</literal></expr>)</condition> <block pos:start="255:34" pos:end="263:9">{<block_content pos:start="257:13" pos:end="261:20">

            <expr_stmt pos:start="257:13" pos:end="259:37"><expr pos:start="257:13" pos:end="259:36"><call pos:start="257:13" pos:end="259:36"><name pos:start="257:13" pos:end="257:19">fprintf</name><argument_list pos:start="257:20" pos:end="259:36">(<argument pos:start="257:21" pos:end="257:26"><expr pos:start="257:21" pos:end="257:26"><name pos:start="257:21" pos:end="257:26">stderr</name></expr></argument>, <argument pos:start="257:29" pos:end="257:64"><expr pos:start="257:29" pos:end="257:64"><literal type="string" pos:start="257:29" pos:end="257:64">"qemu: could not load initrd '%s'\n"</literal></expr></argument>,

                    <argument pos:start="259:21" pos:end="259:35"><expr pos:start="259:21" pos:end="259:35"><name pos:start="259:21" pos:end="259:35">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:20"><expr pos:start="261:13" pos:end="261:19"><call pos:start="261:13" pos:end="261:19"><name pos:start="261:13" pos:end="261:16">exit</name><argument_list pos:start="261:17" pos:end="261:19">(<argument pos:start="261:18" pos:end="261:18"><expr pos:start="261:18" pos:end="261:18"><literal type="number" pos:start="261:18" pos:end="261:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="267:9" pos:end="267:78">/* we have to overwrite values in the kernel image, which are "rom" */</comment>

        <expr_stmt pos:start="269:9" pos:end="269:57"><expr pos:start="269:9" pos:end="269:56"><call pos:start="269:9" pos:end="269:56"><name pos:start="269:9" pos:end="269:13">stq_p</name><argument_list pos:start="269:14" pos:end="269:56">(<argument pos:start="269:15" pos:end="269:40"><expr pos:start="269:15" pos:end="269:40"><call pos:start="269:15" pos:end="269:40"><name pos:start="269:15" pos:end="269:21">rom_ptr</name><argument_list pos:start="269:22" pos:end="269:40">(<argument pos:start="269:23" pos:end="269:39"><expr pos:start="269:23" pos:end="269:39"><name pos:start="269:23" pos:end="269:39">INITRD_PARM_START</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="269:43" pos:end="269:55"><expr pos:start="269:43" pos:end="269:55"><name pos:start="269:43" pos:end="269:55">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:54"><expr pos:start="271:9" pos:end="271:53"><call pos:start="271:9" pos:end="271:53"><name pos:start="271:9" pos:end="271:13">stq_p</name><argument_list pos:start="271:14" pos:end="271:53">(<argument pos:start="271:15" pos:end="271:39"><expr pos:start="271:15" pos:end="271:39"><call pos:start="271:15" pos:end="271:39"><name pos:start="271:15" pos:end="271:21">rom_ptr</name><argument_list pos:start="271:22" pos:end="271:39">(<argument pos:start="271:23" pos:end="271:38"><expr pos:start="271:23" pos:end="271:38"><name pos:start="271:23" pos:end="271:38">INITRD_PARM_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="271:42" pos:end="271:52"><expr pos:start="271:42" pos:end="271:52"><name pos:start="271:42" pos:end="271:52">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="277:5" pos:end="285:5"><if pos:start="277:5" pos:end="285:5">if <condition pos:start="277:8" pos:end="277:32">(<expr pos:start="277:9" pos:end="277:31"><call pos:start="277:9" pos:end="277:31"><name pos:start="277:9" pos:end="277:15">rom_ptr</name><argument_list pos:start="277:16" pos:end="277:31">(<argument pos:start="277:17" pos:end="277:30"><expr pos:start="277:17" pos:end="277:30"><name pos:start="277:17" pos:end="277:30">KERN_PARM_AREA</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="277:34" pos:end="285:5">{<block_content pos:start="281:9" pos:end="283:43">

        <comment type="block" pos:start="279:9" pos:end="279:78">/* we have to overwrite values in the kernel image, which are "rom" */</comment>

        <expr_stmt pos:start="281:9" pos:end="283:43"><expr pos:start="281:9" pos:end="283:42"><call pos:start="281:9" pos:end="283:42"><name pos:start="281:9" pos:end="281:14">memcpy</name><argument_list pos:start="281:15" pos:end="283:42">(<argument pos:start="281:16" pos:end="281:38"><expr pos:start="281:16" pos:end="281:38"><call pos:start="281:16" pos:end="281:38"><name pos:start="281:16" pos:end="281:22">rom_ptr</name><argument_list pos:start="281:23" pos:end="281:38">(<argument pos:start="281:24" pos:end="281:37"><expr pos:start="281:24" pos:end="281:37"><name pos:start="281:24" pos:end="281:37">KERN_PARM_AREA</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="281:41" pos:end="281:54"><expr pos:start="281:41" pos:end="281:54"><name pos:start="281:41" pos:end="281:54">kernel_cmdline</name></expr></argument>,

               <argument pos:start="283:16" pos:end="283:41"><expr pos:start="283:16" pos:end="283:41"><call pos:start="283:16" pos:end="283:37"><name pos:start="283:16" pos:end="283:21">strlen</name><argument_list pos:start="283:22" pos:end="283:37">(<argument pos:start="283:23" pos:end="283:36"><expr pos:start="283:23" pos:end="283:36"><name pos:start="283:23" pos:end="283:36">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="283:39" pos:end="283:39">+</operator> <literal type="number" pos:start="283:41" pos:end="283:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="289:5" pos:end="289:40">/* Create VirtIO network adapters */</comment>

    <for pos:start="291:5" pos:end="323:5">for<control pos:start="291:8" pos:end="291:32">(<init pos:start="291:9" pos:end="291:14"><expr pos:start="291:9" pos:end="291:13"><name pos:start="291:9" pos:end="291:9">i</name> <operator pos:start="291:11" pos:end="291:11">=</operator> <literal type="number" pos:start="291:13" pos:end="291:13">0</literal></expr>;</init> <condition pos:start="291:16" pos:end="291:27"><expr pos:start="291:16" pos:end="291:26"><name pos:start="291:16" pos:end="291:16">i</name> <operator pos:start="291:18" pos:end="291:18">&lt;</operator> <name pos:start="291:20" pos:end="291:26">nb_nics</name></expr>;</condition> <incr pos:start="291:29" pos:end="291:31"><expr pos:start="291:29" pos:end="291:31"><name pos:start="291:29" pos:end="291:29">i</name><operator pos:start="291:30" pos:end="291:31">++</operator></expr></incr>)</control> <block pos:start="291:34" pos:end="323:5">{<block_content pos:start="293:9" pos:end="321:30">

        <decl_stmt pos:start="293:9" pos:end="293:35"><decl pos:start="293:9" pos:end="293:34"><type pos:start="293:9" pos:end="293:17"><name pos:start="293:9" pos:end="293:15">NICInfo</name> <modifier pos:start="293:17" pos:end="293:17">*</modifier></type><name pos:start="293:18" pos:end="293:19">nd</name> <init pos:start="293:21" pos:end="293:34">= <expr pos:start="293:23" pos:end="293:34"><operator pos:start="293:23" pos:end="293:23">&amp;</operator><name pos:start="293:24" pos:end="293:34"><name pos:start="293:24" pos:end="293:31">nd_table</name><index pos:start="293:32" pos:end="293:34">[<expr pos:start="293:33" pos:end="293:33"><name pos:start="293:33" pos:end="293:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="295:9" pos:end="295:25"><decl pos:start="295:9" pos:end="295:24"><type pos:start="295:9" pos:end="295:21"><name pos:start="295:9" pos:end="295:19">DeviceState</name> <modifier pos:start="295:21" pos:end="295:21">*</modifier></type><name pos:start="295:22" pos:end="295:24">dev</name></decl>;</decl_stmt>



        <if_stmt pos:start="299:9" pos:end="303:9"><if pos:start="299:9" pos:end="303:9">if <condition pos:start="299:12" pos:end="299:23">(<expr pos:start="299:13" pos:end="299:22"><operator pos:start="299:13" pos:end="299:13">!</operator><name pos:start="299:14" pos:end="299:22"><name pos:start="299:14" pos:end="299:15">nd</name><operator pos:start="299:16" pos:end="299:17">-&gt;</operator><name pos:start="299:18" pos:end="299:22">model</name></name></expr>)</condition> <block pos:start="299:25" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:43">

            <expr_stmt pos:start="301:13" pos:end="301:43"><expr pos:start="301:13" pos:end="301:42"><name pos:start="301:13" pos:end="301:21"><name pos:start="301:13" pos:end="301:14">nd</name><operator pos:start="301:15" pos:end="301:16">-&gt;</operator><name pos:start="301:17" pos:end="301:21">model</name></name> <operator pos:start="301:23" pos:end="301:23">=</operator> <call pos:start="301:25" pos:end="301:42"><name pos:start="301:25" pos:end="301:32">g_strdup</name><argument_list pos:start="301:33" pos:end="301:42">(<argument pos:start="301:34" pos:end="301:41"><expr pos:start="301:34" pos:end="301:41"><literal type="string" pos:start="301:34" pos:end="301:41">"virtio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="307:9" pos:end="313:9"><if pos:start="307:9" pos:end="313:9">if <condition pos:start="307:12" pos:end="307:40">(<expr pos:start="307:13" pos:end="307:39"><call pos:start="307:13" pos:end="307:39"><name pos:start="307:13" pos:end="307:18">strcmp</name><argument_list pos:start="307:19" pos:end="307:39">(<argument pos:start="307:20" pos:end="307:28"><expr pos:start="307:20" pos:end="307:28"><name pos:start="307:20" pos:end="307:28"><name pos:start="307:20" pos:end="307:21">nd</name><operator pos:start="307:22" pos:end="307:23">-&gt;</operator><name pos:start="307:24" pos:end="307:28">model</name></name></expr></argument>, <argument pos:start="307:31" pos:end="307:38"><expr pos:start="307:31" pos:end="307:38"><literal type="string" pos:start="307:31" pos:end="307:38">"virtio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="307:42" pos:end="313:9">{<block_content pos:start="309:13" pos:end="311:20">

            <expr_stmt pos:start="309:13" pos:end="309:64"><expr pos:start="309:13" pos:end="309:63"><call pos:start="309:13" pos:end="309:63"><name pos:start="309:13" pos:end="309:19">fprintf</name><argument_list pos:start="309:20" pos:end="309:63">(<argument pos:start="309:21" pos:end="309:26"><expr pos:start="309:21" pos:end="309:26"><name pos:start="309:21" pos:end="309:26">stderr</name></expr></argument>, <argument pos:start="309:29" pos:end="309:62"><expr pos:start="309:29" pos:end="309:62"><literal type="string" pos:start="309:29" pos:end="309:62">"S390 only supports VirtIO nics\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:20"><expr pos:start="311:13" pos:end="311:19"><call pos:start="311:13" pos:end="311:19"><name pos:start="311:13" pos:end="311:16">exit</name><argument_list pos:start="311:17" pos:end="311:19">(<argument pos:start="311:18" pos:end="311:18"><expr pos:start="311:18" pos:end="311:18"><literal type="number" pos:start="311:18" pos:end="311:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="317:9" pos:end="317:67"><expr pos:start="317:9" pos:end="317:66"><name pos:start="317:9" pos:end="317:11">dev</name> <operator pos:start="317:13" pos:end="317:13">=</operator> <call pos:start="317:15" pos:end="317:66"><name pos:start="317:15" pos:end="317:25">qdev_create</name><argument_list pos:start="317:26" pos:end="317:66">(<argument pos:start="317:27" pos:end="317:46"><expr pos:start="317:27" pos:end="317:46"><operator pos:start="317:27" pos:end="317:27">(</operator><name pos:start="317:28" pos:end="317:35">BusState</name> <operator pos:start="317:37" pos:end="317:37">*</operator><operator pos:start="317:38" pos:end="317:38">)</operator><name pos:start="317:39" pos:end="317:46">s390_bus</name></expr></argument>, <argument pos:start="317:49" pos:end="317:65"><expr pos:start="317:49" pos:end="317:65"><literal type="string" pos:start="317:49" pos:end="317:65">"virtio-net-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:41"><expr pos:start="319:9" pos:end="319:40"><call pos:start="319:9" pos:end="319:40"><name pos:start="319:9" pos:end="319:31">qdev_set_nic_properties</name><argument_list pos:start="319:32" pos:end="319:40">(<argument pos:start="319:33" pos:end="319:35"><expr pos:start="319:33" pos:end="319:35"><name pos:start="319:33" pos:end="319:35">dev</name></expr></argument>, <argument pos:start="319:38" pos:end="319:39"><expr pos:start="319:38" pos:end="319:39"><name pos:start="319:38" pos:end="319:39">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:30"><expr pos:start="321:9" pos:end="321:29"><call pos:start="321:9" pos:end="321:29"><name pos:start="321:9" pos:end="321:24">qdev_init_nofail</name><argument_list pos:start="321:25" pos:end="321:29">(<argument pos:start="321:26" pos:end="321:28"><expr pos:start="321:26" pos:end="321:28"><name pos:start="321:26" pos:end="321:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="327:5" pos:end="327:35">/* Create VirtIO disk drives */</comment>

    <for pos:start="329:5" pos:end="353:5">for<control pos:start="329:8" pos:end="329:37">(<init pos:start="329:9" pos:end="329:14"><expr pos:start="329:9" pos:end="329:13"><name pos:start="329:9" pos:end="329:9">i</name> <operator pos:start="329:11" pos:end="329:11">=</operator> <literal type="number" pos:start="329:13" pos:end="329:13">0</literal></expr>;</init> <condition pos:start="329:16" pos:end="329:32"><expr pos:start="329:16" pos:end="329:31"><name pos:start="329:16" pos:end="329:16">i</name> <operator pos:start="329:18" pos:end="329:18">&lt;</operator> <name pos:start="329:20" pos:end="329:31">MAX_BLK_DEVS</name></expr>;</condition> <incr pos:start="329:34" pos:end="329:36"><expr pos:start="329:34" pos:end="329:36"><name pos:start="329:34" pos:end="329:34">i</name><operator pos:start="329:35" pos:end="329:36">++</operator></expr></incr>)</control> <block pos:start="329:39" pos:end="353:5">{<block_content pos:start="331:9" pos:end="351:30">

        <decl_stmt pos:start="331:9" pos:end="331:25"><decl pos:start="331:9" pos:end="331:24"><type pos:start="331:9" pos:end="331:19"><name pos:start="331:9" pos:end="331:17">DriveInfo</name> <modifier pos:start="331:19" pos:end="331:19">*</modifier></type><name pos:start="331:20" pos:end="331:24">dinfo</name></decl>;</decl_stmt>

        <decl_stmt pos:start="333:9" pos:end="333:25"><decl pos:start="333:9" pos:end="333:24"><type pos:start="333:9" pos:end="333:21"><name pos:start="333:9" pos:end="333:19">DeviceState</name> <modifier pos:start="333:21" pos:end="333:21">*</modifier></type><name pos:start="333:22" pos:end="333:24">dev</name></decl>;</decl_stmt>



        <expr_stmt pos:start="337:9" pos:end="337:40"><expr pos:start="337:9" pos:end="337:39"><name pos:start="337:9" pos:end="337:13">dinfo</name> <operator pos:start="337:15" pos:end="337:15">=</operator> <call pos:start="337:17" pos:end="337:39"><name pos:start="337:17" pos:end="337:25">drive_get</name><argument_list pos:start="337:26" pos:end="337:39">(<argument pos:start="337:27" pos:end="337:32"><expr pos:start="337:27" pos:end="337:32"><name pos:start="337:27" pos:end="337:32">IF_IDE</name></expr></argument>, <argument pos:start="337:35" pos:end="337:35"><expr pos:start="337:35" pos:end="337:35"><literal type="number" pos:start="337:35" pos:end="337:35">0</literal></expr></argument>, <argument pos:start="337:38" pos:end="337:38"><expr pos:start="337:38" pos:end="337:38"><name pos:start="337:38" pos:end="337:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="339:9" pos:end="343:9"><if pos:start="339:9" pos:end="343:9">if <condition pos:start="339:12" pos:end="339:19">(<expr pos:start="339:13" pos:end="339:18"><operator pos:start="339:13" pos:end="339:13">!</operator><name pos:start="339:14" pos:end="339:18">dinfo</name></expr>)</condition> <block pos:start="339:21" pos:end="343:9">{<block_content pos:start="341:13" pos:end="341:21">

            <continue pos:start="341:13" pos:end="341:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="347:9" pos:end="347:67"><expr pos:start="347:9" pos:end="347:66"><name pos:start="347:9" pos:end="347:11">dev</name> <operator pos:start="347:13" pos:end="347:13">=</operator> <call pos:start="347:15" pos:end="347:66"><name pos:start="347:15" pos:end="347:25">qdev_create</name><argument_list pos:start="347:26" pos:end="347:66">(<argument pos:start="347:27" pos:end="347:46"><expr pos:start="347:27" pos:end="347:46"><operator pos:start="347:27" pos:end="347:27">(</operator><name pos:start="347:28" pos:end="347:35">BusState</name> <operator pos:start="347:37" pos:end="347:37">*</operator><operator pos:start="347:38" pos:end="347:38">)</operator><name pos:start="347:39" pos:end="347:46">s390_bus</name></expr></argument>, <argument pos:start="347:49" pos:end="347:65"><expr pos:start="347:49" pos:end="347:65"><literal type="string" pos:start="347:49" pos:end="347:65">"virtio-blk-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:62"><expr pos:start="349:9" pos:end="349:61"><call pos:start="349:9" pos:end="349:61"><name pos:start="349:9" pos:end="349:34">qdev_prop_set_drive_nofail</name><argument_list pos:start="349:35" pos:end="349:61">(<argument pos:start="349:36" pos:end="349:38"><expr pos:start="349:36" pos:end="349:38"><name pos:start="349:36" pos:end="349:38">dev</name></expr></argument>, <argument pos:start="349:41" pos:end="349:47"><expr pos:start="349:41" pos:end="349:47"><literal type="string" pos:start="349:41" pos:end="349:47">"drive"</literal></expr></argument>, <argument pos:start="349:50" pos:end="349:60"><expr pos:start="349:50" pos:end="349:60"><name pos:start="349:50" pos:end="349:60"><name pos:start="349:50" pos:end="349:54">dinfo</name><operator pos:start="349:55" pos:end="349:56">-&gt;</operator><name pos:start="349:57" pos:end="349:60">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:30"><expr pos:start="351:9" pos:end="351:29"><call pos:start="351:9" pos:end="351:29"><name pos:start="351:9" pos:end="351:24">qdev_init_nofail</name><argument_list pos:start="351:25" pos:end="351:29">(<argument pos:start="351:26" pos:end="351:28"><expr pos:start="351:26" pos:end="351:28"><name pos:start="351:26" pos:end="351:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
