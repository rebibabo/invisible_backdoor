<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18887.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">avcodec_copy_context</name><parameter_list pos:start="1:25" pos:end="1:73">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:45">dest</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:72"><decl pos:start="1:48" pos:end="1:72"><type pos:start="1:48" pos:end="1:72"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:67">AVCodecContext</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">src</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:27">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">AVCodec</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:29">orig_codec</name> <init pos:start="5:31" pos:end="5:43">= <expr pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:36">dest</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:43">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:27">orig_priv_data</name> <init pos:start="7:29" pos:end="7:45">= <expr pos:start="7:31" pos:end="7:45"><name pos:start="7:31" pos:end="7:45"><name pos:start="7:31" pos:end="7:34">dest</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:45">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="11:30">(<expr pos:start="11:9" pos:end="11:29"><call pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:23">avcodec_is_open</name><argument_list pos:start="11:24" pos:end="11:29">(<argument pos:start="11:25" pos:end="11:28"><expr pos:start="11:25" pos:end="11:28"><name pos:start="11:25" pos:end="11:28">dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:32" pos:end="21:5">{<block_content pos:start="13:9" pos:end="19:31"> <comment type="line" pos:start="11:34" pos:end="11:80">// check that the dest context is uninitialized</comment>

        <expr_stmt pos:start="13:9" pos:end="17:26"><expr pos:start="13:9" pos:end="17:25"><call pos:start="13:9" pos:end="17:25"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="17:25">(<argument pos:start="13:16" pos:end="13:19"><expr pos:start="13:16" pos:end="13:19"><name pos:start="13:16" pos:end="13:19">dest</name></expr></argument>, <argument pos:start="13:22" pos:end="13:33"><expr pos:start="13:22" pos:end="13:33"><name pos:start="13:22" pos:end="13:33">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="15:16" pos:end="15:78"><expr pos:start="15:16" pos:end="15:78"><literal type="string" pos:start="15:16" pos:end="15:78">"Tried to copy AVCodecContext %p into already-initialized %p\n"</literal></expr></argument>,

               <argument pos:start="17:16" pos:end="17:18"><expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">src</name></expr></argument>, <argument pos:start="17:21" pos:end="17:24"><expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><call pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:15">av_opt_free</name><argument_list pos:start="25:16" pos:end="25:21">(<argument pos:start="25:17" pos:end="25:20"><expr pos:start="25:17" pos:end="25:20"><name pos:start="25:17" pos:end="25:20">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><call pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:11">av_free</name><argument_list pos:start="27:12" pos:end="27:28">(<argument pos:start="27:13" pos:end="27:27"><expr pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:16">dest</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:27">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><call pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:10">memcpy</name><argument_list pos:start="31:11" pos:end="31:36">(<argument pos:start="31:12" pos:end="31:15"><expr pos:start="31:12" pos:end="31:15"><name pos:start="31:12" pos:end="31:15">dest</name></expr></argument>, <argument pos:start="31:18" pos:end="31:20"><expr pos:start="31:18" pos:end="31:20"><name pos:start="31:18" pos:end="31:20">src</name></expr></argument>, <argument pos:start="31:23" pos:end="31:35"><expr pos:start="31:23" pos:end="31:35"><sizeof pos:start="31:23" pos:end="31:35">sizeof<argument_list pos:start="31:29" pos:end="31:35">(<argument pos:start="31:30" pos:end="31:34"><expr pos:start="31:30" pos:end="31:34"><operator pos:start="31:30" pos:end="31:30">*</operator><name pos:start="31:31" pos:end="31:34">dest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:8">dest</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:19">priv_data</name></name>       <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:42">orig_priv_data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:39"><expr pos:start="37:5" pos:end="37:38"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:8">dest</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:15">codec</name></name>           <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:38">orig_codec</name></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:74">/* set values specific to opened codecs back to their default state */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:8">dest</name><operator pos:start="43:9" pos:end="43:10">-&gt;</operator><name pos:start="43:11" pos:end="43:22">slice_offset</name></name>    <operator pos:start="43:27" pos:end="43:27">=</operator> <name pos:start="43:29" pos:end="43:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:8">dest</name><operator pos:start="45:9" pos:end="45:10">-&gt;</operator><name pos:start="45:11" pos:end="45:17">hwaccel</name></name>         <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:33"><expr pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:8">dest</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:18">internal</name></name>        <operator pos:start="47:27" pos:end="47:27">=</operator> <name pos:start="47:29" pos:end="47:32">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:63">/* reallocate values that should be allocated separately */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:33"><expr pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:8">dest</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:15">rc_eq</name></name>           <operator pos:start="53:27" pos:end="53:27">=</operator> <name pos:start="53:29" pos:end="53:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:8">dest</name><operator pos:start="55:9" pos:end="55:10">-&gt;</operator><name pos:start="55:11" pos:end="55:19">extradata</name></name>       <operator pos:start="55:27" pos:end="55:27">=</operator> <name pos:start="55:29" pos:end="55:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:8">dest</name><operator pos:start="57:9" pos:end="57:10">-&gt;</operator><name pos:start="57:11" pos:end="57:22">intra_matrix</name></name>    <operator pos:start="57:27" pos:end="57:27">=</operator> <name pos:start="57:29" pos:end="57:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:8">dest</name><operator pos:start="59:9" pos:end="59:10">-&gt;</operator><name pos:start="59:11" pos:end="59:22">inter_matrix</name></name>    <operator pos:start="59:27" pos:end="59:27">=</operator> <name pos:start="59:29" pos:end="59:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><name pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:8">dest</name><operator pos:start="61:9" pos:end="61:10">-&gt;</operator><name pos:start="61:11" pos:end="61:21">rc_override</name></name>     <operator pos:start="61:27" pos:end="61:27">=</operator> <name pos:start="61:29" pos:end="61:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:33"><expr pos:start="63:5" pos:end="63:32"><name pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:8">dest</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:25">subtitle_header</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <name pos:start="63:29" pos:end="63:32">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="94:0"><if pos:start="65:5" pos:end="94:0">if <condition pos:start="65:8" pos:end="65:19">(<expr pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:11">src</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:18">rc_eq</name></name></expr>)</condition> <block pos:start="65:21" pos:end="94:0">{<block_content pos:start="67:9" pos:end="71:35">

        <expr_stmt pos:start="67:9" pos:end="67:44"><expr pos:start="67:9" pos:end="67:43"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:12">dest</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:19">rc_eq</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:43"><name pos:start="67:23" pos:end="67:31">av_strdup</name><argument_list pos:start="67:32" pos:end="67:43">(<argument pos:start="67:33" pos:end="67:42"><expr pos:start="67:33" pos:end="67:42"><name pos:start="67:33" pos:end="67:42"><name pos:start="67:33" pos:end="67:35">src</name><operator pos:start="67:36" pos:end="67:37">-&gt;</operator><name pos:start="67:38" pos:end="67:42">rc_eq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="71:35"><if pos:start="69:9" pos:end="71:35">if <condition pos:start="69:12" pos:end="69:25">(<expr pos:start="69:13" pos:end="69:24"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:24"><name pos:start="69:14" pos:end="69:17">dest</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:24">rc_eq</name></name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:35"><block_content pos:start="71:13" pos:end="71:35">

            <return pos:start="71:13" pos:end="71:35">return <expr pos:start="71:20" pos:end="71:34"><call pos:start="71:20" pos:end="71:34"><name pos:start="71:20" pos:end="71:26">AVERROR</name><argument_list pos:start="71:27" pos:end="71:34">(<argument pos:start="71:28" pos:end="71:33"><expr pos:start="71:28" pos:end="71:33"><name pos:start="71:28" pos:end="71:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:define pos:start="77:1" pos:end="93:5">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive> <cpp:macro pos:start="77:9" pos:end="77:46"><name pos:start="77:9" pos:end="77:30">alloc_and_copy_or_fail</name><parameter_list pos:start="77:31" pos:end="77:46">(<parameter pos:start="77:32" pos:end="77:34"><type pos:start="77:32" pos:end="77:34"><name pos:start="77:32" pos:end="77:34">obj</name></type></parameter>, <parameter pos:start="77:37" pos:end="77:40"><type pos:start="77:37" pos:end="77:40"><name pos:start="77:37" pos:end="77:40">size</name></type></parameter>, <parameter pos:start="77:43" pos:end="77:45"><type pos:start="77:43" pos:end="77:45"><name pos:start="77:43" pos:end="77:45">pad</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="79:5" pos:end="93:5">if (src-&gt;obj &amp;&amp; size &gt; 0) { \

        dest-&gt;obj = av_malloc(size + pad); \

        if (!dest-&gt;obj) \

            goto fail; \

        memcpy(dest-&gt;obj, src-&gt;obj, size); \

        if (pad) \

            memset(((uint8_t *) dest-&gt;obj) + size, 0, pad); \

    }</cpp:value></cpp:define>

    <expr_stmt pos:start="95:5" pos:end="97:57"><expr pos:start="95:5" pos:end="97:56"><call pos:start="95:5" pos:end="97:56"><name pos:start="95:5" pos:end="95:26">alloc_and_copy_or_fail</name><argument_list pos:start="95:27" pos:end="97:56">(<argument pos:start="95:28" pos:end="95:36"><expr pos:start="95:28" pos:end="95:36"><name pos:start="95:28" pos:end="95:36">extradata</name></expr></argument>,    <argument pos:start="95:42" pos:end="95:60"><expr pos:start="95:42" pos:end="95:60"><name pos:start="95:42" pos:end="95:60"><name pos:start="95:42" pos:end="95:44">src</name><operator pos:start="95:45" pos:end="95:46">-&gt;</operator><name pos:start="95:47" pos:end="95:60">extradata_size</name></name></expr></argument>,

                           <argument pos:start="97:28" pos:end="97:55"><expr pos:start="97:28" pos:end="97:55"><name pos:start="97:28" pos:end="97:55">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:66"><expr pos:start="99:5" pos:end="99:65"><call pos:start="99:5" pos:end="99:65"><name pos:start="99:5" pos:end="99:26">alloc_and_copy_or_fail</name><argument_list pos:start="99:27" pos:end="99:65">(<argument pos:start="99:28" pos:end="99:39"><expr pos:start="99:28" pos:end="99:39"><name pos:start="99:28" pos:end="99:39">intra_matrix</name></expr></argument>, <argument pos:start="99:42" pos:end="99:61"><expr pos:start="99:42" pos:end="99:61"><literal type="number" pos:start="99:42" pos:end="99:43">64</literal> <operator pos:start="99:45" pos:end="99:45">*</operator> <sizeof pos:start="99:47" pos:end="99:61">sizeof<argument_list pos:start="99:53" pos:end="99:61">(<argument pos:start="99:54" pos:end="99:60"><expr pos:start="99:54" pos:end="99:60"><name pos:start="99:54" pos:end="99:60">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="99:64" pos:end="99:64"><expr pos:start="99:64" pos:end="99:64"><literal type="number" pos:start="99:64" pos:end="99:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:66"><expr pos:start="101:5" pos:end="101:65"><call pos:start="101:5" pos:end="101:65"><name pos:start="101:5" pos:end="101:26">alloc_and_copy_or_fail</name><argument_list pos:start="101:27" pos:end="101:65">(<argument pos:start="101:28" pos:end="101:39"><expr pos:start="101:28" pos:end="101:39"><name pos:start="101:28" pos:end="101:39">inter_matrix</name></expr></argument>, <argument pos:start="101:42" pos:end="101:61"><expr pos:start="101:42" pos:end="101:61"><literal type="number" pos:start="101:42" pos:end="101:43">64</literal> <operator pos:start="101:45" pos:end="101:45">*</operator> <sizeof pos:start="101:47" pos:end="101:61">sizeof<argument_list pos:start="101:53" pos:end="101:61">(<argument pos:start="101:54" pos:end="101:60"><expr pos:start="101:54" pos:end="101:60"><name pos:start="101:54" pos:end="101:60">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="101:64" pos:end="101:64"><expr pos:start="101:64" pos:end="101:64"><literal type="number" pos:start="101:64" pos:end="101:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:96"><expr pos:start="103:5" pos:end="103:95"><call pos:start="103:5" pos:end="103:95"><name pos:start="103:5" pos:end="103:26">alloc_and_copy_or_fail</name><argument_list pos:start="103:27" pos:end="103:95">(<argument pos:start="103:28" pos:end="103:38"><expr pos:start="103:28" pos:end="103:38"><name pos:start="103:28" pos:end="103:38">rc_override</name></expr></argument>,  <argument pos:start="103:42" pos:end="103:91"><expr pos:start="103:42" pos:end="103:91"><name pos:start="103:42" pos:end="103:63"><name pos:start="103:42" pos:end="103:44">src</name><operator pos:start="103:45" pos:end="103:46">-&gt;</operator><name pos:start="103:47" pos:end="103:63">rc_override_count</name></name> <operator pos:start="103:65" pos:end="103:65">*</operator> <sizeof pos:start="103:67" pos:end="103:91">sizeof<argument_list pos:start="103:73" pos:end="103:91">(<argument pos:start="103:74" pos:end="103:90"><expr pos:start="103:74" pos:end="103:90"><operator pos:start="103:74" pos:end="103:74">*</operator><name pos:start="103:75" pos:end="103:90"><name pos:start="103:75" pos:end="103:77">src</name><operator pos:start="103:78" pos:end="103:79">-&gt;</operator><name pos:start="103:80" pos:end="103:90">rc_override</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="103:94" pos:end="103:94"><expr pos:start="103:94" pos:end="103:94"><literal type="number" pos:start="103:94" pos:end="103:94">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:74"><expr pos:start="105:5" pos:end="105:73"><call pos:start="105:5" pos:end="105:73"><name pos:start="105:5" pos:end="105:26">alloc_and_copy_or_fail</name><argument_list pos:start="105:27" pos:end="105:73">(<argument pos:start="105:28" pos:end="105:42"><expr pos:start="105:28" pos:end="105:42"><name pos:start="105:28" pos:end="105:42">subtitle_header</name></expr></argument>, <argument pos:start="105:45" pos:end="105:69"><expr pos:start="105:45" pos:end="105:69"><name pos:start="105:45" pos:end="105:69"><name pos:start="105:45" pos:end="105:47">src</name><operator pos:start="105:48" pos:end="105:49">-&gt;</operator><name pos:start="105:50" pos:end="105:69">subtitle_header_size</name></name></expr></argument>, <argument pos:start="105:72" pos:end="105:72"><expr pos:start="105:72" pos:end="105:72"><literal type="number" pos:start="105:72" pos:end="105:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="110:0"><expr pos:start="107:5" pos:end="107:58"><name pos:start="107:5" pos:end="107:30"><name pos:start="107:5" pos:end="107:8">dest</name><operator pos:start="107:9" pos:end="107:10">-&gt;</operator><name pos:start="107:11" pos:end="107:30">subtitle_header_size</name></name> <operator pos:start="107:32" pos:end="107:32">=</operator> <name pos:start="107:34" pos:end="107:58"><name pos:start="107:34" pos:end="107:36">src</name><operator pos:start="107:37" pos:end="107:38">-&gt;</operator><name pos:start="107:39" pos:end="107:58">subtitle_header_size</name></name></expr>;</expr_stmt>

<cpp:undef pos:start="109:1" pos:end="109:29">#<cpp:directive pos:start="109:2" pos:end="109:6">undef</cpp:directive> <name pos:start="109:8" pos:end="109:29">alloc_and_copy_or_fail</name></cpp:undef>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>



<label pos:start="117:1" pos:end="117:5"><name pos:start="117:1" pos:end="117:4">fail</name>:</label>

    <expr_stmt pos:start="119:5" pos:end="119:33"><expr pos:start="119:5" pos:end="119:32"><call pos:start="119:5" pos:end="119:32"><name pos:start="119:5" pos:end="119:12">av_freep</name><argument_list pos:start="119:13" pos:end="119:32">(<argument pos:start="119:14" pos:end="119:31"><expr pos:start="119:14" pos:end="119:31"><operator pos:start="119:14" pos:end="119:14">&amp;</operator><name pos:start="119:15" pos:end="119:31"><name pos:start="119:15" pos:end="119:18">dest</name><operator pos:start="119:19" pos:end="119:20">-&gt;</operator><name pos:start="119:21" pos:end="119:31">rc_override</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:34"><expr pos:start="121:5" pos:end="121:33"><call pos:start="121:5" pos:end="121:33"><name pos:start="121:5" pos:end="121:12">av_freep</name><argument_list pos:start="121:13" pos:end="121:33">(<argument pos:start="121:14" pos:end="121:32"><expr pos:start="121:14" pos:end="121:32"><operator pos:start="121:14" pos:end="121:14">&amp;</operator><name pos:start="121:15" pos:end="121:32"><name pos:start="121:15" pos:end="121:18">dest</name><operator pos:start="121:19" pos:end="121:20">-&gt;</operator><name pos:start="121:21" pos:end="121:32">intra_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:34"><expr pos:start="123:5" pos:end="123:33"><call pos:start="123:5" pos:end="123:33"><name pos:start="123:5" pos:end="123:12">av_freep</name><argument_list pos:start="123:13" pos:end="123:33">(<argument pos:start="123:14" pos:end="123:32"><expr pos:start="123:14" pos:end="123:32"><operator pos:start="123:14" pos:end="123:14">&amp;</operator><name pos:start="123:15" pos:end="123:32"><name pos:start="123:15" pos:end="123:18">dest</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:32">inter_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:31"><expr pos:start="125:5" pos:end="125:30"><call pos:start="125:5" pos:end="125:30"><name pos:start="125:5" pos:end="125:12">av_freep</name><argument_list pos:start="125:13" pos:end="125:30">(<argument pos:start="125:14" pos:end="125:29"><expr pos:start="125:14" pos:end="125:29"><operator pos:start="125:14" pos:end="125:14">&amp;</operator><name pos:start="125:15" pos:end="125:29"><name pos:start="125:15" pos:end="125:18">dest</name><operator pos:start="125:19" pos:end="125:20">-&gt;</operator><name pos:start="125:21" pos:end="125:29">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:27"><expr pos:start="127:5" pos:end="127:26"><call pos:start="127:5" pos:end="127:26"><name pos:start="127:5" pos:end="127:12">av_freep</name><argument_list pos:start="127:13" pos:end="127:26">(<argument pos:start="127:14" pos:end="127:25"><expr pos:start="127:14" pos:end="127:25"><operator pos:start="127:14" pos:end="127:14">&amp;</operator><name pos:start="127:15" pos:end="127:25"><name pos:start="127:15" pos:end="127:18">dest</name><operator pos:start="127:19" pos:end="127:20">-&gt;</operator><name pos:start="127:21" pos:end="127:25">rc_eq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="129:5" pos:end="129:27">return <expr pos:start="129:12" pos:end="129:26"><call pos:start="129:12" pos:end="129:26"><name pos:start="129:12" pos:end="129:18">AVERROR</name><argument_list pos:start="129:19" pos:end="129:26">(<argument pos:start="129:20" pos:end="129:25"><expr pos:start="129:20" pos:end="129:25"><name pos:start="129:20" pos:end="129:25">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
