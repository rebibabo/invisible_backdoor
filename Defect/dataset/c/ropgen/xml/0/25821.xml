<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25821.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">input_type_enum</name><parameter_list pos:start="1:21" pos:end="5:34">(<parameter pos:start="1:22" pos:end="1:31"><decl pos:start="1:22" pos:end="1:31"><type pos:start="1:22" pos:end="1:31"><name pos:start="1:22" pos:end="1:28">Visitor</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:31">v</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:41"><decl pos:start="1:34" pos:end="1:41"><type pos:start="1:34" pos:end="1:41"><name pos:start="1:34" pos:end="1:36">int</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">obj</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:64"><decl pos:start="1:44" pos:end="1:64"><type pos:start="1:44" pos:end="1:62"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:64"><name pos:start="1:56" pos:end="1:62">strings</name><index pos:start="1:63" pos:end="1:64">[]</index></name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:37"><decl pos:start="3:22" pos:end="3:37"><type pos:start="3:22" pos:end="3:37"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:37">kind</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:55"><decl pos:start="3:40" pos:end="3:55"><type pos:start="3:40" pos:end="3:55"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">char</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:55">name</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:33"><decl pos:start="5:22" pos:end="5:33"><type pos:start="5:22" pos:end="5:33"><name pos:start="5:22" pos:end="5:26">Error</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="59:1">{<block_content pos:start="9:5" pos:end="57:17">

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:17">value</name> <init pos:start="9:19" pos:end="9:21">= <expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:18">enum_str</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:20"><expr pos:start="15:5" pos:end="15:19"><call pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:19">(<argument pos:start="15:12" pos:end="15:18"><expr pos:start="15:12" pos:end="15:18"><name pos:start="15:12" pos:end="15:18">strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:45"><expr pos:start="19:5" pos:end="19:44"><call pos:start="19:5" pos:end="19:44"><name pos:start="19:5" pos:end="19:18">visit_type_str</name><argument_list pos:start="19:19" pos:end="19:44">(<argument pos:start="19:20" pos:end="19:20"><expr pos:start="19:20" pos:end="19:20"><name pos:start="19:20" pos:end="19:20">v</name></expr></argument>, <argument pos:start="19:23" pos:end="19:31"><expr pos:start="19:23" pos:end="19:31"><operator pos:start="19:23" pos:end="19:23">&amp;</operator><name pos:start="19:24" pos:end="19:31">enum_str</name></expr></argument>, <argument pos:start="19:34" pos:end="19:37"><expr pos:start="19:34" pos:end="19:37"><name pos:start="19:34" pos:end="19:37">name</name></expr></argument>, <argument pos:start="19:40" pos:end="19:43"><expr pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:43">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:27">(<expr pos:start="21:9" pos:end="21:26"><call pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:20">error_is_set</name><argument_list pos:start="21:21" pos:end="21:26">(<argument pos:start="21:22" pos:end="21:25"><expr pos:start="21:22" pos:end="21:25"><name pos:start="21:22" pos:end="21:25">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:29" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="29:5" pos:end="39:5">while <condition pos:start="29:11" pos:end="29:34">(<expr pos:start="29:12" pos:end="29:33"><name pos:start="29:12" pos:end="29:25"><name pos:start="29:12" pos:end="29:18">strings</name><index pos:start="29:19" pos:end="29:25">[<expr pos:start="29:20" pos:end="29:24"><name pos:start="29:20" pos:end="29:24">value</name></expr>]</index></name> <operator pos:start="29:27" pos:end="29:28">!=</operator> <name pos:start="29:30" pos:end="29:33">NULL</name></expr>)</condition> <block pos:start="29:36" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:16">

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:50">(<expr pos:start="31:13" pos:end="31:49"><call pos:start="31:13" pos:end="31:44"><name pos:start="31:13" pos:end="31:18">strcmp</name><argument_list pos:start="31:19" pos:end="31:44">(<argument pos:start="31:20" pos:end="31:33"><expr pos:start="31:20" pos:end="31:33"><name pos:start="31:20" pos:end="31:33"><name pos:start="31:20" pos:end="31:26">strings</name><index pos:start="31:27" pos:end="31:33">[<expr pos:start="31:28" pos:end="31:32"><name pos:start="31:28" pos:end="31:32">value</name></expr>]</index></name></expr></argument>, <argument pos:start="31:36" pos:end="31:43"><expr pos:start="31:36" pos:end="31:43"><name pos:start="31:36" pos:end="31:43">enum_str</name></expr></argument>)</argument_list></call> <operator pos:start="31:46" pos:end="31:47">==</operator> <literal type="number" pos:start="31:49" pos:end="31:49">0</literal></expr>)</condition> <block pos:start="31:52" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:18">

            <break pos:start="33:13" pos:end="33:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:13">value</name><operator pos:start="37:14" pos:end="37:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:31">(<expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:15">strings</name><index pos:start="43:16" pos:end="43:22">[<expr pos:start="43:17" pos:end="43:21"><name pos:start="43:17" pos:end="43:21">value</name></expr>]</index></name> <operator pos:start="43:24" pos:end="43:25">==</operator> <name pos:start="43:27" pos:end="43:30">NULL</name></expr>)</condition> <block pos:start="43:33" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:15">

        <expr_stmt pos:start="45:9" pos:end="45:70"><expr pos:start="45:9" pos:end="45:69"><call pos:start="45:9" pos:end="45:69"><name pos:start="45:9" pos:end="45:17">error_set</name><argument_list pos:start="45:18" pos:end="45:69">(<argument pos:start="45:19" pos:end="45:22"><expr pos:start="45:19" pos:end="45:22"><name pos:start="45:19" pos:end="45:22">errp</name></expr></argument>, <argument pos:start="45:25" pos:end="45:46"><expr pos:start="45:25" pos:end="45:46"><name pos:start="45:25" pos:end="45:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="45:49" pos:end="45:68"><expr pos:start="45:49" pos:end="45:68"><ternary pos:start="45:49" pos:end="45:68"><condition pos:start="45:49" pos:end="45:54"><expr pos:start="45:49" pos:end="45:52"><name pos:start="45:49" pos:end="45:52">name</name></expr> ?</condition><then pos:start="45:56" pos:end="45:59"> <expr pos:start="45:56" pos:end="45:59"><name pos:start="45:56" pos:end="45:59">name</name></expr> </then><else pos:start="45:61" pos:end="45:68">: <expr pos:start="45:63" pos:end="45:68"><literal type="string" pos:start="45:63" pos:end="45:68">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><call pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:14">g_free</name><argument_list pos:start="47:15" pos:end="47:24">(<argument pos:start="47:16" pos:end="47:23"><expr pos:start="47:16" pos:end="47:23"><name pos:start="47:16" pos:end="47:23">enum_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:21"><expr pos:start="55:5" pos:end="55:20"><call pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:10">g_free</name><argument_list pos:start="55:11" pos:end="55:20">(<argument pos:start="55:12" pos:end="55:19"><expr pos:start="55:12" pos:end="55:19"><name pos:start="55:12" pos:end="55:19">enum_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:16"><operator pos:start="57:5" pos:end="57:5">*</operator><name pos:start="57:6" pos:end="57:8">obj</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <name pos:start="57:12" pos:end="57:16">value</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
