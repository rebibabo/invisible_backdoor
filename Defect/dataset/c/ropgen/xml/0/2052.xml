<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2052.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">virtio_ccw_notify</name><parameter_list pos:start="1:30" pos:end="1:62">(<parameter pos:start="1:31" pos:end="1:44"><decl pos:start="1:31" pos:end="1:44"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:41">DeviceState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">d</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:61"><decl pos:start="1:47" pos:end="1:61"><type pos:start="1:47" pos:end="1:61"><name pos:start="1:47" pos:end="1:54">uint16_t</name></type> <name pos:start="1:56" pos:end="1:61">vector</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:5">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">VirtioCcwDevice</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">dev</name> <init pos:start="5:26" pos:end="5:52">= <expr pos:start="5:28" pos:end="5:52"><call pos:start="5:28" pos:end="5:52"><name pos:start="5:28" pos:end="5:49">to_virtio_ccw_dev_fast</name><argument_list pos:start="5:50" pos:end="5:52">(<argument pos:start="5:51" pos:end="5:51"><expr pos:start="5:51" pos:end="5:51"><name pos:start="5:51" pos:end="5:51">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">SubchDev</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">sch</name> <init pos:start="7:19" pos:end="7:28">= <expr pos:start="7:21" pos:end="7:28"><name pos:start="7:21" pos:end="7:28"><name pos:start="7:21" pos:end="7:23">dev</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:28">sch</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">indicators</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:14">vector</name> <operator pos:start="13:16" pos:end="13:17">&gt;=</operator> <literal type="number" pos:start="13:19" pos:end="13:21">128</literal></expr>)</condition> <block pos:start="13:24" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="107:5"><if pos:start="21:5" pos:end="81:5">if <condition pos:start="21:8" pos:end="21:38">(<expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:14">vector</name> <operator pos:start="21:16" pos:end="21:16">&lt;</operator> <name pos:start="21:18" pos:end="21:37">VIRTIO_PCI_QUEUE_MAX</name></expr>)</condition> <block pos:start="21:40" pos:end="81:5">{<block_content pos:start="23:9" pos:end="79:9">

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:29">(<expr pos:start="23:13" pos:end="23:28"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:28"><name pos:start="23:14" pos:end="23:16">dev</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:28">indicators</name></name></expr>)</condition> <block pos:start="23:31" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:19">

            <return pos:start="25:13" pos:end="25:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="79:9"><if pos:start="29:9" pos:end="61:9">if <condition pos:start="29:12" pos:end="29:32">(<expr pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:15">sch</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:31">thinint_active</name></name></expr>)</condition> <block pos:start="29:34" pos:end="61:9">{<block_content pos:start="43:13" pos:end="59:13">

            <comment type="block" pos:start="31:13" pos:end="41:15">/*

             * In the adapter interrupt case, indicators points to a

             * memory area that may be (way) larger than 64 bit and

             * ind_bit indicates the start of the indicators in a big

             * endian notation.

             */</comment>

            <decl_stmt pos:start="43:13" pos:end="43:62"><decl pos:start="43:13" pos:end="43:61"><type pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:20">uint64_t</name></type> <name pos:start="43:22" pos:end="43:28">ind_bit</name> <init pos:start="43:30" pos:end="43:61">= <expr pos:start="43:32" pos:end="43:61"><name pos:start="43:32" pos:end="43:61"><name pos:start="43:32" pos:end="43:34">dev</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:42">routes</name><operator pos:start="43:43" pos:end="43:43">.</operator><name pos:start="43:44" pos:end="43:50">adapter</name><operator pos:start="43:51" pos:end="43:51">.</operator><name pos:start="43:52" pos:end="43:61">ind_offset</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="47:13" pos:end="51:68"><expr pos:start="47:13" pos:end="51:67"><call pos:start="47:13" pos:end="51:67"><name pos:start="47:13" pos:end="47:33">virtio_set_ind_atomic</name><argument_list pos:start="47:34" pos:end="51:67">(<argument pos:start="47:35" pos:end="47:37"><expr pos:start="47:35" pos:end="47:37"><name pos:start="47:35" pos:end="47:37">sch</name></expr></argument>, <argument pos:start="47:40" pos:end="49:56"><expr pos:start="47:40" pos:end="49:56"><name pos:start="47:40" pos:end="47:60"><name pos:start="47:40" pos:end="47:42">dev</name><operator pos:start="47:43" pos:end="47:44">-&gt;</operator><name pos:start="47:45" pos:end="47:54">indicators</name><operator pos:start="47:55" pos:end="47:56">-&gt;</operator><name pos:start="47:57" pos:end="47:60">addr</name></name> <operator pos:start="47:62" pos:end="47:62">+</operator>

                                  <operator pos:start="49:35" pos:end="49:35">(</operator><name pos:start="49:36" pos:end="49:42">ind_bit</name> <operator pos:start="49:44" pos:end="49:44">+</operator> <name pos:start="49:46" pos:end="49:51">vector</name><operator pos:start="49:52" pos:end="49:52">)</operator> <operator pos:start="49:54" pos:end="49:54">/</operator> <literal type="number" pos:start="49:56" pos:end="49:56">8</literal></expr></argument>,

                                  <argument pos:start="51:35" pos:end="51:66"><expr pos:start="51:35" pos:end="51:66"><literal type="number" pos:start="51:35" pos:end="51:38">0x80</literal> <operator pos:start="51:40" pos:end="51:41">&gt;&gt;</operator> <operator pos:start="51:43" pos:end="51:43">(</operator><operator pos:start="51:44" pos:end="51:44">(</operator><name pos:start="51:45" pos:end="51:51">ind_bit</name> <operator pos:start="51:53" pos:end="51:53">+</operator> <name pos:start="51:55" pos:end="51:60">vector</name><operator pos:start="51:61" pos:end="51:61">)</operator> <operator pos:start="51:63" pos:end="51:63">%</operator> <literal type="number" pos:start="51:65" pos:end="51:65">8</literal><operator pos:start="51:66" pos:end="51:66">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="59:13"><if pos:start="53:13" pos:end="59:13">if <condition pos:start="53:16" pos:end="55:45">(<expr pos:start="53:17" pos:end="55:44"><operator pos:start="53:17" pos:end="53:17">!</operator><call pos:start="53:18" pos:end="55:44"><name pos:start="53:18" pos:end="53:38">virtio_set_ind_atomic</name><argument_list pos:start="53:39" pos:end="55:44">(<argument pos:start="53:40" pos:end="53:42"><expr pos:start="53:40" pos:end="53:42"><name pos:start="53:40" pos:end="53:42">sch</name></expr></argument>, <argument pos:start="53:45" pos:end="53:72"><expr pos:start="53:45" pos:end="53:72"><name pos:start="53:45" pos:end="53:72"><name pos:start="53:45" pos:end="53:47">dev</name><operator pos:start="53:48" pos:end="53:49">-&gt;</operator><name pos:start="53:50" pos:end="53:66">summary_indicator</name><operator pos:start="53:67" pos:end="53:68">-&gt;</operator><name pos:start="53:69" pos:end="53:72">addr</name></name></expr></argument>,

                                       <argument pos:start="55:40" pos:end="55:43"><expr pos:start="55:40" pos:end="55:43"><literal type="number" pos:start="55:40" pos:end="55:43">0x01</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:47" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:56">

                <expr_stmt pos:start="57:17" pos:end="57:56"><expr pos:start="57:17" pos:end="57:55"><call pos:start="57:17" pos:end="57:55"><name pos:start="57:17" pos:end="57:37">css_adapter_interrupt</name><argument_list pos:start="57:38" pos:end="57:55">(<argument pos:start="57:39" pos:end="57:54"><expr pos:start="57:39" pos:end="57:54"><name pos:start="57:39" pos:end="57:54"><name pos:start="57:39" pos:end="57:41">dev</name><operator pos:start="57:42" pos:end="57:43">-&gt;</operator><name pos:start="57:44" pos:end="57:54">thinint_isc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="79:9">else <block pos:start="61:16" pos:end="79:9">{<block_content pos:start="63:13" pos:end="77:46">

            <expr_stmt pos:start="63:13" pos:end="69:49"><expr pos:start="63:13" pos:end="69:48"><name pos:start="63:13" pos:end="63:22">indicators</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <call pos:start="63:26" pos:end="69:48"><name pos:start="63:26" pos:end="63:42">address_space_ldq</name><argument_list pos:start="63:43" pos:end="69:48">(<argument pos:start="63:44" pos:end="63:64"><expr pos:start="63:44" pos:end="63:64"><operator pos:start="63:44" pos:end="63:44">&amp;</operator><name pos:start="63:45" pos:end="63:64">address_space_memory</name></expr></argument>,

                                           <argument pos:start="65:44" pos:end="65:64"><expr pos:start="65:44" pos:end="65:64"><name pos:start="65:44" pos:end="65:64"><name pos:start="65:44" pos:end="65:46">dev</name><operator pos:start="65:47" pos:end="65:48">-&gt;</operator><name pos:start="65:49" pos:end="65:58">indicators</name><operator pos:start="65:59" pos:end="65:60">-&gt;</operator><name pos:start="65:61" pos:end="65:64">addr</name></name></expr></argument>,

                                           <argument pos:start="67:44" pos:end="67:65"><expr pos:start="67:44" pos:end="67:65"><name pos:start="67:44" pos:end="67:65">MEMTXATTRS_UNSPECIFIED</name></expr></argument>,

                                           <argument pos:start="69:44" pos:end="69:47"><expr pos:start="69:44" pos:end="69:47"><name pos:start="69:44" pos:end="69:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:41"><expr pos:start="71:13" pos:end="71:40"><name pos:start="71:13" pos:end="71:22">indicators</name> <operator pos:start="71:24" pos:end="71:25">|=</operator> <literal type="number" pos:start="71:27" pos:end="71:30">1ULL</literal> <operator pos:start="71:32" pos:end="71:33">&lt;&lt;</operator> <name pos:start="71:35" pos:end="71:40">vector</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="75:72"><expr pos:start="73:13" pos:end="75:71"><call pos:start="73:13" pos:end="75:71"><name pos:start="73:13" pos:end="73:29">address_space_stq</name><argument_list pos:start="73:30" pos:end="75:71">(<argument pos:start="73:31" pos:end="73:51"><expr pos:start="73:31" pos:end="73:51"><operator pos:start="73:31" pos:end="73:31">&amp;</operator><name pos:start="73:32" pos:end="73:51">address_space_memory</name></expr></argument>, <argument pos:start="73:54" pos:end="73:74"><expr pos:start="73:54" pos:end="73:74"><name pos:start="73:54" pos:end="73:74"><name pos:start="73:54" pos:end="73:56">dev</name><operator pos:start="73:57" pos:end="73:58">-&gt;</operator><name pos:start="73:59" pos:end="73:68">indicators</name><operator pos:start="73:69" pos:end="73:70">-&gt;</operator><name pos:start="73:71" pos:end="73:74">addr</name></name></expr></argument>,

                              <argument pos:start="75:31" pos:end="75:40"><expr pos:start="75:31" pos:end="75:40"><name pos:start="75:31" pos:end="75:40">indicators</name></expr></argument>, <argument pos:start="75:43" pos:end="75:64"><expr pos:start="75:43" pos:end="75:64"><name pos:start="75:43" pos:end="75:64">MEMTXATTRS_UNSPECIFIED</name></expr></argument>, <argument pos:start="75:67" pos:end="75:70"><expr pos:start="75:67" pos:end="75:70"><name pos:start="75:67" pos:end="75:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:46"><expr pos:start="77:13" pos:end="77:45"><call pos:start="77:13" pos:end="77:45"><name pos:start="77:13" pos:end="77:40">css_conditional_io_interrupt</name><argument_list pos:start="77:41" pos:end="77:45">(<argument pos:start="77:42" pos:end="77:44"><expr pos:start="77:42" pos:end="77:44"><name pos:start="77:42" pos:end="77:44">sch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="107:5">else <block pos:start="81:12" pos:end="107:5">{<block_content pos:start="83:9" pos:end="105:42">

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:30">(<expr pos:start="83:13" pos:end="83:29"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:29"><name pos:start="83:14" pos:end="83:16">dev</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:29">indicators2</name></name></expr>)</condition> <block pos:start="83:32" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:19">

            <return pos:start="85:13" pos:end="85:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:19"><expr pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:14">vector</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="97:45"><expr pos:start="91:9" pos:end="97:44"><name pos:start="91:9" pos:end="91:18">indicators</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <call pos:start="91:22" pos:end="97:44"><name pos:start="91:22" pos:end="91:38">address_space_ldq</name><argument_list pos:start="91:39" pos:end="97:44">(<argument pos:start="91:40" pos:end="91:60"><expr pos:start="91:40" pos:end="91:60"><operator pos:start="91:40" pos:end="91:40">&amp;</operator><name pos:start="91:41" pos:end="91:60">address_space_memory</name></expr></argument>,

                                       <argument pos:start="93:40" pos:end="93:61"><expr pos:start="93:40" pos:end="93:61"><name pos:start="93:40" pos:end="93:61"><name pos:start="93:40" pos:end="93:42">dev</name><operator pos:start="93:43" pos:end="93:44">-&gt;</operator><name pos:start="93:45" pos:end="93:55">indicators2</name><operator pos:start="93:56" pos:end="93:57">-&gt;</operator><name pos:start="93:58" pos:end="93:61">addr</name></name></expr></argument>,

                                       <argument pos:start="95:40" pos:end="95:61"><expr pos:start="95:40" pos:end="95:61"><name pos:start="95:40" pos:end="95:61">MEMTXATTRS_UNSPECIFIED</name></expr></argument>,

                                       <argument pos:start="97:40" pos:end="97:43"><expr pos:start="97:40" pos:end="97:43"><name pos:start="97:40" pos:end="97:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:37"><expr pos:start="99:9" pos:end="99:36"><name pos:start="99:9" pos:end="99:18">indicators</name> <operator pos:start="99:20" pos:end="99:21">|=</operator> <literal type="number" pos:start="99:23" pos:end="99:26">1ULL</literal> <operator pos:start="99:28" pos:end="99:29">&lt;&lt;</operator> <name pos:start="99:31" pos:end="99:36">vector</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="103:68"><expr pos:start="101:9" pos:end="103:67"><call pos:start="101:9" pos:end="103:67"><name pos:start="101:9" pos:end="101:25">address_space_stq</name><argument_list pos:start="101:26" pos:end="103:67">(<argument pos:start="101:27" pos:end="101:47"><expr pos:start="101:27" pos:end="101:47"><operator pos:start="101:27" pos:end="101:27">&amp;</operator><name pos:start="101:28" pos:end="101:47">address_space_memory</name></expr></argument>, <argument pos:start="101:50" pos:end="101:71"><expr pos:start="101:50" pos:end="101:71"><name pos:start="101:50" pos:end="101:71"><name pos:start="101:50" pos:end="101:52">dev</name><operator pos:start="101:53" pos:end="101:54">-&gt;</operator><name pos:start="101:55" pos:end="101:65">indicators2</name><operator pos:start="101:66" pos:end="101:67">-&gt;</operator><name pos:start="101:68" pos:end="101:71">addr</name></name></expr></argument>,

                          <argument pos:start="103:27" pos:end="103:36"><expr pos:start="103:27" pos:end="103:36"><name pos:start="103:27" pos:end="103:36">indicators</name></expr></argument>, <argument pos:start="103:39" pos:end="103:60"><expr pos:start="103:39" pos:end="103:60"><name pos:start="103:39" pos:end="103:60">MEMTXATTRS_UNSPECIFIED</name></expr></argument>, <argument pos:start="103:63" pos:end="103:66"><expr pos:start="103:63" pos:end="103:66"><name pos:start="103:63" pos:end="103:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:42"><expr pos:start="105:9" pos:end="105:41"><call pos:start="105:9" pos:end="105:41"><name pos:start="105:9" pos:end="105:36">css_conditional_io_interrupt</name><argument_list pos:start="105:37" pos:end="105:41">(<argument pos:start="105:38" pos:end="105:40"><expr pos:start="105:38" pos:end="105:40"><name pos:start="105:38" pos:end="105:40">sch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
