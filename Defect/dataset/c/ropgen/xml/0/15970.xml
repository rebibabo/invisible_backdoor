<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15970.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">os_daemonize</name><parameter_list pos:start="1:18" pos:end="1:23">(<parameter pos:start="1:19" pos:end="1:22"><decl pos:start="1:19" pos:end="1:22"><type pos:start="1:19" pos:end="1:22"><name pos:start="1:19" pos:end="1:22">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:5">

    <if_stmt pos:start="5:5" pos:end="105:5"><if pos:start="5:5" pos:end="105:5">if <condition pos:start="5:8" pos:end="5:18">(<expr pos:start="5:9" pos:end="5:17"><name pos:start="5:9" pos:end="5:17">daemonize</name></expr>)</condition> <block pos:start="5:20" pos:end="105:5">{<block_content pos:start="7:9" pos:end="103:33">

        <decl_stmt pos:start="7:9" pos:end="7:18"><decl pos:start="7:9" pos:end="7:17"><type pos:start="7:9" pos:end="7:13"><name pos:start="7:9" pos:end="7:13">pid_t</name></type> <name pos:start="7:15" pos:end="7:17">pid</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:19"><decl pos:start="9:9" pos:end="9:18"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:18"><name pos:start="9:13" pos:end="9:15">fds</name><index pos:start="9:16" pos:end="9:18">[<expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">2</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="13:9" pos:end="17:9"><if pos:start="13:9" pos:end="17:9">if <condition pos:start="13:12" pos:end="13:28">(<expr pos:start="13:13" pos:end="13:27"><call pos:start="13:13" pos:end="13:21"><name pos:start="13:13" pos:end="13:16">pipe</name><argument_list pos:start="13:17" pos:end="13:21">(<argument pos:start="13:18" pos:end="13:20"><expr pos:start="13:18" pos:end="13:20"><name pos:start="13:18" pos:end="13:20">fds</name></expr></argument>)</argument_list></call> <operator pos:start="13:23" pos:end="13:24">==</operator> <operator pos:start="13:26" pos:end="13:26">-</operator><literal type="number" pos:start="13:27" pos:end="13:27">1</literal></expr>)</condition> <block pos:start="13:30" pos:end="17:9">{<block_content pos:start="15:13" pos:end="15:20">

            <expr_stmt pos:start="15:13" pos:end="15:20"><expr pos:start="15:13" pos:end="15:19"><call pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:16">exit</name><argument_list pos:start="15:17" pos:end="15:19">(<argument pos:start="15:18" pos:end="15:18"><expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:21"><expr pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:11">pid</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:20"><name pos:start="21:15" pos:end="21:18">fork</name><argument_list pos:start="21:19" pos:end="21:20">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="67:13"><if pos:start="23:9" pos:end="63:13">if <condition pos:start="23:12" pos:end="23:20">(<expr pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:15">pid</name> <operator pos:start="23:17" pos:end="23:17">&gt;</operator> <literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr>)</condition> <block pos:start="23:22" pos:end="63:13">{<block_content pos:start="25:13" pos:end="61:13">

            <decl_stmt pos:start="25:13" pos:end="25:27"><decl pos:start="25:13" pos:end="25:26"><type pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:19">uint8_t</name></type> <name pos:start="25:21" pos:end="25:26">status</name></decl>;</decl_stmt>

            <decl_stmt pos:start="27:13" pos:end="27:24"><decl pos:start="27:13" pos:end="27:23"><type pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:19">ssize_t</name></type> <name pos:start="27:21" pos:end="27:23">len</name></decl>;</decl_stmt>



            <expr_stmt pos:start="31:13" pos:end="31:26"><expr pos:start="31:13" pos:end="31:25"><call pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:17">close</name><argument_list pos:start="31:18" pos:end="31:25">(<argument pos:start="31:19" pos:end="31:24"><expr pos:start="31:19" pos:end="31:24"><name pos:start="31:19" pos:end="31:24"><name pos:start="31:19" pos:end="31:21">fds</name><index pos:start="31:22" pos:end="31:24">[<expr pos:start="31:23" pos:end="31:23"><literal type="number" pos:start="31:23" pos:end="31:23">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <label pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:13">again</name>:</label>

            <expr_stmt pos:start="37:13" pos:end="37:43"><expr pos:start="37:13" pos:end="37:42"><name pos:start="37:13" pos:end="37:15">len</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:42"><name pos:start="37:19" pos:end="37:22">read</name><argument_list pos:start="37:23" pos:end="37:42">(<argument pos:start="37:24" pos:end="37:29"><expr pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:26">fds</name><index pos:start="37:27" pos:end="37:29">[<expr pos:start="37:28" pos:end="37:28"><literal type="number" pos:start="37:28" pos:end="37:28">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="37:32" pos:end="37:38"><expr pos:start="37:32" pos:end="37:38"><operator pos:start="37:32" pos:end="37:32">&amp;</operator><name pos:start="37:33" pos:end="37:38">status</name></expr></argument>, <argument pos:start="37:41" pos:end="37:41"><expr pos:start="37:41" pos:end="37:41"><literal type="number" pos:start="37:41" pos:end="37:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="43:13"><if pos:start="39:13" pos:end="43:13">if <condition pos:start="39:16" pos:end="39:46">(<expr pos:start="39:17" pos:end="39:45"><name pos:start="39:17" pos:end="39:19">len</name> <operator pos:start="39:21" pos:end="39:22">==</operator> <operator pos:start="39:24" pos:end="39:24">-</operator><literal type="number" pos:start="39:25" pos:end="39:25">1</literal> <operator pos:start="39:27" pos:end="39:28">&amp;&amp;</operator> <operator pos:start="39:30" pos:end="39:30">(</operator><name pos:start="39:31" pos:end="39:35">errno</name> <operator pos:start="39:37" pos:end="39:38">==</operator> <name pos:start="39:40" pos:end="39:44">EINTR</name><operator pos:start="39:45" pos:end="39:45">)</operator></expr>)</condition> <block pos:start="39:48" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:27">

                <goto pos:start="41:17" pos:end="41:27">goto <name pos:start="41:22" pos:end="41:26">again</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="45:13" pos:end="61:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:25">(<expr pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:19">len</name> <operator pos:start="45:21" pos:end="45:22">!=</operator> <literal type="number" pos:start="45:24" pos:end="45:24">1</literal></expr>)</condition> <block pos:start="45:27" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:24">

                <expr_stmt pos:start="47:17" pos:end="47:24"><expr pos:start="47:17" pos:end="47:23"><call pos:start="47:17" pos:end="47:23"><name pos:start="47:17" pos:end="47:20">exit</name><argument_list pos:start="47:21" pos:end="47:23">(<argument pos:start="47:22" pos:end="47:22"><expr pos:start="47:22" pos:end="47:22"><literal type="number" pos:start="47:22" pos:end="47:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if>

            <if type="elseif" pos:start="51:13" pos:end="57:13">else if <condition pos:start="51:21" pos:end="51:33">(<expr pos:start="51:22" pos:end="51:32"><name pos:start="51:22" pos:end="51:27">status</name> <operator pos:start="51:29" pos:end="51:30">==</operator> <literal type="number" pos:start="51:32" pos:end="51:32">1</literal></expr>)</condition> <block pos:start="51:35" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:24">

                <expr_stmt pos:start="53:17" pos:end="53:63"><expr pos:start="53:17" pos:end="53:62"><call pos:start="53:17" pos:end="53:62"><name pos:start="53:17" pos:end="53:23">fprintf</name><argument_list pos:start="53:24" pos:end="53:62">(<argument pos:start="53:25" pos:end="53:30"><expr pos:start="53:25" pos:end="53:30"><name pos:start="53:25" pos:end="53:30">stderr</name></expr></argument>, <argument pos:start="53:33" pos:end="53:61"><expr pos:start="53:33" pos:end="53:61"><literal type="string" pos:start="53:33" pos:end="53:61">"Could not acquire pidfile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:24"><expr pos:start="55:17" pos:end="55:23"><call pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:20">exit</name><argument_list pos:start="55:21" pos:end="55:23">(<argument pos:start="55:22" pos:end="55:22"><expr pos:start="55:22" pos:end="55:22"><literal type="number" pos:start="55:22" pos:end="55:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="57:15" pos:end="61:13">else <block pos:start="57:20" pos:end="61:13">{<block_content pos:start="59:17" pos:end="59:24">

                <expr_stmt pos:start="59:17" pos:end="59:24"><expr pos:start="59:17" pos:end="59:23"><call pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:20">exit</name><argument_list pos:start="59:21" pos:end="59:23">(<argument pos:start="59:22" pos:end="59:22"><expr pos:start="59:22" pos:end="59:22"><literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="63:15" pos:end="67:13">else if <condition pos:start="63:23" pos:end="63:31">(<expr pos:start="63:24" pos:end="63:30"><name pos:start="63:24" pos:end="63:26">pid</name> <operator pos:start="63:28" pos:end="63:28">&lt;</operator> <literal type="number" pos:start="63:30" pos:end="63:30">0</literal></expr>)</condition> <block pos:start="63:33" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:24">

                <expr_stmt pos:start="65:17" pos:end="65:24"><expr pos:start="65:17" pos:end="65:23"><call pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:20">exit</name><argument_list pos:start="65:21" pos:end="65:23">(<argument pos:start="65:22" pos:end="65:22"><expr pos:start="65:22" pos:end="65:22"><literal type="number" pos:start="65:22" pos:end="65:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><call pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:13">close</name><argument_list pos:start="71:14" pos:end="71:21">(<argument pos:start="71:15" pos:end="71:20"><expr pos:start="71:15" pos:end="71:20"><name pos:start="71:15" pos:end="71:20"><name pos:start="71:15" pos:end="71:17">fds</name><index pos:start="71:18" pos:end="71:20">[<expr pos:start="71:19" pos:end="71:19"><literal type="number" pos:start="71:19" pos:end="71:19">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:29"><expr pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:19">daemon_pipe</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:28"><name pos:start="73:23" pos:end="73:25">fds</name><index pos:start="73:26" pos:end="73:28">[<expr pos:start="73:27" pos:end="73:27"><literal type="number" pos:start="73:27" pos:end="73:27">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><call pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:24">qemu_set_cloexec</name><argument_list pos:start="75:25" pos:end="75:37">(<argument pos:start="75:26" pos:end="75:36"><expr pos:start="75:26" pos:end="75:36"><name pos:start="75:26" pos:end="75:36">daemon_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:17"><expr pos:start="79:9" pos:end="79:16"><call pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:14">setsid</name><argument_list pos:start="79:15" pos:end="79:16">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:21"><expr pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:11">pid</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:20"><name pos:start="83:15" pos:end="83:18">fork</name><argument_list pos:start="83:19" pos:end="83:20">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:15">pid</name> <operator pos:start="85:17" pos:end="85:17">&gt;</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>)</condition> <block pos:start="85:22" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:20">

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><call pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:16">exit</name><argument_list pos:start="87:17" pos:end="87:19">(<argument pos:start="87:18" pos:end="87:18"><expr pos:start="87:18" pos:end="87:18"><literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="89:11" pos:end="93:9">else if <condition pos:start="89:19" pos:end="89:27">(<expr pos:start="89:20" pos:end="89:26"><name pos:start="89:20" pos:end="89:22">pid</name> <operator pos:start="89:24" pos:end="89:24">&lt;</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>)</condition> <block pos:start="89:29" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:20">

            <expr_stmt pos:start="91:13" pos:end="91:20"><expr pos:start="91:13" pos:end="91:19"><call pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:16">exit</name><argument_list pos:start="91:17" pos:end="91:19">(<argument pos:start="91:18" pos:end="91:18"><expr pos:start="91:18" pos:end="91:18"><literal type="number" pos:start="91:18" pos:end="91:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:19"><expr pos:start="95:9" pos:end="95:18"><call pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:13">umask</name><argument_list pos:start="95:14" pos:end="95:18">(<argument pos:start="95:15" pos:end="95:17"><expr pos:start="95:15" pos:end="95:17"><literal type="number" pos:start="95:15" pos:end="95:17">027</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:33"><expr pos:start="99:9" pos:end="99:32"><call pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:14">signal</name><argument_list pos:start="99:15" pos:end="99:32">(<argument pos:start="99:16" pos:end="99:22"><expr pos:start="99:16" pos:end="99:22"><name pos:start="99:16" pos:end="99:22">SIGTSTP</name></expr></argument>, <argument pos:start="99:25" pos:end="99:31"><expr pos:start="99:25" pos:end="99:31"><name pos:start="99:25" pos:end="99:31">SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:33"><expr pos:start="101:9" pos:end="101:32"><call pos:start="101:9" pos:end="101:32"><name pos:start="101:9" pos:end="101:14">signal</name><argument_list pos:start="101:15" pos:end="101:32">(<argument pos:start="101:16" pos:end="101:22"><expr pos:start="101:16" pos:end="101:22"><name pos:start="101:16" pos:end="101:22">SIGTTOU</name></expr></argument>, <argument pos:start="101:25" pos:end="101:31"><expr pos:start="101:25" pos:end="101:31"><name pos:start="101:25" pos:end="101:31">SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:33"><expr pos:start="103:9" pos:end="103:32"><call pos:start="103:9" pos:end="103:32"><name pos:start="103:9" pos:end="103:14">signal</name><argument_list pos:start="103:15" pos:end="103:32">(<argument pos:start="103:16" pos:end="103:22"><expr pos:start="103:16" pos:end="103:22"><name pos:start="103:16" pos:end="103:22">SIGTTIN</name></expr></argument>, <argument pos:start="103:25" pos:end="103:31"><expr pos:start="103:25" pos:end="103:31"><name pos:start="103:25" pos:end="103:31">SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
