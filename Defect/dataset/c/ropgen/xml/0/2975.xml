<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2975.c" pos:tabs="8"><function pos:start="1:1" pos:end="459:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">shorten_decode_frame</name><parameter_list pos:start="1:32" pos:end="3:68">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:50"><decl pos:start="3:33" pos:end="3:50"><type pos:start="3:33" pos:end="3:50"><name pos:start="3:33" pos:end="3:35">int</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:50">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:67"><decl pos:start="3:53" pos:end="3:67"><type pos:start="3:53" pos:end="3:67"><name pos:start="3:53" pos:end="3:60">AVPacket</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:67">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="459:1">{<block_content pos:start="7:5" pos:end="457:17">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">frame</name>     <init pos:start="7:24" pos:end="7:29">= <expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name>       <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">ShortenContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name>  <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:30">avctx</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:25">input_buf_size</name> <init pos:start="15:27" pos:end="15:29">= <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:44">/* allocate internal bitstream buffer */</comment>

    <if_stmt pos:start="23:5" pos:end="45:5"><if pos:start="23:5" pos:end="45:5">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:24">max_framesize</name></name> <operator pos:start="23:26" pos:end="23:27">==</operator> <literal type="number" pos:start="23:29" pos:end="23:29">0</literal></expr>)</condition> <block pos:start="23:32" pos:end="45:5">{<block_content pos:start="25:9" pos:end="43:31">

        <decl_stmt pos:start="25:9" pos:end="25:22"><decl pos:start="25:9" pos:end="25:21"><type pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:12">void</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:21">tmp_ptr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:24">max_framesize</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <literal type="number" pos:start="27:28" pos:end="27:31">8192</literal></expr>;</expr_stmt> <comment type="line" pos:start="27:34" pos:end="27:83">// should hopefully be enough for the first header</comment>

        <expr_stmt pos:start="29:9" pos:end="31:83"><expr pos:start="29:9" pos:end="31:82"><name pos:start="29:9" pos:end="29:15">tmp_ptr</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="31:82"><name pos:start="29:19" pos:end="29:33">av_fast_realloc</name><argument_list pos:start="29:34" pos:end="31:82">(<argument pos:start="29:35" pos:end="29:46"><expr pos:start="29:35" pos:end="29:46"><name pos:start="29:35" pos:end="29:46"><name pos:start="29:35" pos:end="29:35">s</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:46">bitstream</name></name></expr></argument>, <argument pos:start="29:49" pos:end="29:76"><expr pos:start="29:49" pos:end="29:76"><operator pos:start="29:49" pos:end="29:49">&amp;</operator><name pos:start="29:50" pos:end="29:76"><name pos:start="29:50" pos:end="29:50">s</name><operator pos:start="29:51" pos:end="29:52">-&gt;</operator><name pos:start="29:53" pos:end="29:76">allocated_bitstream_size</name></name></expr></argument>,

                                  <argument pos:start="31:35" pos:end="31:81"><expr pos:start="31:35" pos:end="31:81"><name pos:start="31:35" pos:end="31:50"><name pos:start="31:35" pos:end="31:35">s</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:50">max_framesize</name></name> <operator pos:start="31:52" pos:end="31:52">+</operator> <name pos:start="31:54" pos:end="31:81">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:21">(<expr pos:start="33:13" pos:end="33:20"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:20">tmp_ptr</name></expr>)</condition> <block pos:start="33:23" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:35">

            <expr_stmt pos:start="35:13" pos:end="35:79"><expr pos:start="35:13" pos:end="35:78"><call pos:start="35:13" pos:end="35:78"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:78">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:41" pos:end="35:77"><expr pos:start="35:41" pos:end="35:77"><literal type="string" pos:start="35:41" pos:end="35:77">"error allocating bitstream buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:35">return <expr pos:start="37:20" pos:end="37:34"><call pos:start="37:20" pos:end="37:34"><name pos:start="37:20" pos:end="37:26">AVERROR</name><argument_list pos:start="37:27" pos:end="37:34">(<argument pos:start="37:28" pos:end="37:33"><expr pos:start="37:28" pos:end="37:33"><name pos:start="37:28" pos:end="37:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:56"><expr pos:start="41:9" pos:end="41:55"><call pos:start="41:9" pos:end="41:55"><name pos:start="41:9" pos:end="41:14">memset</name><argument_list pos:start="41:15" pos:end="41:55">(<argument pos:start="41:16" pos:end="41:22"><expr pos:start="41:16" pos:end="41:22"><name pos:start="41:16" pos:end="41:22">tmp_ptr</name></expr></argument>, <argument pos:start="41:25" pos:end="41:25"><expr pos:start="41:25" pos:end="41:25"><literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr></argument>, <argument pos:start="41:28" pos:end="41:54"><expr pos:start="41:28" pos:end="41:54"><name pos:start="41:28" pos:end="41:54"><name pos:start="41:28" pos:end="41:28">s</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:54">allocated_bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:20">bitstream</name></name> <operator pos:start="43:22" pos:end="43:22">=</operator> <name pos:start="43:24" pos:end="43:30">tmp_ptr</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:56">/* append current packet data to bitstream buffer */</comment>

    <if_stmt pos:start="51:5" pos:end="97:5"><if pos:start="51:5" pos:end="97:5">if <condition pos:start="51:8" pos:end="51:30">(<expr pos:start="51:9" pos:end="51:29"><literal type="number" pos:start="51:9" pos:end="51:9">1</literal> <operator pos:start="51:11" pos:end="51:12">&amp;&amp;</operator> <name pos:start="51:14" pos:end="51:29"><name pos:start="51:14" pos:end="51:14">s</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:29">max_framesize</name></name></expr>)</condition> <block pos:start="51:32" pos:end="97:5">{<block_content pos:start="53:9" pos:end="95:9"> <comment type="line" pos:start="51:34" pos:end="51:50">//FIXME truncated</comment>

        <expr_stmt pos:start="53:9" pos:end="53:79"><expr pos:start="53:9" pos:end="53:78"><name pos:start="53:9" pos:end="53:16">buf_size</name>       <operator pos:start="53:24" pos:end="53:24">=</operator> <call pos:start="53:26" pos:end="53:78"><name pos:start="53:26" pos:end="53:30">FFMIN</name><argument_list pos:start="53:31" pos:end="53:78">(<argument pos:start="53:32" pos:end="53:39"><expr pos:start="53:32" pos:end="53:39"><name pos:start="53:32" pos:end="53:39">buf_size</name></expr></argument>, <argument pos:start="53:42" pos:end="53:77"><expr pos:start="53:42" pos:end="53:77"><name pos:start="53:42" pos:end="53:57"><name pos:start="53:42" pos:end="53:42">s</name><operator pos:start="53:43" pos:end="53:44">-&gt;</operator><name pos:start="53:45" pos:end="53:57">max_framesize</name></name> <operator pos:start="53:59" pos:end="53:59">-</operator> <name pos:start="53:61" pos:end="53:77"><name pos:start="53:61" pos:end="53:61">s</name><operator pos:start="53:62" pos:end="53:63">-&gt;</operator><name pos:start="53:64" pos:end="53:77">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:22">input_buf_size</name> <operator pos:start="55:24" pos:end="55:24">=</operator> <name pos:start="55:26" pos:end="55:33">buf_size</name></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="69:9"><if pos:start="59:9" pos:end="69:9">if <condition pos:start="59:12" pos:end="61:40">(<expr pos:start="59:13" pos:end="61:39"><name pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:30">bitstream_index</name></name> <operator pos:start="59:32" pos:end="59:32">+</operator> <name pos:start="59:34" pos:end="59:50"><name pos:start="59:34" pos:end="59:34">s</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:50">bitstream_size</name></name> <operator pos:start="59:52" pos:end="59:52">+</operator> <name pos:start="59:54" pos:end="59:61">buf_size</name> <operator pos:start="59:63" pos:end="59:63">+</operator> <name pos:start="59:65" pos:end="59:92">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="59:94" pos:end="59:94">&gt;</operator>

            <name pos:start="61:13" pos:end="61:39"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:39">allocated_bitstream_size</name></name></expr>)</condition> <block pos:start="61:42" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:35">

            <expr_stmt pos:start="63:13" pos:end="65:39"><expr pos:start="63:13" pos:end="65:38"><call pos:start="63:13" pos:end="65:38"><name pos:start="63:13" pos:end="63:19">memmove</name><argument_list pos:start="63:20" pos:end="65:38">(<argument pos:start="63:21" pos:end="63:32"><expr pos:start="63:21" pos:end="63:32"><name pos:start="63:21" pos:end="63:32"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:32">bitstream</name></name></expr></argument>, <argument pos:start="63:35" pos:end="63:67"><expr pos:start="63:35" pos:end="63:67"><operator pos:start="63:35" pos:end="63:35">&amp;</operator><name pos:start="63:36" pos:end="63:67"><name pos:start="63:36" pos:end="63:36">s</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:47">bitstream</name><index pos:start="63:48" pos:end="63:67">[<expr pos:start="63:49" pos:end="63:66"><name pos:start="63:49" pos:end="63:66"><name pos:start="63:49" pos:end="63:49">s</name><operator pos:start="63:50" pos:end="63:51">-&gt;</operator><name pos:start="63:52" pos:end="63:66">bitstream_index</name></name></expr>]</index></name></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:37"><expr pos:start="65:21" pos:end="65:37"><name pos:start="65:21" pos:end="65:37"><name pos:start="65:21" pos:end="65:21">s</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:37">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:35"><expr pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:30">bitstream_index</name></name> <operator pos:start="67:32" pos:end="67:32">=</operator> <literal type="number" pos:start="67:34" pos:end="67:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="75:29"><if pos:start="71:9" pos:end="75:29">if <condition pos:start="71:12" pos:end="71:16">(<expr pos:start="71:13" pos:end="71:15"><name pos:start="71:13" pos:end="71:15">buf</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="75:29"><block_content pos:start="73:13" pos:end="75:29">

            <expr_stmt pos:start="73:13" pos:end="75:29"><expr pos:start="73:13" pos:end="75:28"><call pos:start="73:13" pos:end="75:28"><name pos:start="73:13" pos:end="73:18">memcpy</name><argument_list pos:start="73:19" pos:end="75:28">(<argument pos:start="73:20" pos:end="73:72"><expr pos:start="73:20" pos:end="73:72"><operator pos:start="73:20" pos:end="73:20">&amp;</operator><name pos:start="73:21" pos:end="73:72"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:32">bitstream</name><index pos:start="73:33" pos:end="73:72">[<expr pos:start="73:34" pos:end="73:71"><name pos:start="73:34" pos:end="73:51"><name pos:start="73:34" pos:end="73:34">s</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:51">bitstream_index</name></name> <operator pos:start="73:53" pos:end="73:53">+</operator> <name pos:start="73:55" pos:end="73:71"><name pos:start="73:55" pos:end="73:55">s</name><operator pos:start="73:56" pos:end="73:57">-&gt;</operator><name pos:start="73:58" pos:end="73:71">bitstream_size</name></name></expr>]</index></name></expr></argument>, <argument pos:start="73:75" pos:end="73:77"><expr pos:start="73:75" pos:end="73:77"><name pos:start="73:75" pos:end="73:77">buf</name></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:27"><expr pos:start="75:20" pos:end="75:27"><name pos:start="75:20" pos:end="75:27">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:62"><expr pos:start="77:9" pos:end="77:61"><name pos:start="77:9" pos:end="77:11">buf</name>               <operator pos:start="77:27" pos:end="77:27">=</operator> <operator pos:start="77:29" pos:end="77:29">&amp;</operator><name pos:start="77:30" pos:end="77:61"><name pos:start="77:30" pos:end="77:30">s</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:41">bitstream</name><index pos:start="77:42" pos:end="77:61">[<expr pos:start="77:43" pos:end="77:60"><name pos:start="77:43" pos:end="77:60"><name pos:start="77:43" pos:end="77:43">s</name><operator pos:start="77:44" pos:end="77:45">-&gt;</operator><name pos:start="77:46" pos:end="77:60">bitstream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:16">buf_size</name>         <operator pos:start="79:26" pos:end="79:27">+=</operator> <name pos:start="79:29" pos:end="79:45"><name pos:start="79:29" pos:end="79:29">s</name><operator pos:start="79:30" pos:end="79:31">-&gt;</operator><name pos:start="79:32" pos:end="79:45">bitstream_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:25">bitstream_size</name></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <name pos:start="81:29" pos:end="81:36">buf_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="85:9" pos:end="87:50">/* do not decode until buffer has at least max_framesize bytes or

         * the end of the file has been reached */</comment>

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:55">(<expr pos:start="89:13" pos:end="89:54"><name pos:start="89:13" pos:end="89:20">buf_size</name> <operator pos:start="89:22" pos:end="89:22">&lt;</operator> <name pos:start="89:24" pos:end="89:39"><name pos:start="89:24" pos:end="89:24">s</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:39">max_framesize</name></name> <operator pos:start="89:41" pos:end="89:42">&amp;&amp;</operator> <name pos:start="89:44" pos:end="89:54"><name pos:start="89:44" pos:end="89:48">avpkt</name><operator pos:start="89:49" pos:end="89:50">-&gt;</operator><name pos:start="89:51" pos:end="89:54">data</name></name></expr>)</condition> <block pos:start="89:57" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:34">

            <expr_stmt pos:start="91:13" pos:end="91:31"><expr pos:start="91:13" pos:end="91:30"><operator pos:start="91:13" pos:end="91:13">*</operator><name pos:start="91:14" pos:end="91:26">got_frame_ptr</name> <operator pos:start="91:28" pos:end="91:28">=</operator> <literal type="number" pos:start="91:30" pos:end="91:30">0</literal></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:34">return <expr pos:start="93:20" pos:end="93:33"><name pos:start="93:20" pos:end="93:33">input_buf_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="99:5" pos:end="99:44">/* init and position bitstream reader */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:45"><expr pos:start="101:5" pos:end="101:44"><call pos:start="101:5" pos:end="101:44"><name pos:start="101:5" pos:end="101:17">init_get_bits</name><argument_list pos:start="101:18" pos:end="101:44">(<argument pos:start="101:19" pos:end="101:24"><expr pos:start="101:19" pos:end="101:24"><operator pos:start="101:19" pos:end="101:19">&amp;</operator><name pos:start="101:20" pos:end="101:24"><name pos:start="101:20" pos:end="101:20">s</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:24">gb</name></name></expr></argument>, <argument pos:start="101:27" pos:end="101:29"><expr pos:start="101:27" pos:end="101:29"><name pos:start="101:27" pos:end="101:29">buf</name></expr></argument>, <argument pos:start="101:32" pos:end="101:43"><expr pos:start="101:32" pos:end="101:43"><name pos:start="101:32" pos:end="101:39">buf_size</name> <operator pos:start="101:41" pos:end="101:41">*</operator> <literal type="number" pos:start="101:43" pos:end="101:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:35"><expr pos:start="103:5" pos:end="103:34"><call pos:start="103:5" pos:end="103:34"><name pos:start="103:5" pos:end="103:13">skip_bits</name><argument_list pos:start="103:14" pos:end="103:34">(<argument pos:start="103:15" pos:end="103:20"><expr pos:start="103:15" pos:end="103:20"><operator pos:start="103:15" pos:end="103:15">&amp;</operator><name pos:start="103:16" pos:end="103:20"><name pos:start="103:16" pos:end="103:16">s</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:20">gb</name></name></expr></argument>, <argument pos:start="103:23" pos:end="103:33"><expr pos:start="103:23" pos:end="103:33"><name pos:start="103:23" pos:end="103:33"><name pos:start="103:23" pos:end="103:23">s</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:33">bitindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:41">/* process header or next subblock */</comment>

    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:23">(<expr pos:start="109:9" pos:end="109:22"><operator pos:start="109:9" pos:end="109:9">!</operator><name pos:start="109:10" pos:end="109:22"><name pos:start="109:10" pos:end="109:10">s</name><operator pos:start="109:11" pos:end="109:12">-&gt;</operator><name pos:start="109:13" pos:end="109:22">got_header</name></name></expr>)</condition> <block pos:start="109:25" pos:end="119:5">{<block_content pos:start="111:9" pos:end="117:26">

        <if_stmt pos:start="111:9" pos:end="113:23"><if pos:start="111:9" pos:end="113:23">if <condition pos:start="111:12" pos:end="111:39">(<expr pos:start="111:13" pos:end="111:38"><operator pos:start="111:13" pos:end="111:13">(</operator><name pos:start="111:14" pos:end="111:16">ret</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <call pos:start="111:20" pos:end="111:33"><name pos:start="111:20" pos:end="111:30">read_header</name><argument_list pos:start="111:31" pos:end="111:33">(<argument pos:start="111:32" pos:end="111:32"><expr pos:start="111:32" pos:end="111:32"><name pos:start="111:32" pos:end="111:32">s</name></expr></argument>)</argument_list></call><operator pos:start="111:34" pos:end="111:34">)</operator> <operator pos:start="111:36" pos:end="111:36">&lt;</operator> <literal type="number" pos:start="111:38" pos:end="111:38">0</literal></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:23"><block_content pos:start="113:13" pos:end="113:23">

            <return pos:start="113:13" pos:end="113:23">return <expr pos:start="113:20" pos:end="113:22"><name pos:start="113:20" pos:end="113:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:27"><expr pos:start="115:9" pos:end="115:26"><operator pos:start="115:9" pos:end="115:9">*</operator><name pos:start="115:10" pos:end="115:22">got_frame_ptr</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <literal type="number" pos:start="115:26" pos:end="115:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="117:9" pos:end="117:26">goto <name pos:start="117:14" pos:end="117:25">finish_frame</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:68">/* if quit command was read previously, don't decode anything */</comment>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:28">(<expr pos:start="125:9" pos:end="125:27"><name pos:start="125:9" pos:end="125:27"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:27">got_quit_command</name></name></expr>)</condition> <block pos:start="125:30" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:27">

        <expr_stmt pos:start="127:9" pos:end="127:27"><expr pos:start="127:9" pos:end="127:26"><operator pos:start="127:9" pos:end="127:9">*</operator><name pos:start="127:10" pos:end="127:22">got_frame_ptr</name> <operator pos:start="127:24" pos:end="127:24">=</operator> <literal type="number" pos:start="127:26" pos:end="127:26">0</literal></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:27">return <expr pos:start="129:16" pos:end="129:26"><name pos:start="129:16" pos:end="129:26"><name pos:start="129:16" pos:end="129:20">avpkt</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:26">size</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:20"><expr pos:start="135:5" pos:end="135:19"><name pos:start="135:5" pos:end="135:15"><name pos:start="135:5" pos:end="135:5">s</name><operator pos:start="135:6" pos:end="135:7">-&gt;</operator><name pos:start="135:8" pos:end="135:15">cur_chan</name></name> <operator pos:start="135:17" pos:end="135:17">=</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>;</expr_stmt>

    <while pos:start="137:5" pos:end="421:5">while <condition pos:start="137:11" pos:end="137:37">(<expr pos:start="137:12" pos:end="137:36"><name pos:start="137:12" pos:end="137:22"><name pos:start="137:12" pos:end="137:12">s</name><operator pos:start="137:13" pos:end="137:14">-&gt;</operator><name pos:start="137:15" pos:end="137:22">cur_chan</name></name> <operator pos:start="137:24" pos:end="137:24">&lt;</operator> <name pos:start="137:26" pos:end="137:36"><name pos:start="137:26" pos:end="137:26">s</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:36">channels</name></name></expr>)</condition> <block pos:start="137:39" pos:end="421:5">{<block_content pos:start="139:9" pos:end="419:9">

        <decl_stmt pos:start="139:9" pos:end="139:21"><decl pos:start="139:9" pos:end="139:20"><type pos:start="139:9" pos:end="139:16"><name pos:start="139:9" pos:end="139:16">unsigned</name></type> <name pos:start="139:18" pos:end="139:20">cmd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="141:9" pos:end="141:16"><decl pos:start="141:9" pos:end="141:15"><type pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">int</name></type> <name pos:start="141:13" pos:end="141:15">len</name></decl>;</decl_stmt>



        <if_stmt pos:start="145:9" pos:end="151:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:47">(<expr pos:start="145:13" pos:end="145:46"><call pos:start="145:13" pos:end="145:33"><name pos:start="145:13" pos:end="145:25">get_bits_left</name><argument_list pos:start="145:26" pos:end="145:33">(<argument pos:start="145:27" pos:end="145:32"><expr pos:start="145:27" pos:end="145:32"><operator pos:start="145:27" pos:end="145:27">&amp;</operator><name pos:start="145:28" pos:end="145:32"><name pos:start="145:28" pos:end="145:28">s</name><operator pos:start="145:29" pos:end="145:30">-&gt;</operator><name pos:start="145:31" pos:end="145:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="145:35" pos:end="145:35">&lt;</operator> <literal type="number" pos:start="145:37" pos:end="145:39">3</literal> <operator pos:start="145:39" pos:end="145:39">+</operator> <name pos:start="145:41" pos:end="145:46">FNSIZE</name></expr>)</condition> <block pos:start="145:49" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:18">

            <expr_stmt pos:start="147:13" pos:end="147:31"><expr pos:start="147:13" pos:end="147:30"><operator pos:start="147:13" pos:end="147:13">*</operator><name pos:start="147:14" pos:end="147:26">got_frame_ptr</name> <operator pos:start="147:28" pos:end="147:28">=</operator> <literal type="number" pos:start="147:30" pos:end="147:30">0</literal></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:52"><expr pos:start="155:9" pos:end="155:51"><name pos:start="155:9" pos:end="155:11">cmd</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <call pos:start="155:15" pos:end="155:51"><name pos:start="155:15" pos:end="155:35">get_ur_golomb_shorten</name><argument_list pos:start="155:36" pos:end="155:51">(<argument pos:start="155:37" pos:end="155:42"><expr pos:start="155:37" pos:end="155:42"><operator pos:start="155:37" pos:end="155:37">&amp;</operator><name pos:start="155:38" pos:end="155:42"><name pos:start="155:38" pos:end="155:38">s</name><operator pos:start="155:39" pos:end="155:40">-&gt;</operator><name pos:start="155:41" pos:end="155:42">gb</name></name></expr></argument>, <argument pos:start="155:45" pos:end="155:50"><expr pos:start="155:45" pos:end="155:50"><name pos:start="155:45" pos:end="155:50">FNSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="159:9" pos:end="167:9"><if pos:start="159:9" pos:end="167:9">if <condition pos:start="159:12" pos:end="159:30">(<expr pos:start="159:13" pos:end="159:29"><name pos:start="159:13" pos:end="159:15">cmd</name> <operator pos:start="159:17" pos:end="159:17">&gt;</operator> <name pos:start="159:19" pos:end="159:29">FN_VERBATIM</name></expr>)</condition> <block pos:start="159:32" pos:end="167:9">{<block_content pos:start="161:13" pos:end="165:18">

            <expr_stmt pos:start="161:13" pos:end="161:78"><expr pos:start="161:13" pos:end="161:77"><call pos:start="161:13" pos:end="161:77"><name pos:start="161:13" pos:end="161:18">av_log</name><argument_list pos:start="161:19" pos:end="161:77">(<argument pos:start="161:20" pos:end="161:24"><expr pos:start="161:20" pos:end="161:24"><name pos:start="161:20" pos:end="161:24">avctx</name></expr></argument>, <argument pos:start="161:27" pos:end="161:38"><expr pos:start="161:27" pos:end="161:38"><name pos:start="161:27" pos:end="161:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:41" pos:end="161:71"><expr pos:start="161:41" pos:end="161:71"><literal type="string" pos:start="161:41" pos:end="161:71">"unknown shorten function %d\n"</literal></expr></argument>, <argument pos:start="161:74" pos:end="161:76"><expr pos:start="161:74" pos:end="161:76"><name pos:start="161:74" pos:end="161:76">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:31"><expr pos:start="163:13" pos:end="163:30"><operator pos:start="163:13" pos:end="163:13">*</operator><name pos:start="163:14" pos:end="163:26">got_frame_ptr</name> <operator pos:start="163:28" pos:end="163:28">=</operator> <literal type="number" pos:start="163:30" pos:end="163:30">0</literal></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="171:9" pos:end="419:9"><if pos:start="171:9" pos:end="239:9">if <condition pos:start="171:12" pos:end="171:35">(<expr pos:start="171:13" pos:end="171:34"><operator pos:start="171:13" pos:end="171:13">!</operator><name pos:start="171:14" pos:end="171:34"><name pos:start="171:14" pos:end="171:29">is_audio_command</name><index pos:start="171:30" pos:end="171:34">[<expr pos:start="171:31" pos:end="171:33"><name pos:start="171:31" pos:end="171:33">cmd</name></expr>]</index></name></expr>)</condition> <block pos:start="171:37" pos:end="239:9">{<block_content pos:start="175:13" pos:end="237:13">

            <comment type="block" pos:start="173:13" pos:end="173:43">/* process non-audio command */</comment>

            <switch pos:start="175:13" pos:end="229:13">switch <condition pos:start="175:20" pos:end="175:24">(<expr pos:start="175:21" pos:end="175:23"><name pos:start="175:21" pos:end="175:23">cmd</name></expr>)</condition> <block pos:start="175:26" pos:end="229:13">{<block_content pos:start="177:13" pos:end="227:22">

            <case pos:start="177:13" pos:end="177:29">case <expr pos:start="177:18" pos:end="177:28"><name pos:start="177:18" pos:end="177:28">FN_VERBATIM</name></expr>:</case>

                <expr_stmt pos:start="179:17" pos:end="179:74"><expr pos:start="179:17" pos:end="179:73"><name pos:start="179:17" pos:end="179:19">len</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <call pos:start="179:23" pos:end="179:73"><name pos:start="179:23" pos:end="179:43">get_ur_golomb_shorten</name><argument_list pos:start="179:44" pos:end="179:73">(<argument pos:start="179:45" pos:end="179:50"><expr pos:start="179:45" pos:end="179:50"><operator pos:start="179:45" pos:end="179:45">&amp;</operator><name pos:start="179:46" pos:end="179:50"><name pos:start="179:46" pos:end="179:46">s</name><operator pos:start="179:47" pos:end="179:48">-&gt;</operator><name pos:start="179:49" pos:end="179:50">gb</name></name></expr></argument>, <argument pos:start="179:53" pos:end="179:72"><expr pos:start="179:53" pos:end="179:72"><name pos:start="179:53" pos:end="179:72">VERBATIM_CKSIZE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <while pos:start="181:17" pos:end="183:70">while <condition pos:start="181:23" pos:end="181:29">(<expr pos:start="181:24" pos:end="181:28"><name pos:start="181:24" pos:end="181:26">len</name><operator pos:start="181:27" pos:end="181:28">--</operator></expr>)</condition><block type="pseudo" pos:start="183:21" pos:end="183:70"><block_content pos:start="183:21" pos:end="183:70">

                    <expr_stmt pos:start="183:21" pos:end="183:70"><expr pos:start="183:21" pos:end="183:69"><call pos:start="183:21" pos:end="183:69"><name pos:start="183:21" pos:end="183:41">get_ur_golomb_shorten</name><argument_list pos:start="183:42" pos:end="183:69">(<argument pos:start="183:43" pos:end="183:48"><expr pos:start="183:43" pos:end="183:48"><operator pos:start="183:43" pos:end="183:43">&amp;</operator><name pos:start="183:44" pos:end="183:48"><name pos:start="183:44" pos:end="183:44">s</name><operator pos:start="183:45" pos:end="183:46">-&gt;</operator><name pos:start="183:47" pos:end="183:48">gb</name></name></expr></argument>, <argument pos:start="183:51" pos:end="183:68"><expr pos:start="183:51" pos:end="183:68"><name pos:start="183:51" pos:end="183:68">VERBATIM_BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

                <break pos:start="185:17" pos:end="185:22">break;</break>

            <case pos:start="187:13" pos:end="187:29">case <expr pos:start="187:18" pos:end="187:28"><name pos:start="187:18" pos:end="187:28">FN_BITSHIFT</name></expr>:</case>

                <expr_stmt pos:start="189:17" pos:end="189:74"><expr pos:start="189:17" pos:end="189:73"><name pos:start="189:17" pos:end="189:27"><name pos:start="189:17" pos:end="189:17">s</name><operator pos:start="189:18" pos:end="189:19">-&gt;</operator><name pos:start="189:20" pos:end="189:27">bitshift</name></name> <operator pos:start="189:29" pos:end="189:29">=</operator> <call pos:start="189:31" pos:end="189:73"><name pos:start="189:31" pos:end="189:51">get_ur_golomb_shorten</name><argument_list pos:start="189:52" pos:end="189:73">(<argument pos:start="189:53" pos:end="189:58"><expr pos:start="189:53" pos:end="189:58"><operator pos:start="189:53" pos:end="189:53">&amp;</operator><name pos:start="189:54" pos:end="189:58"><name pos:start="189:54" pos:end="189:54">s</name><operator pos:start="189:55" pos:end="189:56">-&gt;</operator><name pos:start="189:57" pos:end="189:58">gb</name></name></expr></argument>, <argument pos:start="189:61" pos:end="189:72"><expr pos:start="189:61" pos:end="189:72"><name pos:start="189:61" pos:end="189:72">BITSHIFTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="191:17" pos:end="191:22">break;</break>

            <case pos:start="193:13" pos:end="193:30">case <expr pos:start="193:18" pos:end="193:29"><name pos:start="193:18" pos:end="193:29">FN_BLOCKSIZE</name></expr>:</case> <block pos:start="193:32" pos:end="221:13">{<block_content pos:start="195:17" pos:end="219:22">

                <decl_stmt pos:start="195:17" pos:end="195:72"><decl pos:start="195:17" pos:end="195:71"><type pos:start="195:17" pos:end="195:24"><name pos:start="195:17" pos:end="195:24">unsigned</name></type> <name pos:start="195:26" pos:end="195:34">blocksize</name> <init pos:start="195:36" pos:end="195:71">= <expr pos:start="195:38" pos:end="195:71"><call pos:start="195:38" pos:end="195:71"><name pos:start="195:38" pos:end="195:45">get_uint</name><argument_list pos:start="195:46" pos:end="195:71">(<argument pos:start="195:47" pos:end="195:47"><expr pos:start="195:47" pos:end="195:47"><name pos:start="195:47" pos:end="195:47">s</name></expr></argument>, <argument pos:start="195:50" pos:end="195:70"><expr pos:start="195:50" pos:end="195:70"><call pos:start="195:50" pos:end="195:70"><name pos:start="195:50" pos:end="195:56">av_log2</name><argument_list pos:start="195:57" pos:end="195:70">(<argument pos:start="195:58" pos:end="195:69"><expr pos:start="195:58" pos:end="195:69"><name pos:start="195:58" pos:end="195:69"><name pos:start="195:58" pos:end="195:58">s</name><operator pos:start="195:59" pos:end="195:60">-&gt;</operator><name pos:start="195:61" pos:end="195:69">blocksize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="197:17" pos:end="205:17"><if pos:start="197:17" pos:end="205:17">if <condition pos:start="197:20" pos:end="197:45">(<expr pos:start="197:21" pos:end="197:44"><name pos:start="197:21" pos:end="197:29">blocksize</name> <operator pos:start="197:31" pos:end="197:31">&gt;</operator> <name pos:start="197:33" pos:end="197:44"><name pos:start="197:33" pos:end="197:33">s</name><operator pos:start="197:34" pos:end="197:35">-&gt;</operator><name pos:start="197:36" pos:end="197:44">blocksize</name></name></expr>)</condition> <block pos:start="197:47" pos:end="205:17">{<block_content pos:start="199:21" pos:end="203:48">

                    <expr_stmt pos:start="199:21" pos:end="201:71"><expr pos:start="199:21" pos:end="201:70"><call pos:start="199:21" pos:end="201:70"><name pos:start="199:21" pos:end="199:26">av_log</name><argument_list pos:start="199:27" pos:end="201:70">(<argument pos:start="199:28" pos:end="199:32"><expr pos:start="199:28" pos:end="199:32"><name pos:start="199:28" pos:end="199:32">avctx</name></expr></argument>, <argument pos:start="199:35" pos:end="199:46"><expr pos:start="199:35" pos:end="199:46"><name pos:start="199:35" pos:end="199:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="201:28" pos:end="201:69"><expr pos:start="201:28" pos:end="201:69"><literal type="string" pos:start="201:28" pos:end="201:69">"Increasing block size is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="203:21" pos:end="203:48">return <expr pos:start="203:28" pos:end="203:47"><name pos:start="203:28" pos:end="203:47">AVERROR_PATCHWELCOME</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="207:17" pos:end="215:17"><if pos:start="207:17" pos:end="215:17">if <condition pos:start="207:20" pos:end="207:60">(<expr pos:start="207:21" pos:end="207:59"><operator pos:start="207:21" pos:end="207:21">!</operator><name pos:start="207:22" pos:end="207:30">blocksize</name> <operator pos:start="207:32" pos:end="207:33">||</operator> <name pos:start="207:35" pos:end="207:43">blocksize</name> <operator pos:start="207:45" pos:end="207:45">&gt;</operator> <name pos:start="207:47" pos:end="207:59">MAX_BLOCKSIZE</name></expr>)</condition> <block pos:start="207:62" pos:end="215:17">{<block_content pos:start="209:21" pos:end="213:43">

                    <expr_stmt pos:start="209:21" pos:end="211:79"><expr pos:start="209:21" pos:end="211:78"><call pos:start="209:21" pos:end="211:78"><name pos:start="209:21" pos:end="209:26">av_log</name><argument_list pos:start="209:27" pos:end="211:78">(<argument pos:start="209:28" pos:end="209:32"><expr pos:start="209:28" pos:end="209:32"><name pos:start="209:28" pos:end="209:32">avctx</name></expr></argument>, <argument pos:start="209:35" pos:end="209:46"><expr pos:start="209:35" pos:end="209:46"><name pos:start="209:35" pos:end="209:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="209:49" pos:end="211:66"><expr pos:start="209:49" pos:end="211:66"><literal type="string" pos:start="209:49" pos:end="209:73">"invalid or unsupported "</literal>

                                                <literal type="string" pos:start="211:49" pos:end="211:66">"block size: %d\n"</literal></expr></argument>, <argument pos:start="211:69" pos:end="211:77"><expr pos:start="211:69" pos:end="211:77"><name pos:start="211:69" pos:end="211:77">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="213:21" pos:end="213:43">return <expr pos:start="213:28" pos:end="213:42"><call pos:start="213:28" pos:end="213:42"><name pos:start="213:28" pos:end="213:34">AVERROR</name><argument_list pos:start="213:35" pos:end="213:42">(<argument pos:start="213:36" pos:end="213:41"><expr pos:start="213:36" pos:end="213:41"><name pos:start="213:36" pos:end="213:41">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:41"><expr pos:start="217:17" pos:end="217:40"><name pos:start="217:17" pos:end="217:28"><name pos:start="217:17" pos:end="217:17">s</name><operator pos:start="217:18" pos:end="217:19">-&gt;</operator><name pos:start="217:20" pos:end="217:28">blocksize</name></name> <operator pos:start="217:30" pos:end="217:30">=</operator> <name pos:start="217:32" pos:end="217:40">blocksize</name></expr>;</expr_stmt>

                <break pos:start="219:17" pos:end="219:22">break;</break>

            </block_content>}</block>

            <case pos:start="223:13" pos:end="223:25">case <expr pos:start="223:18" pos:end="223:24"><name pos:start="223:18" pos:end="223:24">FN_QUIT</name></expr>:</case>

                <expr_stmt pos:start="225:17" pos:end="225:40"><expr pos:start="225:17" pos:end="225:39"><name pos:start="225:17" pos:end="225:35"><name pos:start="225:17" pos:end="225:17">s</name><operator pos:start="225:18" pos:end="225:19">-&gt;</operator><name pos:start="225:20" pos:end="225:35">got_quit_command</name></name> <operator pos:start="225:37" pos:end="225:37">=</operator> <literal type="number" pos:start="225:39" pos:end="225:39">1</literal></expr>;</expr_stmt>

                <break pos:start="227:17" pos:end="227:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="231:13" pos:end="237:13"><if pos:start="231:13" pos:end="237:13">if <condition pos:start="231:16" pos:end="231:54">(<expr pos:start="231:17" pos:end="231:53"><name pos:start="231:17" pos:end="231:19">cmd</name> <operator pos:start="231:21" pos:end="231:22">==</operator> <name pos:start="231:24" pos:end="231:35">FN_BLOCKSIZE</name> <operator pos:start="231:37" pos:end="231:38">||</operator> <name pos:start="231:40" pos:end="231:42">cmd</name> <operator pos:start="231:44" pos:end="231:45">==</operator> <name pos:start="231:47" pos:end="231:53">FN_QUIT</name></expr>)</condition> <block pos:start="231:56" pos:end="237:13">{<block_content pos:start="233:17" pos:end="235:22">

                <expr_stmt pos:start="233:17" pos:end="233:35"><expr pos:start="233:17" pos:end="233:34"><operator pos:start="233:17" pos:end="233:17">*</operator><name pos:start="233:18" pos:end="233:30">got_frame_ptr</name> <operator pos:start="233:32" pos:end="233:32">=</operator> <literal type="number" pos:start="233:34" pos:end="233:34">0</literal></expr>;</expr_stmt>

                <break pos:start="235:17" pos:end="235:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="239:11" pos:end="419:9">else <block pos:start="239:16" pos:end="419:9">{<block_content pos:start="243:13" pos:end="417:13">

            <comment type="block" pos:start="241:13" pos:end="241:39">/* process audio command */</comment>

            <decl_stmt pos:start="243:13" pos:end="243:34"><decl pos:start="243:13" pos:end="243:33"><type pos:start="243:13" pos:end="243:15"><name pos:start="243:13" pos:end="243:15">int</name></type> <name pos:start="243:17" pos:end="243:29">residual_size</name> <init pos:start="243:31" pos:end="243:33">= <expr pos:start="243:33" pos:end="243:33"><literal type="number" pos:start="243:33" pos:end="243:33">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="245:13" pos:end="245:38"><decl pos:start="245:13" pos:end="245:37"><type pos:start="245:13" pos:end="245:15"><name pos:start="245:13" pos:end="245:15">int</name></type> <name pos:start="245:17" pos:end="245:23">channel</name> <init pos:start="245:25" pos:end="245:37">= <expr pos:start="245:27" pos:end="245:37"><name pos:start="245:27" pos:end="245:37"><name pos:start="245:27" pos:end="245:27">s</name><operator pos:start="245:28" pos:end="245:29">-&gt;</operator><name pos:start="245:30" pos:end="245:37">cur_chan</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="247:13" pos:end="247:28"><decl pos:start="247:13" pos:end="247:27"><type pos:start="247:13" pos:end="247:19"><name pos:start="247:13" pos:end="247:19">int32_t</name></type> <name pos:start="247:21" pos:end="247:27">coffset</name></decl>;</decl_stmt>



            <comment type="block" pos:start="251:13" pos:end="251:53">/* get Rice code for residual decoding */</comment>

            <if_stmt pos:start="253:13" pos:end="265:13"><if pos:start="253:13" pos:end="265:13">if <condition pos:start="253:16" pos:end="253:31">(<expr pos:start="253:17" pos:end="253:30"><name pos:start="253:17" pos:end="253:19">cmd</name> <operator pos:start="253:21" pos:end="253:22">!=</operator> <name pos:start="253:24" pos:end="253:30">FN_ZERO</name></expr>)</condition> <block pos:start="253:33" pos:end="265:13">{<block_content pos:start="255:17" pos:end="263:36">

                <expr_stmt pos:start="255:17" pos:end="255:74"><expr pos:start="255:17" pos:end="255:73"><name pos:start="255:17" pos:end="255:29">residual_size</name> <operator pos:start="255:31" pos:end="255:31">=</operator> <call pos:start="255:33" pos:end="255:73"><name pos:start="255:33" pos:end="255:53">get_ur_golomb_shorten</name><argument_list pos:start="255:54" pos:end="255:73">(<argument pos:start="255:55" pos:end="255:60"><expr pos:start="255:55" pos:end="255:60"><operator pos:start="255:55" pos:end="255:55">&amp;</operator><name pos:start="255:56" pos:end="255:60"><name pos:start="255:56" pos:end="255:56">s</name><operator pos:start="255:57" pos:end="255:58">-&gt;</operator><name pos:start="255:59" pos:end="255:60">gb</name></name></expr></argument>, <argument pos:start="255:63" pos:end="255:72"><expr pos:start="255:63" pos:end="255:72"><name pos:start="255:63" pos:end="255:72">ENERGYSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="257:17" pos:end="259:49">/* This is a hack as version 0 differed in the definition

                 * of get_sr_golomb_shorten(). */</comment>

                <if_stmt pos:start="261:17" pos:end="263:36"><if pos:start="261:17" pos:end="263:36">if <condition pos:start="261:20" pos:end="261:36">(<expr pos:start="261:21" pos:end="261:35"><name pos:start="261:21" pos:end="261:30"><name pos:start="261:21" pos:end="261:21">s</name><operator pos:start="261:22" pos:end="261:23">-&gt;</operator><name pos:start="261:24" pos:end="261:30">version</name></name> <operator pos:start="261:32" pos:end="261:33">==</operator> <literal type="number" pos:start="261:35" pos:end="261:35">0</literal></expr>)</condition><block type="pseudo" pos:start="263:21" pos:end="263:36"><block_content pos:start="263:21" pos:end="263:36">

                    <expr_stmt pos:start="263:21" pos:end="263:36"><expr pos:start="263:21" pos:end="263:35"><name pos:start="263:21" pos:end="263:33">residual_size</name><operator pos:start="263:34" pos:end="263:35">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="269:13" pos:end="269:74">/* calculate sample offset using means from previous blocks */</comment>

            <if_stmt pos:start="271:13" pos:end="289:13"><if pos:start="271:13" pos:end="273:48">if <condition pos:start="271:16" pos:end="271:30">(<expr pos:start="271:17" pos:end="271:29"><name pos:start="271:17" pos:end="271:24"><name pos:start="271:17" pos:end="271:17">s</name><operator pos:start="271:18" pos:end="271:19">-&gt;</operator><name pos:start="271:20" pos:end="271:24">nmean</name></name> <operator pos:start="271:26" pos:end="271:27">==</operator> <literal type="number" pos:start="271:29" pos:end="271:29">0</literal></expr>)</condition><block type="pseudo" pos:start="273:17" pos:end="273:48"><block_content pos:start="273:17" pos:end="273:48">

                <expr_stmt pos:start="273:17" pos:end="273:48"><expr pos:start="273:17" pos:end="273:47"><name pos:start="273:17" pos:end="273:23">coffset</name> <operator pos:start="273:25" pos:end="273:25">=</operator> <name pos:start="273:27" pos:end="273:47"><name pos:start="273:27" pos:end="273:27">s</name><operator pos:start="273:28" pos:end="273:29">-&gt;</operator><name pos:start="273:30" pos:end="273:35">offset</name><index pos:start="273:36" pos:end="273:44">[<expr pos:start="273:37" pos:end="273:43"><name pos:start="273:37" pos:end="273:43">channel</name></expr>]</index><index pos:start="273:45" pos:end="273:47">[<expr pos:start="273:46" pos:end="273:46"><literal type="number" pos:start="273:46" pos:end="273:46">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="275:13" pos:end="289:13">else <block pos:start="275:18" pos:end="289:13">{<block_content pos:start="277:17" pos:end="287:91">

                <decl_stmt pos:start="277:17" pos:end="277:66"><decl pos:start="277:17" pos:end="277:65"><type pos:start="277:17" pos:end="277:23"><name pos:start="277:17" pos:end="277:23">int32_t</name></type> <name pos:start="277:25" pos:end="277:27">sum</name> <init pos:start="277:29" pos:end="277:65">= <expr pos:start="277:31" pos:end="277:65"><ternary pos:start="277:31" pos:end="277:65"><condition pos:start="277:31" pos:end="277:48"><expr pos:start="277:31" pos:end="277:46"><operator pos:start="277:31" pos:end="277:31">(</operator><name pos:start="277:32" pos:end="277:41"><name pos:start="277:32" pos:end="277:32">s</name><operator pos:start="277:33" pos:end="277:34">-&gt;</operator><name pos:start="277:35" pos:end="277:41">version</name></name> <operator pos:start="277:43" pos:end="277:43">&lt;</operator> <literal type="number" pos:start="277:45" pos:end="277:45">2</literal><operator pos:start="277:46" pos:end="277:46">)</operator></expr> ?</condition><then pos:start="277:50" pos:end="277:50"> <expr pos:start="277:50" pos:end="277:50"><literal type="number" pos:start="277:50" pos:end="277:50">0</literal></expr> </then><else pos:start="277:52" pos:end="277:65">: <expr pos:start="277:54" pos:end="277:65"><name pos:start="277:54" pos:end="277:61"><name pos:start="277:54" pos:end="277:54">s</name><operator pos:start="277:55" pos:end="277:56">-&gt;</operator><name pos:start="277:57" pos:end="277:61">nmean</name></name> <operator pos:start="277:63" pos:end="277:63">/</operator> <literal type="number" pos:start="277:65" pos:end="277:65">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <for pos:start="279:17" pos:end="281:49">for <control pos:start="279:21" pos:end="279:46">(<init pos:start="279:22" pos:end="279:27"><expr pos:start="279:22" pos:end="279:26"><name pos:start="279:22" pos:end="279:22">i</name> <operator pos:start="279:24" pos:end="279:24">=</operator> <literal type="number" pos:start="279:26" pos:end="279:26">0</literal></expr>;</init> <condition pos:start="279:29" pos:end="279:41"><expr pos:start="279:29" pos:end="279:40"><name pos:start="279:29" pos:end="279:29">i</name> <operator pos:start="279:31" pos:end="279:31">&lt;</operator> <name pos:start="279:33" pos:end="279:40"><name pos:start="279:33" pos:end="279:33">s</name><operator pos:start="279:34" pos:end="279:35">-&gt;</operator><name pos:start="279:36" pos:end="279:40">nmean</name></name></expr>;</condition> <incr pos:start="279:43" pos:end="279:45"><expr pos:start="279:43" pos:end="279:45"><name pos:start="279:43" pos:end="279:43">i</name><operator pos:start="279:44" pos:end="279:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="281:21" pos:end="281:49"><block_content pos:start="281:21" pos:end="281:49">

                    <expr_stmt pos:start="281:21" pos:end="281:49"><expr pos:start="281:21" pos:end="281:48"><name pos:start="281:21" pos:end="281:23">sum</name> <operator pos:start="281:25" pos:end="281:26">+=</operator> <name pos:start="281:28" pos:end="281:48"><name pos:start="281:28" pos:end="281:28">s</name><operator pos:start="281:29" pos:end="281:30">-&gt;</operator><name pos:start="281:31" pos:end="281:36">offset</name><index pos:start="281:37" pos:end="281:45">[<expr pos:start="281:38" pos:end="281:44"><name pos:start="281:38" pos:end="281:44">channel</name></expr>]</index><index pos:start="281:46" pos:end="281:48">[<expr pos:start="281:47" pos:end="281:47"><name pos:start="281:47" pos:end="281:47">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="283:17" pos:end="283:41"><expr pos:start="283:17" pos:end="283:40"><name pos:start="283:17" pos:end="283:23">coffset</name> <operator pos:start="283:25" pos:end="283:25">=</operator> <name pos:start="283:27" pos:end="283:29">sum</name> <operator pos:start="283:31" pos:end="283:31">/</operator> <name pos:start="283:33" pos:end="283:40"><name pos:start="283:33" pos:end="283:33">s</name><operator pos:start="283:34" pos:end="283:35">-&gt;</operator><name pos:start="283:36" pos:end="283:40">nmean</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="285:17" pos:end="287:91"><if pos:start="285:17" pos:end="287:91">if <condition pos:start="285:20" pos:end="285:36">(<expr pos:start="285:21" pos:end="285:35"><name pos:start="285:21" pos:end="285:30"><name pos:start="285:21" pos:end="285:21">s</name><operator pos:start="285:22" pos:end="285:23">-&gt;</operator><name pos:start="285:24" pos:end="285:30">version</name></name> <operator pos:start="285:32" pos:end="285:33">&gt;=</operator> <literal type="number" pos:start="285:35" pos:end="285:35">2</literal></expr>)</condition><block type="pseudo" pos:start="287:21" pos:end="287:91"><block_content pos:start="287:21" pos:end="287:91">

                    <expr_stmt pos:start="287:21" pos:end="287:91"><expr pos:start="287:21" pos:end="287:90"><name pos:start="287:21" pos:end="287:27">coffset</name> <operator pos:start="287:29" pos:end="287:29">=</operator> <ternary pos:start="287:31" pos:end="287:90"><condition pos:start="287:31" pos:end="287:48"><expr pos:start="287:31" pos:end="287:46"><name pos:start="287:31" pos:end="287:41"><name pos:start="287:31" pos:end="287:31">s</name><operator pos:start="287:32" pos:end="287:33">-&gt;</operator><name pos:start="287:34" pos:end="287:41">bitshift</name></name> <operator pos:start="287:43" pos:end="287:44">==</operator> <literal type="number" pos:start="287:46" pos:end="287:46">0</literal></expr> ?</condition><then pos:start="287:50" pos:end="287:56"> <expr pos:start="287:50" pos:end="287:56"><name pos:start="287:50" pos:end="287:56">coffset</name></expr> </then><else pos:start="287:58" pos:end="287:90">: <expr pos:start="287:60" pos:end="287:90"><name pos:start="287:60" pos:end="287:66">coffset</name> <operator pos:start="287:68" pos:end="287:69">&gt;&gt;</operator> <name pos:start="287:71" pos:end="287:81"><name pos:start="287:71" pos:end="287:71">s</name><operator pos:start="287:72" pos:end="287:73">-&gt;</operator><name pos:start="287:74" pos:end="287:81">bitshift</name></name> <operator pos:start="287:83" pos:end="287:83">-</operator> <literal type="number" pos:start="287:85" pos:end="287:85">1</literal> <operator pos:start="287:87" pos:end="287:88">&gt;&gt;</operator> <literal type="number" pos:start="287:90" pos:end="287:90">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="293:13" pos:end="293:49">/* decode samples for this channel */</comment>

            <if_stmt pos:start="295:13" pos:end="309:13"><if pos:start="295:13" pos:end="301:13">if <condition pos:start="295:16" pos:end="295:31">(<expr pos:start="295:17" pos:end="295:30"><name pos:start="295:17" pos:end="295:19">cmd</name> <operator pos:start="295:21" pos:end="295:22">==</operator> <name pos:start="295:24" pos:end="295:30">FN_ZERO</name></expr>)</condition> <block pos:start="295:33" pos:end="301:13">{<block_content pos:start="297:17" pos:end="299:47">

                <for pos:start="297:17" pos:end="299:47">for <control pos:start="297:21" pos:end="297:50">(<init pos:start="297:22" pos:end="297:27"><expr pos:start="297:22" pos:end="297:26"><name pos:start="297:22" pos:end="297:22">i</name> <operator pos:start="297:24" pos:end="297:24">=</operator> <literal type="number" pos:start="297:26" pos:end="297:26">0</literal></expr>;</init> <condition pos:start="297:29" pos:end="297:45"><expr pos:start="297:29" pos:end="297:44"><name pos:start="297:29" pos:end="297:29">i</name> <operator pos:start="297:31" pos:end="297:31">&lt;</operator> <name pos:start="297:33" pos:end="297:44"><name pos:start="297:33" pos:end="297:33">s</name><operator pos:start="297:34" pos:end="297:35">-&gt;</operator><name pos:start="297:36" pos:end="297:44">blocksize</name></name></expr>;</condition> <incr pos:start="297:47" pos:end="297:49"><expr pos:start="297:47" pos:end="297:49"><name pos:start="297:47" pos:end="297:47">i</name><operator pos:start="297:48" pos:end="297:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="299:21" pos:end="299:47"><block_content pos:start="299:21" pos:end="299:47">

                    <expr_stmt pos:start="299:21" pos:end="299:47"><expr pos:start="299:21" pos:end="299:46"><name pos:start="299:21" pos:end="299:42"><name pos:start="299:21" pos:end="299:21">s</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:30">decoded</name><index pos:start="299:31" pos:end="299:39">[<expr pos:start="299:32" pos:end="299:38"><name pos:start="299:32" pos:end="299:38">channel</name></expr>]</index><index pos:start="299:40" pos:end="299:42">[<expr pos:start="299:41" pos:end="299:41"><name pos:start="299:41" pos:end="299:41">i</name></expr>]</index></name> <operator pos:start="299:44" pos:end="299:44">=</operator> <literal type="number" pos:start="299:46" pos:end="299:46">0</literal></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="301:15" pos:end="309:13">else <block pos:start="301:20" pos:end="309:13">{<block_content pos:start="303:17" pos:end="307:31">

                <if_stmt pos:start="303:17" pos:end="307:31"><if pos:start="303:17" pos:end="307:31">if <condition pos:start="303:20" pos:end="305:76">(<expr pos:start="303:21" pos:end="305:75"><operator pos:start="303:21" pos:end="303:21">(</operator><name pos:start="303:22" pos:end="303:24">ret</name> <operator pos:start="303:26" pos:end="303:26">=</operator> <call pos:start="303:28" pos:end="305:70"><name pos:start="303:28" pos:end="303:46">decode_subframe_lpc</name><argument_list pos:start="303:47" pos:end="305:70">(<argument pos:start="303:48" pos:end="303:48"><expr pos:start="303:48" pos:end="303:48"><name pos:start="303:48" pos:end="303:48">s</name></expr></argument>, <argument pos:start="303:51" pos:end="303:53"><expr pos:start="303:51" pos:end="303:53"><name pos:start="303:51" pos:end="303:53">cmd</name></expr></argument>, <argument pos:start="303:56" pos:end="303:62"><expr pos:start="303:56" pos:end="303:62"><name pos:start="303:56" pos:end="303:62">channel</name></expr></argument>,

                                               <argument pos:start="305:48" pos:end="305:60"><expr pos:start="305:48" pos:end="305:60"><name pos:start="305:48" pos:end="305:60">residual_size</name></expr></argument>, <argument pos:start="305:63" pos:end="305:69"><expr pos:start="305:63" pos:end="305:69"><name pos:start="305:63" pos:end="305:69">coffset</name></expr></argument>)</argument_list></call><operator pos:start="305:71" pos:end="305:71">)</operator> <operator pos:start="305:73" pos:end="305:73">&lt;</operator> <literal type="number" pos:start="305:75" pos:end="305:75">0</literal></expr>)</condition><block type="pseudo" pos:start="307:21" pos:end="307:31"><block_content pos:start="307:21" pos:end="307:31">

                    <return pos:start="307:21" pos:end="307:31">return <expr pos:start="307:28" pos:end="307:30"><name pos:start="307:28" pos:end="307:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="313:13" pos:end="313:63">/* update means with info from the current block */</comment>

            <if_stmt pos:start="315:13" pos:end="339:13"><if pos:start="315:13" pos:end="339:13">if <condition pos:start="315:16" pos:end="315:29">(<expr pos:start="315:17" pos:end="315:28"><name pos:start="315:17" pos:end="315:24"><name pos:start="315:17" pos:end="315:17">s</name><operator pos:start="315:18" pos:end="315:19">-&gt;</operator><name pos:start="315:20" pos:end="315:24">nmean</name></name> <operator pos:start="315:26" pos:end="315:26">&gt;</operator> <literal type="number" pos:start="315:28" pos:end="315:28">0</literal></expr>)</condition> <block pos:start="315:31" pos:end="339:13">{<block_content pos:start="317:17" pos:end="337:91">

                <decl_stmt pos:start="317:17" pos:end="317:70"><decl pos:start="317:17" pos:end="317:69"><type pos:start="317:17" pos:end="317:23"><name pos:start="317:17" pos:end="317:23">int32_t</name></type> <name pos:start="317:25" pos:end="317:27">sum</name> <init pos:start="317:29" pos:end="317:69">= <expr pos:start="317:31" pos:end="317:69"><ternary pos:start="317:31" pos:end="317:69"><condition pos:start="317:31" pos:end="317:48"><expr pos:start="317:31" pos:end="317:46"><operator pos:start="317:31" pos:end="317:31">(</operator><name pos:start="317:32" pos:end="317:41"><name pos:start="317:32" pos:end="317:32">s</name><operator pos:start="317:33" pos:end="317:34">-&gt;</operator><name pos:start="317:35" pos:end="317:41">version</name></name> <operator pos:start="317:43" pos:end="317:43">&lt;</operator> <literal type="number" pos:start="317:45" pos:end="317:45">2</literal><operator pos:start="317:46" pos:end="317:46">)</operator></expr> ?</condition><then pos:start="317:50" pos:end="317:50"> <expr pos:start="317:50" pos:end="317:50"><literal type="number" pos:start="317:50" pos:end="317:50">0</literal></expr> </then><else pos:start="317:52" pos:end="317:69">: <expr pos:start="317:54" pos:end="317:69"><name pos:start="317:54" pos:end="317:65"><name pos:start="317:54" pos:end="317:54">s</name><operator pos:start="317:55" pos:end="317:56">-&gt;</operator><name pos:start="317:57" pos:end="317:65">blocksize</name></name> <operator pos:start="317:67" pos:end="317:67">/</operator> <literal type="number" pos:start="317:69" pos:end="317:69">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <for pos:start="319:17" pos:end="321:50">for <control pos:start="319:21" pos:end="319:50">(<init pos:start="319:22" pos:end="319:27"><expr pos:start="319:22" pos:end="319:26"><name pos:start="319:22" pos:end="319:22">i</name> <operator pos:start="319:24" pos:end="319:24">=</operator> <literal type="number" pos:start="319:26" pos:end="319:26">0</literal></expr>;</init> <condition pos:start="319:29" pos:end="319:45"><expr pos:start="319:29" pos:end="319:44"><name pos:start="319:29" pos:end="319:29">i</name> <operator pos:start="319:31" pos:end="319:31">&lt;</operator> <name pos:start="319:33" pos:end="319:44"><name pos:start="319:33" pos:end="319:33">s</name><operator pos:start="319:34" pos:end="319:35">-&gt;</operator><name pos:start="319:36" pos:end="319:44">blocksize</name></name></expr>;</condition> <incr pos:start="319:47" pos:end="319:49"><expr pos:start="319:47" pos:end="319:49"><name pos:start="319:47" pos:end="319:47">i</name><operator pos:start="319:48" pos:end="319:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="321:21" pos:end="321:50"><block_content pos:start="321:21" pos:end="321:50">

                    <expr_stmt pos:start="321:21" pos:end="321:50"><expr pos:start="321:21" pos:end="321:49"><name pos:start="321:21" pos:end="321:23">sum</name> <operator pos:start="321:25" pos:end="321:26">+=</operator> <name pos:start="321:28" pos:end="321:49"><name pos:start="321:28" pos:end="321:28">s</name><operator pos:start="321:29" pos:end="321:30">-&gt;</operator><name pos:start="321:31" pos:end="321:37">decoded</name><index pos:start="321:38" pos:end="321:46">[<expr pos:start="321:39" pos:end="321:45"><name pos:start="321:39" pos:end="321:45">channel</name></expr>]</index><index pos:start="321:47" pos:end="321:49">[<expr pos:start="321:48" pos:end="321:48"><name pos:start="321:48" pos:end="321:48">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



                <for pos:start="325:17" pos:end="327:70">for <control pos:start="325:21" pos:end="325:46">(<init pos:start="325:22" pos:end="325:27"><expr pos:start="325:22" pos:end="325:26"><name pos:start="325:22" pos:end="325:22">i</name> <operator pos:start="325:24" pos:end="325:24">=</operator> <literal type="number" pos:start="325:26" pos:end="325:26">1</literal></expr>;</init> <condition pos:start="325:29" pos:end="325:41"><expr pos:start="325:29" pos:end="325:40"><name pos:start="325:29" pos:end="325:29">i</name> <operator pos:start="325:31" pos:end="325:31">&lt;</operator> <name pos:start="325:33" pos:end="325:40"><name pos:start="325:33" pos:end="325:33">s</name><operator pos:start="325:34" pos:end="325:35">-&gt;</operator><name pos:start="325:36" pos:end="325:40">nmean</name></name></expr>;</condition> <incr pos:start="325:43" pos:end="325:45"><expr pos:start="325:43" pos:end="325:45"><name pos:start="325:43" pos:end="325:43">i</name><operator pos:start="325:44" pos:end="325:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="327:21" pos:end="327:70"><block_content pos:start="327:21" pos:end="327:70">

                    <expr_stmt pos:start="327:21" pos:end="327:70"><expr pos:start="327:21" pos:end="327:69"><name pos:start="327:21" pos:end="327:45"><name pos:start="327:21" pos:end="327:21">s</name><operator pos:start="327:22" pos:end="327:23">-&gt;</operator><name pos:start="327:24" pos:end="327:29">offset</name><index pos:start="327:30" pos:end="327:38">[<expr pos:start="327:31" pos:end="327:37"><name pos:start="327:31" pos:end="327:37">channel</name></expr>]</index><index pos:start="327:39" pos:end="327:45">[<expr pos:start="327:40" pos:end="327:44"><name pos:start="327:40" pos:end="327:40">i</name> <operator pos:start="327:42" pos:end="327:42">-</operator> <literal type="number" pos:start="327:44" pos:end="327:44">1</literal></expr>]</index></name> <operator pos:start="327:47" pos:end="327:47">=</operator> <name pos:start="327:49" pos:end="327:69"><name pos:start="327:49" pos:end="327:49">s</name><operator pos:start="327:50" pos:end="327:51">-&gt;</operator><name pos:start="327:52" pos:end="327:57">offset</name><index pos:start="327:58" pos:end="327:66">[<expr pos:start="327:59" pos:end="327:65"><name pos:start="327:59" pos:end="327:65">channel</name></expr>]</index><index pos:start="327:67" pos:end="327:69">[<expr pos:start="327:68" pos:end="327:68"><name pos:start="327:68" pos:end="327:68">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



                <if_stmt pos:start="331:17" pos:end="337:91"><if pos:start="331:17" pos:end="333:74">if <condition pos:start="331:20" pos:end="331:35">(<expr pos:start="331:21" pos:end="331:34"><name pos:start="331:21" pos:end="331:30"><name pos:start="331:21" pos:end="331:21">s</name><operator pos:start="331:22" pos:end="331:23">-&gt;</operator><name pos:start="331:24" pos:end="331:30">version</name></name> <operator pos:start="331:32" pos:end="331:32">&lt;</operator> <literal type="number" pos:start="331:34" pos:end="331:34">2</literal></expr>)</condition><block type="pseudo" pos:start="333:21" pos:end="333:74"><block_content pos:start="333:21" pos:end="333:74">

                    <expr_stmt pos:start="333:21" pos:end="333:74"><expr pos:start="333:21" pos:end="333:73"><name pos:start="333:21" pos:end="333:52"><name pos:start="333:21" pos:end="333:21">s</name><operator pos:start="333:22" pos:end="333:23">-&gt;</operator><name pos:start="333:24" pos:end="333:29">offset</name><index pos:start="333:30" pos:end="333:38">[<expr pos:start="333:31" pos:end="333:37"><name pos:start="333:31" pos:end="333:37">channel</name></expr>]</index><index pos:start="333:39" pos:end="333:52">[<expr pos:start="333:40" pos:end="333:51"><name pos:start="333:40" pos:end="333:47"><name pos:start="333:40" pos:end="333:40">s</name><operator pos:start="333:41" pos:end="333:42">-&gt;</operator><name pos:start="333:43" pos:end="333:47">nmean</name></name> <operator pos:start="333:49" pos:end="333:49">-</operator> <literal type="number" pos:start="333:51" pos:end="333:51">1</literal></expr>]</index></name> <operator pos:start="333:54" pos:end="333:54">=</operator> <name pos:start="333:56" pos:end="333:58">sum</name> <operator pos:start="333:60" pos:end="333:60">/</operator> <name pos:start="333:62" pos:end="333:73"><name pos:start="333:62" pos:end="333:62">s</name><operator pos:start="333:63" pos:end="333:64">-&gt;</operator><name pos:start="333:65" pos:end="333:73">blocksize</name></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="335:17" pos:end="337:91">else<block type="pseudo" pos:start="337:21" pos:end="337:91"><block_content pos:start="337:21" pos:end="337:91">

                    <expr_stmt pos:start="337:21" pos:end="337:91"><expr pos:start="337:21" pos:end="337:90"><name pos:start="337:21" pos:end="337:52"><name pos:start="337:21" pos:end="337:21">s</name><operator pos:start="337:22" pos:end="337:23">-&gt;</operator><name pos:start="337:24" pos:end="337:29">offset</name><index pos:start="337:30" pos:end="337:38">[<expr pos:start="337:31" pos:end="337:37"><name pos:start="337:31" pos:end="337:37">channel</name></expr>]</index><index pos:start="337:39" pos:end="337:52">[<expr pos:start="337:40" pos:end="337:51"><name pos:start="337:40" pos:end="337:47"><name pos:start="337:40" pos:end="337:40">s</name><operator pos:start="337:41" pos:end="337:42">-&gt;</operator><name pos:start="337:43" pos:end="337:47">nmean</name></name> <operator pos:start="337:49" pos:end="337:49">-</operator> <literal type="number" pos:start="337:51" pos:end="337:51">1</literal></expr>]</index></name> <operator pos:start="337:54" pos:end="337:54">=</operator> <operator pos:start="337:56" pos:end="337:56">(</operator><name pos:start="337:57" pos:end="337:59">sum</name> <operator pos:start="337:61" pos:end="337:61">/</operator> <name pos:start="337:63" pos:end="337:74"><name pos:start="337:63" pos:end="337:63">s</name><operator pos:start="337:64" pos:end="337:65">-&gt;</operator><name pos:start="337:66" pos:end="337:74">blocksize</name></name><operator pos:start="337:75" pos:end="337:75">)</operator> <operator pos:start="337:77" pos:end="337:78">&lt;&lt;</operator> <name pos:start="337:80" pos:end="337:90"><name pos:start="337:80" pos:end="337:80">s</name><operator pos:start="337:81" pos:end="337:82">-&gt;</operator><name pos:start="337:83" pos:end="337:90">bitshift</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="343:13" pos:end="343:59">/* copy wrap samples for use with next block */</comment>

            <for pos:start="345:13" pos:end="347:79">for <control pos:start="345:17" pos:end="345:43">(<init pos:start="345:18" pos:end="345:31"><expr pos:start="345:18" pos:end="345:30"><name pos:start="345:18" pos:end="345:18">i</name> <operator pos:start="345:20" pos:end="345:20">=</operator> <operator pos:start="345:22" pos:end="345:22">-</operator><name pos:start="345:23" pos:end="345:30"><name pos:start="345:23" pos:end="345:23">s</name><operator pos:start="345:24" pos:end="345:25">-&gt;</operator><name pos:start="345:26" pos:end="345:30">nwrap</name></name></expr>;</init> <condition pos:start="345:33" pos:end="345:38"><expr pos:start="345:33" pos:end="345:37"><name pos:start="345:33" pos:end="345:33">i</name> <operator pos:start="345:35" pos:end="345:35">&lt;</operator> <literal type="number" pos:start="345:37" pos:end="345:37">0</literal></expr>;</condition> <incr pos:start="345:40" pos:end="345:42"><expr pos:start="345:40" pos:end="345:42"><name pos:start="345:40" pos:end="345:40">i</name><operator pos:start="345:41" pos:end="345:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="347:17" pos:end="347:79"><block_content pos:start="347:17" pos:end="347:79">

                <expr_stmt pos:start="347:17" pos:end="347:79"><expr pos:start="347:17" pos:end="347:78"><name pos:start="347:17" pos:end="347:38"><name pos:start="347:17" pos:end="347:17">s</name><operator pos:start="347:18" pos:end="347:19">-&gt;</operator><name pos:start="347:20" pos:end="347:26">decoded</name><index pos:start="347:27" pos:end="347:35">[<expr pos:start="347:28" pos:end="347:34"><name pos:start="347:28" pos:end="347:34">channel</name></expr>]</index><index pos:start="347:36" pos:end="347:38">[<expr pos:start="347:37" pos:end="347:37"><name pos:start="347:37" pos:end="347:37">i</name></expr>]</index></name> <operator pos:start="347:40" pos:end="347:40">=</operator> <name pos:start="347:42" pos:end="347:78"><name pos:start="347:42" pos:end="347:42">s</name><operator pos:start="347:43" pos:end="347:44">-&gt;</operator><name pos:start="347:45" pos:end="347:51">decoded</name><index pos:start="347:52" pos:end="347:60">[<expr pos:start="347:53" pos:end="347:59"><name pos:start="347:53" pos:end="347:59">channel</name></expr>]</index><index pos:start="347:61" pos:end="347:78">[<expr pos:start="347:62" pos:end="347:77"><name pos:start="347:62" pos:end="347:62">i</name> <operator pos:start="347:64" pos:end="347:64">+</operator> <name pos:start="347:66" pos:end="347:77"><name pos:start="347:66" pos:end="347:66">s</name><operator pos:start="347:67" pos:end="347:68">-&gt;</operator><name pos:start="347:69" pos:end="347:77">blocksize</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



            <comment type="block" pos:start="351:13" pos:end="353:33">/* shift samples to add in unused zero bits which were removed

             * during encoding */</comment>

            <expr_stmt pos:start="355:13" pos:end="355:49"><expr pos:start="355:13" pos:end="355:48"><call pos:start="355:13" pos:end="355:48"><name pos:start="355:13" pos:end="355:24">fix_bitshift</name><argument_list pos:start="355:25" pos:end="355:48">(<argument pos:start="355:26" pos:end="355:26"><expr pos:start="355:26" pos:end="355:26"><name pos:start="355:26" pos:end="355:26">s</name></expr></argument>, <argument pos:start="355:29" pos:end="355:47"><expr pos:start="355:29" pos:end="355:47"><name pos:start="355:29" pos:end="355:47"><name pos:start="355:29" pos:end="355:29">s</name><operator pos:start="355:30" pos:end="355:31">-&gt;</operator><name pos:start="355:32" pos:end="355:38">decoded</name><index pos:start="355:39" pos:end="355:47">[<expr pos:start="355:40" pos:end="355:46"><name pos:start="355:40" pos:end="355:46">channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="359:13" pos:end="359:78">/* if this is the last channel in the block, output the samples */</comment>

            <expr_stmt pos:start="361:13" pos:end="361:26"><expr pos:start="361:13" pos:end="361:25"><name pos:start="361:13" pos:end="361:23"><name pos:start="361:13" pos:end="361:13">s</name><operator pos:start="361:14" pos:end="361:15">-&gt;</operator><name pos:start="361:16" pos:end="361:23">cur_chan</name></name><operator pos:start="361:24" pos:end="361:25">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="363:13" pos:end="417:13"><if pos:start="363:13" pos:end="417:13">if <condition pos:start="363:16" pos:end="363:43">(<expr pos:start="363:17" pos:end="363:42"><name pos:start="363:17" pos:end="363:27"><name pos:start="363:17" pos:end="363:17">s</name><operator pos:start="363:18" pos:end="363:19">-&gt;</operator><name pos:start="363:20" pos:end="363:27">cur_chan</name></name> <operator pos:start="363:29" pos:end="363:30">==</operator> <name pos:start="363:32" pos:end="363:42"><name pos:start="363:32" pos:end="363:32">s</name><operator pos:start="363:33" pos:end="363:34">-&gt;</operator><name pos:start="363:35" pos:end="363:42">channels</name></name></expr>)</condition> <block pos:start="363:45" pos:end="417:13">{<block_content pos:start="365:17" pos:end="415:35">

                <decl_stmt pos:start="365:17" pos:end="365:36"><decl pos:start="365:17" pos:end="365:35"><type pos:start="365:17" pos:end="365:25"><name pos:start="365:17" pos:end="365:23">uint8_t</name> <modifier pos:start="365:25" pos:end="365:25">*</modifier></type><name pos:start="365:26" pos:end="365:35">samples_u8</name></decl>;</decl_stmt>

                <decl_stmt pos:start="367:17" pos:end="367:37"><decl pos:start="367:17" pos:end="367:36"><type pos:start="367:17" pos:end="367:25"><name pos:start="367:17" pos:end="367:23">int16_t</name> <modifier pos:start="367:25" pos:end="367:25">*</modifier></type><name pos:start="367:26" pos:end="367:36">samples_s16</name></decl>;</decl_stmt>

                <decl_stmt pos:start="369:17" pos:end="369:25"><decl pos:start="369:17" pos:end="369:24"><type pos:start="369:17" pos:end="369:19"><name pos:start="369:17" pos:end="369:19">int</name></type> <name pos:start="369:21" pos:end="369:24">chan</name></decl>;</decl_stmt>



                <comment type="block" pos:start="373:17" pos:end="373:39">/* get output buffer */</comment>

                <expr_stmt pos:start="375:17" pos:end="375:49"><expr pos:start="375:17" pos:end="375:48"><name pos:start="375:17" pos:end="375:33"><name pos:start="375:17" pos:end="375:21">frame</name><operator pos:start="375:22" pos:end="375:23">-&gt;</operator><name pos:start="375:24" pos:end="375:33">nb_samples</name></name> <operator pos:start="375:35" pos:end="375:35">=</operator> <name pos:start="375:37" pos:end="375:48"><name pos:start="375:37" pos:end="375:37">s</name><operator pos:start="375:38" pos:end="375:39">-&gt;</operator><name pos:start="375:40" pos:end="375:48">blocksize</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="377:17" pos:end="379:31"><if pos:start="377:17" pos:end="379:31">if <condition pos:start="377:20" pos:end="377:63">(<expr pos:start="377:21" pos:end="377:62"><operator pos:start="377:21" pos:end="377:21">(</operator><name pos:start="377:22" pos:end="377:24">ret</name> <operator pos:start="377:26" pos:end="377:26">=</operator> <call pos:start="377:28" pos:end="377:57"><name pos:start="377:28" pos:end="377:40">ff_get_buffer</name><argument_list pos:start="377:41" pos:end="377:57">(<argument pos:start="377:42" pos:end="377:46"><expr pos:start="377:42" pos:end="377:46"><name pos:start="377:42" pos:end="377:46">avctx</name></expr></argument>, <argument pos:start="377:49" pos:end="377:53"><expr pos:start="377:49" pos:end="377:53"><name pos:start="377:49" pos:end="377:53">frame</name></expr></argument>, <argument pos:start="377:56" pos:end="377:56"><expr pos:start="377:56" pos:end="377:56"><literal type="number" pos:start="377:56" pos:end="377:56">0</literal></expr></argument>)</argument_list></call><operator pos:start="377:58" pos:end="377:58">)</operator> <operator pos:start="377:60" pos:end="377:60">&lt;</operator> <literal type="number" pos:start="377:62" pos:end="377:62">0</literal></expr>)</condition><block type="pseudo" pos:start="379:21" pos:end="379:31"><block_content pos:start="379:21" pos:end="379:31">

                    <return pos:start="379:21" pos:end="379:31">return <expr pos:start="379:28" pos:end="379:30"><name pos:start="379:28" pos:end="379:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <for pos:start="383:17" pos:end="411:17">for <control pos:start="383:21" pos:end="383:58">(<init pos:start="383:22" pos:end="383:30"><expr pos:start="383:22" pos:end="383:29"><name pos:start="383:22" pos:end="383:25">chan</name> <operator pos:start="383:27" pos:end="383:27">=</operator> <literal type="number" pos:start="383:29" pos:end="383:29">0</literal></expr>;</init> <condition pos:start="383:32" pos:end="383:50"><expr pos:start="383:32" pos:end="383:49"><name pos:start="383:32" pos:end="383:35">chan</name> <operator pos:start="383:37" pos:end="383:37">&lt;</operator> <name pos:start="383:39" pos:end="383:49"><name pos:start="383:39" pos:end="383:39">s</name><operator pos:start="383:40" pos:end="383:41">-&gt;</operator><name pos:start="383:42" pos:end="383:49">channels</name></name></expr>;</condition> <incr pos:start="383:52" pos:end="383:57"><expr pos:start="383:52" pos:end="383:57"><name pos:start="383:52" pos:end="383:55">chan</name><operator pos:start="383:56" pos:end="383:57">++</operator></expr></incr>)</control> <block pos:start="383:60" pos:end="411:17">{<block_content pos:start="385:21" pos:end="409:21">

                    <expr_stmt pos:start="385:21" pos:end="385:75"><expr pos:start="385:21" pos:end="385:74"><name pos:start="385:21" pos:end="385:30">samples_u8</name>  <operator pos:start="385:33" pos:end="385:33">=</operator> <operator pos:start="385:35" pos:end="385:35">(</operator><operator pos:start="385:36" pos:end="385:36">(</operator><name pos:start="385:37" pos:end="385:43">uint8_t</name> <operator pos:start="385:45" pos:end="385:45">*</operator><operator pos:start="385:46" pos:end="385:46">*</operator><operator pos:start="385:47" pos:end="385:47">)</operator><name pos:start="385:48" pos:end="385:67"><name pos:start="385:48" pos:end="385:52">frame</name><operator pos:start="385:53" pos:end="385:54">-&gt;</operator><name pos:start="385:55" pos:end="385:67">extended_data</name></name><operator pos:start="385:68" pos:end="385:68">)</operator><index pos:start="385:69" pos:end="385:74">[<expr pos:start="385:70" pos:end="385:73"><name pos:start="385:70" pos:end="385:73">chan</name></expr>]</index></expr>;</expr_stmt>

                    <expr_stmt pos:start="387:21" pos:end="387:75"><expr pos:start="387:21" pos:end="387:74"><name pos:start="387:21" pos:end="387:31">samples_s16</name> <operator pos:start="387:33" pos:end="387:33">=</operator> <operator pos:start="387:35" pos:end="387:35">(</operator><operator pos:start="387:36" pos:end="387:36">(</operator><name pos:start="387:37" pos:end="387:43">int16_t</name> <operator pos:start="387:45" pos:end="387:45">*</operator><operator pos:start="387:46" pos:end="387:46">*</operator><operator pos:start="387:47" pos:end="387:47">)</operator><name pos:start="387:48" pos:end="387:67"><name pos:start="387:48" pos:end="387:52">frame</name><operator pos:start="387:53" pos:end="387:54">-&gt;</operator><name pos:start="387:55" pos:end="387:67">extended_data</name></name><operator pos:start="387:68" pos:end="387:68">)</operator><index pos:start="387:69" pos:end="387:74">[<expr pos:start="387:70" pos:end="387:73"><name pos:start="387:70" pos:end="387:73">chan</name></expr>]</index></expr>;</expr_stmt>

                    <for pos:start="389:21" pos:end="409:21">for <control pos:start="389:25" pos:end="389:54">(<init pos:start="389:26" pos:end="389:31"><expr pos:start="389:26" pos:end="389:30"><name pos:start="389:26" pos:end="389:26">i</name> <operator pos:start="389:28" pos:end="389:28">=</operator> <literal type="number" pos:start="389:30" pos:end="389:30">0</literal></expr>;</init> <condition pos:start="389:33" pos:end="389:49"><expr pos:start="389:33" pos:end="389:48"><name pos:start="389:33" pos:end="389:33">i</name> <operator pos:start="389:35" pos:end="389:35">&lt;</operator> <name pos:start="389:37" pos:end="389:48"><name pos:start="389:37" pos:end="389:37">s</name><operator pos:start="389:38" pos:end="389:39">-&gt;</operator><name pos:start="389:40" pos:end="389:48">blocksize</name></name></expr>;</condition> <incr pos:start="389:51" pos:end="389:53"><expr pos:start="389:51" pos:end="389:53"><name pos:start="389:51" pos:end="389:51">i</name><operator pos:start="389:52" pos:end="389:53">++</operator></expr></incr>)</control> <block pos:start="389:56" pos:end="409:21">{<block_content pos:start="391:25" pos:end="407:25">

                        <switch pos:start="391:25" pos:end="407:25">switch <condition pos:start="391:32" pos:end="391:50">(<expr pos:start="391:33" pos:end="391:49"><name pos:start="391:33" pos:end="391:49"><name pos:start="391:33" pos:end="391:33">s</name><operator pos:start="391:34" pos:end="391:35">-&gt;</operator><name pos:start="391:36" pos:end="391:49">internal_ftype</name></name></expr>)</condition> <block pos:start="391:52" pos:end="407:25">{<block_content pos:start="393:25" pos:end="405:34">

                        <case pos:start="393:25" pos:end="393:37">case <expr pos:start="393:30" pos:end="393:36"><name pos:start="393:30" pos:end="393:36">TYPE_U8</name></expr>:</case>

                            <expr_stmt pos:start="395:29" pos:end="395:79"><expr pos:start="395:29" pos:end="395:78"><operator pos:start="395:29" pos:end="395:29">*</operator><name pos:start="395:30" pos:end="395:39">samples_u8</name><operator pos:start="395:40" pos:end="395:41">++</operator> <operator pos:start="395:43" pos:end="395:43">=</operator> <call pos:start="395:45" pos:end="395:78"><name pos:start="395:45" pos:end="395:57">av_clip_uint8</name><argument_list pos:start="395:58" pos:end="395:78">(<argument pos:start="395:59" pos:end="395:77"><expr pos:start="395:59" pos:end="395:77"><name pos:start="395:59" pos:end="395:77"><name pos:start="395:59" pos:end="395:59">s</name><operator pos:start="395:60" pos:end="395:61">-&gt;</operator><name pos:start="395:62" pos:end="395:68">decoded</name><index pos:start="395:69" pos:end="395:74">[<expr pos:start="395:70" pos:end="395:73"><name pos:start="395:70" pos:end="395:73">chan</name></expr>]</index><index pos:start="395:75" pos:end="395:77">[<expr pos:start="395:76" pos:end="395:76"><name pos:start="395:76" pos:end="395:76">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="397:29" pos:end="397:34">break;</break>

                        <case pos:start="399:25" pos:end="399:40">case <expr pos:start="399:30" pos:end="399:39"><name pos:start="399:30" pos:end="399:39">TYPE_S16HL</name></expr>:</case>

                        <case pos:start="401:25" pos:end="401:40">case <expr pos:start="401:30" pos:end="401:39"><name pos:start="401:30" pos:end="401:39">TYPE_S16LH</name></expr>:</case>

                            <expr_stmt pos:start="403:29" pos:end="403:80"><expr pos:start="403:29" pos:end="403:79"><operator pos:start="403:29" pos:end="403:29">*</operator><name pos:start="403:30" pos:end="403:40">samples_s16</name><operator pos:start="403:41" pos:end="403:42">++</operator> <operator pos:start="403:44" pos:end="403:44">=</operator> <call pos:start="403:46" pos:end="403:79"><name pos:start="403:46" pos:end="403:58">av_clip_int16</name><argument_list pos:start="403:59" pos:end="403:79">(<argument pos:start="403:60" pos:end="403:78"><expr pos:start="403:60" pos:end="403:78"><name pos:start="403:60" pos:end="403:78"><name pos:start="403:60" pos:end="403:60">s</name><operator pos:start="403:61" pos:end="403:62">-&gt;</operator><name pos:start="403:63" pos:end="403:69">decoded</name><index pos:start="403:70" pos:end="403:75">[<expr pos:start="403:71" pos:end="403:74"><name pos:start="403:71" pos:end="403:74">chan</name></expr>]</index><index pos:start="403:76" pos:end="403:78">[<expr pos:start="403:77" pos:end="403:77"><name pos:start="403:77" pos:end="403:77">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="405:29" pos:end="405:34">break;</break>

                        </block_content>}</block></switch>

                    </block_content>}</block></for>

                </block_content>}</block></for>



                <expr_stmt pos:start="415:17" pos:end="415:35"><expr pos:start="415:17" pos:end="415:34"><operator pos:start="415:17" pos:end="415:17">*</operator><name pos:start="415:18" pos:end="415:30">got_frame_ptr</name> <operator pos:start="415:32" pos:end="415:32">=</operator> <literal type="number" pos:start="415:34" pos:end="415:34">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="423:5" pos:end="425:27"><if pos:start="423:5" pos:end="425:27">if <condition pos:start="423:8" pos:end="423:34">(<expr pos:start="423:9" pos:end="423:33"><name pos:start="423:9" pos:end="423:19"><name pos:start="423:9" pos:end="423:9">s</name><operator pos:start="423:10" pos:end="423:11">-&gt;</operator><name pos:start="423:12" pos:end="423:19">cur_chan</name></name> <operator pos:start="423:21" pos:end="423:21">&lt;</operator> <name pos:start="423:23" pos:end="423:33"><name pos:start="423:23" pos:end="423:23">s</name><operator pos:start="423:24" pos:end="423:25">-&gt;</operator><name pos:start="423:26" pos:end="423:33">channels</name></name></expr>)</condition><block type="pseudo" pos:start="425:9" pos:end="425:27"><block_content pos:start="425:9" pos:end="425:27">

        <expr_stmt pos:start="425:9" pos:end="425:27"><expr pos:start="425:9" pos:end="425:26"><operator pos:start="425:9" pos:end="425:9">*</operator><name pos:start="425:10" pos:end="425:22">got_frame_ptr</name> <operator pos:start="425:24" pos:end="425:24">=</operator> <literal type="number" pos:start="425:26" pos:end="425:26">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<label pos:start="429:1" pos:end="429:13"><name pos:start="429:1" pos:end="429:12">finish_frame</name>:</label>

    <expr_stmt pos:start="431:5" pos:end="431:76"><expr pos:start="431:5" pos:end="431:75"><name pos:start="431:5" pos:end="431:15"><name pos:start="431:5" pos:end="431:5">s</name><operator pos:start="431:6" pos:end="431:7">-&gt;</operator><name pos:start="431:8" pos:end="431:15">bitindex</name></name> <operator pos:start="431:17" pos:end="431:17">=</operator> <call pos:start="431:19" pos:end="431:40"><name pos:start="431:19" pos:end="431:32">get_bits_count</name><argument_list pos:start="431:33" pos:end="431:40">(<argument pos:start="431:34" pos:end="431:39"><expr pos:start="431:34" pos:end="431:39"><operator pos:start="431:34" pos:end="431:34">&amp;</operator><name pos:start="431:35" pos:end="431:39"><name pos:start="431:35" pos:end="431:35">s</name><operator pos:start="431:36" pos:end="431:37">-&gt;</operator><name pos:start="431:38" pos:end="431:39">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="431:42" pos:end="431:42">-</operator> <literal type="number" pos:start="431:44" pos:end="431:44">8</literal> <operator pos:start="431:46" pos:end="431:46">*</operator> <operator pos:start="431:48" pos:end="431:48">(</operator><call pos:start="431:49" pos:end="431:70"><name pos:start="431:49" pos:end="431:62">get_bits_count</name><argument_list pos:start="431:63" pos:end="431:70">(<argument pos:start="431:64" pos:end="431:69"><expr pos:start="431:64" pos:end="431:69"><operator pos:start="431:64" pos:end="431:64">&amp;</operator><name pos:start="431:65" pos:end="431:69"><name pos:start="431:65" pos:end="431:65">s</name><operator pos:start="431:66" pos:end="431:67">-&gt;</operator><name pos:start="431:68" pos:end="431:69">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="431:72" pos:end="431:72">/</operator> <literal type="number" pos:start="431:74" pos:end="431:74">8</literal><operator pos:start="431:75" pos:end="431:75">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:45"><expr pos:start="433:5" pos:end="433:44"><name pos:start="433:5" pos:end="433:5">i</name>           <operator pos:start="433:17" pos:end="433:17">=</operator> <call pos:start="433:19" pos:end="433:40"><name pos:start="433:19" pos:end="433:32">get_bits_count</name><argument_list pos:start="433:33" pos:end="433:40">(<argument pos:start="433:34" pos:end="433:39"><expr pos:start="433:34" pos:end="433:39"><operator pos:start="433:34" pos:end="433:34">&amp;</operator><name pos:start="433:35" pos:end="433:39"><name pos:start="433:35" pos:end="433:35">s</name><operator pos:start="433:36" pos:end="433:37">-&gt;</operator><name pos:start="433:38" pos:end="433:39">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="433:42" pos:end="433:42">/</operator> <literal type="number" pos:start="433:44" pos:end="433:44">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="435:5" pos:end="445:5"><if pos:start="435:5" pos:end="445:5">if <condition pos:start="435:8" pos:end="435:21">(<expr pos:start="435:9" pos:end="435:20"><name pos:start="435:9" pos:end="435:9">i</name> <operator pos:start="435:11" pos:end="435:11">&gt;</operator> <name pos:start="435:13" pos:end="435:20">buf_size</name></expr>)</condition> <block pos:start="435:23" pos:end="445:5">{<block_content pos:start="437:9" pos:end="443:35">

        <expr_stmt pos:start="437:9" pos:end="437:71"><expr pos:start="437:9" pos:end="437:70"><call pos:start="437:9" pos:end="437:70"><name pos:start="437:9" pos:end="437:14">av_log</name><argument_list pos:start="437:15" pos:end="437:70">(<argument pos:start="437:16" pos:end="437:23"><expr pos:start="437:16" pos:end="437:23"><name pos:start="437:16" pos:end="437:23"><name pos:start="437:16" pos:end="437:16">s</name><operator pos:start="437:17" pos:end="437:18">-&gt;</operator><name pos:start="437:19" pos:end="437:23">avctx</name></name></expr></argument>, <argument pos:start="437:26" pos:end="437:37"><expr pos:start="437:26" pos:end="437:37"><name pos:start="437:26" pos:end="437:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="437:40" pos:end="437:55"><expr pos:start="437:40" pos:end="437:55"><literal type="string" pos:start="437:40" pos:end="437:55">"overread: %d\n"</literal></expr></argument>, <argument pos:start="437:58" pos:end="437:69"><expr pos:start="437:58" pos:end="437:69"><name pos:start="437:58" pos:end="437:58">i</name> <operator pos:start="437:60" pos:end="437:60">-</operator> <name pos:start="437:62" pos:end="437:69">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:31"><expr pos:start="439:9" pos:end="439:30"><name pos:start="439:9" pos:end="439:25"><name pos:start="439:9" pos:end="439:9">s</name><operator pos:start="439:10" pos:end="439:11">-&gt;</operator><name pos:start="439:12" pos:end="439:25">bitstream_size</name></name>  <operator pos:start="439:28" pos:end="439:28">=</operator> <literal type="number" pos:start="439:30" pos:end="439:30">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="441:9" pos:end="441:31"><expr pos:start="441:9" pos:end="441:30"><name pos:start="441:9" pos:end="441:26"><name pos:start="441:9" pos:end="441:9">s</name><operator pos:start="441:10" pos:end="441:11">-&gt;</operator><name pos:start="441:12" pos:end="441:26">bitstream_index</name></name> <operator pos:start="441:28" pos:end="441:28">=</operator> <literal type="number" pos:start="441:30" pos:end="441:30">0</literal></expr>;</expr_stmt>

        <return pos:start="443:9" pos:end="443:35">return <expr pos:start="443:16" pos:end="443:34"><name pos:start="443:16" pos:end="443:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="447:5" pos:end="457:17"><if pos:start="447:5" pos:end="455:5">if <condition pos:start="447:8" pos:end="447:26">(<expr pos:start="447:9" pos:end="447:25"><name pos:start="447:9" pos:end="447:25"><name pos:start="447:9" pos:end="447:9">s</name><operator pos:start="447:10" pos:end="447:11">-&gt;</operator><name pos:start="447:12" pos:end="447:25">bitstream_size</name></name></expr>)</condition> <block pos:start="447:28" pos:end="455:5">{<block_content pos:start="449:9" pos:end="453:30">

        <expr_stmt pos:start="449:9" pos:end="449:32"><expr pos:start="449:9" pos:end="449:31"><name pos:start="449:9" pos:end="449:26"><name pos:start="449:9" pos:end="449:9">s</name><operator pos:start="449:10" pos:end="449:11">-&gt;</operator><name pos:start="449:12" pos:end="449:26">bitstream_index</name></name> <operator pos:start="449:28" pos:end="449:29">+=</operator> <name pos:start="449:31" pos:end="449:31">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="451:9" pos:end="451:32"><expr pos:start="451:9" pos:end="451:31"><name pos:start="451:9" pos:end="451:25"><name pos:start="451:9" pos:end="451:9">s</name><operator pos:start="451:10" pos:end="451:11">-&gt;</operator><name pos:start="451:12" pos:end="451:25">bitstream_size</name></name>  <operator pos:start="451:28" pos:end="451:29">-=</operator> <name pos:start="451:31" pos:end="451:31">i</name></expr>;</expr_stmt>

        <return pos:start="453:9" pos:end="453:30">return <expr pos:start="453:16" pos:end="453:29"><name pos:start="453:16" pos:end="453:29">input_buf_size</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="455:7" pos:end="457:17">else<block type="pseudo" pos:start="457:9" pos:end="457:17"><block_content pos:start="457:9" pos:end="457:17">

        <return pos:start="457:9" pos:end="457:17">return <expr pos:start="457:16" pos:end="457:16"><name pos:start="457:16" pos:end="457:16">i</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
