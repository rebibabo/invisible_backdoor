<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26550.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">usb_msd_realize_storage</name><parameter_list pos:start="1:36" pos:end="1:65">(<parameter pos:start="1:37" pos:end="1:50"><decl pos:start="1:37" pos:end="1:50"><type pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:45">USBDevice</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">dev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:57">Error</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:27">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MSDState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:38">= <expr pos:start="5:19" pos:end="5:38"><call pos:start="5:19" pos:end="5:38"><name pos:start="5:19" pos:end="5:33">USB_STORAGE_DEV</name><argument_list pos:start="5:34" pos:end="5:38">(<argument pos:start="5:35" pos:end="5:37"><expr pos:start="5:35" pos:end="5:37"><name pos:start="5:35" pos:end="5:37">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BlockBackend</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">blk</name> <init pos:start="7:23" pos:end="7:35">= <expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:25">s</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:31">conf</name><operator pos:start="7:32" pos:end="7:32">.</operator><name pos:start="7:33" pos:end="7:35">blk</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">SCSIDevice</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:24">scsi_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:13">(<expr pos:start="15:9" pos:end="15:12"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">blk</name></expr>)</condition> <block pos:start="15:15" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:51"><expr pos:start="17:9" pos:end="17:50"><call pos:start="17:9" pos:end="17:50"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:50">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:49"><expr pos:start="17:26" pos:end="17:49"><literal type="string" pos:start="17:26" pos:end="17:49">"drive property not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:42"><expr pos:start="25:5" pos:end="25:41"><call pos:start="25:5" pos:end="25:41"><name pos:start="25:5" pos:end="25:16">bdrv_add_key</name><argument_list pos:start="25:17" pos:end="25:41">(<argument pos:start="25:18" pos:end="25:28"><expr pos:start="25:18" pos:end="25:28"><call pos:start="25:18" pos:end="25:28"><name pos:start="25:18" pos:end="25:23">blk_bs</name><argument_list pos:start="25:24" pos:end="25:28">(<argument pos:start="25:25" pos:end="25:27"><expr pos:start="25:25" pos:end="25:27"><name pos:start="25:25" pos:end="25:27">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">NULL</name></expr></argument>, <argument pos:start="25:37" pos:end="25:40"><expr pos:start="25:37" pos:end="25:40"><operator pos:start="25:37" pos:end="25:37">&amp;</operator><name pos:start="25:38" pos:end="25:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="55:5"><if pos:start="27:5" pos:end="55:5">if <condition pos:start="27:8" pos:end="27:12">(<expr pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">err</name></expr>)</condition> <block pos:start="27:14" pos:end="55:5">{<block_content pos:start="29:9" pos:end="53:9">

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:33">(<expr pos:start="29:13" pos:end="29:32"><call pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:30">monitor_cur_is_qmp</name><argument_list pos:start="29:31" pos:end="29:32">()</argument_list></call></expr>)</condition> <block pos:start="29:35" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:19">

            <expr_stmt pos:start="31:13" pos:end="31:39"><expr pos:start="31:13" pos:end="31:38"><call pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:27">error_propagate</name><argument_list pos:start="31:28" pos:end="31:38">(<argument pos:start="31:29" pos:end="31:32"><expr pos:start="31:29" pos:end="31:32"><name pos:start="31:29" pos:end="31:32">errp</name></expr></argument>, <argument pos:start="31:35" pos:end="31:37"><expr pos:start="31:35" pos:end="31:37"><name pos:start="31:35" pos:end="31:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><call pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:18">error_free</name><argument_list pos:start="37:19" pos:end="37:23">(<argument pos:start="37:20" pos:end="37:22"><expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:19"><expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:11">err</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:18">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="53:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:19">cur_mon</name></expr>)</condition> <block pos:start="41:22" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:35">

            <expr_stmt pos:start="43:13" pos:end="45:64"><expr pos:start="43:13" pos:end="45:63"><call pos:start="43:13" pos:end="45:63"><name pos:start="43:13" pos:end="43:39">monitor_read_bdrv_key_start</name><argument_list pos:start="43:40" pos:end="45:63">(<argument pos:start="43:41" pos:end="43:47"><expr pos:start="43:41" pos:end="43:47"><name pos:start="43:41" pos:end="43:47">cur_mon</name></expr></argument>, <argument pos:start="43:50" pos:end="43:60"><expr pos:start="43:50" pos:end="43:60"><call pos:start="43:50" pos:end="43:60"><name pos:start="43:50" pos:end="43:55">blk_bs</name><argument_list pos:start="43:56" pos:end="43:60">(<argument pos:start="43:57" pos:end="43:59"><expr pos:start="43:57" pos:end="43:59"><name pos:start="43:57" pos:end="43:59">blk</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="45:41" pos:end="45:59"><expr pos:start="45:41" pos:end="45:59"><name pos:start="45:41" pos:end="45:59">usb_msd_password_cb</name></expr></argument>, <argument pos:start="45:62" pos:end="45:62"><expr pos:start="45:62" pos:end="45:62"><name pos:start="45:62" pos:end="45:62">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:18">dev</name><operator pos:start="47:19" pos:end="47:19">.</operator><name pos:start="47:20" pos:end="47:30">auto_attach</name></name> <operator pos:start="47:32" pos:end="47:32">=</operator> <literal type="number" pos:start="47:34" pos:end="47:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="53:9">else <block pos:start="49:16" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:26">

            <expr_stmt pos:start="51:13" pos:end="51:26"><expr pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:21">autostart</name> <operator pos:start="51:23" pos:end="51:23">=</operator> <literal type="number" pos:start="51:25" pos:end="51:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:18">blkconf_serial</name><argument_list pos:start="59:19" pos:end="59:42">(<argument pos:start="59:20" pos:end="59:27"><expr pos:start="59:20" pos:end="59:27"><operator pos:start="59:20" pos:end="59:20">&amp;</operator><name pos:start="59:21" pos:end="59:27"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:27">conf</name></name></expr></argument>, <argument pos:start="59:30" pos:end="59:41"><expr pos:start="59:30" pos:end="59:41"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:41"><name pos:start="59:31" pos:end="59:33">dev</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:41">serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><call pos:start="61:5" pos:end="61:32"><name pos:start="61:5" pos:end="61:22">blkconf_blocksizes</name><argument_list pos:start="61:23" pos:end="61:32">(<argument pos:start="61:24" pos:end="61:31"><expr pos:start="61:24" pos:end="61:31"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:31"><name pos:start="61:25" pos:end="61:25">s</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:31">conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="81:7">/*

     * Hack alert: this pretends to be a block device, but it's really

     * a SCSI bus that can serve only a single device, which it

     * creates automatically.  But first it needs to detach from its

     * blockdev, or else scsi_bus_legacy_add_drive() dies when it

     * attaches again.

     *

     * The hack is probably a bad idea.

     */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:38"><expr pos:start="83:5" pos:end="83:37"><call pos:start="83:5" pos:end="83:37"><name pos:start="83:5" pos:end="83:18">blk_detach_dev</name><argument_list pos:start="83:19" pos:end="83:37">(<argument pos:start="83:20" pos:end="83:22"><expr pos:start="83:20" pos:end="83:22"><name pos:start="83:20" pos:end="83:22">blk</name></expr></argument>, <argument pos:start="83:25" pos:end="83:36"><expr pos:start="83:25" pos:end="83:36"><operator pos:start="83:25" pos:end="83:25">&amp;</operator><name pos:start="83:26" pos:end="83:36"><name pos:start="83:26" pos:end="83:26">s</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:31">dev</name><operator pos:start="83:32" pos:end="83:32">.</operator><name pos:start="83:33" pos:end="83:36">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:23"><expr pos:start="85:5" pos:end="85:22"><name pos:start="85:5" pos:end="85:15"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:11">conf</name><operator pos:start="85:12" pos:end="85:12">.</operator><name pos:start="85:13" pos:end="85:15">blk</name></name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:22">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:32"><expr pos:start="89:5" pos:end="89:31"><call pos:start="89:5" pos:end="89:31"><name pos:start="89:5" pos:end="89:26">usb_desc_create_serial</name><argument_list pos:start="89:27" pos:end="89:31">(<argument pos:start="89:28" pos:end="89:30"><expr pos:start="89:28" pos:end="89:30"><name pos:start="89:28" pos:end="89:30">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:23"><expr pos:start="91:5" pos:end="91:22"><call pos:start="91:5" pos:end="91:22"><name pos:start="91:5" pos:end="91:17">usb_desc_init</name><argument_list pos:start="91:18" pos:end="91:22">(<argument pos:start="91:19" pos:end="91:21"><expr pos:start="91:19" pos:end="91:21"><name pos:start="91:19" pos:end="91:21">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="95:51"><expr pos:start="93:5" pos:end="95:50"><call pos:start="93:5" pos:end="95:50"><name pos:start="93:5" pos:end="93:16">scsi_bus_new</name><argument_list pos:start="93:17" pos:end="95:50">(<argument pos:start="93:18" pos:end="93:24"><expr pos:start="93:18" pos:end="93:24"><operator pos:start="93:18" pos:end="93:18">&amp;</operator><name pos:start="93:19" pos:end="93:24"><name pos:start="93:19" pos:end="93:19">s</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:24">bus</name></name></expr></argument>, <argument pos:start="93:27" pos:end="93:40"><expr pos:start="93:27" pos:end="93:40"><sizeof pos:start="93:27" pos:end="93:40">sizeof<argument_list pos:start="93:33" pos:end="93:40">(<argument pos:start="93:34" pos:end="93:39"><expr pos:start="93:34" pos:end="93:39"><name pos:start="93:34" pos:end="93:39"><name pos:start="93:34" pos:end="93:34">s</name><operator pos:start="93:35" pos:end="93:36">-&gt;</operator><name pos:start="93:37" pos:end="93:39">bus</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:43" pos:end="93:53"><expr pos:start="93:43" pos:end="93:53"><call pos:start="93:43" pos:end="93:53"><name pos:start="93:43" pos:end="93:48">DEVICE</name><argument_list pos:start="93:49" pos:end="93:53">(<argument pos:start="93:50" pos:end="93:52"><expr pos:start="93:50" pos:end="93:52"><name pos:start="93:50" pos:end="93:52">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                 <argument pos:start="95:18" pos:end="95:43"><expr pos:start="95:18" pos:end="95:43"><operator pos:start="95:18" pos:end="95:18">&amp;</operator><name pos:start="95:19" pos:end="95:43">usb_msd_scsi_info_storage</name></expr></argument>, <argument pos:start="95:46" pos:end="95:49"><expr pos:start="95:46" pos:end="95:49"><name pos:start="95:46" pos:end="95:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="101:47"><expr pos:start="97:5" pos:end="101:46"><name pos:start="97:5" pos:end="97:12">scsi_dev</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="101:46"><name pos:start="97:16" pos:end="97:40">scsi_bus_legacy_add_drive</name><argument_list pos:start="97:41" pos:end="101:46">(<argument pos:start="97:42" pos:end="97:48"><expr pos:start="97:42" pos:end="97:48"><operator pos:start="97:42" pos:end="97:42">&amp;</operator><name pos:start="97:43" pos:end="97:48"><name pos:start="97:43" pos:end="97:43">s</name><operator pos:start="97:44" pos:end="97:45">-&gt;</operator><name pos:start="97:46" pos:end="97:48">bus</name></name></expr></argument>, <argument pos:start="97:51" pos:end="97:53"><expr pos:start="97:51" pos:end="97:53"><name pos:start="97:51" pos:end="97:53">blk</name></expr></argument>, <argument pos:start="97:56" pos:end="97:56"><expr pos:start="97:56" pos:end="97:56"><literal type="number" pos:start="97:56" pos:end="97:56">0</literal></expr></argument>, <argument pos:start="97:59" pos:end="97:72"><expr pos:start="97:59" pos:end="97:72"><operator pos:start="97:59" pos:end="97:59">!</operator><operator pos:start="97:60" pos:end="97:60">!</operator><name pos:start="97:61" pos:end="97:72"><name pos:start="97:61" pos:end="97:61">s</name><operator pos:start="97:62" pos:end="97:63">-&gt;</operator><name pos:start="97:64" pos:end="97:72">removable</name></name></expr></argument>,

                                         <argument pos:start="99:42" pos:end="99:58"><expr pos:start="99:42" pos:end="99:58"><name pos:start="99:42" pos:end="99:58"><name pos:start="99:42" pos:end="99:42">s</name><operator pos:start="99:43" pos:end="99:44">-&gt;</operator><name pos:start="99:45" pos:end="99:48">conf</name><operator pos:start="99:49" pos:end="99:49">.</operator><name pos:start="99:50" pos:end="99:58">bootindex</name></name></expr></argument>, <argument pos:start="99:61" pos:end="99:71"><expr pos:start="99:61" pos:end="99:71"><name pos:start="99:61" pos:end="99:71"><name pos:start="99:61" pos:end="99:63">dev</name><operator pos:start="99:64" pos:end="99:65">-&gt;</operator><name pos:start="99:66" pos:end="99:71">serial</name></name></expr></argument>,

                                         <argument pos:start="101:42" pos:end="101:45"><expr pos:start="101:42" pos:end="101:45"><operator pos:start="101:42" pos:end="101:42">&amp;</operator><name pos:start="101:43" pos:end="101:45">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:18">(<expr pos:start="103:9" pos:end="103:17"><operator pos:start="103:9" pos:end="103:9">!</operator><name pos:start="103:10" pos:end="103:17">scsi_dev</name></expr>)</condition> <block pos:start="103:20" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:15">

        <expr_stmt pos:start="105:9" pos:end="105:35"><expr pos:start="105:9" pos:end="105:34"><call pos:start="105:9" pos:end="105:34"><name pos:start="105:9" pos:end="105:23">error_propagate</name><argument_list pos:start="105:24" pos:end="105:34">(<argument pos:start="105:25" pos:end="105:28"><expr pos:start="105:25" pos:end="105:28"><name pos:start="105:25" pos:end="105:28">errp</name></expr></argument>, <argument pos:start="105:31" pos:end="105:33"><expr pos:start="105:31" pos:end="105:33"><name pos:start="105:31" pos:end="105:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:30"><expr pos:start="111:5" pos:end="111:29"><call pos:start="111:5" pos:end="111:29"><name pos:start="111:5" pos:end="111:24">usb_msd_handle_reset</name><argument_list pos:start="111:25" pos:end="111:29">(<argument pos:start="111:26" pos:end="111:28"><expr pos:start="111:26" pos:end="111:28"><name pos:start="111:26" pos:end="111:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:27"><expr pos:start="113:5" pos:end="113:26"><name pos:start="113:5" pos:end="113:15"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:15">scsi_dev</name></name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:26">scsi_dev</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
