<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7756.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">int64_t</name></type> <name pos:start="1:9" pos:end="1:31">qmp_guest_fsfreeze_thaw</name><parameter_list pos:start="1:32" pos:end="1:44">(<parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:40"><name pos:start="1:33" pos:end="1:37">Error</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier><modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">err</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:13">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:26">GuestFsfreezeMountList</name></type> <name pos:start="7:28" pos:end="7:33">mounts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">GuestFsfreezeMount</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:29">mount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name></decl>, <decl pos:start="11:13" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:13">i</name> <init pos:start="11:15" pos:end="11:17">= <expr pos:start="11:17" pos:end="11:17"><literal type="number" pos:start="11:17" pos:end="11:17">0</literal></expr></init></decl>, <decl pos:start="11:20" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:25">logged</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><call pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:15">QTAILQ_INIT</name><argument_list pos:start="15:16" pos:end="15:24">(<argument pos:start="15:17" pos:end="15:23"><expr pos:start="15:17" pos:end="15:23"><operator pos:start="15:17" pos:end="15:17">&amp;</operator><name pos:start="15:18" pos:end="15:23">mounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:51"><expr pos:start="17:5" pos:end="17:50"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:50"><name pos:start="17:11" pos:end="17:41">guest_fsfreeze_build_mount_list</name><argument_list pos:start="17:42" pos:end="17:50">(<argument pos:start="17:43" pos:end="17:49"><expr pos:start="17:43" pos:end="17:49"><operator pos:start="17:43" pos:end="17:43">&amp;</operator><name pos:start="17:44" pos:end="17:49">mounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:12">(<expr pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">ret</name></expr>)</condition> <block pos:start="19:14" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:17">

        <expr_stmt pos:start="21:9" pos:end="23:53"><expr pos:start="21:9" pos:end="23:52"><call pos:start="21:9" pos:end="23:52"><name pos:start="21:9" pos:end="21:17">error_set</name><argument_list pos:start="21:18" pos:end="23:52">(<argument pos:start="21:19" pos:end="21:21"><expr pos:start="21:19" pos:end="21:21"><name pos:start="21:19" pos:end="21:21">err</name></expr></argument>, <argument pos:start="21:24" pos:end="21:46"><expr pos:start="21:24" pos:end="21:46"><name pos:start="21:24" pos:end="21:46">QERR_QGA_COMMAND_FAILED</name></expr></argument>,

                  <argument pos:start="23:19" pos:end="23:51"><expr pos:start="23:19" pos:end="23:51"><literal type="string" pos:start="23:19" pos:end="23:51">"failed to enumerate filesystems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:18">QTAILQ_FOREACH</name><argument_list pos:start="31:19" pos:end="31:40">(<argument pos:start="31:20" pos:end="31:24">mount</argument>, <argument pos:start="31:27" pos:end="31:33">&amp;mounts</argument>, <argument pos:start="31:36" pos:end="31:39">next</argument>)</argument_list></macro> <block pos:start="31:42" pos:end="91:5">{<block_content pos:start="33:9" pos:end="89:18">

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:14">logged</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:22">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:49"><expr pos:start="35:9" pos:end="35:48"><name pos:start="35:9" pos:end="35:10">fd</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:48"><name pos:start="35:14" pos:end="35:22">qemu_open</name><argument_list pos:start="35:23" pos:end="35:48">(<argument pos:start="35:24" pos:end="35:37"><expr pos:start="35:24" pos:end="35:37"><name pos:start="35:24" pos:end="35:37"><name pos:start="35:24" pos:end="35:28">mount</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:37">dirname</name></name></expr></argument>, <argument pos:start="35:40" pos:end="35:47"><expr pos:start="35:40" pos:end="35:47"><name pos:start="35:40" pos:end="35:47">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:21">(<expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:14">fd</name> <operator pos:start="37:16" pos:end="37:17">==</operator> <operator pos:start="37:19" pos:end="37:19">-</operator><literal type="number" pos:start="37:20" pos:end="37:20">1</literal></expr>)</condition> <block pos:start="37:23" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:21">

            <continue pos:start="39:13" pos:end="39:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="43:9" pos:end="73:11">/* we have no way of knowing whether a filesystem was actually unfrozen

         * as a result of a successful call to FITHAW, only that if an error

         * was returned the filesystem was *not* unfrozen by that particular

         * call.

         *

         * since multiple preceeding FIFREEZEs require multiple calls to FITHAW

         * to unfreeze, continuing issuing FITHAW until an error is returned,

         * in which case either the filesystem is in an unfreezable state, or,

         * more likely, it was thawed previously (and remains so afterward).

         *

         * also, since the most recent successful call is the one that did

         * the actual unfreeze, we can use this to provide an accurate count

         * of the number of filesystems unfrozen by guest-fsfreeze-thaw, which

         * may * be useful for determining whether a filesystem was unfrozen

         * during the freeze/thaw phase by a process other than qemu-ga.

         */</comment>

        <do pos:start="75:9" pos:end="87:27">do <block pos:start="75:12" pos:end="87:9">{<block_content pos:start="77:13" pos:end="85:13">

            <expr_stmt pos:start="77:13" pos:end="77:36"><expr pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:35"><name pos:start="77:19" pos:end="77:23">ioctl</name><argument_list pos:start="77:24" pos:end="77:35">(<argument pos:start="77:25" pos:end="77:26"><expr pos:start="77:25" pos:end="77:26"><name pos:start="77:25" pos:end="77:26">fd</name></expr></argument>, <argument pos:start="77:29" pos:end="77:34"><expr pos:start="77:29" pos:end="77:34"><name pos:start="77:29" pos:end="77:34">FITHAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="85:13"><if pos:start="79:13" pos:end="85:13">if <condition pos:start="79:16" pos:end="79:36">(<expr pos:start="79:17" pos:end="79:35"><name pos:start="79:17" pos:end="79:19">ret</name> <operator pos:start="79:21" pos:end="79:22">==</operator> <literal type="number" pos:start="79:24" pos:end="79:24">0</literal> <operator pos:start="79:26" pos:end="79:27">&amp;&amp;</operator> <operator pos:start="79:29" pos:end="79:29">!</operator><name pos:start="79:30" pos:end="79:35">logged</name></expr>)</condition> <block pos:start="79:38" pos:end="85:13">{<block_content pos:start="81:17" pos:end="83:30">

                <expr_stmt pos:start="81:17" pos:end="81:20"><expr pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:17">i</name><operator pos:start="81:18" pos:end="81:19">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:30"><expr pos:start="83:17" pos:end="83:29"><name pos:start="83:17" pos:end="83:22">logged</name> <operator pos:start="83:24" pos:end="83:24">=</operator> <name pos:start="83:26" pos:end="83:29">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="87:17" pos:end="87:26">(<expr pos:start="87:18" pos:end="87:25"><name pos:start="87:18" pos:end="87:20">ret</name> <operator pos:start="87:22" pos:end="87:23">==</operator> <literal type="number" pos:start="87:25" pos:end="87:25">0</literal></expr>)</condition>;</do>

        <expr_stmt pos:start="89:9" pos:end="89:18"><expr pos:start="89:9" pos:end="89:17"><call pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:13">close</name><argument_list pos:start="89:14" pos:end="89:17">(<argument pos:start="89:15" pos:end="89:16"><expr pos:start="89:15" pos:end="89:16"><name pos:start="89:15" pos:end="89:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="95:5" pos:end="95:63"><expr pos:start="95:5" pos:end="95:62"><name pos:start="95:5" pos:end="95:31"><name pos:start="95:5" pos:end="95:24">guest_fsfreeze_state</name><operator pos:start="95:25" pos:end="95:25">.</operator><name pos:start="95:26" pos:end="95:31">status</name></name> <operator pos:start="95:33" pos:end="95:33">=</operator> <name pos:start="95:35" pos:end="95:62">GUEST_FSFREEZE_STATUS_THAWED</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:21"><expr pos:start="97:5" pos:end="97:20"><call pos:start="97:5" pos:end="97:20"><name pos:start="97:5" pos:end="97:18">enable_logging</name><argument_list pos:start="97:19" pos:end="97:20">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:44"><expr pos:start="99:5" pos:end="99:43"><call pos:start="99:5" pos:end="99:43"><name pos:start="99:5" pos:end="99:34">guest_fsfreeze_free_mount_list</name><argument_list pos:start="99:35" pos:end="99:43">(<argument pos:start="99:36" pos:end="99:42"><expr pos:start="99:36" pos:end="99:42"><operator pos:start="99:36" pos:end="99:36">&amp;</operator><name pos:start="99:37" pos:end="99:42">mounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><name pos:start="101:12" pos:end="101:12">i</name></expr>;</return>

</block_content>}</block></function>
</unit>
