<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3997.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">amr_read_packet</name><parameter_list pos:start="1:27" pos:end="1:61">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:55">AVPacket</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:13">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">enc</name> <init pos:start="5:25" pos:end="5:46">= <expr pos:start="5:27" pos:end="5:46"><name pos:start="5:27" pos:end="5:39"><name pos:start="5:27" pos:end="5:27">s</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:36">streams</name><index pos:start="5:37" pos:end="5:39">[<expr pos:start="5:38" pos:end="5:38"><literal type="number" pos:start="5:38" pos:end="5:38">0</literal></expr>]</index></name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:46">codec</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">read</name></decl>, <decl pos:start="7:15" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:18">size</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>, <decl pos:start="7:25" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:27">toc</name></decl>, <decl pos:start="7:30" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:30" pos:end="7:33">mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">pos</name> <init pos:start="9:17" pos:end="9:34">= <expr pos:start="9:19" pos:end="9:34"><call pos:start="9:19" pos:end="9:34"><name pos:start="9:19" pos:end="9:27">avio_tell</name><argument_list pos:start="9:28" pos:end="9:34">(<argument pos:start="9:29" pos:end="9:33"><expr pos:start="9:29" pos:end="9:33"><name pos:start="9:29" pos:end="9:33"><name pos:start="9:29" pos:end="9:29">s</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:33">pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:24">(<expr pos:start="13:9" pos:end="13:23"><call pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:16">url_feof</name><argument_list pos:start="13:17" pos:end="13:23">(<argument pos:start="13:18" pos:end="13:22"><expr pos:start="13:18" pos:end="13:22"><name pos:start="13:18" pos:end="13:22"><name pos:start="13:18" pos:end="13:18">s</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:22">pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:26" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:28">

        <return pos:start="15:9" pos:end="15:28">return <expr pos:start="15:16" pos:end="15:27"><call pos:start="15:16" pos:end="15:27"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:27">(<argument pos:start="15:24" pos:end="15:26"><expr pos:start="15:24" pos:end="15:26"><name pos:start="15:24" pos:end="15:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="21:5" pos:end="21:63">// FIXME this is wrong, this should rather be in a AVParset</comment>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:7">toc</name>  <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:25"><name pos:start="23:12" pos:end="23:18">avio_r8</name><argument_list pos:start="23:19" pos:end="23:25">(<argument pos:start="23:20" pos:end="23:24"><expr pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:20">s</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:24">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:8">mode</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <operator pos:start="25:12" pos:end="25:12">(</operator><name pos:start="25:13" pos:end="25:15">toc</name> <operator pos:start="25:17" pos:end="25:18">&gt;&gt;</operator> <literal type="number" pos:start="25:20" pos:end="25:20">3</literal><operator pos:start="25:21" pos:end="25:21">)</operator> <operator pos:start="25:23" pos:end="25:23">&amp;</operator> <literal type="number" pos:start="25:25" pos:end="25:28">0x0F</literal></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="57:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:44">(<expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:11">enc</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:21">codec_id</name></name> <operator pos:start="29:23" pos:end="29:24">==</operator> <name pos:start="29:26" pos:end="29:43">AV_CODEC_ID_AMR_NB</name></expr>)</condition> <block pos:start="29:46" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:37">

        <decl_stmt pos:start="31:9" pos:end="35:10"><decl pos:start="31:9" pos:end="35:9"><type pos:start="31:9" pos:end="31:28"><specifier pos:start="31:9" pos:end="31:14">static</specifier> <specifier pos:start="31:16" pos:end="31:20">const</specifier> <name pos:start="31:22" pos:end="31:28">uint8_t</name></type> <name pos:start="31:30" pos:end="31:44"><name pos:start="31:30" pos:end="31:40">packed_size</name><index pos:start="31:41" pos:end="31:44">[<expr pos:start="31:42" pos:end="31:43"><literal type="number" pos:start="31:42" pos:end="31:43">16</literal></expr>]</index></name> <init pos:start="31:46" pos:end="35:9">= <expr pos:start="31:48" pos:end="35:9"><block pos:start="31:48" pos:end="35:9">{

            <expr pos:start="33:13" pos:end="33:14"><literal type="number" pos:start="33:13" pos:end="33:14">12</literal></expr>, <expr pos:start="33:17" pos:end="33:18"><literal type="number" pos:start="33:17" pos:end="33:18">13</literal></expr>, <expr pos:start="33:21" pos:end="33:22"><literal type="number" pos:start="33:21" pos:end="33:22">15</literal></expr>, <expr pos:start="33:25" pos:end="33:26"><literal type="number" pos:start="33:25" pos:end="33:26">17</literal></expr>, <expr pos:start="33:29" pos:end="33:30"><literal type="number" pos:start="33:29" pos:end="33:30">19</literal></expr>, <expr pos:start="33:33" pos:end="33:34"><literal type="number" pos:start="33:33" pos:end="33:34">20</literal></expr>, <expr pos:start="33:37" pos:end="33:38"><literal type="number" pos:start="33:37" pos:end="33:38">26</literal></expr>, <expr pos:start="33:41" pos:end="33:42"><literal type="number" pos:start="33:41" pos:end="33:42">31</literal></expr>, <expr pos:start="33:45" pos:end="33:45"><literal type="number" pos:start="33:45" pos:end="33:45">5</literal></expr>, <expr pos:start="33:48" pos:end="33:48"><literal type="number" pos:start="33:48" pos:end="33:48">0</literal></expr>, <expr pos:start="33:51" pos:end="33:51"><literal type="number" pos:start="33:51" pos:end="33:51">0</literal></expr>, <expr pos:start="33:54" pos:end="33:54"><literal type="number" pos:start="33:54" pos:end="33:54">0</literal></expr>, <expr pos:start="33:57" pos:end="33:57"><literal type="number" pos:start="33:57" pos:end="33:57">0</literal></expr>, <expr pos:start="33:60" pos:end="33:60"><literal type="number" pos:start="33:60" pos:end="33:60">0</literal></expr>, <expr pos:start="33:63" pos:end="33:63"><literal type="number" pos:start="33:63" pos:end="33:63">0</literal></expr>, <expr pos:start="33:66" pos:end="33:66"><literal type="number" pos:start="33:66" pos:end="33:66">0</literal></expr>

        }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:37"><expr pos:start="39:9" pos:end="39:36"><name pos:start="39:9" pos:end="39:12">size</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <name pos:start="39:16" pos:end="39:32"><name pos:start="39:16" pos:end="39:26">packed_size</name><index pos:start="39:27" pos:end="39:32">[<expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">mode</name></expr>]</index></name> <operator pos:start="39:34" pos:end="39:34">+</operator> <literal type="number" pos:start="39:36" pos:end="39:36">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="53:5">else if <condition pos:start="41:15" pos:end="41:51">(<expr pos:start="41:16" pos:end="41:50"><name pos:start="41:16" pos:end="41:28"><name pos:start="41:16" pos:end="41:18">enc</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:28">codec_id</name></name> <operator pos:start="41:30" pos:end="41:31">==</operator> <name pos:start="41:33" pos:end="41:50">AV_CODEC_ID_AMR_WB</name></expr>)</condition> <block pos:start="41:53" pos:end="53:5">{<block_content pos:start="43:9" pos:end="51:33">

        <decl_stmt pos:start="43:9" pos:end="47:10"><decl pos:start="43:9" pos:end="47:9"><type pos:start="43:9" pos:end="43:28"><specifier pos:start="43:9" pos:end="43:14">static</specifier> <specifier pos:start="43:16" pos:end="43:20">const</specifier> <name pos:start="43:22" pos:end="43:28">uint8_t</name></type> <name pos:start="43:30" pos:end="43:44"><name pos:start="43:30" pos:end="43:40">packed_size</name><index pos:start="43:41" pos:end="43:44">[<expr pos:start="43:42" pos:end="43:43"><literal type="number" pos:start="43:42" pos:end="43:43">16</literal></expr>]</index></name> <init pos:start="43:46" pos:end="47:9">= <expr pos:start="43:48" pos:end="47:9"><block pos:start="43:48" pos:end="47:9">{

            <expr pos:start="45:13" pos:end="45:14"><literal type="number" pos:start="45:13" pos:end="45:14">18</literal></expr>, <expr pos:start="45:17" pos:end="45:18"><literal type="number" pos:start="45:17" pos:end="45:18">24</literal></expr>, <expr pos:start="45:21" pos:end="45:22"><literal type="number" pos:start="45:21" pos:end="45:22">33</literal></expr>, <expr pos:start="45:25" pos:end="45:26"><literal type="number" pos:start="45:25" pos:end="45:26">37</literal></expr>, <expr pos:start="45:29" pos:end="45:30"><literal type="number" pos:start="45:29" pos:end="45:30">41</literal></expr>, <expr pos:start="45:33" pos:end="45:34"><literal type="number" pos:start="45:33" pos:end="45:34">47</literal></expr>, <expr pos:start="45:37" pos:end="45:38"><literal type="number" pos:start="45:37" pos:end="45:38">51</literal></expr>, <expr pos:start="45:41" pos:end="45:42"><literal type="number" pos:start="45:41" pos:end="45:42">59</literal></expr>, <expr pos:start="45:45" pos:end="45:46"><literal type="number" pos:start="45:45" pos:end="45:46">61</literal></expr>, <expr pos:start="45:49" pos:end="45:49"><literal type="number" pos:start="45:49" pos:end="45:49">6</literal></expr>, <expr pos:start="45:52" pos:end="45:52"><literal type="number" pos:start="45:52" pos:end="45:52">6</literal></expr>, <expr pos:start="45:55" pos:end="45:55"><literal type="number" pos:start="45:55" pos:end="45:55">0</literal></expr>, <expr pos:start="45:58" pos:end="45:58"><literal type="number" pos:start="45:58" pos:end="45:58">0</literal></expr>, <expr pos:start="45:61" pos:end="45:61"><literal type="number" pos:start="45:61" pos:end="45:61">0</literal></expr>, <expr pos:start="45:64" pos:end="45:64"><literal type="number" pos:start="45:64" pos:end="45:64">1</literal></expr>, <expr pos:start="45:67" pos:end="45:67"><literal type="number" pos:start="45:67" pos:end="45:67">1</literal></expr>

        }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:12">size</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:32"><name pos:start="51:16" pos:end="51:26">packed_size</name><index pos:start="51:27" pos:end="51:32">[<expr pos:start="51:28" pos:end="51:31"><name pos:start="51:28" pos:end="51:31">mode</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="57:5">else <block pos:start="53:12" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:22">

        <expr_stmt pos:start="55:9" pos:end="55:22"><expr pos:start="55:9" pos:end="55:21"><call pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:18">av_assert0</name><argument_list pos:start="55:19" pos:end="55:21">(<argument pos:start="55:20" pos:end="55:20"><expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="61:5" pos:end="63:28"><if pos:start="61:5" pos:end="63:28">if <condition pos:start="61:8" pos:end="61:42">(<expr pos:start="61:9" pos:end="61:41"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:13">size</name> <operator pos:start="61:15" pos:end="61:16">||</operator> <call pos:start="61:18" pos:end="61:41"><name pos:start="61:18" pos:end="61:30">av_new_packet</name><argument_list pos:start="61:31" pos:end="61:41">(<argument pos:start="61:32" pos:end="61:34"><expr pos:start="61:32" pos:end="61:34"><name pos:start="61:32" pos:end="61:34">pkt</name></expr></argument>, <argument pos:start="61:37" pos:end="61:40"><expr pos:start="61:37" pos:end="61:40"><name pos:start="61:37" pos:end="61:40">size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:28"><block_content pos:start="63:9" pos:end="63:28">

        <return pos:start="63:9" pos:end="63:28">return <expr pos:start="63:16" pos:end="63:27"><call pos:start="63:16" pos:end="63:27"><name pos:start="63:16" pos:end="63:22">AVERROR</name><argument_list pos:start="63:23" pos:end="63:27">(<argument pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><name pos:start="63:24" pos:end="63:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:52">/* Both AMR formats have 50 frames per second */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:47"><expr pos:start="69:5" pos:end="69:46"><name pos:start="69:5" pos:end="69:17"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:14">streams</name><index pos:start="69:15" pos:end="69:17">[<expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>]</index></name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:34"><name pos:start="69:20" pos:end="69:24">codec</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:34">bit_rate</name></name> <operator pos:start="69:36" pos:end="69:36">=</operator> <name pos:start="69:38" pos:end="69:41">size</name><operator pos:start="69:42" pos:end="69:42">*</operator><literal type="number" pos:start="69:43" pos:end="69:43">8</literal><operator pos:start="69:44" pos:end="69:44">*</operator><literal type="number" pos:start="69:45" pos:end="69:46">50</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:7">pkt</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:21">stream_index</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <literal type="number" pos:start="73:25" pos:end="73:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:28"><expr pos:start="75:5" pos:end="75:27"><name pos:start="75:5" pos:end="75:12"><name pos:start="75:5" pos:end="75:7">pkt</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:12">pos</name></name>          <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:27">pos</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:28"><expr pos:start="77:5" pos:end="77:27"><name pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:7">pkt</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:13">data</name><index pos:start="77:14" pos:end="77:16">[<expr pos:start="77:15" pos:end="77:15"><literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr>]</index></name>      <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:27">toc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:72"><expr pos:start="79:5" pos:end="79:71"><name pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:7">pkt</name><operator pos:start="79:8" pos:end="79:9">-&gt;</operator><name pos:start="79:10" pos:end="79:17">duration</name></name>     <operator pos:start="79:23" pos:end="79:23">=</operator> <ternary pos:start="79:25" pos:end="79:71"><condition pos:start="79:25" pos:end="79:61"><expr pos:start="79:25" pos:end="79:59"><name pos:start="79:25" pos:end="79:37"><name pos:start="79:25" pos:end="79:27">enc</name><operator pos:start="79:28" pos:end="79:29">-&gt;</operator><name pos:start="79:30" pos:end="79:37">codec_id</name></name> <operator pos:start="79:39" pos:end="79:40">==</operator> <name pos:start="79:42" pos:end="79:59">AV_CODEC_ID_AMR_NB</name></expr> ?</condition><then pos:start="79:63" pos:end="79:65"> <expr pos:start="79:63" pos:end="79:65"><literal type="number" pos:start="79:63" pos:end="79:65">160</literal></expr> </then><else pos:start="79:67" pos:end="79:71">: <expr pos:start="79:69" pos:end="79:71"><literal type="number" pos:start="79:69" pos:end="79:71">320</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:66"><expr pos:start="81:5" pos:end="81:65"><name pos:start="81:5" pos:end="81:8">read</name>              <operator pos:start="81:23" pos:end="81:23">=</operator> <call pos:start="81:25" pos:end="81:65"><name pos:start="81:25" pos:end="81:33">avio_read</name><argument_list pos:start="81:34" pos:end="81:65">(<argument pos:start="81:35" pos:end="81:39"><expr pos:start="81:35" pos:end="81:39"><name pos:start="81:35" pos:end="81:39"><name pos:start="81:35" pos:end="81:35">s</name><operator pos:start="81:36" pos:end="81:37">-&gt;</operator><name pos:start="81:38" pos:end="81:39">pb</name></name></expr></argument>, <argument pos:start="81:42" pos:end="81:54"><expr pos:start="81:42" pos:end="81:54"><name pos:start="81:42" pos:end="81:50"><name pos:start="81:42" pos:end="81:44">pkt</name><operator pos:start="81:45" pos:end="81:46">-&gt;</operator><name pos:start="81:47" pos:end="81:50">data</name></name> <operator pos:start="81:52" pos:end="81:52">+</operator> <literal type="number" pos:start="81:54" pos:end="81:54">1</literal></expr></argument>, <argument pos:start="81:57" pos:end="81:64"><expr pos:start="81:57" pos:end="81:64"><name pos:start="81:57" pos:end="81:60">size</name> <operator pos:start="81:62" pos:end="81:62">-</operator> <literal type="number" pos:start="81:64" pos:end="81:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:25">(<expr pos:start="85:9" pos:end="85:24"><name pos:start="85:9" pos:end="85:12">read</name> <operator pos:start="85:14" pos:end="85:15">!=</operator> <name pos:start="85:17" pos:end="85:20">size</name> <operator pos:start="85:22" pos:end="85:22">-</operator> <literal type="number" pos:start="85:24" pos:end="85:24">1</literal></expr>)</condition> <block pos:start="85:27" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:28">

        <expr_stmt pos:start="87:9" pos:end="87:28"><expr pos:start="87:9" pos:end="87:27"><call pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:22">av_free_packet</name><argument_list pos:start="87:23" pos:end="87:27">(<argument pos:start="87:24" pos:end="87:26"><expr pos:start="87:24" pos:end="87:26"><name pos:start="87:24" pos:end="87:26">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:28">return <expr pos:start="89:16" pos:end="89:27"><call pos:start="89:16" pos:end="89:27"><name pos:start="89:16" pos:end="89:22">AVERROR</name><argument_list pos:start="89:23" pos:end="89:27">(<argument pos:start="89:24" pos:end="89:26"><expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
