<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/234.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">CPUState</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:18">cpu_copy</name><parameter_list pos:start="1:19" pos:end="1:33">(<parameter pos:start="1:20" pos:end="1:32"><decl pos:start="1:20" pos:end="1:32"><type pos:start="1:20" pos:end="1:29"><name pos:start="1:20" pos:end="1:27">CPUState</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:19">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:21">new_env</name> <init pos:start="5:23" pos:end="5:52">= <expr pos:start="5:25" pos:end="5:52"><call pos:start="5:25" pos:end="5:52"><name pos:start="5:25" pos:end="5:32">cpu_init</name><argument_list pos:start="5:33" pos:end="5:52">(<argument pos:start="5:34" pos:end="5:51"><expr pos:start="5:34" pos:end="5:51"><name pos:start="5:34" pos:end="5:51"><name pos:start="5:34" pos:end="5:36">env</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:51">cpu_model_str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:22">next_cpu</name> <init pos:start="7:24" pos:end="7:42">= <expr pos:start="7:26" pos:end="7:42"><name pos:start="7:26" pos:end="7:42"><name pos:start="7:26" pos:end="7:32">new_env</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:42">next_cpu</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">cpu_index</name> <init pos:start="9:19" pos:end="9:38">= <expr pos:start="9:21" pos:end="9:38"><name pos:start="9:21" pos:end="9:38"><name pos:start="9:21" pos:end="9:27">new_env</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:38">cpu_index</name></name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="11:1" pos:end="11:27">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:27"><call pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:27">(<argument pos:start="11:13" pos:end="11:26"><expr pos:start="11:13" pos:end="11:26"><name pos:start="11:13" pos:end="11:26">TARGET_HAS_ICE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">CPUBreakpoint</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="18:0"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">CPUWatchpoint</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">wp</name></decl>;</decl_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><call pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:10">memcpy</name><argument_list pos:start="21:11" pos:end="21:42">(<argument pos:start="21:12" pos:end="21:18"><expr pos:start="21:12" pos:end="21:18"><name pos:start="21:12" pos:end="21:18">new_env</name></expr></argument>, <argument pos:start="21:21" pos:end="21:23"><expr pos:start="21:21" pos:end="21:23"><name pos:start="21:21" pos:end="21:23">env</name></expr></argument>, <argument pos:start="21:26" pos:end="21:41"><expr pos:start="21:26" pos:end="21:41"><sizeof pos:start="21:26" pos:end="21:41">sizeof<argument_list pos:start="21:32" pos:end="21:41">(<argument pos:start="21:33" pos:end="21:40"><expr pos:start="21:33" pos:end="21:40"><name pos:start="21:33" pos:end="21:40">CPUState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:38">/* Preserve chaining and index. */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:11">new_env</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:21">next_cpu</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:32">next_cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:11">new_env</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:22">cpu_index</name></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:34">cpu_index</name></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="37:66">/* Clone all break/watchpoints.

       Note: Once we support ptrace with hw-debug register access, make sure

       BP_CPU break/watchpoints are handled correctly on clone. */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><call pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:14">TAILQ_INIT</name><argument_list pos:start="39:15" pos:end="39:33">(<argument pos:start="39:16" pos:end="39:32"><expr pos:start="39:16" pos:end="39:32"><operator pos:start="39:16" pos:end="39:16">&amp;</operator><name pos:start="39:17" pos:end="39:32"><name pos:start="39:17" pos:end="39:19">env</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:32">breakpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="44:0"><expr pos:start="41:5" pos:end="41:33"><call pos:start="41:5" pos:end="41:33"><name pos:start="41:5" pos:end="41:14">TAILQ_INIT</name><argument_list pos:start="41:15" pos:end="41:33">(<argument pos:start="41:16" pos:end="41:32"><expr pos:start="41:16" pos:end="41:32"><operator pos:start="41:16" pos:end="41:16">&amp;</operator><name pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:19">env</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:32">watchpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="43:1" pos:end="43:27">#<cpp:directive pos:start="43:2" pos:end="43:3">if</cpp:directive> <expr pos:start="43:5" pos:end="43:27"><call pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:11">defined</name><argument_list pos:start="43:12" pos:end="43:27">(<argument pos:start="43:13" pos:end="43:26"><expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:26">TARGET_HAS_ICE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <macro pos:start="45:5" pos:end="45:47"><name pos:start="45:5" pos:end="45:17">TAILQ_FOREACH</name><argument_list pos:start="45:18" pos:end="45:47">(<argument pos:start="45:19" pos:end="45:20">bp</argument>, <argument pos:start="45:23" pos:end="45:39">&amp;env-&gt;breakpoints</argument>, <argument pos:start="45:42" pos:end="45:46">entry</argument>)</argument_list></macro> <block pos:start="45:49" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:64">

        <expr_stmt pos:start="47:9" pos:end="47:64"><expr pos:start="47:9" pos:end="47:63"><call pos:start="47:9" pos:end="47:63"><name pos:start="47:9" pos:end="47:29">cpu_breakpoint_insert</name><argument_list pos:start="47:30" pos:end="47:63">(<argument pos:start="47:31" pos:end="47:37"><expr pos:start="47:31" pos:end="47:37"><name pos:start="47:31" pos:end="47:37">new_env</name></expr></argument>, <argument pos:start="47:40" pos:end="47:45"><expr pos:start="47:40" pos:end="47:45"><name pos:start="47:40" pos:end="47:45"><name pos:start="47:40" pos:end="47:41">bp</name><operator pos:start="47:42" pos:end="47:43">-&gt;</operator><name pos:start="47:44" pos:end="47:45">pc</name></name></expr></argument>, <argument pos:start="47:48" pos:end="47:56"><expr pos:start="47:48" pos:end="47:56"><name pos:start="47:48" pos:end="47:56"><name pos:start="47:48" pos:end="47:49">bp</name><operator pos:start="47:50" pos:end="47:51">-&gt;</operator><name pos:start="47:52" pos:end="47:56">flags</name></name></expr></argument>, <argument pos:start="47:59" pos:end="47:62"><expr pos:start="47:59" pos:end="47:62"><name pos:start="47:59" pos:end="47:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <macro pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:17">TAILQ_FOREACH</name><argument_list pos:start="51:18" pos:end="51:47">(<argument pos:start="51:19" pos:end="51:20">wp</argument>, <argument pos:start="51:23" pos:end="51:39">&amp;env-&gt;watchpoints</argument>, <argument pos:start="51:42" pos:end="51:46">entry</argument>)</argument_list></macro> <block pos:start="51:49" pos:end="60:0">{<block_content pos:start="53:9" pos:end="55:47">

        <expr_stmt pos:start="53:9" pos:end="55:47"><expr pos:start="53:9" pos:end="55:46"><call pos:start="53:9" pos:end="55:46"><name pos:start="53:9" pos:end="53:29">cpu_watchpoint_insert</name><argument_list pos:start="53:30" pos:end="55:46">(<argument pos:start="53:31" pos:end="53:37"><expr pos:start="53:31" pos:end="53:37"><name pos:start="53:31" pos:end="53:37">new_env</name></expr></argument>, <argument pos:start="53:40" pos:end="53:48"><expr pos:start="53:40" pos:end="53:48"><name pos:start="53:40" pos:end="53:48"><name pos:start="53:40" pos:end="53:41">wp</name><operator pos:start="53:42" pos:end="53:43">-&gt;</operator><name pos:start="53:44" pos:end="53:48">vaddr</name></name></expr></argument>, <argument pos:start="53:51" pos:end="53:69"><expr pos:start="53:51" pos:end="53:69"><operator pos:start="53:51" pos:end="53:51">(</operator><operator pos:start="53:52" pos:end="53:52">~</operator><name pos:start="53:53" pos:end="53:64"><name pos:start="53:53" pos:end="53:54">wp</name><operator pos:start="53:55" pos:end="53:56">-&gt;</operator><name pos:start="53:57" pos:end="53:64">len_mask</name></name><operator pos:start="53:65" pos:end="53:65">)</operator> <operator pos:start="53:67" pos:end="53:67">+</operator> <literal type="number" pos:start="53:69" pos:end="53:69">1</literal></expr></argument>,

                              <argument pos:start="55:31" pos:end="55:39"><expr pos:start="55:31" pos:end="55:39"><name pos:start="55:31" pos:end="55:39"><name pos:start="55:31" pos:end="55:32">wp</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:39">flags</name></name></expr></argument>, <argument pos:start="55:42" pos:end="55:45"><expr pos:start="55:42" pos:end="55:45"><name pos:start="55:42" pos:end="55:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>



    <return pos:start="63:5" pos:end="63:19">return <expr pos:start="63:12" pos:end="63:18"><name pos:start="63:12" pos:end="63:18">new_env</name></expr>;</return>

</block_content>}</block></function>
</unit>
