<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4550.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:33">virtio_net_receive</name><parameter_list pos:start="1:34" pos:end="1:87">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:49">VLANClientState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">vc</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:73"><decl pos:start="1:56" pos:end="1:73"><type pos:start="1:56" pos:end="1:73"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:68">uint8_t</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">buf</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:86"><decl pos:start="1:76" pos:end="1:86"><type pos:start="1:76" pos:end="1:86"><name pos:start="1:76" pos:end="1:81">size_t</name></type> <name pos:start="1:83" pos:end="1:86">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:16">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">VirtIONet</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">n</name> <init pos:start="5:18" pos:end="5:29">= <expr pos:start="5:20" pos:end="5:29"><name pos:start="5:20" pos:end="5:29"><name pos:start="5:20" pos:end="5:21">vc</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:29">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:37"><name pos:start="7:5" pos:end="7:35"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:35">virtio_net_hdr_mrg_rxbuf</name></name> <modifier pos:start="7:37" pos:end="7:37">*</modifier></type><name pos:start="7:38" pos:end="7:41">mhdr</name> <init pos:start="7:43" pos:end="7:48">= <expr pos:start="7:45" pos:end="7:48"><name pos:start="7:45" pos:end="7:48">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:18">hdr_len</name></decl>, <decl pos:start="9:21" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:21" pos:end="9:26">offset</name></decl>, <decl pos:start="9:29" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:29" pos:end="9:29">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:44">(<expr pos:start="13:9" pos:end="13:43"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:43"><name pos:start="13:10" pos:end="13:34">do_virtio_net_can_receive</name><argument_list pos:start="13:35" pos:end="13:43">(<argument pos:start="13:36" pos:end="13:36"><expr pos:start="13:36" pos:end="13:36"><name pos:start="13:36" pos:end="13:36">n</name></expr></argument>, <argument pos:start="13:39" pos:end="13:42"><expr pos:start="13:39" pos:end="13:42"><name pos:start="13:39" pos:end="13:42">size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="21:20"><if pos:start="19:5" pos:end="21:20">if <condition pos:start="19:8" pos:end="19:38">(<expr pos:start="19:9" pos:end="19:37"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:37"><name pos:start="19:10" pos:end="19:23">receive_filter</name><argument_list pos:start="19:24" pos:end="19:37">(<argument pos:start="19:25" pos:end="19:25"><expr pos:start="19:25" pos:end="19:25"><name pos:start="19:25" pos:end="19:25">n</name></expr></argument>, <argument pos:start="19:28" pos:end="19:30"><expr pos:start="19:28" pos:end="19:30"><name pos:start="19:28" pos:end="19:30">buf</name></expr></argument>, <argument pos:start="19:33" pos:end="19:36"><expr pos:start="19:33" pos:end="19:36"><name pos:start="19:33" pos:end="19:36">size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:20"><block_content pos:start="21:9" pos:end="21:20">

        <return pos:start="21:9" pos:end="21:20">return <expr pos:start="21:16" pos:end="21:19"><name pos:start="21:16" pos:end="21:19">size</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:61">/* hdr_len refers to the header we supply to the guest */</comment>

    <expr_stmt pos:start="27:5" pos:end="29:80"><expr pos:start="27:5" pos:end="29:79"><name pos:start="27:5" pos:end="27:11">hdr_len</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <ternary pos:start="27:15" pos:end="29:79"><condition pos:start="27:15" pos:end="27:36"><expr pos:start="27:15" pos:end="27:34"><name pos:start="27:15" pos:end="27:34"><name pos:start="27:15" pos:end="27:15">n</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:34">mergeable_rx_bufs</name></name></expr> ?</condition><then pos:start="29:9" pos:end="29:47">

        <expr pos:start="29:9" pos:end="29:47"><sizeof pos:start="29:9" pos:end="29:47">sizeof<argument_list pos:start="29:15" pos:end="29:47">(<argument pos:start="29:16" pos:end="29:46"><expr pos:start="29:16" pos:end="29:46">struct <name pos:start="29:23" pos:end="29:46">virtio_net_hdr_mrg_rxbuf</name></expr></argument>)</argument_list></sizeof></expr> </then><else pos:start="29:49" pos:end="29:79">: <expr pos:start="29:51" pos:end="29:79"><sizeof pos:start="29:51" pos:end="29:79">sizeof<argument_list pos:start="29:57" pos:end="29:79">(<argument pos:start="29:58" pos:end="29:78"><expr pos:start="29:58" pos:end="29:78">struct <name pos:start="29:65" pos:end="29:78">virtio_net_hdr</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:10">offset</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:14">i</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>;</expr_stmt>



    <while pos:start="37:5" pos:end="127:5">while <condition pos:start="37:11" pos:end="37:25">(<expr pos:start="37:12" pos:end="37:24"><name pos:start="37:12" pos:end="37:17">offset</name> <operator pos:start="37:19" pos:end="37:19">&lt;</operator> <name pos:start="37:21" pos:end="37:24">size</name></expr>)</condition> <block pos:start="37:27" pos:end="127:5">{<block_content pos:start="39:9" pos:end="125:22">

        <decl_stmt pos:start="39:9" pos:end="39:30"><decl pos:start="39:9" pos:end="39:29"><type pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:24">VirtQueueElement</name></type> <name pos:start="39:26" pos:end="39:29">elem</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:23"><decl pos:start="41:9" pos:end="41:15"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:15">len</name></decl>, <decl pos:start="41:18" pos:end="41:22"><type ref="prev" pos:start="41:9" pos:end="41:11"/><name pos:start="41:18" pos:end="41:22">total</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:44"><decl pos:start="43:9" pos:end="43:43"><type pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:14">struct</name> <name pos:start="43:16" pos:end="43:20">iovec</name></name></type> <name pos:start="43:22" pos:end="43:43"><name pos:start="43:22" pos:end="43:23">sg</name><index pos:start="43:24" pos:end="43:43">[<expr pos:start="43:25" pos:end="43:42"><name pos:start="43:25" pos:end="43:42">VIRTQUEUE_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:24"><expr pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:11">len</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:19">total</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <literal type="number" pos:start="47:23" pos:end="47:23">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="51:9" pos:end="63:9"><if pos:start="51:9" pos:end="63:9">if <condition pos:start="51:12" pos:end="53:48">(<expr pos:start="51:13" pos:end="53:47"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:14">i</name> <operator pos:start="51:16" pos:end="51:17">!=</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal> <operator pos:start="51:21" pos:end="51:22">&amp;&amp;</operator> <operator pos:start="51:24" pos:end="51:24">!</operator><name pos:start="51:25" pos:end="51:44"><name pos:start="51:25" pos:end="51:25">n</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:44">mergeable_rx_bufs</name></name><operator pos:start="51:45" pos:end="51:45">)</operator> <operator pos:start="51:47" pos:end="51:48">||</operator>

            <call pos:start="53:13" pos:end="53:42"><name pos:start="53:13" pos:end="53:25">virtqueue_pop</name><argument_list pos:start="53:26" pos:end="53:42">(<argument pos:start="53:27" pos:end="53:34"><expr pos:start="53:27" pos:end="53:34"><name pos:start="53:27" pos:end="53:34"><name pos:start="53:27" pos:end="53:27">n</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:34">rx_vq</name></name></expr></argument>, <argument pos:start="53:37" pos:end="53:41"><expr pos:start="53:37" pos:end="53:41"><operator pos:start="53:37" pos:end="53:37">&amp;</operator><name pos:start="53:38" pos:end="53:41">elem</name></expr></argument>)</argument_list></call> <operator pos:start="53:44" pos:end="53:45">==</operator> <literal type="number" pos:start="53:47" pos:end="53:47">0</literal></expr>)</condition> <block pos:start="53:50" pos:end="63:9">{<block_content pos:start="55:13" pos:end="61:20">

            <if_stmt pos:start="55:13" pos:end="57:26"><if pos:start="55:13" pos:end="57:26">if <condition pos:start="55:16" pos:end="55:23">(<expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:20">==</operator> <literal type="number" pos:start="55:22" pos:end="55:22">0</literal></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:26"><block_content pos:start="57:17" pos:end="57:26">

                <return pos:start="57:17" pos:end="57:26">return <expr pos:start="57:24" pos:end="57:25"><operator pos:start="57:24" pos:end="57:24">-</operator><literal type="number" pos:start="57:25" pos:end="57:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:62"><expr pos:start="59:13" pos:end="59:61"><call pos:start="59:13" pos:end="59:61"><name pos:start="59:13" pos:end="59:19">fprintf</name><argument_list pos:start="59:20" pos:end="59:61">(<argument pos:start="59:21" pos:end="59:26"><expr pos:start="59:21" pos:end="59:26"><name pos:start="59:21" pos:end="59:26">stderr</name></expr></argument>, <argument pos:start="59:29" pos:end="59:60"><expr pos:start="59:29" pos:end="59:60"><literal type="string" pos:start="59:29" pos:end="59:60">"virtio-net truncating packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:20"><expr pos:start="61:13" pos:end="61:19"><call pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:16">exit</name><argument_list pos:start="61:17" pos:end="61:19">(<argument pos:start="61:18" pos:end="61:18"><expr pos:start="61:18" pos:end="61:18"><literal type="number" pos:start="61:18" pos:end="61:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:28">(<expr pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:16">elem</name><operator pos:start="67:17" pos:end="67:17">.</operator><name pos:start="67:18" pos:end="67:23">in_num</name></name> <operator pos:start="67:25" pos:end="67:25">&lt;</operator> <literal type="number" pos:start="67:27" pos:end="67:27">1</literal></expr>)</condition> <block pos:start="67:30" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:20">

            <expr_stmt pos:start="69:13" pos:end="69:81"><expr pos:start="69:13" pos:end="69:80"><call pos:start="69:13" pos:end="69:80"><name pos:start="69:13" pos:end="69:19">fprintf</name><argument_list pos:start="69:20" pos:end="69:80">(<argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">stderr</name></expr></argument>, <argument pos:start="69:29" pos:end="69:79"><expr pos:start="69:29" pos:end="69:79"><literal type="string" pos:start="69:29" pos:end="69:79">"virtio-net receive queue contains no in buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:20"><expr pos:start="71:13" pos:end="71:19"><call pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:16">exit</name><argument_list pos:start="71:17" pos:end="71:19">(<argument pos:start="71:18" pos:end="71:18"><expr pos:start="71:18" pos:end="71:18"><literal type="number" pos:start="71:18" pos:end="71:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:70">(<expr pos:start="77:13" pos:end="77:69"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:33"><name pos:start="77:14" pos:end="77:14">n</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:33">mergeable_rx_bufs</name></name> <operator pos:start="77:35" pos:end="77:36">&amp;&amp;</operator> <name pos:start="77:38" pos:end="77:50"><name pos:start="77:38" pos:end="77:41">elem</name><operator pos:start="77:42" pos:end="77:42">.</operator><name pos:start="77:43" pos:end="77:47">in_sg</name><index pos:start="77:48" pos:end="77:50">[<expr pos:start="77:49" pos:end="77:49"><literal type="number" pos:start="77:49" pos:end="77:49">0</literal></expr>]</index></name><operator pos:start="77:51" pos:end="77:51">.</operator><name pos:start="77:52" pos:end="77:58">iov_len</name> <operator pos:start="77:60" pos:end="77:61">!=</operator> <name pos:start="77:63" pos:end="77:69">hdr_len</name></expr>)</condition> <block pos:start="77:72" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:20">

            <expr_stmt pos:start="79:13" pos:end="79:72"><expr pos:start="79:13" pos:end="79:71"><call pos:start="79:13" pos:end="79:71"><name pos:start="79:13" pos:end="79:19">fprintf</name><argument_list pos:start="79:20" pos:end="79:71">(<argument pos:start="79:21" pos:end="79:26"><expr pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:26">stderr</name></expr></argument>, <argument pos:start="79:29" pos:end="79:70"><expr pos:start="79:29" pos:end="79:70"><literal type="string" pos:start="79:29" pos:end="79:70">"virtio-net header not in first element\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:20"><expr pos:start="81:13" pos:end="81:19"><call pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:16">exit</name><argument_list pos:start="81:17" pos:end="81:19">(<argument pos:start="81:18" pos:end="81:18"><expr pos:start="81:18" pos:end="81:18"><literal type="number" pos:start="81:18" pos:end="81:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:65"><expr pos:start="87:9" pos:end="87:64"><call pos:start="87:9" pos:end="87:64"><name pos:start="87:9" pos:end="87:14">memcpy</name><argument_list pos:start="87:15" pos:end="87:64">(<argument pos:start="87:16" pos:end="87:18"><expr pos:start="87:16" pos:end="87:18"><operator pos:start="87:16" pos:end="87:16">&amp;</operator><name pos:start="87:17" pos:end="87:18">sg</name></expr></argument>, <argument pos:start="87:21" pos:end="87:34"><expr pos:start="87:21" pos:end="87:34"><operator pos:start="87:21" pos:end="87:21">&amp;</operator><name pos:start="87:22" pos:end="87:34"><name pos:start="87:22" pos:end="87:25">elem</name><operator pos:start="87:26" pos:end="87:26">.</operator><name pos:start="87:27" pos:end="87:31">in_sg</name><index pos:start="87:32" pos:end="87:34">[<expr pos:start="87:33" pos:end="87:33"><literal type="number" pos:start="87:33" pos:end="87:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="87:37" pos:end="87:63"><expr pos:start="87:37" pos:end="87:63"><sizeof pos:start="87:37" pos:end="87:49">sizeof<argument_list pos:start="87:43" pos:end="87:49">(<argument pos:start="87:44" pos:end="87:48"><expr pos:start="87:44" pos:end="87:48"><name pos:start="87:44" pos:end="87:48"><name pos:start="87:44" pos:end="87:45">sg</name><index pos:start="87:46" pos:end="87:48">[<expr pos:start="87:47" pos:end="87:47"><literal type="number" pos:start="87:47" pos:end="87:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator pos:start="87:51" pos:end="87:51">*</operator> <name pos:start="87:53" pos:end="87:63"><name pos:start="87:53" pos:end="87:56">elem</name><operator pos:start="87:57" pos:end="87:57">.</operator><name pos:start="87:58" pos:end="87:63">in_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="105:9"><if pos:start="91:9" pos:end="105:9">if <condition pos:start="91:12" pos:end="91:19">(<expr pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:13">i</name> <operator pos:start="91:15" pos:end="91:16">==</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>)</condition> <block pos:start="91:21" pos:end="105:9">{<block_content pos:start="93:13" pos:end="103:29">

            <if_stmt pos:start="93:13" pos:end="95:73"><if pos:start="93:13" pos:end="95:73">if <condition pos:start="93:16" pos:end="93:37">(<expr pos:start="93:17" pos:end="93:36"><name pos:start="93:17" pos:end="93:36"><name pos:start="93:17" pos:end="93:17">n</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:36">mergeable_rx_bufs</name></name></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:73"><block_content pos:start="95:17" pos:end="95:73">

                <expr_stmt pos:start="95:17" pos:end="95:73"><expr pos:start="95:17" pos:end="95:72"><name pos:start="95:17" pos:end="95:20">mhdr</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <operator pos:start="95:24" pos:end="95:24">(</operator>struct <name pos:start="95:32" pos:end="95:55">virtio_net_hdr_mrg_rxbuf</name> <operator pos:start="95:57" pos:end="95:57">*</operator><operator pos:start="95:58" pos:end="95:58">)</operator><name pos:start="95:59" pos:end="95:63"><name pos:start="95:59" pos:end="95:60">sg</name><index pos:start="95:61" pos:end="95:63">[<expr pos:start="95:62" pos:end="95:62"><literal type="number" pos:start="95:62" pos:end="95:62">0</literal></expr>]</index></name><operator pos:start="95:64" pos:end="95:64">.</operator><name pos:start="95:65" pos:end="95:72">iov_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="99:13" pos:end="101:75"><expr pos:start="99:13" pos:end="101:74"><name pos:start="99:13" pos:end="99:18">offset</name> <operator pos:start="99:20" pos:end="99:21">+=</operator> <call pos:start="99:23" pos:end="101:74"><name pos:start="99:23" pos:end="99:36">receive_header</name><argument_list pos:start="99:37" pos:end="101:74">(<argument pos:start="99:38" pos:end="99:38"><expr pos:start="99:38" pos:end="99:38"><name pos:start="99:38" pos:end="99:38">n</name></expr></argument>, <argument pos:start="99:41" pos:end="99:42"><expr pos:start="99:41" pos:end="99:42"><name pos:start="99:41" pos:end="99:42">sg</name></expr></argument>, <argument pos:start="99:45" pos:end="99:55"><expr pos:start="99:45" pos:end="99:55"><name pos:start="99:45" pos:end="99:55"><name pos:start="99:45" pos:end="99:48">elem</name><operator pos:start="99:49" pos:end="99:49">.</operator><name pos:start="99:50" pos:end="99:55">in_num</name></name></expr></argument>,

                                     <argument pos:start="101:38" pos:end="101:49"><expr pos:start="101:38" pos:end="101:49"><name pos:start="101:38" pos:end="101:40">buf</name> <operator pos:start="101:42" pos:end="101:42">+</operator> <name pos:start="101:44" pos:end="101:49">offset</name></expr></argument>, <argument pos:start="101:52" pos:end="101:64"><expr pos:start="101:52" pos:end="101:64"><name pos:start="101:52" pos:end="101:55">size</name> <operator pos:start="101:57" pos:end="101:57">-</operator> <name pos:start="101:59" pos:end="101:64">offset</name></expr></argument>, <argument pos:start="101:67" pos:end="101:73"><expr pos:start="101:67" pos:end="101:73"><name pos:start="101:67" pos:end="101:73">hdr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:29"><expr pos:start="103:13" pos:end="103:28"><name pos:start="103:13" pos:end="103:17">total</name> <operator pos:start="103:19" pos:end="103:20">+=</operator> <name pos:start="103:22" pos:end="103:28">hdr_len</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="109:9" pos:end="109:34">/* copy in packet.  ugh */</comment>

        <expr_stmt pos:start="111:9" pos:end="113:52"><expr pos:start="111:9" pos:end="113:51"><name pos:start="111:9" pos:end="111:11">len</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="113:51"><name pos:start="111:15" pos:end="111:22">iov_fill</name><argument_list pos:start="111:23" pos:end="113:51">(<argument pos:start="111:24" pos:end="111:25"><expr pos:start="111:24" pos:end="111:25"><name pos:start="111:24" pos:end="111:25">sg</name></expr></argument>, <argument pos:start="111:28" pos:end="111:38"><expr pos:start="111:28" pos:end="111:38"><name pos:start="111:28" pos:end="111:38"><name pos:start="111:28" pos:end="111:31">elem</name><operator pos:start="111:32" pos:end="111:32">.</operator><name pos:start="111:33" pos:end="111:38">in_num</name></name></expr></argument>,

                       <argument pos:start="113:24" pos:end="113:35"><expr pos:start="113:24" pos:end="113:35"><name pos:start="113:24" pos:end="113:26">buf</name> <operator pos:start="113:28" pos:end="113:28">+</operator> <name pos:start="113:30" pos:end="113:35">offset</name></expr></argument>, <argument pos:start="113:38" pos:end="113:50"><expr pos:start="113:38" pos:end="113:50"><name pos:start="113:38" pos:end="113:41">size</name> <operator pos:start="113:43" pos:end="113:43">-</operator> <name pos:start="113:45" pos:end="113:50">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:21"><expr pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:13">total</name> <operator pos:start="115:15" pos:end="115:16">+=</operator> <name pos:start="115:18" pos:end="115:20">len</name></expr>;</expr_stmt>



        <comment type="block" pos:start="119:9" pos:end="119:31">/* signal other side */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:52"><expr pos:start="121:9" pos:end="121:51"><call pos:start="121:9" pos:end="121:51"><name pos:start="121:9" pos:end="121:22">virtqueue_fill</name><argument_list pos:start="121:23" pos:end="121:51">(<argument pos:start="121:24" pos:end="121:31"><expr pos:start="121:24" pos:end="121:31"><name pos:start="121:24" pos:end="121:31"><name pos:start="121:24" pos:end="121:24">n</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:31">rx_vq</name></name></expr></argument>, <argument pos:start="121:34" pos:end="121:38"><expr pos:start="121:34" pos:end="121:38"><operator pos:start="121:34" pos:end="121:34">&amp;</operator><name pos:start="121:35" pos:end="121:38">elem</name></expr></argument>, <argument pos:start="121:41" pos:end="121:45"><expr pos:start="121:41" pos:end="121:45"><name pos:start="121:41" pos:end="121:45">total</name></expr></argument>, <argument pos:start="121:48" pos:end="121:50"><expr pos:start="121:48" pos:end="121:50"><name pos:start="121:48" pos:end="121:48">i</name><operator pos:start="121:49" pos:end="121:50">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:22"><expr pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:14">offset</name> <operator pos:start="125:16" pos:end="125:17">+=</operator> <name pos:start="125:19" pos:end="125:21">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="131:5" pos:end="133:30"><if pos:start="131:5" pos:end="133:30">if <condition pos:start="131:8" pos:end="131:13">(<expr pos:start="131:9" pos:end="131:12"><name pos:start="131:9" pos:end="131:12">mhdr</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:30"><block_content pos:start="133:9" pos:end="133:30">

        <expr_stmt pos:start="133:9" pos:end="133:30"><expr pos:start="133:9" pos:end="133:29"><name pos:start="133:9" pos:end="133:25"><name pos:start="133:9" pos:end="133:12">mhdr</name><operator pos:start="133:13" pos:end="133:14">-&gt;</operator><name pos:start="133:15" pos:end="133:25">num_buffers</name></name> <operator pos:start="133:27" pos:end="133:27">=</operator> <name pos:start="133:29" pos:end="133:29">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:33"><expr pos:start="137:5" pos:end="137:32"><call pos:start="137:5" pos:end="137:32"><name pos:start="137:5" pos:end="137:19">virtqueue_flush</name><argument_list pos:start="137:20" pos:end="137:32">(<argument pos:start="137:21" pos:end="137:28"><expr pos:start="137:21" pos:end="137:28"><name pos:start="137:21" pos:end="137:28"><name pos:start="137:21" pos:end="137:21">n</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:28">rx_vq</name></name></expr></argument>, <argument pos:start="137:31" pos:end="137:31"><expr pos:start="137:31" pos:end="137:31"><name pos:start="137:31" pos:end="137:31">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:38"><expr pos:start="139:5" pos:end="139:37"><call pos:start="139:5" pos:end="139:37"><name pos:start="139:5" pos:end="139:17">virtio_notify</name><argument_list pos:start="139:18" pos:end="139:37">(<argument pos:start="139:19" pos:end="139:26"><expr pos:start="139:19" pos:end="139:26"><operator pos:start="139:19" pos:end="139:19">&amp;</operator><name pos:start="139:20" pos:end="139:26"><name pos:start="139:20" pos:end="139:20">n</name><operator pos:start="139:21" pos:end="139:22">-&gt;</operator><name pos:start="139:23" pos:end="139:26">vdev</name></name></expr></argument>, <argument pos:start="139:29" pos:end="139:36"><expr pos:start="139:29" pos:end="139:36"><name pos:start="139:29" pos:end="139:36"><name pos:start="139:29" pos:end="139:29">n</name><operator pos:start="139:30" pos:end="139:31">-&gt;</operator><name pos:start="139:32" pos:end="139:36">rx_vq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="143:5" pos:end="143:16">return <expr pos:start="143:12" pos:end="143:15"><name pos:start="143:12" pos:end="143:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
