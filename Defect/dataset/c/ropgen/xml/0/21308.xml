<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21308.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">vdi_co_write</name><parameter_list pos:start="1:24" pos:end="3:63">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:26"><decl pos:start="3:9" pos:end="3:26"><type pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:15">int64_t</name></type> <name pos:start="3:17" pos:end="3:26">sector_num</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:41">uint8_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:46">buf</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:62">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="203:1">{<block_content pos:start="7:5" pos:end="201:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVVdiState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:23">bmap_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">block_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:28">sector_in_block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:22">n_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:23">bmap_first</name> <init pos:start="17:25" pos:end="17:41">= <expr pos:start="17:27" pos:end="17:41"><name pos:start="17:27" pos:end="17:41">VDI_UNALLOCATED</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:41"><decl pos:start="19:5" pos:end="19:40"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:22">bmap_last</name> <init pos:start="19:24" pos:end="19:40">= <expr pos:start="19:26" pos:end="19:40"><name pos:start="19:26" pos:end="19:40">VDI_UNALLOCATED</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:18">block</name> <init pos:start="21:20" pos:end="21:25">= <expr pos:start="21:22" pos:end="21:25"><name pos:start="21:22" pos:end="21:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:17"><expr pos:start="27:5" pos:end="27:16"><call pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:10">logout</name><argument_list pos:start="27:11" pos:end="27:16">(<argument pos:start="27:12" pos:end="27:15"><expr pos:start="27:12" pos:end="27:15"><literal type="string" pos:start="27:12" pos:end="27:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="31:1" pos:end="31:8"><name pos:start="31:1" pos:end="31:7">restart</name>:</label>

    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:15">block_index</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:28">sector_num</name> <operator pos:start="33:30" pos:end="33:30">/</operator> <name pos:start="33:32" pos:end="33:47"><name pos:start="33:32" pos:end="33:32">s</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:47">block_sectors</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:52"><expr pos:start="35:5" pos:end="35:51"><name pos:start="35:5" pos:end="35:19">sector_in_block</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:32">sector_num</name> <operator pos:start="35:34" pos:end="35:34">%</operator> <name pos:start="35:36" pos:end="35:51"><name pos:start="35:36" pos:end="35:36">s</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:51">block_sectors</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:51"><expr pos:start="37:5" pos:end="37:50"><name pos:start="37:5" pos:end="37:13">n_sectors</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <name pos:start="37:17" pos:end="37:32"><name pos:start="37:17" pos:end="37:17">s</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:32">block_sectors</name></name> <operator pos:start="37:34" pos:end="37:34">-</operator> <name pos:start="37:36" pos:end="37:50">sector_in_block</name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:17">n_sectors</name> <operator pos:start="39:19" pos:end="39:19">&gt;</operator> <name pos:start="39:21" pos:end="39:30">nb_sectors</name></expr>)</condition> <block pos:start="39:33" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:31">

        <expr_stmt pos:start="41:9" pos:end="41:31"><expr pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:17">n_sectors</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:30">nb_sectors</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="49:34"><expr pos:start="47:5" pos:end="49:33"><call pos:start="47:5" pos:end="49:33"><name pos:start="47:5" pos:end="47:10">logout</name><argument_list pos:start="47:11" pos:end="49:33">(<argument pos:start="47:12" pos:end="47:67"><expr pos:start="47:12" pos:end="47:67"><literal type="string" pos:start="47:12" pos:end="47:55">"will write %u sectors starting at sector %"</literal> <name pos:start="47:57" pos:end="47:62">PRIu64</name> <literal type="string" pos:start="47:64" pos:end="47:67">"\n"</literal></expr></argument>,

           <argument pos:start="49:12" pos:end="49:20"><expr pos:start="49:12" pos:end="49:20"><name pos:start="49:12" pos:end="49:20">n_sectors</name></expr></argument>, <argument pos:start="49:23" pos:end="49:32"><expr pos:start="49:23" pos:end="49:32"><name pos:start="49:23" pos:end="49:32">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:34">/* prepare next AIO request */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:51"><expr pos:start="55:5" pos:end="55:50"><name pos:start="55:5" pos:end="55:14">bmap_entry</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:50"><name pos:start="55:18" pos:end="55:28">le32_to_cpu</name><argument_list pos:start="55:29" pos:end="55:50">(<argument pos:start="55:30" pos:end="55:49"><expr pos:start="55:30" pos:end="55:49"><name pos:start="55:30" pos:end="55:49"><name pos:start="55:30" pos:end="55:30">s</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:36">bmap</name><index pos:start="55:37" pos:end="55:49">[<expr pos:start="55:38" pos:end="55:48"><name pos:start="55:38" pos:end="55:48">block_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="107:5"><if pos:start="57:5" pos:end="97:5">if <condition pos:start="57:8" pos:end="57:38">(<expr pos:start="57:9" pos:end="57:37"><operator pos:start="57:9" pos:end="57:9">!</operator><call pos:start="57:10" pos:end="57:37"><name pos:start="57:10" pos:end="57:25">VDI_IS_ALLOCATED</name><argument_list pos:start="57:26" pos:end="57:37">(<argument pos:start="57:27" pos:end="57:36"><expr pos:start="57:27" pos:end="57:36"><name pos:start="57:27" pos:end="57:36">bmap_entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:40" pos:end="97:5">{<block_content pos:start="61:9" pos:end="95:68">

        <comment type="block" pos:start="59:9" pos:end="59:49">/* Allocate new block and write to it. */</comment>

        <decl_stmt pos:start="61:9" pos:end="61:24"><decl pos:start="61:9" pos:end="61:23"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">uint64_t</name></type> <name pos:start="61:18" pos:end="61:23">offset</name></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:48"><expr pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:18">bmap_entry</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:47"><name pos:start="63:22" pos:end="63:22">s</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:30">header</name><operator pos:start="63:31" pos:end="63:31">.</operator><name pos:start="63:32" pos:end="63:47">blocks_allocated</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:55"><expr pos:start="65:9" pos:end="65:54"><name pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:15">bmap</name><index pos:start="65:16" pos:end="65:28">[<expr pos:start="65:17" pos:end="65:27"><name pos:start="65:17" pos:end="65:27">block_index</name></expr>]</index></name> <operator pos:start="65:30" pos:end="65:30">=</operator> <call pos:start="65:32" pos:end="65:54"><name pos:start="65:32" pos:end="65:42">cpu_to_le32</name><argument_list pos:start="65:43" pos:end="65:54">(<argument pos:start="65:44" pos:end="65:53"><expr pos:start="65:44" pos:end="65:53"><name pos:start="65:44" pos:end="65:53">bmap_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:37"><expr pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:17">header</name><operator pos:start="67:18" pos:end="67:18">.</operator><name pos:start="67:19" pos:end="67:34">blocks_allocated</name></name><operator pos:start="67:35" pos:end="67:36">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="71:57"><expr pos:start="69:9" pos:end="71:56"><name pos:start="69:9" pos:end="69:14">offset</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <name pos:start="69:18" pos:end="69:38"><name pos:start="69:18" pos:end="69:18">s</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:26">header</name><operator pos:start="69:27" pos:end="69:27">.</operator><name pos:start="69:28" pos:end="69:38">offset_data</name></name> <operator pos:start="69:40" pos:end="69:40">/</operator> <name pos:start="69:42" pos:end="69:52">SECTOR_SIZE</name> <operator pos:start="69:54" pos:end="69:54">+</operator>

                 <operator pos:start="71:18" pos:end="71:18">(</operator><name pos:start="71:19" pos:end="71:26">uint64_t</name><operator pos:start="71:27" pos:end="71:27">)</operator><name pos:start="71:28" pos:end="71:37">bmap_entry</name> <operator pos:start="71:39" pos:end="71:39">*</operator> <name pos:start="71:41" pos:end="71:56"><name pos:start="71:41" pos:end="71:41">s</name><operator pos:start="71:42" pos:end="71:43">-&gt;</operator><name pos:start="71:44" pos:end="71:56">block_sectors</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:26">(<expr pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:17">block</name> <operator pos:start="73:19" pos:end="73:20">==</operator> <name pos:start="73:22" pos:end="73:25">NULL</name></expr>)</condition> <block pos:start="73:28" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:37">

            <expr_stmt pos:start="75:13" pos:end="75:44"><expr pos:start="75:13" pos:end="75:43"><name pos:start="75:13" pos:end="75:17">block</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:43"><name pos:start="75:21" pos:end="75:28">g_malloc</name><argument_list pos:start="75:29" pos:end="75:43">(<argument pos:start="75:30" pos:end="75:42"><expr pos:start="75:30" pos:end="75:42"><name pos:start="75:30" pos:end="75:42"><name pos:start="75:30" pos:end="75:30">s</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:42">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:37"><expr pos:start="77:13" pos:end="77:36"><name pos:start="77:13" pos:end="77:22">bmap_first</name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:36">block_index</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:32"><expr pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:17">bmap_last</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:31">block_index</name></expr>;</expr_stmt>

        <comment type="block" pos:start="83:9" pos:end="83:73">/* Copy data to be written to new block and zero unused parts. */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:56"><expr pos:start="85:9" pos:end="85:55"><call pos:start="85:9" pos:end="85:55"><name pos:start="85:9" pos:end="85:14">memset</name><argument_list pos:start="85:15" pos:end="85:55">(<argument pos:start="85:16" pos:end="85:20"><expr pos:start="85:16" pos:end="85:20"><name pos:start="85:16" pos:end="85:20">block</name></expr></argument>, <argument pos:start="85:23" pos:end="85:23"><expr pos:start="85:23" pos:end="85:23"><literal type="number" pos:start="85:23" pos:end="85:23">0</literal></expr></argument>, <argument pos:start="85:26" pos:end="85:54"><expr pos:start="85:26" pos:end="85:54"><name pos:start="85:26" pos:end="85:40">sector_in_block</name> <operator pos:start="85:42" pos:end="85:42">*</operator> <name pos:start="85:44" pos:end="85:54">SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="89:45"><expr pos:start="87:9" pos:end="89:44"><call pos:start="87:9" pos:end="89:44"><name pos:start="87:9" pos:end="87:14">memcpy</name><argument_list pos:start="87:15" pos:end="89:44">(<argument pos:start="87:16" pos:end="87:52"><expr pos:start="87:16" pos:end="87:52"><name pos:start="87:16" pos:end="87:20">block</name> <operator pos:start="87:22" pos:end="87:22">+</operator> <name pos:start="87:24" pos:end="87:38">sector_in_block</name> <operator pos:start="87:40" pos:end="87:40">*</operator> <name pos:start="87:42" pos:end="87:52">SECTOR_SIZE</name></expr></argument>,

               <argument pos:start="89:16" pos:end="89:18"><expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">buf</name></expr></argument>, <argument pos:start="89:21" pos:end="89:43"><expr pos:start="89:21" pos:end="89:43"><name pos:start="89:21" pos:end="89:29">n_sectors</name> <operator pos:start="89:31" pos:end="89:31">*</operator> <name pos:start="89:33" pos:end="89:43">SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="93:79"><expr pos:start="91:9" pos:end="93:78"><call pos:start="91:9" pos:end="93:78"><name pos:start="91:9" pos:end="91:14">memset</name><argument_list pos:start="91:15" pos:end="93:78">(<argument pos:start="91:16" pos:end="91:66"><expr pos:start="91:16" pos:end="91:66"><name pos:start="91:16" pos:end="91:20">block</name> <operator pos:start="91:22" pos:end="91:22">+</operator> <operator pos:start="91:24" pos:end="91:24">(</operator><name pos:start="91:25" pos:end="91:39">sector_in_block</name> <operator pos:start="91:41" pos:end="91:41">+</operator> <name pos:start="91:43" pos:end="91:51">n_sectors</name><operator pos:start="91:52" pos:end="91:52">)</operator> <operator pos:start="91:54" pos:end="91:54">*</operator> <name pos:start="91:56" pos:end="91:66">SECTOR_SIZE</name></expr></argument>, <argument pos:start="91:69" pos:end="91:69"><expr pos:start="91:69" pos:end="91:69"><literal type="number" pos:start="91:69" pos:end="91:69">0</literal></expr></argument>,

               <argument pos:start="93:16" pos:end="93:77"><expr pos:start="93:16" pos:end="93:77"><operator pos:start="93:16" pos:end="93:16">(</operator><name pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:32">block_sectors</name></name> <operator pos:start="93:34" pos:end="93:34">-</operator> <name pos:start="93:36" pos:end="93:44">n_sectors</name> <operator pos:start="93:46" pos:end="93:46">-</operator> <name pos:start="93:48" pos:end="93:62">sector_in_block</name><operator pos:start="93:63" pos:end="93:63">)</operator> <operator pos:start="93:65" pos:end="93:65">*</operator> <name pos:start="93:67" pos:end="93:77">SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:68"><expr pos:start="95:9" pos:end="95:67"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:67"><name pos:start="95:15" pos:end="95:24">bdrv_write</name><argument_list pos:start="95:25" pos:end="95:67">(<argument pos:start="95:26" pos:end="95:33"><expr pos:start="95:26" pos:end="95:33"><name pos:start="95:26" pos:end="95:33"><name pos:start="95:26" pos:end="95:27">bs</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:33">file</name></name></expr></argument>, <argument pos:start="95:36" pos:end="95:41"><expr pos:start="95:36" pos:end="95:41"><name pos:start="95:36" pos:end="95:41">offset</name></expr></argument>, <argument pos:start="95:44" pos:end="95:48"><expr pos:start="95:44" pos:end="95:48"><name pos:start="95:44" pos:end="95:48">block</name></expr></argument>, <argument pos:start="95:51" pos:end="95:66"><expr pos:start="95:51" pos:end="95:66"><name pos:start="95:51" pos:end="95:66"><name pos:start="95:51" pos:end="95:51">s</name><operator pos:start="95:52" pos:end="95:53">-&gt;</operator><name pos:start="95:54" pos:end="95:66">block_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="107:5">else <block pos:start="97:12" pos:end="107:5">{<block_content pos:start="99:9" pos:end="105:59">

        <decl_stmt pos:start="99:9" pos:end="103:42"><decl pos:start="99:9" pos:end="103:41"><type pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:16">uint64_t</name></type> <name pos:start="99:18" pos:end="99:23">offset</name> <init pos:start="99:25" pos:end="103:41">= <expr pos:start="99:27" pos:end="103:41"><name pos:start="99:27" pos:end="99:47"><name pos:start="99:27" pos:end="99:27">s</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:35">header</name><operator pos:start="99:36" pos:end="99:36">.</operator><name pos:start="99:37" pos:end="99:47">offset_data</name></name> <operator pos:start="99:49" pos:end="99:49">/</operator> <name pos:start="99:51" pos:end="99:61">SECTOR_SIZE</name> <operator pos:start="99:63" pos:end="99:63">+</operator>

                          <operator pos:start="101:27" pos:end="101:27">(</operator><name pos:start="101:28" pos:end="101:35">uint64_t</name><operator pos:start="101:36" pos:end="101:36">)</operator><name pos:start="101:37" pos:end="101:46">bmap_entry</name> <operator pos:start="101:48" pos:end="101:48">*</operator> <name pos:start="101:50" pos:end="101:65"><name pos:start="101:50" pos:end="101:50">s</name><operator pos:start="101:51" pos:end="101:52">-&gt;</operator><name pos:start="101:53" pos:end="101:65">block_sectors</name></name> <operator pos:start="101:67" pos:end="101:67">+</operator>

                          <name pos:start="103:27" pos:end="103:41">sector_in_block</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:59"><expr pos:start="105:9" pos:end="105:58"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:58"><name pos:start="105:15" pos:end="105:24">bdrv_write</name><argument_list pos:start="105:25" pos:end="105:58">(<argument pos:start="105:26" pos:end="105:33"><expr pos:start="105:26" pos:end="105:33"><name pos:start="105:26" pos:end="105:33"><name pos:start="105:26" pos:end="105:27">bs</name><operator pos:start="105:28" pos:end="105:29">-&gt;</operator><name pos:start="105:30" pos:end="105:33">file</name></name></expr></argument>, <argument pos:start="105:36" pos:end="105:41"><expr pos:start="105:36" pos:end="105:41"><name pos:start="105:36" pos:end="105:41">offset</name></expr></argument>, <argument pos:start="105:44" pos:end="105:46"><expr pos:start="105:44" pos:end="105:46"><name pos:start="105:44" pos:end="105:46">buf</name></expr></argument>, <argument pos:start="105:49" pos:end="105:57"><expr pos:start="105:49" pos:end="105:57"><name pos:start="105:49" pos:end="105:57">n_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:28"><expr pos:start="111:5" pos:end="111:27"><name pos:start="111:5" pos:end="111:14">nb_sectors</name> <operator pos:start="111:16" pos:end="111:17">-=</operator> <name pos:start="111:19" pos:end="111:27">n_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:28"><expr pos:start="113:5" pos:end="113:27"><name pos:start="113:5" pos:end="113:14">sector_num</name> <operator pos:start="113:16" pos:end="113:17">+=</operator> <name pos:start="113:19" pos:end="113:27">n_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:35"><expr pos:start="115:5" pos:end="115:34"><name pos:start="115:5" pos:end="115:7">buf</name> <operator pos:start="115:9" pos:end="115:10">+=</operator> <name pos:start="115:12" pos:end="115:20">n_sectors</name> <operator pos:start="115:22" pos:end="115:22">*</operator> <name pos:start="115:24" pos:end="115:34">SECTOR_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:46"><expr pos:start="119:5" pos:end="119:45"><call pos:start="119:5" pos:end="119:45"><name pos:start="119:5" pos:end="119:10">logout</name><argument_list pos:start="119:11" pos:end="119:45">(<argument pos:start="119:12" pos:end="119:33"><expr pos:start="119:12" pos:end="119:33"><literal type="string" pos:start="119:12" pos:end="119:33">"%u sectors written\n"</literal></expr></argument>, <argument pos:start="119:36" pos:end="119:44"><expr pos:start="119:36" pos:end="119:44"><name pos:start="119:36" pos:end="119:44">n_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:35">(<expr pos:start="121:9" pos:end="121:34"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:14">&gt;=</operator> <literal type="number" pos:start="121:16" pos:end="121:16">0</literal> <operator pos:start="121:18" pos:end="121:19">&amp;&amp;</operator> <name pos:start="121:21" pos:end="121:30">nb_sectors</name> <operator pos:start="121:32" pos:end="121:32">&gt;</operator> <literal type="number" pos:start="121:34" pos:end="121:34">0</literal></expr>)</condition> <block pos:start="121:37" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:21">

        <goto pos:start="123:9" pos:end="123:21">goto <name pos:start="123:14" pos:end="123:20">restart</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:36"><expr pos:start="129:5" pos:end="129:35"><call pos:start="129:5" pos:end="129:35"><name pos:start="129:5" pos:end="129:10">logout</name><argument_list pos:start="129:11" pos:end="129:35">(<argument pos:start="129:12" pos:end="129:34"><expr pos:start="129:12" pos:end="129:34"><literal type="string" pos:start="129:12" pos:end="129:34">"finished data write\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="135:5"><if pos:start="131:5" pos:end="135:5">if <condition pos:start="131:8" pos:end="131:16">(<expr pos:start="131:9" pos:end="131:15"><name pos:start="131:9" pos:end="131:11">ret</name> <operator pos:start="131:13" pos:end="131:13">&lt;</operator> <literal type="number" pos:start="131:15" pos:end="131:15">0</literal></expr>)</condition> <block pos:start="131:18" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:19">

        <return pos:start="133:9" pos:end="133:19">return <expr pos:start="133:16" pos:end="133:18"><name pos:start="133:16" pos:end="133:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="197:5"><if pos:start="139:5" pos:end="197:5">if <condition pos:start="139:8" pos:end="139:14">(<expr pos:start="139:9" pos:end="139:13"><name pos:start="139:9" pos:end="139:13">block</name></expr>)</condition> <block pos:start="139:16" pos:end="197:5">{<block_content pos:start="143:9" pos:end="195:60">

        <comment type="block" pos:start="141:9" pos:end="141:52">/* One or more new blocks were allocated. */</comment>

        <decl_stmt pos:start="143:9" pos:end="143:48"><decl pos:start="143:9" pos:end="143:47"><type pos:start="143:9" pos:end="143:19"><name pos:start="143:9" pos:end="143:17">VdiHeader</name> <modifier pos:start="143:19" pos:end="143:19">*</modifier></type><name pos:start="143:20" pos:end="143:25">header</name> <init pos:start="143:27" pos:end="143:47">= <expr pos:start="143:29" pos:end="143:47"><operator pos:start="143:29" pos:end="143:29">(</operator><name pos:start="143:30" pos:end="143:38">VdiHeader</name> <operator pos:start="143:40" pos:end="143:40">*</operator><operator pos:start="143:41" pos:end="143:41">)</operator> <name pos:start="143:43" pos:end="143:47">block</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="145:22"><decl pos:start="145:9" pos:end="145:21"><type pos:start="145:9" pos:end="145:17"><name pos:start="145:9" pos:end="145:15">uint8_t</name> <modifier pos:start="145:17" pos:end="145:17">*</modifier></type><name pos:start="145:18" pos:end="145:21">base</name></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:24"><decl pos:start="147:9" pos:end="147:23"><type pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:16">uint64_t</name></type> <name pos:start="147:18" pos:end="147:23">offset</name></decl>;</decl_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:48"><expr pos:start="151:9" pos:end="151:47"><call pos:start="151:9" pos:end="151:47"><name pos:start="151:9" pos:end="151:14">logout</name><argument_list pos:start="151:15" pos:end="151:47">(<argument pos:start="151:16" pos:end="151:46"><expr pos:start="151:16" pos:end="151:46"><literal type="string" pos:start="151:16" pos:end="151:46">"now writing modified header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:45"><expr pos:start="153:9" pos:end="153:44"><call pos:start="153:9" pos:end="153:44"><name pos:start="153:9" pos:end="153:14">assert</name><argument_list pos:start="153:15" pos:end="153:44">(<argument pos:start="153:16" pos:end="153:43"><expr pos:start="153:16" pos:end="153:43"><call pos:start="153:16" pos:end="153:43"><name pos:start="153:16" pos:end="153:31">VDI_IS_ALLOCATED</name><argument_list pos:start="153:32" pos:end="153:43">(<argument pos:start="153:33" pos:end="153:42"><expr pos:start="153:33" pos:end="153:42"><name pos:start="153:33" pos:end="153:42">bmap_first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:28"><expr pos:start="155:9" pos:end="155:27"><operator pos:start="155:9" pos:end="155:9">*</operator><name pos:start="155:10" pos:end="155:15">header</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <name pos:start="155:19" pos:end="155:27"><name pos:start="155:19" pos:end="155:19">s</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:27">header</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:33"><expr pos:start="157:9" pos:end="157:32"><call pos:start="157:9" pos:end="157:32"><name pos:start="157:9" pos:end="157:24">vdi_header_to_le</name><argument_list pos:start="157:25" pos:end="157:32">(<argument pos:start="157:26" pos:end="157:31"><expr pos:start="157:26" pos:end="157:31"><name pos:start="157:26" pos:end="157:31">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:48"><expr pos:start="159:9" pos:end="159:47"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <call pos:start="159:15" pos:end="159:47"><name pos:start="159:15" pos:end="159:24">bdrv_write</name><argument_list pos:start="159:25" pos:end="159:47">(<argument pos:start="159:26" pos:end="159:33"><expr pos:start="159:26" pos:end="159:33"><name pos:start="159:26" pos:end="159:33"><name pos:start="159:26" pos:end="159:27">bs</name><operator pos:start="159:28" pos:end="159:29">-&gt;</operator><name pos:start="159:30" pos:end="159:33">file</name></name></expr></argument>, <argument pos:start="159:36" pos:end="159:36"><expr pos:start="159:36" pos:end="159:36"><literal type="number" pos:start="159:36" pos:end="159:36">0</literal></expr></argument>, <argument pos:start="159:39" pos:end="159:43"><expr pos:start="159:39" pos:end="159:43"><name pos:start="159:39" pos:end="159:43">block</name></expr></argument>, <argument pos:start="159:46" pos:end="159:46"><expr pos:start="159:46" pos:end="159:46"><literal type="number" pos:start="159:46" pos:end="159:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:22"><expr pos:start="161:9" pos:end="161:21"><call pos:start="161:9" pos:end="161:21"><name pos:start="161:9" pos:end="161:14">g_free</name><argument_list pos:start="161:15" pos:end="161:21">(<argument pos:start="161:16" pos:end="161:20"><expr pos:start="161:16" pos:end="161:20"><name pos:start="161:16" pos:end="161:20">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:21"><expr pos:start="163:9" pos:end="163:20"><name pos:start="163:9" pos:end="163:13">block</name> <operator pos:start="163:15" pos:end="163:15">=</operator> <name pos:start="163:17" pos:end="163:20">NULL</name></expr>;</expr_stmt>



        <if_stmt pos:start="167:9" pos:end="171:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:20">(<expr pos:start="167:13" pos:end="167:19"><name pos:start="167:13" pos:end="167:15">ret</name> <operator pos:start="167:17" pos:end="167:17">&lt;</operator> <literal type="number" pos:start="167:19" pos:end="167:19">0</literal></expr>)</condition> <block pos:start="167:22" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:23">

            <return pos:start="169:13" pos:end="169:23">return <expr pos:start="169:20" pos:end="169:22"><name pos:start="169:20" pos:end="169:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="175:9" pos:end="177:38"><expr pos:start="175:9" pos:end="177:37"><call pos:start="175:9" pos:end="177:37"><name pos:start="175:9" pos:end="175:14">logout</name><argument_list pos:start="175:15" pos:end="177:37">(<argument pos:start="175:16" pos:end="175:63"><expr pos:start="175:16" pos:end="175:63"><literal type="string" pos:start="175:16" pos:end="175:63">"now writing modified block map entry %u...%u\n"</literal></expr></argument>,

               <argument pos:start="177:16" pos:end="177:25"><expr pos:start="177:16" pos:end="177:25"><name pos:start="177:16" pos:end="177:25">bmap_first</name></expr></argument>, <argument pos:start="177:28" pos:end="177:36"><expr pos:start="177:28" pos:end="177:36"><name pos:start="177:28" pos:end="177:36">bmap_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="179:9" pos:end="179:52">/* Write modified sectors from block map. */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:55"><expr pos:start="181:9" pos:end="181:54"><name pos:start="181:9" pos:end="181:18">bmap_first</name> <operator pos:start="181:20" pos:end="181:21">/=</operator> <operator pos:start="181:23" pos:end="181:23">(</operator><name pos:start="181:24" pos:end="181:34">SECTOR_SIZE</name> <operator pos:start="181:36" pos:end="181:36">/</operator> <sizeof pos:start="181:38" pos:end="181:53">sizeof<argument_list pos:start="181:44" pos:end="181:53">(<argument pos:start="181:45" pos:end="181:52"><expr pos:start="181:45" pos:end="181:52"><name pos:start="181:45" pos:end="181:52">uint32_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="181:54" pos:end="181:54">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:54"><expr pos:start="183:9" pos:end="183:53"><name pos:start="183:9" pos:end="183:17">bmap_last</name> <operator pos:start="183:19" pos:end="183:20">/=</operator> <operator pos:start="183:22" pos:end="183:22">(</operator><name pos:start="183:23" pos:end="183:33">SECTOR_SIZE</name> <operator pos:start="183:35" pos:end="183:35">/</operator> <sizeof pos:start="183:37" pos:end="183:52">sizeof<argument_list pos:start="183:43" pos:end="183:52">(<argument pos:start="183:44" pos:end="183:51"><expr pos:start="183:44" pos:end="183:51"><name pos:start="183:44" pos:end="183:51">uint32_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="183:53" pos:end="183:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:47"><expr pos:start="185:9" pos:end="185:46"><name pos:start="185:9" pos:end="185:17">n_sectors</name> <operator pos:start="185:19" pos:end="185:19">=</operator> <name pos:start="185:21" pos:end="185:29">bmap_last</name> <operator pos:start="185:31" pos:end="185:31">-</operator> <name pos:start="185:33" pos:end="185:42">bmap_first</name> <operator pos:start="185:44" pos:end="185:44">+</operator> <literal type="number" pos:start="185:46" pos:end="185:46">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:45"><expr pos:start="187:9" pos:end="187:44"><name pos:start="187:9" pos:end="187:14">offset</name> <operator pos:start="187:16" pos:end="187:16">=</operator> <name pos:start="187:18" pos:end="187:31"><name pos:start="187:18" pos:end="187:18">s</name><operator pos:start="187:19" pos:end="187:20">-&gt;</operator><name pos:start="187:21" pos:end="187:31">bmap_sector</name></name> <operator pos:start="187:33" pos:end="187:33">+</operator> <name pos:start="187:35" pos:end="187:44">bmap_first</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:67"><expr pos:start="189:9" pos:end="189:66"><name pos:start="189:9" pos:end="189:12">base</name> <operator pos:start="189:14" pos:end="189:14">=</operator> <operator pos:start="189:16" pos:end="189:16">(</operator><operator pos:start="189:17" pos:end="189:17">(</operator><name pos:start="189:18" pos:end="189:24">uint8_t</name> <operator pos:start="189:26" pos:end="189:26">*</operator><operator pos:start="189:27" pos:end="189:27">)</operator><operator pos:start="189:28" pos:end="189:28">&amp;</operator><name pos:start="189:29" pos:end="189:38"><name pos:start="189:29" pos:end="189:29">s</name><operator pos:start="189:30" pos:end="189:31">-&gt;</operator><name pos:start="189:32" pos:end="189:35">bmap</name><index pos:start="189:36" pos:end="189:38">[<expr pos:start="189:37" pos:end="189:37"><literal type="number" pos:start="189:37" pos:end="189:37">0</literal></expr>]</index></name><operator pos:start="189:39" pos:end="189:39">)</operator> <operator pos:start="189:41" pos:end="189:41">+</operator> <name pos:start="189:43" pos:end="189:52">bmap_first</name> <operator pos:start="189:54" pos:end="189:54">*</operator> <name pos:start="189:56" pos:end="189:66">SECTOR_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="193:38"><expr pos:start="191:9" pos:end="193:37"><call pos:start="191:9" pos:end="193:37"><name pos:start="191:9" pos:end="191:14">logout</name><argument_list pos:start="191:15" pos:end="193:37">(<argument pos:start="191:16" pos:end="191:73"><expr pos:start="191:16" pos:end="191:73"><literal type="string" pos:start="191:16" pos:end="191:73">"will write %u block map sectors starting from entry %u\n"</literal></expr></argument>,

               <argument pos:start="193:16" pos:end="193:24"><expr pos:start="193:16" pos:end="193:24"><name pos:start="193:16" pos:end="193:24">n_sectors</name></expr></argument>, <argument pos:start="193:27" pos:end="193:36"><expr pos:start="193:27" pos:end="193:36"><name pos:start="193:27" pos:end="193:36">bmap_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:60"><expr pos:start="195:9" pos:end="195:59"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <call pos:start="195:15" pos:end="195:59"><name pos:start="195:15" pos:end="195:24">bdrv_write</name><argument_list pos:start="195:25" pos:end="195:59">(<argument pos:start="195:26" pos:end="195:33"><expr pos:start="195:26" pos:end="195:33"><name pos:start="195:26" pos:end="195:33"><name pos:start="195:26" pos:end="195:27">bs</name><operator pos:start="195:28" pos:end="195:29">-&gt;</operator><name pos:start="195:30" pos:end="195:33">file</name></name></expr></argument>, <argument pos:start="195:36" pos:end="195:41"><expr pos:start="195:36" pos:end="195:41"><name pos:start="195:36" pos:end="195:41">offset</name></expr></argument>, <argument pos:start="195:44" pos:end="195:47"><expr pos:start="195:44" pos:end="195:47"><name pos:start="195:44" pos:end="195:47">base</name></expr></argument>, <argument pos:start="195:50" pos:end="195:58"><expr pos:start="195:50" pos:end="195:58"><name pos:start="195:50" pos:end="195:58">n_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="201:5" pos:end="201:15">return <expr pos:start="201:12" pos:end="201:14"><name pos:start="201:12" pos:end="201:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
