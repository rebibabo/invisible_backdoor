<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8754.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">malta_fpga_write</name><parameter_list pos:start="1:29" pos:end="3:57">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:66"><decl pos:start="1:44" pos:end="1:66"><type pos:start="1:44" pos:end="1:66"><name pos:start="1:44" pos:end="1:61">target_phys_addr_t</name></type> <name pos:start="1:63" pos:end="1:66">addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:41">val</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:56"><decl pos:start="3:44" pos:end="3:56"><type pos:start="3:44" pos:end="3:56"><name pos:start="3:44" pos:end="3:51">unsigned</name></type> <name pos:start="3:53" pos:end="3:56">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="169:1">{<block_content pos:start="7:5" pos:end="167:5">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MaltaFPGAState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">saddr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:9">saddr</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <operator pos:start="13:13" pos:end="13:13">(</operator><name pos:start="13:14" pos:end="13:17">addr</name> <operator pos:start="13:19" pos:end="13:19">&amp;</operator> <literal type="number" pos:start="13:21" pos:end="13:27">0xfffff</literal><operator pos:start="13:28" pos:end="13:28">)</operator></expr>;</expr_stmt>



    <switch pos:start="17:5" pos:end="167:5">switch <condition pos:start="17:12" pos:end="17:18">(<expr pos:start="17:13" pos:end="17:17"><name pos:start="17:13" pos:end="17:17">saddr</name></expr>)</condition> <block pos:start="17:20" pos:end="167:5">{<block_content pos:start="23:5" pos:end="165:14">



    <comment type="block" pos:start="21:5" pos:end="21:25">/* SWITCH Register */</comment>

    <case pos:start="23:5" pos:end="23:17">case <expr pos:start="23:10" pos:end="23:16"><literal type="number" pos:start="23:10" pos:end="23:16">0x00200</literal></expr>:</case>

        <break pos:start="25:9" pos:end="25:14">break;</break>



    <comment type="block" pos:start="29:5" pos:end="29:24">/* JMPRS Register */</comment>

    <case pos:start="31:5" pos:end="31:17">case <expr pos:start="31:10" pos:end="31:16"><literal type="number" pos:start="31:10" pos:end="31:16">0x00210</literal></expr>:</case>

        <break pos:start="33:9" pos:end="33:14">break;</break>



    <comment type="block" pos:start="37:5" pos:end="37:25">/* LEDBAR Register */</comment>

    <case pos:start="39:5" pos:end="39:17">case <expr pos:start="39:10" pos:end="39:16"><literal type="number" pos:start="39:10" pos:end="39:16">0x00408</literal></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:15">leds</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:21">val</name> <operator pos:start="41:23" pos:end="41:23">&amp;</operator> <literal type="number" pos:start="41:25" pos:end="41:28">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:37"><expr pos:start="43:9" pos:end="43:36"><call pos:start="43:9" pos:end="43:36"><name pos:start="43:9" pos:end="43:33">malta_fpga_update_display</name><argument_list pos:start="43:34" pos:end="43:36">(<argument pos:start="43:35" pos:end="43:35"><expr pos:start="43:35" pos:end="43:35"><name pos:start="43:35" pos:end="43:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>



    <comment type="block" pos:start="49:5" pos:end="49:28">/* ASCIIWORD Register */</comment>

    <case pos:start="51:5" pos:end="51:17">case <expr pos:start="51:10" pos:end="51:16"><literal type="number" pos:start="51:10" pos:end="51:16">0x00410</literal></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:60"><expr pos:start="53:9" pos:end="53:59"><call pos:start="53:9" pos:end="53:59"><name pos:start="53:9" pos:end="53:16">snprintf</name><argument_list pos:start="53:17" pos:end="53:59">(<argument pos:start="53:18" pos:end="53:32"><expr pos:start="53:18" pos:end="53:32"><name pos:start="53:18" pos:end="53:32"><name pos:start="53:18" pos:end="53:18">s</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:32">display_text</name></name></expr></argument>, <argument pos:start="53:35" pos:end="53:35"><expr pos:start="53:35" pos:end="53:35"><literal type="number" pos:start="53:35" pos:end="53:35">9</literal></expr></argument>, <argument pos:start="53:38" pos:end="53:43"><expr pos:start="53:38" pos:end="53:43"><literal type="string" pos:start="53:38" pos:end="53:43">"%08X"</literal></expr></argument>, <argument pos:start="53:46" pos:end="53:58"><expr pos:start="53:46" pos:end="53:58"><operator pos:start="53:46" pos:end="53:46">(</operator><name pos:start="53:47" pos:end="53:54">uint32_t</name><operator pos:start="53:55" pos:end="53:55">)</operator><name pos:start="53:56" pos:end="53:58">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><call pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:33">malta_fpga_update_display</name><argument_list pos:start="55:34" pos:end="55:36">(<argument pos:start="55:35" pos:end="55:35"><expr pos:start="55:35" pos:end="55:35"><name pos:start="55:35" pos:end="55:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>



    <comment type="block" pos:start="61:5" pos:end="61:42">/* ASCIIPOS0 to ASCIIPOS7 Registers */</comment>

    <case pos:start="63:5" pos:end="63:17">case <expr pos:start="63:10" pos:end="63:16"><literal type="number" pos:start="63:10" pos:end="63:16">0x00418</literal></expr>:</case>

    <case pos:start="65:5" pos:end="65:17">case <expr pos:start="65:10" pos:end="65:16"><literal type="number" pos:start="65:10" pos:end="65:16">0x00420</literal></expr>:</case>

    <case pos:start="67:5" pos:end="67:17">case <expr pos:start="67:10" pos:end="67:16"><literal type="number" pos:start="67:10" pos:end="67:16">0x00428</literal></expr>:</case>

    <case pos:start="69:5" pos:end="69:17">case <expr pos:start="69:10" pos:end="69:16"><literal type="number" pos:start="69:10" pos:end="69:16">0x00430</literal></expr>:</case>

    <case pos:start="71:5" pos:end="71:17">case <expr pos:start="71:10" pos:end="71:16"><literal type="number" pos:start="71:10" pos:end="71:16">0x00438</literal></expr>:</case>

    <case pos:start="73:5" pos:end="73:17">case <expr pos:start="73:10" pos:end="73:16"><literal type="number" pos:start="73:10" pos:end="73:16">0x00440</literal></expr>:</case>

    <case pos:start="75:5" pos:end="75:17">case <expr pos:start="75:10" pos:end="75:16"><literal type="number" pos:start="75:10" pos:end="75:16">0x00448</literal></expr>:</case>

    <case pos:start="77:5" pos:end="77:17">case <expr pos:start="77:10" pos:end="77:16"><literal type="number" pos:start="77:10" pos:end="77:16">0x00450</literal></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:61"><expr pos:start="79:9" pos:end="79:60"><name pos:start="79:9" pos:end="79:47"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:23">display_text</name><index pos:start="79:24" pos:end="79:47">[<expr pos:start="79:25" pos:end="79:46"><operator pos:start="79:25" pos:end="79:25">(</operator><name pos:start="79:26" pos:end="79:30">saddr</name> <operator pos:start="79:32" pos:end="79:32">-</operator> <literal type="number" pos:start="79:34" pos:end="79:40">0x00418</literal><operator pos:start="79:41" pos:end="79:41">)</operator> <operator pos:start="79:43" pos:end="79:44">&gt;&gt;</operator> <literal type="number" pos:start="79:46" pos:end="79:46">3</literal></expr>]</index></name> <operator pos:start="79:49" pos:end="79:49">=</operator> <operator pos:start="79:51" pos:end="79:51">(</operator><name pos:start="79:52" pos:end="79:55">char</name><operator pos:start="79:56" pos:end="79:56">)</operator> <name pos:start="79:58" pos:end="79:60">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><call pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:33">malta_fpga_update_display</name><argument_list pos:start="81:34" pos:end="81:36">(<argument pos:start="81:35" pos:end="81:35"><expr pos:start="81:35" pos:end="81:35"><name pos:start="81:35" pos:end="81:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>



    <comment type="block" pos:start="87:5" pos:end="87:26">/* SOFTRES Register */</comment>

    <case pos:start="89:5" pos:end="89:17">case <expr pos:start="89:10" pos:end="89:16"><literal type="number" pos:start="89:10" pos:end="89:16">0x00500</literal></expr>:</case>

        <if_stmt pos:start="91:9" pos:end="93:41"><if pos:start="91:9" pos:end="93:41">if <condition pos:start="91:12" pos:end="91:24">(<expr pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:15">val</name> <operator pos:start="91:17" pos:end="91:18">==</operator> <literal type="number" pos:start="91:20" pos:end="91:23">0x42</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:41"><block_content pos:start="93:13" pos:end="93:41">

            <expr_stmt pos:start="93:13" pos:end="93:41"><expr pos:start="93:13" pos:end="93:40"><call pos:start="93:13" pos:end="93:40"><name pos:start="93:13" pos:end="93:37">qemu_system_reset_request</name> <argument_list pos:start="93:39" pos:end="93:40">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>



    <comment type="block" pos:start="99:5" pos:end="99:25">/* BRKRES Register */</comment>

    <case pos:start="101:5" pos:end="101:17">case <expr pos:start="101:10" pos:end="101:16"><literal type="number" pos:start="101:10" pos:end="101:16">0x00508</literal></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:28"><expr pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:14">brk</name></name> <operator pos:start="103:16" pos:end="103:16">=</operator> <name pos:start="103:18" pos:end="103:20">val</name> <operator pos:start="103:22" pos:end="103:22">&amp;</operator> <literal type="number" pos:start="103:24" pos:end="103:27">0xff</literal></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>



    <comment type="block" pos:start="109:5" pos:end="109:66">/* UART Registers are handled directly by the serial device */</comment>



    <comment type="block" pos:start="113:5" pos:end="113:24">/* GPOUT Register */</comment>

    <case pos:start="115:5" pos:end="115:17">case <expr pos:start="115:10" pos:end="115:16"><literal type="number" pos:start="115:10" pos:end="115:16">0x00a00</literal></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:30"><expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:16">gpout</name></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <name pos:start="117:20" pos:end="117:22">val</name> <operator pos:start="117:24" pos:end="117:24">&amp;</operator> <literal type="number" pos:start="117:26" pos:end="117:29">0xff</literal></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>



    <comment type="block" pos:start="123:5" pos:end="123:24">/* I2COE Register */</comment>

    <case pos:start="125:5" pos:end="125:17">case <expr pos:start="125:10" pos:end="125:16"><literal type="number" pos:start="125:10" pos:end="125:16">0x00b08</literal></expr>:</case>

        <expr_stmt pos:start="127:9" pos:end="127:30"><expr pos:start="127:9" pos:end="127:29"><name pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:16">i2coe</name></name> <operator pos:start="127:18" pos:end="127:18">=</operator> <name pos:start="127:20" pos:end="127:22">val</name> <operator pos:start="127:24" pos:end="127:24">&amp;</operator> <literal type="number" pos:start="127:26" pos:end="127:29">0x03</literal></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>



    <comment type="block" pos:start="133:5" pos:end="133:25">/* I2COUT Register */</comment>

    <case pos:start="135:5" pos:end="135:17">case <expr pos:start="135:10" pos:end="135:16"><literal type="number" pos:start="135:10" pos:end="135:16">0x00b10</literal></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="137:50"><expr pos:start="137:9" pos:end="137:49"><call pos:start="137:9" pos:end="137:49"><name pos:start="137:9" pos:end="137:25">eeprom24c0x_write</name><argument_list pos:start="137:26" pos:end="137:49">(<argument pos:start="137:27" pos:end="137:36"><expr pos:start="137:27" pos:end="137:36"><name pos:start="137:27" pos:end="137:29">val</name> <operator pos:start="137:31" pos:end="137:31">&amp;</operator> <literal type="number" pos:start="137:33" pos:end="137:36">0x02</literal></expr></argument>, <argument pos:start="137:39" pos:end="137:48"><expr pos:start="137:39" pos:end="137:48"><name pos:start="137:39" pos:end="137:41">val</name> <operator pos:start="137:43" pos:end="137:43">&amp;</operator> <literal type="number" pos:start="137:45" pos:end="137:48">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:24"><expr pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:17"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:17">i2cout</name></name> <operator pos:start="139:19" pos:end="139:19">=</operator> <name pos:start="139:21" pos:end="139:23">val</name></expr>;</expr_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>



    <comment type="block" pos:start="145:5" pos:end="145:25">/* I2CSEL Register */</comment>

    <case pos:start="147:5" pos:end="147:17">case <expr pos:start="147:10" pos:end="147:16"><literal type="number" pos:start="147:10" pos:end="147:16">0x00b18</literal></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:31"><expr pos:start="149:9" pos:end="149:30"><name pos:start="149:9" pos:end="149:17"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:17">i2csel</name></name> <operator pos:start="149:19" pos:end="149:19">=</operator> <name pos:start="149:21" pos:end="149:23">val</name> <operator pos:start="149:25" pos:end="149:25">&amp;</operator> <literal type="number" pos:start="149:27" pos:end="149:30">0x01</literal></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>



    <default pos:start="155:5" pos:end="164:0">default:</default>

<cpp:if pos:start="157:1" pos:end="157:5">#<cpp:directive pos:start="157:2" pos:end="157:3">if</cpp:directive> <expr pos:start="157:5" pos:end="157:5"><literal type="number" pos:start="157:5" pos:end="157:5">0</literal></expr></cpp:if>

        printf ("malta_fpga_write: Bad register offset 0x" TARGET_FMT_lx "\n",

                addr);

<cpp:endif pos:start="163:1" pos:end="163:6">#<cpp:directive pos:start="163:2" pos:end="163:6">endif</cpp:directive></cpp:endif>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
