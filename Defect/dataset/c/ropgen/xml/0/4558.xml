<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4558.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:32">nbd_co_send_reply</name><parameter_list pos:start="1:33" pos:end="3:41">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:43">NBDRequest</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">req</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:73"><decl pos:start="1:51" pos:end="1:73"><type pos:start="1:51" pos:end="1:73"><name pos:start="1:51" pos:end="1:66"><name pos:start="1:51" pos:end="1:56">struct</name> <name pos:start="1:58" pos:end="1:66">nbd_reply</name></name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:73">reply</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:40"><decl pos:start="3:34" pos:end="3:40"><type pos:start="3:34" pos:end="3:40"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:40">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:14">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">NBDClient</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:21">client</name> <init pos:start="7:23" pos:end="7:35">= <expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">req</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">client</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">csock</name> <init pos:start="9:15" pos:end="9:28">= <expr pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:22">client</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:28">sock</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">ssize_t</name></type> <name pos:start="11:13" pos:end="11:14">rc</name></decl>, <decl pos:start="11:17" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:17" pos:end="11:19">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><call pos:start="15:5" pos:end="15:42"><name pos:start="15:5" pos:end="15:22">qemu_co_mutex_lock</name><argument_list pos:start="15:23" pos:end="15:42">(<argument pos:start="15:24" pos:end="15:41"><expr pos:start="15:24" pos:end="15:41"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:41"><name pos:start="15:25" pos:end="15:30">client</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:41">send_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="19:52"><expr pos:start="17:5" pos:end="19:51"><call pos:start="17:5" pos:end="19:51"><name pos:start="17:5" pos:end="17:24">qemu_set_fd_handler2</name><argument_list pos:start="17:25" pos:end="19:51">(<argument pos:start="17:26" pos:end="17:30"><expr pos:start="17:26" pos:end="17:30"><name pos:start="17:26" pos:end="17:30">csock</name></expr></argument>, <argument pos:start="17:33" pos:end="17:44"><expr pos:start="17:33" pos:end="17:44"><name pos:start="17:33" pos:end="17:44">nbd_can_read</name></expr></argument>, <argument pos:start="17:47" pos:end="17:54"><expr pos:start="17:47" pos:end="17:54"><name pos:start="17:47" pos:end="17:54">nbd_read</name></expr></argument>,

                         <argument pos:start="19:26" pos:end="19:42"><expr pos:start="19:26" pos:end="19:42"><name pos:start="19:26" pos:end="19:42">nbd_restart_write</name></expr></argument>, <argument pos:start="19:45" pos:end="19:50"><expr pos:start="19:45" pos:end="19:50"><name pos:start="19:45" pos:end="19:50">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:10">client</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:26">send_coroutine</name></name> <operator pos:start="21:28" pos:end="21:28">=</operator> <call pos:start="21:30" pos:end="21:50"><name pos:start="21:30" pos:end="21:48">qemu_coroutine_self</name><argument_list pos:start="21:49" pos:end="21:50">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="49:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:13">(<expr pos:start="25:9" pos:end="25:12"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:12">len</name></expr>)</condition> <block pos:start="25:15" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:42">

        <expr_stmt pos:start="27:9" pos:end="27:42"><expr pos:start="27:9" pos:end="27:41"><name pos:start="27:9" pos:end="27:10">rc</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:41"><name pos:start="27:14" pos:end="27:27">nbd_send_reply</name><argument_list pos:start="27:28" pos:end="27:41">(<argument pos:start="27:29" pos:end="27:33"><expr pos:start="27:29" pos:end="27:33"><name pos:start="27:29" pos:end="27:33">csock</name></expr></argument>, <argument pos:start="27:36" pos:end="27:40"><expr pos:start="27:36" pos:end="27:40"><name pos:start="27:36" pos:end="27:40">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="49:5">else <block pos:start="29:12" pos:end="49:5">{<block_content pos:start="31:9" pos:end="47:34">

        <expr_stmt pos:start="31:9" pos:end="31:34"><expr pos:start="31:9" pos:end="31:33"><call pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:23">socket_set_cork</name><argument_list pos:start="31:24" pos:end="31:33">(<argument pos:start="31:25" pos:end="31:29"><expr pos:start="31:25" pos:end="31:29"><name pos:start="31:25" pos:end="31:29">csock</name></expr></argument>, <argument pos:start="31:32" pos:end="31:32"><expr pos:start="31:32" pos:end="31:32"><literal type="number" pos:start="31:32" pos:end="31:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:10">rc</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:41"><name pos:start="33:14" pos:end="33:27">nbd_send_reply</name><argument_list pos:start="33:28" pos:end="33:41">(<argument pos:start="33:29" pos:end="33:33"><expr pos:start="33:29" pos:end="33:33"><name pos:start="33:29" pos:end="33:33">csock</name></expr></argument>, <argument pos:start="33:36" pos:end="33:40"><expr pos:start="33:36" pos:end="33:40"><name pos:start="33:36" pos:end="33:40">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="45:9"><if pos:start="35:9" pos:end="45:9">if <condition pos:start="35:12" pos:end="35:20">(<expr pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:14">rc</name> <operator pos:start="35:16" pos:end="35:17">&gt;=</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>)</condition> <block pos:start="35:22" pos:end="45:9">{<block_content pos:start="37:13" pos:end="43:13">

            <expr_stmt pos:start="37:13" pos:end="37:54"><expr pos:start="37:13" pos:end="37:53"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:53"><name pos:start="37:19" pos:end="37:30">qemu_co_send</name><argument_list pos:start="37:31" pos:end="37:53">(<argument pos:start="37:32" pos:end="37:36"><expr pos:start="37:32" pos:end="37:36"><name pos:start="37:32" pos:end="37:36">csock</name></expr></argument>, <argument pos:start="37:39" pos:end="37:47"><expr pos:start="37:39" pos:end="37:47"><name pos:start="37:39" pos:end="37:47"><name pos:start="37:39" pos:end="37:41">req</name><operator pos:start="37:42" pos:end="37:43">-&gt;</operator><name pos:start="37:44" pos:end="37:47">data</name></name></expr></argument>, <argument pos:start="37:50" pos:end="37:52"><expr pos:start="37:50" pos:end="37:52"><name pos:start="37:50" pos:end="37:52">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="43:13"><if pos:start="39:13" pos:end="43:13">if <condition pos:start="39:16" pos:end="39:27">(<expr pos:start="39:17" pos:end="39:26"><name pos:start="39:17" pos:end="39:19">ret</name> <operator pos:start="39:21" pos:end="39:22">!=</operator> <name pos:start="39:24" pos:end="39:26">len</name></expr>)</condition> <block pos:start="39:29" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:26">

                <expr_stmt pos:start="41:17" pos:end="41:26"><expr pos:start="41:17" pos:end="41:25"><name pos:start="41:17" pos:end="41:18">rc</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <operator pos:start="41:22" pos:end="41:22">-</operator><name pos:start="41:23" pos:end="41:25">EIO</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:34"><expr pos:start="47:9" pos:end="47:33"><call pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:23">socket_set_cork</name><argument_list pos:start="47:24" pos:end="47:33">(<argument pos:start="47:25" pos:end="47:29"><expr pos:start="47:25" pos:end="47:29"><name pos:start="47:25" pos:end="47:29">csock</name></expr></argument>, <argument pos:start="47:32" pos:end="47:32"><expr pos:start="47:32" pos:end="47:32"><literal type="number" pos:start="47:32" pos:end="47:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:34"><expr pos:start="53:5" pos:end="53:33"><name pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:10">client</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:26">send_coroutine</name></name> <operator pos:start="53:28" pos:end="53:28">=</operator> <name pos:start="53:30" pos:end="53:33">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:70"><expr pos:start="55:5" pos:end="55:69"><call pos:start="55:5" pos:end="55:69"><name pos:start="55:5" pos:end="55:24">qemu_set_fd_handler2</name><argument_list pos:start="55:25" pos:end="55:69">(<argument pos:start="55:26" pos:end="55:30"><expr pos:start="55:26" pos:end="55:30"><name pos:start="55:26" pos:end="55:30">csock</name></expr></argument>, <argument pos:start="55:33" pos:end="55:44"><expr pos:start="55:33" pos:end="55:44"><name pos:start="55:33" pos:end="55:44">nbd_can_read</name></expr></argument>, <argument pos:start="55:47" pos:end="55:54"><expr pos:start="55:47" pos:end="55:54"><name pos:start="55:47" pos:end="55:54">nbd_read</name></expr></argument>, <argument pos:start="55:57" pos:end="55:60"><expr pos:start="55:57" pos:end="55:60"><name pos:start="55:57" pos:end="55:60">NULL</name></expr></argument>, <argument pos:start="55:63" pos:end="55:68"><expr pos:start="55:63" pos:end="55:68"><name pos:start="55:63" pos:end="55:68">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:45"><expr pos:start="57:5" pos:end="57:44"><call pos:start="57:5" pos:end="57:44"><name pos:start="57:5" pos:end="57:24">qemu_co_mutex_unlock</name><argument_list pos:start="57:25" pos:end="57:44">(<argument pos:start="57:26" pos:end="57:43"><expr pos:start="57:26" pos:end="57:43"><operator pos:start="57:26" pos:end="57:26">&amp;</operator><name pos:start="57:27" pos:end="57:43"><name pos:start="57:27" pos:end="57:32">client</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:43">send_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="59:5" pos:end="59:14">return <expr pos:start="59:12" pos:end="59:13"><name pos:start="59:12" pos:end="59:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
