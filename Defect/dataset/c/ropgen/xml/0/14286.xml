<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14286.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">test_primitives</name><parameter_list pos:start="1:28" pos:end="1:49">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:41">gconstpointer</name></type> <name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:20">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">TestArgs</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">args</name> <init pos:start="5:20" pos:end="5:40">= <expr pos:start="5:22" pos:end="5:40"><operator pos:start="5:22" pos:end="5:22">(</operator><name pos:start="5:23" pos:end="5:30">TestArgs</name> <operator pos:start="5:32" pos:end="5:32">*</operator><operator pos:start="5:33" pos:end="5:33">)</operator> <name pos:start="5:35" pos:end="5:40">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:24"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:22">SerializeOps</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">ops</name> <init pos:start="7:29" pos:end="7:39">= <expr pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:34">args</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:39">ops</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">PrimitiveType</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">pt</name> <init pos:start="9:23" pos:end="9:39">= <expr pos:start="9:25" pos:end="9:39"><name pos:start="9:25" pos:end="9:39"><name pos:start="9:25" pos:end="9:28">args</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:39">test_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">PrimitiveType</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:26">pt_copy</name> <init pos:start="11:28" pos:end="11:56">= <expr pos:start="11:30" pos:end="11:56"><call pos:start="11:30" pos:end="11:56"><name pos:start="11:30" pos:end="11:38">g_malloc0</name><argument_list pos:start="11:39" pos:end="11:56">(<argument pos:start="11:40" pos:end="11:55"><expr pos:start="11:40" pos:end="11:55"><sizeof pos:start="11:40" pos:end="11:55">sizeof<argument_list pos:start="11:46" pos:end="11:55">(<argument pos:start="11:47" pos:end="11:54"><expr pos:start="11:47" pos:end="11:54"><operator pos:start="11:47" pos:end="11:47">*</operator><name pos:start="11:48" pos:end="11:54">pt_copy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:14">err</name> <init pos:start="13:16" pos:end="13:21">= <expr pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:24">serialize_data</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:11">pt_copy</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:17">type</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <name pos:start="19:21" pos:end="19:28"><name pos:start="19:21" pos:end="19:22">pt</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:28">type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:68"><expr pos:start="21:5" pos:end="21:67"><call pos:start="21:5" pos:end="21:67"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:7">ops</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:18">serialize</name></name><argument_list pos:start="21:19" pos:end="21:67">(<argument pos:start="21:20" pos:end="21:21"><expr pos:start="21:20" pos:end="21:21"><name pos:start="21:20" pos:end="21:21">pt</name></expr></argument>, <argument pos:start="21:24" pos:end="21:38"><expr pos:start="21:24" pos:end="21:38"><operator pos:start="21:24" pos:end="21:24">&amp;</operator><name pos:start="21:25" pos:end="21:38">serialize_data</name></expr></argument>, <argument pos:start="21:41" pos:end="21:60"><expr pos:start="21:41" pos:end="21:60"><name pos:start="21:41" pos:end="21:60">visit_primitive_type</name></expr></argument>, <argument pos:start="21:63" pos:end="21:66"><expr pos:start="21:63" pos:end="21:66"><operator pos:start="21:63" pos:end="21:63">&amp;</operator><name pos:start="21:64" pos:end="21:66">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:84"><expr pos:start="23:5" pos:end="23:83"><call pos:start="23:5" pos:end="23:83"><name pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:7">ops</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:20">deserialize</name></name><argument_list pos:start="23:21" pos:end="23:83">(<argument pos:start="23:22" pos:end="23:38"><expr pos:start="23:22" pos:end="23:38"><operator pos:start="23:22" pos:end="23:22">(</operator><name pos:start="23:23" pos:end="23:26">void</name> <operator pos:start="23:28" pos:end="23:28">*</operator><operator pos:start="23:29" pos:end="23:29">*</operator><operator pos:start="23:30" pos:end="23:30">)</operator><operator pos:start="23:31" pos:end="23:31">&amp;</operator><name pos:start="23:32" pos:end="23:38">pt_copy</name></expr></argument>, <argument pos:start="23:41" pos:end="23:54"><expr pos:start="23:41" pos:end="23:54"><name pos:start="23:41" pos:end="23:54">serialize_data</name></expr></argument>, <argument pos:start="23:57" pos:end="23:76"><expr pos:start="23:57" pos:end="23:76"><name pos:start="23:57" pos:end="23:76">visit_primitive_type</name></expr></argument>, <argument pos:start="23:79" pos:end="23:82"><expr pos:start="23:79" pos:end="23:82"><operator pos:start="23:79" pos:end="23:79">&amp;</operator><name pos:start="23:80" pos:end="23:82">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><call pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:12">g_assert</name><argument_list pos:start="27:13" pos:end="27:25">(<argument pos:start="27:14" pos:end="27:24"><expr pos:start="27:14" pos:end="27:24"><name pos:start="27:14" pos:end="27:16">err</name> <operator pos:start="27:18" pos:end="27:19">==</operator> <name pos:start="27:21" pos:end="27:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><call pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:12">g_assert</name><argument_list pos:start="29:13" pos:end="29:29">(<argument pos:start="29:14" pos:end="29:28"><expr pos:start="29:14" pos:end="29:28"><name pos:start="29:14" pos:end="29:20">pt_copy</name> <operator pos:start="29:22" pos:end="29:23">!=</operator> <name pos:start="29:25" pos:end="29:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="69:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:33">(<expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:10">pt</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:16">type</name></name> <operator pos:start="31:18" pos:end="31:19">==</operator> <name pos:start="31:21" pos:end="31:32">PTYPE_STRING</name></expr>)</condition> <block pos:start="31:35" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:46">

        <expr_stmt pos:start="33:9" pos:end="33:69"><expr pos:start="33:9" pos:end="33:68"><call pos:start="33:9" pos:end="33:68"><name pos:start="33:9" pos:end="33:23">g_assert_cmpstr</name><argument_list pos:start="33:24" pos:end="33:68">(<argument pos:start="33:25" pos:end="33:40"><expr pos:start="33:25" pos:end="33:40"><name pos:start="33:25" pos:end="33:40"><name pos:start="33:25" pos:end="33:26">pt</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:33">value</name><operator pos:start="33:34" pos:end="33:34">.</operator><name pos:start="33:35" pos:end="33:40">string</name></name></expr></argument>, <argument pos:start="33:43" pos:end="33:44"><expr pos:start="33:43" pos:end="33:44"><operator pos:start="33:43" pos:end="33:44">==</operator></expr></argument>, <argument pos:start="33:47" pos:end="33:67"><expr pos:start="33:47" pos:end="33:67"><name pos:start="33:47" pos:end="33:67"><name pos:start="33:47" pos:end="33:53">pt_copy</name><operator pos:start="33:54" pos:end="33:55">-&gt;</operator><name pos:start="33:56" pos:end="33:60">value</name><operator pos:start="33:61" pos:end="33:61">.</operator><name pos:start="33:62" pos:end="33:67">string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:46"><expr pos:start="35:9" pos:end="35:45"><call pos:start="35:9" pos:end="35:45"><name pos:start="35:9" pos:end="35:14">g_free</name><argument_list pos:start="35:15" pos:end="35:45">(<argument pos:start="35:16" pos:end="35:44"><expr pos:start="35:16" pos:end="35:44"><operator pos:start="35:16" pos:end="35:16">(</operator><name pos:start="35:17" pos:end="35:20">char</name> <operator pos:start="35:22" pos:end="35:22">*</operator><operator pos:start="35:23" pos:end="35:23">)</operator><name pos:start="35:24" pos:end="35:44"><name pos:start="35:24" pos:end="35:30">pt_copy</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:37">value</name><operator pos:start="35:38" pos:end="35:38">.</operator><name pos:start="35:39" pos:end="35:44">string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="37:7" pos:end="61:5">else if <condition pos:start="37:15" pos:end="37:40">(<expr pos:start="37:16" pos:end="37:39"><name pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:17">pt</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:23">type</name></name> <operator pos:start="37:25" pos:end="37:26">==</operator> <name pos:start="37:28" pos:end="37:39">PTYPE_NUMBER</name></expr>)</condition> <block pos:start="37:42" pos:end="61:5">{<block_content pos:start="39:9" pos:end="59:43">

        <decl_stmt pos:start="39:9" pos:end="39:52"><decl pos:start="39:9" pos:end="39:51"><type pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:15">GString</name> <modifier pos:start="39:17" pos:end="39:17">*</modifier></type><name pos:start="39:18" pos:end="39:32">double_expected</name> <init pos:start="39:34" pos:end="39:51">= <expr pos:start="39:36" pos:end="39:51"><call pos:start="39:36" pos:end="39:51"><name pos:start="39:36" pos:end="39:47">g_string_new</name><argument_list pos:start="39:48" pos:end="39:51">(<argument pos:start="39:49" pos:end="39:50"><expr pos:start="39:49" pos:end="39:50"><literal type="string" pos:start="39:49" pos:end="39:50">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:50"><decl pos:start="41:9" pos:end="41:49"><type pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:15">GString</name> <modifier pos:start="41:17" pos:end="41:17">*</modifier></type><name pos:start="41:18" pos:end="41:30">double_actual</name> <init pos:start="41:32" pos:end="41:49">= <expr pos:start="41:34" pos:end="41:49"><call pos:start="41:34" pos:end="41:49"><name pos:start="41:34" pos:end="41:45">g_string_new</name><argument_list pos:start="41:46" pos:end="41:49">(<argument pos:start="41:47" pos:end="41:48"><expr pos:start="41:47" pos:end="41:48"><literal type="string" pos:start="41:47" pos:end="41:48">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="43:9" pos:end="47:11">/* we serialize with %f for our reference visitors, so rather than fuzzy

         * floating math to test "equality", just compare the formatted values

         */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:67"><expr pos:start="49:9" pos:end="49:66"><call pos:start="49:9" pos:end="49:66"><name pos:start="49:9" pos:end="49:23">g_string_printf</name><argument_list pos:start="49:24" pos:end="49:66">(<argument pos:start="49:25" pos:end="49:39"><expr pos:start="49:25" pos:end="49:39"><name pos:start="49:25" pos:end="49:39">double_expected</name></expr></argument>, <argument pos:start="49:42" pos:end="49:47"><expr pos:start="49:42" pos:end="49:47"><literal type="string" pos:start="49:42" pos:end="49:47">"%.6f"</literal></expr></argument>, <argument pos:start="49:50" pos:end="49:65"><expr pos:start="49:50" pos:end="49:65"><name pos:start="49:50" pos:end="49:65"><name pos:start="49:50" pos:end="49:51">pt</name><operator pos:start="49:52" pos:end="49:53">-&gt;</operator><name pos:start="49:54" pos:end="49:58">value</name><operator pos:start="49:59" pos:end="49:59">.</operator><name pos:start="49:60" pos:end="49:65">number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:70"><expr pos:start="51:9" pos:end="51:69"><call pos:start="51:9" pos:end="51:69"><name pos:start="51:9" pos:end="51:23">g_string_printf</name><argument_list pos:start="51:24" pos:end="51:69">(<argument pos:start="51:25" pos:end="51:37"><expr pos:start="51:25" pos:end="51:37"><name pos:start="51:25" pos:end="51:37">double_actual</name></expr></argument>, <argument pos:start="51:40" pos:end="51:45"><expr pos:start="51:40" pos:end="51:45"><literal type="string" pos:start="51:40" pos:end="51:45">"%.6f"</literal></expr></argument>, <argument pos:start="51:48" pos:end="51:68"><expr pos:start="51:48" pos:end="51:68"><name pos:start="51:48" pos:end="51:68"><name pos:start="51:48" pos:end="51:54">pt_copy</name><operator pos:start="51:55" pos:end="51:56">-&gt;</operator><name pos:start="51:57" pos:end="51:61">value</name><operator pos:start="51:62" pos:end="51:62">.</operator><name pos:start="51:63" pos:end="51:68">number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:70"><expr pos:start="53:9" pos:end="53:69"><call pos:start="53:9" pos:end="53:69"><name pos:start="53:9" pos:end="53:23">g_assert_cmpstr</name><argument_list pos:start="53:24" pos:end="53:69">(<argument pos:start="53:25" pos:end="53:42"><expr pos:start="53:25" pos:end="53:42"><name pos:start="53:25" pos:end="53:42"><name pos:start="53:25" pos:end="53:37">double_actual</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:42">str</name></name></expr></argument>, <argument pos:start="53:45" pos:end="53:46"><expr pos:start="53:45" pos:end="53:46"><operator pos:start="53:45" pos:end="53:46">==</operator></expr></argument>, <argument pos:start="53:49" pos:end="53:68"><expr pos:start="53:49" pos:end="53:68"><name pos:start="53:49" pos:end="53:68"><name pos:start="53:49" pos:end="53:63">double_expected</name><operator pos:start="53:64" pos:end="53:65">-&gt;</operator><name pos:start="53:66" pos:end="53:68">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:45"><expr pos:start="57:9" pos:end="57:44"><call pos:start="57:9" pos:end="57:44"><name pos:start="57:9" pos:end="57:21">g_string_free</name><argument_list pos:start="57:22" pos:end="57:44">(<argument pos:start="57:23" pos:end="57:37"><expr pos:start="57:23" pos:end="57:37"><name pos:start="57:23" pos:end="57:37">double_expected</name></expr></argument>, <argument pos:start="57:40" pos:end="57:43"><expr pos:start="57:40" pos:end="57:43"><name pos:start="57:40" pos:end="57:43">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:43"><expr pos:start="59:9" pos:end="59:42"><call pos:start="59:9" pos:end="59:42"><name pos:start="59:9" pos:end="59:21">g_string_free</name><argument_list pos:start="59:22" pos:end="59:42">(<argument pos:start="59:23" pos:end="59:35"><expr pos:start="59:23" pos:end="59:35"><name pos:start="59:23" pos:end="59:35">double_actual</name></expr></argument>, <argument pos:start="59:38" pos:end="59:41"><expr pos:start="59:38" pos:end="59:41"><name pos:start="59:38" pos:end="59:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="65:5">else if <condition pos:start="61:15" pos:end="61:41">(<expr pos:start="61:16" pos:end="61:40"><name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:17">pt</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:23">type</name></name> <operator pos:start="61:25" pos:end="61:26">==</operator> <name pos:start="61:28" pos:end="61:40">PTYPE_BOOLEAN</name></expr>)</condition> <block pos:start="61:43" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:62">

        <expr_stmt pos:start="63:9" pos:end="63:62"><expr pos:start="63:9" pos:end="63:61"><call pos:start="63:9" pos:end="63:61"><name pos:start="63:9" pos:end="63:23">g_assert_cmpint</name><argument_list pos:start="63:24" pos:end="63:61">(<argument pos:start="63:25" pos:end="63:39"><expr pos:start="63:25" pos:end="63:39"><operator pos:start="63:25" pos:end="63:25">!</operator><operator pos:start="63:26" pos:end="63:26">!</operator><name pos:start="63:27" pos:end="63:39"><name pos:start="63:27" pos:end="63:28">pt</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:35">value</name><operator pos:start="63:36" pos:end="63:36">.</operator><name pos:start="63:37" pos:end="63:39">max</name></name></expr></argument>, <argument pos:start="63:42" pos:end="63:43"><expr pos:start="63:42" pos:end="63:43"><operator pos:start="63:42" pos:end="63:43">==</operator></expr></argument>, <argument pos:start="63:46" pos:end="63:60"><expr pos:start="63:46" pos:end="63:60"><operator pos:start="63:46" pos:end="63:46">!</operator><operator pos:start="63:47" pos:end="63:47">!</operator><name pos:start="63:48" pos:end="63:60"><name pos:start="63:48" pos:end="63:49">pt</name><operator pos:start="63:50" pos:end="63:51">-&gt;</operator><name pos:start="63:52" pos:end="63:56">value</name><operator pos:start="63:57" pos:end="63:57">.</operator><name pos:start="63:58" pos:end="63:60">max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="69:5">else <block pos:start="65:12" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:63">

        <expr_stmt pos:start="67:9" pos:end="67:63"><expr pos:start="67:9" pos:end="67:62"><call pos:start="67:9" pos:end="67:62"><name pos:start="67:9" pos:end="67:23">g_assert_cmpint</name><argument_list pos:start="67:24" pos:end="67:62">(<argument pos:start="67:25" pos:end="67:37"><expr pos:start="67:25" pos:end="67:37"><name pos:start="67:25" pos:end="67:37"><name pos:start="67:25" pos:end="67:26">pt</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:33">value</name><operator pos:start="67:34" pos:end="67:34">.</operator><name pos:start="67:35" pos:end="67:37">max</name></name></expr></argument>, <argument pos:start="67:40" pos:end="67:41"><expr pos:start="67:40" pos:end="67:41"><operator pos:start="67:40" pos:end="67:41">==</operator></expr></argument>, <argument pos:start="67:44" pos:end="67:61"><expr pos:start="67:44" pos:end="67:61"><name pos:start="67:44" pos:end="67:61"><name pos:start="67:44" pos:end="67:50">pt_copy</name><operator pos:start="67:51" pos:end="67:52">-&gt;</operator><name pos:start="67:53" pos:end="67:57">value</name><operator pos:start="67:58" pos:end="67:58">.</operator><name pos:start="67:59" pos:end="67:61">max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><call pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:16"><name pos:start="73:5" pos:end="73:7">ops</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:16">cleanup</name></name><argument_list pos:start="73:17" pos:end="73:32">(<argument pos:start="73:18" pos:end="73:31"><expr pos:start="73:18" pos:end="73:31"><name pos:start="73:18" pos:end="73:31">serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:17"><expr pos:start="75:5" pos:end="75:16"><call pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:10">g_free</name><argument_list pos:start="75:11" pos:end="75:16">(<argument pos:start="75:12" pos:end="75:15"><expr pos:start="75:12" pos:end="75:15"><name pos:start="75:12" pos:end="75:15">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:20"><expr pos:start="77:5" pos:end="77:19"><call pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:10">g_free</name><argument_list pos:start="77:11" pos:end="77:19">(<argument pos:start="77:12" pos:end="77:18"><expr pos:start="77:12" pos:end="77:18"><name pos:start="77:12" pos:end="77:18">pt_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
