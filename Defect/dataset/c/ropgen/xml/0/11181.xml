<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11181.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">qcow2_zero_clusters</name><parameter_list pos:start="1:24" pos:end="3:34">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:61"><decl pos:start="1:47" pos:end="1:61"><type pos:start="1:47" pos:end="1:61"><name pos:start="1:47" pos:end="1:54">uint64_t</name></type> <name pos:start="1:56" pos:end="1:61">offset</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:77">nb_sectors</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:33"><decl pos:start="3:25" pos:end="3:33"><type pos:start="3:25" pos:end="3:33"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:33">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="7:5" pos:end="81:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVQcow2State</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">end_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:24">nb_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:59"><expr pos:start="17:5" pos:end="17:58"><name pos:start="17:5" pos:end="17:14">end_offset</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:23">offset</name> <operator pos:start="17:25" pos:end="17:25">+</operator> <operator pos:start="17:27" pos:end="17:27">(</operator><name pos:start="17:28" pos:end="17:37">nb_sectors</name> <operator pos:start="17:39" pos:end="17:40">&lt;&lt;</operator> <name pos:start="17:42" pos:end="17:57">BDRV_SECTOR_BITS</name><operator pos:start="17:58" pos:end="17:58">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:62">/* Caller must pass aligned values, except at image end */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:53"><expr pos:start="23:5" pos:end="23:52"><call pos:start="23:5" pos:end="23:52"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:52">(<argument pos:start="23:12" pos:end="23:51"><expr pos:start="23:12" pos:end="23:51"><call pos:start="23:12" pos:end="23:51"><name pos:start="23:12" pos:end="23:26">QEMU_IS_ALIGNED</name><argument_list pos:start="23:27" pos:end="23:51">(<argument pos:start="23:28" pos:end="23:33"><expr pos:start="23:28" pos:end="23:33"><name pos:start="23:28" pos:end="23:33">offset</name></expr></argument>, <argument pos:start="23:36" pos:end="23:50"><expr pos:start="23:36" pos:end="23:50"><name pos:start="23:36" pos:end="23:50"><name pos:start="23:36" pos:end="23:36">s</name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="27:64"><expr pos:start="25:5" pos:end="27:63"><call pos:start="25:5" pos:end="27:63"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="27:63">(<argument pos:start="25:12" pos:end="27:62"><expr pos:start="25:12" pos:end="27:62"><call pos:start="25:12" pos:end="25:55"><name pos:start="25:12" pos:end="25:26">QEMU_IS_ALIGNED</name><argument_list pos:start="25:27" pos:end="25:55">(<argument pos:start="25:28" pos:end="25:37"><expr pos:start="25:28" pos:end="25:37"><name pos:start="25:28" pos:end="25:37">end_offset</name></expr></argument>, <argument pos:start="25:40" pos:end="25:54"><expr pos:start="25:40" pos:end="25:54"><name pos:start="25:40" pos:end="25:54"><name pos:start="25:40" pos:end="25:40">s</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:54">cluster_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="25:57" pos:end="25:58">||</operator>

           <name pos:start="27:12" pos:end="27:21">end_offset</name> <operator pos:start="27:23" pos:end="27:24">==</operator> <name pos:start="27:26" pos:end="27:42"><name pos:start="27:26" pos:end="27:27">bs</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:42">total_sectors</name></name> <operator pos:start="27:44" pos:end="27:45">&lt;&lt;</operator> <name pos:start="27:47" pos:end="27:62">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:64">/* The zero flag is only supported by version 3 and newer */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:28">(<expr pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:23">qcow_version</name></name> <operator pos:start="33:25" pos:end="33:25">&lt;</operator> <literal type="number" pos:start="33:27" pos:end="33:27">3</literal></expr>)</condition> <block pos:start="33:30" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:24">

        <return pos:start="35:9" pos:end="35:24">return <expr pos:start="35:16" pos:end="35:23"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:60">/* Each L2 table is handled by its own loop iteration */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:70"><expr pos:start="43:5" pos:end="43:69"><name pos:start="43:5" pos:end="43:15">nb_clusters</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:69"><name pos:start="43:19" pos:end="43:34">size_to_clusters</name><argument_list pos:start="43:35" pos:end="43:69">(<argument pos:start="43:36" pos:end="43:36"><expr pos:start="43:36" pos:end="43:36"><name pos:start="43:36" pos:end="43:36">s</name></expr></argument>, <argument pos:start="43:39" pos:end="43:68"><expr pos:start="43:39" pos:end="43:68"><name pos:start="43:39" pos:end="43:48">nb_sectors</name> <operator pos:start="43:50" pos:end="43:51">&lt;&lt;</operator> <name pos:start="43:53" pos:end="43:68">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:21">cache_discards</name></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:28">true</name></expr>;</expr_stmt>



    <while pos:start="51:5" pos:end="67:5">while <condition pos:start="51:11" pos:end="51:27">(<expr pos:start="51:12" pos:end="51:26"><name pos:start="51:12" pos:end="51:22">nb_clusters</name> <operator pos:start="51:24" pos:end="51:24">&gt;</operator> <literal type="number" pos:start="51:26" pos:end="51:26">0</literal></expr>)</condition> <block pos:start="51:29" pos:end="67:5">{<block_content pos:start="53:9" pos:end="65:42">

        <expr_stmt pos:start="53:9" pos:end="53:61"><expr pos:start="53:9" pos:end="53:60"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:60"><name pos:start="53:15" pos:end="53:28">zero_single_l2</name><argument_list pos:start="53:29" pos:end="53:60">(<argument pos:start="53:30" pos:end="53:31"><expr pos:start="53:30" pos:end="53:31"><name pos:start="53:30" pos:end="53:31">bs</name></expr></argument>, <argument pos:start="53:34" pos:end="53:39"><expr pos:start="53:34" pos:end="53:39"><name pos:start="53:34" pos:end="53:39">offset</name></expr></argument>, <argument pos:start="53:42" pos:end="53:52"><expr pos:start="53:42" pos:end="53:52"><name pos:start="53:42" pos:end="53:52">nb_clusters</name></expr></argument>, <argument pos:start="53:55" pos:end="53:59"><expr pos:start="53:55" pos:end="53:59"><name pos:start="53:55" pos:end="53:59">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:22">

            <goto pos:start="57:13" pos:end="57:22">goto <name pos:start="57:18" pos:end="57:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:27"><expr pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:19">nb_clusters</name> <operator pos:start="63:21" pos:end="63:22">-=</operator> <name pos:start="63:24" pos:end="63:26">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:42"><expr pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:14">offset</name> <operator pos:start="65:16" pos:end="65:17">+=</operator> <operator pos:start="65:19" pos:end="65:19">(</operator><name pos:start="65:20" pos:end="65:22">ret</name> <operator pos:start="65:24" pos:end="65:24">*</operator> <name pos:start="65:26" pos:end="65:40"><name pos:start="65:26" pos:end="65:26">s</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:40">cluster_size</name></name><operator pos:start="65:41" pos:end="65:41">)</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="71:5" pos:end="71:12"><expr pos:start="71:5" pos:end="71:11"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <literal type="number" pos:start="71:11" pos:end="71:11">0</literal></expr>;</expr_stmt>

<label pos:start="73:1" pos:end="73:5"><name pos:start="73:1" pos:end="73:4">fail</name>:</label>

    <expr_stmt pos:start="75:5" pos:end="75:30"><expr pos:start="75:5" pos:end="75:29"><name pos:start="75:5" pos:end="75:21"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:21">cache_discards</name></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:29">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:36"><expr pos:start="77:5" pos:end="77:35"><call pos:start="77:5" pos:end="77:35"><name pos:start="77:5" pos:end="77:26">qcow2_process_discards</name><argument_list pos:start="77:27" pos:end="77:35">(<argument pos:start="77:28" pos:end="77:29"><expr pos:start="77:28" pos:end="77:29"><name pos:start="77:28" pos:end="77:29">bs</name></expr></argument>, <argument pos:start="77:32" pos:end="77:34"><expr pos:start="77:32" pos:end="77:34"><name pos:start="77:32" pos:end="77:34">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
