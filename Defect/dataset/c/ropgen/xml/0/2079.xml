<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2079.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:34">nbd_receive_request</name><parameter_list pos:start="1:35" pos:end="1:74">(<parameter pos:start="1:36" pos:end="1:44"><decl pos:start="1:36" pos:end="1:44"><type pos:start="1:36" pos:end="1:44"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:44">csock</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:73"><decl pos:start="1:47" pos:end="1:73"><type pos:start="1:47" pos:end="1:73"><name pos:start="1:47" pos:end="1:64"><name pos:start="1:47" pos:end="1:52">struct</name> <name pos:start="1:54" pos:end="1:64">nbd_request</name></name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:73">request</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:34"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:34">[<expr pos:start="5:17" pos:end="5:33"><literal type="number" pos:start="5:17" pos:end="5:19">4</literal> <operator pos:start="5:19" pos:end="5:19">+</operator> <literal type="number" pos:start="5:21" pos:end="5:23">4</literal> <operator pos:start="5:23" pos:end="5:23">+</operator> <literal type="number" pos:start="5:25" pos:end="5:27">8</literal> <operator pos:start="5:27" pos:end="5:27">+</operator> <literal type="number" pos:start="5:29" pos:end="5:31">8</literal> <operator pos:start="5:31" pos:end="5:31">+</operator> <literal type="number" pos:start="5:33" pos:end="5:33">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">magic</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:58">(<expr pos:start="11:9" pos:end="11:57"><call pos:start="11:9" pos:end="11:42"><name pos:start="11:9" pos:end="11:17">read_sync</name><argument_list pos:start="11:18" pos:end="11:42">(<argument pos:start="11:19" pos:end="11:23"><expr pos:start="11:19" pos:end="11:23"><name pos:start="11:19" pos:end="11:23">csock</name></expr></argument>, <argument pos:start="11:26" pos:end="11:28"><expr pos:start="11:26" pos:end="11:28"><name pos:start="11:26" pos:end="11:28">buf</name></expr></argument>, <argument pos:start="11:31" pos:end="11:41"><expr pos:start="11:31" pos:end="11:41"><sizeof pos:start="11:31" pos:end="11:41">sizeof<argument_list pos:start="11:37" pos:end="11:41">(<argument pos:start="11:38" pos:end="11:40"><expr pos:start="11:38" pos:end="11:40"><name pos:start="11:38" pos:end="11:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="11:44" pos:end="11:45">!=</operator> <sizeof pos:start="11:47" pos:end="11:57">sizeof<argument_list pos:start="11:53" pos:end="11:57">(<argument pos:start="11:54" pos:end="11:56"><expr pos:start="11:54" pos:end="11:56"><name pos:start="11:54" pos:end="11:56">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="11:60" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:18">

        <expr_stmt pos:start="13:9" pos:end="13:27"><expr pos:start="13:9" pos:end="13:26"><call pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:11">LOG</name><argument_list pos:start="13:12" pos:end="13:26">(<argument pos:start="13:13" pos:end="13:25"><expr pos:start="13:13" pos:end="13:25"><literal type="string" pos:start="13:13" pos:end="13:25">"read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:23"><expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:13">errno</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="35:7">/* Request

       [ 0 ..  3]   magic   (NBD_REQUEST_MAGIC)

       [ 4 ..  7]   type    (0 == READ, 1 == WRITE)

       [ 8 .. 15]   handle

       [16 .. 23]   from

       [24 .. 27]   len

     */</comment>



    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:9">magic</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:24">be32_to_cpup</name><argument_list pos:start="39:25" pos:end="39:40">(<argument pos:start="39:26" pos:end="39:39"><expr pos:start="39:26" pos:end="39:39"><operator pos:start="39:26" pos:end="39:26">(</operator><name pos:start="39:27" pos:end="39:34">uint32_t</name><operator pos:start="39:35" pos:end="39:35">*</operator><operator pos:start="39:36" pos:end="39:36">)</operator><name pos:start="39:37" pos:end="39:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:56"><expr pos:start="41:5" pos:end="41:55"><name pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:11">request</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:17">type</name></name>  <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:55"><name pos:start="41:22" pos:end="41:33">be32_to_cpup</name><argument_list pos:start="41:34" pos:end="41:55">(<argument pos:start="41:35" pos:end="41:54"><expr pos:start="41:35" pos:end="41:54"><operator pos:start="41:35" pos:end="41:35">(</operator><name pos:start="41:36" pos:end="41:43">uint32_t</name><operator pos:start="41:44" pos:end="41:44">*</operator><operator pos:start="41:45" pos:end="41:45">)</operator><operator pos:start="41:46" pos:end="41:46">(</operator><name pos:start="41:47" pos:end="41:49">buf</name> <operator pos:start="41:51" pos:end="41:51">+</operator> <literal type="number" pos:start="41:53" pos:end="41:53">4</literal><operator pos:start="41:54" pos:end="41:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:57"><expr pos:start="43:5" pos:end="43:56"><name pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:11">request</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:19">handle</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:56"><name pos:start="43:23" pos:end="43:34">be64_to_cpup</name><argument_list pos:start="43:35" pos:end="43:56">(<argument pos:start="43:36" pos:end="43:55"><expr pos:start="43:36" pos:end="43:55"><operator pos:start="43:36" pos:end="43:36">(</operator><name pos:start="43:37" pos:end="43:44">uint64_t</name><operator pos:start="43:45" pos:end="43:45">*</operator><operator pos:start="43:46" pos:end="43:46">)</operator><operator pos:start="43:47" pos:end="43:47">(</operator><name pos:start="43:48" pos:end="43:50">buf</name> <operator pos:start="43:52" pos:end="43:52">+</operator> <literal type="number" pos:start="43:54" pos:end="43:54">8</literal><operator pos:start="43:55" pos:end="43:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:57"><expr pos:start="45:5" pos:end="45:56"><name pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:11">request</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:17">from</name></name>  <operator pos:start="45:20" pos:end="45:20">=</operator> <call pos:start="45:22" pos:end="45:56"><name pos:start="45:22" pos:end="45:33">be64_to_cpup</name><argument_list pos:start="45:34" pos:end="45:56">(<argument pos:start="45:35" pos:end="45:55"><expr pos:start="45:35" pos:end="45:55"><operator pos:start="45:35" pos:end="45:35">(</operator><name pos:start="45:36" pos:end="45:43">uint64_t</name><operator pos:start="45:44" pos:end="45:44">*</operator><operator pos:start="45:45" pos:end="45:45">)</operator><operator pos:start="45:46" pos:end="45:46">(</operator><name pos:start="45:47" pos:end="45:49">buf</name> <operator pos:start="45:51" pos:end="45:51">+</operator> <literal type="number" pos:start="45:53" pos:end="45:54">16</literal><operator pos:start="45:55" pos:end="45:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:57"><expr pos:start="47:5" pos:end="47:56"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:11">request</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:16">len</name></name>   <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:56"><name pos:start="47:22" pos:end="47:33">be32_to_cpup</name><argument_list pos:start="47:34" pos:end="47:56">(<argument pos:start="47:35" pos:end="47:55"><expr pos:start="47:35" pos:end="47:55"><operator pos:start="47:35" pos:end="47:35">(</operator><name pos:start="47:36" pos:end="47:43">uint32_t</name><operator pos:start="47:44" pos:end="47:44">*</operator><operator pos:start="47:45" pos:end="47:45">)</operator><operator pos:start="47:46" pos:end="47:46">(</operator><name pos:start="47:47" pos:end="47:49">buf</name> <operator pos:start="47:51" pos:end="47:51">+</operator> <literal type="number" pos:start="47:53" pos:end="47:54">24</literal><operator pos:start="47:55" pos:end="47:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="55:61"><expr pos:start="51:5" pos:end="55:60"><call pos:start="51:5" pos:end="55:60"><name pos:start="51:5" pos:end="51:9">TRACE</name><argument_list pos:start="51:10" pos:end="55:60">(<argument pos:start="51:11" pos:end="53:70"><expr pos:start="51:11" pos:end="53:70"><literal type="string" pos:start="51:11" pos:end="51:25">"Got request: "</literal>

          <literal type="string" pos:start="53:11" pos:end="53:48">"{ magic = 0x%x, .type = %d, from = %"</literal> <name pos:start="53:50" pos:end="53:55">PRIu64</name><literal type="string" pos:start="53:56" pos:end="53:70">" , len = %u }"</literal></expr></argument>,

          <argument pos:start="55:11" pos:end="55:15"><expr pos:start="55:11" pos:end="55:15"><name pos:start="55:11" pos:end="55:15">magic</name></expr></argument>, <argument pos:start="55:18" pos:end="55:30"><expr pos:start="55:18" pos:end="55:30"><name pos:start="55:18" pos:end="55:30"><name pos:start="55:18" pos:end="55:24">request</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:30">type</name></name></expr></argument>, <argument pos:start="55:33" pos:end="55:45"><expr pos:start="55:33" pos:end="55:45"><name pos:start="55:33" pos:end="55:45"><name pos:start="55:33" pos:end="55:39">request</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:45">from</name></name></expr></argument>, <argument pos:start="55:48" pos:end="55:59"><expr pos:start="55:48" pos:end="55:59"><name pos:start="55:48" pos:end="55:59"><name pos:start="55:48" pos:end="55:54">request</name><operator pos:start="55:55" pos:end="55:56">-&gt;</operator><name pos:start="55:57" pos:end="55:59">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:35">(<expr pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:13">magic</name> <operator pos:start="59:15" pos:end="59:16">!=</operator> <name pos:start="59:18" pos:end="59:34">NBD_REQUEST_MAGIC</name></expr>)</condition> <block pos:start="59:37" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:18">

        <expr_stmt pos:start="61:9" pos:end="61:47"><expr pos:start="61:9" pos:end="61:46"><call pos:start="61:9" pos:end="61:46"><name pos:start="61:9" pos:end="61:11">LOG</name><argument_list pos:start="61:12" pos:end="61:46">(<argument pos:start="61:13" pos:end="61:38"><expr pos:start="61:13" pos:end="61:38"><literal type="string" pos:start="61:13" pos:end="61:38">"invalid magic (got 0x%x)"</literal></expr></argument>, <argument pos:start="61:41" pos:end="61:45"><expr pos:start="61:41" pos:end="61:45"><name pos:start="61:41" pos:end="61:45">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:23"><expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:13">errno</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="69:5" pos:end="69:13">return <expr pos:start="69:12" pos:end="69:12"><literal type="number" pos:start="69:12" pos:end="69:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
