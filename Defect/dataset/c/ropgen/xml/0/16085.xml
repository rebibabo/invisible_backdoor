<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16085.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">ipvideo_decode_frame</name><parameter_list pos:start="1:32" pos:end="5:48">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:42"><decl pos:start="3:33" pos:end="3:42"><type pos:start="3:33" pos:end="3:42"><name pos:start="3:33" pos:end="3:36">void</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">data</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:58">got_frame</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:47"><decl pos:start="5:33" pos:end="5:47"><type pos:start="5:33" pos:end="5:47"><name pos:start="5:33" pos:end="5:40">AVPacket</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:47">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="143:1">{<block_content pos:start="9:5" pos:end="141:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">IpvideoContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:40">= <expr pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:29">avctx</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">AVFrame</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:18">frame</name> <init pos:start="15:20" pos:end="15:25">= <expr pos:start="15:22" pos:end="15:25"><name pos:start="15:22" pos:end="15:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">send_buffer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:20">frame_format</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:23">video_data_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:71">(<expr pos:start="27:9" pos:end="27:70"><call pos:start="27:9" pos:end="27:70"><name pos:start="27:9" pos:end="27:31">av_packet_get_side_data</name><argument_list pos:start="27:32" pos:end="27:70">(<argument pos:start="27:33" pos:end="27:37"><expr pos:start="27:33" pos:end="27:37"><name pos:start="27:33" pos:end="27:37">avpkt</name></expr></argument>, <argument pos:start="27:40" pos:end="27:63"><expr pos:start="27:40" pos:end="27:63"><name pos:start="27:40" pos:end="27:63">AV_PKT_DATA_PARAM_CHANGE</name></expr></argument>, <argument pos:start="27:66" pos:end="27:69"><expr pos:start="27:66" pos:end="27:69"><name pos:start="27:66" pos:end="27:69">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:73" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:45">

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><call pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:22">av_frame_unref</name><argument_list pos:start="29:23" pos:end="29:37">(<argument pos:start="29:24" pos:end="29:36"><expr pos:start="29:24" pos:end="29:36"><name pos:start="29:24" pos:end="29:36"><name pos:start="29:24" pos:end="29:24">s</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:36">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:22">av_frame_unref</name><argument_list pos:start="31:23" pos:end="31:44">(<argument pos:start="31:24" pos:end="31:43"><expr pos:start="31:24" pos:end="31:43"><name pos:start="31:24" pos:end="31:43"><name pos:start="31:24" pos:end="31:24">s</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:43">second_last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="39:35"><if pos:start="37:5" pos:end="39:35">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:16">buf_size</name> <operator pos:start="37:18" pos:end="37:18">&lt;</operator> <literal type="number" pos:start="37:20" pos:end="37:20">6</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:35"><block_content pos:start="39:9" pos:end="39:35">

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:16">frame_format</name>         <operator pos:start="43:26" pos:end="43:26">=</operator> <call pos:start="43:28" pos:end="43:38"><name pos:start="43:28" pos:end="43:33">AV_RL8</name><argument_list pos:start="43:34" pos:end="43:38">(<argument pos:start="43:35" pos:end="43:37"><expr pos:start="43:35" pos:end="43:37"><name pos:start="43:35" pos:end="43:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:15">send_buffer</name>          <operator pos:start="45:26" pos:end="45:26">=</operator> <call pos:start="45:28" pos:end="45:42"><name pos:start="45:28" pos:end="45:33">AV_RL8</name><argument_list pos:start="45:34" pos:end="45:42">(<argument pos:start="45:35" pos:end="45:41"><expr pos:start="45:35" pos:end="45:41"><name pos:start="45:35" pos:end="45:37">buf</name> <operator pos:start="45:39" pos:end="45:39">+</operator> <literal type="number" pos:start="45:41" pos:end="45:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:44"><expr pos:start="47:5" pos:end="47:43"><name pos:start="47:5" pos:end="47:19">video_data_size</name>      <operator pos:start="47:26" pos:end="47:26">=</operator> <call pos:start="47:28" pos:end="47:43"><name pos:start="47:28" pos:end="47:34">AV_RL16</name><argument_list pos:start="47:35" pos:end="47:43">(<argument pos:start="47:36" pos:end="47:42"><expr pos:start="47:36" pos:end="47:42"><name pos:start="47:36" pos:end="47:38">buf</name> <operator pos:start="47:40" pos:end="47:40">+</operator> <literal type="number" pos:start="47:42" pos:end="47:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:24">decoding_map_size</name></name> <operator pos:start="49:26" pos:end="49:26">=</operator> <call pos:start="49:28" pos:end="49:43"><name pos:start="49:28" pos:end="49:34">AV_RL16</name><argument_list pos:start="49:35" pos:end="49:43">(<argument pos:start="49:36" pos:end="49:42"><expr pos:start="49:36" pos:end="49:42"><name pos:start="49:36" pos:end="49:38">buf</name> <operator pos:start="49:40" pos:end="49:40">+</operator> <literal type="number" pos:start="49:42" pos:end="49:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="55:85"><if pos:start="53:5" pos:end="55:85">if <condition pos:start="53:8" pos:end="53:29">(<expr pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:20">frame_format</name> <operator pos:start="53:22" pos:end="53:23">!=</operator> <literal type="number" pos:start="53:25" pos:end="53:28">0x11</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:85"><block_content pos:start="55:9" pos:end="55:85">

        <expr_stmt pos:start="55:9" pos:end="55:85"><expr pos:start="55:9" pos:end="55:84"><call pos:start="55:9" pos:end="55:84"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:84">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:37" pos:end="55:69"><expr pos:start="55:37" pos:end="55:69"><literal type="string" pos:start="55:37" pos:end="55:69">"Frame type 0x%02X unsupported\n"</literal></expr></argument>, <argument pos:start="55:72" pos:end="55:83"><expr pos:start="55:72" pos:end="55:83"><name pos:start="55:72" pos:end="55:83">frame_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:31">(<expr pos:start="59:9" pos:end="59:30"><operator pos:start="59:9" pos:end="59:9">!</operator> <name pos:start="59:11" pos:end="59:30"><name pos:start="59:11" pos:end="59:11">s</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:30">decoding_map_size</name></name></expr>)</condition> <block pos:start="59:33" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:35">

        <expr_stmt pos:start="61:9" pos:end="61:60"><expr pos:start="61:9" pos:end="61:59"><call pos:start="61:9" pos:end="61:59"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:59">(<argument pos:start="61:16" pos:end="61:20"><expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20">avctx</name></expr></argument>, <argument pos:start="61:23" pos:end="61:34"><expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:37" pos:end="61:58"><expr pos:start="61:37" pos:end="61:58"><literal type="string" pos:start="61:37" pos:end="61:58">"Empty decoding map\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:35">return <expr pos:start="63:16" pos:end="63:34"><name pos:start="63:16" pos:end="63:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:63"><expr pos:start="69:5" pos:end="69:62"><call pos:start="69:5" pos:end="69:62"><name pos:start="69:5" pos:end="69:20">bytestream2_init</name><argument_list pos:start="69:21" pos:end="69:62">(<argument pos:start="69:22" pos:end="69:35"><expr pos:start="69:22" pos:end="69:35"><operator pos:start="69:22" pos:end="69:22">&amp;</operator><name pos:start="69:23" pos:end="69:35"><name pos:start="69:23" pos:end="69:23">s</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:35">stream_ptr</name></name></expr></argument>, <argument pos:start="69:38" pos:end="69:44"><expr pos:start="69:38" pos:end="69:44"><name pos:start="69:38" pos:end="69:40">buf</name> <operator pos:start="69:42" pos:end="69:42">+</operator> <literal type="number" pos:start="69:44" pos:end="69:44">6</literal></expr></argument>, <argument pos:start="69:47" pos:end="69:61"><expr pos:start="69:47" pos:end="69:61"><name pos:start="69:47" pos:end="69:61">video_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:67">/* decoding map contains 4 bits of information per 8x8 block */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:48"><expr pos:start="75:5" pos:end="75:47"><name pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:19">decoding_map</name></name> <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:25">buf</name> <operator pos:start="75:27" pos:end="75:27">+</operator> <literal type="number" pos:start="75:29" pos:end="75:31">6</literal> <operator pos:start="75:31" pos:end="75:31">+</operator> <name pos:start="75:33" pos:end="75:47">video_data_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:45">/* ensure we can't overread the packet */</comment>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:62">(<expr pos:start="81:9" pos:end="81:61"><name pos:start="81:9" pos:end="81:16">buf_size</name> <operator pos:start="81:18" pos:end="81:18">&lt;</operator> <literal type="number" pos:start="81:20" pos:end="81:22">6</literal> <operator pos:start="81:22" pos:end="81:22">+</operator> <name pos:start="81:24" pos:end="81:43"><name pos:start="81:24" pos:end="81:24">s</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:43">decoding_map_size</name></name> <operator pos:start="81:45" pos:end="81:45">+</operator> <name pos:start="81:47" pos:end="81:61">video_data_size</name></expr>)</condition> <block pos:start="81:64" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:35">

        <expr_stmt pos:start="83:9" pos:end="83:64"><expr pos:start="83:9" pos:end="83:63"><call pos:start="83:9" pos:end="83:63"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:63">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:62"><expr pos:start="83:37" pos:end="83:62"><literal type="string" pos:start="83:37" pos:end="83:62">"Invalid IP packet size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:35">return <expr pos:start="85:16" pos:end="85:34"><name pos:start="85:16" pos:end="85:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="93:19"><if pos:start="91:5" pos:end="93:19">if <condition pos:start="91:8" pos:end="91:72">(<expr pos:start="91:9" pos:end="91:71"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:12">ret</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:66"><name pos:start="91:16" pos:end="91:28">ff_get_buffer</name><argument_list pos:start="91:29" pos:end="91:66">(<argument pos:start="91:30" pos:end="91:34"><expr pos:start="91:30" pos:end="91:34"><name pos:start="91:30" pos:end="91:34">avctx</name></expr></argument>, <argument pos:start="91:37" pos:end="91:41"><expr pos:start="91:37" pos:end="91:41"><name pos:start="91:37" pos:end="91:41">frame</name></expr></argument>, <argument pos:start="91:44" pos:end="91:65"><expr pos:start="91:44" pos:end="91:65"><name pos:start="91:44" pos:end="91:65">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="91:67" pos:end="91:67">)</operator> <operator pos:start="91:69" pos:end="91:69">&lt;</operator> <literal type="number" pos:start="91:71" pos:end="91:71">0</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:19"><block_content pos:start="93:9" pos:end="93:19">

        <return pos:start="93:9" pos:end="93:19">return <expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="115:5"><if pos:start="97:5" pos:end="115:5">if <condition pos:start="97:8" pos:end="97:21">(<expr pos:start="97:9" pos:end="97:20"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:20"><name pos:start="97:10" pos:end="97:10">s</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:20">is_16bpp</name></name></expr>)</condition> <block pos:start="97:23" pos:end="115:5">{<block_content pos:start="99:9" pos:end="113:9">

        <decl_stmt pos:start="99:9" pos:end="99:17"><decl pos:start="99:9" pos:end="99:16"><type pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">int</name></type> <name pos:start="99:13" pos:end="99:16">size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="101:9" pos:end="101:88"><decl pos:start="101:9" pos:end="101:87"><type pos:start="101:9" pos:end="101:23"><specifier pos:start="101:9" pos:end="101:13">const</specifier> <name pos:start="101:15" pos:end="101:21">uint8_t</name> <modifier pos:start="101:23" pos:end="101:23">*</modifier></type><name pos:start="101:24" pos:end="101:26">pal</name> <init pos:start="101:28" pos:end="101:87">= <expr pos:start="101:30" pos:end="101:87"><call pos:start="101:30" pos:end="101:87"><name pos:start="101:30" pos:end="101:52">av_packet_get_side_data</name><argument_list pos:start="101:53" pos:end="101:87">(<argument pos:start="101:54" pos:end="101:58"><expr pos:start="101:54" pos:end="101:58"><name pos:start="101:54" pos:end="101:58">avpkt</name></expr></argument>, <argument pos:start="101:61" pos:end="101:79"><expr pos:start="101:61" pos:end="101:79"><name pos:start="101:61" pos:end="101:79">AV_PKT_DATA_PALETTE</name></expr></argument>, <argument pos:start="101:82" pos:end="101:86"><expr pos:start="101:82" pos:end="101:86"><operator pos:start="101:82" pos:end="101:82">&amp;</operator><name pos:start="101:83" pos:end="101:86">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="103:9" pos:end="113:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:42">(<expr pos:start="103:13" pos:end="103:41"><name pos:start="103:13" pos:end="103:15">pal</name> <operator pos:start="103:17" pos:end="103:18">&amp;&amp;</operator> <name pos:start="103:20" pos:end="103:23">size</name> <operator pos:start="103:25" pos:end="103:26">==</operator> <name pos:start="103:28" pos:end="103:41">AVPALETTE_SIZE</name></expr>)</condition> <block pos:start="103:44" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:48">

            <expr_stmt pos:start="105:13" pos:end="105:43"><expr pos:start="105:13" pos:end="105:42"><name pos:start="105:13" pos:end="105:38"><name pos:start="105:13" pos:end="105:17">frame</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:38">palette_has_changed</name></name> <operator pos:start="105:40" pos:end="105:40">=</operator> <literal type="number" pos:start="105:42" pos:end="105:42">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:48"><expr pos:start="107:13" pos:end="107:47"><call pos:start="107:13" pos:end="107:47"><name pos:start="107:13" pos:end="107:18">memcpy</name><argument_list pos:start="107:19" pos:end="107:47">(<argument pos:start="107:20" pos:end="107:25"><expr pos:start="107:20" pos:end="107:25"><name pos:start="107:20" pos:end="107:25"><name pos:start="107:20" pos:end="107:20">s</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:25">pal</name></name></expr></argument>, <argument pos:start="107:28" pos:end="107:30"><expr pos:start="107:28" pos:end="107:30"><name pos:start="107:28" pos:end="107:30">pal</name></expr></argument>, <argument pos:start="107:33" pos:end="107:46"><expr pos:start="107:33" pos:end="107:46"><name pos:start="107:33" pos:end="107:46">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="109:11" pos:end="113:9">else if <condition pos:start="109:19" pos:end="109:23">(<expr pos:start="109:20" pos:end="109:22"><name pos:start="109:20" pos:end="109:22">pal</name></expr>)</condition> <block pos:start="109:25" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:76">

            <expr_stmt pos:start="111:13" pos:end="111:76"><expr pos:start="111:13" pos:end="111:75"><call pos:start="111:13" pos:end="111:75"><name pos:start="111:13" pos:end="111:18">av_log</name><argument_list pos:start="111:19" pos:end="111:75">(<argument pos:start="111:20" pos:end="111:24"><expr pos:start="111:20" pos:end="111:24"><name pos:start="111:20" pos:end="111:24">avctx</name></expr></argument>, <argument pos:start="111:27" pos:end="111:38"><expr pos:start="111:27" pos:end="111:38"><name pos:start="111:27" pos:end="111:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:41" pos:end="111:68"><expr pos:start="111:41" pos:end="111:68"><literal type="string" pos:start="111:41" pos:end="111:68">"Palette size %d is wrong\n"</literal></expr></argument>, <argument pos:start="111:71" pos:end="111:74"><expr pos:start="111:71" pos:end="111:74"><name pos:start="111:71" pos:end="111:74">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:37"><expr pos:start="119:5" pos:end="119:36"><call pos:start="119:5" pos:end="119:36"><name pos:start="119:5" pos:end="119:26">ipvideo_decode_opcodes</name><argument_list pos:start="119:27" pos:end="119:36">(<argument pos:start="119:28" pos:end="119:28"><expr pos:start="119:28" pos:end="119:28"><name pos:start="119:28" pos:end="119:28">s</name></expr></argument>, <argument pos:start="119:31" pos:end="119:35"><expr pos:start="119:31" pos:end="119:35"><name pos:start="119:31" pos:end="119:35">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:29"><expr pos:start="123:5" pos:end="123:28"><operator pos:start="123:5" pos:end="123:5">*</operator><name pos:start="123:6" pos:end="123:14">got_frame</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <name pos:start="123:18" pos:end="123:28">send_buffer</name></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:24">/* shuffle frames */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:41"><expr pos:start="129:5" pos:end="129:40"><call pos:start="129:5" pos:end="129:40"><name pos:start="129:5" pos:end="129:18">av_frame_unref</name><argument_list pos:start="129:19" pos:end="129:40">(<argument pos:start="129:20" pos:end="129:39"><expr pos:start="129:20" pos:end="129:39"><name pos:start="129:20" pos:end="129:39"><name pos:start="129:20" pos:end="129:20">s</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:39">second_last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:58"><expr pos:start="131:5" pos:end="131:57"><call pos:start="131:5" pos:end="131:57"><name pos:start="131:5" pos:end="131:10">FFSWAP</name><argument_list pos:start="131:11" pos:end="131:57">(<argument pos:start="131:12" pos:end="131:19"><expr pos:start="131:12" pos:end="131:19"><name pos:start="131:12" pos:end="131:18">AVFrame</name><operator pos:start="131:19" pos:end="131:19">*</operator></expr></argument>, <argument pos:start="131:22" pos:end="131:41"><expr pos:start="131:22" pos:end="131:41"><name pos:start="131:22" pos:end="131:41"><name pos:start="131:22" pos:end="131:22">s</name><operator pos:start="131:23" pos:end="131:24">-&gt;</operator><name pos:start="131:25" pos:end="131:41">second_last_frame</name></name></expr></argument>, <argument pos:start="131:44" pos:end="131:56"><expr pos:start="131:44" pos:end="131:56"><name pos:start="131:44" pos:end="131:56"><name pos:start="131:44" pos:end="131:44">s</name><operator pos:start="131:45" pos:end="131:46">-&gt;</operator><name pos:start="131:47" pos:end="131:56">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="135:19"><if pos:start="133:5" pos:end="135:19">if <condition pos:start="133:8" pos:end="133:55">(<expr pos:start="133:9" pos:end="133:54"><operator pos:start="133:9" pos:end="133:9">(</operator><name pos:start="133:10" pos:end="133:12">ret</name> <operator pos:start="133:14" pos:end="133:14">=</operator> <call pos:start="133:16" pos:end="133:49"><name pos:start="133:16" pos:end="133:27">av_frame_ref</name><argument_list pos:start="133:28" pos:end="133:49">(<argument pos:start="133:29" pos:end="133:41"><expr pos:start="133:29" pos:end="133:41"><name pos:start="133:29" pos:end="133:41"><name pos:start="133:29" pos:end="133:29">s</name><operator pos:start="133:30" pos:end="133:31">-&gt;</operator><name pos:start="133:32" pos:end="133:41">last_frame</name></name></expr></argument>, <argument pos:start="133:44" pos:end="133:48"><expr pos:start="133:44" pos:end="133:48"><name pos:start="133:44" pos:end="133:48">frame</name></expr></argument>)</argument_list></call><operator pos:start="133:50" pos:end="133:50">)</operator> <operator pos:start="133:52" pos:end="133:52">&lt;</operator> <literal type="number" pos:start="133:54" pos:end="133:54">0</literal></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:19"><block_content pos:start="135:9" pos:end="135:19">

        <return pos:start="135:9" pos:end="135:19">return <expr pos:start="135:16" pos:end="135:18"><name pos:start="135:16" pos:end="135:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:56">/* report that the buffer was completely consumed */</comment>

    <return pos:start="141:5" pos:end="141:20">return <expr pos:start="141:12" pos:end="141:19"><name pos:start="141:12" pos:end="141:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
