<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10380.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">exynos4210_pwm_write</name><parameter_list pos:start="1:33" pos:end="3:38">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:72"><decl pos:start="1:48" pos:end="1:72"><type pos:start="1:48" pos:end="1:72"><name pos:start="1:48" pos:end="1:65">target_phys_addr_t</name></type> <name pos:start="1:67" pos:end="1:72">offset</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:22"><decl pos:start="3:9" pos:end="3:22"><type pos:start="3:9" pos:end="3:22"><name pos:start="3:9" pos:end="3:16">uint64_t</name></type> <name pos:start="3:18" pos:end="3:22">value</name></decl></parameter>, <parameter pos:start="3:25" pos:end="3:37"><decl pos:start="3:25" pos:end="3:37"><type pos:start="3:25" pos:end="3:37"><name pos:start="3:25" pos:end="3:32">unsigned</name></type> <name pos:start="3:34" pos:end="3:37">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="173:1">{<block_content pos:start="7:5" pos:end="171:5">

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">Exynos4210PWMState</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">s</name> <init pos:start="7:27" pos:end="7:56">= <expr pos:start="7:29" pos:end="7:56"><operator pos:start="7:29" pos:end="7:29">(</operator><name pos:start="7:30" pos:end="7:47">Exynos4210PWMState</name> <operator pos:start="7:49" pos:end="7:49">*</operator><operator pos:start="7:50" pos:end="7:50">)</operator><name pos:start="7:51" pos:end="7:56">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">new_val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <switch pos:start="17:5" pos:end="171:5">switch <condition pos:start="17:12" pos:end="17:19">(<expr pos:start="17:13" pos:end="17:18"><name pos:start="17:13" pos:end="17:18">offset</name></expr>)</condition> <block pos:start="17:21" pos:end="171:5">{<block_content pos:start="19:5" pos:end="167:14">

    <case pos:start="19:5" pos:end="19:15">case <expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:14">TCFG0</name></expr>:</case> <case pos:start="19:17" pos:end="19:27">case <expr pos:start="19:22" pos:end="19:26"><name pos:start="19:22" pos:end="19:26">TCFG1</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:13">index</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <operator pos:start="21:17" pos:end="21:17">(</operator><name pos:start="21:18" pos:end="21:23">offset</name> <operator pos:start="21:25" pos:end="21:25">-</operator> <name pos:start="21:27" pos:end="21:31">TCFG0</name><operator pos:start="21:32" pos:end="21:32">)</operator> <operator pos:start="21:34" pos:end="21:35">&gt;&gt;</operator> <literal type="number" pos:start="21:37" pos:end="21:37">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:35"><expr pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:19">reg_tcfg</name><index pos:start="23:20" pos:end="23:26">[<expr pos:start="23:21" pos:end="23:25"><name pos:start="23:21" pos:end="23:25">index</name></expr>]</index></name> <operator pos:start="23:28" pos:end="23:28">=</operator> <name pos:start="23:30" pos:end="23:34">value</name></expr>;</expr_stmt>



        <comment type="block" pos:start="27:9" pos:end="27:39">/* update timers frequencies */</comment>

        <for pos:start="29:9" pos:end="33:9">for <control pos:start="29:13" pos:end="29:55">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">i</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:50"><expr pos:start="29:21" pos:end="29:49"><name pos:start="29:21" pos:end="29:21">i</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <name pos:start="29:25" pos:end="29:49">EXYNOS4210_PWM_TIMERS_NUM</name></expr>;</condition> <incr pos:start="29:52" pos:end="29:54"><expr pos:start="29:52" pos:end="29:54"><name pos:start="29:52" pos:end="29:52">i</name><operator pos:start="29:53" pos:end="29:54">++</operator></expr></incr>)</control> <block pos:start="29:57" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:58">

            <expr_stmt pos:start="31:13" pos:end="31:58"><expr pos:start="31:13" pos:end="31:57"><call pos:start="31:13" pos:end="31:57"><name pos:start="31:13" pos:end="31:38">exynos4210_pwm_update_freq</name><argument_list pos:start="31:39" pos:end="31:57">(<argument pos:start="31:40" pos:end="31:40"><expr pos:start="31:40" pos:end="31:40"><name pos:start="31:40" pos:end="31:40">s</name></expr></argument>, <argument pos:start="31:43" pos:end="31:56"><expr pos:start="31:43" pos:end="31:56"><name pos:start="31:43" pos:end="31:53"><name pos:start="31:43" pos:end="31:43">s</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:50">timer</name><index pos:start="31:51" pos:end="31:53">[<expr pos:start="31:52" pos:end="31:52"><name pos:start="31:52" pos:end="31:52">i</name></expr>]</index></name><operator pos:start="31:54" pos:end="31:54">.</operator><name pos:start="31:55" pos:end="31:56">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="35:9" pos:end="35:14">break;</break>



    <case pos:start="39:5" pos:end="39:14">case <expr pos:start="39:10" pos:end="39:13"><name pos:start="39:10" pos:end="39:13">TCON</name></expr>:</case>

        <for pos:start="41:9" pos:end="99:9">for <control pos:start="41:13" pos:end="41:55">(<init pos:start="41:14" pos:end="41:19"><expr pos:start="41:14" pos:end="41:18"><name pos:start="41:14" pos:end="41:14">i</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <literal type="number" pos:start="41:18" pos:end="41:18">0</literal></expr>;</init> <condition pos:start="41:21" pos:end="41:50"><expr pos:start="41:21" pos:end="41:49"><name pos:start="41:21" pos:end="41:21">i</name> <operator pos:start="41:23" pos:end="41:23">&lt;</operator> <name pos:start="41:25" pos:end="41:49">EXYNOS4210_PWM_TIMERS_NUM</name></expr>;</condition> <incr pos:start="41:52" pos:end="41:54"><expr pos:start="41:52" pos:end="41:54"><name pos:start="41:52" pos:end="41:52">i</name><operator pos:start="41:53" pos:end="41:54">++</operator></expr></incr>)</control> <block pos:start="41:57" pos:end="99:9">{<block_content pos:start="43:13" pos:end="97:13">

            <if_stmt pos:start="43:13" pos:end="69:13"><if pos:start="43:13" pos:end="69:13">if <condition pos:start="43:16" pos:end="45:53">(<expr pos:start="43:17" pos:end="45:52"><operator pos:start="43:17" pos:end="43:17">(</operator><name pos:start="43:18" pos:end="43:22">value</name> <operator pos:start="43:24" pos:end="43:24">&amp;</operator> <call pos:start="43:26" pos:end="43:49"><name pos:start="43:26" pos:end="43:46">TCON_TIMER_MANUAL_UPD</name><argument_list pos:start="43:47" pos:end="43:49">(<argument pos:start="43:48" pos:end="43:48"><expr pos:start="43:48" pos:end="43:48"><name pos:start="43:48" pos:end="43:48">i</name></expr></argument>)</argument_list></call><operator pos:start="43:50" pos:end="43:50">)</operator> <operator pos:start="43:52" pos:end="43:52">&gt;</operator>

            <operator pos:start="45:13" pos:end="45:13">(</operator><name pos:start="45:14" pos:end="45:24"><name pos:start="45:14" pos:end="45:14">s</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:24">reg_tcon</name></name> <operator pos:start="45:26" pos:end="45:26">&amp;</operator> <call pos:start="45:28" pos:end="45:51"><name pos:start="45:28" pos:end="45:48">TCON_TIMER_MANUAL_UPD</name><argument_list pos:start="45:49" pos:end="45:51">(<argument pos:start="45:50" pos:end="45:50"><expr pos:start="45:50" pos:end="45:50"><name pos:start="45:50" pos:end="45:50">i</name></expr></argument>)</argument_list></call><operator pos:start="45:52" pos:end="45:52">)</operator></expr>)</condition> <block pos:start="45:55" pos:end="69:13">{<block_content pos:start="63:17" pos:end="67:47">

                <comment type="block" pos:start="47:17" pos:end="53:19">/*

                 * TCNTB and TCMPB are loaded into TCNT and TCMP.

                 * Update timers.

                 */</comment>



                <comment type="block" pos:start="57:17" pos:end="61:31">/* this will start timer to run, this ok, because

                 * during processing start bit timer will be stopped

                 * if needed */</comment>

                <expr_stmt pos:start="63:17" pos:end="63:76"><expr pos:start="63:17" pos:end="63:75"><call pos:start="63:17" pos:end="63:75"><name pos:start="63:17" pos:end="63:32">ptimer_set_count</name><argument_list pos:start="63:33" pos:end="63:75">(<argument pos:start="63:34" pos:end="63:51"><expr pos:start="63:34" pos:end="63:51"><name pos:start="63:34" pos:end="63:44"><name pos:start="63:34" pos:end="63:34">s</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:41">timer</name><index pos:start="63:42" pos:end="63:44">[<expr pos:start="63:43" pos:end="63:43"><name pos:start="63:43" pos:end="63:43">i</name></expr>]</index></name><operator pos:start="63:45" pos:end="63:45">.</operator><name pos:start="63:46" pos:end="63:51">ptimer</name></expr></argument>, <argument pos:start="63:54" pos:end="63:74"><expr pos:start="63:54" pos:end="63:74"><name pos:start="63:54" pos:end="63:64"><name pos:start="63:54" pos:end="63:54">s</name><operator pos:start="63:55" pos:end="63:56">-&gt;</operator><name pos:start="63:57" pos:end="63:61">timer</name><index pos:start="63:62" pos:end="63:64">[<expr pos:start="63:63" pos:end="63:63"><name pos:start="63:63" pos:end="63:63">i</name></expr>]</index></name><operator pos:start="63:65" pos:end="63:65">.</operator><name pos:start="63:66" pos:end="63:74">reg_tcntb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="67:47"><expr pos:start="65:17" pos:end="67:46"><call pos:start="65:17" pos:end="67:46"><name pos:start="65:17" pos:end="65:23">DPRINTF</name><argument_list pos:start="65:24" pos:end="67:46">(<argument pos:start="65:25" pos:end="65:52"><expr pos:start="65:25" pos:end="65:52"><literal type="string" pos:start="65:25" pos:end="65:52">"set timer %d count to %x\n"</literal></expr></argument>, <argument pos:start="65:55" pos:end="65:55"><expr pos:start="65:55" pos:end="65:55"><name pos:start="65:55" pos:end="65:55">i</name></expr></argument>,

                        <argument pos:start="67:25" pos:end="67:45"><expr pos:start="67:25" pos:end="67:45"><name pos:start="67:25" pos:end="67:35"><name pos:start="67:25" pos:end="67:25">s</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:32">timer</name><index pos:start="67:33" pos:end="67:35">[<expr pos:start="67:34" pos:end="67:34"><name pos:start="67:34" pos:end="67:34">i</name></expr>]</index></name><operator pos:start="67:36" pos:end="67:36">.</operator><name pos:start="67:37" pos:end="67:45">reg_tcntb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="73:13" pos:end="83:13"><if pos:start="73:13" pos:end="83:13">if <condition pos:start="73:16" pos:end="75:48">(<expr pos:start="73:17" pos:end="75:47"><operator pos:start="73:17" pos:end="73:17">(</operator><name pos:start="73:18" pos:end="73:22">value</name> <operator pos:start="73:24" pos:end="73:24">&amp;</operator> <call pos:start="73:26" pos:end="73:44"><name pos:start="73:26" pos:end="73:41">TCON_TIMER_START</name><argument_list pos:start="73:42" pos:end="73:44">(<argument pos:start="73:43" pos:end="73:43"><expr pos:start="73:43" pos:end="73:43"><name pos:start="73:43" pos:end="73:43">i</name></expr></argument>)</argument_list></call><operator pos:start="73:45" pos:end="73:45">)</operator> <operator pos:start="73:47" pos:end="73:47">&gt;</operator>

            <operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:24"><name pos:start="75:14" pos:end="75:14">s</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:24">reg_tcon</name></name> <operator pos:start="75:26" pos:end="75:26">&amp;</operator> <call pos:start="75:28" pos:end="75:46"><name pos:start="75:28" pos:end="75:43">TCON_TIMER_START</name><argument_list pos:start="75:44" pos:end="75:46">(<argument pos:start="75:45" pos:end="75:45"><expr pos:start="75:45" pos:end="75:45"><name pos:start="75:45" pos:end="75:45">i</name></expr></argument>)</argument_list></call><operator pos:start="75:47" pos:end="75:47">)</operator></expr>)</condition> <block pos:start="75:50" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:45">

                <comment type="block" pos:start="77:17" pos:end="77:38">/* changed to start */</comment>

                <expr_stmt pos:start="79:17" pos:end="79:50"><expr pos:start="79:17" pos:end="79:49"><call pos:start="79:17" pos:end="79:49"><name pos:start="79:17" pos:end="79:26">ptimer_run</name><argument_list pos:start="79:27" pos:end="79:49">(<argument pos:start="79:28" pos:end="79:45"><expr pos:start="79:28" pos:end="79:45"><name pos:start="79:28" pos:end="79:38"><name pos:start="79:28" pos:end="79:28">s</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:35">timer</name><index pos:start="79:36" pos:end="79:38">[<expr pos:start="79:37" pos:end="79:37"><name pos:start="79:37" pos:end="79:37">i</name></expr>]</index></name><operator pos:start="79:39" pos:end="79:39">.</operator><name pos:start="79:40" pos:end="79:45">ptimer</name></expr></argument>, <argument pos:start="79:48" pos:end="79:48"><expr pos:start="79:48" pos:end="79:48"><literal type="number" pos:start="79:48" pos:end="79:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:45"><expr pos:start="81:17" pos:end="81:44"><call pos:start="81:17" pos:end="81:44"><name pos:start="81:17" pos:end="81:23">DPRINTF</name><argument_list pos:start="81:24" pos:end="81:44">(<argument pos:start="81:25" pos:end="81:40"><expr pos:start="81:25" pos:end="81:40"><literal type="string" pos:start="81:25" pos:end="81:40">"run timer %d\n"</literal></expr></argument>, <argument pos:start="81:43" pos:end="81:43"><expr pos:start="81:43" pos:end="81:43"><name pos:start="81:43" pos:end="81:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="87:13" pos:end="97:13"><if pos:start="87:13" pos:end="97:13">if <condition pos:start="87:16" pos:end="89:56">(<expr pos:start="87:17" pos:end="89:55"><operator pos:start="87:17" pos:end="87:17">(</operator><name pos:start="87:18" pos:end="87:22">value</name> <operator pos:start="87:24" pos:end="87:24">&amp;</operator> <call pos:start="87:26" pos:end="87:44"><name pos:start="87:26" pos:end="87:41">TCON_TIMER_START</name><argument_list pos:start="87:42" pos:end="87:44">(<argument pos:start="87:43" pos:end="87:43"><expr pos:start="87:43" pos:end="87:43"><name pos:start="87:43" pos:end="87:43">i</name></expr></argument>)</argument_list></call><operator pos:start="87:45" pos:end="87:45">)</operator> <operator pos:start="87:47" pos:end="87:47">&lt;</operator>

                    <operator pos:start="89:21" pos:end="89:21">(</operator><name pos:start="89:22" pos:end="89:32"><name pos:start="89:22" pos:end="89:22">s</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:32">reg_tcon</name></name> <operator pos:start="89:34" pos:end="89:34">&amp;</operator> <call pos:start="89:36" pos:end="89:54"><name pos:start="89:36" pos:end="89:51">TCON_TIMER_START</name><argument_list pos:start="89:52" pos:end="89:54">(<argument pos:start="89:53" pos:end="89:53"><expr pos:start="89:53" pos:end="89:53"><name pos:start="89:53" pos:end="89:53">i</name></expr></argument>)</argument_list></call><operator pos:start="89:55" pos:end="89:55">)</operator></expr>)</condition> <block pos:start="89:58" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:46">

                <comment type="block" pos:start="91:17" pos:end="91:37">/* changed to stop */</comment>

                <expr_stmt pos:start="93:17" pos:end="93:48"><expr pos:start="93:17" pos:end="93:47"><call pos:start="93:17" pos:end="93:47"><name pos:start="93:17" pos:end="93:27">ptimer_stop</name><argument_list pos:start="93:28" pos:end="93:47">(<argument pos:start="93:29" pos:end="93:46"><expr pos:start="93:29" pos:end="93:46"><name pos:start="93:29" pos:end="93:39"><name pos:start="93:29" pos:end="93:29">s</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:36">timer</name><index pos:start="93:37" pos:end="93:39">[<expr pos:start="93:38" pos:end="93:38"><name pos:start="93:38" pos:end="93:38">i</name></expr>]</index></name><operator pos:start="93:40" pos:end="93:40">.</operator><name pos:start="93:41" pos:end="93:46">ptimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:46"><expr pos:start="95:17" pos:end="95:45"><call pos:start="95:17" pos:end="95:45"><name pos:start="95:17" pos:end="95:23">DPRINTF</name><argument_list pos:start="95:24" pos:end="95:45">(<argument pos:start="95:25" pos:end="95:41"><expr pos:start="95:25" pos:end="95:41"><literal type="string" pos:start="95:25" pos:end="95:41">"stop timer %d\n"</literal></expr></argument>, <argument pos:start="95:44" pos:end="95:44"><expr pos:start="95:44" pos:end="95:44"><name pos:start="95:44" pos:end="95:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="101:9" pos:end="101:28"><expr pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:19">reg_tcon</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:27">value</name></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>



    <case pos:start="107:5" pos:end="107:16">case <expr pos:start="107:10" pos:end="107:15"><name pos:start="107:10" pos:end="107:15">TCNTB0</name></expr>:</case> <case pos:start="107:18" pos:end="107:29">case <expr pos:start="107:23" pos:end="107:28"><name pos:start="107:23" pos:end="107:28">TCNTB1</name></expr>:</case>

    <case pos:start="109:5" pos:end="109:16">case <expr pos:start="109:10" pos:end="109:15"><name pos:start="109:10" pos:end="109:15">TCNTB2</name></expr>:</case> <case pos:start="109:18" pos:end="109:29">case <expr pos:start="109:23" pos:end="109:28"><name pos:start="109:23" pos:end="109:28">TCNTB3</name></expr>:</case> <case pos:start="109:31" pos:end="109:42">case <expr pos:start="109:36" pos:end="109:41"><name pos:start="109:36" pos:end="109:41">TCNTB4</name></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:40"><expr pos:start="111:9" pos:end="111:39"><name pos:start="111:9" pos:end="111:13">index</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <operator pos:start="111:17" pos:end="111:17">(</operator><name pos:start="111:18" pos:end="111:23">offset</name> <operator pos:start="111:25" pos:end="111:25">-</operator> <name pos:start="111:27" pos:end="111:32">TCNTB0</name><operator pos:start="111:33" pos:end="111:33">)</operator> <operator pos:start="111:35" pos:end="111:35">/</operator> <literal type="number" pos:start="111:37" pos:end="111:39">0xC</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:42"><expr pos:start="113:9" pos:end="113:41"><name pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:16">timer</name><index pos:start="113:17" pos:end="113:23">[<expr pos:start="113:18" pos:end="113:22"><name pos:start="113:18" pos:end="113:22">index</name></expr>]</index></name><operator pos:start="113:24" pos:end="113:24">.</operator><name pos:start="113:25" pos:end="113:33">reg_tcntb</name> <operator pos:start="113:35" pos:end="113:35">=</operator> <name pos:start="113:37" pos:end="113:41">value</name></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>



    <case pos:start="119:5" pos:end="119:16">case <expr pos:start="119:10" pos:end="119:15"><name pos:start="119:10" pos:end="119:15">TCMPB0</name></expr>:</case> <case pos:start="119:18" pos:end="119:29">case <expr pos:start="119:23" pos:end="119:28"><name pos:start="119:23" pos:end="119:28">TCMPB1</name></expr>:</case>

    <case pos:start="121:5" pos:end="121:16">case <expr pos:start="121:10" pos:end="121:15"><name pos:start="121:10" pos:end="121:15">TCMPB2</name></expr>:</case> <case pos:start="121:18" pos:end="121:29">case <expr pos:start="121:23" pos:end="121:28"><name pos:start="121:23" pos:end="121:28">TCMPB3</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:40"><expr pos:start="123:9" pos:end="123:39"><name pos:start="123:9" pos:end="123:13">index</name> <operator pos:start="123:15" pos:end="123:15">=</operator> <operator pos:start="123:17" pos:end="123:17">(</operator><name pos:start="123:18" pos:end="123:23">offset</name> <operator pos:start="123:25" pos:end="123:25">-</operator> <name pos:start="123:27" pos:end="123:32">TCMPB0</name><operator pos:start="123:33" pos:end="123:33">)</operator> <operator pos:start="123:35" pos:end="123:35">/</operator> <literal type="number" pos:start="123:37" pos:end="123:39">0xC</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:42"><expr pos:start="125:9" pos:end="125:41"><name pos:start="125:9" pos:end="125:23"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:16">timer</name><index pos:start="125:17" pos:end="125:23">[<expr pos:start="125:18" pos:end="125:22"><name pos:start="125:18" pos:end="125:22">index</name></expr>]</index></name><operator pos:start="125:24" pos:end="125:24">.</operator><name pos:start="125:25" pos:end="125:33">reg_tcmpb</name> <operator pos:start="125:35" pos:end="125:35">=</operator> <name pos:start="125:37" pos:end="125:41">value</name></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>



    <case pos:start="131:5" pos:end="131:20">case <expr pos:start="131:10" pos:end="131:19"><name pos:start="131:10" pos:end="131:19">TINT_CSTAT</name></expr>:</case>

        <expr_stmt pos:start="133:9" pos:end="133:63"><expr pos:start="133:9" pos:end="133:62"><name pos:start="133:9" pos:end="133:15">new_val</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <operator pos:start="133:19" pos:end="133:19">(</operator><name pos:start="133:20" pos:end="133:36"><name pos:start="133:20" pos:end="133:20">s</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:36">reg_tint_cstat</name></name> <operator pos:start="133:38" pos:end="133:38">&amp;</operator> <literal type="number" pos:start="133:40" pos:end="133:44">0x3E0</literal><operator pos:start="133:45" pos:end="133:45">)</operator> <operator pos:start="133:47" pos:end="133:47">+</operator> <operator pos:start="133:49" pos:end="133:49">(</operator><literal type="number" pos:start="133:50" pos:end="133:53">0x1F</literal> <operator pos:start="133:55" pos:end="133:55">&amp;</operator> <name pos:start="133:57" pos:end="133:61">value</name><operator pos:start="133:62" pos:end="133:62">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:36"><expr pos:start="135:9" pos:end="135:35"><name pos:start="135:9" pos:end="135:15">new_val</name> <operator pos:start="135:17" pos:end="135:18">&amp;=</operator> <operator pos:start="135:20" pos:end="135:20">~</operator><operator pos:start="135:21" pos:end="135:21">(</operator><literal type="number" pos:start="135:22" pos:end="135:26">0x3E0</literal> <operator pos:start="135:28" pos:end="135:28">&amp;</operator> <name pos:start="135:30" pos:end="135:34">value</name><operator pos:start="135:35" pos:end="135:35">)</operator></expr>;</expr_stmt>



        <for pos:start="139:9" pos:end="149:9">for <control pos:start="139:13" pos:end="139:55">(<init pos:start="139:14" pos:end="139:19"><expr pos:start="139:14" pos:end="139:18"><name pos:start="139:14" pos:end="139:14">i</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <literal type="number" pos:start="139:18" pos:end="139:18">0</literal></expr>;</init> <condition pos:start="139:21" pos:end="139:50"><expr pos:start="139:21" pos:end="139:49"><name pos:start="139:21" pos:end="139:21">i</name> <operator pos:start="139:23" pos:end="139:23">&lt;</operator> <name pos:start="139:25" pos:end="139:49">EXYNOS4210_PWM_TIMERS_NUM</name></expr>;</condition> <incr pos:start="139:52" pos:end="139:54"><expr pos:start="139:52" pos:end="139:54"><name pos:start="139:52" pos:end="139:52">i</name><operator pos:start="139:53" pos:end="139:54">++</operator></expr></incr>)</control> <block pos:start="139:57" pos:end="149:9">{<block_content pos:start="141:13" pos:end="147:13">

            <if_stmt pos:start="141:13" pos:end="147:13"><if pos:start="141:13" pos:end="147:13">if <condition pos:start="141:16" pos:end="143:63">(<expr pos:start="141:17" pos:end="143:62"><operator pos:start="141:17" pos:end="141:17">(</operator><name pos:start="141:18" pos:end="141:24">new_val</name> <operator pos:start="141:26" pos:end="141:26">&amp;</operator> <call pos:start="141:28" pos:end="141:47"><name pos:start="141:28" pos:end="141:44">TINT_CSTAT_STATUS</name><argument_list pos:start="141:45" pos:end="141:47">(<argument pos:start="141:46" pos:end="141:46"><expr pos:start="141:46" pos:end="141:46"><name pos:start="141:46" pos:end="141:46">i</name></expr></argument>)</argument_list></call><operator pos:start="141:48" pos:end="141:48">)</operator> <operator pos:start="141:50" pos:end="141:50">&lt;</operator>

                    <operator pos:start="143:21" pos:end="143:21">(</operator><name pos:start="143:22" pos:end="143:38"><name pos:start="143:22" pos:end="143:22">s</name><operator pos:start="143:23" pos:end="143:24">-&gt;</operator><name pos:start="143:25" pos:end="143:38">reg_tint_cstat</name></name> <operator pos:start="143:40" pos:end="143:40">&amp;</operator> <call pos:start="143:42" pos:end="143:61"><name pos:start="143:42" pos:end="143:58">TINT_CSTAT_STATUS</name><argument_list pos:start="143:59" pos:end="143:61">(<argument pos:start="143:60" pos:end="143:60"><expr pos:start="143:60" pos:end="143:60"><name pos:start="143:60" pos:end="143:60">i</name></expr></argument>)</argument_list></call><operator pos:start="143:62" pos:end="143:62">)</operator></expr>)</condition> <block pos:start="143:65" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:48">

                <expr_stmt pos:start="145:17" pos:end="145:48"><expr pos:start="145:17" pos:end="145:47"><call pos:start="145:17" pos:end="145:47"><name pos:start="145:17" pos:end="145:30">qemu_irq_lower</name><argument_list pos:start="145:31" pos:end="145:47">(<argument pos:start="145:32" pos:end="145:46"><expr pos:start="145:32" pos:end="145:46"><name pos:start="145:32" pos:end="145:42"><name pos:start="145:32" pos:end="145:32">s</name><operator pos:start="145:33" pos:end="145:34">-&gt;</operator><name pos:start="145:35" pos:end="145:39">timer</name><index pos:start="145:40" pos:end="145:42">[<expr pos:start="145:41" pos:end="145:41"><name pos:start="145:41" pos:end="145:41">i</name></expr>]</index></name><operator pos:start="145:43" pos:end="145:43">.</operator><name pos:start="145:44" pos:end="145:46">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:25"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:25">reg_tint_cstat</name></name> <operator pos:start="153:27" pos:end="153:27">=</operator> <name pos:start="153:29" pos:end="153:35">new_val</name></expr>;</expr_stmt>

        <break pos:start="155:9" pos:end="155:14">break;</break>



    <default pos:start="159:5" pos:end="159:12">default:</default>

        <expr_stmt pos:start="161:9" pos:end="165:24"><expr pos:start="161:9" pos:end="165:23"><call pos:start="161:9" pos:end="165:23"><name pos:start="161:9" pos:end="161:15">fprintf</name><argument_list pos:start="161:16" pos:end="165:23">(<argument pos:start="161:17" pos:end="161:22"><expr pos:start="161:17" pos:end="161:22"><name pos:start="161:17" pos:end="161:22">stderr</name></expr></argument>,

                <argument pos:start="163:17" pos:end="163:73"><expr pos:start="163:17" pos:end="163:73"><literal type="string" pos:start="163:17" pos:end="163:52">"[exynos4210.pwm: bad write offset "</literal> <name pos:start="163:54" pos:end="163:67">TARGET_FMT_plx</name> <literal type="string" pos:start="163:69" pos:end="163:73">"]\n"</literal></expr></argument>,

                <argument pos:start="165:17" pos:end="165:22"><expr pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:22">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>



    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
