<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16512.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">scsi_unmap_complete_noio</name><parameter_list pos:start="1:37" pos:end="1:64">(<parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:48">UnmapCBData</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">data</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:63"><decl pos:start="1:57" pos:end="1:63"><type pos:start="1:57" pos:end="1:63"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:63">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:17">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:28">= <expr pos:start="5:22" pos:end="5:28"><name pos:start="5:22" pos:end="5:28"><name pos:start="5:22" pos:end="5:25">data</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:28">r</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:65">= <expr pos:start="7:24" pos:end="7:65"><call pos:start="7:24" pos:end="7:65"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:65">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:64"><expr pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:55">r</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:60">req</name><operator pos:start="7:61" pos:end="7:61">.</operator><name pos:start="7:62" pos:end="7:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">sector_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:23">nb_sectors</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:33"><expr pos:start="15:5" pos:end="15:32"><call pos:start="15:5" pos:end="15:32"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:32">(<argument pos:start="15:12" pos:end="15:31"><expr pos:start="15:12" pos:end="15:31"><name pos:start="15:12" pos:end="15:23"><name pos:start="15:12" pos:end="15:12">r</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:17">req</name><operator pos:start="15:18" pos:end="15:18">.</operator><name pos:start="15:19" pos:end="15:23">aiocb</name></name> <operator pos:start="15:25" pos:end="15:26">==</operator> <name pos:start="15:28" pos:end="15:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:9">r</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">req</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:26">io_canceled</name></name></expr>)</condition> <block pos:start="19:29" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:18">

        <expr_stmt pos:start="21:9" pos:end="21:42"><expr pos:start="21:9" pos:end="21:41"><call pos:start="21:9" pos:end="21:41"><name pos:start="21:9" pos:end="21:32">scsi_req_cancel_complete</name><argument_list pos:start="21:33" pos:end="21:41">(<argument pos:start="21:34" pos:end="21:40"><expr pos:start="21:34" pos:end="21:40"><operator pos:start="21:34" pos:end="21:34">&amp;</operator><name pos:start="21:35" pos:end="21:40"><name pos:start="21:35" pos:end="21:35">r</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:40">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="23:9" pos:end="23:18">goto <name pos:start="23:14" pos:end="23:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:9">

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:49">(<expr pos:start="31:13" pos:end="31:48"><call pos:start="31:13" pos:end="31:48"><name pos:start="31:13" pos:end="31:32">scsi_handle_rw_error</name><argument_list pos:start="31:33" pos:end="31:48">(<argument pos:start="31:34" pos:end="31:34"><expr pos:start="31:34" pos:end="31:34"><name pos:start="31:34" pos:end="31:34">r</name></expr></argument>, <argument pos:start="31:37" pos:end="31:40"><expr pos:start="31:37" pos:end="31:40"><operator pos:start="31:37" pos:end="31:37">-</operator><name pos:start="31:38" pos:end="31:40">ret</name></expr></argument>, <argument pos:start="31:43" pos:end="31:47"><expr pos:start="31:43" pos:end="31:47"><name pos:start="31:43" pos:end="31:47">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:51" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:22">

            <goto pos:start="33:13" pos:end="33:22">goto <name pos:start="33:18" pos:end="33:21">done</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="71:5"><if pos:start="41:5" pos:end="71:5">if <condition pos:start="41:8" pos:end="41:24">(<expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:12">data</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:19">count</name></name> <operator pos:start="41:21" pos:end="41:21">&gt;</operator> <literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr>)</condition> <block pos:start="41:26" pos:end="71:5">{<block_content pos:start="43:9" pos:end="69:15">

        <expr_stmt pos:start="43:9" pos:end="43:47"><expr pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:18">sector_num</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:46"><name pos:start="43:22" pos:end="43:29">ldq_be_p</name><argument_list pos:start="43:30" pos:end="43:46">(<argument pos:start="43:31" pos:end="43:45"><expr pos:start="43:31" pos:end="43:45"><operator pos:start="43:31" pos:end="43:31">&amp;</operator><name pos:start="43:32" pos:end="43:45"><name pos:start="43:32" pos:end="43:35">data</name><operator pos:start="43:36" pos:end="43:37">-&gt;</operator><name pos:start="43:38" pos:end="43:42">inbuf</name><index pos:start="43:43" pos:end="43:45">[<expr pos:start="43:44" pos:end="43:44"><literal type="number" pos:start="43:44" pos:end="43:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:63"><expr pos:start="45:9" pos:end="45:62"><name pos:start="45:9" pos:end="45:18">nb_sectors</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <call pos:start="45:22" pos:end="45:46"><name pos:start="45:22" pos:end="45:29">ldl_be_p</name><argument_list pos:start="45:30" pos:end="45:46">(<argument pos:start="45:31" pos:end="45:45"><expr pos:start="45:31" pos:end="45:45"><operator pos:start="45:31" pos:end="45:31">&amp;</operator><name pos:start="45:32" pos:end="45:45"><name pos:start="45:32" pos:end="45:35">data</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:42">inbuf</name><index pos:start="45:43" pos:end="45:45">[<expr pos:start="45:44" pos:end="45:44"><literal type="number" pos:start="45:44" pos:end="45:44">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="45:48" pos:end="45:48">&amp;</operator> <literal type="number" pos:start="45:50" pos:end="45:62">0xffffffffULL</literal></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:56">(<expr pos:start="47:13" pos:end="47:55"><operator pos:start="47:13" pos:end="47:13">!</operator><call pos:start="47:14" pos:end="47:55"><name pos:start="47:14" pos:end="47:28">check_lba_range</name><argument_list pos:start="47:29" pos:end="47:55">(<argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><name pos:start="47:30" pos:end="47:30">s</name></expr></argument>, <argument pos:start="47:33" pos:end="47:42"><expr pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:42">sector_num</name></expr></argument>, <argument pos:start="47:45" pos:end="47:54"><expr pos:start="47:45" pos:end="47:54"><name pos:start="47:45" pos:end="47:54">nb_sectors</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:58" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:22">

            <expr_stmt pos:start="49:13" pos:end="49:66"><expr pos:start="49:13" pos:end="49:65"><call pos:start="49:13" pos:end="49:65"><name pos:start="49:13" pos:end="49:32">scsi_check_condition</name><argument_list pos:start="49:33" pos:end="49:65">(<argument pos:start="49:34" pos:end="49:34"><expr pos:start="49:34" pos:end="49:34"><name pos:start="49:34" pos:end="49:34">r</name></expr></argument>, <argument pos:start="49:37" pos:end="49:64"><expr pos:start="49:37" pos:end="49:64"><call pos:start="49:37" pos:end="49:64"><name pos:start="49:37" pos:end="49:46">SENSE_CODE</name><argument_list pos:start="49:47" pos:end="49:64">(<argument pos:start="49:48" pos:end="49:63"><expr pos:start="49:48" pos:end="49:63"><name pos:start="49:48" pos:end="49:63">LBA_OUT_OF_RANGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="51:13" pos:end="51:22">goto <name pos:start="51:18" pos:end="51:21">done</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="63:66"><expr pos:start="57:9" pos:end="63:65"><name pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:9">r</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:14">req</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:20">aiocb</name></name> <operator pos:start="57:22" pos:end="57:22">=</operator> <call pos:start="57:24" pos:end="63:65"><name pos:start="57:24" pos:end="57:38">blk_aio_discard</name><argument_list pos:start="57:39" pos:end="63:65">(<argument pos:start="57:40" pos:end="57:55"><expr pos:start="57:40" pos:end="57:55"><name pos:start="57:40" pos:end="57:55"><name pos:start="57:40" pos:end="57:40">s</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:46">qdev</name><operator pos:start="57:47" pos:end="57:47">.</operator><name pos:start="57:48" pos:end="57:51">conf</name><operator pos:start="57:52" pos:end="57:52">.</operator><name pos:start="57:53" pos:end="57:55">blk</name></name></expr></argument>,

                                       <argument pos:start="59:40" pos:end="59:77"><expr pos:start="59:40" pos:end="59:77"><name pos:start="59:40" pos:end="59:49">sector_num</name> <operator pos:start="59:51" pos:end="59:51">*</operator> <operator pos:start="59:53" pos:end="59:53">(</operator><name pos:start="59:54" pos:end="59:70"><name pos:start="59:54" pos:end="59:54">s</name><operator pos:start="59:55" pos:end="59:56">-&gt;</operator><name pos:start="59:57" pos:end="59:60">qdev</name><operator pos:start="59:61" pos:end="59:61">.</operator><name pos:start="59:62" pos:end="59:70">blocksize</name></name> <operator pos:start="59:72" pos:end="59:72">/</operator> <literal type="number" pos:start="59:74" pos:end="59:76">512</literal><operator pos:start="59:77" pos:end="59:77">)</operator></expr></argument>,

                                       <argument pos:start="61:40" pos:end="61:77"><expr pos:start="61:40" pos:end="61:77"><name pos:start="61:40" pos:end="61:49">nb_sectors</name> <operator pos:start="61:51" pos:end="61:51">*</operator> <operator pos:start="61:53" pos:end="61:53">(</operator><name pos:start="61:54" pos:end="61:70"><name pos:start="61:54" pos:end="61:54">s</name><operator pos:start="61:55" pos:end="61:56">-&gt;</operator><name pos:start="61:57" pos:end="61:60">qdev</name><operator pos:start="61:61" pos:end="61:61">.</operator><name pos:start="61:62" pos:end="61:70">blocksize</name></name> <operator pos:start="61:72" pos:end="61:72">/</operator> <literal type="number" pos:start="61:74" pos:end="61:76">512</literal><operator pos:start="61:77" pos:end="61:77">)</operator></expr></argument>,

                                       <argument pos:start="63:40" pos:end="63:58"><expr pos:start="63:40" pos:end="63:58"><name pos:start="63:40" pos:end="63:58">scsi_unmap_complete</name></expr></argument>, <argument pos:start="63:61" pos:end="63:64"><expr pos:start="63:61" pos:end="63:64"><name pos:start="63:61" pos:end="63:64">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:12">data</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:19">count</name></name><operator pos:start="65:20" pos:end="65:21">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:26"><expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:12">data</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:19">inbuf</name></name> <operator pos:start="67:21" pos:end="67:22">+=</operator> <literal type="number" pos:start="67:24" pos:end="67:25">16</literal></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:37"><expr pos:start="75:5" pos:end="75:36"><call pos:start="75:5" pos:end="75:36"><name pos:start="75:5" pos:end="75:21">scsi_req_complete</name><argument_list pos:start="75:22" pos:end="75:36">(<argument pos:start="75:23" pos:end="75:29"><expr pos:start="75:23" pos:end="75:29"><operator pos:start="75:23" pos:end="75:23">&amp;</operator><name pos:start="75:24" pos:end="75:29"><name pos:start="75:24" pos:end="75:24">r</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:29">req</name></name></expr></argument>, <argument pos:start="75:32" pos:end="75:35"><expr pos:start="75:32" pos:end="75:35"><name pos:start="75:32" pos:end="75:35">GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="79:1" pos:end="79:5"><name pos:start="79:1" pos:end="79:4">done</name>:</label>

    <expr_stmt pos:start="81:5" pos:end="81:28"><expr pos:start="81:5" pos:end="81:27"><call pos:start="81:5" pos:end="81:27"><name pos:start="81:5" pos:end="81:18">scsi_req_unref</name><argument_list pos:start="81:19" pos:end="81:27">(<argument pos:start="81:20" pos:end="81:26"><expr pos:start="81:20" pos:end="81:26"><operator pos:start="81:20" pos:end="81:20">&amp;</operator><name pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:21">r</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:26">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:17"><expr pos:start="83:5" pos:end="83:16"><call pos:start="83:5" pos:end="83:16"><name pos:start="83:5" pos:end="83:10">g_free</name><argument_list pos:start="83:11" pos:end="83:16">(<argument pos:start="83:12" pos:end="83:15"><expr pos:start="83:12" pos:end="83:15"><name pos:start="83:12" pos:end="83:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
