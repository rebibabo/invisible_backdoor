<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7765.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">simple_number</name><parameter_list pos:start="1:26" pos:end="1:31">(<parameter pos:start="1:27" pos:end="1:30"><decl pos:start="1:27" pos:end="1:30"><type pos:start="1:27" pos:end="1:30"><name pos:start="1:27" pos:end="1:30">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <struct pos:start="7:5" pos:end="29:6">struct <block pos:start="7:12" pos:end="15:5">{

        <decl_stmt pos:start="9:9" pos:end="9:28"><decl pos:start="9:9" pos:end="9:27"><type pos:start="9:9" pos:end="9:20"><specifier pos:start="9:9" pos:end="9:13">const</specifier> <name pos:start="9:15" pos:end="9:18">char</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:27">encoded</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:24"><decl pos:start="11:9" pos:end="11:23"><type pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:15">int64_t</name></type> <name pos:start="11:17" pos:end="11:23">decoded</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:17"><decl pos:start="13:9" pos:end="13:16"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:16">skip</name></decl>;</decl_stmt>

    }</block> <decl pos:start="15:7" pos:end="29:5"><name pos:start="15:7" pos:end="15:18"><name pos:start="15:7" pos:end="15:16">test_cases</name><index pos:start="15:17" pos:end="15:18">[]</index></name> <init pos:start="15:20" pos:end="29:5">= <expr pos:start="15:22" pos:end="29:5"><block pos:start="15:22" pos:end="29:5">{

        <expr pos:start="17:9" pos:end="17:18"><block pos:start="17:9" pos:end="17:18">{ <expr pos:start="17:11" pos:end="17:13"><literal type="string" pos:start="17:11" pos:end="17:13">"0"</literal></expr>, <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr> }</block></expr>,

        <expr pos:start="19:9" pos:end="19:24"><block pos:start="19:9" pos:end="19:24">{ <expr pos:start="19:11" pos:end="19:16"><literal type="string" pos:start="19:11" pos:end="19:16">"1234"</literal></expr>, <expr pos:start="19:19" pos:end="19:22"><literal type="number" pos:start="19:19" pos:end="19:22">1234</literal></expr> }</block></expr>,

        <expr pos:start="21:9" pos:end="21:18"><block pos:start="21:9" pos:end="21:18">{ <expr pos:start="21:11" pos:end="21:13"><literal type="string" pos:start="21:11" pos:end="21:13">"1"</literal></expr>, <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">1</literal></expr> }</block></expr>,

        <expr pos:start="23:9" pos:end="23:22"><block pos:start="23:9" pos:end="23:22">{ <expr pos:start="23:11" pos:end="23:15"><literal type="string" pos:start="23:11" pos:end="23:15">"-32"</literal></expr>, <expr pos:start="23:18" pos:end="23:20"><operator pos:start="23:18" pos:end="23:18">-</operator><literal type="number" pos:start="23:19" pos:end="23:20">32</literal></expr> }</block></expr>,

        <expr pos:start="25:9" pos:end="25:30"><block pos:start="25:9" pos:end="25:30">{ <expr pos:start="25:11" pos:end="25:14"><literal type="string" pos:start="25:11" pos:end="25:14">"-0"</literal></expr>, <expr pos:start="25:17" pos:end="25:17"><literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr>, <expr pos:start="25:20" pos:end="25:28"><operator pos:start="25:20" pos:end="25:20">.</operator><name pos:start="25:21" pos:end="25:24">skip</name> <operator pos:start="25:26" pos:end="25:26">=</operator> <literal type="number" pos:start="25:28" pos:end="25:28">1</literal></expr> }</block></expr>,

        <expr pos:start="27:9" pos:end="27:11"><block pos:start="27:9" pos:end="27:11">{ }</block></expr>,

    }</block></expr></init></decl>;</struct>



    <for pos:start="33:5" pos:end="71:5">for <control pos:start="33:9" pos:end="33:43">(<init pos:start="33:10" pos:end="33:15"><expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:10">i</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>;</init> <condition pos:start="33:17" pos:end="33:38"><expr pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:29"><name pos:start="33:17" pos:end="33:26">test_cases</name><index pos:start="33:27" pos:end="33:29">[<expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">i</name></expr>]</index></name><operator pos:start="33:30" pos:end="33:30">.</operator><name pos:start="33:31" pos:end="33:37">encoded</name></expr>;</condition> <incr pos:start="33:40" pos:end="33:42"><expr pos:start="33:40" pos:end="33:42"><name pos:start="33:40" pos:end="33:40">i</name><operator pos:start="33:41" pos:end="33:42">++</operator></expr></incr>)</control> <block pos:start="33:45" pos:end="71:5">{<block_content pos:start="35:9" pos:end="69:22">

        <decl_stmt pos:start="35:9" pos:end="35:21"><decl pos:start="35:9" pos:end="35:20"><type pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:15">QObject</name> <modifier pos:start="35:17" pos:end="35:17">*</modifier></type><name pos:start="35:18" pos:end="35:20">obj</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:19"><decl pos:start="37:9" pos:end="37:18"><type pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:12">QInt</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:18">qint</name></decl>;</decl_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:55"><expr pos:start="41:9" pos:end="41:54"><name pos:start="41:9" pos:end="41:11">obj</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:54"><name pos:start="41:15" pos:end="41:31">qobject_from_json</name><argument_list pos:start="41:32" pos:end="41:54">(<argument pos:start="41:33" pos:end="41:53"><expr pos:start="41:33" pos:end="41:53"><name pos:start="41:33" pos:end="41:45"><name pos:start="41:33" pos:end="41:42">test_cases</name><index pos:start="41:43" pos:end="41:45">[<expr pos:start="41:44" pos:end="41:44"><name pos:start="41:44" pos:end="41:44">i</name></expr>]</index></name><operator pos:start="41:46" pos:end="41:46">.</operator><name pos:start="41:47" pos:end="41:53">encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:16">g_assert</name><argument_list pos:start="43:17" pos:end="43:29">(<argument pos:start="43:18" pos:end="43:28"><expr pos:start="43:18" pos:end="43:28"><name pos:start="43:18" pos:end="43:20">obj</name> <operator pos:start="43:22" pos:end="43:23">!=</operator> <name pos:start="43:25" pos:end="43:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:50"><expr pos:start="45:9" pos:end="45:49"><call pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:16">g_assert</name><argument_list pos:start="45:17" pos:end="45:49">(<argument pos:start="45:18" pos:end="45:48"><expr pos:start="45:18" pos:end="45:48"><call pos:start="45:18" pos:end="45:34"><name pos:start="45:18" pos:end="45:29">qobject_type</name><argument_list pos:start="45:30" pos:end="45:34">(<argument pos:start="45:31" pos:end="45:33"><expr pos:start="45:31" pos:end="45:33"><name pos:start="45:31" pos:end="45:33">obj</name></expr></argument>)</argument_list></call> <operator pos:start="45:36" pos:end="45:37">==</operator> <name pos:start="45:39" pos:end="45:48">QTYPE_QINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:12">qint</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:35"><name pos:start="49:16" pos:end="49:30">qobject_to_qint</name><argument_list pos:start="49:31" pos:end="49:35">(<argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><name pos:start="49:32" pos:end="49:34">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:62"><expr pos:start="51:9" pos:end="51:61"><call pos:start="51:9" pos:end="51:61"><name pos:start="51:9" pos:end="51:16">g_assert</name><argument_list pos:start="51:17" pos:end="51:61">(<argument pos:start="51:18" pos:end="51:60"><expr pos:start="51:18" pos:end="51:60"><call pos:start="51:18" pos:end="51:35"><name pos:start="51:18" pos:end="51:29">qint_get_int</name><argument_list pos:start="51:30" pos:end="51:35">(<argument pos:start="51:31" pos:end="51:34"><expr pos:start="51:31" pos:end="51:34"><name pos:start="51:31" pos:end="51:34">qint</name></expr></argument>)</argument_list></call> <operator pos:start="51:37" pos:end="51:38">==</operator> <name pos:start="51:40" pos:end="51:52"><name pos:start="51:40" pos:end="51:49">test_cases</name><index pos:start="51:50" pos:end="51:52">[<expr pos:start="51:51" pos:end="51:51"><name pos:start="51:51" pos:end="51:51">i</name></expr>]</index></name><operator pos:start="51:53" pos:end="51:53">.</operator><name pos:start="51:54" pos:end="51:60">decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="65:9"><if pos:start="53:9" pos:end="65:9">if <condition pos:start="53:12" pos:end="53:36">(<expr pos:start="53:13" pos:end="53:35"><name pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:22">test_cases</name><index pos:start="53:23" pos:end="53:25">[<expr pos:start="53:24" pos:end="53:24"><name pos:start="53:24" pos:end="53:24">i</name></expr>]</index></name><operator pos:start="53:26" pos:end="53:26">.</operator><name pos:start="53:27" pos:end="53:30">skip</name> <operator pos:start="53:32" pos:end="53:33">==</operator> <literal type="number" pos:start="53:35" pos:end="53:35">0</literal></expr>)</condition> <block pos:start="53:38" pos:end="65:9">{<block_content pos:start="55:13" pos:end="63:25">

            <decl_stmt pos:start="55:13" pos:end="55:25"><decl pos:start="55:13" pos:end="55:24"><type pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:19">QString</name> <modifier pos:start="55:21" pos:end="55:21">*</modifier></type><name pos:start="55:22" pos:end="55:24">str</name></decl>;</decl_stmt>



            <expr_stmt pos:start="59:13" pos:end="59:39"><expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:15">str</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:38"><name pos:start="59:19" pos:end="59:33">qobject_to_json</name><argument_list pos:start="59:34" pos:end="59:38">(<argument pos:start="59:35" pos:end="59:37"><expr pos:start="59:35" pos:end="59:37"><name pos:start="59:35" pos:end="59:37">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:79"><expr pos:start="61:13" pos:end="61:78"><call pos:start="61:13" pos:end="61:78"><name pos:start="61:13" pos:end="61:20">g_assert</name><argument_list pos:start="61:21" pos:end="61:78">(<argument pos:start="61:22" pos:end="61:77"><expr pos:start="61:22" pos:end="61:77"><call pos:start="61:22" pos:end="61:72"><name pos:start="61:22" pos:end="61:27">strcmp</name><argument_list pos:start="61:28" pos:end="61:72">(<argument pos:start="61:29" pos:end="61:48"><expr pos:start="61:29" pos:end="61:48"><call pos:start="61:29" pos:end="61:48"><name pos:start="61:29" pos:end="61:43">qstring_get_str</name><argument_list pos:start="61:44" pos:end="61:48">(<argument pos:start="61:45" pos:end="61:47"><expr pos:start="61:45" pos:end="61:47"><name pos:start="61:45" pos:end="61:47">str</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:51" pos:end="61:71"><expr pos:start="61:51" pos:end="61:71"><name pos:start="61:51" pos:end="61:63"><name pos:start="61:51" pos:end="61:60">test_cases</name><index pos:start="61:61" pos:end="61:63">[<expr pos:start="61:62" pos:end="61:62"><name pos:start="61:62" pos:end="61:62">i</name></expr>]</index></name><operator pos:start="61:64" pos:end="61:64">.</operator><name pos:start="61:65" pos:end="61:71">encoded</name></expr></argument>)</argument_list></call> <operator pos:start="61:74" pos:end="61:75">==</operator> <literal type="number" pos:start="61:77" pos:end="61:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:25"><expr pos:start="63:13" pos:end="63:24"><call pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:19">QDECREF</name><argument_list pos:start="63:20" pos:end="63:24">(<argument pos:start="63:21" pos:end="63:23"><expr pos:start="63:21" pos:end="63:23"><name pos:start="63:21" pos:end="63:23">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><call pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:15">QDECREF</name><argument_list pos:start="69:16" pos:end="69:21">(<argument pos:start="69:17" pos:end="69:20"><expr pos:start="69:17" pos:end="69:20"><name pos:start="69:17" pos:end="69:20">qint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
