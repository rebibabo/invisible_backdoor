<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22099.c" pos:tabs="8"><function pos:start="1:1" pos:end="447:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">ppc_cpu_realizefn</name><parameter_list pos:start="1:30" pos:end="1:61">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:41">DeviceState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="447:1">{<block_content pos:start="5:5" pos:end="446:0">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">PowerPCCPU</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">cpu</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><call pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:33">POWERPC_CPU</name><argument_list pos:start="7:34" pos:end="7:38">(<argument pos:start="7:35" pos:end="7:37"><expr pos:start="7:35" pos:end="7:37"><name pos:start="7:35" pos:end="7:37">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">PowerPCCPUClass</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">pcc</name> <init pos:start="9:26" pos:end="9:53">= <expr pos:start="9:28" pos:end="9:53"><call pos:start="9:28" pos:end="9:53"><name pos:start="9:28" pos:end="9:48">POWERPC_CPU_GET_CLASS</name><argument_list pos:start="9:49" pos:end="9:53">(<argument pos:start="9:50" pos:end="9:52"><expr pos:start="9:50" pos:end="9:52"><name pos:start="9:50" pos:end="9:52">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="13:1" pos:end="13:30">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:30"><operator pos:start="13:5" pos:end="13:5">!</operator><call pos:start="13:6" pos:end="13:30"><name pos:start="13:6" pos:end="13:12">defined</name><argument_list pos:start="13:13" pos:end="13:30">(<argument pos:start="13:14" pos:end="13:29"><expr pos:start="13:14" pos:end="13:29"><name pos:start="13:14" pos:end="13:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="15:5" pos:end="22:0"><decl pos:start="15:5" pos:end="15:58"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">max_smt</name> <init pos:start="15:17" pos:end="15:58">= <expr pos:start="15:19" pos:end="15:58"><ternary pos:start="15:19" pos:end="15:58"><condition pos:start="15:19" pos:end="15:33"><expr pos:start="15:19" pos:end="15:31"><call pos:start="15:19" pos:end="15:31"><name pos:start="15:19" pos:end="15:29">kvm_enabled</name><argument_list pos:start="15:30" pos:end="15:31">()</argument_list></call></expr> ?</condition><then pos:start="15:35" pos:end="15:54"> <expr pos:start="15:35" pos:end="15:54"><call pos:start="15:35" pos:end="15:54"><name pos:start="15:35" pos:end="15:52">kvmppc_smt_threads</name><argument_list pos:start="15:53" pos:end="15:54">()</argument_list></call></expr> </then><else pos:start="15:56" pos:end="15:58">: <expr pos:start="15:58" pos:end="15:58"><literal type="number" pos:start="15:58" pos:end="15:58">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="21:1" pos:end="21:30">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:30"><operator pos:start="21:5" pos:end="21:5">!</operator><call pos:start="21:6" pos:end="21:30"><name pos:start="21:6" pos:end="21:12">defined</name><argument_list pos:start="21:13" pos:end="21:30">(<argument pos:start="21:14" pos:end="21:29"><expr pos:start="21:14" pos:end="21:29"><name pos:start="21:14" pos:end="21:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="23:5" pos:end="34:0"><if pos:start="23:5" pos:end="34:0">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:19">smp_threads</name> <operator pos:start="23:21" pos:end="23:21">&gt;</operator> <name pos:start="23:23" pos:end="23:29">max_smt</name></expr>)</condition> <block pos:start="23:32" pos:end="34:0">{<block_content pos:start="25:9" pos:end="29:15">

        <expr_stmt pos:start="25:9" pos:end="27:59"><expr pos:start="25:9" pos:end="27:58"><call pos:start="25:9" pos:end="27:58"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="27:58">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="25:77"><expr pos:start="25:26" pos:end="25:77"><literal type="string" pos:start="25:26" pos:end="25:77">"Cannot support more than %d threads on PPC with %s"</literal></expr></argument>,

                   <argument pos:start="27:20" pos:end="27:26"><expr pos:start="27:20" pos:end="27:26"><name pos:start="27:20" pos:end="27:26">max_smt</name></expr></argument>, <argument pos:start="27:29" pos:end="27:57"><expr pos:start="27:29" pos:end="27:57"><ternary pos:start="27:29" pos:end="27:57"><condition pos:start="27:29" pos:end="27:43"><expr pos:start="27:29" pos:end="27:41"><call pos:start="27:29" pos:end="27:41"><name pos:start="27:29" pos:end="27:39">kvm_enabled</name><argument_list pos:start="27:40" pos:end="27:41">()</argument_list></call></expr> ?</condition><then pos:start="27:45" pos:end="27:49"> <expr pos:start="27:45" pos:end="27:49"><literal type="string" pos:start="27:45" pos:end="27:49">"KVM"</literal></expr> </then><else pos:start="27:51" pos:end="27:57">: <expr pos:start="27:53" pos:end="27:57"><literal type="string" pos:start="27:53" pos:end="27:57">"TCG"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="37:5" pos:end="62:0"><if pos:start="37:5" pos:end="47:5">if <condition pos:start="37:8" pos:end="37:22">(<expr pos:start="37:9" pos:end="37:21"><call pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:19">kvm_enabled</name><argument_list pos:start="37:20" pos:end="37:21">()</argument_list></call></expr>)</condition> <block pos:start="37:24" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:9">

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:39">(<expr pos:start="39:13" pos:end="39:38"><call pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:28">kvmppc_fixup_cpu</name><argument_list pos:start="39:29" pos:end="39:33">(<argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:32">cpu</name></expr></argument>)</argument_list></call> <operator pos:start="39:35" pos:end="39:36">!=</operator> <literal type="number" pos:start="39:38" pos:end="39:38">0</literal></expr>)</condition> <block pos:start="39:41" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:19">

            <expr_stmt pos:start="41:13" pos:end="41:75"><expr pos:start="41:13" pos:end="41:74"><call pos:start="41:13" pos:end="41:74"><name pos:start="41:13" pos:end="41:22">error_setg</name><argument_list pos:start="41:23" pos:end="41:74">(<argument pos:start="41:24" pos:end="41:27"><expr pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:27">errp</name></expr></argument>, <argument pos:start="41:30" pos:end="41:73"><expr pos:start="41:30" pos:end="41:73"><literal type="string" pos:start="41:30" pos:end="41:73">"Unable to virtualize selected CPU with KVM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="47:7" pos:end="62:0">else if <condition pos:start="47:15" pos:end="47:29">(<expr pos:start="47:16" pos:end="47:28"><call pos:start="47:16" pos:end="47:28"><name pos:start="47:16" pos:end="47:26">tcg_enabled</name><argument_list pos:start="47:27" pos:end="47:28">()</argument_list></call></expr>)</condition> <block pos:start="47:31" pos:end="62:0">{<block_content pos:start="49:9" pos:end="55:9">

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:36">(<expr pos:start="49:13" pos:end="49:35"><call pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:25">ppc_fixup_cpu</name><argument_list pos:start="49:26" pos:end="49:30">(<argument pos:start="49:27" pos:end="49:29"><expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:29">cpu</name></expr></argument>)</argument_list></call> <operator pos:start="49:32" pos:end="49:33">!=</operator> <literal type="number" pos:start="49:35" pos:end="49:35">0</literal></expr>)</condition> <block pos:start="49:38" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:19">

            <expr_stmt pos:start="51:13" pos:end="51:72"><expr pos:start="51:13" pos:end="51:71"><call pos:start="51:13" pos:end="51:71"><name pos:start="51:13" pos:end="51:22">error_setg</name><argument_list pos:start="51:23" pos:end="51:71">(<argument pos:start="51:24" pos:end="51:27"><expr pos:start="51:24" pos:end="51:27"><name pos:start="51:24" pos:end="51:27">errp</name></expr></argument>, <argument pos:start="51:30" pos:end="51:70"><expr pos:start="51:30" pos:end="51:70"><literal type="string" pos:start="51:30" pos:end="51:70">"Unable to emulate selected CPU with TCG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="61:1" pos:end="61:26">#<cpp:directive pos:start="61:2" pos:end="61:3">if</cpp:directive> <expr pos:start="61:5" pos:end="61:26"><call pos:start="61:5" pos:end="61:26"><name pos:start="61:5" pos:end="61:11">defined</name><argument_list pos:start="61:12" pos:end="61:26">(<argument pos:start="61:13" pos:end="61:25"><expr pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:25">TARGET_PPCEMB</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="63:5" pos:end="76:0"><if pos:start="63:5" pos:end="76:0">if <condition pos:start="63:8" pos:end="63:31">(<expr pos:start="63:9" pos:end="63:30"><operator pos:start="63:9" pos:end="63:9">!</operator><call pos:start="63:10" pos:end="63:30"><name pos:start="63:10" pos:end="63:25">ppc_cpu_is_valid</name><argument_list pos:start="63:26" pos:end="63:30">(<argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">pcc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:33" pos:end="76:0">{<block_content pos:start="65:9" pos:end="71:15">

        <expr_stmt pos:start="65:9" pos:end="69:51"><expr pos:start="65:9" pos:end="69:50"><call pos:start="65:9" pos:end="69:50"><name pos:start="65:9" pos:end="65:18">error_setg</name><argument_list pos:start="65:19" pos:end="69:50">(<argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">errp</name></expr></argument>, <argument pos:start="65:26" pos:end="69:49"><expr pos:start="65:26" pos:end="69:49"><literal type="string" pos:start="65:26" pos:end="65:68">"CPU does not possess a BookE or 4xx MMU. "</literal>

                   <literal type="string" pos:start="67:20" pos:end="67:77">"Please use qemu-system-ppc or qemu-system-ppc64 instead "</literal>

                   <literal type="string" pos:start="69:20" pos:end="69:49">"or choose another CPU model."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="79:5" pos:end="79:40"><expr pos:start="79:5" pos:end="79:39"><call pos:start="79:5" pos:end="79:39"><name pos:start="79:5" pos:end="79:22">create_ppc_opcodes</name><argument_list pos:start="79:23" pos:end="79:39">(<argument pos:start="79:24" pos:end="79:26"><expr pos:start="79:24" pos:end="79:26"><name pos:start="79:24" pos:end="79:26">cpu</name></expr></argument>, <argument pos:start="79:29" pos:end="79:38"><expr pos:start="79:29" pos:end="79:38"><operator pos:start="79:29" pos:end="79:29">&amp;</operator><name pos:start="79:30" pos:end="79:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:26">(<expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:17">local_err</name> <operator pos:start="81:19" pos:end="81:20">!=</operator> <name pos:start="81:22" pos:end="81:25">NULL</name></expr>)</condition> <block pos:start="81:28" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:15">

        <expr_stmt pos:start="83:9" pos:end="83:41"><expr pos:start="83:9" pos:end="83:40"><call pos:start="83:9" pos:end="83:40"><name pos:start="83:9" pos:end="83:23">error_propagate</name><argument_list pos:start="83:24" pos:end="83:40">(<argument pos:start="83:25" pos:end="83:28"><expr pos:start="83:25" pos:end="83:28"><name pos:start="83:25" pos:end="83:28">errp</name></expr></argument>, <argument pos:start="83:31" pos:end="83:39"><expr pos:start="83:31" pos:end="83:39"><name pos:start="83:31" pos:end="83:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:23"><expr pos:start="89:5" pos:end="89:22"><call pos:start="89:5" pos:end="89:22"><name pos:start="89:5" pos:end="89:17">init_ppc_proc</name><argument_list pos:start="89:18" pos:end="89:22">(<argument pos:start="89:19" pos:end="89:21"><expr pos:start="89:19" pos:end="89:21"><name pos:start="89:19" pos:end="89:21">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:37">(<expr pos:start="93:9" pos:end="93:36"><name pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:11">pcc</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:24">insns_flags</name></name> <operator pos:start="93:26" pos:end="93:26">&amp;</operator> <name pos:start="93:28" pos:end="93:36">PPC_FLOAT</name></expr>)</condition> <block pos:start="93:39" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:57">

        <expr_stmt pos:start="95:9" pos:end="97:57"><expr pos:start="95:9" pos:end="97:56"><call pos:start="95:9" pos:end="97:56"><name pos:start="95:9" pos:end="95:32">gdb_register_coprocessor</name><argument_list pos:start="95:33" pos:end="97:56">(<argument pos:start="95:34" pos:end="95:35"><expr pos:start="95:34" pos:end="95:35"><name pos:start="95:34" pos:end="95:35">cs</name></expr></argument>, <argument pos:start="95:38" pos:end="95:54"><expr pos:start="95:38" pos:end="95:54"><name pos:start="95:38" pos:end="95:54">gdb_get_float_reg</name></expr></argument>, <argument pos:start="95:57" pos:end="95:73"><expr pos:start="95:57" pos:end="95:73"><name pos:start="95:57" pos:end="95:73">gdb_set_float_reg</name></expr></argument>,

                                 <argument pos:start="97:34" pos:end="97:35"><expr pos:start="97:34" pos:end="97:35"><literal type="number" pos:start="97:34" pos:end="97:35">33</literal></expr></argument>, <argument pos:start="97:38" pos:end="97:52"><expr pos:start="97:38" pos:end="97:52"><literal type="string" pos:start="97:38" pos:end="97:52">"power-fpu.xml"</literal></expr></argument>, <argument pos:start="97:55" pos:end="97:55"><expr pos:start="97:55" pos:end="97:55"><literal type="number" pos:start="97:55" pos:end="97:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:39">(<expr pos:start="101:9" pos:end="101:38"><name pos:start="101:9" pos:end="101:24"><name pos:start="101:9" pos:end="101:11">pcc</name><operator pos:start="101:12" pos:end="101:13">-&gt;</operator><name pos:start="101:14" pos:end="101:24">insns_flags</name></name> <operator pos:start="101:26" pos:end="101:26">&amp;</operator> <name pos:start="101:28" pos:end="101:38">PPC_ALTIVEC</name></expr>)</condition> <block pos:start="101:41" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:61">

        <expr_stmt pos:start="103:9" pos:end="105:61"><expr pos:start="103:9" pos:end="105:60"><call pos:start="103:9" pos:end="105:60"><name pos:start="103:9" pos:end="103:32">gdb_register_coprocessor</name><argument_list pos:start="103:33" pos:end="105:60">(<argument pos:start="103:34" pos:end="103:35"><expr pos:start="103:34" pos:end="103:35"><name pos:start="103:34" pos:end="103:35">cs</name></expr></argument>, <argument pos:start="103:38" pos:end="103:52"><expr pos:start="103:38" pos:end="103:52"><name pos:start="103:38" pos:end="103:52">gdb_get_avr_reg</name></expr></argument>, <argument pos:start="103:55" pos:end="103:69"><expr pos:start="103:55" pos:end="103:69"><name pos:start="103:55" pos:end="103:69">gdb_set_avr_reg</name></expr></argument>,

                                 <argument pos:start="105:34" pos:end="105:35"><expr pos:start="105:34" pos:end="105:35"><literal type="number" pos:start="105:34" pos:end="105:35">34</literal></expr></argument>, <argument pos:start="105:38" pos:end="105:56"><expr pos:start="105:38" pos:end="105:56"><literal type="string" pos:start="105:38" pos:end="105:56">"power-altivec.xml"</literal></expr></argument>, <argument pos:start="105:59" pos:end="105:59"><expr pos:start="105:59" pos:end="105:59"><literal type="number" pos:start="105:59" pos:end="105:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:35">(<expr pos:start="109:9" pos:end="109:34"><name pos:start="109:9" pos:end="109:24"><name pos:start="109:9" pos:end="109:11">pcc</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:24">insns_flags</name></name> <operator pos:start="109:26" pos:end="109:26">&amp;</operator> <name pos:start="109:28" pos:end="109:34">PPC_SPE</name></expr>)</condition> <block pos:start="109:37" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:57">

        <expr_stmt pos:start="111:9" pos:end="113:57"><expr pos:start="111:9" pos:end="113:56"><call pos:start="111:9" pos:end="113:56"><name pos:start="111:9" pos:end="111:32">gdb_register_coprocessor</name><argument_list pos:start="111:33" pos:end="113:56">(<argument pos:start="111:34" pos:end="111:35"><expr pos:start="111:34" pos:end="111:35"><name pos:start="111:34" pos:end="111:35">cs</name></expr></argument>, <argument pos:start="111:38" pos:end="111:52"><expr pos:start="111:38" pos:end="111:52"><name pos:start="111:38" pos:end="111:52">gdb_get_spe_reg</name></expr></argument>, <argument pos:start="111:55" pos:end="111:69"><expr pos:start="111:55" pos:end="111:69"><name pos:start="111:55" pos:end="111:69">gdb_set_spe_reg</name></expr></argument>,

                                 <argument pos:start="113:34" pos:end="113:35"><expr pos:start="113:34" pos:end="113:35"><literal type="number" pos:start="113:34" pos:end="113:35">34</literal></expr></argument>, <argument pos:start="113:38" pos:end="113:52"><expr pos:start="113:38" pos:end="113:52"><literal type="string" pos:start="113:38" pos:end="113:52">"power-spe.xml"</literal></expr></argument>, <argument pos:start="113:55" pos:end="113:55"><expr pos:start="113:55" pos:end="113:55"><literal type="number" pos:start="113:55" pos:end="113:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:23"><expr pos:start="119:5" pos:end="119:22"><call pos:start="119:5" pos:end="119:22"><name pos:start="119:5" pos:end="119:18">qemu_init_vcpu</name><argument_list pos:start="119:19" pos:end="119:22">(<argument pos:start="119:20" pos:end="119:21"><expr pos:start="119:20" pos:end="119:21"><name pos:start="119:20" pos:end="119:21">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="128:0"><expr pos:start="123:5" pos:end="123:34"><call pos:start="123:5" pos:end="123:34"><name pos:start="123:5" pos:end="123:23"><name pos:start="123:5" pos:end="123:7">pcc</name><operator pos:start="123:8" pos:end="123:9">-&gt;</operator><name pos:start="123:10" pos:end="123:23">parent_realize</name></name><argument_list pos:start="123:24" pos:end="123:34">(<argument pos:start="123:25" pos:end="123:27"><expr pos:start="123:25" pos:end="123:27"><name pos:start="123:25" pos:end="123:27">dev</name></expr></argument>, <argument pos:start="123:30" pos:end="123:33"><expr pos:start="123:30" pos:end="123:33"><name pos:start="123:30" pos:end="123:33">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="127:1" pos:end="127:25">#<cpp:directive pos:start="127:2" pos:end="127:3">if</cpp:directive> <expr pos:start="127:5" pos:end="127:25"><call pos:start="127:5" pos:end="127:25"><name pos:start="127:5" pos:end="127:11">defined</name><argument_list pos:start="127:12" pos:end="127:25">(<argument pos:start="127:13" pos:end="127:24"><expr pos:start="127:13" pos:end="127:24"><name pos:start="127:13" pos:end="127:24">PPC_DUMP_CPU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <block pos:start="129:5" pos:end="446:0">{<block_content pos:start="131:9" pos:end="441:23">

        <decl_stmt pos:start="131:9" pos:end="131:37"><decl pos:start="131:9" pos:end="131:36"><type pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:19">CPUPPCState</name> <modifier pos:start="131:21" pos:end="131:21">*</modifier></type><name pos:start="131:22" pos:end="131:24">env</name> <init pos:start="131:26" pos:end="131:36">= <expr pos:start="131:28" pos:end="131:36"><operator pos:start="131:28" pos:end="131:28">&amp;</operator><name pos:start="131:29" pos:end="131:36"><name pos:start="131:29" pos:end="131:31">cpu</name><operator pos:start="131:32" pos:end="131:33">-&gt;</operator><name pos:start="131:34" pos:end="131:36">env</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:55"><decl pos:start="133:9" pos:end="133:29"><type pos:start="133:9" pos:end="133:20"><specifier pos:start="133:9" pos:end="133:13">const</specifier> <name pos:start="133:15" pos:end="133:18">char</name> <modifier pos:start="133:20" pos:end="133:20">*</modifier></type><name pos:start="133:21" pos:end="133:29">mmu_model</name></decl>, <decl pos:start="133:32" pos:end="133:42"><type ref="prev" pos:start="133:9" pos:end="133:20"><modifier pos:start="133:32" pos:end="133:32">*</modifier></type><name pos:start="133:33" pos:end="133:42">excp_model</name></decl>, <decl pos:start="133:45" pos:end="133:54"><type ref="prev" pos:start="133:9" pos:end="133:20"><modifier pos:start="133:45" pos:end="133:45">*</modifier></type><name pos:start="133:46" pos:end="133:54">bus_model</name></decl>;</decl_stmt>

        <switch pos:start="135:9" pos:end="215:9">switch <condition pos:start="135:16" pos:end="135:31">(<expr pos:start="135:17" pos:end="135:30"><name pos:start="135:17" pos:end="135:30"><name pos:start="135:17" pos:end="135:19">env</name><operator pos:start="135:20" pos:end="135:21">-&gt;</operator><name pos:start="135:22" pos:end="135:30">mmu_model</name></name></expr>)</condition> <block pos:start="135:33" pos:end="215:9">{<block_content pos:start="137:9" pos:end="213:18">

        <case pos:start="137:9" pos:end="137:29">case <expr pos:start="137:14" pos:end="137:28"><name pos:start="137:14" pos:end="137:28">POWERPC_MMU_32B</name></expr>:</case>

            <expr_stmt pos:start="139:13" pos:end="139:37"><expr pos:start="139:13" pos:end="139:36"><name pos:start="139:13" pos:end="139:21">mmu_model</name> <operator pos:start="139:23" pos:end="139:23">=</operator> <literal type="string" pos:start="139:25" pos:end="139:36">"PowerPC 32"</literal></expr>;</expr_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        <case pos:start="143:9" pos:end="143:34">case <expr pos:start="143:14" pos:end="143:33"><name pos:start="143:14" pos:end="143:33">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

            <expr_stmt pos:start="145:13" pos:end="145:68"><expr pos:start="145:13" pos:end="145:67"><name pos:start="145:13" pos:end="145:21">mmu_model</name> <operator pos:start="145:23" pos:end="145:23">=</operator> <literal type="string" pos:start="145:25" pos:end="145:67">"PowerPC 6xx/7xx with software driven TLBs"</literal></expr>;</expr_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <case pos:start="149:9" pos:end="149:35">case <expr pos:start="149:14" pos:end="149:34"><name pos:start="149:14" pos:end="149:34">POWERPC_MMU_SOFT_74xx</name></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:65"><expr pos:start="151:13" pos:end="151:64"><name pos:start="151:13" pos:end="151:21">mmu_model</name> <operator pos:start="151:23" pos:end="151:23">=</operator> <literal type="string" pos:start="151:25" pos:end="151:64">"PowerPC 74xx with software driven TLBs"</literal></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        <case pos:start="155:9" pos:end="155:34">case <expr pos:start="155:14" pos:end="155:33"><name pos:start="155:14" pos:end="155:33">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

            <expr_stmt pos:start="157:13" pos:end="157:64"><expr pos:start="157:13" pos:end="157:63"><name pos:start="157:13" pos:end="157:21">mmu_model</name> <operator pos:start="157:23" pos:end="157:23">=</operator> <literal type="string" pos:start="157:25" pos:end="157:63">"PowerPC 4xx with software driven TLBs"</literal></expr>;</expr_stmt>

            <break pos:start="159:13" pos:end="159:18">break;</break>

        <case pos:start="161:9" pos:end="161:36">case <expr pos:start="161:14" pos:end="161:35"><name pos:start="161:14" pos:end="161:35">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

            <expr_stmt pos:start="163:13" pos:end="165:40"><expr pos:start="163:13" pos:end="165:39"><name pos:start="163:13" pos:end="163:21">mmu_model</name> <operator pos:start="163:23" pos:end="163:23">=</operator> <literal type="string" pos:start="163:25" pos:end="163:64">"PowerPC 4xx with software driven TLBs "</literal>

                <literal type="string" pos:start="165:17" pos:end="165:39">"and zones protections"</literal></expr>;</expr_stmt>

            <break pos:start="167:13" pos:end="167:18">break;</break>

        <case pos:start="169:9" pos:end="169:30">case <expr pos:start="169:14" pos:end="169:29"><name pos:start="169:14" pos:end="169:29">POWERPC_MMU_REAL</name></expr>:</case>

            <expr_stmt pos:start="171:13" pos:end="171:49"><expr pos:start="171:13" pos:end="171:48"><name pos:start="171:13" pos:end="171:21">mmu_model</name> <operator pos:start="171:23" pos:end="171:23">=</operator> <literal type="string" pos:start="171:25" pos:end="171:48">"PowerPC real mode only"</literal></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        <case pos:start="175:9" pos:end="175:32">case <expr pos:start="175:14" pos:end="175:31"><name pos:start="175:14" pos:end="175:31">POWERPC_MMU_MPC8xx</name></expr>:</case>

            <expr_stmt pos:start="177:13" pos:end="177:41"><expr pos:start="177:13" pos:end="177:40"><name pos:start="177:13" pos:end="177:21">mmu_model</name> <operator pos:start="177:23" pos:end="177:23">=</operator> <literal type="string" pos:start="177:25" pos:end="177:40">"PowerPC MPC8xx"</literal></expr>;</expr_stmt>

            <break pos:start="179:13" pos:end="179:18">break;</break>

        <case pos:start="181:9" pos:end="181:31">case <expr pos:start="181:14" pos:end="181:30"><name pos:start="181:14" pos:end="181:30">POWERPC_MMU_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="183:13" pos:end="183:40"><expr pos:start="183:13" pos:end="183:39"><name pos:start="183:13" pos:end="183:21">mmu_model</name> <operator pos:start="183:23" pos:end="183:23">=</operator> <literal type="string" pos:start="183:25" pos:end="183:39">"PowerPC BookE"</literal></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        <case pos:start="187:9" pos:end="187:34">case <expr pos:start="187:14" pos:end="187:33"><name pos:start="187:14" pos:end="187:33">POWERPC_MMU_BOOKE206</name></expr>:</case>

            <expr_stmt pos:start="189:13" pos:end="189:45"><expr pos:start="189:13" pos:end="189:44"><name pos:start="189:13" pos:end="189:21">mmu_model</name> <operator pos:start="189:23" pos:end="189:23">=</operator> <literal type="string" pos:start="189:25" pos:end="189:44">"PowerPC BookE 2.06"</literal></expr>;</expr_stmt>

            <break pos:start="191:13" pos:end="191:18">break;</break>

        <case pos:start="193:9" pos:end="193:29">case <expr pos:start="193:14" pos:end="193:28"><name pos:start="193:14" pos:end="193:28">POWERPC_MMU_601</name></expr>:</case>

            <expr_stmt pos:start="195:13" pos:end="195:38"><expr pos:start="195:13" pos:end="195:37"><name pos:start="195:13" pos:end="195:21">mmu_model</name> <operator pos:start="195:23" pos:end="195:23">=</operator> <literal type="string" pos:start="195:25" pos:end="195:37">"PowerPC 601"</literal></expr>;</expr_stmt>

            <break pos:start="197:13" pos:end="200:0">break;</break>

<cpp:if pos:start="199:1" pos:end="199:26">#<cpp:directive pos:start="199:2" pos:end="199:3">if</cpp:directive> <expr pos:start="199:5" pos:end="199:26"><call pos:start="199:5" pos:end="199:26"><name pos:start="199:5" pos:end="199:11">defined</name> <argument_list pos:start="199:13" pos:end="199:26">(<argument pos:start="199:14" pos:end="199:25"><expr pos:start="199:14" pos:end="199:25"><name pos:start="199:14" pos:end="199:25">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="201:9" pos:end="201:29">case <expr pos:start="201:14" pos:end="201:28"><name pos:start="201:14" pos:end="201:28">POWERPC_MMU_64B</name></expr>:</case>

            <expr_stmt pos:start="203:13" pos:end="203:37"><expr pos:start="203:13" pos:end="203:36"><name pos:start="203:13" pos:end="203:21">mmu_model</name> <operator pos:start="203:23" pos:end="203:23">=</operator> <literal type="string" pos:start="203:25" pos:end="203:36">"PowerPC 64"</literal></expr>;</expr_stmt>

            <break pos:start="205:13" pos:end="208:0">break;</break>

<cpp:endif pos:start="207:1" pos:end="207:6">#<cpp:directive pos:start="207:2" pos:end="207:6">endif</cpp:directive></cpp:endif>

        <default pos:start="209:9" pos:end="209:16">default:</default>

            <expr_stmt pos:start="211:13" pos:end="211:45"><expr pos:start="211:13" pos:end="211:44"><name pos:start="211:13" pos:end="211:21">mmu_model</name> <operator pos:start="211:23" pos:end="211:23">=</operator> <literal type="string" pos:start="211:25" pos:end="211:44">"Unknown or invalid"</literal></expr>;</expr_stmt>

            <break pos:start="213:13" pos:end="213:18">break;</break>

        </block_content>}</block></switch>

        <switch pos:start="217:9" pos:end="301:9">switch <condition pos:start="217:16" pos:end="217:32">(<expr pos:start="217:17" pos:end="217:31"><name pos:start="217:17" pos:end="217:31"><name pos:start="217:17" pos:end="217:19">env</name><operator pos:start="217:20" pos:end="217:21">-&gt;</operator><name pos:start="217:22" pos:end="217:31">excp_model</name></name></expr>)</condition> <block pos:start="217:34" pos:end="301:9">{<block_content pos:start="219:9" pos:end="299:18">

        <case pos:start="219:9" pos:end="219:30">case <expr pos:start="219:14" pos:end="219:29"><name pos:start="219:14" pos:end="219:29">POWERPC_EXCP_STD</name></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:35"><expr pos:start="221:13" pos:end="221:34"><name pos:start="221:13" pos:end="221:22">excp_model</name> <operator pos:start="221:24" pos:end="221:24">=</operator> <literal type="string" pos:start="221:26" pos:end="221:34">"PowerPC"</literal></expr>;</expr_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        <case pos:start="225:9" pos:end="225:30">case <expr pos:start="225:14" pos:end="225:29"><name pos:start="225:14" pos:end="225:29">POWERPC_EXCP_40x</name></expr>:</case>

            <expr_stmt pos:start="227:13" pos:end="227:39"><expr pos:start="227:13" pos:end="227:38"><name pos:start="227:13" pos:end="227:22">excp_model</name> <operator pos:start="227:24" pos:end="227:24">=</operator> <literal type="string" pos:start="227:26" pos:end="227:38">"PowerPC 40x"</literal></expr>;</expr_stmt>

            <break pos:start="229:13" pos:end="229:18">break;</break>

        <case pos:start="231:9" pos:end="231:30">case <expr pos:start="231:14" pos:end="231:29"><name pos:start="231:14" pos:end="231:29">POWERPC_EXCP_601</name></expr>:</case>

            <expr_stmt pos:start="233:13" pos:end="233:39"><expr pos:start="233:13" pos:end="233:38"><name pos:start="233:13" pos:end="233:22">excp_model</name> <operator pos:start="233:24" pos:end="233:24">=</operator> <literal type="string" pos:start="233:26" pos:end="233:38">"PowerPC 601"</literal></expr>;</expr_stmt>

            <break pos:start="235:13" pos:end="235:18">break;</break>

        <case pos:start="237:9" pos:end="237:30">case <expr pos:start="237:14" pos:end="237:29"><name pos:start="237:14" pos:end="237:29">POWERPC_EXCP_602</name></expr>:</case>

            <expr_stmt pos:start="239:13" pos:end="239:39"><expr pos:start="239:13" pos:end="239:38"><name pos:start="239:13" pos:end="239:22">excp_model</name> <operator pos:start="239:24" pos:end="239:24">=</operator> <literal type="string" pos:start="239:26" pos:end="239:38">"PowerPC 602"</literal></expr>;</expr_stmt>

            <break pos:start="241:13" pos:end="241:18">break;</break>

        <case pos:start="243:9" pos:end="243:30">case <expr pos:start="243:14" pos:end="243:29"><name pos:start="243:14" pos:end="243:29">POWERPC_EXCP_603</name></expr>:</case>

            <expr_stmt pos:start="245:13" pos:end="245:39"><expr pos:start="245:13" pos:end="245:38"><name pos:start="245:13" pos:end="245:22">excp_model</name> <operator pos:start="245:24" pos:end="245:24">=</operator> <literal type="string" pos:start="245:26" pos:end="245:38">"PowerPC 603"</literal></expr>;</expr_stmt>

            <break pos:start="247:13" pos:end="247:18">break;</break>

        <case pos:start="249:9" pos:end="249:31">case <expr pos:start="249:14" pos:end="249:30"><name pos:start="249:14" pos:end="249:30">POWERPC_EXCP_603E</name></expr>:</case>

            <expr_stmt pos:start="251:13" pos:end="251:40"><expr pos:start="251:13" pos:end="251:39"><name pos:start="251:13" pos:end="251:22">excp_model</name> <operator pos:start="251:24" pos:end="251:24">=</operator> <literal type="string" pos:start="251:26" pos:end="251:39">"PowerPC 603e"</literal></expr>;</expr_stmt>

            <break pos:start="253:13" pos:end="253:18">break;</break>

        <case pos:start="255:9" pos:end="255:30">case <expr pos:start="255:14" pos:end="255:29"><name pos:start="255:14" pos:end="255:29">POWERPC_EXCP_604</name></expr>:</case>

            <expr_stmt pos:start="257:13" pos:end="257:39"><expr pos:start="257:13" pos:end="257:38"><name pos:start="257:13" pos:end="257:22">excp_model</name> <operator pos:start="257:24" pos:end="257:24">=</operator> <literal type="string" pos:start="257:26" pos:end="257:38">"PowerPC 604"</literal></expr>;</expr_stmt>

            <break pos:start="259:13" pos:end="259:18">break;</break>

        <case pos:start="261:9" pos:end="261:30">case <expr pos:start="261:14" pos:end="261:29"><name pos:start="261:14" pos:end="261:29">POWERPC_EXCP_7x0</name></expr>:</case>

            <expr_stmt pos:start="263:13" pos:end="263:43"><expr pos:start="263:13" pos:end="263:42"><name pos:start="263:13" pos:end="263:22">excp_model</name> <operator pos:start="263:24" pos:end="263:24">=</operator> <literal type="string" pos:start="263:26" pos:end="263:42">"PowerPC 740/750"</literal></expr>;</expr_stmt>

            <break pos:start="265:13" pos:end="265:18">break;</break>

        <case pos:start="267:9" pos:end="267:30">case <expr pos:start="267:14" pos:end="267:29"><name pos:start="267:14" pos:end="267:29">POWERPC_EXCP_7x5</name></expr>:</case>

            <expr_stmt pos:start="269:13" pos:end="269:43"><expr pos:start="269:13" pos:end="269:42"><name pos:start="269:13" pos:end="269:22">excp_model</name> <operator pos:start="269:24" pos:end="269:24">=</operator> <literal type="string" pos:start="269:26" pos:end="269:42">"PowerPC 745/755"</literal></expr>;</expr_stmt>

            <break pos:start="271:13" pos:end="271:18">break;</break>

        <case pos:start="273:9" pos:end="273:31">case <expr pos:start="273:14" pos:end="273:30"><name pos:start="273:14" pos:end="273:30">POWERPC_EXCP_74xx</name></expr>:</case>

            <expr_stmt pos:start="275:13" pos:end="275:40"><expr pos:start="275:13" pos:end="275:39"><name pos:start="275:13" pos:end="275:22">excp_model</name> <operator pos:start="275:24" pos:end="275:24">=</operator> <literal type="string" pos:start="275:26" pos:end="275:39">"PowerPC 74xx"</literal></expr>;</expr_stmt>

            <break pos:start="277:13" pos:end="277:18">break;</break>

        <case pos:start="279:9" pos:end="279:32">case <expr pos:start="279:14" pos:end="279:31"><name pos:start="279:14" pos:end="279:31">POWERPC_EXCP_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="281:13" pos:end="281:41"><expr pos:start="281:13" pos:end="281:40"><name pos:start="281:13" pos:end="281:22">excp_model</name> <operator pos:start="281:24" pos:end="281:24">=</operator> <literal type="string" pos:start="281:26" pos:end="281:40">"PowerPC BookE"</literal></expr>;</expr_stmt>

            <break pos:start="283:13" pos:end="286:0">break;</break>

<cpp:if pos:start="285:1" pos:end="285:26">#<cpp:directive pos:start="285:2" pos:end="285:3">if</cpp:directive> <expr pos:start="285:5" pos:end="285:26"><call pos:start="285:5" pos:end="285:26"><name pos:start="285:5" pos:end="285:11">defined</name> <argument_list pos:start="285:13" pos:end="285:26">(<argument pos:start="285:14" pos:end="285:25"><expr pos:start="285:14" pos:end="285:25"><name pos:start="285:14" pos:end="285:25">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="287:9" pos:end="287:30">case <expr pos:start="287:14" pos:end="287:29"><name pos:start="287:14" pos:end="287:29">POWERPC_EXCP_970</name></expr>:</case>

            <expr_stmt pos:start="289:13" pos:end="289:39"><expr pos:start="289:13" pos:end="289:38"><name pos:start="289:13" pos:end="289:22">excp_model</name> <operator pos:start="289:24" pos:end="289:24">=</operator> <literal type="string" pos:start="289:26" pos:end="289:38">"PowerPC 970"</literal></expr>;</expr_stmt>

            <break pos:start="291:13" pos:end="294:0">break;</break>

<cpp:endif pos:start="293:1" pos:end="293:6">#<cpp:directive pos:start="293:2" pos:end="293:6">endif</cpp:directive></cpp:endif>

        <default pos:start="295:9" pos:end="295:16">default:</default>

            <expr_stmt pos:start="297:13" pos:end="297:46"><expr pos:start="297:13" pos:end="297:45"><name pos:start="297:13" pos:end="297:22">excp_model</name> <operator pos:start="297:24" pos:end="297:24">=</operator> <literal type="string" pos:start="297:26" pos:end="297:45">"Unknown or invalid"</literal></expr>;</expr_stmt>

            <break pos:start="299:13" pos:end="299:18">break;</break>

        </block_content>}</block></switch>

        <switch pos:start="303:9" pos:end="351:9">switch <condition pos:start="303:16" pos:end="303:31">(<expr pos:start="303:17" pos:end="303:30"><name pos:start="303:17" pos:end="303:30"><name pos:start="303:17" pos:end="303:19">env</name><operator pos:start="303:20" pos:end="303:21">-&gt;</operator><name pos:start="303:22" pos:end="303:30">bus_model</name></name></expr>)</condition> <block pos:start="303:33" pos:end="351:9">{<block_content pos:start="305:9" pos:end="349:18">

        <case pos:start="305:9" pos:end="305:33">case <expr pos:start="305:14" pos:end="305:32"><name pos:start="305:14" pos:end="305:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="307:13" pos:end="307:38"><expr pos:start="307:13" pos:end="307:37"><name pos:start="307:13" pos:end="307:21">bus_model</name> <operator pos:start="307:23" pos:end="307:23">=</operator> <literal type="string" pos:start="307:25" pos:end="307:37">"PowerPC 6xx"</literal></expr>;</expr_stmt>

            <break pos:start="309:13" pos:end="309:18">break;</break>

        <case pos:start="311:9" pos:end="311:35">case <expr pos:start="311:14" pos:end="311:34"><name pos:start="311:14" pos:end="311:34">PPC_FLAGS_INPUT_BookE</name></expr>:</case>

            <expr_stmt pos:start="313:13" pos:end="313:40"><expr pos:start="313:13" pos:end="313:39"><name pos:start="313:13" pos:end="313:21">bus_model</name> <operator pos:start="313:23" pos:end="313:23">=</operator> <literal type="string" pos:start="313:25" pos:end="313:39">"PowerPC BookE"</literal></expr>;</expr_stmt>

            <break pos:start="315:13" pos:end="315:18">break;</break>

        <case pos:start="317:9" pos:end="317:33">case <expr pos:start="317:14" pos:end="317:32"><name pos:start="317:14" pos:end="317:32">PPC_FLAGS_INPUT_405</name></expr>:</case>

            <expr_stmt pos:start="319:13" pos:end="319:38"><expr pos:start="319:13" pos:end="319:37"><name pos:start="319:13" pos:end="319:21">bus_model</name> <operator pos:start="319:23" pos:end="319:23">=</operator> <literal type="string" pos:start="319:25" pos:end="319:37">"PowerPC 405"</literal></expr>;</expr_stmt>

            <break pos:start="321:13" pos:end="321:18">break;</break>

        <case pos:start="323:9" pos:end="323:33">case <expr pos:start="323:14" pos:end="323:32"><name pos:start="323:14" pos:end="323:32">PPC_FLAGS_INPUT_401</name></expr>:</case>

            <expr_stmt pos:start="325:13" pos:end="325:42"><expr pos:start="325:13" pos:end="325:41"><name pos:start="325:13" pos:end="325:21">bus_model</name> <operator pos:start="325:23" pos:end="325:23">=</operator> <literal type="string" pos:start="325:25" pos:end="325:41">"PowerPC 401/403"</literal></expr>;</expr_stmt>

            <break pos:start="327:13" pos:end="327:18">break;</break>

        <case pos:start="329:9" pos:end="329:34">case <expr pos:start="329:14" pos:end="329:33"><name pos:start="329:14" pos:end="329:33">PPC_FLAGS_INPUT_RCPU</name></expr>:</case>

            <expr_stmt pos:start="331:13" pos:end="331:40"><expr pos:start="331:13" pos:end="331:39"><name pos:start="331:13" pos:end="331:21">bus_model</name> <operator pos:start="331:23" pos:end="331:23">=</operator> <literal type="string" pos:start="331:25" pos:end="331:39">"RCPU / MPC8xx"</literal></expr>;</expr_stmt>

            <break pos:start="333:13" pos:end="336:0">break;</break>

<cpp:if pos:start="335:1" pos:end="335:26">#<cpp:directive pos:start="335:2" pos:end="335:3">if</cpp:directive> <expr pos:start="335:5" pos:end="335:26"><call pos:start="335:5" pos:end="335:26"><name pos:start="335:5" pos:end="335:11">defined</name> <argument_list pos:start="335:13" pos:end="335:26">(<argument pos:start="335:14" pos:end="335:25"><expr pos:start="335:14" pos:end="335:25"><name pos:start="335:14" pos:end="335:25">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="337:9" pos:end="337:33">case <expr pos:start="337:14" pos:end="337:32"><name pos:start="337:14" pos:end="337:32">PPC_FLAGS_INPUT_970</name></expr>:</case>

            <expr_stmt pos:start="339:13" pos:end="339:38"><expr pos:start="339:13" pos:end="339:37"><name pos:start="339:13" pos:end="339:21">bus_model</name> <operator pos:start="339:23" pos:end="339:23">=</operator> <literal type="string" pos:start="339:25" pos:end="339:37">"PowerPC 970"</literal></expr>;</expr_stmt>

            <break pos:start="341:13" pos:end="344:0">break;</break>

<cpp:endif pos:start="343:1" pos:end="343:6">#<cpp:directive pos:start="343:2" pos:end="343:6">endif</cpp:directive></cpp:endif>

        <default pos:start="345:9" pos:end="345:16">default:</default>

            <expr_stmt pos:start="347:13" pos:end="347:45"><expr pos:start="347:13" pos:end="347:44"><name pos:start="347:13" pos:end="347:21">bus_model</name> <operator pos:start="347:23" pos:end="347:23">=</operator> <literal type="string" pos:start="347:25" pos:end="347:44">"Unknown or invalid"</literal></expr>;</expr_stmt>

            <break pos:start="349:13" pos:end="349:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="353:9" pos:end="362:0"><expr pos:start="353:9" pos:end="359:50"><call pos:start="353:9" pos:end="359:50"><name pos:start="353:9" pos:end="353:14">printf</name><argument_list pos:start="353:15" pos:end="359:50">(<argument pos:start="353:16" pos:end="355:44"><expr pos:start="353:16" pos:end="355:44"><literal type="string" pos:start="353:16" pos:end="353:50">"PowerPC %-12s : PVR %08x MSR %016"</literal> <name pos:start="353:52" pos:end="353:57">PRIx64</name> <literal type="string" pos:start="353:59" pos:end="353:62">"\n"</literal>

               <literal type="string" pos:start="355:16" pos:end="355:44">"    MMU model        : %s\n"</literal></expr></argument>,

               <argument pos:start="357:16" pos:end="357:55"><expr pos:start="357:16" pos:end="357:55"><call pos:start="357:16" pos:end="357:55"><name pos:start="357:16" pos:end="357:36">object_class_get_name</name><argument_list pos:start="357:37" pos:end="357:55">(<argument pos:start="357:38" pos:end="357:54"><expr pos:start="357:38" pos:end="357:54"><call pos:start="357:38" pos:end="357:54"><name pos:start="357:38" pos:end="357:49">OBJECT_CLASS</name><argument_list pos:start="357:50" pos:end="357:54">(<argument pos:start="357:51" pos:end="357:53"><expr pos:start="357:51" pos:end="357:53"><name pos:start="357:51" pos:end="357:53">pcc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

               <argument pos:start="359:16" pos:end="359:23"><expr pos:start="359:16" pos:end="359:23"><name pos:start="359:16" pos:end="359:23"><name pos:start="359:16" pos:end="359:18">pcc</name><operator pos:start="359:19" pos:end="359:20">-&gt;</operator><name pos:start="359:21" pos:end="359:23">pvr</name></name></expr></argument>, <argument pos:start="359:26" pos:end="359:38"><expr pos:start="359:26" pos:end="359:38"><name pos:start="359:26" pos:end="359:38"><name pos:start="359:26" pos:end="359:28">pcc</name><operator pos:start="359:29" pos:end="359:30">-&gt;</operator><name pos:start="359:31" pos:end="359:38">msr_mask</name></name></expr></argument>, <argument pos:start="359:41" pos:end="359:49"><expr pos:start="359:41" pos:end="359:49"><name pos:start="359:41" pos:end="359:49">mmu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="361:1" pos:end="361:30">#<cpp:directive pos:start="361:2" pos:end="361:3">if</cpp:directive> <expr pos:start="361:5" pos:end="361:30"><operator pos:start="361:5" pos:end="361:5">!</operator><call pos:start="361:6" pos:end="361:30"><name pos:start="361:6" pos:end="361:12">defined</name><argument_list pos:start="361:13" pos:end="361:30">(<argument pos:start="361:14" pos:end="361:29"><expr pos:start="361:14" pos:end="361:29"><name pos:start="361:14" pos:end="361:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="363:9" pos:end="374:0"><if pos:start="363:9" pos:end="374:0">if <condition pos:start="363:12" pos:end="363:26">(<expr pos:start="363:13" pos:end="363:25"><name pos:start="363:13" pos:end="363:25"><name pos:start="363:13" pos:end="363:15">env</name><operator pos:start="363:16" pos:end="363:17">-&gt;</operator><name pos:start="363:18" pos:end="363:20">tlb</name><operator pos:start="363:21" pos:end="363:21">.</operator><name pos:start="363:22" pos:end="363:25">tlb6</name></name></expr>)</condition> <block pos:start="363:28" pos:end="374:0">{<block_content pos:start="365:13" pos:end="369:33">

            <expr_stmt pos:start="365:13" pos:end="369:33"><expr pos:start="365:13" pos:end="369:32"><call pos:start="365:13" pos:end="369:32"><name pos:start="365:13" pos:end="365:18">printf</name><argument_list pos:start="365:19" pos:end="369:32">(<argument pos:start="365:20" pos:end="365:66"><expr pos:start="365:20" pos:end="365:66"><literal type="string" pos:start="365:20" pos:end="365:66">"                       %d %s TLB in %d ways\n"</literal></expr></argument>,

                   <argument pos:start="367:20" pos:end="367:30"><expr pos:start="367:20" pos:end="367:30"><name pos:start="367:20" pos:end="367:30"><name pos:start="367:20" pos:end="367:22">env</name><operator pos:start="367:23" pos:end="367:24">-&gt;</operator><name pos:start="367:25" pos:end="367:30">nb_tlb</name></name></expr></argument>, <argument pos:start="367:33" pos:end="367:68"><expr pos:start="367:33" pos:end="367:68"><ternary pos:start="367:33" pos:end="367:68"><condition pos:start="367:33" pos:end="367:46"><expr pos:start="367:33" pos:end="367:44"><name pos:start="367:33" pos:end="367:44"><name pos:start="367:33" pos:end="367:35">env</name><operator pos:start="367:36" pos:end="367:37">-&gt;</operator><name pos:start="367:38" pos:end="367:44">id_tlbs</name></name></expr> ?</condition><then pos:start="367:48" pos:end="367:57"> <expr pos:start="367:48" pos:end="367:57"><literal type="string" pos:start="367:48" pos:end="367:57">"splitted"</literal></expr> </then><else pos:start="367:59" pos:end="367:68">: <expr pos:start="367:61" pos:end="367:68"><literal type="string" pos:start="367:61" pos:end="367:68">"merged"</literal></expr></else></ternary></expr></argument>,

                   <argument pos:start="369:20" pos:end="369:31"><expr pos:start="369:20" pos:end="369:31"><name pos:start="369:20" pos:end="369:31"><name pos:start="369:20" pos:end="369:22">env</name><operator pos:start="369:23" pos:end="369:24">-&gt;</operator><name pos:start="369:25" pos:end="369:31">nb_ways</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="373:1" pos:end="373:6">#<cpp:directive pos:start="373:2" pos:end="373:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="375:9" pos:end="379:38"><expr pos:start="375:9" pos:end="379:37"><call pos:start="375:9" pos:end="379:37"><name pos:start="375:9" pos:end="375:14">printf</name><argument_list pos:start="375:15" pos:end="379:37">(<argument pos:start="375:16" pos:end="377:44"><expr pos:start="375:16" pos:end="377:44"><literal type="string" pos:start="375:16" pos:end="375:44">"    Exceptions model : %s\n"</literal>

               <literal type="string" pos:start="377:16" pos:end="377:44">"    Bus model        : %s\n"</literal></expr></argument>,

               <argument pos:start="379:16" pos:end="379:25"><expr pos:start="379:16" pos:end="379:25"><name pos:start="379:16" pos:end="379:25">excp_model</name></expr></argument>, <argument pos:start="379:28" pos:end="379:36"><expr pos:start="379:28" pos:end="379:36"><name pos:start="379:28" pos:end="379:36">bus_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:43"><expr pos:start="381:9" pos:end="381:42"><call pos:start="381:9" pos:end="381:42"><name pos:start="381:9" pos:end="381:14">printf</name><argument_list pos:start="381:15" pos:end="381:42">(<argument pos:start="381:16" pos:end="381:41"><expr pos:start="381:16" pos:end="381:41"><literal type="string" pos:start="381:16" pos:end="381:41">"    MSR features     :\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="383:9" pos:end="391:72"><if pos:start="383:9" pos:end="387:25">if <condition pos:start="383:12" pos:end="383:42">(<expr pos:start="383:13" pos:end="383:41"><name pos:start="383:13" pos:end="383:22"><name pos:start="383:13" pos:end="383:15">env</name><operator pos:start="383:16" pos:end="383:17">-&gt;</operator><name pos:start="383:18" pos:end="383:22">flags</name></name> <operator pos:start="383:24" pos:end="383:24">&amp;</operator> <name pos:start="383:26" pos:end="383:41">POWERPC_FLAG_SPE</name></expr>)</condition><block type="pseudo" pos:start="385:13" pos:end="387:25"><block_content pos:start="385:13" pos:end="387:25">

            <expr_stmt pos:start="385:13" pos:end="387:25"><expr pos:start="385:13" pos:end="387:24"><call pos:start="385:13" pos:end="387:24"><name pos:start="385:13" pos:end="385:18">printf</name><argument_list pos:start="385:19" pos:end="387:24">(<argument pos:start="385:20" pos:end="387:23"><expr pos:start="385:20" pos:end="387:23"><literal type="string" pos:start="385:20" pos:end="385:76">"                        signal processing engine enable"</literal>

                   <literal type="string" pos:start="387:20" pos:end="387:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="389:9" pos:end="391:72">else if <condition pos:start="389:17" pos:end="389:47">(<expr pos:start="389:18" pos:end="389:46"><name pos:start="389:18" pos:end="389:27"><name pos:start="389:18" pos:end="389:20">env</name><operator pos:start="389:21" pos:end="389:22">-&gt;</operator><name pos:start="389:23" pos:end="389:27">flags</name></name> <operator pos:start="389:29" pos:end="389:29">&amp;</operator> <name pos:start="389:31" pos:end="389:46">POWERPC_FLAG_VRE</name></expr>)</condition><block type="pseudo" pos:start="391:13" pos:end="391:72"><block_content pos:start="391:13" pos:end="391:72">

            <expr_stmt pos:start="391:13" pos:end="391:72"><expr pos:start="391:13" pos:end="391:71"><call pos:start="391:13" pos:end="391:71"><name pos:start="391:13" pos:end="391:18">printf</name><argument_list pos:start="391:19" pos:end="391:71">(<argument pos:start="391:20" pos:end="391:70"><expr pos:start="391:20" pos:end="391:70"><literal type="string" pos:start="391:20" pos:end="391:70">"                        vector processor enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="393:9" pos:end="399:70"><if pos:start="393:9" pos:end="395:63">if <condition pos:start="393:12" pos:end="393:43">(<expr pos:start="393:13" pos:end="393:42"><name pos:start="393:13" pos:end="393:22"><name pos:start="393:13" pos:end="393:15">env</name><operator pos:start="393:16" pos:end="393:17">-&gt;</operator><name pos:start="393:18" pos:end="393:22">flags</name></name> <operator pos:start="393:24" pos:end="393:24">&amp;</operator> <name pos:start="393:26" pos:end="393:42">POWERPC_FLAG_TGPR</name></expr>)</condition><block type="pseudo" pos:start="395:13" pos:end="395:63"><block_content pos:start="395:13" pos:end="395:63">

            <expr_stmt pos:start="395:13" pos:end="395:63"><expr pos:start="395:13" pos:end="395:62"><call pos:start="395:13" pos:end="395:62"><name pos:start="395:13" pos:end="395:18">printf</name><argument_list pos:start="395:19" pos:end="395:62">(<argument pos:start="395:20" pos:end="395:61"><expr pos:start="395:20" pos:end="395:61"><literal type="string" pos:start="395:20" pos:end="395:61">"                        temporary GPRs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="397:9" pos:end="399:70">else if <condition pos:start="397:17" pos:end="397:46">(<expr pos:start="397:18" pos:end="397:45"><name pos:start="397:18" pos:end="397:27"><name pos:start="397:18" pos:end="397:20">env</name><operator pos:start="397:21" pos:end="397:22">-&gt;</operator><name pos:start="397:23" pos:end="397:27">flags</name></name> <operator pos:start="397:29" pos:end="397:29">&amp;</operator> <name pos:start="397:31" pos:end="397:45">POWERPC_FLAG_CE</name></expr>)</condition><block type="pseudo" pos:start="399:13" pos:end="399:70"><block_content pos:start="399:13" pos:end="399:70">

            <expr_stmt pos:start="399:13" pos:end="399:70"><expr pos:start="399:13" pos:end="399:69"><call pos:start="399:13" pos:end="399:69"><name pos:start="399:13" pos:end="399:18">printf</name><argument_list pos:start="399:19" pos:end="399:69">(<argument pos:start="399:20" pos:end="399:68"><expr pos:start="399:20" pos:end="399:68"><literal type="string" pos:start="399:20" pos:end="399:68">"                        critical input enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="401:9" pos:end="411:69"><if pos:start="401:9" pos:end="403:71">if <condition pos:start="401:12" pos:end="401:41">(<expr pos:start="401:13" pos:end="401:40"><name pos:start="401:13" pos:end="401:22"><name pos:start="401:13" pos:end="401:15">env</name><operator pos:start="401:16" pos:end="401:17">-&gt;</operator><name pos:start="401:18" pos:end="401:22">flags</name></name> <operator pos:start="401:24" pos:end="401:24">&amp;</operator> <name pos:start="401:26" pos:end="401:40">POWERPC_FLAG_SE</name></expr>)</condition><block type="pseudo" pos:start="403:13" pos:end="403:71"><block_content pos:start="403:13" pos:end="403:71">

            <expr_stmt pos:start="403:13" pos:end="403:71"><expr pos:start="403:13" pos:end="403:70"><call pos:start="403:13" pos:end="403:70"><name pos:start="403:13" pos:end="403:18">printf</name><argument_list pos:start="403:19" pos:end="403:70">(<argument pos:start="403:20" pos:end="403:69"><expr pos:start="403:20" pos:end="403:69"><literal type="string" pos:start="403:20" pos:end="403:69">"                        single-step trace mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="405:9" pos:end="407:66">else if <condition pos:start="405:17" pos:end="405:47">(<expr pos:start="405:18" pos:end="405:46"><name pos:start="405:18" pos:end="405:27"><name pos:start="405:18" pos:end="405:20">env</name><operator pos:start="405:21" pos:end="405:22">-&gt;</operator><name pos:start="405:23" pos:end="405:27">flags</name></name> <operator pos:start="405:29" pos:end="405:29">&amp;</operator> <name pos:start="405:31" pos:end="405:46">POWERPC_FLAG_DWE</name></expr>)</condition><block type="pseudo" pos:start="407:13" pos:end="407:66"><block_content pos:start="407:13" pos:end="407:66">

            <expr_stmt pos:start="407:13" pos:end="407:66"><expr pos:start="407:13" pos:end="407:65"><call pos:start="407:13" pos:end="407:65"><name pos:start="407:13" pos:end="407:18">printf</name><argument_list pos:start="407:19" pos:end="407:65">(<argument pos:start="407:20" pos:end="407:64"><expr pos:start="407:20" pos:end="407:64"><literal type="string" pos:start="407:20" pos:end="407:64">"                        debug wait enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="409:9" pos:end="411:69">else if <condition pos:start="409:17" pos:end="409:48">(<expr pos:start="409:18" pos:end="409:47"><name pos:start="409:18" pos:end="409:27"><name pos:start="409:18" pos:end="409:20">env</name><operator pos:start="409:21" pos:end="409:22">-&gt;</operator><name pos:start="409:23" pos:end="409:27">flags</name></name> <operator pos:start="409:29" pos:end="409:29">&amp;</operator> <name pos:start="409:31" pos:end="409:47">POWERPC_FLAG_UBLE</name></expr>)</condition><block type="pseudo" pos:start="411:13" pos:end="411:69"><block_content pos:start="411:13" pos:end="411:69">

            <expr_stmt pos:start="411:13" pos:end="411:69"><expr pos:start="411:13" pos:end="411:68"><call pos:start="411:13" pos:end="411:68"><name pos:start="411:13" pos:end="411:18">printf</name><argument_list pos:start="411:19" pos:end="411:68">(<argument pos:start="411:20" pos:end="411:67"><expr pos:start="411:20" pos:end="411:67"><literal type="string" pos:start="411:20" pos:end="411:67">"                        user BTB lock enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="413:9" pos:end="419:71"><if pos:start="413:9" pos:end="415:71">if <condition pos:start="413:12" pos:end="413:41">(<expr pos:start="413:13" pos:end="413:40"><name pos:start="413:13" pos:end="413:22"><name pos:start="413:13" pos:end="413:15">env</name><operator pos:start="413:16" pos:end="413:17">-&gt;</operator><name pos:start="413:18" pos:end="413:22">flags</name></name> <operator pos:start="413:24" pos:end="413:24">&amp;</operator> <name pos:start="413:26" pos:end="413:40">POWERPC_FLAG_BE</name></expr>)</condition><block type="pseudo" pos:start="415:13" pos:end="415:71"><block_content pos:start="415:13" pos:end="415:71">

            <expr_stmt pos:start="415:13" pos:end="415:71"><expr pos:start="415:13" pos:end="415:70"><call pos:start="415:13" pos:end="415:70"><name pos:start="415:13" pos:end="415:18">printf</name><argument_list pos:start="415:19" pos:end="415:70">(<argument pos:start="415:20" pos:end="415:69"><expr pos:start="415:20" pos:end="415:69"><literal type="string" pos:start="415:20" pos:end="415:69">"                        branch-step trace mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="417:9" pos:end="419:71">else if <condition pos:start="417:17" pos:end="417:46">(<expr pos:start="417:18" pos:end="417:45"><name pos:start="417:18" pos:end="417:27"><name pos:start="417:18" pos:end="417:20">env</name><operator pos:start="417:21" pos:end="417:22">-&gt;</operator><name pos:start="417:23" pos:end="417:27">flags</name></name> <operator pos:start="417:29" pos:end="417:29">&amp;</operator> <name pos:start="417:31" pos:end="417:45">POWERPC_FLAG_DE</name></expr>)</condition><block type="pseudo" pos:start="419:13" pos:end="419:71"><block_content pos:start="419:13" pos:end="419:71">

            <expr_stmt pos:start="419:13" pos:end="419:71"><expr pos:start="419:13" pos:end="419:70"><call pos:start="419:13" pos:end="419:70"><name pos:start="419:13" pos:end="419:18">printf</name><argument_list pos:start="419:19" pos:end="419:70">(<argument pos:start="419:20" pos:end="419:69"><expr pos:start="419:20" pos:end="419:69"><literal type="string" pos:start="419:20" pos:end="419:69">"                        debug interrupt enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="421:9" pos:end="427:73"><if pos:start="421:9" pos:end="423:69">if <condition pos:start="421:12" pos:end="421:41">(<expr pos:start="421:13" pos:end="421:40"><name pos:start="421:13" pos:end="421:22"><name pos:start="421:13" pos:end="421:15">env</name><operator pos:start="421:16" pos:end="421:17">-&gt;</operator><name pos:start="421:18" pos:end="421:22">flags</name></name> <operator pos:start="421:24" pos:end="421:24">&amp;</operator> <name pos:start="421:26" pos:end="421:40">POWERPC_FLAG_PX</name></expr>)</condition><block type="pseudo" pos:start="423:13" pos:end="423:69"><block_content pos:start="423:13" pos:end="423:69">

            <expr_stmt pos:start="423:13" pos:end="423:69"><expr pos:start="423:13" pos:end="423:68"><call pos:start="423:13" pos:end="423:68"><name pos:start="423:13" pos:end="423:18">printf</name><argument_list pos:start="423:19" pos:end="423:68">(<argument pos:start="423:20" pos:end="423:67"><expr pos:start="423:20" pos:end="423:67"><literal type="string" pos:start="423:20" pos:end="423:67">"                        inclusive protection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="425:9" pos:end="427:73">else if <condition pos:start="425:17" pos:end="425:47">(<expr pos:start="425:18" pos:end="425:46"><name pos:start="425:18" pos:end="425:27"><name pos:start="425:18" pos:end="425:20">env</name><operator pos:start="425:21" pos:end="425:22">-&gt;</operator><name pos:start="425:23" pos:end="425:27">flags</name></name> <operator pos:start="425:29" pos:end="425:29">&amp;</operator> <name pos:start="425:31" pos:end="425:46">POWERPC_FLAG_PMM</name></expr>)</condition><block type="pseudo" pos:start="427:13" pos:end="427:73"><block_content pos:start="427:13" pos:end="427:73">

            <expr_stmt pos:start="427:13" pos:end="427:73"><expr pos:start="427:13" pos:end="427:72"><call pos:start="427:13" pos:end="427:72"><name pos:start="427:13" pos:end="427:18">printf</name><argument_list pos:start="427:19" pos:end="427:72">(<argument pos:start="427:20" pos:end="427:71"><expr pos:start="427:20" pos:end="427:71"><literal type="string" pos:start="427:20" pos:end="427:71">"                        performance monitor mark\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="429:9" pos:end="431:53"><if pos:start="429:9" pos:end="431:53">if <condition pos:start="429:12" pos:end="429:44">(<expr pos:start="429:13" pos:end="429:43"><name pos:start="429:13" pos:end="429:22"><name pos:start="429:13" pos:end="429:15">env</name><operator pos:start="429:16" pos:end="429:17">-&gt;</operator><name pos:start="429:18" pos:end="429:22">flags</name></name> <operator pos:start="429:24" pos:end="429:25">==</operator> <name pos:start="429:27" pos:end="429:43">POWERPC_FLAG_NONE</name></expr>)</condition><block type="pseudo" pos:start="431:13" pos:end="431:53"><block_content pos:start="431:13" pos:end="431:53">

            <expr_stmt pos:start="431:13" pos:end="431:53"><expr pos:start="431:13" pos:end="431:52"><call pos:start="431:13" pos:end="431:52"><name pos:start="431:13" pos:end="431:18">printf</name><argument_list pos:start="431:19" pos:end="431:52">(<argument pos:start="431:20" pos:end="431:51"><expr pos:start="431:20" pos:end="431:51"><literal type="string" pos:start="431:20" pos:end="431:51">"                        none\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="433:9" pos:end="435:78"><expr pos:start="433:9" pos:end="435:77"><call pos:start="433:9" pos:end="435:77"><name pos:start="433:9" pos:end="433:14">printf</name><argument_list pos:start="433:15" pos:end="435:77">(<argument pos:start="433:16" pos:end="433:61"><expr pos:start="433:16" pos:end="433:61"><literal type="string" pos:start="433:16" pos:end="433:61">"    Time-base/decrementer clock source: %s\n"</literal></expr></argument>,

               <argument pos:start="435:16" pos:end="435:76"><expr pos:start="435:16" pos:end="435:76"><ternary pos:start="435:16" pos:end="435:76"><condition pos:start="435:16" pos:end="435:50"><expr pos:start="435:16" pos:end="435:48"><name pos:start="435:16" pos:end="435:25"><name pos:start="435:16" pos:end="435:18">env</name><operator pos:start="435:19" pos:end="435:20">-&gt;</operator><name pos:start="435:21" pos:end="435:25">flags</name></name> <operator pos:start="435:27" pos:end="435:27">&amp;</operator> <name pos:start="435:29" pos:end="435:48">POWERPC_FLAG_RTC_CLK</name></expr> ?</condition><then pos:start="435:52" pos:end="435:62"> <expr pos:start="435:52" pos:end="435:62"><literal type="string" pos:start="435:52" pos:end="435:62">"RTC clock"</literal></expr> </then><else pos:start="435:64" pos:end="435:76">: <expr pos:start="435:66" pos:end="435:76"><literal type="string" pos:start="435:66" pos:end="435:76">"bus clock"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="437:9" pos:end="437:28"><expr pos:start="437:9" pos:end="437:27"><call pos:start="437:9" pos:end="437:27"><name pos:start="437:9" pos:end="437:22">dump_ppc_insns</name><argument_list pos:start="437:23" pos:end="437:27">(<argument pos:start="437:24" pos:end="437:26"><expr pos:start="437:24" pos:end="437:26"><name pos:start="437:24" pos:end="437:26">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:27"><expr pos:start="439:9" pos:end="439:26"><call pos:start="439:9" pos:end="439:26"><name pos:start="439:9" pos:end="439:21">dump_ppc_sprs</name><argument_list pos:start="439:22" pos:end="439:26">(<argument pos:start="439:23" pos:end="439:25"><expr pos:start="439:23" pos:end="439:25"><name pos:start="439:23" pos:end="439:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="441:9" pos:end="441:23"><expr pos:start="441:9" pos:end="441:22"><call pos:start="441:9" pos:end="441:22"><name pos:start="441:9" pos:end="441:14">fflush</name><argument_list pos:start="441:15" pos:end="441:22">(<argument pos:start="441:16" pos:end="441:21"><expr pos:start="441:16" pos:end="441:21"><name pos:start="441:16" pos:end="441:21">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="445:1" pos:end="445:6">#<cpp:directive pos:start="445:2" pos:end="445:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
