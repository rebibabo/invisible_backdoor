<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18157.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">vscsi_queue_cmd</name><parameter_list pos:start="1:27" pos:end="1:57">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:37">VSCSIState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:51">vscsi_req</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">req</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:9">union</name> <name pos:start="5:11" pos:end="5:16">srp_iu</name></name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">srp</name> <init pos:start="5:23" pos:end="5:36">= <expr pos:start="5:25" pos:end="5:36"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:28">req</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:32">iu</name><operator pos:start="5:33" pos:end="5:33">.</operator><name pos:start="5:34" pos:end="5:36">srp</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">SCSIDevice</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">sdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>, <decl pos:start="9:12" pos:end="9:13"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:13">id</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:18">lun</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><call pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:23">vscsi_decode_id_lun</name><argument_list pos:start="13:24" pos:end="13:61">(<argument pos:start="13:25" pos:end="13:49"><expr pos:start="13:25" pos:end="13:49"><call pos:start="13:25" pos:end="13:49"><name pos:start="13:25" pos:end="13:35">be64_to_cpu</name><argument_list pos:start="13:36" pos:end="13:49">(<argument pos:start="13:37" pos:end="13:48"><expr pos:start="13:37" pos:end="13:48"><name pos:start="13:37" pos:end="13:48"><name pos:start="13:37" pos:end="13:39">srp</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:44">cmd</name><operator pos:start="13:45" pos:end="13:45">.</operator><name pos:start="13:46" pos:end="13:48">lun</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="13:52" pos:end="13:54"><expr pos:start="13:52" pos:end="13:54"><operator pos:start="13:52" pos:end="13:52">&amp;</operator><name pos:start="13:53" pos:end="13:54">id</name></expr></argument>, <argument pos:start="13:57" pos:end="13:60"><expr pos:start="13:57" pos:end="13:60"><operator pos:start="13:57" pos:end="13:57">&amp;</operator><name pos:start="13:58" pos:end="13:60">lun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:61">/* Qemu vs. linux issue with LUNs to be sorted out ... */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:57"><expr pos:start="19:5" pos:end="19:56"><name pos:start="19:5" pos:end="19:8">sdev</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <ternary pos:start="19:12" pos:end="19:56"><condition pos:start="19:12" pos:end="19:33"><expr pos:start="19:12" pos:end="19:31"><operator pos:start="19:12" pos:end="19:12">(</operator><name pos:start="19:13" pos:end="19:14">id</name> <operator pos:start="19:16" pos:end="19:16">&lt;</operator> <literal type="number" pos:start="19:18" pos:end="19:18">8</literal> <operator pos:start="19:20" pos:end="19:21">&amp;&amp;</operator> <name pos:start="19:23" pos:end="19:25">lun</name> <operator pos:start="19:27" pos:end="19:27">&lt;</operator> <literal type="number" pos:start="19:29" pos:end="19:30">16</literal><operator pos:start="19:31" pos:end="19:31">)</operator></expr> ?</condition><then pos:start="19:35" pos:end="19:49"> <expr pos:start="19:35" pos:end="19:49"><name pos:start="19:35" pos:end="19:49"><name pos:start="19:35" pos:end="19:35">s</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:40">bus</name><operator pos:start="19:41" pos:end="19:41">.</operator><name pos:start="19:42" pos:end="19:45">devs</name><index pos:start="19:46" pos:end="19:49">[<expr pos:start="19:47" pos:end="19:48"><name pos:start="19:47" pos:end="19:48">id</name></expr>]</index></name></expr> </then><else pos:start="19:51" pos:end="19:56">: <expr pos:start="19:53" pos:end="19:56"><name pos:start="19:53" pos:end="19:56">NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="37:5"><if pos:start="21:5" pos:end="37:5">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:13">sdev</name></expr>)</condition> <block pos:start="21:16" pos:end="37:5">{<block_content pos:start="23:9" pos:end="35:19">

        <expr_stmt pos:start="23:9" pos:end="23:64"><expr pos:start="23:9" pos:end="23:63"><call pos:start="23:9" pos:end="23:63"><name pos:start="23:9" pos:end="23:15">dprintf</name><argument_list pos:start="23:16" pos:end="23:63">(<argument pos:start="23:17" pos:end="23:58"><expr pos:start="23:17" pos:end="23:58"><literal type="string" pos:start="23:17" pos:end="23:58">"VSCSI: Command for id %d with no drive\n"</literal></expr></argument>, <argument pos:start="23:61" pos:end="23:62"><expr pos:start="23:61" pos:end="23:62"><name pos:start="23:61" pos:end="23:62">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="35:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:39">(<expr pos:start="25:13" pos:end="25:38"><name pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:15">srp</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:20">cmd</name><operator pos:start="25:21" pos:end="25:21">.</operator><name pos:start="25:22" pos:end="25:24">cdb</name><index pos:start="25:25" pos:end="25:27">[<expr pos:start="25:26" pos:end="25:26"><literal type="number" pos:start="25:26" pos:end="25:26">0</literal></expr>]</index></name> <operator pos:start="25:29" pos:end="25:30">==</operator> <name pos:start="25:32" pos:end="25:38">INQUIRY</name></expr>)</condition> <block pos:start="25:41" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:44">

            <expr_stmt pos:start="27:13" pos:end="27:44"><expr pos:start="27:13" pos:end="27:43"><call pos:start="27:13" pos:end="27:43"><name pos:start="27:13" pos:end="27:35">vscsi_inquiry_no_target</name><argument_list pos:start="27:36" pos:end="27:43">(<argument pos:start="27:37" pos:end="27:37"><expr pos:start="27:37" pos:end="27:37"><name pos:start="27:37" pos:end="27:37">s</name></expr></argument>, <argument pos:start="27:40" pos:end="27:42"><expr pos:start="27:40" pos:end="27:42"><name pos:start="27:40" pos:end="27:42">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="35:9">else <block pos:start="29:16" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:58">

            <expr_stmt pos:start="31:13" pos:end="31:68"><expr pos:start="31:13" pos:end="31:67"><call pos:start="31:13" pos:end="31:67"><name pos:start="31:13" pos:end="31:30">vscsi_makeup_sense</name><argument_list pos:start="31:31" pos:end="31:67">(<argument pos:start="31:32" pos:end="31:32"><expr pos:start="31:32" pos:end="31:32"><name pos:start="31:32" pos:end="31:32">s</name></expr></argument>, <argument pos:start="31:35" pos:end="31:37"><expr pos:start="31:35" pos:end="31:37"><name pos:start="31:35" pos:end="31:37">req</name></expr></argument>, <argument pos:start="31:40" pos:end="31:54"><expr pos:start="31:40" pos:end="31:54"><name pos:start="31:40" pos:end="31:54">ILLEGAL_REQUEST</name></expr></argument>, <argument pos:start="31:57" pos:end="31:60"><expr pos:start="31:57" pos:end="31:60"><literal type="number" pos:start="31:57" pos:end="31:60">0x24</literal></expr></argument>, <argument pos:start="31:63" pos:end="31:66"><expr pos:start="31:63" pos:end="31:66"><literal type="number" pos:start="31:63" pos:end="31:66">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:58"><expr pos:start="33:13" pos:end="33:57"><call pos:start="33:13" pos:end="33:57"><name pos:start="33:13" pos:end="33:26">vscsi_send_rsp</name><argument_list pos:start="33:27" pos:end="33:57">(<argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">s</name></expr></argument>, <argument pos:start="33:31" pos:end="33:33"><expr pos:start="33:31" pos:end="33:33"><name pos:start="33:31" pos:end="33:33">req</name></expr></argument>, <argument pos:start="33:36" pos:end="33:50"><expr pos:start="33:36" pos:end="33:50"><name pos:start="33:36" pos:end="33:50">CHECK_CONDITION</name></expr></argument>, <argument pos:start="33:53" pos:end="33:53"><expr pos:start="33:53" pos:end="33:53"><literal type="number" pos:start="33:53" pos:end="33:53">0</literal></expr></argument>, <argument pos:start="33:56" pos:end="33:56"><expr pos:start="33:56" pos:end="33:56"><literal type="number" pos:start="33:56" pos:end="33:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt> <return pos:start="35:11" pos:end="35:19">return <expr pos:start="35:18" pos:end="35:18"><literal type="number" pos:start="35:18" pos:end="35:18">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:19"><expr pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:7">req</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:12">lun</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:18">lun</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:56"><expr pos:start="43:5" pos:end="43:55"><name pos:start="43:5" pos:end="43:13"><name pos:start="43:5" pos:end="43:7">req</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:13">sreq</name></name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:55"><name pos:start="43:17" pos:end="43:28">scsi_req_new</name><argument_list pos:start="43:29" pos:end="43:55">(<argument pos:start="43:30" pos:end="43:33"><expr pos:start="43:30" pos:end="43:33"><name pos:start="43:30" pos:end="43:33">sdev</name></expr></argument>, <argument pos:start="43:36" pos:end="43:44"><expr pos:start="43:36" pos:end="43:44"><name pos:start="43:36" pos:end="43:44"><name pos:start="43:36" pos:end="43:38">req</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:44">qtag</name></name></expr></argument>, <argument pos:start="43:47" pos:end="43:49"><expr pos:start="43:47" pos:end="43:49"><name pos:start="43:47" pos:end="43:49">lun</name></expr></argument>, <argument pos:start="43:52" pos:end="43:54"><expr pos:start="43:52" pos:end="43:54"><name pos:start="43:52" pos:end="43:54">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:50"><expr pos:start="45:5" pos:end="45:49"><name pos:start="45:5" pos:end="45:5">n</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <call pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:24">scsi_req_enqueue</name><argument_list pos:start="45:25" pos:end="45:49">(<argument pos:start="45:26" pos:end="45:34"><expr pos:start="45:26" pos:end="45:34"><name pos:start="45:26" pos:end="45:34"><name pos:start="45:26" pos:end="45:28">req</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:34">sreq</name></name></expr></argument>, <argument pos:start="45:37" pos:end="45:48"><expr pos:start="45:37" pos:end="45:48"><name pos:start="45:37" pos:end="45:48"><name pos:start="45:37" pos:end="45:39">srp</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:44">cmd</name><operator pos:start="45:45" pos:end="45:45">.</operator><name pos:start="45:46" pos:end="45:48">cdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:52"><expr pos:start="49:5" pos:end="51:51"><call pos:start="49:5" pos:end="51:51"><name pos:start="49:5" pos:end="49:11">dprintf</name><argument_list pos:start="49:12" pos:end="51:51">(<argument pos:start="49:13" pos:end="49:76"><expr pos:start="49:13" pos:end="49:76"><literal type="string" pos:start="49:13" pos:end="49:76">"VSCSI: Queued command tag 0x%x CMD 0x%x ID %d LUN %d ret: %d\n"</literal></expr></argument>,

            <argument pos:start="51:13" pos:end="51:21"><expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:15">req</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:21">qtag</name></name></expr></argument>, <argument pos:start="51:24" pos:end="51:38"><expr pos:start="51:24" pos:end="51:38"><name pos:start="51:24" pos:end="51:38"><name pos:start="51:24" pos:end="51:26">srp</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:31">cmd</name><operator pos:start="51:32" pos:end="51:32">.</operator><name pos:start="51:33" pos:end="51:35">cdb</name><index pos:start="51:36" pos:end="51:38">[<expr pos:start="51:37" pos:end="51:37"><literal type="number" pos:start="51:37" pos:end="51:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="51:41" pos:end="51:42"><expr pos:start="51:41" pos:end="51:42"><name pos:start="51:41" pos:end="51:42">id</name></expr></argument>, <argument pos:start="51:45" pos:end="51:47"><expr pos:start="51:45" pos:end="51:47"><name pos:start="51:45" pos:end="51:47">lun</name></expr></argument>, <argument pos:start="51:50" pos:end="51:50"><expr pos:start="51:50" pos:end="51:50"><name pos:start="51:50" pos:end="51:50">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="87:5"><if pos:start="55:5" pos:end="87:5">if <condition pos:start="55:8" pos:end="55:10">(<expr pos:start="55:9" pos:end="55:9"><name pos:start="55:9" pos:end="55:9">n</name></expr>)</condition> <block pos:start="55:12" pos:end="87:5">{<block_content pos:start="63:9" pos:end="85:37">

        <comment type="block" pos:start="57:9" pos:end="61:11">/* Transfer direction must be set before preprocessing the

         * descriptors

         */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:31"><expr pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:11">req</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:20">writing</name></name> <operator pos:start="63:22" pos:end="63:22">=</operator> <operator pos:start="63:24" pos:end="63:24">(</operator><name pos:start="63:25" pos:end="63:25">n</name> <operator pos:start="63:27" pos:end="63:27">&lt;</operator> <literal type="number" pos:start="63:29" pos:end="63:29">1</literal><operator pos:start="63:30" pos:end="63:30">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:41">/* Preprocess RDMA descriptors */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><call pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:29">vscsi_preprocess_desc</name><argument_list pos:start="69:30" pos:end="69:34">(<argument pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><name pos:start="69:31" pos:end="69:33">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="73:9" pos:end="73:58">/* Get transfer direction and initiate transfer */</comment>

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:18">(<expr pos:start="75:13" pos:end="75:17"><name pos:start="75:13" pos:end="75:13">n</name> <operator pos:start="75:15" pos:end="75:15">&gt;</operator> <literal type="number" pos:start="75:17" pos:end="75:17">0</literal></expr>)</condition> <block pos:start="75:20" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:30">

            <expr_stmt pos:start="77:13" pos:end="77:30"><expr pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:15">req</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:25">data_len</name></name> <operator pos:start="77:27" pos:end="77:27">=</operator> <name pos:start="77:29" pos:end="77:29">n</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="79:11" pos:end="83:9">else if <condition pos:start="79:19" pos:end="79:25">(<expr pos:start="79:20" pos:end="79:24"><name pos:start="79:20" pos:end="79:20">n</name> <operator pos:start="79:22" pos:end="79:22">&lt;</operator> <literal type="number" pos:start="79:24" pos:end="79:24">0</literal></expr>)</condition> <block pos:start="79:27" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:31">

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:15">req</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:25">data_len</name></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <operator pos:start="81:29" pos:end="81:29">-</operator><name pos:start="81:30" pos:end="81:30">n</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:37"><expr pos:start="85:9" pos:end="85:36"><call pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:25">scsi_req_continue</name><argument_list pos:start="85:26" pos:end="85:36">(<argument pos:start="85:27" pos:end="85:35"><expr pos:start="85:27" pos:end="85:35"><name pos:start="85:27" pos:end="85:35"><name pos:start="85:27" pos:end="85:29">req</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:35">sreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="89:5" pos:end="89:65">/* Don't touch req here, it may have been recycled already */</comment>



    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
