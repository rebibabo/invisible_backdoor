<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1630.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">dirac_decode_data_unit</name><parameter_list pos:start="1:34" pos:end="1:86">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:75"><decl pos:start="1:58" pos:end="1:75"><type pos:start="1:58" pos:end="1:75"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:70">uint8_t</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:75">buf</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:85"><decl pos:start="1:78" pos:end="1:85"><type pos:start="1:78" pos:end="1:85"><name pos:start="1:78" pos:end="1:80">int</name></type> <name pos:start="1:82" pos:end="1:85">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="175:1">{<block_content pos:start="5:5" pos:end="173:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">DiracContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name>   <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">DiracFrame</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">pic</name>   <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">i</name></decl>, <decl pos:start="9:17" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:26">parse_code</name> <init pos:start="9:28" pos:end="9:35">= <expr pos:start="9:30" pos:end="9:35"><name pos:start="9:30" pos:end="9:35"><name pos:start="9:30" pos:end="9:32">buf</name><index pos:start="9:33" pos:end="9:35">[<expr pos:start="9:34" pos:end="9:34"><literal type="number" pos:start="9:34" pos:end="9:34">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:16">tmp</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:18"><if pos:start="15:5" pos:end="17:18">if <condition pos:start="15:8" pos:end="15:37">(<expr pos:start="15:9" pos:end="15:36"><name pos:start="15:9" pos:end="15:12">size</name> <operator pos:start="15:14" pos:end="15:14">&lt;</operator> <name pos:start="15:16" pos:end="15:36">DATA_UNIT_HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:18"><block_content pos:start="17:9" pos:end="17:18">

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:70"><expr pos:start="21:5" pos:end="21:69"><call pos:start="21:5" pos:end="21:69"><name pos:start="21:5" pos:end="21:17">init_get_bits</name><argument_list pos:start="21:18" pos:end="21:69">(<argument pos:start="21:19" pos:end="21:24"><expr pos:start="21:19" pos:end="21:24"><operator pos:start="21:19" pos:end="21:19">&amp;</operator><name pos:start="21:20" pos:end="21:24"><name pos:start="21:20" pos:end="21:20">s</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:24">gb</name></name></expr></argument>, <argument pos:start="21:27" pos:end="21:34"><expr pos:start="21:27" pos:end="21:34"><operator pos:start="21:27" pos:end="21:27">&amp;</operator><name pos:start="21:28" pos:end="21:34"><name pos:start="21:28" pos:end="21:30">buf</name><index pos:start="21:31" pos:end="21:34">[<expr pos:start="21:32" pos:end="21:33"><literal type="number" pos:start="21:32" pos:end="21:33">13</literal></expr>]</index></name></expr></argument>, <argument pos:start="21:37" pos:end="21:68"><expr pos:start="21:37" pos:end="21:68"><literal type="number" pos:start="21:37" pos:end="21:37">8</literal><operator pos:start="21:38" pos:end="21:38">*</operator><operator pos:start="21:39" pos:end="21:39">(</operator><name pos:start="21:40" pos:end="21:43">size</name> <operator pos:start="21:45" pos:end="21:45">-</operator> <name pos:start="21:47" pos:end="21:67">DATA_UNIT_HEADER_SIZE</name><operator pos:start="21:68" pos:end="21:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="171:5"><if pos:start="25:5" pos:end="53:5">if <condition pos:start="25:8" pos:end="25:36">(<expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:18">parse_code</name> <operator pos:start="25:20" pos:end="25:21">==</operator> <name pos:start="25:23" pos:end="25:35">pc_seq_header</name></expr>)</condition> <block pos:start="25:38" pos:end="53:5">{<block_content pos:start="27:9" pos:end="51:36">

        <if_stmt pos:start="27:9" pos:end="29:21"><if pos:start="27:9" pos:end="29:21">if <condition pos:start="27:12" pos:end="27:36">(<expr pos:start="27:13" pos:end="27:35"><name pos:start="27:13" pos:end="27:35"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:35">seen_sequence_header</name></name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:21"><block_content pos:start="29:13" pos:end="29:21">

            <return pos:start="29:13" pos:end="29:21">return <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="33:9" pos:end="33:45">/* [DIRAC_STD] 10. Sequence header */</comment>

        <if_stmt pos:start="35:9" pos:end="37:22"><if pos:start="35:9" pos:end="37:22">if <condition pos:start="35:12" pos:end="35:74">(<expr pos:start="35:13" pos:end="35:73"><call pos:start="35:13" pos:end="35:73"><name pos:start="35:13" pos:end="35:46">avpriv_dirac_parse_sequence_header</name><argument_list pos:start="35:47" pos:end="35:73">(<argument pos:start="35:48" pos:end="35:52"><expr pos:start="35:48" pos:end="35:52"><name pos:start="35:48" pos:end="35:52">avctx</name></expr></argument>, <argument pos:start="35:55" pos:end="35:60"><expr pos:start="35:55" pos:end="35:60"><operator pos:start="35:55" pos:end="35:55">&amp;</operator><name pos:start="35:56" pos:end="35:60"><name pos:start="35:56" pos:end="35:56">s</name><operator pos:start="35:57" pos:end="35:58">-&gt;</operator><name pos:start="35:59" pos:end="35:60">gb</name></name></expr></argument>, <argument pos:start="35:63" pos:end="35:72"><expr pos:start="35:63" pos:end="35:72"><operator pos:start="35:63" pos:end="35:63">&amp;</operator><name pos:start="35:64" pos:end="35:72"><name pos:start="35:64" pos:end="35:64">s</name><operator pos:start="35:65" pos:end="35:66">-&gt;</operator><name pos:start="35:67" pos:end="35:72">source</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:22"><block_content pos:start="37:13" pos:end="37:22">

            <return pos:start="37:13" pos:end="37:22">return <expr pos:start="37:20" pos:end="37:21"><operator pos:start="37:20" pos:end="37:20">-</operator><literal type="number" pos:start="37:21" pos:end="37:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:94"><expr pos:start="41:9" pos:end="41:93"><call pos:start="41:9" pos:end="41:93"><name pos:start="41:9" pos:end="41:37">avcodec_get_chroma_sub_sample</name><argument_list pos:start="41:38" pos:end="41:93">(<argument pos:start="41:39" pos:end="41:52"><expr pos:start="41:39" pos:end="41:52"><name pos:start="41:39" pos:end="41:52"><name pos:start="41:39" pos:end="41:43">avctx</name><operator pos:start="41:44" pos:end="41:45">-&gt;</operator><name pos:start="41:46" pos:end="41:52">pix_fmt</name></name></expr></argument>, <argument pos:start="41:55" pos:end="41:72"><expr pos:start="41:55" pos:end="41:72"><operator pos:start="41:55" pos:end="41:55">&amp;</operator><name pos:start="41:56" pos:end="41:72"><name pos:start="41:56" pos:end="41:56">s</name><operator pos:start="41:57" pos:end="41:58">-&gt;</operator><name pos:start="41:59" pos:end="41:72">chroma_x_shift</name></name></expr></argument>, <argument pos:start="41:75" pos:end="41:92"><expr pos:start="41:75" pos:end="41:92"><operator pos:start="41:75" pos:end="41:75">&amp;</operator><name pos:start="41:76" pos:end="41:92"><name pos:start="41:76" pos:end="41:76">s</name><operator pos:start="41:77" pos:end="41:78">-&gt;</operator><name pos:start="41:79" pos:end="41:92">chroma_y_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="47:22"><if pos:start="45:9" pos:end="47:22">if <condition pos:start="45:12" pos:end="45:38">(<expr pos:start="45:13" pos:end="45:37"><call pos:start="45:13" pos:end="45:37"><name pos:start="45:13" pos:end="45:34">alloc_sequence_buffers</name><argument_list pos:start="45:35" pos:end="45:37">(<argument pos:start="45:36" pos:end="45:36"><expr pos:start="45:36" pos:end="45:36"><name pos:start="45:36" pos:end="45:36">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:22"><block_content pos:start="47:13" pos:end="47:22">

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:31">seen_sequence_header</name></name> <operator pos:start="51:33" pos:end="51:33">=</operator> <literal type="number" pos:start="51:35" pos:end="51:35">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="53:7" pos:end="59:5">else if <condition pos:start="53:15" pos:end="53:36">(<expr pos:start="53:16" pos:end="53:35"><name pos:start="53:16" pos:end="53:25">parse_code</name> <operator pos:start="53:27" pos:end="53:28">==</operator> <name pos:start="53:30" pos:end="53:35">pc_eos</name></expr>)</condition> <block pos:start="53:38" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:36"> <comment type="block" pos:start="53:40" pos:end="53:72">/* [DIRAC_STD] End of Sequence */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:33"><expr pos:start="55:9" pos:end="55:32"><call pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:29">free_sequence_buffers</name><argument_list pos:start="55:30" pos:end="55:32">(<argument pos:start="55:31" pos:end="55:31"><expr pos:start="55:31" pos:end="55:31"><name pos:start="55:31" pos:end="55:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:31">seen_sequence_header</name></name> <operator pos:start="57:33" pos:end="57:33">=</operator> <literal type="number" pos:start="57:35" pos:end="57:35">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="77:5">else if <condition pos:start="59:15" pos:end="59:41">(<expr pos:start="59:16" pos:end="59:40"><name pos:start="59:16" pos:end="59:25">parse_code</name> <operator pos:start="59:27" pos:end="59:28">==</operator> <name pos:start="59:30" pos:end="59:40">pc_aux_data</name></expr>)</condition> <block pos:start="59:43" pos:end="77:5">{<block_content pos:start="61:9" pos:end="75:9">

        <if_stmt pos:start="61:9" pos:end="75:9"><if pos:start="61:9" pos:end="75:9">if <condition pos:start="61:12" pos:end="61:25">(<expr pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:15">buf</name><index pos:start="61:16" pos:end="61:19">[<expr pos:start="61:17" pos:end="61:18"><literal type="number" pos:start="61:17" pos:end="61:18">13</literal></expr>]</index></name> <operator pos:start="61:21" pos:end="61:22">==</operator> <literal type="number" pos:start="61:24" pos:end="61:24">1</literal></expr>)</condition> <block pos:start="61:27" pos:end="75:9">{<block_content pos:start="63:13" pos:end="73:43">     <comment type="block" pos:start="61:33" pos:end="61:68">/* encoder implementation/version */</comment>

            <decl_stmt pos:start="63:13" pos:end="63:23"><decl pos:start="63:13" pos:end="63:22"><type pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">int</name></type> <name pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:19">ver</name><index pos:start="63:20" pos:end="63:22">[<expr pos:start="63:21" pos:end="63:21"><literal type="number" pos:start="63:21" pos:end="63:21">3</literal></expr>]</index></name></decl>;</decl_stmt>

            <comment type="block" pos:start="65:13" pos:end="67:50">/* versions older than 1.0.8 don't store quant delta for

               subbands with only one codeblock */</comment>

            <if_stmt pos:start="69:13" pos:end="73:43"><if pos:start="69:13" pos:end="73:43">if <condition pos:start="69:16" pos:end="69:80">(<expr pos:start="69:17" pos:end="69:79"><call pos:start="69:17" pos:end="69:74"><name pos:start="69:17" pos:end="69:22">sscanf</name><argument_list pos:start="69:23" pos:end="69:74">(<argument pos:start="69:24" pos:end="69:29"><expr pos:start="69:24" pos:end="69:29"><name pos:start="69:24" pos:end="69:26">buf</name><operator pos:start="69:27" pos:end="69:27">+</operator><literal type="number" pos:start="69:28" pos:end="69:29">14</literal></expr></argument>, <argument pos:start="69:32" pos:end="69:54"><expr pos:start="69:32" pos:end="69:54"><literal type="string" pos:start="69:32" pos:end="69:54">"Schroedinger %d.%d.%d"</literal></expr></argument>, <argument pos:start="69:57" pos:end="69:59"><expr pos:start="69:57" pos:end="69:59"><name pos:start="69:57" pos:end="69:59">ver</name></expr></argument>, <argument pos:start="69:62" pos:end="69:66"><expr pos:start="69:62" pos:end="69:66"><name pos:start="69:62" pos:end="69:64">ver</name><operator pos:start="69:65" pos:end="69:65">+</operator><literal type="number" pos:start="69:66" pos:end="69:66">1</literal></expr></argument>, <argument pos:start="69:69" pos:end="69:73"><expr pos:start="69:69" pos:end="69:73"><name pos:start="69:69" pos:end="69:71">ver</name><operator pos:start="69:72" pos:end="69:72">+</operator><literal type="number" pos:start="69:73" pos:end="69:73">2</literal></expr></argument>)</argument_list></call> <operator pos:start="69:76" pos:end="69:77">==</operator> <literal type="number" pos:start="69:79" pos:end="69:79">3</literal></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="73:43"><block_content pos:start="71:17" pos:end="73:43">

                <if_stmt pos:start="71:17" pos:end="73:43"><if pos:start="71:17" pos:end="73:43">if <condition pos:start="71:20" pos:end="71:62">(<expr pos:start="71:21" pos:end="71:61"><name pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:23">ver</name><index pos:start="71:24" pos:end="71:26">[<expr pos:start="71:25" pos:end="71:25"><literal type="number" pos:start="71:25" pos:end="71:25">0</literal></expr>]</index></name> <operator pos:start="71:28" pos:end="71:29">==</operator> <literal type="number" pos:start="71:31" pos:end="71:31">1</literal> <operator pos:start="71:33" pos:end="71:34">&amp;&amp;</operator> <name pos:start="71:36" pos:end="71:41"><name pos:start="71:36" pos:end="71:38">ver</name><index pos:start="71:39" pos:end="71:41">[<expr pos:start="71:40" pos:end="71:40"><literal type="number" pos:start="71:40" pos:end="71:40">1</literal></expr>]</index></name> <operator pos:start="71:43" pos:end="71:44">==</operator> <literal type="number" pos:start="71:46" pos:end="71:46">0</literal> <operator pos:start="71:48" pos:end="71:49">&amp;&amp;</operator> <name pos:start="71:51" pos:end="71:56"><name pos:start="71:51" pos:end="71:53">ver</name><index pos:start="71:54" pos:end="71:56">[<expr pos:start="71:55" pos:end="71:55"><literal type="number" pos:start="71:55" pos:end="71:55">2</literal></expr>]</index></name> <operator pos:start="71:58" pos:end="71:59">&lt;=</operator> <literal type="number" pos:start="71:61" pos:end="71:61">7</literal></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:43"><block_content pos:start="73:21" pos:end="73:43">

                    <expr_stmt pos:start="73:21" pos:end="73:43"><expr pos:start="73:21" pos:end="73:42"><name pos:start="73:21" pos:end="73:38"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:38">old_delta_quant</name></name> <operator pos:start="73:40" pos:end="73:40">=</operator> <literal type="number" pos:start="73:42" pos:end="73:42">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="171:5">else if <condition pos:start="77:15" pos:end="77:32">(<expr pos:start="77:16" pos:end="77:31"><name pos:start="77:16" pos:end="77:25">parse_code</name> <operator pos:start="77:27" pos:end="77:27">&amp;</operator> <literal type="number" pos:start="77:29" pos:end="77:31">0x8</literal></expr>)</condition> <block pos:start="77:34" pos:end="171:5">{<block_content pos:start="79:9" pos:end="169:22">  <comment type="block" pos:start="77:37" pos:end="77:59">/* picture data unit */</comment>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:37">(<expr pos:start="79:13" pos:end="79:36"><operator pos:start="79:13" pos:end="79:13">!</operator><name pos:start="79:14" pos:end="79:36"><name pos:start="79:14" pos:end="79:14">s</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:36">seen_sequence_header</name></name></expr>)</condition> <block pos:start="79:39" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:22">

            <expr_stmt pos:start="81:13" pos:end="81:84"><expr pos:start="81:13" pos:end="81:83"><call pos:start="81:13" pos:end="81:83"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="81:83">(<argument pos:start="81:20" pos:end="81:24"><expr pos:start="81:20" pos:end="81:24"><name pos:start="81:20" pos:end="81:24">avctx</name></expr></argument>, <argument pos:start="81:27" pos:end="81:38"><expr pos:start="81:27" pos:end="81:38"><name pos:start="81:27" pos:end="81:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="81:41" pos:end="81:82"><expr pos:start="81:41" pos:end="81:82"><literal type="string" pos:start="81:41" pos:end="81:82">"Dropping frame without sequence header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:22">return <expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">-</operator><literal type="number" pos:start="83:21" pos:end="83:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:34">/* find an unused frame */</comment>

        <for pos:start="91:9" pos:end="95:40">for <control pos:start="91:13" pos:end="91:40">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">i</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:35"><expr pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:21">i</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <name pos:start="91:25" pos:end="91:34">MAX_FRAMES</name></expr>;</condition> <incr pos:start="91:37" pos:end="91:39"><expr pos:start="91:37" pos:end="91:39"><name pos:start="91:37" pos:end="91:37">i</name><operator pos:start="91:38" pos:end="91:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:13" pos:end="95:40"><block_content pos:start="93:13" pos:end="95:40">

            <if_stmt pos:start="93:13" pos:end="95:40"><if pos:start="93:13" pos:end="95:40">if <condition pos:start="93:16" pos:end="93:58">(<expr pos:start="93:17" pos:end="93:57"><name pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:29">all_frames</name><index pos:start="93:30" pos:end="93:32">[<expr pos:start="93:31" pos:end="93:31"><name pos:start="93:31" pos:end="93:31">i</name></expr>]</index></name><operator pos:start="93:33" pos:end="93:33">.</operator><name pos:start="93:34" pos:end="93:49"><name pos:start="93:34" pos:end="93:40">avframe</name><operator pos:start="93:41" pos:end="93:42">-&gt;</operator><name pos:start="93:43" pos:end="93:46">data</name><index pos:start="93:47" pos:end="93:49">[<expr pos:start="93:48" pos:end="93:48"><literal type="number" pos:start="93:48" pos:end="93:48">0</literal></expr>]</index></name> <operator pos:start="93:51" pos:end="93:52">==</operator> <name pos:start="93:54" pos:end="93:57">NULL</name></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:40"><block_content pos:start="95:17" pos:end="95:40">

                <expr_stmt pos:start="95:17" pos:end="95:40"><expr pos:start="95:17" pos:end="95:39"><name pos:start="95:17" pos:end="95:19">pic</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <operator pos:start="95:23" pos:end="95:23">&amp;</operator><name pos:start="95:24" pos:end="95:39"><name pos:start="95:24" pos:end="95:24">s</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:36">all_frames</name><index pos:start="95:37" pos:end="95:39">[<expr pos:start="95:38" pos:end="95:38"><name pos:start="95:38" pos:end="95:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:17">(<expr pos:start="97:13" pos:end="97:16"><operator pos:start="97:13" pos:end="97:13">!</operator><name pos:start="97:14" pos:end="97:16">pic</name></expr>)</condition> <block pos:start="97:19" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:22">

            <expr_stmt pos:start="99:13" pos:end="99:60"><expr pos:start="99:13" pos:end="99:59"><call pos:start="99:13" pos:end="99:59"><name pos:start="99:13" pos:end="99:18">av_log</name><argument_list pos:start="99:19" pos:end="99:59">(<argument pos:start="99:20" pos:end="99:24"><expr pos:start="99:20" pos:end="99:24"><name pos:start="99:20" pos:end="99:24">avctx</name></expr></argument>, <argument pos:start="99:27" pos:end="99:38"><expr pos:start="99:27" pos:end="99:38"><name pos:start="99:27" pos:end="99:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:41" pos:end="99:58"><expr pos:start="99:41" pos:end="99:58"><literal type="string" pos:start="99:41" pos:end="99:58">"framelist full\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:22">return <expr pos:start="101:20" pos:end="101:21"><operator pos:start="101:20" pos:end="101:20">-</operator><literal type="number" pos:start="101:21" pos:end="101:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:37"><expr pos:start="107:9" pos:end="107:36"><call pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:22">av_frame_unref</name><argument_list pos:start="107:23" pos:end="107:36">(<argument pos:start="107:24" pos:end="107:35"><expr pos:start="107:24" pos:end="107:35"><name pos:start="107:24" pos:end="107:35"><name pos:start="107:24" pos:end="107:26">pic</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:35">avframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:46">/* [DIRAC_STD] Defined in 9.6.1 ... */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:44"><expr pos:start="113:9" pos:end="113:43"><name pos:start="113:9" pos:end="113:11">tmp</name>            <operator pos:start="113:24" pos:end="113:24">=</operator>  <name pos:start="113:27" pos:end="113:36">parse_code</name> <operator pos:start="113:38" pos:end="113:38">&amp;</operator> <literal type="number" pos:start="113:40" pos:end="113:43">0x03</literal></expr>;</expr_stmt>                   <comment type="block" pos:start="113:64" pos:end="113:96">/* [DIRAC_STD] num_refs()      */</comment>

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">tmp</name> <operator pos:start="115:17" pos:end="115:17">&gt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">2</literal></expr>)</condition> <block pos:start="115:22" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:22">

            <expr_stmt pos:start="117:13" pos:end="117:59"><expr pos:start="117:13" pos:end="117:58"><call pos:start="117:13" pos:end="117:58"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="117:58">(<argument pos:start="117:20" pos:end="117:24"><expr pos:start="117:20" pos:end="117:24"><name pos:start="117:20" pos:end="117:24">avctx</name></expr></argument>, <argument pos:start="117:27" pos:end="117:38"><expr pos:start="117:27" pos:end="117:38"><name pos:start="117:27" pos:end="117:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:41" pos:end="117:57"><expr pos:start="117:41" pos:end="117:57"><literal type="string" pos:start="117:41" pos:end="117:57">"num_refs of 3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:22">return <expr pos:start="119:20" pos:end="119:21"><operator pos:start="119:20" pos:end="119:20">-</operator><literal type="number" pos:start="119:21" pos:end="119:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:29"><expr pos:start="123:9" pos:end="123:28"><name pos:start="123:9" pos:end="123:19"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:19">num_refs</name></name>    <operator pos:start="123:24" pos:end="123:24">=</operator> <name pos:start="123:26" pos:end="123:28">tmp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:53"><expr pos:start="125:9" pos:end="125:52"><name pos:start="125:9" pos:end="125:19"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:19">is_arith</name></name>    <operator pos:start="125:24" pos:end="125:24">=</operator> <operator pos:start="125:26" pos:end="125:26">(</operator><name pos:start="125:27" pos:end="125:36">parse_code</name> <operator pos:start="125:38" pos:end="125:38">&amp;</operator> <literal type="number" pos:start="125:40" pos:end="125:43">0x48</literal><operator pos:start="125:44" pos:end="125:44">)</operator> <operator pos:start="125:46" pos:end="125:47">==</operator> <literal type="number" pos:start="125:49" pos:end="125:52">0x08</literal></expr>;</expr_stmt>          <comment type="block" pos:start="125:64" pos:end="125:96">/* [DIRAC_STD] using_ac()      */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:53"><expr pos:start="127:9" pos:end="127:52"><name pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:20">low_delay</name></name>   <operator pos:start="127:24" pos:end="127:24">=</operator> <operator pos:start="127:26" pos:end="127:26">(</operator><name pos:start="127:27" pos:end="127:36">parse_code</name> <operator pos:start="127:38" pos:end="127:38">&amp;</operator> <literal type="number" pos:start="127:40" pos:end="127:43">0x88</literal><operator pos:start="127:44" pos:end="127:44">)</operator> <operator pos:start="127:46" pos:end="127:47">==</operator> <literal type="number" pos:start="127:49" pos:end="127:52">0x88</literal></expr>;</expr_stmt>          <comment type="block" pos:start="127:64" pos:end="127:96">/* [DIRAC_STD] is_low_delay()  */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:62"><expr pos:start="129:9" pos:end="129:61"><name pos:start="129:9" pos:end="129:31"><name pos:start="129:9" pos:end="129:11">pic</name><operator pos:start="129:12" pos:end="129:13">-&gt;</operator><name pos:start="129:14" pos:end="129:20">avframe</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:31">reference</name></name> <operator pos:start="129:33" pos:end="129:33">=</operator> <operator pos:start="129:35" pos:end="129:35">(</operator><name pos:start="129:36" pos:end="129:45">parse_code</name> <operator pos:start="129:47" pos:end="129:47">&amp;</operator> <literal type="number" pos:start="129:49" pos:end="129:52">0x0C</literal><operator pos:start="129:53" pos:end="129:53">)</operator> <operator pos:start="129:55" pos:end="129:56">==</operator> <literal type="number" pos:start="129:58" pos:end="129:61">0x0C</literal></expr>;</expr_stmt>  <comment type="block" pos:start="129:65" pos:end="129:97">/* [DIRAC_STD]  is_reference() */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:51"><expr pos:start="131:9" pos:end="131:50"><name pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:11">pic</name><operator pos:start="131:12" pos:end="131:13">-&gt;</operator><name pos:start="131:14" pos:end="131:20">avframe</name><operator pos:start="131:21" pos:end="131:22">-&gt;</operator><name pos:start="131:23" pos:end="131:31">key_frame</name></name> <operator pos:start="131:33" pos:end="131:33">=</operator> <name pos:start="131:35" pos:end="131:45"><name pos:start="131:35" pos:end="131:35">s</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:45">num_refs</name></name> <operator pos:start="131:47" pos:end="131:48">==</operator> <literal type="number" pos:start="131:50" pos:end="131:50">0</literal></expr>;</expr_stmt>             <comment type="block" pos:start="131:65" pos:end="131:97">/* [DIRAC_STD] is_intra()      */</comment>

        <expr_stmt pos:start="133:9" pos:end="133:50"><expr pos:start="133:9" pos:end="133:49"><name pos:start="133:9" pos:end="133:31"><name pos:start="133:9" pos:end="133:11">pic</name><operator pos:start="133:12" pos:end="133:13">-&gt;</operator><name pos:start="133:14" pos:end="133:20">avframe</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:31">pict_type</name></name> <operator pos:start="133:33" pos:end="133:33">=</operator> <name pos:start="133:35" pos:end="133:45"><name pos:start="133:35" pos:end="133:35">s</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:45">num_refs</name></name> <operator pos:start="133:47" pos:end="133:47">+</operator> <literal type="number" pos:start="133:49" pos:end="133:49">1</literal></expr>;</expr_stmt>              <comment type="block" pos:start="133:65" pos:end="133:109">/* Definition of AVPictureType in avutil.h */</comment>



        <if_stmt pos:start="137:9" pos:end="139:23"><if pos:start="137:9" pos:end="139:23">if <condition pos:start="137:12" pos:end="137:124">(<expr pos:start="137:13" pos:end="137:123"><operator pos:start="137:13" pos:end="137:13">(</operator><name pos:start="137:14" pos:end="137:16">ret</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <call pos:start="137:20" pos:end="137:118"><name pos:start="137:20" pos:end="137:39">get_buffer_with_edge</name><argument_list pos:start="137:40" pos:end="137:118">(<argument pos:start="137:41" pos:end="137:45"><expr pos:start="137:41" pos:end="137:45"><name pos:start="137:41" pos:end="137:45">avctx</name></expr></argument>, <argument pos:start="137:48" pos:end="137:59"><expr pos:start="137:48" pos:end="137:59"><name pos:start="137:48" pos:end="137:59"><name pos:start="137:48" pos:end="137:50">pic</name><operator pos:start="137:51" pos:end="137:52">-&gt;</operator><name pos:start="137:53" pos:end="137:59">avframe</name></name></expr></argument>, <argument pos:start="137:62" pos:end="137:117"><expr pos:start="137:62" pos:end="137:117"><ternary pos:start="137:62" pos:end="137:117"><condition pos:start="137:62" pos:end="137:90"><expr pos:start="137:62" pos:end="137:88"><operator pos:start="137:62" pos:end="137:62">(</operator><name pos:start="137:63" pos:end="137:72">parse_code</name> <operator pos:start="137:74" pos:end="137:74">&amp;</operator> <literal type="number" pos:start="137:76" pos:end="137:79">0x0C</literal><operator pos:start="137:80" pos:end="137:80">)</operator> <operator pos:start="137:82" pos:end="137:83">==</operator> <literal type="number" pos:start="137:85" pos:end="137:88">0x0C</literal></expr> ?</condition><then pos:start="137:92" pos:end="137:113"> <expr pos:start="137:92" pos:end="137:113"><name pos:start="137:92" pos:end="137:113">AV_GET_BUFFER_FLAG_REF</name></expr> </then><else pos:start="137:115" pos:end="137:117">: <expr pos:start="137:117" pos:end="137:117"><literal type="number" pos:start="137:117" pos:end="137:117">0</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator pos:start="137:119" pos:end="137:119">)</operator> <operator pos:start="137:121" pos:end="137:121">&lt;</operator> <literal type="number" pos:start="137:123" pos:end="137:123">0</literal></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:23"><block_content pos:start="139:13" pos:end="139:23">

            <return pos:start="139:13" pos:end="139:23">return <expr pos:start="139:20" pos:end="139:22"><name pos:start="139:20" pos:end="139:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:33"><expr pos:start="141:9" pos:end="141:32"><name pos:start="141:9" pos:end="141:26"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:26">current_picture</name></name> <operator pos:start="141:28" pos:end="141:28">=</operator> <name pos:start="141:30" pos:end="141:32">pic</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:55"><expr pos:start="143:9" pos:end="143:54"><name pos:start="143:9" pos:end="143:19"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:16">plane</name><index pos:start="143:17" pos:end="143:19">[<expr pos:start="143:18" pos:end="143:18"><literal type="number" pos:start="143:18" pos:end="143:18">0</literal></expr>]</index></name><operator pos:start="143:20" pos:end="143:20">.</operator><name pos:start="143:21" pos:end="143:26">stride</name> <operator pos:start="143:28" pos:end="143:28">=</operator> <name pos:start="143:30" pos:end="143:54"><name pos:start="143:30" pos:end="143:32">pic</name><operator pos:start="143:33" pos:end="143:34">-&gt;</operator><name pos:start="143:35" pos:end="143:41">avframe</name><operator pos:start="143:42" pos:end="143:43">-&gt;</operator><name pos:start="143:44" pos:end="143:51">linesize</name><index pos:start="143:52" pos:end="143:54">[<expr pos:start="143:53" pos:end="143:53"><literal type="number" pos:start="143:53" pos:end="143:53">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:55"><expr pos:start="145:9" pos:end="145:54"><name pos:start="145:9" pos:end="145:19"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:16">plane</name><index pos:start="145:17" pos:end="145:19">[<expr pos:start="145:18" pos:end="145:18"><literal type="number" pos:start="145:18" pos:end="145:18">1</literal></expr>]</index></name><operator pos:start="145:20" pos:end="145:20">.</operator><name pos:start="145:21" pos:end="145:26">stride</name> <operator pos:start="145:28" pos:end="145:28">=</operator> <name pos:start="145:30" pos:end="145:54"><name pos:start="145:30" pos:end="145:32">pic</name><operator pos:start="145:33" pos:end="145:34">-&gt;</operator><name pos:start="145:35" pos:end="145:41">avframe</name><operator pos:start="145:42" pos:end="145:43">-&gt;</operator><name pos:start="145:44" pos:end="145:51">linesize</name><index pos:start="145:52" pos:end="145:54">[<expr pos:start="145:53" pos:end="145:53"><literal type="number" pos:start="145:53" pos:end="145:53">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:55"><expr pos:start="147:9" pos:end="147:54"><name pos:start="147:9" pos:end="147:19"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:16">plane</name><index pos:start="147:17" pos:end="147:19">[<expr pos:start="147:18" pos:end="147:18"><literal type="number" pos:start="147:18" pos:end="147:18">2</literal></expr>]</index></name><operator pos:start="147:20" pos:end="147:20">.</operator><name pos:start="147:21" pos:end="147:26">stride</name> <operator pos:start="147:28" pos:end="147:28">=</operator> <name pos:start="147:30" pos:end="147:54"><name pos:start="147:30" pos:end="147:32">pic</name><operator pos:start="147:33" pos:end="147:34">-&gt;</operator><name pos:start="147:35" pos:end="147:41">avframe</name><operator pos:start="147:42" pos:end="147:43">-&gt;</operator><name pos:start="147:44" pos:end="147:51">linesize</name><index pos:start="147:52" pos:end="147:54">[<expr pos:start="147:53" pos:end="147:53"><literal type="number" pos:start="147:53" pos:end="147:53">2</literal></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="151:9" pos:end="153:35"><if pos:start="151:9" pos:end="153:35">if <condition pos:start="151:12" pos:end="151:122">(<expr pos:start="151:13" pos:end="151:121"><call pos:start="151:13" pos:end="151:117"><name pos:start="151:13" pos:end="151:25">alloc_buffers</name><argument_list pos:start="151:26" pos:end="151:117">(<argument pos:start="151:27" pos:end="151:27"><expr pos:start="151:27" pos:end="151:27"><name pos:start="151:27" pos:end="151:27">s</name></expr></argument>, <argument pos:start="151:30" pos:end="151:116"><expr pos:start="151:30" pos:end="151:116"><call pos:start="151:30" pos:end="151:116"><name pos:start="151:30" pos:end="151:35">FFMAX3</name><argument_list pos:start="151:36" pos:end="151:116">(<argument pos:start="151:37" pos:end="151:61"><expr pos:start="151:37" pos:end="151:61"><call pos:start="151:37" pos:end="151:61"><name pos:start="151:37" pos:end="151:41">FFABS</name><argument_list pos:start="151:42" pos:end="151:61">(<argument pos:start="151:43" pos:end="151:60"><expr pos:start="151:43" pos:end="151:60"><name pos:start="151:43" pos:end="151:53"><name pos:start="151:43" pos:end="151:43">s</name><operator pos:start="151:44" pos:end="151:45">-&gt;</operator><name pos:start="151:46" pos:end="151:50">plane</name><index pos:start="151:51" pos:end="151:53">[<expr pos:start="151:52" pos:end="151:52"><literal type="number" pos:start="151:52" pos:end="151:52">0</literal></expr>]</index></name><operator pos:start="151:54" pos:end="151:54">.</operator><name pos:start="151:55" pos:end="151:60">stride</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="151:64" pos:end="151:88"><expr pos:start="151:64" pos:end="151:88"><call pos:start="151:64" pos:end="151:88"><name pos:start="151:64" pos:end="151:68">FFABS</name><argument_list pos:start="151:69" pos:end="151:88">(<argument pos:start="151:70" pos:end="151:87"><expr pos:start="151:70" pos:end="151:87"><name pos:start="151:70" pos:end="151:80"><name pos:start="151:70" pos:end="151:70">s</name><operator pos:start="151:71" pos:end="151:72">-&gt;</operator><name pos:start="151:73" pos:end="151:77">plane</name><index pos:start="151:78" pos:end="151:80">[<expr pos:start="151:79" pos:end="151:79"><literal type="number" pos:start="151:79" pos:end="151:79">1</literal></expr>]</index></name><operator pos:start="151:81" pos:end="151:81">.</operator><name pos:start="151:82" pos:end="151:87">stride</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="151:91" pos:end="151:115"><expr pos:start="151:91" pos:end="151:115"><call pos:start="151:91" pos:end="151:115"><name pos:start="151:91" pos:end="151:95">FFABS</name><argument_list pos:start="151:96" pos:end="151:115">(<argument pos:start="151:97" pos:end="151:114"><expr pos:start="151:97" pos:end="151:114"><name pos:start="151:97" pos:end="151:107"><name pos:start="151:97" pos:end="151:97">s</name><operator pos:start="151:98" pos:end="151:99">-&gt;</operator><name pos:start="151:100" pos:end="151:104">plane</name><index pos:start="151:105" pos:end="151:107">[<expr pos:start="151:106" pos:end="151:106"><literal type="number" pos:start="151:106" pos:end="151:106">2</literal></expr>]</index></name><operator pos:start="151:108" pos:end="151:108">.</operator><name pos:start="151:109" pos:end="151:114">stride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="151:119" pos:end="151:119">&lt;</operator> <literal type="number" pos:start="151:121" pos:end="151:121">0</literal></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:35"><block_content pos:start="153:13" pos:end="153:35">

            <return pos:start="153:13" pos:end="153:35">return <expr pos:start="153:20" pos:end="153:34"><call pos:start="153:20" pos:end="153:34"><name pos:start="153:20" pos:end="153:26">AVERROR</name><argument_list pos:start="153:27" pos:end="153:34">(<argument pos:start="153:28" pos:end="153:33"><expr pos:start="153:28" pos:end="153:33"><name pos:start="153:28" pos:end="153:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="157:9" pos:end="157:61">/* [DIRAC_STD] 11.1 Picture parse. picture_parse() */</comment>

        <if_stmt pos:start="159:9" pos:end="161:22"><if pos:start="159:9" pos:end="161:22">if <condition pos:start="159:12" pos:end="159:43">(<expr pos:start="159:13" pos:end="159:42"><call pos:start="159:13" pos:end="159:42"><name pos:start="159:13" pos:end="159:39">dirac_decode_picture_header</name><argument_list pos:start="159:40" pos:end="159:42">(<argument pos:start="159:41" pos:end="159:41"><expr pos:start="159:41" pos:end="159:41"><name pos:start="159:41" pos:end="159:41">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:22"><block_content pos:start="161:13" pos:end="161:22">

            <return pos:start="161:13" pos:end="161:22">return <expr pos:start="161:20" pos:end="161:21"><operator pos:start="161:20" pos:end="161:20">-</operator><literal type="number" pos:start="161:21" pos:end="161:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="165:9" pos:end="165:70">/* [DIRAC_STD] 13.0 Transform data syntax. transform_data() */</comment>

        <if_stmt pos:start="167:9" pos:end="169:22"><if pos:start="167:9" pos:end="169:22">if <condition pos:start="167:12" pos:end="167:43">(<expr pos:start="167:13" pos:end="167:42"><call pos:start="167:13" pos:end="167:42"><name pos:start="167:13" pos:end="167:39">dirac_decode_frame_internal</name><argument_list pos:start="167:40" pos:end="167:42">(<argument pos:start="167:41" pos:end="167:41"><expr pos:start="167:41" pos:end="167:41"><name pos:start="167:41" pos:end="167:41">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:22"><block_content pos:start="169:13" pos:end="169:22">

            <return pos:start="169:13" pos:end="169:22">return <expr pos:start="169:20" pos:end="169:21"><operator pos:start="169:20" pos:end="169:20">-</operator><literal type="number" pos:start="169:21" pos:end="169:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="173:5" pos:end="173:13">return <expr pos:start="173:12" pos:end="173:12"><literal type="number" pos:start="173:12" pos:end="173:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
