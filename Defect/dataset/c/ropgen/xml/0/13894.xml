<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13894.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:11">int</name></type> <name pos:start="1:13" pos:end="1:23">ff_dct_init</name><parameter_list pos:start="1:24" pos:end="1:80">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">DCTContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:48"><decl pos:start="1:40" pos:end="1:48"><type pos:start="1:40" pos:end="1:48"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:48">nbits</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:79"><decl pos:start="1:51" pos:end="1:79"><type pos:start="1:51" pos:end="1:79"><name pos:start="1:51" pos:end="1:71"><name pos:start="1:51" pos:end="1:54">enum</name> <name pos:start="1:56" pos:end="1:71">DCTTransformType</name></name></type> <name pos:start="1:73" pos:end="1:79">inverse</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:13">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">n</name> <init pos:start="5:11" pos:end="5:22">= <expr pos:start="5:13" pos:end="5:22"><literal type="number" pos:start="5:13" pos:end="5:13">1</literal> <operator pos:start="5:15" pos:end="5:16">&lt;&lt;</operator> <name pos:start="5:18" pos:end="5:22">nbits</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:24"><expr pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:12">nbits</name></name>    <operator pos:start="11:17" pos:end="11:17">=</operator> <name pos:start="11:19" pos:end="11:23">nbits</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:14">inverse</name></name>  <operator pos:start="13:17" pos:end="13:17">=</operator> <name pos:start="13:19" pos:end="13:25">inverse</name></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><call pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:23">ff_init_ff_cos_tabs</name><argument_list pos:start="17:24" pos:end="17:32">(<argument pos:start="17:25" pos:end="17:31"><expr pos:start="17:25" pos:end="17:31"><name pos:start="17:25" pos:end="17:29">nbits</name><operator pos:start="17:30" pos:end="17:30">+</operator><literal type="number" pos:start="17:31" pos:end="17:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:37"><expr pos:start="21:5" pos:end="21:36"><name pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:13">costab</name></name> <operator pos:start="21:15" pos:end="21:15">=</operator> <name pos:start="21:17" pos:end="21:36"><name pos:start="21:17" pos:end="21:27">ff_cos_tabs</name><index pos:start="21:28" pos:end="21:36">[<expr pos:start="21:29" pos:end="21:35"><name pos:start="21:29" pos:end="21:33">nbits</name><operator pos:start="21:34" pos:end="21:34">+</operator><literal type="number" pos:start="21:35" pos:end="21:35">2</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:49"><expr pos:start="25:5" pos:end="25:48"><name pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:11">csc2</name></name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:48"><name pos:start="25:15" pos:end="25:23">av_malloc</name><argument_list pos:start="25:24" pos:end="25:48">(<argument pos:start="25:25" pos:end="25:47"><expr pos:start="25:25" pos:end="25:47"><name pos:start="25:25" pos:end="25:25">n</name><operator pos:start="25:26" pos:end="25:26">/</operator><literal type="number" pos:start="25:27" pos:end="25:27">2</literal> <operator pos:start="25:29" pos:end="25:29">*</operator> <sizeof pos:start="25:31" pos:end="25:47">sizeof<argument_list pos:start="25:37" pos:end="25:47">(<argument pos:start="25:38" pos:end="25:46"><expr pos:start="25:38" pos:end="25:46"><name pos:start="25:38" pos:end="25:46">FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:62">(<expr pos:start="29:9" pos:end="29:61"><call pos:start="29:9" pos:end="29:57"><name pos:start="29:9" pos:end="29:20">ff_rdft_init</name><argument_list pos:start="29:21" pos:end="29:57">(<argument pos:start="29:22" pos:end="29:29"><expr pos:start="29:22" pos:end="29:29"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:29"><name pos:start="29:23" pos:end="29:23">s</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:29">rdft</name></name></expr></argument>, <argument pos:start="29:32" pos:end="29:36"><expr pos:start="29:32" pos:end="29:36"><name pos:start="29:32" pos:end="29:36">nbits</name></expr></argument>, <argument pos:start="29:39" pos:end="29:56"><expr pos:start="29:39" pos:end="29:56"><name pos:start="29:39" pos:end="29:45">inverse</name> <operator pos:start="29:47" pos:end="29:48">==</operator> <name pos:start="29:50" pos:end="29:56">DCT_III</name></expr></argument>)</argument_list></call> <operator pos:start="29:59" pos:end="29:59">&lt;</operator> <literal type="number" pos:start="29:61" pos:end="29:61">0</literal></expr>)</condition> <block pos:start="29:64" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:25"><expr pos:start="31:9" pos:end="31:24"><call pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:15">av_free</name><argument_list pos:start="31:16" pos:end="31:24">(<argument pos:start="31:17" pos:end="31:23"><expr pos:start="31:17" pos:end="31:23"><name pos:start="31:17" pos:end="31:23"><name pos:start="31:17" pos:end="31:17">s</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">csc2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="39:5" pos:end="41:59">for <control pos:start="39:9" pos:end="39:29">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:24"><expr pos:start="39:17" pos:end="39:23"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <name pos:start="39:21" pos:end="39:21">n</name><operator pos:start="39:22" pos:end="39:22">/</operator><literal type="number" pos:start="39:23" pos:end="39:23">2</literal></expr>;</condition> <incr pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:26">i</name><operator pos:start="39:27" pos:end="39:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="41:9" pos:end="41:59"><block_content pos:start="41:9" pos:end="41:59">

        <expr_stmt pos:start="41:9" pos:end="41:59"><expr pos:start="41:9" pos:end="41:58"><name pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:15">csc2</name><index pos:start="41:16" pos:end="41:18">[<expr pos:start="41:17" pos:end="41:17"><name pos:start="41:17" pos:end="41:17">i</name></expr>]</index></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:24">0.5</literal> <operator pos:start="41:26" pos:end="41:26">/</operator> <call pos:start="41:28" pos:end="41:58"><name pos:start="41:28" pos:end="41:30">sin</name><argument_list pos:start="41:31" pos:end="41:58">(<argument pos:start="41:32" pos:end="41:57"><expr pos:start="41:32" pos:end="41:57"><operator pos:start="41:32" pos:end="41:32">(</operator><name pos:start="41:33" pos:end="41:36">M_PI</name> <operator pos:start="41:38" pos:end="41:38">/</operator> <operator pos:start="41:40" pos:end="41:40">(</operator><literal type="number" pos:start="41:41" pos:end="41:41">2</literal><operator pos:start="41:42" pos:end="41:42">*</operator><name pos:start="41:43" pos:end="41:43">n</name><operator pos:start="41:44" pos:end="41:44">)</operator> <operator pos:start="41:46" pos:end="41:46">*</operator> <operator pos:start="41:48" pos:end="41:48">(</operator><literal type="number" pos:start="41:49" pos:end="41:49">2</literal><operator pos:start="41:50" pos:end="41:50">*</operator><name pos:start="41:51" pos:end="41:51">i</name> <operator pos:start="41:53" pos:end="41:53">+</operator> <literal type="number" pos:start="41:55" pos:end="41:55">1</literal><operator pos:start="41:56" pos:end="41:56">)</operator><operator pos:start="41:57" pos:end="41:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <switch pos:start="45:5" pos:end="55:5">switch<condition pos:start="45:11" pos:end="45:19">(<expr pos:start="45:12" pos:end="45:18"><name pos:start="45:12" pos:end="45:18">inverse</name></expr>)</condition> <block pos:start="45:21" pos:end="55:5">{<block_content pos:start="47:5" pos:end="53:55">

    <case pos:start="47:5" pos:end="47:17">case <expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:14">DCT_I</name></expr>  :</case> <expr_stmt pos:start="47:19" pos:end="47:48"><expr pos:start="47:19" pos:end="47:47"><name pos:start="47:19" pos:end="47:29"><name pos:start="47:19" pos:end="47:19">s</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:29">dct_calc</name></name> <operator pos:start="47:31" pos:end="47:31">=</operator> <name pos:start="47:33" pos:end="47:47">ff_dct_calc_I_c</name></expr>;</expr_stmt> <break pos:start="47:50" pos:end="47:55">break;</break>

    <case pos:start="49:5" pos:end="49:17">case <expr pos:start="49:10" pos:end="49:15"><name pos:start="49:10" pos:end="49:15">DCT_II</name></expr> :</case> <expr_stmt pos:start="49:19" pos:end="49:50"><expr pos:start="49:19" pos:end="49:48"><name pos:start="49:19" pos:end="49:29"><name pos:start="49:19" pos:end="49:19">s</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:29">dct_calc</name></name> <operator pos:start="49:31" pos:end="49:31">=</operator> <name pos:start="49:33" pos:end="49:48">ff_dct_calc_II_c</name></expr> ;</expr_stmt> <break pos:start="49:52" pos:end="49:57">break;</break>

    <case pos:start="51:5" pos:end="51:17">case <expr pos:start="51:10" pos:end="51:16"><name pos:start="51:10" pos:end="51:16">DCT_III</name></expr>:</case> <expr_stmt pos:start="51:19" pos:end="51:50"><expr pos:start="51:19" pos:end="51:49"><name pos:start="51:19" pos:end="51:29"><name pos:start="51:19" pos:end="51:19">s</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:29">dct_calc</name></name> <operator pos:start="51:31" pos:end="51:31">=</operator> <name pos:start="51:33" pos:end="51:49">ff_dct_calc_III_c</name></expr>;</expr_stmt> <break pos:start="51:52" pos:end="51:57">break;</break>

    <case pos:start="53:5" pos:end="53:17">case <expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:14">DST_I</name></expr>  :</case> <expr_stmt pos:start="53:19" pos:end="53:48"><expr pos:start="53:19" pos:end="53:47"><name pos:start="53:19" pos:end="53:29"><name pos:start="53:19" pos:end="53:19">s</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:29">dct_calc</name></name> <operator pos:start="53:31" pos:end="53:31">=</operator> <name pos:start="53:33" pos:end="53:47">ff_dst_calc_I_c</name></expr>;</expr_stmt> <break pos:start="53:50" pos:end="53:55">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="59:5" pos:end="61:33"><if pos:start="59:5" pos:end="61:33">if <condition pos:start="59:8" pos:end="59:40">(<expr pos:start="59:9" pos:end="59:39"><name pos:start="59:9" pos:end="59:15">inverse</name> <operator pos:start="59:17" pos:end="59:18">==</operator> <name pos:start="59:20" pos:end="59:25">DCT_II</name> <operator pos:start="59:27" pos:end="59:28">&amp;&amp;</operator> <name pos:start="59:30" pos:end="59:34">nbits</name> <operator pos:start="59:36" pos:end="59:37">==</operator> <literal type="number" pos:start="59:39" pos:end="59:39">5</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:33"><block_content pos:start="61:9" pos:end="61:33">

        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:19">dct_calc</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:32">dct32_func</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:21"><expr pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:12">dct32</name></name> <operator pos:start="65:14" pos:end="65:14">=</operator> <name pos:start="65:16" pos:end="65:20">dct32</name></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="67:41"><if pos:start="67:5" pos:end="67:41">if <condition pos:start="67:8" pos:end="67:17">(<expr pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:16">HAVE_MMX</name></expr>)</condition><block type="pseudo" pos:start="67:23" pos:end="67:41"><block_content pos:start="67:23" pos:end="67:41">     <expr_stmt pos:start="67:23" pos:end="67:41"><expr pos:start="67:23" pos:end="67:40"><call pos:start="67:23" pos:end="67:40"><name pos:start="67:23" pos:end="67:37">ff_dct_init_mmx</name><argument_list pos:start="67:38" pos:end="67:40">(<argument pos:start="67:39" pos:end="67:39"><expr pos:start="67:39" pos:end="67:39"><name pos:start="67:39" pos:end="67:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
