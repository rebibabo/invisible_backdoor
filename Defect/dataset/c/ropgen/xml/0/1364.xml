<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1364.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">tlb_set_page</name><parameter_list pos:start="1:18" pos:end="5:49">(<parameter pos:start="1:19" pos:end="1:35"><decl pos:start="1:19" pos:end="1:35"><type pos:start="1:19" pos:end="1:35"><name pos:start="1:19" pos:end="1:30">CPUArchState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">env</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><name pos:start="1:38" pos:end="1:49">target_ulong</name></type> <name pos:start="1:51" pos:end="1:55">vaddr</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:30"><decl pos:start="3:19" pos:end="3:30"><type pos:start="3:19" pos:end="3:30"><name pos:start="3:19" pos:end="3:24">hwaddr</name></type> <name pos:start="3:26" pos:end="3:30">paddr</name></decl></parameter>, <parameter pos:start="3:33" pos:end="3:40"><decl pos:start="3:33" pos:end="3:40"><type pos:start="3:33" pos:end="3:40"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:40">prot</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:29"><decl pos:start="5:19" pos:end="5:29"><type pos:start="5:19" pos:end="5:29"><name pos:start="5:19" pos:end="5:21">int</name></type> <name pos:start="5:23" pos:end="5:29">mmu_idx</name></decl></parameter>, <parameter pos:start="5:32" pos:end="5:48"><decl pos:start="5:32" pos:end="5:48"><type pos:start="5:32" pos:end="5:48"><name pos:start="5:32" pos:end="5:43">target_ulong</name></type> <name pos:start="5:45" pos:end="5:48">size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="139:1">{<block_content pos:start="9:5" pos:end="137:5">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">MemoryRegionSection</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:32">section</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:22">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:24">address</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:29">code_address</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">uintptr_t</name></type> <name pos:start="17:15" pos:end="17:20">addend</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">CPUTLBEntry</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:19">te</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">hwaddr</name></type> <name pos:start="21:12" pos:end="21:16">iotlb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><call pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:36">(<argument pos:start="25:12" pos:end="25:35"><expr pos:start="25:12" pos:end="25:35"><name pos:start="25:12" pos:end="25:15">size</name> <operator pos:start="25:17" pos:end="25:18">&gt;=</operator> <name pos:start="25:20" pos:end="25:35">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:33">(<expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:12">size</name> <operator pos:start="27:14" pos:end="27:15">!=</operator> <name pos:start="27:17" pos:end="27:32">TARGET_PAGE_SIZE</name></expr>)</condition> <block pos:start="27:35" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:45">

        <expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><call pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:26">tlb_add_large_page</name><argument_list pos:start="29:27" pos:end="29:44">(<argument pos:start="29:28" pos:end="29:30"><expr pos:start="29:28" pos:end="29:30"><name pos:start="29:28" pos:end="29:30">env</name></expr></argument>, <argument pos:start="29:33" pos:end="29:37"><expr pos:start="29:33" pos:end="29:37"><name pos:start="29:33" pos:end="29:37">vaddr</name></expr></argument>, <argument pos:start="29:40" pos:end="29:43"><expr pos:start="29:40" pos:end="29:43"><name pos:start="29:40" pos:end="29:43">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="36:0"><expr pos:start="33:5" pos:end="33:86"><name pos:start="33:5" pos:end="33:11">section</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:86"><name pos:start="33:15" pos:end="33:28">phys_page_find</name><argument_list pos:start="33:29" pos:end="33:86">(<argument pos:start="33:30" pos:end="33:58"><expr pos:start="33:30" pos:end="33:58"><name pos:start="33:30" pos:end="33:58"><name pos:start="33:30" pos:end="33:49">address_space_memory</name><operator pos:start="33:50" pos:end="33:50">.</operator><name pos:start="33:51" pos:end="33:58">dispatch</name></name></expr></argument>, <argument pos:start="33:61" pos:end="33:85"><expr pos:start="33:61" pos:end="33:85"><name pos:start="33:61" pos:end="33:65">paddr</name> <operator pos:start="33:67" pos:end="33:68">&gt;&gt;</operator> <name pos:start="33:70" pos:end="33:85">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="35:1" pos:end="35:22">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:22"><call pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:11">defined</name><argument_list pos:start="35:12" pos:end="35:22">(<argument pos:start="35:13" pos:end="35:21"><expr pos:start="35:13" pos:end="35:21"><name pos:start="35:13" pos:end="35:21">DEBUG_TLB</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="37:5" pos:end="44:0"><expr pos:start="37:5" pos:end="41:43"><call pos:start="37:5" pos:end="41:43"><name pos:start="37:5" pos:end="37:10">printf</name><argument_list pos:start="37:11" pos:end="41:43">(<argument pos:start="37:12" pos:end="39:41"><expr pos:start="37:12" pos:end="39:41"><literal type="string" pos:start="37:12" pos:end="37:33">"tlb_set_page: vaddr="</literal> <name pos:start="37:35" pos:end="37:47">TARGET_FMT_lx</name> <literal type="string" pos:start="37:49" pos:end="37:59">" paddr=0x"</literal> <name pos:start="37:61" pos:end="37:74">TARGET_FMT_plx</name>

           <literal type="string" pos:start="39:12" pos:end="39:41">" prot=%x idx=%d pd=0x%08lx\n"</literal></expr></argument>,

           <argument pos:start="41:12" pos:end="41:16"><expr pos:start="41:12" pos:end="41:16"><name pos:start="41:12" pos:end="41:16">vaddr</name></expr></argument>, <argument pos:start="41:19" pos:end="41:23"><expr pos:start="41:19" pos:end="41:23"><name pos:start="41:19" pos:end="41:23">paddr</name></expr></argument>, <argument pos:start="41:26" pos:end="41:29"><expr pos:start="41:26" pos:end="41:29"><name pos:start="41:26" pos:end="41:29">prot</name></expr></argument>, <argument pos:start="41:32" pos:end="41:38"><expr pos:start="41:32" pos:end="41:38"><name pos:start="41:32" pos:end="41:38">mmu_idx</name></expr></argument>, <argument pos:start="41:41" pos:end="41:42"><expr pos:start="41:41" pos:end="41:42"><name pos:start="41:41" pos:end="41:42">pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:11">address</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:19">vaddr</name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="65:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:82">(<expr pos:start="49:9" pos:end="49:81"><operator pos:start="49:9" pos:end="49:9">!</operator><call pos:start="49:10" pos:end="49:42"><name pos:start="49:10" pos:end="49:29">memory_region_is_ram</name><argument_list pos:start="49:30" pos:end="49:42">(<argument pos:start="49:31" pos:end="49:41"><expr pos:start="49:31" pos:end="49:41"><name pos:start="49:31" pos:end="49:41"><name pos:start="49:31" pos:end="49:37">section</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:41">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="49:44" pos:end="49:45">&amp;&amp;</operator> <operator pos:start="49:47" pos:end="49:47">!</operator><call pos:start="49:48" pos:end="49:81"><name pos:start="49:48" pos:end="49:68">memory_region_is_romd</name><argument_list pos:start="49:69" pos:end="49:81">(<argument pos:start="49:70" pos:end="49:80"><expr pos:start="49:70" pos:end="49:80"><name pos:start="49:70" pos:end="49:80"><name pos:start="49:70" pos:end="49:76">section</name><operator pos:start="49:77" pos:end="49:78">-&gt;</operator><name pos:start="49:79" pos:end="49:80">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:84" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:19">

        <comment type="block" pos:start="51:9" pos:end="51:28">/* IO memory case */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:28"><expr pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:15">address</name> <operator pos:start="53:17" pos:end="53:18">|=</operator> <name pos:start="53:20" pos:end="53:27">TLB_MMIO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:19"><expr pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:14">addend</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="65:5">else <block pos:start="57:12" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:53">

        <comment type="block" pos:start="59:9" pos:end="59:49">/* TLB_MMIO for rom/romd handled below */</comment>

        <expr_stmt pos:start="61:9" pos:end="63:53"><expr pos:start="61:9" pos:end="63:52"><name pos:start="61:9" pos:end="61:14">addend</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <operator pos:start="61:18" pos:end="61:18">(</operator><name pos:start="61:19" pos:end="61:27">uintptr_t</name><operator pos:start="61:28" pos:end="61:28">)</operator><call pos:start="61:29" pos:end="61:66"><name pos:start="61:29" pos:end="61:53">memory_region_get_ram_ptr</name><argument_list pos:start="61:54" pos:end="61:66">(<argument pos:start="61:55" pos:end="61:65"><expr pos:start="61:55" pos:end="61:65"><name pos:start="61:55" pos:end="61:65"><name pos:start="61:55" pos:end="61:61">section</name><operator pos:start="61:62" pos:end="61:63">-&gt;</operator><name pos:start="61:64" pos:end="61:65">mr</name></name></expr></argument>)</argument_list></call>

        <operator pos:start="63:9" pos:end="63:9">+</operator> <call pos:start="63:11" pos:end="63:52"><name pos:start="63:11" pos:end="63:36">memory_region_section_addr</name><argument_list pos:start="63:37" pos:end="63:52">(<argument pos:start="63:38" pos:end="63:44"><expr pos:start="63:38" pos:end="63:44"><name pos:start="63:38" pos:end="63:44">section</name></expr></argument>, <argument pos:start="63:47" pos:end="63:51"><expr pos:start="63:47" pos:end="63:51"><name pos:start="63:47" pos:end="63:51">paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:27"><expr pos:start="69:5" pos:end="69:26"><name pos:start="69:5" pos:end="69:16">code_address</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:26">address</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="73:54"><expr pos:start="71:5" pos:end="73:53"><name pos:start="71:5" pos:end="71:9">iotlb</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <call pos:start="71:13" pos:end="73:53"><name pos:start="71:13" pos:end="71:43">memory_region_section_get_iotlb</name><argument_list pos:start="71:44" pos:end="73:53">(<argument pos:start="71:45" pos:end="71:47"><expr pos:start="71:45" pos:end="71:47"><name pos:start="71:45" pos:end="71:47">env</name></expr></argument>, <argument pos:start="71:50" pos:end="71:56"><expr pos:start="71:50" pos:end="71:56"><name pos:start="71:50" pos:end="71:56">section</name></expr></argument>, <argument pos:start="71:59" pos:end="71:63"><expr pos:start="71:59" pos:end="71:63"><name pos:start="71:59" pos:end="71:63">vaddr</name></expr></argument>, <argument pos:start="71:66" pos:end="71:70"><expr pos:start="71:66" pos:end="71:70"><name pos:start="71:66" pos:end="71:70">paddr</name></expr></argument>, <argument pos:start="71:73" pos:end="71:76"><expr pos:start="71:73" pos:end="71:76"><name pos:start="71:73" pos:end="71:76">prot</name></expr></argument>,

                                            <argument pos:start="73:45" pos:end="73:52"><expr pos:start="73:45" pos:end="73:52"><operator pos:start="73:45" pos:end="73:45">&amp;</operator><name pos:start="73:46" pos:end="73:52">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:61"><expr pos:start="77:5" pos:end="77:60"><name pos:start="77:5" pos:end="77:9">index</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:18">vaddr</name> <operator pos:start="77:20" pos:end="77:21">&gt;&gt;</operator> <name pos:start="77:23" pos:end="77:38">TARGET_PAGE_BITS</name><operator pos:start="77:39" pos:end="77:39">)</operator> <operator pos:start="77:41" pos:end="77:41">&amp;</operator> <operator pos:start="77:43" pos:end="77:43">(</operator><name pos:start="77:44" pos:end="77:55">CPU_TLB_SIZE</name> <operator pos:start="77:57" pos:end="77:57">-</operator> <literal type="number" pos:start="77:59" pos:end="77:59">1</literal><operator pos:start="77:60" pos:end="77:60">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:47"><expr pos:start="79:5" pos:end="79:46"><name pos:start="79:5" pos:end="79:30"><name pos:start="79:5" pos:end="79:7">env</name><operator pos:start="79:8" pos:end="79:9">-&gt;</operator><name pos:start="79:10" pos:end="79:14">iotlb</name><index pos:start="79:15" pos:end="79:23">[<expr pos:start="79:16" pos:end="79:22"><name pos:start="79:16" pos:end="79:22">mmu_idx</name></expr>]</index><index pos:start="79:24" pos:end="79:30">[<expr pos:start="79:25" pos:end="79:29"><name pos:start="79:25" pos:end="79:29">index</name></expr>]</index></name> <operator pos:start="79:32" pos:end="79:32">=</operator> <name pos:start="79:34" pos:end="79:38">iotlb</name> <operator pos:start="79:40" pos:end="79:40">-</operator> <name pos:start="79:42" pos:end="79:46">vaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:41"><expr pos:start="81:5" pos:end="81:40"><name pos:start="81:5" pos:end="81:6">te</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <operator pos:start="81:10" pos:end="81:10">&amp;</operator><name pos:start="81:11" pos:end="81:40"><name pos:start="81:11" pos:end="81:13">env</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:24">tlb_table</name><index pos:start="81:25" pos:end="81:33">[<expr pos:start="81:26" pos:end="81:32"><name pos:start="81:26" pos:end="81:32">mmu_idx</name></expr>]</index><index pos:start="81:34" pos:end="81:40">[<expr pos:start="81:35" pos:end="81:39"><name pos:start="81:35" pos:end="81:39">index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:32"><expr pos:start="83:5" pos:end="83:31"><name pos:start="83:5" pos:end="83:14"><name pos:start="83:5" pos:end="83:6">te</name><operator pos:start="83:7" pos:end="83:8">-&gt;</operator><name pos:start="83:9" pos:end="83:14">addend</name></name> <operator pos:start="83:16" pos:end="83:16">=</operator> <name pos:start="83:18" pos:end="83:23">addend</name> <operator pos:start="83:25" pos:end="83:25">-</operator> <name pos:start="83:27" pos:end="83:31">vaddr</name></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:25">(<expr pos:start="85:9" pos:end="85:24"><name pos:start="85:9" pos:end="85:12">prot</name> <operator pos:start="85:14" pos:end="85:14">&amp;</operator> <name pos:start="85:16" pos:end="85:24">PAGE_READ</name></expr>)</condition> <block pos:start="85:27" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:32">

        <expr_stmt pos:start="87:9" pos:end="87:32"><expr pos:start="87:9" pos:end="87:31"><name pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:10">te</name><operator pos:start="87:11" pos:end="87:12">-&gt;</operator><name pos:start="87:13" pos:end="87:21">addr_read</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:31">address</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="93:5">else <block pos:start="89:12" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:27">

        <expr_stmt pos:start="91:9" pos:end="91:27"><expr pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:10">te</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:21">addr_read</name></name> <operator pos:start="91:23" pos:end="91:23">=</operator> <operator pos:start="91:25" pos:end="91:25">-</operator><literal type="number" pos:start="91:26" pos:end="91:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:25">(<expr pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:12">prot</name> <operator pos:start="97:14" pos:end="97:14">&amp;</operator> <name pos:start="97:16" pos:end="97:24">PAGE_EXEC</name></expr>)</condition> <block pos:start="97:27" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:37">

        <expr_stmt pos:start="99:9" pos:end="99:37"><expr pos:start="99:9" pos:end="99:36"><name pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:10">te</name><operator pos:start="99:11" pos:end="99:12">-&gt;</operator><name pos:start="99:13" pos:end="99:21">addr_code</name></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:36">code_address</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="105:5">else <block pos:start="101:12" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:27">

        <expr_stmt pos:start="103:9" pos:end="103:27"><expr pos:start="103:9" pos:end="103:26"><name pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:10">te</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:21">addr_code</name></name> <operator pos:start="103:23" pos:end="103:23">=</operator> <operator pos:start="103:25" pos:end="103:25">-</operator><literal type="number" pos:start="103:26" pos:end="103:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="107:5" pos:end="137:5"><if pos:start="107:5" pos:end="133:5">if <condition pos:start="107:8" pos:end="107:26">(<expr pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:12">prot</name> <operator pos:start="107:14" pos:end="107:14">&amp;</operator> <name pos:start="107:16" pos:end="107:25">PAGE_WRITE</name></expr>)</condition> <block pos:start="107:28" pos:end="133:5">{<block_content pos:start="109:9" pos:end="131:9">

        <if_stmt pos:start="109:9" pos:end="131:9"><if pos:start="109:9" pos:end="117:9">if <condition pos:start="109:12" pos:end="111:50">(<expr pos:start="109:13" pos:end="111:49"><operator pos:start="109:13" pos:end="109:13">(</operator><call pos:start="109:14" pos:end="109:46"><name pos:start="109:14" pos:end="109:33">memory_region_is_ram</name><argument_list pos:start="109:34" pos:end="109:46">(<argument pos:start="109:35" pos:end="109:45"><expr pos:start="109:35" pos:end="109:45"><name pos:start="109:35" pos:end="109:45"><name pos:start="109:35" pos:end="109:41">section</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:45">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="109:48" pos:end="109:49">&amp;&amp;</operator> <name pos:start="109:51" pos:end="109:67"><name pos:start="109:51" pos:end="109:57">section</name><operator pos:start="109:58" pos:end="109:59">-&gt;</operator><name pos:start="109:60" pos:end="109:67">readonly</name></name><operator pos:start="109:68" pos:end="109:68">)</operator>

            <operator pos:start="111:13" pos:end="111:14">||</operator> <call pos:start="111:16" pos:end="111:49"><name pos:start="111:16" pos:end="111:36">memory_region_is_romd</name><argument_list pos:start="111:37" pos:end="111:49">(<argument pos:start="111:38" pos:end="111:48"><expr pos:start="111:38" pos:end="111:48"><name pos:start="111:38" pos:end="111:48"><name pos:start="111:38" pos:end="111:44">section</name><operator pos:start="111:45" pos:end="111:46">-&gt;</operator><name pos:start="111:47" pos:end="111:48">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:52" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:48">

            <comment type="block" pos:start="113:13" pos:end="113:55">/* Write access calls the I/O callback.  */</comment>

            <expr_stmt pos:start="115:13" pos:end="115:48"><expr pos:start="115:13" pos:end="115:47"><name pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:14">te</name><operator pos:start="115:15" pos:end="115:16">-&gt;</operator><name pos:start="115:17" pos:end="115:26">addr_write</name></name> <operator pos:start="115:28" pos:end="115:28">=</operator> <name pos:start="115:30" pos:end="115:36">address</name> <operator pos:start="115:38" pos:end="115:38">|</operator> <name pos:start="115:40" pos:end="115:47">TLB_MMIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="117:11" pos:end="127:9">else if <condition pos:start="117:19" pos:end="123:73">(<expr pos:start="117:20" pos:end="123:72"><call pos:start="117:20" pos:end="117:52"><name pos:start="117:20" pos:end="117:39">memory_region_is_ram</name><argument_list pos:start="117:40" pos:end="117:52">(<argument pos:start="117:41" pos:end="117:51"><expr pos:start="117:41" pos:end="117:51"><name pos:start="117:41" pos:end="117:51"><name pos:start="117:41" pos:end="117:47">section</name><operator pos:start="117:48" pos:end="117:49">-&gt;</operator><name pos:start="117:50" pos:end="117:51">mr</name></name></expr></argument>)</argument_list></call>

                   <operator pos:start="119:20" pos:end="119:21">&amp;&amp;</operator> <operator pos:start="119:23" pos:end="119:23">!</operator><call pos:start="119:24" pos:end="123:72"><name pos:start="119:24" pos:end="119:51">cpu_physical_memory_is_dirty</name><argument_list pos:start="119:52" pos:end="123:72">(

                           <argument pos:start="121:28" pos:end="123:71"><expr pos:start="121:28" pos:end="123:71"><name pos:start="121:28" pos:end="121:48"><name pos:start="121:28" pos:end="121:34">section</name><operator pos:start="121:35" pos:end="121:36">-&gt;</operator><name pos:start="121:37" pos:end="121:38">mr</name><operator pos:start="121:39" pos:end="121:40">-&gt;</operator><name pos:start="121:41" pos:end="121:48">ram_addr</name></name>

                           <operator pos:start="123:28" pos:end="123:28">+</operator> <call pos:start="123:30" pos:end="123:71"><name pos:start="123:30" pos:end="123:55">memory_region_section_addr</name><argument_list pos:start="123:56" pos:end="123:71">(<argument pos:start="123:57" pos:end="123:63"><expr pos:start="123:57" pos:end="123:63"><name pos:start="123:57" pos:end="123:63">section</name></expr></argument>, <argument pos:start="123:66" pos:end="123:70"><expr pos:start="123:66" pos:end="123:70"><name pos:start="123:66" pos:end="123:70">paddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:75" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:52">

            <expr_stmt pos:start="125:13" pos:end="125:52"><expr pos:start="125:13" pos:end="125:51"><name pos:start="125:13" pos:end="125:26"><name pos:start="125:13" pos:end="125:14">te</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:26">addr_write</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <name pos:start="125:30" pos:end="125:36">address</name> <operator pos:start="125:38" pos:end="125:38">|</operator> <name pos:start="125:40" pos:end="125:51">TLB_NOTDIRTY</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="127:11" pos:end="131:9">else <block pos:start="127:16" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:37">

            <expr_stmt pos:start="129:13" pos:end="129:37"><expr pos:start="129:13" pos:end="129:36"><name pos:start="129:13" pos:end="129:26"><name pos:start="129:13" pos:end="129:14">te</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:26">addr_write</name></name> <operator pos:start="129:28" pos:end="129:28">=</operator> <name pos:start="129:30" pos:end="129:36">address</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="133:7" pos:end="137:5">else <block pos:start="133:12" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:28">

        <expr_stmt pos:start="135:9" pos:end="135:28"><expr pos:start="135:9" pos:end="135:27"><name pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:10">te</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:22">addr_write</name></name> <operator pos:start="135:24" pos:end="135:24">=</operator> <operator pos:start="135:26" pos:end="135:26">-</operator><literal type="number" pos:start="135:27" pos:end="135:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
