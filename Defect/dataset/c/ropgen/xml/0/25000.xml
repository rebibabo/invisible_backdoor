<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25000.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">split_init</name><parameter_list pos:start="1:22" pos:end="1:75">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:37">AVFilterContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:54">char</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">args</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:66">void</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:74">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:21">nb_outputs</name> <init pos:start="5:23" pos:end="5:25">= <expr pos:start="5:25" pos:end="5:25"><literal type="number" pos:start="5:25" pos:end="5:25">2</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="23:5"><if pos:start="9:5" pos:end="23:5">if <condition pos:start="9:8" pos:end="9:13">(<expr pos:start="9:9" pos:end="9:12"><name pos:start="9:9" pos:end="9:12">args</name></expr>)</condition> <block pos:start="9:15" pos:end="23:5">{<block_content pos:start="11:9" pos:end="21:9">

        <expr_stmt pos:start="11:9" pos:end="11:43"><expr pos:start="11:9" pos:end="11:42"><name pos:start="11:9" pos:end="11:18">nb_outputs</name> <operator pos:start="11:20" pos:end="11:20">=</operator> <call pos:start="11:22" pos:end="11:42"><name pos:start="11:22" pos:end="11:27">strtol</name><argument_list pos:start="11:28" pos:end="11:42">(<argument pos:start="11:29" pos:end="11:32"><expr pos:start="11:29" pos:end="11:32"><name pos:start="11:29" pos:end="11:32">args</name></expr></argument>, <argument pos:start="11:35" pos:end="11:38"><expr pos:start="11:35" pos:end="11:38"><name pos:start="11:35" pos:end="11:38">NULL</name></expr></argument>, <argument pos:start="11:41" pos:end="11:41"><expr pos:start="11:41" pos:end="11:41"><literal type="number" pos:start="11:41" pos:end="11:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="13:9" pos:end="21:9"><if pos:start="13:9" pos:end="21:9">if <condition pos:start="13:12" pos:end="13:28">(<expr pos:start="13:13" pos:end="13:27"><name pos:start="13:13" pos:end="13:22">nb_outputs</name> <operator pos:start="13:24" pos:end="13:25">&lt;=</operator> <literal type="number" pos:start="13:27" pos:end="13:27">0</literal></expr>)</condition> <block pos:start="13:30" pos:end="21:9">{<block_content pos:start="15:13" pos:end="19:35">

            <expr_stmt pos:start="15:13" pos:end="17:31"><expr pos:start="15:13" pos:end="17:30"><call pos:start="15:13" pos:end="17:30"><name pos:start="15:13" pos:end="15:18">av_log</name><argument_list pos:start="15:19" pos:end="17:30">(<argument pos:start="15:20" pos:end="15:22"><expr pos:start="15:20" pos:end="15:22"><name pos:start="15:20" pos:end="15:22">ctx</name></expr></argument>, <argument pos:start="15:25" pos:end="15:36"><expr pos:start="15:25" pos:end="15:36"><name pos:start="15:25" pos:end="15:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:39" pos:end="15:82"><expr pos:start="15:39" pos:end="15:82"><literal type="string" pos:start="15:39" pos:end="15:82">"Invalid number of outputs specified: %d.\n"</literal></expr></argument>,

                   <argument pos:start="17:20" pos:end="17:29"><expr pos:start="17:20" pos:end="17:29"><name pos:start="17:20" pos:end="17:29">nb_outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="19:13" pos:end="19:35">return <expr pos:start="19:20" pos:end="19:34"><call pos:start="19:20" pos:end="19:34"><name pos:start="19:20" pos:end="19:26">AVERROR</name><argument_list pos:start="19:27" pos:end="19:34">(<argument pos:start="19:28" pos:end="19:33"><expr pos:start="19:28" pos:end="19:33"><name pos:start="19:28" pos:end="19:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="27:5" pos:end="45:5">for <control pos:start="27:9" pos:end="27:36">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:31"><expr pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:30">nb_outputs</name></expr>;</condition> <incr pos:start="27:33" pos:end="27:35"><expr pos:start="27:33" pos:end="27:35"><name pos:start="27:33" pos:end="27:33">i</name><operator pos:start="27:34" pos:end="27:35">++</operator></expr></incr>)</control> <block pos:start="27:38" pos:end="45:5">{<block_content pos:start="29:9" pos:end="43:45">

        <decl_stmt pos:start="29:9" pos:end="29:22"><decl pos:start="29:9" pos:end="29:21"><type pos:start="29:9" pos:end="29:12"><name pos:start="29:9" pos:end="29:12">char</name></type> <name pos:start="29:14" pos:end="29:21"><name pos:start="29:14" pos:end="29:17">name</name><index pos:start="29:18" pos:end="29:21">[<expr pos:start="29:19" pos:end="29:20"><literal type="number" pos:start="29:19" pos:end="29:20">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:32"><decl pos:start="31:9" pos:end="31:31"><type pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:19">AVFilterPad</name></type> <name pos:start="31:21" pos:end="31:23">pad</name> <init pos:start="31:25" pos:end="31:31">= <expr pos:start="31:27" pos:end="31:31"><block pos:start="31:27" pos:end="31:31">{ <expr pos:start="31:29" pos:end="31:29"><literal type="number" pos:start="31:29" pos:end="31:29">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:52"><expr pos:start="35:9" pos:end="35:51"><call pos:start="35:9" pos:end="35:51"><name pos:start="35:9" pos:end="35:16">snprintf</name><argument_list pos:start="35:17" pos:end="35:51">(<argument pos:start="35:18" pos:end="35:21"><expr pos:start="35:18" pos:end="35:21"><name pos:start="35:18" pos:end="35:21">name</name></expr></argument>, <argument pos:start="35:24" pos:end="35:35"><expr pos:start="35:24" pos:end="35:35"><sizeof pos:start="35:24" pos:end="35:35">sizeof<argument_list pos:start="35:30" pos:end="35:35">(<argument pos:start="35:31" pos:end="35:34"><expr pos:start="35:31" pos:end="35:34"><name pos:start="35:31" pos:end="35:34">name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:38" pos:end="35:47"><expr pos:start="35:38" pos:end="35:47"><literal type="string" pos:start="35:38" pos:end="35:47">"output%d"</literal></expr></argument>, <argument pos:start="35:50" pos:end="35:50"><expr pos:start="35:50" pos:end="35:50"><name pos:start="35:50" pos:end="35:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:89"><expr pos:start="37:9" pos:end="37:88"><name pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:11">pad</name><operator pos:start="37:12" pos:end="37:12">.</operator><name pos:start="37:13" pos:end="37:16">type</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <ternary pos:start="37:20" pos:end="37:88"><condition pos:start="37:20" pos:end="37:48"><expr pos:start="37:20" pos:end="37:46"><operator pos:start="37:20" pos:end="37:20">!</operator><call pos:start="37:21" pos:end="37:46"><name pos:start="37:21" pos:end="37:26">strcmp</name><argument_list pos:start="37:27" pos:end="37:46">(<argument pos:start="37:28" pos:end="37:36"><expr pos:start="37:28" pos:end="37:36"><name pos:start="37:28" pos:end="37:36"><name pos:start="37:28" pos:end="37:30">ctx</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:36">name</name></name></expr></argument>, <argument pos:start="37:39" pos:end="37:45"><expr pos:start="37:39" pos:end="37:45"><literal type="string" pos:start="37:39" pos:end="37:45">"split"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="37:50" pos:end="37:67"> <expr pos:start="37:50" pos:end="37:67"><name pos:start="37:50" pos:end="37:67">AVMEDIA_TYPE_VIDEO</name></expr> </then><else pos:start="37:69" pos:end="37:88">: <expr pos:start="37:71" pos:end="37:88"><name pos:start="37:71" pos:end="37:88">AVMEDIA_TYPE_AUDIO</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:35"><expr pos:start="39:9" pos:end="39:34"><name pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:11">pad</name><operator pos:start="39:12" pos:end="39:12">.</operator><name pos:start="39:13" pos:end="39:16">name</name></name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:34"><name pos:start="39:20" pos:end="39:28">av_strdup</name><argument_list pos:start="39:29" pos:end="39:34">(<argument pos:start="39:30" pos:end="39:33"><expr pos:start="39:30" pos:end="39:33"><name pos:start="39:30" pos:end="39:33">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:45"><expr pos:start="43:9" pos:end="43:44"><call pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:30">avfilter_insert_outpad</name><argument_list pos:start="43:31" pos:end="43:44">(<argument pos:start="43:32" pos:end="43:34"><expr pos:start="43:32" pos:end="43:34"><name pos:start="43:32" pos:end="43:34">ctx</name></expr></argument>, <argument pos:start="43:37" pos:end="43:37"><expr pos:start="43:37" pos:end="43:37"><name pos:start="43:37" pos:end="43:37">i</name></expr></argument>, <argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><operator pos:start="43:40" pos:end="43:40">&amp;</operator><name pos:start="43:41" pos:end="43:43">pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="49:5" pos:end="49:13">return <expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
