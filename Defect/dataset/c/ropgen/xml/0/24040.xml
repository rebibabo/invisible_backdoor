<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24040.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">local_parse_opts</name><parameter_list pos:start="1:28" pos:end="1:70">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:36">QemuOpts</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">opts</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:69"><decl pos:start="1:45" pos:end="1:69"><type pos:start="1:45" pos:end="1:69"><name pos:start="1:45" pos:end="1:64"><name pos:start="1:45" pos:end="1:50">struct</name> <name pos:start="1:52" pos:end="1:64">FsDriverEntry</name></name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">fse</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:13">

    <decl_stmt pos:start="5:5" pos:end="5:65"><decl pos:start="5:5" pos:end="5:64"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">sec_model</name> <init pos:start="5:27" pos:end="5:64">= <expr pos:start="5:29" pos:end="5:64"><call pos:start="5:29" pos:end="5:64"><name pos:start="5:29" pos:end="5:40">qemu_opt_get</name><argument_list pos:start="5:41" pos:end="5:64">(<argument pos:start="5:42" pos:end="5:45"><expr pos:start="5:42" pos:end="5:45"><name pos:start="5:42" pos:end="5:45">opts</name></expr></argument>, <argument pos:start="5:48" pos:end="5:63"><expr pos:start="5:48" pos:end="5:63"><literal type="string" pos:start="5:48" pos:end="5:63">"security_model"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">path</name> <init pos:start="7:22" pos:end="7:49">= <expr pos:start="7:24" pos:end="7:49"><call pos:start="7:24" pos:end="7:49"><name pos:start="7:24" pos:end="7:35">qemu_opt_get</name><argument_list pos:start="7:36" pos:end="7:49">(<argument pos:start="7:37" pos:end="7:40"><expr pos:start="7:37" pos:end="7:40"><name pos:start="7:37" pos:end="7:40">opts</name></expr></argument>, <argument pos:start="7:43" pos:end="7:48"><expr pos:start="7:43" pos:end="7:48"><literal type="string" pos:start="7:43" pos:end="7:48">"path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="11:19">(<expr pos:start="11:9" pos:end="11:18"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:18">sec_model</name></expr>)</condition> <block pos:start="11:21" pos:end="21:5">{<block_content pos:start="13:9" pos:end="19:18">

        <expr_stmt pos:start="13:9" pos:end="17:64"><expr pos:start="13:9" pos:end="17:63"><call pos:start="13:9" pos:end="17:63"><name pos:start="13:9" pos:end="13:15">fprintf</name><argument_list pos:start="13:16" pos:end="17:63">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22">stderr</name></expr></argument>, <argument pos:start="13:25" pos:end="17:62"><expr pos:start="13:25" pos:end="17:62"><literal type="string" pos:start="13:25" pos:end="13:56">"security model not specified, "</literal>

                <literal type="string" pos:start="15:17" pos:end="15:67">"local fs needs security model\nvalid options are:"</literal>

                <literal type="string" pos:start="17:17" pos:end="17:62">"\tsecurity_model=[passthrough|mapped|none]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="45:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:42">(<expr pos:start="25:9" pos:end="25:41"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:41"><name pos:start="25:10" pos:end="25:15">strcmp</name><argument_list pos:start="25:16" pos:end="25:41">(<argument pos:start="25:17" pos:end="25:25"><expr pos:start="25:17" pos:end="25:25"><name pos:start="25:17" pos:end="25:25">sec_model</name></expr></argument>, <argument pos:start="25:28" pos:end="25:40"><expr pos:start="25:28" pos:end="25:40"><literal type="string" pos:start="25:28" pos:end="25:40">"passthrough"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:44" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:49">

        <expr_stmt pos:start="27:9" pos:end="27:49"><expr pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:11">fse</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:25">export_flags</name></name> <operator pos:start="27:27" pos:end="27:28">|=</operator> <name pos:start="27:30" pos:end="27:48">V9FS_SM_PASSTHROUGH</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="33:5">else if <condition pos:start="29:15" pos:end="29:44">(<expr pos:start="29:16" pos:end="29:43"><operator pos:start="29:16" pos:end="29:16">!</operator><call pos:start="29:17" pos:end="29:43"><name pos:start="29:17" pos:end="29:22">strcmp</name><argument_list pos:start="29:23" pos:end="29:43">(<argument pos:start="29:24" pos:end="29:32"><expr pos:start="29:24" pos:end="29:32"><name pos:start="29:24" pos:end="29:32">sec_model</name></expr></argument>, <argument pos:start="29:35" pos:end="29:42"><expr pos:start="29:35" pos:end="29:42"><literal type="string" pos:start="29:35" pos:end="29:42">"mapped"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:46" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:44">

        <expr_stmt pos:start="31:9" pos:end="31:44"><expr pos:start="31:9" pos:end="31:43"><name pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:11">fse</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:25">export_flags</name></name> <operator pos:start="31:27" pos:end="31:28">|=</operator> <name pos:start="31:30" pos:end="31:43">V9FS_SM_MAPPED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="33:7" pos:end="37:5">else if <condition pos:start="33:15" pos:end="33:42">(<expr pos:start="33:16" pos:end="33:41"><operator pos:start="33:16" pos:end="33:16">!</operator><call pos:start="33:17" pos:end="33:41"><name pos:start="33:17" pos:end="33:22">strcmp</name><argument_list pos:start="33:23" pos:end="33:41">(<argument pos:start="33:24" pos:end="33:32"><expr pos:start="33:24" pos:end="33:32"><name pos:start="33:24" pos:end="33:32">sec_model</name></expr></argument>, <argument pos:start="33:35" pos:end="33:40"><expr pos:start="33:35" pos:end="33:40"><literal type="string" pos:start="33:35" pos:end="33:40">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:44" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:42">

        <expr_stmt pos:start="35:9" pos:end="35:42"><expr pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:11">fse</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:25">export_flags</name></name> <operator pos:start="35:27" pos:end="35:28">|=</operator> <name pos:start="35:30" pos:end="35:41">V9FS_SM_NONE</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="45:5">else <block pos:start="37:12" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:18">

        <expr_stmt pos:start="39:9" pos:end="41:63"><expr pos:start="39:9" pos:end="41:62"><call pos:start="39:9" pos:end="41:62"><name pos:start="39:9" pos:end="39:15">fprintf</name><argument_list pos:start="39:16" pos:end="41:62">(<argument pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:22">stderr</name></expr></argument>, <argument pos:start="39:25" pos:end="41:50"><expr pos:start="39:25" pos:end="41:50"><literal type="string" pos:start="39:25" pos:end="39:80">"Invalid security model %s specified, valid options are"</literal>

                <literal type="string" pos:start="41:17" pos:end="41:50">"\n\t [passthrough|mapped|none]\n"</literal></expr></argument>, <argument pos:start="41:53" pos:end="41:61"><expr pos:start="41:53" pos:end="41:61"><name pos:start="41:53" pos:end="41:61">sec_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:14">(<expr pos:start="49:9" pos:end="49:13"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:13">path</name></expr>)</condition> <block pos:start="49:16" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <expr_stmt pos:start="51:9" pos:end="51:55"><expr pos:start="51:9" pos:end="51:54"><call pos:start="51:9" pos:end="51:54"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:54">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:53"><expr pos:start="51:25" pos:end="51:53"><literal type="string" pos:start="51:25" pos:end="51:53">"fsdev: No path specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:7">fse</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:13">path</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:24">g_strdup</name><argument_list pos:start="57:25" pos:end="57:30">(<argument pos:start="57:26" pos:end="57:29"><expr pos:start="57:26" pos:end="57:29"><name pos:start="57:26" pos:end="57:29">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="61:5" pos:end="61:13">return <expr pos:start="61:12" pos:end="61:12"><literal type="number" pos:start="61:12" pos:end="61:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
