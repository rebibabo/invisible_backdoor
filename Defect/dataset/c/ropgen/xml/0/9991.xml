<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9991.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">decode_group3_2d_line</name><parameter_list pos:start="1:33" pos:end="3:89">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:73"><decl pos:start="1:57" pos:end="1:73"><type pos:start="1:57" pos:end="1:73"><name pos:start="1:57" pos:end="1:69">GetBitContext</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:73">gb</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:42"><decl pos:start="3:34" pos:end="3:42"><type pos:start="3:34" pos:end="3:42"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:42">width</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:53"><decl pos:start="3:45" pos:end="3:53"><type pos:start="3:45" pos:end="3:53"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">runs</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:72"><decl pos:start="3:56" pos:end="3:72"><type pos:start="3:56" pos:end="3:72"><specifier pos:start="3:56" pos:end="3:60">const</specifier> <name pos:start="3:62" pos:end="3:64">int</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:72">runend</name></decl></parameter>, <parameter pos:start="3:75" pos:end="3:88"><decl pos:start="3:75" pos:end="3:88"><type pos:start="3:75" pos:end="3:88"><specifier pos:start="3:75" pos:end="3:79">const</specifier> <name pos:start="3:81" pos:end="3:83">int</name> <modifier pos:start="3:85" pos:end="3:85">*</modifier></type><name pos:start="3:86" pos:end="3:88">ref</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="167:1">{<block_content pos:start="7:5" pos:end="165:13">

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">mode</name> <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>, <decl pos:start="7:19" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:22">offs</name> <init pos:start="7:24" pos:end="7:26">= <expr pos:start="7:26" pos:end="7:26"><literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr></init></decl>, <decl pos:start="7:29" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:31">run</name> <init pos:start="7:33" pos:end="7:35">= <expr pos:start="7:35" pos:end="7:35"><literal type="number" pos:start="7:35" pos:end="7:35">0</literal></expr></init></decl>, <decl pos:start="7:38" pos:end="7:50"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:38" pos:end="7:46">saved_run</name> <init pos:start="7:48" pos:end="7:50">= <expr pos:start="7:50" pos:end="7:50"><literal type="number" pos:start="7:50" pos:end="7:50">0</literal></expr></init></decl>, <decl pos:start="7:53" pos:end="7:53"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:53" pos:end="7:53">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">run_off</name> <init pos:start="9:17" pos:end="9:24">= <expr pos:start="9:19" pos:end="9:24"><operator pos:start="9:19" pos:end="9:19">*</operator><name pos:start="9:20" pos:end="9:22">ref</name><operator pos:start="9:23" pos:end="9:24">++</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">int</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:18">run_start</name> <init pos:start="11:20" pos:end="11:25">= <expr pos:start="11:22" pos:end="11:25"><name pos:start="11:22" pos:end="11:25">runs</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:13"><expr pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">runend</name><operator pos:start="15:11" pos:end="15:12">--</operator></expr>;</expr_stmt> <comment type="line" pos:start="15:15" pos:end="15:39">// for the last written 0</comment>



    <while pos:start="19:5" pos:end="159:5">while<condition pos:start="19:10" pos:end="19:23">(<expr pos:start="19:11" pos:end="19:22"><name pos:start="19:11" pos:end="19:14">offs</name> <operator pos:start="19:16" pos:end="19:16">&lt;</operator> <name pos:start="19:18" pos:end="19:22">width</name></expr>)</condition><block pos:start="19:24" pos:end="159:5">{<block_content pos:start="21:9" pos:end="157:9">

        <decl_stmt pos:start="21:9" pos:end="21:66"><decl pos:start="21:9" pos:end="21:65"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:17">cmode</name> <init pos:start="21:19" pos:end="21:65">= <expr pos:start="21:21" pos:end="21:65"><call pos:start="21:21" pos:end="21:65"><name pos:start="21:21" pos:end="21:28">get_vlc2</name><argument_list pos:start="21:29" pos:end="21:65">(<argument pos:start="21:30" pos:end="21:31"><expr pos:start="21:30" pos:end="21:31"><name pos:start="21:30" pos:end="21:31">gb</name></expr></argument>, <argument pos:start="21:34" pos:end="21:58"><expr pos:start="21:34" pos:end="21:58"><name pos:start="21:34" pos:end="21:58"><name pos:start="21:34" pos:end="21:52">ccitt_group3_2d_vlc</name><operator pos:start="21:53" pos:end="21:53">.</operator><name pos:start="21:54" pos:end="21:58">table</name></name></expr></argument>, <argument pos:start="21:61" pos:end="21:61"><expr pos:start="21:61" pos:end="21:61"><literal type="number" pos:start="21:61" pos:end="21:61">9</literal></expr></argument>, <argument pos:start="21:64" pos:end="21:64"><expr pos:start="21:64" pos:end="21:64"><literal type="number" pos:start="21:64" pos:end="21:64">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if<condition pos:start="23:11" pos:end="23:23">(<expr pos:start="23:12" pos:end="23:22"><name pos:start="23:12" pos:end="23:16">cmode</name> <operator pos:start="23:18" pos:end="23:19">==</operator> <operator pos:start="23:21" pos:end="23:21">-</operator><literal type="number" pos:start="23:22" pos:end="23:22">1</literal></expr>)</condition><block pos:start="23:24" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:22">

            <expr_stmt pos:start="25:13" pos:end="25:64"><expr pos:start="25:13" pos:end="25:63"><call pos:start="25:13" pos:end="25:63"><name pos:start="25:13" pos:end="25:18">av_log</name><argument_list pos:start="25:19" pos:end="25:63">(<argument pos:start="25:20" pos:end="25:24"><expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:24">avctx</name></expr></argument>, <argument pos:start="25:27" pos:end="25:38"><expr pos:start="25:27" pos:end="25:38"><name pos:start="25:27" pos:end="25:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:41" pos:end="25:62"><expr pos:start="25:41" pos:end="25:62"><literal type="string" pos:start="25:41" pos:end="25:62">"Incorrect mode VLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="31:9" pos:end="31:28">//sync line pointers</comment>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if<condition pos:start="33:11" pos:end="33:29">(<expr pos:start="33:12" pos:end="33:28"><name pos:start="33:12" pos:end="33:15">runs</name> <operator pos:start="33:17" pos:end="33:18">!=</operator> <name pos:start="33:20" pos:end="33:28">run_start</name></expr>)</condition><block type="pseudo" pos:start="33:30" pos:end="39:9"><block_content pos:start="33:30" pos:end="39:9"><while pos:start="33:30" pos:end="39:9">while<condition pos:start="33:35" pos:end="33:51">(<expr pos:start="33:36" pos:end="33:50"><name pos:start="33:36" pos:end="33:42">run_off</name> <operator pos:start="33:44" pos:end="33:45">&lt;=</operator> <name pos:start="33:47" pos:end="33:50">offs</name></expr>)</condition><block pos:start="33:52" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:30">

            <expr_stmt pos:start="35:13" pos:end="35:30"><expr pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:19">run_off</name> <operator pos:start="35:21" pos:end="35:22">+=</operator> <operator pos:start="35:24" pos:end="35:24">*</operator><name pos:start="35:25" pos:end="35:27">ref</name><operator pos:start="35:28" pos:end="35:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:30"><expr pos:start="37:13" pos:end="37:29"><name pos:start="37:13" pos:end="37:19">run_off</name> <operator pos:start="37:21" pos:end="37:22">+=</operator> <operator pos:start="37:24" pos:end="37:24">*</operator><name pos:start="37:25" pos:end="37:27">ref</name><operator pos:start="37:28" pos:end="37:29">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while></block_content></block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="157:9"><if pos:start="41:9" pos:end="61:9">if<condition pos:start="41:11" pos:end="41:18">(<expr pos:start="41:12" pos:end="41:17"><operator pos:start="41:12" pos:end="41:12">!</operator><name pos:start="41:13" pos:end="41:17">cmode</name></expr>)</condition><block pos:start="41:19" pos:end="61:9">{<block_content pos:start="43:13" pos:end="59:29"><comment type="line" pos:start="41:20" pos:end="41:30">//pass mode</comment>

            <expr_stmt pos:start="43:13" pos:end="43:30"><expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:19">run_off</name> <operator pos:start="43:21" pos:end="43:22">+=</operator> <operator pos:start="43:24" pos:end="43:24">*</operator><name pos:start="43:25" pos:end="43:27">ref</name><operator pos:start="43:28" pos:end="43:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:33"><expr pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:15">run</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:25">run_off</name> <operator pos:start="45:27" pos:end="45:27">-</operator> <name pos:start="45:29" pos:end="45:32">offs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:30"><expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:19">run_off</name> <operator pos:start="47:21" pos:end="47:22">+=</operator> <operator pos:start="47:24" pos:end="47:24">*</operator><name pos:start="47:25" pos:end="47:27">ref</name><operator pos:start="47:28" pos:end="47:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:24"><expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:16">offs</name> <operator pos:start="49:18" pos:end="49:19">+=</operator> <name pos:start="49:21" pos:end="49:23">run</name></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="57:13"><if pos:start="51:13" pos:end="57:13">if<condition pos:start="51:15" pos:end="51:28">(<expr pos:start="51:16" pos:end="51:27"><name pos:start="51:16" pos:end="51:19">offs</name> <operator pos:start="51:21" pos:end="51:21">&gt;</operator> <name pos:start="51:23" pos:end="51:27">width</name></expr>)</condition><block pos:start="51:29" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:26">

                <expr_stmt pos:start="53:17" pos:end="53:72"><expr pos:start="53:17" pos:end="53:71"><call pos:start="53:17" pos:end="53:71"><name pos:start="53:17" pos:end="53:22">av_log</name><argument_list pos:start="53:23" pos:end="53:71">(<argument pos:start="53:24" pos:end="53:28"><expr pos:start="53:24" pos:end="53:28"><name pos:start="53:24" pos:end="53:28">avctx</name></expr></argument>, <argument pos:start="53:31" pos:end="53:42"><expr pos:start="53:31" pos:end="53:42"><name pos:start="53:31" pos:end="53:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:45" pos:end="53:70"><expr pos:start="53:45" pos:end="53:70"><literal type="string" pos:start="53:45" pos:end="53:70">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="55:17" pos:end="55:26">return <expr pos:start="55:24" pos:end="55:25"><operator pos:start="55:24" pos:end="55:24">-</operator><literal type="number" pos:start="55:25" pos:end="55:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:29"><expr pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:21">saved_run</name> <operator pos:start="59:23" pos:end="59:24">+=</operator> <name pos:start="59:26" pos:end="59:28">run</name></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="61:10" pos:end="115:9">else if<condition pos:start="61:17" pos:end="61:28">(<expr pos:start="61:18" pos:end="61:27"><name pos:start="61:18" pos:end="61:22">cmode</name> <operator pos:start="61:24" pos:end="61:25">==</operator> <literal type="number" pos:start="61:27" pos:end="61:27">1</literal></expr>)</condition><block pos:start="61:29" pos:end="115:9">{<block_content pos:start="63:13" pos:end="113:13"><comment type="line" pos:start="61:30" pos:end="61:46">//horizontal mode</comment>

            <decl_stmt pos:start="63:13" pos:end="63:18"><decl pos:start="63:13" pos:end="63:17"><type pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">int</name></type> <name pos:start="63:17" pos:end="63:17">k</name></decl>;</decl_stmt>

            <for pos:start="65:13" pos:end="113:13">for<control pos:start="65:16" pos:end="65:34">(<init pos:start="65:17" pos:end="65:22"><expr pos:start="65:17" pos:end="65:21"><name pos:start="65:17" pos:end="65:17">k</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <literal type="number" pos:start="65:21" pos:end="65:21">0</literal></expr>;</init> <condition pos:start="65:24" pos:end="65:29"><expr pos:start="65:24" pos:end="65:28"><name pos:start="65:24" pos:end="65:24">k</name> <operator pos:start="65:26" pos:end="65:26">&lt;</operator> <literal type="number" pos:start="65:28" pos:end="65:28">2</literal></expr>;</condition> <incr pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><name pos:start="65:31" pos:end="65:31">k</name><operator pos:start="65:32" pos:end="65:33">++</operator></expr></incr>)</control><block pos:start="65:35" pos:end="113:13">{<block_content pos:start="67:17" pos:end="111:29">

                <expr_stmt pos:start="67:17" pos:end="67:24"><expr pos:start="67:17" pos:end="67:23"><name pos:start="67:17" pos:end="67:19">run</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr>;</expr_stmt>

                <for pos:start="69:17" pos:end="87:17">for<control pos:start="69:20" pos:end="69:23">(<init pos:start="69:21" pos:end="69:21">;</init><condition pos:start="69:22" pos:end="69:22">;</condition><incr/>)</control><block pos:start="69:24" pos:end="87:17">{<block_content pos:start="71:21" pos:end="85:30">

                    <expr_stmt pos:start="71:21" pos:end="71:66"><expr pos:start="71:21" pos:end="71:65"><name pos:start="71:21" pos:end="71:21">t</name> <operator pos:start="71:23" pos:end="71:23">=</operator> <call pos:start="71:25" pos:end="71:65"><name pos:start="71:25" pos:end="71:32">get_vlc2</name><argument_list pos:start="71:33" pos:end="71:65">(<argument pos:start="71:34" pos:end="71:35"><expr pos:start="71:34" pos:end="71:35"><name pos:start="71:34" pos:end="71:35">gb</name></expr></argument>, <argument pos:start="71:38" pos:end="71:58"><expr pos:start="71:38" pos:end="71:58"><name pos:start="71:38" pos:end="71:52"><name pos:start="71:38" pos:end="71:46">ccitt_vlc</name><index pos:start="71:47" pos:end="71:52">[<expr pos:start="71:48" pos:end="71:51"><name pos:start="71:48" pos:end="71:51">mode</name></expr>]</index></name><operator pos:start="71:53" pos:end="71:53">.</operator><name pos:start="71:54" pos:end="71:58">table</name></expr></argument>, <argument pos:start="71:61" pos:end="71:61"><expr pos:start="71:61" pos:end="71:61"><literal type="number" pos:start="71:61" pos:end="71:61">9</literal></expr></argument>, <argument pos:start="71:64" pos:end="71:64"><expr pos:start="71:64" pos:end="71:64"><literal type="number" pos:start="71:64" pos:end="71:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="73:21" pos:end="79:21"><if pos:start="73:21" pos:end="79:21">if<condition pos:start="73:23" pos:end="73:31">(<expr pos:start="73:24" pos:end="73:30"><name pos:start="73:24" pos:end="73:24">t</name> <operator pos:start="73:26" pos:end="73:27">==</operator> <operator pos:start="73:29" pos:end="73:29">-</operator><literal type="number" pos:start="73:30" pos:end="73:30">1</literal></expr>)</condition><block pos:start="73:32" pos:end="79:21">{<block_content pos:start="75:25" pos:end="77:34">

                        <expr_stmt pos:start="75:25" pos:end="75:72"><expr pos:start="75:25" pos:end="75:71"><call pos:start="75:25" pos:end="75:71"><name pos:start="75:25" pos:end="75:30">av_log</name><argument_list pos:start="75:31" pos:end="75:71">(<argument pos:start="75:32" pos:end="75:36"><expr pos:start="75:32" pos:end="75:36"><name pos:start="75:32" pos:end="75:36">avctx</name></expr></argument>, <argument pos:start="75:39" pos:end="75:50"><expr pos:start="75:39" pos:end="75:50"><name pos:start="75:39" pos:end="75:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:53" pos:end="75:70"><expr pos:start="75:53" pos:end="75:70"><literal type="string" pos:start="75:53" pos:end="75:70">"Incorrect code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="77:25" pos:end="77:34">return <expr pos:start="77:32" pos:end="77:33"><operator pos:start="77:32" pos:end="77:32">-</operator><literal type="number" pos:start="77:33" pos:end="77:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:29"><expr pos:start="81:21" pos:end="81:28"><name pos:start="81:21" pos:end="81:23">run</name> <operator pos:start="81:25" pos:end="81:26">+=</operator> <name pos:start="81:28" pos:end="81:28">t</name></expr>;</expr_stmt>

                    <if_stmt pos:start="83:21" pos:end="85:30"><if pos:start="83:21" pos:end="85:30">if<condition pos:start="83:23" pos:end="83:30">(<expr pos:start="83:24" pos:end="83:29"><name pos:start="83:24" pos:end="83:24">t</name> <operator pos:start="83:26" pos:end="83:26">&lt;</operator> <literal type="number" pos:start="83:28" pos:end="83:29">64</literal></expr>)</condition><block type="pseudo" pos:start="85:25" pos:end="85:30"><block_content pos:start="85:25" pos:end="85:30">

                        <break pos:start="85:25" pos:end="85:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="89:17" pos:end="89:42"><expr pos:start="89:17" pos:end="89:41"><operator pos:start="89:17" pos:end="89:17">*</operator><name pos:start="89:18" pos:end="89:21">runs</name><operator pos:start="89:22" pos:end="89:23">++</operator> <operator pos:start="89:25" pos:end="89:25">=</operator> <name pos:start="89:27" pos:end="89:29">run</name> <operator pos:start="89:31" pos:end="89:31">+</operator> <name pos:start="89:33" pos:end="89:41">saved_run</name></expr>;</expr_stmt>

                <if_stmt pos:start="91:17" pos:end="97:17"><if pos:start="91:17" pos:end="97:17">if<condition pos:start="91:19" pos:end="91:34">(<expr pos:start="91:20" pos:end="91:33"><name pos:start="91:20" pos:end="91:23">runs</name> <operator pos:start="91:25" pos:end="91:26">&gt;=</operator> <name pos:start="91:28" pos:end="91:33">runend</name></expr>)</condition><block pos:start="91:35" pos:end="97:17">{<block_content pos:start="93:21" pos:end="95:30">

                    <expr_stmt pos:start="93:21" pos:end="93:65"><expr pos:start="93:21" pos:end="93:64"><call pos:start="93:21" pos:end="93:64"><name pos:start="93:21" pos:end="93:26">av_log</name><argument_list pos:start="93:27" pos:end="93:64">(<argument pos:start="93:28" pos:end="93:32"><expr pos:start="93:28" pos:end="93:32"><name pos:start="93:28" pos:end="93:32">avctx</name></expr></argument>, <argument pos:start="93:35" pos:end="93:46"><expr pos:start="93:35" pos:end="93:46"><name pos:start="93:35" pos:end="93:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:49" pos:end="93:63"><expr pos:start="93:49" pos:end="93:63"><literal type="string" pos:start="93:49" pos:end="93:63">"Run overrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="95:21" pos:end="95:30">return <expr pos:start="95:28" pos:end="95:29"><operator pos:start="95:28" pos:end="95:28">-</operator><literal type="number" pos:start="95:29" pos:end="95:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:30"><expr pos:start="99:17" pos:end="99:29"><name pos:start="99:17" pos:end="99:25">saved_run</name> <operator pos:start="99:27" pos:end="99:27">=</operator> <literal type="number" pos:start="99:29" pos:end="99:29">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:28"><expr pos:start="101:17" pos:end="101:27"><name pos:start="101:17" pos:end="101:20">offs</name> <operator pos:start="101:22" pos:end="101:23">+=</operator> <name pos:start="101:25" pos:end="101:27">run</name></expr>;</expr_stmt>

                <if_stmt pos:start="103:17" pos:end="109:17"><if pos:start="103:17" pos:end="109:17">if<condition pos:start="103:19" pos:end="103:32">(<expr pos:start="103:20" pos:end="103:31"><name pos:start="103:20" pos:end="103:23">offs</name> <operator pos:start="103:25" pos:end="103:25">&gt;</operator> <name pos:start="103:27" pos:end="103:31">width</name></expr>)</condition><block pos:start="103:33" pos:end="109:17">{<block_content pos:start="105:21" pos:end="107:30">

                    <expr_stmt pos:start="105:21" pos:end="105:76"><expr pos:start="105:21" pos:end="105:75"><call pos:start="105:21" pos:end="105:75"><name pos:start="105:21" pos:end="105:26">av_log</name><argument_list pos:start="105:27" pos:end="105:75">(<argument pos:start="105:28" pos:end="105:32"><expr pos:start="105:28" pos:end="105:32"><name pos:start="105:28" pos:end="105:32">avctx</name></expr></argument>, <argument pos:start="105:35" pos:end="105:46"><expr pos:start="105:35" pos:end="105:46"><name pos:start="105:35" pos:end="105:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:49" pos:end="105:74"><expr pos:start="105:49" pos:end="105:74"><literal type="string" pos:start="105:49" pos:end="105:74">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="107:21" pos:end="107:30">return <expr pos:start="107:28" pos:end="107:29"><operator pos:start="107:28" pos:end="107:28">-</operator><literal type="number" pos:start="107:29" pos:end="107:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:29"><expr pos:start="111:17" pos:end="111:28"><name pos:start="111:17" pos:end="111:20">mode</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <operator pos:start="111:24" pos:end="111:24">!</operator><name pos:start="111:25" pos:end="111:28">mode</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if><if type="elseif" pos:start="115:10" pos:end="121:9">else if<condition pos:start="115:17" pos:end="115:43">(<expr pos:start="115:18" pos:end="115:42"><name pos:start="115:18" pos:end="115:22">cmode</name> <operator pos:start="115:24" pos:end="115:25">==</operator> <literal type="number" pos:start="115:27" pos:end="115:27">9</literal> <operator pos:start="115:29" pos:end="115:30">||</operator> <name pos:start="115:32" pos:end="115:36">cmode</name> <operator pos:start="115:38" pos:end="115:39">==</operator> <literal type="number" pos:start="115:41" pos:end="115:42">10</literal></expr>)</condition><block pos:start="115:44" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:22">

            <expr_stmt pos:start="117:13" pos:end="117:83"><expr pos:start="117:13" pos:end="117:82"><call pos:start="117:13" pos:end="117:82"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="117:82">(<argument pos:start="117:20" pos:end="117:24"><expr pos:start="117:20" pos:end="117:24"><name pos:start="117:20" pos:end="117:24">avctx</name></expr></argument>, <argument pos:start="117:27" pos:end="117:38"><expr pos:start="117:27" pos:end="117:38"><name pos:start="117:27" pos:end="117:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:41" pos:end="117:81"><expr pos:start="117:41" pos:end="117:81"><literal type="string" pos:start="117:41" pos:end="117:81">"Special modes are not supported (yet)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:22">return <expr pos:start="119:20" pos:end="119:21"><operator pos:start="119:20" pos:end="119:20">-</operator><literal type="number" pos:start="119:21" pos:end="119:21">1</literal></expr>;</return>

        </block_content>}</block></if><else pos:start="121:10" pos:end="157:9">else<block pos:start="121:14" pos:end="157:9">{<block_content pos:start="123:13" pos:end="155:25"><comment type="line" pos:start="121:15" pos:end="121:29">//vertical mode</comment>

            <expr_stmt pos:start="123:13" pos:end="123:47"><expr pos:start="123:13" pos:end="123:46"><name pos:start="123:13" pos:end="123:15">run</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <name pos:start="123:19" pos:end="123:25">run_off</name> <operator pos:start="123:27" pos:end="123:27">-</operator> <name pos:start="123:29" pos:end="123:32">offs</name> <operator pos:start="123:34" pos:end="123:34">+</operator> <operator pos:start="123:36" pos:end="123:36">(</operator><name pos:start="123:37" pos:end="123:41">cmode</name> <operator pos:start="123:43" pos:end="123:43">-</operator> <literal type="number" pos:start="123:45" pos:end="123:45">5</literal><operator pos:start="123:46" pos:end="123:46">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="131:34"><if pos:start="125:13" pos:end="127:34">if<condition pos:start="125:15" pos:end="125:26">(<expr pos:start="125:16" pos:end="125:25"><name pos:start="125:16" pos:end="125:20">cmode</name> <operator pos:start="125:22" pos:end="125:23">&gt;=</operator> <literal type="number" pos:start="125:25" pos:end="125:25">5</literal></expr>)</condition><block type="pseudo" pos:start="127:17" pos:end="127:34"><block_content pos:start="127:17" pos:end="127:34">

                <expr_stmt pos:start="127:17" pos:end="127:34"><expr pos:start="127:17" pos:end="127:33"><name pos:start="127:17" pos:end="127:23">run_off</name> <operator pos:start="127:25" pos:end="127:26">+=</operator> <operator pos:start="127:28" pos:end="127:28">*</operator><name pos:start="127:29" pos:end="127:31">ref</name><operator pos:start="127:32" pos:end="127:33">++</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="129:13" pos:end="131:34">else<block type="pseudo" pos:start="131:17" pos:end="131:34"><block_content pos:start="131:17" pos:end="131:34">

                <expr_stmt pos:start="131:17" pos:end="131:34"><expr pos:start="131:17" pos:end="131:33"><name pos:start="131:17" pos:end="131:23">run_off</name> <operator pos:start="131:25" pos:end="131:26">-=</operator> <operator pos:start="131:28" pos:end="131:28">*</operator><operator pos:start="131:29" pos:end="131:30">--</operator><name pos:start="131:31" pos:end="131:33">ref</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:24"><expr pos:start="133:13" pos:end="133:23"><name pos:start="133:13" pos:end="133:16">offs</name> <operator pos:start="133:18" pos:end="133:19">+=</operator> <name pos:start="133:21" pos:end="133:23">run</name></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="141:13"><if pos:start="135:13" pos:end="141:13">if<condition pos:start="135:15" pos:end="135:28">(<expr pos:start="135:16" pos:end="135:27"><name pos:start="135:16" pos:end="135:19">offs</name> <operator pos:start="135:21" pos:end="135:21">&gt;</operator> <name pos:start="135:23" pos:end="135:27">width</name></expr>)</condition><block pos:start="135:29" pos:end="141:13">{<block_content pos:start="137:17" pos:end="139:26">

                <expr_stmt pos:start="137:17" pos:end="137:72"><expr pos:start="137:17" pos:end="137:71"><call pos:start="137:17" pos:end="137:71"><name pos:start="137:17" pos:end="137:22">av_log</name><argument_list pos:start="137:23" pos:end="137:71">(<argument pos:start="137:24" pos:end="137:28"><expr pos:start="137:24" pos:end="137:28"><name pos:start="137:24" pos:end="137:28">avctx</name></expr></argument>, <argument pos:start="137:31" pos:end="137:42"><expr pos:start="137:31" pos:end="137:42"><name pos:start="137:31" pos:end="137:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="137:45" pos:end="137:70"><expr pos:start="137:45" pos:end="137:70"><literal type="string" pos:start="137:45" pos:end="137:70">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="139:17" pos:end="139:26">return <expr pos:start="139:24" pos:end="139:25"><operator pos:start="139:24" pos:end="139:24">-</operator><literal type="number" pos:start="139:25" pos:end="139:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:38"><expr pos:start="143:13" pos:end="143:37"><operator pos:start="143:13" pos:end="143:13">*</operator><name pos:start="143:14" pos:end="143:17">runs</name><operator pos:start="143:18" pos:end="143:19">++</operator> <operator pos:start="143:21" pos:end="143:21">=</operator> <name pos:start="143:23" pos:end="143:25">run</name> <operator pos:start="143:27" pos:end="143:27">+</operator> <name pos:start="143:29" pos:end="143:37">saved_run</name></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="151:13"><if pos:start="145:13" pos:end="151:13">if<condition pos:start="145:15" pos:end="145:30">(<expr pos:start="145:16" pos:end="145:29"><name pos:start="145:16" pos:end="145:19">runs</name> <operator pos:start="145:21" pos:end="145:22">&gt;=</operator> <name pos:start="145:24" pos:end="145:29">runend</name></expr>)</condition><block pos:start="145:31" pos:end="151:13">{<block_content pos:start="147:17" pos:end="149:26">

                <expr_stmt pos:start="147:17" pos:end="147:61"><expr pos:start="147:17" pos:end="147:60"><call pos:start="147:17" pos:end="147:60"><name pos:start="147:17" pos:end="147:22">av_log</name><argument_list pos:start="147:23" pos:end="147:60">(<argument pos:start="147:24" pos:end="147:28"><expr pos:start="147:24" pos:end="147:28"><name pos:start="147:24" pos:end="147:28">avctx</name></expr></argument>, <argument pos:start="147:31" pos:end="147:42"><expr pos:start="147:31" pos:end="147:42"><name pos:start="147:31" pos:end="147:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:45" pos:end="147:59"><expr pos:start="147:45" pos:end="147:59"><literal type="string" pos:start="147:45" pos:end="147:59">"Run overrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="149:17" pos:end="149:26">return <expr pos:start="149:24" pos:end="149:25"><operator pos:start="149:24" pos:end="149:24">-</operator><literal type="number" pos:start="149:25" pos:end="149:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:26"><expr pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:21">saved_run</name> <operator pos:start="153:23" pos:end="153:23">=</operator> <literal type="number" pos:start="153:25" pos:end="153:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:25"><expr pos:start="155:13" pos:end="155:24"><name pos:start="155:13" pos:end="155:16">mode</name> <operator pos:start="155:18" pos:end="155:18">=</operator> <operator pos:start="155:20" pos:end="155:20">!</operator><name pos:start="155:21" pos:end="155:24">mode</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="161:5" pos:end="161:24"><expr pos:start="161:5" pos:end="161:23"><operator pos:start="161:5" pos:end="161:5">*</operator><name pos:start="161:6" pos:end="161:9">runs</name><operator pos:start="161:10" pos:end="161:11">++</operator> <operator pos:start="161:13" pos:end="161:13">=</operator> <name pos:start="161:15" pos:end="161:23">saved_run</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:16"><expr pos:start="163:5" pos:end="163:15"><operator pos:start="163:5" pos:end="163:5">*</operator><name pos:start="163:6" pos:end="163:9">runs</name><operator pos:start="163:10" pos:end="163:11">++</operator> <operator pos:start="163:13" pos:end="163:13">=</operator> <literal type="number" pos:start="163:15" pos:end="163:15">0</literal></expr>;</expr_stmt>

    <return pos:start="165:5" pos:end="165:13">return <expr pos:start="165:12" pos:end="165:12"><literal type="number" pos:start="165:12" pos:end="165:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
