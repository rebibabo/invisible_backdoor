<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10130.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mirror_write_complete</name><parameter_list pos:start="1:34" pos:end="1:56">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:55"><decl pos:start="1:49" pos:end="1:55"><type pos:start="1:49" pos:end="1:55"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:55">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:60">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MirrorOp</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">op</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MirrorBlockJob</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:29">= <expr pos:start="7:25" pos:end="7:29"><name pos:start="7:25" pos:end="7:29"><name pos:start="7:25" pos:end="7:26">op</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:29">s</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:60"><expr pos:start="11:5" pos:end="11:59"><call pos:start="11:5" pos:end="11:59"><name pos:start="11:5" pos:end="11:23">aio_context_acquire</name><argument_list pos:start="11:24" pos:end="11:59">(<argument pos:start="11:25" pos:end="11:58"><expr pos:start="11:25" pos:end="11:58"><call pos:start="11:25" pos:end="11:58"><name pos:start="11:25" pos:end="11:43">blk_get_aio_context</name><argument_list pos:start="11:44" pos:end="11:58">(<argument pos:start="11:45" pos:end="11:57"><expr pos:start="11:45" pos:end="11:57"><name pos:start="11:45" pos:end="11:57"><name pos:start="11:45" pos:end="11:45">s</name><operator pos:start="11:46" pos:end="11:47">-&gt;</operator><name pos:start="11:48" pos:end="11:53">common</name><operator pos:start="11:54" pos:end="11:54">.</operator><name pos:start="11:55" pos:end="11:57">blk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="29:5"><if pos:start="13:5" pos:end="29:5">if <condition pos:start="13:8" pos:end="13:16">(<expr pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:11">ret</name> <operator pos:start="13:13" pos:end="13:13">&lt;</operator> <literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr>)</condition> <block pos:start="13:18" pos:end="29:5">{<block_content pos:start="15:9" pos:end="27:9">

        <decl_stmt pos:start="15:9" pos:end="15:32"><decl pos:start="15:9" pos:end="15:31"><type pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:24">BlockErrorAction</name></type> <name pos:start="15:26" pos:end="15:31">action</name></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:79"><expr pos:start="19:9" pos:end="19:78"><call pos:start="19:9" pos:end="19:78"><name pos:start="19:9" pos:end="19:29">bdrv_set_dirty_bitmap</name><argument_list pos:start="19:30" pos:end="19:78">(<argument pos:start="19:31" pos:end="19:45"><expr pos:start="19:31" pos:end="19:45"><name pos:start="19:31" pos:end="19:45"><name pos:start="19:31" pos:end="19:31">s</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:45">dirty_bitmap</name></name></expr></argument>, <argument pos:start="19:48" pos:end="19:61"><expr pos:start="19:48" pos:end="19:61"><name pos:start="19:48" pos:end="19:61"><name pos:start="19:48" pos:end="19:49">op</name><operator pos:start="19:50" pos:end="19:51">-&gt;</operator><name pos:start="19:52" pos:end="19:61">sector_num</name></name></expr></argument>, <argument pos:start="19:64" pos:end="19:77"><expr pos:start="19:64" pos:end="19:77"><name pos:start="19:64" pos:end="19:77"><name pos:start="19:64" pos:end="19:65">op</name><operator pos:start="19:66" pos:end="19:67">-&gt;</operator><name pos:start="19:68" pos:end="19:77">nb_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:53"><expr pos:start="21:9" pos:end="21:52"><name pos:start="21:9" pos:end="21:14">action</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:52"><name pos:start="21:18" pos:end="21:36">mirror_error_action</name><argument_list pos:start="21:37" pos:end="21:52">(<argument pos:start="21:38" pos:end="21:38"><expr pos:start="21:38" pos:end="21:38"><name pos:start="21:38" pos:end="21:38">s</name></expr></argument>, <argument pos:start="21:41" pos:end="21:45"><expr pos:start="21:41" pos:end="21:45"><name pos:start="21:41" pos:end="21:45">false</name></expr></argument>, <argument pos:start="21:48" pos:end="21:51"><expr pos:start="21:48" pos:end="21:51"><operator pos:start="21:48" pos:end="21:48">-</operator><name pos:start="21:49" pos:end="21:51">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:63">(<expr pos:start="23:13" pos:end="23:62"><name pos:start="23:13" pos:end="23:18">action</name> <operator pos:start="23:20" pos:end="23:21">==</operator> <name pos:start="23:23" pos:end="23:47">BLOCK_ERROR_ACTION_REPORT</name> <operator pos:start="23:49" pos:end="23:50">&amp;&amp;</operator> <name pos:start="23:52" pos:end="23:57"><name pos:start="23:52" pos:end="23:52">s</name><operator pos:start="23:53" pos:end="23:54">-&gt;</operator><name pos:start="23:55" pos:end="23:57">ret</name></name> <operator pos:start="23:59" pos:end="23:60">&gt;=</operator> <literal type="number" pos:start="23:62" pos:end="23:62">0</literal></expr>)</condition> <block pos:start="23:65" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:25">

            <expr_stmt pos:start="25:13" pos:end="25:25"><expr pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:18">ret</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:24">ret</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:35"><expr pos:start="31:5" pos:end="31:34"><call pos:start="31:5" pos:end="31:34"><name pos:start="31:5" pos:end="31:25">mirror_iteration_done</name><argument_list pos:start="31:26" pos:end="31:34">(<argument pos:start="31:27" pos:end="31:28"><expr pos:start="31:27" pos:end="31:28"><name pos:start="31:27" pos:end="31:28">op</name></expr></argument>, <argument pos:start="31:31" pos:end="31:33"><expr pos:start="31:31" pos:end="31:33"><name pos:start="31:31" pos:end="31:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:60"><expr pos:start="33:5" pos:end="33:59"><call pos:start="33:5" pos:end="33:59"><name pos:start="33:5" pos:end="33:23">aio_context_release</name><argument_list pos:start="33:24" pos:end="33:59">(<argument pos:start="33:25" pos:end="33:58"><expr pos:start="33:25" pos:end="33:58"><call pos:start="33:25" pos:end="33:58"><name pos:start="33:25" pos:end="33:43">blk_get_aio_context</name><argument_list pos:start="33:44" pos:end="33:58">(<argument pos:start="33:45" pos:end="33:57"><expr pos:start="33:45" pos:end="33:57"><name pos:start="33:45" pos:end="33:57"><name pos:start="33:45" pos:end="33:45">s</name><operator pos:start="33:46" pos:end="33:47">-&gt;</operator><name pos:start="33:48" pos:end="33:53">common</name><operator pos:start="33:54" pos:end="33:54">.</operator><name pos:start="33:55" pos:end="33:57">blk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
