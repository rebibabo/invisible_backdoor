<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20569.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">gen_load</name><parameter_list pos:start="1:21" pos:end="3:49">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:37"><name pos:start="1:22" pos:end="1:33">DisasContext</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:37">dc</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:47"><decl pos:start="1:40" pos:end="1:47"><type pos:start="1:40" pos:end="1:47"><name pos:start="1:40" pos:end="1:43">TCGv</name></type> <name pos:start="1:45" pos:end="1:47">dst</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:58"><decl pos:start="1:50" pos:end="1:58"><type pos:start="1:50" pos:end="1:58"><name pos:start="1:50" pos:end="1:53">TCGv</name></type> <name pos:start="1:55" pos:end="1:58">addr</name></decl></parameter>, 

		     <parameter pos:start="3:22" pos:end="3:38"><decl pos:start="3:22" pos:end="3:38"><type pos:start="3:22" pos:end="3:38"><name pos:start="3:22" pos:end="3:29">unsigned</name> <name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:38">size</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:48"><decl pos:start="3:41" pos:end="3:48"><type pos:start="3:41" pos:end="3:48"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:48">sign</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="57:1">{<block_content pos:start="7:9" pos:end="55:9">

	<decl_stmt pos:start="7:9" pos:end="7:47"><decl pos:start="7:9" pos:end="7:46"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:21">mem_index</name> <init pos:start="7:23" pos:end="7:46">= <expr pos:start="7:25" pos:end="7:46"><call pos:start="7:25" pos:end="7:46"><name pos:start="7:25" pos:end="7:37">cpu_mmu_index</name><argument_list pos:start="7:38" pos:end="7:46">(<argument pos:start="7:39" pos:end="7:45"><expr pos:start="7:39" pos:end="7:45"><name pos:start="7:39" pos:end="7:45"><name pos:start="7:39" pos:end="7:40">dc</name><operator pos:start="7:41" pos:end="7:42">-&gt;</operator><name pos:start="7:43" pos:end="7:45">env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<comment type="block" pos:start="11:9" pos:end="13:62">/* If we get a fault on a delayslot we must keep the jmp state in

	   the cpu-state to be able to re-execute the jmp.  */</comment>

	<if_stmt pos:start="15:9" pos:end="17:42"><if pos:start="15:9" pos:end="17:42">if <condition pos:start="15:12" pos:end="15:36">(<expr pos:start="15:13" pos:end="15:35"><name pos:start="15:13" pos:end="15:30"><name pos:start="15:13" pos:end="15:14">dc</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:30">delayed_branch</name></name> <operator pos:start="15:32" pos:end="15:33">==</operator> <literal type="number" pos:start="15:35" pos:end="15:35">1</literal></expr>)</condition><block type="pseudo" pos:start="17:17" pos:end="17:42"><block_content pos:start="17:17" pos:end="17:42">

		<expr_stmt pos:start="17:17" pos:end="17:42"><expr pos:start="17:17" pos:end="17:41"><call pos:start="17:17" pos:end="17:41"><name pos:start="17:17" pos:end="17:37">cris_store_direct_jmp</name><argument_list pos:start="17:38" pos:end="17:41">(<argument pos:start="17:39" pos:end="17:40"><expr pos:start="17:39" pos:end="17:40"><name pos:start="17:39" pos:end="17:40">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<if_stmt pos:start="21:9" pos:end="55:9"><if pos:start="21:9" pos:end="31:9">if <condition pos:start="21:12" pos:end="21:22">(<expr pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:16">size</name> <operator pos:start="21:18" pos:end="21:19">==</operator> <literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>)</condition> <block pos:start="21:24" pos:end="31:9">{<block_content pos:start="23:17" pos:end="29:64">

		<if_stmt pos:start="23:17" pos:end="29:64"><if pos:start="23:17" pos:end="25:64">if <condition pos:start="23:20" pos:end="23:25">(<expr pos:start="23:21" pos:end="23:24"><name pos:start="23:21" pos:end="23:24">sign</name></expr>)</condition><block type="pseudo" pos:start="25:25" pos:end="25:64"><block_content pos:start="25:25" pos:end="25:64">

			<expr_stmt pos:start="25:25" pos:end="25:64"><expr pos:start="25:25" pos:end="25:63"><call pos:start="25:25" pos:end="25:63"><name pos:start="25:25" pos:end="25:41">tcg_gen_qemu_ld8s</name><argument_list pos:start="25:42" pos:end="25:63">(<argument pos:start="25:43" pos:end="25:45"><expr pos:start="25:43" pos:end="25:45"><name pos:start="25:43" pos:end="25:45">dst</name></expr></argument>, <argument pos:start="25:48" pos:end="25:51"><expr pos:start="25:48" pos:end="25:51"><name pos:start="25:48" pos:end="25:51">addr</name></expr></argument>, <argument pos:start="25:54" pos:end="25:62"><expr pos:start="25:54" pos:end="25:62"><name pos:start="25:54" pos:end="25:62">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="27:17" pos:end="29:64">else<block type="pseudo" pos:start="29:25" pos:end="29:64"><block_content pos:start="29:25" pos:end="29:64">

			<expr_stmt pos:start="29:25" pos:end="29:64"><expr pos:start="29:25" pos:end="29:63"><call pos:start="29:25" pos:end="29:63"><name pos:start="29:25" pos:end="29:41">tcg_gen_qemu_ld8u</name><argument_list pos:start="29:42" pos:end="29:63">(<argument pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><name pos:start="29:43" pos:end="29:45">dst</name></expr></argument>, <argument pos:start="29:48" pos:end="29:51"><expr pos:start="29:48" pos:end="29:51"><name pos:start="29:48" pos:end="29:51">addr</name></expr></argument>, <argument pos:start="29:54" pos:end="29:62"><expr pos:start="29:54" pos:end="29:62"><name pos:start="29:54" pos:end="29:62">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	</block_content>}</block></if>

	<if type="elseif" pos:start="33:9" pos:end="43:9">else if <condition pos:start="33:17" pos:end="33:27">(<expr pos:start="33:18" pos:end="33:26"><name pos:start="33:18" pos:end="33:21">size</name> <operator pos:start="33:23" pos:end="33:24">==</operator> <literal type="number" pos:start="33:26" pos:end="33:26">2</literal></expr>)</condition> <block pos:start="33:29" pos:end="43:9">{<block_content pos:start="35:17" pos:end="41:65">

		<if_stmt pos:start="35:17" pos:end="41:65"><if pos:start="35:17" pos:end="37:65">if <condition pos:start="35:20" pos:end="35:25">(<expr pos:start="35:21" pos:end="35:24"><name pos:start="35:21" pos:end="35:24">sign</name></expr>)</condition><block type="pseudo" pos:start="37:25" pos:end="37:65"><block_content pos:start="37:25" pos:end="37:65">

			<expr_stmt pos:start="37:25" pos:end="37:65"><expr pos:start="37:25" pos:end="37:64"><call pos:start="37:25" pos:end="37:64"><name pos:start="37:25" pos:end="37:42">tcg_gen_qemu_ld16s</name><argument_list pos:start="37:43" pos:end="37:64">(<argument pos:start="37:44" pos:end="37:46"><expr pos:start="37:44" pos:end="37:46"><name pos:start="37:44" pos:end="37:46">dst</name></expr></argument>, <argument pos:start="37:49" pos:end="37:52"><expr pos:start="37:49" pos:end="37:52"><name pos:start="37:49" pos:end="37:52">addr</name></expr></argument>, <argument pos:start="37:55" pos:end="37:63"><expr pos:start="37:55" pos:end="37:63"><name pos:start="37:55" pos:end="37:63">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="39:17" pos:end="41:65">else<block type="pseudo" pos:start="41:25" pos:end="41:65"><block_content pos:start="41:25" pos:end="41:65">

			<expr_stmt pos:start="41:25" pos:end="41:65"><expr pos:start="41:25" pos:end="41:64"><call pos:start="41:25" pos:end="41:64"><name pos:start="41:25" pos:end="41:42">tcg_gen_qemu_ld16u</name><argument_list pos:start="41:43" pos:end="41:64">(<argument pos:start="41:44" pos:end="41:46"><expr pos:start="41:44" pos:end="41:46"><name pos:start="41:44" pos:end="41:46">dst</name></expr></argument>, <argument pos:start="41:49" pos:end="41:52"><expr pos:start="41:49" pos:end="41:52"><name pos:start="41:49" pos:end="41:52">addr</name></expr></argument>, <argument pos:start="41:55" pos:end="41:63"><expr pos:start="41:55" pos:end="41:63"><name pos:start="41:55" pos:end="41:63">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	</block_content>}</block></if>

	<if type="elseif" pos:start="45:9" pos:end="49:9">else if <condition pos:start="45:17" pos:end="45:27">(<expr pos:start="45:18" pos:end="45:26"><name pos:start="45:18" pos:end="45:21">size</name> <operator pos:start="45:23" pos:end="45:24">==</operator> <literal type="number" pos:start="45:26" pos:end="45:26">4</literal></expr>)</condition> <block pos:start="45:29" pos:end="49:9">{<block_content pos:start="47:17" pos:end="47:57">

		<expr_stmt pos:start="47:17" pos:end="47:57"><expr pos:start="47:17" pos:end="47:56"><call pos:start="47:17" pos:end="47:56"><name pos:start="47:17" pos:end="47:34">tcg_gen_qemu_ld32u</name><argument_list pos:start="47:35" pos:end="47:56">(<argument pos:start="47:36" pos:end="47:38"><expr pos:start="47:36" pos:end="47:38"><name pos:start="47:36" pos:end="47:38">dst</name></expr></argument>, <argument pos:start="47:41" pos:end="47:44"><expr pos:start="47:41" pos:end="47:44"><name pos:start="47:41" pos:end="47:44">addr</name></expr></argument>, <argument pos:start="47:47" pos:end="47:55"><expr pos:start="47:47" pos:end="47:55"><name pos:start="47:47" pos:end="47:55">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if>

	<if type="elseif" pos:start="51:9" pos:end="55:9">else if <condition pos:start="51:17" pos:end="51:27">(<expr pos:start="51:18" pos:end="51:26"><name pos:start="51:18" pos:end="51:21">size</name> <operator pos:start="51:23" pos:end="51:24">==</operator> <literal type="number" pos:start="51:26" pos:end="51:26">8</literal></expr>)</condition> <block pos:start="51:29" pos:end="55:9">{<block_content pos:start="53:17" pos:end="53:56">

		<expr_stmt pos:start="53:17" pos:end="53:56"><expr pos:start="53:17" pos:end="53:55"><call pos:start="53:17" pos:end="53:55"><name pos:start="53:17" pos:end="53:33">tcg_gen_qemu_ld64</name><argument_list pos:start="53:34" pos:end="53:55">(<argument pos:start="53:35" pos:end="53:37"><expr pos:start="53:35" pos:end="53:37"><name pos:start="53:35" pos:end="53:37">dst</name></expr></argument>, <argument pos:start="53:40" pos:end="53:43"><expr pos:start="53:40" pos:end="53:43"><name pos:start="53:40" pos:end="53:43">addr</name></expr></argument>, <argument pos:start="53:46" pos:end="53:54"><expr pos:start="53:46" pos:end="53:54"><name pos:start="53:46" pos:end="53:54">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
