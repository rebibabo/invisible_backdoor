<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26015.c" pos:tabs="8"><function pos:start="1:1" pos:end="493:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:12">const</specifier> <name pos:start="1:14" pos:end="1:22">mon_cmd_t</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:45">monitor_parse_command</name><parameter_list pos:start="1:46" pos:end="5:59">(<parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:53">Monitor</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">mon</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:65"><decl pos:start="3:47" pos:end="3:65"><type pos:start="3:47" pos:end="3:65"><specifier pos:start="3:47" pos:end="3:51">const</specifier> <name pos:start="3:53" pos:end="3:56">char</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:65">cmdline</name></decl></parameter>,

                                              <parameter pos:start="5:47" pos:end="5:58"><decl pos:start="5:47" pos:end="5:58"><type pos:start="5:47" pos:end="5:58"><name pos:start="5:47" pos:end="5:51">QDict</name> <modifier pos:start="5:53" pos:end="5:53">*</modifier></type><name pos:start="5:54" pos:end="5:58">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="493:1">{<block_content pos:start="9:5" pos:end="491:16">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">p</name></decl>, <decl pos:start="9:20" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:27">typestr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:21"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:19">mon_cmd_t</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:24">cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:21"><name pos:start="15:10" pos:end="15:16">cmdname</name><index pos:start="15:17" pos:end="15:21">[<expr pos:start="15:18" pos:end="15:20"><literal type="number" pos:start="15:18" pos:end="15:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:12">buf</name><index pos:start="17:13" pos:end="17:18">[<expr pos:start="17:14" pos:end="17:17"><literal type="number" pos:start="17:14" pos:end="17:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="24:0"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:13">key</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="23:1" pos:end="23:12">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:50"><call pos:start="25:5" pos:end="25:50"><name pos:start="25:5" pos:end="25:18">monitor_printf</name><argument_list pos:start="25:19" pos:end="25:50">(<argument pos:start="25:20" pos:end="25:22"><expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">mon</name></expr></argument>, <argument pos:start="25:25" pos:end="25:40"><expr pos:start="25:25" pos:end="25:40"><literal type="string" pos:start="25:25" pos:end="25:40">"command='%s'\n"</literal></expr></argument>, <argument pos:start="25:43" pos:end="25:49"><expr pos:start="25:43" pos:end="25:49"><name pos:start="25:43" pos:end="25:49">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="31:5" pos:end="31:34">/* extract the command name */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:60"><expr pos:start="33:5" pos:end="33:59"><name pos:start="33:5" pos:end="33:5">p</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <call pos:start="33:9" pos:end="33:59"><name pos:start="33:9" pos:end="33:24">get_command_name</name><argument_list pos:start="33:25" pos:end="33:59">(<argument pos:start="33:26" pos:end="33:32"><expr pos:start="33:26" pos:end="33:32"><name pos:start="33:26" pos:end="33:32">cmdline</name></expr></argument>, <argument pos:start="33:35" pos:end="33:41"><expr pos:start="33:35" pos:end="33:41"><name pos:start="33:35" pos:end="33:41">cmdname</name></expr></argument>, <argument pos:start="33:44" pos:end="33:58"><expr pos:start="33:44" pos:end="33:58"><sizeof pos:start="33:44" pos:end="33:58">sizeof<argument_list pos:start="33:50" pos:end="33:58">(<argument pos:start="33:51" pos:end="33:57"><expr pos:start="33:51" pos:end="33:57"><name pos:start="33:51" pos:end="33:57">cmdname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:20"><if pos:start="35:5" pos:end="37:20">if <condition pos:start="35:8" pos:end="35:11">(<expr pos:start="35:9" pos:end="35:10"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:10">p</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:20"><block_content pos:start="37:9" pos:end="37:20">

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:26">/* find the command */</comment>

    <for pos:start="43:5" pos:end="49:5">for<control pos:start="43:8" pos:end="43:49">(<init pos:start="43:9" pos:end="43:23"><expr pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:11">cmd</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:22">mon_cmds</name></expr>;</init> <condition pos:start="43:25" pos:end="43:42"><expr pos:start="43:25" pos:end="43:41"><name pos:start="43:25" pos:end="43:33"><name pos:start="43:25" pos:end="43:27">cmd</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:33">name</name></name> <operator pos:start="43:35" pos:end="43:36">!=</operator> <name pos:start="43:38" pos:end="43:41">NULL</name></expr>;</condition> <incr pos:start="43:44" pos:end="43:48"><expr pos:start="43:44" pos:end="43:48"><name pos:start="43:44" pos:end="43:46">cmd</name><operator pos:start="43:47" pos:end="43:48">++</operator></expr></incr>)</control> <block pos:start="43:51" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:18">

        <if_stmt pos:start="45:9" pos:end="47:18"><if pos:start="45:9" pos:end="47:18">if <condition pos:start="45:12" pos:end="45:44">(<expr pos:start="45:13" pos:end="45:43"><call pos:start="45:13" pos:end="45:43"><name pos:start="45:13" pos:end="45:23">compare_cmd</name><argument_list pos:start="45:24" pos:end="45:43">(<argument pos:start="45:25" pos:end="45:31"><expr pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:31">cmdname</name></expr></argument>, <argument pos:start="45:34" pos:end="45:42"><expr pos:start="45:34" pos:end="45:42"><name pos:start="45:34" pos:end="45:42"><name pos:start="45:34" pos:end="45:36">cmd</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:42">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:18"><block_content pos:start="47:13" pos:end="47:18">

            <break pos:start="47:13" pos:end="47:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:26">(<expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:11">cmd</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:17">name</name></name> <operator pos:start="53:19" pos:end="53:20">==</operator> <name pos:start="53:22" pos:end="53:25">NULL</name></expr>)</condition> <block pos:start="53:28" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:20">

        <expr_stmt pos:start="55:9" pos:end="55:64"><expr pos:start="55:9" pos:end="55:63"><call pos:start="55:9" pos:end="55:63"><name pos:start="55:9" pos:end="55:22">monitor_printf</name><argument_list pos:start="55:23" pos:end="55:63">(<argument pos:start="55:24" pos:end="55:26"><expr pos:start="55:24" pos:end="55:26"><name pos:start="55:24" pos:end="55:26">mon</name></expr></argument>, <argument pos:start="55:29" pos:end="55:53"><expr pos:start="55:29" pos:end="55:53"><literal type="string" pos:start="55:29" pos:end="55:53">"unknown command: '%s'\n"</literal></expr></argument>, <argument pos:start="55:56" pos:end="55:62"><expr pos:start="55:56" pos:end="55:62"><name pos:start="55:56" pos:end="55:62">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:20">return <expr pos:start="57:16" pos:end="57:19"><name pos:start="57:16" pos:end="57:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:30">/* parse the parameters */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:29"><expr pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:11">typestr</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:28"><name pos:start="65:15" pos:end="65:17">cmd</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:28">args_type</name></name></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="463:5">for<control pos:start="67:8" pos:end="67:11">(<init pos:start="67:9" pos:end="67:9">;</init><condition pos:start="67:10" pos:end="67:10">;</condition><incr/>)</control> <block pos:start="67:13" pos:end="463:5">{<block_content pos:start="69:9" pos:end="461:19">

        <expr_stmt pos:start="69:9" pos:end="69:46"><expr pos:start="69:9" pos:end="69:45"><name pos:start="69:9" pos:end="69:15">typestr</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="69:45"><name pos:start="69:19" pos:end="69:30">key_get_info</name><argument_list pos:start="69:31" pos:end="69:45">(<argument pos:start="69:32" pos:end="69:38"><expr pos:start="69:32" pos:end="69:38"><name pos:start="69:32" pos:end="69:38">typestr</name></expr></argument>, <argument pos:start="69:41" pos:end="69:44"><expr pos:start="69:41" pos:end="69:44"><operator pos:start="69:41" pos:end="69:41">&amp;</operator><name pos:start="69:42" pos:end="69:44">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="73:18"><if pos:start="71:9" pos:end="73:18">if <condition pos:start="71:12" pos:end="71:21">(<expr pos:start="71:13" pos:end="71:20"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:20">typestr</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:18"><block_content pos:start="73:13" pos:end="73:18">

            <break pos:start="73:13" pos:end="73:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:21"><expr pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:9">c</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <operator pos:start="75:13" pos:end="75:13">*</operator><name pos:start="75:14" pos:end="75:20">typestr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:18"><expr pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:15">typestr</name><operator pos:start="77:16" pos:end="77:17">++</operator></expr>;</expr_stmt>

        <switch pos:start="79:9" pos:end="457:9">switch<condition pos:start="79:15" pos:end="79:17">(<expr pos:start="79:16" pos:end="79:16"><name pos:start="79:16" pos:end="79:16">c</name></expr>)</condition> <block pos:start="79:19" pos:end="457:9">{<block_content pos:start="81:9" pos:end="455:22">

        <case pos:start="81:9" pos:end="81:17">case <expr pos:start="81:14" pos:end="81:16"><literal type="char" pos:start="81:14" pos:end="81:16">'F'</literal></expr>:</case>

        <case pos:start="83:9" pos:end="83:17">case <expr pos:start="83:14" pos:end="83:16"><literal type="char" pos:start="83:14" pos:end="83:16">'B'</literal></expr>:</case>

        <case pos:start="85:9" pos:end="85:17">case <expr pos:start="85:14" pos:end="85:16"><literal type="char" pos:start="85:14" pos:end="85:16">'s'</literal></expr>:</case>

            <block pos:start="87:13" pos:end="147:13">{<block_content pos:start="89:17" pos:end="145:61">

                <decl_stmt pos:start="89:17" pos:end="89:24"><decl pos:start="89:17" pos:end="89:23"><type pos:start="89:17" pos:end="89:19"><name pos:start="89:17" pos:end="89:19">int</name></type> <name pos:start="89:21" pos:end="89:23">ret</name></decl>;</decl_stmt>



                <while pos:start="93:17" pos:end="95:24">while <condition pos:start="93:23" pos:end="93:40">(<expr pos:start="93:24" pos:end="93:39"><call pos:start="93:24" pos:end="93:39"><name pos:start="93:24" pos:end="93:35">qemu_isspace</name><argument_list pos:start="93:36" pos:end="93:39">(<argument pos:start="93:37" pos:end="93:38"><expr pos:start="93:37" pos:end="93:38"><operator pos:start="93:37" pos:end="93:37">*</operator><name pos:start="93:38" pos:end="93:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="95:21" pos:end="95:24"><block_content pos:start="95:21" pos:end="95:24">

                    <expr_stmt pos:start="95:21" pos:end="95:24"><expr pos:start="95:21" pos:end="95:23"><name pos:start="95:21" pos:end="95:21">p</name><operator pos:start="95:22" pos:end="95:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="97:17" pos:end="109:17"><if pos:start="97:17" pos:end="109:17">if <condition pos:start="97:20" pos:end="97:36">(<expr pos:start="97:21" pos:end="97:35"><operator pos:start="97:21" pos:end="97:21">*</operator><name pos:start="97:22" pos:end="97:28">typestr</name> <operator pos:start="97:30" pos:end="97:31">==</operator> <literal type="char" pos:start="97:33" pos:end="97:35">'?'</literal></expr>)</condition> <block pos:start="97:38" pos:end="109:17">{<block_content pos:start="99:21" pos:end="107:21">

                    <expr_stmt pos:start="99:21" pos:end="99:30"><expr pos:start="99:21" pos:end="99:29"><name pos:start="99:21" pos:end="99:27">typestr</name><operator pos:start="99:28" pos:end="99:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="101:21" pos:end="107:21"><if pos:start="101:21" pos:end="107:21">if <condition pos:start="101:24" pos:end="101:35">(<expr pos:start="101:25" pos:end="101:34"><operator pos:start="101:25" pos:end="101:25">*</operator><name pos:start="101:26" pos:end="101:26">p</name> <operator pos:start="101:28" pos:end="101:29">==</operator> <literal type="char" pos:start="101:31" pos:end="101:34">'\0'</literal></expr>)</condition> <block pos:start="101:37" pos:end="107:21">{<block_content pos:start="105:25" pos:end="105:30">

                        <comment type="block" pos:start="103:25" pos:end="103:63">/* no optional string: NULL argument */</comment>

                        <break pos:start="105:25" pos:end="105:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:52"><expr pos:start="111:17" pos:end="111:51"><name pos:start="111:17" pos:end="111:19">ret</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <call pos:start="111:23" pos:end="111:51"><name pos:start="111:23" pos:end="111:29">get_str</name><argument_list pos:start="111:30" pos:end="111:51">(<argument pos:start="111:31" pos:end="111:33"><expr pos:start="111:31" pos:end="111:33"><name pos:start="111:31" pos:end="111:33">buf</name></expr></argument>, <argument pos:start="111:36" pos:end="111:46"><expr pos:start="111:36" pos:end="111:46"><sizeof pos:start="111:36" pos:end="111:46">sizeof<argument_list pos:start="111:42" pos:end="111:46">(<argument pos:start="111:43" pos:end="111:45"><expr pos:start="111:43" pos:end="111:45"><name pos:start="111:43" pos:end="111:45">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="111:49" pos:end="111:50"><expr pos:start="111:49" pos:end="111:50"><operator pos:start="111:49" pos:end="111:49">&amp;</operator><name pos:start="111:50" pos:end="111:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="113:17" pos:end="143:17"><if pos:start="113:17" pos:end="143:17">if <condition pos:start="113:20" pos:end="113:28">(<expr pos:start="113:21" pos:end="113:27"><name pos:start="113:21" pos:end="113:23">ret</name> <operator pos:start="113:25" pos:end="113:25">&lt;</operator> <literal type="number" pos:start="113:27" pos:end="113:27">0</literal></expr>)</condition> <block pos:start="113:30" pos:end="143:17">{<block_content pos:start="115:21" pos:end="141:30">

                    <switch pos:start="115:21" pos:end="139:21">switch<condition pos:start="115:27" pos:end="115:29">(<expr pos:start="115:28" pos:end="115:28"><name pos:start="115:28" pos:end="115:28">c</name></expr>)</condition> <block pos:start="115:31" pos:end="139:21">{<block_content pos:start="117:21" pos:end="137:30">

                    <case pos:start="117:21" pos:end="117:29">case <expr pos:start="117:26" pos:end="117:28"><literal type="char" pos:start="117:26" pos:end="117:28">'F'</literal></expr>:</case>

                        <expr_stmt pos:start="119:25" pos:end="121:48"><expr pos:start="119:25" pos:end="121:47"><call pos:start="119:25" pos:end="121:47"><name pos:start="119:25" pos:end="119:38">monitor_printf</name><argument_list pos:start="119:39" pos:end="121:47">(<argument pos:start="119:40" pos:end="119:42"><expr pos:start="119:40" pos:end="119:42"><name pos:start="119:40" pos:end="119:42">mon</name></expr></argument>, <argument pos:start="119:45" pos:end="119:69"><expr pos:start="119:45" pos:end="119:69"><literal type="string" pos:start="119:45" pos:end="119:69">"%s: filename expected\n"</literal></expr></argument>,

                                       <argument pos:start="121:40" pos:end="121:46"><expr pos:start="121:40" pos:end="121:46"><name pos:start="121:40" pos:end="121:46">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="123:25" pos:end="123:30">break;</break>

                    <case pos:start="125:21" pos:end="125:29">case <expr pos:start="125:26" pos:end="125:28"><literal type="char" pos:start="125:26" pos:end="125:28">'B'</literal></expr>:</case>

                        <expr_stmt pos:start="127:25" pos:end="129:48"><expr pos:start="127:25" pos:end="129:47"><call pos:start="127:25" pos:end="129:47"><name pos:start="127:25" pos:end="127:38">monitor_printf</name><argument_list pos:start="127:39" pos:end="129:47">(<argument pos:start="127:40" pos:end="127:42"><expr pos:start="127:40" pos:end="127:42"><name pos:start="127:40" pos:end="127:42">mon</name></expr></argument>, <argument pos:start="127:45" pos:end="127:78"><expr pos:start="127:45" pos:end="127:78"><literal type="string" pos:start="127:45" pos:end="127:78">"%s: block device name expected\n"</literal></expr></argument>,

                                       <argument pos:start="129:40" pos:end="129:46"><expr pos:start="129:40" pos:end="129:46"><name pos:start="129:40" pos:end="129:46">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="131:25" pos:end="131:30">break;</break>

                    <default pos:start="133:21" pos:end="133:28">default:</default>

                        <expr_stmt pos:start="135:25" pos:end="135:78"><expr pos:start="135:25" pos:end="135:77"><call pos:start="135:25" pos:end="135:77"><name pos:start="135:25" pos:end="135:38">monitor_printf</name><argument_list pos:start="135:39" pos:end="135:77">(<argument pos:start="135:40" pos:end="135:42"><expr pos:start="135:40" pos:end="135:42"><name pos:start="135:40" pos:end="135:42">mon</name></expr></argument>, <argument pos:start="135:45" pos:end="135:67"><expr pos:start="135:45" pos:end="135:67"><literal type="string" pos:start="135:45" pos:end="135:67">"%s: string expected\n"</literal></expr></argument>, <argument pos:start="135:70" pos:end="135:76"><expr pos:start="135:70" pos:end="135:76"><name pos:start="135:70" pos:end="135:76">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="137:25" pos:end="137:30">break;</break>

                    </block_content>}</block></switch>

                    <goto pos:start="141:21" pos:end="141:30">goto <name pos:start="141:26" pos:end="141:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:61"><expr pos:start="145:17" pos:end="145:60"><call pos:start="145:17" pos:end="145:60"><name pos:start="145:17" pos:end="145:25">qdict_put</name><argument_list pos:start="145:26" pos:end="145:60">(<argument pos:start="145:27" pos:end="145:31"><expr pos:start="145:27" pos:end="145:31"><name pos:start="145:27" pos:end="145:31">qdict</name></expr></argument>, <argument pos:start="145:34" pos:end="145:36"><expr pos:start="145:34" pos:end="145:36"><name pos:start="145:34" pos:end="145:36">key</name></expr></argument>, <argument pos:start="145:39" pos:end="145:59"><expr pos:start="145:39" pos:end="145:59"><call pos:start="145:39" pos:end="145:59"><name pos:start="145:39" pos:end="145:54">qstring_from_str</name><argument_list pos:start="145:55" pos:end="145:59">(<argument pos:start="145:56" pos:end="145:58"><expr pos:start="145:56" pos:end="145:58"><name pos:start="145:56" pos:end="145:58">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:17">case <expr pos:start="151:14" pos:end="151:16"><literal type="char" pos:start="151:14" pos:end="151:16">'/'</literal></expr>:</case>

            <block pos:start="153:13" pos:end="305:13">{<block_content pos:start="155:17" pos:end="303:62">

                <decl_stmt pos:start="155:17" pos:end="155:40"><decl pos:start="155:17" pos:end="155:25"><type pos:start="155:17" pos:end="155:19"><name pos:start="155:17" pos:end="155:19">int</name></type> <name pos:start="155:21" pos:end="155:25">count</name></decl>, <decl pos:start="155:28" pos:end="155:33"><type ref="prev" pos:start="155:17" pos:end="155:19"/><name pos:start="155:28" pos:end="155:33">format</name></decl>, <decl pos:start="155:36" pos:end="155:39"><type ref="prev" pos:start="155:17" pos:end="155:19"/><name pos:start="155:36" pos:end="155:39">size</name></decl>;</decl_stmt>



                <while pos:start="159:17" pos:end="161:24">while <condition pos:start="159:23" pos:end="159:40">(<expr pos:start="159:24" pos:end="159:39"><call pos:start="159:24" pos:end="159:39"><name pos:start="159:24" pos:end="159:35">qemu_isspace</name><argument_list pos:start="159:36" pos:end="159:39">(<argument pos:start="159:37" pos:end="159:38"><expr pos:start="159:37" pos:end="159:38"><operator pos:start="159:37" pos:end="159:37">*</operator><name pos:start="159:38" pos:end="159:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="161:21" pos:end="161:24"><block_content pos:start="161:21" pos:end="161:24">

                    <expr_stmt pos:start="161:21" pos:end="161:24"><expr pos:start="161:21" pos:end="161:23"><name pos:start="161:21" pos:end="161:21">p</name><operator pos:start="161:22" pos:end="161:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="163:17" pos:end="297:17"><if pos:start="163:17" pos:end="281:17">if <condition pos:start="163:20" pos:end="163:30">(<expr pos:start="163:21" pos:end="163:29"><operator pos:start="163:21" pos:end="163:21">*</operator><name pos:start="163:22" pos:end="163:22">p</name> <operator pos:start="163:24" pos:end="163:25">==</operator> <literal type="char" pos:start="163:27" pos:end="163:29">'/'</literal></expr>)</condition> <block pos:start="163:32" pos:end="281:17">{<block_content pos:start="167:21" pos:end="279:48">

                    <comment type="block" pos:start="165:21" pos:end="165:38">/* format found */</comment>

                    <expr_stmt pos:start="167:21" pos:end="167:24"><expr pos:start="167:21" pos:end="167:23"><name pos:start="167:21" pos:end="167:21">p</name><operator pos:start="167:22" pos:end="167:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:30"><expr pos:start="169:21" pos:end="169:29"><name pos:start="169:21" pos:end="169:25">count</name> <operator pos:start="169:27" pos:end="169:27">=</operator> <literal type="number" pos:start="169:29" pos:end="169:29">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="171:21" pos:end="183:21"><if pos:start="171:21" pos:end="183:21">if <condition pos:start="171:24" pos:end="171:41">(<expr pos:start="171:25" pos:end="171:40"><call pos:start="171:25" pos:end="171:40"><name pos:start="171:25" pos:end="171:36">qemu_isdigit</name><argument_list pos:start="171:37" pos:end="171:40">(<argument pos:start="171:38" pos:end="171:39"><expr pos:start="171:38" pos:end="171:39"><operator pos:start="171:38" pos:end="171:38">*</operator><name pos:start="171:39" pos:end="171:39">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:43" pos:end="183:21">{<block_content pos:start="173:25" pos:end="181:25">

                        <expr_stmt pos:start="173:25" pos:end="173:34"><expr pos:start="173:25" pos:end="173:33"><name pos:start="173:25" pos:end="173:29">count</name> <operator pos:start="173:31" pos:end="173:31">=</operator> <literal type="number" pos:start="173:33" pos:end="173:33">0</literal></expr>;</expr_stmt>

                        <while pos:start="175:25" pos:end="181:25">while <condition pos:start="175:31" pos:end="175:48">(<expr pos:start="175:32" pos:end="175:47"><call pos:start="175:32" pos:end="175:47"><name pos:start="175:32" pos:end="175:43">qemu_isdigit</name><argument_list pos:start="175:44" pos:end="175:47">(<argument pos:start="175:45" pos:end="175:46"><expr pos:start="175:45" pos:end="175:46"><operator pos:start="175:45" pos:end="175:45">*</operator><name pos:start="175:46" pos:end="175:46">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="175:50" pos:end="181:25">{<block_content pos:start="177:29" pos:end="179:32">

                            <expr_stmt pos:start="177:29" pos:end="177:60"><expr pos:start="177:29" pos:end="177:59"><name pos:start="177:29" pos:end="177:33">count</name> <operator pos:start="177:35" pos:end="177:35">=</operator> <name pos:start="177:37" pos:end="177:41">count</name> <operator pos:start="177:43" pos:end="177:43">*</operator> <literal type="number" pos:start="177:45" pos:end="177:48">10</literal> <operator pos:start="177:48" pos:end="177:48">+</operator> <operator pos:start="177:50" pos:end="177:50">(</operator><operator pos:start="177:51" pos:end="177:51">*</operator><name pos:start="177:52" pos:end="177:52">p</name> <operator pos:start="177:54" pos:end="177:54">-</operator> <literal type="char" pos:start="177:56" pos:end="177:58">'0'</literal><operator pos:start="177:59" pos:end="177:59">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="179:29" pos:end="179:32"><expr pos:start="179:29" pos:end="179:31"><name pos:start="179:29" pos:end="179:29">p</name><operator pos:start="179:30" pos:end="179:31">++</operator></expr>;</expr_stmt>

                        </block_content>}</block></while>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:30"><expr pos:start="185:21" pos:end="185:29"><name pos:start="185:21" pos:end="185:24">size</name> <operator pos:start="185:26" pos:end="185:26">=</operator> <operator pos:start="185:28" pos:end="185:28">-</operator><literal type="number" pos:start="185:29" pos:end="185:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="187:21" pos:end="187:32"><expr pos:start="187:21" pos:end="187:31"><name pos:start="187:21" pos:end="187:26">format</name> <operator pos:start="187:28" pos:end="187:28">=</operator> <operator pos:start="187:30" pos:end="187:30">-</operator><literal type="number" pos:start="187:31" pos:end="187:31">1</literal></expr>;</expr_stmt>

                    <for pos:start="189:21" pos:end="249:21">for<control pos:start="189:24" pos:end="189:27">(<init pos:start="189:25" pos:end="189:25">;</init><condition pos:start="189:26" pos:end="189:26">;</condition><incr/>)</control> <block pos:start="189:29" pos:end="249:21">{<block_content pos:start="191:25" pos:end="247:25">

                        <switch pos:start="191:25" pos:end="247:25">switch<condition pos:start="191:31" pos:end="191:34">(<expr pos:start="191:32" pos:end="191:33"><operator pos:start="191:32" pos:end="191:32">*</operator><name pos:start="191:33" pos:end="191:33">p</name></expr>)</condition> <block pos:start="191:36" pos:end="247:25">{<block_content pos:start="193:25" pos:end="245:38">

                        <case pos:start="193:25" pos:end="193:33">case <expr pos:start="193:30" pos:end="193:32"><literal type="char" pos:start="193:30" pos:end="193:32">'o'</literal></expr>:</case>

                        <case pos:start="195:25" pos:end="195:33">case <expr pos:start="195:30" pos:end="195:32"><literal type="char" pos:start="195:30" pos:end="195:32">'d'</literal></expr>:</case>

                        <case pos:start="197:25" pos:end="197:33">case <expr pos:start="197:30" pos:end="197:32"><literal type="char" pos:start="197:30" pos:end="197:32">'u'</literal></expr>:</case>

                        <case pos:start="199:25" pos:end="199:33">case <expr pos:start="199:30" pos:end="199:32"><literal type="char" pos:start="199:30" pos:end="199:32">'x'</literal></expr>:</case>

                        <case pos:start="201:25" pos:end="201:33">case <expr pos:start="201:30" pos:end="201:32"><literal type="char" pos:start="201:30" pos:end="201:32">'i'</literal></expr>:</case>

                        <case pos:start="203:25" pos:end="203:33">case <expr pos:start="203:30" pos:end="203:32"><literal type="char" pos:start="203:30" pos:end="203:32">'c'</literal></expr>:</case>

                            <expr_stmt pos:start="205:29" pos:end="205:42"><expr pos:start="205:29" pos:end="205:41"><name pos:start="205:29" pos:end="205:34">format</name> <operator pos:start="205:36" pos:end="205:36">=</operator> <operator pos:start="205:38" pos:end="205:38">*</operator><name pos:start="205:39" pos:end="205:39">p</name><operator pos:start="205:40" pos:end="205:41">++</operator></expr>;</expr_stmt>

                            <break pos:start="207:29" pos:end="207:34">break;</break>

                        <case pos:start="209:25" pos:end="209:33">case <expr pos:start="209:30" pos:end="209:32"><literal type="char" pos:start="209:30" pos:end="209:32">'b'</literal></expr>:</case>

                            <expr_stmt pos:start="211:29" pos:end="211:37"><expr pos:start="211:29" pos:end="211:36"><name pos:start="211:29" pos:end="211:32">size</name> <operator pos:start="211:34" pos:end="211:34">=</operator> <literal type="number" pos:start="211:36" pos:end="211:36">1</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="213:29" pos:end="213:32"><expr pos:start="213:29" pos:end="213:31"><name pos:start="213:29" pos:end="213:29">p</name><operator pos:start="213:30" pos:end="213:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="215:29" pos:end="215:34">break;</break>

                        <case pos:start="217:25" pos:end="217:33">case <expr pos:start="217:30" pos:end="217:32"><literal type="char" pos:start="217:30" pos:end="217:32">'h'</literal></expr>:</case>

                            <expr_stmt pos:start="219:29" pos:end="219:37"><expr pos:start="219:29" pos:end="219:36"><name pos:start="219:29" pos:end="219:32">size</name> <operator pos:start="219:34" pos:end="219:34">=</operator> <literal type="number" pos:start="219:36" pos:end="219:36">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="221:29" pos:end="221:32"><expr pos:start="221:29" pos:end="221:31"><name pos:start="221:29" pos:end="221:29">p</name><operator pos:start="221:30" pos:end="221:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="223:29" pos:end="223:34">break;</break>

                        <case pos:start="225:25" pos:end="225:33">case <expr pos:start="225:30" pos:end="225:32"><literal type="char" pos:start="225:30" pos:end="225:32">'w'</literal></expr>:</case>

                            <expr_stmt pos:start="227:29" pos:end="227:37"><expr pos:start="227:29" pos:end="227:36"><name pos:start="227:29" pos:end="227:32">size</name> <operator pos:start="227:34" pos:end="227:34">=</operator> <literal type="number" pos:start="227:36" pos:end="227:36">4</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="229:29" pos:end="229:32"><expr pos:start="229:29" pos:end="229:31"><name pos:start="229:29" pos:end="229:29">p</name><operator pos:start="229:30" pos:end="229:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="231:29" pos:end="231:34">break;</break>

                        <case pos:start="233:25" pos:end="233:33">case <expr pos:start="233:30" pos:end="233:32"><literal type="char" pos:start="233:30" pos:end="233:32">'g'</literal></expr>:</case>

                        <case pos:start="235:25" pos:end="235:33">case <expr pos:start="235:30" pos:end="235:32"><literal type="char" pos:start="235:30" pos:end="235:32">'L'</literal></expr>:</case>

                            <expr_stmt pos:start="237:29" pos:end="237:37"><expr pos:start="237:29" pos:end="237:36"><name pos:start="237:29" pos:end="237:32">size</name> <operator pos:start="237:34" pos:end="237:34">=</operator> <literal type="number" pos:start="237:36" pos:end="237:36">8</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="239:29" pos:end="239:32"><expr pos:start="239:29" pos:end="239:31"><name pos:start="239:29" pos:end="239:29">p</name><operator pos:start="239:30" pos:end="239:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="241:29" pos:end="241:34">break;</break>

                        <default pos:start="243:25" pos:end="243:32">default:</default>

                            <goto pos:start="245:29" pos:end="245:38">goto <name pos:start="245:34" pos:end="245:37">next</name>;</goto>

                        </block_content>}</block></switch>

                    </block_content>}</block></for>

                <label pos:start="251:17" pos:end="251:21"><name pos:start="251:17" pos:end="251:20">next</name>:</label>

                    <if_stmt pos:start="253:21" pos:end="261:21"><if pos:start="253:21" pos:end="261:21">if <condition pos:start="253:24" pos:end="253:56">(<expr pos:start="253:25" pos:end="253:55"><operator pos:start="253:25" pos:end="253:25">*</operator><name pos:start="253:26" pos:end="253:26">p</name> <operator pos:start="253:28" pos:end="253:29">!=</operator> <literal type="char" pos:start="253:31" pos:end="253:34">'\0'</literal> <operator pos:start="253:36" pos:end="253:37">&amp;&amp;</operator> <operator pos:start="253:39" pos:end="253:39">!</operator><call pos:start="253:40" pos:end="253:55"><name pos:start="253:40" pos:end="253:51">qemu_isspace</name><argument_list pos:start="253:52" pos:end="253:55">(<argument pos:start="253:53" pos:end="253:54"><expr pos:start="253:53" pos:end="253:54"><operator pos:start="253:53" pos:end="253:53">*</operator><name pos:start="253:54" pos:end="253:54">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="253:58" pos:end="261:21">{<block_content pos:start="255:25" pos:end="259:34">

                        <expr_stmt pos:start="255:25" pos:end="257:43"><expr pos:start="255:25" pos:end="257:42"><call pos:start="255:25" pos:end="257:42"><name pos:start="255:25" pos:end="255:38">monitor_printf</name><argument_list pos:start="255:39" pos:end="257:42">(<argument pos:start="255:40" pos:end="255:42"><expr pos:start="255:40" pos:end="255:42"><name pos:start="255:40" pos:end="255:42">mon</name></expr></argument>, <argument pos:start="255:45" pos:end="255:76"><expr pos:start="255:45" pos:end="255:76"><literal type="string" pos:start="255:45" pos:end="255:76">"invalid char in format: '%c'\n"</literal></expr></argument>,

                                       <argument pos:start="257:40" pos:end="257:41"><expr pos:start="257:40" pos:end="257:41"><operator pos:start="257:40" pos:end="257:40">*</operator><name pos:start="257:41" pos:end="257:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="259:25" pos:end="259:34">goto <name pos:start="259:30" pos:end="259:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="263:21" pos:end="265:52"><if pos:start="263:21" pos:end="265:52">if <condition pos:start="263:24" pos:end="263:35">(<expr pos:start="263:25" pos:end="263:34"><name pos:start="263:25" pos:end="263:30">format</name> <operator pos:start="263:32" pos:end="263:32">&lt;</operator> <literal type="number" pos:start="263:34" pos:end="263:34">0</literal></expr>)</condition><block type="pseudo" pos:start="265:25" pos:end="265:52"><block_content pos:start="265:25" pos:end="265:52">

                        <expr_stmt pos:start="265:25" pos:end="265:52"><expr pos:start="265:25" pos:end="265:51"><name pos:start="265:25" pos:end="265:30">format</name> <operator pos:start="265:32" pos:end="265:32">=</operator> <name pos:start="265:34" pos:end="265:51">default_fmt_format</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="267:21" pos:end="277:21"><if pos:start="267:21" pos:end="277:21">if <condition pos:start="267:24" pos:end="267:38">(<expr pos:start="267:25" pos:end="267:37"><name pos:start="267:25" pos:end="267:30">format</name> <operator pos:start="267:32" pos:end="267:33">!=</operator> <literal type="char" pos:start="267:35" pos:end="267:37">'i'</literal></expr>)</condition> <block pos:start="267:40" pos:end="277:21">{<block_content pos:start="271:25" pos:end="275:48">

                        <comment type="block" pos:start="269:25" pos:end="269:77">/* for 'i', not specifying a size gives -1 as size */</comment>

                        <if_stmt pos:start="271:25" pos:end="273:52"><if pos:start="271:25" pos:end="273:52">if <condition pos:start="271:28" pos:end="271:37">(<expr pos:start="271:29" pos:end="271:36"><name pos:start="271:29" pos:end="271:32">size</name> <operator pos:start="271:34" pos:end="271:34">&lt;</operator> <literal type="number" pos:start="271:36" pos:end="271:36">0</literal></expr>)</condition><block type="pseudo" pos:start="273:29" pos:end="273:52"><block_content pos:start="273:29" pos:end="273:52">

                            <expr_stmt pos:start="273:29" pos:end="273:52"><expr pos:start="273:29" pos:end="273:51"><name pos:start="273:29" pos:end="273:32">size</name> <operator pos:start="273:34" pos:end="273:34">=</operator> <name pos:start="273:36" pos:end="273:51">default_fmt_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="275:25" pos:end="275:48"><expr pos:start="275:25" pos:end="275:47"><name pos:start="275:25" pos:end="275:40">default_fmt_size</name> <operator pos:start="275:42" pos:end="275:42">=</operator> <name pos:start="275:44" pos:end="275:47">size</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="279:21" pos:end="279:48"><expr pos:start="279:21" pos:end="279:47"><name pos:start="279:21" pos:end="279:38">default_fmt_format</name> <operator pos:start="279:40" pos:end="279:40">=</operator> <name pos:start="279:42" pos:end="279:47">format</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="281:19" pos:end="297:17">else <block pos:start="281:24" pos:end="297:17">{<block_content pos:start="283:21" pos:end="295:21">

                    <expr_stmt pos:start="283:21" pos:end="283:30"><expr pos:start="283:21" pos:end="283:29"><name pos:start="283:21" pos:end="283:25">count</name> <operator pos:start="283:27" pos:end="283:27">=</operator> <literal type="number" pos:start="283:29" pos:end="283:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="285:21" pos:end="285:48"><expr pos:start="285:21" pos:end="285:47"><name pos:start="285:21" pos:end="285:26">format</name> <operator pos:start="285:28" pos:end="285:28">=</operator> <name pos:start="285:30" pos:end="285:47">default_fmt_format</name></expr>;</expr_stmt>

                    <if_stmt pos:start="287:21" pos:end="295:21"><if pos:start="287:21" pos:end="291:21">if <condition pos:start="287:24" pos:end="287:38">(<expr pos:start="287:25" pos:end="287:37"><name pos:start="287:25" pos:end="287:30">format</name> <operator pos:start="287:32" pos:end="287:33">!=</operator> <literal type="char" pos:start="287:35" pos:end="287:37">'i'</literal></expr>)</condition> <block pos:start="287:40" pos:end="291:21">{<block_content pos:start="289:25" pos:end="289:48">

                        <expr_stmt pos:start="289:25" pos:end="289:48"><expr pos:start="289:25" pos:end="289:47"><name pos:start="289:25" pos:end="289:28">size</name> <operator pos:start="289:30" pos:end="289:30">=</operator> <name pos:start="289:32" pos:end="289:47">default_fmt_size</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="291:23" pos:end="295:21">else <block pos:start="291:28" pos:end="295:21">{<block_content pos:start="293:25" pos:end="293:34">

                        <expr_stmt pos:start="293:25" pos:end="293:34"><expr pos:start="293:25" pos:end="293:33"><name pos:start="293:25" pos:end="293:28">size</name> <operator pos:start="293:30" pos:end="293:30">=</operator> <operator pos:start="293:32" pos:end="293:32">-</operator><literal type="number" pos:start="293:33" pos:end="293:33">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:64"><expr pos:start="299:17" pos:end="299:63"><call pos:start="299:17" pos:end="299:63"><name pos:start="299:17" pos:end="299:25">qdict_put</name><argument_list pos:start="299:26" pos:end="299:63">(<argument pos:start="299:27" pos:end="299:31"><expr pos:start="299:27" pos:end="299:31"><name pos:start="299:27" pos:end="299:31">qdict</name></expr></argument>, <argument pos:start="299:34" pos:end="299:40"><expr pos:start="299:34" pos:end="299:40"><literal type="string" pos:start="299:34" pos:end="299:40">"count"</literal></expr></argument>, <argument pos:start="299:43" pos:end="299:62"><expr pos:start="299:43" pos:end="299:62"><call pos:start="299:43" pos:end="299:62"><name pos:start="299:43" pos:end="299:55">qint_from_int</name><argument_list pos:start="299:56" pos:end="299:62">(<argument pos:start="299:57" pos:end="299:61"><expr pos:start="299:57" pos:end="299:61"><name pos:start="299:57" pos:end="299:61">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:66"><expr pos:start="301:17" pos:end="301:65"><call pos:start="301:17" pos:end="301:65"><name pos:start="301:17" pos:end="301:25">qdict_put</name><argument_list pos:start="301:26" pos:end="301:65">(<argument pos:start="301:27" pos:end="301:31"><expr pos:start="301:27" pos:end="301:31"><name pos:start="301:27" pos:end="301:31">qdict</name></expr></argument>, <argument pos:start="301:34" pos:end="301:41"><expr pos:start="301:34" pos:end="301:41"><literal type="string" pos:start="301:34" pos:end="301:41">"format"</literal></expr></argument>, <argument pos:start="301:44" pos:end="301:64"><expr pos:start="301:44" pos:end="301:64"><call pos:start="301:44" pos:end="301:64"><name pos:start="301:44" pos:end="301:56">qint_from_int</name><argument_list pos:start="301:57" pos:end="301:64">(<argument pos:start="301:58" pos:end="301:63"><expr pos:start="301:58" pos:end="301:63"><name pos:start="301:58" pos:end="301:63">format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="303:62"><expr pos:start="303:17" pos:end="303:61"><call pos:start="303:17" pos:end="303:61"><name pos:start="303:17" pos:end="303:25">qdict_put</name><argument_list pos:start="303:26" pos:end="303:61">(<argument pos:start="303:27" pos:end="303:31"><expr pos:start="303:27" pos:end="303:31"><name pos:start="303:27" pos:end="303:31">qdict</name></expr></argument>, <argument pos:start="303:34" pos:end="303:39"><expr pos:start="303:34" pos:end="303:39"><literal type="string" pos:start="303:34" pos:end="303:39">"size"</literal></expr></argument>, <argument pos:start="303:42" pos:end="303:60"><expr pos:start="303:42" pos:end="303:60"><call pos:start="303:42" pos:end="303:60"><name pos:start="303:42" pos:end="303:54">qint_from_int</name><argument_list pos:start="303:55" pos:end="303:60">(<argument pos:start="303:56" pos:end="303:59"><expr pos:start="303:56" pos:end="303:59"><name pos:start="303:56" pos:end="303:59">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="307:13" pos:end="307:18">break;</break>

        <case pos:start="309:9" pos:end="309:17">case <expr pos:start="309:14" pos:end="309:16"><literal type="char" pos:start="309:14" pos:end="309:16">'i'</literal></expr>:</case>

        <case pos:start="311:9" pos:end="311:17">case <expr pos:start="311:14" pos:end="311:16"><literal type="char" pos:start="311:14" pos:end="311:16">'l'</literal></expr>:</case>

            <block pos:start="313:13" pos:end="377:13">{<block_content pos:start="315:17" pos:end="375:58">

                <decl_stmt pos:start="315:17" pos:end="315:28"><decl pos:start="315:17" pos:end="315:27"><type pos:start="315:17" pos:end="315:23"><name pos:start="315:17" pos:end="315:23">int64_t</name></type> <name pos:start="315:25" pos:end="315:27">val</name></decl>;</decl_stmt>



                <while pos:start="319:17" pos:end="321:24">while <condition pos:start="319:23" pos:end="319:40">(<expr pos:start="319:24" pos:end="319:39"><call pos:start="319:24" pos:end="319:39"><name pos:start="319:24" pos:end="319:35">qemu_isspace</name><argument_list pos:start="319:36" pos:end="319:39">(<argument pos:start="319:37" pos:end="319:38"><expr pos:start="319:37" pos:end="319:38"><operator pos:start="319:37" pos:end="319:37">*</operator><name pos:start="319:38" pos:end="319:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="321:21" pos:end="321:24"><block_content pos:start="321:21" pos:end="321:24">

                    <expr_stmt pos:start="321:21" pos:end="321:24"><expr pos:start="321:21" pos:end="321:23"><name pos:start="321:21" pos:end="321:21">p</name><operator pos:start="321:22" pos:end="321:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="323:17" pos:end="357:17"><if pos:start="323:17" pos:end="357:17">if <condition pos:start="323:20" pos:end="323:55">(<expr pos:start="323:21" pos:end="323:54"><operator pos:start="323:21" pos:end="323:21">*</operator><name pos:start="323:22" pos:end="323:28">typestr</name> <operator pos:start="323:30" pos:end="323:31">==</operator> <literal type="char" pos:start="323:33" pos:end="323:35">'?'</literal> <operator pos:start="323:37" pos:end="323:38">||</operator> <operator pos:start="323:40" pos:end="323:40">*</operator><name pos:start="323:41" pos:end="323:47">typestr</name> <operator pos:start="323:49" pos:end="323:50">==</operator> <literal type="char" pos:start="323:52" pos:end="323:54">'.'</literal></expr>)</condition> <block pos:start="323:57" pos:end="357:17">{<block_content pos:start="325:21" pos:end="355:30">

                    <if_stmt pos:start="325:21" pos:end="353:21"><if pos:start="325:21" pos:end="335:21">if <condition pos:start="325:24" pos:end="325:40">(<expr pos:start="325:25" pos:end="325:39"><operator pos:start="325:25" pos:end="325:25">*</operator><name pos:start="325:26" pos:end="325:32">typestr</name> <operator pos:start="325:34" pos:end="325:35">==</operator> <literal type="char" pos:start="325:37" pos:end="325:39">'?'</literal></expr>)</condition> <block pos:start="325:42" pos:end="335:21">{<block_content pos:start="327:25" pos:end="333:25">

                        <if_stmt pos:start="327:25" pos:end="333:25"><if pos:start="327:25" pos:end="333:25">if <condition pos:start="327:28" pos:end="327:39">(<expr pos:start="327:29" pos:end="327:38"><operator pos:start="327:29" pos:end="327:29">*</operator><name pos:start="327:30" pos:end="327:30">p</name> <operator pos:start="327:32" pos:end="327:33">==</operator> <literal type="char" pos:start="327:35" pos:end="327:38">'\0'</literal></expr>)</condition> <block pos:start="327:41" pos:end="333:25">{<block_content pos:start="329:29" pos:end="331:34">

                            <expr_stmt pos:start="329:29" pos:end="329:38"><expr pos:start="329:29" pos:end="329:37"><name pos:start="329:29" pos:end="329:35">typestr</name><operator pos:start="329:36" pos:end="329:37">++</operator></expr>;</expr_stmt>

                            <break pos:start="331:29" pos:end="331:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="335:23" pos:end="353:21">else <block pos:start="335:28" pos:end="353:21">{<block_content pos:start="337:25" pos:end="351:25">

                        <if_stmt pos:start="337:25" pos:end="351:25"><if pos:start="337:25" pos:end="345:25">if <condition pos:start="337:28" pos:end="337:38">(<expr pos:start="337:29" pos:end="337:37"><operator pos:start="337:29" pos:end="337:29">*</operator><name pos:start="337:30" pos:end="337:30">p</name> <operator pos:start="337:32" pos:end="337:33">==</operator> <literal type="char" pos:start="337:35" pos:end="337:37">'.'</literal></expr>)</condition> <block pos:start="337:40" pos:end="345:25">{<block_content pos:start="339:29" pos:end="343:36">

                            <expr_stmt pos:start="339:29" pos:end="339:32"><expr pos:start="339:29" pos:end="339:31"><name pos:start="339:29" pos:end="339:29">p</name><operator pos:start="339:30" pos:end="339:31">++</operator></expr>;</expr_stmt>

                            <while pos:start="341:29" pos:end="343:36">while <condition pos:start="341:35" pos:end="341:52">(<expr pos:start="341:36" pos:end="341:51"><call pos:start="341:36" pos:end="341:51"><name pos:start="341:36" pos:end="341:47">qemu_isspace</name><argument_list pos:start="341:48" pos:end="341:51">(<argument pos:start="341:49" pos:end="341:50"><expr pos:start="341:49" pos:end="341:50"><operator pos:start="341:49" pos:end="341:49">*</operator><name pos:start="341:50" pos:end="341:50">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="343:33" pos:end="343:36"><block_content pos:start="343:33" pos:end="343:36">

                                <expr_stmt pos:start="343:33" pos:end="343:36"><expr pos:start="343:33" pos:end="343:35"><name pos:start="343:33" pos:end="343:33">p</name><operator pos:start="343:34" pos:end="343:35">++</operator></expr>;</expr_stmt></block_content></block></while>

                        </block_content>}</block></if> <else pos:start="345:27" pos:end="351:25">else <block pos:start="345:32" pos:end="351:25">{<block_content pos:start="347:29" pos:end="349:34">

                            <expr_stmt pos:start="347:29" pos:end="347:38"><expr pos:start="347:29" pos:end="347:37"><name pos:start="347:29" pos:end="347:35">typestr</name><operator pos:start="347:36" pos:end="347:37">++</operator></expr>;</expr_stmt>

                            <break pos:start="349:29" pos:end="349:34">break;</break>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="355:21" pos:end="355:30"><expr pos:start="355:21" pos:end="355:29"><name pos:start="355:21" pos:end="355:27">typestr</name><operator pos:start="355:28" pos:end="355:29">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="359:17" pos:end="361:30"><if pos:start="359:17" pos:end="361:30">if <condition pos:start="359:20" pos:end="359:44">(<expr pos:start="359:21" pos:end="359:43"><call pos:start="359:21" pos:end="359:43"><name pos:start="359:21" pos:end="359:28">get_expr</name><argument_list pos:start="359:29" pos:end="359:43">(<argument pos:start="359:30" pos:end="359:32"><expr pos:start="359:30" pos:end="359:32"><name pos:start="359:30" pos:end="359:32">mon</name></expr></argument>, <argument pos:start="359:35" pos:end="359:38"><expr pos:start="359:35" pos:end="359:38"><operator pos:start="359:35" pos:end="359:35">&amp;</operator><name pos:start="359:36" pos:end="359:38">val</name></expr></argument>, <argument pos:start="359:41" pos:end="359:42"><expr pos:start="359:41" pos:end="359:42"><operator pos:start="359:41" pos:end="359:41">&amp;</operator><name pos:start="359:42" pos:end="359:42">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="361:21" pos:end="361:30"><block_content pos:start="361:21" pos:end="361:30">

                    <goto pos:start="361:21" pos:end="361:30">goto <name pos:start="361:26" pos:end="361:29">fail</name>;</goto></block_content></block></if></if_stmt>

                <comment type="block" pos:start="363:17" pos:end="363:57">/* Check if 'i' is greater than 32-bit */</comment>

                <if_stmt pos:start="365:17" pos:end="373:17"><if pos:start="365:17" pos:end="373:17">if <condition pos:start="365:20" pos:end="365:61">(<expr pos:start="365:21" pos:end="365:60"><operator pos:start="365:21" pos:end="365:21">(</operator><name pos:start="365:22" pos:end="365:22">c</name> <operator pos:start="365:24" pos:end="365:25">==</operator> <literal type="char" pos:start="365:27" pos:end="365:29">'i'</literal><operator pos:start="365:30" pos:end="365:30">)</operator> <operator pos:start="365:32" pos:end="365:33">&amp;&amp;</operator> <operator pos:start="365:35" pos:end="365:35">(</operator><operator pos:start="365:36" pos:end="365:36">(</operator><name pos:start="365:37" pos:end="365:39">val</name> <operator pos:start="365:41" pos:end="365:42">&gt;&gt;</operator> <literal type="number" pos:start="365:44" pos:end="365:45">32</literal><operator pos:start="365:46" pos:end="365:46">)</operator> <operator pos:start="365:48" pos:end="365:48">&amp;</operator> <literal type="number" pos:start="365:50" pos:end="365:59">0xffffffff</literal><operator pos:start="365:60" pos:end="365:60">)</operator></expr>)</condition> <block pos:start="365:63" pos:end="373:17">{<block_content pos:start="367:21" pos:end="371:30">

                    <expr_stmt pos:start="367:21" pos:end="367:72"><expr pos:start="367:21" pos:end="367:71"><call pos:start="367:21" pos:end="367:71"><name pos:start="367:21" pos:end="367:34">monitor_printf</name><argument_list pos:start="367:35" pos:end="367:71">(<argument pos:start="367:36" pos:end="367:38"><expr pos:start="367:36" pos:end="367:38"><name pos:start="367:36" pos:end="367:38">mon</name></expr></argument>, <argument pos:start="367:41" pos:end="367:61"><expr pos:start="367:41" pos:end="367:61"><literal type="string" pos:start="367:41" pos:end="367:61">"\'%s\' has failed: "</literal></expr></argument>, <argument pos:start="367:64" pos:end="367:70"><expr pos:start="367:64" pos:end="367:70"><name pos:start="367:64" pos:end="367:70">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="369:74"><expr pos:start="369:21" pos:end="369:73"><call pos:start="369:21" pos:end="369:73"><name pos:start="369:21" pos:end="369:34">monitor_printf</name><argument_list pos:start="369:35" pos:end="369:73">(<argument pos:start="369:36" pos:end="369:38"><expr pos:start="369:36" pos:end="369:38"><name pos:start="369:36" pos:end="369:38">mon</name></expr></argument>, <argument pos:start="369:41" pos:end="369:72"><expr pos:start="369:41" pos:end="369:72"><literal type="string" pos:start="369:41" pos:end="369:72">"integer is for 32-bit values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="371:21" pos:end="371:30">goto <name pos:start="371:26" pos:end="371:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:58"><expr pos:start="375:17" pos:end="375:57"><call pos:start="375:17" pos:end="375:57"><name pos:start="375:17" pos:end="375:25">qdict_put</name><argument_list pos:start="375:26" pos:end="375:57">(<argument pos:start="375:27" pos:end="375:31"><expr pos:start="375:27" pos:end="375:31"><name pos:start="375:27" pos:end="375:31">qdict</name></expr></argument>, <argument pos:start="375:34" pos:end="375:36"><expr pos:start="375:34" pos:end="375:36"><name pos:start="375:34" pos:end="375:36">key</name></expr></argument>, <argument pos:start="375:39" pos:end="375:56"><expr pos:start="375:39" pos:end="375:56"><call pos:start="375:39" pos:end="375:56"><name pos:start="375:39" pos:end="375:51">qint_from_int</name><argument_list pos:start="375:52" pos:end="375:56">(<argument pos:start="375:53" pos:end="375:55"><expr pos:start="375:53" pos:end="375:55"><name pos:start="375:53" pos:end="375:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="379:13" pos:end="379:18">break;</break>

        <case pos:start="381:9" pos:end="381:17">case <expr pos:start="381:14" pos:end="381:16"><literal type="char" pos:start="381:14" pos:end="381:16">'-'</literal></expr>:</case>

            <block pos:start="383:13" pos:end="445:13">{<block_content pos:start="385:17" pos:end="443:65">

                <decl_stmt pos:start="385:17" pos:end="385:36"><decl pos:start="385:17" pos:end="385:35"><type pos:start="385:17" pos:end="385:28"><specifier pos:start="385:17" pos:end="385:21">const</specifier> <name pos:start="385:23" pos:end="385:26">char</name> <modifier pos:start="385:28" pos:end="385:28">*</modifier></type><name pos:start="385:29" pos:end="385:31">tmp</name> <init pos:start="385:33" pos:end="385:35">= <expr pos:start="385:35" pos:end="385:35"><name pos:start="385:35" pos:end="385:35">p</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="387:17" pos:end="387:45"><decl pos:start="387:17" pos:end="387:30"><type pos:start="387:17" pos:end="387:19"><name pos:start="387:17" pos:end="387:19">int</name></type> <name pos:start="387:21" pos:end="387:30">has_option</name></decl>, <decl pos:start="387:33" pos:end="387:44"><type ref="prev" pos:start="387:17" pos:end="387:19"/><name pos:start="387:33" pos:end="387:40">skip_key</name> <init pos:start="387:42" pos:end="387:44">= <expr pos:start="387:44" pos:end="387:44"><literal type="number" pos:start="387:44" pos:end="387:44">0</literal></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="389:17" pos:end="389:28">/* option */</comment>



                <expr_stmt pos:start="393:17" pos:end="393:31"><expr pos:start="393:17" pos:end="393:30"><name pos:start="393:17" pos:end="393:17">c</name> <operator pos:start="393:19" pos:end="393:19">=</operator> <operator pos:start="393:21" pos:end="393:21">*</operator><name pos:start="393:22" pos:end="393:28">typestr</name><operator pos:start="393:29" pos:end="393:30">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="395:17" pos:end="397:34"><if pos:start="395:17" pos:end="397:34">if <condition pos:start="395:20" pos:end="395:30">(<expr pos:start="395:21" pos:end="395:29"><name pos:start="395:21" pos:end="395:21">c</name> <operator pos:start="395:23" pos:end="395:24">==</operator> <literal type="char" pos:start="395:26" pos:end="395:29">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="397:21" pos:end="397:34"><block_content pos:start="397:21" pos:end="397:34">

                    <goto pos:start="397:21" pos:end="397:34">goto <name pos:start="397:26" pos:end="397:33">bad_type</name>;</goto></block_content></block></if></if_stmt>

                <while pos:start="399:17" pos:end="401:24">while <condition pos:start="399:23" pos:end="399:40">(<expr pos:start="399:24" pos:end="399:39"><call pos:start="399:24" pos:end="399:39"><name pos:start="399:24" pos:end="399:35">qemu_isspace</name><argument_list pos:start="399:36" pos:end="399:39">(<argument pos:start="399:37" pos:end="399:38"><expr pos:start="399:37" pos:end="399:38"><operator pos:start="399:37" pos:end="399:37">*</operator><name pos:start="399:38" pos:end="399:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="401:21" pos:end="401:24"><block_content pos:start="401:21" pos:end="401:24">

                    <expr_stmt pos:start="401:21" pos:end="401:24"><expr pos:start="401:21" pos:end="401:23"><name pos:start="401:21" pos:end="401:21">p</name><operator pos:start="401:22" pos:end="401:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="403:17" pos:end="403:31"><expr pos:start="403:17" pos:end="403:30"><name pos:start="403:17" pos:end="403:26">has_option</name> <operator pos:start="403:28" pos:end="403:28">=</operator> <literal type="number" pos:start="403:30" pos:end="403:30">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="405:17" pos:end="441:17"><if pos:start="405:17" pos:end="441:17">if <condition pos:start="405:20" pos:end="405:30">(<expr pos:start="405:21" pos:end="405:29"><operator pos:start="405:21" pos:end="405:21">*</operator><name pos:start="405:22" pos:end="405:22">p</name> <operator pos:start="405:24" pos:end="405:25">==</operator> <literal type="char" pos:start="405:27" pos:end="405:29">'-'</literal></expr>)</condition> <block pos:start="405:32" pos:end="441:17">{<block_content pos:start="407:21" pos:end="439:21">

                    <expr_stmt pos:start="407:21" pos:end="407:24"><expr pos:start="407:21" pos:end="407:23"><name pos:start="407:21" pos:end="407:21">p</name><operator pos:start="407:22" pos:end="407:23">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="409:21" pos:end="427:21"><if pos:start="409:21" pos:end="427:21">if<condition pos:start="409:23" pos:end="409:31">(<expr pos:start="409:24" pos:end="409:30"><name pos:start="409:24" pos:end="409:24">c</name> <operator pos:start="409:26" pos:end="409:27">!=</operator> <operator pos:start="409:29" pos:end="409:29">*</operator><name pos:start="409:30" pos:end="409:30">p</name></expr>)</condition> <block pos:start="409:33" pos:end="427:21">{<block_content pos:start="411:25" pos:end="425:25">

                        <if_stmt pos:start="411:25" pos:end="425:25"><if pos:start="411:25" pos:end="421:25">if<condition pos:start="411:27" pos:end="411:56">(<expr pos:start="411:28" pos:end="411:55"><operator pos:start="411:28" pos:end="411:28">!</operator><call pos:start="411:29" pos:end="411:55"><name pos:start="411:29" pos:end="411:43">is_valid_option</name><argument_list pos:start="411:44" pos:end="411:55">(<argument pos:start="411:45" pos:end="411:45"><expr pos:start="411:45" pos:end="411:45"><name pos:start="411:45" pos:end="411:45">p</name></expr></argument>, <argument pos:start="411:48" pos:end="411:54"><expr pos:start="411:48" pos:end="411:54"><name pos:start="411:48" pos:end="411:54">typestr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="411:58" pos:end="421:25">{<block_content pos:start="415:29" pos:end="419:38">

                  

                            <expr_stmt pos:start="415:29" pos:end="417:56"><expr pos:start="415:29" pos:end="417:55"><call pos:start="415:29" pos:end="417:55"><name pos:start="415:29" pos:end="415:42">monitor_printf</name><argument_list pos:start="415:43" pos:end="417:55">(<argument pos:start="415:44" pos:end="415:46"><expr pos:start="415:44" pos:end="415:46"><name pos:start="415:44" pos:end="415:46">mon</name></expr></argument>, <argument pos:start="415:49" pos:end="415:78"><expr pos:start="415:49" pos:end="415:78"><literal type="string" pos:start="415:49" pos:end="415:78">"%s: unsupported option -%c\n"</literal></expr></argument>,

                                           <argument pos:start="417:44" pos:end="417:50"><expr pos:start="417:44" pos:end="417:50"><name pos:start="417:44" pos:end="417:50">cmdname</name></expr></argument>, <argument pos:start="417:53" pos:end="417:54"><expr pos:start="417:53" pos:end="417:54"><operator pos:start="417:53" pos:end="417:53">*</operator><name pos:start="417:54" pos:end="417:54">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="419:29" pos:end="419:38">goto <name pos:start="419:34" pos:end="419:37">fail</name>;</goto>

                        </block_content>}</block></if> <else pos:start="421:27" pos:end="425:25">else <block pos:start="421:32" pos:end="425:25">{<block_content pos:start="423:29" pos:end="423:41">

                            <expr_stmt pos:start="423:29" pos:end="423:41"><expr pos:start="423:29" pos:end="423:40"><name pos:start="423:29" pos:end="423:36">skip_key</name> <operator pos:start="423:38" pos:end="423:38">=</operator> <literal type="number" pos:start="423:40" pos:end="423:40">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="429:21" pos:end="439:21"><if pos:start="429:21" pos:end="433:21">if<condition pos:start="429:23" pos:end="429:32">(<expr pos:start="429:24" pos:end="429:31"><name pos:start="429:24" pos:end="429:31">skip_key</name></expr>)</condition> <block pos:start="429:34" pos:end="433:21">{<block_content pos:start="431:25" pos:end="431:32">

                        <expr_stmt pos:start="431:25" pos:end="431:32"><expr pos:start="431:25" pos:end="431:31"><name pos:start="431:25" pos:end="431:25">p</name> <operator pos:start="431:27" pos:end="431:27">=</operator> <name pos:start="431:29" pos:end="431:31">tmp</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="433:23" pos:end="439:21">else <block pos:start="433:28" pos:end="439:21">{<block_content pos:start="435:25" pos:end="437:39">

                        <expr_stmt pos:start="435:25" pos:end="435:28"><expr pos:start="435:25" pos:end="435:27"><name pos:start="435:25" pos:end="435:25">p</name><operator pos:start="435:26" pos:end="435:27">++</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="437:25" pos:end="437:39"><expr pos:start="437:25" pos:end="437:38"><name pos:start="437:25" pos:end="437:34">has_option</name> <operator pos:start="437:36" pos:end="437:36">=</operator> <literal type="number" pos:start="437:38" pos:end="437:38">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:65"><expr pos:start="443:17" pos:end="443:64"><call pos:start="443:17" pos:end="443:64"><name pos:start="443:17" pos:end="443:25">qdict_put</name><argument_list pos:start="443:26" pos:end="443:64">(<argument pos:start="443:27" pos:end="443:31"><expr pos:start="443:27" pos:end="443:31"><name pos:start="443:27" pos:end="443:31">qdict</name></expr></argument>, <argument pos:start="443:34" pos:end="443:36"><expr pos:start="443:34" pos:end="443:36"><name pos:start="443:34" pos:end="443:36">key</name></expr></argument>, <argument pos:start="443:39" pos:end="443:63"><expr pos:start="443:39" pos:end="443:63"><call pos:start="443:39" pos:end="443:63"><name pos:start="443:39" pos:end="443:51">qint_from_int</name><argument_list pos:start="443:52" pos:end="443:63">(<argument pos:start="443:53" pos:end="443:62"><expr pos:start="443:53" pos:end="443:62"><name pos:start="443:53" pos:end="443:62">has_option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="447:13" pos:end="447:18">break;</break>

        <default pos:start="449:9" pos:end="449:16">default:</default>

        <label pos:start="451:9" pos:end="451:17"><name pos:start="451:9" pos:end="451:16">bad_type</name>:</label>

            <expr_stmt pos:start="453:13" pos:end="453:71"><expr pos:start="453:13" pos:end="453:70"><call pos:start="453:13" pos:end="453:70"><name pos:start="453:13" pos:end="453:26">monitor_printf</name><argument_list pos:start="453:27" pos:end="453:70">(<argument pos:start="453:28" pos:end="453:30"><expr pos:start="453:28" pos:end="453:30"><name pos:start="453:28" pos:end="453:30">mon</name></expr></argument>, <argument pos:start="453:33" pos:end="453:57"><expr pos:start="453:33" pos:end="453:57"><literal type="string" pos:start="453:33" pos:end="453:57">"%s: unknown type '%c'\n"</literal></expr></argument>, <argument pos:start="453:60" pos:end="453:66"><expr pos:start="453:60" pos:end="453:66"><name pos:start="453:60" pos:end="453:66">cmdname</name></expr></argument>, <argument pos:start="453:69" pos:end="453:69"><expr pos:start="453:69" pos:end="453:69"><name pos:start="453:69" pos:end="453:69">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="455:13" pos:end="455:22">goto <name pos:start="455:18" pos:end="455:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <expr_stmt pos:start="459:9" pos:end="459:23"><expr pos:start="459:9" pos:end="459:22"><call pos:start="459:9" pos:end="459:22"><name pos:start="459:9" pos:end="459:17">qemu_free</name><argument_list pos:start="459:18" pos:end="459:22">(<argument pos:start="459:19" pos:end="459:21"><expr pos:start="459:19" pos:end="459:21"><name pos:start="459:19" pos:end="459:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="461:9" pos:end="461:19"><expr pos:start="461:9" pos:end="461:18"><name pos:start="461:9" pos:end="461:11">key</name> <operator pos:start="461:13" pos:end="461:13">=</operator> <name pos:start="461:15" pos:end="461:18">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="465:5" pos:end="465:46">/* check that all arguments were parsed */</comment>

    <while pos:start="467:5" pos:end="469:12">while <condition pos:start="467:11" pos:end="467:28">(<expr pos:start="467:12" pos:end="467:27"><call pos:start="467:12" pos:end="467:27"><name pos:start="467:12" pos:end="467:23">qemu_isspace</name><argument_list pos:start="467:24" pos:end="467:27">(<argument pos:start="467:25" pos:end="467:26"><expr pos:start="467:25" pos:end="467:26"><operator pos:start="467:25" pos:end="467:25">*</operator><name pos:start="467:26" pos:end="467:26">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="469:9" pos:end="469:12"><block_content pos:start="469:9" pos:end="469:12">

        <expr_stmt pos:start="469:9" pos:end="469:12"><expr pos:start="469:9" pos:end="469:11"><name pos:start="469:9" pos:end="469:9">p</name><operator pos:start="469:10" pos:end="469:11">++</operator></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="471:5" pos:end="479:5"><if pos:start="471:5" pos:end="479:5">if <condition pos:start="471:8" pos:end="471:19">(<expr pos:start="471:9" pos:end="471:18"><operator pos:start="471:9" pos:end="471:9">*</operator><name pos:start="471:10" pos:end="471:10">p</name> <operator pos:start="471:12" pos:end="471:13">!=</operator> <literal type="char" pos:start="471:15" pos:end="471:18">'\0'</literal></expr>)</condition> <block pos:start="471:21" pos:end="479:5">{<block_content pos:start="473:9" pos:end="477:18">

        <expr_stmt pos:start="473:9" pos:end="475:32"><expr pos:start="473:9" pos:end="475:31"><call pos:start="473:9" pos:end="475:31"><name pos:start="473:9" pos:end="473:22">monitor_printf</name><argument_list pos:start="473:23" pos:end="475:31">(<argument pos:start="473:24" pos:end="473:26"><expr pos:start="473:24" pos:end="473:26"><name pos:start="473:24" pos:end="473:26">mon</name></expr></argument>, <argument pos:start="473:29" pos:end="473:76"><expr pos:start="473:29" pos:end="473:76"><literal type="string" pos:start="473:29" pos:end="473:76">"%s: extraneous characters at the end of line\n"</literal></expr></argument>,

                       <argument pos:start="475:24" pos:end="475:30"><expr pos:start="475:24" pos:end="475:30"><name pos:start="475:24" pos:end="475:30">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="477:9" pos:end="477:18">goto <name pos:start="477:14" pos:end="477:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="483:5" pos:end="483:15">return <expr pos:start="483:12" pos:end="483:14"><name pos:start="483:12" pos:end="483:14">cmd</name></expr>;</return>



<label pos:start="487:1" pos:end="487:5"><name pos:start="487:1" pos:end="487:4">fail</name>:</label>

    <expr_stmt pos:start="489:5" pos:end="489:19"><expr pos:start="489:5" pos:end="489:18"><call pos:start="489:5" pos:end="489:18"><name pos:start="489:5" pos:end="489:13">qemu_free</name><argument_list pos:start="489:14" pos:end="489:18">(<argument pos:start="489:15" pos:end="489:17"><expr pos:start="489:15" pos:end="489:17"><name pos:start="489:15" pos:end="489:17">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="491:5" pos:end="491:16">return <expr pos:start="491:12" pos:end="491:15"><name pos:start="491:12" pos:end="491:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
