<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4931.c" pos:tabs="8"><function pos:start="1:1" pos:end="327:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">handle_cmd</name><parameter_list pos:start="1:22" pos:end="1:55">(<parameter pos:start="1:23" pos:end="1:34"><decl pos:start="1:23" pos:end="1:34"><type pos:start="1:23" pos:end="1:34"><name pos:start="1:23" pos:end="1:31">AHCIState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">s</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:44"><decl pos:start="1:37" pos:end="1:44"><type pos:start="1:37" pos:end="1:44"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:44">port</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:54"><decl pos:start="1:47" pos:end="1:54"><type pos:start="1:47" pos:end="1:54"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:54">slot</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="327:1">{<block_content pos:start="5:5" pos:end="325:13">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IDEState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:23">ide_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:21">tbl_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">AHCICmdHdr</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:19">cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:20">cmd_fis</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">dma_addr_t</name></type> <name pos:start="15:16" pos:end="15:22">cmd_len</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:63">(<expr pos:start="19:9" pos:end="19:62"><name pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">dev</name><index pos:start="19:15" pos:end="19:20">[<expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">port</name></expr>]</index></name><operator pos:start="19:21" pos:end="19:21">.</operator><name pos:start="19:22" pos:end="19:32"><name pos:start="19:22" pos:end="19:25">port</name><operator pos:start="19:26" pos:end="19:26">.</operator><name pos:start="19:27" pos:end="19:29">ifs</name><index pos:start="19:30" pos:end="19:32">[<expr pos:start="19:31" pos:end="19:31"><literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr>]</index></name><operator pos:start="19:33" pos:end="19:33">.</operator><name pos:start="19:34" pos:end="19:39">status</name> <operator pos:start="19:41" pos:end="19:41">&amp;</operator> <operator pos:start="19:43" pos:end="19:43">(</operator><name pos:start="19:44" pos:end="19:52">BUSY_STAT</name><operator pos:start="19:53" pos:end="19:53">|</operator><name pos:start="19:54" pos:end="19:61">DRQ_STAT</name><operator pos:start="19:62" pos:end="19:62">)</operator></expr>)</condition> <block pos:start="19:65" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <comment type="block" pos:start="21:9" pos:end="21:52">/* Engine currently busy, try again later */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><call pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:15">DPRINTF</name><argument_list pos:start="23:16" pos:end="23:38">(<argument pos:start="23:17" pos:end="23:20"><expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">port</name></expr></argument>, <argument pos:start="23:23" pos:end="23:37"><expr pos:start="23:23" pos:end="23:37"><literal type="string" pos:start="23:23" pos:end="23:37">"engine busy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:50"><expr pos:start="31:5" pos:end="31:49"><name pos:start="31:5" pos:end="31:7">cmd</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <operator pos:start="31:11" pos:end="31:11">&amp;</operator><operator pos:start="31:12" pos:end="31:12">(</operator><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:23">AHCICmdHdr</name> <operator pos:start="31:25" pos:end="31:25">*</operator><operator pos:start="31:26" pos:end="31:26">)</operator><name pos:start="31:27" pos:end="31:38"><name pos:start="31:27" pos:end="31:27">s</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:32">dev</name><index pos:start="31:33" pos:end="31:38">[<expr pos:start="31:34" pos:end="31:37"><name pos:start="31:34" pos:end="31:37">port</name></expr>]</index></name><operator pos:start="31:39" pos:end="31:39">.</operator><name pos:start="31:40" pos:end="31:42">lst</name><operator pos:start="31:43" pos:end="31:43">)</operator><index pos:start="31:44" pos:end="31:49">[<expr pos:start="31:45" pos:end="31:48"><name pos:start="31:45" pos:end="31:48">slot</name></expr>]</index></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:26">(<expr pos:start="35:9" pos:end="35:25"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:21"><name pos:start="35:10" pos:end="35:10">s</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:15">dev</name><index pos:start="35:16" pos:end="35:21">[<expr pos:start="35:17" pos:end="35:20"><name pos:start="35:17" pos:end="35:20">port</name></expr>]</index></name><operator pos:start="35:22" pos:end="35:22">.</operator><name pos:start="35:23" pos:end="35:25">lst</name></expr>)</condition> <block pos:start="35:28" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:62"><expr pos:start="37:9" pos:end="37:61"><call pos:start="37:9" pos:end="37:61"><name pos:start="37:9" pos:end="37:15">DPRINTF</name><argument_list pos:start="37:16" pos:end="37:61">(<argument pos:start="37:17" pos:end="37:20"><expr pos:start="37:17" pos:end="37:20"><name pos:start="37:17" pos:end="37:20">port</name></expr></argument>, <argument pos:start="37:23" pos:end="37:60"><expr pos:start="37:23" pos:end="37:60"><literal type="string" pos:start="37:23" pos:end="37:60">"error: lst not given but cmd handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:48">/* remember current slot handle for later */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:10">dev</name><index pos:start="47:11" pos:end="47:16">[<expr pos:start="47:12" pos:end="47:15"><name pos:start="47:12" pos:end="47:15">port</name></expr>]</index></name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:24">cur_cmd</name> <operator pos:start="47:26" pos:end="47:26">=</operator> <name pos:start="47:28" pos:end="47:30">cmd</name></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:34"><expr pos:start="51:5" pos:end="51:33"><name pos:start="51:5" pos:end="51:8">opts</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <call pos:start="51:12" pos:end="51:33"><name pos:start="51:12" pos:end="51:22">le32_to_cpu</name><argument_list pos:start="51:23" pos:end="51:33">(<argument pos:start="51:24" pos:end="51:32"><expr pos:start="51:24" pos:end="51:32"><name pos:start="51:24" pos:end="51:32"><name pos:start="51:24" pos:end="51:26">cmd</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:32">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:42"><expr pos:start="53:5" pos:end="53:41"><name pos:start="53:5" pos:end="53:12">tbl_addr</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:41"><name pos:start="53:16" pos:end="53:26">le64_to_cpu</name><argument_list pos:start="53:27" pos:end="53:41">(<argument pos:start="53:28" pos:end="53:40"><expr pos:start="53:28" pos:end="53:40"><name pos:start="53:28" pos:end="53:40"><name pos:start="53:28" pos:end="53:30">cmd</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:40">tbl_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:19"><expr pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:11">cmd_len</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <literal type="number" pos:start="57:15" pos:end="57:18">0x80</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="61:56"><expr pos:start="59:5" pos:end="61:55"><name pos:start="59:5" pos:end="59:11">cmd_fis</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="61:55"><name pos:start="59:15" pos:end="59:28">dma_memory_map</name><argument_list pos:start="59:29" pos:end="61:55">(<argument pos:start="59:30" pos:end="59:34"><expr pos:start="59:30" pos:end="59:34"><name pos:start="59:30" pos:end="59:34"><name pos:start="59:30" pos:end="59:30">s</name><operator pos:start="59:31" pos:end="59:32">-&gt;</operator><name pos:start="59:33" pos:end="59:34">as</name></name></expr></argument>, <argument pos:start="59:37" pos:end="59:44"><expr pos:start="59:37" pos:end="59:44"><name pos:start="59:37" pos:end="59:44">tbl_addr</name></expr></argument>, <argument pos:start="59:47" pos:end="59:54"><expr pos:start="59:47" pos:end="59:54"><operator pos:start="59:47" pos:end="59:47">&amp;</operator><name pos:start="59:48" pos:end="59:54">cmd_len</name></expr></argument>,

                             <argument pos:start="61:30" pos:end="61:54"><expr pos:start="61:30" pos:end="61:54"><name pos:start="61:30" pos:end="61:54">DMA_DIRECTION_FROM_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:16">cmd_fis</name></expr>)</condition> <block pos:start="65:19" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:18">

        <expr_stmt pos:start="67:9" pos:end="67:69"><expr pos:start="67:9" pos:end="67:68"><call pos:start="67:9" pos:end="67:68"><name pos:start="67:9" pos:end="67:15">DPRINTF</name><argument_list pos:start="67:16" pos:end="67:68">(<argument pos:start="67:17" pos:end="67:20"><expr pos:start="67:17" pos:end="67:20"><name pos:start="67:17" pos:end="67:20">port</name></expr></argument>, <argument pos:start="67:23" pos:end="67:67"><expr pos:start="67:23" pos:end="67:67"><literal type="string" pos:start="67:23" pos:end="67:67">"error: guest passed us an invalid cmd fis\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:39">/* The device we are working for */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:42"><expr pos:start="77:5" pos:end="77:41"><name pos:start="77:5" pos:end="77:13">ide_state</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <operator pos:start="77:17" pos:end="77:17">&amp;</operator><name pos:start="77:18" pos:end="77:29"><name pos:start="77:18" pos:end="77:18">s</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:23">dev</name><index pos:start="77:24" pos:end="77:29">[<expr pos:start="77:25" pos:end="77:28"><name pos:start="77:25" pos:end="77:28">port</name></expr>]</index></name><operator pos:start="77:30" pos:end="77:30">.</operator><name pos:start="77:31" pos:end="77:41"><name pos:start="77:31" pos:end="77:34">port</name><operator pos:start="77:35" pos:end="77:35">.</operator><name pos:start="77:36" pos:end="77:38">ifs</name><index pos:start="77:39" pos:end="77:41">[<expr pos:start="77:40" pos:end="77:40"><literal type="number" pos:start="77:40" pos:end="77:40">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:23">(<expr pos:start="81:9" pos:end="81:22"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:22"><name pos:start="81:10" pos:end="81:18">ide_state</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:22">bs</name></name></expr>)</condition> <block pos:start="81:25" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:17">

        <expr_stmt pos:start="83:9" pos:end="83:59"><expr pos:start="83:9" pos:end="83:58"><call pos:start="83:9" pos:end="83:58"><name pos:start="83:9" pos:end="83:15">DPRINTF</name><argument_list pos:start="83:16" pos:end="83:58">(<argument pos:start="83:17" pos:end="83:20"><expr pos:start="83:17" pos:end="83:20"><name pos:start="83:17" pos:end="83:20">port</name></expr></argument>, <argument pos:start="83:23" pos:end="83:57"><expr pos:start="83:23" pos:end="83:57"><literal type="string" pos:start="83:23" pos:end="83:57">"error: guest accessed unused port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:17">goto <name pos:start="85:14" pos:end="85:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:35"><expr pos:start="91:5" pos:end="91:34"><call pos:start="91:5" pos:end="91:34"><name pos:start="91:5" pos:end="91:19">debug_print_fis</name><argument_list pos:start="91:20" pos:end="91:34">(<argument pos:start="91:21" pos:end="91:27"><expr pos:start="91:21" pos:end="91:27"><name pos:start="91:21" pos:end="91:27">cmd_fis</name></expr></argument>, <argument pos:start="91:30" pos:end="91:33"><expr pos:start="91:30" pos:end="91:33"><literal type="number" pos:start="91:30" pos:end="91:33">0x90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="93:5" pos:end="93:70">//debug_print_fis(cmd_fis, (opts &amp; AHCI_CMD_HDR_CMD_FIS_LEN) * 4);</comment>



    <switch pos:start="97:5" pos:end="115:5">switch <condition pos:start="97:12" pos:end="97:23">(<expr pos:start="97:13" pos:end="97:22"><name pos:start="97:13" pos:end="97:22"><name pos:start="97:13" pos:end="97:19">cmd_fis</name><index pos:start="97:20" pos:end="97:22">[<expr pos:start="97:21" pos:end="97:21"><literal type="number" pos:start="97:21" pos:end="97:21">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="97:25" pos:end="115:5">{<block_content pos:start="99:9" pos:end="113:18">

        <case pos:start="99:9" pos:end="99:40">case <expr pos:start="99:14" pos:end="99:39"><name pos:start="99:14" pos:end="99:39">SATA_FIS_TYPE_REGISTER_H2D</name></expr>:</case>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <default pos:start="103:9" pos:end="103:16">default:</default>

            <expr_stmt pos:start="105:13" pos:end="109:38"><expr pos:start="105:13" pos:end="109:37"><call pos:start="105:13" pos:end="109:37"><name pos:start="105:13" pos:end="105:19">DPRINTF</name><argument_list pos:start="105:20" pos:end="109:37">(<argument pos:start="105:21" pos:end="105:24"><expr pos:start="105:21" pos:end="105:24"><name pos:start="105:21" pos:end="105:24">port</name></expr></argument>, <argument pos:start="105:27" pos:end="107:45"><expr pos:start="105:27" pos:end="107:45"><literal type="string" pos:start="105:27" pos:end="105:76">"unknown command cmd_fis[0]=%02x cmd_fis[1]=%02x "</literal>

                          <literal type="string" pos:start="107:27" pos:end="107:45">"cmd_fis[2]=%02x\n"</literal></expr></argument>, <argument pos:start="107:48" pos:end="107:57"><expr pos:start="107:48" pos:end="107:57"><name pos:start="107:48" pos:end="107:57"><name pos:start="107:48" pos:end="107:54">cmd_fis</name><index pos:start="107:55" pos:end="107:57">[<expr pos:start="107:56" pos:end="107:56"><literal type="number" pos:start="107:56" pos:end="107:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="107:60" pos:end="107:69"><expr pos:start="107:60" pos:end="107:69"><name pos:start="107:60" pos:end="107:69"><name pos:start="107:60" pos:end="107:66">cmd_fis</name><index pos:start="107:67" pos:end="107:69">[<expr pos:start="107:68" pos:end="107:68"><literal type="number" pos:start="107:68" pos:end="107:68">1</literal></expr>]</index></name></expr></argument>,

                          <argument pos:start="109:27" pos:end="109:36"><expr pos:start="109:27" pos:end="109:36"><name pos:start="109:27" pos:end="109:36"><name pos:start="109:27" pos:end="109:33">cmd_fis</name><index pos:start="109:34" pos:end="109:36">[<expr pos:start="109:35" pos:end="109:35"><literal type="number" pos:start="109:35" pos:end="109:35">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="111:13" pos:end="111:21">goto <name pos:start="111:18" pos:end="111:20">out</name>;</goto>

            <break pos:start="113:13" pos:end="113:18">break;</break>

    </block_content>}</block></switch>



    <switch pos:start="119:5" pos:end="141:5">switch <condition pos:start="119:12" pos:end="119:23">(<expr pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:19">cmd_fis</name><index pos:start="119:20" pos:end="119:22">[<expr pos:start="119:21" pos:end="119:21"><literal type="number" pos:start="119:21" pos:end="119:21">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="119:25" pos:end="141:5">{<block_content pos:start="121:9" pos:end="139:18">

        <case pos:start="121:9" pos:end="121:54">case <expr pos:start="121:14" pos:end="121:53"><name pos:start="121:14" pos:end="121:53">SATA_FIS_REG_H2D_UPDATE_COMMAND_REGISTER</name></expr>:</case>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <case pos:start="125:9" pos:end="125:15">case <expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">0</literal></expr>:</case>

            <break pos:start="127:13" pos:end="127:18">break;</break>

        <default pos:start="129:9" pos:end="129:16">default:</default>

            <expr_stmt pos:start="131:13" pos:end="135:38"><expr pos:start="131:13" pos:end="135:37"><call pos:start="131:13" pos:end="135:37"><name pos:start="131:13" pos:end="131:19">DPRINTF</name><argument_list pos:start="131:20" pos:end="135:37">(<argument pos:start="131:21" pos:end="131:24"><expr pos:start="131:21" pos:end="131:24"><name pos:start="131:21" pos:end="131:24">port</name></expr></argument>, <argument pos:start="131:27" pos:end="133:45"><expr pos:start="131:27" pos:end="133:45"><literal type="string" pos:start="131:27" pos:end="131:76">"unknown command cmd_fis[0]=%02x cmd_fis[1]=%02x "</literal>

                          <literal type="string" pos:start="133:27" pos:end="133:45">"cmd_fis[2]=%02x\n"</literal></expr></argument>, <argument pos:start="133:48" pos:end="133:57"><expr pos:start="133:48" pos:end="133:57"><name pos:start="133:48" pos:end="133:57"><name pos:start="133:48" pos:end="133:54">cmd_fis</name><index pos:start="133:55" pos:end="133:57">[<expr pos:start="133:56" pos:end="133:56"><literal type="number" pos:start="133:56" pos:end="133:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="133:60" pos:end="133:69"><expr pos:start="133:60" pos:end="133:69"><name pos:start="133:60" pos:end="133:69"><name pos:start="133:60" pos:end="133:66">cmd_fis</name><index pos:start="133:67" pos:end="133:69">[<expr pos:start="133:68" pos:end="133:68"><literal type="number" pos:start="133:68" pos:end="133:68">1</literal></expr>]</index></name></expr></argument>,

                          <argument pos:start="135:27" pos:end="135:36"><expr pos:start="135:27" pos:end="135:36"><name pos:start="135:27" pos:end="135:36"><name pos:start="135:27" pos:end="135:33">cmd_fis</name><index pos:start="135:34" pos:end="135:36">[<expr pos:start="135:35" pos:end="135:35"><literal type="number" pos:start="135:35" pos:end="135:35">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="137:13" pos:end="137:21">goto <name pos:start="137:18" pos:end="137:20">out</name>;</goto>

            <break pos:start="139:13" pos:end="139:18">break;</break>

    </block_content>}</block></switch>



    <switch pos:start="145:5" pos:end="167:5">switch <condition pos:start="145:12" pos:end="145:36">(<expr pos:start="145:13" pos:end="145:35"><name pos:start="145:13" pos:end="145:24"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:18">dev</name><index pos:start="145:19" pos:end="145:24">[<expr pos:start="145:20" pos:end="145:23"><name pos:start="145:20" pos:end="145:23">port</name></expr>]</index></name><operator pos:start="145:25" pos:end="145:25">.</operator><name pos:start="145:26" pos:end="145:35">port_state</name></expr>)</condition> <block pos:start="145:38" pos:end="167:5">{<block_content pos:start="147:9" pos:end="165:18">

        <case pos:start="147:9" pos:end="147:23">case <expr pos:start="147:14" pos:end="147:22"><name pos:start="147:14" pos:end="147:22">STATE_RUN</name></expr>:</case>

            <if_stmt pos:start="149:13" pos:end="153:13"><if pos:start="149:13" pos:end="153:13">if <condition pos:start="149:16" pos:end="149:39">(<expr pos:start="149:17" pos:end="149:38"><name pos:start="149:17" pos:end="149:27"><name pos:start="149:17" pos:end="149:23">cmd_fis</name><index pos:start="149:24" pos:end="149:27">[<expr pos:start="149:25" pos:end="149:26"><literal type="number" pos:start="149:25" pos:end="149:26">15</literal></expr>]</index></name> <operator pos:start="149:29" pos:end="149:29">&amp;</operator> <name pos:start="149:31" pos:end="149:38">ATA_SRST</name></expr>)</condition> <block pos:start="149:41" pos:end="153:13">{<block_content pos:start="151:17" pos:end="151:54">

                <expr_stmt pos:start="151:17" pos:end="151:54"><expr pos:start="151:17" pos:end="151:53"><name pos:start="151:17" pos:end="151:28"><name pos:start="151:17" pos:end="151:17">s</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:22">dev</name><index pos:start="151:23" pos:end="151:28">[<expr pos:start="151:24" pos:end="151:27"><name pos:start="151:24" pos:end="151:27">port</name></expr>]</index></name><operator pos:start="151:29" pos:end="151:29">.</operator><name pos:start="151:30" pos:end="151:39">port_state</name> <operator pos:start="151:41" pos:end="151:41">=</operator> <name pos:start="151:43" pos:end="151:53">STATE_RESET</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        <case pos:start="157:9" pos:end="157:25">case <expr pos:start="157:14" pos:end="157:24"><name pos:start="157:14" pos:end="157:24">STATE_RESET</name></expr>:</case>

            <if_stmt pos:start="159:13" pos:end="163:13"><if pos:start="159:13" pos:end="163:13">if <condition pos:start="159:16" pos:end="159:42">(<expr pos:start="159:17" pos:end="159:41"><operator pos:start="159:17" pos:end="159:17">!</operator><operator pos:start="159:18" pos:end="159:18">(</operator><name pos:start="159:19" pos:end="159:29"><name pos:start="159:19" pos:end="159:25">cmd_fis</name><index pos:start="159:26" pos:end="159:29">[<expr pos:start="159:27" pos:end="159:28"><literal type="number" pos:start="159:27" pos:end="159:28">15</literal></expr>]</index></name> <operator pos:start="159:31" pos:end="159:31">&amp;</operator> <name pos:start="159:33" pos:end="159:40">ATA_SRST</name><operator pos:start="159:41" pos:end="159:41">)</operator></expr>)</condition> <block pos:start="159:44" pos:end="163:13">{<block_content pos:start="161:17" pos:end="161:41">

                <expr_stmt pos:start="161:17" pos:end="161:41"><expr pos:start="161:17" pos:end="161:40"><call pos:start="161:17" pos:end="161:40"><name pos:start="161:17" pos:end="161:31">ahci_reset_port</name><argument_list pos:start="161:32" pos:end="161:40">(<argument pos:start="161:33" pos:end="161:33"><expr pos:start="161:33" pos:end="161:33"><name pos:start="161:33" pos:end="161:33">s</name></expr></argument>, <argument pos:start="161:36" pos:end="161:39"><expr pos:start="161:36" pos:end="161:39"><name pos:start="161:36" pos:end="161:39">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="171:5" pos:end="299:5"><if pos:start="171:5" pos:end="299:5">if <condition pos:start="171:8" pos:end="171:63">(<expr pos:start="171:9" pos:end="171:62"><name pos:start="171:9" pos:end="171:18"><name pos:start="171:9" pos:end="171:15">cmd_fis</name><index pos:start="171:16" pos:end="171:18">[<expr pos:start="171:17" pos:end="171:17"><literal type="number" pos:start="171:17" pos:end="171:17">1</literal></expr>]</index></name> <operator pos:start="171:20" pos:end="171:21">==</operator> <name pos:start="171:23" pos:end="171:62">SATA_FIS_REG_H2D_UPDATE_COMMAND_REGISTER</name></expr>)</condition> <block pos:start="171:65" pos:end="299:5">{<block_content pos:start="177:9" pos:end="297:53">



        <comment type="block" pos:start="175:9" pos:end="175:35">/* Check for NCQ command */</comment>

        <if_stmt pos:start="177:9" pos:end="185:9"><if pos:start="177:9" pos:end="185:9">if <condition pos:start="177:12" pos:end="179:47">(<expr pos:start="177:13" pos:end="179:46"><operator pos:start="177:13" pos:end="177:13">(</operator><name pos:start="177:14" pos:end="177:23"><name pos:start="177:14" pos:end="177:20">cmd_fis</name><index pos:start="177:21" pos:end="177:23">[<expr pos:start="177:22" pos:end="177:22"><literal type="number" pos:start="177:22" pos:end="177:22">2</literal></expr>]</index></name> <operator pos:start="177:25" pos:end="177:26">==</operator> <name pos:start="177:28" pos:end="177:44">READ_FPDMA_QUEUED</name><operator pos:start="177:45" pos:end="177:45">)</operator> <operator pos:start="177:47" pos:end="177:48">||</operator>

            <operator pos:start="179:13" pos:end="179:13">(</operator><name pos:start="179:14" pos:end="179:23"><name pos:start="179:14" pos:end="179:20">cmd_fis</name><index pos:start="179:21" pos:end="179:23">[<expr pos:start="179:22" pos:end="179:22"><literal type="number" pos:start="179:22" pos:end="179:22">2</literal></expr>]</index></name> <operator pos:start="179:25" pos:end="179:26">==</operator> <name pos:start="179:28" pos:end="179:45">WRITE_FPDMA_QUEUED</name><operator pos:start="179:46" pos:end="179:46">)</operator></expr>)</condition> <block pos:start="179:49" pos:end="185:9">{<block_content pos:start="181:13" pos:end="183:21">

            <expr_stmt pos:start="181:13" pos:end="181:56"><expr pos:start="181:13" pos:end="181:55"><call pos:start="181:13" pos:end="181:55"><name pos:start="181:13" pos:end="181:31">process_ncq_command</name><argument_list pos:start="181:32" pos:end="181:55">(<argument pos:start="181:33" pos:end="181:33"><expr pos:start="181:33" pos:end="181:33"><name pos:start="181:33" pos:end="181:33">s</name></expr></argument>, <argument pos:start="181:36" pos:end="181:39"><expr pos:start="181:36" pos:end="181:39"><name pos:start="181:36" pos:end="181:39">port</name></expr></argument>, <argument pos:start="181:42" pos:end="181:48"><expr pos:start="181:42" pos:end="181:48"><name pos:start="181:42" pos:end="181:48">cmd_fis</name></expr></argument>, <argument pos:start="181:51" pos:end="181:54"><expr pos:start="181:51" pos:end="181:54"><name pos:start="181:51" pos:end="181:54">slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="183:13" pos:end="183:21">goto <name pos:start="183:18" pos:end="183:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="189:9" pos:end="189:32">/* Decompose the FIS  */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:73"><expr pos:start="191:9" pos:end="191:72"><name pos:start="191:9" pos:end="191:26"><name pos:start="191:9" pos:end="191:17">ide_state</name><operator pos:start="191:18" pos:end="191:19">-&gt;</operator><name pos:start="191:20" pos:end="191:26">nsector</name></name> <operator pos:start="191:28" pos:end="191:28">=</operator> <operator pos:start="191:30" pos:end="191:30">(</operator><name pos:start="191:31" pos:end="191:37">int64_t</name><operator pos:start="191:38" pos:end="191:38">)</operator><operator pos:start="191:39" pos:end="191:39">(</operator><operator pos:start="191:40" pos:end="191:40">(</operator><name pos:start="191:41" pos:end="191:51"><name pos:start="191:41" pos:end="191:47">cmd_fis</name><index pos:start="191:48" pos:end="191:51">[<expr pos:start="191:49" pos:end="191:50"><literal type="number" pos:start="191:49" pos:end="191:50">13</literal></expr>]</index></name> <operator pos:start="191:53" pos:end="191:54">&lt;&lt;</operator> <literal type="number" pos:start="191:56" pos:end="191:56">8</literal><operator pos:start="191:57" pos:end="191:57">)</operator> <operator pos:start="191:59" pos:end="191:59">|</operator> <name pos:start="191:61" pos:end="191:71"><name pos:start="191:61" pos:end="191:67">cmd_fis</name><index pos:start="191:68" pos:end="191:71">[<expr pos:start="191:69" pos:end="191:70"><literal type="number" pos:start="191:69" pos:end="191:70">12</literal></expr>]</index></name><operator pos:start="191:72" pos:end="191:72">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:40"><expr pos:start="193:9" pos:end="193:39"><name pos:start="193:9" pos:end="193:26"><name pos:start="193:9" pos:end="193:17">ide_state</name><operator pos:start="193:18" pos:end="193:19">-&gt;</operator><name pos:start="193:20" pos:end="193:26">feature</name></name> <operator pos:start="193:28" pos:end="193:28">=</operator> <name pos:start="193:30" pos:end="193:39"><name pos:start="193:30" pos:end="193:36">cmd_fis</name><index pos:start="193:37" pos:end="193:39">[<expr pos:start="193:38" pos:end="193:38"><literal type="number" pos:start="193:38" pos:end="193:38">3</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="199:9"><if pos:start="195:9" pos:end="199:9">if <condition pos:start="195:12" pos:end="195:32">(<expr pos:start="195:13" pos:end="195:31"><operator pos:start="195:13" pos:end="195:13">!</operator><name pos:start="195:14" pos:end="195:31"><name pos:start="195:14" pos:end="195:22">ide_state</name><operator pos:start="195:23" pos:end="195:24">-&gt;</operator><name pos:start="195:25" pos:end="195:31">nsector</name></name></expr>)</condition> <block pos:start="195:34" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:37">

            <expr_stmt pos:start="197:13" pos:end="197:37"><expr pos:start="197:13" pos:end="197:36"><name pos:start="197:13" pos:end="197:30"><name pos:start="197:13" pos:end="197:21">ide_state</name><operator pos:start="197:22" pos:end="197:23">-&gt;</operator><name pos:start="197:24" pos:end="197:30">nsector</name></name> <operator pos:start="197:32" pos:end="197:32">=</operator> <literal type="number" pos:start="197:34" pos:end="197:36">256</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="203:9" pos:end="255:9"><if pos:start="203:9" pos:end="255:9">if <condition pos:start="203:12" pos:end="203:44">(<expr pos:start="203:13" pos:end="203:43"><name pos:start="203:13" pos:end="203:33"><name pos:start="203:13" pos:end="203:21">ide_state</name><operator pos:start="203:22" pos:end="203:23">-&gt;</operator><name pos:start="203:24" pos:end="203:33">drive_kind</name></name> <operator pos:start="203:35" pos:end="203:36">!=</operator> <name pos:start="203:38" pos:end="203:43">IDE_CD</name></expr>)</condition> <block pos:start="203:46" pos:end="255:9">{<block_content pos:start="237:13" pos:end="253:50">

            <comment type="block" pos:start="205:13" pos:end="235:15">/*

             * We set the sector depending on the sector defined in the FIS.

             * Unfortunately, the spec isn't exactly obvious on this one.

             *

             * Apparently LBA48 commands set fis bytes 10,9,8,6,5,4 to the

             * 48 bit sector number. ATA_CMD_READ_DMA_EXT is an example for

             * such a command.

             *

             * Non-LBA48 commands however use 7[lower 4 bits],6,5,4 to define a

             * 28-bit sector number. ATA_CMD_READ_DMA is an example for such

             * a command.

             *

             * Since the spec doesn't explicitly state what each field should

             * do, I simply assume non-used fields as reserved and OR everything

             * together, independent of the command.

             */</comment>

            <expr_stmt pos:start="237:13" pos:end="253:50"><expr pos:start="237:13" pos:end="253:49"><call pos:start="237:13" pos:end="253:49"><name pos:start="237:13" pos:end="237:26">ide_set_sector</name><argument_list pos:start="237:27" pos:end="253:49">(<argument pos:start="237:28" pos:end="237:36"><expr pos:start="237:28" pos:end="237:36"><name pos:start="237:28" pos:end="237:36">ide_state</name></expr></argument>, <argument pos:start="237:39" pos:end="253:48"><expr pos:start="237:39" pos:end="253:48"><operator pos:start="237:39" pos:end="237:39">(</operator><operator pos:start="237:40" pos:end="237:40">(</operator><name pos:start="237:41" pos:end="237:48">uint64_t</name><operator pos:start="237:49" pos:end="237:49">)</operator><name pos:start="237:50" pos:end="237:60"><name pos:start="237:50" pos:end="237:56">cmd_fis</name><index pos:start="237:57" pos:end="237:60">[<expr pos:start="237:58" pos:end="237:59"><literal type="number" pos:start="237:58" pos:end="237:59">10</literal></expr>]</index></name> <operator pos:start="237:62" pos:end="237:63">&lt;&lt;</operator> <literal type="number" pos:start="237:65" pos:end="237:66">40</literal><operator pos:start="237:67" pos:end="237:67">)</operator>

                                    <operator pos:start="239:37" pos:end="239:37">|</operator> <operator pos:start="239:39" pos:end="239:39">(</operator><operator pos:start="239:40" pos:end="239:40">(</operator><name pos:start="239:41" pos:end="239:48">uint64_t</name><operator pos:start="239:49" pos:end="239:49">)</operator><name pos:start="239:50" pos:end="239:59"><name pos:start="239:50" pos:end="239:56">cmd_fis</name><index pos:start="239:57" pos:end="239:59">[<expr pos:start="239:58" pos:end="239:58"><literal type="number" pos:start="239:58" pos:end="239:58">9</literal></expr>]</index></name> <operator pos:start="239:61" pos:end="239:62">&lt;&lt;</operator> <literal type="number" pos:start="239:64" pos:end="239:65">32</literal><operator pos:start="239:66" pos:end="239:66">)</operator>

                                    <comment type="block" pos:start="241:37" pos:end="241:73">/* This is used for LBA48 commands */</comment>

                                    <operator pos:start="243:37" pos:end="243:37">|</operator> <operator pos:start="243:39" pos:end="243:39">(</operator><operator pos:start="243:40" pos:end="243:40">(</operator><name pos:start="243:41" pos:end="243:48">uint64_t</name><operator pos:start="243:49" pos:end="243:49">)</operator><name pos:start="243:50" pos:end="243:59"><name pos:start="243:50" pos:end="243:56">cmd_fis</name><index pos:start="243:57" pos:end="243:59">[<expr pos:start="243:58" pos:end="243:58"><literal type="number" pos:start="243:58" pos:end="243:58">8</literal></expr>]</index></name> <operator pos:start="243:61" pos:end="243:62">&lt;&lt;</operator> <literal type="number" pos:start="243:64" pos:end="243:65">24</literal><operator pos:start="243:66" pos:end="243:66">)</operator>

                                    <comment type="block" pos:start="245:37" pos:end="245:77">/* This is used for non-LBA48 commands */</comment>

                                    <operator pos:start="247:37" pos:end="247:37">|</operator> <operator pos:start="247:39" pos:end="247:39">(</operator><operator pos:start="247:40" pos:end="247:40">(</operator><name pos:start="247:41" pos:end="247:48">uint64_t</name><operator pos:start="247:49" pos:end="247:49">)</operator><operator pos:start="247:50" pos:end="247:50">(</operator><name pos:start="247:51" pos:end="247:60"><name pos:start="247:51" pos:end="247:57">cmd_fis</name><index pos:start="247:58" pos:end="247:60">[<expr pos:start="247:59" pos:end="247:59"><literal type="number" pos:start="247:59" pos:end="247:59">7</literal></expr>]</index></name> <operator pos:start="247:62" pos:end="247:62">&amp;</operator> <literal type="number" pos:start="247:64" pos:end="247:66">0xf</literal><operator pos:start="247:67" pos:end="247:67">)</operator> <operator pos:start="247:69" pos:end="247:70">&lt;&lt;</operator> <literal type="number" pos:start="247:72" pos:end="247:73">24</literal><operator pos:start="247:74" pos:end="247:74">)</operator>

                                    <operator pos:start="249:37" pos:end="249:37">|</operator> <operator pos:start="249:39" pos:end="249:39">(</operator><operator pos:start="249:40" pos:end="249:40">(</operator><name pos:start="249:41" pos:end="249:48">uint64_t</name><operator pos:start="249:49" pos:end="249:49">)</operator><name pos:start="249:50" pos:end="249:59"><name pos:start="249:50" pos:end="249:56">cmd_fis</name><index pos:start="249:57" pos:end="249:59">[<expr pos:start="249:58" pos:end="249:58"><literal type="number" pos:start="249:58" pos:end="249:58">6</literal></expr>]</index></name> <operator pos:start="249:61" pos:end="249:62">&lt;&lt;</operator> <literal type="number" pos:start="249:64" pos:end="249:65">16</literal><operator pos:start="249:66" pos:end="249:66">)</operator>

                                    <operator pos:start="251:37" pos:end="251:37">|</operator> <operator pos:start="251:39" pos:end="251:39">(</operator><operator pos:start="251:40" pos:end="251:40">(</operator><name pos:start="251:41" pos:end="251:48">uint64_t</name><operator pos:start="251:49" pos:end="251:49">)</operator><name pos:start="251:50" pos:end="251:59"><name pos:start="251:50" pos:end="251:56">cmd_fis</name><index pos:start="251:57" pos:end="251:59">[<expr pos:start="251:58" pos:end="251:58"><literal type="number" pos:start="251:58" pos:end="251:58">5</literal></expr>]</index></name> <operator pos:start="251:61" pos:end="251:62">&lt;&lt;</operator> <literal type="number" pos:start="251:64" pos:end="251:64">8</literal><operator pos:start="251:65" pos:end="251:65">)</operator>

                                    <operator pos:start="253:37" pos:end="253:37">|</operator> <name pos:start="253:39" pos:end="253:48"><name pos:start="253:39" pos:end="253:45">cmd_fis</name><index pos:start="253:46" pos:end="253:48">[<expr pos:start="253:47" pos:end="253:47"><literal type="number" pos:start="253:47" pos:end="253:47">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="259:9" pos:end="263:11">/* Copy the ACMD field (ATAPI packet, if any) from the AHCI command

         * table to ide_state-&gt;io_buffer

         */</comment>

        <if_stmt pos:start="265:9" pos:end="281:9"><if pos:start="265:9" pos:end="281:9">if <condition pos:start="265:12" pos:end="265:34">(<expr pos:start="265:13" pos:end="265:33"><name pos:start="265:13" pos:end="265:16">opts</name> <operator pos:start="265:18" pos:end="265:18">&amp;</operator> <name pos:start="265:20" pos:end="265:33">AHCI_CMD_ATAPI</name></expr>)</condition> <block pos:start="265:36" pos:end="281:9">{<block_content pos:start="267:13" pos:end="277:51">

            <expr_stmt pos:start="267:13" pos:end="267:82"><expr pos:start="267:13" pos:end="267:81"><call pos:start="267:13" pos:end="267:81"><name pos:start="267:13" pos:end="267:18">memcpy</name><argument_list pos:start="267:19" pos:end="267:81">(<argument pos:start="267:20" pos:end="267:39"><expr pos:start="267:20" pos:end="267:39"><name pos:start="267:20" pos:end="267:39"><name pos:start="267:20" pos:end="267:28">ide_state</name><operator pos:start="267:29" pos:end="267:30">-&gt;</operator><name pos:start="267:31" pos:end="267:39">io_buffer</name></name></expr></argument>, <argument pos:start="267:42" pos:end="267:74"><expr pos:start="267:42" pos:end="267:74"><operator pos:start="267:42" pos:end="267:42">&amp;</operator><name pos:start="267:43" pos:end="267:74"><name pos:start="267:43" pos:end="267:49">cmd_fis</name><index pos:start="267:50" pos:end="267:74">[<expr pos:start="267:51" pos:end="267:73"><name pos:start="267:51" pos:end="267:73">AHCI_COMMAND_TABLE_ACMD</name></expr>]</index></name></expr></argument>, <argument pos:start="267:77" pos:end="267:80"><expr pos:start="267:77" pos:end="267:80"><literal type="number" pos:start="267:77" pos:end="267:80">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:35"><expr pos:start="269:13" pos:end="269:34"><name pos:start="269:13" pos:end="269:27"><name pos:start="269:13" pos:end="269:21">ide_state</name><operator pos:start="269:22" pos:end="269:23">-&gt;</operator><name pos:start="269:24" pos:end="269:27">lcyl</name></name> <operator pos:start="269:29" pos:end="269:29">=</operator> <literal type="number" pos:start="269:31" pos:end="269:34">0x14</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:35"><expr pos:start="271:13" pos:end="271:34"><name pos:start="271:13" pos:end="271:27"><name pos:start="271:13" pos:end="271:21">ide_state</name><operator pos:start="271:22" pos:end="271:23">-&gt;</operator><name pos:start="271:24" pos:end="271:27">hcyl</name></name> <operator pos:start="271:29" pos:end="271:29">=</operator> <literal type="number" pos:start="271:31" pos:end="271:34">0xeb</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:56"><expr pos:start="273:13" pos:end="273:55"><call pos:start="273:13" pos:end="273:55"><name pos:start="273:13" pos:end="273:27">debug_print_fis</name><argument_list pos:start="273:28" pos:end="273:55">(<argument pos:start="273:29" pos:end="273:48"><expr pos:start="273:29" pos:end="273:48"><name pos:start="273:29" pos:end="273:48"><name pos:start="273:29" pos:end="273:37">ide_state</name><operator pos:start="273:38" pos:end="273:39">-&gt;</operator><name pos:start="273:40" pos:end="273:48">io_buffer</name></name></expr></argument>, <argument pos:start="273:51" pos:end="273:54"><expr pos:start="273:51" pos:end="273:54"><literal type="number" pos:start="273:51" pos:end="273:54">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:49"><expr pos:start="275:13" pos:end="275:48"><name pos:start="275:13" pos:end="275:30"><name pos:start="275:13" pos:end="275:21">ide_state</name><operator pos:start="275:22" pos:end="275:23">-&gt;</operator><name pos:start="275:24" pos:end="275:30">feature</name></name> <operator pos:start="275:32" pos:end="275:32">=</operator> <name pos:start="275:34" pos:end="275:48">IDE_FEATURE_DMA</name></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:51"><expr pos:start="277:13" pos:end="277:50"><name pos:start="277:13" pos:end="277:24"><name pos:start="277:13" pos:end="277:13">s</name><operator pos:start="277:14" pos:end="277:15">-&gt;</operator><name pos:start="277:16" pos:end="277:18">dev</name><index pos:start="277:19" pos:end="277:24">[<expr pos:start="277:20" pos:end="277:23"><name pos:start="277:20" pos:end="277:23">port</name></expr>]</index></name><operator pos:start="277:25" pos:end="277:25">.</operator><name pos:start="277:26" pos:end="277:42">done_atapi_packet</name> <operator pos:start="277:44" pos:end="277:44">=</operator> <name pos:start="277:46" pos:end="277:50">false</name></expr>;</expr_stmt>

            <comment type="block" pos:start="279:13" pos:end="279:40">/* XXX send PIO setup FIS */</comment>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="285:9" pos:end="285:29"><expr pos:start="285:9" pos:end="285:28"><name pos:start="285:9" pos:end="285:24"><name pos:start="285:9" pos:end="285:17">ide_state</name><operator pos:start="285:18" pos:end="285:19">-&gt;</operator><name pos:start="285:20" pos:end="285:24">error</name></name> <operator pos:start="285:26" pos:end="285:26">=</operator> <literal type="number" pos:start="285:28" pos:end="285:28">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="289:9" pos:end="289:44">/* Reset transferred byte counter */</comment>

        <expr_stmt pos:start="291:9" pos:end="291:24"><expr pos:start="291:9" pos:end="291:23"><name pos:start="291:9" pos:end="291:19"><name pos:start="291:9" pos:end="291:11">cmd</name><operator pos:start="291:12" pos:end="291:13">-&gt;</operator><name pos:start="291:14" pos:end="291:19">status</name></name> <operator pos:start="291:21" pos:end="291:21">=</operator> <literal type="number" pos:start="291:23" pos:end="291:23">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="295:9" pos:end="295:63">/* We're ready to process the command in FIS byte 2. */</comment>

        <expr_stmt pos:start="297:9" pos:end="297:53"><expr pos:start="297:9" pos:end="297:52"><call pos:start="297:9" pos:end="297:52"><name pos:start="297:9" pos:end="297:20">ide_exec_cmd</name><argument_list pos:start="297:21" pos:end="297:52">(<argument pos:start="297:22" pos:end="297:39"><expr pos:start="297:22" pos:end="297:39"><operator pos:start="297:22" pos:end="297:22">&amp;</operator><name pos:start="297:23" pos:end="297:34"><name pos:start="297:23" pos:end="297:23">s</name><operator pos:start="297:24" pos:end="297:25">-&gt;</operator><name pos:start="297:26" pos:end="297:28">dev</name><index pos:start="297:29" pos:end="297:34">[<expr pos:start="297:30" pos:end="297:33"><name pos:start="297:30" pos:end="297:33">port</name></expr>]</index></name><operator pos:start="297:35" pos:end="297:35">.</operator><name pos:start="297:36" pos:end="297:39">port</name></expr></argument>, <argument pos:start="297:42" pos:end="297:51"><expr pos:start="297:42" pos:end="297:51"><name pos:start="297:42" pos:end="297:51"><name pos:start="297:42" pos:end="297:48">cmd_fis</name><index pos:start="297:49" pos:end="297:51">[<expr pos:start="297:50" pos:end="297:50"><literal type="number" pos:start="297:50" pos:end="297:50">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="303:1" pos:end="303:4"><name pos:start="303:1" pos:end="303:3">out</name>:</label>

    <expr_stmt pos:start="305:5" pos:end="307:30"><expr pos:start="305:5" pos:end="307:29"><call pos:start="305:5" pos:end="307:29"><name pos:start="305:5" pos:end="305:20">dma_memory_unmap</name><argument_list pos:start="305:21" pos:end="307:29">(<argument pos:start="305:22" pos:end="305:26"><expr pos:start="305:22" pos:end="305:26"><name pos:start="305:22" pos:end="305:26"><name pos:start="305:22" pos:end="305:22">s</name><operator pos:start="305:23" pos:end="305:24">-&gt;</operator><name pos:start="305:25" pos:end="305:26">as</name></name></expr></argument>, <argument pos:start="305:29" pos:end="305:35"><expr pos:start="305:29" pos:end="305:35"><name pos:start="305:29" pos:end="305:35">cmd_fis</name></expr></argument>, <argument pos:start="305:38" pos:end="305:44"><expr pos:start="305:38" pos:end="305:44"><name pos:start="305:38" pos:end="305:44">cmd_len</name></expr></argument>, <argument pos:start="305:47" pos:end="305:71"><expr pos:start="305:47" pos:end="305:71"><name pos:start="305:47" pos:end="305:71">DMA_DIRECTION_FROM_DEVICE</name></expr></argument>,

                     <argument pos:start="307:22" pos:end="307:28"><expr pos:start="307:22" pos:end="307:28"><name pos:start="307:22" pos:end="307:28">cmd_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="311:5" pos:end="319:5"><if pos:start="311:5" pos:end="319:5">if <condition pos:start="311:8" pos:end="311:63">(<expr pos:start="311:9" pos:end="311:62"><name pos:start="311:9" pos:end="311:20"><name pos:start="311:9" pos:end="311:9">s</name><operator pos:start="311:10" pos:end="311:11">-&gt;</operator><name pos:start="311:12" pos:end="311:14">dev</name><index pos:start="311:15" pos:end="311:20">[<expr pos:start="311:16" pos:end="311:19"><name pos:start="311:16" pos:end="311:19">port</name></expr>]</index></name><operator pos:start="311:21" pos:end="311:21">.</operator><name pos:start="311:22" pos:end="311:32"><name pos:start="311:22" pos:end="311:25">port</name><operator pos:start="311:26" pos:end="311:26">.</operator><name pos:start="311:27" pos:end="311:29">ifs</name><index pos:start="311:30" pos:end="311:32">[<expr pos:start="311:31" pos:end="311:31"><literal type="number" pos:start="311:31" pos:end="311:31">0</literal></expr>]</index></name><operator pos:start="311:33" pos:end="311:33">.</operator><name pos:start="311:34" pos:end="311:39">status</name> <operator pos:start="311:41" pos:end="311:41">&amp;</operator> <operator pos:start="311:43" pos:end="311:43">(</operator><name pos:start="311:44" pos:end="311:52">BUSY_STAT</name><operator pos:start="311:53" pos:end="311:53">|</operator><name pos:start="311:54" pos:end="311:61">DRQ_STAT</name><operator pos:start="311:62" pos:end="311:62">)</operator></expr>)</condition> <block pos:start="311:65" pos:end="319:5">{<block_content pos:start="315:9" pos:end="317:18">

        <comment type="block" pos:start="313:9" pos:end="313:43">/* async command, complete later */</comment>

        <expr_stmt pos:start="315:9" pos:end="315:38"><expr pos:start="315:9" pos:end="315:37"><name pos:start="315:9" pos:end="315:20"><name pos:start="315:9" pos:end="315:9">s</name><operator pos:start="315:10" pos:end="315:11">-&gt;</operator><name pos:start="315:12" pos:end="315:14">dev</name><index pos:start="315:15" pos:end="315:20">[<expr pos:start="315:16" pos:end="315:19"><name pos:start="315:16" pos:end="315:19">port</name></expr>]</index></name><operator pos:start="315:21" pos:end="315:21">.</operator><name pos:start="315:22" pos:end="315:30">busy_slot</name> <operator pos:start="315:32" pos:end="315:32">=</operator> <name pos:start="315:34" pos:end="315:37">slot</name></expr>;</expr_stmt>

        <return pos:start="317:9" pos:end="317:18">return <expr pos:start="317:16" pos:end="317:17"><operator pos:start="317:16" pos:end="317:16">-</operator><literal type="number" pos:start="317:17" pos:end="317:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="323:5" pos:end="323:35">/* done handling the command */</comment>

    <return pos:start="325:5" pos:end="325:13">return <expr pos:start="325:12" pos:end="325:12"><literal type="number" pos:start="325:12" pos:end="325:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
