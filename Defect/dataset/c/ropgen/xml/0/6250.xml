<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6250.c" pos:tabs="8"><function pos:start="1:1" pos:end="651:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:30">get_phys_addr_lpae</name><parameter_list pos:start="1:31" pos:end="9:51">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:42">CPUARMState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:61">target_ulong</name></type> <name pos:start="1:63" pos:end="1:69">address</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:46"><decl pos:start="3:32" pos:end="3:46"><type pos:start="3:32" pos:end="3:46"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:46">access_type</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:65"><decl pos:start="3:49" pos:end="3:65"><type pos:start="3:49" pos:end="3:65"><name pos:start="3:49" pos:end="3:57">ARMMMUIdx</name></type> <name pos:start="3:59" pos:end="3:65">mmu_idx</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:47"><decl pos:start="5:32" pos:end="5:47"><type pos:start="5:32" pos:end="5:47"><name pos:start="5:32" pos:end="5:37">hwaddr</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:47">phys_ptr</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:68"><decl pos:start="5:50" pos:end="5:68"><type pos:start="5:50" pos:end="5:68"><name pos:start="5:50" pos:end="5:59">MemTxAttrs</name> <modifier pos:start="5:61" pos:end="5:61">*</modifier></type><name pos:start="5:62" pos:end="5:68">txattrs</name></decl></parameter>, <parameter pos:start="5:71" pos:end="5:79"><decl pos:start="5:71" pos:end="5:79"><type pos:start="5:71" pos:end="5:79"><name pos:start="5:71" pos:end="5:73">int</name> <modifier pos:start="5:75" pos:end="5:75">*</modifier></type><name pos:start="5:76" pos:end="5:79">prot</name></decl></parameter>,

                               <parameter pos:start="7:32" pos:end="7:58"><decl pos:start="7:32" pos:end="7:58"><type pos:start="7:32" pos:end="7:58"><name pos:start="7:32" pos:end="7:43">target_ulong</name> <modifier pos:start="7:45" pos:end="7:45">*</modifier></type><name pos:start="7:46" pos:end="7:58">page_size_ptr</name></decl></parameter>, <parameter pos:start="7:61" pos:end="7:73"><decl pos:start="7:61" pos:end="7:73"><type pos:start="7:61" pos:end="7:73"><name pos:start="7:61" pos:end="7:68">uint32_t</name> <modifier pos:start="7:70" pos:end="7:70">*</modifier></type><name pos:start="7:71" pos:end="7:73">fsr</name></decl></parameter>,

                               <parameter pos:start="9:32" pos:end="9:50"><decl pos:start="9:32" pos:end="9:50"><type pos:start="9:32" pos:end="9:50"><name pos:start="9:32" pos:end="9:46">ARMMMUFaultInfo</name> <modifier pos:start="9:48" pos:end="9:48">*</modifier></type><name pos:start="9:49" pos:end="9:50">fi</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="651:1">{<block_content pos:start="13:5" pos:end="649:16">

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">ARMCPU</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">cpu</name> <init pos:start="13:17" pos:end="13:38">= <expr pos:start="13:19" pos:end="13:38"><call pos:start="13:19" pos:end="13:38"><name pos:start="13:19" pos:end="13:33">arm_env_get_cpu</name><argument_list pos:start="13:34" pos:end="13:38">(<argument pos:start="13:35" pos:end="13:37"><expr pos:start="13:35" pos:end="13:37"><name pos:start="13:35" pos:end="13:37">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:16">cs</name> <init pos:start="15:18" pos:end="15:27">= <expr pos:start="15:20" pos:end="15:27"><call pos:start="15:20" pos:end="15:27"><name pos:start="15:20" pos:end="15:22">CPU</name><argument_list pos:start="15:23" pos:end="15:27">(<argument pos:start="15:24" pos:end="15:26"><expr pos:start="15:24" pos:end="15:26"><name pos:start="15:24" pos:end="15:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="17:5" pos:end="17:57">/* Read an LPAE long-descriptor translation table. */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:48"><decl pos:start="19:5" pos:end="19:47"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:16">MMUFaultType</name></type> <name pos:start="19:18" pos:end="19:27">fault_type</name> <init pos:start="19:29" pos:end="19:47">= <expr pos:start="19:31" pos:end="19:47"><name pos:start="19:31" pos:end="19:47">translation_fault</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:18">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:16">epd</name> <init pos:start="23:18" pos:end="23:20">= <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">int32_t</name></type> <name pos:start="25:13" pos:end="25:16">t0sz</name></decl>, <decl pos:start="25:19" pos:end="25:22"><type ref="prev" pos:start="25:5" pos:end="25:11"/><name pos:start="25:19" pos:end="25:22">t1sz</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:16"><decl pos:start="27:5" pos:end="27:15"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint32_t</name></type> <name pos:start="27:14" pos:end="27:15">tg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint64_t</name></type> <name pos:start="29:14" pos:end="29:17">ttbr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:19">ttbr_select</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:52"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:10">hwaddr</name></type> <name pos:start="33:12" pos:end="33:19">descaddr</name></decl>, <decl pos:start="33:22" pos:end="33:30"><type ref="prev" pos:start="33:5" pos:end="33:10"/><name pos:start="33:22" pos:end="33:30">indexmask</name></decl>, <decl pos:start="33:33" pos:end="33:51"><type ref="prev" pos:start="33:5" pos:end="33:10"/><name pos:start="33:33" pos:end="33:51">indexmask_grainsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">uint32_t</name></type> <name pos:start="35:14" pos:end="35:23">tableattrs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:27"><decl pos:start="37:5" pos:end="37:26"><type pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:16">target_ulong</name></type> <name pos:start="37:18" pos:end="37:26">page_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:19"><decl pos:start="39:5" pos:end="39:18"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:12">uint32_t</name></type> <name pos:start="39:14" pos:end="39:18">attrs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:23"><decl pos:start="41:5" pos:end="41:22"><type pos:start="41:5" pos:end="41:11"><name pos:start="41:5" pos:end="41:11">int32_t</name></type> <name pos:start="41:13" pos:end="41:18">stride</name> <init pos:start="41:20" pos:end="41:22">= <expr pos:start="41:22" pos:end="41:22"><literal type="number" pos:start="41:22" pos:end="41:22">9</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:20"><decl pos:start="43:5" pos:end="43:19"><type pos:start="43:5" pos:end="43:11"><name pos:start="43:5" pos:end="43:11">int32_t</name></type> <name pos:start="43:13" pos:end="43:19">va_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:18"><decl pos:start="45:5" pos:end="45:17"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:17">inputsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:20"><decl pos:start="47:5" pos:end="47:19"><type pos:start="47:5" pos:end="47:11"><name pos:start="47:5" pos:end="47:11">int32_t</name></type> <name pos:start="47:13" pos:end="47:15">tbi</name> <init pos:start="47:17" pos:end="47:19">= <expr pos:start="47:19" pos:end="47:19"><literal type="number" pos:start="47:19" pos:end="47:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:40"><decl pos:start="49:5" pos:end="49:39"><type pos:start="49:5" pos:end="49:9"><name pos:start="49:5" pos:end="49:7">TCR</name> <modifier pos:start="49:9" pos:end="49:9">*</modifier></type><name pos:start="49:10" pos:end="49:12">tcr</name> <init pos:start="49:14" pos:end="49:39">= <expr pos:start="49:16" pos:end="49:39"><call pos:start="49:16" pos:end="49:39"><name pos:start="49:16" pos:end="49:25">regime_tcr</name><argument_list pos:start="49:26" pos:end="49:39">(<argument pos:start="49:27" pos:end="49:29"><expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:29">env</name></expr></argument>, <argument pos:start="49:32" pos:end="49:38"><expr pos:start="49:32" pos:end="49:38"><name pos:start="49:32" pos:end="49:38">mmu_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:24"><decl pos:start="51:5" pos:end="51:10"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:10">ap</name></decl>, <decl pos:start="51:13" pos:end="51:14"><type ref="prev" pos:start="51:5" pos:end="51:7"/><name pos:start="51:13" pos:end="51:14">ns</name></decl>, <decl pos:start="51:17" pos:end="51:18"><type ref="prev" pos:start="51:5" pos:end="51:7"/><name pos:start="51:17" pos:end="51:18">xn</name></decl>, <decl pos:start="51:21" pos:end="51:23"><type ref="prev" pos:start="51:5" pos:end="51:7"/><name pos:start="51:21" pos:end="51:23">pxn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:42"><decl pos:start="53:5" pos:end="53:41"><type pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:12">uint32_t</name></type> <name pos:start="53:14" pos:end="53:15">el</name> <init pos:start="53:17" pos:end="53:41">= <expr pos:start="53:19" pos:end="53:41"><call pos:start="53:19" pos:end="53:41"><name pos:start="53:19" pos:end="53:27">regime_el</name><argument_list pos:start="53:28" pos:end="53:41">(<argument pos:start="53:29" pos:end="53:31"><expr pos:start="53:29" pos:end="53:31"><name pos:start="53:29" pos:end="53:31">env</name></expr></argument>, <argument pos:start="53:34" pos:end="53:40"><expr pos:start="53:34" pos:end="53:40"><name pos:start="53:34" pos:end="53:40">mmu_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:28"><decl pos:start="55:5" pos:end="55:27"><type pos:start="55:5" pos:end="55:8"><name pos:start="55:5" pos:end="55:8">bool</name></type> <name pos:start="55:10" pos:end="55:20">ttbr1_valid</name> <init pos:start="55:22" pos:end="55:27">= <expr pos:start="55:24" pos:end="55:27"><name pos:start="55:24" pos:end="55:27">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:26"><decl pos:start="57:5" pos:end="57:25"><type pos:start="57:5" pos:end="57:12"><name pos:start="57:5" pos:end="57:12">uint64_t</name></type> <name pos:start="57:14" pos:end="57:25">descaddrmask</name></decl>;</decl_stmt>



    <comment type="block" pos:start="61:5" pos:end="71:7">/* TODO:

     * This code does not handle the different format TCR for VTCR_EL2.

     * This code also does not support shareability levels.

     * Attribute and permission bit handling should also be checked when adding

     * support for those page table walks.

     */</comment>

    <if_stmt pos:start="73:5" pos:end="131:5"><if pos:start="73:5" pos:end="117:5">if <condition pos:start="73:8" pos:end="73:32">(<expr pos:start="73:9" pos:end="73:31"><call pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:22">arm_el_is_aa64</name><argument_list pos:start="73:23" pos:end="73:31">(<argument pos:start="73:24" pos:end="73:26"><expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:26">env</name></expr></argument>, <argument pos:start="73:29" pos:end="73:30"><expr pos:start="73:29" pos:end="73:30"><name pos:start="73:29" pos:end="73:30">el</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:34" pos:end="117:5">{<block_content pos:start="75:9" pos:end="115:9">

        <expr_stmt pos:start="75:9" pos:end="75:18"><expr pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:13">level</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <literal type="number" pos:start="75:17" pos:end="75:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:21"><expr pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:15">va_size</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <literal type="number" pos:start="77:19" pos:end="77:20">64</literal></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="99:9"><if pos:start="79:9" pos:end="87:9">if <condition pos:start="79:12" pos:end="79:19">(<expr pos:start="79:13" pos:end="79:18"><name pos:start="79:13" pos:end="79:14">el</name> <operator pos:start="79:16" pos:end="79:16">&gt;</operator> <literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr>)</condition> <block pos:start="79:21" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:13">

            <if_stmt pos:start="81:13" pos:end="85:13"><if pos:start="81:13" pos:end="85:13">if <condition pos:start="81:16" pos:end="81:42">(<expr pos:start="81:17" pos:end="81:41"><name pos:start="81:17" pos:end="81:23">mmu_idx</name> <operator pos:start="81:25" pos:end="81:26">!=</operator> <name pos:start="81:28" pos:end="81:41">ARMMMUIdx_S2NS</name></expr>)</condition> <block pos:start="81:44" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:53">

                <expr_stmt pos:start="83:17" pos:end="83:53"><expr pos:start="83:17" pos:end="83:52"><name pos:start="83:17" pos:end="83:19">tbi</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <call pos:start="83:23" pos:end="83:52"><name pos:start="83:23" pos:end="83:31">extract64</name><argument_list pos:start="83:32" pos:end="83:52">(<argument pos:start="83:33" pos:end="83:44"><expr pos:start="83:33" pos:end="83:44"><name pos:start="83:33" pos:end="83:44"><name pos:start="83:33" pos:end="83:35">tcr</name><operator pos:start="83:36" pos:end="83:37">-&gt;</operator><name pos:start="83:38" pos:end="83:44">raw_tcr</name></name></expr></argument>, <argument pos:start="83:47" pos:end="83:48"><expr pos:start="83:47" pos:end="83:48"><literal type="number" pos:start="83:47" pos:end="83:48">20</literal></expr></argument>, <argument pos:start="83:51" pos:end="83:51"><expr pos:start="83:51" pos:end="83:51"><literal type="number" pos:start="83:51" pos:end="83:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="99:9">else <block pos:start="87:16" pos:end="99:9">{<block_content pos:start="89:13" pos:end="97:13">

            <if_stmt pos:start="89:13" pos:end="97:13"><if pos:start="89:13" pos:end="93:13">if <condition pos:start="89:16" pos:end="89:42">(<expr pos:start="89:17" pos:end="89:41"><call pos:start="89:17" pos:end="89:41"><name pos:start="89:17" pos:end="89:25">extract64</name><argument_list pos:start="89:26" pos:end="89:41">(<argument pos:start="89:27" pos:end="89:33"><expr pos:start="89:27" pos:end="89:33"><name pos:start="89:27" pos:end="89:33">address</name></expr></argument>, <argument pos:start="89:36" pos:end="89:37"><expr pos:start="89:36" pos:end="89:37"><literal type="number" pos:start="89:36" pos:end="89:37">55</literal></expr></argument>, <argument pos:start="89:40" pos:end="89:40"><expr pos:start="89:40" pos:end="89:40"><literal type="number" pos:start="89:40" pos:end="89:40">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:44" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:53">

                <expr_stmt pos:start="91:17" pos:end="91:53"><expr pos:start="91:17" pos:end="91:52"><name pos:start="91:17" pos:end="91:19">tbi</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="91:52"><name pos:start="91:23" pos:end="91:31">extract64</name><argument_list pos:start="91:32" pos:end="91:52">(<argument pos:start="91:33" pos:end="91:44"><expr pos:start="91:33" pos:end="91:44"><name pos:start="91:33" pos:end="91:44"><name pos:start="91:33" pos:end="91:35">tcr</name><operator pos:start="91:36" pos:end="91:37">-&gt;</operator><name pos:start="91:38" pos:end="91:44">raw_tcr</name></name></expr></argument>, <argument pos:start="91:47" pos:end="91:48"><expr pos:start="91:47" pos:end="91:48"><literal type="number" pos:start="91:47" pos:end="91:48">38</literal></expr></argument>, <argument pos:start="91:51" pos:end="91:51"><expr pos:start="91:51" pos:end="91:51"><literal type="number" pos:start="91:51" pos:end="91:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="93:15" pos:end="97:13">else <block pos:start="93:20" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:53">

                <expr_stmt pos:start="95:17" pos:end="95:53"><expr pos:start="95:17" pos:end="95:52"><name pos:start="95:17" pos:end="95:19">tbi</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="95:52"><name pos:start="95:23" pos:end="95:31">extract64</name><argument_list pos:start="95:32" pos:end="95:52">(<argument pos:start="95:33" pos:end="95:44"><expr pos:start="95:33" pos:end="95:44"><name pos:start="95:33" pos:end="95:44"><name pos:start="95:33" pos:end="95:35">tcr</name><operator pos:start="95:36" pos:end="95:37">-&gt;</operator><name pos:start="95:38" pos:end="95:44">raw_tcr</name></name></expr></argument>, <argument pos:start="95:47" pos:end="95:48"><expr pos:start="95:47" pos:end="95:48"><literal type="number" pos:start="95:47" pos:end="95:48">37</literal></expr></argument>, <argument pos:start="95:51" pos:end="95:51"><expr pos:start="95:51" pos:end="95:51"><literal type="number" pos:start="95:51" pos:end="95:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:17"><expr pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:11">tbi</name> <operator pos:start="101:13" pos:end="101:14">*=</operator> <literal type="number" pos:start="101:16" pos:end="101:16">8</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="105:9" pos:end="109:11">/* If we are in 64-bit EL2 or EL3 then there is no TTBR1, so mark it

         * invalid.

         */</comment>

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:19">(<expr pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:14">el</name> <operator pos:start="111:16" pos:end="111:16">&gt;</operator> <literal type="number" pos:start="111:18" pos:end="111:18">1</literal></expr>)</condition> <block pos:start="111:21" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:32">

            <expr_stmt pos:start="113:13" pos:end="113:32"><expr pos:start="113:13" pos:end="113:31"><name pos:start="113:13" pos:end="113:23">ttbr1_valid</name> <operator pos:start="113:25" pos:end="113:25">=</operator> <name pos:start="113:27" pos:end="113:31">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="117:7" pos:end="131:5">else <block pos:start="117:12" pos:end="131:5">{<block_content pos:start="119:9" pos:end="129:9">

        <expr_stmt pos:start="119:9" pos:end="119:18"><expr pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:13">level</name> <operator pos:start="119:15" pos:end="119:15">=</operator> <literal type="number" pos:start="119:17" pos:end="119:17">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:21"><expr pos:start="121:9" pos:end="121:20"><name pos:start="121:9" pos:end="121:15">va_size</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <literal type="number" pos:start="121:19" pos:end="121:20">32</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="123:9" pos:end="123:39">/* There is no TTBR1 for EL2 */</comment>

        <if_stmt pos:start="125:9" pos:end="129:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:20">(<expr pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:14">el</name> <operator pos:start="125:16" pos:end="125:17">==</operator> <literal type="number" pos:start="125:19" pos:end="125:19">2</literal></expr>)</condition> <block pos:start="125:22" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:32">

            <expr_stmt pos:start="127:13" pos:end="127:32"><expr pos:start="127:13" pos:end="127:31"><name pos:start="127:13" pos:end="127:23">ttbr1_valid</name> <operator pos:start="127:25" pos:end="127:25">=</operator> <name pos:start="127:27" pos:end="127:31">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="143:7">/* Determine whether this address is in the region controlled by

     * TTBR0 or TTBR1 (or if it is in neither region and should fault).

     * This is a Non-secure PL0/1 stage 1 translation, so controlled by

     * TTBCR/TTBR0/TTBR1 in accordance with ARM ARM DDI0406C table B-32:

     */</comment>

    <if_stmt pos:start="145:5" pos:end="185:5"><if pos:start="145:5" pos:end="155:5">if <condition pos:start="145:8" pos:end="145:22">(<expr pos:start="145:9" pos:end="145:21"><name pos:start="145:9" pos:end="145:15">va_size</name> <operator pos:start="145:17" pos:end="145:18">==</operator> <literal type="number" pos:start="145:20" pos:end="145:21">64</literal></expr>)</condition> <block pos:start="145:24" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:29">

        <comment type="block" pos:start="147:9" pos:end="147:35">/* AArch64 translation.  */</comment>

        <expr_stmt pos:start="149:9" pos:end="149:45"><expr pos:start="149:9" pos:end="149:44"><name pos:start="149:9" pos:end="149:12">t0sz</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:44"><name pos:start="149:16" pos:end="149:24">extract32</name><argument_list pos:start="149:25" pos:end="149:44">(<argument pos:start="149:26" pos:end="149:37"><expr pos:start="149:26" pos:end="149:37"><name pos:start="149:26" pos:end="149:37"><name pos:start="149:26" pos:end="149:28">tcr</name><operator pos:start="149:29" pos:end="149:30">-&gt;</operator><name pos:start="149:31" pos:end="149:37">raw_tcr</name></name></expr></argument>, <argument pos:start="149:40" pos:end="149:40"><expr pos:start="149:40" pos:end="149:40"><literal type="number" pos:start="149:40" pos:end="149:40">0</literal></expr></argument>, <argument pos:start="149:43" pos:end="149:43"><expr pos:start="149:43" pos:end="149:43"><literal type="number" pos:start="149:43" pos:end="149:43">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:29"><expr pos:start="151:9" pos:end="151:28"><name pos:start="151:9" pos:end="151:12">t0sz</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <call pos:start="151:16" pos:end="151:28"><name pos:start="151:16" pos:end="151:18">MIN</name><argument_list pos:start="151:19" pos:end="151:28">(<argument pos:start="151:20" pos:end="151:23"><expr pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:23">t0sz</name></expr></argument>, <argument pos:start="151:26" pos:end="151:27"><expr pos:start="151:26" pos:end="151:27"><literal type="number" pos:start="151:26" pos:end="151:27">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:29"><expr pos:start="153:9" pos:end="153:28"><name pos:start="153:9" pos:end="153:12">t0sz</name> <operator pos:start="153:14" pos:end="153:14">=</operator> <call pos:start="153:16" pos:end="153:28"><name pos:start="153:16" pos:end="153:18">MAX</name><argument_list pos:start="153:19" pos:end="153:28">(<argument pos:start="153:20" pos:end="153:23"><expr pos:start="153:20" pos:end="153:23"><name pos:start="153:20" pos:end="153:23">t0sz</name></expr></argument>, <argument pos:start="153:26" pos:end="153:27"><expr pos:start="153:26" pos:end="153:27"><literal type="number" pos:start="153:26" pos:end="153:27">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="155:7" pos:end="161:5">else if <condition pos:start="155:15" pos:end="155:41">(<expr pos:start="155:16" pos:end="155:40"><name pos:start="155:16" pos:end="155:22">mmu_idx</name> <operator pos:start="155:24" pos:end="155:25">!=</operator> <name pos:start="155:27" pos:end="155:40">ARMMMUIdx_S2NS</name></expr>)</condition> <block pos:start="155:43" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:45">

        <comment type="block" pos:start="157:9" pos:end="157:43">/* AArch32 stage 1 translation.  */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:45"><expr pos:start="159:9" pos:end="159:44"><name pos:start="159:9" pos:end="159:12">t0sz</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <call pos:start="159:16" pos:end="159:44"><name pos:start="159:16" pos:end="159:24">extract32</name><argument_list pos:start="159:25" pos:end="159:44">(<argument pos:start="159:26" pos:end="159:37"><expr pos:start="159:26" pos:end="159:37"><name pos:start="159:26" pos:end="159:37"><name pos:start="159:26" pos:end="159:28">tcr</name><operator pos:start="159:29" pos:end="159:30">-&gt;</operator><name pos:start="159:31" pos:end="159:37">raw_tcr</name></name></expr></argument>, <argument pos:start="159:40" pos:end="159:40"><expr pos:start="159:40" pos:end="159:40"><literal type="number" pos:start="159:40" pos:end="159:40">0</literal></expr></argument>, <argument pos:start="159:43" pos:end="159:43"><expr pos:start="159:43" pos:end="159:43"><literal type="number" pos:start="159:43" pos:end="159:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="161:7" pos:end="185:5">else <block pos:start="161:12" pos:end="185:5">{<block_content pos:start="165:9" pos:end="183:9">

        <comment type="block" pos:start="163:9" pos:end="163:43">/* AArch32 stage 2 translation.  */</comment>

        <decl_stmt pos:start="165:9" pos:end="165:50"><decl pos:start="165:9" pos:end="165:49"><type pos:start="165:9" pos:end="165:12"><name pos:start="165:9" pos:end="165:12">bool</name></type> <name pos:start="165:14" pos:end="165:17">sext</name> <init pos:start="165:19" pos:end="165:49">= <expr pos:start="165:21" pos:end="165:49"><call pos:start="165:21" pos:end="165:49"><name pos:start="165:21" pos:end="165:29">extract32</name><argument_list pos:start="165:30" pos:end="165:49">(<argument pos:start="165:31" pos:end="165:42"><expr pos:start="165:31" pos:end="165:42"><name pos:start="165:31" pos:end="165:42"><name pos:start="165:31" pos:end="165:33">tcr</name><operator pos:start="165:34" pos:end="165:35">-&gt;</operator><name pos:start="165:36" pos:end="165:42">raw_tcr</name></name></expr></argument>, <argument pos:start="165:45" pos:end="165:45"><expr pos:start="165:45" pos:end="165:45"><literal type="number" pos:start="165:45" pos:end="165:45">4</literal></expr></argument>, <argument pos:start="165:48" pos:end="165:48"><expr pos:start="165:48" pos:end="165:48"><literal type="number" pos:start="165:48" pos:end="165:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="167:9" pos:end="167:50"><decl pos:start="167:9" pos:end="167:49"><type pos:start="167:9" pos:end="167:12"><name pos:start="167:9" pos:end="167:12">bool</name></type> <name pos:start="167:14" pos:end="167:17">sign</name> <init pos:start="167:19" pos:end="167:49">= <expr pos:start="167:21" pos:end="167:49"><call pos:start="167:21" pos:end="167:49"><name pos:start="167:21" pos:end="167:29">extract32</name><argument_list pos:start="167:30" pos:end="167:49">(<argument pos:start="167:31" pos:end="167:42"><expr pos:start="167:31" pos:end="167:42"><name pos:start="167:31" pos:end="167:42"><name pos:start="167:31" pos:end="167:33">tcr</name><operator pos:start="167:34" pos:end="167:35">-&gt;</operator><name pos:start="167:36" pos:end="167:42">raw_tcr</name></name></expr></argument>, <argument pos:start="167:45" pos:end="167:45"><expr pos:start="167:45" pos:end="167:45"><literal type="number" pos:start="167:45" pos:end="167:45">3</literal></expr></argument>, <argument pos:start="167:48" pos:end="167:48"><expr pos:start="167:48" pos:end="167:48"><literal type="number" pos:start="167:48" pos:end="167:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:46"><expr pos:start="169:9" pos:end="169:45"><name pos:start="169:9" pos:end="169:12">t0sz</name> <operator pos:start="169:14" pos:end="169:14">=</operator> <call pos:start="169:16" pos:end="169:45"><name pos:start="169:16" pos:end="169:25">sextract32</name><argument_list pos:start="169:26" pos:end="169:45">(<argument pos:start="169:27" pos:end="169:38"><expr pos:start="169:27" pos:end="169:38"><name pos:start="169:27" pos:end="169:38"><name pos:start="169:27" pos:end="169:29">tcr</name><operator pos:start="169:30" pos:end="169:31">-&gt;</operator><name pos:start="169:32" pos:end="169:38">raw_tcr</name></name></expr></argument>, <argument pos:start="169:41" pos:end="169:41"><expr pos:start="169:41" pos:end="169:41"><literal type="number" pos:start="169:41" pos:end="169:41">0</literal></expr></argument>, <argument pos:start="169:44" pos:end="169:44"><expr pos:start="169:44" pos:end="169:44"><literal type="number" pos:start="169:44" pos:end="169:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="173:9" pos:end="175:60">/* If the sign-extend bit is not the same as t0sz[3], the result

         * is unpredictable. Flag this as a guest error.  */</comment>

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:25">(<expr pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:16">sign</name> <operator pos:start="177:18" pos:end="177:19">!=</operator> <name pos:start="177:21" pos:end="177:24">sext</name></expr>)</condition> <block pos:start="177:27" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:72">

            <expr_stmt pos:start="179:13" pos:end="181:72"><expr pos:start="179:13" pos:end="181:71"><call pos:start="179:13" pos:end="181:71"><name pos:start="179:13" pos:end="179:25">qemu_log_mask</name><argument_list pos:start="179:26" pos:end="181:71">(<argument pos:start="179:27" pos:end="179:41"><expr pos:start="179:27" pos:end="179:41"><name pos:start="179:27" pos:end="179:41">LOG_GUEST_ERROR</name></expr></argument>,

                          <argument pos:start="181:27" pos:end="181:70"><expr pos:start="181:27" pos:end="181:70"><literal type="string" pos:start="181:27" pos:end="181:70">"AArch32: VTCR.S / VTCR.T0SZ[3] missmatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:42"><expr pos:start="187:5" pos:end="187:41"><name pos:start="187:5" pos:end="187:8">t1sz</name> <operator pos:start="187:10" pos:end="187:10">=</operator> <call pos:start="187:12" pos:end="187:41"><name pos:start="187:12" pos:end="187:20">extract32</name><argument_list pos:start="187:21" pos:end="187:41">(<argument pos:start="187:22" pos:end="187:33"><expr pos:start="187:22" pos:end="187:33"><name pos:start="187:22" pos:end="187:33"><name pos:start="187:22" pos:end="187:24">tcr</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:33">raw_tcr</name></name></expr></argument>, <argument pos:start="187:36" pos:end="187:37"><expr pos:start="187:36" pos:end="187:37"><literal type="number" pos:start="187:36" pos:end="187:37">16</literal></expr></argument>, <argument pos:start="187:40" pos:end="187:40"><expr pos:start="187:40" pos:end="187:40"><literal type="number" pos:start="187:40" pos:end="187:40">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:22">(<expr pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:15">va_size</name> <operator pos:start="189:17" pos:end="189:18">==</operator> <literal type="number" pos:start="189:20" pos:end="189:21">64</literal></expr>)</condition> <block pos:start="189:24" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:29">

        <expr_stmt pos:start="191:9" pos:end="191:29"><expr pos:start="191:9" pos:end="191:28"><name pos:start="191:9" pos:end="191:12">t1sz</name> <operator pos:start="191:14" pos:end="191:14">=</operator> <call pos:start="191:16" pos:end="191:28"><name pos:start="191:16" pos:end="191:18">MIN</name><argument_list pos:start="191:19" pos:end="191:28">(<argument pos:start="191:20" pos:end="191:23"><expr pos:start="191:20" pos:end="191:23"><name pos:start="191:20" pos:end="191:23">t1sz</name></expr></argument>, <argument pos:start="191:26" pos:end="191:27"><expr pos:start="191:26" pos:end="191:27"><literal type="number" pos:start="191:26" pos:end="191:27">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:29"><expr pos:start="193:9" pos:end="193:28"><name pos:start="193:9" pos:end="193:12">t1sz</name> <operator pos:start="193:14" pos:end="193:14">=</operator> <call pos:start="193:16" pos:end="193:28"><name pos:start="193:16" pos:end="193:18">MAX</name><argument_list pos:start="193:19" pos:end="193:28">(<argument pos:start="193:20" pos:end="193:23"><expr pos:start="193:20" pos:end="193:23"><name pos:start="193:20" pos:end="193:23">t1sz</name></expr></argument>, <argument pos:start="193:26" pos:end="193:27"><expr pos:start="193:26" pos:end="193:27"><literal type="number" pos:start="193:26" pos:end="193:27">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="197:5" pos:end="231:5"><if pos:start="197:5" pos:end="203:5">if <condition pos:start="197:8" pos:end="197:64">(<expr pos:start="197:9" pos:end="197:63"><name pos:start="197:9" pos:end="197:12">t0sz</name> <operator pos:start="197:14" pos:end="197:15">&amp;&amp;</operator> <operator pos:start="197:17" pos:end="197:17">!</operator><call pos:start="197:18" pos:end="197:63"><name pos:start="197:18" pos:end="197:26">extract64</name><argument_list pos:start="197:27" pos:end="197:63">(<argument pos:start="197:28" pos:end="197:34"><expr pos:start="197:28" pos:end="197:34"><name pos:start="197:28" pos:end="197:34">address</name></expr></argument>, <argument pos:start="197:37" pos:end="197:50"><expr pos:start="197:37" pos:end="197:50"><name pos:start="197:37" pos:end="197:43">va_size</name> <operator pos:start="197:45" pos:end="197:45">-</operator> <name pos:start="197:47" pos:end="197:50">t0sz</name></expr></argument>, <argument pos:start="197:53" pos:end="197:62"><expr pos:start="197:53" pos:end="197:62"><name pos:start="197:53" pos:end="197:56">t0sz</name> <operator pos:start="197:58" pos:end="197:58">-</operator> <name pos:start="197:60" pos:end="197:62">tbi</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:66" pos:end="203:5">{<block_content pos:start="201:9" pos:end="201:24">

        <comment type="block" pos:start="199:9" pos:end="199:75">/* there is a ttbr0 region and we are in it (high bits all zero) */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:24"><expr pos:start="201:9" pos:end="201:23"><name pos:start="201:9" pos:end="201:19">ttbr_select</name> <operator pos:start="201:21" pos:end="201:21">=</operator> <literal type="number" pos:start="201:23" pos:end="201:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="203:7" pos:end="211:5">else if <condition pos:start="203:15" pos:end="205:64">(<expr pos:start="203:16" pos:end="205:63"><name pos:start="203:16" pos:end="203:26">ttbr1_valid</name> <operator pos:start="203:28" pos:end="203:29">&amp;&amp;</operator> <name pos:start="203:31" pos:end="203:34">t1sz</name> <operator pos:start="203:36" pos:end="203:37">&amp;&amp;</operator>

               <operator pos:start="205:16" pos:end="205:16">!</operator><call pos:start="205:17" pos:end="205:63"><name pos:start="205:17" pos:end="205:25">extract64</name><argument_list pos:start="205:26" pos:end="205:63">(<argument pos:start="205:27" pos:end="205:34"><expr pos:start="205:27" pos:end="205:34"><operator pos:start="205:27" pos:end="205:27">~</operator><name pos:start="205:28" pos:end="205:34">address</name></expr></argument>, <argument pos:start="205:37" pos:end="205:50"><expr pos:start="205:37" pos:end="205:50"><name pos:start="205:37" pos:end="205:43">va_size</name> <operator pos:start="205:45" pos:end="205:45">-</operator> <name pos:start="205:47" pos:end="205:50">t1sz</name></expr></argument>, <argument pos:start="205:53" pos:end="205:62"><expr pos:start="205:53" pos:end="205:62"><name pos:start="205:53" pos:end="205:56">t1sz</name> <operator pos:start="205:58" pos:end="205:58">-</operator> <name pos:start="205:60" pos:end="205:62">tbi</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:66" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:24">

        <comment type="block" pos:start="207:9" pos:end="207:74">/* there is a ttbr1 region and we are in it (high bits all one) */</comment>

        <expr_stmt pos:start="209:9" pos:end="209:24"><expr pos:start="209:9" pos:end="209:23"><name pos:start="209:9" pos:end="209:19">ttbr_select</name> <operator pos:start="209:21" pos:end="209:21">=</operator> <literal type="number" pos:start="209:23" pos:end="209:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="211:7" pos:end="217:5">else if <condition pos:start="211:15" pos:end="211:21">(<expr pos:start="211:16" pos:end="211:20"><operator pos:start="211:16" pos:end="211:16">!</operator><name pos:start="211:17" pos:end="211:20">t0sz</name></expr>)</condition> <block pos:start="211:23" pos:end="217:5">{<block_content pos:start="215:9" pos:end="215:24">

        <comment type="block" pos:start="213:9" pos:end="213:66">/* ttbr0 region is "everything not in the ttbr1 region" */</comment>

        <expr_stmt pos:start="215:9" pos:end="215:24"><expr pos:start="215:9" pos:end="215:23"><name pos:start="215:9" pos:end="215:19">ttbr_select</name> <operator pos:start="215:21" pos:end="215:21">=</operator> <literal type="number" pos:start="215:23" pos:end="215:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="217:7" pos:end="223:5">else if <condition pos:start="217:15" pos:end="217:36">(<expr pos:start="217:16" pos:end="217:35"><operator pos:start="217:16" pos:end="217:16">!</operator><name pos:start="217:17" pos:end="217:20">t1sz</name> <operator pos:start="217:22" pos:end="217:23">&amp;&amp;</operator> <name pos:start="217:25" pos:end="217:35">ttbr1_valid</name></expr>)</condition> <block pos:start="217:38" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:24">

        <comment type="block" pos:start="219:9" pos:end="219:66">/* ttbr1 region is "everything not in the ttbr0 region" */</comment>

        <expr_stmt pos:start="221:9" pos:end="221:24"><expr pos:start="221:9" pos:end="221:23"><name pos:start="221:9" pos:end="221:19">ttbr_select</name> <operator pos:start="221:21" pos:end="221:21">=</operator> <literal type="number" pos:start="221:23" pos:end="221:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="223:7" pos:end="231:5">else <block pos:start="223:12" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:22">

        <comment type="block" pos:start="225:9" pos:end="225:77">/* in the gap between the two regions, this is a Translation fault */</comment>

        <expr_stmt pos:start="227:9" pos:end="227:39"><expr pos:start="227:9" pos:end="227:38"><name pos:start="227:9" pos:end="227:18">fault_type</name> <operator pos:start="227:20" pos:end="227:20">=</operator> <name pos:start="227:22" pos:end="227:38">translation_fault</name></expr>;</expr_stmt>

        <goto pos:start="229:9" pos:end="229:22">goto <name pos:start="229:14" pos:end="229:21">do_fault</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="235:5" pos:end="247:7">/* Note that QEMU ignores shareability and cacheability attributes,

     * so we don't need to do anything with the SH, ORGN, IRGN fields

     * in the TTBCR.  Similarly, TTBCR:A1 selects whether we get the

     * ASID from TTBR0 or TTBR1, but QEMU's TLB doesn't currently

     * implement any ASID-like capability so we can ignore it (instead

     * we will always flush the TLB any time the ASID is changed).

     */</comment>

    <if_stmt pos:start="249:5" pos:end="307:5"><if pos:start="249:5" pos:end="277:5">if <condition pos:start="249:8" pos:end="249:25">(<expr pos:start="249:9" pos:end="249:24"><name pos:start="249:9" pos:end="249:19">ttbr_select</name> <operator pos:start="249:21" pos:end="249:22">==</operator> <literal type="number" pos:start="249:24" pos:end="249:24">0</literal></expr>)</condition> <block pos:start="249:27" pos:end="277:5">{<block_content pos:start="251:9" pos:end="275:9">

        <expr_stmt pos:start="251:9" pos:end="251:44"><expr pos:start="251:9" pos:end="251:43"><name pos:start="251:9" pos:end="251:12">ttbr</name> <operator pos:start="251:14" pos:end="251:14">=</operator> <call pos:start="251:16" pos:end="251:43"><name pos:start="251:16" pos:end="251:26">regime_ttbr</name><argument_list pos:start="251:27" pos:end="251:43">(<argument pos:start="251:28" pos:end="251:30"><expr pos:start="251:28" pos:end="251:30"><name pos:start="251:28" pos:end="251:30">env</name></expr></argument>, <argument pos:start="251:33" pos:end="251:39"><expr pos:start="251:33" pos:end="251:39"><name pos:start="251:33" pos:end="251:39">mmu_idx</name></expr></argument>, <argument pos:start="251:42" pos:end="251:42"><expr pos:start="251:42" pos:end="251:42"><literal type="number" pos:start="251:42" pos:end="251:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="253:9" pos:end="257:9"><if pos:start="253:9" pos:end="257:9">if <condition pos:start="253:12" pos:end="253:19">(<expr pos:start="253:13" pos:end="253:18"><name pos:start="253:13" pos:end="253:14">el</name> <operator pos:start="253:16" pos:end="253:16">&lt;</operator> <literal type="number" pos:start="253:18" pos:end="253:18">2</literal></expr>)</condition> <block pos:start="253:21" pos:end="257:9">{<block_content pos:start="255:13" pos:end="255:48">

            <expr_stmt pos:start="255:13" pos:end="255:48"><expr pos:start="255:13" pos:end="255:47"><name pos:start="255:13" pos:end="255:15">epd</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <call pos:start="255:19" pos:end="255:47"><name pos:start="255:19" pos:end="255:27">extract32</name><argument_list pos:start="255:28" pos:end="255:47">(<argument pos:start="255:29" pos:end="255:40"><expr pos:start="255:29" pos:end="255:40"><name pos:start="255:29" pos:end="255:40"><name pos:start="255:29" pos:end="255:31">tcr</name><operator pos:start="255:32" pos:end="255:33">-&gt;</operator><name pos:start="255:34" pos:end="255:40">raw_tcr</name></name></expr></argument>, <argument pos:start="255:43" pos:end="255:43"><expr pos:start="255:43" pos:end="255:43"><literal type="number" pos:start="255:43" pos:end="255:43">7</literal></expr></argument>, <argument pos:start="255:46" pos:end="255:46"><expr pos:start="255:46" pos:end="255:46"><literal type="number" pos:start="255:46" pos:end="255:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:35"><expr pos:start="259:9" pos:end="259:34"><name pos:start="259:9" pos:end="259:17">inputsize</name> <operator pos:start="259:19" pos:end="259:19">=</operator> <name pos:start="259:21" pos:end="259:27">va_size</name> <operator pos:start="259:29" pos:end="259:29">-</operator> <name pos:start="259:31" pos:end="259:34">t0sz</name></expr>;</expr_stmt>



        <expr_stmt pos:start="263:9" pos:end="263:44"><expr pos:start="263:9" pos:end="263:43"><name pos:start="263:9" pos:end="263:10">tg</name> <operator pos:start="263:12" pos:end="263:12">=</operator> <call pos:start="263:14" pos:end="263:43"><name pos:start="263:14" pos:end="263:22">extract32</name><argument_list pos:start="263:23" pos:end="263:43">(<argument pos:start="263:24" pos:end="263:35"><expr pos:start="263:24" pos:end="263:35"><name pos:start="263:24" pos:end="263:35"><name pos:start="263:24" pos:end="263:26">tcr</name><operator pos:start="263:27" pos:end="263:28">-&gt;</operator><name pos:start="263:29" pos:end="263:35">raw_tcr</name></name></expr></argument>, <argument pos:start="263:38" pos:end="263:39"><expr pos:start="263:38" pos:end="263:39"><literal type="number" pos:start="263:38" pos:end="263:39">14</literal></expr></argument>, <argument pos:start="263:42" pos:end="263:42"><expr pos:start="263:42" pos:end="263:42"><literal type="number" pos:start="263:42" pos:end="263:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="269:9"><if pos:start="265:9" pos:end="269:9">if <condition pos:start="265:12" pos:end="265:20">(<expr pos:start="265:13" pos:end="265:19"><name pos:start="265:13" pos:end="265:14">tg</name> <operator pos:start="265:16" pos:end="265:17">==</operator> <literal type="number" pos:start="265:19" pos:end="265:19">1</literal></expr>)</condition> <block pos:start="265:22" pos:end="269:9">{<block_content pos:start="267:13" pos:end="267:24"> <comment type="block" pos:start="265:24" pos:end="265:39">/* 64KB pages */</comment>

            <expr_stmt pos:start="267:13" pos:end="267:24"><expr pos:start="267:13" pos:end="267:23"><name pos:start="267:13" pos:end="267:18">stride</name> <operator pos:start="267:20" pos:end="267:20">=</operator> <literal type="number" pos:start="267:22" pos:end="267:23">13</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="271:9" pos:end="275:9"><if pos:start="271:9" pos:end="275:9">if <condition pos:start="271:12" pos:end="271:20">(<expr pos:start="271:13" pos:end="271:19"><name pos:start="271:13" pos:end="271:14">tg</name> <operator pos:start="271:16" pos:end="271:17">==</operator> <literal type="number" pos:start="271:19" pos:end="271:19">2</literal></expr>)</condition> <block pos:start="271:22" pos:end="275:9">{<block_content pos:start="273:13" pos:end="273:24"> <comment type="block" pos:start="271:24" pos:end="271:39">/* 16KB pages */</comment>

            <expr_stmt pos:start="273:13" pos:end="273:24"><expr pos:start="273:13" pos:end="273:23"><name pos:start="273:13" pos:end="273:18">stride</name> <operator pos:start="273:20" pos:end="273:20">=</operator> <literal type="number" pos:start="273:22" pos:end="273:23">11</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="277:7" pos:end="307:5">else <block pos:start="277:12" pos:end="307:5">{<block_content pos:start="281:9" pos:end="305:9">

        <comment type="block" pos:start="279:9" pos:end="279:54">/* We should only be here if TTBR1 is valid */</comment>

        <expr_stmt pos:start="281:9" pos:end="281:28"><expr pos:start="281:9" pos:end="281:27"><call pos:start="281:9" pos:end="281:27"><name pos:start="281:9" pos:end="281:14">assert</name><argument_list pos:start="281:15" pos:end="281:27">(<argument pos:start="281:16" pos:end="281:26"><expr pos:start="281:16" pos:end="281:26"><name pos:start="281:16" pos:end="281:26">ttbr1_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="285:9" pos:end="285:44"><expr pos:start="285:9" pos:end="285:43"><name pos:start="285:9" pos:end="285:12">ttbr</name> <operator pos:start="285:14" pos:end="285:14">=</operator> <call pos:start="285:16" pos:end="285:43"><name pos:start="285:16" pos:end="285:26">regime_ttbr</name><argument_list pos:start="285:27" pos:end="285:43">(<argument pos:start="285:28" pos:end="285:30"><expr pos:start="285:28" pos:end="285:30"><name pos:start="285:28" pos:end="285:30">env</name></expr></argument>, <argument pos:start="285:33" pos:end="285:39"><expr pos:start="285:33" pos:end="285:39"><name pos:start="285:33" pos:end="285:39">mmu_idx</name></expr></argument>, <argument pos:start="285:42" pos:end="285:42"><expr pos:start="285:42" pos:end="285:42"><literal type="number" pos:start="285:42" pos:end="285:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:45"><expr pos:start="287:9" pos:end="287:44"><name pos:start="287:9" pos:end="287:11">epd</name> <operator pos:start="287:13" pos:end="287:13">=</operator> <call pos:start="287:15" pos:end="287:44"><name pos:start="287:15" pos:end="287:23">extract32</name><argument_list pos:start="287:24" pos:end="287:44">(<argument pos:start="287:25" pos:end="287:36"><expr pos:start="287:25" pos:end="287:36"><name pos:start="287:25" pos:end="287:36"><name pos:start="287:25" pos:end="287:27">tcr</name><operator pos:start="287:28" pos:end="287:29">-&gt;</operator><name pos:start="287:30" pos:end="287:36">raw_tcr</name></name></expr></argument>, <argument pos:start="287:39" pos:end="287:40"><expr pos:start="287:39" pos:end="287:40"><literal type="number" pos:start="287:39" pos:end="287:40">23</literal></expr></argument>, <argument pos:start="287:43" pos:end="287:43"><expr pos:start="287:43" pos:end="287:43"><literal type="number" pos:start="287:43" pos:end="287:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:35"><expr pos:start="289:9" pos:end="289:34"><name pos:start="289:9" pos:end="289:17">inputsize</name> <operator pos:start="289:19" pos:end="289:19">=</operator> <name pos:start="289:21" pos:end="289:27">va_size</name> <operator pos:start="289:29" pos:end="289:29">-</operator> <name pos:start="289:31" pos:end="289:34">t1sz</name></expr>;</expr_stmt>



        <expr_stmt pos:start="293:9" pos:end="293:44"><expr pos:start="293:9" pos:end="293:43"><name pos:start="293:9" pos:end="293:10">tg</name> <operator pos:start="293:12" pos:end="293:12">=</operator> <call pos:start="293:14" pos:end="293:43"><name pos:start="293:14" pos:end="293:22">extract32</name><argument_list pos:start="293:23" pos:end="293:43">(<argument pos:start="293:24" pos:end="293:35"><expr pos:start="293:24" pos:end="293:35"><name pos:start="293:24" pos:end="293:35"><name pos:start="293:24" pos:end="293:26">tcr</name><operator pos:start="293:27" pos:end="293:28">-&gt;</operator><name pos:start="293:29" pos:end="293:35">raw_tcr</name></name></expr></argument>, <argument pos:start="293:38" pos:end="293:39"><expr pos:start="293:38" pos:end="293:39"><literal type="number" pos:start="293:38" pos:end="293:39">30</literal></expr></argument>, <argument pos:start="293:42" pos:end="293:42"><expr pos:start="293:42" pos:end="293:42"><literal type="number" pos:start="293:42" pos:end="293:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="295:9" pos:end="299:9"><if pos:start="295:9" pos:end="299:9">if <condition pos:start="295:12" pos:end="295:20">(<expr pos:start="295:13" pos:end="295:19"><name pos:start="295:13" pos:end="295:14">tg</name> <operator pos:start="295:16" pos:end="295:17">==</operator> <literal type="number" pos:start="295:19" pos:end="295:19">3</literal></expr>)</condition>  <block pos:start="295:23" pos:end="299:9">{<block_content pos:start="297:13" pos:end="297:24"> <comment type="block" pos:start="295:25" pos:end="295:40">/* 64KB pages */</comment>

            <expr_stmt pos:start="297:13" pos:end="297:24"><expr pos:start="297:13" pos:end="297:23"><name pos:start="297:13" pos:end="297:18">stride</name> <operator pos:start="297:20" pos:end="297:20">=</operator> <literal type="number" pos:start="297:22" pos:end="297:23">13</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="301:9" pos:end="305:9"><if pos:start="301:9" pos:end="305:9">if <condition pos:start="301:12" pos:end="301:20">(<expr pos:start="301:13" pos:end="301:19"><name pos:start="301:13" pos:end="301:14">tg</name> <operator pos:start="301:16" pos:end="301:17">==</operator> <literal type="number" pos:start="301:19" pos:end="301:19">1</literal></expr>)</condition> <block pos:start="301:22" pos:end="305:9">{<block_content pos:start="303:13" pos:end="303:24"> <comment type="block" pos:start="301:24" pos:end="301:39">/* 16KB pages */</comment>

            <expr_stmt pos:start="303:13" pos:end="303:24"><expr pos:start="303:13" pos:end="303:23"><name pos:start="303:13" pos:end="303:18">stride</name> <operator pos:start="303:20" pos:end="303:20">=</operator> <literal type="number" pos:start="303:22" pos:end="303:23">11</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="311:5" pos:end="315:7">/* Here we should have set up all the parameters for the translation:

     * va_size, inputsize, ttbr, epd, stride, tbi

     */</comment>



    <if_stmt pos:start="319:5" pos:end="329:5"><if pos:start="319:5" pos:end="329:5">if <condition pos:start="319:8" pos:end="319:12">(<expr pos:start="319:9" pos:end="319:11"><name pos:start="319:9" pos:end="319:11">epd</name></expr>)</condition> <block pos:start="319:14" pos:end="329:5">{<block_content pos:start="327:9" pos:end="327:22">

        <comment type="block" pos:start="321:9" pos:end="325:11">/* Translation table walk disabled =&gt; Translation fault on TLB miss

         * Note: This is always 0 on 64-bit EL2 and EL3.

         */</comment>

        <goto pos:start="327:9" pos:end="327:22">goto <name pos:start="327:14" pos:end="327:21">do_fault</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="333:5" pos:end="407:5"><if pos:start="333:5" pos:end="359:5">if <condition pos:start="333:8" pos:end="333:34">(<expr pos:start="333:9" pos:end="333:33"><name pos:start="333:9" pos:end="333:15">mmu_idx</name> <operator pos:start="333:17" pos:end="333:18">!=</operator> <name pos:start="333:20" pos:end="333:33">ARMMMUIdx_S2NS</name></expr>)</condition> <block pos:start="333:36" pos:end="359:5">{<block_content pos:start="357:9" pos:end="357:45">

        <comment type="block" pos:start="335:9" pos:end="355:11">/* The starting level depends on the virtual address size (which can

         * be up to 48 bits) and the translation granule size. It indicates

         * the number of strides (stride bits at a time) needed to

         * consume the bits of the input address. In the pseudocode this is:

         *  level = 4 - RoundUp((inputsize - grainsize) / stride)

         * where their 'inputsize' is our 'inputsize', 'grainsize' is

         * our 'stride + 3' and 'stride' is our 'stride'.

         * Applying the usual "rounded up m/n is (m+n-1)/n" and simplifying:

         * = 4 - (inputsize - stride - 3 + stride - 1) / stride

         * = 4 - (inputsize - 4) / stride;

         */</comment>

        <expr_stmt pos:start="357:9" pos:end="357:45"><expr pos:start="357:9" pos:end="357:44"><name pos:start="357:9" pos:end="357:13">level</name> <operator pos:start="357:15" pos:end="357:15">=</operator> <literal type="number" pos:start="357:17" pos:end="357:19">4</literal> <operator pos:start="357:19" pos:end="357:19">-</operator> <operator pos:start="357:21" pos:end="357:21">(</operator><name pos:start="357:22" pos:end="357:30">inputsize</name> <operator pos:start="357:32" pos:end="357:32">-</operator> <literal type="number" pos:start="357:34" pos:end="357:34">4</literal><operator pos:start="357:35" pos:end="357:35">)</operator> <operator pos:start="357:37" pos:end="357:37">/</operator> <name pos:start="357:39" pos:end="357:44">stride</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="359:7" pos:end="407:5">else <block pos:start="359:12" pos:end="407:5">{<block_content pos:start="367:9" pos:end="405:27">

        <comment type="block" pos:start="361:9" pos:end="365:11">/* For stage 2 translations the starting level is specified by the

         * VTCR_EL2.SL0 field (whose interpretation depends on the page size)

         */</comment>

        <decl_stmt pos:start="367:9" pos:end="367:53"><decl pos:start="367:9" pos:end="367:52"><type pos:start="367:9" pos:end="367:16"><name pos:start="367:9" pos:end="367:16">uint32_t</name></type> <name pos:start="367:18" pos:end="367:20">sl0</name> <init pos:start="367:22" pos:end="367:52">= <expr pos:start="367:24" pos:end="367:52"><call pos:start="367:24" pos:end="367:52"><name pos:start="367:24" pos:end="367:32">extract32</name><argument_list pos:start="367:33" pos:end="367:52">(<argument pos:start="367:34" pos:end="367:45"><expr pos:start="367:34" pos:end="367:45"><name pos:start="367:34" pos:end="367:45"><name pos:start="367:34" pos:end="367:36">tcr</name><operator pos:start="367:37" pos:end="367:38">-&gt;</operator><name pos:start="367:39" pos:end="367:45">raw_tcr</name></name></expr></argument>, <argument pos:start="367:48" pos:end="367:48"><expr pos:start="367:48" pos:end="367:48"><literal type="number" pos:start="367:48" pos:end="367:48">6</literal></expr></argument>, <argument pos:start="367:51" pos:end="367:51"><expr pos:start="367:51" pos:end="367:51"><literal type="number" pos:start="367:51" pos:end="367:51">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="369:9" pos:end="369:28"><decl pos:start="369:9" pos:end="369:27"><type pos:start="369:9" pos:end="369:16"><name pos:start="369:9" pos:end="369:16">uint32_t</name></type> <name pos:start="369:18" pos:end="369:27">startlevel</name></decl>;</decl_stmt>

        <decl_stmt pos:start="371:9" pos:end="371:16"><decl pos:start="371:9" pos:end="371:15"><type pos:start="371:9" pos:end="371:12"><name pos:start="371:9" pos:end="371:12">bool</name></type> <name pos:start="371:14" pos:end="371:15">ok</name></decl>;</decl_stmt>



        <if_stmt pos:start="375:9" pos:end="387:9"><if pos:start="375:9" pos:end="381:9">if <condition pos:start="375:12" pos:end="375:41">(<expr pos:start="375:13" pos:end="375:40"><name pos:start="375:13" pos:end="375:19">va_size</name> <operator pos:start="375:21" pos:end="375:22">==</operator> <literal type="number" pos:start="375:24" pos:end="375:25">32</literal> <operator pos:start="375:27" pos:end="375:28">||</operator> <name pos:start="375:30" pos:end="375:35">stride</name> <operator pos:start="375:37" pos:end="375:38">==</operator> <literal type="number" pos:start="375:40" pos:end="375:40">9</literal></expr>)</condition> <block pos:start="375:43" pos:end="381:9">{<block_content pos:start="379:13" pos:end="379:33">

            <comment type="block" pos:start="377:13" pos:end="377:38">/* AArch32 or 4KB pages */</comment>

            <expr_stmt pos:start="379:13" pos:end="379:33"><expr pos:start="379:13" pos:end="379:32"><name pos:start="379:13" pos:end="379:22">startlevel</name> <operator pos:start="379:24" pos:end="379:24">=</operator> <literal type="number" pos:start="379:26" pos:end="379:28">2</literal> <operator pos:start="379:28" pos:end="379:28">-</operator> <name pos:start="379:30" pos:end="379:32">sl0</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="381:11" pos:end="387:9">else <block pos:start="381:16" pos:end="387:9">{<block_content pos:start="385:13" pos:end="385:33">

            <comment type="block" pos:start="383:13" pos:end="383:36">/* 16KB or 64KB pages */</comment>

            <expr_stmt pos:start="385:13" pos:end="385:33"><expr pos:start="385:13" pos:end="385:32"><name pos:start="385:13" pos:end="385:22">startlevel</name> <operator pos:start="385:24" pos:end="385:24">=</operator> <literal type="number" pos:start="385:26" pos:end="385:28">3</literal> <operator pos:start="385:28" pos:end="385:28">-</operator> <name pos:start="385:30" pos:end="385:32">sl0</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="391:9" pos:end="391:53">/* Check that the starting level is valid. */</comment>

        <expr_stmt pos:start="393:9" pos:end="395:51"><expr pos:start="393:9" pos:end="395:50"><name pos:start="393:9" pos:end="393:10">ok</name> <operator pos:start="393:12" pos:end="393:12">=</operator> <call pos:start="393:14" pos:end="395:50"><name pos:start="393:14" pos:end="393:31">check_s2_mmu_setup</name><argument_list pos:start="393:32" pos:end="395:50">(<argument pos:start="393:33" pos:end="393:35"><expr pos:start="393:33" pos:end="393:35"><name pos:start="393:33" pos:end="393:35">cpu</name></expr></argument>, <argument pos:start="393:38" pos:end="393:50"><expr pos:start="393:38" pos:end="393:50"><name pos:start="393:38" pos:end="393:44">va_size</name> <operator pos:start="393:46" pos:end="393:47">==</operator> <literal type="number" pos:start="393:49" pos:end="393:50">64</literal></expr></argument>, <argument pos:start="393:53" pos:end="393:62"><expr pos:start="393:53" pos:end="393:62"><name pos:start="393:53" pos:end="393:62">startlevel</name></expr></argument>,

                                <argument pos:start="395:33" pos:end="395:41"><expr pos:start="395:33" pos:end="395:41"><name pos:start="395:33" pos:end="395:41">inputsize</name></expr></argument>, <argument pos:start="395:44" pos:end="395:49"><expr pos:start="395:44" pos:end="395:49"><name pos:start="395:44" pos:end="395:49">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="397:9" pos:end="403:9"><if pos:start="397:9" pos:end="403:9">if <condition pos:start="397:12" pos:end="397:16">(<expr pos:start="397:13" pos:end="397:15"><operator pos:start="397:13" pos:end="397:13">!</operator><name pos:start="397:14" pos:end="397:15">ok</name></expr>)</condition> <block pos:start="397:18" pos:end="403:9">{<block_content pos:start="399:13" pos:end="401:26">

            <expr_stmt pos:start="399:13" pos:end="399:43"><expr pos:start="399:13" pos:end="399:42"><name pos:start="399:13" pos:end="399:22">fault_type</name> <operator pos:start="399:24" pos:end="399:24">=</operator> <name pos:start="399:26" pos:end="399:42">translation_fault</name></expr>;</expr_stmt>

            <goto pos:start="401:13" pos:end="401:26">goto <name pos:start="401:18" pos:end="401:25">do_fault</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="405:9" pos:end="405:27"><expr pos:start="405:9" pos:end="405:26"><name pos:start="405:9" pos:end="405:13">level</name> <operator pos:start="405:15" pos:end="405:15">=</operator> <name pos:start="405:17" pos:end="405:26">startlevel</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="411:5" pos:end="411:53"><expr pos:start="411:5" pos:end="411:52"><name pos:start="411:5" pos:end="411:23">indexmask_grainsize</name> <operator pos:start="411:25" pos:end="411:25">=</operator> <operator pos:start="411:27" pos:end="411:27">(</operator><literal type="number" pos:start="411:28" pos:end="411:31">1ULL</literal> <operator pos:start="411:33" pos:end="411:34">&lt;&lt;</operator> <operator pos:start="411:36" pos:end="411:36">(</operator><name pos:start="411:37" pos:end="411:42">stride</name> <operator pos:start="411:44" pos:end="411:44">+</operator> <literal type="number" pos:start="411:46" pos:end="411:46">3</literal><operator pos:start="411:47" pos:end="411:47">)</operator><operator pos:start="411:48" pos:end="411:48">)</operator> <operator pos:start="411:50" pos:end="411:50">-</operator> <literal type="number" pos:start="411:52" pos:end="411:52">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="413:5" pos:end="413:67"><expr pos:start="413:5" pos:end="413:66"><name pos:start="413:5" pos:end="413:13">indexmask</name> <operator pos:start="413:15" pos:end="413:15">=</operator> <operator pos:start="413:17" pos:end="413:17">(</operator><literal type="number" pos:start="413:18" pos:end="413:21">1ULL</literal> <operator pos:start="413:23" pos:end="413:24">&lt;&lt;</operator> <operator pos:start="413:26" pos:end="413:26">(</operator><name pos:start="413:27" pos:end="413:35">inputsize</name> <operator pos:start="413:37" pos:end="413:37">-</operator> <operator pos:start="413:39" pos:end="413:39">(</operator><name pos:start="413:40" pos:end="413:45">stride</name> <operator pos:start="413:47" pos:end="413:47">*</operator> <operator pos:start="413:49" pos:end="413:49">(</operator><literal type="number" pos:start="413:50" pos:end="413:52">4</literal> <operator pos:start="413:52" pos:end="413:52">-</operator> <name pos:start="413:54" pos:end="413:58">level</name><operator pos:start="413:59" pos:end="413:59">)</operator><operator pos:start="413:60" pos:end="413:60">)</operator><operator pos:start="413:61" pos:end="413:61">)</operator><operator pos:start="413:62" pos:end="413:62">)</operator> <operator pos:start="413:64" pos:end="413:64">-</operator> <literal type="number" pos:start="413:66" pos:end="413:66">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="417:5" pos:end="417:66">/* Now we can extract the actual base address from the TTBR */</comment>

    <expr_stmt pos:start="419:5" pos:end="419:38"><expr pos:start="419:5" pos:end="419:37"><name pos:start="419:5" pos:end="419:12">descaddr</name> <operator pos:start="419:14" pos:end="419:14">=</operator> <call pos:start="419:16" pos:end="419:37"><name pos:start="419:16" pos:end="419:24">extract64</name><argument_list pos:start="419:25" pos:end="419:37">(<argument pos:start="419:26" pos:end="419:29"><expr pos:start="419:26" pos:end="419:29"><name pos:start="419:26" pos:end="419:29">ttbr</name></expr></argument>, <argument pos:start="419:32" pos:end="419:32"><expr pos:start="419:32" pos:end="419:32"><literal type="number" pos:start="419:32" pos:end="419:32">0</literal></expr></argument>, <argument pos:start="419:35" pos:end="419:36"><expr pos:start="419:35" pos:end="419:36"><literal type="number" pos:start="419:35" pos:end="419:36">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="421:5" pos:end="421:27"><expr pos:start="421:5" pos:end="421:26"><name pos:start="421:5" pos:end="421:12">descaddr</name> <operator pos:start="421:14" pos:end="421:15">&amp;=</operator> <operator pos:start="421:17" pos:end="421:17">~</operator><name pos:start="421:18" pos:end="421:26">indexmask</name></expr>;</expr_stmt>



    <comment type="block" pos:start="425:5" pos:end="433:7">/* The address field in the descriptor goes up to bit 39 for ARMv7

     * but up to bit 47 for ARMv8, but we use the descaddrmask

     * up to bit 39 for AArch32, because we don't need other bits in that case

     * to construct next descriptor address (anyway they should be all zeroes).

     */</comment>

    <expr_stmt pos:start="435:5" pos:end="437:40"><expr pos:start="435:5" pos:end="437:39"><name pos:start="435:5" pos:end="435:16">descaddrmask</name> <operator pos:start="435:18" pos:end="435:18">=</operator> <operator pos:start="435:20" pos:end="435:20">(</operator><operator pos:start="435:21" pos:end="435:21">(</operator><literal type="number" pos:start="435:22" pos:end="435:25">1ull</literal> <operator pos:start="435:27" pos:end="435:28">&lt;&lt;</operator> <operator pos:start="435:30" pos:end="435:30">(</operator><ternary pos:start="435:31" pos:end="435:53"><condition pos:start="435:31" pos:end="435:45"><expr pos:start="435:31" pos:end="435:43"><name pos:start="435:31" pos:end="435:37">va_size</name> <operator pos:start="435:39" pos:end="435:40">==</operator> <literal type="number" pos:start="435:42" pos:end="435:43">64</literal></expr> ?</condition><then pos:start="435:47" pos:end="435:48"> <expr pos:start="435:47" pos:end="435:48"><literal type="number" pos:start="435:47" pos:end="435:48">48</literal></expr> </then><else pos:start="435:50" pos:end="435:53">: <expr pos:start="435:52" pos:end="435:53"><literal type="number" pos:start="435:52" pos:end="435:53">40</literal></expr></else></ternary><operator pos:start="435:54" pos:end="435:54">)</operator><operator pos:start="435:55" pos:end="435:55">)</operator> <operator pos:start="435:57" pos:end="435:57">-</operator> <literal type="number" pos:start="435:59" pos:end="435:59">1</literal><operator pos:start="435:60" pos:end="435:60">)</operator> <operator pos:start="435:62" pos:end="435:62">&amp;</operator>

                   <operator pos:start="437:20" pos:end="437:20">~</operator><name pos:start="437:21" pos:end="437:39">indexmask_grainsize</name></expr>;</expr_stmt>



    <comment type="block" pos:start="441:5" pos:end="449:7">/* Secure accesses start with the page table in secure memory and

     * can be downgraded to non-secure at any step. Non-secure accesses

     * remain non-secure. We implement this by just ORing in the NSTable/NS

     * bits at each step.

     */</comment>

    <expr_stmt pos:start="451:5" pos:end="451:63"><expr pos:start="451:5" pos:end="451:62"><name pos:start="451:5" pos:end="451:14">tableattrs</name> <operator pos:start="451:16" pos:end="451:16">=</operator> <ternary pos:start="451:18" pos:end="451:62"><condition pos:start="451:18" pos:end="451:49"><expr pos:start="451:18" pos:end="451:47"><call pos:start="451:18" pos:end="451:47"><name pos:start="451:18" pos:end="451:33">regime_is_secure</name><argument_list pos:start="451:34" pos:end="451:47">(<argument pos:start="451:35" pos:end="451:37"><expr pos:start="451:35" pos:end="451:37"><name pos:start="451:35" pos:end="451:37">env</name></expr></argument>, <argument pos:start="451:40" pos:end="451:46"><expr pos:start="451:40" pos:end="451:46"><name pos:start="451:40" pos:end="451:46">mmu_idx</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="451:51" pos:end="451:51"> <expr pos:start="451:51" pos:end="451:51"><literal type="number" pos:start="451:51" pos:end="451:51">0</literal></expr> </then><else pos:start="451:53" pos:end="451:62">: <expr pos:start="451:55" pos:end="451:62"><operator pos:start="451:55" pos:end="451:55">(</operator><literal type="number" pos:start="451:56" pos:end="451:56">1</literal> <operator pos:start="451:58" pos:end="451:59">&lt;&lt;</operator> <literal type="number" pos:start="451:61" pos:end="451:61">4</literal><operator pos:start="451:62" pos:end="451:62">)</operator></expr></else></ternary></expr>;</expr_stmt>

    <for pos:start="453:5" pos:end="563:5">for <control pos:start="453:9" pos:end="453:12">(<init pos:start="453:10" pos:end="453:10">;</init><condition pos:start="453:11" pos:end="453:11">;</condition><incr/>)</control> <block pos:start="453:14" pos:end="563:5">{<block_content pos:start="455:9" pos:end="561:14">

        <decl_stmt pos:start="455:9" pos:end="455:28"><decl pos:start="455:9" pos:end="455:27"><type pos:start="455:9" pos:end="455:16"><name pos:start="455:9" pos:end="455:16">uint64_t</name></type> <name pos:start="455:18" pos:end="455:27">descriptor</name></decl>;</decl_stmt>

        <decl_stmt pos:start="457:9" pos:end="457:21"><decl pos:start="457:9" pos:end="457:20"><type pos:start="457:9" pos:end="457:12"><name pos:start="457:9" pos:end="457:12">bool</name></type> <name pos:start="457:14" pos:end="457:20">nstable</name></decl>;</decl_stmt>



        <expr_stmt pos:start="461:9" pos:end="461:68"><expr pos:start="461:9" pos:end="461:67"><name pos:start="461:9" pos:end="461:16">descaddr</name> <operator pos:start="461:18" pos:end="461:19">|=</operator> <operator pos:start="461:21" pos:end="461:21">(</operator><name pos:start="461:22" pos:end="461:28">address</name> <operator pos:start="461:30" pos:end="461:31">&gt;&gt;</operator> <operator pos:start="461:33" pos:end="461:33">(</operator><name pos:start="461:34" pos:end="461:39">stride</name> <operator pos:start="461:41" pos:end="461:41">*</operator> <operator pos:start="461:43" pos:end="461:43">(</operator><literal type="number" pos:start="461:44" pos:end="461:46">4</literal> <operator pos:start="461:46" pos:end="461:46">-</operator> <name pos:start="461:48" pos:end="461:52">level</name><operator pos:start="461:53" pos:end="461:53">)</operator><operator pos:start="461:54" pos:end="461:54">)</operator><operator pos:start="461:55" pos:end="461:55">)</operator> <operator pos:start="461:57" pos:end="461:57">&amp;</operator> <name pos:start="461:59" pos:end="461:67">indexmask</name></expr>;</expr_stmt>

        <expr_stmt pos:start="463:9" pos:end="463:26"><expr pos:start="463:9" pos:end="463:25"><name pos:start="463:9" pos:end="463:16">descaddr</name> <operator pos:start="463:18" pos:end="463:19">&amp;=</operator> <operator pos:start="463:21" pos:end="463:21">~</operator><literal type="number" pos:start="463:22" pos:end="463:25">7ULL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="465:9" pos:end="465:46"><expr pos:start="465:9" pos:end="465:45"><name pos:start="465:9" pos:end="465:15">nstable</name> <operator pos:start="465:17" pos:end="465:17">=</operator> <call pos:start="465:19" pos:end="465:45"><name pos:start="465:19" pos:end="465:27">extract32</name><argument_list pos:start="465:28" pos:end="465:45">(<argument pos:start="465:29" pos:end="465:38"><expr pos:start="465:29" pos:end="465:38"><name pos:start="465:29" pos:end="465:38">tableattrs</name></expr></argument>, <argument pos:start="465:41" pos:end="465:41"><expr pos:start="465:41" pos:end="465:41"><literal type="number" pos:start="465:41" pos:end="465:41">4</literal></expr></argument>, <argument pos:start="465:44" pos:end="465:44"><expr pos:start="465:44" pos:end="465:44"><literal type="number" pos:start="465:44" pos:end="465:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:75"><expr pos:start="467:9" pos:end="467:74"><name pos:start="467:9" pos:end="467:18">descriptor</name> <operator pos:start="467:20" pos:end="467:20">=</operator> <call pos:start="467:22" pos:end="467:74"><name pos:start="467:22" pos:end="467:32">arm_ldq_ptw</name><argument_list pos:start="467:33" pos:end="467:74">(<argument pos:start="467:34" pos:end="467:35"><expr pos:start="467:34" pos:end="467:35"><name pos:start="467:34" pos:end="467:35">cs</name></expr></argument>, <argument pos:start="467:38" pos:end="467:45"><expr pos:start="467:38" pos:end="467:45"><name pos:start="467:38" pos:end="467:45">descaddr</name></expr></argument>, <argument pos:start="467:48" pos:end="467:55"><expr pos:start="467:48" pos:end="467:55"><operator pos:start="467:48" pos:end="467:48">!</operator><name pos:start="467:49" pos:end="467:55">nstable</name></expr></argument>, <argument pos:start="467:58" pos:end="467:64"><expr pos:start="467:58" pos:end="467:64"><name pos:start="467:58" pos:end="467:64">mmu_idx</name></expr></argument>, <argument pos:start="467:67" pos:end="467:69"><expr pos:start="467:67" pos:end="467:69"><name pos:start="467:67" pos:end="467:69">fsr</name></expr></argument>, <argument pos:start="467:72" pos:end="467:73"><expr pos:start="467:72" pos:end="467:73"><name pos:start="467:72" pos:end="467:73">fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="469:9" pos:end="473:9"><if pos:start="469:9" pos:end="473:9">if <condition pos:start="469:12" pos:end="469:22">(<expr pos:start="469:13" pos:end="469:21"><name pos:start="469:13" pos:end="469:21"><name pos:start="469:13" pos:end="469:14">fi</name><operator pos:start="469:15" pos:end="469:16">-&gt;</operator><name pos:start="469:17" pos:end="469:21">s1ptw</name></name></expr>)</condition> <block pos:start="469:24" pos:end="473:9">{<block_content pos:start="471:13" pos:end="471:26">

            <goto pos:start="471:13" pos:end="471:26">goto <name pos:start="471:18" pos:end="471:25">do_fault</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="477:9" pos:end="485:9"><if pos:start="477:9" pos:end="485:9">if <condition pos:start="477:12" pos:end="479:48">(<expr pos:start="477:13" pos:end="479:47"><operator pos:start="477:13" pos:end="477:13">!</operator><operator pos:start="477:14" pos:end="477:14">(</operator><name pos:start="477:15" pos:end="477:24">descriptor</name> <operator pos:start="477:26" pos:end="477:26">&amp;</operator> <literal type="number" pos:start="477:28" pos:end="477:28">1</literal><operator pos:start="477:29" pos:end="477:29">)</operator> <operator pos:start="477:31" pos:end="477:32">||</operator>

            <operator pos:start="479:13" pos:end="479:13">(</operator><operator pos:start="479:14" pos:end="479:14">!</operator><operator pos:start="479:15" pos:end="479:15">(</operator><name pos:start="479:16" pos:end="479:25">descriptor</name> <operator pos:start="479:27" pos:end="479:27">&amp;</operator> <literal type="number" pos:start="479:29" pos:end="479:29">2</literal><operator pos:start="479:30" pos:end="479:30">)</operator> <operator pos:start="479:32" pos:end="479:33">&amp;&amp;</operator> <operator pos:start="479:35" pos:end="479:35">(</operator><name pos:start="479:36" pos:end="479:40">level</name> <operator pos:start="479:42" pos:end="479:43">==</operator> <literal type="number" pos:start="479:45" pos:end="479:45">3</literal><operator pos:start="479:46" pos:end="479:46">)</operator><operator pos:start="479:47" pos:end="479:47">)</operator></expr>)</condition> <block pos:start="479:50" pos:end="485:9">{<block_content pos:start="483:13" pos:end="483:26">

            <comment type="block" pos:start="481:13" pos:end="481:59">/* Invalid, or the Reserved level 3 encoding */</comment>

            <goto pos:start="483:13" pos:end="483:26">goto <name pos:start="483:18" pos:end="483:25">do_fault</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="487:9" pos:end="487:45"><expr pos:start="487:9" pos:end="487:44"><name pos:start="487:9" pos:end="487:16">descaddr</name> <operator pos:start="487:18" pos:end="487:18">=</operator> <name pos:start="487:20" pos:end="487:29">descriptor</name> <operator pos:start="487:31" pos:end="487:31">&amp;</operator> <name pos:start="487:33" pos:end="487:44">descaddrmask</name></expr>;</expr_stmt>



        <if_stmt pos:start="491:9" pos:end="511:9"><if pos:start="491:9" pos:end="511:9">if <condition pos:start="491:12" pos:end="491:44">(<expr pos:start="491:13" pos:end="491:43"><operator pos:start="491:13" pos:end="491:13">(</operator><name pos:start="491:14" pos:end="491:23">descriptor</name> <operator pos:start="491:25" pos:end="491:25">&amp;</operator> <literal type="number" pos:start="491:27" pos:end="491:27">2</literal><operator pos:start="491:28" pos:end="491:28">)</operator> <operator pos:start="491:30" pos:end="491:31">&amp;&amp;</operator> <operator pos:start="491:33" pos:end="491:33">(</operator><name pos:start="491:34" pos:end="491:38">level</name> <operator pos:start="491:40" pos:end="491:40">&lt;</operator> <literal type="number" pos:start="491:42" pos:end="491:42">3</literal><operator pos:start="491:43" pos:end="491:43">)</operator></expr>)</condition> <block pos:start="491:46" pos:end="511:9">{<block_content pos:start="503:13" pos:end="509:21">

            <comment type="block" pos:start="493:13" pos:end="501:15">/* Table entry. The top five bits are attributes which  may

             * propagate down through lower levels of the table (and

             * which are all arranged so that 0 means "no effect", so

             * we can gather them up by ORing in the bits at each level).

             */</comment>

            <expr_stmt pos:start="503:13" pos:end="503:55"><expr pos:start="503:13" pos:end="503:54"><name pos:start="503:13" pos:end="503:22">tableattrs</name> <operator pos:start="503:24" pos:end="503:25">|=</operator> <call pos:start="503:27" pos:end="503:54"><name pos:start="503:27" pos:end="503:35">extract64</name><argument_list pos:start="503:36" pos:end="503:54">(<argument pos:start="503:37" pos:end="503:46"><expr pos:start="503:37" pos:end="503:46"><name pos:start="503:37" pos:end="503:46">descriptor</name></expr></argument>, <argument pos:start="503:49" pos:end="503:50"><expr pos:start="503:49" pos:end="503:50"><literal type="number" pos:start="503:49" pos:end="503:50">59</literal></expr></argument>, <argument pos:start="503:53" pos:end="503:53"><expr pos:start="503:53" pos:end="503:53"><literal type="number" pos:start="503:53" pos:end="503:53">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="505:13" pos:end="505:20"><expr pos:start="505:13" pos:end="505:19"><name pos:start="505:13" pos:end="505:17">level</name><operator pos:start="505:18" pos:end="505:19">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:44"><expr pos:start="507:13" pos:end="507:43"><name pos:start="507:13" pos:end="507:21">indexmask</name> <operator pos:start="507:23" pos:end="507:23">=</operator> <name pos:start="507:25" pos:end="507:43">indexmask_grainsize</name></expr>;</expr_stmt>

            <continue pos:start="509:13" pos:end="509:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="513:9" pos:end="519:11">/* Block entry at level 1 or 2, or page entry at level 3.

         * These are basically the same thing, although the number

         * of bits we pull in from the vaddr varies.

         */</comment>

        <expr_stmt pos:start="521:9" pos:end="521:59"><expr pos:start="521:9" pos:end="521:58"><name pos:start="521:9" pos:end="521:17">page_size</name> <operator pos:start="521:19" pos:end="521:19">=</operator> <operator pos:start="521:21" pos:end="521:21">(</operator><literal type="number" pos:start="521:22" pos:end="521:25">1ULL</literal> <operator pos:start="521:27" pos:end="521:28">&lt;&lt;</operator> <operator pos:start="521:30" pos:end="521:30">(</operator><operator pos:start="521:31" pos:end="521:31">(</operator><name pos:start="521:32" pos:end="521:37">stride</name> <operator pos:start="521:39" pos:end="521:39">*</operator> <operator pos:start="521:41" pos:end="521:41">(</operator><literal type="number" pos:start="521:42" pos:end="521:44">4</literal> <operator pos:start="521:44" pos:end="521:44">-</operator> <name pos:start="521:46" pos:end="521:50">level</name><operator pos:start="521:51" pos:end="521:51">)</operator><operator pos:start="521:52" pos:end="521:52">)</operator> <operator pos:start="521:54" pos:end="521:54">+</operator> <literal type="number" pos:start="521:56" pos:end="521:56">3</literal><operator pos:start="521:57" pos:end="521:57">)</operator><operator pos:start="521:58" pos:end="521:58">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="523:9" pos:end="523:48"><expr pos:start="523:9" pos:end="523:47"><name pos:start="523:9" pos:end="523:16">descaddr</name> <operator pos:start="523:18" pos:end="523:19">|=</operator> <operator pos:start="523:21" pos:end="523:21">(</operator><name pos:start="523:22" pos:end="523:28">address</name> <operator pos:start="523:30" pos:end="523:30">&amp;</operator> <operator pos:start="523:32" pos:end="523:32">(</operator><name pos:start="523:33" pos:end="523:41">page_size</name> <operator pos:start="523:43" pos:end="523:43">-</operator> <literal type="number" pos:start="523:45" pos:end="523:45">1</literal><operator pos:start="523:46" pos:end="523:46">)</operator><operator pos:start="523:47" pos:end="523:47">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="525:9" pos:end="525:52">/* Extract attributes from the descriptor */</comment>

        <expr_stmt pos:start="527:9" pos:end="529:52"><expr pos:start="527:9" pos:end="529:51"><name pos:start="527:9" pos:end="527:13">attrs</name> <operator pos:start="527:15" pos:end="527:15">=</operator> <call pos:start="527:17" pos:end="527:44"><name pos:start="527:17" pos:end="527:25">extract64</name><argument_list pos:start="527:26" pos:end="527:44">(<argument pos:start="527:27" pos:end="527:36"><expr pos:start="527:27" pos:end="527:36"><name pos:start="527:27" pos:end="527:36">descriptor</name></expr></argument>, <argument pos:start="527:39" pos:end="527:39"><expr pos:start="527:39" pos:end="527:39"><literal type="number" pos:start="527:39" pos:end="527:39">2</literal></expr></argument>, <argument pos:start="527:42" pos:end="527:43"><expr pos:start="527:42" pos:end="527:43"><literal type="number" pos:start="527:42" pos:end="527:43">10</literal></expr></argument>)</argument_list></call>

            <operator pos:start="529:13" pos:end="529:13">|</operator> <operator pos:start="529:15" pos:end="529:15">(</operator><call pos:start="529:16" pos:end="529:44"><name pos:start="529:16" pos:end="529:24">extract64</name><argument_list pos:start="529:25" pos:end="529:44">(<argument pos:start="529:26" pos:end="529:35"><expr pos:start="529:26" pos:end="529:35"><name pos:start="529:26" pos:end="529:35">descriptor</name></expr></argument>, <argument pos:start="529:38" pos:end="529:39"><expr pos:start="529:38" pos:end="529:39"><literal type="number" pos:start="529:38" pos:end="529:39">52</literal></expr></argument>, <argument pos:start="529:42" pos:end="529:43"><expr pos:start="529:42" pos:end="529:43"><literal type="number" pos:start="529:42" pos:end="529:43">12</literal></expr></argument>)</argument_list></call> <operator pos:start="529:46" pos:end="529:47">&lt;&lt;</operator> <literal type="number" pos:start="529:49" pos:end="529:50">10</literal><operator pos:start="529:51" pos:end="529:51">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="533:9" pos:end="539:9"><if pos:start="533:9" pos:end="539:9">if <condition pos:start="533:12" pos:end="533:38">(<expr pos:start="533:13" pos:end="533:37"><name pos:start="533:13" pos:end="533:19">mmu_idx</name> <operator pos:start="533:21" pos:end="533:22">==</operator> <name pos:start="533:24" pos:end="533:37">ARMMMUIdx_S2NS</name></expr>)</condition> <block pos:start="533:40" pos:end="539:9">{<block_content pos:start="537:13" pos:end="537:18">

            <comment type="block" pos:start="535:13" pos:end="535:79">/* Stage 2 table descriptors do not include any attribute fields */</comment>

            <break pos:start="537:13" pos:end="537:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="541:9" pos:end="541:56">/* Merge in attributes from table descriptors */</comment>

        <expr_stmt pos:start="543:9" pos:end="543:51"><expr pos:start="543:9" pos:end="543:50"><name pos:start="543:9" pos:end="543:13">attrs</name> <operator pos:start="543:15" pos:end="543:16">|=</operator> <call pos:start="543:18" pos:end="543:44"><name pos:start="543:18" pos:end="543:26">extract32</name><argument_list pos:start="543:27" pos:end="543:44">(<argument pos:start="543:28" pos:end="543:37"><expr pos:start="543:28" pos:end="543:37"><name pos:start="543:28" pos:end="543:37">tableattrs</name></expr></argument>, <argument pos:start="543:40" pos:end="543:40"><expr pos:start="543:40" pos:end="543:40"><literal type="number" pos:start="543:40" pos:end="543:40">0</literal></expr></argument>, <argument pos:start="543:43" pos:end="543:43"><expr pos:start="543:43" pos:end="543:43"><literal type="number" pos:start="543:43" pos:end="543:43">2</literal></expr></argument>)</argument_list></call> <operator pos:start="543:46" pos:end="543:47">&lt;&lt;</operator> <literal type="number" pos:start="543:49" pos:end="543:50">11</literal></expr>;</expr_stmt> <comment type="block" pos:start="543:53" pos:end="543:65">/* XN, PXN */</comment>

        <expr_stmt pos:start="545:9" pos:end="545:50"><expr pos:start="545:9" pos:end="545:49"><name pos:start="545:9" pos:end="545:13">attrs</name> <operator pos:start="545:15" pos:end="545:16">|=</operator> <call pos:start="545:18" pos:end="545:44"><name pos:start="545:18" pos:end="545:26">extract32</name><argument_list pos:start="545:27" pos:end="545:44">(<argument pos:start="545:28" pos:end="545:37"><expr pos:start="545:28" pos:end="545:37"><name pos:start="545:28" pos:end="545:37">tableattrs</name></expr></argument>, <argument pos:start="545:40" pos:end="545:40"><expr pos:start="545:40" pos:end="545:40"><literal type="number" pos:start="545:40" pos:end="545:40">3</literal></expr></argument>, <argument pos:start="545:43" pos:end="545:43"><expr pos:start="545:43" pos:end="545:43"><literal type="number" pos:start="545:43" pos:end="545:43">1</literal></expr></argument>)</argument_list></call> <operator pos:start="545:46" pos:end="545:47">&lt;&lt;</operator> <literal type="number" pos:start="545:49" pos:end="545:49">5</literal></expr>;</expr_stmt> <comment type="block" pos:start="545:52" pos:end="545:76">/* APTable[1] =&gt; AP[2] */</comment>

        <comment type="block" pos:start="547:9" pos:end="551:11">/* The sense of AP[1] vs APTable[0] is reversed, as APTable[0] == 1

         * means "force PL1 access only", which means forcing AP[1] to 0.

         */</comment>

        <if_stmt pos:start="553:9" pos:end="557:9"><if pos:start="553:9" pos:end="557:9">if <condition pos:start="553:12" pos:end="553:40">(<expr pos:start="553:13" pos:end="553:39"><call pos:start="553:13" pos:end="553:39"><name pos:start="553:13" pos:end="553:21">extract32</name><argument_list pos:start="553:22" pos:end="553:39">(<argument pos:start="553:23" pos:end="553:32"><expr pos:start="553:23" pos:end="553:32"><name pos:start="553:23" pos:end="553:32">tableattrs</name></expr></argument>, <argument pos:start="553:35" pos:end="553:35"><expr pos:start="553:35" pos:end="553:35"><literal type="number" pos:start="553:35" pos:end="553:35">2</literal></expr></argument>, <argument pos:start="553:38" pos:end="553:38"><expr pos:start="553:38" pos:end="553:38"><literal type="number" pos:start="553:38" pos:end="553:38">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="553:42" pos:end="557:9">{<block_content pos:start="555:13" pos:end="555:31">

            <expr_stmt pos:start="555:13" pos:end="555:31"><expr pos:start="555:13" pos:end="555:30"><name pos:start="555:13" pos:end="555:17">attrs</name> <operator pos:start="555:19" pos:end="555:20">&amp;=</operator> <operator pos:start="555:22" pos:end="555:22">~</operator><operator pos:start="555:23" pos:end="555:23">(</operator><literal type="number" pos:start="555:24" pos:end="555:24">1</literal> <operator pos:start="555:26" pos:end="555:27">&lt;&lt;</operator> <literal type="number" pos:start="555:29" pos:end="555:29">4</literal><operator pos:start="555:30" pos:end="555:30">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="559:9" pos:end="559:30"><expr pos:start="559:9" pos:end="559:29"><name pos:start="559:9" pos:end="559:13">attrs</name> <operator pos:start="559:15" pos:end="559:16">|=</operator> <name pos:start="559:18" pos:end="559:24">nstable</name> <operator pos:start="559:26" pos:end="559:27">&lt;&lt;</operator> <literal type="number" pos:start="559:29" pos:end="559:29">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="559:32" pos:end="559:39">/* NS */</comment>

        <break pos:start="561:9" pos:end="561:14">break;</break>

    </block_content>}</block></for>

    <comment type="block" pos:start="565:5" pos:end="569:7">/* Here descaddr is the final physical address, and attributes

     * are all in attrs.

     */</comment>

    <expr_stmt pos:start="571:5" pos:end="571:30"><expr pos:start="571:5" pos:end="571:29"><name pos:start="571:5" pos:end="571:14">fault_type</name> <operator pos:start="571:16" pos:end="571:16">=</operator> <name pos:start="571:18" pos:end="571:29">access_fault</name></expr>;</expr_stmt>

    <if_stmt pos:start="573:5" pos:end="579:5"><if pos:start="573:5" pos:end="579:5">if <condition pos:start="573:8" pos:end="573:32">(<expr pos:start="573:9" pos:end="573:31"><operator pos:start="573:9" pos:end="573:9">(</operator><name pos:start="573:10" pos:end="573:14">attrs</name> <operator pos:start="573:16" pos:end="573:16">&amp;</operator> <operator pos:start="573:18" pos:end="573:18">(</operator><literal type="number" pos:start="573:19" pos:end="573:19">1</literal> <operator pos:start="573:21" pos:end="573:22">&lt;&lt;</operator> <literal type="number" pos:start="573:24" pos:end="573:24">8</literal><operator pos:start="573:25" pos:end="573:25">)</operator><operator pos:start="573:26" pos:end="573:26">)</operator> <operator pos:start="573:28" pos:end="573:29">==</operator> <literal type="number" pos:start="573:31" pos:end="573:31">0</literal></expr>)</condition> <block pos:start="573:34" pos:end="579:5">{<block_content pos:start="577:9" pos:end="577:22">

        <comment type="block" pos:start="575:9" pos:end="575:25">/* Access flag */</comment>

        <goto pos:start="577:9" pos:end="577:22">goto <name pos:start="577:14" pos:end="577:21">do_fault</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="583:5" pos:end="583:32"><expr pos:start="583:5" pos:end="583:31"><name pos:start="583:5" pos:end="583:6">ap</name> <operator pos:start="583:8" pos:end="583:8">=</operator> <call pos:start="583:10" pos:end="583:31"><name pos:start="583:10" pos:end="583:18">extract32</name><argument_list pos:start="583:19" pos:end="583:31">(<argument pos:start="583:20" pos:end="583:24"><expr pos:start="583:20" pos:end="583:24"><name pos:start="583:20" pos:end="583:24">attrs</name></expr></argument>, <argument pos:start="583:27" pos:end="583:27"><expr pos:start="583:27" pos:end="583:27"><literal type="number" pos:start="583:27" pos:end="583:27">4</literal></expr></argument>, <argument pos:start="583:30" pos:end="583:30"><expr pos:start="583:30" pos:end="583:30"><literal type="number" pos:start="583:30" pos:end="583:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="585:5" pos:end="585:33"><expr pos:start="585:5" pos:end="585:32"><name pos:start="585:5" pos:end="585:6">xn</name> <operator pos:start="585:8" pos:end="585:8">=</operator> <call pos:start="585:10" pos:end="585:32"><name pos:start="585:10" pos:end="585:18">extract32</name><argument_list pos:start="585:19" pos:end="585:32">(<argument pos:start="585:20" pos:end="585:24"><expr pos:start="585:20" pos:end="585:24"><name pos:start="585:20" pos:end="585:24">attrs</name></expr></argument>, <argument pos:start="585:27" pos:end="585:28"><expr pos:start="585:27" pos:end="585:28"><literal type="number" pos:start="585:27" pos:end="585:28">12</literal></expr></argument>, <argument pos:start="585:31" pos:end="585:31"><expr pos:start="585:31" pos:end="585:31"><literal type="number" pos:start="585:31" pos:end="585:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="589:5" pos:end="603:5"><if pos:start="589:5" pos:end="595:5">if <condition pos:start="589:8" pos:end="589:34">(<expr pos:start="589:9" pos:end="589:33"><name pos:start="589:9" pos:end="589:15">mmu_idx</name> <operator pos:start="589:17" pos:end="589:18">==</operator> <name pos:start="589:20" pos:end="589:33">ARMMMUIdx_S2NS</name></expr>)</condition> <block pos:start="589:36" pos:end="595:5">{<block_content pos:start="591:9" pos:end="593:40">

        <expr_stmt pos:start="591:9" pos:end="591:18"><expr pos:start="591:9" pos:end="591:17"><name pos:start="591:9" pos:end="591:10">ns</name> <operator pos:start="591:12" pos:end="591:12">=</operator> <name pos:start="591:14" pos:end="591:17">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="593:9" pos:end="593:40"><expr pos:start="593:9" pos:end="593:39"><operator pos:start="593:9" pos:end="593:9">*</operator><name pos:start="593:10" pos:end="593:13">prot</name> <operator pos:start="593:15" pos:end="593:15">=</operator> <call pos:start="593:17" pos:end="593:39"><name pos:start="593:17" pos:end="593:26">get_S2prot</name><argument_list pos:start="593:27" pos:end="593:39">(<argument pos:start="593:28" pos:end="593:30"><expr pos:start="593:28" pos:end="593:30"><name pos:start="593:28" pos:end="593:30">env</name></expr></argument>, <argument pos:start="593:33" pos:end="593:34"><expr pos:start="593:33" pos:end="593:34"><name pos:start="593:33" pos:end="593:34">ap</name></expr></argument>, <argument pos:start="593:37" pos:end="593:38"><expr pos:start="593:37" pos:end="593:38"><name pos:start="593:37" pos:end="593:38">xn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="595:7" pos:end="603:5">else <block pos:start="595:12" pos:end="603:5">{<block_content pos:start="597:9" pos:end="601:73">

        <expr_stmt pos:start="597:9" pos:end="597:36"><expr pos:start="597:9" pos:end="597:35"><name pos:start="597:9" pos:end="597:10">ns</name> <operator pos:start="597:12" pos:end="597:12">=</operator> <call pos:start="597:14" pos:end="597:35"><name pos:start="597:14" pos:end="597:22">extract32</name><argument_list pos:start="597:23" pos:end="597:35">(<argument pos:start="597:24" pos:end="597:28"><expr pos:start="597:24" pos:end="597:28"><name pos:start="597:24" pos:end="597:28">attrs</name></expr></argument>, <argument pos:start="597:31" pos:end="597:31"><expr pos:start="597:31" pos:end="597:31"><literal type="number" pos:start="597:31" pos:end="597:31">3</literal></expr></argument>, <argument pos:start="597:34" pos:end="597:34"><expr pos:start="597:34" pos:end="597:34"><literal type="number" pos:start="597:34" pos:end="597:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:38"><expr pos:start="599:9" pos:end="599:37"><name pos:start="599:9" pos:end="599:11">pxn</name> <operator pos:start="599:13" pos:end="599:13">=</operator> <call pos:start="599:15" pos:end="599:37"><name pos:start="599:15" pos:end="599:23">extract32</name><argument_list pos:start="599:24" pos:end="599:37">(<argument pos:start="599:25" pos:end="599:29"><expr pos:start="599:25" pos:end="599:29"><name pos:start="599:25" pos:end="599:29">attrs</name></expr></argument>, <argument pos:start="599:32" pos:end="599:33"><expr pos:start="599:32" pos:end="599:33"><literal type="number" pos:start="599:32" pos:end="599:33">11</literal></expr></argument>, <argument pos:start="599:36" pos:end="599:36"><expr pos:start="599:36" pos:end="599:36"><literal type="number" pos:start="599:36" pos:end="599:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:73"><expr pos:start="601:9" pos:end="601:72"><operator pos:start="601:9" pos:end="601:9">*</operator><name pos:start="601:10" pos:end="601:13">prot</name> <operator pos:start="601:15" pos:end="601:15">=</operator> <call pos:start="601:17" pos:end="601:72"><name pos:start="601:17" pos:end="601:26">get_S1prot</name><argument_list pos:start="601:27" pos:end="601:72">(<argument pos:start="601:28" pos:end="601:30"><expr pos:start="601:28" pos:end="601:30"><name pos:start="601:28" pos:end="601:30">env</name></expr></argument>, <argument pos:start="601:33" pos:end="601:39"><expr pos:start="601:33" pos:end="601:39"><name pos:start="601:33" pos:end="601:39">mmu_idx</name></expr></argument>, <argument pos:start="601:42" pos:end="601:54"><expr pos:start="601:42" pos:end="601:54"><name pos:start="601:42" pos:end="601:48">va_size</name> <operator pos:start="601:50" pos:end="601:51">==</operator> <literal type="number" pos:start="601:53" pos:end="601:54">64</literal></expr></argument>, <argument pos:start="601:57" pos:end="601:58"><expr pos:start="601:57" pos:end="601:58"><name pos:start="601:57" pos:end="601:58">ap</name></expr></argument>, <argument pos:start="601:61" pos:end="601:62"><expr pos:start="601:61" pos:end="601:62"><name pos:start="601:61" pos:end="601:62">ns</name></expr></argument>, <argument pos:start="601:65" pos:end="601:66"><expr pos:start="601:65" pos:end="601:66"><name pos:start="601:65" pos:end="601:66">xn</name></expr></argument>, <argument pos:start="601:69" pos:end="601:71"><expr pos:start="601:69" pos:end="601:71"><name pos:start="601:69" pos:end="601:71">pxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="607:5" pos:end="607:34"><expr pos:start="607:5" pos:end="607:33"><name pos:start="607:5" pos:end="607:14">fault_type</name> <operator pos:start="607:16" pos:end="607:16">=</operator> <name pos:start="607:18" pos:end="607:33">permission_fault</name></expr>;</expr_stmt>

    <if_stmt pos:start="609:5" pos:end="613:5"><if pos:start="609:5" pos:end="613:5">if <condition pos:start="609:8" pos:end="609:38">(<expr pos:start="609:9" pos:end="609:37"><operator pos:start="609:9" pos:end="609:9">!</operator><operator pos:start="609:10" pos:end="609:10">(</operator><operator pos:start="609:11" pos:end="609:11">*</operator><name pos:start="609:12" pos:end="609:15">prot</name> <operator pos:start="609:17" pos:end="609:17">&amp;</operator> <operator pos:start="609:19" pos:end="609:19">(</operator><literal type="number" pos:start="609:20" pos:end="609:20">1</literal> <operator pos:start="609:22" pos:end="609:23">&lt;&lt;</operator> <name pos:start="609:25" pos:end="609:35">access_type</name><operator pos:start="609:36" pos:end="609:36">)</operator><operator pos:start="609:37" pos:end="609:37">)</operator></expr>)</condition> <block pos:start="609:40" pos:end="613:5">{<block_content pos:start="611:9" pos:end="611:22">

        <goto pos:start="611:9" pos:end="611:22">goto <name pos:start="611:14" pos:end="611:21">do_fault</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="617:5" pos:end="629:5"><if pos:start="617:5" pos:end="629:5">if <condition pos:start="617:8" pos:end="617:11">(<expr pos:start="617:9" pos:end="617:10"><name pos:start="617:9" pos:end="617:10">ns</name></expr>)</condition> <block pos:start="617:13" pos:end="629:5">{<block_content pos:start="627:9" pos:end="627:32">

        <comment type="block" pos:start="619:9" pos:end="625:11">/* The NS bit will (as required by the architecture) have no effect if

         * the CPU doesn't support TZ or this is a non-secure translation

         * regime, because the attribute will already be non-secure.

         */</comment>

        <expr_stmt pos:start="627:9" pos:end="627:32"><expr pos:start="627:9" pos:end="627:31"><name pos:start="627:9" pos:end="627:23"><name pos:start="627:9" pos:end="627:15">txattrs</name><operator pos:start="627:16" pos:end="627:17">-&gt;</operator><name pos:start="627:18" pos:end="627:23">secure</name></name> <operator pos:start="627:25" pos:end="627:25">=</operator> <name pos:start="627:27" pos:end="627:31">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="631:5" pos:end="631:25"><expr pos:start="631:5" pos:end="631:24"><operator pos:start="631:5" pos:end="631:5">*</operator><name pos:start="631:6" pos:end="631:13">phys_ptr</name> <operator pos:start="631:15" pos:end="631:15">=</operator> <name pos:start="631:17" pos:end="631:24">descaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="633:5" pos:end="633:31"><expr pos:start="633:5" pos:end="633:30"><operator pos:start="633:5" pos:end="633:5">*</operator><name pos:start="633:6" pos:end="633:18">page_size_ptr</name> <operator pos:start="633:20" pos:end="633:20">=</operator> <name pos:start="633:22" pos:end="633:30">page_size</name></expr>;</expr_stmt>

    <return pos:start="635:5" pos:end="635:17">return <expr pos:start="635:12" pos:end="635:16"><name pos:start="635:12" pos:end="635:16">false</name></expr>;</return>



<label pos:start="639:1" pos:end="639:9"><name pos:start="639:1" pos:end="639:8">do_fault</name>:</label>

    <comment type="block" pos:start="641:5" pos:end="641:48">/* Long-descriptor format IFSR/DFSR value */</comment>

    <expr_stmt pos:start="643:5" pos:end="643:48"><expr pos:start="643:5" pos:end="643:47"><operator pos:start="643:5" pos:end="643:5">*</operator><name pos:start="643:6" pos:end="643:8">fsr</name> <operator pos:start="643:10" pos:end="643:10">=</operator> <operator pos:start="643:12" pos:end="643:12">(</operator><literal type="number" pos:start="643:13" pos:end="643:13">1</literal> <operator pos:start="643:15" pos:end="643:16">&lt;&lt;</operator> <literal type="number" pos:start="643:18" pos:end="643:18">9</literal><operator pos:start="643:19" pos:end="643:19">)</operator> <operator pos:start="643:21" pos:end="643:21">|</operator> <operator pos:start="643:23" pos:end="643:23">(</operator><name pos:start="643:24" pos:end="643:33">fault_type</name> <operator pos:start="643:35" pos:end="643:36">&lt;&lt;</operator> <literal type="number" pos:start="643:38" pos:end="643:38">2</literal><operator pos:start="643:39" pos:end="643:39">)</operator> <operator pos:start="643:41" pos:end="643:41">|</operator> <name pos:start="643:43" pos:end="643:47">level</name></expr>;</expr_stmt>

    <comment type="block" pos:start="645:5" pos:end="645:70">/* Tag the error as S2 for failed S1 PTW at S2 or ordinary S2.  */</comment>

    <expr_stmt pos:start="647:5" pos:end="647:58"><expr pos:start="647:5" pos:end="647:57"><name pos:start="647:5" pos:end="647:14"><name pos:start="647:5" pos:end="647:6">fi</name><operator pos:start="647:7" pos:end="647:8">-&gt;</operator><name pos:start="647:9" pos:end="647:14">stage2</name></name> <operator pos:start="647:16" pos:end="647:16">=</operator> <name pos:start="647:18" pos:end="647:26"><name pos:start="647:18" pos:end="647:19">fi</name><operator pos:start="647:20" pos:end="647:21">-&gt;</operator><name pos:start="647:22" pos:end="647:26">s1ptw</name></name> <operator pos:start="647:28" pos:end="647:29">||</operator> <operator pos:start="647:31" pos:end="647:31">(</operator><name pos:start="647:32" pos:end="647:38">mmu_idx</name> <operator pos:start="647:40" pos:end="647:41">==</operator> <name pos:start="647:43" pos:end="647:56">ARMMMUIdx_S2NS</name><operator pos:start="647:57" pos:end="647:57">)</operator></expr>;</expr_stmt>

    <return pos:start="649:5" pos:end="649:16">return <expr pos:start="649:12" pos:end="649:15"><name pos:start="649:12" pos:end="649:15">true</name></expr>;</return>

</block_content>}</block></function>
</unit>
