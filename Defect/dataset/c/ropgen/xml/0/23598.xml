<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23598.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">nbd_client_init</name><parameter_list pos:start="1:20" pos:end="3:53">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:64"><decl pos:start="1:43" pos:end="1:64"><type pos:start="1:43" pos:end="1:64"><name pos:start="1:43" pos:end="1:58">QIOChannelSocket</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">sioc</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:38"><decl pos:start="3:21" pos:end="3:38"><type pos:start="3:21" pos:end="3:38"><specifier pos:start="3:21" pos:end="3:25">const</specifier> <name pos:start="3:27" pos:end="3:30">char</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:38">export</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:52"><decl pos:start="3:41" pos:end="3:52"><type pos:start="3:41" pos:end="3:52"><name pos:start="3:41" pos:end="3:45">Error</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier><modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:52">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:13">

    <decl_stmt pos:start="7:5" pos:end="7:58"><decl pos:start="7:5" pos:end="7:57"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">NbdClientSession</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:28">client</name> <init pos:start="7:30" pos:end="7:57">= <expr pos:start="7:32" pos:end="7:57"><call pos:start="7:32" pos:end="7:57"><name pos:start="7:32" pos:end="7:53">nbd_get_client_session</name><argument_list pos:start="7:54" pos:end="7:57">(<argument pos:start="7:55" pos:end="7:56"><expr pos:start="7:55" pos:end="7:56"><name pos:start="7:55" pos:end="7:56">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:23">/* NBD handshake */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:40"><expr pos:start="15:5" pos:end="15:39"><call pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:10">logout</name><argument_list pos:start="15:11" pos:end="15:39">(<argument pos:start="15:12" pos:end="15:30"><expr pos:start="15:12" pos:end="15:30"><literal type="string" pos:start="15:12" pos:end="15:30">"session init %s\n"</literal></expr></argument>, <argument pos:start="15:33" pos:end="15:38"><expr pos:start="15:33" pos:end="15:38"><name pos:start="15:33" pos:end="15:38">export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:60"><expr pos:start="17:5" pos:end="17:59"><call pos:start="17:5" pos:end="17:59"><name pos:start="17:5" pos:end="17:28">qio_channel_set_blocking</name><argument_list pos:start="17:29" pos:end="17:59">(<argument pos:start="17:30" pos:end="17:46"><expr pos:start="17:30" pos:end="17:46"><call pos:start="17:30" pos:end="17:46"><name pos:start="17:30" pos:end="17:40">QIO_CHANNEL</name><argument_list pos:start="17:41" pos:end="17:46">(<argument pos:start="17:42" pos:end="17:45"><expr pos:start="17:42" pos:end="17:45"><name pos:start="17:42" pos:end="17:45">sioc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:49" pos:end="17:52"><expr pos:start="17:49" pos:end="17:52"><name pos:start="17:49" pos:end="17:52">true</name></expr></argument>, <argument pos:start="17:55" pos:end="17:58"><expr pos:start="17:55" pos:end="17:58"><name pos:start="17:55" pos:end="17:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="29:53"><expr pos:start="21:5" pos:end="29:52"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="29:52"><name pos:start="21:11" pos:end="21:31">nbd_receive_negotiate</name><argument_list pos:start="21:32" pos:end="29:52">(<argument pos:start="21:33" pos:end="21:49"><expr pos:start="21:33" pos:end="21:49"><call pos:start="21:33" pos:end="21:49"><name pos:start="21:33" pos:end="21:43">QIO_CHANNEL</name><argument_list pos:start="21:44" pos:end="21:49">(<argument pos:start="21:45" pos:end="21:48"><expr pos:start="21:45" pos:end="21:48"><name pos:start="21:45" pos:end="21:48">sioc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:52" pos:end="21:57"><expr pos:start="21:52" pos:end="21:57"><name pos:start="21:52" pos:end="21:57">export</name></expr></argument>,

                                <argument pos:start="23:33" pos:end="23:49"><expr pos:start="23:33" pos:end="23:49"><operator pos:start="23:33" pos:end="23:33">&amp;</operator><name pos:start="23:34" pos:end="23:49"><name pos:start="23:34" pos:end="23:39">client</name><operator pos:start="23:40" pos:end="23:41">-&gt;</operator><name pos:start="23:42" pos:end="23:49">nbdflags</name></name></expr></argument>,

                                <argument pos:start="25:33" pos:end="25:36"><expr pos:start="25:33" pos:end="25:36"><name pos:start="25:33" pos:end="25:36">NULL</name></expr></argument>, <argument pos:start="25:39" pos:end="25:42"><expr pos:start="25:39" pos:end="25:42"><name pos:start="25:39" pos:end="25:42">NULL</name></expr></argument>,

                                <argument pos:start="27:33" pos:end="27:44"><expr pos:start="27:33" pos:end="27:44"><operator pos:start="27:33" pos:end="27:33">&amp;</operator><name pos:start="27:34" pos:end="27:44"><name pos:start="27:34" pos:end="27:39">client</name><operator pos:start="27:40" pos:end="27:41">-&gt;</operator><name pos:start="27:42" pos:end="27:44">ioc</name></name></expr></argument>,

                                <argument pos:start="29:33" pos:end="29:45"><expr pos:start="29:33" pos:end="29:45"><operator pos:start="29:33" pos:end="29:33">&amp;</operator><name pos:start="29:34" pos:end="29:45"><name pos:start="29:34" pos:end="29:39">client</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:45">size</name></name></expr></argument>, <argument pos:start="29:48" pos:end="29:51"><expr pos:start="29:48" pos:end="29:51"><name pos:start="29:48" pos:end="29:51">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition> <block pos:start="31:18" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:19">

        <expr_stmt pos:start="33:9" pos:end="33:60"><expr pos:start="33:9" pos:end="33:59"><call pos:start="33:9" pos:end="33:59"><name pos:start="33:9" pos:end="33:14">logout</name><argument_list pos:start="33:15" pos:end="33:59">(<argument pos:start="33:16" pos:end="33:58"><expr pos:start="33:16" pos:end="33:58"><literal type="string" pos:start="33:16" pos:end="33:58">"Failed to negotiate with the NBD server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:19">return <expr pos:start="35:16" pos:end="35:18"><name pos:start="35:16" pos:end="35:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><call pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:22">qemu_co_mutex_init</name><argument_list pos:start="41:23" pos:end="41:43">(<argument pos:start="41:24" pos:end="41:42"><expr pos:start="41:24" pos:end="41:42"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:42"><name pos:start="41:25" pos:end="41:30">client</name><operator pos:start="41:31" pos:end="41:32">-&gt;</operator><name pos:start="41:33" pos:end="41:42">send_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:43"><expr pos:start="43:5" pos:end="43:42"><call pos:start="43:5" pos:end="43:42"><name pos:start="43:5" pos:end="43:22">qemu_co_mutex_init</name><argument_list pos:start="43:23" pos:end="43:42">(<argument pos:start="43:24" pos:end="43:41"><expr pos:start="43:24" pos:end="43:41"><operator pos:start="43:24" pos:end="43:24">&amp;</operator><name pos:start="43:25" pos:end="43:41"><name pos:start="43:25" pos:end="43:30">client</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:41">free_sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:24"><expr pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:10">client</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:16">sioc</name></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <name pos:start="45:20" pos:end="45:23">sioc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><call pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:14">object_ref</name><argument_list pos:start="47:15" pos:end="47:36">(<argument pos:start="47:16" pos:end="47:35"><expr pos:start="47:16" pos:end="47:35"><call pos:start="47:16" pos:end="47:35"><name pos:start="47:16" pos:end="47:21">OBJECT</name><argument_list pos:start="47:22" pos:end="47:35">(<argument pos:start="47:23" pos:end="47:34"><expr pos:start="47:23" pos:end="47:34"><name pos:start="47:23" pos:end="47:34"><name pos:start="47:23" pos:end="47:28">client</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:34">sioc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:21">(<expr pos:start="51:9" pos:end="51:20"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:20"><name pos:start="51:10" pos:end="51:15">client</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:20">ioc</name></name></expr>)</condition> <block pos:start="51:23" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:40">

        <expr_stmt pos:start="53:9" pos:end="53:40"><expr pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:14">client</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:19">ioc</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:39"><name pos:start="53:23" pos:end="53:33">QIO_CHANNEL</name><argument_list pos:start="53:34" pos:end="53:39">(<argument pos:start="53:35" pos:end="53:38"><expr pos:start="53:35" pos:end="53:38"><name pos:start="53:35" pos:end="53:38">sioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:40"><expr pos:start="55:9" pos:end="55:39"><call pos:start="55:9" pos:end="55:39"><name pos:start="55:9" pos:end="55:18">object_ref</name><argument_list pos:start="55:19" pos:end="55:39">(<argument pos:start="55:20" pos:end="55:38"><expr pos:start="55:20" pos:end="55:38"><call pos:start="55:20" pos:end="55:38"><name pos:start="55:20" pos:end="55:25">OBJECT</name><argument_list pos:start="55:26" pos:end="55:38">(<argument pos:start="55:27" pos:end="55:37"><expr pos:start="55:27" pos:end="55:37"><name pos:start="55:27" pos:end="55:37"><name pos:start="55:27" pos:end="55:32">client</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:37">ioc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="63:36">/* Now that we're connected, set the socket to be non-blocking and

     * kick the reply mechanism.  */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:61"><expr pos:start="65:5" pos:end="65:60"><call pos:start="65:5" pos:end="65:60"><name pos:start="65:5" pos:end="65:28">qio_channel_set_blocking</name><argument_list pos:start="65:29" pos:end="65:60">(<argument pos:start="65:30" pos:end="65:46"><expr pos:start="65:30" pos:end="65:46"><call pos:start="65:30" pos:end="65:46"><name pos:start="65:30" pos:end="65:40">QIO_CHANNEL</name><argument_list pos:start="65:41" pos:end="65:46">(<argument pos:start="65:42" pos:end="65:45"><expr pos:start="65:42" pos:end="65:45"><name pos:start="65:42" pos:end="65:45">sioc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:49" pos:end="65:53"><expr pos:start="65:49" pos:end="65:53"><name pos:start="65:49" pos:end="65:53">false</name></expr></argument>, <argument pos:start="65:56" pos:end="65:59"><expr pos:start="65:56" pos:end="65:59"><name pos:start="65:56" pos:end="65:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:64"><expr pos:start="69:5" pos:end="69:63"><call pos:start="69:5" pos:end="69:63"><name pos:start="69:5" pos:end="69:33">nbd_client_attach_aio_context</name><argument_list pos:start="69:34" pos:end="69:63">(<argument pos:start="69:35" pos:end="69:36"><expr pos:start="69:35" pos:end="69:36"><name pos:start="69:35" pos:end="69:36">bs</name></expr></argument>, <argument pos:start="69:39" pos:end="69:62"><expr pos:start="69:39" pos:end="69:62"><call pos:start="69:39" pos:end="69:62"><name pos:start="69:39" pos:end="69:58">bdrv_get_aio_context</name><argument_list pos:start="69:59" pos:end="69:62">(<argument pos:start="69:60" pos:end="69:61"><expr pos:start="69:60" pos:end="69:61"><name pos:start="69:60" pos:end="69:61">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:55"><expr pos:start="73:5" pos:end="73:54"><call pos:start="73:5" pos:end="73:54"><name pos:start="73:5" pos:end="73:10">logout</name><argument_list pos:start="73:11" pos:end="73:54">(<argument pos:start="73:12" pos:end="73:53"><expr pos:start="73:12" pos:end="73:53"><literal type="string" pos:start="73:12" pos:end="73:53">"Established connection with NBD server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
