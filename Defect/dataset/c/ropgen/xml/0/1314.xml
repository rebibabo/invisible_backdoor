<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1314.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:38">rgb16tobgr24</name>)<parameter_list pos:start="1:40" pos:end="1:88">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">src</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:67">uint8_t</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">dst</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:87"><decl pos:start="1:75" pos:end="1:87"><type pos:start="1:75" pos:end="1:87"><name pos:start="1:75" pos:end="1:78">long</name></type> <name pos:start="1:80" pos:end="1:87">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="209:1">{<block_content pos:start="5:5" pos:end="207:5">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:20"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:18">uint16_t</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">end</name></decl>;</decl_stmt>

<cpp:if pos:start="7:1" pos:end="7:24">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:20"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:18">uint16_t</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:26">mm_end</name></decl>;</decl_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:14">d</name> <init pos:start="13:16" pos:end="13:31">= <expr pos:start="13:18" pos:end="13:31"><operator pos:start="13:18" pos:end="13:18">(</operator><name pos:start="13:19" pos:end="13:25">uint8_t</name> <operator pos:start="13:27" pos:end="13:27">*</operator><operator pos:start="13:28" pos:end="13:28">)</operator><name pos:start="13:29" pos:end="13:31">dst</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:46"><decl pos:start="15:5" pos:end="15:45"><type pos:start="15:5" pos:end="15:20"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:18">uint16_t</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:21">s</name> <init pos:start="15:23" pos:end="15:45">= <expr pos:start="15:25" pos:end="15:45"><operator pos:start="15:25" pos:end="15:25">(</operator><specifier pos:start="15:26" pos:end="15:30">const</specifier> <name pos:start="15:32" pos:end="15:39">uint16_t</name> <operator pos:start="15:41" pos:end="15:41">*</operator><operator pos:start="15:42" pos:end="15:42">)</operator><name pos:start="15:43" pos:end="15:45">src</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:7">end</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:11">s</name> <operator pos:start="17:13" pos:end="17:13">+</operator> <name pos:start="17:15" pos:end="17:22">src_size</name><operator pos:start="17:23" pos:end="17:23">/</operator><literal type="number" pos:start="17:24" pos:end="17:24">2</literal></expr>;</expr_stmt>

<cpp:if pos:start="19:1" pos:end="19:24">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <asm pos:start="21:5" pos:end="21:57">__asm__ <specifier pos:start="21:13" pos:end="21:20">volatile</specifier>(PREFETCH"    %0"::"m"(*s):"memory");</asm>

    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:10">mm_end</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <name pos:start="23:14" pos:end="23:16">end</name> <operator pos:start="23:18" pos:end="23:18">-</operator> <literal type="number" pos:start="23:20" pos:end="23:20">7</literal></expr>;</expr_stmt>

    <while pos:start="25:5" pos:end="187:5">while <condition pos:start="25:11" pos:end="25:22">(<expr pos:start="25:12" pos:end="25:21"><name pos:start="25:12" pos:end="25:12">s</name> <operator pos:start="25:14" pos:end="25:14">&lt;</operator> <name pos:start="25:16" pos:end="25:21">mm_end</name></expr>)</condition> <block pos:start="25:24" pos:end="187:5">{<block_content pos:start="27:9" pos:end="185:15">

        <asm pos:start="27:9" pos:end="147:23">__asm__ <specifier pos:start="27:17" pos:end="27:24">volatile</specifier>(

            PREFETCH"    32%1           \n\t"

            "movq          %1, %%mm0    \n\t"

            "movq          %1, %%mm1    \n\t"

            "movq          %1, %%mm2    \n\t"

            "pand          %2, %%mm0    \n\t"

            "pand          %3, %%mm1    \n\t"

            "pand          %4, %%mm2    \n\t"

            "psllq         $3, %%mm0    \n\t"

            "psrlq         $3, %%mm1    \n\t"

            "psrlq         $8, %%mm2    \n\t"

            "movq       %%mm0, %%mm3    \n\t"

            "movq       %%mm1, %%mm4    \n\t"

            "movq       %%mm2, %%mm5    \n\t"

            "punpcklwd     %5, %%mm0    \n\t"

            "punpcklwd     %5, %%mm1    \n\t"

            "punpcklwd     %5, %%mm2    \n\t"

            "punpckhwd     %5, %%mm3    \n\t"

            "punpckhwd     %5, %%mm4    \n\t"

            "punpckhwd     %5, %%mm5    \n\t"

            "psllq         $8, %%mm1    \n\t"

            "psllq        $16, %%mm2    \n\t"

            "por        %%mm1, %%mm0    \n\t"

            "por        %%mm2, %%mm0    \n\t"

            "psllq         $8, %%mm4    \n\t"

            "psllq        $16, %%mm5    \n\t"

            "por        %%mm4, %%mm3    \n\t"

            "por        %%mm5, %%mm3    \n\t"



            "movq       %%mm0, %%mm6    \n\t"

            "movq       %%mm3, %%mm7    \n\t"



            "movq         8%1, %%mm0    \n\t"

            "movq         8%1, %%mm1    \n\t"

            "movq         8%1, %%mm2    \n\t"

            "pand          %2, %%mm0    \n\t"

            "pand          %3, %%mm1    \n\t"

            "pand          %4, %%mm2    \n\t"

            "psllq         $3, %%mm0    \n\t"

            "psrlq         $3, %%mm1    \n\t"

            "psrlq         $8, %%mm2    \n\t"

            "movq       %%mm0, %%mm3    \n\t"

            "movq       %%mm1, %%mm4    \n\t"

            "movq       %%mm2, %%mm5    \n\t"

            "punpcklwd     %5, %%mm0    \n\t"

            "punpcklwd     %5, %%mm1    \n\t"

            "punpcklwd     %5, %%mm2    \n\t"

            "punpckhwd     %5, %%mm3    \n\t"

            "punpckhwd     %5, %%mm4    \n\t"

            "punpckhwd     %5, %%mm5    \n\t"

            "psllq         $8, %%mm1    \n\t"

            "psllq        $16, %%mm2    \n\t"

            "por        %%mm1, %%mm0    \n\t"

            "por        %%mm2, %%mm0    \n\t"

            "psllq         $8, %%mm4    \n\t"

            "psllq        $16, %%mm5    \n\t"

            "por        %%mm4, %%mm3    \n\t"

            "por        %%mm5, %%mm3    \n\t"

            :"=m"(*d)

            :"m"(*s),"m"(mask16b),"m"(mask16g),"m"(mask16r),"m"(mmx_null)

            :"memory");</asm>

        <comment type="block" pos:start="149:9" pos:end="149:31">/* borrowed 32 to 24 */</comment>

        <asm pos:start="151:9" pos:end="181:23">__asm__ <specifier pos:start="151:17" pos:end="151:24">volatile</specifier>(

            "movq       %%mm0, %%mm4    \n\t"

            "movq       %%mm3, %%mm5    \n\t"

            "movq       %%mm6, %%mm0    \n\t"

            "movq       %%mm7, %%mm1    \n\t"



            "movq       %%mm4, %%mm6    \n\t"

            "movq       %%mm5, %%mm7    \n\t"

            "movq       %%mm0, %%mm2    \n\t"

            "movq       %%mm1, %%mm3    \n\t"



            STORE_BGR24_MMX



            :"=m"(*d)

            :"m"(*s)

            :"memory");</asm>

        <expr_stmt pos:start="183:9" pos:end="183:16"><expr pos:start="183:9" pos:end="183:15"><name pos:start="183:9" pos:end="183:9">d</name> <operator pos:start="183:11" pos:end="183:12">+=</operator> <literal type="number" pos:start="183:14" pos:end="183:15">24</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:15"><expr pos:start="185:9" pos:end="185:14"><name pos:start="185:9" pos:end="185:9">s</name> <operator pos:start="185:11" pos:end="185:12">+=</operator> <literal type="number" pos:start="185:14" pos:end="185:14">8</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <asm pos:start="189:5" pos:end="189:40">__asm__ <specifier pos:start="189:13" pos:end="189:20">volatile</specifier>(SFENCE:::"memory");</asm>

    <asm pos:start="191:5" pos:end="194:0">__asm__ <specifier pos:start="191:13" pos:end="191:20">volatile</specifier>(EMMS:::"memory");</asm>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>

    <while pos:start="195:5" pos:end="207:5">while <condition pos:start="195:11" pos:end="195:19">(<expr pos:start="195:12" pos:end="195:18"><name pos:start="195:12" pos:end="195:12">s</name> <operator pos:start="195:14" pos:end="195:14">&lt;</operator> <name pos:start="195:16" pos:end="195:18">end</name></expr>)</condition> <block pos:start="195:21" pos:end="207:5">{<block_content pos:start="197:9" pos:end="205:31">

        <decl_stmt pos:start="197:9" pos:end="197:30"><decl pos:start="197:9" pos:end="197:29"><type pos:start="197:9" pos:end="197:25"><specifier pos:start="197:9" pos:end="197:16">register</specifier> <name pos:start="197:18" pos:end="197:25">uint16_t</name></type> <name pos:start="197:27" pos:end="197:29">bgr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:19"><expr pos:start="199:9" pos:end="199:18"><name pos:start="199:9" pos:end="199:11">bgr</name> <operator pos:start="199:13" pos:end="199:13">=</operator> <operator pos:start="199:15" pos:end="199:15">*</operator><name pos:start="199:16" pos:end="199:16">s</name><operator pos:start="199:17" pos:end="199:18">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:29"><expr pos:start="201:9" pos:end="201:28"><operator pos:start="201:9" pos:end="201:9">*</operator><name pos:start="201:10" pos:end="201:10">d</name><operator pos:start="201:11" pos:end="201:12">++</operator> <operator pos:start="201:14" pos:end="201:14">=</operator> <operator pos:start="201:16" pos:end="201:16">(</operator><name pos:start="201:17" pos:end="201:19">bgr</name><operator pos:start="201:20" pos:end="201:20">&amp;</operator><literal type="number" pos:start="201:21" pos:end="201:24">0x1F</literal><operator pos:start="201:25" pos:end="201:25">)</operator><operator pos:start="201:26" pos:end="201:27">&lt;&lt;</operator><literal type="number" pos:start="201:28" pos:end="201:28">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:30"><expr pos:start="203:9" pos:end="203:29"><operator pos:start="203:9" pos:end="203:9">*</operator><name pos:start="203:10" pos:end="203:10">d</name><operator pos:start="203:11" pos:end="203:12">++</operator> <operator pos:start="203:14" pos:end="203:14">=</operator> <operator pos:start="203:16" pos:end="203:16">(</operator><name pos:start="203:17" pos:end="203:19">bgr</name><operator pos:start="203:20" pos:end="203:20">&amp;</operator><literal type="number" pos:start="203:21" pos:end="203:25">0x7E0</literal><operator pos:start="203:26" pos:end="203:26">)</operator><operator pos:start="203:27" pos:end="203:28">&gt;&gt;</operator><literal type="number" pos:start="203:29" pos:end="203:29">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:31"><expr pos:start="205:9" pos:end="205:30"><operator pos:start="205:9" pos:end="205:9">*</operator><name pos:start="205:10" pos:end="205:10">d</name><operator pos:start="205:11" pos:end="205:12">++</operator> <operator pos:start="205:14" pos:end="205:14">=</operator> <operator pos:start="205:16" pos:end="205:16">(</operator><name pos:start="205:17" pos:end="205:19">bgr</name><operator pos:start="205:20" pos:end="205:20">&amp;</operator><literal type="number" pos:start="205:21" pos:end="205:26">0xF800</literal><operator pos:start="205:27" pos:end="205:27">)</operator><operator pos:start="205:28" pos:end="205:29">&gt;&gt;</operator><literal type="number" pos:start="205:30" pos:end="205:30">8</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
