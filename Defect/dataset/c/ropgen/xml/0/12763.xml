<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12763.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">ats_write</name><parameter_list pos:start="1:22" pos:end="1:79">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:38"><name pos:start="1:23" pos:end="1:33">CPUARMState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">env</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:62"><decl pos:start="1:41" pos:end="1:62"><type pos:start="1:41" pos:end="1:62"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:58">ARMCPRegInfo</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">ri</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:72">uint64_t</name></type> <name pos:start="1:74" pos:end="1:78">value</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:5">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">hwaddr</name></type> <name pos:start="5:12" pos:end="5:20">phys_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:26">page_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">prot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:20">is_user</name> <init pos:start="11:22" pos:end="11:35">= <expr pos:start="11:24" pos:end="11:35"><name pos:start="11:24" pos:end="11:31"><name pos:start="11:24" pos:end="11:25">ri</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:31">opc2</name></name> <operator pos:start="11:33" pos:end="11:33">&amp;</operator> <literal type="number" pos:start="11:35" pos:end="11:35">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">access_type</name> <init pos:start="13:21" pos:end="13:34">= <expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:30"><name pos:start="13:23" pos:end="13:24">ri</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:30">opc2</name></name> <operator pos:start="13:32" pos:end="13:32">&amp;</operator> <literal type="number" pos:start="13:34" pos:end="13:34">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:55"><expr pos:start="17:5" pos:end="19:54"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="19:54"><name pos:start="17:11" pos:end="17:23">get_phys_addr</name><argument_list pos:start="17:24" pos:end="19:54">(<argument pos:start="17:25" pos:end="17:27"><expr pos:start="17:25" pos:end="17:27"><name pos:start="17:25" pos:end="17:27">env</name></expr></argument>, <argument pos:start="17:30" pos:end="17:34"><expr pos:start="17:30" pos:end="17:34"><name pos:start="17:30" pos:end="17:34">value</name></expr></argument>, <argument pos:start="17:37" pos:end="17:47"><expr pos:start="17:37" pos:end="17:47"><name pos:start="17:37" pos:end="17:47">access_type</name></expr></argument>, <argument pos:start="17:50" pos:end="17:56"><expr pos:start="17:50" pos:end="17:56"><name pos:start="17:50" pos:end="17:56">is_user</name></expr></argument>,

                        <argument pos:start="19:25" pos:end="19:34"><expr pos:start="19:25" pos:end="19:34"><operator pos:start="19:25" pos:end="19:25">&amp;</operator><name pos:start="19:26" pos:end="19:34">phys_addr</name></expr></argument>, <argument pos:start="19:37" pos:end="19:41"><expr pos:start="19:37" pos:end="19:41"><operator pos:start="19:37" pos:end="19:37">&amp;</operator><name pos:start="19:38" pos:end="19:41">prot</name></expr></argument>, <argument pos:start="19:44" pos:end="19:53"><expr pos:start="19:44" pos:end="19:53"><operator pos:start="19:44" pos:end="19:44">&amp;</operator><name pos:start="19:45" pos:end="19:53">page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="93:5"><if pos:start="21:5" pos:end="57:5">if <condition pos:start="21:8" pos:end="21:40">(<expr pos:start="21:9" pos:end="21:39"><call pos:start="21:9" pos:end="21:39"><name pos:start="21:9" pos:end="21:34">extended_addresses_enabled</name><argument_list pos:start="21:35" pos:end="21:39">(<argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><name pos:start="21:36" pos:end="21:38">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:42" pos:end="57:5">{<block_content pos:start="31:9" pos:end="55:34">

        <comment type="block" pos:start="23:9" pos:end="29:11">/* ret is a DFSR/IFSR value for the long descriptor

         * translation table format, but with WnR always clear.

         * Convert it to a 64-bit PAR.

         */</comment>

        <decl_stmt pos:start="31:9" pos:end="31:35"><decl pos:start="31:9" pos:end="31:34"><type pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:16">uint64_t</name></type> <name pos:start="31:18" pos:end="31:22">par64</name> <init pos:start="31:24" pos:end="31:34">= <expr pos:start="31:26" pos:end="31:34"><operator pos:start="31:26" pos:end="31:26">(</operator><literal type="number" pos:start="31:27" pos:end="31:27">1</literal> <operator pos:start="31:29" pos:end="31:30">&lt;&lt;</operator> <literal type="number" pos:start="31:32" pos:end="31:33">11</literal><operator pos:start="31:34" pos:end="31:34">)</operator></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="31:37" pos:end="31:61">/* LPAE bit always set */</comment>

        <if_stmt pos:start="33:9" pos:end="53:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:21">(<expr pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:18">==</operator> <literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>)</condition> <block pos:start="33:23" pos:end="39:9">{<block_content pos:start="35:13" pos:end="35:43">

            <expr_stmt pos:start="35:13" pos:end="35:43"><expr pos:start="35:13" pos:end="35:42"><name pos:start="35:13" pos:end="35:17">par64</name> <operator pos:start="35:19" pos:end="35:20">|=</operator> <name pos:start="35:22" pos:end="35:30">phys_addr</name> <operator pos:start="35:32" pos:end="35:32">&amp;</operator> <operator pos:start="35:34" pos:end="35:34">~</operator><literal type="number" pos:start="35:35" pos:end="35:42">0xfffULL</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="37:13" pos:end="37:64">/* We don't set the ATTR or SH fields in the PAR. */</comment>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="53:9">else <block pos:start="39:16" pos:end="53:9">{<block_content pos:start="41:13" pos:end="43:39">

            <expr_stmt pos:start="41:13" pos:end="41:23"><expr pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:17">par64</name> <operator pos:start="41:19" pos:end="41:20">|=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="41:25" pos:end="41:31">/* F */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:39"><expr pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:17">par64</name> <operator pos:start="43:19" pos:end="43:20">|=</operator> <operator pos:start="43:22" pos:end="43:22">(</operator><name pos:start="43:23" pos:end="43:25">ret</name> <operator pos:start="43:27" pos:end="43:27">&amp;</operator> <literal type="number" pos:start="43:29" pos:end="43:32">0x3f</literal><operator pos:start="43:33" pos:end="43:33">)</operator> <operator pos:start="43:35" pos:end="43:36">&lt;&lt;</operator> <literal type="number" pos:start="43:38" pos:end="43:38">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="43:41" pos:end="43:48">/* FS */</comment>

            <comment type="block" pos:start="45:13" pos:end="51:15">/* Note that S2WLK and FSTAGE are always zero, because we don't

             * implement virtualization and therefore there can't be a stage 2

             * fault.

             */</comment>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:11">env</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:17">cp15</name><operator pos:start="55:18" pos:end="55:18">.</operator><name pos:start="55:19" pos:end="55:25">par_el1</name></name> <operator pos:start="55:27" pos:end="55:27">=</operator> <name pos:start="55:29" pos:end="55:33">par64</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="93:5">else <block pos:start="57:12" pos:end="93:5">{<block_content pos:start="67:9" pos:end="91:9">

        <comment type="block" pos:start="59:9" pos:end="65:11">/* ret is a DFSR/IFSR value for the short descriptor

         * translation table format (with WnR always clear).

         * Convert it to a 32-bit PAR.

         */</comment>

        <if_stmt pos:start="67:9" pos:end="91:9"><if pos:start="67:9" pos:end="83:9">if <condition pos:start="67:12" pos:end="67:21">(<expr pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:18">==</operator> <literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>)</condition> <block pos:start="67:23" pos:end="83:9">{<block_content pos:start="71:13" pos:end="81:13">

            <comment type="block" pos:start="69:13" pos:end="69:61">/* We do not set any attribute bits in the PAR */</comment>

            <if_stmt pos:start="71:13" pos:end="81:13"><if pos:start="71:13" pos:end="77:13">if <condition pos:start="71:16" pos:end="73:52">(<expr pos:start="71:17" pos:end="73:51"><name pos:start="71:17" pos:end="71:25">page_size</name> <operator pos:start="71:27" pos:end="71:28">==</operator> <operator pos:start="71:30" pos:end="71:30">(</operator><literal type="number" pos:start="71:31" pos:end="71:31">1</literal> <operator pos:start="71:33" pos:end="71:34">&lt;&lt;</operator> <literal type="number" pos:start="71:36" pos:end="71:37">24</literal><operator pos:start="71:38" pos:end="71:38">)</operator>

                <operator pos:start="73:17" pos:end="73:18">&amp;&amp;</operator> <call pos:start="73:20" pos:end="73:51"><name pos:start="73:20" pos:end="73:30">arm_feature</name><argument_list pos:start="73:31" pos:end="73:51">(<argument pos:start="73:32" pos:end="73:34"><expr pos:start="73:32" pos:end="73:34"><name pos:start="73:32" pos:end="73:34">env</name></expr></argument>, <argument pos:start="73:37" pos:end="73:50"><expr pos:start="73:37" pos:end="73:50"><name pos:start="73:37" pos:end="73:50">ARM_FEATURE_V7</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:54" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:70">

                <expr_stmt pos:start="75:17" pos:end="75:70"><expr pos:start="75:17" pos:end="75:69"><name pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:19">env</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:25">cp15</name><operator pos:start="75:26" pos:end="75:26">.</operator><name pos:start="75:27" pos:end="75:33">par_el1</name></name> <operator pos:start="75:35" pos:end="75:35">=</operator> <operator pos:start="75:37" pos:end="75:37">(</operator><name pos:start="75:38" pos:end="75:46">phys_addr</name> <operator pos:start="75:48" pos:end="75:48">&amp;</operator> <literal type="number" pos:start="75:50" pos:end="75:59">0xff000000</literal><operator pos:start="75:60" pos:end="75:60">)</operator> <operator pos:start="75:62" pos:end="75:62">|</operator> <literal type="number" pos:start="75:64" pos:end="75:64">1</literal> <operator pos:start="75:66" pos:end="75:67">&lt;&lt;</operator> <literal type="number" pos:start="75:69" pos:end="75:69">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="77:15" pos:end="81:13">else <block pos:start="77:20" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:59">

                <expr_stmt pos:start="79:17" pos:end="79:59"><expr pos:start="79:17" pos:end="79:58"><name pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:19">env</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:25">cp15</name><operator pos:start="79:26" pos:end="79:26">.</operator><name pos:start="79:27" pos:end="79:33">par_el1</name></name> <operator pos:start="79:35" pos:end="79:35">=</operator> <name pos:start="79:37" pos:end="79:45">phys_addr</name> <operator pos:start="79:47" pos:end="79:47">&amp;</operator> <literal type="number" pos:start="79:49" pos:end="79:58">0xfffff000</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="91:9">else <block pos:start="83:16" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:39">

            <expr_stmt pos:start="85:13" pos:end="89:39"><expr pos:start="85:13" pos:end="89:38"><name pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:15">env</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:21">cp15</name><operator pos:start="85:22" pos:end="85:22">.</operator><name pos:start="85:23" pos:end="85:29">par_el1</name></name> <operator pos:start="85:31" pos:end="85:31">=</operator> <operator pos:start="85:33" pos:end="85:33">(</operator><operator pos:start="85:34" pos:end="85:34">(</operator><name pos:start="85:35" pos:end="85:37">ret</name> <operator pos:start="85:39" pos:end="85:39">&amp;</operator> <operator pos:start="85:41" pos:end="85:41">(</operator><literal type="number" pos:start="85:42" pos:end="85:42">1</literal> <operator pos:start="85:44" pos:end="85:45">&lt;&lt;</operator> <literal type="number" pos:start="85:47" pos:end="85:48">10</literal><operator pos:start="85:49" pos:end="85:49">)</operator><operator pos:start="85:50" pos:end="85:50">)</operator> <operator pos:start="85:52" pos:end="85:53">&gt;&gt;</operator> <literal type="number" pos:start="85:55" pos:end="85:55">5</literal><operator pos:start="85:56" pos:end="85:56">)</operator> <operator pos:start="85:58" pos:end="85:58">|</operator>

                <operator pos:start="87:17" pos:end="87:17">(</operator><operator pos:start="87:18" pos:end="87:18">(</operator><name pos:start="87:19" pos:end="87:21">ret</name> <operator pos:start="87:23" pos:end="87:23">&amp;</operator> <operator pos:start="87:25" pos:end="87:25">(</operator><literal type="number" pos:start="87:26" pos:end="87:26">1</literal> <operator pos:start="87:28" pos:end="87:29">&lt;&lt;</operator> <literal type="number" pos:start="87:31" pos:end="87:32">12</literal><operator pos:start="87:33" pos:end="87:33">)</operator><operator pos:start="87:34" pos:end="87:34">)</operator> <operator pos:start="87:36" pos:end="87:37">&gt;&gt;</operator> <literal type="number" pos:start="87:39" pos:end="87:39">6</literal><operator pos:start="87:40" pos:end="87:40">)</operator> <operator pos:start="87:42" pos:end="87:42">|</operator>

                <operator pos:start="89:17" pos:end="89:17">(</operator><operator pos:start="89:18" pos:end="89:18">(</operator><name pos:start="89:19" pos:end="89:21">ret</name> <operator pos:start="89:23" pos:end="89:23">&amp;</operator> <literal type="number" pos:start="89:25" pos:end="89:27">0xf</literal><operator pos:start="89:28" pos:end="89:28">)</operator> <operator pos:start="89:30" pos:end="89:31">&lt;&lt;</operator> <literal type="number" pos:start="89:33" pos:end="89:33">1</literal><operator pos:start="89:34" pos:end="89:34">)</operator> <operator pos:start="89:36" pos:end="89:36">|</operator> <literal type="number" pos:start="89:38" pos:end="89:38">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
