<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3470.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">frame_thread_init</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:15">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">thread_count</name> <init pos:start="5:22" pos:end="5:42">= <expr pos:start="5:24" pos:end="5:42"><name pos:start="5:24" pos:end="5:42"><name pos:start="5:24" pos:end="5:28">avctx</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:42">thread_count</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVCodec</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">codec</name> <init pos:start="7:20" pos:end="7:33">= <expr pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:26">avctx</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:33">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVCodecContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">src</name> <init pos:start="9:25" pos:end="9:31">= <expr pos:start="9:27" pos:end="9:31"><name pos:start="9:27" pos:end="9:31">avctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22">FrameThreadContext</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:28">fctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:14">err</name> <init pos:start="13:16" pos:end="13:18">= <expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:21">thread_count</name></expr>)</condition> <block pos:start="17:24" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:61">

        <decl_stmt pos:start="19:9" pos:end="19:46"><decl pos:start="19:9" pos:end="19:45"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:19">nb_cpus</name> <init pos:start="19:21" pos:end="19:45">= <expr pos:start="19:23" pos:end="19:45"><call pos:start="19:23" pos:end="19:45"><name pos:start="19:23" pos:end="19:38">get_logical_cpus</name><argument_list pos:start="19:39" pos:end="19:45">(<argument pos:start="19:40" pos:end="19:44"><expr pos:start="19:40" pos:end="19:44"><name pos:start="19:40" pos:end="19:44">avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="21:9" pos:end="21:77">// use number of cores + 1 as thread count if there is motre than one</comment>

        <if_stmt pos:start="23:9" pos:end="25:61"><if pos:start="23:9" pos:end="25:61">if <condition pos:start="23:12" pos:end="23:24">(<expr pos:start="23:13" pos:end="23:23"><name pos:start="23:13" pos:end="23:19">nb_cpus</name> <operator pos:start="23:21" pos:end="23:21">&gt;</operator> <literal type="number" pos:start="23:23" pos:end="23:23">1</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:61"><block_content pos:start="25:13" pos:end="25:61">

            <expr_stmt pos:start="25:13" pos:end="25:61"><expr pos:start="25:13" pos:end="25:60"><name pos:start="25:13" pos:end="25:24">thread_count</name> <operator pos:start="25:26" pos:end="25:26">=</operator> <name pos:start="25:28" pos:end="25:46"><name pos:start="25:28" pos:end="25:32">avctx</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:46">thread_count</name></name> <operator pos:start="25:48" pos:end="25:48">=</operator> <name pos:start="25:50" pos:end="25:56">nb_cpus</name> <operator pos:start="25:58" pos:end="25:58">+</operator> <literal type="number" pos:start="25:60" pos:end="25:60">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:26">(<expr pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:20">thread_count</name> <operator pos:start="31:22" pos:end="31:23">&lt;=</operator> <literal type="number" pos:start="31:25" pos:end="31:25">1</literal></expr>)</condition> <block pos:start="31:28" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:38"><expr pos:start="33:9" pos:end="33:37"><name pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:13">avctx</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:33">active_thread_type</name></name> <operator pos:start="33:35" pos:end="33:35">=</operator> <literal type="number" pos:start="33:37" pos:end="33:37">0</literal></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:73"><expr pos:start="41:5" pos:end="41:72"><name pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:9">avctx</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:24">thread_opaque</name></name> <operator pos:start="41:26" pos:end="41:26">=</operator> <name pos:start="41:28" pos:end="41:31">fctx</name> <operator pos:start="41:33" pos:end="41:33">=</operator> <call pos:start="41:35" pos:end="41:72"><name pos:start="41:35" pos:end="41:44">av_mallocz</name><argument_list pos:start="41:45" pos:end="41:72">(<argument pos:start="41:46" pos:end="41:71"><expr pos:start="41:46" pos:end="41:71"><sizeof pos:start="41:46" pos:end="41:71">sizeof<argument_list pos:start="41:52" pos:end="41:71">(<argument pos:start="41:53" pos:end="41:70"><expr pos:start="41:53" pos:end="41:70"><name pos:start="41:53" pos:end="41:70">FrameThreadContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:72"><expr pos:start="45:5" pos:end="45:71"><name pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:8">fctx</name><operator pos:start="45:9" pos:end="45:10">-&gt;</operator><name pos:start="45:11" pos:end="45:17">threads</name></name> <operator pos:start="45:19" pos:end="45:19">=</operator> <call pos:start="45:21" pos:end="45:71"><name pos:start="45:21" pos:end="45:30">av_mallocz</name><argument_list pos:start="45:31" pos:end="45:71">(<argument pos:start="45:32" pos:end="45:70"><expr pos:start="45:32" pos:end="45:70"><sizeof pos:start="45:32" pos:end="45:55">sizeof<argument_list pos:start="45:38" pos:end="45:55">(<argument pos:start="45:39" pos:end="45:54"><expr pos:start="45:39" pos:end="45:54"><name pos:start="45:39" pos:end="45:54">PerThreadContext</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:57" pos:end="45:57">*</operator> <name pos:start="45:59" pos:end="45:70">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:50"><expr pos:start="47:5" pos:end="47:49"><call pos:start="47:5" pos:end="47:49"><name pos:start="47:5" pos:end="47:22">pthread_mutex_init</name><argument_list pos:start="47:23" pos:end="47:49">(<argument pos:start="47:24" pos:end="47:42"><expr pos:start="47:24" pos:end="47:42"><operator pos:start="47:24" pos:end="47:24">&amp;</operator><name pos:start="47:25" pos:end="47:42"><name pos:start="47:25" pos:end="47:28">fctx</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:42">buffer_mutex</name></name></expr></argument>, <argument pos:start="47:45" pos:end="47:48"><expr pos:start="47:45" pos:end="47:48"><name pos:start="47:45" pos:end="47:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:23"><expr pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:8">fctx</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:18">delaying</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <literal type="number" pos:start="49:22" pos:end="49:22">1</literal></expr>;</expr_stmt>



    <for pos:start="53:5" pos:end="157:5">for <control pos:start="53:9" pos:end="53:38">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:33"><expr pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:32">thread_count</name></expr>;</condition> <incr pos:start="53:35" pos:end="53:37"><expr pos:start="53:35" pos:end="53:37"><name pos:start="53:35" pos:end="53:35">i</name><operator pos:start="53:36" pos:end="53:37">++</operator></expr></incr>)</control> <block pos:start="53:40" pos:end="157:5">{<block_content pos:start="55:9" pos:end="155:31">

        <decl_stmt pos:start="55:9" pos:end="55:65"><decl pos:start="55:9" pos:end="55:64"><type pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:22">AVCodecContext</name> <modifier pos:start="55:24" pos:end="55:24">*</modifier></type><name pos:start="55:25" pos:end="55:28">copy</name> <init pos:start="55:30" pos:end="55:64">= <expr pos:start="55:32" pos:end="55:64"><call pos:start="55:32" pos:end="55:64"><name pos:start="55:32" pos:end="55:40">av_malloc</name><argument_list pos:start="55:41" pos:end="55:64">(<argument pos:start="55:42" pos:end="55:63"><expr pos:start="55:42" pos:end="55:63"><sizeof pos:start="55:42" pos:end="55:63">sizeof<argument_list pos:start="55:48" pos:end="55:63">(<argument pos:start="55:49" pos:end="55:62"><expr pos:start="55:49" pos:end="55:62"><name pos:start="55:49" pos:end="55:62">AVCodecContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:49"><decl pos:start="57:9" pos:end="57:48"><type pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:24">PerThreadContext</name> <modifier pos:start="57:26" pos:end="57:26">*</modifier></type><name pos:start="57:27" pos:end="57:27">p</name>  <init pos:start="57:30" pos:end="57:48">= <expr pos:start="57:32" pos:end="57:48"><operator pos:start="57:32" pos:end="57:32">&amp;</operator><name pos:start="57:33" pos:end="57:48"><name pos:start="57:33" pos:end="57:36">fctx</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:45">threads</name><index pos:start="57:46" pos:end="57:48">[<expr pos:start="57:47" pos:end="57:47"><name pos:start="57:47" pos:end="57:47">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:44"><expr pos:start="61:9" pos:end="61:43"><call pos:start="61:9" pos:end="61:43"><name pos:start="61:9" pos:end="61:26">pthread_mutex_init</name><argument_list pos:start="61:27" pos:end="61:43">(<argument pos:start="61:28" pos:end="61:36"><expr pos:start="61:28" pos:end="61:36"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:36"><name pos:start="61:29" pos:end="61:29">p</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:36">mutex</name></name></expr></argument>, <argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><name pos:start="61:39" pos:end="61:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:53"><expr pos:start="63:9" pos:end="63:52"><call pos:start="63:9" pos:end="63:52"><name pos:start="63:9" pos:end="63:26">pthread_mutex_init</name><argument_list pos:start="63:27" pos:end="63:52">(<argument pos:start="63:28" pos:end="63:45"><expr pos:start="63:28" pos:end="63:45"><operator pos:start="63:28" pos:end="63:28">&amp;</operator><name pos:start="63:29" pos:end="63:45"><name pos:start="63:29" pos:end="63:29">p</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:45">progress_mutex</name></name></expr></argument>, <argument pos:start="63:48" pos:end="63:51"><expr pos:start="63:48" pos:end="63:51"><name pos:start="63:48" pos:end="63:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:48"><expr pos:start="65:9" pos:end="65:47"><call pos:start="65:9" pos:end="65:47"><name pos:start="65:9" pos:end="65:25">pthread_cond_init</name><argument_list pos:start="65:26" pos:end="65:47">(<argument pos:start="65:27" pos:end="65:40"><expr pos:start="65:27" pos:end="65:40"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:40"><name pos:start="65:28" pos:end="65:28">p</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:40">input_cond</name></name></expr></argument>, <argument pos:start="65:43" pos:end="65:46"><expr pos:start="65:43" pos:end="65:46"><name pos:start="65:43" pos:end="65:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><call pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:25">pthread_cond_init</name><argument_list pos:start="67:26" pos:end="67:50">(<argument pos:start="67:27" pos:end="67:43"><expr pos:start="67:27" pos:end="67:43"><operator pos:start="67:27" pos:end="67:27">&amp;</operator><name pos:start="67:28" pos:end="67:43"><name pos:start="67:28" pos:end="67:28">p</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:43">progress_cond</name></name></expr></argument>, <argument pos:start="67:46" pos:end="67:49"><expr pos:start="67:46" pos:end="67:49"><name pos:start="67:46" pos:end="67:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:49"><expr pos:start="69:9" pos:end="69:48"><call pos:start="69:9" pos:end="69:48"><name pos:start="69:9" pos:end="69:25">pthread_cond_init</name><argument_list pos:start="69:26" pos:end="69:48">(<argument pos:start="69:27" pos:end="69:41"><expr pos:start="69:27" pos:end="69:41"><operator pos:start="69:27" pos:end="69:27">&amp;</operator><name pos:start="69:28" pos:end="69:41"><name pos:start="69:28" pos:end="69:28">p</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:41">output_cond</name></name></expr></argument>, <argument pos:start="69:44" pos:end="69:47"><expr pos:start="69:44" pos:end="69:47"><name pos:start="69:44" pos:end="69:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:25"><expr pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:9">p</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:17">parent</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:24">fctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:25"><expr pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:9">p</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:16">avctx</name></name>  <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:24">copy</name></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:18">(<expr pos:start="79:13" pos:end="79:17"><operator pos:start="79:13" pos:end="79:13">!</operator><name pos:start="79:14" pos:end="79:17">copy</name></expr>)</condition> <block pos:start="79:20" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:23">

            <expr_stmt pos:start="81:13" pos:end="81:34"><expr pos:start="81:13" pos:end="81:33"><name pos:start="81:13" pos:end="81:15">err</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:33"><name pos:start="81:19" pos:end="81:25">AVERROR</name><argument_list pos:start="81:26" pos:end="81:33">(<argument pos:start="81:27" pos:end="81:32"><expr pos:start="81:27" pos:end="81:32"><name pos:start="81:27" pos:end="81:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="83:13" pos:end="83:23">goto <name pos:start="83:18" pos:end="83:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:21"><expr pos:start="89:9" pos:end="89:20"><operator pos:start="89:9" pos:end="89:9">*</operator><name pos:start="89:10" pos:end="89:13">copy</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <operator pos:start="89:17" pos:end="89:17">*</operator><name pos:start="89:18" pos:end="89:20">src</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:32"><expr pos:start="91:9" pos:end="91:31"><name pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:12">copy</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:27">thread_opaque</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:31">p</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:30"><expr pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:12">copy</name><operator pos:start="93:13" pos:end="93:14">-&gt;</operator><name pos:start="93:15" pos:end="93:17">pkt</name></name> <operator pos:start="93:19" pos:end="93:19">=</operator> <operator pos:start="93:21" pos:end="93:21">&amp;</operator><name pos:start="93:22" pos:end="93:29"><name pos:start="93:22" pos:end="93:22">p</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:29">avpkt</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="97:9" pos:end="145:9"><if pos:start="97:9" pos:end="111:9">if <condition pos:start="97:12" pos:end="97:15">(<expr pos:start="97:13" pos:end="97:14"><operator pos:start="97:13" pos:end="97:13">!</operator><name pos:start="97:14" pos:end="97:14">i</name></expr>)</condition> <block pos:start="97:17" pos:end="111:9">{<block_content pos:start="99:13" pos:end="109:55">

            <expr_stmt pos:start="99:13" pos:end="99:23"><expr pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:15">src</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <name pos:start="99:19" pos:end="99:22">copy</name></expr>;</expr_stmt>



            <if_stmt pos:start="103:13" pos:end="105:40"><if pos:start="103:13" pos:end="105:40">if <condition pos:start="103:16" pos:end="103:28">(<expr pos:start="103:17" pos:end="103:27"><name pos:start="103:17" pos:end="103:27"><name pos:start="103:17" pos:end="103:21">codec</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:27">init</name></name></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:40"><block_content pos:start="105:17" pos:end="105:40">

                <expr_stmt pos:start="105:17" pos:end="105:40"><expr pos:start="105:17" pos:end="105:39"><name pos:start="105:17" pos:end="105:19">err</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <call pos:start="105:23" pos:end="105:39"><name pos:start="105:23" pos:end="105:33"><name pos:start="105:23" pos:end="105:27">codec</name><operator pos:start="105:28" pos:end="105:29">-&gt;</operator><name pos:start="105:30" pos:end="105:33">init</name></name><argument_list pos:start="105:34" pos:end="105:39">(<argument pos:start="105:35" pos:end="105:38"><expr pos:start="105:35" pos:end="105:38"><name pos:start="105:35" pos:end="105:38">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:55"><expr pos:start="109:13" pos:end="109:54"><call pos:start="109:13" pos:end="109:54"><name pos:start="109:13" pos:end="109:38">update_context_from_thread</name><argument_list pos:start="109:39" pos:end="109:54">(<argument pos:start="109:40" pos:end="109:44"><expr pos:start="109:40" pos:end="109:44"><name pos:start="109:40" pos:end="109:44">avctx</name></expr></argument>, <argument pos:start="109:47" pos:end="109:50"><expr pos:start="109:47" pos:end="109:50"><name pos:start="109:47" pos:end="109:50">copy</name></expr></argument>, <argument pos:start="109:53" pos:end="109:53"><expr pos:start="109:53" pos:end="109:53"><literal type="number" pos:start="109:53" pos:end="109:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="111:11" pos:end="145:9">else <block pos:start="111:16" pos:end="145:9">{<block_content pos:start="113:13" pos:end="143:52">

            <expr_stmt pos:start="113:13" pos:end="113:63"><expr pos:start="113:13" pos:end="113:62"><name pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:16">copy</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:27">priv_data</name></name> <operator pos:start="113:29" pos:end="113:29">=</operator> <call pos:start="113:31" pos:end="113:62"><name pos:start="113:31" pos:end="113:39">av_malloc</name><argument_list pos:start="113:40" pos:end="113:62">(<argument pos:start="113:41" pos:end="113:61"><expr pos:start="113:41" pos:end="113:61"><name pos:start="113:41" pos:end="113:61"><name pos:start="113:41" pos:end="113:45">codec</name><operator pos:start="113:46" pos:end="113:47">-&gt;</operator><name pos:start="113:48" pos:end="113:61">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="121:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:33">(<expr pos:start="115:17" pos:end="115:32"><operator pos:start="115:17" pos:end="115:17">!</operator><name pos:start="115:18" pos:end="115:32"><name pos:start="115:18" pos:end="115:21">copy</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:32">priv_data</name></name></expr>)</condition> <block pos:start="115:35" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:27">

                <expr_stmt pos:start="117:17" pos:end="117:38"><expr pos:start="117:17" pos:end="117:37"><name pos:start="117:17" pos:end="117:19">err</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:37"><name pos:start="117:23" pos:end="117:29">AVERROR</name><argument_list pos:start="117:30" pos:end="117:37">(<argument pos:start="117:31" pos:end="117:36"><expr pos:start="117:31" pos:end="117:36"><name pos:start="117:31" pos:end="117:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="119:17" pos:end="119:27">goto <name pos:start="119:22" pos:end="119:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:75"><expr pos:start="123:13" pos:end="123:74"><call pos:start="123:13" pos:end="123:74"><name pos:start="123:13" pos:end="123:18">memcpy</name><argument_list pos:start="123:19" pos:end="123:74">(<argument pos:start="123:20" pos:end="123:34"><expr pos:start="123:20" pos:end="123:34"><name pos:start="123:20" pos:end="123:34"><name pos:start="123:20" pos:end="123:23">copy</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:34">priv_data</name></name></expr></argument>, <argument pos:start="123:37" pos:end="123:50"><expr pos:start="123:37" pos:end="123:50"><name pos:start="123:37" pos:end="123:50"><name pos:start="123:37" pos:end="123:39">src</name><operator pos:start="123:40" pos:end="123:41">-&gt;</operator><name pos:start="123:42" pos:end="123:50">priv_data</name></name></expr></argument>, <argument pos:start="123:53" pos:end="123:73"><expr pos:start="123:53" pos:end="123:73"><name pos:start="123:53" pos:end="123:73"><name pos:start="123:53" pos:end="123:57">codec</name><operator pos:start="123:58" pos:end="123:59">-&gt;</operator><name pos:start="123:60" pos:end="123:73">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:64"><expr pos:start="125:13" pos:end="125:63"><name pos:start="125:13" pos:end="125:26"><name pos:start="125:13" pos:end="125:16">copy</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:26">internal</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <call pos:start="125:30" pos:end="125:63"><name pos:start="125:30" pos:end="125:38">av_malloc</name><argument_list pos:start="125:39" pos:end="125:63">(<argument pos:start="125:40" pos:end="125:62"><expr pos:start="125:40" pos:end="125:62"><sizeof pos:start="125:40" pos:end="125:62">sizeof<argument_list pos:start="125:46" pos:end="125:62">(<argument pos:start="125:47" pos:end="125:61"><expr pos:start="125:47" pos:end="125:61"><name pos:start="125:47" pos:end="125:61">AVCodecInternal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="133:13"><if pos:start="127:13" pos:end="133:13">if <condition pos:start="127:16" pos:end="127:32">(<expr pos:start="127:17" pos:end="127:31"><operator pos:start="127:17" pos:end="127:17">!</operator><name pos:start="127:18" pos:end="127:31"><name pos:start="127:18" pos:end="127:21">copy</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:31">internal</name></name></expr>)</condition> <block pos:start="127:34" pos:end="133:13">{<block_content pos:start="129:17" pos:end="131:27">

                <expr_stmt pos:start="129:17" pos:end="129:38"><expr pos:start="129:17" pos:end="129:37"><name pos:start="129:17" pos:end="129:19">err</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <call pos:start="129:23" pos:end="129:37"><name pos:start="129:23" pos:end="129:29">AVERROR</name><argument_list pos:start="129:30" pos:end="129:37">(<argument pos:start="129:31" pos:end="129:36"><expr pos:start="129:31" pos:end="129:36"><name pos:start="129:31" pos:end="129:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="131:17" pos:end="131:27">goto <name pos:start="131:22" pos:end="131:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:49"><expr pos:start="135:13" pos:end="135:48"><operator pos:start="135:13" pos:end="135:13">*</operator><operator pos:start="135:14" pos:end="135:14">(</operator><name pos:start="135:15" pos:end="135:28"><name pos:start="135:15" pos:end="135:18">copy</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:28">internal</name></name><operator pos:start="135:29" pos:end="135:29">)</operator> <operator pos:start="135:31" pos:end="135:31">=</operator> <operator pos:start="135:33" pos:end="135:33">*</operator><operator pos:start="135:34" pos:end="135:34">(</operator><name pos:start="135:35" pos:end="135:47"><name pos:start="135:35" pos:end="135:37">src</name><operator pos:start="135:38" pos:end="135:39">-&gt;</operator><name pos:start="135:40" pos:end="135:47">internal</name></name><operator pos:start="135:48" pos:end="135:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:40"><expr pos:start="137:13" pos:end="137:39"><name pos:start="137:13" pos:end="137:35"><name pos:start="137:13" pos:end="137:16">copy</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:26">internal</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:35">is_copy</name></name> <operator pos:start="137:37" pos:end="137:37">=</operator> <literal type="number" pos:start="137:39" pos:end="137:39">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="141:13" pos:end="143:52"><if pos:start="141:13" pos:end="143:52">if <condition pos:start="141:16" pos:end="141:40">(<expr pos:start="141:17" pos:end="141:39"><name pos:start="141:17" pos:end="141:39"><name pos:start="141:17" pos:end="141:21">codec</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:39">init_thread_copy</name></name></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:52"><block_content pos:start="143:17" pos:end="143:52">

                <expr_stmt pos:start="143:17" pos:end="143:52"><expr pos:start="143:17" pos:end="143:51"><name pos:start="143:17" pos:end="143:19">err</name> <operator pos:start="143:21" pos:end="143:21">=</operator> <call pos:start="143:23" pos:end="143:51"><name pos:start="143:23" pos:end="143:45"><name pos:start="143:23" pos:end="143:27">codec</name><operator pos:start="143:28" pos:end="143:29">-&gt;</operator><name pos:start="143:30" pos:end="143:45">init_thread_copy</name></name><argument_list pos:start="143:46" pos:end="143:51">(<argument pos:start="143:47" pos:end="143:50"><expr pos:start="143:47" pos:end="143:50"><name pos:start="143:47" pos:end="143:50">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="149:9" pos:end="149:28"><if pos:start="149:9" pos:end="149:28">if <condition pos:start="149:12" pos:end="149:16">(<expr pos:start="149:13" pos:end="149:15"><name pos:start="149:13" pos:end="149:15">err</name></expr>)</condition><block type="pseudo" pos:start="149:18" pos:end="149:28"><block_content pos:start="149:18" pos:end="149:28"> <goto pos:start="149:18" pos:end="149:28">goto <name pos:start="149:23" pos:end="149:27">error</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="153:9" pos:end="155:31"><if pos:start="153:9" pos:end="155:31">if <condition pos:start="153:12" pos:end="153:70">(<expr pos:start="153:13" pos:end="153:69"><operator pos:start="153:13" pos:end="153:13">!</operator><call pos:start="153:14" pos:end="153:69"><name pos:start="153:14" pos:end="153:27">pthread_create</name><argument_list pos:start="153:28" pos:end="153:69">(<argument pos:start="153:29" pos:end="153:38"><expr pos:start="153:29" pos:end="153:38"><operator pos:start="153:29" pos:end="153:29">&amp;</operator><name pos:start="153:30" pos:end="153:38"><name pos:start="153:30" pos:end="153:30">p</name><operator pos:start="153:31" pos:end="153:32">-&gt;</operator><name pos:start="153:33" pos:end="153:38">thread</name></name></expr></argument>, <argument pos:start="153:41" pos:end="153:44"><expr pos:start="153:41" pos:end="153:44"><name pos:start="153:41" pos:end="153:44">NULL</name></expr></argument>, <argument pos:start="153:47" pos:end="153:65"><expr pos:start="153:47" pos:end="153:65"><name pos:start="153:47" pos:end="153:65">frame_worker_thread</name></expr></argument>, <argument pos:start="153:68" pos:end="153:68"><expr pos:start="153:68" pos:end="153:68"><name pos:start="153:68" pos:end="153:68">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:31"><block_content pos:start="155:13" pos:end="155:31">

            <expr_stmt pos:start="155:13" pos:end="155:31"><expr pos:start="155:13" pos:end="155:30"><name pos:start="155:13" pos:end="155:26"><name pos:start="155:13" pos:end="155:13">p</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:26">thread_init</name></name> <operator pos:start="155:28" pos:end="155:28">=</operator> <literal type="number" pos:start="155:30" pos:end="155:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>



<label pos:start="165:1" pos:end="165:6"><name pos:start="165:1" pos:end="165:5">error</name>:</label>

    <expr_stmt pos:start="167:5" pos:end="167:34"><expr pos:start="167:5" pos:end="167:33"><call pos:start="167:5" pos:end="167:33"><name pos:start="167:5" pos:end="167:21">frame_thread_free</name><argument_list pos:start="167:22" pos:end="167:33">(<argument pos:start="167:23" pos:end="167:27"><expr pos:start="167:23" pos:end="167:27"><name pos:start="167:23" pos:end="167:27">avctx</name></expr></argument>, <argument pos:start="167:30" pos:end="167:32"><expr pos:start="167:30" pos:end="167:32"><name pos:start="167:30" pos:end="167:30">i</name><operator pos:start="167:31" pos:end="167:31">+</operator><literal type="number" pos:start="167:32" pos:end="167:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="171:5" pos:end="171:15">return <expr pos:start="171:12" pos:end="171:14"><name pos:start="171:12" pos:end="171:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
