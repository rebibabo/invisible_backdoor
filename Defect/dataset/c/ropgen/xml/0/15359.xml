<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15359.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">msrle_decode_pal8</name><parameter_list pos:start="1:30" pos:end="1:46">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:42">MsrleContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="159:1">{<block_content pos:start="5:5" pos:end="157:33">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">stream_ptr</name> <init pos:start="5:20" pos:end="5:22">= <expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:26">rle_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:28">extra_byte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:29">stream_byte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">pixel_ptr</name> <init pos:start="13:19" pos:end="13:21">= <expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">row_dec</name> <init pos:start="15:17" pos:end="15:38">= <expr pos:start="15:19" pos:end="15:38"><name pos:start="15:19" pos:end="15:38"><name pos:start="15:19" pos:end="15:19">s</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:26">frame</name><operator pos:start="15:27" pos:end="15:27">.</operator><name pos:start="15:28" pos:end="15:35">linesize</name><index pos:start="15:36" pos:end="15:38">[<expr pos:start="15:37" pos:end="15:37"><literal type="number" pos:start="15:37" pos:end="15:37">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:51"><decl pos:start="17:5" pos:end="17:50"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">row_ptr</name> <init pos:start="17:17" pos:end="17:50">= <expr pos:start="17:19" pos:end="17:50"><operator pos:start="17:19" pos:end="17:19">(</operator><name pos:start="17:20" pos:end="17:35"><name pos:start="17:20" pos:end="17:20">s</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:27">avctx</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:35">height</name></name> <operator pos:start="17:37" pos:end="17:37">-</operator> <literal type="number" pos:start="17:39" pos:end="17:39">1</literal><operator pos:start="17:40" pos:end="17:40">)</operator> <operator pos:start="17:42" pos:end="17:42">*</operator> <name pos:start="17:44" pos:end="17:50">row_dec</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:48"><decl pos:start="19:5" pos:end="19:47"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">frame_size</name> <init pos:start="19:20" pos:end="19:47">= <expr pos:start="19:22" pos:end="19:47"><name pos:start="19:22" pos:end="19:28">row_dec</name> <operator pos:start="19:30" pos:end="19:30">*</operator> <name pos:start="19:32" pos:end="19:47"><name pos:start="19:32" pos:end="19:32">s</name><operator pos:start="19:33" pos:end="19:34">-&gt;</operator><name pos:start="19:35" pos:end="19:39">avctx</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:47">height</name></name></expr></init></decl>;</decl_stmt>



    <while pos:start="23:5" pos:end="141:5">while <condition pos:start="23:11" pos:end="23:24">(<expr pos:start="23:12" pos:end="23:23"><name pos:start="23:12" pos:end="23:18">row_ptr</name> <operator pos:start="23:20" pos:end="23:21">&gt;=</operator> <literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr>)</condition> <block pos:start="23:26" pos:end="141:5">{<block_content pos:start="25:9" pos:end="139:9">

        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><call pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:30">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="25:31" pos:end="25:32">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:16">rle_code</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <name pos:start="27:20" pos:end="27:30">stream_byte</name></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="139:9"><if pos:start="29:9" pos:end="111:9">if <condition pos:start="29:12" pos:end="29:26">(<expr pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:20">rle_code</name> <operator pos:start="29:22" pos:end="29:23">==</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>)</condition> <block pos:start="29:28" pos:end="111:9">{<block_content pos:start="33:13" pos:end="109:13">

            <comment type="block" pos:start="31:13" pos:end="31:70">/* fetch the next byte to see how to handle escape code */</comment>

            <expr_stmt pos:start="33:13" pos:end="33:37"><expr pos:start="33:13" pos:end="33:36"><call pos:start="33:13" pos:end="33:36"><name pos:start="33:13" pos:end="33:34">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="33:35" pos:end="33:36">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="109:13"><if pos:start="35:13" pos:end="43:13">if <condition pos:start="35:16" pos:end="35:33">(<expr pos:start="35:17" pos:end="35:32"><name pos:start="35:17" pos:end="35:27">stream_byte</name> <operator pos:start="35:29" pos:end="35:30">==</operator> <literal type="number" pos:start="35:32" pos:end="35:32">0</literal></expr>)</condition> <block pos:start="35:35" pos:end="43:13">{<block_content pos:start="39:17" pos:end="41:30">

                <comment type="block" pos:start="37:17" pos:end="37:53">/* line is done, goto the next one */</comment>

                <expr_stmt pos:start="39:17" pos:end="39:35"><expr pos:start="39:17" pos:end="39:34"><name pos:start="39:17" pos:end="39:23">row_ptr</name> <operator pos:start="39:25" pos:end="39:26">-=</operator> <name pos:start="39:28" pos:end="39:34">row_dec</name></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:30"><expr pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:25">pixel_ptr</name> <operator pos:start="41:27" pos:end="41:27">=</operator> <literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="43:15" pos:end="49:13">else if <condition pos:start="43:23" pos:end="43:40">(<expr pos:start="43:24" pos:end="43:39"><name pos:start="43:24" pos:end="43:34">stream_byte</name> <operator pos:start="43:36" pos:end="43:37">==</operator> <literal type="number" pos:start="43:39" pos:end="43:39">1</literal></expr>)</condition> <block pos:start="43:42" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:23">

                <comment type="block" pos:start="45:17" pos:end="45:36">/* decode is done */</comment>

                <return pos:start="47:17" pos:end="47:23">return;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="49:15" pos:end="61:13">else if <condition pos:start="49:23" pos:end="49:40">(<expr pos:start="49:24" pos:end="49:39"><name pos:start="49:24" pos:end="49:34">stream_byte</name> <operator pos:start="49:36" pos:end="49:37">==</operator> <literal type="number" pos:start="49:39" pos:end="49:39">2</literal></expr>)</condition> <block pos:start="49:42" pos:end="61:13">{<block_content pos:start="53:17" pos:end="59:49">

                <comment type="block" pos:start="51:17" pos:end="51:57">/* reposition frame decode coordinates */</comment>

                <expr_stmt pos:start="53:17" pos:end="53:41"><expr pos:start="53:17" pos:end="53:40"><call pos:start="53:17" pos:end="53:40"><name pos:start="53:17" pos:end="53:38">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="53:39" pos:end="53:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:41"><expr pos:start="55:17" pos:end="55:40"><name pos:start="55:17" pos:end="55:25">pixel_ptr</name> <operator pos:start="55:27" pos:end="55:28">+=</operator> <name pos:start="55:30" pos:end="55:40">stream_byte</name></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:41"><expr pos:start="57:17" pos:end="57:40"><call pos:start="57:17" pos:end="57:40"><name pos:start="57:17" pos:end="57:38">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="57:39" pos:end="57:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:49"><expr pos:start="59:17" pos:end="59:48"><name pos:start="59:17" pos:end="59:23">row_ptr</name> <operator pos:start="59:25" pos:end="59:26">-=</operator> <name pos:start="59:28" pos:end="59:38">stream_byte</name> <operator pos:start="59:40" pos:end="59:40">*</operator> <name pos:start="59:42" pos:end="59:48">row_dec</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="61:15" pos:end="109:13">else <block pos:start="61:20" pos:end="109:13">{<block_content pos:start="65:17" pos:end="107:33">

                <comment type="block" pos:start="63:17" pos:end="63:53">/* copy pixels from encoded stream */</comment>

                <if_stmt pos:start="65:17" pos:end="73:17"><if pos:start="65:17" pos:end="73:17">if <condition pos:start="65:20" pos:end="67:34">(<expr pos:start="65:21" pos:end="67:33"><operator pos:start="65:21" pos:end="65:21">(</operator><name pos:start="65:22" pos:end="65:28">row_ptr</name> <operator pos:start="65:30" pos:end="65:30">+</operator> <name pos:start="65:32" pos:end="65:40">pixel_ptr</name> <operator pos:start="65:42" pos:end="65:42">+</operator> <name pos:start="65:44" pos:end="65:54">stream_byte</name> <operator pos:start="65:56" pos:end="65:56">&gt;</operator> <name pos:start="65:58" pos:end="65:67">frame_size</name><operator pos:start="65:68" pos:end="65:68">)</operator> <operator pos:start="65:70" pos:end="65:71">||</operator>

                    <operator pos:start="67:21" pos:end="67:21">(</operator><name pos:start="67:22" pos:end="67:28">row_ptr</name> <operator pos:start="67:30" pos:end="67:30">&lt;</operator> <literal type="number" pos:start="67:32" pos:end="67:32">0</literal><operator pos:start="67:33" pos:end="67:33">)</operator></expr>)</condition> <block pos:start="67:36" pos:end="73:17">{<block_content pos:start="69:21" pos:end="71:27">

                    <expr_stmt pos:start="69:21" pos:end="69:79"><expr pos:start="69:21" pos:end="69:78"><call pos:start="69:21" pos:end="69:78"><name pos:start="69:21" pos:end="69:26">printf</name><argument_list pos:start="69:27" pos:end="69:78">(<argument pos:start="69:28" pos:end="69:77"><expr pos:start="69:28" pos:end="69:77"><literal type="string" pos:start="69:28" pos:end="69:77">" MS RLE: frame ptr just went out of bounds (1)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="71:21" pos:end="71:27">return;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="77:17" pos:end="77:39"><expr pos:start="77:17" pos:end="77:38"><name pos:start="77:17" pos:end="77:24">rle_code</name> <operator pos:start="77:26" pos:end="77:26">=</operator> <name pos:start="77:28" pos:end="77:38">stream_byte</name></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:48"><expr pos:start="79:17" pos:end="79:47"><name pos:start="79:17" pos:end="79:26">extra_byte</name> <operator pos:start="79:28" pos:end="79:28">=</operator> <name pos:start="79:30" pos:end="79:40">stream_byte</name> <operator pos:start="79:42" pos:end="79:42">&amp;</operator> <literal type="number" pos:start="79:44" pos:end="79:47">0x01</literal></expr>;</expr_stmt>

                <if_stmt pos:start="81:17" pos:end="87:17"><if pos:start="81:17" pos:end="87:17">if <condition pos:start="81:20" pos:end="81:65">(<expr pos:start="81:21" pos:end="81:64"><name pos:start="81:21" pos:end="81:30">stream_ptr</name> <operator pos:start="81:32" pos:end="81:32">+</operator> <name pos:start="81:34" pos:end="81:41">rle_code</name> <operator pos:start="81:43" pos:end="81:43">+</operator> <name pos:start="81:45" pos:end="81:54">extra_byte</name> <operator pos:start="81:56" pos:end="81:56">&gt;</operator> <name pos:start="81:58" pos:end="81:64"><name pos:start="81:58" pos:end="81:58">s</name><operator pos:start="81:59" pos:end="81:60">-&gt;</operator><name pos:start="81:61" pos:end="81:64">size</name></name></expr>)</condition> <block pos:start="81:67" pos:end="87:17">{<block_content pos:start="83:21" pos:end="85:27">

                    <expr_stmt pos:start="83:21" pos:end="83:80"><expr pos:start="83:21" pos:end="83:79"><call pos:start="83:21" pos:end="83:79"><name pos:start="83:21" pos:end="83:26">printf</name><argument_list pos:start="83:27" pos:end="83:79">(<argument pos:start="83:28" pos:end="83:78"><expr pos:start="83:28" pos:end="83:78"><literal type="string" pos:start="83:28" pos:end="83:78">" MS RLE: stream ptr just went out of bounds (2)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="85:21" pos:end="85:27">return;</return>

                </block_content>}</block></if></if_stmt>



                <while pos:start="91:17" pos:end="99:17">while <condition pos:start="91:23" pos:end="91:34">(<expr pos:start="91:24" pos:end="91:33"><name pos:start="91:24" pos:end="91:31">rle_code</name><operator pos:start="91:32" pos:end="91:33">--</operator></expr>)</condition> <block pos:start="91:36" pos:end="99:17">{<block_content pos:start="93:21" pos:end="97:32">

                    <expr_stmt pos:start="93:21" pos:end="93:45"><expr pos:start="93:21" pos:end="93:44"><call pos:start="93:21" pos:end="93:44"><name pos:start="93:21" pos:end="93:42">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="93:43" pos:end="93:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="95:72"><expr pos:start="95:21" pos:end="95:71"><name pos:start="95:21" pos:end="95:57"><name pos:start="95:21" pos:end="95:21">s</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:28">frame</name><operator pos:start="95:29" pos:end="95:29">.</operator><name pos:start="95:30" pos:end="95:33">data</name><index pos:start="95:34" pos:end="95:36">[<expr pos:start="95:35" pos:end="95:35"><literal type="number" pos:start="95:35" pos:end="95:35">0</literal></expr>]</index><index pos:start="95:37" pos:end="95:57">[<expr pos:start="95:38" pos:end="95:56"><name pos:start="95:38" pos:end="95:44">row_ptr</name> <operator pos:start="95:46" pos:end="95:46">+</operator> <name pos:start="95:48" pos:end="95:56">pixel_ptr</name></expr>]</index></name> <operator pos:start="95:59" pos:end="95:59">=</operator> <name pos:start="95:61" pos:end="95:71">stream_byte</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:32"><expr pos:start="97:21" pos:end="97:31"><name pos:start="97:21" pos:end="97:29">pixel_ptr</name><operator pos:start="97:30" pos:end="97:31">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>



                <comment type="block" pos:start="103:17" pos:end="103:71">/* if the RLE code is odd, skip a byte in the stream */</comment>

                <if_stmt pos:start="105:17" pos:end="107:33"><if pos:start="105:17" pos:end="107:33">if <condition pos:start="105:20" pos:end="105:31">(<expr pos:start="105:21" pos:end="105:30"><name pos:start="105:21" pos:end="105:30">extra_byte</name></expr>)</condition><block type="pseudo" pos:start="107:21" pos:end="107:33"><block_content pos:start="107:21" pos:end="107:33">

                    <expr_stmt pos:start="107:21" pos:end="107:33"><expr pos:start="107:21" pos:end="107:32"><name pos:start="107:21" pos:end="107:30">stream_ptr</name><operator pos:start="107:31" pos:end="107:32">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="111:11" pos:end="139:9">else <block pos:start="111:16" pos:end="139:9">{<block_content pos:start="115:13" pos:end="137:13">

            <comment type="block" pos:start="113:13" pos:end="113:38">/* decode a run of data */</comment>

            <if_stmt pos:start="115:13" pos:end="123:13"><if pos:start="115:13" pos:end="123:13">if <condition pos:start="115:16" pos:end="117:30">(<expr pos:start="115:17" pos:end="117:29"><operator pos:start="115:17" pos:end="115:17">(</operator><name pos:start="115:18" pos:end="115:24">row_ptr</name> <operator pos:start="115:26" pos:end="115:26">+</operator> <name pos:start="115:28" pos:end="115:36">pixel_ptr</name> <operator pos:start="115:38" pos:end="115:38">+</operator> <name pos:start="115:40" pos:end="115:50">stream_byte</name> <operator pos:start="115:52" pos:end="115:52">&gt;</operator> <name pos:start="115:54" pos:end="115:63">frame_size</name><operator pos:start="115:64" pos:end="115:64">)</operator> <operator pos:start="115:66" pos:end="115:67">||</operator>

                <operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:24">row_ptr</name> <operator pos:start="117:26" pos:end="117:26">&lt;</operator> <literal type="number" pos:start="117:28" pos:end="117:28">0</literal><operator pos:start="117:29" pos:end="117:29">)</operator></expr>)</condition> <block pos:start="117:32" pos:end="123:13">{<block_content pos:start="119:17" pos:end="121:23">

                <expr_stmt pos:start="119:17" pos:end="119:75"><expr pos:start="119:17" pos:end="119:74"><call pos:start="119:17" pos:end="119:74"><name pos:start="119:17" pos:end="119:22">printf</name><argument_list pos:start="119:23" pos:end="119:74">(<argument pos:start="119:24" pos:end="119:73"><expr pos:start="119:24" pos:end="119:73"><literal type="string" pos:start="119:24" pos:end="119:73">" MS RLE: frame ptr just went out of bounds (2)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="121:17" pos:end="121:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="127:13" pos:end="127:37"><expr pos:start="127:13" pos:end="127:36"><call pos:start="127:13" pos:end="127:36"><name pos:start="127:13" pos:end="127:34">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="127:35" pos:end="127:36">()</argument_list></call></expr>;</expr_stmt>



            <while pos:start="131:13" pos:end="137:13">while<condition pos:start="131:18" pos:end="131:29">(<expr pos:start="131:19" pos:end="131:28"><name pos:start="131:19" pos:end="131:26">rle_code</name><operator pos:start="131:27" pos:end="131:28">--</operator></expr>)</condition> <block pos:start="131:31" pos:end="137:13">{<block_content pos:start="133:17" pos:end="135:28">

                <expr_stmt pos:start="133:17" pos:end="133:68"><expr pos:start="133:17" pos:end="133:67"><name pos:start="133:17" pos:end="133:53"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:24">frame</name><operator pos:start="133:25" pos:end="133:25">.</operator><name pos:start="133:26" pos:end="133:29">data</name><index pos:start="133:30" pos:end="133:32">[<expr pos:start="133:31" pos:end="133:31"><literal type="number" pos:start="133:31" pos:end="133:31">0</literal></expr>]</index><index pos:start="133:33" pos:end="133:53">[<expr pos:start="133:34" pos:end="133:52"><name pos:start="133:34" pos:end="133:40">row_ptr</name> <operator pos:start="133:42" pos:end="133:42">+</operator> <name pos:start="133:44" pos:end="133:52">pixel_ptr</name></expr>]</index></name> <operator pos:start="133:55" pos:end="133:55">=</operator> <name pos:start="133:57" pos:end="133:67">stream_byte</name></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:28"><expr pos:start="135:17" pos:end="135:27"><name pos:start="135:17" pos:end="135:25">pixel_ptr</name><operator pos:start="135:26" pos:end="135:27">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="145:5" pos:end="145:36">/* make the palette available */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:50"><expr pos:start="147:5" pos:end="147:49"><call pos:start="147:5" pos:end="147:49"><name pos:start="147:5" pos:end="147:10">memcpy</name><argument_list pos:start="147:11" pos:end="147:49">(<argument pos:start="147:12" pos:end="147:27"><expr pos:start="147:12" pos:end="147:27"><name pos:start="147:12" pos:end="147:27"><name pos:start="147:12" pos:end="147:12">s</name><operator pos:start="147:13" pos:end="147:14">-&gt;</operator><name pos:start="147:15" pos:end="147:19">frame</name><operator pos:start="147:20" pos:end="147:20">.</operator><name pos:start="147:21" pos:end="147:24">data</name><index pos:start="147:25" pos:end="147:27">[<expr pos:start="147:26" pos:end="147:26"><literal type="number" pos:start="147:26" pos:end="147:26">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="147:30" pos:end="147:39"><expr pos:start="147:30" pos:end="147:39"><name pos:start="147:30" pos:end="147:39"><name pos:start="147:30" pos:end="147:30">s</name><operator pos:start="147:31" pos:end="147:32">-&gt;</operator><name pos:start="147:33" pos:end="147:39">palette</name></name></expr></argument>, <argument pos:start="147:42" pos:end="147:48"><expr pos:start="147:42" pos:end="147:48"><literal type="number" pos:start="147:42" pos:end="147:44">256</literal> <operator pos:start="147:46" pos:end="147:46">*</operator> <literal type="number" pos:start="147:48" pos:end="147:48">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:46">/* one last sanity check on the way out */</comment>

    <if_stmt pos:start="153:5" pos:end="157:33"><if pos:start="153:5" pos:end="157:33">if <condition pos:start="153:8" pos:end="153:29">(<expr pos:start="153:9" pos:end="153:28"><name pos:start="153:9" pos:end="153:18">stream_ptr</name> <operator pos:start="153:20" pos:end="153:20">&lt;</operator> <name pos:start="153:22" pos:end="153:28"><name pos:start="153:22" pos:end="153:22">s</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:28">size</name></name></expr>)</condition><block type="pseudo" pos:start="155:9" pos:end="157:33"><block_content pos:start="155:9" pos:end="157:33">

        <expr_stmt pos:start="155:9" pos:end="157:33"><expr pos:start="155:9" pos:end="157:32"><call pos:start="155:9" pos:end="157:32"><name pos:start="155:9" pos:end="155:14">printf</name><argument_list pos:start="155:15" pos:end="157:32">(<argument pos:start="155:16" pos:end="155:77"><expr pos:start="155:16" pos:end="155:77"><literal type="string" pos:start="155:16" pos:end="155:77">" MS RLE: ended frame decode with bytes left over (%d &lt; %d)\n"</literal></expr></argument>,

            <argument pos:start="157:13" pos:end="157:22"><expr pos:start="157:13" pos:end="157:22"><name pos:start="157:13" pos:end="157:22">stream_ptr</name></expr></argument>, <argument pos:start="157:25" pos:end="157:31"><expr pos:start="157:25" pos:end="157:31"><name pos:start="157:25" pos:end="157:31"><name pos:start="157:25" pos:end="157:25">s</name><operator pos:start="157:26" pos:end="157:27">-&gt;</operator><name pos:start="157:28" pos:end="157:31">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
