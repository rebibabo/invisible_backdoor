<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4295.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">pci_reset</name><parameter_list pos:start="1:22" pos:end="1:40">(<parameter pos:start="1:23" pos:end="1:39"><decl pos:start="1:23" pos:end="1:39"><type pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:35">EEPRO100State</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type> <name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="187:1">{<block_content pos:start="5:5" pos:end="185:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:19">device</name> <init pos:start="5:21" pos:end="5:31">= <expr pos:start="5:23" pos:end="5:31"><name pos:start="5:23" pos:end="5:31"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:31">device</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">pci_conf</name> <init pos:start="7:23" pos:end="7:42">= <expr pos:start="7:25" pos:end="7:42"><name pos:start="7:25" pos:end="7:42"><name pos:start="7:25" pos:end="7:25">s</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:34">pci_dev</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:42">config</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:22"><expr pos:start="11:5" pos:end="11:21"><call pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:10">logout</name><argument_list pos:start="11:11" pos:end="11:21">(<argument pos:start="11:12" pos:end="11:17"><expr pos:start="11:12" pos:end="11:17"><literal type="string" pos:start="11:12" pos:end="11:17">"%p\n"</literal></expr></argument>, <argument pos:start="11:20" pos:end="11:20"><expr pos:start="11:20" pos:end="11:20"><name pos:start="11:20" pos:end="11:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:23">/* PCI Vendor ID */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:60"><expr pos:start="17:5" pos:end="17:59"><call pos:start="17:5" pos:end="17:59"><name pos:start="17:5" pos:end="17:28">pci_config_set_vendor_id</name><argument_list pos:start="17:29" pos:end="17:59">(<argument pos:start="17:30" pos:end="17:37"><expr pos:start="17:30" pos:end="17:37"><name pos:start="17:30" pos:end="17:37">pci_conf</name></expr></argument>, <argument pos:start="17:40" pos:end="17:58"><expr pos:start="17:40" pos:end="17:58"><name pos:start="17:40" pos:end="17:58">PCI_VENDOR_ID_INTEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:23">/* PCI Device ID */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:68"><expr pos:start="21:5" pos:end="21:67"><call pos:start="21:5" pos:end="21:67"><name pos:start="21:5" pos:end="21:28">pci_config_set_device_id</name><argument_list pos:start="21:29" pos:end="21:67">(<argument pos:start="21:30" pos:end="21:37"><expr pos:start="21:30" pos:end="21:37"><name pos:start="21:30" pos:end="21:37">pci_conf</name></expr></argument>, <argument pos:start="21:40" pos:end="21:66"><expr pos:start="21:40" pos:end="21:66"><name pos:start="21:40" pos:end="21:66">PCI_DEVICE_ID_INTEL_82551IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:21">/* PCI Command */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:39"><expr pos:start="25:5" pos:end="25:38"><call pos:start="25:5" pos:end="25:38"><name pos:start="25:5" pos:end="25:17">PCI_CONFIG_16</name><argument_list pos:start="25:18" pos:end="25:38">(<argument pos:start="25:19" pos:end="25:29"><expr pos:start="25:19" pos:end="25:29"><name pos:start="25:19" pos:end="25:29">PCI_COMMAND</name></expr></argument>, <argument pos:start="25:32" pos:end="25:37"><expr pos:start="25:32" pos:end="25:37"><literal type="number" pos:start="25:32" pos:end="25:37">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:20">/* PCI Status */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><call pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:17">PCI_CONFIG_16</name><argument_list pos:start="29:18" pos:end="29:37">(<argument pos:start="29:19" pos:end="29:28"><expr pos:start="29:19" pos:end="29:28"><name pos:start="29:19" pos:end="29:28">PCI_STATUS</name></expr></argument>, <argument pos:start="29:31" pos:end="29:36"><expr pos:start="29:31" pos:end="29:36"><literal type="number" pos:start="29:31" pos:end="29:36">0x2800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:25">/* PCI Revision ID */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:40"><expr pos:start="33:5" pos:end="33:39"><call pos:start="33:5" pos:end="33:39"><name pos:start="33:5" pos:end="33:16">PCI_CONFIG_8</name><argument_list pos:start="33:17" pos:end="33:39">(<argument pos:start="33:18" pos:end="33:32"><expr pos:start="33:18" pos:end="33:32"><name pos:start="33:18" pos:end="33:32">PCI_REVISION_ID</name></expr></argument>, <argument pos:start="33:35" pos:end="33:38"><expr pos:start="33:35" pos:end="33:38"><literal type="number" pos:start="33:35" pos:end="33:38">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:24">/* PCI Class Code */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><call pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:16">PCI_CONFIG_8</name><argument_list pos:start="37:17" pos:end="37:28">(<argument pos:start="37:18" pos:end="37:21"><expr pos:start="37:18" pos:end="37:21"><literal type="number" pos:start="37:18" pos:end="37:21">0x09</literal></expr></argument>, <argument pos:start="37:24" pos:end="37:27"><expr pos:start="37:24" pos:end="37:27"><literal type="number" pos:start="37:24" pos:end="37:27">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:63"><expr pos:start="39:5" pos:end="39:62"><call pos:start="39:5" pos:end="39:62"><name pos:start="39:5" pos:end="39:24">pci_config_set_class</name><argument_list pos:start="39:25" pos:end="39:62">(<argument pos:start="39:26" pos:end="39:33"><expr pos:start="39:26" pos:end="39:33"><name pos:start="39:26" pos:end="39:33">pci_conf</name></expr></argument>, <argument pos:start="39:36" pos:end="39:61"><expr pos:start="39:36" pos:end="39:61"><name pos:start="39:36" pos:end="39:61">PCI_CLASS_NETWORK_ETHERNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="41:5" pos:end="41:29">/* PCI Cache Line Size */</comment>

    <comment type="block" pos:start="43:5" pos:end="43:34">/* check cache line size!!! */</comment>

    <comment type="line" pos:start="45:5" pos:end="45:33">//~ PCI_CONFIG_8(0x0c, 0x00);</comment>

    <comment type="block" pos:start="47:5" pos:end="47:27">/* PCI Latency Timer */</comment>

    <expr_stmt pos:start="49:5" pos:end="86:0"><expr pos:start="49:5" pos:end="49:28"><call pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:16">PCI_CONFIG_8</name><argument_list pos:start="49:17" pos:end="49:28">(<argument pos:start="49:18" pos:end="49:21"><expr pos:start="49:18" pos:end="49:21"><literal type="number" pos:start="49:18" pos:end="49:21">0x0d</literal></expr></argument>, <argument pos:start="49:24" pos:end="49:27"><expr pos:start="49:24" pos:end="49:27"><literal type="number" pos:start="49:24" pos:end="49:27">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="49:33" pos:end="49:60">// latency timer = 32 clocks</comment>

    <comment type="block" pos:start="51:5" pos:end="51:25">/* PCI Header Type */</comment>

    <comment type="block" pos:start="53:5" pos:end="53:35">/* BIST (built-in self test) */</comment>

<cpp:if pos:start="55:1" pos:end="55:24">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:24"><call pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:11">defined</name><argument_list pos:start="55:12" pos:end="55:24">(<argument pos:start="55:13" pos:end="55:23"><expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="line" pos:start="57:1" pos:end="57:32">// !!! workaround for buggy bios</comment>

<comment type="line" pos:start="59:1" pos:end="59:44">//~ #define PCI_ADDRESS_SPACE_MEM_PREFETCH 0</comment>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="63:1" pos:end="63:5">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:5"><literal type="number" pos:start="63:5" pos:end="63:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="65:5" pos:end="65:36">/* PCI Base Address Registers */</comment>

    <comment type="block" pos:start="67:5" pos:end="67:40">/* CSR Memory Mapped Base Address */</comment>

    PCI_CONFIG_32(PCI_BASE_ADDRESS_0,

                  PCI_ADDRESS_SPACE_MEM | PCI_ADDRESS_SPACE_MEM_PREFETCH);

    <comment type="block" pos:start="73:5" pos:end="73:37">/* CSR I/O Mapped Base Address */</comment>

    PCI_CONFIG_32(PCI_BASE_ADDRESS_1, PCI_ADDRESS_SPACE_IO);

<cpp:if pos:start="77:1" pos:end="77:5">#<cpp:directive pos:start="77:2" pos:end="77:3">if</cpp:directive> <expr pos:start="77:5" pos:end="77:5"><literal type="number" pos:start="77:5" pos:end="77:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="79:5" pos:end="79:42">/* Flash Memory Mapped Base Address */</comment>

    PCI_CONFIG_32(PCI_BASE_ADDRESS_2, 0xfffe0000 | PCI_ADDRESS_SPACE_MEM);

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="87:5" pos:end="87:65">/* Expansion ROM Base Address (depends on boot disable!!!) */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:36"><expr pos:start="89:5" pos:end="89:35"><call pos:start="89:5" pos:end="89:35"><name pos:start="89:5" pos:end="89:17">PCI_CONFIG_32</name><argument_list pos:start="89:18" pos:end="89:35">(<argument pos:start="89:19" pos:end="89:22"><expr pos:start="89:19" pos:end="89:22"><literal type="number" pos:start="89:19" pos:end="89:22">0x30</literal></expr></argument>, <argument pos:start="89:25" pos:end="89:34"><expr pos:start="89:25" pos:end="89:34"><literal type="number" pos:start="89:25" pos:end="89:34">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="91:5" pos:end="91:28">/* Capability Pointer */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:29"><expr pos:start="93:5" pos:end="93:28"><call pos:start="93:5" pos:end="93:28"><name pos:start="93:5" pos:end="93:16">PCI_CONFIG_8</name><argument_list pos:start="93:17" pos:end="93:28">(<argument pos:start="93:18" pos:end="93:21"><expr pos:start="93:18" pos:end="93:21"><literal type="number" pos:start="93:18" pos:end="93:21">0x34</literal></expr></argument>, <argument pos:start="93:24" pos:end="93:27"><expr pos:start="93:24" pos:end="93:27"><literal type="number" pos:start="93:24" pos:end="93:27">0xdc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="95:5" pos:end="95:23">/* Interrupt Pin */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:26"><expr pos:start="97:5" pos:end="97:25"><call pos:start="97:5" pos:end="97:25"><name pos:start="97:5" pos:end="97:16">PCI_CONFIG_8</name><argument_list pos:start="97:17" pos:end="97:25">(<argument pos:start="97:18" pos:end="97:21"><expr pos:start="97:18" pos:end="97:21"><literal type="number" pos:start="97:18" pos:end="97:21">0x3d</literal></expr></argument>, <argument pos:start="97:24" pos:end="97:24"><expr pos:start="97:24" pos:end="97:24"><literal type="number" pos:start="97:24" pos:end="97:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="97:33" pos:end="97:50">// interrupt pin 0</comment>

    <comment type="block" pos:start="99:5" pos:end="99:23">/* Minimum Grant */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:29"><expr pos:start="101:5" pos:end="101:28"><call pos:start="101:5" pos:end="101:28"><name pos:start="101:5" pos:end="101:16">PCI_CONFIG_8</name><argument_list pos:start="101:17" pos:end="101:28">(<argument pos:start="101:18" pos:end="101:21"><expr pos:start="101:18" pos:end="101:21"><literal type="number" pos:start="101:18" pos:end="101:21">0x3e</literal></expr></argument>, <argument pos:start="101:24" pos:end="101:27"><expr pos:start="101:24" pos:end="101:27"><literal type="number" pos:start="101:24" pos:end="101:27">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="103:5" pos:end="103:25">/* Maximum Latency */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:29"><expr pos:start="105:5" pos:end="105:28"><call pos:start="105:5" pos:end="105:28"><name pos:start="105:5" pos:end="105:16">PCI_CONFIG_8</name><argument_list pos:start="105:17" pos:end="105:28">(<argument pos:start="105:18" pos:end="105:21"><expr pos:start="105:18" pos:end="105:21"><literal type="number" pos:start="105:18" pos:end="105:21">0x3f</literal></expr></argument>, <argument pos:start="105:24" pos:end="105:27"><expr pos:start="105:24" pos:end="105:27"><literal type="number" pos:start="105:24" pos:end="105:27">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="107:5" pos:end="107:75">/* Power Management Capabilities / Next Item Pointer / Capability ID */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:36"><expr pos:start="109:5" pos:end="109:35"><call pos:start="109:5" pos:end="109:35"><name pos:start="109:5" pos:end="109:17">PCI_CONFIG_32</name><argument_list pos:start="109:18" pos:end="109:35">(<argument pos:start="109:19" pos:end="109:22"><expr pos:start="109:19" pos:end="109:22"><literal type="number" pos:start="109:19" pos:end="109:22">0xdc</literal></expr></argument>, <argument pos:start="109:25" pos:end="109:34"><expr pos:start="109:25" pos:end="109:34"><literal type="number" pos:start="109:25" pos:end="109:34">0x7e210001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="113:5" pos:end="177:5">switch <condition pos:start="113:12" pos:end="113:19">(<expr pos:start="113:13" pos:end="113:18"><name pos:start="113:13" pos:end="113:18">device</name></expr>)</condition> <block pos:start="113:21" pos:end="177:5">{<block_content pos:start="115:5" pos:end="175:52">

    <case pos:start="115:5" pos:end="115:16">case <expr pos:start="115:10" pos:end="115:15"><name pos:start="115:10" pos:end="115:15">i82551</name></expr>:</case>

        <comment type="line" pos:start="117:9" pos:end="117:49">//~ PCI_CONFIG_16(PCI_DEVICE_ID, 0x1209);</comment>

        <expr_stmt pos:start="119:9" pos:end="119:44"><expr pos:start="119:9" pos:end="119:43"><call pos:start="119:9" pos:end="119:43"><name pos:start="119:9" pos:end="119:20">PCI_CONFIG_8</name><argument_list pos:start="119:21" pos:end="119:43">(<argument pos:start="119:22" pos:end="119:36"><expr pos:start="119:22" pos:end="119:36"><name pos:start="119:22" pos:end="119:36">PCI_REVISION_ID</name></expr></argument>, <argument pos:start="119:39" pos:end="119:42"><expr pos:start="119:39" pos:end="119:42"><literal type="number" pos:start="119:39" pos:end="119:42">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <case pos:start="123:5" pos:end="123:17">case <expr pos:start="123:10" pos:end="123:16"><name pos:start="123:10" pos:end="123:16">i82557B</name></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:45"><expr pos:start="125:9" pos:end="125:44"><call pos:start="125:9" pos:end="125:44"><name pos:start="125:9" pos:end="125:21">PCI_CONFIG_16</name><argument_list pos:start="125:22" pos:end="125:44">(<argument pos:start="125:23" pos:end="125:35"><expr pos:start="125:23" pos:end="125:35"><name pos:start="125:23" pos:end="125:35">PCI_DEVICE_ID</name></expr></argument>, <argument pos:start="125:38" pos:end="125:43"><expr pos:start="125:38" pos:end="125:43"><literal type="number" pos:start="125:38" pos:end="125:43">0x1229</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:44"><expr pos:start="127:9" pos:end="127:43"><call pos:start="127:9" pos:end="127:43"><name pos:start="127:9" pos:end="127:20">PCI_CONFIG_8</name><argument_list pos:start="127:21" pos:end="127:43">(<argument pos:start="127:22" pos:end="127:36"><expr pos:start="127:22" pos:end="127:36"><name pos:start="127:22" pos:end="127:36">PCI_REVISION_ID</name></expr></argument>, <argument pos:start="127:39" pos:end="127:42"><expr pos:start="127:39" pos:end="127:42"><literal type="number" pos:start="127:39" pos:end="127:42">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    <case pos:start="131:5" pos:end="131:17">case <expr pos:start="131:10" pos:end="131:16"><name pos:start="131:10" pos:end="131:16">i82557C</name></expr>:</case>

        <expr_stmt pos:start="133:9" pos:end="133:45"><expr pos:start="133:9" pos:end="133:44"><call pos:start="133:9" pos:end="133:44"><name pos:start="133:9" pos:end="133:21">PCI_CONFIG_16</name><argument_list pos:start="133:22" pos:end="133:44">(<argument pos:start="133:23" pos:end="133:35"><expr pos:start="133:23" pos:end="133:35"><name pos:start="133:23" pos:end="133:35">PCI_DEVICE_ID</name></expr></argument>, <argument pos:start="133:38" pos:end="133:43"><expr pos:start="133:38" pos:end="133:43"><literal type="number" pos:start="133:38" pos:end="133:43">0x1229</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:44"><expr pos:start="135:9" pos:end="135:43"><call pos:start="135:9" pos:end="135:43"><name pos:start="135:9" pos:end="135:20">PCI_CONFIG_8</name><argument_list pos:start="135:21" pos:end="135:43">(<argument pos:start="135:22" pos:end="135:36"><expr pos:start="135:22" pos:end="135:36"><name pos:start="135:22" pos:end="135:36">PCI_REVISION_ID</name></expr></argument>, <argument pos:start="135:39" pos:end="135:42"><expr pos:start="135:39" pos:end="135:42"><literal type="number" pos:start="135:39" pos:end="135:42">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:17">case <expr pos:start="139:10" pos:end="139:16"><name pos:start="139:10" pos:end="139:16">i82558B</name></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:45"><expr pos:start="141:9" pos:end="141:44"><call pos:start="141:9" pos:end="141:44"><name pos:start="141:9" pos:end="141:21">PCI_CONFIG_16</name><argument_list pos:start="141:22" pos:end="141:44">(<argument pos:start="141:23" pos:end="141:35"><expr pos:start="141:23" pos:end="141:35"><name pos:start="141:23" pos:end="141:35">PCI_DEVICE_ID</name></expr></argument>, <argument pos:start="141:38" pos:end="141:43"><expr pos:start="141:38" pos:end="141:43"><literal type="number" pos:start="141:38" pos:end="141:43">0x1229</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:42"><expr pos:start="143:9" pos:end="143:41"><call pos:start="143:9" pos:end="143:41"><name pos:start="143:9" pos:end="143:21">PCI_CONFIG_16</name><argument_list pos:start="143:22" pos:end="143:41">(<argument pos:start="143:23" pos:end="143:32"><expr pos:start="143:23" pos:end="143:32"><name pos:start="143:23" pos:end="143:32">PCI_STATUS</name></expr></argument>, <argument pos:start="143:35" pos:end="143:40"><expr pos:start="143:35" pos:end="143:40"><literal type="number" pos:start="143:35" pos:end="143:40">0x2810</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:44"><expr pos:start="145:9" pos:end="145:43"><call pos:start="145:9" pos:end="145:43"><name pos:start="145:9" pos:end="145:20">PCI_CONFIG_8</name><argument_list pos:start="145:21" pos:end="145:43">(<argument pos:start="145:22" pos:end="145:36"><expr pos:start="145:22" pos:end="145:36"><name pos:start="145:22" pos:end="145:36">PCI_REVISION_ID</name></expr></argument>, <argument pos:start="145:39" pos:end="145:42"><expr pos:start="145:39" pos:end="145:42"><literal type="number" pos:start="145:39" pos:end="145:42">0x05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:17">case <expr pos:start="149:10" pos:end="149:16"><name pos:start="149:10" pos:end="149:16">i82559C</name></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:45"><expr pos:start="151:9" pos:end="151:44"><call pos:start="151:9" pos:end="151:44"><name pos:start="151:9" pos:end="151:21">PCI_CONFIG_16</name><argument_list pos:start="151:22" pos:end="151:44">(<argument pos:start="151:23" pos:end="151:35"><expr pos:start="151:23" pos:end="151:35"><name pos:start="151:23" pos:end="151:35">PCI_DEVICE_ID</name></expr></argument>, <argument pos:start="151:38" pos:end="151:43"><expr pos:start="151:38" pos:end="151:43"><literal type="number" pos:start="151:38" pos:end="151:43">0x1229</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:42"><expr pos:start="153:9" pos:end="153:41"><call pos:start="153:9" pos:end="153:41"><name pos:start="153:9" pos:end="153:21">PCI_CONFIG_16</name><argument_list pos:start="153:22" pos:end="153:41">(<argument pos:start="153:23" pos:end="153:32"><expr pos:start="153:23" pos:end="153:32"><name pos:start="153:23" pos:end="153:32">PCI_STATUS</name></expr></argument>, <argument pos:start="153:35" pos:end="153:40"><expr pos:start="153:35" pos:end="153:40"><literal type="number" pos:start="153:35" pos:end="153:40">0x2810</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="155:9" pos:end="155:48">//~ PCI_CONFIG_8(PCI_REVISION_ID, 0x08);</comment>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    <case pos:start="159:5" pos:end="159:18">case <expr pos:start="159:10" pos:end="159:17"><name pos:start="159:10" pos:end="159:17">i82559ER</name></expr>:</case>

        <comment type="line" pos:start="161:9" pos:end="161:49">//~ PCI_CONFIG_16(PCI_DEVICE_ID, 0x1209);</comment>

        <expr_stmt pos:start="163:9" pos:end="163:42"><expr pos:start="163:9" pos:end="163:41"><call pos:start="163:9" pos:end="163:41"><name pos:start="163:9" pos:end="163:21">PCI_CONFIG_16</name><argument_list pos:start="163:22" pos:end="163:41">(<argument pos:start="163:23" pos:end="163:32"><expr pos:start="163:23" pos:end="163:32"><name pos:start="163:23" pos:end="163:32">PCI_STATUS</name></expr></argument>, <argument pos:start="163:35" pos:end="163:40"><expr pos:start="163:35" pos:end="163:40"><literal type="number" pos:start="163:35" pos:end="163:40">0x2810</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:44"><expr pos:start="165:9" pos:end="165:43"><call pos:start="165:9" pos:end="165:43"><name pos:start="165:9" pos:end="165:20">PCI_CONFIG_8</name><argument_list pos:start="165:21" pos:end="165:43">(<argument pos:start="165:22" pos:end="165:36"><expr pos:start="165:22" pos:end="165:36"><name pos:start="165:22" pos:end="165:36">PCI_REVISION_ID</name></expr></argument>, <argument pos:start="165:39" pos:end="165:42"><expr pos:start="165:39" pos:end="165:42"><literal type="number" pos:start="165:39" pos:end="165:42">0x09</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    <comment type="line" pos:start="169:5" pos:end="169:45">//~ PCI_CONFIG_16(PCI_DEVICE_ID, 0x1029);</comment>

    <comment type="line" pos:start="171:5" pos:end="171:81">//~ PCI_CONFIG_16(PCI_DEVICE_ID, 0x1030);       /* 82559 InBusiness 10/100 */</comment>

    <default pos:start="173:5" pos:end="173:12">default:</default>

        <expr_stmt pos:start="175:9" pos:end="175:52"><expr pos:start="175:9" pos:end="175:51"><call pos:start="175:9" pos:end="175:51"><name pos:start="175:9" pos:end="175:14">logout</name><argument_list pos:start="175:15" pos:end="175:51">(<argument pos:start="175:16" pos:end="175:42"><expr pos:start="175:16" pos:end="175:42"><literal type="string" pos:start="175:16" pos:end="175:42">"Device %X is undefined!\n"</literal></expr></argument>, <argument pos:start="175:45" pos:end="175:50"><expr pos:start="175:45" pos:end="175:50"><name pos:start="175:45" pos:end="175:50">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <if_stmt pos:start="181:5" pos:end="185:5"><if pos:start="181:5" pos:end="185:5">if <condition pos:start="181:8" pos:end="181:68">(<expr pos:start="181:9" pos:end="181:67"><name pos:start="181:9" pos:end="181:14">device</name> <operator pos:start="181:16" pos:end="181:17">==</operator> <name pos:start="181:19" pos:end="181:25">i82557C</name> <operator pos:start="181:27" pos:end="181:28">||</operator> <name pos:start="181:30" pos:end="181:35">device</name> <operator pos:start="181:37" pos:end="181:38">==</operator> <name pos:start="181:40" pos:end="181:46">i82558B</name> <operator pos:start="181:48" pos:end="181:49">||</operator> <name pos:start="181:51" pos:end="181:56">device</name> <operator pos:start="181:58" pos:end="181:59">==</operator> <name pos:start="181:61" pos:end="181:67">i82559C</name></expr>)</condition> <block pos:start="181:70" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:62">

        <expr_stmt pos:start="183:9" pos:end="183:62"><expr pos:start="183:9" pos:end="183:61"><call pos:start="183:9" pos:end="183:61"><name pos:start="183:9" pos:end="183:14">logout</name><argument_list pos:start="183:15" pos:end="183:61">(<argument pos:start="183:16" pos:end="183:60"><expr pos:start="183:16" pos:end="183:60"><literal type="string" pos:start="183:16" pos:end="183:60">"Get device id and revision from EEPROM!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
