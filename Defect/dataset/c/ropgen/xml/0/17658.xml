<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17658.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">multiwrite_merge</name><parameter_list pos:start="1:28" pos:end="3:36">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:68"><decl pos:start="1:51" pos:end="1:68"><type pos:start="1:51" pos:end="1:68"><name pos:start="1:51" pos:end="1:62">BlockRequest</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">reqs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:16"><decl pos:start="3:5" pos:end="3:16"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:16">num_reqs</name></decl></parameter>, <parameter pos:start="3:19" pos:end="3:35"><decl pos:start="3:19" pos:end="3:35"><type pos:start="3:19" pos:end="3:35"><name pos:start="3:19" pos:end="3:30">MultiwriteCB</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:35">mcb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:22">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:17">outidx</name></decl>;</decl_stmt>



    <comment type="line" pos:start="11:5" pos:end="11:36">// Sort requests by start sector</comment>

    <expr_stmt pos:start="13:5" pos:end="13:66"><expr pos:start="13:5" pos:end="13:65"><call pos:start="13:5" pos:end="13:65"><name pos:start="13:5" pos:end="13:9">qsort</name><argument_list pos:start="13:10" pos:end="13:65">(<argument pos:start="13:11" pos:end="13:14"><expr pos:start="13:11" pos:end="13:14"><name pos:start="13:11" pos:end="13:14">reqs</name></expr></argument>, <argument pos:start="13:17" pos:end="13:24"><expr pos:start="13:17" pos:end="13:24"><name pos:start="13:17" pos:end="13:24">num_reqs</name></expr></argument>, <argument pos:start="13:27" pos:end="13:39"><expr pos:start="13:27" pos:end="13:39"><sizeof pos:start="13:27" pos:end="13:39">sizeof<argument_list pos:start="13:33" pos:end="13:39">(<argument pos:start="13:34" pos:end="13:38"><expr pos:start="13:34" pos:end="13:38"><operator pos:start="13:34" pos:end="13:34">*</operator><name pos:start="13:35" pos:end="13:38">reqs</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="13:42" pos:end="13:64"><expr pos:start="13:42" pos:end="13:64"><operator pos:start="13:42" pos:end="13:42">&amp;</operator><name pos:start="13:43" pos:end="13:64">multiwrite_req_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="17:5" pos:end="17:79">// Check if adjacent requests touch the same clusters. If so, combine them,</comment>

    <comment type="line" pos:start="19:5" pos:end="19:41">// filling up gaps with zero sectors.</comment>

    <expr_stmt pos:start="21:5" pos:end="21:15"><expr pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:10">outidx</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="133:5">for <control pos:start="23:9" pos:end="23:34">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">1</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:29"><expr pos:start="23:17" pos:end="23:28"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <name pos:start="23:21" pos:end="23:28">num_reqs</name></expr>;</condition> <incr pos:start="23:31" pos:end="23:33"><expr pos:start="23:31" pos:end="23:33"><name pos:start="23:31" pos:end="23:31">i</name><operator pos:start="23:32" pos:end="23:33">++</operator></expr></incr>)</control> <block pos:start="23:36" pos:end="133:5">{<block_content pos:start="25:9" pos:end="131:9">

        <decl_stmt pos:start="25:9" pos:end="25:22"><decl pos:start="25:9" pos:end="25:21"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:17">merge</name> <init pos:start="25:19" pos:end="25:21">= <expr pos:start="25:21" pos:end="25:21"><literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:76"><decl pos:start="27:9" pos:end="27:75"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">int64_t</name></type> <name pos:start="27:17" pos:end="27:27">oldreq_last</name> <init pos:start="27:29" pos:end="27:75">= <expr pos:start="27:31" pos:end="27:75"><name pos:start="27:31" pos:end="27:42"><name pos:start="27:31" pos:end="27:34">reqs</name><index pos:start="27:35" pos:end="27:42">[<expr pos:start="27:36" pos:end="27:41"><name pos:start="27:36" pos:end="27:41">outidx</name></expr>]</index></name><operator pos:start="27:43" pos:end="27:43">.</operator><name pos:start="27:44" pos:end="27:49">sector</name> <operator pos:start="27:51" pos:end="27:51">+</operator> <name pos:start="27:53" pos:end="27:64"><name pos:start="27:53" pos:end="27:56">reqs</name><index pos:start="27:57" pos:end="27:64">[<expr pos:start="27:58" pos:end="27:63"><name pos:start="27:58" pos:end="27:63">outidx</name></expr>]</index></name><operator pos:start="27:65" pos:end="27:65">.</operator><name pos:start="27:66" pos:end="27:75">nb_sectors</name></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="31:9" pos:end="31:78">// This handles the cases that are valid for all block drivers, namely</comment>

        <comment type="line" pos:start="33:9" pos:end="33:60">// exactly sequential writes and overlapping writes.</comment>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:42">(<expr pos:start="35:13" pos:end="35:41"><name pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:16">reqs</name><index pos:start="35:17" pos:end="35:19">[<expr pos:start="35:18" pos:end="35:18"><name pos:start="35:18" pos:end="35:18">i</name></expr>]</index></name><operator pos:start="35:20" pos:end="35:20">.</operator><name pos:start="35:21" pos:end="35:26">sector</name> <operator pos:start="35:28" pos:end="35:29">&lt;=</operator> <name pos:start="35:31" pos:end="35:41">oldreq_last</name></expr>)</condition> <block pos:start="35:44" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:22">

            <expr_stmt pos:start="37:13" pos:end="37:22"><expr pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:17">merge</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="number" pos:start="37:21" pos:end="37:21">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="43:9" pos:end="43:78">// The block driver may decide that it makes sense to combine requests</comment>

        <comment type="line" pos:start="45:9" pos:end="45:77">// even if there is a gap of some sectors between them. In this case,</comment>

        <comment type="line" pos:start="47:9" pos:end="47:74">// the gap is filled with zeros (therefore only applicable for yet</comment>

        <comment type="line" pos:start="49:9" pos:end="49:46">// unused space in format like qcow2).</comment>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:51">(<expr pos:start="51:13" pos:end="51:50"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:18">merge</name> <operator pos:start="51:20" pos:end="51:21">&amp;&amp;</operator> <name pos:start="51:23" pos:end="51:50"><name pos:start="51:23" pos:end="51:24">bs</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:29">drv</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:50">bdrv_merge_requests</name></name></expr>)</condition> <block pos:start="51:53" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:78">

            <expr_stmt pos:start="53:13" pos:end="53:78"><expr pos:start="53:13" pos:end="53:77"><name pos:start="53:13" pos:end="53:17">merge</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:77"><name pos:start="53:21" pos:end="53:48"><name pos:start="53:21" pos:end="53:22">bs</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:27">drv</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:48">bdrv_merge_requests</name></name><argument_list pos:start="53:49" pos:end="53:77">(<argument pos:start="53:50" pos:end="53:51"><expr pos:start="53:50" pos:end="53:51"><name pos:start="53:50" pos:end="53:51">bs</name></expr></argument>, <argument pos:start="53:54" pos:end="53:66"><expr pos:start="53:54" pos:end="53:66"><operator pos:start="53:54" pos:end="53:54">&amp;</operator><name pos:start="53:55" pos:end="53:66"><name pos:start="53:55" pos:end="53:58">reqs</name><index pos:start="53:59" pos:end="53:66">[<expr pos:start="53:60" pos:end="53:65"><name pos:start="53:60" pos:end="53:65">outidx</name></expr>]</index></name></expr></argument>, <argument pos:start="53:69" pos:end="53:76"><expr pos:start="53:69" pos:end="53:76"><operator pos:start="53:69" pos:end="53:69">&amp;</operator><name pos:start="53:70" pos:end="53:76"><name pos:start="53:70" pos:end="53:73">reqs</name><index pos:start="53:74" pos:end="53:76">[<expr pos:start="53:75" pos:end="53:75"><name pos:start="53:75" pos:end="53:75">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:71">(<expr pos:start="59:13" pos:end="59:70"><name pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:16">reqs</name><index pos:start="59:17" pos:end="59:24">[<expr pos:start="59:18" pos:end="59:23"><name pos:start="59:18" pos:end="59:23">outidx</name></expr>]</index></name><operator pos:start="59:25" pos:end="59:25">.</operator><name pos:start="59:26" pos:end="59:35"><name pos:start="59:26" pos:end="59:29">qiov</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:35">niov</name></name> <operator pos:start="59:37" pos:end="59:37">+</operator> <name pos:start="59:39" pos:end="59:45"><name pos:start="59:39" pos:end="59:42">reqs</name><index pos:start="59:43" pos:end="59:45">[<expr pos:start="59:44" pos:end="59:44"><name pos:start="59:44" pos:end="59:44">i</name></expr>]</index></name><operator pos:start="59:46" pos:end="59:46">.</operator><name pos:start="59:47" pos:end="59:56"><name pos:start="59:47" pos:end="59:50">qiov</name><operator pos:start="59:51" pos:end="59:52">-&gt;</operator><name pos:start="59:53" pos:end="59:56">niov</name></name> <operator pos:start="59:58" pos:end="59:58">+</operator> <literal type="number" pos:start="59:60" pos:end="59:60">1</literal> <operator pos:start="59:62" pos:end="59:62">&gt;</operator> <name pos:start="59:64" pos:end="59:70">IOV_MAX</name></expr>)</condition> <block pos:start="59:73" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:22">

            <expr_stmt pos:start="61:13" pos:end="61:22"><expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:17">merge</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <literal type="number" pos:start="61:21" pos:end="61:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="67:9" pos:end="131:9"><if pos:start="67:9" pos:end="121:9">if <condition pos:start="67:12" pos:end="67:18">(<expr pos:start="67:13" pos:end="67:17"><name pos:start="67:13" pos:end="67:17">merge</name></expr>)</condition> <block pos:start="67:20" pos:end="121:9">{<block_content pos:start="69:13" pos:end="119:60">

            <decl_stmt pos:start="69:13" pos:end="69:24"><decl pos:start="69:13" pos:end="69:23"><type pos:start="69:13" pos:end="69:18"><name pos:start="69:13" pos:end="69:18">size_t</name></type> <name pos:start="69:20" pos:end="69:23">size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="71:13" pos:end="71:61"><decl pos:start="71:13" pos:end="71:60"><type pos:start="71:13" pos:end="71:26"><name pos:start="71:13" pos:end="71:24">QEMUIOVector</name> <modifier pos:start="71:26" pos:end="71:26">*</modifier></type><name pos:start="71:27" pos:end="71:30">qiov</name> <init pos:start="71:32" pos:end="71:60">= <expr pos:start="71:34" pos:end="71:60"><call pos:start="71:34" pos:end="71:60"><name pos:start="71:34" pos:end="71:45">qemu_mallocz</name><argument_list pos:start="71:46" pos:end="71:60">(<argument pos:start="71:47" pos:end="71:59"><expr pos:start="71:47" pos:end="71:59"><sizeof pos:start="71:47" pos:end="71:59">sizeof<argument_list pos:start="71:53" pos:end="71:59">(<argument pos:start="71:54" pos:end="71:58"><expr pos:start="71:54" pos:end="71:58"><operator pos:start="71:54" pos:end="71:54">*</operator><name pos:start="71:55" pos:end="71:58">qiov</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="73:13" pos:end="75:66"><expr pos:start="73:13" pos:end="75:65"><call pos:start="73:13" pos:end="75:65"><name pos:start="73:13" pos:end="73:27">qemu_iovec_init</name><argument_list pos:start="73:28" pos:end="75:65">(<argument pos:start="73:29" pos:end="73:32"><expr pos:start="73:29" pos:end="73:32"><name pos:start="73:29" pos:end="73:32">qiov</name></expr></argument>,

                <argument pos:start="75:17" pos:end="75:64"><expr pos:start="75:17" pos:end="75:64"><name pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:20">reqs</name><index pos:start="75:21" pos:end="75:28">[<expr pos:start="75:22" pos:end="75:27"><name pos:start="75:22" pos:end="75:27">outidx</name></expr>]</index></name><operator pos:start="75:29" pos:end="75:29">.</operator><name pos:start="75:30" pos:end="75:39"><name pos:start="75:30" pos:end="75:33">qiov</name><operator pos:start="75:34" pos:end="75:35">-&gt;</operator><name pos:start="75:36" pos:end="75:39">niov</name></name> <operator pos:start="75:41" pos:end="75:41">+</operator> <name pos:start="75:43" pos:end="75:49"><name pos:start="75:43" pos:end="75:46">reqs</name><index pos:start="75:47" pos:end="75:49">[<expr pos:start="75:48" pos:end="75:48"><name pos:start="75:48" pos:end="75:48">i</name></expr>]</index></name><operator pos:start="75:50" pos:end="75:50">.</operator><name pos:start="75:51" pos:end="75:60"><name pos:start="75:51" pos:end="75:54">qiov</name><operator pos:start="75:55" pos:end="75:56">-&gt;</operator><name pos:start="75:57" pos:end="75:60">niov</name></name> <operator pos:start="75:62" pos:end="75:62">+</operator> <literal type="number" pos:start="75:64" pos:end="75:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="line" pos:start="79:13" pos:end="79:75">// Add the first request to the merged one. If the requests are</comment>

            <comment type="line" pos:start="81:13" pos:end="81:71">// overlapping, drop the last sectors of the first request.</comment>

            <expr_stmt pos:start="83:13" pos:end="83:63"><expr pos:start="83:13" pos:end="83:62"><name pos:start="83:13" pos:end="83:16">size</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <operator pos:start="83:20" pos:end="83:20">(</operator><name pos:start="83:21" pos:end="83:27"><name pos:start="83:21" pos:end="83:24">reqs</name><index pos:start="83:25" pos:end="83:27">[<expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">i</name></expr>]</index></name><operator pos:start="83:28" pos:end="83:28">.</operator><name pos:start="83:29" pos:end="83:34">sector</name> <operator pos:start="83:36" pos:end="83:36">-</operator> <name pos:start="83:38" pos:end="83:49"><name pos:start="83:38" pos:end="83:41">reqs</name><index pos:start="83:42" pos:end="83:49">[<expr pos:start="83:43" pos:end="83:48"><name pos:start="83:43" pos:end="83:48">outidx</name></expr>]</index></name><operator pos:start="83:50" pos:end="83:50">.</operator><name pos:start="83:51" pos:end="83:56">sector</name><operator pos:start="83:57" pos:end="83:57">)</operator> <operator pos:start="83:59" pos:end="83:60">&lt;&lt;</operator> <literal type="number" pos:start="83:62" pos:end="83:62">9</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:61"><expr pos:start="85:13" pos:end="85:60"><call pos:start="85:13" pos:end="85:60"><name pos:start="85:13" pos:end="85:29">qemu_iovec_concat</name><argument_list pos:start="85:30" pos:end="85:60">(<argument pos:start="85:31" pos:end="85:34"><expr pos:start="85:31" pos:end="85:34"><name pos:start="85:31" pos:end="85:34">qiov</name></expr></argument>, <argument pos:start="85:37" pos:end="85:53"><expr pos:start="85:37" pos:end="85:53"><name pos:start="85:37" pos:end="85:48"><name pos:start="85:37" pos:end="85:40">reqs</name><index pos:start="85:41" pos:end="85:48">[<expr pos:start="85:42" pos:end="85:47"><name pos:start="85:42" pos:end="85:47">outidx</name></expr>]</index></name><operator pos:start="85:49" pos:end="85:49">.</operator><name pos:start="85:50" pos:end="85:53">qiov</name></expr></argument>, <argument pos:start="85:56" pos:end="85:59"><expr pos:start="85:56" pos:end="85:59"><name pos:start="85:56" pos:end="85:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="line" pos:start="89:13" pos:end="89:71">// We might need to add some zeros between the two requests</comment>

            <if_stmt pos:start="91:13" pos:end="103:13"><if pos:start="91:13" pos:end="103:13">if <condition pos:start="91:16" pos:end="91:45">(<expr pos:start="91:17" pos:end="91:44"><name pos:start="91:17" pos:end="91:23"><name pos:start="91:17" pos:end="91:20">reqs</name><index pos:start="91:21" pos:end="91:23">[<expr pos:start="91:22" pos:end="91:22"><name pos:start="91:22" pos:end="91:22">i</name></expr>]</index></name><operator pos:start="91:24" pos:end="91:24">.</operator><name pos:start="91:25" pos:end="91:30">sector</name> <operator pos:start="91:32" pos:end="91:32">&gt;</operator> <name pos:start="91:34" pos:end="91:44">oldreq_last</name></expr>)</condition> <block pos:start="91:47" pos:end="103:13">{<block_content pos:start="93:17" pos:end="101:49">

                <decl_stmt pos:start="93:17" pos:end="93:72"><decl pos:start="93:17" pos:end="93:71"><type pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:22">size_t</name></type> <name pos:start="93:24" pos:end="93:33">zero_bytes</name> <init pos:start="93:35" pos:end="93:71">= <expr pos:start="93:37" pos:end="93:71"><operator pos:start="93:37" pos:end="93:37">(</operator><name pos:start="93:38" pos:end="93:44"><name pos:start="93:38" pos:end="93:41">reqs</name><index pos:start="93:42" pos:end="93:44">[<expr pos:start="93:43" pos:end="93:43"><name pos:start="93:43" pos:end="93:43">i</name></expr>]</index></name><operator pos:start="93:45" pos:end="93:45">.</operator><name pos:start="93:46" pos:end="93:51">sector</name> <operator pos:start="93:53" pos:end="93:53">-</operator> <name pos:start="93:55" pos:end="93:65">oldreq_last</name><operator pos:start="93:66" pos:end="93:66">)</operator> <operator pos:start="93:68" pos:end="93:69">&lt;&lt;</operator> <literal type="number" pos:start="93:71" pos:end="93:71">9</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="95:17" pos:end="95:63"><decl pos:start="95:17" pos:end="95:62"><type pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:23">uint8_t</name> <modifier pos:start="95:25" pos:end="95:25">*</modifier></type><name pos:start="95:26" pos:end="95:28">buf</name> <init pos:start="95:30" pos:end="95:62">= <expr pos:start="95:32" pos:end="95:62"><call pos:start="95:32" pos:end="95:62"><name pos:start="95:32" pos:end="95:46">qemu_blockalign</name><argument_list pos:start="95:47" pos:end="95:62">(<argument pos:start="95:48" pos:end="95:49"><expr pos:start="95:48" pos:end="95:49"><name pos:start="95:48" pos:end="95:49">bs</name></expr></argument>, <argument pos:start="95:52" pos:end="95:61"><expr pos:start="95:52" pos:end="95:61"><name pos:start="95:52" pos:end="95:61">zero_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:43"><expr pos:start="97:17" pos:end="97:42"><call pos:start="97:17" pos:end="97:42"><name pos:start="97:17" pos:end="97:22">memset</name><argument_list pos:start="97:23" pos:end="97:42">(<argument pos:start="97:24" pos:end="97:26"><expr pos:start="97:24" pos:end="97:26"><name pos:start="97:24" pos:end="97:26">buf</name></expr></argument>, <argument pos:start="97:29" pos:end="97:29"><expr pos:start="97:29" pos:end="97:29"><literal type="number" pos:start="97:29" pos:end="97:29">0</literal></expr></argument>, <argument pos:start="97:32" pos:end="97:41"><expr pos:start="97:32" pos:end="97:41"><name pos:start="97:32" pos:end="97:41">zero_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:54"><expr pos:start="99:17" pos:end="99:53"><call pos:start="99:17" pos:end="99:53"><name pos:start="99:17" pos:end="99:30">qemu_iovec_add</name><argument_list pos:start="99:31" pos:end="99:53">(<argument pos:start="99:32" pos:end="99:35"><expr pos:start="99:32" pos:end="99:35"><name pos:start="99:32" pos:end="99:35">qiov</name></expr></argument>, <argument pos:start="99:38" pos:end="99:40"><expr pos:start="99:38" pos:end="99:40"><name pos:start="99:38" pos:end="99:40">buf</name></expr></argument>, <argument pos:start="99:43" pos:end="99:52"><expr pos:start="99:43" pos:end="99:52"><name pos:start="99:43" pos:end="99:52">zero_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:49"><expr pos:start="101:17" pos:end="101:48"><name pos:start="101:17" pos:end="101:33"><name pos:start="101:17" pos:end="101:19">mcb</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:30">callbacks</name><index pos:start="101:31" pos:end="101:33">[<expr pos:start="101:32" pos:end="101:32"><name pos:start="101:32" pos:end="101:32">i</name></expr>]</index></name><operator pos:start="101:34" pos:end="101:34">.</operator><name pos:start="101:35" pos:end="101:42">free_buf</name> <operator pos:start="101:44" pos:end="101:44">=</operator> <name pos:start="101:46" pos:end="101:48">buf</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="107:13" pos:end="107:37">// Add the second request</comment>

            <expr_stmt pos:start="109:13" pos:end="109:70"><expr pos:start="109:13" pos:end="109:69"><call pos:start="109:13" pos:end="109:69"><name pos:start="109:13" pos:end="109:29">qemu_iovec_concat</name><argument_list pos:start="109:30" pos:end="109:69">(<argument pos:start="109:31" pos:end="109:34"><expr pos:start="109:31" pos:end="109:34"><name pos:start="109:31" pos:end="109:34">qiov</name></expr></argument>, <argument pos:start="109:37" pos:end="109:48"><expr pos:start="109:37" pos:end="109:48"><name pos:start="109:37" pos:end="109:43"><name pos:start="109:37" pos:end="109:40">reqs</name><index pos:start="109:41" pos:end="109:43">[<expr pos:start="109:42" pos:end="109:42"><name pos:start="109:42" pos:end="109:42">i</name></expr>]</index></name><operator pos:start="109:44" pos:end="109:44">.</operator><name pos:start="109:45" pos:end="109:48">qiov</name></expr></argument>, <argument pos:start="109:51" pos:end="109:68"><expr pos:start="109:51" pos:end="109:68"><name pos:start="109:51" pos:end="109:57"><name pos:start="109:51" pos:end="109:54">reqs</name><index pos:start="109:55" pos:end="109:57">[<expr pos:start="109:56" pos:end="109:56"><name pos:start="109:56" pos:end="109:56">i</name></expr>]</index></name><operator pos:start="109:58" pos:end="109:58">.</operator><name pos:start="109:59" pos:end="109:68"><name pos:start="109:59" pos:end="109:62">qiov</name><operator pos:start="109:63" pos:end="109:64">-&gt;</operator><name pos:start="109:65" pos:end="109:68">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="113:13" pos:end="113:58"><expr pos:start="113:13" pos:end="113:57"><name pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:16">reqs</name><index pos:start="113:17" pos:end="113:24">[<expr pos:start="113:18" pos:end="113:23"><name pos:start="113:18" pos:end="113:23">outidx</name></expr>]</index></name><operator pos:start="113:25" pos:end="113:25">.</operator><name pos:start="113:26" pos:end="113:35">nb_sectors</name> <operator pos:start="113:37" pos:end="113:38">+=</operator> <name pos:start="113:40" pos:end="113:46"><name pos:start="113:40" pos:end="113:43">reqs</name><index pos:start="113:44" pos:end="113:46">[<expr pos:start="113:45" pos:end="113:45"><name pos:start="113:45" pos:end="113:45">i</name></expr>]</index></name><operator pos:start="113:47" pos:end="113:47">.</operator><name pos:start="113:48" pos:end="113:57">nb_sectors</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:37"><expr pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:24"><name pos:start="115:13" pos:end="115:16">reqs</name><index pos:start="115:17" pos:end="115:24">[<expr pos:start="115:18" pos:end="115:23"><name pos:start="115:18" pos:end="115:23">outidx</name></expr>]</index></name><operator pos:start="115:25" pos:end="115:25">.</operator><name pos:start="115:26" pos:end="115:29">qiov</name> <operator pos:start="115:31" pos:end="115:31">=</operator> <name pos:start="115:33" pos:end="115:36">qiov</name></expr>;</expr_stmt>



            <expr_stmt pos:start="119:13" pos:end="119:60"><expr pos:start="119:13" pos:end="119:59"><name pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:15">mcb</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:26">callbacks</name><index pos:start="119:27" pos:end="119:29">[<expr pos:start="119:28" pos:end="119:28"><name pos:start="119:28" pos:end="119:28">i</name></expr>]</index></name><operator pos:start="119:30" pos:end="119:30">.</operator><name pos:start="119:31" pos:end="119:39">free_qiov</name> <operator pos:start="119:41" pos:end="119:41">=</operator> <name pos:start="119:43" pos:end="119:54"><name pos:start="119:43" pos:end="119:46">reqs</name><index pos:start="119:47" pos:end="119:54">[<expr pos:start="119:48" pos:end="119:53"><name pos:start="119:48" pos:end="119:53">outidx</name></expr>]</index></name><operator pos:start="119:55" pos:end="119:55">.</operator><name pos:start="119:56" pos:end="119:59">qiov</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="131:9">else <block pos:start="121:16" pos:end="131:9">{<block_content pos:start="123:13" pos:end="129:51">

            <expr_stmt pos:start="123:13" pos:end="123:21"><expr pos:start="123:13" pos:end="123:20"><name pos:start="123:13" pos:end="123:18">outidx</name><operator pos:start="123:19" pos:end="123:20">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:53"><expr pos:start="125:13" pos:end="125:52"><name pos:start="125:13" pos:end="125:24"><name pos:start="125:13" pos:end="125:16">reqs</name><index pos:start="125:17" pos:end="125:24">[<expr pos:start="125:18" pos:end="125:23"><name pos:start="125:18" pos:end="125:23">outidx</name></expr>]</index></name><operator pos:start="125:25" pos:end="125:25">.</operator><name pos:start="125:26" pos:end="125:31">sector</name>     <operator pos:start="125:37" pos:end="125:37">=</operator> <name pos:start="125:39" pos:end="125:45"><name pos:start="125:39" pos:end="125:42">reqs</name><index pos:start="125:43" pos:end="125:45">[<expr pos:start="125:44" pos:end="125:44"><name pos:start="125:44" pos:end="125:44">i</name></expr>]</index></name><operator pos:start="125:46" pos:end="125:46">.</operator><name pos:start="125:47" pos:end="125:52">sector</name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:57"><expr pos:start="127:13" pos:end="127:56"><name pos:start="127:13" pos:end="127:24"><name pos:start="127:13" pos:end="127:16">reqs</name><index pos:start="127:17" pos:end="127:24">[<expr pos:start="127:18" pos:end="127:23"><name pos:start="127:18" pos:end="127:23">outidx</name></expr>]</index></name><operator pos:start="127:25" pos:end="127:25">.</operator><name pos:start="127:26" pos:end="127:35">nb_sectors</name> <operator pos:start="127:37" pos:end="127:37">=</operator> <name pos:start="127:39" pos:end="127:45"><name pos:start="127:39" pos:end="127:42">reqs</name><index pos:start="127:43" pos:end="127:45">[<expr pos:start="127:44" pos:end="127:44"><name pos:start="127:44" pos:end="127:44">i</name></expr>]</index></name><operator pos:start="127:46" pos:end="127:46">.</operator><name pos:start="127:47" pos:end="127:56">nb_sectors</name></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:51"><expr pos:start="129:13" pos:end="129:50"><name pos:start="129:13" pos:end="129:24"><name pos:start="129:13" pos:end="129:16">reqs</name><index pos:start="129:17" pos:end="129:24">[<expr pos:start="129:18" pos:end="129:23"><name pos:start="129:18" pos:end="129:23">outidx</name></expr>]</index></name><operator pos:start="129:25" pos:end="129:25">.</operator><name pos:start="129:26" pos:end="129:29">qiov</name>       <operator pos:start="129:37" pos:end="129:37">=</operator> <name pos:start="129:39" pos:end="129:45"><name pos:start="129:39" pos:end="129:42">reqs</name><index pos:start="129:43" pos:end="129:45">[<expr pos:start="129:44" pos:end="129:44"><name pos:start="129:44" pos:end="129:44">i</name></expr>]</index></name><operator pos:start="129:46" pos:end="129:46">.</operator><name pos:start="129:47" pos:end="129:50">qiov</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="137:5" pos:end="137:22">return <expr pos:start="137:12" pos:end="137:21"><name pos:start="137:12" pos:end="137:17">outidx</name> <operator pos:start="137:19" pos:end="137:19">+</operator> <literal type="number" pos:start="137:21" pos:end="137:21">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
