<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1887.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">decode_frame_byterun1</name><parameter_list pos:start="1:33" pos:end="5:44">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="127:1">{<block_content pos:start="9:5" pos:end="125:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">IffContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:21">buf_size</name> <init pos:start="13:23" pos:end="13:35">= <expr pos:start="13:25" pos:end="13:35"><name pos:start="13:25" pos:end="13:35"><name pos:start="13:25" pos:end="13:29">avpkt</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:35">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:41"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:26">buf_end</name> <init pos:start="15:28" pos:end="15:41">= <expr pos:start="15:30" pos:end="15:41"><name pos:start="15:30" pos:end="15:32">buf</name><operator pos:start="15:33" pos:end="15:33">+</operator><name pos:start="15:34" pos:end="15:41">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">unsigned</name></type> <name pos:start="17:14" pos:end="17:14">y</name></decl>, <decl pos:start="17:17" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:17" pos:end="17:21">plane</name></decl>, <decl pos:start="17:24" pos:end="17:24"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:24" pos:end="17:24">x</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:50">(<expr pos:start="21:9" pos:end="21:49"><call pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:13">avctx</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:27">reget_buffer</name></name><argument_list pos:start="21:28" pos:end="21:45">(<argument pos:start="21:29" pos:end="21:33"><expr pos:start="21:29" pos:end="21:33"><name pos:start="21:29" pos:end="21:33">avctx</name></expr></argument>, <argument pos:start="21:36" pos:end="21:44"><expr pos:start="21:36" pos:end="21:44"><operator pos:start="21:36" pos:end="21:36">&amp;</operator><name pos:start="21:37" pos:end="21:44"><name pos:start="21:37" pos:end="21:37">s</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:44">frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:47" pos:end="21:47">&lt;</operator> <literal type="number" pos:start="21:49" pos:end="21:49">0</literal></expr>)</condition><block pos:start="21:51" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:61"><expr pos:start="23:9" pos:end="23:60"><call pos:start="23:9" pos:end="23:60"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:60">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:37" pos:end="23:59"><expr pos:start="23:37" pos:end="23:59"><literal type="string" pos:start="23:37" pos:end="23:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="31:5" pos:end="117:5">for<control pos:start="31:8" pos:end="31:40">(<init pos:start="31:9" pos:end="31:14"><expr pos:start="31:9" pos:end="31:13"><name pos:start="31:9" pos:end="31:9">y</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="number" pos:start="31:13" pos:end="31:13">0</literal></expr>;</init> <condition pos:start="31:16" pos:end="31:34"><expr pos:start="31:16" pos:end="31:32"><name pos:start="31:16" pos:end="31:16">y</name> <operator pos:start="31:18" pos:end="31:18">&lt;</operator> <name pos:start="31:20" pos:end="31:32"><name pos:start="31:20" pos:end="31:24">avctx</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:32">height</name></name></expr> ;</condition> <incr pos:start="31:36" pos:end="31:38"><expr pos:start="31:36" pos:end="31:38"><name pos:start="31:36" pos:end="31:36">y</name><operator pos:start="31:37" pos:end="31:38">++</operator></expr></incr> )</control> <block pos:start="31:42" pos:end="117:5">{<block_content pos:start="33:9" pos:end="115:9">

        <decl_stmt pos:start="33:9" pos:end="33:67"><decl pos:start="33:9" pos:end="33:66"><type pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:15">uint8_t</name> <modifier pos:start="33:17" pos:end="33:17">*</modifier></type><name pos:start="33:18" pos:end="33:20">row</name> <init pos:start="33:22" pos:end="33:66">= <expr pos:start="33:24" pos:end="33:66"><operator pos:start="33:24" pos:end="33:24">&amp;</operator><name pos:start="33:25" pos:end="33:66"><name pos:start="33:25" pos:end="33:25">s</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:32">frame</name><operator pos:start="33:33" pos:end="33:33">.</operator><name pos:start="33:34" pos:end="33:37">data</name><index pos:start="33:38" pos:end="33:40">[<expr pos:start="33:39" pos:end="33:39"><literal type="number" pos:start="33:39" pos:end="33:39">0</literal></expr>]</index><index pos:start="33:41" pos:end="33:66">[ <expr pos:start="33:43" pos:end="33:64"><name pos:start="33:43" pos:end="33:43">y</name><operator pos:start="33:44" pos:end="33:44">*</operator><name pos:start="33:45" pos:end="33:64"><name pos:start="33:45" pos:end="33:45">s</name><operator pos:start="33:46" pos:end="33:47">-&gt;</operator><name pos:start="33:48" pos:end="33:52">frame</name><operator pos:start="33:53" pos:end="33:53">.</operator><name pos:start="33:54" pos:end="33:61">linesize</name><index pos:start="33:62" pos:end="33:64">[<expr pos:start="33:63" pos:end="33:63"><literal type="number" pos:start="33:63" pos:end="33:63">0</literal></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="115:9"><if pos:start="35:9" pos:end="83:9">if <condition pos:start="35:12" pos:end="35:55">(<expr pos:start="35:13" pos:end="35:54"><name pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:17">avctx</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:28">codec_tag</name></name> <operator pos:start="35:30" pos:end="35:31">==</operator> <call pos:start="35:33" pos:end="35:54"><name pos:start="35:33" pos:end="35:37">MKTAG</name><argument_list pos:start="35:38" pos:end="35:54">(<argument pos:start="35:39" pos:end="35:41"><expr pos:start="35:39" pos:end="35:41"><literal type="char" pos:start="35:39" pos:end="35:41">'I'</literal></expr></argument>,<argument pos:start="35:43" pos:end="35:45"><expr pos:start="35:43" pos:end="35:45"><literal type="char" pos:start="35:43" pos:end="35:45">'L'</literal></expr></argument>,<argument pos:start="35:47" pos:end="35:49"><expr pos:start="35:47" pos:end="35:49"><literal type="char" pos:start="35:47" pos:end="35:49">'B'</literal></expr></argument>,<argument pos:start="35:51" pos:end="35:53"><expr pos:start="35:51" pos:end="35:53"><literal type="char" pos:start="35:51" pos:end="35:53">'M'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:57" pos:end="83:9">{<block_content pos:start="37:13" pos:end="81:13"> <comment type="line" pos:start="35:59" pos:end="35:71">//interleaved</comment>

            <expr_stmt pos:start="37:13" pos:end="37:95"><expr pos:start="37:13" pos:end="37:94"><call pos:start="37:13" pos:end="37:94"><name pos:start="37:13" pos:end="37:18">memset</name><argument_list pos:start="37:19" pos:end="37:94">(<argument pos:start="37:20" pos:end="37:22"><expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">row</name></expr></argument>, <argument pos:start="37:25" pos:end="37:25"><expr pos:start="37:25" pos:end="37:25"><literal type="number" pos:start="37:25" pos:end="37:25">0</literal></expr></argument>, <argument pos:start="37:28" pos:end="37:93"><expr pos:start="37:28" pos:end="37:93"><ternary pos:start="37:28" pos:end="37:93"><condition pos:start="37:28" pos:end="37:59"><expr pos:start="37:28" pos:end="37:57"><name pos:start="37:28" pos:end="37:41"><name pos:start="37:28" pos:end="37:32">avctx</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:41">pix_fmt</name></name> <operator pos:start="37:43" pos:end="37:44">==</operator> <name pos:start="37:46" pos:end="37:57">PIX_FMT_PAL8</name></expr> ?</condition><then pos:start="37:61" pos:end="37:72"> <expr pos:start="37:61" pos:end="37:72"><name pos:start="37:61" pos:end="37:72"><name pos:start="37:61" pos:end="37:65">avctx</name><operator pos:start="37:66" pos:end="37:67">-&gt;</operator><name pos:start="37:68" pos:end="37:72">width</name></name></expr> </then><else pos:start="37:74" pos:end="37:93">: <expr pos:start="37:76" pos:end="37:93"><operator pos:start="37:76" pos:end="37:76">(</operator><name pos:start="37:77" pos:end="37:88"><name pos:start="37:77" pos:end="37:81">avctx</name><operator pos:start="37:82" pos:end="37:83">-&gt;</operator><name pos:start="37:84" pos:end="37:88">width</name></name> <operator pos:start="37:90" pos:end="37:90">*</operator> <literal type="number" pos:start="37:92" pos:end="37:92">4</literal><operator pos:start="37:93" pos:end="37:93">)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="39:13" pos:end="81:13">for <control pos:start="39:17" pos:end="39:74">(<init pos:start="39:18" pos:end="39:27"><expr pos:start="39:18" pos:end="39:26"><name pos:start="39:18" pos:end="39:22">plane</name> <operator pos:start="39:24" pos:end="39:24">=</operator> <literal type="number" pos:start="39:26" pos:end="39:26">0</literal></expr>;</init> <condition pos:start="39:29" pos:end="39:65"><expr pos:start="39:29" pos:end="39:64"><name pos:start="39:29" pos:end="39:33">plane</name> <operator pos:start="39:35" pos:end="39:35">&lt;</operator> <name pos:start="39:37" pos:end="39:64"><name pos:start="39:37" pos:end="39:41">avctx</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:64">bits_per_coded_sample</name></name></expr>;</condition> <incr pos:start="39:67" pos:end="39:73"><expr pos:start="39:67" pos:end="39:73"><name pos:start="39:67" pos:end="39:71">plane</name><operator pos:start="39:72" pos:end="39:73">++</operator></expr></incr>)</control> <block pos:start="39:76" pos:end="81:13">{<block_content pos:start="41:17" pos:end="79:17">

                <for pos:start="41:17" pos:end="69:17">for<control pos:start="41:20" pos:end="41:63">(<init pos:start="41:21" pos:end="41:26"><expr pos:start="41:21" pos:end="41:25"><name pos:start="41:21" pos:end="41:21">x</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr>;</init> <condition pos:start="41:28" pos:end="41:61"><expr pos:start="41:28" pos:end="41:60"><name pos:start="41:28" pos:end="41:28">x</name> <operator pos:start="41:30" pos:end="41:30">&lt;</operator> <name pos:start="41:32" pos:end="41:43"><name pos:start="41:32" pos:end="41:32">s</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:43">planesize</name></name> <operator pos:start="41:45" pos:end="41:46">&amp;&amp;</operator> <name pos:start="41:48" pos:end="41:50">buf</name> <operator pos:start="41:52" pos:end="41:52">&lt;</operator> <name pos:start="41:54" pos:end="41:60">buf_end</name></expr>;</condition> <incr/>)</control> <block pos:start="41:65" pos:end="69:17">{<block_content pos:start="43:21" pos:end="67:32">

                    <decl_stmt pos:start="43:21" pos:end="43:42"><decl pos:start="43:21" pos:end="43:41"><type pos:start="43:21" pos:end="43:26"><name pos:start="43:21" pos:end="43:26">int8_t</name></type> <name pos:start="43:28" pos:end="43:32">value</name> <init pos:start="43:34" pos:end="43:41">= <expr pos:start="43:36" pos:end="43:41"><operator pos:start="43:36" pos:end="43:36">*</operator><name pos:start="43:37" pos:end="43:39">buf</name><operator pos:start="43:40" pos:end="43:41">++</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="45:21" pos:end="45:36"><decl pos:start="45:21" pos:end="45:35"><type pos:start="45:21" pos:end="45:28"><name pos:start="45:21" pos:end="45:28">unsigned</name></type> <name pos:start="45:30" pos:end="45:35">length</name></decl>;</decl_stmt>

                    <if_stmt pos:start="47:21" pos:end="65:21"><if pos:start="47:21" pos:end="55:21">if <condition pos:start="47:24" pos:end="47:35">(<expr pos:start="47:25" pos:end="47:34"><name pos:start="47:25" pos:end="47:29">value</name> <operator pos:start="47:31" pos:end="47:32">&gt;=</operator> <literal type="number" pos:start="47:34" pos:end="47:34">0</literal></expr>)</condition> <block pos:start="47:37" pos:end="55:21">{<block_content pos:start="49:25" pos:end="53:38">

                        <expr_stmt pos:start="49:25" pos:end="49:43"><expr pos:start="49:25" pos:end="49:42"><name pos:start="49:25" pos:end="49:30">length</name> <operator pos:start="49:32" pos:end="49:32">=</operator> <name pos:start="49:34" pos:end="49:38">value</name> <operator pos:start="49:40" pos:end="49:40">+</operator> <literal type="number" pos:start="49:42" pos:end="49:42">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="51:25" pos:end="51:102"><expr pos:start="51:25" pos:end="51:101"><call pos:start="51:25" pos:end="51:101"><name pos:start="51:25" pos:end="51:30">memcpy</name><argument_list pos:start="51:31" pos:end="51:101">(<argument pos:start="51:32" pos:end="51:46"><expr pos:start="51:32" pos:end="51:46"><name pos:start="51:32" pos:end="51:42"><name pos:start="51:32" pos:end="51:32">s</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:42">planebuf</name></name> <operator pos:start="51:44" pos:end="51:44">+</operator> <name pos:start="51:46" pos:end="51:46">x</name></expr></argument>, <argument pos:start="51:49" pos:end="51:51"><expr pos:start="51:49" pos:end="51:51"><name pos:start="51:49" pos:end="51:51">buf</name></expr></argument>, <argument pos:start="51:54" pos:end="51:100"><expr pos:start="51:54" pos:end="51:100"><call pos:start="51:54" pos:end="51:100"><name pos:start="51:54" pos:end="51:59">FFMIN3</name><argument_list pos:start="51:60" pos:end="51:100">(<argument pos:start="51:61" pos:end="51:66"><expr pos:start="51:61" pos:end="51:66"><name pos:start="51:61" pos:end="51:66">length</name></expr></argument>, <argument pos:start="51:69" pos:end="51:84"><expr pos:start="51:69" pos:end="51:84"><name pos:start="51:69" pos:end="51:80"><name pos:start="51:69" pos:end="51:69">s</name><operator pos:start="51:70" pos:end="51:71">-&gt;</operator><name pos:start="51:72" pos:end="51:80">planesize</name></name> <operator pos:start="51:82" pos:end="51:82">-</operator> <name pos:start="51:84" pos:end="51:84">x</name></expr></argument>, <argument pos:start="51:87" pos:end="51:99"><expr pos:start="51:87" pos:end="51:99"><name pos:start="51:87" pos:end="51:93">buf_end</name> <operator pos:start="51:95" pos:end="51:95">-</operator> <name pos:start="51:97" pos:end="51:99">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="53:25" pos:end="53:38"><expr pos:start="53:25" pos:end="53:37"><name pos:start="53:25" pos:end="53:27">buf</name> <operator pos:start="53:29" pos:end="53:30">+=</operator> <name pos:start="53:32" pos:end="53:37">length</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="55:23" pos:end="61:21">else if <condition pos:start="55:31" pos:end="55:44">(<expr pos:start="55:32" pos:end="55:43"><name pos:start="55:32" pos:end="55:36">value</name> <operator pos:start="55:38" pos:end="55:38">&gt;</operator> <operator pos:start="55:40" pos:end="55:40">-</operator><literal type="number" pos:start="55:41" pos:end="55:43">128</literal></expr>)</condition> <block pos:start="55:46" pos:end="61:21">{<block_content pos:start="57:25" pos:end="59:89">

                        <expr_stmt pos:start="57:25" pos:end="57:44"><expr pos:start="57:25" pos:end="57:43"><name pos:start="57:25" pos:end="57:30">length</name> <operator pos:start="57:32" pos:end="57:32">=</operator> <operator pos:start="57:34" pos:end="57:34">-</operator><name pos:start="57:35" pos:end="57:39">value</name> <operator pos:start="57:41" pos:end="57:41">+</operator> <literal type="number" pos:start="57:43" pos:end="57:43">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="59:25" pos:end="59:89"><expr pos:start="59:25" pos:end="59:88"><call pos:start="59:25" pos:end="59:88"><name pos:start="59:25" pos:end="59:30">memset</name><argument_list pos:start="59:31" pos:end="59:88">(<argument pos:start="59:32" pos:end="59:46"><expr pos:start="59:32" pos:end="59:46"><name pos:start="59:32" pos:end="59:42"><name pos:start="59:32" pos:end="59:32">s</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:42">planebuf</name></name> <operator pos:start="59:44" pos:end="59:44">+</operator> <name pos:start="59:46" pos:end="59:46">x</name></expr></argument>, <argument pos:start="59:49" pos:end="59:54"><expr pos:start="59:49" pos:end="59:54"><operator pos:start="59:49" pos:end="59:49">*</operator><name pos:start="59:50" pos:end="59:52">buf</name><operator pos:start="59:53" pos:end="59:54">++</operator></expr></argument>, <argument pos:start="59:57" pos:end="59:87"><expr pos:start="59:57" pos:end="59:87"><call pos:start="59:57" pos:end="59:87"><name pos:start="59:57" pos:end="59:61">FFMIN</name><argument_list pos:start="59:62" pos:end="59:87">(<argument pos:start="59:63" pos:end="59:68"><expr pos:start="59:63" pos:end="59:68"><name pos:start="59:63" pos:end="59:68">length</name></expr></argument>, <argument pos:start="59:71" pos:end="59:86"><expr pos:start="59:71" pos:end="59:86"><name pos:start="59:71" pos:end="59:82"><name pos:start="59:71" pos:end="59:71">s</name><operator pos:start="59:72" pos:end="59:73">-&gt;</operator><name pos:start="59:74" pos:end="59:82">planesize</name></name> <operator pos:start="59:84" pos:end="59:84">-</operator> <name pos:start="59:86" pos:end="59:86">x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="61:23" pos:end="65:21">else <block pos:start="61:28" pos:end="65:21">{<block_content pos:start="63:25" pos:end="63:33"> <comment type="line" pos:start="61:30" pos:end="61:35">//noop</comment>

                        <continue pos:start="63:25" pos:end="63:33">continue;</continue>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:32"><expr pos:start="67:21" pos:end="67:31"><name pos:start="67:21" pos:end="67:21">x</name> <operator pos:start="67:23" pos:end="67:24">+=</operator> <name pos:start="67:26" pos:end="67:31">length</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="71:17" pos:end="79:17"><if pos:start="71:17" pos:end="75:17">if <condition pos:start="71:20" pos:end="71:51">(<expr pos:start="71:21" pos:end="71:50"><name pos:start="71:21" pos:end="71:34"><name pos:start="71:21" pos:end="71:25">avctx</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:34">pix_fmt</name></name> <operator pos:start="71:36" pos:end="71:37">==</operator> <name pos:start="71:39" pos:end="71:50">PIX_FMT_PAL8</name></expr>)</condition> <block pos:start="71:53" pos:end="75:17">{<block_content pos:start="73:21" pos:end="73:102">

                    <expr_stmt pos:start="73:21" pos:end="73:102"><expr pos:start="73:21" pos:end="73:101"><call pos:start="73:21" pos:end="73:101"><name pos:start="73:21" pos:end="73:32">decodeplane8</name><argument_list pos:start="73:33" pos:end="73:101">(<argument pos:start="73:34" pos:end="73:36"><expr pos:start="73:34" pos:end="73:36"><name pos:start="73:34" pos:end="73:36">row</name></expr></argument>, <argument pos:start="73:39" pos:end="73:49"><expr pos:start="73:39" pos:end="73:49"><name pos:start="73:39" pos:end="73:49"><name pos:start="73:39" pos:end="73:39">s</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:49">planebuf</name></name></expr></argument>, <argument pos:start="73:52" pos:end="73:63"><expr pos:start="73:52" pos:end="73:63"><name pos:start="73:52" pos:end="73:63"><name pos:start="73:52" pos:end="73:52">s</name><operator pos:start="73:53" pos:end="73:54">-&gt;</operator><name pos:start="73:55" pos:end="73:63">planesize</name></name></expr></argument>, <argument pos:start="73:66" pos:end="73:93"><expr pos:start="73:66" pos:end="73:93"><name pos:start="73:66" pos:end="73:93"><name pos:start="73:66" pos:end="73:70">avctx</name><operator pos:start="73:71" pos:end="73:72">-&gt;</operator><name pos:start="73:73" pos:end="73:93">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="73:96" pos:end="73:100"><expr pos:start="73:96" pos:end="73:100"><name pos:start="73:96" pos:end="73:100">plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="75:19" pos:end="79:17">else <block pos:start="75:24" pos:end="79:17">{<block_content pos:start="77:21" pos:end="77:116"> <comment type="line" pos:start="75:26" pos:end="75:40">//PIX_FMT_BGR32</comment>

                    <expr_stmt pos:start="77:21" pos:end="77:116"><expr pos:start="77:21" pos:end="77:115"><call pos:start="77:21" pos:end="77:115"><name pos:start="77:21" pos:end="77:33">decodeplane32</name><argument_list pos:start="77:34" pos:end="77:115">(<argument pos:start="77:35" pos:end="77:50"><expr pos:start="77:35" pos:end="77:50"><operator pos:start="77:35" pos:end="77:35">(</operator><name pos:start="77:36" pos:end="77:43">uint32_t</name> <operator pos:start="77:45" pos:end="77:45">*</operator><operator pos:start="77:46" pos:end="77:46">)</operator> <name pos:start="77:48" pos:end="77:50">row</name></expr></argument>, <argument pos:start="77:53" pos:end="77:63"><expr pos:start="77:53" pos:end="77:63"><name pos:start="77:53" pos:end="77:63"><name pos:start="77:53" pos:end="77:53">s</name><operator pos:start="77:54" pos:end="77:55">-&gt;</operator><name pos:start="77:56" pos:end="77:63">planebuf</name></name></expr></argument>, <argument pos:start="77:66" pos:end="77:77"><expr pos:start="77:66" pos:end="77:77"><name pos:start="77:66" pos:end="77:77"><name pos:start="77:66" pos:end="77:66">s</name><operator pos:start="77:67" pos:end="77:68">-&gt;</operator><name pos:start="77:69" pos:end="77:77">planesize</name></name></expr></argument>, <argument pos:start="77:80" pos:end="77:107"><expr pos:start="77:80" pos:end="77:107"><name pos:start="77:80" pos:end="77:107"><name pos:start="77:80" pos:end="77:84">avctx</name><operator pos:start="77:85" pos:end="77:86">-&gt;</operator><name pos:start="77:87" pos:end="77:107">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="77:110" pos:end="77:114"><expr pos:start="77:110" pos:end="77:114"><name pos:start="77:110" pos:end="77:114">plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="115:9">else <block pos:start="83:16" pos:end="115:9">{<block_content pos:start="85:13" pos:end="113:13">

            <for pos:start="85:13" pos:end="113:13">for<control pos:start="85:16" pos:end="85:59">(<init pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:21"><name pos:start="85:17" pos:end="85:17">x</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <literal type="number" pos:start="85:21" pos:end="85:21">0</literal></expr>;</init> <condition pos:start="85:24" pos:end="85:57"><expr pos:start="85:24" pos:end="85:56"><name pos:start="85:24" pos:end="85:24">x</name> <operator pos:start="85:26" pos:end="85:26">&lt;</operator> <name pos:start="85:28" pos:end="85:39"><name pos:start="85:28" pos:end="85:32">avctx</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:39">width</name></name> <operator pos:start="85:41" pos:end="85:42">&amp;&amp;</operator> <name pos:start="85:44" pos:end="85:46">buf</name> <operator pos:start="85:48" pos:end="85:48">&lt;</operator> <name pos:start="85:50" pos:end="85:56">buf_end</name></expr>;</condition> <incr/>)</control> <block pos:start="85:61" pos:end="113:13">{<block_content pos:start="87:17" pos:end="111:28">

                <decl_stmt pos:start="87:17" pos:end="87:38"><decl pos:start="87:17" pos:end="87:37"><type pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">int8_t</name></type> <name pos:start="87:24" pos:end="87:28">value</name> <init pos:start="87:30" pos:end="87:37">= <expr pos:start="87:32" pos:end="87:37"><operator pos:start="87:32" pos:end="87:32">*</operator><name pos:start="87:33" pos:end="87:35">buf</name><operator pos:start="87:36" pos:end="87:37">++</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="89:17" pos:end="89:32"><decl pos:start="89:17" pos:end="89:31"><type pos:start="89:17" pos:end="89:24"><name pos:start="89:17" pos:end="89:24">unsigned</name></type> <name pos:start="89:26" pos:end="89:31">length</name></decl>;</decl_stmt>

                <if_stmt pos:start="91:17" pos:end="109:17"><if pos:start="91:17" pos:end="99:17">if <condition pos:start="91:20" pos:end="91:31">(<expr pos:start="91:21" pos:end="91:30"><name pos:start="91:21" pos:end="91:25">value</name> <operator pos:start="91:27" pos:end="91:28">&gt;=</operator> <literal type="number" pos:start="91:30" pos:end="91:30">0</literal></expr>)</condition> <block pos:start="91:33" pos:end="99:17">{<block_content pos:start="93:21" pos:end="97:34">

                    <expr_stmt pos:start="93:21" pos:end="93:39"><expr pos:start="93:21" pos:end="93:38"><name pos:start="93:21" pos:end="93:26">length</name> <operator pos:start="93:28" pos:end="93:28">=</operator> <name pos:start="93:30" pos:end="93:34">value</name> <operator pos:start="93:36" pos:end="93:36">+</operator> <literal type="number" pos:start="93:38" pos:end="93:38">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="95:90"><expr pos:start="95:21" pos:end="95:89"><call pos:start="95:21" pos:end="95:89"><name pos:start="95:21" pos:end="95:26">memcpy</name><argument_list pos:start="95:27" pos:end="95:89">(<argument pos:start="95:28" pos:end="95:34"><expr pos:start="95:28" pos:end="95:34"><name pos:start="95:28" pos:end="95:30">row</name> <operator pos:start="95:32" pos:end="95:32">+</operator> <name pos:start="95:34" pos:end="95:34">x</name></expr></argument>, <argument pos:start="95:37" pos:end="95:39"><expr pos:start="95:37" pos:end="95:39"><name pos:start="95:37" pos:end="95:39">buf</name></expr></argument>, <argument pos:start="95:42" pos:end="95:88"><expr pos:start="95:42" pos:end="95:88"><call pos:start="95:42" pos:end="95:88"><name pos:start="95:42" pos:end="95:47">FFMIN3</name><argument_list pos:start="95:48" pos:end="95:88">(<argument pos:start="95:49" pos:end="95:54"><expr pos:start="95:49" pos:end="95:54"><name pos:start="95:49" pos:end="95:54">length</name></expr></argument>, <argument pos:start="95:57" pos:end="95:69"><expr pos:start="95:57" pos:end="95:69"><name pos:start="95:57" pos:end="95:63">buf_end</name> <operator pos:start="95:65" pos:end="95:65">-</operator> <name pos:start="95:67" pos:end="95:69">buf</name></expr></argument>, <argument pos:start="95:72" pos:end="95:87"><expr pos:start="95:72" pos:end="95:87"><name pos:start="95:72" pos:end="95:83"><name pos:start="95:72" pos:end="95:76">avctx</name><operator pos:start="95:77" pos:end="95:78">-&gt;</operator><name pos:start="95:79" pos:end="95:83">width</name></name> <operator pos:start="95:85" pos:end="95:85">-</operator> <name pos:start="95:87" pos:end="95:87">x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:34"><expr pos:start="97:21" pos:end="97:33"><name pos:start="97:21" pos:end="97:23">buf</name> <operator pos:start="97:25" pos:end="97:26">+=</operator> <name pos:start="97:28" pos:end="97:33">length</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="99:19" pos:end="105:17">else if <condition pos:start="99:27" pos:end="99:40">(<expr pos:start="99:28" pos:end="99:39"><name pos:start="99:28" pos:end="99:32">value</name> <operator pos:start="99:34" pos:end="99:34">&gt;</operator> <operator pos:start="99:36" pos:end="99:36">-</operator><literal type="number" pos:start="99:37" pos:end="99:39">128</literal></expr>)</condition> <block pos:start="99:42" pos:end="105:17">{<block_content pos:start="101:21" pos:end="103:77">

                    <expr_stmt pos:start="101:21" pos:end="101:40"><expr pos:start="101:21" pos:end="101:39"><name pos:start="101:21" pos:end="101:26">length</name> <operator pos:start="101:28" pos:end="101:28">=</operator> <operator pos:start="101:30" pos:end="101:30">-</operator><name pos:start="101:31" pos:end="101:35">value</name> <operator pos:start="101:37" pos:end="101:37">+</operator> <literal type="number" pos:start="101:39" pos:end="101:39">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:77"><expr pos:start="103:21" pos:end="103:76"><call pos:start="103:21" pos:end="103:76"><name pos:start="103:21" pos:end="103:26">memset</name><argument_list pos:start="103:27" pos:end="103:76">(<argument pos:start="103:28" pos:end="103:34"><expr pos:start="103:28" pos:end="103:34"><name pos:start="103:28" pos:end="103:30">row</name> <operator pos:start="103:32" pos:end="103:32">+</operator> <name pos:start="103:34" pos:end="103:34">x</name></expr></argument>, <argument pos:start="103:37" pos:end="103:42"><expr pos:start="103:37" pos:end="103:42"><operator pos:start="103:37" pos:end="103:37">*</operator><name pos:start="103:38" pos:end="103:40">buf</name><operator pos:start="103:41" pos:end="103:42">++</operator></expr></argument>, <argument pos:start="103:45" pos:end="103:75"><expr pos:start="103:45" pos:end="103:75"><call pos:start="103:45" pos:end="103:75"><name pos:start="103:45" pos:end="103:49">FFMIN</name><argument_list pos:start="103:50" pos:end="103:75">(<argument pos:start="103:51" pos:end="103:56"><expr pos:start="103:51" pos:end="103:56"><name pos:start="103:51" pos:end="103:56">length</name></expr></argument>, <argument pos:start="103:59" pos:end="103:74"><expr pos:start="103:59" pos:end="103:74"><name pos:start="103:59" pos:end="103:70"><name pos:start="103:59" pos:end="103:63">avctx</name><operator pos:start="103:64" pos:end="103:65">-&gt;</operator><name pos:start="103:66" pos:end="103:70">width</name></name> <operator pos:start="103:72" pos:end="103:72">-</operator> <name pos:start="103:74" pos:end="103:74">x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="105:19" pos:end="109:17">else <block pos:start="105:24" pos:end="109:17">{<block_content pos:start="107:21" pos:end="107:29"> <comment type="line" pos:start="105:26" pos:end="105:31">//noop</comment>

                    <continue pos:start="107:21" pos:end="107:29">continue;</continue>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:28"><expr pos:start="111:17" pos:end="111:27"><name pos:start="111:17" pos:end="111:17">x</name> <operator pos:start="111:19" pos:end="111:20">+=</operator> <name pos:start="111:22" pos:end="111:27">length</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="121:5" pos:end="121:33"><expr pos:start="121:5" pos:end="121:32"><operator pos:start="121:5" pos:end="121:5">*</operator><name pos:start="121:6" pos:end="121:14">data_size</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <sizeof pos:start="121:18" pos:end="121:32">sizeof<argument_list pos:start="121:24" pos:end="121:32">(<argument pos:start="121:25" pos:end="121:31"><expr pos:start="121:25" pos:end="121:31"><name pos:start="121:25" pos:end="121:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:31"><expr pos:start="123:5" pos:end="123:30"><operator pos:start="123:5" pos:end="123:5">*</operator><operator pos:start="123:6" pos:end="123:6">(</operator><name pos:start="123:7" pos:end="123:13">AVFrame</name><operator pos:start="123:14" pos:end="123:14">*</operator><operator pos:start="123:15" pos:end="123:15">)</operator><name pos:start="123:16" pos:end="123:19">data</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <name pos:start="123:23" pos:end="123:30"><name pos:start="123:23" pos:end="123:23">s</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:30">frame</name></name></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:20">return <expr pos:start="125:12" pos:end="125:19"><name pos:start="125:12" pos:end="125:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
