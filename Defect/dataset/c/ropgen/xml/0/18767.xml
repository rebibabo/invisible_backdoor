<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18767.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">apply_loop_filter</name><parameter_list pos:start="1:30" pos:end="1:83">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:46">Vp3DecodeContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:60"><decl pos:start="1:52" pos:end="1:60"><type pos:start="1:52" pos:end="1:60"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:60">plane</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:72"><decl pos:start="1:63" pos:end="1:72"><type pos:start="1:63" pos:end="1:72"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:72">ystart</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:82"><decl pos:start="1:75" pos:end="1:82"><type pos:start="1:75" pos:end="1:82"><name pos:start="1:75" pos:end="1:77">int</name></type> <name pos:start="1:79" pos:end="1:82">yend</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:5">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">x</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">int</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:24">bounding_values</name><init pos:start="7:25" pos:end="7:54">= <expr pos:start="7:27" pos:end="7:54"><name pos:start="7:27" pos:end="7:50"><name pos:start="7:27" pos:end="7:27">s</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:50">bounding_values_array</name></name><operator pos:start="7:51" pos:end="7:51">+</operator><literal type="number" pos:start="7:52" pos:end="7:54">127</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">width</name>           <init pos:start="11:25" pos:end="11:52">= <expr pos:start="11:27" pos:end="11:52"><name pos:start="11:27" pos:end="11:52"><name pos:start="11:27" pos:end="11:27">s</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:43">fragment_width</name><index pos:start="11:44" pos:end="11:52">[<expr pos:start="11:45" pos:end="11:51"><operator pos:start="11:45" pos:end="11:45">!</operator><operator pos:start="11:46" pos:end="11:46">!</operator><name pos:start="11:47" pos:end="11:51">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:54"><decl pos:start="13:5" pos:end="13:53"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">height</name>          <init pos:start="13:25" pos:end="13:53">= <expr pos:start="13:27" pos:end="13:53"><name pos:start="13:27" pos:end="13:53"><name pos:start="13:27" pos:end="13:27">s</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:44">fragment_height</name><index pos:start="13:45" pos:end="13:53">[<expr pos:start="13:46" pos:end="13:52"><operator pos:start="13:46" pos:end="13:46">!</operator><operator pos:start="13:47" pos:end="13:47">!</operator><name pos:start="13:48" pos:end="13:52">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:76"><decl pos:start="15:5" pos:end="15:75"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">fragment</name>        <init pos:start="15:25" pos:end="15:75">= <expr pos:start="15:27" pos:end="15:75"><name pos:start="15:27" pos:end="15:58"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:43">fragment_start</name>        <index pos:start="15:52" pos:end="15:58">[<expr pos:start="15:53" pos:end="15:57"><name pos:start="15:53" pos:end="15:57">plane</name></expr>]</index></name> <operator pos:start="15:60" pos:end="15:60">+</operator> <name pos:start="15:62" pos:end="15:67">ystart</name> <operator pos:start="15:69" pos:end="15:69">*</operator> <name pos:start="15:71" pos:end="15:75">width</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:59"><decl pos:start="17:5" pos:end="17:58"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">stride</name>          <init pos:start="17:25" pos:end="17:58">= <expr pos:start="17:27" pos:end="17:58"><name pos:start="17:27" pos:end="17:58"><name pos:start="17:27" pos:end="17:27">s</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:42">current_frame</name><operator pos:start="17:43" pos:end="17:43">.</operator><name pos:start="17:44" pos:end="17:51">linesize</name><index pos:start="17:52" pos:end="17:58">[<expr pos:start="17:53" pos:end="17:57"><name pos:start="17:53" pos:end="17:57">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:59"><decl pos:start="19:5" pos:end="19:58"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:23">plane_data</name> <init pos:start="19:25" pos:end="19:58">= <expr pos:start="19:27" pos:end="19:58"><name pos:start="19:27" pos:end="19:58"><name pos:start="19:27" pos:end="19:27">s</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:42">current_frame</name><operator pos:start="19:43" pos:end="19:43">.</operator><name pos:start="19:44" pos:end="19:47">data</name>    <index pos:start="19:52" pos:end="19:58">[<expr pos:start="19:53" pos:end="19:57"><name pos:start="19:53" pos:end="19:57">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="21:5" pos:end="21:44"><if pos:start="21:5" pos:end="21:44">if <condition pos:start="21:8" pos:end="21:26">(<expr pos:start="21:9" pos:end="21:25"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:25"><name pos:start="21:10" pos:end="21:10">s</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:25">flipped_image</name></name></expr>)</condition><block type="pseudo" pos:start="21:28" pos:end="21:44"><block_content pos:start="21:28" pos:end="21:44"> <expr_stmt pos:start="21:28" pos:end="21:44"><expr pos:start="21:28" pos:end="21:43"><name pos:start="21:28" pos:end="21:33">stride</name> <operator pos:start="21:35" pos:end="21:35">=</operator> <operator pos:start="21:37" pos:end="21:37">-</operator><name pos:start="21:38" pos:end="21:43">stride</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:58"><expr pos:start="23:5" pos:end="23:57"><name pos:start="23:5" pos:end="23:14">plane_data</name> <operator pos:start="23:16" pos:end="23:17">+=</operator> <name pos:start="23:19" pos:end="23:39"><name pos:start="23:19" pos:end="23:19">s</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:32">data_offset</name><index pos:start="23:33" pos:end="23:39">[<expr pos:start="23:34" pos:end="23:38"><name pos:start="23:34" pos:end="23:38">plane</name></expr>]</index></name> <operator pos:start="23:41" pos:end="23:41">+</operator> <literal type="number" pos:start="23:43" pos:end="23:43">8</literal><operator pos:start="23:44" pos:end="23:44">*</operator><name pos:start="23:45" pos:end="23:50">ystart</name><operator pos:start="23:51" pos:end="23:51">*</operator><name pos:start="23:52" pos:end="23:57">stride</name></expr>;</expr_stmt>



    <for pos:start="27:5" pos:end="121:5">for <control pos:start="27:9" pos:end="27:35">(<init pos:start="27:10" pos:end="27:20"><expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:10">y</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:19">ystart</name></expr>;</init> <condition pos:start="27:22" pos:end="27:30"><expr pos:start="27:22" pos:end="27:29"><name pos:start="27:22" pos:end="27:22">y</name> <operator pos:start="27:24" pos:end="27:24">&lt;</operator> <name pos:start="27:26" pos:end="27:29">yend</name></expr>;</condition> <incr pos:start="27:32" pos:end="27:34"><expr pos:start="27:32" pos:end="27:34"><name pos:start="27:32" pos:end="27:32">y</name><operator pos:start="27:33" pos:end="27:34">++</operator></expr></incr>)</control> <block pos:start="27:37" pos:end="121:5">{<block_content pos:start="31:9" pos:end="119:31">



        <for pos:start="31:9" pos:end="117:9">for <control pos:start="31:13" pos:end="31:35">(<init pos:start="31:14" pos:end="31:19"><expr pos:start="31:14" pos:end="31:18"><name pos:start="31:14" pos:end="31:14">x</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</init> <condition pos:start="31:21" pos:end="31:30"><expr pos:start="31:21" pos:end="31:29"><name pos:start="31:21" pos:end="31:21">x</name> <operator pos:start="31:23" pos:end="31:23">&lt;</operator> <name pos:start="31:25" pos:end="31:29">width</name></expr>;</condition> <incr pos:start="31:32" pos:end="31:34"><expr pos:start="31:32" pos:end="31:34"><name pos:start="31:32" pos:end="31:32">x</name><operator pos:start="31:33" pos:end="31:34">++</operator></expr></incr>)</control> <block pos:start="31:37" pos:end="117:9">{<block_content pos:start="41:13" pos:end="115:23">

            <comment type="block" pos:start="33:13" pos:end="39:57">/* This code basically just deblocks on the edges of coded blocks.

             * However, it has to be much more complicated because of the

             * braindamaged deblock ordering used in VP3/Theora. Order matters

             * because some pixels get filtered twice. */</comment>

            <if_stmt pos:start="41:13" pos:end="111:13"><if pos:start="41:13" pos:end="111:13">if<condition pos:start="41:15" pos:end="41:71">( <expr pos:start="41:17" pos:end="41:69"><name pos:start="41:17" pos:end="41:42"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:32">all_fragments</name><index pos:start="41:33" pos:end="41:42">[<expr pos:start="41:34" pos:end="41:41"><name pos:start="41:34" pos:end="41:41">fragment</name></expr>]</index></name><operator pos:start="41:43" pos:end="41:43">.</operator><name pos:start="41:44" pos:end="41:56">coding_method</name> <operator pos:start="41:58" pos:end="41:59">!=</operator> <name pos:start="41:61" pos:end="41:69">MODE_COPY</name></expr> )</condition>

            <block pos:start="43:13" pos:end="111:13">{<block_content pos:start="47:17" pos:end="109:17">

                <comment type="block" pos:start="45:17" pos:end="45:76">/* do not perform left edge filter for left columns frags */</comment>

                <if_stmt pos:start="47:17" pos:end="55:17"><if pos:start="47:17" pos:end="55:17">if <condition pos:start="47:20" pos:end="47:26">(<expr pos:start="47:21" pos:end="47:25"><name pos:start="47:21" pos:end="47:21">x</name> <operator pos:start="47:23" pos:end="47:23">&gt;</operator> <literal type="number" pos:start="47:25" pos:end="47:25">0</literal></expr>)</condition> <block pos:start="47:28" pos:end="55:17">{<block_content pos:start="49:21" pos:end="53:49">

                    <expr_stmt pos:start="49:21" pos:end="53:49"><expr pos:start="49:21" pos:end="53:48"><call pos:start="49:21" pos:end="53:48"><name pos:start="49:21" pos:end="49:44"><name pos:start="49:21" pos:end="49:21">s</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:26">dsp</name><operator pos:start="49:27" pos:end="49:27">.</operator><name pos:start="49:28" pos:end="49:44">vp3_h_loop_filter</name></name><argument_list pos:start="49:45" pos:end="53:48">(

                        <argument pos:start="51:25" pos:end="51:40"><expr pos:start="51:25" pos:end="51:40"><name pos:start="51:25" pos:end="51:34">plane_data</name> <operator pos:start="51:36" pos:end="51:36">+</operator> <literal type="number" pos:start="51:38" pos:end="51:38">8</literal><operator pos:start="51:39" pos:end="51:39">*</operator><name pos:start="51:40" pos:end="51:40">x</name></expr></argument>,

                        <argument pos:start="53:25" pos:end="53:30"><expr pos:start="53:25" pos:end="53:30"><name pos:start="53:25" pos:end="53:30">stride</name></expr></argument>, <argument pos:start="53:33" pos:end="53:47"><expr pos:start="53:33" pos:end="53:47"><name pos:start="53:33" pos:end="53:47">bounding_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="59:17" pos:end="59:74">/* do not perform top edge filter for top row fragments */</comment>

                <if_stmt pos:start="61:17" pos:end="69:17"><if pos:start="61:17" pos:end="69:17">if <condition pos:start="61:20" pos:end="61:26">(<expr pos:start="61:21" pos:end="61:25"><name pos:start="61:21" pos:end="61:21">y</name> <operator pos:start="61:23" pos:end="61:23">&gt;</operator> <literal type="number" pos:start="61:25" pos:end="61:25">0</literal></expr>)</condition> <block pos:start="61:28" pos:end="69:17">{<block_content pos:start="63:21" pos:end="67:49">

                    <expr_stmt pos:start="63:21" pos:end="67:49"><expr pos:start="63:21" pos:end="67:48"><call pos:start="63:21" pos:end="67:48"><name pos:start="63:21" pos:end="63:44"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:26">dsp</name><operator pos:start="63:27" pos:end="63:27">.</operator><name pos:start="63:28" pos:end="63:44">vp3_v_loop_filter</name></name><argument_list pos:start="63:45" pos:end="67:48">(

                        <argument pos:start="65:25" pos:end="65:40"><expr pos:start="65:25" pos:end="65:40"><name pos:start="65:25" pos:end="65:34">plane_data</name> <operator pos:start="65:36" pos:end="65:36">+</operator> <literal type="number" pos:start="65:38" pos:end="65:38">8</literal><operator pos:start="65:39" pos:end="65:39">*</operator><name pos:start="65:40" pos:end="65:40">x</name></expr></argument>,

                        <argument pos:start="67:25" pos:end="67:30"><expr pos:start="67:25" pos:end="67:30"><name pos:start="67:25" pos:end="67:30">stride</name></expr></argument>, <argument pos:start="67:33" pos:end="67:47"><expr pos:start="67:33" pos:end="67:47"><name pos:start="67:33" pos:end="67:47">bounding_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="73:17" pos:end="77:75">/* do not perform right edge filter for right column

                 * fragments or if right fragment neighbor is also coded

                 * in this frame (it will be filtered in next iteration) */</comment>

                <if_stmt pos:start="79:17" pos:end="89:17"><if pos:start="79:17" pos:end="89:17">if <condition pos:start="79:20" pos:end="81:80">(<expr pos:start="79:21" pos:end="81:79"><operator pos:start="79:21" pos:end="79:21">(</operator><name pos:start="79:22" pos:end="79:22">x</name> <operator pos:start="79:24" pos:end="79:24">&lt;</operator> <name pos:start="79:26" pos:end="79:30">width</name> <operator pos:start="79:32" pos:end="79:32">-</operator> <literal type="number" pos:start="79:34" pos:end="79:34">1</literal><operator pos:start="79:35" pos:end="79:35">)</operator> <operator pos:start="79:37" pos:end="79:38">&amp;&amp;</operator>

                    <operator pos:start="81:21" pos:end="81:21">(</operator><name pos:start="81:22" pos:end="81:51"><name pos:start="81:22" pos:end="81:22">s</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:37">all_fragments</name><index pos:start="81:38" pos:end="81:51">[<expr pos:start="81:39" pos:end="81:50"><name pos:start="81:39" pos:end="81:46">fragment</name> <operator pos:start="81:48" pos:end="81:48">+</operator> <literal type="number" pos:start="81:50" pos:end="81:50">1</literal></expr>]</index></name><operator pos:start="81:52" pos:end="81:52">.</operator><name pos:start="81:53" pos:end="81:65">coding_method</name> <operator pos:start="81:67" pos:end="81:68">==</operator> <name pos:start="81:70" pos:end="81:78">MODE_COPY</name><operator pos:start="81:79" pos:end="81:79">)</operator></expr>)</condition> <block pos:start="81:82" pos:end="89:17">{<block_content pos:start="83:21" pos:end="87:49">

                    <expr_stmt pos:start="83:21" pos:end="87:49"><expr pos:start="83:21" pos:end="87:48"><call pos:start="83:21" pos:end="87:48"><name pos:start="83:21" pos:end="83:44"><name pos:start="83:21" pos:end="83:21">s</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:26">dsp</name><operator pos:start="83:27" pos:end="83:27">.</operator><name pos:start="83:28" pos:end="83:44">vp3_h_loop_filter</name></name><argument_list pos:start="83:45" pos:end="87:48">(

                        <argument pos:start="85:25" pos:end="85:44"><expr pos:start="85:25" pos:end="85:44"><name pos:start="85:25" pos:end="85:34">plane_data</name> <operator pos:start="85:36" pos:end="85:36">+</operator> <literal type="number" pos:start="85:38" pos:end="85:38">8</literal><operator pos:start="85:39" pos:end="85:39">*</operator><name pos:start="85:40" pos:end="85:40">x</name> <operator pos:start="85:42" pos:end="85:42">+</operator> <literal type="number" pos:start="85:44" pos:end="85:44">8</literal></expr></argument>,

                        <argument pos:start="87:25" pos:end="87:30"><expr pos:start="87:25" pos:end="87:30"><name pos:start="87:25" pos:end="87:30">stride</name></expr></argument>, <argument pos:start="87:33" pos:end="87:47"><expr pos:start="87:33" pos:end="87:47"><name pos:start="87:33" pos:end="87:47">bounding_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="93:17" pos:end="97:73">/* do not perform bottom edge filter for bottom row

                 * fragments or if bottom fragment neighbor is also coded

                 * in this frame (it will be filtered in the next row) */</comment>

                <if_stmt pos:start="99:17" pos:end="109:17"><if pos:start="99:17" pos:end="109:17">if <condition pos:start="99:20" pos:end="101:84">(<expr pos:start="99:21" pos:end="101:83"><operator pos:start="99:21" pos:end="99:21">(</operator><name pos:start="99:22" pos:end="99:22">y</name> <operator pos:start="99:24" pos:end="99:24">&lt;</operator> <name pos:start="99:26" pos:end="99:31">height</name> <operator pos:start="99:33" pos:end="99:33">-</operator> <literal type="number" pos:start="99:35" pos:end="99:35">1</literal><operator pos:start="99:36" pos:end="99:36">)</operator> <operator pos:start="99:38" pos:end="99:39">&amp;&amp;</operator>

                    <operator pos:start="101:21" pos:end="101:21">(</operator><name pos:start="101:22" pos:end="101:55"><name pos:start="101:22" pos:end="101:22">s</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:37">all_fragments</name><index pos:start="101:38" pos:end="101:55">[<expr pos:start="101:39" pos:end="101:54"><name pos:start="101:39" pos:end="101:46">fragment</name> <operator pos:start="101:48" pos:end="101:48">+</operator> <name pos:start="101:50" pos:end="101:54">width</name></expr>]</index></name><operator pos:start="101:56" pos:end="101:56">.</operator><name pos:start="101:57" pos:end="101:69">coding_method</name> <operator pos:start="101:71" pos:end="101:72">==</operator> <name pos:start="101:74" pos:end="101:82">MODE_COPY</name><operator pos:start="101:83" pos:end="101:83">)</operator></expr>)</condition> <block pos:start="101:86" pos:end="109:17">{<block_content pos:start="103:21" pos:end="107:49">

                    <expr_stmt pos:start="103:21" pos:end="107:49"><expr pos:start="103:21" pos:end="107:48"><call pos:start="103:21" pos:end="107:48"><name pos:start="103:21" pos:end="103:44"><name pos:start="103:21" pos:end="103:21">s</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:26">dsp</name><operator pos:start="103:27" pos:end="103:27">.</operator><name pos:start="103:28" pos:end="103:44">vp3_v_loop_filter</name></name><argument_list pos:start="103:45" pos:end="107:48">(

                        <argument pos:start="105:25" pos:end="105:51"><expr pos:start="105:25" pos:end="105:51"><name pos:start="105:25" pos:end="105:34">plane_data</name> <operator pos:start="105:36" pos:end="105:36">+</operator> <literal type="number" pos:start="105:38" pos:end="105:38">8</literal><operator pos:start="105:39" pos:end="105:39">*</operator><name pos:start="105:40" pos:end="105:40">x</name> <operator pos:start="105:42" pos:end="105:42">+</operator> <literal type="number" pos:start="105:44" pos:end="105:44">8</literal><operator pos:start="105:45" pos:end="105:45">*</operator><name pos:start="105:46" pos:end="105:51">stride</name></expr></argument>,

                        <argument pos:start="107:25" pos:end="107:30"><expr pos:start="107:25" pos:end="107:30"><name pos:start="107:25" pos:end="107:30">stride</name></expr></argument>, <argument pos:start="107:33" pos:end="107:47"><expr pos:start="107:33" pos:end="107:47"><name pos:start="107:33" pos:end="107:47">bounding_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="115:13" pos:end="115:23"><expr pos:start="115:13" pos:end="115:22"><name pos:start="115:13" pos:end="115:20">fragment</name><operator pos:start="115:21" pos:end="115:22">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="119:9" pos:end="119:31"><expr pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:18">plane_data</name> <operator pos:start="119:20" pos:end="119:21">+=</operator> <literal type="number" pos:start="119:23" pos:end="119:23">8</literal><operator pos:start="119:24" pos:end="119:24">*</operator><name pos:start="119:25" pos:end="119:30">stride</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
