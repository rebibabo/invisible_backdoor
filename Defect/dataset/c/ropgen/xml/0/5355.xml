<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5355.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">decode_frame_header</name><parameter_list pos:start="1:31" pos:end="3:74">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:44">ProresContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><specifier pos:start="1:52" pos:end="1:56">const</specifier> <name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">buf</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:50"><decl pos:start="3:32" pos:end="3:50"><type pos:start="3:32" pos:end="3:50"><specifier pos:start="3:32" pos:end="3:36">const</specifier> <name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:50">data_size</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:73"><decl pos:start="3:53" pos:end="3:73"><type pos:start="3:53" pos:end="3:73"><name pos:start="3:53" pos:end="3:66">AVCodecContext</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:73">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="159:20">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">hdr_size</name></decl>, <decl pos:start="7:19" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:23">width</name></decl>, <decl pos:start="7:26" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:31">height</name></decl>, <decl pos:start="7:34" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:34" pos:end="7:38">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:28"><expr pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:12">hdr_size</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:27"><name pos:start="15:16" pos:end="15:22">AV_RB16</name><argument_list pos:start="15:23" pos:end="15:27">(<argument pos:start="15:24" pos:end="15:26"><expr pos:start="15:24" pos:end="15:26"><name pos:start="15:24" pos:end="15:26">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:49"><expr pos:start="17:5" pos:end="17:48"><call pos:start="17:5" pos:end="17:48"><name pos:start="17:5" pos:end="17:11">av_dlog</name><argument_list pos:start="17:12" pos:end="17:48">(<argument pos:start="17:13" pos:end="17:17"><expr pos:start="17:13" pos:end="17:17"><name pos:start="17:13" pos:end="17:17">avctx</name></expr></argument>, <argument pos:start="17:20" pos:end="17:37"><expr pos:start="17:20" pos:end="17:37"><literal type="string" pos:start="17:20" pos:end="17:37">"header size %d\n"</literal></expr></argument>, <argument pos:start="17:40" pos:end="17:47"><expr pos:start="17:40" pos:end="17:47"><name pos:start="17:40" pos:end="17:47">hdr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:16">hdr_size</name> <operator pos:start="19:18" pos:end="19:18">&gt;</operator> <name pos:start="19:20" pos:end="19:28">data_size</name></expr>)</condition> <block pos:start="19:31" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:35">

        <expr_stmt pos:start="21:9" pos:end="21:66"><expr pos:start="21:9" pos:end="21:65"><call pos:start="21:9" pos:end="21:65"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:65">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:37" pos:end="21:64"><expr pos:start="21:37" pos:end="21:64"><literal type="string" pos:start="21:37" pos:end="21:64">"error, wrong header size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><name pos:start="23:16" pos:end="23:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:11">version</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:30"><name pos:start="29:15" pos:end="29:21">AV_RB16</name><argument_list pos:start="29:22" pos:end="29:30">(<argument pos:start="29:23" pos:end="29:29"><expr pos:start="29:23" pos:end="29:29"><name pos:start="29:23" pos:end="29:25">buf</name> <operator pos:start="29:27" pos:end="29:27">+</operator> <literal type="number" pos:start="29:29" pos:end="29:29">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:56"><expr pos:start="31:5" pos:end="31:55"><call pos:start="31:5" pos:end="31:55"><name pos:start="31:5" pos:end="31:11">av_dlog</name><argument_list pos:start="31:12" pos:end="31:55">(<argument pos:start="31:13" pos:end="31:17"><expr pos:start="31:13" pos:end="31:17"><name pos:start="31:13" pos:end="31:17">avctx</name></expr></argument>, <argument pos:start="31:20" pos:end="31:38"><expr pos:start="31:20" pos:end="31:38"><literal type="string" pos:start="31:20" pos:end="31:38">"%.4s version %d\n"</literal></expr></argument>, <argument pos:start="31:41" pos:end="31:45"><expr pos:start="31:41" pos:end="31:45"><name pos:start="31:41" pos:end="31:43">buf</name><operator pos:start="31:44" pos:end="31:44">+</operator><literal type="number" pos:start="31:45" pos:end="31:45">4</literal></expr></argument>, <argument pos:start="31:48" pos:end="31:54"><expr pos:start="31:48" pos:end="31:54"><name pos:start="31:48" pos:end="31:54">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:20">(<expr pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:15">version</name> <operator pos:start="33:17" pos:end="33:17">&gt;</operator> <literal type="number" pos:start="33:19" pos:end="33:19">1</literal></expr>)</condition> <block pos:start="33:22" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:36">

        <expr_stmt pos:start="35:9" pos:end="35:74"><expr pos:start="35:9" pos:end="35:73"><call pos:start="35:9" pos:end="35:73"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:73">(<argument pos:start="35:16" pos:end="35:20"><expr pos:start="35:16" pos:end="35:20"><name pos:start="35:16" pos:end="35:20">avctx</name></expr></argument>, <argument pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:37" pos:end="35:63"><expr pos:start="35:37" pos:end="35:63"><literal type="string" pos:start="35:37" pos:end="35:63">"unsupported version: %d\n"</literal></expr></argument>, <argument pos:start="35:66" pos:end="35:72"><expr pos:start="35:66" pos:end="35:72"><name pos:start="35:66" pos:end="35:72">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:36">return <expr pos:start="37:16" pos:end="37:35"><name pos:start="37:16" pos:end="37:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:30"><expr pos:start="43:5" pos:end="43:29"><name pos:start="43:5" pos:end="43:9">width</name>  <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:29"><name pos:start="43:14" pos:end="43:20">AV_RB16</name><argument_list pos:start="43:21" pos:end="43:29">(<argument pos:start="43:22" pos:end="43:28"><expr pos:start="43:22" pos:end="43:28"><name pos:start="43:22" pos:end="43:24">buf</name> <operator pos:start="43:26" pos:end="43:26">+</operator> <literal type="number" pos:start="43:28" pos:end="43:28">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:10">height</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:30"><name pos:start="45:14" pos:end="45:20">AV_RB16</name><argument_list pos:start="45:21" pos:end="45:30">(<argument pos:start="45:22" pos:end="45:29"><expr pos:start="45:22" pos:end="45:29"><name pos:start="45:22" pos:end="45:24">buf</name> <operator pos:start="45:26" pos:end="45:26">+</operator> <literal type="number" pos:start="45:28" pos:end="45:29">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:57">(<expr pos:start="47:9" pos:end="47:56"><name pos:start="47:9" pos:end="47:13">width</name> <operator pos:start="47:15" pos:end="47:16">!=</operator> <name pos:start="47:18" pos:end="47:29"><name pos:start="47:18" pos:end="47:22">avctx</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:29">width</name></name> <operator pos:start="47:31" pos:end="47:32">||</operator> <name pos:start="47:34" pos:end="47:39">height</name> <operator pos:start="47:41" pos:end="47:42">!=</operator> <name pos:start="47:44" pos:end="47:56"><name pos:start="47:44" pos:end="47:48">avctx</name><operator pos:start="47:49" pos:end="47:50">-&gt;</operator><name pos:start="47:51" pos:end="47:56">height</name></name></expr>)</condition> <block pos:start="47:59" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:36">

        <expr_stmt pos:start="49:9" pos:end="51:59"><expr pos:start="49:9" pos:end="51:58"><call pos:start="49:9" pos:end="51:58"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="51:58">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:81"><expr pos:start="49:37" pos:end="49:81"><literal type="string" pos:start="49:37" pos:end="49:81">"picture resolution change: %dx%d -&gt; %dx%d\n"</literal></expr></argument>,

               <argument pos:start="51:16" pos:end="51:27"><expr pos:start="51:16" pos:end="51:27"><name pos:start="51:16" pos:end="51:27"><name pos:start="51:16" pos:end="51:20">avctx</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:27">width</name></name></expr></argument>, <argument pos:start="51:30" pos:end="51:42"><expr pos:start="51:30" pos:end="51:42"><name pos:start="51:30" pos:end="51:42"><name pos:start="51:30" pos:end="51:34">avctx</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:42">height</name></name></expr></argument>, <argument pos:start="51:45" pos:end="51:49"><expr pos:start="51:45" pos:end="51:49"><name pos:start="51:45" pos:end="51:49">width</name></expr></argument>, <argument pos:start="51:52" pos:end="51:57"><expr pos:start="51:52" pos:end="51:57"><name pos:start="51:52" pos:end="51:57">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:36">return <expr pos:start="53:16" pos:end="53:35"><name pos:start="53:16" pos:end="53:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:7">ctx</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:19">frame_type</name></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <operator pos:start="59:23" pos:end="59:23">(</operator><name pos:start="59:24" pos:end="59:30"><name pos:start="59:24" pos:end="59:26">buf</name><index pos:start="59:27" pos:end="59:30">[<expr pos:start="59:28" pos:end="59:29"><literal type="number" pos:start="59:28" pos:end="59:29">12</literal></expr>]</index></name> <operator pos:start="59:32" pos:end="59:33">&gt;&gt;</operator> <literal type="number" pos:start="59:35" pos:end="59:35">2</literal><operator pos:start="59:36" pos:end="59:36">)</operator> <operator pos:start="59:38" pos:end="59:38">&amp;</operator> <literal type="number" pos:start="59:40" pos:end="59:40">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:36"><expr pos:start="61:5" pos:end="61:35"><name pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:7">ctx</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:19">alpha_info</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:29"><name pos:start="61:23" pos:end="61:25">buf</name><index pos:start="61:26" pos:end="61:29">[<expr pos:start="61:27" pos:end="61:28"><literal type="number" pos:start="61:27" pos:end="61:28">17</literal></expr>]</index></name> <operator pos:start="61:31" pos:end="61:31">&amp;</operator> <literal type="number" pos:start="61:33" pos:end="61:35">0xf</literal></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:28">(<expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:11">ctx</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:23">alpha_info</name></name> <operator pos:start="65:25" pos:end="65:25">&gt;</operator> <literal type="number" pos:start="65:27" pos:end="65:27">2</literal></expr>)</condition> <block pos:start="65:30" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:35">

        <expr_stmt pos:start="67:9" pos:end="67:80"><expr pos:start="67:9" pos:end="67:79"><call pos:start="67:9" pos:end="67:79"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="67:79">(<argument pos:start="67:16" pos:end="67:20"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:20">avctx</name></expr></argument>, <argument pos:start="67:23" pos:end="67:34"><expr pos:start="67:23" pos:end="67:34"><name pos:start="67:23" pos:end="67:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:37" pos:end="67:61"><expr pos:start="67:37" pos:end="67:61"><literal type="string" pos:start="67:37" pos:end="67:61">"Invalid alpha mode %d\n"</literal></expr></argument>, <argument pos:start="67:64" pos:end="67:78"><expr pos:start="67:64" pos:end="67:78"><name pos:start="67:64" pos:end="67:78"><name pos:start="67:64" pos:end="67:66">ctx</name><operator pos:start="67:67" pos:end="67:68">-&gt;</operator><name pos:start="67:69" pos:end="67:78">alpha_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:35">return <expr pos:start="69:16" pos:end="69:34"><name pos:start="69:16" pos:end="69:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="73:5" pos:end="73:47"><if pos:start="73:5" pos:end="73:47">if <condition pos:start="73:8" pos:end="73:26">(<expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:13">avctx</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:25">skip_alpha</name></name></expr>)</condition><block type="pseudo" pos:start="73:28" pos:end="73:47"><block_content pos:start="73:28" pos:end="73:47"> <expr_stmt pos:start="73:28" pos:end="73:47"><expr pos:start="73:28" pos:end="73:46"><name pos:start="73:28" pos:end="73:42"><name pos:start="73:28" pos:end="73:30">ctx</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:42">alpha_info</name></name> <operator pos:start="73:44" pos:end="73:44">=</operator> <literal type="number" pos:start="73:46" pos:end="73:46">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:55"><expr pos:start="77:5" pos:end="77:54"><call pos:start="77:5" pos:end="77:54"><name pos:start="77:5" pos:end="77:11">av_dlog</name><argument_list pos:start="77:12" pos:end="77:54">(<argument pos:start="77:13" pos:end="77:17"><expr pos:start="77:13" pos:end="77:17"><name pos:start="77:13" pos:end="77:17">avctx</name></expr></argument>, <argument pos:start="77:20" pos:end="77:36"><expr pos:start="77:20" pos:end="77:36"><literal type="string" pos:start="77:20" pos:end="77:36">"frame type %d\n"</literal></expr></argument>, <argument pos:start="77:39" pos:end="77:53"><expr pos:start="77:39" pos:end="77:53"><name pos:start="77:39" pos:end="77:53"><name pos:start="77:39" pos:end="77:41">ctx</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:53">frame_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="93:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:29">(<expr pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:11">ctx</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:23">frame_type</name></name> <operator pos:start="81:25" pos:end="81:26">==</operator> <literal type="number" pos:start="81:28" pos:end="81:28">0</literal></expr>)</condition> <block pos:start="81:31" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:42">

        <expr_stmt pos:start="83:9" pos:end="83:42"><expr pos:start="83:9" pos:end="83:41"><name pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:11">ctx</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:17">scan</name></name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:41"><name pos:start="83:21" pos:end="83:23">ctx</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:41">progressive_scan</name></name></expr>;</expr_stmt> <comment type="line" pos:start="83:44" pos:end="83:54">// permuted</comment>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="93:5">else <block pos:start="85:12" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:59">

        <expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><name pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:11">ctx</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:17">scan</name></name> <operator pos:start="87:19" pos:end="87:19">=</operator> <name pos:start="87:21" pos:end="87:40"><name pos:start="87:21" pos:end="87:23">ctx</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:40">interlaced_scan</name></name></expr>;</expr_stmt> <comment type="line" pos:start="87:43" pos:end="87:53">// permuted</comment>

        <expr_stmt pos:start="89:9" pos:end="89:41"><expr pos:start="89:9" pos:end="89:40"><name pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:11">ctx</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:18">frame</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:36">interlaced_frame</name></name> <operator pos:start="89:38" pos:end="89:38">=</operator> <literal type="number" pos:start="89:40" pos:end="89:40">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:59"><expr pos:start="91:9" pos:end="91:58"><name pos:start="91:9" pos:end="91:35"><name pos:start="91:9" pos:end="91:11">ctx</name><operator pos:start="91:12" pos:end="91:13">-&gt;</operator><name pos:start="91:14" pos:end="91:18">frame</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:35">top_field_first</name></name> <operator pos:start="91:37" pos:end="91:37">=</operator> <name pos:start="91:39" pos:end="91:53"><name pos:start="91:39" pos:end="91:41">ctx</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:53">frame_type</name></name> <operator pos:start="91:55" pos:end="91:56">==</operator> <literal type="number" pos:start="91:58" pos:end="91:58">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:24">(<expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:11">ctx</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:23">alpha_info</name></name></expr>)</condition> <block pos:start="97:26" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:98">

        <expr_stmt pos:start="99:9" pos:end="99:98"><expr pos:start="99:9" pos:end="99:97"><name pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:13">avctx</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:22">pix_fmt</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <ternary pos:start="99:26" pos:end="99:97"><condition pos:start="99:26" pos:end="99:51"><expr pos:start="99:26" pos:end="99:49"><operator pos:start="99:26" pos:end="99:26">(</operator><name pos:start="99:27" pos:end="99:33"><name pos:start="99:27" pos:end="99:29">buf</name><index pos:start="99:30" pos:end="99:33">[<expr pos:start="99:31" pos:end="99:32"><literal type="number" pos:start="99:31" pos:end="99:32">12</literal></expr>]</index></name> <operator pos:start="99:35" pos:end="99:35">&amp;</operator> <literal type="number" pos:start="99:37" pos:end="99:40">0xC0</literal><operator pos:start="99:41" pos:end="99:41">)</operator> <operator pos:start="99:43" pos:end="99:44">==</operator> <literal type="number" pos:start="99:46" pos:end="99:49">0xC0</literal></expr> ?</condition><then pos:start="99:53" pos:end="99:73"> <expr pos:start="99:53" pos:end="99:73"><name pos:start="99:53" pos:end="99:73">AV_PIX_FMT_YUVA444P10</name></expr> </then><else pos:start="99:75" pos:end="99:97">: <expr pos:start="99:77" pos:end="99:97"><name pos:start="99:77" pos:end="99:97">AV_PIX_FMT_YUVA422P10</name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="105:5">else <block pos:start="101:12" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:96">

        <expr_stmt pos:start="103:9" pos:end="103:96"><expr pos:start="103:9" pos:end="103:95"><name pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:13">avctx</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:22">pix_fmt</name></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <ternary pos:start="103:26" pos:end="103:95"><condition pos:start="103:26" pos:end="103:51"><expr pos:start="103:26" pos:end="103:49"><operator pos:start="103:26" pos:end="103:26">(</operator><name pos:start="103:27" pos:end="103:33"><name pos:start="103:27" pos:end="103:29">buf</name><index pos:start="103:30" pos:end="103:33">[<expr pos:start="103:31" pos:end="103:32"><literal type="number" pos:start="103:31" pos:end="103:32">12</literal></expr>]</index></name> <operator pos:start="103:35" pos:end="103:35">&amp;</operator> <literal type="number" pos:start="103:37" pos:end="103:40">0xC0</literal><operator pos:start="103:41" pos:end="103:41">)</operator> <operator pos:start="103:43" pos:end="103:44">==</operator> <literal type="number" pos:start="103:46" pos:end="103:49">0xC0</literal></expr> ?</condition><then pos:start="103:53" pos:end="103:72"> <expr pos:start="103:53" pos:end="103:72"><name pos:start="103:53" pos:end="103:72">AV_PIX_FMT_YUV444P10</name></expr> </then><else pos:start="103:74" pos:end="103:95">: <expr pos:start="103:76" pos:end="103:95"><name pos:start="103:76" pos:end="103:95">AV_PIX_FMT_YUV422P10</name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:7">ptr</name>   <operator pos:start="109:11" pos:end="109:11">=</operator> <name pos:start="109:13" pos:end="109:15">buf</name> <operator pos:start="109:17" pos:end="109:17">+</operator> <literal type="number" pos:start="109:19" pos:end="109:20">20</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:20"><expr pos:start="111:5" pos:end="111:19"><name pos:start="111:5" pos:end="111:9">flags</name> <operator pos:start="111:11" pos:end="111:11">=</operator> <name pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:15">buf</name><index pos:start="111:16" pos:end="111:19">[<expr pos:start="111:17" pos:end="111:18"><literal type="number" pos:start="111:17" pos:end="111:18">19</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:40"><expr pos:start="113:5" pos:end="113:39"><call pos:start="113:5" pos:end="113:39"><name pos:start="113:5" pos:end="113:11">av_dlog</name><argument_list pos:start="113:12" pos:end="113:39">(<argument pos:start="113:13" pos:end="113:17"><expr pos:start="113:13" pos:end="113:17"><name pos:start="113:13" pos:end="113:17">avctx</name></expr></argument>, <argument pos:start="113:20" pos:end="113:31"><expr pos:start="113:20" pos:end="113:31"><literal type="string" pos:start="113:20" pos:end="113:31">"flags %x\n"</literal></expr></argument>, <argument pos:start="113:34" pos:end="113:38"><expr pos:start="113:34" pos:end="113:38"><name pos:start="113:34" pos:end="113:38">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="135:5"><if pos:start="117:5" pos:end="131:5">if <condition pos:start="117:8" pos:end="117:18">(<expr pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:13">flags</name> <operator pos:start="117:15" pos:end="117:15">&amp;</operator> <literal type="number" pos:start="117:17" pos:end="117:17">2</literal></expr>)</condition> <block pos:start="117:20" pos:end="131:5">{<block_content pos:start="119:9" pos:end="129:18">

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if<condition pos:start="119:11" pos:end="119:38">(<expr pos:start="119:12" pos:end="119:37"><name pos:start="119:12" pos:end="119:14">buf</name> <operator pos:start="119:16" pos:end="119:16">+</operator> <name pos:start="119:18" pos:end="119:26">data_size</name> <operator pos:start="119:28" pos:end="119:28">-</operator> <name pos:start="119:30" pos:end="119:32">ptr</name> <operator pos:start="119:34" pos:end="119:34">&lt;</operator> <literal type="number" pos:start="119:36" pos:end="119:37">64</literal></expr>)</condition> <block pos:start="119:40" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:39">

            <expr_stmt pos:start="121:13" pos:end="121:62"><expr pos:start="121:13" pos:end="121:61"><call pos:start="121:13" pos:end="121:61"><name pos:start="121:13" pos:end="121:18">av_log</name><argument_list pos:start="121:19" pos:end="121:61">(<argument pos:start="121:20" pos:end="121:24"><expr pos:start="121:20" pos:end="121:24"><name pos:start="121:20" pos:end="121:24">avctx</name></expr></argument>, <argument pos:start="121:27" pos:end="121:38"><expr pos:start="121:27" pos:end="121:38"><name pos:start="121:27" pos:end="121:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:41" pos:end="121:60"><expr pos:start="121:41" pos:end="121:60"><literal type="string" pos:start="121:41" pos:end="121:60">"Header truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:39">return <expr pos:start="123:20" pos:end="123:38"><name pos:start="123:20" pos:end="123:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:67"><expr pos:start="127:9" pos:end="127:66"><call pos:start="127:9" pos:end="127:66"><name pos:start="127:9" pos:end="127:15">permute</name><argument_list pos:start="127:16" pos:end="127:66">(<argument pos:start="127:17" pos:end="127:30"><expr pos:start="127:17" pos:end="127:30"><name pos:start="127:17" pos:end="127:30"><name pos:start="127:17" pos:end="127:19">ctx</name><operator pos:start="127:20" pos:end="127:21">-&gt;</operator><name pos:start="127:22" pos:end="127:30">qmat_luma</name></name></expr></argument>, <argument pos:start="127:33" pos:end="127:60"><expr pos:start="127:33" pos:end="127:60"><name pos:start="127:33" pos:end="127:60"><name pos:start="127:33" pos:end="127:35">ctx</name><operator pos:start="127:36" pos:end="127:37">-&gt;</operator><name pos:start="127:38" pos:end="127:43">prodsp</name><operator pos:start="127:44" pos:end="127:44">.</operator><name pos:start="127:45" pos:end="127:60">idct_permutation</name></name></expr></argument>, <argument pos:start="127:63" pos:end="127:65"><expr pos:start="127:63" pos:end="127:65"><name pos:start="127:63" pos:end="127:65">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:18"><expr pos:start="129:9" pos:end="129:17"><name pos:start="129:9" pos:end="129:11">ptr</name> <operator pos:start="129:13" pos:end="129:14">+=</operator> <literal type="number" pos:start="129:16" pos:end="129:17">64</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="135:5">else <block pos:start="131:12" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:38">

        <expr_stmt pos:start="133:9" pos:end="133:38"><expr pos:start="133:9" pos:end="133:37"><call pos:start="133:9" pos:end="133:37"><name pos:start="133:9" pos:end="133:14">memset</name><argument_list pos:start="133:15" pos:end="133:37">(<argument pos:start="133:16" pos:end="133:29"><expr pos:start="133:16" pos:end="133:29"><name pos:start="133:16" pos:end="133:29"><name pos:start="133:16" pos:end="133:18">ctx</name><operator pos:start="133:19" pos:end="133:20">-&gt;</operator><name pos:start="133:21" pos:end="133:29">qmat_luma</name></name></expr></argument>, <argument pos:start="133:32" pos:end="133:32"><expr pos:start="133:32" pos:end="133:32"><literal type="number" pos:start="133:32" pos:end="133:32">4</literal></expr></argument>, <argument pos:start="133:35" pos:end="133:36"><expr pos:start="133:35" pos:end="133:36"><literal type="number" pos:start="133:35" pos:end="133:36">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="139:5" pos:end="155:5"><if pos:start="139:5" pos:end="151:5">if <condition pos:start="139:8" pos:end="139:18">(<expr pos:start="139:9" pos:end="139:17"><name pos:start="139:9" pos:end="139:13">flags</name> <operator pos:start="139:15" pos:end="139:15">&amp;</operator> <literal type="number" pos:start="139:17" pos:end="139:17">1</literal></expr>)</condition> <block pos:start="139:20" pos:end="151:5">{<block_content pos:start="141:9" pos:end="149:69">

        <if_stmt pos:start="141:9" pos:end="147:9"><if pos:start="141:9" pos:end="147:9">if<condition pos:start="141:11" pos:end="141:38">(<expr pos:start="141:12" pos:end="141:37"><name pos:start="141:12" pos:end="141:14">buf</name> <operator pos:start="141:16" pos:end="141:16">+</operator> <name pos:start="141:18" pos:end="141:26">data_size</name> <operator pos:start="141:28" pos:end="141:28">-</operator> <name pos:start="141:30" pos:end="141:32">ptr</name> <operator pos:start="141:34" pos:end="141:34">&lt;</operator> <literal type="number" pos:start="141:36" pos:end="141:37">64</literal></expr>)</condition> <block pos:start="141:40" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:39">

            <expr_stmt pos:start="143:13" pos:end="143:62"><expr pos:start="143:13" pos:end="143:61"><call pos:start="143:13" pos:end="143:61"><name pos:start="143:13" pos:end="143:18">av_log</name><argument_list pos:start="143:19" pos:end="143:61">(<argument pos:start="143:20" pos:end="143:24"><expr pos:start="143:20" pos:end="143:24"><name pos:start="143:20" pos:end="143:24">avctx</name></expr></argument>, <argument pos:start="143:27" pos:end="143:38"><expr pos:start="143:27" pos:end="143:38"><name pos:start="143:27" pos:end="143:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="143:41" pos:end="143:60"><expr pos:start="143:41" pos:end="143:60"><literal type="string" pos:start="143:41" pos:end="143:60">"Header truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="145:13" pos:end="145:39">return <expr pos:start="145:20" pos:end="145:38"><name pos:start="145:20" pos:end="145:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:69"><expr pos:start="149:9" pos:end="149:68"><call pos:start="149:9" pos:end="149:68"><name pos:start="149:9" pos:end="149:15">permute</name><argument_list pos:start="149:16" pos:end="149:68">(<argument pos:start="149:17" pos:end="149:32"><expr pos:start="149:17" pos:end="149:32"><name pos:start="149:17" pos:end="149:32"><name pos:start="149:17" pos:end="149:19">ctx</name><operator pos:start="149:20" pos:end="149:21">-&gt;</operator><name pos:start="149:22" pos:end="149:32">qmat_chroma</name></name></expr></argument>, <argument pos:start="149:35" pos:end="149:62"><expr pos:start="149:35" pos:end="149:62"><name pos:start="149:35" pos:end="149:62"><name pos:start="149:35" pos:end="149:37">ctx</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:45">prodsp</name><operator pos:start="149:46" pos:end="149:46">.</operator><name pos:start="149:47" pos:end="149:62">idct_permutation</name></name></expr></argument>, <argument pos:start="149:65" pos:end="149:67"><expr pos:start="149:65" pos:end="149:67"><name pos:start="149:65" pos:end="149:67">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="151:7" pos:end="155:5">else <block pos:start="151:12" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:40">

        <expr_stmt pos:start="153:9" pos:end="153:40"><expr pos:start="153:9" pos:end="153:39"><call pos:start="153:9" pos:end="153:39"><name pos:start="153:9" pos:end="153:14">memset</name><argument_list pos:start="153:15" pos:end="153:39">(<argument pos:start="153:16" pos:end="153:31"><expr pos:start="153:16" pos:end="153:31"><name pos:start="153:16" pos:end="153:31"><name pos:start="153:16" pos:end="153:18">ctx</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:31">qmat_chroma</name></name></expr></argument>, <argument pos:start="153:34" pos:end="153:34"><expr pos:start="153:34" pos:end="153:34"><literal type="number" pos:start="153:34" pos:end="153:34">4</literal></expr></argument>, <argument pos:start="153:37" pos:end="153:38"><expr pos:start="153:37" pos:end="153:38"><literal type="number" pos:start="153:37" pos:end="153:38">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="159:5" pos:end="159:20">return <expr pos:start="159:12" pos:end="159:19"><name pos:start="159:12" pos:end="159:19">hdr_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
