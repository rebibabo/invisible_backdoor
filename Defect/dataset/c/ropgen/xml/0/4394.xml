<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4394.c" pos:tabs="8"><function pos:start="1:1" pos:end="273:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">vhdx_create</name><parameter_list pos:start="1:23" pos:end="1:74">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:43">filename</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:59"><decl pos:start="1:46" pos:end="1:59"><type pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:53">QemuOpts</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">opts</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:66">Error</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier><modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="273:1">{<block_content pos:start="5:5" pos:end="271:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:23">image_size</name> <init pos:start="7:25" pos:end="7:44">= <expr pos:start="7:27" pos:end="7:44"><operator pos:start="7:27" pos:end="7:27">(</operator><name pos:start="7:28" pos:end="7:35">uint64_t</name><operator pos:start="7:36" pos:end="7:36">)</operator> <literal type="number" pos:start="7:38" pos:end="7:38">2</literal> <operator pos:start="7:40" pos:end="7:40">*</operator> <name pos:start="7:42" pos:end="7:44">GiB</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:21">log_size</name>   <init pos:start="9:25" pos:end="9:33">= <expr pos:start="9:27" pos:end="9:33"><literal type="number" pos:start="9:27" pos:end="9:27">1</literal> <operator pos:start="9:29" pos:end="9:29">*</operator> <name pos:start="9:31" pos:end="9:33">MiB</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:23">block_size</name> <init pos:start="11:25" pos:end="11:27">= <expr pos:start="11:27" pos:end="11:27"><literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">signature</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:28">metadata_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:24">use_zero_blocks</name> <init pos:start="17:26" pos:end="17:32">= <expr pos:start="17:28" pos:end="17:32"><name pos:start="17:28" pos:end="17:32">false</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">gunichar2</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:22">creator</name> <init pos:start="21:24" pos:end="21:29">= <expr pos:start="21:26" pos:end="21:29"><name pos:start="21:26" pos:end="21:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:9"><name pos:start="23:5" pos:end="23:9">glong</name></type> <name pos:start="23:11" pos:end="23:23">creator_items</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">BlockBackend</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:8">char</name> <modifier pos:start="27:10" pos:end="27:10">*</modifier></type><name pos:start="27:11" pos:end="27:14">type</name> <init pos:start="27:16" pos:end="27:21">= <expr pos:start="27:18" pos:end="27:21"><name pos:start="27:18" pos:end="27:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:29"><decl pos:start="29:5" pos:end="29:28"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:17">VHDXImageType</name></type> <name pos:start="29:19" pos:end="29:28">image_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:9">Error</name> <modifier pos:start="31:11" pos:end="31:11">*</modifier></type><name pos:start="31:12" pos:end="31:20">local_err</name> <init pos:start="31:22" pos:end="31:27">= <expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="37:44"><expr pos:start="35:5" pos:end="37:43"><name pos:start="35:5" pos:end="35:14">image_size</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="37:43"><name pos:start="35:18" pos:end="35:25">ROUND_UP</name><argument_list pos:start="35:26" pos:end="37:43">(<argument pos:start="35:27" pos:end="35:72"><expr pos:start="35:27" pos:end="35:72"><call pos:start="35:27" pos:end="35:72"><name pos:start="35:27" pos:end="35:47">qemu_opt_get_size_del</name><argument_list pos:start="35:48" pos:end="35:72">(<argument pos:start="35:49" pos:end="35:52"><expr pos:start="35:49" pos:end="35:52"><name pos:start="35:49" pos:end="35:52">opts</name></expr></argument>, <argument pos:start="35:55" pos:end="35:68"><expr pos:start="35:55" pos:end="35:68"><name pos:start="35:55" pos:end="35:68">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="35:71" pos:end="35:71"><expr pos:start="35:71" pos:end="35:71"><literal type="number" pos:start="35:71" pos:end="35:71">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="37:27" pos:end="37:42"><expr pos:start="37:27" pos:end="37:42"><name pos:start="37:27" pos:end="37:42">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:71"><expr pos:start="39:5" pos:end="39:70"><name pos:start="39:5" pos:end="39:12">log_size</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:70"><name pos:start="39:16" pos:end="39:36">qemu_opt_get_size_del</name><argument_list pos:start="39:37" pos:end="39:70">(<argument pos:start="39:38" pos:end="39:41"><expr pos:start="39:38" pos:end="39:41"><name pos:start="39:38" pos:end="39:41">opts</name></expr></argument>, <argument pos:start="39:44" pos:end="39:66"><expr pos:start="39:44" pos:end="39:66"><name pos:start="39:44" pos:end="39:66">VHDX_BLOCK_OPT_LOG_SIZE</name></expr></argument>, <argument pos:start="39:69" pos:end="39:69"><expr pos:start="39:69" pos:end="39:69"><literal type="number" pos:start="39:69" pos:end="39:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:75"><expr pos:start="41:5" pos:end="41:74"><name pos:start="41:5" pos:end="41:14">block_size</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:74"><name pos:start="41:18" pos:end="41:38">qemu_opt_get_size_del</name><argument_list pos:start="41:39" pos:end="41:74">(<argument pos:start="41:40" pos:end="41:43"><expr pos:start="41:40" pos:end="41:43"><name pos:start="41:40" pos:end="41:43">opts</name></expr></argument>, <argument pos:start="41:46" pos:end="41:70"><expr pos:start="41:46" pos:end="41:70"><name pos:start="41:46" pos:end="41:70">VHDX_BLOCK_OPT_BLOCK_SIZE</name></expr></argument>, <argument pos:start="41:73" pos:end="41:73"><expr pos:start="41:73" pos:end="41:73"><literal type="number" pos:start="41:73" pos:end="41:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:52"><expr pos:start="43:5" pos:end="43:51"><name pos:start="43:5" pos:end="43:8">type</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <call pos:start="43:12" pos:end="43:51"><name pos:start="43:12" pos:end="43:27">qemu_opt_get_del</name><argument_list pos:start="43:28" pos:end="43:51">(<argument pos:start="43:29" pos:end="43:32"><expr pos:start="43:29" pos:end="43:32"><name pos:start="43:29" pos:end="43:32">opts</name></expr></argument>, <argument pos:start="43:35" pos:end="43:50"><expr pos:start="43:35" pos:end="43:50"><name pos:start="43:35" pos:end="43:50">BLOCK_OPT_SUBFMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:77"><expr pos:start="45:5" pos:end="45:76"><name pos:start="45:5" pos:end="45:19">use_zero_blocks</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:76"><name pos:start="45:23" pos:end="45:43">qemu_opt_get_bool_del</name><argument_list pos:start="45:44" pos:end="45:76">(<argument pos:start="45:45" pos:end="45:48"><expr pos:start="45:45" pos:end="45:48"><name pos:start="45:45" pos:end="45:48">opts</name></expr></argument>, <argument pos:start="45:51" pos:end="45:69"><expr pos:start="45:51" pos:end="45:69"><name pos:start="45:51" pos:end="45:69">VHDX_BLOCK_OPT_ZERO</name></expr></argument>, <argument pos:start="45:72" pos:end="45:75"><expr pos:start="45:72" pos:end="45:75"><name pos:start="45:72" pos:end="45:75">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:41">(<expr pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:18">image_size</name> <operator pos:start="49:20" pos:end="49:20">&gt;</operator> <name pos:start="49:22" pos:end="49:40">VHDX_MAX_IMAGE_SIZE</name></expr>)</condition> <block pos:start="49:43" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:18">

        <expr_stmt pos:start="51:9" pos:end="51:76"><expr pos:start="51:9" pos:end="51:75"><call pos:start="51:9" pos:end="51:75"><name pos:start="51:9" pos:end="51:24">error_setg_errno</name><argument_list pos:start="51:25" pos:end="51:75">(<argument pos:start="51:26" pos:end="51:29"><expr pos:start="51:26" pos:end="51:29"><name pos:start="51:26" pos:end="51:29">errp</name></expr></argument>, <argument pos:start="51:32" pos:end="51:37"><expr pos:start="51:32" pos:end="51:37"><name pos:start="51:32" pos:end="51:37">EINVAL</name></expr></argument>, <argument pos:start="51:40" pos:end="51:74"><expr pos:start="51:40" pos:end="51:74"><literal type="string" pos:start="51:40" pos:end="51:74">"Image size too large; max of 64TB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">-</operator><name pos:start="53:16" pos:end="53:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:21">(<expr pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:12">type</name> <operator pos:start="61:14" pos:end="61:15">==</operator> <name pos:start="61:17" pos:end="61:20">NULL</name></expr>)</condition> <block pos:start="61:23" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:35">

        <expr_stmt pos:start="63:9" pos:end="63:35"><expr pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:12">type</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:34"><name pos:start="63:16" pos:end="63:23">g_strdup</name><argument_list pos:start="63:24" pos:end="63:34">(<argument pos:start="63:25" pos:end="63:33"><expr pos:start="63:25" pos:end="63:33"><literal type="string" pos:start="63:25" pos:end="63:33">"dynamic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="93:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:33">(<expr pos:start="69:9" pos:end="69:32"><operator pos:start="69:9" pos:end="69:9">!</operator><call pos:start="69:10" pos:end="69:32"><name pos:start="69:10" pos:end="69:15">strcmp</name><argument_list pos:start="69:16" pos:end="69:32">(<argument pos:start="69:17" pos:end="69:20"><expr pos:start="69:17" pos:end="69:20"><name pos:start="69:17" pos:end="69:20">type</name></expr></argument>, <argument pos:start="69:23" pos:end="69:31"><expr pos:start="69:23" pos:end="69:31"><literal type="string" pos:start="69:23" pos:end="69:31">"dynamic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:35" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:39">

        <expr_stmt pos:start="71:9" pos:end="71:39"><expr pos:start="71:9" pos:end="71:38"><name pos:start="71:9" pos:end="71:18">image_type</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <name pos:start="71:22" pos:end="71:38">VHDX_TYPE_DYNAMIC</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="77:5">else if <condition pos:start="73:15" pos:end="73:38">(<expr pos:start="73:16" pos:end="73:37"><operator pos:start="73:16" pos:end="73:16">!</operator><call pos:start="73:17" pos:end="73:37"><name pos:start="73:17" pos:end="73:22">strcmp</name><argument_list pos:start="73:23" pos:end="73:37">(<argument pos:start="73:24" pos:end="73:27"><expr pos:start="73:24" pos:end="73:27"><name pos:start="73:24" pos:end="73:27">type</name></expr></argument>, <argument pos:start="73:30" pos:end="73:36"><expr pos:start="73:30" pos:end="73:36"><literal type="string" pos:start="73:30" pos:end="73:36">"fixed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:40" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:37">

        <expr_stmt pos:start="75:9" pos:end="75:37"><expr pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:18">image_type</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:36">VHDX_TYPE_FIXED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="87:5">else if <condition pos:start="77:15" pos:end="77:45">(<expr pos:start="77:16" pos:end="77:44"><operator pos:start="77:16" pos:end="77:16">!</operator><call pos:start="77:17" pos:end="77:44"><name pos:start="77:17" pos:end="77:22">strcmp</name><argument_list pos:start="77:23" pos:end="77:44">(<argument pos:start="77:24" pos:end="77:27"><expr pos:start="77:24" pos:end="77:27"><name pos:start="77:24" pos:end="77:27">type</name></expr></argument>, <argument pos:start="77:30" pos:end="77:43"><expr pos:start="77:30" pos:end="77:43"><literal type="string" pos:start="77:30" pos:end="77:43">"differencing"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:47" pos:end="87:5">{<block_content pos:start="79:9" pos:end="85:18">

        <expr_stmt pos:start="79:9" pos:end="81:65"><expr pos:start="79:9" pos:end="81:64"><call pos:start="79:9" pos:end="81:64"><name pos:start="79:9" pos:end="79:24">error_setg_errno</name><argument_list pos:start="79:25" pos:end="81:64">(<argument pos:start="79:26" pos:end="79:29"><expr pos:start="79:26" pos:end="79:29"><name pos:start="79:26" pos:end="79:29">errp</name></expr></argument>, <argument pos:start="79:32" pos:end="79:38"><expr pos:start="79:32" pos:end="79:38"><name pos:start="79:32" pos:end="79:38">ENOTSUP</name></expr></argument>,

                         <argument pos:start="81:26" pos:end="81:63"><expr pos:start="81:26" pos:end="81:63"><literal type="string" pos:start="81:26" pos:end="81:63">"Differencing files not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:23"><expr pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <operator pos:start="83:15" pos:end="83:15">-</operator><name pos:start="83:16" pos:end="83:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">exit</name>;</goto>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="93:5">else <block pos:start="87:12" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:18">

        <expr_stmt pos:start="89:9" pos:end="89:22"><expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <operator pos:start="89:15" pos:end="89:15">-</operator><name pos:start="89:16" pos:end="89:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">exit</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="99:42">/* These are pretty arbitrary, and mainly designed to keep the BAT

     * size reasonable to load into RAM */</comment>

    <if_stmt pos:start="101:5" pos:end="121:5"><if pos:start="101:5" pos:end="121:5">if <condition pos:start="101:8" pos:end="101:24">(<expr pos:start="101:9" pos:end="101:23"><name pos:start="101:9" pos:end="101:18">block_size</name> <operator pos:start="101:20" pos:end="101:21">==</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>)</condition> <block pos:start="101:26" pos:end="121:5">{<block_content pos:start="103:9" pos:end="119:9">

        <if_stmt pos:start="103:9" pos:end="119:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:34">(<expr pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:22">image_size</name> <operator pos:start="103:24" pos:end="103:24">&gt;</operator> <literal type="number" pos:start="103:26" pos:end="103:27">32</literal> <operator pos:start="103:29" pos:end="103:29">*</operator> <name pos:start="103:31" pos:end="103:33">TiB</name></expr>)</condition> <block pos:start="103:36" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:34">

            <expr_stmt pos:start="105:13" pos:end="105:34"><expr pos:start="105:13" pos:end="105:33"><name pos:start="105:13" pos:end="105:22">block_size</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <literal type="number" pos:start="105:26" pos:end="105:27">64</literal> <operator pos:start="105:29" pos:end="105:29">*</operator> <name pos:start="105:31" pos:end="105:33">MiB</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="107:11" pos:end="111:9">else if <condition pos:start="107:19" pos:end="107:53">(<expr pos:start="107:20" pos:end="107:52"><name pos:start="107:20" pos:end="107:29">image_size</name> <operator pos:start="107:31" pos:end="107:31">&gt;</operator> <operator pos:start="107:33" pos:end="107:33">(</operator><name pos:start="107:34" pos:end="107:41">uint64_t</name><operator pos:start="107:42" pos:end="107:42">)</operator> <literal type="number" pos:start="107:44" pos:end="107:46">100</literal> <operator pos:start="107:48" pos:end="107:48">*</operator> <name pos:start="107:50" pos:end="107:52">GiB</name></expr>)</condition> <block pos:start="107:55" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:34">

            <expr_stmt pos:start="109:13" pos:end="109:34"><expr pos:start="109:13" pos:end="109:33"><name pos:start="109:13" pos:end="109:22">block_size</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <literal type="number" pos:start="109:26" pos:end="109:27">32</literal> <operator pos:start="109:29" pos:end="109:29">*</operator> <name pos:start="109:31" pos:end="109:33">MiB</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="111:11" pos:end="115:9">else if <condition pos:start="111:19" pos:end="111:40">(<expr pos:start="111:20" pos:end="111:39"><name pos:start="111:20" pos:end="111:29">image_size</name> <operator pos:start="111:31" pos:end="111:31">&gt;</operator> <literal type="number" pos:start="111:33" pos:end="111:33">1</literal> <operator pos:start="111:35" pos:end="111:35">*</operator> <name pos:start="111:37" pos:end="111:39">GiB</name></expr>)</condition> <block pos:start="111:42" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:34">

            <expr_stmt pos:start="113:13" pos:end="113:34"><expr pos:start="113:13" pos:end="113:33"><name pos:start="113:13" pos:end="113:22">block_size</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <literal type="number" pos:start="113:26" pos:end="113:27">16</literal> <operator pos:start="113:29" pos:end="113:29">*</operator> <name pos:start="113:31" pos:end="113:33">MiB</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="119:9">else <block pos:start="115:16" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:33">

            <expr_stmt pos:start="117:13" pos:end="117:33"><expr pos:start="117:13" pos:end="117:32"><name pos:start="117:13" pos:end="117:22">block_size</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <literal type="number" pos:start="117:26" pos:end="117:26">8</literal> <operator pos:start="117:28" pos:end="117:28">*</operator> <name pos:start="117:30" pos:end="117:32">MiB</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="127:5" pos:end="129:38">/* make the log size close to what was specified, but must be

     * min 1MB, and multiple of 1MB */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:39"><expr pos:start="131:5" pos:end="131:38"><name pos:start="131:5" pos:end="131:12">log_size</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <call pos:start="131:16" pos:end="131:38"><name pos:start="131:16" pos:end="131:23">ROUND_UP</name><argument_list pos:start="131:24" pos:end="131:38">(<argument pos:start="131:25" pos:end="131:32"><expr pos:start="131:25" pos:end="131:32"><name pos:start="131:25" pos:end="131:32">log_size</name></expr></argument>, <argument pos:start="131:35" pos:end="131:37"><expr pos:start="131:35" pos:end="131:37"><name pos:start="131:35" pos:end="131:37">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:43"><expr pos:start="135:5" pos:end="135:42"><name pos:start="135:5" pos:end="135:14">block_size</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <call pos:start="135:18" pos:end="135:42"><name pos:start="135:18" pos:end="135:25">ROUND_UP</name><argument_list pos:start="135:26" pos:end="135:42">(<argument pos:start="135:27" pos:end="135:36"><expr pos:start="135:27" pos:end="135:36"><name pos:start="135:27" pos:end="135:36">block_size</name></expr></argument>, <argument pos:start="135:39" pos:end="135:41"><expr pos:start="135:39" pos:end="135:41"><name pos:start="135:39" pos:end="135:41">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="139:63"><expr pos:start="137:5" pos:end="139:62"><name pos:start="137:5" pos:end="137:14">block_size</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <ternary pos:start="137:18" pos:end="139:62"><condition pos:start="137:18" pos:end="137:51"><expr pos:start="137:18" pos:end="137:49"><name pos:start="137:18" pos:end="137:27">block_size</name> <operator pos:start="137:29" pos:end="137:29">&gt;</operator> <name pos:start="137:31" pos:end="137:49">VHDX_BLOCK_SIZE_MAX</name></expr> ?</condition><then pos:start="137:53" pos:end="137:71"> <expr pos:start="137:53" pos:end="137:71"><name pos:start="137:53" pos:end="137:71">VHDX_BLOCK_SIZE_MAX</name></expr> </then><else pos:start="137:73" pos:end="139:62">:

                                                    <expr pos:start="139:53" pos:end="139:62"><name pos:start="139:53" pos:end="139:62">block_size</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:55"><expr pos:start="143:5" pos:end="143:54"><name pos:start="143:5" pos:end="143:7">ret</name> <operator pos:start="143:9" pos:end="143:9">=</operator> <call pos:start="143:11" pos:end="143:54"><name pos:start="143:11" pos:end="143:26">bdrv_create_file</name><argument_list pos:start="143:27" pos:end="143:54">(<argument pos:start="143:28" pos:end="143:35"><expr pos:start="143:28" pos:end="143:35"><name pos:start="143:28" pos:end="143:35">filename</name></expr></argument>, <argument pos:start="143:38" pos:end="143:41"><expr pos:start="143:38" pos:end="143:41"><name pos:start="143:38" pos:end="143:41">opts</name></expr></argument>, <argument pos:start="143:44" pos:end="143:53"><expr pos:start="143:44" pos:end="143:53"><operator pos:start="143:44" pos:end="143:44">&amp;</operator><name pos:start="143:45" pos:end="143:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:16">(<expr pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">&lt;</operator> <literal type="number" pos:start="145:15" pos:end="145:15">0</literal></expr>)</condition> <block pos:start="145:18" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:18">

        <expr_stmt pos:start="147:9" pos:end="147:41"><expr pos:start="147:9" pos:end="147:40"><call pos:start="147:9" pos:end="147:40"><name pos:start="147:9" pos:end="147:23">error_propagate</name><argument_list pos:start="147:24" pos:end="147:40">(<argument pos:start="147:25" pos:end="147:28"><expr pos:start="147:25" pos:end="147:28"><name pos:start="147:25" pos:end="147:28">errp</name></expr></argument>, <argument pos:start="147:31" pos:end="147:39"><expr pos:start="147:31" pos:end="147:39"><name pos:start="147:31" pos:end="147:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="149:9" pos:end="149:18">goto <name pos:start="149:14" pos:end="149:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="157:66"><expr pos:start="155:5" pos:end="157:65"><name pos:start="155:5" pos:end="155:7">blk</name> <operator pos:start="155:9" pos:end="155:9">=</operator> <call pos:start="155:11" pos:end="157:65"><name pos:start="155:11" pos:end="155:22">blk_new_open</name><argument_list pos:start="155:23" pos:end="157:65">(<argument pos:start="155:24" pos:end="155:31"><expr pos:start="155:24" pos:end="155:31"><name pos:start="155:24" pos:end="155:31">filename</name></expr></argument>, <argument pos:start="155:34" pos:end="155:37"><expr pos:start="155:34" pos:end="155:37"><name pos:start="155:34" pos:end="155:37">NULL</name></expr></argument>, <argument pos:start="155:40" pos:end="155:43"><expr pos:start="155:40" pos:end="155:43"><name pos:start="155:40" pos:end="155:43">NULL</name></expr></argument>,

                       <argument pos:start="157:24" pos:end="157:52"><expr pos:start="157:24" pos:end="157:52"><name pos:start="157:24" pos:end="157:34">BDRV_O_RDWR</name> <operator pos:start="157:36" pos:end="157:36">|</operator> <name pos:start="157:38" pos:end="157:52">BDRV_O_PROTOCOL</name></expr></argument>, <argument pos:start="157:55" pos:end="157:64"><expr pos:start="157:55" pos:end="157:64"><operator pos:start="157:55" pos:end="157:55">&amp;</operator><name pos:start="157:56" pos:end="157:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="167:5"><if pos:start="159:5" pos:end="167:5">if <condition pos:start="159:8" pos:end="159:20">(<expr pos:start="159:9" pos:end="159:19"><name pos:start="159:9" pos:end="159:11">blk</name> <operator pos:start="159:13" pos:end="159:14">==</operator> <name pos:start="159:16" pos:end="159:19">NULL</name></expr>)</condition> <block pos:start="159:22" pos:end="167:5">{<block_content pos:start="161:9" pos:end="165:18">

        <expr_stmt pos:start="161:9" pos:end="161:41"><expr pos:start="161:9" pos:end="161:40"><call pos:start="161:9" pos:end="161:40"><name pos:start="161:9" pos:end="161:23">error_propagate</name><argument_list pos:start="161:24" pos:end="161:40">(<argument pos:start="161:25" pos:end="161:28"><expr pos:start="161:25" pos:end="161:28"><name pos:start="161:25" pos:end="161:28">errp</name></expr></argument>, <argument pos:start="161:31" pos:end="161:39"><expr pos:start="161:31" pos:end="161:39"><name pos:start="161:31" pos:end="161:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:19"><expr pos:start="163:9" pos:end="163:18"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <operator pos:start="163:15" pos:end="163:15">-</operator><name pos:start="163:16" pos:end="163:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="165:9" pos:end="165:18">goto <name pos:start="165:14" pos:end="165:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:46"><expr pos:start="171:5" pos:end="171:45"><call pos:start="171:5" pos:end="171:45"><name pos:start="171:5" pos:end="171:34">blk_set_allow_write_beyond_eof</name><argument_list pos:start="171:35" pos:end="171:45">(<argument pos:start="171:36" pos:end="171:38"><expr pos:start="171:36" pos:end="171:38"><name pos:start="171:36" pos:end="171:38">blk</name></expr></argument>, <argument pos:start="171:41" pos:end="171:44"><expr pos:start="171:41" pos:end="171:44"><name pos:start="171:41" pos:end="171:44">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:20">/* Create (A) */</comment>



    <comment type="block" pos:start="179:5" pos:end="181:33">/* The creator field is optional, but may be useful for

     * debugging / diagnostics */</comment>

    <expr_stmt pos:start="183:5" pos:end="185:52"><expr pos:start="183:5" pos:end="185:51"><name pos:start="183:5" pos:end="183:11">creator</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="185:51"><name pos:start="183:15" pos:end="183:29">g_utf8_to_utf16</name><argument_list pos:start="183:30" pos:end="185:51">(<argument pos:start="183:31" pos:end="183:51"><expr pos:start="183:31" pos:end="183:51"><literal type="string" pos:start="183:31" pos:end="183:38">"QEMU v"</literal> <name pos:start="183:40" pos:end="183:51">QEMU_VERSION</name></expr></argument>, <argument pos:start="183:54" pos:end="183:55"><expr pos:start="183:54" pos:end="183:55"><operator pos:start="183:54" pos:end="183:54">-</operator><literal type="number" pos:start="183:55" pos:end="183:55">1</literal></expr></argument>, <argument pos:start="183:58" pos:end="183:61"><expr pos:start="183:58" pos:end="183:61"><name pos:start="183:58" pos:end="183:61">NULL</name></expr></argument>,

                              <argument pos:start="185:31" pos:end="185:44"><expr pos:start="185:31" pos:end="185:44"><operator pos:start="185:31" pos:end="185:31">&amp;</operator><name pos:start="185:32" pos:end="185:44">creator_items</name></expr></argument>, <argument pos:start="185:47" pos:end="185:50"><expr pos:start="185:47" pos:end="185:50"><name pos:start="185:47" pos:end="185:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:49"><expr pos:start="187:5" pos:end="187:48"><name pos:start="187:5" pos:end="187:13">signature</name> <operator pos:start="187:15" pos:end="187:15">=</operator> <call pos:start="187:17" pos:end="187:48"><name pos:start="187:17" pos:end="187:27">cpu_to_le64</name><argument_list pos:start="187:28" pos:end="187:48">(<argument pos:start="187:29" pos:end="187:47"><expr pos:start="187:29" pos:end="187:47"><name pos:start="187:29" pos:end="187:47">VHDX_FILE_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="191:24"><expr pos:start="189:5" pos:end="191:23"><name pos:start="189:5" pos:end="189:7">ret</name> <operator pos:start="189:9" pos:end="189:9">=</operator> <call pos:start="189:11" pos:end="191:23"><name pos:start="189:11" pos:end="189:20">blk_pwrite</name><argument_list pos:start="189:21" pos:end="191:23">(<argument pos:start="189:22" pos:end="189:24"><expr pos:start="189:22" pos:end="189:24"><name pos:start="189:22" pos:end="189:24">blk</name></expr></argument>, <argument pos:start="189:27" pos:end="189:45"><expr pos:start="189:27" pos:end="189:45"><name pos:start="189:27" pos:end="189:45">VHDX_FILE_ID_OFFSET</name></expr></argument>, <argument pos:start="189:48" pos:end="189:57"><expr pos:start="189:48" pos:end="189:57"><operator pos:start="189:48" pos:end="189:48">&amp;</operator><name pos:start="189:49" pos:end="189:57">signature</name></expr></argument>, <argument pos:start="189:60" pos:end="189:76"><expr pos:start="189:60" pos:end="189:76"><sizeof pos:start="189:60" pos:end="189:76">sizeof<argument_list pos:start="189:66" pos:end="189:76">(<argument pos:start="189:67" pos:end="189:75"><expr pos:start="189:67" pos:end="189:75"><name pos:start="189:67" pos:end="189:75">signature</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                     <argument pos:start="191:22" pos:end="191:22"><expr pos:start="191:22" pos:end="191:22"><literal type="number" pos:start="191:22" pos:end="191:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="197:5"><if pos:start="193:5" pos:end="197:5">if <condition pos:start="193:8" pos:end="193:16">(<expr pos:start="193:9" pos:end="193:15"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">&lt;</operator> <literal type="number" pos:start="193:15" pos:end="193:15">0</literal></expr>)</condition> <block pos:start="193:18" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:29">

        <goto pos:start="195:9" pos:end="195:29">goto <name pos:start="195:14" pos:end="195:28">delete_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="199:5" pos:end="211:5"><if pos:start="199:5" pos:end="211:5">if <condition pos:start="199:8" pos:end="199:16">(<expr pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:15">creator</name></expr>)</condition> <block pos:start="199:18" pos:end="211:5">{<block_content pos:start="201:9" pos:end="209:9">

        <expr_stmt pos:start="201:9" pos:end="203:72"><expr pos:start="201:9" pos:end="203:71"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">=</operator> <call pos:start="201:15" pos:end="203:71"><name pos:start="201:15" pos:end="201:24">blk_pwrite</name><argument_list pos:start="201:25" pos:end="203:71">(<argument pos:start="201:26" pos:end="201:28"><expr pos:start="201:26" pos:end="201:28"><name pos:start="201:26" pos:end="201:28">blk</name></expr></argument>, <argument pos:start="201:31" pos:end="201:69"><expr pos:start="201:31" pos:end="201:69"><name pos:start="201:31" pos:end="201:49">VHDX_FILE_ID_OFFSET</name> <operator pos:start="201:51" pos:end="201:51">+</operator> <sizeof pos:start="201:53" pos:end="201:69">sizeof<argument_list pos:start="201:59" pos:end="201:69">(<argument pos:start="201:60" pos:end="201:68"><expr pos:start="201:60" pos:end="201:68"><name pos:start="201:60" pos:end="201:68">signature</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="203:26" pos:end="203:32"><expr pos:start="203:26" pos:end="203:32"><name pos:start="203:26" pos:end="203:32">creator</name></expr></argument>, <argument pos:start="203:35" pos:end="203:67"><expr pos:start="203:35" pos:end="203:67"><name pos:start="203:35" pos:end="203:47">creator_items</name> <operator pos:start="203:49" pos:end="203:49">*</operator> <sizeof pos:start="203:51" pos:end="203:67">sizeof<argument_list pos:start="203:57" pos:end="203:67">(<argument pos:start="203:58" pos:end="203:66"><expr pos:start="203:58" pos:end="203:66"><name pos:start="203:58" pos:end="203:66">gunichar2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="203:70" pos:end="203:70"><expr pos:start="203:70" pos:end="203:70"><literal type="number" pos:start="203:70" pos:end="203:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="209:9"><if pos:start="205:9" pos:end="209:9">if <condition pos:start="205:12" pos:end="205:20">(<expr pos:start="205:13" pos:end="205:19"><name pos:start="205:13" pos:end="205:15">ret</name> <operator pos:start="205:17" pos:end="205:17">&lt;</operator> <literal type="number" pos:start="205:19" pos:end="205:19">0</literal></expr>)</condition> <block pos:start="205:22" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:33">

            <goto pos:start="207:13" pos:end="207:33">goto <name pos:start="207:18" pos:end="207:32">delete_and_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="217:5" pos:end="217:25">/* Creates (B),(C) */</comment>

    <expr_stmt pos:start="219:5" pos:end="219:69"><expr pos:start="219:5" pos:end="219:68"><name pos:start="219:5" pos:end="219:7">ret</name> <operator pos:start="219:9" pos:end="219:9">=</operator> <call pos:start="219:11" pos:end="219:68"><name pos:start="219:11" pos:end="219:33">vhdx_create_new_headers</name><argument_list pos:start="219:34" pos:end="219:68">(<argument pos:start="219:35" pos:end="219:45"><expr pos:start="219:35" pos:end="219:45"><call pos:start="219:35" pos:end="219:45"><name pos:start="219:35" pos:end="219:40">blk_bs</name><argument_list pos:start="219:41" pos:end="219:45">(<argument pos:start="219:42" pos:end="219:44"><expr pos:start="219:42" pos:end="219:44"><name pos:start="219:42" pos:end="219:44">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="219:48" pos:end="219:57"><expr pos:start="219:48" pos:end="219:57"><name pos:start="219:48" pos:end="219:57">image_size</name></expr></argument>, <argument pos:start="219:60" pos:end="219:67"><expr pos:start="219:60" pos:end="219:67"><name pos:start="219:60" pos:end="219:67">log_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="221:5" pos:end="225:5"><if pos:start="221:5" pos:end="225:5">if <condition pos:start="221:8" pos:end="221:16">(<expr pos:start="221:9" pos:end="221:15"><name pos:start="221:9" pos:end="221:11">ret</name> <operator pos:start="221:13" pos:end="221:13">&lt;</operator> <literal type="number" pos:start="221:15" pos:end="221:15">0</literal></expr>)</condition> <block pos:start="221:18" pos:end="225:5">{<block_content pos:start="223:9" pos:end="223:29">

        <goto pos:start="223:9" pos:end="223:29">goto <name pos:start="223:14" pos:end="223:28">delete_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="229:5" pos:end="229:67">/* Creates (D),(E),(G) explicitly. (F) created as by-product */</comment>

    <expr_stmt pos:start="231:5" pos:end="235:57"><expr pos:start="231:5" pos:end="235:56"><name pos:start="231:5" pos:end="231:7">ret</name> <operator pos:start="231:9" pos:end="231:9">=</operator> <call pos:start="231:11" pos:end="235:56"><name pos:start="231:11" pos:end="231:38">vhdx_create_new_region_table</name><argument_list pos:start="231:39" pos:end="235:56">(<argument pos:start="231:40" pos:end="231:50"><expr pos:start="231:40" pos:end="231:50"><call pos:start="231:40" pos:end="231:50"><name pos:start="231:40" pos:end="231:45">blk_bs</name><argument_list pos:start="231:46" pos:end="231:50">(<argument pos:start="231:47" pos:end="231:49"><expr pos:start="231:47" pos:end="231:49"><name pos:start="231:47" pos:end="231:49">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="231:53" pos:end="231:62"><expr pos:start="231:53" pos:end="231:62"><name pos:start="231:53" pos:end="231:62">image_size</name></expr></argument>, <argument pos:start="231:65" pos:end="231:74"><expr pos:start="231:65" pos:end="231:74"><name pos:start="231:65" pos:end="231:74">block_size</name></expr></argument>, <argument pos:start="231:77" pos:end="231:79"><expr pos:start="231:77" pos:end="231:79"><literal type="number" pos:start="231:77" pos:end="231:79">512</literal></expr></argument>,

                                       <argument pos:start="233:40" pos:end="233:47"><expr pos:start="233:40" pos:end="233:47"><name pos:start="233:40" pos:end="233:47">log_size</name></expr></argument>, <argument pos:start="233:50" pos:end="233:64"><expr pos:start="233:50" pos:end="233:64"><name pos:start="233:50" pos:end="233:64">use_zero_blocks</name></expr></argument>, <argument pos:start="233:67" pos:end="233:76"><expr pos:start="233:67" pos:end="233:76"><name pos:start="233:67" pos:end="233:76">image_type</name></expr></argument>,

                                       <argument pos:start="235:40" pos:end="235:55"><expr pos:start="235:40" pos:end="235:55"><operator pos:start="235:40" pos:end="235:40">&amp;</operator><name pos:start="235:41" pos:end="235:55">metadata_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="241:5"><if pos:start="237:5" pos:end="241:5">if <condition pos:start="237:8" pos:end="237:16">(<expr pos:start="237:9" pos:end="237:15"><name pos:start="237:9" pos:end="237:11">ret</name> <operator pos:start="237:13" pos:end="237:13">&lt;</operator> <literal type="number" pos:start="237:15" pos:end="237:15">0</literal></expr>)</condition> <block pos:start="237:18" pos:end="241:5">{<block_content pos:start="239:9" pos:end="239:29">

        <goto pos:start="239:9" pos:end="239:29">goto <name pos:start="239:14" pos:end="239:28">delete_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="245:5" pos:end="245:21">/* Creates (H) */</comment>

    <expr_stmt pos:start="247:5" pos:end="249:64"><expr pos:start="247:5" pos:end="249:63"><name pos:start="247:5" pos:end="247:7">ret</name> <operator pos:start="247:9" pos:end="247:9">=</operator> <call pos:start="247:11" pos:end="249:63"><name pos:start="247:11" pos:end="247:34">vhdx_create_new_metadata</name><argument_list pos:start="247:35" pos:end="249:63">(<argument pos:start="247:36" pos:end="247:46"><expr pos:start="247:36" pos:end="247:46"><call pos:start="247:36" pos:end="247:46"><name pos:start="247:36" pos:end="247:41">blk_bs</name><argument_list pos:start="247:42" pos:end="247:46">(<argument pos:start="247:43" pos:end="247:45"><expr pos:start="247:43" pos:end="247:45"><name pos:start="247:43" pos:end="247:45">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="247:49" pos:end="247:58"><expr pos:start="247:49" pos:end="247:58"><name pos:start="247:49" pos:end="247:58">image_size</name></expr></argument>, <argument pos:start="247:61" pos:end="247:70"><expr pos:start="247:61" pos:end="247:70"><name pos:start="247:61" pos:end="247:70">block_size</name></expr></argument>, <argument pos:start="247:73" pos:end="247:75"><expr pos:start="247:73" pos:end="247:75"><literal type="number" pos:start="247:73" pos:end="247:75">512</literal></expr></argument>,

                                   <argument pos:start="249:36" pos:end="249:50"><expr pos:start="249:36" pos:end="249:50"><name pos:start="249:36" pos:end="249:50">metadata_offset</name></expr></argument>, <argument pos:start="249:53" pos:end="249:62"><expr pos:start="249:53" pos:end="249:62"><name pos:start="249:53" pos:end="249:62">image_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="251:5" pos:end="255:5"><if pos:start="251:5" pos:end="255:5">if <condition pos:start="251:8" pos:end="251:16">(<expr pos:start="251:9" pos:end="251:15"><name pos:start="251:9" pos:end="251:11">ret</name> <operator pos:start="251:13" pos:end="251:13">&lt;</operator> <literal type="number" pos:start="251:15" pos:end="251:15">0</literal></expr>)</condition> <block pos:start="251:18" pos:end="255:5">{<block_content pos:start="253:9" pos:end="253:29">

        <goto pos:start="253:9" pos:end="253:29">goto <name pos:start="253:14" pos:end="253:28">delete_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>





<label pos:start="261:1" pos:end="261:16"><name pos:start="261:1" pos:end="261:15">delete_and_exit</name>:</label>

    <expr_stmt pos:start="263:5" pos:end="263:19"><expr pos:start="263:5" pos:end="263:18"><call pos:start="263:5" pos:end="263:18"><name pos:start="263:5" pos:end="263:13">blk_unref</name><argument_list pos:start="263:14" pos:end="263:18">(<argument pos:start="263:15" pos:end="263:17"><expr pos:start="263:15" pos:end="263:17"><name pos:start="263:15" pos:end="263:17">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="265:1" pos:end="265:5"><name pos:start="265:1" pos:end="265:4">exit</name>:</label>

    <expr_stmt pos:start="267:5" pos:end="267:17"><expr pos:start="267:5" pos:end="267:16"><call pos:start="267:5" pos:end="267:16"><name pos:start="267:5" pos:end="267:10">g_free</name><argument_list pos:start="267:11" pos:end="267:16">(<argument pos:start="267:12" pos:end="267:15"><expr pos:start="267:12" pos:end="267:15"><name pos:start="267:12" pos:end="267:15">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:20"><expr pos:start="269:5" pos:end="269:19"><call pos:start="269:5" pos:end="269:19"><name pos:start="269:5" pos:end="269:10">g_free</name><argument_list pos:start="269:11" pos:end="269:19">(<argument pos:start="269:12" pos:end="269:18"><expr pos:start="269:12" pos:end="269:18"><name pos:start="269:12" pos:end="269:18">creator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="271:5" pos:end="271:15">return <expr pos:start="271:12" pos:end="271:14"><name pos:start="271:12" pos:end="271:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
