<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2984.c" pos:tabs="8"><function pos:start="1:1" pos:end="475:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:34">tcg_out_qemu_st</name><parameter_list pos:start="1:35" pos:end="1:78">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:45">TCGContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:68"><decl pos:start="1:51" pos:end="1:68"><type pos:start="1:51" pos:end="1:68"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:62">TCGArg</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">args</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:77"><decl pos:start="1:71" pos:end="1:77"><type pos:start="1:71" pos:end="1:77"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:77">opc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="475:1">{<block_content pos:start="5:5" pos:end="474:0">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">addr_reg</name></decl>, <decl pos:start="5:19" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:26">data_reg</name></decl>, <decl pos:start="5:29" pos:end="5:37"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:37">data_reg2</name></decl>, <decl pos:start="5:40" pos:end="5:44"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:40" pos:end="5:44">bswap</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:21">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">mem_index</name></decl>, <decl pos:start="9:20" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:25">s_bits</name></decl>;</decl_stmt>

<cpp:if pos:start="11:1" pos:end="11:27"># <cpp:directive pos:start="11:3" pos:end="11:4">if</cpp:directive> <expr pos:start="11:6" pos:end="11:27"><name pos:start="11:6" pos:end="11:21">TARGET_LONG_BITS</name> <operator pos:start="11:23" pos:end="11:24">==</operator> <literal type="number" pos:start="11:26" pos:end="11:27">64</literal></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">addr_reg2</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:7"># <cpp:directive pos:start="15:3" pos:end="15:7">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="17:5" pos:end="24:0"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">uint32_t</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:23">label_ptr</name></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="23:1" pos:end="23:29">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:9">bswap</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <literal type="number" pos:start="25:13" pos:end="25:13">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="27:1" pos:end="27:5">#<cpp:directive pos:start="27:2" pos:end="27:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:9">bswap</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <literal type="number" pos:start="29:13" pos:end="29:13">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:12">data_reg</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <operator pos:start="33:16" pos:end="33:16">*</operator><name pos:start="33:17" pos:end="33:20">args</name><operator pos:start="33:21" pos:end="33:22">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:22"><if pos:start="35:5" pos:end="37:28">if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:11">opc</name> <operator pos:start="35:13" pos:end="35:14">==</operator> <literal type="number" pos:start="35:16" pos:end="35:16">3</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:28"><block_content pos:start="37:9" pos:end="37:28">

        <expr_stmt pos:start="37:9" pos:end="37:28"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:17">data_reg2</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <operator pos:start="37:21" pos:end="37:21">*</operator><name pos:start="37:22" pos:end="37:25">args</name><operator pos:start="37:26" pos:end="37:27">++</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="39:5" pos:end="41:22">else<block type="pseudo" pos:start="41:9" pos:end="41:22"><block_content pos:start="41:9" pos:end="41:22">

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:17">data_reg2</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="number" pos:start="41:21" pos:end="41:21">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="41:24" pos:end="41:45">/* suppress warning */</comment>

    <expr_stmt pos:start="43:5" pos:end="48:0"><expr pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:12">addr_reg</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <operator pos:start="43:16" pos:end="43:16">*</operator><name pos:start="43:17" pos:end="43:20">args</name><operator pos:start="43:21" pos:end="43:22">++</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="45:1" pos:end="45:21">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:21">CONFIG_SOFTMMU</name></cpp:ifdef>

<cpp:if pos:start="47:1" pos:end="47:27"># <cpp:directive pos:start="47:3" pos:end="47:4">if</cpp:directive> <expr pos:start="47:6" pos:end="47:27"><name pos:start="47:6" pos:end="47:21">TARGET_LONG_BITS</name> <operator pos:start="47:23" pos:end="47:24">==</operator> <literal type="number" pos:start="47:26" pos:end="47:27">64</literal></expr></cpp:if>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:13">addr_reg2</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <operator pos:start="49:17" pos:end="49:17">*</operator><name pos:start="49:18" pos:end="49:21">args</name><operator pos:start="49:22" pos:end="49:23">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:7"># <cpp:directive pos:start="51:3" pos:end="51:7">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="53:5" pos:end="53:22"><expr pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:13">mem_index</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <operator pos:start="53:17" pos:end="53:17">*</operator><name pos:start="53:18" pos:end="53:21">args</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:21"><expr pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:10">s_bits</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:16">opc</name> <operator pos:start="55:18" pos:end="55:18">&amp;</operator> <literal type="number" pos:start="55:20" pos:end="55:20">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="67:7">/* Should generate something like the following:

     *  shr r8, addr_reg, #TARGET_PAGE_BITS

     *  and r0, r8, #(CPU_TLB_SIZE - 1)   @ Assumption: CPU_TLB_BITS &lt;= 8

     *  add r0, env, r0 lsl #CPU_TLB_ENTRY_BITS

     */</comment>

    <expr_stmt pos:start="69:5" pos:end="71:78"><expr pos:start="69:5" pos:end="71:77"><call pos:start="69:5" pos:end="71:77"><name pos:start="69:5" pos:end="69:19">tcg_out_dat_reg</name><argument_list pos:start="69:20" pos:end="71:77">(<argument pos:start="69:21" pos:end="69:21"><expr pos:start="69:21" pos:end="69:21"><name pos:start="69:21" pos:end="69:21">s</name></expr></argument>, <argument pos:start="69:24" pos:end="69:30"><expr pos:start="69:24" pos:end="69:30"><name pos:start="69:24" pos:end="69:30">COND_AL</name></expr></argument>, <argument pos:start="69:33" pos:end="69:41"><expr pos:start="69:33" pos:end="69:41"><name pos:start="69:33" pos:end="69:41">ARITH_MOV</name></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:30"><expr pos:start="71:21" pos:end="71:30"><name pos:start="71:21" pos:end="71:30">TCG_REG_R8</name></expr></argument>, <argument pos:start="71:33" pos:end="71:33"><expr pos:start="71:33" pos:end="71:33"><literal type="number" pos:start="71:33" pos:end="71:33">0</literal></expr></argument>, <argument pos:start="71:36" pos:end="71:43"><expr pos:start="71:36" pos:end="71:43"><name pos:start="71:36" pos:end="71:43">addr_reg</name></expr></argument>, <argument pos:start="71:46" pos:end="71:76"><expr pos:start="71:46" pos:end="71:76"><call pos:start="71:46" pos:end="71:76"><name pos:start="71:46" pos:end="71:58">SHIFT_IMM_LSR</name><argument_list pos:start="71:59" pos:end="71:76">(<argument pos:start="71:60" pos:end="71:75"><expr pos:start="71:60" pos:end="71:75"><name pos:start="71:60" pos:end="71:75">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="75:62"><expr pos:start="73:5" pos:end="75:61"><call pos:start="73:5" pos:end="75:61"><name pos:start="73:5" pos:end="73:19">tcg_out_dat_imm</name><argument_list pos:start="73:20" pos:end="75:61">(<argument pos:start="73:21" pos:end="73:21"><expr pos:start="73:21" pos:end="73:21"><name pos:start="73:21" pos:end="73:21">s</name></expr></argument>, <argument pos:start="73:24" pos:end="73:30"><expr pos:start="73:24" pos:end="73:30"><name pos:start="73:24" pos:end="73:30">COND_AL</name></expr></argument>, <argument pos:start="73:33" pos:end="73:41"><expr pos:start="73:33" pos:end="73:41"><name pos:start="73:33" pos:end="73:41">ARITH_AND</name></expr></argument>,

                    <argument pos:start="75:21" pos:end="75:30"><expr pos:start="75:21" pos:end="75:30"><name pos:start="75:21" pos:end="75:30">TCG_REG_R0</name></expr></argument>, <argument pos:start="75:33" pos:end="75:42"><expr pos:start="75:33" pos:end="75:42"><name pos:start="75:33" pos:end="75:42">TCG_REG_R8</name></expr></argument>, <argument pos:start="75:45" pos:end="75:60"><expr pos:start="75:45" pos:end="75:60"><name pos:start="75:45" pos:end="75:56">CPU_TLB_SIZE</name> <operator pos:start="75:58" pos:end="75:58">-</operator> <literal type="number" pos:start="75:60" pos:end="75:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="79:78"><expr pos:start="77:5" pos:end="79:77"><call pos:start="77:5" pos:end="79:77"><name pos:start="77:5" pos:end="77:19">tcg_out_dat_reg</name><argument_list pos:start="77:20" pos:end="79:77">(<argument pos:start="77:21" pos:end="77:21"><expr pos:start="77:21" pos:end="77:21"><name pos:start="77:21" pos:end="77:21">s</name></expr></argument>, <argument pos:start="77:24" pos:end="77:30"><expr pos:start="77:24" pos:end="77:30"><name pos:start="77:24" pos:end="77:30">COND_AL</name></expr></argument>, <argument pos:start="77:33" pos:end="77:41"><expr pos:start="77:33" pos:end="77:41"><name pos:start="77:33" pos:end="77:41">ARITH_ADD</name></expr></argument>, <argument pos:start="77:44" pos:end="77:53"><expr pos:start="77:44" pos:end="77:53"><name pos:start="77:44" pos:end="77:53">TCG_REG_R0</name></expr></argument>,

                    <argument pos:start="79:21" pos:end="79:29"><expr pos:start="79:21" pos:end="79:29"><name pos:start="79:21" pos:end="79:29">TCG_AREG0</name></expr></argument>, <argument pos:start="79:32" pos:end="79:41"><expr pos:start="79:32" pos:end="79:41"><name pos:start="79:32" pos:end="79:41">TCG_REG_R0</name></expr></argument>, <argument pos:start="79:44" pos:end="79:76"><expr pos:start="79:44" pos:end="79:76"><call pos:start="79:44" pos:end="79:76"><name pos:start="79:44" pos:end="79:56">SHIFT_IMM_LSL</name><argument_list pos:start="79:57" pos:end="79:76">(<argument pos:start="79:58" pos:end="79:75"><expr pos:start="79:58" pos:end="79:75"><name pos:start="79:58" pos:end="79:75">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="81:5" pos:end="93:7">/* In the

     *  ldr r1 [r0, #(offsetof(CPUState, tlb_table[mem_index][0].addr_write))]

     * below, the offset is likely to exceed 12 bits if mem_index != 0 and

     * not exceed otherwise, so use an

     *  add r0, r0, #(mem_index * sizeof *CPUState.tlb_table)

     * before.

     */</comment>

    <if_stmt pos:start="95:5" pos:end="101:56"><if pos:start="95:5" pos:end="101:56">if <condition pos:start="95:8" pos:end="95:18">(<expr pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:17">mem_index</name></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="101:56"><block_content pos:start="97:9" pos:end="101:56">

        <expr_stmt pos:start="97:9" pos:end="101:56"><expr pos:start="97:9" pos:end="101:55"><call pos:start="97:9" pos:end="101:55"><name pos:start="97:9" pos:end="97:23">tcg_out_dat_imm</name><argument_list pos:start="97:24" pos:end="101:55">(<argument pos:start="97:25" pos:end="97:25"><expr pos:start="97:25" pos:end="97:25"><name pos:start="97:25" pos:end="97:25">s</name></expr></argument>, <argument pos:start="97:28" pos:end="97:34"><expr pos:start="97:28" pos:end="97:34"><name pos:start="97:28" pos:end="97:34">COND_AL</name></expr></argument>, <argument pos:start="97:37" pos:end="97:45"><expr pos:start="97:37" pos:end="97:45"><name pos:start="97:37" pos:end="97:45">ARITH_ADD</name></expr></argument>, <argument pos:start="97:48" pos:end="97:57"><expr pos:start="97:48" pos:end="97:57"><name pos:start="97:48" pos:end="97:57">TCG_REG_R0</name></expr></argument>, <argument pos:start="97:60" pos:end="97:69"><expr pos:start="97:60" pos:end="97:69"><name pos:start="97:60" pos:end="97:69">TCG_REG_R0</name></expr></argument>,

                        <argument pos:start="99:25" pos:end="101:54"><expr pos:start="99:25" pos:end="101:54"><operator pos:start="99:25" pos:end="99:25">(</operator><name pos:start="99:26" pos:end="99:34">mem_index</name> <operator pos:start="99:36" pos:end="99:37">&lt;&lt;</operator> <operator pos:start="99:39" pos:end="99:39">(</operator><name pos:start="99:40" pos:end="99:48">TLB_SHIFT</name> <operator pos:start="99:50" pos:end="99:50">&amp;</operator> <literal type="number" pos:start="99:52" pos:end="99:52">1</literal><operator pos:start="99:53" pos:end="99:53">)</operator><operator pos:start="99:54" pos:end="99:54">)</operator> <operator pos:start="99:56" pos:end="99:56">|</operator>

                        <operator pos:start="101:25" pos:end="101:25">(</operator><operator pos:start="101:26" pos:end="101:26">(</operator><literal type="number" pos:start="101:27" pos:end="101:30">16</literal> <operator pos:start="101:30" pos:end="101:30">-</operator> <operator pos:start="101:32" pos:end="101:32">(</operator><name pos:start="101:33" pos:end="101:41">TLB_SHIFT</name> <operator pos:start="101:43" pos:end="101:44">&gt;&gt;</operator> <literal type="number" pos:start="101:46" pos:end="101:46">1</literal><operator pos:start="101:47" pos:end="101:47">)</operator><operator pos:start="101:48" pos:end="101:48">)</operator> <operator pos:start="101:50" pos:end="101:51">&lt;&lt;</operator> <literal type="number" pos:start="101:53" pos:end="101:53">8</literal><operator pos:start="101:54" pos:end="101:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="105:68"><expr pos:start="103:5" pos:end="105:67"><call pos:start="103:5" pos:end="105:67"><name pos:start="103:5" pos:end="103:19">tcg_out_ld32_12</name><argument_list pos:start="103:20" pos:end="105:67">(<argument pos:start="103:21" pos:end="103:21"><expr pos:start="103:21" pos:end="103:21"><name pos:start="103:21" pos:end="103:21">s</name></expr></argument>, <argument pos:start="103:24" pos:end="103:30"><expr pos:start="103:24" pos:end="103:30"><name pos:start="103:24" pos:end="103:30">COND_AL</name></expr></argument>, <argument pos:start="103:33" pos:end="103:42"><expr pos:start="103:33" pos:end="103:42"><name pos:start="103:33" pos:end="103:42">TCG_REG_R1</name></expr></argument>, <argument pos:start="103:45" pos:end="103:54"><expr pos:start="103:45" pos:end="103:54"><name pos:start="103:45" pos:end="103:54">TCG_REG_R0</name></expr></argument>,

                    <argument pos:start="105:21" pos:end="105:66"><expr pos:start="105:21" pos:end="105:66"><call pos:start="105:21" pos:end="105:66"><name pos:start="105:21" pos:end="105:28">offsetof</name><argument_list pos:start="105:29" pos:end="105:66">(<argument pos:start="105:30" pos:end="105:37"><expr pos:start="105:30" pos:end="105:37"><name pos:start="105:30" pos:end="105:37">CPUState</name></expr></argument>, <argument pos:start="105:40" pos:end="105:65"><expr pos:start="105:40" pos:end="105:65"><name pos:start="105:40" pos:end="105:54"><name pos:start="105:40" pos:end="105:48">tlb_table</name><index pos:start="105:49" pos:end="105:51">[<expr pos:start="105:50" pos:end="105:50"><literal type="number" pos:start="105:50" pos:end="105:50">0</literal></expr>]</index><index pos:start="105:52" pos:end="105:54">[<expr pos:start="105:53" pos:end="105:53"><literal type="number" pos:start="105:53" pos:end="105:53">0</literal></expr>]</index></name><operator pos:start="105:55" pos:end="105:55">.</operator><name pos:start="105:56" pos:end="105:65">addr_write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="109:65"><expr pos:start="107:5" pos:end="109:64"><call pos:start="107:5" pos:end="109:64"><name pos:start="107:5" pos:end="107:19">tcg_out_dat_reg</name><argument_list pos:start="107:20" pos:end="109:64">(<argument pos:start="107:21" pos:end="107:21"><expr pos:start="107:21" pos:end="107:21"><name pos:start="107:21" pos:end="107:21">s</name></expr></argument>, <argument pos:start="107:24" pos:end="107:30"><expr pos:start="107:24" pos:end="107:30"><name pos:start="107:24" pos:end="107:30">COND_AL</name></expr></argument>, <argument pos:start="107:33" pos:end="107:41"><expr pos:start="107:33" pos:end="107:41"><name pos:start="107:33" pos:end="107:41">ARITH_CMP</name></expr></argument>, <argument pos:start="107:44" pos:end="107:44"><expr pos:start="107:44" pos:end="107:44"><literal type="number" pos:start="107:44" pos:end="107:44">0</literal></expr></argument>, <argument pos:start="107:47" pos:end="107:56"><expr pos:start="107:47" pos:end="107:56"><name pos:start="107:47" pos:end="107:56">TCG_REG_R1</name></expr></argument>,

                    <argument pos:start="109:21" pos:end="109:30"><expr pos:start="109:21" pos:end="109:30"><name pos:start="109:21" pos:end="109:30">TCG_REG_R8</name></expr></argument>, <argument pos:start="109:33" pos:end="109:63"><expr pos:start="109:33" pos:end="109:63"><call pos:start="109:33" pos:end="109:63"><name pos:start="109:33" pos:end="109:45">SHIFT_IMM_LSL</name><argument_list pos:start="109:46" pos:end="109:63">(<argument pos:start="109:47" pos:end="109:62"><expr pos:start="109:47" pos:end="109:62"><name pos:start="109:47" pos:end="109:62">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="111:5" pos:end="111:27">/* Check alignment.  */</comment>

    <if_stmt pos:start="113:5" pos:end="120:0"><if pos:start="113:5" pos:end="120:0">if <condition pos:start="113:8" pos:end="113:15">(<expr pos:start="113:9" pos:end="113:14"><name pos:start="113:9" pos:end="113:14">s_bits</name></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="120:0"><block_content pos:start="115:9" pos:end="120:0">

        <expr_stmt pos:start="115:9" pos:end="120:0"><expr pos:start="115:9" pos:end="117:55"><call pos:start="115:9" pos:end="117:55"><name pos:start="115:9" pos:end="115:23">tcg_out_dat_imm</name><argument_list pos:start="115:24" pos:end="117:55">(<argument pos:start="115:25" pos:end="115:25"><expr pos:start="115:25" pos:end="115:25"><name pos:start="115:25" pos:end="115:25">s</name></expr></argument>, <argument pos:start="115:28" pos:end="115:34"><expr pos:start="115:28" pos:end="115:34"><name pos:start="115:28" pos:end="115:34">COND_EQ</name></expr></argument>, <argument pos:start="115:37" pos:end="115:45"><expr pos:start="115:37" pos:end="115:45"><name pos:start="115:37" pos:end="115:45">ARITH_TST</name></expr></argument>,

                        <argument pos:start="117:25" pos:end="117:25"><expr pos:start="117:25" pos:end="117:25"><literal type="number" pos:start="117:25" pos:end="117:25">0</literal></expr></argument>, <argument pos:start="117:28" pos:end="117:35"><expr pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:35">addr_reg</name></expr></argument>, <argument pos:start="117:38" pos:end="117:54"><expr pos:start="117:38" pos:end="117:54"><operator pos:start="117:38" pos:end="117:38">(</operator><literal type="number" pos:start="117:39" pos:end="117:39">1</literal> <operator pos:start="117:41" pos:end="117:42">&lt;&lt;</operator> <name pos:start="117:44" pos:end="117:49">s_bits</name><operator pos:start="117:50" pos:end="117:50">)</operator> <operator pos:start="117:52" pos:end="117:52">-</operator> <literal type="number" pos:start="117:54" pos:end="117:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="119:1" pos:end="119:28">#  <cpp:directive pos:start="119:4" pos:end="119:5">if</cpp:directive> <expr pos:start="119:7" pos:end="119:28"><name pos:start="119:7" pos:end="119:22">TARGET_LONG_BITS</name> <operator pos:start="119:24" pos:end="119:25">==</operator> <literal type="number" pos:start="119:27" pos:end="119:28">64</literal></expr></cpp:if>

    <comment type="block" pos:start="121:5" pos:end="123:28">/* XXX: possibly we could use a block data load or writeback in

     * the first access.  */</comment>

    <expr_stmt pos:start="125:5" pos:end="127:72"><expr pos:start="125:5" pos:end="127:71"><call pos:start="125:5" pos:end="127:71"><name pos:start="125:5" pos:end="125:19">tcg_out_ld32_12</name><argument_list pos:start="125:20" pos:end="127:71">(<argument pos:start="125:21" pos:end="125:21"><expr pos:start="125:21" pos:end="125:21"><name pos:start="125:21" pos:end="125:21">s</name></expr></argument>, <argument pos:start="125:24" pos:end="125:30"><expr pos:start="125:24" pos:end="125:30"><name pos:start="125:24" pos:end="125:30">COND_EQ</name></expr></argument>, <argument pos:start="125:33" pos:end="125:42"><expr pos:start="125:33" pos:end="125:42"><name pos:start="125:33" pos:end="125:42">TCG_REG_R1</name></expr></argument>, <argument pos:start="125:45" pos:end="125:54"><expr pos:start="125:45" pos:end="125:54"><name pos:start="125:45" pos:end="125:54">TCG_REG_R0</name></expr></argument>,

                    <argument pos:start="127:21" pos:end="127:70"><expr pos:start="127:21" pos:end="127:70"><call pos:start="127:21" pos:end="127:66"><name pos:start="127:21" pos:end="127:28">offsetof</name><argument_list pos:start="127:29" pos:end="127:66">(<argument pos:start="127:30" pos:end="127:37"><expr pos:start="127:30" pos:end="127:37"><name pos:start="127:30" pos:end="127:37">CPUState</name></expr></argument>, <argument pos:start="127:40" pos:end="127:65"><expr pos:start="127:40" pos:end="127:65"><name pos:start="127:40" pos:end="127:54"><name pos:start="127:40" pos:end="127:48">tlb_table</name><index pos:start="127:49" pos:end="127:51">[<expr pos:start="127:50" pos:end="127:50"><literal type="number" pos:start="127:50" pos:end="127:50">0</literal></expr>]</index><index pos:start="127:52" pos:end="127:54">[<expr pos:start="127:53" pos:end="127:53"><literal type="number" pos:start="127:53" pos:end="127:53">0</literal></expr>]</index></name><operator pos:start="127:55" pos:end="127:55">.</operator><name pos:start="127:56" pos:end="127:65">addr_write</name></expr></argument>)</argument_list></call> <operator pos:start="127:68" pos:end="127:68">+</operator> <literal type="number" pos:start="127:70" pos:end="127:70">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="134:0"><expr pos:start="129:5" pos:end="131:60"><call pos:start="129:5" pos:end="131:60"><name pos:start="129:5" pos:end="129:19">tcg_out_dat_reg</name><argument_list pos:start="129:20" pos:end="131:60">(<argument pos:start="129:21" pos:end="129:21"><expr pos:start="129:21" pos:end="129:21"><name pos:start="129:21" pos:end="129:21">s</name></expr></argument>, <argument pos:start="129:24" pos:end="129:30"><expr pos:start="129:24" pos:end="129:30"><name pos:start="129:24" pos:end="129:30">COND_EQ</name></expr></argument>, <argument pos:start="129:33" pos:end="129:41"><expr pos:start="129:33" pos:end="129:41"><name pos:start="129:33" pos:end="129:41">ARITH_CMP</name></expr></argument>, <argument pos:start="129:44" pos:end="129:44"><expr pos:start="129:44" pos:end="129:44"><literal type="number" pos:start="129:44" pos:end="129:44">0</literal></expr></argument>,

                    <argument pos:start="131:21" pos:end="131:30"><expr pos:start="131:21" pos:end="131:30"><name pos:start="131:21" pos:end="131:30">TCG_REG_R1</name></expr></argument>, <argument pos:start="131:33" pos:end="131:41"><expr pos:start="131:33" pos:end="131:41"><name pos:start="131:33" pos:end="131:41">addr_reg2</name></expr></argument>, <argument pos:start="131:44" pos:end="131:59"><expr pos:start="131:44" pos:end="131:59"><call pos:start="131:44" pos:end="131:59"><name pos:start="131:44" pos:end="131:56">SHIFT_IMM_LSL</name><argument_list pos:start="131:57" pos:end="131:59">(<argument pos:start="131:58" pos:end="131:58"><expr pos:start="131:58" pos:end="131:58"><literal type="number" pos:start="131:58" pos:end="131:58">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="133:1" pos:end="133:8">#  <cpp:directive pos:start="133:4" pos:end="133:8">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="135:5" pos:end="137:64"><expr pos:start="135:5" pos:end="137:63"><call pos:start="135:5" pos:end="137:63"><name pos:start="135:5" pos:end="135:19">tcg_out_ld32_12</name><argument_list pos:start="135:20" pos:end="137:63">(<argument pos:start="135:21" pos:end="135:21"><expr pos:start="135:21" pos:end="135:21"><name pos:start="135:21" pos:end="135:21">s</name></expr></argument>, <argument pos:start="135:24" pos:end="135:30"><expr pos:start="135:24" pos:end="135:30"><name pos:start="135:24" pos:end="135:30">COND_EQ</name></expr></argument>, <argument pos:start="135:33" pos:end="135:42"><expr pos:start="135:33" pos:end="135:42"><name pos:start="135:33" pos:end="135:42">TCG_REG_R1</name></expr></argument>, <argument pos:start="135:45" pos:end="135:54"><expr pos:start="135:45" pos:end="135:54"><name pos:start="135:45" pos:end="135:54">TCG_REG_R0</name></expr></argument>,

                    <argument pos:start="137:21" pos:end="137:62"><expr pos:start="137:21" pos:end="137:62"><call pos:start="137:21" pos:end="137:62"><name pos:start="137:21" pos:end="137:28">offsetof</name><argument_list pos:start="137:29" pos:end="137:62">(<argument pos:start="137:30" pos:end="137:37"><expr pos:start="137:30" pos:end="137:37"><name pos:start="137:30" pos:end="137:37">CPUState</name></expr></argument>, <argument pos:start="137:40" pos:end="137:61"><expr pos:start="137:40" pos:end="137:61"><name pos:start="137:40" pos:end="137:54"><name pos:start="137:40" pos:end="137:48">tlb_table</name><index pos:start="137:49" pos:end="137:51">[<expr pos:start="137:50" pos:end="137:50"><literal type="number" pos:start="137:50" pos:end="137:50">0</literal></expr>]</index><index pos:start="137:52" pos:end="137:54">[<expr pos:start="137:53" pos:end="137:53"><literal type="number" pos:start="137:53" pos:end="137:53">0</literal></expr>]</index></name><operator pos:start="137:55" pos:end="137:55">.</operator><name pos:start="137:56" pos:end="137:61">addend</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="141:5" pos:end="205:5">switch <condition pos:start="141:12" pos:end="141:16">(<expr pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:15">opc</name></expr>)</condition> <block pos:start="141:18" pos:end="205:5">{<block_content pos:start="143:5" pos:end="203:14">

    <case pos:start="143:5" pos:end="143:11">case <expr pos:start="143:10" pos:end="143:10"><literal type="number" pos:start="143:10" pos:end="143:10">0</literal></expr>:</case>

        <expr_stmt pos:start="145:9" pos:end="145:66"><expr pos:start="145:9" pos:end="145:65"><call pos:start="145:9" pos:end="145:65"><name pos:start="145:9" pos:end="145:21">tcg_out_st8_r</name><argument_list pos:start="145:22" pos:end="145:65">(<argument pos:start="145:23" pos:end="145:23"><expr pos:start="145:23" pos:end="145:23"><name pos:start="145:23" pos:end="145:23">s</name></expr></argument>, <argument pos:start="145:26" pos:end="145:32"><expr pos:start="145:26" pos:end="145:32"><name pos:start="145:26" pos:end="145:32">COND_EQ</name></expr></argument>, <argument pos:start="145:35" pos:end="145:42"><expr pos:start="145:35" pos:end="145:42"><name pos:start="145:35" pos:end="145:42">data_reg</name></expr></argument>, <argument pos:start="145:45" pos:end="145:52"><expr pos:start="145:45" pos:end="145:52"><name pos:start="145:45" pos:end="145:52">addr_reg</name></expr></argument>, <argument pos:start="145:55" pos:end="145:64"><expr pos:start="145:55" pos:end="145:64"><name pos:start="145:55" pos:end="145:64">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:11">case <expr pos:start="149:10" pos:end="149:10"><literal type="number" pos:start="149:10" pos:end="149:10">1</literal></expr>:</case>

        <if_stmt pos:start="151:9" pos:end="161:9"><if pos:start="151:9" pos:end="157:9">if <condition pos:start="151:12" pos:end="151:18">(<expr pos:start="151:13" pos:end="151:17"><name pos:start="151:13" pos:end="151:17">bswap</name></expr>)</condition> <block pos:start="151:20" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:73">

            <expr_stmt pos:start="153:13" pos:end="153:62"><expr pos:start="153:13" pos:end="153:61"><call pos:start="153:13" pos:end="153:61"><name pos:start="153:13" pos:end="153:27">tcg_out_bswap16</name><argument_list pos:start="153:28" pos:end="153:61">(<argument pos:start="153:29" pos:end="153:29"><expr pos:start="153:29" pos:end="153:29"><name pos:start="153:29" pos:end="153:29">s</name></expr></argument>, <argument pos:start="153:32" pos:end="153:38"><expr pos:start="153:32" pos:end="153:38"><name pos:start="153:32" pos:end="153:38">COND_EQ</name></expr></argument>, <argument pos:start="153:41" pos:end="153:50"><expr pos:start="153:41" pos:end="153:50"><name pos:start="153:41" pos:end="153:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="153:53" pos:end="153:60"><expr pos:start="153:53" pos:end="153:60"><name pos:start="153:53" pos:end="153:60">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:73"><expr pos:start="155:13" pos:end="155:72"><call pos:start="155:13" pos:end="155:72"><name pos:start="155:13" pos:end="155:26">tcg_out_st16_r</name><argument_list pos:start="155:27" pos:end="155:72">(<argument pos:start="155:28" pos:end="155:28"><expr pos:start="155:28" pos:end="155:28"><name pos:start="155:28" pos:end="155:28">s</name></expr></argument>, <argument pos:start="155:31" pos:end="155:37"><expr pos:start="155:31" pos:end="155:37"><name pos:start="155:31" pos:end="155:37">COND_EQ</name></expr></argument>, <argument pos:start="155:40" pos:end="155:49"><expr pos:start="155:40" pos:end="155:49"><name pos:start="155:40" pos:end="155:49">TCG_REG_R0</name></expr></argument>, <argument pos:start="155:52" pos:end="155:59"><expr pos:start="155:52" pos:end="155:59"><name pos:start="155:52" pos:end="155:59">addr_reg</name></expr></argument>, <argument pos:start="155:62" pos:end="155:71"><expr pos:start="155:62" pos:end="155:71"><name pos:start="155:62" pos:end="155:71">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="161:9">else <block pos:start="157:16" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:71">

            <expr_stmt pos:start="159:13" pos:end="159:71"><expr pos:start="159:13" pos:end="159:70"><call pos:start="159:13" pos:end="159:70"><name pos:start="159:13" pos:end="159:26">tcg_out_st16_r</name><argument_list pos:start="159:27" pos:end="159:70">(<argument pos:start="159:28" pos:end="159:28"><expr pos:start="159:28" pos:end="159:28"><name pos:start="159:28" pos:end="159:28">s</name></expr></argument>, <argument pos:start="159:31" pos:end="159:37"><expr pos:start="159:31" pos:end="159:37"><name pos:start="159:31" pos:end="159:37">COND_EQ</name></expr></argument>, <argument pos:start="159:40" pos:end="159:47"><expr pos:start="159:40" pos:end="159:47"><name pos:start="159:40" pos:end="159:47">data_reg</name></expr></argument>, <argument pos:start="159:50" pos:end="159:57"><expr pos:start="159:50" pos:end="159:57"><name pos:start="159:50" pos:end="159:57">addr_reg</name></expr></argument>, <argument pos:start="159:60" pos:end="159:69"><expr pos:start="159:60" pos:end="159:69"><name pos:start="159:60" pos:end="159:69">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <case pos:start="165:5" pos:end="165:11">case <expr pos:start="165:10" pos:end="165:10"><literal type="number" pos:start="165:10" pos:end="165:10">2</literal></expr>:</case>

    <default pos:start="167:5" pos:end="167:12">default:</default>

        <if_stmt pos:start="169:9" pos:end="179:9"><if pos:start="169:9" pos:end="175:9">if <condition pos:start="169:12" pos:end="169:18">(<expr pos:start="169:13" pos:end="169:17"><name pos:start="169:13" pos:end="169:17">bswap</name></expr>)</condition> <block pos:start="169:20" pos:end="175:9">{<block_content pos:start="171:13" pos:end="173:73">

            <expr_stmt pos:start="171:13" pos:end="171:62"><expr pos:start="171:13" pos:end="171:61"><call pos:start="171:13" pos:end="171:61"><name pos:start="171:13" pos:end="171:27">tcg_out_bswap32</name><argument_list pos:start="171:28" pos:end="171:61">(<argument pos:start="171:29" pos:end="171:29"><expr pos:start="171:29" pos:end="171:29"><name pos:start="171:29" pos:end="171:29">s</name></expr></argument>, <argument pos:start="171:32" pos:end="171:38"><expr pos:start="171:32" pos:end="171:38"><name pos:start="171:32" pos:end="171:38">COND_EQ</name></expr></argument>, <argument pos:start="171:41" pos:end="171:50"><expr pos:start="171:41" pos:end="171:50"><name pos:start="171:41" pos:end="171:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="171:53" pos:end="171:60"><expr pos:start="171:53" pos:end="171:60"><name pos:start="171:53" pos:end="171:60">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:73"><expr pos:start="173:13" pos:end="173:72"><call pos:start="173:13" pos:end="173:72"><name pos:start="173:13" pos:end="173:26">tcg_out_st32_r</name><argument_list pos:start="173:27" pos:end="173:72">(<argument pos:start="173:28" pos:end="173:28"><expr pos:start="173:28" pos:end="173:28"><name pos:start="173:28" pos:end="173:28">s</name></expr></argument>, <argument pos:start="173:31" pos:end="173:37"><expr pos:start="173:31" pos:end="173:37"><name pos:start="173:31" pos:end="173:37">COND_EQ</name></expr></argument>, <argument pos:start="173:40" pos:end="173:49"><expr pos:start="173:40" pos:end="173:49"><name pos:start="173:40" pos:end="173:49">TCG_REG_R0</name></expr></argument>, <argument pos:start="173:52" pos:end="173:59"><expr pos:start="173:52" pos:end="173:59"><name pos:start="173:52" pos:end="173:59">addr_reg</name></expr></argument>, <argument pos:start="173:62" pos:end="173:71"><expr pos:start="173:62" pos:end="173:71"><name pos:start="173:62" pos:end="173:71">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="175:11" pos:end="179:9">else <block pos:start="175:16" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:71">

            <expr_stmt pos:start="177:13" pos:end="177:71"><expr pos:start="177:13" pos:end="177:70"><call pos:start="177:13" pos:end="177:70"><name pos:start="177:13" pos:end="177:26">tcg_out_st32_r</name><argument_list pos:start="177:27" pos:end="177:70">(<argument pos:start="177:28" pos:end="177:28"><expr pos:start="177:28" pos:end="177:28"><name pos:start="177:28" pos:end="177:28">s</name></expr></argument>, <argument pos:start="177:31" pos:end="177:37"><expr pos:start="177:31" pos:end="177:37"><name pos:start="177:31" pos:end="177:37">COND_EQ</name></expr></argument>, <argument pos:start="177:40" pos:end="177:47"><expr pos:start="177:40" pos:end="177:47"><name pos:start="177:40" pos:end="177:47">data_reg</name></expr></argument>, <argument pos:start="177:50" pos:end="177:57"><expr pos:start="177:50" pos:end="177:57"><name pos:start="177:50" pos:end="177:57">addr_reg</name></expr></argument>, <argument pos:start="177:60" pos:end="177:69"><expr pos:start="177:60" pos:end="177:69"><name pos:start="177:60" pos:end="177:69">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="181:9" pos:end="181:14">break;</break>

    <case pos:start="183:5" pos:end="183:11">case <expr pos:start="183:10" pos:end="183:10"><literal type="number" pos:start="183:10" pos:end="183:10">3</literal></expr>:</case>

        <if_stmt pos:start="185:9" pos:end="201:9"><if pos:start="185:9" pos:end="195:9">if <condition pos:start="185:12" pos:end="185:18">(<expr pos:start="185:13" pos:end="185:17"><name pos:start="185:13" pos:end="185:17">bswap</name></expr>)</condition> <block pos:start="185:20" pos:end="195:9">{<block_content pos:start="187:13" pos:end="193:65">

            <expr_stmt pos:start="187:13" pos:end="187:63"><expr pos:start="187:13" pos:end="187:62"><call pos:start="187:13" pos:end="187:62"><name pos:start="187:13" pos:end="187:27">tcg_out_bswap32</name><argument_list pos:start="187:28" pos:end="187:62">(<argument pos:start="187:29" pos:end="187:29"><expr pos:start="187:29" pos:end="187:29"><name pos:start="187:29" pos:end="187:29">s</name></expr></argument>, <argument pos:start="187:32" pos:end="187:38"><expr pos:start="187:32" pos:end="187:38"><name pos:start="187:32" pos:end="187:38">COND_EQ</name></expr></argument>, <argument pos:start="187:41" pos:end="187:50"><expr pos:start="187:41" pos:end="187:50"><name pos:start="187:41" pos:end="187:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="187:53" pos:end="187:61"><expr pos:start="187:53" pos:end="187:61"><name pos:start="187:53" pos:end="187:61">data_reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:75"><expr pos:start="189:13" pos:end="189:74"><call pos:start="189:13" pos:end="189:74"><name pos:start="189:13" pos:end="189:28">tcg_out_st32_rwb</name><argument_list pos:start="189:29" pos:end="189:74">(<argument pos:start="189:30" pos:end="189:30"><expr pos:start="189:30" pos:end="189:30"><name pos:start="189:30" pos:end="189:30">s</name></expr></argument>, <argument pos:start="189:33" pos:end="189:39"><expr pos:start="189:33" pos:end="189:39"><name pos:start="189:33" pos:end="189:39">COND_EQ</name></expr></argument>, <argument pos:start="189:42" pos:end="189:51"><expr pos:start="189:42" pos:end="189:51"><name pos:start="189:42" pos:end="189:51">TCG_REG_R0</name></expr></argument>, <argument pos:start="189:54" pos:end="189:63"><expr pos:start="189:54" pos:end="189:63"><name pos:start="189:54" pos:end="189:63">TCG_REG_R1</name></expr></argument>, <argument pos:start="189:66" pos:end="189:73"><expr pos:start="189:66" pos:end="189:73"><name pos:start="189:66" pos:end="189:73">addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:62"><expr pos:start="191:13" pos:end="191:61"><call pos:start="191:13" pos:end="191:61"><name pos:start="191:13" pos:end="191:27">tcg_out_bswap32</name><argument_list pos:start="191:28" pos:end="191:61">(<argument pos:start="191:29" pos:end="191:29"><expr pos:start="191:29" pos:end="191:29"><name pos:start="191:29" pos:end="191:29">s</name></expr></argument>, <argument pos:start="191:32" pos:end="191:38"><expr pos:start="191:32" pos:end="191:38"><name pos:start="191:32" pos:end="191:38">COND_EQ</name></expr></argument>, <argument pos:start="191:41" pos:end="191:50"><expr pos:start="191:41" pos:end="191:50"><name pos:start="191:41" pos:end="191:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="191:53" pos:end="191:60"><expr pos:start="191:53" pos:end="191:60"><name pos:start="191:53" pos:end="191:60">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:65"><expr pos:start="193:13" pos:end="193:64"><call pos:start="193:13" pos:end="193:64"><name pos:start="193:13" pos:end="193:27">tcg_out_st32_12</name><argument_list pos:start="193:28" pos:end="193:64">(<argument pos:start="193:29" pos:end="193:29"><expr pos:start="193:29" pos:end="193:29"><name pos:start="193:29" pos:end="193:29">s</name></expr></argument>, <argument pos:start="193:32" pos:end="193:38"><expr pos:start="193:32" pos:end="193:38"><name pos:start="193:32" pos:end="193:38">COND_EQ</name></expr></argument>, <argument pos:start="193:41" pos:end="193:48"><expr pos:start="193:41" pos:end="193:48"><name pos:start="193:41" pos:end="193:48">data_reg</name></expr></argument>, <argument pos:start="193:51" pos:end="193:60"><expr pos:start="193:51" pos:end="193:60"><name pos:start="193:51" pos:end="193:60">TCG_REG_R1</name></expr></argument>, <argument pos:start="193:63" pos:end="193:63"><expr pos:start="193:63" pos:end="193:63"><literal type="number" pos:start="193:63" pos:end="193:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="195:11" pos:end="201:9">else <block pos:start="195:16" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:66">

            <expr_stmt pos:start="197:13" pos:end="197:73"><expr pos:start="197:13" pos:end="197:72"><call pos:start="197:13" pos:end="197:72"><name pos:start="197:13" pos:end="197:28">tcg_out_st32_rwb</name><argument_list pos:start="197:29" pos:end="197:72">(<argument pos:start="197:30" pos:end="197:30"><expr pos:start="197:30" pos:end="197:30"><name pos:start="197:30" pos:end="197:30">s</name></expr></argument>, <argument pos:start="197:33" pos:end="197:39"><expr pos:start="197:33" pos:end="197:39"><name pos:start="197:33" pos:end="197:39">COND_EQ</name></expr></argument>, <argument pos:start="197:42" pos:end="197:49"><expr pos:start="197:42" pos:end="197:49"><name pos:start="197:42" pos:end="197:49">data_reg</name></expr></argument>, <argument pos:start="197:52" pos:end="197:61"><expr pos:start="197:52" pos:end="197:61"><name pos:start="197:52" pos:end="197:61">TCG_REG_R1</name></expr></argument>, <argument pos:start="197:64" pos:end="197:71"><expr pos:start="197:64" pos:end="197:71"><name pos:start="197:64" pos:end="197:71">addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:66"><expr pos:start="199:13" pos:end="199:65"><call pos:start="199:13" pos:end="199:65"><name pos:start="199:13" pos:end="199:27">tcg_out_st32_12</name><argument_list pos:start="199:28" pos:end="199:65">(<argument pos:start="199:29" pos:end="199:29"><expr pos:start="199:29" pos:end="199:29"><name pos:start="199:29" pos:end="199:29">s</name></expr></argument>, <argument pos:start="199:32" pos:end="199:38"><expr pos:start="199:32" pos:end="199:38"><name pos:start="199:32" pos:end="199:38">COND_EQ</name></expr></argument>, <argument pos:start="199:41" pos:end="199:49"><expr pos:start="199:41" pos:end="199:49"><name pos:start="199:41" pos:end="199:49">data_reg2</name></expr></argument>, <argument pos:start="199:52" pos:end="199:61"><expr pos:start="199:52" pos:end="199:61"><name pos:start="199:52" pos:end="199:61">TCG_REG_R1</name></expr></argument>, <argument pos:start="199:64" pos:end="199:64"><expr pos:start="199:64" pos:end="199:64"><literal type="number" pos:start="199:64" pos:end="199:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="209:5" pos:end="209:37"><expr pos:start="209:5" pos:end="209:36"><name pos:start="209:5" pos:end="209:13">label_ptr</name> <operator pos:start="209:15" pos:end="209:15">=</operator> <operator pos:start="209:17" pos:end="209:17">(</operator><name pos:start="209:18" pos:end="209:21">void</name> <operator pos:start="209:23" pos:end="209:23">*</operator><operator pos:start="209:24" pos:end="209:24">)</operator> <name pos:start="209:26" pos:end="209:36"><name pos:start="209:26" pos:end="209:26">s</name><operator pos:start="209:27" pos:end="209:28">-&gt;</operator><name pos:start="209:29" pos:end="209:36">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:29"><expr pos:start="211:5" pos:end="211:28"><call pos:start="211:5" pos:end="211:28"><name pos:start="211:5" pos:end="211:13">tcg_out_b</name><argument_list pos:start="211:14" pos:end="211:28">(<argument pos:start="211:15" pos:end="211:15"><expr pos:start="211:15" pos:end="211:15"><name pos:start="211:15" pos:end="211:15">s</name></expr></argument>, <argument pos:start="211:18" pos:end="211:24"><expr pos:start="211:18" pos:end="211:24"><name pos:start="211:18" pos:end="211:24">COND_EQ</name></expr></argument>, <argument pos:start="211:27" pos:end="211:27"><expr pos:start="211:27" pos:end="211:27"><literal type="number" pos:start="211:27" pos:end="211:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:66">/* TODO: move this code to where the constants pool will be */</comment>

    <if_stmt pos:start="217:5" pos:end="226:0"><if pos:start="217:5" pos:end="226:0">if <condition pos:start="217:8" pos:end="217:31">(<expr pos:start="217:9" pos:end="217:30"><name pos:start="217:9" pos:end="217:16">addr_reg</name> <operator pos:start="217:18" pos:end="217:19">!=</operator> <name pos:start="217:21" pos:end="217:30">TCG_REG_R0</name></expr>)</condition> <block pos:start="217:33" pos:end="226:0">{<block_content pos:start="219:9" pos:end="221:67">

        <expr_stmt pos:start="219:9" pos:end="221:67"><expr pos:start="219:9" pos:end="221:66"><call pos:start="219:9" pos:end="221:66"><name pos:start="219:9" pos:end="219:23">tcg_out_dat_reg</name><argument_list pos:start="219:24" pos:end="221:66">(<argument pos:start="219:25" pos:end="219:25"><expr pos:start="219:25" pos:end="219:25"><name pos:start="219:25" pos:end="219:25">s</name></expr></argument>, <argument pos:start="219:28" pos:end="219:34"><expr pos:start="219:28" pos:end="219:34"><name pos:start="219:28" pos:end="219:34">COND_AL</name></expr></argument>, <argument pos:start="219:37" pos:end="219:45"><expr pos:start="219:37" pos:end="219:45"><name pos:start="219:37" pos:end="219:45">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="221:25" pos:end="221:34"><expr pos:start="221:25" pos:end="221:34"><name pos:start="221:25" pos:end="221:34">TCG_REG_R0</name></expr></argument>, <argument pos:start="221:37" pos:end="221:37"><expr pos:start="221:37" pos:end="221:37"><literal type="number" pos:start="221:37" pos:end="221:37">0</literal></expr></argument>, <argument pos:start="221:40" pos:end="221:47"><expr pos:start="221:40" pos:end="221:47"><name pos:start="221:40" pos:end="221:47">addr_reg</name></expr></argument>, <argument pos:start="221:50" pos:end="221:65"><expr pos:start="221:50" pos:end="221:65"><call pos:start="221:50" pos:end="221:65"><name pos:start="221:50" pos:end="221:62">SHIFT_IMM_LSL</name><argument_list pos:start="221:63" pos:end="221:65">(<argument pos:start="221:64" pos:end="221:64"><expr pos:start="221:64" pos:end="221:64"><literal type="number" pos:start="221:64" pos:end="221:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="225:1" pos:end="225:27"># <cpp:directive pos:start="225:3" pos:end="225:4">if</cpp:directive> <expr pos:start="225:6" pos:end="225:27"><name pos:start="225:6" pos:end="225:21">TARGET_LONG_BITS</name> <operator pos:start="225:23" pos:end="225:24">==</operator> <literal type="number" pos:start="225:26" pos:end="225:27">32</literal></expr></cpp:if>

    <switch pos:start="227:5" pos:end="284:0">switch <condition pos:start="227:12" pos:end="227:16">(<expr pos:start="227:13" pos:end="227:15"><name pos:start="227:13" pos:end="227:15">opc</name></expr>)</condition> <block pos:start="227:18" pos:end="284:0">{<block_content pos:start="229:5" pos:end="279:14">

    <case pos:start="229:5" pos:end="229:11">case <expr pos:start="229:10" pos:end="229:10"><literal type="number" pos:start="229:10" pos:end="229:10">0</literal></expr>:</case>

        <expr_stmt pos:start="231:9" pos:end="231:56"><expr pos:start="231:9" pos:end="231:55"><call pos:start="231:9" pos:end="231:55"><name pos:start="231:9" pos:end="231:21">tcg_out_ext8u</name><argument_list pos:start="231:22" pos:end="231:55">(<argument pos:start="231:23" pos:end="231:23"><expr pos:start="231:23" pos:end="231:23"><name pos:start="231:23" pos:end="231:23">s</name></expr></argument>, <argument pos:start="231:26" pos:end="231:32"><expr pos:start="231:26" pos:end="231:32"><name pos:start="231:26" pos:end="231:32">COND_AL</name></expr></argument>, <argument pos:start="231:35" pos:end="231:44"><expr pos:start="231:35" pos:end="231:44"><name pos:start="231:35" pos:end="231:44">TCG_REG_R1</name></expr></argument>, <argument pos:start="231:47" pos:end="231:54"><expr pos:start="231:47" pos:end="231:54"><name pos:start="231:47" pos:end="231:54">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:73"><expr pos:start="233:9" pos:end="233:72"><call pos:start="233:9" pos:end="233:72"><name pos:start="233:9" pos:end="233:23">tcg_out_dat_imm</name><argument_list pos:start="233:24" pos:end="233:72">(<argument pos:start="233:25" pos:end="233:25"><expr pos:start="233:25" pos:end="233:25"><name pos:start="233:25" pos:end="233:25">s</name></expr></argument>, <argument pos:start="233:28" pos:end="233:34"><expr pos:start="233:28" pos:end="233:34"><name pos:start="233:28" pos:end="233:34">COND_AL</name></expr></argument>, <argument pos:start="233:37" pos:end="233:45"><expr pos:start="233:37" pos:end="233:45"><name pos:start="233:37" pos:end="233:45">ARITH_MOV</name></expr></argument>, <argument pos:start="233:48" pos:end="233:57"><expr pos:start="233:48" pos:end="233:57"><name pos:start="233:48" pos:end="233:57">TCG_REG_R2</name></expr></argument>, <argument pos:start="233:60" pos:end="233:60"><expr pos:start="233:60" pos:end="233:60"><literal type="number" pos:start="233:60" pos:end="233:60">0</literal></expr></argument>, <argument pos:start="233:63" pos:end="233:71"><expr pos:start="233:63" pos:end="233:71"><name pos:start="233:63" pos:end="233:71">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="235:9" pos:end="235:14">break;</break>

    <case pos:start="237:5" pos:end="237:11">case <expr pos:start="237:10" pos:end="237:10"><literal type="number" pos:start="237:10" pos:end="237:10">1</literal></expr>:</case>

        <expr_stmt pos:start="239:9" pos:end="239:57"><expr pos:start="239:9" pos:end="239:56"><call pos:start="239:9" pos:end="239:56"><name pos:start="239:9" pos:end="239:22">tcg_out_ext16u</name><argument_list pos:start="239:23" pos:end="239:56">(<argument pos:start="239:24" pos:end="239:24"><expr pos:start="239:24" pos:end="239:24"><name pos:start="239:24" pos:end="239:24">s</name></expr></argument>, <argument pos:start="239:27" pos:end="239:33"><expr pos:start="239:27" pos:end="239:33"><name pos:start="239:27" pos:end="239:33">COND_AL</name></expr></argument>, <argument pos:start="239:36" pos:end="239:45"><expr pos:start="239:36" pos:end="239:45"><name pos:start="239:36" pos:end="239:45">TCG_REG_R1</name></expr></argument>, <argument pos:start="239:48" pos:end="239:55"><expr pos:start="239:48" pos:end="239:55"><name pos:start="239:48" pos:end="239:55">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:73"><expr pos:start="241:9" pos:end="241:72"><call pos:start="241:9" pos:end="241:72"><name pos:start="241:9" pos:end="241:23">tcg_out_dat_imm</name><argument_list pos:start="241:24" pos:end="241:72">(<argument pos:start="241:25" pos:end="241:25"><expr pos:start="241:25" pos:end="241:25"><name pos:start="241:25" pos:end="241:25">s</name></expr></argument>, <argument pos:start="241:28" pos:end="241:34"><expr pos:start="241:28" pos:end="241:34"><name pos:start="241:28" pos:end="241:34">COND_AL</name></expr></argument>, <argument pos:start="241:37" pos:end="241:45"><expr pos:start="241:37" pos:end="241:45"><name pos:start="241:37" pos:end="241:45">ARITH_MOV</name></expr></argument>, <argument pos:start="241:48" pos:end="241:57"><expr pos:start="241:48" pos:end="241:57"><name pos:start="241:48" pos:end="241:57">TCG_REG_R2</name></expr></argument>, <argument pos:start="241:60" pos:end="241:60"><expr pos:start="241:60" pos:end="241:60"><literal type="number" pos:start="241:60" pos:end="241:60">0</literal></expr></argument>, <argument pos:start="241:63" pos:end="241:71"><expr pos:start="241:63" pos:end="241:71"><name pos:start="241:63" pos:end="241:71">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="243:9" pos:end="243:14">break;</break>

    <case pos:start="245:5" pos:end="245:11">case <expr pos:start="245:10" pos:end="245:10"><literal type="number" pos:start="245:10" pos:end="245:10">2</literal></expr>:</case>

        <if_stmt pos:start="247:9" pos:end="253:9"><if pos:start="247:9" pos:end="253:9">if <condition pos:start="247:12" pos:end="247:35">(<expr pos:start="247:13" pos:end="247:34"><name pos:start="247:13" pos:end="247:20">data_reg</name> <operator pos:start="247:22" pos:end="247:23">!=</operator> <name pos:start="247:25" pos:end="247:34">TCG_REG_R1</name></expr>)</condition> <block pos:start="247:37" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:71">

            <expr_stmt pos:start="249:13" pos:end="251:71"><expr pos:start="249:13" pos:end="251:70"><call pos:start="249:13" pos:end="251:70"><name pos:start="249:13" pos:end="249:27">tcg_out_dat_reg</name><argument_list pos:start="249:28" pos:end="251:70">(<argument pos:start="249:29" pos:end="249:29"><expr pos:start="249:29" pos:end="249:29"><name pos:start="249:29" pos:end="249:29">s</name></expr></argument>, <argument pos:start="249:32" pos:end="249:38"><expr pos:start="249:32" pos:end="249:38"><name pos:start="249:32" pos:end="249:38">COND_AL</name></expr></argument>, <argument pos:start="249:41" pos:end="249:49"><expr pos:start="249:41" pos:end="249:49"><name pos:start="249:41" pos:end="249:49">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="251:29" pos:end="251:38"><expr pos:start="251:29" pos:end="251:38"><name pos:start="251:29" pos:end="251:38">TCG_REG_R1</name></expr></argument>, <argument pos:start="251:41" pos:end="251:41"><expr pos:start="251:41" pos:end="251:41"><literal type="number" pos:start="251:41" pos:end="251:41">0</literal></expr></argument>, <argument pos:start="251:44" pos:end="251:51"><expr pos:start="251:44" pos:end="251:51"><name pos:start="251:44" pos:end="251:51">data_reg</name></expr></argument>, <argument pos:start="251:54" pos:end="251:69"><expr pos:start="251:54" pos:end="251:69"><call pos:start="251:54" pos:end="251:69"><name pos:start="251:54" pos:end="251:66">SHIFT_IMM_LSL</name><argument_list pos:start="251:67" pos:end="251:69">(<argument pos:start="251:68" pos:end="251:68"><expr pos:start="251:68" pos:end="251:68"><literal type="number" pos:start="251:68" pos:end="251:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:73"><expr pos:start="255:9" pos:end="255:72"><call pos:start="255:9" pos:end="255:72"><name pos:start="255:9" pos:end="255:23">tcg_out_dat_imm</name><argument_list pos:start="255:24" pos:end="255:72">(<argument pos:start="255:25" pos:end="255:25"><expr pos:start="255:25" pos:end="255:25"><name pos:start="255:25" pos:end="255:25">s</name></expr></argument>, <argument pos:start="255:28" pos:end="255:34"><expr pos:start="255:28" pos:end="255:34"><name pos:start="255:28" pos:end="255:34">COND_AL</name></expr></argument>, <argument pos:start="255:37" pos:end="255:45"><expr pos:start="255:37" pos:end="255:45"><name pos:start="255:37" pos:end="255:45">ARITH_MOV</name></expr></argument>, <argument pos:start="255:48" pos:end="255:57"><expr pos:start="255:48" pos:end="255:57"><name pos:start="255:48" pos:end="255:57">TCG_REG_R2</name></expr></argument>, <argument pos:start="255:60" pos:end="255:60"><expr pos:start="255:60" pos:end="255:60"><literal type="number" pos:start="255:60" pos:end="255:60">0</literal></expr></argument>, <argument pos:start="255:63" pos:end="255:71"><expr pos:start="255:63" pos:end="255:71"><name pos:start="255:63" pos:end="255:71">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="257:9" pos:end="257:14">break;</break>

    <case pos:start="259:5" pos:end="259:11">case <expr pos:start="259:10" pos:end="259:10"><literal type="number" pos:start="259:10" pos:end="259:10">3</literal></expr>:</case>

        <if_stmt pos:start="261:9" pos:end="267:9"><if pos:start="261:9" pos:end="267:9">if <condition pos:start="261:12" pos:end="261:35">(<expr pos:start="261:13" pos:end="261:34"><name pos:start="261:13" pos:end="261:20">data_reg</name> <operator pos:start="261:22" pos:end="261:23">!=</operator> <name pos:start="261:25" pos:end="261:34">TCG_REG_R1</name></expr>)</condition> <block pos:start="261:37" pos:end="267:9">{<block_content pos:start="263:13" pos:end="265:71">

            <expr_stmt pos:start="263:13" pos:end="265:71"><expr pos:start="263:13" pos:end="265:70"><call pos:start="263:13" pos:end="265:70"><name pos:start="263:13" pos:end="263:27">tcg_out_dat_reg</name><argument_list pos:start="263:28" pos:end="265:70">(<argument pos:start="263:29" pos:end="263:29"><expr pos:start="263:29" pos:end="263:29"><name pos:start="263:29" pos:end="263:29">s</name></expr></argument>, <argument pos:start="263:32" pos:end="263:38"><expr pos:start="263:32" pos:end="263:38"><name pos:start="263:32" pos:end="263:38">COND_AL</name></expr></argument>, <argument pos:start="263:41" pos:end="263:49"><expr pos:start="263:41" pos:end="263:49"><name pos:start="263:41" pos:end="263:49">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="265:29" pos:end="265:38"><expr pos:start="265:29" pos:end="265:38"><name pos:start="265:29" pos:end="265:38">TCG_REG_R1</name></expr></argument>, <argument pos:start="265:41" pos:end="265:41"><expr pos:start="265:41" pos:end="265:41"><literal type="number" pos:start="265:41" pos:end="265:41">0</literal></expr></argument>, <argument pos:start="265:44" pos:end="265:51"><expr pos:start="265:44" pos:end="265:51"><name pos:start="265:44" pos:end="265:51">data_reg</name></expr></argument>, <argument pos:start="265:54" pos:end="265:69"><expr pos:start="265:54" pos:end="265:69"><call pos:start="265:54" pos:end="265:69"><name pos:start="265:54" pos:end="265:66">SHIFT_IMM_LSL</name><argument_list pos:start="265:67" pos:end="265:69">(<argument pos:start="265:68" pos:end="265:68"><expr pos:start="265:68" pos:end="265:68"><literal type="number" pos:start="265:68" pos:end="265:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="269:9" pos:end="275:9"><if pos:start="269:9" pos:end="275:9">if <condition pos:start="269:12" pos:end="269:36">(<expr pos:start="269:13" pos:end="269:35"><name pos:start="269:13" pos:end="269:21">data_reg2</name> <operator pos:start="269:23" pos:end="269:24">!=</operator> <name pos:start="269:26" pos:end="269:35">TCG_REG_R2</name></expr>)</condition> <block pos:start="269:38" pos:end="275:9">{<block_content pos:start="271:13" pos:end="273:72">

            <expr_stmt pos:start="271:13" pos:end="273:72"><expr pos:start="271:13" pos:end="273:71"><call pos:start="271:13" pos:end="273:71"><name pos:start="271:13" pos:end="271:27">tcg_out_dat_reg</name><argument_list pos:start="271:28" pos:end="273:71">(<argument pos:start="271:29" pos:end="271:29"><expr pos:start="271:29" pos:end="271:29"><name pos:start="271:29" pos:end="271:29">s</name></expr></argument>, <argument pos:start="271:32" pos:end="271:38"><expr pos:start="271:32" pos:end="271:38"><name pos:start="271:32" pos:end="271:38">COND_AL</name></expr></argument>, <argument pos:start="271:41" pos:end="271:49"><expr pos:start="271:41" pos:end="271:49"><name pos:start="271:41" pos:end="271:49">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="273:29" pos:end="273:38"><expr pos:start="273:29" pos:end="273:38"><name pos:start="273:29" pos:end="273:38">TCG_REG_R2</name></expr></argument>, <argument pos:start="273:41" pos:end="273:41"><expr pos:start="273:41" pos:end="273:41"><literal type="number" pos:start="273:41" pos:end="273:41">0</literal></expr></argument>, <argument pos:start="273:44" pos:end="273:52"><expr pos:start="273:44" pos:end="273:52"><name pos:start="273:44" pos:end="273:52">data_reg2</name></expr></argument>, <argument pos:start="273:55" pos:end="273:70"><expr pos:start="273:55" pos:end="273:70"><call pos:start="273:55" pos:end="273:70"><name pos:start="273:55" pos:end="273:67">SHIFT_IMM_LSL</name><argument_list pos:start="273:68" pos:end="273:70">(<argument pos:start="273:69" pos:end="273:69"><expr pos:start="273:69" pos:end="273:69"><literal type="number" pos:start="273:69" pos:end="273:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:73"><expr pos:start="277:9" pos:end="277:72"><call pos:start="277:9" pos:end="277:72"><name pos:start="277:9" pos:end="277:23">tcg_out_dat_imm</name><argument_list pos:start="277:24" pos:end="277:72">(<argument pos:start="277:25" pos:end="277:25"><expr pos:start="277:25" pos:end="277:25"><name pos:start="277:25" pos:end="277:25">s</name></expr></argument>, <argument pos:start="277:28" pos:end="277:34"><expr pos:start="277:28" pos:end="277:34"><name pos:start="277:28" pos:end="277:34">COND_AL</name></expr></argument>, <argument pos:start="277:37" pos:end="277:45"><expr pos:start="277:37" pos:end="277:45"><name pos:start="277:37" pos:end="277:45">ARITH_MOV</name></expr></argument>, <argument pos:start="277:48" pos:end="277:57"><expr pos:start="277:48" pos:end="277:57"><name pos:start="277:48" pos:end="277:57">TCG_REG_R3</name></expr></argument>, <argument pos:start="277:60" pos:end="277:60"><expr pos:start="277:60" pos:end="277:60"><literal type="number" pos:start="277:60" pos:end="277:60">0</literal></expr></argument>, <argument pos:start="277:63" pos:end="277:71"><expr pos:start="277:63" pos:end="277:71"><name pos:start="277:63" pos:end="277:71">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="279:9" pos:end="279:14">break;</break>

    </block_content>}</block></switch>

<cpp:else pos:start="283:1" pos:end="283:6"># <cpp:directive pos:start="283:3" pos:end="283:6">else</cpp:directive></cpp:else>

    <if_stmt pos:start="285:5" pos:end="291:5"><if pos:start="285:5" pos:end="291:5">if <condition pos:start="285:8" pos:end="285:32">(<expr pos:start="285:9" pos:end="285:31"><name pos:start="285:9" pos:end="285:17">addr_reg2</name> <operator pos:start="285:19" pos:end="285:20">!=</operator> <name pos:start="285:22" pos:end="285:31">TCG_REG_R1</name></expr>)</condition> <block pos:start="285:34" pos:end="291:5">{<block_content pos:start="287:9" pos:end="289:68">

        <expr_stmt pos:start="287:9" pos:end="289:68"><expr pos:start="287:9" pos:end="289:67"><call pos:start="287:9" pos:end="289:67"><name pos:start="287:9" pos:end="287:23">tcg_out_dat_reg</name><argument_list pos:start="287:24" pos:end="289:67">(<argument pos:start="287:25" pos:end="287:25"><expr pos:start="287:25" pos:end="287:25"><name pos:start="287:25" pos:end="287:25">s</name></expr></argument>, <argument pos:start="287:28" pos:end="287:34"><expr pos:start="287:28" pos:end="287:34"><name pos:start="287:28" pos:end="287:34">COND_AL</name></expr></argument>, <argument pos:start="287:37" pos:end="287:45"><expr pos:start="287:37" pos:end="287:45"><name pos:start="287:37" pos:end="287:45">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="289:25" pos:end="289:34"><expr pos:start="289:25" pos:end="289:34"><name pos:start="289:25" pos:end="289:34">TCG_REG_R1</name></expr></argument>, <argument pos:start="289:37" pos:end="289:37"><expr pos:start="289:37" pos:end="289:37"><literal type="number" pos:start="289:37" pos:end="289:37">0</literal></expr></argument>, <argument pos:start="289:40" pos:end="289:48"><expr pos:start="289:40" pos:end="289:48"><name pos:start="289:40" pos:end="289:48">addr_reg2</name></expr></argument>, <argument pos:start="289:51" pos:end="289:66"><expr pos:start="289:51" pos:end="289:66"><call pos:start="289:51" pos:end="289:66"><name pos:start="289:51" pos:end="289:63">SHIFT_IMM_LSL</name><argument_list pos:start="289:64" pos:end="289:66">(<argument pos:start="289:65" pos:end="289:65"><expr pos:start="289:65" pos:end="289:65"><literal type="number" pos:start="289:65" pos:end="289:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="293:5" pos:end="352:0">switch <condition pos:start="293:12" pos:end="293:16">(<expr pos:start="293:13" pos:end="293:15"><name pos:start="293:13" pos:end="293:15">opc</name></expr>)</condition> <block pos:start="293:18" pos:end="352:0">{<block_content pos:start="295:5" pos:end="347:14">

    <case pos:start="295:5" pos:end="295:11">case <expr pos:start="295:10" pos:end="295:10"><literal type="number" pos:start="295:10" pos:end="295:10">0</literal></expr>:</case>

        <expr_stmt pos:start="297:9" pos:end="297:56"><expr pos:start="297:9" pos:end="297:55"><call pos:start="297:9" pos:end="297:55"><name pos:start="297:9" pos:end="297:21">tcg_out_ext8u</name><argument_list pos:start="297:22" pos:end="297:55">(<argument pos:start="297:23" pos:end="297:23"><expr pos:start="297:23" pos:end="297:23"><name pos:start="297:23" pos:end="297:23">s</name></expr></argument>, <argument pos:start="297:26" pos:end="297:32"><expr pos:start="297:26" pos:end="297:32"><name pos:start="297:26" pos:end="297:32">COND_AL</name></expr></argument>, <argument pos:start="297:35" pos:end="297:44"><expr pos:start="297:35" pos:end="297:44"><name pos:start="297:35" pos:end="297:44">TCG_REG_R2</name></expr></argument>, <argument pos:start="297:47" pos:end="297:54"><expr pos:start="297:47" pos:end="297:54"><name pos:start="297:47" pos:end="297:54">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:73"><expr pos:start="299:9" pos:end="299:72"><call pos:start="299:9" pos:end="299:72"><name pos:start="299:9" pos:end="299:23">tcg_out_dat_imm</name><argument_list pos:start="299:24" pos:end="299:72">(<argument pos:start="299:25" pos:end="299:25"><expr pos:start="299:25" pos:end="299:25"><name pos:start="299:25" pos:end="299:25">s</name></expr></argument>, <argument pos:start="299:28" pos:end="299:34"><expr pos:start="299:28" pos:end="299:34"><name pos:start="299:28" pos:end="299:34">COND_AL</name></expr></argument>, <argument pos:start="299:37" pos:end="299:45"><expr pos:start="299:37" pos:end="299:45"><name pos:start="299:37" pos:end="299:45">ARITH_MOV</name></expr></argument>, <argument pos:start="299:48" pos:end="299:57"><expr pos:start="299:48" pos:end="299:57"><name pos:start="299:48" pos:end="299:57">TCG_REG_R3</name></expr></argument>, <argument pos:start="299:60" pos:end="299:60"><expr pos:start="299:60" pos:end="299:60"><literal type="number" pos:start="299:60" pos:end="299:60">0</literal></expr></argument>, <argument pos:start="299:63" pos:end="299:71"><expr pos:start="299:63" pos:end="299:71"><name pos:start="299:63" pos:end="299:71">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="301:9" pos:end="301:14">break;</break>

    <case pos:start="303:5" pos:end="303:11">case <expr pos:start="303:10" pos:end="303:10"><literal type="number" pos:start="303:10" pos:end="303:10">1</literal></expr>:</case>

        <expr_stmt pos:start="305:9" pos:end="305:57"><expr pos:start="305:9" pos:end="305:56"><call pos:start="305:9" pos:end="305:56"><name pos:start="305:9" pos:end="305:22">tcg_out_ext16u</name><argument_list pos:start="305:23" pos:end="305:56">(<argument pos:start="305:24" pos:end="305:24"><expr pos:start="305:24" pos:end="305:24"><name pos:start="305:24" pos:end="305:24">s</name></expr></argument>, <argument pos:start="305:27" pos:end="305:33"><expr pos:start="305:27" pos:end="305:33"><name pos:start="305:27" pos:end="305:33">COND_AL</name></expr></argument>, <argument pos:start="305:36" pos:end="305:45"><expr pos:start="305:36" pos:end="305:45"><name pos:start="305:36" pos:end="305:45">TCG_REG_R2</name></expr></argument>, <argument pos:start="305:48" pos:end="305:55"><expr pos:start="305:48" pos:end="305:55"><name pos:start="305:48" pos:end="305:55">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:73"><expr pos:start="307:9" pos:end="307:72"><call pos:start="307:9" pos:end="307:72"><name pos:start="307:9" pos:end="307:23">tcg_out_dat_imm</name><argument_list pos:start="307:24" pos:end="307:72">(<argument pos:start="307:25" pos:end="307:25"><expr pos:start="307:25" pos:end="307:25"><name pos:start="307:25" pos:end="307:25">s</name></expr></argument>, <argument pos:start="307:28" pos:end="307:34"><expr pos:start="307:28" pos:end="307:34"><name pos:start="307:28" pos:end="307:34">COND_AL</name></expr></argument>, <argument pos:start="307:37" pos:end="307:45"><expr pos:start="307:37" pos:end="307:45"><name pos:start="307:37" pos:end="307:45">ARITH_MOV</name></expr></argument>, <argument pos:start="307:48" pos:end="307:57"><expr pos:start="307:48" pos:end="307:57"><name pos:start="307:48" pos:end="307:57">TCG_REG_R3</name></expr></argument>, <argument pos:start="307:60" pos:end="307:60"><expr pos:start="307:60" pos:end="307:60"><literal type="number" pos:start="307:60" pos:end="307:60">0</literal></expr></argument>, <argument pos:start="307:63" pos:end="307:71"><expr pos:start="307:63" pos:end="307:71"><name pos:start="307:63" pos:end="307:71">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="309:9" pos:end="309:14">break;</break>

    <case pos:start="311:5" pos:end="311:11">case <expr pos:start="311:10" pos:end="311:10"><literal type="number" pos:start="311:10" pos:end="311:10">2</literal></expr>:</case>

        <if_stmt pos:start="313:9" pos:end="319:9"><if pos:start="313:9" pos:end="319:9">if <condition pos:start="313:12" pos:end="313:35">(<expr pos:start="313:13" pos:end="313:34"><name pos:start="313:13" pos:end="313:20">data_reg</name> <operator pos:start="313:22" pos:end="313:23">!=</operator> <name pos:start="313:25" pos:end="313:34">TCG_REG_R2</name></expr>)</condition> <block pos:start="313:37" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:71">

            <expr_stmt pos:start="315:13" pos:end="317:71"><expr pos:start="315:13" pos:end="317:70"><call pos:start="315:13" pos:end="317:70"><name pos:start="315:13" pos:end="315:27">tcg_out_dat_reg</name><argument_list pos:start="315:28" pos:end="317:70">(<argument pos:start="315:29" pos:end="315:29"><expr pos:start="315:29" pos:end="315:29"><name pos:start="315:29" pos:end="315:29">s</name></expr></argument>, <argument pos:start="315:32" pos:end="315:38"><expr pos:start="315:32" pos:end="315:38"><name pos:start="315:32" pos:end="315:38">COND_AL</name></expr></argument>, <argument pos:start="315:41" pos:end="315:49"><expr pos:start="315:41" pos:end="315:49"><name pos:start="315:41" pos:end="315:49">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="317:29" pos:end="317:38"><expr pos:start="317:29" pos:end="317:38"><name pos:start="317:29" pos:end="317:38">TCG_REG_R2</name></expr></argument>, <argument pos:start="317:41" pos:end="317:41"><expr pos:start="317:41" pos:end="317:41"><literal type="number" pos:start="317:41" pos:end="317:41">0</literal></expr></argument>, <argument pos:start="317:44" pos:end="317:51"><expr pos:start="317:44" pos:end="317:51"><name pos:start="317:44" pos:end="317:51">data_reg</name></expr></argument>, <argument pos:start="317:54" pos:end="317:69"><expr pos:start="317:54" pos:end="317:69"><call pos:start="317:54" pos:end="317:69"><name pos:start="317:54" pos:end="317:66">SHIFT_IMM_LSL</name><argument_list pos:start="317:67" pos:end="317:69">(<argument pos:start="317:68" pos:end="317:68"><expr pos:start="317:68" pos:end="317:68"><literal type="number" pos:start="317:68" pos:end="317:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:73"><expr pos:start="321:9" pos:end="321:72"><call pos:start="321:9" pos:end="321:72"><name pos:start="321:9" pos:end="321:23">tcg_out_dat_imm</name><argument_list pos:start="321:24" pos:end="321:72">(<argument pos:start="321:25" pos:end="321:25"><expr pos:start="321:25" pos:end="321:25"><name pos:start="321:25" pos:end="321:25">s</name></expr></argument>, <argument pos:start="321:28" pos:end="321:34"><expr pos:start="321:28" pos:end="321:34"><name pos:start="321:28" pos:end="321:34">COND_AL</name></expr></argument>, <argument pos:start="321:37" pos:end="321:45"><expr pos:start="321:37" pos:end="321:45"><name pos:start="321:37" pos:end="321:45">ARITH_MOV</name></expr></argument>, <argument pos:start="321:48" pos:end="321:57"><expr pos:start="321:48" pos:end="321:57"><name pos:start="321:48" pos:end="321:57">TCG_REG_R3</name></expr></argument>, <argument pos:start="321:60" pos:end="321:60"><expr pos:start="321:60" pos:end="321:60"><literal type="number" pos:start="321:60" pos:end="321:60">0</literal></expr></argument>, <argument pos:start="321:63" pos:end="321:71"><expr pos:start="321:63" pos:end="321:71"><name pos:start="321:63" pos:end="321:71">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="323:9" pos:end="323:14">break;</break>

    <case pos:start="325:5" pos:end="325:11">case <expr pos:start="325:10" pos:end="325:10"><literal type="number" pos:start="325:10" pos:end="325:10">3</literal></expr>:</case>

        <expr_stmt pos:start="327:9" pos:end="327:73"><expr pos:start="327:9" pos:end="327:72"><call pos:start="327:9" pos:end="327:72"><name pos:start="327:9" pos:end="327:23">tcg_out_dat_imm</name><argument_list pos:start="327:24" pos:end="327:72">(<argument pos:start="327:25" pos:end="327:25"><expr pos:start="327:25" pos:end="327:25"><name pos:start="327:25" pos:end="327:25">s</name></expr></argument>, <argument pos:start="327:28" pos:end="327:34"><expr pos:start="327:28" pos:end="327:34"><name pos:start="327:28" pos:end="327:34">COND_AL</name></expr></argument>, <argument pos:start="327:37" pos:end="327:45"><expr pos:start="327:37" pos:end="327:45"><name pos:start="327:37" pos:end="327:45">ARITH_MOV</name></expr></argument>, <argument pos:start="327:48" pos:end="327:57"><expr pos:start="327:48" pos:end="327:57"><name pos:start="327:48" pos:end="327:57">TCG_REG_R8</name></expr></argument>, <argument pos:start="327:60" pos:end="327:60"><expr pos:start="327:60" pos:end="327:60"><literal type="number" pos:start="327:60" pos:end="327:60">0</literal></expr></argument>, <argument pos:start="327:63" pos:end="327:71"><expr pos:start="327:63" pos:end="327:71"><name pos:start="327:63" pos:end="327:71">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:51"><expr pos:start="329:9" pos:end="329:50"><call pos:start="329:9" pos:end="329:50"><name pos:start="329:9" pos:end="329:17">tcg_out32</name><argument_list pos:start="329:18" pos:end="329:50">(<argument pos:start="329:19" pos:end="329:19"><expr pos:start="329:19" pos:end="329:19"><name pos:start="329:19" pos:end="329:19">s</name></expr></argument>, <argument pos:start="329:22" pos:end="329:49"><expr pos:start="329:22" pos:end="329:49"><operator pos:start="329:22" pos:end="329:22">(</operator><name pos:start="329:23" pos:end="329:29">COND_AL</name> <operator pos:start="329:31" pos:end="329:32">&lt;&lt;</operator> <literal type="number" pos:start="329:34" pos:end="329:35">28</literal><operator pos:start="329:36" pos:end="329:36">)</operator> <operator pos:start="329:38" pos:end="329:38">|</operator> <literal type="number" pos:start="329:40" pos:end="329:49">0x052d8010</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="329:53" pos:end="329:79">/* str r8, [sp, #-0x10]! */</comment>

        <if_stmt pos:start="331:9" pos:end="337:9"><if pos:start="331:9" pos:end="337:9">if <condition pos:start="331:12" pos:end="331:35">(<expr pos:start="331:13" pos:end="331:34"><name pos:start="331:13" pos:end="331:20">data_reg</name> <operator pos:start="331:22" pos:end="331:23">!=</operator> <name pos:start="331:25" pos:end="331:34">TCG_REG_R2</name></expr>)</condition> <block pos:start="331:37" pos:end="337:9">{<block_content pos:start="333:13" pos:end="335:71">

            <expr_stmt pos:start="333:13" pos:end="335:71"><expr pos:start="333:13" pos:end="335:70"><call pos:start="333:13" pos:end="335:70"><name pos:start="333:13" pos:end="333:27">tcg_out_dat_reg</name><argument_list pos:start="333:28" pos:end="335:70">(<argument pos:start="333:29" pos:end="333:29"><expr pos:start="333:29" pos:end="333:29"><name pos:start="333:29" pos:end="333:29">s</name></expr></argument>, <argument pos:start="333:32" pos:end="333:38"><expr pos:start="333:32" pos:end="333:38"><name pos:start="333:32" pos:end="333:38">COND_AL</name></expr></argument>, <argument pos:start="333:41" pos:end="333:49"><expr pos:start="333:41" pos:end="333:49"><name pos:start="333:41" pos:end="333:49">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="335:29" pos:end="335:38"><expr pos:start="335:29" pos:end="335:38"><name pos:start="335:29" pos:end="335:38">TCG_REG_R2</name></expr></argument>, <argument pos:start="335:41" pos:end="335:41"><expr pos:start="335:41" pos:end="335:41"><literal type="number" pos:start="335:41" pos:end="335:41">0</literal></expr></argument>, <argument pos:start="335:44" pos:end="335:51"><expr pos:start="335:44" pos:end="335:51"><name pos:start="335:44" pos:end="335:51">data_reg</name></expr></argument>, <argument pos:start="335:54" pos:end="335:69"><expr pos:start="335:54" pos:end="335:69"><call pos:start="335:54" pos:end="335:69"><name pos:start="335:54" pos:end="335:66">SHIFT_IMM_LSL</name><argument_list pos:start="335:67" pos:end="335:69">(<argument pos:start="335:68" pos:end="335:68"><expr pos:start="335:68" pos:end="335:68"><literal type="number" pos:start="335:68" pos:end="335:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="339:9" pos:end="345:9"><if pos:start="339:9" pos:end="345:9">if <condition pos:start="339:12" pos:end="339:36">(<expr pos:start="339:13" pos:end="339:35"><name pos:start="339:13" pos:end="339:21">data_reg2</name> <operator pos:start="339:23" pos:end="339:24">!=</operator> <name pos:start="339:26" pos:end="339:35">TCG_REG_R3</name></expr>)</condition> <block pos:start="339:38" pos:end="345:9">{<block_content pos:start="341:13" pos:end="343:72">

            <expr_stmt pos:start="341:13" pos:end="343:72"><expr pos:start="341:13" pos:end="343:71"><call pos:start="341:13" pos:end="343:71"><name pos:start="341:13" pos:end="341:27">tcg_out_dat_reg</name><argument_list pos:start="341:28" pos:end="343:71">(<argument pos:start="341:29" pos:end="341:29"><expr pos:start="341:29" pos:end="341:29"><name pos:start="341:29" pos:end="341:29">s</name></expr></argument>, <argument pos:start="341:32" pos:end="341:38"><expr pos:start="341:32" pos:end="341:38"><name pos:start="341:32" pos:end="341:38">COND_AL</name></expr></argument>, <argument pos:start="341:41" pos:end="341:49"><expr pos:start="341:41" pos:end="341:49"><name pos:start="341:41" pos:end="341:49">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="343:29" pos:end="343:38"><expr pos:start="343:29" pos:end="343:38"><name pos:start="343:29" pos:end="343:38">TCG_REG_R3</name></expr></argument>, <argument pos:start="343:41" pos:end="343:41"><expr pos:start="343:41" pos:end="343:41"><literal type="number" pos:start="343:41" pos:end="343:41">0</literal></expr></argument>, <argument pos:start="343:44" pos:end="343:52"><expr pos:start="343:44" pos:end="343:52"><name pos:start="343:44" pos:end="343:52">data_reg2</name></expr></argument>, <argument pos:start="343:55" pos:end="343:70"><expr pos:start="343:55" pos:end="343:70"><call pos:start="343:55" pos:end="343:70"><name pos:start="343:55" pos:end="343:67">SHIFT_IMM_LSL</name><argument_list pos:start="343:68" pos:end="343:70">(<argument pos:start="343:69" pos:end="343:69"><expr pos:start="343:69" pos:end="343:69"><literal type="number" pos:start="343:69" pos:end="343:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="347:9" pos:end="347:14">break;</break>

    </block_content>}</block></switch>

<cpp:endif pos:start="351:1" pos:end="351:7"># <cpp:directive pos:start="351:3" pos:end="351:7">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="355:5" pos:end="360:0"><expr pos:start="355:5" pos:end="357:50"><call pos:start="355:5" pos:end="357:50"><name pos:start="355:5" pos:end="355:14">tcg_out_bl</name><argument_list pos:start="355:15" pos:end="357:50">(<argument pos:start="355:16" pos:end="355:16"><expr pos:start="355:16" pos:end="355:16"><name pos:start="355:16" pos:end="355:16">s</name></expr></argument>, <argument pos:start="355:19" pos:end="355:25"><expr pos:start="355:19" pos:end="355:25"><name pos:start="355:19" pos:end="355:25">COND_AL</name></expr></argument>, <argument pos:start="355:28" pos:end="357:49"><expr pos:start="355:28" pos:end="357:49"><operator pos:start="355:28" pos:end="355:28">(</operator><name pos:start="355:29" pos:end="355:43">tcg_target_long</name><operator pos:start="355:44" pos:end="355:44">)</operator> <name pos:start="355:46" pos:end="355:68"><name pos:start="355:46" pos:end="355:60">qemu_st_helpers</name><index pos:start="355:61" pos:end="355:68">[<expr pos:start="355:62" pos:end="355:67"><name pos:start="355:62" pos:end="355:67">s_bits</name></expr>]</index></name> <operator pos:start="355:70" pos:end="355:70">-</operator>

                    <operator pos:start="357:21" pos:end="357:21">(</operator><name pos:start="357:22" pos:end="357:36">tcg_target_long</name><operator pos:start="357:37" pos:end="357:37">)</operator> <name pos:start="357:39" pos:end="357:49"><name pos:start="357:39" pos:end="357:39">s</name><operator pos:start="357:40" pos:end="357:41">-&gt;</operator><name pos:start="357:42" pos:end="357:49">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="359:1" pos:end="359:27"># <cpp:directive pos:start="359:3" pos:end="359:4">if</cpp:directive> <expr pos:start="359:6" pos:end="359:27"><name pos:start="359:6" pos:end="359:21">TARGET_LONG_BITS</name> <operator pos:start="359:23" pos:end="359:24">==</operator> <literal type="number" pos:start="359:26" pos:end="359:27">64</literal></expr></cpp:if>

    <if_stmt pos:start="361:5" pos:end="366:0"><if pos:start="361:5" pos:end="366:0">if <condition pos:start="361:8" pos:end="361:17">(<expr pos:start="361:9" pos:end="361:16"><name pos:start="361:9" pos:end="361:11">opc</name> <operator pos:start="361:13" pos:end="361:14">==</operator> <literal type="number" pos:start="361:16" pos:end="361:16">3</literal></expr>)</condition><block type="pseudo" pos:start="363:9" pos:end="366:0"><block_content pos:start="363:9" pos:end="366:0">

        <expr_stmt pos:start="363:9" pos:end="366:0"><expr pos:start="363:9" pos:end="363:78"><call pos:start="363:9" pos:end="363:78"><name pos:start="363:9" pos:end="363:23">tcg_out_dat_imm</name><argument_list pos:start="363:24" pos:end="363:78">(<argument pos:start="363:25" pos:end="363:25"><expr pos:start="363:25" pos:end="363:25"><name pos:start="363:25" pos:end="363:25">s</name></expr></argument>, <argument pos:start="363:28" pos:end="363:34"><expr pos:start="363:28" pos:end="363:34"><name pos:start="363:28" pos:end="363:34">COND_AL</name></expr></argument>, <argument pos:start="363:37" pos:end="363:45"><expr pos:start="363:37" pos:end="363:45"><name pos:start="363:37" pos:end="363:45">ARITH_ADD</name></expr></argument>, <argument pos:start="363:48" pos:end="363:58"><expr pos:start="363:48" pos:end="363:58"><name pos:start="363:48" pos:end="363:58">TCG_REG_R13</name></expr></argument>, <argument pos:start="363:61" pos:end="363:71"><expr pos:start="363:61" pos:end="363:71"><name pos:start="363:61" pos:end="363:71">TCG_REG_R13</name></expr></argument>, <argument pos:start="363:74" pos:end="363:77"><expr pos:start="363:74" pos:end="363:77"><literal type="number" pos:start="363:74" pos:end="363:77">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="365:1" pos:end="365:7"># <cpp:directive pos:start="365:3" pos:end="365:7">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="369:5" pos:end="372:0"><expr pos:start="369:5" pos:end="369:70"><operator pos:start="369:5" pos:end="369:5">*</operator><name pos:start="369:6" pos:end="369:14">label_ptr</name> <operator pos:start="369:16" pos:end="369:17">+=</operator> <operator pos:start="369:19" pos:end="369:19">(</operator><operator pos:start="369:20" pos:end="369:20">(</operator><name pos:start="369:21" pos:end="369:24">void</name> <operator pos:start="369:26" pos:end="369:26">*</operator><operator pos:start="369:27" pos:end="369:27">)</operator> <name pos:start="369:29" pos:end="369:39"><name pos:start="369:29" pos:end="369:29">s</name><operator pos:start="369:30" pos:end="369:31">-&gt;</operator><name pos:start="369:32" pos:end="369:39">code_ptr</name></name> <operator pos:start="369:41" pos:end="369:41">-</operator> <operator pos:start="369:43" pos:end="369:43">(</operator><name pos:start="369:44" pos:end="369:47">void</name> <operator pos:start="369:49" pos:end="369:49">*</operator><operator pos:start="369:50" pos:end="369:50">)</operator> <name pos:start="369:52" pos:end="369:60">label_ptr</name> <operator pos:start="369:62" pos:end="369:62">-</operator> <literal type="number" pos:start="369:64" pos:end="369:64">8</literal><operator pos:start="369:65" pos:end="369:65">)</operator> <operator pos:start="369:67" pos:end="369:68">&gt;&gt;</operator> <literal type="number" pos:start="369:70" pos:end="369:70">2</literal></expr>;</expr_stmt>

<cpp:else pos:start="371:1" pos:end="371:5">#<cpp:directive pos:start="371:2" pos:end="371:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="371:7" pos:end="371:27">/* !CONFIG_SOFTMMU */</comment>

    <if_stmt pos:start="373:5" pos:end="401:5"><if pos:start="373:5" pos:end="401:5">if <condition pos:start="373:8" pos:end="373:19">(<expr pos:start="373:9" pos:end="373:18"><name pos:start="373:9" pos:end="373:18">GUEST_BASE</name></expr>)</condition> <block pos:start="373:21" pos:end="401:5">{<block_content pos:start="375:9" pos:end="399:9">

        <decl_stmt pos:start="375:9" pos:end="375:37"><decl pos:start="375:9" pos:end="375:36"><type pos:start="375:9" pos:end="375:16"><name pos:start="375:9" pos:end="375:16">uint32_t</name></type> <name pos:start="375:18" pos:end="375:23">offset</name> <init pos:start="375:25" pos:end="375:36">= <expr pos:start="375:27" pos:end="375:36"><name pos:start="375:27" pos:end="375:36">GUEST_BASE</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="377:9" pos:end="377:14"><decl pos:start="377:9" pos:end="377:13"><type pos:start="377:9" pos:end="377:11"><name pos:start="377:9" pos:end="377:11">int</name></type> <name pos:start="377:13" pos:end="377:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="379:9" pos:end="379:16"><decl pos:start="379:9" pos:end="379:15"><type pos:start="379:9" pos:end="379:11"><name pos:start="379:9" pos:end="379:11">int</name></type> <name pos:start="379:13" pos:end="379:15">rot</name></decl>;</decl_stmt>



        <while pos:start="383:9" pos:end="399:9">while <condition pos:start="383:15" pos:end="383:22">(<expr pos:start="383:16" pos:end="383:21"><name pos:start="383:16" pos:end="383:21">offset</name></expr>)</condition> <block pos:start="383:24" pos:end="399:9">{<block_content pos:start="385:13" pos:end="397:35">

            <expr_stmt pos:start="385:13" pos:end="385:35"><expr pos:start="385:13" pos:end="385:34"><name pos:start="385:13" pos:end="385:13">i</name> <operator pos:start="385:15" pos:end="385:15">=</operator> <call pos:start="385:17" pos:end="385:29"><name pos:start="385:17" pos:end="385:21">ctz32</name><argument_list pos:start="385:22" pos:end="385:29">(<argument pos:start="385:23" pos:end="385:28"><expr pos:start="385:23" pos:end="385:28"><name pos:start="385:23" pos:end="385:28">offset</name></expr></argument>)</argument_list></call> <operator pos:start="385:31" pos:end="385:31">&amp;</operator> <operator pos:start="385:33" pos:end="385:33">~</operator><literal type="number" pos:start="385:34" pos:end="385:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:42"><expr pos:start="387:13" pos:end="387:41"><name pos:start="387:13" pos:end="387:15">rot</name> <operator pos:start="387:17" pos:end="387:17">=</operator> <operator pos:start="387:19" pos:end="387:19">(</operator><operator pos:start="387:20" pos:end="387:20">(</operator><literal type="number" pos:start="387:21" pos:end="387:24">32</literal> <operator pos:start="387:24" pos:end="387:24">-</operator> <name pos:start="387:26" pos:end="387:26">i</name><operator pos:start="387:27" pos:end="387:27">)</operator> <operator pos:start="387:29" pos:end="387:30">&lt;&lt;</operator> <literal type="number" pos:start="387:32" pos:end="387:32">7</literal><operator pos:start="387:33" pos:end="387:33">)</operator> <operator pos:start="387:35" pos:end="387:35">&amp;</operator> <literal type="number" pos:start="387:37" pos:end="387:41">0xf00</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="391:13" pos:end="393:58"><expr pos:start="391:13" pos:end="393:57"><call pos:start="391:13" pos:end="393:57"><name pos:start="391:13" pos:end="391:27">tcg_out_dat_imm</name><argument_list pos:start="391:28" pos:end="393:57">(<argument pos:start="391:29" pos:end="391:29"><expr pos:start="391:29" pos:end="391:29"><name pos:start="391:29" pos:end="391:29">s</name></expr></argument>, <argument pos:start="391:32" pos:end="391:38"><expr pos:start="391:32" pos:end="391:38"><name pos:start="391:32" pos:end="391:38">COND_AL</name></expr></argument>, <argument pos:start="391:41" pos:end="391:49"><expr pos:start="391:41" pos:end="391:49"><name pos:start="391:41" pos:end="391:49">ARITH_ADD</name></expr></argument>, <argument pos:start="391:52" pos:end="391:61"><expr pos:start="391:52" pos:end="391:61"><name pos:start="391:52" pos:end="391:61">TCG_REG_R1</name></expr></argument>, <argument pos:start="391:64" pos:end="391:71"><expr pos:start="391:64" pos:end="391:71"><name pos:start="391:64" pos:end="391:71">addr_reg</name></expr></argument>,

                            <argument pos:start="393:29" pos:end="393:56"><expr pos:start="393:29" pos:end="393:56"><operator pos:start="393:29" pos:end="393:29">(</operator><operator pos:start="393:30" pos:end="393:30">(</operator><name pos:start="393:31" pos:end="393:36">offset</name> <operator pos:start="393:38" pos:end="393:39">&gt;&gt;</operator> <name pos:start="393:41" pos:end="393:41">i</name><operator pos:start="393:42" pos:end="393:42">)</operator> <operator pos:start="393:44" pos:end="393:44">&amp;</operator> <literal type="number" pos:start="393:46" pos:end="393:49">0xff</literal><operator pos:start="393:50" pos:end="393:50">)</operator> <operator pos:start="393:52" pos:end="393:52">|</operator> <name pos:start="393:54" pos:end="393:56">rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:34"><expr pos:start="395:13" pos:end="395:33"><name pos:start="395:13" pos:end="395:20">addr_reg</name> <operator pos:start="395:22" pos:end="395:22">=</operator> <name pos:start="395:24" pos:end="395:33">TCG_REG_R1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:35"><expr pos:start="397:13" pos:end="397:34"><name pos:start="397:13" pos:end="397:18">offset</name> <operator pos:start="397:20" pos:end="397:21">&amp;=</operator> <operator pos:start="397:23" pos:end="397:23">~</operator><operator pos:start="397:24" pos:end="397:24">(</operator><literal type="number" pos:start="397:25" pos:end="397:28">0xff</literal> <operator pos:start="397:30" pos:end="397:31">&lt;&lt;</operator> <name pos:start="397:33" pos:end="397:33">i</name><operator pos:start="397:34" pos:end="397:34">)</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="403:5" pos:end="474:0">switch <condition pos:start="403:12" pos:end="403:16">(<expr pos:start="403:13" pos:end="403:15"><name pos:start="403:13" pos:end="403:15">opc</name></expr>)</condition> <block pos:start="403:18" pos:end="474:0">{<block_content pos:start="405:5" pos:end="469:14">

    <case pos:start="405:5" pos:end="405:11">case <expr pos:start="405:10" pos:end="405:10"><literal type="number" pos:start="405:10" pos:end="405:10">0</literal></expr>:</case>

        <expr_stmt pos:start="407:9" pos:end="407:58"><expr pos:start="407:9" pos:end="407:57"><call pos:start="407:9" pos:end="407:57"><name pos:start="407:9" pos:end="407:22">tcg_out_st8_12</name><argument_list pos:start="407:23" pos:end="407:57">(<argument pos:start="407:24" pos:end="407:24"><expr pos:start="407:24" pos:end="407:24"><name pos:start="407:24" pos:end="407:24">s</name></expr></argument>, <argument pos:start="407:27" pos:end="407:33"><expr pos:start="407:27" pos:end="407:33"><name pos:start="407:27" pos:end="407:33">COND_AL</name></expr></argument>, <argument pos:start="407:36" pos:end="407:43"><expr pos:start="407:36" pos:end="407:43"><name pos:start="407:36" pos:end="407:43">data_reg</name></expr></argument>, <argument pos:start="407:46" pos:end="407:53"><expr pos:start="407:46" pos:end="407:53"><name pos:start="407:46" pos:end="407:53">addr_reg</name></expr></argument>, <argument pos:start="407:56" pos:end="407:56"><expr pos:start="407:56" pos:end="407:56"><literal type="number" pos:start="407:56" pos:end="407:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="409:9" pos:end="409:14">break;</break>

    <case pos:start="411:5" pos:end="411:11">case <expr pos:start="411:10" pos:end="411:10"><literal type="number" pos:start="411:10" pos:end="411:10">1</literal></expr>:</case>

        <if_stmt pos:start="413:9" pos:end="423:9"><if pos:start="413:9" pos:end="419:9">if <condition pos:start="413:12" pos:end="413:18">(<expr pos:start="413:13" pos:end="413:17"><name pos:start="413:13" pos:end="413:17">bswap</name></expr>)</condition> <block pos:start="413:20" pos:end="419:9">{<block_content pos:start="415:13" pos:end="417:64">

            <expr_stmt pos:start="415:13" pos:end="415:62"><expr pos:start="415:13" pos:end="415:61"><call pos:start="415:13" pos:end="415:61"><name pos:start="415:13" pos:end="415:27">tcg_out_bswap16</name><argument_list pos:start="415:28" pos:end="415:61">(<argument pos:start="415:29" pos:end="415:29"><expr pos:start="415:29" pos:end="415:29"><name pos:start="415:29" pos:end="415:29">s</name></expr></argument>, <argument pos:start="415:32" pos:end="415:38"><expr pos:start="415:32" pos:end="415:38"><name pos:start="415:32" pos:end="415:38">COND_AL</name></expr></argument>, <argument pos:start="415:41" pos:end="415:50"><expr pos:start="415:41" pos:end="415:50"><name pos:start="415:41" pos:end="415:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="415:53" pos:end="415:60"><expr pos:start="415:53" pos:end="415:60"><name pos:start="415:53" pos:end="415:60">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="417:13" pos:end="417:64"><expr pos:start="417:13" pos:end="417:63"><call pos:start="417:13" pos:end="417:63"><name pos:start="417:13" pos:end="417:26">tcg_out_st16_8</name><argument_list pos:start="417:27" pos:end="417:63">(<argument pos:start="417:28" pos:end="417:28"><expr pos:start="417:28" pos:end="417:28"><name pos:start="417:28" pos:end="417:28">s</name></expr></argument>, <argument pos:start="417:31" pos:end="417:37"><expr pos:start="417:31" pos:end="417:37"><name pos:start="417:31" pos:end="417:37">COND_AL</name></expr></argument>, <argument pos:start="417:40" pos:end="417:49"><expr pos:start="417:40" pos:end="417:49"><name pos:start="417:40" pos:end="417:49">TCG_REG_R0</name></expr></argument>, <argument pos:start="417:52" pos:end="417:59"><expr pos:start="417:52" pos:end="417:59"><name pos:start="417:52" pos:end="417:59">addr_reg</name></expr></argument>, <argument pos:start="417:62" pos:end="417:62"><expr pos:start="417:62" pos:end="417:62"><literal type="number" pos:start="417:62" pos:end="417:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="419:11" pos:end="423:9">else <block pos:start="419:16" pos:end="423:9">{<block_content pos:start="421:13" pos:end="421:62">

            <expr_stmt pos:start="421:13" pos:end="421:62"><expr pos:start="421:13" pos:end="421:61"><call pos:start="421:13" pos:end="421:61"><name pos:start="421:13" pos:end="421:26">tcg_out_st16_8</name><argument_list pos:start="421:27" pos:end="421:61">(<argument pos:start="421:28" pos:end="421:28"><expr pos:start="421:28" pos:end="421:28"><name pos:start="421:28" pos:end="421:28">s</name></expr></argument>, <argument pos:start="421:31" pos:end="421:37"><expr pos:start="421:31" pos:end="421:37"><name pos:start="421:31" pos:end="421:37">COND_AL</name></expr></argument>, <argument pos:start="421:40" pos:end="421:47"><expr pos:start="421:40" pos:end="421:47"><name pos:start="421:40" pos:end="421:47">data_reg</name></expr></argument>, <argument pos:start="421:50" pos:end="421:57"><expr pos:start="421:50" pos:end="421:57"><name pos:start="421:50" pos:end="421:57">addr_reg</name></expr></argument>, <argument pos:start="421:60" pos:end="421:60"><expr pos:start="421:60" pos:end="421:60"><literal type="number" pos:start="421:60" pos:end="421:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="425:9" pos:end="425:14">break;</break>

    <case pos:start="427:5" pos:end="427:11">case <expr pos:start="427:10" pos:end="427:10"><literal type="number" pos:start="427:10" pos:end="427:10">2</literal></expr>:</case>

    <default pos:start="429:5" pos:end="429:12">default:</default>

        <if_stmt pos:start="431:9" pos:end="441:9"><if pos:start="431:9" pos:end="437:9">if <condition pos:start="431:12" pos:end="431:18">(<expr pos:start="431:13" pos:end="431:17"><name pos:start="431:13" pos:end="431:17">bswap</name></expr>)</condition> <block pos:start="431:20" pos:end="437:9">{<block_content pos:start="433:13" pos:end="435:65">

            <expr_stmt pos:start="433:13" pos:end="433:62"><expr pos:start="433:13" pos:end="433:61"><call pos:start="433:13" pos:end="433:61"><name pos:start="433:13" pos:end="433:27">tcg_out_bswap32</name><argument_list pos:start="433:28" pos:end="433:61">(<argument pos:start="433:29" pos:end="433:29"><expr pos:start="433:29" pos:end="433:29"><name pos:start="433:29" pos:end="433:29">s</name></expr></argument>, <argument pos:start="433:32" pos:end="433:38"><expr pos:start="433:32" pos:end="433:38"><name pos:start="433:32" pos:end="433:38">COND_AL</name></expr></argument>, <argument pos:start="433:41" pos:end="433:50"><expr pos:start="433:41" pos:end="433:50"><name pos:start="433:41" pos:end="433:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="433:53" pos:end="433:60"><expr pos:start="433:53" pos:end="433:60"><name pos:start="433:53" pos:end="433:60">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="435:65"><expr pos:start="435:13" pos:end="435:64"><call pos:start="435:13" pos:end="435:64"><name pos:start="435:13" pos:end="435:27">tcg_out_st32_12</name><argument_list pos:start="435:28" pos:end="435:64">(<argument pos:start="435:29" pos:end="435:29"><expr pos:start="435:29" pos:end="435:29"><name pos:start="435:29" pos:end="435:29">s</name></expr></argument>, <argument pos:start="435:32" pos:end="435:38"><expr pos:start="435:32" pos:end="435:38"><name pos:start="435:32" pos:end="435:38">COND_AL</name></expr></argument>, <argument pos:start="435:41" pos:end="435:50"><expr pos:start="435:41" pos:end="435:50"><name pos:start="435:41" pos:end="435:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="435:53" pos:end="435:60"><expr pos:start="435:53" pos:end="435:60"><name pos:start="435:53" pos:end="435:60">addr_reg</name></expr></argument>, <argument pos:start="435:63" pos:end="435:63"><expr pos:start="435:63" pos:end="435:63"><literal type="number" pos:start="435:63" pos:end="435:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="437:11" pos:end="441:9">else <block pos:start="437:16" pos:end="441:9">{<block_content pos:start="439:13" pos:end="439:63">

            <expr_stmt pos:start="439:13" pos:end="439:63"><expr pos:start="439:13" pos:end="439:62"><call pos:start="439:13" pos:end="439:62"><name pos:start="439:13" pos:end="439:27">tcg_out_st32_12</name><argument_list pos:start="439:28" pos:end="439:62">(<argument pos:start="439:29" pos:end="439:29"><expr pos:start="439:29" pos:end="439:29"><name pos:start="439:29" pos:end="439:29">s</name></expr></argument>, <argument pos:start="439:32" pos:end="439:38"><expr pos:start="439:32" pos:end="439:38"><name pos:start="439:32" pos:end="439:38">COND_AL</name></expr></argument>, <argument pos:start="439:41" pos:end="439:48"><expr pos:start="439:41" pos:end="439:48"><name pos:start="439:41" pos:end="439:48">data_reg</name></expr></argument>, <argument pos:start="439:51" pos:end="439:58"><expr pos:start="439:51" pos:end="439:58"><name pos:start="439:51" pos:end="439:58">addr_reg</name></expr></argument>, <argument pos:start="439:61" pos:end="439:61"><expr pos:start="439:61" pos:end="439:61"><literal type="number" pos:start="439:61" pos:end="439:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="443:9" pos:end="443:14">break;</break>

    <case pos:start="445:5" pos:end="445:11">case <expr pos:start="445:10" pos:end="445:10"><literal type="number" pos:start="445:10" pos:end="445:10">3</literal></expr>:</case>

        <comment type="block" pos:start="447:9" pos:end="449:62">/* TODO: use block store -

         * check that data_reg2 &gt; data_reg or the other way */</comment>

        <if_stmt pos:start="451:9" pos:end="467:9"><if pos:start="451:9" pos:end="461:9">if <condition pos:start="451:12" pos:end="451:18">(<expr pos:start="451:13" pos:end="451:17"><name pos:start="451:13" pos:end="451:17">bswap</name></expr>)</condition> <block pos:start="451:20" pos:end="461:9">{<block_content pos:start="453:13" pos:end="459:65">

            <expr_stmt pos:start="453:13" pos:end="453:63"><expr pos:start="453:13" pos:end="453:62"><call pos:start="453:13" pos:end="453:62"><name pos:start="453:13" pos:end="453:27">tcg_out_bswap32</name><argument_list pos:start="453:28" pos:end="453:62">(<argument pos:start="453:29" pos:end="453:29"><expr pos:start="453:29" pos:end="453:29"><name pos:start="453:29" pos:end="453:29">s</name></expr></argument>, <argument pos:start="453:32" pos:end="453:38"><expr pos:start="453:32" pos:end="453:38"><name pos:start="453:32" pos:end="453:38">COND_AL</name></expr></argument>, <argument pos:start="453:41" pos:end="453:50"><expr pos:start="453:41" pos:end="453:50"><name pos:start="453:41" pos:end="453:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="453:53" pos:end="453:61"><expr pos:start="453:53" pos:end="453:61"><name pos:start="453:53" pos:end="453:61">data_reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:65"><expr pos:start="455:13" pos:end="455:64"><call pos:start="455:13" pos:end="455:64"><name pos:start="455:13" pos:end="455:27">tcg_out_st32_12</name><argument_list pos:start="455:28" pos:end="455:64">(<argument pos:start="455:29" pos:end="455:29"><expr pos:start="455:29" pos:end="455:29"><name pos:start="455:29" pos:end="455:29">s</name></expr></argument>, <argument pos:start="455:32" pos:end="455:38"><expr pos:start="455:32" pos:end="455:38"><name pos:start="455:32" pos:end="455:38">COND_AL</name></expr></argument>, <argument pos:start="455:41" pos:end="455:50"><expr pos:start="455:41" pos:end="455:50"><name pos:start="455:41" pos:end="455:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="455:53" pos:end="455:60"><expr pos:start="455:53" pos:end="455:60"><name pos:start="455:53" pos:end="455:60">addr_reg</name></expr></argument>, <argument pos:start="455:63" pos:end="455:63"><expr pos:start="455:63" pos:end="455:63"><literal type="number" pos:start="455:63" pos:end="455:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:62"><expr pos:start="457:13" pos:end="457:61"><call pos:start="457:13" pos:end="457:61"><name pos:start="457:13" pos:end="457:27">tcg_out_bswap32</name><argument_list pos:start="457:28" pos:end="457:61">(<argument pos:start="457:29" pos:end="457:29"><expr pos:start="457:29" pos:end="457:29"><name pos:start="457:29" pos:end="457:29">s</name></expr></argument>, <argument pos:start="457:32" pos:end="457:38"><expr pos:start="457:32" pos:end="457:38"><name pos:start="457:32" pos:end="457:38">COND_AL</name></expr></argument>, <argument pos:start="457:41" pos:end="457:50"><expr pos:start="457:41" pos:end="457:50"><name pos:start="457:41" pos:end="457:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="457:53" pos:end="457:60"><expr pos:start="457:53" pos:end="457:60"><name pos:start="457:53" pos:end="457:60">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:65"><expr pos:start="459:13" pos:end="459:64"><call pos:start="459:13" pos:end="459:64"><name pos:start="459:13" pos:end="459:27">tcg_out_st32_12</name><argument_list pos:start="459:28" pos:end="459:64">(<argument pos:start="459:29" pos:end="459:29"><expr pos:start="459:29" pos:end="459:29"><name pos:start="459:29" pos:end="459:29">s</name></expr></argument>, <argument pos:start="459:32" pos:end="459:38"><expr pos:start="459:32" pos:end="459:38"><name pos:start="459:32" pos:end="459:38">COND_AL</name></expr></argument>, <argument pos:start="459:41" pos:end="459:50"><expr pos:start="459:41" pos:end="459:50"><name pos:start="459:41" pos:end="459:50">TCG_REG_R0</name></expr></argument>, <argument pos:start="459:53" pos:end="459:60"><expr pos:start="459:53" pos:end="459:60"><name pos:start="459:53" pos:end="459:60">addr_reg</name></expr></argument>, <argument pos:start="459:63" pos:end="459:63"><expr pos:start="459:63" pos:end="459:63"><literal type="number" pos:start="459:63" pos:end="459:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="461:11" pos:end="467:9">else <block pos:start="461:16" pos:end="467:9">{<block_content pos:start="463:13" pos:end="465:64">

            <expr_stmt pos:start="463:13" pos:end="463:63"><expr pos:start="463:13" pos:end="463:62"><call pos:start="463:13" pos:end="463:62"><name pos:start="463:13" pos:end="463:27">tcg_out_st32_12</name><argument_list pos:start="463:28" pos:end="463:62">(<argument pos:start="463:29" pos:end="463:29"><expr pos:start="463:29" pos:end="463:29"><name pos:start="463:29" pos:end="463:29">s</name></expr></argument>, <argument pos:start="463:32" pos:end="463:38"><expr pos:start="463:32" pos:end="463:38"><name pos:start="463:32" pos:end="463:38">COND_AL</name></expr></argument>, <argument pos:start="463:41" pos:end="463:48"><expr pos:start="463:41" pos:end="463:48"><name pos:start="463:41" pos:end="463:48">data_reg</name></expr></argument>, <argument pos:start="463:51" pos:end="463:58"><expr pos:start="463:51" pos:end="463:58"><name pos:start="463:51" pos:end="463:58">addr_reg</name></expr></argument>, <argument pos:start="463:61" pos:end="463:61"><expr pos:start="463:61" pos:end="463:61"><literal type="number" pos:start="463:61" pos:end="463:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="465:13" pos:end="465:64"><expr pos:start="465:13" pos:end="465:63"><call pos:start="465:13" pos:end="465:63"><name pos:start="465:13" pos:end="465:27">tcg_out_st32_12</name><argument_list pos:start="465:28" pos:end="465:63">(<argument pos:start="465:29" pos:end="465:29"><expr pos:start="465:29" pos:end="465:29"><name pos:start="465:29" pos:end="465:29">s</name></expr></argument>, <argument pos:start="465:32" pos:end="465:38"><expr pos:start="465:32" pos:end="465:38"><name pos:start="465:32" pos:end="465:38">COND_AL</name></expr></argument>, <argument pos:start="465:41" pos:end="465:49"><expr pos:start="465:41" pos:end="465:49"><name pos:start="465:41" pos:end="465:49">data_reg2</name></expr></argument>, <argument pos:start="465:52" pos:end="465:59"><expr pos:start="465:52" pos:end="465:59"><name pos:start="465:52" pos:end="465:59">addr_reg</name></expr></argument>, <argument pos:start="465:62" pos:end="465:62"><expr pos:start="465:62" pos:end="465:62"><literal type="number" pos:start="465:62" pos:end="465:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="469:9" pos:end="469:14">break;</break>

    </block_content>}</block></switch>

<cpp:endif pos:start="473:1" pos:end="473:6">#<cpp:directive pos:start="473:2" pos:end="473:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
