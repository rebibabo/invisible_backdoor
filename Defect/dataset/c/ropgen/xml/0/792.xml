<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/792.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">cpu_io_recompile</name><parameter_list pos:start="1:22" pos:end="1:55">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:35"><name pos:start="1:23" pos:end="1:30">CPUState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">cpu</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:46">uintptr_t</name></type> <name pos:start="1:48" pos:end="1:54">retaddr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="7:5" pos:end="147:29">

<cpp:if pos:start="5:1" pos:end="5:47">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:47"><call pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:24">(<argument pos:start="5:13" pos:end="5:23"><expr pos:start="5:13" pos:end="5:23"><name pos:start="5:13" pos:end="5:23">TARGET_MIPS</name></expr></argument>)</argument_list></call> <operator pos:start="5:26" pos:end="5:27">||</operator> <call pos:start="5:29" pos:end="5:47"><name pos:start="5:29" pos:end="5:35">defined</name><argument_list pos:start="5:36" pos:end="5:47">(<argument pos:start="5:37" pos:end="5:46"><expr pos:start="5:37" pos:end="5:46"><name pos:start="5:37" pos:end="5:46">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">CPUArchState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">env</name> <init pos:start="7:23" pos:end="7:36">= <expr pos:start="7:25" pos:end="7:36"><name pos:start="7:25" pos:end="7:36"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="9:1" pos:end="9:6">#<cpp:directive pos:start="9:2" pos:end="9:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">TranslationBlock</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:14">n</name></decl>, <decl pos:start="13:17" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:17" pos:end="13:22">cflags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:19">pc</name></decl>, <decl pos:start="15:22" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:22" pos:end="15:28">cs_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:18">flags</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:14"><expr pos:start="21:5" pos:end="21:13"><call pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">tb_lock</name><argument_list pos:start="21:12" pos:end="21:13">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:6">tb</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <call pos:start="23:10" pos:end="23:28"><name pos:start="23:10" pos:end="23:19">tb_find_pc</name><argument_list pos:start="23:20" pos:end="23:28">(<argument pos:start="23:21" pos:end="23:27"><expr pos:start="23:21" pos:end="23:27"><name pos:start="23:21" pos:end="23:27">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:12">(<expr pos:start="25:9" pos:end="25:11"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:11">tb</name></expr>)</condition> <block pos:start="25:14" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:35">

        <expr_stmt pos:start="27:9" pos:end="29:35"><expr pos:start="27:9" pos:end="29:34"><call pos:start="27:9" pos:end="29:34"><name pos:start="27:9" pos:end="27:17">cpu_abort</name><argument_list pos:start="27:18" pos:end="29:34">(<argument pos:start="27:19" pos:end="27:21"><expr pos:start="27:19" pos:end="27:21"><name pos:start="27:19" pos:end="27:21">cpu</name></expr></argument>, <argument pos:start="27:24" pos:end="27:70"><expr pos:start="27:24" pos:end="27:70"><literal type="string" pos:start="27:24" pos:end="27:70">"cpu_io_recompile: could not find TB for pc=%p"</literal></expr></argument>,

                  <argument pos:start="29:19" pos:end="29:33"><expr pos:start="29:19" pos:end="29:33"><operator pos:start="29:19" pos:end="29:19">(</operator><name pos:start="29:20" pos:end="29:23">void</name> <operator pos:start="29:25" pos:end="29:25">*</operator><operator pos:start="29:26" pos:end="29:26">)</operator><name pos:start="29:27" pos:end="29:33">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:5">n</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <name pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:11">cpu</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:24">icount_decr</name><operator pos:start="33:25" pos:end="33:25">.</operator><name pos:start="33:26" pos:end="33:28">u16</name><operator pos:start="33:29" pos:end="33:29">.</operator><name pos:start="33:30" pos:end="33:32">low</name></name> <operator pos:start="33:34" pos:end="33:34">+</operator> <name pos:start="33:36" pos:end="33:45"><name pos:start="33:36" pos:end="33:37">tb</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:45">icount</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:48"><expr pos:start="35:5" pos:end="35:47"><call pos:start="35:5" pos:end="35:47"><name pos:start="35:5" pos:end="35:29">cpu_restore_state_from_tb</name><argument_list pos:start="35:30" pos:end="35:47">(<argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:33">cpu</name></expr></argument>, <argument pos:start="35:36" pos:end="35:37"><expr pos:start="35:36" pos:end="35:37"><name pos:start="35:36" pos:end="35:37">tb</name></expr></argument>, <argument pos:start="35:40" pos:end="35:46"><expr pos:start="35:40" pos:end="35:46"><name pos:start="35:40" pos:end="35:46">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="37:5" pos:end="39:20">/* Calculate how many instructions had been executed before the fault

       occurred.  */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:37"><expr pos:start="41:5" pos:end="41:36"><name pos:start="41:5" pos:end="41:5">n</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <name pos:start="41:9" pos:end="41:9">n</name> <operator pos:start="41:11" pos:end="41:11">-</operator> <name pos:start="41:13" pos:end="41:36"><name pos:start="41:13" pos:end="41:15">cpu</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:28">icount_decr</name><operator pos:start="41:29" pos:end="41:29">.</operator><name pos:start="41:30" pos:end="41:32">u16</name><operator pos:start="41:33" pos:end="41:33">.</operator><name pos:start="41:34" pos:end="41:36">low</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:52">/* Generate a new TB ending on the I/O insn.  */</comment>

    <expr_stmt pos:start="45:5" pos:end="56:0"><expr pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:5">n</name><operator pos:start="45:6" pos:end="45:7">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="47:5" pos:end="53:18">/* On MIPS and SH, delay slot instructions can only be restarted if

       they were already the first instruction in the TB.  If this is not

       the first instruction in a TB then re-execute the preceding

       branch.  */</comment>

<cpp:if pos:start="55:1" pos:end="55:24">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:24"><call pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:11">defined</name><argument_list pos:start="55:12" pos:end="55:24">(<argument pos:start="55:13" pos:end="55:23"><expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:23">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="57:5" pos:end="68:0"><if pos:start="57:5" pos:end="68:0">if <condition pos:start="57:8" pos:end="57:55">(<expr pos:start="57:9" pos:end="57:54"><operator pos:start="57:9" pos:end="57:9">(</operator><name pos:start="57:10" pos:end="57:20"><name pos:start="57:10" pos:end="57:12">env</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:20">hflags</name></name> <operator pos:start="57:22" pos:end="57:22">&amp;</operator> <name pos:start="57:24" pos:end="57:39">MIPS_HFLAG_BMASK</name><operator pos:start="57:40" pos:end="57:40">)</operator> <operator pos:start="57:42" pos:end="57:43">!=</operator> <literal type="number" pos:start="57:45" pos:end="57:45">0</literal> <operator pos:start="57:47" pos:end="57:48">&amp;&amp;</operator> <name pos:start="57:50" pos:end="57:50">n</name> <operator pos:start="57:52" pos:end="57:52">&gt;</operator> <literal type="number" pos:start="57:54" pos:end="57:54">1</literal></expr>)</condition> <block pos:start="57:57" pos:end="68:0">{<block_content pos:start="59:9" pos:end="63:41">

        <expr_stmt pos:start="59:9" pos:end="59:68"><expr pos:start="59:9" pos:end="59:67"><name pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:11">env</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:22">active_tc</name><operator pos:start="59:23" pos:end="59:23">.</operator><name pos:start="59:24" pos:end="59:25">PC</name></name> <operator pos:start="59:27" pos:end="59:28">-=</operator> <operator pos:start="59:30" pos:end="59:30">(</operator><ternary pos:start="59:31" pos:end="59:66"><condition pos:start="59:31" pos:end="59:60"><expr pos:start="59:31" pos:end="59:58"><name pos:start="59:31" pos:end="59:41"><name pos:start="59:31" pos:end="59:33">env</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:41">hflags</name></name> <operator pos:start="59:43" pos:end="59:43">&amp;</operator> <name pos:start="59:45" pos:end="59:58">MIPS_HFLAG_B16</name></expr> ?</condition><then pos:start="59:62" pos:end="59:62"> <expr pos:start="59:62" pos:end="59:62"><literal type="number" pos:start="59:62" pos:end="59:62">2</literal></expr> </then><else pos:start="59:64" pos:end="59:66">: <expr pos:start="59:66" pos:end="59:66"><literal type="number" pos:start="59:66" pos:end="59:66">4</literal></expr></else></ternary><operator pos:start="59:67" pos:end="59:67">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:35"><expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:11">cpu</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:24">icount_decr</name><operator pos:start="61:25" pos:end="61:25">.</operator><name pos:start="61:26" pos:end="61:28">u16</name><operator pos:start="61:29" pos:end="61:29">.</operator><name pos:start="61:30" pos:end="61:32">low</name></name><operator pos:start="61:33" pos:end="61:34">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:41"><expr pos:start="63:9" pos:end="63:40"><name pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:11">env</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:19">hflags</name></name> <operator pos:start="63:21" pos:end="63:22">&amp;=</operator> <operator pos:start="63:24" pos:end="63:24">~</operator><name pos:start="63:25" pos:end="63:40">MIPS_HFLAG_BMASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="67:1" pos:end="67:25">#<cpp:directive pos:start="67:2" pos:end="67:5">elif</cpp:directive> <expr pos:start="67:7" pos:end="67:25"><call pos:start="67:7" pos:end="67:25"><name pos:start="67:7" pos:end="67:13">defined</name><argument_list pos:start="67:14" pos:end="67:25">(<argument pos:start="67:15" pos:end="67:24"><expr pos:start="67:15" pos:end="67:24"><name pos:start="67:15" pos:end="67:24">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <if_stmt pos:start="69:5" pos:end="82:0"><if pos:start="69:5" pos:end="82:0">if <condition pos:start="69:8" pos:end="71:21">(<expr pos:start="69:9" pos:end="71:20"><operator pos:start="69:9" pos:end="69:9">(</operator><name pos:start="69:10" pos:end="69:19"><name pos:start="69:10" pos:end="69:12">env</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:19">flags</name></name> <operator pos:start="69:21" pos:end="69:21">&amp;</operator> <operator pos:start="69:23" pos:end="69:23">(</operator><operator pos:start="69:24" pos:end="69:24">(</operator><name pos:start="69:25" pos:end="69:34">DELAY_SLOT</name> <operator pos:start="69:36" pos:end="69:36">|</operator> <name pos:start="69:38" pos:end="69:59">DELAY_SLOT_CONDITIONAL</name><operator pos:start="69:60" pos:end="69:60">)</operator><operator pos:start="69:61" pos:end="69:61">)</operator><operator pos:start="69:62" pos:end="69:62">)</operator> <operator pos:start="69:64" pos:end="69:65">!=</operator> <literal type="number" pos:start="69:67" pos:end="69:67">0</literal>

            <operator pos:start="71:13" pos:end="71:14">&amp;&amp;</operator> <name pos:start="71:16" pos:end="71:16">n</name> <operator pos:start="71:18" pos:end="71:18">&gt;</operator> <literal type="number" pos:start="71:20" pos:end="71:20">1</literal></expr>)</condition> <block pos:start="71:23" pos:end="82:0">{<block_content pos:start="73:9" pos:end="77:61">

        <expr_stmt pos:start="73:9" pos:end="73:21"><expr pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:11">env</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:15">pc</name></name> <operator pos:start="73:17" pos:end="73:18">-=</operator> <literal type="number" pos:start="73:20" pos:end="73:20">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:32"><name pos:start="75:9" pos:end="75:11">cpu</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:24">icount_decr</name><operator pos:start="75:25" pos:end="75:25">.</operator><name pos:start="75:26" pos:end="75:28">u16</name><operator pos:start="75:29" pos:end="75:29">.</operator><name pos:start="75:30" pos:end="75:32">low</name></name><operator pos:start="75:33" pos:end="75:34">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:61"><expr pos:start="77:9" pos:end="77:60"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:11">env</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:18">flags</name></name> <operator pos:start="77:20" pos:end="77:21">&amp;=</operator> <operator pos:start="77:23" pos:end="77:23">~</operator><operator pos:start="77:24" pos:end="77:24">(</operator><name pos:start="77:25" pos:end="77:34">DELAY_SLOT</name> <operator pos:start="77:36" pos:end="77:36">|</operator> <name pos:start="77:38" pos:end="77:59">DELAY_SLOT_CONDITIONAL</name><operator pos:start="77:60" pos:end="77:60">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="83:5" pos:end="83:36">/* This should never happen.  */</comment>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:26">(<expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:9">n</name> <operator pos:start="85:11" pos:end="85:11">&gt;</operator> <name pos:start="85:13" pos:end="85:25">CF_COUNT_MASK</name></expr>)</condition> <block pos:start="85:28" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:54">

        <expr_stmt pos:start="87:9" pos:end="87:54"><expr pos:start="87:9" pos:end="87:53"><call pos:start="87:9" pos:end="87:53"><name pos:start="87:9" pos:end="87:17">cpu_abort</name><argument_list pos:start="87:18" pos:end="87:53">(<argument pos:start="87:19" pos:end="87:21"><expr pos:start="87:19" pos:end="87:21"><name pos:start="87:19" pos:end="87:21">cpu</name></expr></argument>, <argument pos:start="87:24" pos:end="87:52"><expr pos:start="87:24" pos:end="87:52"><literal type="string" pos:start="87:24" pos:end="87:52">"TB too big during recompile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:28"><expr pos:start="93:5" pos:end="93:27"><name pos:start="93:5" pos:end="93:10">cflags</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <name pos:start="93:14" pos:end="93:14">n</name> <operator pos:start="93:16" pos:end="93:16">|</operator> <name pos:start="93:18" pos:end="93:27">CF_LAST_IO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:28"><expr pos:start="95:5" pos:end="95:27"><name pos:start="95:5" pos:end="95:10">cflags</name> <operator pos:start="95:12" pos:end="95:13">|=</operator> <call pos:start="95:15" pos:end="95:27"><name pos:start="95:15" pos:end="95:25">curr_cflags</name><argument_list pos:start="95:26" pos:end="95:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:16"><expr pos:start="97:5" pos:end="97:15"><name pos:start="97:5" pos:end="97:6">pc</name> <operator pos:start="97:8" pos:end="97:8">=</operator> <name pos:start="97:10" pos:end="97:15"><name pos:start="97:10" pos:end="97:11">tb</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:15">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:26"><expr pos:start="99:5" pos:end="99:25"><name pos:start="99:5" pos:end="99:11">cs_base</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <name pos:start="99:15" pos:end="99:25"><name pos:start="99:15" pos:end="99:16">tb</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:25">cs_base</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:22"><expr pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:9">flags</name> <operator pos:start="101:11" pos:end="101:11">=</operator> <name pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:14">tb</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:21">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:31"><expr pos:start="103:5" pos:end="103:30"><call pos:start="103:5" pos:end="103:30"><name pos:start="103:5" pos:end="103:22">tb_phys_invalidate</name><argument_list pos:start="103:23" pos:end="103:30">(<argument pos:start="103:24" pos:end="103:25"><expr pos:start="103:24" pos:end="103:25"><name pos:start="103:24" pos:end="103:25">tb</name></expr></argument>, <argument pos:start="103:28" pos:end="103:29"><expr pos:start="103:28" pos:end="103:29"><operator pos:start="103:28" pos:end="103:28">-</operator><literal type="number" pos:start="103:29" pos:end="103:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="119:5"><if pos:start="105:5" pos:end="119:5">if <condition pos:start="105:8" pos:end="105:32">(<expr pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:10">tb</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:18">cflags</name></name> <operator pos:start="105:20" pos:end="105:20">&amp;</operator> <name pos:start="105:22" pos:end="105:31">CF_NOCACHE</name></expr>)</condition> <block pos:start="105:34" pos:end="119:5">{<block_content pos:start="107:9" pos:end="117:20">

        <if_stmt pos:start="107:9" pos:end="115:9"><if pos:start="107:9" pos:end="115:9">if <condition pos:start="107:12" pos:end="107:24">(<expr pos:start="107:13" pos:end="107:23"><name pos:start="107:13" pos:end="107:23"><name pos:start="107:13" pos:end="107:14">tb</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:23">orig_tb</name></name></expr>)</condition> <block pos:start="107:26" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:48">

            <comment type="block" pos:start="109:13" pos:end="111:36">/* Invalidate original TB if this TB was generated in

             * cpu_exec_nocache() */</comment>

            <expr_stmt pos:start="113:13" pos:end="113:48"><expr pos:start="113:13" pos:end="113:47"><call pos:start="113:13" pos:end="113:47"><name pos:start="113:13" pos:end="113:30">tb_phys_invalidate</name><argument_list pos:start="113:31" pos:end="113:47">(<argument pos:start="113:32" pos:end="113:42"><expr pos:start="113:32" pos:end="113:42"><name pos:start="113:32" pos:end="113:42"><name pos:start="113:32" pos:end="113:33">tb</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:42">orig_tb</name></name></expr></argument>, <argument pos:start="113:45" pos:end="113:46"><expr pos:start="113:45" pos:end="113:46"><operator pos:start="113:45" pos:end="113:45">-</operator><literal type="number" pos:start="113:46" pos:end="113:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:20"><expr pos:start="117:9" pos:end="117:19"><call pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:15">tb_free</name><argument_list pos:start="117:16" pos:end="117:19">(<argument pos:start="117:17" pos:end="117:18"><expr pos:start="117:17" pos:end="117:18"><name pos:start="117:17" pos:end="117:18">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="121:5" pos:end="123:73">/* FIXME: In theory this could raise an exception.  In practice

       we have already translated the block once so it's probably ok.  */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:49"><expr pos:start="125:5" pos:end="125:48"><call pos:start="125:5" pos:end="125:48"><name pos:start="125:5" pos:end="125:15">tb_gen_code</name><argument_list pos:start="125:16" pos:end="125:48">(<argument pos:start="125:17" pos:end="125:19"><expr pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">cpu</name></expr></argument>, <argument pos:start="125:22" pos:end="125:23"><expr pos:start="125:22" pos:end="125:23"><name pos:start="125:22" pos:end="125:23">pc</name></expr></argument>, <argument pos:start="125:26" pos:end="125:32"><expr pos:start="125:26" pos:end="125:32"><name pos:start="125:26" pos:end="125:32">cs_base</name></expr></argument>, <argument pos:start="125:35" pos:end="125:39"><expr pos:start="125:35" pos:end="125:39"><name pos:start="125:35" pos:end="125:39">flags</name></expr></argument>, <argument pos:start="125:42" pos:end="125:47"><expr pos:start="125:42" pos:end="125:47"><name pos:start="125:42" pos:end="125:47">cflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="145:7">/* TODO: If env-&gt;pc != tb-&gt;pc (i.e. the faulting instruction was not

     * the first in the TB) then we end up generating a whole new TB and

     *  repeating the fault, which is horribly inefficient.

     *  Better would be to execute just this insn uncached, or generate a

     *  second new TB.

     *

     * cpu_loop_exit_noexc will longjmp back to cpu_exec where the

     * tb_lock gets reset.

     */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:29"><expr pos:start="147:5" pos:end="147:28"><call pos:start="147:5" pos:end="147:28"><name pos:start="147:5" pos:end="147:23">cpu_loop_exit_noexc</name><argument_list pos:start="147:24" pos:end="147:28">(<argument pos:start="147:25" pos:end="147:27"><expr pos:start="147:25" pos:end="147:27"><name pos:start="147:25" pos:end="147:27">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
