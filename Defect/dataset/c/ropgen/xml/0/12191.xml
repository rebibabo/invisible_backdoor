<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12191.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">h261_decode_gob_header</name><parameter_list pos:start="1:34" pos:end="1:49">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:45">H261Context</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:20">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:18">MpegEncContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier><specifier pos:start="7:21" pos:end="7:25">const</specifier></type> <name pos:start="7:27" pos:end="7:27">s</name> <init pos:start="7:29" pos:end="7:35">= <expr pos:start="7:31" pos:end="7:35"><operator pos:start="7:31" pos:end="7:31">&amp;</operator><name pos:start="7:32" pos:end="7:35"><name pos:start="7:32" pos:end="7:32">h</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:35">s</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="27:5"><if pos:start="11:5" pos:end="27:5">if <condition pos:start="11:8" pos:end="11:35">(<expr pos:start="11:9" pos:end="11:34"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:34"><name pos:start="11:10" pos:end="11:10">h</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:34">gob_start_code_skipped</name></name></expr>)</condition> <block pos:start="11:37" pos:end="27:5">{<block_content pos:start="15:9" pos:end="25:30">

        <comment type="block" pos:start="13:9" pos:end="13:38">/* Check for GOB Start Code */</comment>

        <expr_stmt pos:start="15:9" pos:end="15:36"><expr pos:start="15:9" pos:end="15:35"><name pos:start="15:9" pos:end="15:11">val</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:35"><name pos:start="15:15" pos:end="15:23">show_bits</name><argument_list pos:start="15:24" pos:end="15:35">(<argument pos:start="15:25" pos:end="15:30"><expr pos:start="15:25" pos:end="15:30"><operator pos:start="15:25" pos:end="15:25">&amp;</operator><name pos:start="15:26" pos:end="15:30"><name pos:start="15:26" pos:end="15:26">s</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:30">gb</name></name></expr></argument>, <argument pos:start="15:33" pos:end="15:34"><expr pos:start="15:33" pos:end="15:34"><literal type="number" pos:start="15:33" pos:end="15:34">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="19:22"><if pos:start="17:9" pos:end="19:22">if <condition pos:start="17:12" pos:end="17:16">(<expr pos:start="17:13" pos:end="17:15"><name pos:start="17:13" pos:end="17:15">val</name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:22"><block_content pos:start="19:13" pos:end="19:22">

            <return pos:start="19:13" pos:end="19:22">return <expr pos:start="19:20" pos:end="19:21"><operator pos:start="19:20" pos:end="19:20">-</operator><literal type="number" pos:start="19:21" pos:end="19:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="23:9" pos:end="23:28">/* We have a GBSC */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><call pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:17">skip_bits</name><argument_list pos:start="25:18" pos:end="25:29">(<argument pos:start="25:19" pos:end="25:24"><expr pos:start="25:19" pos:end="25:24"><operator pos:start="25:19" pos:end="25:19">&amp;</operator><name pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:20">s</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:24">gb</name></name></expr></argument>, <argument pos:start="25:27" pos:end="25:28"><expr pos:start="25:27" pos:end="25:28"><literal type="number" pos:start="25:27" pos:end="25:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:34"><expr pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:5">h</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:29">gob_start_code_skipped</name></name> <operator pos:start="31:31" pos:end="31:31">=</operator> <literal type="number" pos:start="31:33" pos:end="31:33">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:5">h</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:17">gob_number</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <call pos:start="35:21" pos:end="35:39"><name pos:start="35:21" pos:end="35:28">get_bits</name><argument_list pos:start="35:29" pos:end="35:39">(<argument pos:start="35:30" pos:end="35:35"><expr pos:start="35:30" pos:end="35:35"><operator pos:start="35:30" pos:end="35:30">&amp;</operator><name pos:start="35:31" pos:end="35:35"><name pos:start="35:31" pos:end="35:31">s</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:35">gb</name></name></expr></argument>, <argument pos:start="35:38" pos:end="35:38"><expr pos:start="35:38" pos:end="35:38"><literal type="number" pos:start="35:38" pos:end="35:38">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="35:42" pos:end="35:49">/* GN */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:40"><expr pos:start="37:5" pos:end="37:39"><name pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:13">qscale</name></name>     <operator pos:start="37:19" pos:end="37:19">=</operator> <call pos:start="37:21" pos:end="37:39"><name pos:start="37:21" pos:end="37:28">get_bits</name><argument_list pos:start="37:29" pos:end="37:39">(<argument pos:start="37:30" pos:end="37:35"><expr pos:start="37:30" pos:end="37:35"><operator pos:start="37:30" pos:end="37:30">&amp;</operator><name pos:start="37:31" pos:end="37:35"><name pos:start="37:31" pos:end="37:31">s</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:35">gb</name></name></expr></argument>, <argument pos:start="37:38" pos:end="37:38"><expr pos:start="37:38" pos:end="37:38"><literal type="number" pos:start="37:38" pos:end="37:38">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="37:42" pos:end="37:53">/* GQUANT */</comment>



    <comment type="block" pos:start="41:5" pos:end="41:38">/* Check if gob_number is valid */</comment>

    <if_stmt pos:start="43:5" pos:end="57:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:27">(<expr pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:20">mb_height</name></name> <operator pos:start="43:22" pos:end="43:23">==</operator> <literal type="number" pos:start="43:25" pos:end="43:26">18</literal></expr>)</condition> <block pos:start="43:29" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:22"> <comment type="line" pos:start="43:31" pos:end="43:36">// CIF</comment>

        <if_stmt pos:start="45:9" pos:end="47:22"><if pos:start="45:9" pos:end="47:22">if <condition pos:start="45:12" pos:end="45:57">(<expr pos:start="45:13" pos:end="45:56"><operator pos:start="45:13" pos:end="45:13">(</operator><name pos:start="45:14" pos:end="45:26"><name pos:start="45:14" pos:end="45:14">h</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:26">gob_number</name></name> <operator pos:start="45:28" pos:end="45:29">&lt;=</operator> <literal type="number" pos:start="45:31" pos:end="45:31">0</literal><operator pos:start="45:32" pos:end="45:32">)</operator> <operator pos:start="45:34" pos:end="45:35">||</operator> <operator pos:start="45:37" pos:end="45:37">(</operator><name pos:start="45:38" pos:end="45:50"><name pos:start="45:38" pos:end="45:38">h</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:50">gob_number</name></name> <operator pos:start="45:52" pos:end="45:52">&gt;</operator> <literal type="number" pos:start="45:54" pos:end="45:55">12</literal><operator pos:start="45:56" pos:end="45:56">)</operator></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:22"><block_content pos:start="47:13" pos:end="47:22">

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="57:5">else <block pos:start="49:12" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:22"> <comment type="line" pos:start="49:14" pos:end="49:20">// QCIF</comment>

        <if_stmt pos:start="51:9" pos:end="55:22"><if pos:start="51:9" pos:end="55:22">if <condition pos:start="51:12" pos:end="53:33">(<expr pos:start="51:13" pos:end="53:32"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:26"><name pos:start="51:14" pos:end="51:14">h</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:26">gob_number</name></name> <operator pos:start="51:28" pos:end="51:29">!=</operator> <literal type="number" pos:start="51:31" pos:end="51:31">1</literal><operator pos:start="51:32" pos:end="51:32">)</operator> <operator pos:start="51:34" pos:end="51:35">&amp;&amp;</operator> <operator pos:start="51:37" pos:end="51:37">(</operator><name pos:start="51:38" pos:end="51:50"><name pos:start="51:38" pos:end="51:38">h</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:50">gob_number</name></name> <operator pos:start="51:52" pos:end="51:53">!=</operator> <literal type="number" pos:start="51:55" pos:end="51:55">3</literal><operator pos:start="51:56" pos:end="51:56">)</operator> <operator pos:start="51:58" pos:end="51:59">&amp;&amp;</operator>

            <operator pos:start="53:13" pos:end="53:13">(</operator><name pos:start="53:14" pos:end="53:26"><name pos:start="53:14" pos:end="53:14">h</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:26">gob_number</name></name> <operator pos:start="53:28" pos:end="53:29">!=</operator> <literal type="number" pos:start="53:31" pos:end="53:31">5</literal><operator pos:start="53:32" pos:end="53:32">)</operator></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:22"><block_content pos:start="55:13" pos:end="55:22">

            <return pos:start="55:13" pos:end="55:22">return <expr pos:start="55:20" pos:end="55:21"><operator pos:start="55:20" pos:end="55:20">-</operator><literal type="number" pos:start="55:21" pos:end="55:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:13">/* GEI */</comment>

    <while pos:start="63:5" pos:end="65:29">while <condition pos:start="63:11" pos:end="63:34">(<expr pos:start="63:12" pos:end="63:33"><call pos:start="63:12" pos:end="63:28"><name pos:start="63:12" pos:end="63:20">get_bits1</name><argument_list pos:start="63:21" pos:end="63:28">(<argument pos:start="63:22" pos:end="63:27"><expr pos:start="63:22" pos:end="63:27"><operator pos:start="63:22" pos:end="63:22">&amp;</operator><name pos:start="63:23" pos:end="63:27"><name pos:start="63:23" pos:end="63:23">s</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:27">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="63:30" pos:end="63:31">!=</operator> <literal type="number" pos:start="63:33" pos:end="63:33">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:29"><block_content pos:start="65:9" pos:end="65:29">

        <expr_stmt pos:start="65:9" pos:end="65:29"><expr pos:start="65:9" pos:end="65:28"><call pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:17">skip_bits</name><argument_list pos:start="65:18" pos:end="65:28">(<argument pos:start="65:19" pos:end="65:24"><expr pos:start="65:19" pos:end="65:24"><operator pos:start="65:19" pos:end="65:19">&amp;</operator><name pos:start="65:20" pos:end="65:24"><name pos:start="65:20" pos:end="65:20">s</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:24">gb</name></name></expr></argument>, <argument pos:start="65:27" pos:end="65:27"><expr pos:start="65:27" pos:end="65:27"><literal type="number" pos:start="65:27" pos:end="65:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="77:5">if <condition pos:start="69:8" pos:end="69:23">(<expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:17">qscale</name></name> <operator pos:start="69:19" pos:end="69:20">==</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>)</condition> <block pos:start="69:25" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:22">

        <expr_stmt pos:start="71:9" pos:end="71:73"><expr pos:start="71:9" pos:end="71:72"><call pos:start="71:9" pos:end="71:72"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:72">(<argument pos:start="71:16" pos:end="71:23"><expr pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:16">s</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:23">avctx</name></name></expr></argument>, <argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:40" pos:end="71:71"><expr pos:start="71:40" pos:end="71:71"><literal type="string" pos:start="71:40" pos:end="71:71">"qscale has forbidden 0 value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="75:22"><if pos:start="73:9" pos:end="75:22">if <condition pos:start="73:12" pos:end="73:76">(<expr pos:start="73:13" pos:end="73:75"><name pos:start="73:13" pos:end="73:37"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:20">avctx</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:37">err_recognition</name></name> <operator pos:start="73:39" pos:end="73:39">&amp;</operator> <operator pos:start="73:41" pos:end="73:41">(</operator><name pos:start="73:42" pos:end="73:56">AV_EF_BITSTREAM</name> <operator pos:start="73:58" pos:end="73:58">|</operator> <name pos:start="73:60" pos:end="73:74">AV_EF_COMPLIANT</name><operator pos:start="73:75" pos:end="73:75">)</operator></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:22"><block_content pos:start="75:13" pos:end="75:22">

            <return pos:start="75:13" pos:end="75:22">return <expr pos:start="75:20" pos:end="75:21"><operator pos:start="75:20" pos:end="75:20">-</operator><literal type="number" pos:start="75:21" pos:end="75:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="81:5" pos:end="87:21">/* For the first transmitted macroblock in a GOB, MBA is the absolute

     * address. For subsequent macroblocks, MBA is the difference between

     * the absolute addresses of the macroblock and the last transmitted

     * macroblock. */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:23"><expr pos:start="89:5" pos:end="89:22"><name pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:5">h</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:18">current_mba</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:23"><expr pos:start="91:5" pos:end="91:22"><name pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:5">h</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:15">mba_diff</name></name>    <operator pos:start="91:20" pos:end="91:20">=</operator> <literal type="number" pos:start="91:22" pos:end="91:22">0</literal></expr>;</expr_stmt>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
