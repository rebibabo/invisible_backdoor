<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20737.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">test_dummy_createcmdl</name><parameter_list pos:start="1:34" pos:end="1:39">(<parameter pos:start="1:35" pos:end="1:38"><decl pos:start="1:35" pos:end="1:38"><type pos:start="1:35" pos:end="1:38"><name pos:start="1:35" pos:end="1:38">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="47:20">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">QemuOpts</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">DummyObject</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:21">dobj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="15:64"><decl pos:start="11:5" pos:end="15:63"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:22">params</name> <init pos:start="11:24" pos:end="15:63">= <expr pos:start="11:26" pos:end="15:63"><name pos:start="11:26" pos:end="11:35">TYPE_DUMMY</name> \

                         <literal type="string" pos:start="13:26" pos:end="13:36">",id=dev0,"</literal> \

                         <literal type="string" pos:start="15:26" pos:end="15:63">"bv=yes,sv=Hiss hiss hiss,av=platypus"</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:37"><expr pos:start="19:5" pos:end="19:36"><call pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:17">qemu_add_opts</name><argument_list pos:start="19:18" pos:end="19:36">(<argument pos:start="19:19" pos:end="19:35"><expr pos:start="19:19" pos:end="19:35"><operator pos:start="19:19" pos:end="19:19">&amp;</operator><name pos:start="19:20" pos:end="19:35">qemu_object_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:66"><expr pos:start="21:5" pos:end="21:65"><name pos:start="21:5" pos:end="21:8">opts</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:65"><name pos:start="21:12" pos:end="21:26">qemu_opts_parse</name><argument_list pos:start="21:27" pos:end="21:65">(<argument pos:start="21:28" pos:end="21:44"><expr pos:start="21:28" pos:end="21:44"><operator pos:start="21:28" pos:end="21:28">&amp;</operator><name pos:start="21:29" pos:end="21:44">qemu_object_opts</name></expr></argument>, <argument pos:start="21:47" pos:end="21:52"><expr pos:start="21:47" pos:end="21:52"><name pos:start="21:47" pos:end="21:52">params</name></expr></argument>, <argument pos:start="21:55" pos:end="21:58"><expr pos:start="21:55" pos:end="21:58"><name pos:start="21:55" pos:end="21:58">true</name></expr></argument>, <argument pos:start="21:61" pos:end="21:64"><expr pos:start="21:61" pos:end="21:64"><operator pos:start="21:61" pos:end="21:61">&amp;</operator><name pos:start="21:62" pos:end="21:64">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><call pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:12">g_assert</name><argument_list pos:start="23:13" pos:end="23:25">(<argument pos:start="23:14" pos:end="23:24"><expr pos:start="23:14" pos:end="23:24"><name pos:start="23:14" pos:end="23:16">err</name> <operator pos:start="23:18" pos:end="23:19">==</operator> <name pos:start="23:21" pos:end="23:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><call pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:12">g_assert</name><argument_list pos:start="25:13" pos:end="25:18">(<argument pos:start="25:14" pos:end="25:17"><expr pos:start="25:14" pos:end="25:17"><name pos:start="25:14" pos:end="25:17">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:61"><expr pos:start="29:5" pos:end="29:60"><name pos:start="29:5" pos:end="29:8">dobj</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:60"><name pos:start="29:12" pos:end="29:23">DUMMY_OBJECT</name><argument_list pos:start="29:24" pos:end="29:60">(<argument pos:start="29:25" pos:end="29:59"><expr pos:start="29:25" pos:end="29:59"><call pos:start="29:25" pos:end="29:59"><name pos:start="29:25" pos:end="29:47">user_creatable_add_opts</name><argument_list pos:start="29:48" pos:end="29:59">(<argument pos:start="29:49" pos:end="29:52"><expr pos:start="29:49" pos:end="29:52"><name pos:start="29:49" pos:end="29:52">opts</name></expr></argument>, <argument pos:start="29:55" pos:end="29:58"><expr pos:start="29:55" pos:end="29:58"><operator pos:start="29:55" pos:end="29:55">&amp;</operator><name pos:start="29:56" pos:end="29:58">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><call pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="31:25">(<argument pos:start="31:14" pos:end="31:24"><expr pos:start="31:14" pos:end="31:24"><name pos:start="31:14" pos:end="31:16">err</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <name pos:start="31:21" pos:end="31:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><call pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:12">g_assert</name><argument_list pos:start="33:13" pos:end="33:18">(<argument pos:start="33:14" pos:end="33:17"><expr pos:start="33:14" pos:end="33:17"><name pos:start="33:14" pos:end="33:17">dobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:52"><expr pos:start="35:5" pos:end="35:51"><call pos:start="35:5" pos:end="35:51"><name pos:start="35:5" pos:end="35:19">g_assert_cmpstr</name><argument_list pos:start="35:20" pos:end="35:51">(<argument pos:start="35:21" pos:end="35:28"><expr pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:24">dobj</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:28">sv</name></name></expr></argument>, <argument pos:start="35:31" pos:end="35:32"><expr pos:start="35:31" pos:end="35:32"><operator pos:start="35:31" pos:end="35:32">==</operator></expr></argument>, <argument pos:start="35:35" pos:end="35:50"><expr pos:start="35:35" pos:end="35:50"><literal type="string" pos:start="35:35" pos:end="35:50">"Hiss hiss hiss"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><call pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:12">g_assert</name><argument_list pos:start="37:13" pos:end="37:30">(<argument pos:start="37:14" pos:end="37:29"><expr pos:start="37:14" pos:end="37:29"><name pos:start="37:14" pos:end="37:21"><name pos:start="37:14" pos:end="37:17">dobj</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:21">bv</name></name> <operator pos:start="37:23" pos:end="37:24">==</operator> <name pos:start="37:26" pos:end="37:29">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><call pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:12">g_assert</name><argument_list pos:start="39:13" pos:end="39:40">(<argument pos:start="39:14" pos:end="39:39"><expr pos:start="39:14" pos:end="39:39"><name pos:start="39:14" pos:end="39:21"><name pos:start="39:14" pos:end="39:17">dobj</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:21">av</name></name> <operator pos:start="39:23" pos:end="39:24">==</operator> <name pos:start="39:26" pos:end="39:39">DUMMY_PLATYPUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><call pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:22">user_creatable_del</name><argument_list pos:start="43:23" pos:end="43:36">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><literal type="string" pos:start="43:24" pos:end="43:29">"dev0"</literal></expr></argument>, <argument pos:start="43:32" pos:end="43:35"><expr pos:start="43:32" pos:end="43:35"><operator pos:start="43:32" pos:end="43:32">&amp;</operator><name pos:start="43:33" pos:end="43:35">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:26"><expr pos:start="45:5" pos:end="45:25"><call pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:12">g_assert</name><argument_list pos:start="45:13" pos:end="45:25">(<argument pos:start="45:14" pos:end="45:24"><expr pos:start="45:14" pos:end="45:24"><name pos:start="45:14" pos:end="45:16">err</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <name pos:start="45:21" pos:end="45:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><call pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:14">error_free</name><argument_list pos:start="47:15" pos:end="47:19">(<argument pos:start="47:16" pos:end="47:18"><expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="75:7">/*

     * cmdline-parsing via qemu_opts_parse() results in a QemuOpts entry

     * corresponding to the Object's ID to be added to the QemuOptsList

     * for objects. To avoid having this entry conflict with future

     * Objects using the same ID (which can happen in cases where

     * qemu_opts_parse() is used to parse the object params, such as

     * with hmp_object_add() at the time of this comment), we need to

     * check for this in user_creatable_del() and remove the QemuOpts if

     * it is present.

     *

     * FIXME: add an assert to verify that the QemuOpts is cleaned up

     * once the corresponding cleanup code is added.

     */</comment>

</block_content>}</block></function>
</unit>
