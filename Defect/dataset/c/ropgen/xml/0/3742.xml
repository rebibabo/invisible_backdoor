<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3742.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">sipr_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:61">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:63"><decl pos:start="1:53" pos:end="1:63"><type pos:start="1:53" pos:end="1:63"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:63">datap</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:43">data_size</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:60"><decl pos:start="3:46" pos:end="3:60"><type pos:start="3:46" pos:end="3:60"><name pos:start="3:46" pos:end="3:53">AVPacket</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:60">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:41">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">SiprContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">ctx</name> <init pos:start="7:22" pos:end="7:39">= <expr pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:28">avctx</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name><init pos:start="9:23" pos:end="9:34">=<expr pos:start="9:24" pos:end="9:34"><name pos:start="9:24" pos:end="9:34"><name pos:start="9:24" pos:end="9:28">avpkt</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:34">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:18">SiprParameters</name></type> <name pos:start="11:20" pos:end="11:23">parm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:54"><decl pos:start="13:5" pos:end="13:53"><type pos:start="13:5" pos:end="13:25"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:23">SiprModeParam</name> <modifier pos:start="13:25" pos:end="13:25">*</modifier></type><name pos:start="13:26" pos:end="13:33">mode_par</name> <init pos:start="13:35" pos:end="13:53">= <expr pos:start="13:37" pos:end="13:53"><operator pos:start="13:37" pos:end="13:37">&amp;</operator><name pos:start="13:38" pos:end="13:53"><name pos:start="13:38" pos:end="13:42">modes</name><index pos:start="13:43" pos:end="13:53">[<expr pos:start="13:44" pos:end="13:52"><name pos:start="13:44" pos:end="13:52"><name pos:start="13:44" pos:end="13:46">ctx</name><operator pos:start="13:47" pos:end="13:48">-&gt;</operator><name pos:start="13:49" pos:end="13:52">mode</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">float</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:15">data</name> <init pos:start="17:17" pos:end="17:23">= <expr pos:start="17:19" pos:end="17:23"><name pos:start="17:19" pos:end="17:23">datap</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:73"><decl pos:start="19:5" pos:end="19:72"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:21">subframe_size</name> <init pos:start="19:23" pos:end="19:72">= <expr pos:start="19:25" pos:end="19:72"><ternary pos:start="19:25" pos:end="19:72"><condition pos:start="19:25" pos:end="19:47"><expr pos:start="19:25" pos:end="19:45"><name pos:start="19:25" pos:end="19:33"><name pos:start="19:25" pos:end="19:27">ctx</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:33">mode</name></name> <operator pos:start="19:35" pos:end="19:36">==</operator> <name pos:start="19:38" pos:end="19:45">MODE_16k</name></expr> ?</condition><then pos:start="19:49" pos:end="19:59"> <expr pos:start="19:49" pos:end="19:59"><name pos:start="19:49" pos:end="19:59">L_SUBFR_16k</name></expr> </then><else pos:start="19:61" pos:end="19:72">: <expr pos:start="19:63" pos:end="19:72"><name pos:start="19:63" pos:end="19:72">SUBFR_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:7">ctx</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:14">avctx</name></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:22">avctx</name></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="41:5"><if pos:start="27:5" pos:end="41:5">if <condition pos:start="27:8" pos:end="27:54">(<expr pos:start="27:9" pos:end="27:53"><name pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:13">avpkt</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:19">size</name></name> <operator pos:start="27:21" pos:end="27:21">&lt;</operator> <operator pos:start="27:23" pos:end="27:23">(</operator><name pos:start="27:24" pos:end="27:47"><name pos:start="27:24" pos:end="27:31">mode_par</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:47">bits_per_frame</name></name> <operator pos:start="27:49" pos:end="27:50">&gt;&gt;</operator> <literal type="number" pos:start="27:52" pos:end="27:52">3</literal><operator pos:start="27:53" pos:end="27:53">)</operator></expr>)</condition> <block pos:start="27:56" pos:end="41:5">{<block_content pos:start="29:9" pos:end="39:18">

        <expr_stmt pos:start="29:9" pos:end="33:28"><expr pos:start="29:9" pos:end="33:27"><call pos:start="29:9" pos:end="33:27"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="33:27">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="31:16" pos:end="31:70"><expr pos:start="31:16" pos:end="31:70"><literal type="string" pos:start="31:16" pos:end="31:70">"Error processing packet: packet size (%d) too small\n"</literal></expr></argument>,

               <argument pos:start="33:16" pos:end="33:26"><expr pos:start="33:16" pos:end="33:26"><name pos:start="33:16" pos:end="33:26"><name pos:start="33:16" pos:end="33:20">avpkt</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:26">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><operator pos:start="37:9" pos:end="37:9">*</operator><name pos:start="37:10" pos:end="37:18">data_size</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="57:5"><if pos:start="43:5" pos:end="57:5">if <condition pos:start="43:8" pos:end="43:78">(<expr pos:start="43:9" pos:end="43:77"><operator pos:start="43:9" pos:end="43:9">*</operator><name pos:start="43:10" pos:end="43:18">data_size</name> <operator pos:start="43:20" pos:end="43:20">&lt;</operator> <name pos:start="43:22" pos:end="43:34">subframe_size</name> <operator pos:start="43:36" pos:end="43:36">*</operator> <name pos:start="43:38" pos:end="43:61"><name pos:start="43:38" pos:end="43:45">mode_par</name><operator pos:start="43:46" pos:end="43:47">-&gt;</operator><name pos:start="43:48" pos:end="43:61">subframe_count</name></name> <operator pos:start="43:63" pos:end="43:63">*</operator> <sizeof pos:start="43:65" pos:end="43:77">sizeof<argument_list pos:start="43:71" pos:end="43:77">(<argument pos:start="43:72" pos:end="43:76"><expr pos:start="43:72" pos:end="43:76"><name pos:start="43:72" pos:end="43:76">float</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="43:80" pos:end="57:5">{<block_content pos:start="45:9" pos:end="55:18">

        <expr_stmt pos:start="45:9" pos:end="49:27"><expr pos:start="45:9" pos:end="49:26"><call pos:start="45:9" pos:end="49:26"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="49:26">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">avctx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="47:16" pos:end="47:72"><expr pos:start="47:16" pos:end="47:72"><literal type="string" pos:start="47:16" pos:end="47:72">"Error processing packet: output buffer (%d) too small\n"</literal></expr></argument>,

               <argument pos:start="49:16" pos:end="49:25"><expr pos:start="49:16" pos:end="49:25"><operator pos:start="49:16" pos:end="49:16">*</operator><name pos:start="49:17" pos:end="49:25">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:23"><expr pos:start="53:9" pos:end="53:22"><operator pos:start="53:9" pos:end="53:9">*</operator><name pos:start="53:10" pos:end="53:18">data_size</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:18">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:54"><expr pos:start="61:5" pos:end="61:53"><call pos:start="61:5" pos:end="61:53"><name pos:start="61:5" pos:end="61:17">init_get_bits</name><argument_list pos:start="61:18" pos:end="61:53">(<argument pos:start="61:19" pos:end="61:21"><expr pos:start="61:19" pos:end="61:21"><operator pos:start="61:19" pos:end="61:19">&amp;</operator><name pos:start="61:20" pos:end="61:21">gb</name></expr></argument>, <argument pos:start="61:24" pos:end="61:26"><expr pos:start="61:24" pos:end="61:26"><name pos:start="61:24" pos:end="61:26">buf</name></expr></argument>, <argument pos:start="61:29" pos:end="61:52"><expr pos:start="61:29" pos:end="61:52"><name pos:start="61:29" pos:end="61:52"><name pos:start="61:29" pos:end="61:36">mode_par</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:52">bits_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="65:5" pos:end="83:5">for <control pos:start="65:9" pos:end="65:53">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:48"><expr pos:start="65:17" pos:end="65:47"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <name pos:start="65:21" pos:end="65:47"><name pos:start="65:21" pos:end="65:28">mode_par</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:47">frames_per_packet</name></name></expr>;</condition> <incr pos:start="65:50" pos:end="65:52"><expr pos:start="65:50" pos:end="65:52"><name pos:start="65:50" pos:end="65:50">i</name><operator pos:start="65:51" pos:end="65:52">++</operator></expr></incr>)</control> <block pos:start="65:55" pos:end="83:5">{<block_content pos:start="67:9" pos:end="81:57">

        <expr_stmt pos:start="67:9" pos:end="67:48"><expr pos:start="67:9" pos:end="67:47"><call pos:start="67:9" pos:end="67:47"><name pos:start="67:9" pos:end="67:25">decode_parameters</name><argument_list pos:start="67:26" pos:end="67:47">(<argument pos:start="67:27" pos:end="67:31"><expr pos:start="67:27" pos:end="67:31"><operator pos:start="67:27" pos:end="67:27">&amp;</operator><name pos:start="67:28" pos:end="67:31">parm</name></expr></argument>, <argument pos:start="67:34" pos:end="67:36"><expr pos:start="67:34" pos:end="67:36"><operator pos:start="67:34" pos:end="67:34">&amp;</operator><name pos:start="67:35" pos:end="67:36">gb</name></expr></argument>, <argument pos:start="67:39" pos:end="67:46"><expr pos:start="67:39" pos:end="67:46"><name pos:start="67:39" pos:end="67:46">mode_par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="77:43"><if pos:start="71:9" pos:end="73:55">if <condition pos:start="71:12" pos:end="71:34">(<expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:15">ctx</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:21">mode</name></name> <operator pos:start="71:23" pos:end="71:24">==</operator> <name pos:start="71:26" pos:end="71:33">MODE_16k</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:55"><block_content pos:start="73:13" pos:end="73:55">

            <expr_stmt pos:start="73:13" pos:end="73:55"><expr pos:start="73:13" pos:end="73:54"><call pos:start="73:13" pos:end="73:54"><name pos:start="73:13" pos:end="73:36">ff_sipr_decode_frame_16k</name><argument_list pos:start="73:37" pos:end="73:54">(<argument pos:start="73:38" pos:end="73:40"><expr pos:start="73:38" pos:end="73:40"><name pos:start="73:38" pos:end="73:40">ctx</name></expr></argument>, <argument pos:start="73:43" pos:end="73:47"><expr pos:start="73:43" pos:end="73:47"><operator pos:start="73:43" pos:end="73:43">&amp;</operator><name pos:start="73:44" pos:end="73:47">parm</name></expr></argument>, <argument pos:start="73:50" pos:end="73:53"><expr pos:start="73:50" pos:end="73:53"><name pos:start="73:50" pos:end="73:53">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="75:9" pos:end="77:43">else<block type="pseudo" pos:start="77:13" pos:end="77:43"><block_content pos:start="77:13" pos:end="77:43">

            <expr_stmt pos:start="77:13" pos:end="77:43"><expr pos:start="77:13" pos:end="77:42"><call pos:start="77:13" pos:end="77:42"><name pos:start="77:13" pos:end="77:24">decode_frame</name><argument_list pos:start="77:25" pos:end="77:42">(<argument pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><name pos:start="77:26" pos:end="77:28">ctx</name></expr></argument>, <argument pos:start="77:31" pos:end="77:35"><expr pos:start="77:31" pos:end="77:35"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:35">parm</name></expr></argument>, <argument pos:start="77:38" pos:end="77:41"><expr pos:start="77:38" pos:end="77:41"><name pos:start="77:38" pos:end="77:41">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:57"><expr pos:start="81:9" pos:end="81:56"><name pos:start="81:9" pos:end="81:12">data</name> <operator pos:start="81:14" pos:end="81:15">+=</operator> <name pos:start="81:17" pos:end="81:29">subframe_size</name> <operator pos:start="81:31" pos:end="81:31">*</operator> <name pos:start="81:33" pos:end="81:56"><name pos:start="81:33" pos:end="81:40">mode_par</name><operator pos:start="81:41" pos:end="81:42">-&gt;</operator><name pos:start="81:43" pos:end="81:56">subframe_count</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="87:5" pos:end="89:49"><expr pos:start="87:5" pos:end="89:48"><operator pos:start="87:5" pos:end="87:5">*</operator><name pos:start="87:6" pos:end="87:14">data_size</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <name pos:start="87:18" pos:end="87:44"><name pos:start="87:18" pos:end="87:25">mode_par</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:44">frames_per_packet</name></name> <operator pos:start="87:46" pos:end="87:46">*</operator> <name pos:start="87:48" pos:end="87:60">subframe_size</name> <operator pos:start="87:62" pos:end="87:62">*</operator>

        <name pos:start="89:9" pos:end="89:32"><name pos:start="89:9" pos:end="89:16">mode_par</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:32">subframe_count</name></name> <operator pos:start="89:34" pos:end="89:34">*</operator> <sizeof pos:start="89:36" pos:end="89:48">sizeof<argument_list pos:start="89:42" pos:end="89:48">(<argument pos:start="89:43" pos:end="89:47"><expr pos:start="89:43" pos:end="89:47"><name pos:start="89:43" pos:end="89:47">float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="93:5" pos:end="93:41">return <expr pos:start="93:12" pos:end="93:40"><name pos:start="93:12" pos:end="93:35"><name pos:start="93:12" pos:end="93:19">mode_par</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:35">bits_per_frame</name></name> <operator pos:start="93:37" pos:end="93:38">&gt;&gt;</operator> <literal type="number" pos:start="93:40" pos:end="93:40">3</literal></expr>;</return>

</block_content>}</block></function>
</unit>
