<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15084.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">kvm_init</name><parameter_list pos:start="1:13" pos:end="1:26">(<parameter pos:start="1:14" pos:end="1:25"><decl pos:start="1:14" pos:end="1:25"><type pos:start="1:14" pos:end="1:16"><name pos:start="1:14" pos:end="1:16">int</name></type> <name pos:start="1:18" pos:end="1:25">smp_cpus</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="209:1">{<block_content pos:start="5:5" pos:end="207:15">

    <decl_stmt pos:start="5:5" pos:end="9:55"><decl pos:start="5:5" pos:end="9:54"><type pos:start="5:5" pos:end="5:21"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name></type> <name pos:start="5:23" pos:end="5:36"><name pos:start="5:23" pos:end="5:34">upgrade_note</name><index pos:start="5:35" pos:end="5:36">[]</index></name> <init pos:start="5:38" pos:end="9:54">=

        <expr pos:start="7:9" pos:end="9:54"><literal type="string" pos:start="7:9" pos:end="7:71">"Please upgrade to at least kernel 2.6.29 or recent kvm-kmod\n"</literal>

        <literal type="string" pos:start="9:9" pos:end="9:54">"(see http://sourceforge.net/projects/kvm).\n"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">KVMState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:21">(<expr pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:16">smp_cpus</name> <operator pos:start="19:18" pos:end="19:18">&gt;</operator> <literal type="number" pos:start="19:20" pos:end="19:20">1</literal></expr>)</condition> <block pos:start="19:23" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:23">

        <expr_stmt pos:start="21:9" pos:end="21:62"><expr pos:start="21:9" pos:end="21:61"><call pos:start="21:9" pos:end="21:61"><name pos:start="21:9" pos:end="21:15">fprintf</name><argument_list pos:start="21:16" pos:end="21:61">(<argument pos:start="21:17" pos:end="21:22"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:22">stderr</name></expr></argument>, <argument pos:start="21:25" pos:end="21:60"><expr pos:start="21:25" pos:end="21:60"><literal type="string" pos:start="21:25" pos:end="21:60">"No SMP KVM support, use '-smp 1'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:23">return <expr pos:start="23:16" pos:end="23:22"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="34:0"><expr pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:5">s</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <call pos:start="29:9" pos:end="29:38"><name pos:start="29:9" pos:end="29:20">qemu_mallocz</name><argument_list pos:start="29:21" pos:end="29:38">(<argument pos:start="29:22" pos:end="29:37"><expr pos:start="29:22" pos:end="29:37"><sizeof pos:start="29:22" pos:end="29:37">sizeof<argument_list pos:start="29:28" pos:end="29:37">(<argument pos:start="29:29" pos:end="29:36"><expr pos:start="29:29" pos:end="29:36"><name pos:start="29:29" pos:end="29:36">KVMState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="33:1" pos:end="33:30">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:30">KVM_CAP_SET_GUEST_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:38"><call pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:14">TAILQ_INIT</name><argument_list pos:start="35:15" pos:end="35:38">(<argument pos:start="35:16" pos:end="35:37"><expr pos:start="35:16" pos:end="35:37"><operator pos:start="35:16" pos:end="35:16">&amp;</operator><name pos:start="35:17" pos:end="35:37"><name pos:start="35:17" pos:end="35:17">s</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:37">kvm_sw_breakpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

    <for pos:start="39:5" pos:end="41:29">for <control pos:start="39:9" pos:end="39:46">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:41"><expr pos:start="39:17" pos:end="39:40"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <call pos:start="39:21" pos:end="39:40"><name pos:start="39:21" pos:end="39:30">ARRAY_SIZE</name><argument_list pos:start="39:31" pos:end="39:40">(<argument pos:start="39:32" pos:end="39:39"><expr pos:start="39:32" pos:end="39:39"><name pos:start="39:32" pos:end="39:39"><name pos:start="39:32" pos:end="39:32">s</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:39">slots</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="39:43" pos:end="39:45"><expr pos:start="39:43" pos:end="39:45"><name pos:start="39:43" pos:end="39:43">i</name><operator pos:start="39:44" pos:end="39:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="41:9" pos:end="41:29"><block_content pos:start="41:9" pos:end="41:29">

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:16">slots</name><index pos:start="41:17" pos:end="41:19">[<expr pos:start="41:18" pos:end="41:18"><name pos:start="41:18" pos:end="41:18">i</name></expr>]</index></name><operator pos:start="41:20" pos:end="41:20">.</operator><name pos:start="41:21" pos:end="41:24">slot</name> <operator pos:start="41:26" pos:end="41:26">=</operator> <name pos:start="41:28" pos:end="41:28">i</name></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="45:5" pos:end="45:17"><expr pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:11">vmfd</name></name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">-</operator><literal type="number" pos:start="45:16" pos:end="45:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:9"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:9">fd</name></name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:36"><name pos:start="47:13" pos:end="47:16">open</name><argument_list pos:start="47:17" pos:end="47:36">(<argument pos:start="47:18" pos:end="47:27"><expr pos:start="47:18" pos:end="47:27"><literal type="string" pos:start="47:18" pos:end="47:27">"/dev/kvm"</literal></expr></argument>, <argument pos:start="47:30" pos:end="47:35"><expr pos:start="47:30" pos:end="47:35"><name pos:start="47:30" pos:end="47:35">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:20">(<expr pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:13"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:13">fd</name></name> <operator pos:start="49:15" pos:end="49:16">==</operator> <operator pos:start="49:18" pos:end="49:18">-</operator><literal type="number" pos:start="49:19" pos:end="49:19">1</literal></expr>)</condition> <block pos:start="49:22" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:17">

        <expr_stmt pos:start="51:9" pos:end="51:68"><expr pos:start="51:9" pos:end="51:67"><call pos:start="51:9" pos:end="51:67"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:67">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:66"><expr pos:start="51:25" pos:end="51:66"><literal type="string" pos:start="51:25" pos:end="51:66">"Could not access KVM kernel module: %m\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:21"><expr pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">-</operator><name pos:start="53:16" pos:end="53:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:17">goto <name pos:start="55:14" pos:end="55:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:47"><expr pos:start="61:5" pos:end="61:46"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:46"><name pos:start="61:11" pos:end="61:19">kvm_ioctl</name><argument_list pos:start="61:20" pos:end="61:46">(<argument pos:start="61:21" pos:end="61:21"><expr pos:start="61:21" pos:end="61:21"><name pos:start="61:21" pos:end="61:21">s</name></expr></argument>, <argument pos:start="61:24" pos:end="61:42"><expr pos:start="61:24" pos:end="61:42"><name pos:start="61:24" pos:end="61:42">KVM_GET_API_VERSION</name></expr></argument>, <argument pos:start="61:45" pos:end="61:45"><expr pos:start="61:45" pos:end="61:45"><literal type="number" pos:start="61:45" pos:end="61:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="63:30">(<expr pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <name pos:start="63:15" pos:end="63:29">KVM_API_VERSION</name></expr>)</condition> <block pos:start="63:32" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:17">

        <if_stmt pos:start="65:9" pos:end="67:26"><if pos:start="65:9" pos:end="67:26">if <condition pos:start="65:12" pos:end="65:20">(<expr pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:17">&gt;</operator> <literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:26"><block_content pos:start="67:13" pos:end="67:26">

            <expr_stmt pos:start="67:13" pos:end="67:26"><expr pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <operator pos:start="67:19" pos:end="67:19">-</operator><name pos:start="67:20" pos:end="67:25">EINVAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:49"><expr pos:start="69:9" pos:end="69:48"><call pos:start="69:9" pos:end="69:48"><name pos:start="69:9" pos:end="69:15">fprintf</name><argument_list pos:start="69:16" pos:end="69:48">(<argument pos:start="69:17" pos:end="69:22"><expr pos:start="69:17" pos:end="69:22"><name pos:start="69:17" pos:end="69:22">stderr</name></expr></argument>, <argument pos:start="69:25" pos:end="69:47"><expr pos:start="69:25" pos:end="69:47"><literal type="string" pos:start="69:25" pos:end="69:47">"kvm version too old\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:17">goto <name pos:start="71:14" pos:end="71:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="85:5"><if pos:start="77:5" pos:end="85:5">if <condition pos:start="77:8" pos:end="77:30">(<expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">&gt;</operator> <name pos:start="77:15" pos:end="77:29">KVM_API_VERSION</name></expr>)</condition> <block pos:start="77:32" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:17">

        <expr_stmt pos:start="79:9" pos:end="79:22"><expr pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <operator pos:start="79:15" pos:end="79:15">-</operator><name pos:start="79:16" pos:end="79:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:55"><expr pos:start="81:9" pos:end="81:54"><call pos:start="81:9" pos:end="81:54"><name pos:start="81:9" pos:end="81:15">fprintf</name><argument_list pos:start="81:16" pos:end="81:54">(<argument pos:start="81:17" pos:end="81:22"><expr pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:22">stderr</name></expr></argument>, <argument pos:start="81:25" pos:end="81:53"><expr pos:start="81:25" pos:end="81:53"><literal type="string" pos:start="81:25" pos:end="81:53">"kvm version not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:45"><expr pos:start="89:5" pos:end="89:44"><name pos:start="89:5" pos:end="89:11"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:11">vmfd</name></name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="89:44"><name pos:start="89:15" pos:end="89:23">kvm_ioctl</name><argument_list pos:start="89:24" pos:end="89:44">(<argument pos:start="89:25" pos:end="89:25"><expr pos:start="89:25" pos:end="89:25"><name pos:start="89:25" pos:end="89:25">s</name></expr></argument>, <argument pos:start="89:28" pos:end="89:40"><expr pos:start="89:28" pos:end="89:40"><name pos:start="89:28" pos:end="89:40">KVM_CREATE_VM</name></expr></argument>, <argument pos:start="89:43" pos:end="89:43"><expr pos:start="89:43" pos:end="89:43"><literal type="number" pos:start="89:43" pos:end="89:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="93:17"><if pos:start="91:5" pos:end="93:17">if <condition pos:start="91:8" pos:end="91:20">(<expr pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:15">vmfd</name></name> <operator pos:start="91:17" pos:end="91:17">&lt;</operator> <literal type="number" pos:start="91:19" pos:end="91:19">0</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:17"><block_content pos:start="93:9" pos:end="93:17">

        <goto pos:start="93:9" pos:end="93:17">goto <name pos:start="93:14" pos:end="93:16">err</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="105:7">/* initially, KVM allocated its own memory and we had to jump through

     * hooks to make phys_ram_base point to this.  Modern versions of KVM

     * just use a user allocated buffer so we can use regular pages

     * unmodified.  Make sure we have a sufficiently modern version of KVM.

     */</comment>

    <if_stmt pos:start="107:5" pos:end="117:5"><if pos:start="107:5" pos:end="117:5">if <condition pos:start="107:8" pos:end="107:53">(<expr pos:start="107:9" pos:end="107:52"><operator pos:start="107:9" pos:end="107:9">!</operator><call pos:start="107:10" pos:end="107:52"><name pos:start="107:10" pos:end="107:28">kvm_check_extension</name><argument_list pos:start="107:29" pos:end="107:52">(<argument pos:start="107:30" pos:end="107:30"><expr pos:start="107:30" pos:end="107:30"><name pos:start="107:30" pos:end="107:30">s</name></expr></argument>, <argument pos:start="107:33" pos:end="107:51"><expr pos:start="107:33" pos:end="107:51"><name pos:start="107:33" pos:end="107:51">KVM_CAP_USER_MEMORY</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:55" pos:end="117:5">{<block_content pos:start="109:9" pos:end="115:17">

        <expr_stmt pos:start="109:9" pos:end="109:22"><expr pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">-</operator><name pos:start="109:16" pos:end="109:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="113:30"><expr pos:start="111:9" pos:end="113:29"><call pos:start="111:9" pos:end="113:29"><name pos:start="111:9" pos:end="111:15">fprintf</name><argument_list pos:start="111:16" pos:end="113:29">(<argument pos:start="111:17" pos:end="111:22"><expr pos:start="111:17" pos:end="111:22"><name pos:start="111:17" pos:end="111:22">stderr</name></expr></argument>, <argument pos:start="111:25" pos:end="111:70"><expr pos:start="111:25" pos:end="111:70"><literal type="string" pos:start="111:25" pos:end="111:70">"kvm does not support KVM_CAP_USER_MEMORY\n%s"</literal></expr></argument>,

                <argument pos:start="113:17" pos:end="113:28"><expr pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:28">upgrade_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="115:9" pos:end="115:17">goto <name pos:start="115:14" pos:end="115:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="125:50">/* There was a nasty bug in &lt; kvm-80 that prevents memory slots from being

     * destroyed properly.  Since we rely on this capability, refuse to work

     * with any kernel without this capability. */</comment>

    <if_stmt pos:start="127:5" pos:end="146:0"><if pos:start="127:5" pos:end="146:0">if <condition pos:start="127:8" pos:end="127:69">(<expr pos:start="127:9" pos:end="127:68"><operator pos:start="127:9" pos:end="127:9">!</operator><call pos:start="127:10" pos:end="127:68"><name pos:start="127:10" pos:end="127:28">kvm_check_extension</name><argument_list pos:start="127:29" pos:end="127:68">(<argument pos:start="127:30" pos:end="127:30"><expr pos:start="127:30" pos:end="127:30"><name pos:start="127:30" pos:end="127:30">s</name></expr></argument>, <argument pos:start="127:33" pos:end="127:67"><expr pos:start="127:33" pos:end="127:67"><name pos:start="127:33" pos:end="127:67">KVM_CAP_DESTROY_MEMORY_REGION_WORKS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:71" pos:end="146:0">{<block_content pos:start="129:9" pos:end="139:17">

        <expr_stmt pos:start="129:9" pos:end="129:22"><expr pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <operator pos:start="129:15" pos:end="129:15">-</operator><name pos:start="129:16" pos:end="129:21">EINVAL</name></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="137:30"><expr pos:start="133:9" pos:end="137:29"><call pos:start="133:9" pos:end="137:29"><name pos:start="133:9" pos:end="133:15">fprintf</name><argument_list pos:start="133:16" pos:end="137:29">(<argument pos:start="133:17" pos:end="133:22"><expr pos:start="133:17" pos:end="133:22"><name pos:start="133:17" pos:end="133:22">stderr</name></expr></argument>,

                <argument pos:start="135:17" pos:end="135:71"><expr pos:start="135:17" pos:end="135:71"><literal type="string" pos:start="135:17" pos:end="135:71">"KVM kernel module broken (DESTROY_MEMORY_REGION).\n%s"</literal></expr></argument>,

                <argument pos:start="137:17" pos:end="137:28"><expr pos:start="137:17" pos:end="137:28"><name pos:start="137:17" pos:end="137:28">upgrade_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="139:9" pos:end="139:17">goto <name pos:start="139:14" pos:end="139:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="145:1" pos:end="145:29">#<cpp:directive pos:start="145:2" pos:end="145:6">ifdef</cpp:directive> <name pos:start="145:8" pos:end="145:29">KVM_CAP_COALESCED_MMIO</name></cpp:ifdef>

    <expr_stmt pos:start="147:5" pos:end="150:0"><expr pos:start="147:5" pos:end="147:70"><name pos:start="147:5" pos:end="147:21"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:21">coalesced_mmio</name></name> <operator pos:start="147:23" pos:end="147:23">=</operator> <call pos:start="147:25" pos:end="147:70"><name pos:start="147:25" pos:end="147:43">kvm_check_extension</name><argument_list pos:start="147:44" pos:end="147:70">(<argument pos:start="147:45" pos:end="147:45"><expr pos:start="147:45" pos:end="147:45"><name pos:start="147:45" pos:end="147:45">s</name></expr></argument>, <argument pos:start="147:48" pos:end="147:69"><expr pos:start="147:48" pos:end="147:69"><name pos:start="147:48" pos:end="147:69">KVM_CAP_COALESCED_MMIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="149:1" pos:end="149:5">#<cpp:directive pos:start="149:2" pos:end="149:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="151:5" pos:end="154:0"><expr pos:start="151:5" pos:end="151:25"><name pos:start="151:5" pos:end="151:21"><name pos:start="151:5" pos:end="151:5">s</name><operator pos:start="151:6" pos:end="151:7">-&gt;</operator><name pos:start="151:8" pos:end="151:21">coalesced_mmio</name></name> <operator pos:start="151:23" pos:end="151:23">=</operator> <literal type="number" pos:start="151:25" pos:end="151:25">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="157:5" pos:end="160:0"><expr pos:start="157:5" pos:end="157:32"><name pos:start="157:5" pos:end="157:28"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:28">broken_set_mem_region</name></name> <operator pos:start="157:30" pos:end="157:30">=</operator> <literal type="number" pos:start="157:32" pos:end="157:32">1</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="159:1" pos:end="159:40">#<cpp:directive pos:start="159:2" pos:end="159:6">ifdef</cpp:directive> <name pos:start="159:8" pos:end="159:40">KVM_CAP_JOIN_MEMORY_REGIONS_WORKS</name></cpp:ifdef>

    <expr_stmt pos:start="161:5" pos:end="161:79"><expr pos:start="161:5" pos:end="161:78"><name pos:start="161:5" pos:end="161:7">ret</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <call pos:start="161:11" pos:end="161:78"><name pos:start="161:11" pos:end="161:19">kvm_ioctl</name><argument_list pos:start="161:20" pos:end="161:78">(<argument pos:start="161:21" pos:end="161:21"><expr pos:start="161:21" pos:end="161:21"><name pos:start="161:21" pos:end="161:21">s</name></expr></argument>, <argument pos:start="161:24" pos:end="161:42"><expr pos:start="161:24" pos:end="161:42"><name pos:start="161:24" pos:end="161:42">KVM_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="161:45" pos:end="161:77"><expr pos:start="161:45" pos:end="161:77"><name pos:start="161:45" pos:end="161:77">KVM_CAP_JOIN_MEMORY_REGIONS_WORKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="170:0"><if pos:start="163:5" pos:end="170:0">if <condition pos:start="163:8" pos:end="163:16">(<expr pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">&gt;</operator> <literal type="number" pos:start="163:15" pos:end="163:15">0</literal></expr>)</condition> <block pos:start="163:18" pos:end="170:0">{<block_content pos:start="165:9" pos:end="165:37">

        <expr_stmt pos:start="165:9" pos:end="165:37"><expr pos:start="165:9" pos:end="165:36"><name pos:start="165:9" pos:end="165:32"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:32">broken_set_mem_region</name></name> <operator pos:start="165:34" pos:end="165:34">=</operator> <literal type="number" pos:start="165:36" pos:end="165:36">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="169:1" pos:end="169:6">#<cpp:directive pos:start="169:2" pos:end="169:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="173:5" pos:end="173:37"><expr pos:start="173:5" pos:end="173:36"><name pos:start="173:5" pos:end="173:7">ret</name> <operator pos:start="173:9" pos:end="173:9">=</operator> <call pos:start="173:11" pos:end="173:36"><name pos:start="173:11" pos:end="173:23">kvm_arch_init</name><argument_list pos:start="173:24" pos:end="173:36">(<argument pos:start="173:25" pos:end="173:25"><expr pos:start="173:25" pos:end="173:25"><name pos:start="173:25" pos:end="173:25">s</name></expr></argument>, <argument pos:start="173:28" pos:end="173:35"><expr pos:start="173:28" pos:end="173:35"><name pos:start="173:28" pos:end="173:35">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="177:17"><if pos:start="175:5" pos:end="177:17">if <condition pos:start="175:8" pos:end="175:16">(<expr pos:start="175:9" pos:end="175:15"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">&lt;</operator> <literal type="number" pos:start="175:15" pos:end="175:15">0</literal></expr>)</condition><block type="pseudo" pos:start="177:9" pos:end="177:17"><block_content pos:start="177:9" pos:end="177:17">

        <goto pos:start="177:9" pos:end="177:17">goto <name pos:start="177:14" pos:end="177:16">err</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:18"><expr pos:start="181:5" pos:end="181:17"><name pos:start="181:5" pos:end="181:13">kvm_state</name> <operator pos:start="181:15" pos:end="181:15">=</operator> <name pos:start="181:17" pos:end="181:17">s</name></expr>;</expr_stmt>



    <return pos:start="185:5" pos:end="185:13">return <expr pos:start="185:12" pos:end="185:12"><literal type="number" pos:start="185:12" pos:end="185:12">0</literal></expr>;</return>



<label pos:start="189:1" pos:end="189:4"><name pos:start="189:1" pos:end="189:3">err</name>:</label>

    <if_stmt pos:start="191:5" pos:end="201:5"><if pos:start="191:5" pos:end="201:5">if <condition pos:start="191:8" pos:end="191:10">(<expr pos:start="191:9" pos:end="191:9"><name pos:start="191:9" pos:end="191:9">s</name></expr>)</condition> <block pos:start="191:12" pos:end="201:5">{<block_content pos:start="193:9" pos:end="199:25">

        <if_stmt pos:start="193:9" pos:end="195:27"><if pos:start="193:9" pos:end="195:27">if <condition pos:start="193:12" pos:end="193:26">(<expr pos:start="193:13" pos:end="193:25"><name pos:start="193:13" pos:end="193:19"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:19">vmfd</name></name> <operator pos:start="193:21" pos:end="193:22">!=</operator> <operator pos:start="193:24" pos:end="193:24">-</operator><literal type="number" pos:start="193:25" pos:end="193:25">1</literal></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="195:27"><block_content pos:start="195:13" pos:end="195:27">

            <expr_stmt pos:start="195:13" pos:end="195:27"><expr pos:start="195:13" pos:end="195:26"><call pos:start="195:13" pos:end="195:26"><name pos:start="195:13" pos:end="195:17">close</name><argument_list pos:start="195:18" pos:end="195:26">(<argument pos:start="195:19" pos:end="195:25"><expr pos:start="195:19" pos:end="195:25"><name pos:start="195:19" pos:end="195:25"><name pos:start="195:19" pos:end="195:19">s</name><operator pos:start="195:20" pos:end="195:21">-&gt;</operator><name pos:start="195:22" pos:end="195:25">vmfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="197:9" pos:end="199:25"><if pos:start="197:9" pos:end="199:25">if <condition pos:start="197:12" pos:end="197:24">(<expr pos:start="197:13" pos:end="197:23"><name pos:start="197:13" pos:end="197:17"><name pos:start="197:13" pos:end="197:13">s</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:17">fd</name></name> <operator pos:start="197:19" pos:end="197:20">!=</operator> <operator pos:start="197:22" pos:end="197:22">-</operator><literal type="number" pos:start="197:23" pos:end="197:23">1</literal></expr>)</condition><block type="pseudo" pos:start="199:13" pos:end="199:25"><block_content pos:start="199:13" pos:end="199:25">

            <expr_stmt pos:start="199:13" pos:end="199:25"><expr pos:start="199:13" pos:end="199:24"><call pos:start="199:13" pos:end="199:24"><name pos:start="199:13" pos:end="199:17">close</name><argument_list pos:start="199:18" pos:end="199:24">(<argument pos:start="199:19" pos:end="199:23"><expr pos:start="199:19" pos:end="199:23"><name pos:start="199:19" pos:end="199:23"><name pos:start="199:19" pos:end="199:19">s</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:23">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:17"><expr pos:start="203:5" pos:end="203:16"><call pos:start="203:5" pos:end="203:16"><name pos:start="203:5" pos:end="203:13">qemu_free</name><argument_list pos:start="203:14" pos:end="203:16">(<argument pos:start="203:15" pos:end="203:15"><expr pos:start="203:15" pos:end="203:15"><name pos:start="203:15" pos:end="203:15">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="207:5" pos:end="207:15">return <expr pos:start="207:12" pos:end="207:14"><name pos:start="207:12" pos:end="207:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
