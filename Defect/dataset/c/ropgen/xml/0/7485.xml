<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7485.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:16">BlockErrorAction</name></type> <name pos:start="1:18" pos:end="1:38">bdrv_get_error_action</name><parameter_list pos:start="1:39" pos:end="1:85">(<parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><name pos:start="1:40" pos:end="1:55">BlockDriverState</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">bs</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:65">bool</name></type> <name pos:start="1:67" pos:end="1:73">is_read</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:84"><decl pos:start="1:76" pos:end="1:84"><type pos:start="1:76" pos:end="1:84"><name pos:start="1:76" pos:end="1:78">int</name></type> <name pos:start="1:80" pos:end="1:84">error</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:5">

    <decl_stmt pos:start="5:5" pos:end="5:78"><decl pos:start="5:5" pos:end="5:77"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:19">BlockdevOnError</name></type> <name pos:start="5:21" pos:end="5:26">on_err</name> <init pos:start="5:28" pos:end="5:77">= <expr pos:start="5:30" pos:end="5:77"><ternary pos:start="5:30" pos:end="5:77"><condition pos:start="5:30" pos:end="5:38"><expr pos:start="5:30" pos:end="5:36"><name pos:start="5:30" pos:end="5:36">is_read</name></expr> ?</condition><then pos:start="5:40" pos:end="5:56"> <expr pos:start="5:40" pos:end="5:56"><name pos:start="5:40" pos:end="5:56"><name pos:start="5:40" pos:end="5:41">bs</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:56">on_read_error</name></name></expr> </then><else pos:start="5:58" pos:end="5:77">: <expr pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:61">bs</name><operator pos:start="5:62" pos:end="5:63">-&gt;</operator><name pos:start="5:64" pos:end="5:77">on_write_error</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="33:5">switch <condition pos:start="9:12" pos:end="9:19">(<expr pos:start="9:13" pos:end="9:18"><name pos:start="9:13" pos:end="9:18">on_err</name></expr>)</condition> <block pos:start="9:21" pos:end="33:5">{<block_content pos:start="11:5" pos:end="31:16">

    <case pos:start="11:5" pos:end="11:34">case <expr pos:start="11:10" pos:end="11:33"><name pos:start="11:10" pos:end="11:33">BLOCKDEV_ON_ERROR_ENOSPC</name></expr>:</case>

        <return pos:start="13:9" pos:end="15:67">return <expr pos:start="13:16" pos:end="15:66"><ternary pos:start="13:16" pos:end="15:66"><condition pos:start="13:16" pos:end="13:34"><expr pos:start="13:16" pos:end="13:32"><operator pos:start="13:16" pos:end="13:16">(</operator><name pos:start="13:17" pos:end="13:21">error</name> <operator pos:start="13:23" pos:end="13:24">==</operator> <name pos:start="13:26" pos:end="13:31">ENOSPC</name><operator pos:start="13:32" pos:end="13:32">)</operator></expr> ?</condition><then pos:start="15:16" pos:end="15:38">

               <expr pos:start="15:16" pos:end="15:38"><name pos:start="15:16" pos:end="15:38">BLOCK_ERROR_ACTION_STOP</name></expr> </then><else pos:start="15:40" pos:end="15:66">: <expr pos:start="15:42" pos:end="15:66"><name pos:start="15:42" pos:end="15:66">BLOCK_ERROR_ACTION_REPORT</name></expr></else></ternary></expr>;</return>

    <case pos:start="17:5" pos:end="17:32">case <expr pos:start="17:10" pos:end="17:31"><name pos:start="17:10" pos:end="17:31">BLOCKDEV_ON_ERROR_STOP</name></expr>:</case>

        <return pos:start="19:9" pos:end="19:39">return <expr pos:start="19:16" pos:end="19:38"><name pos:start="19:16" pos:end="19:38">BLOCK_ERROR_ACTION_STOP</name></expr>;</return>

    <case pos:start="21:5" pos:end="21:34">case <expr pos:start="21:10" pos:end="21:33"><name pos:start="21:10" pos:end="21:33">BLOCKDEV_ON_ERROR_REPORT</name></expr>:</case>

        <return pos:start="23:9" pos:end="23:41">return <expr pos:start="23:16" pos:end="23:40"><name pos:start="23:16" pos:end="23:40">BLOCK_ERROR_ACTION_REPORT</name></expr>;</return>

    <case pos:start="25:5" pos:end="25:34">case <expr pos:start="25:10" pos:end="25:33"><name pos:start="25:10" pos:end="25:33">BLOCKDEV_ON_ERROR_IGNORE</name></expr>:</case>

        <return pos:start="27:9" pos:end="27:41">return <expr pos:start="27:16" pos:end="27:40"><name pos:start="27:16" pos:end="27:40">BLOCK_ERROR_ACTION_IGNORE</name></expr>;</return>

    <default pos:start="29:5" pos:end="29:12">default:</default>

        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><call pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:13">abort</name><argument_list pos:start="31:14" pos:end="31:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
