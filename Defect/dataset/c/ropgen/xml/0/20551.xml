<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20551.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">scsi_generic_initfn</name><parameter_list pos:start="1:31" pos:end="1:47">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:41">SCSIDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:13">

    <decl_stmt pos:start="5:5" pos:end="5:65"><decl pos:start="5:5" pos:end="5:64"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">SCSIGenericState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:64">= <expr pos:start="5:27" pos:end="5:64"><call pos:start="5:27" pos:end="5:64"><name pos:start="5:27" pos:end="5:35">DO_UPCAST</name><argument_list pos:start="5:36" pos:end="5:64">(<argument pos:start="5:37" pos:end="5:52"><expr pos:start="5:37" pos:end="5:52"><name pos:start="5:37" pos:end="5:52">SCSIGenericState</name></expr></argument>, <argument pos:start="5:55" pos:end="5:58"><expr pos:start="5:55" pos:end="5:58"><name pos:start="5:55" pos:end="5:58">qdev</name></expr></argument>, <argument pos:start="5:61" pos:end="5:63"><expr pos:start="5:61" pos:end="5:63"><name pos:start="5:61" pos:end="5:63">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">sg_version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:21">sg_scsi_id</name></name></type> <name pos:start="9:23" pos:end="9:28">scsiid</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:57">(<expr pos:start="13:9" pos:end="13:56"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:27"><name pos:start="13:10" pos:end="13:10">s</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:16">qdev</name><operator pos:start="13:17" pos:end="13:17">.</operator><name pos:start="13:18" pos:end="13:21">conf</name><operator pos:start="13:22" pos:end="13:22">.</operator><name pos:start="13:23" pos:end="13:27">dinfo</name></name> <operator pos:start="13:29" pos:end="13:30">||</operator> <operator pos:start="13:32" pos:end="13:32">!</operator><name pos:start="13:33" pos:end="13:56"><name pos:start="13:33" pos:end="13:33">s</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:39">qdev</name><operator pos:start="13:40" pos:end="13:40">.</operator><name pos:start="13:41" pos:end="13:44">conf</name><operator pos:start="13:45" pos:end="13:45">.</operator><name pos:start="13:46" pos:end="13:50">dinfo</name><operator pos:start="13:51" pos:end="13:52">-&gt;</operator><name pos:start="13:53" pos:end="13:56">bdrv</name></name></expr>)</condition> <block pos:start="13:59" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:61"><expr pos:start="15:9" pos:end="15:60"><call pos:start="15:9" pos:end="15:60"><name pos:start="15:9" pos:end="15:20">error_report</name><argument_list pos:start="15:21" pos:end="15:60">(<argument pos:start="15:22" pos:end="15:59"><expr pos:start="15:22" pos:end="15:59"><literal type="string" pos:start="15:22" pos:end="15:59">"scsi-generic: drive property not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:37"><expr pos:start="21:5" pos:end="21:36"><name pos:start="21:5" pos:end="21:9"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:9">bs</name></name> <operator pos:start="21:11" pos:end="21:11">=</operator> <name pos:start="21:13" pos:end="21:36"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:19">qdev</name><operator pos:start="21:20" pos:end="21:20">.</operator><name pos:start="21:21" pos:end="21:24">conf</name><operator pos:start="21:25" pos:end="21:25">.</operator><name pos:start="21:26" pos:end="21:30">dinfo</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:36">bdrv</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:51">/* check we are really using a /dev/sg* file */</comment>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:27">(<expr pos:start="27:9" pos:end="27:26"><operator pos:start="27:9" pos:end="27:9">!</operator><call pos:start="27:10" pos:end="27:26"><name pos:start="27:10" pos:end="27:19">bdrv_is_sg</name><argument_list pos:start="27:20" pos:end="27:26">(<argument pos:start="27:21" pos:end="27:25"><expr pos:start="27:21" pos:end="27:25"><name pos:start="27:21" pos:end="27:25"><name pos:start="27:21" pos:end="27:21">s</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:25">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:29" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:51"><expr pos:start="29:9" pos:end="29:50"><call pos:start="29:9" pos:end="29:50"><name pos:start="29:9" pos:end="29:20">error_report</name><argument_list pos:start="29:21" pos:end="29:50">(<argument pos:start="29:22" pos:end="29:49"><expr pos:start="29:22" pos:end="29:49"><literal type="string" pos:start="29:22" pos:end="29:49">"scsi-generic: not /dev/sg*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:73">/* check we are using a driver managing SG_IO (version 3 and after */</comment>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="41:27">(<expr pos:start="39:9" pos:end="41:26"><call pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:18">bdrv_ioctl</name><argument_list pos:start="39:19" pos:end="39:58">(<argument pos:start="39:20" pos:end="39:24"><expr pos:start="39:20" pos:end="39:24"><name pos:start="39:20" pos:end="39:24"><name pos:start="39:20" pos:end="39:20">s</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:24">bs</name></name></expr></argument>, <argument pos:start="39:27" pos:end="39:44"><expr pos:start="39:27" pos:end="39:44"><name pos:start="39:27" pos:end="39:44">SG_GET_VERSION_NUM</name></expr></argument>, <argument pos:start="39:47" pos:end="39:57"><expr pos:start="39:47" pos:end="39:57"><operator pos:start="39:47" pos:end="39:47">&amp;</operator><name pos:start="39:48" pos:end="39:57">sg_version</name></expr></argument>)</argument_list></call> <operator pos:start="39:60" pos:end="39:60">&lt;</operator> <literal type="number" pos:start="39:62" pos:end="39:62">0</literal> <operator pos:start="39:64" pos:end="39:65">||</operator>

        <name pos:start="41:9" pos:end="41:18">sg_version</name> <operator pos:start="41:20" pos:end="41:20">&lt;</operator> <literal type="number" pos:start="41:22" pos:end="41:26">30000</literal></expr>)</condition> <block pos:start="41:29" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:69"><expr pos:start="43:9" pos:end="43:68"><call pos:start="43:9" pos:end="43:68"><name pos:start="43:9" pos:end="43:20">error_report</name><argument_list pos:start="43:21" pos:end="43:68">(<argument pos:start="43:22" pos:end="43:67"><expr pos:start="43:22" pos:end="43:67"><literal type="string" pos:start="43:22" pos:end="43:67">"scsi-generic: scsi generic interface too old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:33">/* get LUN of the /dev/sg? */</comment>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:51">(<expr pos:start="53:9" pos:end="53:50"><call pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:18">bdrv_ioctl</name><argument_list pos:start="53:19" pos:end="53:50">(<argument pos:start="53:20" pos:end="53:24"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:24">bs</name></name></expr></argument>, <argument pos:start="53:27" pos:end="53:40"><expr pos:start="53:27" pos:end="53:40"><name pos:start="53:27" pos:end="53:40">SG_GET_SCSI_ID</name></expr></argument>, <argument pos:start="53:43" pos:end="53:49"><expr pos:start="53:43" pos:end="53:49"><operator pos:start="53:43" pos:end="53:43">&amp;</operator><name pos:start="53:44" pos:end="53:49">scsiid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:53" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <expr_stmt pos:start="55:9" pos:end="55:66"><expr pos:start="55:9" pos:end="55:65"><call pos:start="55:9" pos:end="55:65"><name pos:start="55:9" pos:end="55:20">error_report</name><argument_list pos:start="55:21" pos:end="55:65">(<argument pos:start="55:22" pos:end="55:64"><expr pos:start="55:22" pos:end="55:64"><literal type="string" pos:start="55:22" pos:end="55:64">"scsi-generic: SG_GET_SCSI_ID ioctl failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:29">/* define device state */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:24"><expr pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:10"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:10">lun</name></name> <operator pos:start="65:12" pos:end="65:12">=</operator> <name pos:start="65:14" pos:end="65:23"><name pos:start="65:14" pos:end="65:19">scsiid</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:23">lun</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:32"><expr pos:start="67:5" pos:end="67:31"><call pos:start="67:5" pos:end="67:31"><name pos:start="67:5" pos:end="67:11">DPRINTF</name><argument_list pos:start="67:12" pos:end="67:31">(<argument pos:start="67:13" pos:end="67:22"><expr pos:start="67:13" pos:end="67:22"><literal type="string" pos:start="67:13" pos:end="67:22">"LUN %d\n"</literal></expr></argument>, <argument pos:start="67:25" pos:end="67:30"><expr pos:start="67:25" pos:end="67:30"><name pos:start="67:25" pos:end="67:30"><name pos:start="67:25" pos:end="67:25">s</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:30">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:36"><expr pos:start="69:5" pos:end="69:35"><name pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:11">qdev</name><operator pos:start="69:12" pos:end="69:12">.</operator><name pos:start="69:13" pos:end="69:16">type</name></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:35"><name pos:start="69:20" pos:end="69:25">scsiid</name><operator pos:start="69:26" pos:end="69:26">.</operator><name pos:start="69:27" pos:end="69:35">scsi_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:46"><expr pos:start="71:5" pos:end="71:45"><call pos:start="71:5" pos:end="71:45"><name pos:start="71:5" pos:end="71:11">DPRINTF</name><argument_list pos:start="71:12" pos:end="71:45">(<argument pos:start="71:13" pos:end="71:30"><expr pos:start="71:13" pos:end="71:30"><literal type="string" pos:start="71:13" pos:end="71:30">"device type %d\n"</literal></expr></argument>, <argument pos:start="71:33" pos:end="71:44"><expr pos:start="71:33" pos:end="71:44"><name pos:start="71:33" pos:end="71:44"><name pos:start="71:33" pos:end="71:33">s</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:39">qdev</name><operator pos:start="71:40" pos:end="71:40">.</operator><name pos:start="71:41" pos:end="71:44">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="99:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:34">(<expr pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:15">qdev</name><operator pos:start="73:16" pos:end="73:16">.</operator><name pos:start="73:17" pos:end="73:20">type</name></name> <operator pos:start="73:22" pos:end="73:23">==</operator> <name pos:start="73:25" pos:end="73:33">TYPE_TAPE</name></expr>)</condition> <block pos:start="73:36" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:34">

        <expr_stmt pos:start="75:9" pos:end="75:56"><expr pos:start="75:9" pos:end="75:55"><name pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:15">qdev</name><operator pos:start="75:16" pos:end="75:16">.</operator><name pos:start="75:17" pos:end="75:25">blocksize</name></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <call pos:start="75:29" pos:end="75:55"><name pos:start="75:29" pos:end="75:48">get_stream_blocksize</name><argument_list pos:start="75:49" pos:end="75:55">(<argument pos:start="75:50" pos:end="75:54"><expr pos:start="75:50" pos:end="75:54"><name pos:start="75:50" pos:end="75:54"><name pos:start="75:50" pos:end="75:50">s</name><operator pos:start="75:51" pos:end="75:52">-&gt;</operator><name pos:start="75:53" pos:end="75:54">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="79:34"><if pos:start="77:9" pos:end="79:34">if <condition pos:start="77:12" pos:end="77:36">(<expr pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:19">qdev</name><operator pos:start="77:20" pos:end="77:20">.</operator><name pos:start="77:21" pos:end="77:29">blocksize</name></name> <operator pos:start="77:31" pos:end="77:32">==</operator> <operator pos:start="77:34" pos:end="77:34">-</operator><literal type="number" pos:start="77:35" pos:end="77:35">1</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:34"><block_content pos:start="79:13" pos:end="79:34">

            <expr_stmt pos:start="79:13" pos:end="79:34"><expr pos:start="79:13" pos:end="79:33"><name pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:19">qdev</name><operator pos:start="79:20" pos:end="79:20">.</operator><name pos:start="79:21" pos:end="79:29">blocksize</name></name> <operator pos:start="79:31" pos:end="79:31">=</operator> <literal type="number" pos:start="79:33" pos:end="79:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="99:5">else <block pos:start="81:12" pos:end="99:5">{<block_content pos:start="83:9" pos:end="97:9">

        <expr_stmt pos:start="83:9" pos:end="83:49"><expr pos:start="83:9" pos:end="83:48"><name pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:15">qdev</name><operator pos:start="83:16" pos:end="83:16">.</operator><name pos:start="83:17" pos:end="83:25">blocksize</name></name> <operator pos:start="83:27" pos:end="83:27">=</operator> <call pos:start="83:29" pos:end="83:48"><name pos:start="83:29" pos:end="83:41">get_blocksize</name><argument_list pos:start="83:42" pos:end="83:48">(<argument pos:start="83:43" pos:end="83:47"><expr pos:start="83:43" pos:end="83:47"><name pos:start="83:43" pos:end="83:47"><name pos:start="83:43" pos:end="83:43">s</name><operator pos:start="83:44" pos:end="83:45">-&gt;</operator><name pos:start="83:46" pos:end="83:47">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="85:9" pos:end="85:54">/* removable media returns 0 if not present */</comment>

        <if_stmt pos:start="87:9" pos:end="97:9"><if pos:start="87:9" pos:end="97:9">if <condition pos:start="87:12" pos:end="87:35">(<expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:19">qdev</name><operator pos:start="87:20" pos:end="87:20">.</operator><name pos:start="87:21" pos:end="87:29">blocksize</name></name> <operator pos:start="87:31" pos:end="87:32">&lt;=</operator> <literal type="number" pos:start="87:34" pos:end="87:34">0</literal></expr>)</condition> <block pos:start="87:37" pos:end="97:9">{<block_content pos:start="89:13" pos:end="95:40">

            <if_stmt pos:start="89:13" pos:end="95:40"><if pos:start="89:13" pos:end="91:41">if <condition pos:start="89:16" pos:end="89:71">(<expr pos:start="89:17" pos:end="89:70"><name pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:17">s</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:23">qdev</name><operator pos:start="89:24" pos:end="89:24">.</operator><name pos:start="89:25" pos:end="89:28">type</name></name> <operator pos:start="89:30" pos:end="89:31">==</operator> <name pos:start="89:33" pos:end="89:40">TYPE_ROM</name> <operator pos:start="89:42" pos:end="89:43">||</operator> <name pos:start="89:45" pos:end="89:56"><name pos:start="89:45" pos:end="89:45">s</name><operator pos:start="89:46" pos:end="89:47">-&gt;</operator><name pos:start="89:48" pos:end="89:51">qdev</name><operator pos:start="89:52" pos:end="89:52">.</operator><name pos:start="89:53" pos:end="89:56">type</name></name>  <operator pos:start="89:59" pos:end="89:60">==</operator> <name pos:start="89:62" pos:end="89:70">TYPE_WORM</name></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:41"><block_content pos:start="91:17" pos:end="91:41">

                <expr_stmt pos:start="91:17" pos:end="91:41"><expr pos:start="91:17" pos:end="91:40"><name pos:start="91:17" pos:end="91:33"><name pos:start="91:17" pos:end="91:17">s</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:23">qdev</name><operator pos:start="91:24" pos:end="91:24">.</operator><name pos:start="91:25" pos:end="91:33">blocksize</name></name> <operator pos:start="91:35" pos:end="91:35">=</operator> <literal type="number" pos:start="91:37" pos:end="91:40">2048</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="93:13" pos:end="95:40">else<block type="pseudo" pos:start="95:17" pos:end="95:40"><block_content pos:start="95:17" pos:end="95:40">

                <expr_stmt pos:start="95:17" pos:end="95:40"><expr pos:start="95:17" pos:end="95:39"><name pos:start="95:17" pos:end="95:33"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:23">qdev</name><operator pos:start="95:24" pos:end="95:24">.</operator><name pos:start="95:25" pos:end="95:33">blocksize</name></name> <operator pos:start="95:35" pos:end="95:35">=</operator> <literal type="number" pos:start="95:37" pos:end="95:39">512</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:50"><expr pos:start="101:5" pos:end="101:49"><call pos:start="101:5" pos:end="101:49"><name pos:start="101:5" pos:end="101:11">DPRINTF</name><argument_list pos:start="101:12" pos:end="101:49">(<argument pos:start="101:13" pos:end="101:29"><expr pos:start="101:13" pos:end="101:29"><literal type="string" pos:start="101:13" pos:end="101:29">"block size %d\n"</literal></expr></argument>, <argument pos:start="101:32" pos:end="101:48"><expr pos:start="101:32" pos:end="101:48"><name pos:start="101:32" pos:end="101:48"><name pos:start="101:32" pos:end="101:32">s</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:38">qdev</name><operator pos:start="101:39" pos:end="101:39">.</operator><name pos:start="101:40" pos:end="101:48">blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:25"><expr pos:start="103:5" pos:end="103:24"><name pos:start="103:5" pos:end="103:20"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:20">driver_status</name></name> <operator pos:start="103:22" pos:end="103:22">=</operator> <literal type="number" pos:start="103:24" pos:end="103:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:48"><expr pos:start="105:5" pos:end="105:47"><call pos:start="105:5" pos:end="105:47"><name pos:start="105:5" pos:end="105:10">memset</name><argument_list pos:start="105:11" pos:end="105:47">(<argument pos:start="105:12" pos:end="105:22"><expr pos:start="105:12" pos:end="105:22"><name pos:start="105:12" pos:end="105:22"><name pos:start="105:12" pos:end="105:12">s</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:22">sensebuf</name></name></expr></argument>, <argument pos:start="105:25" pos:end="105:25"><expr pos:start="105:25" pos:end="105:25"><literal type="number" pos:start="105:25" pos:end="105:25">0</literal></expr></argument>, <argument pos:start="105:28" pos:end="105:46"><expr pos:start="105:28" pos:end="105:46"><sizeof pos:start="105:28" pos:end="105:46">sizeof<argument_list pos:start="105:34" pos:end="105:46">(<argument pos:start="105:35" pos:end="105:45"><expr pos:start="105:35" pos:end="105:45"><name pos:start="105:35" pos:end="105:45"><name pos:start="105:35" pos:end="105:35">s</name><operator pos:start="105:36" pos:end="105:37">-&gt;</operator><name pos:start="105:38" pos:end="105:45">sensebuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><literal type="number" pos:start="107:12" pos:end="107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
