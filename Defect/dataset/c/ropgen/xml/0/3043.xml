<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3043.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">ffserver_opt_preset</name><parameter_list pos:start="1:31" pos:end="5:74">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">arg</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:44"><decl pos:start="3:24" pos:end="3:44"><type pos:start="3:24" pos:end="3:44"><name pos:start="3:24" pos:end="3:37">AVCodecContext</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:44">avctx</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:54"><decl pos:start="3:47" pos:end="3:54"><type pos:start="3:47" pos:end="3:54"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:54">type</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:47"><decl pos:start="5:24" pos:end="5:47"><type pos:start="5:24" pos:end="5:47"><name pos:start="5:24" pos:end="5:37"><name pos:start="5:24" pos:end="5:27">enum</name> <name pos:start="5:29" pos:end="5:37">AVCodecID</name></name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:47">audio_id</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:73"><decl pos:start="5:50" pos:end="5:73"><type pos:start="5:50" pos:end="5:73"><name pos:start="5:50" pos:end="5:63"><name pos:start="5:50" pos:end="5:53">enum</name> <name pos:start="5:55" pos:end="5:63">AVCodecID</name></name> <modifier pos:start="5:65" pos:end="5:65">*</modifier></type><name pos:start="5:66" pos:end="5:73">video_id</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="83:1">{<block_content pos:start="9:5" pos:end="81:15">

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">FILE</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:11">f</name><init pos:start="9:12" pos:end="9:16">=<expr pos:start="9:13" pos:end="9:16"><name pos:start="9:13" pos:end="9:16">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:23"><name pos:start="11:10" pos:end="11:17">filename</name><index pos:start="11:18" pos:end="11:23">[<expr pos:start="11:19" pos:end="11:22"><literal type="number" pos:start="11:19" pos:end="11:22">1000</literal></expr>]</index></name></decl>, <decl pos:start="11:26" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:26" pos:end="11:34"><name pos:start="11:26" pos:end="11:28">tmp</name><index pos:start="11:29" pos:end="11:34">[<expr pos:start="11:30" pos:end="11:33"><literal type="number" pos:start="11:30" pos:end="11:33">1000</literal></expr>]</index></name></decl>, <decl pos:start="11:37" pos:end="11:46"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:37" pos:end="11:46"><name pos:start="11:37" pos:end="11:40">tmp2</name><index pos:start="11:41" pos:end="11:46">[<expr pos:start="11:42" pos:end="11:45"><literal type="number" pos:start="11:42" pos:end="11:45">1000</literal></expr>]</index></name></decl>, <decl pos:start="11:49" pos:end="11:58"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:49" pos:end="11:58"><name pos:start="11:49" pos:end="11:52">line</name><index pos:start="11:53" pos:end="11:58">[<expr pos:start="11:54" pos:end="11:57"><literal type="number" pos:start="11:54" pos:end="11:57">1000</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:59"><decl pos:start="15:5" pos:end="15:58"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">AVCodec</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:18">codec</name> <init pos:start="15:20" pos:end="15:58">= <expr pos:start="15:22" pos:end="15:58"><call pos:start="15:22" pos:end="15:58"><name pos:start="15:22" pos:end="15:41">avcodec_find_encoder</name><argument_list pos:start="15:42" pos:end="15:58">(<argument pos:start="15:43" pos:end="15:57"><expr pos:start="15:43" pos:end="15:57"><name pos:start="15:43" pos:end="15:57"><name pos:start="15:43" pos:end="15:47">avctx</name><operator pos:start="15:48" pos:end="15:49">-&gt;</operator><name pos:start="15:50" pos:end="15:57">codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="21:59">(<expr pos:start="19:9" pos:end="21:58"><operator pos:start="19:9" pos:end="19:9">!</operator><operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:11">f</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="21:57"><name pos:start="19:15" pos:end="19:29">get_preset_file</name><argument_list pos:start="19:30" pos:end="21:57">(<argument pos:start="19:31" pos:end="19:38"><expr pos:start="19:31" pos:end="19:38"><name pos:start="19:31" pos:end="19:38">filename</name></expr></argument>, <argument pos:start="19:41" pos:end="19:56"><expr pos:start="19:41" pos:end="19:56"><sizeof pos:start="19:41" pos:end="19:56">sizeof<argument_list pos:start="19:47" pos:end="19:56">(<argument pos:start="19:48" pos:end="19:55"><expr pos:start="19:48" pos:end="19:55"><name pos:start="19:48" pos:end="19:55">filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:59" pos:end="19:61"><expr pos:start="19:59" pos:end="19:61"><name pos:start="19:59" pos:end="19:61">arg</name></expr></argument>, <argument pos:start="19:64" pos:end="19:64"><expr pos:start="19:64" pos:end="19:64"><literal type="number" pos:start="19:64" pos:end="19:64">0</literal></expr></argument>,

                              <argument pos:start="21:31" pos:end="21:56"><expr pos:start="21:31" pos:end="21:56"><ternary pos:start="21:31" pos:end="21:56"><condition pos:start="21:31" pos:end="21:37"><expr pos:start="21:31" pos:end="21:35"><name pos:start="21:31" pos:end="21:35">codec</name></expr> ?</condition><then pos:start="21:39" pos:end="21:49"> <expr pos:start="21:39" pos:end="21:49"><name pos:start="21:39" pos:end="21:49"><name pos:start="21:39" pos:end="21:43">codec</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:49">name</name></name></expr> </then><else pos:start="21:51" pos:end="21:56">: <expr pos:start="21:53" pos:end="21:56"><name pos:start="21:53" pos:end="21:56">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call><operator pos:start="21:58" pos:end="21:58">)</operator></expr>)</condition> <block pos:start="21:61" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:17">

        <expr_stmt pos:start="23:9" pos:end="23:65"><expr pos:start="23:9" pos:end="23:64"><call pos:start="23:9" pos:end="23:64"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="23:64">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>, <argument pos:start="23:25" pos:end="23:58"><expr pos:start="23:25" pos:end="23:58"><literal type="string" pos:start="23:25" pos:end="23:58">"File for preset '%s' not found\n"</literal></expr></argument>, <argument pos:start="23:61" pos:end="23:63"><expr pos:start="23:61" pos:end="23:63"><name pos:start="23:61" pos:end="23:63">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="31:5" pos:end="73:5">while<condition pos:start="31:10" pos:end="31:19">(<expr pos:start="31:11" pos:end="31:18"><operator pos:start="31:11" pos:end="31:11">!</operator><call pos:start="31:12" pos:end="31:18"><name pos:start="31:12" pos:end="31:15">feof</name><argument_list pos:start="31:16" pos:end="31:18">(<argument pos:start="31:17" pos:end="31:17"><expr pos:start="31:17" pos:end="31:17"><name pos:start="31:17" pos:end="31:17">f</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="31:20" pos:end="73:5">{<block_content pos:start="33:9" pos:end="71:9">

        <decl_stmt pos:start="33:9" pos:end="33:50"><decl pos:start="33:9" pos:end="33:49"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:13">e</name><init pos:start="33:14" pos:end="33:49">= <expr pos:start="33:16" pos:end="33:49"><call pos:start="33:16" pos:end="33:45"><name pos:start="33:16" pos:end="33:21">fscanf</name><argument_list pos:start="33:22" pos:end="33:45">(<argument pos:start="33:23" pos:end="33:23"><expr pos:start="33:23" pos:end="33:23"><name pos:start="33:23" pos:end="33:23">f</name></expr></argument>, <argument pos:start="33:26" pos:end="33:38"><expr pos:start="33:26" pos:end="33:38"><literal type="string" pos:start="33:26" pos:end="33:38">"%999[^\n]\n"</literal></expr></argument>, <argument pos:start="33:41" pos:end="33:44"><expr pos:start="33:41" pos:end="33:44"><name pos:start="33:41" pos:end="33:44">line</name></expr></argument>)</argument_list></call> <operator pos:start="33:47" pos:end="33:47">-</operator> <literal type="number" pos:start="33:49" pos:end="33:49">1</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="37:21"><if pos:start="35:9" pos:end="37:21">if<condition pos:start="35:11" pos:end="35:32">(<expr pos:start="35:12" pos:end="35:31"><name pos:start="35:12" pos:end="35:18"><name pos:start="35:12" pos:end="35:15">line</name><index pos:start="35:16" pos:end="35:18">[<expr pos:start="35:17" pos:end="35:17"><literal type="number" pos:start="35:17" pos:end="35:17">0</literal></expr>]</index></name> <operator pos:start="35:20" pos:end="35:21">==</operator> <literal type="char" pos:start="35:23" pos:end="35:25">'#'</literal> <operator pos:start="35:27" pos:end="35:28">&amp;&amp;</operator> <operator pos:start="35:30" pos:end="35:30">!</operator><name pos:start="35:31" pos:end="35:31">e</name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:21"><block_content pos:start="37:13" pos:end="37:21">

            <continue pos:start="37:13" pos:end="37:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:64"><expr pos:start="39:9" pos:end="39:63"><name pos:start="39:9" pos:end="39:9">e</name><operator pos:start="39:10" pos:end="39:11">|=</operator> <call pos:start="39:13" pos:end="39:59"><name pos:start="39:13" pos:end="39:18">sscanf</name><argument_list pos:start="39:19" pos:end="39:59">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">line</name></expr></argument>, <argument pos:start="39:26" pos:end="39:47"><expr pos:start="39:26" pos:end="39:47"><literal type="string" pos:start="39:26" pos:end="39:47">"%999[^=]=%999[^\n]\n"</literal></expr></argument>, <argument pos:start="39:50" pos:end="39:52"><expr pos:start="39:50" pos:end="39:52"><name pos:start="39:50" pos:end="39:52">tmp</name></expr></argument>, <argument pos:start="39:55" pos:end="39:58"><expr pos:start="39:55" pos:end="39:58"><name pos:start="39:55" pos:end="39:58">tmp2</name></expr></argument>)</argument_list></call> <operator pos:start="39:61" pos:end="39:61">-</operator> <literal type="number" pos:start="39:63" pos:end="39:63">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if<condition pos:start="41:11" pos:end="41:13">(<expr pos:start="41:12" pos:end="41:12"><name pos:start="41:12" pos:end="41:12">e</name></expr>)</condition><block pos:start="41:14" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:18">

            <expr_stmt pos:start="43:13" pos:end="43:74"><expr pos:start="43:13" pos:end="43:73"><call pos:start="43:13" pos:end="43:73"><name pos:start="43:13" pos:end="43:19">fprintf</name><argument_list pos:start="43:20" pos:end="43:73">(<argument pos:start="43:21" pos:end="43:26"><expr pos:start="43:21" pos:end="43:26"><name pos:start="43:21" pos:end="43:26">stderr</name></expr></argument>, <argument pos:start="43:29" pos:end="43:56"><expr pos:start="43:29" pos:end="43:56"><literal type="string" pos:start="43:29" pos:end="43:56">"%s: Invalid syntax: '%s'\n"</literal></expr></argument>, <argument pos:start="43:59" pos:end="43:66"><expr pos:start="43:59" pos:end="43:66"><name pos:start="43:59" pos:end="43:66">filename</name></expr></argument>, <argument pos:start="43:69" pos:end="43:72"><expr pos:start="43:69" pos:end="43:72"><name pos:start="43:69" pos:end="43:72">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:20"><expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:19">1</literal></expr>;</expr_stmt>

            <break pos:start="47:13" pos:end="47:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="71:9"><if pos:start="51:9" pos:end="55:9">if<condition pos:start="51:11" pos:end="51:34">(<expr pos:start="51:12" pos:end="51:33"><operator pos:start="51:12" pos:end="51:12">!</operator><call pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:18">strcmp</name><argument_list pos:start="51:19" pos:end="51:33">(<argument pos:start="51:20" pos:end="51:22"><expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">tmp</name></expr></argument>, <argument pos:start="51:25" pos:end="51:32"><expr pos:start="51:25" pos:end="51:32"><literal type="string" pos:start="51:25" pos:end="51:32">"acodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="51:35" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:60">

            <expr_stmt pos:start="53:13" pos:end="53:60"><expr pos:start="53:13" pos:end="53:59"><operator pos:start="53:13" pos:end="53:13">*</operator><name pos:start="53:14" pos:end="53:21">audio_id</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <call pos:start="53:25" pos:end="53:59"><name pos:start="53:25" pos:end="53:33">opt_codec</name><argument_list pos:start="53:34" pos:end="53:59">(<argument pos:start="53:35" pos:end="53:38"><expr pos:start="53:35" pos:end="53:38"><name pos:start="53:35" pos:end="53:38">tmp2</name></expr></argument>, <argument pos:start="53:41" pos:end="53:58"><expr pos:start="53:41" pos:end="53:58"><name pos:start="53:41" pos:end="53:58">AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="55:10" pos:end="59:9">else if<condition pos:start="55:17" pos:end="55:40">(<expr pos:start="55:18" pos:end="55:39"><operator pos:start="55:18" pos:end="55:18">!</operator><call pos:start="55:19" pos:end="55:39"><name pos:start="55:19" pos:end="55:24">strcmp</name><argument_list pos:start="55:25" pos:end="55:39">(<argument pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><name pos:start="55:26" pos:end="55:28">tmp</name></expr></argument>, <argument pos:start="55:31" pos:end="55:38"><expr pos:start="55:31" pos:end="55:38"><literal type="string" pos:start="55:31" pos:end="55:38">"vcodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="55:41" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:60">

            <expr_stmt pos:start="57:13" pos:end="57:60"><expr pos:start="57:13" pos:end="57:59"><operator pos:start="57:13" pos:end="57:13">*</operator><name pos:start="57:14" pos:end="57:21">video_id</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <call pos:start="57:25" pos:end="57:59"><name pos:start="57:25" pos:end="57:33">opt_codec</name><argument_list pos:start="57:34" pos:end="57:59">(<argument pos:start="57:35" pos:end="57:38"><expr pos:start="57:35" pos:end="57:38"><name pos:start="57:35" pos:end="57:38">tmp2</name></expr></argument>, <argument pos:start="57:41" pos:end="57:58"><expr pos:start="57:41" pos:end="57:58"><name pos:start="57:41" pos:end="57:58">AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="59:10" pos:end="63:9">else if<condition pos:start="59:17" pos:end="59:40">(<expr pos:start="59:18" pos:end="59:39"><operator pos:start="59:18" pos:end="59:18">!</operator><call pos:start="59:19" pos:end="59:39"><name pos:start="59:19" pos:end="59:24">strcmp</name><argument_list pos:start="59:25" pos:end="59:39">(<argument pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><name pos:start="59:26" pos:end="59:28">tmp</name></expr></argument>, <argument pos:start="59:31" pos:end="59:38"><expr pos:start="59:31" pos:end="59:38"><literal type="string" pos:start="59:31" pos:end="59:38">"scodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="59:41" pos:end="63:9">{<block_content>

            <comment type="block" pos:start="61:13" pos:end="61:43">/* opt_subtitle_codec(tmp2); */</comment>

        </block_content>}</block></if><if type="elseif" pos:start="63:10" pos:end="71:9">else if<condition pos:start="63:17" pos:end="63:66">(<expr pos:start="63:18" pos:end="63:65"><call pos:start="63:18" pos:end="63:61"><name pos:start="63:18" pos:end="63:37">ffserver_opt_default</name><argument_list pos:start="63:38" pos:end="63:61">(<argument pos:start="63:39" pos:end="63:41"><expr pos:start="63:39" pos:end="63:41"><name pos:start="63:39" pos:end="63:41">tmp</name></expr></argument>, <argument pos:start="63:44" pos:end="63:47"><expr pos:start="63:44" pos:end="63:47"><name pos:start="63:44" pos:end="63:47">tmp2</name></expr></argument>, <argument pos:start="63:50" pos:end="63:54"><expr pos:start="63:50" pos:end="63:54"><name pos:start="63:50" pos:end="63:54">avctx</name></expr></argument>, <argument pos:start="63:57" pos:end="63:60"><expr pos:start="63:57" pos:end="63:60"><name pos:start="63:57" pos:end="63:60">type</name></expr></argument>)</argument_list></call> <operator pos:start="63:63" pos:end="63:63">&lt;</operator> <literal type="number" pos:start="63:65" pos:end="63:65">0</literal></expr>)</condition><block pos:start="63:67" pos:end="71:9">{<block_content pos:start="65:13" pos:end="69:18">

            <expr_stmt pos:start="65:13" pos:end="65:120"><expr pos:start="65:13" pos:end="65:119"><call pos:start="65:13" pos:end="65:119"><name pos:start="65:13" pos:end="65:19">fprintf</name><argument_list pos:start="65:20" pos:end="65:119">(<argument pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:26">stderr</name></expr></argument>, <argument pos:start="65:29" pos:end="65:91"><expr pos:start="65:29" pos:end="65:91"><literal type="string" pos:start="65:29" pos:end="65:91">"%s: Invalid option or argument: '%s', parsed as '%s' = '%s'\n"</literal></expr></argument>, <argument pos:start="65:94" pos:end="65:101"><expr pos:start="65:94" pos:end="65:101"><name pos:start="65:94" pos:end="65:101">filename</name></expr></argument>, <argument pos:start="65:104" pos:end="65:107"><expr pos:start="65:104" pos:end="65:107"><name pos:start="65:104" pos:end="65:107">line</name></expr></argument>, <argument pos:start="65:110" pos:end="65:112"><expr pos:start="65:110" pos:end="65:112"><name pos:start="65:110" pos:end="65:112">tmp</name></expr></argument>, <argument pos:start="65:115" pos:end="65:118"><expr pos:start="65:115" pos:end="65:118"><name pos:start="65:115" pos:end="65:118">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:20"><expr pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <literal type="number" pos:start="67:19" pos:end="67:19">1</literal></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="77:5" pos:end="77:14"><expr pos:start="77:5" pos:end="77:13"><call pos:start="77:5" pos:end="77:13"><name pos:start="77:5" pos:end="77:10">fclose</name><argument_list pos:start="77:11" pos:end="77:13">(<argument pos:start="77:12" pos:end="77:12"><expr pos:start="77:12" pos:end="77:12"><name pos:start="77:12" pos:end="77:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
