<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/998.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">ff_listen_connect</name><parameter_list pos:start="1:22" pos:end="3:68">(<parameter pos:start="1:23" pos:end="1:28"><decl pos:start="1:23" pos:end="1:28"><type pos:start="1:23" pos:end="1:28"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:28">fd</name></decl></parameter>, <parameter pos:start="1:31" pos:end="1:57"><decl pos:start="1:31" pos:end="1:57"><type pos:start="1:31" pos:end="1:57"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:51"><name pos:start="1:37" pos:end="1:42">struct</name> <name pos:start="1:44" pos:end="1:51">sockaddr</name></name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">addr</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:39"><decl pos:start="3:23" pos:end="3:39"><type pos:start="3:23" pos:end="3:39"><name pos:start="3:23" pos:end="3:31">socklen_t</name></type> <name pos:start="3:33" pos:end="3:39">addrlen</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:52"><decl pos:start="3:42" pos:end="3:52"><type pos:start="3:42" pos:end="3:52"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:52">timeout</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:67"><decl pos:start="3:55" pos:end="3:67"><type pos:start="3:55" pos:end="3:67"><name pos:start="3:55" pos:end="3:64">URLContext</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:67">h</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="87:1">{<block_content pos:start="7:5" pos:end="85:15">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:17">pollfd</name></name></type> <name pos:start="7:19" pos:end="7:19">p</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><block pos:start="7:23" pos:end="7:38">{<expr pos:start="7:24" pos:end="7:25"><name pos:start="7:24" pos:end="7:25">fd</name></expr>, <expr pos:start="7:28" pos:end="7:34"><name pos:start="7:28" pos:end="7:34">POLLOUT</name></expr>, <expr pos:start="7:37" pos:end="7:37"><literal type="number" pos:start="7:37" pos:end="7:37">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">socklen_t</name></type> <name pos:start="11:15" pos:end="11:20">optlen</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><call pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:22">ff_socket_nonblock</name><argument_list pos:start="15:23" pos:end="15:29">(<argument pos:start="15:24" pos:end="15:25"><expr pos:start="15:24" pos:end="15:25"><name pos:start="15:24" pos:end="15:25">fd</name></expr></argument>, <argument pos:start="15:28" pos:end="15:28"><expr pos:start="15:28" pos:end="15:28"><literal type="number" pos:start="15:28" pos:end="15:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="19:5" pos:end="83:5">while <condition pos:start="19:11" pos:end="19:46">(<expr pos:start="19:12" pos:end="19:45"><operator pos:start="19:12" pos:end="19:12">(</operator><name pos:start="19:13" pos:end="19:15">ret</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <call pos:start="19:19" pos:end="19:44"><name pos:start="19:19" pos:end="19:25">connect</name><argument_list pos:start="19:26" pos:end="19:44">(<argument pos:start="19:27" pos:end="19:28"><expr pos:start="19:27" pos:end="19:28"><name pos:start="19:27" pos:end="19:28">fd</name></expr></argument>, <argument pos:start="19:31" pos:end="19:34"><expr pos:start="19:31" pos:end="19:34"><name pos:start="19:31" pos:end="19:34">addr</name></expr></argument>, <argument pos:start="19:37" pos:end="19:43"><expr pos:start="19:37" pos:end="19:43"><name pos:start="19:37" pos:end="19:43">addrlen</name></expr></argument>)</argument_list></call><operator pos:start="19:45" pos:end="19:45">)</operator></expr>)</condition> <block pos:start="19:48" pos:end="83:5">{<block_content pos:start="21:9" pos:end="81:9">

        <expr_stmt pos:start="21:9" pos:end="21:28"><expr pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:27"><name pos:start="21:15" pos:end="21:25">ff_neterrno</name><argument_list pos:start="21:26" pos:end="21:27">()</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="23:9" pos:end="81:9">switch <condition pos:start="23:16" pos:end="23:20">(<expr pos:start="23:17" pos:end="23:19"><name pos:start="23:17" pos:end="23:19">ret</name></expr>)</condition> <block pos:start="23:22" pos:end="81:9">{<block_content pos:start="25:9" pos:end="79:23">

        <case pos:start="25:9" pos:end="25:28">case <expr pos:start="25:14" pos:end="25:27"><call pos:start="25:14" pos:end="25:27"><name pos:start="25:14" pos:end="25:20">AVERROR</name><argument_list pos:start="25:21" pos:end="25:27">(<argument pos:start="25:22" pos:end="25:26"><expr pos:start="25:22" pos:end="25:26"><name pos:start="25:22" pos:end="25:26">EINTR</name></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="27:13" pos:end="29:36"><if pos:start="27:13" pos:end="29:36">if <condition pos:start="27:16" pos:end="27:59">(<expr pos:start="27:17" pos:end="27:58"><call pos:start="27:17" pos:end="27:58"><name pos:start="27:17" pos:end="27:34">ff_check_interrupt</name><argument_list pos:start="27:35" pos:end="27:58">(<argument pos:start="27:36" pos:end="27:57"><expr pos:start="27:36" pos:end="27:57"><operator pos:start="27:36" pos:end="27:36">&amp;</operator><name pos:start="27:37" pos:end="27:57"><name pos:start="27:37" pos:end="27:37">h</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:57">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="29:17" pos:end="29:36"><block_content pos:start="29:17" pos:end="29:36">

                <return pos:start="29:17" pos:end="29:36">return <expr pos:start="29:24" pos:end="29:35"><name pos:start="29:24" pos:end="29:35">AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

            <continue pos:start="31:13" pos:end="31:21">continue;</continue>

        <case pos:start="33:9" pos:end="33:34">case <expr pos:start="33:14" pos:end="33:33"><call pos:start="33:14" pos:end="33:33"><name pos:start="33:14" pos:end="33:20">AVERROR</name><argument_list pos:start="33:21" pos:end="33:33">(<argument pos:start="33:22" pos:end="33:32"><expr pos:start="33:22" pos:end="33:32"><name pos:start="33:22" pos:end="33:32">EINPROGRESS</name></expr></argument>)</argument_list></call></expr>:</case>

        <case pos:start="35:9" pos:end="35:29">case <expr pos:start="35:14" pos:end="35:28"><call pos:start="35:14" pos:end="35:28"><name pos:start="35:14" pos:end="35:20">AVERROR</name><argument_list pos:start="35:21" pos:end="35:28">(<argument pos:start="35:22" pos:end="35:27"><expr pos:start="35:22" pos:end="35:27"><name pos:start="35:22" pos:end="35:27">EAGAIN</name></expr></argument>)</argument_list></call></expr>:</case>

            <while pos:start="37:13" pos:end="49:13">while <condition pos:start="37:19" pos:end="37:29">(<expr pos:start="37:20" pos:end="37:28"><name pos:start="37:20" pos:end="37:26">timeout</name><operator pos:start="37:27" pos:end="37:28">--</operator></expr>)</condition> <block pos:start="37:31" pos:end="49:13">{<block_content pos:start="39:17" pos:end="47:26">

                <if_stmt pos:start="39:17" pos:end="41:40"><if pos:start="39:17" pos:end="41:40">if <condition pos:start="39:20" pos:end="39:63">(<expr pos:start="39:21" pos:end="39:62"><call pos:start="39:21" pos:end="39:62"><name pos:start="39:21" pos:end="39:38">ff_check_interrupt</name><argument_list pos:start="39:39" pos:end="39:62">(<argument pos:start="39:40" pos:end="39:61"><expr pos:start="39:40" pos:end="39:61"><operator pos:start="39:40" pos:end="39:40">&amp;</operator><name pos:start="39:41" pos:end="39:61"><name pos:start="39:41" pos:end="39:41">h</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:61">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="41:21" pos:end="41:40"><block_content pos:start="41:21" pos:end="41:40">

                    <return pos:start="41:21" pos:end="41:40">return <expr pos:start="41:28" pos:end="41:39"><name pos:start="41:28" pos:end="41:39">AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:39"><expr pos:start="43:17" pos:end="43:38"><name pos:start="43:17" pos:end="43:19">ret</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:38"><name pos:start="43:23" pos:end="43:26">poll</name><argument_list pos:start="43:27" pos:end="43:38">(<argument pos:start="43:28" pos:end="43:29"><expr pos:start="43:28" pos:end="43:29"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:29">p</name></expr></argument>, <argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><literal type="number" pos:start="43:32" pos:end="43:32">1</literal></expr></argument>, <argument pos:start="43:35" pos:end="43:37"><expr pos:start="43:35" pos:end="43:37"><literal type="number" pos:start="43:35" pos:end="43:37">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="45:17" pos:end="47:26"><if pos:start="45:17" pos:end="47:26">if <condition pos:start="45:20" pos:end="45:28">(<expr pos:start="45:21" pos:end="45:27"><name pos:start="45:21" pos:end="45:23">ret</name> <operator pos:start="45:25" pos:end="45:25">&gt;</operator> <literal type="number" pos:start="45:27" pos:end="45:27">0</literal></expr>)</condition><block type="pseudo" pos:start="47:21" pos:end="47:26"><block_content pos:start="47:21" pos:end="47:26">

                    <break pos:start="47:21" pos:end="47:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></while>

            <if_stmt pos:start="51:13" pos:end="53:42"><if pos:start="51:13" pos:end="53:42">if <condition pos:start="51:16" pos:end="51:25">(<expr pos:start="51:17" pos:end="51:24"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:22">&lt;=</operator> <literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:42"><block_content pos:start="53:17" pos:end="53:42">

                <return pos:start="53:17" pos:end="53:42">return <expr pos:start="53:24" pos:end="53:41"><call pos:start="53:24" pos:end="53:41"><name pos:start="53:24" pos:end="53:30">AVERROR</name><argument_list pos:start="53:31" pos:end="53:41">(<argument pos:start="53:32" pos:end="53:40"><expr pos:start="53:32" pos:end="53:40"><name pos:start="53:32" pos:end="53:40">ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:33"><expr pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:18">optlen</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <sizeof pos:start="55:22" pos:end="55:32">sizeof<argument_list pos:start="55:28" pos:end="55:32">(<argument pos:start="55:29" pos:end="55:31"><expr pos:start="55:29" pos:end="55:31"><name pos:start="55:29" pos:end="55:31">ret</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="59:47"><if pos:start="57:13" pos:end="59:47">if <condition pos:start="57:16" pos:end="57:69">(<expr pos:start="57:17" pos:end="57:68"><call pos:start="57:17" pos:end="57:68"><name pos:start="57:17" pos:end="57:26">getsockopt</name> <argument_list pos:start="57:28" pos:end="57:68">(<argument pos:start="57:29" pos:end="57:30"><expr pos:start="57:29" pos:end="57:30"><name pos:start="57:29" pos:end="57:30">fd</name></expr></argument>, <argument pos:start="57:33" pos:end="57:42"><expr pos:start="57:33" pos:end="57:42"><name pos:start="57:33" pos:end="57:42">SOL_SOCKET</name></expr></argument>, <argument pos:start="57:45" pos:end="57:52"><expr pos:start="57:45" pos:end="57:52"><name pos:start="57:45" pos:end="57:52">SO_ERROR</name></expr></argument>, <argument pos:start="57:55" pos:end="57:58"><expr pos:start="57:55" pos:end="57:58"><operator pos:start="57:55" pos:end="57:55">&amp;</operator><name pos:start="57:56" pos:end="57:58">ret</name></expr></argument>, <argument pos:start="57:61" pos:end="57:67"><expr pos:start="57:61" pos:end="57:67"><operator pos:start="57:61" pos:end="57:61">&amp;</operator><name pos:start="57:62" pos:end="57:67">optlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:47"><block_content pos:start="59:17" pos:end="59:47">

                <expr_stmt pos:start="59:17" pos:end="59:47"><expr pos:start="59:17" pos:end="59:46"><name pos:start="59:17" pos:end="59:19">ret</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <call pos:start="59:23" pos:end="59:46"><name pos:start="59:23" pos:end="59:31">AVUNERROR</name><argument_list pos:start="59:32" pos:end="59:46">(<argument pos:start="59:33" pos:end="59:45"><expr pos:start="59:33" pos:end="59:45"><call pos:start="59:33" pos:end="59:45"><name pos:start="59:33" pos:end="59:43">ff_neterrno</name><argument_list pos:start="59:44" pos:end="59:45">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="61:13" pos:end="75:13"><if pos:start="61:13" pos:end="75:13">if <condition pos:start="61:16" pos:end="61:25">(<expr pos:start="61:17" pos:end="61:24"><name pos:start="61:17" pos:end="61:19">ret</name> <operator pos:start="61:21" pos:end="61:22">!=</operator> <literal type="number" pos:start="61:24" pos:end="61:24">0</literal></expr>)</condition> <block pos:start="61:27" pos:end="75:13">{<block_content pos:start="63:17" pos:end="73:44">

                <decl_stmt pos:start="63:17" pos:end="63:33"><decl pos:start="63:17" pos:end="63:32"><type pos:start="63:17" pos:end="63:20"><name pos:start="63:17" pos:end="63:20">char</name></type> <name pos:start="63:22" pos:end="63:32"><name pos:start="63:22" pos:end="63:27">errbuf</name><index pos:start="63:28" pos:end="63:32">[<expr pos:start="63:29" pos:end="63:31"><literal type="number" pos:start="63:29" pos:end="63:31">100</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:35"><expr pos:start="65:17" pos:end="65:34"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:29">AVERROR</name><argument_list pos:start="65:30" pos:end="65:34">(<argument pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><name pos:start="65:31" pos:end="65:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:57"><expr pos:start="67:17" pos:end="67:56"><call pos:start="67:17" pos:end="67:56"><name pos:start="67:17" pos:end="67:27">av_strerror</name><argument_list pos:start="67:28" pos:end="67:56">(<argument pos:start="67:29" pos:end="67:31"><expr pos:start="67:29" pos:end="67:31"><name pos:start="67:29" pos:end="67:31">ret</name></expr></argument>, <argument pos:start="67:34" pos:end="67:39"><expr pos:start="67:34" pos:end="67:39"><name pos:start="67:34" pos:end="67:39">errbuf</name></expr></argument>, <argument pos:start="67:42" pos:end="67:55"><expr pos:start="67:42" pos:end="67:55"><sizeof pos:start="67:42" pos:end="67:55">sizeof<argument_list pos:start="67:48" pos:end="67:55">(<argument pos:start="67:49" pos:end="67:54"><expr pos:start="67:49" pos:end="67:54"><name pos:start="67:49" pos:end="67:54">errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="73:44"><expr pos:start="69:17" pos:end="73:43"><call pos:start="69:17" pos:end="73:43"><name pos:start="69:17" pos:end="69:22">av_log</name><argument_list pos:start="69:23" pos:end="73:43">(<argument pos:start="69:24" pos:end="69:24"><expr pos:start="69:24" pos:end="69:24"><name pos:start="69:24" pos:end="69:24">h</name></expr></argument>, <argument pos:start="69:27" pos:end="69:38"><expr pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:38">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="71:24" pos:end="71:54"><expr pos:start="71:24" pos:end="71:54"><literal type="string" pos:start="71:24" pos:end="71:54">"Connection to %s failed: %s\n"</literal></expr></argument>,

                       <argument pos:start="73:24" pos:end="73:34"><expr pos:start="73:24" pos:end="73:34"><name pos:start="73:24" pos:end="73:34"><name pos:start="73:24" pos:end="73:24">h</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:34">filename</name></name></expr></argument>, <argument pos:start="73:37" pos:end="73:42"><expr pos:start="73:37" pos:end="73:42"><name pos:start="73:37" pos:end="73:42">errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        <default pos:start="77:9" pos:end="77:16">default:</default>

            <return pos:start="79:13" pos:end="79:23">return <expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">ret</name></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>

    <return pos:start="85:5" pos:end="85:15">return <expr pos:start="85:12" pos:end="85:14"><name pos:start="85:12" pos:end="85:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
