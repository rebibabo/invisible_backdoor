<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18606.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qcow2_create2</name><parameter_list pos:start="1:25" pos:end="7:54">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><specifier pos:start="1:26" pos:end="1:30">const</specifier> <name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:45">filename</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><name pos:start="1:48" pos:end="1:54">int64_t</name></type> <name pos:start="1:56" pos:end="1:65">total_size</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:49"><decl pos:start="3:26" pos:end="3:49"><type pos:start="3:26" pos:end="3:49"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:35">char</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:49">backing_file</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:77"><decl pos:start="3:52" pos:end="3:77"><type pos:start="3:52" pos:end="3:77"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:61">char</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:77">backing_format</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:34"><decl pos:start="5:26" pos:end="5:34"><type pos:start="5:26" pos:end="5:34"><name pos:start="5:26" pos:end="5:28">int</name></type> <name pos:start="5:30" pos:end="5:34">flags</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:55"><decl pos:start="5:37" pos:end="5:55"><type pos:start="5:37" pos:end="5:55"><name pos:start="5:37" pos:end="5:42">size_t</name></type> <name pos:start="5:44" pos:end="5:55">cluster_size</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:69"><decl pos:start="5:58" pos:end="5:69"><type pos:start="5:58" pos:end="5:69"><name pos:start="5:58" pos:end="5:60">int</name></type> <name pos:start="5:62" pos:end="5:69">prealloc</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:53"><decl pos:start="7:26" pos:end="7:53"><type pos:start="7:26" pos:end="7:53"><name pos:start="7:26" pos:end="7:44">QEMUOptionParameter</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier></type><name pos:start="7:47" pos:end="7:53">options</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="251:1">{<block_content pos:start="13:5" pos:end="249:15">

    <comment type="block" pos:start="11:5" pos:end="11:32">/* Calculate cluster_bits */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">cluster_bits</name></decl>;</decl_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:41"><expr pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:16">cluster_bits</name> <operator pos:start="15:18" pos:end="15:18">=</operator> <call pos:start="15:20" pos:end="15:36"><name pos:start="15:20" pos:end="15:22">ffs</name><argument_list pos:start="15:23" pos:end="15:36">(<argument pos:start="15:24" pos:end="15:35"><expr pos:start="15:24" pos:end="15:35"><name pos:start="15:24" pos:end="15:35">cluster_size</name></expr></argument>)</argument_list></call> <operator pos:start="15:38" pos:end="15:38">-</operator> <literal type="number" pos:start="15:40" pos:end="15:40">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="19:44">(<expr pos:start="17:9" pos:end="19:43"><name pos:start="17:9" pos:end="17:57"><name pos:start="17:9" pos:end="17:20">cluster_bits</name> <argument_list type="generic" pos:start="17:22" pos:end="17:57">&lt; <argument pos:start="17:24" pos:end="17:55"><expr pos:start="17:24" pos:end="17:55"><name pos:start="17:24" pos:end="17:39">MIN_CLUSTER_BITS</name> <operator pos:start="17:41" pos:end="17:42">||</operator> <name pos:start="17:44" pos:end="17:55">cluster_bits</name></expr></argument> &gt;</argument_list></name> <name pos:start="17:59" pos:end="17:74">MAX_CLUSTER_BITS</name> <operator pos:start="17:76" pos:end="17:77">||</operator>

        <operator pos:start="19:9" pos:end="19:9">(</operator><literal type="number" pos:start="19:10" pos:end="19:10">1</literal> <operator pos:start="19:12" pos:end="19:13">&lt;&lt;</operator> <name pos:start="19:15" pos:end="19:26">cluster_bits</name><operator pos:start="19:27" pos:end="19:27">)</operator> <operator pos:start="19:29" pos:end="19:30">!=</operator> <name pos:start="19:32" pos:end="19:43">cluster_size</name></expr>)</condition>

    <block pos:start="21:5" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:23">

        <expr_stmt pos:start="23:9" pos:end="27:65"><expr pos:start="23:9" pos:end="27:64"><call pos:start="23:9" pos:end="27:64"><name pos:start="23:9" pos:end="23:20">error_report</name><argument_list pos:start="23:21" pos:end="27:64">(

            <argument pos:start="25:13" pos:end="25:68"><expr pos:start="25:13" pos:end="25:68"><literal type="string" pos:start="25:13" pos:end="25:68">"Cluster size must be a power of two between %d and %dk"</literal></expr></argument>,

            <argument pos:start="27:13" pos:end="27:33"><expr pos:start="27:13" pos:end="27:33"><literal type="number" pos:start="27:13" pos:end="27:13">1</literal> <operator pos:start="27:15" pos:end="27:16">&lt;&lt;</operator> <name pos:start="27:18" pos:end="27:33">MIN_CLUSTER_BITS</name></expr></argument>, <argument pos:start="27:36" pos:end="27:63"><expr pos:start="27:36" pos:end="27:63"><literal type="number" pos:start="27:36" pos:end="27:36">1</literal> <operator pos:start="27:38" pos:end="27:39">&lt;&lt;</operator> <operator pos:start="27:41" pos:end="27:41">(</operator><name pos:start="27:42" pos:end="27:57">MAX_CLUSTER_BITS</name> <operator pos:start="27:59" pos:end="27:59">-</operator> <literal type="number" pos:start="27:61" pos:end="27:62">10</literal><operator pos:start="27:63" pos:end="27:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="57:7">/*

     * Open the image file and write a minimal qcow2 header.

     *

     * We keep things simple and start with a zero-sized image. We also

     * do without refcount blocks or a L1 table for now. We'll fix the

     * inconsistency later.

     *

     * We do need a refcount table because growing the refcount table means

     * allocating two new refcount blocks - the seconds of which would be at

     * 2 GB for 64k clusters, and we don't want to have a 2 GB initial file

     * size for any qcow2 image.

     */</comment>

    <decl_stmt pos:start="59:5" pos:end="59:25"><decl pos:start="59:5" pos:end="59:24"><type pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:20">BlockDriverState</name><modifier pos:start="59:21" pos:end="59:21">*</modifier></type> <name pos:start="59:23" pos:end="59:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:22"><decl pos:start="61:5" pos:end="61:21"><type pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:14">QCowHeader</name></type> <name pos:start="61:16" pos:end="61:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:28"><decl pos:start="63:5" pos:end="63:27"><type pos:start="63:5" pos:end="63:12"><name pos:start="63:5" pos:end="63:11">uint8_t</name><modifier pos:start="63:12" pos:end="63:12">*</modifier></type> <name pos:start="63:14" pos:end="63:27">refcount_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:12"><decl pos:start="65:5" pos:end="65:11"><type pos:start="65:5" pos:end="65:7"><name pos:start="65:5" pos:end="65:7">int</name></type> <name pos:start="65:9" pos:end="65:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:46"><expr pos:start="69:5" pos:end="69:45"><name pos:start="69:5" pos:end="69:7">ret</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:45"><name pos:start="69:11" pos:end="69:26">bdrv_create_file</name><argument_list pos:start="69:27" pos:end="69:45">(<argument pos:start="69:28" pos:end="69:35"><expr pos:start="69:28" pos:end="69:35"><name pos:start="69:28" pos:end="69:35">filename</name></expr></argument>, <argument pos:start="69:38" pos:end="69:44"><expr pos:start="69:38" pos:end="69:44"><name pos:start="69:38" pos:end="69:44">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:16">(<expr pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">&lt;</operator> <literal type="number" pos:start="71:15" pos:end="71:15">0</literal></expr>)</condition> <block pos:start="71:18" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:19">

        <return pos:start="73:9" pos:end="73:19">return <expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:53"><expr pos:start="79:5" pos:end="79:52"><name pos:start="79:5" pos:end="79:7">ret</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:52"><name pos:start="79:11" pos:end="79:24">bdrv_file_open</name><argument_list pos:start="79:25" pos:end="79:52">(<argument pos:start="79:26" pos:end="79:28"><expr pos:start="79:26" pos:end="79:28"><operator pos:start="79:26" pos:end="79:26">&amp;</operator><name pos:start="79:27" pos:end="79:28">bs</name></expr></argument>, <argument pos:start="79:31" pos:end="79:38"><expr pos:start="79:31" pos:end="79:38"><name pos:start="79:31" pos:end="79:38">filename</name></expr></argument>, <argument pos:start="79:41" pos:end="79:51"><expr pos:start="79:41" pos:end="79:51"><name pos:start="79:41" pos:end="79:51">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:16">(<expr pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">&lt;</operator> <literal type="number" pos:start="81:15" pos:end="81:15">0</literal></expr>)</condition> <block pos:start="81:18" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:19">

        <return pos:start="83:9" pos:end="83:19">return <expr pos:start="83:16" pos:end="83:18"><name pos:start="83:16" pos:end="83:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:26">/* Write the header */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:39"><expr pos:start="91:5" pos:end="91:38"><call pos:start="91:5" pos:end="91:38"><name pos:start="91:5" pos:end="91:10">memset</name><argument_list pos:start="91:11" pos:end="91:38">(<argument pos:start="91:12" pos:end="91:18"><expr pos:start="91:12" pos:end="91:18"><operator pos:start="91:12" pos:end="91:12">&amp;</operator><name pos:start="91:13" pos:end="91:18">header</name></expr></argument>, <argument pos:start="91:21" pos:end="91:21"><expr pos:start="91:21" pos:end="91:21"><literal type="number" pos:start="91:21" pos:end="91:21">0</literal></expr></argument>, <argument pos:start="91:24" pos:end="91:37"><expr pos:start="91:24" pos:end="91:37"><sizeof pos:start="91:24" pos:end="91:37">sizeof<argument_list pos:start="91:30" pos:end="91:37">(<argument pos:start="91:31" pos:end="91:36"><expr pos:start="91:31" pos:end="91:36"><name pos:start="91:31" pos:end="91:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:43"><expr pos:start="93:5" pos:end="93:42"><name pos:start="93:5" pos:end="93:16"><name pos:start="93:5" pos:end="93:10">header</name><operator pos:start="93:11" pos:end="93:11">.</operator><name pos:start="93:12" pos:end="93:16">magic</name></name> <operator pos:start="93:18" pos:end="93:18">=</operator> <call pos:start="93:20" pos:end="93:42"><name pos:start="93:20" pos:end="93:30">cpu_to_be32</name><argument_list pos:start="93:31" pos:end="93:42">(<argument pos:start="93:32" pos:end="93:41"><expr pos:start="93:32" pos:end="93:41"><name pos:start="93:32" pos:end="93:41">QCOW_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:47"><expr pos:start="95:5" pos:end="95:46"><name pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:10">header</name><operator pos:start="95:11" pos:end="95:11">.</operator><name pos:start="95:12" pos:end="95:18">version</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <call pos:start="95:22" pos:end="95:46"><name pos:start="95:22" pos:end="95:32">cpu_to_be32</name><argument_list pos:start="95:33" pos:end="95:46">(<argument pos:start="95:34" pos:end="95:45"><expr pos:start="95:34" pos:end="95:45"><name pos:start="95:34" pos:end="95:45">QCOW_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:52"><expr pos:start="97:5" pos:end="97:51"><name pos:start="97:5" pos:end="97:23"><name pos:start="97:5" pos:end="97:10">header</name><operator pos:start="97:11" pos:end="97:11">.</operator><name pos:start="97:12" pos:end="97:23">cluster_bits</name></name> <operator pos:start="97:25" pos:end="97:25">=</operator> <call pos:start="97:27" pos:end="97:51"><name pos:start="97:27" pos:end="97:37">cpu_to_be32</name><argument_list pos:start="97:38" pos:end="97:51">(<argument pos:start="97:39" pos:end="97:50"><expr pos:start="97:39" pos:end="97:50"><name pos:start="97:39" pos:end="97:50">cluster_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:33"><expr pos:start="99:5" pos:end="99:32"><name pos:start="99:5" pos:end="99:15"><name pos:start="99:5" pos:end="99:10">header</name><operator pos:start="99:11" pos:end="99:11">.</operator><name pos:start="99:12" pos:end="99:15">size</name></name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:32"><name pos:start="99:19" pos:end="99:29">cpu_to_be64</name><argument_list pos:start="99:30" pos:end="99:32">(<argument pos:start="99:31" pos:end="99:31"><expr pos:start="99:31" pos:end="99:31"><literal type="number" pos:start="99:31" pos:end="99:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:44"><expr pos:start="101:5" pos:end="101:43"><name pos:start="101:5" pos:end="101:26"><name pos:start="101:5" pos:end="101:10">header</name><operator pos:start="101:11" pos:end="101:11">.</operator><name pos:start="101:12" pos:end="101:26">l1_table_offset</name></name> <operator pos:start="101:28" pos:end="101:28">=</operator> <call pos:start="101:30" pos:end="101:43"><name pos:start="101:30" pos:end="101:40">cpu_to_be64</name><argument_list pos:start="101:41" pos:end="101:43">(<argument pos:start="101:42" pos:end="101:42"><expr pos:start="101:42" pos:end="101:42"><literal type="number" pos:start="101:42" pos:end="101:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:36"><expr pos:start="103:5" pos:end="103:35"><name pos:start="103:5" pos:end="103:18"><name pos:start="103:5" pos:end="103:10">header</name><operator pos:start="103:11" pos:end="103:11">.</operator><name pos:start="103:12" pos:end="103:18">l1_size</name></name> <operator pos:start="103:20" pos:end="103:20">=</operator> <call pos:start="103:22" pos:end="103:35"><name pos:start="103:22" pos:end="103:32">cpu_to_be32</name><argument_list pos:start="103:33" pos:end="103:35">(<argument pos:start="103:34" pos:end="103:34"><expr pos:start="103:34" pos:end="103:34"><literal type="number" pos:start="103:34" pos:end="103:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:61"><expr pos:start="105:5" pos:end="105:60"><name pos:start="105:5" pos:end="105:32"><name pos:start="105:5" pos:end="105:10">header</name><operator pos:start="105:11" pos:end="105:11">.</operator><name pos:start="105:12" pos:end="105:32">refcount_table_offset</name></name> <operator pos:start="105:34" pos:end="105:34">=</operator> <call pos:start="105:36" pos:end="105:60"><name pos:start="105:36" pos:end="105:46">cpu_to_be64</name><argument_list pos:start="105:47" pos:end="105:60">(<argument pos:start="105:48" pos:end="105:59"><expr pos:start="105:48" pos:end="105:59"><name pos:start="105:48" pos:end="105:59">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:52"><expr pos:start="107:5" pos:end="107:51"><name pos:start="107:5" pos:end="107:34"><name pos:start="107:5" pos:end="107:10">header</name><operator pos:start="107:11" pos:end="107:11">.</operator><name pos:start="107:12" pos:end="107:34">refcount_table_clusters</name></name> <operator pos:start="107:36" pos:end="107:36">=</operator> <call pos:start="107:38" pos:end="107:51"><name pos:start="107:38" pos:end="107:48">cpu_to_be32</name><argument_list pos:start="107:49" pos:end="107:51">(<argument pos:start="107:50" pos:end="107:50"><expr pos:start="107:50" pos:end="107:50"><literal type="number" pos:start="107:50" pos:end="107:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="111:5" pos:end="119:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:35">(<expr pos:start="111:9" pos:end="111:34"><name pos:start="111:9" pos:end="111:13">flags</name> <operator pos:start="111:15" pos:end="111:15">&amp;</operator> <name pos:start="111:17" pos:end="111:34">BLOCK_FLAG_ENCRYPT</name></expr>)</condition> <block pos:start="111:37" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:58">

        <expr_stmt pos:start="113:9" pos:end="113:58"><expr pos:start="113:9" pos:end="113:57"><name pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:14">header</name><operator pos:start="113:15" pos:end="113:15">.</operator><name pos:start="113:16" pos:end="113:27">crypt_method</name></name> <operator pos:start="113:29" pos:end="113:29">=</operator> <call pos:start="113:31" pos:end="113:57"><name pos:start="113:31" pos:end="113:41">cpu_to_be32</name><argument_list pos:start="113:42" pos:end="113:57">(<argument pos:start="113:43" pos:end="113:56"><expr pos:start="113:43" pos:end="113:56"><name pos:start="113:43" pos:end="113:56">QCOW_CRYPT_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="119:5">else <block pos:start="115:12" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:59">

        <expr_stmt pos:start="117:9" pos:end="117:59"><expr pos:start="117:9" pos:end="117:58"><name pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:14">header</name><operator pos:start="117:15" pos:end="117:15">.</operator><name pos:start="117:16" pos:end="117:27">crypt_method</name></name> <operator pos:start="117:29" pos:end="117:29">=</operator> <call pos:start="117:31" pos:end="117:58"><name pos:start="117:31" pos:end="117:41">cpu_to_be32</name><argument_list pos:start="117:42" pos:end="117:58">(<argument pos:start="117:43" pos:end="117:57"><expr pos:start="117:43" pos:end="117:57"><name pos:start="117:43" pos:end="117:57">QCOW_CRYPT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:54"><expr pos:start="123:5" pos:end="123:53"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:53"><name pos:start="123:11" pos:end="123:21">bdrv_pwrite</name><argument_list pos:start="123:22" pos:end="123:53">(<argument pos:start="123:23" pos:end="123:24"><expr pos:start="123:23" pos:end="123:24"><name pos:start="123:23" pos:end="123:24">bs</name></expr></argument>, <argument pos:start="123:27" pos:end="123:27"><expr pos:start="123:27" pos:end="123:27"><literal type="number" pos:start="123:27" pos:end="123:27">0</literal></expr></argument>, <argument pos:start="123:30" pos:end="123:36"><expr pos:start="123:30" pos:end="123:36"><operator pos:start="123:30" pos:end="123:30">&amp;</operator><name pos:start="123:31" pos:end="123:36">header</name></expr></argument>, <argument pos:start="123:39" pos:end="123:52"><expr pos:start="123:39" pos:end="123:52"><sizeof pos:start="123:39" pos:end="123:52">sizeof<argument_list pos:start="123:45" pos:end="123:52">(<argument pos:start="123:46" pos:end="123:51"><expr pos:start="123:46" pos:end="123:51"><name pos:start="123:46" pos:end="123:51">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:16">(<expr pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">&lt;</operator> <literal type="number" pos:start="125:15" pos:end="125:15">0</literal></expr>)</condition> <block pos:start="125:18" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:17">

        <goto pos:start="127:9" pos:end="127:17">goto <name pos:start="127:14" pos:end="127:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:39">/* Write an empty refcount table */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:45"><expr pos:start="135:5" pos:end="135:44"><name pos:start="135:5" pos:end="135:18">refcount_table</name> <operator pos:start="135:20" pos:end="135:20">=</operator> <call pos:start="135:22" pos:end="135:44"><name pos:start="135:22" pos:end="135:30">g_malloc0</name><argument_list pos:start="135:31" pos:end="135:44">(<argument pos:start="135:32" pos:end="135:43"><expr pos:start="135:32" pos:end="135:43"><name pos:start="135:32" pos:end="135:43">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:70"><expr pos:start="137:5" pos:end="137:69"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:69"><name pos:start="137:11" pos:end="137:21">bdrv_pwrite</name><argument_list pos:start="137:22" pos:end="137:69">(<argument pos:start="137:23" pos:end="137:24"><expr pos:start="137:23" pos:end="137:24"><name pos:start="137:23" pos:end="137:24">bs</name></expr></argument>, <argument pos:start="137:27" pos:end="137:38"><expr pos:start="137:27" pos:end="137:38"><name pos:start="137:27" pos:end="137:38">cluster_size</name></expr></argument>, <argument pos:start="137:41" pos:end="137:54"><expr pos:start="137:41" pos:end="137:54"><name pos:start="137:41" pos:end="137:54">refcount_table</name></expr></argument>, <argument pos:start="137:57" pos:end="137:68"><expr pos:start="137:57" pos:end="137:68"><name pos:start="137:57" pos:end="137:68">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:27"><expr pos:start="139:5" pos:end="139:26"><call pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:10">g_free</name><argument_list pos:start="139:11" pos:end="139:26">(<argument pos:start="139:12" pos:end="139:25"><expr pos:start="139:12" pos:end="139:25"><name pos:start="139:12" pos:end="139:25">refcount_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="143:5" pos:end="147:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:16">(<expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">&lt;</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>)</condition> <block pos:start="143:18" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:17">

        <goto pos:start="145:9" pos:end="145:17">goto <name pos:start="145:14" pos:end="145:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:19"><expr pos:start="151:5" pos:end="151:18"><call pos:start="151:5" pos:end="151:18"><name pos:start="151:5" pos:end="151:14">bdrv_close</name><argument_list pos:start="151:15" pos:end="151:18">(<argument pos:start="151:16" pos:end="151:17"><expr pos:start="151:16" pos:end="151:17"><name pos:start="151:16" pos:end="151:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="155:5" pos:end="163:7">/*

     * And now open the image and make it consistent first (i.e. increase the

     * refcount of the cluster that is occupied by the header and the refcount

     * table)

     */</comment>

    <decl_stmt pos:start="165:5" pos:end="165:49"><decl pos:start="165:5" pos:end="165:48"><type pos:start="165:5" pos:end="165:16"><name pos:start="165:5" pos:end="165:15">BlockDriver</name><modifier pos:start="165:16" pos:end="165:16">*</modifier></type> <name pos:start="165:18" pos:end="165:20">drv</name> <init pos:start="165:22" pos:end="165:48">= <expr pos:start="165:24" pos:end="165:48"><call pos:start="165:24" pos:end="165:48"><name pos:start="165:24" pos:end="165:39">bdrv_find_format</name><argument_list pos:start="165:40" pos:end="165:48">(<argument pos:start="165:41" pos:end="165:47"><expr pos:start="165:41" pos:end="165:47"><literal type="string" pos:start="165:41" pos:end="165:47">"qcow2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:24"><expr pos:start="167:5" pos:end="167:23"><call pos:start="167:5" pos:end="167:23"><name pos:start="167:5" pos:end="167:10">assert</name><argument_list pos:start="167:11" pos:end="167:23">(<argument pos:start="167:12" pos:end="167:22"><expr pos:start="167:12" pos:end="167:22"><name pos:start="167:12" pos:end="167:14">drv</name> <operator pos:start="167:16" pos:end="167:17">!=</operator> <name pos:start="167:19" pos:end="167:22">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="171:62"><expr pos:start="169:5" pos:end="171:61"><name pos:start="169:5" pos:end="169:7">ret</name> <operator pos:start="169:9" pos:end="169:9">=</operator> <call pos:start="169:11" pos:end="171:61"><name pos:start="169:11" pos:end="169:19">bdrv_open</name><argument_list pos:start="169:20" pos:end="171:61">(<argument pos:start="169:21" pos:end="169:22"><expr pos:start="169:21" pos:end="169:22"><name pos:start="169:21" pos:end="169:22">bs</name></expr></argument>, <argument pos:start="169:25" pos:end="169:32"><expr pos:start="169:25" pos:end="169:32"><name pos:start="169:25" pos:end="169:32">filename</name></expr></argument>,

        <argument pos:start="171:9" pos:end="171:55"><expr pos:start="171:9" pos:end="171:55"><name pos:start="171:9" pos:end="171:19">BDRV_O_RDWR</name> <operator pos:start="171:21" pos:end="171:21">|</operator> <name pos:start="171:23" pos:end="171:37">BDRV_O_CACHE_WB</name> <operator pos:start="171:39" pos:end="171:39">|</operator> <name pos:start="171:41" pos:end="171:55">BDRV_O_NO_FLUSH</name></expr></argument>, <argument pos:start="171:58" pos:end="171:60"><expr pos:start="171:58" pos:end="171:60"><name pos:start="171:58" pos:end="171:60">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="177:5"><if pos:start="173:5" pos:end="177:5">if <condition pos:start="173:8" pos:end="173:16">(<expr pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">&lt;</operator> <literal type="number" pos:start="173:15" pos:end="173:15">0</literal></expr>)</condition> <block pos:start="173:18" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:17">

        <goto pos:start="175:9" pos:end="175:17">goto <name pos:start="175:14" pos:end="175:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:53"><expr pos:start="181:5" pos:end="181:52"><name pos:start="181:5" pos:end="181:7">ret</name> <operator pos:start="181:9" pos:end="181:9">=</operator> <call pos:start="181:11" pos:end="181:52"><name pos:start="181:11" pos:end="181:30">qcow2_alloc_clusters</name><argument_list pos:start="181:31" pos:end="181:52">(<argument pos:start="181:32" pos:end="181:33"><expr pos:start="181:32" pos:end="181:33"><name pos:start="181:32" pos:end="181:33">bs</name></expr></argument>, <argument pos:start="181:36" pos:end="181:51"><expr pos:start="181:36" pos:end="181:51"><literal type="number" pos:start="181:36" pos:end="181:36">2</literal> <operator pos:start="181:38" pos:end="181:38">*</operator> <name pos:start="181:40" pos:end="181:51">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="195:5"><if pos:start="183:5" pos:end="189:5">if <condition pos:start="183:8" pos:end="183:16">(<expr pos:start="183:9" pos:end="183:15"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">&lt;</operator> <literal type="number" pos:start="183:15" pos:end="183:15">0</literal></expr>)</condition> <block pos:start="183:18" pos:end="189:5">{<block_content pos:start="185:9" pos:end="185:17">

        <goto pos:start="185:9" pos:end="185:17">goto <name pos:start="185:14" pos:end="185:16">out</name>;</goto>



    </block_content>}</block></if> <if type="elseif" pos:start="189:7" pos:end="195:5">else if <condition pos:start="189:15" pos:end="189:24">(<expr pos:start="189:16" pos:end="189:23"><name pos:start="189:16" pos:end="189:18">ret</name> <operator pos:start="189:20" pos:end="189:21">!=</operator> <literal type="number" pos:start="189:23" pos:end="189:23">0</literal></expr>)</condition> <block pos:start="189:26" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:16">

        <expr_stmt pos:start="191:9" pos:end="191:77"><expr pos:start="191:9" pos:end="191:76"><call pos:start="191:9" pos:end="191:76"><name pos:start="191:9" pos:end="191:20">error_report</name><argument_list pos:start="191:21" pos:end="191:76">(<argument pos:start="191:22" pos:end="191:75"><expr pos:start="191:22" pos:end="191:75"><literal type="string" pos:start="191:22" pos:end="191:75">"Huh, first cluster in empty image is already in use?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:16"><expr pos:start="193:9" pos:end="193:15"><call pos:start="193:9" pos:end="193:15"><name pos:start="193:9" pos:end="193:13">abort</name><argument_list pos:start="193:14" pos:end="193:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="199:5" pos:end="199:76">/* Okay, now that we have a valid image, let's give it the right size */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:59"><expr pos:start="201:5" pos:end="201:58"><name pos:start="201:5" pos:end="201:7">ret</name> <operator pos:start="201:9" pos:end="201:9">=</operator> <call pos:start="201:11" pos:end="201:58"><name pos:start="201:11" pos:end="201:23">bdrv_truncate</name><argument_list pos:start="201:24" pos:end="201:58">(<argument pos:start="201:25" pos:end="201:26"><expr pos:start="201:25" pos:end="201:26"><name pos:start="201:25" pos:end="201:26">bs</name></expr></argument>, <argument pos:start="201:29" pos:end="201:57"><expr pos:start="201:29" pos:end="201:57"><name pos:start="201:29" pos:end="201:38">total_size</name> <operator pos:start="201:40" pos:end="201:40">*</operator> <name pos:start="201:42" pos:end="201:57">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="207:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:16">(<expr pos:start="203:9" pos:end="203:15"><name pos:start="203:9" pos:end="203:11">ret</name> <operator pos:start="203:13" pos:end="203:13">&lt;</operator> <literal type="number" pos:start="203:15" pos:end="203:15">0</literal></expr>)</condition> <block pos:start="203:18" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:17">

        <goto pos:start="205:9" pos:end="205:17">goto <name pos:start="205:14" pos:end="205:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:43">/* Want a backing file? There you go.*/</comment>

    <if_stmt pos:start="213:5" pos:end="223:5"><if pos:start="213:5" pos:end="223:5">if <condition pos:start="213:8" pos:end="213:21">(<expr pos:start="213:9" pos:end="213:20"><name pos:start="213:9" pos:end="213:20">backing_file</name></expr>)</condition> <block pos:start="213:23" pos:end="223:5">{<block_content pos:start="215:9" pos:end="221:9">

        <expr_stmt pos:start="215:9" pos:end="215:73"><expr pos:start="215:9" pos:end="215:72"><name pos:start="215:9" pos:end="215:11">ret</name> <operator pos:start="215:13" pos:end="215:13">=</operator> <call pos:start="215:15" pos:end="215:72"><name pos:start="215:15" pos:end="215:38">bdrv_change_backing_file</name><argument_list pos:start="215:39" pos:end="215:72">(<argument pos:start="215:40" pos:end="215:41"><expr pos:start="215:40" pos:end="215:41"><name pos:start="215:40" pos:end="215:41">bs</name></expr></argument>, <argument pos:start="215:44" pos:end="215:55"><expr pos:start="215:44" pos:end="215:55"><name pos:start="215:44" pos:end="215:55">backing_file</name></expr></argument>, <argument pos:start="215:58" pos:end="215:71"><expr pos:start="215:58" pos:end="215:71"><name pos:start="215:58" pos:end="215:71">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="217:9" pos:end="221:9"><if pos:start="217:9" pos:end="221:9">if <condition pos:start="217:12" pos:end="217:20">(<expr pos:start="217:13" pos:end="217:19"><name pos:start="217:13" pos:end="217:15">ret</name> <operator pos:start="217:17" pos:end="217:17">&lt;</operator> <literal type="number" pos:start="217:19" pos:end="217:19">0</literal></expr>)</condition> <block pos:start="217:22" pos:end="221:9">{<block_content pos:start="219:13" pos:end="219:21">

            <goto pos:start="219:13" pos:end="219:21">goto <name pos:start="219:18" pos:end="219:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="227:5" pos:end="227:68">/* And if we're supposed to preallocate metadata, do that now */</comment>

    <if_stmt pos:start="229:5" pos:end="239:5"><if pos:start="229:5" pos:end="239:5">if <condition pos:start="229:8" pos:end="229:17">(<expr pos:start="229:9" pos:end="229:16"><name pos:start="229:9" pos:end="229:16">prealloc</name></expr>)</condition> <block pos:start="229:19" pos:end="239:5">{<block_content pos:start="231:9" pos:end="237:9">

        <expr_stmt pos:start="231:9" pos:end="231:30"><expr pos:start="231:9" pos:end="231:29"><name pos:start="231:9" pos:end="231:11">ret</name> <operator pos:start="231:13" pos:end="231:13">=</operator> <call pos:start="231:15" pos:end="231:29"><name pos:start="231:15" pos:end="231:25">preallocate</name><argument_list pos:start="231:26" pos:end="231:29">(<argument pos:start="231:27" pos:end="231:28"><expr pos:start="231:27" pos:end="231:28"><name pos:start="231:27" pos:end="231:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="233:9" pos:end="237:9"><if pos:start="233:9" pos:end="237:9">if <condition pos:start="233:12" pos:end="233:20">(<expr pos:start="233:13" pos:end="233:19"><name pos:start="233:13" pos:end="233:15">ret</name> <operator pos:start="233:17" pos:end="233:17">&lt;</operator> <literal type="number" pos:start="233:19" pos:end="233:19">0</literal></expr>)</condition> <block pos:start="233:22" pos:end="237:9">{<block_content pos:start="235:13" pos:end="235:21">

            <goto pos:start="235:13" pos:end="235:21">goto <name pos:start="235:18" pos:end="235:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:12"><expr pos:start="243:5" pos:end="243:11"><name pos:start="243:5" pos:end="243:7">ret</name> <operator pos:start="243:9" pos:end="243:9">=</operator> <literal type="number" pos:start="243:11" pos:end="243:11">0</literal></expr>;</expr_stmt>

<label pos:start="245:1" pos:end="245:4"><name pos:start="245:1" pos:end="245:3">out</name>:</label>

    <expr_stmt pos:start="247:5" pos:end="247:20"><expr pos:start="247:5" pos:end="247:19"><call pos:start="247:5" pos:end="247:19"><name pos:start="247:5" pos:end="247:15">bdrv_delete</name><argument_list pos:start="247:16" pos:end="247:19">(<argument pos:start="247:17" pos:end="247:18"><expr pos:start="247:17" pos:end="247:18"><name pos:start="247:17" pos:end="247:18">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="249:5" pos:end="249:15">return <expr pos:start="249:12" pos:end="249:14"><name pos:start="249:12" pos:end="249:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
