<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7582.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:42">unix_accept_incoming_migration</name><parameter_list pos:start="1:43" pos:end="1:56">(<parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:49"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">sockaddr_un</name></name></type> <name pos:start="5:24" pos:end="5:27">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">socklen_t</name></type> <name pos:start="7:15" pos:end="7:21">addrlen</name> <init pos:start="7:23" pos:end="7:36">= <expr pos:start="7:25" pos:end="7:36"><sizeof pos:start="7:25" pos:end="7:36">sizeof<argument_list pos:start="7:31" pos:end="7:36">(<argument pos:start="7:32" pos:end="7:35"><expr pos:start="7:32" pos:end="7:35"><name pos:start="7:32" pos:end="7:35">addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">s</name> <init pos:start="9:11" pos:end="9:33">= <expr pos:start="9:13" pos:end="9:33"><operator pos:start="9:13" pos:end="9:13">(</operator><name pos:start="9:14" pos:end="9:21">unsigned</name> <name pos:start="9:23" pos:end="9:26">long</name><operator pos:start="9:27" pos:end="9:27">)</operator><name pos:start="9:28" pos:end="9:33">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">QEMUFile</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:15">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">c</name></decl>, <decl pos:start="13:12" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:14">ret</name></decl>;</decl_stmt>



    <do pos:start="17:5" pos:end="21:49">do <block pos:start="17:8" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:63">

        <expr_stmt pos:start="19:9" pos:end="19:63"><expr pos:start="19:9" pos:end="19:62"><name pos:start="19:9" pos:end="19:9">c</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:62"><name pos:start="19:13" pos:end="19:23">qemu_accept</name><argument_list pos:start="19:24" pos:end="19:62">(<argument pos:start="19:25" pos:end="19:25"><expr pos:start="19:25" pos:end="19:25"><name pos:start="19:25" pos:end="19:25">s</name></expr></argument>, <argument pos:start="19:28" pos:end="19:51"><expr pos:start="19:28" pos:end="19:51"><operator pos:start="19:28" pos:end="19:28">(</operator>struct <name pos:start="19:36" pos:end="19:43">sockaddr</name> <operator pos:start="19:45" pos:end="19:45">*</operator><operator pos:start="19:46" pos:end="19:46">)</operator><operator pos:start="19:47" pos:end="19:47">&amp;</operator><name pos:start="19:48" pos:end="19:51">addr</name></expr></argument>, <argument pos:start="19:54" pos:end="19:61"><expr pos:start="19:54" pos:end="19:61"><operator pos:start="19:54" pos:end="19:54">&amp;</operator><name pos:start="19:55" pos:end="19:61">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="21:13" pos:end="21:48">(<expr pos:start="21:14" pos:end="21:47"><name pos:start="21:14" pos:end="21:14">c</name> <operator pos:start="21:16" pos:end="21:17">==</operator> <operator pos:start="21:19" pos:end="21:19">-</operator><literal type="number" pos:start="21:20" pos:end="21:20">1</literal> <operator pos:start="21:22" pos:end="21:23">&amp;&amp;</operator> <call pos:start="21:25" pos:end="21:38"><name pos:start="21:25" pos:end="21:36">socket_error</name><argument_list pos:start="21:37" pos:end="21:38">()</argument_list></call> <operator pos:start="21:40" pos:end="21:41">==</operator> <name pos:start="21:43" pos:end="21:47">EINTR</name></expr>)</condition>;</do>



    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><call pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:11">DPRINTF</name><argument_list pos:start="25:12" pos:end="25:35">(<argument pos:start="25:13" pos:end="25:34"><expr pos:start="25:13" pos:end="25:34"><literal type="string" pos:start="25:13" pos:end="25:34">"accepted migration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:9">c</name> <operator pos:start="29:11" pos:end="29:12">==</operator> <operator pos:start="29:14" pos:end="29:14">-</operator><literal type="number" pos:start="29:15" pos:end="29:15">1</literal></expr>)</condition> <block pos:start="29:18" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <expr_stmt pos:start="31:9" pos:end="31:67"><expr pos:start="31:9" pos:end="31:66"><call pos:start="31:9" pos:end="31:66"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:66">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:65"><expr pos:start="31:25" pos:end="31:65"><literal type="string" pos:start="31:25" pos:end="31:65">"could not accept migration connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:5">f</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <call pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:25">qemu_fopen_socket</name><argument_list pos:start="39:26" pos:end="39:28">(<argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><name pos:start="39:27" pos:end="39:27">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:18">(<expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:9">f</name> <operator pos:start="41:11" pos:end="41:12">==</operator> <name pos:start="41:14" pos:end="41:17">NULL</name></expr>)</condition> <block pos:start="41:20" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:17">

        <expr_stmt pos:start="43:9" pos:end="43:57"><expr pos:start="43:9" pos:end="43:56"><call pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="43:56">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:55"><expr pos:start="43:25" pos:end="43:55"><literal type="string" pos:start="43:25" pos:end="43:55">"could not qemu_fopen socket\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:17">goto <name pos:start="45:14" pos:end="45:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:30"><name pos:start="51:11" pos:end="51:27">qemu_loadvm_state</name><argument_list pos:start="51:28" pos:end="51:30">(<argument pos:start="51:29" pos:end="51:29"><expr pos:start="51:29" pos:end="51:29"><name pos:start="51:29" pos:end="51:29">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:16">(<expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>)</condition> <block pos:start="53:18" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:23">

        <expr_stmt pos:start="55:9" pos:end="55:54"><expr pos:start="55:9" pos:end="55:53"><call pos:start="55:9" pos:end="55:53"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="55:53">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:52"><expr pos:start="55:25" pos:end="55:52"><literal type="string" pos:start="55:25" pos:end="55:52">"load of migration failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:23">goto <name pos:start="57:14" pos:end="57:22">out_fopen</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:25"><expr pos:start="61:5" pos:end="61:24"><call pos:start="61:5" pos:end="61:24"><name pos:start="61:5" pos:end="61:22">qemu_announce_self</name><argument_list pos:start="61:23" pos:end="61:24">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:46"><expr pos:start="63:5" pos:end="63:45"><call pos:start="63:5" pos:end="63:45"><name pos:start="63:5" pos:end="63:11">DPRINTF</name><argument_list pos:start="63:12" pos:end="63:45">(<argument pos:start="63:13" pos:end="63:44"><expr pos:start="63:13" pos:end="63:44"><literal type="string" pos:start="63:13" pos:end="63:44">"successfully loaded vm state\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:62">/* we've successfully migrated, close the server socket */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:52"><expr pos:start="69:5" pos:end="69:51"><call pos:start="69:5" pos:end="69:51"><name pos:start="69:5" pos:end="69:24">qemu_set_fd_handler2</name><argument_list pos:start="69:25" pos:end="69:51">(<argument pos:start="69:26" pos:end="69:26"><expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">s</name></expr></argument>, <argument pos:start="69:29" pos:end="69:32"><expr pos:start="69:29" pos:end="69:32"><name pos:start="69:29" pos:end="69:32">NULL</name></expr></argument>, <argument pos:start="69:35" pos:end="69:38"><expr pos:start="69:35" pos:end="69:38"><name pos:start="69:35" pos:end="69:38">NULL</name></expr></argument>, <argument pos:start="69:41" pos:end="69:44"><expr pos:start="69:41" pos:end="69:44"><name pos:start="69:41" pos:end="69:44">NULL</name></expr></argument>, <argument pos:start="69:47" pos:end="69:50"><expr pos:start="69:47" pos:end="69:50"><name pos:start="69:47" pos:end="69:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:13"><expr pos:start="71:5" pos:end="71:12"><call pos:start="71:5" pos:end="71:12"><name pos:start="71:5" pos:end="71:9">close</name><argument_list pos:start="71:10" pos:end="71:12">(<argument pos:start="71:11" pos:end="71:11"><expr pos:start="71:11" pos:end="71:11"><name pos:start="71:11" pos:end="71:11">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="75:1" pos:end="75:10"><name pos:start="75:1" pos:end="75:9">out_fopen</name>:</label>

    <expr_stmt pos:start="77:5" pos:end="77:19"><expr pos:start="77:5" pos:end="77:18"><call pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:15">qemu_fclose</name><argument_list pos:start="77:16" pos:end="77:18">(<argument pos:start="77:17" pos:end="77:17"><expr pos:start="77:17" pos:end="77:17"><name pos:start="77:17" pos:end="77:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="79:1" pos:end="79:4"><name pos:start="79:1" pos:end="79:3">out</name>:</label>

    <expr_stmt pos:start="81:5" pos:end="81:13"><expr pos:start="81:5" pos:end="81:12"><call pos:start="81:5" pos:end="81:12"><name pos:start="81:5" pos:end="81:9">close</name><argument_list pos:start="81:10" pos:end="81:12">(<argument pos:start="81:11" pos:end="81:11"><expr pos:start="81:11" pos:end="81:11"><name pos:start="81:11" pos:end="81:11">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
