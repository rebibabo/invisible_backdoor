<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26825.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">vc1_decode_intra_block</name><parameter_list pos:start="1:34" pos:end="1:112">(<parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:44">VC1Context</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">v</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:66"><decl pos:start="1:50" pos:end="1:66"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:56">DCTELEM</name></type> <name pos:start="1:58" pos:end="1:66"><name pos:start="1:58" pos:end="1:62">block</name><index pos:start="1:63" pos:end="1:66">[<expr pos:start="1:64" pos:end="1:65"><literal type="number" pos:start="1:64" pos:end="1:65">64</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:73"><decl pos:start="1:69" pos:end="1:73"><type pos:start="1:69" pos:end="1:73"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:73">n</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:84"><decl pos:start="1:76" pos:end="1:84"><type pos:start="1:76" pos:end="1:84"><name pos:start="1:76" pos:end="1:78">int</name></type> <name pos:start="1:80" pos:end="1:84">coded</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:96"><decl pos:start="1:87" pos:end="1:96"><type pos:start="1:87" pos:end="1:96"><name pos:start="1:87" pos:end="1:89">int</name></type> <name pos:start="1:91" pos:end="1:96">mquant</name></decl></parameter>, <parameter pos:start="1:99" pos:end="1:111"><decl pos:start="1:99" pos:end="1:111"><type pos:start="1:99" pos:end="1:111"><name pos:start="1:99" pos:end="1:101">int</name></type> <name pos:start="1:103" pos:end="1:111">codingset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="409:1">{<block_content pos:start="5:5" pos:end="407:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">GetBitContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">gb</name> <init pos:start="5:23" pos:end="5:32">= <expr pos:start="5:25" pos:end="5:32"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:32"><name pos:start="5:26" pos:end="5:26">v</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:29">s</name><operator pos:start="5:30" pos:end="5:30">.</operator><name pos:start="5:31" pos:end="5:32">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MpegEncContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:29">= <expr pos:start="7:25" pos:end="7:29"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:26">v</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">dc_pred_dir</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="9:26" pos:end="9:66">/* Direction of the DC prediction used */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">run_diff</name></decl>, <decl pos:start="11:19" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:19">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int16_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">dc_val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:19">ac_val</name></decl>, <decl pos:start="15:22" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:13"><modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:29">ac_val2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">dcdiff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:50"><decl pos:start="19:5" pos:end="19:49"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">mb_pos</name> <init pos:start="19:16" pos:end="19:49">= <expr pos:start="19:18" pos:end="19:49"><name pos:start="19:18" pos:end="19:24"><name pos:start="19:18" pos:end="19:18">s</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:24">mb_x</name></name> <operator pos:start="19:26" pos:end="19:26">+</operator> <name pos:start="19:28" pos:end="19:34"><name pos:start="19:28" pos:end="19:28">s</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:34">mb_y</name></name> <operator pos:start="19:36" pos:end="19:36">*</operator> <name pos:start="19:38" pos:end="19:49"><name pos:start="19:38" pos:end="19:38">s</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:49">mb_stride</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">a_avail</name></decl>, <decl pos:start="21:18" pos:end="21:24"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:18" pos:end="21:24">c_avail</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:50">/* XXX: Guard against dumb values of mquant */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:62"><expr pos:start="27:5" pos:end="27:61"><name pos:start="27:5" pos:end="27:10">mquant</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <ternary pos:start="27:14" pos:end="27:61"><condition pos:start="27:14" pos:end="27:27"><expr pos:start="27:14" pos:end="27:25"><operator pos:start="27:14" pos:end="27:14">(</operator><name pos:start="27:15" pos:end="27:20">mquant</name> <operator pos:start="27:22" pos:end="27:22">&lt;</operator> <literal type="number" pos:start="27:24" pos:end="27:24">1</literal><operator pos:start="27:25" pos:end="27:25">)</operator></expr> ?</condition><then pos:start="27:29" pos:end="27:29"> <expr pos:start="27:29" pos:end="27:29"><literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr> </then><else pos:start="27:31" pos:end="27:61">: <expr pos:start="27:33" pos:end="27:61"><operator pos:start="27:33" pos:end="27:33">(</operator> <ternary pos:start="27:35" pos:end="27:59"><condition pos:start="27:35" pos:end="27:47"><expr pos:start="27:35" pos:end="27:45"><operator pos:start="27:35" pos:end="27:35">(</operator><name pos:start="27:36" pos:end="27:41">mquant</name><operator pos:start="27:42" pos:end="27:42">&gt;</operator><literal type="number" pos:start="27:43" pos:end="27:44">31</literal><operator pos:start="27:45" pos:end="27:45">)</operator></expr> ?</condition><then pos:start="27:49" pos:end="27:50"> <expr pos:start="27:49" pos:end="27:50"><literal type="number" pos:start="27:49" pos:end="27:50">31</literal></expr> </then><else pos:start="27:52" pos:end="27:59">: <expr pos:start="27:54" pos:end="27:59"><name pos:start="27:54" pos:end="27:59">mquant</name></expr></else></ternary> <operator pos:start="27:61" pos:end="27:61">)</operator></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:45">/* Set DC scale - y and c use the same */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:17">y_dc_scale</name></name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:47"><name pos:start="33:21" pos:end="33:21">s</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:39">y_dc_scale_table</name><index pos:start="33:40" pos:end="33:47">[<expr pos:start="33:41" pos:end="33:46"><name pos:start="33:41" pos:end="33:46">mquant</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:48"><expr pos:start="35:5" pos:end="35:47"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:17">c_dc_scale</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:47"><name pos:start="35:21" pos:end="35:21">s</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:39">c_dc_scale_table</name><index pos:start="35:40" pos:end="35:47">[<expr pos:start="35:41" pos:end="35:46"><name pos:start="35:41" pos:end="35:46">mquant</name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:58">/* check if prediction blocks A and C are available */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:11">a_avail</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:21">c_avail</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:20"><if pos:start="43:5" pos:end="45:20">if<condition pos:start="43:7" pos:end="43:102">(<expr pos:start="43:8" pos:end="43:101"><operator pos:start="43:8" pos:end="43:8">(</operator><name pos:start="43:9" pos:end="43:9">n</name> <operator pos:start="43:11" pos:end="43:12">==</operator> <literal type="number" pos:start="43:14" pos:end="43:14">2</literal> <operator pos:start="43:16" pos:end="43:17">||</operator> <name pos:start="43:19" pos:end="43:19">n</name> <operator pos:start="43:21" pos:end="43:22">==</operator> <literal type="number" pos:start="43:24" pos:end="43:24">3</literal><operator pos:start="43:25" pos:end="43:25">)</operator> <operator pos:start="43:27" pos:end="43:28">||</operator> <operator pos:start="43:30" pos:end="43:30">(</operator><name pos:start="43:31" pos:end="43:37"><name pos:start="43:31" pos:end="43:31">s</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:37">mb_y</name></name> <operator pos:start="43:39" pos:end="43:40">&amp;&amp;</operator> <call pos:start="43:42" pos:end="43:100"><name pos:start="43:42" pos:end="43:49">IS_INTRA</name><argument_list pos:start="43:50" pos:end="43:100">(<argument pos:start="43:51" pos:end="43:99"><expr pos:start="43:51" pos:end="43:99"><name pos:start="43:51" pos:end="43:99"><name pos:start="43:51" pos:end="43:51">s</name><operator pos:start="43:52" pos:end="43:53">-&gt;</operator><name pos:start="43:54" pos:end="43:68">current_picture</name><operator pos:start="43:69" pos:end="43:69">.</operator><name pos:start="43:70" pos:end="43:76">mb_type</name><index pos:start="43:77" pos:end="43:99">[<expr pos:start="43:78" pos:end="43:98"><name pos:start="43:78" pos:end="43:83">mb_pos</name> <operator pos:start="43:85" pos:end="43:85">-</operator> <name pos:start="43:87" pos:end="43:98"><name pos:start="43:87" pos:end="43:87">s</name><operator pos:start="43:88" pos:end="43:89">-&gt;</operator><name pos:start="43:90" pos:end="43:98">mb_stride</name></name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="43:101" pos:end="43:101">)</operator></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:20"><block_content pos:start="45:9" pos:end="45:20">

        <expr_stmt pos:start="45:9" pos:end="45:20"><expr pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:15">a_avail</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:19">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="49:20"><if pos:start="47:5" pos:end="49:20">if<condition pos:start="47:7" pos:end="47:91">(<expr pos:start="47:8" pos:end="47:90"><operator pos:start="47:8" pos:end="47:8">(</operator><name pos:start="47:9" pos:end="47:9">n</name> <operator pos:start="47:11" pos:end="47:12">==</operator> <literal type="number" pos:start="47:14" pos:end="47:14">1</literal> <operator pos:start="47:16" pos:end="47:17">||</operator> <name pos:start="47:19" pos:end="47:19">n</name> <operator pos:start="47:21" pos:end="47:22">==</operator> <literal type="number" pos:start="47:24" pos:end="47:24">3</literal><operator pos:start="47:25" pos:end="47:25">)</operator> <operator pos:start="47:27" pos:end="47:28">||</operator> <operator pos:start="47:30" pos:end="47:30">(</operator><name pos:start="47:31" pos:end="47:37"><name pos:start="47:31" pos:end="47:31">s</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:37">mb_x</name></name> <operator pos:start="47:39" pos:end="47:40">&amp;&amp;</operator> <call pos:start="47:42" pos:end="47:89"><name pos:start="47:42" pos:end="47:49">IS_INTRA</name><argument_list pos:start="47:50" pos:end="47:89">(<argument pos:start="47:51" pos:end="47:88"><expr pos:start="47:51" pos:end="47:88"><name pos:start="47:51" pos:end="47:88"><name pos:start="47:51" pos:end="47:51">s</name><operator pos:start="47:52" pos:end="47:53">-&gt;</operator><name pos:start="47:54" pos:end="47:68">current_picture</name><operator pos:start="47:69" pos:end="47:69">.</operator><name pos:start="47:70" pos:end="47:76">mb_type</name><index pos:start="47:77" pos:end="47:88">[<expr pos:start="47:78" pos:end="47:87"><name pos:start="47:78" pos:end="47:83">mb_pos</name> <operator pos:start="47:85" pos:end="47:85">-</operator> <literal type="number" pos:start="47:87" pos:end="47:87">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="47:90" pos:end="47:90">)</operator></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:20"><block_content pos:start="49:9" pos:end="49:20">

        <expr_stmt pos:start="49:9" pos:end="49:20"><expr pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:15">c_avail</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <literal type="number" pos:start="49:19" pos:end="49:19">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="51:5" pos:end="51:29">/* Get DC differential */</comment>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:14">(<expr pos:start="53:9" pos:end="53:13"><name pos:start="53:9" pos:end="53:9">n</name> <operator pos:start="53:11" pos:end="53:11">&lt;</operator> <literal type="number" pos:start="53:13" pos:end="53:13">4</literal></expr>)</condition> <block pos:start="53:16" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:97">

        <expr_stmt pos:start="55:9" pos:end="55:97"><expr pos:start="55:9" pos:end="55:96"><name pos:start="55:9" pos:end="55:14">dcdiff</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:96"><name pos:start="55:18" pos:end="55:25">get_vlc2</name><argument_list pos:start="55:26" pos:end="55:96">(<argument pos:start="55:27" pos:end="55:32"><expr pos:start="55:27" pos:end="55:32"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:32"><name pos:start="55:28" pos:end="55:28">s</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:32">gb</name></name></expr></argument>, <argument pos:start="55:35" pos:end="55:79"><expr pos:start="55:35" pos:end="55:79"><name pos:start="55:35" pos:end="55:73"><name pos:start="55:35" pos:end="55:54">ff_msmp4_dc_luma_vlc</name><index pos:start="55:55" pos:end="55:73">[<expr pos:start="55:56" pos:end="55:72"><name pos:start="55:56" pos:end="55:72"><name pos:start="55:56" pos:end="55:56">s</name><operator pos:start="55:57" pos:end="55:58">-&gt;</operator><name pos:start="55:59" pos:end="55:72">dc_table_index</name></name></expr>]</index></name><operator pos:start="55:74" pos:end="55:74">.</operator><name pos:start="55:75" pos:end="55:79">table</name></expr></argument>, <argument pos:start="55:82" pos:end="55:92"><expr pos:start="55:82" pos:end="55:92"><name pos:start="55:82" pos:end="55:92">DC_VLC_BITS</name></expr></argument>, <argument pos:start="55:95" pos:end="55:95"><expr pos:start="55:95" pos:end="55:95"><literal type="number" pos:start="55:95" pos:end="55:95">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:5">else <block pos:start="57:12" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:99">

        <expr_stmt pos:start="59:9" pos:end="59:99"><expr pos:start="59:9" pos:end="59:98"><name pos:start="59:9" pos:end="59:14">dcdiff</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <call pos:start="59:18" pos:end="59:98"><name pos:start="59:18" pos:end="59:25">get_vlc2</name><argument_list pos:start="59:26" pos:end="59:98">(<argument pos:start="59:27" pos:end="59:32"><expr pos:start="59:27" pos:end="59:32"><operator pos:start="59:27" pos:end="59:27">&amp;</operator><name pos:start="59:28" pos:end="59:32"><name pos:start="59:28" pos:end="59:28">s</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:32">gb</name></name></expr></argument>, <argument pos:start="59:35" pos:end="59:81"><expr pos:start="59:35" pos:end="59:81"><name pos:start="59:35" pos:end="59:75"><name pos:start="59:35" pos:end="59:56">ff_msmp4_dc_chroma_vlc</name><index pos:start="59:57" pos:end="59:75">[<expr pos:start="59:58" pos:end="59:74"><name pos:start="59:58" pos:end="59:74"><name pos:start="59:58" pos:end="59:58">s</name><operator pos:start="59:59" pos:end="59:60">-&gt;</operator><name pos:start="59:61" pos:end="59:74">dc_table_index</name></name></expr>]</index></name><operator pos:start="59:76" pos:end="59:76">.</operator><name pos:start="59:77" pos:end="59:81">table</name></expr></argument>, <argument pos:start="59:84" pos:end="59:94"><expr pos:start="59:84" pos:end="59:94"><name pos:start="59:84" pos:end="59:94">DC_VLC_BITS</name></expr></argument>, <argument pos:start="59:97" pos:end="59:97"><expr pos:start="59:97" pos:end="59:97"><literal type="number" pos:start="59:97" pos:end="59:97">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:19">(<expr pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:14">dcdiff</name> <operator pos:start="63:16" pos:end="63:16">&lt;</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>)</condition><block pos:start="63:20" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:59"><expr pos:start="65:9" pos:end="65:58"><call pos:start="65:9" pos:end="65:58"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:58">(<argument pos:start="65:16" pos:end="65:23"><expr pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:16">s</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:23">avctx</name></name></expr></argument>, <argument pos:start="65:26" pos:end="65:37"><expr pos:start="65:26" pos:end="65:37"><name pos:start="65:26" pos:end="65:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:40" pos:end="65:57"><expr pos:start="65:40" pos:end="65:57"><literal type="string" pos:start="65:40" pos:end="65:57">"Illegal DC VLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="107:5"><if pos:start="71:5" pos:end="107:5">if <condition pos:start="71:8" pos:end="71:15">(<expr pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:14">dcdiff</name></expr>)</condition>

    <block pos:start="73:5" pos:end="107:5">{<block_content pos:start="75:9" pos:end="105:29">

        <if_stmt pos:start="75:9" pos:end="101:9"><if pos:start="75:9" pos:end="87:9">if <condition pos:start="75:12" pos:end="75:48">(<expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:18">dcdiff</name> <operator pos:start="75:20" pos:end="75:21">==</operator> <literal type="number" pos:start="75:23" pos:end="75:25">119</literal></expr> <comment type="block" pos:start="75:27" pos:end="75:47">/* ESC index value */</comment>)</condition>

        <block pos:start="77:9" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:42">

            <comment type="block" pos:start="79:13" pos:end="79:32">/* TODO: Optimize */</comment>

            <if_stmt pos:start="81:13" pos:end="85:42"><if pos:start="81:13" pos:end="81:55">if <condition pos:start="81:16" pos:end="81:28">(<expr pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:22">mquant</name> <operator pos:start="81:24" pos:end="81:25">==</operator> <literal type="number" pos:start="81:27" pos:end="81:27">1</literal></expr>)</condition><block type="pseudo" pos:start="81:30" pos:end="81:55"><block_content pos:start="81:30" pos:end="81:55"> <expr_stmt pos:start="81:30" pos:end="81:55"><expr pos:start="81:30" pos:end="81:54"><name pos:start="81:30" pos:end="81:35">dcdiff</name> <operator pos:start="81:37" pos:end="81:37">=</operator> <call pos:start="81:39" pos:end="81:54"><name pos:start="81:39" pos:end="81:46">get_bits</name><argument_list pos:start="81:47" pos:end="81:54">(<argument pos:start="81:48" pos:end="81:49"><expr pos:start="81:48" pos:end="81:49"><name pos:start="81:48" pos:end="81:49">gb</name></expr></argument>, <argument pos:start="81:52" pos:end="81:53"><expr pos:start="81:52" pos:end="81:53"><literal type="number" pos:start="81:52" pos:end="81:53">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="83:13" pos:end="83:59">else if <condition pos:start="83:21" pos:end="83:33">(<expr pos:start="83:22" pos:end="83:32"><name pos:start="83:22" pos:end="83:27">mquant</name> <operator pos:start="83:29" pos:end="83:30">==</operator> <literal type="number" pos:start="83:32" pos:end="83:32">2</literal></expr>)</condition><block type="pseudo" pos:start="83:35" pos:end="83:59"><block_content pos:start="83:35" pos:end="83:59"> <expr_stmt pos:start="83:35" pos:end="83:59"><expr pos:start="83:35" pos:end="83:58"><name pos:start="83:35" pos:end="83:40">dcdiff</name> <operator pos:start="83:42" pos:end="83:42">=</operator> <call pos:start="83:44" pos:end="83:58"><name pos:start="83:44" pos:end="83:51">get_bits</name><argument_list pos:start="83:52" pos:end="83:58">(<argument pos:start="83:53" pos:end="83:54"><expr pos:start="83:53" pos:end="83:54"><name pos:start="83:53" pos:end="83:54">gb</name></expr></argument>, <argument pos:start="83:57" pos:end="83:57"><expr pos:start="83:57" pos:end="83:57"><literal type="number" pos:start="83:57" pos:end="83:57">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="85:13" pos:end="85:42">else<block type="pseudo" pos:start="85:18" pos:end="85:42"><block_content pos:start="85:18" pos:end="85:42"> <expr_stmt pos:start="85:18" pos:end="85:42"><expr pos:start="85:18" pos:end="85:41"><name pos:start="85:18" pos:end="85:23">dcdiff</name> <operator pos:start="85:25" pos:end="85:25">=</operator> <call pos:start="85:27" pos:end="85:41"><name pos:start="85:27" pos:end="85:34">get_bits</name><argument_list pos:start="85:35" pos:end="85:41">(<argument pos:start="85:36" pos:end="85:37"><expr pos:start="85:36" pos:end="85:37"><name pos:start="85:36" pos:end="85:37">gb</name></expr></argument>, <argument pos:start="85:40" pos:end="85:40"><expr pos:start="85:40" pos:end="85:40"><literal type="number" pos:start="85:40" pos:end="85:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if>

        <else pos:start="89:9" pos:end="101:9">else

        <block pos:start="91:9" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:59">

            <if_stmt pos:start="93:13" pos:end="99:59"><if pos:start="93:13" pos:end="95:59">if <condition pos:start="93:16" pos:end="93:28">(<expr pos:start="93:17" pos:end="93:27"><name pos:start="93:17" pos:end="93:22">mquant</name> <operator pos:start="93:24" pos:end="93:25">==</operator> <literal type="number" pos:start="93:27" pos:end="93:27">1</literal></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:59"><block_content pos:start="95:17" pos:end="95:59">

                <expr_stmt pos:start="95:17" pos:end="95:59"><expr pos:start="95:17" pos:end="95:58"><name pos:start="95:17" pos:end="95:22">dcdiff</name> <operator pos:start="95:24" pos:end="95:24">=</operator> <operator pos:start="95:26" pos:end="95:26">(</operator><name pos:start="95:27" pos:end="95:32">dcdiff</name><operator pos:start="95:33" pos:end="95:34">&lt;&lt;</operator><literal type="number" pos:start="95:35" pos:end="95:35">2</literal><operator pos:start="95:36" pos:end="95:36">)</operator> <operator pos:start="95:38" pos:end="95:38">+</operator> <call pos:start="95:40" pos:end="95:54"><name pos:start="95:40" pos:end="95:47">get_bits</name><argument_list pos:start="95:48" pos:end="95:54">(<argument pos:start="95:49" pos:end="95:50"><expr pos:start="95:49" pos:end="95:50"><name pos:start="95:49" pos:end="95:50">gb</name></expr></argument>, <argument pos:start="95:53" pos:end="95:53"><expr pos:start="95:53" pos:end="95:53"><literal type="number" pos:start="95:53" pos:end="95:53">2</literal></expr></argument>)</argument_list></call> <operator pos:start="95:56" pos:end="95:56">-</operator> <literal type="number" pos:start="95:58" pos:end="95:58">3</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="97:13" pos:end="99:59">else if <condition pos:start="97:21" pos:end="97:33">(<expr pos:start="97:22" pos:end="97:32"><name pos:start="97:22" pos:end="97:27">mquant</name> <operator pos:start="97:29" pos:end="97:30">==</operator> <literal type="number" pos:start="97:32" pos:end="97:32">2</literal></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:59"><block_content pos:start="99:17" pos:end="99:59">

                <expr_stmt pos:start="99:17" pos:end="99:59"><expr pos:start="99:17" pos:end="99:58"><name pos:start="99:17" pos:end="99:22">dcdiff</name> <operator pos:start="99:24" pos:end="99:24">=</operator> <operator pos:start="99:26" pos:end="99:26">(</operator><name pos:start="99:27" pos:end="99:32">dcdiff</name><operator pos:start="99:33" pos:end="99:34">&lt;&lt;</operator><literal type="number" pos:start="99:35" pos:end="99:35">1</literal><operator pos:start="99:36" pos:end="99:36">)</operator> <operator pos:start="99:38" pos:end="99:38">+</operator> <call pos:start="99:40" pos:end="99:54"><name pos:start="99:40" pos:end="99:47">get_bits</name><argument_list pos:start="99:48" pos:end="99:54">(<argument pos:start="99:49" pos:end="99:50"><expr pos:start="99:49" pos:end="99:50"><name pos:start="99:49" pos:end="99:50">gb</name></expr></argument>, <argument pos:start="99:53" pos:end="99:53"><expr pos:start="99:53" pos:end="99:53"><literal type="number" pos:start="99:53" pos:end="99:53">1</literal></expr></argument>)</argument_list></call> <operator pos:start="99:56" pos:end="99:56">-</operator> <literal type="number" pos:start="99:58" pos:end="99:58">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="103:9" pos:end="105:29"><if pos:start="103:9" pos:end="105:29">if <condition pos:start="103:12" pos:end="103:28">(<expr pos:start="103:13" pos:end="103:27"><call pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:20">get_bits</name><argument_list pos:start="103:21" pos:end="103:27">(<argument pos:start="103:22" pos:end="103:23"><expr pos:start="103:22" pos:end="103:23"><name pos:start="103:22" pos:end="103:23">gb</name></expr></argument>, <argument pos:start="103:26" pos:end="103:26"><expr pos:start="103:26" pos:end="103:26"><literal type="number" pos:start="103:26" pos:end="103:26">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:29"><block_content pos:start="105:13" pos:end="105:29">

            <expr_stmt pos:start="105:13" pos:end="105:29"><expr pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:18">dcdiff</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <operator pos:start="105:22" pos:end="105:22">-</operator><name pos:start="105:23" pos:end="105:28">dcdiff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:20">/* Prediction */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:97"><expr pos:start="113:5" pos:end="113:96"><name pos:start="113:5" pos:end="113:10">dcdiff</name> <operator pos:start="113:12" pos:end="113:13">+=</operator> <call pos:start="113:15" pos:end="113:96"><name pos:start="113:15" pos:end="113:25">vc1_pred_dc</name><argument_list pos:start="113:26" pos:end="113:96">(<argument pos:start="113:27" pos:end="113:31"><expr pos:start="113:27" pos:end="113:31"><operator pos:start="113:27" pos:end="113:27">&amp;</operator><name pos:start="113:28" pos:end="113:31"><name pos:start="113:28" pos:end="113:28">v</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:31">s</name></name></expr></argument>, <argument pos:start="113:34" pos:end="113:43"><expr pos:start="113:34" pos:end="113:43"><name pos:start="113:34" pos:end="113:43"><name pos:start="113:34" pos:end="113:34">v</name><operator pos:start="113:35" pos:end="113:36">-&gt;</operator><name pos:start="113:37" pos:end="113:43">overlap</name></name></expr></argument>, <argument pos:start="113:46" pos:end="113:51"><expr pos:start="113:46" pos:end="113:51"><name pos:start="113:46" pos:end="113:51">mquant</name></expr></argument>, <argument pos:start="113:54" pos:end="113:54"><expr pos:start="113:54" pos:end="113:54"><name pos:start="113:54" pos:end="113:54">n</name></expr></argument>, <argument pos:start="113:57" pos:end="113:63"><expr pos:start="113:57" pos:end="113:63"><name pos:start="113:57" pos:end="113:63">a_avail</name></expr></argument>, <argument pos:start="113:66" pos:end="113:72"><expr pos:start="113:66" pos:end="113:72"><name pos:start="113:66" pos:end="113:72">c_avail</name></expr></argument>, <argument pos:start="113:75" pos:end="113:81"><expr pos:start="113:75" pos:end="113:81"><operator pos:start="113:75" pos:end="113:75">&amp;</operator><name pos:start="113:76" pos:end="113:81">dc_val</name></expr></argument>, <argument pos:start="113:84" pos:end="113:95"><expr pos:start="113:84" pos:end="113:95"><operator pos:start="113:84" pos:end="113:84">&amp;</operator><name pos:start="113:85" pos:end="113:95">dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:21"><expr pos:start="115:5" pos:end="115:20"><operator pos:start="115:5" pos:end="115:5">*</operator><name pos:start="115:6" pos:end="115:11">dc_val</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:20">dcdiff</name></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:59">/* Store the quantized DC coeff, used for prediction */</comment>



    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:14">(<expr pos:start="123:9" pos:end="123:13"><name pos:start="123:9" pos:end="123:9">n</name> <operator pos:start="123:11" pos:end="123:11">&lt;</operator> <literal type="number" pos:start="123:13" pos:end="123:13">4</literal></expr>)</condition> <block pos:start="123:16" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:42">

        <expr_stmt pos:start="125:9" pos:end="125:42"><expr pos:start="125:9" pos:end="125:41"><name pos:start="125:9" pos:end="125:16"><name pos:start="125:9" pos:end="125:13">block</name><index pos:start="125:14" pos:end="125:16">[<expr pos:start="125:15" pos:end="125:15"><literal type="number" pos:start="125:15" pos:end="125:15">0</literal></expr>]</index></name> <operator pos:start="125:18" pos:end="125:18">=</operator> <name pos:start="125:20" pos:end="125:25">dcdiff</name> <operator pos:start="125:27" pos:end="125:27">*</operator> <name pos:start="125:29" pos:end="125:41"><name pos:start="125:29" pos:end="125:29">s</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:41">y_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="131:5">else <block pos:start="127:12" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:42">

        <expr_stmt pos:start="129:9" pos:end="129:42"><expr pos:start="129:9" pos:end="129:41"><name pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:13">block</name><index pos:start="129:14" pos:end="129:16">[<expr pos:start="129:15" pos:end="129:15"><literal type="number" pos:start="129:15" pos:end="129:15">0</literal></expr>]</index></name> <operator pos:start="129:18" pos:end="129:18">=</operator> <name pos:start="129:20" pos:end="129:25">dcdiff</name> <operator pos:start="129:27" pos:end="129:27">*</operator> <name pos:start="129:29" pos:end="129:41"><name pos:start="129:29" pos:end="129:29">s</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:41">c_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="133:5" pos:end="133:16">/* Skip ? */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:17"><expr pos:start="135:5" pos:end="135:16"><name pos:start="135:5" pos:end="135:12">run_diff</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <literal type="number" pos:start="135:16" pos:end="135:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:10"><expr pos:start="137:5" pos:end="137:9"><name pos:start="137:5" pos:end="137:5">i</name> <operator pos:start="137:7" pos:end="137:7">=</operator> <literal type="number" pos:start="137:9" pos:end="137:9">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:15">(<expr pos:start="139:9" pos:end="139:14"><operator pos:start="139:9" pos:end="139:9">!</operator><name pos:start="139:10" pos:end="139:14">coded</name></expr>)</condition> <block pos:start="139:17" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:23">

        <goto pos:start="141:9" pos:end="141:23">goto <name pos:start="141:14" pos:end="141:22">not_coded</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="147:5" pos:end="147:17">//AC Decoding</comment>

    <expr_stmt pos:start="149:5" pos:end="149:10"><expr pos:start="149:5" pos:end="149:9"><name pos:start="149:5" pos:end="149:5">i</name> <operator pos:start="149:7" pos:end="149:7">=</operator> <literal type="number" pos:start="149:9" pos:end="149:9">1</literal></expr>;</expr_stmt>



    <block pos:start="153:5" pos:end="309:5">{<block_content pos:start="155:9" pos:end="307:30">

        <decl_stmt pos:start="155:9" pos:end="155:34"><decl pos:start="155:9" pos:end="155:20"><type pos:start="155:9" pos:end="155:11"><name pos:start="155:9" pos:end="155:11">int</name></type> <name pos:start="155:13" pos:end="155:16">last</name> <init pos:start="155:18" pos:end="155:20">= <expr pos:start="155:20" pos:end="155:20"><literal type="number" pos:start="155:20" pos:end="155:20">0</literal></expr></init></decl>, <decl pos:start="155:23" pos:end="155:26"><type ref="prev" pos:start="155:9" pos:end="155:11"/><name pos:start="155:23" pos:end="155:26">skip</name></decl>, <decl pos:start="155:29" pos:end="155:33"><type ref="prev" pos:start="155:9" pos:end="155:11"/><name pos:start="155:29" pos:end="155:33">value</name></decl>;</decl_stmt>

        <decl_stmt pos:start="157:9" pos:end="157:31"><decl pos:start="157:9" pos:end="157:30"><type pos:start="157:9" pos:end="157:22"><specifier pos:start="157:9" pos:end="157:13">const</specifier> <name pos:start="157:15" pos:end="157:20">int8_t</name> <modifier pos:start="157:22" pos:end="157:22">*</modifier></type><name pos:start="157:23" pos:end="157:30">zz_table</name></decl>;</decl_stmt>

        <decl_stmt pos:start="159:9" pos:end="159:18"><decl pos:start="159:9" pos:end="159:17"><type pos:start="159:9" pos:end="159:11"><name pos:start="159:9" pos:end="159:11">int</name></type> <name pos:start="159:13" pos:end="159:17">scale</name></decl>;</decl_stmt>

        <decl_stmt pos:start="161:9" pos:end="161:14"><decl pos:start="161:9" pos:end="161:13"><type pos:start="161:9" pos:end="161:11"><name pos:start="161:9" pos:end="161:11">int</name></type> <name pos:start="161:13" pos:end="161:13">k</name></decl>;</decl_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:39"><expr pos:start="165:9" pos:end="165:38"><name pos:start="165:9" pos:end="165:13">scale</name> <operator pos:start="165:15" pos:end="165:15">=</operator> <name pos:start="165:17" pos:end="165:22">mquant</name> <operator pos:start="165:24" pos:end="165:24">*</operator> <literal type="number" pos:start="165:26" pos:end="165:28">2</literal> <operator pos:start="165:28" pos:end="165:28">+</operator> <name pos:start="165:30" pos:end="165:38"><name pos:start="165:30" pos:end="165:30">v</name><operator pos:start="165:31" pos:end="165:32">-&gt;</operator><name pos:start="165:33" pos:end="165:38">halfpq</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:49"><expr pos:start="169:9" pos:end="169:48"><name pos:start="169:9" pos:end="169:16">zz_table</name> <operator pos:start="169:18" pos:end="169:18">=</operator> <name pos:start="169:20" pos:end="169:48">vc1_simple_progressive_8x8_zz</name></expr>;</expr_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:58"><expr pos:start="173:9" pos:end="173:57"><name pos:start="173:9" pos:end="173:14">ac_val</name> <operator pos:start="173:16" pos:end="173:16">=</operator> <name pos:start="173:18" pos:end="173:32"><name pos:start="173:18" pos:end="173:18">s</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:26">ac_val</name><index pos:start="173:27" pos:end="173:29">[<expr pos:start="173:28" pos:end="173:28"><literal type="number" pos:start="173:28" pos:end="173:28">0</literal></expr>]</index><index pos:start="173:30" pos:end="173:32">[<expr pos:start="173:31" pos:end="173:31"><literal type="number" pos:start="173:31" pos:end="173:31">0</literal></expr>]</index></name> <operator pos:start="173:34" pos:end="173:34">+</operator> <name pos:start="173:36" pos:end="173:52"><name pos:start="173:36" pos:end="173:36">s</name><operator pos:start="173:37" pos:end="173:38">-&gt;</operator><name pos:start="173:39" pos:end="173:49">block_index</name><index pos:start="173:50" pos:end="173:52">[<expr pos:start="173:51" pos:end="173:51"><name pos:start="173:51" pos:end="173:51">n</name></expr>]</index></name> <operator pos:start="173:54" pos:end="173:54">*</operator> <literal type="number" pos:start="173:56" pos:end="173:57">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:25"><expr pos:start="175:9" pos:end="175:24"><name pos:start="175:9" pos:end="175:15">ac_val2</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <name pos:start="175:19" pos:end="175:24">ac_val</name></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="183:44"><if pos:start="177:9" pos:end="179:25">if<condition pos:start="177:11" pos:end="177:23">(<expr pos:start="177:12" pos:end="177:22"><name pos:start="177:12" pos:end="177:22">dc_pred_dir</name></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:25"><block_content pos:start="179:13" pos:end="179:25"> <comment type="line" pos:start="177:25" pos:end="177:30">//left</comment>

            <expr_stmt pos:start="179:13" pos:end="179:25"><expr pos:start="179:13" pos:end="179:24"><name pos:start="179:13" pos:end="179:18">ac_val</name> <operator pos:start="179:20" pos:end="179:21">-=</operator> <literal type="number" pos:start="179:23" pos:end="179:24">16</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="181:9" pos:end="183:44">else<block type="pseudo" pos:start="183:13" pos:end="183:44"><block_content pos:start="183:13" pos:end="183:44"> <comment type="line" pos:start="181:14" pos:end="181:18">//top</comment>

            <expr_stmt pos:start="183:13" pos:end="183:44"><expr pos:start="183:13" pos:end="183:43"><name pos:start="183:13" pos:end="183:18">ac_val</name> <operator pos:start="183:20" pos:end="183:21">-=</operator> <literal type="number" pos:start="183:23" pos:end="183:24">16</literal> <operator pos:start="183:26" pos:end="183:26">*</operator> <name pos:start="183:28" pos:end="183:43"><name pos:start="183:28" pos:end="183:28">s</name><operator pos:start="183:29" pos:end="183:30">-&gt;</operator><name pos:start="183:31" pos:end="183:40">block_wrap</name><index pos:start="183:41" pos:end="183:43">[<expr pos:start="183:42" pos:end="183:42"><name pos:start="183:42" pos:end="183:42">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <while pos:start="187:9" pos:end="199:9">while <condition pos:start="187:15" pos:end="187:21">(<expr pos:start="187:16" pos:end="187:20"><operator pos:start="187:16" pos:end="187:16">!</operator><name pos:start="187:17" pos:end="187:20">last</name></expr>)</condition> <block pos:start="187:23" pos:end="199:9">{<block_content pos:start="189:13" pos:end="197:41">

            <expr_stmt pos:start="189:13" pos:end="189:68"><expr pos:start="189:13" pos:end="189:67"><call pos:start="189:13" pos:end="189:67"><name pos:start="189:13" pos:end="189:31">vc1_decode_ac_coeff</name><argument_list pos:start="189:32" pos:end="189:67">(<argument pos:start="189:33" pos:end="189:33"><expr pos:start="189:33" pos:end="189:33"><name pos:start="189:33" pos:end="189:33">v</name></expr></argument>, <argument pos:start="189:36" pos:end="189:40"><expr pos:start="189:36" pos:end="189:40"><operator pos:start="189:36" pos:end="189:36">&amp;</operator><name pos:start="189:37" pos:end="189:40">last</name></expr></argument>, <argument pos:start="189:43" pos:end="189:47"><expr pos:start="189:43" pos:end="189:47"><operator pos:start="189:43" pos:end="189:43">&amp;</operator><name pos:start="189:44" pos:end="189:47">skip</name></expr></argument>, <argument pos:start="189:50" pos:end="189:55"><expr pos:start="189:50" pos:end="189:55"><operator pos:start="189:50" pos:end="189:50">&amp;</operator><name pos:start="189:51" pos:end="189:55">value</name></expr></argument>, <argument pos:start="189:58" pos:end="189:66"><expr pos:start="189:58" pos:end="189:66"><name pos:start="189:58" pos:end="189:66">codingset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:22"><expr pos:start="191:13" pos:end="191:21"><name pos:start="191:13" pos:end="191:13">i</name> <operator pos:start="191:15" pos:end="191:16">+=</operator> <name pos:start="191:18" pos:end="191:21">skip</name></expr>;</expr_stmt>

            <if_stmt pos:start="193:13" pos:end="195:22"><if pos:start="193:13" pos:end="195:22">if<condition pos:start="193:15" pos:end="193:22">(<expr pos:start="193:16" pos:end="193:21"><name pos:start="193:16" pos:end="193:16">i</name> <operator pos:start="193:18" pos:end="193:18">&gt;</operator> <literal type="number" pos:start="193:20" pos:end="193:21">63</literal></expr>)</condition><block type="pseudo" pos:start="195:17" pos:end="195:22"><block_content pos:start="195:17" pos:end="195:22">

                <break pos:start="195:17" pos:end="195:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:41"><expr pos:start="197:13" pos:end="197:40"><name pos:start="197:13" pos:end="197:32"><name pos:start="197:13" pos:end="197:17">block</name><index pos:start="197:18" pos:end="197:32">[<expr pos:start="197:19" pos:end="197:31"><name pos:start="197:19" pos:end="197:31"><name pos:start="197:19" pos:end="197:26">zz_table</name><index pos:start="197:27" pos:end="197:31">[<expr pos:start="197:28" pos:end="197:30"><name pos:start="197:28" pos:end="197:28">i</name><operator pos:start="197:29" pos:end="197:30">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="197:34" pos:end="197:34">=</operator> <name pos:start="197:36" pos:end="197:40">value</name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <comment type="block" pos:start="203:9" pos:end="203:43">/* apply AC prediction if needed */</comment>

        <if_stmt pos:start="205:9" pos:end="277:9"><if pos:start="205:9" pos:end="277:9">if<condition pos:start="205:11" pos:end="205:22">(<expr pos:start="205:12" pos:end="205:21"><name pos:start="205:12" pos:end="205:21"><name pos:start="205:12" pos:end="205:12">s</name><operator pos:start="205:13" pos:end="205:14">-&gt;</operator><name pos:start="205:15" pos:end="205:21">ac_pred</name></name></expr>)</condition> <block pos:start="205:24" pos:end="277:9">{<block_content pos:start="209:13" pos:end="275:13">

            <comment type="block" pos:start="207:13" pos:end="207:43">/* scale predictors if needed*/</comment>

            <decl_stmt pos:start="209:13" pos:end="209:32"><decl pos:start="209:13" pos:end="209:23"><type pos:start="209:13" pos:end="209:15"><name pos:start="209:13" pos:end="209:15">int</name></type> <name pos:start="209:17" pos:end="209:23">mb_pos2</name></decl>, <decl pos:start="209:26" pos:end="209:27"><type ref="prev" pos:start="209:13" pos:end="209:15"/><name pos:start="209:26" pos:end="209:27">q1</name></decl>, <decl pos:start="209:30" pos:end="209:31"><type ref="prev" pos:start="209:13" pos:end="209:15"/><name pos:start="209:30" pos:end="209:31">q2</name></decl>;</decl_stmt>



            <expr_stmt pos:start="213:13" pos:end="213:78"><expr pos:start="213:13" pos:end="213:77"><name pos:start="213:13" pos:end="213:19">mb_pos2</name> <operator pos:start="213:21" pos:end="213:21">=</operator> <name pos:start="213:23" pos:end="213:28">mb_pos</name> <operator pos:start="213:30" pos:end="213:30">-</operator> <name pos:start="213:32" pos:end="213:42">dc_pred_dir</name> <operator pos:start="213:44" pos:end="213:44">-</operator> <operator pos:start="213:46" pos:end="213:46">(</operator><literal type="number" pos:start="213:47" pos:end="213:49">1</literal> <operator pos:start="213:49" pos:end="213:49">-</operator> <name pos:start="213:51" pos:end="213:61">dc_pred_dir</name><operator pos:start="213:62" pos:end="213:62">)</operator> <operator pos:start="213:64" pos:end="213:64">*</operator> <name pos:start="213:66" pos:end="213:77"><name pos:start="213:66" pos:end="213:66">s</name><operator pos:start="213:67" pos:end="213:68">-&gt;</operator><name pos:start="213:69" pos:end="213:77">mb_stride</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:57"><expr pos:start="215:13" pos:end="215:56"><name pos:start="215:13" pos:end="215:14">q1</name> <operator pos:start="215:16" pos:end="215:16">=</operator> <name pos:start="215:18" pos:end="215:56"><name pos:start="215:18" pos:end="215:18">s</name><operator pos:start="215:19" pos:end="215:20">-&gt;</operator><name pos:start="215:21" pos:end="215:35">current_picture</name><operator pos:start="215:36" pos:end="215:36">.</operator><name pos:start="215:37" pos:end="215:48">qscale_table</name><index pos:start="215:49" pos:end="215:56">[<expr pos:start="215:50" pos:end="215:55"><name pos:start="215:50" pos:end="215:55">mb_pos</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:58"><expr pos:start="217:13" pos:end="217:57"><name pos:start="217:13" pos:end="217:14">q2</name> <operator pos:start="217:16" pos:end="217:16">=</operator> <name pos:start="217:18" pos:end="217:57"><name pos:start="217:18" pos:end="217:18">s</name><operator pos:start="217:19" pos:end="217:20">-&gt;</operator><name pos:start="217:21" pos:end="217:35">current_picture</name><operator pos:start="217:36" pos:end="217:36">.</operator><name pos:start="217:37" pos:end="217:48">qscale_table</name><index pos:start="217:49" pos:end="217:57">[<expr pos:start="217:50" pos:end="217:56"><name pos:start="217:50" pos:end="217:56">mb_pos2</name></expr>]</index></name></expr>;</expr_stmt>



            <if_stmt pos:start="221:13" pos:end="227:13"><if pos:start="221:13" pos:end="227:13">if<condition pos:start="221:15" pos:end="221:24">(<expr pos:start="221:16" pos:end="221:23"><operator pos:start="221:16" pos:end="221:16">!</operator><name pos:start="221:17" pos:end="221:23">c_avail</name></expr>)</condition> <block pos:start="221:26" pos:end="227:13">{<block_content pos:start="223:17" pos:end="225:32">

                <expr_stmt pos:start="223:17" pos:end="223:57"><expr pos:start="223:17" pos:end="223:56"><call pos:start="223:17" pos:end="223:56"><name pos:start="223:17" pos:end="223:22">memset</name><argument_list pos:start="223:23" pos:end="223:56">(<argument pos:start="223:24" pos:end="223:29"><expr pos:start="223:24" pos:end="223:29"><name pos:start="223:24" pos:end="223:29">ac_val</name></expr></argument>, <argument pos:start="223:32" pos:end="223:32"><expr pos:start="223:32" pos:end="223:32"><literal type="number" pos:start="223:32" pos:end="223:32">0</literal></expr></argument>, <argument pos:start="223:35" pos:end="223:55"><expr pos:start="223:35" pos:end="223:55"><literal type="number" pos:start="223:35" pos:end="223:35">8</literal> <operator pos:start="223:37" pos:end="223:37">*</operator> <sizeof pos:start="223:39" pos:end="223:55">sizeof<argument_list pos:start="223:45" pos:end="223:55">(<argument pos:start="223:46" pos:end="223:54"><expr pos:start="223:46" pos:end="223:54"><name pos:start="223:46" pos:end="223:54"><name pos:start="223:46" pos:end="223:51">ac_val</name><index pos:start="223:52" pos:end="223:54">[<expr pos:start="223:53" pos:end="223:53"><literal type="number" pos:start="223:53" pos:end="223:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="225:17" pos:end="225:32"><expr pos:start="225:17" pos:end="225:31"><name pos:start="225:17" pos:end="225:27">dc_pred_dir</name> <operator pos:start="225:29" pos:end="225:29">=</operator> <literal type="number" pos:start="225:31" pos:end="225:31">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="229:13" pos:end="235:13"><if pos:start="229:13" pos:end="235:13">if<condition pos:start="229:15" pos:end="229:24">(<expr pos:start="229:16" pos:end="229:23"><operator pos:start="229:16" pos:end="229:16">!</operator><name pos:start="229:17" pos:end="229:23">a_avail</name></expr>)</condition> <block pos:start="229:26" pos:end="235:13">{<block_content pos:start="231:17" pos:end="233:32">

                <expr_stmt pos:start="231:17" pos:end="231:61"><expr pos:start="231:17" pos:end="231:60"><call pos:start="231:17" pos:end="231:60"><name pos:start="231:17" pos:end="231:22">memset</name><argument_list pos:start="231:23" pos:end="231:60">(<argument pos:start="231:24" pos:end="231:33"><expr pos:start="231:24" pos:end="231:33"><name pos:start="231:24" pos:end="231:29">ac_val</name> <operator pos:start="231:31" pos:end="231:31">+</operator> <literal type="number" pos:start="231:33" pos:end="231:33">8</literal></expr></argument>, <argument pos:start="231:36" pos:end="231:36"><expr pos:start="231:36" pos:end="231:36"><literal type="number" pos:start="231:36" pos:end="231:36">0</literal></expr></argument>, <argument pos:start="231:39" pos:end="231:59"><expr pos:start="231:39" pos:end="231:59"><literal type="number" pos:start="231:39" pos:end="231:39">8</literal> <operator pos:start="231:41" pos:end="231:41">*</operator> <sizeof pos:start="231:43" pos:end="231:59">sizeof<argument_list pos:start="231:49" pos:end="231:59">(<argument pos:start="231:50" pos:end="231:58"><expr pos:start="231:50" pos:end="231:58"><name pos:start="231:50" pos:end="231:58"><name pos:start="231:50" pos:end="231:55">ac_val</name><index pos:start="231:56" pos:end="231:58">[<expr pos:start="231:57" pos:end="231:57"><literal type="number" pos:start="231:57" pos:end="231:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:32"><expr pos:start="233:17" pos:end="233:31"><name pos:start="233:17" pos:end="233:27">dc_pred_dir</name> <operator pos:start="233:29" pos:end="233:29">=</operator> <literal type="number" pos:start="233:31" pos:end="233:31">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="237:13" pos:end="275:13"><if pos:start="237:13" pos:end="259:13">if<condition pos:start="237:15" pos:end="237:43">(<expr pos:start="237:16" pos:end="237:42"><operator pos:start="237:16" pos:end="237:16">!</operator><name pos:start="237:17" pos:end="237:18">q1</name> <operator pos:start="237:20" pos:end="237:21">&amp;&amp;</operator> <name pos:start="237:23" pos:end="237:24">q1</name> <operator pos:start="237:26" pos:end="237:27">&amp;&amp;</operator> <name pos:start="237:29" pos:end="237:30">q2</name> <operator pos:start="237:32" pos:end="237:33">&amp;&amp;</operator> <name pos:start="237:35" pos:end="237:36">q1</name> <operator pos:start="237:38" pos:end="237:39">!=</operator> <name pos:start="237:41" pos:end="237:42">q2</name></expr>)</condition> <block pos:start="237:45" pos:end="259:13">{<block_content pos:start="239:17" pos:end="257:17">

                <expr_stmt pos:start="239:17" pos:end="239:32"><expr pos:start="239:17" pos:end="239:31"><name pos:start="239:17" pos:end="239:18">q1</name> <operator pos:start="239:20" pos:end="239:20">=</operator> <name pos:start="239:22" pos:end="239:23">q1</name> <operator pos:start="239:25" pos:end="239:25">*</operator> <literal type="number" pos:start="239:27" pos:end="239:29">2</literal> <operator pos:start="239:29" pos:end="239:29">-</operator> <literal type="number" pos:start="239:31" pos:end="239:31">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:32"><expr pos:start="241:17" pos:end="241:31"><name pos:start="241:17" pos:end="241:18">q2</name> <operator pos:start="241:20" pos:end="241:20">=</operator> <name pos:start="241:22" pos:end="241:23">q2</name> <operator pos:start="241:25" pos:end="241:25">*</operator> <literal type="number" pos:start="241:27" pos:end="241:29">2</literal> <operator pos:start="241:29" pos:end="241:29">-</operator> <literal type="number" pos:start="241:31" pos:end="241:31">1</literal></expr>;</expr_stmt>



                <if_stmt pos:start="245:17" pos:end="257:17"><if pos:start="245:17" pos:end="251:17">if<condition pos:start="245:19" pos:end="245:31">(<expr pos:start="245:20" pos:end="245:30"><name pos:start="245:20" pos:end="245:30">dc_pred_dir</name></expr>)</condition> <block pos:start="245:33" pos:end="251:17">{<block_content pos:start="247:21" pos:end="249:96"> <comment type="line" pos:start="245:35" pos:end="245:40">//left</comment>

                    <for pos:start="247:21" pos:end="249:96">for<control pos:start="247:24" pos:end="247:42">(<init pos:start="247:25" pos:end="247:30"><expr pos:start="247:25" pos:end="247:29"><name pos:start="247:25" pos:end="247:25">k</name> <operator pos:start="247:27" pos:end="247:27">=</operator> <literal type="number" pos:start="247:29" pos:end="247:29">1</literal></expr>;</init> <condition pos:start="247:32" pos:end="247:37"><expr pos:start="247:32" pos:end="247:36"><name pos:start="247:32" pos:end="247:32">k</name> <operator pos:start="247:34" pos:end="247:34">&lt;</operator> <literal type="number" pos:start="247:36" pos:end="247:36">8</literal></expr>;</condition> <incr pos:start="247:39" pos:end="247:41"><expr pos:start="247:39" pos:end="247:41"><name pos:start="247:39" pos:end="247:39">k</name><operator pos:start="247:40" pos:end="247:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="249:25" pos:end="249:96"><block_content pos:start="249:25" pos:end="249:96">

                        <expr_stmt pos:start="249:25" pos:end="249:96"><expr pos:start="249:25" pos:end="249:95"><name pos:start="249:25" pos:end="249:37"><name pos:start="249:25" pos:end="249:29">block</name><index pos:start="249:30" pos:end="249:37">[<expr pos:start="249:31" pos:end="249:36"><name pos:start="249:31" pos:end="249:31">k</name> <operator pos:start="249:33" pos:end="249:34">&lt;&lt;</operator> <literal type="number" pos:start="249:36" pos:end="249:36">3</literal></expr>]</index></name> <operator pos:start="249:39" pos:end="249:40">+=</operator> <operator pos:start="249:42" pos:end="249:42">(</operator><name pos:start="249:43" pos:end="249:51"><name pos:start="249:43" pos:end="249:48">ac_val</name><index pos:start="249:49" pos:end="249:51">[<expr pos:start="249:50" pos:end="249:50"><name pos:start="249:50" pos:end="249:50">k</name></expr>]</index></name> <operator pos:start="249:53" pos:end="249:53">*</operator> <name pos:start="249:55" pos:end="249:56">q2</name> <operator pos:start="249:58" pos:end="249:58">*</operator> <name pos:start="249:60" pos:end="249:78"><name pos:start="249:60" pos:end="249:70">vc1_dqscale</name><index pos:start="249:71" pos:end="249:78">[<expr pos:start="249:72" pos:end="249:77"><name pos:start="249:72" pos:end="249:73">q1</name> <operator pos:start="249:75" pos:end="249:75">-</operator> <literal type="number" pos:start="249:77" pos:end="249:77">1</literal></expr>]</index></name> <operator pos:start="249:80" pos:end="249:80">+</operator> <literal type="number" pos:start="249:82" pos:end="249:88">0x20000</literal><operator pos:start="249:89" pos:end="249:89">)</operator> <operator pos:start="249:91" pos:end="249:92">&gt;&gt;</operator> <literal type="number" pos:start="249:94" pos:end="249:95">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if> <else pos:start="251:19" pos:end="257:17">else <block pos:start="251:24" pos:end="257:17">{<block_content pos:start="253:21" pos:end="255:95"> <comment type="line" pos:start="251:26" pos:end="251:30">//top</comment>

                    <for pos:start="253:21" pos:end="255:95">for<control pos:start="253:24" pos:end="253:42">(<init pos:start="253:25" pos:end="253:30"><expr pos:start="253:25" pos:end="253:29"><name pos:start="253:25" pos:end="253:25">k</name> <operator pos:start="253:27" pos:end="253:27">=</operator> <literal type="number" pos:start="253:29" pos:end="253:29">1</literal></expr>;</init> <condition pos:start="253:32" pos:end="253:37"><expr pos:start="253:32" pos:end="253:36"><name pos:start="253:32" pos:end="253:32">k</name> <operator pos:start="253:34" pos:end="253:34">&lt;</operator> <literal type="number" pos:start="253:36" pos:end="253:36">8</literal></expr>;</condition> <incr pos:start="253:39" pos:end="253:41"><expr pos:start="253:39" pos:end="253:41"><name pos:start="253:39" pos:end="253:39">k</name><operator pos:start="253:40" pos:end="253:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="255:25" pos:end="255:95"><block_content pos:start="255:25" pos:end="255:95">

                        <expr_stmt pos:start="255:25" pos:end="255:95"><expr pos:start="255:25" pos:end="255:94"><name pos:start="255:25" pos:end="255:32"><name pos:start="255:25" pos:end="255:29">block</name><index pos:start="255:30" pos:end="255:32">[<expr pos:start="255:31" pos:end="255:31"><name pos:start="255:31" pos:end="255:31">k</name></expr>]</index></name> <operator pos:start="255:34" pos:end="255:35">+=</operator> <operator pos:start="255:37" pos:end="255:37">(</operator><name pos:start="255:38" pos:end="255:50"><name pos:start="255:38" pos:end="255:43">ac_val</name><index pos:start="255:44" pos:end="255:50">[<expr pos:start="255:45" pos:end="255:49"><name pos:start="255:45" pos:end="255:45">k</name> <operator pos:start="255:47" pos:end="255:47">+</operator> <literal type="number" pos:start="255:49" pos:end="255:49">8</literal></expr>]</index></name> <operator pos:start="255:52" pos:end="255:52">*</operator> <name pos:start="255:54" pos:end="255:55">q2</name> <operator pos:start="255:57" pos:end="255:57">*</operator> <name pos:start="255:59" pos:end="255:77"><name pos:start="255:59" pos:end="255:69">vc1_dqscale</name><index pos:start="255:70" pos:end="255:77">[<expr pos:start="255:71" pos:end="255:76"><name pos:start="255:71" pos:end="255:72">q1</name> <operator pos:start="255:74" pos:end="255:74">-</operator> <literal type="number" pos:start="255:76" pos:end="255:76">1</literal></expr>]</index></name> <operator pos:start="255:79" pos:end="255:79">+</operator> <literal type="number" pos:start="255:81" pos:end="255:87">0x20000</literal><operator pos:start="255:88" pos:end="255:88">)</operator> <operator pos:start="255:90" pos:end="255:91">&gt;&gt;</operator> <literal type="number" pos:start="255:93" pos:end="255:94">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="259:15" pos:end="275:13">else <block pos:start="259:20" pos:end="275:13">{<block_content pos:start="261:17" pos:end="273:17">

                <if_stmt pos:start="261:17" pos:end="273:17"><if pos:start="261:17" pos:end="267:17">if<condition pos:start="261:19" pos:end="261:31">(<expr pos:start="261:20" pos:end="261:30"><name pos:start="261:20" pos:end="261:30">dc_pred_dir</name></expr>)</condition> <block pos:start="261:33" pos:end="267:17">{<block_content pos:start="263:21" pos:end="265:51"> <comment type="line" pos:start="261:35" pos:end="261:40">//left</comment>

                    <for pos:start="263:21" pos:end="265:51">for<control pos:start="263:24" pos:end="263:42">(<init pos:start="263:25" pos:end="263:30"><expr pos:start="263:25" pos:end="263:29"><name pos:start="263:25" pos:end="263:25">k</name> <operator pos:start="263:27" pos:end="263:27">=</operator> <literal type="number" pos:start="263:29" pos:end="263:29">1</literal></expr>;</init> <condition pos:start="263:32" pos:end="263:37"><expr pos:start="263:32" pos:end="263:36"><name pos:start="263:32" pos:end="263:32">k</name> <operator pos:start="263:34" pos:end="263:34">&lt;</operator> <literal type="number" pos:start="263:36" pos:end="263:36">8</literal></expr>;</condition> <incr pos:start="263:39" pos:end="263:41"><expr pos:start="263:39" pos:end="263:41"><name pos:start="263:39" pos:end="263:39">k</name><operator pos:start="263:40" pos:end="263:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="265:25" pos:end="265:51"><block_content pos:start="265:25" pos:end="265:51">

                        <expr_stmt pos:start="265:25" pos:end="265:51"><expr pos:start="265:25" pos:end="265:50"><name pos:start="265:25" pos:end="265:37"><name pos:start="265:25" pos:end="265:29">block</name><index pos:start="265:30" pos:end="265:37">[<expr pos:start="265:31" pos:end="265:36"><name pos:start="265:31" pos:end="265:31">k</name> <operator pos:start="265:33" pos:end="265:34">&lt;&lt;</operator> <literal type="number" pos:start="265:36" pos:end="265:36">3</literal></expr>]</index></name> <operator pos:start="265:39" pos:end="265:40">+=</operator> <name pos:start="265:42" pos:end="265:50"><name pos:start="265:42" pos:end="265:47">ac_val</name><index pos:start="265:48" pos:end="265:50">[<expr pos:start="265:49" pos:end="265:49"><name pos:start="265:49" pos:end="265:49">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if> <else pos:start="267:19" pos:end="273:17">else <block pos:start="267:24" pos:end="273:17">{<block_content pos:start="269:21" pos:end="271:50"> <comment type="line" pos:start="267:26" pos:end="267:30">//top</comment>

                    <for pos:start="269:21" pos:end="271:50">for<control pos:start="269:24" pos:end="269:42">(<init pos:start="269:25" pos:end="269:30"><expr pos:start="269:25" pos:end="269:29"><name pos:start="269:25" pos:end="269:25">k</name> <operator pos:start="269:27" pos:end="269:27">=</operator> <literal type="number" pos:start="269:29" pos:end="269:29">1</literal></expr>;</init> <condition pos:start="269:32" pos:end="269:37"><expr pos:start="269:32" pos:end="269:36"><name pos:start="269:32" pos:end="269:32">k</name> <operator pos:start="269:34" pos:end="269:34">&lt;</operator> <literal type="number" pos:start="269:36" pos:end="269:36">8</literal></expr>;</condition> <incr pos:start="269:39" pos:end="269:41"><expr pos:start="269:39" pos:end="269:41"><name pos:start="269:39" pos:end="269:39">k</name><operator pos:start="269:40" pos:end="269:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="271:25" pos:end="271:50"><block_content pos:start="271:25" pos:end="271:50">

                        <expr_stmt pos:start="271:25" pos:end="271:50"><expr pos:start="271:25" pos:end="271:49"><name pos:start="271:25" pos:end="271:32"><name pos:start="271:25" pos:end="271:29">block</name><index pos:start="271:30" pos:end="271:32">[<expr pos:start="271:31" pos:end="271:31"><name pos:start="271:31" pos:end="271:31">k</name></expr>]</index></name> <operator pos:start="271:34" pos:end="271:35">+=</operator> <name pos:start="271:37" pos:end="271:49"><name pos:start="271:37" pos:end="271:42">ac_val</name><index pos:start="271:43" pos:end="271:49">[<expr pos:start="271:44" pos:end="271:48"><name pos:start="271:44" pos:end="271:44">k</name> <operator pos:start="271:46" pos:end="271:46">+</operator> <literal type="number" pos:start="271:48" pos:end="271:48">8</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="279:9" pos:end="279:51">/* save AC coeffs for further prediction */</comment>

        <for pos:start="281:9" pos:end="287:9">for<control pos:start="281:12" pos:end="281:30">(<init pos:start="281:13" pos:end="281:18"><expr pos:start="281:13" pos:end="281:17"><name pos:start="281:13" pos:end="281:13">k</name> <operator pos:start="281:15" pos:end="281:15">=</operator> <literal type="number" pos:start="281:17" pos:end="281:17">1</literal></expr>;</init> <condition pos:start="281:20" pos:end="281:25"><expr pos:start="281:20" pos:end="281:24"><name pos:start="281:20" pos:end="281:20">k</name> <operator pos:start="281:22" pos:end="281:22">&lt;</operator> <literal type="number" pos:start="281:24" pos:end="281:24">8</literal></expr>;</condition> <incr pos:start="281:27" pos:end="281:29"><expr pos:start="281:27" pos:end="281:29"><name pos:start="281:27" pos:end="281:27">k</name><operator pos:start="281:28" pos:end="281:29">++</operator></expr></incr>)</control> <block pos:start="281:32" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:38">

            <expr_stmt pos:start="283:13" pos:end="283:39"><expr pos:start="283:13" pos:end="283:38"><name pos:start="283:13" pos:end="283:22"><name pos:start="283:13" pos:end="283:19">ac_val2</name><index pos:start="283:20" pos:end="283:22">[<expr pos:start="283:21" pos:end="283:21"><name pos:start="283:21" pos:end="283:21">k</name></expr>]</index></name> <operator pos:start="283:24" pos:end="283:24">=</operator> <name pos:start="283:26" pos:end="283:38"><name pos:start="283:26" pos:end="283:30">block</name><index pos:start="283:31" pos:end="283:38">[<expr pos:start="283:32" pos:end="283:37"><name pos:start="283:32" pos:end="283:32">k</name> <operator pos:start="283:34" pos:end="283:35">&lt;&lt;</operator> <literal type="number" pos:start="283:37" pos:end="283:37">3</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:38"><expr pos:start="285:13" pos:end="285:37"><name pos:start="285:13" pos:end="285:26"><name pos:start="285:13" pos:end="285:19">ac_val2</name><index pos:start="285:20" pos:end="285:26">[<expr pos:start="285:21" pos:end="285:25"><name pos:start="285:21" pos:end="285:21">k</name> <operator pos:start="285:23" pos:end="285:23">+</operator> <literal type="number" pos:start="285:25" pos:end="285:25">8</literal></expr>]</index></name> <operator pos:start="285:28" pos:end="285:28">=</operator> <name pos:start="285:30" pos:end="285:37"><name pos:start="285:30" pos:end="285:34">block</name><index pos:start="285:35" pos:end="285:37">[<expr pos:start="285:36" pos:end="285:36"><name pos:start="285:36" pos:end="285:36">k</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="291:9" pos:end="291:29">/* scale AC coeffs */</comment>

        <for pos:start="293:9" pos:end="303:13">for<control pos:start="293:12" pos:end="293:31">(<init pos:start="293:13" pos:end="293:18"><expr pos:start="293:13" pos:end="293:17"><name pos:start="293:13" pos:end="293:13">k</name> <operator pos:start="293:15" pos:end="293:15">=</operator> <literal type="number" pos:start="293:17" pos:end="293:17">1</literal></expr>;</init> <condition pos:start="293:20" pos:end="293:26"><expr pos:start="293:20" pos:end="293:25"><name pos:start="293:20" pos:end="293:20">k</name> <operator pos:start="293:22" pos:end="293:22">&lt;</operator> <literal type="number" pos:start="293:24" pos:end="293:25">64</literal></expr>;</condition> <incr pos:start="293:28" pos:end="293:30"><expr pos:start="293:28" pos:end="293:30"><name pos:start="293:28" pos:end="293:28">k</name><operator pos:start="293:29" pos:end="293:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="295:13" pos:end="303:13"><block_content pos:start="295:13" pos:end="303:13">

            <if_stmt pos:start="295:13" pos:end="303:13"><if pos:start="295:13" pos:end="303:13">if<condition pos:start="295:15" pos:end="295:24">(<expr pos:start="295:16" pos:end="295:23"><name pos:start="295:16" pos:end="295:23"><name pos:start="295:16" pos:end="295:20">block</name><index pos:start="295:21" pos:end="295:23">[<expr pos:start="295:22" pos:end="295:22"><name pos:start="295:22" pos:end="295:22">k</name></expr>]</index></name></expr>)</condition> <block pos:start="295:26" pos:end="303:13">{<block_content pos:start="297:17" pos:end="301:66">

                <expr_stmt pos:start="297:17" pos:end="297:34"><expr pos:start="297:17" pos:end="297:33"><name pos:start="297:17" pos:end="297:24"><name pos:start="297:17" pos:end="297:21">block</name><index pos:start="297:22" pos:end="297:24">[<expr pos:start="297:23" pos:end="297:23"><name pos:start="297:23" pos:end="297:23">k</name></expr>]</index></name> <operator pos:start="297:26" pos:end="297:27">*=</operator> <name pos:start="297:29" pos:end="297:33">scale</name></expr>;</expr_stmt>

                <if_stmt pos:start="299:17" pos:end="301:66"><if pos:start="299:17" pos:end="301:66">if<condition pos:start="299:19" pos:end="299:34">(<expr pos:start="299:20" pos:end="299:33"><operator pos:start="299:20" pos:end="299:20">!</operator><name pos:start="299:21" pos:end="299:33"><name pos:start="299:21" pos:end="299:21">v</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:33">pquantizer</name></name></expr>)</condition><block type="pseudo" pos:start="301:21" pos:end="301:66"><block_content pos:start="301:21" pos:end="301:66">

                    <expr_stmt pos:start="301:21" pos:end="301:66"><expr pos:start="301:21" pos:end="301:65"><name pos:start="301:21" pos:end="301:28"><name pos:start="301:21" pos:end="301:25">block</name><index pos:start="301:26" pos:end="301:28">[<expr pos:start="301:27" pos:end="301:27"><name pos:start="301:27" pos:end="301:27">k</name></expr>]</index></name> <operator pos:start="301:30" pos:end="301:31">+=</operator> <ternary pos:start="301:33" pos:end="301:65"><condition pos:start="301:33" pos:end="301:48"><expr pos:start="301:33" pos:end="301:46"><operator pos:start="301:33" pos:end="301:33">(</operator><name pos:start="301:34" pos:end="301:41"><name pos:start="301:34" pos:end="301:38">block</name><index pos:start="301:39" pos:end="301:41">[<expr pos:start="301:40" pos:end="301:40"><name pos:start="301:40" pos:end="301:40">k</name></expr>]</index></name> <operator pos:start="301:43" pos:end="301:43">&lt;</operator> <literal type="number" pos:start="301:45" pos:end="301:45">0</literal><operator pos:start="301:46" pos:end="301:46">)</operator></expr> ?</condition><then pos:start="301:50" pos:end="301:56"> <expr pos:start="301:50" pos:end="301:56"><operator pos:start="301:50" pos:end="301:50">-</operator><name pos:start="301:51" pos:end="301:56">mquant</name></expr> </then><else pos:start="301:58" pos:end="301:65">: <expr pos:start="301:60" pos:end="301:65"><name pos:start="301:60" pos:end="301:65">mquant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>



        <if_stmt pos:start="307:9" pos:end="307:30"><if pos:start="307:9" pos:end="307:30">if<condition pos:start="307:11" pos:end="307:22">(<expr pos:start="307:12" pos:end="307:21"><name pos:start="307:12" pos:end="307:21"><name pos:start="307:12" pos:end="307:12">s</name><operator pos:start="307:13" pos:end="307:14">-&gt;</operator><name pos:start="307:15" pos:end="307:21">ac_pred</name></name></expr>)</condition><block type="pseudo" pos:start="307:24" pos:end="307:30"><block_content pos:start="307:24" pos:end="307:30"> <expr_stmt pos:start="307:24" pos:end="307:30"><expr pos:start="307:24" pos:end="307:29"><name pos:start="307:24" pos:end="307:24">i</name> <operator pos:start="307:26" pos:end="307:26">=</operator> <literal type="number" pos:start="307:28" pos:end="307:29">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block>



<label pos:start="313:1" pos:end="313:10"><name pos:start="313:1" pos:end="313:9">not_coded</name>:</label>

    <if_stmt pos:start="315:5" pos:end="401:5"><if pos:start="315:5" pos:end="401:5">if<condition pos:start="315:7" pos:end="315:14">(<expr pos:start="315:8" pos:end="315:13"><operator pos:start="315:8" pos:end="315:8">!</operator><name pos:start="315:9" pos:end="315:13">coded</name></expr>)</condition> <block pos:start="315:16" pos:end="401:5">{<block_content pos:start="317:9" pos:end="399:9">

        <decl_stmt pos:start="317:9" pos:end="317:21"><decl pos:start="317:9" pos:end="317:13"><type pos:start="317:9" pos:end="317:11"><name pos:start="317:9" pos:end="317:11">int</name></type> <name pos:start="317:13" pos:end="317:13">k</name></decl>, <decl pos:start="317:16" pos:end="317:20"><type ref="prev" pos:start="317:9" pos:end="317:11"/><name pos:start="317:16" pos:end="317:20">scale</name></decl>;</decl_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:58"><expr pos:start="319:9" pos:end="319:57"><name pos:start="319:9" pos:end="319:14">ac_val</name> <operator pos:start="319:16" pos:end="319:16">=</operator> <name pos:start="319:18" pos:end="319:32"><name pos:start="319:18" pos:end="319:18">s</name><operator pos:start="319:19" pos:end="319:20">-&gt;</operator><name pos:start="319:21" pos:end="319:26">ac_val</name><index pos:start="319:27" pos:end="319:29">[<expr pos:start="319:28" pos:end="319:28"><literal type="number" pos:start="319:28" pos:end="319:28">0</literal></expr>]</index><index pos:start="319:30" pos:end="319:32">[<expr pos:start="319:31" pos:end="319:31"><literal type="number" pos:start="319:31" pos:end="319:31">0</literal></expr>]</index></name> <operator pos:start="319:34" pos:end="319:34">+</operator> <name pos:start="319:36" pos:end="319:52"><name pos:start="319:36" pos:end="319:36">s</name><operator pos:start="319:37" pos:end="319:38">-&gt;</operator><name pos:start="319:39" pos:end="319:49">block_index</name><index pos:start="319:50" pos:end="319:52">[<expr pos:start="319:51" pos:end="319:51"><name pos:start="319:51" pos:end="319:51">n</name></expr>]</index></name> <operator pos:start="319:54" pos:end="319:54">*</operator> <literal type="number" pos:start="319:56" pos:end="319:57">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:25"><expr pos:start="321:9" pos:end="321:24"><name pos:start="321:9" pos:end="321:15">ac_val2</name> <operator pos:start="321:17" pos:end="321:17">=</operator> <name pos:start="321:19" pos:end="321:24">ac_val</name></expr>;</expr_stmt>



        <if_stmt pos:start="325:9" pos:end="331:9"><if pos:start="325:9" pos:end="331:9">if<condition pos:start="325:11" pos:end="325:20">(<expr pos:start="325:12" pos:end="325:19"><operator pos:start="325:12" pos:end="325:12">!</operator><name pos:start="325:13" pos:end="325:19">c_avail</name></expr>)</condition> <block pos:start="325:22" pos:end="331:9">{<block_content pos:start="327:13" pos:end="329:28">

            <expr_stmt pos:start="327:13" pos:end="327:53"><expr pos:start="327:13" pos:end="327:52"><call pos:start="327:13" pos:end="327:52"><name pos:start="327:13" pos:end="327:18">memset</name><argument_list pos:start="327:19" pos:end="327:52">(<argument pos:start="327:20" pos:end="327:25"><expr pos:start="327:20" pos:end="327:25"><name pos:start="327:20" pos:end="327:25">ac_val</name></expr></argument>, <argument pos:start="327:28" pos:end="327:28"><expr pos:start="327:28" pos:end="327:28"><literal type="number" pos:start="327:28" pos:end="327:28">0</literal></expr></argument>, <argument pos:start="327:31" pos:end="327:51"><expr pos:start="327:31" pos:end="327:51"><literal type="number" pos:start="327:31" pos:end="327:31">8</literal> <operator pos:start="327:33" pos:end="327:33">*</operator> <sizeof pos:start="327:35" pos:end="327:51">sizeof<argument_list pos:start="327:41" pos:end="327:51">(<argument pos:start="327:42" pos:end="327:50"><expr pos:start="327:42" pos:end="327:50"><name pos:start="327:42" pos:end="327:50"><name pos:start="327:42" pos:end="327:47">ac_val</name><index pos:start="327:48" pos:end="327:50">[<expr pos:start="327:49" pos:end="327:49"><literal type="number" pos:start="327:49" pos:end="327:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:28"><expr pos:start="329:13" pos:end="329:27"><name pos:start="329:13" pos:end="329:23">dc_pred_dir</name> <operator pos:start="329:25" pos:end="329:25">=</operator> <literal type="number" pos:start="329:27" pos:end="329:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="333:9" pos:end="339:9"><if pos:start="333:9" pos:end="339:9">if<condition pos:start="333:11" pos:end="333:20">(<expr pos:start="333:12" pos:end="333:19"><operator pos:start="333:12" pos:end="333:12">!</operator><name pos:start="333:13" pos:end="333:19">a_avail</name></expr>)</condition> <block pos:start="333:22" pos:end="339:9">{<block_content pos:start="335:13" pos:end="337:28">

            <expr_stmt pos:start="335:13" pos:end="335:57"><expr pos:start="335:13" pos:end="335:56"><call pos:start="335:13" pos:end="335:56"><name pos:start="335:13" pos:end="335:18">memset</name><argument_list pos:start="335:19" pos:end="335:56">(<argument pos:start="335:20" pos:end="335:29"><expr pos:start="335:20" pos:end="335:29"><name pos:start="335:20" pos:end="335:25">ac_val</name> <operator pos:start="335:27" pos:end="335:27">+</operator> <literal type="number" pos:start="335:29" pos:end="335:29">8</literal></expr></argument>, <argument pos:start="335:32" pos:end="335:32"><expr pos:start="335:32" pos:end="335:32"><literal type="number" pos:start="335:32" pos:end="335:32">0</literal></expr></argument>, <argument pos:start="335:35" pos:end="335:55"><expr pos:start="335:35" pos:end="335:55"><literal type="number" pos:start="335:35" pos:end="335:35">8</literal> <operator pos:start="335:37" pos:end="335:37">*</operator> <sizeof pos:start="335:39" pos:end="335:55">sizeof<argument_list pos:start="335:45" pos:end="335:55">(<argument pos:start="335:46" pos:end="335:54"><expr pos:start="335:46" pos:end="335:54"><name pos:start="335:46" pos:end="335:54"><name pos:start="335:46" pos:end="335:51">ac_val</name><index pos:start="335:52" pos:end="335:54">[<expr pos:start="335:53" pos:end="335:53"><literal type="number" pos:start="335:53" pos:end="335:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="337:13" pos:end="337:28"><expr pos:start="337:13" pos:end="337:27"><name pos:start="337:13" pos:end="337:23">dc_pred_dir</name> <operator pos:start="337:25" pos:end="337:25">=</operator> <literal type="number" pos:start="337:27" pos:end="337:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="343:9" pos:end="343:39"><expr pos:start="343:9" pos:end="343:38"><name pos:start="343:9" pos:end="343:13">scale</name> <operator pos:start="343:15" pos:end="343:15">=</operator> <name pos:start="343:17" pos:end="343:22">mquant</name> <operator pos:start="343:24" pos:end="343:24">*</operator> <literal type="number" pos:start="343:26" pos:end="343:28">2</literal> <operator pos:start="343:28" pos:end="343:28">+</operator> <name pos:start="343:30" pos:end="343:38"><name pos:start="343:30" pos:end="343:30">v</name><operator pos:start="343:31" pos:end="343:32">-&gt;</operator><name pos:start="343:33" pos:end="343:38">halfpq</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:35"><expr pos:start="345:9" pos:end="345:34"><call pos:start="345:9" pos:end="345:34"><name pos:start="345:9" pos:end="345:14">memset</name><argument_list pos:start="345:15" pos:end="345:34">(<argument pos:start="345:16" pos:end="345:22"><expr pos:start="345:16" pos:end="345:22"><name pos:start="345:16" pos:end="345:22">ac_val2</name></expr></argument>, <argument pos:start="345:25" pos:end="345:25"><expr pos:start="345:25" pos:end="345:25"><literal type="number" pos:start="345:25" pos:end="345:25">0</literal></expr></argument>, <argument pos:start="345:28" pos:end="345:33"><expr pos:start="345:28" pos:end="345:33"><literal type="number" pos:start="345:28" pos:end="345:29">16</literal> <operator pos:start="345:31" pos:end="345:31">*</operator> <literal type="number" pos:start="345:33" pos:end="345:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="347:9" pos:end="363:9"><if pos:start="347:9" pos:end="355:9">if<condition pos:start="347:11" pos:end="347:23">(<expr pos:start="347:12" pos:end="347:22"><name pos:start="347:12" pos:end="347:22">dc_pred_dir</name></expr>)</condition> <block pos:start="347:25" pos:end="355:9">{<block_content pos:start="349:13" pos:end="353:47"><comment type="line" pos:start="347:26" pos:end="347:31">//left</comment>

            <expr_stmt pos:start="349:13" pos:end="349:25"><expr pos:start="349:13" pos:end="349:24"><name pos:start="349:13" pos:end="349:18">ac_val</name> <operator pos:start="349:20" pos:end="349:21">-=</operator> <literal type="number" pos:start="349:23" pos:end="349:24">16</literal></expr>;</expr_stmt>

            <if_stmt pos:start="351:13" pos:end="353:47"><if pos:start="351:13" pos:end="353:47">if<condition pos:start="351:15" pos:end="351:26">(<expr pos:start="351:16" pos:end="351:25"><name pos:start="351:16" pos:end="351:25"><name pos:start="351:16" pos:end="351:16">s</name><operator pos:start="351:17" pos:end="351:18">-&gt;</operator><name pos:start="351:19" pos:end="351:25">ac_pred</name></name></expr>)</condition><block type="pseudo" pos:start="353:17" pos:end="353:47"><block_content pos:start="353:17" pos:end="353:47">

                <expr_stmt pos:start="353:17" pos:end="353:47"><expr pos:start="353:17" pos:end="353:46"><call pos:start="353:17" pos:end="353:46"><name pos:start="353:17" pos:end="353:22">memcpy</name><argument_list pos:start="353:23" pos:end="353:46">(<argument pos:start="353:24" pos:end="353:30"><expr pos:start="353:24" pos:end="353:30"><name pos:start="353:24" pos:end="353:30">ac_val2</name></expr></argument>, <argument pos:start="353:33" pos:end="353:38"><expr pos:start="353:33" pos:end="353:38"><name pos:start="353:33" pos:end="353:38">ac_val</name></expr></argument>, <argument pos:start="353:41" pos:end="353:45"><expr pos:start="353:41" pos:end="353:45"><literal type="number" pos:start="353:41" pos:end="353:41">8</literal> <operator pos:start="353:43" pos:end="353:43">*</operator> <literal type="number" pos:start="353:45" pos:end="353:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="355:11" pos:end="363:9">else <block pos:start="355:16" pos:end="363:9">{<block_content pos:start="357:13" pos:end="361:55"><comment type="line" pos:start="355:17" pos:end="355:21">//top</comment>

            <expr_stmt pos:start="357:13" pos:end="357:44"><expr pos:start="357:13" pos:end="357:43"><name pos:start="357:13" pos:end="357:18">ac_val</name> <operator pos:start="357:20" pos:end="357:21">-=</operator> <literal type="number" pos:start="357:23" pos:end="357:24">16</literal> <operator pos:start="357:26" pos:end="357:26">*</operator> <name pos:start="357:28" pos:end="357:43"><name pos:start="357:28" pos:end="357:28">s</name><operator pos:start="357:29" pos:end="357:30">-&gt;</operator><name pos:start="357:31" pos:end="357:40">block_wrap</name><index pos:start="357:41" pos:end="357:43">[<expr pos:start="357:42" pos:end="357:42"><name pos:start="357:42" pos:end="357:42">n</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="359:13" pos:end="361:55"><if pos:start="359:13" pos:end="361:55">if<condition pos:start="359:15" pos:end="359:26">(<expr pos:start="359:16" pos:end="359:25"><name pos:start="359:16" pos:end="359:25"><name pos:start="359:16" pos:end="359:16">s</name><operator pos:start="359:17" pos:end="359:18">-&gt;</operator><name pos:start="359:19" pos:end="359:25">ac_pred</name></name></expr>)</condition><block type="pseudo" pos:start="361:17" pos:end="361:55"><block_content pos:start="361:17" pos:end="361:55">

                <expr_stmt pos:start="361:17" pos:end="361:55"><expr pos:start="361:17" pos:end="361:54"><call pos:start="361:17" pos:end="361:54"><name pos:start="361:17" pos:end="361:22">memcpy</name><argument_list pos:start="361:23" pos:end="361:54">(<argument pos:start="361:24" pos:end="361:34"><expr pos:start="361:24" pos:end="361:34"><name pos:start="361:24" pos:end="361:30">ac_val2</name> <operator pos:start="361:32" pos:end="361:32">+</operator> <literal type="number" pos:start="361:34" pos:end="361:34">8</literal></expr></argument>, <argument pos:start="361:37" pos:end="361:46"><expr pos:start="361:37" pos:end="361:46"><name pos:start="361:37" pos:end="361:42">ac_val</name> <operator pos:start="361:44" pos:end="361:44">+</operator> <literal type="number" pos:start="361:46" pos:end="361:46">8</literal></expr></argument>, <argument pos:start="361:49" pos:end="361:53"><expr pos:start="361:49" pos:end="361:53"><literal type="number" pos:start="361:49" pos:end="361:49">8</literal> <operator pos:start="361:51" pos:end="361:51">*</operator> <literal type="number" pos:start="361:53" pos:end="361:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="367:9" pos:end="367:43">/* apply AC prediction if needed */</comment>

        <if_stmt pos:start="369:9" pos:end="399:9"><if pos:start="369:9" pos:end="399:9">if<condition pos:start="369:11" pos:end="369:22">(<expr pos:start="369:12" pos:end="369:21"><name pos:start="369:12" pos:end="369:21"><name pos:start="369:12" pos:end="369:12">s</name><operator pos:start="369:13" pos:end="369:14">-&gt;</operator><name pos:start="369:15" pos:end="369:21">ac_pred</name></name></expr>)</condition> <block pos:start="369:24" pos:end="399:9">{<block_content pos:start="371:13" pos:end="397:19">

            <if_stmt pos:start="371:13" pos:end="395:13"><if pos:start="371:13" pos:end="383:13">if<condition pos:start="371:15" pos:end="371:27">(<expr pos:start="371:16" pos:end="371:26"><name pos:start="371:16" pos:end="371:26">dc_pred_dir</name></expr>)</condition> <block pos:start="371:29" pos:end="383:13">{<block_content pos:start="373:17" pos:end="381:17"> <comment type="line" pos:start="371:31" pos:end="371:36">//left</comment>

                <for pos:start="373:17" pos:end="381:17">for<control pos:start="373:20" pos:end="373:38">(<init pos:start="373:21" pos:end="373:26"><expr pos:start="373:21" pos:end="373:25"><name pos:start="373:21" pos:end="373:21">k</name> <operator pos:start="373:23" pos:end="373:23">=</operator> <literal type="number" pos:start="373:25" pos:end="373:25">1</literal></expr>;</init> <condition pos:start="373:28" pos:end="373:33"><expr pos:start="373:28" pos:end="373:32"><name pos:start="373:28" pos:end="373:28">k</name> <operator pos:start="373:30" pos:end="373:30">&lt;</operator> <literal type="number" pos:start="373:32" pos:end="373:32">8</literal></expr>;</condition> <incr pos:start="373:35" pos:end="373:37"><expr pos:start="373:35" pos:end="373:37"><name pos:start="373:35" pos:end="373:35">k</name><operator pos:start="373:36" pos:end="373:37">++</operator></expr></incr>)</control> <block pos:start="373:40" pos:end="381:17">{<block_content pos:start="375:21" pos:end="379:80">

                    <expr_stmt pos:start="375:21" pos:end="375:54"><expr pos:start="375:21" pos:end="375:53"><name pos:start="375:21" pos:end="375:33"><name pos:start="375:21" pos:end="375:25">block</name><index pos:start="375:26" pos:end="375:33">[<expr pos:start="375:27" pos:end="375:32"><name pos:start="375:27" pos:end="375:27">k</name> <operator pos:start="375:29" pos:end="375:30">&lt;&lt;</operator> <literal type="number" pos:start="375:32" pos:end="375:32">3</literal></expr>]</index></name> <operator pos:start="375:35" pos:end="375:35">=</operator> <name pos:start="375:37" pos:end="375:45"><name pos:start="375:37" pos:end="375:42">ac_val</name><index pos:start="375:43" pos:end="375:45">[<expr pos:start="375:44" pos:end="375:44"><name pos:start="375:44" pos:end="375:44">k</name></expr>]</index></name> <operator pos:start="375:47" pos:end="375:47">*</operator> <name pos:start="375:49" pos:end="375:53">scale</name></expr>;</expr_stmt>

                    <if_stmt pos:start="377:21" pos:end="379:80"><if pos:start="377:21" pos:end="379:80">if<condition pos:start="377:23" pos:end="377:38">(<expr pos:start="377:24" pos:end="377:37"><operator pos:start="377:24" pos:end="377:24">!</operator><name pos:start="377:25" pos:end="377:37"><name pos:start="377:25" pos:end="377:25">v</name><operator pos:start="377:26" pos:end="377:27">-&gt;</operator><name pos:start="377:28" pos:end="377:37">pquantizer</name></name></expr>)</condition><block type="pseudo" pos:start="379:25" pos:end="379:80"><block_content pos:start="379:25" pos:end="379:80">

                        <expr_stmt pos:start="379:25" pos:end="379:80"><expr pos:start="379:25" pos:end="379:79"><name pos:start="379:25" pos:end="379:37"><name pos:start="379:25" pos:end="379:29">block</name><index pos:start="379:30" pos:end="379:37">[<expr pos:start="379:31" pos:end="379:36"><name pos:start="379:31" pos:end="379:31">k</name> <operator pos:start="379:33" pos:end="379:34">&lt;&lt;</operator> <literal type="number" pos:start="379:36" pos:end="379:36">3</literal></expr>]</index></name> <operator pos:start="379:39" pos:end="379:40">+=</operator> <ternary pos:start="379:42" pos:end="379:79"><condition pos:start="379:42" pos:end="379:62"><expr pos:start="379:42" pos:end="379:60"><operator pos:start="379:42" pos:end="379:42">(</operator><name pos:start="379:43" pos:end="379:55"><name pos:start="379:43" pos:end="379:47">block</name><index pos:start="379:48" pos:end="379:55">[<expr pos:start="379:49" pos:end="379:54"><name pos:start="379:49" pos:end="379:49">k</name> <operator pos:start="379:51" pos:end="379:52">&lt;&lt;</operator> <literal type="number" pos:start="379:54" pos:end="379:54">3</literal></expr>]</index></name> <operator pos:start="379:57" pos:end="379:57">&lt;</operator> <literal type="number" pos:start="379:59" pos:end="379:59">0</literal><operator pos:start="379:60" pos:end="379:60">)</operator></expr> ?</condition><then pos:start="379:64" pos:end="379:70"> <expr pos:start="379:64" pos:end="379:70"><operator pos:start="379:64" pos:end="379:64">-</operator><name pos:start="379:65" pos:end="379:70">mquant</name></expr> </then><else pos:start="379:72" pos:end="379:79">: <expr pos:start="379:74" pos:end="379:79"><name pos:start="379:74" pos:end="379:79">mquant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="383:15" pos:end="395:13">else <block pos:start="383:20" pos:end="395:13">{<block_content pos:start="385:17" pos:end="393:17"> <comment type="line" pos:start="383:22" pos:end="383:26">//top</comment>

                <for pos:start="385:17" pos:end="393:17">for<control pos:start="385:20" pos:end="385:38">(<init pos:start="385:21" pos:end="385:26"><expr pos:start="385:21" pos:end="385:25"><name pos:start="385:21" pos:end="385:21">k</name> <operator pos:start="385:23" pos:end="385:23">=</operator> <literal type="number" pos:start="385:25" pos:end="385:25">1</literal></expr>;</init> <condition pos:start="385:28" pos:end="385:33"><expr pos:start="385:28" pos:end="385:32"><name pos:start="385:28" pos:end="385:28">k</name> <operator pos:start="385:30" pos:end="385:30">&lt;</operator> <literal type="number" pos:start="385:32" pos:end="385:32">8</literal></expr>;</condition> <incr pos:start="385:35" pos:end="385:37"><expr pos:start="385:35" pos:end="385:37"><name pos:start="385:35" pos:end="385:35">k</name><operator pos:start="385:36" pos:end="385:37">++</operator></expr></incr>)</control> <block pos:start="385:40" pos:end="393:17">{<block_content pos:start="387:21" pos:end="391:70">

                    <expr_stmt pos:start="387:21" pos:end="387:53"><expr pos:start="387:21" pos:end="387:52"><name pos:start="387:21" pos:end="387:28"><name pos:start="387:21" pos:end="387:25">block</name><index pos:start="387:26" pos:end="387:28">[<expr pos:start="387:27" pos:end="387:27"><name pos:start="387:27" pos:end="387:27">k</name></expr>]</index></name> <operator pos:start="387:30" pos:end="387:30">=</operator> <name pos:start="387:32" pos:end="387:44"><name pos:start="387:32" pos:end="387:37">ac_val</name><index pos:start="387:38" pos:end="387:44">[<expr pos:start="387:39" pos:end="387:43"><name pos:start="387:39" pos:end="387:39">k</name> <operator pos:start="387:41" pos:end="387:41">+</operator> <literal type="number" pos:start="387:43" pos:end="387:43">8</literal></expr>]</index></name> <operator pos:start="387:46" pos:end="387:46">*</operator> <name pos:start="387:48" pos:end="387:52">scale</name></expr>;</expr_stmt>

                    <if_stmt pos:start="389:21" pos:end="391:70"><if pos:start="389:21" pos:end="391:70">if<condition pos:start="389:23" pos:end="389:38">(<expr pos:start="389:24" pos:end="389:37"><operator pos:start="389:24" pos:end="389:24">!</operator><name pos:start="389:25" pos:end="389:37"><name pos:start="389:25" pos:end="389:25">v</name><operator pos:start="389:26" pos:end="389:27">-&gt;</operator><name pos:start="389:28" pos:end="389:37">pquantizer</name></name></expr>)</condition><block type="pseudo" pos:start="391:25" pos:end="391:70"><block_content pos:start="391:25" pos:end="391:70">

                        <expr_stmt pos:start="391:25" pos:end="391:70"><expr pos:start="391:25" pos:end="391:69"><name pos:start="391:25" pos:end="391:32"><name pos:start="391:25" pos:end="391:29">block</name><index pos:start="391:30" pos:end="391:32">[<expr pos:start="391:31" pos:end="391:31"><name pos:start="391:31" pos:end="391:31">k</name></expr>]</index></name> <operator pos:start="391:34" pos:end="391:35">+=</operator> <ternary pos:start="391:37" pos:end="391:69"><condition pos:start="391:37" pos:end="391:52"><expr pos:start="391:37" pos:end="391:50"><operator pos:start="391:37" pos:end="391:37">(</operator><name pos:start="391:38" pos:end="391:45"><name pos:start="391:38" pos:end="391:42">block</name><index pos:start="391:43" pos:end="391:45">[<expr pos:start="391:44" pos:end="391:44"><name pos:start="391:44" pos:end="391:44">k</name></expr>]</index></name> <operator pos:start="391:47" pos:end="391:47">&lt;</operator> <literal type="number" pos:start="391:49" pos:end="391:49">0</literal><operator pos:start="391:50" pos:end="391:50">)</operator></expr> ?</condition><then pos:start="391:54" pos:end="391:60"> <expr pos:start="391:54" pos:end="391:60"><operator pos:start="391:54" pos:end="391:54">-</operator><name pos:start="391:55" pos:end="391:60">mquant</name></expr> </then><else pos:start="391:62" pos:end="391:69">: <expr pos:start="391:64" pos:end="391:69"><name pos:start="391:64" pos:end="391:69">mquant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:19"><expr pos:start="397:13" pos:end="397:18"><name pos:start="397:13" pos:end="397:13">i</name> <operator pos:start="397:15" pos:end="397:15">=</operator> <literal type="number" pos:start="397:17" pos:end="397:18">63</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:31"><expr pos:start="403:5" pos:end="403:30"><name pos:start="403:5" pos:end="403:26"><name pos:start="403:5" pos:end="403:5">s</name><operator pos:start="403:6" pos:end="403:7">-&gt;</operator><name pos:start="403:8" pos:end="403:23">block_last_index</name><index pos:start="403:24" pos:end="403:26">[<expr pos:start="403:25" pos:end="403:25"><name pos:start="403:25" pos:end="403:25">n</name></expr>]</index></name> <operator pos:start="403:28" pos:end="403:28">=</operator> <name pos:start="403:30" pos:end="403:30">i</name></expr>;</expr_stmt>



    <return pos:start="407:5" pos:end="407:13">return <expr pos:start="407:12" pos:end="407:12"><literal type="number" pos:start="407:12" pos:end="407:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
