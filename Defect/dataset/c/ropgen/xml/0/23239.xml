<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23239.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">opt_default</name><parameter_list pos:start="1:23" pos:end="1:56">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:38"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">opt</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">arg</name></decl></parameter>)</parameter_list><block pos:start="1:57" pos:end="81:1">{<block_content pos:start="3:5" pos:end="79:13">

    <decl_stmt pos:start="3:5" pos:end="3:13"><decl pos:start="3:5" pos:end="3:12"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:12">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:20"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:18">AVOption</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">o</name><init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:105"><decl pos:start="7:5" pos:end="7:104"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19"><name pos:start="7:9" pos:end="7:17">opt_types</name><index pos:start="7:18" pos:end="7:19">[]</index></name><init pos:start="7:20" pos:end="7:104">=<expr pos:start="7:21" pos:end="7:104"><block pos:start="7:21" pos:end="7:104">{<expr pos:start="7:22" pos:end="7:44"><name pos:start="7:22" pos:end="7:44">AV_OPT_FLAG_VIDEO_PARAM</name></expr>, <expr pos:start="7:47" pos:end="7:69"><name pos:start="7:47" pos:end="7:69">AV_OPT_FLAG_AUDIO_PARAM</name></expr>, <expr pos:start="7:72" pos:end="7:72"><literal type="number" pos:start="7:72" pos:end="7:72">0</literal></expr>, <expr pos:start="7:75" pos:end="7:100"><name pos:start="7:75" pos:end="7:100">AV_OPT_FLAG_SUBTITLE_PARAM</name></expr>, <expr pos:start="7:103" pos:end="7:103"><literal type="number" pos:start="7:103" pos:end="7:103">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



    <for pos:start="11:5" pos:end="19:5">for<control pos:start="11:8" pos:end="11:43">(<init pos:start="11:9" pos:end="11:15"><expr pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:12">type</name><operator pos:start="11:13" pos:end="11:13">=</operator><literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr>;</init> <condition pos:start="11:17" pos:end="11:35"><expr pos:start="11:17" pos:end="11:34"><name pos:start="11:17" pos:end="11:20">type</name><operator pos:start="11:21" pos:end="11:21">&lt;</operator><name pos:start="11:22" pos:end="11:34">CODEC_TYPE_NB</name></expr>;</condition> <incr pos:start="11:37" pos:end="11:42"><expr pos:start="11:37" pos:end="11:42"><name pos:start="11:37" pos:end="11:40">type</name><operator pos:start="11:41" pos:end="11:42">++</operator></expr></incr>)</control><block pos:start="11:44" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:58">

        <decl_stmt pos:start="13:9" pos:end="13:101"><decl pos:start="13:9" pos:end="13:100"><type pos:start="13:9" pos:end="13:24"><specifier pos:start="13:9" pos:end="13:13">const</specifier> <name pos:start="13:15" pos:end="13:22">AVOption</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:26">o2</name> <init pos:start="13:28" pos:end="13:100">= <expr pos:start="13:30" pos:end="13:100"><call pos:start="13:30" pos:end="13:100"><name pos:start="13:30" pos:end="13:40">av_find_opt</name><argument_list pos:start="13:41" pos:end="13:100">(<argument pos:start="13:42" pos:end="13:54"><expr pos:start="13:42" pos:end="13:54"><name pos:start="13:42" pos:end="13:54"><name pos:start="13:42" pos:end="13:51">avctx_opts</name><index pos:start="13:52" pos:end="13:54">[<expr pos:start="13:53" pos:end="13:53"><literal type="number" pos:start="13:53" pos:end="13:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="13:57" pos:end="13:59"><expr pos:start="13:57" pos:end="13:59"><name pos:start="13:57" pos:end="13:59">opt</name></expr></argument>, <argument pos:start="13:62" pos:end="13:65"><expr pos:start="13:62" pos:end="13:65"><name pos:start="13:62" pos:end="13:65">NULL</name></expr></argument>, <argument pos:start="13:68" pos:end="13:82"><expr pos:start="13:68" pos:end="13:82"><name pos:start="13:68" pos:end="13:82"><name pos:start="13:68" pos:end="13:76">opt_types</name><index pos:start="13:77" pos:end="13:82">[<expr pos:start="13:78" pos:end="13:81"><name pos:start="13:78" pos:end="13:81">type</name></expr>]</index></name></expr></argument>, <argument pos:start="13:85" pos:end="13:99"><expr pos:start="13:85" pos:end="13:99"><name pos:start="13:85" pos:end="13:99"><name pos:start="13:85" pos:end="13:93">opt_types</name><index pos:start="13:94" pos:end="13:99">[<expr pos:start="13:95" pos:end="13:98"><name pos:start="13:95" pos:end="13:98">type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="15:9" pos:end="17:58"><if pos:start="15:9" pos:end="17:58">if<condition pos:start="15:11" pos:end="15:14">(<expr pos:start="15:12" pos:end="15:13"><name pos:start="15:12" pos:end="15:13">o2</name></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:58"><block_content pos:start="17:13" pos:end="17:58">

            <expr_stmt pos:start="17:13" pos:end="17:58"><expr pos:start="17:13" pos:end="17:57"><name pos:start="17:13" pos:end="17:13">o</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <call pos:start="17:17" pos:end="17:57"><name pos:start="17:17" pos:end="17:29">av_set_string</name><argument_list pos:start="17:30" pos:end="17:57">(<argument pos:start="17:31" pos:end="17:46"><expr pos:start="17:31" pos:end="17:46"><name pos:start="17:31" pos:end="17:46"><name pos:start="17:31" pos:end="17:40">avctx_opts</name><index pos:start="17:41" pos:end="17:46">[<expr pos:start="17:42" pos:end="17:45"><name pos:start="17:42" pos:end="17:45">type</name></expr>]</index></name></expr></argument>, <argument pos:start="17:49" pos:end="17:51"><expr pos:start="17:49" pos:end="17:51"><name pos:start="17:49" pos:end="17:51">opt</name></expr></argument>, <argument pos:start="17:54" pos:end="17:56"><expr pos:start="17:54" pos:end="17:56"><name pos:start="17:54" pos:end="17:56">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="21:5" pos:end="23:51"><if pos:start="21:5" pos:end="23:51">if<condition pos:start="21:7" pos:end="21:10">(<expr pos:start="21:8" pos:end="21:9"><operator pos:start="21:8" pos:end="21:8">!</operator><name pos:start="21:9" pos:end="21:9">o</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:51"><block_content pos:start="23:9" pos:end="23:51">

        <expr_stmt pos:start="23:9" pos:end="23:51"><expr pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:9">o</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:50"><name pos:start="23:13" pos:end="23:25">av_set_string</name><argument_list pos:start="23:26" pos:end="23:50">(<argument pos:start="23:27" pos:end="23:39"><expr pos:start="23:27" pos:end="23:39"><name pos:start="23:27" pos:end="23:39">avformat_opts</name></expr></argument>, <argument pos:start="23:42" pos:end="23:44"><expr pos:start="23:42" pos:end="23:44"><name pos:start="23:42" pos:end="23:44">opt</name></expr></argument>, <argument pos:start="23:47" pos:end="23:49"><expr pos:start="23:47" pos:end="23:49"><name pos:start="23:47" pos:end="23:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="27:46"><if pos:start="25:5" pos:end="27:46">if<condition pos:start="25:7" pos:end="25:10">(<expr pos:start="25:8" pos:end="25:9"><operator pos:start="25:8" pos:end="25:8">!</operator><name pos:start="25:9" pos:end="25:9">o</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:46"><block_content pos:start="27:9" pos:end="27:46">

        <expr_stmt pos:start="27:9" pos:end="27:46"><expr pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:9">o</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:45"><name pos:start="27:13" pos:end="27:25">av_set_string</name><argument_list pos:start="27:26" pos:end="27:45">(<argument pos:start="27:27" pos:end="27:34"><expr pos:start="27:27" pos:end="27:34"><name pos:start="27:27" pos:end="27:34">sws_opts</name></expr></argument>, <argument pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:39">opt</name></expr></argument>, <argument pos:start="27:42" pos:end="27:44"><expr pos:start="27:42" pos:end="27:44"><name pos:start="27:42" pos:end="27:44">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="43:5"><if pos:start="29:5" pos:end="43:5">if<condition pos:start="29:7" pos:end="29:10">(<expr pos:start="29:8" pos:end="29:9"><operator pos:start="29:8" pos:end="29:8">!</operator><name pos:start="29:9" pos:end="29:9">o</name></expr>)</condition><block pos:start="29:11" pos:end="43:5">{<block_content pos:start="31:9" pos:end="41:75">

        <if_stmt pos:start="31:9" pos:end="41:75"><if pos:start="31:9" pos:end="33:72">if<condition pos:start="31:11" pos:end="31:25">(<expr pos:start="31:12" pos:end="31:24"><name pos:start="31:12" pos:end="31:17"><name pos:start="31:12" pos:end="31:14">opt</name><index pos:start="31:15" pos:end="31:17">[<expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>]</index></name> <operator pos:start="31:19" pos:end="31:20">==</operator> <literal type="char" pos:start="31:22" pos:end="31:24">'a'</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:72"><block_content pos:start="33:13" pos:end="33:72">

            <expr_stmt pos:start="33:13" pos:end="33:72"><expr pos:start="33:13" pos:end="33:71"><name pos:start="33:13" pos:end="33:13">o</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:71"><name pos:start="33:17" pos:end="33:29">av_set_string</name><argument_list pos:start="33:30" pos:end="33:71">(<argument pos:start="33:31" pos:end="33:58"><expr pos:start="33:31" pos:end="33:58"><name pos:start="33:31" pos:end="33:58"><name pos:start="33:31" pos:end="33:40">avctx_opts</name><index pos:start="33:41" pos:end="33:58">[<expr pos:start="33:42" pos:end="33:57"><name pos:start="33:42" pos:end="33:57">CODEC_TYPE_AUDIO</name></expr>]</index></name></expr></argument>, <argument pos:start="33:61" pos:end="33:65"><expr pos:start="33:61" pos:end="33:65"><name pos:start="33:61" pos:end="33:63">opt</name><operator pos:start="33:64" pos:end="33:64">+</operator><literal type="number" pos:start="33:65" pos:end="33:65">1</literal></expr></argument>, <argument pos:start="33:68" pos:end="33:70"><expr pos:start="33:68" pos:end="33:70"><name pos:start="33:68" pos:end="33:70">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="35:9" pos:end="37:72">else if<condition pos:start="35:16" pos:end="35:30">(<expr pos:start="35:17" pos:end="35:29"><name pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:19">opt</name><index pos:start="35:20" pos:end="35:22">[<expr pos:start="35:21" pos:end="35:21"><literal type="number" pos:start="35:21" pos:end="35:21">0</literal></expr>]</index></name> <operator pos:start="35:24" pos:end="35:25">==</operator> <literal type="char" pos:start="35:27" pos:end="35:29">'v'</literal></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:72"><block_content pos:start="37:13" pos:end="37:72">

            <expr_stmt pos:start="37:13" pos:end="37:72"><expr pos:start="37:13" pos:end="37:71"><name pos:start="37:13" pos:end="37:13">o</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:71"><name pos:start="37:17" pos:end="37:29">av_set_string</name><argument_list pos:start="37:30" pos:end="37:71">(<argument pos:start="37:31" pos:end="37:58"><expr pos:start="37:31" pos:end="37:58"><name pos:start="37:31" pos:end="37:58"><name pos:start="37:31" pos:end="37:40">avctx_opts</name><index pos:start="37:41" pos:end="37:58">[<expr pos:start="37:42" pos:end="37:57"><name pos:start="37:42" pos:end="37:57">CODEC_TYPE_VIDEO</name></expr>]</index></name></expr></argument>, <argument pos:start="37:61" pos:end="37:65"><expr pos:start="37:61" pos:end="37:65"><name pos:start="37:61" pos:end="37:63">opt</name><operator pos:start="37:64" pos:end="37:64">+</operator><literal type="number" pos:start="37:65" pos:end="37:65">1</literal></expr></argument>, <argument pos:start="37:68" pos:end="37:70"><expr pos:start="37:68" pos:end="37:70"><name pos:start="37:68" pos:end="37:70">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="39:9" pos:end="41:75">else if<condition pos:start="39:16" pos:end="39:30">(<expr pos:start="39:17" pos:end="39:29"><name pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:19">opt</name><index pos:start="39:20" pos:end="39:22">[<expr pos:start="39:21" pos:end="39:21"><literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr>]</index></name> <operator pos:start="39:24" pos:end="39:25">==</operator> <literal type="char" pos:start="39:27" pos:end="39:29">'s'</literal></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:75"><block_content pos:start="41:13" pos:end="41:75">

            <expr_stmt pos:start="41:13" pos:end="41:75"><expr pos:start="41:13" pos:end="41:74"><name pos:start="41:13" pos:end="41:13">o</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:74"><name pos:start="41:17" pos:end="41:29">av_set_string</name><argument_list pos:start="41:30" pos:end="41:74">(<argument pos:start="41:31" pos:end="41:61"><expr pos:start="41:31" pos:end="41:61"><name pos:start="41:31" pos:end="41:61"><name pos:start="41:31" pos:end="41:40">avctx_opts</name><index pos:start="41:41" pos:end="41:61">[<expr pos:start="41:42" pos:end="41:60"><name pos:start="41:42" pos:end="41:60">CODEC_TYPE_SUBTITLE</name></expr>]</index></name></expr></argument>, <argument pos:start="41:64" pos:end="41:68"><expr pos:start="41:64" pos:end="41:68"><name pos:start="41:64" pos:end="41:66">opt</name><operator pos:start="41:67" pos:end="41:67">+</operator><literal type="number" pos:start="41:68" pos:end="41:68">1</literal></expr></argument>, <argument pos:start="41:71" pos:end="41:73"><expr pos:start="41:71" pos:end="41:73"><name pos:start="41:71" pos:end="41:73">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="47:18"><if pos:start="45:5" pos:end="47:18">if<condition pos:start="45:7" pos:end="45:10">(<expr pos:start="45:8" pos:end="45:9"><operator pos:start="45:8" pos:end="45:8">!</operator><name pos:start="45:9" pos:end="45:9">o</name></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:18"><block_content pos:start="47:9" pos:end="47:18">

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



<comment type="line" pos:start="51:1" pos:end="51:142">//    av_log(NULL, AV_LOG_ERROR, "%s:%s: %f 0x%0X\n", opt, arg, av_get_double(avctx_opts, opt, NULL), (int)av_get_int(avctx_opts, opt, NULL));</comment>



    <comment type="line" pos:start="55:5" pos:end="55:131">//FIXME we should always use avctx_opts, ... for storing options so there wont be any need to keep track of whats set over this</comment>

    <expr_stmt pos:start="57:5" pos:end="57:71"><expr pos:start="57:5" pos:end="57:70"><name pos:start="57:5" pos:end="57:13">opt_names</name><operator pos:start="57:14" pos:end="57:14">=</operator> <call pos:start="57:16" pos:end="57:70"><name pos:start="57:16" pos:end="57:25">av_realloc</name><argument_list pos:start="57:26" pos:end="57:70">(<argument pos:start="57:27" pos:end="57:35"><expr pos:start="57:27" pos:end="57:35"><name pos:start="57:27" pos:end="57:35">opt_names</name></expr></argument>, <argument pos:start="57:38" pos:end="57:69"><expr pos:start="57:38" pos:end="57:69"><sizeof pos:start="57:38" pos:end="57:50">sizeof<argument_list pos:start="57:44" pos:end="57:50">(<argument pos:start="57:45" pos:end="57:49"><expr pos:start="57:45" pos:end="57:49"><name pos:start="57:45" pos:end="57:48">void</name><operator pos:start="57:49" pos:end="57:49">*</operator></expr></argument>)</argument_list></sizeof><operator pos:start="57:51" pos:end="57:51">*</operator><operator pos:start="57:52" pos:end="57:52">(</operator><name pos:start="57:53" pos:end="57:66">opt_name_count</name><operator pos:start="57:67" pos:end="57:67">+</operator><literal type="number" pos:start="57:68" pos:end="57:68">1</literal><operator pos:start="57:69" pos:end="57:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="64:0"><expr pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:31"><name pos:start="59:5" pos:end="59:13">opt_names</name><index pos:start="59:14" pos:end="59:31">[<expr pos:start="59:15" pos:end="59:30"><name pos:start="59:15" pos:end="59:28">opt_name_count</name><operator pos:start="59:29" pos:end="59:30">++</operator></expr>]</index></name><operator pos:start="59:32" pos:end="59:32">=</operator> <name pos:start="59:34" pos:end="59:40"><name pos:start="59:34" pos:end="59:34">o</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:40">name</name></name></expr>;</expr_stmt>



<cpp:ifdef pos:start="63:1" pos:end="63:23">#<cpp:directive pos:start="63:2" pos:end="63:6">ifdef</cpp:directive> <name pos:start="63:8" pos:end="63:23">CONFIG_FFM_MUXER</name></cpp:ifdef>

    <comment type="block" pos:start="65:5" pos:end="65:80">/* disable generate of real time pts in ffm (need to be supressed anyway) */</comment>

    <if_stmt pos:start="67:5" pos:end="72:0"><if pos:start="67:5" pos:end="72:0">if<condition pos:start="67:7" pos:end="67:50">(<expr pos:start="67:8" pos:end="67:49"><name pos:start="67:8" pos:end="67:20"><name pos:start="67:8" pos:end="67:17">avctx_opts</name><index pos:start="67:18" pos:end="67:20">[<expr pos:start="67:19" pos:end="67:19"><literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>]</index></name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:27">flags</name> <operator pos:start="67:29" pos:end="67:29">&amp;</operator> <name pos:start="67:31" pos:end="67:49">CODEC_FLAG_BITEXACT</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="72:0"><block_content pos:start="69:9" pos:end="72:0">

        <expr_stmt pos:start="69:9" pos:end="72:0"><expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:17">ffm_nopts</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <literal type="number" pos:start="69:21" pos:end="69:21">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="75:5" pos:end="77:39"><if pos:start="75:5" pos:end="77:39">if<condition pos:start="75:7" pos:end="75:28">(<expr pos:start="75:8" pos:end="75:27"><name pos:start="75:8" pos:end="75:20"><name pos:start="75:8" pos:end="75:17">avctx_opts</name><index pos:start="75:18" pos:end="75:20">[<expr pos:start="75:19" pos:end="75:19"><literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>]</index></name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:27">debug</name></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:39"><block_content pos:start="77:9" pos:end="77:39">

        <expr_stmt pos:start="77:9" pos:end="77:39"><expr pos:start="77:9" pos:end="77:38"><call pos:start="77:9" pos:end="77:38"><name pos:start="77:9" pos:end="77:24">av_log_set_level</name><argument_list pos:start="77:25" pos:end="77:38">(<argument pos:start="77:26" pos:end="77:37"><expr pos:start="77:26" pos:end="77:37"><name pos:start="77:26" pos:end="77:37">AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
