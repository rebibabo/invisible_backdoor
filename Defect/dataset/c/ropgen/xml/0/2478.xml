<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2478.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">protocol_client_auth_vnc</name><parameter_list pos:start="1:36" pos:end="1:76">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:44">VncState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">vs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:75"><decl pos:start="1:66" pos:end="1:75"><type pos:start="1:66" pos:end="1:75"><name pos:start="1:66" pos:end="1:71">size_t</name></type> <name pos:start="1:73" pos:end="1:75">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:13">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:17">char</name></type> <name pos:start="5:19" pos:end="5:51"><name pos:start="5:19" pos:end="5:26">response</name><index pos:start="5:27" pos:end="5:51">[<expr pos:start="5:28" pos:end="5:50"><name pos:start="5:28" pos:end="5:50">VNC_AUTH_CHALLENGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">j</name></decl>, <decl pos:start="7:15" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:19">pwlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:21">key</name><index pos:start="9:22" pos:end="9:24">[<expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">time_t</name></type> <name pos:start="11:12" pos:end="11:14">now</name> <init pos:start="11:16" pos:end="11:27">= <expr pos:start="11:18" pos:end="11:27"><call pos:start="11:18" pos:end="11:27"><name pos:start="11:18" pos:end="11:21">time</name><argument_list pos:start="11:22" pos:end="11:27">(<argument pos:start="11:23" pos:end="11:26"><expr pos:start="11:23" pos:end="11:26"><name pos:start="11:23" pos:end="11:26">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:50">(<expr pos:start="15:9" pos:end="15:49"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:25"><name pos:start="15:10" pos:end="15:11">vs</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:15">vd</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:25">password</name></name> <operator pos:start="15:27" pos:end="15:28">||</operator> <operator pos:start="15:30" pos:end="15:30">!</operator><name pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:32">vs</name><operator pos:start="15:33" pos:end="15:34">-&gt;</operator><name pos:start="15:35" pos:end="15:36">vd</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:46">password</name><index pos:start="15:47" pos:end="15:49">[<expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="15:52" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:20">

        <expr_stmt pos:start="17:9" pos:end="17:54"><expr pos:start="17:9" pos:end="17:53"><call pos:start="17:9" pos:end="17:53"><name pos:start="17:9" pos:end="17:17">VNC_DEBUG</name><argument_list pos:start="17:18" pos:end="17:53">(<argument pos:start="17:19" pos:end="17:52"><expr pos:start="17:19" pos:end="17:52"><literal type="string" pos:start="17:19" pos:end="17:52">"No password configured on server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="19:9" pos:end="19:20">goto <name pos:start="19:14" pos:end="19:19">reject</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:10">vs</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:14">vd</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:23">expires</name></name> <operator pos:start="23:25" pos:end="23:25">&lt;</operator> <name pos:start="23:27" pos:end="23:29">now</name></expr>)</condition> <block pos:start="23:32" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:20">

        <expr_stmt pos:start="25:9" pos:end="25:41"><expr pos:start="25:9" pos:end="25:40"><call pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:17">VNC_DEBUG</name><argument_list pos:start="25:18" pos:end="25:40">(<argument pos:start="25:19" pos:end="25:39"><expr pos:start="25:19" pos:end="25:39"><literal type="string" pos:start="25:19" pos:end="25:39">"Password is expired"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:20">goto <name pos:start="27:14" pos:end="27:19">reject</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:61"><expr pos:start="33:5" pos:end="33:60"><call pos:start="33:5" pos:end="33:60"><name pos:start="33:5" pos:end="33:10">memcpy</name><argument_list pos:start="33:11" pos:end="33:60">(<argument pos:start="33:12" pos:end="33:19"><expr pos:start="33:12" pos:end="33:19"><name pos:start="33:12" pos:end="33:19">response</name></expr></argument>, <argument pos:start="33:22" pos:end="33:34"><expr pos:start="33:22" pos:end="33:34"><name pos:start="33:22" pos:end="33:34"><name pos:start="33:22" pos:end="33:23">vs</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:34">challenge</name></name></expr></argument>, <argument pos:start="33:37" pos:end="33:59"><expr pos:start="33:37" pos:end="33:59"><name pos:start="33:37" pos:end="33:59">VNC_AUTH_CHALLENGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:51">/* Calculate the expected challenge response */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:9">pwlen</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:36"><name pos:start="39:13" pos:end="39:18">strlen</name><argument_list pos:start="39:19" pos:end="39:36">(<argument pos:start="39:20" pos:end="39:35"><expr pos:start="39:20" pos:end="39:35"><name pos:start="39:20" pos:end="39:35"><name pos:start="39:20" pos:end="39:21">vs</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:25">vd</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:35">password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="43:51">for <control pos:start="41:9" pos:end="41:33">(<init pos:start="41:10" pos:end="41:13"><expr pos:start="41:10" pos:end="41:12"><name pos:start="41:10" pos:end="41:10">i</name><operator pos:start="41:11" pos:end="41:11">=</operator><literal type="number" pos:start="41:12" pos:end="41:12">0</literal></expr>;</init> <condition pos:start="41:15" pos:end="41:28"><expr pos:start="41:15" pos:end="41:27"><name pos:start="41:15" pos:end="41:15">i</name><operator pos:start="41:16" pos:end="41:16">&lt;</operator><sizeof pos:start="41:17" pos:end="41:27">sizeof<argument_list pos:start="41:23" pos:end="41:27">(<argument pos:start="41:24" pos:end="41:26"><expr pos:start="41:24" pos:end="41:26"><name pos:start="41:24" pos:end="41:26">key</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><name pos:start="41:30" pos:end="41:30">i</name><operator pos:start="41:31" pos:end="41:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:9" pos:end="43:51"><block_content pos:start="43:9" pos:end="43:51">

        <expr_stmt pos:start="43:9" pos:end="43:51"><expr pos:start="43:9" pos:end="43:50"><name pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:11">key</name><index pos:start="43:12" pos:end="43:14">[<expr pos:start="43:13" pos:end="43:13"><name pos:start="43:13" pos:end="43:13">i</name></expr>]</index></name> <operator pos:start="43:16" pos:end="43:16">=</operator> <ternary pos:start="43:18" pos:end="43:50"><condition pos:start="43:18" pos:end="43:26"><expr pos:start="43:18" pos:end="43:24"><name pos:start="43:18" pos:end="43:18">i</name><operator pos:start="43:19" pos:end="43:19">&lt;</operator><name pos:start="43:20" pos:end="43:24">pwlen</name></expr> ?</condition><then pos:start="43:28" pos:end="43:46"> <expr pos:start="43:28" pos:end="43:46"><name pos:start="43:28" pos:end="43:46"><name pos:start="43:28" pos:end="43:29">vs</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:33">vd</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:43">password</name><index pos:start="43:44" pos:end="43:46">[<expr pos:start="43:45" pos:end="43:45"><name pos:start="43:45" pos:end="43:45">i</name></expr>]</index></name></expr> </then><else pos:start="43:48" pos:end="43:50">: <expr pos:start="43:50" pos:end="43:50"><literal type="number" pos:start="43:50" pos:end="43:50">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="45:5" pos:end="45:21"><expr pos:start="45:5" pos:end="45:20"><call pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:10">deskey</name><argument_list pos:start="45:11" pos:end="45:20">(<argument pos:start="45:12" pos:end="45:14"><expr pos:start="45:12" pos:end="45:14"><name pos:start="45:12" pos:end="45:14">key</name></expr></argument>, <argument pos:start="45:17" pos:end="45:19"><expr pos:start="45:17" pos:end="45:19"><name pos:start="45:17" pos:end="45:19">EN0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="49:36">for <control pos:start="47:9" pos:end="47:52">(<init pos:start="47:10" pos:end="47:15"><expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:10">j</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>;</init> <condition pos:start="47:17" pos:end="47:44"><expr pos:start="47:17" pos:end="47:43"><name pos:start="47:17" pos:end="47:17">j</name> <operator pos:start="47:19" pos:end="47:19">&lt;</operator> <name pos:start="47:21" pos:end="47:43">VNC_AUTH_CHALLENGE_SIZE</name></expr>;</condition> <incr pos:start="47:46" pos:end="47:51"><expr pos:start="47:46" pos:end="47:51"><name pos:start="47:46" pos:end="47:46">j</name> <operator pos:start="47:48" pos:end="47:49">+=</operator> <literal type="number" pos:start="47:51" pos:end="47:51">8</literal></expr></incr>)</control><block type="pseudo" pos:start="49:9" pos:end="49:36"><block_content pos:start="49:9" pos:end="49:36">

        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><call pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:11">des</name><argument_list pos:start="49:12" pos:end="49:35">(<argument pos:start="49:13" pos:end="49:22"><expr pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:20">response</name><operator pos:start="49:21" pos:end="49:21">+</operator><name pos:start="49:22" pos:end="49:22">j</name></expr></argument>, <argument pos:start="49:25" pos:end="49:34"><expr pos:start="49:25" pos:end="49:34"><name pos:start="49:25" pos:end="49:32">response</name><operator pos:start="49:33" pos:end="49:33">+</operator><name pos:start="49:34" pos:end="49:34">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="53:5" pos:end="53:55">/* Compare expected vs actual challenge response */</comment>

    <if_stmt pos:start="55:5" pos:end="73:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:61">(<expr pos:start="55:9" pos:end="55:60"><call pos:start="55:9" pos:end="55:55"><name pos:start="55:9" pos:end="55:14">memcmp</name><argument_list pos:start="55:15" pos:end="55:55">(<argument pos:start="55:16" pos:end="55:23"><expr pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:23">response</name></expr></argument>, <argument pos:start="55:26" pos:end="55:29"><expr pos:start="55:26" pos:end="55:29"><name pos:start="55:26" pos:end="55:29">data</name></expr></argument>, <argument pos:start="55:32" pos:end="55:54"><expr pos:start="55:32" pos:end="55:54"><name pos:start="55:32" pos:end="55:54">VNC_AUTH_CHALLENGE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="55:57" pos:end="55:58">!=</operator> <literal type="number" pos:start="55:60" pos:end="55:60">0</literal></expr>)</condition> <block pos:start="55:63" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:20">

        <expr_stmt pos:start="57:9" pos:end="57:62"><expr pos:start="57:9" pos:end="57:61"><call pos:start="57:9" pos:end="57:61"><name pos:start="57:9" pos:end="57:17">VNC_DEBUG</name><argument_list pos:start="57:18" pos:end="57:61">(<argument pos:start="57:19" pos:end="57:60"><expr pos:start="57:19" pos:end="57:60"><literal type="string" pos:start="57:19" pos:end="57:60">"Client challenge reponse did not match\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="59:9" pos:end="59:20">goto <name pos:start="59:14" pos:end="59:19">reject</name>;</goto>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="73:5">else <block pos:start="61:12" pos:end="73:5">{<block_content pos:start="63:9" pos:end="71:30">

        <expr_stmt pos:start="63:9" pos:end="63:56"><expr pos:start="63:9" pos:end="63:55"><call pos:start="63:9" pos:end="63:55"><name pos:start="63:9" pos:end="63:17">VNC_DEBUG</name><argument_list pos:start="63:18" pos:end="63:55">(<argument pos:start="63:19" pos:end="63:54"><expr pos:start="63:19" pos:end="63:54"><literal type="string" pos:start="63:19" pos:end="63:54">"Accepting VNC challenge response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:29"><expr pos:start="65:9" pos:end="65:28"><call pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:21">vnc_write_u32</name><argument_list pos:start="65:22" pos:end="65:28">(<argument pos:start="65:23" pos:end="65:24"><expr pos:start="65:23" pos:end="65:24"><name pos:start="65:23" pos:end="65:24">vs</name></expr></argument>, <argument pos:start="65:27" pos:end="65:27"><expr pos:start="65:27" pos:end="65:27"><literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="65:31" pos:end="65:47">/* Accept auth */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><call pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:17">vnc_flush</name><argument_list pos:start="67:18" pos:end="67:21">(<argument pos:start="67:19" pos:end="67:20"><expr pos:start="67:19" pos:end="67:20"><name pos:start="67:19" pos:end="67:20">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><call pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:25">start_client_init</name><argument_list pos:start="71:26" pos:end="71:29">(<argument pos:start="71:27" pos:end="71:28"><expr pos:start="71:27" pos:end="71:28"><name pos:start="71:27" pos:end="71:28">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>



<label pos:start="79:1" pos:end="79:7"><name pos:start="79:1" pos:end="79:6">reject</name>:</label>

    <expr_stmt pos:start="81:5" pos:end="81:25"><expr pos:start="81:5" pos:end="81:24"><call pos:start="81:5" pos:end="81:24"><name pos:start="81:5" pos:end="81:17">vnc_write_u32</name><argument_list pos:start="81:18" pos:end="81:24">(<argument pos:start="81:19" pos:end="81:20"><expr pos:start="81:19" pos:end="81:20"><name pos:start="81:19" pos:end="81:20">vs</name></expr></argument>, <argument pos:start="81:23" pos:end="81:23"><expr pos:start="81:23" pos:end="81:23"><literal type="number" pos:start="81:23" pos:end="81:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="81:27" pos:end="81:43">/* Reject auth */</comment>

    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:23">(<expr pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:10">vs</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:17">minor</name></name> <operator pos:start="83:19" pos:end="83:20">&gt;=</operator> <literal type="number" pos:start="83:22" pos:end="83:22">8</literal></expr>)</condition> <block pos:start="83:25" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:40">

        <decl_stmt pos:start="85:9" pos:end="85:58"><decl pos:start="85:9" pos:end="85:57"><type pos:start="85:9" pos:end="85:25"><specifier pos:start="85:9" pos:end="85:14">static</specifier> <specifier pos:start="85:16" pos:end="85:20">const</specifier> <name pos:start="85:22" pos:end="85:25">char</name></type> <name pos:start="85:27" pos:end="85:31"><name pos:start="85:27" pos:end="85:29">err</name><index pos:start="85:30" pos:end="85:31">[]</index></name> <init pos:start="85:33" pos:end="85:57">= <expr pos:start="85:35" pos:end="85:57"><literal type="string" pos:start="85:35" pos:end="85:57">"Authentication failed"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:39"><expr pos:start="87:9" pos:end="87:38"><call pos:start="87:9" pos:end="87:38"><name pos:start="87:9" pos:end="87:21">vnc_write_u32</name><argument_list pos:start="87:22" pos:end="87:38">(<argument pos:start="87:23" pos:end="87:24"><expr pos:start="87:23" pos:end="87:24"><name pos:start="87:23" pos:end="87:24">vs</name></expr></argument>, <argument pos:start="87:27" pos:end="87:37"><expr pos:start="87:27" pos:end="87:37"><sizeof pos:start="87:27" pos:end="87:37">sizeof<argument_list pos:start="87:33" pos:end="87:37">(<argument pos:start="87:34" pos:end="87:36"><expr pos:start="87:34" pos:end="87:36"><name pos:start="87:34" pos:end="87:36">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:40"><expr pos:start="89:9" pos:end="89:39"><call pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:17">vnc_write</name><argument_list pos:start="89:18" pos:end="89:39">(<argument pos:start="89:19" pos:end="89:20"><expr pos:start="89:19" pos:end="89:20"><name pos:start="89:19" pos:end="89:20">vs</name></expr></argument>, <argument pos:start="89:23" pos:end="89:25"><expr pos:start="89:23" pos:end="89:25"><name pos:start="89:23" pos:end="89:25">err</name></expr></argument>, <argument pos:start="89:28" pos:end="89:38"><expr pos:start="89:28" pos:end="89:38"><sizeof pos:start="89:28" pos:end="89:38">sizeof<argument_list pos:start="89:34" pos:end="89:38">(<argument pos:start="89:35" pos:end="89:37"><expr pos:start="89:35" pos:end="89:37"><name pos:start="89:35" pos:end="89:37">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:18"><expr pos:start="93:5" pos:end="93:17"><call pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:13">vnc_flush</name><argument_list pos:start="93:14" pos:end="93:17">(<argument pos:start="93:15" pos:end="93:16"><expr pos:start="93:15" pos:end="93:16"><name pos:start="93:15" pos:end="93:16">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:25"><expr pos:start="95:5" pos:end="95:24"><call pos:start="95:5" pos:end="95:24"><name pos:start="95:5" pos:end="95:20">vnc_client_error</name><argument_list pos:start="95:21" pos:end="95:24">(<argument pos:start="95:22" pos:end="95:23"><expr pos:start="95:22" pos:end="95:23"><name pos:start="95:22" pos:end="95:23">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
