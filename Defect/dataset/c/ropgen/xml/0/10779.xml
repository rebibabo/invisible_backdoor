<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10779.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:5"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_residual</name><parameter_list pos:start="1:27" pos:end="1:133">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:41"><name pos:start="1:28" pos:end="1:38">H264Context</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">h</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:56">GetBitContext</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">gb</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:76"><decl pos:start="1:63" pos:end="1:76"><type pos:start="1:63" pos:end="1:76"><name pos:start="1:63" pos:end="1:69">DCTELEM</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:76">block</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:83"><decl pos:start="1:79" pos:end="1:83"><type pos:start="1:79" pos:end="1:83"><name pos:start="1:79" pos:end="1:81">int</name></type> <name pos:start="1:83" pos:end="1:83">n</name></decl></parameter>, <parameter pos:start="1:86" pos:end="1:109"><decl pos:start="1:86" pos:end="1:109"><type pos:start="1:86" pos:end="1:109"><specifier pos:start="1:86" pos:end="1:90">const</specifier> <name pos:start="1:92" pos:end="1:98">uint8_t</name> <modifier pos:start="1:100" pos:end="1:100">*</modifier></type><name pos:start="1:101" pos:end="1:109">scantable</name></decl></parameter>, <parameter pos:start="1:112" pos:end="1:117"><decl pos:start="1:112" pos:end="1:117"><type pos:start="1:112" pos:end="1:117"><name pos:start="1:112" pos:end="1:114">int</name></type> <name pos:start="1:116" pos:end="1:117">qp</name></decl></parameter>, <parameter pos:start="1:120" pos:end="1:132"><decl pos:start="1:120" pos:end="1:132"><type pos:start="1:120" pos:end="1:132"><name pos:start="1:120" pos:end="1:122">int</name></type> <name pos:start="1:124" pos:end="1:132">max_coeff</name></decl></parameter>)</parameter_list><block pos:start="1:134" pos:end="153:5">{<block_content pos:start="3:5" pos:end="151:73">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:20"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:18">uint16_t</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:24">qmul</name><init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:39">dequant_coeff</name><index pos:start="5:40" pos:end="5:43">[<expr pos:start="5:41" pos:end="5:42"><name pos:start="5:41" pos:end="5:42">qp</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:102"><decl pos:start="7:5" pos:end="7:101"><type pos:start="7:5" pos:end="7:20"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:20">int</name></type> <name pos:start="7:22" pos:end="7:48"><name pos:start="7:22" pos:end="7:44">coeff_token_table_index</name><index pos:start="7:45" pos:end="7:48">[<expr pos:start="7:46" pos:end="7:47"><literal type="number" pos:start="7:46" pos:end="7:47">17</literal></expr>]</index></name><init pos:start="7:49" pos:end="7:101">= <expr pos:start="7:51" pos:end="7:101"><block pos:start="7:51" pos:end="7:101">{<expr pos:start="7:52" pos:end="7:52"><literal type="number" pos:start="7:52" pos:end="7:52">0</literal></expr>, <expr pos:start="7:55" pos:end="7:55"><literal type="number" pos:start="7:55" pos:end="7:55">0</literal></expr>, <expr pos:start="7:58" pos:end="7:58"><literal type="number" pos:start="7:58" pos:end="7:58">1</literal></expr>, <expr pos:start="7:61" pos:end="7:61"><literal type="number" pos:start="7:61" pos:end="7:61">1</literal></expr>, <expr pos:start="7:64" pos:end="7:64"><literal type="number" pos:start="7:64" pos:end="7:64">2</literal></expr>, <expr pos:start="7:67" pos:end="7:67"><literal type="number" pos:start="7:67" pos:end="7:67">2</literal></expr>, <expr pos:start="7:70" pos:end="7:70"><literal type="number" pos:start="7:70" pos:end="7:70">2</literal></expr>, <expr pos:start="7:73" pos:end="7:73"><literal type="number" pos:start="7:73" pos:end="7:73">2</literal></expr>, <expr pos:start="7:76" pos:end="7:76"><literal type="number" pos:start="7:76" pos:end="7:76">3</literal></expr>, <expr pos:start="7:79" pos:end="7:79"><literal type="number" pos:start="7:79" pos:end="7:79">3</literal></expr>, <expr pos:start="7:82" pos:end="7:82"><literal type="number" pos:start="7:82" pos:end="7:82">3</literal></expr>, <expr pos:start="7:85" pos:end="7:85"><literal type="number" pos:start="7:85" pos:end="7:85">3</literal></expr>, <expr pos:start="7:88" pos:end="7:88"><literal type="number" pos:start="7:88" pos:end="7:88">3</literal></expr>, <expr pos:start="7:91" pos:end="7:91"><literal type="number" pos:start="7:91" pos:end="7:91">3</literal></expr>, <expr pos:start="7:94" pos:end="7:94"><literal type="number" pos:start="7:94" pos:end="7:94">3</literal></expr>, <expr pos:start="7:97" pos:end="7:97"><literal type="number" pos:start="7:97" pos:end="7:97">3</literal></expr>, <expr pos:start="7:100" pos:end="7:100"><literal type="number" pos:start="7:100" pos:end="7:100">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17"><name pos:start="9:9" pos:end="9:13">level</name><index pos:start="9:14" pos:end="9:17">[<expr pos:start="9:15" pos:end="9:16"><literal type="number" pos:start="9:15" pos:end="9:16">16</literal></expr>]</index></name></decl>, <decl pos:start="9:20" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:26"><name pos:start="9:20" pos:end="9:22">run</name><index pos:start="9:23" pos:end="9:26">[<expr pos:start="9:24" pos:end="9:25"><literal type="number" pos:start="9:24" pos:end="9:25">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:89"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">suffix_length</name></decl>, <decl pos:start="11:24" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:24" pos:end="11:33">zeros_left</name></decl>, <decl pos:start="11:36" pos:end="11:44"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:36" pos:end="11:44">coeff_num</name></decl>, <decl pos:start="11:47" pos:end="11:57"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:47" pos:end="11:57">coeff_token</name></decl>, <decl pos:start="11:60" pos:end="11:70"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:60" pos:end="11:70">total_coeff</name></decl>, <decl pos:start="11:73" pos:end="11:73"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:73" pos:end="11:73">i</name></decl>, <decl pos:start="11:76" pos:end="11:88"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:76" pos:end="11:88">trailing_ones</name></decl>;</decl_stmt>



    <comment type="line" pos:start="15:5" pos:end="15:46">//FIXME put trailing_onex into the context</comment>



    <if_stmt pos:start="19:5" pos:end="47:5"><if pos:start="19:5" pos:end="25:5">if<condition pos:start="19:7" pos:end="19:34">(<expr pos:start="19:8" pos:end="19:33"><name pos:start="19:8" pos:end="19:8">n</name> <operator pos:start="19:10" pos:end="19:11">==</operator> <name pos:start="19:13" pos:end="19:33">CHROMA_DC_BLOCK_INDEX</name></expr>)</condition><block pos:start="19:35" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:36">

        <expr_stmt pos:start="21:9" pos:end="21:102"><expr pos:start="21:9" pos:end="21:101"><name pos:start="21:9" pos:end="21:19">coeff_token</name><operator pos:start="21:20" pos:end="21:20">=</operator> <call pos:start="21:22" pos:end="21:101"><name pos:start="21:22" pos:end="21:29">get_vlc2</name><argument_list pos:start="21:30" pos:end="21:101">(<argument pos:start="21:31" pos:end="21:32"><expr pos:start="21:31" pos:end="21:32"><name pos:start="21:31" pos:end="21:32">gb</name></expr></argument>, <argument pos:start="21:35" pos:end="21:65"><expr pos:start="21:35" pos:end="21:65"><name pos:start="21:35" pos:end="21:65"><name pos:start="21:35" pos:end="21:59">chroma_dc_coeff_token_vlc</name><operator pos:start="21:60" pos:end="21:60">.</operator><name pos:start="21:61" pos:end="21:65">table</name></name></expr></argument>, <argument pos:start="21:68" pos:end="21:97"><expr pos:start="21:68" pos:end="21:97"><name pos:start="21:68" pos:end="21:97">CHROMA_DC_COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="21:100" pos:end="21:100"><expr pos:start="21:100" pos:end="21:100"><literal type="number" pos:start="21:100" pos:end="21:100">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:36"><expr pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:19">total_coeff</name><operator pos:start="23:20" pos:end="23:20">=</operator> <name pos:start="23:22" pos:end="23:32">coeff_token</name><operator pos:start="23:33" pos:end="23:34">&gt;&gt;</operator><literal type="number" pos:start="23:35" pos:end="23:35">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="25:6" pos:end="47:5">else<block pos:start="25:10" pos:end="47:5">{<block_content pos:start="27:9" pos:end="45:9">    

        <if_stmt pos:start="27:9" pos:end="45:9"><if pos:start="27:9" pos:end="35:9">if<condition pos:start="27:11" pos:end="27:36">(<expr pos:start="27:12" pos:end="27:35"><name pos:start="27:12" pos:end="27:12">n</name> <operator pos:start="27:14" pos:end="27:15">==</operator> <name pos:start="27:17" pos:end="27:35">LUMA_DC_BLOCK_INDEX</name></expr>)</condition><block pos:start="27:37" pos:end="35:9">{<block_content pos:start="29:13" pos:end="33:40">

            <expr_stmt pos:start="29:13" pos:end="29:51"><expr pos:start="29:13" pos:end="29:50"><name pos:start="29:13" pos:end="29:23">total_coeff</name><operator pos:start="29:24" pos:end="29:24">=</operator> <call pos:start="29:26" pos:end="29:50"><name pos:start="29:26" pos:end="29:44">pred_non_zero_count</name><argument_list pos:start="29:45" pos:end="29:50">(<argument pos:start="29:46" pos:end="29:46"><expr pos:start="29:46" pos:end="29:46"><name pos:start="29:46" pos:end="29:46">h</name></expr></argument>, <argument pos:start="29:49" pos:end="29:49"><expr pos:start="29:49" pos:end="29:49"><literal type="number" pos:start="29:49" pos:end="29:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:126"><expr pos:start="31:13" pos:end="31:125"><name pos:start="31:13" pos:end="31:23">coeff_token</name><operator pos:start="31:24" pos:end="31:24">=</operator> <call pos:start="31:26" pos:end="31:125"><name pos:start="31:26" pos:end="31:33">get_vlc2</name><argument_list pos:start="31:34" pos:end="31:125">(<argument pos:start="31:35" pos:end="31:36"><expr pos:start="31:35" pos:end="31:36"><name pos:start="31:35" pos:end="31:36">gb</name></expr></argument>, <argument pos:start="31:39" pos:end="31:99"><expr pos:start="31:39" pos:end="31:99"><name pos:start="31:39" pos:end="31:93"><name pos:start="31:39" pos:end="31:53">coeff_token_vlc</name><index pos:start="31:54" pos:end="31:93">[ <expr pos:start="31:56" pos:end="31:91"><name pos:start="31:56" pos:end="31:91"><name pos:start="31:56" pos:end="31:78">coeff_token_table_index</name><index pos:start="31:79" pos:end="31:91">[<expr pos:start="31:80" pos:end="31:90"><name pos:start="31:80" pos:end="31:90">total_coeff</name></expr>]</index></name></expr> ]</index></name><operator pos:start="31:94" pos:end="31:94">.</operator><name pos:start="31:95" pos:end="31:99">table</name></expr></argument>, <argument pos:start="31:102" pos:end="31:121"><expr pos:start="31:102" pos:end="31:121"><name pos:start="31:102" pos:end="31:121">COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="31:124" pos:end="31:124"><expr pos:start="31:124" pos:end="31:124"><literal type="number" pos:start="31:124" pos:end="31:124">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:40"><expr pos:start="33:13" pos:end="33:39"><name pos:start="33:13" pos:end="33:23">total_coeff</name><operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:36">coeff_token</name><operator pos:start="33:37" pos:end="33:38">&gt;&gt;</operator><literal type="number" pos:start="33:39" pos:end="33:39">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="35:10" pos:end="45:9">else<block pos:start="35:14" pos:end="45:9">{<block_content pos:start="37:13" pos:end="43:61">

            <expr_stmt pos:start="37:13" pos:end="37:51"><expr pos:start="37:13" pos:end="37:50"><name pos:start="37:13" pos:end="37:23">total_coeff</name><operator pos:start="37:24" pos:end="37:24">=</operator> <call pos:start="37:26" pos:end="37:50"><name pos:start="37:26" pos:end="37:44">pred_non_zero_count</name><argument_list pos:start="37:45" pos:end="37:50">(<argument pos:start="37:46" pos:end="37:46"><expr pos:start="37:46" pos:end="37:46"><name pos:start="37:46" pos:end="37:46">h</name></expr></argument>, <argument pos:start="37:49" pos:end="37:49"><expr pos:start="37:49" pos:end="37:49"><name pos:start="37:49" pos:end="37:49">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:126"><expr pos:start="39:13" pos:end="39:125"><name pos:start="39:13" pos:end="39:23">coeff_token</name><operator pos:start="39:24" pos:end="39:24">=</operator> <call pos:start="39:26" pos:end="39:125"><name pos:start="39:26" pos:end="39:33">get_vlc2</name><argument_list pos:start="39:34" pos:end="39:125">(<argument pos:start="39:35" pos:end="39:36"><expr pos:start="39:35" pos:end="39:36"><name pos:start="39:35" pos:end="39:36">gb</name></expr></argument>, <argument pos:start="39:39" pos:end="39:99"><expr pos:start="39:39" pos:end="39:99"><name pos:start="39:39" pos:end="39:93"><name pos:start="39:39" pos:end="39:53">coeff_token_vlc</name><index pos:start="39:54" pos:end="39:93">[ <expr pos:start="39:56" pos:end="39:91"><name pos:start="39:56" pos:end="39:91"><name pos:start="39:56" pos:end="39:78">coeff_token_table_index</name><index pos:start="39:79" pos:end="39:91">[<expr pos:start="39:80" pos:end="39:90"><name pos:start="39:80" pos:end="39:90">total_coeff</name></expr>]</index></name></expr> ]</index></name><operator pos:start="39:94" pos:end="39:94">.</operator><name pos:start="39:95" pos:end="39:99">table</name></expr></argument>, <argument pos:start="39:102" pos:end="39:121"><expr pos:start="39:102" pos:end="39:121"><name pos:start="39:102" pos:end="39:121">COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="39:124" pos:end="39:124"><expr pos:start="39:124" pos:end="39:124"><literal type="number" pos:start="39:124" pos:end="39:124">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:40"><expr pos:start="41:13" pos:end="41:39"><name pos:start="41:13" pos:end="41:23">total_coeff</name><operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:36">coeff_token</name><operator pos:start="41:37" pos:end="41:38">&gt;&gt;</operator><literal type="number" pos:start="41:39" pos:end="41:39">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:61"><expr pos:start="43:13" pos:end="43:60"><name pos:start="43:13" pos:end="43:47"><name pos:start="43:13" pos:end="43:13">h</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:35">non_zero_count_cache</name><index pos:start="43:36" pos:end="43:47">[ <expr pos:start="43:38" pos:end="43:45"><name pos:start="43:38" pos:end="43:45"><name pos:start="43:38" pos:end="43:42">scan8</name><index pos:start="43:43" pos:end="43:45">[<expr pos:start="43:44" pos:end="43:44"><name pos:start="43:44" pos:end="43:44">n</name></expr>]</index></name></expr> ]</index></name><operator pos:start="43:48" pos:end="43:48">=</operator> <name pos:start="43:50" pos:end="43:60">total_coeff</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="line" pos:start="51:5" pos:end="51:30">//FIXME set last_non_zero?</comment>



    <if_stmt pos:start="55:5" pos:end="57:17"><if pos:start="55:5" pos:end="57:17">if<condition pos:start="55:7" pos:end="55:22">(<expr pos:start="55:8" pos:end="55:21"><name pos:start="55:8" pos:end="55:18">total_coeff</name><operator pos:start="55:19" pos:end="55:20">==</operator><literal type="number" pos:start="55:21" pos:end="55:21">0</literal></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:17"><block_content pos:start="57:9" pos:end="57:17">

        <return pos:start="57:9" pos:end="57:17">return <expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

        

    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><name pos:start="61:5" pos:end="61:17">trailing_ones</name><operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:30">coeff_token</name><operator pos:start="61:31" pos:end="61:31">&amp;</operator><literal type="number" pos:start="61:32" pos:end="61:32">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:67"><expr pos:start="63:5" pos:end="63:66"><call pos:start="63:5" pos:end="63:66"><name pos:start="63:5" pos:end="63:11">tprintf</name><argument_list pos:start="63:12" pos:end="63:66">(<argument pos:start="63:13" pos:end="63:37"><expr pos:start="63:13" pos:end="63:37"><literal type="string" pos:start="63:13" pos:end="63:37">"trailing:%d, total:%d\n"</literal></expr></argument>, <argument pos:start="63:40" pos:end="63:52"><expr pos:start="63:40" pos:end="63:52"><name pos:start="63:40" pos:end="63:52">trailing_ones</name></expr></argument>, <argument pos:start="63:55" pos:end="63:65"><expr pos:start="63:55" pos:end="63:65"><name pos:start="63:55" pos:end="63:65">total_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:28"><expr pos:start="65:5" pos:end="65:27"><call pos:start="65:5" pos:end="65:27"><name pos:start="65:5" pos:end="65:10">assert</name><argument_list pos:start="65:11" pos:end="65:27">(<argument pos:start="65:12" pos:end="65:26"><expr pos:start="65:12" pos:end="65:26"><name pos:start="65:12" pos:end="65:22">total_coeff</name><operator pos:start="65:23" pos:end="65:24">&lt;=</operator><literal type="number" pos:start="65:25" pos:end="65:26">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <for pos:start="69:5" pos:end="73:5">for<control pos:start="69:8" pos:end="69:34">(<init pos:start="69:9" pos:end="69:12"><expr pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:9">i</name><operator pos:start="69:10" pos:end="69:10">=</operator><literal type="number" pos:start="69:11" pos:end="69:11">0</literal></expr>;</init> <condition pos:start="69:14" pos:end="69:29"><expr pos:start="69:14" pos:end="69:28"><name pos:start="69:14" pos:end="69:14">i</name><operator pos:start="69:15" pos:end="69:15">&lt;</operator><name pos:start="69:16" pos:end="69:28">trailing_ones</name></expr>;</condition> <incr pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><name pos:start="69:31" pos:end="69:31">i</name><operator pos:start="69:32" pos:end="69:33">++</operator></expr></incr>)</control><block pos:start="69:35" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:38">

        <expr_stmt pos:start="71:9" pos:end="71:38"><expr pos:start="71:9" pos:end="71:37"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:13">level</name><index pos:start="71:14" pos:end="71:16">[<expr pos:start="71:15" pos:end="71:15"><name pos:start="71:15" pos:end="71:15">i</name></expr>]</index></name><operator pos:start="71:17" pos:end="71:17">=</operator> <literal type="number" pos:start="71:19" pos:end="71:21">1</literal> <operator pos:start="71:21" pos:end="71:21">-</operator> <literal type="number" pos:start="71:23" pos:end="71:23">2</literal><operator pos:start="71:24" pos:end="71:24">*</operator><call pos:start="71:25" pos:end="71:37"><name pos:start="71:25" pos:end="71:33">get_bits1</name><argument_list pos:start="71:34" pos:end="71:37">(<argument pos:start="71:35" pos:end="71:36"><expr pos:start="71:35" pos:end="71:36"><name pos:start="71:35" pos:end="71:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="77:5" pos:end="77:57"><expr pos:start="77:5" pos:end="77:56"><name pos:start="77:5" pos:end="77:17">suffix_length</name><operator pos:start="77:18" pos:end="77:18">=</operator> <name pos:start="77:20" pos:end="77:30">total_coeff</name> <operator pos:start="77:32" pos:end="77:32">&gt;</operator> <literal type="number" pos:start="77:34" pos:end="77:35">10</literal> <operator pos:start="77:37" pos:end="77:38">&amp;&amp;</operator> <name pos:start="77:40" pos:end="77:52">trailing_ones</name> <operator pos:start="77:54" pos:end="77:54">&lt;</operator> <literal type="number" pos:start="77:56" pos:end="77:56">3</literal></expr>;</expr_stmt>



    <for pos:start="81:5" pos:end="145:91">for<control pos:start="81:8" pos:end="81:29">(<init pos:start="81:9" pos:end="81:9">;</init> <condition pos:start="81:11" pos:end="81:24"><expr pos:start="81:11" pos:end="81:23"><name pos:start="81:11" pos:end="81:11">i</name><operator pos:start="81:12" pos:end="81:12">&lt;</operator><name pos:start="81:13" pos:end="81:23">total_coeff</name></expr>;</condition> <incr pos:start="81:26" pos:end="81:28"><expr pos:start="81:26" pos:end="81:28"><name pos:start="81:26" pos:end="81:26">i</name><operator pos:start="81:27" pos:end="81:28">++</operator></expr></incr>)</control><block pos:start="81:30" pos:end="145:90">{<block_content pos:start="83:9" pos:end="145:74">

        <decl_stmt pos:start="83:9" pos:end="83:47"><decl pos:start="83:9" pos:end="83:46"><type pos:start="83:9" pos:end="83:17"><specifier pos:start="83:9" pos:end="83:13">const</specifier> <name pos:start="83:15" pos:end="83:17">int</name></type> <name pos:start="83:19" pos:end="83:24">prefix</name><init pos:start="83:25" pos:end="83:46">= <expr pos:start="83:27" pos:end="83:46"><call pos:start="83:27" pos:end="83:46"><name pos:start="83:27" pos:end="83:42">get_level_prefix</name><argument_list pos:start="83:43" pos:end="83:46">(<argument pos:start="83:44" pos:end="83:45"><expr pos:start="83:44" pos:end="83:45"><name pos:start="83:44" pos:end="83:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="85:9" pos:end="85:29"><decl pos:start="85:9" pos:end="85:22"><type pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">int</name></type> <name pos:start="85:13" pos:end="85:22">level_code</name></decl>, <decl pos:start="85:25" pos:end="85:28"><type ref="prev" pos:start="85:9" pos:end="85:11"/><name pos:start="85:25" pos:end="85:28">mask</name></decl>;</decl_stmt>



        <if_stmt pos:start="89:9" pos:end="121:9"><if pos:start="89:9" pos:end="99:9">if<condition pos:start="89:11" pos:end="89:21">(<expr pos:start="89:12" pos:end="89:20"><name pos:start="89:12" pos:end="89:17">prefix</name><operator pos:start="89:18" pos:end="89:18">&lt;</operator><literal type="number" pos:start="89:19" pos:end="89:20">14</literal></expr>)</condition><block pos:start="89:22" pos:end="99:9">{<block_content pos:start="91:13" pos:end="97:52"> <comment type="line" pos:start="89:24" pos:end="89:82">//FIXME try to build a large unified VLC table for all this</comment>

            <if_stmt pos:start="91:13" pos:end="97:52"><if pos:start="91:13" pos:end="93:82">if<condition pos:start="91:15" pos:end="91:29">(<expr pos:start="91:16" pos:end="91:28"><name pos:start="91:16" pos:end="91:28">suffix_length</name></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:82"><block_content pos:start="93:17" pos:end="93:82">

                <expr_stmt pos:start="93:17" pos:end="93:82"><expr pos:start="93:17" pos:end="93:81"><name pos:start="93:17" pos:end="93:26">level_code</name><operator pos:start="93:27" pos:end="93:27">=</operator> <operator pos:start="93:29" pos:end="93:29">(</operator><name pos:start="93:30" pos:end="93:35">prefix</name><operator pos:start="93:36" pos:end="93:37">&lt;&lt;</operator><name pos:start="93:38" pos:end="93:50">suffix_length</name><operator pos:start="93:51" pos:end="93:51">)</operator> <operator pos:start="93:53" pos:end="93:53">+</operator> <call pos:start="93:55" pos:end="93:81"><name pos:start="93:55" pos:end="93:62">get_bits</name><argument_list pos:start="93:63" pos:end="93:81">(<argument pos:start="93:64" pos:end="93:65"><expr pos:start="93:64" pos:end="93:65"><name pos:start="93:64" pos:end="93:65">gb</name></expr></argument>, <argument pos:start="93:68" pos:end="93:80"><expr pos:start="93:68" pos:end="93:80"><name pos:start="93:68" pos:end="93:80">suffix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="93:84" pos:end="93:89">//part</comment>

            <else pos:start="95:13" pos:end="97:52">else<block type="pseudo" pos:start="97:17" pos:end="97:52"><block_content pos:start="97:17" pos:end="97:52">

                <expr_stmt pos:start="97:17" pos:end="97:52"><expr pos:start="97:17" pos:end="97:51"><name pos:start="97:17" pos:end="97:26">level_code</name><operator pos:start="97:27" pos:end="97:27">=</operator> <operator pos:start="97:29" pos:end="97:29">(</operator><name pos:start="97:30" pos:end="97:35">prefix</name><operator pos:start="97:36" pos:end="97:37">&lt;&lt;</operator><name pos:start="97:38" pos:end="97:50">suffix_length</name><operator pos:start="97:51" pos:end="97:51">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="97:54" pos:end="97:59">//part</comment>

        </block_content>}</block></if><if type="elseif" pos:start="99:10" pos:end="109:9">else if<condition pos:start="99:17" pos:end="99:28">(<expr pos:start="99:18" pos:end="99:27"><name pos:start="99:18" pos:end="99:23">prefix</name><operator pos:start="99:24" pos:end="99:25">==</operator><literal type="number" pos:start="99:26" pos:end="99:27">14</literal></expr>)</condition><block pos:start="99:29" pos:end="109:9">{<block_content pos:start="101:13" pos:end="107:53">

            <if_stmt pos:start="101:13" pos:end="107:53"><if pos:start="101:13" pos:end="103:82">if<condition pos:start="101:15" pos:end="101:29">(<expr pos:start="101:16" pos:end="101:28"><name pos:start="101:16" pos:end="101:28">suffix_length</name></expr>)</condition><block type="pseudo" pos:start="103:17" pos:end="103:82"><block_content pos:start="103:17" pos:end="103:82">

                <expr_stmt pos:start="103:17" pos:end="103:82"><expr pos:start="103:17" pos:end="103:81"><name pos:start="103:17" pos:end="103:26">level_code</name><operator pos:start="103:27" pos:end="103:27">=</operator> <operator pos:start="103:29" pos:end="103:29">(</operator><name pos:start="103:30" pos:end="103:35">prefix</name><operator pos:start="103:36" pos:end="103:37">&lt;&lt;</operator><name pos:start="103:38" pos:end="103:50">suffix_length</name><operator pos:start="103:51" pos:end="103:51">)</operator> <operator pos:start="103:53" pos:end="103:53">+</operator> <call pos:start="103:55" pos:end="103:81"><name pos:start="103:55" pos:end="103:62">get_bits</name><argument_list pos:start="103:63" pos:end="103:81">(<argument pos:start="103:64" pos:end="103:65"><expr pos:start="103:64" pos:end="103:65"><name pos:start="103:64" pos:end="103:65">gb</name></expr></argument>, <argument pos:start="103:68" pos:end="103:80"><expr pos:start="103:68" pos:end="103:80"><name pos:start="103:68" pos:end="103:80">suffix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="103:84" pos:end="103:89">//part</comment>

            <else pos:start="105:13" pos:end="107:53">else<block type="pseudo" pos:start="107:17" pos:end="107:53"><block_content pos:start="107:17" pos:end="107:53">

                <expr_stmt pos:start="107:17" pos:end="107:53"><expr pos:start="107:17" pos:end="107:52"><name pos:start="107:17" pos:end="107:26">level_code</name><operator pos:start="107:27" pos:end="107:27">=</operator> <name pos:start="107:29" pos:end="107:34">prefix</name> <operator pos:start="107:36" pos:end="107:36">+</operator> <call pos:start="107:38" pos:end="107:52"><name pos:start="107:38" pos:end="107:45">get_bits</name><argument_list pos:start="107:46" pos:end="107:52">(<argument pos:start="107:47" pos:end="107:48"><expr pos:start="107:47" pos:end="107:48"><name pos:start="107:47" pos:end="107:48">gb</name></expr></argument>, <argument pos:start="107:51" pos:end="107:51"><expr pos:start="107:51" pos:end="107:51"><literal type="number" pos:start="107:51" pos:end="107:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="107:55" pos:end="107:60">//part</comment>

        </block_content>}</block></if><if type="elseif" pos:start="109:10" pos:end="115:9">else if<condition pos:start="109:17" pos:end="109:28">(<expr pos:start="109:18" pos:end="109:27"><name pos:start="109:18" pos:end="109:23">prefix</name><operator pos:start="109:24" pos:end="109:25">==</operator><literal type="number" pos:start="109:26" pos:end="109:27">15</literal></expr>)</condition><block pos:start="109:29" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:48">

            <expr_stmt pos:start="111:13" pos:end="111:67"><expr pos:start="111:13" pos:end="111:66"><name pos:start="111:13" pos:end="111:22">level_code</name><operator pos:start="111:23" pos:end="111:23">=</operator> <operator pos:start="111:25" pos:end="111:25">(</operator><name pos:start="111:26" pos:end="111:31">prefix</name><operator pos:start="111:32" pos:end="111:33">&lt;&lt;</operator><name pos:start="111:34" pos:end="111:46">suffix_length</name><operator pos:start="111:47" pos:end="111:47">)</operator> <operator pos:start="111:49" pos:end="111:49">+</operator> <call pos:start="111:51" pos:end="111:66"><name pos:start="111:51" pos:end="111:58">get_bits</name><argument_list pos:start="111:59" pos:end="111:66">(<argument pos:start="111:60" pos:end="111:61"><expr pos:start="111:60" pos:end="111:61"><name pos:start="111:60" pos:end="111:61">gb</name></expr></argument>, <argument pos:start="111:64" pos:end="111:65"><expr pos:start="111:64" pos:end="111:65"><literal type="number" pos:start="111:64" pos:end="111:65">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="111:69" pos:end="111:74">//part</comment>

            <if_stmt pos:start="113:13" pos:end="113:48"><if pos:start="113:13" pos:end="113:48">if<condition pos:start="113:15" pos:end="113:32">(<expr pos:start="113:16" pos:end="113:31"><name pos:start="113:16" pos:end="113:28">suffix_length</name><operator pos:start="113:29" pos:end="113:30">==</operator><literal type="number" pos:start="113:31" pos:end="113:31">0</literal></expr>)</condition><block type="pseudo" pos:start="113:34" pos:end="113:48"><block_content pos:start="113:34" pos:end="113:48"> <expr_stmt pos:start="113:34" pos:end="113:48"><expr pos:start="113:34" pos:end="113:47"><name pos:start="113:34" pos:end="113:43">level_code</name><operator pos:start="113:44" pos:end="113:45">+=</operator><literal type="number" pos:start="113:46" pos:end="113:47">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="113:50" pos:end="113:80">//FIXME doesnt make (much)sense</comment>

        </block_content>}</block></if><else pos:start="115:10" pos:end="121:9">else<block pos:start="115:14" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:22">

            <expr_stmt pos:start="117:13" pos:end="117:94"><expr pos:start="117:13" pos:end="117:93"><call pos:start="117:13" pos:end="117:93"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="117:93">(<argument pos:start="117:20" pos:end="117:29"><expr pos:start="117:20" pos:end="117:29"><name pos:start="117:20" pos:end="117:29"><name pos:start="117:20" pos:end="117:20">h</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:23">s</name><operator pos:start="117:24" pos:end="117:24">.</operator><name pos:start="117:25" pos:end="117:29">avctx</name></name></expr></argument>, <argument pos:start="117:32" pos:end="117:43"><expr pos:start="117:32" pos:end="117:43"><name pos:start="117:32" pos:end="117:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:46" pos:end="117:74"><expr pos:start="117:46" pos:end="117:74"><literal type="string" pos:start="117:46" pos:end="117:74">"prefix too large at %d %d\n"</literal></expr></argument>, <argument pos:start="117:77" pos:end="117:83"><expr pos:start="117:77" pos:end="117:83"><name pos:start="117:77" pos:end="117:83"><name pos:start="117:77" pos:end="117:77">s</name><operator pos:start="117:78" pos:end="117:79">-&gt;</operator><name pos:start="117:80" pos:end="117:83">mb_x</name></name></expr></argument>, <argument pos:start="117:86" pos:end="117:92"><expr pos:start="117:86" pos:end="117:92"><name pos:start="117:86" pos:end="117:92"><name pos:start="117:86" pos:end="117:86">s</name><operator pos:start="117:87" pos:end="117:88">-&gt;</operator><name pos:start="117:89" pos:end="117:92">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:22">return <expr pos:start="119:20" pos:end="119:21"><operator pos:start="119:20" pos:end="119:20">-</operator><literal type="number" pos:start="119:21" pos:end="119:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="125:9" pos:end="125:51"><if pos:start="125:9" pos:end="125:51">if<condition pos:start="125:11" pos:end="125:35">(<expr pos:start="125:12" pos:end="125:34"><name pos:start="125:12" pos:end="125:12">i</name><operator pos:start="125:13" pos:end="125:14">==</operator><name pos:start="125:15" pos:end="125:27">trailing_ones</name> <operator pos:start="125:29" pos:end="125:30">&amp;&amp;</operator> <name pos:start="125:32" pos:end="125:32">i</name><operator pos:start="125:33" pos:end="125:33">&lt;</operator><literal type="number" pos:start="125:34" pos:end="125:34">3</literal></expr>)</condition><block type="pseudo" pos:start="125:37" pos:end="125:51"><block_content pos:start="125:37" pos:end="125:51"> <expr_stmt pos:start="125:37" pos:end="125:51"><expr pos:start="125:37" pos:end="125:50"><name pos:start="125:37" pos:end="125:46">level_code</name><operator pos:start="125:47" pos:end="125:48">+=</operator> <literal type="number" pos:start="125:50" pos:end="125:50">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="125:53" pos:end="125:81">//FIXME split first iteration</comment>



        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:12">mask</name><operator pos:start="129:13" pos:end="129:13">=</operator> <operator pos:start="129:15" pos:end="129:15">-</operator><operator pos:start="129:16" pos:end="129:16">(</operator><name pos:start="129:17" pos:end="129:26">level_code</name><operator pos:start="129:27" pos:end="129:27">&amp;</operator><literal type="number" pos:start="129:28" pos:end="129:28">1</literal><operator pos:start="129:29" pos:end="129:29">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:54"><expr pos:start="131:9" pos:end="131:53"><name pos:start="131:9" pos:end="131:16"><name pos:start="131:9" pos:end="131:13">level</name><index pos:start="131:14" pos:end="131:16">[<expr pos:start="131:15" pos:end="131:15"><name pos:start="131:15" pos:end="131:15">i</name></expr>]</index></name><operator pos:start="131:17" pos:end="131:17">=</operator> <operator pos:start="131:19" pos:end="131:19">(</operator><operator pos:start="131:20" pos:end="131:20">(</operator><operator pos:start="131:21" pos:end="131:21">(</operator><literal type="number" pos:start="131:22" pos:end="131:23">2</literal><operator pos:start="131:23" pos:end="131:23">+</operator><name pos:start="131:24" pos:end="131:33">level_code</name><operator pos:start="131:34" pos:end="131:34">)</operator><operator pos:start="131:35" pos:end="131:36">&gt;&gt;</operator><literal type="number" pos:start="131:37" pos:end="131:37">1</literal><operator pos:start="131:38" pos:end="131:38">)</operator> <operator pos:start="131:40" pos:end="131:40">^</operator> <name pos:start="131:42" pos:end="131:45">mask</name><operator pos:start="131:46" pos:end="131:46">)</operator> <operator pos:start="131:48" pos:end="131:48">-</operator> <name pos:start="131:50" pos:end="131:53">mask</name></expr>;</expr_stmt>



        <if_stmt pos:start="135:9" pos:end="140:0"><if pos:start="135:9" pos:end="140:0">if<condition pos:start="135:11" pos:end="135:28">(<expr pos:start="135:12" pos:end="135:27"><name pos:start="135:12" pos:end="135:24">suffix_length</name><operator pos:start="135:25" pos:end="135:26">==</operator><literal type="number" pos:start="135:27" pos:end="135:27">0</literal></expr>)</condition><block type="pseudo" pos:start="135:30" pos:end="140:0"><block_content pos:start="135:30" pos:end="140:0"> <expr_stmt pos:start="135:30" pos:end="140:0"><expr pos:start="135:30" pos:end="135:44"><name pos:start="135:30" pos:end="135:42">suffix_length</name><operator pos:start="135:43" pos:end="135:43">=</operator><literal type="number" pos:start="135:44" pos:end="135:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="135:47" pos:end="135:75">//FIXME split first iteration</comment>



<cpp:if pos:start="139:1" pos:end="139:5">#<cpp:directive pos:start="139:2" pos:end="139:3">if</cpp:directive> <expr pos:start="139:5" pos:end="139:5"><literal type="number" pos:start="139:5" pos:end="139:5">1</literal></expr></cpp:if>

        <if_stmt pos:start="141:9" pos:end="144:0"><if pos:start="141:9" pos:end="144:0">if<condition pos:start="141:11" pos:end="141:69">(<expr pos:start="141:12" pos:end="141:68"><call pos:start="141:12" pos:end="141:24"><name pos:start="141:12" pos:end="141:14">ABS</name><argument_list pos:start="141:15" pos:end="141:24">(<argument pos:start="141:16" pos:end="141:23"><expr pos:start="141:16" pos:end="141:23"><name pos:start="141:16" pos:end="141:23"><name pos:start="141:16" pos:end="141:20">level</name><index pos:start="141:21" pos:end="141:23">[<expr pos:start="141:22" pos:end="141:22"><name pos:start="141:22" pos:end="141:22">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="141:26" pos:end="141:26">&gt;</operator> <operator pos:start="141:28" pos:end="141:28">(</operator><literal type="number" pos:start="141:29" pos:end="141:29">3</literal><operator pos:start="141:30" pos:end="141:31">&lt;&lt;</operator><operator pos:start="141:32" pos:end="141:32">(</operator><name pos:start="141:33" pos:end="141:45">suffix_length</name><operator pos:start="141:46" pos:end="141:46">-</operator><literal type="number" pos:start="141:47" pos:end="141:47">1</literal><operator pos:start="141:48" pos:end="141:48">)</operator><operator pos:start="141:49" pos:end="141:49">)</operator> <operator pos:start="141:51" pos:end="141:52">&amp;&amp;</operator> <name pos:start="141:54" pos:end="141:66">suffix_length</name><operator pos:start="141:67" pos:end="141:67">&lt;</operator><literal type="number" pos:start="141:68" pos:end="141:68">6</literal></expr>)</condition><block type="pseudo" pos:start="141:71" pos:end="144:0"><block_content pos:start="141:71" pos:end="144:0"> <expr_stmt pos:start="141:71" pos:end="144:0"><expr pos:start="141:71" pos:end="141:85"><name pos:start="141:71" pos:end="141:83">suffix_length</name><operator pos:start="141:84" pos:end="141:85">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else pos:start="143:1" pos:end="143:5">#<cpp:directive pos:start="143:2" pos:end="143:5">else</cpp:directive></cpp:else>        

        <if_stmt pos:start="145:9" pos:end="145:73"><if pos:start="145:9" pos:end="145:73">if<condition pos:start="145:11" pos:end="145:29">(<expr pos:start="145:12" pos:end="145:28"><operator pos:start="145:12" pos:end="145:12">(</operator><literal type="number" pos:start="145:13" pos:end="145:14">2</literal><operator pos:start="145:14" pos:end="145:14">+</operator><name pos:start="145:15" pos:end="145:24">level_code</name><operator pos:start="145:25" pos:end="145:25">)</operator><operator pos:start="145:26" pos:end="145:27">&gt;&gt;</operator><literal type="number" pos:start="145:28" pos:end="145:28">1</literal></expr>)</condition><block type="pseudo" pos:start="145:31" pos:end="145:73"><block_content pos:start="145:31" pos:end="145:73"> <expr_stmt pos:start="145:31" pos:end="145:73"><expr pos:start="145:31" pos:end="145:73"><operator pos:start="145:31" pos:end="145:31">&gt;</operator> <operator pos:start="145:33" pos:end="145:33">(</operator><literal type="number" pos:start="145:34" pos:end="145:34">3</literal><operator pos:start="145:35" pos:end="145:36">&lt;&lt;</operator><operator pos:start="145:37" pos:end="145:37">(</operator><name pos:start="145:38" pos:end="145:50">suffix_length</name><operator pos:start="145:51" pos:end="145:51">-</operator><literal type="number" pos:start="145:52" pos:end="145:52">1</literal><operator pos:start="145:53" pos:end="145:53">)</operator><operator pos:start="145:54" pos:end="145:54">)</operator> <operator pos:start="145:56" pos:end="145:57">&amp;&amp;</operator> <name pos:start="145:59" pos:end="145:71">suffix_length</name><operator pos:start="145:72" pos:end="145:72">&lt;</operator><literal type="number" pos:start="145:73" pos:end="145:73">6</literal></expr></expr_stmt></block_content></block></if></if_stmt>)</block_content> suffix_length++</block><empty_stmt pos:start="145:91" pos:end="145:91">;</empty_stmt></for>

        <expr_stmt pos:start="147:9" pos:end="151:73"><expr pos:start="147:9" pos:end="151:72"><operator pos:start="147:9" pos:end="147:9">?</operator> <operator pos:start="147:11" pos:end="147:12">==</operator> <name pos:start="147:14" pos:end="147:19">prefix</name> <operator pos:start="147:21" pos:end="147:21">&gt;</operator> <literal type="number" pos:start="147:23" pos:end="147:23">2</literal> <name pos:start="147:25" pos:end="147:26">or</name> <name pos:start="147:28" pos:end="150:0">sth</name>

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif>

        <call pos:start="151:9" pos:end="151:72"><name pos:start="151:9" pos:end="151:15">tprintf</name><argument_list pos:start="151:16" pos:end="151:72">(<argument pos:start="151:17" pos:end="151:46"><expr pos:start="151:17" pos:end="151:46"><literal type="string" pos:start="151:17" pos:end="151:46">"level: %d suffix_length:%d\n"</literal></expr></argument>, <argument pos:start="151:49" pos:end="151:56"><expr pos:start="151:49" pos:end="151:56"><name pos:start="151:49" pos:end="151:56"><name pos:start="151:49" pos:end="151:53">level</name><index pos:start="151:54" pos:end="151:56">[<expr pos:start="151:55" pos:end="151:55"><name pos:start="151:55" pos:end="151:55">i</name></expr>]</index></name></expr></argument>, <argument pos:start="151:59" pos:end="151:71"><expr pos:start="151:59" pos:end="151:71"><name pos:start="151:59" pos:end="151:71">suffix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>



    <if_stmt pos:start="157:5" pos:end="171:5"><if pos:start="157:5" pos:end="159:21">if<condition pos:start="157:7" pos:end="157:32">(<expr pos:start="157:8" pos:end="157:31"><name pos:start="157:8" pos:end="157:18">total_coeff</name> <operator pos:start="157:20" pos:end="157:21">==</operator> <name pos:start="157:23" pos:end="157:31">max_coeff</name></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:21"><block_content pos:start="159:9" pos:end="159:21">

        <expr_stmt pos:start="159:9" pos:end="159:21"><expr pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:18">zeros_left</name><operator pos:start="159:19" pos:end="159:19">=</operator><literal type="number" pos:start="159:20" pos:end="159:20">0</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="161:5" pos:end="171:5">else<block pos:start="161:9" pos:end="171:5">{<block_content pos:start="163:9" pos:end="169:102">

        <if_stmt pos:start="163:9" pos:end="169:102"><if pos:start="163:9" pos:end="165:122">if<condition pos:start="163:11" pos:end="163:38">(<expr pos:start="163:12" pos:end="163:37"><name pos:start="163:12" pos:end="163:12">n</name> <operator pos:start="163:14" pos:end="163:15">==</operator> <name pos:start="163:17" pos:end="163:37">CHROMA_DC_BLOCK_INDEX</name></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:122"><block_content pos:start="165:13" pos:end="165:122">

            <expr_stmt pos:start="165:13" pos:end="165:122"><expr pos:start="165:13" pos:end="165:121"><name pos:start="165:13" pos:end="165:22">zeros_left</name><operator pos:start="165:23" pos:end="165:23">=</operator> <call pos:start="165:25" pos:end="165:121"><name pos:start="165:25" pos:end="165:32">get_vlc2</name><argument_list pos:start="165:33" pos:end="165:121">(<argument pos:start="165:34" pos:end="165:35"><expr pos:start="165:34" pos:end="165:35"><name pos:start="165:34" pos:end="165:35">gb</name></expr></argument>, <argument pos:start="165:38" pos:end="165:85"><expr pos:start="165:38" pos:end="165:85"><name pos:start="165:38" pos:end="165:79"><name pos:start="165:38" pos:end="165:62">chroma_dc_total_zeros_vlc</name><index pos:start="165:63" pos:end="165:79">[ <expr pos:start="165:65" pos:end="165:77"><name pos:start="165:65" pos:end="165:75">total_coeff</name><operator pos:start="165:76" pos:end="165:76">-</operator><literal type="number" pos:start="165:77" pos:end="165:77">1</literal></expr> ]</index></name><operator pos:start="165:80" pos:end="165:80">.</operator><name pos:start="165:81" pos:end="165:85">table</name></expr></argument>, <argument pos:start="165:88" pos:end="165:117"><expr pos:start="165:88" pos:end="165:117"><name pos:start="165:88" pos:end="165:117">CHROMA_DC_TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument pos:start="165:120" pos:end="165:120"><expr pos:start="165:120" pos:end="165:120"><literal type="number" pos:start="165:120" pos:end="165:120">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="167:9" pos:end="169:102">else<block type="pseudo" pos:start="169:13" pos:end="169:102"><block_content pos:start="169:13" pos:end="169:102">

            <expr_stmt pos:start="169:13" pos:end="169:102"><expr pos:start="169:13" pos:end="169:101"><name pos:start="169:13" pos:end="169:22">zeros_left</name><operator pos:start="169:23" pos:end="169:23">=</operator> <call pos:start="169:25" pos:end="169:101"><name pos:start="169:25" pos:end="169:32">get_vlc2</name><argument_list pos:start="169:33" pos:end="169:101">(<argument pos:start="169:34" pos:end="169:35"><expr pos:start="169:34" pos:end="169:35"><name pos:start="169:34" pos:end="169:35">gb</name></expr></argument>, <argument pos:start="169:38" pos:end="169:75"><expr pos:start="169:38" pos:end="169:75"><name pos:start="169:38" pos:end="169:69"><name pos:start="169:38" pos:end="169:52">total_zeros_vlc</name><index pos:start="169:53" pos:end="169:69">[ <expr pos:start="169:55" pos:end="169:67"><name pos:start="169:55" pos:end="169:65">total_coeff</name><operator pos:start="169:66" pos:end="169:66">-</operator><literal type="number" pos:start="169:67" pos:end="169:67">1</literal></expr> ]</index></name><operator pos:start="169:70" pos:end="169:70">.</operator><name pos:start="169:71" pos:end="169:75">table</name></expr></argument>, <argument pos:start="169:78" pos:end="169:97"><expr pos:start="169:78" pos:end="169:97"><name pos:start="169:78" pos:end="169:97">TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument pos:start="169:100" pos:end="169:100"><expr pos:start="169:100" pos:end="169:100"><literal type="number" pos:start="169:100" pos:end="169:100">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    

    <for pos:start="175:5" pos:end="193:5">for<control pos:start="175:8" pos:end="175:34">(<init pos:start="175:9" pos:end="175:12"><expr pos:start="175:9" pos:end="175:11"><name pos:start="175:9" pos:end="175:9">i</name><operator pos:start="175:10" pos:end="175:10">=</operator><literal type="number" pos:start="175:11" pos:end="175:11">0</literal></expr>;</init> <condition pos:start="175:14" pos:end="175:29"><expr pos:start="175:14" pos:end="175:28"><name pos:start="175:14" pos:end="175:14">i</name><operator pos:start="175:15" pos:end="175:15">&lt;</operator><name pos:start="175:16" pos:end="175:26">total_coeff</name><operator pos:start="175:27" pos:end="175:27">-</operator><literal type="number" pos:start="175:28" pos:end="175:28">1</literal></expr>;</condition> <incr pos:start="175:31" pos:end="175:33"><expr pos:start="175:31" pos:end="175:33"><name pos:start="175:31" pos:end="175:31">i</name><operator pos:start="175:32" pos:end="175:33">++</operator></expr></incr>)</control><block pos:start="175:35" pos:end="193:5">{<block_content pos:start="177:9" pos:end="191:29">

        <if_stmt pos:start="177:9" pos:end="189:9"><if pos:start="177:9" pos:end="179:18">if<condition pos:start="177:11" pos:end="177:26">(<expr pos:start="177:12" pos:end="177:25"><name pos:start="177:12" pos:end="177:21">zeros_left</name> <operator pos:start="177:23" pos:end="177:24">&lt;=</operator><literal type="number" pos:start="177:25" pos:end="177:25">0</literal></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:18"><block_content pos:start="179:13" pos:end="179:18">

            <break pos:start="179:13" pos:end="179:18">break;</break></block_content></block></if>

        <if type="elseif" pos:start="181:9" pos:end="185:9">else if<condition pos:start="181:16" pos:end="181:31">(<expr pos:start="181:17" pos:end="181:30"><name pos:start="181:17" pos:end="181:26">zeros_left</name> <operator pos:start="181:28" pos:end="181:28">&lt;</operator> <literal type="number" pos:start="181:30" pos:end="181:30">7</literal></expr>)</condition><block pos:start="181:32" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:79">

            <expr_stmt pos:start="183:13" pos:end="183:79"><expr pos:start="183:13" pos:end="183:78"><name pos:start="183:13" pos:end="183:18"><name pos:start="183:13" pos:end="183:15">run</name><index pos:start="183:16" pos:end="183:18">[<expr pos:start="183:17" pos:end="183:17"><name pos:start="183:17" pos:end="183:17">i</name></expr>]</index></name><operator pos:start="183:19" pos:end="183:19">=</operator> <call pos:start="183:21" pos:end="183:78"><name pos:start="183:21" pos:end="183:28">get_vlc2</name><argument_list pos:start="183:29" pos:end="183:78">(<argument pos:start="183:30" pos:end="183:31"><expr pos:start="183:30" pos:end="183:31"><name pos:start="183:30" pos:end="183:31">gb</name></expr></argument>, <argument pos:start="183:34" pos:end="183:60"><expr pos:start="183:34" pos:end="183:60"><name pos:start="183:34" pos:end="183:54"><name pos:start="183:34" pos:end="183:40">run_vlc</name><index pos:start="183:41" pos:end="183:54">[<expr pos:start="183:42" pos:end="183:53"><name pos:start="183:42" pos:end="183:51">zeros_left</name><operator pos:start="183:52" pos:end="183:52">-</operator><literal type="number" pos:start="183:53" pos:end="183:53">1</literal></expr>]</index></name><operator pos:start="183:55" pos:end="183:55">.</operator><name pos:start="183:56" pos:end="183:60">table</name></expr></argument>, <argument pos:start="183:63" pos:end="183:74"><expr pos:start="183:63" pos:end="183:74"><name pos:start="183:63" pos:end="183:74">RUN_VLC_BITS</name></expr></argument>, <argument pos:start="183:77" pos:end="183:77"><expr pos:start="183:77" pos:end="183:77"><literal type="number" pos:start="183:77" pos:end="183:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="185:10" pos:end="189:9">else<block pos:start="185:14" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:67">

            <expr_stmt pos:start="187:13" pos:end="187:67"><expr pos:start="187:13" pos:end="187:66"><name pos:start="187:13" pos:end="187:18"><name pos:start="187:13" pos:end="187:15">run</name><index pos:start="187:16" pos:end="187:18">[<expr pos:start="187:17" pos:end="187:17"><name pos:start="187:17" pos:end="187:17">i</name></expr>]</index></name><operator pos:start="187:19" pos:end="187:19">=</operator> <call pos:start="187:21" pos:end="187:66"><name pos:start="187:21" pos:end="187:28">get_vlc2</name><argument_list pos:start="187:29" pos:end="187:66">(<argument pos:start="187:30" pos:end="187:31"><expr pos:start="187:30" pos:end="187:31"><name pos:start="187:30" pos:end="187:31">gb</name></expr></argument>, <argument pos:start="187:34" pos:end="187:47"><expr pos:start="187:34" pos:end="187:47"><name pos:start="187:34" pos:end="187:47"><name pos:start="187:34" pos:end="187:41">run7_vlc</name><operator pos:start="187:42" pos:end="187:42">.</operator><name pos:start="187:43" pos:end="187:47">table</name></name></expr></argument>, <argument pos:start="187:50" pos:end="187:62"><expr pos:start="187:50" pos:end="187:62"><name pos:start="187:50" pos:end="187:62">RUN7_VLC_BITS</name></expr></argument>, <argument pos:start="187:65" pos:end="187:65"><expr pos:start="187:65" pos:end="187:65"><literal type="number" pos:start="187:65" pos:end="187:65">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:29"><expr pos:start="191:9" pos:end="191:28"><name pos:start="191:9" pos:end="191:18">zeros_left</name> <operator pos:start="191:20" pos:end="191:21">-=</operator> <name pos:start="191:23" pos:end="191:28"><name pos:start="191:23" pos:end="191:25">run</name><index pos:start="191:26" pos:end="191:28">[<expr pos:start="191:27" pos:end="191:27"><name pos:start="191:27" pos:end="191:27">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="197:5" pos:end="203:5"><if pos:start="197:5" pos:end="203:5">if<condition pos:start="197:7" pos:end="197:20">(<expr pos:start="197:8" pos:end="197:19"><name pos:start="197:8" pos:end="197:17">zeros_left</name><operator pos:start="197:18" pos:end="197:18">&lt;</operator><literal type="number" pos:start="197:19" pos:end="197:19">0</literal></expr>)</condition><block pos:start="197:21" pos:end="203:5">{<block_content pos:start="199:9" pos:end="201:18">

        <expr_stmt pos:start="199:9" pos:end="199:104"><expr pos:start="199:9" pos:end="199:103"><call pos:start="199:9" pos:end="199:103"><name pos:start="199:9" pos:end="199:14">av_log</name><argument_list pos:start="199:15" pos:end="199:103">(<argument pos:start="199:16" pos:end="199:25"><expr pos:start="199:16" pos:end="199:25"><name pos:start="199:16" pos:end="199:25"><name pos:start="199:16" pos:end="199:16">h</name><operator pos:start="199:17" pos:end="199:18">-&gt;</operator><name pos:start="199:19" pos:end="199:19">s</name><operator pos:start="199:20" pos:end="199:20">.</operator><name pos:start="199:21" pos:end="199:25">avctx</name></name></expr></argument>, <argument pos:start="199:28" pos:end="199:39"><expr pos:start="199:28" pos:end="199:39"><name pos:start="199:28" pos:end="199:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:42" pos:end="199:84"><expr pos:start="199:42" pos:end="199:84"><literal type="string" pos:start="199:42" pos:end="199:84">"negative number of zero coeffs at %d %d\n"</literal></expr></argument>, <argument pos:start="199:87" pos:end="199:93"><expr pos:start="199:87" pos:end="199:93"><name pos:start="199:87" pos:end="199:93"><name pos:start="199:87" pos:end="199:87">s</name><operator pos:start="199:88" pos:end="199:89">-&gt;</operator><name pos:start="199:90" pos:end="199:93">mb_x</name></name></expr></argument>, <argument pos:start="199:96" pos:end="199:102"><expr pos:start="199:96" pos:end="199:102"><name pos:start="199:96" pos:end="199:102"><name pos:start="199:96" pos:end="199:96">s</name><operator pos:start="199:97" pos:end="199:98">-&gt;</operator><name pos:start="199:99" pos:end="199:102">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="201:9" pos:end="201:18">return <expr pos:start="201:16" pos:end="201:17"><operator pos:start="201:16" pos:end="201:16">-</operator><literal type="number" pos:start="201:17" pos:end="201:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <for pos:start="207:5" pos:end="211:5">for<control pos:start="207:8" pos:end="207:31">(<init pos:start="207:9" pos:end="207:9">;</init> <condition pos:start="207:11" pos:end="207:26"><expr pos:start="207:11" pos:end="207:25"><name pos:start="207:11" pos:end="207:11">i</name><operator pos:start="207:12" pos:end="207:12">&lt;</operator><name pos:start="207:13" pos:end="207:23">total_coeff</name><operator pos:start="207:24" pos:end="207:24">-</operator><literal type="number" pos:start="207:25" pos:end="207:25">1</literal></expr>;</condition> <incr pos:start="207:28" pos:end="207:30"><expr pos:start="207:28" pos:end="207:30"><name pos:start="207:28" pos:end="207:28">i</name><operator pos:start="207:29" pos:end="207:30">++</operator></expr></incr>)</control><block pos:start="207:32" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:18">

        <expr_stmt pos:start="209:9" pos:end="209:18"><expr pos:start="209:9" pos:end="209:17"><name pos:start="209:9" pos:end="209:14"><name pos:start="209:9" pos:end="209:11">run</name><index pos:start="209:12" pos:end="209:14">[<expr pos:start="209:13" pos:end="209:13"><name pos:start="209:13" pos:end="209:13">i</name></expr>]</index></name><operator pos:start="209:15" pos:end="209:15">=</operator> <literal type="number" pos:start="209:17" pos:end="209:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="215:5" pos:end="215:23"><expr pos:start="215:5" pos:end="215:22"><name pos:start="215:5" pos:end="215:10"><name pos:start="215:5" pos:end="215:7">run</name><index pos:start="215:8" pos:end="215:10">[<expr pos:start="215:9" pos:end="215:9"><name pos:start="215:9" pos:end="215:9">i</name></expr>]</index></name><operator pos:start="215:11" pos:end="215:11">=</operator> <name pos:start="215:13" pos:end="215:22">zeros_left</name></expr>;</expr_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:17"><expr pos:start="219:5" pos:end="219:16"><name pos:start="219:5" pos:end="219:13">coeff_num</name><operator pos:start="219:14" pos:end="219:14">=</operator><operator pos:start="219:15" pos:end="219:15">-</operator><literal type="number" pos:start="219:16" pos:end="219:16">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="221:5" pos:end="259:5"><if pos:start="221:5" pos:end="239:5">if<condition pos:start="221:7" pos:end="221:14">(<expr pos:start="221:8" pos:end="221:13"><name pos:start="221:8" pos:end="221:8">n</name> <operator pos:start="221:10" pos:end="221:10">&gt;</operator> <literal type="number" pos:start="221:12" pos:end="221:13">24</literal></expr>)</condition><block pos:start="221:15" pos:end="239:5">{<block_content pos:start="223:9" pos:end="237:9">

        <for pos:start="223:9" pos:end="237:9">for<control pos:start="223:12" pos:end="223:39">(<init pos:start="223:13" pos:end="223:28"><expr pos:start="223:13" pos:end="223:27"><name pos:start="223:13" pos:end="223:13">i</name><operator pos:start="223:14" pos:end="223:14">=</operator><name pos:start="223:15" pos:end="223:25">total_coeff</name><operator pos:start="223:26" pos:end="223:26">-</operator><literal type="number" pos:start="223:27" pos:end="223:27">1</literal></expr>;</init> <condition pos:start="223:30" pos:end="223:34"><expr pos:start="223:30" pos:end="223:33"><name pos:start="223:30" pos:end="223:30">i</name><operator pos:start="223:31" pos:end="223:32">&gt;=</operator><literal type="number" pos:start="223:33" pos:end="223:33">0</literal></expr>;</condition> <incr pos:start="223:36" pos:end="223:38"><expr pos:start="223:36" pos:end="223:38"><name pos:start="223:36" pos:end="223:36">i</name><operator pos:start="223:37" pos:end="223:38">--</operator></expr></incr>)</control><block pos:start="223:40" pos:end="237:9">{<block_content pos:start="225:13" pos:end="235:31"> <comment type="line" pos:start="223:42" pos:end="223:70">//FIXME merge into rundecode?</comment>

            <decl_stmt pos:start="225:13" pos:end="225:18"><decl pos:start="225:13" pos:end="225:17"><type pos:start="225:13" pos:end="225:15"><name pos:start="225:13" pos:end="225:15">int</name></type> <name pos:start="225:17" pos:end="225:17">j</name></decl>;</decl_stmt>



            <expr_stmt pos:start="229:13" pos:end="229:36"><expr pos:start="229:13" pos:end="229:35"><name pos:start="229:13" pos:end="229:21">coeff_num</name> <operator pos:start="229:23" pos:end="229:24">+=</operator> <name pos:start="229:26" pos:end="229:31"><name pos:start="229:26" pos:end="229:28">run</name><index pos:start="229:29" pos:end="229:31">[<expr pos:start="229:30" pos:end="229:30"><name pos:start="229:30" pos:end="229:30">i</name></expr>]</index></name> <operator pos:start="229:33" pos:end="229:33">+</operator> <literal type="number" pos:start="229:35" pos:end="229:35">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="229:38" pos:end="229:60">//FIXME add 1 earlier ?</comment>

            <expr_stmt pos:start="231:13" pos:end="231:38"><expr pos:start="231:13" pos:end="231:37"><name pos:start="231:13" pos:end="231:13">j</name><operator pos:start="231:14" pos:end="231:14">=</operator> <name pos:start="231:16" pos:end="231:37"><name pos:start="231:16" pos:end="231:24">scantable</name><index pos:start="231:25" pos:end="231:37">[ <expr pos:start="231:27" pos:end="231:35"><name pos:start="231:27" pos:end="231:35">coeff_num</name></expr> ]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="235:13" pos:end="235:31"><expr pos:start="235:13" pos:end="235:30"><name pos:start="235:13" pos:end="235:20"><name pos:start="235:13" pos:end="235:17">block</name><index pos:start="235:18" pos:end="235:20">[<expr pos:start="235:19" pos:end="235:19"><name pos:start="235:19" pos:end="235:19">j</name></expr>]</index></name><operator pos:start="235:21" pos:end="235:21">=</operator> <name pos:start="235:23" pos:end="235:30"><name pos:start="235:23" pos:end="235:27">level</name><index pos:start="235:28" pos:end="235:30">[<expr pos:start="235:29" pos:end="235:29"><name pos:start="235:29" pos:end="235:29">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if><else pos:start="239:6" pos:end="259:5">else<block pos:start="239:10" pos:end="259:5">{<block_content pos:start="241:9" pos:end="257:9">

        <for pos:start="241:9" pos:end="257:9">for<control pos:start="241:12" pos:end="241:39">(<init pos:start="241:13" pos:end="241:28"><expr pos:start="241:13" pos:end="241:27"><name pos:start="241:13" pos:end="241:13">i</name><operator pos:start="241:14" pos:end="241:14">=</operator><name pos:start="241:15" pos:end="241:25">total_coeff</name><operator pos:start="241:26" pos:end="241:26">-</operator><literal type="number" pos:start="241:27" pos:end="241:27">1</literal></expr>;</init> <condition pos:start="241:30" pos:end="241:34"><expr pos:start="241:30" pos:end="241:33"><name pos:start="241:30" pos:end="241:30">i</name><operator pos:start="241:31" pos:end="241:32">&gt;=</operator><literal type="number" pos:start="241:33" pos:end="241:33">0</literal></expr>;</condition> <incr pos:start="241:36" pos:end="241:38"><expr pos:start="241:36" pos:end="241:38"><name pos:start="241:36" pos:end="241:36">i</name><operator pos:start="241:37" pos:end="241:38">--</operator></expr></incr>)</control><block pos:start="241:40" pos:end="257:9">{<block_content pos:start="243:13" pos:end="253:41"> <comment type="line" pos:start="241:42" pos:end="241:71">//FIXME merge into  rundecode?</comment>

            <decl_stmt pos:start="243:13" pos:end="243:18"><decl pos:start="243:13" pos:end="243:17"><type pos:start="243:13" pos:end="243:15"><name pos:start="243:13" pos:end="243:15">int</name></type> <name pos:start="243:17" pos:end="243:17">j</name></decl>;</decl_stmt>



            <expr_stmt pos:start="247:13" pos:end="247:36"><expr pos:start="247:13" pos:end="247:35"><name pos:start="247:13" pos:end="247:21">coeff_num</name> <operator pos:start="247:23" pos:end="247:24">+=</operator> <name pos:start="247:26" pos:end="247:31"><name pos:start="247:26" pos:end="247:28">run</name><index pos:start="247:29" pos:end="247:31">[<expr pos:start="247:30" pos:end="247:30"><name pos:start="247:30" pos:end="247:30">i</name></expr>]</index></name> <operator pos:start="247:33" pos:end="247:33">+</operator> <literal type="number" pos:start="247:35" pos:end="247:35">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="247:38" pos:end="247:60">//FIXME add 1 earlier ?</comment>

            <expr_stmt pos:start="249:13" pos:end="249:38"><expr pos:start="249:13" pos:end="249:37"><name pos:start="249:13" pos:end="249:13">j</name><operator pos:start="249:14" pos:end="249:14">=</operator> <name pos:start="249:16" pos:end="249:37"><name pos:start="249:16" pos:end="249:24">scantable</name><index pos:start="249:25" pos:end="249:37">[ <expr pos:start="249:27" pos:end="249:35"><name pos:start="249:27" pos:end="249:35">coeff_num</name></expr> ]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="253:13" pos:end="253:41"><expr pos:start="253:13" pos:end="253:40"><name pos:start="253:13" pos:end="253:20"><name pos:start="253:13" pos:end="253:17">block</name><index pos:start="253:18" pos:end="253:20">[<expr pos:start="253:19" pos:end="253:19"><name pos:start="253:19" pos:end="253:19">j</name></expr>]</index></name><operator pos:start="253:21" pos:end="253:21">=</operator> <name pos:start="253:23" pos:end="253:30"><name pos:start="253:23" pos:end="253:27">level</name><index pos:start="253:28" pos:end="253:30">[<expr pos:start="253:29" pos:end="253:29"><name pos:start="253:29" pos:end="253:29">i</name></expr>]</index></name> <operator pos:start="253:32" pos:end="253:32">*</operator> <name pos:start="253:34" pos:end="253:40"><name pos:start="253:34" pos:end="253:37">qmul</name><index pos:start="253:38" pos:end="253:40">[<expr pos:start="253:39" pos:end="253:39"><name pos:start="253:39" pos:end="253:39">j</name></expr>]</index></name></expr>;</expr_stmt>

<comment type="line" pos:start="255:1" pos:end="255:51">//            printf("%d %d  ", block[j], qmul[j]);</comment>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

    <return pos:start="261:5" pos:end="261:13">return <expr pos:start="261:12" pos:end="261:12"><literal type="number" pos:start="261:12" pos:end="261:12">0</literal></expr>;</return>

}
</unit>
