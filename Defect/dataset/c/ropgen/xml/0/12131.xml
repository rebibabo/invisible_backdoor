<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12131.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:9"><name pos:start="1:1" pos:end="1:7">SDState</name> <modifier pos:start="1:9" pos:end="1:9">*</modifier></type><name pos:start="1:10" pos:end="1:16">sd_init</name><parameter_list pos:start="1:17" pos:end="1:51">(<parameter pos:start="1:18" pos:end="1:37"><decl pos:start="1:18" pos:end="1:37"><type pos:start="1:18" pos:end="1:37"><name pos:start="1:18" pos:end="1:33">BlockDriverState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:37">bs</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:50"><decl pos:start="1:40" pos:end="1:50"><type pos:start="1:40" pos:end="1:50"><name pos:start="1:40" pos:end="1:43">bool</name></type> <name pos:start="1:45" pos:end="1:50">is_spi</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:14">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">SDState</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:15">sd</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:36">(<expr pos:start="9:9" pos:end="9:35"><name pos:start="9:9" pos:end="9:10">bs</name> <operator pos:start="9:12" pos:end="9:13">&amp;&amp;</operator> <call pos:start="9:15" pos:end="9:35"><name pos:start="9:15" pos:end="9:31">bdrv_is_read_only</name><argument_list pos:start="9:32" pos:end="9:35">(<argument pos:start="9:33" pos:end="9:34"><expr pos:start="9:33" pos:end="9:34"><name pos:start="9:33" pos:end="9:34">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:38" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:20">

        <expr_stmt pos:start="11:9" pos:end="11:65"><expr pos:start="11:9" pos:end="11:64"><call pos:start="11:9" pos:end="11:64"><name pos:start="11:9" pos:end="11:15">fprintf</name><argument_list pos:start="11:16" pos:end="11:64">(<argument pos:start="11:17" pos:end="11:22"><expr pos:start="11:17" pos:end="11:22"><name pos:start="11:17" pos:end="11:22">stderr</name></expr></argument>, <argument pos:start="11:25" pos:end="11:63"><expr pos:start="11:25" pos:end="11:63"><literal type="string" pos:start="11:25" pos:end="11:63">"sd_init: Cannot use read-only drive\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:20">return <expr pos:start="13:16" pos:end="13:19"><name pos:start="13:16" pos:end="13:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:48"><expr pos:start="19:5" pos:end="19:47"><name pos:start="19:5" pos:end="19:6">sd</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:17">SDState</name> <operator pos:start="19:19" pos:end="19:19">*</operator><operator pos:start="19:20" pos:end="19:20">)</operator> <call pos:start="19:22" pos:end="19:47"><name pos:start="19:22" pos:end="19:30">g_malloc0</name><argument_list pos:start="19:31" pos:end="19:47">(<argument pos:start="19:32" pos:end="19:46"><expr pos:start="19:32" pos:end="19:46"><sizeof pos:start="19:32" pos:end="19:46">sizeof<argument_list pos:start="19:38" pos:end="19:46">(<argument pos:start="19:39" pos:end="19:45"><expr pos:start="19:39" pos:end="19:45"><name pos:start="19:39" pos:end="19:45">SDState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:6">sd</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:11">buf</name></name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:38"><name pos:start="21:15" pos:end="21:29">qemu_blockalign</name><argument_list pos:start="21:30" pos:end="21:38">(<argument pos:start="21:31" pos:end="21:32"><expr pos:start="21:31" pos:end="21:32"><name pos:start="21:31" pos:end="21:32">bs</name></expr></argument>, <argument pos:start="21:35" pos:end="21:37"><expr pos:start="21:35" pos:end="21:37"><literal type="number" pos:start="21:35" pos:end="21:37">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:6">sd</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:11">spi</name></name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:20">is_spi</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:6">sd</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:14">enable</name></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:21">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><call pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:12">sd_reset</name><argument_list pos:start="27:13" pos:end="27:20">(<argument pos:start="27:14" pos:end="27:15"><expr pos:start="27:14" pos:end="27:15"><name pos:start="27:14" pos:end="27:15">sd</name></expr></argument>, <argument pos:start="27:18" pos:end="27:19"><expr pos:start="27:18" pos:end="27:19"><name pos:start="27:18" pos:end="27:19">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:17">(<expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:10">sd</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:16">bdrv</name></name></expr>)</condition> <block pos:start="29:19" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:54">

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:30">bdrv_attach_dev_nofail</name><argument_list pos:start="31:31" pos:end="31:44">(<argument pos:start="31:32" pos:end="31:39"><expr pos:start="31:32" pos:end="31:39"><name pos:start="31:32" pos:end="31:39"><name pos:start="31:32" pos:end="31:33">sd</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:39">bdrv</name></name></expr></argument>, <argument pos:start="31:42" pos:end="31:43"><expr pos:start="31:42" pos:end="31:43"><name pos:start="31:42" pos:end="31:43">sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:54"><expr pos:start="33:9" pos:end="33:53"><call pos:start="33:9" pos:end="33:53"><name pos:start="33:9" pos:end="33:24">bdrv_set_dev_ops</name><argument_list pos:start="33:25" pos:end="33:53">(<argument pos:start="33:26" pos:end="33:33"><expr pos:start="33:26" pos:end="33:33"><name pos:start="33:26" pos:end="33:33"><name pos:start="33:26" pos:end="33:27">sd</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:33">bdrv</name></name></expr></argument>, <argument pos:start="33:36" pos:end="33:48"><expr pos:start="33:36" pos:end="33:48"><operator pos:start="33:36" pos:end="33:36">&amp;</operator><name pos:start="33:37" pos:end="33:48">sd_block_ops</name></expr></argument>, <argument pos:start="33:51" pos:end="33:52"><expr pos:start="33:51" pos:end="33:52"><name pos:start="33:51" pos:end="33:52">sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><call pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:20">vmstate_register</name><argument_list pos:start="37:21" pos:end="37:47">(<argument pos:start="37:22" pos:end="37:25"><expr pos:start="37:22" pos:end="37:25"><name pos:start="37:22" pos:end="37:25">NULL</name></expr></argument>, <argument pos:start="37:28" pos:end="37:29"><expr pos:start="37:28" pos:end="37:29"><operator pos:start="37:28" pos:end="37:28">-</operator><literal type="number" pos:start="37:29" pos:end="37:29">1</literal></expr></argument>, <argument pos:start="37:32" pos:end="37:42"><expr pos:start="37:32" pos:end="37:42"><operator pos:start="37:32" pos:end="37:32">&amp;</operator><name pos:start="37:33" pos:end="37:42">sd_vmstate</name></expr></argument>, <argument pos:start="37:45" pos:end="37:46"><expr pos:start="37:45" pos:end="37:46"><name pos:start="37:45" pos:end="37:46">sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="39:5" pos:end="39:14">return <expr pos:start="39:12" pos:end="39:13"><name pos:start="39:12" pos:end="39:13">sd</name></expr>;</return>

</block_content>}</block></function>
</unit>
