<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26968.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">ram_save_complete</name><parameter_list pos:start="1:29" pos:end="1:55">(<parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:37">QEMUFile</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">f</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:13">

    <expr_stmt pos:start="5:5" pos:end="5:20"><expr pos:start="5:5" pos:end="5:19"><call pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">rcu_read_lock</name><argument_list pos:start="5:18" pos:end="5:19">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:54">(<expr pos:start="9:9" pos:end="9:53"><operator pos:start="9:9" pos:end="9:9">!</operator><call pos:start="9:10" pos:end="9:53"><name pos:start="9:10" pos:end="9:30">migration_in_postcopy</name><argument_list pos:start="9:31" pos:end="9:53">(<argument pos:start="9:32" pos:end="9:52"><expr pos:start="9:32" pos:end="9:52"><call pos:start="9:32" pos:end="9:52"><name pos:start="9:32" pos:end="9:50">migrate_get_current</name><argument_list pos:start="9:51" pos:end="9:52">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:56" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:32">

        <expr_stmt pos:start="11:9" pos:end="11:32"><expr pos:start="11:9" pos:end="11:31"><call pos:start="11:9" pos:end="11:31"><name pos:start="11:9" pos:end="11:29">migration_bitmap_sync</name><argument_list pos:start="11:30" pos:end="11:31">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:54"><expr pos:start="17:5" pos:end="17:53"><call pos:start="17:5" pos:end="17:53"><name pos:start="17:5" pos:end="17:30">ram_control_before_iterate</name><argument_list pos:start="17:31" pos:end="17:53">(<argument pos:start="17:32" pos:end="17:32"><expr pos:start="17:32" pos:end="17:32"><name pos:start="17:32" pos:end="17:32">f</name></expr></argument>, <argument pos:start="17:35" pos:end="17:52"><expr pos:start="17:35" pos:end="17:52"><name pos:start="17:35" pos:end="17:52">RAM_CONTROL_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:53">/* try transferring iterative blocks of memory */</comment>



    <comment type="block" pos:start="25:5" pos:end="25:64">/* flush all remaining blocks regardless of rate limiting */</comment>

    <while pos:start="27:5" pos:end="43:5">while <condition pos:start="27:11" pos:end="27:16">(<expr pos:start="27:12" pos:end="27:15"><name pos:start="27:12" pos:end="27:15">true</name></expr>)</condition> <block pos:start="27:18" pos:end="43:5">{<block_content pos:start="29:9" pos:end="41:9">

        <decl_stmt pos:start="29:9" pos:end="29:18"><decl pos:start="29:9" pos:end="29:17"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:17">pages</name></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:69"><expr pos:start="33:9" pos:end="33:68"><name pos:start="33:9" pos:end="33:13">pages</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:68"><name pos:start="33:17" pos:end="33:39">ram_find_and_save_block</name><argument_list pos:start="33:40" pos:end="33:68">(<argument pos:start="33:41" pos:end="33:41"><expr pos:start="33:41" pos:end="33:41"><name pos:start="33:41" pos:end="33:41">f</name></expr></argument>, <argument pos:start="33:44" pos:end="33:47"><expr pos:start="33:44" pos:end="33:47"><name pos:start="33:44" pos:end="33:47">true</name></expr></argument>, <argument pos:start="33:50" pos:end="33:67"><expr pos:start="33:50" pos:end="33:67"><operator pos:start="33:50" pos:end="33:50">&amp;</operator><name pos:start="33:51" pos:end="33:67">bytes_transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:36">/* no more blocks to sent */</comment>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:23">(<expr pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:17">pages</name> <operator pos:start="37:19" pos:end="37:20">==</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>)</condition> <block pos:start="37:25" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:18">

            <break pos:start="39:13" pos:end="39:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><call pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:25">flush_compressed_data</name><argument_list pos:start="47:26" pos:end="47:28">(<argument pos:start="47:27" pos:end="47:27"><expr pos:start="47:27" pos:end="47:27"><name pos:start="47:27" pos:end="47:27">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:53"><expr pos:start="49:5" pos:end="49:52"><call pos:start="49:5" pos:end="49:52"><name pos:start="49:5" pos:end="49:29">ram_control_after_iterate</name><argument_list pos:start="49:30" pos:end="49:52">(<argument pos:start="49:31" pos:end="49:31"><expr pos:start="49:31" pos:end="49:31"><name pos:start="49:31" pos:end="49:31">f</name></expr></argument>, <argument pos:start="49:34" pos:end="49:51"><expr pos:start="49:34" pos:end="49:51"><name pos:start="49:34" pos:end="49:51">RAM_CONTROL_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:22"><expr pos:start="53:5" pos:end="53:21"><call pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:19">rcu_read_unlock</name><argument_list pos:start="53:20" pos:end="53:21">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:40"><expr pos:start="57:5" pos:end="57:39"><call pos:start="57:5" pos:end="57:39"><name pos:start="57:5" pos:end="57:17">qemu_put_be64</name><argument_list pos:start="57:18" pos:end="57:39">(<argument pos:start="57:19" pos:end="57:19"><expr pos:start="57:19" pos:end="57:19"><name pos:start="57:19" pos:end="57:19">f</name></expr></argument>, <argument pos:start="57:22" pos:end="57:38"><expr pos:start="57:22" pos:end="57:38"><name pos:start="57:22" pos:end="57:38">RAM_SAVE_FLAG_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="61:5" pos:end="61:13">return <expr pos:start="61:12" pos:end="61:12"><literal type="number" pos:start="61:12" pos:end="61:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
