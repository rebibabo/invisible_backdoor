<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6480.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">read_frame_internal</name><parameter_list pos:start="1:31" pos:end="1:65">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:46">AVFormatContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:59">AVPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="315:1">{<block_content pos:start="5:5" pos:end="313:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:18">i</name></decl>, <decl pos:start="5:21" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:21" pos:end="5:30">got_packet</name> <init pos:start="5:32" pos:end="5:34">= <expr pos:start="5:34" pos:end="5:34"><literal type="number" pos:start="5:34" pos:end="5:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">AVDictionary</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:26">metadata</name> <init pos:start="7:28" pos:end="7:33">= <expr pos:start="7:30" pos:end="7:33"><name pos:start="7:30" pos:end="7:33">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:24"><expr pos:start="11:5" pos:end="11:23"><call pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:18">av_init_packet</name><argument_list pos:start="11:19" pos:end="11:23">(<argument pos:start="11:20" pos:end="11:22"><expr pos:start="11:20" pos:end="11:22"><name pos:start="11:20" pos:end="11:22">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="15:5" pos:end="181:5">while <condition pos:start="15:11" pos:end="15:42">(<expr pos:start="15:12" pos:end="15:41"><operator pos:start="15:12" pos:end="15:12">!</operator><name pos:start="15:13" pos:end="15:22">got_packet</name> <operator pos:start="15:24" pos:end="15:25">&amp;&amp;</operator> <operator pos:start="15:27" pos:end="15:27">!</operator><name pos:start="15:28" pos:end="15:41"><name pos:start="15:28" pos:end="15:28">s</name><operator pos:start="15:29" pos:end="15:30">-&gt;</operator><name pos:start="15:31" pos:end="15:41">parse_queue</name></name></expr>)</condition> <block pos:start="15:44" pos:end="181:5">{<block_content pos:start="17:9" pos:end="179:9">

        <decl_stmt pos:start="17:9" pos:end="17:21"><decl pos:start="17:9" pos:end="17:20"><type pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:16">AVStream</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:20">st</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:25"><decl pos:start="19:9" pos:end="19:24"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">AVPacket</name></type> <name pos:start="19:18" pos:end="19:24">cur_pkt</name></decl>;</decl_stmt>



        <comment type="block" pos:start="23:9" pos:end="23:30">/* read next packet */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:42"><expr pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:41"><name pos:start="25:15" pos:end="25:28">ff_read_packet</name><argument_list pos:start="25:29" pos:end="25:41">(<argument pos:start="25:30" pos:end="25:30"><expr pos:start="25:30" pos:end="25:30"><name pos:start="25:30" pos:end="25:30">s</name></expr></argument>, <argument pos:start="25:33" pos:end="25:40"><expr pos:start="25:33" pos:end="25:40"><operator pos:start="25:33" pos:end="25:33">&amp;</operator><name pos:start="25:34" pos:end="25:40">cur_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="51:9"><if pos:start="27:9" pos:end="51:9">if <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:15">ret</name> <operator pos:start="27:17" pos:end="27:17">&lt;</operator> <literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>)</condition> <block pos:start="27:22" pos:end="51:9">{<block_content pos:start="29:13" pos:end="49:18">

            <if_stmt pos:start="29:13" pos:end="31:27"><if pos:start="29:13" pos:end="31:27">if <condition pos:start="29:16" pos:end="29:39">(<expr pos:start="29:17" pos:end="29:38"><name pos:start="29:17" pos:end="29:19">ret</name> <operator pos:start="29:21" pos:end="29:22">==</operator> <call pos:start="29:24" pos:end="29:38"><name pos:start="29:24" pos:end="29:30">AVERROR</name><argument_list pos:start="29:31" pos:end="29:38">(<argument pos:start="29:32" pos:end="29:37"><expr pos:start="29:32" pos:end="29:37"><name pos:start="29:32" pos:end="29:37">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:17" pos:end="31:27"><block_content pos:start="31:17" pos:end="31:27">

                <return pos:start="31:17" pos:end="31:27">return <expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="33:13" pos:end="33:35">/* flush the parsers */</comment>

            <for pos:start="35:13" pos:end="43:13">for <control pos:start="35:17" pos:end="35:47">(<init pos:start="35:18" pos:end="35:23"><expr pos:start="35:18" pos:end="35:22"><name pos:start="35:18" pos:end="35:18">i</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <literal type="number" pos:start="35:22" pos:end="35:22">0</literal></expr>;</init> <condition pos:start="35:25" pos:end="35:42"><expr pos:start="35:25" pos:end="35:41"><name pos:start="35:25" pos:end="35:25">i</name> <operator pos:start="35:27" pos:end="35:27">&lt;</operator> <name pos:start="35:29" pos:end="35:41"><name pos:start="35:29" pos:end="35:29">s</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:41">nb_streams</name></name></expr>;</condition> <incr pos:start="35:44" pos:end="35:46"><expr pos:start="35:44" pos:end="35:46"><name pos:start="35:44" pos:end="35:44">i</name><operator pos:start="35:45" pos:end="35:46">++</operator></expr></incr>)</control> <block pos:start="35:49" pos:end="43:13">{<block_content pos:start="37:17" pos:end="41:53">

                <expr_stmt pos:start="37:17" pos:end="37:35"><expr pos:start="37:17" pos:end="37:34"><name pos:start="37:17" pos:end="37:18">st</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <name pos:start="37:22" pos:end="37:34"><name pos:start="37:22" pos:end="37:22">s</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:31">streams</name><index pos:start="37:32" pos:end="37:34">[<expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="39:17" pos:end="41:53"><if pos:start="39:17" pos:end="41:53">if <condition pos:start="39:20" pos:end="39:51">(<expr pos:start="39:21" pos:end="39:50"><name pos:start="39:21" pos:end="39:30"><name pos:start="39:21" pos:end="39:22">st</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:30">parser</name></name> <operator pos:start="39:32" pos:end="39:33">&amp;&amp;</operator> <name pos:start="39:35" pos:end="39:50"><name pos:start="39:35" pos:end="39:36">st</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:50">need_parsing</name></name></expr>)</condition><block type="pseudo" pos:start="41:21" pos:end="41:53"><block_content pos:start="41:21" pos:end="41:53">

                    <expr_stmt pos:start="41:21" pos:end="41:53"><expr pos:start="41:21" pos:end="41:52"><call pos:start="41:21" pos:end="41:52"><name pos:start="41:21" pos:end="41:32">parse_packet</name><argument_list pos:start="41:33" pos:end="41:52">(<argument pos:start="41:34" pos:end="41:34"><expr pos:start="41:34" pos:end="41:34"><name pos:start="41:34" pos:end="41:34">s</name></expr></argument>, <argument pos:start="41:37" pos:end="41:40"><expr pos:start="41:37" pos:end="41:40"><name pos:start="41:37" pos:end="41:40">NULL</name></expr></argument>, <argument pos:start="41:43" pos:end="41:51"><expr pos:start="41:43" pos:end="41:51"><name pos:start="41:43" pos:end="41:51"><name pos:start="41:43" pos:end="41:44">st</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:51">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <comment type="block" pos:start="45:13" pos:end="47:42">/* all remaining packets are now in parse_queue =&gt;

             * really terminate parsing */</comment>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:47"><expr pos:start="55:9" pos:end="55:46"><name pos:start="55:9" pos:end="55:10">st</name>  <operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:46"><name pos:start="55:15" pos:end="55:15">s</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:24">streams</name><index pos:start="55:25" pos:end="55:46">[<expr pos:start="55:26" pos:end="55:45"><name pos:start="55:26" pos:end="55:45"><name pos:start="55:26" pos:end="55:32">cur_pkt</name><operator pos:start="55:33" pos:end="55:33">.</operator><name pos:start="55:34" pos:end="55:45">stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="77:9"><if pos:start="59:9" pos:end="77:9">if <condition pos:start="59:12" pos:end="63:38">(<expr pos:start="59:13" pos:end="63:37"><name pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:19">cur_pkt</name><operator pos:start="59:20" pos:end="59:20">.</operator><name pos:start="59:21" pos:end="59:23">pts</name></name> <operator pos:start="59:25" pos:end="59:26">!=</operator> <name pos:start="59:28" pos:end="59:41">AV_NOPTS_VALUE</name> <operator pos:start="59:43" pos:end="59:44">&amp;&amp;</operator>

            <name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:19">cur_pkt</name><operator pos:start="61:20" pos:end="61:20">.</operator><name pos:start="61:21" pos:end="61:23">dts</name></name> <operator pos:start="61:25" pos:end="61:26">!=</operator> <name pos:start="61:28" pos:end="61:41">AV_NOPTS_VALUE</name> <operator pos:start="61:43" pos:end="61:44">&amp;&amp;</operator>

            <name pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:19">cur_pkt</name><operator pos:start="63:20" pos:end="63:20">.</operator><name pos:start="63:21" pos:end="63:23">pts</name></name> <operator pos:start="63:25" pos:end="63:25">&lt;</operator> <name pos:start="63:27" pos:end="63:37"><name pos:start="63:27" pos:end="63:33">cur_pkt</name><operator pos:start="63:34" pos:end="63:34">.</operator><name pos:start="63:35" pos:end="63:37">dts</name></name></expr>)</condition> <block pos:start="63:40" pos:end="77:9">{<block_content pos:start="65:13" pos:end="75:33">

            <expr_stmt pos:start="65:13" pos:end="75:33"><expr pos:start="65:13" pos:end="75:32"><call pos:start="65:13" pos:end="75:32"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="75:32">(<argument pos:start="65:20" pos:end="65:20"><expr pos:start="65:20" pos:end="65:20"><name pos:start="65:20" pos:end="65:20">s</name></expr></argument>, <argument pos:start="65:23" pos:end="65:36"><expr pos:start="65:23" pos:end="65:36"><name pos:start="65:23" pos:end="65:36">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:76"><expr pos:start="67:20" pos:end="67:76"><literal type="string" pos:start="67:20" pos:end="67:76">"Invalid timestamps stream=%d, pts=%s, dts=%s, size=%d\n"</literal></expr></argument>,

                   <argument pos:start="69:20" pos:end="69:39"><expr pos:start="69:20" pos:end="69:39"><name pos:start="69:20" pos:end="69:39"><name pos:start="69:20" pos:end="69:26">cur_pkt</name><operator pos:start="69:27" pos:end="69:27">.</operator><name pos:start="69:28" pos:end="69:39">stream_index</name></name></expr></argument>,

                   <argument pos:start="71:20" pos:end="71:41"><expr pos:start="71:20" pos:end="71:41"><call pos:start="71:20" pos:end="71:41"><name pos:start="71:20" pos:end="71:28">av_ts2str</name><argument_list pos:start="71:29" pos:end="71:41">(<argument pos:start="71:30" pos:end="71:40"><expr pos:start="71:30" pos:end="71:40"><name pos:start="71:30" pos:end="71:40"><name pos:start="71:30" pos:end="71:36">cur_pkt</name><operator pos:start="71:37" pos:end="71:37">.</operator><name pos:start="71:38" pos:end="71:40">pts</name></name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:41"><expr pos:start="73:20" pos:end="73:41"><call pos:start="73:20" pos:end="73:41"><name pos:start="73:20" pos:end="73:28">av_ts2str</name><argument_list pos:start="73:29" pos:end="73:41">(<argument pos:start="73:30" pos:end="73:40"><expr pos:start="73:30" pos:end="73:40"><name pos:start="73:30" pos:end="73:40"><name pos:start="73:30" pos:end="73:36">cur_pkt</name><operator pos:start="73:37" pos:end="73:37">.</operator><name pos:start="73:38" pos:end="73:40">dts</name></name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:31"><expr pos:start="75:20" pos:end="75:31"><name pos:start="75:20" pos:end="75:31"><name pos:start="75:20" pos:end="75:26">cur_pkt</name><operator pos:start="75:27" pos:end="75:27">.</operator><name pos:start="75:28" pos:end="75:31">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="91:66"><if pos:start="79:9" pos:end="91:66">if <condition pos:start="79:12" pos:end="79:36">(<expr pos:start="79:13" pos:end="79:35"><name pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:20">debug</name></name> <operator pos:start="79:22" pos:end="79:22">&amp;</operator> <name pos:start="79:24" pos:end="79:35">FF_FDEBUG_TS</name></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="91:66"><block_content pos:start="81:13" pos:end="91:66">

            <expr_stmt pos:start="81:13" pos:end="91:66"><expr pos:start="81:13" pos:end="91:65"><call pos:start="81:13" pos:end="91:65"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="91:65">(<argument pos:start="81:20" pos:end="81:20"><expr pos:start="81:20" pos:end="81:20"><name pos:start="81:20" pos:end="81:20">s</name></expr></argument>, <argument pos:start="81:23" pos:end="81:34"><expr pos:start="81:23" pos:end="81:34"><name pos:start="81:23" pos:end="81:34">AV_LOG_DEBUG</name></expr></argument>,

                   <argument pos:start="83:20" pos:end="83:95"><expr pos:start="83:20" pos:end="83:95"><literal type="string" pos:start="83:20" pos:end="83:95">"ff_read_packet stream=%d, pts=%s, dts=%s, size=%d, duration=%d, flags=%d\n"</literal></expr></argument>,

                   <argument pos:start="85:20" pos:end="85:39"><expr pos:start="85:20" pos:end="85:39"><name pos:start="85:20" pos:end="85:39"><name pos:start="85:20" pos:end="85:26">cur_pkt</name><operator pos:start="85:27" pos:end="85:27">.</operator><name pos:start="85:28" pos:end="85:39">stream_index</name></name></expr></argument>,

                   <argument pos:start="87:20" pos:end="87:41"><expr pos:start="87:20" pos:end="87:41"><call pos:start="87:20" pos:end="87:41"><name pos:start="87:20" pos:end="87:28">av_ts2str</name><argument_list pos:start="87:29" pos:end="87:41">(<argument pos:start="87:30" pos:end="87:40"><expr pos:start="87:30" pos:end="87:40"><name pos:start="87:30" pos:end="87:40"><name pos:start="87:30" pos:end="87:36">cur_pkt</name><operator pos:start="87:37" pos:end="87:37">.</operator><name pos:start="87:38" pos:end="87:40">pts</name></name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="89:20" pos:end="89:41"><expr pos:start="89:20" pos:end="89:41"><call pos:start="89:20" pos:end="89:41"><name pos:start="89:20" pos:end="89:28">av_ts2str</name><argument_list pos:start="89:29" pos:end="89:41">(<argument pos:start="89:30" pos:end="89:40"><expr pos:start="89:30" pos:end="89:40"><name pos:start="89:30" pos:end="89:40"><name pos:start="89:30" pos:end="89:36">cur_pkt</name><operator pos:start="89:37" pos:end="89:37">.</operator><name pos:start="89:38" pos:end="89:40">dts</name></name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="91:20" pos:end="91:31"><expr pos:start="91:20" pos:end="91:31"><name pos:start="91:20" pos:end="91:31"><name pos:start="91:20" pos:end="91:26">cur_pkt</name><operator pos:start="91:27" pos:end="91:27">.</operator><name pos:start="91:28" pos:end="91:31">size</name></name></expr></argument>, <argument pos:start="91:34" pos:end="91:49"><expr pos:start="91:34" pos:end="91:49"><name pos:start="91:34" pos:end="91:49"><name pos:start="91:34" pos:end="91:40">cur_pkt</name><operator pos:start="91:41" pos:end="91:41">.</operator><name pos:start="91:42" pos:end="91:49">duration</name></name></expr></argument>, <argument pos:start="91:52" pos:end="91:64"><expr pos:start="91:52" pos:end="91:64"><name pos:start="91:52" pos:end="91:64"><name pos:start="91:52" pos:end="91:58">cur_pkt</name><operator pos:start="91:59" pos:end="91:59">.</operator><name pos:start="91:60" pos:end="91:64">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="95:9" pos:end="123:9"><if pos:start="95:9" pos:end="123:9">if <condition pos:start="95:12" pos:end="95:80">(<expr pos:start="95:13" pos:end="95:79"><name pos:start="95:13" pos:end="95:28"><name pos:start="95:13" pos:end="95:14">st</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:28">need_parsing</name></name> <operator pos:start="95:30" pos:end="95:31">&amp;&amp;</operator> <operator pos:start="95:33" pos:end="95:33">!</operator><name pos:start="95:34" pos:end="95:43"><name pos:start="95:34" pos:end="95:35">st</name><operator pos:start="95:36" pos:end="95:37">-&gt;</operator><name pos:start="95:38" pos:end="95:43">parser</name></name> <operator pos:start="95:45" pos:end="95:46">&amp;&amp;</operator> <operator pos:start="95:48" pos:end="95:48">!</operator><operator pos:start="95:49" pos:end="95:49">(</operator><name pos:start="95:50" pos:end="95:57"><name pos:start="95:50" pos:end="95:50">s</name><operator pos:start="95:51" pos:end="95:52">-&gt;</operator><name pos:start="95:53" pos:end="95:57">flags</name></name> <operator pos:start="95:59" pos:end="95:59">&amp;</operator> <name pos:start="95:61" pos:end="95:78">AVFMT_FLAG_NOPARSE</name><operator pos:start="95:79" pos:end="95:79">)</operator></expr>)</condition> <block pos:start="95:82" pos:end="123:9">{<block_content pos:start="97:13" pos:end="121:62">

            <expr_stmt pos:start="97:13" pos:end="97:61"><expr pos:start="97:13" pos:end="97:60"><name pos:start="97:13" pos:end="97:22"><name pos:start="97:13" pos:end="97:14">st</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:22">parser</name></name> <operator pos:start="97:24" pos:end="97:24">=</operator> <call pos:start="97:26" pos:end="97:60"><name pos:start="97:26" pos:end="97:39">av_parser_init</name><argument_list pos:start="97:40" pos:end="97:60">(<argument pos:start="97:41" pos:end="97:59"><expr pos:start="97:41" pos:end="97:59"><name pos:start="97:41" pos:end="97:59"><name pos:start="97:41" pos:end="97:42">st</name><operator pos:start="97:43" pos:end="97:44">-&gt;</operator><name pos:start="97:45" pos:end="97:49">codec</name><operator pos:start="97:50" pos:end="97:51">-&gt;</operator><name pos:start="97:52" pos:end="97:59">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="121:62"><if pos:start="99:13" pos:end="111:13">if <condition pos:start="99:16" pos:end="99:28">(<expr pos:start="99:17" pos:end="99:27"><operator pos:start="99:17" pos:end="99:17">!</operator><name pos:start="99:18" pos:end="99:27"><name pos:start="99:18" pos:end="99:19">st</name><operator pos:start="99:20" pos:end="99:21">-&gt;</operator><name pos:start="99:22" pos:end="99:27">parser</name></name></expr>)</condition> <block pos:start="99:30" pos:end="111:13">{<block_content pos:start="101:17" pos:end="109:55">

                <expr_stmt pos:start="101:17" pos:end="105:62"><expr pos:start="101:17" pos:end="105:61"><call pos:start="101:17" pos:end="105:61"><name pos:start="101:17" pos:end="101:22">av_log</name><argument_list pos:start="101:23" pos:end="105:61">(<argument pos:start="101:24" pos:end="101:24"><expr pos:start="101:24" pos:end="101:24"><name pos:start="101:24" pos:end="101:24">s</name></expr></argument>, <argument pos:start="101:27" pos:end="101:40"><expr pos:start="101:27" pos:end="101:40"><name pos:start="101:27" pos:end="101:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="101:43" pos:end="103:63"><expr pos:start="101:43" pos:end="103:63"><literal type="string" pos:start="101:43" pos:end="101:71">"parser not found for codec "</literal>

                       <literal type="string" pos:start="103:24" pos:end="103:63">"%s, packets or times may be invalid.\n"</literal></expr></argument>,

                       <argument pos:start="105:24" pos:end="105:60"><expr pos:start="105:24" pos:end="105:60"><call pos:start="105:24" pos:end="105:60"><name pos:start="105:24" pos:end="105:39">avcodec_get_name</name><argument_list pos:start="105:40" pos:end="105:60">(<argument pos:start="105:41" pos:end="105:59"><expr pos:start="105:41" pos:end="105:59"><name pos:start="105:41" pos:end="105:59"><name pos:start="105:41" pos:end="105:42">st</name><operator pos:start="105:43" pos:end="105:44">-&gt;</operator><name pos:start="105:45" pos:end="105:49">codec</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:59">codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="107:17" pos:end="107:70">/* no parser available: just output the raw packets */</comment>

                <expr_stmt pos:start="109:17" pos:end="109:55"><expr pos:start="109:17" pos:end="109:54"><name pos:start="109:17" pos:end="109:32"><name pos:start="109:17" pos:end="109:18">st</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:32">need_parsing</name></name> <operator pos:start="109:34" pos:end="109:34">=</operator> <name pos:start="109:36" pos:end="109:54">AVSTREAM_PARSE_NONE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="111:15" pos:end="113:65">else if <condition pos:start="111:23" pos:end="111:66">(<expr pos:start="111:24" pos:end="111:65"><name pos:start="111:24" pos:end="111:39"><name pos:start="111:24" pos:end="111:25">st</name><operator pos:start="111:26" pos:end="111:27">-&gt;</operator><name pos:start="111:28" pos:end="111:39">need_parsing</name></name> <operator pos:start="111:41" pos:end="111:42">==</operator> <name pos:start="111:44" pos:end="111:65">AVSTREAM_PARSE_HEADERS</name></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="113:65"><block_content pos:start="113:17" pos:end="113:65">

                <expr_stmt pos:start="113:17" pos:end="113:65"><expr pos:start="113:17" pos:end="113:64"><name pos:start="113:17" pos:end="113:33"><name pos:start="113:17" pos:end="113:18">st</name><operator pos:start="113:19" pos:end="113:20">-&gt;</operator><name pos:start="113:21" pos:end="113:26">parser</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:33">flags</name></name> <operator pos:start="113:35" pos:end="113:36">|=</operator> <name pos:start="113:38" pos:end="113:64">PARSER_FLAG_COMPLETE_FRAMES</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="115:13" pos:end="117:54">else if <condition pos:start="115:21" pos:end="115:66">(<expr pos:start="115:22" pos:end="115:65"><name pos:start="115:22" pos:end="115:37"><name pos:start="115:22" pos:end="115:23">st</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:37">need_parsing</name></name> <operator pos:start="115:39" pos:end="115:40">==</operator> <name pos:start="115:42" pos:end="115:65">AVSTREAM_PARSE_FULL_ONCE</name></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="117:54"><block_content pos:start="117:17" pos:end="117:54">

                <expr_stmt pos:start="117:17" pos:end="117:54"><expr pos:start="117:17" pos:end="117:53"><name pos:start="117:17" pos:end="117:33"><name pos:start="117:17" pos:end="117:18">st</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:26">parser</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:33">flags</name></name> <operator pos:start="117:35" pos:end="117:36">|=</operator> <name pos:start="117:38" pos:end="117:53">PARSER_FLAG_ONCE</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="119:13" pos:end="121:62">else if <condition pos:start="119:21" pos:end="119:65">(<expr pos:start="119:22" pos:end="119:64"><name pos:start="119:22" pos:end="119:37"><name pos:start="119:22" pos:end="119:23">st</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:37">need_parsing</name></name> <operator pos:start="119:39" pos:end="119:40">==</operator> <name pos:start="119:42" pos:end="119:64">AVSTREAM_PARSE_FULL_RAW</name></expr>)</condition><block type="pseudo" pos:start="121:17" pos:end="121:62"><block_content pos:start="121:17" pos:end="121:62">

                <expr_stmt pos:start="121:17" pos:end="121:62"><expr pos:start="121:17" pos:end="121:61"><name pos:start="121:17" pos:end="121:33"><name pos:start="121:17" pos:end="121:18">st</name><operator pos:start="121:19" pos:end="121:20">-&gt;</operator><name pos:start="121:21" pos:end="121:26">parser</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:33">flags</name></name> <operator pos:start="121:35" pos:end="121:36">|=</operator> <name pos:start="121:38" pos:end="121:61">PARSER_FLAG_USE_CODEC_TS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="127:9" pos:end="161:9"><if pos:start="127:9" pos:end="149:9">if <condition pos:start="127:12" pos:end="127:45">(<expr pos:start="127:13" pos:end="127:44"><operator pos:start="127:13" pos:end="127:13">!</operator><name pos:start="127:14" pos:end="127:29"><name pos:start="127:14" pos:end="127:15">st</name><operator pos:start="127:16" pos:end="127:17">-&gt;</operator><name pos:start="127:18" pos:end="127:29">need_parsing</name></name> <operator pos:start="127:31" pos:end="127:32">||</operator> <operator pos:start="127:34" pos:end="127:34">!</operator><name pos:start="127:35" pos:end="127:44"><name pos:start="127:35" pos:end="127:36">st</name><operator pos:start="127:37" pos:end="127:38">-&gt;</operator><name pos:start="127:39" pos:end="127:44">parser</name></name></expr>)</condition> <block pos:start="127:47" pos:end="149:9">{<block_content pos:start="131:13" pos:end="147:27">

            <comment type="block" pos:start="129:13" pos:end="129:68">/* no parsing needed: we just output the packet as is */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:27"><expr pos:start="131:13" pos:end="131:26"><operator pos:start="131:13" pos:end="131:13">*</operator><name pos:start="131:14" pos:end="131:16">pkt</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <name pos:start="131:20" pos:end="131:26">cur_pkt</name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:49"><expr pos:start="133:13" pos:end="133:48"><call pos:start="133:13" pos:end="133:48"><name pos:start="133:13" pos:end="133:30">compute_pkt_fields</name><argument_list pos:start="133:31" pos:end="133:48">(<argument pos:start="133:32" pos:end="133:32"><expr pos:start="133:32" pos:end="133:32"><name pos:start="133:32" pos:end="133:32">s</name></expr></argument>, <argument pos:start="133:35" pos:end="133:36"><expr pos:start="133:35" pos:end="133:36"><name pos:start="133:35" pos:end="133:36">st</name></expr></argument>, <argument pos:start="133:39" pos:end="133:42"><expr pos:start="133:39" pos:end="133:42"><name pos:start="133:39" pos:end="133:42">NULL</name></expr></argument>, <argument pos:start="133:45" pos:end="133:47"><expr pos:start="133:45" pos:end="133:47"><name pos:start="133:45" pos:end="133:47">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="145:13"><if pos:start="135:13" pos:end="145:13">if <condition pos:start="135:16" pos:end="137:77">(<expr pos:start="135:17" pos:end="137:76"><operator pos:start="135:17" pos:end="135:17">(</operator><name pos:start="135:18" pos:end="135:34"><name pos:start="135:18" pos:end="135:18">s</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:27">iformat</name><operator pos:start="135:28" pos:end="135:29">-&gt;</operator><name pos:start="135:30" pos:end="135:34">flags</name></name> <operator pos:start="135:36" pos:end="135:36">&amp;</operator> <name pos:start="135:38" pos:end="135:56">AVFMT_GENERIC_INDEX</name><operator pos:start="135:57" pos:end="135:57">)</operator> <operator pos:start="135:59" pos:end="135:60">&amp;&amp;</operator>

                <operator pos:start="137:17" pos:end="137:17">(</operator><name pos:start="137:18" pos:end="137:27"><name pos:start="137:18" pos:end="137:20">pkt</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:27">flags</name></name> <operator pos:start="137:29" pos:end="137:29">&amp;</operator> <name pos:start="137:31" pos:end="137:45">AV_PKT_FLAG_KEY</name><operator pos:start="137:46" pos:end="137:46">)</operator> <operator pos:start="137:48" pos:end="137:49">&amp;&amp;</operator> <name pos:start="137:51" pos:end="137:58"><name pos:start="137:51" pos:end="137:53">pkt</name><operator pos:start="137:54" pos:end="137:55">-&gt;</operator><name pos:start="137:56" pos:end="137:58">dts</name></name> <operator pos:start="137:60" pos:end="137:61">!=</operator> <name pos:start="137:63" pos:end="137:76">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="137:79" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:59">

                <expr_stmt pos:start="139:17" pos:end="139:46"><expr pos:start="139:17" pos:end="139:45"><call pos:start="139:17" pos:end="139:45"><name pos:start="139:17" pos:end="139:31">ff_reduce_index</name><argument_list pos:start="139:32" pos:end="139:45">(<argument pos:start="139:33" pos:end="139:33"><expr pos:start="139:33" pos:end="139:33"><name pos:start="139:33" pos:end="139:33">s</name></expr></argument>, <argument pos:start="139:36" pos:end="139:44"><expr pos:start="139:36" pos:end="139:44"><name pos:start="139:36" pos:end="139:44"><name pos:start="139:36" pos:end="139:37">st</name><operator pos:start="139:38" pos:end="139:39">-&gt;</operator><name pos:start="139:40" pos:end="139:44">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="143:59"><expr pos:start="141:17" pos:end="143:58"><call pos:start="141:17" pos:end="143:58"><name pos:start="141:17" pos:end="141:34">av_add_index_entry</name><argument_list pos:start="141:35" pos:end="143:58">(<argument pos:start="141:36" pos:end="141:37"><expr pos:start="141:36" pos:end="141:37"><name pos:start="141:36" pos:end="141:37">st</name></expr></argument>, <argument pos:start="141:40" pos:end="141:47"><expr pos:start="141:40" pos:end="141:47"><name pos:start="141:40" pos:end="141:47"><name pos:start="141:40" pos:end="141:42">pkt</name><operator pos:start="141:43" pos:end="141:44">-&gt;</operator><name pos:start="141:45" pos:end="141:47">pos</name></name></expr></argument>, <argument pos:start="141:50" pos:end="141:57"><expr pos:start="141:50" pos:end="141:57"><name pos:start="141:50" pos:end="141:57"><name pos:start="141:50" pos:end="141:52">pkt</name><operator pos:start="141:53" pos:end="141:54">-&gt;</operator><name pos:start="141:55" pos:end="141:57">dts</name></name></expr></argument>,

                                   <argument pos:start="143:36" pos:end="143:36"><expr pos:start="143:36" pos:end="143:36"><literal type="number" pos:start="143:36" pos:end="143:36">0</literal></expr></argument>, <argument pos:start="143:39" pos:end="143:39"><expr pos:start="143:39" pos:end="143:39"><literal type="number" pos:start="143:39" pos:end="143:39">0</literal></expr></argument>, <argument pos:start="143:42" pos:end="143:57"><expr pos:start="143:42" pos:end="143:57"><name pos:start="143:42" pos:end="143:57">AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:27"><expr pos:start="147:13" pos:end="147:26"><name pos:start="147:13" pos:end="147:22">got_packet</name> <operator pos:start="147:24" pos:end="147:24">=</operator> <literal type="number" pos:start="147:26" pos:end="147:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="149:11" pos:end="155:9">else if <condition pos:start="149:19" pos:end="149:47">(<expr pos:start="149:20" pos:end="149:46"><name pos:start="149:20" pos:end="149:30"><name pos:start="149:20" pos:end="149:21">st</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:30">discard</name></name> <operator pos:start="149:32" pos:end="149:32">&lt;</operator> <name pos:start="149:34" pos:end="149:46">AVDISCARD_ALL</name></expr>)</condition> <block pos:start="149:49" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:27">

            <if_stmt pos:start="151:13" pos:end="153:27"><if pos:start="151:13" pos:end="153:27">if <condition pos:start="151:16" pos:end="151:76">(<expr pos:start="151:17" pos:end="151:75"><operator pos:start="151:17" pos:end="151:17">(</operator><name pos:start="151:18" pos:end="151:20">ret</name> <operator pos:start="151:22" pos:end="151:22">=</operator> <call pos:start="151:24" pos:end="151:70"><name pos:start="151:24" pos:end="151:35">parse_packet</name><argument_list pos:start="151:36" pos:end="151:70">(<argument pos:start="151:37" pos:end="151:37"><expr pos:start="151:37" pos:end="151:37"><name pos:start="151:37" pos:end="151:37">s</name></expr></argument>, <argument pos:start="151:40" pos:end="151:47"><expr pos:start="151:40" pos:end="151:47"><operator pos:start="151:40" pos:end="151:40">&amp;</operator><name pos:start="151:41" pos:end="151:47">cur_pkt</name></expr></argument>, <argument pos:start="151:50" pos:end="151:69"><expr pos:start="151:50" pos:end="151:69"><name pos:start="151:50" pos:end="151:69"><name pos:start="151:50" pos:end="151:56">cur_pkt</name><operator pos:start="151:57" pos:end="151:57">.</operator><name pos:start="151:58" pos:end="151:69">stream_index</name></name></expr></argument>)</argument_list></call><operator pos:start="151:71" pos:end="151:71">)</operator> <operator pos:start="151:73" pos:end="151:73">&lt;</operator> <literal type="number" pos:start="151:75" pos:end="151:75">0</literal></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:27"><block_content pos:start="153:17" pos:end="153:27">

                <return pos:start="153:17" pos:end="153:27">return <expr pos:start="153:24" pos:end="153:26"><name pos:start="153:24" pos:end="153:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="155:11" pos:end="161:9">else <block pos:start="155:16" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:37">

            <comment type="block" pos:start="157:13" pos:end="157:29">/* free packet */</comment>

            <expr_stmt pos:start="159:13" pos:end="159:37"><expr pos:start="159:13" pos:end="159:36"><call pos:start="159:13" pos:end="159:36"><name pos:start="159:13" pos:end="159:26">av_free_packet</name><argument_list pos:start="159:27" pos:end="159:36">(<argument pos:start="159:28" pos:end="159:35"><expr pos:start="159:28" pos:end="159:35"><operator pos:start="159:28" pos:end="159:28">&amp;</operator><name pos:start="159:29" pos:end="159:35">cur_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="163:9" pos:end="165:37"><if pos:start="163:9" pos:end="165:37">if <condition pos:start="163:12" pos:end="163:41">(<expr pos:start="163:13" pos:end="163:40"><name pos:start="163:13" pos:end="163:22"><name pos:start="163:13" pos:end="163:15">pkt</name><operator pos:start="163:16" pos:end="163:17">-&gt;</operator><name pos:start="163:18" pos:end="163:22">flags</name></name> <operator pos:start="163:24" pos:end="163:24">&amp;</operator> <name pos:start="163:26" pos:end="163:40">AV_PKT_FLAG_KEY</name></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:37"><block_content pos:start="165:13" pos:end="165:37">

            <expr_stmt pos:start="165:13" pos:end="165:37"><expr pos:start="165:13" pos:end="165:36"><name pos:start="165:13" pos:end="165:32"><name pos:start="165:13" pos:end="165:14">st</name><operator pos:start="165:15" pos:end="165:16">-&gt;</operator><name pos:start="165:17" pos:end="165:32">skip_to_keyframe</name></name> <operator pos:start="165:34" pos:end="165:34">=</operator> <literal type="number" pos:start="165:36" pos:end="165:36">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="167:9" pos:end="179:9"><if pos:start="167:9" pos:end="179:9">if <condition pos:start="167:12" pos:end="167:33">(<expr pos:start="167:13" pos:end="167:32"><name pos:start="167:13" pos:end="167:32"><name pos:start="167:13" pos:end="167:14">st</name><operator pos:start="167:15" pos:end="167:16">-&gt;</operator><name pos:start="167:17" pos:end="167:32">skip_to_keyframe</name></name></expr>)</condition> <block pos:start="167:35" pos:end="179:9">{<block_content pos:start="169:13" pos:end="177:27">

            <expr_stmt pos:start="169:13" pos:end="169:37"><expr pos:start="169:13" pos:end="169:36"><call pos:start="169:13" pos:end="169:36"><name pos:start="169:13" pos:end="169:26">av_free_packet</name><argument_list pos:start="169:27" pos:end="169:36">(<argument pos:start="169:28" pos:end="169:35"><expr pos:start="169:28" pos:end="169:35"><operator pos:start="169:28" pos:end="169:28">&amp;</operator><name pos:start="169:29" pos:end="169:35">cur_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="171:13" pos:end="175:13"><if pos:start="171:13" pos:end="175:13">if <condition pos:start="171:16" pos:end="171:27">(<expr pos:start="171:17" pos:end="171:26"><name pos:start="171:17" pos:end="171:26">got_packet</name></expr>)</condition> <block pos:start="171:29" pos:end="175:13">{<block_content pos:start="173:17" pos:end="173:31">

                <expr_stmt pos:start="173:17" pos:end="173:31"><expr pos:start="173:17" pos:end="173:30"><operator pos:start="173:17" pos:end="173:17">*</operator><name pos:start="173:18" pos:end="173:20">pkt</name> <operator pos:start="173:22" pos:end="173:22">=</operator> <name pos:start="173:24" pos:end="173:30">cur_pkt</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:27"><expr pos:start="177:13" pos:end="177:26"><name pos:start="177:13" pos:end="177:22">got_packet</name> <operator pos:start="177:24" pos:end="177:24">=</operator> <literal type="number" pos:start="177:26" pos:end="177:26">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="185:5" pos:end="187:81"><if pos:start="185:5" pos:end="187:81">if <condition pos:start="185:8" pos:end="185:38">(<expr pos:start="185:9" pos:end="185:37"><operator pos:start="185:9" pos:end="185:9">!</operator><name pos:start="185:10" pos:end="185:19">got_packet</name> <operator pos:start="185:21" pos:end="185:22">&amp;&amp;</operator> <name pos:start="185:24" pos:end="185:37"><name pos:start="185:24" pos:end="185:24">s</name><operator pos:start="185:25" pos:end="185:26">-&gt;</operator><name pos:start="185:27" pos:end="185:37">parse_queue</name></name></expr>)</condition><block type="pseudo" pos:start="187:9" pos:end="187:81"><block_content pos:start="187:9" pos:end="187:81">

        <expr_stmt pos:start="187:9" pos:end="187:81"><expr pos:start="187:9" pos:end="187:80"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:80"><name pos:start="187:15" pos:end="187:37">read_from_packet_buffer</name><argument_list pos:start="187:38" pos:end="187:80">(<argument pos:start="187:39" pos:end="187:53"><expr pos:start="187:39" pos:end="187:53"><operator pos:start="187:39" pos:end="187:39">&amp;</operator><name pos:start="187:40" pos:end="187:53"><name pos:start="187:40" pos:end="187:40">s</name><operator pos:start="187:41" pos:end="187:42">-&gt;</operator><name pos:start="187:43" pos:end="187:53">parse_queue</name></name></expr></argument>, <argument pos:start="187:56" pos:end="187:74"><expr pos:start="187:56" pos:end="187:74"><operator pos:start="187:56" pos:end="187:56">&amp;</operator><name pos:start="187:57" pos:end="187:74"><name pos:start="187:57" pos:end="187:57">s</name><operator pos:start="187:58" pos:end="187:59">-&gt;</operator><name pos:start="187:60" pos:end="187:74">parse_queue_end</name></name></expr></argument>, <argument pos:start="187:77" pos:end="187:79"><expr pos:start="187:77" pos:end="187:79"><name pos:start="187:77" pos:end="187:79">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="275:5"><if pos:start="191:5" pos:end="275:5">if <condition pos:start="191:8" pos:end="191:17">(<expr pos:start="191:9" pos:end="191:16"><name pos:start="191:9" pos:end="191:11">ret</name> <operator pos:start="191:13" pos:end="191:14">&gt;=</operator> <literal type="number" pos:start="191:16" pos:end="191:16">0</literal></expr>)</condition> <block pos:start="191:19" pos:end="275:5">{<block_content pos:start="193:9" pos:end="273:43">

        <decl_stmt pos:start="193:9" pos:end="193:53"><decl pos:start="193:9" pos:end="193:52"><type pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:16">AVStream</name> <modifier pos:start="193:18" pos:end="193:18">*</modifier></type><name pos:start="193:19" pos:end="193:20">st</name> <init pos:start="193:22" pos:end="193:52">= <expr pos:start="193:24" pos:end="193:52"><name pos:start="193:24" pos:end="193:52"><name pos:start="193:24" pos:end="193:24">s</name><operator pos:start="193:25" pos:end="193:26">-&gt;</operator><name pos:start="193:27" pos:end="193:33">streams</name><index pos:start="193:34" pos:end="193:52">[<expr pos:start="193:35" pos:end="193:51"><name pos:start="193:35" pos:end="193:51"><name pos:start="193:35" pos:end="193:37">pkt</name><operator pos:start="193:38" pos:end="193:39">-&gt;</operator><name pos:start="193:40" pos:end="193:51">stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="195:9" pos:end="195:32"><decl pos:start="195:9" pos:end="195:31"><type pos:start="195:9" pos:end="195:11"><name pos:start="195:9" pos:end="195:11">int</name></type> <name pos:start="195:13" pos:end="195:27">discard_padding</name> <init pos:start="195:29" pos:end="195:31">= <expr pos:start="195:31" pos:end="195:31"><literal type="number" pos:start="195:31" pos:end="195:31">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="197:9" pos:end="211:9"><if pos:start="197:9" pos:end="211:9">if <condition pos:start="197:12" pos:end="197:65">(<expr pos:start="197:13" pos:end="197:64"><name pos:start="197:13" pos:end="197:34"><name pos:start="197:13" pos:end="197:14">st</name><operator pos:start="197:15" pos:end="197:16">-&gt;</operator><name pos:start="197:17" pos:end="197:34">end_discard_sample</name></name> <operator pos:start="197:36" pos:end="197:37">&amp;&amp;</operator> <name pos:start="197:39" pos:end="197:46"><name pos:start="197:39" pos:end="197:41">pkt</name><operator pos:start="197:42" pos:end="197:43">-&gt;</operator><name pos:start="197:44" pos:end="197:46">pts</name></name> <operator pos:start="197:48" pos:end="197:49">!=</operator> <name pos:start="197:51" pos:end="197:64">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="197:67" pos:end="211:9">{<block_content pos:start="199:13" pos:end="209:87">

            <decl_stmt pos:start="199:13" pos:end="199:84"><decl pos:start="199:13" pos:end="199:83"><type pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:19">int64_t</name></type> <name pos:start="199:21" pos:end="199:23">pts</name> <init pos:start="199:25" pos:end="199:83">= <expr pos:start="199:27" pos:end="199:83"><name pos:start="199:27" pos:end="199:34"><name pos:start="199:27" pos:end="199:29">pkt</name><operator pos:start="199:30" pos:end="199:31">-&gt;</operator><name pos:start="199:32" pos:end="199:34">pts</name></name> <operator pos:start="199:36" pos:end="199:36">-</operator> <operator pos:start="199:38" pos:end="199:38">(</operator><ternary pos:start="199:39" pos:end="199:82"><condition pos:start="199:39" pos:end="199:61"><expr pos:start="199:39" pos:end="199:59"><call pos:start="199:39" pos:end="199:59"><name pos:start="199:39" pos:end="199:49">is_relative</name><argument_list pos:start="199:50" pos:end="199:59">(<argument pos:start="199:51" pos:end="199:58"><expr pos:start="199:51" pos:end="199:58"><name pos:start="199:51" pos:end="199:58"><name pos:start="199:51" pos:end="199:53">pkt</name><operator pos:start="199:54" pos:end="199:55">-&gt;</operator><name pos:start="199:56" pos:end="199:58">pts</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="199:63" pos:end="199:78"> <expr pos:start="199:63" pos:end="199:78"><name pos:start="199:63" pos:end="199:78">RELATIVE_TS_BASE</name></expr> </then><else pos:start="199:80" pos:end="199:82">: <expr pos:start="199:82" pos:end="199:82"><literal type="number" pos:start="199:82" pos:end="199:82">0</literal></expr></else></ternary><operator pos:start="199:83" pos:end="199:83">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="201:13" pos:end="201:52"><decl pos:start="201:13" pos:end="201:51"><type pos:start="201:13" pos:end="201:19"><name pos:start="201:13" pos:end="201:19">int64_t</name></type> <name pos:start="201:21" pos:end="201:26">sample</name> <init pos:start="201:28" pos:end="201:51">= <expr pos:start="201:30" pos:end="201:51"><call pos:start="201:30" pos:end="201:51"><name pos:start="201:30" pos:end="201:42">ts_to_samples</name><argument_list pos:start="201:43" pos:end="201:51">(<argument pos:start="201:44" pos:end="201:45"><expr pos:start="201:44" pos:end="201:45"><name pos:start="201:44" pos:end="201:45">st</name></expr></argument>, <argument pos:start="201:48" pos:end="201:50"><expr pos:start="201:48" pos:end="201:50"><name pos:start="201:48" pos:end="201:50">pts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="203:13" pos:end="203:60"><decl pos:start="203:13" pos:end="203:59"><type pos:start="203:13" pos:end="203:15"><name pos:start="203:13" pos:end="203:15">int</name></type> <name pos:start="203:17" pos:end="203:24">duration</name> <init pos:start="203:26" pos:end="203:59">= <expr pos:start="203:28" pos:end="203:59"><call pos:start="203:28" pos:end="203:59"><name pos:start="203:28" pos:end="203:40">ts_to_samples</name><argument_list pos:start="203:41" pos:end="203:59">(<argument pos:start="203:42" pos:end="203:43"><expr pos:start="203:42" pos:end="203:43"><name pos:start="203:42" pos:end="203:43">st</name></expr></argument>, <argument pos:start="203:46" pos:end="203:58"><expr pos:start="203:46" pos:end="203:58"><name pos:start="203:46" pos:end="203:58"><name pos:start="203:46" pos:end="203:48">pkt</name><operator pos:start="203:49" pos:end="203:50">-&gt;</operator><name pos:start="203:51" pos:end="203:58">duration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="205:13" pos:end="205:51"><decl pos:start="205:13" pos:end="205:50"><type pos:start="205:13" pos:end="205:19"><name pos:start="205:13" pos:end="205:19">int64_t</name></type> <name pos:start="205:21" pos:end="205:30">end_sample</name> <init pos:start="205:32" pos:end="205:50">= <expr pos:start="205:34" pos:end="205:50"><name pos:start="205:34" pos:end="205:39">sample</name> <operator pos:start="205:41" pos:end="205:41">+</operator> <name pos:start="205:43" pos:end="205:50">duration</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="207:13" pos:end="209:87"><if pos:start="207:13" pos:end="209:87">if <condition pos:start="207:16" pos:end="207:69">(<expr pos:start="207:17" pos:end="207:68"><name pos:start="207:17" pos:end="207:24">duration</name> <operator pos:start="207:26" pos:end="207:26">&gt;</operator> <literal type="number" pos:start="207:28" pos:end="207:28">0</literal> <operator pos:start="207:30" pos:end="207:31">&amp;&amp;</operator> <name pos:start="207:33" pos:end="207:42">end_sample</name> <operator pos:start="207:44" pos:end="207:45">&gt;=</operator> <name pos:start="207:47" pos:end="207:68"><name pos:start="207:47" pos:end="207:48">st</name><operator pos:start="207:49" pos:end="207:50">-&gt;</operator><name pos:start="207:51" pos:end="207:68">end_discard_sample</name></name></expr>)</condition><block type="pseudo" pos:start="209:17" pos:end="209:87"><block_content pos:start="209:17" pos:end="209:87">

                <expr_stmt pos:start="209:17" pos:end="209:87"><expr pos:start="209:17" pos:end="209:86"><name pos:start="209:17" pos:end="209:31">discard_padding</name> <operator pos:start="209:33" pos:end="209:33">=</operator> <call pos:start="209:35" pos:end="209:86"><name pos:start="209:35" pos:end="209:39">FFMIN</name><argument_list pos:start="209:40" pos:end="209:86">(<argument pos:start="209:41" pos:end="209:75"><expr pos:start="209:41" pos:end="209:75"><name pos:start="209:41" pos:end="209:50">end_sample</name> <operator pos:start="209:52" pos:end="209:52">-</operator> <name pos:start="209:54" pos:end="209:75"><name pos:start="209:54" pos:end="209:55">st</name><operator pos:start="209:56" pos:end="209:57">-&gt;</operator><name pos:start="209:58" pos:end="209:75">end_discard_sample</name></name></expr></argument>, <argument pos:start="209:78" pos:end="209:85"><expr pos:start="209:78" pos:end="209:85"><name pos:start="209:78" pos:end="209:85">duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="213:9" pos:end="229:9"><if pos:start="213:9" pos:end="229:9">if <condition pos:start="213:12" pos:end="213:48">(<expr pos:start="213:13" pos:end="213:47"><name pos:start="213:13" pos:end="213:28"><name pos:start="213:13" pos:end="213:14">st</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:28">skip_samples</name></name> <operator pos:start="213:30" pos:end="213:31">||</operator> <name pos:start="213:33" pos:end="213:47">discard_padding</name></expr>)</condition> <block pos:start="213:50" pos:end="229:9">{<block_content pos:start="215:13" pos:end="227:33">

            <decl_stmt pos:start="215:13" pos:end="215:84"><decl pos:start="215:13" pos:end="215:83"><type pos:start="215:13" pos:end="215:21"><name pos:start="215:13" pos:end="215:19">uint8_t</name> <modifier pos:start="215:21" pos:end="215:21">*</modifier></type><name pos:start="215:22" pos:end="215:22">p</name> <init pos:start="215:24" pos:end="215:83">= <expr pos:start="215:26" pos:end="215:83"><call pos:start="215:26" pos:end="215:83"><name pos:start="215:26" pos:end="215:48">av_packet_new_side_data</name><argument_list pos:start="215:49" pos:end="215:83">(<argument pos:start="215:50" pos:end="215:52"><expr pos:start="215:50" pos:end="215:52"><name pos:start="215:50" pos:end="215:52">pkt</name></expr></argument>, <argument pos:start="215:55" pos:end="215:78"><expr pos:start="215:55" pos:end="215:78"><name pos:start="215:55" pos:end="215:78">AV_PKT_DATA_SKIP_SAMPLES</name></expr></argument>, <argument pos:start="215:81" pos:end="215:82"><expr pos:start="215:81" pos:end="215:82"><literal type="number" pos:start="215:81" pos:end="215:82">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="217:13" pos:end="225:13"><if pos:start="217:13" pos:end="225:13">if <condition pos:start="217:16" pos:end="217:18">(<expr pos:start="217:17" pos:end="217:17"><name pos:start="217:17" pos:end="217:17">p</name></expr>)</condition> <block pos:start="217:20" pos:end="225:13">{<block_content pos:start="219:17" pos:end="223:89">

                <expr_stmt pos:start="219:17" pos:end="219:45"><expr pos:start="219:17" pos:end="219:44"><call pos:start="219:17" pos:end="219:44"><name pos:start="219:17" pos:end="219:23">AV_WL32</name><argument_list pos:start="219:24" pos:end="219:44">(<argument pos:start="219:25" pos:end="219:25"><expr pos:start="219:25" pos:end="219:25"><name pos:start="219:25" pos:end="219:25">p</name></expr></argument>, <argument pos:start="219:28" pos:end="219:43"><expr pos:start="219:28" pos:end="219:43"><name pos:start="219:28" pos:end="219:43"><name pos:start="219:28" pos:end="219:29">st</name><operator pos:start="219:30" pos:end="219:31">-&gt;</operator><name pos:start="219:32" pos:end="219:43">skip_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:48"><expr pos:start="221:17" pos:end="221:47"><call pos:start="221:17" pos:end="221:47"><name pos:start="221:17" pos:end="221:23">AV_WL32</name><argument_list pos:start="221:24" pos:end="221:47">(<argument pos:start="221:25" pos:end="221:29"><expr pos:start="221:25" pos:end="221:29"><name pos:start="221:25" pos:end="221:25">p</name> <operator pos:start="221:27" pos:end="221:27">+</operator> <literal type="number" pos:start="221:29" pos:end="221:29">4</literal></expr></argument>, <argument pos:start="221:32" pos:end="221:46"><expr pos:start="221:32" pos:end="221:46"><name pos:start="221:32" pos:end="221:46">discard_padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:89"><expr pos:start="223:17" pos:end="223:88"><call pos:start="223:17" pos:end="223:88"><name pos:start="223:17" pos:end="223:22">av_log</name><argument_list pos:start="223:23" pos:end="223:88">(<argument pos:start="223:24" pos:end="223:24"><expr pos:start="223:24" pos:end="223:24"><name pos:start="223:24" pos:end="223:24">s</name></expr></argument>, <argument pos:start="223:27" pos:end="223:38"><expr pos:start="223:27" pos:end="223:38"><name pos:start="223:27" pos:end="223:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="223:41" pos:end="223:69"><expr pos:start="223:41" pos:end="223:69"><literal type="string" pos:start="223:41" pos:end="223:69">"demuxer injecting skip %d\n"</literal></expr></argument>, <argument pos:start="223:72" pos:end="223:87"><expr pos:start="223:72" pos:end="223:87"><name pos:start="223:72" pos:end="223:87"><name pos:start="223:72" pos:end="223:73">st</name><operator pos:start="223:74" pos:end="223:75">-&gt;</operator><name pos:start="223:76" pos:end="223:87">skip_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:33"><expr pos:start="227:13" pos:end="227:32"><name pos:start="227:13" pos:end="227:28"><name pos:start="227:13" pos:end="227:14">st</name><operator pos:start="227:15" pos:end="227:16">-&gt;</operator><name pos:start="227:17" pos:end="227:28">skip_samples</name></name> <operator pos:start="227:30" pos:end="227:30">=</operator> <literal type="number" pos:start="227:32" pos:end="227:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="233:9" pos:end="267:9"><if pos:start="233:9" pos:end="267:9">if <condition pos:start="233:12" pos:end="233:40">(<expr pos:start="233:13" pos:end="233:39"><name pos:start="233:13" pos:end="233:39"><name pos:start="233:13" pos:end="233:14">st</name><operator pos:start="233:15" pos:end="233:16">-&gt;</operator><name pos:start="233:17" pos:end="233:39">inject_global_side_data</name></name></expr>)</condition> <block pos:start="233:42" pos:end="267:9">{<block_content pos:start="235:13" pos:end="265:44">

            <for pos:start="235:13" pos:end="263:13">for <control pos:start="235:17" pos:end="235:50">(<init pos:start="235:18" pos:end="235:23"><expr pos:start="235:18" pos:end="235:22"><name pos:start="235:18" pos:end="235:18">i</name> <operator pos:start="235:20" pos:end="235:20">=</operator> <literal type="number" pos:start="235:22" pos:end="235:22">0</literal></expr>;</init> <condition pos:start="235:25" pos:end="235:45"><expr pos:start="235:25" pos:end="235:44"><name pos:start="235:25" pos:end="235:25">i</name> <operator pos:start="235:27" pos:end="235:27">&lt;</operator> <name pos:start="235:29" pos:end="235:44"><name pos:start="235:29" pos:end="235:30">st</name><operator pos:start="235:31" pos:end="235:32">-&gt;</operator><name pos:start="235:33" pos:end="235:44">nb_side_data</name></name></expr>;</condition> <incr pos:start="235:47" pos:end="235:49"><expr pos:start="235:47" pos:end="235:49"><name pos:start="235:47" pos:end="235:47">i</name><operator pos:start="235:48" pos:end="235:49">++</operator></expr></incr>)</control> <block pos:start="235:52" pos:end="263:13">{<block_content pos:start="237:17" pos:end="261:61">

                <decl_stmt pos:start="237:17" pos:end="237:61"><decl pos:start="237:17" pos:end="237:60"><type pos:start="237:17" pos:end="237:34"><name pos:start="237:17" pos:end="237:32">AVPacketSideData</name> <modifier pos:start="237:34" pos:end="237:34">*</modifier></type><name pos:start="237:35" pos:end="237:40">src_sd</name> <init pos:start="237:42" pos:end="237:60">= <expr pos:start="237:44" pos:end="237:60"><operator pos:start="237:44" pos:end="237:44">&amp;</operator><name pos:start="237:45" pos:end="237:60"><name pos:start="237:45" pos:end="237:46">st</name><operator pos:start="237:47" pos:end="237:48">-&gt;</operator><name pos:start="237:49" pos:end="237:57">side_data</name><index pos:start="237:58" pos:end="237:60">[<expr pos:start="237:59" pos:end="237:59"><name pos:start="237:59" pos:end="237:59">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="239:17" pos:end="239:34"><decl pos:start="239:17" pos:end="239:33"><type pos:start="239:17" pos:end="239:25"><name pos:start="239:17" pos:end="239:23">uint8_t</name> <modifier pos:start="239:25" pos:end="239:25">*</modifier></type><name pos:start="239:26" pos:end="239:33">dst_data</name></decl>;</decl_stmt>



                <if_stmt pos:start="243:17" pos:end="245:29"><if pos:start="243:17" pos:end="245:29">if <condition pos:start="243:20" pos:end="243:69">(<expr pos:start="243:21" pos:end="243:68"><call pos:start="243:21" pos:end="243:68"><name pos:start="243:21" pos:end="243:43">av_packet_get_side_data</name><argument_list pos:start="243:44" pos:end="243:68">(<argument pos:start="243:45" pos:end="243:47"><expr pos:start="243:45" pos:end="243:47"><name pos:start="243:45" pos:end="243:47">pkt</name></expr></argument>, <argument pos:start="243:50" pos:end="243:61"><expr pos:start="243:50" pos:end="243:61"><name pos:start="243:50" pos:end="243:61"><name pos:start="243:50" pos:end="243:55">src_sd</name><operator pos:start="243:56" pos:end="243:57">-&gt;</operator><name pos:start="243:58" pos:end="243:61">type</name></name></expr></argument>, <argument pos:start="243:64" pos:end="243:67"><expr pos:start="243:64" pos:end="243:67"><name pos:start="243:64" pos:end="243:67">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="245:21" pos:end="245:29"><block_content pos:start="245:21" pos:end="245:29">

                    <continue pos:start="245:21" pos:end="245:29">continue;</continue></block_content></block></if></if_stmt>



                <expr_stmt pos:start="249:17" pos:end="249:84"><expr pos:start="249:17" pos:end="249:83"><name pos:start="249:17" pos:end="249:24">dst_data</name> <operator pos:start="249:26" pos:end="249:26">=</operator> <call pos:start="249:28" pos:end="249:83"><name pos:start="249:28" pos:end="249:50">av_packet_new_side_data</name><argument_list pos:start="249:51" pos:end="249:83">(<argument pos:start="249:52" pos:end="249:54"><expr pos:start="249:52" pos:end="249:54"><name pos:start="249:52" pos:end="249:54">pkt</name></expr></argument>, <argument pos:start="249:57" pos:end="249:68"><expr pos:start="249:57" pos:end="249:68"><name pos:start="249:57" pos:end="249:68"><name pos:start="249:57" pos:end="249:62">src_sd</name><operator pos:start="249:63" pos:end="249:64">-&gt;</operator><name pos:start="249:65" pos:end="249:68">type</name></name></expr></argument>, <argument pos:start="249:71" pos:end="249:82"><expr pos:start="249:71" pos:end="249:82"><name pos:start="249:71" pos:end="249:82"><name pos:start="249:71" pos:end="249:76">src_sd</name><operator pos:start="249:77" pos:end="249:78">-&gt;</operator><name pos:start="249:79" pos:end="249:82">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="251:17" pos:end="257:17"><if pos:start="251:17" pos:end="257:17">if <condition pos:start="251:20" pos:end="251:30">(<expr pos:start="251:21" pos:end="251:29"><operator pos:start="251:21" pos:end="251:21">!</operator><name pos:start="251:22" pos:end="251:29">dst_data</name></expr>)</condition> <block pos:start="251:32" pos:end="257:17">{<block_content pos:start="253:21" pos:end="255:29">

                    <expr_stmt pos:start="253:21" pos:end="253:85"><expr pos:start="253:21" pos:end="253:84"><call pos:start="253:21" pos:end="253:84"><name pos:start="253:21" pos:end="253:26">av_log</name><argument_list pos:start="253:27" pos:end="253:84">(<argument pos:start="253:28" pos:end="253:28"><expr pos:start="253:28" pos:end="253:28"><name pos:start="253:28" pos:end="253:28">s</name></expr></argument>, <argument pos:start="253:31" pos:end="253:44"><expr pos:start="253:31" pos:end="253:44"><name pos:start="253:31" pos:end="253:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="253:47" pos:end="253:83"><expr pos:start="253:47" pos:end="253:83"><literal type="string" pos:start="253:47" pos:end="253:83">"Could not inject global side data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="255:21" pos:end="255:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="261:17" pos:end="261:61"><expr pos:start="261:17" pos:end="261:60"><call pos:start="261:17" pos:end="261:60"><name pos:start="261:17" pos:end="261:22">memcpy</name><argument_list pos:start="261:23" pos:end="261:60">(<argument pos:start="261:24" pos:end="261:31"><expr pos:start="261:24" pos:end="261:31"><name pos:start="261:24" pos:end="261:31">dst_data</name></expr></argument>, <argument pos:start="261:34" pos:end="261:45"><expr pos:start="261:34" pos:end="261:45"><name pos:start="261:34" pos:end="261:45"><name pos:start="261:34" pos:end="261:39">src_sd</name><operator pos:start="261:40" pos:end="261:41">-&gt;</operator><name pos:start="261:42" pos:end="261:45">data</name></name></expr></argument>, <argument pos:start="261:48" pos:end="261:59"><expr pos:start="261:48" pos:end="261:59"><name pos:start="261:48" pos:end="261:59"><name pos:start="261:48" pos:end="261:53">src_sd</name><operator pos:start="261:54" pos:end="261:55">-&gt;</operator><name pos:start="261:56" pos:end="261:59">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="265:13" pos:end="265:44"><expr pos:start="265:13" pos:end="265:43"><name pos:start="265:13" pos:end="265:39"><name pos:start="265:13" pos:end="265:14">st</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:39">inject_global_side_data</name></name> <operator pos:start="265:41" pos:end="265:41">=</operator> <literal type="number" pos:start="265:43" pos:end="265:43">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="271:9" pos:end="273:43"><if pos:start="271:9" pos:end="273:43">if <condition pos:start="271:12" pos:end="271:52">(<expr pos:start="271:13" pos:end="271:51"><operator pos:start="271:13" pos:end="271:13">!</operator><operator pos:start="271:14" pos:end="271:14">(</operator><name pos:start="271:15" pos:end="271:22"><name pos:start="271:15" pos:end="271:15">s</name><operator pos:start="271:16" pos:end="271:17">-&gt;</operator><name pos:start="271:18" pos:end="271:22">flags</name></name> <operator pos:start="271:24" pos:end="271:24">&amp;</operator> <name pos:start="271:26" pos:end="271:50">AVFMT_FLAG_KEEP_SIDE_DATA</name><operator pos:start="271:51" pos:end="271:51">)</operator></expr>)</condition><block type="pseudo" pos:start="273:13" pos:end="273:43"><block_content pos:start="273:13" pos:end="273:43">

            <expr_stmt pos:start="273:13" pos:end="273:43"><expr pos:start="273:13" pos:end="273:42"><call pos:start="273:13" pos:end="273:42"><name pos:start="273:13" pos:end="273:37">av_packet_merge_side_data</name><argument_list pos:start="273:38" pos:end="273:42">(<argument pos:start="273:39" pos:end="273:41"><expr pos:start="273:39" pos:end="273:41"><name pos:start="273:39" pos:end="273:41">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="279:5" pos:end="279:74"><expr pos:start="279:5" pos:end="279:73"><call pos:start="279:5" pos:end="279:73"><name pos:start="279:5" pos:end="279:23">av_opt_get_dict_val</name><argument_list pos:start="279:24" pos:end="279:73">(<argument pos:start="279:25" pos:end="279:25"><expr pos:start="279:25" pos:end="279:25"><name pos:start="279:25" pos:end="279:25">s</name></expr></argument>, <argument pos:start="279:28" pos:end="279:37"><expr pos:start="279:28" pos:end="279:37"><literal type="string" pos:start="279:28" pos:end="279:37">"metadata"</literal></expr></argument>, <argument pos:start="279:40" pos:end="279:61"><expr pos:start="279:40" pos:end="279:61"><name pos:start="279:40" pos:end="279:61">AV_OPT_SEARCH_CHILDREN</name></expr></argument>, <argument pos:start="279:64" pos:end="279:72"><expr pos:start="279:64" pos:end="279:72"><operator pos:start="279:64" pos:end="279:64">&amp;</operator><name pos:start="279:65" pos:end="279:72">metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="281:5" pos:end="291:5"><if pos:start="281:5" pos:end="291:5">if <condition pos:start="281:8" pos:end="281:17">(<expr pos:start="281:9" pos:end="281:16"><name pos:start="281:9" pos:end="281:16">metadata</name></expr>)</condition> <block pos:start="281:19" pos:end="291:5">{<block_content pos:start="283:9" pos:end="289:73">

        <expr_stmt pos:start="283:9" pos:end="283:60"><expr pos:start="283:9" pos:end="283:59"><name pos:start="283:9" pos:end="283:22"><name pos:start="283:9" pos:end="283:9">s</name><operator pos:start="283:10" pos:end="283:11">-&gt;</operator><name pos:start="283:12" pos:end="283:22">event_flags</name></name> <operator pos:start="283:24" pos:end="283:25">|=</operator> <name pos:start="283:27" pos:end="283:59">AVFMT_EVENT_FLAG_METADATA_UPDATED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:48"><expr pos:start="285:9" pos:end="285:47"><call pos:start="285:9" pos:end="285:47"><name pos:start="285:9" pos:end="285:20">av_dict_copy</name><argument_list pos:start="285:21" pos:end="285:47">(<argument pos:start="285:22" pos:end="285:33"><expr pos:start="285:22" pos:end="285:33"><operator pos:start="285:22" pos:end="285:22">&amp;</operator><name pos:start="285:23" pos:end="285:33"><name pos:start="285:23" pos:end="285:23">s</name><operator pos:start="285:24" pos:end="285:25">-&gt;</operator><name pos:start="285:26" pos:end="285:33">metadata</name></name></expr></argument>, <argument pos:start="285:36" pos:end="285:43"><expr pos:start="285:36" pos:end="285:43"><name pos:start="285:36" pos:end="285:43">metadata</name></expr></argument>, <argument pos:start="285:46" pos:end="285:46"><expr pos:start="285:46" pos:end="285:46"><literal type="number" pos:start="285:46" pos:end="285:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:32"><expr pos:start="287:9" pos:end="287:31"><call pos:start="287:9" pos:end="287:31"><name pos:start="287:9" pos:end="287:20">av_dict_free</name><argument_list pos:start="287:21" pos:end="287:31">(<argument pos:start="287:22" pos:end="287:30"><expr pos:start="287:22" pos:end="287:30"><operator pos:start="287:22" pos:end="287:22">&amp;</operator><name pos:start="287:23" pos:end="287:30">metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:73"><expr pos:start="289:9" pos:end="289:72"><call pos:start="289:9" pos:end="289:72"><name pos:start="289:9" pos:end="289:27">av_opt_set_dict_val</name><argument_list pos:start="289:28" pos:end="289:72">(<argument pos:start="289:29" pos:end="289:29"><expr pos:start="289:29" pos:end="289:29"><name pos:start="289:29" pos:end="289:29">s</name></expr></argument>, <argument pos:start="289:32" pos:end="289:41"><expr pos:start="289:32" pos:end="289:41"><literal type="string" pos:start="289:32" pos:end="289:41">"metadata"</literal></expr></argument>, <argument pos:start="289:44" pos:end="289:47"><expr pos:start="289:44" pos:end="289:47"><name pos:start="289:44" pos:end="289:47">NULL</name></expr></argument>, <argument pos:start="289:50" pos:end="289:71"><expr pos:start="289:50" pos:end="289:71"><name pos:start="289:50" pos:end="289:71">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="295:5" pos:end="309:53"><if pos:start="295:5" pos:end="309:53">if <condition pos:start="295:8" pos:end="295:32">(<expr pos:start="295:9" pos:end="295:31"><name pos:start="295:9" pos:end="295:16"><name pos:start="295:9" pos:end="295:9">s</name><operator pos:start="295:10" pos:end="295:11">-&gt;</operator><name pos:start="295:12" pos:end="295:16">debug</name></name> <operator pos:start="295:18" pos:end="295:18">&amp;</operator> <name pos:start="295:20" pos:end="295:31">FF_FDEBUG_TS</name></expr>)</condition><block type="pseudo" pos:start="297:9" pos:end="309:53"><block_content pos:start="297:9" pos:end="309:53">

        <expr_stmt pos:start="297:9" pos:end="309:53"><expr pos:start="297:9" pos:end="309:52"><call pos:start="297:9" pos:end="309:52"><name pos:start="297:9" pos:end="297:14">av_log</name><argument_list pos:start="297:15" pos:end="309:52">(<argument pos:start="297:16" pos:end="297:16"><expr pos:start="297:16" pos:end="297:16"><name pos:start="297:16" pos:end="297:16">s</name></expr></argument>, <argument pos:start="297:19" pos:end="297:30"><expr pos:start="297:19" pos:end="297:30"><name pos:start="297:19" pos:end="297:30">AV_LOG_DEBUG</name></expr></argument>,

               <argument pos:start="299:16" pos:end="301:49"><expr pos:start="299:16" pos:end="301:49"><literal type="string" pos:start="299:16" pos:end="299:64">"read_frame_internal stream=%d, pts=%s, dts=%s, "</literal>

               <literal type="string" pos:start="301:16" pos:end="301:49">"size=%d, duration=%d, flags=%d\n"</literal></expr></argument>,

               <argument pos:start="303:16" pos:end="303:32"><expr pos:start="303:16" pos:end="303:32"><name pos:start="303:16" pos:end="303:32"><name pos:start="303:16" pos:end="303:18">pkt</name><operator pos:start="303:19" pos:end="303:20">-&gt;</operator><name pos:start="303:21" pos:end="303:32">stream_index</name></name></expr></argument>,

               <argument pos:start="305:16" pos:end="305:34"><expr pos:start="305:16" pos:end="305:34"><call pos:start="305:16" pos:end="305:34"><name pos:start="305:16" pos:end="305:24">av_ts2str</name><argument_list pos:start="305:25" pos:end="305:34">(<argument pos:start="305:26" pos:end="305:33"><expr pos:start="305:26" pos:end="305:33"><name pos:start="305:26" pos:end="305:33"><name pos:start="305:26" pos:end="305:28">pkt</name><operator pos:start="305:29" pos:end="305:30">-&gt;</operator><name pos:start="305:31" pos:end="305:33">pts</name></name></expr></argument>)</argument_list></call></expr></argument>,

               <argument pos:start="307:16" pos:end="307:34"><expr pos:start="307:16" pos:end="307:34"><call pos:start="307:16" pos:end="307:34"><name pos:start="307:16" pos:end="307:24">av_ts2str</name><argument_list pos:start="307:25" pos:end="307:34">(<argument pos:start="307:26" pos:end="307:33"><expr pos:start="307:26" pos:end="307:33"><name pos:start="307:26" pos:end="307:33"><name pos:start="307:26" pos:end="307:28">pkt</name><operator pos:start="307:29" pos:end="307:30">-&gt;</operator><name pos:start="307:31" pos:end="307:33">dts</name></name></expr></argument>)</argument_list></call></expr></argument>,

               <argument pos:start="309:16" pos:end="309:24"><expr pos:start="309:16" pos:end="309:24"><name pos:start="309:16" pos:end="309:24"><name pos:start="309:16" pos:end="309:18">pkt</name><operator pos:start="309:19" pos:end="309:20">-&gt;</operator><name pos:start="309:21" pos:end="309:24">size</name></name></expr></argument>, <argument pos:start="309:27" pos:end="309:39"><expr pos:start="309:27" pos:end="309:39"><name pos:start="309:27" pos:end="309:39"><name pos:start="309:27" pos:end="309:29">pkt</name><operator pos:start="309:30" pos:end="309:31">-&gt;</operator><name pos:start="309:32" pos:end="309:39">duration</name></name></expr></argument>, <argument pos:start="309:42" pos:end="309:51"><expr pos:start="309:42" pos:end="309:51"><name pos:start="309:42" pos:end="309:51"><name pos:start="309:42" pos:end="309:44">pkt</name><operator pos:start="309:45" pos:end="309:46">-&gt;</operator><name pos:start="309:47" pos:end="309:51">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="313:5" pos:end="313:15">return <expr pos:start="313:12" pos:end="313:14"><name pos:start="313:12" pos:end="313:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
