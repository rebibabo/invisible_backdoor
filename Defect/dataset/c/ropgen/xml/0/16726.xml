<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16726.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">spitz_common_init</name><parameter_list pos:start="1:30" pos:end="7:76">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:40">ram_addr_t</name></type> <name pos:start="1:42" pos:end="1:49">ram_size</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:67"><decl pos:start="1:52" pos:end="1:67"><type pos:start="1:52" pos:end="1:67"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:67">vga_ram_size</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:43"><decl pos:start="3:17" pos:end="3:43"><type pos:start="3:17" pos:end="3:43"><specifier pos:start="3:17" pos:end="3:21">const</specifier> <name pos:start="3:23" pos:end="3:26">char</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:43">kernel_filename</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:42"><decl pos:start="5:17" pos:end="5:42"><type pos:start="5:17" pos:end="5:42"><specifier pos:start="5:17" pos:end="5:21">const</specifier> <name pos:start="5:23" pos:end="5:26">char</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:42">kernel_cmdline</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:71"><decl pos:start="5:45" pos:end="5:71"><type pos:start="5:45" pos:end="5:71"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:71">initrd_filename</name></decl></parameter>,

                <parameter pos:start="7:17" pos:end="7:37"><decl pos:start="7:17" pos:end="7:37"><type pos:start="7:17" pos:end="7:37"><specifier pos:start="7:17" pos:end="7:21">const</specifier> <name pos:start="7:23" pos:end="7:26">char</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:37">cpu_model</name></decl></parameter>, <parameter pos:start="7:40" pos:end="7:63"><decl pos:start="7:40" pos:end="7:63"><type pos:start="7:40" pos:end="7:63"><name pos:start="7:40" pos:end="7:57"><name pos:start="7:40" pos:end="7:43">enum</name> <name pos:start="7:45" pos:end="7:57">spitz_model_e</name></name></type> <name pos:start="7:59" pos:end="7:63">model</name></decl></parameter>, <parameter pos:start="7:66" pos:end="7:75"><decl pos:start="7:66" pos:end="7:75"><type pos:start="7:66" pos:end="7:75"><name pos:start="7:66" pos:end="7:68">int</name></type> <name pos:start="7:70" pos:end="7:75">arm_id</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="119:1">{<block_content pos:start="11:5" pos:end="117:42">

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:25">pxa2xx_state_s</name></name> <modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:30">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:23">scoop_info_s</name></name> <modifier pos:start="13:25" pos:end="13:25">*</modifier></type><name pos:start="13:26" pos:end="13:29">scp0</name></decl>, <decl pos:start="13:32" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:25"><modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:36">scp1</name> <init pos:start="13:38" pos:end="13:43">= <expr pos:start="13:40" pos:end="13:43"><name pos:start="13:40" pos:end="13:43">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:67"><if pos:start="17:5" pos:end="19:67">if <condition pos:start="17:8" pos:end="17:19">(<expr pos:start="17:9" pos:end="17:18"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:67"><block_content pos:start="19:9" pos:end="19:67">

        <expr_stmt pos:start="19:9" pos:end="19:67"><expr pos:start="19:9" pos:end="19:66"><name pos:start="19:9" pos:end="19:17">cpu_model</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <ternary pos:start="19:21" pos:end="19:66"><condition pos:start="19:21" pos:end="19:40"><expr pos:start="19:21" pos:end="19:38"><operator pos:start="19:21" pos:end="19:21">(</operator><name pos:start="19:22" pos:end="19:26">model</name> <operator pos:start="19:28" pos:end="19:29">==</operator> <name pos:start="19:31" pos:end="19:37">terrier</name><operator pos:start="19:38" pos:end="19:38">)</operator></expr> ?</condition><then pos:start="19:42" pos:end="19:52"> <expr pos:start="19:42" pos:end="19:52"><literal type="string" pos:start="19:42" pos:end="19:52">"pxa270-c5"</literal></expr> </then><else pos:start="19:54" pos:end="19:66">: <expr pos:start="19:56" pos:end="19:66"><literal type="string" pos:start="19:56" pos:end="19:66">"pxa270-c0"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:28">/* Setup CPU &amp; memory */</comment>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:64">(<expr pos:start="25:9" pos:end="25:63"><name pos:start="25:9" pos:end="25:16">ram_size</name> <operator pos:start="25:18" pos:end="25:18">&lt;</operator> <name pos:start="25:20" pos:end="25:28">SPITZ_RAM</name> <operator pos:start="25:30" pos:end="25:30">+</operator> <name pos:start="25:32" pos:end="25:40">SPITZ_ROM</name> <operator pos:start="25:42" pos:end="25:42">+</operator> <name pos:start="25:44" pos:end="25:63">PXA2XX_INTERNAL_SIZE</name></expr>)</condition> <block pos:start="25:66" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:16">

        <expr_stmt pos:start="27:9" pos:end="29:70"><expr pos:start="27:9" pos:end="29:69"><call pos:start="27:9" pos:end="29:69"><name pos:start="27:9" pos:end="27:15">fprintf</name><argument_list pos:start="27:16" pos:end="29:69">(<argument pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:22">stderr</name></expr></argument>, <argument pos:start="27:25" pos:end="27:69"><expr pos:start="27:25" pos:end="27:69"><literal type="string" pos:start="27:25" pos:end="27:69">"This platform requires %i bytes of memory\n"</literal></expr></argument>,

                        <argument pos:start="29:25" pos:end="29:68"><expr pos:start="29:25" pos:end="29:68"><name pos:start="29:25" pos:end="29:33">SPITZ_RAM</name> <operator pos:start="29:35" pos:end="29:35">+</operator> <name pos:start="29:37" pos:end="29:45">SPITZ_ROM</name> <operator pos:start="29:47" pos:end="29:47">+</operator> <name pos:start="29:49" pos:end="29:68">PXA2XX_INTERNAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><call pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">exit</name><argument_list pos:start="31:13" pos:end="31:15">(<argument pos:start="31:14" pos:end="31:14"><expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:55"><expr pos:start="35:5" pos:end="35:54"><name pos:start="35:5" pos:end="35:7">cpu</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:54"><name pos:start="35:11" pos:end="35:21">pxa270_init</name><argument_list pos:start="35:22" pos:end="35:54">(<argument pos:start="35:23" pos:end="35:42"><expr pos:start="35:23" pos:end="35:42"><name pos:start="35:23" pos:end="35:42"><name pos:start="35:23" pos:end="35:33">spitz_binfo</name><operator pos:start="35:34" pos:end="35:34">.</operator><name pos:start="35:35" pos:end="35:42">ram_size</name></name></expr></argument>, <argument pos:start="35:45" pos:end="35:53"><expr pos:start="35:45" pos:end="35:53"><name pos:start="35:45" pos:end="35:53">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:72"><expr pos:start="39:5" pos:end="39:71"><call pos:start="39:5" pos:end="39:71"><name pos:start="39:5" pos:end="39:21">sl_flash_register</name><argument_list pos:start="39:22" pos:end="39:71">(<argument pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><name pos:start="39:23" pos:end="39:25">cpu</name></expr></argument>, <argument pos:start="39:28" pos:end="39:70"><expr pos:start="39:28" pos:end="39:70"><ternary pos:start="39:28" pos:end="39:70"><condition pos:start="39:28" pos:end="39:45"><expr pos:start="39:28" pos:end="39:43"><operator pos:start="39:28" pos:end="39:28">(</operator><name pos:start="39:29" pos:end="39:33">model</name> <operator pos:start="39:35" pos:end="39:36">==</operator> <name pos:start="39:38" pos:end="39:42">spitz</name><operator pos:start="39:43" pos:end="39:43">)</operator></expr> ?</condition><then pos:start="39:47" pos:end="39:56"> <expr pos:start="39:47" pos:end="39:56"><name pos:start="39:47" pos:end="39:56">FLASH_128M</name></expr> </then><else pos:start="39:58" pos:end="39:70">: <expr pos:start="39:60" pos:end="39:70"><name pos:start="39:60" pos:end="39:70">FLASH_1024M</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="45:60"><expr pos:start="43:5" pos:end="45:59"><call pos:start="43:5" pos:end="45:59"><name pos:start="43:5" pos:end="43:32">cpu_register_physical_memory</name><argument_list pos:start="43:33" pos:end="45:59">(<argument pos:start="43:34" pos:end="43:34"><expr pos:start="43:34" pos:end="43:34"><literal type="number" pos:start="43:34" pos:end="43:34">0</literal></expr></argument>, <argument pos:start="43:37" pos:end="43:45"><expr pos:start="43:37" pos:end="43:45"><name pos:start="43:37" pos:end="43:45">SPITZ_ROM</name></expr></argument>,

                    <argument pos:start="45:21" pos:end="45:58"><expr pos:start="45:21" pos:end="45:58"><call pos:start="45:21" pos:end="45:45"><name pos:start="45:21" pos:end="45:34">qemu_ram_alloc</name><argument_list pos:start="45:35" pos:end="45:45">(<argument pos:start="45:36" pos:end="45:44"><expr pos:start="45:36" pos:end="45:44"><name pos:start="45:36" pos:end="45:44">SPITZ_ROM</name></expr></argument>)</argument_list></call> <operator pos:start="45:47" pos:end="45:47">|</operator> <name pos:start="45:49" pos:end="45:58">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:27">/* Setup peripherals */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:33"><expr pos:start="51:5" pos:end="51:32"><call pos:start="51:5" pos:end="51:32"><name pos:start="51:5" pos:end="51:27">spitz_keyboard_register</name><argument_list pos:start="51:28" pos:end="51:32">(<argument pos:start="51:29" pos:end="51:31"><expr pos:start="51:29" pos:end="51:31"><name pos:start="51:29" pos:end="51:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><call pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:20">spitz_ssp_attach</name><argument_list pos:start="55:21" pos:end="55:25">(<argument pos:start="55:22" pos:end="55:24"><expr pos:start="55:22" pos:end="55:24"><name pos:start="55:22" pos:end="55:24">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:42"><expr pos:start="59:5" pos:end="59:41"><name pos:start="59:5" pos:end="59:8">scp0</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <call pos:start="59:12" pos:end="59:41"><name pos:start="59:12" pos:end="59:21">scoop_init</name><argument_list pos:start="59:22" pos:end="59:41">(<argument pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:25">cpu</name></expr></argument>, <argument pos:start="59:28" pos:end="59:28"><expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr></argument>, <argument pos:start="59:31" pos:end="59:40"><expr pos:start="59:31" pos:end="59:40"><literal type="number" pos:start="59:31" pos:end="59:40">0x10800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:23">(<expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:13">model</name> <operator pos:start="61:15" pos:end="61:16">!=</operator> <name pos:start="61:18" pos:end="61:22">akita</name></expr>)</condition> <block pos:start="61:25" pos:end="65:5">{<block_content pos:start="63:13" pos:end="63:50">

	    <expr_stmt pos:start="63:13" pos:end="63:50"><expr pos:start="63:13" pos:end="63:49"><name pos:start="63:13" pos:end="63:16">scp1</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:49"><name pos:start="63:20" pos:end="63:29">scoop_init</name><argument_list pos:start="63:30" pos:end="63:49">(<argument pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:33">cpu</name></expr></argument>, <argument pos:start="63:36" pos:end="63:36"><expr pos:start="63:36" pos:end="63:36"><literal type="number" pos:start="63:36" pos:end="63:36">1</literal></expr></argument>, <argument pos:start="63:39" pos:end="63:48"><expr pos:start="63:39" pos:end="63:48"><literal type="number" pos:start="63:39" pos:end="63:48">0x08800040</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:44"><expr pos:start="69:5" pos:end="69:43"><call pos:start="69:5" pos:end="69:43"><name pos:start="69:5" pos:end="69:26">spitz_scoop_gpio_setup</name><argument_list pos:start="69:27" pos:end="69:43">(<argument pos:start="69:28" pos:end="69:30"><expr pos:start="69:28" pos:end="69:30"><name pos:start="69:28" pos:end="69:30">cpu</name></expr></argument>, <argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">scp0</name></expr></argument>, <argument pos:start="69:39" pos:end="69:42"><expr pos:start="69:39" pos:end="69:42"><name pos:start="69:39" pos:end="69:42">scp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:52"><expr pos:start="73:5" pos:end="73:51"><call pos:start="73:5" pos:end="73:51"><name pos:start="73:5" pos:end="73:20">spitz_gpio_setup</name><argument_list pos:start="73:21" pos:end="73:51">(<argument pos:start="73:22" pos:end="73:24"><expr pos:start="73:22" pos:end="73:24"><name pos:start="73:22" pos:end="73:24">cpu</name></expr></argument>, <argument pos:start="73:27" pos:end="73:50"><expr pos:start="73:27" pos:end="73:50"><ternary pos:start="73:27" pos:end="73:50"><condition pos:start="73:27" pos:end="73:44"><expr pos:start="73:27" pos:end="73:42"><operator pos:start="73:27" pos:end="73:27">(</operator><name pos:start="73:28" pos:end="73:32">model</name> <operator pos:start="73:34" pos:end="73:35">==</operator> <name pos:start="73:37" pos:end="73:41">akita</name><operator pos:start="73:42" pos:end="73:42">)</operator></expr> ?</condition><then pos:start="73:46" pos:end="73:46"> <expr pos:start="73:46" pos:end="73:46"><literal type="number" pos:start="73:46" pos:end="73:46">1</literal></expr> </then><else pos:start="73:48" pos:end="73:50">: <expr pos:start="73:50" pos:end="73:50"><literal type="number" pos:start="73:50" pos:end="73:50">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:25"><expr pos:start="77:5" pos:end="77:24"><call pos:start="77:5" pos:end="77:24"><name pos:start="77:5" pos:end="77:19">spitz_i2c_setup</name><argument_list pos:start="77:20" pos:end="77:24">(<argument pos:start="77:21" pos:end="77:23"><expr pos:start="77:21" pos:end="77:23"><name pos:start="77:21" pos:end="77:23">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="83:35"><if pos:start="81:5" pos:end="83:35">if <condition pos:start="81:8" pos:end="81:23">(<expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:13">model</name> <operator pos:start="81:15" pos:end="81:16">==</operator> <name pos:start="81:18" pos:end="81:22">akita</name></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:35"><block_content pos:start="83:9" pos:end="83:35">

        <expr_stmt pos:start="83:9" pos:end="83:35"><expr pos:start="83:9" pos:end="83:34"><call pos:start="83:9" pos:end="83:34"><name pos:start="83:9" pos:end="83:29">spitz_akita_i2c_setup</name><argument_list pos:start="83:30" pos:end="83:34">(<argument pos:start="83:31" pos:end="83:33"><expr pos:start="83:31" pos:end="83:33"><name pos:start="83:31" pos:end="83:33">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="97:40"><if pos:start="87:5" pos:end="91:40">if <condition pos:start="87:8" pos:end="87:25">(<expr pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:13">model</name> <operator pos:start="87:15" pos:end="87:16">==</operator> <name pos:start="87:18" pos:end="87:24">terrier</name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:40"><block_content pos:start="91:9" pos:end="91:40">

        <comment type="block" pos:start="89:9" pos:end="89:71">/* A 6.0 GB microdrive is permanently sitting in CF slot 1.  */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:40"><expr pos:start="91:9" pos:end="91:39"><call pos:start="91:9" pos:end="91:39"><name pos:start="91:9" pos:end="91:31">spitz_microdrive_attach</name><argument_list pos:start="91:32" pos:end="91:39">(<argument pos:start="91:33" pos:end="91:35"><expr pos:start="91:33" pos:end="91:35"><name pos:start="91:33" pos:end="91:35">cpu</name></expr></argument>, <argument pos:start="91:38" pos:end="91:38"><expr pos:start="91:38" pos:end="91:38"><literal type="number" pos:start="91:38" pos:end="91:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="93:5" pos:end="97:40">else if <condition pos:start="93:13" pos:end="93:28">(<expr pos:start="93:14" pos:end="93:27"><name pos:start="93:14" pos:end="93:18">model</name> <operator pos:start="93:20" pos:end="93:21">!=</operator> <name pos:start="93:23" pos:end="93:27">akita</name></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:40"><block_content pos:start="97:9" pos:end="97:40">

        <comment type="block" pos:start="95:9" pos:end="95:71">/* A 4.0 GB microdrive is permanently sitting in CF slot 0.  */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:40"><expr pos:start="97:9" pos:end="97:39"><call pos:start="97:9" pos:end="97:39"><name pos:start="97:9" pos:end="97:31">spitz_microdrive_attach</name><argument_list pos:start="97:32" pos:end="97:39">(<argument pos:start="97:33" pos:end="97:35"><expr pos:start="97:33" pos:end="97:35"><name pos:start="97:33" pos:end="97:35">cpu</name></expr></argument>, <argument pos:start="97:38" pos:end="97:38"><expr pos:start="97:38" pos:end="97:38"><literal type="number" pos:start="97:38" pos:end="97:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:45">/* Setup initial (reset) machine state */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:50"><expr pos:start="103:5" pos:end="103:49"><name pos:start="103:5" pos:end="103:22"><name pos:start="103:5" pos:end="103:7">cpu</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:12">env</name><operator pos:start="103:13" pos:end="103:14">-&gt;</operator><name pos:start="103:15" pos:end="103:18">regs</name><index pos:start="103:19" pos:end="103:22">[<expr pos:start="103:20" pos:end="103:21"><literal type="number" pos:start="103:20" pos:end="103:21">15</literal></expr>]</index></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <name pos:start="103:26" pos:end="103:49"><name pos:start="103:26" pos:end="103:36">spitz_binfo</name><operator pos:start="103:37" pos:end="103:37">.</operator><name pos:start="103:38" pos:end="103:49">loader_start</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:50"><expr pos:start="107:5" pos:end="107:49"><name pos:start="107:5" pos:end="107:31"><name pos:start="107:5" pos:end="107:15">spitz_binfo</name><operator pos:start="107:16" pos:end="107:16">.</operator><name pos:start="107:17" pos:end="107:31">kernel_filename</name></name> <operator pos:start="107:33" pos:end="107:33">=</operator> <name pos:start="107:35" pos:end="107:49">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:48"><expr pos:start="109:5" pos:end="109:47"><name pos:start="109:5" pos:end="109:30"><name pos:start="109:5" pos:end="109:15">spitz_binfo</name><operator pos:start="109:16" pos:end="109:16">.</operator><name pos:start="109:17" pos:end="109:30">kernel_cmdline</name></name> <operator pos:start="109:32" pos:end="109:32">=</operator> <name pos:start="109:34" pos:end="109:47">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:50"><expr pos:start="111:5" pos:end="111:49"><name pos:start="111:5" pos:end="111:31"><name pos:start="111:5" pos:end="111:15">spitz_binfo</name><operator pos:start="111:16" pos:end="111:16">.</operator><name pos:start="111:17" pos:end="111:31">initrd_filename</name></name> <operator pos:start="111:33" pos:end="111:33">=</operator> <name pos:start="111:35" pos:end="111:49">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:34"><expr pos:start="113:5" pos:end="113:33"><name pos:start="113:5" pos:end="113:24"><name pos:start="113:5" pos:end="113:15">spitz_binfo</name><operator pos:start="113:16" pos:end="113:16">.</operator><name pos:start="113:17" pos:end="113:24">board_id</name></name> <operator pos:start="113:26" pos:end="113:26">=</operator> <name pos:start="113:28" pos:end="113:33">arm_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:44"><expr pos:start="115:5" pos:end="115:43"><call pos:start="115:5" pos:end="115:43"><name pos:start="115:5" pos:end="115:19">arm_load_kernel</name><argument_list pos:start="115:20" pos:end="115:43">(<argument pos:start="115:21" pos:end="115:28"><expr pos:start="115:21" pos:end="115:28"><name pos:start="115:21" pos:end="115:28"><name pos:start="115:21" pos:end="115:23">cpu</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:28">env</name></name></expr></argument>, <argument pos:start="115:31" pos:end="115:42"><expr pos:start="115:31" pos:end="115:42"><operator pos:start="115:31" pos:end="115:31">&amp;</operator><name pos:start="115:32" pos:end="115:42">spitz_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:42"><expr pos:start="117:5" pos:end="117:41"><call pos:start="117:5" pos:end="117:41"><name pos:start="117:5" pos:end="117:22">sl_bootparam_write</name><argument_list pos:start="117:23" pos:end="117:41">(<argument pos:start="117:24" pos:end="117:40"><expr pos:start="117:24" pos:end="117:40"><name pos:start="117:24" pos:end="117:40">SL_PXA_PARAM_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
