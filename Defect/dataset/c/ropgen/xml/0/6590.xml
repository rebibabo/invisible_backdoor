<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6590.c" pos:tabs="8"><function pos:start="1:1" pos:end="247:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">mpc8544ds_init</name><parameter_list pos:start="1:27" pos:end="11:47">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:37">ram_addr_t</name></type> <name pos:start="1:39" pos:end="1:46">ram_size</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:48"><decl pos:start="3:26" pos:end="3:48"><type pos:start="3:26" pos:end="3:48"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:35">char</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:48">boot_device</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:52"><decl pos:start="5:26" pos:end="5:52"><type pos:start="5:26" pos:end="5:52"><specifier pos:start="5:26" pos:end="5:30">const</specifier> <name pos:start="5:32" pos:end="5:35">char</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:52">kernel_filename</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:51"><decl pos:start="7:26" pos:end="7:51"><type pos:start="7:26" pos:end="7:51"><specifier pos:start="7:26" pos:end="7:30">const</specifier> <name pos:start="7:32" pos:end="7:35">char</name> <modifier pos:start="7:37" pos:end="7:37">*</modifier></type><name pos:start="7:38" pos:end="7:51">kernel_cmdline</name></decl></parameter>,

                         <parameter pos:start="9:26" pos:end="9:52"><decl pos:start="9:26" pos:end="9:52"><type pos:start="9:26" pos:end="9:52"><specifier pos:start="9:26" pos:end="9:30">const</specifier> <name pos:start="9:32" pos:end="9:35">char</name> <modifier pos:start="9:37" pos:end="9:37">*</modifier></type><name pos:start="9:38" pos:end="9:52">initrd_filename</name></decl></parameter>,

                         <parameter pos:start="11:26" pos:end="11:46"><decl pos:start="11:26" pos:end="11:46"><type pos:start="11:26" pos:end="11:46"><specifier pos:start="11:26" pos:end="11:30">const</specifier> <name pos:start="11:32" pos:end="11:35">char</name> <modifier pos:start="11:37" pos:end="11:37">*</modifier></type><name pos:start="11:38" pos:end="11:46">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="247:1">{<block_content pos:start="15:5" pos:end="245:11">

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">PCIBus</name> <modifier pos:start="15:12" pos:end="15:12">*</modifier></type><name pos:start="15:13" pos:end="15:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">CPUState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:24">elf_lowaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:31"><decl pos:start="23:5" pos:end="23:30"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:22">target_phys_addr_t</name></type> <name pos:start="23:24" pos:end="23:28">entry</name><init pos:start="23:29" pos:end="23:30">=<expr pos:start="23:30" pos:end="23:30"><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:49"><decl pos:start="25:5" pos:end="25:48"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:22">target_phys_addr_t</name></type> <name pos:start="25:24" pos:end="25:31">loadaddr</name><init pos:start="25:32" pos:end="25:48">=<expr pos:start="25:33" pos:end="25:48"><name pos:start="25:33" pos:end="25:48">UIMAGE_LOAD_BASE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:15">target_long</name></type> <name pos:start="27:17" pos:end="27:27">kernel_size</name><init pos:start="27:28" pos:end="27:29">=<expr pos:start="27:29" pos:end="27:29"><literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:39"><decl pos:start="29:5" pos:end="29:38"><type pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:16">target_ulong</name></type> <name pos:start="29:18" pos:end="29:24">dt_base</name><init pos:start="29:25" pos:end="29:38">=<expr pos:start="29:26" pos:end="29:38"><name pos:start="29:26" pos:end="29:38">DTB_LOAD_BASE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:46"><decl pos:start="31:5" pos:end="31:45"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:16">target_ulong</name></type> <name pos:start="31:18" pos:end="31:28">initrd_base</name><init pos:start="31:29" pos:end="31:45">=<expr pos:start="31:30" pos:end="31:45"><name pos:start="31:30" pos:end="31:45">INITRD_LOAD_BASE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:30"><decl pos:start="33:5" pos:end="33:29"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:15">target_long</name></type> <name pos:start="33:17" pos:end="33:27">initrd_size</name><init pos:start="33:28" pos:end="33:29">=<expr pos:start="33:29" pos:end="33:29"><literal type="number" pos:start="33:29" pos:end="33:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:14"><decl pos:start="35:5" pos:end="35:13"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:8">void</name> <modifier pos:start="35:10" pos:end="35:10">*</modifier></type><name pos:start="35:11" pos:end="35:13">fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:12"><decl pos:start="37:5" pos:end="37:11"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name><init pos:start="37:10" pos:end="37:11">=<expr pos:start="37:11" pos:end="37:11"><literal type="number" pos:start="37:11" pos:end="37:11">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:47"><decl pos:start="39:5" pos:end="39:46"><type pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:12">unsigned</name> <name pos:start="39:14" pos:end="39:16">int</name></type> <name pos:start="39:18" pos:end="39:31"><name pos:start="39:18" pos:end="39:28">pci_irq_nrs</name><index pos:start="39:29" pos:end="39:31">[<expr pos:start="39:30" pos:end="39:30"><literal type="number" pos:start="39:30" pos:end="39:30">4</literal></expr>]</index></name> <init pos:start="39:33" pos:end="39:46">= <expr pos:start="39:35" pos:end="39:46"><block pos:start="39:35" pos:end="39:46">{<expr pos:start="39:36" pos:end="39:36"><literal type="number" pos:start="39:36" pos:end="39:36">1</literal></expr>, <expr pos:start="39:39" pos:end="39:39"><literal type="number" pos:start="39:39" pos:end="39:39">2</literal></expr>, <expr pos:start="39:42" pos:end="39:42"><literal type="number" pos:start="39:42" pos:end="39:42">3</literal></expr>, <expr pos:start="39:45" pos:end="39:45"><literal type="number" pos:start="39:45" pos:end="39:45">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:37"><decl pos:start="41:5" pos:end="41:18"><type pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:12">qemu_irq</name> <modifier pos:start="41:14" pos:end="41:14">*</modifier></type><name pos:start="41:15" pos:end="41:18">irqs</name></decl>, <decl pos:start="41:21" pos:end="41:25"><type ref="prev" pos:start="41:5" pos:end="41:14"><modifier pos:start="41:21" pos:end="41:21">*</modifier></type><name pos:start="41:22" pos:end="41:25">mpic</name></decl>, <decl pos:start="41:28" pos:end="41:36"><type ref="prev" pos:start="41:5" pos:end="41:14"><modifier pos:start="41:28" pos:end="41:28">*</modifier></type><name pos:start="41:29" pos:end="41:36">pci_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:28"><decl pos:start="43:5" pos:end="43:27"><type pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:15">SerialState</name> <modifier pos:start="43:17" pos:end="43:17">*</modifier></type> <name pos:start="43:19" pos:end="43:27"><name pos:start="43:19" pos:end="43:24">serial</name><index pos:start="43:25" pos:end="43:27">[<expr pos:start="43:26" pos:end="43:26"><literal type="number" pos:start="43:26" pos:end="43:26">2</literal></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:19">/* Setup CPU */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:37"><expr pos:start="49:5" pos:end="49:36"><name pos:start="49:5" pos:end="49:7">env</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:36"><name pos:start="49:11" pos:end="49:22">cpu_ppc_init</name><argument_list pos:start="49:23" pos:end="49:36">(<argument pos:start="49:24" pos:end="49:35"><expr pos:start="49:24" pos:end="49:35"><literal type="string" pos:start="49:24" pos:end="49:35">"e500v2_v30"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:13">(<expr pos:start="51:9" pos:end="51:12"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:12">env</name></expr>)</condition> <block pos:start="51:15" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:16">

        <expr_stmt pos:start="53:9" pos:end="53:55"><expr pos:start="53:9" pos:end="53:54"><call pos:start="53:9" pos:end="53:54"><name pos:start="53:9" pos:end="53:15">fprintf</name><argument_list pos:start="53:16" pos:end="53:54">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">stderr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:53"><expr pos:start="53:25" pos:end="53:53"><literal type="string" pos:start="53:25" pos:end="53:53">"Unable to initialize CPU!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:16"><expr pos:start="55:9" pos:end="55:15"><call pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:12">exit</name><argument_list pos:start="55:13" pos:end="55:15">(<argument pos:start="55:14" pos:end="55:14"><expr pos:start="55:14" pos:end="55:14"><literal type="number" pos:start="55:14" pos:end="55:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:51">/* Fixup Memory size on a alignment boundary */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:39"><expr pos:start="63:5" pos:end="63:38"><name pos:start="63:5" pos:end="63:12">ram_size</name> <operator pos:start="63:14" pos:end="63:15">&amp;=</operator> <operator pos:start="63:17" pos:end="63:17">~</operator><operator pos:start="63:18" pos:end="63:18">(</operator><name pos:start="63:19" pos:end="63:33">RAM_SIZES_ALIGN</name> <operator pos:start="63:35" pos:end="63:35">-</operator> <literal type="number" pos:start="63:37" pos:end="63:37">1</literal><operator pos:start="63:38" pos:end="63:38">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:25">/* Register Memory */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:72"><expr pos:start="69:5" pos:end="69:71"><call pos:start="69:5" pos:end="69:71"><name pos:start="69:5" pos:end="69:32">cpu_register_physical_memory</name><argument_list pos:start="69:33" pos:end="69:71">(<argument pos:start="69:34" pos:end="69:34"><expr pos:start="69:34" pos:end="69:34"><literal type="number" pos:start="69:34" pos:end="69:34">0</literal></expr></argument>, <argument pos:start="69:37" pos:end="69:44"><expr pos:start="69:37" pos:end="69:44"><name pos:start="69:37" pos:end="69:44">ram_size</name></expr></argument>, <argument pos:start="69:47" pos:end="69:70"><expr pos:start="69:47" pos:end="69:70"><call pos:start="69:47" pos:end="69:70"><name pos:start="69:47" pos:end="69:60">qemu_ram_alloc</name><argument_list pos:start="69:61" pos:end="69:70">(<argument pos:start="69:62" pos:end="69:69"><expr pos:start="69:62" pos:end="69:69"><name pos:start="69:62" pos:end="69:69">ram_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:14">/* MPIC */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:62"><expr pos:start="75:5" pos:end="75:61"><name pos:start="75:5" pos:end="75:8">irqs</name> <operator pos:start="75:10" pos:end="75:10">=</operator> <call pos:start="75:12" pos:end="75:61"><name pos:start="75:12" pos:end="75:23">qemu_mallocz</name><argument_list pos:start="75:24" pos:end="75:61">(<argument pos:start="75:25" pos:end="75:60"><expr pos:start="75:25" pos:end="75:60"><sizeof pos:start="75:25" pos:end="75:40">sizeof<argument_list pos:start="75:31" pos:end="75:40">(<argument pos:start="75:32" pos:end="75:39"><expr pos:start="75:32" pos:end="75:39"><name pos:start="75:32" pos:end="75:39">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="75:42" pos:end="75:42">*</operator> <name pos:start="75:44" pos:end="75:60">OPENPIC_OUTPUT_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:80"><expr pos:start="77:5" pos:end="77:79"><name pos:start="77:5" pos:end="77:28"><name pos:start="77:5" pos:end="77:8">irqs</name><index pos:start="77:9" pos:end="77:28">[<expr pos:start="77:10" pos:end="77:27"><name pos:start="77:10" pos:end="77:27">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <operator pos:start="77:32" pos:end="77:32">(</operator><operator pos:start="77:33" pos:end="77:33">(</operator><name pos:start="77:34" pos:end="77:41">qemu_irq</name> <operator pos:start="77:43" pos:end="77:43">*</operator><operator pos:start="77:44" pos:end="77:44">)</operator><name pos:start="77:45" pos:end="77:59"><name pos:start="77:45" pos:end="77:47">env</name><operator pos:start="77:48" pos:end="77:49">-&gt;</operator><name pos:start="77:50" pos:end="77:59">irq_inputs</name></name><operator pos:start="77:60" pos:end="77:60">)</operator><index pos:start="77:61" pos:end="77:79">[<expr pos:start="77:62" pos:end="77:78"><name pos:start="77:62" pos:end="77:78">PPCE500_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:82"><expr pos:start="79:5" pos:end="79:81"><name pos:start="79:5" pos:end="79:29"><name pos:start="79:5" pos:end="79:8">irqs</name><index pos:start="79:9" pos:end="79:29">[<expr pos:start="79:10" pos:end="79:28"><name pos:start="79:10" pos:end="79:28">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="79:31" pos:end="79:31">=</operator> <operator pos:start="79:33" pos:end="79:33">(</operator><operator pos:start="79:34" pos:end="79:34">(</operator><name pos:start="79:35" pos:end="79:42">qemu_irq</name> <operator pos:start="79:44" pos:end="79:44">*</operator><operator pos:start="79:45" pos:end="79:45">)</operator><name pos:start="79:46" pos:end="79:60"><name pos:start="79:46" pos:end="79:48">env</name><operator pos:start="79:49" pos:end="79:50">-&gt;</operator><name pos:start="79:51" pos:end="79:60">irq_inputs</name></name><operator pos:start="79:61" pos:end="79:61">)</operator><index pos:start="79:62" pos:end="79:81">[<expr pos:start="79:63" pos:end="79:80"><name pos:start="79:63" pos:end="79:80">PPCE500_INPUT_CINT</name></expr>]</index></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:61"><expr pos:start="81:5" pos:end="81:60"><name pos:start="81:5" pos:end="81:8">mpic</name> <operator pos:start="81:10" pos:end="81:10">=</operator> <call pos:start="81:12" pos:end="81:60"><name pos:start="81:12" pos:end="81:20">mpic_init</name><argument_list pos:start="81:21" pos:end="81:60">(<argument pos:start="81:22" pos:end="81:43"><expr pos:start="81:22" pos:end="81:43"><name pos:start="81:22" pos:end="81:43">MPC8544_MPIC_REGS_BASE</name></expr></argument>, <argument pos:start="81:46" pos:end="81:46"><expr pos:start="81:46" pos:end="81:46"><literal type="number" pos:start="81:46" pos:end="81:46">1</literal></expr></argument>, <argument pos:start="81:49" pos:end="81:53"><expr pos:start="81:49" pos:end="81:53"><operator pos:start="81:49" pos:end="81:49">&amp;</operator><name pos:start="81:50" pos:end="81:53">irqs</name></expr></argument>, <argument pos:start="81:56" pos:end="81:59"><expr pos:start="81:56" pos:end="81:59"><name pos:start="81:56" pos:end="81:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:16">/* Serial */</comment>

    <if_stmt pos:start="87:5" pos:end="93:42"><if pos:start="87:5" pos:end="93:42">if <condition pos:start="87:8" pos:end="87:22">(<expr pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:18">serial_hds</name><index pos:start="87:19" pos:end="87:21">[<expr pos:start="87:20" pos:end="87:20"><literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="93:42"><block_content pos:start="89:9" pos:end="93:42">

        <expr_stmt pos:start="89:9" pos:end="93:42"><expr pos:start="89:9" pos:end="93:41"><name pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:14">serial</name><index pos:start="89:15" pos:end="89:17">[<expr pos:start="89:16" pos:end="89:16"><literal type="number" pos:start="89:16" pos:end="89:16">0</literal></expr>]</index></name> <operator pos:start="89:19" pos:end="89:19">=</operator> <call pos:start="89:21" pos:end="93:41"><name pos:start="89:21" pos:end="89:34">serial_mm_init</name><argument_list pos:start="89:35" pos:end="93:41">(<argument pos:start="89:36" pos:end="89:60"><expr pos:start="89:36" pos:end="89:60"><name pos:start="89:36" pos:end="89:60">MPC8544_SERIAL0_REGS_BASE</name></expr></argument>,

                               <argument pos:start="91:32" pos:end="91:32"><expr pos:start="91:32" pos:end="91:32"><literal type="number" pos:start="91:32" pos:end="91:32">0</literal></expr></argument>, <argument pos:start="91:35" pos:end="91:45"><expr pos:start="91:35" pos:end="91:45"><name pos:start="91:35" pos:end="91:45"><name pos:start="91:35" pos:end="91:38">mpic</name><index pos:start="91:39" pos:end="91:45">[<expr pos:start="91:40" pos:end="91:44"><literal type="number" pos:start="91:40" pos:end="91:42">12</literal><operator pos:start="91:42" pos:end="91:42">+</operator><literal type="number" pos:start="91:43" pos:end="91:44">26</literal></expr>]</index></name></expr></argument>, <argument pos:start="91:48" pos:end="91:53"><expr pos:start="91:48" pos:end="91:53"><literal type="number" pos:start="91:48" pos:end="91:53">399193</literal></expr></argument>,

                        <argument pos:start="93:25" pos:end="93:37"><expr pos:start="93:25" pos:end="93:37"><name pos:start="93:25" pos:end="93:37"><name pos:start="93:25" pos:end="93:34">serial_hds</name><index pos:start="93:35" pos:end="93:37">[<expr pos:start="93:36" pos:end="93:36"><literal type="number" pos:start="93:36" pos:end="93:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:40" pos:end="93:40"><expr pos:start="93:40" pos:end="93:40"><literal type="number" pos:start="93:40" pos:end="93:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="103:42"><if pos:start="97:5" pos:end="103:42">if <condition pos:start="97:8" pos:end="97:22">(<expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:18">serial_hds</name><index pos:start="97:19" pos:end="97:21">[<expr pos:start="97:20" pos:end="97:20"><literal type="number" pos:start="97:20" pos:end="97:20">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="103:42"><block_content pos:start="99:9" pos:end="103:42">

        <expr_stmt pos:start="99:9" pos:end="103:42"><expr pos:start="99:9" pos:end="103:41"><name pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:14">serial</name><index pos:start="99:15" pos:end="99:17">[<expr pos:start="99:16" pos:end="99:16"><literal type="number" pos:start="99:16" pos:end="99:16">0</literal></expr>]</index></name> <operator pos:start="99:19" pos:end="99:19">=</operator> <call pos:start="99:21" pos:end="103:41"><name pos:start="99:21" pos:end="99:34">serial_mm_init</name><argument_list pos:start="99:35" pos:end="103:41">(<argument pos:start="99:36" pos:end="99:60"><expr pos:start="99:36" pos:end="99:60"><name pos:start="99:36" pos:end="99:60">MPC8544_SERIAL1_REGS_BASE</name></expr></argument>,

                        <argument pos:start="101:25" pos:end="101:25"><expr pos:start="101:25" pos:end="101:25"><literal type="number" pos:start="101:25" pos:end="101:25">0</literal></expr></argument>, <argument pos:start="101:28" pos:end="101:38"><expr pos:start="101:28" pos:end="101:38"><name pos:start="101:28" pos:end="101:38"><name pos:start="101:28" pos:end="101:31">mpic</name><index pos:start="101:32" pos:end="101:38">[<expr pos:start="101:33" pos:end="101:37"><literal type="number" pos:start="101:33" pos:end="101:35">12</literal><operator pos:start="101:35" pos:end="101:35">+</operator><literal type="number" pos:start="101:36" pos:end="101:37">26</literal></expr>]</index></name></expr></argument>, <argument pos:start="101:41" pos:end="101:46"><expr pos:start="101:41" pos:end="101:46"><literal type="number" pos:start="101:41" pos:end="101:46">399193</literal></expr></argument>,

                        <argument pos:start="103:25" pos:end="103:37"><expr pos:start="103:25" pos:end="103:37"><name pos:start="103:25" pos:end="103:37"><name pos:start="103:25" pos:end="103:34">serial_hds</name><index pos:start="103:35" pos:end="103:37">[<expr pos:start="103:36" pos:end="103:36"><literal type="number" pos:start="103:36" pos:end="103:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="103:40" pos:end="103:40"><expr pos:start="103:40" pos:end="103:40"><literal type="number" pos:start="103:40" pos:end="103:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:13">/* PCI */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:49"><expr pos:start="109:5" pos:end="109:48"><name pos:start="109:5" pos:end="109:12">pci_irqs</name> <operator pos:start="109:14" pos:end="109:14">=</operator> <call pos:start="109:16" pos:end="109:48"><name pos:start="109:16" pos:end="109:26">qemu_malloc</name><argument_list pos:start="109:27" pos:end="109:48">(<argument pos:start="109:28" pos:end="109:47"><expr pos:start="109:28" pos:end="109:47"><sizeof pos:start="109:28" pos:end="109:43">sizeof<argument_list pos:start="109:34" pos:end="109:43">(<argument pos:start="109:35" pos:end="109:42"><expr pos:start="109:35" pos:end="109:42"><name pos:start="109:35" pos:end="109:42">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="109:45" pos:end="109:45">*</operator> <literal type="number" pos:start="109:47" pos:end="109:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:39"><expr pos:start="111:5" pos:end="111:38"><name pos:start="111:5" pos:end="111:15"><name pos:start="111:5" pos:end="111:12">pci_irqs</name><index pos:start="111:13" pos:end="111:15">[<expr pos:start="111:14" pos:end="111:14"><literal type="number" pos:start="111:14" pos:end="111:14">0</literal></expr>]</index></name> <operator pos:start="111:17" pos:end="111:17">=</operator> <name pos:start="111:19" pos:end="111:38"><name pos:start="111:19" pos:end="111:22">mpic</name><index pos:start="111:23" pos:end="111:38">[<expr pos:start="111:24" pos:end="111:37"><name pos:start="111:24" pos:end="111:37"><name pos:start="111:24" pos:end="111:34">pci_irq_nrs</name><index pos:start="111:35" pos:end="111:37">[<expr pos:start="111:36" pos:end="111:36"><literal type="number" pos:start="111:36" pos:end="111:36">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:39"><expr pos:start="113:5" pos:end="113:38"><name pos:start="113:5" pos:end="113:15"><name pos:start="113:5" pos:end="113:12">pci_irqs</name><index pos:start="113:13" pos:end="113:15">[<expr pos:start="113:14" pos:end="113:14"><literal type="number" pos:start="113:14" pos:end="113:14">1</literal></expr>]</index></name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:38"><name pos:start="113:19" pos:end="113:22">mpic</name><index pos:start="113:23" pos:end="113:38">[<expr pos:start="113:24" pos:end="113:37"><name pos:start="113:24" pos:end="113:37"><name pos:start="113:24" pos:end="113:34">pci_irq_nrs</name><index pos:start="113:35" pos:end="113:37">[<expr pos:start="113:36" pos:end="113:36"><literal type="number" pos:start="113:36" pos:end="113:36">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:39"><expr pos:start="115:5" pos:end="115:38"><name pos:start="115:5" pos:end="115:15"><name pos:start="115:5" pos:end="115:12">pci_irqs</name><index pos:start="115:13" pos:end="115:15">[<expr pos:start="115:14" pos:end="115:14"><literal type="number" pos:start="115:14" pos:end="115:14">2</literal></expr>]</index></name> <operator pos:start="115:17" pos:end="115:17">=</operator> <name pos:start="115:19" pos:end="115:38"><name pos:start="115:19" pos:end="115:22">mpic</name><index pos:start="115:23" pos:end="115:38">[<expr pos:start="115:24" pos:end="115:37"><name pos:start="115:24" pos:end="115:37"><name pos:start="115:24" pos:end="115:34">pci_irq_nrs</name><index pos:start="115:35" pos:end="115:37">[<expr pos:start="115:36" pos:end="115:36"><literal type="number" pos:start="115:36" pos:end="115:36">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:39"><expr pos:start="117:5" pos:end="117:38"><name pos:start="117:5" pos:end="117:15"><name pos:start="117:5" pos:end="117:12">pci_irqs</name><index pos:start="117:13" pos:end="117:15">[<expr pos:start="117:14" pos:end="117:14"><literal type="number" pos:start="117:14" pos:end="117:14">3</literal></expr>]</index></name> <operator pos:start="117:17" pos:end="117:17">=</operator> <name pos:start="117:19" pos:end="117:38"><name pos:start="117:19" pos:end="117:22">mpic</name><index pos:start="117:23" pos:end="117:38">[<expr pos:start="117:24" pos:end="117:37"><name pos:start="117:24" pos:end="117:37"><name pos:start="117:24" pos:end="117:34">pci_irq_nrs</name><index pos:start="117:35" pos:end="117:37">[<expr pos:start="117:36" pos:end="117:36"><literal type="number" pos:start="117:36" pos:end="117:36">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:64"><expr pos:start="119:5" pos:end="119:63"><name pos:start="119:5" pos:end="119:11">pci_bus</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:63"><name pos:start="119:15" pos:end="119:30">ppce500_pci_init</name><argument_list pos:start="119:31" pos:end="119:63">(<argument pos:start="119:32" pos:end="119:39"><expr pos:start="119:32" pos:end="119:39"><name pos:start="119:32" pos:end="119:39">pci_irqs</name></expr></argument>, <argument pos:start="119:42" pos:end="119:62"><expr pos:start="119:42" pos:end="119:62"><name pos:start="119:42" pos:end="119:62">MPC8544_PCI_REGS_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="123:52"><if pos:start="121:5" pos:end="123:52">if <condition pos:start="121:8" pos:end="121:17">(<expr pos:start="121:9" pos:end="121:16"><operator pos:start="121:9" pos:end="121:9">!</operator><name pos:start="121:10" pos:end="121:16">pci_bus</name></expr>)</condition><block type="pseudo" pos:start="123:9" pos:end="123:52"><block_content pos:start="123:9" pos:end="123:52">

        <expr_stmt pos:start="123:9" pos:end="123:52"><expr pos:start="123:9" pos:end="123:51"><call pos:start="123:9" pos:end="123:51"><name pos:start="123:9" pos:end="123:14">printf</name><argument_list pos:start="123:15" pos:end="123:51">(<argument pos:start="123:16" pos:end="123:50"><expr pos:start="123:16" pos:end="123:50"><literal type="string" pos:start="123:16" pos:end="123:50">"couldn't create PCI controller!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:53"><expr pos:start="127:5" pos:end="127:52"><call pos:start="127:5" pos:end="127:52"><name pos:start="127:5" pos:end="127:17">isa_mmio_init</name><argument_list pos:start="127:18" pos:end="127:52">(<argument pos:start="127:19" pos:end="127:32"><expr pos:start="127:19" pos:end="127:32"><name pos:start="127:19" pos:end="127:32">MPC8544_PCI_IO</name></expr></argument>, <argument pos:start="127:35" pos:end="127:51"><expr pos:start="127:35" pos:end="127:51"><name pos:start="127:35" pos:end="127:51">MPC8544_PCI_IOLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="131:5" pos:end="141:5"><if pos:start="131:5" pos:end="141:5">if <condition pos:start="131:8" pos:end="131:16">(<expr pos:start="131:9" pos:end="131:15"><name pos:start="131:9" pos:end="131:15">pci_bus</name></expr>)</condition> <block pos:start="131:18" pos:end="141:5">{<block_content pos:start="135:9" pos:end="139:9">

        <comment type="block" pos:start="133:9" pos:end="133:42">/* Register network interfaces. */</comment>

        <for pos:start="135:9" pos:end="139:9">for <control pos:start="135:13" pos:end="135:37">(<init pos:start="135:14" pos:end="135:19"><expr pos:start="135:14" pos:end="135:18"><name pos:start="135:14" pos:end="135:14">i</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <literal type="number" pos:start="135:18" pos:end="135:18">0</literal></expr>;</init> <condition pos:start="135:21" pos:end="135:32"><expr pos:start="135:21" pos:end="135:31"><name pos:start="135:21" pos:end="135:21">i</name> <operator pos:start="135:23" pos:end="135:23">&lt;</operator> <name pos:start="135:25" pos:end="135:31">nb_nics</name></expr>;</condition> <incr pos:start="135:34" pos:end="135:36"><expr pos:start="135:34" pos:end="135:36"><name pos:start="135:34" pos:end="135:34">i</name><operator pos:start="135:35" pos:end="135:36">++</operator></expr></incr>)</control> <block pos:start="135:39" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:62">

            <expr_stmt pos:start="137:13" pos:end="137:62"><expr pos:start="137:13" pos:end="137:61"><call pos:start="137:13" pos:end="137:61"><name pos:start="137:13" pos:end="137:31">pci_nic_init_nofail</name><argument_list pos:start="137:32" pos:end="137:61">(<argument pos:start="137:33" pos:end="137:44"><expr pos:start="137:33" pos:end="137:44"><operator pos:start="137:33" pos:end="137:33">&amp;</operator><name pos:start="137:34" pos:end="137:44"><name pos:start="137:34" pos:end="137:41">nd_table</name><index pos:start="137:42" pos:end="137:44">[<expr pos:start="137:43" pos:end="137:43"><name pos:start="137:43" pos:end="137:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="137:47" pos:end="137:54"><expr pos:start="137:47" pos:end="137:54"><literal type="string" pos:start="137:47" pos:end="137:54">"virtio"</literal></expr></argument>, <argument pos:start="137:57" pos:end="137:60"><expr pos:start="137:57" pos:end="137:60"><name pos:start="137:57" pos:end="137:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:22">/* Load kernel. */</comment>

    <if_stmt pos:start="147:5" pos:end="175:5"><if pos:start="147:5" pos:end="175:5">if <condition pos:start="147:8" pos:end="147:24">(<expr pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:23">kernel_filename</name></expr>)</condition> <block pos:start="147:26" pos:end="175:5">{<block_content pos:start="149:9" pos:end="173:9">

        <expr_stmt pos:start="149:9" pos:end="149:76"><expr pos:start="149:9" pos:end="149:75"><name pos:start="149:9" pos:end="149:19">kernel_size</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <call pos:start="149:23" pos:end="149:75"><name pos:start="149:23" pos:end="149:33">load_uimage</name><argument_list pos:start="149:34" pos:end="149:75">(<argument pos:start="149:35" pos:end="149:49"><expr pos:start="149:35" pos:end="149:49"><name pos:start="149:35" pos:end="149:49">kernel_filename</name></expr></argument>, <argument pos:start="149:52" pos:end="149:57"><expr pos:start="149:52" pos:end="149:57"><operator pos:start="149:52" pos:end="149:52">&amp;</operator><name pos:start="149:53" pos:end="149:57">entry</name></expr></argument>, <argument pos:start="149:60" pos:end="149:68"><expr pos:start="149:60" pos:end="149:68"><operator pos:start="149:60" pos:end="149:60">&amp;</operator><name pos:start="149:61" pos:end="149:68">loadaddr</name></expr></argument>, <argument pos:start="149:71" pos:end="149:74"><expr pos:start="149:71" pos:end="149:74"><name pos:start="149:71" pos:end="149:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="161:9"><if pos:start="151:9" pos:end="161:9">if <condition pos:start="151:12" pos:end="151:28">(<expr pos:start="151:13" pos:end="151:27"><name pos:start="151:13" pos:end="151:23">kernel_size</name> <operator pos:start="151:25" pos:end="151:25">&lt;</operator> <literal type="number" pos:start="151:27" pos:end="151:27">0</literal></expr>)</condition> <block pos:start="151:30" pos:end="161:9">{<block_content pos:start="153:13" pos:end="159:35">

            <expr_stmt pos:start="153:13" pos:end="155:60"><expr pos:start="153:13" pos:end="155:59"><name pos:start="153:13" pos:end="153:23">kernel_size</name> <operator pos:start="153:25" pos:end="153:25">=</operator> <call pos:start="153:27" pos:end="155:59"><name pos:start="153:27" pos:end="153:34">load_elf</name><argument_list pos:start="153:35" pos:end="155:59">(<argument pos:start="153:36" pos:end="153:50"><expr pos:start="153:36" pos:end="153:50"><name pos:start="153:36" pos:end="153:50">kernel_filename</name></expr></argument>, <argument pos:start="153:53" pos:end="153:53"><expr pos:start="153:53" pos:end="153:53"><literal type="number" pos:start="153:53" pos:end="153:53">0</literal></expr></argument>, <argument pos:start="153:56" pos:end="153:65"><expr pos:start="153:56" pos:end="153:65"><operator pos:start="153:56" pos:end="153:56">&amp;</operator><name pos:start="153:57" pos:end="153:65">elf_entry</name></expr></argument>, <argument pos:start="153:68" pos:end="153:79"><expr pos:start="153:68" pos:end="153:79"><operator pos:start="153:68" pos:end="153:68">&amp;</operator><name pos:start="153:69" pos:end="153:79">elf_lowaddr</name></expr></argument>,

                                   <argument pos:start="155:36" pos:end="155:39"><expr pos:start="155:36" pos:end="155:39"><name pos:start="155:36" pos:end="155:39">NULL</name></expr></argument>, <argument pos:start="155:42" pos:end="155:42"><expr pos:start="155:42" pos:end="155:42"><literal type="number" pos:start="155:42" pos:end="155:42">1</literal></expr></argument>, <argument pos:start="155:45" pos:end="155:55"><expr pos:start="155:45" pos:end="155:55"><name pos:start="155:45" pos:end="155:55">ELF_MACHINE</name></expr></argument>, <argument pos:start="155:58" pos:end="155:58"><expr pos:start="155:58" pos:end="155:58"><literal type="number" pos:start="155:58" pos:end="155:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:30"><expr pos:start="157:13" pos:end="157:29"><name pos:start="157:13" pos:end="157:17">entry</name> <operator pos:start="157:19" pos:end="157:19">=</operator> <name pos:start="157:21" pos:end="157:29">elf_entry</name></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:35"><expr pos:start="159:13" pos:end="159:34"><name pos:start="159:13" pos:end="159:20">loadaddr</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <name pos:start="159:24" pos:end="159:34">elf_lowaddr</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="163:9" pos:end="163:37">/* XXX try again as binary */</comment>

        <if_stmt pos:start="165:9" pos:end="173:9"><if pos:start="165:9" pos:end="173:9">if <condition pos:start="165:12" pos:end="165:28">(<expr pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:23">kernel_size</name> <operator pos:start="165:25" pos:end="165:25">&lt;</operator> <literal type="number" pos:start="165:27" pos:end="165:27">0</literal></expr>)</condition> <block pos:start="165:30" pos:end="173:9">{<block_content pos:start="167:13" pos:end="171:20">

            <expr_stmt pos:start="167:13" pos:end="169:37"><expr pos:start="167:13" pos:end="169:36"><call pos:start="167:13" pos:end="169:36"><name pos:start="167:13" pos:end="167:19">fprintf</name><argument_list pos:start="167:20" pos:end="169:36">(<argument pos:start="167:21" pos:end="167:26"><expr pos:start="167:21" pos:end="167:26"><name pos:start="167:21" pos:end="167:26">stderr</name></expr></argument>, <argument pos:start="167:29" pos:end="167:64"><expr pos:start="167:29" pos:end="167:64"><literal type="string" pos:start="167:29" pos:end="167:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="169:21" pos:end="169:35"><expr pos:start="169:21" pos:end="169:35"><name pos:start="169:21" pos:end="169:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:20"><expr pos:start="171:13" pos:end="171:19"><call pos:start="171:13" pos:end="171:19"><name pos:start="171:13" pos:end="171:16">exit</name><argument_list pos:start="171:17" pos:end="171:19">(<argument pos:start="171:18" pos:end="171:18"><expr pos:start="171:18" pos:end="171:18"><literal type="number" pos:start="171:18" pos:end="171:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:22">/* Load initrd. */</comment>

    <if_stmt pos:start="181:5" pos:end="199:5"><if pos:start="181:5" pos:end="199:5">if <condition pos:start="181:8" pos:end="181:24">(<expr pos:start="181:9" pos:end="181:23"><name pos:start="181:9" pos:end="181:23">initrd_filename</name></expr>)</condition> <block pos:start="181:26" pos:end="199:5">{<block_content pos:start="183:9" pos:end="197:9">

        <expr_stmt pos:start="183:9" pos:end="185:66"><expr pos:start="183:9" pos:end="185:65"><name pos:start="183:9" pos:end="183:19">initrd_size</name> <operator pos:start="183:21" pos:end="183:21">=</operator> <call pos:start="183:23" pos:end="185:65"><name pos:start="183:23" pos:end="183:41">load_image_targphys</name><argument_list pos:start="183:42" pos:end="185:65">(<argument pos:start="183:43" pos:end="183:57"><expr pos:start="183:43" pos:end="183:57"><name pos:start="183:43" pos:end="183:57">initrd_filename</name></expr></argument>, <argument pos:start="183:60" pos:end="183:70"><expr pos:start="183:60" pos:end="183:70"><name pos:start="183:60" pos:end="183:70">initrd_base</name></expr></argument>,

                                          <argument pos:start="185:43" pos:end="185:64"><expr pos:start="185:43" pos:end="185:64"><name pos:start="185:43" pos:end="185:50">ram_size</name> <operator pos:start="185:52" pos:end="185:52">-</operator> <name pos:start="185:54" pos:end="185:64">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="189:9" pos:end="197:9"><if pos:start="189:9" pos:end="197:9">if <condition pos:start="189:12" pos:end="189:28">(<expr pos:start="189:13" pos:end="189:27"><name pos:start="189:13" pos:end="189:23">initrd_size</name> <operator pos:start="189:25" pos:end="189:25">&lt;</operator> <literal type="number" pos:start="189:27" pos:end="189:27">0</literal></expr>)</condition> <block pos:start="189:30" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:20">

            <expr_stmt pos:start="191:13" pos:end="193:37"><expr pos:start="191:13" pos:end="193:36"><call pos:start="191:13" pos:end="193:36"><name pos:start="191:13" pos:end="191:19">fprintf</name><argument_list pos:start="191:20" pos:end="193:36">(<argument pos:start="191:21" pos:end="191:26"><expr pos:start="191:21" pos:end="191:26"><name pos:start="191:21" pos:end="191:26">stderr</name></expr></argument>, <argument pos:start="191:29" pos:end="191:74"><expr pos:start="191:29" pos:end="191:74"><literal type="string" pos:start="191:29" pos:end="191:74">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                    <argument pos:start="193:21" pos:end="193:35"><expr pos:start="193:21" pos:end="193:35"><name pos:start="193:21" pos:end="193:35">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:20"><expr pos:start="195:13" pos:end="195:19"><call pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:16">exit</name><argument_list pos:start="195:17" pos:end="195:19">(<argument pos:start="195:18" pos:end="195:18"><expr pos:start="195:18" pos:end="195:18"><literal type="number" pos:start="195:18" pos:end="195:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:79">/* If we're loading a kernel directly, we must load the device tree too. */</comment>

    <if_stmt pos:start="205:5" pos:end="235:5"><if pos:start="205:5" pos:end="235:5">if <condition pos:start="205:8" pos:end="205:24">(<expr pos:start="205:9" pos:end="205:23"><name pos:start="205:9" pos:end="205:23">kernel_filename</name></expr>)</condition> <block pos:start="205:26" pos:end="235:5">{<block_content pos:start="207:9" pos:end="231:25">

        <expr_stmt pos:start="207:9" pos:end="209:80"><expr pos:start="207:9" pos:end="209:79"><name pos:start="207:9" pos:end="207:11">fdt</name> <operator pos:start="207:13" pos:end="207:13">=</operator> <call pos:start="207:15" pos:end="209:79"><name pos:start="207:15" pos:end="207:38">mpc8544_load_device_tree</name><argument_list pos:start="207:39" pos:end="209:79">(<argument pos:start="207:40" pos:end="207:46"><expr pos:start="207:40" pos:end="207:46"><name pos:start="207:40" pos:end="207:46">dt_base</name></expr></argument>, <argument pos:start="207:49" pos:end="207:56"><expr pos:start="207:49" pos:end="207:56"><name pos:start="207:49" pos:end="207:56">ram_size</name></expr></argument>,

                                      <argument pos:start="209:39" pos:end="209:49"><expr pos:start="209:39" pos:end="209:49"><name pos:start="209:39" pos:end="209:49">initrd_base</name></expr></argument>, <argument pos:start="209:52" pos:end="209:62"><expr pos:start="209:52" pos:end="209:62"><name pos:start="209:52" pos:end="209:62">initrd_size</name></expr></argument>, <argument pos:start="209:65" pos:end="209:78"><expr pos:start="209:65" pos:end="209:78"><name pos:start="209:65" pos:end="209:78">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="217:9"><if pos:start="211:9" pos:end="217:9">if <condition pos:start="211:12" pos:end="211:24">(<expr pos:start="211:13" pos:end="211:23"><name pos:start="211:13" pos:end="211:15">fdt</name> <operator pos:start="211:17" pos:end="211:18">==</operator> <name pos:start="211:20" pos:end="211:23">NULL</name></expr>)</condition> <block pos:start="211:26" pos:end="217:9">{<block_content pos:start="213:13" pos:end="215:20">

            <expr_stmt pos:start="213:13" pos:end="213:59"><expr pos:start="213:13" pos:end="213:58"><call pos:start="213:13" pos:end="213:58"><name pos:start="213:13" pos:end="213:19">fprintf</name><argument_list pos:start="213:20" pos:end="213:58">(<argument pos:start="213:21" pos:end="213:26"><expr pos:start="213:21" pos:end="213:26"><name pos:start="213:21" pos:end="213:26">stderr</name></expr></argument>, <argument pos:start="213:29" pos:end="213:57"><expr pos:start="213:29" pos:end="213:57"><literal type="string" pos:start="213:29" pos:end="213:57">"couldn't load device tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:20"><expr pos:start="215:13" pos:end="215:19"><call pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:16">exit</name><argument_list pos:start="215:17" pos:end="215:19">(<argument pos:start="215:18" pos:end="215:18"><expr pos:start="215:18" pos:end="215:18"><literal type="number" pos:start="215:18" pos:end="215:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="221:9" pos:end="221:35"><expr pos:start="221:9" pos:end="221:34"><call pos:start="221:9" pos:end="221:34"><name pos:start="221:9" pos:end="221:29">cpu_synchronize_state</name><argument_list pos:start="221:30" pos:end="221:34">(<argument pos:start="221:31" pos:end="221:33"><expr pos:start="221:31" pos:end="221:33"><name pos:start="221:31" pos:end="221:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="225:9" pos:end="225:38">/* Set initial guest state. */</comment>

        <expr_stmt pos:start="227:9" pos:end="227:35"><expr pos:start="227:9" pos:end="227:34"><name pos:start="227:9" pos:end="227:19"><name pos:start="227:9" pos:end="227:11">env</name><operator pos:start="227:12" pos:end="227:13">-&gt;</operator><name pos:start="227:14" pos:end="227:16">gpr</name><index pos:start="227:17" pos:end="227:19">[<expr pos:start="227:18" pos:end="227:18"><literal type="number" pos:start="227:18" pos:end="227:18">1</literal></expr>]</index></name> <operator pos:start="227:21" pos:end="227:21">=</operator> <operator pos:start="227:23" pos:end="227:23">(</operator><literal type="number" pos:start="227:24" pos:end="227:25">16</literal><operator pos:start="227:26" pos:end="227:27">&lt;&lt;</operator><literal type="number" pos:start="227:28" pos:end="227:29">20</literal><operator pos:start="227:30" pos:end="227:30">)</operator> <operator pos:start="227:32" pos:end="227:32">-</operator> <literal type="number" pos:start="227:34" pos:end="227:34">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:30"><expr pos:start="229:9" pos:end="229:29"><name pos:start="229:9" pos:end="229:19"><name pos:start="229:9" pos:end="229:11">env</name><operator pos:start="229:12" pos:end="229:13">-&gt;</operator><name pos:start="229:14" pos:end="229:16">gpr</name><index pos:start="229:17" pos:end="229:19">[<expr pos:start="229:18" pos:end="229:18"><literal type="number" pos:start="229:18" pos:end="229:18">3</literal></expr>]</index></name> <operator pos:start="229:21" pos:end="229:21">=</operator> <name pos:start="229:23" pos:end="229:29">dt_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:25"><expr pos:start="231:9" pos:end="231:24"><name pos:start="231:9" pos:end="231:16"><name pos:start="231:9" pos:end="231:11">env</name><operator pos:start="231:12" pos:end="231:13">-&gt;</operator><name pos:start="231:14" pos:end="231:16">nip</name></name> <operator pos:start="231:18" pos:end="231:18">=</operator> <name pos:start="231:20" pos:end="231:24">entry</name></expr>;</expr_stmt>

        <comment type="block" pos:start="233:9" pos:end="233:80">/* XXX we currently depend on KVM to create some initial TLB entries. */</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="241:22"><if pos:start="239:5" pos:end="241:22">if <condition pos:start="239:8" pos:end="239:22">(<expr pos:start="239:9" pos:end="239:21"><call pos:start="239:9" pos:end="239:21"><name pos:start="239:9" pos:end="239:19">kvm_enabled</name><argument_list pos:start="239:20" pos:end="239:21">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="241:9" pos:end="241:22"><block_content pos:start="241:9" pos:end="241:22">

        <expr_stmt pos:start="241:9" pos:end="241:22"><expr pos:start="241:9" pos:end="241:21"><call pos:start="241:9" pos:end="241:21"><name pos:start="241:9" pos:end="241:19">kvmppc_init</name><argument_list pos:start="241:20" pos:end="241:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="245:5" pos:end="245:11">return;</return>

</block_content>}</block></function>
</unit>
