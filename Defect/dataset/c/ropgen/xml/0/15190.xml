<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15190.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">nbd_init</name><parameter_list pos:start="1:13" pos:end="3:26">(<parameter pos:start="1:14" pos:end="1:19"><decl pos:start="1:14" pos:end="1:19"><type pos:start="1:14" pos:end="1:19"><name pos:start="1:14" pos:end="1:16">int</name></type> <name pos:start="1:18" pos:end="1:19">fd</name></decl></parameter>, <parameter pos:start="1:22" pos:end="1:43"><decl pos:start="1:22" pos:end="1:43"><type pos:start="1:22" pos:end="1:43"><name pos:start="1:22" pos:end="1:37">QIOChannelSocket</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">sioc</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:64"><decl pos:start="1:46" pos:end="1:64"><type pos:start="1:46" pos:end="1:64"><name pos:start="1:46" pos:end="1:58">NBDExportInfo</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">info</name></decl></parameter>,

             <parameter pos:start="3:14" pos:end="3:25"><decl pos:start="3:14" pos:end="3:25"><type pos:start="3:14" pos:end="3:25"><name pos:start="3:14" pos:end="3:18">Error</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier><modifier pos:start="3:21" pos:end="3:21">*</modifier></type><name pos:start="3:22" pos:end="3:25">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="115:1">{<block_content pos:start="7:5" pos:end="113:13">

    <decl_stmt pos:start="7:5" pos:end="7:58"><decl pos:start="7:5" pos:end="7:57"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">long</name></type> <name pos:start="7:19" pos:end="7:25">sectors</name> <init pos:start="7:27" pos:end="7:57">= <expr pos:start="7:29" pos:end="7:57"><name pos:start="7:29" pos:end="7:38"><name pos:start="7:29" pos:end="7:32">info</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:38">size</name></name> <operator pos:start="7:40" pos:end="7:40">/</operator> <name pos:start="7:42" pos:end="7:57">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="9:5" pos:end="17:5"><if pos:start="9:5" pos:end="17:5">if <condition pos:start="9:8" pos:end="9:49">(<expr pos:start="9:9" pos:end="9:48"><name pos:start="9:9" pos:end="9:18"><name pos:start="9:9" pos:end="9:12">info</name><operator pos:start="9:13" pos:end="9:14">-&gt;</operator><name pos:start="9:15" pos:end="9:18">size</name></name> <operator pos:start="9:20" pos:end="9:20">/</operator> <name pos:start="9:22" pos:end="9:37">BDRV_SECTOR_SIZE</name> <operator pos:start="9:39" pos:end="9:40">!=</operator> <name pos:start="9:42" pos:end="9:48">sectors</name></expr>)</condition> <block pos:start="9:51" pos:end="17:5">{<block_content pos:start="11:9" pos:end="15:22">

        <expr_stmt pos:start="11:9" pos:end="13:31"><expr pos:start="11:9" pos:end="13:30"><call pos:start="11:9" pos:end="13:30"><name pos:start="11:9" pos:end="11:18">error_setg</name><argument_list pos:start="11:19" pos:end="13:30">(<argument pos:start="11:20" pos:end="11:23"><expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">errp</name></expr></argument>, <argument pos:start="11:26" pos:end="11:78"><expr pos:start="11:26" pos:end="11:78"><literal type="string" pos:start="11:26" pos:end="11:40">"Export size %"</literal> <name pos:start="11:42" pos:end="11:47">PRIu64</name> <literal type="string" pos:start="11:49" pos:end="11:78">" too large for 32-bit kernel"</literal></expr></argument>,

                   <argument pos:start="13:20" pos:end="13:29"><expr pos:start="13:20" pos:end="13:29"><name pos:start="13:20" pos:end="13:29"><name pos:start="13:20" pos:end="13:23">info</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:22">return <expr pos:start="15:16" pos:end="15:21"><operator pos:start="15:16" pos:end="15:16">-</operator><name pos:start="15:17" pos:end="15:21">E2BIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:32"><expr pos:start="21:5" pos:end="21:31"><call pos:start="21:5" pos:end="21:31"><name pos:start="21:5" pos:end="21:29">trace_nbd_init_set_socket</name><argument_list pos:start="21:30" pos:end="21:31">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:62">(<expr pos:start="25:9" pos:end="25:61"><call pos:start="25:9" pos:end="25:57"><name pos:start="25:9" pos:end="25:13">ioctl</name><argument_list pos:start="25:14" pos:end="25:57">(<argument pos:start="25:15" pos:end="25:16"><expr pos:start="25:15" pos:end="25:16"><name pos:start="25:15" pos:end="25:16">fd</name></expr></argument>, <argument pos:start="25:19" pos:end="25:30"><expr pos:start="25:19" pos:end="25:30"><name pos:start="25:19" pos:end="25:30">NBD_SET_SOCK</name></expr></argument>, <argument pos:start="25:33" pos:end="25:56"><expr pos:start="25:33" pos:end="25:56"><operator pos:start="25:33" pos:end="25:33">(</operator><name pos:start="25:34" pos:end="25:41">unsigned</name> <name pos:start="25:43" pos:end="25:46">long</name><operator pos:start="25:47" pos:end="25:47">)</operator> <name pos:start="25:49" pos:end="25:56"><name pos:start="25:49" pos:end="25:52">sioc</name><operator pos:start="25:53" pos:end="25:54">-&gt;</operator><name pos:start="25:55" pos:end="25:56">fd</name></name></expr></argument>)</argument_list></call> <operator pos:start="25:59" pos:end="25:59">&lt;</operator> <literal type="number" pos:start="25:61" pos:end="25:61">0</literal></expr>)</condition> <block pos:start="25:64" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:23">

        <decl_stmt pos:start="27:9" pos:end="27:27"><decl pos:start="27:9" pos:end="27:26"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:18">serrno</name> <init pos:start="27:20" pos:end="27:26">= <expr pos:start="27:22" pos:end="27:26"><name pos:start="27:22" pos:end="27:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:53"><expr pos:start="29:9" pos:end="29:52"><call pos:start="29:9" pos:end="29:52"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="29:52">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="29:51"><expr pos:start="29:26" pos:end="29:51"><literal type="string" pos:start="29:26" pos:end="29:51">"Failed to set NBD socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:23">return <expr pos:start="31:16" pos:end="31:22"><operator pos:start="31:16" pos:end="31:16">-</operator><name pos:start="31:17" pos:end="31:22">serrno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:52"><expr pos:start="37:5" pos:end="37:51"><call pos:start="37:5" pos:end="37:51"><name pos:start="37:5" pos:end="37:33">trace_nbd_init_set_block_size</name><argument_list pos:start="37:34" pos:end="37:51">(<argument pos:start="37:35" pos:end="37:50"><expr pos:start="37:35" pos:end="37:50"><name pos:start="37:35" pos:end="37:50">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:72">(<expr pos:start="41:9" pos:end="41:71"><call pos:start="41:9" pos:end="41:67"><name pos:start="41:9" pos:end="41:13">ioctl</name><argument_list pos:start="41:14" pos:end="41:67">(<argument pos:start="41:15" pos:end="41:16"><expr pos:start="41:15" pos:end="41:16"><name pos:start="41:15" pos:end="41:16">fd</name></expr></argument>, <argument pos:start="41:19" pos:end="41:33"><expr pos:start="41:19" pos:end="41:33"><name pos:start="41:19" pos:end="41:33">NBD_SET_BLKSIZE</name></expr></argument>, <argument pos:start="41:36" pos:end="41:66"><expr pos:start="41:36" pos:end="41:66"><operator pos:start="41:36" pos:end="41:36">(</operator><name pos:start="41:37" pos:end="41:44">unsigned</name> <name pos:start="41:46" pos:end="41:49">long</name><operator pos:start="41:50" pos:end="41:50">)</operator><name pos:start="41:51" pos:end="41:66">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="41:69" pos:end="41:69">&lt;</operator> <literal type="number" pos:start="41:71" pos:end="41:71">0</literal></expr>)</condition> <block pos:start="41:74" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:23">

        <decl_stmt pos:start="43:9" pos:end="43:27"><decl pos:start="43:9" pos:end="43:26"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:18">serrno</name> <init pos:start="43:20" pos:end="43:26">= <expr pos:start="43:22" pos:end="43:26"><name pos:start="43:22" pos:end="43:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:58"><expr pos:start="45:9" pos:end="45:57"><call pos:start="45:9" pos:end="45:57"><name pos:start="45:9" pos:end="45:18">error_setg</name><argument_list pos:start="45:19" pos:end="45:57">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">errp</name></expr></argument>, <argument pos:start="45:26" pos:end="45:56"><expr pos:start="45:26" pos:end="45:56"><literal type="string" pos:start="45:26" pos:end="45:56">"Failed setting NBD block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:23">return <expr pos:start="47:16" pos:end="47:22"><operator pos:start="47:16" pos:end="47:16">-</operator><name pos:start="47:17" pos:end="47:22">serrno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><call pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:27">trace_nbd_init_set_size</name><argument_list pos:start="53:28" pos:end="53:36">(<argument pos:start="53:29" pos:end="53:35"><expr pos:start="53:29" pos:end="53:35"><name pos:start="53:29" pos:end="53:35">sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:38">(<expr pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:12">info</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:18">size</name></name> <operator pos:start="55:20" pos:end="55:20">%</operator> <name pos:start="55:22" pos:end="55:37">BDRV_SECTOR_SIZE</name></expr>)</condition> <block pos:start="55:40" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:69">

        <expr_stmt pos:start="57:9" pos:end="57:69"><expr pos:start="57:9" pos:end="57:68"><call pos:start="57:9" pos:end="57:68"><name pos:start="57:9" pos:end="57:37">trace_nbd_init_trailing_bytes</name><argument_list pos:start="57:38" pos:end="57:68">(<argument pos:start="57:39" pos:end="57:67"><expr pos:start="57:39" pos:end="57:67"><name pos:start="57:39" pos:end="57:48"><name pos:start="57:39" pos:end="57:42">info</name><operator pos:start="57:43" pos:end="57:44">-&gt;</operator><name pos:start="57:45" pos:end="57:48">size</name></name> <operator pos:start="57:50" pos:end="57:50">%</operator> <name pos:start="57:52" pos:end="57:67">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if <condition pos:start="63:8" pos:end="63:52">(<expr pos:start="63:9" pos:end="63:51"><call pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:13">ioctl</name><argument_list pos:start="63:14" pos:end="63:47">(<argument pos:start="63:15" pos:end="63:16"><expr pos:start="63:15" pos:end="63:16"><name pos:start="63:15" pos:end="63:16">fd</name></expr></argument>, <argument pos:start="63:19" pos:end="63:37"><expr pos:start="63:19" pos:end="63:37"><name pos:start="63:19" pos:end="63:37">NBD_SET_SIZE_BLOCKS</name></expr></argument>, <argument pos:start="63:40" pos:end="63:46"><expr pos:start="63:40" pos:end="63:46"><name pos:start="63:40" pos:end="63:46">sectors</name></expr></argument>)</argument_list></call> <operator pos:start="63:49" pos:end="63:49">&lt;</operator> <literal type="number" pos:start="63:51" pos:end="63:51">0</literal></expr>)</condition> <block pos:start="63:54" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:23">

        <decl_stmt pos:start="65:9" pos:end="65:27"><decl pos:start="65:9" pos:end="65:26"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:18">serrno</name> <init pos:start="65:20" pos:end="65:26">= <expr pos:start="65:22" pos:end="65:26"><name pos:start="65:22" pos:end="65:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:60"><expr pos:start="67:9" pos:end="67:59"><call pos:start="67:9" pos:end="67:59"><name pos:start="67:9" pos:end="67:18">error_setg</name><argument_list pos:start="67:19" pos:end="67:59">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">errp</name></expr></argument>, <argument pos:start="67:26" pos:end="67:58"><expr pos:start="67:26" pos:end="67:58"><literal type="string" pos:start="67:26" pos:end="67:58">"Failed setting size (in blocks)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:23">return <expr pos:start="69:16" pos:end="69:22"><operator pos:start="69:16" pos:end="69:16">-</operator><name pos:start="69:17" pos:end="69:22">serrno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="105:5"><if pos:start="75:5" pos:end="105:5">if <condition pos:start="75:8" pos:end="75:66">(<expr pos:start="75:9" pos:end="75:65"><call pos:start="75:9" pos:end="75:61"><name pos:start="75:9" pos:end="75:13">ioctl</name><argument_list pos:start="75:14" pos:end="75:61">(<argument pos:start="75:15" pos:end="75:16"><expr pos:start="75:15" pos:end="75:16"><name pos:start="75:15" pos:end="75:16">fd</name></expr></argument>, <argument pos:start="75:19" pos:end="75:31"><expr pos:start="75:19" pos:end="75:31"><name pos:start="75:19" pos:end="75:31">NBD_SET_FLAGS</name></expr></argument>, <argument pos:start="75:34" pos:end="75:60"><expr pos:start="75:34" pos:end="75:60"><operator pos:start="75:34" pos:end="75:34">(</operator><name pos:start="75:35" pos:end="75:42">unsigned</name> <name pos:start="75:44" pos:end="75:47">long</name><operator pos:start="75:48" pos:end="75:48">)</operator> <name pos:start="75:50" pos:end="75:60"><name pos:start="75:50" pos:end="75:53">info</name><operator pos:start="75:54" pos:end="75:55">-&gt;</operator><name pos:start="75:56" pos:end="75:60">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="75:63" pos:end="75:63">&lt;</operator> <literal type="number" pos:start="75:65" pos:end="75:65">0</literal></expr>)</condition> <block pos:start="75:68" pos:end="105:5">{<block_content pos:start="77:9" pos:end="103:9">

        <if_stmt pos:start="77:9" pos:end="103:9"><if pos:start="77:9" pos:end="95:9">if <condition pos:start="77:12" pos:end="77:28">(<expr pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:17">errno</name> <operator pos:start="77:19" pos:end="77:20">==</operator> <name pos:start="77:22" pos:end="77:27">ENOTTY</name></expr>)</condition> <block pos:start="77:30" pos:end="95:9">{<block_content pos:start="79:13" pos:end="93:13">

            <decl_stmt pos:start="79:13" pos:end="79:68"><decl pos:start="79:13" pos:end="79:67"><type pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">int</name></type> <name pos:start="79:17" pos:end="79:25">read_only</name> <init pos:start="79:27" pos:end="79:67">= <expr pos:start="79:29" pos:end="79:67"><operator pos:start="79:29" pos:end="79:29">(</operator><name pos:start="79:30" pos:end="79:40"><name pos:start="79:30" pos:end="79:33">info</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:40">flags</name></name> <operator pos:start="79:42" pos:end="79:42">&amp;</operator> <name pos:start="79:44" pos:end="79:61">NBD_FLAG_READ_ONLY</name><operator pos:start="79:62" pos:end="79:62">)</operator> <operator pos:start="79:64" pos:end="79:65">!=</operator> <literal type="number" pos:start="79:67" pos:end="79:67">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:42"><expr pos:start="81:13" pos:end="81:41"><call pos:start="81:13" pos:end="81:41"><name pos:start="81:13" pos:end="81:39">trace_nbd_init_set_readonly</name><argument_list pos:start="81:40" pos:end="81:41">()</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="85:13" pos:end="93:13"><if pos:start="85:13" pos:end="93:13">if <condition pos:start="85:16" pos:end="85:68">(<expr pos:start="85:17" pos:end="85:67"><call pos:start="85:17" pos:end="85:63"><name pos:start="85:17" pos:end="85:21">ioctl</name><argument_list pos:start="85:22" pos:end="85:63">(<argument pos:start="85:23" pos:end="85:24"><expr pos:start="85:23" pos:end="85:24"><name pos:start="85:23" pos:end="85:24">fd</name></expr></argument>, <argument pos:start="85:27" pos:end="85:34"><expr pos:start="85:27" pos:end="85:34"><name pos:start="85:27" pos:end="85:34">BLKROSET</name></expr></argument>, <argument pos:start="85:37" pos:end="85:62"><expr pos:start="85:37" pos:end="85:62"><operator pos:start="85:37" pos:end="85:37">(</operator><name pos:start="85:38" pos:end="85:45">unsigned</name> <name pos:start="85:47" pos:end="85:50">long</name><operator pos:start="85:51" pos:end="85:51">)</operator> <operator pos:start="85:53" pos:end="85:53">&amp;</operator><name pos:start="85:54" pos:end="85:62">read_only</name></expr></argument>)</argument_list></call> <operator pos:start="85:65" pos:end="85:65">&lt;</operator> <literal type="number" pos:start="85:67" pos:end="85:67">0</literal></expr>)</condition> <block pos:start="85:70" pos:end="93:13">{<block_content pos:start="87:17" pos:end="91:31">

                <decl_stmt pos:start="87:17" pos:end="87:35"><decl pos:start="87:17" pos:end="87:34"><type pos:start="87:17" pos:end="87:19"><name pos:start="87:17" pos:end="87:19">int</name></type> <name pos:start="87:21" pos:end="87:26">serrno</name> <init pos:start="87:28" pos:end="87:34">= <expr pos:start="87:30" pos:end="87:34"><name pos:start="87:30" pos:end="87:34">errno</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:71"><expr pos:start="89:17" pos:end="89:70"><call pos:start="89:17" pos:end="89:70"><name pos:start="89:17" pos:end="89:26">error_setg</name><argument_list pos:start="89:27" pos:end="89:70">(<argument pos:start="89:28" pos:end="89:31"><expr pos:start="89:28" pos:end="89:31"><name pos:start="89:28" pos:end="89:31">errp</name></expr></argument>, <argument pos:start="89:34" pos:end="89:69"><expr pos:start="89:34" pos:end="89:69"><literal type="string" pos:start="89:34" pos:end="89:69">"Failed setting read-only attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="91:17" pos:end="91:31">return <expr pos:start="91:24" pos:end="91:30"><operator pos:start="91:24" pos:end="91:24">-</operator><name pos:start="91:25" pos:end="91:30">serrno</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="95:11" pos:end="103:9">else <block pos:start="95:16" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:27">

            <decl_stmt pos:start="97:13" pos:end="97:31"><decl pos:start="97:13" pos:end="97:30"><type pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">int</name></type> <name pos:start="97:17" pos:end="97:22">serrno</name> <init pos:start="97:24" pos:end="97:30">= <expr pos:start="97:26" pos:end="97:30"><name pos:start="97:26" pos:end="97:30">errno</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:53"><expr pos:start="99:13" pos:end="99:52"><call pos:start="99:13" pos:end="99:52"><name pos:start="99:13" pos:end="99:22">error_setg</name><argument_list pos:start="99:23" pos:end="99:52">(<argument pos:start="99:24" pos:end="99:27"><expr pos:start="99:24" pos:end="99:27"><name pos:start="99:24" pos:end="99:27">errp</name></expr></argument>, <argument pos:start="99:30" pos:end="99:51"><expr pos:start="99:30" pos:end="99:51"><literal type="string" pos:start="99:30" pos:end="99:51">"Failed setting flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:27">return <expr pos:start="101:20" pos:end="101:26"><operator pos:start="101:20" pos:end="101:20">-</operator><name pos:start="101:21" pos:end="101:26">serrno</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:28"><expr pos:start="109:5" pos:end="109:27"><call pos:start="109:5" pos:end="109:27"><name pos:start="109:5" pos:end="109:25">trace_nbd_init_finish</name><argument_list pos:start="109:26" pos:end="109:27">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
