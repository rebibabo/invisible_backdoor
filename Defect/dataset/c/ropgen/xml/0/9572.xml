<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9572.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">host_x86_cpu_initfn</name><parameter_list pos:start="1:32" pos:end="1:44">(<parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:40"><name pos:start="1:33" pos:end="1:38">Object</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">obj</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:69">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">X86CPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:30">= <expr pos:start="5:19" pos:end="5:30"><call pos:start="5:19" pos:end="5:30"><name pos:start="5:19" pos:end="5:25">X86_CPU</name><argument_list pos:start="5:26" pos:end="5:30">(<argument pos:start="5:27" pos:end="5:29"><expr pos:start="5:27" pos:end="5:29"><name pos:start="5:27" pos:end="5:29">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUX86State</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">KVMState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:27">= <expr pos:start="9:19" pos:end="9:27"><name pos:start="9:19" pos:end="9:27">kvm_state</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:7">/* We can't fill the features array here because we don't know yet if

     * "migratable" is true or false.

     */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:7">cpu</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:22">host_features</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:29">true</name></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:75">/* If KVM is disabled, cpu_x86_create() will already report an error */</comment>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><call pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:19">kvm_enabled</name><argument_list pos:start="25:20" pos:end="25:21">()</argument_list></call></expr>)</condition> <block pos:start="25:24" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:83">

        <expr_stmt pos:start="27:9" pos:end="27:74"><expr pos:start="27:9" pos:end="27:73"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:11">env</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:24">cpuid_level</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <call pos:start="27:28" pos:end="27:73"><name pos:start="27:28" pos:end="27:55">kvm_arch_get_supported_cpuid</name><argument_list pos:start="27:56" pos:end="27:73">(<argument pos:start="27:57" pos:end="27:57"><expr pos:start="27:57" pos:end="27:57"><name pos:start="27:57" pos:end="27:57">s</name></expr></argument>, <argument pos:start="27:60" pos:end="27:62"><expr pos:start="27:60" pos:end="27:62"><literal type="number" pos:start="27:60" pos:end="27:62">0x0</literal></expr></argument>, <argument pos:start="27:65" pos:end="27:65"><expr pos:start="27:65" pos:end="27:65"><literal type="number" pos:start="27:65" pos:end="27:65">0</literal></expr></argument>, <argument pos:start="27:68" pos:end="27:72"><expr pos:start="27:68" pos:end="27:72"><name pos:start="27:68" pos:end="27:72">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:82"><expr pos:start="29:9" pos:end="29:81"><name pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:11">env</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:25">cpuid_xlevel</name></name> <operator pos:start="29:27" pos:end="29:27">=</operator> <call pos:start="29:29" pos:end="29:81"><name pos:start="29:29" pos:end="29:56">kvm_arch_get_supported_cpuid</name><argument_list pos:start="29:57" pos:end="29:81">(<argument pos:start="29:58" pos:end="29:58"><expr pos:start="29:58" pos:end="29:58"><name pos:start="29:58" pos:end="29:58">s</name></expr></argument>, <argument pos:start="29:61" pos:end="29:70"><expr pos:start="29:61" pos:end="29:70"><literal type="number" pos:start="29:61" pos:end="29:70">0x80000000</literal></expr></argument>, <argument pos:start="29:73" pos:end="29:73"><expr pos:start="29:73" pos:end="29:73"><literal type="number" pos:start="29:73" pos:end="29:73">0</literal></expr></argument>, <argument pos:start="29:76" pos:end="29:80"><expr pos:start="29:76" pos:end="29:80"><name pos:start="29:76" pos:end="29:80">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:83"><expr pos:start="31:9" pos:end="31:82"><name pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:11">env</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:26">cpuid_xlevel2</name></name> <operator pos:start="31:28" pos:end="31:28">=</operator> <call pos:start="31:30" pos:end="31:82"><name pos:start="31:30" pos:end="31:57">kvm_arch_get_supported_cpuid</name><argument_list pos:start="31:58" pos:end="31:82">(<argument pos:start="31:59" pos:end="31:59"><expr pos:start="31:59" pos:end="31:59"><name pos:start="31:59" pos:end="31:59">s</name></expr></argument>, <argument pos:start="31:62" pos:end="31:71"><expr pos:start="31:62" pos:end="31:71"><literal type="number" pos:start="31:62" pos:end="31:71">0xC0000000</literal></expr></argument>, <argument pos:start="31:74" pos:end="31:74"><expr pos:start="31:74" pos:end="31:74"><literal type="number" pos:start="31:74" pos:end="31:74">0</literal></expr></argument>, <argument pos:start="31:77" pos:end="31:81"><expr pos:start="31:77" pos:end="31:81"><name pos:start="31:77" pos:end="31:81">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:69"><expr pos:start="37:5" pos:end="37:68"><call pos:start="37:5" pos:end="37:68"><name pos:start="37:5" pos:end="37:28">object_property_set_bool</name><argument_list pos:start="37:29" pos:end="37:68">(<argument pos:start="37:30" pos:end="37:40"><expr pos:start="37:30" pos:end="37:40"><call pos:start="37:30" pos:end="37:40"><name pos:start="37:30" pos:end="37:35">OBJECT</name><argument_list pos:start="37:36" pos:end="37:40">(<argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><name pos:start="37:37" pos:end="37:39">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:43" pos:end="37:46"><expr pos:start="37:43" pos:end="37:46"><name pos:start="37:43" pos:end="37:46">true</name></expr></argument>, <argument pos:start="37:49" pos:end="37:53"><expr pos:start="37:49" pos:end="37:53"><literal type="string" pos:start="37:49" pos:end="37:53">"pmu"</literal></expr></argument>, <argument pos:start="37:56" pos:end="37:67"><expr pos:start="37:56" pos:end="37:67"><operator pos:start="37:56" pos:end="37:56">&amp;</operator><name pos:start="37:57" pos:end="37:67">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
