<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24357.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">mjpegb_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:55">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>, 

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:34">void</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">data</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">data_size</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:40"><decl pos:start="5:31" pos:end="5:40"><type pos:start="5:31" pos:end="5:40"><name pos:start="5:31" pos:end="5:35">UINT8</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="245:1">{<block_content pos:start="9:5" pos:end="243:25">

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">MJpegDecodeContext</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:25">s</name> <init pos:start="9:27" pos:end="9:44">= <expr pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:33">avctx</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">UINT8</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:18">buf_end</name></decl>, <decl pos:start="11:21" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:11"><modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:28">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">AVPicture</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:22">picture</name> <init pos:start="15:24" pos:end="15:29">= <expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17">GetBitContext</name></type> <name pos:start="17:19" pos:end="17:21">hgb</name></decl>;</decl_stmt> <comment type="block" pos:start="17:24" pos:end="17:43">/* for the header */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:71"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:21">dqt_offs</name></decl>, <decl pos:start="19:24" pos:end="19:31"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:24" pos:end="19:31">dht_offs</name></decl>, <decl pos:start="19:34" pos:end="19:41"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:34" pos:end="19:41">sof_offs</name></decl>, <decl pos:start="19:44" pos:end="19:51"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:44" pos:end="19:51">sos_offs</name></decl>, <decl pos:start="19:54" pos:end="19:70"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:54" pos:end="19:70">second_field_offs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:23">field_size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><operator pos:start="25:5" pos:end="25:5">*</operator><name pos:start="25:6" pos:end="25:14">data_size</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="31:5" pos:end="33:17"><if pos:start="31:5" pos:end="33:17">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:16">buf_size</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:17"><block_content pos:start="33:9" pos:end="33:17">

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:18"><expr pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:11">buf_ptr</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:11">buf_end</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:17">buf</name> <operator pos:start="39:19" pos:end="39:19">+</operator> <name pos:start="39:21" pos:end="39:28">buf_size</name></expr>;</expr_stmt>

    

<label pos:start="43:1" pos:end="43:12"><name pos:start="43:1" pos:end="43:11">read_header</name>:</label>

    <comment type="block" pos:start="45:5" pos:end="45:28">/* reset on every SOI */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:28"><expr pos:start="47:5" pos:end="47:27"><name pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:23">restart_interval</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <literal type="number" pos:start="47:27" pos:end="47:27">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:64"><expr pos:start="51:5" pos:end="51:63"><call pos:start="51:5" pos:end="51:63"><name pos:start="51:5" pos:end="51:17">init_get_bits</name><argument_list pos:start="51:18" pos:end="51:63">(<argument pos:start="51:19" pos:end="51:22"><expr pos:start="51:19" pos:end="51:22"><operator pos:start="51:19" pos:end="51:19">&amp;</operator><name pos:start="51:20" pos:end="51:22">hgb</name></expr></argument>, <argument pos:start="51:25" pos:end="51:31"><expr pos:start="51:25" pos:end="51:31"><name pos:start="51:25" pos:end="51:31">buf_ptr</name></expr></argument>, <comment type="block" pos:start="51:34" pos:end="51:45">/*buf_size*/</comment><argument pos:start="51:46" pos:end="51:62"><expr pos:start="51:46" pos:end="51:62"><name pos:start="51:46" pos:end="51:52">buf_end</name> <operator pos:start="51:54" pos:end="51:54">-</operator> <name pos:start="51:56" pos:end="51:62">buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:24"><expr pos:start="55:5" pos:end="55:23"><call pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:13">skip_bits</name><argument_list pos:start="55:14" pos:end="55:23">(<argument pos:start="55:15" pos:end="55:18"><expr pos:start="55:15" pos:end="55:18"><operator pos:start="55:15" pos:end="55:15">&amp;</operator><name pos:start="55:16" pos:end="55:18">hgb</name></expr></argument>, <argument pos:start="55:21" pos:end="55:22"><expr pos:start="55:21" pos:end="55:22"><literal type="number" pos:start="55:21" pos:end="55:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="55:26" pos:end="55:45">/* reserved zeros */</comment>

    

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:62">(<expr pos:start="59:9" pos:end="59:61"><call pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:16">get_bits</name><argument_list pos:start="59:17" pos:end="59:26">(<argument pos:start="59:18" pos:end="59:21"><expr pos:start="59:18" pos:end="59:21"><operator pos:start="59:18" pos:end="59:18">&amp;</operator><name pos:start="59:19" pos:end="59:21">hgb</name></expr></argument>, <argument pos:start="59:24" pos:end="59:25"><expr pos:start="59:24" pos:end="59:25"><literal type="number" pos:start="59:24" pos:end="59:25">32</literal></expr></argument>)</argument_list></call> <operator pos:start="59:28" pos:end="59:29">!=</operator> <call pos:start="59:31" pos:end="59:61"><name pos:start="59:31" pos:end="59:38">be2me_32</name><argument_list pos:start="59:39" pos:end="59:61">(<argument pos:start="59:40" pos:end="59:60"><expr pos:start="59:40" pos:end="59:60"><call pos:start="59:40" pos:end="59:60"><name pos:start="59:40" pos:end="59:52">ff_get_fourcc</name><argument_list pos:start="59:53" pos:end="59:60">(<argument pos:start="59:54" pos:end="59:59"><expr pos:start="59:54" pos:end="59:59"><literal type="string" pos:start="59:54" pos:end="59:59">"mjpg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="61:5" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:17">

	<expr_stmt pos:start="63:9" pos:end="63:46"><expr pos:start="63:9" pos:end="63:45"><call pos:start="63:9" pos:end="63:45"><name pos:start="63:9" pos:end="63:15">dprintf</name><argument_list pos:start="63:16" pos:end="63:45">(<argument pos:start="63:17" pos:end="63:44"><expr pos:start="63:17" pos:end="63:44"><literal type="string" pos:start="63:17" pos:end="63:44">"not mjpeg-b (bad fourcc)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="65:9" pos:end="65:17">return <expr pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:36"><expr pos:start="71:5" pos:end="71:35"><name pos:start="71:5" pos:end="71:14">field_size</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <call pos:start="71:18" pos:end="71:35"><name pos:start="71:18" pos:end="71:25">get_bits</name><argument_list pos:start="71:26" pos:end="71:35">(<argument pos:start="71:27" pos:end="71:30"><expr pos:start="71:27" pos:end="71:30"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:30">hgb</name></expr></argument>, <argument pos:start="71:33" pos:end="71:34"><expr pos:start="71:33" pos:end="71:34"><literal type="number" pos:start="71:33" pos:end="71:34">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="71:38" pos:end="71:53">/* field size */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:46"><expr pos:start="73:5" pos:end="73:45"><call pos:start="73:5" pos:end="73:45"><name pos:start="73:5" pos:end="73:11">dprintf</name><argument_list pos:start="73:12" pos:end="73:45">(<argument pos:start="73:13" pos:end="73:32"><expr pos:start="73:13" pos:end="73:32"><literal type="string" pos:start="73:13" pos:end="73:32">"field size: 0x%x\n"</literal></expr></argument>, <argument pos:start="73:35" pos:end="73:44"><expr pos:start="73:35" pos:end="73:44"><name pos:start="73:35" pos:end="73:44">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:24"><expr pos:start="75:5" pos:end="75:23"><call pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:13">skip_bits</name><argument_list pos:start="75:14" pos:end="75:23">(<argument pos:start="75:15" pos:end="75:18"><expr pos:start="75:15" pos:end="75:18"><operator pos:start="75:15" pos:end="75:15">&amp;</operator><name pos:start="75:16" pos:end="75:18">hgb</name></expr></argument>, <argument pos:start="75:21" pos:end="75:22"><expr pos:start="75:21" pos:end="75:22"><literal type="number" pos:start="75:21" pos:end="75:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="75:26" pos:end="75:48">/* padded field size */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:43"><expr pos:start="77:5" pos:end="77:42"><name pos:start="77:5" pos:end="77:21">second_field_offs</name> <operator pos:start="77:23" pos:end="77:23">=</operator> <call pos:start="77:25" pos:end="77:42"><name pos:start="77:25" pos:end="77:32">get_bits</name><argument_list pos:start="77:33" pos:end="77:42">(<argument pos:start="77:34" pos:end="77:37"><expr pos:start="77:34" pos:end="77:37"><operator pos:start="77:34" pos:end="77:34">&amp;</operator><name pos:start="77:35" pos:end="77:37">hgb</name></expr></argument>, <argument pos:start="77:40" pos:end="77:41"><expr pos:start="77:40" pos:end="77:41"><literal type="number" pos:start="77:40" pos:end="77:41">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:60"><expr pos:start="79:5" pos:end="79:59"><call pos:start="79:5" pos:end="79:59"><name pos:start="79:5" pos:end="79:11">dprintf</name><argument_list pos:start="79:12" pos:end="79:59">(<argument pos:start="79:13" pos:end="79:39"><expr pos:start="79:13" pos:end="79:39"><literal type="string" pos:start="79:13" pos:end="79:39">"second field offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="79:42" pos:end="79:58"><expr pos:start="79:42" pos:end="79:58"><name pos:start="79:42" pos:end="79:58">second_field_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="83:26"><if pos:start="81:5" pos:end="83:26">if <condition pos:start="81:8" pos:end="81:26">(<expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:25">second_field_offs</name></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:26"><block_content pos:start="83:9" pos:end="83:26">

	<expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:21">interlaced</name></name> <operator pos:start="83:23" pos:end="83:23">=</operator> <literal type="number" pos:start="83:25" pos:end="83:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:34"><expr pos:start="87:5" pos:end="87:33"><name pos:start="87:5" pos:end="87:12">dqt_offs</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <call pos:start="87:16" pos:end="87:33"><name pos:start="87:16" pos:end="87:23">get_bits</name><argument_list pos:start="87:24" pos:end="87:33">(<argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><operator pos:start="87:25" pos:end="87:25">&amp;</operator><name pos:start="87:26" pos:end="87:28">hgb</name></expr></argument>, <argument pos:start="87:31" pos:end="87:32"><expr pos:start="87:31" pos:end="87:32"><literal type="number" pos:start="87:31" pos:end="87:32">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:42"><expr pos:start="89:5" pos:end="89:41"><call pos:start="89:5" pos:end="89:41"><name pos:start="89:5" pos:end="89:11">dprintf</name><argument_list pos:start="89:12" pos:end="89:41">(<argument pos:start="89:13" pos:end="89:30"><expr pos:start="89:13" pos:end="89:30"><literal type="string" pos:start="89:13" pos:end="89:30">"dqt offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="89:33" pos:end="89:40"><expr pos:start="89:33" pos:end="89:40"><name pos:start="89:33" pos:end="89:40">dqt_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="101:5"><if pos:start="91:5" pos:end="101:5">if <condition pos:start="91:8" pos:end="91:17">(<expr pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">dqt_offs</name></expr>)</condition>

    <block pos:start="93:5" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:28">

	<expr_stmt pos:start="95:9" pos:end="95:70"><expr pos:start="95:9" pos:end="95:69"><call pos:start="95:9" pos:end="95:69"><name pos:start="95:9" pos:end="95:21">init_get_bits</name><argument_list pos:start="95:22" pos:end="95:69">(<argument pos:start="95:23" pos:end="95:28"><expr pos:start="95:23" pos:end="95:28"><operator pos:start="95:23" pos:end="95:23">&amp;</operator><name pos:start="95:24" pos:end="95:28"><name pos:start="95:24" pos:end="95:24">s</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:28">gb</name></name></expr></argument>, <argument pos:start="95:31" pos:end="95:42"><expr pos:start="95:31" pos:end="95:42"><name pos:start="95:31" pos:end="95:33">buf</name><operator pos:start="95:34" pos:end="95:34">+</operator><name pos:start="95:35" pos:end="95:42">dqt_offs</name></expr></argument>, <argument pos:start="95:45" pos:end="95:68"><expr pos:start="95:45" pos:end="95:68"><name pos:start="95:45" pos:end="95:51">buf_end</name> <operator pos:start="95:53" pos:end="95:53">-</operator> <operator pos:start="95:55" pos:end="95:55">(</operator><name pos:start="95:56" pos:end="95:58">buf</name><operator pos:start="95:59" pos:end="95:59">+</operator><name pos:start="95:60" pos:end="95:67">dqt_offs</name><operator pos:start="95:68" pos:end="95:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="97:9" pos:end="97:28"><expr pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:21">start_code</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:27">DQT</name></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:28"><expr pos:start="99:9" pos:end="99:27"><call pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:24">mjpeg_decode_dqt</name><argument_list pos:start="99:25" pos:end="99:27">(<argument pos:start="99:26" pos:end="99:26"><expr pos:start="99:26" pos:end="99:26"><name pos:start="99:26" pos:end="99:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    

    <expr_stmt pos:start="105:5" pos:end="105:34"><expr pos:start="105:5" pos:end="105:33"><name pos:start="105:5" pos:end="105:12">dht_offs</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="105:33"><name pos:start="105:16" pos:end="105:23">get_bits</name><argument_list pos:start="105:24" pos:end="105:33">(<argument pos:start="105:25" pos:end="105:28"><expr pos:start="105:25" pos:end="105:28"><operator pos:start="105:25" pos:end="105:25">&amp;</operator><name pos:start="105:26" pos:end="105:28">hgb</name></expr></argument>, <argument pos:start="105:31" pos:end="105:32"><expr pos:start="105:31" pos:end="105:32"><literal type="number" pos:start="105:31" pos:end="105:32">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:42"><expr pos:start="107:5" pos:end="107:41"><call pos:start="107:5" pos:end="107:41"><name pos:start="107:5" pos:end="107:11">dprintf</name><argument_list pos:start="107:12" pos:end="107:41">(<argument pos:start="107:13" pos:end="107:30"><expr pos:start="107:13" pos:end="107:30"><literal type="string" pos:start="107:13" pos:end="107:30">"dht offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="107:33" pos:end="107:40"><expr pos:start="107:33" pos:end="107:40"><name pos:start="107:33" pos:end="107:40">dht_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:17">(<expr pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:16">dht_offs</name></expr>)</condition>

    <block pos:start="111:5" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:28">

	<expr_stmt pos:start="113:9" pos:end="113:70"><expr pos:start="113:9" pos:end="113:69"><call pos:start="113:9" pos:end="113:69"><name pos:start="113:9" pos:end="113:21">init_get_bits</name><argument_list pos:start="113:22" pos:end="113:69">(<argument pos:start="113:23" pos:end="113:28"><expr pos:start="113:23" pos:end="113:28"><operator pos:start="113:23" pos:end="113:23">&amp;</operator><name pos:start="113:24" pos:end="113:28"><name pos:start="113:24" pos:end="113:24">s</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:28">gb</name></name></expr></argument>, <argument pos:start="113:31" pos:end="113:42"><expr pos:start="113:31" pos:end="113:42"><name pos:start="113:31" pos:end="113:33">buf</name><operator pos:start="113:34" pos:end="113:34">+</operator><name pos:start="113:35" pos:end="113:42">dht_offs</name></expr></argument>, <argument pos:start="113:45" pos:end="113:68"><expr pos:start="113:45" pos:end="113:68"><name pos:start="113:45" pos:end="113:51">buf_end</name> <operator pos:start="113:53" pos:end="113:53">-</operator> <operator pos:start="113:55" pos:end="113:55">(</operator><name pos:start="113:56" pos:end="113:58">buf</name><operator pos:start="113:59" pos:end="113:59">+</operator><name pos:start="113:60" pos:end="113:67">dht_offs</name><operator pos:start="113:68" pos:end="113:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="115:9" pos:end="115:28"><expr pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:21">start_code</name></name> <operator pos:start="115:23" pos:end="115:23">=</operator> <name pos:start="115:25" pos:end="115:27">DHT</name></expr>;</expr_stmt>

	<expr_stmt pos:start="117:9" pos:end="117:28"><expr pos:start="117:9" pos:end="117:27"><call pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:24">mjpeg_decode_dht</name><argument_list pos:start="117:25" pos:end="117:27">(<argument pos:start="117:26" pos:end="117:26"><expr pos:start="117:26" pos:end="117:26"><name pos:start="117:26" pos:end="117:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:34"><expr pos:start="123:5" pos:end="123:33"><name pos:start="123:5" pos:end="123:12">sof_offs</name> <operator pos:start="123:14" pos:end="123:14">=</operator> <call pos:start="123:16" pos:end="123:33"><name pos:start="123:16" pos:end="123:23">get_bits</name><argument_list pos:start="123:24" pos:end="123:33">(<argument pos:start="123:25" pos:end="123:28"><expr pos:start="123:25" pos:end="123:28"><operator pos:start="123:25" pos:end="123:25">&amp;</operator><name pos:start="123:26" pos:end="123:28">hgb</name></expr></argument>, <argument pos:start="123:31" pos:end="123:32"><expr pos:start="123:31" pos:end="123:32"><literal type="number" pos:start="123:31" pos:end="123:32">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:42"><expr pos:start="125:5" pos:end="125:41"><call pos:start="125:5" pos:end="125:41"><name pos:start="125:5" pos:end="125:11">dprintf</name><argument_list pos:start="125:12" pos:end="125:41">(<argument pos:start="125:13" pos:end="125:30"><expr pos:start="125:13" pos:end="125:30"><literal type="string" pos:start="125:13" pos:end="125:30">"sof offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="125:33" pos:end="125:40"><expr pos:start="125:33" pos:end="125:40"><name pos:start="125:33" pos:end="125:40">sof_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="139:5"><if pos:start="127:5" pos:end="139:5">if <condition pos:start="127:8" pos:end="127:17">(<expr pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:16">sof_offs</name></expr>)</condition>

    <block pos:start="129:5" pos:end="139:5">{<block_content pos:start="131:9" pos:end="137:22">

	<expr_stmt pos:start="131:9" pos:end="131:70"><expr pos:start="131:9" pos:end="131:69"><call pos:start="131:9" pos:end="131:69"><name pos:start="131:9" pos:end="131:21">init_get_bits</name><argument_list pos:start="131:22" pos:end="131:69">(<argument pos:start="131:23" pos:end="131:28"><expr pos:start="131:23" pos:end="131:28"><operator pos:start="131:23" pos:end="131:23">&amp;</operator><name pos:start="131:24" pos:end="131:28"><name pos:start="131:24" pos:end="131:24">s</name><operator pos:start="131:25" pos:end="131:26">-&gt;</operator><name pos:start="131:27" pos:end="131:28">gb</name></name></expr></argument>, <argument pos:start="131:31" pos:end="131:42"><expr pos:start="131:31" pos:end="131:42"><name pos:start="131:31" pos:end="131:33">buf</name><operator pos:start="131:34" pos:end="131:34">+</operator><name pos:start="131:35" pos:end="131:42">sof_offs</name></expr></argument>, <argument pos:start="131:45" pos:end="131:68"><expr pos:start="131:45" pos:end="131:68"><name pos:start="131:45" pos:end="131:51">buf_end</name> <operator pos:start="131:53" pos:end="131:53">-</operator> <operator pos:start="131:55" pos:end="131:55">(</operator><name pos:start="131:56" pos:end="131:58">buf</name><operator pos:start="131:59" pos:end="131:59">+</operator><name pos:start="131:60" pos:end="131:67">sof_offs</name><operator pos:start="131:68" pos:end="131:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="133:9" pos:end="133:29"><expr pos:start="133:9" pos:end="133:28"><name pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:21">start_code</name></name> <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:28">SOF0</name></expr>;</expr_stmt>

	<if_stmt pos:start="135:9" pos:end="137:22"><if pos:start="135:9" pos:end="137:22">if <condition pos:start="135:12" pos:end="135:37">(<expr pos:start="135:13" pos:end="135:36"><call pos:start="135:13" pos:end="135:32"><name pos:start="135:13" pos:end="135:29">mjpeg_decode_sof0</name><argument_list pos:start="135:30" pos:end="135:32">(<argument pos:start="135:31" pos:end="135:31"><expr pos:start="135:31" pos:end="135:31"><name pos:start="135:31" pos:end="135:31">s</name></expr></argument>)</argument_list></call> <operator pos:start="135:34" pos:end="135:34">&lt;</operator> <literal type="number" pos:start="135:36" pos:end="135:36">0</literal></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:22"><block_content pos:start="137:13" pos:end="137:22">

	    <return pos:start="137:13" pos:end="137:22">return <expr pos:start="137:20" pos:end="137:21"><operator pos:start="137:20" pos:end="137:20">-</operator><literal type="number" pos:start="137:21" pos:end="137:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:34"><expr pos:start="143:5" pos:end="143:33"><name pos:start="143:5" pos:end="143:12">sos_offs</name> <operator pos:start="143:14" pos:end="143:14">=</operator> <call pos:start="143:16" pos:end="143:33"><name pos:start="143:16" pos:end="143:23">get_bits</name><argument_list pos:start="143:24" pos:end="143:33">(<argument pos:start="143:25" pos:end="143:28"><expr pos:start="143:25" pos:end="143:28"><operator pos:start="143:25" pos:end="143:25">&amp;</operator><name pos:start="143:26" pos:end="143:28">hgb</name></expr></argument>, <argument pos:start="143:31" pos:end="143:32"><expr pos:start="143:31" pos:end="143:32"><literal type="number" pos:start="143:31" pos:end="143:32">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:42"><expr pos:start="145:5" pos:end="145:41"><call pos:start="145:5" pos:end="145:41"><name pos:start="145:5" pos:end="145:11">dprintf</name><argument_list pos:start="145:12" pos:end="145:41">(<argument pos:start="145:13" pos:end="145:30"><expr pos:start="145:13" pos:end="145:30"><literal type="string" pos:start="145:13" pos:end="145:30">"sos offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="145:33" pos:end="145:40"><expr pos:start="145:33" pos:end="145:40"><name pos:start="145:33" pos:end="145:40">sos_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="159:5"><if pos:start="147:5" pos:end="159:5">if <condition pos:start="147:8" pos:end="147:17">(<expr pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:16">sos_offs</name></expr>)</condition>

    <block pos:start="149:5" pos:end="159:5">{<block_content pos:start="153:9" pos:end="157:28">

<comment type="line" pos:start="151:1" pos:end="151:70">//	init_get_bits(&amp;s-&gt;gb, buf+sos_offs, buf_end - (buf+sos_offs));</comment>

	<expr_stmt pos:start="153:9" pos:end="153:56"><expr pos:start="153:9" pos:end="153:55"><call pos:start="153:9" pos:end="153:55"><name pos:start="153:9" pos:end="153:21">init_get_bits</name><argument_list pos:start="153:22" pos:end="153:55">(<argument pos:start="153:23" pos:end="153:28"><expr pos:start="153:23" pos:end="153:28"><operator pos:start="153:23" pos:end="153:23">&amp;</operator><name pos:start="153:24" pos:end="153:28"><name pos:start="153:24" pos:end="153:24">s</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:28">gb</name></name></expr></argument>, <argument pos:start="153:31" pos:end="153:42"><expr pos:start="153:31" pos:end="153:42"><name pos:start="153:31" pos:end="153:33">buf</name><operator pos:start="153:34" pos:end="153:34">+</operator><name pos:start="153:35" pos:end="153:42">sos_offs</name></expr></argument>, <argument pos:start="153:45" pos:end="153:54"><expr pos:start="153:45" pos:end="153:54"><name pos:start="153:45" pos:end="153:54">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="155:9" pos:end="155:28"><expr pos:start="155:9" pos:end="155:27"><name pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:21">start_code</name></name> <operator pos:start="155:23" pos:end="155:23">=</operator> <name pos:start="155:25" pos:end="155:27">SOS</name></expr>;</expr_stmt>

	<expr_stmt pos:start="157:9" pos:end="157:28"><expr pos:start="157:9" pos:end="157:27"><call pos:start="157:9" pos:end="157:27"><name pos:start="157:9" pos:end="157:24">mjpeg_decode_sos</name><argument_list pos:start="157:25" pos:end="157:27">(<argument pos:start="157:26" pos:end="157:26"><expr pos:start="157:26" pos:end="157:26"><name pos:start="157:26" pos:end="157:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:24"><expr pos:start="163:5" pos:end="163:23"><call pos:start="163:5" pos:end="163:23"><name pos:start="163:5" pos:end="163:13">skip_bits</name><argument_list pos:start="163:14" pos:end="163:23">(<argument pos:start="163:15" pos:end="163:18"><expr pos:start="163:15" pos:end="163:18"><operator pos:start="163:15" pos:end="163:15">&amp;</operator><name pos:start="163:16" pos:end="163:18">hgb</name></expr></argument>, <argument pos:start="163:21" pos:end="163:22"><expr pos:start="163:21" pos:end="163:22"><literal type="number" pos:start="163:21" pos:end="163:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="163:26" pos:end="163:51">/* start of data offset */</comment>



    <if_stmt pos:start="167:5" pos:end="185:5"><if pos:start="167:5" pos:end="185:5">if <condition pos:start="167:8" pos:end="167:22">(<expr pos:start="167:9" pos:end="167:21"><name pos:start="167:9" pos:end="167:21"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:21">interlaced</name></name></expr>)</condition> <block pos:start="167:24" pos:end="185:5">{<block_content pos:start="169:9" pos:end="183:9">

        <expr_stmt pos:start="169:9" pos:end="169:29"><expr pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:23">bottom_field</name></name> <operator pos:start="169:25" pos:end="169:26">^=</operator> <literal type="number" pos:start="169:28" pos:end="169:28">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="171:9" pos:end="171:58">/* if not bottom field, do not output image yet */</comment>

        <if_stmt pos:start="173:9" pos:end="183:9"><if pos:start="173:9" pos:end="183:9">if <condition pos:start="173:12" pos:end="173:49">(<expr pos:start="173:13" pos:end="173:48"><name pos:start="173:13" pos:end="173:27"><name pos:start="173:13" pos:end="173:13">s</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:27">bottom_field</name></name> <operator pos:start="173:29" pos:end="173:30">&amp;&amp;</operator> <name pos:start="173:32" pos:end="173:48">second_field_offs</name></expr>)</condition>

	<block pos:start="175:9" pos:end="183:9">{<block_content pos:start="177:13" pos:end="181:29">

	    <expr_stmt pos:start="177:13" pos:end="177:46"><expr pos:start="177:13" pos:end="177:45"><name pos:start="177:13" pos:end="177:19">buf_ptr</name> <operator pos:start="177:21" pos:end="177:21">=</operator> <name pos:start="177:23" pos:end="177:25">buf</name> <operator pos:start="177:27" pos:end="177:27">+</operator> <name pos:start="177:29" pos:end="177:45">second_field_offs</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="179:13" pos:end="179:34"><expr pos:start="179:13" pos:end="179:33"><name pos:start="179:13" pos:end="179:29">second_field_offs</name> <operator pos:start="179:31" pos:end="179:31">=</operator> <literal type="number" pos:start="179:33" pos:end="179:33">0</literal></expr>;</expr_stmt>

	    <goto pos:start="181:13" pos:end="181:29">goto <name pos:start="181:18" pos:end="181:28">read_header</name>;</goto>

    	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="189:5" pos:end="197:5">for<control pos:start="189:8" pos:end="189:20">(<init pos:start="189:9" pos:end="189:12"><expr pos:start="189:9" pos:end="189:11"><name pos:start="189:9" pos:end="189:9">i</name><operator pos:start="189:10" pos:end="189:10">=</operator><literal type="number" pos:start="189:11" pos:end="189:11">0</literal></expr>;</init><condition pos:start="189:13" pos:end="189:16"><expr pos:start="189:13" pos:end="189:15"><name pos:start="189:13" pos:end="189:13">i</name><operator pos:start="189:14" pos:end="189:14">&lt;</operator><literal type="number" pos:start="189:15" pos:end="189:15">3</literal></expr>;</condition><incr pos:start="189:17" pos:end="189:19"><expr pos:start="189:17" pos:end="189:19"><name pos:start="189:17" pos:end="189:17">i</name><operator pos:start="189:18" pos:end="189:19">++</operator></expr></incr>)</control> <block pos:start="189:22" pos:end="197:5">{<block_content pos:start="191:9" pos:end="195:49">

        <expr_stmt pos:start="191:9" pos:end="191:49"><expr pos:start="191:9" pos:end="191:48"><name pos:start="191:9" pos:end="191:24"><name pos:start="191:9" pos:end="191:15">picture</name><operator pos:start="191:16" pos:end="191:17">-&gt;</operator><name pos:start="191:18" pos:end="191:21">data</name><index pos:start="191:22" pos:end="191:24">[<expr pos:start="191:23" pos:end="191:23"><name pos:start="191:23" pos:end="191:23">i</name></expr>]</index></name> <operator pos:start="191:26" pos:end="191:26">=</operator> <name pos:start="191:28" pos:end="191:48"><name pos:start="191:28" pos:end="191:28">s</name><operator pos:start="191:29" pos:end="191:30">-&gt;</operator><name pos:start="191:31" pos:end="191:45">current_picture</name><index pos:start="191:46" pos:end="191:48">[<expr pos:start="191:47" pos:end="191:47"><name pos:start="191:47" pos:end="191:47">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="195:49"><expr pos:start="193:9" pos:end="195:48"><name pos:start="193:9" pos:end="193:28"><name pos:start="193:9" pos:end="193:15">picture</name><operator pos:start="193:16" pos:end="193:17">-&gt;</operator><name pos:start="193:18" pos:end="193:25">linesize</name><index pos:start="193:26" pos:end="193:28">[<expr pos:start="193:27" pos:end="193:27"><name pos:start="193:27" pos:end="193:27">i</name></expr>]</index></name> <operator pos:start="193:30" pos:end="193:30">=</operator> <ternary pos:start="193:32" pos:end="195:48"><condition pos:start="193:32" pos:end="193:48"><expr pos:start="193:32" pos:end="193:46"><operator pos:start="193:32" pos:end="193:32">(</operator><name pos:start="193:33" pos:end="193:45"><name pos:start="193:33" pos:end="193:33">s</name><operator pos:start="193:34" pos:end="193:35">-&gt;</operator><name pos:start="193:36" pos:end="193:45">interlaced</name></name><operator pos:start="193:46" pos:end="193:46">)</operator></expr> ?</condition><then pos:start="195:13" pos:end="195:31">

    	    <expr pos:start="195:13" pos:end="195:31"><name pos:start="195:13" pos:end="195:26"><name pos:start="195:13" pos:end="195:13">s</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:23">linesize</name><index pos:start="195:24" pos:end="195:26">[<expr pos:start="195:25" pos:end="195:25"><name pos:start="195:25" pos:end="195:25">i</name></expr>]</index></name> <operator pos:start="195:28" pos:end="195:29">&gt;&gt;</operator> <literal type="number" pos:start="195:31" pos:end="195:31">1</literal></expr> </then><else pos:start="195:33" pos:end="195:48">: <expr pos:start="195:35" pos:end="195:48"><name pos:start="195:35" pos:end="195:48"><name pos:start="195:35" pos:end="195:35">s</name><operator pos:start="195:36" pos:end="195:37">-&gt;</operator><name pos:start="195:38" pos:end="195:45">linesize</name><index pos:start="195:46" pos:end="195:48">[<expr pos:start="195:47" pos:end="195:47"><name pos:start="195:47" pos:end="195:47">i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="199:5" pos:end="199:35"><expr pos:start="199:5" pos:end="199:34"><operator pos:start="199:5" pos:end="199:5">*</operator><name pos:start="199:6" pos:end="199:14">data_size</name> <operator pos:start="199:16" pos:end="199:16">=</operator> <sizeof pos:start="199:18" pos:end="199:34">sizeof<argument_list pos:start="199:24" pos:end="199:34">(<argument pos:start="199:25" pos:end="199:33"><expr pos:start="199:25" pos:end="199:33"><name pos:start="199:25" pos:end="199:33">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:30"><expr pos:start="201:5" pos:end="201:29"><name pos:start="201:5" pos:end="201:17"><name pos:start="201:5" pos:end="201:9">avctx</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:17">height</name></name> <operator pos:start="201:19" pos:end="201:19">=</operator> <name pos:start="201:21" pos:end="201:29"><name pos:start="201:21" pos:end="201:21">s</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:29">height</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="205:27"><if pos:start="203:5" pos:end="205:27">if <condition pos:start="203:8" pos:end="203:22">(<expr pos:start="203:9" pos:end="203:21"><name pos:start="203:9" pos:end="203:21"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:21">interlaced</name></name></expr>)</condition><block type="pseudo" pos:start="205:9" pos:end="205:27"><block_content pos:start="205:9" pos:end="205:27">

        <expr_stmt pos:start="205:9" pos:end="205:27"><expr pos:start="205:9" pos:end="205:26"><name pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:13">avctx</name><operator pos:start="205:14" pos:end="205:15">-&gt;</operator><name pos:start="205:16" pos:end="205:21">height</name></name> <operator pos:start="205:23" pos:end="205:24">*=</operator> <literal type="number" pos:start="205:26" pos:end="205:26">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:28"><expr pos:start="207:5" pos:end="207:27"><name pos:start="207:5" pos:end="207:16"><name pos:start="207:5" pos:end="207:9">avctx</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:16">width</name></name> <operator pos:start="207:18" pos:end="207:18">=</operator> <name pos:start="207:20" pos:end="207:27"><name pos:start="207:20" pos:end="207:20">s</name><operator pos:start="207:21" pos:end="207:22">-&gt;</operator><name pos:start="207:23" pos:end="207:27">width</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="209:5" pos:end="209:34">/* XXX: not complete test ! */</comment>

    <switch pos:start="211:5" pos:end="233:5">switch<condition pos:start="211:11" pos:end="211:48">(<expr pos:start="211:12" pos:end="211:47"><operator pos:start="211:12" pos:end="211:12">(</operator><name pos:start="211:13" pos:end="211:25"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:22">h_count</name><index pos:start="211:23" pos:end="211:25">[<expr pos:start="211:24" pos:end="211:24"><literal type="number" pos:start="211:24" pos:end="211:24">0</literal></expr>]</index></name> <operator pos:start="211:27" pos:end="211:28">&lt;&lt;</operator> <literal type="number" pos:start="211:30" pos:end="211:30">4</literal><operator pos:start="211:31" pos:end="211:31">)</operator> <operator pos:start="211:33" pos:end="211:33">|</operator> <name pos:start="211:35" pos:end="211:47"><name pos:start="211:35" pos:end="211:35">s</name><operator pos:start="211:36" pos:end="211:37">-&gt;</operator><name pos:start="211:38" pos:end="211:44">v_count</name><index pos:start="211:45" pos:end="211:47">[<expr pos:start="211:46" pos:end="211:46"><literal type="number" pos:start="211:46" pos:end="211:46">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="211:50" pos:end="233:5">{<block_content pos:start="213:9" pos:end="231:18">

        <case pos:start="213:9" pos:end="213:18">case <expr pos:start="213:14" pos:end="213:17"><literal type="number" pos:start="213:14" pos:end="213:17">0x11</literal></expr>:</case>

    	    <expr_stmt pos:start="215:13" pos:end="215:45"><expr pos:start="215:13" pos:end="215:44"><name pos:start="215:13" pos:end="215:26"><name pos:start="215:13" pos:end="215:17">avctx</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:26">pix_fmt</name></name> <operator pos:start="215:28" pos:end="215:28">=</operator> <name pos:start="215:30" pos:end="215:44">PIX_FMT_YUV444P</name></expr>;</expr_stmt>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        <case pos:start="219:9" pos:end="219:18">case <expr pos:start="219:14" pos:end="219:17"><literal type="number" pos:start="219:14" pos:end="219:17">0x21</literal></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:45"><expr pos:start="221:13" pos:end="221:44"><name pos:start="221:13" pos:end="221:26"><name pos:start="221:13" pos:end="221:17">avctx</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:26">pix_fmt</name></name> <operator pos:start="221:28" pos:end="221:28">=</operator> <name pos:start="221:30" pos:end="221:44">PIX_FMT_YUV422P</name></expr>;</expr_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        <default pos:start="225:9" pos:end="225:16">default:</default>

	<case pos:start="227:9" pos:end="227:18">case <expr pos:start="227:14" pos:end="227:17"><literal type="number" pos:start="227:14" pos:end="227:17">0x22</literal></expr>:</case>

            <expr_stmt pos:start="229:13" pos:end="229:45"><expr pos:start="229:13" pos:end="229:44"><name pos:start="229:13" pos:end="229:26"><name pos:start="229:13" pos:end="229:17">avctx</name><operator pos:start="229:18" pos:end="229:19">-&gt;</operator><name pos:start="229:20" pos:end="229:26">pix_fmt</name></name> <operator pos:start="229:28" pos:end="229:28">=</operator> <name pos:start="229:30" pos:end="229:44">PIX_FMT_YUV420P</name></expr>;</expr_stmt>

            <break pos:start="231:13" pos:end="231:18">break;</break>

    </block_content>}</block></switch>

    <comment type="block" pos:start="235:5" pos:end="235:23">/* dummy quality */</comment>

    <comment type="block" pos:start="237:5" pos:end="237:35">/* XXX: infer it with matrix */</comment>

<comment type="line" pos:start="239:1" pos:end="239:26">//    avctx-&gt;quality = 3; </comment>



    <return pos:start="243:5" pos:end="243:25">return <expr pos:start="243:12" pos:end="243:24"><name pos:start="243:12" pos:end="243:18">buf_ptr</name> <operator pos:start="243:20" pos:end="243:20">-</operator> <name pos:start="243:22" pos:end="243:24">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
