<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10227.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:39">helper_ret_protected</name><parameter_list pos:start="1:40" pos:end="1:75">(<parameter pos:start="1:41" pos:end="1:49"><decl pos:start="1:41" pos:end="1:49"><type pos:start="1:41" pos:end="1:49"><name pos:start="1:41" pos:end="1:43">int</name></type> <name pos:start="1:45" pos:end="1:49">shift</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:62">is_iret</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:74"><decl pos:start="1:65" pos:end="1:74"><type pos:start="1:65" pos:end="1:74"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:74">addend</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="263:1">{<block_content pos:start="5:5" pos:end="261:18">

    <decl_stmt pos:start="5:5" pos:end="5:62"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">sp</name></decl>, <decl pos:start="5:18" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:18" pos:end="5:23">new_cs</name></decl>, <decl pos:start="5:26" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:26" pos:end="5:32">new_eip</name></decl>, <decl pos:start="5:35" pos:end="5:44"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:35" pos:end="5:44">new_eflags</name></decl>, <decl pos:start="5:47" pos:end="5:53"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:47" pos:end="5:53">new_esp</name></decl>, <decl pos:start="5:56" pos:end="5:61"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:56" pos:end="5:61">new_ss</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:19">new_es</name></decl>, <decl pos:start="7:22" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:27">new_ds</name></decl>, <decl pos:start="7:30" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:30" pos:end="7:35">new_fs</name></decl>, <decl pos:start="7:38" pos:end="7:43"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:38" pos:end="7:43">new_gs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:15">e1</name></decl>, <decl pos:start="9:18" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:18" pos:end="9:19">e2</name></decl>, <decl pos:start="9:22" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:22" pos:end="9:26">ss_e1</name></decl>, <decl pos:start="9:29" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:29" pos:end="9:33">ss_e2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">cpl</name></decl>, <decl pos:start="11:14" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:16">dpl</name></decl>, <decl pos:start="11:19" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:21">rpl</name></decl>, <decl pos:start="11:24" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:24" pos:end="11:34">eflags_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">ssp</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="17:5" pos:end="17:13"><expr pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:6">sp</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <name pos:start="17:10" pos:end="17:12">ESP</name></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:21"><if pos:start="19:5" pos:end="21:21">if <condition pos:start="19:8" pos:end="19:47">(<expr pos:start="19:9" pos:end="19:46"><operator pos:start="19:9" pos:end="19:9">!</operator><operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:25"><name pos:start="19:11" pos:end="19:13">env</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:19">segs</name><index pos:start="19:20" pos:end="19:25">[<expr pos:start="19:21" pos:end="19:24"><name pos:start="19:21" pos:end="19:24">R_SS</name></expr>]</index></name><operator pos:start="19:26" pos:end="19:26">.</operator><name pos:start="19:27" pos:end="19:31">flags</name> <operator pos:start="19:33" pos:end="19:33">&amp;</operator> <name pos:start="19:35" pos:end="19:45">DESC_B_MASK</name><operator pos:start="19:46" pos:end="19:46">)</operator></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:21"><block_content pos:start="21:9" pos:end="21:21">

        <expr_stmt pos:start="21:9" pos:end="21:21"><expr pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:10">sp</name> <operator pos:start="21:12" pos:end="21:13">&amp;=</operator> <literal type="number" pos:start="21:15" pos:end="21:20">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:7">ssp</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:25"><name pos:start="23:11" pos:end="23:13">env</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:19">segs</name><index pos:start="23:20" pos:end="23:25">[<expr pos:start="23:21" pos:end="23:24"><name pos:start="23:21" pos:end="23:24">R_SS</name></expr>]</index></name><operator pos:start="23:26" pos:end="23:26">.</operator><name pos:start="23:27" pos:end="23:30">base</name> <operator pos:start="23:32" pos:end="23:32">+</operator> <name pos:start="23:34" pos:end="23:35">sp</name></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="53:5"><if pos:start="25:5" pos:end="41:5">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:13">shift</name> <operator pos:start="25:15" pos:end="25:16">==</operator> <literal type="number" pos:start="25:18" pos:end="25:18">1</literal></expr>)</condition> <block pos:start="25:21" pos:end="41:5">{<block_content pos:start="29:9" pos:end="39:32">

        <comment type="block" pos:start="27:9" pos:end="27:21">/* 32 bits */</comment>

        <if_stmt pos:start="29:9" pos:end="31:45"><if pos:start="29:9" pos:end="31:45">if <condition pos:start="29:12" pos:end="29:20">(<expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:19">is_iret</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:45"><block_content pos:start="31:13" pos:end="31:45">

            <expr_stmt pos:start="31:13" pos:end="31:45"><expr pos:start="31:13" pos:end="31:44"><name pos:start="31:13" pos:end="31:22">new_eflags</name> <operator pos:start="31:24" pos:end="31:24">=</operator> <call pos:start="31:26" pos:end="31:44"><name pos:start="31:26" pos:end="31:35">ldl_kernel</name><argument_list pos:start="31:36" pos:end="31:44">(<argument pos:start="31:37" pos:end="31:43"><expr pos:start="31:37" pos:end="31:43"><name pos:start="31:37" pos:end="31:39">ssp</name> <operator pos:start="31:41" pos:end="31:41">+</operator> <literal type="number" pos:start="31:43" pos:end="31:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:14">new_cs</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:36"><name pos:start="33:18" pos:end="33:27">ldl_kernel</name><argument_list pos:start="33:28" pos:end="33:36">(<argument pos:start="33:29" pos:end="33:35"><expr pos:start="33:29" pos:end="33:35"><name pos:start="33:29" pos:end="33:31">ssp</name> <operator pos:start="33:33" pos:end="33:33">+</operator> <literal type="number" pos:start="33:35" pos:end="33:35">4</literal></expr></argument>)</argument_list></call> <operator pos:start="33:38" pos:end="33:38">&amp;</operator> <literal type="number" pos:start="33:40" pos:end="33:45">0xffff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:15">new_eip</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:33"><name pos:start="35:19" pos:end="35:28">ldl_kernel</name><argument_list pos:start="35:29" pos:end="35:33">(<argument pos:start="35:30" pos:end="35:32"><expr pos:start="35:30" pos:end="35:32"><name pos:start="35:30" pos:end="35:32">ssp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:32"><if pos:start="37:9" pos:end="39:32">if <condition pos:start="37:12" pos:end="37:46">(<expr pos:start="37:13" pos:end="37:45"><name pos:start="37:13" pos:end="37:19">is_iret</name> <operator pos:start="37:21" pos:end="37:22">&amp;&amp;</operator> <operator pos:start="37:24" pos:end="37:24">(</operator><name pos:start="37:25" pos:end="37:34">new_eflags</name> <operator pos:start="37:36" pos:end="37:36">&amp;</operator> <name pos:start="37:38" pos:end="37:44">VM_MASK</name><operator pos:start="37:45" pos:end="37:45">)</operator></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:32"><block_content pos:start="39:13" pos:end="39:32">

            <goto pos:start="39:13" pos:end="39:32">goto <name pos:start="39:18" pos:end="39:31">return_to_vm86</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="53:5">else <block pos:start="41:12" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:35">

        <comment type="block" pos:start="43:9" pos:end="43:21">/* 16 bits */</comment>

        <if_stmt pos:start="45:9" pos:end="47:46"><if pos:start="45:9" pos:end="47:46">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:19">is_iret</name></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:46"><block_content pos:start="47:13" pos:end="47:46">

            <expr_stmt pos:start="47:13" pos:end="47:46"><expr pos:start="47:13" pos:end="47:45"><name pos:start="47:13" pos:end="47:22">new_eflags</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <call pos:start="47:26" pos:end="47:45"><name pos:start="47:26" pos:end="47:36">lduw_kernel</name><argument_list pos:start="47:37" pos:end="47:45">(<argument pos:start="47:38" pos:end="47:44"><expr pos:start="47:38" pos:end="47:44"><name pos:start="47:38" pos:end="47:40">ssp</name> <operator pos:start="47:42" pos:end="47:42">+</operator> <literal type="number" pos:start="47:44" pos:end="47:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:38"><expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:14">new_cs</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:37"><name pos:start="49:18" pos:end="49:28">lduw_kernel</name><argument_list pos:start="49:29" pos:end="49:37">(<argument pos:start="49:30" pos:end="49:36"><expr pos:start="49:30" pos:end="49:36"><name pos:start="49:30" pos:end="49:32">ssp</name> <operator pos:start="49:34" pos:end="49:34">+</operator> <literal type="number" pos:start="49:36" pos:end="49:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:35"><expr pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:15">new_eip</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:34"><name pos:start="51:19" pos:end="51:29">lduw_kernel</name><argument_list pos:start="51:30" pos:end="51:34">(<argument pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><name pos:start="51:31" pos:end="51:33">ssp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="55:5" pos:end="57:57"><if pos:start="55:5" pos:end="57:57">if <condition pos:start="55:8" pos:end="55:31">(<expr pos:start="55:9" pos:end="55:30"><operator pos:start="55:9" pos:end="55:9">(</operator><name pos:start="55:10" pos:end="55:15">new_cs</name> <operator pos:start="55:17" pos:end="55:17">&amp;</operator> <literal type="number" pos:start="55:19" pos:end="55:24">0xfffc</literal><operator pos:start="55:25" pos:end="55:25">)</operator> <operator pos:start="55:27" pos:end="55:28">==</operator> <literal type="number" pos:start="55:30" pos:end="55:30">0</literal></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:57"><block_content pos:start="57:9" pos:end="57:57">

        <expr_stmt pos:start="57:9" pos:end="57:57"><expr pos:start="57:9" pos:end="57:56"><call pos:start="57:9" pos:end="57:56"><name pos:start="57:9" pos:end="57:27">raise_exception_err</name><argument_list pos:start="57:28" pos:end="57:56">(<argument pos:start="57:29" pos:end="57:38"><expr pos:start="57:29" pos:end="57:38"><name pos:start="57:29" pos:end="57:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="57:41" pos:end="57:55"><expr pos:start="57:41" pos:end="57:55"><name pos:start="57:41" pos:end="57:46">new_cs</name> <operator pos:start="57:48" pos:end="57:48">&amp;</operator> <literal type="number" pos:start="57:50" pos:end="57:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="61:57"><if pos:start="59:5" pos:end="61:57">if <condition pos:start="59:8" pos:end="59:44">(<expr pos:start="59:9" pos:end="59:43"><call pos:start="59:9" pos:end="59:38"><name pos:start="59:9" pos:end="59:20">load_segment</name><argument_list pos:start="59:21" pos:end="59:38">(<argument pos:start="59:22" pos:end="59:24"><expr pos:start="59:22" pos:end="59:24"><operator pos:start="59:22" pos:end="59:22">&amp;</operator><name pos:start="59:23" pos:end="59:24">e1</name></expr></argument>, <argument pos:start="59:27" pos:end="59:29"><expr pos:start="59:27" pos:end="59:29"><operator pos:start="59:27" pos:end="59:27">&amp;</operator><name pos:start="59:28" pos:end="59:29">e2</name></expr></argument>, <argument pos:start="59:32" pos:end="59:37"><expr pos:start="59:32" pos:end="59:37"><name pos:start="59:32" pos:end="59:37">new_cs</name></expr></argument>)</argument_list></call> <operator pos:start="59:40" pos:end="59:41">!=</operator> <literal type="number" pos:start="59:43" pos:end="59:43">0</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:57"><block_content pos:start="61:9" pos:end="61:57">

        <expr_stmt pos:start="61:9" pos:end="61:57"><expr pos:start="61:9" pos:end="61:56"><call pos:start="61:9" pos:end="61:56"><name pos:start="61:9" pos:end="61:27">raise_exception_err</name><argument_list pos:start="61:28" pos:end="61:56">(<argument pos:start="61:29" pos:end="61:38"><expr pos:start="61:29" pos:end="61:38"><name pos:start="61:29" pos:end="61:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="61:41" pos:end="61:55"><expr pos:start="61:41" pos:end="61:55"><name pos:start="61:41" pos:end="61:46">new_cs</name> <operator pos:start="61:48" pos:end="61:48">&amp;</operator> <literal type="number" pos:start="61:50" pos:end="61:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="67:57"><if pos:start="63:5" pos:end="67:57">if <condition pos:start="63:8" pos:end="65:29">(<expr pos:start="63:9" pos:end="65:28"><operator pos:start="63:9" pos:end="63:9">!</operator><operator pos:start="63:10" pos:end="63:10">(</operator><name pos:start="63:11" pos:end="63:12">e2</name> <operator pos:start="63:14" pos:end="63:14">&amp;</operator> <name pos:start="63:16" pos:end="63:26">DESC_S_MASK</name><operator pos:start="63:27" pos:end="63:27">)</operator> <operator pos:start="63:29" pos:end="63:30">||</operator>

        <operator pos:start="65:9" pos:end="65:9">!</operator><operator pos:start="65:10" pos:end="65:10">(</operator><name pos:start="65:11" pos:end="65:12">e2</name> <operator pos:start="65:14" pos:end="65:14">&amp;</operator> <name pos:start="65:16" pos:end="65:27">DESC_CS_MASK</name><operator pos:start="65:28" pos:end="65:28">)</operator></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:57"><block_content pos:start="67:9" pos:end="67:57">

        <expr_stmt pos:start="67:9" pos:end="67:57"><expr pos:start="67:9" pos:end="67:56"><call pos:start="67:9" pos:end="67:56"><name pos:start="67:9" pos:end="67:27">raise_exception_err</name><argument_list pos:start="67:28" pos:end="67:56">(<argument pos:start="67:29" pos:end="67:38"><expr pos:start="67:29" pos:end="67:38"><name pos:start="67:29" pos:end="67:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="67:41" pos:end="67:55"><expr pos:start="67:41" pos:end="67:55"><name pos:start="67:41" pos:end="67:46">new_cs</name> <operator pos:start="67:48" pos:end="67:48">&amp;</operator> <literal type="number" pos:start="67:50" pos:end="67:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:36"><expr pos:start="69:5" pos:end="69:35"><name pos:start="69:5" pos:end="69:7">cpl</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <name pos:start="69:11" pos:end="69:21"><name pos:start="69:11" pos:end="69:13">env</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:21">hflags</name></name> <operator pos:start="69:23" pos:end="69:23">&amp;</operator> <name pos:start="69:25" pos:end="69:35">HF_CPL_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:21"><expr pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:7">rpl</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <name pos:start="71:11" pos:end="71:16">new_cs</name> <operator pos:start="71:18" pos:end="71:18">&amp;</operator> <literal type="number" pos:start="71:20" pos:end="71:20">3</literal></expr>;</expr_stmt> 

    <if_stmt pos:start="73:5" pos:end="75:57"><if pos:start="73:5" pos:end="75:57">if <condition pos:start="73:8" pos:end="73:18">(<expr pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:11">rpl</name> <operator pos:start="73:13" pos:end="73:13">&lt;</operator> <name pos:start="73:15" pos:end="73:17">cpl</name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:57"><block_content pos:start="75:9" pos:end="75:57">

        <expr_stmt pos:start="75:9" pos:end="75:57"><expr pos:start="75:9" pos:end="75:56"><call pos:start="75:9" pos:end="75:56"><name pos:start="75:9" pos:end="75:27">raise_exception_err</name><argument_list pos:start="75:28" pos:end="75:56">(<argument pos:start="75:29" pos:end="75:38"><expr pos:start="75:29" pos:end="75:38"><name pos:start="75:29" pos:end="75:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="75:41" pos:end="75:55"><expr pos:start="75:41" pos:end="75:55"><name pos:start="75:41" pos:end="75:46">new_cs</name> <operator pos:start="75:48" pos:end="75:48">&amp;</operator> <literal type="number" pos:start="75:50" pos:end="75:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:37"><expr pos:start="77:5" pos:end="77:36"><name pos:start="77:5" pos:end="77:7">dpl</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <operator pos:start="77:11" pos:end="77:11">(</operator><name pos:start="77:12" pos:end="77:13">e2</name> <operator pos:start="77:15" pos:end="77:16">&gt;&gt;</operator> <name pos:start="77:18" pos:end="77:31">DESC_DPL_SHIFT</name><operator pos:start="77:32" pos:end="77:32">)</operator> <operator pos:start="77:34" pos:end="77:34">&amp;</operator> <literal type="number" pos:start="77:36" pos:end="77:36">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="91:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:26">(<expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:10">e2</name> <operator pos:start="79:12" pos:end="79:12">&amp;</operator> <name pos:start="79:14" pos:end="79:25">DESC_CS_MASK</name></expr>)</condition> <block pos:start="79:28" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:61">

        <if_stmt pos:start="81:9" pos:end="83:61"><if pos:start="81:9" pos:end="83:61">if <condition pos:start="81:12" pos:end="81:22">(<expr pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:15">dpl</name> <operator pos:start="81:17" pos:end="81:17">&gt;</operator> <name pos:start="81:19" pos:end="81:21">rpl</name></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:61"><block_content pos:start="83:13" pos:end="83:61">

            <expr_stmt pos:start="83:13" pos:end="83:61"><expr pos:start="83:13" pos:end="83:60"><call pos:start="83:13" pos:end="83:60"><name pos:start="83:13" pos:end="83:31">raise_exception_err</name><argument_list pos:start="83:32" pos:end="83:60">(<argument pos:start="83:33" pos:end="83:42"><expr pos:start="83:33" pos:end="83:42"><name pos:start="83:33" pos:end="83:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="83:45" pos:end="83:59"><expr pos:start="83:45" pos:end="83:59"><name pos:start="83:45" pos:end="83:50">new_cs</name> <operator pos:start="83:52" pos:end="83:52">&amp;</operator> <literal type="number" pos:start="83:54" pos:end="83:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="91:5">else <block pos:start="85:12" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:61">

        <if_stmt pos:start="87:9" pos:end="89:61"><if pos:start="87:9" pos:end="89:61">if <condition pos:start="87:12" pos:end="87:23">(<expr pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:15">dpl</name> <operator pos:start="87:17" pos:end="87:18">!=</operator> <name pos:start="87:20" pos:end="87:22">rpl</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:61"><block_content pos:start="89:13" pos:end="89:61">

            <expr_stmt pos:start="89:13" pos:end="89:61"><expr pos:start="89:13" pos:end="89:60"><call pos:start="89:13" pos:end="89:60"><name pos:start="89:13" pos:end="89:31">raise_exception_err</name><argument_list pos:start="89:32" pos:end="89:60">(<argument pos:start="89:33" pos:end="89:42"><expr pos:start="89:33" pos:end="89:42"><name pos:start="89:33" pos:end="89:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="89:45" pos:end="89:59"><expr pos:start="89:45" pos:end="89:59"><name pos:start="89:45" pos:end="89:50">new_cs</name> <operator pos:start="89:52" pos:end="89:52">&amp;</operator> <literal type="number" pos:start="89:54" pos:end="89:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="93:5" pos:end="95:59"><if pos:start="93:5" pos:end="95:59">if <condition pos:start="93:8" pos:end="93:28">(<expr pos:start="93:9" pos:end="93:27"><operator pos:start="93:9" pos:end="93:9">!</operator><operator pos:start="93:10" pos:end="93:10">(</operator><name pos:start="93:11" pos:end="93:12">e2</name> <operator pos:start="93:14" pos:end="93:14">&amp;</operator> <name pos:start="93:16" pos:end="93:26">DESC_P_MASK</name><operator pos:start="93:27" pos:end="93:27">)</operator></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:59"><block_content pos:start="95:9" pos:end="95:59">

        <expr_stmt pos:start="95:9" pos:end="95:59"><expr pos:start="95:9" pos:end="95:58"><call pos:start="95:9" pos:end="95:58"><name pos:start="95:9" pos:end="95:27">raise_exception_err</name><argument_list pos:start="95:28" pos:end="95:58">(<argument pos:start="95:29" pos:end="95:40"><expr pos:start="95:29" pos:end="95:40"><name pos:start="95:29" pos:end="95:40">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="95:43" pos:end="95:57"><expr pos:start="95:43" pos:end="95:57"><name pos:start="95:43" pos:end="95:48">new_cs</name> <operator pos:start="95:50" pos:end="95:50">&amp;</operator> <literal type="number" pos:start="95:52" pos:end="95:57">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    

    <if_stmt pos:start="99:5" pos:end="185:5"><if pos:start="99:5" pos:end="113:5">if <condition pos:start="99:8" pos:end="99:19">(<expr pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:11">rpl</name> <operator pos:start="99:13" pos:end="99:14">==</operator> <name pos:start="99:16" pos:end="99:18">cpl</name></expr>)</condition> <block pos:start="99:21" pos:end="113:5">{<block_content pos:start="103:9" pos:end="111:72">

        <comment type="block" pos:start="101:9" pos:end="101:43">/* return to same priledge level */</comment>

        <expr_stmt pos:start="103:9" pos:end="109:27"><expr pos:start="103:9" pos:end="109:26"><call pos:start="103:9" pos:end="109:26"><name pos:start="103:9" pos:end="103:30">cpu_x86_load_seg_cache</name><argument_list pos:start="103:31" pos:end="109:26">(<argument pos:start="103:32" pos:end="103:34"><expr pos:start="103:32" pos:end="103:34"><name pos:start="103:32" pos:end="103:34">env</name></expr></argument>, <argument pos:start="103:37" pos:end="103:40"><expr pos:start="103:37" pos:end="103:40"><name pos:start="103:37" pos:end="103:40">R_CS</name></expr></argument>, <argument pos:start="103:43" pos:end="103:48"><expr pos:start="103:43" pos:end="103:48"><name pos:start="103:43" pos:end="103:48">new_cs</name></expr></argument>, 

                       <argument pos:start="105:24" pos:end="105:43"><expr pos:start="105:24" pos:end="105:43"><call pos:start="105:24" pos:end="105:43"><name pos:start="105:24" pos:end="105:35">get_seg_base</name><argument_list pos:start="105:36" pos:end="105:43">(<argument pos:start="105:37" pos:end="105:38"><expr pos:start="105:37" pos:end="105:38"><name pos:start="105:37" pos:end="105:38">e1</name></expr></argument>, <argument pos:start="105:41" pos:end="105:42"><expr pos:start="105:41" pos:end="105:42"><name pos:start="105:41" pos:end="105:42">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="107:24" pos:end="107:44"><expr pos:start="107:24" pos:end="107:44"><call pos:start="107:24" pos:end="107:44"><name pos:start="107:24" pos:end="107:36">get_seg_limit</name><argument_list pos:start="107:37" pos:end="107:44">(<argument pos:start="107:38" pos:end="107:39"><expr pos:start="107:38" pos:end="107:39"><name pos:start="107:38" pos:end="107:39">e1</name></expr></argument>, <argument pos:start="107:42" pos:end="107:43"><expr pos:start="107:42" pos:end="107:43"><name pos:start="107:42" pos:end="107:43">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="109:24" pos:end="109:25"><expr pos:start="109:24" pos:end="109:25"><name pos:start="109:24" pos:end="109:25">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:72"><expr pos:start="111:9" pos:end="111:71"><name pos:start="111:9" pos:end="111:15">new_esp</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <name pos:start="111:19" pos:end="111:20">sp</name> <operator pos:start="111:22" pos:end="111:22">+</operator> <operator pos:start="111:24" pos:end="111:24">(</operator><literal type="number" pos:start="111:25" pos:end="111:25">4</literal> <operator pos:start="111:27" pos:end="111:28">&lt;&lt;</operator> <name pos:start="111:30" pos:end="111:34">shift</name><operator pos:start="111:35" pos:end="111:35">)</operator> <operator pos:start="111:37" pos:end="111:37">+</operator> <operator pos:start="111:39" pos:end="111:39">(</operator><operator pos:start="111:40" pos:end="111:40">(</operator><literal type="number" pos:start="111:41" pos:end="111:41">2</literal> <operator pos:start="111:43" pos:end="111:43">*</operator> <name pos:start="111:45" pos:end="111:51">is_iret</name><operator pos:start="111:52" pos:end="111:52">)</operator> <operator pos:start="111:54" pos:end="111:55">&lt;&lt;</operator> <name pos:start="111:57" pos:end="111:61">shift</name><operator pos:start="111:62" pos:end="111:62">)</operator> <operator pos:start="111:64" pos:end="111:64">+</operator> <name pos:start="111:66" pos:end="111:71">addend</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="185:5">else <block pos:start="113:12" pos:end="185:5">{<block_content pos:start="117:9" pos:end="183:34">

        <comment type="block" pos:start="115:9" pos:end="115:50">/* return to different priviledge level */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:64"><expr pos:start="117:9" pos:end="117:63"><name pos:start="117:9" pos:end="117:11">ssp</name> <operator pos:start="117:13" pos:end="117:14">+=</operator> <operator pos:start="117:16" pos:end="117:16">(</operator><literal type="number" pos:start="117:17" pos:end="117:17">4</literal> <operator pos:start="117:19" pos:end="117:20">&lt;&lt;</operator> <name pos:start="117:22" pos:end="117:26">shift</name><operator pos:start="117:27" pos:end="117:27">)</operator> <operator pos:start="117:29" pos:end="117:29">+</operator> <operator pos:start="117:31" pos:end="117:31">(</operator><operator pos:start="117:32" pos:end="117:32">(</operator><literal type="number" pos:start="117:33" pos:end="117:33">2</literal> <operator pos:start="117:35" pos:end="117:35">*</operator> <name pos:start="117:37" pos:end="117:43">is_iret</name><operator pos:start="117:44" pos:end="117:44">)</operator> <operator pos:start="117:46" pos:end="117:47">&lt;&lt;</operator> <name pos:start="117:49" pos:end="117:53">shift</name><operator pos:start="117:54" pos:end="117:54">)</operator> <operator pos:start="117:56" pos:end="117:56">+</operator> <name pos:start="117:58" pos:end="117:63">addend</name></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="135:9"><if pos:start="119:9" pos:end="127:9">if <condition pos:start="119:12" pos:end="119:23">(<expr pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:17">shift</name> <operator pos:start="119:19" pos:end="119:20">==</operator> <literal type="number" pos:start="119:22" pos:end="119:22">1</literal></expr>)</condition> <block pos:start="119:25" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:50">

            <comment type="block" pos:start="121:13" pos:end="121:25">/* 32 bits */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:38"><expr pos:start="123:13" pos:end="123:37"><name pos:start="123:13" pos:end="123:19">new_esp</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <call pos:start="123:23" pos:end="123:37"><name pos:start="123:23" pos:end="123:32">ldl_kernel</name><argument_list pos:start="123:33" pos:end="123:37">(<argument pos:start="123:34" pos:end="123:36"><expr pos:start="123:34" pos:end="123:36"><name pos:start="123:34" pos:end="123:36">ssp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:50"><expr pos:start="125:13" pos:end="125:49"><name pos:start="125:13" pos:end="125:18">new_ss</name> <operator pos:start="125:20" pos:end="125:20">=</operator> <call pos:start="125:22" pos:end="125:40"><name pos:start="125:22" pos:end="125:31">ldl_kernel</name><argument_list pos:start="125:32" pos:end="125:40">(<argument pos:start="125:33" pos:end="125:39"><expr pos:start="125:33" pos:end="125:39"><name pos:start="125:33" pos:end="125:35">ssp</name> <operator pos:start="125:37" pos:end="125:37">+</operator> <literal type="number" pos:start="125:39" pos:end="125:39">4</literal></expr></argument>)</argument_list></call> <operator pos:start="125:42" pos:end="125:42">&amp;</operator> <literal type="number" pos:start="125:44" pos:end="125:49">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="127:11" pos:end="135:9">else <block pos:start="127:16" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:42">

            <comment type="block" pos:start="129:13" pos:end="129:25">/* 16 bits */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:39"><expr pos:start="131:13" pos:end="131:38"><name pos:start="131:13" pos:end="131:19">new_esp</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <call pos:start="131:23" pos:end="131:38"><name pos:start="131:23" pos:end="131:33">lduw_kernel</name><argument_list pos:start="131:34" pos:end="131:38">(<argument pos:start="131:35" pos:end="131:37"><expr pos:start="131:35" pos:end="131:37"><name pos:start="131:35" pos:end="131:37">ssp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:42"><expr pos:start="133:13" pos:end="133:41"><name pos:start="133:13" pos:end="133:18">new_ss</name> <operator pos:start="133:20" pos:end="133:20">=</operator> <call pos:start="133:22" pos:end="133:41"><name pos:start="133:22" pos:end="133:32">lduw_kernel</name><argument_list pos:start="133:33" pos:end="133:41">(<argument pos:start="133:34" pos:end="133:40"><expr pos:start="133:34" pos:end="133:40"><name pos:start="133:34" pos:end="133:36">ssp</name> <operator pos:start="133:38" pos:end="133:38">+</operator> <literal type="number" pos:start="133:40" pos:end="133:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        

        <if_stmt pos:start="139:9" pos:end="141:61"><if pos:start="139:9" pos:end="141:61">if <condition pos:start="139:12" pos:end="139:32">(<expr pos:start="139:13" pos:end="139:31"><operator pos:start="139:13" pos:end="139:13">(</operator><name pos:start="139:14" pos:end="139:19">new_ss</name> <operator pos:start="139:21" pos:end="139:21">&amp;</operator> <literal type="number" pos:start="139:23" pos:end="139:23">3</literal><operator pos:start="139:24" pos:end="139:24">)</operator> <operator pos:start="139:26" pos:end="139:27">!=</operator> <name pos:start="139:29" pos:end="139:31">rpl</name></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:61"><block_content pos:start="141:13" pos:end="141:61">

            <expr_stmt pos:start="141:13" pos:end="141:61"><expr pos:start="141:13" pos:end="141:60"><call pos:start="141:13" pos:end="141:60"><name pos:start="141:13" pos:end="141:31">raise_exception_err</name><argument_list pos:start="141:32" pos:end="141:60">(<argument pos:start="141:33" pos:end="141:42"><expr pos:start="141:33" pos:end="141:42"><name pos:start="141:33" pos:end="141:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="141:45" pos:end="141:59"><expr pos:start="141:45" pos:end="141:59"><name pos:start="141:45" pos:end="141:50">new_ss</name> <operator pos:start="141:52" pos:end="141:52">&amp;</operator> <literal type="number" pos:start="141:54" pos:end="141:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="143:9" pos:end="145:61"><if pos:start="143:9" pos:end="145:61">if <condition pos:start="143:12" pos:end="143:54">(<expr pos:start="143:13" pos:end="143:53"><call pos:start="143:13" pos:end="143:48"><name pos:start="143:13" pos:end="143:24">load_segment</name><argument_list pos:start="143:25" pos:end="143:48">(<argument pos:start="143:26" pos:end="143:31"><expr pos:start="143:26" pos:end="143:31"><operator pos:start="143:26" pos:end="143:26">&amp;</operator><name pos:start="143:27" pos:end="143:31">ss_e1</name></expr></argument>, <argument pos:start="143:34" pos:end="143:39"><expr pos:start="143:34" pos:end="143:39"><operator pos:start="143:34" pos:end="143:34">&amp;</operator><name pos:start="143:35" pos:end="143:39">ss_e2</name></expr></argument>, <argument pos:start="143:42" pos:end="143:47"><expr pos:start="143:42" pos:end="143:47"><name pos:start="143:42" pos:end="143:47">new_ss</name></expr></argument>)</argument_list></call> <operator pos:start="143:50" pos:end="143:51">!=</operator> <literal type="number" pos:start="143:53" pos:end="143:53">0</literal></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:61"><block_content pos:start="145:13" pos:end="145:61">

            <expr_stmt pos:start="145:13" pos:end="145:61"><expr pos:start="145:13" pos:end="145:60"><call pos:start="145:13" pos:end="145:60"><name pos:start="145:13" pos:end="145:31">raise_exception_err</name><argument_list pos:start="145:32" pos:end="145:60">(<argument pos:start="145:33" pos:end="145:42"><expr pos:start="145:33" pos:end="145:42"><name pos:start="145:33" pos:end="145:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="145:45" pos:end="145:59"><expr pos:start="145:45" pos:end="145:59"><name pos:start="145:45" pos:end="145:50">new_ss</name> <operator pos:start="145:52" pos:end="145:52">&amp;</operator> <literal type="number" pos:start="145:54" pos:end="145:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="147:9" pos:end="153:61"><if pos:start="147:9" pos:end="153:61">if <condition pos:start="147:12" pos:end="151:35">(<expr pos:start="147:13" pos:end="151:34"><operator pos:start="147:13" pos:end="147:13">!</operator><operator pos:start="147:14" pos:end="147:14">(</operator><name pos:start="147:15" pos:end="147:19">ss_e2</name> <operator pos:start="147:21" pos:end="147:21">&amp;</operator> <name pos:start="147:23" pos:end="147:33">DESC_S_MASK</name><operator pos:start="147:34" pos:end="147:34">)</operator> <operator pos:start="147:36" pos:end="147:37">||</operator>

            <operator pos:start="149:13" pos:end="149:13">(</operator><name pos:start="149:14" pos:end="149:18">ss_e2</name> <operator pos:start="149:20" pos:end="149:20">&amp;</operator> <name pos:start="149:22" pos:end="149:33">DESC_CS_MASK</name><operator pos:start="149:34" pos:end="149:34">)</operator> <operator pos:start="149:36" pos:end="149:37">||</operator>

            <operator pos:start="151:13" pos:end="151:13">!</operator><operator pos:start="151:14" pos:end="151:14">(</operator><name pos:start="151:15" pos:end="151:19">ss_e2</name> <operator pos:start="151:21" pos:end="151:21">&amp;</operator> <name pos:start="151:23" pos:end="151:33">DESC_W_MASK</name><operator pos:start="151:34" pos:end="151:34">)</operator></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:61"><block_content pos:start="153:13" pos:end="153:61">

            <expr_stmt pos:start="153:13" pos:end="153:61"><expr pos:start="153:13" pos:end="153:60"><call pos:start="153:13" pos:end="153:60"><name pos:start="153:13" pos:end="153:31">raise_exception_err</name><argument_list pos:start="153:32" pos:end="153:60">(<argument pos:start="153:33" pos:end="153:42"><expr pos:start="153:33" pos:end="153:42"><name pos:start="153:33" pos:end="153:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="153:45" pos:end="153:59"><expr pos:start="153:45" pos:end="153:59"><name pos:start="153:45" pos:end="153:50">new_ss</name> <operator pos:start="153:52" pos:end="153:52">&amp;</operator> <literal type="number" pos:start="153:54" pos:end="153:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:44"><expr pos:start="155:9" pos:end="155:43"><name pos:start="155:9" pos:end="155:11">dpl</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <operator pos:start="155:15" pos:end="155:15">(</operator><name pos:start="155:16" pos:end="155:20">ss_e2</name> <operator pos:start="155:22" pos:end="155:23">&gt;&gt;</operator> <name pos:start="155:25" pos:end="155:38">DESC_DPL_SHIFT</name><operator pos:start="155:39" pos:end="155:39">)</operator> <operator pos:start="155:41" pos:end="155:41">&amp;</operator> <literal type="number" pos:start="155:43" pos:end="155:43">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="159:61"><if pos:start="157:9" pos:end="159:61">if <condition pos:start="157:12" pos:end="157:23">(<expr pos:start="157:13" pos:end="157:22"><name pos:start="157:13" pos:end="157:15">dpl</name> <operator pos:start="157:17" pos:end="157:18">!=</operator> <name pos:start="157:20" pos:end="157:22">rpl</name></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:61"><block_content pos:start="159:13" pos:end="159:61">

            <expr_stmt pos:start="159:13" pos:end="159:61"><expr pos:start="159:13" pos:end="159:60"><call pos:start="159:13" pos:end="159:60"><name pos:start="159:13" pos:end="159:31">raise_exception_err</name><argument_list pos:start="159:32" pos:end="159:60">(<argument pos:start="159:33" pos:end="159:42"><expr pos:start="159:33" pos:end="159:42"><name pos:start="159:33" pos:end="159:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="159:45" pos:end="159:59"><expr pos:start="159:45" pos:end="159:59"><name pos:start="159:45" pos:end="159:50">new_ss</name> <operator pos:start="159:52" pos:end="159:52">&amp;</operator> <literal type="number" pos:start="159:54" pos:end="159:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="161:9" pos:end="163:63"><if pos:start="161:9" pos:end="163:63">if <condition pos:start="161:12" pos:end="161:35">(<expr pos:start="161:13" pos:end="161:34"><operator pos:start="161:13" pos:end="161:13">!</operator><operator pos:start="161:14" pos:end="161:14">(</operator><name pos:start="161:15" pos:end="161:19">ss_e2</name> <operator pos:start="161:21" pos:end="161:21">&amp;</operator> <name pos:start="161:23" pos:end="161:33">DESC_P_MASK</name><operator pos:start="161:34" pos:end="161:34">)</operator></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:63"><block_content pos:start="163:13" pos:end="163:63">

            <expr_stmt pos:start="163:13" pos:end="163:63"><expr pos:start="163:13" pos:end="163:62"><call pos:start="163:13" pos:end="163:62"><name pos:start="163:13" pos:end="163:31">raise_exception_err</name><argument_list pos:start="163:32" pos:end="163:62">(<argument pos:start="163:33" pos:end="163:44"><expr pos:start="163:33" pos:end="163:44"><name pos:start="163:33" pos:end="163:44">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="163:47" pos:end="163:61"><expr pos:start="163:47" pos:end="163:61"><name pos:start="163:47" pos:end="163:52">new_ss</name> <operator pos:start="163:54" pos:end="163:54">&amp;</operator> <literal type="number" pos:start="163:56" pos:end="163:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="173:27"><expr pos:start="167:9" pos:end="173:26"><call pos:start="167:9" pos:end="173:26"><name pos:start="167:9" pos:end="167:30">cpu_x86_load_seg_cache</name><argument_list pos:start="167:31" pos:end="173:26">(<argument pos:start="167:32" pos:end="167:34"><expr pos:start="167:32" pos:end="167:34"><name pos:start="167:32" pos:end="167:34">env</name></expr></argument>, <argument pos:start="167:37" pos:end="167:40"><expr pos:start="167:37" pos:end="167:40"><name pos:start="167:37" pos:end="167:40">R_CS</name></expr></argument>, <argument pos:start="167:43" pos:end="167:48"><expr pos:start="167:43" pos:end="167:48"><name pos:start="167:43" pos:end="167:48">new_cs</name></expr></argument>, 

                       <argument pos:start="169:24" pos:end="169:43"><expr pos:start="169:24" pos:end="169:43"><call pos:start="169:24" pos:end="169:43"><name pos:start="169:24" pos:end="169:35">get_seg_base</name><argument_list pos:start="169:36" pos:end="169:43">(<argument pos:start="169:37" pos:end="169:38"><expr pos:start="169:37" pos:end="169:38"><name pos:start="169:37" pos:end="169:38">e1</name></expr></argument>, <argument pos:start="169:41" pos:end="169:42"><expr pos:start="169:41" pos:end="169:42"><name pos:start="169:41" pos:end="169:42">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="171:24" pos:end="171:44"><expr pos:start="171:24" pos:end="171:44"><call pos:start="171:24" pos:end="171:44"><name pos:start="171:24" pos:end="171:36">get_seg_limit</name><argument_list pos:start="171:37" pos:end="171:44">(<argument pos:start="171:38" pos:end="171:39"><expr pos:start="171:38" pos:end="171:39"><name pos:start="171:38" pos:end="171:39">e1</name></expr></argument>, <argument pos:start="171:42" pos:end="171:43"><expr pos:start="171:42" pos:end="171:43"><name pos:start="171:42" pos:end="171:43">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="173:24" pos:end="173:25"><expr pos:start="173:24" pos:end="173:25"><name pos:start="173:24" pos:end="173:25">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="181:30"><expr pos:start="175:9" pos:end="181:29"><call pos:start="175:9" pos:end="181:29"><name pos:start="175:9" pos:end="175:30">cpu_x86_load_seg_cache</name><argument_list pos:start="175:31" pos:end="181:29">(<argument pos:start="175:32" pos:end="175:34"><expr pos:start="175:32" pos:end="175:34"><name pos:start="175:32" pos:end="175:34">env</name></expr></argument>, <argument pos:start="175:37" pos:end="175:40"><expr pos:start="175:37" pos:end="175:40"><name pos:start="175:37" pos:end="175:40">R_SS</name></expr></argument>, <argument pos:start="175:43" pos:end="175:48"><expr pos:start="175:43" pos:end="175:48"><name pos:start="175:43" pos:end="175:48">new_ss</name></expr></argument>, 

                       <argument pos:start="177:24" pos:end="177:49"><expr pos:start="177:24" pos:end="177:49"><call pos:start="177:24" pos:end="177:49"><name pos:start="177:24" pos:end="177:35">get_seg_base</name><argument_list pos:start="177:36" pos:end="177:49">(<argument pos:start="177:37" pos:end="177:41"><expr pos:start="177:37" pos:end="177:41"><name pos:start="177:37" pos:end="177:41">ss_e1</name></expr></argument>, <argument pos:start="177:44" pos:end="177:48"><expr pos:start="177:44" pos:end="177:48"><name pos:start="177:44" pos:end="177:48">ss_e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="179:24" pos:end="179:50"><expr pos:start="179:24" pos:end="179:50"><call pos:start="179:24" pos:end="179:50"><name pos:start="179:24" pos:end="179:36">get_seg_limit</name><argument_list pos:start="179:37" pos:end="179:50">(<argument pos:start="179:38" pos:end="179:42"><expr pos:start="179:38" pos:end="179:42"><name pos:start="179:38" pos:end="179:42">ss_e1</name></expr></argument>, <argument pos:start="179:45" pos:end="179:49"><expr pos:start="179:45" pos:end="179:49"><name pos:start="179:45" pos:end="179:49">ss_e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="181:24" pos:end="181:28"><expr pos:start="181:24" pos:end="181:28"><name pos:start="181:24" pos:end="181:28">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:34"><expr pos:start="183:9" pos:end="183:33"><call pos:start="183:9" pos:end="183:33"><name pos:start="183:9" pos:end="183:23">cpu_x86_set_cpl</name><argument_list pos:start="183:24" pos:end="183:33">(<argument pos:start="183:25" pos:end="183:27"><expr pos:start="183:25" pos:end="183:27"><name pos:start="183:25" pos:end="183:27">env</name></expr></argument>, <argument pos:start="183:30" pos:end="183:32"><expr pos:start="183:30" pos:end="183:32"><name pos:start="183:30" pos:end="183:32">rpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="187:5" pos:end="195:31"><if pos:start="187:5" pos:end="189:22">if <condition pos:start="187:8" pos:end="187:44">(<expr pos:start="187:9" pos:end="187:43"><name pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:11">env</name><operator pos:start="187:12" pos:end="187:13">-&gt;</operator><name pos:start="187:14" pos:end="187:17">segs</name><index pos:start="187:18" pos:end="187:23">[<expr pos:start="187:19" pos:end="187:22"><name pos:start="187:19" pos:end="187:22">R_SS</name></expr>]</index></name><operator pos:start="187:24" pos:end="187:24">.</operator><name pos:start="187:25" pos:end="187:29">flags</name> <operator pos:start="187:31" pos:end="187:31">&amp;</operator> <name pos:start="187:33" pos:end="187:43">DESC_B_MASK</name></expr>)</condition><block type="pseudo" pos:start="189:9" pos:end="189:22"><block_content pos:start="189:9" pos:end="189:22">

        <expr_stmt pos:start="189:9" pos:end="189:22"><expr pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:11">ESP</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <name pos:start="189:15" pos:end="189:21">new_esp</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="191:5" pos:end="195:31">else<block type="pseudo" pos:start="193:9" pos:end="195:31"><block_content pos:start="193:9" pos:end="195:31">

        <expr_stmt pos:start="193:9" pos:end="195:31"><expr pos:start="193:9" pos:end="195:30"><name pos:start="193:9" pos:end="193:11">ESP</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <operator pos:start="193:15" pos:end="193:15">(</operator><name pos:start="193:16" pos:end="193:18">ESP</name> <operator pos:start="193:20" pos:end="193:20">&amp;</operator> <literal type="number" pos:start="193:22" pos:end="193:31">0xffff0000</literal><operator pos:start="193:32" pos:end="193:32">)</operator> <operator pos:start="193:34" pos:end="193:34">|</operator> 

            <operator pos:start="195:13" pos:end="195:13">(</operator><name pos:start="195:14" pos:end="195:20">new_esp</name> <operator pos:start="195:22" pos:end="195:22">&amp;</operator> <literal type="number" pos:start="195:24" pos:end="195:29">0xffff</literal><operator pos:start="195:30" pos:end="195:30">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:23"><expr pos:start="197:5" pos:end="197:22"><name pos:start="197:5" pos:end="197:12"><name pos:start="197:5" pos:end="197:7">env</name><operator pos:start="197:8" pos:end="197:9">-&gt;</operator><name pos:start="197:10" pos:end="197:12">eip</name></name> <operator pos:start="197:14" pos:end="197:14">=</operator> <name pos:start="197:16" pos:end="197:22">new_eip</name></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="217:5"><if pos:start="199:5" pos:end="217:5">if <condition pos:start="199:8" pos:end="199:16">(<expr pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:15">is_iret</name></expr>)</condition> <block pos:start="199:18" pos:end="217:5">{<block_content pos:start="203:9" pos:end="215:45">

        <comment type="block" pos:start="201:9" pos:end="201:63">/* NOTE: 'cpl' can be different from the current CPL */</comment>

        <if_stmt pos:start="203:9" pos:end="209:43"><if pos:start="203:9" pos:end="205:46">if <condition pos:start="203:12" pos:end="203:21">(<expr pos:start="203:13" pos:end="203:20"><name pos:start="203:13" pos:end="203:15">cpl</name> <operator pos:start="203:17" pos:end="203:18">==</operator> <literal type="number" pos:start="203:20" pos:end="203:20">0</literal></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="205:46"><block_content pos:start="205:13" pos:end="205:46">

            <expr_stmt pos:start="205:13" pos:end="205:46"><expr pos:start="205:13" pos:end="205:45"><name pos:start="205:13" pos:end="205:23">eflags_mask</name> <operator pos:start="205:25" pos:end="205:25">=</operator> <name pos:start="205:27" pos:end="205:45">FL_UPDATE_CPL0_MASK</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="207:9" pos:end="209:43">else<block type="pseudo" pos:start="209:13" pos:end="209:43"><block_content pos:start="209:13" pos:end="209:43">

            <expr_stmt pos:start="209:13" pos:end="209:43"><expr pos:start="209:13" pos:end="209:42"><name pos:start="209:13" pos:end="209:23">eflags_mask</name> <operator pos:start="209:25" pos:end="209:25">=</operator> <name pos:start="209:27" pos:end="209:42">FL_UPDATE_MASK32</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="211:9" pos:end="213:34"><if pos:start="211:9" pos:end="213:34">if <condition pos:start="211:12" pos:end="211:23">(<expr pos:start="211:13" pos:end="211:22"><name pos:start="211:13" pos:end="211:17">shift</name> <operator pos:start="211:19" pos:end="211:20">==</operator> <literal type="number" pos:start="211:22" pos:end="211:22">0</literal></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="213:34"><block_content pos:start="213:13" pos:end="213:34">

            <expr_stmt pos:start="213:13" pos:end="213:34"><expr pos:start="213:13" pos:end="213:33"><name pos:start="213:13" pos:end="213:23">eflags_mask</name> <operator pos:start="213:25" pos:end="213:26">&amp;=</operator> <literal type="number" pos:start="213:28" pos:end="213:33">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:45"><expr pos:start="215:9" pos:end="215:44"><call pos:start="215:9" pos:end="215:44"><name pos:start="215:9" pos:end="215:19">load_eflags</name><argument_list pos:start="215:20" pos:end="215:44">(<argument pos:start="215:21" pos:end="215:30"><expr pos:start="215:21" pos:end="215:30"><name pos:start="215:21" pos:end="215:30">new_eflags</name></expr></argument>, <argument pos:start="215:33" pos:end="215:43"><expr pos:start="215:33" pos:end="215:43"><name pos:start="215:33" pos:end="215:43">eflags_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="219:5" pos:end="219:11">return;</return>



 <label pos:start="223:2" pos:end="223:16"><name pos:start="223:2" pos:end="223:15">return_to_vm86</name>:</label>

    <expr_stmt pos:start="225:5" pos:end="225:35"><expr pos:start="225:5" pos:end="225:34"><name pos:start="225:5" pos:end="225:11">new_esp</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <call pos:start="225:15" pos:end="225:34"><name pos:start="225:15" pos:end="225:24">ldl_kernel</name><argument_list pos:start="225:25" pos:end="225:34">(<argument pos:start="225:26" pos:end="225:33"><expr pos:start="225:26" pos:end="225:33"><name pos:start="225:26" pos:end="225:28">ssp</name> <operator pos:start="225:30" pos:end="225:30">+</operator> <literal type="number" pos:start="225:32" pos:end="225:33">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:34"><expr pos:start="227:5" pos:end="227:33"><name pos:start="227:5" pos:end="227:10">new_ss</name> <operator pos:start="227:12" pos:end="227:12">=</operator> <call pos:start="227:14" pos:end="227:33"><name pos:start="227:14" pos:end="227:23">ldl_kernel</name><argument_list pos:start="227:24" pos:end="227:33">(<argument pos:start="227:25" pos:end="227:32"><expr pos:start="227:25" pos:end="227:32"><name pos:start="227:25" pos:end="227:27">ssp</name> <operator pos:start="227:29" pos:end="227:29">+</operator> <literal type="number" pos:start="227:31" pos:end="227:32">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:34"><expr pos:start="229:5" pos:end="229:33"><name pos:start="229:5" pos:end="229:10">new_es</name> <operator pos:start="229:12" pos:end="229:12">=</operator> <call pos:start="229:14" pos:end="229:33"><name pos:start="229:14" pos:end="229:23">ldl_kernel</name><argument_list pos:start="229:24" pos:end="229:33">(<argument pos:start="229:25" pos:end="229:32"><expr pos:start="229:25" pos:end="229:32"><name pos:start="229:25" pos:end="229:27">ssp</name> <operator pos:start="229:29" pos:end="229:29">+</operator> <literal type="number" pos:start="229:31" pos:end="229:32">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:34"><expr pos:start="231:5" pos:end="231:33"><name pos:start="231:5" pos:end="231:10">new_ds</name> <operator pos:start="231:12" pos:end="231:12">=</operator> <call pos:start="231:14" pos:end="231:33"><name pos:start="231:14" pos:end="231:23">ldl_kernel</name><argument_list pos:start="231:24" pos:end="231:33">(<argument pos:start="231:25" pos:end="231:32"><expr pos:start="231:25" pos:end="231:32"><name pos:start="231:25" pos:end="231:27">ssp</name> <operator pos:start="231:29" pos:end="231:29">+</operator> <literal type="number" pos:start="231:31" pos:end="231:32">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:34"><expr pos:start="233:5" pos:end="233:33"><name pos:start="233:5" pos:end="233:10">new_fs</name> <operator pos:start="233:12" pos:end="233:12">=</operator> <call pos:start="233:14" pos:end="233:33"><name pos:start="233:14" pos:end="233:23">ldl_kernel</name><argument_list pos:start="233:24" pos:end="233:33">(<argument pos:start="233:25" pos:end="233:32"><expr pos:start="233:25" pos:end="233:32"><name pos:start="233:25" pos:end="233:27">ssp</name> <operator pos:start="233:29" pos:end="233:29">+</operator> <literal type="number" pos:start="233:31" pos:end="233:32">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:34"><expr pos:start="235:5" pos:end="235:33"><name pos:start="235:5" pos:end="235:10">new_gs</name> <operator pos:start="235:12" pos:end="235:12">=</operator> <call pos:start="235:14" pos:end="235:33"><name pos:start="235:14" pos:end="235:23">ldl_kernel</name><argument_list pos:start="235:24" pos:end="235:33">(<argument pos:start="235:25" pos:end="235:32"><expr pos:start="235:25" pos:end="235:32"><name pos:start="235:25" pos:end="235:27">ssp</name> <operator pos:start="235:29" pos:end="235:29">+</operator> <literal type="number" pos:start="235:31" pos:end="235:32">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="239:5" pos:end="239:32">/* modify processor state */</comment>

    <expr_stmt pos:start="241:5" pos:end="241:81"><expr pos:start="241:5" pos:end="241:80"><call pos:start="241:5" pos:end="241:80"><name pos:start="241:5" pos:end="241:15">load_eflags</name><argument_list pos:start="241:16" pos:end="241:80">(<argument pos:start="241:17" pos:end="241:26"><expr pos:start="241:17" pos:end="241:26"><name pos:start="241:17" pos:end="241:26">new_eflags</name></expr></argument>, <argument pos:start="241:29" pos:end="241:79"><expr pos:start="241:29" pos:end="241:79"><name pos:start="241:29" pos:end="241:47">FL_UPDATE_CPL0_MASK</name> <operator pos:start="241:49" pos:end="241:49">|</operator> <name pos:start="241:51" pos:end="241:57">VM_MASK</name> <operator pos:start="241:59" pos:end="241:59">|</operator> <name pos:start="241:61" pos:end="241:68">VIF_MASK</name> <operator pos:start="241:70" pos:end="241:70">|</operator> <name pos:start="241:72" pos:end="241:79">VIP_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:30"><expr pos:start="243:5" pos:end="243:29"><call pos:start="243:5" pos:end="243:29"><name pos:start="243:5" pos:end="243:15">load_seg_vm</name><argument_list pos:start="243:16" pos:end="243:29">(<argument pos:start="243:17" pos:end="243:20"><expr pos:start="243:17" pos:end="243:20"><name pos:start="243:17" pos:end="243:20">R_CS</name></expr></argument>, <argument pos:start="243:23" pos:end="243:28"><expr pos:start="243:23" pos:end="243:28"><name pos:start="243:23" pos:end="243:28">new_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:28"><expr pos:start="245:5" pos:end="245:27"><call pos:start="245:5" pos:end="245:27"><name pos:start="245:5" pos:end="245:19">cpu_x86_set_cpl</name><argument_list pos:start="245:20" pos:end="245:27">(<argument pos:start="245:21" pos:end="245:23"><expr pos:start="245:21" pos:end="245:23"><name pos:start="245:21" pos:end="245:23">env</name></expr></argument>, <argument pos:start="245:26" pos:end="245:26"><expr pos:start="245:26" pos:end="245:26"><literal type="number" pos:start="245:26" pos:end="245:26">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:30"><expr pos:start="247:5" pos:end="247:29"><call pos:start="247:5" pos:end="247:29"><name pos:start="247:5" pos:end="247:15">load_seg_vm</name><argument_list pos:start="247:16" pos:end="247:29">(<argument pos:start="247:17" pos:end="247:20"><expr pos:start="247:17" pos:end="247:20"><name pos:start="247:17" pos:end="247:20">R_SS</name></expr></argument>, <argument pos:start="247:23" pos:end="247:28"><expr pos:start="247:23" pos:end="247:28"><name pos:start="247:23" pos:end="247:28">new_ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:30"><expr pos:start="249:5" pos:end="249:29"><call pos:start="249:5" pos:end="249:29"><name pos:start="249:5" pos:end="249:15">load_seg_vm</name><argument_list pos:start="249:16" pos:end="249:29">(<argument pos:start="249:17" pos:end="249:20"><expr pos:start="249:17" pos:end="249:20"><name pos:start="249:17" pos:end="249:20">R_ES</name></expr></argument>, <argument pos:start="249:23" pos:end="249:28"><expr pos:start="249:23" pos:end="249:28"><name pos:start="249:23" pos:end="249:28">new_es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:30"><expr pos:start="251:5" pos:end="251:29"><call pos:start="251:5" pos:end="251:29"><name pos:start="251:5" pos:end="251:15">load_seg_vm</name><argument_list pos:start="251:16" pos:end="251:29">(<argument pos:start="251:17" pos:end="251:20"><expr pos:start="251:17" pos:end="251:20"><name pos:start="251:17" pos:end="251:20">R_DS</name></expr></argument>, <argument pos:start="251:23" pos:end="251:28"><expr pos:start="251:23" pos:end="251:28"><name pos:start="251:23" pos:end="251:28">new_ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:30"><expr pos:start="253:5" pos:end="253:29"><call pos:start="253:5" pos:end="253:29"><name pos:start="253:5" pos:end="253:15">load_seg_vm</name><argument_list pos:start="253:16" pos:end="253:29">(<argument pos:start="253:17" pos:end="253:20"><expr pos:start="253:17" pos:end="253:20"><name pos:start="253:17" pos:end="253:20">R_FS</name></expr></argument>, <argument pos:start="253:23" pos:end="253:28"><expr pos:start="253:23" pos:end="253:28"><name pos:start="253:23" pos:end="253:28">new_fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:30"><expr pos:start="255:5" pos:end="255:29"><call pos:start="255:5" pos:end="255:29"><name pos:start="255:5" pos:end="255:15">load_seg_vm</name><argument_list pos:start="255:16" pos:end="255:29">(<argument pos:start="255:17" pos:end="255:20"><expr pos:start="255:17" pos:end="255:20"><name pos:start="255:17" pos:end="255:20">R_GS</name></expr></argument>, <argument pos:start="255:23" pos:end="255:28"><expr pos:start="255:23" pos:end="255:28"><name pos:start="255:23" pos:end="255:28">new_gs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:23"><expr pos:start="259:5" pos:end="259:22"><name pos:start="259:5" pos:end="259:12"><name pos:start="259:5" pos:end="259:7">env</name><operator pos:start="259:8" pos:end="259:9">-&gt;</operator><name pos:start="259:10" pos:end="259:12">eip</name></name> <operator pos:start="259:14" pos:end="259:14">=</operator> <name pos:start="259:16" pos:end="259:22">new_eip</name></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:18"><expr pos:start="261:5" pos:end="261:17"><name pos:start="261:5" pos:end="261:7">ESP</name> <operator pos:start="261:9" pos:end="261:9">=</operator> <name pos:start="261:11" pos:end="261:17">new_esp</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
