<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17695.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">raw_open_common</name><parameter_list pos:start="1:27" pos:end="3:72">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:63"><decl pos:start="1:50" pos:end="1:63"><type pos:start="1:50" pos:end="1:63"><name pos:start="1:50" pos:end="1:54">QDict</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:63">options</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:41"><decl pos:start="3:28" pos:end="3:41"><type pos:start="3:28" pos:end="3:41"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:41">bdrv_flags</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:57"><decl pos:start="3:44" pos:end="3:57"><type pos:start="3:44" pos:end="3:57"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:57">open_flags</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:64">Error</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier><modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:71">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="119:1">{<block_content pos:start="7:5" pos:end="117:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QemuOpts</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:24">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">fd</name></decl>, <decl pos:start="15:13" pos:end="15:15"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:13" pos:end="15:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:54"><expr pos:start="19:5" pos:end="19:53"><name pos:start="19:5" pos:end="19:8">opts</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="19:53"><name pos:start="19:12" pos:end="19:34">qemu_opts_create_nofail</name><argument_list pos:start="19:35" pos:end="19:53">(<argument pos:start="19:36" pos:end="19:52"><expr pos:start="19:36" pos:end="19:52"><operator pos:start="19:36" pos:end="19:36">&amp;</operator><name pos:start="19:37" pos:end="19:52">raw_runtime_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:54"><expr pos:start="21:5" pos:end="21:53"><call pos:start="21:5" pos:end="21:53"><name pos:start="21:5" pos:end="21:26">qemu_opts_absorb_qdict</name><argument_list pos:start="21:27" pos:end="21:53">(<argument pos:start="21:28" pos:end="21:31"><expr pos:start="21:28" pos:end="21:31"><name pos:start="21:28" pos:end="21:31">opts</name></expr></argument>, <argument pos:start="21:34" pos:end="21:40"><expr pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:40">options</name></expr></argument>, <argument pos:start="21:43" pos:end="21:52"><expr pos:start="21:43" pos:end="21:52"><operator pos:start="21:43" pos:end="21:43">&amp;</operator><name pos:start="21:44" pos:end="21:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:33">(<expr pos:start="23:9" pos:end="23:32"><call pos:start="23:9" pos:end="23:32"><name pos:start="23:9" pos:end="23:20">error_is_set</name><argument_list pos:start="23:21" pos:end="23:32">(<argument pos:start="23:22" pos:end="23:31"><expr pos:start="23:22" pos:end="23:31"><operator pos:start="23:22" pos:end="23:22">&amp;</operator><name pos:start="23:23" pos:end="23:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:35" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:18">

        <expr_stmt pos:start="25:9" pos:end="25:41"><expr pos:start="25:9" pos:end="25:40"><call pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:23">error_propagate</name><argument_list pos:start="25:24" pos:end="25:40">(<argument pos:start="25:25" pos:end="25:28"><expr pos:start="25:25" pos:end="25:28"><name pos:start="25:25" pos:end="25:28">errp</name></expr></argument>, <argument pos:start="25:31" pos:end="25:39"><expr pos:start="25:31" pos:end="25:39"><name pos:start="25:31" pos:end="25:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">-</operator><name pos:start="27:16" pos:end="27:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:46"><expr pos:start="35:5" pos:end="35:45"><name pos:start="35:5" pos:end="35:12">filename</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:45"><name pos:start="35:16" pos:end="35:27">qemu_opt_get</name><argument_list pos:start="35:28" pos:end="35:45">(<argument pos:start="35:29" pos:end="35:32"><expr pos:start="35:29" pos:end="35:32"><name pos:start="35:29" pos:end="35:32">opts</name></expr></argument>, <argument pos:start="35:35" pos:end="35:44"><expr pos:start="35:35" pos:end="35:44"><literal type="string" pos:start="35:35" pos:end="35:44">"filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:46"><expr pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:45"><name pos:start="39:11" pos:end="39:34">raw_normalize_devicepath</name><argument_list pos:start="39:35" pos:end="39:45">(<argument pos:start="39:36" pos:end="39:44"><expr pos:start="39:36" pos:end="39:44"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:44">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:17">(<expr pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:14">!=</operator> <literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>)</condition> <block pos:start="41:19" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:72"><expr pos:start="43:9" pos:end="43:71"><call pos:start="43:9" pos:end="43:71"><name pos:start="43:9" pos:end="43:24">error_setg_errno</name><argument_list pos:start="43:25" pos:end="43:71">(<argument pos:start="43:26" pos:end="43:29"><expr pos:start="43:26" pos:end="43:29"><name pos:start="43:26" pos:end="43:29">errp</name></expr></argument>, <argument pos:start="43:32" pos:end="43:35"><expr pos:start="43:32" pos:end="43:35"><operator pos:start="43:32" pos:end="43:32">-</operator><name pos:start="43:33" pos:end="43:35">ret</name></expr></argument>, <argument pos:start="43:38" pos:end="43:70"><expr pos:start="43:38" pos:end="43:70"><literal type="string" pos:start="43:38" pos:end="43:70">"Could not normalize device path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:18">goto <name pos:start="45:14" pos:end="45:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:17">open_flags</name></name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:30">open_flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:48"><expr pos:start="53:5" pos:end="53:47"><call pos:start="53:5" pos:end="53:47"><name pos:start="53:5" pos:end="53:19">raw_parse_flags</name><argument_list pos:start="53:20" pos:end="53:47">(<argument pos:start="53:21" pos:end="53:30"><expr pos:start="53:21" pos:end="53:30"><name pos:start="53:21" pos:end="53:30">bdrv_flags</name></expr></argument>, <argument pos:start="53:33" pos:end="53:46"><expr pos:start="53:33" pos:end="53:46"><operator pos:start="53:33" pos:end="53:33">&amp;</operator><name pos:start="53:34" pos:end="53:46"><name pos:start="53:34" pos:end="53:34">s</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:46">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:15"><expr pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:9"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:9">fd</name></name> <operator pos:start="57:11" pos:end="57:11">=</operator> <operator pos:start="57:13" pos:end="57:13">-</operator><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:50"><expr pos:start="59:5" pos:end="59:49"><name pos:start="59:5" pos:end="59:6">fd</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <call pos:start="59:10" pos:end="59:49"><name pos:start="59:10" pos:end="59:18">qemu_open</name><argument_list pos:start="59:19" pos:end="59:49">(<argument pos:start="59:20" pos:end="59:27"><expr pos:start="59:20" pos:end="59:27"><name pos:start="59:20" pos:end="59:27">filename</name></expr></argument>, <argument pos:start="59:30" pos:end="59:42"><expr pos:start="59:30" pos:end="59:42"><name pos:start="59:30" pos:end="59:42"><name pos:start="59:30" pos:end="59:30">s</name><operator pos:start="59:31" pos:end="59:32">-&gt;</operator><name pos:start="59:33" pos:end="59:42">open_flags</name></name></expr></argument>, <argument pos:start="59:45" pos:end="59:48"><expr pos:start="59:45" pos:end="59:48"><literal type="number" pos:start="59:45" pos:end="59:48">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="73:5"><if pos:start="61:5" pos:end="73:5">if <condition pos:start="61:8" pos:end="61:15">(<expr pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:10">fd</name> <operator pos:start="61:12" pos:end="61:12">&lt;</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>)</condition> <block pos:start="61:17" pos:end="73:5">{<block_content pos:start="63:9" pos:end="71:18">

        <expr_stmt pos:start="63:9" pos:end="63:21"><expr pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">-</operator><name pos:start="63:16" pos:end="63:20">errno</name></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:26">(<expr pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:18">==</operator> <operator pos:start="65:20" pos:end="65:20">-</operator><name pos:start="65:21" pos:end="65:25">EROFS</name></expr>)</condition> <block pos:start="65:28" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:26">

            <expr_stmt pos:start="67:13" pos:end="67:26"><expr pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <operator pos:start="67:19" pos:end="67:19">-</operator><name pos:start="67:20" pos:end="67:25">EACCES</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="80:0"><expr pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:9"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:9">fd</name></name> <operator pos:start="75:11" pos:end="75:11">=</operator> <name pos:start="75:13" pos:end="75:14">fd</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="79:1" pos:end="79:23">#<cpp:directive pos:start="79:2" pos:end="79:6">ifdef</cpp:directive> <name pos:start="79:8" pos:end="79:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <if_stmt pos:start="81:5" pos:end="94:0"><if pos:start="81:5" pos:end="94:0">if <condition pos:start="81:8" pos:end="81:58">(<expr pos:start="81:9" pos:end="81:57"><call pos:start="81:9" pos:end="81:57"><name pos:start="81:9" pos:end="81:19">raw_set_aio</name><argument_list pos:start="81:20" pos:end="81:57">(<argument pos:start="81:21" pos:end="81:31"><expr pos:start="81:21" pos:end="81:31"><operator pos:start="81:21" pos:end="81:21">&amp;</operator><name pos:start="81:22" pos:end="81:31"><name pos:start="81:22" pos:end="81:22">s</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:31">aio_ctx</name></name></expr></argument>, <argument pos:start="81:34" pos:end="81:44"><expr pos:start="81:34" pos:end="81:44"><operator pos:start="81:34" pos:end="81:34">&amp;</operator><name pos:start="81:35" pos:end="81:44"><name pos:start="81:35" pos:end="81:35">s</name><operator pos:start="81:36" pos:end="81:37">-&gt;</operator><name pos:start="81:38" pos:end="81:44">use_aio</name></name></expr></argument>, <argument pos:start="81:47" pos:end="81:56"><expr pos:start="81:47" pos:end="81:56"><name pos:start="81:47" pos:end="81:56">bdrv_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:60" pos:end="94:0">{<block_content pos:start="83:9" pos:end="89:18">

        <expr_stmt pos:start="83:9" pos:end="83:23"><expr pos:start="83:9" pos:end="83:22"><call pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:18">qemu_close</name><argument_list pos:start="83:19" pos:end="83:22">(<argument pos:start="83:20" pos:end="83:21"><expr pos:start="83:20" pos:end="83:21"><name pos:start="83:20" pos:end="83:21">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:21"><expr pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><name pos:start="85:16" pos:end="85:20">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:64"><expr pos:start="87:9" pos:end="87:63"><call pos:start="87:9" pos:end="87:63"><name pos:start="87:9" pos:end="87:24">error_setg_errno</name><argument_list pos:start="87:25" pos:end="87:63">(<argument pos:start="87:26" pos:end="87:29"><expr pos:start="87:26" pos:end="87:29"><name pos:start="87:26" pos:end="87:29">errp</name></expr></argument>, <argument pos:start="87:32" pos:end="87:35"><expr pos:start="87:32" pos:end="87:35"><operator pos:start="87:32" pos:end="87:32">-</operator><name pos:start="87:33" pos:end="87:35">ret</name></expr></argument>, <argument pos:start="87:38" pos:end="87:62"><expr pos:start="87:38" pos:end="87:62"><literal type="string" pos:start="87:38" pos:end="87:62">"Could not set AIO state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:18">goto <name pos:start="89:14" pos:end="89:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="97:5" pos:end="100:0"><expr pos:start="97:5" pos:end="97:22"><name pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:18">has_discard</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <literal type="number" pos:start="97:22" pos:end="97:22">1</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="99:1" pos:end="99:17">#<cpp:directive pos:start="99:2" pos:end="99:6">ifdef</cpp:directive> <name pos:start="99:8" pos:end="99:17">CONFIG_XFS</name></cpp:ifdef>

    <if_stmt pos:start="101:5" pos:end="108:0"><if pos:start="101:5" pos:end="108:0">if <condition pos:start="101:8" pos:end="101:36">(<expr pos:start="101:9" pos:end="101:35"><call pos:start="101:9" pos:end="101:35"><name pos:start="101:9" pos:end="101:28">platform_test_xfs_fd</name><argument_list pos:start="101:29" pos:end="101:35">(<argument pos:start="101:30" pos:end="101:34"><expr pos:start="101:30" pos:end="101:34"><name pos:start="101:30" pos:end="101:34"><name pos:start="101:30" pos:end="101:30">s</name><operator pos:start="101:31" pos:end="101:32">-&gt;</operator><name pos:start="101:33" pos:end="101:34">fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:38" pos:end="108:0">{<block_content pos:start="103:9" pos:end="103:22">

        <expr_stmt pos:start="103:9" pos:end="103:22"><expr pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:17">is_xfs</name></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="111:5" pos:end="111:12"><expr pos:start="111:5" pos:end="111:11"><name pos:start="111:5" pos:end="111:7">ret</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <literal type="number" pos:start="111:11" pos:end="111:11">0</literal></expr>;</expr_stmt>

<label pos:start="113:1" pos:end="113:5"><name pos:start="113:1" pos:end="113:4">fail</name>:</label>

    <expr_stmt pos:start="115:5" pos:end="115:24"><expr pos:start="115:5" pos:end="115:23"><call pos:start="115:5" pos:end="115:23"><name pos:start="115:5" pos:end="115:17">qemu_opts_del</name><argument_list pos:start="115:18" pos:end="115:23">(<argument pos:start="115:19" pos:end="115:22"><expr pos:start="115:19" pos:end="115:22"><name pos:start="115:19" pos:end="115:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="117:5" pos:end="117:15">return <expr pos:start="117:12" pos:end="117:14"><name pos:start="117:12" pos:end="117:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
