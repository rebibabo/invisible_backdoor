<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14494.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:11">MemTxResult</name></type> <name pos:start="1:13" pos:end="1:39">address_space_read_continue</name><parameter_list pos:start="1:40" pos:end="7:57">(<parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:52">AddressSpace</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">as</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:69"><decl pos:start="1:59" pos:end="1:69"><type pos:start="1:59" pos:end="1:69"><name pos:start="1:59" pos:end="1:64">hwaddr</name></type> <name pos:start="1:66" pos:end="1:69">addr</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:56"><decl pos:start="3:41" pos:end="3:56"><type pos:start="3:41" pos:end="3:56"><name pos:start="3:41" pos:end="3:50">MemTxAttrs</name></type> <name pos:start="3:52" pos:end="3:56">attrs</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:70"><decl pos:start="3:59" pos:end="3:70"><type pos:start="3:59" pos:end="3:70"><name pos:start="3:59" pos:end="3:65">uint8_t</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:70">buf</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:47"><decl pos:start="5:41" pos:end="5:47"><type pos:start="5:41" pos:end="5:47"><name pos:start="5:41" pos:end="5:43">int</name></type> <name pos:start="5:45" pos:end="5:47">len</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:61"><decl pos:start="5:50" pos:end="5:61"><type pos:start="5:50" pos:end="5:61"><name pos:start="5:50" pos:end="5:55">hwaddr</name></type> <name pos:start="5:57" pos:end="5:61">addr1</name></decl></parameter>, <parameter pos:start="5:64" pos:end="5:71"><decl pos:start="5:64" pos:end="5:71"><type pos:start="5:64" pos:end="5:71"><name pos:start="5:64" pos:end="5:69">hwaddr</name></type> <name pos:start="5:71" pos:end="5:71">l</name></decl></parameter>,

                                        <parameter pos:start="7:41" pos:end="7:56"><decl pos:start="7:41" pos:end="7:56"><type pos:start="7:41" pos:end="7:56"><name pos:start="7:41" pos:end="7:52">MemoryRegion</name> <modifier pos:start="7:54" pos:end="7:54">*</modifier></type><name pos:start="7:55" pos:end="7:56">mr</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="135:1">{<block_content pos:start="11:5" pos:end="133:18">

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:16">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15">MemTxResult</name></type> <name pos:start="15:17" pos:end="15:22">result</name> <init pos:start="15:24" pos:end="15:33">= <expr pos:start="15:26" pos:end="15:33"><name pos:start="15:26" pos:end="15:33">MEMTX_OK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:21">release_lock</name> <init pos:start="17:23" pos:end="17:29">= <expr pos:start="17:25" pos:end="17:29"><name pos:start="17:25" pos:end="17:29">false</name></expr></init></decl>;</decl_stmt>



    <for pos:start="21:5" pos:end="129:5">for <control pos:start="21:9" pos:end="21:12">(<init pos:start="21:10" pos:end="21:10">;</init><condition pos:start="21:11" pos:end="21:11">;</condition><incr/>)</control> <block pos:start="21:14" pos:end="129:5">{<block_content pos:start="23:9" pos:end="127:66">

        <if_stmt pos:start="23:9" pos:end="95:9"><if pos:start="23:9" pos:end="87:9">if <condition pos:start="23:12" pos:end="23:48">(<expr pos:start="23:13" pos:end="23:47"><operator pos:start="23:13" pos:end="23:13">!</operator><call pos:start="23:14" pos:end="23:47"><name pos:start="23:14" pos:end="23:36">memory_access_is_direct</name><argument_list pos:start="23:37" pos:end="23:47">(<argument pos:start="23:38" pos:end="23:39"><expr pos:start="23:38" pos:end="23:39"><name pos:start="23:38" pos:end="23:39">mr</name></expr></argument>, <argument pos:start="23:42" pos:end="23:46"><expr pos:start="23:42" pos:end="23:46"><name pos:start="23:42" pos:end="23:46">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:50" pos:end="87:9">{<block_content pos:start="27:13" pos:end="85:13">

            <comment type="block" pos:start="25:13" pos:end="25:26">/* I/O case */</comment>

            <expr_stmt pos:start="27:13" pos:end="27:52"><expr pos:start="27:13" pos:end="27:51"><name pos:start="27:13" pos:end="27:24">release_lock</name> <operator pos:start="27:26" pos:end="27:27">|=</operator> <call pos:start="27:29" pos:end="27:51"><name pos:start="27:29" pos:end="27:47">prepare_mmio_access</name><argument_list pos:start="27:48" pos:end="27:51">(<argument pos:start="27:49" pos:end="27:50"><expr pos:start="27:49" pos:end="27:50"><name pos:start="27:49" pos:end="27:50">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:49"><expr pos:start="29:13" pos:end="29:48"><name pos:start="29:13" pos:end="29:13">l</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:48"><name pos:start="29:17" pos:end="29:34">memory_access_size</name><argument_list pos:start="29:35" pos:end="29:48">(<argument pos:start="29:36" pos:end="29:37"><expr pos:start="29:36" pos:end="29:37"><name pos:start="29:36" pos:end="29:37">mr</name></expr></argument>, <argument pos:start="29:40" pos:end="29:40"><expr pos:start="29:40" pos:end="29:40"><name pos:start="29:40" pos:end="29:40">l</name></expr></argument>, <argument pos:start="29:43" pos:end="29:47"><expr pos:start="29:43" pos:end="29:47"><name pos:start="29:43" pos:end="29:47">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="31:13" pos:end="85:13">switch <condition pos:start="31:20" pos:end="31:22">(<expr pos:start="31:21" pos:end="31:21"><name pos:start="31:21" pos:end="31:21">l</name></expr>)</condition> <block pos:start="31:24" pos:end="85:13">{<block_content pos:start="33:13" pos:end="83:24">

            <case pos:start="33:13" pos:end="33:19">case <expr pos:start="33:18" pos:end="33:18"><literal type="number" pos:start="33:18" pos:end="33:18">8</literal></expr>:</case>

                <comment type="block" pos:start="35:17" pos:end="35:40">/* 64 bit read access */</comment>

                <expr_stmt pos:start="37:17" pos:end="39:61"><expr pos:start="37:17" pos:end="39:60"><name pos:start="37:17" pos:end="37:22">result</name> <operator pos:start="37:24" pos:end="37:25">|=</operator> <call pos:start="37:27" pos:end="39:60"><name pos:start="37:27" pos:end="37:53">memory_region_dispatch_read</name><argument_list pos:start="37:54" pos:end="39:60">(<argument pos:start="37:55" pos:end="37:56"><expr pos:start="37:55" pos:end="37:56"><name pos:start="37:55" pos:end="37:56">mr</name></expr></argument>, <argument pos:start="37:59" pos:end="37:63"><expr pos:start="37:59" pos:end="37:63"><name pos:start="37:59" pos:end="37:63">addr1</name></expr></argument>, <argument pos:start="37:66" pos:end="37:69"><expr pos:start="37:66" pos:end="37:69"><operator pos:start="37:66" pos:end="37:66">&amp;</operator><name pos:start="37:67" pos:end="37:69">val</name></expr></argument>, <argument pos:start="37:72" pos:end="37:72"><expr pos:start="37:72" pos:end="37:72"><literal type="number" pos:start="37:72" pos:end="37:72">8</literal></expr></argument>,

                                                      <argument pos:start="39:55" pos:end="39:59"><expr pos:start="39:55" pos:end="39:59"><name pos:start="39:55" pos:end="39:59">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:32"><expr pos:start="41:17" pos:end="41:31"><call pos:start="41:17" pos:end="41:31"><name pos:start="41:17" pos:end="41:21">stq_p</name><argument_list pos:start="41:22" pos:end="41:31">(<argument pos:start="41:23" pos:end="41:25"><expr pos:start="41:23" pos:end="41:25"><name pos:start="41:23" pos:end="41:25">buf</name></expr></argument>, <argument pos:start="41:28" pos:end="41:30"><expr pos:start="41:28" pos:end="41:30"><name pos:start="41:28" pos:end="41:30">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="43:17" pos:end="43:22">break;</break>

            <case pos:start="45:13" pos:end="45:19">case <expr pos:start="45:18" pos:end="45:18"><literal type="number" pos:start="45:18" pos:end="45:18">4</literal></expr>:</case>

                <comment type="block" pos:start="47:17" pos:end="47:40">/* 32 bit read access */</comment>

                <expr_stmt pos:start="49:17" pos:end="51:61"><expr pos:start="49:17" pos:end="51:60"><name pos:start="49:17" pos:end="49:22">result</name> <operator pos:start="49:24" pos:end="49:25">|=</operator> <call pos:start="49:27" pos:end="51:60"><name pos:start="49:27" pos:end="49:53">memory_region_dispatch_read</name><argument_list pos:start="49:54" pos:end="51:60">(<argument pos:start="49:55" pos:end="49:56"><expr pos:start="49:55" pos:end="49:56"><name pos:start="49:55" pos:end="49:56">mr</name></expr></argument>, <argument pos:start="49:59" pos:end="49:63"><expr pos:start="49:59" pos:end="49:63"><name pos:start="49:59" pos:end="49:63">addr1</name></expr></argument>, <argument pos:start="49:66" pos:end="49:69"><expr pos:start="49:66" pos:end="49:69"><operator pos:start="49:66" pos:end="49:66">&amp;</operator><name pos:start="49:67" pos:end="49:69">val</name></expr></argument>, <argument pos:start="49:72" pos:end="49:72"><expr pos:start="49:72" pos:end="49:72"><literal type="number" pos:start="49:72" pos:end="49:72">4</literal></expr></argument>,

                                                      <argument pos:start="51:55" pos:end="51:59"><expr pos:start="51:55" pos:end="51:59"><name pos:start="51:55" pos:end="51:59">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:32"><expr pos:start="53:17" pos:end="53:31"><call pos:start="53:17" pos:end="53:31"><name pos:start="53:17" pos:end="53:21">stl_p</name><argument_list pos:start="53:22" pos:end="53:31">(<argument pos:start="53:23" pos:end="53:25"><expr pos:start="53:23" pos:end="53:25"><name pos:start="53:23" pos:end="53:25">buf</name></expr></argument>, <argument pos:start="53:28" pos:end="53:30"><expr pos:start="53:28" pos:end="53:30"><name pos:start="53:28" pos:end="53:30">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="55:17" pos:end="55:22">break;</break>

            <case pos:start="57:13" pos:end="57:19">case <expr pos:start="57:18" pos:end="57:18"><literal type="number" pos:start="57:18" pos:end="57:18">2</literal></expr>:</case>

                <comment type="block" pos:start="59:17" pos:end="59:40">/* 16 bit read access */</comment>

                <expr_stmt pos:start="61:17" pos:end="63:61"><expr pos:start="61:17" pos:end="63:60"><name pos:start="61:17" pos:end="61:22">result</name> <operator pos:start="61:24" pos:end="61:25">|=</operator> <call pos:start="61:27" pos:end="63:60"><name pos:start="61:27" pos:end="61:53">memory_region_dispatch_read</name><argument_list pos:start="61:54" pos:end="63:60">(<argument pos:start="61:55" pos:end="61:56"><expr pos:start="61:55" pos:end="61:56"><name pos:start="61:55" pos:end="61:56">mr</name></expr></argument>, <argument pos:start="61:59" pos:end="61:63"><expr pos:start="61:59" pos:end="61:63"><name pos:start="61:59" pos:end="61:63">addr1</name></expr></argument>, <argument pos:start="61:66" pos:end="61:69"><expr pos:start="61:66" pos:end="61:69"><operator pos:start="61:66" pos:end="61:66">&amp;</operator><name pos:start="61:67" pos:end="61:69">val</name></expr></argument>, <argument pos:start="61:72" pos:end="61:72"><expr pos:start="61:72" pos:end="61:72"><literal type="number" pos:start="61:72" pos:end="61:72">2</literal></expr></argument>,

                                                      <argument pos:start="63:55" pos:end="63:59"><expr pos:start="63:55" pos:end="63:59"><name pos:start="63:55" pos:end="63:59">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:32"><expr pos:start="65:17" pos:end="65:31"><call pos:start="65:17" pos:end="65:31"><name pos:start="65:17" pos:end="65:21">stw_p</name><argument_list pos:start="65:22" pos:end="65:31">(<argument pos:start="65:23" pos:end="65:25"><expr pos:start="65:23" pos:end="65:25"><name pos:start="65:23" pos:end="65:25">buf</name></expr></argument>, <argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="67:17" pos:end="67:22">break;</break>

            <case pos:start="69:13" pos:end="69:19">case <expr pos:start="69:18" pos:end="69:18"><literal type="number" pos:start="69:18" pos:end="69:18">1</literal></expr>:</case>

                <comment type="block" pos:start="71:17" pos:end="71:39">/* 8 bit read access */</comment>

                <expr_stmt pos:start="73:17" pos:end="75:61"><expr pos:start="73:17" pos:end="75:60"><name pos:start="73:17" pos:end="73:22">result</name> <operator pos:start="73:24" pos:end="73:25">|=</operator> <call pos:start="73:27" pos:end="75:60"><name pos:start="73:27" pos:end="73:53">memory_region_dispatch_read</name><argument_list pos:start="73:54" pos:end="75:60">(<argument pos:start="73:55" pos:end="73:56"><expr pos:start="73:55" pos:end="73:56"><name pos:start="73:55" pos:end="73:56">mr</name></expr></argument>, <argument pos:start="73:59" pos:end="73:63"><expr pos:start="73:59" pos:end="73:63"><name pos:start="73:59" pos:end="73:63">addr1</name></expr></argument>, <argument pos:start="73:66" pos:end="73:69"><expr pos:start="73:66" pos:end="73:69"><operator pos:start="73:66" pos:end="73:66">&amp;</operator><name pos:start="73:67" pos:end="73:69">val</name></expr></argument>, <argument pos:start="73:72" pos:end="73:72"><expr pos:start="73:72" pos:end="73:72"><literal type="number" pos:start="73:72" pos:end="73:72">1</literal></expr></argument>,

                                                      <argument pos:start="75:55" pos:end="75:59"><expr pos:start="75:55" pos:end="75:59"><name pos:start="75:55" pos:end="75:59">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:32"><expr pos:start="77:17" pos:end="77:31"><call pos:start="77:17" pos:end="77:31"><name pos:start="77:17" pos:end="77:21">stb_p</name><argument_list pos:start="77:22" pos:end="77:31">(<argument pos:start="77:23" pos:end="77:25"><expr pos:start="77:23" pos:end="77:25"><name pos:start="77:23" pos:end="77:25">buf</name></expr></argument>, <argument pos:start="77:28" pos:end="77:30"><expr pos:start="77:28" pos:end="77:30"><name pos:start="77:28" pos:end="77:30">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="79:17" pos:end="79:22">break;</break>

            <default pos:start="81:13" pos:end="81:20">default:</default>

                <expr_stmt pos:start="83:17" pos:end="83:24"><expr pos:start="83:17" pos:end="83:23"><call pos:start="83:17" pos:end="83:23"><name pos:start="83:17" pos:end="83:21">abort</name><argument_list pos:start="83:22" pos:end="83:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="95:9">else <block pos:start="87:16" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:32">

            <comment type="block" pos:start="89:13" pos:end="89:26">/* RAM case */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:57"><expr pos:start="91:13" pos:end="91:56"><name pos:start="91:13" pos:end="91:15">ptr</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:56"><name pos:start="91:19" pos:end="91:34">qemu_map_ram_ptr</name><argument_list pos:start="91:35" pos:end="91:56">(<argument pos:start="91:36" pos:end="91:48"><expr pos:start="91:36" pos:end="91:48"><name pos:start="91:36" pos:end="91:48"><name pos:start="91:36" pos:end="91:37">mr</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:48">ram_block</name></name></expr></argument>, <argument pos:start="91:51" pos:end="91:55"><expr pos:start="91:51" pos:end="91:55"><name pos:start="91:51" pos:end="91:55">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:32"><expr pos:start="93:13" pos:end="93:31"><call pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:18">memcpy</name><argument_list pos:start="93:19" pos:end="93:31">(<argument pos:start="93:20" pos:end="93:22"><expr pos:start="93:20" pos:end="93:22"><name pos:start="93:20" pos:end="93:22">buf</name></expr></argument>, <argument pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:27"><name pos:start="93:25" pos:end="93:27">ptr</name></expr></argument>, <argument pos:start="93:30" pos:end="93:30"><expr pos:start="93:30" pos:end="93:30"><name pos:start="93:30" pos:end="93:30">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:25">(<expr pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:24">release_lock</name></expr>)</condition> <block pos:start="99:27" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:33">

            <expr_stmt pos:start="101:13" pos:end="101:41"><expr pos:start="101:13" pos:end="101:40"><call pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:38">qemu_mutex_unlock_iothread</name><argument_list pos:start="101:39" pos:end="101:40">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:33"><expr pos:start="103:13" pos:end="103:32"><name pos:start="103:13" pos:end="103:24">release_lock</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <name pos:start="103:28" pos:end="103:32">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:17"><expr pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:11">len</name> <operator pos:start="109:13" pos:end="109:14">-=</operator> <name pos:start="109:16" pos:end="109:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:17"><expr pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:11">buf</name> <operator pos:start="111:13" pos:end="111:14">+=</operator> <name pos:start="111:16" pos:end="111:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:18"><expr pos:start="113:9" pos:end="113:17"><name pos:start="113:9" pos:end="113:12">addr</name> <operator pos:start="113:14" pos:end="113:15">+=</operator> <name pos:start="113:17" pos:end="113:17">l</name></expr>;</expr_stmt>



        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:17">(<expr pos:start="117:13" pos:end="117:16"><operator pos:start="117:13" pos:end="117:13">!</operator><name pos:start="117:14" pos:end="117:16">len</name></expr>)</condition> <block pos:start="117:19" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:18">

            <break pos:start="119:13" pos:end="119:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:16"><expr pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:9">l</name> <operator pos:start="125:11" pos:end="125:11">=</operator> <name pos:start="125:13" pos:end="125:15">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:66"><expr pos:start="127:9" pos:end="127:65"><name pos:start="127:9" pos:end="127:10">mr</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <call pos:start="127:14" pos:end="127:65"><name pos:start="127:14" pos:end="127:36">address_space_translate</name><argument_list pos:start="127:37" pos:end="127:65">(<argument pos:start="127:38" pos:end="127:39"><expr pos:start="127:38" pos:end="127:39"><name pos:start="127:38" pos:end="127:39">as</name></expr></argument>, <argument pos:start="127:42" pos:end="127:45"><expr pos:start="127:42" pos:end="127:45"><name pos:start="127:42" pos:end="127:45">addr</name></expr></argument>, <argument pos:start="127:48" pos:end="127:53"><expr pos:start="127:48" pos:end="127:53"><operator pos:start="127:48" pos:end="127:48">&amp;</operator><name pos:start="127:49" pos:end="127:53">addr1</name></expr></argument>, <argument pos:start="127:56" pos:end="127:57"><expr pos:start="127:56" pos:end="127:57"><operator pos:start="127:56" pos:end="127:56">&amp;</operator><name pos:start="127:57" pos:end="127:57">l</name></expr></argument>, <argument pos:start="127:60" pos:end="127:64"><expr pos:start="127:60" pos:end="127:64"><name pos:start="127:60" pos:end="127:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="133:5" pos:end="133:18">return <expr pos:start="133:12" pos:end="133:17"><name pos:start="133:12" pos:end="133:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
