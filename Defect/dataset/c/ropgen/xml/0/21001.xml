<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21001.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">cirrus_linear_write</name><parameter_list pos:start="1:32" pos:end="3:60">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:69"><decl pos:start="1:47" pos:end="1:69"><type pos:start="1:47" pos:end="1:69"><name pos:start="1:47" pos:end="1:64">target_phys_addr_t</name></type> <name pos:start="1:66" pos:end="1:69">addr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:40">uint64_t</name></type> <name pos:start="3:42" pos:end="3:44">val</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:59"><decl pos:start="3:47" pos:end="3:59"><type pos:start="3:47" pos:end="3:59"><name pos:start="3:47" pos:end="3:54">unsigned</name></type> <name pos:start="3:56" pos:end="3:59">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="79:1">{<block_content pos:start="7:5" pos:end="77:5">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">CirrusVGAState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:17">mode</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:32"><expr pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:8">addr</name> <operator pos:start="13:10" pos:end="13:11">&amp;=</operator> <name pos:start="13:13" pos:end="13:31"><name pos:start="13:13" pos:end="13:13">s</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:31">cirrus_addr_mask</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="77:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="19:63">(<expr pos:start="17:9" pos:end="19:62"><operator pos:start="17:9" pos:end="17:9">(</operator><operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:25"><name pos:start="17:11" pos:end="17:11">s</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:16">vga</name><operator pos:start="17:17" pos:end="17:17">.</operator><name pos:start="17:18" pos:end="17:19">sr</name><index pos:start="17:20" pos:end="17:25">[<expr pos:start="17:21" pos:end="17:24"><literal type="number" pos:start="17:21" pos:end="17:24">0x17</literal></expr>]</index></name> <operator pos:start="17:27" pos:end="17:27">&amp;</operator> <literal type="number" pos:start="17:29" pos:end="17:32">0x44</literal><operator pos:start="17:33" pos:end="17:33">)</operator> <operator pos:start="17:35" pos:end="17:36">==</operator> <literal type="number" pos:start="17:38" pos:end="17:41">0x44</literal><operator pos:start="17:42" pos:end="17:42">)</operator> <operator pos:start="17:44" pos:end="17:45">&amp;&amp;</operator>

        <operator pos:start="19:9" pos:end="19:9">(</operator><operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:14">addr</name> <operator pos:start="19:16" pos:end="19:16">&amp;</operator> <name pos:start="19:18" pos:end="19:36"><name pos:start="19:18" pos:end="19:18">s</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:36">linear_mmio_mask</name></name><operator pos:start="19:37" pos:end="19:37">)</operator> <operator pos:start="19:39" pos:end="19:40">==</operator>  <name pos:start="19:43" pos:end="19:61"><name pos:start="19:43" pos:end="19:43">s</name><operator pos:start="19:44" pos:end="19:45">-&gt;</operator><name pos:start="19:46" pos:end="19:61">linear_mmio_mask</name></name><operator pos:start="19:62" pos:end="19:62">)</operator></expr>)</condition> <block pos:start="19:65" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:51">

	<comment type="block" pos:start="21:9" pos:end="21:31">/* memory-mapped I/O */</comment>

	<expr_stmt pos:start="23:9" pos:end="23:51"><expr pos:start="23:9" pos:end="23:50"><call pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:29">cirrus_mmio_blt_write</name><argument_list pos:start="23:30" pos:end="23:50">(<argument pos:start="23:31" pos:end="23:31"><expr pos:start="23:31" pos:end="23:31"><name pos:start="23:31" pos:end="23:31">s</name></expr></argument>, <argument pos:start="23:34" pos:end="23:44"><expr pos:start="23:34" pos:end="23:44"><name pos:start="23:34" pos:end="23:37">addr</name> <operator pos:start="23:39" pos:end="23:39">&amp;</operator> <literal type="number" pos:start="23:41" pos:end="23:44">0xff</literal></expr></argument>, <argument pos:start="23:47" pos:end="23:49"><expr pos:start="23:47" pos:end="23:49"><name pos:start="23:47" pos:end="23:49">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="25:7" pos:end="37:5">else if <condition pos:start="25:15" pos:end="25:56">(<expr pos:start="25:16" pos:end="25:55"><name pos:start="25:16" pos:end="25:31"><name pos:start="25:16" pos:end="25:16">s</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:31">cirrus_srcptr</name></name> <operator pos:start="25:33" pos:end="25:34">!=</operator> <name pos:start="25:36" pos:end="25:55"><name pos:start="25:36" pos:end="25:36">s</name><operator pos:start="25:37" pos:end="25:38">-&gt;</operator><name pos:start="25:39" pos:end="25:55">cirrus_srcptr_end</name></name></expr>)</condition> <block pos:start="25:58" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:9">

	<comment type="block" pos:start="27:9" pos:end="27:20">/* bitblt */</comment>

	<expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:10">s</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:25">cirrus_srcptr</name></name><operator pos:start="29:26" pos:end="29:27">++</operator> <operator pos:start="29:29" pos:end="29:29">=</operator> <operator pos:start="29:31" pos:end="29:31">(</operator><name pos:start="29:32" pos:end="29:38">uint8_t</name><operator pos:start="29:39" pos:end="29:39">)</operator> <name pos:start="29:41" pos:end="29:43">val</name></expr>;</expr_stmt>

	<if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:53">(<expr pos:start="31:13" pos:end="31:52"><name pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:28">cirrus_srcptr</name></name> <operator pos:start="31:30" pos:end="31:31">&gt;=</operator> <name pos:start="31:33" pos:end="31:52"><name pos:start="31:33" pos:end="31:33">s</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:52">cirrus_srcptr_end</name></name></expr>)</condition> <block pos:start="31:55" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:45">

	    <expr_stmt pos:start="33:13" pos:end="33:45"><expr pos:start="33:13" pos:end="33:44"><call pos:start="33:13" pos:end="33:44"><name pos:start="33:13" pos:end="33:41">cirrus_bitblt_cputovideo_next</name><argument_list pos:start="33:42" pos:end="33:44">(<argument pos:start="33:43" pos:end="33:43"><expr pos:start="33:43" pos:end="33:43"><name pos:start="33:43" pos:end="33:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="77:5">else <block pos:start="37:12" pos:end="77:5">{<block_content pos:start="41:9" pos:end="75:9">

	<comment type="block" pos:start="39:9" pos:end="39:26">/* video memory */</comment>

	<if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:45">(<expr pos:start="41:13" pos:end="41:44"><operator pos:start="41:13" pos:end="41:13">(</operator><name pos:start="41:14" pos:end="41:28"><name pos:start="41:14" pos:end="41:14">s</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:19">vga</name><operator pos:start="41:20" pos:end="41:20">.</operator><name pos:start="41:21" pos:end="41:22">gr</name><index pos:start="41:23" pos:end="41:28">[<expr pos:start="41:24" pos:end="41:27"><literal type="number" pos:start="41:24" pos:end="41:27">0x0B</literal></expr>]</index></name> <operator pos:start="41:30" pos:end="41:30">&amp;</operator> <literal type="number" pos:start="41:32" pos:end="41:35">0x14</literal><operator pos:start="41:36" pos:end="41:36">)</operator> <operator pos:start="41:38" pos:end="41:39">==</operator> <literal type="number" pos:start="41:41" pos:end="41:44">0x14</literal></expr>)</condition> <block pos:start="41:47" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:23">

	    <expr_stmt pos:start="43:13" pos:end="43:23"><expr pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:16">addr</name> <operator pos:start="43:18" pos:end="43:20">&lt;&lt;=</operator> <literal type="number" pos:start="43:22" pos:end="43:22">4</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="45:11" pos:end="49:9">else if <condition pos:start="45:19" pos:end="45:42">(<expr pos:start="45:20" pos:end="45:41"><name pos:start="45:20" pos:end="45:34"><name pos:start="45:20" pos:end="45:20">s</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:25">vga</name><operator pos:start="45:26" pos:end="45:26">.</operator><name pos:start="45:27" pos:end="45:28">gr</name><index pos:start="45:29" pos:end="45:34">[<expr pos:start="45:30" pos:end="45:33"><literal type="number" pos:start="45:30" pos:end="45:33">0x0B</literal></expr>]</index></name> <operator pos:start="45:36" pos:end="45:36">&amp;</operator> <literal type="number" pos:start="45:38" pos:end="45:41">0x02</literal></expr>)</condition> <block pos:start="45:44" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:23">

	    <expr_stmt pos:start="47:13" pos:end="47:23"><expr pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:16">addr</name> <operator pos:start="47:18" pos:end="47:20">&lt;&lt;=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">3</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:12">addr</name> <operator pos:start="51:14" pos:end="51:15">&amp;=</operator> <name pos:start="51:17" pos:end="51:35"><name pos:start="51:17" pos:end="51:17">s</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:35">cirrus_addr_mask</name></name></expr>;</expr_stmt>



	<expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:12">mode</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:30"><name pos:start="55:16" pos:end="55:16">s</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:21">vga</name><operator pos:start="55:22" pos:end="55:22">.</operator><name pos:start="55:23" pos:end="55:24">gr</name><index pos:start="55:25" pos:end="55:30">[<expr pos:start="55:26" pos:end="55:29"><literal type="number" pos:start="55:26" pos:end="55:29">0x05</literal></expr>]</index></name> <operator pos:start="55:32" pos:end="55:32">&amp;</operator> <literal type="number" pos:start="55:34" pos:end="55:36">0x7</literal></expr>;</expr_stmt>

	<if_stmt pos:start="57:9" pos:end="75:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:67">(<expr pos:start="57:13" pos:end="57:66"><name pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:16">mode</name> <argument_list type="generic" pos:start="57:18" pos:end="57:30">&lt; <argument pos:start="57:20" pos:end="57:28"><expr pos:start="57:20" pos:end="57:28"><literal type="number" pos:start="57:20" pos:end="57:20">4</literal> <operator pos:start="57:22" pos:end="57:23">||</operator> <name pos:start="57:25" pos:end="57:28">mode</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="57:32" pos:end="57:32">5</literal> <operator pos:start="57:34" pos:end="57:35">||</operator> <operator pos:start="57:37" pos:end="57:37">(</operator><operator pos:start="57:38" pos:end="57:38">(</operator><name pos:start="57:39" pos:end="57:53"><name pos:start="57:39" pos:end="57:39">s</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:44">vga</name><operator pos:start="57:45" pos:end="57:45">.</operator><name pos:start="57:46" pos:end="57:47">gr</name><index pos:start="57:48" pos:end="57:53">[<expr pos:start="57:49" pos:end="57:52"><literal type="number" pos:start="57:49" pos:end="57:52">0x0B</literal></expr>]</index></name> <operator pos:start="57:55" pos:end="57:55">&amp;</operator> <literal type="number" pos:start="57:57" pos:end="57:59">0x4</literal><operator pos:start="57:60" pos:end="57:60">)</operator> <operator pos:start="57:62" pos:end="57:63">==</operator> <literal type="number" pos:start="57:65" pos:end="57:65">0</literal><operator pos:start="57:66" pos:end="57:66">)</operator></expr>)</condition> <block pos:start="57:69" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:59">

	    <expr_stmt pos:start="59:13" pos:end="59:54"><expr pos:start="59:13" pos:end="59:53"><operator pos:start="59:13" pos:end="59:13">*</operator><operator pos:start="59:14" pos:end="59:14">(</operator><name pos:start="59:15" pos:end="59:29"><name pos:start="59:15" pos:end="59:15">s</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:20">vga</name><operator pos:start="59:21" pos:end="59:21">.</operator><name pos:start="59:22" pos:end="59:29">vram_ptr</name></name> <operator pos:start="59:31" pos:end="59:31">+</operator> <name pos:start="59:33" pos:end="59:36">addr</name><operator pos:start="59:37" pos:end="59:37">)</operator> <operator pos:start="59:39" pos:end="59:39">=</operator> <operator pos:start="59:41" pos:end="59:41">(</operator><name pos:start="59:42" pos:end="59:48">uint8_t</name><operator pos:start="59:49" pos:end="59:49">)</operator> <name pos:start="59:51" pos:end="59:53">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:59"><expr pos:start="61:13" pos:end="61:58"><call pos:start="61:13" pos:end="61:58"><name pos:start="61:13" pos:end="61:35">memory_region_set_dirty</name><argument_list pos:start="61:36" pos:end="61:58">(<argument pos:start="61:37" pos:end="61:48"><expr pos:start="61:37" pos:end="61:48"><operator pos:start="61:37" pos:end="61:37">&amp;</operator><name pos:start="61:38" pos:end="61:48"><name pos:start="61:38" pos:end="61:38">s</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:43">vga</name><operator pos:start="61:44" pos:end="61:44">.</operator><name pos:start="61:45" pos:end="61:48">vram</name></name></expr></argument>, <argument pos:start="61:51" pos:end="61:54"><expr pos:start="61:51" pos:end="61:54"><name pos:start="61:51" pos:end="61:54">addr</name></expr></argument>, <argument pos:start="61:57" pos:end="61:57"><expr pos:start="61:57" pos:end="61:57"><literal type="number" pos:start="61:57" pos:end="61:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="63:11" pos:end="75:9">else <block pos:start="63:16" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:13">

	    <if_stmt pos:start="65:13" pos:end="73:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:49">(<expr pos:start="65:17" pos:end="65:48"><operator pos:start="65:17" pos:end="65:17">(</operator><name pos:start="65:18" pos:end="65:32"><name pos:start="65:18" pos:end="65:18">s</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:23">vga</name><operator pos:start="65:24" pos:end="65:24">.</operator><name pos:start="65:25" pos:end="65:26">gr</name><index pos:start="65:27" pos:end="65:32">[<expr pos:start="65:28" pos:end="65:31"><literal type="number" pos:start="65:28" pos:end="65:31">0x0B</literal></expr>]</index></name> <operator pos:start="65:34" pos:end="65:34">&amp;</operator> <literal type="number" pos:start="65:36" pos:end="65:39">0x14</literal><operator pos:start="65:40" pos:end="65:40">)</operator> <operator pos:start="65:42" pos:end="65:43">!=</operator> <literal type="number" pos:start="65:45" pos:end="65:48">0x14</literal></expr>)</condition> <block pos:start="65:51" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:69">

		<expr_stmt pos:start="67:17" pos:end="67:69"><expr pos:start="67:17" pos:end="67:68"><call pos:start="67:17" pos:end="67:68"><name pos:start="67:17" pos:end="67:48">cirrus_mem_writeb_mode4and5_8bpp</name><argument_list pos:start="67:49" pos:end="67:68">(<argument pos:start="67:50" pos:end="67:50"><expr pos:start="67:50" pos:end="67:50"><name pos:start="67:50" pos:end="67:50">s</name></expr></argument>, <argument pos:start="67:53" pos:end="67:56"><expr pos:start="67:53" pos:end="67:56"><name pos:start="67:53" pos:end="67:56">mode</name></expr></argument>, <argument pos:start="67:59" pos:end="67:62"><expr pos:start="67:59" pos:end="67:62"><name pos:start="67:59" pos:end="67:62">addr</name></expr></argument>, <argument pos:start="67:65" pos:end="67:67"><expr pos:start="67:65" pos:end="67:67"><name pos:start="67:65" pos:end="67:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if> <else pos:start="69:15" pos:end="73:13">else <block pos:start="69:20" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:70">

		<expr_stmt pos:start="71:17" pos:end="71:70"><expr pos:start="71:17" pos:end="71:69"><call pos:start="71:17" pos:end="71:69"><name pos:start="71:17" pos:end="71:49">cirrus_mem_writeb_mode4and5_16bpp</name><argument_list pos:start="71:50" pos:end="71:69">(<argument pos:start="71:51" pos:end="71:51"><expr pos:start="71:51" pos:end="71:51"><name pos:start="71:51" pos:end="71:51">s</name></expr></argument>, <argument pos:start="71:54" pos:end="71:57"><expr pos:start="71:54" pos:end="71:57"><name pos:start="71:54" pos:end="71:57">mode</name></expr></argument>, <argument pos:start="71:60" pos:end="71:63"><expr pos:start="71:60" pos:end="71:63"><name pos:start="71:60" pos:end="71:63">addr</name></expr></argument>, <argument pos:start="71:66" pos:end="71:68"><expr pos:start="71:66" pos:end="71:68"><name pos:start="71:66" pos:end="71:68">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></else></if_stmt>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
