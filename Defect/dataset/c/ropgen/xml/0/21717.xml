<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21717.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">msrle_decode_frame</name><parameter_list pos:start="1:30" pos:end="5:46">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:34">void</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">data</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">got_frame</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:45"><decl pos:start="5:31" pos:end="5:45"><type pos:start="5:31" pos:end="5:45"><name pos:start="5:31" pos:end="5:38">AVPacket</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:45">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="121:1">{<block_content pos:start="9:5" pos:end="119:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MsrleContext</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:19">s</name> <init pos:start="13:21" pos:end="13:38">= <expr pos:start="13:23" pos:end="13:38"><name pos:start="13:23" pos:end="13:38"><name pos:start="13:23" pos:end="13:27">avctx</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:77"><decl pos:start="15:5" pos:end="15:76"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">istride</name> <init pos:start="15:17" pos:end="15:76">= <expr pos:start="15:19" pos:end="15:76"><call pos:start="15:19" pos:end="15:72"><name pos:start="15:19" pos:end="15:25">FFALIGN</name><argument_list pos:start="15:26" pos:end="15:72">(<argument pos:start="15:27" pos:end="15:67"><expr pos:start="15:27" pos:end="15:67"><name pos:start="15:27" pos:end="15:38"><name pos:start="15:27" pos:end="15:31">avctx</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:38">width</name></name><operator pos:start="15:39" pos:end="15:39">*</operator><name pos:start="15:40" pos:end="15:67"><name pos:start="15:40" pos:end="15:44">avctx</name><operator pos:start="15:45" pos:end="15:46">-&gt;</operator><name pos:start="15:47" pos:end="15:67">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="15:70" pos:end="15:71"><expr pos:start="15:70" pos:end="15:71"><literal type="number" pos:start="15:70" pos:end="15:71">32</literal></expr></argument>)</argument_list></call> <operator pos:start="15:74" pos:end="15:74">/</operator> <literal type="number" pos:start="15:76" pos:end="15:76">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:10">buf</name></name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:16">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:11">size</name></name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:22">buf_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="29:19"><if pos:start="27:5" pos:end="29:19">if <condition pos:start="27:8" pos:end="27:53">(<expr pos:start="27:9" pos:end="27:52"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:12">ret</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:47"><name pos:start="27:16" pos:end="27:30">ff_reget_buffer</name><argument_list pos:start="27:31" pos:end="27:47">(<argument pos:start="27:32" pos:end="27:36"><expr pos:start="27:32" pos:end="27:36"><name pos:start="27:32" pos:end="27:36">avctx</name></expr></argument>, <argument pos:start="27:39" pos:end="27:46"><expr pos:start="27:39" pos:end="27:46"><name pos:start="27:39" pos:end="27:46"><name pos:start="27:39" pos:end="27:39">s</name><operator pos:start="27:40" pos:end="27:41">-&gt;</operator><name pos:start="27:42" pos:end="27:46">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="27:48" pos:end="27:48">)</operator> <operator pos:start="27:50" pos:end="27:50">&lt;</operator> <literal type="number" pos:start="27:52" pos:end="27:52">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:19"><block_content pos:start="29:9" pos:end="29:19">

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="51:5">if <condition pos:start="33:8" pos:end="33:78">(<expr pos:start="33:9" pos:end="33:77"><name pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:13">avctx</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:36">bits_per_coded_sample</name></name> <operator pos:start="33:38" pos:end="33:38">&gt;</operator> <literal type="number" pos:start="33:40" pos:end="33:40">1</literal> <operator pos:start="33:42" pos:end="33:43">&amp;&amp;</operator> <name pos:start="33:45" pos:end="33:72"><name pos:start="33:45" pos:end="33:49">avctx</name><operator pos:start="33:50" pos:end="33:51">-&gt;</operator><name pos:start="33:52" pos:end="33:72">bits_per_coded_sample</name></name> <operator pos:start="33:74" pos:end="33:75">&lt;=</operator> <literal type="number" pos:start="33:77" pos:end="33:77">8</literal></expr>)</condition> <block pos:start="33:80" pos:end="51:5">{<block_content pos:start="35:9" pos:end="49:58">

        <decl_stmt pos:start="35:9" pos:end="35:87"><decl pos:start="35:9" pos:end="35:86"><type pos:start="35:9" pos:end="35:23"><specifier pos:start="35:9" pos:end="35:13">const</specifier> <name pos:start="35:15" pos:end="35:21">uint8_t</name> <modifier pos:start="35:23" pos:end="35:23">*</modifier></type><name pos:start="35:24" pos:end="35:26">pal</name> <init pos:start="35:28" pos:end="35:86">= <expr pos:start="35:30" pos:end="35:86"><call pos:start="35:30" pos:end="35:86"><name pos:start="35:30" pos:end="35:52">av_packet_get_side_data</name><argument_list pos:start="35:53" pos:end="35:86">(<argument pos:start="35:54" pos:end="35:58"><expr pos:start="35:54" pos:end="35:58"><name pos:start="35:54" pos:end="35:58">avpkt</name></expr></argument>, <argument pos:start="35:61" pos:end="35:79"><expr pos:start="35:61" pos:end="35:79"><name pos:start="35:61" pos:end="35:79">AV_PKT_DATA_PALETTE</name></expr></argument>, <argument pos:start="35:82" pos:end="35:85"><expr pos:start="35:82" pos:end="35:85"><name pos:start="35:82" pos:end="35:85">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:16">(<expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">pal</name></expr>)</condition> <block pos:start="39:18" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:48">

            <expr_stmt pos:start="41:13" pos:end="41:46"><expr pos:start="41:13" pos:end="41:45"><name pos:start="41:13" pos:end="41:41"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:20">frame</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:41">palette_has_changed</name></name> <operator pos:start="41:43" pos:end="41:43">=</operator> <literal type="number" pos:start="41:45" pos:end="41:45">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:48"><expr pos:start="43:13" pos:end="43:47"><call pos:start="43:13" pos:end="43:47"><name pos:start="43:13" pos:end="43:18">memcpy</name><argument_list pos:start="43:19" pos:end="43:47">(<argument pos:start="43:20" pos:end="43:25"><expr pos:start="43:20" pos:end="43:25"><name pos:start="43:20" pos:end="43:25"><name pos:start="43:20" pos:end="43:20">s</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:25">pal</name></name></expr></argument>, <argument pos:start="43:28" pos:end="43:30"><expr pos:start="43:28" pos:end="43:30"><name pos:start="43:28" pos:end="43:30">pal</name></expr></argument>, <argument pos:start="43:33" pos:end="43:46"><expr pos:start="43:33" pos:end="43:46"><name pos:start="43:33" pos:end="43:46">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="47:9" pos:end="47:40">/* make the palette available */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:58"><expr pos:start="49:9" pos:end="49:57"><call pos:start="49:9" pos:end="49:57"><name pos:start="49:9" pos:end="49:14">memcpy</name><argument_list pos:start="49:15" pos:end="49:57">(<argument pos:start="49:16" pos:end="49:32"><expr pos:start="49:16" pos:end="49:32"><name pos:start="49:16" pos:end="49:32"><name pos:start="49:16" pos:end="49:16">s</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:23">frame</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:29">data</name><index pos:start="49:30" pos:end="49:32">[<expr pos:start="49:31" pos:end="49:31"><literal type="number" pos:start="49:31" pos:end="49:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:35" pos:end="49:40"><expr pos:start="49:35" pos:end="49:40"><name pos:start="49:35" pos:end="49:40"><name pos:start="49:35" pos:end="49:35">s</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:40">pal</name></name></expr></argument>, <argument pos:start="49:43" pos:end="49:56"><expr pos:start="49:43" pos:end="49:56"><name pos:start="49:43" pos:end="49:56">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:47">/* FIXME how to correctly detect RLE ??? */</comment>

    <if_stmt pos:start="57:5" pos:end="103:5"><if pos:start="57:5" pos:end="97:5">if <condition pos:start="57:8" pos:end="57:47">(<expr pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:13">avctx</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:21">height</name></name> <operator pos:start="57:23" pos:end="57:23">*</operator> <name pos:start="57:25" pos:end="57:31">istride</name> <operator pos:start="57:33" pos:end="57:34">==</operator> <name pos:start="57:36" pos:end="57:46"><name pos:start="57:36" pos:end="57:40">avpkt</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:46">size</name></name></expr>)</condition> <block pos:start="57:49" pos:end="97:5">{<block_content pos:start="59:9" pos:end="95:9"> <comment type="block" pos:start="57:51" pos:end="57:75">/* assume uncompressed */</comment>

        <decl_stmt pos:start="59:9" pos:end="59:77"><decl pos:start="59:9" pos:end="59:76"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:20">linesize</name> <init pos:start="59:22" pos:end="59:76">= <expr pos:start="59:24" pos:end="59:76"><operator pos:start="59:24" pos:end="59:24">(</operator><name pos:start="59:25" pos:end="59:36"><name pos:start="59:25" pos:end="59:29">avctx</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:36">width</name></name> <operator pos:start="59:38" pos:end="59:38">*</operator> <name pos:start="59:40" pos:end="59:67"><name pos:start="59:40" pos:end="59:44">avctx</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:67">bits_per_coded_sample</name></name> <operator pos:start="59:69" pos:end="59:69">+</operator> <literal type="number" pos:start="59:71" pos:end="59:71">7</literal><operator pos:start="59:72" pos:end="59:72">)</operator> <operator pos:start="59:74" pos:end="59:74">/</operator> <literal type="number" pos:start="59:76" pos:end="59:76">8</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:41"><decl pos:start="61:9" pos:end="61:40"><type pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:15">uint8_t</name> <modifier pos:start="61:17" pos:end="61:17">*</modifier></type><name pos:start="61:18" pos:end="61:20">ptr</name> <init pos:start="61:22" pos:end="61:40">= <expr pos:start="61:24" pos:end="61:40"><name pos:start="61:24" pos:end="61:40"><name pos:start="61:24" pos:end="61:24">s</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:31">frame</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:37">data</name><index pos:start="61:38" pos:end="61:40">[<expr pos:start="61:39" pos:end="61:39"><literal type="number" pos:start="61:39" pos:end="61:39">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="63:9" pos:end="63:63"><decl pos:start="63:9" pos:end="63:62"><type pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:15">uint8_t</name> <modifier pos:start="63:17" pos:end="63:17">*</modifier></type><name pos:start="63:18" pos:end="63:20">buf</name> <init pos:start="63:22" pos:end="63:62">= <expr pos:start="63:24" pos:end="63:62"><name pos:start="63:24" pos:end="63:34"><name pos:start="63:24" pos:end="63:28">avpkt</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:34">data</name></name> <operator pos:start="63:36" pos:end="63:36">+</operator> <operator pos:start="63:38" pos:end="63:38">(</operator><name pos:start="63:39" pos:end="63:51"><name pos:start="63:39" pos:end="63:43">avctx</name><operator pos:start="63:44" pos:end="63:45">-&gt;</operator><name pos:start="63:46" pos:end="63:51">height</name></name><operator pos:start="63:52" pos:end="63:52">-</operator><literal type="number" pos:start="63:53" pos:end="63:53">1</literal><operator pos:start="63:54" pos:end="63:54">)</operator><operator pos:start="63:55" pos:end="63:55">*</operator><name pos:start="63:56" pos:end="63:62">istride</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:17"><decl pos:start="65:9" pos:end="65:13"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:13">i</name></decl>, <decl pos:start="65:16" pos:end="65:16"><type ref="prev" pos:start="65:9" pos:end="65:11"/><name pos:start="65:16" pos:end="65:16">j</name></decl>;</decl_stmt>



        <for pos:start="69:9" pos:end="95:9">for <control pos:start="69:13" pos:end="69:43">(<init pos:start="69:14" pos:end="69:19"><expr pos:start="69:14" pos:end="69:18"><name pos:start="69:14" pos:end="69:14">i</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>;</init> <condition pos:start="69:21" pos:end="69:38"><expr pos:start="69:21" pos:end="69:37"><name pos:start="69:21" pos:end="69:21">i</name> <operator pos:start="69:23" pos:end="69:23">&lt;</operator> <name pos:start="69:25" pos:end="69:37"><name pos:start="69:25" pos:end="69:29">avctx</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:37">height</name></name></expr>;</condition> <incr pos:start="69:40" pos:end="69:42"><expr pos:start="69:40" pos:end="69:42"><name pos:start="69:40" pos:end="69:40">i</name><operator pos:start="69:41" pos:end="69:42">++</operator></expr></incr>)</control> <block pos:start="69:45" pos:end="95:9">{<block_content pos:start="71:13" pos:end="93:41">

            <if_stmt pos:start="71:13" pos:end="89:13"><if pos:start="71:13" pos:end="85:13">if <condition pos:start="71:16" pos:end="71:50">(<expr pos:start="71:17" pos:end="71:49"><name pos:start="71:17" pos:end="71:44"><name pos:start="71:17" pos:end="71:21">avctx</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:44">bits_per_coded_sample</name></name> <operator pos:start="71:46" pos:end="71:47">==</operator> <literal type="number" pos:start="71:49" pos:end="71:49">4</literal></expr>)</condition> <block pos:start="71:52" pos:end="85:13">{<block_content pos:start="73:17" pos:end="83:46">

                <for pos:start="73:17" pos:end="79:17">for <control pos:start="73:21" pos:end="73:57">(<init pos:start="73:22" pos:end="73:27"><expr pos:start="73:22" pos:end="73:26"><name pos:start="73:22" pos:end="73:22">j</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <literal type="number" pos:start="73:26" pos:end="73:26">0</literal></expr>;</init> <condition pos:start="73:29" pos:end="73:49"><expr pos:start="73:29" pos:end="73:48"><name pos:start="73:29" pos:end="73:29">j</name> <operator pos:start="73:31" pos:end="73:31">&lt;</operator> <name pos:start="73:33" pos:end="73:44"><name pos:start="73:33" pos:end="73:37">avctx</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:44">width</name></name> <operator pos:start="73:46" pos:end="73:46">-</operator> <literal type="number" pos:start="73:48" pos:end="73:48">1</literal></expr>;</condition> <incr pos:start="73:51" pos:end="73:56"><expr pos:start="73:51" pos:end="73:56"><name pos:start="73:51" pos:end="73:51">j</name> <operator pos:start="73:53" pos:end="73:54">+=</operator> <literal type="number" pos:start="73:56" pos:end="73:56">2</literal></expr></incr>)</control> <block pos:start="73:59" pos:end="79:17">{<block_content pos:start="75:21" pos:end="77:47">

                    <expr_stmt pos:start="75:21" pos:end="75:46"><expr pos:start="75:21" pos:end="75:45"><name pos:start="75:21" pos:end="75:28"><name pos:start="75:21" pos:end="75:23">ptr</name><index pos:start="75:24" pos:end="75:28">[<expr pos:start="75:25" pos:end="75:27"><name pos:start="75:25" pos:end="75:25">j</name><operator pos:start="75:26" pos:end="75:26">+</operator><literal type="number" pos:start="75:27" pos:end="75:27">0</literal></expr>]</index></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <name pos:start="75:32" pos:end="75:40"><name pos:start="75:32" pos:end="75:34">buf</name><index pos:start="75:35" pos:end="75:40">[<expr pos:start="75:36" pos:end="75:39"><name pos:start="75:36" pos:end="75:36">j</name><operator pos:start="75:37" pos:end="75:38">&gt;&gt;</operator><literal type="number" pos:start="75:39" pos:end="75:39">1</literal></expr>]</index></name> <operator pos:start="75:42" pos:end="75:43">&gt;&gt;</operator> <literal type="number" pos:start="75:45" pos:end="75:45">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="77:47"><expr pos:start="77:21" pos:end="77:46"><name pos:start="77:21" pos:end="77:28"><name pos:start="77:21" pos:end="77:23">ptr</name><index pos:start="77:24" pos:end="77:28">[<expr pos:start="77:25" pos:end="77:27"><name pos:start="77:25" pos:end="77:25">j</name><operator pos:start="77:26" pos:end="77:26">+</operator><literal type="number" pos:start="77:27" pos:end="77:27">1</literal></expr>]</index></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <name pos:start="77:32" pos:end="77:40"><name pos:start="77:32" pos:end="77:34">buf</name><index pos:start="77:35" pos:end="77:40">[<expr pos:start="77:36" pos:end="77:39"><name pos:start="77:36" pos:end="77:36">j</name><operator pos:start="77:37" pos:end="77:38">&gt;&gt;</operator><literal type="number" pos:start="77:39" pos:end="77:39">1</literal></expr>]</index></name> <operator pos:start="77:42" pos:end="77:42">&amp;</operator> <literal type="number" pos:start="77:44" pos:end="77:46">0xF</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="81:17" pos:end="83:46"><if pos:start="81:17" pos:end="83:46">if <condition pos:start="81:20" pos:end="81:37">(<expr pos:start="81:21" pos:end="81:36"><name pos:start="81:21" pos:end="81:32"><name pos:start="81:21" pos:end="81:25">avctx</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:32">width</name></name> <operator pos:start="81:34" pos:end="81:34">&amp;</operator> <literal type="number" pos:start="81:36" pos:end="81:36">1</literal></expr>)</condition><block type="pseudo" pos:start="83:21" pos:end="83:46"><block_content pos:start="83:21" pos:end="83:46">

                    <expr_stmt pos:start="83:21" pos:end="83:46"><expr pos:start="83:21" pos:end="83:45"><name pos:start="83:21" pos:end="83:28"><name pos:start="83:21" pos:end="83:23">ptr</name><index pos:start="83:24" pos:end="83:28">[<expr pos:start="83:25" pos:end="83:27"><name pos:start="83:25" pos:end="83:25">j</name><operator pos:start="83:26" pos:end="83:26">+</operator><literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>]</index></name> <operator pos:start="83:30" pos:end="83:30">=</operator> <name pos:start="83:32" pos:end="83:40"><name pos:start="83:32" pos:end="83:34">buf</name><index pos:start="83:35" pos:end="83:40">[<expr pos:start="83:36" pos:end="83:39"><name pos:start="83:36" pos:end="83:36">j</name><operator pos:start="83:37" pos:end="83:38">&gt;&gt;</operator><literal type="number" pos:start="83:39" pos:end="83:39">1</literal></expr>]</index></name> <operator pos:start="83:42" pos:end="83:43">&gt;&gt;</operator> <literal type="number" pos:start="83:45" pos:end="83:45">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="85:15" pos:end="89:13">else <block pos:start="85:20" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:43">

                <expr_stmt pos:start="87:17" pos:end="87:43"><expr pos:start="87:17" pos:end="87:42"><call pos:start="87:17" pos:end="87:42"><name pos:start="87:17" pos:end="87:22">memcpy</name><argument_list pos:start="87:23" pos:end="87:42">(<argument pos:start="87:24" pos:end="87:26"><expr pos:start="87:24" pos:end="87:26"><name pos:start="87:24" pos:end="87:26">ptr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:31"><expr pos:start="87:29" pos:end="87:31"><name pos:start="87:29" pos:end="87:31">buf</name></expr></argument>, <argument pos:start="87:34" pos:end="87:41"><expr pos:start="87:34" pos:end="87:41"><name pos:start="87:34" pos:end="87:41">linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:27"><expr pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:15">buf</name> <operator pos:start="91:17" pos:end="91:18">-=</operator> <name pos:start="91:20" pos:end="91:26">istride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:41"><expr pos:start="93:13" pos:end="93:40"><name pos:start="93:13" pos:end="93:15">ptr</name> <operator pos:start="93:17" pos:end="93:18">+=</operator> <name pos:start="93:20" pos:end="93:40"><name pos:start="93:20" pos:end="93:20">s</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:27">frame</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:37">linesize</name><index pos:start="93:38" pos:end="93:40">[<expr pos:start="93:39" pos:end="93:39"><literal type="number" pos:start="93:39" pos:end="93:39">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="103:5">else <block pos:start="97:12" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:91">

        <expr_stmt pos:start="99:9" pos:end="99:48"><expr pos:start="99:9" pos:end="99:47"><call pos:start="99:9" pos:end="99:47"><name pos:start="99:9" pos:end="99:24">bytestream2_init</name><argument_list pos:start="99:25" pos:end="99:47">(<argument pos:start="99:26" pos:end="99:31"><expr pos:start="99:26" pos:end="99:31"><operator pos:start="99:26" pos:end="99:26">&amp;</operator><name pos:start="99:27" pos:end="99:31"><name pos:start="99:27" pos:end="99:27">s</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:31">gb</name></name></expr></argument>, <argument pos:start="99:34" pos:end="99:36"><expr pos:start="99:34" pos:end="99:36"><name pos:start="99:34" pos:end="99:36">buf</name></expr></argument>, <argument pos:start="99:39" pos:end="99:46"><expr pos:start="99:39" pos:end="99:46"><name pos:start="99:39" pos:end="99:46">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:91"><expr pos:start="101:9" pos:end="101:90"><call pos:start="101:9" pos:end="101:90"><name pos:start="101:9" pos:end="101:23">ff_msrle_decode</name><argument_list pos:start="101:24" pos:end="101:90">(<argument pos:start="101:25" pos:end="101:29"><expr pos:start="101:25" pos:end="101:29"><name pos:start="101:25" pos:end="101:29">avctx</name></expr></argument>, <argument pos:start="101:32" pos:end="101:51"><expr pos:start="101:32" pos:end="101:51"><operator pos:start="101:32" pos:end="101:32">(</operator><name pos:start="101:33" pos:end="101:41">AVPicture</name><operator pos:start="101:42" pos:end="101:42">*</operator><operator pos:start="101:43" pos:end="101:43">)</operator><name pos:start="101:44" pos:end="101:51"><name pos:start="101:44" pos:end="101:44">s</name><operator pos:start="101:45" pos:end="101:46">-&gt;</operator><name pos:start="101:47" pos:end="101:51">frame</name></name></expr></argument>, <argument pos:start="101:54" pos:end="101:81"><expr pos:start="101:54" pos:end="101:81"><name pos:start="101:54" pos:end="101:81"><name pos:start="101:54" pos:end="101:58">avctx</name><operator pos:start="101:59" pos:end="101:60">-&gt;</operator><name pos:start="101:61" pos:end="101:81">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="101:84" pos:end="101:89"><expr pos:start="101:84" pos:end="101:89"><operator pos:start="101:84" pos:end="101:84">&amp;</operator><name pos:start="101:85" pos:end="101:89"><name pos:start="101:85" pos:end="101:85">s</name><operator pos:start="101:86" pos:end="101:87">-&gt;</operator><name pos:start="101:88" pos:end="101:89">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="107:5" pos:end="109:19"><if pos:start="107:5" pos:end="109:19">if <condition pos:start="107:8" pos:end="107:49">(<expr pos:start="107:9" pos:end="107:48"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:12">ret</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <call pos:start="107:16" pos:end="107:43"><name pos:start="107:16" pos:end="107:27">av_frame_ref</name><argument_list pos:start="107:28" pos:end="107:43">(<argument pos:start="107:29" pos:end="107:32"><expr pos:start="107:29" pos:end="107:32"><name pos:start="107:29" pos:end="107:32">data</name></expr></argument>, <argument pos:start="107:35" pos:end="107:42"><expr pos:start="107:35" pos:end="107:42"><name pos:start="107:35" pos:end="107:42"><name pos:start="107:35" pos:end="107:35">s</name><operator pos:start="107:36" pos:end="107:37">-&gt;</operator><name pos:start="107:38" pos:end="107:42">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="107:44" pos:end="107:44">)</operator> <operator pos:start="107:46" pos:end="107:46">&lt;</operator> <literal type="number" pos:start="107:48" pos:end="107:48">0</literal></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:19"><block_content pos:start="109:9" pos:end="109:19">

        <return pos:start="109:9" pos:end="109:19">return <expr pos:start="109:16" pos:end="109:18"><name pos:start="109:16" pos:end="109:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:24"><expr pos:start="113:5" pos:end="113:23"><operator pos:start="113:5" pos:end="113:5">*</operator><name pos:start="113:6" pos:end="113:14">got_frame</name>      <operator pos:start="113:21" pos:end="113:21">=</operator> <literal type="number" pos:start="113:23" pos:end="113:23">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:56">/* report that the buffer was completely consumed */</comment>

    <return pos:start="119:5" pos:end="119:20">return <expr pos:start="119:12" pos:end="119:19"><name pos:start="119:12" pos:end="119:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
