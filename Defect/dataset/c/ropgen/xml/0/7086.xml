<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7086.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">armv7m_nvic_init</name><parameter_list pos:start="1:28" pos:end="1:46">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:40">SysBusDevice</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:13">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">nvic_state</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:29">= <expr pos:start="5:21" pos:end="5:29"><call pos:start="5:21" pos:end="5:29"><name pos:start="5:21" pos:end="5:24">NVIC</name><argument_list pos:start="5:25" pos:end="5:29">(<argument pos:start="5:26" pos:end="5:28"><expr pos:start="5:26" pos:end="5:28"><name pos:start="5:26" pos:end="5:28">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">NVICClass</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:17">nc</name> <init pos:start="7:19" pos:end="7:37">= <expr pos:start="7:21" pos:end="7:37"><call pos:start="7:21" pos:end="7:37"><name pos:start="7:21" pos:end="7:34">NVIC_GET_CLASS</name><argument_list pos:start="7:35" pos:end="7:37">(<argument pos:start="7:36" pos:end="7:36"><expr pos:start="7:36" pos:end="7:36"><name pos:start="7:36" pos:end="7:36">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:42">/* The NVIC always has only one CPU */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:23"><expr pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:10">gic</name><operator pos:start="13:11" pos:end="13:11">.</operator><name pos:start="13:12" pos:end="13:18">num_cpu</name></name> <operator pos:start="13:20" pos:end="13:20">=</operator> <literal type="number" pos:start="13:22" pos:end="13:22">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="15:5" pos:end="15:44">/* Tell the common code we're an NVIC */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:10">gic</name><operator pos:start="17:11" pos:end="17:11">.</operator><name pos:start="17:12" pos:end="17:19">revision</name></name> <operator pos:start="17:21" pos:end="17:21">=</operator> <literal type="number" pos:start="17:23" pos:end="17:32">0xffffffff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:10">gic</name><operator pos:start="19:11" pos:end="19:11">.</operator><name pos:start="19:12" pos:end="19:18">num_irq</name></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <name pos:start="19:22" pos:end="19:31"><name pos:start="19:22" pos:end="19:22">s</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:31">num_irq</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:25"><expr pos:start="21:5" pos:end="21:24"><call pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:6">nc</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:19">parent_init</name></name><argument_list pos:start="21:20" pos:end="21:24">(<argument pos:start="21:21" pos:end="21:23"><expr pos:start="21:21" pos:end="21:23"><name pos:start="21:21" pos:end="21:23">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:55"><expr pos:start="23:5" pos:end="23:54"><call pos:start="23:5" pos:end="23:54"><name pos:start="23:5" pos:end="23:33">gic_init_irqs_and_distributor</name><argument_list pos:start="23:34" pos:end="23:54">(<argument pos:start="23:35" pos:end="23:41"><expr pos:start="23:35" pos:end="23:41"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:41"><name pos:start="23:36" pos:end="23:36">s</name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:41">gic</name></name></expr></argument>, <argument pos:start="23:44" pos:end="23:53"><expr pos:start="23:44" pos:end="23:53"><name pos:start="23:44" pos:end="23:53"><name pos:start="23:44" pos:end="23:44">s</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:53">num_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="37:7">/* The NVIC and system controller register area looks like this:

     *  0..0xff : system control registers, including systick

     *  0x100..0xcff : GIC-like registers

     *  0xd00..0xfff : system control registers

     * We use overlaying to put the GIC like registers

     * over the top of the system control register region.

     */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:54"><expr pos:start="39:5" pos:end="39:53"><call pos:start="39:5" pos:end="39:53"><name pos:start="39:5" pos:end="39:22">memory_region_init</name><argument_list pos:start="39:23" pos:end="39:53">(<argument pos:start="39:24" pos:end="39:36"><expr pos:start="39:24" pos:end="39:36"><operator pos:start="39:24" pos:end="39:24">&amp;</operator><name pos:start="39:25" pos:end="39:36"><name pos:start="39:25" pos:end="39:25">s</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:36">container</name></name></expr></argument>, <argument pos:start="39:39" pos:end="39:44"><expr pos:start="39:39" pos:end="39:44"><literal type="string" pos:start="39:39" pos:end="39:44">"nvic"</literal></expr></argument>, <argument pos:start="39:47" pos:end="39:52"><expr pos:start="39:47" pos:end="39:52"><literal type="number" pos:start="39:47" pos:end="39:52">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="41:5" pos:end="45:7">/* The system register region goes at the bottom of the priority

     * stack as it covers the whole page.

     */</comment>

    <expr_stmt pos:start="47:5" pos:end="49:50"><expr pos:start="47:5" pos:end="49:49"><call pos:start="47:5" pos:end="49:49"><name pos:start="47:5" pos:end="47:25">memory_region_init_io</name><argument_list pos:start="47:26" pos:end="49:49">(<argument pos:start="47:27" pos:end="47:39"><expr pos:start="47:27" pos:end="47:39"><operator pos:start="47:27" pos:end="47:27">&amp;</operator><name pos:start="47:28" pos:end="47:39"><name pos:start="47:28" pos:end="47:28">s</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:39">sysregmem</name></name></expr></argument>, <argument pos:start="47:42" pos:end="47:57"><expr pos:start="47:42" pos:end="47:57"><operator pos:start="47:42" pos:end="47:42">&amp;</operator><name pos:start="47:43" pos:end="47:57">nvic_sysreg_ops</name></expr></argument>, <argument pos:start="47:60" pos:end="47:60"><expr pos:start="47:60" pos:end="47:60"><name pos:start="47:60" pos:end="47:60">s</name></expr></argument>,

                          <argument pos:start="49:27" pos:end="49:40"><expr pos:start="49:27" pos:end="49:40"><literal type="string" pos:start="49:27" pos:end="49:40">"nvic_sysregs"</literal></expr></argument>, <argument pos:start="49:43" pos:end="49:48"><expr pos:start="49:43" pos:end="49:48"><literal type="number" pos:start="49:43" pos:end="49:48">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:65"><expr pos:start="51:5" pos:end="51:64"><call pos:start="51:5" pos:end="51:64"><name pos:start="51:5" pos:end="51:31">memory_region_add_subregion</name><argument_list pos:start="51:32" pos:end="51:64">(<argument pos:start="51:33" pos:end="51:45"><expr pos:start="51:33" pos:end="51:45"><operator pos:start="51:33" pos:end="51:33">&amp;</operator><name pos:start="51:34" pos:end="51:45"><name pos:start="51:34" pos:end="51:34">s</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:45">container</name></name></expr></argument>, <argument pos:start="51:48" pos:end="51:48"><expr pos:start="51:48" pos:end="51:48"><literal type="number" pos:start="51:48" pos:end="51:48">0</literal></expr></argument>, <argument pos:start="51:51" pos:end="51:63"><expr pos:start="51:51" pos:end="51:63"><operator pos:start="51:51" pos:end="51:51">&amp;</operator><name pos:start="51:52" pos:end="51:63"><name pos:start="51:52" pos:end="51:52">s</name><operator pos:start="51:53" pos:end="51:54">-&gt;</operator><name pos:start="51:55" pos:end="51:63">sysregmem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="53:5" pos:end="57:7">/* Alias the GIC region so we can get only the section of it

     * we need, and layer it on top of the system register region.

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="61:43"><expr pos:start="59:5" pos:end="61:42"><call pos:start="59:5" pos:end="61:42"><name pos:start="59:5" pos:end="59:28">memory_region_init_alias</name><argument_list pos:start="59:29" pos:end="61:42">(<argument pos:start="59:30" pos:end="59:48"><expr pos:start="59:30" pos:end="59:48"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:48"><name pos:start="59:31" pos:end="59:31">s</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:48">gic_iomem_alias</name></name></expr></argument>, <argument pos:start="59:51" pos:end="59:60"><expr pos:start="59:51" pos:end="59:60"><literal type="string" pos:start="59:51" pos:end="59:60">"nvic-gic"</literal></expr></argument>, <argument pos:start="59:63" pos:end="59:75"><expr pos:start="59:63" pos:end="59:75"><operator pos:start="59:63" pos:end="59:63">&amp;</operator><name pos:start="59:64" pos:end="59:75"><name pos:start="59:64" pos:end="59:64">s</name><operator pos:start="59:65" pos:end="59:66">-&gt;</operator><name pos:start="59:67" pos:end="59:69">gic</name><operator pos:start="59:70" pos:end="59:70">.</operator><name pos:start="59:71" pos:end="59:75">iomem</name></name></expr></argument>,

                             <argument pos:start="61:30" pos:end="61:34"><expr pos:start="61:30" pos:end="61:34"><literal type="number" pos:start="61:30" pos:end="61:34">0x100</literal></expr></argument>, <argument pos:start="61:37" pos:end="61:41"><expr pos:start="61:37" pos:end="61:41"><literal type="number" pos:start="61:37" pos:end="61:41">0xc00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:80"><expr pos:start="63:5" pos:end="63:79"><call pos:start="63:5" pos:end="63:79"><name pos:start="63:5" pos:end="63:39">memory_region_add_subregion_overlap</name><argument_list pos:start="63:40" pos:end="63:79">(<argument pos:start="63:41" pos:end="63:53"><expr pos:start="63:41" pos:end="63:53"><operator pos:start="63:41" pos:end="63:41">&amp;</operator><name pos:start="63:42" pos:end="63:53"><name pos:start="63:42" pos:end="63:42">s</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:53">container</name></name></expr></argument>, <argument pos:start="63:56" pos:end="63:60"><expr pos:start="63:56" pos:end="63:60"><literal type="number" pos:start="63:56" pos:end="63:60">0x100</literal></expr></argument>, <argument pos:start="63:63" pos:end="63:75"><expr pos:start="63:63" pos:end="63:75"><operator pos:start="63:63" pos:end="63:63">&amp;</operator><name pos:start="63:64" pos:end="63:75"><name pos:start="63:64" pos:end="63:64">s</name><operator pos:start="63:65" pos:end="63:66">-&gt;</operator><name pos:start="63:67" pos:end="63:69">gic</name><operator pos:start="63:70" pos:end="63:70">.</operator><name pos:start="63:71" pos:end="63:75">iomem</name></name></expr></argument>, <argument pos:start="63:78" pos:end="63:78"><expr pos:start="63:78" pos:end="63:78"><literal type="number" pos:start="63:78" pos:end="63:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="65:5" pos:end="69:7">/* Map the whole thing into system memory at the location required

     * by the v7M architecture.

     */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:80"><expr pos:start="71:5" pos:end="71:79"><call pos:start="71:5" pos:end="71:79"><name pos:start="71:5" pos:end="71:31">memory_region_add_subregion</name><argument_list pos:start="71:32" pos:end="71:79">(<argument pos:start="71:33" pos:end="71:51"><expr pos:start="71:33" pos:end="71:51"><call pos:start="71:33" pos:end="71:51"><name pos:start="71:33" pos:end="71:49">get_system_memory</name><argument_list pos:start="71:50" pos:end="71:51">()</argument_list></call></expr></argument>, <argument pos:start="71:54" pos:end="71:63"><expr pos:start="71:54" pos:end="71:63"><literal type="number" pos:start="71:54" pos:end="71:63">0xe000e000</literal></expr></argument>, <argument pos:start="71:66" pos:end="71:78"><expr pos:start="71:66" pos:end="71:78"><operator pos:start="71:66" pos:end="71:66">&amp;</operator><name pos:start="71:67" pos:end="71:78"><name pos:start="71:67" pos:end="71:67">s</name><operator pos:start="71:68" pos:end="71:69">-&gt;</operator><name pos:start="71:70" pos:end="71:78">container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:74"><expr pos:start="73:5" pos:end="73:73"><name pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:14">systick</name><operator pos:start="73:15" pos:end="73:15">.</operator><name pos:start="73:16" pos:end="73:20">timer</name></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <call pos:start="73:24" pos:end="73:73"><name pos:start="73:24" pos:end="73:40">qemu_new_timer_ns</name><argument_list pos:start="73:41" pos:end="73:73">(<argument pos:start="73:42" pos:end="73:49"><expr pos:start="73:42" pos:end="73:49"><name pos:start="73:42" pos:end="73:49">vm_clock</name></expr></argument>, <argument pos:start="73:52" pos:end="73:69"><expr pos:start="73:52" pos:end="73:69"><name pos:start="73:52" pos:end="73:69">systick_timer_tick</name></expr></argument>, <argument pos:start="73:72" pos:end="73:72"><expr pos:start="73:72" pos:end="73:72"><name pos:start="73:72" pos:end="73:72">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
