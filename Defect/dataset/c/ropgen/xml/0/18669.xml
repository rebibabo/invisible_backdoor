<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18669.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">raw_probe_alignment</name><parameter_list pos:start="1:32" pos:end="1:75">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:60"><decl pos:start="1:55" pos:end="1:60"><type pos:start="1:55" pos:end="1:60"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:60">fd</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:67">Error</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier><modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:5">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVRawState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:20">max_align</name> <init pos:start="9:22" pos:end="9:56">= <expr pos:start="9:24" pos:end="9:56"><call pos:start="9:24" pos:end="9:56"><name pos:start="9:24" pos:end="9:26">MAX</name><argument_list pos:start="9:27" pos:end="9:56">(<argument pos:start="9:28" pos:end="9:40"><expr pos:start="9:28" pos:end="9:40"><name pos:start="9:28" pos:end="9:40">MAX_BLOCKSIZE</name></expr></argument>, <argument pos:start="9:43" pos:end="9:55"><expr pos:start="9:43" pos:end="9:55"><call pos:start="9:43" pos:end="9:55"><name pos:start="9:43" pos:end="9:53">getpagesize</name><argument_list pos:start="9:54" pos:end="9:55">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="15:60">/* For SCSI generic devices the alignment is not really used.

       With buffered I/O, we don't have any restrictions. */</comment>

    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:46">(<expr pos:start="17:9" pos:end="17:45"><call pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:18">bdrv_is_sg</name><argument_list pos:start="17:19" pos:end="17:22">(<argument pos:start="17:20" pos:end="17:21"><expr pos:start="17:20" pos:end="17:21"><name pos:start="17:20" pos:end="17:21">bs</name></expr></argument>)</argument_list></call> <operator pos:start="17:24" pos:end="17:25">||</operator> <operator pos:start="17:27" pos:end="17:27">!</operator><name pos:start="17:28" pos:end="17:45"><name pos:start="17:28" pos:end="17:28">s</name><operator pos:start="17:29" pos:end="17:30">-&gt;</operator><name pos:start="17:31" pos:end="17:45">needs_alignment</name></name></expr>)</condition> <block pos:start="17:48" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:15">

        <expr_stmt pos:start="19:9" pos:end="19:34"><expr pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:10">bs</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:29">request_alignment</name></name> <operator pos:start="19:31" pos:end="19:31">=</operator> <literal type="number" pos:start="19:33" pos:end="19:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:25"><expr pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:20">buf_align</name></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <literal type="number" pos:start="21:24" pos:end="21:24">1</literal></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:6">bs</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:25">request_alignment</name></name> <operator pos:start="29:27" pos:end="29:27">=</operator> <literal type="number" pos:start="29:29" pos:end="29:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:16">buf_align</name></name> <operator pos:start="31:18" pos:end="31:18">=</operator> <literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="33:5" pos:end="33:67">/* Let's try to use the logical blocksize for the alignment. */</comment>

    <if_stmt pos:start="35:5" pos:end="42:0"><if pos:start="35:5" pos:end="42:0">if <condition pos:start="35:8" pos:end="35:64">(<expr pos:start="35:9" pos:end="35:63"><call pos:start="35:9" pos:end="35:59"><name pos:start="35:9" pos:end="35:31">probe_logical_blocksize</name><argument_list pos:start="35:32" pos:end="35:59">(<argument pos:start="35:33" pos:end="35:34"><expr pos:start="35:33" pos:end="35:34"><name pos:start="35:33" pos:end="35:34">fd</name></expr></argument>, <argument pos:start="35:37" pos:end="35:58"><expr pos:start="35:37" pos:end="35:58"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:58"><name pos:start="35:38" pos:end="35:39">bs</name><operator pos:start="35:40" pos:end="35:41">-&gt;</operator><name pos:start="35:42" pos:end="35:58">request_alignment</name></name></expr></argument>)</argument_list></call> <operator pos:start="35:61" pos:end="35:61">&lt;</operator> <literal type="number" pos:start="35:63" pos:end="35:63">0</literal></expr>)</condition> <block pos:start="35:66" pos:end="42:0">{<block_content pos:start="37:9" pos:end="37:34">

        <expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:10">bs</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:29">request_alignment</name></name> <operator pos:start="37:31" pos:end="37:31">=</operator> <literal type="number" pos:start="37:33" pos:end="37:33">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="41:1" pos:end="41:17">#<cpp:directive pos:start="41:2" pos:end="41:6">ifdef</cpp:directive> <name pos:start="41:8" pos:end="41:17">CONFIG_XFS</name></cpp:ifdef>

    <if_stmt pos:start="43:5" pos:end="60:0"><if pos:start="43:5" pos:end="60:0">if <condition pos:start="43:8" pos:end="43:18">(<expr pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:17">is_xfs</name></name></expr>)</condition> <block pos:start="43:20" pos:end="60:0">{<block_content pos:start="45:9" pos:end="55:9">

        <decl_stmt pos:start="45:9" pos:end="45:26"><decl pos:start="45:9" pos:end="45:25"><type pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:14">struct</name> <name pos:start="45:16" pos:end="45:22">dioattr</name></name></type> <name pos:start="45:24" pos:end="45:25">da</name></decl>;</decl_stmt>

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:56">(<expr pos:start="47:13" pos:end="47:55"><call pos:start="47:13" pos:end="47:50"><name pos:start="47:13" pos:end="47:18">xfsctl</name><argument_list pos:start="47:19" pos:end="47:50">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">NULL</name></expr></argument>, <argument pos:start="47:26" pos:end="47:27"><expr pos:start="47:26" pos:end="47:27"><name pos:start="47:26" pos:end="47:27">fd</name></expr></argument>, <argument pos:start="47:30" pos:end="47:44"><expr pos:start="47:30" pos:end="47:44"><name pos:start="47:30" pos:end="47:44">XFS_IOC_DIOINFO</name></expr></argument>, <argument pos:start="47:47" pos:end="47:49"><expr pos:start="47:47" pos:end="47:49"><operator pos:start="47:47" pos:end="47:47">&amp;</operator><name pos:start="47:48" pos:end="47:49">da</name></expr></argument>)</argument_list></call> <operator pos:start="47:52" pos:end="47:53">&gt;=</operator> <literal type="number" pos:start="47:55" pos:end="47:55">0</literal></expr>)</condition> <block pos:start="47:58" pos:end="55:9">{<block_content pos:start="49:13" pos:end="49:49">

            <expr_stmt pos:start="49:13" pos:end="49:49"><expr pos:start="49:13" pos:end="49:48"><name pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:14">bs</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:33">request_alignment</name></name> <operator pos:start="49:35" pos:end="49:35">=</operator> <name pos:start="49:37" pos:end="49:48"><name pos:start="49:37" pos:end="49:38">da</name><operator pos:start="49:39" pos:end="49:39">.</operator><name pos:start="49:40" pos:end="49:48">d_miniosz</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="51:13" pos:end="51:64">/* The kernel returns wrong information for d_mem */</comment>

            <comment type="block" pos:start="53:13" pos:end="53:42">/* s-&gt;buf_align = da.d_mem; */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="63:5" pos:end="63:70">/* If we could not get the sizes so far, we can only guess them */</comment>

    <if_stmt pos:start="65:5" pos:end="85:5"><if pos:start="65:5" pos:end="85:5">if <condition pos:start="65:8" pos:end="65:22">(<expr pos:start="65:9" pos:end="65:21"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:21"><name pos:start="65:10" pos:end="65:10">s</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:21">buf_align</name></name></expr>)</condition> <block pos:start="65:24" pos:end="85:5">{<block_content pos:start="67:9" pos:end="83:24">

        <decl_stmt pos:start="67:9" pos:end="67:21"><decl pos:start="67:9" pos:end="67:20"><type pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:14">size_t</name></type> <name pos:start="67:16" pos:end="67:20">align</name></decl>;</decl_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:54"><expr pos:start="69:9" pos:end="69:53"><name pos:start="69:9" pos:end="69:11">buf</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:53"><name pos:start="69:15" pos:end="69:27">qemu_memalign</name><argument_list pos:start="69:28" pos:end="69:53">(<argument pos:start="69:29" pos:end="69:37"><expr pos:start="69:29" pos:end="69:37"><name pos:start="69:29" pos:end="69:37">max_align</name></expr></argument>, <argument pos:start="69:40" pos:end="69:52"><expr pos:start="69:40" pos:end="69:52"><literal type="number" pos:start="69:40" pos:end="69:40">2</literal> <operator pos:start="69:42" pos:end="69:42">*</operator> <name pos:start="69:44" pos:end="69:52">max_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="71:9" pos:end="81:9">for <control pos:start="71:13" pos:end="71:58">(<init pos:start="71:14" pos:end="71:25"><expr pos:start="71:14" pos:end="71:24"><name pos:start="71:14" pos:end="71:18">align</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <literal type="number" pos:start="71:22" pos:end="71:24">512</literal></expr>;</init> <condition pos:start="71:27" pos:end="71:45"><expr pos:start="71:27" pos:end="71:44"><name pos:start="71:27" pos:end="71:31">align</name> <operator pos:start="71:33" pos:end="71:34">&lt;=</operator> <name pos:start="71:36" pos:end="71:44">max_align</name></expr>;</condition> <incr pos:start="71:47" pos:end="71:57"><expr pos:start="71:47" pos:end="71:57"><name pos:start="71:47" pos:end="71:51">align</name> <operator pos:start="71:53" pos:end="71:55">&lt;&lt;=</operator> <literal type="number" pos:start="71:57" pos:end="71:57">1</literal></expr></incr>)</control> <block pos:start="71:60" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:13">

            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:62">(<expr pos:start="73:17" pos:end="73:61"><call pos:start="73:17" pos:end="73:61"><name pos:start="73:17" pos:end="73:33">raw_is_io_aligned</name><argument_list pos:start="73:34" pos:end="73:61">(<argument pos:start="73:35" pos:end="73:36"><expr pos:start="73:35" pos:end="73:36"><name pos:start="73:35" pos:end="73:36">fd</name></expr></argument>, <argument pos:start="73:39" pos:end="73:49"><expr pos:start="73:39" pos:end="73:49"><name pos:start="73:39" pos:end="73:41">buf</name> <operator pos:start="73:43" pos:end="73:43">+</operator> <name pos:start="73:45" pos:end="73:49">align</name></expr></argument>, <argument pos:start="73:52" pos:end="73:60"><expr pos:start="73:52" pos:end="73:60"><name pos:start="73:52" pos:end="73:60">max_align</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:64" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:22">

                <expr_stmt pos:start="75:17" pos:end="75:37"><expr pos:start="75:17" pos:end="75:36"><name pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:17">s</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:28">buf_align</name></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <name pos:start="75:32" pos:end="75:36">align</name></expr>;</expr_stmt>

                <break pos:start="77:17" pos:end="77:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="83:9" pos:end="83:24"><expr pos:start="83:9" pos:end="83:23"><call pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:18">qemu_vfree</name><argument_list pos:start="83:19" pos:end="83:23">(<argument pos:start="83:20" pos:end="83:22"><expr pos:start="83:20" pos:end="83:22"><name pos:start="83:20" pos:end="83:22">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="109:5"><if pos:start="89:5" pos:end="109:5">if <condition pos:start="89:8" pos:end="89:31">(<expr pos:start="89:9" pos:end="89:30"><operator pos:start="89:9" pos:end="89:9">!</operator><name pos:start="89:10" pos:end="89:30"><name pos:start="89:10" pos:end="89:11">bs</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:30">request_alignment</name></name></expr>)</condition> <block pos:start="89:33" pos:end="109:5">{<block_content pos:start="91:9" pos:end="107:24">

        <decl_stmt pos:start="91:9" pos:end="91:21"><decl pos:start="91:9" pos:end="91:20"><type pos:start="91:9" pos:end="91:14"><name pos:start="91:9" pos:end="91:14">size_t</name></type> <name pos:start="91:16" pos:end="91:20">align</name></decl>;</decl_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:53"><expr pos:start="93:9" pos:end="93:52"><name pos:start="93:9" pos:end="93:11">buf</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:52"><name pos:start="93:15" pos:end="93:27">qemu_memalign</name><argument_list pos:start="93:28" pos:end="93:52">(<argument pos:start="93:29" pos:end="93:40"><expr pos:start="93:29" pos:end="93:40"><name pos:start="93:29" pos:end="93:40"><name pos:start="93:29" pos:end="93:29">s</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:40">buf_align</name></name></expr></argument>, <argument pos:start="93:43" pos:end="93:51"><expr pos:start="93:43" pos:end="93:51"><name pos:start="93:43" pos:end="93:51">max_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="95:9" pos:end="105:9">for <control pos:start="95:13" pos:end="95:58">(<init pos:start="95:14" pos:end="95:25"><expr pos:start="95:14" pos:end="95:24"><name pos:start="95:14" pos:end="95:18">align</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <literal type="number" pos:start="95:22" pos:end="95:24">512</literal></expr>;</init> <condition pos:start="95:27" pos:end="95:45"><expr pos:start="95:27" pos:end="95:44"><name pos:start="95:27" pos:end="95:31">align</name> <operator pos:start="95:33" pos:end="95:34">&lt;=</operator> <name pos:start="95:36" pos:end="95:44">max_align</name></expr>;</condition> <incr pos:start="95:47" pos:end="95:57"><expr pos:start="95:47" pos:end="95:57"><name pos:start="95:47" pos:end="95:51">align</name> <operator pos:start="95:53" pos:end="95:55">&lt;&lt;=</operator> <literal type="number" pos:start="95:57" pos:end="95:57">1</literal></expr></incr>)</control> <block pos:start="95:60" pos:end="105:9">{<block_content pos:start="97:13" pos:end="103:13">

            <if_stmt pos:start="97:13" pos:end="103:13"><if pos:start="97:13" pos:end="103:13">if <condition pos:start="97:16" pos:end="97:50">(<expr pos:start="97:17" pos:end="97:49"><call pos:start="97:17" pos:end="97:49"><name pos:start="97:17" pos:end="97:33">raw_is_io_aligned</name><argument_list pos:start="97:34" pos:end="97:49">(<argument pos:start="97:35" pos:end="97:36"><expr pos:start="97:35" pos:end="97:36"><name pos:start="97:35" pos:end="97:36">fd</name></expr></argument>, <argument pos:start="97:39" pos:end="97:41"><expr pos:start="97:39" pos:end="97:41"><name pos:start="97:39" pos:end="97:41">buf</name></expr></argument>, <argument pos:start="97:44" pos:end="97:48"><expr pos:start="97:44" pos:end="97:48"><name pos:start="97:44" pos:end="97:48">align</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:52" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:22">

                <expr_stmt pos:start="99:17" pos:end="99:46"><expr pos:start="99:17" pos:end="99:45"><name pos:start="99:17" pos:end="99:37"><name pos:start="99:17" pos:end="99:18">bs</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:37">request_alignment</name></name> <operator pos:start="99:39" pos:end="99:39">=</operator> <name pos:start="99:41" pos:end="99:45">align</name></expr>;</expr_stmt>

                <break pos:start="101:17" pos:end="101:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="107:9" pos:end="107:24"><expr pos:start="107:9" pos:end="107:23"><call pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:18">qemu_vfree</name><argument_list pos:start="107:19" pos:end="107:23">(<argument pos:start="107:20" pos:end="107:22"><expr pos:start="107:20" pos:end="107:22"><name pos:start="107:20" pos:end="107:22">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:48">(<expr pos:start="113:9" pos:end="113:47"><operator pos:start="113:9" pos:end="113:9">!</operator><name pos:start="113:10" pos:end="113:21"><name pos:start="113:10" pos:end="113:10">s</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:21">buf_align</name></name> <operator pos:start="113:23" pos:end="113:24">||</operator> <operator pos:start="113:26" pos:end="113:26">!</operator><name pos:start="113:27" pos:end="113:47"><name pos:start="113:27" pos:end="113:28">bs</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:47">request_alignment</name></name></expr>)</condition> <block pos:start="113:50" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:50">

        <expr_stmt pos:start="115:9" pos:end="117:50"><expr pos:start="115:9" pos:end="117:49"><call pos:start="115:9" pos:end="117:49"><name pos:start="115:9" pos:end="115:18">error_setg</name><argument_list pos:start="115:19" pos:end="117:49">(<argument pos:start="115:20" pos:end="115:23"><expr pos:start="115:20" pos:end="115:23"><name pos:start="115:20" pos:end="115:23">errp</name></expr></argument>, <argument pos:start="115:26" pos:end="117:48"><expr pos:start="115:26" pos:end="117:48"><literal type="string" pos:start="115:26" pos:end="115:70">"Could not find working O_DIRECT alignment. "</literal>

                         <literal type="string" pos:start="117:26" pos:end="117:48">"Try cache.direct=off."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
