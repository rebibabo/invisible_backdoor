<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13955.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">dma_buf_rw</name><parameter_list pos:start="1:22" pos:end="1:51">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:32">BMDMAState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">bm</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:50">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IDEState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:37">= <expr pos:start="5:19" pos:end="5:37"><call pos:start="5:19" pos:end="5:37"><name pos:start="5:19" pos:end="5:33">bmdma_active_if</name><argument_list pos:start="5:34" pos:end="5:37">(<argument pos:start="5:35" pos:end="5:36"><expr pos:start="5:35" pos:end="5:36"><name pos:start="5:35" pos:end="5:36">bm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <struct pos:start="7:5" pos:end="13:10">struct <block pos:start="7:12" pos:end="13:5">{

        <decl_stmt pos:start="9:9" pos:end="9:22"><decl pos:start="9:9" pos:end="9:21"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">uint32_t</name></type> <name pos:start="9:18" pos:end="9:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:22"><decl pos:start="11:9" pos:end="11:21"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">uint32_t</name></type> <name pos:start="11:18" pos:end="11:21">size</name></decl>;</decl_stmt>

    }</block> <decl pos:start="13:7" pos:end="13:9"><name pos:start="13:7" pos:end="13:9">prd</name></decl>;</struct>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">l</name></decl>, <decl pos:start="15:12" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:14">len</name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="87:5">for<control pos:start="19:8" pos:end="19:11">(<init pos:start="19:9" pos:end="19:9">;</init><condition pos:start="19:10" pos:end="19:10">;</condition><incr/>)</control> <block pos:start="19:13" pos:end="87:5">{<block_content pos:start="21:9" pos:end="85:9">

        <expr_stmt pos:start="21:9" pos:end="21:51"><expr pos:start="21:9" pos:end="21:50"><name pos:start="21:9" pos:end="21:9">l</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <name pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:29">io_buffer_size</name></name> <operator pos:start="21:31" pos:end="21:31">-</operator> <name pos:start="21:33" pos:end="21:50"><name pos:start="21:33" pos:end="21:33">s</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:50">io_buffer_index</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="25:18"><if pos:start="23:9" pos:end="25:18">if <condition pos:start="23:12" pos:end="23:19">(<expr pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:13">l</name> <operator pos:start="23:15" pos:end="23:16">&lt;=</operator> <literal type="number" pos:start="23:18" pos:end="23:18">0</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:18"><block_content pos:start="25:13" pos:end="25:18">

            <break pos:start="25:13" pos:end="25:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="27:9" pos:end="57:9"><if pos:start="27:9" pos:end="57:9">if <condition pos:start="27:12" pos:end="27:33">(<expr pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:14">bm</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:27">cur_prd_len</name></name> <operator pos:start="27:29" pos:end="27:30">==</operator> <literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr>)</condition> <block pos:start="27:35" pos:end="57:9">{<block_content pos:start="31:13" pos:end="55:55">

            <comment type="block" pos:start="29:13" pos:end="29:61">/* end of table (with a fail safe of one page) */</comment>

            <if_stmt pos:start="31:13" pos:end="35:25"><if pos:start="31:13" pos:end="35:25">if <condition pos:start="31:16" pos:end="33:50">(<expr pos:start="31:17" pos:end="33:49"><name pos:start="31:17" pos:end="31:32"><name pos:start="31:17" pos:end="31:18">bm</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:32">cur_prd_last</name></name> <operator pos:start="31:34" pos:end="31:35">||</operator>

                <operator pos:start="33:17" pos:end="33:17">(</operator><name pos:start="33:18" pos:end="33:29"><name pos:start="33:18" pos:end="33:19">bm</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:29">cur_addr</name></name> <operator pos:start="33:31" pos:end="33:31">-</operator> <name pos:start="33:33" pos:end="33:40"><name pos:start="33:33" pos:end="33:34">bm</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:40">addr</name></name><operator pos:start="33:41" pos:end="33:41">)</operator> <operator pos:start="33:43" pos:end="33:44">&gt;=</operator> <literal type="number" pos:start="33:46" pos:end="33:49">4096</literal></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:25"><block_content pos:start="35:17" pos:end="35:25">

                <return pos:start="35:17" pos:end="35:25">return <expr pos:start="35:24" pos:end="35:24"><literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:71"><expr pos:start="37:13" pos:end="37:70"><call pos:start="37:13" pos:end="37:70"><name pos:start="37:13" pos:end="37:36">cpu_physical_memory_read</name><argument_list pos:start="37:37" pos:end="37:70">(<argument pos:start="37:38" pos:end="37:49"><expr pos:start="37:38" pos:end="37:49"><name pos:start="37:38" pos:end="37:49"><name pos:start="37:38" pos:end="37:39">bm</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:49">cur_addr</name></name></expr></argument>, <argument pos:start="37:52" pos:end="37:66"><expr pos:start="37:52" pos:end="37:66"><operator pos:start="37:52" pos:end="37:52">(</operator><name pos:start="37:53" pos:end="37:59">uint8_t</name> <operator pos:start="37:61" pos:end="37:61">*</operator><operator pos:start="37:62" pos:end="37:62">)</operator><operator pos:start="37:63" pos:end="37:63">&amp;</operator><name pos:start="37:64" pos:end="37:66">prd</name></expr></argument>, <argument pos:start="37:69" pos:end="37:69"><expr pos:start="37:69" pos:end="37:69"><literal type="number" pos:start="37:69" pos:end="37:69">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:30"><expr pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:14">bm</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:24">cur_addr</name></name> <operator pos:start="39:26" pos:end="39:27">+=</operator> <literal type="number" pos:start="39:29" pos:end="39:29">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:45"><expr pos:start="41:13" pos:end="41:44"><name pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:15">prd</name><operator pos:start="41:16" pos:end="41:16">.</operator><name pos:start="41:17" pos:end="41:20">addr</name></name> <operator pos:start="41:22" pos:end="41:22">=</operator> <call pos:start="41:24" pos:end="41:44"><name pos:start="41:24" pos:end="41:34">le32_to_cpu</name><argument_list pos:start="41:35" pos:end="41:44">(<argument pos:start="41:36" pos:end="41:43"><expr pos:start="41:36" pos:end="41:43"><name pos:start="41:36" pos:end="41:43"><name pos:start="41:36" pos:end="41:38">prd</name><operator pos:start="41:39" pos:end="41:39">.</operator><name pos:start="41:40" pos:end="41:43">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:45"><expr pos:start="43:13" pos:end="43:44"><name pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:15">prd</name><operator pos:start="43:16" pos:end="43:16">.</operator><name pos:start="43:17" pos:end="43:20">size</name></name> <operator pos:start="43:22" pos:end="43:22">=</operator> <call pos:start="43:24" pos:end="43:44"><name pos:start="43:24" pos:end="43:34">le32_to_cpu</name><argument_list pos:start="43:35" pos:end="43:44">(<argument pos:start="43:36" pos:end="43:43"><expr pos:start="43:36" pos:end="43:43"><name pos:start="43:36" pos:end="43:43"><name pos:start="43:36" pos:end="43:38">prd</name><operator pos:start="43:39" pos:end="43:39">.</operator><name pos:start="43:40" pos:end="43:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:36"><expr pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:15">len</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:26"><name pos:start="45:19" pos:end="45:21">prd</name><operator pos:start="45:22" pos:end="45:22">.</operator><name pos:start="45:23" pos:end="45:26">size</name></name> <operator pos:start="45:28" pos:end="45:28">&amp;</operator> <literal type="number" pos:start="45:30" pos:end="45:35">0xfffe</literal></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="49:30"><if pos:start="47:13" pos:end="49:30">if <condition pos:start="47:16" pos:end="47:25">(<expr pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:19">len</name> <operator pos:start="47:21" pos:end="47:22">==</operator> <literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:30"><block_content pos:start="49:17" pos:end="49:30">

                <expr_stmt pos:start="49:17" pos:end="49:30"><expr pos:start="49:17" pos:end="49:29"><name pos:start="49:17" pos:end="49:19">len</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <literal type="number" pos:start="49:23" pos:end="49:29">0x10000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:34"><expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:14">bm</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:27">cur_prd_len</name></name> <operator pos:start="51:29" pos:end="51:29">=</operator> <name pos:start="51:31" pos:end="51:33">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:40"><expr pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:28"><name pos:start="53:13" pos:end="53:14">bm</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:28">cur_prd_addr</name></name> <operator pos:start="53:30" pos:end="53:30">=</operator> <name pos:start="53:32" pos:end="53:39"><name pos:start="53:32" pos:end="53:34">prd</name><operator pos:start="53:35" pos:end="53:35">.</operator><name pos:start="53:36" pos:end="53:39">addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:55"><expr pos:start="55:13" pos:end="55:54"><name pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:14">bm</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:28">cur_prd_last</name></name> <operator pos:start="55:30" pos:end="55:30">=</operator> <operator pos:start="55:32" pos:end="55:32">(</operator><name pos:start="55:33" pos:end="55:40"><name pos:start="55:33" pos:end="55:35">prd</name><operator pos:start="55:36" pos:end="55:36">.</operator><name pos:start="55:37" pos:end="55:40">size</name></name> <operator pos:start="55:42" pos:end="55:42">&amp;</operator> <literal type="number" pos:start="55:44" pos:end="55:53">0x80000000</literal><operator pos:start="55:54" pos:end="55:54">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="61:32"><if pos:start="59:9" pos:end="61:32">if <condition pos:start="59:12" pos:end="59:32">(<expr pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:13">l</name> <operator pos:start="59:15" pos:end="59:15">&gt;</operator> <name pos:start="59:17" pos:end="59:31"><name pos:start="59:17" pos:end="59:18">bm</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:31">cur_prd_len</name></name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:32"><block_content pos:start="61:13" pos:end="61:32">

            <expr_stmt pos:start="61:13" pos:end="61:32"><expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:13">l</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:31"><name pos:start="61:17" pos:end="61:18">bm</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:31">cur_prd_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="85:9"><if pos:start="63:9" pos:end="85:9">if <condition pos:start="63:12" pos:end="63:18">(<expr pos:start="63:13" pos:end="63:17"><name pos:start="63:13" pos:end="63:13">l</name> <operator pos:start="63:15" pos:end="63:15">&gt;</operator> <literal type="number" pos:start="63:17" pos:end="63:17">0</literal></expr>)</condition> <block pos:start="63:20" pos:end="85:9">{<block_content pos:start="65:13" pos:end="83:36">

            <if_stmt pos:start="65:13" pos:end="77:13"><if pos:start="65:13" pos:end="71:13">if <condition pos:start="65:16" pos:end="65:25">(<expr pos:start="65:17" pos:end="65:24"><name pos:start="65:17" pos:end="65:24">is_write</name></expr>)</condition> <block pos:start="65:27" pos:end="71:13">{<block_content pos:start="67:17" pos:end="69:80">

                <expr_stmt pos:start="67:17" pos:end="69:80"><expr pos:start="67:17" pos:end="69:79"><call pos:start="67:17" pos:end="69:79"><name pos:start="67:17" pos:end="67:41">cpu_physical_memory_write</name><argument_list pos:start="67:42" pos:end="69:79">(<argument pos:start="67:43" pos:end="67:58"><expr pos:start="67:43" pos:end="67:58"><name pos:start="67:43" pos:end="67:58"><name pos:start="67:43" pos:end="67:44">bm</name><operator pos:start="67:45" pos:end="67:46">-&gt;</operator><name pos:start="67:47" pos:end="67:58">cur_prd_addr</name></name></expr></argument>,

                                          <argument pos:start="69:43" pos:end="69:75"><expr pos:start="69:43" pos:end="69:75"><name pos:start="69:43" pos:end="69:54"><name pos:start="69:43" pos:end="69:43">s</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:54">io_buffer</name></name> <operator pos:start="69:56" pos:end="69:56">+</operator> <name pos:start="69:58" pos:end="69:75"><name pos:start="69:58" pos:end="69:58">s</name><operator pos:start="69:59" pos:end="69:60">-&gt;</operator><name pos:start="69:61" pos:end="69:75">io_buffer_index</name></name></expr></argument>, <argument pos:start="69:78" pos:end="69:78"><expr pos:start="69:78" pos:end="69:78"><name pos:start="69:78" pos:end="69:78">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="77:13">else <block pos:start="71:20" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:80">

                <expr_stmt pos:start="73:17" pos:end="75:80"><expr pos:start="73:17" pos:end="75:79"><call pos:start="73:17" pos:end="75:79"><name pos:start="73:17" pos:end="73:40">cpu_physical_memory_read</name><argument_list pos:start="73:41" pos:end="75:79">(<argument pos:start="73:42" pos:end="73:57"><expr pos:start="73:42" pos:end="73:57"><name pos:start="73:42" pos:end="73:57"><name pos:start="73:42" pos:end="73:43">bm</name><operator pos:start="73:44" pos:end="73:45">-&gt;</operator><name pos:start="73:46" pos:end="73:57">cur_prd_addr</name></name></expr></argument>,

                                          <argument pos:start="75:43" pos:end="75:75"><expr pos:start="75:43" pos:end="75:75"><name pos:start="75:43" pos:end="75:54"><name pos:start="75:43" pos:end="75:43">s</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:54">io_buffer</name></name> <operator pos:start="75:56" pos:end="75:56">+</operator> <name pos:start="75:58" pos:end="75:75"><name pos:start="75:58" pos:end="75:58">s</name><operator pos:start="75:59" pos:end="75:60">-&gt;</operator><name pos:start="75:61" pos:end="75:75">io_buffer_index</name></name></expr></argument>, <argument pos:start="75:78" pos:end="75:78"><expr pos:start="75:78" pos:end="75:78"><name pos:start="75:78" pos:end="75:78">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:34"><expr pos:start="79:13" pos:end="79:33"><name pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:14">bm</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:28">cur_prd_addr</name></name> <operator pos:start="79:30" pos:end="79:31">+=</operator> <name pos:start="79:33" pos:end="79:33">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:33"><expr pos:start="81:13" pos:end="81:32"><name pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:14">bm</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:27">cur_prd_len</name></name> <operator pos:start="81:29" pos:end="81:30">-=</operator> <name pos:start="81:32" pos:end="81:32">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:36"><expr pos:start="83:13" pos:end="83:35"><name pos:start="83:13" pos:end="83:30"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:30">io_buffer_index</name></name> <operator pos:start="83:32" pos:end="83:33">+=</operator> <name pos:start="83:35" pos:end="83:35">l</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
