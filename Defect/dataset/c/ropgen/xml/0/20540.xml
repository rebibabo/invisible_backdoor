<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20540.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">output_packet</name><parameter_list pos:start="1:26" pos:end="1:75">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:36">OutputFile</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">of</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:50">AVPacket</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">pkt</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:74"><decl pos:start="1:58" pos:end="1:74"><type pos:start="1:58" pos:end="1:74"><name pos:start="1:58" pos:end="1:69">OutputStream</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">ost</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:5">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:52">/* apply the output bitstream filters, if any */</comment>

    <if_stmt pos:start="11:5" pos:end="103:35"><if pos:start="11:5" pos:end="101:5">if <condition pos:start="11:8" pos:end="11:34">(<expr pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:11">ost</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:33">nb_bitstream_filters</name></name></expr>)</condition> <block pos:start="11:36" pos:end="101:5">{<block_content pos:start="13:9" pos:end="99:9">

        <decl_stmt pos:start="13:9" pos:end="13:16"><decl pos:start="13:9" pos:end="13:15"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:15">idx</name></decl>;</decl_stmt>



        <expr_stmt pos:start="17:9" pos:end="17:55"><expr pos:start="17:9" pos:end="17:54"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:54"><name pos:start="17:15" pos:end="17:32">av_bsf_send_packet</name><argument_list pos:start="17:33" pos:end="17:54">(<argument pos:start="17:34" pos:end="17:48"><expr pos:start="17:34" pos:end="17:48"><name pos:start="17:34" pos:end="17:48"><name pos:start="17:34" pos:end="17:36">ost</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:45">bsf_ctx</name><index pos:start="17:46" pos:end="17:48">[<expr pos:start="17:47" pos:end="17:47"><literal type="number" pos:start="17:47" pos:end="17:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="17:51" pos:end="17:53"><expr pos:start="17:51" pos:end="17:53"><name pos:start="17:51" pos:end="17:53">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="21:24"><if pos:start="19:9" pos:end="21:24">if <condition pos:start="19:12" pos:end="19:20">(<expr pos:start="19:13" pos:end="19:19"><name pos:start="19:13" pos:end="19:15">ret</name> <operator pos:start="19:17" pos:end="19:17">&lt;</operator> <literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:24"><block_content pos:start="21:13" pos:end="21:24">

            <goto pos:start="21:13" pos:end="21:24">goto <name pos:start="21:18" pos:end="21:23">finish</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:16"><expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">idx</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <literal type="number" pos:start="25:15" pos:end="25:15">1</literal></expr>;</expr_stmt>

        <while pos:start="27:9" pos:end="99:9">while <condition pos:start="27:15" pos:end="27:19">(<expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">idx</name></expr>)</condition> <block pos:start="27:21" pos:end="99:9">{<block_content pos:start="31:13" pos:end="97:43">

            <comment type="block" pos:start="29:13" pos:end="29:68">/* get a packet from the previous filter up the chain */</comment>

            <expr_stmt pos:start="31:13" pos:end="31:68"><expr pos:start="31:13" pos:end="31:67"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:67"><name pos:start="31:19" pos:end="31:39">av_bsf_receive_packet</name><argument_list pos:start="31:40" pos:end="31:67">(<argument pos:start="31:41" pos:end="31:61"><expr pos:start="31:41" pos:end="31:61"><name pos:start="31:41" pos:end="31:61"><name pos:start="31:41" pos:end="31:43">ost</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:52">bsf_ctx</name><index pos:start="31:53" pos:end="31:61">[<expr pos:start="31:54" pos:end="31:60"><name pos:start="31:54" pos:end="31:56">idx</name> <operator pos:start="31:58" pos:end="31:58">-</operator> <literal type="number" pos:start="31:60" pos:end="31:60">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="31:64" pos:end="31:66"><expr pos:start="31:64" pos:end="31:66"><name pos:start="31:64" pos:end="31:66">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="43:28"><if pos:start="33:13" pos:end="41:13">if <condition pos:start="33:16" pos:end="33:39">(<expr pos:start="33:17" pos:end="33:38"><name pos:start="33:17" pos:end="33:19">ret</name> <operator pos:start="33:21" pos:end="33:22">==</operator> <call pos:start="33:24" pos:end="33:38"><name pos:start="33:24" pos:end="33:30">AVERROR</name><argument_list pos:start="33:31" pos:end="33:38">(<argument pos:start="33:32" pos:end="33:37"><expr pos:start="33:32" pos:end="33:37"><name pos:start="33:32" pos:end="33:37">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:41" pos:end="41:13">{<block_content pos:start="35:17" pos:end="39:25">

                <expr_stmt pos:start="35:17" pos:end="35:24"><expr pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:19">ret</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:21"><name pos:start="37:17" pos:end="37:19">idx</name><operator pos:start="37:20" pos:end="37:21">--</operator></expr>;</expr_stmt>

                <continue pos:start="39:17" pos:end="39:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="41:15" pos:end="43:28">else if <condition pos:start="41:23" pos:end="41:31">(<expr pos:start="41:24" pos:end="41:30"><name pos:start="41:24" pos:end="41:26">ret</name> <operator pos:start="41:28" pos:end="41:28">&lt;</operator> <literal type="number" pos:start="41:30" pos:end="41:30">0</literal></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:28"><block_content pos:start="43:17" pos:end="43:28">

                <goto pos:start="43:17" pos:end="43:28">goto <name pos:start="43:22" pos:end="43:27">finish</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block" pos:start="45:13" pos:end="53:85">/* HACK! - aac_adtstoasc updates extradata after filtering the first frame when

             * the api states this shouldn't happen after init(). Propagate it here to the

             * muxer and to the next filters in the chain to workaround this.

             * TODO/FIXME - Make aac_adtstoasc use new packet side data instead of changing

             * par_out-&gt;extradata and adapt muxers accordingly to get rid of this. */</comment>

            <if_stmt pos:start="55:13" pos:end="65:13"><if pos:start="55:13" pos:end="65:13">if <condition pos:start="55:16" pos:end="55:59">(<expr pos:start="55:17" pos:end="55:58"><operator pos:start="55:17" pos:end="55:17">!</operator><operator pos:start="55:18" pos:end="55:18">(</operator><name pos:start="55:19" pos:end="55:53"><name pos:start="55:19" pos:end="55:21">ost</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:44">bsf_extradata_updated</name><index pos:start="55:45" pos:end="55:53">[<expr pos:start="55:46" pos:end="55:52"><name pos:start="55:46" pos:end="55:48">idx</name> <operator pos:start="55:50" pos:end="55:50">-</operator> <literal type="number" pos:start="55:52" pos:end="55:52">1</literal></expr>]</index></name> <operator pos:start="55:55" pos:end="55:55">&amp;</operator> <literal type="number" pos:start="55:57" pos:end="55:57">1</literal><operator pos:start="55:58" pos:end="55:58">)</operator></expr>)</condition> <block pos:start="55:61" pos:end="65:13">{<block_content pos:start="57:17" pos:end="63:57">

                <expr_stmt pos:start="57:17" pos:end="57:97"><expr pos:start="57:17" pos:end="57:96"><name pos:start="57:17" pos:end="57:19">ret</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:96"><name pos:start="57:23" pos:end="57:45">avcodec_parameters_copy</name><argument_list pos:start="57:46" pos:end="57:96">(<argument pos:start="57:47" pos:end="57:63"><expr pos:start="57:47" pos:end="57:63"><name pos:start="57:47" pos:end="57:63"><name pos:start="57:47" pos:end="57:49">ost</name><operator pos:start="57:50" pos:end="57:51">-&gt;</operator><name pos:start="57:52" pos:end="57:53">st</name><operator pos:start="57:54" pos:end="57:55">-&gt;</operator><name pos:start="57:56" pos:end="57:63">codecpar</name></name></expr></argument>, <argument pos:start="57:66" pos:end="57:95"><expr pos:start="57:66" pos:end="57:95"><name pos:start="57:66" pos:end="57:86"><name pos:start="57:66" pos:end="57:68">ost</name><operator pos:start="57:69" pos:end="57:70">-&gt;</operator><name pos:start="57:71" pos:end="57:77">bsf_ctx</name><index pos:start="57:78" pos:end="57:86">[<expr pos:start="57:79" pos:end="57:85"><name pos:start="57:79" pos:end="57:81">idx</name> <operator pos:start="57:83" pos:end="57:83">-</operator> <literal type="number" pos:start="57:85" pos:end="57:85">1</literal></expr>]</index></name><operator pos:start="57:87" pos:end="57:88">-&gt;</operator><name pos:start="57:89" pos:end="57:95">par_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="59:17" pos:end="61:32"><if pos:start="59:17" pos:end="61:32">if <condition pos:start="59:20" pos:end="59:28">(<expr pos:start="59:21" pos:end="59:27"><name pos:start="59:21" pos:end="59:23">ret</name> <operator pos:start="59:25" pos:end="59:25">&lt;</operator> <literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr>)</condition><block type="pseudo" pos:start="61:21" pos:end="61:32"><block_content pos:start="61:21" pos:end="61:32">

                    <goto pos:start="61:21" pos:end="61:32">goto <name pos:start="61:26" pos:end="61:31">finish</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:57"><expr pos:start="63:17" pos:end="63:56"><name pos:start="63:17" pos:end="63:51"><name pos:start="63:17" pos:end="63:19">ost</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:42">bsf_extradata_updated</name><index pos:start="63:43" pos:end="63:51">[<expr pos:start="63:44" pos:end="63:50"><name pos:start="63:44" pos:end="63:46">idx</name> <operator pos:start="63:48" pos:end="63:48">-</operator> <literal type="number" pos:start="63:50" pos:end="63:50">1</literal></expr>]</index></name> <operator pos:start="63:53" pos:end="63:54">|=</operator> <literal type="number" pos:start="63:56" pos:end="63:56">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="69:13" pos:end="69:75">/* send it to the next filter down the chain or to the muxer */</comment>

            <if_stmt pos:start="71:13" pos:end="97:43"><if pos:start="71:13" pos:end="95:13">if <condition pos:start="71:16" pos:end="71:48">(<expr pos:start="71:17" pos:end="71:47"><name pos:start="71:17" pos:end="71:19">idx</name> <operator pos:start="71:21" pos:end="71:21">&lt;</operator> <name pos:start="71:23" pos:end="71:47"><name pos:start="71:23" pos:end="71:25">ost</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:47">nb_bitstream_filters</name></name></expr>)</condition> <block pos:start="71:50" pos:end="95:13">{<block_content pos:start="75:17" pos:end="93:22">

                <comment type="block" pos:start="73:17" pos:end="73:45">/* HACK/FIXME! - See above */</comment>

                <if_stmt pos:start="75:17" pos:end="85:17"><if pos:start="75:17" pos:end="85:17">if <condition pos:start="75:20" pos:end="75:59">(<expr pos:start="75:21" pos:end="75:58"><operator pos:start="75:21" pos:end="75:21">!</operator><operator pos:start="75:22" pos:end="75:22">(</operator><name pos:start="75:23" pos:end="75:53"><name pos:start="75:23" pos:end="75:25">ost</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:48">bsf_extradata_updated</name><index pos:start="75:49" pos:end="75:53">[<expr pos:start="75:50" pos:end="75:52"><name pos:start="75:50" pos:end="75:52">idx</name></expr>]</index></name> <operator pos:start="75:55" pos:end="75:55">&amp;</operator> <literal type="number" pos:start="75:57" pos:end="75:57">2</literal><operator pos:start="75:58" pos:end="75:58">)</operator></expr>)</condition> <block pos:start="75:61" pos:end="85:17">{<block_content pos:start="77:21" pos:end="83:57">

                    <expr_stmt pos:start="77:21" pos:end="77:110"><expr pos:start="77:21" pos:end="77:109"><name pos:start="77:21" pos:end="77:23">ret</name> <operator pos:start="77:25" pos:end="77:25">=</operator> <call pos:start="77:27" pos:end="77:109"><name pos:start="77:27" pos:end="77:49">avcodec_parameters_copy</name><argument_list pos:start="77:50" pos:end="77:109">(<argument pos:start="77:51" pos:end="77:76"><expr pos:start="77:51" pos:end="77:76"><name pos:start="77:51" pos:end="77:67"><name pos:start="77:51" pos:end="77:53">ost</name><operator pos:start="77:54" pos:end="77:55">-&gt;</operator><name pos:start="77:56" pos:end="77:62">bsf_ctx</name><index pos:start="77:63" pos:end="77:67">[<expr pos:start="77:64" pos:end="77:66"><name pos:start="77:64" pos:end="77:66">idx</name></expr>]</index></name><operator pos:start="77:68" pos:end="77:69">-&gt;</operator><name pos:start="77:70" pos:end="77:76">par_out</name></expr></argument>, <argument pos:start="77:79" pos:end="77:108"><expr pos:start="77:79" pos:end="77:108"><name pos:start="77:79" pos:end="77:99"><name pos:start="77:79" pos:end="77:81">ost</name><operator pos:start="77:82" pos:end="77:83">-&gt;</operator><name pos:start="77:84" pos:end="77:90">bsf_ctx</name><index pos:start="77:91" pos:end="77:99">[<expr pos:start="77:92" pos:end="77:98"><name pos:start="77:92" pos:end="77:94">idx</name> <operator pos:start="77:96" pos:end="77:96">-</operator> <literal type="number" pos:start="77:98" pos:end="77:98">1</literal></expr>]</index></name><operator pos:start="77:100" pos:end="77:101">-&gt;</operator><name pos:start="77:102" pos:end="77:108">par_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="79:21" pos:end="81:36"><if pos:start="79:21" pos:end="81:36">if <condition pos:start="79:24" pos:end="79:32">(<expr pos:start="79:25" pos:end="79:31"><name pos:start="79:25" pos:end="79:27">ret</name> <operator pos:start="79:29" pos:end="79:29">&lt;</operator> <literal type="number" pos:start="79:31" pos:end="79:31">0</literal></expr>)</condition><block type="pseudo" pos:start="81:25" pos:end="81:36"><block_content pos:start="81:25" pos:end="81:36">

                        <goto pos:start="81:25" pos:end="81:36">goto <name pos:start="81:30" pos:end="81:35">finish</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="83:21" pos:end="83:57"><expr pos:start="83:21" pos:end="83:56"><name pos:start="83:21" pos:end="83:51"><name pos:start="83:21" pos:end="83:23">ost</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:46">bsf_extradata_updated</name><index pos:start="83:47" pos:end="83:51">[<expr pos:start="83:48" pos:end="83:50"><name pos:start="83:48" pos:end="83:50">idx</name></expr>]</index></name> <operator pos:start="83:53" pos:end="83:54">|=</operator> <literal type="number" pos:start="83:56" pos:end="83:56">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:65"><expr pos:start="87:17" pos:end="87:64"><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="87:64"><name pos:start="87:23" pos:end="87:40">av_bsf_send_packet</name><argument_list pos:start="87:41" pos:end="87:64">(<argument pos:start="87:42" pos:end="87:58"><expr pos:start="87:42" pos:end="87:58"><name pos:start="87:42" pos:end="87:58"><name pos:start="87:42" pos:end="87:44">ost</name><operator pos:start="87:45" pos:end="87:46">-&gt;</operator><name pos:start="87:47" pos:end="87:53">bsf_ctx</name><index pos:start="87:54" pos:end="87:58">[<expr pos:start="87:55" pos:end="87:57"><name pos:start="87:55" pos:end="87:57">idx</name></expr>]</index></name></expr></argument>, <argument pos:start="87:61" pos:end="87:63"><expr pos:start="87:61" pos:end="87:63"><name pos:start="87:61" pos:end="87:63">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="89:17" pos:end="91:32"><if pos:start="89:17" pos:end="91:32">if <condition pos:start="89:20" pos:end="89:28">(<expr pos:start="89:21" pos:end="89:27"><name pos:start="89:21" pos:end="89:23">ret</name> <operator pos:start="89:25" pos:end="89:25">&lt;</operator> <literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>)</condition><block type="pseudo" pos:start="91:21" pos:end="91:32"><block_content pos:start="91:21" pos:end="91:32">

                    <goto pos:start="91:21" pos:end="91:32">goto <name pos:start="91:26" pos:end="91:31">finish</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:22"><expr pos:start="93:17" pos:end="93:21"><name pos:start="93:17" pos:end="93:19">idx</name><operator pos:start="93:20" pos:end="93:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="95:15" pos:end="97:43">else<block type="pseudo" pos:start="97:17" pos:end="97:43"><block_content pos:start="97:17" pos:end="97:43">

                <expr_stmt pos:start="97:17" pos:end="97:43"><expr pos:start="97:17" pos:end="97:42"><call pos:start="97:17" pos:end="97:42"><name pos:start="97:17" pos:end="97:28">write_packet</name><argument_list pos:start="97:29" pos:end="97:42">(<argument pos:start="97:30" pos:end="97:31"><expr pos:start="97:30" pos:end="97:31"><name pos:start="97:30" pos:end="97:31">of</name></expr></argument>, <argument pos:start="97:34" pos:end="97:36"><expr pos:start="97:34" pos:end="97:36"><name pos:start="97:34" pos:end="97:36">pkt</name></expr></argument>, <argument pos:start="97:39" pos:end="97:41"><expr pos:start="97:39" pos:end="97:41"><name pos:start="97:39" pos:end="97:41">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="103:35">else<block type="pseudo" pos:start="103:9" pos:end="103:35"><block_content pos:start="103:9" pos:end="103:35">

        <expr_stmt pos:start="103:9" pos:end="103:35"><expr pos:start="103:9" pos:end="103:34"><call pos:start="103:9" pos:end="103:34"><name pos:start="103:9" pos:end="103:20">write_packet</name><argument_list pos:start="103:21" pos:end="103:34">(<argument pos:start="103:22" pos:end="103:23"><expr pos:start="103:22" pos:end="103:23"><name pos:start="103:22" pos:end="103:23">of</name></expr></argument>, <argument pos:start="103:26" pos:end="103:28"><expr pos:start="103:26" pos:end="103:28"><name pos:start="103:26" pos:end="103:28">pkt</name></expr></argument>, <argument pos:start="103:31" pos:end="103:33"><expr pos:start="103:31" pos:end="103:33"><name pos:start="103:31" pos:end="103:33">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



<label pos:start="107:1" pos:end="107:7"><name pos:start="107:1" pos:end="107:6">finish</name>:</label>

    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:38">(<expr pos:start="109:9" pos:end="109:37"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">&lt;</operator> <literal type="number" pos:start="109:15" pos:end="109:15">0</literal> <operator pos:start="109:17" pos:end="109:18">&amp;&amp;</operator> <name pos:start="109:20" pos:end="109:22">ret</name> <operator pos:start="109:24" pos:end="109:25">!=</operator> <name pos:start="109:27" pos:end="109:37">AVERROR_EOF</name></expr>)</condition> <block pos:start="109:40" pos:end="119:5">{<block_content pos:start="111:9" pos:end="117:28">

        <expr_stmt pos:start="111:9" pos:end="113:75"><expr pos:start="111:9" pos:end="113:74"><call pos:start="111:9" pos:end="113:74"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="113:74">(<argument pos:start="111:16" pos:end="111:19"><expr pos:start="111:16" pos:end="111:19"><name pos:start="111:16" pos:end="111:19">NULL</name></expr></argument>, <argument pos:start="111:22" pos:end="111:33"><expr pos:start="111:22" pos:end="111:33"><name pos:start="111:22" pos:end="111:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:36" pos:end="113:44"><expr pos:start="111:36" pos:end="113:44"><literal type="string" pos:start="111:36" pos:end="111:83">"Error applying bitstream filters to an output "</literal>

               <literal type="string" pos:start="113:16" pos:end="113:44">"packet for stream #%d:%d.\n"</literal></expr></argument>, <argument pos:start="113:47" pos:end="113:61"><expr pos:start="113:47" pos:end="113:61"><name pos:start="113:47" pos:end="113:61"><name pos:start="113:47" pos:end="113:49">ost</name><operator pos:start="113:50" pos:end="113:51">-&gt;</operator><name pos:start="113:52" pos:end="113:61">file_index</name></name></expr></argument>, <argument pos:start="113:64" pos:end="113:73"><expr pos:start="113:64" pos:end="113:73"><name pos:start="113:64" pos:end="113:73"><name pos:start="113:64" pos:end="113:66">ost</name><operator pos:start="113:67" pos:end="113:68">-&gt;</operator><name pos:start="113:69" pos:end="113:73">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="117:28"><if pos:start="115:9" pos:end="117:28">if<condition pos:start="115:11" pos:end="115:25">(<expr pos:start="115:12" pos:end="115:24"><name pos:start="115:12" pos:end="115:24">exit_on_error</name></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:28"><block_content pos:start="117:13" pos:end="117:28">

            <expr_stmt pos:start="117:13" pos:end="117:28"><expr pos:start="117:13" pos:end="117:27"><call pos:start="117:13" pos:end="117:27"><name pos:start="117:13" pos:end="117:24">exit_program</name><argument_list pos:start="117:25" pos:end="117:27">(<argument pos:start="117:26" pos:end="117:26"><expr pos:start="117:26" pos:end="117:26"><literal type="number" pos:start="117:26" pos:end="117:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
