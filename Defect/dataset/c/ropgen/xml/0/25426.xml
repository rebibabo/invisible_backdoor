<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25426.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">show_formats</name><parameter_list pos:start="1:17" pos:end="1:64">(<parameter pos:start="1:18" pos:end="1:29"><decl pos:start="1:18" pos:end="1:29"><type pos:start="1:18" pos:end="1:29"><name pos:start="1:18" pos:end="1:21">void</name> <modifier pos:start="1:23" pos:end="1:23">*</modifier></type><name pos:start="1:24" pos:end="1:29">optctx</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">opt</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">AVInputFormat</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">ifmt</name>  <init pos:start="5:26" pos:end="5:31">= <expr pos:start="5:28" pos:end="5:31"><name pos:start="5:28" pos:end="5:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVOutputFormat</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">ofmt</name> <init pos:start="7:26" pos:end="7:31">= <expr pos:start="7:28" pos:end="7:31"><name pos:start="7:28" pos:end="7:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:25">last_name</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="19:20"><expr pos:start="13:5" pos:end="19:19"><call pos:start="13:5" pos:end="19:19"><name pos:start="13:5" pos:end="13:10">printf</name><argument_list pos:start="13:11" pos:end="19:19">(<argument pos:start="13:12" pos:end="19:18"><expr pos:start="13:12" pos:end="19:18"><literal type="string" pos:start="13:12" pos:end="13:28">"File formats:\n"</literal>

           <literal type="string" pos:start="15:12" pos:end="15:39">" D. = Demuxing supported\n"</literal>

           <literal type="string" pos:start="17:12" pos:end="17:37">" .E = Muxing supported\n"</literal>

           <literal type="string" pos:start="19:12" pos:end="19:18">" --\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:13">last_name</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <literal type="string" pos:start="21:17" pos:end="21:21">"000"</literal></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="89:5">for <control pos:start="23:9" pos:end="23:12">(<init pos:start="23:10" pos:end="23:10">;</init><condition pos:start="23:11" pos:end="23:11">;</condition><incr/>)</control> <block pos:start="23:14" pos:end="89:5">{<block_content pos:start="25:9" pos:end="87:39">

        <decl_stmt pos:start="25:9" pos:end="25:23"><decl pos:start="25:9" pos:end="25:22"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:18">decode</name> <init pos:start="25:20" pos:end="25:22">= <expr pos:start="25:22" pos:end="25:22"><literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:23"><decl pos:start="27:9" pos:end="27:22"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:18">encode</name> <init pos:start="27:20" pos:end="27:22">= <expr pos:start="27:22" pos:end="27:22"><literal type="number" pos:start="27:22" pos:end="27:22">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:37"><decl pos:start="29:9" pos:end="29:36"><type pos:start="29:9" pos:end="29:20"><specifier pos:start="29:9" pos:end="29:13">const</specifier> <name pos:start="29:15" pos:end="29:18">char</name> <modifier pos:start="29:20" pos:end="29:20">*</modifier></type><name pos:start="29:21" pos:end="29:24">name</name>      <init pos:start="29:31" pos:end="29:36">= <expr pos:start="29:33" pos:end="29:36"><name pos:start="29:33" pos:end="29:36">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:37"><decl pos:start="31:9" pos:end="31:36"><type pos:start="31:9" pos:end="31:20"><specifier pos:start="31:9" pos:end="31:13">const</specifier> <name pos:start="31:15" pos:end="31:18">char</name> <modifier pos:start="31:20" pos:end="31:20">*</modifier></type><name pos:start="31:21" pos:end="31:29">long_name</name> <init pos:start="31:31" pos:end="31:36">= <expr pos:start="31:33" pos:end="31:36"><name pos:start="31:33" pos:end="31:36">NULL</name></expr></init></decl>;</decl_stmt>



        <while pos:start="35:9" pos:end="49:9">while <condition pos:start="35:15" pos:end="35:46">(<expr pos:start="35:16" pos:end="35:45"><operator pos:start="35:16" pos:end="35:16">(</operator><name pos:start="35:17" pos:end="35:20">ofmt</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <call pos:start="35:24" pos:end="35:44"><name pos:start="35:24" pos:end="35:38">av_oformat_next</name><argument_list pos:start="35:39" pos:end="35:44">(<argument pos:start="35:40" pos:end="35:43"><expr pos:start="35:40" pos:end="35:43"><name pos:start="35:40" pos:end="35:43">ofmt</name></expr></argument>)</argument_list></call><operator pos:start="35:45" pos:end="35:45">)</operator></expr>)</condition> <block pos:start="35:48" pos:end="49:9">{<block_content pos:start="37:13" pos:end="47:13">

            <if_stmt pos:start="37:13" pos:end="47:13"><if pos:start="37:13" pos:end="47:13">if <condition pos:start="37:16" pos:end="39:50">(<expr pos:start="37:17" pos:end="39:49"><operator pos:start="37:17" pos:end="37:17">(</operator><name pos:start="37:18" pos:end="37:21">name</name> <operator pos:start="37:23" pos:end="37:24">==</operator> <name pos:start="37:26" pos:end="37:29">NULL</name> <operator pos:start="37:31" pos:end="37:32">||</operator> <call pos:start="37:34" pos:end="37:57"><name pos:start="37:34" pos:end="37:39">strcmp</name><argument_list pos:start="37:40" pos:end="37:57">(<argument pos:start="37:41" pos:end="37:50"><expr pos:start="37:41" pos:end="37:50"><name pos:start="37:41" pos:end="37:50"><name pos:start="37:41" pos:end="37:44">ofmt</name><operator pos:start="37:45" pos:end="37:46">-&gt;</operator><name pos:start="37:47" pos:end="37:50">name</name></name></expr></argument>, <argument pos:start="37:53" pos:end="37:56"><expr pos:start="37:53" pos:end="37:56"><name pos:start="37:53" pos:end="37:56">name</name></expr></argument>)</argument_list></call> <operator pos:start="37:59" pos:end="37:59">&lt;</operator> <literal type="number" pos:start="37:61" pos:end="37:61">0</literal><operator pos:start="37:62" pos:end="37:62">)</operator> <operator pos:start="37:64" pos:end="37:65">&amp;&amp;</operator>

                <call pos:start="39:17" pos:end="39:45"><name pos:start="39:17" pos:end="39:22">strcmp</name><argument_list pos:start="39:23" pos:end="39:45">(<argument pos:start="39:24" pos:end="39:33"><expr pos:start="39:24" pos:end="39:33"><name pos:start="39:24" pos:end="39:33"><name pos:start="39:24" pos:end="39:27">ofmt</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:33">name</name></name></expr></argument>, <argument pos:start="39:36" pos:end="39:44"><expr pos:start="39:36" pos:end="39:44"><name pos:start="39:36" pos:end="39:44">last_name</name></expr></argument>)</argument_list></call> <operator pos:start="39:47" pos:end="39:47">&gt;</operator> <literal type="number" pos:start="39:49" pos:end="39:49">0</literal></expr>)</condition> <block pos:start="39:52" pos:end="47:13">{<block_content pos:start="41:17" pos:end="45:30">

                <expr_stmt pos:start="41:17" pos:end="41:39"><expr pos:start="41:17" pos:end="41:38"><name pos:start="41:17" pos:end="41:20">name</name>      <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:38"><name pos:start="41:29" pos:end="41:32">ofmt</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:38">name</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:44"><expr pos:start="43:17" pos:end="43:43"><name pos:start="43:17" pos:end="43:25">long_name</name> <operator pos:start="43:27" pos:end="43:27">=</operator> <name pos:start="43:29" pos:end="43:43"><name pos:start="43:29" pos:end="43:32">ofmt</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:43">long_name</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:30"><expr pos:start="45:17" pos:end="45:29"><name pos:start="45:17" pos:end="45:22">encode</name>    <operator pos:start="45:27" pos:end="45:27">=</operator> <literal type="number" pos:start="45:29" pos:end="45:29">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

        <while pos:start="51:9" pos:end="69:9">while <condition pos:start="51:15" pos:end="51:46">(<expr pos:start="51:16" pos:end="51:45"><operator pos:start="51:16" pos:end="51:16">(</operator><name pos:start="51:17" pos:end="51:20">ifmt</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <call pos:start="51:24" pos:end="51:44"><name pos:start="51:24" pos:end="51:38">av_iformat_next</name><argument_list pos:start="51:39" pos:end="51:44">(<argument pos:start="51:40" pos:end="51:43"><expr pos:start="51:40" pos:end="51:43"><name pos:start="51:40" pos:end="51:43">ifmt</name></expr></argument>)</argument_list></call><operator pos:start="51:45" pos:end="51:45">)</operator></expr>)</condition> <block pos:start="51:48" pos:end="69:9">{<block_content pos:start="53:13" pos:end="67:27">

            <if_stmt pos:start="53:13" pos:end="63:13"><if pos:start="53:13" pos:end="63:13">if <condition pos:start="53:16" pos:end="55:50">(<expr pos:start="53:17" pos:end="55:49"><operator pos:start="53:17" pos:end="53:17">(</operator><name pos:start="53:18" pos:end="53:21">name</name> <operator pos:start="53:23" pos:end="53:24">==</operator> <name pos:start="53:26" pos:end="53:29">NULL</name> <operator pos:start="53:31" pos:end="53:32">||</operator> <call pos:start="53:34" pos:end="53:57"><name pos:start="53:34" pos:end="53:39">strcmp</name><argument_list pos:start="53:40" pos:end="53:57">(<argument pos:start="53:41" pos:end="53:50"><expr pos:start="53:41" pos:end="53:50"><name pos:start="53:41" pos:end="53:50"><name pos:start="53:41" pos:end="53:44">ifmt</name><operator pos:start="53:45" pos:end="53:46">-&gt;</operator><name pos:start="53:47" pos:end="53:50">name</name></name></expr></argument>, <argument pos:start="53:53" pos:end="53:56"><expr pos:start="53:53" pos:end="53:56"><name pos:start="53:53" pos:end="53:56">name</name></expr></argument>)</argument_list></call> <operator pos:start="53:59" pos:end="53:59">&lt;</operator> <literal type="number" pos:start="53:61" pos:end="53:61">0</literal><operator pos:start="53:62" pos:end="53:62">)</operator> <operator pos:start="53:64" pos:end="53:65">&amp;&amp;</operator>

                <call pos:start="55:17" pos:end="55:45"><name pos:start="55:17" pos:end="55:22">strcmp</name><argument_list pos:start="55:23" pos:end="55:45">(<argument pos:start="55:24" pos:end="55:33"><expr pos:start="55:24" pos:end="55:33"><name pos:start="55:24" pos:end="55:33"><name pos:start="55:24" pos:end="55:27">ifmt</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:33">name</name></name></expr></argument>, <argument pos:start="55:36" pos:end="55:44"><expr pos:start="55:36" pos:end="55:44"><name pos:start="55:36" pos:end="55:44">last_name</name></expr></argument>)</argument_list></call> <operator pos:start="55:47" pos:end="55:47">&gt;</operator> <literal type="number" pos:start="55:49" pos:end="55:49">0</literal></expr>)</condition> <block pos:start="55:52" pos:end="63:13">{<block_content pos:start="57:17" pos:end="61:30">

                <expr_stmt pos:start="57:17" pos:end="57:39"><expr pos:start="57:17" pos:end="57:38"><name pos:start="57:17" pos:end="57:20">name</name>      <operator pos:start="57:27" pos:end="57:27">=</operator> <name pos:start="57:29" pos:end="57:38"><name pos:start="57:29" pos:end="57:32">ifmt</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:38">name</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:44"><expr pos:start="59:17" pos:end="59:43"><name pos:start="59:17" pos:end="59:25">long_name</name> <operator pos:start="59:27" pos:end="59:27">=</operator> <name pos:start="59:29" pos:end="59:43"><name pos:start="59:29" pos:end="59:32">ifmt</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:43">long_name</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:30"><expr pos:start="61:17" pos:end="61:29"><name pos:start="61:17" pos:end="61:22">encode</name>    <operator pos:start="61:27" pos:end="61:27">=</operator> <literal type="number" pos:start="61:29" pos:end="61:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="65:13" pos:end="67:27"><if pos:start="65:13" pos:end="67:27">if <condition pos:start="65:16" pos:end="65:54">(<expr pos:start="65:17" pos:end="65:53"><name pos:start="65:17" pos:end="65:20">name</name> <operator pos:start="65:22" pos:end="65:23">&amp;&amp;</operator> <call pos:start="65:25" pos:end="65:48"><name pos:start="65:25" pos:end="65:30">strcmp</name><argument_list pos:start="65:31" pos:end="65:48">(<argument pos:start="65:32" pos:end="65:41"><expr pos:start="65:32" pos:end="65:41"><name pos:start="65:32" pos:end="65:41"><name pos:start="65:32" pos:end="65:35">ifmt</name><operator pos:start="65:36" pos:end="65:37">-&gt;</operator><name pos:start="65:38" pos:end="65:41">name</name></name></expr></argument>, <argument pos:start="65:44" pos:end="65:47"><expr pos:start="65:44" pos:end="65:47"><name pos:start="65:44" pos:end="65:47">name</name></expr></argument>)</argument_list></call> <operator pos:start="65:50" pos:end="65:51">==</operator> <literal type="number" pos:start="65:53" pos:end="65:53">0</literal></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="67:27"><block_content pos:start="67:17" pos:end="67:27">

                <expr_stmt pos:start="67:17" pos:end="67:27"><expr pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:22">decode</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <literal type="number" pos:start="67:26" pos:end="67:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="71:9" pos:end="73:18"><if pos:start="71:9" pos:end="73:18">if <condition pos:start="71:12" pos:end="71:25">(<expr pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:16">name</name> <operator pos:start="71:18" pos:end="71:19">==</operator> <name pos:start="71:21" pos:end="71:24">NULL</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:18"><block_content pos:start="73:13" pos:end="73:18">

            <break pos:start="73:13" pos:end="73:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:25"><expr pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:17">last_name</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:24">name</name></expr>;</expr_stmt>



        <expr_stmt pos:start="79:9" pos:end="87:39"><expr pos:start="79:9" pos:end="87:38"><call pos:start="79:9" pos:end="87:38"><name pos:start="79:9" pos:end="79:14">printf</name><argument_list pos:start="79:15" pos:end="87:38">(<argument pos:start="79:16" pos:end="79:33"><expr pos:start="79:16" pos:end="79:33"><literal type="string" pos:start="79:16" pos:end="79:33">" %s%s %-15s %s\n"</literal></expr></argument>,

               <argument pos:start="81:16" pos:end="81:33"><expr pos:start="81:16" pos:end="81:33"><ternary pos:start="81:16" pos:end="81:33"><condition pos:start="81:16" pos:end="81:23"><expr pos:start="81:16" pos:end="81:21"><name pos:start="81:16" pos:end="81:21">decode</name></expr> ?</condition><then pos:start="81:25" pos:end="81:27"> <expr pos:start="81:25" pos:end="81:27"><literal type="string" pos:start="81:25" pos:end="81:27">"D"</literal></expr> </then><else pos:start="81:29" pos:end="81:33">: <expr pos:start="81:31" pos:end="81:33"><literal type="string" pos:start="81:31" pos:end="81:33">" "</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="83:16" pos:end="83:33"><expr pos:start="83:16" pos:end="83:33"><ternary pos:start="83:16" pos:end="83:33"><condition pos:start="83:16" pos:end="83:23"><expr pos:start="83:16" pos:end="83:21"><name pos:start="83:16" pos:end="83:21">encode</name></expr> ?</condition><then pos:start="83:25" pos:end="83:27"> <expr pos:start="83:25" pos:end="83:27"><literal type="string" pos:start="83:25" pos:end="83:27">"E"</literal></expr> </then><else pos:start="83:29" pos:end="83:33">: <expr pos:start="83:31" pos:end="83:33"><literal type="string" pos:start="83:31" pos:end="83:33">" "</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="85:16" pos:end="85:19"><expr pos:start="85:16" pos:end="85:19"><name pos:start="85:16" pos:end="85:19">name</name></expr></argument>,

            <argument pos:start="87:13" pos:end="87:37"><expr pos:start="87:13" pos:end="87:37"><ternary pos:start="87:13" pos:end="87:37"><condition pos:start="87:13" pos:end="87:23"><expr pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:21">long_name</name></expr> ?</condition><then pos:start="87:25" pos:end="87:33"> <expr pos:start="87:25" pos:end="87:33"><name pos:start="87:25" pos:end="87:33">long_name</name></expr></then><else pos:start="87:34" pos:end="87:37">:<expr pos:start="87:35" pos:end="87:37"><literal type="string" pos:start="87:35" pos:end="87:37">" "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
