<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19287.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name> <name pos:start="1:16" pos:end="1:27">coroutine_fn</name></type> <name pos:start="1:29" pos:end="1:51">vpc_co_get_block_status</name><parameter_list pos:start="1:52" pos:end="3:54">(<parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:68">BlockDriverState</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:72">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:26"><decl pos:start="3:9" pos:end="3:26"><type pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:15">int64_t</name></type> <name pos:start="3:17" pos:end="3:26">sector_num</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:42">nb_sectors</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:53"><decl pos:start="3:45" pos:end="3:53"><type pos:start="3:45" pos:end="3:53"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">pnum</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="7:5" pos:end="81:13">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVVPCState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:50"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">VHDFooter</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:21">footer</name> <init pos:start="9:23" pos:end="9:50">= <expr pos:start="9:25" pos:end="9:50"><operator pos:start="9:25" pos:end="9:25">(</operator><name pos:start="9:26" pos:end="9:34">VHDFooter</name><operator pos:start="9:35" pos:end="9:35">*</operator><operator pos:start="9:36" pos:end="9:36">)</operator> <name pos:start="9:38" pos:end="9:50"><name pos:start="9:38" pos:end="9:38">s</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:50">footer_buf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:17">start</name></decl>, <decl pos:start="11:20" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:20" pos:end="11:25">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:18">allocated</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:47">(<expr pos:start="19:9" pos:end="19:46"><call pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:19">be32_to_cpu</name><argument_list pos:start="19:20" pos:end="19:33">(<argument pos:start="19:21" pos:end="19:32"><expr pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:26">footer</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:32">type</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:35" pos:end="19:36">==</operator> <name pos:start="19:38" pos:end="19:46">VHD_FIXED</name></expr>)</condition> <block pos:start="19:49" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:48">

        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:13">pnum</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <name pos:start="21:17" pos:end="21:26">nb_sectors</name></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="25:48">return <expr pos:start="23:16" pos:end="25:47"><name pos:start="23:16" pos:end="23:29">BDRV_BLOCK_RAW</name> <operator pos:start="23:31" pos:end="23:31">|</operator> <name pos:start="23:33" pos:end="23:55">BDRV_BLOCK_OFFSET_VALID</name> <operator pos:start="23:57" pos:end="23:57">|</operator> <name pos:start="23:59" pos:end="23:73">BDRV_BLOCK_DATA</name> <operator pos:start="23:75" pos:end="23:75">|</operator>

               <operator pos:start="25:16" pos:end="25:16">(</operator><name pos:start="25:17" pos:end="25:26">sector_num</name> <operator pos:start="25:28" pos:end="25:29">&lt;&lt;</operator> <name pos:start="25:31" pos:end="25:46">BDRV_SECTOR_BITS</name><operator pos:start="25:47" pos:end="25:47">)</operator></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:50"><expr pos:start="31:5" pos:end="31:49"><name pos:start="31:5" pos:end="31:10">offset</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:49"><name pos:start="31:14" pos:end="31:30">get_sector_offset</name><argument_list pos:start="31:31" pos:end="31:49">(<argument pos:start="31:32" pos:end="31:33"><expr pos:start="31:32" pos:end="31:33"><name pos:start="31:32" pos:end="31:33">bs</name></expr></argument>, <argument pos:start="31:36" pos:end="31:45"><expr pos:start="31:36" pos:end="31:45"><name pos:start="31:36" pos:end="31:45">sector_num</name></expr></argument>, <argument pos:start="31:48" pos:end="31:48"><expr pos:start="31:48" pos:end="31:48"><literal type="number" pos:start="31:48" pos:end="31:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:9">start</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:18">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:13">allocated</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <operator pos:start="35:17" pos:end="35:17">(</operator><name pos:start="35:18" pos:end="35:23">offset</name> <operator pos:start="35:25" pos:end="35:26">!=</operator> <operator pos:start="35:28" pos:end="35:28">-</operator><literal type="number" pos:start="35:29" pos:end="35:29">1</literal><operator pos:start="35:30" pos:end="35:30">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:14"><expr pos:start="37:5" pos:end="37:13"><operator pos:start="37:5" pos:end="37:5">*</operator><name pos:start="37:6" pos:end="37:9">pnum</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <literal type="number" pos:start="37:13" pos:end="37:13">0</literal></expr>;</expr_stmt>



    <do pos:start="41:5" pos:end="77:27">do <block pos:start="41:8" pos:end="77:5">{<block_content pos:start="45:9" pos:end="75:54">

        <comment type="block" pos:start="43:9" pos:end="43:78">/* All sectors in a block are contiguous (without using the bitmap) */</comment>

        <expr_stmt pos:start="45:9" pos:end="47:23"><expr pos:start="45:9" pos:end="47:22"><name pos:start="45:9" pos:end="45:9">n</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:70"><name pos:start="45:13" pos:end="45:20">ROUND_UP</name><argument_list pos:start="45:21" pos:end="45:70">(<argument pos:start="45:22" pos:end="45:35"><expr pos:start="45:22" pos:end="45:35"><name pos:start="45:22" pos:end="45:31">sector_num</name> <operator pos:start="45:33" pos:end="45:33">+</operator> <literal type="number" pos:start="45:35" pos:end="45:35">1</literal></expr></argument>, <argument pos:start="45:38" pos:end="45:69"><expr pos:start="45:38" pos:end="45:69"><name pos:start="45:38" pos:end="45:50"><name pos:start="45:38" pos:end="45:38">s</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:50">block_size</name></name> <operator pos:start="45:52" pos:end="45:52">/</operator> <name pos:start="45:54" pos:end="45:69">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call>

          <operator pos:start="47:11" pos:end="47:11">-</operator> <name pos:start="47:13" pos:end="47:22">sector_num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:9">n</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:15">MIN</name><argument_list pos:start="49:16" pos:end="49:30">(<argument pos:start="49:17" pos:end="49:17"><expr pos:start="49:17" pos:end="49:17"><name pos:start="49:17" pos:end="49:17">n</name></expr></argument>, <argument pos:start="49:20" pos:end="49:29"><expr pos:start="49:20" pos:end="49:29"><name pos:start="49:20" pos:end="49:29">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:19"><expr pos:start="53:9" pos:end="53:18"><operator pos:start="53:9" pos:end="53:9">*</operator><name pos:start="53:10" pos:end="53:13">pnum</name> <operator pos:start="53:15" pos:end="53:16">+=</operator> <name pos:start="53:18" pos:end="53:18">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:24"><expr pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:18">sector_num</name> <operator pos:start="55:20" pos:end="55:21">+=</operator> <name pos:start="55:23" pos:end="55:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:18">nb_sectors</name> <operator pos:start="57:20" pos:end="57:21">-=</operator> <name pos:start="57:23" pos:end="57:23">n</name></expr>;</expr_stmt>

        <comment type="block" pos:start="59:9" pos:end="61:64">/* *pnum can't be greater than one block for allocated

         * sectors since there is always a bitmap in between. */</comment>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:22">(<expr pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:21">allocated</name></expr>)</condition> <block pos:start="63:24" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:69">

            <return pos:start="65:13" pos:end="65:69">return <expr pos:start="65:20" pos:end="65:68"><name pos:start="65:20" pos:end="65:34">BDRV_BLOCK_DATA</name> <operator pos:start="65:36" pos:end="65:36">|</operator> <name pos:start="65:38" pos:end="65:60">BDRV_BLOCK_OFFSET_VALID</name> <operator pos:start="65:62" pos:end="65:62">|</operator> <name pos:start="65:64" pos:end="65:68">start</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:28">(<expr pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:22">nb_sectors</name> <operator pos:start="69:24" pos:end="69:25">==</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>)</condition> <block pos:start="69:30" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:18">

            <break pos:start="71:13" pos:end="71:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:54"><expr pos:start="75:9" pos:end="75:53"><name pos:start="75:9" pos:end="75:14">offset</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:53"><name pos:start="75:18" pos:end="75:34">get_sector_offset</name><argument_list pos:start="75:35" pos:end="75:53">(<argument pos:start="75:36" pos:end="75:37"><expr pos:start="75:36" pos:end="75:37"><name pos:start="75:36" pos:end="75:37">bs</name></expr></argument>, <argument pos:start="75:40" pos:end="75:49"><expr pos:start="75:40" pos:end="75:49"><name pos:start="75:40" pos:end="75:49">sector_num</name></expr></argument>, <argument pos:start="75:52" pos:end="75:52"><expr pos:start="75:52" pos:end="75:52"><literal type="number" pos:start="75:52" pos:end="75:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="77:13" pos:end="77:26">(<expr pos:start="77:14" pos:end="77:25"><name pos:start="77:14" pos:end="77:19">offset</name> <operator pos:start="77:21" pos:end="77:22">==</operator> <operator pos:start="77:24" pos:end="77:24">-</operator><literal type="number" pos:start="77:25" pos:end="77:25">1</literal></expr>)</condition>;</do>



    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
