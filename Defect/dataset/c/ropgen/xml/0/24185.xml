<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24185.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:72"><name pos:start="1:1" pos:end="1:16">nvdimm_dsm_write</name><argument_list pos:start="1:17" pos:end="1:72">(<argument pos:start="1:18" pos:end="1:29">void *opaque</argument>, <argument pos:start="1:32" pos:end="1:42">hwaddr addr</argument>, <argument pos:start="1:45" pos:end="1:56">uint64_t val</argument>, <argument pos:start="1:59" pos:end="1:71">unsigned size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:15">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">AcpiNVDIMMState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:26">state</name> <init pos:start="5:28" pos:end="5:35">= <expr pos:start="5:30" pos:end="5:35"><name pos:start="5:30" pos:end="5:35">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">NvdimmDsmIn</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">in</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">hwaddr</name></type> <name pos:start="9:12" pos:end="9:23">dsm_mem_addr</name> <init pos:start="9:25" pos:end="9:29">= <expr pos:start="9:27" pos:end="9:29"><name pos:start="9:27" pos:end="9:29">val</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:74"><expr pos:start="13:5" pos:end="13:73"><call pos:start="13:5" pos:end="13:73"><name pos:start="13:5" pos:end="13:16">nvdimm_debug</name><argument_list pos:start="13:17" pos:end="13:73">(<argument pos:start="13:18" pos:end="13:58"><expr pos:start="13:18" pos:end="13:58"><literal type="string" pos:start="13:18" pos:end="13:40">"dsm memory address %#"</literal> <name pos:start="13:42" pos:end="13:52">HWADDR_PRIx</name> <literal type="string" pos:start="13:54" pos:end="13:58">".\n"</literal></expr></argument>, <argument pos:start="13:61" pos:end="13:72"><expr pos:start="13:61" pos:end="13:72"><name pos:start="13:61" pos:end="13:72">dsm_mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="25:7">/*

     * The DSM memory is mapped to guest address space so an evil guest

     * can change its content while we are doing DSM emulation. Avoid

     * this by copying DSM memory to QEMU local memory.

     */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:6">in</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <call pos:start="27:10" pos:end="27:30"><name pos:start="27:10" pos:end="27:14">g_new</name><argument_list pos:start="27:15" pos:end="27:30">(<argument pos:start="27:16" pos:end="27:26"><expr pos:start="27:16" pos:end="27:26"><name pos:start="27:16" pos:end="27:26">NvdimmDsmIn</name></expr></argument>, <argument pos:start="27:29" pos:end="27:29"><expr pos:start="27:29" pos:end="27:29"><literal type="number" pos:start="27:29" pos:end="27:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:60"><expr pos:start="29:5" pos:end="29:59"><call pos:start="29:5" pos:end="29:59"><name pos:start="29:5" pos:end="29:28">cpu_physical_memory_read</name><argument_list pos:start="29:29" pos:end="29:59">(<argument pos:start="29:30" pos:end="29:41"><expr pos:start="29:30" pos:end="29:41"><name pos:start="29:30" pos:end="29:41">dsm_mem_addr</name></expr></argument>, <argument pos:start="29:44" pos:end="29:45"><expr pos:start="29:44" pos:end="29:45"><name pos:start="29:44" pos:end="29:45">in</name></expr></argument>, <argument pos:start="29:48" pos:end="29:58"><expr pos:start="29:48" pos:end="29:58"><sizeof pos:start="29:48" pos:end="29:58">sizeof<argument_list pos:start="29:54" pos:end="29:58">(<argument pos:start="29:55" pos:end="29:57"><expr pos:start="29:55" pos:end="29:57"><operator pos:start="29:55" pos:end="29:55">*</operator><name pos:start="29:56" pos:end="29:57">in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><call pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:16">le32_to_cpus</name><argument_list pos:start="33:17" pos:end="33:31">(<argument pos:start="33:18" pos:end="33:30"><expr pos:start="33:18" pos:end="33:30"><operator pos:start="33:18" pos:end="33:18">&amp;</operator><name pos:start="33:19" pos:end="33:30"><name pos:start="33:19" pos:end="33:20">in</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:30">revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><call pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:16">le32_to_cpus</name><argument_list pos:start="35:17" pos:end="35:31">(<argument pos:start="35:18" pos:end="35:30"><expr pos:start="35:18" pos:end="35:30"><operator pos:start="35:18" pos:end="35:18">&amp;</operator><name pos:start="35:19" pos:end="35:30"><name pos:start="35:19" pos:end="35:20">in</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:30">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><call pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:16">le32_to_cpus</name><argument_list pos:start="37:17" pos:end="37:29">(<argument pos:start="37:18" pos:end="37:28"><expr pos:start="37:18" pos:end="37:28"><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:28"><name pos:start="37:19" pos:end="37:20">in</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:28">handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="43:43"><expr pos:start="41:5" pos:end="43:42"><call pos:start="41:5" pos:end="43:42"><name pos:start="41:5" pos:end="41:16">nvdimm_debug</name><argument_list pos:start="41:17" pos:end="43:42">(<argument pos:start="41:18" pos:end="41:59"><expr pos:start="41:18" pos:end="41:59"><literal type="string" pos:start="41:18" pos:end="41:59">"Revision %#x Handler %#x Function %#x.\n"</literal></expr></argument>, <argument pos:start="41:62" pos:end="41:73"><expr pos:start="41:62" pos:end="41:73"><name pos:start="41:62" pos:end="41:73"><name pos:start="41:62" pos:end="41:63">in</name><operator pos:start="41:64" pos:end="41:65">-&gt;</operator><name pos:start="41:66" pos:end="41:73">revision</name></name></expr></argument>,

                 <argument pos:start="43:18" pos:end="43:27"><expr pos:start="43:18" pos:end="43:27"><name pos:start="43:18" pos:end="43:27"><name pos:start="43:18" pos:end="43:19">in</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:27">handle</name></name></expr></argument>, <argument pos:start="43:30" pos:end="43:41"><expr pos:start="43:30" pos:end="43:41"><name pos:start="43:30" pos:end="43:41"><name pos:start="43:30" pos:end="43:31">in</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:41">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="57:5"><if pos:start="47:5" pos:end="57:5">if <condition pos:start="47:8" pos:end="47:75">(<expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:10">in</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:20">revision</name></name> <operator pos:start="47:22" pos:end="47:23">!=</operator> <literal type="number" pos:start="47:25" pos:end="47:27">0x1</literal></expr> <comment type="block" pos:start="47:29" pos:end="47:74">/* Currently we only support DSM Spec Rev1. */</comment>)</condition> <block pos:start="47:77" pos:end="57:5">{<block_content pos:start="49:9" pos:end="55:18">

        <expr_stmt pos:start="49:9" pos:end="51:40"><expr pos:start="49:9" pos:end="51:39"><call pos:start="49:9" pos:end="51:39"><name pos:start="49:9" pos:end="49:20">nvdimm_debug</name><argument_list pos:start="49:21" pos:end="51:39">(<argument pos:start="49:22" pos:end="49:67"><expr pos:start="49:22" pos:end="49:67"><literal type="string" pos:start="49:22" pos:end="49:67">"Revision %#x is not supported, expect %#x.\n"</literal></expr></argument>,

                     <argument pos:start="51:22" pos:end="51:33"><expr pos:start="51:22" pos:end="51:33"><name pos:start="51:22" pos:end="51:33"><name pos:start="51:22" pos:end="51:23">in</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:33">revision</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:38"><expr pos:start="51:36" pos:end="51:38"><literal type="number" pos:start="51:36" pos:end="51:38">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:67"><expr pos:start="53:9" pos:end="53:66"><call pos:start="53:9" pos:end="53:66"><name pos:start="53:9" pos:end="53:29">nvdimm_dsm_no_payload</name><argument_list pos:start="53:30" pos:end="53:66">(<argument pos:start="53:31" pos:end="53:31"><expr pos:start="53:31" pos:end="53:31"><literal type="number" pos:start="53:31" pos:end="53:31">1</literal></expr></argument> <comment type="block" pos:start="53:33" pos:end="53:51">/* Not Supported */</comment>, <argument pos:start="53:54" pos:end="53:65"><expr pos:start="53:54" pos:end="53:65"><name pos:start="53:54" pos:end="53:65">dsm_mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:51">(<expr pos:start="61:9" pos:end="61:50"><name pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:10">in</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:18">handle</name></name> <operator pos:start="61:20" pos:end="61:21">==</operator> <name pos:start="61:23" pos:end="61:50">NVDIMM_QEMU_RSVD_HANDLE_ROOT</name></expr>)</condition> <block pos:start="61:53" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:18">

        <expr_stmt pos:start="63:9" pos:end="63:58"><expr pos:start="63:9" pos:end="63:57"><call pos:start="63:9" pos:end="63:57"><name pos:start="63:9" pos:end="63:32">nvdimm_dsm_reserved_root</name><argument_list pos:start="63:33" pos:end="63:57">(<argument pos:start="63:34" pos:end="63:38"><expr pos:start="63:34" pos:end="63:38"><name pos:start="63:34" pos:end="63:38">state</name></expr></argument>, <argument pos:start="63:41" pos:end="63:42"><expr pos:start="63:41" pos:end="63:42"><name pos:start="63:41" pos:end="63:42">in</name></expr></argument>, <argument pos:start="63:45" pos:end="63:56"><expr pos:start="63:45" pos:end="63:56"><name pos:start="63:45" pos:end="63:56">dsm_mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



     <comment type="block" pos:start="71:6" pos:end="71:55">/* Handle 0 is reserved for NVDIMM Root Device. */</comment>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:20">(<expr pos:start="73:9" pos:end="73:19"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:19"><name pos:start="73:10" pos:end="73:11">in</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:19">handle</name></name></expr>)</condition> <block pos:start="73:22" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:18">

        <expr_stmt pos:start="75:9" pos:end="75:42"><expr pos:start="75:9" pos:end="75:41"><call pos:start="75:9" pos:end="75:41"><name pos:start="75:9" pos:end="75:23">nvdimm_dsm_root</name><argument_list pos:start="75:24" pos:end="75:41">(<argument pos:start="75:25" pos:end="75:26"><expr pos:start="75:25" pos:end="75:26"><name pos:start="75:25" pos:end="75:26">in</name></expr></argument>, <argument pos:start="75:29" pos:end="75:40"><expr pos:start="75:29" pos:end="75:40"><name pos:start="75:29" pos:end="75:40">dsm_mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:40"><expr pos:start="83:5" pos:end="83:39"><call pos:start="83:5" pos:end="83:39"><name pos:start="83:5" pos:end="83:21">nvdimm_dsm_device</name><argument_list pos:start="83:22" pos:end="83:39">(<argument pos:start="83:23" pos:end="83:24"><expr pos:start="83:23" pos:end="83:24"><name pos:start="83:23" pos:end="83:24">in</name></expr></argument>, <argument pos:start="83:27" pos:end="83:38"><expr pos:start="83:27" pos:end="83:38"><name pos:start="83:27" pos:end="83:38">dsm_mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="87:1" pos:end="87:5"><name pos:start="87:1" pos:end="87:4">exit</name>:</label>

    <expr_stmt pos:start="89:5" pos:end="89:15"><expr pos:start="89:5" pos:end="89:14"><call pos:start="89:5" pos:end="89:14"><name pos:start="89:5" pos:end="89:10">g_free</name><argument_list pos:start="89:11" pos:end="89:14">(<argument pos:start="89:12" pos:end="89:13"><expr pos:start="89:12" pos:end="89:13"><name pos:start="89:12" pos:end="89:13">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
