<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22474.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:39"><name pos:start="1:1" pos:end="1:22">e1000e_process_tx_desc</name><argument_list pos:start="1:23" pos:end="7:39">(<argument pos:start="1:24" pos:end="1:39">E1000ECore *core</argument>,

                       <argument pos:start="3:24" pos:end="3:43">struct e1000e_tx *tx</argument>,

                       <argument pos:start="5:24" pos:end="5:47">struct e1000_tx_desc *dp</argument>,

                       <argument pos:start="7:24" pos:end="7:38">int queue_index</argument>)</argument_list></macro>

<block pos:start="9:1" pos:end="107:1">{<block_content pos:start="11:5" pos:end="105:5">

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:22">txd_lower</name> <init pos:start="11:24" pos:end="11:52">= <expr pos:start="11:26" pos:end="11:52"><call pos:start="11:26" pos:end="11:52"><name pos:start="11:26" pos:end="11:36">le32_to_cpu</name><argument_list pos:start="11:37" pos:end="11:52">(<argument pos:start="11:38" pos:end="11:51"><expr pos:start="11:38" pos:end="11:51"><name pos:start="11:38" pos:end="11:51"><name pos:start="11:38" pos:end="11:39">dp</name><operator pos:start="11:40" pos:end="11:41">-&gt;</operator><name pos:start="11:42" pos:end="11:46">lower</name><operator pos:start="11:47" pos:end="11:47">.</operator><name pos:start="11:48" pos:end="11:51">data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:73"><decl pos:start="13:5" pos:end="13:72"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">dtype</name> <init pos:start="13:20" pos:end="13:72">= <expr pos:start="13:22" pos:end="13:72"><name pos:start="13:22" pos:end="13:30">txd_lower</name> <operator pos:start="13:32" pos:end="13:32">&amp;</operator> <operator pos:start="13:34" pos:end="13:34">(</operator><name pos:start="13:35" pos:end="13:52">E1000_TXD_CMD_DEXT</name> <operator pos:start="13:54" pos:end="13:54">|</operator> <name pos:start="13:56" pos:end="13:71">E1000_TXD_DTYP_D</name><operator pos:start="13:72" pos:end="13:72">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:49"><decl pos:start="15:5" pos:end="15:48"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:27">split_size</name> <init pos:start="15:29" pos:end="15:48">= <expr pos:start="15:31" pos:end="15:48"><name pos:start="15:31" pos:end="15:39">txd_lower</name> <operator pos:start="15:41" pos:end="15:41">&amp;</operator> <literal type="number" pos:start="15:43" pos:end="15:48">0xffff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:68"><decl pos:start="19:5" pos:end="19:67"><type pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:29">e1000_context_desc</name></name> <modifier pos:start="19:31" pos:end="19:31">*</modifier></type><name pos:start="19:32" pos:end="19:33">xp</name> <init pos:start="19:35" pos:end="19:67">= <expr pos:start="19:37" pos:end="19:67"><operator pos:start="19:37" pos:end="19:37">(</operator>struct <name pos:start="19:45" pos:end="19:62">e1000_context_desc</name> <operator pos:start="19:64" pos:end="19:64">*</operator><operator pos:start="19:65" pos:end="19:65">)</operator><name pos:start="19:66" pos:end="19:67">dp</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:45"><decl pos:start="21:5" pos:end="21:44"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:12">eop</name> <init pos:start="21:14" pos:end="21:44">= <expr pos:start="21:16" pos:end="21:44"><name pos:start="21:16" pos:end="21:24">txd_lower</name> <operator pos:start="21:26" pos:end="21:26">&amp;</operator> <name pos:start="21:28" pos:end="21:44">E1000_TXD_CMD_EOP</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="51:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:36">(<expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:13">dtype</name> <operator pos:start="25:15" pos:end="25:16">==</operator> <name pos:start="25:18" pos:end="25:35">E1000_TXD_CMD_DEXT</name></expr>)</condition> <block pos:start="25:38" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:15"> <comment type="block" pos:start="25:40" pos:end="25:63">/* context descriptor */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:49"><expr pos:start="27:9" pos:end="27:48"><call pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:32">e1000x_read_tx_ctx_descr</name><argument_list pos:start="27:33" pos:end="27:48">(<argument pos:start="27:34" pos:end="27:35"><expr pos:start="27:34" pos:end="27:35"><name pos:start="27:34" pos:end="27:35">xp</name></expr></argument>, <argument pos:start="27:38" pos:end="27:47"><expr pos:start="27:38" pos:end="27:47"><operator pos:start="27:38" pos:end="27:38">&amp;</operator><name pos:start="27:39" pos:end="27:47"><name pos:start="27:39" pos:end="27:40">tx</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:47">props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:74"><expr pos:start="29:9" pos:end="29:73"><call pos:start="29:9" pos:end="29:73"><name pos:start="29:9" pos:end="29:34">e1000e_process_snap_option</name><argument_list pos:start="29:35" pos:end="29:73">(<argument pos:start="29:36" pos:end="29:39"><expr pos:start="29:36" pos:end="29:39"><name pos:start="29:36" pos:end="29:39">core</name></expr></argument>, <argument pos:start="29:42" pos:end="29:72"><expr pos:start="29:42" pos:end="29:72"><call pos:start="29:42" pos:end="29:72"><name pos:start="29:42" pos:end="29:52">le32_to_cpu</name><argument_list pos:start="29:53" pos:end="29:72">(<argument pos:start="29:54" pos:end="29:71"><expr pos:start="29:54" pos:end="29:71"><name pos:start="29:54" pos:end="29:71"><name pos:start="29:54" pos:end="29:55">xp</name><operator pos:start="29:56" pos:end="29:57">-&gt;</operator><name pos:start="29:58" pos:end="29:71">cmd_and_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="33:7" pos:end="43:5">else if <condition pos:start="33:15" pos:end="33:64">(<expr pos:start="33:16" pos:end="33:63"><name pos:start="33:16" pos:end="33:20">dtype</name> <operator pos:start="33:22" pos:end="33:23">==</operator> <operator pos:start="33:25" pos:end="33:25">(</operator><name pos:start="33:26" pos:end="33:43">E1000_TXD_CMD_DEXT</name> <operator pos:start="33:45" pos:end="33:45">|</operator> <name pos:start="33:47" pos:end="33:62">E1000_TXD_DTYP_D</name><operator pos:start="33:63" pos:end="33:63">)</operator></expr>)</condition> <block pos:start="33:66" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:43">

        <comment type="block" pos:start="35:9" pos:end="35:29">/* data descriptor */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:64"><expr pos:start="37:9" pos:end="37:63"><name pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:10">tx</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:17">props</name><operator pos:start="37:18" pos:end="37:18">.</operator><name pos:start="37:19" pos:end="37:28">sum_needed</name></name> <operator pos:start="37:30" pos:end="37:30">=</operator> <call pos:start="37:32" pos:end="37:58"><name pos:start="37:32" pos:end="37:42">le32_to_cpu</name><argument_list pos:start="37:43" pos:end="37:58">(<argument pos:start="37:44" pos:end="37:57"><expr pos:start="37:44" pos:end="37:57"><name pos:start="37:44" pos:end="37:57"><name pos:start="37:44" pos:end="37:45">dp</name><operator pos:start="37:46" pos:end="37:47">-&gt;</operator><name pos:start="37:48" pos:end="37:52">upper</name><operator pos:start="37:53" pos:end="37:53">.</operator><name pos:start="37:54" pos:end="37:57">data</name></name></expr></argument>)</argument_list></call> <operator pos:start="37:60" pos:end="37:61">&gt;&gt;</operator> <literal type="number" pos:start="37:63" pos:end="37:63">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:66"><expr pos:start="39:9" pos:end="39:65"><name pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:10">tx</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:17">props</name><operator pos:start="39:18" pos:end="39:18">.</operator><name pos:start="39:19" pos:end="39:23">cptse</name></name> <operator pos:start="39:25" pos:end="39:25">=</operator> <ternary pos:start="39:27" pos:end="39:65"><condition pos:start="39:27" pos:end="39:59"><expr pos:start="39:27" pos:end="39:57"><operator pos:start="39:27" pos:end="39:27">(</operator><name pos:start="39:28" pos:end="39:36">txd_lower</name> <operator pos:start="39:38" pos:end="39:38">&amp;</operator> <name pos:start="39:40" pos:end="39:56">E1000_TXD_CMD_TSE</name><operator pos:start="39:57" pos:end="39:57">)</operator></expr> ?</condition><then pos:start="39:61" pos:end="39:61"> <expr pos:start="39:61" pos:end="39:61"><literal type="number" pos:start="39:61" pos:end="39:61">1</literal></expr> </then><else pos:start="39:63" pos:end="39:65">: <expr pos:start="39:65" pos:end="39:65"><literal type="number" pos:start="39:65" pos:end="39:65">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><call pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:32">e1000e_process_ts_option</name><argument_list pos:start="41:33" pos:end="41:42">(<argument pos:start="41:34" pos:end="41:37"><expr pos:start="41:34" pos:end="41:37"><name pos:start="41:34" pos:end="41:37">core</name></expr></argument>, <argument pos:start="41:40" pos:end="41:41"><expr pos:start="41:40" pos:end="41:41"><name pos:start="41:40" pos:end="41:41">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="51:5">else <block pos:start="43:12" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:28">

        <comment type="block" pos:start="45:9" pos:end="45:31">/* legacy descriptor */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:43"><expr pos:start="47:9" pos:end="47:42"><call pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:32">e1000e_process_ts_option</name><argument_list pos:start="47:33" pos:end="47:42">(<argument pos:start="47:34" pos:end="47:37"><expr pos:start="47:34" pos:end="47:37"><name pos:start="47:34" pos:end="47:37">core</name></expr></argument>, <argument pos:start="47:40" pos:end="47:41"><expr pos:start="47:40" pos:end="47:41"><name pos:start="47:40" pos:end="47:41">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:28"><expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:10">tx</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:17">props</name><operator pos:start="49:18" pos:end="49:18">.</operator><name pos:start="49:19" pos:end="49:23">cptse</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <literal type="number" pos:start="49:27" pos:end="49:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:8">addr</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <call pos:start="55:12" pos:end="55:39"><name pos:start="55:12" pos:end="55:22">le64_to_cpu</name><argument_list pos:start="55:23" pos:end="55:39">(<argument pos:start="55:24" pos:end="55:38"><expr pos:start="55:24" pos:end="55:38"><name pos:start="55:24" pos:end="55:38"><name pos:start="55:24" pos:end="55:25">dp</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:38">buffer_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:21">(<expr pos:start="59:9" pos:end="59:20"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:20"><name pos:start="59:10" pos:end="59:11">tx</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:20">skip_cp</name></name></expr>)</condition> <block pos:start="59:23" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:9">

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:71">(<expr pos:start="61:13" pos:end="61:70"><operator pos:start="61:13" pos:end="61:13">!</operator><call pos:start="61:14" pos:end="61:70"><name pos:start="61:14" pos:end="61:40">net_tx_pkt_add_raw_fragment</name><argument_list pos:start="61:41" pos:end="61:70">(<argument pos:start="61:42" pos:end="61:51"><expr pos:start="61:42" pos:end="61:51"><name pos:start="61:42" pos:end="61:51"><name pos:start="61:42" pos:end="61:43">tx</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:51">tx_pkt</name></name></expr></argument>, <argument pos:start="61:54" pos:end="61:57"><expr pos:start="61:54" pos:end="61:57"><name pos:start="61:54" pos:end="61:57">addr</name></expr></argument>, <argument pos:start="61:60" pos:end="61:69"><expr pos:start="61:60" pos:end="61:69"><name pos:start="61:60" pos:end="61:69">split_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:73" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:31">

            <expr_stmt pos:start="63:13" pos:end="63:31"><expr pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:14">tx</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:23">skip_cp</name></name> <operator pos:start="63:25" pos:end="63:25">=</operator> <name pos:start="63:27" pos:end="63:30">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="105:5"><if pos:start="71:5" pos:end="105:5">if <condition pos:start="71:8" pos:end="71:12">(<expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">eop</name></expr>)</condition> <block pos:start="71:14" pos:end="105:5">{<block_content pos:start="73:9" pos:end="103:28">

        <if_stmt pos:start="73:9" pos:end="91:9"><if pos:start="73:9" pos:end="91:9">if <condition pos:start="73:12" pos:end="73:57">(<expr pos:start="73:13" pos:end="73:56"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:24"><name pos:start="73:14" pos:end="73:15">tx</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:24">skip_cp</name></name> <operator pos:start="73:26" pos:end="73:27">&amp;&amp;</operator> <call pos:start="73:29" pos:end="73:56"><name pos:start="73:29" pos:end="73:44">net_tx_pkt_parse</name><argument_list pos:start="73:45" pos:end="73:56">(<argument pos:start="73:46" pos:end="73:55"><expr pos:start="73:46" pos:end="73:55"><name pos:start="73:46" pos:end="73:55"><name pos:start="73:46" pos:end="73:47">tx</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:55">tx_pkt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:59" pos:end="91:9">{<block_content pos:start="75:13" pos:end="89:13">

            <if_stmt pos:start="75:13" pos:end="83:13"><if pos:start="75:13" pos:end="83:13">if <condition pos:start="75:16" pos:end="77:46">(<expr pos:start="75:17" pos:end="77:45"><call pos:start="75:17" pos:end="75:46"><name pos:start="75:17" pos:end="75:35">e1000x_vlan_enabled</name><argument_list pos:start="75:36" pos:end="75:46">(<argument pos:start="75:37" pos:end="75:45"><expr pos:start="75:37" pos:end="75:45"><name pos:start="75:37" pos:end="75:45"><name pos:start="75:37" pos:end="75:40">core</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:45">mac</name></name></expr></argument>)</argument_list></call> <operator pos:start="75:48" pos:end="75:49">&amp;&amp;</operator>

                <call pos:start="77:17" pos:end="77:45"><name pos:start="77:17" pos:end="77:34">e1000x_is_vlan_txd</name><argument_list pos:start="77:35" pos:end="77:45">(<argument pos:start="77:36" pos:end="77:44"><expr pos:start="77:36" pos:end="77:44"><name pos:start="77:36" pos:end="77:44">txd_lower</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:48" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:70">

                <expr_stmt pos:start="79:17" pos:end="81:70"><expr pos:start="79:17" pos:end="81:69"><call pos:start="79:17" pos:end="81:69"><name pos:start="79:17" pos:end="79:47">net_tx_pkt_setup_vlan_header_ex</name><argument_list pos:start="79:48" pos:end="81:69">(<argument pos:start="79:49" pos:end="79:58"><expr pos:start="79:49" pos:end="79:58"><name pos:start="79:49" pos:end="79:58"><name pos:start="79:49" pos:end="79:50">tx</name><operator pos:start="79:51" pos:end="79:52">-&gt;</operator><name pos:start="79:53" pos:end="79:58">tx_pkt</name></name></expr></argument>,

                    <argument pos:start="81:21" pos:end="81:57"><expr pos:start="81:21" pos:end="81:57"><call pos:start="81:21" pos:end="81:57"><name pos:start="81:21" pos:end="81:31">le16_to_cpu</name><argument_list pos:start="81:32" pos:end="81:57">(<argument pos:start="81:33" pos:end="81:56"><expr pos:start="81:33" pos:end="81:56"><name pos:start="81:33" pos:end="81:56"><name pos:start="81:33" pos:end="81:34">dp</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:41">upper</name><operator pos:start="81:42" pos:end="81:42">.</operator><name pos:start="81:43" pos:end="81:48">fields</name><operator pos:start="81:49" pos:end="81:49">.</operator><name pos:start="81:50" pos:end="81:56">special</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:60" pos:end="81:68"><expr pos:start="81:60" pos:end="81:68"><name pos:start="81:60" pos:end="81:68"><name pos:start="81:60" pos:end="81:63">core</name><operator pos:start="81:64" pos:end="81:65">-&gt;</operator><name pos:start="81:66" pos:end="81:68">vet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="85:13" pos:end="89:13"><if pos:start="85:13" pos:end="89:13">if <condition pos:start="85:16" pos:end="85:58">(<expr pos:start="85:17" pos:end="85:57"><call pos:start="85:17" pos:end="85:57"><name pos:start="85:17" pos:end="85:34">e1000e_tx_pkt_send</name><argument_list pos:start="85:35" pos:end="85:57">(<argument pos:start="85:36" pos:end="85:39"><expr pos:start="85:36" pos:end="85:39"><name pos:start="85:36" pos:end="85:39">core</name></expr></argument>, <argument pos:start="85:42" pos:end="85:43"><expr pos:start="85:42" pos:end="85:43"><name pos:start="85:42" pos:end="85:43">tx</name></expr></argument>, <argument pos:start="85:46" pos:end="85:56"><expr pos:start="85:46" pos:end="85:56"><name pos:start="85:46" pos:end="85:56">queue_index</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:60" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:65">

                <expr_stmt pos:start="87:17" pos:end="87:65"><expr pos:start="87:17" pos:end="87:64"><call pos:start="87:17" pos:end="87:64"><name pos:start="87:17" pos:end="87:46">e1000e_on_tx_done_update_stats</name><argument_list pos:start="87:47" pos:end="87:64">(<argument pos:start="87:48" pos:end="87:51"><expr pos:start="87:48" pos:end="87:51"><name pos:start="87:48" pos:end="87:51">core</name></expr></argument>, <argument pos:start="87:54" pos:end="87:63"><expr pos:start="87:54" pos:end="87:63"><name pos:start="87:54" pos:end="87:63"><name pos:start="87:54" pos:end="87:55">tx</name><operator pos:start="87:56" pos:end="87:57">-&gt;</operator><name pos:start="87:58" pos:end="87:63">tx_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:10">tx</name><operator pos:start="95:11" pos:end="95:12">-&gt;</operator><name pos:start="95:13" pos:end="95:19">skip_cp</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <name pos:start="95:23" pos:end="95:27">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:37"><expr pos:start="97:9" pos:end="97:36"><call pos:start="97:9" pos:end="97:36"><name pos:start="97:9" pos:end="97:24">net_tx_pkt_reset</name><argument_list pos:start="97:25" pos:end="97:36">(<argument pos:start="97:26" pos:end="97:35"><expr pos:start="97:26" pos:end="97:35"><name pos:start="97:26" pos:end="97:35"><name pos:start="97:26" pos:end="97:27">tx</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:35">tx_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:33"><expr pos:start="101:9" pos:end="101:32"><name pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:10">tx</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:17">props</name><operator pos:start="101:18" pos:end="101:18">.</operator><name pos:start="101:19" pos:end="101:28">sum_needed</name></name> <operator pos:start="101:30" pos:end="101:30">=</operator> <literal type="number" pos:start="101:32" pos:end="101:32">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:28"><expr pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:10">tx</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:17">props</name><operator pos:start="103:18" pos:end="103:18">.</operator><name pos:start="103:19" pos:end="103:23">cptse</name></name> <operator pos:start="103:25" pos:end="103:25">=</operator> <literal type="number" pos:start="103:27" pos:end="103:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block>
</unit>
