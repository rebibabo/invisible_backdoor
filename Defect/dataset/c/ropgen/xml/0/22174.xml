<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22174.c" pos:tabs="8"><function pos:start="1:1" pos:end="7517:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">abi_long</name></type> <name pos:start="1:10" pos:end="1:19">do_syscall</name><parameter_list pos:start="1:20" pos:end="7:34">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:24">void</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:33">cpu_env</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:42"><decl pos:start="1:36" pos:end="1:42"><type pos:start="1:36" pos:end="1:42"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:42">num</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:57"><decl pos:start="1:45" pos:end="1:57"><type pos:start="1:45" pos:end="1:57"><name pos:start="1:45" pos:end="1:52">abi_long</name></type> <name pos:start="1:54" pos:end="1:57">arg1</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:33"><decl pos:start="3:21" pos:end="3:33"><type pos:start="3:21" pos:end="3:33"><name pos:start="3:21" pos:end="3:28">abi_long</name></type> <name pos:start="3:30" pos:end="3:33">arg2</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:48"><decl pos:start="3:36" pos:end="3:48"><type pos:start="3:36" pos:end="3:48"><name pos:start="3:36" pos:end="3:43">abi_long</name></type> <name pos:start="3:45" pos:end="3:48">arg3</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:63"><decl pos:start="3:51" pos:end="3:63"><type pos:start="3:51" pos:end="3:63"><name pos:start="3:51" pos:end="3:58">abi_long</name></type> <name pos:start="3:60" pos:end="3:63">arg4</name></decl></parameter>,

                    <parameter pos:start="5:21" pos:end="5:33"><decl pos:start="5:21" pos:end="5:33"><type pos:start="5:21" pos:end="5:33"><name pos:start="5:21" pos:end="5:28">abi_long</name></type> <name pos:start="5:30" pos:end="5:33">arg5</name></decl></parameter>, <parameter pos:start="5:36" pos:end="5:48"><decl pos:start="5:36" pos:end="5:48"><type pos:start="5:36" pos:end="5:48"><name pos:start="5:36" pos:end="5:43">abi_long</name></type> <name pos:start="5:45" pos:end="5:48">arg6</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:63"><decl pos:start="5:51" pos:end="5:63"><type pos:start="5:51" pos:end="5:63"><name pos:start="5:51" pos:end="5:58">abi_long</name></type> <name pos:start="5:60" pos:end="5:63">arg7</name></decl></parameter>,

                    <parameter pos:start="7:21" pos:end="7:33"><decl pos:start="7:21" pos:end="7:33"><type pos:start="7:21" pos:end="7:33"><name pos:start="7:21" pos:end="7:28">abi_long</name></type> <name pos:start="7:30" pos:end="7:33">arg8</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="7517:1">{<block_content pos:start="11:5" pos:end="7515:14">

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">abi_long</name></type> <name pos:start="11:14" pos:end="11:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:15">stat</name></name></type> <name pos:start="13:17" pos:end="13:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:17">statfs</name></name></type> <name pos:start="15:19" pos:end="15:22">stfs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="22:0"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:11">p</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="21:1" pos:end="21:12">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:31"><call pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:12">gemu_log</name><argument_list pos:start="23:13" pos:end="23:31">(<argument pos:start="23:14" pos:end="23:25"><expr pos:start="23:14" pos:end="23:25"><literal type="string" pos:start="23:14" pos:end="23:25">"syscall %d"</literal></expr></argument>, <argument pos:start="23:28" pos:end="23:30"><expr pos:start="23:28" pos:end="23:30"><name pos:start="23:28" pos:end="23:30">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="27:5" pos:end="29:63"><if pos:start="27:5" pos:end="29:63">if<condition pos:start="27:7" pos:end="27:17">(<expr pos:start="27:8" pos:end="27:16"><name pos:start="27:8" pos:end="27:16">do_strace</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:63"><block_content pos:start="29:9" pos:end="29:63">

        <expr_stmt pos:start="29:9" pos:end="29:63"><expr pos:start="29:9" pos:end="29:62"><call pos:start="29:9" pos:end="29:62"><name pos:start="29:9" pos:end="29:21">print_syscall</name><argument_list pos:start="29:22" pos:end="29:62">(<argument pos:start="29:23" pos:end="29:25"><expr pos:start="29:23" pos:end="29:25"><name pos:start="29:23" pos:end="29:25">num</name></expr></argument>, <argument pos:start="29:28" pos:end="29:31"><expr pos:start="29:28" pos:end="29:31"><name pos:start="29:28" pos:end="29:31">arg1</name></expr></argument>, <argument pos:start="29:34" pos:end="29:37"><expr pos:start="29:34" pos:end="29:37"><name pos:start="29:34" pos:end="29:37">arg2</name></expr></argument>, <argument pos:start="29:40" pos:end="29:43"><expr pos:start="29:40" pos:end="29:43"><name pos:start="29:40" pos:end="29:43">arg3</name></expr></argument>, <argument pos:start="29:46" pos:end="29:49"><expr pos:start="29:46" pos:end="29:49"><name pos:start="29:46" pos:end="29:49">arg4</name></expr></argument>, <argument pos:start="29:52" pos:end="29:55"><expr pos:start="29:52" pos:end="29:55"><name pos:start="29:52" pos:end="29:55">arg5</name></expr></argument>, <argument pos:start="29:58" pos:end="29:61"><expr pos:start="29:58" pos:end="29:61"><name pos:start="29:58" pos:end="29:61">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <switch pos:start="33:5" pos:end="7495:5">switch<condition pos:start="33:11" pos:end="33:15">(<expr pos:start="33:12" pos:end="33:14"><name pos:start="33:12" pos:end="33:14">num</name></expr>)</condition> <block pos:start="33:17" pos:end="7495:5">{<block_content pos:start="35:5" pos:end="7493:14">

    <case pos:start="35:5" pos:end="38:0">case <expr pos:start="35:10" pos:end="35:23"><name pos:start="35:10" pos:end="35:23">TARGET_NR_exit</name></expr>:</case>

<cpp:ifdef pos:start="37:1" pos:end="37:22">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:22">CONFIG_USE_NPTL</name></cpp:ifdef>

      <comment type="block" pos:start="39:7" pos:end="45:67">/* In old applications this may be used to implement _exit(2).

         However in threaded applictions it is used for thread termination,

         and _exit_group is used for application termination.

         Do thread termination if we have more then one thread.  */</comment>

      <comment type="block" pos:start="47:7" pos:end="49:34">/* FIXME: This probably breaks if a signal arrives.  We should probably

         be disabling signals.  */</comment>

      <if_stmt pos:start="51:7" pos:end="114:0"><if pos:start="51:7" pos:end="114:0">if <condition pos:start="51:10" pos:end="51:30">(<expr pos:start="51:11" pos:end="51:29"><name pos:start="51:11" pos:end="51:29"><name pos:start="51:11" pos:end="51:19">first_cpu</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:29">next_cpu</name></name></expr>)</condition> <block pos:start="51:32" pos:end="114:0">{<block_content pos:start="53:11" pos:end="107:29">

          <decl_stmt pos:start="53:11" pos:end="53:24"><decl pos:start="53:11" pos:end="53:23"><type pos:start="53:11" pos:end="53:21"><name pos:start="53:11" pos:end="53:19">TaskState</name> <modifier pos:start="53:21" pos:end="53:21">*</modifier></type><name pos:start="53:22" pos:end="53:23">ts</name></decl>;</decl_stmt>

          <decl_stmt pos:start="55:11" pos:end="55:31"><decl pos:start="55:11" pos:end="55:30"><type pos:start="55:11" pos:end="55:25"><name pos:start="55:11" pos:end="55:22">CPUArchState</name> <modifier pos:start="55:24" pos:end="55:24">*</modifier><modifier pos:start="55:25" pos:end="55:25">*</modifier></type><name pos:start="55:26" pos:end="55:30">lastp</name></decl>;</decl_stmt>

          <decl_stmt pos:start="57:11" pos:end="57:26"><decl pos:start="57:11" pos:end="57:25"><type pos:start="57:11" pos:end="57:24"><name pos:start="57:11" pos:end="57:22">CPUArchState</name> <modifier pos:start="57:24" pos:end="57:24">*</modifier></type><name pos:start="57:25" pos:end="57:25">p</name></decl>;</decl_stmt>



          <expr_stmt pos:start="61:11" pos:end="61:26"><expr pos:start="61:11" pos:end="61:25"><call pos:start="61:11" pos:end="61:25"><name pos:start="61:11" pos:end="61:23">cpu_list_lock</name><argument_list pos:start="61:24" pos:end="61:25">()</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="63:11" pos:end="63:29"><expr pos:start="63:11" pos:end="63:28"><name pos:start="63:11" pos:end="63:15">lastp</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <operator pos:start="63:19" pos:end="63:19">&amp;</operator><name pos:start="63:20" pos:end="63:28">first_cpu</name></expr>;</expr_stmt>

          <expr_stmt pos:start="65:11" pos:end="65:24"><expr pos:start="65:11" pos:end="65:23"><name pos:start="65:11" pos:end="65:11">p</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:23">first_cpu</name></expr>;</expr_stmt>

          <while pos:start="67:11" pos:end="73:11">while <condition pos:start="67:17" pos:end="67:51">(<expr pos:start="67:18" pos:end="67:50"><name pos:start="67:18" pos:end="67:18">p</name> <operator pos:start="67:20" pos:end="67:21">&amp;&amp;</operator> <name pos:start="67:23" pos:end="67:23">p</name> <operator pos:start="67:25" pos:end="67:26">!=</operator> <operator pos:start="67:28" pos:end="67:28">(</operator><name pos:start="67:29" pos:end="67:40">CPUArchState</name> <operator pos:start="67:42" pos:end="67:42">*</operator><operator pos:start="67:43" pos:end="67:43">)</operator><name pos:start="67:44" pos:end="67:50">cpu_env</name></expr>)</condition> <block pos:start="67:53" pos:end="73:11">{<block_content pos:start="69:15" pos:end="71:30">

              <expr_stmt pos:start="69:15" pos:end="69:35"><expr pos:start="69:15" pos:end="69:34"><name pos:start="69:15" pos:end="69:19">lastp</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <operator pos:start="69:23" pos:end="69:23">&amp;</operator><name pos:start="69:24" pos:end="69:34"><name pos:start="69:24" pos:end="69:24">p</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:34">next_cpu</name></name></expr>;</expr_stmt>

              <expr_stmt pos:start="71:15" pos:end="71:30"><expr pos:start="71:15" pos:end="71:29"><name pos:start="71:15" pos:end="71:15">p</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:29"><name pos:start="71:19" pos:end="71:19">p</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:29">next_cpu</name></name></expr>;</expr_stmt>

          </block_content>}</block></while>

          <comment type="block" pos:start="75:11" pos:end="77:32">/* If we didn't find the CPU for this thread then something is

             horribly wrong.  */</comment>

          <if_stmt pos:start="79:11" pos:end="81:22"><if pos:start="79:11" pos:end="81:22">if <condition pos:start="79:14" pos:end="79:17">(<expr pos:start="79:15" pos:end="79:16"><operator pos:start="79:15" pos:end="79:15">!</operator><name pos:start="79:16" pos:end="79:16">p</name></expr>)</condition><block type="pseudo" pos:start="81:15" pos:end="81:22"><block_content pos:start="81:15" pos:end="81:22">

              <expr_stmt pos:start="81:15" pos:end="81:22"><expr pos:start="81:15" pos:end="81:21"><call pos:start="81:15" pos:end="81:21"><name pos:start="81:15" pos:end="81:19">abort</name><argument_list pos:start="81:20" pos:end="81:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

          <comment type="block" pos:start="83:11" pos:end="83:46">/* Remove the CPU from the list.  */</comment>

          <expr_stmt pos:start="85:11" pos:end="85:31"><expr pos:start="85:11" pos:end="85:30"><operator pos:start="85:11" pos:end="85:11">*</operator><name pos:start="85:12" pos:end="85:16">lastp</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:30"><name pos:start="85:20" pos:end="85:20">p</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:30">next_cpu</name></name></expr>;</expr_stmt>

          <expr_stmt pos:start="87:11" pos:end="87:28"><expr pos:start="87:11" pos:end="87:27"><call pos:start="87:11" pos:end="87:27"><name pos:start="87:11" pos:end="87:25">cpu_list_unlock</name><argument_list pos:start="87:26" pos:end="87:27">()</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="89:11" pos:end="89:49"><expr pos:start="89:11" pos:end="89:48"><name pos:start="89:11" pos:end="89:12">ts</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <operator pos:start="89:16" pos:end="89:16">(</operator><operator pos:start="89:17" pos:end="89:17">(</operator><name pos:start="89:18" pos:end="89:29">CPUArchState</name> <operator pos:start="89:31" pos:end="89:31">*</operator><operator pos:start="89:32" pos:end="89:32">)</operator><name pos:start="89:33" pos:end="89:39">cpu_env</name><operator pos:start="89:40" pos:end="89:40">)</operator><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:48">opaque</name></expr>;</expr_stmt>

          <if_stmt pos:start="91:11" pos:end="99:11"><if pos:start="91:11" pos:end="99:11">if <condition pos:start="91:14" pos:end="91:31">(<expr pos:start="91:15" pos:end="91:30"><name pos:start="91:15" pos:end="91:30"><name pos:start="91:15" pos:end="91:16">ts</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:30">child_tidptr</name></name></expr>)</condition> <block pos:start="91:33" pos:end="99:11">{<block_content pos:start="93:15" pos:end="97:39">

              <expr_stmt pos:start="93:15" pos:end="93:48"><expr pos:start="93:15" pos:end="93:47"><call pos:start="93:15" pos:end="93:47"><name pos:start="93:15" pos:end="93:26">put_user_u32</name><argument_list pos:start="93:27" pos:end="93:47">(<argument pos:start="93:28" pos:end="93:28"><expr pos:start="93:28" pos:end="93:28"><literal type="number" pos:start="93:28" pos:end="93:28">0</literal></expr></argument>, <argument pos:start="93:31" pos:end="93:46"><expr pos:start="93:31" pos:end="93:46"><name pos:start="93:31" pos:end="93:46"><name pos:start="93:31" pos:end="93:32">ts</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:46">child_tidptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt pos:start="95:15" pos:end="97:39"><expr pos:start="95:15" pos:end="97:38"><call pos:start="95:15" pos:end="97:38"><name pos:start="95:15" pos:end="95:23">sys_futex</name><argument_list pos:start="95:24" pos:end="97:38">(<argument pos:start="95:25" pos:end="95:45"><expr pos:start="95:25" pos:end="95:45"><call pos:start="95:25" pos:end="95:45"><name pos:start="95:25" pos:end="95:27">g2h</name><argument_list pos:start="95:28" pos:end="95:45">(<argument pos:start="95:29" pos:end="95:44"><expr pos:start="95:29" pos:end="95:44"><name pos:start="95:29" pos:end="95:44"><name pos:start="95:29" pos:end="95:30">ts</name><operator pos:start="95:31" pos:end="95:32">-&gt;</operator><name pos:start="95:33" pos:end="95:44">child_tidptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:48" pos:end="95:57"><expr pos:start="95:48" pos:end="95:57"><name pos:start="95:48" pos:end="95:57">FUTEX_WAKE</name></expr></argument>, <argument pos:start="95:60" pos:end="95:66"><expr pos:start="95:60" pos:end="95:66"><name pos:start="95:60" pos:end="95:66">INT_MAX</name></expr></argument>,

                        <argument pos:start="97:25" pos:end="97:28"><expr pos:start="97:25" pos:end="97:28"><name pos:start="97:25" pos:end="97:28">NULL</name></expr></argument>, <argument pos:start="97:31" pos:end="97:34"><expr pos:start="97:31" pos:end="97:34"><name pos:start="97:31" pos:end="97:34">NULL</name></expr></argument>, <argument pos:start="97:37" pos:end="97:37"><expr pos:start="97:37" pos:end="97:37"><literal type="number" pos:start="97:37" pos:end="97:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          </block_content>}</block></if></if_stmt>

          <expr_stmt pos:start="101:11" pos:end="101:28"><expr pos:start="101:11" pos:end="101:27"><name pos:start="101:11" pos:end="101:20">thread_env</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <name pos:start="101:24" pos:end="101:27">NULL</name></expr>;</expr_stmt>

          <expr_stmt pos:start="103:11" pos:end="103:54"><expr pos:start="103:11" pos:end="103:53"><call pos:start="103:11" pos:end="103:53"><name pos:start="103:11" pos:end="103:23">object_delete</name><argument_list pos:start="103:24" pos:end="103:53">(<argument pos:start="103:25" pos:end="103:52"><expr pos:start="103:25" pos:end="103:52"><call pos:start="103:25" pos:end="103:52"><name pos:start="103:25" pos:end="103:30">OBJECT</name><argument_list pos:start="103:31" pos:end="103:52">(<argument pos:start="103:32" pos:end="103:51"><expr pos:start="103:32" pos:end="103:51"><call pos:start="103:32" pos:end="103:51"><name pos:start="103:32" pos:end="103:42">ENV_GET_CPU</name><argument_list pos:start="103:43" pos:end="103:51">(<argument pos:start="103:44" pos:end="103:50"><expr pos:start="103:44" pos:end="103:50"><name pos:start="103:44" pos:end="103:50">cpu_env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="105:11" pos:end="105:21"><expr pos:start="105:11" pos:end="105:20"><call pos:start="105:11" pos:end="105:20"><name pos:start="105:11" pos:end="105:16">g_free</name><argument_list pos:start="105:17" pos:end="105:20">(<argument pos:start="105:18" pos:end="105:19"><expr pos:start="105:18" pos:end="105:19"><name pos:start="105:18" pos:end="105:19">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="107:11" pos:end="107:29"><expr pos:start="107:11" pos:end="107:28"><call pos:start="107:11" pos:end="107:28"><name pos:start="107:11" pos:end="107:22">pthread_exit</name><argument_list pos:start="107:23" pos:end="107:28">(<argument pos:start="107:24" pos:end="107:27"><expr pos:start="107:24" pos:end="107:27"><name pos:start="107:24" pos:end="107:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="113:1" pos:end="113:19">#<cpp:directive pos:start="113:2" pos:end="113:6">ifdef</cpp:directive> <name pos:start="113:8" pos:end="113:19">TARGET_GPROF</name></cpp:ifdef>

        <expr_stmt pos:start="115:9" pos:end="118:0"><expr pos:start="115:9" pos:end="115:19"><call pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:17">_mcleanup</name><argument_list pos:start="115:18" pos:end="115:19">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="119:9" pos:end="119:32"><expr pos:start="119:9" pos:end="119:31"><call pos:start="119:9" pos:end="119:31"><name pos:start="119:9" pos:end="119:16">gdb_exit</name><argument_list pos:start="119:17" pos:end="119:31">(<argument pos:start="119:18" pos:end="119:24"><expr pos:start="119:18" pos:end="119:24"><name pos:start="119:18" pos:end="119:24">cpu_env</name></expr></argument>, <argument pos:start="119:27" pos:end="119:30"><expr pos:start="119:27" pos:end="119:30"><name pos:start="119:27" pos:end="119:30">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:20"><expr pos:start="121:9" pos:end="121:19"><call pos:start="121:9" pos:end="121:19"><name pos:start="121:9" pos:end="121:13">_exit</name><argument_list pos:start="121:14" pos:end="121:19">(<argument pos:start="121:15" pos:end="121:18"><expr pos:start="121:15" pos:end="121:18"><name pos:start="121:15" pos:end="121:18">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:16"><expr pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:11">ret</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <literal type="number" pos:start="123:15" pos:end="123:15">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="123:18" pos:end="123:36">/* avoid warning */</comment>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:24">case <expr pos:start="127:10" pos:end="127:23"><name pos:start="127:10" pos:end="127:23">TARGET_NR_read</name></expr>:</case>

        <if_stmt pos:start="129:9" pos:end="143:9"><if pos:start="129:9" pos:end="131:20">if <condition pos:start="129:12" pos:end="129:22">(<expr pos:start="129:13" pos:end="129:21"><name pos:start="129:13" pos:end="129:16">arg3</name> <operator pos:start="129:18" pos:end="129:19">==</operator> <literal type="number" pos:start="129:21" pos:end="129:21">0</literal></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:20"><block_content pos:start="131:13" pos:end="131:20">

            <expr_stmt pos:start="131:13" pos:end="131:20"><expr pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="133:9" pos:end="143:9">else <block pos:start="133:14" pos:end="143:9">{<block_content pos:start="135:13" pos:end="141:38">

            <if_stmt pos:start="135:13" pos:end="137:28"><if pos:start="135:13" pos:end="137:28">if <condition pos:start="135:16" pos:end="135:62">(<expr pos:start="135:17" pos:end="135:61"><operator pos:start="135:17" pos:end="135:17">!</operator><operator pos:start="135:18" pos:end="135:18">(</operator><name pos:start="135:19" pos:end="135:19">p</name> <operator pos:start="135:21" pos:end="135:21">=</operator> <call pos:start="135:23" pos:end="135:60"><name pos:start="135:23" pos:end="135:31">lock_user</name><argument_list pos:start="135:32" pos:end="135:60">(<argument pos:start="135:33" pos:end="135:44"><expr pos:start="135:33" pos:end="135:44"><name pos:start="135:33" pos:end="135:44">VERIFY_WRITE</name></expr></argument>, <argument pos:start="135:47" pos:end="135:50"><expr pos:start="135:47" pos:end="135:50"><name pos:start="135:47" pos:end="135:50">arg2</name></expr></argument>, <argument pos:start="135:53" pos:end="135:56"><expr pos:start="135:53" pos:end="135:56"><name pos:start="135:53" pos:end="135:56">arg3</name></expr></argument>, <argument pos:start="135:59" pos:end="135:59"><expr pos:start="135:59" pos:end="135:59"><literal type="number" pos:start="135:59" pos:end="135:59">0</literal></expr></argument>)</argument_list></call><operator pos:start="135:61" pos:end="135:61">)</operator></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:28"><block_content pos:start="137:17" pos:end="137:28">

                <goto pos:start="137:17" pos:end="137:28">goto <name pos:start="137:22" pos:end="137:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:49"><expr pos:start="139:13" pos:end="139:48"><name pos:start="139:13" pos:end="139:15">ret</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <call pos:start="139:19" pos:end="139:48"><name pos:start="139:19" pos:end="139:27">get_errno</name><argument_list pos:start="139:28" pos:end="139:48">(<argument pos:start="139:29" pos:end="139:47"><expr pos:start="139:29" pos:end="139:47"><call pos:start="139:29" pos:end="139:47"><name pos:start="139:29" pos:end="139:32">read</name><argument_list pos:start="139:33" pos:end="139:47">(<argument pos:start="139:34" pos:end="139:37"><expr pos:start="139:34" pos:end="139:37"><name pos:start="139:34" pos:end="139:37">arg1</name></expr></argument>, <argument pos:start="139:40" pos:end="139:40"><expr pos:start="139:40" pos:end="139:40"><name pos:start="139:40" pos:end="139:40">p</name></expr></argument>, <argument pos:start="139:43" pos:end="139:46"><expr pos:start="139:43" pos:end="139:46"><name pos:start="139:43" pos:end="139:46">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:38"><expr pos:start="141:13" pos:end="141:37"><call pos:start="141:13" pos:end="141:37"><name pos:start="141:13" pos:end="141:23">unlock_user</name><argument_list pos:start="141:24" pos:end="141:37">(<argument pos:start="141:25" pos:end="141:25"><expr pos:start="141:25" pos:end="141:25"><name pos:start="141:25" pos:end="141:25">p</name></expr></argument>, <argument pos:start="141:28" pos:end="141:31"><expr pos:start="141:28" pos:end="141:31"><name pos:start="141:28" pos:end="141:31">arg2</name></expr></argument>, <argument pos:start="141:34" pos:end="141:36"><expr pos:start="141:34" pos:end="141:36"><name pos:start="141:34" pos:end="141:36">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:25">case <expr pos:start="147:10" pos:end="147:24"><name pos:start="147:10" pos:end="147:24">TARGET_NR_write</name></expr>:</case>

        <if_stmt pos:start="149:9" pos:end="151:24"><if pos:start="149:9" pos:end="151:24">if <condition pos:start="149:12" pos:end="149:57">(<expr pos:start="149:13" pos:end="149:56"><operator pos:start="149:13" pos:end="149:13">!</operator><operator pos:start="149:14" pos:end="149:14">(</operator><name pos:start="149:15" pos:end="149:15">p</name> <operator pos:start="149:17" pos:end="149:17">=</operator> <call pos:start="149:19" pos:end="149:55"><name pos:start="149:19" pos:end="149:27">lock_user</name><argument_list pos:start="149:28" pos:end="149:55">(<argument pos:start="149:29" pos:end="149:39"><expr pos:start="149:29" pos:end="149:39"><name pos:start="149:29" pos:end="149:39">VERIFY_READ</name></expr></argument>, <argument pos:start="149:42" pos:end="149:45"><expr pos:start="149:42" pos:end="149:45"><name pos:start="149:42" pos:end="149:45">arg2</name></expr></argument>, <argument pos:start="149:48" pos:end="149:51"><expr pos:start="149:48" pos:end="149:51"><name pos:start="149:48" pos:end="149:51">arg3</name></expr></argument>, <argument pos:start="149:54" pos:end="149:54"><expr pos:start="149:54" pos:end="149:54"><literal type="number" pos:start="149:54" pos:end="149:54">1</literal></expr></argument>)</argument_list></call><operator pos:start="149:56" pos:end="149:56">)</operator></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:24"><block_content pos:start="151:13" pos:end="151:24">

            <goto pos:start="151:13" pos:end="151:24">goto <name pos:start="151:18" pos:end="151:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:46"><expr pos:start="153:9" pos:end="153:45"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:45"><name pos:start="153:15" pos:end="153:23">get_errno</name><argument_list pos:start="153:24" pos:end="153:45">(<argument pos:start="153:25" pos:end="153:44"><expr pos:start="153:25" pos:end="153:44"><call pos:start="153:25" pos:end="153:44"><name pos:start="153:25" pos:end="153:29">write</name><argument_list pos:start="153:30" pos:end="153:44">(<argument pos:start="153:31" pos:end="153:34"><expr pos:start="153:31" pos:end="153:34"><name pos:start="153:31" pos:end="153:34">arg1</name></expr></argument>, <argument pos:start="153:37" pos:end="153:37"><expr pos:start="153:37" pos:end="153:37"><name pos:start="153:37" pos:end="153:37">p</name></expr></argument>, <argument pos:start="153:40" pos:end="153:43"><expr pos:start="153:40" pos:end="153:43"><name pos:start="153:40" pos:end="153:43">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:32"><expr pos:start="155:9" pos:end="155:31"><call pos:start="155:9" pos:end="155:31"><name pos:start="155:9" pos:end="155:19">unlock_user</name><argument_list pos:start="155:20" pos:end="155:31">(<argument pos:start="155:21" pos:end="155:21"><expr pos:start="155:21" pos:end="155:21"><name pos:start="155:21" pos:end="155:21">p</name></expr></argument>, <argument pos:start="155:24" pos:end="155:27"><expr pos:start="155:24" pos:end="155:27"><name pos:start="155:24" pos:end="155:27">arg2</name></expr></argument>, <argument pos:start="155:30" pos:end="155:30"><expr pos:start="155:30" pos:end="155:30"><literal type="number" pos:start="155:30" pos:end="155:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    <case pos:start="159:5" pos:end="159:24">case <expr pos:start="159:10" pos:end="159:23"><name pos:start="159:10" pos:end="159:23">TARGET_NR_open</name></expr>:</case>

        <if_stmt pos:start="161:9" pos:end="163:24"><if pos:start="161:9" pos:end="163:24">if <condition pos:start="161:12" pos:end="161:42">(<expr pos:start="161:13" pos:end="161:41"><operator pos:start="161:13" pos:end="161:13">!</operator><operator pos:start="161:14" pos:end="161:14">(</operator><name pos:start="161:15" pos:end="161:15">p</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:40"><name pos:start="161:19" pos:end="161:34">lock_user_string</name><argument_list pos:start="161:35" pos:end="161:40">(<argument pos:start="161:36" pos:end="161:39"><expr pos:start="161:36" pos:end="161:39"><name pos:start="161:36" pos:end="161:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="161:41" pos:end="161:41">)</operator></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:24"><block_content pos:start="163:13" pos:end="163:24">

            <goto pos:start="163:13" pos:end="163:24">goto <name pos:start="163:18" pos:end="163:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="169:39"><expr pos:start="165:9" pos:end="169:38"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="169:38"><name pos:start="165:15" pos:end="165:23">get_errno</name><argument_list pos:start="165:24" pos:end="169:38">(<argument pos:start="165:25" pos:end="169:37"><expr pos:start="165:25" pos:end="169:37"><call pos:start="165:25" pos:end="169:37"><name pos:start="165:25" pos:end="165:31">do_open</name><argument_list pos:start="165:32" pos:end="169:37">(<argument pos:start="165:33" pos:end="165:39"><expr pos:start="165:33" pos:end="165:39"><name pos:start="165:33" pos:end="165:39">cpu_env</name></expr></argument>, <argument pos:start="165:42" pos:end="165:42"><expr pos:start="165:42" pos:end="165:42"><name pos:start="165:42" pos:end="165:42">p</name></expr></argument>,

                                <argument pos:start="167:33" pos:end="167:77"><expr pos:start="167:33" pos:end="167:77"><call pos:start="167:33" pos:end="167:77"><name pos:start="167:33" pos:end="167:54">target_to_host_bitmask</name><argument_list pos:start="167:55" pos:end="167:77">(<argument pos:start="167:56" pos:end="167:59"><expr pos:start="167:56" pos:end="167:59"><name pos:start="167:56" pos:end="167:59">arg2</name></expr></argument>, <argument pos:start="167:62" pos:end="167:76"><expr pos:start="167:62" pos:end="167:76"><name pos:start="167:62" pos:end="167:76">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="169:33" pos:end="169:36"><expr pos:start="169:33" pos:end="169:36"><name pos:start="169:33" pos:end="169:36">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:32"><expr pos:start="171:9" pos:end="171:31"><call pos:start="171:9" pos:end="171:31"><name pos:start="171:9" pos:end="171:19">unlock_user</name><argument_list pos:start="171:20" pos:end="171:31">(<argument pos:start="171:21" pos:end="171:21"><expr pos:start="171:21" pos:end="171:21"><name pos:start="171:21" pos:end="171:21">p</name></expr></argument>, <argument pos:start="171:24" pos:end="171:27"><expr pos:start="171:24" pos:end="171:27"><name pos:start="171:24" pos:end="171:27">arg1</name></expr></argument>, <argument pos:start="171:30" pos:end="171:30"><expr pos:start="171:30" pos:end="171:30"><literal type="number" pos:start="171:30" pos:end="171:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="173:9" pos:end="176:0">break;</break>

<cpp:if pos:start="175:1" pos:end="175:53">#<cpp:directive pos:start="175:2" pos:end="175:3">if</cpp:directive> <expr pos:start="175:5" pos:end="175:53"><call pos:start="175:5" pos:end="175:29"><name pos:start="175:5" pos:end="175:11">defined</name><argument_list pos:start="175:12" pos:end="175:29">(<argument pos:start="175:13" pos:end="175:28"><expr pos:start="175:13" pos:end="175:28"><name pos:start="175:13" pos:end="175:28">TARGET_NR_openat</name></expr></argument>)</argument_list></call> <operator pos:start="175:31" pos:end="175:32">&amp;&amp;</operator> <call pos:start="175:34" pos:end="175:53"><name pos:start="175:34" pos:end="175:40">defined</name><argument_list pos:start="175:41" pos:end="175:53">(<argument pos:start="175:42" pos:end="175:52"><expr pos:start="175:42" pos:end="175:52"><name pos:start="175:42" pos:end="175:52">__NR_openat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="177:5" pos:end="177:26">case <expr pos:start="177:10" pos:end="177:25"><name pos:start="177:10" pos:end="177:25">TARGET_NR_openat</name></expr>:</case>

        <if_stmt pos:start="179:9" pos:end="181:24"><if pos:start="179:9" pos:end="181:24">if <condition pos:start="179:12" pos:end="179:42">(<expr pos:start="179:13" pos:end="179:41"><operator pos:start="179:13" pos:end="179:13">!</operator><operator pos:start="179:14" pos:end="179:14">(</operator><name pos:start="179:15" pos:end="179:15">p</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <call pos:start="179:19" pos:end="179:40"><name pos:start="179:19" pos:end="179:34">lock_user_string</name><argument_list pos:start="179:35" pos:end="179:40">(<argument pos:start="179:36" pos:end="179:39"><expr pos:start="179:36" pos:end="179:39"><name pos:start="179:36" pos:end="179:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="179:41" pos:end="179:41">)</operator></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:24"><block_content pos:start="181:13" pos:end="181:24">

            <goto pos:start="181:13" pos:end="181:24">goto <name pos:start="181:18" pos:end="181:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="183:9" pos:end="189:42"><expr pos:start="183:9" pos:end="189:41"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="189:41"><name pos:start="183:15" pos:end="183:23">get_errno</name><argument_list pos:start="183:24" pos:end="189:41">(<argument pos:start="183:25" pos:end="189:40"><expr pos:start="183:25" pos:end="189:40"><call pos:start="183:25" pos:end="189:40"><name pos:start="183:25" pos:end="183:34">sys_openat</name><argument_list pos:start="183:35" pos:end="189:40">(<argument pos:start="183:36" pos:end="183:39"><expr pos:start="183:36" pos:end="183:39"><name pos:start="183:36" pos:end="183:39">arg1</name></expr></argument>,

                                   <argument pos:start="185:36" pos:end="185:42"><expr pos:start="185:36" pos:end="185:42"><call pos:start="185:36" pos:end="185:42"><name pos:start="185:36" pos:end="185:39">path</name><argument_list pos:start="185:40" pos:end="185:42">(<argument pos:start="185:41" pos:end="185:41"><expr pos:start="185:41" pos:end="185:41"><name pos:start="185:41" pos:end="185:41">p</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="187:36" pos:end="187:80"><expr pos:start="187:36" pos:end="187:80"><call pos:start="187:36" pos:end="187:80"><name pos:start="187:36" pos:end="187:57">target_to_host_bitmask</name><argument_list pos:start="187:58" pos:end="187:80">(<argument pos:start="187:59" pos:end="187:62"><expr pos:start="187:59" pos:end="187:62"><name pos:start="187:59" pos:end="187:62">arg3</name></expr></argument>, <argument pos:start="187:65" pos:end="187:79"><expr pos:start="187:65" pos:end="187:79"><name pos:start="187:65" pos:end="187:79">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="189:36" pos:end="189:39"><expr pos:start="189:36" pos:end="189:39"><name pos:start="189:36" pos:end="189:39">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:32"><expr pos:start="191:9" pos:end="191:31"><call pos:start="191:9" pos:end="191:31"><name pos:start="191:9" pos:end="191:19">unlock_user</name><argument_list pos:start="191:20" pos:end="191:31">(<argument pos:start="191:21" pos:end="191:21"><expr pos:start="191:21" pos:end="191:21"><name pos:start="191:21" pos:end="191:21">p</name></expr></argument>, <argument pos:start="191:24" pos:end="191:27"><expr pos:start="191:24" pos:end="191:27"><name pos:start="191:24" pos:end="191:27">arg2</name></expr></argument>, <argument pos:start="191:30" pos:end="191:30"><expr pos:start="191:30" pos:end="191:30"><literal type="number" pos:start="191:30" pos:end="191:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="193:9" pos:end="196:0">break;</break>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

    <case pos:start="197:5" pos:end="197:25">case <expr pos:start="197:10" pos:end="197:24"><name pos:start="197:10" pos:end="197:24">TARGET_NR_close</name></expr>:</case>

        <expr_stmt pos:start="199:9" pos:end="199:37"><expr pos:start="199:9" pos:end="199:36"><name pos:start="199:9" pos:end="199:11">ret</name> <operator pos:start="199:13" pos:end="199:13">=</operator> <call pos:start="199:15" pos:end="199:36"><name pos:start="199:15" pos:end="199:23">get_errno</name><argument_list pos:start="199:24" pos:end="199:36">(<argument pos:start="199:25" pos:end="199:35"><expr pos:start="199:25" pos:end="199:35"><call pos:start="199:25" pos:end="199:35"><name pos:start="199:25" pos:end="199:29">close</name><argument_list pos:start="199:30" pos:end="199:35">(<argument pos:start="199:31" pos:end="199:34"><expr pos:start="199:31" pos:end="199:34"><name pos:start="199:31" pos:end="199:34">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="201:9" pos:end="201:14">break;</break>

    <case pos:start="203:5" pos:end="203:23">case <expr pos:start="203:10" pos:end="203:22"><name pos:start="203:10" pos:end="203:22">TARGET_NR_brk</name></expr>:</case>

        <expr_stmt pos:start="205:9" pos:end="205:27"><expr pos:start="205:9" pos:end="205:26"><name pos:start="205:9" pos:end="205:11">ret</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <call pos:start="205:15" pos:end="205:26"><name pos:start="205:15" pos:end="205:20">do_brk</name><argument_list pos:start="205:21" pos:end="205:26">(<argument pos:start="205:22" pos:end="205:25"><expr pos:start="205:22" pos:end="205:25"><name pos:start="205:22" pos:end="205:25">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="207:9" pos:end="207:14">break;</break>

    <case pos:start="209:5" pos:end="209:24">case <expr pos:start="209:10" pos:end="209:23"><name pos:start="209:10" pos:end="209:23">TARGET_NR_fork</name></expr>:</case>

        <expr_stmt pos:start="211:9" pos:end="211:63"><expr pos:start="211:9" pos:end="211:62"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <call pos:start="211:15" pos:end="211:62"><name pos:start="211:15" pos:end="211:23">get_errno</name><argument_list pos:start="211:24" pos:end="211:62">(<argument pos:start="211:25" pos:end="211:61"><expr pos:start="211:25" pos:end="211:61"><call pos:start="211:25" pos:end="211:61"><name pos:start="211:25" pos:end="211:31">do_fork</name><argument_list pos:start="211:32" pos:end="211:61">(<argument pos:start="211:33" pos:end="211:39"><expr pos:start="211:33" pos:end="211:39"><name pos:start="211:33" pos:end="211:39">cpu_env</name></expr></argument>, <argument pos:start="211:42" pos:end="211:48"><expr pos:start="211:42" pos:end="211:48"><name pos:start="211:42" pos:end="211:48">SIGCHLD</name></expr></argument>, <argument pos:start="211:51" pos:end="211:51"><expr pos:start="211:51" pos:end="211:51"><literal type="number" pos:start="211:51" pos:end="211:51">0</literal></expr></argument>, <argument pos:start="211:54" pos:end="211:54"><expr pos:start="211:54" pos:end="211:54"><literal type="number" pos:start="211:54" pos:end="211:54">0</literal></expr></argument>, <argument pos:start="211:57" pos:end="211:57"><expr pos:start="211:57" pos:end="211:57"><literal type="number" pos:start="211:57" pos:end="211:57">0</literal></expr></argument>, <argument pos:start="211:60" pos:end="211:60"><expr pos:start="211:60" pos:end="211:60"><literal type="number" pos:start="211:60" pos:end="211:60">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="213:9" pos:end="216:0">break;</break>

<cpp:ifdef pos:start="215:1" pos:end="215:24">#<cpp:directive pos:start="215:2" pos:end="215:6">ifdef</cpp:directive> <name pos:start="215:8" pos:end="215:24">TARGET_NR_waitpid</name></cpp:ifdef>

    <case pos:start="217:5" pos:end="217:27">case <expr pos:start="217:10" pos:end="217:26"><name pos:start="217:10" pos:end="217:26">TARGET_NR_waitpid</name></expr>:</case>

        <block pos:start="219:9" pos:end="231:9">{<block_content pos:start="221:13" pos:end="229:28">

            <decl_stmt pos:start="221:13" pos:end="221:23"><decl pos:start="221:13" pos:end="221:22"><type pos:start="221:13" pos:end="221:15"><name pos:start="221:13" pos:end="221:15">int</name></type> <name pos:start="221:17" pos:end="221:22">status</name></decl>;</decl_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:58"><expr pos:start="223:13" pos:end="223:57"><name pos:start="223:13" pos:end="223:15">ret</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <call pos:start="223:19" pos:end="223:57"><name pos:start="223:19" pos:end="223:27">get_errno</name><argument_list pos:start="223:28" pos:end="223:57">(<argument pos:start="223:29" pos:end="223:56"><expr pos:start="223:29" pos:end="223:56"><call pos:start="223:29" pos:end="223:56"><name pos:start="223:29" pos:end="223:35">waitpid</name><argument_list pos:start="223:36" pos:end="223:56">(<argument pos:start="223:37" pos:end="223:40"><expr pos:start="223:37" pos:end="223:40"><name pos:start="223:37" pos:end="223:40">arg1</name></expr></argument>, <argument pos:start="223:43" pos:end="223:49"><expr pos:start="223:43" pos:end="223:49"><operator pos:start="223:43" pos:end="223:43">&amp;</operator><name pos:start="223:44" pos:end="223:49">status</name></expr></argument>, <argument pos:start="223:52" pos:end="223:55"><expr pos:start="223:52" pos:end="223:55"><name pos:start="223:52" pos:end="223:55">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="229:28"><if pos:start="225:13" pos:end="229:28">if <condition pos:start="225:16" pos:end="227:73">(<expr pos:start="225:17" pos:end="227:72"><operator pos:start="225:17" pos:end="225:17">!</operator><call pos:start="225:18" pos:end="225:30"><name pos:start="225:18" pos:end="225:25">is_error</name><argument_list pos:start="225:26" pos:end="225:30">(<argument pos:start="225:27" pos:end="225:29"><expr pos:start="225:27" pos:end="225:29"><name pos:start="225:27" pos:end="225:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="225:32" pos:end="225:33">&amp;&amp;</operator> <name pos:start="225:35" pos:end="225:38">arg2</name> <operator pos:start="225:40" pos:end="225:41">&amp;&amp;</operator> <name pos:start="225:43" pos:end="225:45">ret</name>

                <operator pos:start="227:17" pos:end="227:18">&amp;&amp;</operator> <call pos:start="227:20" pos:end="227:72"><name pos:start="227:20" pos:end="227:31">put_user_s32</name><argument_list pos:start="227:32" pos:end="227:72">(<argument pos:start="227:33" pos:end="227:65"><expr pos:start="227:33" pos:end="227:65"><call pos:start="227:33" pos:end="227:65"><name pos:start="227:33" pos:end="227:57">host_to_target_waitstatus</name><argument_list pos:start="227:58" pos:end="227:65">(<argument pos:start="227:59" pos:end="227:64"><expr pos:start="227:59" pos:end="227:64"><name pos:start="227:59" pos:end="227:64">status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="227:68" pos:end="227:71"><expr pos:start="227:68" pos:end="227:71"><name pos:start="227:68" pos:end="227:71">arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="229:17" pos:end="229:28"><block_content pos:start="229:17" pos:end="229:28">

                <goto pos:start="229:17" pos:end="229:28">goto <name pos:start="229:22" pos:end="229:27">efault</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="233:9" pos:end="238:0">break;</break>

<cpp:endif pos:start="235:1" pos:end="235:6">#<cpp:directive pos:start="235:2" pos:end="235:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="237:1" pos:end="237:23">#<cpp:directive pos:start="237:2" pos:end="237:6">ifdef</cpp:directive> <name pos:start="237:8" pos:end="237:23">TARGET_NR_waitid</name></cpp:ifdef>

    <case pos:start="239:5" pos:end="239:26">case <expr pos:start="239:10" pos:end="239:25"><name pos:start="239:10" pos:end="239:25">TARGET_NR_waitid</name></expr>:</case>

        <block pos:start="241:9" pos:end="261:9">{<block_content pos:start="243:13" pos:end="259:13">

            <decl_stmt pos:start="243:13" pos:end="243:27"><decl pos:start="243:13" pos:end="243:26"><type pos:start="243:13" pos:end="243:21"><name pos:start="243:13" pos:end="243:21">siginfo_t</name></type> <name pos:start="243:23" pos:end="243:26">info</name></decl>;</decl_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:28"><expr pos:start="245:13" pos:end="245:27"><name pos:start="245:13" pos:end="245:23"><name pos:start="245:13" pos:end="245:16">info</name><operator pos:start="245:17" pos:end="245:17">.</operator><name pos:start="245:18" pos:end="245:23">si_pid</name></name> <operator pos:start="245:25" pos:end="245:25">=</operator> <literal type="number" pos:start="245:27" pos:end="245:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:61"><expr pos:start="247:13" pos:end="247:60"><name pos:start="247:13" pos:end="247:15">ret</name> <operator pos:start="247:17" pos:end="247:17">=</operator> <call pos:start="247:19" pos:end="247:60"><name pos:start="247:19" pos:end="247:27">get_errno</name><argument_list pos:start="247:28" pos:end="247:60">(<argument pos:start="247:29" pos:end="247:59"><expr pos:start="247:29" pos:end="247:59"><call pos:start="247:29" pos:end="247:59"><name pos:start="247:29" pos:end="247:34">waitid</name><argument_list pos:start="247:35" pos:end="247:59">(<argument pos:start="247:36" pos:end="247:39"><expr pos:start="247:36" pos:end="247:39"><name pos:start="247:36" pos:end="247:39">arg1</name></expr></argument>, <argument pos:start="247:42" pos:end="247:45"><expr pos:start="247:42" pos:end="247:45"><name pos:start="247:42" pos:end="247:45">arg2</name></expr></argument>, <argument pos:start="247:48" pos:end="247:52"><expr pos:start="247:48" pos:end="247:52"><operator pos:start="247:48" pos:end="247:48">&amp;</operator><name pos:start="247:49" pos:end="247:52">info</name></expr></argument>, <argument pos:start="247:55" pos:end="247:58"><expr pos:start="247:55" pos:end="247:58"><name pos:start="247:55" pos:end="247:58">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="259:13"><if pos:start="249:13" pos:end="259:13">if <condition pos:start="249:16" pos:end="249:59">(<expr pos:start="249:17" pos:end="249:58"><operator pos:start="249:17" pos:end="249:17">!</operator><call pos:start="249:18" pos:end="249:30"><name pos:start="249:18" pos:end="249:25">is_error</name><argument_list pos:start="249:26" pos:end="249:30">(<argument pos:start="249:27" pos:end="249:29"><expr pos:start="249:27" pos:end="249:29"><name pos:start="249:27" pos:end="249:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="249:32" pos:end="249:33">&amp;&amp;</operator> <name pos:start="249:35" pos:end="249:38">arg3</name> <operator pos:start="249:40" pos:end="249:41">&amp;&amp;</operator> <name pos:start="249:43" pos:end="249:53"><name pos:start="249:43" pos:end="249:46">info</name><operator pos:start="249:47" pos:end="249:47">.</operator><name pos:start="249:48" pos:end="249:53">si_pid</name></name> <operator pos:start="249:55" pos:end="249:56">!=</operator> <literal type="number" pos:start="249:58" pos:end="249:58">0</literal></expr>)</condition> <block pos:start="249:61" pos:end="259:13">{<block_content pos:start="251:17" pos:end="257:63">

                <if_stmt pos:start="251:17" pos:end="253:32"><if pos:start="251:17" pos:end="253:32">if <condition pos:start="251:20" pos:end="251:86">(<expr pos:start="251:21" pos:end="251:85"><operator pos:start="251:21" pos:end="251:21">!</operator><operator pos:start="251:22" pos:end="251:22">(</operator><name pos:start="251:23" pos:end="251:23">p</name> <operator pos:start="251:25" pos:end="251:25">=</operator> <call pos:start="251:27" pos:end="251:84"><name pos:start="251:27" pos:end="251:35">lock_user</name><argument_list pos:start="251:36" pos:end="251:84">(<argument pos:start="251:37" pos:end="251:48"><expr pos:start="251:37" pos:end="251:48"><name pos:start="251:37" pos:end="251:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="251:51" pos:end="251:54"><expr pos:start="251:51" pos:end="251:54"><name pos:start="251:51" pos:end="251:54">arg3</name></expr></argument>, <argument pos:start="251:57" pos:end="251:80"><expr pos:start="251:57" pos:end="251:80"><sizeof pos:start="251:57" pos:end="251:80">sizeof<argument_list pos:start="251:63" pos:end="251:80">(<argument pos:start="251:64" pos:end="251:79"><expr pos:start="251:64" pos:end="251:79"><name pos:start="251:64" pos:end="251:79">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="251:83" pos:end="251:83"><expr pos:start="251:83" pos:end="251:83"><literal type="number" pos:start="251:83" pos:end="251:83">0</literal></expr></argument>)</argument_list></call><operator pos:start="251:85" pos:end="251:85">)</operator></expr>)</condition><block type="pseudo" pos:start="253:21" pos:end="253:32"><block_content pos:start="253:21" pos:end="253:32">

                    <goto pos:start="253:21" pos:end="253:32">goto <name pos:start="253:26" pos:end="253:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:49"><expr pos:start="255:17" pos:end="255:48"><call pos:start="255:17" pos:end="255:48"><name pos:start="255:17" pos:end="255:38">host_to_target_siginfo</name><argument_list pos:start="255:39" pos:end="255:48">(<argument pos:start="255:40" pos:end="255:40"><expr pos:start="255:40" pos:end="255:40"><name pos:start="255:40" pos:end="255:40">p</name></expr></argument>, <argument pos:start="255:43" pos:end="255:47"><expr pos:start="255:43" pos:end="255:47"><operator pos:start="255:43" pos:end="255:43">&amp;</operator><name pos:start="255:44" pos:end="255:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:63"><expr pos:start="257:17" pos:end="257:62"><call pos:start="257:17" pos:end="257:62"><name pos:start="257:17" pos:end="257:27">unlock_user</name><argument_list pos:start="257:28" pos:end="257:62">(<argument pos:start="257:29" pos:end="257:29"><expr pos:start="257:29" pos:end="257:29"><name pos:start="257:29" pos:end="257:29">p</name></expr></argument>, <argument pos:start="257:32" pos:end="257:35"><expr pos:start="257:32" pos:end="257:35"><name pos:start="257:32" pos:end="257:35">arg3</name></expr></argument>, <argument pos:start="257:38" pos:end="257:61"><expr pos:start="257:38" pos:end="257:61"><sizeof pos:start="257:38" pos:end="257:61">sizeof<argument_list pos:start="257:44" pos:end="257:61">(<argument pos:start="257:45" pos:end="257:60"><expr pos:start="257:45" pos:end="257:60"><name pos:start="257:45" pos:end="257:60">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="263:9" pos:end="268:0">break;</break>

<cpp:endif pos:start="265:1" pos:end="265:6">#<cpp:directive pos:start="265:2" pos:end="265:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="267:1" pos:end="267:22">#<cpp:directive pos:start="267:2" pos:end="267:6">ifdef</cpp:directive> <name pos:start="267:8" pos:end="267:22">TARGET_NR_creat</name></cpp:ifdef> <comment type="block" pos:start="267:24" pos:end="267:41">/* not on alpha */</comment>

    <case pos:start="269:5" pos:end="269:25">case <expr pos:start="269:10" pos:end="269:24"><name pos:start="269:10" pos:end="269:24">TARGET_NR_creat</name></expr>:</case>

        <if_stmt pos:start="271:9" pos:end="273:24"><if pos:start="271:9" pos:end="273:24">if <condition pos:start="271:12" pos:end="271:42">(<expr pos:start="271:13" pos:end="271:41"><operator pos:start="271:13" pos:end="271:13">!</operator><operator pos:start="271:14" pos:end="271:14">(</operator><name pos:start="271:15" pos:end="271:15">p</name> <operator pos:start="271:17" pos:end="271:17">=</operator> <call pos:start="271:19" pos:end="271:40"><name pos:start="271:19" pos:end="271:34">lock_user_string</name><argument_list pos:start="271:35" pos:end="271:40">(<argument pos:start="271:36" pos:end="271:39"><expr pos:start="271:36" pos:end="271:39"><name pos:start="271:36" pos:end="271:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="271:41" pos:end="271:41">)</operator></expr>)</condition><block type="pseudo" pos:start="273:13" pos:end="273:24"><block_content pos:start="273:13" pos:end="273:24">

            <goto pos:start="273:13" pos:end="273:24">goto <name pos:start="273:18" pos:end="273:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:40"><expr pos:start="275:9" pos:end="275:39"><name pos:start="275:9" pos:end="275:11">ret</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <call pos:start="275:15" pos:end="275:39"><name pos:start="275:15" pos:end="275:23">get_errno</name><argument_list pos:start="275:24" pos:end="275:39">(<argument pos:start="275:25" pos:end="275:38"><expr pos:start="275:25" pos:end="275:38"><call pos:start="275:25" pos:end="275:38"><name pos:start="275:25" pos:end="275:29">creat</name><argument_list pos:start="275:30" pos:end="275:38">(<argument pos:start="275:31" pos:end="275:31"><expr pos:start="275:31" pos:end="275:31"><name pos:start="275:31" pos:end="275:31">p</name></expr></argument>, <argument pos:start="275:34" pos:end="275:37"><expr pos:start="275:34" pos:end="275:37"><name pos:start="275:34" pos:end="275:37">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:32"><expr pos:start="277:9" pos:end="277:31"><call pos:start="277:9" pos:end="277:31"><name pos:start="277:9" pos:end="277:19">unlock_user</name><argument_list pos:start="277:20" pos:end="277:31">(<argument pos:start="277:21" pos:end="277:21"><expr pos:start="277:21" pos:end="277:21"><name pos:start="277:21" pos:end="277:21">p</name></expr></argument>, <argument pos:start="277:24" pos:end="277:27"><expr pos:start="277:24" pos:end="277:27"><name pos:start="277:24" pos:end="277:27">arg1</name></expr></argument>, <argument pos:start="277:30" pos:end="277:30"><expr pos:start="277:30" pos:end="277:30"><literal type="number" pos:start="277:30" pos:end="277:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="279:9" pos:end="282:0">break;</break>

<cpp:endif pos:start="281:1" pos:end="281:6">#<cpp:directive pos:start="281:2" pos:end="281:6">endif</cpp:directive></cpp:endif>

    <case pos:start="283:5" pos:end="283:24">case <expr pos:start="283:10" pos:end="283:23"><name pos:start="283:10" pos:end="283:23">TARGET_NR_link</name></expr>:</case>

        <block pos:start="285:9" pos:end="305:9">{<block_content pos:start="287:13" pos:end="303:36">

            <decl_stmt pos:start="287:13" pos:end="287:22"><decl pos:start="287:13" pos:end="287:21"><type pos:start="287:13" pos:end="287:18"><name pos:start="287:13" pos:end="287:16">void</name> <modifier pos:start="287:18" pos:end="287:18">*</modifier></type> <name pos:start="287:20" pos:end="287:21">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:39"><expr pos:start="289:13" pos:end="289:38"><name pos:start="289:13" pos:end="289:13">p</name> <operator pos:start="289:15" pos:end="289:15">=</operator> <call pos:start="289:17" pos:end="289:38"><name pos:start="289:17" pos:end="289:32">lock_user_string</name><argument_list pos:start="289:33" pos:end="289:38">(<argument pos:start="289:34" pos:end="289:37"><expr pos:start="289:34" pos:end="289:37"><name pos:start="289:34" pos:end="289:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:40"><expr pos:start="291:13" pos:end="291:39"><name pos:start="291:13" pos:end="291:14">p2</name> <operator pos:start="291:16" pos:end="291:16">=</operator> <call pos:start="291:18" pos:end="291:39"><name pos:start="291:18" pos:end="291:33">lock_user_string</name><argument_list pos:start="291:34" pos:end="291:39">(<argument pos:start="291:35" pos:end="291:38"><expr pos:start="291:35" pos:end="291:38"><name pos:start="291:35" pos:end="291:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="293:13" pos:end="299:45"><if pos:start="293:13" pos:end="295:37">if <condition pos:start="293:16" pos:end="293:26">(<expr pos:start="293:17" pos:end="293:25"><operator pos:start="293:17" pos:end="293:17">!</operator><name pos:start="293:18" pos:end="293:18">p</name> <operator pos:start="293:20" pos:end="293:21">||</operator> <operator pos:start="293:23" pos:end="293:23">!</operator><name pos:start="293:24" pos:end="293:25">p2</name></expr>)</condition><block type="pseudo" pos:start="295:17" pos:end="295:37"><block_content pos:start="295:17" pos:end="295:37">

                <expr_stmt pos:start="295:17" pos:end="295:37"><expr pos:start="295:17" pos:end="295:36"><name pos:start="295:17" pos:end="295:19">ret</name> <operator pos:start="295:21" pos:end="295:21">=</operator> <operator pos:start="295:23" pos:end="295:23">-</operator><name pos:start="295:24" pos:end="295:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="297:13" pos:end="299:45">else<block type="pseudo" pos:start="299:17" pos:end="299:45"><block_content pos:start="299:17" pos:end="299:45">

                <expr_stmt pos:start="299:17" pos:end="299:45"><expr pos:start="299:17" pos:end="299:44"><name pos:start="299:17" pos:end="299:19">ret</name> <operator pos:start="299:21" pos:end="299:21">=</operator> <call pos:start="299:23" pos:end="299:44"><name pos:start="299:23" pos:end="299:31">get_errno</name><argument_list pos:start="299:32" pos:end="299:44">(<argument pos:start="299:33" pos:end="299:43"><expr pos:start="299:33" pos:end="299:43"><call pos:start="299:33" pos:end="299:43"><name pos:start="299:33" pos:end="299:36">link</name><argument_list pos:start="299:37" pos:end="299:43">(<argument pos:start="299:38" pos:end="299:38"><expr pos:start="299:38" pos:end="299:38"><name pos:start="299:38" pos:end="299:38">p</name></expr></argument>, <argument pos:start="299:41" pos:end="299:42"><expr pos:start="299:41" pos:end="299:42"><name pos:start="299:41" pos:end="299:42">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:37"><expr pos:start="301:13" pos:end="301:36"><call pos:start="301:13" pos:end="301:36"><name pos:start="301:13" pos:end="301:23">unlock_user</name><argument_list pos:start="301:24" pos:end="301:36">(<argument pos:start="301:25" pos:end="301:26"><expr pos:start="301:25" pos:end="301:26"><name pos:start="301:25" pos:end="301:26">p2</name></expr></argument>, <argument pos:start="301:29" pos:end="301:32"><expr pos:start="301:29" pos:end="301:32"><name pos:start="301:29" pos:end="301:32">arg2</name></expr></argument>, <argument pos:start="301:35" pos:end="301:35"><expr pos:start="301:35" pos:end="301:35"><literal type="number" pos:start="301:35" pos:end="301:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:36"><expr pos:start="303:13" pos:end="303:35"><call pos:start="303:13" pos:end="303:35"><name pos:start="303:13" pos:end="303:23">unlock_user</name><argument_list pos:start="303:24" pos:end="303:35">(<argument pos:start="303:25" pos:end="303:25"><expr pos:start="303:25" pos:end="303:25"><name pos:start="303:25" pos:end="303:25">p</name></expr></argument>, <argument pos:start="303:28" pos:end="303:31"><expr pos:start="303:28" pos:end="303:31"><name pos:start="303:28" pos:end="303:31">arg1</name></expr></argument>, <argument pos:start="303:34" pos:end="303:34"><expr pos:start="303:34" pos:end="303:34"><literal type="number" pos:start="303:34" pos:end="303:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="307:9" pos:end="310:0">break;</break>

<cpp:if pos:start="309:1" pos:end="309:53">#<cpp:directive pos:start="309:2" pos:end="309:3">if</cpp:directive> <expr pos:start="309:5" pos:end="309:53"><call pos:start="309:5" pos:end="309:29"><name pos:start="309:5" pos:end="309:11">defined</name><argument_list pos:start="309:12" pos:end="309:29">(<argument pos:start="309:13" pos:end="309:28"><expr pos:start="309:13" pos:end="309:28"><name pos:start="309:13" pos:end="309:28">TARGET_NR_linkat</name></expr></argument>)</argument_list></call> <operator pos:start="309:31" pos:end="309:32">&amp;&amp;</operator> <call pos:start="309:34" pos:end="309:53"><name pos:start="309:34" pos:end="309:40">defined</name><argument_list pos:start="309:41" pos:end="309:53">(<argument pos:start="309:42" pos:end="309:52"><expr pos:start="309:42" pos:end="309:52"><name pos:start="309:42" pos:end="309:52">__NR_linkat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="311:5" pos:end="311:26">case <expr pos:start="311:10" pos:end="311:25"><name pos:start="311:10" pos:end="311:25">TARGET_NR_linkat</name></expr>:</case>

        <block pos:start="313:9" pos:end="337:9">{<block_content pos:start="315:13" pos:end="335:37">

            <decl_stmt pos:start="315:13" pos:end="315:29"><decl pos:start="315:13" pos:end="315:28"><type pos:start="315:13" pos:end="315:18"><name pos:start="315:13" pos:end="315:16">void</name> <modifier pos:start="315:18" pos:end="315:18">*</modifier></type> <name pos:start="315:20" pos:end="315:21">p2</name> <init pos:start="315:23" pos:end="315:28">= <expr pos:start="315:25" pos:end="315:28"><name pos:start="315:25" pos:end="315:28">NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="317:13" pos:end="319:28"><if pos:start="317:13" pos:end="319:28">if <condition pos:start="317:16" pos:end="317:31">(<expr pos:start="317:17" pos:end="317:30"><operator pos:start="317:17" pos:end="317:17">!</operator><name pos:start="317:18" pos:end="317:21">arg2</name> <operator pos:start="317:23" pos:end="317:24">||</operator> <operator pos:start="317:26" pos:end="317:26">!</operator><name pos:start="317:27" pos:end="317:30">arg4</name></expr>)</condition><block type="pseudo" pos:start="319:17" pos:end="319:28"><block_content pos:start="319:17" pos:end="319:28">

                <goto pos:start="319:17" pos:end="319:28">goto <name pos:start="319:22" pos:end="319:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:40"><expr pos:start="321:13" pos:end="321:39"><name pos:start="321:13" pos:end="321:13">p</name>  <operator pos:start="321:16" pos:end="321:16">=</operator> <call pos:start="321:18" pos:end="321:39"><name pos:start="321:18" pos:end="321:33">lock_user_string</name><argument_list pos:start="321:34" pos:end="321:39">(<argument pos:start="321:35" pos:end="321:38"><expr pos:start="321:35" pos:end="321:38"><name pos:start="321:35" pos:end="321:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:40"><expr pos:start="323:13" pos:end="323:39"><name pos:start="323:13" pos:end="323:14">p2</name> <operator pos:start="323:16" pos:end="323:16">=</operator> <call pos:start="323:18" pos:end="323:39"><name pos:start="323:18" pos:end="323:33">lock_user_string</name><argument_list pos:start="323:34" pos:end="323:39">(<argument pos:start="323:35" pos:end="323:38"><expr pos:start="323:35" pos:end="323:38"><name pos:start="323:35" pos:end="323:38">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="325:13" pos:end="331:69"><if pos:start="325:13" pos:end="327:37">if <condition pos:start="325:16" pos:end="325:26">(<expr pos:start="325:17" pos:end="325:25"><operator pos:start="325:17" pos:end="325:17">!</operator><name pos:start="325:18" pos:end="325:18">p</name> <operator pos:start="325:20" pos:end="325:21">||</operator> <operator pos:start="325:23" pos:end="325:23">!</operator><name pos:start="325:24" pos:end="325:25">p2</name></expr>)</condition><block type="pseudo" pos:start="327:17" pos:end="327:37"><block_content pos:start="327:17" pos:end="327:37">

                <expr_stmt pos:start="327:17" pos:end="327:37"><expr pos:start="327:17" pos:end="327:36"><name pos:start="327:17" pos:end="327:19">ret</name> <operator pos:start="327:21" pos:end="327:21">=</operator> <operator pos:start="327:23" pos:end="327:23">-</operator><name pos:start="327:24" pos:end="327:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="329:13" pos:end="331:69">else<block type="pseudo" pos:start="331:17" pos:end="331:69"><block_content pos:start="331:17" pos:end="331:69">

                <expr_stmt pos:start="331:17" pos:end="331:69"><expr pos:start="331:17" pos:end="331:68"><name pos:start="331:17" pos:end="331:19">ret</name> <operator pos:start="331:21" pos:end="331:21">=</operator> <call pos:start="331:23" pos:end="331:68"><name pos:start="331:23" pos:end="331:31">get_errno</name><argument_list pos:start="331:32" pos:end="331:68">(<argument pos:start="331:33" pos:end="331:67"><expr pos:start="331:33" pos:end="331:67"><call pos:start="331:33" pos:end="331:67"><name pos:start="331:33" pos:end="331:42">sys_linkat</name><argument_list pos:start="331:43" pos:end="331:67">(<argument pos:start="331:44" pos:end="331:47"><expr pos:start="331:44" pos:end="331:47"><name pos:start="331:44" pos:end="331:47">arg1</name></expr></argument>, <argument pos:start="331:50" pos:end="331:50"><expr pos:start="331:50" pos:end="331:50"><name pos:start="331:50" pos:end="331:50">p</name></expr></argument>, <argument pos:start="331:53" pos:end="331:56"><expr pos:start="331:53" pos:end="331:56"><name pos:start="331:53" pos:end="331:56">arg3</name></expr></argument>, <argument pos:start="331:59" pos:end="331:60"><expr pos:start="331:59" pos:end="331:60"><name pos:start="331:59" pos:end="331:60">p2</name></expr></argument>, <argument pos:start="331:63" pos:end="331:66"><expr pos:start="331:63" pos:end="331:66"><name pos:start="331:63" pos:end="331:66">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:36"><expr pos:start="333:13" pos:end="333:35"><call pos:start="333:13" pos:end="333:35"><name pos:start="333:13" pos:end="333:23">unlock_user</name><argument_list pos:start="333:24" pos:end="333:35">(<argument pos:start="333:25" pos:end="333:25"><expr pos:start="333:25" pos:end="333:25"><name pos:start="333:25" pos:end="333:25">p</name></expr></argument>, <argument pos:start="333:28" pos:end="333:31"><expr pos:start="333:28" pos:end="333:31"><name pos:start="333:28" pos:end="333:31">arg2</name></expr></argument>, <argument pos:start="333:34" pos:end="333:34"><expr pos:start="333:34" pos:end="333:34"><literal type="number" pos:start="333:34" pos:end="333:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:37"><expr pos:start="335:13" pos:end="335:36"><call pos:start="335:13" pos:end="335:36"><name pos:start="335:13" pos:end="335:23">unlock_user</name><argument_list pos:start="335:24" pos:end="335:36">(<argument pos:start="335:25" pos:end="335:26"><expr pos:start="335:25" pos:end="335:26"><name pos:start="335:25" pos:end="335:26">p2</name></expr></argument>, <argument pos:start="335:29" pos:end="335:32"><expr pos:start="335:29" pos:end="335:32"><name pos:start="335:29" pos:end="335:32">arg4</name></expr></argument>, <argument pos:start="335:35" pos:end="335:35"><expr pos:start="335:35" pos:end="335:35"><literal type="number" pos:start="335:35" pos:end="335:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="339:9" pos:end="342:0">break;</break>

<cpp:endif pos:start="341:1" pos:end="341:6">#<cpp:directive pos:start="341:2" pos:end="341:6">endif</cpp:directive></cpp:endif>

    <case pos:start="343:5" pos:end="343:26">case <expr pos:start="343:10" pos:end="343:25"><name pos:start="343:10" pos:end="343:25">TARGET_NR_unlink</name></expr>:</case>

        <if_stmt pos:start="345:9" pos:end="347:24"><if pos:start="345:9" pos:end="347:24">if <condition pos:start="345:12" pos:end="345:42">(<expr pos:start="345:13" pos:end="345:41"><operator pos:start="345:13" pos:end="345:13">!</operator><operator pos:start="345:14" pos:end="345:14">(</operator><name pos:start="345:15" pos:end="345:15">p</name> <operator pos:start="345:17" pos:end="345:17">=</operator> <call pos:start="345:19" pos:end="345:40"><name pos:start="345:19" pos:end="345:34">lock_user_string</name><argument_list pos:start="345:35" pos:end="345:40">(<argument pos:start="345:36" pos:end="345:39"><expr pos:start="345:36" pos:end="345:39"><name pos:start="345:36" pos:end="345:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="345:41" pos:end="345:41">)</operator></expr>)</condition><block type="pseudo" pos:start="347:13" pos:end="347:24"><block_content pos:start="347:13" pos:end="347:24">

            <goto pos:start="347:13" pos:end="347:24">goto <name pos:start="347:18" pos:end="347:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:35"><expr pos:start="349:9" pos:end="349:34"><name pos:start="349:9" pos:end="349:11">ret</name> <operator pos:start="349:13" pos:end="349:13">=</operator> <call pos:start="349:15" pos:end="349:34"><name pos:start="349:15" pos:end="349:23">get_errno</name><argument_list pos:start="349:24" pos:end="349:34">(<argument pos:start="349:25" pos:end="349:33"><expr pos:start="349:25" pos:end="349:33"><call pos:start="349:25" pos:end="349:33"><name pos:start="349:25" pos:end="349:30">unlink</name><argument_list pos:start="349:31" pos:end="349:33">(<argument pos:start="349:32" pos:end="349:32"><expr pos:start="349:32" pos:end="349:32"><name pos:start="349:32" pos:end="349:32">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:32"><expr pos:start="351:9" pos:end="351:31"><call pos:start="351:9" pos:end="351:31"><name pos:start="351:9" pos:end="351:19">unlock_user</name><argument_list pos:start="351:20" pos:end="351:31">(<argument pos:start="351:21" pos:end="351:21"><expr pos:start="351:21" pos:end="351:21"><name pos:start="351:21" pos:end="351:21">p</name></expr></argument>, <argument pos:start="351:24" pos:end="351:27"><expr pos:start="351:24" pos:end="351:27"><name pos:start="351:24" pos:end="351:27">arg1</name></expr></argument>, <argument pos:start="351:30" pos:end="351:30"><expr pos:start="351:30" pos:end="351:30"><literal type="number" pos:start="351:30" pos:end="351:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="353:9" pos:end="356:0">break;</break>

<cpp:if pos:start="355:1" pos:end="355:57">#<cpp:directive pos:start="355:2" pos:end="355:3">if</cpp:directive> <expr pos:start="355:5" pos:end="355:57"><call pos:start="355:5" pos:end="355:31"><name pos:start="355:5" pos:end="355:11">defined</name><argument_list pos:start="355:12" pos:end="355:31">(<argument pos:start="355:13" pos:end="355:30"><expr pos:start="355:13" pos:end="355:30"><name pos:start="355:13" pos:end="355:30">TARGET_NR_unlinkat</name></expr></argument>)</argument_list></call> <operator pos:start="355:33" pos:end="355:34">&amp;&amp;</operator> <call pos:start="355:36" pos:end="355:57"><name pos:start="355:36" pos:end="355:42">defined</name><argument_list pos:start="355:43" pos:end="355:57">(<argument pos:start="355:44" pos:end="355:56"><expr pos:start="355:44" pos:end="355:56"><name pos:start="355:44" pos:end="355:56">__NR_unlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="357:5" pos:end="357:28">case <expr pos:start="357:10" pos:end="357:27"><name pos:start="357:10" pos:end="357:27">TARGET_NR_unlinkat</name></expr>:</case>

        <if_stmt pos:start="359:9" pos:end="361:24"><if pos:start="359:9" pos:end="361:24">if <condition pos:start="359:12" pos:end="359:42">(<expr pos:start="359:13" pos:end="359:41"><operator pos:start="359:13" pos:end="359:13">!</operator><operator pos:start="359:14" pos:end="359:14">(</operator><name pos:start="359:15" pos:end="359:15">p</name> <operator pos:start="359:17" pos:end="359:17">=</operator> <call pos:start="359:19" pos:end="359:40"><name pos:start="359:19" pos:end="359:34">lock_user_string</name><argument_list pos:start="359:35" pos:end="359:40">(<argument pos:start="359:36" pos:end="359:39"><expr pos:start="359:36" pos:end="359:39"><name pos:start="359:36" pos:end="359:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="359:41" pos:end="359:41">)</operator></expr>)</condition><block type="pseudo" pos:start="361:13" pos:end="361:24"><block_content pos:start="361:13" pos:end="361:24">

            <goto pos:start="361:13" pos:end="361:24">goto <name pos:start="361:18" pos:end="361:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:53"><expr pos:start="363:9" pos:end="363:52"><name pos:start="363:9" pos:end="363:11">ret</name> <operator pos:start="363:13" pos:end="363:13">=</operator> <call pos:start="363:15" pos:end="363:52"><name pos:start="363:15" pos:end="363:23">get_errno</name><argument_list pos:start="363:24" pos:end="363:52">(<argument pos:start="363:25" pos:end="363:51"><expr pos:start="363:25" pos:end="363:51"><call pos:start="363:25" pos:end="363:51"><name pos:start="363:25" pos:end="363:36">sys_unlinkat</name><argument_list pos:start="363:37" pos:end="363:51">(<argument pos:start="363:38" pos:end="363:41"><expr pos:start="363:38" pos:end="363:41"><name pos:start="363:38" pos:end="363:41">arg1</name></expr></argument>, <argument pos:start="363:44" pos:end="363:44"><expr pos:start="363:44" pos:end="363:44"><name pos:start="363:44" pos:end="363:44">p</name></expr></argument>, <argument pos:start="363:47" pos:end="363:50"><expr pos:start="363:47" pos:end="363:50"><name pos:start="363:47" pos:end="363:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:32"><expr pos:start="365:9" pos:end="365:31"><call pos:start="365:9" pos:end="365:31"><name pos:start="365:9" pos:end="365:19">unlock_user</name><argument_list pos:start="365:20" pos:end="365:31">(<argument pos:start="365:21" pos:end="365:21"><expr pos:start="365:21" pos:end="365:21"><name pos:start="365:21" pos:end="365:21">p</name></expr></argument>, <argument pos:start="365:24" pos:end="365:27"><expr pos:start="365:24" pos:end="365:27"><name pos:start="365:24" pos:end="365:27">arg2</name></expr></argument>, <argument pos:start="365:30" pos:end="365:30"><expr pos:start="365:30" pos:end="365:30"><literal type="number" pos:start="365:30" pos:end="365:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="367:9" pos:end="370:0">break;</break>

<cpp:endif pos:start="369:1" pos:end="369:6">#<cpp:directive pos:start="369:2" pos:end="369:6">endif</cpp:directive></cpp:endif>

    <case pos:start="371:5" pos:end="371:26">case <expr pos:start="371:10" pos:end="371:25"><name pos:start="371:10" pos:end="371:25">TARGET_NR_execve</name></expr>:</case>

        <block pos:start="373:9" pos:end="547:9">{<block_content pos:start="375:13" pos:end="545:13">

            <decl_stmt pos:start="375:13" pos:end="375:32"><decl pos:start="375:13" pos:end="375:23"><type pos:start="375:13" pos:end="375:19"><name pos:start="375:13" pos:end="375:16">char</name> <modifier pos:start="375:18" pos:end="375:18">*</modifier><modifier pos:start="375:19" pos:end="375:19">*</modifier></type><name pos:start="375:20" pos:end="375:23">argp</name></decl>, <decl pos:start="375:26" pos:end="375:31"><type ref="prev" pos:start="375:13" pos:end="375:19"><modifier pos:start="375:26" pos:end="375:26">*</modifier><modifier pos:start="375:27" pos:end="375:27">*</modifier></type><name pos:start="375:28" pos:end="375:31">envp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="377:13" pos:end="377:27"><decl pos:start="377:13" pos:end="377:20"><type pos:start="377:13" pos:end="377:15"><name pos:start="377:13" pos:end="377:15">int</name></type> <name pos:start="377:17" pos:end="377:20">argc</name></decl>, <decl pos:start="377:23" pos:end="377:26"><type ref="prev" pos:start="377:13" pos:end="377:15"/><name pos:start="377:23" pos:end="377:26">envc</name></decl>;</decl_stmt>

            <decl_stmt pos:start="379:13" pos:end="379:25"><decl pos:start="379:13" pos:end="379:24"><type pos:start="379:13" pos:end="379:21"><name pos:start="379:13" pos:end="379:21">abi_ulong</name></type> <name pos:start="379:23" pos:end="379:24">gp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="381:13" pos:end="381:33"><decl pos:start="381:13" pos:end="381:32"><type pos:start="381:13" pos:end="381:21"><name pos:start="381:13" pos:end="381:21">abi_ulong</name></type> <name pos:start="381:23" pos:end="381:32">guest_argp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="383:13" pos:end="383:33"><decl pos:start="383:13" pos:end="383:32"><type pos:start="383:13" pos:end="383:21"><name pos:start="383:13" pos:end="383:21">abi_ulong</name></type> <name pos:start="383:23" pos:end="383:32">guest_envp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="385:13" pos:end="385:27"><decl pos:start="385:13" pos:end="385:26"><type pos:start="385:13" pos:end="385:21"><name pos:start="385:13" pos:end="385:21">abi_ulong</name></type> <name pos:start="385:23" pos:end="385:26">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="387:13" pos:end="387:21"><decl pos:start="387:13" pos:end="387:20"><type pos:start="387:13" pos:end="387:19"><name pos:start="387:13" pos:end="387:16">char</name> <modifier pos:start="387:18" pos:end="387:18">*</modifier><modifier pos:start="387:19" pos:end="387:19">*</modifier></type><name pos:start="387:20" pos:end="387:20">q</name></decl>;</decl_stmt>

            <decl_stmt pos:start="389:13" pos:end="389:31"><decl pos:start="389:13" pos:end="389:30"><type pos:start="389:13" pos:end="389:15"><name pos:start="389:13" pos:end="389:15">int</name></type> <name pos:start="389:17" pos:end="389:26">total_size</name> <init pos:start="389:28" pos:end="389:30">= <expr pos:start="389:30" pos:end="389:30"><literal type="number" pos:start="389:30" pos:end="389:30">0</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="393:13" pos:end="393:21"><expr pos:start="393:13" pos:end="393:20"><name pos:start="393:13" pos:end="393:16">argc</name> <operator pos:start="393:18" pos:end="393:18">=</operator> <literal type="number" pos:start="393:20" pos:end="393:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:30"><expr pos:start="395:13" pos:end="395:29"><name pos:start="395:13" pos:end="395:22">guest_argp</name> <operator pos:start="395:24" pos:end="395:24">=</operator> <name pos:start="395:26" pos:end="395:29">arg2</name></expr>;</expr_stmt>

            <for pos:start="397:13" pos:end="409:13">for <control pos:start="397:17" pos:end="397:62">(<init pos:start="397:18" pos:end="397:33"><expr pos:start="397:18" pos:end="397:32"><name pos:start="397:18" pos:end="397:19">gp</name> <operator pos:start="397:21" pos:end="397:21">=</operator> <name pos:start="397:23" pos:end="397:32">guest_argp</name></expr>;</init> <condition pos:start="397:35" pos:end="397:37"><expr pos:start="397:35" pos:end="397:36"><name pos:start="397:35" pos:end="397:36">gp</name></expr>;</condition> <incr pos:start="397:39" pos:end="397:61"><expr pos:start="397:39" pos:end="397:61"><name pos:start="397:39" pos:end="397:40">gp</name> <operator pos:start="397:42" pos:end="397:43">+=</operator> <sizeof pos:start="397:45" pos:end="397:61">sizeof<argument_list pos:start="397:51" pos:end="397:61">(<argument pos:start="397:52" pos:end="397:60"><expr pos:start="397:52" pos:end="397:60"><name pos:start="397:52" pos:end="397:60">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block pos:start="397:64" pos:end="409:13">{<block_content pos:start="399:17" pos:end="407:23">

                <if_stmt pos:start="399:17" pos:end="401:32"><if pos:start="399:17" pos:end="401:32">if <condition pos:start="399:20" pos:end="399:43">(<expr pos:start="399:21" pos:end="399:42"><call pos:start="399:21" pos:end="399:42"><name pos:start="399:21" pos:end="399:32">get_user_ual</name><argument_list pos:start="399:33" pos:end="399:42">(<argument pos:start="399:34" pos:end="399:37"><expr pos:start="399:34" pos:end="399:37"><name pos:start="399:34" pos:end="399:37">addr</name></expr></argument>, <argument pos:start="399:40" pos:end="399:41"><expr pos:start="399:40" pos:end="399:41"><name pos:start="399:40" pos:end="399:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="401:21" pos:end="401:32"><block_content pos:start="401:21" pos:end="401:32">

                    <goto pos:start="401:21" pos:end="401:32">goto <name pos:start="401:26" pos:end="401:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="403:17" pos:end="405:26"><if pos:start="403:17" pos:end="405:26">if <condition pos:start="403:20" pos:end="403:26">(<expr pos:start="403:21" pos:end="403:25"><operator pos:start="403:21" pos:end="403:21">!</operator><name pos:start="403:22" pos:end="403:25">addr</name></expr>)</condition><block type="pseudo" pos:start="405:21" pos:end="405:26"><block_content pos:start="405:21" pos:end="405:26">

                    <break pos:start="405:21" pos:end="405:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="407:17" pos:end="407:23"><expr pos:start="407:17" pos:end="407:22"><name pos:start="407:17" pos:end="407:20">argc</name><operator pos:start="407:21" pos:end="407:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="411:13" pos:end="411:21"><expr pos:start="411:13" pos:end="411:20"><name pos:start="411:13" pos:end="411:16">envc</name> <operator pos:start="411:18" pos:end="411:18">=</operator> <literal type="number" pos:start="411:20" pos:end="411:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:30"><expr pos:start="413:13" pos:end="413:29"><name pos:start="413:13" pos:end="413:22">guest_envp</name> <operator pos:start="413:24" pos:end="413:24">=</operator> <name pos:start="413:26" pos:end="413:29">arg3</name></expr>;</expr_stmt>

            <for pos:start="415:13" pos:end="427:13">for <control pos:start="415:17" pos:end="415:62">(<init pos:start="415:18" pos:end="415:33"><expr pos:start="415:18" pos:end="415:32"><name pos:start="415:18" pos:end="415:19">gp</name> <operator pos:start="415:21" pos:end="415:21">=</operator> <name pos:start="415:23" pos:end="415:32">guest_envp</name></expr>;</init> <condition pos:start="415:35" pos:end="415:37"><expr pos:start="415:35" pos:end="415:36"><name pos:start="415:35" pos:end="415:36">gp</name></expr>;</condition> <incr pos:start="415:39" pos:end="415:61"><expr pos:start="415:39" pos:end="415:61"><name pos:start="415:39" pos:end="415:40">gp</name> <operator pos:start="415:42" pos:end="415:43">+=</operator> <sizeof pos:start="415:45" pos:end="415:61">sizeof<argument_list pos:start="415:51" pos:end="415:61">(<argument pos:start="415:52" pos:end="415:60"><expr pos:start="415:52" pos:end="415:60"><name pos:start="415:52" pos:end="415:60">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block pos:start="415:64" pos:end="427:13">{<block_content pos:start="417:17" pos:end="425:23">

                <if_stmt pos:start="417:17" pos:end="419:32"><if pos:start="417:17" pos:end="419:32">if <condition pos:start="417:20" pos:end="417:43">(<expr pos:start="417:21" pos:end="417:42"><call pos:start="417:21" pos:end="417:42"><name pos:start="417:21" pos:end="417:32">get_user_ual</name><argument_list pos:start="417:33" pos:end="417:42">(<argument pos:start="417:34" pos:end="417:37"><expr pos:start="417:34" pos:end="417:37"><name pos:start="417:34" pos:end="417:37">addr</name></expr></argument>, <argument pos:start="417:40" pos:end="417:41"><expr pos:start="417:40" pos:end="417:41"><name pos:start="417:40" pos:end="417:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="419:21" pos:end="419:32"><block_content pos:start="419:21" pos:end="419:32">

                    <goto pos:start="419:21" pos:end="419:32">goto <name pos:start="419:26" pos:end="419:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="421:17" pos:end="423:26"><if pos:start="421:17" pos:end="423:26">if <condition pos:start="421:20" pos:end="421:26">(<expr pos:start="421:21" pos:end="421:25"><operator pos:start="421:21" pos:end="421:21">!</operator><name pos:start="421:22" pos:end="421:25">addr</name></expr>)</condition><block type="pseudo" pos:start="423:21" pos:end="423:26"><block_content pos:start="423:21" pos:end="423:26">

                    <break pos:start="423:21" pos:end="423:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:23"><expr pos:start="425:17" pos:end="425:22"><name pos:start="425:17" pos:end="425:20">envc</name><operator pos:start="425:21" pos:end="425:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="431:13" pos:end="431:55"><expr pos:start="431:13" pos:end="431:54"><name pos:start="431:13" pos:end="431:16">argp</name> <operator pos:start="431:18" pos:end="431:18">=</operator> <call pos:start="431:20" pos:end="431:54"><name pos:start="431:20" pos:end="431:25">alloca</name><argument_list pos:start="431:26" pos:end="431:54">(<argument pos:start="431:27" pos:end="431:53"><expr pos:start="431:27" pos:end="431:53"><operator pos:start="431:27" pos:end="431:27">(</operator><name pos:start="431:28" pos:end="431:31">argc</name> <operator pos:start="431:33" pos:end="431:33">+</operator> <literal type="number" pos:start="431:35" pos:end="431:35">1</literal><operator pos:start="431:36" pos:end="431:36">)</operator> <operator pos:start="431:38" pos:end="431:38">*</operator> <sizeof pos:start="431:40" pos:end="431:53">sizeof<argument_list pos:start="431:46" pos:end="431:53">(<argument pos:start="431:47" pos:end="431:52"><expr pos:start="431:47" pos:end="431:52"><name pos:start="431:47" pos:end="431:50">void</name> <operator pos:start="431:52" pos:end="431:52">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="433:13" pos:end="433:55"><expr pos:start="433:13" pos:end="433:54"><name pos:start="433:13" pos:end="433:16">envp</name> <operator pos:start="433:18" pos:end="433:18">=</operator> <call pos:start="433:20" pos:end="433:54"><name pos:start="433:20" pos:end="433:25">alloca</name><argument_list pos:start="433:26" pos:end="433:54">(<argument pos:start="433:27" pos:end="433:53"><expr pos:start="433:27" pos:end="433:53"><operator pos:start="433:27" pos:end="433:27">(</operator><name pos:start="433:28" pos:end="433:31">envc</name> <operator pos:start="433:33" pos:end="433:33">+</operator> <literal type="number" pos:start="433:35" pos:end="433:35">1</literal><operator pos:start="433:36" pos:end="433:36">)</operator> <operator pos:start="433:38" pos:end="433:38">*</operator> <sizeof pos:start="433:40" pos:end="433:53">sizeof<argument_list pos:start="433:46" pos:end="433:53">(<argument pos:start="433:47" pos:end="433:52"><expr pos:start="433:47" pos:end="433:52"><name pos:start="433:47" pos:end="433:50">void</name> <operator pos:start="433:52" pos:end="433:52">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="437:13" pos:end="455:13">for <control pos:start="437:17" pos:end="439:47">(<init pos:start="437:18" pos:end="437:43"><expr pos:start="437:18" pos:end="437:32"><name pos:start="437:18" pos:end="437:19">gp</name> <operator pos:start="437:21" pos:end="437:21">=</operator> <name pos:start="437:23" pos:end="437:32">guest_argp</name></expr><operator pos:start="437:33" pos:end="437:33">,</operator> <expr pos:start="437:35" pos:end="437:42"><name pos:start="437:35" pos:end="437:35">q</name> <operator pos:start="437:37" pos:end="437:37">=</operator> <name pos:start="437:39" pos:end="437:42">argp</name></expr>;</init> <condition pos:start="437:45" pos:end="437:47"><expr pos:start="437:45" pos:end="437:46"><name pos:start="437:45" pos:end="437:46">gp</name></expr>;</condition>

                  <incr pos:start="439:19" pos:end="439:46"><expr pos:start="439:19" pos:end="439:41"><name pos:start="439:19" pos:end="439:20">gp</name> <operator pos:start="439:22" pos:end="439:23">+=</operator> <sizeof pos:start="439:25" pos:end="439:41">sizeof<argument_list pos:start="439:31" pos:end="439:41">(<argument pos:start="439:32" pos:end="439:40"><expr pos:start="439:32" pos:end="439:40"><name pos:start="439:32" pos:end="439:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="439:42" pos:end="439:42">,</operator> <expr pos:start="439:44" pos:end="439:46"><name pos:start="439:44" pos:end="439:44">q</name><operator pos:start="439:45" pos:end="439:46">++</operator></expr></incr>)</control> <block pos:start="439:49" pos:end="455:13">{<block_content pos:start="441:17" pos:end="453:45">

                <if_stmt pos:start="441:17" pos:end="443:39"><if pos:start="441:17" pos:end="443:39">if <condition pos:start="441:20" pos:end="441:43">(<expr pos:start="441:21" pos:end="441:42"><call pos:start="441:21" pos:end="441:42"><name pos:start="441:21" pos:end="441:32">get_user_ual</name><argument_list pos:start="441:33" pos:end="441:42">(<argument pos:start="441:34" pos:end="441:37"><expr pos:start="441:34" pos:end="441:37"><name pos:start="441:34" pos:end="441:37">addr</name></expr></argument>, <argument pos:start="441:40" pos:end="441:41"><expr pos:start="441:40" pos:end="441:41"><name pos:start="441:40" pos:end="441:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="443:21" pos:end="443:39"><block_content pos:start="443:21" pos:end="443:39">

                    <goto pos:start="443:21" pos:end="443:39">goto <name pos:start="443:26" pos:end="443:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="445:17" pos:end="447:26"><if pos:start="445:17" pos:end="447:26">if <condition pos:start="445:20" pos:end="445:26">(<expr pos:start="445:21" pos:end="445:25"><operator pos:start="445:21" pos:end="445:21">!</operator><name pos:start="445:22" pos:end="445:25">addr</name></expr>)</condition><block type="pseudo" pos:start="447:21" pos:end="447:26"><block_content pos:start="447:21" pos:end="447:26">

                    <break pos:start="447:21" pos:end="447:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="449:17" pos:end="451:39"><if pos:start="449:17" pos:end="451:39">if <condition pos:start="449:20" pos:end="449:51">(<expr pos:start="449:21" pos:end="449:50"><operator pos:start="449:21" pos:end="449:21">!</operator><operator pos:start="449:22" pos:end="449:22">(</operator><operator pos:start="449:23" pos:end="449:23">*</operator><name pos:start="449:24" pos:end="449:24">q</name> <operator pos:start="449:26" pos:end="449:26">=</operator> <call pos:start="449:28" pos:end="449:49"><name pos:start="449:28" pos:end="449:43">lock_user_string</name><argument_list pos:start="449:44" pos:end="449:49">(<argument pos:start="449:45" pos:end="449:48"><expr pos:start="449:45" pos:end="449:48"><name pos:start="449:45" pos:end="449:48">addr</name></expr></argument>)</argument_list></call><operator pos:start="449:50" pos:end="449:50">)</operator></expr>)</condition><block type="pseudo" pos:start="451:21" pos:end="451:39"><block_content pos:start="451:21" pos:end="451:39">

                    <goto pos:start="451:21" pos:end="451:39">goto <name pos:start="451:26" pos:end="451:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="453:17" pos:end="453:45"><expr pos:start="453:17" pos:end="453:44"><name pos:start="453:17" pos:end="453:26">total_size</name> <operator pos:start="453:28" pos:end="453:29">+=</operator> <call pos:start="453:31" pos:end="453:40"><name pos:start="453:31" pos:end="453:36">strlen</name><argument_list pos:start="453:37" pos:end="453:40">(<argument pos:start="453:38" pos:end="453:39"><expr pos:start="453:38" pos:end="453:39"><operator pos:start="453:38" pos:end="453:38">*</operator><name pos:start="453:39" pos:end="453:39">q</name></expr></argument>)</argument_list></call> <operator pos:start="453:42" pos:end="453:42">+</operator> <literal type="number" pos:start="453:44" pos:end="453:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="457:13" pos:end="457:22"><expr pos:start="457:13" pos:end="457:21"><operator pos:start="457:13" pos:end="457:13">*</operator><name pos:start="457:14" pos:end="457:14">q</name> <operator pos:start="457:16" pos:end="457:16">=</operator> <name pos:start="457:18" pos:end="457:21">NULL</name></expr>;</expr_stmt>



            <for pos:start="461:13" pos:end="479:13">for <control pos:start="461:17" pos:end="463:47">(<init pos:start="461:18" pos:end="461:43"><expr pos:start="461:18" pos:end="461:32"><name pos:start="461:18" pos:end="461:19">gp</name> <operator pos:start="461:21" pos:end="461:21">=</operator> <name pos:start="461:23" pos:end="461:32">guest_envp</name></expr><operator pos:start="461:33" pos:end="461:33">,</operator> <expr pos:start="461:35" pos:end="461:42"><name pos:start="461:35" pos:end="461:35">q</name> <operator pos:start="461:37" pos:end="461:37">=</operator> <name pos:start="461:39" pos:end="461:42">envp</name></expr>;</init> <condition pos:start="461:45" pos:end="461:47"><expr pos:start="461:45" pos:end="461:46"><name pos:start="461:45" pos:end="461:46">gp</name></expr>;</condition>

                  <incr pos:start="463:19" pos:end="463:46"><expr pos:start="463:19" pos:end="463:41"><name pos:start="463:19" pos:end="463:20">gp</name> <operator pos:start="463:22" pos:end="463:23">+=</operator> <sizeof pos:start="463:25" pos:end="463:41">sizeof<argument_list pos:start="463:31" pos:end="463:41">(<argument pos:start="463:32" pos:end="463:40"><expr pos:start="463:32" pos:end="463:40"><name pos:start="463:32" pos:end="463:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="463:42" pos:end="463:42">,</operator> <expr pos:start="463:44" pos:end="463:46"><name pos:start="463:44" pos:end="463:44">q</name><operator pos:start="463:45" pos:end="463:46">++</operator></expr></incr>)</control> <block pos:start="463:49" pos:end="479:13">{<block_content pos:start="465:17" pos:end="477:45">

                <if_stmt pos:start="465:17" pos:end="467:39"><if pos:start="465:17" pos:end="467:39">if <condition pos:start="465:20" pos:end="465:43">(<expr pos:start="465:21" pos:end="465:42"><call pos:start="465:21" pos:end="465:42"><name pos:start="465:21" pos:end="465:32">get_user_ual</name><argument_list pos:start="465:33" pos:end="465:42">(<argument pos:start="465:34" pos:end="465:37"><expr pos:start="465:34" pos:end="465:37"><name pos:start="465:34" pos:end="465:37">addr</name></expr></argument>, <argument pos:start="465:40" pos:end="465:41"><expr pos:start="465:40" pos:end="465:41"><name pos:start="465:40" pos:end="465:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="467:21" pos:end="467:39"><block_content pos:start="467:21" pos:end="467:39">

                    <goto pos:start="467:21" pos:end="467:39">goto <name pos:start="467:26" pos:end="467:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="469:17" pos:end="471:26"><if pos:start="469:17" pos:end="471:26">if <condition pos:start="469:20" pos:end="469:26">(<expr pos:start="469:21" pos:end="469:25"><operator pos:start="469:21" pos:end="469:21">!</operator><name pos:start="469:22" pos:end="469:25">addr</name></expr>)</condition><block type="pseudo" pos:start="471:21" pos:end="471:26"><block_content pos:start="471:21" pos:end="471:26">

                    <break pos:start="471:21" pos:end="471:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="473:17" pos:end="475:39"><if pos:start="473:17" pos:end="475:39">if <condition pos:start="473:20" pos:end="473:51">(<expr pos:start="473:21" pos:end="473:50"><operator pos:start="473:21" pos:end="473:21">!</operator><operator pos:start="473:22" pos:end="473:22">(</operator><operator pos:start="473:23" pos:end="473:23">*</operator><name pos:start="473:24" pos:end="473:24">q</name> <operator pos:start="473:26" pos:end="473:26">=</operator> <call pos:start="473:28" pos:end="473:49"><name pos:start="473:28" pos:end="473:43">lock_user_string</name><argument_list pos:start="473:44" pos:end="473:49">(<argument pos:start="473:45" pos:end="473:48"><expr pos:start="473:45" pos:end="473:48"><name pos:start="473:45" pos:end="473:48">addr</name></expr></argument>)</argument_list></call><operator pos:start="473:50" pos:end="473:50">)</operator></expr>)</condition><block type="pseudo" pos:start="475:21" pos:end="475:39"><block_content pos:start="475:21" pos:end="475:39">

                    <goto pos:start="475:21" pos:end="475:39">goto <name pos:start="475:26" pos:end="475:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="477:17" pos:end="477:45"><expr pos:start="477:17" pos:end="477:44"><name pos:start="477:17" pos:end="477:26">total_size</name> <operator pos:start="477:28" pos:end="477:29">+=</operator> <call pos:start="477:31" pos:end="477:40"><name pos:start="477:31" pos:end="477:36">strlen</name><argument_list pos:start="477:37" pos:end="477:40">(<argument pos:start="477:38" pos:end="477:39"><expr pos:start="477:38" pos:end="477:39"><operator pos:start="477:38" pos:end="477:38">*</operator><name pos:start="477:39" pos:end="477:39">q</name></expr></argument>)</argument_list></call> <operator pos:start="477:42" pos:end="477:42">+</operator> <literal type="number" pos:start="477:44" pos:end="477:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="481:13" pos:end="481:22"><expr pos:start="481:13" pos:end="481:21"><operator pos:start="481:13" pos:end="481:13">*</operator><name pos:start="481:14" pos:end="481:14">q</name> <operator pos:start="481:16" pos:end="481:16">=</operator> <name pos:start="481:18" pos:end="481:21">NULL</name></expr>;</expr_stmt>



            <comment type="block" pos:start="485:13" pos:end="487:56">/* This case will not be caught by the host's execve() if its

               page size is bigger than the target's. */</comment>

            <if_stmt pos:start="489:13" pos:end="495:13"><if pos:start="489:13" pos:end="495:13">if <condition pos:start="489:16" pos:end="489:62">(<expr pos:start="489:17" pos:end="489:61"><name pos:start="489:17" pos:end="489:26">total_size</name> <operator pos:start="489:28" pos:end="489:28">&gt;</operator> <name pos:start="489:30" pos:end="489:42">MAX_ARG_PAGES</name> <operator pos:start="489:44" pos:end="489:44">*</operator> <name pos:start="489:46" pos:end="489:61">TARGET_PAGE_SIZE</name></expr>)</condition> <block pos:start="489:64" pos:end="495:13">{<block_content pos:start="491:17" pos:end="493:32">

                <expr_stmt pos:start="491:17" pos:end="491:36"><expr pos:start="491:17" pos:end="491:35"><name pos:start="491:17" pos:end="491:19">ret</name> <operator pos:start="491:21" pos:end="491:21">=</operator> <operator pos:start="491:23" pos:end="491:23">-</operator><name pos:start="491:24" pos:end="491:35">TARGET_E2BIG</name></expr>;</expr_stmt>

                <goto pos:start="493:17" pos:end="493:32">goto <name pos:start="493:22" pos:end="493:31">execve_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="497:13" pos:end="499:35"><if pos:start="497:13" pos:end="499:35">if <condition pos:start="497:16" pos:end="497:46">(<expr pos:start="497:17" pos:end="497:45"><operator pos:start="497:17" pos:end="497:17">!</operator><operator pos:start="497:18" pos:end="497:18">(</operator><name pos:start="497:19" pos:end="497:19">p</name> <operator pos:start="497:21" pos:end="497:21">=</operator> <call pos:start="497:23" pos:end="497:44"><name pos:start="497:23" pos:end="497:38">lock_user_string</name><argument_list pos:start="497:39" pos:end="497:44">(<argument pos:start="497:40" pos:end="497:43"><expr pos:start="497:40" pos:end="497:43"><name pos:start="497:40" pos:end="497:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="497:45" pos:end="497:45">)</operator></expr>)</condition><block type="pseudo" pos:start="499:17" pos:end="499:35"><block_content pos:start="499:17" pos:end="499:35">

                <goto pos:start="499:17" pos:end="499:35">goto <name pos:start="499:22" pos:end="499:34">execve_efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:51"><expr pos:start="501:13" pos:end="501:50"><name pos:start="501:13" pos:end="501:15">ret</name> <operator pos:start="501:17" pos:end="501:17">=</operator> <call pos:start="501:19" pos:end="501:50"><name pos:start="501:19" pos:end="501:27">get_errno</name><argument_list pos:start="501:28" pos:end="501:50">(<argument pos:start="501:29" pos:end="501:49"><expr pos:start="501:29" pos:end="501:49"><call pos:start="501:29" pos:end="501:49"><name pos:start="501:29" pos:end="501:34">execve</name><argument_list pos:start="501:35" pos:end="501:49">(<argument pos:start="501:36" pos:end="501:36"><expr pos:start="501:36" pos:end="501:36"><name pos:start="501:36" pos:end="501:36">p</name></expr></argument>, <argument pos:start="501:39" pos:end="501:42"><expr pos:start="501:39" pos:end="501:42"><name pos:start="501:39" pos:end="501:42">argp</name></expr></argument>, <argument pos:start="501:45" pos:end="501:48"><expr pos:start="501:45" pos:end="501:48"><name pos:start="501:45" pos:end="501:48">envp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:36"><expr pos:start="503:13" pos:end="503:35"><call pos:start="503:13" pos:end="503:35"><name pos:start="503:13" pos:end="503:23">unlock_user</name><argument_list pos:start="503:24" pos:end="503:35">(<argument pos:start="503:25" pos:end="503:25"><expr pos:start="503:25" pos:end="503:25"><name pos:start="503:25" pos:end="503:25">p</name></expr></argument>, <argument pos:start="503:28" pos:end="503:31"><expr pos:start="503:28" pos:end="503:31"><name pos:start="503:28" pos:end="503:31">arg1</name></expr></argument>, <argument pos:start="503:34" pos:end="503:34"><expr pos:start="503:34" pos:end="503:34"><literal type="number" pos:start="503:34" pos:end="503:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <goto pos:start="507:13" pos:end="507:28">goto <name pos:start="507:18" pos:end="507:27">execve_end</name>;</goto>



        <label pos:start="511:9" pos:end="511:22"><name pos:start="511:9" pos:end="511:21">execve_efault</name>:</label>

            <expr_stmt pos:start="513:13" pos:end="513:33"><expr pos:start="513:13" pos:end="513:32"><name pos:start="513:13" pos:end="513:15">ret</name> <operator pos:start="513:17" pos:end="513:17">=</operator> <operator pos:start="513:19" pos:end="513:19">-</operator><name pos:start="513:20" pos:end="513:32">TARGET_EFAULT</name></expr>;</expr_stmt>



        <label pos:start="517:9" pos:end="517:19"><name pos:start="517:9" pos:end="517:18">execve_end</name>:</label>

            <for pos:start="519:13" pos:end="531:13">for <control pos:start="519:17" pos:end="521:47">(<init pos:start="519:18" pos:end="519:43"><expr pos:start="519:18" pos:end="519:32"><name pos:start="519:18" pos:end="519:19">gp</name> <operator pos:start="519:21" pos:end="519:21">=</operator> <name pos:start="519:23" pos:end="519:32">guest_argp</name></expr><operator pos:start="519:33" pos:end="519:33">,</operator> <expr pos:start="519:35" pos:end="519:42"><name pos:start="519:35" pos:end="519:35">q</name> <operator pos:start="519:37" pos:end="519:37">=</operator> <name pos:start="519:39" pos:end="519:42">argp</name></expr>;</init> <condition pos:start="519:45" pos:end="519:47"><expr pos:start="519:45" pos:end="519:46"><operator pos:start="519:45" pos:end="519:45">*</operator><name pos:start="519:46" pos:end="519:46">q</name></expr>;</condition>

                  <incr pos:start="521:19" pos:end="521:46"><expr pos:start="521:19" pos:end="521:41"><name pos:start="521:19" pos:end="521:20">gp</name> <operator pos:start="521:22" pos:end="521:23">+=</operator> <sizeof pos:start="521:25" pos:end="521:41">sizeof<argument_list pos:start="521:31" pos:end="521:41">(<argument pos:start="521:32" pos:end="521:40"><expr pos:start="521:32" pos:end="521:40"><name pos:start="521:32" pos:end="521:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="521:42" pos:end="521:42">,</operator> <expr pos:start="521:44" pos:end="521:46"><name pos:start="521:44" pos:end="521:44">q</name><operator pos:start="521:45" pos:end="521:46">++</operator></expr></incr>)</control> <block pos:start="521:49" pos:end="531:13">{<block_content pos:start="523:17" pos:end="529:41">

                <if_stmt pos:start="523:17" pos:end="527:26"><if pos:start="523:17" pos:end="527:26">if <condition pos:start="523:20" pos:end="525:29">(<expr pos:start="523:21" pos:end="525:28"><call pos:start="523:21" pos:end="523:42"><name pos:start="523:21" pos:end="523:32">get_user_ual</name><argument_list pos:start="523:33" pos:end="523:42">(<argument pos:start="523:34" pos:end="523:37"><expr pos:start="523:34" pos:end="523:37"><name pos:start="523:34" pos:end="523:37">addr</name></expr></argument>, <argument pos:start="523:40" pos:end="523:41"><expr pos:start="523:40" pos:end="523:41"><name pos:start="523:40" pos:end="523:41">gp</name></expr></argument>)</argument_list></call>

                    <operator pos:start="525:21" pos:end="525:22">||</operator> <operator pos:start="525:24" pos:end="525:24">!</operator><name pos:start="525:25" pos:end="525:28">addr</name></expr>)</condition><block type="pseudo" pos:start="527:21" pos:end="527:26"><block_content pos:start="527:21" pos:end="527:26">

                    <break pos:start="527:21" pos:end="527:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="529:17" pos:end="529:41"><expr pos:start="529:17" pos:end="529:40"><call pos:start="529:17" pos:end="529:40"><name pos:start="529:17" pos:end="529:27">unlock_user</name><argument_list pos:start="529:28" pos:end="529:40">(<argument pos:start="529:29" pos:end="529:30"><expr pos:start="529:29" pos:end="529:30"><operator pos:start="529:29" pos:end="529:29">*</operator><name pos:start="529:30" pos:end="529:30">q</name></expr></argument>, <argument pos:start="529:33" pos:end="529:36"><expr pos:start="529:33" pos:end="529:36"><name pos:start="529:33" pos:end="529:36">addr</name></expr></argument>, <argument pos:start="529:39" pos:end="529:39"><expr pos:start="529:39" pos:end="529:39"><literal type="number" pos:start="529:39" pos:end="529:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="533:13" pos:end="545:13">for <control pos:start="533:17" pos:end="535:47">(<init pos:start="533:18" pos:end="533:43"><expr pos:start="533:18" pos:end="533:32"><name pos:start="533:18" pos:end="533:19">gp</name> <operator pos:start="533:21" pos:end="533:21">=</operator> <name pos:start="533:23" pos:end="533:32">guest_envp</name></expr><operator pos:start="533:33" pos:end="533:33">,</operator> <expr pos:start="533:35" pos:end="533:42"><name pos:start="533:35" pos:end="533:35">q</name> <operator pos:start="533:37" pos:end="533:37">=</operator> <name pos:start="533:39" pos:end="533:42">envp</name></expr>;</init> <condition pos:start="533:45" pos:end="533:47"><expr pos:start="533:45" pos:end="533:46"><operator pos:start="533:45" pos:end="533:45">*</operator><name pos:start="533:46" pos:end="533:46">q</name></expr>;</condition>

                  <incr pos:start="535:19" pos:end="535:46"><expr pos:start="535:19" pos:end="535:41"><name pos:start="535:19" pos:end="535:20">gp</name> <operator pos:start="535:22" pos:end="535:23">+=</operator> <sizeof pos:start="535:25" pos:end="535:41">sizeof<argument_list pos:start="535:31" pos:end="535:41">(<argument pos:start="535:32" pos:end="535:40"><expr pos:start="535:32" pos:end="535:40"><name pos:start="535:32" pos:end="535:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="535:42" pos:end="535:42">,</operator> <expr pos:start="535:44" pos:end="535:46"><name pos:start="535:44" pos:end="535:44">q</name><operator pos:start="535:45" pos:end="535:46">++</operator></expr></incr>)</control> <block pos:start="535:49" pos:end="545:13">{<block_content pos:start="537:17" pos:end="543:41">

                <if_stmt pos:start="537:17" pos:end="541:26"><if pos:start="537:17" pos:end="541:26">if <condition pos:start="537:20" pos:end="539:29">(<expr pos:start="537:21" pos:end="539:28"><call pos:start="537:21" pos:end="537:42"><name pos:start="537:21" pos:end="537:32">get_user_ual</name><argument_list pos:start="537:33" pos:end="537:42">(<argument pos:start="537:34" pos:end="537:37"><expr pos:start="537:34" pos:end="537:37"><name pos:start="537:34" pos:end="537:37">addr</name></expr></argument>, <argument pos:start="537:40" pos:end="537:41"><expr pos:start="537:40" pos:end="537:41"><name pos:start="537:40" pos:end="537:41">gp</name></expr></argument>)</argument_list></call>

                    <operator pos:start="539:21" pos:end="539:22">||</operator> <operator pos:start="539:24" pos:end="539:24">!</operator><name pos:start="539:25" pos:end="539:28">addr</name></expr>)</condition><block type="pseudo" pos:start="541:21" pos:end="541:26"><block_content pos:start="541:21" pos:end="541:26">

                    <break pos:start="541:21" pos:end="541:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="543:17" pos:end="543:41"><expr pos:start="543:17" pos:end="543:40"><call pos:start="543:17" pos:end="543:40"><name pos:start="543:17" pos:end="543:27">unlock_user</name><argument_list pos:start="543:28" pos:end="543:40">(<argument pos:start="543:29" pos:end="543:30"><expr pos:start="543:29" pos:end="543:30"><operator pos:start="543:29" pos:end="543:29">*</operator><name pos:start="543:30" pos:end="543:30">q</name></expr></argument>, <argument pos:start="543:33" pos:end="543:36"><expr pos:start="543:33" pos:end="543:36"><name pos:start="543:33" pos:end="543:36">addr</name></expr></argument>, <argument pos:start="543:39" pos:end="543:39"><expr pos:start="543:39" pos:end="543:39"><literal type="number" pos:start="543:39" pos:end="543:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block>

        <break pos:start="549:9" pos:end="549:14">break;</break>

    <case pos:start="551:5" pos:end="551:25">case <expr pos:start="551:10" pos:end="551:24"><name pos:start="551:10" pos:end="551:24">TARGET_NR_chdir</name></expr>:</case>

        <if_stmt pos:start="553:9" pos:end="555:24"><if pos:start="553:9" pos:end="555:24">if <condition pos:start="553:12" pos:end="553:42">(<expr pos:start="553:13" pos:end="553:41"><operator pos:start="553:13" pos:end="553:13">!</operator><operator pos:start="553:14" pos:end="553:14">(</operator><name pos:start="553:15" pos:end="553:15">p</name> <operator pos:start="553:17" pos:end="553:17">=</operator> <call pos:start="553:19" pos:end="553:40"><name pos:start="553:19" pos:end="553:34">lock_user_string</name><argument_list pos:start="553:35" pos:end="553:40">(<argument pos:start="553:36" pos:end="553:39"><expr pos:start="553:36" pos:end="553:39"><name pos:start="553:36" pos:end="553:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="553:41" pos:end="553:41">)</operator></expr>)</condition><block type="pseudo" pos:start="555:13" pos:end="555:24"><block_content pos:start="555:13" pos:end="555:24">

            <goto pos:start="555:13" pos:end="555:24">goto <name pos:start="555:18" pos:end="555:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="557:9" pos:end="557:34"><expr pos:start="557:9" pos:end="557:33"><name pos:start="557:9" pos:end="557:11">ret</name> <operator pos:start="557:13" pos:end="557:13">=</operator> <call pos:start="557:15" pos:end="557:33"><name pos:start="557:15" pos:end="557:23">get_errno</name><argument_list pos:start="557:24" pos:end="557:33">(<argument pos:start="557:25" pos:end="557:32"><expr pos:start="557:25" pos:end="557:32"><call pos:start="557:25" pos:end="557:32"><name pos:start="557:25" pos:end="557:29">chdir</name><argument_list pos:start="557:30" pos:end="557:32">(<argument pos:start="557:31" pos:end="557:31"><expr pos:start="557:31" pos:end="557:31"><name pos:start="557:31" pos:end="557:31">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="559:9" pos:end="559:32"><expr pos:start="559:9" pos:end="559:31"><call pos:start="559:9" pos:end="559:31"><name pos:start="559:9" pos:end="559:19">unlock_user</name><argument_list pos:start="559:20" pos:end="559:31">(<argument pos:start="559:21" pos:end="559:21"><expr pos:start="559:21" pos:end="559:21"><name pos:start="559:21" pos:end="559:21">p</name></expr></argument>, <argument pos:start="559:24" pos:end="559:27"><expr pos:start="559:24" pos:end="559:27"><name pos:start="559:24" pos:end="559:27">arg1</name></expr></argument>, <argument pos:start="559:30" pos:end="559:30"><expr pos:start="559:30" pos:end="559:30"><literal type="number" pos:start="559:30" pos:end="559:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="561:9" pos:end="564:0">break;</break>

<cpp:ifdef pos:start="563:1" pos:end="563:21">#<cpp:directive pos:start="563:2" pos:end="563:6">ifdef</cpp:directive> <name pos:start="563:8" pos:end="563:21">TARGET_NR_time</name></cpp:ifdef>

    <case pos:start="565:5" pos:end="565:24">case <expr pos:start="565:10" pos:end="565:23"><name pos:start="565:10" pos:end="565:23">TARGET_NR_time</name></expr>:</case>

        <block pos:start="567:9" pos:end="581:9">{<block_content pos:start="569:13" pos:end="579:28">

            <decl_stmt pos:start="569:13" pos:end="569:29"><decl pos:start="569:13" pos:end="569:28"><type pos:start="569:13" pos:end="569:18"><name pos:start="569:13" pos:end="569:18">time_t</name></type> <name pos:start="569:20" pos:end="569:28">host_time</name></decl>;</decl_stmt>

            <expr_stmt pos:start="571:13" pos:end="571:46"><expr pos:start="571:13" pos:end="571:45"><name pos:start="571:13" pos:end="571:15">ret</name> <operator pos:start="571:17" pos:end="571:17">=</operator> <call pos:start="571:19" pos:end="571:45"><name pos:start="571:19" pos:end="571:27">get_errno</name><argument_list pos:start="571:28" pos:end="571:45">(<argument pos:start="571:29" pos:end="571:44"><expr pos:start="571:29" pos:end="571:44"><call pos:start="571:29" pos:end="571:44"><name pos:start="571:29" pos:end="571:32">time</name><argument_list pos:start="571:33" pos:end="571:44">(<argument pos:start="571:34" pos:end="571:43"><expr pos:start="571:34" pos:end="571:43"><operator pos:start="571:34" pos:end="571:34">&amp;</operator><name pos:start="571:35" pos:end="571:43">host_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="573:13" pos:end="579:28"><if pos:start="573:13" pos:end="579:28">if <condition pos:start="573:16" pos:end="577:49">(<expr pos:start="573:17" pos:end="577:48"><operator pos:start="573:17" pos:end="573:17">!</operator><call pos:start="573:18" pos:end="573:30"><name pos:start="573:18" pos:end="573:25">is_error</name><argument_list pos:start="573:26" pos:end="573:30">(<argument pos:start="573:27" pos:end="573:29"><expr pos:start="573:27" pos:end="573:29"><name pos:start="573:27" pos:end="573:29">ret</name></expr></argument>)</argument_list></call>

                <operator pos:start="575:17" pos:end="575:18">&amp;&amp;</operator> <name pos:start="575:20" pos:end="575:23">arg1</name>

                <operator pos:start="577:17" pos:end="577:18">&amp;&amp;</operator> <call pos:start="577:20" pos:end="577:48"><name pos:start="577:20" pos:end="577:31">put_user_sal</name><argument_list pos:start="577:32" pos:end="577:48">(<argument pos:start="577:33" pos:end="577:41"><expr pos:start="577:33" pos:end="577:41"><name pos:start="577:33" pos:end="577:41">host_time</name></expr></argument>, <argument pos:start="577:44" pos:end="577:47"><expr pos:start="577:44" pos:end="577:47"><name pos:start="577:44" pos:end="577:47">arg1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="579:17" pos:end="579:28"><block_content pos:start="579:17" pos:end="579:28">

                <goto pos:start="579:17" pos:end="579:28">goto <name pos:start="579:22" pos:end="579:27">efault</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="583:9" pos:end="586:0">break;</break>

<cpp:endif pos:start="585:1" pos:end="585:6">#<cpp:directive pos:start="585:2" pos:end="585:6">endif</cpp:directive></cpp:endif>

    <case pos:start="587:5" pos:end="587:25">case <expr pos:start="587:10" pos:end="587:24"><name pos:start="587:10" pos:end="587:24">TARGET_NR_mknod</name></expr>:</case>

        <if_stmt pos:start="589:9" pos:end="591:24"><if pos:start="589:9" pos:end="591:24">if <condition pos:start="589:12" pos:end="589:42">(<expr pos:start="589:13" pos:end="589:41"><operator pos:start="589:13" pos:end="589:13">!</operator><operator pos:start="589:14" pos:end="589:14">(</operator><name pos:start="589:15" pos:end="589:15">p</name> <operator pos:start="589:17" pos:end="589:17">=</operator> <call pos:start="589:19" pos:end="589:40"><name pos:start="589:19" pos:end="589:34">lock_user_string</name><argument_list pos:start="589:35" pos:end="589:40">(<argument pos:start="589:36" pos:end="589:39"><expr pos:start="589:36" pos:end="589:39"><name pos:start="589:36" pos:end="589:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="589:41" pos:end="589:41">)</operator></expr>)</condition><block type="pseudo" pos:start="591:13" pos:end="591:24"><block_content pos:start="591:13" pos:end="591:24">

            <goto pos:start="591:13" pos:end="591:24">goto <name pos:start="591:18" pos:end="591:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="593:9" pos:end="593:46"><expr pos:start="593:9" pos:end="593:45"><name pos:start="593:9" pos:end="593:11">ret</name> <operator pos:start="593:13" pos:end="593:13">=</operator> <call pos:start="593:15" pos:end="593:45"><name pos:start="593:15" pos:end="593:23">get_errno</name><argument_list pos:start="593:24" pos:end="593:45">(<argument pos:start="593:25" pos:end="593:44"><expr pos:start="593:25" pos:end="593:44"><call pos:start="593:25" pos:end="593:44"><name pos:start="593:25" pos:end="593:29">mknod</name><argument_list pos:start="593:30" pos:end="593:44">(<argument pos:start="593:31" pos:end="593:31"><expr pos:start="593:31" pos:end="593:31"><name pos:start="593:31" pos:end="593:31">p</name></expr></argument>, <argument pos:start="593:34" pos:end="593:37"><expr pos:start="593:34" pos:end="593:37"><name pos:start="593:34" pos:end="593:37">arg2</name></expr></argument>, <argument pos:start="593:40" pos:end="593:43"><expr pos:start="593:40" pos:end="593:43"><name pos:start="593:40" pos:end="593:43">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="595:9" pos:end="595:32"><expr pos:start="595:9" pos:end="595:31"><call pos:start="595:9" pos:end="595:31"><name pos:start="595:9" pos:end="595:19">unlock_user</name><argument_list pos:start="595:20" pos:end="595:31">(<argument pos:start="595:21" pos:end="595:21"><expr pos:start="595:21" pos:end="595:21"><name pos:start="595:21" pos:end="595:21">p</name></expr></argument>, <argument pos:start="595:24" pos:end="595:27"><expr pos:start="595:24" pos:end="595:27"><name pos:start="595:24" pos:end="595:27">arg1</name></expr></argument>, <argument pos:start="595:30" pos:end="595:30"><expr pos:start="595:30" pos:end="595:30"><literal type="number" pos:start="595:30" pos:end="595:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="597:9" pos:end="600:0">break;</break>

<cpp:if pos:start="599:1" pos:end="599:55">#<cpp:directive pos:start="599:2" pos:end="599:3">if</cpp:directive> <expr pos:start="599:5" pos:end="599:55"><call pos:start="599:5" pos:end="599:30"><name pos:start="599:5" pos:end="599:11">defined</name><argument_list pos:start="599:12" pos:end="599:30">(<argument pos:start="599:13" pos:end="599:29"><expr pos:start="599:13" pos:end="599:29"><name pos:start="599:13" pos:end="599:29">TARGET_NR_mknodat</name></expr></argument>)</argument_list></call> <operator pos:start="599:32" pos:end="599:33">&amp;&amp;</operator> <call pos:start="599:35" pos:end="599:55"><name pos:start="599:35" pos:end="599:41">defined</name><argument_list pos:start="599:42" pos:end="599:55">(<argument pos:start="599:43" pos:end="599:54"><expr pos:start="599:43" pos:end="599:54"><name pos:start="599:43" pos:end="599:54">__NR_mknodat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="601:5" pos:end="601:27">case <expr pos:start="601:10" pos:end="601:26"><name pos:start="601:10" pos:end="601:26">TARGET_NR_mknodat</name></expr>:</case>

        <if_stmt pos:start="603:9" pos:end="605:24"><if pos:start="603:9" pos:end="605:24">if <condition pos:start="603:12" pos:end="603:42">(<expr pos:start="603:13" pos:end="603:41"><operator pos:start="603:13" pos:end="603:13">!</operator><operator pos:start="603:14" pos:end="603:14">(</operator><name pos:start="603:15" pos:end="603:15">p</name> <operator pos:start="603:17" pos:end="603:17">=</operator> <call pos:start="603:19" pos:end="603:40"><name pos:start="603:19" pos:end="603:34">lock_user_string</name><argument_list pos:start="603:35" pos:end="603:40">(<argument pos:start="603:36" pos:end="603:39"><expr pos:start="603:36" pos:end="603:39"><name pos:start="603:36" pos:end="603:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="603:41" pos:end="603:41">)</operator></expr>)</condition><block type="pseudo" pos:start="605:13" pos:end="605:24"><block_content pos:start="605:13" pos:end="605:24">

            <goto pos:start="605:13" pos:end="605:24">goto <name pos:start="605:18" pos:end="605:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="607:9" pos:end="607:58"><expr pos:start="607:9" pos:end="607:57"><name pos:start="607:9" pos:end="607:11">ret</name> <operator pos:start="607:13" pos:end="607:13">=</operator> <call pos:start="607:15" pos:end="607:57"><name pos:start="607:15" pos:end="607:23">get_errno</name><argument_list pos:start="607:24" pos:end="607:57">(<argument pos:start="607:25" pos:end="607:56"><expr pos:start="607:25" pos:end="607:56"><call pos:start="607:25" pos:end="607:56"><name pos:start="607:25" pos:end="607:35">sys_mknodat</name><argument_list pos:start="607:36" pos:end="607:56">(<argument pos:start="607:37" pos:end="607:40"><expr pos:start="607:37" pos:end="607:40"><name pos:start="607:37" pos:end="607:40">arg1</name></expr></argument>, <argument pos:start="607:43" pos:end="607:43"><expr pos:start="607:43" pos:end="607:43"><name pos:start="607:43" pos:end="607:43">p</name></expr></argument>, <argument pos:start="607:46" pos:end="607:49"><expr pos:start="607:46" pos:end="607:49"><name pos:start="607:46" pos:end="607:49">arg3</name></expr></argument>, <argument pos:start="607:52" pos:end="607:55"><expr pos:start="607:52" pos:end="607:55"><name pos:start="607:52" pos:end="607:55">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:32"><expr pos:start="609:9" pos:end="609:31"><call pos:start="609:9" pos:end="609:31"><name pos:start="609:9" pos:end="609:19">unlock_user</name><argument_list pos:start="609:20" pos:end="609:31">(<argument pos:start="609:21" pos:end="609:21"><expr pos:start="609:21" pos:end="609:21"><name pos:start="609:21" pos:end="609:21">p</name></expr></argument>, <argument pos:start="609:24" pos:end="609:27"><expr pos:start="609:24" pos:end="609:27"><name pos:start="609:24" pos:end="609:27">arg2</name></expr></argument>, <argument pos:start="609:30" pos:end="609:30"><expr pos:start="609:30" pos:end="609:30"><literal type="number" pos:start="609:30" pos:end="609:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="611:9" pos:end="614:0">break;</break>

<cpp:endif pos:start="613:1" pos:end="613:6">#<cpp:directive pos:start="613:2" pos:end="613:6">endif</cpp:directive></cpp:endif>

    <case pos:start="615:5" pos:end="615:25">case <expr pos:start="615:10" pos:end="615:24"><name pos:start="615:10" pos:end="615:24">TARGET_NR_chmod</name></expr>:</case>

        <if_stmt pos:start="617:9" pos:end="619:24"><if pos:start="617:9" pos:end="619:24">if <condition pos:start="617:12" pos:end="617:42">(<expr pos:start="617:13" pos:end="617:41"><operator pos:start="617:13" pos:end="617:13">!</operator><operator pos:start="617:14" pos:end="617:14">(</operator><name pos:start="617:15" pos:end="617:15">p</name> <operator pos:start="617:17" pos:end="617:17">=</operator> <call pos:start="617:19" pos:end="617:40"><name pos:start="617:19" pos:end="617:34">lock_user_string</name><argument_list pos:start="617:35" pos:end="617:40">(<argument pos:start="617:36" pos:end="617:39"><expr pos:start="617:36" pos:end="617:39"><name pos:start="617:36" pos:end="617:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="617:41" pos:end="617:41">)</operator></expr>)</condition><block type="pseudo" pos:start="619:13" pos:end="619:24"><block_content pos:start="619:13" pos:end="619:24">

            <goto pos:start="619:13" pos:end="619:24">goto <name pos:start="619:18" pos:end="619:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="621:9" pos:end="621:40"><expr pos:start="621:9" pos:end="621:39"><name pos:start="621:9" pos:end="621:11">ret</name> <operator pos:start="621:13" pos:end="621:13">=</operator> <call pos:start="621:15" pos:end="621:39"><name pos:start="621:15" pos:end="621:23">get_errno</name><argument_list pos:start="621:24" pos:end="621:39">(<argument pos:start="621:25" pos:end="621:38"><expr pos:start="621:25" pos:end="621:38"><call pos:start="621:25" pos:end="621:38"><name pos:start="621:25" pos:end="621:29">chmod</name><argument_list pos:start="621:30" pos:end="621:38">(<argument pos:start="621:31" pos:end="621:31"><expr pos:start="621:31" pos:end="621:31"><name pos:start="621:31" pos:end="621:31">p</name></expr></argument>, <argument pos:start="621:34" pos:end="621:37"><expr pos:start="621:34" pos:end="621:37"><name pos:start="621:34" pos:end="621:37">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="623:9" pos:end="623:32"><expr pos:start="623:9" pos:end="623:31"><call pos:start="623:9" pos:end="623:31"><name pos:start="623:9" pos:end="623:19">unlock_user</name><argument_list pos:start="623:20" pos:end="623:31">(<argument pos:start="623:21" pos:end="623:21"><expr pos:start="623:21" pos:end="623:21"><name pos:start="623:21" pos:end="623:21">p</name></expr></argument>, <argument pos:start="623:24" pos:end="623:27"><expr pos:start="623:24" pos:end="623:27"><name pos:start="623:24" pos:end="623:27">arg1</name></expr></argument>, <argument pos:start="623:30" pos:end="623:30"><expr pos:start="623:30" pos:end="623:30"><literal type="number" pos:start="623:30" pos:end="623:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="625:9" pos:end="628:0">break;</break>

<cpp:ifdef pos:start="627:1" pos:end="627:22">#<cpp:directive pos:start="627:2" pos:end="627:6">ifdef</cpp:directive> <name pos:start="627:8" pos:end="627:22">TARGET_NR_break</name></cpp:ifdef>

    <case pos:start="629:5" pos:end="629:25">case <expr pos:start="629:10" pos:end="629:24"><name pos:start="629:10" pos:end="629:24">TARGET_NR_break</name></expr>:</case>

        <goto pos:start="631:9" pos:end="636:0">goto <name pos:start="631:14" pos:end="631:26">unimplemented</name>;</goto>

<cpp:endif pos:start="633:1" pos:end="633:6">#<cpp:directive pos:start="633:2" pos:end="633:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="635:1" pos:end="635:24">#<cpp:directive pos:start="635:2" pos:end="635:6">ifdef</cpp:directive> <name pos:start="635:8" pos:end="635:24">TARGET_NR_oldstat</name></cpp:ifdef>

    <case pos:start="637:5" pos:end="637:27">case <expr pos:start="637:10" pos:end="637:26"><name pos:start="637:10" pos:end="637:26">TARGET_NR_oldstat</name></expr>:</case>

        <goto pos:start="639:9" pos:end="642:0">goto <name pos:start="639:14" pos:end="639:26">unimplemented</name>;</goto>

<cpp:endif pos:start="641:1" pos:end="641:6">#<cpp:directive pos:start="641:2" pos:end="641:6">endif</cpp:directive></cpp:endif>

    <case pos:start="643:5" pos:end="643:25">case <expr pos:start="643:10" pos:end="643:24"><name pos:start="643:10" pos:end="643:24">TARGET_NR_lseek</name></expr>:</case>

        <expr_stmt pos:start="645:9" pos:end="645:49"><expr pos:start="645:9" pos:end="645:48"><name pos:start="645:9" pos:end="645:11">ret</name> <operator pos:start="645:13" pos:end="645:13">=</operator> <call pos:start="645:15" pos:end="645:48"><name pos:start="645:15" pos:end="645:23">get_errno</name><argument_list pos:start="645:24" pos:end="645:48">(<argument pos:start="645:25" pos:end="645:47"><expr pos:start="645:25" pos:end="645:47"><call pos:start="645:25" pos:end="645:47"><name pos:start="645:25" pos:end="645:29">lseek</name><argument_list pos:start="645:30" pos:end="645:47">(<argument pos:start="645:31" pos:end="645:34"><expr pos:start="645:31" pos:end="645:34"><name pos:start="645:31" pos:end="645:34">arg1</name></expr></argument>, <argument pos:start="645:37" pos:end="645:40"><expr pos:start="645:37" pos:end="645:40"><name pos:start="645:37" pos:end="645:40">arg2</name></expr></argument>, <argument pos:start="645:43" pos:end="645:46"><expr pos:start="645:43" pos:end="645:46"><name pos:start="645:43" pos:end="645:46">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="647:9" pos:end="650:0">break;</break>

<cpp:if pos:start="649:1" pos:end="649:55">#<cpp:directive pos:start="649:2" pos:end="649:3">if</cpp:directive> <expr pos:start="649:5" pos:end="649:55"><call pos:start="649:5" pos:end="649:30"><name pos:start="649:5" pos:end="649:11">defined</name><argument_list pos:start="649:12" pos:end="649:30">(<argument pos:start="649:13" pos:end="649:29"><expr pos:start="649:13" pos:end="649:29"><name pos:start="649:13" pos:end="649:29">TARGET_NR_getxpid</name></expr></argument>)</argument_list></call> <operator pos:start="649:32" pos:end="649:33">&amp;&amp;</operator> <call pos:start="649:35" pos:end="649:55"><name pos:start="649:35" pos:end="649:41">defined</name><argument_list pos:start="649:42" pos:end="649:55">(<argument pos:start="649:43" pos:end="649:54"><expr pos:start="649:43" pos:end="649:54"><name pos:start="649:43" pos:end="649:54">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="651:5" pos:end="651:24">/* Alpha specific */</comment>

    <case pos:start="653:5" pos:end="653:27">case <expr pos:start="653:10" pos:end="653:26"><name pos:start="653:10" pos:end="653:26">TARGET_NR_getxpid</name></expr>:</case>

        <expr_stmt pos:start="655:9" pos:end="655:58"><expr pos:start="655:9" pos:end="655:57"><operator pos:start="655:9" pos:end="655:9">(</operator><operator pos:start="655:10" pos:end="655:10">(</operator><name pos:start="655:11" pos:end="655:23">CPUAlphaState</name> <operator pos:start="655:25" pos:end="655:25">*</operator><operator pos:start="655:26" pos:end="655:26">)</operator><name pos:start="655:27" pos:end="655:33">cpu_env</name><operator pos:start="655:34" pos:end="655:34">)</operator><operator pos:start="655:35" pos:end="655:36">-&gt;</operator><name pos:start="655:37" pos:end="655:45"><name pos:start="655:37" pos:end="655:38">ir</name><index pos:start="655:39" pos:end="655:45">[<expr pos:start="655:40" pos:end="655:44"><name pos:start="655:40" pos:end="655:44">IR_A4</name></expr>]</index></name> <operator pos:start="655:47" pos:end="655:47">=</operator> <call pos:start="655:49" pos:end="655:57"><name pos:start="655:49" pos:end="655:55">getppid</name><argument_list pos:start="655:56" pos:end="655:57">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="657:9" pos:end="657:34"><expr pos:start="657:9" pos:end="657:33"><name pos:start="657:9" pos:end="657:11">ret</name> <operator pos:start="657:13" pos:end="657:13">=</operator> <call pos:start="657:15" pos:end="657:33"><name pos:start="657:15" pos:end="657:23">get_errno</name><argument_list pos:start="657:24" pos:end="657:33">(<argument pos:start="657:25" pos:end="657:32"><expr pos:start="657:25" pos:end="657:32"><call pos:start="657:25" pos:end="657:32"><name pos:start="657:25" pos:end="657:30">getpid</name><argument_list pos:start="657:31" pos:end="657:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="659:9" pos:end="664:0">break;</break>

<cpp:endif pos:start="661:1" pos:end="661:6">#<cpp:directive pos:start="661:2" pos:end="661:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="663:1" pos:end="663:23">#<cpp:directive pos:start="663:2" pos:end="663:6">ifdef</cpp:directive> <name pos:start="663:8" pos:end="663:23">TARGET_NR_getpid</name></cpp:ifdef>

    <case pos:start="665:5" pos:end="665:26">case <expr pos:start="665:10" pos:end="665:25"><name pos:start="665:10" pos:end="665:25">TARGET_NR_getpid</name></expr>:</case>

        <expr_stmt pos:start="667:9" pos:end="667:34"><expr pos:start="667:9" pos:end="667:33"><name pos:start="667:9" pos:end="667:11">ret</name> <operator pos:start="667:13" pos:end="667:13">=</operator> <call pos:start="667:15" pos:end="667:33"><name pos:start="667:15" pos:end="667:23">get_errno</name><argument_list pos:start="667:24" pos:end="667:33">(<argument pos:start="667:25" pos:end="667:32"><expr pos:start="667:25" pos:end="667:32"><call pos:start="667:25" pos:end="667:32"><name pos:start="667:25" pos:end="667:30">getpid</name><argument_list pos:start="667:31" pos:end="667:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="669:9" pos:end="672:0">break;</break>

<cpp:endif pos:start="671:1" pos:end="671:6">#<cpp:directive pos:start="671:2" pos:end="671:6">endif</cpp:directive></cpp:endif>

    <case pos:start="673:5" pos:end="673:25">case <expr pos:start="673:10" pos:end="673:24"><name pos:start="673:10" pos:end="673:24">TARGET_NR_mount</name></expr>:</case>

		<block pos:start="675:17" pos:end="722:0">{<block_content pos:start="679:25" pos:end="717:30">

			<comment type="block" pos:start="677:25" pos:end="677:60">/* need to look at the data field */</comment>

			<decl_stmt pos:start="679:25" pos:end="679:38"><decl pos:start="679:25" pos:end="679:32"><type pos:start="679:25" pos:end="679:30"><name pos:start="679:25" pos:end="679:28">void</name> <modifier pos:start="679:30" pos:end="679:30">*</modifier></type><name pos:start="679:31" pos:end="679:32">p2</name></decl>, <decl pos:start="679:35" pos:end="679:37"><type ref="prev" pos:start="679:25" pos:end="679:30"><modifier pos:start="679:35" pos:end="679:35">*</modifier></type><name pos:start="679:36" pos:end="679:37">p3</name></decl>;</decl_stmt>

			<expr_stmt pos:start="681:25" pos:end="681:51"><expr pos:start="681:25" pos:end="681:50"><name pos:start="681:25" pos:end="681:25">p</name> <operator pos:start="681:27" pos:end="681:27">=</operator> <call pos:start="681:29" pos:end="681:50"><name pos:start="681:29" pos:end="681:44">lock_user_string</name><argument_list pos:start="681:45" pos:end="681:50">(<argument pos:start="681:46" pos:end="681:49"><expr pos:start="681:46" pos:end="681:49"><name pos:start="681:46" pos:end="681:49">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="683:25" pos:end="683:52"><expr pos:start="683:25" pos:end="683:51"><name pos:start="683:25" pos:end="683:26">p2</name> <operator pos:start="683:28" pos:end="683:28">=</operator> <call pos:start="683:30" pos:end="683:51"><name pos:start="683:30" pos:end="683:45">lock_user_string</name><argument_list pos:start="683:46" pos:end="683:51">(<argument pos:start="683:47" pos:end="683:50"><expr pos:start="683:47" pos:end="683:50"><name pos:start="683:47" pos:end="683:50">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="685:25" pos:end="685:52"><expr pos:start="685:25" pos:end="685:51"><name pos:start="685:25" pos:end="685:26">p3</name> <operator pos:start="685:28" pos:end="685:28">=</operator> <call pos:start="685:30" pos:end="685:51"><name pos:start="685:30" pos:end="685:45">lock_user_string</name><argument_list pos:start="685:46" pos:end="685:51">(<argument pos:start="685:47" pos:end="685:50"><expr pos:start="685:47" pos:end="685:50"><name pos:start="685:47" pos:end="685:50">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="687:25" pos:end="709:25"><if pos:start="687:25" pos:end="689:49">if <condition pos:start="687:28" pos:end="687:45">(<expr pos:start="687:29" pos:end="687:44"><operator pos:start="687:29" pos:end="687:29">!</operator><name pos:start="687:30" pos:end="687:30">p</name> <operator pos:start="687:32" pos:end="687:33">||</operator> <operator pos:start="687:35" pos:end="687:35">!</operator><name pos:start="687:36" pos:end="687:37">p2</name> <operator pos:start="687:39" pos:end="687:40">||</operator> <operator pos:start="687:42" pos:end="687:42">!</operator><name pos:start="687:43" pos:end="687:44">p3</name></expr>)</condition><block type="pseudo" pos:start="689:29" pos:end="689:49"><block_content pos:start="689:29" pos:end="689:49">

                            <expr_stmt pos:start="689:29" pos:end="689:49"><expr pos:start="689:29" pos:end="689:48"><name pos:start="689:29" pos:end="689:31">ret</name> <operator pos:start="689:33" pos:end="689:33">=</operator> <operator pos:start="689:35" pos:end="689:35">-</operator><name pos:start="689:36" pos:end="689:48">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="691:25" pos:end="709:25">else <block pos:start="691:30" pos:end="709:25">{<block_content pos:start="701:29" pos:end="707:98">

                            <comment type="block" pos:start="693:29" pos:end="699:31">/* FIXME - arg5 should be locked, but it isn't clear how to

                             * do that since it's not guaranteed to be a NULL-terminated

                             * string.

                             */</comment>

                            <if_stmt pos:start="701:29" pos:end="707:98"><if pos:start="701:29" pos:end="703:93">if <condition pos:start="701:32" pos:end="701:41">( <expr pos:start="701:34" pos:end="701:39"><operator pos:start="701:34" pos:end="701:34">!</operator> <name pos:start="701:36" pos:end="701:39">arg5</name></expr> )</condition><block type="pseudo" pos:start="703:33" pos:end="703:93"><block_content pos:start="703:33" pos:end="703:93">

                                <expr_stmt pos:start="703:33" pos:end="703:93"><expr pos:start="703:33" pos:end="703:92"><name pos:start="703:33" pos:end="703:35">ret</name> <operator pos:start="703:37" pos:end="703:37">=</operator> <call pos:start="703:39" pos:end="703:92"><name pos:start="703:39" pos:end="703:47">get_errno</name><argument_list pos:start="703:48" pos:end="703:92">(<argument pos:start="703:49" pos:end="703:91"><expr pos:start="703:49" pos:end="703:91"><call pos:start="703:49" pos:end="703:91"><name pos:start="703:49" pos:end="703:53">mount</name><argument_list pos:start="703:54" pos:end="703:91">(<argument pos:start="703:55" pos:end="703:55"><expr pos:start="703:55" pos:end="703:55"><name pos:start="703:55" pos:end="703:55">p</name></expr></argument>, <argument pos:start="703:58" pos:end="703:59"><expr pos:start="703:58" pos:end="703:59"><name pos:start="703:58" pos:end="703:59">p2</name></expr></argument>, <argument pos:start="703:62" pos:end="703:63"><expr pos:start="703:62" pos:end="703:63"><name pos:start="703:62" pos:end="703:63">p3</name></expr></argument>, <argument pos:start="703:66" pos:end="703:84"><expr pos:start="703:66" pos:end="703:84"><operator pos:start="703:66" pos:end="703:66">(</operator><name pos:start="703:67" pos:end="703:74">unsigned</name> <name pos:start="703:76" pos:end="703:79">long</name><operator pos:start="703:80" pos:end="703:80">)</operator><name pos:start="703:81" pos:end="703:84">arg4</name></expr></argument>, <argument pos:start="703:87" pos:end="703:90"><expr pos:start="703:87" pos:end="703:90"><name pos:start="703:87" pos:end="703:90">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="705:29" pos:end="707:98">else<block type="pseudo" pos:start="707:33" pos:end="707:98"><block_content pos:start="707:33" pos:end="707:98">

                                <expr_stmt pos:start="707:33" pos:end="707:98"><expr pos:start="707:33" pos:end="707:97"><name pos:start="707:33" pos:end="707:35">ret</name> <operator pos:start="707:37" pos:end="707:37">=</operator> <call pos:start="707:39" pos:end="707:97"><name pos:start="707:39" pos:end="707:47">get_errno</name><argument_list pos:start="707:48" pos:end="707:97">(<argument pos:start="707:49" pos:end="707:96"><expr pos:start="707:49" pos:end="707:96"><call pos:start="707:49" pos:end="707:96"><name pos:start="707:49" pos:end="707:53">mount</name><argument_list pos:start="707:54" pos:end="707:96">(<argument pos:start="707:55" pos:end="707:55"><expr pos:start="707:55" pos:end="707:55"><name pos:start="707:55" pos:end="707:55">p</name></expr></argument>, <argument pos:start="707:58" pos:end="707:59"><expr pos:start="707:58" pos:end="707:59"><name pos:start="707:58" pos:end="707:59">p2</name></expr></argument>, <argument pos:start="707:62" pos:end="707:63"><expr pos:start="707:62" pos:end="707:63"><name pos:start="707:62" pos:end="707:63">p3</name></expr></argument>, <argument pos:start="707:66" pos:end="707:84"><expr pos:start="707:66" pos:end="707:84"><operator pos:start="707:66" pos:end="707:66">(</operator><name pos:start="707:67" pos:end="707:74">unsigned</name> <name pos:start="707:76" pos:end="707:79">long</name><operator pos:start="707:80" pos:end="707:80">)</operator><name pos:start="707:81" pos:end="707:84">arg4</name></expr></argument>, <argument pos:start="707:87" pos:end="707:95"><expr pos:start="707:87" pos:end="707:95"><call pos:start="707:87" pos:end="707:95"><name pos:start="707:87" pos:end="707:89">g2h</name><argument_list pos:start="707:90" pos:end="707:95">(<argument pos:start="707:91" pos:end="707:94"><expr pos:start="707:91" pos:end="707:94"><name pos:start="707:91" pos:end="707:94">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="711:25" pos:end="711:48"><expr pos:start="711:25" pos:end="711:47"><call pos:start="711:25" pos:end="711:47"><name pos:start="711:25" pos:end="711:35">unlock_user</name><argument_list pos:start="711:36" pos:end="711:47">(<argument pos:start="711:37" pos:end="711:37"><expr pos:start="711:37" pos:end="711:37"><name pos:start="711:37" pos:end="711:37">p</name></expr></argument>, <argument pos:start="711:40" pos:end="711:43"><expr pos:start="711:40" pos:end="711:43"><name pos:start="711:40" pos:end="711:43">arg1</name></expr></argument>, <argument pos:start="711:46" pos:end="711:46"><expr pos:start="711:46" pos:end="711:46"><literal type="number" pos:start="711:46" pos:end="711:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="713:25" pos:end="713:49"><expr pos:start="713:25" pos:end="713:48"><call pos:start="713:25" pos:end="713:48"><name pos:start="713:25" pos:end="713:35">unlock_user</name><argument_list pos:start="713:36" pos:end="713:48">(<argument pos:start="713:37" pos:end="713:38"><expr pos:start="713:37" pos:end="713:38"><name pos:start="713:37" pos:end="713:38">p2</name></expr></argument>, <argument pos:start="713:41" pos:end="713:44"><expr pos:start="713:41" pos:end="713:44"><name pos:start="713:41" pos:end="713:44">arg2</name></expr></argument>, <argument pos:start="713:47" pos:end="713:47"><expr pos:start="713:47" pos:end="713:47"><literal type="number" pos:start="713:47" pos:end="713:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="715:25" pos:end="715:49"><expr pos:start="715:25" pos:end="715:48"><call pos:start="715:25" pos:end="715:48"><name pos:start="715:25" pos:end="715:35">unlock_user</name><argument_list pos:start="715:36" pos:end="715:48">(<argument pos:start="715:37" pos:end="715:38"><expr pos:start="715:37" pos:end="715:38"><name pos:start="715:37" pos:end="715:38">p3</name></expr></argument>, <argument pos:start="715:41" pos:end="715:44"><expr pos:start="715:41" pos:end="715:44"><name pos:start="715:41" pos:end="715:44">arg3</name></expr></argument>, <argument pos:start="715:47" pos:end="715:47"><expr pos:start="715:47" pos:end="715:47"><literal type="number" pos:start="715:47" pos:end="715:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="717:25" pos:end="717:30">break;</break>

		</block_content>}</block>

<cpp:ifdef pos:start="721:1" pos:end="721:23">#<cpp:directive pos:start="721:2" pos:end="721:6">ifdef</cpp:directive> <name pos:start="721:8" pos:end="721:23">TARGET_NR_umount</name></cpp:ifdef>

    <case pos:start="723:5" pos:end="723:26">case <expr pos:start="723:10" pos:end="723:25"><name pos:start="723:10" pos:end="723:25">TARGET_NR_umount</name></expr>:</case>

        <if_stmt pos:start="725:9" pos:end="727:24"><if pos:start="725:9" pos:end="727:24">if <condition pos:start="725:12" pos:end="725:42">(<expr pos:start="725:13" pos:end="725:41"><operator pos:start="725:13" pos:end="725:13">!</operator><operator pos:start="725:14" pos:end="725:14">(</operator><name pos:start="725:15" pos:end="725:15">p</name> <operator pos:start="725:17" pos:end="725:17">=</operator> <call pos:start="725:19" pos:end="725:40"><name pos:start="725:19" pos:end="725:34">lock_user_string</name><argument_list pos:start="725:35" pos:end="725:40">(<argument pos:start="725:36" pos:end="725:39"><expr pos:start="725:36" pos:end="725:39"><name pos:start="725:36" pos:end="725:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="725:41" pos:end="725:41">)</operator></expr>)</condition><block type="pseudo" pos:start="727:13" pos:end="727:24"><block_content pos:start="727:13" pos:end="727:24">

            <goto pos:start="727:13" pos:end="727:24">goto <name pos:start="727:18" pos:end="727:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="729:9" pos:end="729:35"><expr pos:start="729:9" pos:end="729:34"><name pos:start="729:9" pos:end="729:11">ret</name> <operator pos:start="729:13" pos:end="729:13">=</operator> <call pos:start="729:15" pos:end="729:34"><name pos:start="729:15" pos:end="729:23">get_errno</name><argument_list pos:start="729:24" pos:end="729:34">(<argument pos:start="729:25" pos:end="729:33"><expr pos:start="729:25" pos:end="729:33"><call pos:start="729:25" pos:end="729:33"><name pos:start="729:25" pos:end="729:30">umount</name><argument_list pos:start="729:31" pos:end="729:33">(<argument pos:start="729:32" pos:end="729:32"><expr pos:start="729:32" pos:end="729:32"><name pos:start="729:32" pos:end="729:32">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="731:9" pos:end="731:32"><expr pos:start="731:9" pos:end="731:31"><call pos:start="731:9" pos:end="731:31"><name pos:start="731:9" pos:end="731:19">unlock_user</name><argument_list pos:start="731:20" pos:end="731:31">(<argument pos:start="731:21" pos:end="731:21"><expr pos:start="731:21" pos:end="731:21"><name pos:start="731:21" pos:end="731:21">p</name></expr></argument>, <argument pos:start="731:24" pos:end="731:27"><expr pos:start="731:24" pos:end="731:27"><name pos:start="731:24" pos:end="731:27">arg1</name></expr></argument>, <argument pos:start="731:30" pos:end="731:30"><expr pos:start="731:30" pos:end="731:30"><literal type="number" pos:start="731:30" pos:end="731:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="733:9" pos:end="738:0">break;</break>

<cpp:endif pos:start="735:1" pos:end="735:6">#<cpp:directive pos:start="735:2" pos:end="735:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="737:1" pos:end="737:22">#<cpp:directive pos:start="737:2" pos:end="737:6">ifdef</cpp:directive> <name pos:start="737:8" pos:end="737:22">TARGET_NR_stime</name></cpp:ifdef> <comment type="block" pos:start="737:24" pos:end="737:41">/* not on alpha */</comment>

    <case pos:start="739:5" pos:end="739:25">case <expr pos:start="739:10" pos:end="739:24"><name pos:start="739:10" pos:end="739:24">TARGET_NR_stime</name></expr>:</case>

        <block pos:start="741:9" pos:end="751:9">{<block_content pos:start="743:13" pos:end="749:47">

            <decl_stmt pos:start="743:13" pos:end="743:29"><decl pos:start="743:13" pos:end="743:28"><type pos:start="743:13" pos:end="743:18"><name pos:start="743:13" pos:end="743:18">time_t</name></type> <name pos:start="743:20" pos:end="743:28">host_time</name></decl>;</decl_stmt>

            <if_stmt pos:start="745:13" pos:end="747:28"><if pos:start="745:13" pos:end="747:28">if <condition pos:start="745:16" pos:end="745:46">(<expr pos:start="745:17" pos:end="745:45"><call pos:start="745:17" pos:end="745:45"><name pos:start="745:17" pos:end="745:28">get_user_sal</name><argument_list pos:start="745:29" pos:end="745:45">(<argument pos:start="745:30" pos:end="745:38"><expr pos:start="745:30" pos:end="745:38"><name pos:start="745:30" pos:end="745:38">host_time</name></expr></argument>, <argument pos:start="745:41" pos:end="745:44"><expr pos:start="745:41" pos:end="745:44"><name pos:start="745:41" pos:end="745:44">arg1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="747:17" pos:end="747:28"><block_content pos:start="747:17" pos:end="747:28">

                <goto pos:start="747:17" pos:end="747:28">goto <name pos:start="747:22" pos:end="747:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="749:13" pos:end="749:47"><expr pos:start="749:13" pos:end="749:46"><name pos:start="749:13" pos:end="749:15">ret</name> <operator pos:start="749:17" pos:end="749:17">=</operator> <call pos:start="749:19" pos:end="749:46"><name pos:start="749:19" pos:end="749:27">get_errno</name><argument_list pos:start="749:28" pos:end="749:46">(<argument pos:start="749:29" pos:end="749:45"><expr pos:start="749:29" pos:end="749:45"><call pos:start="749:29" pos:end="749:45"><name pos:start="749:29" pos:end="749:33">stime</name><argument_list pos:start="749:34" pos:end="749:45">(<argument pos:start="749:35" pos:end="749:44"><expr pos:start="749:35" pos:end="749:44"><operator pos:start="749:35" pos:end="749:35">&amp;</operator><name pos:start="749:36" pos:end="749:44">host_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="753:9" pos:end="756:0">break;</break>

<cpp:endif pos:start="755:1" pos:end="755:6">#<cpp:directive pos:start="755:2" pos:end="755:6">endif</cpp:directive></cpp:endif>

    <case pos:start="757:5" pos:end="757:26">case <expr pos:start="757:10" pos:end="757:25"><name pos:start="757:10" pos:end="757:25">TARGET_NR_ptrace</name></expr>:</case>

        <goto pos:start="759:9" pos:end="762:0">goto <name pos:start="759:14" pos:end="759:26">unimplemented</name>;</goto>

<cpp:ifdef pos:start="761:1" pos:end="761:22">#<cpp:directive pos:start="761:2" pos:end="761:6">ifdef</cpp:directive> <name pos:start="761:8" pos:end="761:22">TARGET_NR_alarm</name></cpp:ifdef> <comment type="block" pos:start="761:24" pos:end="761:41">/* not on alpha */</comment>

    <case pos:start="763:5" pos:end="763:25">case <expr pos:start="763:10" pos:end="763:24"><name pos:start="763:10" pos:end="763:24">TARGET_NR_alarm</name></expr>:</case>

        <expr_stmt pos:start="765:9" pos:end="765:26"><expr pos:start="765:9" pos:end="765:25"><name pos:start="765:9" pos:end="765:11">ret</name> <operator pos:start="765:13" pos:end="765:13">=</operator> <call pos:start="765:15" pos:end="765:25"><name pos:start="765:15" pos:end="765:19">alarm</name><argument_list pos:start="765:20" pos:end="765:25">(<argument pos:start="765:21" pos:end="765:24"><expr pos:start="765:21" pos:end="765:24"><name pos:start="765:21" pos:end="765:24">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="767:9" pos:end="772:0">break;</break>

<cpp:endif pos:start="769:1" pos:end="769:6">#<cpp:directive pos:start="769:2" pos:end="769:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="771:1" pos:end="771:25">#<cpp:directive pos:start="771:2" pos:end="771:6">ifdef</cpp:directive> <name pos:start="771:8" pos:end="771:25">TARGET_NR_oldfstat</name></cpp:ifdef>

    <case pos:start="773:5" pos:end="773:28">case <expr pos:start="773:10" pos:end="773:27"><name pos:start="773:10" pos:end="773:27">TARGET_NR_oldfstat</name></expr>:</case>

        <goto pos:start="775:9" pos:end="780:0">goto <name pos:start="775:14" pos:end="775:26">unimplemented</name>;</goto>

<cpp:endif pos:start="777:1" pos:end="777:6">#<cpp:directive pos:start="777:2" pos:end="777:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="779:1" pos:end="779:22">#<cpp:directive pos:start="779:2" pos:end="779:6">ifdef</cpp:directive> <name pos:start="779:8" pos:end="779:22">TARGET_NR_pause</name></cpp:ifdef> <comment type="block" pos:start="779:24" pos:end="779:41">/* not on alpha */</comment>

    <case pos:start="781:5" pos:end="781:25">case <expr pos:start="781:10" pos:end="781:24"><name pos:start="781:10" pos:end="781:24">TARGET_NR_pause</name></expr>:</case>

        <expr_stmt pos:start="783:9" pos:end="783:33"><expr pos:start="783:9" pos:end="783:32"><name pos:start="783:9" pos:end="783:11">ret</name> <operator pos:start="783:13" pos:end="783:13">=</operator> <call pos:start="783:15" pos:end="783:32"><name pos:start="783:15" pos:end="783:23">get_errno</name><argument_list pos:start="783:24" pos:end="783:32">(<argument pos:start="783:25" pos:end="783:31"><expr pos:start="783:25" pos:end="783:31"><call pos:start="783:25" pos:end="783:31"><name pos:start="783:25" pos:end="783:29">pause</name><argument_list pos:start="783:30" pos:end="783:31">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="785:9" pos:end="790:0">break;</break>

<cpp:endif pos:start="787:1" pos:end="787:6">#<cpp:directive pos:start="787:2" pos:end="787:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="789:1" pos:end="789:22">#<cpp:directive pos:start="789:2" pos:end="789:6">ifdef</cpp:directive> <name pos:start="789:8" pos:end="789:22">TARGET_NR_utime</name></cpp:ifdef>

    <case pos:start="791:5" pos:end="791:25">case <expr pos:start="791:10" pos:end="791:24"><name pos:start="791:10" pos:end="791:24">TARGET_NR_utime</name></expr>:</case>

        <block pos:start="793:9" pos:end="827:9">{<block_content pos:start="795:13" pos:end="825:36">

            <decl_stmt pos:start="795:13" pos:end="795:44"><decl pos:start="795:13" pos:end="795:31"><type pos:start="795:13" pos:end="795:26"><name pos:start="795:13" pos:end="795:26"><name pos:start="795:13" pos:end="795:18">struct</name> <name pos:start="795:20" pos:end="795:26">utimbuf</name></name></type> <name pos:start="795:28" pos:end="795:31">tbuf</name></decl>, <decl pos:start="795:34" pos:end="795:43"><type ref="prev" pos:start="795:13" pos:end="795:26"><modifier pos:start="795:34" pos:end="795:34">*</modifier></type><name pos:start="795:35" pos:end="795:43">host_tbuf</name></decl>;</decl_stmt>

            <decl_stmt pos:start="797:13" pos:end="797:47"><decl pos:start="797:13" pos:end="797:46"><type pos:start="797:13" pos:end="797:35"><name pos:start="797:13" pos:end="797:33"><name pos:start="797:13" pos:end="797:18">struct</name> <name pos:start="797:20" pos:end="797:33">target_utimbuf</name></name> <modifier pos:start="797:35" pos:end="797:35">*</modifier></type><name pos:start="797:36" pos:end="797:46">target_tbuf</name></decl>;</decl_stmt>

            <if_stmt pos:start="799:13" pos:end="817:13"><if pos:start="799:13" pos:end="813:13">if <condition pos:start="799:16" pos:end="799:21">(<expr pos:start="799:17" pos:end="799:20"><name pos:start="799:17" pos:end="799:20">arg2</name></expr>)</condition> <block pos:start="799:23" pos:end="813:13">{<block_content pos:start="801:17" pos:end="811:34">

                <if_stmt pos:start="801:17" pos:end="803:32"><if pos:start="801:17" pos:end="803:32">if <condition pos:start="801:20" pos:end="801:73">(<expr pos:start="801:21" pos:end="801:72"><operator pos:start="801:21" pos:end="801:21">!</operator><call pos:start="801:22" pos:end="801:72"><name pos:start="801:22" pos:end="801:37">lock_user_struct</name><argument_list pos:start="801:38" pos:end="801:72">(<argument pos:start="801:39" pos:end="801:49"><expr pos:start="801:39" pos:end="801:49"><name pos:start="801:39" pos:end="801:49">VERIFY_READ</name></expr></argument>, <argument pos:start="801:52" pos:end="801:62"><expr pos:start="801:52" pos:end="801:62"><name pos:start="801:52" pos:end="801:62">target_tbuf</name></expr></argument>, <argument pos:start="801:65" pos:end="801:68"><expr pos:start="801:65" pos:end="801:68"><name pos:start="801:65" pos:end="801:68">arg2</name></expr></argument>, <argument pos:start="801:71" pos:end="801:71"><expr pos:start="801:71" pos:end="801:71"><literal type="number" pos:start="801:71" pos:end="801:71">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="803:21" pos:end="803:32"><block_content pos:start="803:21" pos:end="803:32">

                    <goto pos:start="803:21" pos:end="803:32">goto <name pos:start="803:26" pos:end="803:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="805:17" pos:end="805:59"><expr pos:start="805:17" pos:end="805:58"><name pos:start="805:17" pos:end="805:27"><name pos:start="805:17" pos:end="805:20">tbuf</name><operator pos:start="805:21" pos:end="805:21">.</operator><name pos:start="805:22" pos:end="805:27">actime</name></name> <operator pos:start="805:29" pos:end="805:29">=</operator> <call pos:start="805:31" pos:end="805:58"><name pos:start="805:31" pos:end="805:37">tswapal</name><argument_list pos:start="805:38" pos:end="805:58">(<argument pos:start="805:39" pos:end="805:57"><expr pos:start="805:39" pos:end="805:57"><name pos:start="805:39" pos:end="805:57"><name pos:start="805:39" pos:end="805:49">target_tbuf</name><operator pos:start="805:50" pos:end="805:51">-&gt;</operator><name pos:start="805:52" pos:end="805:57">actime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="807:17" pos:end="807:61"><expr pos:start="807:17" pos:end="807:60"><name pos:start="807:17" pos:end="807:28"><name pos:start="807:17" pos:end="807:20">tbuf</name><operator pos:start="807:21" pos:end="807:21">.</operator><name pos:start="807:22" pos:end="807:28">modtime</name></name> <operator pos:start="807:30" pos:end="807:30">=</operator> <call pos:start="807:32" pos:end="807:60"><name pos:start="807:32" pos:end="807:38">tswapal</name><argument_list pos:start="807:39" pos:end="807:60">(<argument pos:start="807:40" pos:end="807:59"><expr pos:start="807:40" pos:end="807:59"><name pos:start="807:40" pos:end="807:59"><name pos:start="807:40" pos:end="807:50">target_tbuf</name><operator pos:start="807:51" pos:end="807:52">-&gt;</operator><name pos:start="807:53" pos:end="807:59">modtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="809:17" pos:end="809:57"><expr pos:start="809:17" pos:end="809:56"><call pos:start="809:17" pos:end="809:56"><name pos:start="809:17" pos:end="809:34">unlock_user_struct</name><argument_list pos:start="809:35" pos:end="809:56">(<argument pos:start="809:36" pos:end="809:46"><expr pos:start="809:36" pos:end="809:46"><name pos:start="809:36" pos:end="809:46">target_tbuf</name></expr></argument>, <argument pos:start="809:49" pos:end="809:52"><expr pos:start="809:49" pos:end="809:52"><name pos:start="809:49" pos:end="809:52">arg2</name></expr></argument>, <argument pos:start="809:55" pos:end="809:55"><expr pos:start="809:55" pos:end="809:55"><literal type="number" pos:start="809:55" pos:end="809:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="811:17" pos:end="811:34"><expr pos:start="811:17" pos:end="811:33"><name pos:start="811:17" pos:end="811:25">host_tbuf</name> <operator pos:start="811:27" pos:end="811:27">=</operator> <operator pos:start="811:29" pos:end="811:29">&amp;</operator><name pos:start="811:30" pos:end="811:33">tbuf</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="813:15" pos:end="817:13">else <block pos:start="813:20" pos:end="817:13">{<block_content pos:start="815:17" pos:end="815:33">

                <expr_stmt pos:start="815:17" pos:end="815:33"><expr pos:start="815:17" pos:end="815:32"><name pos:start="815:17" pos:end="815:25">host_tbuf</name> <operator pos:start="815:27" pos:end="815:27">=</operator> <name pos:start="815:29" pos:end="815:32">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="819:13" pos:end="821:28"><if pos:start="819:13" pos:end="821:28">if <condition pos:start="819:16" pos:end="819:46">(<expr pos:start="819:17" pos:end="819:45"><operator pos:start="819:17" pos:end="819:17">!</operator><operator pos:start="819:18" pos:end="819:18">(</operator><name pos:start="819:19" pos:end="819:19">p</name> <operator pos:start="819:21" pos:end="819:21">=</operator> <call pos:start="819:23" pos:end="819:44"><name pos:start="819:23" pos:end="819:38">lock_user_string</name><argument_list pos:start="819:39" pos:end="819:44">(<argument pos:start="819:40" pos:end="819:43"><expr pos:start="819:40" pos:end="819:43"><name pos:start="819:40" pos:end="819:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="819:45" pos:end="819:45">)</operator></expr>)</condition><block type="pseudo" pos:start="821:17" pos:end="821:28"><block_content pos:start="821:17" pos:end="821:28">

                <goto pos:start="821:17" pos:end="821:28">goto <name pos:start="821:22" pos:end="821:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="823:13" pos:end="823:49"><expr pos:start="823:13" pos:end="823:48"><name pos:start="823:13" pos:end="823:15">ret</name> <operator pos:start="823:17" pos:end="823:17">=</operator> <call pos:start="823:19" pos:end="823:48"><name pos:start="823:19" pos:end="823:27">get_errno</name><argument_list pos:start="823:28" pos:end="823:48">(<argument pos:start="823:29" pos:end="823:47"><expr pos:start="823:29" pos:end="823:47"><call pos:start="823:29" pos:end="823:47"><name pos:start="823:29" pos:end="823:33">utime</name><argument_list pos:start="823:34" pos:end="823:47">(<argument pos:start="823:35" pos:end="823:35"><expr pos:start="823:35" pos:end="823:35"><name pos:start="823:35" pos:end="823:35">p</name></expr></argument>, <argument pos:start="823:38" pos:end="823:46"><expr pos:start="823:38" pos:end="823:46"><name pos:start="823:38" pos:end="823:46">host_tbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="825:13" pos:end="825:36"><expr pos:start="825:13" pos:end="825:35"><call pos:start="825:13" pos:end="825:35"><name pos:start="825:13" pos:end="825:23">unlock_user</name><argument_list pos:start="825:24" pos:end="825:35">(<argument pos:start="825:25" pos:end="825:25"><expr pos:start="825:25" pos:end="825:25"><name pos:start="825:25" pos:end="825:25">p</name></expr></argument>, <argument pos:start="825:28" pos:end="825:31"><expr pos:start="825:28" pos:end="825:31"><name pos:start="825:28" pos:end="825:31">arg1</name></expr></argument>, <argument pos:start="825:34" pos:end="825:34"><expr pos:start="825:34" pos:end="825:34"><literal type="number" pos:start="825:34" pos:end="825:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="829:9" pos:end="832:0">break;</break>

<cpp:endif pos:start="831:1" pos:end="831:6">#<cpp:directive pos:start="831:2" pos:end="831:6">endif</cpp:directive></cpp:endif>

    <case pos:start="833:5" pos:end="833:26">case <expr pos:start="833:10" pos:end="833:25"><name pos:start="833:10" pos:end="833:25">TARGET_NR_utimes</name></expr>:</case>

        <block pos:start="835:9" pos:end="865:9">{<block_content pos:start="837:13" pos:end="863:36">

            <decl_stmt pos:start="837:13" pos:end="837:39"><decl pos:start="837:13" pos:end="837:31"><type pos:start="837:13" pos:end="837:28"><name pos:start="837:13" pos:end="837:26"><name pos:start="837:13" pos:end="837:18">struct</name> <name pos:start="837:20" pos:end="837:26">timeval</name></name> <modifier pos:start="837:28" pos:end="837:28">*</modifier></type><name pos:start="837:29" pos:end="837:31">tvp</name></decl>, <decl pos:start="837:34" pos:end="837:38"><type ref="prev" pos:start="837:13" pos:end="837:28"/><name pos:start="837:34" pos:end="837:38"><name pos:start="837:34" pos:end="837:35">tv</name><index pos:start="837:36" pos:end="837:38">[<expr pos:start="837:37" pos:end="837:37"><literal type="number" pos:start="837:37" pos:end="837:37">2</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt pos:start="839:13" pos:end="855:13"><if pos:start="839:13" pos:end="851:13">if <condition pos:start="839:16" pos:end="839:21">(<expr pos:start="839:17" pos:end="839:20"><name pos:start="839:17" pos:end="839:20">arg2</name></expr>)</condition> <block pos:start="839:23" pos:end="851:13">{<block_content pos:start="841:17" pos:end="849:25">

                <if_stmt pos:start="841:17" pos:end="847:32"><if pos:start="841:17" pos:end="847:32">if <condition pos:start="841:20" pos:end="845:84">(<expr pos:start="841:21" pos:end="845:83"><call pos:start="841:21" pos:end="841:56"><name pos:start="841:21" pos:end="841:42">copy_from_user_timeval</name><argument_list pos:start="841:43" pos:end="841:56">(<argument pos:start="841:44" pos:end="841:49"><expr pos:start="841:44" pos:end="841:49"><operator pos:start="841:44" pos:end="841:44">&amp;</operator><name pos:start="841:45" pos:end="841:49"><name pos:start="841:45" pos:end="841:46">tv</name><index pos:start="841:47" pos:end="841:49">[<expr pos:start="841:48" pos:end="841:48"><literal type="number" pos:start="841:48" pos:end="841:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="841:52" pos:end="841:55"><expr pos:start="841:52" pos:end="841:55"><name pos:start="841:52" pos:end="841:55">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="843:21" pos:end="843:22">||</operator> <call pos:start="843:24" pos:end="845:83"><name pos:start="843:24" pos:end="843:45">copy_from_user_timeval</name><argument_list pos:start="843:46" pos:end="845:83">(<argument pos:start="843:47" pos:end="843:52"><expr pos:start="843:47" pos:end="843:52"><operator pos:start="843:47" pos:end="843:47">&amp;</operator><name pos:start="843:48" pos:end="843:52"><name pos:start="843:48" pos:end="843:49">tv</name><index pos:start="843:50" pos:end="843:52">[<expr pos:start="843:51" pos:end="843:51"><literal type="number" pos:start="843:51" pos:end="843:51">1</literal></expr>]</index></name></expr></argument>,

                                              <argument pos:start="845:47" pos:end="845:82"><expr pos:start="845:47" pos:end="845:82"><name pos:start="845:47" pos:end="845:50">arg2</name> <operator pos:start="845:52" pos:end="845:52">+</operator> <sizeof pos:start="845:54" pos:end="845:82">sizeof<argument_list pos:start="845:60" pos:end="845:82">(<argument pos:start="845:61" pos:end="845:81"><expr pos:start="845:61" pos:end="845:81">struct <name pos:start="845:68" pos:end="845:81">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="847:21" pos:end="847:32"><block_content pos:start="847:21" pos:end="847:32">

                    <goto pos:start="847:21" pos:end="847:32">goto <name pos:start="847:26" pos:end="847:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="849:17" pos:end="849:25"><expr pos:start="849:17" pos:end="849:24"><name pos:start="849:17" pos:end="849:19">tvp</name> <operator pos:start="849:21" pos:end="849:21">=</operator> <name pos:start="849:23" pos:end="849:24">tv</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="851:15" pos:end="855:13">else <block pos:start="851:20" pos:end="855:13">{<block_content pos:start="853:17" pos:end="853:27">

                <expr_stmt pos:start="853:17" pos:end="853:27"><expr pos:start="853:17" pos:end="853:26"><name pos:start="853:17" pos:end="853:19">tvp</name> <operator pos:start="853:21" pos:end="853:21">=</operator> <name pos:start="853:23" pos:end="853:26">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="857:13" pos:end="859:28"><if pos:start="857:13" pos:end="859:28">if <condition pos:start="857:16" pos:end="857:46">(<expr pos:start="857:17" pos:end="857:45"><operator pos:start="857:17" pos:end="857:17">!</operator><operator pos:start="857:18" pos:end="857:18">(</operator><name pos:start="857:19" pos:end="857:19">p</name> <operator pos:start="857:21" pos:end="857:21">=</operator> <call pos:start="857:23" pos:end="857:44"><name pos:start="857:23" pos:end="857:38">lock_user_string</name><argument_list pos:start="857:39" pos:end="857:44">(<argument pos:start="857:40" pos:end="857:43"><expr pos:start="857:40" pos:end="857:43"><name pos:start="857:40" pos:end="857:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="857:45" pos:end="857:45">)</operator></expr>)</condition><block type="pseudo" pos:start="859:17" pos:end="859:28"><block_content pos:start="859:17" pos:end="859:28">

                <goto pos:start="859:17" pos:end="859:28">goto <name pos:start="859:22" pos:end="859:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="861:13" pos:end="861:44"><expr pos:start="861:13" pos:end="861:43"><name pos:start="861:13" pos:end="861:15">ret</name> <operator pos:start="861:17" pos:end="861:17">=</operator> <call pos:start="861:19" pos:end="861:43"><name pos:start="861:19" pos:end="861:27">get_errno</name><argument_list pos:start="861:28" pos:end="861:43">(<argument pos:start="861:29" pos:end="861:42"><expr pos:start="861:29" pos:end="861:42"><call pos:start="861:29" pos:end="861:42"><name pos:start="861:29" pos:end="861:34">utimes</name><argument_list pos:start="861:35" pos:end="861:42">(<argument pos:start="861:36" pos:end="861:36"><expr pos:start="861:36" pos:end="861:36"><name pos:start="861:36" pos:end="861:36">p</name></expr></argument>, <argument pos:start="861:39" pos:end="861:41"><expr pos:start="861:39" pos:end="861:41"><name pos:start="861:39" pos:end="861:41">tvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="863:13" pos:end="863:36"><expr pos:start="863:13" pos:end="863:35"><call pos:start="863:13" pos:end="863:35"><name pos:start="863:13" pos:end="863:23">unlock_user</name><argument_list pos:start="863:24" pos:end="863:35">(<argument pos:start="863:25" pos:end="863:25"><expr pos:start="863:25" pos:end="863:25"><name pos:start="863:25" pos:end="863:25">p</name></expr></argument>, <argument pos:start="863:28" pos:end="863:31"><expr pos:start="863:28" pos:end="863:31"><name pos:start="863:28" pos:end="863:31">arg1</name></expr></argument>, <argument pos:start="863:34" pos:end="863:34"><expr pos:start="863:34" pos:end="863:34"><literal type="number" pos:start="863:34" pos:end="863:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="867:9" pos:end="870:0">break;</break>

<cpp:if pos:start="869:1" pos:end="869:59">#<cpp:directive pos:start="869:2" pos:end="869:3">if</cpp:directive> <expr pos:start="869:5" pos:end="869:59"><call pos:start="869:5" pos:end="869:32"><name pos:start="869:5" pos:end="869:11">defined</name><argument_list pos:start="869:12" pos:end="869:32">(<argument pos:start="869:13" pos:end="869:31"><expr pos:start="869:13" pos:end="869:31"><name pos:start="869:13" pos:end="869:31">TARGET_NR_futimesat</name></expr></argument>)</argument_list></call> <operator pos:start="869:34" pos:end="869:35">&amp;&amp;</operator> <call pos:start="869:37" pos:end="869:59"><name pos:start="869:37" pos:end="869:43">defined</name><argument_list pos:start="869:44" pos:end="869:59">(<argument pos:start="869:45" pos:end="869:58"><expr pos:start="869:45" pos:end="869:58"><name pos:start="869:45" pos:end="869:58">__NR_futimesat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="871:5" pos:end="871:29">case <expr pos:start="871:10" pos:end="871:28"><name pos:start="871:10" pos:end="871:28">TARGET_NR_futimesat</name></expr>:</case>

        <block pos:start="873:9" pos:end="903:9">{<block_content pos:start="875:13" pos:end="901:36">

            <decl_stmt pos:start="875:13" pos:end="875:39"><decl pos:start="875:13" pos:end="875:31"><type pos:start="875:13" pos:end="875:28"><name pos:start="875:13" pos:end="875:26"><name pos:start="875:13" pos:end="875:18">struct</name> <name pos:start="875:20" pos:end="875:26">timeval</name></name> <modifier pos:start="875:28" pos:end="875:28">*</modifier></type><name pos:start="875:29" pos:end="875:31">tvp</name></decl>, <decl pos:start="875:34" pos:end="875:38"><type ref="prev" pos:start="875:13" pos:end="875:28"/><name pos:start="875:34" pos:end="875:38"><name pos:start="875:34" pos:end="875:35">tv</name><index pos:start="875:36" pos:end="875:38">[<expr pos:start="875:37" pos:end="875:37"><literal type="number" pos:start="875:37" pos:end="875:37">2</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt pos:start="877:13" pos:end="893:13"><if pos:start="877:13" pos:end="889:13">if <condition pos:start="877:16" pos:end="877:21">(<expr pos:start="877:17" pos:end="877:20"><name pos:start="877:17" pos:end="877:20">arg3</name></expr>)</condition> <block pos:start="877:23" pos:end="889:13">{<block_content pos:start="879:17" pos:end="887:25">

                <if_stmt pos:start="879:17" pos:end="885:32"><if pos:start="879:17" pos:end="885:32">if <condition pos:start="879:20" pos:end="883:84">(<expr pos:start="879:21" pos:end="883:83"><call pos:start="879:21" pos:end="879:56"><name pos:start="879:21" pos:end="879:42">copy_from_user_timeval</name><argument_list pos:start="879:43" pos:end="879:56">(<argument pos:start="879:44" pos:end="879:49"><expr pos:start="879:44" pos:end="879:49"><operator pos:start="879:44" pos:end="879:44">&amp;</operator><name pos:start="879:45" pos:end="879:49"><name pos:start="879:45" pos:end="879:46">tv</name><index pos:start="879:47" pos:end="879:49">[<expr pos:start="879:48" pos:end="879:48"><literal type="number" pos:start="879:48" pos:end="879:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="879:52" pos:end="879:55"><expr pos:start="879:52" pos:end="879:55"><name pos:start="879:52" pos:end="879:55">arg3</name></expr></argument>)</argument_list></call>

                    <operator pos:start="881:21" pos:end="881:22">||</operator> <call pos:start="881:24" pos:end="883:83"><name pos:start="881:24" pos:end="881:45">copy_from_user_timeval</name><argument_list pos:start="881:46" pos:end="883:83">(<argument pos:start="881:47" pos:end="881:52"><expr pos:start="881:47" pos:end="881:52"><operator pos:start="881:47" pos:end="881:47">&amp;</operator><name pos:start="881:48" pos:end="881:52"><name pos:start="881:48" pos:end="881:49">tv</name><index pos:start="881:50" pos:end="881:52">[<expr pos:start="881:51" pos:end="881:51"><literal type="number" pos:start="881:51" pos:end="881:51">1</literal></expr>]</index></name></expr></argument>,

                                              <argument pos:start="883:47" pos:end="883:82"><expr pos:start="883:47" pos:end="883:82"><name pos:start="883:47" pos:end="883:50">arg3</name> <operator pos:start="883:52" pos:end="883:52">+</operator> <sizeof pos:start="883:54" pos:end="883:82">sizeof<argument_list pos:start="883:60" pos:end="883:82">(<argument pos:start="883:61" pos:end="883:81"><expr pos:start="883:61" pos:end="883:81">struct <name pos:start="883:68" pos:end="883:81">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="885:21" pos:end="885:32"><block_content pos:start="885:21" pos:end="885:32">

                    <goto pos:start="885:21" pos:end="885:32">goto <name pos:start="885:26" pos:end="885:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="887:17" pos:end="887:25"><expr pos:start="887:17" pos:end="887:24"><name pos:start="887:17" pos:end="887:19">tvp</name> <operator pos:start="887:21" pos:end="887:21">=</operator> <name pos:start="887:23" pos:end="887:24">tv</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="889:15" pos:end="893:13">else <block pos:start="889:20" pos:end="893:13">{<block_content pos:start="891:17" pos:end="891:27">

                <expr_stmt pos:start="891:17" pos:end="891:27"><expr pos:start="891:17" pos:end="891:26"><name pos:start="891:17" pos:end="891:19">tvp</name> <operator pos:start="891:21" pos:end="891:21">=</operator> <name pos:start="891:23" pos:end="891:26">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="895:13" pos:end="897:28"><if pos:start="895:13" pos:end="897:28">if <condition pos:start="895:16" pos:end="895:46">(<expr pos:start="895:17" pos:end="895:45"><operator pos:start="895:17" pos:end="895:17">!</operator><operator pos:start="895:18" pos:end="895:18">(</operator><name pos:start="895:19" pos:end="895:19">p</name> <operator pos:start="895:21" pos:end="895:21">=</operator> <call pos:start="895:23" pos:end="895:44"><name pos:start="895:23" pos:end="895:38">lock_user_string</name><argument_list pos:start="895:39" pos:end="895:44">(<argument pos:start="895:40" pos:end="895:43"><expr pos:start="895:40" pos:end="895:43"><name pos:start="895:40" pos:end="895:43">arg2</name></expr></argument>)</argument_list></call><operator pos:start="895:45" pos:end="895:45">)</operator></expr>)</condition><block type="pseudo" pos:start="897:17" pos:end="897:28"><block_content pos:start="897:17" pos:end="897:28">

                <goto pos:start="897:17" pos:end="897:28">goto <name pos:start="897:22" pos:end="897:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="899:13" pos:end="899:63"><expr pos:start="899:13" pos:end="899:62"><name pos:start="899:13" pos:end="899:15">ret</name> <operator pos:start="899:17" pos:end="899:17">=</operator> <call pos:start="899:19" pos:end="899:62"><name pos:start="899:19" pos:end="899:27">get_errno</name><argument_list pos:start="899:28" pos:end="899:62">(<argument pos:start="899:29" pos:end="899:61"><expr pos:start="899:29" pos:end="899:61"><call pos:start="899:29" pos:end="899:61"><name pos:start="899:29" pos:end="899:41">sys_futimesat</name><argument_list pos:start="899:42" pos:end="899:61">(<argument pos:start="899:43" pos:end="899:46"><expr pos:start="899:43" pos:end="899:46"><name pos:start="899:43" pos:end="899:46">arg1</name></expr></argument>, <argument pos:start="899:49" pos:end="899:55"><expr pos:start="899:49" pos:end="899:55"><call pos:start="899:49" pos:end="899:55"><name pos:start="899:49" pos:end="899:52">path</name><argument_list pos:start="899:53" pos:end="899:55">(<argument pos:start="899:54" pos:end="899:54"><expr pos:start="899:54" pos:end="899:54"><name pos:start="899:54" pos:end="899:54">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="899:58" pos:end="899:60"><expr pos:start="899:58" pos:end="899:60"><name pos:start="899:58" pos:end="899:60">tvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="901:13" pos:end="901:36"><expr pos:start="901:13" pos:end="901:35"><call pos:start="901:13" pos:end="901:35"><name pos:start="901:13" pos:end="901:23">unlock_user</name><argument_list pos:start="901:24" pos:end="901:35">(<argument pos:start="901:25" pos:end="901:25"><expr pos:start="901:25" pos:end="901:25"><name pos:start="901:25" pos:end="901:25">p</name></expr></argument>, <argument pos:start="901:28" pos:end="901:31"><expr pos:start="901:28" pos:end="901:31"><name pos:start="901:28" pos:end="901:31">arg2</name></expr></argument>, <argument pos:start="901:34" pos:end="901:34"><expr pos:start="901:34" pos:end="901:34"><literal type="number" pos:start="901:34" pos:end="901:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="905:9" pos:end="910:0">break;</break>

<cpp:endif pos:start="907:1" pos:end="907:6">#<cpp:directive pos:start="907:2" pos:end="907:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="909:1" pos:end="909:21">#<cpp:directive pos:start="909:2" pos:end="909:6">ifdef</cpp:directive> <name pos:start="909:8" pos:end="909:21">TARGET_NR_stty</name></cpp:ifdef>

    <case pos:start="911:5" pos:end="911:24">case <expr pos:start="911:10" pos:end="911:23"><name pos:start="911:10" pos:end="911:23">TARGET_NR_stty</name></expr>:</case>

        <goto pos:start="913:9" pos:end="918:0">goto <name pos:start="913:14" pos:end="913:26">unimplemented</name>;</goto>

<cpp:endif pos:start="915:1" pos:end="915:6">#<cpp:directive pos:start="915:2" pos:end="915:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="917:1" pos:end="917:21">#<cpp:directive pos:start="917:2" pos:end="917:6">ifdef</cpp:directive> <name pos:start="917:8" pos:end="917:21">TARGET_NR_gtty</name></cpp:ifdef>

    <case pos:start="919:5" pos:end="919:24">case <expr pos:start="919:10" pos:end="919:23"><name pos:start="919:10" pos:end="919:23">TARGET_NR_gtty</name></expr>:</case>

        <goto pos:start="921:9" pos:end="924:0">goto <name pos:start="921:14" pos:end="921:26">unimplemented</name>;</goto>

<cpp:endif pos:start="923:1" pos:end="923:6">#<cpp:directive pos:start="923:2" pos:end="923:6">endif</cpp:directive></cpp:endif>

    <case pos:start="925:5" pos:end="925:26">case <expr pos:start="925:10" pos:end="925:25"><name pos:start="925:10" pos:end="925:25">TARGET_NR_access</name></expr>:</case>

        <if_stmt pos:start="927:9" pos:end="929:24"><if pos:start="927:9" pos:end="929:24">if <condition pos:start="927:12" pos:end="927:42">(<expr pos:start="927:13" pos:end="927:41"><operator pos:start="927:13" pos:end="927:13">!</operator><operator pos:start="927:14" pos:end="927:14">(</operator><name pos:start="927:15" pos:end="927:15">p</name> <operator pos:start="927:17" pos:end="927:17">=</operator> <call pos:start="927:19" pos:end="927:40"><name pos:start="927:19" pos:end="927:34">lock_user_string</name><argument_list pos:start="927:35" pos:end="927:40">(<argument pos:start="927:36" pos:end="927:39"><expr pos:start="927:36" pos:end="927:39"><name pos:start="927:36" pos:end="927:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="927:41" pos:end="927:41">)</operator></expr>)</condition><block type="pseudo" pos:start="929:13" pos:end="929:24"><block_content pos:start="929:13" pos:end="929:24">

            <goto pos:start="929:13" pos:end="929:24">goto <name pos:start="929:18" pos:end="929:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="931:9" pos:end="931:47"><expr pos:start="931:9" pos:end="931:46"><name pos:start="931:9" pos:end="931:11">ret</name> <operator pos:start="931:13" pos:end="931:13">=</operator> <call pos:start="931:15" pos:end="931:46"><name pos:start="931:15" pos:end="931:23">get_errno</name><argument_list pos:start="931:24" pos:end="931:46">(<argument pos:start="931:25" pos:end="931:45"><expr pos:start="931:25" pos:end="931:45"><call pos:start="931:25" pos:end="931:45"><name pos:start="931:25" pos:end="931:30">access</name><argument_list pos:start="931:31" pos:end="931:45">(<argument pos:start="931:32" pos:end="931:38"><expr pos:start="931:32" pos:end="931:38"><call pos:start="931:32" pos:end="931:38"><name pos:start="931:32" pos:end="931:35">path</name><argument_list pos:start="931:36" pos:end="931:38">(<argument pos:start="931:37" pos:end="931:37"><expr pos:start="931:37" pos:end="931:37"><name pos:start="931:37" pos:end="931:37">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="931:41" pos:end="931:44"><expr pos:start="931:41" pos:end="931:44"><name pos:start="931:41" pos:end="931:44">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="933:9" pos:end="933:32"><expr pos:start="933:9" pos:end="933:31"><call pos:start="933:9" pos:end="933:31"><name pos:start="933:9" pos:end="933:19">unlock_user</name><argument_list pos:start="933:20" pos:end="933:31">(<argument pos:start="933:21" pos:end="933:21"><expr pos:start="933:21" pos:end="933:21"><name pos:start="933:21" pos:end="933:21">p</name></expr></argument>, <argument pos:start="933:24" pos:end="933:27"><expr pos:start="933:24" pos:end="933:27"><name pos:start="933:24" pos:end="933:27">arg1</name></expr></argument>, <argument pos:start="933:30" pos:end="933:30"><expr pos:start="933:30" pos:end="933:30"><literal type="number" pos:start="933:30" pos:end="933:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="935:9" pos:end="938:0">break;</break>

<cpp:if pos:start="937:1" pos:end="937:59">#<cpp:directive pos:start="937:2" pos:end="937:3">if</cpp:directive> <expr pos:start="937:5" pos:end="937:59"><call pos:start="937:5" pos:end="937:32"><name pos:start="937:5" pos:end="937:11">defined</name><argument_list pos:start="937:12" pos:end="937:32">(<argument pos:start="937:13" pos:end="937:31"><expr pos:start="937:13" pos:end="937:31"><name pos:start="937:13" pos:end="937:31">TARGET_NR_faccessat</name></expr></argument>)</argument_list></call> <operator pos:start="937:34" pos:end="937:35">&amp;&amp;</operator> <call pos:start="937:37" pos:end="937:59"><name pos:start="937:37" pos:end="937:43">defined</name><argument_list pos:start="937:44" pos:end="937:59">(<argument pos:start="937:45" pos:end="937:58"><expr pos:start="937:45" pos:end="937:58"><name pos:start="937:45" pos:end="937:58">__NR_faccessat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="939:5" pos:end="939:29">case <expr pos:start="939:10" pos:end="939:28"><name pos:start="939:10" pos:end="939:28">TARGET_NR_faccessat</name></expr>:</case>

        <if_stmt pos:start="941:9" pos:end="943:24"><if pos:start="941:9" pos:end="943:24">if <condition pos:start="941:12" pos:end="941:42">(<expr pos:start="941:13" pos:end="941:41"><operator pos:start="941:13" pos:end="941:13">!</operator><operator pos:start="941:14" pos:end="941:14">(</operator><name pos:start="941:15" pos:end="941:15">p</name> <operator pos:start="941:17" pos:end="941:17">=</operator> <call pos:start="941:19" pos:end="941:40"><name pos:start="941:19" pos:end="941:34">lock_user_string</name><argument_list pos:start="941:35" pos:end="941:40">(<argument pos:start="941:36" pos:end="941:39"><expr pos:start="941:36" pos:end="941:39"><name pos:start="941:36" pos:end="941:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="941:41" pos:end="941:41">)</operator></expr>)</condition><block type="pseudo" pos:start="943:13" pos:end="943:24"><block_content pos:start="943:13" pos:end="943:24">

            <goto pos:start="943:13" pos:end="943:24">goto <name pos:start="943:18" pos:end="943:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="945:9" pos:end="945:54"><expr pos:start="945:9" pos:end="945:53"><name pos:start="945:9" pos:end="945:11">ret</name> <operator pos:start="945:13" pos:end="945:13">=</operator> <call pos:start="945:15" pos:end="945:53"><name pos:start="945:15" pos:end="945:23">get_errno</name><argument_list pos:start="945:24" pos:end="945:53">(<argument pos:start="945:25" pos:end="945:52"><expr pos:start="945:25" pos:end="945:52"><call pos:start="945:25" pos:end="945:52"><name pos:start="945:25" pos:end="945:37">sys_faccessat</name><argument_list pos:start="945:38" pos:end="945:52">(<argument pos:start="945:39" pos:end="945:42"><expr pos:start="945:39" pos:end="945:42"><name pos:start="945:39" pos:end="945:42">arg1</name></expr></argument>, <argument pos:start="945:45" pos:end="945:45"><expr pos:start="945:45" pos:end="945:45"><name pos:start="945:45" pos:end="945:45">p</name></expr></argument>, <argument pos:start="945:48" pos:end="945:51"><expr pos:start="945:48" pos:end="945:51"><name pos:start="945:48" pos:end="945:51">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="947:9" pos:end="947:32"><expr pos:start="947:9" pos:end="947:31"><call pos:start="947:9" pos:end="947:31"><name pos:start="947:9" pos:end="947:19">unlock_user</name><argument_list pos:start="947:20" pos:end="947:31">(<argument pos:start="947:21" pos:end="947:21"><expr pos:start="947:21" pos:end="947:21"><name pos:start="947:21" pos:end="947:21">p</name></expr></argument>, <argument pos:start="947:24" pos:end="947:27"><expr pos:start="947:24" pos:end="947:27"><name pos:start="947:24" pos:end="947:27">arg2</name></expr></argument>, <argument pos:start="947:30" pos:end="947:30"><expr pos:start="947:30" pos:end="947:30"><literal type="number" pos:start="947:30" pos:end="947:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="949:9" pos:end="954:0">break;</break>

<cpp:endif pos:start="951:1" pos:end="951:6">#<cpp:directive pos:start="951:2" pos:end="951:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="953:1" pos:end="953:21">#<cpp:directive pos:start="953:2" pos:end="953:6">ifdef</cpp:directive> <name pos:start="953:8" pos:end="953:21">TARGET_NR_nice</name></cpp:ifdef> <comment type="block" pos:start="953:23" pos:end="953:40">/* not on alpha */</comment>

    <case pos:start="955:5" pos:end="955:24">case <expr pos:start="955:10" pos:end="955:23"><name pos:start="955:10" pos:end="955:23">TARGET_NR_nice</name></expr>:</case>

        <expr_stmt pos:start="957:9" pos:end="957:36"><expr pos:start="957:9" pos:end="957:35"><name pos:start="957:9" pos:end="957:11">ret</name> <operator pos:start="957:13" pos:end="957:13">=</operator> <call pos:start="957:15" pos:end="957:35"><name pos:start="957:15" pos:end="957:23">get_errno</name><argument_list pos:start="957:24" pos:end="957:35">(<argument pos:start="957:25" pos:end="957:34"><expr pos:start="957:25" pos:end="957:34"><call pos:start="957:25" pos:end="957:34"><name pos:start="957:25" pos:end="957:28">nice</name><argument_list pos:start="957:29" pos:end="957:34">(<argument pos:start="957:30" pos:end="957:33"><expr pos:start="957:30" pos:end="957:33"><name pos:start="957:30" pos:end="957:33">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="959:9" pos:end="964:0">break;</break>

<cpp:endif pos:start="961:1" pos:end="961:6">#<cpp:directive pos:start="961:2" pos:end="961:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="963:1" pos:end="963:22">#<cpp:directive pos:start="963:2" pos:end="963:6">ifdef</cpp:directive> <name pos:start="963:8" pos:end="963:22">TARGET_NR_ftime</name></cpp:ifdef>

    <case pos:start="965:5" pos:end="965:25">case <expr pos:start="965:10" pos:end="965:24"><name pos:start="965:10" pos:end="965:24">TARGET_NR_ftime</name></expr>:</case>

        <goto pos:start="967:9" pos:end="970:0">goto <name pos:start="967:14" pos:end="967:26">unimplemented</name>;</goto>

<cpp:endif pos:start="969:1" pos:end="969:6">#<cpp:directive pos:start="969:2" pos:end="969:6">endif</cpp:directive></cpp:endif>

    <case pos:start="971:5" pos:end="971:24">case <expr pos:start="971:10" pos:end="971:23"><name pos:start="971:10" pos:end="971:23">TARGET_NR_sync</name></expr>:</case>

        <expr_stmt pos:start="973:9" pos:end="973:15"><expr pos:start="973:9" pos:end="973:14"><call pos:start="973:9" pos:end="973:14"><name pos:start="973:9" pos:end="973:12">sync</name><argument_list pos:start="973:13" pos:end="973:14">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="975:9" pos:end="975:16"><expr pos:start="975:9" pos:end="975:15"><name pos:start="975:9" pos:end="975:11">ret</name> <operator pos:start="975:13" pos:end="975:13">=</operator> <literal type="number" pos:start="975:15" pos:end="975:15">0</literal></expr>;</expr_stmt>

        <break pos:start="977:9" pos:end="977:14">break;</break>

    <case pos:start="979:5" pos:end="979:24">case <expr pos:start="979:10" pos:end="979:23"><name pos:start="979:10" pos:end="979:23">TARGET_NR_kill</name></expr>:</case>

        <expr_stmt pos:start="981:9" pos:end="981:65"><expr pos:start="981:9" pos:end="981:64"><name pos:start="981:9" pos:end="981:11">ret</name> <operator pos:start="981:13" pos:end="981:13">=</operator> <call pos:start="981:15" pos:end="981:64"><name pos:start="981:15" pos:end="981:23">get_errno</name><argument_list pos:start="981:24" pos:end="981:64">(<argument pos:start="981:25" pos:end="981:63"><expr pos:start="981:25" pos:end="981:63"><call pos:start="981:25" pos:end="981:63"><name pos:start="981:25" pos:end="981:28">kill</name><argument_list pos:start="981:29" pos:end="981:63">(<argument pos:start="981:30" pos:end="981:33"><expr pos:start="981:30" pos:end="981:33"><name pos:start="981:30" pos:end="981:33">arg1</name></expr></argument>, <argument pos:start="981:36" pos:end="981:62"><expr pos:start="981:36" pos:end="981:62"><call pos:start="981:36" pos:end="981:62"><name pos:start="981:36" pos:end="981:56">target_to_host_signal</name><argument_list pos:start="981:57" pos:end="981:62">(<argument pos:start="981:58" pos:end="981:61"><expr pos:start="981:58" pos:end="981:61"><name pos:start="981:58" pos:end="981:61">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="983:9" pos:end="983:14">break;</break>

    <case pos:start="985:5" pos:end="985:26">case <expr pos:start="985:10" pos:end="985:25"><name pos:start="985:10" pos:end="985:25">TARGET_NR_rename</name></expr>:</case>

        <block pos:start="987:9" pos:end="1007:9">{<block_content pos:start="989:13" pos:end="1005:36">

            <decl_stmt pos:start="989:13" pos:end="989:21"><decl pos:start="989:13" pos:end="989:20"><type pos:start="989:13" pos:end="989:18"><name pos:start="989:13" pos:end="989:16">void</name> <modifier pos:start="989:18" pos:end="989:18">*</modifier></type><name pos:start="989:19" pos:end="989:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="991:13" pos:end="991:39"><expr pos:start="991:13" pos:end="991:38"><name pos:start="991:13" pos:end="991:13">p</name> <operator pos:start="991:15" pos:end="991:15">=</operator> <call pos:start="991:17" pos:end="991:38"><name pos:start="991:17" pos:end="991:32">lock_user_string</name><argument_list pos:start="991:33" pos:end="991:38">(<argument pos:start="991:34" pos:end="991:37"><expr pos:start="991:34" pos:end="991:37"><name pos:start="991:34" pos:end="991:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="993:13" pos:end="993:40"><expr pos:start="993:13" pos:end="993:39"><name pos:start="993:13" pos:end="993:14">p2</name> <operator pos:start="993:16" pos:end="993:16">=</operator> <call pos:start="993:18" pos:end="993:39"><name pos:start="993:18" pos:end="993:33">lock_user_string</name><argument_list pos:start="993:34" pos:end="993:39">(<argument pos:start="993:35" pos:end="993:38"><expr pos:start="993:35" pos:end="993:38"><name pos:start="993:35" pos:end="993:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="995:13" pos:end="1001:47"><if pos:start="995:13" pos:end="997:37">if <condition pos:start="995:16" pos:end="995:26">(<expr pos:start="995:17" pos:end="995:25"><operator pos:start="995:17" pos:end="995:17">!</operator><name pos:start="995:18" pos:end="995:18">p</name> <operator pos:start="995:20" pos:end="995:21">||</operator> <operator pos:start="995:23" pos:end="995:23">!</operator><name pos:start="995:24" pos:end="995:25">p2</name></expr>)</condition><block type="pseudo" pos:start="997:17" pos:end="997:37"><block_content pos:start="997:17" pos:end="997:37">

                <expr_stmt pos:start="997:17" pos:end="997:37"><expr pos:start="997:17" pos:end="997:36"><name pos:start="997:17" pos:end="997:19">ret</name> <operator pos:start="997:21" pos:end="997:21">=</operator> <operator pos:start="997:23" pos:end="997:23">-</operator><name pos:start="997:24" pos:end="997:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="999:13" pos:end="1001:47">else<block type="pseudo" pos:start="1001:17" pos:end="1001:47"><block_content pos:start="1001:17" pos:end="1001:47">

                <expr_stmt pos:start="1001:17" pos:end="1001:47"><expr pos:start="1001:17" pos:end="1001:46"><name pos:start="1001:17" pos:end="1001:19">ret</name> <operator pos:start="1001:21" pos:end="1001:21">=</operator> <call pos:start="1001:23" pos:end="1001:46"><name pos:start="1001:23" pos:end="1001:31">get_errno</name><argument_list pos:start="1001:32" pos:end="1001:46">(<argument pos:start="1001:33" pos:end="1001:45"><expr pos:start="1001:33" pos:end="1001:45"><call pos:start="1001:33" pos:end="1001:45"><name pos:start="1001:33" pos:end="1001:38">rename</name><argument_list pos:start="1001:39" pos:end="1001:45">(<argument pos:start="1001:40" pos:end="1001:40"><expr pos:start="1001:40" pos:end="1001:40"><name pos:start="1001:40" pos:end="1001:40">p</name></expr></argument>, <argument pos:start="1001:43" pos:end="1001:44"><expr pos:start="1001:43" pos:end="1001:44"><name pos:start="1001:43" pos:end="1001:44">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1003:13" pos:end="1003:37"><expr pos:start="1003:13" pos:end="1003:36"><call pos:start="1003:13" pos:end="1003:36"><name pos:start="1003:13" pos:end="1003:23">unlock_user</name><argument_list pos:start="1003:24" pos:end="1003:36">(<argument pos:start="1003:25" pos:end="1003:26"><expr pos:start="1003:25" pos:end="1003:26"><name pos:start="1003:25" pos:end="1003:26">p2</name></expr></argument>, <argument pos:start="1003:29" pos:end="1003:32"><expr pos:start="1003:29" pos:end="1003:32"><name pos:start="1003:29" pos:end="1003:32">arg2</name></expr></argument>, <argument pos:start="1003:35" pos:end="1003:35"><expr pos:start="1003:35" pos:end="1003:35"><literal type="number" pos:start="1003:35" pos:end="1003:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1005:13" pos:end="1005:36"><expr pos:start="1005:13" pos:end="1005:35"><call pos:start="1005:13" pos:end="1005:35"><name pos:start="1005:13" pos:end="1005:23">unlock_user</name><argument_list pos:start="1005:24" pos:end="1005:35">(<argument pos:start="1005:25" pos:end="1005:25"><expr pos:start="1005:25" pos:end="1005:25"><name pos:start="1005:25" pos:end="1005:25">p</name></expr></argument>, <argument pos:start="1005:28" pos:end="1005:31"><expr pos:start="1005:28" pos:end="1005:31"><name pos:start="1005:28" pos:end="1005:31">arg1</name></expr></argument>, <argument pos:start="1005:34" pos:end="1005:34"><expr pos:start="1005:34" pos:end="1005:34"><literal type="number" pos:start="1005:34" pos:end="1005:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1009:9" pos:end="1012:0">break;</break>

<cpp:if pos:start="1011:1" pos:end="1011:57">#<cpp:directive pos:start="1011:2" pos:end="1011:3">if</cpp:directive> <expr pos:start="1011:5" pos:end="1011:57"><call pos:start="1011:5" pos:end="1011:31"><name pos:start="1011:5" pos:end="1011:11">defined</name><argument_list pos:start="1011:12" pos:end="1011:31">(<argument pos:start="1011:13" pos:end="1011:30"><expr pos:start="1011:13" pos:end="1011:30"><name pos:start="1011:13" pos:end="1011:30">TARGET_NR_renameat</name></expr></argument>)</argument_list></call> <operator pos:start="1011:33" pos:end="1011:34">&amp;&amp;</operator> <call pos:start="1011:36" pos:end="1011:57"><name pos:start="1011:36" pos:end="1011:42">defined</name><argument_list pos:start="1011:43" pos:end="1011:57">(<argument pos:start="1011:44" pos:end="1011:56"><expr pos:start="1011:44" pos:end="1011:56"><name pos:start="1011:44" pos:end="1011:56">__NR_renameat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="1013:5" pos:end="1013:28">case <expr pos:start="1013:10" pos:end="1013:27"><name pos:start="1013:10" pos:end="1013:27">TARGET_NR_renameat</name></expr>:</case>

        <block pos:start="1015:9" pos:end="1035:9">{<block_content pos:start="1017:13" pos:end="1033:36">

            <decl_stmt pos:start="1017:13" pos:end="1017:21"><decl pos:start="1017:13" pos:end="1017:20"><type pos:start="1017:13" pos:end="1017:18"><name pos:start="1017:13" pos:end="1017:16">void</name> <modifier pos:start="1017:18" pos:end="1017:18">*</modifier></type><name pos:start="1017:19" pos:end="1017:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1019:13" pos:end="1019:40"><expr pos:start="1019:13" pos:end="1019:39"><name pos:start="1019:13" pos:end="1019:13">p</name>  <operator pos:start="1019:16" pos:end="1019:16">=</operator> <call pos:start="1019:18" pos:end="1019:39"><name pos:start="1019:18" pos:end="1019:33">lock_user_string</name><argument_list pos:start="1019:34" pos:end="1019:39">(<argument pos:start="1019:35" pos:end="1019:38"><expr pos:start="1019:35" pos:end="1019:38"><name pos:start="1019:35" pos:end="1019:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1021:13" pos:end="1021:40"><expr pos:start="1021:13" pos:end="1021:39"><name pos:start="1021:13" pos:end="1021:14">p2</name> <operator pos:start="1021:16" pos:end="1021:16">=</operator> <call pos:start="1021:18" pos:end="1021:39"><name pos:start="1021:18" pos:end="1021:33">lock_user_string</name><argument_list pos:start="1021:34" pos:end="1021:39">(<argument pos:start="1021:35" pos:end="1021:38"><expr pos:start="1021:35" pos:end="1021:38"><name pos:start="1021:35" pos:end="1021:38">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1023:13" pos:end="1029:65"><if pos:start="1023:13" pos:end="1025:37">if <condition pos:start="1023:16" pos:end="1023:26">(<expr pos:start="1023:17" pos:end="1023:25"><operator pos:start="1023:17" pos:end="1023:17">!</operator><name pos:start="1023:18" pos:end="1023:18">p</name> <operator pos:start="1023:20" pos:end="1023:21">||</operator> <operator pos:start="1023:23" pos:end="1023:23">!</operator><name pos:start="1023:24" pos:end="1023:25">p2</name></expr>)</condition><block type="pseudo" pos:start="1025:17" pos:end="1025:37"><block_content pos:start="1025:17" pos:end="1025:37">

                <expr_stmt pos:start="1025:17" pos:end="1025:37"><expr pos:start="1025:17" pos:end="1025:36"><name pos:start="1025:17" pos:end="1025:19">ret</name> <operator pos:start="1025:21" pos:end="1025:21">=</operator> <operator pos:start="1025:23" pos:end="1025:23">-</operator><name pos:start="1025:24" pos:end="1025:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1027:13" pos:end="1029:65">else<block type="pseudo" pos:start="1029:17" pos:end="1029:65"><block_content pos:start="1029:17" pos:end="1029:65">

                <expr_stmt pos:start="1029:17" pos:end="1029:65"><expr pos:start="1029:17" pos:end="1029:64"><name pos:start="1029:17" pos:end="1029:19">ret</name> <operator pos:start="1029:21" pos:end="1029:21">=</operator> <call pos:start="1029:23" pos:end="1029:64"><name pos:start="1029:23" pos:end="1029:31">get_errno</name><argument_list pos:start="1029:32" pos:end="1029:64">(<argument pos:start="1029:33" pos:end="1029:63"><expr pos:start="1029:33" pos:end="1029:63"><call pos:start="1029:33" pos:end="1029:63"><name pos:start="1029:33" pos:end="1029:44">sys_renameat</name><argument_list pos:start="1029:45" pos:end="1029:63">(<argument pos:start="1029:46" pos:end="1029:49"><expr pos:start="1029:46" pos:end="1029:49"><name pos:start="1029:46" pos:end="1029:49">arg1</name></expr></argument>, <argument pos:start="1029:52" pos:end="1029:52"><expr pos:start="1029:52" pos:end="1029:52"><name pos:start="1029:52" pos:end="1029:52">p</name></expr></argument>, <argument pos:start="1029:55" pos:end="1029:58"><expr pos:start="1029:55" pos:end="1029:58"><name pos:start="1029:55" pos:end="1029:58">arg3</name></expr></argument>, <argument pos:start="1029:61" pos:end="1029:62"><expr pos:start="1029:61" pos:end="1029:62"><name pos:start="1029:61" pos:end="1029:62">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1031:13" pos:end="1031:37"><expr pos:start="1031:13" pos:end="1031:36"><call pos:start="1031:13" pos:end="1031:36"><name pos:start="1031:13" pos:end="1031:23">unlock_user</name><argument_list pos:start="1031:24" pos:end="1031:36">(<argument pos:start="1031:25" pos:end="1031:26"><expr pos:start="1031:25" pos:end="1031:26"><name pos:start="1031:25" pos:end="1031:26">p2</name></expr></argument>, <argument pos:start="1031:29" pos:end="1031:32"><expr pos:start="1031:29" pos:end="1031:32"><name pos:start="1031:29" pos:end="1031:32">arg4</name></expr></argument>, <argument pos:start="1031:35" pos:end="1031:35"><expr pos:start="1031:35" pos:end="1031:35"><literal type="number" pos:start="1031:35" pos:end="1031:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1033:13" pos:end="1033:36"><expr pos:start="1033:13" pos:end="1033:35"><call pos:start="1033:13" pos:end="1033:35"><name pos:start="1033:13" pos:end="1033:23">unlock_user</name><argument_list pos:start="1033:24" pos:end="1033:35">(<argument pos:start="1033:25" pos:end="1033:25"><expr pos:start="1033:25" pos:end="1033:25"><name pos:start="1033:25" pos:end="1033:25">p</name></expr></argument>, <argument pos:start="1033:28" pos:end="1033:31"><expr pos:start="1033:28" pos:end="1033:31"><name pos:start="1033:28" pos:end="1033:31">arg2</name></expr></argument>, <argument pos:start="1033:34" pos:end="1033:34"><expr pos:start="1033:34" pos:end="1033:34"><literal type="number" pos:start="1033:34" pos:end="1033:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1037:9" pos:end="1040:0">break;</break>

<cpp:endif pos:start="1039:1" pos:end="1039:6">#<cpp:directive pos:start="1039:2" pos:end="1039:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1041:5" pos:end="1041:25">case <expr pos:start="1041:10" pos:end="1041:24"><name pos:start="1041:10" pos:end="1041:24">TARGET_NR_mkdir</name></expr>:</case>

        <if_stmt pos:start="1043:9" pos:end="1045:24"><if pos:start="1043:9" pos:end="1045:24">if <condition pos:start="1043:12" pos:end="1043:42">(<expr pos:start="1043:13" pos:end="1043:41"><operator pos:start="1043:13" pos:end="1043:13">!</operator><operator pos:start="1043:14" pos:end="1043:14">(</operator><name pos:start="1043:15" pos:end="1043:15">p</name> <operator pos:start="1043:17" pos:end="1043:17">=</operator> <call pos:start="1043:19" pos:end="1043:40"><name pos:start="1043:19" pos:end="1043:34">lock_user_string</name><argument_list pos:start="1043:35" pos:end="1043:40">(<argument pos:start="1043:36" pos:end="1043:39"><expr pos:start="1043:36" pos:end="1043:39"><name pos:start="1043:36" pos:end="1043:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1043:41" pos:end="1043:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1045:13" pos:end="1045:24"><block_content pos:start="1045:13" pos:end="1045:24">

            <goto pos:start="1045:13" pos:end="1045:24">goto <name pos:start="1045:18" pos:end="1045:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1047:9" pos:end="1047:40"><expr pos:start="1047:9" pos:end="1047:39"><name pos:start="1047:9" pos:end="1047:11">ret</name> <operator pos:start="1047:13" pos:end="1047:13">=</operator> <call pos:start="1047:15" pos:end="1047:39"><name pos:start="1047:15" pos:end="1047:23">get_errno</name><argument_list pos:start="1047:24" pos:end="1047:39">(<argument pos:start="1047:25" pos:end="1047:38"><expr pos:start="1047:25" pos:end="1047:38"><call pos:start="1047:25" pos:end="1047:38"><name pos:start="1047:25" pos:end="1047:29">mkdir</name><argument_list pos:start="1047:30" pos:end="1047:38">(<argument pos:start="1047:31" pos:end="1047:31"><expr pos:start="1047:31" pos:end="1047:31"><name pos:start="1047:31" pos:end="1047:31">p</name></expr></argument>, <argument pos:start="1047:34" pos:end="1047:37"><expr pos:start="1047:34" pos:end="1047:37"><name pos:start="1047:34" pos:end="1047:37">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1049:9" pos:end="1049:32"><expr pos:start="1049:9" pos:end="1049:31"><call pos:start="1049:9" pos:end="1049:31"><name pos:start="1049:9" pos:end="1049:19">unlock_user</name><argument_list pos:start="1049:20" pos:end="1049:31">(<argument pos:start="1049:21" pos:end="1049:21"><expr pos:start="1049:21" pos:end="1049:21"><name pos:start="1049:21" pos:end="1049:21">p</name></expr></argument>, <argument pos:start="1049:24" pos:end="1049:27"><expr pos:start="1049:24" pos:end="1049:27"><name pos:start="1049:24" pos:end="1049:27">arg1</name></expr></argument>, <argument pos:start="1049:30" pos:end="1049:30"><expr pos:start="1049:30" pos:end="1049:30"><literal type="number" pos:start="1049:30" pos:end="1049:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1051:9" pos:end="1054:0">break;</break>

<cpp:if pos:start="1053:1" pos:end="1053:55">#<cpp:directive pos:start="1053:2" pos:end="1053:3">if</cpp:directive> <expr pos:start="1053:5" pos:end="1053:55"><call pos:start="1053:5" pos:end="1053:30"><name pos:start="1053:5" pos:end="1053:11">defined</name><argument_list pos:start="1053:12" pos:end="1053:30">(<argument pos:start="1053:13" pos:end="1053:29"><expr pos:start="1053:13" pos:end="1053:29"><name pos:start="1053:13" pos:end="1053:29">TARGET_NR_mkdirat</name></expr></argument>)</argument_list></call> <operator pos:start="1053:32" pos:end="1053:33">&amp;&amp;</operator> <call pos:start="1053:35" pos:end="1053:55"><name pos:start="1053:35" pos:end="1053:41">defined</name><argument_list pos:start="1053:42" pos:end="1053:55">(<argument pos:start="1053:43" pos:end="1053:54"><expr pos:start="1053:43" pos:end="1053:54"><name pos:start="1053:43" pos:end="1053:54">__NR_mkdirat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="1055:5" pos:end="1055:27">case <expr pos:start="1055:10" pos:end="1055:26"><name pos:start="1055:10" pos:end="1055:26">TARGET_NR_mkdirat</name></expr>:</case>

        <if_stmt pos:start="1057:9" pos:end="1059:24"><if pos:start="1057:9" pos:end="1059:24">if <condition pos:start="1057:12" pos:end="1057:42">(<expr pos:start="1057:13" pos:end="1057:41"><operator pos:start="1057:13" pos:end="1057:13">!</operator><operator pos:start="1057:14" pos:end="1057:14">(</operator><name pos:start="1057:15" pos:end="1057:15">p</name> <operator pos:start="1057:17" pos:end="1057:17">=</operator> <call pos:start="1057:19" pos:end="1057:40"><name pos:start="1057:19" pos:end="1057:34">lock_user_string</name><argument_list pos:start="1057:35" pos:end="1057:40">(<argument pos:start="1057:36" pos:end="1057:39"><expr pos:start="1057:36" pos:end="1057:39"><name pos:start="1057:36" pos:end="1057:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="1057:41" pos:end="1057:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1059:13" pos:end="1059:24"><block_content pos:start="1059:13" pos:end="1059:24">

            <goto pos:start="1059:13" pos:end="1059:24">goto <name pos:start="1059:18" pos:end="1059:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1061:9" pos:end="1061:52"><expr pos:start="1061:9" pos:end="1061:51"><name pos:start="1061:9" pos:end="1061:11">ret</name> <operator pos:start="1061:13" pos:end="1061:13">=</operator> <call pos:start="1061:15" pos:end="1061:51"><name pos:start="1061:15" pos:end="1061:23">get_errno</name><argument_list pos:start="1061:24" pos:end="1061:51">(<argument pos:start="1061:25" pos:end="1061:50"><expr pos:start="1061:25" pos:end="1061:50"><call pos:start="1061:25" pos:end="1061:50"><name pos:start="1061:25" pos:end="1061:35">sys_mkdirat</name><argument_list pos:start="1061:36" pos:end="1061:50">(<argument pos:start="1061:37" pos:end="1061:40"><expr pos:start="1061:37" pos:end="1061:40"><name pos:start="1061:37" pos:end="1061:40">arg1</name></expr></argument>, <argument pos:start="1061:43" pos:end="1061:43"><expr pos:start="1061:43" pos:end="1061:43"><name pos:start="1061:43" pos:end="1061:43">p</name></expr></argument>, <argument pos:start="1061:46" pos:end="1061:49"><expr pos:start="1061:46" pos:end="1061:49"><name pos:start="1061:46" pos:end="1061:49">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1063:9" pos:end="1063:32"><expr pos:start="1063:9" pos:end="1063:31"><call pos:start="1063:9" pos:end="1063:31"><name pos:start="1063:9" pos:end="1063:19">unlock_user</name><argument_list pos:start="1063:20" pos:end="1063:31">(<argument pos:start="1063:21" pos:end="1063:21"><expr pos:start="1063:21" pos:end="1063:21"><name pos:start="1063:21" pos:end="1063:21">p</name></expr></argument>, <argument pos:start="1063:24" pos:end="1063:27"><expr pos:start="1063:24" pos:end="1063:27"><name pos:start="1063:24" pos:end="1063:27">arg2</name></expr></argument>, <argument pos:start="1063:30" pos:end="1063:30"><expr pos:start="1063:30" pos:end="1063:30"><literal type="number" pos:start="1063:30" pos:end="1063:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1065:9" pos:end="1068:0">break;</break>

<cpp:endif pos:start="1067:1" pos:end="1067:6">#<cpp:directive pos:start="1067:2" pos:end="1067:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1069:5" pos:end="1069:25">case <expr pos:start="1069:10" pos:end="1069:24"><name pos:start="1069:10" pos:end="1069:24">TARGET_NR_rmdir</name></expr>:</case>

        <if_stmt pos:start="1071:9" pos:end="1073:24"><if pos:start="1071:9" pos:end="1073:24">if <condition pos:start="1071:12" pos:end="1071:42">(<expr pos:start="1071:13" pos:end="1071:41"><operator pos:start="1071:13" pos:end="1071:13">!</operator><operator pos:start="1071:14" pos:end="1071:14">(</operator><name pos:start="1071:15" pos:end="1071:15">p</name> <operator pos:start="1071:17" pos:end="1071:17">=</operator> <call pos:start="1071:19" pos:end="1071:40"><name pos:start="1071:19" pos:end="1071:34">lock_user_string</name><argument_list pos:start="1071:35" pos:end="1071:40">(<argument pos:start="1071:36" pos:end="1071:39"><expr pos:start="1071:36" pos:end="1071:39"><name pos:start="1071:36" pos:end="1071:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1071:41" pos:end="1071:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1073:13" pos:end="1073:24"><block_content pos:start="1073:13" pos:end="1073:24">

            <goto pos:start="1073:13" pos:end="1073:24">goto <name pos:start="1073:18" pos:end="1073:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1075:9" pos:end="1075:34"><expr pos:start="1075:9" pos:end="1075:33"><name pos:start="1075:9" pos:end="1075:11">ret</name> <operator pos:start="1075:13" pos:end="1075:13">=</operator> <call pos:start="1075:15" pos:end="1075:33"><name pos:start="1075:15" pos:end="1075:23">get_errno</name><argument_list pos:start="1075:24" pos:end="1075:33">(<argument pos:start="1075:25" pos:end="1075:32"><expr pos:start="1075:25" pos:end="1075:32"><call pos:start="1075:25" pos:end="1075:32"><name pos:start="1075:25" pos:end="1075:29">rmdir</name><argument_list pos:start="1075:30" pos:end="1075:32">(<argument pos:start="1075:31" pos:end="1075:31"><expr pos:start="1075:31" pos:end="1075:31"><name pos:start="1075:31" pos:end="1075:31">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1077:9" pos:end="1077:32"><expr pos:start="1077:9" pos:end="1077:31"><call pos:start="1077:9" pos:end="1077:31"><name pos:start="1077:9" pos:end="1077:19">unlock_user</name><argument_list pos:start="1077:20" pos:end="1077:31">(<argument pos:start="1077:21" pos:end="1077:21"><expr pos:start="1077:21" pos:end="1077:21"><name pos:start="1077:21" pos:end="1077:21">p</name></expr></argument>, <argument pos:start="1077:24" pos:end="1077:27"><expr pos:start="1077:24" pos:end="1077:27"><name pos:start="1077:24" pos:end="1077:27">arg1</name></expr></argument>, <argument pos:start="1077:30" pos:end="1077:30"><expr pos:start="1077:30" pos:end="1077:30"><literal type="number" pos:start="1077:30" pos:end="1077:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1079:9" pos:end="1079:14">break;</break>

    <case pos:start="1081:5" pos:end="1081:23">case <expr pos:start="1081:10" pos:end="1081:22"><name pos:start="1081:10" pos:end="1081:22">TARGET_NR_dup</name></expr>:</case>

        <expr_stmt pos:start="1083:9" pos:end="1083:35"><expr pos:start="1083:9" pos:end="1083:34"><name pos:start="1083:9" pos:end="1083:11">ret</name> <operator pos:start="1083:13" pos:end="1083:13">=</operator> <call pos:start="1083:15" pos:end="1083:34"><name pos:start="1083:15" pos:end="1083:23">get_errno</name><argument_list pos:start="1083:24" pos:end="1083:34">(<argument pos:start="1083:25" pos:end="1083:33"><expr pos:start="1083:25" pos:end="1083:33"><call pos:start="1083:25" pos:end="1083:33"><name pos:start="1083:25" pos:end="1083:27">dup</name><argument_list pos:start="1083:28" pos:end="1083:33">(<argument pos:start="1083:29" pos:end="1083:32"><expr pos:start="1083:29" pos:end="1083:32"><name pos:start="1083:29" pos:end="1083:32">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1085:9" pos:end="1085:14">break;</break>

    <case pos:start="1087:5" pos:end="1087:24">case <expr pos:start="1087:10" pos:end="1087:23"><name pos:start="1087:10" pos:end="1087:23">TARGET_NR_pipe</name></expr>:</case>

        <expr_stmt pos:start="1089:9" pos:end="1089:43"><expr pos:start="1089:9" pos:end="1089:42"><name pos:start="1089:9" pos:end="1089:11">ret</name> <operator pos:start="1089:13" pos:end="1089:13">=</operator> <call pos:start="1089:15" pos:end="1089:42"><name pos:start="1089:15" pos:end="1089:21">do_pipe</name><argument_list pos:start="1089:22" pos:end="1089:42">(<argument pos:start="1089:23" pos:end="1089:29"><expr pos:start="1089:23" pos:end="1089:29"><name pos:start="1089:23" pos:end="1089:29">cpu_env</name></expr></argument>, <argument pos:start="1089:32" pos:end="1089:35"><expr pos:start="1089:32" pos:end="1089:35"><name pos:start="1089:32" pos:end="1089:35">arg1</name></expr></argument>, <argument pos:start="1089:38" pos:end="1089:38"><expr pos:start="1089:38" pos:end="1089:38"><literal type="number" pos:start="1089:38" pos:end="1089:38">0</literal></expr></argument>, <argument pos:start="1089:41" pos:end="1089:41"><expr pos:start="1089:41" pos:end="1089:41"><literal type="number" pos:start="1089:41" pos:end="1089:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1091:9" pos:end="1094:0">break;</break>

<cpp:ifdef pos:start="1093:1" pos:end="1093:22">#<cpp:directive pos:start="1093:2" pos:end="1093:6">ifdef</cpp:directive> <name pos:start="1093:8" pos:end="1093:22">TARGET_NR_pipe2</name></cpp:ifdef>

    <case pos:start="1095:5" pos:end="1095:25">case <expr pos:start="1095:10" pos:end="1095:24"><name pos:start="1095:10" pos:end="1095:24">TARGET_NR_pipe2</name></expr>:</case>

        <expr_stmt pos:start="1097:9" pos:end="1099:72"><expr pos:start="1097:9" pos:end="1099:71"><name pos:start="1097:9" pos:end="1097:11">ret</name> <operator pos:start="1097:13" pos:end="1097:13">=</operator> <call pos:start="1097:15" pos:end="1099:71"><name pos:start="1097:15" pos:end="1097:21">do_pipe</name><argument_list pos:start="1097:22" pos:end="1099:71">(<argument pos:start="1097:23" pos:end="1097:29"><expr pos:start="1097:23" pos:end="1097:29"><name pos:start="1097:23" pos:end="1097:29">cpu_env</name></expr></argument>, <argument pos:start="1097:32" pos:end="1097:35"><expr pos:start="1097:32" pos:end="1097:35"><name pos:start="1097:32" pos:end="1097:35">arg1</name></expr></argument>,

                      <argument pos:start="1099:23" pos:end="1099:67"><expr pos:start="1099:23" pos:end="1099:67"><call pos:start="1099:23" pos:end="1099:67"><name pos:start="1099:23" pos:end="1099:44">target_to_host_bitmask</name><argument_list pos:start="1099:45" pos:end="1099:67">(<argument pos:start="1099:46" pos:end="1099:49"><expr pos:start="1099:46" pos:end="1099:49"><name pos:start="1099:46" pos:end="1099:49">arg2</name></expr></argument>, <argument pos:start="1099:52" pos:end="1099:66"><expr pos:start="1099:52" pos:end="1099:66"><name pos:start="1099:52" pos:end="1099:66">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1099:70" pos:end="1099:70"><expr pos:start="1099:70" pos:end="1099:70"><literal type="number" pos:start="1099:70" pos:end="1099:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1101:9" pos:end="1104:0">break;</break>

<cpp:endif pos:start="1103:1" pos:end="1103:6">#<cpp:directive pos:start="1103:2" pos:end="1103:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1105:5" pos:end="1105:25">case <expr pos:start="1105:10" pos:end="1105:24"><name pos:start="1105:10" pos:end="1105:24">TARGET_NR_times</name></expr>:</case>

        <block pos:start="1107:9" pos:end="1137:9">{<block_content pos:start="1109:13" pos:end="1135:50">

            <decl_stmt pos:start="1109:13" pos:end="1109:36"><decl pos:start="1109:13" pos:end="1109:35"><type pos:start="1109:13" pos:end="1109:31"><name pos:start="1109:13" pos:end="1109:29"><name pos:start="1109:13" pos:end="1109:18">struct</name> <name pos:start="1109:20" pos:end="1109:29">target_tms</name></name> <modifier pos:start="1109:31" pos:end="1109:31">*</modifier></type><name pos:start="1109:32" pos:end="1109:35">tmsp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1111:13" pos:end="1111:27"><decl pos:start="1111:13" pos:end="1111:26"><type pos:start="1111:13" pos:end="1111:22"><name pos:start="1111:13" pos:end="1111:22"><name pos:start="1111:13" pos:end="1111:18">struct</name> <name pos:start="1111:20" pos:end="1111:22">tms</name></name></type> <name pos:start="1111:24" pos:end="1111:26">tms</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1113:13" pos:end="1113:41"><expr pos:start="1113:13" pos:end="1113:40"><name pos:start="1113:13" pos:end="1113:15">ret</name> <operator pos:start="1113:17" pos:end="1113:17">=</operator> <call pos:start="1113:19" pos:end="1113:40"><name pos:start="1113:19" pos:end="1113:27">get_errno</name><argument_list pos:start="1113:28" pos:end="1113:40">(<argument pos:start="1113:29" pos:end="1113:39"><expr pos:start="1113:29" pos:end="1113:39"><call pos:start="1113:29" pos:end="1113:39"><name pos:start="1113:29" pos:end="1113:33">times</name><argument_list pos:start="1113:34" pos:end="1113:39">(<argument pos:start="1113:35" pos:end="1113:38"><expr pos:start="1113:35" pos:end="1113:38"><operator pos:start="1113:35" pos:end="1113:35">&amp;</operator><name pos:start="1113:36" pos:end="1113:38">tms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1115:13" pos:end="1131:13"><if pos:start="1115:13" pos:end="1131:13">if <condition pos:start="1115:16" pos:end="1115:21">(<expr pos:start="1115:17" pos:end="1115:20"><name pos:start="1115:17" pos:end="1115:20">arg1</name></expr>)</condition> <block pos:start="1115:23" pos:end="1131:13">{<block_content pos:start="1117:17" pos:end="1129:83">

                <expr_stmt pos:start="1117:17" pos:end="1117:83"><expr pos:start="1117:17" pos:end="1117:82"><name pos:start="1117:17" pos:end="1117:20">tmsp</name> <operator pos:start="1117:22" pos:end="1117:22">=</operator> <call pos:start="1117:24" pos:end="1117:82"><name pos:start="1117:24" pos:end="1117:32">lock_user</name><argument_list pos:start="1117:33" pos:end="1117:82">(<argument pos:start="1117:34" pos:end="1117:45"><expr pos:start="1117:34" pos:end="1117:45"><name pos:start="1117:34" pos:end="1117:45">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1117:48" pos:end="1117:51"><expr pos:start="1117:48" pos:end="1117:51"><name pos:start="1117:48" pos:end="1117:51">arg1</name></expr></argument>, <argument pos:start="1117:54" pos:end="1117:78"><expr pos:start="1117:54" pos:end="1117:78"><sizeof pos:start="1117:54" pos:end="1117:78">sizeof<argument_list pos:start="1117:60" pos:end="1117:78">(<argument pos:start="1117:61" pos:end="1117:77"><expr pos:start="1117:61" pos:end="1117:77">struct <name pos:start="1117:68" pos:end="1117:77">target_tms</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1117:81" pos:end="1117:81"><expr pos:start="1117:81" pos:end="1117:81"><literal type="number" pos:start="1117:81" pos:end="1117:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1119:17" pos:end="1121:32"><if pos:start="1119:17" pos:end="1121:32">if <condition pos:start="1119:20" pos:end="1119:26">(<expr pos:start="1119:21" pos:end="1119:25"><operator pos:start="1119:21" pos:end="1119:21">!</operator><name pos:start="1119:22" pos:end="1119:25">tmsp</name></expr>)</condition><block type="pseudo" pos:start="1121:21" pos:end="1121:32"><block_content pos:start="1121:21" pos:end="1121:32">

                    <goto pos:start="1121:21" pos:end="1121:32">goto <name pos:start="1121:26" pos:end="1121:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1123:17" pos:end="1123:81"><expr pos:start="1123:17" pos:end="1123:80"><name pos:start="1123:17" pos:end="1123:31"><name pos:start="1123:17" pos:end="1123:20">tmsp</name><operator pos:start="1123:21" pos:end="1123:22">-&gt;</operator><name pos:start="1123:23" pos:end="1123:31">tms_utime</name></name> <operator pos:start="1123:33" pos:end="1123:33">=</operator> <call pos:start="1123:35" pos:end="1123:80"><name pos:start="1123:35" pos:end="1123:41">tswapal</name><argument_list pos:start="1123:42" pos:end="1123:80">(<argument pos:start="1123:43" pos:end="1123:79"><expr pos:start="1123:43" pos:end="1123:79"><call pos:start="1123:43" pos:end="1123:79"><name pos:start="1123:43" pos:end="1123:64">host_to_target_clock_t</name><argument_list pos:start="1123:65" pos:end="1123:79">(<argument pos:start="1123:66" pos:end="1123:78"><expr pos:start="1123:66" pos:end="1123:78"><name pos:start="1123:66" pos:end="1123:78"><name pos:start="1123:66" pos:end="1123:68">tms</name><operator pos:start="1123:69" pos:end="1123:69">.</operator><name pos:start="1123:70" pos:end="1123:78">tms_utime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1125:17" pos:end="1125:81"><expr pos:start="1125:17" pos:end="1125:80"><name pos:start="1125:17" pos:end="1125:31"><name pos:start="1125:17" pos:end="1125:20">tmsp</name><operator pos:start="1125:21" pos:end="1125:22">-&gt;</operator><name pos:start="1125:23" pos:end="1125:31">tms_stime</name></name> <operator pos:start="1125:33" pos:end="1125:33">=</operator> <call pos:start="1125:35" pos:end="1125:80"><name pos:start="1125:35" pos:end="1125:41">tswapal</name><argument_list pos:start="1125:42" pos:end="1125:80">(<argument pos:start="1125:43" pos:end="1125:79"><expr pos:start="1125:43" pos:end="1125:79"><call pos:start="1125:43" pos:end="1125:79"><name pos:start="1125:43" pos:end="1125:64">host_to_target_clock_t</name><argument_list pos:start="1125:65" pos:end="1125:79">(<argument pos:start="1125:66" pos:end="1125:78"><expr pos:start="1125:66" pos:end="1125:78"><name pos:start="1125:66" pos:end="1125:78"><name pos:start="1125:66" pos:end="1125:68">tms</name><operator pos:start="1125:69" pos:end="1125:69">.</operator><name pos:start="1125:70" pos:end="1125:78">tms_stime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1127:17" pos:end="1127:83"><expr pos:start="1127:17" pos:end="1127:82"><name pos:start="1127:17" pos:end="1127:32"><name pos:start="1127:17" pos:end="1127:20">tmsp</name><operator pos:start="1127:21" pos:end="1127:22">-&gt;</operator><name pos:start="1127:23" pos:end="1127:32">tms_cutime</name></name> <operator pos:start="1127:34" pos:end="1127:34">=</operator> <call pos:start="1127:36" pos:end="1127:82"><name pos:start="1127:36" pos:end="1127:42">tswapal</name><argument_list pos:start="1127:43" pos:end="1127:82">(<argument pos:start="1127:44" pos:end="1127:81"><expr pos:start="1127:44" pos:end="1127:81"><call pos:start="1127:44" pos:end="1127:81"><name pos:start="1127:44" pos:end="1127:65">host_to_target_clock_t</name><argument_list pos:start="1127:66" pos:end="1127:81">(<argument pos:start="1127:67" pos:end="1127:80"><expr pos:start="1127:67" pos:end="1127:80"><name pos:start="1127:67" pos:end="1127:80"><name pos:start="1127:67" pos:end="1127:69">tms</name><operator pos:start="1127:70" pos:end="1127:70">.</operator><name pos:start="1127:71" pos:end="1127:80">tms_cutime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1129:17" pos:end="1129:83"><expr pos:start="1129:17" pos:end="1129:82"><name pos:start="1129:17" pos:end="1129:32"><name pos:start="1129:17" pos:end="1129:20">tmsp</name><operator pos:start="1129:21" pos:end="1129:22">-&gt;</operator><name pos:start="1129:23" pos:end="1129:32">tms_cstime</name></name> <operator pos:start="1129:34" pos:end="1129:34">=</operator> <call pos:start="1129:36" pos:end="1129:82"><name pos:start="1129:36" pos:end="1129:42">tswapal</name><argument_list pos:start="1129:43" pos:end="1129:82">(<argument pos:start="1129:44" pos:end="1129:81"><expr pos:start="1129:44" pos:end="1129:81"><call pos:start="1129:44" pos:end="1129:81"><name pos:start="1129:44" pos:end="1129:65">host_to_target_clock_t</name><argument_list pos:start="1129:66" pos:end="1129:81">(<argument pos:start="1129:67" pos:end="1129:80"><expr pos:start="1129:67" pos:end="1129:80"><name pos:start="1129:67" pos:end="1129:80"><name pos:start="1129:67" pos:end="1129:69">tms</name><operator pos:start="1129:70" pos:end="1129:70">.</operator><name pos:start="1129:71" pos:end="1129:80">tms_cstime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1133:13" pos:end="1135:50"><if pos:start="1133:13" pos:end="1135:50">if <condition pos:start="1133:16" pos:end="1133:31">(<expr pos:start="1133:17" pos:end="1133:30"><operator pos:start="1133:17" pos:end="1133:17">!</operator><call pos:start="1133:18" pos:end="1133:30"><name pos:start="1133:18" pos:end="1133:25">is_error</name><argument_list pos:start="1133:26" pos:end="1133:30">(<argument pos:start="1133:27" pos:end="1133:29"><expr pos:start="1133:27" pos:end="1133:29"><name pos:start="1133:27" pos:end="1133:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1135:17" pos:end="1135:50"><block_content pos:start="1135:17" pos:end="1135:50">

                <expr_stmt pos:start="1135:17" pos:end="1135:50"><expr pos:start="1135:17" pos:end="1135:49"><name pos:start="1135:17" pos:end="1135:19">ret</name> <operator pos:start="1135:21" pos:end="1135:21">=</operator> <call pos:start="1135:23" pos:end="1135:49"><name pos:start="1135:23" pos:end="1135:44">host_to_target_clock_t</name><argument_list pos:start="1135:45" pos:end="1135:49">(<argument pos:start="1135:46" pos:end="1135:48"><expr pos:start="1135:46" pos:end="1135:48"><name pos:start="1135:46" pos:end="1135:48">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1139:9" pos:end="1142:0">break;</break>

<cpp:ifdef pos:start="1141:1" pos:end="1141:21">#<cpp:directive pos:start="1141:2" pos:end="1141:6">ifdef</cpp:directive> <name pos:start="1141:8" pos:end="1141:21">TARGET_NR_prof</name></cpp:ifdef>

    <case pos:start="1143:5" pos:end="1143:24">case <expr pos:start="1143:10" pos:end="1143:23"><name pos:start="1143:10" pos:end="1143:23">TARGET_NR_prof</name></expr>:</case>

        <goto pos:start="1145:9" pos:end="1150:0">goto <name pos:start="1145:14" pos:end="1145:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1147:1" pos:end="1147:6">#<cpp:directive pos:start="1147:2" pos:end="1147:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1149:1" pos:end="1149:23">#<cpp:directive pos:start="1149:2" pos:end="1149:6">ifdef</cpp:directive> <name pos:start="1149:8" pos:end="1149:23">TARGET_NR_signal</name></cpp:ifdef>

    <case pos:start="1151:5" pos:end="1151:26">case <expr pos:start="1151:10" pos:end="1151:25"><name pos:start="1151:10" pos:end="1151:25">TARGET_NR_signal</name></expr>:</case>

        <goto pos:start="1153:9" pos:end="1156:0">goto <name pos:start="1153:14" pos:end="1153:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1155:1" pos:end="1155:6">#<cpp:directive pos:start="1155:2" pos:end="1155:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1157:5" pos:end="1157:24">case <expr pos:start="1157:10" pos:end="1157:23"><name pos:start="1157:10" pos:end="1157:23">TARGET_NR_acct</name></expr>:</case>

        <if_stmt pos:start="1159:9" pos:end="1173:9"><if pos:start="1159:9" pos:end="1163:9">if <condition pos:start="1159:12" pos:end="1159:22">(<expr pos:start="1159:13" pos:end="1159:21"><name pos:start="1159:13" pos:end="1159:16">arg1</name> <operator pos:start="1159:18" pos:end="1159:19">==</operator> <literal type="number" pos:start="1159:21" pos:end="1159:21">0</literal></expr>)</condition> <block pos:start="1159:24" pos:end="1163:9">{<block_content pos:start="1161:13" pos:end="1161:40">

            <expr_stmt pos:start="1161:13" pos:end="1161:40"><expr pos:start="1161:13" pos:end="1161:39"><name pos:start="1161:13" pos:end="1161:15">ret</name> <operator pos:start="1161:17" pos:end="1161:17">=</operator> <call pos:start="1161:19" pos:end="1161:39"><name pos:start="1161:19" pos:end="1161:27">get_errno</name><argument_list pos:start="1161:28" pos:end="1161:39">(<argument pos:start="1161:29" pos:end="1161:38"><expr pos:start="1161:29" pos:end="1161:38"><call pos:start="1161:29" pos:end="1161:38"><name pos:start="1161:29" pos:end="1161:32">acct</name><argument_list pos:start="1161:33" pos:end="1161:38">(<argument pos:start="1161:34" pos:end="1161:37"><expr pos:start="1161:34" pos:end="1161:37"><name pos:start="1161:34" pos:end="1161:37">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1163:11" pos:end="1173:9">else <block pos:start="1163:16" pos:end="1173:9">{<block_content pos:start="1165:13" pos:end="1171:36">

            <if_stmt pos:start="1165:13" pos:end="1167:28"><if pos:start="1165:13" pos:end="1167:28">if <condition pos:start="1165:16" pos:end="1165:46">(<expr pos:start="1165:17" pos:end="1165:45"><operator pos:start="1165:17" pos:end="1165:17">!</operator><operator pos:start="1165:18" pos:end="1165:18">(</operator><name pos:start="1165:19" pos:end="1165:19">p</name> <operator pos:start="1165:21" pos:end="1165:21">=</operator> <call pos:start="1165:23" pos:end="1165:44"><name pos:start="1165:23" pos:end="1165:38">lock_user_string</name><argument_list pos:start="1165:39" pos:end="1165:44">(<argument pos:start="1165:40" pos:end="1165:43"><expr pos:start="1165:40" pos:end="1165:43"><name pos:start="1165:40" pos:end="1165:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1165:45" pos:end="1165:45">)</operator></expr>)</condition><block type="pseudo" pos:start="1167:17" pos:end="1167:28"><block_content pos:start="1167:17" pos:end="1167:28">

                <goto pos:start="1167:17" pos:end="1167:28">goto <name pos:start="1167:22" pos:end="1167:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1169:13" pos:end="1169:43"><expr pos:start="1169:13" pos:end="1169:42"><name pos:start="1169:13" pos:end="1169:15">ret</name> <operator pos:start="1169:17" pos:end="1169:17">=</operator> <call pos:start="1169:19" pos:end="1169:42"><name pos:start="1169:19" pos:end="1169:27">get_errno</name><argument_list pos:start="1169:28" pos:end="1169:42">(<argument pos:start="1169:29" pos:end="1169:41"><expr pos:start="1169:29" pos:end="1169:41"><call pos:start="1169:29" pos:end="1169:41"><name pos:start="1169:29" pos:end="1169:32">acct</name><argument_list pos:start="1169:33" pos:end="1169:41">(<argument pos:start="1169:34" pos:end="1169:40"><expr pos:start="1169:34" pos:end="1169:40"><call pos:start="1169:34" pos:end="1169:40"><name pos:start="1169:34" pos:end="1169:37">path</name><argument_list pos:start="1169:38" pos:end="1169:40">(<argument pos:start="1169:39" pos:end="1169:39"><expr pos:start="1169:39" pos:end="1169:39"><name pos:start="1169:39" pos:end="1169:39">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1171:13" pos:end="1171:36"><expr pos:start="1171:13" pos:end="1171:35"><call pos:start="1171:13" pos:end="1171:35"><name pos:start="1171:13" pos:end="1171:23">unlock_user</name><argument_list pos:start="1171:24" pos:end="1171:35">(<argument pos:start="1171:25" pos:end="1171:25"><expr pos:start="1171:25" pos:end="1171:25"><name pos:start="1171:25" pos:end="1171:25">p</name></expr></argument>, <argument pos:start="1171:28" pos:end="1171:31"><expr pos:start="1171:28" pos:end="1171:31"><name pos:start="1171:28" pos:end="1171:31">arg1</name></expr></argument>, <argument pos:start="1171:34" pos:end="1171:34"><expr pos:start="1171:34" pos:end="1171:34"><literal type="number" pos:start="1171:34" pos:end="1171:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1175:9" pos:end="1178:0">break;</break>

<cpp:ifdef pos:start="1177:1" pos:end="1177:24">#<cpp:directive pos:start="1177:2" pos:end="1177:6">ifdef</cpp:directive> <name pos:start="1177:8" pos:end="1177:24">TARGET_NR_umount2</name></cpp:ifdef> <comment type="block" pos:start="1177:26" pos:end="1177:43">/* not on alpha */</comment>

    <case pos:start="1179:5" pos:end="1179:27">case <expr pos:start="1179:10" pos:end="1179:26"><name pos:start="1179:10" pos:end="1179:26">TARGET_NR_umount2</name></expr>:</case>

        <if_stmt pos:start="1181:9" pos:end="1183:24"><if pos:start="1181:9" pos:end="1183:24">if <condition pos:start="1181:12" pos:end="1181:42">(<expr pos:start="1181:13" pos:end="1181:41"><operator pos:start="1181:13" pos:end="1181:13">!</operator><operator pos:start="1181:14" pos:end="1181:14">(</operator><name pos:start="1181:15" pos:end="1181:15">p</name> <operator pos:start="1181:17" pos:end="1181:17">=</operator> <call pos:start="1181:19" pos:end="1181:40"><name pos:start="1181:19" pos:end="1181:34">lock_user_string</name><argument_list pos:start="1181:35" pos:end="1181:40">(<argument pos:start="1181:36" pos:end="1181:39"><expr pos:start="1181:36" pos:end="1181:39"><name pos:start="1181:36" pos:end="1181:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1181:41" pos:end="1181:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1183:13" pos:end="1183:24"><block_content pos:start="1183:13" pos:end="1183:24">

            <goto pos:start="1183:13" pos:end="1183:24">goto <name pos:start="1183:18" pos:end="1183:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1185:9" pos:end="1185:42"><expr pos:start="1185:9" pos:end="1185:41"><name pos:start="1185:9" pos:end="1185:11">ret</name> <operator pos:start="1185:13" pos:end="1185:13">=</operator> <call pos:start="1185:15" pos:end="1185:41"><name pos:start="1185:15" pos:end="1185:23">get_errno</name><argument_list pos:start="1185:24" pos:end="1185:41">(<argument pos:start="1185:25" pos:end="1185:40"><expr pos:start="1185:25" pos:end="1185:40"><call pos:start="1185:25" pos:end="1185:40"><name pos:start="1185:25" pos:end="1185:31">umount2</name><argument_list pos:start="1185:32" pos:end="1185:40">(<argument pos:start="1185:33" pos:end="1185:33"><expr pos:start="1185:33" pos:end="1185:33"><name pos:start="1185:33" pos:end="1185:33">p</name></expr></argument>, <argument pos:start="1185:36" pos:end="1185:39"><expr pos:start="1185:36" pos:end="1185:39"><name pos:start="1185:36" pos:end="1185:39">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1187:9" pos:end="1187:32"><expr pos:start="1187:9" pos:end="1187:31"><call pos:start="1187:9" pos:end="1187:31"><name pos:start="1187:9" pos:end="1187:19">unlock_user</name><argument_list pos:start="1187:20" pos:end="1187:31">(<argument pos:start="1187:21" pos:end="1187:21"><expr pos:start="1187:21" pos:end="1187:21"><name pos:start="1187:21" pos:end="1187:21">p</name></expr></argument>, <argument pos:start="1187:24" pos:end="1187:27"><expr pos:start="1187:24" pos:end="1187:27"><name pos:start="1187:24" pos:end="1187:27">arg1</name></expr></argument>, <argument pos:start="1187:30" pos:end="1187:30"><expr pos:start="1187:30" pos:end="1187:30"><literal type="number" pos:start="1187:30" pos:end="1187:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1189:9" pos:end="1194:0">break;</break>

<cpp:endif pos:start="1191:1" pos:end="1191:6">#<cpp:directive pos:start="1191:2" pos:end="1191:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1193:1" pos:end="1193:21">#<cpp:directive pos:start="1193:2" pos:end="1193:6">ifdef</cpp:directive> <name pos:start="1193:8" pos:end="1193:21">TARGET_NR_lock</name></cpp:ifdef>

    <case pos:start="1195:5" pos:end="1195:24">case <expr pos:start="1195:10" pos:end="1195:23"><name pos:start="1195:10" pos:end="1195:23">TARGET_NR_lock</name></expr>:</case>

        <goto pos:start="1197:9" pos:end="1200:0">goto <name pos:start="1197:14" pos:end="1197:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1199:1" pos:end="1199:6">#<cpp:directive pos:start="1199:2" pos:end="1199:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1201:5" pos:end="1201:25">case <expr pos:start="1201:10" pos:end="1201:24"><name pos:start="1201:10" pos:end="1201:24">TARGET_NR_ioctl</name></expr>:</case>

        <expr_stmt pos:start="1203:9" pos:end="1203:41"><expr pos:start="1203:9" pos:end="1203:40"><name pos:start="1203:9" pos:end="1203:11">ret</name> <operator pos:start="1203:13" pos:end="1203:13">=</operator> <call pos:start="1203:15" pos:end="1203:40"><name pos:start="1203:15" pos:end="1203:22">do_ioctl</name><argument_list pos:start="1203:23" pos:end="1203:40">(<argument pos:start="1203:24" pos:end="1203:27"><expr pos:start="1203:24" pos:end="1203:27"><name pos:start="1203:24" pos:end="1203:27">arg1</name></expr></argument>, <argument pos:start="1203:30" pos:end="1203:33"><expr pos:start="1203:30" pos:end="1203:33"><name pos:start="1203:30" pos:end="1203:33">arg2</name></expr></argument>, <argument pos:start="1203:36" pos:end="1203:39"><expr pos:start="1203:36" pos:end="1203:39"><name pos:start="1203:36" pos:end="1203:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1205:9" pos:end="1205:14">break;</break>

    <case pos:start="1207:5" pos:end="1207:25">case <expr pos:start="1207:10" pos:end="1207:24"><name pos:start="1207:10" pos:end="1207:24">TARGET_NR_fcntl</name></expr>:</case>

        <expr_stmt pos:start="1209:9" pos:end="1209:41"><expr pos:start="1209:9" pos:end="1209:40"><name pos:start="1209:9" pos:end="1209:11">ret</name> <operator pos:start="1209:13" pos:end="1209:13">=</operator> <call pos:start="1209:15" pos:end="1209:40"><name pos:start="1209:15" pos:end="1209:22">do_fcntl</name><argument_list pos:start="1209:23" pos:end="1209:40">(<argument pos:start="1209:24" pos:end="1209:27"><expr pos:start="1209:24" pos:end="1209:27"><name pos:start="1209:24" pos:end="1209:27">arg1</name></expr></argument>, <argument pos:start="1209:30" pos:end="1209:33"><expr pos:start="1209:30" pos:end="1209:33"><name pos:start="1209:30" pos:end="1209:33">arg2</name></expr></argument>, <argument pos:start="1209:36" pos:end="1209:39"><expr pos:start="1209:36" pos:end="1209:39"><name pos:start="1209:36" pos:end="1209:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1211:9" pos:end="1214:0">break;</break>

<cpp:ifdef pos:start="1213:1" pos:end="1213:20">#<cpp:directive pos:start="1213:2" pos:end="1213:6">ifdef</cpp:directive> <name pos:start="1213:8" pos:end="1213:20">TARGET_NR_mpx</name></cpp:ifdef>

    <case pos:start="1215:5" pos:end="1215:23">case <expr pos:start="1215:10" pos:end="1215:22"><name pos:start="1215:10" pos:end="1215:22">TARGET_NR_mpx</name></expr>:</case>

        <goto pos:start="1217:9" pos:end="1220:0">goto <name pos:start="1217:14" pos:end="1217:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1219:1" pos:end="1219:6">#<cpp:directive pos:start="1219:2" pos:end="1219:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1221:5" pos:end="1221:27">case <expr pos:start="1221:10" pos:end="1221:26"><name pos:start="1221:10" pos:end="1221:26">TARGET_NR_setpgid</name></expr>:</case>

        <expr_stmt pos:start="1223:9" pos:end="1223:45"><expr pos:start="1223:9" pos:end="1223:44"><name pos:start="1223:9" pos:end="1223:11">ret</name> <operator pos:start="1223:13" pos:end="1223:13">=</operator> <call pos:start="1223:15" pos:end="1223:44"><name pos:start="1223:15" pos:end="1223:23">get_errno</name><argument_list pos:start="1223:24" pos:end="1223:44">(<argument pos:start="1223:25" pos:end="1223:43"><expr pos:start="1223:25" pos:end="1223:43"><call pos:start="1223:25" pos:end="1223:43"><name pos:start="1223:25" pos:end="1223:31">setpgid</name><argument_list pos:start="1223:32" pos:end="1223:43">(<argument pos:start="1223:33" pos:end="1223:36"><expr pos:start="1223:33" pos:end="1223:36"><name pos:start="1223:33" pos:end="1223:36">arg1</name></expr></argument>, <argument pos:start="1223:39" pos:end="1223:42"><expr pos:start="1223:39" pos:end="1223:42"><name pos:start="1223:39" pos:end="1223:42">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1225:9" pos:end="1228:0">break;</break>

<cpp:ifdef pos:start="1227:1" pos:end="1227:23">#<cpp:directive pos:start="1227:2" pos:end="1227:6">ifdef</cpp:directive> <name pos:start="1227:8" pos:end="1227:23">TARGET_NR_ulimit</name></cpp:ifdef>

    <case pos:start="1229:5" pos:end="1229:26">case <expr pos:start="1229:10" pos:end="1229:25"><name pos:start="1229:10" pos:end="1229:25">TARGET_NR_ulimit</name></expr>:</case>

        <goto pos:start="1231:9" pos:end="1236:0">goto <name pos:start="1231:14" pos:end="1231:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1233:1" pos:end="1233:6">#<cpp:directive pos:start="1233:2" pos:end="1233:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1235:1" pos:end="1235:28">#<cpp:directive pos:start="1235:2" pos:end="1235:6">ifdef</cpp:directive> <name pos:start="1235:8" pos:end="1235:28">TARGET_NR_oldolduname</name></cpp:ifdef>

    <case pos:start="1237:5" pos:end="1237:31">case <expr pos:start="1237:10" pos:end="1237:30"><name pos:start="1237:10" pos:end="1237:30">TARGET_NR_oldolduname</name></expr>:</case>

        <goto pos:start="1239:9" pos:end="1242:0">goto <name pos:start="1239:14" pos:end="1239:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1241:1" pos:end="1241:6">#<cpp:directive pos:start="1241:2" pos:end="1241:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1243:5" pos:end="1243:25">case <expr pos:start="1243:10" pos:end="1243:24"><name pos:start="1243:10" pos:end="1243:24">TARGET_NR_umask</name></expr>:</case>

        <expr_stmt pos:start="1245:9" pos:end="1245:37"><expr pos:start="1245:9" pos:end="1245:36"><name pos:start="1245:9" pos:end="1245:11">ret</name> <operator pos:start="1245:13" pos:end="1245:13">=</operator> <call pos:start="1245:15" pos:end="1245:36"><name pos:start="1245:15" pos:end="1245:23">get_errno</name><argument_list pos:start="1245:24" pos:end="1245:36">(<argument pos:start="1245:25" pos:end="1245:35"><expr pos:start="1245:25" pos:end="1245:35"><call pos:start="1245:25" pos:end="1245:35"><name pos:start="1245:25" pos:end="1245:29">umask</name><argument_list pos:start="1245:30" pos:end="1245:35">(<argument pos:start="1245:31" pos:end="1245:34"><expr pos:start="1245:31" pos:end="1245:34"><name pos:start="1245:31" pos:end="1245:34">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1247:9" pos:end="1247:14">break;</break>

    <case pos:start="1249:5" pos:end="1249:26">case <expr pos:start="1249:10" pos:end="1249:25"><name pos:start="1249:10" pos:end="1249:25">TARGET_NR_chroot</name></expr>:</case>

        <if_stmt pos:start="1251:9" pos:end="1253:24"><if pos:start="1251:9" pos:end="1253:24">if <condition pos:start="1251:12" pos:end="1251:42">(<expr pos:start="1251:13" pos:end="1251:41"><operator pos:start="1251:13" pos:end="1251:13">!</operator><operator pos:start="1251:14" pos:end="1251:14">(</operator><name pos:start="1251:15" pos:end="1251:15">p</name> <operator pos:start="1251:17" pos:end="1251:17">=</operator> <call pos:start="1251:19" pos:end="1251:40"><name pos:start="1251:19" pos:end="1251:34">lock_user_string</name><argument_list pos:start="1251:35" pos:end="1251:40">(<argument pos:start="1251:36" pos:end="1251:39"><expr pos:start="1251:36" pos:end="1251:39"><name pos:start="1251:36" pos:end="1251:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1251:41" pos:end="1251:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1253:13" pos:end="1253:24"><block_content pos:start="1253:13" pos:end="1253:24">

            <goto pos:start="1253:13" pos:end="1253:24">goto <name pos:start="1253:18" pos:end="1253:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1255:9" pos:end="1255:35"><expr pos:start="1255:9" pos:end="1255:34"><name pos:start="1255:9" pos:end="1255:11">ret</name> <operator pos:start="1255:13" pos:end="1255:13">=</operator> <call pos:start="1255:15" pos:end="1255:34"><name pos:start="1255:15" pos:end="1255:23">get_errno</name><argument_list pos:start="1255:24" pos:end="1255:34">(<argument pos:start="1255:25" pos:end="1255:33"><expr pos:start="1255:25" pos:end="1255:33"><call pos:start="1255:25" pos:end="1255:33"><name pos:start="1255:25" pos:end="1255:30">chroot</name><argument_list pos:start="1255:31" pos:end="1255:33">(<argument pos:start="1255:32" pos:end="1255:32"><expr pos:start="1255:32" pos:end="1255:32"><name pos:start="1255:32" pos:end="1255:32">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1257:9" pos:end="1257:32"><expr pos:start="1257:9" pos:end="1257:31"><call pos:start="1257:9" pos:end="1257:31"><name pos:start="1257:9" pos:end="1257:19">unlock_user</name><argument_list pos:start="1257:20" pos:end="1257:31">(<argument pos:start="1257:21" pos:end="1257:21"><expr pos:start="1257:21" pos:end="1257:21"><name pos:start="1257:21" pos:end="1257:21">p</name></expr></argument>, <argument pos:start="1257:24" pos:end="1257:27"><expr pos:start="1257:24" pos:end="1257:27"><name pos:start="1257:24" pos:end="1257:27">arg1</name></expr></argument>, <argument pos:start="1257:30" pos:end="1257:30"><expr pos:start="1257:30" pos:end="1257:30"><literal type="number" pos:start="1257:30" pos:end="1257:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1259:9" pos:end="1259:14">break;</break>

    <case pos:start="1261:5" pos:end="1261:25">case <expr pos:start="1261:10" pos:end="1261:24"><name pos:start="1261:10" pos:end="1261:24">TARGET_NR_ustat</name></expr>:</case>

        <goto pos:start="1263:9" pos:end="1263:27">goto <name pos:start="1263:14" pos:end="1263:26">unimplemented</name>;</goto>

    <case pos:start="1265:5" pos:end="1265:24">case <expr pos:start="1265:10" pos:end="1265:23"><name pos:start="1265:10" pos:end="1265:23">TARGET_NR_dup2</name></expr>:</case>

        <expr_stmt pos:start="1267:9" pos:end="1267:42"><expr pos:start="1267:9" pos:end="1267:41"><name pos:start="1267:9" pos:end="1267:11">ret</name> <operator pos:start="1267:13" pos:end="1267:13">=</operator> <call pos:start="1267:15" pos:end="1267:41"><name pos:start="1267:15" pos:end="1267:23">get_errno</name><argument_list pos:start="1267:24" pos:end="1267:41">(<argument pos:start="1267:25" pos:end="1267:40"><expr pos:start="1267:25" pos:end="1267:40"><call pos:start="1267:25" pos:end="1267:40"><name pos:start="1267:25" pos:end="1267:28">dup2</name><argument_list pos:start="1267:29" pos:end="1267:40">(<argument pos:start="1267:30" pos:end="1267:33"><expr pos:start="1267:30" pos:end="1267:33"><name pos:start="1267:30" pos:end="1267:33">arg1</name></expr></argument>, <argument pos:start="1267:36" pos:end="1267:39"><expr pos:start="1267:36" pos:end="1267:39"><name pos:start="1267:36" pos:end="1267:39">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1269:9" pos:end="1272:0">break;</break>

<cpp:if pos:start="1271:1" pos:end="1271:51">#<cpp:directive pos:start="1271:2" pos:end="1271:3">if</cpp:directive> <expr pos:start="1271:5" pos:end="1271:51"><call pos:start="1271:5" pos:end="1271:24"><name pos:start="1271:5" pos:end="1271:11">defined</name><argument_list pos:start="1271:12" pos:end="1271:24">(<argument pos:start="1271:13" pos:end="1271:23"><expr pos:start="1271:13" pos:end="1271:23"><name pos:start="1271:13" pos:end="1271:23">CONFIG_DUP3</name></expr></argument>)</argument_list></call> <operator pos:start="1271:26" pos:end="1271:27">&amp;&amp;</operator> <call pos:start="1271:29" pos:end="1271:51"><name pos:start="1271:29" pos:end="1271:35">defined</name><argument_list pos:start="1271:36" pos:end="1271:51">(<argument pos:start="1271:37" pos:end="1271:50"><expr pos:start="1271:37" pos:end="1271:50"><name pos:start="1271:37" pos:end="1271:50">TARGET_NR_dup3</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="1273:5" pos:end="1273:24">case <expr pos:start="1273:10" pos:end="1273:23"><name pos:start="1273:10" pos:end="1273:23">TARGET_NR_dup3</name></expr>:</case>

        <expr_stmt pos:start="1275:9" pos:end="1275:48"><expr pos:start="1275:9" pos:end="1275:47"><name pos:start="1275:9" pos:end="1275:11">ret</name> <operator pos:start="1275:13" pos:end="1275:13">=</operator> <call pos:start="1275:15" pos:end="1275:47"><name pos:start="1275:15" pos:end="1275:23">get_errno</name><argument_list pos:start="1275:24" pos:end="1275:47">(<argument pos:start="1275:25" pos:end="1275:46"><expr pos:start="1275:25" pos:end="1275:46"><call pos:start="1275:25" pos:end="1275:46"><name pos:start="1275:25" pos:end="1275:28">dup3</name><argument_list pos:start="1275:29" pos:end="1275:46">(<argument pos:start="1275:30" pos:end="1275:33"><expr pos:start="1275:30" pos:end="1275:33"><name pos:start="1275:30" pos:end="1275:33">arg1</name></expr></argument>, <argument pos:start="1275:36" pos:end="1275:39"><expr pos:start="1275:36" pos:end="1275:39"><name pos:start="1275:36" pos:end="1275:39">arg2</name></expr></argument>, <argument pos:start="1275:42" pos:end="1275:45"><expr pos:start="1275:42" pos:end="1275:45"><name pos:start="1275:42" pos:end="1275:45">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1277:9" pos:end="1282:0">break;</break>

<cpp:endif pos:start="1279:1" pos:end="1279:6">#<cpp:directive pos:start="1279:2" pos:end="1279:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1281:1" pos:end="1281:24">#<cpp:directive pos:start="1281:2" pos:end="1281:6">ifdef</cpp:directive> <name pos:start="1281:8" pos:end="1281:24">TARGET_NR_getppid</name></cpp:ifdef> <comment type="block" pos:start="1281:26" pos:end="1281:43">/* not on alpha */</comment>

    <case pos:start="1283:5" pos:end="1283:27">case <expr pos:start="1283:10" pos:end="1283:26"><name pos:start="1283:10" pos:end="1283:26">TARGET_NR_getppid</name></expr>:</case>

        <expr_stmt pos:start="1285:9" pos:end="1285:35"><expr pos:start="1285:9" pos:end="1285:34"><name pos:start="1285:9" pos:end="1285:11">ret</name> <operator pos:start="1285:13" pos:end="1285:13">=</operator> <call pos:start="1285:15" pos:end="1285:34"><name pos:start="1285:15" pos:end="1285:23">get_errno</name><argument_list pos:start="1285:24" pos:end="1285:34">(<argument pos:start="1285:25" pos:end="1285:33"><expr pos:start="1285:25" pos:end="1285:33"><call pos:start="1285:25" pos:end="1285:33"><name pos:start="1285:25" pos:end="1285:31">getppid</name><argument_list pos:start="1285:32" pos:end="1285:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1287:9" pos:end="1290:0">break;</break>

<cpp:endif pos:start="1289:1" pos:end="1289:6">#<cpp:directive pos:start="1289:2" pos:end="1289:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1291:5" pos:end="1291:27">case <expr pos:start="1291:10" pos:end="1291:26"><name pos:start="1291:10" pos:end="1291:26">TARGET_NR_getpgrp</name></expr>:</case>

        <expr_stmt pos:start="1293:9" pos:end="1293:35"><expr pos:start="1293:9" pos:end="1293:34"><name pos:start="1293:9" pos:end="1293:11">ret</name> <operator pos:start="1293:13" pos:end="1293:13">=</operator> <call pos:start="1293:15" pos:end="1293:34"><name pos:start="1293:15" pos:end="1293:23">get_errno</name><argument_list pos:start="1293:24" pos:end="1293:34">(<argument pos:start="1293:25" pos:end="1293:33"><expr pos:start="1293:25" pos:end="1293:33"><call pos:start="1293:25" pos:end="1293:33"><name pos:start="1293:25" pos:end="1293:31">getpgrp</name><argument_list pos:start="1293:32" pos:end="1293:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1295:9" pos:end="1295:14">break;</break>

    <case pos:start="1297:5" pos:end="1297:26">case <expr pos:start="1297:10" pos:end="1297:25"><name pos:start="1297:10" pos:end="1297:25">TARGET_NR_setsid</name></expr>:</case>

        <expr_stmt pos:start="1299:9" pos:end="1299:34"><expr pos:start="1299:9" pos:end="1299:33"><name pos:start="1299:9" pos:end="1299:11">ret</name> <operator pos:start="1299:13" pos:end="1299:13">=</operator> <call pos:start="1299:15" pos:end="1299:33"><name pos:start="1299:15" pos:end="1299:23">get_errno</name><argument_list pos:start="1299:24" pos:end="1299:33">(<argument pos:start="1299:25" pos:end="1299:32"><expr pos:start="1299:25" pos:end="1299:32"><call pos:start="1299:25" pos:end="1299:32"><name pos:start="1299:25" pos:end="1299:30">setsid</name><argument_list pos:start="1299:31" pos:end="1299:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1301:9" pos:end="1304:0">break;</break>

<cpp:ifdef pos:start="1303:1" pos:end="1303:26">#<cpp:directive pos:start="1303:2" pos:end="1303:6">ifdef</cpp:directive> <name pos:start="1303:8" pos:end="1303:26">TARGET_NR_sigaction</name></cpp:ifdef>

    <case pos:start="1305:5" pos:end="1305:29">case <expr pos:start="1305:10" pos:end="1305:28"><name pos:start="1305:10" pos:end="1305:28">TARGET_NR_sigaction</name></expr>:</case>

        <block pos:start="1307:9" pos:end="1461:9">{<block_content pos:start="1311:13" pos:end="1460:0">

<cpp:if pos:start="1309:1" pos:end="1309:25">#<cpp:directive pos:start="1309:2" pos:end="1309:3">if</cpp:directive> <expr pos:start="1309:5" pos:end="1309:25"><call pos:start="1309:5" pos:end="1309:25"><name pos:start="1309:5" pos:end="1309:11">defined</name><argument_list pos:start="1309:12" pos:end="1309:25">(<argument pos:start="1309:13" pos:end="1309:24"><expr pos:start="1309:13" pos:end="1309:24"><name pos:start="1309:13" pos:end="1309:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <decl_stmt pos:start="1311:13" pos:end="1311:57"><decl pos:start="1311:13" pos:end="1311:39"><type pos:start="1311:13" pos:end="1311:35"><name pos:start="1311:13" pos:end="1311:35"><name pos:start="1311:13" pos:end="1311:18">struct</name> <name pos:start="1311:20" pos:end="1311:35">target_sigaction</name></name></type> <name pos:start="1311:37" pos:end="1311:39">act</name></decl>, <decl pos:start="1311:42" pos:end="1311:45"><type ref="prev" pos:start="1311:13" pos:end="1311:35"/><name pos:start="1311:42" pos:end="1311:45">oact</name></decl>, <decl pos:start="1311:48" pos:end="1311:56"><type ref="prev" pos:start="1311:13" pos:end="1311:35"><modifier pos:start="1311:48" pos:end="1311:48">*</modifier></type><name pos:start="1311:49" pos:end="1311:52">pact</name> <init pos:start="1311:54" pos:end="1311:56">= <expr pos:start="1311:56" pos:end="1311:56"><literal type="number" pos:start="1311:56" pos:end="1311:56">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="1313:13" pos:end="1313:49"><decl pos:start="1313:13" pos:end="1313:48"><type pos:start="1313:13" pos:end="1313:41"><name pos:start="1313:13" pos:end="1313:39"><name pos:start="1313:13" pos:end="1313:18">struct</name> <name pos:start="1313:20" pos:end="1313:39">target_old_sigaction</name></name> <modifier pos:start="1313:41" pos:end="1313:41">*</modifier></type><name pos:start="1313:42" pos:end="1313:48">old_act</name></decl>;</decl_stmt>

            <if_stmt pos:start="1315:13" pos:end="1333:13"><if pos:start="1315:13" pos:end="1333:13">if <condition pos:start="1315:16" pos:end="1315:21">(<expr pos:start="1315:17" pos:end="1315:20"><name pos:start="1315:17" pos:end="1315:20">arg2</name></expr>)</condition> <block pos:start="1315:23" pos:end="1333:13">{<block_content pos:start="1317:17" pos:end="1331:28">

                <if_stmt pos:start="1317:17" pos:end="1319:32"><if pos:start="1317:17" pos:end="1319:32">if <condition pos:start="1317:20" pos:end="1317:69">(<expr pos:start="1317:21" pos:end="1317:68"><operator pos:start="1317:21" pos:end="1317:21">!</operator><call pos:start="1317:22" pos:end="1317:68"><name pos:start="1317:22" pos:end="1317:37">lock_user_struct</name><argument_list pos:start="1317:38" pos:end="1317:68">(<argument pos:start="1317:39" pos:end="1317:49"><expr pos:start="1317:39" pos:end="1317:49"><name pos:start="1317:39" pos:end="1317:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1317:52" pos:end="1317:58"><expr pos:start="1317:52" pos:end="1317:58"><name pos:start="1317:52" pos:end="1317:58">old_act</name></expr></argument>, <argument pos:start="1317:61" pos:end="1317:64"><expr pos:start="1317:61" pos:end="1317:64"><name pos:start="1317:61" pos:end="1317:64">arg2</name></expr></argument>, <argument pos:start="1317:67" pos:end="1317:67"><expr pos:start="1317:67" pos:end="1317:67"><literal type="number" pos:start="1317:67" pos:end="1317:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1319:21" pos:end="1319:32"><block_content pos:start="1319:21" pos:end="1319:32">

                    <goto pos:start="1319:21" pos:end="1319:32">goto <name pos:start="1319:26" pos:end="1319:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1321:17" pos:end="1321:55"><expr pos:start="1321:17" pos:end="1321:54"><name pos:start="1321:17" pos:end="1321:31"><name pos:start="1321:17" pos:end="1321:19">act</name><operator pos:start="1321:20" pos:end="1321:20">.</operator><name pos:start="1321:21" pos:end="1321:31">_sa_handler</name></name> <operator pos:start="1321:33" pos:end="1321:33">=</operator> <name pos:start="1321:35" pos:end="1321:54"><name pos:start="1321:35" pos:end="1321:41">old_act</name><operator pos:start="1321:42" pos:end="1321:43">-&gt;</operator><name pos:start="1321:44" pos:end="1321:54">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1323:17" pos:end="1323:66"><expr pos:start="1323:17" pos:end="1323:65"><call pos:start="1323:17" pos:end="1323:65"><name pos:start="1323:17" pos:end="1323:33">target_siginitset</name><argument_list pos:start="1323:34" pos:end="1323:65">(<argument pos:start="1323:35" pos:end="1323:46"><expr pos:start="1323:35" pos:end="1323:46"><operator pos:start="1323:35" pos:end="1323:35">&amp;</operator><name pos:start="1323:36" pos:end="1323:46"><name pos:start="1323:36" pos:end="1323:38">act</name><operator pos:start="1323:39" pos:end="1323:39">.</operator><name pos:start="1323:40" pos:end="1323:46">sa_mask</name></name></expr></argument>, <argument pos:start="1323:49" pos:end="1323:64"><expr pos:start="1323:49" pos:end="1323:64"><name pos:start="1323:49" pos:end="1323:64"><name pos:start="1323:49" pos:end="1323:55">old_act</name><operator pos:start="1323:56" pos:end="1323:57">-&gt;</operator><name pos:start="1323:58" pos:end="1323:64">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1325:17" pos:end="1325:49"><expr pos:start="1325:17" pos:end="1325:48"><name pos:start="1325:17" pos:end="1325:28"><name pos:start="1325:17" pos:end="1325:19">act</name><operator pos:start="1325:20" pos:end="1325:20">.</operator><name pos:start="1325:21" pos:end="1325:28">sa_flags</name></name> <operator pos:start="1325:30" pos:end="1325:30">=</operator> <name pos:start="1325:32" pos:end="1325:48"><name pos:start="1325:32" pos:end="1325:38">old_act</name><operator pos:start="1325:39" pos:end="1325:40">-&gt;</operator><name pos:start="1325:41" pos:end="1325:48">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1327:17" pos:end="1327:36"><expr pos:start="1327:17" pos:end="1327:35"><name pos:start="1327:17" pos:end="1327:31"><name pos:start="1327:17" pos:end="1327:19">act</name><operator pos:start="1327:20" pos:end="1327:20">.</operator><name pos:start="1327:21" pos:end="1327:31">sa_restorer</name></name> <operator pos:start="1327:33" pos:end="1327:33">=</operator> <literal type="number" pos:start="1327:35" pos:end="1327:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1329:17" pos:end="1329:53"><expr pos:start="1329:17" pos:end="1329:52"><call pos:start="1329:17" pos:end="1329:52"><name pos:start="1329:17" pos:end="1329:34">unlock_user_struct</name><argument_list pos:start="1329:35" pos:end="1329:52">(<argument pos:start="1329:36" pos:end="1329:42"><expr pos:start="1329:36" pos:end="1329:42"><name pos:start="1329:36" pos:end="1329:42">old_act</name></expr></argument>, <argument pos:start="1329:45" pos:end="1329:48"><expr pos:start="1329:45" pos:end="1329:48"><name pos:start="1329:45" pos:end="1329:48">arg2</name></expr></argument>, <argument pos:start="1329:51" pos:end="1329:51"><expr pos:start="1329:51" pos:end="1329:51"><literal type="number" pos:start="1329:51" pos:end="1329:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1331:17" pos:end="1331:28"><expr pos:start="1331:17" pos:end="1331:27"><name pos:start="1331:17" pos:end="1331:20">pact</name> <operator pos:start="1331:22" pos:end="1331:22">=</operator> <operator pos:start="1331:24" pos:end="1331:24">&amp;</operator><name pos:start="1331:25" pos:end="1331:27">act</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1335:13" pos:end="1335:61"><expr pos:start="1335:13" pos:end="1335:60"><name pos:start="1335:13" pos:end="1335:15">ret</name> <operator pos:start="1335:17" pos:end="1335:17">=</operator> <call pos:start="1335:19" pos:end="1335:60"><name pos:start="1335:19" pos:end="1335:27">get_errno</name><argument_list pos:start="1335:28" pos:end="1335:60">(<argument pos:start="1335:29" pos:end="1335:59"><expr pos:start="1335:29" pos:end="1335:59"><call pos:start="1335:29" pos:end="1335:59"><name pos:start="1335:29" pos:end="1335:40">do_sigaction</name><argument_list pos:start="1335:41" pos:end="1335:59">(<argument pos:start="1335:42" pos:end="1335:45"><expr pos:start="1335:42" pos:end="1335:45"><name pos:start="1335:42" pos:end="1335:45">arg1</name></expr></argument>, <argument pos:start="1335:48" pos:end="1335:51"><expr pos:start="1335:48" pos:end="1335:51"><name pos:start="1335:48" pos:end="1335:51">pact</name></expr></argument>, <argument pos:start="1335:54" pos:end="1335:58"><expr pos:start="1335:54" pos:end="1335:58"><operator pos:start="1335:54" pos:end="1335:54">&amp;</operator><name pos:start="1335:55" pos:end="1335:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1337:13" pos:end="1354:0"><if pos:start="1337:13" pos:end="1354:0">if <condition pos:start="1337:16" pos:end="1337:39">(<expr pos:start="1337:17" pos:end="1337:38"><operator pos:start="1337:17" pos:end="1337:17">!</operator><call pos:start="1337:18" pos:end="1337:30"><name pos:start="1337:18" pos:end="1337:25">is_error</name><argument_list pos:start="1337:26" pos:end="1337:30">(<argument pos:start="1337:27" pos:end="1337:29"><expr pos:start="1337:27" pos:end="1337:29"><name pos:start="1337:27" pos:end="1337:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1337:32" pos:end="1337:33">&amp;&amp;</operator> <name pos:start="1337:35" pos:end="1337:38">arg3</name></expr>)</condition> <block pos:start="1337:41" pos:end="1354:0">{<block_content pos:start="1339:17" pos:end="1349:53">

                <if_stmt pos:start="1339:17" pos:end="1341:32"><if pos:start="1339:17" pos:end="1341:32">if <condition pos:start="1339:20" pos:end="1339:70">(<expr pos:start="1339:21" pos:end="1339:69"><operator pos:start="1339:21" pos:end="1339:21">!</operator><call pos:start="1339:22" pos:end="1339:69"><name pos:start="1339:22" pos:end="1339:37">lock_user_struct</name><argument_list pos:start="1339:38" pos:end="1339:69">(<argument pos:start="1339:39" pos:end="1339:50"><expr pos:start="1339:39" pos:end="1339:50"><name pos:start="1339:39" pos:end="1339:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1339:53" pos:end="1339:59"><expr pos:start="1339:53" pos:end="1339:59"><name pos:start="1339:53" pos:end="1339:59">old_act</name></expr></argument>, <argument pos:start="1339:62" pos:end="1339:65"><expr pos:start="1339:62" pos:end="1339:65"><name pos:start="1339:62" pos:end="1339:65">arg3</name></expr></argument>, <argument pos:start="1339:68" pos:end="1339:68"><expr pos:start="1339:68" pos:end="1339:68"><literal type="number" pos:start="1339:68" pos:end="1339:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1341:21" pos:end="1341:32"><block_content pos:start="1341:21" pos:end="1341:32">

                    <goto pos:start="1341:21" pos:end="1341:32">goto <name pos:start="1341:26" pos:end="1341:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1343:17" pos:end="1343:56"><expr pos:start="1343:17" pos:end="1343:55"><name pos:start="1343:17" pos:end="1343:36"><name pos:start="1343:17" pos:end="1343:23">old_act</name><operator pos:start="1343:24" pos:end="1343:25">-&gt;</operator><name pos:start="1343:26" pos:end="1343:36">_sa_handler</name></name> <operator pos:start="1343:38" pos:end="1343:38">=</operator> <name pos:start="1343:40" pos:end="1343:55"><name pos:start="1343:40" pos:end="1343:43">oact</name><operator pos:start="1343:44" pos:end="1343:44">.</operator><name pos:start="1343:45" pos:end="1343:55">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1345:17" pos:end="1345:55"><expr pos:start="1345:17" pos:end="1345:54"><name pos:start="1345:17" pos:end="1345:32"><name pos:start="1345:17" pos:end="1345:23">old_act</name><operator pos:start="1345:24" pos:end="1345:25">-&gt;</operator><name pos:start="1345:26" pos:end="1345:32">sa_mask</name></name> <operator pos:start="1345:34" pos:end="1345:34">=</operator> <name pos:start="1345:36" pos:end="1345:54"><name pos:start="1345:36" pos:end="1345:39">oact</name><operator pos:start="1345:40" pos:end="1345:40">.</operator><name pos:start="1345:41" pos:end="1345:47">sa_mask</name><operator pos:start="1345:48" pos:end="1345:48">.</operator><name pos:start="1345:49" pos:end="1345:51">sig</name><index pos:start="1345:52" pos:end="1345:54">[<expr pos:start="1345:53" pos:end="1345:53"><literal type="number" pos:start="1345:53" pos:end="1345:53">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1347:17" pos:end="1347:50"><expr pos:start="1347:17" pos:end="1347:49"><name pos:start="1347:17" pos:end="1347:33"><name pos:start="1347:17" pos:end="1347:23">old_act</name><operator pos:start="1347:24" pos:end="1347:25">-&gt;</operator><name pos:start="1347:26" pos:end="1347:33">sa_flags</name></name> <operator pos:start="1347:35" pos:end="1347:35">=</operator> <name pos:start="1347:37" pos:end="1347:49"><name pos:start="1347:37" pos:end="1347:40">oact</name><operator pos:start="1347:41" pos:end="1347:41">.</operator><name pos:start="1347:42" pos:end="1347:49">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1349:17" pos:end="1349:53"><expr pos:start="1349:17" pos:end="1349:52"><call pos:start="1349:17" pos:end="1349:52"><name pos:start="1349:17" pos:end="1349:34">unlock_user_struct</name><argument_list pos:start="1349:35" pos:end="1349:52">(<argument pos:start="1349:36" pos:end="1349:42"><expr pos:start="1349:36" pos:end="1349:42"><name pos:start="1349:36" pos:end="1349:42">old_act</name></expr></argument>, <argument pos:start="1349:45" pos:end="1349:48"><expr pos:start="1349:45" pos:end="1349:48"><name pos:start="1349:45" pos:end="1349:48">arg3</name></expr></argument>, <argument pos:start="1349:51" pos:end="1349:51"><expr pos:start="1349:51" pos:end="1349:51"><literal type="number" pos:start="1349:51" pos:end="1349:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="1353:1" pos:end="1353:26">#<cpp:directive pos:start="1353:2" pos:end="1353:5">elif</cpp:directive> <expr pos:start="1353:7" pos:end="1353:26"><call pos:start="1353:7" pos:end="1353:26"><name pos:start="1353:7" pos:end="1353:13">defined</name><argument_list pos:start="1353:14" pos:end="1353:26">(<argument pos:start="1353:15" pos:end="1353:25"><expr pos:start="1353:15" pos:end="1353:25"><name pos:start="1353:15" pos:end="1353:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

	    <decl_stmt pos:start="1355:13" pos:end="1355:63"><decl pos:start="1355:13" pos:end="1355:39"><type pos:start="1355:13" pos:end="1355:35"><name pos:start="1355:13" pos:end="1355:35"><name pos:start="1355:13" pos:end="1355:18">struct</name> <name pos:start="1355:20" pos:end="1355:35">target_sigaction</name></name></type> <name pos:start="1355:37" pos:end="1355:39">act</name></decl>, <decl pos:start="1355:42" pos:end="1355:45"><type ref="prev" pos:start="1355:13" pos:end="1355:35"/><name pos:start="1355:42" pos:end="1355:45">oact</name></decl>, <decl pos:start="1355:48" pos:end="1355:52"><type ref="prev" pos:start="1355:13" pos:end="1355:35"><modifier pos:start="1355:48" pos:end="1355:48">*</modifier></type><name pos:start="1355:49" pos:end="1355:52">pact</name></decl>, <decl pos:start="1355:55" pos:end="1355:62"><type ref="prev" pos:start="1355:13" pos:end="1355:35"><modifier pos:start="1355:55" pos:end="1355:55">*</modifier></type><name pos:start="1355:56" pos:end="1355:62">old_act</name></decl>;</decl_stmt>



	    <if_stmt pos:start="1359:13" pos:end="1379:13"><if pos:start="1359:13" pos:end="1375:13">if <condition pos:start="1359:16" pos:end="1359:21">(<expr pos:start="1359:17" pos:end="1359:20"><name pos:start="1359:17" pos:end="1359:20">arg2</name></expr>)</condition> <block pos:start="1359:23" pos:end="1375:13">{<block_content pos:start="1361:17" pos:end="1373:28">

                <if_stmt pos:start="1361:17" pos:end="1363:32"><if pos:start="1361:17" pos:end="1363:32">if <condition pos:start="1361:20" pos:end="1361:69">(<expr pos:start="1361:21" pos:end="1361:68"><operator pos:start="1361:21" pos:end="1361:21">!</operator><call pos:start="1361:22" pos:end="1361:68"><name pos:start="1361:22" pos:end="1361:37">lock_user_struct</name><argument_list pos:start="1361:38" pos:end="1361:68">(<argument pos:start="1361:39" pos:end="1361:49"><expr pos:start="1361:39" pos:end="1361:49"><name pos:start="1361:39" pos:end="1361:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1361:52" pos:end="1361:58"><expr pos:start="1361:52" pos:end="1361:58"><name pos:start="1361:52" pos:end="1361:58">old_act</name></expr></argument>, <argument pos:start="1361:61" pos:end="1361:64"><expr pos:start="1361:61" pos:end="1361:64"><name pos:start="1361:61" pos:end="1361:64">arg2</name></expr></argument>, <argument pos:start="1361:67" pos:end="1361:67"><expr pos:start="1361:67" pos:end="1361:67"><literal type="number" pos:start="1361:67" pos:end="1361:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1363:21" pos:end="1363:32"><block_content pos:start="1363:21" pos:end="1363:32">

                    <goto pos:start="1363:21" pos:end="1363:32">goto <name pos:start="1363:26" pos:end="1363:31">efault</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt pos:start="1365:17" pos:end="1365:55"><expr pos:start="1365:17" pos:end="1365:54"><name pos:start="1365:17" pos:end="1365:31"><name pos:start="1365:17" pos:end="1365:19">act</name><operator pos:start="1365:20" pos:end="1365:20">.</operator><name pos:start="1365:21" pos:end="1365:31">_sa_handler</name></name> <operator pos:start="1365:33" pos:end="1365:33">=</operator> <name pos:start="1365:35" pos:end="1365:54"><name pos:start="1365:35" pos:end="1365:41">old_act</name><operator pos:start="1365:42" pos:end="1365:43">-&gt;</operator><name pos:start="1365:44" pos:end="1365:54">_sa_handler</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1367:17" pos:end="1367:73"><expr pos:start="1367:17" pos:end="1367:72"><call pos:start="1367:17" pos:end="1367:72"><name pos:start="1367:17" pos:end="1367:33">target_siginitset</name><argument_list pos:start="1367:34" pos:end="1367:72">(<argument pos:start="1367:35" pos:end="1367:46"><expr pos:start="1367:35" pos:end="1367:46"><operator pos:start="1367:35" pos:end="1367:35">&amp;</operator><name pos:start="1367:36" pos:end="1367:46"><name pos:start="1367:36" pos:end="1367:38">act</name><operator pos:start="1367:39" pos:end="1367:39">.</operator><name pos:start="1367:40" pos:end="1367:46">sa_mask</name></name></expr></argument>, <argument pos:start="1367:49" pos:end="1367:71"><expr pos:start="1367:49" pos:end="1367:71"><name pos:start="1367:49" pos:end="1367:71"><name pos:start="1367:49" pos:end="1367:55">old_act</name><operator pos:start="1367:56" pos:end="1367:57">-&gt;</operator><name pos:start="1367:58" pos:end="1367:64">sa_mask</name><operator pos:start="1367:65" pos:end="1367:65">.</operator><name pos:start="1367:66" pos:end="1367:68">sig</name><index pos:start="1367:69" pos:end="1367:71">[<expr pos:start="1367:70" pos:end="1367:70"><literal type="number" pos:start="1367:70" pos:end="1367:70">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="1369:17" pos:end="1369:49"><expr pos:start="1369:17" pos:end="1369:48"><name pos:start="1369:17" pos:end="1369:28"><name pos:start="1369:17" pos:end="1369:19">act</name><operator pos:start="1369:20" pos:end="1369:20">.</operator><name pos:start="1369:21" pos:end="1369:28">sa_flags</name></name> <operator pos:start="1369:30" pos:end="1369:30">=</operator> <name pos:start="1369:32" pos:end="1369:48"><name pos:start="1369:32" pos:end="1369:38">old_act</name><operator pos:start="1369:39" pos:end="1369:40">-&gt;</operator><name pos:start="1369:41" pos:end="1369:48">sa_flags</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1371:17" pos:end="1371:53"><expr pos:start="1371:17" pos:end="1371:52"><call pos:start="1371:17" pos:end="1371:52"><name pos:start="1371:17" pos:end="1371:34">unlock_user_struct</name><argument_list pos:start="1371:35" pos:end="1371:52">(<argument pos:start="1371:36" pos:end="1371:42"><expr pos:start="1371:36" pos:end="1371:42"><name pos:start="1371:36" pos:end="1371:42">old_act</name></expr></argument>, <argument pos:start="1371:45" pos:end="1371:48"><expr pos:start="1371:45" pos:end="1371:48"><name pos:start="1371:45" pos:end="1371:48">arg2</name></expr></argument>, <argument pos:start="1371:51" pos:end="1371:51"><expr pos:start="1371:51" pos:end="1371:51"><literal type="number" pos:start="1371:51" pos:end="1371:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="1373:17" pos:end="1373:28"><expr pos:start="1373:17" pos:end="1373:27"><name pos:start="1373:17" pos:end="1373:20">pact</name> <operator pos:start="1373:22" pos:end="1373:22">=</operator> <operator pos:start="1373:24" pos:end="1373:24">&amp;</operator><name pos:start="1373:25" pos:end="1373:27">act</name></expr>;</expr_stmt>

	    </block_content>}</block></if> <else pos:start="1375:15" pos:end="1379:13">else <block pos:start="1375:20" pos:end="1379:13">{<block_content pos:start="1377:17" pos:end="1377:28">

		<expr_stmt pos:start="1377:17" pos:end="1377:28"><expr pos:start="1377:17" pos:end="1377:27"><name pos:start="1377:17" pos:end="1377:20">pact</name> <operator pos:start="1377:22" pos:end="1377:22">=</operator> <name pos:start="1377:24" pos:end="1377:27">NULL</name></expr>;</expr_stmt>

	    </block_content>}</block></else></if_stmt>



	    <expr_stmt pos:start="1383:13" pos:end="1383:61"><expr pos:start="1383:13" pos:end="1383:60"><name pos:start="1383:13" pos:end="1383:15">ret</name> <operator pos:start="1383:17" pos:end="1383:17">=</operator> <call pos:start="1383:19" pos:end="1383:60"><name pos:start="1383:19" pos:end="1383:27">get_errno</name><argument_list pos:start="1383:28" pos:end="1383:60">(<argument pos:start="1383:29" pos:end="1383:59"><expr pos:start="1383:29" pos:end="1383:59"><call pos:start="1383:29" pos:end="1383:59"><name pos:start="1383:29" pos:end="1383:40">do_sigaction</name><argument_list pos:start="1383:41" pos:end="1383:59">(<argument pos:start="1383:42" pos:end="1383:45"><expr pos:start="1383:42" pos:end="1383:45"><name pos:start="1383:42" pos:end="1383:45">arg1</name></expr></argument>, <argument pos:start="1383:48" pos:end="1383:51"><expr pos:start="1383:48" pos:end="1383:51"><name pos:start="1383:48" pos:end="1383:51">pact</name></expr></argument>, <argument pos:start="1383:54" pos:end="1383:58"><expr pos:start="1383:54" pos:end="1383:58"><operator pos:start="1383:54" pos:end="1383:54">&amp;</operator><name pos:start="1383:55" pos:end="1383:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	    <if_stmt pos:start="1387:13" pos:end="1410:0"><if pos:start="1387:13" pos:end="1410:0">if <condition pos:start="1387:16" pos:end="1387:39">(<expr pos:start="1387:17" pos:end="1387:38"><operator pos:start="1387:17" pos:end="1387:17">!</operator><call pos:start="1387:18" pos:end="1387:30"><name pos:start="1387:18" pos:end="1387:25">is_error</name><argument_list pos:start="1387:26" pos:end="1387:30">(<argument pos:start="1387:27" pos:end="1387:29"><expr pos:start="1387:27" pos:end="1387:29"><name pos:start="1387:27" pos:end="1387:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1387:32" pos:end="1387:33">&amp;&amp;</operator> <name pos:start="1387:35" pos:end="1387:38">arg3</name></expr>)</condition> <block pos:start="1387:41" pos:end="1410:0">{<block_content pos:start="1389:17" pos:end="1405:53">

                <if_stmt pos:start="1389:17" pos:end="1391:32"><if pos:start="1389:17" pos:end="1391:32">if <condition pos:start="1389:20" pos:end="1389:70">(<expr pos:start="1389:21" pos:end="1389:69"><operator pos:start="1389:21" pos:end="1389:21">!</operator><call pos:start="1389:22" pos:end="1389:69"><name pos:start="1389:22" pos:end="1389:37">lock_user_struct</name><argument_list pos:start="1389:38" pos:end="1389:69">(<argument pos:start="1389:39" pos:end="1389:50"><expr pos:start="1389:39" pos:end="1389:50"><name pos:start="1389:39" pos:end="1389:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1389:53" pos:end="1389:59"><expr pos:start="1389:53" pos:end="1389:59"><name pos:start="1389:53" pos:end="1389:59">old_act</name></expr></argument>, <argument pos:start="1389:62" pos:end="1389:65"><expr pos:start="1389:62" pos:end="1389:65"><name pos:start="1389:62" pos:end="1389:65">arg3</name></expr></argument>, <argument pos:start="1389:68" pos:end="1389:68"><expr pos:start="1389:68" pos:end="1389:68"><literal type="number" pos:start="1389:68" pos:end="1389:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1391:21" pos:end="1391:32"><block_content pos:start="1391:21" pos:end="1391:32">

                    <goto pos:start="1391:21" pos:end="1391:32">goto <name pos:start="1391:26" pos:end="1391:31">efault</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt pos:start="1393:17" pos:end="1393:56"><expr pos:start="1393:17" pos:end="1393:55"><name pos:start="1393:17" pos:end="1393:36"><name pos:start="1393:17" pos:end="1393:23">old_act</name><operator pos:start="1393:24" pos:end="1393:25">-&gt;</operator><name pos:start="1393:26" pos:end="1393:36">_sa_handler</name></name> <operator pos:start="1393:38" pos:end="1393:38">=</operator> <name pos:start="1393:40" pos:end="1393:55"><name pos:start="1393:40" pos:end="1393:43">oact</name><operator pos:start="1393:44" pos:end="1393:44">.</operator><name pos:start="1393:45" pos:end="1393:55">_sa_handler</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1395:17" pos:end="1395:50"><expr pos:start="1395:17" pos:end="1395:49"><name pos:start="1395:17" pos:end="1395:33"><name pos:start="1395:17" pos:end="1395:23">old_act</name><operator pos:start="1395:24" pos:end="1395:25">-&gt;</operator><name pos:start="1395:26" pos:end="1395:33">sa_flags</name></name> <operator pos:start="1395:35" pos:end="1395:35">=</operator> <name pos:start="1395:37" pos:end="1395:49"><name pos:start="1395:37" pos:end="1395:40">oact</name><operator pos:start="1395:41" pos:end="1395:41">.</operator><name pos:start="1395:42" pos:end="1395:49">sa_flags</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1397:17" pos:end="1397:62"><expr pos:start="1397:17" pos:end="1397:61"><name pos:start="1397:17" pos:end="1397:39"><name pos:start="1397:17" pos:end="1397:23">old_act</name><operator pos:start="1397:24" pos:end="1397:25">-&gt;</operator><name pos:start="1397:26" pos:end="1397:32">sa_mask</name><operator pos:start="1397:33" pos:end="1397:33">.</operator><name pos:start="1397:34" pos:end="1397:36">sig</name><index pos:start="1397:37" pos:end="1397:39">[<expr pos:start="1397:38" pos:end="1397:38"><literal type="number" pos:start="1397:38" pos:end="1397:38">0</literal></expr>]</index></name> <operator pos:start="1397:41" pos:end="1397:41">=</operator> <name pos:start="1397:43" pos:end="1397:61"><name pos:start="1397:43" pos:end="1397:46">oact</name><operator pos:start="1397:47" pos:end="1397:47">.</operator><name pos:start="1397:48" pos:end="1397:54">sa_mask</name><operator pos:start="1397:55" pos:end="1397:55">.</operator><name pos:start="1397:56" pos:end="1397:58">sig</name><index pos:start="1397:59" pos:end="1397:61">[<expr pos:start="1397:60" pos:end="1397:60"><literal type="number" pos:start="1397:60" pos:end="1397:60">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1399:17" pos:end="1399:44"><expr pos:start="1399:17" pos:end="1399:43"><name pos:start="1399:17" pos:end="1399:39"><name pos:start="1399:17" pos:end="1399:23">old_act</name><operator pos:start="1399:24" pos:end="1399:25">-&gt;</operator><name pos:start="1399:26" pos:end="1399:32">sa_mask</name><operator pos:start="1399:33" pos:end="1399:33">.</operator><name pos:start="1399:34" pos:end="1399:36">sig</name><index pos:start="1399:37" pos:end="1399:39">[<expr pos:start="1399:38" pos:end="1399:38"><literal type="number" pos:start="1399:38" pos:end="1399:38">1</literal></expr>]</index></name> <operator pos:start="1399:41" pos:end="1399:41">=</operator> <literal type="number" pos:start="1399:43" pos:end="1399:43">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="1401:17" pos:end="1401:44"><expr pos:start="1401:17" pos:end="1401:43"><name pos:start="1401:17" pos:end="1401:39"><name pos:start="1401:17" pos:end="1401:23">old_act</name><operator pos:start="1401:24" pos:end="1401:25">-&gt;</operator><name pos:start="1401:26" pos:end="1401:32">sa_mask</name><operator pos:start="1401:33" pos:end="1401:33">.</operator><name pos:start="1401:34" pos:end="1401:36">sig</name><index pos:start="1401:37" pos:end="1401:39">[<expr pos:start="1401:38" pos:end="1401:38"><literal type="number" pos:start="1401:38" pos:end="1401:38">2</literal></expr>]</index></name> <operator pos:start="1401:41" pos:end="1401:41">=</operator> <literal type="number" pos:start="1401:43" pos:end="1401:43">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="1403:17" pos:end="1403:44"><expr pos:start="1403:17" pos:end="1403:43"><name pos:start="1403:17" pos:end="1403:39"><name pos:start="1403:17" pos:end="1403:23">old_act</name><operator pos:start="1403:24" pos:end="1403:25">-&gt;</operator><name pos:start="1403:26" pos:end="1403:32">sa_mask</name><operator pos:start="1403:33" pos:end="1403:33">.</operator><name pos:start="1403:34" pos:end="1403:36">sig</name><index pos:start="1403:37" pos:end="1403:39">[<expr pos:start="1403:38" pos:end="1403:38"><literal type="number" pos:start="1403:38" pos:end="1403:38">3</literal></expr>]</index></name> <operator pos:start="1403:41" pos:end="1403:41">=</operator> <literal type="number" pos:start="1403:43" pos:end="1403:43">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="1405:17" pos:end="1405:53"><expr pos:start="1405:17" pos:end="1405:52"><call pos:start="1405:17" pos:end="1405:52"><name pos:start="1405:17" pos:end="1405:34">unlock_user_struct</name><argument_list pos:start="1405:35" pos:end="1405:52">(<argument pos:start="1405:36" pos:end="1405:42"><expr pos:start="1405:36" pos:end="1405:42"><name pos:start="1405:36" pos:end="1405:42">old_act</name></expr></argument>, <argument pos:start="1405:45" pos:end="1405:48"><expr pos:start="1405:45" pos:end="1405:48"><name pos:start="1405:45" pos:end="1405:48">arg3</name></expr></argument>, <argument pos:start="1405:51" pos:end="1405:51"><expr pos:start="1405:51" pos:end="1405:51"><literal type="number" pos:start="1405:51" pos:end="1405:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="1409:1" pos:end="1409:5">#<cpp:directive pos:start="1409:2" pos:end="1409:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="1411:13" pos:end="1411:49"><decl pos:start="1411:13" pos:end="1411:48"><type pos:start="1411:13" pos:end="1411:41"><name pos:start="1411:13" pos:end="1411:39"><name pos:start="1411:13" pos:end="1411:18">struct</name> <name pos:start="1411:20" pos:end="1411:39">target_old_sigaction</name></name> <modifier pos:start="1411:41" pos:end="1411:41">*</modifier></type><name pos:start="1411:42" pos:end="1411:48">old_act</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1413:13" pos:end="1413:53"><decl pos:start="1413:13" pos:end="1413:39"><type pos:start="1413:13" pos:end="1413:35"><name pos:start="1413:13" pos:end="1413:35"><name pos:start="1413:13" pos:end="1413:18">struct</name> <name pos:start="1413:20" pos:end="1413:35">target_sigaction</name></name></type> <name pos:start="1413:37" pos:end="1413:39">act</name></decl>, <decl pos:start="1413:42" pos:end="1413:45"><type ref="prev" pos:start="1413:13" pos:end="1413:35"/><name pos:start="1413:42" pos:end="1413:45">oact</name></decl>, <decl pos:start="1413:48" pos:end="1413:52"><type ref="prev" pos:start="1413:13" pos:end="1413:35"><modifier pos:start="1413:48" pos:end="1413:48">*</modifier></type><name pos:start="1413:49" pos:end="1413:52">pact</name></decl>;</decl_stmt>

            <if_stmt pos:start="1415:13" pos:end="1437:13"><if pos:start="1415:13" pos:end="1433:13">if <condition pos:start="1415:16" pos:end="1415:21">(<expr pos:start="1415:17" pos:end="1415:20"><name pos:start="1415:17" pos:end="1415:20">arg2</name></expr>)</condition> <block pos:start="1415:23" pos:end="1433:13">{<block_content pos:start="1417:17" pos:end="1431:28">

                <if_stmt pos:start="1417:17" pos:end="1419:32"><if pos:start="1417:17" pos:end="1419:32">if <condition pos:start="1417:20" pos:end="1417:69">(<expr pos:start="1417:21" pos:end="1417:68"><operator pos:start="1417:21" pos:end="1417:21">!</operator><call pos:start="1417:22" pos:end="1417:68"><name pos:start="1417:22" pos:end="1417:37">lock_user_struct</name><argument_list pos:start="1417:38" pos:end="1417:68">(<argument pos:start="1417:39" pos:end="1417:49"><expr pos:start="1417:39" pos:end="1417:49"><name pos:start="1417:39" pos:end="1417:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1417:52" pos:end="1417:58"><expr pos:start="1417:52" pos:end="1417:58"><name pos:start="1417:52" pos:end="1417:58">old_act</name></expr></argument>, <argument pos:start="1417:61" pos:end="1417:64"><expr pos:start="1417:61" pos:end="1417:64"><name pos:start="1417:61" pos:end="1417:64">arg2</name></expr></argument>, <argument pos:start="1417:67" pos:end="1417:67"><expr pos:start="1417:67" pos:end="1417:67"><literal type="number" pos:start="1417:67" pos:end="1417:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1419:21" pos:end="1419:32"><block_content pos:start="1419:21" pos:end="1419:32">

                    <goto pos:start="1419:21" pos:end="1419:32">goto <name pos:start="1419:26" pos:end="1419:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1421:17" pos:end="1421:55"><expr pos:start="1421:17" pos:end="1421:54"><name pos:start="1421:17" pos:end="1421:31"><name pos:start="1421:17" pos:end="1421:19">act</name><operator pos:start="1421:20" pos:end="1421:20">.</operator><name pos:start="1421:21" pos:end="1421:31">_sa_handler</name></name> <operator pos:start="1421:33" pos:end="1421:33">=</operator> <name pos:start="1421:35" pos:end="1421:54"><name pos:start="1421:35" pos:end="1421:41">old_act</name><operator pos:start="1421:42" pos:end="1421:43">-&gt;</operator><name pos:start="1421:44" pos:end="1421:54">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1423:17" pos:end="1423:66"><expr pos:start="1423:17" pos:end="1423:65"><call pos:start="1423:17" pos:end="1423:65"><name pos:start="1423:17" pos:end="1423:33">target_siginitset</name><argument_list pos:start="1423:34" pos:end="1423:65">(<argument pos:start="1423:35" pos:end="1423:46"><expr pos:start="1423:35" pos:end="1423:46"><operator pos:start="1423:35" pos:end="1423:35">&amp;</operator><name pos:start="1423:36" pos:end="1423:46"><name pos:start="1423:36" pos:end="1423:38">act</name><operator pos:start="1423:39" pos:end="1423:39">.</operator><name pos:start="1423:40" pos:end="1423:46">sa_mask</name></name></expr></argument>, <argument pos:start="1423:49" pos:end="1423:64"><expr pos:start="1423:49" pos:end="1423:64"><name pos:start="1423:49" pos:end="1423:64"><name pos:start="1423:49" pos:end="1423:55">old_act</name><operator pos:start="1423:56" pos:end="1423:57">-&gt;</operator><name pos:start="1423:58" pos:end="1423:64">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1425:17" pos:end="1425:49"><expr pos:start="1425:17" pos:end="1425:48"><name pos:start="1425:17" pos:end="1425:28"><name pos:start="1425:17" pos:end="1425:19">act</name><operator pos:start="1425:20" pos:end="1425:20">.</operator><name pos:start="1425:21" pos:end="1425:28">sa_flags</name></name> <operator pos:start="1425:30" pos:end="1425:30">=</operator> <name pos:start="1425:32" pos:end="1425:48"><name pos:start="1425:32" pos:end="1425:38">old_act</name><operator pos:start="1425:39" pos:end="1425:40">-&gt;</operator><name pos:start="1425:41" pos:end="1425:48">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1427:17" pos:end="1427:55"><expr pos:start="1427:17" pos:end="1427:54"><name pos:start="1427:17" pos:end="1427:31"><name pos:start="1427:17" pos:end="1427:19">act</name><operator pos:start="1427:20" pos:end="1427:20">.</operator><name pos:start="1427:21" pos:end="1427:31">sa_restorer</name></name> <operator pos:start="1427:33" pos:end="1427:33">=</operator> <name pos:start="1427:35" pos:end="1427:54"><name pos:start="1427:35" pos:end="1427:41">old_act</name><operator pos:start="1427:42" pos:end="1427:43">-&gt;</operator><name pos:start="1427:44" pos:end="1427:54">sa_restorer</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1429:17" pos:end="1429:53"><expr pos:start="1429:17" pos:end="1429:52"><call pos:start="1429:17" pos:end="1429:52"><name pos:start="1429:17" pos:end="1429:34">unlock_user_struct</name><argument_list pos:start="1429:35" pos:end="1429:52">(<argument pos:start="1429:36" pos:end="1429:42"><expr pos:start="1429:36" pos:end="1429:42"><name pos:start="1429:36" pos:end="1429:42">old_act</name></expr></argument>, <argument pos:start="1429:45" pos:end="1429:48"><expr pos:start="1429:45" pos:end="1429:48"><name pos:start="1429:45" pos:end="1429:48">arg2</name></expr></argument>, <argument pos:start="1429:51" pos:end="1429:51"><expr pos:start="1429:51" pos:end="1429:51"><literal type="number" pos:start="1429:51" pos:end="1429:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1431:17" pos:end="1431:28"><expr pos:start="1431:17" pos:end="1431:27"><name pos:start="1431:17" pos:end="1431:20">pact</name> <operator pos:start="1431:22" pos:end="1431:22">=</operator> <operator pos:start="1431:24" pos:end="1431:24">&amp;</operator><name pos:start="1431:25" pos:end="1431:27">act</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1433:15" pos:end="1437:13">else <block pos:start="1433:20" pos:end="1437:13">{<block_content pos:start="1435:17" pos:end="1435:28">

                <expr_stmt pos:start="1435:17" pos:end="1435:28"><expr pos:start="1435:17" pos:end="1435:27"><name pos:start="1435:17" pos:end="1435:20">pact</name> <operator pos:start="1435:22" pos:end="1435:22">=</operator> <name pos:start="1435:24" pos:end="1435:27">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1439:13" pos:end="1439:61"><expr pos:start="1439:13" pos:end="1439:60"><name pos:start="1439:13" pos:end="1439:15">ret</name> <operator pos:start="1439:17" pos:end="1439:17">=</operator> <call pos:start="1439:19" pos:end="1439:60"><name pos:start="1439:19" pos:end="1439:27">get_errno</name><argument_list pos:start="1439:28" pos:end="1439:60">(<argument pos:start="1439:29" pos:end="1439:59"><expr pos:start="1439:29" pos:end="1439:59"><call pos:start="1439:29" pos:end="1439:59"><name pos:start="1439:29" pos:end="1439:40">do_sigaction</name><argument_list pos:start="1439:41" pos:end="1439:59">(<argument pos:start="1439:42" pos:end="1439:45"><expr pos:start="1439:42" pos:end="1439:45"><name pos:start="1439:42" pos:end="1439:45">arg1</name></expr></argument>, <argument pos:start="1439:48" pos:end="1439:51"><expr pos:start="1439:48" pos:end="1439:51"><name pos:start="1439:48" pos:end="1439:51">pact</name></expr></argument>, <argument pos:start="1439:54" pos:end="1439:58"><expr pos:start="1439:54" pos:end="1439:58"><operator pos:start="1439:54" pos:end="1439:54">&amp;</operator><name pos:start="1439:55" pos:end="1439:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1441:13" pos:end="1460:0"><if pos:start="1441:13" pos:end="1460:0">if <condition pos:start="1441:16" pos:end="1441:39">(<expr pos:start="1441:17" pos:end="1441:38"><operator pos:start="1441:17" pos:end="1441:17">!</operator><call pos:start="1441:18" pos:end="1441:30"><name pos:start="1441:18" pos:end="1441:25">is_error</name><argument_list pos:start="1441:26" pos:end="1441:30">(<argument pos:start="1441:27" pos:end="1441:29"><expr pos:start="1441:27" pos:end="1441:29"><name pos:start="1441:27" pos:end="1441:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1441:32" pos:end="1441:33">&amp;&amp;</operator> <name pos:start="1441:35" pos:end="1441:38">arg3</name></expr>)</condition> <block pos:start="1441:41" pos:end="1460:0">{<block_content pos:start="1443:17" pos:end="1455:53">

                <if_stmt pos:start="1443:17" pos:end="1445:32"><if pos:start="1443:17" pos:end="1445:32">if <condition pos:start="1443:20" pos:end="1443:70">(<expr pos:start="1443:21" pos:end="1443:69"><operator pos:start="1443:21" pos:end="1443:21">!</operator><call pos:start="1443:22" pos:end="1443:69"><name pos:start="1443:22" pos:end="1443:37">lock_user_struct</name><argument_list pos:start="1443:38" pos:end="1443:69">(<argument pos:start="1443:39" pos:end="1443:50"><expr pos:start="1443:39" pos:end="1443:50"><name pos:start="1443:39" pos:end="1443:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1443:53" pos:end="1443:59"><expr pos:start="1443:53" pos:end="1443:59"><name pos:start="1443:53" pos:end="1443:59">old_act</name></expr></argument>, <argument pos:start="1443:62" pos:end="1443:65"><expr pos:start="1443:62" pos:end="1443:65"><name pos:start="1443:62" pos:end="1443:65">arg3</name></expr></argument>, <argument pos:start="1443:68" pos:end="1443:68"><expr pos:start="1443:68" pos:end="1443:68"><literal type="number" pos:start="1443:68" pos:end="1443:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1445:21" pos:end="1445:32"><block_content pos:start="1445:21" pos:end="1445:32">

                    <goto pos:start="1445:21" pos:end="1445:32">goto <name pos:start="1445:26" pos:end="1445:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1447:17" pos:end="1447:56"><expr pos:start="1447:17" pos:end="1447:55"><name pos:start="1447:17" pos:end="1447:36"><name pos:start="1447:17" pos:end="1447:23">old_act</name><operator pos:start="1447:24" pos:end="1447:25">-&gt;</operator><name pos:start="1447:26" pos:end="1447:36">_sa_handler</name></name> <operator pos:start="1447:38" pos:end="1447:38">=</operator> <name pos:start="1447:40" pos:end="1447:55"><name pos:start="1447:40" pos:end="1447:43">oact</name><operator pos:start="1447:44" pos:end="1447:44">.</operator><name pos:start="1447:45" pos:end="1447:55">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1449:17" pos:end="1449:55"><expr pos:start="1449:17" pos:end="1449:54"><name pos:start="1449:17" pos:end="1449:32"><name pos:start="1449:17" pos:end="1449:23">old_act</name><operator pos:start="1449:24" pos:end="1449:25">-&gt;</operator><name pos:start="1449:26" pos:end="1449:32">sa_mask</name></name> <operator pos:start="1449:34" pos:end="1449:34">=</operator> <name pos:start="1449:36" pos:end="1449:54"><name pos:start="1449:36" pos:end="1449:39">oact</name><operator pos:start="1449:40" pos:end="1449:40">.</operator><name pos:start="1449:41" pos:end="1449:47">sa_mask</name><operator pos:start="1449:48" pos:end="1449:48">.</operator><name pos:start="1449:49" pos:end="1449:51">sig</name><index pos:start="1449:52" pos:end="1449:54">[<expr pos:start="1449:53" pos:end="1449:53"><literal type="number" pos:start="1449:53" pos:end="1449:53">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1451:17" pos:end="1451:50"><expr pos:start="1451:17" pos:end="1451:49"><name pos:start="1451:17" pos:end="1451:33"><name pos:start="1451:17" pos:end="1451:23">old_act</name><operator pos:start="1451:24" pos:end="1451:25">-&gt;</operator><name pos:start="1451:26" pos:end="1451:33">sa_flags</name></name> <operator pos:start="1451:35" pos:end="1451:35">=</operator> <name pos:start="1451:37" pos:end="1451:49"><name pos:start="1451:37" pos:end="1451:40">oact</name><operator pos:start="1451:41" pos:end="1451:41">.</operator><name pos:start="1451:42" pos:end="1451:49">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1453:17" pos:end="1453:56"><expr pos:start="1453:17" pos:end="1453:55"><name pos:start="1453:17" pos:end="1453:36"><name pos:start="1453:17" pos:end="1453:23">old_act</name><operator pos:start="1453:24" pos:end="1453:25">-&gt;</operator><name pos:start="1453:26" pos:end="1453:36">sa_restorer</name></name> <operator pos:start="1453:38" pos:end="1453:38">=</operator> <name pos:start="1453:40" pos:end="1453:55"><name pos:start="1453:40" pos:end="1453:43">oact</name><operator pos:start="1453:44" pos:end="1453:44">.</operator><name pos:start="1453:45" pos:end="1453:55">sa_restorer</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1455:17" pos:end="1455:53"><expr pos:start="1455:17" pos:end="1455:52"><call pos:start="1455:17" pos:end="1455:52"><name pos:start="1455:17" pos:end="1455:34">unlock_user_struct</name><argument_list pos:start="1455:35" pos:end="1455:52">(<argument pos:start="1455:36" pos:end="1455:42"><expr pos:start="1455:36" pos:end="1455:42"><name pos:start="1455:36" pos:end="1455:42">old_act</name></expr></argument>, <argument pos:start="1455:45" pos:end="1455:48"><expr pos:start="1455:45" pos:end="1455:48"><name pos:start="1455:45" pos:end="1455:48">arg3</name></expr></argument>, <argument pos:start="1455:51" pos:end="1455:51"><expr pos:start="1455:51" pos:end="1455:51"><literal type="number" pos:start="1455:51" pos:end="1455:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="1459:1" pos:end="1459:6">#<cpp:directive pos:start="1459:2" pos:end="1459:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block>

        <break pos:start="1463:9" pos:end="1466:0">break;</break>

<cpp:endif pos:start="1465:1" pos:end="1465:6">#<cpp:directive pos:start="1465:2" pos:end="1465:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1467:5" pos:end="1467:32">case <expr pos:start="1467:10" pos:end="1467:31"><name pos:start="1467:10" pos:end="1467:31">TARGET_NR_rt_sigaction</name></expr>:</case>

        <block pos:start="1469:9" pos:end="1563:9">{<block_content pos:start="1473:13" pos:end="1562:0">

<cpp:if pos:start="1471:1" pos:end="1471:25">#<cpp:directive pos:start="1471:2" pos:end="1471:3">if</cpp:directive> <expr pos:start="1471:5" pos:end="1471:25"><call pos:start="1471:5" pos:end="1471:25"><name pos:start="1471:5" pos:end="1471:11">defined</name><argument_list pos:start="1471:12" pos:end="1471:25">(<argument pos:start="1471:13" pos:end="1471:24"><expr pos:start="1471:13" pos:end="1471:24"><name pos:start="1471:13" pos:end="1471:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <decl_stmt pos:start="1473:13" pos:end="1473:57"><decl pos:start="1473:13" pos:end="1473:39"><type pos:start="1473:13" pos:end="1473:35"><name pos:start="1473:13" pos:end="1473:35"><name pos:start="1473:13" pos:end="1473:18">struct</name> <name pos:start="1473:20" pos:end="1473:35">target_sigaction</name></name></type> <name pos:start="1473:37" pos:end="1473:39">act</name></decl>, <decl pos:start="1473:42" pos:end="1473:45"><type ref="prev" pos:start="1473:13" pos:end="1473:35"/><name pos:start="1473:42" pos:end="1473:45">oact</name></decl>, <decl pos:start="1473:48" pos:end="1473:56"><type ref="prev" pos:start="1473:13" pos:end="1473:35"><modifier pos:start="1473:48" pos:end="1473:48">*</modifier></type><name pos:start="1473:49" pos:end="1473:52">pact</name> <init pos:start="1473:54" pos:end="1473:56">= <expr pos:start="1473:56" pos:end="1473:56"><literal type="number" pos:start="1473:56" pos:end="1473:56">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="1475:13" pos:end="1475:47"><decl pos:start="1475:13" pos:end="1475:46"><type pos:start="1475:13" pos:end="1475:40"><name pos:start="1475:13" pos:end="1475:38"><name pos:start="1475:13" pos:end="1475:18">struct</name> <name pos:start="1475:20" pos:end="1475:38">target_rt_sigaction</name></name> <modifier pos:start="1475:40" pos:end="1475:40">*</modifier></type><name pos:start="1475:41" pos:end="1475:46">rt_act</name></decl>;</decl_stmt>

            <comment type="block" pos:start="1477:13" pos:end="1477:48">/* ??? arg4 == sizeof(sigset_t).  */</comment>

            <if_stmt pos:start="1479:13" pos:end="1497:13"><if pos:start="1479:13" pos:end="1497:13">if <condition pos:start="1479:16" pos:end="1479:21">(<expr pos:start="1479:17" pos:end="1479:20"><name pos:start="1479:17" pos:end="1479:20">arg2</name></expr>)</condition> <block pos:start="1479:23" pos:end="1497:13">{<block_content pos:start="1481:17" pos:end="1495:28">

                <if_stmt pos:start="1481:17" pos:end="1483:32"><if pos:start="1481:17" pos:end="1483:32">if <condition pos:start="1481:20" pos:end="1481:68">(<expr pos:start="1481:21" pos:end="1481:67"><operator pos:start="1481:21" pos:end="1481:21">!</operator><call pos:start="1481:22" pos:end="1481:67"><name pos:start="1481:22" pos:end="1481:37">lock_user_struct</name><argument_list pos:start="1481:38" pos:end="1481:67">(<argument pos:start="1481:39" pos:end="1481:49"><expr pos:start="1481:39" pos:end="1481:49"><name pos:start="1481:39" pos:end="1481:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1481:52" pos:end="1481:57"><expr pos:start="1481:52" pos:end="1481:57"><name pos:start="1481:52" pos:end="1481:57">rt_act</name></expr></argument>, <argument pos:start="1481:60" pos:end="1481:63"><expr pos:start="1481:60" pos:end="1481:63"><name pos:start="1481:60" pos:end="1481:63">arg2</name></expr></argument>, <argument pos:start="1481:66" pos:end="1481:66"><expr pos:start="1481:66" pos:end="1481:66"><literal type="number" pos:start="1481:66" pos:end="1481:66">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1483:21" pos:end="1483:32"><block_content pos:start="1483:21" pos:end="1483:32">

                    <goto pos:start="1483:21" pos:end="1483:32">goto <name pos:start="1483:26" pos:end="1483:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1485:17" pos:end="1485:54"><expr pos:start="1485:17" pos:end="1485:53"><name pos:start="1485:17" pos:end="1485:31"><name pos:start="1485:17" pos:end="1485:19">act</name><operator pos:start="1485:20" pos:end="1485:20">.</operator><name pos:start="1485:21" pos:end="1485:31">_sa_handler</name></name> <operator pos:start="1485:33" pos:end="1485:33">=</operator> <name pos:start="1485:35" pos:end="1485:53"><name pos:start="1485:35" pos:end="1485:40">rt_act</name><operator pos:start="1485:41" pos:end="1485:42">-&gt;</operator><name pos:start="1485:43" pos:end="1485:53">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1487:17" pos:end="1487:46"><expr pos:start="1487:17" pos:end="1487:45"><name pos:start="1487:17" pos:end="1487:27"><name pos:start="1487:17" pos:end="1487:19">act</name><operator pos:start="1487:20" pos:end="1487:20">.</operator><name pos:start="1487:21" pos:end="1487:27">sa_mask</name></name> <operator pos:start="1487:29" pos:end="1487:29">=</operator> <name pos:start="1487:31" pos:end="1487:45"><name pos:start="1487:31" pos:end="1487:36">rt_act</name><operator pos:start="1487:37" pos:end="1487:38">-&gt;</operator><name pos:start="1487:39" pos:end="1487:45">sa_mask</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1489:17" pos:end="1489:48"><expr pos:start="1489:17" pos:end="1489:47"><name pos:start="1489:17" pos:end="1489:28"><name pos:start="1489:17" pos:end="1489:19">act</name><operator pos:start="1489:20" pos:end="1489:20">.</operator><name pos:start="1489:21" pos:end="1489:28">sa_flags</name></name> <operator pos:start="1489:30" pos:end="1489:30">=</operator> <name pos:start="1489:32" pos:end="1489:47"><name pos:start="1489:32" pos:end="1489:37">rt_act</name><operator pos:start="1489:38" pos:end="1489:39">-&gt;</operator><name pos:start="1489:40" pos:end="1489:47">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1491:17" pos:end="1491:39"><expr pos:start="1491:17" pos:end="1491:38"><name pos:start="1491:17" pos:end="1491:31"><name pos:start="1491:17" pos:end="1491:19">act</name><operator pos:start="1491:20" pos:end="1491:20">.</operator><name pos:start="1491:21" pos:end="1491:31">sa_restorer</name></name> <operator pos:start="1491:33" pos:end="1491:33">=</operator> <name pos:start="1491:35" pos:end="1491:38">arg5</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1493:17" pos:end="1493:52"><expr pos:start="1493:17" pos:end="1493:51"><call pos:start="1493:17" pos:end="1493:51"><name pos:start="1493:17" pos:end="1493:34">unlock_user_struct</name><argument_list pos:start="1493:35" pos:end="1493:51">(<argument pos:start="1493:36" pos:end="1493:41"><expr pos:start="1493:36" pos:end="1493:41"><name pos:start="1493:36" pos:end="1493:41">rt_act</name></expr></argument>, <argument pos:start="1493:44" pos:end="1493:47"><expr pos:start="1493:44" pos:end="1493:47"><name pos:start="1493:44" pos:end="1493:47">arg2</name></expr></argument>, <argument pos:start="1493:50" pos:end="1493:50"><expr pos:start="1493:50" pos:end="1493:50"><literal type="number" pos:start="1493:50" pos:end="1493:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1495:17" pos:end="1495:28"><expr pos:start="1495:17" pos:end="1495:27"><name pos:start="1495:17" pos:end="1495:20">pact</name> <operator pos:start="1495:22" pos:end="1495:22">=</operator> <operator pos:start="1495:24" pos:end="1495:24">&amp;</operator><name pos:start="1495:25" pos:end="1495:27">act</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1499:13" pos:end="1499:61"><expr pos:start="1499:13" pos:end="1499:60"><name pos:start="1499:13" pos:end="1499:15">ret</name> <operator pos:start="1499:17" pos:end="1499:17">=</operator> <call pos:start="1499:19" pos:end="1499:60"><name pos:start="1499:19" pos:end="1499:27">get_errno</name><argument_list pos:start="1499:28" pos:end="1499:60">(<argument pos:start="1499:29" pos:end="1499:59"><expr pos:start="1499:29" pos:end="1499:59"><call pos:start="1499:29" pos:end="1499:59"><name pos:start="1499:29" pos:end="1499:40">do_sigaction</name><argument_list pos:start="1499:41" pos:end="1499:59">(<argument pos:start="1499:42" pos:end="1499:45"><expr pos:start="1499:42" pos:end="1499:45"><name pos:start="1499:42" pos:end="1499:45">arg1</name></expr></argument>, <argument pos:start="1499:48" pos:end="1499:51"><expr pos:start="1499:48" pos:end="1499:51"><name pos:start="1499:48" pos:end="1499:51">pact</name></expr></argument>, <argument pos:start="1499:54" pos:end="1499:58"><expr pos:start="1499:54" pos:end="1499:58"><operator pos:start="1499:54" pos:end="1499:54">&amp;</operator><name pos:start="1499:55" pos:end="1499:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1501:13" pos:end="1518:0"><if pos:start="1501:13" pos:end="1518:0">if <condition pos:start="1501:16" pos:end="1501:39">(<expr pos:start="1501:17" pos:end="1501:38"><operator pos:start="1501:17" pos:end="1501:17">!</operator><call pos:start="1501:18" pos:end="1501:30"><name pos:start="1501:18" pos:end="1501:25">is_error</name><argument_list pos:start="1501:26" pos:end="1501:30">(<argument pos:start="1501:27" pos:end="1501:29"><expr pos:start="1501:27" pos:end="1501:29"><name pos:start="1501:27" pos:end="1501:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1501:32" pos:end="1501:33">&amp;&amp;</operator> <name pos:start="1501:35" pos:end="1501:38">arg3</name></expr>)</condition> <block pos:start="1501:41" pos:end="1518:0">{<block_content pos:start="1503:17" pos:end="1513:52">

                <if_stmt pos:start="1503:17" pos:end="1505:32"><if pos:start="1503:17" pos:end="1505:32">if <condition pos:start="1503:20" pos:end="1503:69">(<expr pos:start="1503:21" pos:end="1503:68"><operator pos:start="1503:21" pos:end="1503:21">!</operator><call pos:start="1503:22" pos:end="1503:68"><name pos:start="1503:22" pos:end="1503:37">lock_user_struct</name><argument_list pos:start="1503:38" pos:end="1503:68">(<argument pos:start="1503:39" pos:end="1503:50"><expr pos:start="1503:39" pos:end="1503:50"><name pos:start="1503:39" pos:end="1503:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1503:53" pos:end="1503:58"><expr pos:start="1503:53" pos:end="1503:58"><name pos:start="1503:53" pos:end="1503:58">rt_act</name></expr></argument>, <argument pos:start="1503:61" pos:end="1503:64"><expr pos:start="1503:61" pos:end="1503:64"><name pos:start="1503:61" pos:end="1503:64">arg3</name></expr></argument>, <argument pos:start="1503:67" pos:end="1503:67"><expr pos:start="1503:67" pos:end="1503:67"><literal type="number" pos:start="1503:67" pos:end="1503:67">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1505:21" pos:end="1505:32"><block_content pos:start="1505:21" pos:end="1505:32">

                    <goto pos:start="1505:21" pos:end="1505:32">goto <name pos:start="1505:26" pos:end="1505:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1507:17" pos:end="1507:55"><expr pos:start="1507:17" pos:end="1507:54"><name pos:start="1507:17" pos:end="1507:35"><name pos:start="1507:17" pos:end="1507:22">rt_act</name><operator pos:start="1507:23" pos:end="1507:24">-&gt;</operator><name pos:start="1507:25" pos:end="1507:35">_sa_handler</name></name> <operator pos:start="1507:37" pos:end="1507:37">=</operator> <name pos:start="1507:39" pos:end="1507:54"><name pos:start="1507:39" pos:end="1507:42">oact</name><operator pos:start="1507:43" pos:end="1507:43">.</operator><name pos:start="1507:44" pos:end="1507:54">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1509:17" pos:end="1509:47"><expr pos:start="1509:17" pos:end="1509:46"><name pos:start="1509:17" pos:end="1509:31"><name pos:start="1509:17" pos:end="1509:22">rt_act</name><operator pos:start="1509:23" pos:end="1509:24">-&gt;</operator><name pos:start="1509:25" pos:end="1509:31">sa_mask</name></name> <operator pos:start="1509:33" pos:end="1509:33">=</operator> <name pos:start="1509:35" pos:end="1509:46"><name pos:start="1509:35" pos:end="1509:38">oact</name><operator pos:start="1509:39" pos:end="1509:39">.</operator><name pos:start="1509:40" pos:end="1509:46">sa_mask</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1511:17" pos:end="1511:49"><expr pos:start="1511:17" pos:end="1511:48"><name pos:start="1511:17" pos:end="1511:32"><name pos:start="1511:17" pos:end="1511:22">rt_act</name><operator pos:start="1511:23" pos:end="1511:24">-&gt;</operator><name pos:start="1511:25" pos:end="1511:32">sa_flags</name></name> <operator pos:start="1511:34" pos:end="1511:34">=</operator> <name pos:start="1511:36" pos:end="1511:48"><name pos:start="1511:36" pos:end="1511:39">oact</name><operator pos:start="1511:40" pos:end="1511:40">.</operator><name pos:start="1511:41" pos:end="1511:48">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1513:17" pos:end="1513:52"><expr pos:start="1513:17" pos:end="1513:51"><call pos:start="1513:17" pos:end="1513:51"><name pos:start="1513:17" pos:end="1513:34">unlock_user_struct</name><argument_list pos:start="1513:35" pos:end="1513:51">(<argument pos:start="1513:36" pos:end="1513:41"><expr pos:start="1513:36" pos:end="1513:41"><name pos:start="1513:36" pos:end="1513:41">rt_act</name></expr></argument>, <argument pos:start="1513:44" pos:end="1513:47"><expr pos:start="1513:44" pos:end="1513:47"><name pos:start="1513:44" pos:end="1513:47">arg3</name></expr></argument>, <argument pos:start="1513:50" pos:end="1513:50"><expr pos:start="1513:50" pos:end="1513:50"><literal type="number" pos:start="1513:50" pos:end="1513:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:else pos:start="1517:1" pos:end="1517:5">#<cpp:directive pos:start="1517:2" pos:end="1517:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="1519:13" pos:end="1519:41"><decl pos:start="1519:13" pos:end="1519:40"><type pos:start="1519:13" pos:end="1519:37"><name pos:start="1519:13" pos:end="1519:35"><name pos:start="1519:13" pos:end="1519:18">struct</name> <name pos:start="1519:20" pos:end="1519:35">target_sigaction</name></name> <modifier pos:start="1519:37" pos:end="1519:37">*</modifier></type><name pos:start="1519:38" pos:end="1519:40">act</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1521:13" pos:end="1521:42"><decl pos:start="1521:13" pos:end="1521:41"><type pos:start="1521:13" pos:end="1521:37"><name pos:start="1521:13" pos:end="1521:35"><name pos:start="1521:13" pos:end="1521:18">struct</name> <name pos:start="1521:20" pos:end="1521:35">target_sigaction</name></name> <modifier pos:start="1521:37" pos:end="1521:37">*</modifier></type><name pos:start="1521:38" pos:end="1521:41">oact</name></decl>;</decl_stmt>



            <if_stmt pos:start="1525:13" pos:end="1533:27"><if pos:start="1525:13" pos:end="1531:13">if <condition pos:start="1525:16" pos:end="1525:21">(<expr pos:start="1525:17" pos:end="1525:20"><name pos:start="1525:17" pos:end="1525:20">arg2</name></expr>)</condition> <block pos:start="1525:23" pos:end="1531:13">{<block_content pos:start="1527:17" pos:end="1529:32">

                <if_stmt pos:start="1527:17" pos:end="1529:32"><if pos:start="1527:17" pos:end="1529:32">if <condition pos:start="1527:20" pos:end="1527:65">(<expr pos:start="1527:21" pos:end="1527:64"><operator pos:start="1527:21" pos:end="1527:21">!</operator><call pos:start="1527:22" pos:end="1527:64"><name pos:start="1527:22" pos:end="1527:37">lock_user_struct</name><argument_list pos:start="1527:38" pos:end="1527:64">(<argument pos:start="1527:39" pos:end="1527:49"><expr pos:start="1527:39" pos:end="1527:49"><name pos:start="1527:39" pos:end="1527:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1527:52" pos:end="1527:54"><expr pos:start="1527:52" pos:end="1527:54"><name pos:start="1527:52" pos:end="1527:54">act</name></expr></argument>, <argument pos:start="1527:57" pos:end="1527:60"><expr pos:start="1527:57" pos:end="1527:60"><name pos:start="1527:57" pos:end="1527:60">arg2</name></expr></argument>, <argument pos:start="1527:63" pos:end="1527:63"><expr pos:start="1527:63" pos:end="1527:63"><literal type="number" pos:start="1527:63" pos:end="1527:63">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1529:21" pos:end="1529:32"><block_content pos:start="1529:21" pos:end="1529:32">

                    <goto pos:start="1529:21" pos:end="1529:32">goto <name pos:start="1529:26" pos:end="1529:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="1531:15" pos:end="1533:27">else<block type="pseudo" pos:start="1533:17" pos:end="1533:27"><block_content pos:start="1533:17" pos:end="1533:27">

                <expr_stmt pos:start="1533:17" pos:end="1533:27"><expr pos:start="1533:17" pos:end="1533:26"><name pos:start="1533:17" pos:end="1533:19">act</name> <operator pos:start="1533:21" pos:end="1533:21">=</operator> <name pos:start="1533:23" pos:end="1533:26">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="1535:13" pos:end="1547:28"><if pos:start="1535:13" pos:end="1545:13">if <condition pos:start="1535:16" pos:end="1535:21">(<expr pos:start="1535:17" pos:end="1535:20"><name pos:start="1535:17" pos:end="1535:20">arg3</name></expr>)</condition> <block pos:start="1535:23" pos:end="1545:13">{<block_content pos:start="1537:17" pos:end="1543:17">

                <if_stmt pos:start="1537:17" pos:end="1543:17"><if pos:start="1537:17" pos:end="1543:17">if <condition pos:start="1537:20" pos:end="1537:67">(<expr pos:start="1537:21" pos:end="1537:66"><operator pos:start="1537:21" pos:end="1537:21">!</operator><call pos:start="1537:22" pos:end="1537:66"><name pos:start="1537:22" pos:end="1537:37">lock_user_struct</name><argument_list pos:start="1537:38" pos:end="1537:66">(<argument pos:start="1537:39" pos:end="1537:50"><expr pos:start="1537:39" pos:end="1537:50"><name pos:start="1537:39" pos:end="1537:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1537:53" pos:end="1537:56"><expr pos:start="1537:53" pos:end="1537:56"><name pos:start="1537:53" pos:end="1537:56">oact</name></expr></argument>, <argument pos:start="1537:59" pos:end="1537:62"><expr pos:start="1537:59" pos:end="1537:62"><name pos:start="1537:59" pos:end="1537:62">arg3</name></expr></argument>, <argument pos:start="1537:65" pos:end="1537:65"><expr pos:start="1537:65" pos:end="1537:65"><literal type="number" pos:start="1537:65" pos:end="1537:65">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1537:69" pos:end="1543:17">{<block_content pos:start="1539:21" pos:end="1541:43">

                    <expr_stmt pos:start="1539:21" pos:end="1539:41"><expr pos:start="1539:21" pos:end="1539:40"><name pos:start="1539:21" pos:end="1539:23">ret</name> <operator pos:start="1539:25" pos:end="1539:25">=</operator> <operator pos:start="1539:27" pos:end="1539:27">-</operator><name pos:start="1539:28" pos:end="1539:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <goto pos:start="1541:21" pos:end="1541:43">goto <name pos:start="1541:26" pos:end="1541:42">rt_sigaction_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="1545:15" pos:end="1547:28">else<block type="pseudo" pos:start="1547:17" pos:end="1547:28"><block_content pos:start="1547:17" pos:end="1547:28">

                <expr_stmt pos:start="1547:17" pos:end="1547:28"><expr pos:start="1547:17" pos:end="1547:27"><name pos:start="1547:17" pos:end="1547:20">oact</name> <operator pos:start="1547:22" pos:end="1547:22">=</operator> <name pos:start="1547:24" pos:end="1547:27">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1549:13" pos:end="1549:59"><expr pos:start="1549:13" pos:end="1549:58"><name pos:start="1549:13" pos:end="1549:15">ret</name> <operator pos:start="1549:17" pos:end="1549:17">=</operator> <call pos:start="1549:19" pos:end="1549:58"><name pos:start="1549:19" pos:end="1549:27">get_errno</name><argument_list pos:start="1549:28" pos:end="1549:58">(<argument pos:start="1549:29" pos:end="1549:57"><expr pos:start="1549:29" pos:end="1549:57"><call pos:start="1549:29" pos:end="1549:57"><name pos:start="1549:29" pos:end="1549:40">do_sigaction</name><argument_list pos:start="1549:41" pos:end="1549:57">(<argument pos:start="1549:42" pos:end="1549:45"><expr pos:start="1549:42" pos:end="1549:45"><name pos:start="1549:42" pos:end="1549:45">arg1</name></expr></argument>, <argument pos:start="1549:48" pos:end="1549:50"><expr pos:start="1549:48" pos:end="1549:50"><name pos:start="1549:48" pos:end="1549:50">act</name></expr></argument>, <argument pos:start="1549:53" pos:end="1549:56"><expr pos:start="1549:53" pos:end="1549:56"><name pos:start="1549:53" pos:end="1549:56">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<label pos:start="1551:9" pos:end="1551:26"><name pos:start="1551:9" pos:end="1551:25">rt_sigaction_fail</name>:</label>

            <if_stmt pos:start="1553:13" pos:end="1555:49"><if pos:start="1553:13" pos:end="1555:49">if <condition pos:start="1553:16" pos:end="1553:20">(<expr pos:start="1553:17" pos:end="1553:19"><name pos:start="1553:17" pos:end="1553:19">act</name></expr>)</condition><block type="pseudo" pos:start="1555:17" pos:end="1555:49"><block_content pos:start="1555:17" pos:end="1555:49">

                <expr_stmt pos:start="1555:17" pos:end="1555:49"><expr pos:start="1555:17" pos:end="1555:48"><call pos:start="1555:17" pos:end="1555:48"><name pos:start="1555:17" pos:end="1555:34">unlock_user_struct</name><argument_list pos:start="1555:35" pos:end="1555:48">(<argument pos:start="1555:36" pos:end="1555:38"><expr pos:start="1555:36" pos:end="1555:38"><name pos:start="1555:36" pos:end="1555:38">act</name></expr></argument>, <argument pos:start="1555:41" pos:end="1555:44"><expr pos:start="1555:41" pos:end="1555:44"><name pos:start="1555:41" pos:end="1555:44">arg2</name></expr></argument>, <argument pos:start="1555:47" pos:end="1555:47"><expr pos:start="1555:47" pos:end="1555:47"><literal type="number" pos:start="1555:47" pos:end="1555:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="1557:13" pos:end="1562:0"><if pos:start="1557:13" pos:end="1562:0">if <condition pos:start="1557:16" pos:end="1557:21">(<expr pos:start="1557:17" pos:end="1557:20"><name pos:start="1557:17" pos:end="1557:20">oact</name></expr>)</condition><block type="pseudo" pos:start="1559:17" pos:end="1562:0"><block_content pos:start="1559:17" pos:end="1562:0">

                <expr_stmt pos:start="1559:17" pos:end="1562:0"><expr pos:start="1559:17" pos:end="1559:49"><call pos:start="1559:17" pos:end="1559:49"><name pos:start="1559:17" pos:end="1559:34">unlock_user_struct</name><argument_list pos:start="1559:35" pos:end="1559:49">(<argument pos:start="1559:36" pos:end="1559:39"><expr pos:start="1559:36" pos:end="1559:39"><name pos:start="1559:36" pos:end="1559:39">oact</name></expr></argument>, <argument pos:start="1559:42" pos:end="1559:45"><expr pos:start="1559:42" pos:end="1559:45"><name pos:start="1559:42" pos:end="1559:45">arg3</name></expr></argument>, <argument pos:start="1559:48" pos:end="1559:48"><expr pos:start="1559:48" pos:end="1559:48"><literal type="number" pos:start="1559:48" pos:end="1559:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="1561:1" pos:end="1561:6">#<cpp:directive pos:start="1561:2" pos:end="1561:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block>

        <break pos:start="1565:9" pos:end="1568:0">break;</break>

<cpp:ifdef pos:start="1567:1" pos:end="1567:25">#<cpp:directive pos:start="1567:2" pos:end="1567:6">ifdef</cpp:directive> <name pos:start="1567:8" pos:end="1567:25">TARGET_NR_sgetmask</name></cpp:ifdef> <comment type="block" pos:start="1567:27" pos:end="1567:44">/* not on alpha */</comment>

    <case pos:start="1569:5" pos:end="1569:28">case <expr pos:start="1569:10" pos:end="1569:27"><name pos:start="1569:10" pos:end="1569:27">TARGET_NR_sgetmask</name></expr>:</case>

        <block pos:start="1571:9" pos:end="1583:9">{<block_content pos:start="1573:13" pos:end="1581:29">

            <decl_stmt pos:start="1573:13" pos:end="1573:29"><decl pos:start="1573:13" pos:end="1573:28"><type pos:start="1573:13" pos:end="1573:20"><name pos:start="1573:13" pos:end="1573:20">sigset_t</name></type> <name pos:start="1573:22" pos:end="1573:28">cur_set</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1575:13" pos:end="1575:33"><decl pos:start="1575:13" pos:end="1575:32"><type pos:start="1575:13" pos:end="1575:21"><name pos:start="1575:13" pos:end="1575:21">abi_ulong</name></type> <name pos:start="1575:23" pos:end="1575:32">target_set</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1577:13" pos:end="1577:43"><expr pos:start="1577:13" pos:end="1577:42"><call pos:start="1577:13" pos:end="1577:42"><name pos:start="1577:13" pos:end="1577:23">sigprocmask</name><argument_list pos:start="1577:24" pos:end="1577:42">(<argument pos:start="1577:25" pos:end="1577:25"><expr pos:start="1577:25" pos:end="1577:25"><literal type="number" pos:start="1577:25" pos:end="1577:25">0</literal></expr></argument>, <argument pos:start="1577:28" pos:end="1577:31"><expr pos:start="1577:28" pos:end="1577:31"><name pos:start="1577:28" pos:end="1577:31">NULL</name></expr></argument>, <argument pos:start="1577:34" pos:end="1577:41"><expr pos:start="1577:34" pos:end="1577:41"><operator pos:start="1577:34" pos:end="1577:34">&amp;</operator><name pos:start="1577:35" pos:end="1577:41">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1579:13" pos:end="1579:61"><expr pos:start="1579:13" pos:end="1579:60"><call pos:start="1579:13" pos:end="1579:60"><name pos:start="1579:13" pos:end="1579:37">host_to_target_old_sigset</name><argument_list pos:start="1579:38" pos:end="1579:60">(<argument pos:start="1579:39" pos:end="1579:49"><expr pos:start="1579:39" pos:end="1579:49"><operator pos:start="1579:39" pos:end="1579:39">&amp;</operator><name pos:start="1579:40" pos:end="1579:49">target_set</name></expr></argument>, <argument pos:start="1579:52" pos:end="1579:59"><expr pos:start="1579:52" pos:end="1579:59"><operator pos:start="1579:52" pos:end="1579:52">&amp;</operator><name pos:start="1579:53" pos:end="1579:59">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1581:13" pos:end="1581:29"><expr pos:start="1581:13" pos:end="1581:28"><name pos:start="1581:13" pos:end="1581:15">ret</name> <operator pos:start="1581:17" pos:end="1581:17">=</operator> <name pos:start="1581:19" pos:end="1581:28">target_set</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1585:9" pos:end="1590:0">break;</break>

<cpp:endif pos:start="1587:1" pos:end="1587:6">#<cpp:directive pos:start="1587:2" pos:end="1587:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1589:1" pos:end="1589:25">#<cpp:directive pos:start="1589:2" pos:end="1589:6">ifdef</cpp:directive> <name pos:start="1589:8" pos:end="1589:25">TARGET_NR_ssetmask</name></cpp:ifdef> <comment type="block" pos:start="1589:27" pos:end="1589:44">/* not on alpha */</comment>

    <case pos:start="1591:5" pos:end="1591:28">case <expr pos:start="1591:10" pos:end="1591:27"><name pos:start="1591:10" pos:end="1591:27">TARGET_NR_ssetmask</name></expr>:</case>

        <block pos:start="1593:9" pos:end="1611:9">{<block_content pos:start="1595:13" pos:end="1609:29">

            <decl_stmt pos:start="1595:13" pos:end="1595:40"><decl pos:start="1595:13" pos:end="1595:24"><type pos:start="1595:13" pos:end="1595:20"><name pos:start="1595:13" pos:end="1595:20">sigset_t</name></type> <name pos:start="1595:22" pos:end="1595:24">set</name></decl>, <decl pos:start="1595:27" pos:end="1595:30"><type ref="prev" pos:start="1595:13" pos:end="1595:20"/><name pos:start="1595:27" pos:end="1595:30">oset</name></decl>, <decl pos:start="1595:33" pos:end="1595:39"><type ref="prev" pos:start="1595:13" pos:end="1595:20"/><name pos:start="1595:33" pos:end="1595:39">cur_set</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1597:13" pos:end="1597:40"><decl pos:start="1597:13" pos:end="1597:39"><type pos:start="1597:13" pos:end="1597:21"><name pos:start="1597:13" pos:end="1597:21">abi_ulong</name></type> <name pos:start="1597:23" pos:end="1597:32">target_set</name> <init pos:start="1597:34" pos:end="1597:39">= <expr pos:start="1597:36" pos:end="1597:39"><name pos:start="1597:36" pos:end="1597:39">arg1</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="1599:13" pos:end="1599:43"><expr pos:start="1599:13" pos:end="1599:42"><call pos:start="1599:13" pos:end="1599:42"><name pos:start="1599:13" pos:end="1599:23">sigprocmask</name><argument_list pos:start="1599:24" pos:end="1599:42">(<argument pos:start="1599:25" pos:end="1599:25"><expr pos:start="1599:25" pos:end="1599:25"><literal type="number" pos:start="1599:25" pos:end="1599:25">0</literal></expr></argument>, <argument pos:start="1599:28" pos:end="1599:31"><expr pos:start="1599:28" pos:end="1599:31"><name pos:start="1599:28" pos:end="1599:31">NULL</name></expr></argument>, <argument pos:start="1599:34" pos:end="1599:41"><expr pos:start="1599:34" pos:end="1599:41"><operator pos:start="1599:34" pos:end="1599:34">&amp;</operator><name pos:start="1599:35" pos:end="1599:41">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1601:13" pos:end="1601:57"><expr pos:start="1601:13" pos:end="1601:56"><call pos:start="1601:13" pos:end="1601:56"><name pos:start="1601:13" pos:end="1601:37">target_to_host_old_sigset</name><argument_list pos:start="1601:38" pos:end="1601:56">(<argument pos:start="1601:39" pos:end="1601:42"><expr pos:start="1601:39" pos:end="1601:42"><operator pos:start="1601:39" pos:end="1601:39">&amp;</operator><name pos:start="1601:40" pos:end="1601:42">set</name></expr></argument>, <argument pos:start="1601:45" pos:end="1601:55"><expr pos:start="1601:45" pos:end="1601:55"><operator pos:start="1601:45" pos:end="1601:45">&amp;</operator><name pos:start="1601:46" pos:end="1601:55">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1603:13" pos:end="1603:43"><expr pos:start="1603:13" pos:end="1603:42"><call pos:start="1603:13" pos:end="1603:42"><name pos:start="1603:13" pos:end="1603:20">sigorset</name><argument_list pos:start="1603:21" pos:end="1603:42">(<argument pos:start="1603:22" pos:end="1603:25"><expr pos:start="1603:22" pos:end="1603:25"><operator pos:start="1603:22" pos:end="1603:22">&amp;</operator><name pos:start="1603:23" pos:end="1603:25">set</name></expr></argument>, <argument pos:start="1603:28" pos:end="1603:31"><expr pos:start="1603:28" pos:end="1603:31"><operator pos:start="1603:28" pos:end="1603:28">&amp;</operator><name pos:start="1603:29" pos:end="1603:31">set</name></expr></argument>, <argument pos:start="1603:34" pos:end="1603:41"><expr pos:start="1603:34" pos:end="1603:41"><operator pos:start="1603:34" pos:end="1603:34">&amp;</operator><name pos:start="1603:35" pos:end="1603:41">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1605:13" pos:end="1605:50"><expr pos:start="1605:13" pos:end="1605:49"><call pos:start="1605:13" pos:end="1605:49"><name pos:start="1605:13" pos:end="1605:23">sigprocmask</name><argument_list pos:start="1605:24" pos:end="1605:49">(<argument pos:start="1605:25" pos:end="1605:35"><expr pos:start="1605:25" pos:end="1605:35"><name pos:start="1605:25" pos:end="1605:35">SIG_SETMASK</name></expr></argument>, <argument pos:start="1605:38" pos:end="1605:41"><expr pos:start="1605:38" pos:end="1605:41"><operator pos:start="1605:38" pos:end="1605:38">&amp;</operator><name pos:start="1605:39" pos:end="1605:41">set</name></expr></argument>, <argument pos:start="1605:44" pos:end="1605:48"><expr pos:start="1605:44" pos:end="1605:48"><operator pos:start="1605:44" pos:end="1605:44">&amp;</operator><name pos:start="1605:45" pos:end="1605:48">oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1607:13" pos:end="1607:58"><expr pos:start="1607:13" pos:end="1607:57"><call pos:start="1607:13" pos:end="1607:57"><name pos:start="1607:13" pos:end="1607:37">host_to_target_old_sigset</name><argument_list pos:start="1607:38" pos:end="1607:57">(<argument pos:start="1607:39" pos:end="1607:49"><expr pos:start="1607:39" pos:end="1607:49"><operator pos:start="1607:39" pos:end="1607:39">&amp;</operator><name pos:start="1607:40" pos:end="1607:49">target_set</name></expr></argument>, <argument pos:start="1607:52" pos:end="1607:56"><expr pos:start="1607:52" pos:end="1607:56"><operator pos:start="1607:52" pos:end="1607:52">&amp;</operator><name pos:start="1607:53" pos:end="1607:56">oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1609:13" pos:end="1609:29"><expr pos:start="1609:13" pos:end="1609:28"><name pos:start="1609:13" pos:end="1609:15">ret</name> <operator pos:start="1609:17" pos:end="1609:17">=</operator> <name pos:start="1609:19" pos:end="1609:28">target_set</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1613:9" pos:end="1618:0">break;</break>

<cpp:endif pos:start="1615:1" pos:end="1615:6">#<cpp:directive pos:start="1615:2" pos:end="1615:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1617:1" pos:end="1617:28">#<cpp:directive pos:start="1617:2" pos:end="1617:6">ifdef</cpp:directive> <name pos:start="1617:8" pos:end="1617:28">TARGET_NR_sigprocmask</name></cpp:ifdef>

    <case pos:start="1619:5" pos:end="1619:31">case <expr pos:start="1619:10" pos:end="1619:30"><name pos:start="1619:10" pos:end="1619:30">TARGET_NR_sigprocmask</name></expr>:</case>

        <block pos:start="1621:9" pos:end="1751:9">{<block_content pos:start="1625:13" pos:end="1750:0">

<cpp:if pos:start="1623:1" pos:end="1623:25">#<cpp:directive pos:start="1623:2" pos:end="1623:3">if</cpp:directive> <expr pos:start="1623:5" pos:end="1623:25"><call pos:start="1623:5" pos:end="1623:25"><name pos:start="1623:5" pos:end="1623:11">defined</name><argument_list pos:start="1623:12" pos:end="1623:25">(<argument pos:start="1623:13" pos:end="1623:24"><expr pos:start="1623:13" pos:end="1623:24"><name pos:start="1623:13" pos:end="1623:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <decl_stmt pos:start="1625:13" pos:end="1625:33"><decl pos:start="1625:13" pos:end="1625:24"><type pos:start="1625:13" pos:end="1625:20"><name pos:start="1625:13" pos:end="1625:20">sigset_t</name></type> <name pos:start="1625:22" pos:end="1625:24">set</name></decl>, <decl pos:start="1625:27" pos:end="1625:32"><type ref="prev" pos:start="1625:13" pos:end="1625:20"/><name pos:start="1625:27" pos:end="1625:32">oldset</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1627:13" pos:end="1627:27"><decl pos:start="1627:13" pos:end="1627:26"><type pos:start="1627:13" pos:end="1627:21"><name pos:start="1627:13" pos:end="1627:21">abi_ulong</name></type> <name pos:start="1627:23" pos:end="1627:26">mask</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1629:13" pos:end="1629:20"><decl pos:start="1629:13" pos:end="1629:19"><type pos:start="1629:13" pos:end="1629:15"><name pos:start="1629:13" pos:end="1629:15">int</name></type> <name pos:start="1629:17" pos:end="1629:19">how</name></decl>;</decl_stmt>



            <switch pos:start="1633:13" pos:end="1659:13">switch <condition pos:start="1633:20" pos:end="1633:25">(<expr pos:start="1633:21" pos:end="1633:24"><name pos:start="1633:21" pos:end="1633:24">arg1</name></expr>)</condition> <block pos:start="1633:27" pos:end="1659:13">{<block_content pos:start="1635:13" pos:end="1657:26">

            <case pos:start="1635:13" pos:end="1635:34">case <expr pos:start="1635:18" pos:end="1635:33"><name pos:start="1635:18" pos:end="1635:33">TARGET_SIG_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="1637:17" pos:end="1637:32"><expr pos:start="1637:17" pos:end="1637:31"><name pos:start="1637:17" pos:end="1637:19">how</name> <operator pos:start="1637:21" pos:end="1637:21">=</operator> <name pos:start="1637:23" pos:end="1637:31">SIG_BLOCK</name></expr>;</expr_stmt>

                <break pos:start="1639:17" pos:end="1639:22">break;</break>

            <case pos:start="1641:13" pos:end="1641:36">case <expr pos:start="1641:18" pos:end="1641:35"><name pos:start="1641:18" pos:end="1641:35">TARGET_SIG_UNBLOCK</name></expr>:</case>

                <expr_stmt pos:start="1643:17" pos:end="1643:34"><expr pos:start="1643:17" pos:end="1643:33"><name pos:start="1643:17" pos:end="1643:19">how</name> <operator pos:start="1643:21" pos:end="1643:21">=</operator> <name pos:start="1643:23" pos:end="1643:33">SIG_UNBLOCK</name></expr>;</expr_stmt>

                <break pos:start="1645:17" pos:end="1645:22">break;</break>

            <case pos:start="1647:13" pos:end="1647:36">case <expr pos:start="1647:18" pos:end="1647:35"><name pos:start="1647:18" pos:end="1647:35">TARGET_SIG_SETMASK</name></expr>:</case>

                <expr_stmt pos:start="1649:17" pos:end="1649:34"><expr pos:start="1649:17" pos:end="1649:33"><name pos:start="1649:17" pos:end="1649:19">how</name> <operator pos:start="1649:21" pos:end="1649:21">=</operator> <name pos:start="1649:23" pos:end="1649:33">SIG_SETMASK</name></expr>;</expr_stmt>

                <break pos:start="1651:17" pos:end="1651:22">break;</break>

            <default pos:start="1653:13" pos:end="1653:20">default:</default>

                <expr_stmt pos:start="1655:17" pos:end="1655:37"><expr pos:start="1655:17" pos:end="1655:36"><name pos:start="1655:17" pos:end="1655:19">ret</name> <operator pos:start="1655:21" pos:end="1655:21">=</operator> <operator pos:start="1655:23" pos:end="1655:23">-</operator><name pos:start="1655:24" pos:end="1655:36">TARGET_EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="1657:17" pos:end="1657:26">goto <name pos:start="1657:22" pos:end="1657:25">fail</name>;</goto>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1661:13" pos:end="1661:24"><expr pos:start="1661:13" pos:end="1661:23"><name pos:start="1661:13" pos:end="1661:16">mask</name> <operator pos:start="1661:18" pos:end="1661:18">=</operator> <name pos:start="1661:20" pos:end="1661:23">arg2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1663:13" pos:end="1663:51"><expr pos:start="1663:13" pos:end="1663:50"><call pos:start="1663:13" pos:end="1663:50"><name pos:start="1663:13" pos:end="1663:37">target_to_host_old_sigset</name><argument_list pos:start="1663:38" pos:end="1663:50">(<argument pos:start="1663:39" pos:end="1663:42"><expr pos:start="1663:39" pos:end="1663:42"><operator pos:start="1663:39" pos:end="1663:39">&amp;</operator><name pos:start="1663:40" pos:end="1663:42">set</name></expr></argument>, <argument pos:start="1663:45" pos:end="1663:49"><expr pos:start="1663:45" pos:end="1663:49"><operator pos:start="1663:45" pos:end="1663:45">&amp;</operator><name pos:start="1663:46" pos:end="1663:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="1667:13" pos:end="1667:61"><expr pos:start="1667:13" pos:end="1667:60"><name pos:start="1667:13" pos:end="1667:15">ret</name> <operator pos:start="1667:17" pos:end="1667:17">=</operator> <call pos:start="1667:19" pos:end="1667:60"><name pos:start="1667:19" pos:end="1667:27">get_errno</name><argument_list pos:start="1667:28" pos:end="1667:60">(<argument pos:start="1667:29" pos:end="1667:59"><expr pos:start="1667:29" pos:end="1667:59"><call pos:start="1667:29" pos:end="1667:59"><name pos:start="1667:29" pos:end="1667:39">sigprocmask</name><argument_list pos:start="1667:40" pos:end="1667:59">(<argument pos:start="1667:41" pos:end="1667:43"><expr pos:start="1667:41" pos:end="1667:43"><name pos:start="1667:41" pos:end="1667:43">how</name></expr></argument>, <argument pos:start="1667:46" pos:end="1667:49"><expr pos:start="1667:46" pos:end="1667:49"><operator pos:start="1667:46" pos:end="1667:46">&amp;</operator><name pos:start="1667:47" pos:end="1667:49">set</name></expr></argument>, <argument pos:start="1667:52" pos:end="1667:58"><expr pos:start="1667:52" pos:end="1667:58"><operator pos:start="1667:52" pos:end="1667:52">&amp;</operator><name pos:start="1667:53" pos:end="1667:58">oldset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1669:13" pos:end="1680:0"><if pos:start="1669:13" pos:end="1680:0">if <condition pos:start="1669:16" pos:end="1669:31">(<expr pos:start="1669:17" pos:end="1669:30"><operator pos:start="1669:17" pos:end="1669:17">!</operator><call pos:start="1669:18" pos:end="1669:30"><name pos:start="1669:18" pos:end="1669:25">is_error</name><argument_list pos:start="1669:26" pos:end="1669:30">(<argument pos:start="1669:27" pos:end="1669:29"><expr pos:start="1669:27" pos:end="1669:29"><name pos:start="1669:27" pos:end="1669:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1669:33" pos:end="1680:0">{<block_content pos:start="1671:17" pos:end="1675:58">

                <expr_stmt pos:start="1671:17" pos:end="1671:58"><expr pos:start="1671:17" pos:end="1671:57"><call pos:start="1671:17" pos:end="1671:57"><name pos:start="1671:17" pos:end="1671:41">host_to_target_old_sigset</name><argument_list pos:start="1671:42" pos:end="1671:57">(<argument pos:start="1671:43" pos:end="1671:47"><expr pos:start="1671:43" pos:end="1671:47"><operator pos:start="1671:43" pos:end="1671:43">&amp;</operator><name pos:start="1671:44" pos:end="1671:47">mask</name></expr></argument>, <argument pos:start="1671:50" pos:end="1671:56"><expr pos:start="1671:50" pos:end="1671:56"><operator pos:start="1671:50" pos:end="1671:50">&amp;</operator><name pos:start="1671:51" pos:end="1671:56">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1673:17" pos:end="1673:27"><expr pos:start="1673:17" pos:end="1673:26"><name pos:start="1673:17" pos:end="1673:19">ret</name> <operator pos:start="1673:21" pos:end="1673:21">=</operator> <name pos:start="1673:23" pos:end="1673:26">mask</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1675:17" pos:end="1675:58"><expr pos:start="1675:17" pos:end="1675:57"><operator pos:start="1675:17" pos:end="1675:17">(</operator><operator pos:start="1675:18" pos:end="1675:18">(</operator><name pos:start="1675:19" pos:end="1675:31">CPUAlphaState</name> <operator pos:start="1675:33" pos:end="1675:33">*</operator><operator pos:start="1675:34" pos:end="1675:34">)</operator><name pos:start="1675:35" pos:end="1675:41">cpu_env</name><operator pos:start="1675:42" pos:end="1675:42">)</operator><operator pos:start="1675:43" pos:end="1675:44">-&gt;</operator><name pos:start="1675:45" pos:end="1675:53"><name pos:start="1675:45" pos:end="1675:46">ir</name><index pos:start="1675:47" pos:end="1675:53">[<expr pos:start="1675:48" pos:end="1675:52"><name pos:start="1675:48" pos:end="1675:52">IR_V0</name></expr>]</index></name> <operator pos:start="1675:55" pos:end="1675:55">=</operator> <literal type="number" pos:start="1675:57" pos:end="1675:57">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="1675:60" pos:end="1675:79">/* force no error */</comment>

            </block_content>}</block></if></if_stmt>

<cpp:else pos:start="1679:1" pos:end="1679:5">#<cpp:directive pos:start="1679:2" pos:end="1679:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="1681:13" pos:end="1681:43"><decl pos:start="1681:13" pos:end="1681:24"><type pos:start="1681:13" pos:end="1681:20"><name pos:start="1681:13" pos:end="1681:20">sigset_t</name></type> <name pos:start="1681:22" pos:end="1681:24">set</name></decl>, <decl pos:start="1681:27" pos:end="1681:32"><type ref="prev" pos:start="1681:13" pos:end="1681:20"/><name pos:start="1681:27" pos:end="1681:32">oldset</name></decl>, <decl pos:start="1681:35" pos:end="1681:42"><type ref="prev" pos:start="1681:13" pos:end="1681:20"><modifier pos:start="1681:35" pos:end="1681:35">*</modifier></type><name pos:start="1681:36" pos:end="1681:42">set_ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1683:13" pos:end="1683:20"><decl pos:start="1683:13" pos:end="1683:19"><type pos:start="1683:13" pos:end="1683:15"><name pos:start="1683:13" pos:end="1683:15">int</name></type> <name pos:start="1683:17" pos:end="1683:19">how</name></decl>;</decl_stmt>



            <if_stmt pos:start="1687:13" pos:end="1733:13"><if pos:start="1687:13" pos:end="1727:13">if <condition pos:start="1687:16" pos:end="1687:21">(<expr pos:start="1687:17" pos:end="1687:20"><name pos:start="1687:17" pos:end="1687:20">arg2</name></expr>)</condition> <block pos:start="1687:23" pos:end="1727:13">{<block_content pos:start="1689:17" pos:end="1725:31">

                <switch pos:start="1689:17" pos:end="1715:17">switch <condition pos:start="1689:24" pos:end="1689:29">(<expr pos:start="1689:25" pos:end="1689:28"><name pos:start="1689:25" pos:end="1689:28">arg1</name></expr>)</condition> <block pos:start="1689:31" pos:end="1715:17">{<block_content pos:start="1691:17" pos:end="1713:30">

                <case pos:start="1691:17" pos:end="1691:38">case <expr pos:start="1691:22" pos:end="1691:37"><name pos:start="1691:22" pos:end="1691:37">TARGET_SIG_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="1693:21" pos:end="1693:36"><expr pos:start="1693:21" pos:end="1693:35"><name pos:start="1693:21" pos:end="1693:23">how</name> <operator pos:start="1693:25" pos:end="1693:25">=</operator> <name pos:start="1693:27" pos:end="1693:35">SIG_BLOCK</name></expr>;</expr_stmt>

                    <break pos:start="1695:21" pos:end="1695:26">break;</break>

                <case pos:start="1697:17" pos:end="1697:40">case <expr pos:start="1697:22" pos:end="1697:39"><name pos:start="1697:22" pos:end="1697:39">TARGET_SIG_UNBLOCK</name></expr>:</case>

                    <expr_stmt pos:start="1699:21" pos:end="1699:38"><expr pos:start="1699:21" pos:end="1699:37"><name pos:start="1699:21" pos:end="1699:23">how</name> <operator pos:start="1699:25" pos:end="1699:25">=</operator> <name pos:start="1699:27" pos:end="1699:37">SIG_UNBLOCK</name></expr>;</expr_stmt>

                    <break pos:start="1701:21" pos:end="1701:26">break;</break>

                <case pos:start="1703:17" pos:end="1703:40">case <expr pos:start="1703:22" pos:end="1703:39"><name pos:start="1703:22" pos:end="1703:39">TARGET_SIG_SETMASK</name></expr>:</case>

                    <expr_stmt pos:start="1705:21" pos:end="1705:38"><expr pos:start="1705:21" pos:end="1705:37"><name pos:start="1705:21" pos:end="1705:23">how</name> <operator pos:start="1705:25" pos:end="1705:25">=</operator> <name pos:start="1705:27" pos:end="1705:37">SIG_SETMASK</name></expr>;</expr_stmt>

                    <break pos:start="1707:21" pos:end="1707:26">break;</break>

                <default pos:start="1709:17" pos:end="1709:24">default:</default>

                    <expr_stmt pos:start="1711:21" pos:end="1711:41"><expr pos:start="1711:21" pos:end="1711:40"><name pos:start="1711:21" pos:end="1711:23">ret</name> <operator pos:start="1711:25" pos:end="1711:25">=</operator> <operator pos:start="1711:27" pos:end="1711:27">-</operator><name pos:start="1711:28" pos:end="1711:40">TARGET_EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="1713:21" pos:end="1713:30">goto <name pos:start="1713:26" pos:end="1713:29">fail</name>;</goto>

                </block_content>}</block></switch>

                <if_stmt pos:start="1717:17" pos:end="1719:32"><if pos:start="1717:17" pos:end="1719:32">if <condition pos:start="1717:20" pos:end="1717:84">(<expr pos:start="1717:21" pos:end="1717:83"><operator pos:start="1717:21" pos:end="1717:21">!</operator><operator pos:start="1717:22" pos:end="1717:22">(</operator><name pos:start="1717:23" pos:end="1717:23">p</name> <operator pos:start="1717:25" pos:end="1717:25">=</operator> <call pos:start="1717:27" pos:end="1717:82"><name pos:start="1717:27" pos:end="1717:35">lock_user</name><argument_list pos:start="1717:36" pos:end="1717:82">(<argument pos:start="1717:37" pos:end="1717:47"><expr pos:start="1717:37" pos:end="1717:47"><name pos:start="1717:37" pos:end="1717:47">VERIFY_READ</name></expr></argument>, <argument pos:start="1717:50" pos:end="1717:53"><expr pos:start="1717:50" pos:end="1717:53"><name pos:start="1717:50" pos:end="1717:53">arg2</name></expr></argument>, <argument pos:start="1717:56" pos:end="1717:78"><expr pos:start="1717:56" pos:end="1717:78"><sizeof pos:start="1717:56" pos:end="1717:78">sizeof<argument_list pos:start="1717:62" pos:end="1717:78">(<argument pos:start="1717:63" pos:end="1717:77"><expr pos:start="1717:63" pos:end="1717:77"><name pos:start="1717:63" pos:end="1717:77">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1717:81" pos:end="1717:81"><expr pos:start="1717:81" pos:end="1717:81"><literal type="number" pos:start="1717:81" pos:end="1717:81">1</literal></expr></argument>)</argument_list></call><operator pos:start="1717:83" pos:end="1717:83">)</operator></expr>)</condition><block type="pseudo" pos:start="1719:21" pos:end="1719:32"><block_content pos:start="1719:21" pos:end="1719:32">

                    <goto pos:start="1719:21" pos:end="1719:32">goto <name pos:start="1719:26" pos:end="1719:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1721:17" pos:end="1721:51"><expr pos:start="1721:17" pos:end="1721:50"><call pos:start="1721:17" pos:end="1721:50"><name pos:start="1721:17" pos:end="1721:41">target_to_host_old_sigset</name><argument_list pos:start="1721:42" pos:end="1721:50">(<argument pos:start="1721:43" pos:end="1721:46"><expr pos:start="1721:43" pos:end="1721:46"><operator pos:start="1721:43" pos:end="1721:43">&amp;</operator><name pos:start="1721:44" pos:end="1721:46">set</name></expr></argument>, <argument pos:start="1721:49" pos:end="1721:49"><expr pos:start="1721:49" pos:end="1721:49"><name pos:start="1721:49" pos:end="1721:49">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1723:17" pos:end="1723:40"><expr pos:start="1723:17" pos:end="1723:39"><call pos:start="1723:17" pos:end="1723:39"><name pos:start="1723:17" pos:end="1723:27">unlock_user</name><argument_list pos:start="1723:28" pos:end="1723:39">(<argument pos:start="1723:29" pos:end="1723:29"><expr pos:start="1723:29" pos:end="1723:29"><name pos:start="1723:29" pos:end="1723:29">p</name></expr></argument>, <argument pos:start="1723:32" pos:end="1723:35"><expr pos:start="1723:32" pos:end="1723:35"><name pos:start="1723:32" pos:end="1723:35">arg2</name></expr></argument>, <argument pos:start="1723:38" pos:end="1723:38"><expr pos:start="1723:38" pos:end="1723:38"><literal type="number" pos:start="1723:38" pos:end="1723:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1725:17" pos:end="1725:31"><expr pos:start="1725:17" pos:end="1725:30"><name pos:start="1725:17" pos:end="1725:23">set_ptr</name> <operator pos:start="1725:25" pos:end="1725:25">=</operator> <operator pos:start="1725:27" pos:end="1725:27">&amp;</operator><name pos:start="1725:28" pos:end="1725:30">set</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1727:15" pos:end="1733:13">else <block pos:start="1727:20" pos:end="1733:13">{<block_content pos:start="1729:17" pos:end="1731:31">

                <expr_stmt pos:start="1729:17" pos:end="1729:24"><expr pos:start="1729:17" pos:end="1729:23"><name pos:start="1729:17" pos:end="1729:19">how</name> <operator pos:start="1729:21" pos:end="1729:21">=</operator> <literal type="number" pos:start="1729:23" pos:end="1729:23">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1731:17" pos:end="1731:31"><expr pos:start="1731:17" pos:end="1731:30"><name pos:start="1731:17" pos:end="1731:23">set_ptr</name> <operator pos:start="1731:25" pos:end="1731:25">=</operator> <name pos:start="1731:27" pos:end="1731:30">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1735:13" pos:end="1735:64"><expr pos:start="1735:13" pos:end="1735:63"><name pos:start="1735:13" pos:end="1735:15">ret</name> <operator pos:start="1735:17" pos:end="1735:17">=</operator> <call pos:start="1735:19" pos:end="1735:63"><name pos:start="1735:19" pos:end="1735:27">get_errno</name><argument_list pos:start="1735:28" pos:end="1735:63">(<argument pos:start="1735:29" pos:end="1735:62"><expr pos:start="1735:29" pos:end="1735:62"><call pos:start="1735:29" pos:end="1735:62"><name pos:start="1735:29" pos:end="1735:39">sigprocmask</name><argument_list pos:start="1735:40" pos:end="1735:62">(<argument pos:start="1735:41" pos:end="1735:43"><expr pos:start="1735:41" pos:end="1735:43"><name pos:start="1735:41" pos:end="1735:43">how</name></expr></argument>, <argument pos:start="1735:46" pos:end="1735:52"><expr pos:start="1735:46" pos:end="1735:52"><name pos:start="1735:46" pos:end="1735:52">set_ptr</name></expr></argument>, <argument pos:start="1735:55" pos:end="1735:61"><expr pos:start="1735:55" pos:end="1735:61"><operator pos:start="1735:55" pos:end="1735:55">&amp;</operator><name pos:start="1735:56" pos:end="1735:61">oldset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1737:13" pos:end="1750:0"><if pos:start="1737:13" pos:end="1750:0">if <condition pos:start="1737:16" pos:end="1737:39">(<expr pos:start="1737:17" pos:end="1737:38"><operator pos:start="1737:17" pos:end="1737:17">!</operator><call pos:start="1737:18" pos:end="1737:30"><name pos:start="1737:18" pos:end="1737:25">is_error</name><argument_list pos:start="1737:26" pos:end="1737:30">(<argument pos:start="1737:27" pos:end="1737:29"><expr pos:start="1737:27" pos:end="1737:29"><name pos:start="1737:27" pos:end="1737:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1737:32" pos:end="1737:33">&amp;&amp;</operator> <name pos:start="1737:35" pos:end="1737:38">arg3</name></expr>)</condition> <block pos:start="1737:41" pos:end="1750:0">{<block_content pos:start="1739:17" pos:end="1745:62">

                <if_stmt pos:start="1739:17" pos:end="1741:32"><if pos:start="1739:17" pos:end="1741:32">if <condition pos:start="1739:20" pos:end="1739:85">(<expr pos:start="1739:21" pos:end="1739:84"><operator pos:start="1739:21" pos:end="1739:21">!</operator><operator pos:start="1739:22" pos:end="1739:22">(</operator><name pos:start="1739:23" pos:end="1739:23">p</name> <operator pos:start="1739:25" pos:end="1739:25">=</operator> <call pos:start="1739:27" pos:end="1739:83"><name pos:start="1739:27" pos:end="1739:35">lock_user</name><argument_list pos:start="1739:36" pos:end="1739:83">(<argument pos:start="1739:37" pos:end="1739:48"><expr pos:start="1739:37" pos:end="1739:48"><name pos:start="1739:37" pos:end="1739:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1739:51" pos:end="1739:54"><expr pos:start="1739:51" pos:end="1739:54"><name pos:start="1739:51" pos:end="1739:54">arg3</name></expr></argument>, <argument pos:start="1739:57" pos:end="1739:79"><expr pos:start="1739:57" pos:end="1739:79"><sizeof pos:start="1739:57" pos:end="1739:79">sizeof<argument_list pos:start="1739:63" pos:end="1739:79">(<argument pos:start="1739:64" pos:end="1739:78"><expr pos:start="1739:64" pos:end="1739:78"><name pos:start="1739:64" pos:end="1739:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1739:82" pos:end="1739:82"><expr pos:start="1739:82" pos:end="1739:82"><literal type="number" pos:start="1739:82" pos:end="1739:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="1739:84" pos:end="1739:84">)</operator></expr>)</condition><block type="pseudo" pos:start="1741:21" pos:end="1741:32"><block_content pos:start="1741:21" pos:end="1741:32">

                    <goto pos:start="1741:21" pos:end="1741:32">goto <name pos:start="1741:26" pos:end="1741:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1743:17" pos:end="1743:54"><expr pos:start="1743:17" pos:end="1743:53"><call pos:start="1743:17" pos:end="1743:53"><name pos:start="1743:17" pos:end="1743:41">host_to_target_old_sigset</name><argument_list pos:start="1743:42" pos:end="1743:53">(<argument pos:start="1743:43" pos:end="1743:43"><expr pos:start="1743:43" pos:end="1743:43"><name pos:start="1743:43" pos:end="1743:43">p</name></expr></argument>, <argument pos:start="1743:46" pos:end="1743:52"><expr pos:start="1743:46" pos:end="1743:52"><operator pos:start="1743:46" pos:end="1743:46">&amp;</operator><name pos:start="1743:47" pos:end="1743:52">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1745:17" pos:end="1745:62"><expr pos:start="1745:17" pos:end="1745:61"><call pos:start="1745:17" pos:end="1745:61"><name pos:start="1745:17" pos:end="1745:27">unlock_user</name><argument_list pos:start="1745:28" pos:end="1745:61">(<argument pos:start="1745:29" pos:end="1745:29"><expr pos:start="1745:29" pos:end="1745:29"><name pos:start="1745:29" pos:end="1745:29">p</name></expr></argument>, <argument pos:start="1745:32" pos:end="1745:35"><expr pos:start="1745:32" pos:end="1745:35"><name pos:start="1745:32" pos:end="1745:35">arg3</name></expr></argument>, <argument pos:start="1745:38" pos:end="1745:60"><expr pos:start="1745:38" pos:end="1745:60"><sizeof pos:start="1745:38" pos:end="1745:60">sizeof<argument_list pos:start="1745:44" pos:end="1745:60">(<argument pos:start="1745:45" pos:end="1745:59"><expr pos:start="1745:45" pos:end="1745:59"><name pos:start="1745:45" pos:end="1745:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="1749:1" pos:end="1749:6">#<cpp:directive pos:start="1749:2" pos:end="1749:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block>

        <break pos:start="1753:9" pos:end="1756:0">break;</break>

<cpp:endif pos:start="1755:1" pos:end="1755:6">#<cpp:directive pos:start="1755:2" pos:end="1755:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1757:5" pos:end="1757:34">case <expr pos:start="1757:10" pos:end="1757:33"><name pos:start="1757:10" pos:end="1757:33">TARGET_NR_rt_sigprocmask</name></expr>:</case>

        <block pos:start="1759:9" pos:end="1829:9">{<block_content pos:start="1761:13" pos:end="1827:13">

            <decl_stmt pos:start="1761:13" pos:end="1761:27"><decl pos:start="1761:13" pos:end="1761:26"><type pos:start="1761:13" pos:end="1761:15"><name pos:start="1761:13" pos:end="1761:15">int</name></type> <name pos:start="1761:17" pos:end="1761:19">how</name> <init pos:start="1761:21" pos:end="1761:26">= <expr pos:start="1761:23" pos:end="1761:26"><name pos:start="1761:23" pos:end="1761:26">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="1763:13" pos:end="1763:43"><decl pos:start="1763:13" pos:end="1763:24"><type pos:start="1763:13" pos:end="1763:20"><name pos:start="1763:13" pos:end="1763:20">sigset_t</name></type> <name pos:start="1763:22" pos:end="1763:24">set</name></decl>, <decl pos:start="1763:27" pos:end="1763:32"><type ref="prev" pos:start="1763:13" pos:end="1763:20"/><name pos:start="1763:27" pos:end="1763:32">oldset</name></decl>, <decl pos:start="1763:35" pos:end="1763:42"><type ref="prev" pos:start="1763:13" pos:end="1763:20"><modifier pos:start="1763:35" pos:end="1763:35">*</modifier></type><name pos:start="1763:36" pos:end="1763:42">set_ptr</name></decl>;</decl_stmt>



            <if_stmt pos:start="1767:13" pos:end="1813:13"><if pos:start="1767:13" pos:end="1807:13">if <condition pos:start="1767:16" pos:end="1767:21">(<expr pos:start="1767:17" pos:end="1767:20"><name pos:start="1767:17" pos:end="1767:20">arg2</name></expr>)</condition> <block pos:start="1767:23" pos:end="1807:13">{<block_content pos:start="1769:17" pos:end="1805:31">

                <switch pos:start="1769:17" pos:end="1795:17">switch<condition pos:start="1769:23" pos:end="1769:27">(<expr pos:start="1769:24" pos:end="1769:26"><name pos:start="1769:24" pos:end="1769:26">how</name></expr>)</condition> <block pos:start="1769:29" pos:end="1795:17">{<block_content pos:start="1771:17" pos:end="1793:30">

                <case pos:start="1771:17" pos:end="1771:38">case <expr pos:start="1771:22" pos:end="1771:37"><name pos:start="1771:22" pos:end="1771:37">TARGET_SIG_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="1773:21" pos:end="1773:36"><expr pos:start="1773:21" pos:end="1773:35"><name pos:start="1773:21" pos:end="1773:23">how</name> <operator pos:start="1773:25" pos:end="1773:25">=</operator> <name pos:start="1773:27" pos:end="1773:35">SIG_BLOCK</name></expr>;</expr_stmt>

                    <break pos:start="1775:21" pos:end="1775:26">break;</break>

                <case pos:start="1777:17" pos:end="1777:40">case <expr pos:start="1777:22" pos:end="1777:39"><name pos:start="1777:22" pos:end="1777:39">TARGET_SIG_UNBLOCK</name></expr>:</case>

                    <expr_stmt pos:start="1779:21" pos:end="1779:38"><expr pos:start="1779:21" pos:end="1779:37"><name pos:start="1779:21" pos:end="1779:23">how</name> <operator pos:start="1779:25" pos:end="1779:25">=</operator> <name pos:start="1779:27" pos:end="1779:37">SIG_UNBLOCK</name></expr>;</expr_stmt>

                    <break pos:start="1781:21" pos:end="1781:26">break;</break>

                <case pos:start="1783:17" pos:end="1783:40">case <expr pos:start="1783:22" pos:end="1783:39"><name pos:start="1783:22" pos:end="1783:39">TARGET_SIG_SETMASK</name></expr>:</case>

                    <expr_stmt pos:start="1785:21" pos:end="1785:38"><expr pos:start="1785:21" pos:end="1785:37"><name pos:start="1785:21" pos:end="1785:23">how</name> <operator pos:start="1785:25" pos:end="1785:25">=</operator> <name pos:start="1785:27" pos:end="1785:37">SIG_SETMASK</name></expr>;</expr_stmt>

                    <break pos:start="1787:21" pos:end="1787:26">break;</break>

                <default pos:start="1789:17" pos:end="1789:24">default:</default>

                    <expr_stmt pos:start="1791:21" pos:end="1791:41"><expr pos:start="1791:21" pos:end="1791:40"><name pos:start="1791:21" pos:end="1791:23">ret</name> <operator pos:start="1791:25" pos:end="1791:25">=</operator> <operator pos:start="1791:27" pos:end="1791:27">-</operator><name pos:start="1791:28" pos:end="1791:40">TARGET_EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="1793:21" pos:end="1793:30">goto <name pos:start="1793:26" pos:end="1793:29">fail</name>;</goto>

                </block_content>}</block></switch>

                <if_stmt pos:start="1797:17" pos:end="1799:32"><if pos:start="1797:17" pos:end="1799:32">if <condition pos:start="1797:20" pos:end="1797:84">(<expr pos:start="1797:21" pos:end="1797:83"><operator pos:start="1797:21" pos:end="1797:21">!</operator><operator pos:start="1797:22" pos:end="1797:22">(</operator><name pos:start="1797:23" pos:end="1797:23">p</name> <operator pos:start="1797:25" pos:end="1797:25">=</operator> <call pos:start="1797:27" pos:end="1797:82"><name pos:start="1797:27" pos:end="1797:35">lock_user</name><argument_list pos:start="1797:36" pos:end="1797:82">(<argument pos:start="1797:37" pos:end="1797:47"><expr pos:start="1797:37" pos:end="1797:47"><name pos:start="1797:37" pos:end="1797:47">VERIFY_READ</name></expr></argument>, <argument pos:start="1797:50" pos:end="1797:53"><expr pos:start="1797:50" pos:end="1797:53"><name pos:start="1797:50" pos:end="1797:53">arg2</name></expr></argument>, <argument pos:start="1797:56" pos:end="1797:78"><expr pos:start="1797:56" pos:end="1797:78"><sizeof pos:start="1797:56" pos:end="1797:78">sizeof<argument_list pos:start="1797:62" pos:end="1797:78">(<argument pos:start="1797:63" pos:end="1797:77"><expr pos:start="1797:63" pos:end="1797:77"><name pos:start="1797:63" pos:end="1797:77">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1797:81" pos:end="1797:81"><expr pos:start="1797:81" pos:end="1797:81"><literal type="number" pos:start="1797:81" pos:end="1797:81">1</literal></expr></argument>)</argument_list></call><operator pos:start="1797:83" pos:end="1797:83">)</operator></expr>)</condition><block type="pseudo" pos:start="1799:21" pos:end="1799:32"><block_content pos:start="1799:21" pos:end="1799:32">

                    <goto pos:start="1799:21" pos:end="1799:32">goto <name pos:start="1799:26" pos:end="1799:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1801:17" pos:end="1801:47"><expr pos:start="1801:17" pos:end="1801:46"><call pos:start="1801:17" pos:end="1801:46"><name pos:start="1801:17" pos:end="1801:37">target_to_host_sigset</name><argument_list pos:start="1801:38" pos:end="1801:46">(<argument pos:start="1801:39" pos:end="1801:42"><expr pos:start="1801:39" pos:end="1801:42"><operator pos:start="1801:39" pos:end="1801:39">&amp;</operator><name pos:start="1801:40" pos:end="1801:42">set</name></expr></argument>, <argument pos:start="1801:45" pos:end="1801:45"><expr pos:start="1801:45" pos:end="1801:45"><name pos:start="1801:45" pos:end="1801:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1803:17" pos:end="1803:40"><expr pos:start="1803:17" pos:end="1803:39"><call pos:start="1803:17" pos:end="1803:39"><name pos:start="1803:17" pos:end="1803:27">unlock_user</name><argument_list pos:start="1803:28" pos:end="1803:39">(<argument pos:start="1803:29" pos:end="1803:29"><expr pos:start="1803:29" pos:end="1803:29"><name pos:start="1803:29" pos:end="1803:29">p</name></expr></argument>, <argument pos:start="1803:32" pos:end="1803:35"><expr pos:start="1803:32" pos:end="1803:35"><name pos:start="1803:32" pos:end="1803:35">arg2</name></expr></argument>, <argument pos:start="1803:38" pos:end="1803:38"><expr pos:start="1803:38" pos:end="1803:38"><literal type="number" pos:start="1803:38" pos:end="1803:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1805:17" pos:end="1805:31"><expr pos:start="1805:17" pos:end="1805:30"><name pos:start="1805:17" pos:end="1805:23">set_ptr</name> <operator pos:start="1805:25" pos:end="1805:25">=</operator> <operator pos:start="1805:27" pos:end="1805:27">&amp;</operator><name pos:start="1805:28" pos:end="1805:30">set</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1807:15" pos:end="1813:13">else <block pos:start="1807:20" pos:end="1813:13">{<block_content pos:start="1809:17" pos:end="1811:31">

                <expr_stmt pos:start="1809:17" pos:end="1809:24"><expr pos:start="1809:17" pos:end="1809:23"><name pos:start="1809:17" pos:end="1809:19">how</name> <operator pos:start="1809:21" pos:end="1809:21">=</operator> <literal type="number" pos:start="1809:23" pos:end="1809:23">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1811:17" pos:end="1811:31"><expr pos:start="1811:17" pos:end="1811:30"><name pos:start="1811:17" pos:end="1811:23">set_ptr</name> <operator pos:start="1811:25" pos:end="1811:25">=</operator> <name pos:start="1811:27" pos:end="1811:30">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1815:13" pos:end="1815:64"><expr pos:start="1815:13" pos:end="1815:63"><name pos:start="1815:13" pos:end="1815:15">ret</name> <operator pos:start="1815:17" pos:end="1815:17">=</operator> <call pos:start="1815:19" pos:end="1815:63"><name pos:start="1815:19" pos:end="1815:27">get_errno</name><argument_list pos:start="1815:28" pos:end="1815:63">(<argument pos:start="1815:29" pos:end="1815:62"><expr pos:start="1815:29" pos:end="1815:62"><call pos:start="1815:29" pos:end="1815:62"><name pos:start="1815:29" pos:end="1815:39">sigprocmask</name><argument_list pos:start="1815:40" pos:end="1815:62">(<argument pos:start="1815:41" pos:end="1815:43"><expr pos:start="1815:41" pos:end="1815:43"><name pos:start="1815:41" pos:end="1815:43">how</name></expr></argument>, <argument pos:start="1815:46" pos:end="1815:52"><expr pos:start="1815:46" pos:end="1815:52"><name pos:start="1815:46" pos:end="1815:52">set_ptr</name></expr></argument>, <argument pos:start="1815:55" pos:end="1815:61"><expr pos:start="1815:55" pos:end="1815:61"><operator pos:start="1815:55" pos:end="1815:55">&amp;</operator><name pos:start="1815:56" pos:end="1815:61">oldset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1817:13" pos:end="1827:13"><if pos:start="1817:13" pos:end="1827:13">if <condition pos:start="1817:16" pos:end="1817:39">(<expr pos:start="1817:17" pos:end="1817:38"><operator pos:start="1817:17" pos:end="1817:17">!</operator><call pos:start="1817:18" pos:end="1817:30"><name pos:start="1817:18" pos:end="1817:25">is_error</name><argument_list pos:start="1817:26" pos:end="1817:30">(<argument pos:start="1817:27" pos:end="1817:29"><expr pos:start="1817:27" pos:end="1817:29"><name pos:start="1817:27" pos:end="1817:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1817:32" pos:end="1817:33">&amp;&amp;</operator> <name pos:start="1817:35" pos:end="1817:38">arg3</name></expr>)</condition> <block pos:start="1817:41" pos:end="1827:13">{<block_content pos:start="1819:17" pos:end="1825:62">

                <if_stmt pos:start="1819:17" pos:end="1821:32"><if pos:start="1819:17" pos:end="1821:32">if <condition pos:start="1819:20" pos:end="1819:85">(<expr pos:start="1819:21" pos:end="1819:84"><operator pos:start="1819:21" pos:end="1819:21">!</operator><operator pos:start="1819:22" pos:end="1819:22">(</operator><name pos:start="1819:23" pos:end="1819:23">p</name> <operator pos:start="1819:25" pos:end="1819:25">=</operator> <call pos:start="1819:27" pos:end="1819:83"><name pos:start="1819:27" pos:end="1819:35">lock_user</name><argument_list pos:start="1819:36" pos:end="1819:83">(<argument pos:start="1819:37" pos:end="1819:48"><expr pos:start="1819:37" pos:end="1819:48"><name pos:start="1819:37" pos:end="1819:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1819:51" pos:end="1819:54"><expr pos:start="1819:51" pos:end="1819:54"><name pos:start="1819:51" pos:end="1819:54">arg3</name></expr></argument>, <argument pos:start="1819:57" pos:end="1819:79"><expr pos:start="1819:57" pos:end="1819:79"><sizeof pos:start="1819:57" pos:end="1819:79">sizeof<argument_list pos:start="1819:63" pos:end="1819:79">(<argument pos:start="1819:64" pos:end="1819:78"><expr pos:start="1819:64" pos:end="1819:78"><name pos:start="1819:64" pos:end="1819:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1819:82" pos:end="1819:82"><expr pos:start="1819:82" pos:end="1819:82"><literal type="number" pos:start="1819:82" pos:end="1819:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="1819:84" pos:end="1819:84">)</operator></expr>)</condition><block type="pseudo" pos:start="1821:21" pos:end="1821:32"><block_content pos:start="1821:21" pos:end="1821:32">

                    <goto pos:start="1821:21" pos:end="1821:32">goto <name pos:start="1821:26" pos:end="1821:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1823:17" pos:end="1823:50"><expr pos:start="1823:17" pos:end="1823:49"><call pos:start="1823:17" pos:end="1823:49"><name pos:start="1823:17" pos:end="1823:37">host_to_target_sigset</name><argument_list pos:start="1823:38" pos:end="1823:49">(<argument pos:start="1823:39" pos:end="1823:39"><expr pos:start="1823:39" pos:end="1823:39"><name pos:start="1823:39" pos:end="1823:39">p</name></expr></argument>, <argument pos:start="1823:42" pos:end="1823:48"><expr pos:start="1823:42" pos:end="1823:48"><operator pos:start="1823:42" pos:end="1823:42">&amp;</operator><name pos:start="1823:43" pos:end="1823:48">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1825:17" pos:end="1825:62"><expr pos:start="1825:17" pos:end="1825:61"><call pos:start="1825:17" pos:end="1825:61"><name pos:start="1825:17" pos:end="1825:27">unlock_user</name><argument_list pos:start="1825:28" pos:end="1825:61">(<argument pos:start="1825:29" pos:end="1825:29"><expr pos:start="1825:29" pos:end="1825:29"><name pos:start="1825:29" pos:end="1825:29">p</name></expr></argument>, <argument pos:start="1825:32" pos:end="1825:35"><expr pos:start="1825:32" pos:end="1825:35"><name pos:start="1825:32" pos:end="1825:35">arg3</name></expr></argument>, <argument pos:start="1825:38" pos:end="1825:60"><expr pos:start="1825:38" pos:end="1825:60"><sizeof pos:start="1825:38" pos:end="1825:60">sizeof<argument_list pos:start="1825:44" pos:end="1825:60">(<argument pos:start="1825:45" pos:end="1825:59"><expr pos:start="1825:45" pos:end="1825:59"><name pos:start="1825:45" pos:end="1825:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1831:9" pos:end="1834:0">break;</break>

<cpp:ifdef pos:start="1833:1" pos:end="1833:27">#<cpp:directive pos:start="1833:2" pos:end="1833:6">ifdef</cpp:directive> <name pos:start="1833:8" pos:end="1833:27">TARGET_NR_sigpending</name></cpp:ifdef>

    <case pos:start="1835:5" pos:end="1835:30">case <expr pos:start="1835:10" pos:end="1835:29"><name pos:start="1835:10" pos:end="1835:29">TARGET_NR_sigpending</name></expr>:</case>

        <block pos:start="1837:9" pos:end="1855:9">{<block_content pos:start="1839:13" pos:end="1853:13">

            <decl_stmt pos:start="1839:13" pos:end="1839:25"><decl pos:start="1839:13" pos:end="1839:24"><type pos:start="1839:13" pos:end="1839:20"><name pos:start="1839:13" pos:end="1839:20">sigset_t</name></type> <name pos:start="1839:22" pos:end="1839:24">set</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1841:13" pos:end="1841:46"><expr pos:start="1841:13" pos:end="1841:45"><name pos:start="1841:13" pos:end="1841:15">ret</name> <operator pos:start="1841:17" pos:end="1841:17">=</operator> <call pos:start="1841:19" pos:end="1841:45"><name pos:start="1841:19" pos:end="1841:27">get_errno</name><argument_list pos:start="1841:28" pos:end="1841:45">(<argument pos:start="1841:29" pos:end="1841:44"><expr pos:start="1841:29" pos:end="1841:44"><call pos:start="1841:29" pos:end="1841:44"><name pos:start="1841:29" pos:end="1841:38">sigpending</name><argument_list pos:start="1841:39" pos:end="1841:44">(<argument pos:start="1841:40" pos:end="1841:43"><expr pos:start="1841:40" pos:end="1841:43"><operator pos:start="1841:40" pos:end="1841:40">&amp;</operator><name pos:start="1841:41" pos:end="1841:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1843:13" pos:end="1853:13"><if pos:start="1843:13" pos:end="1853:13">if <condition pos:start="1843:16" pos:end="1843:31">(<expr pos:start="1843:17" pos:end="1843:30"><operator pos:start="1843:17" pos:end="1843:17">!</operator><call pos:start="1843:18" pos:end="1843:30"><name pos:start="1843:18" pos:end="1843:25">is_error</name><argument_list pos:start="1843:26" pos:end="1843:30">(<argument pos:start="1843:27" pos:end="1843:29"><expr pos:start="1843:27" pos:end="1843:29"><name pos:start="1843:27" pos:end="1843:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1843:33" pos:end="1853:13">{<block_content pos:start="1845:17" pos:end="1851:62">

                <if_stmt pos:start="1845:17" pos:end="1847:32"><if pos:start="1845:17" pos:end="1847:32">if <condition pos:start="1845:20" pos:end="1845:85">(<expr pos:start="1845:21" pos:end="1845:84"><operator pos:start="1845:21" pos:end="1845:21">!</operator><operator pos:start="1845:22" pos:end="1845:22">(</operator><name pos:start="1845:23" pos:end="1845:23">p</name> <operator pos:start="1845:25" pos:end="1845:25">=</operator> <call pos:start="1845:27" pos:end="1845:83"><name pos:start="1845:27" pos:end="1845:35">lock_user</name><argument_list pos:start="1845:36" pos:end="1845:83">(<argument pos:start="1845:37" pos:end="1845:48"><expr pos:start="1845:37" pos:end="1845:48"><name pos:start="1845:37" pos:end="1845:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1845:51" pos:end="1845:54"><expr pos:start="1845:51" pos:end="1845:54"><name pos:start="1845:51" pos:end="1845:54">arg1</name></expr></argument>, <argument pos:start="1845:57" pos:end="1845:79"><expr pos:start="1845:57" pos:end="1845:79"><sizeof pos:start="1845:57" pos:end="1845:79">sizeof<argument_list pos:start="1845:63" pos:end="1845:79">(<argument pos:start="1845:64" pos:end="1845:78"><expr pos:start="1845:64" pos:end="1845:78"><name pos:start="1845:64" pos:end="1845:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1845:82" pos:end="1845:82"><expr pos:start="1845:82" pos:end="1845:82"><literal type="number" pos:start="1845:82" pos:end="1845:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="1845:84" pos:end="1845:84">)</operator></expr>)</condition><block type="pseudo" pos:start="1847:21" pos:end="1847:32"><block_content pos:start="1847:21" pos:end="1847:32">

                    <goto pos:start="1847:21" pos:end="1847:32">goto <name pos:start="1847:26" pos:end="1847:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1849:17" pos:end="1849:51"><expr pos:start="1849:17" pos:end="1849:50"><call pos:start="1849:17" pos:end="1849:50"><name pos:start="1849:17" pos:end="1849:41">host_to_target_old_sigset</name><argument_list pos:start="1849:42" pos:end="1849:50">(<argument pos:start="1849:43" pos:end="1849:43"><expr pos:start="1849:43" pos:end="1849:43"><name pos:start="1849:43" pos:end="1849:43">p</name></expr></argument>, <argument pos:start="1849:46" pos:end="1849:49"><expr pos:start="1849:46" pos:end="1849:49"><operator pos:start="1849:46" pos:end="1849:46">&amp;</operator><name pos:start="1849:47" pos:end="1849:49">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1851:17" pos:end="1851:62"><expr pos:start="1851:17" pos:end="1851:61"><call pos:start="1851:17" pos:end="1851:61"><name pos:start="1851:17" pos:end="1851:27">unlock_user</name><argument_list pos:start="1851:28" pos:end="1851:61">(<argument pos:start="1851:29" pos:end="1851:29"><expr pos:start="1851:29" pos:end="1851:29"><name pos:start="1851:29" pos:end="1851:29">p</name></expr></argument>, <argument pos:start="1851:32" pos:end="1851:35"><expr pos:start="1851:32" pos:end="1851:35"><name pos:start="1851:32" pos:end="1851:35">arg1</name></expr></argument>, <argument pos:start="1851:38" pos:end="1851:60"><expr pos:start="1851:38" pos:end="1851:60"><sizeof pos:start="1851:38" pos:end="1851:60">sizeof<argument_list pos:start="1851:44" pos:end="1851:60">(<argument pos:start="1851:45" pos:end="1851:59"><expr pos:start="1851:45" pos:end="1851:59"><name pos:start="1851:45" pos:end="1851:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1857:9" pos:end="1860:0">break;</break>

<cpp:endif pos:start="1859:1" pos:end="1859:6">#<cpp:directive pos:start="1859:2" pos:end="1859:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1861:5" pos:end="1861:33">case <expr pos:start="1861:10" pos:end="1861:32"><name pos:start="1861:10" pos:end="1861:32">TARGET_NR_rt_sigpending</name></expr>:</case>

        <block pos:start="1863:9" pos:end="1881:9">{<block_content pos:start="1865:13" pos:end="1879:13">

            <decl_stmt pos:start="1865:13" pos:end="1865:25"><decl pos:start="1865:13" pos:end="1865:24"><type pos:start="1865:13" pos:end="1865:20"><name pos:start="1865:13" pos:end="1865:20">sigset_t</name></type> <name pos:start="1865:22" pos:end="1865:24">set</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1867:13" pos:end="1867:46"><expr pos:start="1867:13" pos:end="1867:45"><name pos:start="1867:13" pos:end="1867:15">ret</name> <operator pos:start="1867:17" pos:end="1867:17">=</operator> <call pos:start="1867:19" pos:end="1867:45"><name pos:start="1867:19" pos:end="1867:27">get_errno</name><argument_list pos:start="1867:28" pos:end="1867:45">(<argument pos:start="1867:29" pos:end="1867:44"><expr pos:start="1867:29" pos:end="1867:44"><call pos:start="1867:29" pos:end="1867:44"><name pos:start="1867:29" pos:end="1867:38">sigpending</name><argument_list pos:start="1867:39" pos:end="1867:44">(<argument pos:start="1867:40" pos:end="1867:43"><expr pos:start="1867:40" pos:end="1867:43"><operator pos:start="1867:40" pos:end="1867:40">&amp;</operator><name pos:start="1867:41" pos:end="1867:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1869:13" pos:end="1879:13"><if pos:start="1869:13" pos:end="1879:13">if <condition pos:start="1869:16" pos:end="1869:31">(<expr pos:start="1869:17" pos:end="1869:30"><operator pos:start="1869:17" pos:end="1869:17">!</operator><call pos:start="1869:18" pos:end="1869:30"><name pos:start="1869:18" pos:end="1869:25">is_error</name><argument_list pos:start="1869:26" pos:end="1869:30">(<argument pos:start="1869:27" pos:end="1869:29"><expr pos:start="1869:27" pos:end="1869:29"><name pos:start="1869:27" pos:end="1869:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1869:33" pos:end="1879:13">{<block_content pos:start="1871:17" pos:end="1877:62">

                <if_stmt pos:start="1871:17" pos:end="1873:32"><if pos:start="1871:17" pos:end="1873:32">if <condition pos:start="1871:20" pos:end="1871:85">(<expr pos:start="1871:21" pos:end="1871:84"><operator pos:start="1871:21" pos:end="1871:21">!</operator><operator pos:start="1871:22" pos:end="1871:22">(</operator><name pos:start="1871:23" pos:end="1871:23">p</name> <operator pos:start="1871:25" pos:end="1871:25">=</operator> <call pos:start="1871:27" pos:end="1871:83"><name pos:start="1871:27" pos:end="1871:35">lock_user</name><argument_list pos:start="1871:36" pos:end="1871:83">(<argument pos:start="1871:37" pos:end="1871:48"><expr pos:start="1871:37" pos:end="1871:48"><name pos:start="1871:37" pos:end="1871:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1871:51" pos:end="1871:54"><expr pos:start="1871:51" pos:end="1871:54"><name pos:start="1871:51" pos:end="1871:54">arg1</name></expr></argument>, <argument pos:start="1871:57" pos:end="1871:79"><expr pos:start="1871:57" pos:end="1871:79"><sizeof pos:start="1871:57" pos:end="1871:79">sizeof<argument_list pos:start="1871:63" pos:end="1871:79">(<argument pos:start="1871:64" pos:end="1871:78"><expr pos:start="1871:64" pos:end="1871:78"><name pos:start="1871:64" pos:end="1871:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1871:82" pos:end="1871:82"><expr pos:start="1871:82" pos:end="1871:82"><literal type="number" pos:start="1871:82" pos:end="1871:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="1871:84" pos:end="1871:84">)</operator></expr>)</condition><block type="pseudo" pos:start="1873:21" pos:end="1873:32"><block_content pos:start="1873:21" pos:end="1873:32">

                    <goto pos:start="1873:21" pos:end="1873:32">goto <name pos:start="1873:26" pos:end="1873:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1875:17" pos:end="1875:47"><expr pos:start="1875:17" pos:end="1875:46"><call pos:start="1875:17" pos:end="1875:46"><name pos:start="1875:17" pos:end="1875:37">host_to_target_sigset</name><argument_list pos:start="1875:38" pos:end="1875:46">(<argument pos:start="1875:39" pos:end="1875:39"><expr pos:start="1875:39" pos:end="1875:39"><name pos:start="1875:39" pos:end="1875:39">p</name></expr></argument>, <argument pos:start="1875:42" pos:end="1875:45"><expr pos:start="1875:42" pos:end="1875:45"><operator pos:start="1875:42" pos:end="1875:42">&amp;</operator><name pos:start="1875:43" pos:end="1875:45">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1877:17" pos:end="1877:62"><expr pos:start="1877:17" pos:end="1877:61"><call pos:start="1877:17" pos:end="1877:61"><name pos:start="1877:17" pos:end="1877:27">unlock_user</name><argument_list pos:start="1877:28" pos:end="1877:61">(<argument pos:start="1877:29" pos:end="1877:29"><expr pos:start="1877:29" pos:end="1877:29"><name pos:start="1877:29" pos:end="1877:29">p</name></expr></argument>, <argument pos:start="1877:32" pos:end="1877:35"><expr pos:start="1877:32" pos:end="1877:35"><name pos:start="1877:32" pos:end="1877:35">arg1</name></expr></argument>, <argument pos:start="1877:38" pos:end="1877:60"><expr pos:start="1877:38" pos:end="1877:60"><sizeof pos:start="1877:38" pos:end="1877:60">sizeof<argument_list pos:start="1877:44" pos:end="1877:60">(<argument pos:start="1877:45" pos:end="1877:59"><expr pos:start="1877:45" pos:end="1877:59"><name pos:start="1877:45" pos:end="1877:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1883:9" pos:end="1886:0">break;</break>

<cpp:ifdef pos:start="1885:1" pos:end="1885:27">#<cpp:directive pos:start="1885:2" pos:end="1885:6">ifdef</cpp:directive> <name pos:start="1885:8" pos:end="1885:27">TARGET_NR_sigsuspend</name></cpp:ifdef>

    <case pos:start="1887:5" pos:end="1887:30">case <expr pos:start="1887:10" pos:end="1887:29"><name pos:start="1887:10" pos:end="1887:29">TARGET_NR_sigsuspend</name></expr>:</case>

        <block pos:start="1889:9" pos:end="1913:9">{<block_content pos:start="1891:13" pos:end="1911:46">

            <decl_stmt pos:start="1891:13" pos:end="1894:0"><decl pos:start="1891:13" pos:end="1891:24"><type pos:start="1891:13" pos:end="1891:20"><name pos:start="1891:13" pos:end="1891:20">sigset_t</name></type> <name pos:start="1891:22" pos:end="1891:24">set</name></decl>;</decl_stmt>

<cpp:if pos:start="1893:1" pos:end="1893:25">#<cpp:directive pos:start="1893:2" pos:end="1893:3">if</cpp:directive> <expr pos:start="1893:5" pos:end="1893:25"><call pos:start="1893:5" pos:end="1893:25"><name pos:start="1893:5" pos:end="1893:11">defined</name><argument_list pos:start="1893:12" pos:end="1893:25">(<argument pos:start="1893:13" pos:end="1893:24"><expr pos:start="1893:13" pos:end="1893:24"><name pos:start="1893:13" pos:end="1893:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <decl_stmt pos:start="1895:13" pos:end="1895:34"><decl pos:start="1895:13" pos:end="1895:33"><type pos:start="1895:13" pos:end="1895:21"><name pos:start="1895:13" pos:end="1895:21">abi_ulong</name></type> <name pos:start="1895:23" pos:end="1895:26">mask</name> <init pos:start="1895:28" pos:end="1895:33">= <expr pos:start="1895:30" pos:end="1895:33"><name pos:start="1895:30" pos:end="1895:33">arg1</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="1897:13" pos:end="1900:0"><expr pos:start="1897:13" pos:end="1897:50"><call pos:start="1897:13" pos:end="1897:50"><name pos:start="1897:13" pos:end="1897:37">target_to_host_old_sigset</name><argument_list pos:start="1897:38" pos:end="1897:50">(<argument pos:start="1897:39" pos:end="1897:42"><expr pos:start="1897:39" pos:end="1897:42"><operator pos:start="1897:39" pos:end="1897:39">&amp;</operator><name pos:start="1897:40" pos:end="1897:42">set</name></expr></argument>, <argument pos:start="1897:45" pos:end="1897:49"><expr pos:start="1897:45" pos:end="1897:49"><operator pos:start="1897:45" pos:end="1897:45">&amp;</operator><name pos:start="1897:46" pos:end="1897:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1899:1" pos:end="1899:5">#<cpp:directive pos:start="1899:2" pos:end="1899:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="1901:13" pos:end="1903:28"><if pos:start="1901:13" pos:end="1903:28">if <condition pos:start="1901:16" pos:end="1901:80">(<expr pos:start="1901:17" pos:end="1901:79"><operator pos:start="1901:17" pos:end="1901:17">!</operator><operator pos:start="1901:18" pos:end="1901:18">(</operator><name pos:start="1901:19" pos:end="1901:19">p</name> <operator pos:start="1901:21" pos:end="1901:21">=</operator> <call pos:start="1901:23" pos:end="1901:78"><name pos:start="1901:23" pos:end="1901:31">lock_user</name><argument_list pos:start="1901:32" pos:end="1901:78">(<argument pos:start="1901:33" pos:end="1901:43"><expr pos:start="1901:33" pos:end="1901:43"><name pos:start="1901:33" pos:end="1901:43">VERIFY_READ</name></expr></argument>, <argument pos:start="1901:46" pos:end="1901:49"><expr pos:start="1901:46" pos:end="1901:49"><name pos:start="1901:46" pos:end="1901:49">arg1</name></expr></argument>, <argument pos:start="1901:52" pos:end="1901:74"><expr pos:start="1901:52" pos:end="1901:74"><sizeof pos:start="1901:52" pos:end="1901:74">sizeof<argument_list pos:start="1901:58" pos:end="1901:74">(<argument pos:start="1901:59" pos:end="1901:73"><expr pos:start="1901:59" pos:end="1901:73"><name pos:start="1901:59" pos:end="1901:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1901:77" pos:end="1901:77"><expr pos:start="1901:77" pos:end="1901:77"><literal type="number" pos:start="1901:77" pos:end="1901:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="1901:79" pos:end="1901:79">)</operator></expr>)</condition><block type="pseudo" pos:start="1903:17" pos:end="1903:28"><block_content pos:start="1903:17" pos:end="1903:28">

                <goto pos:start="1903:17" pos:end="1903:28">goto <name pos:start="1903:22" pos:end="1903:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1905:13" pos:end="1905:47"><expr pos:start="1905:13" pos:end="1905:46"><call pos:start="1905:13" pos:end="1905:46"><name pos:start="1905:13" pos:end="1905:37">target_to_host_old_sigset</name><argument_list pos:start="1905:38" pos:end="1905:46">(<argument pos:start="1905:39" pos:end="1905:42"><expr pos:start="1905:39" pos:end="1905:42"><operator pos:start="1905:39" pos:end="1905:39">&amp;</operator><name pos:start="1905:40" pos:end="1905:42">set</name></expr></argument>, <argument pos:start="1905:45" pos:end="1905:45"><expr pos:start="1905:45" pos:end="1905:45"><name pos:start="1905:45" pos:end="1905:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1907:13" pos:end="1910:0"><expr pos:start="1907:13" pos:end="1907:35"><call pos:start="1907:13" pos:end="1907:35"><name pos:start="1907:13" pos:end="1907:23">unlock_user</name><argument_list pos:start="1907:24" pos:end="1907:35">(<argument pos:start="1907:25" pos:end="1907:25"><expr pos:start="1907:25" pos:end="1907:25"><name pos:start="1907:25" pos:end="1907:25">p</name></expr></argument>, <argument pos:start="1907:28" pos:end="1907:31"><expr pos:start="1907:28" pos:end="1907:31"><name pos:start="1907:28" pos:end="1907:31">arg1</name></expr></argument>, <argument pos:start="1907:34" pos:end="1907:34"><expr pos:start="1907:34" pos:end="1907:34"><literal type="number" pos:start="1907:34" pos:end="1907:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1909:1" pos:end="1909:6">#<cpp:directive pos:start="1909:2" pos:end="1909:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1911:13" pos:end="1911:46"><expr pos:start="1911:13" pos:end="1911:45"><name pos:start="1911:13" pos:end="1911:15">ret</name> <operator pos:start="1911:17" pos:end="1911:17">=</operator> <call pos:start="1911:19" pos:end="1911:45"><name pos:start="1911:19" pos:end="1911:27">get_errno</name><argument_list pos:start="1911:28" pos:end="1911:45">(<argument pos:start="1911:29" pos:end="1911:44"><expr pos:start="1911:29" pos:end="1911:44"><call pos:start="1911:29" pos:end="1911:44"><name pos:start="1911:29" pos:end="1911:38">sigsuspend</name><argument_list pos:start="1911:39" pos:end="1911:44">(<argument pos:start="1911:40" pos:end="1911:43"><expr pos:start="1911:40" pos:end="1911:43"><operator pos:start="1911:40" pos:end="1911:40">&amp;</operator><name pos:start="1911:41" pos:end="1911:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1915:9" pos:end="1918:0">break;</break>

<cpp:endif pos:start="1917:1" pos:end="1917:6">#<cpp:directive pos:start="1917:2" pos:end="1917:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1919:5" pos:end="1919:33">case <expr pos:start="1919:10" pos:end="1919:32"><name pos:start="1919:10" pos:end="1919:32">TARGET_NR_rt_sigsuspend</name></expr>:</case>

        <block pos:start="1921:9" pos:end="1935:9">{<block_content pos:start="1923:13" pos:end="1933:46">

            <decl_stmt pos:start="1923:13" pos:end="1923:25"><decl pos:start="1923:13" pos:end="1923:24"><type pos:start="1923:13" pos:end="1923:20"><name pos:start="1923:13" pos:end="1923:20">sigset_t</name></type> <name pos:start="1923:22" pos:end="1923:24">set</name></decl>;</decl_stmt>

            <if_stmt pos:start="1925:13" pos:end="1927:28"><if pos:start="1925:13" pos:end="1927:28">if <condition pos:start="1925:16" pos:end="1925:80">(<expr pos:start="1925:17" pos:end="1925:79"><operator pos:start="1925:17" pos:end="1925:17">!</operator><operator pos:start="1925:18" pos:end="1925:18">(</operator><name pos:start="1925:19" pos:end="1925:19">p</name> <operator pos:start="1925:21" pos:end="1925:21">=</operator> <call pos:start="1925:23" pos:end="1925:78"><name pos:start="1925:23" pos:end="1925:31">lock_user</name><argument_list pos:start="1925:32" pos:end="1925:78">(<argument pos:start="1925:33" pos:end="1925:43"><expr pos:start="1925:33" pos:end="1925:43"><name pos:start="1925:33" pos:end="1925:43">VERIFY_READ</name></expr></argument>, <argument pos:start="1925:46" pos:end="1925:49"><expr pos:start="1925:46" pos:end="1925:49"><name pos:start="1925:46" pos:end="1925:49">arg1</name></expr></argument>, <argument pos:start="1925:52" pos:end="1925:74"><expr pos:start="1925:52" pos:end="1925:74"><sizeof pos:start="1925:52" pos:end="1925:74">sizeof<argument_list pos:start="1925:58" pos:end="1925:74">(<argument pos:start="1925:59" pos:end="1925:73"><expr pos:start="1925:59" pos:end="1925:73"><name pos:start="1925:59" pos:end="1925:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1925:77" pos:end="1925:77"><expr pos:start="1925:77" pos:end="1925:77"><literal type="number" pos:start="1925:77" pos:end="1925:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="1925:79" pos:end="1925:79">)</operator></expr>)</condition><block type="pseudo" pos:start="1927:17" pos:end="1927:28"><block_content pos:start="1927:17" pos:end="1927:28">

                <goto pos:start="1927:17" pos:end="1927:28">goto <name pos:start="1927:22" pos:end="1927:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1929:13" pos:end="1929:43"><expr pos:start="1929:13" pos:end="1929:42"><call pos:start="1929:13" pos:end="1929:42"><name pos:start="1929:13" pos:end="1929:33">target_to_host_sigset</name><argument_list pos:start="1929:34" pos:end="1929:42">(<argument pos:start="1929:35" pos:end="1929:38"><expr pos:start="1929:35" pos:end="1929:38"><operator pos:start="1929:35" pos:end="1929:35">&amp;</operator><name pos:start="1929:36" pos:end="1929:38">set</name></expr></argument>, <argument pos:start="1929:41" pos:end="1929:41"><expr pos:start="1929:41" pos:end="1929:41"><name pos:start="1929:41" pos:end="1929:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1931:13" pos:end="1931:36"><expr pos:start="1931:13" pos:end="1931:35"><call pos:start="1931:13" pos:end="1931:35"><name pos:start="1931:13" pos:end="1931:23">unlock_user</name><argument_list pos:start="1931:24" pos:end="1931:35">(<argument pos:start="1931:25" pos:end="1931:25"><expr pos:start="1931:25" pos:end="1931:25"><name pos:start="1931:25" pos:end="1931:25">p</name></expr></argument>, <argument pos:start="1931:28" pos:end="1931:31"><expr pos:start="1931:28" pos:end="1931:31"><name pos:start="1931:28" pos:end="1931:31">arg1</name></expr></argument>, <argument pos:start="1931:34" pos:end="1931:34"><expr pos:start="1931:34" pos:end="1931:34"><literal type="number" pos:start="1931:34" pos:end="1931:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1933:13" pos:end="1933:46"><expr pos:start="1933:13" pos:end="1933:45"><name pos:start="1933:13" pos:end="1933:15">ret</name> <operator pos:start="1933:17" pos:end="1933:17">=</operator> <call pos:start="1933:19" pos:end="1933:45"><name pos:start="1933:19" pos:end="1933:27">get_errno</name><argument_list pos:start="1933:28" pos:end="1933:45">(<argument pos:start="1933:29" pos:end="1933:44"><expr pos:start="1933:29" pos:end="1933:44"><call pos:start="1933:29" pos:end="1933:44"><name pos:start="1933:29" pos:end="1933:38">sigsuspend</name><argument_list pos:start="1933:39" pos:end="1933:44">(<argument pos:start="1933:40" pos:end="1933:43"><expr pos:start="1933:40" pos:end="1933:43"><operator pos:start="1933:40" pos:end="1933:40">&amp;</operator><name pos:start="1933:41" pos:end="1933:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1937:9" pos:end="1937:14">break;</break>

    <case pos:start="1939:5" pos:end="1939:35">case <expr pos:start="1939:10" pos:end="1939:34"><name pos:start="1939:10" pos:end="1939:34">TARGET_NR_rt_sigtimedwait</name></expr>:</case>

        <block pos:start="1941:9" pos:end="1985:9">{<block_content pos:start="1943:13" pos:end="1983:13">

            <decl_stmt pos:start="1943:13" pos:end="1943:25"><decl pos:start="1943:13" pos:end="1943:24"><type pos:start="1943:13" pos:end="1943:20"><name pos:start="1943:13" pos:end="1943:20">sigset_t</name></type> <name pos:start="1943:22" pos:end="1943:24">set</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1945:13" pos:end="1945:39"><decl pos:start="1945:13" pos:end="1945:31"><type pos:start="1945:13" pos:end="1945:27"><name pos:start="1945:13" pos:end="1945:27"><name pos:start="1945:13" pos:end="1945:18">struct</name> <name pos:start="1945:20" pos:end="1945:27">timespec</name></name></type> <name pos:start="1945:29" pos:end="1945:31">uts</name></decl>, <decl pos:start="1945:34" pos:end="1945:38"><type ref="prev" pos:start="1945:13" pos:end="1945:27"><modifier pos:start="1945:34" pos:end="1945:34">*</modifier></type><name pos:start="1945:35" pos:end="1945:38">puts</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1947:13" pos:end="1947:28"><decl pos:start="1947:13" pos:end="1947:27"><type pos:start="1947:13" pos:end="1947:21"><name pos:start="1947:13" pos:end="1947:21">siginfo_t</name></type> <name pos:start="1947:23" pos:end="1947:27">uinfo</name></decl>;</decl_stmt>



            <if_stmt pos:start="1951:13" pos:end="1953:28"><if pos:start="1951:13" pos:end="1953:28">if <condition pos:start="1951:16" pos:end="1951:80">(<expr pos:start="1951:17" pos:end="1951:79"><operator pos:start="1951:17" pos:end="1951:17">!</operator><operator pos:start="1951:18" pos:end="1951:18">(</operator><name pos:start="1951:19" pos:end="1951:19">p</name> <operator pos:start="1951:21" pos:end="1951:21">=</operator> <call pos:start="1951:23" pos:end="1951:78"><name pos:start="1951:23" pos:end="1951:31">lock_user</name><argument_list pos:start="1951:32" pos:end="1951:78">(<argument pos:start="1951:33" pos:end="1951:43"><expr pos:start="1951:33" pos:end="1951:43"><name pos:start="1951:33" pos:end="1951:43">VERIFY_READ</name></expr></argument>, <argument pos:start="1951:46" pos:end="1951:49"><expr pos:start="1951:46" pos:end="1951:49"><name pos:start="1951:46" pos:end="1951:49">arg1</name></expr></argument>, <argument pos:start="1951:52" pos:end="1951:74"><expr pos:start="1951:52" pos:end="1951:74"><sizeof pos:start="1951:52" pos:end="1951:74">sizeof<argument_list pos:start="1951:58" pos:end="1951:74">(<argument pos:start="1951:59" pos:end="1951:73"><expr pos:start="1951:59" pos:end="1951:73"><name pos:start="1951:59" pos:end="1951:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1951:77" pos:end="1951:77"><expr pos:start="1951:77" pos:end="1951:77"><literal type="number" pos:start="1951:77" pos:end="1951:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="1951:79" pos:end="1951:79">)</operator></expr>)</condition><block type="pseudo" pos:start="1953:17" pos:end="1953:28"><block_content pos:start="1953:17" pos:end="1953:28">

                <goto pos:start="1953:17" pos:end="1953:28">goto <name pos:start="1953:22" pos:end="1953:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1955:13" pos:end="1955:43"><expr pos:start="1955:13" pos:end="1955:42"><call pos:start="1955:13" pos:end="1955:42"><name pos:start="1955:13" pos:end="1955:33">target_to_host_sigset</name><argument_list pos:start="1955:34" pos:end="1955:42">(<argument pos:start="1955:35" pos:end="1955:38"><expr pos:start="1955:35" pos:end="1955:38"><operator pos:start="1955:35" pos:end="1955:35">&amp;</operator><name pos:start="1955:36" pos:end="1955:38">set</name></expr></argument>, <argument pos:start="1955:41" pos:end="1955:41"><expr pos:start="1955:41" pos:end="1955:41"><name pos:start="1955:41" pos:end="1955:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1957:13" pos:end="1957:36"><expr pos:start="1957:13" pos:end="1957:35"><call pos:start="1957:13" pos:end="1957:35"><name pos:start="1957:13" pos:end="1957:23">unlock_user</name><argument_list pos:start="1957:24" pos:end="1957:35">(<argument pos:start="1957:25" pos:end="1957:25"><expr pos:start="1957:25" pos:end="1957:25"><name pos:start="1957:25" pos:end="1957:25">p</name></expr></argument>, <argument pos:start="1957:28" pos:end="1957:31"><expr pos:start="1957:28" pos:end="1957:31"><name pos:start="1957:28" pos:end="1957:31">arg1</name></expr></argument>, <argument pos:start="1957:34" pos:end="1957:34"><expr pos:start="1957:34" pos:end="1957:34"><literal type="number" pos:start="1957:34" pos:end="1957:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1959:13" pos:end="1969:13"><if pos:start="1959:13" pos:end="1965:13">if <condition pos:start="1959:16" pos:end="1959:21">(<expr pos:start="1959:17" pos:end="1959:20"><name pos:start="1959:17" pos:end="1959:20">arg3</name></expr>)</condition> <block pos:start="1959:23" pos:end="1965:13">{<block_content pos:start="1961:17" pos:end="1963:52">

                <expr_stmt pos:start="1961:17" pos:end="1961:28"><expr pos:start="1961:17" pos:end="1961:27"><name pos:start="1961:17" pos:end="1961:20">puts</name> <operator pos:start="1961:22" pos:end="1961:22">=</operator> <operator pos:start="1961:24" pos:end="1961:24">&amp;</operator><name pos:start="1961:25" pos:end="1961:27">uts</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1963:17" pos:end="1963:52"><expr pos:start="1963:17" pos:end="1963:51"><call pos:start="1963:17" pos:end="1963:51"><name pos:start="1963:17" pos:end="1963:39">target_to_host_timespec</name><argument_list pos:start="1963:40" pos:end="1963:51">(<argument pos:start="1963:41" pos:end="1963:44"><expr pos:start="1963:41" pos:end="1963:44"><name pos:start="1963:41" pos:end="1963:44">puts</name></expr></argument>, <argument pos:start="1963:47" pos:end="1963:50"><expr pos:start="1963:47" pos:end="1963:50"><name pos:start="1963:47" pos:end="1963:50">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1965:15" pos:end="1969:13">else <block pos:start="1965:20" pos:end="1969:13">{<block_content pos:start="1967:17" pos:end="1967:28">

                <expr_stmt pos:start="1967:17" pos:end="1967:28"><expr pos:start="1967:17" pos:end="1967:27"><name pos:start="1967:17" pos:end="1967:20">puts</name> <operator pos:start="1967:22" pos:end="1967:22">=</operator> <name pos:start="1967:24" pos:end="1967:27">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1971:13" pos:end="1971:62"><expr pos:start="1971:13" pos:end="1971:61"><name pos:start="1971:13" pos:end="1971:15">ret</name> <operator pos:start="1971:17" pos:end="1971:17">=</operator> <call pos:start="1971:19" pos:end="1971:61"><name pos:start="1971:19" pos:end="1971:27">get_errno</name><argument_list pos:start="1971:28" pos:end="1971:61">(<argument pos:start="1971:29" pos:end="1971:60"><expr pos:start="1971:29" pos:end="1971:60"><call pos:start="1971:29" pos:end="1971:60"><name pos:start="1971:29" pos:end="1971:40">sigtimedwait</name><argument_list pos:start="1971:41" pos:end="1971:60">(<argument pos:start="1971:42" pos:end="1971:45"><expr pos:start="1971:42" pos:end="1971:45"><operator pos:start="1971:42" pos:end="1971:42">&amp;</operator><name pos:start="1971:43" pos:end="1971:45">set</name></expr></argument>, <argument pos:start="1971:48" pos:end="1971:53"><expr pos:start="1971:48" pos:end="1971:53"><operator pos:start="1971:48" pos:end="1971:48">&amp;</operator><name pos:start="1971:49" pos:end="1971:53">uinfo</name></expr></argument>, <argument pos:start="1971:56" pos:end="1971:59"><expr pos:start="1971:56" pos:end="1971:59"><name pos:start="1971:56" pos:end="1971:59">puts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1973:13" pos:end="1983:13"><if pos:start="1973:13" pos:end="1983:13">if <condition pos:start="1973:16" pos:end="1973:39">(<expr pos:start="1973:17" pos:end="1973:38"><operator pos:start="1973:17" pos:end="1973:17">!</operator><call pos:start="1973:18" pos:end="1973:30"><name pos:start="1973:18" pos:end="1973:25">is_error</name><argument_list pos:start="1973:26" pos:end="1973:30">(<argument pos:start="1973:27" pos:end="1973:29"><expr pos:start="1973:27" pos:end="1973:29"><name pos:start="1973:27" pos:end="1973:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1973:32" pos:end="1973:33">&amp;&amp;</operator> <name pos:start="1973:35" pos:end="1973:38">arg2</name></expr>)</condition> <block pos:start="1973:41" pos:end="1983:13">{<block_content pos:start="1975:17" pos:end="1981:63">

                <if_stmt pos:start="1975:17" pos:end="1977:32"><if pos:start="1975:17" pos:end="1977:32">if <condition pos:start="1975:20" pos:end="1975:86">(<expr pos:start="1975:21" pos:end="1975:85"><operator pos:start="1975:21" pos:end="1975:21">!</operator><operator pos:start="1975:22" pos:end="1975:22">(</operator><name pos:start="1975:23" pos:end="1975:23">p</name> <operator pos:start="1975:25" pos:end="1975:25">=</operator> <call pos:start="1975:27" pos:end="1975:84"><name pos:start="1975:27" pos:end="1975:35">lock_user</name><argument_list pos:start="1975:36" pos:end="1975:84">(<argument pos:start="1975:37" pos:end="1975:48"><expr pos:start="1975:37" pos:end="1975:48"><name pos:start="1975:37" pos:end="1975:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1975:51" pos:end="1975:54"><expr pos:start="1975:51" pos:end="1975:54"><name pos:start="1975:51" pos:end="1975:54">arg2</name></expr></argument>, <argument pos:start="1975:57" pos:end="1975:80"><expr pos:start="1975:57" pos:end="1975:80"><sizeof pos:start="1975:57" pos:end="1975:80">sizeof<argument_list pos:start="1975:63" pos:end="1975:80">(<argument pos:start="1975:64" pos:end="1975:79"><expr pos:start="1975:64" pos:end="1975:79"><name pos:start="1975:64" pos:end="1975:79">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1975:83" pos:end="1975:83"><expr pos:start="1975:83" pos:end="1975:83"><literal type="number" pos:start="1975:83" pos:end="1975:83">0</literal></expr></argument>)</argument_list></call><operator pos:start="1975:85" pos:end="1975:85">)</operator></expr>)</condition><block type="pseudo" pos:start="1977:21" pos:end="1977:32"><block_content pos:start="1977:21" pos:end="1977:32">

                    <goto pos:start="1977:21" pos:end="1977:32">goto <name pos:start="1977:26" pos:end="1977:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1979:17" pos:end="1979:50"><expr pos:start="1979:17" pos:end="1979:49"><call pos:start="1979:17" pos:end="1979:49"><name pos:start="1979:17" pos:end="1979:38">host_to_target_siginfo</name><argument_list pos:start="1979:39" pos:end="1979:49">(<argument pos:start="1979:40" pos:end="1979:40"><expr pos:start="1979:40" pos:end="1979:40"><name pos:start="1979:40" pos:end="1979:40">p</name></expr></argument>, <argument pos:start="1979:43" pos:end="1979:48"><expr pos:start="1979:43" pos:end="1979:48"><operator pos:start="1979:43" pos:end="1979:43">&amp;</operator><name pos:start="1979:44" pos:end="1979:48">uinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1981:17" pos:end="1981:63"><expr pos:start="1981:17" pos:end="1981:62"><call pos:start="1981:17" pos:end="1981:62"><name pos:start="1981:17" pos:end="1981:27">unlock_user</name><argument_list pos:start="1981:28" pos:end="1981:62">(<argument pos:start="1981:29" pos:end="1981:29"><expr pos:start="1981:29" pos:end="1981:29"><name pos:start="1981:29" pos:end="1981:29">p</name></expr></argument>, <argument pos:start="1981:32" pos:end="1981:35"><expr pos:start="1981:32" pos:end="1981:35"><name pos:start="1981:32" pos:end="1981:35">arg2</name></expr></argument>, <argument pos:start="1981:38" pos:end="1981:61"><expr pos:start="1981:38" pos:end="1981:61"><sizeof pos:start="1981:38" pos:end="1981:61">sizeof<argument_list pos:start="1981:44" pos:end="1981:61">(<argument pos:start="1981:45" pos:end="1981:60"><expr pos:start="1981:45" pos:end="1981:60"><name pos:start="1981:45" pos:end="1981:60">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1987:9" pos:end="1987:14">break;</break>

    <case pos:start="1989:5" pos:end="1989:35">case <expr pos:start="1989:10" pos:end="1989:34"><name pos:start="1989:10" pos:end="1989:34">TARGET_NR_rt_sigqueueinfo</name></expr>:</case>

        <block pos:start="1991:9" pos:end="2005:9">{<block_content pos:start="1993:13" pos:end="2003:69">

            <decl_stmt pos:start="1993:13" pos:end="1993:28"><decl pos:start="1993:13" pos:end="1993:27"><type pos:start="1993:13" pos:end="1993:21"><name pos:start="1993:13" pos:end="1993:21">siginfo_t</name></type> <name pos:start="1993:23" pos:end="1993:27">uinfo</name></decl>;</decl_stmt>

            <if_stmt pos:start="1995:13" pos:end="1997:28"><if pos:start="1995:13" pos:end="1997:28">if <condition pos:start="1995:16" pos:end="1995:80">(<expr pos:start="1995:17" pos:end="1995:79"><operator pos:start="1995:17" pos:end="1995:17">!</operator><operator pos:start="1995:18" pos:end="1995:18">(</operator><name pos:start="1995:19" pos:end="1995:19">p</name> <operator pos:start="1995:21" pos:end="1995:21">=</operator> <call pos:start="1995:23" pos:end="1995:78"><name pos:start="1995:23" pos:end="1995:31">lock_user</name><argument_list pos:start="1995:32" pos:end="1995:78">(<argument pos:start="1995:33" pos:end="1995:43"><expr pos:start="1995:33" pos:end="1995:43"><name pos:start="1995:33" pos:end="1995:43">VERIFY_READ</name></expr></argument>, <argument pos:start="1995:46" pos:end="1995:49"><expr pos:start="1995:46" pos:end="1995:49"><name pos:start="1995:46" pos:end="1995:49">arg3</name></expr></argument>, <argument pos:start="1995:52" pos:end="1995:74"><expr pos:start="1995:52" pos:end="1995:74"><sizeof pos:start="1995:52" pos:end="1995:74">sizeof<argument_list pos:start="1995:58" pos:end="1995:74">(<argument pos:start="1995:59" pos:end="1995:73"><expr pos:start="1995:59" pos:end="1995:73"><name pos:start="1995:59" pos:end="1995:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1995:77" pos:end="1995:77"><expr pos:start="1995:77" pos:end="1995:77"><literal type="number" pos:start="1995:77" pos:end="1995:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="1995:79" pos:end="1995:79">)</operator></expr>)</condition><block type="pseudo" pos:start="1997:17" pos:end="1997:28"><block_content pos:start="1997:17" pos:end="1997:28">

                <goto pos:start="1997:17" pos:end="1997:28">goto <name pos:start="1997:22" pos:end="1997:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1999:13" pos:end="1999:46"><expr pos:start="1999:13" pos:end="1999:45"><call pos:start="1999:13" pos:end="1999:45"><name pos:start="1999:13" pos:end="1999:34">target_to_host_siginfo</name><argument_list pos:start="1999:35" pos:end="1999:45">(<argument pos:start="1999:36" pos:end="1999:41"><expr pos:start="1999:36" pos:end="1999:41"><operator pos:start="1999:36" pos:end="1999:36">&amp;</operator><name pos:start="1999:37" pos:end="1999:41">uinfo</name></expr></argument>, <argument pos:start="1999:44" pos:end="1999:44"><expr pos:start="1999:44" pos:end="1999:44"><name pos:start="1999:44" pos:end="1999:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2001:13" pos:end="2001:36"><expr pos:start="2001:13" pos:end="2001:35"><call pos:start="2001:13" pos:end="2001:35"><name pos:start="2001:13" pos:end="2001:23">unlock_user</name><argument_list pos:start="2001:24" pos:end="2001:35">(<argument pos:start="2001:25" pos:end="2001:25"><expr pos:start="2001:25" pos:end="2001:25"><name pos:start="2001:25" pos:end="2001:25">p</name></expr></argument>, <argument pos:start="2001:28" pos:end="2001:31"><expr pos:start="2001:28" pos:end="2001:31"><name pos:start="2001:28" pos:end="2001:31">arg1</name></expr></argument>, <argument pos:start="2001:34" pos:end="2001:34"><expr pos:start="2001:34" pos:end="2001:34"><literal type="number" pos:start="2001:34" pos:end="2001:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2003:13" pos:end="2003:69"><expr pos:start="2003:13" pos:end="2003:68"><name pos:start="2003:13" pos:end="2003:15">ret</name> <operator pos:start="2003:17" pos:end="2003:17">=</operator> <call pos:start="2003:19" pos:end="2003:68"><name pos:start="2003:19" pos:end="2003:27">get_errno</name><argument_list pos:start="2003:28" pos:end="2003:68">(<argument pos:start="2003:29" pos:end="2003:67"><expr pos:start="2003:29" pos:end="2003:67"><call pos:start="2003:29" pos:end="2003:67"><name pos:start="2003:29" pos:end="2003:47">sys_rt_sigqueueinfo</name><argument_list pos:start="2003:48" pos:end="2003:67">(<argument pos:start="2003:49" pos:end="2003:52"><expr pos:start="2003:49" pos:end="2003:52"><name pos:start="2003:49" pos:end="2003:52">arg1</name></expr></argument>, <argument pos:start="2003:55" pos:end="2003:58"><expr pos:start="2003:55" pos:end="2003:58"><name pos:start="2003:55" pos:end="2003:58">arg2</name></expr></argument>, <argument pos:start="2003:61" pos:end="2003:66"><expr pos:start="2003:61" pos:end="2003:66"><operator pos:start="2003:61" pos:end="2003:61">&amp;</operator><name pos:start="2003:62" pos:end="2003:66">uinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2007:9" pos:end="2010:0">break;</break>

<cpp:ifdef pos:start="2009:1" pos:end="2009:26">#<cpp:directive pos:start="2009:2" pos:end="2009:6">ifdef</cpp:directive> <name pos:start="2009:8" pos:end="2009:26">TARGET_NR_sigreturn</name></cpp:ifdef>

    <case pos:start="2011:5" pos:end="2011:29">case <expr pos:start="2011:10" pos:end="2011:28"><name pos:start="2011:10" pos:end="2011:28">TARGET_NR_sigreturn</name></expr>:</case>

        <comment type="block" pos:start="2013:9" pos:end="2013:63">/* NOTE: ret is eax, so not transcoding must be done */</comment>

        <expr_stmt pos:start="2015:9" pos:end="2015:36"><expr pos:start="2015:9" pos:end="2015:35"><name pos:start="2015:9" pos:end="2015:11">ret</name> <operator pos:start="2015:13" pos:end="2015:13">=</operator> <call pos:start="2015:15" pos:end="2015:35"><name pos:start="2015:15" pos:end="2015:26">do_sigreturn</name><argument_list pos:start="2015:27" pos:end="2015:35">(<argument pos:start="2015:28" pos:end="2015:34"><expr pos:start="2015:28" pos:end="2015:34"><name pos:start="2015:28" pos:end="2015:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2017:9" pos:end="2020:0">break;</break>

<cpp:endif pos:start="2019:1" pos:end="2019:6">#<cpp:directive pos:start="2019:2" pos:end="2019:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2021:5" pos:end="2021:32">case <expr pos:start="2021:10" pos:end="2021:31"><name pos:start="2021:10" pos:end="2021:31">TARGET_NR_rt_sigreturn</name></expr>:</case>

        <comment type="block" pos:start="2023:9" pos:end="2023:63">/* NOTE: ret is eax, so not transcoding must be done */</comment>

        <expr_stmt pos:start="2025:9" pos:end="2025:39"><expr pos:start="2025:9" pos:end="2025:38"><name pos:start="2025:9" pos:end="2025:11">ret</name> <operator pos:start="2025:13" pos:end="2025:13">=</operator> <call pos:start="2025:15" pos:end="2025:38"><name pos:start="2025:15" pos:end="2025:29">do_rt_sigreturn</name><argument_list pos:start="2025:30" pos:end="2025:38">(<argument pos:start="2025:31" pos:end="2025:37"><expr pos:start="2025:31" pos:end="2025:37"><name pos:start="2025:31" pos:end="2025:37">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2027:9" pos:end="2027:14">break;</break>

    <case pos:start="2029:5" pos:end="2029:31">case <expr pos:start="2029:10" pos:end="2029:30"><name pos:start="2029:10" pos:end="2029:30">TARGET_NR_sethostname</name></expr>:</case>

        <if_stmt pos:start="2031:9" pos:end="2033:24"><if pos:start="2031:9" pos:end="2033:24">if <condition pos:start="2031:12" pos:end="2031:42">(<expr pos:start="2031:13" pos:end="2031:41"><operator pos:start="2031:13" pos:end="2031:13">!</operator><operator pos:start="2031:14" pos:end="2031:14">(</operator><name pos:start="2031:15" pos:end="2031:15">p</name> <operator pos:start="2031:17" pos:end="2031:17">=</operator> <call pos:start="2031:19" pos:end="2031:40"><name pos:start="2031:19" pos:end="2031:34">lock_user_string</name><argument_list pos:start="2031:35" pos:end="2031:40">(<argument pos:start="2031:36" pos:end="2031:39"><expr pos:start="2031:36" pos:end="2031:39"><name pos:start="2031:36" pos:end="2031:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2031:41" pos:end="2031:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2033:13" pos:end="2033:24"><block_content pos:start="2033:13" pos:end="2033:24">

            <goto pos:start="2033:13" pos:end="2033:24">goto <name pos:start="2033:18" pos:end="2033:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2035:9" pos:end="2035:46"><expr pos:start="2035:9" pos:end="2035:45"><name pos:start="2035:9" pos:end="2035:11">ret</name> <operator pos:start="2035:13" pos:end="2035:13">=</operator> <call pos:start="2035:15" pos:end="2035:45"><name pos:start="2035:15" pos:end="2035:23">get_errno</name><argument_list pos:start="2035:24" pos:end="2035:45">(<argument pos:start="2035:25" pos:end="2035:44"><expr pos:start="2035:25" pos:end="2035:44"><call pos:start="2035:25" pos:end="2035:44"><name pos:start="2035:25" pos:end="2035:35">sethostname</name><argument_list pos:start="2035:36" pos:end="2035:44">(<argument pos:start="2035:37" pos:end="2035:37"><expr pos:start="2035:37" pos:end="2035:37"><name pos:start="2035:37" pos:end="2035:37">p</name></expr></argument>, <argument pos:start="2035:40" pos:end="2035:43"><expr pos:start="2035:40" pos:end="2035:43"><name pos:start="2035:40" pos:end="2035:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2037:9" pos:end="2037:32"><expr pos:start="2037:9" pos:end="2037:31"><call pos:start="2037:9" pos:end="2037:31"><name pos:start="2037:9" pos:end="2037:19">unlock_user</name><argument_list pos:start="2037:20" pos:end="2037:31">(<argument pos:start="2037:21" pos:end="2037:21"><expr pos:start="2037:21" pos:end="2037:21"><name pos:start="2037:21" pos:end="2037:21">p</name></expr></argument>, <argument pos:start="2037:24" pos:end="2037:27"><expr pos:start="2037:24" pos:end="2037:27"><name pos:start="2037:24" pos:end="2037:27">arg1</name></expr></argument>, <argument pos:start="2037:30" pos:end="2037:30"><expr pos:start="2037:30" pos:end="2037:30"><literal type="number" pos:start="2037:30" pos:end="2037:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2039:9" pos:end="2039:14">break;</break>

    <case pos:start="2041:5" pos:end="2041:29">case <expr pos:start="2041:10" pos:end="2041:28"><name pos:start="2041:10" pos:end="2041:28">TARGET_NR_setrlimit</name></expr>:</case>

        <block pos:start="2043:9" pos:end="2063:9">{<block_content pos:start="2045:13" pos:end="2061:56">

            <decl_stmt pos:start="2045:13" pos:end="2045:57"><decl pos:start="2045:13" pos:end="2045:56"><type pos:start="2045:13" pos:end="2045:15"><name pos:start="2045:13" pos:end="2045:15">int</name></type> <name pos:start="2045:17" pos:end="2045:24">resource</name> <init pos:start="2045:26" pos:end="2045:56">= <expr pos:start="2045:28" pos:end="2045:56"><call pos:start="2045:28" pos:end="2045:56"><name pos:start="2045:28" pos:end="2045:50">target_to_host_resource</name><argument_list pos:start="2045:51" pos:end="2045:56">(<argument pos:start="2045:52" pos:end="2045:55"><expr pos:start="2045:52" pos:end="2045:55"><name pos:start="2045:52" pos:end="2045:55">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="2047:13" pos:end="2047:46"><decl pos:start="2047:13" pos:end="2047:45"><type pos:start="2047:13" pos:end="2047:34"><name pos:start="2047:13" pos:end="2047:32"><name pos:start="2047:13" pos:end="2047:18">struct</name> <name pos:start="2047:20" pos:end="2047:32">target_rlimit</name></name> <modifier pos:start="2047:34" pos:end="2047:34">*</modifier></type><name pos:start="2047:35" pos:end="2047:45">target_rlim</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2049:13" pos:end="2049:31"><decl pos:start="2049:13" pos:end="2049:30"><type pos:start="2049:13" pos:end="2049:25"><name pos:start="2049:13" pos:end="2049:25"><name pos:start="2049:13" pos:end="2049:18">struct</name> <name pos:start="2049:20" pos:end="2049:25">rlimit</name></name></type> <name pos:start="2049:27" pos:end="2049:30">rlim</name></decl>;</decl_stmt>

            <if_stmt pos:start="2051:13" pos:end="2053:28"><if pos:start="2051:13" pos:end="2053:28">if <condition pos:start="2051:16" pos:end="2051:69">(<expr pos:start="2051:17" pos:end="2051:68"><operator pos:start="2051:17" pos:end="2051:17">!</operator><call pos:start="2051:18" pos:end="2051:68"><name pos:start="2051:18" pos:end="2051:33">lock_user_struct</name><argument_list pos:start="2051:34" pos:end="2051:68">(<argument pos:start="2051:35" pos:end="2051:45"><expr pos:start="2051:35" pos:end="2051:45"><name pos:start="2051:35" pos:end="2051:45">VERIFY_READ</name></expr></argument>, <argument pos:start="2051:48" pos:end="2051:58"><expr pos:start="2051:48" pos:end="2051:58"><name pos:start="2051:48" pos:end="2051:58">target_rlim</name></expr></argument>, <argument pos:start="2051:61" pos:end="2051:64"><expr pos:start="2051:61" pos:end="2051:64"><name pos:start="2051:61" pos:end="2051:64">arg2</name></expr></argument>, <argument pos:start="2051:67" pos:end="2051:67"><expr pos:start="2051:67" pos:end="2051:67"><literal type="number" pos:start="2051:67" pos:end="2051:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2053:17" pos:end="2053:28"><block_content pos:start="2053:17" pos:end="2053:28">

                <goto pos:start="2053:17" pos:end="2053:28">goto <name pos:start="2053:22" pos:end="2053:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2055:13" pos:end="2055:71"><expr pos:start="2055:13" pos:end="2055:70"><name pos:start="2055:13" pos:end="2055:25"><name pos:start="2055:13" pos:end="2055:16">rlim</name><operator pos:start="2055:17" pos:end="2055:17">.</operator><name pos:start="2055:18" pos:end="2055:25">rlim_cur</name></name> <operator pos:start="2055:27" pos:end="2055:27">=</operator> <call pos:start="2055:29" pos:end="2055:70"><name pos:start="2055:29" pos:end="2055:47">target_to_host_rlim</name><argument_list pos:start="2055:48" pos:end="2055:70">(<argument pos:start="2055:49" pos:end="2055:69"><expr pos:start="2055:49" pos:end="2055:69"><name pos:start="2055:49" pos:end="2055:69"><name pos:start="2055:49" pos:end="2055:59">target_rlim</name><operator pos:start="2055:60" pos:end="2055:61">-&gt;</operator><name pos:start="2055:62" pos:end="2055:69">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2057:13" pos:end="2057:71"><expr pos:start="2057:13" pos:end="2057:70"><name pos:start="2057:13" pos:end="2057:25"><name pos:start="2057:13" pos:end="2057:16">rlim</name><operator pos:start="2057:17" pos:end="2057:17">.</operator><name pos:start="2057:18" pos:end="2057:25">rlim_max</name></name> <operator pos:start="2057:27" pos:end="2057:27">=</operator> <call pos:start="2057:29" pos:end="2057:70"><name pos:start="2057:29" pos:end="2057:47">target_to_host_rlim</name><argument_list pos:start="2057:48" pos:end="2057:70">(<argument pos:start="2057:49" pos:end="2057:69"><expr pos:start="2057:49" pos:end="2057:69"><name pos:start="2057:49" pos:end="2057:69"><name pos:start="2057:49" pos:end="2057:59">target_rlim</name><operator pos:start="2057:60" pos:end="2057:61">-&gt;</operator><name pos:start="2057:62" pos:end="2057:69">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2059:13" pos:end="2059:53"><expr pos:start="2059:13" pos:end="2059:52"><call pos:start="2059:13" pos:end="2059:52"><name pos:start="2059:13" pos:end="2059:30">unlock_user_struct</name><argument_list pos:start="2059:31" pos:end="2059:52">(<argument pos:start="2059:32" pos:end="2059:42"><expr pos:start="2059:32" pos:end="2059:42"><name pos:start="2059:32" pos:end="2059:42">target_rlim</name></expr></argument>, <argument pos:start="2059:45" pos:end="2059:48"><expr pos:start="2059:45" pos:end="2059:48"><name pos:start="2059:45" pos:end="2059:48">arg2</name></expr></argument>, <argument pos:start="2059:51" pos:end="2059:51"><expr pos:start="2059:51" pos:end="2059:51"><literal type="number" pos:start="2059:51" pos:end="2059:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2061:13" pos:end="2061:56"><expr pos:start="2061:13" pos:end="2061:55"><name pos:start="2061:13" pos:end="2061:15">ret</name> <operator pos:start="2061:17" pos:end="2061:17">=</operator> <call pos:start="2061:19" pos:end="2061:55"><name pos:start="2061:19" pos:end="2061:27">get_errno</name><argument_list pos:start="2061:28" pos:end="2061:55">(<argument pos:start="2061:29" pos:end="2061:54"><expr pos:start="2061:29" pos:end="2061:54"><call pos:start="2061:29" pos:end="2061:54"><name pos:start="2061:29" pos:end="2061:37">setrlimit</name><argument_list pos:start="2061:38" pos:end="2061:54">(<argument pos:start="2061:39" pos:end="2061:46"><expr pos:start="2061:39" pos:end="2061:46"><name pos:start="2061:39" pos:end="2061:46">resource</name></expr></argument>, <argument pos:start="2061:49" pos:end="2061:53"><expr pos:start="2061:49" pos:end="2061:53"><operator pos:start="2061:49" pos:end="2061:49">&amp;</operator><name pos:start="2061:50" pos:end="2061:53">rlim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2065:9" pos:end="2065:14">break;</break>

    <case pos:start="2067:5" pos:end="2067:29">case <expr pos:start="2067:10" pos:end="2067:28"><name pos:start="2067:10" pos:end="2067:28">TARGET_NR_getrlimit</name></expr>:</case>

        <block pos:start="2069:9" pos:end="2095:9">{<block_content pos:start="2071:13" pos:end="2093:13">

            <decl_stmt pos:start="2071:13" pos:end="2071:57"><decl pos:start="2071:13" pos:end="2071:56"><type pos:start="2071:13" pos:end="2071:15"><name pos:start="2071:13" pos:end="2071:15">int</name></type> <name pos:start="2071:17" pos:end="2071:24">resource</name> <init pos:start="2071:26" pos:end="2071:56">= <expr pos:start="2071:28" pos:end="2071:56"><call pos:start="2071:28" pos:end="2071:56"><name pos:start="2071:28" pos:end="2071:50">target_to_host_resource</name><argument_list pos:start="2071:51" pos:end="2071:56">(<argument pos:start="2071:52" pos:end="2071:55"><expr pos:start="2071:52" pos:end="2071:55"><name pos:start="2071:52" pos:end="2071:55">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="2073:13" pos:end="2073:46"><decl pos:start="2073:13" pos:end="2073:45"><type pos:start="2073:13" pos:end="2073:34"><name pos:start="2073:13" pos:end="2073:32"><name pos:start="2073:13" pos:end="2073:18">struct</name> <name pos:start="2073:20" pos:end="2073:32">target_rlimit</name></name> <modifier pos:start="2073:34" pos:end="2073:34">*</modifier></type><name pos:start="2073:35" pos:end="2073:45">target_rlim</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2075:13" pos:end="2075:31"><decl pos:start="2075:13" pos:end="2075:30"><type pos:start="2075:13" pos:end="2075:25"><name pos:start="2075:13" pos:end="2075:25"><name pos:start="2075:13" pos:end="2075:18">struct</name> <name pos:start="2075:20" pos:end="2075:25">rlimit</name></name></type> <name pos:start="2075:27" pos:end="2075:30">rlim</name></decl>;</decl_stmt>



            <expr_stmt pos:start="2079:13" pos:end="2079:56"><expr pos:start="2079:13" pos:end="2079:55"><name pos:start="2079:13" pos:end="2079:15">ret</name> <operator pos:start="2079:17" pos:end="2079:17">=</operator> <call pos:start="2079:19" pos:end="2079:55"><name pos:start="2079:19" pos:end="2079:27">get_errno</name><argument_list pos:start="2079:28" pos:end="2079:55">(<argument pos:start="2079:29" pos:end="2079:54"><expr pos:start="2079:29" pos:end="2079:54"><call pos:start="2079:29" pos:end="2079:54"><name pos:start="2079:29" pos:end="2079:37">getrlimit</name><argument_list pos:start="2079:38" pos:end="2079:54">(<argument pos:start="2079:39" pos:end="2079:46"><expr pos:start="2079:39" pos:end="2079:46"><name pos:start="2079:39" pos:end="2079:46">resource</name></expr></argument>, <argument pos:start="2079:49" pos:end="2079:53"><expr pos:start="2079:49" pos:end="2079:53"><operator pos:start="2079:49" pos:end="2079:49">&amp;</operator><name pos:start="2079:50" pos:end="2079:53">rlim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2081:13" pos:end="2093:13"><if pos:start="2081:13" pos:end="2093:13">if <condition pos:start="2081:16" pos:end="2081:31">(<expr pos:start="2081:17" pos:end="2081:30"><operator pos:start="2081:17" pos:end="2081:17">!</operator><call pos:start="2081:18" pos:end="2081:30"><name pos:start="2081:18" pos:end="2081:25">is_error</name><argument_list pos:start="2081:26" pos:end="2081:30">(<argument pos:start="2081:27" pos:end="2081:29"><expr pos:start="2081:27" pos:end="2081:29"><name pos:start="2081:27" pos:end="2081:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2081:33" pos:end="2093:13">{<block_content pos:start="2083:17" pos:end="2091:57">

                <if_stmt pos:start="2083:17" pos:end="2085:32"><if pos:start="2083:17" pos:end="2085:32">if <condition pos:start="2083:20" pos:end="2083:74">(<expr pos:start="2083:21" pos:end="2083:73"><operator pos:start="2083:21" pos:end="2083:21">!</operator><call pos:start="2083:22" pos:end="2083:73"><name pos:start="2083:22" pos:end="2083:37">lock_user_struct</name><argument_list pos:start="2083:38" pos:end="2083:73">(<argument pos:start="2083:39" pos:end="2083:50"><expr pos:start="2083:39" pos:end="2083:50"><name pos:start="2083:39" pos:end="2083:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2083:53" pos:end="2083:63"><expr pos:start="2083:53" pos:end="2083:63"><name pos:start="2083:53" pos:end="2083:63">target_rlim</name></expr></argument>, <argument pos:start="2083:66" pos:end="2083:69"><expr pos:start="2083:66" pos:end="2083:69"><name pos:start="2083:66" pos:end="2083:69">arg2</name></expr></argument>, <argument pos:start="2083:72" pos:end="2083:72"><expr pos:start="2083:72" pos:end="2083:72"><literal type="number" pos:start="2083:72" pos:end="2083:72">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2085:21" pos:end="2085:32"><block_content pos:start="2085:21" pos:end="2085:32">

                    <goto pos:start="2085:21" pos:end="2085:32">goto <name pos:start="2085:26" pos:end="2085:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2087:17" pos:end="2087:75"><expr pos:start="2087:17" pos:end="2087:74"><name pos:start="2087:17" pos:end="2087:37"><name pos:start="2087:17" pos:end="2087:27">target_rlim</name><operator pos:start="2087:28" pos:end="2087:29">-&gt;</operator><name pos:start="2087:30" pos:end="2087:37">rlim_cur</name></name> <operator pos:start="2087:39" pos:end="2087:39">=</operator> <call pos:start="2087:41" pos:end="2087:74"><name pos:start="2087:41" pos:end="2087:59">host_to_target_rlim</name><argument_list pos:start="2087:60" pos:end="2087:74">(<argument pos:start="2087:61" pos:end="2087:73"><expr pos:start="2087:61" pos:end="2087:73"><name pos:start="2087:61" pos:end="2087:73"><name pos:start="2087:61" pos:end="2087:64">rlim</name><operator pos:start="2087:65" pos:end="2087:65">.</operator><name pos:start="2087:66" pos:end="2087:73">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2089:17" pos:end="2089:75"><expr pos:start="2089:17" pos:end="2089:74"><name pos:start="2089:17" pos:end="2089:37"><name pos:start="2089:17" pos:end="2089:27">target_rlim</name><operator pos:start="2089:28" pos:end="2089:29">-&gt;</operator><name pos:start="2089:30" pos:end="2089:37">rlim_max</name></name> <operator pos:start="2089:39" pos:end="2089:39">=</operator> <call pos:start="2089:41" pos:end="2089:74"><name pos:start="2089:41" pos:end="2089:59">host_to_target_rlim</name><argument_list pos:start="2089:60" pos:end="2089:74">(<argument pos:start="2089:61" pos:end="2089:73"><expr pos:start="2089:61" pos:end="2089:73"><name pos:start="2089:61" pos:end="2089:73"><name pos:start="2089:61" pos:end="2089:64">rlim</name><operator pos:start="2089:65" pos:end="2089:65">.</operator><name pos:start="2089:66" pos:end="2089:73">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2091:17" pos:end="2091:57"><expr pos:start="2091:17" pos:end="2091:56"><call pos:start="2091:17" pos:end="2091:56"><name pos:start="2091:17" pos:end="2091:34">unlock_user_struct</name><argument_list pos:start="2091:35" pos:end="2091:56">(<argument pos:start="2091:36" pos:end="2091:46"><expr pos:start="2091:36" pos:end="2091:46"><name pos:start="2091:36" pos:end="2091:46">target_rlim</name></expr></argument>, <argument pos:start="2091:49" pos:end="2091:52"><expr pos:start="2091:49" pos:end="2091:52"><name pos:start="2091:49" pos:end="2091:52">arg2</name></expr></argument>, <argument pos:start="2091:55" pos:end="2091:55"><expr pos:start="2091:55" pos:end="2091:55"><literal type="number" pos:start="2091:55" pos:end="2091:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="2097:9" pos:end="2097:14">break;</break>

    <case pos:start="2099:5" pos:end="2099:29">case <expr pos:start="2099:10" pos:end="2099:28"><name pos:start="2099:10" pos:end="2099:28">TARGET_NR_getrusage</name></expr>:</case>

        <block pos:start="2101:9" pos:end="2113:9">{<block_content pos:start="2103:13" pos:end="2111:13">

            <decl_stmt pos:start="2103:13" pos:end="2103:33"><decl pos:start="2103:13" pos:end="2103:32"><type pos:start="2103:13" pos:end="2103:25"><name pos:start="2103:13" pos:end="2103:25"><name pos:start="2103:13" pos:end="2103:18">struct</name> <name pos:start="2103:20" pos:end="2103:25">rusage</name></name></type> <name pos:start="2103:27" pos:end="2103:32">rusage</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2105:13" pos:end="2105:54"><expr pos:start="2105:13" pos:end="2105:53"><name pos:start="2105:13" pos:end="2105:15">ret</name> <operator pos:start="2105:17" pos:end="2105:17">=</operator> <call pos:start="2105:19" pos:end="2105:53"><name pos:start="2105:19" pos:end="2105:27">get_errno</name><argument_list pos:start="2105:28" pos:end="2105:53">(<argument pos:start="2105:29" pos:end="2105:52"><expr pos:start="2105:29" pos:end="2105:52"><call pos:start="2105:29" pos:end="2105:52"><name pos:start="2105:29" pos:end="2105:37">getrusage</name><argument_list pos:start="2105:38" pos:end="2105:52">(<argument pos:start="2105:39" pos:end="2105:42"><expr pos:start="2105:39" pos:end="2105:42"><name pos:start="2105:39" pos:end="2105:42">arg1</name></expr></argument>, <argument pos:start="2105:45" pos:end="2105:51"><expr pos:start="2105:45" pos:end="2105:51"><operator pos:start="2105:45" pos:end="2105:45">&amp;</operator><name pos:start="2105:46" pos:end="2105:51">rusage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2107:13" pos:end="2111:13"><if pos:start="2107:13" pos:end="2111:13">if <condition pos:start="2107:16" pos:end="2107:31">(<expr pos:start="2107:17" pos:end="2107:30"><operator pos:start="2107:17" pos:end="2107:17">!</operator><call pos:start="2107:18" pos:end="2107:30"><name pos:start="2107:18" pos:end="2107:25">is_error</name><argument_list pos:start="2107:26" pos:end="2107:30">(<argument pos:start="2107:27" pos:end="2107:29"><expr pos:start="2107:27" pos:end="2107:29"><name pos:start="2107:27" pos:end="2107:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2107:33" pos:end="2111:13">{<block_content pos:start="2109:17" pos:end="2109:53">

                <expr_stmt pos:start="2109:17" pos:end="2109:53"><expr pos:start="2109:17" pos:end="2109:52"><call pos:start="2109:17" pos:end="2109:52"><name pos:start="2109:17" pos:end="2109:37">host_to_target_rusage</name><argument_list pos:start="2109:38" pos:end="2109:52">(<argument pos:start="2109:39" pos:end="2109:42"><expr pos:start="2109:39" pos:end="2109:42"><name pos:start="2109:39" pos:end="2109:42">arg2</name></expr></argument>, <argument pos:start="2109:45" pos:end="2109:51"><expr pos:start="2109:45" pos:end="2109:51"><operator pos:start="2109:45" pos:end="2109:45">&amp;</operator><name pos:start="2109:46" pos:end="2109:51">rusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="2115:9" pos:end="2115:14">break;</break>

    <case pos:start="2117:5" pos:end="2117:32">case <expr pos:start="2117:10" pos:end="2117:31"><name pos:start="2117:10" pos:end="2117:31">TARGET_NR_gettimeofday</name></expr>:</case>

        <block pos:start="2119:9" pos:end="2133:9">{<block_content pos:start="2121:13" pos:end="2131:13">

            <decl_stmt pos:start="2121:13" pos:end="2121:30"><decl pos:start="2121:13" pos:end="2121:29"><type pos:start="2121:13" pos:end="2121:26"><name pos:start="2121:13" pos:end="2121:26"><name pos:start="2121:13" pos:end="2121:18">struct</name> <name pos:start="2121:20" pos:end="2121:26">timeval</name></name></type> <name pos:start="2121:28" pos:end="2121:29">tv</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2123:13" pos:end="2123:53"><expr pos:start="2123:13" pos:end="2123:52"><name pos:start="2123:13" pos:end="2123:15">ret</name> <operator pos:start="2123:17" pos:end="2123:17">=</operator> <call pos:start="2123:19" pos:end="2123:52"><name pos:start="2123:19" pos:end="2123:27">get_errno</name><argument_list pos:start="2123:28" pos:end="2123:52">(<argument pos:start="2123:29" pos:end="2123:51"><expr pos:start="2123:29" pos:end="2123:51"><call pos:start="2123:29" pos:end="2123:51"><name pos:start="2123:29" pos:end="2123:40">gettimeofday</name><argument_list pos:start="2123:41" pos:end="2123:51">(<argument pos:start="2123:42" pos:end="2123:44"><expr pos:start="2123:42" pos:end="2123:44"><operator pos:start="2123:42" pos:end="2123:42">&amp;</operator><name pos:start="2123:43" pos:end="2123:44">tv</name></expr></argument>, <argument pos:start="2123:47" pos:end="2123:50"><expr pos:start="2123:47" pos:end="2123:50"><name pos:start="2123:47" pos:end="2123:50">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2125:13" pos:end="2131:13"><if pos:start="2125:13" pos:end="2131:13">if <condition pos:start="2125:16" pos:end="2125:31">(<expr pos:start="2125:17" pos:end="2125:30"><operator pos:start="2125:17" pos:end="2125:17">!</operator><call pos:start="2125:18" pos:end="2125:30"><name pos:start="2125:18" pos:end="2125:25">is_error</name><argument_list pos:start="2125:26" pos:end="2125:30">(<argument pos:start="2125:27" pos:end="2125:29"><expr pos:start="2125:27" pos:end="2125:29"><name pos:start="2125:27" pos:end="2125:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2125:33" pos:end="2131:13">{<block_content pos:start="2127:17" pos:end="2129:32">

                <if_stmt pos:start="2127:17" pos:end="2129:32"><if pos:start="2127:17" pos:end="2129:32">if <condition pos:start="2127:20" pos:end="2127:52">(<expr pos:start="2127:21" pos:end="2127:51"><call pos:start="2127:21" pos:end="2127:51"><name pos:start="2127:21" pos:end="2127:40">copy_to_user_timeval</name><argument_list pos:start="2127:41" pos:end="2127:51">(<argument pos:start="2127:42" pos:end="2127:45"><expr pos:start="2127:42" pos:end="2127:45"><name pos:start="2127:42" pos:end="2127:45">arg1</name></expr></argument>, <argument pos:start="2127:48" pos:end="2127:50"><expr pos:start="2127:48" pos:end="2127:50"><operator pos:start="2127:48" pos:end="2127:48">&amp;</operator><name pos:start="2127:49" pos:end="2127:50">tv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2129:21" pos:end="2129:32"><block_content pos:start="2129:21" pos:end="2129:32">

                    <goto pos:start="2129:21" pos:end="2129:32">goto <name pos:start="2129:26" pos:end="2129:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="2135:9" pos:end="2135:14">break;</break>

    <case pos:start="2137:5" pos:end="2137:32">case <expr pos:start="2137:10" pos:end="2137:31"><name pos:start="2137:10" pos:end="2137:31">TARGET_NR_settimeofday</name></expr>:</case>

        <block pos:start="2139:9" pos:end="2149:9">{<block_content pos:start="2141:13" pos:end="2147:53">

            <decl_stmt pos:start="2141:13" pos:end="2141:30"><decl pos:start="2141:13" pos:end="2141:29"><type pos:start="2141:13" pos:end="2141:26"><name pos:start="2141:13" pos:end="2141:26"><name pos:start="2141:13" pos:end="2141:18">struct</name> <name pos:start="2141:20" pos:end="2141:26">timeval</name></name></type> <name pos:start="2141:28" pos:end="2141:29">tv</name></decl>;</decl_stmt>

            <if_stmt pos:start="2143:13" pos:end="2145:28"><if pos:start="2143:13" pos:end="2145:28">if <condition pos:start="2143:16" pos:end="2143:50">(<expr pos:start="2143:17" pos:end="2143:49"><call pos:start="2143:17" pos:end="2143:49"><name pos:start="2143:17" pos:end="2143:38">copy_from_user_timeval</name><argument_list pos:start="2143:39" pos:end="2143:49">(<argument pos:start="2143:40" pos:end="2143:42"><expr pos:start="2143:40" pos:end="2143:42"><operator pos:start="2143:40" pos:end="2143:40">&amp;</operator><name pos:start="2143:41" pos:end="2143:42">tv</name></expr></argument>, <argument pos:start="2143:45" pos:end="2143:48"><expr pos:start="2143:45" pos:end="2143:48"><name pos:start="2143:45" pos:end="2143:48">arg1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2145:17" pos:end="2145:28"><block_content pos:start="2145:17" pos:end="2145:28">

                <goto pos:start="2145:17" pos:end="2145:28">goto <name pos:start="2145:22" pos:end="2145:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2147:13" pos:end="2147:53"><expr pos:start="2147:13" pos:end="2147:52"><name pos:start="2147:13" pos:end="2147:15">ret</name> <operator pos:start="2147:17" pos:end="2147:17">=</operator> <call pos:start="2147:19" pos:end="2147:52"><name pos:start="2147:19" pos:end="2147:27">get_errno</name><argument_list pos:start="2147:28" pos:end="2147:52">(<argument pos:start="2147:29" pos:end="2147:51"><expr pos:start="2147:29" pos:end="2147:51"><call pos:start="2147:29" pos:end="2147:51"><name pos:start="2147:29" pos:end="2147:40">settimeofday</name><argument_list pos:start="2147:41" pos:end="2147:51">(<argument pos:start="2147:42" pos:end="2147:44"><expr pos:start="2147:42" pos:end="2147:44"><operator pos:start="2147:42" pos:end="2147:42">&amp;</operator><name pos:start="2147:43" pos:end="2147:44">tv</name></expr></argument>, <argument pos:start="2147:47" pos:end="2147:50"><expr pos:start="2147:47" pos:end="2147:50"><name pos:start="2147:47" pos:end="2147:50">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2151:9" pos:end="2154:0">break;</break>

<cpp:if pos:start="2153:1" pos:end="2153:80">#<cpp:directive pos:start="2153:2" pos:end="2153:3">if</cpp:directive> <expr pos:start="2153:5" pos:end="2153:80"><call pos:start="2153:5" pos:end="2153:29"><name pos:start="2153:5" pos:end="2153:11">defined</name><argument_list pos:start="2153:12" pos:end="2153:29">(<argument pos:start="2153:13" pos:end="2153:28"><expr pos:start="2153:13" pos:end="2153:28"><name pos:start="2153:13" pos:end="2153:28">TARGET_NR_select</name></expr></argument>)</argument_list></call> <operator pos:start="2153:31" pos:end="2153:32">&amp;&amp;</operator> <operator pos:start="2153:34" pos:end="2153:34">!</operator><call pos:start="2153:35" pos:end="2153:55"><name pos:start="2153:35" pos:end="2153:41">defined</name><argument_list pos:start="2153:42" pos:end="2153:55">(<argument pos:start="2153:43" pos:end="2153:54"><expr pos:start="2153:43" pos:end="2153:54"><name pos:start="2153:43" pos:end="2153:54">TARGET_S390X</name></expr></argument>)</argument_list></call> <operator pos:start="2153:57" pos:end="2153:58">&amp;&amp;</operator> <operator pos:start="2153:60" pos:end="2153:60">!</operator><call pos:start="2153:61" pos:end="2153:80"><name pos:start="2153:61" pos:end="2153:67">defined</name><argument_list pos:start="2153:68" pos:end="2153:80">(<argument pos:start="2153:69" pos:end="2153:79"><expr pos:start="2153:69" pos:end="2153:79"><name pos:start="2153:69" pos:end="2153:79">TARGET_S390</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2155:5" pos:end="2155:26">case <expr pos:start="2155:10" pos:end="2155:25"><name pos:start="2155:10" pos:end="2155:25">TARGET_NR_select</name></expr>:</case>

        <block pos:start="2157:9" pos:end="2185:9">{<block_content pos:start="2159:13" pos:end="2183:55">

            <decl_stmt pos:start="2159:13" pos:end="2159:46"><decl pos:start="2159:13" pos:end="2159:45"><type pos:start="2159:13" pos:end="2159:42"><name pos:start="2159:13" pos:end="2159:40"><name pos:start="2159:13" pos:end="2159:18">struct</name> <name pos:start="2159:20" pos:end="2159:40">target_sel_arg_struct</name></name> <modifier pos:start="2159:42" pos:end="2159:42">*</modifier></type><name pos:start="2159:43" pos:end="2159:45">sel</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2161:13" pos:end="2161:42"><decl pos:start="2161:13" pos:end="2161:25"><type pos:start="2161:13" pos:end="2161:21"><name pos:start="2161:13" pos:end="2161:21">abi_ulong</name></type> <name pos:start="2161:23" pos:end="2161:25">inp</name></decl>, <decl pos:start="2161:28" pos:end="2161:31"><type ref="prev" pos:start="2161:13" pos:end="2161:21"/><name pos:start="2161:28" pos:end="2161:31">outp</name></decl>, <decl pos:start="2161:34" pos:end="2161:36"><type ref="prev" pos:start="2161:13" pos:end="2161:21"/><name pos:start="2161:34" pos:end="2161:36">exp</name></decl>, <decl pos:start="2161:39" pos:end="2161:41"><type ref="prev" pos:start="2161:13" pos:end="2161:21"/><name pos:start="2161:39" pos:end="2161:41">tvp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2163:13" pos:end="2163:22"><decl pos:start="2163:13" pos:end="2163:21"><type pos:start="2163:13" pos:end="2163:16"><name pos:start="2163:13" pos:end="2163:16">long</name></type> <name pos:start="2163:18" pos:end="2163:21">nsel</name></decl>;</decl_stmt>



            <if_stmt pos:start="2167:13" pos:end="2169:28"><if pos:start="2167:13" pos:end="2169:28">if <condition pos:start="2167:16" pos:end="2167:61">(<expr pos:start="2167:17" pos:end="2167:60"><operator pos:start="2167:17" pos:end="2167:17">!</operator><call pos:start="2167:18" pos:end="2167:60"><name pos:start="2167:18" pos:end="2167:33">lock_user_struct</name><argument_list pos:start="2167:34" pos:end="2167:60">(<argument pos:start="2167:35" pos:end="2167:45"><expr pos:start="2167:35" pos:end="2167:45"><name pos:start="2167:35" pos:end="2167:45">VERIFY_READ</name></expr></argument>, <argument pos:start="2167:48" pos:end="2167:50"><expr pos:start="2167:48" pos:end="2167:50"><name pos:start="2167:48" pos:end="2167:50">sel</name></expr></argument>, <argument pos:start="2167:53" pos:end="2167:56"><expr pos:start="2167:53" pos:end="2167:56"><name pos:start="2167:53" pos:end="2167:56">arg1</name></expr></argument>, <argument pos:start="2167:59" pos:end="2167:59"><expr pos:start="2167:59" pos:end="2167:59"><literal type="number" pos:start="2167:59" pos:end="2167:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2169:17" pos:end="2169:28"><block_content pos:start="2169:17" pos:end="2169:28">

                <goto pos:start="2169:17" pos:end="2169:28">goto <name pos:start="2169:22" pos:end="2169:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2171:13" pos:end="2171:35"><expr pos:start="2171:13" pos:end="2171:34"><name pos:start="2171:13" pos:end="2171:16">nsel</name> <operator pos:start="2171:18" pos:end="2171:18">=</operator> <call pos:start="2171:20" pos:end="2171:34"><name pos:start="2171:20" pos:end="2171:26">tswapal</name><argument_list pos:start="2171:27" pos:end="2171:34">(<argument pos:start="2171:28" pos:end="2171:33"><expr pos:start="2171:28" pos:end="2171:33"><name pos:start="2171:28" pos:end="2171:33"><name pos:start="2171:28" pos:end="2171:30">sel</name><operator pos:start="2171:31" pos:end="2171:32">-&gt;</operator><name pos:start="2171:33" pos:end="2171:33">n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2173:13" pos:end="2173:36"><expr pos:start="2173:13" pos:end="2173:35"><name pos:start="2173:13" pos:end="2173:15">inp</name> <operator pos:start="2173:17" pos:end="2173:17">=</operator> <call pos:start="2173:19" pos:end="2173:35"><name pos:start="2173:19" pos:end="2173:25">tswapal</name><argument_list pos:start="2173:26" pos:end="2173:35">(<argument pos:start="2173:27" pos:end="2173:34"><expr pos:start="2173:27" pos:end="2173:34"><name pos:start="2173:27" pos:end="2173:34"><name pos:start="2173:27" pos:end="2173:29">sel</name><operator pos:start="2173:30" pos:end="2173:31">-&gt;</operator><name pos:start="2173:32" pos:end="2173:34">inp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2175:13" pos:end="2175:38"><expr pos:start="2175:13" pos:end="2175:37"><name pos:start="2175:13" pos:end="2175:16">outp</name> <operator pos:start="2175:18" pos:end="2175:18">=</operator> <call pos:start="2175:20" pos:end="2175:37"><name pos:start="2175:20" pos:end="2175:26">tswapal</name><argument_list pos:start="2175:27" pos:end="2175:37">(<argument pos:start="2175:28" pos:end="2175:36"><expr pos:start="2175:28" pos:end="2175:36"><name pos:start="2175:28" pos:end="2175:36"><name pos:start="2175:28" pos:end="2175:30">sel</name><operator pos:start="2175:31" pos:end="2175:32">-&gt;</operator><name pos:start="2175:33" pos:end="2175:36">outp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2177:13" pos:end="2177:36"><expr pos:start="2177:13" pos:end="2177:35"><name pos:start="2177:13" pos:end="2177:15">exp</name> <operator pos:start="2177:17" pos:end="2177:17">=</operator> <call pos:start="2177:19" pos:end="2177:35"><name pos:start="2177:19" pos:end="2177:25">tswapal</name><argument_list pos:start="2177:26" pos:end="2177:35">(<argument pos:start="2177:27" pos:end="2177:34"><expr pos:start="2177:27" pos:end="2177:34"><name pos:start="2177:27" pos:end="2177:34"><name pos:start="2177:27" pos:end="2177:29">sel</name><operator pos:start="2177:30" pos:end="2177:31">-&gt;</operator><name pos:start="2177:32" pos:end="2177:34">exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2179:13" pos:end="2179:36"><expr pos:start="2179:13" pos:end="2179:35"><name pos:start="2179:13" pos:end="2179:15">tvp</name> <operator pos:start="2179:17" pos:end="2179:17">=</operator> <call pos:start="2179:19" pos:end="2179:35"><name pos:start="2179:19" pos:end="2179:25">tswapal</name><argument_list pos:start="2179:26" pos:end="2179:35">(<argument pos:start="2179:27" pos:end="2179:34"><expr pos:start="2179:27" pos:end="2179:34"><name pos:start="2179:27" pos:end="2179:34"><name pos:start="2179:27" pos:end="2179:29">sel</name><operator pos:start="2179:30" pos:end="2179:31">-&gt;</operator><name pos:start="2179:32" pos:end="2179:34">tvp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2181:13" pos:end="2181:45"><expr pos:start="2181:13" pos:end="2181:44"><call pos:start="2181:13" pos:end="2181:44"><name pos:start="2181:13" pos:end="2181:30">unlock_user_struct</name><argument_list pos:start="2181:31" pos:end="2181:44">(<argument pos:start="2181:32" pos:end="2181:34"><expr pos:start="2181:32" pos:end="2181:34"><name pos:start="2181:32" pos:end="2181:34">sel</name></expr></argument>, <argument pos:start="2181:37" pos:end="2181:40"><expr pos:start="2181:37" pos:end="2181:40"><name pos:start="2181:37" pos:end="2181:40">arg1</name></expr></argument>, <argument pos:start="2181:43" pos:end="2181:43"><expr pos:start="2181:43" pos:end="2181:43"><literal type="number" pos:start="2181:43" pos:end="2181:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2183:13" pos:end="2183:55"><expr pos:start="2183:13" pos:end="2183:54"><name pos:start="2183:13" pos:end="2183:15">ret</name> <operator pos:start="2183:17" pos:end="2183:17">=</operator> <call pos:start="2183:19" pos:end="2183:54"><name pos:start="2183:19" pos:end="2183:27">do_select</name><argument_list pos:start="2183:28" pos:end="2183:54">(<argument pos:start="2183:29" pos:end="2183:32"><expr pos:start="2183:29" pos:end="2183:32"><name pos:start="2183:29" pos:end="2183:32">nsel</name></expr></argument>, <argument pos:start="2183:35" pos:end="2183:37"><expr pos:start="2183:35" pos:end="2183:37"><name pos:start="2183:35" pos:end="2183:37">inp</name></expr></argument>, <argument pos:start="2183:40" pos:end="2183:43"><expr pos:start="2183:40" pos:end="2183:43"><name pos:start="2183:40" pos:end="2183:43">outp</name></expr></argument>, <argument pos:start="2183:46" pos:end="2183:48"><expr pos:start="2183:46" pos:end="2183:48"><name pos:start="2183:46" pos:end="2183:48">exp</name></expr></argument>, <argument pos:start="2183:51" pos:end="2183:53"><expr pos:start="2183:51" pos:end="2183:53"><name pos:start="2183:51" pos:end="2183:53">tvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2187:9" pos:end="2192:0">break;</break>

<cpp:endif pos:start="2189:1" pos:end="2189:6">#<cpp:directive pos:start="2189:2" pos:end="2189:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2191:1" pos:end="2191:25">#<cpp:directive pos:start="2191:2" pos:end="2191:6">ifdef</cpp:directive> <name pos:start="2191:8" pos:end="2191:25">TARGET_NR_pselect6</name></cpp:ifdef>

    <case pos:start="2193:5" pos:end="2193:28">case <expr pos:start="2193:10" pos:end="2193:27"><name pos:start="2193:10" pos:end="2193:27">TARGET_NR_pselect6</name></expr>:</case>

        <block pos:start="2195:9" pos:end="2393:9">{<block_content pos:start="2197:13" pos:end="2391:13">

            <decl_stmt pos:start="2197:13" pos:end="2197:62"><decl pos:start="2197:13" pos:end="2197:29"><type pos:start="2197:13" pos:end="2197:20"><name pos:start="2197:13" pos:end="2197:20">abi_long</name></type> <name pos:start="2197:22" pos:end="2197:29">rfd_addr</name></decl>, <decl pos:start="2197:32" pos:end="2197:39"><type ref="prev" pos:start="2197:13" pos:end="2197:20"/><name pos:start="2197:32" pos:end="2197:39">wfd_addr</name></decl>, <decl pos:start="2197:42" pos:end="2197:49"><type ref="prev" pos:start="2197:13" pos:end="2197:20"/><name pos:start="2197:42" pos:end="2197:49">efd_addr</name></decl>, <decl pos:start="2197:52" pos:end="2197:52"><type ref="prev" pos:start="2197:13" pos:end="2197:20"/><name pos:start="2197:52" pos:end="2197:52">n</name></decl>, <decl pos:start="2197:55" pos:end="2197:61"><type ref="prev" pos:start="2197:13" pos:end="2197:20"/><name pos:start="2197:55" pos:end="2197:61">ts_addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2199:13" pos:end="2199:36"><decl pos:start="2199:13" pos:end="2199:23"><type pos:start="2199:13" pos:end="2199:18"><name pos:start="2199:13" pos:end="2199:18">fd_set</name></type> <name pos:start="2199:20" pos:end="2199:23">rfds</name></decl>, <decl pos:start="2199:26" pos:end="2199:29"><type ref="prev" pos:start="2199:13" pos:end="2199:18"/><name pos:start="2199:26" pos:end="2199:29">wfds</name></decl>, <decl pos:start="2199:32" pos:end="2199:35"><type ref="prev" pos:start="2199:13" pos:end="2199:18"/><name pos:start="2199:32" pos:end="2199:35">efds</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2201:13" pos:end="2201:51"><decl pos:start="2201:13" pos:end="2201:28"><type pos:start="2201:13" pos:end="2201:20"><name pos:start="2201:13" pos:end="2201:18">fd_set</name> <modifier pos:start="2201:20" pos:end="2201:20">*</modifier></type><name pos:start="2201:21" pos:end="2201:28">rfds_ptr</name></decl>, <decl pos:start="2201:31" pos:end="2201:39"><type ref="prev" pos:start="2201:13" pos:end="2201:20"><modifier pos:start="2201:31" pos:end="2201:31">*</modifier></type><name pos:start="2201:32" pos:end="2201:39">wfds_ptr</name></decl>, <decl pos:start="2201:42" pos:end="2201:50"><type ref="prev" pos:start="2201:13" pos:end="2201:20"><modifier pos:start="2201:42" pos:end="2201:42">*</modifier></type><name pos:start="2201:43" pos:end="2201:50">efds_ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2203:13" pos:end="2203:40"><decl pos:start="2203:13" pos:end="2203:30"><type pos:start="2203:13" pos:end="2203:27"><name pos:start="2203:13" pos:end="2203:27"><name pos:start="2203:13" pos:end="2203:18">struct</name> <name pos:start="2203:20" pos:end="2203:27">timespec</name></name></type> <name pos:start="2203:29" pos:end="2203:30">ts</name></decl>, <decl pos:start="2203:33" pos:end="2203:39"><type ref="prev" pos:start="2203:13" pos:end="2203:27"><modifier pos:start="2203:33" pos:end="2203:33">*</modifier></type><name pos:start="2203:34" pos:end="2203:39">ts_ptr</name></decl>;</decl_stmt>



            <comment type="block" pos:start="2207:13" pos:end="2213:15">/*

             * The 6th arg is actually two args smashed together,

             * so we cannot use the C library.

             */</comment>

            <decl_stmt pos:start="2215:13" pos:end="2215:25"><decl pos:start="2215:13" pos:end="2215:24"><type pos:start="2215:13" pos:end="2215:20"><name pos:start="2215:13" pos:end="2215:20">sigset_t</name></type> <name pos:start="2215:22" pos:end="2215:24">set</name></decl>;</decl_stmt>

            <struct pos:start="2217:13" pos:end="2223:28">struct <block pos:start="2217:20" pos:end="2223:13">{

                <decl_stmt pos:start="2219:17" pos:end="2219:30"><decl pos:start="2219:17" pos:end="2219:29"><type pos:start="2219:17" pos:end="2219:26"><name pos:start="2219:17" pos:end="2219:24">sigset_t</name> <modifier pos:start="2219:26" pos:end="2219:26">*</modifier></type><name pos:start="2219:27" pos:end="2219:29">set</name></decl>;</decl_stmt>

                <decl_stmt pos:start="2221:17" pos:end="2221:28"><decl pos:start="2221:17" pos:end="2221:27"><type pos:start="2221:17" pos:end="2221:22"><name pos:start="2221:17" pos:end="2221:22">size_t</name></type> <name pos:start="2221:24" pos:end="2221:27">size</name></decl>;</decl_stmt>

            }</block> <decl pos:start="2223:15" pos:end="2223:17"><name pos:start="2223:15" pos:end="2223:17">sig</name></decl>, <decl pos:start="2223:20" pos:end="2223:27"><type ref="prev" pos:start="2221:17" pos:end="2221:22"><modifier pos:start="2223:20" pos:end="2223:20">*</modifier></type><name pos:start="2223:21" pos:end="2223:27">sig_ptr</name></decl>;</struct>



            <decl_stmt pos:start="2227:13" pos:end="2227:53"><decl pos:start="2227:13" pos:end="2227:32"><type pos:start="2227:13" pos:end="2227:21"><name pos:start="2227:13" pos:end="2227:21">abi_ulong</name></type> <name pos:start="2227:23" pos:end="2227:32">arg_sigset</name></decl>, <decl pos:start="2227:35" pos:end="2227:45"><type ref="prev" pos:start="2227:13" pos:end="2227:21"/><name pos:start="2227:35" pos:end="2227:45">arg_sigsize</name></decl>, <decl pos:start="2227:48" pos:end="2227:52"><type ref="prev" pos:start="2227:13" pos:end="2227:21"><modifier pos:start="2227:48" pos:end="2227:48">*</modifier></type><name pos:start="2227:49" pos:end="2227:52">arg7</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2229:13" pos:end="2229:43"><decl pos:start="2229:13" pos:end="2229:42"><type pos:start="2229:13" pos:end="2229:29"><name pos:start="2229:13" pos:end="2229:27">target_sigset_t</name> <modifier pos:start="2229:29" pos:end="2229:29">*</modifier></type><name pos:start="2229:30" pos:end="2229:42">target_sigset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="2233:13" pos:end="2233:21"><expr pos:start="2233:13" pos:end="2233:20"><name pos:start="2233:13" pos:end="2233:13">n</name> <operator pos:start="2233:15" pos:end="2233:15">=</operator> <name pos:start="2233:17" pos:end="2233:20">arg1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2235:13" pos:end="2235:28"><expr pos:start="2235:13" pos:end="2235:27"><name pos:start="2235:13" pos:end="2235:20">rfd_addr</name> <operator pos:start="2235:22" pos:end="2235:22">=</operator> <name pos:start="2235:24" pos:end="2235:27">arg2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2237:13" pos:end="2237:28"><expr pos:start="2237:13" pos:end="2237:27"><name pos:start="2237:13" pos:end="2237:20">wfd_addr</name> <operator pos:start="2237:22" pos:end="2237:22">=</operator> <name pos:start="2237:24" pos:end="2237:27">arg3</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2239:13" pos:end="2239:28"><expr pos:start="2239:13" pos:end="2239:27"><name pos:start="2239:13" pos:end="2239:20">efd_addr</name> <operator pos:start="2239:22" pos:end="2239:22">=</operator> <name pos:start="2239:24" pos:end="2239:27">arg4</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2241:13" pos:end="2241:27"><expr pos:start="2241:13" pos:end="2241:26"><name pos:start="2241:13" pos:end="2241:19">ts_addr</name> <operator pos:start="2241:21" pos:end="2241:21">=</operator> <name pos:start="2241:23" pos:end="2241:26">arg5</name></expr>;</expr_stmt>



            <expr_stmt pos:start="2245:13" pos:end="2245:74"><expr pos:start="2245:13" pos:end="2245:73"><name pos:start="2245:13" pos:end="2245:15">ret</name> <operator pos:start="2245:17" pos:end="2245:17">=</operator> <call pos:start="2245:19" pos:end="2245:73"><name pos:start="2245:19" pos:end="2245:42">copy_from_user_fdset_ptr</name><argument_list pos:start="2245:43" pos:end="2245:73">(<argument pos:start="2245:44" pos:end="2245:48"><expr pos:start="2245:44" pos:end="2245:48"><operator pos:start="2245:44" pos:end="2245:44">&amp;</operator><name pos:start="2245:45" pos:end="2245:48">rfds</name></expr></argument>, <argument pos:start="2245:51" pos:end="2245:59"><expr pos:start="2245:51" pos:end="2245:59"><operator pos:start="2245:51" pos:end="2245:51">&amp;</operator><name pos:start="2245:52" pos:end="2245:59">rfds_ptr</name></expr></argument>, <argument pos:start="2245:62" pos:end="2245:69"><expr pos:start="2245:62" pos:end="2245:69"><name pos:start="2245:62" pos:end="2245:69">rfd_addr</name></expr></argument>, <argument pos:start="2245:72" pos:end="2245:72"><expr pos:start="2245:72" pos:end="2245:72"><name pos:start="2245:72" pos:end="2245:72">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2247:13" pos:end="2251:13"><if pos:start="2247:13" pos:end="2251:13">if <condition pos:start="2247:16" pos:end="2247:20">(<expr pos:start="2247:17" pos:end="2247:19"><name pos:start="2247:17" pos:end="2247:19">ret</name></expr>)</condition> <block pos:start="2247:22" pos:end="2251:13">{<block_content pos:start="2249:17" pos:end="2249:26">

                <goto pos:start="2249:17" pos:end="2249:26">goto <name pos:start="2249:22" pos:end="2249:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2253:13" pos:end="2253:74"><expr pos:start="2253:13" pos:end="2253:73"><name pos:start="2253:13" pos:end="2253:15">ret</name> <operator pos:start="2253:17" pos:end="2253:17">=</operator> <call pos:start="2253:19" pos:end="2253:73"><name pos:start="2253:19" pos:end="2253:42">copy_from_user_fdset_ptr</name><argument_list pos:start="2253:43" pos:end="2253:73">(<argument pos:start="2253:44" pos:end="2253:48"><expr pos:start="2253:44" pos:end="2253:48"><operator pos:start="2253:44" pos:end="2253:44">&amp;</operator><name pos:start="2253:45" pos:end="2253:48">wfds</name></expr></argument>, <argument pos:start="2253:51" pos:end="2253:59"><expr pos:start="2253:51" pos:end="2253:59"><operator pos:start="2253:51" pos:end="2253:51">&amp;</operator><name pos:start="2253:52" pos:end="2253:59">wfds_ptr</name></expr></argument>, <argument pos:start="2253:62" pos:end="2253:69"><expr pos:start="2253:62" pos:end="2253:69"><name pos:start="2253:62" pos:end="2253:69">wfd_addr</name></expr></argument>, <argument pos:start="2253:72" pos:end="2253:72"><expr pos:start="2253:72" pos:end="2253:72"><name pos:start="2253:72" pos:end="2253:72">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2255:13" pos:end="2259:13"><if pos:start="2255:13" pos:end="2259:13">if <condition pos:start="2255:16" pos:end="2255:20">(<expr pos:start="2255:17" pos:end="2255:19"><name pos:start="2255:17" pos:end="2255:19">ret</name></expr>)</condition> <block pos:start="2255:22" pos:end="2259:13">{<block_content pos:start="2257:17" pos:end="2257:26">

                <goto pos:start="2257:17" pos:end="2257:26">goto <name pos:start="2257:22" pos:end="2257:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2261:13" pos:end="2261:74"><expr pos:start="2261:13" pos:end="2261:73"><name pos:start="2261:13" pos:end="2261:15">ret</name> <operator pos:start="2261:17" pos:end="2261:17">=</operator> <call pos:start="2261:19" pos:end="2261:73"><name pos:start="2261:19" pos:end="2261:42">copy_from_user_fdset_ptr</name><argument_list pos:start="2261:43" pos:end="2261:73">(<argument pos:start="2261:44" pos:end="2261:48"><expr pos:start="2261:44" pos:end="2261:48"><operator pos:start="2261:44" pos:end="2261:44">&amp;</operator><name pos:start="2261:45" pos:end="2261:48">efds</name></expr></argument>, <argument pos:start="2261:51" pos:end="2261:59"><expr pos:start="2261:51" pos:end="2261:59"><operator pos:start="2261:51" pos:end="2261:51">&amp;</operator><name pos:start="2261:52" pos:end="2261:59">efds_ptr</name></expr></argument>, <argument pos:start="2261:62" pos:end="2261:69"><expr pos:start="2261:62" pos:end="2261:69"><name pos:start="2261:62" pos:end="2261:69">efd_addr</name></expr></argument>, <argument pos:start="2261:72" pos:end="2261:72"><expr pos:start="2261:72" pos:end="2261:72"><name pos:start="2261:72" pos:end="2261:72">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2263:13" pos:end="2267:13"><if pos:start="2263:13" pos:end="2267:13">if <condition pos:start="2263:16" pos:end="2263:20">(<expr pos:start="2263:17" pos:end="2263:19"><name pos:start="2263:17" pos:end="2263:19">ret</name></expr>)</condition> <block pos:start="2263:22" pos:end="2267:13">{<block_content pos:start="2265:17" pos:end="2265:26">

                <goto pos:start="2265:17" pos:end="2265:26">goto <name pos:start="2265:22" pos:end="2265:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="2271:13" pos:end="2277:15">/*

             * This takes a timespec, and not a timeval, so we cannot

             * use the do_select() helper ...

             */</comment>

            <if_stmt pos:start="2279:13" pos:end="2293:13"><if pos:start="2279:13" pos:end="2289:13">if <condition pos:start="2279:16" pos:end="2279:24">(<expr pos:start="2279:17" pos:end="2279:23"><name pos:start="2279:17" pos:end="2279:23">ts_addr</name></expr>)</condition> <block pos:start="2279:26" pos:end="2289:13">{<block_content pos:start="2281:17" pos:end="2287:29">

                <if_stmt pos:start="2281:17" pos:end="2285:17"><if pos:start="2281:17" pos:end="2285:17">if <condition pos:start="2281:20" pos:end="2281:58">(<expr pos:start="2281:21" pos:end="2281:57"><call pos:start="2281:21" pos:end="2281:57"><name pos:start="2281:21" pos:end="2281:43">target_to_host_timespec</name><argument_list pos:start="2281:44" pos:end="2281:57">(<argument pos:start="2281:45" pos:end="2281:47"><expr pos:start="2281:45" pos:end="2281:47"><operator pos:start="2281:45" pos:end="2281:45">&amp;</operator><name pos:start="2281:46" pos:end="2281:47">ts</name></expr></argument>, <argument pos:start="2281:50" pos:end="2281:56"><expr pos:start="2281:50" pos:end="2281:56"><name pos:start="2281:50" pos:end="2281:56">ts_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2281:60" pos:end="2285:17">{<block_content pos:start="2283:21" pos:end="2283:32">

                    <goto pos:start="2283:21" pos:end="2283:32">goto <name pos:start="2283:26" pos:end="2283:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2287:17" pos:end="2287:29"><expr pos:start="2287:17" pos:end="2287:28"><name pos:start="2287:17" pos:end="2287:22">ts_ptr</name> <operator pos:start="2287:24" pos:end="2287:24">=</operator> <operator pos:start="2287:26" pos:end="2287:26">&amp;</operator><name pos:start="2287:27" pos:end="2287:28">ts</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2289:15" pos:end="2293:13">else <block pos:start="2289:20" pos:end="2293:13">{<block_content pos:start="2291:17" pos:end="2291:30">

                <expr_stmt pos:start="2291:17" pos:end="2291:30"><expr pos:start="2291:17" pos:end="2291:29"><name pos:start="2291:17" pos:end="2291:22">ts_ptr</name> <operator pos:start="2291:24" pos:end="2291:24">=</operator> <name pos:start="2291:26" pos:end="2291:29">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="2297:13" pos:end="2297:60">/* Extract the two packed args for the sigset */</comment>

            <if_stmt pos:start="2299:13" pos:end="2361:13"><if pos:start="2299:13" pos:end="2357:13">if <condition pos:start="2299:16" pos:end="2299:21">(<expr pos:start="2299:17" pos:end="2299:20"><name pos:start="2299:17" pos:end="2299:20">arg6</name></expr>)</condition> <block pos:start="2299:23" pos:end="2357:13">{<block_content pos:start="2301:17" pos:end="2355:17">

                <expr_stmt pos:start="2301:17" pos:end="2301:31"><expr pos:start="2301:17" pos:end="2301:30"><name pos:start="2301:17" pos:end="2301:23">sig_ptr</name> <operator pos:start="2301:25" pos:end="2301:25">=</operator> <operator pos:start="2301:27" pos:end="2301:27">&amp;</operator><name pos:start="2301:28" pos:end="2301:30">sig</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2303:17" pos:end="2303:37"><expr pos:start="2303:17" pos:end="2303:36"><name pos:start="2303:17" pos:end="2303:24"><name pos:start="2303:17" pos:end="2303:19">sig</name><operator pos:start="2303:20" pos:end="2303:20">.</operator><name pos:start="2303:21" pos:end="2303:24">size</name></name> <operator pos:start="2303:26" pos:end="2303:26">=</operator> <name pos:start="2303:28" pos:end="2303:32">_NSIG</name> <operator pos:start="2303:34" pos:end="2303:34">/</operator> <literal type="number" pos:start="2303:36" pos:end="2303:36">8</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="2307:17" pos:end="2307:74"><expr pos:start="2307:17" pos:end="2307:73"><name pos:start="2307:17" pos:end="2307:20">arg7</name> <operator pos:start="2307:22" pos:end="2307:22">=</operator> <call pos:start="2307:24" pos:end="2307:73"><name pos:start="2307:24" pos:end="2307:32">lock_user</name><argument_list pos:start="2307:33" pos:end="2307:73">(<argument pos:start="2307:34" pos:end="2307:44"><expr pos:start="2307:34" pos:end="2307:44"><name pos:start="2307:34" pos:end="2307:44">VERIFY_READ</name></expr></argument>, <argument pos:start="2307:47" pos:end="2307:50"><expr pos:start="2307:47" pos:end="2307:50"><name pos:start="2307:47" pos:end="2307:50">arg6</name></expr></argument>, <argument pos:start="2307:53" pos:end="2307:69"><expr pos:start="2307:53" pos:end="2307:69"><sizeof pos:start="2307:53" pos:end="2307:65">sizeof<argument_list pos:start="2307:59" pos:end="2307:65">(<argument pos:start="2307:60" pos:end="2307:64"><expr pos:start="2307:60" pos:end="2307:64"><operator pos:start="2307:60" pos:end="2307:60">*</operator><name pos:start="2307:61" pos:end="2307:64">arg7</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2307:67" pos:end="2307:67">*</operator> <literal type="number" pos:start="2307:69" pos:end="2307:69">2</literal></expr></argument>, <argument pos:start="2307:72" pos:end="2307:72"><expr pos:start="2307:72" pos:end="2307:72"><literal type="number" pos:start="2307:72" pos:end="2307:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2309:17" pos:end="2313:17"><if pos:start="2309:17" pos:end="2313:17">if <condition pos:start="2309:20" pos:end="2309:26">(<expr pos:start="2309:21" pos:end="2309:25"><operator pos:start="2309:21" pos:end="2309:21">!</operator><name pos:start="2309:22" pos:end="2309:25">arg7</name></expr>)</condition> <block pos:start="2309:28" pos:end="2313:17">{<block_content pos:start="2311:21" pos:end="2311:32">

                    <goto pos:start="2311:21" pos:end="2311:32">goto <name pos:start="2311:26" pos:end="2311:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2315:17" pos:end="2315:46"><expr pos:start="2315:17" pos:end="2315:45"><name pos:start="2315:17" pos:end="2315:26">arg_sigset</name> <operator pos:start="2315:28" pos:end="2315:28">=</operator> <call pos:start="2315:30" pos:end="2315:45"><name pos:start="2315:30" pos:end="2315:36">tswapal</name><argument_list pos:start="2315:37" pos:end="2315:45">(<argument pos:start="2315:38" pos:end="2315:44"><expr pos:start="2315:38" pos:end="2315:44"><name pos:start="2315:38" pos:end="2315:44"><name pos:start="2315:38" pos:end="2315:41">arg7</name><index pos:start="2315:42" pos:end="2315:44">[<expr pos:start="2315:43" pos:end="2315:43"><literal type="number" pos:start="2315:43" pos:end="2315:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2317:17" pos:end="2317:47"><expr pos:start="2317:17" pos:end="2317:46"><name pos:start="2317:17" pos:end="2317:27">arg_sigsize</name> <operator pos:start="2317:29" pos:end="2317:29">=</operator> <call pos:start="2317:31" pos:end="2317:46"><name pos:start="2317:31" pos:end="2317:37">tswapal</name><argument_list pos:start="2317:38" pos:end="2317:46">(<argument pos:start="2317:39" pos:end="2317:45"><expr pos:start="2317:39" pos:end="2317:45"><name pos:start="2317:39" pos:end="2317:45"><name pos:start="2317:39" pos:end="2317:42">arg7</name><index pos:start="2317:43" pos:end="2317:45">[<expr pos:start="2317:44" pos:end="2317:44"><literal type="number" pos:start="2317:44" pos:end="2317:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2319:17" pos:end="2319:43"><expr pos:start="2319:17" pos:end="2319:42"><call pos:start="2319:17" pos:end="2319:42"><name pos:start="2319:17" pos:end="2319:27">unlock_user</name><argument_list pos:start="2319:28" pos:end="2319:42">(<argument pos:start="2319:29" pos:end="2319:32"><expr pos:start="2319:29" pos:end="2319:32"><name pos:start="2319:29" pos:end="2319:32">arg7</name></expr></argument>, <argument pos:start="2319:35" pos:end="2319:38"><expr pos:start="2319:35" pos:end="2319:38"><name pos:start="2319:35" pos:end="2319:38">arg6</name></expr></argument>, <argument pos:start="2319:41" pos:end="2319:41"><expr pos:start="2319:41" pos:end="2319:41"><literal type="number" pos:start="2319:41" pos:end="2319:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="2323:17" pos:end="2355:17"><if pos:start="2323:17" pos:end="2351:17">if <condition pos:start="2323:20" pos:end="2323:31">(<expr pos:start="2323:21" pos:end="2323:30"><name pos:start="2323:21" pos:end="2323:30">arg_sigset</name></expr>)</condition> <block pos:start="2323:33" pos:end="2351:17">{<block_content pos:start="2325:21" pos:end="2349:62">

                    <expr_stmt pos:start="2325:21" pos:end="2325:35"><expr pos:start="2325:21" pos:end="2325:34"><name pos:start="2325:21" pos:end="2325:27"><name pos:start="2325:21" pos:end="2325:23">sig</name><operator pos:start="2325:24" pos:end="2325:24">.</operator><name pos:start="2325:25" pos:end="2325:27">set</name></name> <operator pos:start="2325:29" pos:end="2325:29">=</operator> <operator pos:start="2325:31" pos:end="2325:31">&amp;</operator><name pos:start="2325:32" pos:end="2325:34">set</name></expr>;</expr_stmt>

                    <if_stmt pos:start="2327:21" pos:end="2335:21"><if pos:start="2327:21" pos:end="2335:21">if <condition pos:start="2327:24" pos:end="2327:62">(<expr pos:start="2327:25" pos:end="2327:61"><name pos:start="2327:25" pos:end="2327:35">arg_sigsize</name> <operator pos:start="2327:37" pos:end="2327:38">!=</operator> <sizeof pos:start="2327:40" pos:end="2327:61">sizeof<argument_list pos:start="2327:46" pos:end="2327:61">(<argument pos:start="2327:47" pos:end="2327:60"><expr pos:start="2327:47" pos:end="2327:60"><operator pos:start="2327:47" pos:end="2327:47">*</operator><name pos:start="2327:48" pos:end="2327:60">target_sigset</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="2327:64" pos:end="2335:21">{<block_content pos:start="2331:25" pos:end="2333:34">

                        <comment type="block" pos:start="2329:25" pos:end="2329:78">/* Like the kernel, we enforce correct size sigsets */</comment>

                        <expr_stmt pos:start="2331:25" pos:end="2331:45"><expr pos:start="2331:25" pos:end="2331:44"><name pos:start="2331:25" pos:end="2331:27">ret</name> <operator pos:start="2331:29" pos:end="2331:29">=</operator> <operator pos:start="2331:31" pos:end="2331:31">-</operator><name pos:start="2331:32" pos:end="2331:44">TARGET_EINVAL</name></expr>;</expr_stmt>

                        <goto pos:start="2333:25" pos:end="2333:34">goto <name pos:start="2333:30" pos:end="2333:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2337:21" pos:end="2339:73"><expr pos:start="2337:21" pos:end="2339:72"><name pos:start="2337:21" pos:end="2337:33">target_sigset</name> <operator pos:start="2337:35" pos:end="2337:35">=</operator> <call pos:start="2337:37" pos:end="2339:72"><name pos:start="2337:37" pos:end="2337:45">lock_user</name><argument_list pos:start="2337:46" pos:end="2339:72">(<argument pos:start="2337:47" pos:end="2337:57"><expr pos:start="2337:47" pos:end="2337:57"><name pos:start="2337:47" pos:end="2337:57">VERIFY_READ</name></expr></argument>, <argument pos:start="2337:60" pos:end="2337:69"><expr pos:start="2337:60" pos:end="2337:69"><name pos:start="2337:60" pos:end="2337:69">arg_sigset</name></expr></argument>,

                                              <argument pos:start="2339:47" pos:end="2339:68"><expr pos:start="2339:47" pos:end="2339:68"><sizeof pos:start="2339:47" pos:end="2339:68">sizeof<argument_list pos:start="2339:53" pos:end="2339:68">(<argument pos:start="2339:54" pos:end="2339:67"><expr pos:start="2339:54" pos:end="2339:67"><operator pos:start="2339:54" pos:end="2339:54">*</operator><name pos:start="2339:55" pos:end="2339:67">target_sigset</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2339:71" pos:end="2339:71"><expr pos:start="2339:71" pos:end="2339:71"><literal type="number" pos:start="2339:71" pos:end="2339:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2341:21" pos:end="2345:21"><if pos:start="2341:21" pos:end="2345:21">if <condition pos:start="2341:24" pos:end="2341:39">(<expr pos:start="2341:25" pos:end="2341:38"><operator pos:start="2341:25" pos:end="2341:25">!</operator><name pos:start="2341:26" pos:end="2341:38">target_sigset</name></expr>)</condition> <block pos:start="2341:41" pos:end="2345:21">{<block_content pos:start="2343:25" pos:end="2343:36">

                        <goto pos:start="2343:25" pos:end="2343:36">goto <name pos:start="2343:30" pos:end="2343:35">efault</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2347:21" pos:end="2347:63"><expr pos:start="2347:21" pos:end="2347:62"><call pos:start="2347:21" pos:end="2347:62"><name pos:start="2347:21" pos:end="2347:41">target_to_host_sigset</name><argument_list pos:start="2347:42" pos:end="2347:62">(<argument pos:start="2347:43" pos:end="2347:46"><expr pos:start="2347:43" pos:end="2347:46"><operator pos:start="2347:43" pos:end="2347:43">&amp;</operator><name pos:start="2347:44" pos:end="2347:46">set</name></expr></argument>, <argument pos:start="2347:49" pos:end="2347:61"><expr pos:start="2347:49" pos:end="2347:61"><name pos:start="2347:49" pos:end="2347:61">target_sigset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2349:21" pos:end="2349:62"><expr pos:start="2349:21" pos:end="2349:61"><call pos:start="2349:21" pos:end="2349:61"><name pos:start="2349:21" pos:end="2349:31">unlock_user</name><argument_list pos:start="2349:32" pos:end="2349:61">(<argument pos:start="2349:33" pos:end="2349:45"><expr pos:start="2349:33" pos:end="2349:45"><name pos:start="2349:33" pos:end="2349:45">target_sigset</name></expr></argument>, <argument pos:start="2349:48" pos:end="2349:57"><expr pos:start="2349:48" pos:end="2349:57"><name pos:start="2349:48" pos:end="2349:57">arg_sigset</name></expr></argument>, <argument pos:start="2349:60" pos:end="2349:60"><expr pos:start="2349:60" pos:end="2349:60"><literal type="number" pos:start="2349:60" pos:end="2349:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2351:19" pos:end="2355:17">else <block pos:start="2351:24" pos:end="2355:17">{<block_content pos:start="2353:21" pos:end="2353:35">

                    <expr_stmt pos:start="2353:21" pos:end="2353:35"><expr pos:start="2353:21" pos:end="2353:34"><name pos:start="2353:21" pos:end="2353:27"><name pos:start="2353:21" pos:end="2353:23">sig</name><operator pos:start="2353:24" pos:end="2353:24">.</operator><name pos:start="2353:25" pos:end="2353:27">set</name></name> <operator pos:start="2353:29" pos:end="2353:29">=</operator> <name pos:start="2353:31" pos:end="2353:34">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="2357:15" pos:end="2361:13">else <block pos:start="2357:20" pos:end="2361:13">{<block_content pos:start="2359:17" pos:end="2359:31">

                <expr_stmt pos:start="2359:17" pos:end="2359:31"><expr pos:start="2359:17" pos:end="2359:30"><name pos:start="2359:17" pos:end="2359:23">sig_ptr</name> <operator pos:start="2359:25" pos:end="2359:25">=</operator> <name pos:start="2359:27" pos:end="2359:30">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="2365:13" pos:end="2367:59"><expr pos:start="2365:13" pos:end="2367:58"><name pos:start="2365:13" pos:end="2365:15">ret</name> <operator pos:start="2365:17" pos:end="2365:17">=</operator> <call pos:start="2365:19" pos:end="2367:58"><name pos:start="2365:19" pos:end="2365:27">get_errno</name><argument_list pos:start="2365:28" pos:end="2367:58">(<argument pos:start="2365:29" pos:end="2367:57"><expr pos:start="2365:29" pos:end="2367:57"><call pos:start="2365:29" pos:end="2367:57"><name pos:start="2365:29" pos:end="2365:40">sys_pselect6</name><argument_list pos:start="2365:41" pos:end="2367:57">(<argument pos:start="2365:42" pos:end="2365:42"><expr pos:start="2365:42" pos:end="2365:42"><name pos:start="2365:42" pos:end="2365:42">n</name></expr></argument>, <argument pos:start="2365:45" pos:end="2365:52"><expr pos:start="2365:45" pos:end="2365:52"><name pos:start="2365:45" pos:end="2365:52">rfds_ptr</name></expr></argument>, <argument pos:start="2365:55" pos:end="2365:62"><expr pos:start="2365:55" pos:end="2365:62"><name pos:start="2365:55" pos:end="2365:62">wfds_ptr</name></expr></argument>, <argument pos:start="2365:65" pos:end="2365:72"><expr pos:start="2365:65" pos:end="2365:72"><name pos:start="2365:65" pos:end="2365:72">efds_ptr</name></expr></argument>,

                                         <argument pos:start="2367:42" pos:end="2367:47"><expr pos:start="2367:42" pos:end="2367:47"><name pos:start="2367:42" pos:end="2367:47">ts_ptr</name></expr></argument>, <argument pos:start="2367:50" pos:end="2367:56"><expr pos:start="2367:50" pos:end="2367:56"><name pos:start="2367:50" pos:end="2367:56">sig_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="2371:13" pos:end="2391:13"><if pos:start="2371:13" pos:end="2391:13">if <condition pos:start="2371:16" pos:end="2371:31">(<expr pos:start="2371:17" pos:end="2371:30"><operator pos:start="2371:17" pos:end="2371:17">!</operator><call pos:start="2371:18" pos:end="2371:30"><name pos:start="2371:18" pos:end="2371:25">is_error</name><argument_list pos:start="2371:26" pos:end="2371:30">(<argument pos:start="2371:27" pos:end="2371:29"><expr pos:start="2371:27" pos:end="2371:29"><name pos:start="2371:27" pos:end="2371:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2371:33" pos:end="2391:13">{<block_content pos:start="2373:17" pos:end="2389:32">

                <if_stmt pos:start="2373:17" pos:end="2375:32"><if pos:start="2373:17" pos:end="2375:32">if <condition pos:start="2373:20" pos:end="2373:71">(<expr pos:start="2373:21" pos:end="2373:70"><name pos:start="2373:21" pos:end="2373:28">rfd_addr</name> <operator pos:start="2373:30" pos:end="2373:31">&amp;&amp;</operator> <call pos:start="2373:33" pos:end="2373:70"><name pos:start="2373:33" pos:end="2373:50">copy_to_user_fdset</name><argument_list pos:start="2373:51" pos:end="2373:70">(<argument pos:start="2373:52" pos:end="2373:59"><expr pos:start="2373:52" pos:end="2373:59"><name pos:start="2373:52" pos:end="2373:59">rfd_addr</name></expr></argument>, <argument pos:start="2373:62" pos:end="2373:66"><expr pos:start="2373:62" pos:end="2373:66"><operator pos:start="2373:62" pos:end="2373:62">&amp;</operator><name pos:start="2373:63" pos:end="2373:66">rfds</name></expr></argument>, <argument pos:start="2373:69" pos:end="2373:69"><expr pos:start="2373:69" pos:end="2373:69"><name pos:start="2373:69" pos:end="2373:69">n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2375:21" pos:end="2375:32"><block_content pos:start="2375:21" pos:end="2375:32">

                    <goto pos:start="2375:21" pos:end="2375:32">goto <name pos:start="2375:26" pos:end="2375:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="2377:17" pos:end="2379:32"><if pos:start="2377:17" pos:end="2379:32">if <condition pos:start="2377:20" pos:end="2377:71">(<expr pos:start="2377:21" pos:end="2377:70"><name pos:start="2377:21" pos:end="2377:28">wfd_addr</name> <operator pos:start="2377:30" pos:end="2377:31">&amp;&amp;</operator> <call pos:start="2377:33" pos:end="2377:70"><name pos:start="2377:33" pos:end="2377:50">copy_to_user_fdset</name><argument_list pos:start="2377:51" pos:end="2377:70">(<argument pos:start="2377:52" pos:end="2377:59"><expr pos:start="2377:52" pos:end="2377:59"><name pos:start="2377:52" pos:end="2377:59">wfd_addr</name></expr></argument>, <argument pos:start="2377:62" pos:end="2377:66"><expr pos:start="2377:62" pos:end="2377:66"><operator pos:start="2377:62" pos:end="2377:62">&amp;</operator><name pos:start="2377:63" pos:end="2377:66">wfds</name></expr></argument>, <argument pos:start="2377:69" pos:end="2377:69"><expr pos:start="2377:69" pos:end="2377:69"><name pos:start="2377:69" pos:end="2377:69">n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2379:21" pos:end="2379:32"><block_content pos:start="2379:21" pos:end="2379:32">

                    <goto pos:start="2379:21" pos:end="2379:32">goto <name pos:start="2379:26" pos:end="2379:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="2381:17" pos:end="2383:32"><if pos:start="2381:17" pos:end="2383:32">if <condition pos:start="2381:20" pos:end="2381:71">(<expr pos:start="2381:21" pos:end="2381:70"><name pos:start="2381:21" pos:end="2381:28">efd_addr</name> <operator pos:start="2381:30" pos:end="2381:31">&amp;&amp;</operator> <call pos:start="2381:33" pos:end="2381:70"><name pos:start="2381:33" pos:end="2381:50">copy_to_user_fdset</name><argument_list pos:start="2381:51" pos:end="2381:70">(<argument pos:start="2381:52" pos:end="2381:59"><expr pos:start="2381:52" pos:end="2381:59"><name pos:start="2381:52" pos:end="2381:59">efd_addr</name></expr></argument>, <argument pos:start="2381:62" pos:end="2381:66"><expr pos:start="2381:62" pos:end="2381:66"><operator pos:start="2381:62" pos:end="2381:62">&amp;</operator><name pos:start="2381:63" pos:end="2381:66">efds</name></expr></argument>, <argument pos:start="2381:69" pos:end="2381:69"><expr pos:start="2381:69" pos:end="2381:69"><name pos:start="2381:69" pos:end="2381:69">n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2383:21" pos:end="2383:32"><block_content pos:start="2383:21" pos:end="2383:32">

                    <goto pos:start="2383:21" pos:end="2383:32">goto <name pos:start="2383:26" pos:end="2383:31">efault</name>;</goto></block_content></block></if></if_stmt>



                <if_stmt pos:start="2387:17" pos:end="2389:32"><if pos:start="2387:17" pos:end="2389:32">if <condition pos:start="2387:20" pos:end="2387:69">(<expr pos:start="2387:21" pos:end="2387:68"><name pos:start="2387:21" pos:end="2387:27">ts_addr</name> <operator pos:start="2387:29" pos:end="2387:30">&amp;&amp;</operator> <call pos:start="2387:32" pos:end="2387:68"><name pos:start="2387:32" pos:end="2387:54">host_to_target_timespec</name><argument_list pos:start="2387:55" pos:end="2387:68">(<argument pos:start="2387:56" pos:end="2387:62"><expr pos:start="2387:56" pos:end="2387:62"><name pos:start="2387:56" pos:end="2387:62">ts_addr</name></expr></argument>, <argument pos:start="2387:65" pos:end="2387:67"><expr pos:start="2387:65" pos:end="2387:67"><operator pos:start="2387:65" pos:end="2387:65">&amp;</operator><name pos:start="2387:66" pos:end="2387:67">ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2389:21" pos:end="2389:32"><block_content pos:start="2389:21" pos:end="2389:32">

                    <goto pos:start="2389:21" pos:end="2389:32">goto <name pos:start="2389:26" pos:end="2389:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="2395:9" pos:end="2398:0">break;</break>

<cpp:endif pos:start="2397:1" pos:end="2397:6">#<cpp:directive pos:start="2397:2" pos:end="2397:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2399:5" pos:end="2399:27">case <expr pos:start="2399:10" pos:end="2399:26"><name pos:start="2399:10" pos:end="2399:26">TARGET_NR_symlink</name></expr>:</case>

        <block pos:start="2401:9" pos:end="2421:9">{<block_content pos:start="2403:13" pos:end="2419:36">

            <decl_stmt pos:start="2403:13" pos:end="2403:21"><decl pos:start="2403:13" pos:end="2403:20"><type pos:start="2403:13" pos:end="2403:18"><name pos:start="2403:13" pos:end="2403:16">void</name> <modifier pos:start="2403:18" pos:end="2403:18">*</modifier></type><name pos:start="2403:19" pos:end="2403:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2405:13" pos:end="2405:39"><expr pos:start="2405:13" pos:end="2405:38"><name pos:start="2405:13" pos:end="2405:13">p</name> <operator pos:start="2405:15" pos:end="2405:15">=</operator> <call pos:start="2405:17" pos:end="2405:38"><name pos:start="2405:17" pos:end="2405:32">lock_user_string</name><argument_list pos:start="2405:33" pos:end="2405:38">(<argument pos:start="2405:34" pos:end="2405:37"><expr pos:start="2405:34" pos:end="2405:37"><name pos:start="2405:34" pos:end="2405:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2407:13" pos:end="2407:40"><expr pos:start="2407:13" pos:end="2407:39"><name pos:start="2407:13" pos:end="2407:14">p2</name> <operator pos:start="2407:16" pos:end="2407:16">=</operator> <call pos:start="2407:18" pos:end="2407:39"><name pos:start="2407:18" pos:end="2407:33">lock_user_string</name><argument_list pos:start="2407:34" pos:end="2407:39">(<argument pos:start="2407:35" pos:end="2407:38"><expr pos:start="2407:35" pos:end="2407:38"><name pos:start="2407:35" pos:end="2407:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2409:13" pos:end="2415:48"><if pos:start="2409:13" pos:end="2411:37">if <condition pos:start="2409:16" pos:end="2409:26">(<expr pos:start="2409:17" pos:end="2409:25"><operator pos:start="2409:17" pos:end="2409:17">!</operator><name pos:start="2409:18" pos:end="2409:18">p</name> <operator pos:start="2409:20" pos:end="2409:21">||</operator> <operator pos:start="2409:23" pos:end="2409:23">!</operator><name pos:start="2409:24" pos:end="2409:25">p2</name></expr>)</condition><block type="pseudo" pos:start="2411:17" pos:end="2411:37"><block_content pos:start="2411:17" pos:end="2411:37">

                <expr_stmt pos:start="2411:17" pos:end="2411:37"><expr pos:start="2411:17" pos:end="2411:36"><name pos:start="2411:17" pos:end="2411:19">ret</name> <operator pos:start="2411:21" pos:end="2411:21">=</operator> <operator pos:start="2411:23" pos:end="2411:23">-</operator><name pos:start="2411:24" pos:end="2411:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2413:13" pos:end="2415:48">else<block type="pseudo" pos:start="2415:17" pos:end="2415:48"><block_content pos:start="2415:17" pos:end="2415:48">

                <expr_stmt pos:start="2415:17" pos:end="2415:48"><expr pos:start="2415:17" pos:end="2415:47"><name pos:start="2415:17" pos:end="2415:19">ret</name> <operator pos:start="2415:21" pos:end="2415:21">=</operator> <call pos:start="2415:23" pos:end="2415:47"><name pos:start="2415:23" pos:end="2415:31">get_errno</name><argument_list pos:start="2415:32" pos:end="2415:47">(<argument pos:start="2415:33" pos:end="2415:46"><expr pos:start="2415:33" pos:end="2415:46"><call pos:start="2415:33" pos:end="2415:46"><name pos:start="2415:33" pos:end="2415:39">symlink</name><argument_list pos:start="2415:40" pos:end="2415:46">(<argument pos:start="2415:41" pos:end="2415:41"><expr pos:start="2415:41" pos:end="2415:41"><name pos:start="2415:41" pos:end="2415:41">p</name></expr></argument>, <argument pos:start="2415:44" pos:end="2415:45"><expr pos:start="2415:44" pos:end="2415:45"><name pos:start="2415:44" pos:end="2415:45">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2417:13" pos:end="2417:37"><expr pos:start="2417:13" pos:end="2417:36"><call pos:start="2417:13" pos:end="2417:36"><name pos:start="2417:13" pos:end="2417:23">unlock_user</name><argument_list pos:start="2417:24" pos:end="2417:36">(<argument pos:start="2417:25" pos:end="2417:26"><expr pos:start="2417:25" pos:end="2417:26"><name pos:start="2417:25" pos:end="2417:26">p2</name></expr></argument>, <argument pos:start="2417:29" pos:end="2417:32"><expr pos:start="2417:29" pos:end="2417:32"><name pos:start="2417:29" pos:end="2417:32">arg2</name></expr></argument>, <argument pos:start="2417:35" pos:end="2417:35"><expr pos:start="2417:35" pos:end="2417:35"><literal type="number" pos:start="2417:35" pos:end="2417:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2419:13" pos:end="2419:36"><expr pos:start="2419:13" pos:end="2419:35"><call pos:start="2419:13" pos:end="2419:35"><name pos:start="2419:13" pos:end="2419:23">unlock_user</name><argument_list pos:start="2419:24" pos:end="2419:35">(<argument pos:start="2419:25" pos:end="2419:25"><expr pos:start="2419:25" pos:end="2419:25"><name pos:start="2419:25" pos:end="2419:25">p</name></expr></argument>, <argument pos:start="2419:28" pos:end="2419:31"><expr pos:start="2419:28" pos:end="2419:31"><name pos:start="2419:28" pos:end="2419:31">arg1</name></expr></argument>, <argument pos:start="2419:34" pos:end="2419:34"><expr pos:start="2419:34" pos:end="2419:34"><literal type="number" pos:start="2419:34" pos:end="2419:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2423:9" pos:end="2426:0">break;</break>

<cpp:if pos:start="2425:1" pos:end="2425:59">#<cpp:directive pos:start="2425:2" pos:end="2425:3">if</cpp:directive> <expr pos:start="2425:5" pos:end="2425:59"><call pos:start="2425:5" pos:end="2425:32"><name pos:start="2425:5" pos:end="2425:11">defined</name><argument_list pos:start="2425:12" pos:end="2425:32">(<argument pos:start="2425:13" pos:end="2425:31"><expr pos:start="2425:13" pos:end="2425:31"><name pos:start="2425:13" pos:end="2425:31">TARGET_NR_symlinkat</name></expr></argument>)</argument_list></call> <operator pos:start="2425:34" pos:end="2425:35">&amp;&amp;</operator> <call pos:start="2425:37" pos:end="2425:59"><name pos:start="2425:37" pos:end="2425:43">defined</name><argument_list pos:start="2425:44" pos:end="2425:59">(<argument pos:start="2425:45" pos:end="2425:58"><expr pos:start="2425:45" pos:end="2425:58"><name pos:start="2425:45" pos:end="2425:58">__NR_symlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2427:5" pos:end="2427:29">case <expr pos:start="2427:10" pos:end="2427:28"><name pos:start="2427:10" pos:end="2427:28">TARGET_NR_symlinkat</name></expr>:</case>

        <block pos:start="2429:9" pos:end="2449:9">{<block_content pos:start="2431:13" pos:end="2447:36">

            <decl_stmt pos:start="2431:13" pos:end="2431:21"><decl pos:start="2431:13" pos:end="2431:20"><type pos:start="2431:13" pos:end="2431:18"><name pos:start="2431:13" pos:end="2431:16">void</name> <modifier pos:start="2431:18" pos:end="2431:18">*</modifier></type><name pos:start="2431:19" pos:end="2431:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2433:13" pos:end="2433:40"><expr pos:start="2433:13" pos:end="2433:39"><name pos:start="2433:13" pos:end="2433:13">p</name>  <operator pos:start="2433:16" pos:end="2433:16">=</operator> <call pos:start="2433:18" pos:end="2433:39"><name pos:start="2433:18" pos:end="2433:33">lock_user_string</name><argument_list pos:start="2433:34" pos:end="2433:39">(<argument pos:start="2433:35" pos:end="2433:38"><expr pos:start="2433:35" pos:end="2433:38"><name pos:start="2433:35" pos:end="2433:38">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2435:13" pos:end="2435:40"><expr pos:start="2435:13" pos:end="2435:39"><name pos:start="2435:13" pos:end="2435:14">p2</name> <operator pos:start="2435:16" pos:end="2435:16">=</operator> <call pos:start="2435:18" pos:end="2435:39"><name pos:start="2435:18" pos:end="2435:33">lock_user_string</name><argument_list pos:start="2435:34" pos:end="2435:39">(<argument pos:start="2435:35" pos:end="2435:38"><expr pos:start="2435:35" pos:end="2435:38"><name pos:start="2435:35" pos:end="2435:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2437:13" pos:end="2443:60"><if pos:start="2437:13" pos:end="2439:37">if <condition pos:start="2437:16" pos:end="2437:26">(<expr pos:start="2437:17" pos:end="2437:25"><operator pos:start="2437:17" pos:end="2437:17">!</operator><name pos:start="2437:18" pos:end="2437:18">p</name> <operator pos:start="2437:20" pos:end="2437:21">||</operator> <operator pos:start="2437:23" pos:end="2437:23">!</operator><name pos:start="2437:24" pos:end="2437:25">p2</name></expr>)</condition><block type="pseudo" pos:start="2439:17" pos:end="2439:37"><block_content pos:start="2439:17" pos:end="2439:37">

                <expr_stmt pos:start="2439:17" pos:end="2439:37"><expr pos:start="2439:17" pos:end="2439:36"><name pos:start="2439:17" pos:end="2439:19">ret</name> <operator pos:start="2439:21" pos:end="2439:21">=</operator> <operator pos:start="2439:23" pos:end="2439:23">-</operator><name pos:start="2439:24" pos:end="2439:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2441:13" pos:end="2443:60">else<block type="pseudo" pos:start="2443:17" pos:end="2443:60"><block_content pos:start="2443:17" pos:end="2443:60">

                <expr_stmt pos:start="2443:17" pos:end="2443:60"><expr pos:start="2443:17" pos:end="2443:59"><name pos:start="2443:17" pos:end="2443:19">ret</name> <operator pos:start="2443:21" pos:end="2443:21">=</operator> <call pos:start="2443:23" pos:end="2443:59"><name pos:start="2443:23" pos:end="2443:31">get_errno</name><argument_list pos:start="2443:32" pos:end="2443:59">(<argument pos:start="2443:33" pos:end="2443:58"><expr pos:start="2443:33" pos:end="2443:58"><call pos:start="2443:33" pos:end="2443:58"><name pos:start="2443:33" pos:end="2443:45">sys_symlinkat</name><argument_list pos:start="2443:46" pos:end="2443:58">(<argument pos:start="2443:47" pos:end="2443:47"><expr pos:start="2443:47" pos:end="2443:47"><name pos:start="2443:47" pos:end="2443:47">p</name></expr></argument>, <argument pos:start="2443:50" pos:end="2443:53"><expr pos:start="2443:50" pos:end="2443:53"><name pos:start="2443:50" pos:end="2443:53">arg2</name></expr></argument>, <argument pos:start="2443:56" pos:end="2443:57"><expr pos:start="2443:56" pos:end="2443:57"><name pos:start="2443:56" pos:end="2443:57">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2445:13" pos:end="2445:37"><expr pos:start="2445:13" pos:end="2445:36"><call pos:start="2445:13" pos:end="2445:36"><name pos:start="2445:13" pos:end="2445:23">unlock_user</name><argument_list pos:start="2445:24" pos:end="2445:36">(<argument pos:start="2445:25" pos:end="2445:26"><expr pos:start="2445:25" pos:end="2445:26"><name pos:start="2445:25" pos:end="2445:26">p2</name></expr></argument>, <argument pos:start="2445:29" pos:end="2445:32"><expr pos:start="2445:29" pos:end="2445:32"><name pos:start="2445:29" pos:end="2445:32">arg3</name></expr></argument>, <argument pos:start="2445:35" pos:end="2445:35"><expr pos:start="2445:35" pos:end="2445:35"><literal type="number" pos:start="2445:35" pos:end="2445:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2447:13" pos:end="2447:36"><expr pos:start="2447:13" pos:end="2447:35"><call pos:start="2447:13" pos:end="2447:35"><name pos:start="2447:13" pos:end="2447:23">unlock_user</name><argument_list pos:start="2447:24" pos:end="2447:35">(<argument pos:start="2447:25" pos:end="2447:25"><expr pos:start="2447:25" pos:end="2447:25"><name pos:start="2447:25" pos:end="2447:25">p</name></expr></argument>, <argument pos:start="2447:28" pos:end="2447:31"><expr pos:start="2447:28" pos:end="2447:31"><name pos:start="2447:28" pos:end="2447:31">arg1</name></expr></argument>, <argument pos:start="2447:34" pos:end="2447:34"><expr pos:start="2447:34" pos:end="2447:34"><literal type="number" pos:start="2447:34" pos:end="2447:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2451:9" pos:end="2456:0">break;</break>

<cpp:endif pos:start="2453:1" pos:end="2453:6">#<cpp:directive pos:start="2453:2" pos:end="2453:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2455:1" pos:end="2455:25">#<cpp:directive pos:start="2455:2" pos:end="2455:6">ifdef</cpp:directive> <name pos:start="2455:8" pos:end="2455:25">TARGET_NR_oldlstat</name></cpp:ifdef>

    <case pos:start="2457:5" pos:end="2457:28">case <expr pos:start="2457:10" pos:end="2457:27"><name pos:start="2457:10" pos:end="2457:27">TARGET_NR_oldlstat</name></expr>:</case>

        <goto pos:start="2459:9" pos:end="2462:0">goto <name pos:start="2459:14" pos:end="2459:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2461:1" pos:end="2461:6">#<cpp:directive pos:start="2461:2" pos:end="2461:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2463:5" pos:end="2463:28">case <expr pos:start="2463:10" pos:end="2463:27"><name pos:start="2463:10" pos:end="2463:27">TARGET_NR_readlink</name></expr>:</case>

        <block pos:start="2465:9" pos:end="2501:9">{<block_content pos:start="2467:13" pos:end="2499:36">

            <decl_stmt pos:start="2467:13" pos:end="2467:28"><decl pos:start="2467:13" pos:end="2467:20"><type pos:start="2467:13" pos:end="2467:18"><name pos:start="2467:13" pos:end="2467:16">void</name> <modifier pos:start="2467:18" pos:end="2467:18">*</modifier></type><name pos:start="2467:19" pos:end="2467:20">p2</name></decl>, <decl pos:start="2467:23" pos:end="2467:27"><type ref="prev" pos:start="2467:13" pos:end="2467:18"><modifier pos:start="2467:23" pos:end="2467:23">*</modifier></type><name pos:start="2467:24" pos:end="2467:27">temp</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2469:13" pos:end="2469:39"><expr pos:start="2469:13" pos:end="2469:38"><name pos:start="2469:13" pos:end="2469:13">p</name> <operator pos:start="2469:15" pos:end="2469:15">=</operator> <call pos:start="2469:17" pos:end="2469:38"><name pos:start="2469:17" pos:end="2469:32">lock_user_string</name><argument_list pos:start="2469:33" pos:end="2469:38">(<argument pos:start="2469:34" pos:end="2469:37"><expr pos:start="2469:34" pos:end="2469:37"><name pos:start="2469:34" pos:end="2469:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2471:13" pos:end="2471:56"><expr pos:start="2471:13" pos:end="2471:55"><name pos:start="2471:13" pos:end="2471:14">p2</name> <operator pos:start="2471:16" pos:end="2471:16">=</operator> <call pos:start="2471:18" pos:end="2471:55"><name pos:start="2471:18" pos:end="2471:26">lock_user</name><argument_list pos:start="2471:27" pos:end="2471:55">(<argument pos:start="2471:28" pos:end="2471:39"><expr pos:start="2471:28" pos:end="2471:39"><name pos:start="2471:28" pos:end="2471:39">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2471:42" pos:end="2471:45"><expr pos:start="2471:42" pos:end="2471:45"><name pos:start="2471:42" pos:end="2471:45">arg2</name></expr></argument>, <argument pos:start="2471:48" pos:end="2471:51"><expr pos:start="2471:48" pos:end="2471:51"><name pos:start="2471:48" pos:end="2471:51">arg3</name></expr></argument>, <argument pos:start="2471:54" pos:end="2471:54"><expr pos:start="2471:54" pos:end="2471:54"><literal type="number" pos:start="2471:54" pos:end="2471:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2473:13" pos:end="2495:13"><if pos:start="2473:13" pos:end="2475:37">if <condition pos:start="2473:16" pos:end="2473:26">(<expr pos:start="2473:17" pos:end="2473:25"><operator pos:start="2473:17" pos:end="2473:17">!</operator><name pos:start="2473:18" pos:end="2473:18">p</name> <operator pos:start="2473:20" pos:end="2473:21">||</operator> <operator pos:start="2473:23" pos:end="2473:23">!</operator><name pos:start="2473:24" pos:end="2473:25">p2</name></expr>)</condition><block type="pseudo" pos:start="2475:17" pos:end="2475:37"><block_content pos:start="2475:17" pos:end="2475:37">

                <expr_stmt pos:start="2475:17" pos:end="2475:37"><expr pos:start="2475:17" pos:end="2475:36"><name pos:start="2475:17" pos:end="2475:19">ret</name> <operator pos:start="2475:21" pos:end="2475:21">=</operator> <operator pos:start="2475:23" pos:end="2475:23">-</operator><name pos:start="2475:24" pos:end="2475:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2477:13" pos:end="2495:13">else <block pos:start="2477:18" pos:end="2495:13">{<block_content pos:start="2479:17" pos:end="2493:65">

                <if_stmt pos:start="2479:17" pos:end="2493:65"><if pos:start="2479:17" pos:end="2489:21">if <condition pos:start="2479:20" pos:end="2479:72">(<expr pos:start="2479:21" pos:end="2479:71"><call pos:start="2479:21" pos:end="2479:66"><name pos:start="2479:21" pos:end="2479:27">strncmp</name><argument_list pos:start="2479:28" pos:end="2479:66">(<argument pos:start="2479:29" pos:end="2479:43"><expr pos:start="2479:29" pos:end="2479:43"><operator pos:start="2479:29" pos:end="2479:29">(</operator><specifier pos:start="2479:30" pos:end="2479:34">const</specifier> <name pos:start="2479:36" pos:end="2479:39">char</name> <operator pos:start="2479:41" pos:end="2479:41">*</operator><operator pos:start="2479:42" pos:end="2479:42">)</operator><name pos:start="2479:43" pos:end="2479:43">p</name></expr></argument>, <argument pos:start="2479:46" pos:end="2479:61"><expr pos:start="2479:46" pos:end="2479:61"><literal type="string" pos:start="2479:46" pos:end="2479:61">"/proc/self/exe"</literal></expr></argument>, <argument pos:start="2479:64" pos:end="2479:65"><expr pos:start="2479:64" pos:end="2479:65"><literal type="number" pos:start="2479:64" pos:end="2479:65">14</literal></expr></argument>)</argument_list></call> <operator pos:start="2479:68" pos:end="2479:69">==</operator> <literal type="number" pos:start="2479:71" pos:end="2479:71">0</literal></expr>)</condition> <block pos:start="2479:74" pos:end="2489:21">{<block_content pos:start="2481:21" pos:end="2487:59">

                    <decl_stmt pos:start="2481:21" pos:end="2481:40"><decl pos:start="2481:21" pos:end="2481:39"><type pos:start="2481:21" pos:end="2481:24"><name pos:start="2481:21" pos:end="2481:24">char</name></type> <name pos:start="2481:26" pos:end="2481:39"><name pos:start="2481:26" pos:end="2481:29">real</name><index pos:start="2481:30" pos:end="2481:39">[<expr pos:start="2481:31" pos:end="2481:38"><name pos:start="2481:31" pos:end="2481:38">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

                    <expr_stmt pos:start="2483:21" pos:end="2483:52"><expr pos:start="2483:21" pos:end="2483:51"><name pos:start="2483:21" pos:end="2483:24">temp</name> <operator pos:start="2483:26" pos:end="2483:26">=</operator> <call pos:start="2483:28" pos:end="2483:51"><name pos:start="2483:28" pos:end="2483:35">realpath</name><argument_list pos:start="2483:36" pos:end="2483:51">(<argument pos:start="2483:37" pos:end="2483:45"><expr pos:start="2483:37" pos:end="2483:45"><name pos:start="2483:37" pos:end="2483:45">exec_path</name></expr></argument>,<argument pos:start="2483:47" pos:end="2483:50"><expr pos:start="2483:47" pos:end="2483:50"><name pos:start="2483:47" pos:end="2483:50">real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2485:21" pos:end="2485:71"><expr pos:start="2485:21" pos:end="2485:69"><name pos:start="2485:21" pos:end="2485:23">ret</name> <operator pos:start="2485:25" pos:end="2485:25">=</operator> <ternary pos:start="2485:27" pos:end="2485:69"><condition pos:start="2485:27" pos:end="2485:40"><expr pos:start="2485:27" pos:end="2485:38"><operator pos:start="2485:27" pos:end="2485:27">(</operator><name pos:start="2485:28" pos:end="2485:31">temp</name><operator pos:start="2485:32" pos:end="2485:33">==</operator><name pos:start="2485:34" pos:end="2485:37">NULL</name><operator pos:start="2485:38" pos:end="2485:38">)</operator></expr> ?</condition><then pos:start="2485:42" pos:end="2485:54"> <expr pos:start="2485:42" pos:end="2485:54"><call pos:start="2485:42" pos:end="2485:54"><name pos:start="2485:42" pos:end="2485:50">get_errno</name><argument_list pos:start="2485:51" pos:end="2485:54">(<argument pos:start="2485:52" pos:end="2485:53"><expr pos:start="2485:52" pos:end="2485:53"><operator pos:start="2485:52" pos:end="2485:52">-</operator><literal type="number" pos:start="2485:53" pos:end="2485:53">1</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="2485:56" pos:end="2485:69">: <expr pos:start="2485:58" pos:end="2485:69"><call pos:start="2485:58" pos:end="2485:69"><name pos:start="2485:58" pos:end="2485:63">strlen</name><argument_list pos:start="2485:64" pos:end="2485:69">(<argument pos:start="2485:65" pos:end="2485:68"><expr pos:start="2485:65" pos:end="2485:68"><name pos:start="2485:65" pos:end="2485:68">real</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>

                    <expr_stmt pos:start="2487:21" pos:end="2487:59"><expr pos:start="2487:21" pos:end="2487:58"><call pos:start="2487:21" pos:end="2487:58"><name pos:start="2487:21" pos:end="2487:28">snprintf</name><argument_list pos:start="2487:29" pos:end="2487:58">(<argument pos:start="2487:30" pos:end="2487:39"><expr pos:start="2487:30" pos:end="2487:39"><operator pos:start="2487:30" pos:end="2487:30">(</operator><name pos:start="2487:31" pos:end="2487:34">char</name> <operator pos:start="2487:36" pos:end="2487:36">*</operator><operator pos:start="2487:37" pos:end="2487:37">)</operator><name pos:start="2487:38" pos:end="2487:39">p2</name></expr></argument>, <argument pos:start="2487:42" pos:end="2487:45"><expr pos:start="2487:42" pos:end="2487:45"><name pos:start="2487:42" pos:end="2487:45">arg3</name></expr></argument>, <argument pos:start="2487:48" pos:end="2487:51"><expr pos:start="2487:48" pos:end="2487:51"><literal type="string" pos:start="2487:48" pos:end="2487:51">"%s"</literal></expr></argument>, <argument pos:start="2487:54" pos:end="2487:57"><expr pos:start="2487:54" pos:end="2487:57"><name pos:start="2487:54" pos:end="2487:57">real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if>

                <else pos:start="2491:17" pos:end="2493:65">else<block type="pseudo" pos:start="2493:21" pos:end="2493:65"><block_content pos:start="2493:21" pos:end="2493:65">

                    <expr_stmt pos:start="2493:21" pos:end="2493:65"><expr pos:start="2493:21" pos:end="2493:64"><name pos:start="2493:21" pos:end="2493:23">ret</name> <operator pos:start="2493:25" pos:end="2493:25">=</operator> <call pos:start="2493:27" pos:end="2493:64"><name pos:start="2493:27" pos:end="2493:35">get_errno</name><argument_list pos:start="2493:36" pos:end="2493:64">(<argument pos:start="2493:37" pos:end="2493:63"><expr pos:start="2493:37" pos:end="2493:63"><call pos:start="2493:37" pos:end="2493:63"><name pos:start="2493:37" pos:end="2493:44">readlink</name><argument_list pos:start="2493:45" pos:end="2493:63">(<argument pos:start="2493:46" pos:end="2493:52"><expr pos:start="2493:46" pos:end="2493:52"><call pos:start="2493:46" pos:end="2493:52"><name pos:start="2493:46" pos:end="2493:49">path</name><argument_list pos:start="2493:50" pos:end="2493:52">(<argument pos:start="2493:51" pos:end="2493:51"><expr pos:start="2493:51" pos:end="2493:51"><name pos:start="2493:51" pos:end="2493:51">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2493:55" pos:end="2493:56"><expr pos:start="2493:55" pos:end="2493:56"><name pos:start="2493:55" pos:end="2493:56">p2</name></expr></argument>, <argument pos:start="2493:59" pos:end="2493:62"><expr pos:start="2493:59" pos:end="2493:62"><name pos:start="2493:59" pos:end="2493:62">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="2497:13" pos:end="2497:39"><expr pos:start="2497:13" pos:end="2497:38"><call pos:start="2497:13" pos:end="2497:38"><name pos:start="2497:13" pos:end="2497:23">unlock_user</name><argument_list pos:start="2497:24" pos:end="2497:38">(<argument pos:start="2497:25" pos:end="2497:26"><expr pos:start="2497:25" pos:end="2497:26"><name pos:start="2497:25" pos:end="2497:26">p2</name></expr></argument>, <argument pos:start="2497:29" pos:end="2497:32"><expr pos:start="2497:29" pos:end="2497:32"><name pos:start="2497:29" pos:end="2497:32">arg2</name></expr></argument>, <argument pos:start="2497:35" pos:end="2497:37"><expr pos:start="2497:35" pos:end="2497:37"><name pos:start="2497:35" pos:end="2497:37">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2499:13" pos:end="2499:36"><expr pos:start="2499:13" pos:end="2499:35"><call pos:start="2499:13" pos:end="2499:35"><name pos:start="2499:13" pos:end="2499:23">unlock_user</name><argument_list pos:start="2499:24" pos:end="2499:35">(<argument pos:start="2499:25" pos:end="2499:25"><expr pos:start="2499:25" pos:end="2499:25"><name pos:start="2499:25" pos:end="2499:25">p</name></expr></argument>, <argument pos:start="2499:28" pos:end="2499:31"><expr pos:start="2499:28" pos:end="2499:31"><name pos:start="2499:28" pos:end="2499:31">arg1</name></expr></argument>, <argument pos:start="2499:34" pos:end="2499:34"><expr pos:start="2499:34" pos:end="2499:34"><literal type="number" pos:start="2499:34" pos:end="2499:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2503:9" pos:end="2506:0">break;</break>

<cpp:if pos:start="2505:1" pos:end="2505:61">#<cpp:directive pos:start="2505:2" pos:end="2505:3">if</cpp:directive> <expr pos:start="2505:5" pos:end="2505:61"><call pos:start="2505:5" pos:end="2505:33"><name pos:start="2505:5" pos:end="2505:11">defined</name><argument_list pos:start="2505:12" pos:end="2505:33">(<argument pos:start="2505:13" pos:end="2505:32"><expr pos:start="2505:13" pos:end="2505:32"><name pos:start="2505:13" pos:end="2505:32">TARGET_NR_readlinkat</name></expr></argument>)</argument_list></call> <operator pos:start="2505:35" pos:end="2505:36">&amp;&amp;</operator> <call pos:start="2505:38" pos:end="2505:61"><name pos:start="2505:38" pos:end="2505:44">defined</name><argument_list pos:start="2505:45" pos:end="2505:61">(<argument pos:start="2505:46" pos:end="2505:60"><expr pos:start="2505:46" pos:end="2505:60"><name pos:start="2505:46" pos:end="2505:60">__NR_readlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2507:5" pos:end="2507:30">case <expr pos:start="2507:10" pos:end="2507:29"><name pos:start="2507:10" pos:end="2507:29">TARGET_NR_readlinkat</name></expr>:</case>

        <block pos:start="2509:9" pos:end="2529:9">{<block_content pos:start="2511:13" pos:end="2527:36">

            <decl_stmt pos:start="2511:13" pos:end="2511:21"><decl pos:start="2511:13" pos:end="2511:20"><type pos:start="2511:13" pos:end="2511:18"><name pos:start="2511:13" pos:end="2511:16">void</name> <modifier pos:start="2511:18" pos:end="2511:18">*</modifier></type><name pos:start="2511:19" pos:end="2511:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2513:13" pos:end="2513:40"><expr pos:start="2513:13" pos:end="2513:39"><name pos:start="2513:13" pos:end="2513:13">p</name>  <operator pos:start="2513:16" pos:end="2513:16">=</operator> <call pos:start="2513:18" pos:end="2513:39"><name pos:start="2513:18" pos:end="2513:33">lock_user_string</name><argument_list pos:start="2513:34" pos:end="2513:39">(<argument pos:start="2513:35" pos:end="2513:38"><expr pos:start="2513:35" pos:end="2513:38"><name pos:start="2513:35" pos:end="2513:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2515:13" pos:end="2515:56"><expr pos:start="2515:13" pos:end="2515:55"><name pos:start="2515:13" pos:end="2515:14">p2</name> <operator pos:start="2515:16" pos:end="2515:16">=</operator> <call pos:start="2515:18" pos:end="2515:55"><name pos:start="2515:18" pos:end="2515:26">lock_user</name><argument_list pos:start="2515:27" pos:end="2515:55">(<argument pos:start="2515:28" pos:end="2515:39"><expr pos:start="2515:28" pos:end="2515:39"><name pos:start="2515:28" pos:end="2515:39">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2515:42" pos:end="2515:45"><expr pos:start="2515:42" pos:end="2515:45"><name pos:start="2515:42" pos:end="2515:45">arg3</name></expr></argument>, <argument pos:start="2515:48" pos:end="2515:51"><expr pos:start="2515:48" pos:end="2515:51"><name pos:start="2515:48" pos:end="2515:51">arg4</name></expr></argument>, <argument pos:start="2515:54" pos:end="2515:54"><expr pos:start="2515:54" pos:end="2515:54"><literal type="number" pos:start="2515:54" pos:end="2515:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2517:13" pos:end="2523:73"><if pos:start="2517:13" pos:end="2519:37">if <condition pos:start="2517:16" pos:end="2517:26">(<expr pos:start="2517:17" pos:end="2517:25"><operator pos:start="2517:17" pos:end="2517:17">!</operator><name pos:start="2517:18" pos:end="2517:18">p</name> <operator pos:start="2517:20" pos:end="2517:21">||</operator> <operator pos:start="2517:23" pos:end="2517:23">!</operator><name pos:start="2517:24" pos:end="2517:25">p2</name></expr>)</condition><block type="pseudo" pos:start="2519:17" pos:end="2519:37"><block_content pos:start="2519:17" pos:end="2519:37">

        	<expr_stmt pos:start="2519:17" pos:end="2519:37"><expr pos:start="2519:17" pos:end="2519:36"><name pos:start="2519:17" pos:end="2519:19">ret</name> <operator pos:start="2519:21" pos:end="2519:21">=</operator> <operator pos:start="2519:23" pos:end="2519:23">-</operator><name pos:start="2519:24" pos:end="2519:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2521:13" pos:end="2523:73">else<block type="pseudo" pos:start="2523:17" pos:end="2523:73"><block_content pos:start="2523:17" pos:end="2523:73">

                <expr_stmt pos:start="2523:17" pos:end="2523:73"><expr pos:start="2523:17" pos:end="2523:72"><name pos:start="2523:17" pos:end="2523:19">ret</name> <operator pos:start="2523:21" pos:end="2523:21">=</operator> <call pos:start="2523:23" pos:end="2523:72"><name pos:start="2523:23" pos:end="2523:31">get_errno</name><argument_list pos:start="2523:32" pos:end="2523:72">(<argument pos:start="2523:33" pos:end="2523:71"><expr pos:start="2523:33" pos:end="2523:71"><call pos:start="2523:33" pos:end="2523:71"><name pos:start="2523:33" pos:end="2523:46">sys_readlinkat</name><argument_list pos:start="2523:47" pos:end="2523:71">(<argument pos:start="2523:48" pos:end="2523:51"><expr pos:start="2523:48" pos:end="2523:51"><name pos:start="2523:48" pos:end="2523:51">arg1</name></expr></argument>, <argument pos:start="2523:54" pos:end="2523:60"><expr pos:start="2523:54" pos:end="2523:60"><call pos:start="2523:54" pos:end="2523:60"><name pos:start="2523:54" pos:end="2523:57">path</name><argument_list pos:start="2523:58" pos:end="2523:60">(<argument pos:start="2523:59" pos:end="2523:59"><expr pos:start="2523:59" pos:end="2523:59"><name pos:start="2523:59" pos:end="2523:59">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2523:63" pos:end="2523:64"><expr pos:start="2523:63" pos:end="2523:64"><name pos:start="2523:63" pos:end="2523:64">p2</name></expr></argument>, <argument pos:start="2523:67" pos:end="2523:70"><expr pos:start="2523:67" pos:end="2523:70"><name pos:start="2523:67" pos:end="2523:70">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2525:13" pos:end="2525:39"><expr pos:start="2525:13" pos:end="2525:38"><call pos:start="2525:13" pos:end="2525:38"><name pos:start="2525:13" pos:end="2525:23">unlock_user</name><argument_list pos:start="2525:24" pos:end="2525:38">(<argument pos:start="2525:25" pos:end="2525:26"><expr pos:start="2525:25" pos:end="2525:26"><name pos:start="2525:25" pos:end="2525:26">p2</name></expr></argument>, <argument pos:start="2525:29" pos:end="2525:32"><expr pos:start="2525:29" pos:end="2525:32"><name pos:start="2525:29" pos:end="2525:32">arg3</name></expr></argument>, <argument pos:start="2525:35" pos:end="2525:37"><expr pos:start="2525:35" pos:end="2525:37"><name pos:start="2525:35" pos:end="2525:37">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2527:13" pos:end="2527:36"><expr pos:start="2527:13" pos:end="2527:35"><call pos:start="2527:13" pos:end="2527:35"><name pos:start="2527:13" pos:end="2527:23">unlock_user</name><argument_list pos:start="2527:24" pos:end="2527:35">(<argument pos:start="2527:25" pos:end="2527:25"><expr pos:start="2527:25" pos:end="2527:25"><name pos:start="2527:25" pos:end="2527:25">p</name></expr></argument>, <argument pos:start="2527:28" pos:end="2527:31"><expr pos:start="2527:28" pos:end="2527:31"><name pos:start="2527:28" pos:end="2527:31">arg2</name></expr></argument>, <argument pos:start="2527:34" pos:end="2527:34"><expr pos:start="2527:34" pos:end="2527:34"><literal type="number" pos:start="2527:34" pos:end="2527:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2531:9" pos:end="2536:0">break;</break>

<cpp:endif pos:start="2533:1" pos:end="2533:6">#<cpp:directive pos:start="2533:2" pos:end="2533:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2535:1" pos:end="2535:23">#<cpp:directive pos:start="2535:2" pos:end="2535:6">ifdef</cpp:directive> <name pos:start="2535:8" pos:end="2535:23">TARGET_NR_uselib</name></cpp:ifdef>

    <case pos:start="2537:5" pos:end="2537:26">case <expr pos:start="2537:10" pos:end="2537:25"><name pos:start="2537:10" pos:end="2537:25">TARGET_NR_uselib</name></expr>:</case>

        <goto pos:start="2539:9" pos:end="2544:0">goto <name pos:start="2539:14" pos:end="2539:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2541:1" pos:end="2541:6">#<cpp:directive pos:start="2541:2" pos:end="2541:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2543:1" pos:end="2543:23">#<cpp:directive pos:start="2543:2" pos:end="2543:6">ifdef</cpp:directive> <name pos:start="2543:8" pos:end="2543:23">TARGET_NR_swapon</name></cpp:ifdef>

    <case pos:start="2545:5" pos:end="2545:26">case <expr pos:start="2545:10" pos:end="2545:25"><name pos:start="2545:10" pos:end="2545:25">TARGET_NR_swapon</name></expr>:</case>

        <if_stmt pos:start="2547:9" pos:end="2549:24"><if pos:start="2547:9" pos:end="2549:24">if <condition pos:start="2547:12" pos:end="2547:42">(<expr pos:start="2547:13" pos:end="2547:41"><operator pos:start="2547:13" pos:end="2547:13">!</operator><operator pos:start="2547:14" pos:end="2547:14">(</operator><name pos:start="2547:15" pos:end="2547:15">p</name> <operator pos:start="2547:17" pos:end="2547:17">=</operator> <call pos:start="2547:19" pos:end="2547:40"><name pos:start="2547:19" pos:end="2547:34">lock_user_string</name><argument_list pos:start="2547:35" pos:end="2547:40">(<argument pos:start="2547:36" pos:end="2547:39"><expr pos:start="2547:36" pos:end="2547:39"><name pos:start="2547:36" pos:end="2547:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2547:41" pos:end="2547:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2549:13" pos:end="2549:24"><block_content pos:start="2549:13" pos:end="2549:24">

            <goto pos:start="2549:13" pos:end="2549:24">goto <name pos:start="2549:18" pos:end="2549:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2551:9" pos:end="2551:41"><expr pos:start="2551:9" pos:end="2551:40"><name pos:start="2551:9" pos:end="2551:11">ret</name> <operator pos:start="2551:13" pos:end="2551:13">=</operator> <call pos:start="2551:15" pos:end="2551:40"><name pos:start="2551:15" pos:end="2551:23">get_errno</name><argument_list pos:start="2551:24" pos:end="2551:40">(<argument pos:start="2551:25" pos:end="2551:39"><expr pos:start="2551:25" pos:end="2551:39"><call pos:start="2551:25" pos:end="2551:39"><name pos:start="2551:25" pos:end="2551:30">swapon</name><argument_list pos:start="2551:31" pos:end="2551:39">(<argument pos:start="2551:32" pos:end="2551:32"><expr pos:start="2551:32" pos:end="2551:32"><name pos:start="2551:32" pos:end="2551:32">p</name></expr></argument>, <argument pos:start="2551:35" pos:end="2551:38"><expr pos:start="2551:35" pos:end="2551:38"><name pos:start="2551:35" pos:end="2551:38">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2553:9" pos:end="2553:32"><expr pos:start="2553:9" pos:end="2553:31"><call pos:start="2553:9" pos:end="2553:31"><name pos:start="2553:9" pos:end="2553:19">unlock_user</name><argument_list pos:start="2553:20" pos:end="2553:31">(<argument pos:start="2553:21" pos:end="2553:21"><expr pos:start="2553:21" pos:end="2553:21"><name pos:start="2553:21" pos:end="2553:21">p</name></expr></argument>, <argument pos:start="2553:24" pos:end="2553:27"><expr pos:start="2553:24" pos:end="2553:27"><name pos:start="2553:24" pos:end="2553:27">arg1</name></expr></argument>, <argument pos:start="2553:30" pos:end="2553:30"><expr pos:start="2553:30" pos:end="2553:30"><literal type="number" pos:start="2553:30" pos:end="2553:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2555:9" pos:end="2558:0">break;</break>

<cpp:endif pos:start="2557:1" pos:end="2557:6">#<cpp:directive pos:start="2557:2" pos:end="2557:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2559:5" pos:end="2559:26">case <expr pos:start="2559:10" pos:end="2559:25"><name pos:start="2559:10" pos:end="2559:25">TARGET_NR_reboot</name></expr>:</case>

        <if_stmt pos:start="2561:9" pos:end="2563:24"><if pos:start="2561:9" pos:end="2563:24">if <condition pos:start="2561:12" pos:end="2561:42">(<expr pos:start="2561:13" pos:end="2561:41"><operator pos:start="2561:13" pos:end="2561:13">!</operator><operator pos:start="2561:14" pos:end="2561:14">(</operator><name pos:start="2561:15" pos:end="2561:15">p</name> <operator pos:start="2561:17" pos:end="2561:17">=</operator> <call pos:start="2561:19" pos:end="2561:40"><name pos:start="2561:19" pos:end="2561:34">lock_user_string</name><argument_list pos:start="2561:35" pos:end="2561:40">(<argument pos:start="2561:36" pos:end="2561:39"><expr pos:start="2561:36" pos:end="2561:39"><name pos:start="2561:36" pos:end="2561:39">arg4</name></expr></argument>)</argument_list></call><operator pos:start="2561:41" pos:end="2561:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2563:13" pos:end="2563:24"><block_content pos:start="2563:13" pos:end="2563:24">

            <goto pos:start="2563:13" pos:end="2563:24">goto <name pos:start="2563:18" pos:end="2563:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2565:9" pos:end="2565:42"><expr pos:start="2565:9" pos:end="2565:41"><name pos:start="2565:9" pos:end="2565:11">ret</name> <operator pos:start="2565:13" pos:end="2565:13">=</operator> <call pos:start="2565:15" pos:end="2565:41"><name pos:start="2565:15" pos:end="2565:20">reboot</name><argument_list pos:start="2565:21" pos:end="2565:41">(<argument pos:start="2565:22" pos:end="2565:25"><expr pos:start="2565:22" pos:end="2565:25"><name pos:start="2565:22" pos:end="2565:25">arg1</name></expr></argument>, <argument pos:start="2565:28" pos:end="2565:31"><expr pos:start="2565:28" pos:end="2565:31"><name pos:start="2565:28" pos:end="2565:31">arg2</name></expr></argument>, <argument pos:start="2565:34" pos:end="2565:37"><expr pos:start="2565:34" pos:end="2565:37"><name pos:start="2565:34" pos:end="2565:37">arg3</name></expr></argument>, <argument pos:start="2565:40" pos:end="2565:40"><expr pos:start="2565:40" pos:end="2565:40"><name pos:start="2565:40" pos:end="2565:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2567:9" pos:end="2567:32"><expr pos:start="2567:9" pos:end="2567:31"><call pos:start="2567:9" pos:end="2567:31"><name pos:start="2567:9" pos:end="2567:19">unlock_user</name><argument_list pos:start="2567:20" pos:end="2567:31">(<argument pos:start="2567:21" pos:end="2567:21"><expr pos:start="2567:21" pos:end="2567:21"><name pos:start="2567:21" pos:end="2567:21">p</name></expr></argument>, <argument pos:start="2567:24" pos:end="2567:27"><expr pos:start="2567:24" pos:end="2567:27"><name pos:start="2567:24" pos:end="2567:27">arg4</name></expr></argument>, <argument pos:start="2567:30" pos:end="2567:30"><expr pos:start="2567:30" pos:end="2567:30"><literal type="number" pos:start="2567:30" pos:end="2567:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2569:9" pos:end="2572:0">break;</break>

<cpp:ifdef pos:start="2571:1" pos:end="2571:24">#<cpp:directive pos:start="2571:2" pos:end="2571:6">ifdef</cpp:directive> <name pos:start="2571:8" pos:end="2571:24">TARGET_NR_readdir</name></cpp:ifdef>

    <case pos:start="2573:5" pos:end="2573:27">case <expr pos:start="2573:10" pos:end="2573:26"><name pos:start="2573:10" pos:end="2573:26">TARGET_NR_readdir</name></expr>:</case>

        <goto pos:start="2575:9" pos:end="2580:0">goto <name pos:start="2575:14" pos:end="2575:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2577:1" pos:end="2577:6">#<cpp:directive pos:start="2577:2" pos:end="2577:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2579:1" pos:end="2579:21">#<cpp:directive pos:start="2579:2" pos:end="2579:6">ifdef</cpp:directive> <name pos:start="2579:8" pos:end="2579:21">TARGET_NR_mmap</name></cpp:ifdef>

    <case pos:start="2581:5" pos:end="2588:0">case <expr pos:start="2581:10" pos:end="2581:23"><name pos:start="2581:10" pos:end="2581:23">TARGET_NR_mmap</name></expr>:</case>

<cpp:if pos:start="2583:1" pos:end="2587:28">#<cpp:directive pos:start="2583:2" pos:end="2583:3">if</cpp:directive> <expr pos:start="2583:5" pos:end="2587:28"><operator pos:start="2583:5" pos:end="2583:5">(</operator><call pos:start="2583:6" pos:end="2583:25"><name pos:start="2583:6" pos:end="2583:12">defined</name><argument_list pos:start="2583:13" pos:end="2583:25">(<argument pos:start="2583:14" pos:end="2583:24"><expr pos:start="2583:14" pos:end="2583:24"><name pos:start="2583:14" pos:end="2583:24">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="2583:27" pos:end="2583:28">&amp;&amp;</operator> <call pos:start="2583:30" pos:end="2583:50"><name pos:start="2583:30" pos:end="2583:36">defined</name><argument_list pos:start="2583:37" pos:end="2583:50">(<argument pos:start="2583:38" pos:end="2583:49"><expr pos:start="2583:38" pos:end="2583:49"><name pos:start="2583:38" pos:end="2583:49">TARGET_ABI32</name></expr></argument>)</argument_list></call><operator pos:start="2583:51" pos:end="2583:51">)</operator> <operator pos:start="2583:53" pos:end="2583:54">||</operator> <call pos:start="2583:56" pos:end="2583:74"><name pos:start="2583:56" pos:end="2583:62">defined</name><argument_list pos:start="2583:63" pos:end="2583:74">(<argument pos:start="2583:64" pos:end="2583:73"><expr pos:start="2583:64" pos:end="2583:73"><name pos:start="2583:64" pos:end="2583:73">TARGET_ARM</name></expr></argument>)</argument_list></call> <operator pos:start="2583:76" pos:end="2583:77">||</operator> \

    <call pos:start="2585:5" pos:end="2585:24"><name pos:start="2585:5" pos:end="2585:11">defined</name><argument_list pos:start="2585:12" pos:end="2585:24">(<argument pos:start="2585:13" pos:end="2585:23"><expr pos:start="2585:13" pos:end="2585:23"><name pos:start="2585:13" pos:end="2585:23">TARGET_M68K</name></expr></argument>)</argument_list></call> <operator pos:start="2585:26" pos:end="2585:27">||</operator> <call pos:start="2585:29" pos:end="2585:48"><name pos:start="2585:29" pos:end="2585:35">defined</name><argument_list pos:start="2585:36" pos:end="2585:48">(<argument pos:start="2585:37" pos:end="2585:47"><expr pos:start="2585:37" pos:end="2585:47"><name pos:start="2585:37" pos:end="2585:47">TARGET_CRIS</name></expr></argument>)</argument_list></call> <operator pos:start="2585:50" pos:end="2585:51">||</operator> <call pos:start="2585:53" pos:end="2585:78"><name pos:start="2585:53" pos:end="2585:59">defined</name><argument_list pos:start="2585:60" pos:end="2585:78">(<argument pos:start="2585:61" pos:end="2585:77"><expr pos:start="2585:61" pos:end="2585:77"><name pos:start="2585:61" pos:end="2585:77">TARGET_MICROBLAZE</name></expr></argument>)</argument_list></call> \

    <operator pos:start="2587:5" pos:end="2587:6">||</operator> <call pos:start="2587:8" pos:end="2587:28"><name pos:start="2587:8" pos:end="2587:14">defined</name><argument_list pos:start="2587:15" pos:end="2587:28">(<argument pos:start="2587:16" pos:end="2587:27"><expr pos:start="2587:16" pos:end="2587:27"><name pos:start="2587:16" pos:end="2587:27">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <block pos:start="2589:9" pos:end="2622:0">{<block_content pos:start="2591:13" pos:end="2617:49">

            <decl_stmt pos:start="2591:13" pos:end="2591:25"><decl pos:start="2591:13" pos:end="2591:24"><type pos:start="2591:13" pos:end="2591:23"><name pos:start="2591:13" pos:end="2591:21">abi_ulong</name> <modifier pos:start="2591:23" pos:end="2591:23">*</modifier></type><name pos:start="2591:24" pos:end="2591:24">v</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2593:13" pos:end="2593:45"><decl pos:start="2593:13" pos:end="2593:24"><type pos:start="2593:13" pos:end="2593:21"><name pos:start="2593:13" pos:end="2593:21">abi_ulong</name></type> <name pos:start="2593:23" pos:end="2593:24">v1</name></decl>, <decl pos:start="2593:27" pos:end="2593:28"><type ref="prev" pos:start="2593:13" pos:end="2593:21"/><name pos:start="2593:27" pos:end="2593:28">v2</name></decl>, <decl pos:start="2593:31" pos:end="2593:32"><type ref="prev" pos:start="2593:13" pos:end="2593:21"/><name pos:start="2593:31" pos:end="2593:32">v3</name></decl>, <decl pos:start="2593:35" pos:end="2593:36"><type ref="prev" pos:start="2593:13" pos:end="2593:21"/><name pos:start="2593:35" pos:end="2593:36">v4</name></decl>, <decl pos:start="2593:39" pos:end="2593:40"><type ref="prev" pos:start="2593:13" pos:end="2593:21"/><name pos:start="2593:39" pos:end="2593:40">v5</name></decl>, <decl pos:start="2593:43" pos:end="2593:44"><type ref="prev" pos:start="2593:13" pos:end="2593:21"/><name pos:start="2593:43" pos:end="2593:44">v6</name></decl>;</decl_stmt>

            <if_stmt pos:start="2595:13" pos:end="2597:28"><if pos:start="2595:13" pos:end="2597:28">if <condition pos:start="2595:16" pos:end="2595:78">(<expr pos:start="2595:17" pos:end="2595:77"><operator pos:start="2595:17" pos:end="2595:17">!</operator><operator pos:start="2595:18" pos:end="2595:18">(</operator><name pos:start="2595:19" pos:end="2595:19">v</name> <operator pos:start="2595:21" pos:end="2595:21">=</operator> <call pos:start="2595:23" pos:end="2595:76"><name pos:start="2595:23" pos:end="2595:31">lock_user</name><argument_list pos:start="2595:32" pos:end="2595:76">(<argument pos:start="2595:33" pos:end="2595:43"><expr pos:start="2595:33" pos:end="2595:43"><name pos:start="2595:33" pos:end="2595:43">VERIFY_READ</name></expr></argument>, <argument pos:start="2595:46" pos:end="2595:49"><expr pos:start="2595:46" pos:end="2595:49"><name pos:start="2595:46" pos:end="2595:49">arg1</name></expr></argument>, <argument pos:start="2595:52" pos:end="2595:72"><expr pos:start="2595:52" pos:end="2595:72"><literal type="number" pos:start="2595:52" pos:end="2595:52">6</literal> <operator pos:start="2595:54" pos:end="2595:54">*</operator> <sizeof pos:start="2595:56" pos:end="2595:72">sizeof<argument_list pos:start="2595:62" pos:end="2595:72">(<argument pos:start="2595:63" pos:end="2595:71"><expr pos:start="2595:63" pos:end="2595:71"><name pos:start="2595:63" pos:end="2595:71">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2595:75" pos:end="2595:75"><expr pos:start="2595:75" pos:end="2595:75"><literal type="number" pos:start="2595:75" pos:end="2595:75">1</literal></expr></argument>)</argument_list></call><operator pos:start="2595:77" pos:end="2595:77">)</operator></expr>)</condition><block type="pseudo" pos:start="2597:17" pos:end="2597:28"><block_content pos:start="2597:17" pos:end="2597:28">

                <goto pos:start="2597:17" pos:end="2597:28">goto <name pos:start="2597:22" pos:end="2597:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2599:13" pos:end="2599:31"><expr pos:start="2599:13" pos:end="2599:30"><name pos:start="2599:13" pos:end="2599:14">v1</name> <operator pos:start="2599:16" pos:end="2599:16">=</operator> <call pos:start="2599:18" pos:end="2599:30"><name pos:start="2599:18" pos:end="2599:24">tswapal</name><argument_list pos:start="2599:25" pos:end="2599:30">(<argument pos:start="2599:26" pos:end="2599:29"><expr pos:start="2599:26" pos:end="2599:29"><name pos:start="2599:26" pos:end="2599:29"><name pos:start="2599:26" pos:end="2599:26">v</name><index pos:start="2599:27" pos:end="2599:29">[<expr pos:start="2599:28" pos:end="2599:28"><literal type="number" pos:start="2599:28" pos:end="2599:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2601:13" pos:end="2601:31"><expr pos:start="2601:13" pos:end="2601:30"><name pos:start="2601:13" pos:end="2601:14">v2</name> <operator pos:start="2601:16" pos:end="2601:16">=</operator> <call pos:start="2601:18" pos:end="2601:30"><name pos:start="2601:18" pos:end="2601:24">tswapal</name><argument_list pos:start="2601:25" pos:end="2601:30">(<argument pos:start="2601:26" pos:end="2601:29"><expr pos:start="2601:26" pos:end="2601:29"><name pos:start="2601:26" pos:end="2601:29"><name pos:start="2601:26" pos:end="2601:26">v</name><index pos:start="2601:27" pos:end="2601:29">[<expr pos:start="2601:28" pos:end="2601:28"><literal type="number" pos:start="2601:28" pos:end="2601:28">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2603:13" pos:end="2603:31"><expr pos:start="2603:13" pos:end="2603:30"><name pos:start="2603:13" pos:end="2603:14">v3</name> <operator pos:start="2603:16" pos:end="2603:16">=</operator> <call pos:start="2603:18" pos:end="2603:30"><name pos:start="2603:18" pos:end="2603:24">tswapal</name><argument_list pos:start="2603:25" pos:end="2603:30">(<argument pos:start="2603:26" pos:end="2603:29"><expr pos:start="2603:26" pos:end="2603:29"><name pos:start="2603:26" pos:end="2603:29"><name pos:start="2603:26" pos:end="2603:26">v</name><index pos:start="2603:27" pos:end="2603:29">[<expr pos:start="2603:28" pos:end="2603:28"><literal type="number" pos:start="2603:28" pos:end="2603:28">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2605:13" pos:end="2605:31"><expr pos:start="2605:13" pos:end="2605:30"><name pos:start="2605:13" pos:end="2605:14">v4</name> <operator pos:start="2605:16" pos:end="2605:16">=</operator> <call pos:start="2605:18" pos:end="2605:30"><name pos:start="2605:18" pos:end="2605:24">tswapal</name><argument_list pos:start="2605:25" pos:end="2605:30">(<argument pos:start="2605:26" pos:end="2605:29"><expr pos:start="2605:26" pos:end="2605:29"><name pos:start="2605:26" pos:end="2605:29"><name pos:start="2605:26" pos:end="2605:26">v</name><index pos:start="2605:27" pos:end="2605:29">[<expr pos:start="2605:28" pos:end="2605:28"><literal type="number" pos:start="2605:28" pos:end="2605:28">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2607:13" pos:end="2607:31"><expr pos:start="2607:13" pos:end="2607:30"><name pos:start="2607:13" pos:end="2607:14">v5</name> <operator pos:start="2607:16" pos:end="2607:16">=</operator> <call pos:start="2607:18" pos:end="2607:30"><name pos:start="2607:18" pos:end="2607:24">tswapal</name><argument_list pos:start="2607:25" pos:end="2607:30">(<argument pos:start="2607:26" pos:end="2607:29"><expr pos:start="2607:26" pos:end="2607:29"><name pos:start="2607:26" pos:end="2607:29"><name pos:start="2607:26" pos:end="2607:26">v</name><index pos:start="2607:27" pos:end="2607:29">[<expr pos:start="2607:28" pos:end="2607:28"><literal type="number" pos:start="2607:28" pos:end="2607:28">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2609:13" pos:end="2609:31"><expr pos:start="2609:13" pos:end="2609:30"><name pos:start="2609:13" pos:end="2609:14">v6</name> <operator pos:start="2609:16" pos:end="2609:16">=</operator> <call pos:start="2609:18" pos:end="2609:30"><name pos:start="2609:18" pos:end="2609:24">tswapal</name><argument_list pos:start="2609:25" pos:end="2609:30">(<argument pos:start="2609:26" pos:end="2609:29"><expr pos:start="2609:26" pos:end="2609:29"><name pos:start="2609:26" pos:end="2609:29"><name pos:start="2609:26" pos:end="2609:26">v</name><index pos:start="2609:27" pos:end="2609:29">[<expr pos:start="2609:28" pos:end="2609:28"><literal type="number" pos:start="2609:28" pos:end="2609:28">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2611:13" pos:end="2611:36"><expr pos:start="2611:13" pos:end="2611:35"><call pos:start="2611:13" pos:end="2611:35"><name pos:start="2611:13" pos:end="2611:23">unlock_user</name><argument_list pos:start="2611:24" pos:end="2611:35">(<argument pos:start="2611:25" pos:end="2611:25"><expr pos:start="2611:25" pos:end="2611:25"><name pos:start="2611:25" pos:end="2611:25">v</name></expr></argument>, <argument pos:start="2611:28" pos:end="2611:31"><expr pos:start="2611:28" pos:end="2611:31"><name pos:start="2611:28" pos:end="2611:31">arg1</name></expr></argument>, <argument pos:start="2611:34" pos:end="2611:34"><expr pos:start="2611:34" pos:end="2611:34"><literal type="number" pos:start="2611:34" pos:end="2611:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2613:13" pos:end="2617:49"><expr pos:start="2613:13" pos:end="2617:48"><name pos:start="2613:13" pos:end="2613:15">ret</name> <operator pos:start="2613:17" pos:end="2613:17">=</operator> <call pos:start="2613:19" pos:end="2617:48"><name pos:start="2613:19" pos:end="2613:27">get_errno</name><argument_list pos:start="2613:28" pos:end="2617:48">(<argument pos:start="2613:29" pos:end="2617:47"><expr pos:start="2613:29" pos:end="2617:47"><call pos:start="2613:29" pos:end="2617:47"><name pos:start="2613:29" pos:end="2613:39">target_mmap</name><argument_list pos:start="2613:40" pos:end="2617:47">(<argument pos:start="2613:41" pos:end="2613:42"><expr pos:start="2613:41" pos:end="2613:42"><name pos:start="2613:41" pos:end="2613:42">v1</name></expr></argument>, <argument pos:start="2613:45" pos:end="2613:46"><expr pos:start="2613:45" pos:end="2613:46"><name pos:start="2613:45" pos:end="2613:46">v2</name></expr></argument>, <argument pos:start="2613:49" pos:end="2613:50"><expr pos:start="2613:49" pos:end="2613:50"><name pos:start="2613:49" pos:end="2613:50">v3</name></expr></argument>,

                                        <argument pos:start="2615:41" pos:end="2615:82"><expr pos:start="2615:41" pos:end="2615:82"><call pos:start="2615:41" pos:end="2615:82"><name pos:start="2615:41" pos:end="2615:62">target_to_host_bitmask</name><argument_list pos:start="2615:63" pos:end="2615:82">(<argument pos:start="2615:64" pos:end="2615:65"><expr pos:start="2615:64" pos:end="2615:65"><name pos:start="2615:64" pos:end="2615:65">v4</name></expr></argument>, <argument pos:start="2615:68" pos:end="2615:81"><expr pos:start="2615:68" pos:end="2615:81"><name pos:start="2615:68" pos:end="2615:81">mmap_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2617:41" pos:end="2617:42"><expr pos:start="2617:41" pos:end="2617:42"><name pos:start="2617:41" pos:end="2617:42">v5</name></expr></argument>, <argument pos:start="2617:45" pos:end="2617:46"><expr pos:start="2617:45" pos:end="2617:46"><name pos:start="2617:45" pos:end="2617:46">v6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:else pos:start="2621:1" pos:end="2621:5">#<cpp:directive pos:start="2621:2" pos:end="2621:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="2623:9" pos:end="2632:0"><expr pos:start="2623:9" pos:end="2629:42"><name pos:start="2623:9" pos:end="2623:11">ret</name> <operator pos:start="2623:13" pos:end="2623:13">=</operator> <call pos:start="2623:15" pos:end="2629:42"><name pos:start="2623:15" pos:end="2623:23">get_errno</name><argument_list pos:start="2623:24" pos:end="2629:42">(<argument pos:start="2623:25" pos:end="2629:41"><expr pos:start="2623:25" pos:end="2629:41"><call pos:start="2623:25" pos:end="2629:41"><name pos:start="2623:25" pos:end="2623:35">target_mmap</name><argument_list pos:start="2623:36" pos:end="2629:41">(<argument pos:start="2623:37" pos:end="2623:40"><expr pos:start="2623:37" pos:end="2623:40"><name pos:start="2623:37" pos:end="2623:40">arg1</name></expr></argument>, <argument pos:start="2623:43" pos:end="2623:46"><expr pos:start="2623:43" pos:end="2623:46"><name pos:start="2623:43" pos:end="2623:46">arg2</name></expr></argument>, <argument pos:start="2623:49" pos:end="2623:52"><expr pos:start="2623:49" pos:end="2623:52"><name pos:start="2623:49" pos:end="2623:52">arg3</name></expr></argument>,

                                    <argument pos:start="2625:37" pos:end="2625:80"><expr pos:start="2625:37" pos:end="2625:80"><call pos:start="2625:37" pos:end="2625:80"><name pos:start="2625:37" pos:end="2625:58">target_to_host_bitmask</name><argument_list pos:start="2625:59" pos:end="2625:80">(<argument pos:start="2625:60" pos:end="2625:63"><expr pos:start="2625:60" pos:end="2625:63"><name pos:start="2625:60" pos:end="2625:63">arg4</name></expr></argument>, <argument pos:start="2625:66" pos:end="2625:79"><expr pos:start="2625:66" pos:end="2625:79"><name pos:start="2625:66" pos:end="2625:79">mmap_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="2627:37" pos:end="2627:40"><expr pos:start="2627:37" pos:end="2627:40"><name pos:start="2627:37" pos:end="2627:40">arg5</name></expr></argument>,

                                    <argument pos:start="2629:37" pos:end="2629:40"><expr pos:start="2629:37" pos:end="2629:40"><name pos:start="2629:37" pos:end="2629:40">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="2631:1" pos:end="2631:6">#<cpp:directive pos:start="2631:2" pos:end="2631:6">endif</cpp:directive></cpp:endif>

        <break pos:start="2633:9" pos:end="2638:0">break;</break>

<cpp:endif pos:start="2635:1" pos:end="2635:6">#<cpp:directive pos:start="2635:2" pos:end="2635:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2637:1" pos:end="2637:22">#<cpp:directive pos:start="2637:2" pos:end="2637:6">ifdef</cpp:directive> <name pos:start="2637:8" pos:end="2637:22">TARGET_NR_mmap2</name></cpp:ifdef>

    <case pos:start="2639:5" pos:end="2646:0">case <expr pos:start="2639:10" pos:end="2639:24"><name pos:start="2639:10" pos:end="2639:24">TARGET_NR_mmap2</name></expr>:</case>

<cpp:ifndef pos:start="2641:1" pos:end="2641:18">#<cpp:directive pos:start="2641:2" pos:end="2641:7">ifndef</cpp:directive> <name pos:start="2641:9" pos:end="2641:18">MMAP_SHIFT</name></cpp:ifndef>

<cpp:define pos:start="2643:1" pos:end="2643:21">#<cpp:directive pos:start="2643:2" pos:end="2643:7">define</cpp:directive> <cpp:macro pos:start="2643:9" pos:end="2643:18"><name pos:start="2643:9" pos:end="2643:18">MMAP_SHIFT</name></cpp:macro> <cpp:value pos:start="2643:20" pos:end="2643:21">12</cpp:value></cpp:define>

<cpp:endif pos:start="2645:1" pos:end="2645:6">#<cpp:directive pos:start="2645:2" pos:end="2645:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="2647:9" pos:end="2653:57"><expr pos:start="2647:9" pos:end="2653:56"><name pos:start="2647:9" pos:end="2647:11">ret</name> <operator pos:start="2647:13" pos:end="2647:13">=</operator> <call pos:start="2647:15" pos:end="2653:56"><name pos:start="2647:15" pos:end="2647:23">get_errno</name><argument_list pos:start="2647:24" pos:end="2653:56">(<argument pos:start="2647:25" pos:end="2653:55"><expr pos:start="2647:25" pos:end="2653:55"><call pos:start="2647:25" pos:end="2653:55"><name pos:start="2647:25" pos:end="2647:35">target_mmap</name><argument_list pos:start="2647:36" pos:end="2653:55">(<argument pos:start="2647:37" pos:end="2647:40"><expr pos:start="2647:37" pos:end="2647:40"><name pos:start="2647:37" pos:end="2647:40">arg1</name></expr></argument>, <argument pos:start="2647:43" pos:end="2647:46"><expr pos:start="2647:43" pos:end="2647:46"><name pos:start="2647:43" pos:end="2647:46">arg2</name></expr></argument>, <argument pos:start="2647:49" pos:end="2647:52"><expr pos:start="2647:49" pos:end="2647:52"><name pos:start="2647:49" pos:end="2647:52">arg3</name></expr></argument>,

                                    <argument pos:start="2649:37" pos:end="2649:80"><expr pos:start="2649:37" pos:end="2649:80"><call pos:start="2649:37" pos:end="2649:80"><name pos:start="2649:37" pos:end="2649:58">target_to_host_bitmask</name><argument_list pos:start="2649:59" pos:end="2649:80">(<argument pos:start="2649:60" pos:end="2649:63"><expr pos:start="2649:60" pos:end="2649:63"><name pos:start="2649:60" pos:end="2649:63">arg4</name></expr></argument>, <argument pos:start="2649:66" pos:end="2649:79"><expr pos:start="2649:66" pos:end="2649:79"><name pos:start="2649:66" pos:end="2649:79">mmap_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="2651:37" pos:end="2651:40"><expr pos:start="2651:37" pos:end="2651:40"><name pos:start="2651:37" pos:end="2651:40">arg5</name></expr></argument>,

                                    <argument pos:start="2653:37" pos:end="2653:54"><expr pos:start="2653:37" pos:end="2653:54"><name pos:start="2653:37" pos:end="2653:40">arg6</name> <operator pos:start="2653:42" pos:end="2653:43">&lt;&lt;</operator> <name pos:start="2653:45" pos:end="2653:54">MMAP_SHIFT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2655:9" pos:end="2658:0">break;</break>

<cpp:endif pos:start="2657:1" pos:end="2657:6">#<cpp:directive pos:start="2657:2" pos:end="2657:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2659:5" pos:end="2659:26">case <expr pos:start="2659:10" pos:end="2659:25"><name pos:start="2659:10" pos:end="2659:25">TARGET_NR_munmap</name></expr>:</case>

        <expr_stmt pos:start="2661:9" pos:end="2661:51"><expr pos:start="2661:9" pos:end="2661:50"><name pos:start="2661:9" pos:end="2661:11">ret</name> <operator pos:start="2661:13" pos:end="2661:13">=</operator> <call pos:start="2661:15" pos:end="2661:50"><name pos:start="2661:15" pos:end="2661:23">get_errno</name><argument_list pos:start="2661:24" pos:end="2661:50">(<argument pos:start="2661:25" pos:end="2661:49"><expr pos:start="2661:25" pos:end="2661:49"><call pos:start="2661:25" pos:end="2661:49"><name pos:start="2661:25" pos:end="2661:37">target_munmap</name><argument_list pos:start="2661:38" pos:end="2661:49">(<argument pos:start="2661:39" pos:end="2661:42"><expr pos:start="2661:39" pos:end="2661:42"><name pos:start="2661:39" pos:end="2661:42">arg1</name></expr></argument>, <argument pos:start="2661:45" pos:end="2661:48"><expr pos:start="2661:45" pos:end="2661:48"><name pos:start="2661:45" pos:end="2661:48">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2663:9" pos:end="2663:14">break;</break>

    <case pos:start="2665:5" pos:end="2665:28">case <expr pos:start="2665:10" pos:end="2665:27"><name pos:start="2665:10" pos:end="2665:27">TARGET_NR_mprotect</name></expr>:</case>

        <block pos:start="2667:9" pos:end="2687:9">{<block_content pos:start="2669:13" pos:end="2685:13">

            <decl_stmt pos:start="2669:13" pos:end="2669:62"><decl pos:start="2669:13" pos:end="2669:61"><type pos:start="2669:13" pos:end="2669:23"><name pos:start="2669:13" pos:end="2669:21">TaskState</name> <modifier pos:start="2669:23" pos:end="2669:23">*</modifier></type><name pos:start="2669:24" pos:end="2669:25">ts</name> <init pos:start="2669:27" pos:end="2669:61">= <expr pos:start="2669:29" pos:end="2669:61"><operator pos:start="2669:29" pos:end="2669:29">(</operator><operator pos:start="2669:30" pos:end="2669:30">(</operator><name pos:start="2669:31" pos:end="2669:42">CPUArchState</name> <operator pos:start="2669:44" pos:end="2669:44">*</operator><operator pos:start="2669:45" pos:end="2669:45">)</operator><name pos:start="2669:46" pos:end="2669:52">cpu_env</name><operator pos:start="2669:53" pos:end="2669:53">)</operator><operator pos:start="2669:54" pos:end="2669:55">-&gt;</operator><name pos:start="2669:56" pos:end="2669:61">opaque</name></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="2671:13" pos:end="2671:75">/* Special hack to detect libc making the stack executable.  */</comment>

            <if_stmt pos:start="2673:13" pos:end="2685:13"><if pos:start="2673:13" pos:end="2685:13">if <condition pos:start="2673:16" pos:end="2677:49">(<expr pos:start="2673:17" pos:end="2677:48"><operator pos:start="2673:17" pos:end="2673:17">(</operator><name pos:start="2673:18" pos:end="2673:21">arg3</name> <operator pos:start="2673:23" pos:end="2673:23">&amp;</operator> <name pos:start="2673:25" pos:end="2673:38">PROT_GROWSDOWN</name><operator pos:start="2673:39" pos:end="2673:39">)</operator>

                <operator pos:start="2675:17" pos:end="2675:18">&amp;&amp;</operator> <name pos:start="2675:20" pos:end="2675:23">arg1</name> <operator pos:start="2675:25" pos:end="2675:26">&gt;=</operator> <name pos:start="2675:28" pos:end="2675:48"><name pos:start="2675:28" pos:end="2675:29">ts</name><operator pos:start="2675:30" pos:end="2675:31">-&gt;</operator><name pos:start="2675:32" pos:end="2675:35">info</name><operator pos:start="2675:36" pos:end="2675:37">-&gt;</operator><name pos:start="2675:38" pos:end="2675:48">stack_limit</name></name>

                <operator pos:start="2677:17" pos:end="2677:18">&amp;&amp;</operator> <name pos:start="2677:20" pos:end="2677:23">arg1</name> <operator pos:start="2677:25" pos:end="2677:26">&lt;=</operator> <name pos:start="2677:28" pos:end="2677:48"><name pos:start="2677:28" pos:end="2677:29">ts</name><operator pos:start="2677:30" pos:end="2677:31">-&gt;</operator><name pos:start="2677:32" pos:end="2677:35">info</name><operator pos:start="2677:36" pos:end="2677:37">-&gt;</operator><name pos:start="2677:38" pos:end="2677:48">start_stack</name></name></expr>)</condition> <block pos:start="2677:51" pos:end="2685:13">{<block_content pos:start="2679:17" pos:end="2683:45">

                <expr_stmt pos:start="2679:17" pos:end="2679:40"><expr pos:start="2679:17" pos:end="2679:39"><name pos:start="2679:17" pos:end="2679:20">arg3</name> <operator pos:start="2679:22" pos:end="2679:23">&amp;=</operator> <operator pos:start="2679:25" pos:end="2679:25">~</operator><name pos:start="2679:26" pos:end="2679:39">PROT_GROWSDOWN</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2681:17" pos:end="2681:59"><expr pos:start="2681:17" pos:end="2681:58"><name pos:start="2681:17" pos:end="2681:20">arg2</name> <operator pos:start="2681:22" pos:end="2681:22">=</operator> <name pos:start="2681:24" pos:end="2681:27">arg2</name> <operator pos:start="2681:29" pos:end="2681:29">+</operator> <name pos:start="2681:31" pos:end="2681:34">arg1</name> <operator pos:start="2681:36" pos:end="2681:36">-</operator> <name pos:start="2681:38" pos:end="2681:58"><name pos:start="2681:38" pos:end="2681:39">ts</name><operator pos:start="2681:40" pos:end="2681:41">-&gt;</operator><name pos:start="2681:42" pos:end="2681:45">info</name><operator pos:start="2681:46" pos:end="2681:47">-&gt;</operator><name pos:start="2681:48" pos:end="2681:58">stack_limit</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="2683:17" pos:end="2683:45"><expr pos:start="2683:17" pos:end="2683:44"><name pos:start="2683:17" pos:end="2683:20">arg1</name> <operator pos:start="2683:22" pos:end="2683:22">=</operator> <name pos:start="2683:24" pos:end="2683:44"><name pos:start="2683:24" pos:end="2683:25">ts</name><operator pos:start="2683:26" pos:end="2683:27">-&gt;</operator><name pos:start="2683:28" pos:end="2683:31">info</name><operator pos:start="2683:32" pos:end="2683:33">-&gt;</operator><name pos:start="2683:34" pos:end="2683:44">stack_limit</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="2689:9" pos:end="2689:59"><expr pos:start="2689:9" pos:end="2689:58"><name pos:start="2689:9" pos:end="2689:11">ret</name> <operator pos:start="2689:13" pos:end="2689:13">=</operator> <call pos:start="2689:15" pos:end="2689:58"><name pos:start="2689:15" pos:end="2689:23">get_errno</name><argument_list pos:start="2689:24" pos:end="2689:58">(<argument pos:start="2689:25" pos:end="2689:57"><expr pos:start="2689:25" pos:end="2689:57"><call pos:start="2689:25" pos:end="2689:57"><name pos:start="2689:25" pos:end="2689:39">target_mprotect</name><argument_list pos:start="2689:40" pos:end="2689:57">(<argument pos:start="2689:41" pos:end="2689:44"><expr pos:start="2689:41" pos:end="2689:44"><name pos:start="2689:41" pos:end="2689:44">arg1</name></expr></argument>, <argument pos:start="2689:47" pos:end="2689:50"><expr pos:start="2689:47" pos:end="2689:50"><name pos:start="2689:47" pos:end="2689:50">arg2</name></expr></argument>, <argument pos:start="2689:53" pos:end="2689:56"><expr pos:start="2689:53" pos:end="2689:56"><name pos:start="2689:53" pos:end="2689:56">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2691:9" pos:end="2694:0">break;</break>

<cpp:ifdef pos:start="2693:1" pos:end="2693:23">#<cpp:directive pos:start="2693:2" pos:end="2693:6">ifdef</cpp:directive> <name pos:start="2693:8" pos:end="2693:23">TARGET_NR_mremap</name></cpp:ifdef>

    <case pos:start="2695:5" pos:end="2695:26">case <expr pos:start="2695:10" pos:end="2695:25"><name pos:start="2695:10" pos:end="2695:25">TARGET_NR_mremap</name></expr>:</case>

        <expr_stmt pos:start="2697:9" pos:end="2697:69"><expr pos:start="2697:9" pos:end="2697:68"><name pos:start="2697:9" pos:end="2697:11">ret</name> <operator pos:start="2697:13" pos:end="2697:13">=</operator> <call pos:start="2697:15" pos:end="2697:68"><name pos:start="2697:15" pos:end="2697:23">get_errno</name><argument_list pos:start="2697:24" pos:end="2697:68">(<argument pos:start="2697:25" pos:end="2697:67"><expr pos:start="2697:25" pos:end="2697:67"><call pos:start="2697:25" pos:end="2697:67"><name pos:start="2697:25" pos:end="2697:37">target_mremap</name><argument_list pos:start="2697:38" pos:end="2697:67">(<argument pos:start="2697:39" pos:end="2697:42"><expr pos:start="2697:39" pos:end="2697:42"><name pos:start="2697:39" pos:end="2697:42">arg1</name></expr></argument>, <argument pos:start="2697:45" pos:end="2697:48"><expr pos:start="2697:45" pos:end="2697:48"><name pos:start="2697:45" pos:end="2697:48">arg2</name></expr></argument>, <argument pos:start="2697:51" pos:end="2697:54"><expr pos:start="2697:51" pos:end="2697:54"><name pos:start="2697:51" pos:end="2697:54">arg3</name></expr></argument>, <argument pos:start="2697:57" pos:end="2697:60"><expr pos:start="2697:57" pos:end="2697:60"><name pos:start="2697:57" pos:end="2697:60">arg4</name></expr></argument>, <argument pos:start="2697:63" pos:end="2697:66"><expr pos:start="2697:63" pos:end="2697:66"><name pos:start="2697:63" pos:end="2697:66">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2699:9" pos:end="2706:0">break;</break>

<cpp:endif pos:start="2701:1" pos:end="2701:6">#<cpp:directive pos:start="2701:2" pos:end="2701:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="2703:9" pos:end="2703:62">/* ??? msync/mlock/munlock are broken for softmmu.  */</comment>

<cpp:ifdef pos:start="2705:1" pos:end="2705:22">#<cpp:directive pos:start="2705:2" pos:end="2705:6">ifdef</cpp:directive> <name pos:start="2705:8" pos:end="2705:22">TARGET_NR_msync</name></cpp:ifdef>

    <case pos:start="2707:5" pos:end="2707:25">case <expr pos:start="2707:10" pos:end="2707:24"><name pos:start="2707:10" pos:end="2707:24">TARGET_NR_msync</name></expr>:</case>

        <expr_stmt pos:start="2709:9" pos:end="2709:54"><expr pos:start="2709:9" pos:end="2709:53"><name pos:start="2709:9" pos:end="2709:11">ret</name> <operator pos:start="2709:13" pos:end="2709:13">=</operator> <call pos:start="2709:15" pos:end="2709:53"><name pos:start="2709:15" pos:end="2709:23">get_errno</name><argument_list pos:start="2709:24" pos:end="2709:53">(<argument pos:start="2709:25" pos:end="2709:52"><expr pos:start="2709:25" pos:end="2709:52"><call pos:start="2709:25" pos:end="2709:52"><name pos:start="2709:25" pos:end="2709:29">msync</name><argument_list pos:start="2709:30" pos:end="2709:52">(<argument pos:start="2709:31" pos:end="2709:39"><expr pos:start="2709:31" pos:end="2709:39"><call pos:start="2709:31" pos:end="2709:39"><name pos:start="2709:31" pos:end="2709:33">g2h</name><argument_list pos:start="2709:34" pos:end="2709:39">(<argument pos:start="2709:35" pos:end="2709:38"><expr pos:start="2709:35" pos:end="2709:38"><name pos:start="2709:35" pos:end="2709:38">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2709:42" pos:end="2709:45"><expr pos:start="2709:42" pos:end="2709:45"><name pos:start="2709:42" pos:end="2709:45">arg2</name></expr></argument>, <argument pos:start="2709:48" pos:end="2709:51"><expr pos:start="2709:48" pos:end="2709:51"><name pos:start="2709:48" pos:end="2709:51">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2711:9" pos:end="2716:0">break;</break>

<cpp:endif pos:start="2713:1" pos:end="2713:6">#<cpp:directive pos:start="2713:2" pos:end="2713:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2715:1" pos:end="2715:22">#<cpp:directive pos:start="2715:2" pos:end="2715:6">ifdef</cpp:directive> <name pos:start="2715:8" pos:end="2715:22">TARGET_NR_mlock</name></cpp:ifdef>

    <case pos:start="2717:5" pos:end="2717:25">case <expr pos:start="2717:10" pos:end="2717:24"><name pos:start="2717:10" pos:end="2717:24">TARGET_NR_mlock</name></expr>:</case>

        <expr_stmt pos:start="2719:9" pos:end="2719:48"><expr pos:start="2719:9" pos:end="2719:47"><name pos:start="2719:9" pos:end="2719:11">ret</name> <operator pos:start="2719:13" pos:end="2719:13">=</operator> <call pos:start="2719:15" pos:end="2719:47"><name pos:start="2719:15" pos:end="2719:23">get_errno</name><argument_list pos:start="2719:24" pos:end="2719:47">(<argument pos:start="2719:25" pos:end="2719:46"><expr pos:start="2719:25" pos:end="2719:46"><call pos:start="2719:25" pos:end="2719:46"><name pos:start="2719:25" pos:end="2719:29">mlock</name><argument_list pos:start="2719:30" pos:end="2719:46">(<argument pos:start="2719:31" pos:end="2719:39"><expr pos:start="2719:31" pos:end="2719:39"><call pos:start="2719:31" pos:end="2719:39"><name pos:start="2719:31" pos:end="2719:33">g2h</name><argument_list pos:start="2719:34" pos:end="2719:39">(<argument pos:start="2719:35" pos:end="2719:38"><expr pos:start="2719:35" pos:end="2719:38"><name pos:start="2719:35" pos:end="2719:38">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2719:42" pos:end="2719:45"><expr pos:start="2719:42" pos:end="2719:45"><name pos:start="2719:42" pos:end="2719:45">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2721:9" pos:end="2726:0">break;</break>

<cpp:endif pos:start="2723:1" pos:end="2723:6">#<cpp:directive pos:start="2723:2" pos:end="2723:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2725:1" pos:end="2725:24">#<cpp:directive pos:start="2725:2" pos:end="2725:6">ifdef</cpp:directive> <name pos:start="2725:8" pos:end="2725:24">TARGET_NR_munlock</name></cpp:ifdef>

    <case pos:start="2727:5" pos:end="2727:27">case <expr pos:start="2727:10" pos:end="2727:26"><name pos:start="2727:10" pos:end="2727:26">TARGET_NR_munlock</name></expr>:</case>

        <expr_stmt pos:start="2729:9" pos:end="2729:50"><expr pos:start="2729:9" pos:end="2729:49"><name pos:start="2729:9" pos:end="2729:11">ret</name> <operator pos:start="2729:13" pos:end="2729:13">=</operator> <call pos:start="2729:15" pos:end="2729:49"><name pos:start="2729:15" pos:end="2729:23">get_errno</name><argument_list pos:start="2729:24" pos:end="2729:49">(<argument pos:start="2729:25" pos:end="2729:48"><expr pos:start="2729:25" pos:end="2729:48"><call pos:start="2729:25" pos:end="2729:48"><name pos:start="2729:25" pos:end="2729:31">munlock</name><argument_list pos:start="2729:32" pos:end="2729:48">(<argument pos:start="2729:33" pos:end="2729:41"><expr pos:start="2729:33" pos:end="2729:41"><call pos:start="2729:33" pos:end="2729:41"><name pos:start="2729:33" pos:end="2729:35">g2h</name><argument_list pos:start="2729:36" pos:end="2729:41">(<argument pos:start="2729:37" pos:end="2729:40"><expr pos:start="2729:37" pos:end="2729:40"><name pos:start="2729:37" pos:end="2729:40">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2729:44" pos:end="2729:47"><expr pos:start="2729:44" pos:end="2729:47"><name pos:start="2729:44" pos:end="2729:47">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2731:9" pos:end="2736:0">break;</break>

<cpp:endif pos:start="2733:1" pos:end="2733:6">#<cpp:directive pos:start="2733:2" pos:end="2733:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2735:1" pos:end="2735:25">#<cpp:directive pos:start="2735:2" pos:end="2735:6">ifdef</cpp:directive> <name pos:start="2735:8" pos:end="2735:25">TARGET_NR_mlockall</name></cpp:ifdef>

    <case pos:start="2737:5" pos:end="2737:28">case <expr pos:start="2737:10" pos:end="2737:27"><name pos:start="2737:10" pos:end="2737:27">TARGET_NR_mlockall</name></expr>:</case>

        <expr_stmt pos:start="2739:9" pos:end="2739:40"><expr pos:start="2739:9" pos:end="2739:39"><name pos:start="2739:9" pos:end="2739:11">ret</name> <operator pos:start="2739:13" pos:end="2739:13">=</operator> <call pos:start="2739:15" pos:end="2739:39"><name pos:start="2739:15" pos:end="2739:23">get_errno</name><argument_list pos:start="2739:24" pos:end="2739:39">(<argument pos:start="2739:25" pos:end="2739:38"><expr pos:start="2739:25" pos:end="2739:38"><call pos:start="2739:25" pos:end="2739:38"><name pos:start="2739:25" pos:end="2739:32">mlockall</name><argument_list pos:start="2739:33" pos:end="2739:38">(<argument pos:start="2739:34" pos:end="2739:37"><expr pos:start="2739:34" pos:end="2739:37"><name pos:start="2739:34" pos:end="2739:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2741:9" pos:end="2746:0">break;</break>

<cpp:endif pos:start="2743:1" pos:end="2743:6">#<cpp:directive pos:start="2743:2" pos:end="2743:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2745:1" pos:end="2745:27">#<cpp:directive pos:start="2745:2" pos:end="2745:6">ifdef</cpp:directive> <name pos:start="2745:8" pos:end="2745:27">TARGET_NR_munlockall</name></cpp:ifdef>

    <case pos:start="2747:5" pos:end="2747:30">case <expr pos:start="2747:10" pos:end="2747:29"><name pos:start="2747:10" pos:end="2747:29">TARGET_NR_munlockall</name></expr>:</case>

        <expr_stmt pos:start="2749:9" pos:end="2749:38"><expr pos:start="2749:9" pos:end="2749:37"><name pos:start="2749:9" pos:end="2749:11">ret</name> <operator pos:start="2749:13" pos:end="2749:13">=</operator> <call pos:start="2749:15" pos:end="2749:37"><name pos:start="2749:15" pos:end="2749:23">get_errno</name><argument_list pos:start="2749:24" pos:end="2749:37">(<argument pos:start="2749:25" pos:end="2749:36"><expr pos:start="2749:25" pos:end="2749:36"><call pos:start="2749:25" pos:end="2749:36"><name pos:start="2749:25" pos:end="2749:34">munlockall</name><argument_list pos:start="2749:35" pos:end="2749:36">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2751:9" pos:end="2754:0">break;</break>

<cpp:endif pos:start="2753:1" pos:end="2753:6">#<cpp:directive pos:start="2753:2" pos:end="2753:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2755:5" pos:end="2755:28">case <expr pos:start="2755:10" pos:end="2755:27"><name pos:start="2755:10" pos:end="2755:27">TARGET_NR_truncate</name></expr>:</case>

        <if_stmt pos:start="2757:9" pos:end="2759:24"><if pos:start="2757:9" pos:end="2759:24">if <condition pos:start="2757:12" pos:end="2757:42">(<expr pos:start="2757:13" pos:end="2757:41"><operator pos:start="2757:13" pos:end="2757:13">!</operator><operator pos:start="2757:14" pos:end="2757:14">(</operator><name pos:start="2757:15" pos:end="2757:15">p</name> <operator pos:start="2757:17" pos:end="2757:17">=</operator> <call pos:start="2757:19" pos:end="2757:40"><name pos:start="2757:19" pos:end="2757:34">lock_user_string</name><argument_list pos:start="2757:35" pos:end="2757:40">(<argument pos:start="2757:36" pos:end="2757:39"><expr pos:start="2757:36" pos:end="2757:39"><name pos:start="2757:36" pos:end="2757:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2757:41" pos:end="2757:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2759:13" pos:end="2759:24"><block_content pos:start="2759:13" pos:end="2759:24">

            <goto pos:start="2759:13" pos:end="2759:24">goto <name pos:start="2759:18" pos:end="2759:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2761:9" pos:end="2761:43"><expr pos:start="2761:9" pos:end="2761:42"><name pos:start="2761:9" pos:end="2761:11">ret</name> <operator pos:start="2761:13" pos:end="2761:13">=</operator> <call pos:start="2761:15" pos:end="2761:42"><name pos:start="2761:15" pos:end="2761:23">get_errno</name><argument_list pos:start="2761:24" pos:end="2761:42">(<argument pos:start="2761:25" pos:end="2761:41"><expr pos:start="2761:25" pos:end="2761:41"><call pos:start="2761:25" pos:end="2761:41"><name pos:start="2761:25" pos:end="2761:32">truncate</name><argument_list pos:start="2761:33" pos:end="2761:41">(<argument pos:start="2761:34" pos:end="2761:34"><expr pos:start="2761:34" pos:end="2761:34"><name pos:start="2761:34" pos:end="2761:34">p</name></expr></argument>, <argument pos:start="2761:37" pos:end="2761:40"><expr pos:start="2761:37" pos:end="2761:40"><name pos:start="2761:37" pos:end="2761:40">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2763:9" pos:end="2763:32"><expr pos:start="2763:9" pos:end="2763:31"><call pos:start="2763:9" pos:end="2763:31"><name pos:start="2763:9" pos:end="2763:19">unlock_user</name><argument_list pos:start="2763:20" pos:end="2763:31">(<argument pos:start="2763:21" pos:end="2763:21"><expr pos:start="2763:21" pos:end="2763:21"><name pos:start="2763:21" pos:end="2763:21">p</name></expr></argument>, <argument pos:start="2763:24" pos:end="2763:27"><expr pos:start="2763:24" pos:end="2763:27"><name pos:start="2763:24" pos:end="2763:27">arg1</name></expr></argument>, <argument pos:start="2763:30" pos:end="2763:30"><expr pos:start="2763:30" pos:end="2763:30"><literal type="number" pos:start="2763:30" pos:end="2763:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2765:9" pos:end="2765:14">break;</break>

    <case pos:start="2767:5" pos:end="2767:29">case <expr pos:start="2767:10" pos:end="2767:28"><name pos:start="2767:10" pos:end="2767:28">TARGET_NR_ftruncate</name></expr>:</case>

        <expr_stmt pos:start="2769:9" pos:end="2769:47"><expr pos:start="2769:9" pos:end="2769:46"><name pos:start="2769:9" pos:end="2769:11">ret</name> <operator pos:start="2769:13" pos:end="2769:13">=</operator> <call pos:start="2769:15" pos:end="2769:46"><name pos:start="2769:15" pos:end="2769:23">get_errno</name><argument_list pos:start="2769:24" pos:end="2769:46">(<argument pos:start="2769:25" pos:end="2769:45"><expr pos:start="2769:25" pos:end="2769:45"><call pos:start="2769:25" pos:end="2769:45"><name pos:start="2769:25" pos:end="2769:33">ftruncate</name><argument_list pos:start="2769:34" pos:end="2769:45">(<argument pos:start="2769:35" pos:end="2769:38"><expr pos:start="2769:35" pos:end="2769:38"><name pos:start="2769:35" pos:end="2769:38">arg1</name></expr></argument>, <argument pos:start="2769:41" pos:end="2769:44"><expr pos:start="2769:41" pos:end="2769:44"><name pos:start="2769:41" pos:end="2769:44">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2771:9" pos:end="2771:14">break;</break>

    <case pos:start="2773:5" pos:end="2773:26">case <expr pos:start="2773:10" pos:end="2773:25"><name pos:start="2773:10" pos:end="2773:25">TARGET_NR_fchmod</name></expr>:</case>

        <expr_stmt pos:start="2775:9" pos:end="2775:44"><expr pos:start="2775:9" pos:end="2775:43"><name pos:start="2775:9" pos:end="2775:11">ret</name> <operator pos:start="2775:13" pos:end="2775:13">=</operator> <call pos:start="2775:15" pos:end="2775:43"><name pos:start="2775:15" pos:end="2775:23">get_errno</name><argument_list pos:start="2775:24" pos:end="2775:43">(<argument pos:start="2775:25" pos:end="2775:42"><expr pos:start="2775:25" pos:end="2775:42"><call pos:start="2775:25" pos:end="2775:42"><name pos:start="2775:25" pos:end="2775:30">fchmod</name><argument_list pos:start="2775:31" pos:end="2775:42">(<argument pos:start="2775:32" pos:end="2775:35"><expr pos:start="2775:32" pos:end="2775:35"><name pos:start="2775:32" pos:end="2775:35">arg1</name></expr></argument>, <argument pos:start="2775:38" pos:end="2775:41"><expr pos:start="2775:38" pos:end="2775:41"><name pos:start="2775:38" pos:end="2775:41">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2777:9" pos:end="2780:0">break;</break>

<cpp:if pos:start="2779:1" pos:end="2779:57">#<cpp:directive pos:start="2779:2" pos:end="2779:3">if</cpp:directive> <expr pos:start="2779:5" pos:end="2779:57"><call pos:start="2779:5" pos:end="2779:31"><name pos:start="2779:5" pos:end="2779:11">defined</name><argument_list pos:start="2779:12" pos:end="2779:31">(<argument pos:start="2779:13" pos:end="2779:30"><expr pos:start="2779:13" pos:end="2779:30"><name pos:start="2779:13" pos:end="2779:30">TARGET_NR_fchmodat</name></expr></argument>)</argument_list></call> <operator pos:start="2779:33" pos:end="2779:34">&amp;&amp;</operator> <call pos:start="2779:36" pos:end="2779:57"><name pos:start="2779:36" pos:end="2779:42">defined</name><argument_list pos:start="2779:43" pos:end="2779:57">(<argument pos:start="2779:44" pos:end="2779:56"><expr pos:start="2779:44" pos:end="2779:56"><name pos:start="2779:44" pos:end="2779:56">__NR_fchmodat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2781:5" pos:end="2781:28">case <expr pos:start="2781:10" pos:end="2781:27"><name pos:start="2781:10" pos:end="2781:27">TARGET_NR_fchmodat</name></expr>:</case>

        <if_stmt pos:start="2783:9" pos:end="2785:24"><if pos:start="2783:9" pos:end="2785:24">if <condition pos:start="2783:12" pos:end="2783:42">(<expr pos:start="2783:13" pos:end="2783:41"><operator pos:start="2783:13" pos:end="2783:13">!</operator><operator pos:start="2783:14" pos:end="2783:14">(</operator><name pos:start="2783:15" pos:end="2783:15">p</name> <operator pos:start="2783:17" pos:end="2783:17">=</operator> <call pos:start="2783:19" pos:end="2783:40"><name pos:start="2783:19" pos:end="2783:34">lock_user_string</name><argument_list pos:start="2783:35" pos:end="2783:40">(<argument pos:start="2783:36" pos:end="2783:39"><expr pos:start="2783:36" pos:end="2783:39"><name pos:start="2783:36" pos:end="2783:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="2783:41" pos:end="2783:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2785:13" pos:end="2785:24"><block_content pos:start="2785:13" pos:end="2785:24">

            <goto pos:start="2785:13" pos:end="2785:24">goto <name pos:start="2785:18" pos:end="2785:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2787:9" pos:end="2787:53"><expr pos:start="2787:9" pos:end="2787:52"><name pos:start="2787:9" pos:end="2787:11">ret</name> <operator pos:start="2787:13" pos:end="2787:13">=</operator> <call pos:start="2787:15" pos:end="2787:52"><name pos:start="2787:15" pos:end="2787:23">get_errno</name><argument_list pos:start="2787:24" pos:end="2787:52">(<argument pos:start="2787:25" pos:end="2787:51"><expr pos:start="2787:25" pos:end="2787:51"><call pos:start="2787:25" pos:end="2787:51"><name pos:start="2787:25" pos:end="2787:36">sys_fchmodat</name><argument_list pos:start="2787:37" pos:end="2787:51">(<argument pos:start="2787:38" pos:end="2787:41"><expr pos:start="2787:38" pos:end="2787:41"><name pos:start="2787:38" pos:end="2787:41">arg1</name></expr></argument>, <argument pos:start="2787:44" pos:end="2787:44"><expr pos:start="2787:44" pos:end="2787:44"><name pos:start="2787:44" pos:end="2787:44">p</name></expr></argument>, <argument pos:start="2787:47" pos:end="2787:50"><expr pos:start="2787:47" pos:end="2787:50"><name pos:start="2787:47" pos:end="2787:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2789:9" pos:end="2789:32"><expr pos:start="2789:9" pos:end="2789:31"><call pos:start="2789:9" pos:end="2789:31"><name pos:start="2789:9" pos:end="2789:19">unlock_user</name><argument_list pos:start="2789:20" pos:end="2789:31">(<argument pos:start="2789:21" pos:end="2789:21"><expr pos:start="2789:21" pos:end="2789:21"><name pos:start="2789:21" pos:end="2789:21">p</name></expr></argument>, <argument pos:start="2789:24" pos:end="2789:27"><expr pos:start="2789:24" pos:end="2789:27"><name pos:start="2789:24" pos:end="2789:27">arg2</name></expr></argument>, <argument pos:start="2789:30" pos:end="2789:30"><expr pos:start="2789:30" pos:end="2789:30"><literal type="number" pos:start="2789:30" pos:end="2789:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2791:9" pos:end="2794:0">break;</break>

<cpp:endif pos:start="2793:1" pos:end="2793:6">#<cpp:directive pos:start="2793:2" pos:end="2793:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2795:5" pos:end="2795:31">case <expr pos:start="2795:10" pos:end="2795:30"><name pos:start="2795:10" pos:end="2795:30">TARGET_NR_getpriority</name></expr>:</case>

        <comment type="block" pos:start="2797:9" pos:end="2799:53">/* Note that negative values are valid for getpriority, so we must

           differentiate based on errno settings.  */</comment>

        <expr_stmt pos:start="2801:9" pos:end="2801:18"><expr pos:start="2801:9" pos:end="2801:17"><name pos:start="2801:9" pos:end="2801:13">errno</name> <operator pos:start="2801:15" pos:end="2801:15">=</operator> <literal type="number" pos:start="2801:17" pos:end="2801:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2803:9" pos:end="2803:38"><expr pos:start="2803:9" pos:end="2803:37"><name pos:start="2803:9" pos:end="2803:11">ret</name> <operator pos:start="2803:13" pos:end="2803:13">=</operator> <call pos:start="2803:15" pos:end="2803:37"><name pos:start="2803:15" pos:end="2803:25">getpriority</name><argument_list pos:start="2803:26" pos:end="2803:37">(<argument pos:start="2803:27" pos:end="2803:30"><expr pos:start="2803:27" pos:end="2803:30"><name pos:start="2803:27" pos:end="2803:30">arg1</name></expr></argument>, <argument pos:start="2803:33" pos:end="2803:36"><expr pos:start="2803:33" pos:end="2803:36"><name pos:start="2803:33" pos:end="2803:36">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2805:9" pos:end="2814:0"><if pos:start="2805:9" pos:end="2814:0">if <condition pos:start="2805:12" pos:end="2805:36">(<expr pos:start="2805:13" pos:end="2805:35"><name pos:start="2805:13" pos:end="2805:15">ret</name> <operator pos:start="2805:17" pos:end="2805:18">==</operator> <operator pos:start="2805:20" pos:end="2805:20">-</operator><literal type="number" pos:start="2805:21" pos:end="2805:21">1</literal> <operator pos:start="2805:23" pos:end="2805:24">&amp;&amp;</operator> <name pos:start="2805:26" pos:end="2805:30">errno</name> <operator pos:start="2805:32" pos:end="2805:33">!=</operator> <literal type="number" pos:start="2805:35" pos:end="2805:35">0</literal></expr>)</condition> <block pos:start="2805:38" pos:end="2814:0">{<block_content pos:start="2807:13" pos:end="2809:18">

            <expr_stmt pos:start="2807:13" pos:end="2807:47"><expr pos:start="2807:13" pos:end="2807:46"><name pos:start="2807:13" pos:end="2807:15">ret</name> <operator pos:start="2807:17" pos:end="2807:17">=</operator> <operator pos:start="2807:19" pos:end="2807:19">-</operator><call pos:start="2807:20" pos:end="2807:46"><name pos:start="2807:20" pos:end="2807:39">host_to_target_errno</name><argument_list pos:start="2807:40" pos:end="2807:46">(<argument pos:start="2807:41" pos:end="2807:45"><expr pos:start="2807:41" pos:end="2807:45"><name pos:start="2807:41" pos:end="2807:45">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2809:13" pos:end="2809:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="2813:1" pos:end="2813:19">#<cpp:directive pos:start="2813:2" pos:end="2813:6">ifdef</cpp:directive> <name pos:start="2813:8" pos:end="2813:19">TARGET_ALPHA</name></cpp:ifdef>

        <comment type="block" pos:start="2815:9" pos:end="2815:71">/* Return value is the unbiased priority.  Signal no error.  */</comment>

        <expr_stmt pos:start="2817:9" pos:end="2820:0"><expr pos:start="2817:9" pos:end="2817:49"><operator pos:start="2817:9" pos:end="2817:9">(</operator><operator pos:start="2817:10" pos:end="2817:10">(</operator><name pos:start="2817:11" pos:end="2817:23">CPUAlphaState</name> <operator pos:start="2817:25" pos:end="2817:25">*</operator><operator pos:start="2817:26" pos:end="2817:26">)</operator><name pos:start="2817:27" pos:end="2817:33">cpu_env</name><operator pos:start="2817:34" pos:end="2817:34">)</operator><operator pos:start="2817:35" pos:end="2817:36">-&gt;</operator><name pos:start="2817:37" pos:end="2817:45"><name pos:start="2817:37" pos:end="2817:38">ir</name><index pos:start="2817:39" pos:end="2817:45">[<expr pos:start="2817:40" pos:end="2817:44"><name pos:start="2817:40" pos:end="2817:44">IR_V0</name></expr>]</index></name> <operator pos:start="2817:47" pos:end="2817:47">=</operator> <literal type="number" pos:start="2817:49" pos:end="2817:49">0</literal></expr>;</expr_stmt>

<cpp:else pos:start="2819:1" pos:end="2819:5">#<cpp:directive pos:start="2819:2" pos:end="2819:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="2821:9" pos:end="2821:75">/* Return value is a biased priority to avoid negative numbers.  */</comment>

        <expr_stmt pos:start="2823:9" pos:end="2826:0"><expr pos:start="2823:9" pos:end="2823:22"><name pos:start="2823:9" pos:end="2823:11">ret</name> <operator pos:start="2823:13" pos:end="2823:13">=</operator> <literal type="number" pos:start="2823:15" pos:end="2823:18">20</literal> <operator pos:start="2823:18" pos:end="2823:18">-</operator> <name pos:start="2823:20" pos:end="2823:22">ret</name></expr>;</expr_stmt>

<cpp:endif pos:start="2825:1" pos:end="2825:6">#<cpp:directive pos:start="2825:2" pos:end="2825:6">endif</cpp:directive></cpp:endif>

        <break pos:start="2827:9" pos:end="2827:14">break;</break>

    <case pos:start="2829:5" pos:end="2829:31">case <expr pos:start="2829:10" pos:end="2829:30"><name pos:start="2829:10" pos:end="2829:30">TARGET_NR_setpriority</name></expr>:</case>

        <expr_stmt pos:start="2831:9" pos:end="2831:55"><expr pos:start="2831:9" pos:end="2831:54"><name pos:start="2831:9" pos:end="2831:11">ret</name> <operator pos:start="2831:13" pos:end="2831:13">=</operator> <call pos:start="2831:15" pos:end="2831:54"><name pos:start="2831:15" pos:end="2831:23">get_errno</name><argument_list pos:start="2831:24" pos:end="2831:54">(<argument pos:start="2831:25" pos:end="2831:53"><expr pos:start="2831:25" pos:end="2831:53"><call pos:start="2831:25" pos:end="2831:53"><name pos:start="2831:25" pos:end="2831:35">setpriority</name><argument_list pos:start="2831:36" pos:end="2831:53">(<argument pos:start="2831:37" pos:end="2831:40"><expr pos:start="2831:37" pos:end="2831:40"><name pos:start="2831:37" pos:end="2831:40">arg1</name></expr></argument>, <argument pos:start="2831:43" pos:end="2831:46"><expr pos:start="2831:43" pos:end="2831:46"><name pos:start="2831:43" pos:end="2831:46">arg2</name></expr></argument>, <argument pos:start="2831:49" pos:end="2831:52"><expr pos:start="2831:49" pos:end="2831:52"><name pos:start="2831:49" pos:end="2831:52">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2833:9" pos:end="2836:0">break;</break>

<cpp:ifdef pos:start="2835:1" pos:end="2835:23">#<cpp:directive pos:start="2835:2" pos:end="2835:6">ifdef</cpp:directive> <name pos:start="2835:8" pos:end="2835:23">TARGET_NR_profil</name></cpp:ifdef>

    <case pos:start="2837:5" pos:end="2837:26">case <expr pos:start="2837:10" pos:end="2837:25"><name pos:start="2837:10" pos:end="2837:25">TARGET_NR_profil</name></expr>:</case>

        <goto pos:start="2839:9" pos:end="2842:0">goto <name pos:start="2839:14" pos:end="2839:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2841:1" pos:end="2841:6">#<cpp:directive pos:start="2841:2" pos:end="2841:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2843:5" pos:end="2843:26">case <expr pos:start="2843:10" pos:end="2843:25"><name pos:start="2843:10" pos:end="2843:25">TARGET_NR_statfs</name></expr>:</case>

        <if_stmt pos:start="2845:9" pos:end="2847:24"><if pos:start="2845:9" pos:end="2847:24">if <condition pos:start="2845:12" pos:end="2845:42">(<expr pos:start="2845:13" pos:end="2845:41"><operator pos:start="2845:13" pos:end="2845:13">!</operator><operator pos:start="2845:14" pos:end="2845:14">(</operator><name pos:start="2845:15" pos:end="2845:15">p</name> <operator pos:start="2845:17" pos:end="2845:17">=</operator> <call pos:start="2845:19" pos:end="2845:40"><name pos:start="2845:19" pos:end="2845:34">lock_user_string</name><argument_list pos:start="2845:35" pos:end="2845:40">(<argument pos:start="2845:36" pos:end="2845:39"><expr pos:start="2845:36" pos:end="2845:39"><name pos:start="2845:36" pos:end="2845:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2845:41" pos:end="2845:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2847:13" pos:end="2847:24"><block_content pos:start="2847:13" pos:end="2847:24">

            <goto pos:start="2847:13" pos:end="2847:24">goto <name pos:start="2847:18" pos:end="2847:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2849:9" pos:end="2849:48"><expr pos:start="2849:9" pos:end="2849:47"><name pos:start="2849:9" pos:end="2849:11">ret</name> <operator pos:start="2849:13" pos:end="2849:13">=</operator> <call pos:start="2849:15" pos:end="2849:47"><name pos:start="2849:15" pos:end="2849:23">get_errno</name><argument_list pos:start="2849:24" pos:end="2849:47">(<argument pos:start="2849:25" pos:end="2849:46"><expr pos:start="2849:25" pos:end="2849:46"><call pos:start="2849:25" pos:end="2849:46"><name pos:start="2849:25" pos:end="2849:30">statfs</name><argument_list pos:start="2849:31" pos:end="2849:46">(<argument pos:start="2849:32" pos:end="2849:38"><expr pos:start="2849:32" pos:end="2849:38"><call pos:start="2849:32" pos:end="2849:38"><name pos:start="2849:32" pos:end="2849:35">path</name><argument_list pos:start="2849:36" pos:end="2849:38">(<argument pos:start="2849:37" pos:end="2849:37"><expr pos:start="2849:37" pos:end="2849:37"><name pos:start="2849:37" pos:end="2849:37">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2849:41" pos:end="2849:45"><expr pos:start="2849:41" pos:end="2849:45"><operator pos:start="2849:41" pos:end="2849:41">&amp;</operator><name pos:start="2849:42" pos:end="2849:45">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2851:9" pos:end="2851:32"><expr pos:start="2851:9" pos:end="2851:31"><call pos:start="2851:9" pos:end="2851:31"><name pos:start="2851:9" pos:end="2851:19">unlock_user</name><argument_list pos:start="2851:20" pos:end="2851:31">(<argument pos:start="2851:21" pos:end="2851:21"><expr pos:start="2851:21" pos:end="2851:21"><name pos:start="2851:21" pos:end="2851:21">p</name></expr></argument>, <argument pos:start="2851:24" pos:end="2851:27"><expr pos:start="2851:24" pos:end="2851:27"><name pos:start="2851:24" pos:end="2851:27">arg1</name></expr></argument>, <argument pos:start="2851:30" pos:end="2851:30"><expr pos:start="2851:30" pos:end="2851:30"><literal type="number" pos:start="2851:30" pos:end="2851:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="2853:5" pos:end="2853:19"><name pos:start="2853:5" pos:end="2853:18">convert_statfs</name>:</label>

        <if_stmt pos:start="2855:9" pos:end="2891:9"><if pos:start="2855:9" pos:end="2891:9">if <condition pos:start="2855:12" pos:end="2855:27">(<expr pos:start="2855:13" pos:end="2855:26"><operator pos:start="2855:13" pos:end="2855:13">!</operator><call pos:start="2855:14" pos:end="2855:26"><name pos:start="2855:14" pos:end="2855:21">is_error</name><argument_list pos:start="2855:22" pos:end="2855:26">(<argument pos:start="2855:23" pos:end="2855:25"><expr pos:start="2855:23" pos:end="2855:25"><name pos:start="2855:23" pos:end="2855:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2855:29" pos:end="2891:9">{<block_content pos:start="2857:13" pos:end="2889:53">

            <decl_stmt pos:start="2857:13" pos:end="2857:46"><decl pos:start="2857:13" pos:end="2857:45"><type pos:start="2857:13" pos:end="2857:34"><name pos:start="2857:13" pos:end="2857:32"><name pos:start="2857:13" pos:end="2857:18">struct</name> <name pos:start="2857:20" pos:end="2857:32">target_statfs</name></name> <modifier pos:start="2857:34" pos:end="2857:34">*</modifier></type><name pos:start="2857:35" pos:end="2857:45">target_stfs</name></decl>;</decl_stmt>



            <if_stmt pos:start="2861:13" pos:end="2863:28"><if pos:start="2861:13" pos:end="2863:28">if <condition pos:start="2861:16" pos:end="2861:70">(<expr pos:start="2861:17" pos:end="2861:69"><operator pos:start="2861:17" pos:end="2861:17">!</operator><call pos:start="2861:18" pos:end="2861:69"><name pos:start="2861:18" pos:end="2861:33">lock_user_struct</name><argument_list pos:start="2861:34" pos:end="2861:69">(<argument pos:start="2861:35" pos:end="2861:46"><expr pos:start="2861:35" pos:end="2861:46"><name pos:start="2861:35" pos:end="2861:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2861:49" pos:end="2861:59"><expr pos:start="2861:49" pos:end="2861:59"><name pos:start="2861:49" pos:end="2861:59">target_stfs</name></expr></argument>, <argument pos:start="2861:62" pos:end="2861:65"><expr pos:start="2861:62" pos:end="2861:65"><name pos:start="2861:62" pos:end="2861:65">arg2</name></expr></argument>, <argument pos:start="2861:68" pos:end="2861:68"><expr pos:start="2861:68" pos:end="2861:68"><literal type="number" pos:start="2861:68" pos:end="2861:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2863:17" pos:end="2863:28"><block_content pos:start="2863:17" pos:end="2863:28">

                <goto pos:start="2863:17" pos:end="2863:28">goto <name pos:start="2863:22" pos:end="2863:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2865:13" pos:end="2865:58"><expr pos:start="2865:13" pos:end="2865:57"><call pos:start="2865:13" pos:end="2865:57"><name pos:start="2865:13" pos:end="2865:22">__put_user</name><argument_list pos:start="2865:23" pos:end="2865:57">(<argument pos:start="2865:24" pos:end="2865:34"><expr pos:start="2865:24" pos:end="2865:34"><name pos:start="2865:24" pos:end="2865:34"><name pos:start="2865:24" pos:end="2865:27">stfs</name><operator pos:start="2865:28" pos:end="2865:28">.</operator><name pos:start="2865:29" pos:end="2865:34">f_type</name></name></expr></argument>, <argument pos:start="2865:37" pos:end="2865:56"><expr pos:start="2865:37" pos:end="2865:56"><operator pos:start="2865:37" pos:end="2865:37">&amp;</operator><name pos:start="2865:38" pos:end="2865:56"><name pos:start="2865:38" pos:end="2865:48">target_stfs</name><operator pos:start="2865:49" pos:end="2865:50">-&gt;</operator><name pos:start="2865:51" pos:end="2865:56">f_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2867:13" pos:end="2867:60"><expr pos:start="2867:13" pos:end="2867:59"><call pos:start="2867:13" pos:end="2867:59"><name pos:start="2867:13" pos:end="2867:22">__put_user</name><argument_list pos:start="2867:23" pos:end="2867:59">(<argument pos:start="2867:24" pos:end="2867:35"><expr pos:start="2867:24" pos:end="2867:35"><name pos:start="2867:24" pos:end="2867:35"><name pos:start="2867:24" pos:end="2867:27">stfs</name><operator pos:start="2867:28" pos:end="2867:28">.</operator><name pos:start="2867:29" pos:end="2867:35">f_bsize</name></name></expr></argument>, <argument pos:start="2867:38" pos:end="2867:58"><expr pos:start="2867:38" pos:end="2867:58"><operator pos:start="2867:38" pos:end="2867:38">&amp;</operator><name pos:start="2867:39" pos:end="2867:58"><name pos:start="2867:39" pos:end="2867:49">target_stfs</name><operator pos:start="2867:50" pos:end="2867:51">-&gt;</operator><name pos:start="2867:52" pos:end="2867:58">f_bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2869:13" pos:end="2869:62"><expr pos:start="2869:13" pos:end="2869:61"><call pos:start="2869:13" pos:end="2869:61"><name pos:start="2869:13" pos:end="2869:22">__put_user</name><argument_list pos:start="2869:23" pos:end="2869:61">(<argument pos:start="2869:24" pos:end="2869:36"><expr pos:start="2869:24" pos:end="2869:36"><name pos:start="2869:24" pos:end="2869:36"><name pos:start="2869:24" pos:end="2869:27">stfs</name><operator pos:start="2869:28" pos:end="2869:28">.</operator><name pos:start="2869:29" pos:end="2869:36">f_blocks</name></name></expr></argument>, <argument pos:start="2869:39" pos:end="2869:60"><expr pos:start="2869:39" pos:end="2869:60"><operator pos:start="2869:39" pos:end="2869:39">&amp;</operator><name pos:start="2869:40" pos:end="2869:60"><name pos:start="2869:40" pos:end="2869:50">target_stfs</name><operator pos:start="2869:51" pos:end="2869:52">-&gt;</operator><name pos:start="2869:53" pos:end="2869:60">f_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2871:13" pos:end="2871:60"><expr pos:start="2871:13" pos:end="2871:59"><call pos:start="2871:13" pos:end="2871:59"><name pos:start="2871:13" pos:end="2871:22">__put_user</name><argument_list pos:start="2871:23" pos:end="2871:59">(<argument pos:start="2871:24" pos:end="2871:35"><expr pos:start="2871:24" pos:end="2871:35"><name pos:start="2871:24" pos:end="2871:35"><name pos:start="2871:24" pos:end="2871:27">stfs</name><operator pos:start="2871:28" pos:end="2871:28">.</operator><name pos:start="2871:29" pos:end="2871:35">f_bfree</name></name></expr></argument>, <argument pos:start="2871:38" pos:end="2871:58"><expr pos:start="2871:38" pos:end="2871:58"><operator pos:start="2871:38" pos:end="2871:38">&amp;</operator><name pos:start="2871:39" pos:end="2871:58"><name pos:start="2871:39" pos:end="2871:49">target_stfs</name><operator pos:start="2871:50" pos:end="2871:51">-&gt;</operator><name pos:start="2871:52" pos:end="2871:58">f_bfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2873:13" pos:end="2873:62"><expr pos:start="2873:13" pos:end="2873:61"><call pos:start="2873:13" pos:end="2873:61"><name pos:start="2873:13" pos:end="2873:22">__put_user</name><argument_list pos:start="2873:23" pos:end="2873:61">(<argument pos:start="2873:24" pos:end="2873:36"><expr pos:start="2873:24" pos:end="2873:36"><name pos:start="2873:24" pos:end="2873:36"><name pos:start="2873:24" pos:end="2873:27">stfs</name><operator pos:start="2873:28" pos:end="2873:28">.</operator><name pos:start="2873:29" pos:end="2873:36">f_bavail</name></name></expr></argument>, <argument pos:start="2873:39" pos:end="2873:60"><expr pos:start="2873:39" pos:end="2873:60"><operator pos:start="2873:39" pos:end="2873:39">&amp;</operator><name pos:start="2873:40" pos:end="2873:60"><name pos:start="2873:40" pos:end="2873:50">target_stfs</name><operator pos:start="2873:51" pos:end="2873:52">-&gt;</operator><name pos:start="2873:53" pos:end="2873:60">f_bavail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2875:13" pos:end="2875:60"><expr pos:start="2875:13" pos:end="2875:59"><call pos:start="2875:13" pos:end="2875:59"><name pos:start="2875:13" pos:end="2875:22">__put_user</name><argument_list pos:start="2875:23" pos:end="2875:59">(<argument pos:start="2875:24" pos:end="2875:35"><expr pos:start="2875:24" pos:end="2875:35"><name pos:start="2875:24" pos:end="2875:35"><name pos:start="2875:24" pos:end="2875:27">stfs</name><operator pos:start="2875:28" pos:end="2875:28">.</operator><name pos:start="2875:29" pos:end="2875:35">f_files</name></name></expr></argument>, <argument pos:start="2875:38" pos:end="2875:58"><expr pos:start="2875:38" pos:end="2875:58"><operator pos:start="2875:38" pos:end="2875:38">&amp;</operator><name pos:start="2875:39" pos:end="2875:58"><name pos:start="2875:39" pos:end="2875:49">target_stfs</name><operator pos:start="2875:50" pos:end="2875:51">-&gt;</operator><name pos:start="2875:52" pos:end="2875:58">f_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2877:13" pos:end="2877:60"><expr pos:start="2877:13" pos:end="2877:59"><call pos:start="2877:13" pos:end="2877:59"><name pos:start="2877:13" pos:end="2877:22">__put_user</name><argument_list pos:start="2877:23" pos:end="2877:59">(<argument pos:start="2877:24" pos:end="2877:35"><expr pos:start="2877:24" pos:end="2877:35"><name pos:start="2877:24" pos:end="2877:35"><name pos:start="2877:24" pos:end="2877:27">stfs</name><operator pos:start="2877:28" pos:end="2877:28">.</operator><name pos:start="2877:29" pos:end="2877:35">f_ffree</name></name></expr></argument>, <argument pos:start="2877:38" pos:end="2877:58"><expr pos:start="2877:38" pos:end="2877:58"><operator pos:start="2877:38" pos:end="2877:38">&amp;</operator><name pos:start="2877:39" pos:end="2877:58"><name pos:start="2877:39" pos:end="2877:49">target_stfs</name><operator pos:start="2877:50" pos:end="2877:51">-&gt;</operator><name pos:start="2877:52" pos:end="2877:58">f_ffree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2879:13" pos:end="2879:74"><expr pos:start="2879:13" pos:end="2879:73"><call pos:start="2879:13" pos:end="2879:73"><name pos:start="2879:13" pos:end="2879:22">__put_user</name><argument_list pos:start="2879:23" pos:end="2879:73">(<argument pos:start="2879:24" pos:end="2879:43"><expr pos:start="2879:24" pos:end="2879:43"><name pos:start="2879:24" pos:end="2879:43"><name pos:start="2879:24" pos:end="2879:27">stfs</name><operator pos:start="2879:28" pos:end="2879:28">.</operator><name pos:start="2879:29" pos:end="2879:34">f_fsid</name><operator pos:start="2879:35" pos:end="2879:35">.</operator><name pos:start="2879:36" pos:end="2879:40">__val</name><index pos:start="2879:41" pos:end="2879:43">[<expr pos:start="2879:42" pos:end="2879:42"><literal type="number" pos:start="2879:42" pos:end="2879:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2879:46" pos:end="2879:72"><expr pos:start="2879:46" pos:end="2879:72"><operator pos:start="2879:46" pos:end="2879:46">&amp;</operator><name pos:start="2879:47" pos:end="2879:72"><name pos:start="2879:47" pos:end="2879:57">target_stfs</name><operator pos:start="2879:58" pos:end="2879:59">-&gt;</operator><name pos:start="2879:60" pos:end="2879:65">f_fsid</name><operator pos:start="2879:66" pos:end="2879:66">.</operator><name pos:start="2879:67" pos:end="2879:69">val</name><index pos:start="2879:70" pos:end="2879:72">[<expr pos:start="2879:71" pos:end="2879:71"><literal type="number" pos:start="2879:71" pos:end="2879:71">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2881:13" pos:end="2881:74"><expr pos:start="2881:13" pos:end="2881:73"><call pos:start="2881:13" pos:end="2881:73"><name pos:start="2881:13" pos:end="2881:22">__put_user</name><argument_list pos:start="2881:23" pos:end="2881:73">(<argument pos:start="2881:24" pos:end="2881:43"><expr pos:start="2881:24" pos:end="2881:43"><name pos:start="2881:24" pos:end="2881:43"><name pos:start="2881:24" pos:end="2881:27">stfs</name><operator pos:start="2881:28" pos:end="2881:28">.</operator><name pos:start="2881:29" pos:end="2881:34">f_fsid</name><operator pos:start="2881:35" pos:end="2881:35">.</operator><name pos:start="2881:36" pos:end="2881:40">__val</name><index pos:start="2881:41" pos:end="2881:43">[<expr pos:start="2881:42" pos:end="2881:42"><literal type="number" pos:start="2881:42" pos:end="2881:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2881:46" pos:end="2881:72"><expr pos:start="2881:46" pos:end="2881:72"><operator pos:start="2881:46" pos:end="2881:46">&amp;</operator><name pos:start="2881:47" pos:end="2881:72"><name pos:start="2881:47" pos:end="2881:57">target_stfs</name><operator pos:start="2881:58" pos:end="2881:59">-&gt;</operator><name pos:start="2881:60" pos:end="2881:65">f_fsid</name><operator pos:start="2881:66" pos:end="2881:66">.</operator><name pos:start="2881:67" pos:end="2881:69">val</name><index pos:start="2881:70" pos:end="2881:72">[<expr pos:start="2881:71" pos:end="2881:71"><literal type="number" pos:start="2881:71" pos:end="2881:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2883:13" pos:end="2883:64"><expr pos:start="2883:13" pos:end="2883:63"><call pos:start="2883:13" pos:end="2883:63"><name pos:start="2883:13" pos:end="2883:22">__put_user</name><argument_list pos:start="2883:23" pos:end="2883:63">(<argument pos:start="2883:24" pos:end="2883:37"><expr pos:start="2883:24" pos:end="2883:37"><name pos:start="2883:24" pos:end="2883:37"><name pos:start="2883:24" pos:end="2883:27">stfs</name><operator pos:start="2883:28" pos:end="2883:28">.</operator><name pos:start="2883:29" pos:end="2883:37">f_namelen</name></name></expr></argument>, <argument pos:start="2883:40" pos:end="2883:62"><expr pos:start="2883:40" pos:end="2883:62"><operator pos:start="2883:40" pos:end="2883:40">&amp;</operator><name pos:start="2883:41" pos:end="2883:62"><name pos:start="2883:41" pos:end="2883:51">target_stfs</name><operator pos:start="2883:52" pos:end="2883:53">-&gt;</operator><name pos:start="2883:54" pos:end="2883:62">f_namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2885:13" pos:end="2885:62"><expr pos:start="2885:13" pos:end="2885:61"><call pos:start="2885:13" pos:end="2885:61"><name pos:start="2885:13" pos:end="2885:22">__put_user</name><argument_list pos:start="2885:23" pos:end="2885:61">(<argument pos:start="2885:24" pos:end="2885:36"><expr pos:start="2885:24" pos:end="2885:36"><name pos:start="2885:24" pos:end="2885:36"><name pos:start="2885:24" pos:end="2885:27">stfs</name><operator pos:start="2885:28" pos:end="2885:28">.</operator><name pos:start="2885:29" pos:end="2885:36">f_frsize</name></name></expr></argument>, <argument pos:start="2885:39" pos:end="2885:60"><expr pos:start="2885:39" pos:end="2885:60"><operator pos:start="2885:39" pos:end="2885:39">&amp;</operator><name pos:start="2885:40" pos:end="2885:60"><name pos:start="2885:40" pos:end="2885:50">target_stfs</name><operator pos:start="2885:51" pos:end="2885:52">-&gt;</operator><name pos:start="2885:53" pos:end="2885:60">f_frsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2887:13" pos:end="2887:74"><expr pos:start="2887:13" pos:end="2887:73"><call pos:start="2887:13" pos:end="2887:73"><name pos:start="2887:13" pos:end="2887:18">memset</name><argument_list pos:start="2887:19" pos:end="2887:73">(<argument pos:start="2887:20" pos:end="2887:39"><expr pos:start="2887:20" pos:end="2887:39"><name pos:start="2887:20" pos:end="2887:39"><name pos:start="2887:20" pos:end="2887:30">target_stfs</name><operator pos:start="2887:31" pos:end="2887:32">-&gt;</operator><name pos:start="2887:33" pos:end="2887:39">f_spare</name></name></expr></argument>, <argument pos:start="2887:42" pos:end="2887:42"><expr pos:start="2887:42" pos:end="2887:42"><literal type="number" pos:start="2887:42" pos:end="2887:42">0</literal></expr></argument>, <argument pos:start="2887:45" pos:end="2887:72"><expr pos:start="2887:45" pos:end="2887:72"><sizeof pos:start="2887:45" pos:end="2887:72">sizeof<argument_list pos:start="2887:51" pos:end="2887:72">(<argument pos:start="2887:52" pos:end="2887:71"><expr pos:start="2887:52" pos:end="2887:71"><name pos:start="2887:52" pos:end="2887:71"><name pos:start="2887:52" pos:end="2887:62">target_stfs</name><operator pos:start="2887:63" pos:end="2887:64">-&gt;</operator><name pos:start="2887:65" pos:end="2887:71">f_spare</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2889:13" pos:end="2889:53"><expr pos:start="2889:13" pos:end="2889:52"><call pos:start="2889:13" pos:end="2889:52"><name pos:start="2889:13" pos:end="2889:30">unlock_user_struct</name><argument_list pos:start="2889:31" pos:end="2889:52">(<argument pos:start="2889:32" pos:end="2889:42"><expr pos:start="2889:32" pos:end="2889:42"><name pos:start="2889:32" pos:end="2889:42">target_stfs</name></expr></argument>, <argument pos:start="2889:45" pos:end="2889:48"><expr pos:start="2889:45" pos:end="2889:48"><name pos:start="2889:45" pos:end="2889:48">arg2</name></expr></argument>, <argument pos:start="2889:51" pos:end="2889:51"><expr pos:start="2889:51" pos:end="2889:51"><literal type="number" pos:start="2889:51" pos:end="2889:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2893:9" pos:end="2893:14">break;</break>

    <case pos:start="2895:5" pos:end="2895:27">case <expr pos:start="2895:10" pos:end="2895:26"><name pos:start="2895:10" pos:end="2895:26">TARGET_NR_fstatfs</name></expr>:</case>

        <expr_stmt pos:start="2897:9" pos:end="2897:46"><expr pos:start="2897:9" pos:end="2897:45"><name pos:start="2897:9" pos:end="2897:11">ret</name> <operator pos:start="2897:13" pos:end="2897:13">=</operator> <call pos:start="2897:15" pos:end="2897:45"><name pos:start="2897:15" pos:end="2897:23">get_errno</name><argument_list pos:start="2897:24" pos:end="2897:45">(<argument pos:start="2897:25" pos:end="2897:44"><expr pos:start="2897:25" pos:end="2897:44"><call pos:start="2897:25" pos:end="2897:44"><name pos:start="2897:25" pos:end="2897:31">fstatfs</name><argument_list pos:start="2897:32" pos:end="2897:44">(<argument pos:start="2897:33" pos:end="2897:36"><expr pos:start="2897:33" pos:end="2897:36"><name pos:start="2897:33" pos:end="2897:36">arg1</name></expr></argument>, <argument pos:start="2897:39" pos:end="2897:43"><expr pos:start="2897:39" pos:end="2897:43"><operator pos:start="2897:39" pos:end="2897:39">&amp;</operator><name pos:start="2897:40" pos:end="2897:43">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="2899:9" pos:end="2902:0">goto <name pos:start="2899:14" pos:end="2899:27">convert_statfs</name>;</goto>

<cpp:ifdef pos:start="2901:1" pos:end="2901:25">#<cpp:directive pos:start="2901:2" pos:end="2901:6">ifdef</cpp:directive> <name pos:start="2901:8" pos:end="2901:25">TARGET_NR_statfs64</name></cpp:ifdef>

    <case pos:start="2903:5" pos:end="2903:28">case <expr pos:start="2903:10" pos:end="2903:27"><name pos:start="2903:10" pos:end="2903:27">TARGET_NR_statfs64</name></expr>:</case>

        <if_stmt pos:start="2905:9" pos:end="2907:24"><if pos:start="2905:9" pos:end="2907:24">if <condition pos:start="2905:12" pos:end="2905:42">(<expr pos:start="2905:13" pos:end="2905:41"><operator pos:start="2905:13" pos:end="2905:13">!</operator><operator pos:start="2905:14" pos:end="2905:14">(</operator><name pos:start="2905:15" pos:end="2905:15">p</name> <operator pos:start="2905:17" pos:end="2905:17">=</operator> <call pos:start="2905:19" pos:end="2905:40"><name pos:start="2905:19" pos:end="2905:34">lock_user_string</name><argument_list pos:start="2905:35" pos:end="2905:40">(<argument pos:start="2905:36" pos:end="2905:39"><expr pos:start="2905:36" pos:end="2905:39"><name pos:start="2905:36" pos:end="2905:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2905:41" pos:end="2905:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2907:13" pos:end="2907:24"><block_content pos:start="2907:13" pos:end="2907:24">

            <goto pos:start="2907:13" pos:end="2907:24">goto <name pos:start="2907:18" pos:end="2907:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2909:9" pos:end="2909:48"><expr pos:start="2909:9" pos:end="2909:47"><name pos:start="2909:9" pos:end="2909:11">ret</name> <operator pos:start="2909:13" pos:end="2909:13">=</operator> <call pos:start="2909:15" pos:end="2909:47"><name pos:start="2909:15" pos:end="2909:23">get_errno</name><argument_list pos:start="2909:24" pos:end="2909:47">(<argument pos:start="2909:25" pos:end="2909:46"><expr pos:start="2909:25" pos:end="2909:46"><call pos:start="2909:25" pos:end="2909:46"><name pos:start="2909:25" pos:end="2909:30">statfs</name><argument_list pos:start="2909:31" pos:end="2909:46">(<argument pos:start="2909:32" pos:end="2909:38"><expr pos:start="2909:32" pos:end="2909:38"><call pos:start="2909:32" pos:end="2909:38"><name pos:start="2909:32" pos:end="2909:35">path</name><argument_list pos:start="2909:36" pos:end="2909:38">(<argument pos:start="2909:37" pos:end="2909:37"><expr pos:start="2909:37" pos:end="2909:37"><name pos:start="2909:37" pos:end="2909:37">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2909:41" pos:end="2909:45"><expr pos:start="2909:41" pos:end="2909:45"><operator pos:start="2909:41" pos:end="2909:41">&amp;</operator><name pos:start="2909:42" pos:end="2909:45">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2911:9" pos:end="2911:32"><expr pos:start="2911:9" pos:end="2911:31"><call pos:start="2911:9" pos:end="2911:31"><name pos:start="2911:9" pos:end="2911:19">unlock_user</name><argument_list pos:start="2911:20" pos:end="2911:31">(<argument pos:start="2911:21" pos:end="2911:21"><expr pos:start="2911:21" pos:end="2911:21"><name pos:start="2911:21" pos:end="2911:21">p</name></expr></argument>, <argument pos:start="2911:24" pos:end="2911:27"><expr pos:start="2911:24" pos:end="2911:27"><name pos:start="2911:24" pos:end="2911:27">arg1</name></expr></argument>, <argument pos:start="2911:30" pos:end="2911:30"><expr pos:start="2911:30" pos:end="2911:30"><literal type="number" pos:start="2911:30" pos:end="2911:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="2913:5" pos:end="2913:21"><name pos:start="2913:5" pos:end="2913:20">convert_statfs64</name>:</label>

        <if_stmt pos:start="2915:9" pos:end="2951:9"><if pos:start="2915:9" pos:end="2951:9">if <condition pos:start="2915:12" pos:end="2915:27">(<expr pos:start="2915:13" pos:end="2915:26"><operator pos:start="2915:13" pos:end="2915:13">!</operator><call pos:start="2915:14" pos:end="2915:26"><name pos:start="2915:14" pos:end="2915:21">is_error</name><argument_list pos:start="2915:22" pos:end="2915:26">(<argument pos:start="2915:23" pos:end="2915:25"><expr pos:start="2915:23" pos:end="2915:25"><name pos:start="2915:23" pos:end="2915:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2915:29" pos:end="2951:9">{<block_content pos:start="2917:13" pos:end="2949:53">

            <decl_stmt pos:start="2917:13" pos:end="2917:48"><decl pos:start="2917:13" pos:end="2917:47"><type pos:start="2917:13" pos:end="2917:36"><name pos:start="2917:13" pos:end="2917:34"><name pos:start="2917:13" pos:end="2917:18">struct</name> <name pos:start="2917:20" pos:end="2917:34">target_statfs64</name></name> <modifier pos:start="2917:36" pos:end="2917:36">*</modifier></type><name pos:start="2917:37" pos:end="2917:47">target_stfs</name></decl>;</decl_stmt>



            <if_stmt pos:start="2921:13" pos:end="2923:28"><if pos:start="2921:13" pos:end="2923:28">if <condition pos:start="2921:16" pos:end="2921:70">(<expr pos:start="2921:17" pos:end="2921:69"><operator pos:start="2921:17" pos:end="2921:17">!</operator><call pos:start="2921:18" pos:end="2921:69"><name pos:start="2921:18" pos:end="2921:33">lock_user_struct</name><argument_list pos:start="2921:34" pos:end="2921:69">(<argument pos:start="2921:35" pos:end="2921:46"><expr pos:start="2921:35" pos:end="2921:46"><name pos:start="2921:35" pos:end="2921:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2921:49" pos:end="2921:59"><expr pos:start="2921:49" pos:end="2921:59"><name pos:start="2921:49" pos:end="2921:59">target_stfs</name></expr></argument>, <argument pos:start="2921:62" pos:end="2921:65"><expr pos:start="2921:62" pos:end="2921:65"><name pos:start="2921:62" pos:end="2921:65">arg3</name></expr></argument>, <argument pos:start="2921:68" pos:end="2921:68"><expr pos:start="2921:68" pos:end="2921:68"><literal type="number" pos:start="2921:68" pos:end="2921:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2923:17" pos:end="2923:28"><block_content pos:start="2923:17" pos:end="2923:28">

                <goto pos:start="2923:17" pos:end="2923:28">goto <name pos:start="2923:22" pos:end="2923:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2925:13" pos:end="2925:58"><expr pos:start="2925:13" pos:end="2925:57"><call pos:start="2925:13" pos:end="2925:57"><name pos:start="2925:13" pos:end="2925:22">__put_user</name><argument_list pos:start="2925:23" pos:end="2925:57">(<argument pos:start="2925:24" pos:end="2925:34"><expr pos:start="2925:24" pos:end="2925:34"><name pos:start="2925:24" pos:end="2925:34"><name pos:start="2925:24" pos:end="2925:27">stfs</name><operator pos:start="2925:28" pos:end="2925:28">.</operator><name pos:start="2925:29" pos:end="2925:34">f_type</name></name></expr></argument>, <argument pos:start="2925:37" pos:end="2925:56"><expr pos:start="2925:37" pos:end="2925:56"><operator pos:start="2925:37" pos:end="2925:37">&amp;</operator><name pos:start="2925:38" pos:end="2925:56"><name pos:start="2925:38" pos:end="2925:48">target_stfs</name><operator pos:start="2925:49" pos:end="2925:50">-&gt;</operator><name pos:start="2925:51" pos:end="2925:56">f_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2927:13" pos:end="2927:60"><expr pos:start="2927:13" pos:end="2927:59"><call pos:start="2927:13" pos:end="2927:59"><name pos:start="2927:13" pos:end="2927:22">__put_user</name><argument_list pos:start="2927:23" pos:end="2927:59">(<argument pos:start="2927:24" pos:end="2927:35"><expr pos:start="2927:24" pos:end="2927:35"><name pos:start="2927:24" pos:end="2927:35"><name pos:start="2927:24" pos:end="2927:27">stfs</name><operator pos:start="2927:28" pos:end="2927:28">.</operator><name pos:start="2927:29" pos:end="2927:35">f_bsize</name></name></expr></argument>, <argument pos:start="2927:38" pos:end="2927:58"><expr pos:start="2927:38" pos:end="2927:58"><operator pos:start="2927:38" pos:end="2927:38">&amp;</operator><name pos:start="2927:39" pos:end="2927:58"><name pos:start="2927:39" pos:end="2927:49">target_stfs</name><operator pos:start="2927:50" pos:end="2927:51">-&gt;</operator><name pos:start="2927:52" pos:end="2927:58">f_bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2929:13" pos:end="2929:62"><expr pos:start="2929:13" pos:end="2929:61"><call pos:start="2929:13" pos:end="2929:61"><name pos:start="2929:13" pos:end="2929:22">__put_user</name><argument_list pos:start="2929:23" pos:end="2929:61">(<argument pos:start="2929:24" pos:end="2929:36"><expr pos:start="2929:24" pos:end="2929:36"><name pos:start="2929:24" pos:end="2929:36"><name pos:start="2929:24" pos:end="2929:27">stfs</name><operator pos:start="2929:28" pos:end="2929:28">.</operator><name pos:start="2929:29" pos:end="2929:36">f_blocks</name></name></expr></argument>, <argument pos:start="2929:39" pos:end="2929:60"><expr pos:start="2929:39" pos:end="2929:60"><operator pos:start="2929:39" pos:end="2929:39">&amp;</operator><name pos:start="2929:40" pos:end="2929:60"><name pos:start="2929:40" pos:end="2929:50">target_stfs</name><operator pos:start="2929:51" pos:end="2929:52">-&gt;</operator><name pos:start="2929:53" pos:end="2929:60">f_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2931:13" pos:end="2931:60"><expr pos:start="2931:13" pos:end="2931:59"><call pos:start="2931:13" pos:end="2931:59"><name pos:start="2931:13" pos:end="2931:22">__put_user</name><argument_list pos:start="2931:23" pos:end="2931:59">(<argument pos:start="2931:24" pos:end="2931:35"><expr pos:start="2931:24" pos:end="2931:35"><name pos:start="2931:24" pos:end="2931:35"><name pos:start="2931:24" pos:end="2931:27">stfs</name><operator pos:start="2931:28" pos:end="2931:28">.</operator><name pos:start="2931:29" pos:end="2931:35">f_bfree</name></name></expr></argument>, <argument pos:start="2931:38" pos:end="2931:58"><expr pos:start="2931:38" pos:end="2931:58"><operator pos:start="2931:38" pos:end="2931:38">&amp;</operator><name pos:start="2931:39" pos:end="2931:58"><name pos:start="2931:39" pos:end="2931:49">target_stfs</name><operator pos:start="2931:50" pos:end="2931:51">-&gt;</operator><name pos:start="2931:52" pos:end="2931:58">f_bfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2933:13" pos:end="2933:62"><expr pos:start="2933:13" pos:end="2933:61"><call pos:start="2933:13" pos:end="2933:61"><name pos:start="2933:13" pos:end="2933:22">__put_user</name><argument_list pos:start="2933:23" pos:end="2933:61">(<argument pos:start="2933:24" pos:end="2933:36"><expr pos:start="2933:24" pos:end="2933:36"><name pos:start="2933:24" pos:end="2933:36"><name pos:start="2933:24" pos:end="2933:27">stfs</name><operator pos:start="2933:28" pos:end="2933:28">.</operator><name pos:start="2933:29" pos:end="2933:36">f_bavail</name></name></expr></argument>, <argument pos:start="2933:39" pos:end="2933:60"><expr pos:start="2933:39" pos:end="2933:60"><operator pos:start="2933:39" pos:end="2933:39">&amp;</operator><name pos:start="2933:40" pos:end="2933:60"><name pos:start="2933:40" pos:end="2933:50">target_stfs</name><operator pos:start="2933:51" pos:end="2933:52">-&gt;</operator><name pos:start="2933:53" pos:end="2933:60">f_bavail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2935:13" pos:end="2935:60"><expr pos:start="2935:13" pos:end="2935:59"><call pos:start="2935:13" pos:end="2935:59"><name pos:start="2935:13" pos:end="2935:22">__put_user</name><argument_list pos:start="2935:23" pos:end="2935:59">(<argument pos:start="2935:24" pos:end="2935:35"><expr pos:start="2935:24" pos:end="2935:35"><name pos:start="2935:24" pos:end="2935:35"><name pos:start="2935:24" pos:end="2935:27">stfs</name><operator pos:start="2935:28" pos:end="2935:28">.</operator><name pos:start="2935:29" pos:end="2935:35">f_files</name></name></expr></argument>, <argument pos:start="2935:38" pos:end="2935:58"><expr pos:start="2935:38" pos:end="2935:58"><operator pos:start="2935:38" pos:end="2935:38">&amp;</operator><name pos:start="2935:39" pos:end="2935:58"><name pos:start="2935:39" pos:end="2935:49">target_stfs</name><operator pos:start="2935:50" pos:end="2935:51">-&gt;</operator><name pos:start="2935:52" pos:end="2935:58">f_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2937:13" pos:end="2937:60"><expr pos:start="2937:13" pos:end="2937:59"><call pos:start="2937:13" pos:end="2937:59"><name pos:start="2937:13" pos:end="2937:22">__put_user</name><argument_list pos:start="2937:23" pos:end="2937:59">(<argument pos:start="2937:24" pos:end="2937:35"><expr pos:start="2937:24" pos:end="2937:35"><name pos:start="2937:24" pos:end="2937:35"><name pos:start="2937:24" pos:end="2937:27">stfs</name><operator pos:start="2937:28" pos:end="2937:28">.</operator><name pos:start="2937:29" pos:end="2937:35">f_ffree</name></name></expr></argument>, <argument pos:start="2937:38" pos:end="2937:58"><expr pos:start="2937:38" pos:end="2937:58"><operator pos:start="2937:38" pos:end="2937:38">&amp;</operator><name pos:start="2937:39" pos:end="2937:58"><name pos:start="2937:39" pos:end="2937:49">target_stfs</name><operator pos:start="2937:50" pos:end="2937:51">-&gt;</operator><name pos:start="2937:52" pos:end="2937:58">f_ffree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2939:13" pos:end="2939:74"><expr pos:start="2939:13" pos:end="2939:73"><call pos:start="2939:13" pos:end="2939:73"><name pos:start="2939:13" pos:end="2939:22">__put_user</name><argument_list pos:start="2939:23" pos:end="2939:73">(<argument pos:start="2939:24" pos:end="2939:43"><expr pos:start="2939:24" pos:end="2939:43"><name pos:start="2939:24" pos:end="2939:43"><name pos:start="2939:24" pos:end="2939:27">stfs</name><operator pos:start="2939:28" pos:end="2939:28">.</operator><name pos:start="2939:29" pos:end="2939:34">f_fsid</name><operator pos:start="2939:35" pos:end="2939:35">.</operator><name pos:start="2939:36" pos:end="2939:40">__val</name><index pos:start="2939:41" pos:end="2939:43">[<expr pos:start="2939:42" pos:end="2939:42"><literal type="number" pos:start="2939:42" pos:end="2939:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2939:46" pos:end="2939:72"><expr pos:start="2939:46" pos:end="2939:72"><operator pos:start="2939:46" pos:end="2939:46">&amp;</operator><name pos:start="2939:47" pos:end="2939:72"><name pos:start="2939:47" pos:end="2939:57">target_stfs</name><operator pos:start="2939:58" pos:end="2939:59">-&gt;</operator><name pos:start="2939:60" pos:end="2939:65">f_fsid</name><operator pos:start="2939:66" pos:end="2939:66">.</operator><name pos:start="2939:67" pos:end="2939:69">val</name><index pos:start="2939:70" pos:end="2939:72">[<expr pos:start="2939:71" pos:end="2939:71"><literal type="number" pos:start="2939:71" pos:end="2939:71">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2941:13" pos:end="2941:74"><expr pos:start="2941:13" pos:end="2941:73"><call pos:start="2941:13" pos:end="2941:73"><name pos:start="2941:13" pos:end="2941:22">__put_user</name><argument_list pos:start="2941:23" pos:end="2941:73">(<argument pos:start="2941:24" pos:end="2941:43"><expr pos:start="2941:24" pos:end="2941:43"><name pos:start="2941:24" pos:end="2941:43"><name pos:start="2941:24" pos:end="2941:27">stfs</name><operator pos:start="2941:28" pos:end="2941:28">.</operator><name pos:start="2941:29" pos:end="2941:34">f_fsid</name><operator pos:start="2941:35" pos:end="2941:35">.</operator><name pos:start="2941:36" pos:end="2941:40">__val</name><index pos:start="2941:41" pos:end="2941:43">[<expr pos:start="2941:42" pos:end="2941:42"><literal type="number" pos:start="2941:42" pos:end="2941:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2941:46" pos:end="2941:72"><expr pos:start="2941:46" pos:end="2941:72"><operator pos:start="2941:46" pos:end="2941:46">&amp;</operator><name pos:start="2941:47" pos:end="2941:72"><name pos:start="2941:47" pos:end="2941:57">target_stfs</name><operator pos:start="2941:58" pos:end="2941:59">-&gt;</operator><name pos:start="2941:60" pos:end="2941:65">f_fsid</name><operator pos:start="2941:66" pos:end="2941:66">.</operator><name pos:start="2941:67" pos:end="2941:69">val</name><index pos:start="2941:70" pos:end="2941:72">[<expr pos:start="2941:71" pos:end="2941:71"><literal type="number" pos:start="2941:71" pos:end="2941:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2943:13" pos:end="2943:64"><expr pos:start="2943:13" pos:end="2943:63"><call pos:start="2943:13" pos:end="2943:63"><name pos:start="2943:13" pos:end="2943:22">__put_user</name><argument_list pos:start="2943:23" pos:end="2943:63">(<argument pos:start="2943:24" pos:end="2943:37"><expr pos:start="2943:24" pos:end="2943:37"><name pos:start="2943:24" pos:end="2943:37"><name pos:start="2943:24" pos:end="2943:27">stfs</name><operator pos:start="2943:28" pos:end="2943:28">.</operator><name pos:start="2943:29" pos:end="2943:37">f_namelen</name></name></expr></argument>, <argument pos:start="2943:40" pos:end="2943:62"><expr pos:start="2943:40" pos:end="2943:62"><operator pos:start="2943:40" pos:end="2943:40">&amp;</operator><name pos:start="2943:41" pos:end="2943:62"><name pos:start="2943:41" pos:end="2943:51">target_stfs</name><operator pos:start="2943:52" pos:end="2943:53">-&gt;</operator><name pos:start="2943:54" pos:end="2943:62">f_namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2945:13" pos:end="2945:62"><expr pos:start="2945:13" pos:end="2945:61"><call pos:start="2945:13" pos:end="2945:61"><name pos:start="2945:13" pos:end="2945:22">__put_user</name><argument_list pos:start="2945:23" pos:end="2945:61">(<argument pos:start="2945:24" pos:end="2945:36"><expr pos:start="2945:24" pos:end="2945:36"><name pos:start="2945:24" pos:end="2945:36"><name pos:start="2945:24" pos:end="2945:27">stfs</name><operator pos:start="2945:28" pos:end="2945:28">.</operator><name pos:start="2945:29" pos:end="2945:36">f_frsize</name></name></expr></argument>, <argument pos:start="2945:39" pos:end="2945:60"><expr pos:start="2945:39" pos:end="2945:60"><operator pos:start="2945:39" pos:end="2945:39">&amp;</operator><name pos:start="2945:40" pos:end="2945:60"><name pos:start="2945:40" pos:end="2945:50">target_stfs</name><operator pos:start="2945:51" pos:end="2945:52">-&gt;</operator><name pos:start="2945:53" pos:end="2945:60">f_frsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2947:13" pos:end="2947:74"><expr pos:start="2947:13" pos:end="2947:73"><call pos:start="2947:13" pos:end="2947:73"><name pos:start="2947:13" pos:end="2947:18">memset</name><argument_list pos:start="2947:19" pos:end="2947:73">(<argument pos:start="2947:20" pos:end="2947:39"><expr pos:start="2947:20" pos:end="2947:39"><name pos:start="2947:20" pos:end="2947:39"><name pos:start="2947:20" pos:end="2947:30">target_stfs</name><operator pos:start="2947:31" pos:end="2947:32">-&gt;</operator><name pos:start="2947:33" pos:end="2947:39">f_spare</name></name></expr></argument>, <argument pos:start="2947:42" pos:end="2947:42"><expr pos:start="2947:42" pos:end="2947:42"><literal type="number" pos:start="2947:42" pos:end="2947:42">0</literal></expr></argument>, <argument pos:start="2947:45" pos:end="2947:72"><expr pos:start="2947:45" pos:end="2947:72"><sizeof pos:start="2947:45" pos:end="2947:72">sizeof<argument_list pos:start="2947:51" pos:end="2947:72">(<argument pos:start="2947:52" pos:end="2947:71"><expr pos:start="2947:52" pos:end="2947:71"><name pos:start="2947:52" pos:end="2947:71"><name pos:start="2947:52" pos:end="2947:62">target_stfs</name><operator pos:start="2947:63" pos:end="2947:64">-&gt;</operator><name pos:start="2947:65" pos:end="2947:71">f_spare</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2949:13" pos:end="2949:53"><expr pos:start="2949:13" pos:end="2949:52"><call pos:start="2949:13" pos:end="2949:52"><name pos:start="2949:13" pos:end="2949:30">unlock_user_struct</name><argument_list pos:start="2949:31" pos:end="2949:52">(<argument pos:start="2949:32" pos:end="2949:42"><expr pos:start="2949:32" pos:end="2949:42"><name pos:start="2949:32" pos:end="2949:42">target_stfs</name></expr></argument>, <argument pos:start="2949:45" pos:end="2949:48"><expr pos:start="2949:45" pos:end="2949:48"><name pos:start="2949:45" pos:end="2949:48">arg3</name></expr></argument>, <argument pos:start="2949:51" pos:end="2949:51"><expr pos:start="2949:51" pos:end="2949:51"><literal type="number" pos:start="2949:51" pos:end="2949:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2953:9" pos:end="2953:14">break;</break>

    <case pos:start="2955:5" pos:end="2955:29">case <expr pos:start="2955:10" pos:end="2955:28"><name pos:start="2955:10" pos:end="2955:28">TARGET_NR_fstatfs64</name></expr>:</case>

        <expr_stmt pos:start="2957:9" pos:end="2957:46"><expr pos:start="2957:9" pos:end="2957:45"><name pos:start="2957:9" pos:end="2957:11">ret</name> <operator pos:start="2957:13" pos:end="2957:13">=</operator> <call pos:start="2957:15" pos:end="2957:45"><name pos:start="2957:15" pos:end="2957:23">get_errno</name><argument_list pos:start="2957:24" pos:end="2957:45">(<argument pos:start="2957:25" pos:end="2957:44"><expr pos:start="2957:25" pos:end="2957:44"><call pos:start="2957:25" pos:end="2957:44"><name pos:start="2957:25" pos:end="2957:31">fstatfs</name><argument_list pos:start="2957:32" pos:end="2957:44">(<argument pos:start="2957:33" pos:end="2957:36"><expr pos:start="2957:33" pos:end="2957:36"><name pos:start="2957:33" pos:end="2957:36">arg1</name></expr></argument>, <argument pos:start="2957:39" pos:end="2957:43"><expr pos:start="2957:39" pos:end="2957:43"><operator pos:start="2957:39" pos:end="2957:39">&amp;</operator><name pos:start="2957:40" pos:end="2957:43">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="2959:9" pos:end="2964:0">goto <name pos:start="2959:14" pos:end="2959:29">convert_statfs64</name>;</goto>

<cpp:endif pos:start="2961:1" pos:end="2961:6">#<cpp:directive pos:start="2961:2" pos:end="2961:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2963:1" pos:end="2963:23">#<cpp:directive pos:start="2963:2" pos:end="2963:6">ifdef</cpp:directive> <name pos:start="2963:8" pos:end="2963:23">TARGET_NR_ioperm</name></cpp:ifdef>

    <case pos:start="2965:5" pos:end="2965:26">case <expr pos:start="2965:10" pos:end="2965:25"><name pos:start="2965:10" pos:end="2965:25">TARGET_NR_ioperm</name></expr>:</case>

        <goto pos:start="2967:9" pos:end="2972:0">goto <name pos:start="2967:14" pos:end="2967:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2969:1" pos:end="2969:6">#<cpp:directive pos:start="2969:2" pos:end="2969:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2971:1" pos:end="2971:27">#<cpp:directive pos:start="2971:2" pos:end="2971:6">ifdef</cpp:directive> <name pos:start="2971:8" pos:end="2971:27">TARGET_NR_socketcall</name></cpp:ifdef>

    <case pos:start="2973:5" pos:end="2973:30">case <expr pos:start="2973:10" pos:end="2973:29"><name pos:start="2973:10" pos:end="2973:29">TARGET_NR_socketcall</name></expr>:</case>

        <expr_stmt pos:start="2975:9" pos:end="2975:40"><expr pos:start="2975:9" pos:end="2975:39"><name pos:start="2975:9" pos:end="2975:11">ret</name> <operator pos:start="2975:13" pos:end="2975:13">=</operator> <call pos:start="2975:15" pos:end="2975:39"><name pos:start="2975:15" pos:end="2975:27">do_socketcall</name><argument_list pos:start="2975:28" pos:end="2975:39">(<argument pos:start="2975:29" pos:end="2975:32"><expr pos:start="2975:29" pos:end="2975:32"><name pos:start="2975:29" pos:end="2975:32">arg1</name></expr></argument>, <argument pos:start="2975:35" pos:end="2975:38"><expr pos:start="2975:35" pos:end="2975:38"><name pos:start="2975:35" pos:end="2975:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2977:9" pos:end="2982:0">break;</break>

<cpp:endif pos:start="2979:1" pos:end="2979:6">#<cpp:directive pos:start="2979:2" pos:end="2979:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2981:1" pos:end="2981:23">#<cpp:directive pos:start="2981:2" pos:end="2981:6">ifdef</cpp:directive> <name pos:start="2981:8" pos:end="2981:23">TARGET_NR_accept</name></cpp:ifdef>

    <case pos:start="2983:5" pos:end="2983:26">case <expr pos:start="2983:10" pos:end="2983:25"><name pos:start="2983:10" pos:end="2983:25">TARGET_NR_accept</name></expr>:</case>

        <expr_stmt pos:start="2985:9" pos:end="2985:42"><expr pos:start="2985:9" pos:end="2985:41"><name pos:start="2985:9" pos:end="2985:11">ret</name> <operator pos:start="2985:13" pos:end="2985:13">=</operator> <call pos:start="2985:15" pos:end="2985:41"><name pos:start="2985:15" pos:end="2985:23">do_accept</name><argument_list pos:start="2985:24" pos:end="2985:41">(<argument pos:start="2985:25" pos:end="2985:28"><expr pos:start="2985:25" pos:end="2985:28"><name pos:start="2985:25" pos:end="2985:28">arg1</name></expr></argument>, <argument pos:start="2985:31" pos:end="2985:34"><expr pos:start="2985:31" pos:end="2985:34"><name pos:start="2985:31" pos:end="2985:34">arg2</name></expr></argument>, <argument pos:start="2985:37" pos:end="2985:40"><expr pos:start="2985:37" pos:end="2985:40"><name pos:start="2985:37" pos:end="2985:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2987:9" pos:end="2992:0">break;</break>

<cpp:endif pos:start="2989:1" pos:end="2989:6">#<cpp:directive pos:start="2989:2" pos:end="2989:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2991:1" pos:end="2991:21">#<cpp:directive pos:start="2991:2" pos:end="2991:6">ifdef</cpp:directive> <name pos:start="2991:8" pos:end="2991:21">TARGET_NR_bind</name></cpp:ifdef>

    <case pos:start="2993:5" pos:end="2993:24">case <expr pos:start="2993:10" pos:end="2993:23"><name pos:start="2993:10" pos:end="2993:23">TARGET_NR_bind</name></expr>:</case>

        <expr_stmt pos:start="2995:9" pos:end="2995:40"><expr pos:start="2995:9" pos:end="2995:39"><name pos:start="2995:9" pos:end="2995:11">ret</name> <operator pos:start="2995:13" pos:end="2995:13">=</operator> <call pos:start="2995:15" pos:end="2995:39"><name pos:start="2995:15" pos:end="2995:21">do_bind</name><argument_list pos:start="2995:22" pos:end="2995:39">(<argument pos:start="2995:23" pos:end="2995:26"><expr pos:start="2995:23" pos:end="2995:26"><name pos:start="2995:23" pos:end="2995:26">arg1</name></expr></argument>, <argument pos:start="2995:29" pos:end="2995:32"><expr pos:start="2995:29" pos:end="2995:32"><name pos:start="2995:29" pos:end="2995:32">arg2</name></expr></argument>, <argument pos:start="2995:35" pos:end="2995:38"><expr pos:start="2995:35" pos:end="2995:38"><name pos:start="2995:35" pos:end="2995:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2997:9" pos:end="3002:0">break;</break>

<cpp:endif pos:start="2999:1" pos:end="2999:6">#<cpp:directive pos:start="2999:2" pos:end="2999:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3001:1" pos:end="3001:24">#<cpp:directive pos:start="3001:2" pos:end="3001:6">ifdef</cpp:directive> <name pos:start="3001:8" pos:end="3001:24">TARGET_NR_connect</name></cpp:ifdef>

    <case pos:start="3003:5" pos:end="3003:27">case <expr pos:start="3003:10" pos:end="3003:26"><name pos:start="3003:10" pos:end="3003:26">TARGET_NR_connect</name></expr>:</case>

        <expr_stmt pos:start="3005:9" pos:end="3005:43"><expr pos:start="3005:9" pos:end="3005:42"><name pos:start="3005:9" pos:end="3005:11">ret</name> <operator pos:start="3005:13" pos:end="3005:13">=</operator> <call pos:start="3005:15" pos:end="3005:42"><name pos:start="3005:15" pos:end="3005:24">do_connect</name><argument_list pos:start="3005:25" pos:end="3005:42">(<argument pos:start="3005:26" pos:end="3005:29"><expr pos:start="3005:26" pos:end="3005:29"><name pos:start="3005:26" pos:end="3005:29">arg1</name></expr></argument>, <argument pos:start="3005:32" pos:end="3005:35"><expr pos:start="3005:32" pos:end="3005:35"><name pos:start="3005:32" pos:end="3005:35">arg2</name></expr></argument>, <argument pos:start="3005:38" pos:end="3005:41"><expr pos:start="3005:38" pos:end="3005:41"><name pos:start="3005:38" pos:end="3005:41">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3007:9" pos:end="3012:0">break;</break>

<cpp:endif pos:start="3009:1" pos:end="3009:6">#<cpp:directive pos:start="3009:2" pos:end="3009:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3011:1" pos:end="3011:28">#<cpp:directive pos:start="3011:2" pos:end="3011:6">ifdef</cpp:directive> <name pos:start="3011:8" pos:end="3011:28">TARGET_NR_getpeername</name></cpp:ifdef>

    <case pos:start="3013:5" pos:end="3013:31">case <expr pos:start="3013:10" pos:end="3013:30"><name pos:start="3013:10" pos:end="3013:30">TARGET_NR_getpeername</name></expr>:</case>

        <expr_stmt pos:start="3015:9" pos:end="3015:47"><expr pos:start="3015:9" pos:end="3015:46"><name pos:start="3015:9" pos:end="3015:11">ret</name> <operator pos:start="3015:13" pos:end="3015:13">=</operator> <call pos:start="3015:15" pos:end="3015:46"><name pos:start="3015:15" pos:end="3015:28">do_getpeername</name><argument_list pos:start="3015:29" pos:end="3015:46">(<argument pos:start="3015:30" pos:end="3015:33"><expr pos:start="3015:30" pos:end="3015:33"><name pos:start="3015:30" pos:end="3015:33">arg1</name></expr></argument>, <argument pos:start="3015:36" pos:end="3015:39"><expr pos:start="3015:36" pos:end="3015:39"><name pos:start="3015:36" pos:end="3015:39">arg2</name></expr></argument>, <argument pos:start="3015:42" pos:end="3015:45"><expr pos:start="3015:42" pos:end="3015:45"><name pos:start="3015:42" pos:end="3015:45">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3017:9" pos:end="3022:0">break;</break>

<cpp:endif pos:start="3019:1" pos:end="3019:6">#<cpp:directive pos:start="3019:2" pos:end="3019:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3021:1" pos:end="3021:28">#<cpp:directive pos:start="3021:2" pos:end="3021:6">ifdef</cpp:directive> <name pos:start="3021:8" pos:end="3021:28">TARGET_NR_getsockname</name></cpp:ifdef>

    <case pos:start="3023:5" pos:end="3023:31">case <expr pos:start="3023:10" pos:end="3023:30"><name pos:start="3023:10" pos:end="3023:30">TARGET_NR_getsockname</name></expr>:</case>

        <expr_stmt pos:start="3025:9" pos:end="3025:47"><expr pos:start="3025:9" pos:end="3025:46"><name pos:start="3025:9" pos:end="3025:11">ret</name> <operator pos:start="3025:13" pos:end="3025:13">=</operator> <call pos:start="3025:15" pos:end="3025:46"><name pos:start="3025:15" pos:end="3025:28">do_getsockname</name><argument_list pos:start="3025:29" pos:end="3025:46">(<argument pos:start="3025:30" pos:end="3025:33"><expr pos:start="3025:30" pos:end="3025:33"><name pos:start="3025:30" pos:end="3025:33">arg1</name></expr></argument>, <argument pos:start="3025:36" pos:end="3025:39"><expr pos:start="3025:36" pos:end="3025:39"><name pos:start="3025:36" pos:end="3025:39">arg2</name></expr></argument>, <argument pos:start="3025:42" pos:end="3025:45"><expr pos:start="3025:42" pos:end="3025:45"><name pos:start="3025:42" pos:end="3025:45">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3027:9" pos:end="3032:0">break;</break>

<cpp:endif pos:start="3029:1" pos:end="3029:6">#<cpp:directive pos:start="3029:2" pos:end="3029:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3031:1" pos:end="3031:27">#<cpp:directive pos:start="3031:2" pos:end="3031:6">ifdef</cpp:directive> <name pos:start="3031:8" pos:end="3031:27">TARGET_NR_getsockopt</name></cpp:ifdef>

    <case pos:start="3033:5" pos:end="3033:30">case <expr pos:start="3033:10" pos:end="3033:29"><name pos:start="3033:10" pos:end="3033:29">TARGET_NR_getsockopt</name></expr>:</case>

        <expr_stmt pos:start="3035:9" pos:end="3035:58"><expr pos:start="3035:9" pos:end="3035:57"><name pos:start="3035:9" pos:end="3035:11">ret</name> <operator pos:start="3035:13" pos:end="3035:13">=</operator> <call pos:start="3035:15" pos:end="3035:57"><name pos:start="3035:15" pos:end="3035:27">do_getsockopt</name><argument_list pos:start="3035:28" pos:end="3035:57">(<argument pos:start="3035:29" pos:end="3035:32"><expr pos:start="3035:29" pos:end="3035:32"><name pos:start="3035:29" pos:end="3035:32">arg1</name></expr></argument>, <argument pos:start="3035:35" pos:end="3035:38"><expr pos:start="3035:35" pos:end="3035:38"><name pos:start="3035:35" pos:end="3035:38">arg2</name></expr></argument>, <argument pos:start="3035:41" pos:end="3035:44"><expr pos:start="3035:41" pos:end="3035:44"><name pos:start="3035:41" pos:end="3035:44">arg3</name></expr></argument>, <argument pos:start="3035:47" pos:end="3035:50"><expr pos:start="3035:47" pos:end="3035:50"><name pos:start="3035:47" pos:end="3035:50">arg4</name></expr></argument>, <argument pos:start="3035:53" pos:end="3035:56"><expr pos:start="3035:53" pos:end="3035:56"><name pos:start="3035:53" pos:end="3035:56">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3037:9" pos:end="3042:0">break;</break>

<cpp:endif pos:start="3039:1" pos:end="3039:6">#<cpp:directive pos:start="3039:2" pos:end="3039:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3041:1" pos:end="3041:23">#<cpp:directive pos:start="3041:2" pos:end="3041:6">ifdef</cpp:directive> <name pos:start="3041:8" pos:end="3041:23">TARGET_NR_listen</name></cpp:ifdef>

    <case pos:start="3043:5" pos:end="3043:26">case <expr pos:start="3043:10" pos:end="3043:25"><name pos:start="3043:10" pos:end="3043:25">TARGET_NR_listen</name></expr>:</case>

        <expr_stmt pos:start="3045:9" pos:end="3045:44"><expr pos:start="3045:9" pos:end="3045:43"><name pos:start="3045:9" pos:end="3045:11">ret</name> <operator pos:start="3045:13" pos:end="3045:13">=</operator> <call pos:start="3045:15" pos:end="3045:43"><name pos:start="3045:15" pos:end="3045:23">get_errno</name><argument_list pos:start="3045:24" pos:end="3045:43">(<argument pos:start="3045:25" pos:end="3045:42"><expr pos:start="3045:25" pos:end="3045:42"><call pos:start="3045:25" pos:end="3045:42"><name pos:start="3045:25" pos:end="3045:30">listen</name><argument_list pos:start="3045:31" pos:end="3045:42">(<argument pos:start="3045:32" pos:end="3045:35"><expr pos:start="3045:32" pos:end="3045:35"><name pos:start="3045:32" pos:end="3045:35">arg1</name></expr></argument>, <argument pos:start="3045:38" pos:end="3045:41"><expr pos:start="3045:38" pos:end="3045:41"><name pos:start="3045:38" pos:end="3045:41">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3047:9" pos:end="3052:0">break;</break>

<cpp:endif pos:start="3049:1" pos:end="3049:6">#<cpp:directive pos:start="3049:2" pos:end="3049:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3051:1" pos:end="3051:21">#<cpp:directive pos:start="3051:2" pos:end="3051:6">ifdef</cpp:directive> <name pos:start="3051:8" pos:end="3051:21">TARGET_NR_recv</name></cpp:ifdef>

    <case pos:start="3053:5" pos:end="3053:24">case <expr pos:start="3053:10" pos:end="3053:23"><name pos:start="3053:10" pos:end="3053:23">TARGET_NR_recv</name></expr>:</case>

        <expr_stmt pos:start="3055:9" pos:end="3055:56"><expr pos:start="3055:9" pos:end="3055:55"><name pos:start="3055:9" pos:end="3055:11">ret</name> <operator pos:start="3055:13" pos:end="3055:13">=</operator> <call pos:start="3055:15" pos:end="3055:55"><name pos:start="3055:15" pos:end="3055:25">do_recvfrom</name><argument_list pos:start="3055:26" pos:end="3055:55">(<argument pos:start="3055:27" pos:end="3055:30"><expr pos:start="3055:27" pos:end="3055:30"><name pos:start="3055:27" pos:end="3055:30">arg1</name></expr></argument>, <argument pos:start="3055:33" pos:end="3055:36"><expr pos:start="3055:33" pos:end="3055:36"><name pos:start="3055:33" pos:end="3055:36">arg2</name></expr></argument>, <argument pos:start="3055:39" pos:end="3055:42"><expr pos:start="3055:39" pos:end="3055:42"><name pos:start="3055:39" pos:end="3055:42">arg3</name></expr></argument>, <argument pos:start="3055:45" pos:end="3055:48"><expr pos:start="3055:45" pos:end="3055:48"><name pos:start="3055:45" pos:end="3055:48">arg4</name></expr></argument>, <argument pos:start="3055:51" pos:end="3055:51"><expr pos:start="3055:51" pos:end="3055:51"><literal type="number" pos:start="3055:51" pos:end="3055:51">0</literal></expr></argument>, <argument pos:start="3055:54" pos:end="3055:54"><expr pos:start="3055:54" pos:end="3055:54"><literal type="number" pos:start="3055:54" pos:end="3055:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3057:9" pos:end="3062:0">break;</break>

<cpp:endif pos:start="3059:1" pos:end="3059:6">#<cpp:directive pos:start="3059:2" pos:end="3059:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3061:1" pos:end="3061:25">#<cpp:directive pos:start="3061:2" pos:end="3061:6">ifdef</cpp:directive> <name pos:start="3061:8" pos:end="3061:25">TARGET_NR_recvfrom</name></cpp:ifdef>

    <case pos:start="3063:5" pos:end="3063:28">case <expr pos:start="3063:10" pos:end="3063:27"><name pos:start="3063:10" pos:end="3063:27">TARGET_NR_recvfrom</name></expr>:</case>

        <expr_stmt pos:start="3065:9" pos:end="3065:62"><expr pos:start="3065:9" pos:end="3065:61"><name pos:start="3065:9" pos:end="3065:11">ret</name> <operator pos:start="3065:13" pos:end="3065:13">=</operator> <call pos:start="3065:15" pos:end="3065:61"><name pos:start="3065:15" pos:end="3065:25">do_recvfrom</name><argument_list pos:start="3065:26" pos:end="3065:61">(<argument pos:start="3065:27" pos:end="3065:30"><expr pos:start="3065:27" pos:end="3065:30"><name pos:start="3065:27" pos:end="3065:30">arg1</name></expr></argument>, <argument pos:start="3065:33" pos:end="3065:36"><expr pos:start="3065:33" pos:end="3065:36"><name pos:start="3065:33" pos:end="3065:36">arg2</name></expr></argument>, <argument pos:start="3065:39" pos:end="3065:42"><expr pos:start="3065:39" pos:end="3065:42"><name pos:start="3065:39" pos:end="3065:42">arg3</name></expr></argument>, <argument pos:start="3065:45" pos:end="3065:48"><expr pos:start="3065:45" pos:end="3065:48"><name pos:start="3065:45" pos:end="3065:48">arg4</name></expr></argument>, <argument pos:start="3065:51" pos:end="3065:54"><expr pos:start="3065:51" pos:end="3065:54"><name pos:start="3065:51" pos:end="3065:54">arg5</name></expr></argument>, <argument pos:start="3065:57" pos:end="3065:60"><expr pos:start="3065:57" pos:end="3065:60"><name pos:start="3065:57" pos:end="3065:60">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3067:9" pos:end="3072:0">break;</break>

<cpp:endif pos:start="3069:1" pos:end="3069:6">#<cpp:directive pos:start="3069:2" pos:end="3069:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3071:1" pos:end="3071:24">#<cpp:directive pos:start="3071:2" pos:end="3071:6">ifdef</cpp:directive> <name pos:start="3071:8" pos:end="3071:24">TARGET_NR_recvmsg</name></cpp:ifdef>

    <case pos:start="3073:5" pos:end="3073:27">case <expr pos:start="3073:10" pos:end="3073:26"><name pos:start="3073:10" pos:end="3073:26">TARGET_NR_recvmsg</name></expr>:</case>

        <expr_stmt pos:start="3075:9" pos:end="3075:50"><expr pos:start="3075:9" pos:end="3075:49"><name pos:start="3075:9" pos:end="3075:11">ret</name> <operator pos:start="3075:13" pos:end="3075:13">=</operator> <call pos:start="3075:15" pos:end="3075:49"><name pos:start="3075:15" pos:end="3075:28">do_sendrecvmsg</name><argument_list pos:start="3075:29" pos:end="3075:49">(<argument pos:start="3075:30" pos:end="3075:33"><expr pos:start="3075:30" pos:end="3075:33"><name pos:start="3075:30" pos:end="3075:33">arg1</name></expr></argument>, <argument pos:start="3075:36" pos:end="3075:39"><expr pos:start="3075:36" pos:end="3075:39"><name pos:start="3075:36" pos:end="3075:39">arg2</name></expr></argument>, <argument pos:start="3075:42" pos:end="3075:45"><expr pos:start="3075:42" pos:end="3075:45"><name pos:start="3075:42" pos:end="3075:45">arg3</name></expr></argument>, <argument pos:start="3075:48" pos:end="3075:48"><expr pos:start="3075:48" pos:end="3075:48"><literal type="number" pos:start="3075:48" pos:end="3075:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3077:9" pos:end="3082:0">break;</break>

<cpp:endif pos:start="3079:1" pos:end="3079:6">#<cpp:directive pos:start="3079:2" pos:end="3079:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3081:1" pos:end="3081:21">#<cpp:directive pos:start="3081:2" pos:end="3081:6">ifdef</cpp:directive> <name pos:start="3081:8" pos:end="3081:21">TARGET_NR_send</name></cpp:ifdef>

    <case pos:start="3083:5" pos:end="3083:24">case <expr pos:start="3083:10" pos:end="3083:23"><name pos:start="3083:10" pos:end="3083:23">TARGET_NR_send</name></expr>:</case>

        <expr_stmt pos:start="3085:9" pos:end="3085:54"><expr pos:start="3085:9" pos:end="3085:53"><name pos:start="3085:9" pos:end="3085:11">ret</name> <operator pos:start="3085:13" pos:end="3085:13">=</operator> <call pos:start="3085:15" pos:end="3085:53"><name pos:start="3085:15" pos:end="3085:23">do_sendto</name><argument_list pos:start="3085:24" pos:end="3085:53">(<argument pos:start="3085:25" pos:end="3085:28"><expr pos:start="3085:25" pos:end="3085:28"><name pos:start="3085:25" pos:end="3085:28">arg1</name></expr></argument>, <argument pos:start="3085:31" pos:end="3085:34"><expr pos:start="3085:31" pos:end="3085:34"><name pos:start="3085:31" pos:end="3085:34">arg2</name></expr></argument>, <argument pos:start="3085:37" pos:end="3085:40"><expr pos:start="3085:37" pos:end="3085:40"><name pos:start="3085:37" pos:end="3085:40">arg3</name></expr></argument>, <argument pos:start="3085:43" pos:end="3085:46"><expr pos:start="3085:43" pos:end="3085:46"><name pos:start="3085:43" pos:end="3085:46">arg4</name></expr></argument>, <argument pos:start="3085:49" pos:end="3085:49"><expr pos:start="3085:49" pos:end="3085:49"><literal type="number" pos:start="3085:49" pos:end="3085:49">0</literal></expr></argument>, <argument pos:start="3085:52" pos:end="3085:52"><expr pos:start="3085:52" pos:end="3085:52"><literal type="number" pos:start="3085:52" pos:end="3085:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3087:9" pos:end="3092:0">break;</break>

<cpp:endif pos:start="3089:1" pos:end="3089:6">#<cpp:directive pos:start="3089:2" pos:end="3089:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3091:1" pos:end="3091:24">#<cpp:directive pos:start="3091:2" pos:end="3091:6">ifdef</cpp:directive> <name pos:start="3091:8" pos:end="3091:24">TARGET_NR_sendmsg</name></cpp:ifdef>

    <case pos:start="3093:5" pos:end="3093:27">case <expr pos:start="3093:10" pos:end="3093:26"><name pos:start="3093:10" pos:end="3093:26">TARGET_NR_sendmsg</name></expr>:</case>

        <expr_stmt pos:start="3095:9" pos:end="3095:50"><expr pos:start="3095:9" pos:end="3095:49"><name pos:start="3095:9" pos:end="3095:11">ret</name> <operator pos:start="3095:13" pos:end="3095:13">=</operator> <call pos:start="3095:15" pos:end="3095:49"><name pos:start="3095:15" pos:end="3095:28">do_sendrecvmsg</name><argument_list pos:start="3095:29" pos:end="3095:49">(<argument pos:start="3095:30" pos:end="3095:33"><expr pos:start="3095:30" pos:end="3095:33"><name pos:start="3095:30" pos:end="3095:33">arg1</name></expr></argument>, <argument pos:start="3095:36" pos:end="3095:39"><expr pos:start="3095:36" pos:end="3095:39"><name pos:start="3095:36" pos:end="3095:39">arg2</name></expr></argument>, <argument pos:start="3095:42" pos:end="3095:45"><expr pos:start="3095:42" pos:end="3095:45"><name pos:start="3095:42" pos:end="3095:45">arg3</name></expr></argument>, <argument pos:start="3095:48" pos:end="3095:48"><expr pos:start="3095:48" pos:end="3095:48"><literal type="number" pos:start="3095:48" pos:end="3095:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3097:9" pos:end="3102:0">break;</break>

<cpp:endif pos:start="3099:1" pos:end="3099:6">#<cpp:directive pos:start="3099:2" pos:end="3099:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3101:1" pos:end="3101:23">#<cpp:directive pos:start="3101:2" pos:end="3101:6">ifdef</cpp:directive> <name pos:start="3101:8" pos:end="3101:23">TARGET_NR_sendto</name></cpp:ifdef>

    <case pos:start="3103:5" pos:end="3103:26">case <expr pos:start="3103:10" pos:end="3103:25"><name pos:start="3103:10" pos:end="3103:25">TARGET_NR_sendto</name></expr>:</case>

        <expr_stmt pos:start="3105:9" pos:end="3105:60"><expr pos:start="3105:9" pos:end="3105:59"><name pos:start="3105:9" pos:end="3105:11">ret</name> <operator pos:start="3105:13" pos:end="3105:13">=</operator> <call pos:start="3105:15" pos:end="3105:59"><name pos:start="3105:15" pos:end="3105:23">do_sendto</name><argument_list pos:start="3105:24" pos:end="3105:59">(<argument pos:start="3105:25" pos:end="3105:28"><expr pos:start="3105:25" pos:end="3105:28"><name pos:start="3105:25" pos:end="3105:28">arg1</name></expr></argument>, <argument pos:start="3105:31" pos:end="3105:34"><expr pos:start="3105:31" pos:end="3105:34"><name pos:start="3105:31" pos:end="3105:34">arg2</name></expr></argument>, <argument pos:start="3105:37" pos:end="3105:40"><expr pos:start="3105:37" pos:end="3105:40"><name pos:start="3105:37" pos:end="3105:40">arg3</name></expr></argument>, <argument pos:start="3105:43" pos:end="3105:46"><expr pos:start="3105:43" pos:end="3105:46"><name pos:start="3105:43" pos:end="3105:46">arg4</name></expr></argument>, <argument pos:start="3105:49" pos:end="3105:52"><expr pos:start="3105:49" pos:end="3105:52"><name pos:start="3105:49" pos:end="3105:52">arg5</name></expr></argument>, <argument pos:start="3105:55" pos:end="3105:58"><expr pos:start="3105:55" pos:end="3105:58"><name pos:start="3105:55" pos:end="3105:58">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3107:9" pos:end="3112:0">break;</break>

<cpp:endif pos:start="3109:1" pos:end="3109:6">#<cpp:directive pos:start="3109:2" pos:end="3109:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3111:1" pos:end="3111:25">#<cpp:directive pos:start="3111:2" pos:end="3111:6">ifdef</cpp:directive> <name pos:start="3111:8" pos:end="3111:25">TARGET_NR_shutdown</name></cpp:ifdef>

    <case pos:start="3113:5" pos:end="3113:28">case <expr pos:start="3113:10" pos:end="3113:27"><name pos:start="3113:10" pos:end="3113:27">TARGET_NR_shutdown</name></expr>:</case>

        <expr_stmt pos:start="3115:9" pos:end="3115:46"><expr pos:start="3115:9" pos:end="3115:45"><name pos:start="3115:9" pos:end="3115:11">ret</name> <operator pos:start="3115:13" pos:end="3115:13">=</operator> <call pos:start="3115:15" pos:end="3115:45"><name pos:start="3115:15" pos:end="3115:23">get_errno</name><argument_list pos:start="3115:24" pos:end="3115:45">(<argument pos:start="3115:25" pos:end="3115:44"><expr pos:start="3115:25" pos:end="3115:44"><call pos:start="3115:25" pos:end="3115:44"><name pos:start="3115:25" pos:end="3115:32">shutdown</name><argument_list pos:start="3115:33" pos:end="3115:44">(<argument pos:start="3115:34" pos:end="3115:37"><expr pos:start="3115:34" pos:end="3115:37"><name pos:start="3115:34" pos:end="3115:37">arg1</name></expr></argument>, <argument pos:start="3115:40" pos:end="3115:43"><expr pos:start="3115:40" pos:end="3115:43"><name pos:start="3115:40" pos:end="3115:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3117:9" pos:end="3122:0">break;</break>

<cpp:endif pos:start="3119:1" pos:end="3119:6">#<cpp:directive pos:start="3119:2" pos:end="3119:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3121:1" pos:end="3121:23">#<cpp:directive pos:start="3121:2" pos:end="3121:6">ifdef</cpp:directive> <name pos:start="3121:8" pos:end="3121:23">TARGET_NR_socket</name></cpp:ifdef>

    <case pos:start="3123:5" pos:end="3123:26">case <expr pos:start="3123:10" pos:end="3123:25"><name pos:start="3123:10" pos:end="3123:25">TARGET_NR_socket</name></expr>:</case>

        <expr_stmt pos:start="3125:9" pos:end="3125:42"><expr pos:start="3125:9" pos:end="3125:41"><name pos:start="3125:9" pos:end="3125:11">ret</name> <operator pos:start="3125:13" pos:end="3125:13">=</operator> <call pos:start="3125:15" pos:end="3125:41"><name pos:start="3125:15" pos:end="3125:23">do_socket</name><argument_list pos:start="3125:24" pos:end="3125:41">(<argument pos:start="3125:25" pos:end="3125:28"><expr pos:start="3125:25" pos:end="3125:28"><name pos:start="3125:25" pos:end="3125:28">arg1</name></expr></argument>, <argument pos:start="3125:31" pos:end="3125:34"><expr pos:start="3125:31" pos:end="3125:34"><name pos:start="3125:31" pos:end="3125:34">arg2</name></expr></argument>, <argument pos:start="3125:37" pos:end="3125:40"><expr pos:start="3125:37" pos:end="3125:40"><name pos:start="3125:37" pos:end="3125:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3127:9" pos:end="3132:0">break;</break>

<cpp:endif pos:start="3129:1" pos:end="3129:6">#<cpp:directive pos:start="3129:2" pos:end="3129:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3131:1" pos:end="3131:27">#<cpp:directive pos:start="3131:2" pos:end="3131:6">ifdef</cpp:directive> <name pos:start="3131:8" pos:end="3131:27">TARGET_NR_socketpair</name></cpp:ifdef>

    <case pos:start="3133:5" pos:end="3133:30">case <expr pos:start="3133:10" pos:end="3133:29"><name pos:start="3133:10" pos:end="3133:29">TARGET_NR_socketpair</name></expr>:</case>

        <expr_stmt pos:start="3135:9" pos:end="3135:52"><expr pos:start="3135:9" pos:end="3135:51"><name pos:start="3135:9" pos:end="3135:11">ret</name> <operator pos:start="3135:13" pos:end="3135:13">=</operator> <call pos:start="3135:15" pos:end="3135:51"><name pos:start="3135:15" pos:end="3135:27">do_socketpair</name><argument_list pos:start="3135:28" pos:end="3135:51">(<argument pos:start="3135:29" pos:end="3135:32"><expr pos:start="3135:29" pos:end="3135:32"><name pos:start="3135:29" pos:end="3135:32">arg1</name></expr></argument>, <argument pos:start="3135:35" pos:end="3135:38"><expr pos:start="3135:35" pos:end="3135:38"><name pos:start="3135:35" pos:end="3135:38">arg2</name></expr></argument>, <argument pos:start="3135:41" pos:end="3135:44"><expr pos:start="3135:41" pos:end="3135:44"><name pos:start="3135:41" pos:end="3135:44">arg3</name></expr></argument>, <argument pos:start="3135:47" pos:end="3135:50"><expr pos:start="3135:47" pos:end="3135:50"><name pos:start="3135:47" pos:end="3135:50">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3137:9" pos:end="3142:0">break;</break>

<cpp:endif pos:start="3139:1" pos:end="3139:6">#<cpp:directive pos:start="3139:2" pos:end="3139:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3141:1" pos:end="3141:27">#<cpp:directive pos:start="3141:2" pos:end="3141:6">ifdef</cpp:directive> <name pos:start="3141:8" pos:end="3141:27">TARGET_NR_setsockopt</name></cpp:ifdef>

    <case pos:start="3143:5" pos:end="3143:30">case <expr pos:start="3143:10" pos:end="3143:29"><name pos:start="3143:10" pos:end="3143:29">TARGET_NR_setsockopt</name></expr>:</case>

        <expr_stmt pos:start="3145:9" pos:end="3145:70"><expr pos:start="3145:9" pos:end="3145:69"><name pos:start="3145:9" pos:end="3145:11">ret</name> <operator pos:start="3145:13" pos:end="3145:13">=</operator> <call pos:start="3145:15" pos:end="3145:69"><name pos:start="3145:15" pos:end="3145:27">do_setsockopt</name><argument_list pos:start="3145:28" pos:end="3145:69">(<argument pos:start="3145:29" pos:end="3145:32"><expr pos:start="3145:29" pos:end="3145:32"><name pos:start="3145:29" pos:end="3145:32">arg1</name></expr></argument>, <argument pos:start="3145:35" pos:end="3145:38"><expr pos:start="3145:35" pos:end="3145:38"><name pos:start="3145:35" pos:end="3145:38">arg2</name></expr></argument>, <argument pos:start="3145:41" pos:end="3145:44"><expr pos:start="3145:41" pos:end="3145:44"><name pos:start="3145:41" pos:end="3145:44">arg3</name></expr></argument>, <argument pos:start="3145:47" pos:end="3145:50"><expr pos:start="3145:47" pos:end="3145:50"><name pos:start="3145:47" pos:end="3145:50">arg4</name></expr></argument>, <argument pos:start="3145:53" pos:end="3145:68"><expr pos:start="3145:53" pos:end="3145:68"><operator pos:start="3145:53" pos:end="3145:53">(</operator><name pos:start="3145:54" pos:end="3145:62">socklen_t</name><operator pos:start="3145:63" pos:end="3145:63">)</operator> <name pos:start="3145:65" pos:end="3145:68">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3147:9" pos:end="3150:0">break;</break>

<cpp:endif pos:start="3149:1" pos:end="3149:6">#<cpp:directive pos:start="3149:2" pos:end="3149:6">endif</cpp:directive></cpp:endif>



    <case pos:start="3153:5" pos:end="3153:26">case <expr pos:start="3153:10" pos:end="3153:25"><name pos:start="3153:10" pos:end="3153:25">TARGET_NR_syslog</name></expr>:</case>

        <if_stmt pos:start="3155:9" pos:end="3157:24"><if pos:start="3155:9" pos:end="3157:24">if <condition pos:start="3155:12" pos:end="3155:42">(<expr pos:start="3155:13" pos:end="3155:41"><operator pos:start="3155:13" pos:end="3155:13">!</operator><operator pos:start="3155:14" pos:end="3155:14">(</operator><name pos:start="3155:15" pos:end="3155:15">p</name> <operator pos:start="3155:17" pos:end="3155:17">=</operator> <call pos:start="3155:19" pos:end="3155:40"><name pos:start="3155:19" pos:end="3155:34">lock_user_string</name><argument_list pos:start="3155:35" pos:end="3155:40">(<argument pos:start="3155:36" pos:end="3155:39"><expr pos:start="3155:36" pos:end="3155:39"><name pos:start="3155:36" pos:end="3155:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="3155:41" pos:end="3155:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3157:13" pos:end="3157:24"><block_content pos:start="3157:13" pos:end="3157:24">

            <goto pos:start="3157:13" pos:end="3157:24">goto <name pos:start="3157:18" pos:end="3157:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3159:9" pos:end="3159:61"><expr pos:start="3159:9" pos:end="3159:60"><name pos:start="3159:9" pos:end="3159:11">ret</name> <operator pos:start="3159:13" pos:end="3159:13">=</operator> <call pos:start="3159:15" pos:end="3159:60"><name pos:start="3159:15" pos:end="3159:23">get_errno</name><argument_list pos:start="3159:24" pos:end="3159:60">(<argument pos:start="3159:25" pos:end="3159:59"><expr pos:start="3159:25" pos:end="3159:59"><call pos:start="3159:25" pos:end="3159:59"><name pos:start="3159:25" pos:end="3159:34">sys_syslog</name><argument_list pos:start="3159:35" pos:end="3159:59">(<argument pos:start="3159:36" pos:end="3159:44"><expr pos:start="3159:36" pos:end="3159:44"><operator pos:start="3159:36" pos:end="3159:36">(</operator><name pos:start="3159:37" pos:end="3159:39">int</name><operator pos:start="3159:40" pos:end="3159:40">)</operator><name pos:start="3159:41" pos:end="3159:44">arg1</name></expr></argument>, <argument pos:start="3159:47" pos:end="3159:47"><expr pos:start="3159:47" pos:end="3159:47"><name pos:start="3159:47" pos:end="3159:47">p</name></expr></argument>, <argument pos:start="3159:50" pos:end="3159:58"><expr pos:start="3159:50" pos:end="3159:58"><operator pos:start="3159:50" pos:end="3159:50">(</operator><name pos:start="3159:51" pos:end="3159:53">int</name><operator pos:start="3159:54" pos:end="3159:54">)</operator><name pos:start="3159:55" pos:end="3159:58">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3161:9" pos:end="3161:32"><expr pos:start="3161:9" pos:end="3161:31"><call pos:start="3161:9" pos:end="3161:31"><name pos:start="3161:9" pos:end="3161:19">unlock_user</name><argument_list pos:start="3161:20" pos:end="3161:31">(<argument pos:start="3161:21" pos:end="3161:21"><expr pos:start="3161:21" pos:end="3161:21"><name pos:start="3161:21" pos:end="3161:21">p</name></expr></argument>, <argument pos:start="3161:24" pos:end="3161:27"><expr pos:start="3161:24" pos:end="3161:27"><name pos:start="3161:24" pos:end="3161:27">arg2</name></expr></argument>, <argument pos:start="3161:30" pos:end="3161:30"><expr pos:start="3161:30" pos:end="3161:30"><literal type="number" pos:start="3161:30" pos:end="3161:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3163:9" pos:end="3163:14">break;</break>



    <case pos:start="3167:5" pos:end="3167:29">case <expr pos:start="3167:10" pos:end="3167:28"><name pos:start="3167:10" pos:end="3167:28">TARGET_NR_setitimer</name></expr>:</case>

        <block pos:start="3169:9" pos:end="3209:9">{<block_content pos:start="3171:13" pos:end="3207:13">

            <decl_stmt pos:start="3171:13" pos:end="3171:52"><decl pos:start="3171:13" pos:end="3171:34"><type pos:start="3171:13" pos:end="3171:28"><name pos:start="3171:13" pos:end="3171:28"><name pos:start="3171:13" pos:end="3171:18">struct</name> <name pos:start="3171:20" pos:end="3171:28">itimerval</name></name></type> <name pos:start="3171:30" pos:end="3171:34">value</name></decl>, <decl pos:start="3171:37" pos:end="3171:42"><type ref="prev" pos:start="3171:13" pos:end="3171:28"/><name pos:start="3171:37" pos:end="3171:42">ovalue</name></decl>, <decl pos:start="3171:45" pos:end="3171:51"><type ref="prev" pos:start="3171:13" pos:end="3171:28"><modifier pos:start="3171:45" pos:end="3171:45">*</modifier></type><name pos:start="3171:46" pos:end="3171:51">pvalue</name></decl>;</decl_stmt>



            <if_stmt pos:start="3175:13" pos:end="3191:13"><if pos:start="3175:13" pos:end="3187:13">if <condition pos:start="3175:16" pos:end="3175:21">(<expr pos:start="3175:17" pos:end="3175:20"><name pos:start="3175:17" pos:end="3175:20">arg2</name></expr>)</condition> <block pos:start="3175:23" pos:end="3187:13">{<block_content pos:start="3177:17" pos:end="3185:32">

                <expr_stmt pos:start="3177:17" pos:end="3177:32"><expr pos:start="3177:17" pos:end="3177:31"><name pos:start="3177:17" pos:end="3177:22">pvalue</name> <operator pos:start="3177:24" pos:end="3177:24">=</operator> <operator pos:start="3177:26" pos:end="3177:26">&amp;</operator><name pos:start="3177:27" pos:end="3177:31">value</name></expr>;</expr_stmt>

                <if_stmt pos:start="3179:17" pos:end="3185:32"><if pos:start="3179:17" pos:end="3185:32">if <condition pos:start="3179:20" pos:end="3183:84">(<expr pos:start="3179:21" pos:end="3183:83"><call pos:start="3179:21" pos:end="3179:70"><name pos:start="3179:21" pos:end="3179:42">copy_from_user_timeval</name><argument_list pos:start="3179:43" pos:end="3179:70">(<argument pos:start="3179:44" pos:end="3179:63"><expr pos:start="3179:44" pos:end="3179:63"><operator pos:start="3179:44" pos:end="3179:44">&amp;</operator><name pos:start="3179:45" pos:end="3179:63"><name pos:start="3179:45" pos:end="3179:50">pvalue</name><operator pos:start="3179:51" pos:end="3179:52">-&gt;</operator><name pos:start="3179:53" pos:end="3179:63">it_interval</name></name></expr></argument>, <argument pos:start="3179:66" pos:end="3179:69"><expr pos:start="3179:66" pos:end="3179:69"><name pos:start="3179:66" pos:end="3179:69">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="3181:21" pos:end="3181:22">||</operator> <call pos:start="3181:24" pos:end="3183:83"><name pos:start="3181:24" pos:end="3181:45">copy_from_user_timeval</name><argument_list pos:start="3181:46" pos:end="3183:83">(<argument pos:start="3181:47" pos:end="3181:63"><expr pos:start="3181:47" pos:end="3181:63"><operator pos:start="3181:47" pos:end="3181:47">&amp;</operator><name pos:start="3181:48" pos:end="3181:63"><name pos:start="3181:48" pos:end="3181:53">pvalue</name><operator pos:start="3181:54" pos:end="3181:55">-&gt;</operator><name pos:start="3181:56" pos:end="3181:63">it_value</name></name></expr></argument>,

                                              <argument pos:start="3183:47" pos:end="3183:82"><expr pos:start="3183:47" pos:end="3183:82"><name pos:start="3183:47" pos:end="3183:50">arg2</name> <operator pos:start="3183:52" pos:end="3183:52">+</operator> <sizeof pos:start="3183:54" pos:end="3183:82">sizeof<argument_list pos:start="3183:60" pos:end="3183:82">(<argument pos:start="3183:61" pos:end="3183:81"><expr pos:start="3183:61" pos:end="3183:81">struct <name pos:start="3183:68" pos:end="3183:81">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3185:21" pos:end="3185:32"><block_content pos:start="3185:21" pos:end="3185:32">

                    <goto pos:start="3185:21" pos:end="3185:32">goto <name pos:start="3185:26" pos:end="3185:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="3187:15" pos:end="3191:13">else <block pos:start="3187:20" pos:end="3191:13">{<block_content pos:start="3189:17" pos:end="3189:30">

                <expr_stmt pos:start="3189:17" pos:end="3189:30"><expr pos:start="3189:17" pos:end="3189:29"><name pos:start="3189:17" pos:end="3189:22">pvalue</name> <operator pos:start="3189:24" pos:end="3189:24">=</operator> <name pos:start="3189:26" pos:end="3189:29">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="3193:13" pos:end="3193:62"><expr pos:start="3193:13" pos:end="3193:61"><name pos:start="3193:13" pos:end="3193:15">ret</name> <operator pos:start="3193:17" pos:end="3193:17">=</operator> <call pos:start="3193:19" pos:end="3193:61"><name pos:start="3193:19" pos:end="3193:27">get_errno</name><argument_list pos:start="3193:28" pos:end="3193:61">(<argument pos:start="3193:29" pos:end="3193:60"><expr pos:start="3193:29" pos:end="3193:60"><call pos:start="3193:29" pos:end="3193:60"><name pos:start="3193:29" pos:end="3193:37">setitimer</name><argument_list pos:start="3193:38" pos:end="3193:60">(<argument pos:start="3193:39" pos:end="3193:42"><expr pos:start="3193:39" pos:end="3193:42"><name pos:start="3193:39" pos:end="3193:42">arg1</name></expr></argument>, <argument pos:start="3193:45" pos:end="3193:50"><expr pos:start="3193:45" pos:end="3193:50"><name pos:start="3193:45" pos:end="3193:50">pvalue</name></expr></argument>, <argument pos:start="3193:53" pos:end="3193:59"><expr pos:start="3193:53" pos:end="3193:59"><operator pos:start="3193:53" pos:end="3193:53">&amp;</operator><name pos:start="3193:54" pos:end="3193:59">ovalue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3195:13" pos:end="3207:13"><if pos:start="3195:13" pos:end="3207:13">if <condition pos:start="3195:16" pos:end="3195:39">(<expr pos:start="3195:17" pos:end="3195:38"><operator pos:start="3195:17" pos:end="3195:17">!</operator><call pos:start="3195:18" pos:end="3195:30"><name pos:start="3195:18" pos:end="3195:25">is_error</name><argument_list pos:start="3195:26" pos:end="3195:30">(<argument pos:start="3195:27" pos:end="3195:29"><expr pos:start="3195:27" pos:end="3195:29"><name pos:start="3195:27" pos:end="3195:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="3195:32" pos:end="3195:33">&amp;&amp;</operator> <name pos:start="3195:35" pos:end="3195:38">arg3</name></expr>)</condition> <block pos:start="3195:41" pos:end="3207:13">{<block_content pos:start="3197:17" pos:end="3205:32">

                <if_stmt pos:start="3197:17" pos:end="3205:32"><if pos:start="3197:17" pos:end="3205:32">if <condition pos:start="3197:20" pos:end="3203:62">(<expr pos:start="3197:21" pos:end="3203:61"><call pos:start="3197:21" pos:end="3199:61"><name pos:start="3197:21" pos:end="3197:40">copy_to_user_timeval</name><argument_list pos:start="3197:41" pos:end="3199:61">(<argument pos:start="3197:42" pos:end="3197:45"><expr pos:start="3197:42" pos:end="3197:45"><name pos:start="3197:42" pos:end="3197:45">arg3</name></expr></argument>,

                                         <argument pos:start="3199:42" pos:end="3199:60"><expr pos:start="3199:42" pos:end="3199:60"><operator pos:start="3199:42" pos:end="3199:42">&amp;</operator><name pos:start="3199:43" pos:end="3199:60"><name pos:start="3199:43" pos:end="3199:48">ovalue</name><operator pos:start="3199:49" pos:end="3199:49">.</operator><name pos:start="3199:50" pos:end="3199:60">it_interval</name></name></expr></argument>)</argument_list></call>

                    <operator pos:start="3201:21" pos:end="3201:22">||</operator> <call pos:start="3201:24" pos:end="3203:61"><name pos:start="3201:24" pos:end="3201:43">copy_to_user_timeval</name><argument_list pos:start="3201:44" pos:end="3203:61">(<argument pos:start="3201:45" pos:end="3201:80"><expr pos:start="3201:45" pos:end="3201:80"><name pos:start="3201:45" pos:end="3201:48">arg3</name> <operator pos:start="3201:50" pos:end="3201:50">+</operator> <sizeof pos:start="3201:52" pos:end="3201:80">sizeof<argument_list pos:start="3201:58" pos:end="3201:80">(<argument pos:start="3201:59" pos:end="3201:79"><expr pos:start="3201:59" pos:end="3201:79">struct <name pos:start="3201:66" pos:end="3201:79">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                            <argument pos:start="3203:45" pos:end="3203:60"><expr pos:start="3203:45" pos:end="3203:60"><operator pos:start="3203:45" pos:end="3203:45">&amp;</operator><name pos:start="3203:46" pos:end="3203:60"><name pos:start="3203:46" pos:end="3203:51">ovalue</name><operator pos:start="3203:52" pos:end="3203:52">.</operator><name pos:start="3203:53" pos:end="3203:60">it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3205:21" pos:end="3205:32"><block_content pos:start="3205:21" pos:end="3205:32">

                    <goto pos:start="3205:21" pos:end="3205:32">goto <name pos:start="3205:26" pos:end="3205:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3211:9" pos:end="3211:14">break;</break>

    <case pos:start="3213:5" pos:end="3213:29">case <expr pos:start="3213:10" pos:end="3213:28"><name pos:start="3213:10" pos:end="3213:28">TARGET_NR_getitimer</name></expr>:</case>

        <block pos:start="3215:9" pos:end="3237:9">{<block_content pos:start="3217:13" pos:end="3235:13">

            <decl_stmt pos:start="3217:13" pos:end="3217:35"><decl pos:start="3217:13" pos:end="3217:34"><type pos:start="3217:13" pos:end="3217:28"><name pos:start="3217:13" pos:end="3217:28"><name pos:start="3217:13" pos:end="3217:18">struct</name> <name pos:start="3217:20" pos:end="3217:28">itimerval</name></name></type> <name pos:start="3217:30" pos:end="3217:34">value</name></decl>;</decl_stmt>



            <expr_stmt pos:start="3221:13" pos:end="3221:53"><expr pos:start="3221:13" pos:end="3221:52"><name pos:start="3221:13" pos:end="3221:15">ret</name> <operator pos:start="3221:17" pos:end="3221:17">=</operator> <call pos:start="3221:19" pos:end="3221:52"><name pos:start="3221:19" pos:end="3221:27">get_errno</name><argument_list pos:start="3221:28" pos:end="3221:52">(<argument pos:start="3221:29" pos:end="3221:51"><expr pos:start="3221:29" pos:end="3221:51"><call pos:start="3221:29" pos:end="3221:51"><name pos:start="3221:29" pos:end="3221:37">getitimer</name><argument_list pos:start="3221:38" pos:end="3221:51">(<argument pos:start="3221:39" pos:end="3221:42"><expr pos:start="3221:39" pos:end="3221:42"><name pos:start="3221:39" pos:end="3221:42">arg1</name></expr></argument>, <argument pos:start="3221:45" pos:end="3221:50"><expr pos:start="3221:45" pos:end="3221:50"><operator pos:start="3221:45" pos:end="3221:45">&amp;</operator><name pos:start="3221:46" pos:end="3221:50">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3223:13" pos:end="3235:13"><if pos:start="3223:13" pos:end="3235:13">if <condition pos:start="3223:16" pos:end="3223:39">(<expr pos:start="3223:17" pos:end="3223:38"><operator pos:start="3223:17" pos:end="3223:17">!</operator><call pos:start="3223:18" pos:end="3223:30"><name pos:start="3223:18" pos:end="3223:25">is_error</name><argument_list pos:start="3223:26" pos:end="3223:30">(<argument pos:start="3223:27" pos:end="3223:29"><expr pos:start="3223:27" pos:end="3223:29"><name pos:start="3223:27" pos:end="3223:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="3223:32" pos:end="3223:33">&amp;&amp;</operator> <name pos:start="3223:35" pos:end="3223:38">arg2</name></expr>)</condition> <block pos:start="3223:41" pos:end="3235:13">{<block_content pos:start="3225:17" pos:end="3233:32">

                <if_stmt pos:start="3225:17" pos:end="3233:32"><if pos:start="3225:17" pos:end="3233:32">if <condition pos:start="3225:20" pos:end="3231:61">(<expr pos:start="3225:21" pos:end="3231:60"><call pos:start="3225:21" pos:end="3227:60"><name pos:start="3225:21" pos:end="3225:40">copy_to_user_timeval</name><argument_list pos:start="3225:41" pos:end="3227:60">(<argument pos:start="3225:42" pos:end="3225:45"><expr pos:start="3225:42" pos:end="3225:45"><name pos:start="3225:42" pos:end="3225:45">arg2</name></expr></argument>,

                                         <argument pos:start="3227:42" pos:end="3227:59"><expr pos:start="3227:42" pos:end="3227:59"><operator pos:start="3227:42" pos:end="3227:42">&amp;</operator><name pos:start="3227:43" pos:end="3227:59"><name pos:start="3227:43" pos:end="3227:47">value</name><operator pos:start="3227:48" pos:end="3227:48">.</operator><name pos:start="3227:49" pos:end="3227:59">it_interval</name></name></expr></argument>)</argument_list></call>

                    <operator pos:start="3229:21" pos:end="3229:22">||</operator> <call pos:start="3229:24" pos:end="3231:60"><name pos:start="3229:24" pos:end="3229:43">copy_to_user_timeval</name><argument_list pos:start="3229:44" pos:end="3231:60">(<argument pos:start="3229:45" pos:end="3229:80"><expr pos:start="3229:45" pos:end="3229:80"><name pos:start="3229:45" pos:end="3229:48">arg2</name> <operator pos:start="3229:50" pos:end="3229:50">+</operator> <sizeof pos:start="3229:52" pos:end="3229:80">sizeof<argument_list pos:start="3229:58" pos:end="3229:80">(<argument pos:start="3229:59" pos:end="3229:79"><expr pos:start="3229:59" pos:end="3229:79">struct <name pos:start="3229:66" pos:end="3229:79">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                            <argument pos:start="3231:45" pos:end="3231:59"><expr pos:start="3231:45" pos:end="3231:59"><operator pos:start="3231:45" pos:end="3231:45">&amp;</operator><name pos:start="3231:46" pos:end="3231:59"><name pos:start="3231:46" pos:end="3231:50">value</name><operator pos:start="3231:51" pos:end="3231:51">.</operator><name pos:start="3231:52" pos:end="3231:59">it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3233:21" pos:end="3233:32"><block_content pos:start="3233:21" pos:end="3233:32">

                    <goto pos:start="3233:21" pos:end="3233:32">goto <name pos:start="3233:26" pos:end="3233:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3239:9" pos:end="3239:14">break;</break>

    <case pos:start="3241:5" pos:end="3241:24">case <expr pos:start="3241:10" pos:end="3241:23"><name pos:start="3241:10" pos:end="3241:23">TARGET_NR_stat</name></expr>:</case>

        <if_stmt pos:start="3243:9" pos:end="3245:24"><if pos:start="3243:9" pos:end="3245:24">if <condition pos:start="3243:12" pos:end="3243:42">(<expr pos:start="3243:13" pos:end="3243:41"><operator pos:start="3243:13" pos:end="3243:13">!</operator><operator pos:start="3243:14" pos:end="3243:14">(</operator><name pos:start="3243:15" pos:end="3243:15">p</name> <operator pos:start="3243:17" pos:end="3243:17">=</operator> <call pos:start="3243:19" pos:end="3243:40"><name pos:start="3243:19" pos:end="3243:34">lock_user_string</name><argument_list pos:start="3243:35" pos:end="3243:40">(<argument pos:start="3243:36" pos:end="3243:39"><expr pos:start="3243:36" pos:end="3243:39"><name pos:start="3243:36" pos:end="3243:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="3243:41" pos:end="3243:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3245:13" pos:end="3245:24"><block_content pos:start="3245:13" pos:end="3245:24">

            <goto pos:start="3245:13" pos:end="3245:24">goto <name pos:start="3245:18" pos:end="3245:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3247:9" pos:end="3247:44"><expr pos:start="3247:9" pos:end="3247:43"><name pos:start="3247:9" pos:end="3247:11">ret</name> <operator pos:start="3247:13" pos:end="3247:13">=</operator> <call pos:start="3247:15" pos:end="3247:43"><name pos:start="3247:15" pos:end="3247:23">get_errno</name><argument_list pos:start="3247:24" pos:end="3247:43">(<argument pos:start="3247:25" pos:end="3247:42"><expr pos:start="3247:25" pos:end="3247:42"><call pos:start="3247:25" pos:end="3247:42"><name pos:start="3247:25" pos:end="3247:28">stat</name><argument_list pos:start="3247:29" pos:end="3247:42">(<argument pos:start="3247:30" pos:end="3247:36"><expr pos:start="3247:30" pos:end="3247:36"><call pos:start="3247:30" pos:end="3247:36"><name pos:start="3247:30" pos:end="3247:33">path</name><argument_list pos:start="3247:34" pos:end="3247:36">(<argument pos:start="3247:35" pos:end="3247:35"><expr pos:start="3247:35" pos:end="3247:35"><name pos:start="3247:35" pos:end="3247:35">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3247:39" pos:end="3247:41"><expr pos:start="3247:39" pos:end="3247:41"><operator pos:start="3247:39" pos:end="3247:39">&amp;</operator><name pos:start="3247:40" pos:end="3247:41">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3249:9" pos:end="3249:32"><expr pos:start="3249:9" pos:end="3249:31"><call pos:start="3249:9" pos:end="3249:31"><name pos:start="3249:9" pos:end="3249:19">unlock_user</name><argument_list pos:start="3249:20" pos:end="3249:31">(<argument pos:start="3249:21" pos:end="3249:21"><expr pos:start="3249:21" pos:end="3249:21"><name pos:start="3249:21" pos:end="3249:21">p</name></expr></argument>, <argument pos:start="3249:24" pos:end="3249:27"><expr pos:start="3249:24" pos:end="3249:27"><name pos:start="3249:24" pos:end="3249:27">arg1</name></expr></argument>, <argument pos:start="3249:30" pos:end="3249:30"><expr pos:start="3249:30" pos:end="3249:30"><literal type="number" pos:start="3249:30" pos:end="3249:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="3251:9" pos:end="3251:21">goto <name pos:start="3251:14" pos:end="3251:20">do_stat</name>;</goto>

    <case pos:start="3253:5" pos:end="3253:25">case <expr pos:start="3253:10" pos:end="3253:24"><name pos:start="3253:10" pos:end="3253:24">TARGET_NR_lstat</name></expr>:</case>

        <if_stmt pos:start="3255:9" pos:end="3257:24"><if pos:start="3255:9" pos:end="3257:24">if <condition pos:start="3255:12" pos:end="3255:42">(<expr pos:start="3255:13" pos:end="3255:41"><operator pos:start="3255:13" pos:end="3255:13">!</operator><operator pos:start="3255:14" pos:end="3255:14">(</operator><name pos:start="3255:15" pos:end="3255:15">p</name> <operator pos:start="3255:17" pos:end="3255:17">=</operator> <call pos:start="3255:19" pos:end="3255:40"><name pos:start="3255:19" pos:end="3255:34">lock_user_string</name><argument_list pos:start="3255:35" pos:end="3255:40">(<argument pos:start="3255:36" pos:end="3255:39"><expr pos:start="3255:36" pos:end="3255:39"><name pos:start="3255:36" pos:end="3255:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="3255:41" pos:end="3255:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3257:13" pos:end="3257:24"><block_content pos:start="3257:13" pos:end="3257:24">

            <goto pos:start="3257:13" pos:end="3257:24">goto <name pos:start="3257:18" pos:end="3257:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3259:9" pos:end="3259:45"><expr pos:start="3259:9" pos:end="3259:44"><name pos:start="3259:9" pos:end="3259:11">ret</name> <operator pos:start="3259:13" pos:end="3259:13">=</operator> <call pos:start="3259:15" pos:end="3259:44"><name pos:start="3259:15" pos:end="3259:23">get_errno</name><argument_list pos:start="3259:24" pos:end="3259:44">(<argument pos:start="3259:25" pos:end="3259:43"><expr pos:start="3259:25" pos:end="3259:43"><call pos:start="3259:25" pos:end="3259:43"><name pos:start="3259:25" pos:end="3259:29">lstat</name><argument_list pos:start="3259:30" pos:end="3259:43">(<argument pos:start="3259:31" pos:end="3259:37"><expr pos:start="3259:31" pos:end="3259:37"><call pos:start="3259:31" pos:end="3259:37"><name pos:start="3259:31" pos:end="3259:34">path</name><argument_list pos:start="3259:35" pos:end="3259:37">(<argument pos:start="3259:36" pos:end="3259:36"><expr pos:start="3259:36" pos:end="3259:36"><name pos:start="3259:36" pos:end="3259:36">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3259:40" pos:end="3259:42"><expr pos:start="3259:40" pos:end="3259:42"><operator pos:start="3259:40" pos:end="3259:40">&amp;</operator><name pos:start="3259:41" pos:end="3259:42">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3261:9" pos:end="3261:32"><expr pos:start="3261:9" pos:end="3261:31"><call pos:start="3261:9" pos:end="3261:31"><name pos:start="3261:9" pos:end="3261:19">unlock_user</name><argument_list pos:start="3261:20" pos:end="3261:31">(<argument pos:start="3261:21" pos:end="3261:21"><expr pos:start="3261:21" pos:end="3261:21"><name pos:start="3261:21" pos:end="3261:21">p</name></expr></argument>, <argument pos:start="3261:24" pos:end="3261:27"><expr pos:start="3261:24" pos:end="3261:27"><name pos:start="3261:24" pos:end="3261:27">arg1</name></expr></argument>, <argument pos:start="3261:30" pos:end="3261:30"><expr pos:start="3261:30" pos:end="3261:30"><literal type="number" pos:start="3261:30" pos:end="3261:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="3263:9" pos:end="3263:21">goto <name pos:start="3263:14" pos:end="3263:20">do_stat</name>;</goto>

    <case pos:start="3265:5" pos:end="3265:25">case <expr pos:start="3265:10" pos:end="3265:24"><name pos:start="3265:10" pos:end="3265:24">TARGET_NR_fstat</name></expr>:</case>

        <block pos:start="3267:9" pos:end="3315:9">{<block_content pos:start="3269:13" pos:end="3313:13">

            <expr_stmt pos:start="3269:13" pos:end="3269:46"><expr pos:start="3269:13" pos:end="3269:45"><name pos:start="3269:13" pos:end="3269:15">ret</name> <operator pos:start="3269:17" pos:end="3269:17">=</operator> <call pos:start="3269:19" pos:end="3269:45"><name pos:start="3269:19" pos:end="3269:27">get_errno</name><argument_list pos:start="3269:28" pos:end="3269:45">(<argument pos:start="3269:29" pos:end="3269:44"><expr pos:start="3269:29" pos:end="3269:44"><call pos:start="3269:29" pos:end="3269:44"><name pos:start="3269:29" pos:end="3269:33">fstat</name><argument_list pos:start="3269:34" pos:end="3269:44">(<argument pos:start="3269:35" pos:end="3269:38"><expr pos:start="3269:35" pos:end="3269:38"><name pos:start="3269:35" pos:end="3269:38">arg1</name></expr></argument>, <argument pos:start="3269:41" pos:end="3269:43"><expr pos:start="3269:41" pos:end="3269:43"><operator pos:start="3269:41" pos:end="3269:41">&amp;</operator><name pos:start="3269:42" pos:end="3269:43">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="3271:9" pos:end="3271:16"><name pos:start="3271:9" pos:end="3271:15">do_stat</name>:</label>

            <if_stmt pos:start="3273:13" pos:end="3313:13"><if pos:start="3273:13" pos:end="3313:13">if <condition pos:start="3273:16" pos:end="3273:31">(<expr pos:start="3273:17" pos:end="3273:30"><operator pos:start="3273:17" pos:end="3273:17">!</operator><call pos:start="3273:18" pos:end="3273:30"><name pos:start="3273:18" pos:end="3273:25">is_error</name><argument_list pos:start="3273:26" pos:end="3273:30">(<argument pos:start="3273:27" pos:end="3273:29"><expr pos:start="3273:27" pos:end="3273:29"><name pos:start="3273:27" pos:end="3273:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3273:33" pos:end="3313:13">{<block_content pos:start="3275:17" pos:end="3311:55">

                <decl_stmt pos:start="3275:17" pos:end="3275:46"><decl pos:start="3275:17" pos:end="3275:45"><type pos:start="3275:17" pos:end="3275:36"><name pos:start="3275:17" pos:end="3275:34"><name pos:start="3275:17" pos:end="3275:22">struct</name> <name pos:start="3275:24" pos:end="3275:34">target_stat</name></name> <modifier pos:start="3275:36" pos:end="3275:36">*</modifier></type><name pos:start="3275:37" pos:end="3275:45">target_st</name></decl>;</decl_stmt>



                <if_stmt pos:start="3279:17" pos:end="3281:32"><if pos:start="3279:17" pos:end="3281:32">if <condition pos:start="3279:20" pos:end="3279:72">(<expr pos:start="3279:21" pos:end="3279:71"><operator pos:start="3279:21" pos:end="3279:21">!</operator><call pos:start="3279:22" pos:end="3279:71"><name pos:start="3279:22" pos:end="3279:37">lock_user_struct</name><argument_list pos:start="3279:38" pos:end="3279:71">(<argument pos:start="3279:39" pos:end="3279:50"><expr pos:start="3279:39" pos:end="3279:50"><name pos:start="3279:39" pos:end="3279:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3279:53" pos:end="3279:61"><expr pos:start="3279:53" pos:end="3279:61"><name pos:start="3279:53" pos:end="3279:61">target_st</name></expr></argument>, <argument pos:start="3279:64" pos:end="3279:67"><expr pos:start="3279:64" pos:end="3279:67"><name pos:start="3279:64" pos:end="3279:67">arg2</name></expr></argument>, <argument pos:start="3279:70" pos:end="3279:70"><expr pos:start="3279:70" pos:end="3279:70"><literal type="number" pos:start="3279:70" pos:end="3279:70">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3281:21" pos:end="3281:32"><block_content pos:start="3281:21" pos:end="3281:32">

                    <goto pos:start="3281:21" pos:end="3281:32">goto <name pos:start="3281:26" pos:end="3281:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3283:17" pos:end="3283:57"><expr pos:start="3283:17" pos:end="3283:56"><call pos:start="3283:17" pos:end="3283:56"><name pos:start="3283:17" pos:end="3283:22">memset</name><argument_list pos:start="3283:23" pos:end="3283:56">(<argument pos:start="3283:24" pos:end="3283:32"><expr pos:start="3283:24" pos:end="3283:32"><name pos:start="3283:24" pos:end="3283:32">target_st</name></expr></argument>, <argument pos:start="3283:35" pos:end="3283:35"><expr pos:start="3283:35" pos:end="3283:35"><literal type="number" pos:start="3283:35" pos:end="3283:35">0</literal></expr></argument>, <argument pos:start="3283:38" pos:end="3283:55"><expr pos:start="3283:38" pos:end="3283:55"><sizeof pos:start="3283:38" pos:end="3283:55">sizeof<argument_list pos:start="3283:44" pos:end="3283:55">(<argument pos:start="3283:45" pos:end="3283:54"><expr pos:start="3283:45" pos:end="3283:54"><operator pos:start="3283:45" pos:end="3283:45">*</operator><name pos:start="3283:46" pos:end="3283:54">target_st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3285:17" pos:end="3285:58"><expr pos:start="3285:17" pos:end="3285:57"><call pos:start="3285:17" pos:end="3285:57"><name pos:start="3285:17" pos:end="3285:26">__put_user</name><argument_list pos:start="3285:27" pos:end="3285:57">(<argument pos:start="3285:28" pos:end="3285:36"><expr pos:start="3285:28" pos:end="3285:36"><name pos:start="3285:28" pos:end="3285:36"><name pos:start="3285:28" pos:end="3285:29">st</name><operator pos:start="3285:30" pos:end="3285:30">.</operator><name pos:start="3285:31" pos:end="3285:36">st_dev</name></name></expr></argument>, <argument pos:start="3285:39" pos:end="3285:56"><expr pos:start="3285:39" pos:end="3285:56"><operator pos:start="3285:39" pos:end="3285:39">&amp;</operator><name pos:start="3285:40" pos:end="3285:56"><name pos:start="3285:40" pos:end="3285:48">target_st</name><operator pos:start="3285:49" pos:end="3285:50">-&gt;</operator><name pos:start="3285:51" pos:end="3285:56">st_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3287:17" pos:end="3287:58"><expr pos:start="3287:17" pos:end="3287:57"><call pos:start="3287:17" pos:end="3287:57"><name pos:start="3287:17" pos:end="3287:26">__put_user</name><argument_list pos:start="3287:27" pos:end="3287:57">(<argument pos:start="3287:28" pos:end="3287:36"><expr pos:start="3287:28" pos:end="3287:36"><name pos:start="3287:28" pos:end="3287:36"><name pos:start="3287:28" pos:end="3287:29">st</name><operator pos:start="3287:30" pos:end="3287:30">.</operator><name pos:start="3287:31" pos:end="3287:36">st_ino</name></name></expr></argument>, <argument pos:start="3287:39" pos:end="3287:56"><expr pos:start="3287:39" pos:end="3287:56"><operator pos:start="3287:39" pos:end="3287:39">&amp;</operator><name pos:start="3287:40" pos:end="3287:56"><name pos:start="3287:40" pos:end="3287:48">target_st</name><operator pos:start="3287:49" pos:end="3287:50">-&gt;</operator><name pos:start="3287:51" pos:end="3287:56">st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3289:17" pos:end="3289:60"><expr pos:start="3289:17" pos:end="3289:59"><call pos:start="3289:17" pos:end="3289:59"><name pos:start="3289:17" pos:end="3289:26">__put_user</name><argument_list pos:start="3289:27" pos:end="3289:59">(<argument pos:start="3289:28" pos:end="3289:37"><expr pos:start="3289:28" pos:end="3289:37"><name pos:start="3289:28" pos:end="3289:37"><name pos:start="3289:28" pos:end="3289:29">st</name><operator pos:start="3289:30" pos:end="3289:30">.</operator><name pos:start="3289:31" pos:end="3289:37">st_mode</name></name></expr></argument>, <argument pos:start="3289:40" pos:end="3289:58"><expr pos:start="3289:40" pos:end="3289:58"><operator pos:start="3289:40" pos:end="3289:40">&amp;</operator><name pos:start="3289:41" pos:end="3289:58"><name pos:start="3289:41" pos:end="3289:49">target_st</name><operator pos:start="3289:50" pos:end="3289:51">-&gt;</operator><name pos:start="3289:52" pos:end="3289:58">st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3291:17" pos:end="3291:58"><expr pos:start="3291:17" pos:end="3291:57"><call pos:start="3291:17" pos:end="3291:57"><name pos:start="3291:17" pos:end="3291:26">__put_user</name><argument_list pos:start="3291:27" pos:end="3291:57">(<argument pos:start="3291:28" pos:end="3291:36"><expr pos:start="3291:28" pos:end="3291:36"><name pos:start="3291:28" pos:end="3291:36"><name pos:start="3291:28" pos:end="3291:29">st</name><operator pos:start="3291:30" pos:end="3291:30">.</operator><name pos:start="3291:31" pos:end="3291:36">st_uid</name></name></expr></argument>, <argument pos:start="3291:39" pos:end="3291:56"><expr pos:start="3291:39" pos:end="3291:56"><operator pos:start="3291:39" pos:end="3291:39">&amp;</operator><name pos:start="3291:40" pos:end="3291:56"><name pos:start="3291:40" pos:end="3291:48">target_st</name><operator pos:start="3291:49" pos:end="3291:50">-&gt;</operator><name pos:start="3291:51" pos:end="3291:56">st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3293:17" pos:end="3293:58"><expr pos:start="3293:17" pos:end="3293:57"><call pos:start="3293:17" pos:end="3293:57"><name pos:start="3293:17" pos:end="3293:26">__put_user</name><argument_list pos:start="3293:27" pos:end="3293:57">(<argument pos:start="3293:28" pos:end="3293:36"><expr pos:start="3293:28" pos:end="3293:36"><name pos:start="3293:28" pos:end="3293:36"><name pos:start="3293:28" pos:end="3293:29">st</name><operator pos:start="3293:30" pos:end="3293:30">.</operator><name pos:start="3293:31" pos:end="3293:36">st_gid</name></name></expr></argument>, <argument pos:start="3293:39" pos:end="3293:56"><expr pos:start="3293:39" pos:end="3293:56"><operator pos:start="3293:39" pos:end="3293:39">&amp;</operator><name pos:start="3293:40" pos:end="3293:56"><name pos:start="3293:40" pos:end="3293:48">target_st</name><operator pos:start="3293:49" pos:end="3293:50">-&gt;</operator><name pos:start="3293:51" pos:end="3293:56">st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3295:17" pos:end="3295:62"><expr pos:start="3295:17" pos:end="3295:61"><call pos:start="3295:17" pos:end="3295:61"><name pos:start="3295:17" pos:end="3295:26">__put_user</name><argument_list pos:start="3295:27" pos:end="3295:61">(<argument pos:start="3295:28" pos:end="3295:38"><expr pos:start="3295:28" pos:end="3295:38"><name pos:start="3295:28" pos:end="3295:38"><name pos:start="3295:28" pos:end="3295:29">st</name><operator pos:start="3295:30" pos:end="3295:30">.</operator><name pos:start="3295:31" pos:end="3295:38">st_nlink</name></name></expr></argument>, <argument pos:start="3295:41" pos:end="3295:60"><expr pos:start="3295:41" pos:end="3295:60"><operator pos:start="3295:41" pos:end="3295:41">&amp;</operator><name pos:start="3295:42" pos:end="3295:60"><name pos:start="3295:42" pos:end="3295:50">target_st</name><operator pos:start="3295:51" pos:end="3295:52">-&gt;</operator><name pos:start="3295:53" pos:end="3295:60">st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3297:17" pos:end="3297:60"><expr pos:start="3297:17" pos:end="3297:59"><call pos:start="3297:17" pos:end="3297:59"><name pos:start="3297:17" pos:end="3297:26">__put_user</name><argument_list pos:start="3297:27" pos:end="3297:59">(<argument pos:start="3297:28" pos:end="3297:37"><expr pos:start="3297:28" pos:end="3297:37"><name pos:start="3297:28" pos:end="3297:37"><name pos:start="3297:28" pos:end="3297:29">st</name><operator pos:start="3297:30" pos:end="3297:30">.</operator><name pos:start="3297:31" pos:end="3297:37">st_rdev</name></name></expr></argument>, <argument pos:start="3297:40" pos:end="3297:58"><expr pos:start="3297:40" pos:end="3297:58"><operator pos:start="3297:40" pos:end="3297:40">&amp;</operator><name pos:start="3297:41" pos:end="3297:58"><name pos:start="3297:41" pos:end="3297:49">target_st</name><operator pos:start="3297:50" pos:end="3297:51">-&gt;</operator><name pos:start="3297:52" pos:end="3297:58">st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3299:17" pos:end="3299:60"><expr pos:start="3299:17" pos:end="3299:59"><call pos:start="3299:17" pos:end="3299:59"><name pos:start="3299:17" pos:end="3299:26">__put_user</name><argument_list pos:start="3299:27" pos:end="3299:59">(<argument pos:start="3299:28" pos:end="3299:37"><expr pos:start="3299:28" pos:end="3299:37"><name pos:start="3299:28" pos:end="3299:37"><name pos:start="3299:28" pos:end="3299:29">st</name><operator pos:start="3299:30" pos:end="3299:30">.</operator><name pos:start="3299:31" pos:end="3299:37">st_size</name></name></expr></argument>, <argument pos:start="3299:40" pos:end="3299:58"><expr pos:start="3299:40" pos:end="3299:58"><operator pos:start="3299:40" pos:end="3299:40">&amp;</operator><name pos:start="3299:41" pos:end="3299:58"><name pos:start="3299:41" pos:end="3299:49">target_st</name><operator pos:start="3299:50" pos:end="3299:51">-&gt;</operator><name pos:start="3299:52" pos:end="3299:58">st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3301:17" pos:end="3301:66"><expr pos:start="3301:17" pos:end="3301:65"><call pos:start="3301:17" pos:end="3301:65"><name pos:start="3301:17" pos:end="3301:26">__put_user</name><argument_list pos:start="3301:27" pos:end="3301:65">(<argument pos:start="3301:28" pos:end="3301:40"><expr pos:start="3301:28" pos:end="3301:40"><name pos:start="3301:28" pos:end="3301:40"><name pos:start="3301:28" pos:end="3301:29">st</name><operator pos:start="3301:30" pos:end="3301:30">.</operator><name pos:start="3301:31" pos:end="3301:40">st_blksize</name></name></expr></argument>, <argument pos:start="3301:43" pos:end="3301:64"><expr pos:start="3301:43" pos:end="3301:64"><operator pos:start="3301:43" pos:end="3301:43">&amp;</operator><name pos:start="3301:44" pos:end="3301:64"><name pos:start="3301:44" pos:end="3301:52">target_st</name><operator pos:start="3301:53" pos:end="3301:54">-&gt;</operator><name pos:start="3301:55" pos:end="3301:64">st_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3303:17" pos:end="3303:64"><expr pos:start="3303:17" pos:end="3303:63"><call pos:start="3303:17" pos:end="3303:63"><name pos:start="3303:17" pos:end="3303:26">__put_user</name><argument_list pos:start="3303:27" pos:end="3303:63">(<argument pos:start="3303:28" pos:end="3303:39"><expr pos:start="3303:28" pos:end="3303:39"><name pos:start="3303:28" pos:end="3303:39"><name pos:start="3303:28" pos:end="3303:29">st</name><operator pos:start="3303:30" pos:end="3303:30">.</operator><name pos:start="3303:31" pos:end="3303:39">st_blocks</name></name></expr></argument>, <argument pos:start="3303:42" pos:end="3303:62"><expr pos:start="3303:42" pos:end="3303:62"><operator pos:start="3303:42" pos:end="3303:42">&amp;</operator><name pos:start="3303:43" pos:end="3303:62"><name pos:start="3303:43" pos:end="3303:51">target_st</name><operator pos:start="3303:52" pos:end="3303:53">-&gt;</operator><name pos:start="3303:54" pos:end="3303:62">st_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3305:17" pos:end="3305:69"><expr pos:start="3305:17" pos:end="3305:68"><call pos:start="3305:17" pos:end="3305:68"><name pos:start="3305:17" pos:end="3305:26">__put_user</name><argument_list pos:start="3305:27" pos:end="3305:68">(<argument pos:start="3305:28" pos:end="3305:38"><expr pos:start="3305:28" pos:end="3305:38"><name pos:start="3305:28" pos:end="3305:38"><name pos:start="3305:28" pos:end="3305:29">st</name><operator pos:start="3305:30" pos:end="3305:30">.</operator><name pos:start="3305:31" pos:end="3305:38">st_atime</name></name></expr></argument>, <argument pos:start="3305:41" pos:end="3305:67"><expr pos:start="3305:41" pos:end="3305:67"><operator pos:start="3305:41" pos:end="3305:41">&amp;</operator><name pos:start="3305:42" pos:end="3305:67"><name pos:start="3305:42" pos:end="3305:50">target_st</name><operator pos:start="3305:51" pos:end="3305:52">-&gt;</operator><name pos:start="3305:53" pos:end="3305:67">target_st_atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3307:17" pos:end="3307:69"><expr pos:start="3307:17" pos:end="3307:68"><call pos:start="3307:17" pos:end="3307:68"><name pos:start="3307:17" pos:end="3307:26">__put_user</name><argument_list pos:start="3307:27" pos:end="3307:68">(<argument pos:start="3307:28" pos:end="3307:38"><expr pos:start="3307:28" pos:end="3307:38"><name pos:start="3307:28" pos:end="3307:38"><name pos:start="3307:28" pos:end="3307:29">st</name><operator pos:start="3307:30" pos:end="3307:30">.</operator><name pos:start="3307:31" pos:end="3307:38">st_mtime</name></name></expr></argument>, <argument pos:start="3307:41" pos:end="3307:67"><expr pos:start="3307:41" pos:end="3307:67"><operator pos:start="3307:41" pos:end="3307:41">&amp;</operator><name pos:start="3307:42" pos:end="3307:67"><name pos:start="3307:42" pos:end="3307:50">target_st</name><operator pos:start="3307:51" pos:end="3307:52">-&gt;</operator><name pos:start="3307:53" pos:end="3307:67">target_st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3309:17" pos:end="3309:69"><expr pos:start="3309:17" pos:end="3309:68"><call pos:start="3309:17" pos:end="3309:68"><name pos:start="3309:17" pos:end="3309:26">__put_user</name><argument_list pos:start="3309:27" pos:end="3309:68">(<argument pos:start="3309:28" pos:end="3309:38"><expr pos:start="3309:28" pos:end="3309:38"><name pos:start="3309:28" pos:end="3309:38"><name pos:start="3309:28" pos:end="3309:29">st</name><operator pos:start="3309:30" pos:end="3309:30">.</operator><name pos:start="3309:31" pos:end="3309:38">st_ctime</name></name></expr></argument>, <argument pos:start="3309:41" pos:end="3309:67"><expr pos:start="3309:41" pos:end="3309:67"><operator pos:start="3309:41" pos:end="3309:41">&amp;</operator><name pos:start="3309:42" pos:end="3309:67"><name pos:start="3309:42" pos:end="3309:50">target_st</name><operator pos:start="3309:51" pos:end="3309:52">-&gt;</operator><name pos:start="3309:53" pos:end="3309:67">target_st_ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3311:17" pos:end="3311:55"><expr pos:start="3311:17" pos:end="3311:54"><call pos:start="3311:17" pos:end="3311:54"><name pos:start="3311:17" pos:end="3311:34">unlock_user_struct</name><argument_list pos:start="3311:35" pos:end="3311:54">(<argument pos:start="3311:36" pos:end="3311:44"><expr pos:start="3311:36" pos:end="3311:44"><name pos:start="3311:36" pos:end="3311:44">target_st</name></expr></argument>, <argument pos:start="3311:47" pos:end="3311:50"><expr pos:start="3311:47" pos:end="3311:50"><name pos:start="3311:47" pos:end="3311:50">arg2</name></expr></argument>, <argument pos:start="3311:53" pos:end="3311:53"><expr pos:start="3311:53" pos:end="3311:53"><literal type="number" pos:start="3311:53" pos:end="3311:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3317:9" pos:end="3320:0">break;</break>

<cpp:ifdef pos:start="3319:1" pos:end="3319:25">#<cpp:directive pos:start="3319:2" pos:end="3319:6">ifdef</cpp:directive> <name pos:start="3319:8" pos:end="3319:25">TARGET_NR_olduname</name></cpp:ifdef>

    <case pos:start="3321:5" pos:end="3321:28">case <expr pos:start="3321:10" pos:end="3321:27"><name pos:start="3321:10" pos:end="3321:27">TARGET_NR_olduname</name></expr>:</case>

        <goto pos:start="3323:9" pos:end="3328:0">goto <name pos:start="3323:14" pos:end="3323:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3325:1" pos:end="3325:6">#<cpp:directive pos:start="3325:2" pos:end="3325:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3327:1" pos:end="3327:21">#<cpp:directive pos:start="3327:2" pos:end="3327:6">ifdef</cpp:directive> <name pos:start="3327:8" pos:end="3327:21">TARGET_NR_iopl</name></cpp:ifdef>

    <case pos:start="3329:5" pos:end="3329:24">case <expr pos:start="3329:10" pos:end="3329:23"><name pos:start="3329:10" pos:end="3329:23">TARGET_NR_iopl</name></expr>:</case>

        <goto pos:start="3331:9" pos:end="3334:0">goto <name pos:start="3331:14" pos:end="3331:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3333:1" pos:end="3333:6">#<cpp:directive pos:start="3333:2" pos:end="3333:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3335:5" pos:end="3335:27">case <expr pos:start="3335:10" pos:end="3335:26"><name pos:start="3335:10" pos:end="3335:26">TARGET_NR_vhangup</name></expr>:</case>

        <expr_stmt pos:start="3337:9" pos:end="3337:35"><expr pos:start="3337:9" pos:end="3337:34"><name pos:start="3337:9" pos:end="3337:11">ret</name> <operator pos:start="3337:13" pos:end="3337:13">=</operator> <call pos:start="3337:15" pos:end="3337:34"><name pos:start="3337:15" pos:end="3337:23">get_errno</name><argument_list pos:start="3337:24" pos:end="3337:34">(<argument pos:start="3337:25" pos:end="3337:33"><expr pos:start="3337:25" pos:end="3337:33"><call pos:start="3337:25" pos:end="3337:33"><name pos:start="3337:25" pos:end="3337:31">vhangup</name><argument_list pos:start="3337:32" pos:end="3337:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3339:9" pos:end="3342:0">break;</break>

<cpp:ifdef pos:start="3341:1" pos:end="3341:21">#<cpp:directive pos:start="3341:2" pos:end="3341:6">ifdef</cpp:directive> <name pos:start="3341:8" pos:end="3341:21">TARGET_NR_idle</name></cpp:ifdef>

    <case pos:start="3343:5" pos:end="3343:24">case <expr pos:start="3343:10" pos:end="3343:23"><name pos:start="3343:10" pos:end="3343:23">TARGET_NR_idle</name></expr>:</case>

        <goto pos:start="3345:9" pos:end="3350:0">goto <name pos:start="3345:14" pos:end="3345:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3347:1" pos:end="3347:6">#<cpp:directive pos:start="3347:2" pos:end="3347:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3349:1" pos:end="3349:24">#<cpp:directive pos:start="3349:2" pos:end="3349:6">ifdef</cpp:directive> <name pos:start="3349:8" pos:end="3349:24">TARGET_NR_syscall</name></cpp:ifdef>

    <case pos:start="3351:5" pos:end="3351:27">case <expr pos:start="3351:10" pos:end="3351:26"><name pos:start="3351:10" pos:end="3351:26">TARGET_NR_syscall</name></expr>:</case>

        <expr_stmt pos:start="3353:9" pos:end="3355:46"><expr pos:start="3353:9" pos:end="3355:45"><name pos:start="3353:9" pos:end="3353:11">ret</name> <operator pos:start="3353:13" pos:end="3353:13">=</operator> <call pos:start="3353:15" pos:end="3355:45"><name pos:start="3353:15" pos:end="3353:24">do_syscall</name><argument_list pos:start="3353:25" pos:end="3355:45">(<argument pos:start="3353:26" pos:end="3353:32"><expr pos:start="3353:26" pos:end="3353:32"><name pos:start="3353:26" pos:end="3353:32">cpu_env</name></expr></argument>, <argument pos:start="3353:35" pos:end="3353:47"><expr pos:start="3353:35" pos:end="3353:47"><name pos:start="3353:35" pos:end="3353:38">arg1</name> <operator pos:start="3353:40" pos:end="3353:40">&amp;</operator> <literal type="number" pos:start="3353:42" pos:end="3353:47">0xffff</literal></expr></argument>, <argument pos:start="3353:50" pos:end="3353:53"><expr pos:start="3353:50" pos:end="3353:53"><name pos:start="3353:50" pos:end="3353:53">arg2</name></expr></argument>, <argument pos:start="3353:56" pos:end="3353:59"><expr pos:start="3353:56" pos:end="3353:59"><name pos:start="3353:56" pos:end="3353:59">arg3</name></expr></argument>, <argument pos:start="3353:62" pos:end="3353:65"><expr pos:start="3353:62" pos:end="3353:65"><name pos:start="3353:62" pos:end="3353:65">arg4</name></expr></argument>, <argument pos:start="3353:68" pos:end="3353:71"><expr pos:start="3353:68" pos:end="3353:71"><name pos:start="3353:68" pos:end="3353:71">arg5</name></expr></argument>,

                         <argument pos:start="3355:26" pos:end="3355:29"><expr pos:start="3355:26" pos:end="3355:29"><name pos:start="3355:26" pos:end="3355:29">arg6</name></expr></argument>, <argument pos:start="3355:32" pos:end="3355:35"><expr pos:start="3355:32" pos:end="3355:35"><name pos:start="3355:32" pos:end="3355:35">arg7</name></expr></argument>, <argument pos:start="3355:38" pos:end="3355:41"><expr pos:start="3355:38" pos:end="3355:41"><name pos:start="3355:38" pos:end="3355:41">arg8</name></expr></argument>, <argument pos:start="3355:44" pos:end="3355:44"><expr pos:start="3355:44" pos:end="3355:44"><literal type="number" pos:start="3355:44" pos:end="3355:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3357:9" pos:end="3360:0">break;</break>

<cpp:endif pos:start="3359:1" pos:end="3359:6">#<cpp:directive pos:start="3359:2" pos:end="3359:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3361:5" pos:end="3361:25">case <expr pos:start="3361:10" pos:end="3361:24"><name pos:start="3361:10" pos:end="3361:24">TARGET_NR_wait4</name></expr>:</case>

        <block pos:start="3363:9" pos:end="3401:9">{<block_content pos:start="3365:13" pos:end="3399:13">

            <decl_stmt pos:start="3365:13" pos:end="3365:23"><decl pos:start="3365:13" pos:end="3365:22"><type pos:start="3365:13" pos:end="3365:15"><name pos:start="3365:13" pos:end="3365:15">int</name></type> <name pos:start="3365:17" pos:end="3365:22">status</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3367:13" pos:end="3367:39"><decl pos:start="3367:13" pos:end="3367:38"><type pos:start="3367:13" pos:end="3367:20"><name pos:start="3367:13" pos:end="3367:20">abi_long</name></type> <name pos:start="3367:22" pos:end="3367:31">status_ptr</name> <init pos:start="3367:33" pos:end="3367:38">= <expr pos:start="3367:35" pos:end="3367:38"><name pos:start="3367:35" pos:end="3367:38">arg2</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="3369:13" pos:end="3369:46"><decl pos:start="3369:13" pos:end="3369:32"><type pos:start="3369:13" pos:end="3369:25"><name pos:start="3369:13" pos:end="3369:25"><name pos:start="3369:13" pos:end="3369:18">struct</name> <name pos:start="3369:20" pos:end="3369:25">rusage</name></name></type> <name pos:start="3369:27" pos:end="3369:32">rusage</name></decl>, <decl pos:start="3369:35" pos:end="3369:45"><type ref="prev" pos:start="3369:13" pos:end="3369:25"><modifier pos:start="3369:35" pos:end="3369:35">*</modifier></type><name pos:start="3369:36" pos:end="3369:45">rusage_ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3371:13" pos:end="3371:43"><decl pos:start="3371:13" pos:end="3371:42"><type pos:start="3371:13" pos:end="3371:21"><name pos:start="3371:13" pos:end="3371:21">abi_ulong</name></type> <name pos:start="3371:23" pos:end="3371:35">target_rusage</name> <init pos:start="3371:37" pos:end="3371:42">= <expr pos:start="3371:39" pos:end="3371:42"><name pos:start="3371:39" pos:end="3371:42">arg4</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="3373:13" pos:end="3379:34"><if pos:start="3373:13" pos:end="3375:37">if <condition pos:start="3373:16" pos:end="3373:30">(<expr pos:start="3373:17" pos:end="3373:29"><name pos:start="3373:17" pos:end="3373:29">target_rusage</name></expr>)</condition><block type="pseudo" pos:start="3375:17" pos:end="3375:37"><block_content pos:start="3375:17" pos:end="3375:37">

                <expr_stmt pos:start="3375:17" pos:end="3375:37"><expr pos:start="3375:17" pos:end="3375:36"><name pos:start="3375:17" pos:end="3375:26">rusage_ptr</name> <operator pos:start="3375:28" pos:end="3375:28">=</operator> <operator pos:start="3375:30" pos:end="3375:30">&amp;</operator><name pos:start="3375:31" pos:end="3375:36">rusage</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3377:13" pos:end="3379:34">else<block type="pseudo" pos:start="3379:17" pos:end="3379:34"><block_content pos:start="3379:17" pos:end="3379:34">

                <expr_stmt pos:start="3379:17" pos:end="3379:34"><expr pos:start="3379:17" pos:end="3379:33"><name pos:start="3379:17" pos:end="3379:26">rusage_ptr</name> <operator pos:start="3379:28" pos:end="3379:28">=</operator> <name pos:start="3379:30" pos:end="3379:33">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="3381:13" pos:end="3381:68"><expr pos:start="3381:13" pos:end="3381:67"><name pos:start="3381:13" pos:end="3381:15">ret</name> <operator pos:start="3381:17" pos:end="3381:17">=</operator> <call pos:start="3381:19" pos:end="3381:67"><name pos:start="3381:19" pos:end="3381:27">get_errno</name><argument_list pos:start="3381:28" pos:end="3381:67">(<argument pos:start="3381:29" pos:end="3381:66"><expr pos:start="3381:29" pos:end="3381:66"><call pos:start="3381:29" pos:end="3381:66"><name pos:start="3381:29" pos:end="3381:33">wait4</name><argument_list pos:start="3381:34" pos:end="3381:66">(<argument pos:start="3381:35" pos:end="3381:38"><expr pos:start="3381:35" pos:end="3381:38"><name pos:start="3381:35" pos:end="3381:38">arg1</name></expr></argument>, <argument pos:start="3381:41" pos:end="3381:47"><expr pos:start="3381:41" pos:end="3381:47"><operator pos:start="3381:41" pos:end="3381:41">&amp;</operator><name pos:start="3381:42" pos:end="3381:47">status</name></expr></argument>, <argument pos:start="3381:50" pos:end="3381:53"><expr pos:start="3381:50" pos:end="3381:53"><name pos:start="3381:50" pos:end="3381:53">arg3</name></expr></argument>, <argument pos:start="3381:56" pos:end="3381:65"><expr pos:start="3381:56" pos:end="3381:65"><name pos:start="3381:56" pos:end="3381:65">rusage_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3383:13" pos:end="3399:13"><if pos:start="3383:13" pos:end="3399:13">if <condition pos:start="3383:16" pos:end="3383:31">(<expr pos:start="3383:17" pos:end="3383:30"><operator pos:start="3383:17" pos:end="3383:17">!</operator><call pos:start="3383:18" pos:end="3383:30"><name pos:start="3383:18" pos:end="3383:25">is_error</name><argument_list pos:start="3383:26" pos:end="3383:30">(<argument pos:start="3383:27" pos:end="3383:29"><expr pos:start="3383:27" pos:end="3383:29"><name pos:start="3383:27" pos:end="3383:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3383:33" pos:end="3399:13">{<block_content pos:start="3385:17" pos:end="3397:66">

                <if_stmt pos:start="3385:17" pos:end="3393:17"><if pos:start="3385:17" pos:end="3393:17">if <condition pos:start="3385:20" pos:end="3385:38">(<expr pos:start="3385:21" pos:end="3385:37"><name pos:start="3385:21" pos:end="3385:30">status_ptr</name> <operator pos:start="3385:32" pos:end="3385:33">&amp;&amp;</operator> <name pos:start="3385:35" pos:end="3385:37">ret</name></expr>)</condition> <block pos:start="3385:40" pos:end="3393:17">{<block_content pos:start="3387:21" pos:end="3391:36">

                    <expr_stmt pos:start="3387:21" pos:end="3387:63"><expr pos:start="3387:21" pos:end="3387:62"><name pos:start="3387:21" pos:end="3387:26">status</name> <operator pos:start="3387:28" pos:end="3387:28">=</operator> <call pos:start="3387:30" pos:end="3387:62"><name pos:start="3387:30" pos:end="3387:54">host_to_target_waitstatus</name><argument_list pos:start="3387:55" pos:end="3387:62">(<argument pos:start="3387:56" pos:end="3387:61"><expr pos:start="3387:56" pos:end="3387:61"><name pos:start="3387:56" pos:end="3387:61">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="3389:21" pos:end="3391:36"><if pos:start="3389:21" pos:end="3391:36">if <condition pos:start="3389:24" pos:end="3389:57">(<expr pos:start="3389:25" pos:end="3389:56"><call pos:start="3389:25" pos:end="3389:56"><name pos:start="3389:25" pos:end="3389:36">put_user_s32</name><argument_list pos:start="3389:37" pos:end="3389:56">(<argument pos:start="3389:38" pos:end="3389:43"><expr pos:start="3389:38" pos:end="3389:43"><name pos:start="3389:38" pos:end="3389:43">status</name></expr></argument>, <argument pos:start="3389:46" pos:end="3389:55"><expr pos:start="3389:46" pos:end="3389:55"><name pos:start="3389:46" pos:end="3389:55">status_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3391:25" pos:end="3391:36"><block_content pos:start="3391:25" pos:end="3391:36">

                        <goto pos:start="3391:25" pos:end="3391:36">goto <name pos:start="3391:30" pos:end="3391:35">efault</name>;</goto></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="3395:17" pos:end="3397:66"><if pos:start="3395:17" pos:end="3397:66">if <condition pos:start="3395:20" pos:end="3395:34">(<expr pos:start="3395:21" pos:end="3395:33"><name pos:start="3395:21" pos:end="3395:33">target_rusage</name></expr>)</condition><block type="pseudo" pos:start="3397:21" pos:end="3397:66"><block_content pos:start="3397:21" pos:end="3397:66">

                    <expr_stmt pos:start="3397:21" pos:end="3397:66"><expr pos:start="3397:21" pos:end="3397:65"><call pos:start="3397:21" pos:end="3397:65"><name pos:start="3397:21" pos:end="3397:41">host_to_target_rusage</name><argument_list pos:start="3397:42" pos:end="3397:65">(<argument pos:start="3397:43" pos:end="3397:55"><expr pos:start="3397:43" pos:end="3397:55"><name pos:start="3397:43" pos:end="3397:55">target_rusage</name></expr></argument>, <argument pos:start="3397:58" pos:end="3397:64"><expr pos:start="3397:58" pos:end="3397:64"><operator pos:start="3397:58" pos:end="3397:58">&amp;</operator><name pos:start="3397:59" pos:end="3397:64">rusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3403:9" pos:end="3406:0">break;</break>

<cpp:ifdef pos:start="3405:1" pos:end="3405:24">#<cpp:directive pos:start="3405:2" pos:end="3405:6">ifdef</cpp:directive> <name pos:start="3405:8" pos:end="3405:24">TARGET_NR_swapoff</name></cpp:ifdef>

    <case pos:start="3407:5" pos:end="3407:27">case <expr pos:start="3407:10" pos:end="3407:26"><name pos:start="3407:10" pos:end="3407:26">TARGET_NR_swapoff</name></expr>:</case>

        <if_stmt pos:start="3409:9" pos:end="3411:24"><if pos:start="3409:9" pos:end="3411:24">if <condition pos:start="3409:12" pos:end="3409:42">(<expr pos:start="3409:13" pos:end="3409:41"><operator pos:start="3409:13" pos:end="3409:13">!</operator><operator pos:start="3409:14" pos:end="3409:14">(</operator><name pos:start="3409:15" pos:end="3409:15">p</name> <operator pos:start="3409:17" pos:end="3409:17">=</operator> <call pos:start="3409:19" pos:end="3409:40"><name pos:start="3409:19" pos:end="3409:34">lock_user_string</name><argument_list pos:start="3409:35" pos:end="3409:40">(<argument pos:start="3409:36" pos:end="3409:39"><expr pos:start="3409:36" pos:end="3409:39"><name pos:start="3409:36" pos:end="3409:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="3409:41" pos:end="3409:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3411:13" pos:end="3411:24"><block_content pos:start="3411:13" pos:end="3411:24">

            <goto pos:start="3411:13" pos:end="3411:24">goto <name pos:start="3411:18" pos:end="3411:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3413:9" pos:end="3413:36"><expr pos:start="3413:9" pos:end="3413:35"><name pos:start="3413:9" pos:end="3413:11">ret</name> <operator pos:start="3413:13" pos:end="3413:13">=</operator> <call pos:start="3413:15" pos:end="3413:35"><name pos:start="3413:15" pos:end="3413:23">get_errno</name><argument_list pos:start="3413:24" pos:end="3413:35">(<argument pos:start="3413:25" pos:end="3413:34"><expr pos:start="3413:25" pos:end="3413:34"><call pos:start="3413:25" pos:end="3413:34"><name pos:start="3413:25" pos:end="3413:31">swapoff</name><argument_list pos:start="3413:32" pos:end="3413:34">(<argument pos:start="3413:33" pos:end="3413:33"><expr pos:start="3413:33" pos:end="3413:33"><name pos:start="3413:33" pos:end="3413:33">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3415:9" pos:end="3415:32"><expr pos:start="3415:9" pos:end="3415:31"><call pos:start="3415:9" pos:end="3415:31"><name pos:start="3415:9" pos:end="3415:19">unlock_user</name><argument_list pos:start="3415:20" pos:end="3415:31">(<argument pos:start="3415:21" pos:end="3415:21"><expr pos:start="3415:21" pos:end="3415:21"><name pos:start="3415:21" pos:end="3415:21">p</name></expr></argument>, <argument pos:start="3415:24" pos:end="3415:27"><expr pos:start="3415:24" pos:end="3415:27"><name pos:start="3415:24" pos:end="3415:27">arg1</name></expr></argument>, <argument pos:start="3415:30" pos:end="3415:30"><expr pos:start="3415:30" pos:end="3415:30"><literal type="number" pos:start="3415:30" pos:end="3415:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3417:9" pos:end="3420:0">break;</break>

<cpp:endif pos:start="3419:1" pos:end="3419:6">#<cpp:directive pos:start="3419:2" pos:end="3419:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3421:5" pos:end="3421:27">case <expr pos:start="3421:10" pos:end="3421:26"><name pos:start="3421:10" pos:end="3421:26">TARGET_NR_sysinfo</name></expr>:</case>

        <block pos:start="3423:9" pos:end="3471:9">{<block_content pos:start="3425:13" pos:end="3469:13">

            <decl_stmt pos:start="3425:13" pos:end="3425:48"><decl pos:start="3425:13" pos:end="3425:47"><type pos:start="3425:13" pos:end="3425:35"><name pos:start="3425:13" pos:end="3425:33"><name pos:start="3425:13" pos:end="3425:18">struct</name> <name pos:start="3425:20" pos:end="3425:33">target_sysinfo</name></name> <modifier pos:start="3425:35" pos:end="3425:35">*</modifier></type><name pos:start="3425:36" pos:end="3425:47">target_value</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3427:13" pos:end="3427:33"><decl pos:start="3427:13" pos:end="3427:32"><type pos:start="3427:13" pos:end="3427:26"><name pos:start="3427:13" pos:end="3427:26"><name pos:start="3427:13" pos:end="3427:18">struct</name> <name pos:start="3427:20" pos:end="3427:26">sysinfo</name></name></type> <name pos:start="3427:28" pos:end="3427:32">value</name></decl>;</decl_stmt>

            <expr_stmt pos:start="3429:13" pos:end="3429:45"><expr pos:start="3429:13" pos:end="3429:44"><name pos:start="3429:13" pos:end="3429:15">ret</name> <operator pos:start="3429:17" pos:end="3429:17">=</operator> <call pos:start="3429:19" pos:end="3429:44"><name pos:start="3429:19" pos:end="3429:27">get_errno</name><argument_list pos:start="3429:28" pos:end="3429:44">(<argument pos:start="3429:29" pos:end="3429:43"><expr pos:start="3429:29" pos:end="3429:43"><call pos:start="3429:29" pos:end="3429:43"><name pos:start="3429:29" pos:end="3429:35">sysinfo</name><argument_list pos:start="3429:36" pos:end="3429:43">(<argument pos:start="3429:37" pos:end="3429:42"><expr pos:start="3429:37" pos:end="3429:42"><operator pos:start="3429:37" pos:end="3429:37">&amp;</operator><name pos:start="3429:38" pos:end="3429:42">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3431:13" pos:end="3469:13"><if pos:start="3431:13" pos:end="3469:13">if <condition pos:start="3431:16" pos:end="3431:39">(<expr pos:start="3431:17" pos:end="3431:38"><operator pos:start="3431:17" pos:end="3431:17">!</operator><call pos:start="3431:18" pos:end="3431:30"><name pos:start="3431:18" pos:end="3431:25">is_error</name><argument_list pos:start="3431:26" pos:end="3431:30">(<argument pos:start="3431:27" pos:end="3431:29"><expr pos:start="3431:27" pos:end="3431:29"><name pos:start="3431:27" pos:end="3431:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="3431:32" pos:end="3431:33">&amp;&amp;</operator> <name pos:start="3431:35" pos:end="3431:38">arg1</name></expr>)</condition>

            <block pos:start="3433:13" pos:end="3469:13">{<block_content pos:start="3435:17" pos:end="3467:58">

                <if_stmt pos:start="3435:17" pos:end="3437:32"><if pos:start="3435:17" pos:end="3437:32">if <condition pos:start="3435:20" pos:end="3435:75">(<expr pos:start="3435:21" pos:end="3435:74"><operator pos:start="3435:21" pos:end="3435:21">!</operator><call pos:start="3435:22" pos:end="3435:74"><name pos:start="3435:22" pos:end="3435:37">lock_user_struct</name><argument_list pos:start="3435:38" pos:end="3435:74">(<argument pos:start="3435:39" pos:end="3435:50"><expr pos:start="3435:39" pos:end="3435:50"><name pos:start="3435:39" pos:end="3435:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3435:53" pos:end="3435:64"><expr pos:start="3435:53" pos:end="3435:64"><name pos:start="3435:53" pos:end="3435:64">target_value</name></expr></argument>, <argument pos:start="3435:67" pos:end="3435:70"><expr pos:start="3435:67" pos:end="3435:70"><name pos:start="3435:67" pos:end="3435:70">arg1</name></expr></argument>, <argument pos:start="3435:73" pos:end="3435:73"><expr pos:start="3435:73" pos:end="3435:73"><literal type="number" pos:start="3435:73" pos:end="3435:73">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3437:21" pos:end="3437:32"><block_content pos:start="3437:21" pos:end="3437:32">

                    <goto pos:start="3437:21" pos:end="3437:32">goto <name pos:start="3437:26" pos:end="3437:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3439:17" pos:end="3439:64"><expr pos:start="3439:17" pos:end="3439:63"><call pos:start="3439:17" pos:end="3439:63"><name pos:start="3439:17" pos:end="3439:26">__put_user</name><argument_list pos:start="3439:27" pos:end="3439:63">(<argument pos:start="3439:28" pos:end="3439:39"><expr pos:start="3439:28" pos:end="3439:39"><name pos:start="3439:28" pos:end="3439:39"><name pos:start="3439:28" pos:end="3439:32">value</name><operator pos:start="3439:33" pos:end="3439:33">.</operator><name pos:start="3439:34" pos:end="3439:39">uptime</name></name></expr></argument>, <argument pos:start="3439:42" pos:end="3439:62"><expr pos:start="3439:42" pos:end="3439:62"><operator pos:start="3439:42" pos:end="3439:42">&amp;</operator><name pos:start="3439:43" pos:end="3439:62"><name pos:start="3439:43" pos:end="3439:54">target_value</name><operator pos:start="3439:55" pos:end="3439:56">-&gt;</operator><name pos:start="3439:57" pos:end="3439:62">uptime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3441:17" pos:end="3441:68"><expr pos:start="3441:17" pos:end="3441:67"><call pos:start="3441:17" pos:end="3441:67"><name pos:start="3441:17" pos:end="3441:26">__put_user</name><argument_list pos:start="3441:27" pos:end="3441:67">(<argument pos:start="3441:28" pos:end="3441:41"><expr pos:start="3441:28" pos:end="3441:41"><name pos:start="3441:28" pos:end="3441:41"><name pos:start="3441:28" pos:end="3441:32">value</name><operator pos:start="3441:33" pos:end="3441:33">.</operator><name pos:start="3441:34" pos:end="3441:38">loads</name><index pos:start="3441:39" pos:end="3441:41">[<expr pos:start="3441:40" pos:end="3441:40"><literal type="number" pos:start="3441:40" pos:end="3441:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3441:44" pos:end="3441:66"><expr pos:start="3441:44" pos:end="3441:66"><operator pos:start="3441:44" pos:end="3441:44">&amp;</operator><name pos:start="3441:45" pos:end="3441:66"><name pos:start="3441:45" pos:end="3441:56">target_value</name><operator pos:start="3441:57" pos:end="3441:58">-&gt;</operator><name pos:start="3441:59" pos:end="3441:63">loads</name><index pos:start="3441:64" pos:end="3441:66">[<expr pos:start="3441:65" pos:end="3441:65"><literal type="number" pos:start="3441:65" pos:end="3441:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3443:17" pos:end="3443:68"><expr pos:start="3443:17" pos:end="3443:67"><call pos:start="3443:17" pos:end="3443:67"><name pos:start="3443:17" pos:end="3443:26">__put_user</name><argument_list pos:start="3443:27" pos:end="3443:67">(<argument pos:start="3443:28" pos:end="3443:41"><expr pos:start="3443:28" pos:end="3443:41"><name pos:start="3443:28" pos:end="3443:41"><name pos:start="3443:28" pos:end="3443:32">value</name><operator pos:start="3443:33" pos:end="3443:33">.</operator><name pos:start="3443:34" pos:end="3443:38">loads</name><index pos:start="3443:39" pos:end="3443:41">[<expr pos:start="3443:40" pos:end="3443:40"><literal type="number" pos:start="3443:40" pos:end="3443:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="3443:44" pos:end="3443:66"><expr pos:start="3443:44" pos:end="3443:66"><operator pos:start="3443:44" pos:end="3443:44">&amp;</operator><name pos:start="3443:45" pos:end="3443:66"><name pos:start="3443:45" pos:end="3443:56">target_value</name><operator pos:start="3443:57" pos:end="3443:58">-&gt;</operator><name pos:start="3443:59" pos:end="3443:63">loads</name><index pos:start="3443:64" pos:end="3443:66">[<expr pos:start="3443:65" pos:end="3443:65"><literal type="number" pos:start="3443:65" pos:end="3443:65">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3445:17" pos:end="3445:68"><expr pos:start="3445:17" pos:end="3445:67"><call pos:start="3445:17" pos:end="3445:67"><name pos:start="3445:17" pos:end="3445:26">__put_user</name><argument_list pos:start="3445:27" pos:end="3445:67">(<argument pos:start="3445:28" pos:end="3445:41"><expr pos:start="3445:28" pos:end="3445:41"><name pos:start="3445:28" pos:end="3445:41"><name pos:start="3445:28" pos:end="3445:32">value</name><operator pos:start="3445:33" pos:end="3445:33">.</operator><name pos:start="3445:34" pos:end="3445:38">loads</name><index pos:start="3445:39" pos:end="3445:41">[<expr pos:start="3445:40" pos:end="3445:40"><literal type="number" pos:start="3445:40" pos:end="3445:40">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="3445:44" pos:end="3445:66"><expr pos:start="3445:44" pos:end="3445:66"><operator pos:start="3445:44" pos:end="3445:44">&amp;</operator><name pos:start="3445:45" pos:end="3445:66"><name pos:start="3445:45" pos:end="3445:56">target_value</name><operator pos:start="3445:57" pos:end="3445:58">-&gt;</operator><name pos:start="3445:59" pos:end="3445:63">loads</name><index pos:start="3445:64" pos:end="3445:66">[<expr pos:start="3445:65" pos:end="3445:65"><literal type="number" pos:start="3445:65" pos:end="3445:65">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3447:17" pos:end="3447:68"><expr pos:start="3447:17" pos:end="3447:67"><call pos:start="3447:17" pos:end="3447:67"><name pos:start="3447:17" pos:end="3447:26">__put_user</name><argument_list pos:start="3447:27" pos:end="3447:67">(<argument pos:start="3447:28" pos:end="3447:41"><expr pos:start="3447:28" pos:end="3447:41"><name pos:start="3447:28" pos:end="3447:41"><name pos:start="3447:28" pos:end="3447:32">value</name><operator pos:start="3447:33" pos:end="3447:33">.</operator><name pos:start="3447:34" pos:end="3447:41">totalram</name></name></expr></argument>, <argument pos:start="3447:44" pos:end="3447:66"><expr pos:start="3447:44" pos:end="3447:66"><operator pos:start="3447:44" pos:end="3447:44">&amp;</operator><name pos:start="3447:45" pos:end="3447:66"><name pos:start="3447:45" pos:end="3447:56">target_value</name><operator pos:start="3447:57" pos:end="3447:58">-&gt;</operator><name pos:start="3447:59" pos:end="3447:66">totalram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3449:17" pos:end="3449:66"><expr pos:start="3449:17" pos:end="3449:65"><call pos:start="3449:17" pos:end="3449:65"><name pos:start="3449:17" pos:end="3449:26">__put_user</name><argument_list pos:start="3449:27" pos:end="3449:65">(<argument pos:start="3449:28" pos:end="3449:40"><expr pos:start="3449:28" pos:end="3449:40"><name pos:start="3449:28" pos:end="3449:40"><name pos:start="3449:28" pos:end="3449:32">value</name><operator pos:start="3449:33" pos:end="3449:33">.</operator><name pos:start="3449:34" pos:end="3449:40">freeram</name></name></expr></argument>, <argument pos:start="3449:43" pos:end="3449:64"><expr pos:start="3449:43" pos:end="3449:64"><operator pos:start="3449:43" pos:end="3449:43">&amp;</operator><name pos:start="3449:44" pos:end="3449:64"><name pos:start="3449:44" pos:end="3449:55">target_value</name><operator pos:start="3449:56" pos:end="3449:57">-&gt;</operator><name pos:start="3449:58" pos:end="3449:64">freeram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3451:17" pos:end="3451:70"><expr pos:start="3451:17" pos:end="3451:69"><call pos:start="3451:17" pos:end="3451:69"><name pos:start="3451:17" pos:end="3451:26">__put_user</name><argument_list pos:start="3451:27" pos:end="3451:69">(<argument pos:start="3451:28" pos:end="3451:42"><expr pos:start="3451:28" pos:end="3451:42"><name pos:start="3451:28" pos:end="3451:42"><name pos:start="3451:28" pos:end="3451:32">value</name><operator pos:start="3451:33" pos:end="3451:33">.</operator><name pos:start="3451:34" pos:end="3451:42">sharedram</name></name></expr></argument>, <argument pos:start="3451:45" pos:end="3451:68"><expr pos:start="3451:45" pos:end="3451:68"><operator pos:start="3451:45" pos:end="3451:45">&amp;</operator><name pos:start="3451:46" pos:end="3451:68"><name pos:start="3451:46" pos:end="3451:57">target_value</name><operator pos:start="3451:58" pos:end="3451:59">-&gt;</operator><name pos:start="3451:60" pos:end="3451:68">sharedram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3453:17" pos:end="3453:70"><expr pos:start="3453:17" pos:end="3453:69"><call pos:start="3453:17" pos:end="3453:69"><name pos:start="3453:17" pos:end="3453:26">__put_user</name><argument_list pos:start="3453:27" pos:end="3453:69">(<argument pos:start="3453:28" pos:end="3453:42"><expr pos:start="3453:28" pos:end="3453:42"><name pos:start="3453:28" pos:end="3453:42"><name pos:start="3453:28" pos:end="3453:32">value</name><operator pos:start="3453:33" pos:end="3453:33">.</operator><name pos:start="3453:34" pos:end="3453:42">bufferram</name></name></expr></argument>, <argument pos:start="3453:45" pos:end="3453:68"><expr pos:start="3453:45" pos:end="3453:68"><operator pos:start="3453:45" pos:end="3453:45">&amp;</operator><name pos:start="3453:46" pos:end="3453:68"><name pos:start="3453:46" pos:end="3453:57">target_value</name><operator pos:start="3453:58" pos:end="3453:59">-&gt;</operator><name pos:start="3453:60" pos:end="3453:68">bufferram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3455:17" pos:end="3455:70"><expr pos:start="3455:17" pos:end="3455:69"><call pos:start="3455:17" pos:end="3455:69"><name pos:start="3455:17" pos:end="3455:26">__put_user</name><argument_list pos:start="3455:27" pos:end="3455:69">(<argument pos:start="3455:28" pos:end="3455:42"><expr pos:start="3455:28" pos:end="3455:42"><name pos:start="3455:28" pos:end="3455:42"><name pos:start="3455:28" pos:end="3455:32">value</name><operator pos:start="3455:33" pos:end="3455:33">.</operator><name pos:start="3455:34" pos:end="3455:42">totalswap</name></name></expr></argument>, <argument pos:start="3455:45" pos:end="3455:68"><expr pos:start="3455:45" pos:end="3455:68"><operator pos:start="3455:45" pos:end="3455:45">&amp;</operator><name pos:start="3455:46" pos:end="3455:68"><name pos:start="3455:46" pos:end="3455:57">target_value</name><operator pos:start="3455:58" pos:end="3455:59">-&gt;</operator><name pos:start="3455:60" pos:end="3455:68">totalswap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3457:17" pos:end="3457:68"><expr pos:start="3457:17" pos:end="3457:67"><call pos:start="3457:17" pos:end="3457:67"><name pos:start="3457:17" pos:end="3457:26">__put_user</name><argument_list pos:start="3457:27" pos:end="3457:67">(<argument pos:start="3457:28" pos:end="3457:41"><expr pos:start="3457:28" pos:end="3457:41"><name pos:start="3457:28" pos:end="3457:41"><name pos:start="3457:28" pos:end="3457:32">value</name><operator pos:start="3457:33" pos:end="3457:33">.</operator><name pos:start="3457:34" pos:end="3457:41">freeswap</name></name></expr></argument>, <argument pos:start="3457:44" pos:end="3457:66"><expr pos:start="3457:44" pos:end="3457:66"><operator pos:start="3457:44" pos:end="3457:44">&amp;</operator><name pos:start="3457:45" pos:end="3457:66"><name pos:start="3457:45" pos:end="3457:56">target_value</name><operator pos:start="3457:57" pos:end="3457:58">-&gt;</operator><name pos:start="3457:59" pos:end="3457:66">freeswap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3459:17" pos:end="3459:62"><expr pos:start="3459:17" pos:end="3459:61"><call pos:start="3459:17" pos:end="3459:61"><name pos:start="3459:17" pos:end="3459:26">__put_user</name><argument_list pos:start="3459:27" pos:end="3459:61">(<argument pos:start="3459:28" pos:end="3459:38"><expr pos:start="3459:28" pos:end="3459:38"><name pos:start="3459:28" pos:end="3459:38"><name pos:start="3459:28" pos:end="3459:32">value</name><operator pos:start="3459:33" pos:end="3459:33">.</operator><name pos:start="3459:34" pos:end="3459:38">procs</name></name></expr></argument>, <argument pos:start="3459:41" pos:end="3459:60"><expr pos:start="3459:41" pos:end="3459:60"><operator pos:start="3459:41" pos:end="3459:41">&amp;</operator><name pos:start="3459:42" pos:end="3459:60"><name pos:start="3459:42" pos:end="3459:53">target_value</name><operator pos:start="3459:54" pos:end="3459:55">-&gt;</operator><name pos:start="3459:56" pos:end="3459:60">procs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3461:17" pos:end="3461:70"><expr pos:start="3461:17" pos:end="3461:69"><call pos:start="3461:17" pos:end="3461:69"><name pos:start="3461:17" pos:end="3461:26">__put_user</name><argument_list pos:start="3461:27" pos:end="3461:69">(<argument pos:start="3461:28" pos:end="3461:42"><expr pos:start="3461:28" pos:end="3461:42"><name pos:start="3461:28" pos:end="3461:42"><name pos:start="3461:28" pos:end="3461:32">value</name><operator pos:start="3461:33" pos:end="3461:33">.</operator><name pos:start="3461:34" pos:end="3461:42">totalhigh</name></name></expr></argument>, <argument pos:start="3461:45" pos:end="3461:68"><expr pos:start="3461:45" pos:end="3461:68"><operator pos:start="3461:45" pos:end="3461:45">&amp;</operator><name pos:start="3461:46" pos:end="3461:68"><name pos:start="3461:46" pos:end="3461:57">target_value</name><operator pos:start="3461:58" pos:end="3461:59">-&gt;</operator><name pos:start="3461:60" pos:end="3461:68">totalhigh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3463:17" pos:end="3463:68"><expr pos:start="3463:17" pos:end="3463:67"><call pos:start="3463:17" pos:end="3463:67"><name pos:start="3463:17" pos:end="3463:26">__put_user</name><argument_list pos:start="3463:27" pos:end="3463:67">(<argument pos:start="3463:28" pos:end="3463:41"><expr pos:start="3463:28" pos:end="3463:41"><name pos:start="3463:28" pos:end="3463:41"><name pos:start="3463:28" pos:end="3463:32">value</name><operator pos:start="3463:33" pos:end="3463:33">.</operator><name pos:start="3463:34" pos:end="3463:41">freehigh</name></name></expr></argument>, <argument pos:start="3463:44" pos:end="3463:66"><expr pos:start="3463:44" pos:end="3463:66"><operator pos:start="3463:44" pos:end="3463:44">&amp;</operator><name pos:start="3463:45" pos:end="3463:66"><name pos:start="3463:45" pos:end="3463:56">target_value</name><operator pos:start="3463:57" pos:end="3463:58">-&gt;</operator><name pos:start="3463:59" pos:end="3463:66">freehigh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3465:17" pos:end="3465:68"><expr pos:start="3465:17" pos:end="3465:67"><call pos:start="3465:17" pos:end="3465:67"><name pos:start="3465:17" pos:end="3465:26">__put_user</name><argument_list pos:start="3465:27" pos:end="3465:67">(<argument pos:start="3465:28" pos:end="3465:41"><expr pos:start="3465:28" pos:end="3465:41"><name pos:start="3465:28" pos:end="3465:41"><name pos:start="3465:28" pos:end="3465:32">value</name><operator pos:start="3465:33" pos:end="3465:33">.</operator><name pos:start="3465:34" pos:end="3465:41">mem_unit</name></name></expr></argument>, <argument pos:start="3465:44" pos:end="3465:66"><expr pos:start="3465:44" pos:end="3465:66"><operator pos:start="3465:44" pos:end="3465:44">&amp;</operator><name pos:start="3465:45" pos:end="3465:66"><name pos:start="3465:45" pos:end="3465:56">target_value</name><operator pos:start="3465:57" pos:end="3465:58">-&gt;</operator><name pos:start="3465:59" pos:end="3465:66">mem_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3467:17" pos:end="3467:58"><expr pos:start="3467:17" pos:end="3467:57"><call pos:start="3467:17" pos:end="3467:57"><name pos:start="3467:17" pos:end="3467:34">unlock_user_struct</name><argument_list pos:start="3467:35" pos:end="3467:57">(<argument pos:start="3467:36" pos:end="3467:47"><expr pos:start="3467:36" pos:end="3467:47"><name pos:start="3467:36" pos:end="3467:47">target_value</name></expr></argument>, <argument pos:start="3467:50" pos:end="3467:53"><expr pos:start="3467:50" pos:end="3467:53"><name pos:start="3467:50" pos:end="3467:53">arg1</name></expr></argument>, <argument pos:start="3467:56" pos:end="3467:56"><expr pos:start="3467:56" pos:end="3467:56"><literal type="number" pos:start="3467:56" pos:end="3467:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3473:9" pos:end="3476:0">break;</break>

<cpp:ifdef pos:start="3475:1" pos:end="3475:20">#<cpp:directive pos:start="3475:2" pos:end="3475:6">ifdef</cpp:directive> <name pos:start="3475:8" pos:end="3475:20">TARGET_NR_ipc</name></cpp:ifdef>

    <case pos:start="3477:5" pos:end="3477:23">case <expr pos:start="3477:10" pos:end="3477:22"><name pos:start="3477:10" pos:end="3477:22">TARGET_NR_ipc</name></expr>:</case>

	<expr_stmt pos:start="3479:9" pos:end="3479:57"><expr pos:start="3479:9" pos:end="3479:56"><name pos:start="3479:9" pos:end="3479:11">ret</name> <operator pos:start="3479:13" pos:end="3479:13">=</operator> <call pos:start="3479:15" pos:end="3479:56"><name pos:start="3479:15" pos:end="3479:20">do_ipc</name><argument_list pos:start="3479:21" pos:end="3479:56">(<argument pos:start="3479:22" pos:end="3479:25"><expr pos:start="3479:22" pos:end="3479:25"><name pos:start="3479:22" pos:end="3479:25">arg1</name></expr></argument>, <argument pos:start="3479:28" pos:end="3479:31"><expr pos:start="3479:28" pos:end="3479:31"><name pos:start="3479:28" pos:end="3479:31">arg2</name></expr></argument>, <argument pos:start="3479:34" pos:end="3479:37"><expr pos:start="3479:34" pos:end="3479:37"><name pos:start="3479:34" pos:end="3479:37">arg3</name></expr></argument>, <argument pos:start="3479:40" pos:end="3479:43"><expr pos:start="3479:40" pos:end="3479:43"><name pos:start="3479:40" pos:end="3479:43">arg4</name></expr></argument>, <argument pos:start="3479:46" pos:end="3479:49"><expr pos:start="3479:46" pos:end="3479:49"><name pos:start="3479:46" pos:end="3479:49">arg5</name></expr></argument>, <argument pos:start="3479:52" pos:end="3479:55"><expr pos:start="3479:52" pos:end="3479:55"><name pos:start="3479:52" pos:end="3479:55">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="3481:9" pos:end="3486:0">break;</break>

<cpp:endif pos:start="3483:1" pos:end="3483:6">#<cpp:directive pos:start="3483:2" pos:end="3483:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3485:1" pos:end="3485:23">#<cpp:directive pos:start="3485:2" pos:end="3485:6">ifdef</cpp:directive> <name pos:start="3485:8" pos:end="3485:23">TARGET_NR_semget</name></cpp:ifdef>

    <case pos:start="3487:5" pos:end="3487:26">case <expr pos:start="3487:10" pos:end="3487:25"><name pos:start="3487:10" pos:end="3487:25">TARGET_NR_semget</name></expr>:</case>

        <expr_stmt pos:start="3489:9" pos:end="3489:50"><expr pos:start="3489:9" pos:end="3489:49"><name pos:start="3489:9" pos:end="3489:11">ret</name> <operator pos:start="3489:13" pos:end="3489:13">=</operator> <call pos:start="3489:15" pos:end="3489:49"><name pos:start="3489:15" pos:end="3489:23">get_errno</name><argument_list pos:start="3489:24" pos:end="3489:49">(<argument pos:start="3489:25" pos:end="3489:48"><expr pos:start="3489:25" pos:end="3489:48"><call pos:start="3489:25" pos:end="3489:48"><name pos:start="3489:25" pos:end="3489:30">semget</name><argument_list pos:start="3489:31" pos:end="3489:48">(<argument pos:start="3489:32" pos:end="3489:35"><expr pos:start="3489:32" pos:end="3489:35"><name pos:start="3489:32" pos:end="3489:35">arg1</name></expr></argument>, <argument pos:start="3489:38" pos:end="3489:41"><expr pos:start="3489:38" pos:end="3489:41"><name pos:start="3489:38" pos:end="3489:41">arg2</name></expr></argument>, <argument pos:start="3489:44" pos:end="3489:47"><expr pos:start="3489:44" pos:end="3489:47"><name pos:start="3489:44" pos:end="3489:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3491:9" pos:end="3496:0">break;</break>

<cpp:endif pos:start="3493:1" pos:end="3493:6">#<cpp:directive pos:start="3493:2" pos:end="3493:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3495:1" pos:end="3495:22">#<cpp:directive pos:start="3495:2" pos:end="3495:6">ifdef</cpp:directive> <name pos:start="3495:8" pos:end="3495:22">TARGET_NR_semop</name></cpp:ifdef>

    <case pos:start="3497:5" pos:end="3497:25">case <expr pos:start="3497:10" pos:end="3497:24"><name pos:start="3497:10" pos:end="3497:24">TARGET_NR_semop</name></expr>:</case>

        <expr_stmt pos:start="3499:9" pos:end="3499:52"><expr pos:start="3499:9" pos:end="3499:51"><name pos:start="3499:9" pos:end="3499:11">ret</name> <operator pos:start="3499:13" pos:end="3499:13">=</operator> <call pos:start="3499:15" pos:end="3499:51"><name pos:start="3499:15" pos:end="3499:23">get_errno</name><argument_list pos:start="3499:24" pos:end="3499:51">(<argument pos:start="3499:25" pos:end="3499:50"><expr pos:start="3499:25" pos:end="3499:50"><call pos:start="3499:25" pos:end="3499:50"><name pos:start="3499:25" pos:end="3499:32">do_semop</name><argument_list pos:start="3499:33" pos:end="3499:50">(<argument pos:start="3499:34" pos:end="3499:37"><expr pos:start="3499:34" pos:end="3499:37"><name pos:start="3499:34" pos:end="3499:37">arg1</name></expr></argument>, <argument pos:start="3499:40" pos:end="3499:43"><expr pos:start="3499:40" pos:end="3499:43"><name pos:start="3499:40" pos:end="3499:43">arg2</name></expr></argument>, <argument pos:start="3499:46" pos:end="3499:49"><expr pos:start="3499:46" pos:end="3499:49"><name pos:start="3499:46" pos:end="3499:49">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3501:9" pos:end="3506:0">break;</break>

<cpp:endif pos:start="3503:1" pos:end="3503:6">#<cpp:directive pos:start="3503:2" pos:end="3503:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3505:1" pos:end="3505:23">#<cpp:directive pos:start="3505:2" pos:end="3505:6">ifdef</cpp:directive> <name pos:start="3505:8" pos:end="3505:23">TARGET_NR_semctl</name></cpp:ifdef>

    <case pos:start="3507:5" pos:end="3507:26">case <expr pos:start="3507:10" pos:end="3507:25"><name pos:start="3507:10" pos:end="3507:25">TARGET_NR_semctl</name></expr>:</case>

        <expr_stmt pos:start="3509:9" pos:end="3509:79"><expr pos:start="3509:9" pos:end="3509:78"><name pos:start="3509:9" pos:end="3509:11">ret</name> <operator pos:start="3509:13" pos:end="3509:13">=</operator> <call pos:start="3509:15" pos:end="3509:78"><name pos:start="3509:15" pos:end="3509:23">do_semctl</name><argument_list pos:start="3509:24" pos:end="3509:78">(<argument pos:start="3509:25" pos:end="3509:28"><expr pos:start="3509:25" pos:end="3509:28"><name pos:start="3509:25" pos:end="3509:28">arg1</name></expr></argument>, <argument pos:start="3509:31" pos:end="3509:34"><expr pos:start="3509:31" pos:end="3509:34"><name pos:start="3509:31" pos:end="3509:34">arg2</name></expr></argument>, <argument pos:start="3509:37" pos:end="3509:40"><expr pos:start="3509:37" pos:end="3509:40"><name pos:start="3509:37" pos:end="3509:40">arg3</name></expr></argument>, <argument pos:start="3509:43" pos:end="3509:77"><expr pos:start="3509:43" pos:end="3509:77"><operator pos:start="3509:43" pos:end="3509:43">(</operator>union <name pos:start="3509:50" pos:end="3509:61">target_semun</name><operator pos:start="3509:62" pos:end="3509:62">)</operator><operator pos:start="3509:63" pos:end="3509:63">(</operator><name pos:start="3509:64" pos:end="3509:72">abi_ulong</name><operator pos:start="3509:73" pos:end="3509:73">)</operator><name pos:start="3509:74" pos:end="3509:77">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3511:9" pos:end="3516:0">break;</break>

<cpp:endif pos:start="3513:1" pos:end="3513:6">#<cpp:directive pos:start="3513:2" pos:end="3513:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3515:1" pos:end="3515:23">#<cpp:directive pos:start="3515:2" pos:end="3515:6">ifdef</cpp:directive> <name pos:start="3515:8" pos:end="3515:23">TARGET_NR_msgctl</name></cpp:ifdef>

    <case pos:start="3517:5" pos:end="3517:26">case <expr pos:start="3517:10" pos:end="3517:25"><name pos:start="3517:10" pos:end="3517:25">TARGET_NR_msgctl</name></expr>:</case>

        <expr_stmt pos:start="3519:9" pos:end="3519:42"><expr pos:start="3519:9" pos:end="3519:41"><name pos:start="3519:9" pos:end="3519:11">ret</name> <operator pos:start="3519:13" pos:end="3519:13">=</operator> <call pos:start="3519:15" pos:end="3519:41"><name pos:start="3519:15" pos:end="3519:23">do_msgctl</name><argument_list pos:start="3519:24" pos:end="3519:41">(<argument pos:start="3519:25" pos:end="3519:28"><expr pos:start="3519:25" pos:end="3519:28"><name pos:start="3519:25" pos:end="3519:28">arg1</name></expr></argument>, <argument pos:start="3519:31" pos:end="3519:34"><expr pos:start="3519:31" pos:end="3519:34"><name pos:start="3519:31" pos:end="3519:34">arg2</name></expr></argument>, <argument pos:start="3519:37" pos:end="3519:40"><expr pos:start="3519:37" pos:end="3519:40"><name pos:start="3519:37" pos:end="3519:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3521:9" pos:end="3526:0">break;</break>

<cpp:endif pos:start="3523:1" pos:end="3523:6">#<cpp:directive pos:start="3523:2" pos:end="3523:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3525:1" pos:end="3525:23">#<cpp:directive pos:start="3525:2" pos:end="3525:6">ifdef</cpp:directive> <name pos:start="3525:8" pos:end="3525:23">TARGET_NR_msgget</name></cpp:ifdef>

    <case pos:start="3527:5" pos:end="3527:26">case <expr pos:start="3527:10" pos:end="3527:25"><name pos:start="3527:10" pos:end="3527:25">TARGET_NR_msgget</name></expr>:</case>

        <expr_stmt pos:start="3529:9" pos:end="3529:44"><expr pos:start="3529:9" pos:end="3529:43"><name pos:start="3529:9" pos:end="3529:11">ret</name> <operator pos:start="3529:13" pos:end="3529:13">=</operator> <call pos:start="3529:15" pos:end="3529:43"><name pos:start="3529:15" pos:end="3529:23">get_errno</name><argument_list pos:start="3529:24" pos:end="3529:43">(<argument pos:start="3529:25" pos:end="3529:42"><expr pos:start="3529:25" pos:end="3529:42"><call pos:start="3529:25" pos:end="3529:42"><name pos:start="3529:25" pos:end="3529:30">msgget</name><argument_list pos:start="3529:31" pos:end="3529:42">(<argument pos:start="3529:32" pos:end="3529:35"><expr pos:start="3529:32" pos:end="3529:35"><name pos:start="3529:32" pos:end="3529:35">arg1</name></expr></argument>, <argument pos:start="3529:38" pos:end="3529:41"><expr pos:start="3529:38" pos:end="3529:41"><name pos:start="3529:38" pos:end="3529:41">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3531:9" pos:end="3536:0">break;</break>

<cpp:endif pos:start="3533:1" pos:end="3533:6">#<cpp:directive pos:start="3533:2" pos:end="3533:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3535:1" pos:end="3535:23">#<cpp:directive pos:start="3535:2" pos:end="3535:6">ifdef</cpp:directive> <name pos:start="3535:8" pos:end="3535:23">TARGET_NR_msgrcv</name></cpp:ifdef>

    <case pos:start="3537:5" pos:end="3537:26">case <expr pos:start="3537:10" pos:end="3537:25"><name pos:start="3537:10" pos:end="3537:25">TARGET_NR_msgrcv</name></expr>:</case>

        <expr_stmt pos:start="3539:9" pos:end="3539:54"><expr pos:start="3539:9" pos:end="3539:53"><name pos:start="3539:9" pos:end="3539:11">ret</name> <operator pos:start="3539:13" pos:end="3539:13">=</operator> <call pos:start="3539:15" pos:end="3539:53"><name pos:start="3539:15" pos:end="3539:23">do_msgrcv</name><argument_list pos:start="3539:24" pos:end="3539:53">(<argument pos:start="3539:25" pos:end="3539:28"><expr pos:start="3539:25" pos:end="3539:28"><name pos:start="3539:25" pos:end="3539:28">arg1</name></expr></argument>, <argument pos:start="3539:31" pos:end="3539:34"><expr pos:start="3539:31" pos:end="3539:34"><name pos:start="3539:31" pos:end="3539:34">arg2</name></expr></argument>, <argument pos:start="3539:37" pos:end="3539:40"><expr pos:start="3539:37" pos:end="3539:40"><name pos:start="3539:37" pos:end="3539:40">arg3</name></expr></argument>, <argument pos:start="3539:43" pos:end="3539:46"><expr pos:start="3539:43" pos:end="3539:46"><name pos:start="3539:43" pos:end="3539:46">arg4</name></expr></argument>, <argument pos:start="3539:49" pos:end="3539:52"><expr pos:start="3539:49" pos:end="3539:52"><name pos:start="3539:49" pos:end="3539:52">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3541:9" pos:end="3546:0">break;</break>

<cpp:endif pos:start="3543:1" pos:end="3543:6">#<cpp:directive pos:start="3543:2" pos:end="3543:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3545:1" pos:end="3545:23">#<cpp:directive pos:start="3545:2" pos:end="3545:6">ifdef</cpp:directive> <name pos:start="3545:8" pos:end="3545:23">TARGET_NR_msgsnd</name></cpp:ifdef>

    <case pos:start="3547:5" pos:end="3547:26">case <expr pos:start="3547:10" pos:end="3547:25"><name pos:start="3547:10" pos:end="3547:25">TARGET_NR_msgsnd</name></expr>:</case>

        <expr_stmt pos:start="3549:9" pos:end="3549:48"><expr pos:start="3549:9" pos:end="3549:47"><name pos:start="3549:9" pos:end="3549:11">ret</name> <operator pos:start="3549:13" pos:end="3549:13">=</operator> <call pos:start="3549:15" pos:end="3549:47"><name pos:start="3549:15" pos:end="3549:23">do_msgsnd</name><argument_list pos:start="3549:24" pos:end="3549:47">(<argument pos:start="3549:25" pos:end="3549:28"><expr pos:start="3549:25" pos:end="3549:28"><name pos:start="3549:25" pos:end="3549:28">arg1</name></expr></argument>, <argument pos:start="3549:31" pos:end="3549:34"><expr pos:start="3549:31" pos:end="3549:34"><name pos:start="3549:31" pos:end="3549:34">arg2</name></expr></argument>, <argument pos:start="3549:37" pos:end="3549:40"><expr pos:start="3549:37" pos:end="3549:40"><name pos:start="3549:37" pos:end="3549:40">arg3</name></expr></argument>, <argument pos:start="3549:43" pos:end="3549:46"><expr pos:start="3549:43" pos:end="3549:46"><name pos:start="3549:43" pos:end="3549:46">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3551:9" pos:end="3556:0">break;</break>

<cpp:endif pos:start="3553:1" pos:end="3553:6">#<cpp:directive pos:start="3553:2" pos:end="3553:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3555:1" pos:end="3555:23">#<cpp:directive pos:start="3555:2" pos:end="3555:6">ifdef</cpp:directive> <name pos:start="3555:8" pos:end="3555:23">TARGET_NR_shmget</name></cpp:ifdef>

    <case pos:start="3557:5" pos:end="3557:26">case <expr pos:start="3557:10" pos:end="3557:25"><name pos:start="3557:10" pos:end="3557:25">TARGET_NR_shmget</name></expr>:</case>

        <expr_stmt pos:start="3559:9" pos:end="3559:50"><expr pos:start="3559:9" pos:end="3559:49"><name pos:start="3559:9" pos:end="3559:11">ret</name> <operator pos:start="3559:13" pos:end="3559:13">=</operator> <call pos:start="3559:15" pos:end="3559:49"><name pos:start="3559:15" pos:end="3559:23">get_errno</name><argument_list pos:start="3559:24" pos:end="3559:49">(<argument pos:start="3559:25" pos:end="3559:48"><expr pos:start="3559:25" pos:end="3559:48"><call pos:start="3559:25" pos:end="3559:48"><name pos:start="3559:25" pos:end="3559:30">shmget</name><argument_list pos:start="3559:31" pos:end="3559:48">(<argument pos:start="3559:32" pos:end="3559:35"><expr pos:start="3559:32" pos:end="3559:35"><name pos:start="3559:32" pos:end="3559:35">arg1</name></expr></argument>, <argument pos:start="3559:38" pos:end="3559:41"><expr pos:start="3559:38" pos:end="3559:41"><name pos:start="3559:38" pos:end="3559:41">arg2</name></expr></argument>, <argument pos:start="3559:44" pos:end="3559:47"><expr pos:start="3559:44" pos:end="3559:47"><name pos:start="3559:44" pos:end="3559:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3561:9" pos:end="3566:0">break;</break>

<cpp:endif pos:start="3563:1" pos:end="3563:6">#<cpp:directive pos:start="3563:2" pos:end="3563:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3565:1" pos:end="3565:23">#<cpp:directive pos:start="3565:2" pos:end="3565:6">ifdef</cpp:directive> <name pos:start="3565:8" pos:end="3565:23">TARGET_NR_shmctl</name></cpp:ifdef>

    <case pos:start="3567:5" pos:end="3567:26">case <expr pos:start="3567:10" pos:end="3567:25"><name pos:start="3567:10" pos:end="3567:25">TARGET_NR_shmctl</name></expr>:</case>

        <expr_stmt pos:start="3569:9" pos:end="3569:42"><expr pos:start="3569:9" pos:end="3569:41"><name pos:start="3569:9" pos:end="3569:11">ret</name> <operator pos:start="3569:13" pos:end="3569:13">=</operator> <call pos:start="3569:15" pos:end="3569:41"><name pos:start="3569:15" pos:end="3569:23">do_shmctl</name><argument_list pos:start="3569:24" pos:end="3569:41">(<argument pos:start="3569:25" pos:end="3569:28"><expr pos:start="3569:25" pos:end="3569:28"><name pos:start="3569:25" pos:end="3569:28">arg1</name></expr></argument>, <argument pos:start="3569:31" pos:end="3569:34"><expr pos:start="3569:31" pos:end="3569:34"><name pos:start="3569:31" pos:end="3569:34">arg2</name></expr></argument>, <argument pos:start="3569:37" pos:end="3569:40"><expr pos:start="3569:37" pos:end="3569:40"><name pos:start="3569:37" pos:end="3569:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3571:9" pos:end="3576:0">break;</break>

<cpp:endif pos:start="3573:1" pos:end="3573:6">#<cpp:directive pos:start="3573:2" pos:end="3573:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3575:1" pos:end="3575:22">#<cpp:directive pos:start="3575:2" pos:end="3575:6">ifdef</cpp:directive> <name pos:start="3575:8" pos:end="3575:22">TARGET_NR_shmat</name></cpp:ifdef>

    <case pos:start="3577:5" pos:end="3577:25">case <expr pos:start="3577:10" pos:end="3577:24"><name pos:start="3577:10" pos:end="3577:24">TARGET_NR_shmat</name></expr>:</case>

        <expr_stmt pos:start="3579:9" pos:end="3579:41"><expr pos:start="3579:9" pos:end="3579:40"><name pos:start="3579:9" pos:end="3579:11">ret</name> <operator pos:start="3579:13" pos:end="3579:13">=</operator> <call pos:start="3579:15" pos:end="3579:40"><name pos:start="3579:15" pos:end="3579:22">do_shmat</name><argument_list pos:start="3579:23" pos:end="3579:40">(<argument pos:start="3579:24" pos:end="3579:27"><expr pos:start="3579:24" pos:end="3579:27"><name pos:start="3579:24" pos:end="3579:27">arg1</name></expr></argument>, <argument pos:start="3579:30" pos:end="3579:33"><expr pos:start="3579:30" pos:end="3579:33"><name pos:start="3579:30" pos:end="3579:33">arg2</name></expr></argument>, <argument pos:start="3579:36" pos:end="3579:39"><expr pos:start="3579:36" pos:end="3579:39"><name pos:start="3579:36" pos:end="3579:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3581:9" pos:end="3586:0">break;</break>

<cpp:endif pos:start="3583:1" pos:end="3583:6">#<cpp:directive pos:start="3583:2" pos:end="3583:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3585:1" pos:end="3585:22">#<cpp:directive pos:start="3585:2" pos:end="3585:6">ifdef</cpp:directive> <name pos:start="3585:8" pos:end="3585:22">TARGET_NR_shmdt</name></cpp:ifdef>

    <case pos:start="3587:5" pos:end="3587:25">case <expr pos:start="3587:10" pos:end="3587:24"><name pos:start="3587:10" pos:end="3587:24">TARGET_NR_shmdt</name></expr>:</case>

        <expr_stmt pos:start="3589:9" pos:end="3589:29"><expr pos:start="3589:9" pos:end="3589:28"><name pos:start="3589:9" pos:end="3589:11">ret</name> <operator pos:start="3589:13" pos:end="3589:13">=</operator> <call pos:start="3589:15" pos:end="3589:28"><name pos:start="3589:15" pos:end="3589:22">do_shmdt</name><argument_list pos:start="3589:23" pos:end="3589:28">(<argument pos:start="3589:24" pos:end="3589:27"><expr pos:start="3589:24" pos:end="3589:27"><name pos:start="3589:24" pos:end="3589:27">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3591:9" pos:end="3594:0">break;</break>

<cpp:endif pos:start="3593:1" pos:end="3593:6">#<cpp:directive pos:start="3593:2" pos:end="3593:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3595:5" pos:end="3595:25">case <expr pos:start="3595:10" pos:end="3595:24"><name pos:start="3595:10" pos:end="3595:24">TARGET_NR_fsync</name></expr>:</case>

        <expr_stmt pos:start="3597:9" pos:end="3597:37"><expr pos:start="3597:9" pos:end="3597:36"><name pos:start="3597:9" pos:end="3597:11">ret</name> <operator pos:start="3597:13" pos:end="3597:13">=</operator> <call pos:start="3597:15" pos:end="3597:36"><name pos:start="3597:15" pos:end="3597:23">get_errno</name><argument_list pos:start="3597:24" pos:end="3597:36">(<argument pos:start="3597:25" pos:end="3597:35"><expr pos:start="3597:25" pos:end="3597:35"><call pos:start="3597:25" pos:end="3597:35"><name pos:start="3597:25" pos:end="3597:29">fsync</name><argument_list pos:start="3597:30" pos:end="3597:35">(<argument pos:start="3597:31" pos:end="3597:34"><expr pos:start="3597:31" pos:end="3597:34"><name pos:start="3597:31" pos:end="3597:34">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3599:9" pos:end="3599:14">break;</break>

    <case pos:start="3601:5" pos:end="3604:0">case <expr pos:start="3601:10" pos:end="3601:24"><name pos:start="3601:10" pos:end="3601:24">TARGET_NR_clone</name></expr>:</case>

<cpp:if pos:start="3603:1" pos:end="3603:48">#<cpp:directive pos:start="3603:2" pos:end="3603:3">if</cpp:directive> <expr pos:start="3603:5" pos:end="3603:48"><call pos:start="3603:5" pos:end="3603:23"><name pos:start="3603:5" pos:end="3603:11">defined</name><argument_list pos:start="3603:12" pos:end="3603:23">(<argument pos:start="3603:13" pos:end="3603:22"><expr pos:start="3603:13" pos:end="3603:22"><name pos:start="3603:13" pos:end="3603:22">TARGET_SH4</name></expr></argument>)</argument_list></call> <operator pos:start="3603:25" pos:end="3603:26">||</operator> <call pos:start="3603:28" pos:end="3603:48"><name pos:start="3603:28" pos:end="3603:34">defined</name><argument_list pos:start="3603:35" pos:end="3603:48">(<argument pos:start="3603:36" pos:end="3603:47"><expr pos:start="3603:36" pos:end="3603:47"><name pos:start="3603:36" pos:end="3603:47">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="3605:9" pos:end="3608:0"><expr pos:start="3605:9" pos:end="3605:71"><name pos:start="3605:9" pos:end="3605:11">ret</name> <operator pos:start="3605:13" pos:end="3605:13">=</operator> <call pos:start="3605:15" pos:end="3605:71"><name pos:start="3605:15" pos:end="3605:23">get_errno</name><argument_list pos:start="3605:24" pos:end="3605:71">(<argument pos:start="3605:25" pos:end="3605:70"><expr pos:start="3605:25" pos:end="3605:70"><call pos:start="3605:25" pos:end="3605:70"><name pos:start="3605:25" pos:end="3605:31">do_fork</name><argument_list pos:start="3605:32" pos:end="3605:70">(<argument pos:start="3605:33" pos:end="3605:39"><expr pos:start="3605:33" pos:end="3605:39"><name pos:start="3605:33" pos:end="3605:39">cpu_env</name></expr></argument>, <argument pos:start="3605:42" pos:end="3605:45"><expr pos:start="3605:42" pos:end="3605:45"><name pos:start="3605:42" pos:end="3605:45">arg1</name></expr></argument>, <argument pos:start="3605:48" pos:end="3605:51"><expr pos:start="3605:48" pos:end="3605:51"><name pos:start="3605:48" pos:end="3605:51">arg2</name></expr></argument>, <argument pos:start="3605:54" pos:end="3605:57"><expr pos:start="3605:54" pos:end="3605:57"><name pos:start="3605:54" pos:end="3605:57">arg3</name></expr></argument>, <argument pos:start="3605:60" pos:end="3605:63"><expr pos:start="3605:60" pos:end="3605:63"><name pos:start="3605:60" pos:end="3605:63">arg5</name></expr></argument>, <argument pos:start="3605:66" pos:end="3605:69"><expr pos:start="3605:66" pos:end="3605:69"><name pos:start="3605:66" pos:end="3605:69">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="3607:1" pos:end="3607:26">#<cpp:directive pos:start="3607:2" pos:end="3607:5">elif</cpp:directive> <expr pos:start="3607:7" pos:end="3607:26"><call pos:start="3607:7" pos:end="3607:26"><name pos:start="3607:7" pos:end="3607:13">defined</name><argument_list pos:start="3607:14" pos:end="3607:26">(<argument pos:start="3607:15" pos:end="3607:25"><expr pos:start="3607:15" pos:end="3607:25"><name pos:start="3607:15" pos:end="3607:25">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="3609:9" pos:end="3612:0"><expr pos:start="3609:9" pos:end="3609:71"><name pos:start="3609:9" pos:end="3609:11">ret</name> <operator pos:start="3609:13" pos:end="3609:13">=</operator> <call pos:start="3609:15" pos:end="3609:71"><name pos:start="3609:15" pos:end="3609:23">get_errno</name><argument_list pos:start="3609:24" pos:end="3609:71">(<argument pos:start="3609:25" pos:end="3609:70"><expr pos:start="3609:25" pos:end="3609:70"><call pos:start="3609:25" pos:end="3609:70"><name pos:start="3609:25" pos:end="3609:31">do_fork</name><argument_list pos:start="3609:32" pos:end="3609:70">(<argument pos:start="3609:33" pos:end="3609:39"><expr pos:start="3609:33" pos:end="3609:39"><name pos:start="3609:33" pos:end="3609:39">cpu_env</name></expr></argument>, <argument pos:start="3609:42" pos:end="3609:45"><expr pos:start="3609:42" pos:end="3609:45"><name pos:start="3609:42" pos:end="3609:45">arg2</name></expr></argument>, <argument pos:start="3609:48" pos:end="3609:51"><expr pos:start="3609:48" pos:end="3609:51"><name pos:start="3609:48" pos:end="3609:51">arg1</name></expr></argument>, <argument pos:start="3609:54" pos:end="3609:57"><expr pos:start="3609:54" pos:end="3609:57"><name pos:start="3609:54" pos:end="3609:57">arg3</name></expr></argument>, <argument pos:start="3609:60" pos:end="3609:63"><expr pos:start="3609:60" pos:end="3609:63"><name pos:start="3609:60" pos:end="3609:63">arg4</name></expr></argument>, <argument pos:start="3609:66" pos:end="3609:69"><expr pos:start="3609:66" pos:end="3609:69"><name pos:start="3609:66" pos:end="3609:69">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="3611:1" pos:end="3611:27">#<cpp:directive pos:start="3611:2" pos:end="3611:5">elif</cpp:directive> <expr pos:start="3611:7" pos:end="3611:27"><call pos:start="3611:7" pos:end="3611:27"><name pos:start="3611:7" pos:end="3611:13">defined</name><argument_list pos:start="3611:14" pos:end="3611:27">(<argument pos:start="3611:15" pos:end="3611:26"><expr pos:start="3611:15" pos:end="3611:26"><name pos:start="3611:15" pos:end="3611:26">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="3613:9" pos:end="3616:0"><expr pos:start="3613:9" pos:end="3613:71"><name pos:start="3613:9" pos:end="3613:11">ret</name> <operator pos:start="3613:13" pos:end="3613:13">=</operator> <call pos:start="3613:15" pos:end="3613:71"><name pos:start="3613:15" pos:end="3613:23">get_errno</name><argument_list pos:start="3613:24" pos:end="3613:71">(<argument pos:start="3613:25" pos:end="3613:70"><expr pos:start="3613:25" pos:end="3613:70"><call pos:start="3613:25" pos:end="3613:70"><name pos:start="3613:25" pos:end="3613:31">do_fork</name><argument_list pos:start="3613:32" pos:end="3613:70">(<argument pos:start="3613:33" pos:end="3613:39"><expr pos:start="3613:33" pos:end="3613:39"><name pos:start="3613:33" pos:end="3613:39">cpu_env</name></expr></argument>, <argument pos:start="3613:42" pos:end="3613:45"><expr pos:start="3613:42" pos:end="3613:45"><name pos:start="3613:42" pos:end="3613:45">arg2</name></expr></argument>, <argument pos:start="3613:48" pos:end="3613:51"><expr pos:start="3613:48" pos:end="3613:51"><name pos:start="3613:48" pos:end="3613:51">arg1</name></expr></argument>, <argument pos:start="3613:54" pos:end="3613:57"><expr pos:start="3613:54" pos:end="3613:57"><name pos:start="3613:54" pos:end="3613:57">arg3</name></expr></argument>, <argument pos:start="3613:60" pos:end="3613:63"><expr pos:start="3613:60" pos:end="3613:63"><name pos:start="3613:60" pos:end="3613:63">arg5</name></expr></argument>, <argument pos:start="3613:66" pos:end="3613:69"><expr pos:start="3613:66" pos:end="3613:69"><name pos:start="3613:66" pos:end="3613:69">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="3615:1" pos:end="3615:5">#<cpp:directive pos:start="3615:2" pos:end="3615:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="3617:9" pos:end="3620:0"><expr pos:start="3617:9" pos:end="3617:71"><name pos:start="3617:9" pos:end="3617:11">ret</name> <operator pos:start="3617:13" pos:end="3617:13">=</operator> <call pos:start="3617:15" pos:end="3617:71"><name pos:start="3617:15" pos:end="3617:23">get_errno</name><argument_list pos:start="3617:24" pos:end="3617:71">(<argument pos:start="3617:25" pos:end="3617:70"><expr pos:start="3617:25" pos:end="3617:70"><call pos:start="3617:25" pos:end="3617:70"><name pos:start="3617:25" pos:end="3617:31">do_fork</name><argument_list pos:start="3617:32" pos:end="3617:70">(<argument pos:start="3617:33" pos:end="3617:39"><expr pos:start="3617:33" pos:end="3617:39"><name pos:start="3617:33" pos:end="3617:39">cpu_env</name></expr></argument>, <argument pos:start="3617:42" pos:end="3617:45"><expr pos:start="3617:42" pos:end="3617:45"><name pos:start="3617:42" pos:end="3617:45">arg1</name></expr></argument>, <argument pos:start="3617:48" pos:end="3617:51"><expr pos:start="3617:48" pos:end="3617:51"><name pos:start="3617:48" pos:end="3617:51">arg2</name></expr></argument>, <argument pos:start="3617:54" pos:end="3617:57"><expr pos:start="3617:54" pos:end="3617:57"><name pos:start="3617:54" pos:end="3617:57">arg3</name></expr></argument>, <argument pos:start="3617:60" pos:end="3617:63"><expr pos:start="3617:60" pos:end="3617:63"><name pos:start="3617:60" pos:end="3617:63">arg4</name></expr></argument>, <argument pos:start="3617:66" pos:end="3617:69"><expr pos:start="3617:66" pos:end="3617:69"><name pos:start="3617:66" pos:end="3617:69">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="3619:1" pos:end="3619:6">#<cpp:directive pos:start="3619:2" pos:end="3619:6">endif</cpp:directive></cpp:endif>

        <break pos:start="3621:9" pos:end="3624:0">break;</break>

<cpp:ifdef pos:start="3623:1" pos:end="3623:22">#<cpp:directive pos:start="3623:2" pos:end="3623:6">ifdef</cpp:directive> <name pos:start="3623:8" pos:end="3623:22">__NR_exit_group</name></cpp:ifdef>

        <comment type="block" pos:start="3625:9" pos:end="3625:30">/* new thread calls */</comment>

    <case pos:start="3627:5" pos:end="3630:0">case <expr pos:start="3627:10" pos:end="3627:29"><name pos:start="3627:10" pos:end="3627:29">TARGET_NR_exit_group</name></expr>:</case>

<cpp:ifdef pos:start="3629:1" pos:end="3629:19">#<cpp:directive pos:start="3629:2" pos:end="3629:6">ifdef</cpp:directive> <name pos:start="3629:8" pos:end="3629:19">TARGET_GPROF</name></cpp:ifdef>

        <expr_stmt pos:start="3631:9" pos:end="3634:0"><expr pos:start="3631:9" pos:end="3631:19"><call pos:start="3631:9" pos:end="3631:19"><name pos:start="3631:9" pos:end="3631:17">_mcleanup</name><argument_list pos:start="3631:18" pos:end="3631:19">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="3633:1" pos:end="3633:6">#<cpp:directive pos:start="3633:2" pos:end="3633:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="3635:9" pos:end="3635:32"><expr pos:start="3635:9" pos:end="3635:31"><call pos:start="3635:9" pos:end="3635:31"><name pos:start="3635:9" pos:end="3635:16">gdb_exit</name><argument_list pos:start="3635:17" pos:end="3635:31">(<argument pos:start="3635:18" pos:end="3635:24"><expr pos:start="3635:18" pos:end="3635:24"><name pos:start="3635:18" pos:end="3635:24">cpu_env</name></expr></argument>, <argument pos:start="3635:27" pos:end="3635:30"><expr pos:start="3635:27" pos:end="3635:30"><name pos:start="3635:27" pos:end="3635:30">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3637:9" pos:end="3637:42"><expr pos:start="3637:9" pos:end="3637:41"><name pos:start="3637:9" pos:end="3637:11">ret</name> <operator pos:start="3637:13" pos:end="3637:13">=</operator> <call pos:start="3637:15" pos:end="3637:41"><name pos:start="3637:15" pos:end="3637:23">get_errno</name><argument_list pos:start="3637:24" pos:end="3637:41">(<argument pos:start="3637:25" pos:end="3637:40"><expr pos:start="3637:25" pos:end="3637:40"><call pos:start="3637:25" pos:end="3637:40"><name pos:start="3637:25" pos:end="3637:34">exit_group</name><argument_list pos:start="3637:35" pos:end="3637:40">(<argument pos:start="3637:36" pos:end="3637:39"><expr pos:start="3637:36" pos:end="3637:39"><name pos:start="3637:36" pos:end="3637:39">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3639:9" pos:end="3642:0">break;</break>

<cpp:endif pos:start="3641:1" pos:end="3641:6">#<cpp:directive pos:start="3641:2" pos:end="3641:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3643:5" pos:end="3643:33">case <expr pos:start="3643:10" pos:end="3643:32"><name pos:start="3643:10" pos:end="3643:32">TARGET_NR_setdomainname</name></expr>:</case>

        <if_stmt pos:start="3645:9" pos:end="3647:24"><if pos:start="3645:9" pos:end="3647:24">if <condition pos:start="3645:12" pos:end="3645:42">(<expr pos:start="3645:13" pos:end="3645:41"><operator pos:start="3645:13" pos:end="3645:13">!</operator><operator pos:start="3645:14" pos:end="3645:14">(</operator><name pos:start="3645:15" pos:end="3645:15">p</name> <operator pos:start="3645:17" pos:end="3645:17">=</operator> <call pos:start="3645:19" pos:end="3645:40"><name pos:start="3645:19" pos:end="3645:34">lock_user_string</name><argument_list pos:start="3645:35" pos:end="3645:40">(<argument pos:start="3645:36" pos:end="3645:39"><expr pos:start="3645:36" pos:end="3645:39"><name pos:start="3645:36" pos:end="3645:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="3645:41" pos:end="3645:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3647:13" pos:end="3647:24"><block_content pos:start="3647:13" pos:end="3647:24">

            <goto pos:start="3647:13" pos:end="3647:24">goto <name pos:start="3647:18" pos:end="3647:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3649:9" pos:end="3649:48"><expr pos:start="3649:9" pos:end="3649:47"><name pos:start="3649:9" pos:end="3649:11">ret</name> <operator pos:start="3649:13" pos:end="3649:13">=</operator> <call pos:start="3649:15" pos:end="3649:47"><name pos:start="3649:15" pos:end="3649:23">get_errno</name><argument_list pos:start="3649:24" pos:end="3649:47">(<argument pos:start="3649:25" pos:end="3649:46"><expr pos:start="3649:25" pos:end="3649:46"><call pos:start="3649:25" pos:end="3649:46"><name pos:start="3649:25" pos:end="3649:37">setdomainname</name><argument_list pos:start="3649:38" pos:end="3649:46">(<argument pos:start="3649:39" pos:end="3649:39"><expr pos:start="3649:39" pos:end="3649:39"><name pos:start="3649:39" pos:end="3649:39">p</name></expr></argument>, <argument pos:start="3649:42" pos:end="3649:45"><expr pos:start="3649:42" pos:end="3649:45"><name pos:start="3649:42" pos:end="3649:45">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3651:9" pos:end="3651:32"><expr pos:start="3651:9" pos:end="3651:31"><call pos:start="3651:9" pos:end="3651:31"><name pos:start="3651:9" pos:end="3651:19">unlock_user</name><argument_list pos:start="3651:20" pos:end="3651:31">(<argument pos:start="3651:21" pos:end="3651:21"><expr pos:start="3651:21" pos:end="3651:21"><name pos:start="3651:21" pos:end="3651:21">p</name></expr></argument>, <argument pos:start="3651:24" pos:end="3651:27"><expr pos:start="3651:24" pos:end="3651:27"><name pos:start="3651:24" pos:end="3651:27">arg1</name></expr></argument>, <argument pos:start="3651:30" pos:end="3651:30"><expr pos:start="3651:30" pos:end="3651:30"><literal type="number" pos:start="3651:30" pos:end="3651:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3653:9" pos:end="3653:14">break;</break>

    <case pos:start="3655:5" pos:end="3655:25">case <expr pos:start="3655:10" pos:end="3655:24"><name pos:start="3655:10" pos:end="3655:24">TARGET_NR_uname</name></expr>:</case>

        <comment type="block" pos:start="3657:9" pos:end="3657:67">/* no need to transcode because we use the linux syscall */</comment>

        <block pos:start="3659:9" pos:end="3689:9">{<block_content pos:start="3661:13" pos:end="3687:45">

            <decl_stmt pos:start="3661:13" pos:end="3661:37"><decl pos:start="3661:13" pos:end="3661:36"><type pos:start="3661:13" pos:end="3661:32"><name pos:start="3661:13" pos:end="3661:30"><name pos:start="3661:13" pos:end="3661:18">struct</name> <name pos:start="3661:20" pos:end="3661:30">new_utsname</name></name> <modifier pos:start="3661:32" pos:end="3661:32">*</modifier></type> <name pos:start="3661:34" pos:end="3661:36">buf</name></decl>;</decl_stmt>



            <if_stmt pos:start="3665:13" pos:end="3667:28"><if pos:start="3665:13" pos:end="3667:28">if <condition pos:start="3665:16" pos:end="3665:62">(<expr pos:start="3665:17" pos:end="3665:61"><operator pos:start="3665:17" pos:end="3665:17">!</operator><call pos:start="3665:18" pos:end="3665:61"><name pos:start="3665:18" pos:end="3665:33">lock_user_struct</name><argument_list pos:start="3665:34" pos:end="3665:61">(<argument pos:start="3665:35" pos:end="3665:46"><expr pos:start="3665:35" pos:end="3665:46"><name pos:start="3665:35" pos:end="3665:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3665:49" pos:end="3665:51"><expr pos:start="3665:49" pos:end="3665:51"><name pos:start="3665:49" pos:end="3665:51">buf</name></expr></argument>, <argument pos:start="3665:54" pos:end="3665:57"><expr pos:start="3665:54" pos:end="3665:57"><name pos:start="3665:54" pos:end="3665:57">arg1</name></expr></argument>, <argument pos:start="3665:60" pos:end="3665:60"><expr pos:start="3665:60" pos:end="3665:60"><literal type="number" pos:start="3665:60" pos:end="3665:60">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3667:17" pos:end="3667:28"><block_content pos:start="3667:17" pos:end="3667:28">

                <goto pos:start="3667:17" pos:end="3667:28">goto <name pos:start="3667:22" pos:end="3667:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3669:13" pos:end="3669:44"><expr pos:start="3669:13" pos:end="3669:43"><name pos:start="3669:13" pos:end="3669:15">ret</name> <operator pos:start="3669:17" pos:end="3669:17">=</operator> <call pos:start="3669:19" pos:end="3669:43"><name pos:start="3669:19" pos:end="3669:27">get_errno</name><argument_list pos:start="3669:28" pos:end="3669:43">(<argument pos:start="3669:29" pos:end="3669:42"><expr pos:start="3669:29" pos:end="3669:42"><call pos:start="3669:29" pos:end="3669:42"><name pos:start="3669:29" pos:end="3669:37">sys_uname</name><argument_list pos:start="3669:38" pos:end="3669:42">(<argument pos:start="3669:39" pos:end="3669:41"><expr pos:start="3669:39" pos:end="3669:41"><name pos:start="3669:39" pos:end="3669:41">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3671:13" pos:end="3685:13"><if pos:start="3671:13" pos:end="3685:13">if <condition pos:start="3671:16" pos:end="3671:31">(<expr pos:start="3671:17" pos:end="3671:30"><operator pos:start="3671:17" pos:end="3671:17">!</operator><call pos:start="3671:18" pos:end="3671:30"><name pos:start="3671:18" pos:end="3671:25">is_error</name><argument_list pos:start="3671:26" pos:end="3671:30">(<argument pos:start="3671:27" pos:end="3671:29"><expr pos:start="3671:27" pos:end="3671:29"><name pos:start="3671:27" pos:end="3671:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3671:33" pos:end="3685:13">{<block_content pos:start="3677:17" pos:end="3683:60">

                <comment type="block" pos:start="3673:17" pos:end="3675:31">/* Overrite the native machine name with whatever is being

                   emulated. */</comment>

                <expr_stmt pos:start="3677:17" pos:end="3677:69"><expr pos:start="3677:17" pos:end="3677:68"><call pos:start="3677:17" pos:end="3677:68"><name pos:start="3677:17" pos:end="3677:22">strcpy</name> <argument_list pos:start="3677:24" pos:end="3677:68">(<argument pos:start="3677:25" pos:end="3677:36"><expr pos:start="3677:25" pos:end="3677:36"><name pos:start="3677:25" pos:end="3677:36"><name pos:start="3677:25" pos:end="3677:27">buf</name><operator pos:start="3677:28" pos:end="3677:29">-&gt;</operator><name pos:start="3677:30" pos:end="3677:36">machine</name></name></expr></argument>, <argument pos:start="3677:39" pos:end="3677:67"><expr pos:start="3677:39" pos:end="3677:67"><call pos:start="3677:39" pos:end="3677:67"><name pos:start="3677:39" pos:end="3677:58">cpu_to_uname_machine</name><argument_list pos:start="3677:59" pos:end="3677:67">(<argument pos:start="3677:60" pos:end="3677:66"><expr pos:start="3677:60" pos:end="3677:66"><name pos:start="3677:60" pos:end="3677:66">cpu_env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="3679:17" pos:end="3679:71">/* Allow the user to override the reported release.  */</comment>

                <if_stmt pos:start="3681:17" pos:end="3683:60"><if pos:start="3681:17" pos:end="3683:60">if <condition pos:start="3681:20" pos:end="3681:62">(<expr pos:start="3681:21" pos:end="3681:61"><name pos:start="3681:21" pos:end="3681:38">qemu_uname_release</name> <operator pos:start="3681:40" pos:end="3681:41">&amp;&amp;</operator> <operator pos:start="3681:43" pos:end="3681:43">*</operator><name pos:start="3681:44" pos:end="3681:61">qemu_uname_release</name></expr>)</condition><block type="pseudo" pos:start="3683:19" pos:end="3683:60"><block_content pos:start="3683:19" pos:end="3683:60">

                  <expr_stmt pos:start="3683:19" pos:end="3683:60"><expr pos:start="3683:19" pos:end="3683:59"><call pos:start="3683:19" pos:end="3683:59"><name pos:start="3683:19" pos:end="3683:24">strcpy</name> <argument_list pos:start="3683:26" pos:end="3683:59">(<argument pos:start="3683:27" pos:end="3683:38"><expr pos:start="3683:27" pos:end="3683:38"><name pos:start="3683:27" pos:end="3683:38"><name pos:start="3683:27" pos:end="3683:29">buf</name><operator pos:start="3683:30" pos:end="3683:31">-&gt;</operator><name pos:start="3683:32" pos:end="3683:38">release</name></name></expr></argument>, <argument pos:start="3683:41" pos:end="3683:58"><expr pos:start="3683:41" pos:end="3683:58"><name pos:start="3683:41" pos:end="3683:58">qemu_uname_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="3687:13" pos:end="3687:45"><expr pos:start="3687:13" pos:end="3687:44"><call pos:start="3687:13" pos:end="3687:44"><name pos:start="3687:13" pos:end="3687:30">unlock_user_struct</name><argument_list pos:start="3687:31" pos:end="3687:44">(<argument pos:start="3687:32" pos:end="3687:34"><expr pos:start="3687:32" pos:end="3687:34"><name pos:start="3687:32" pos:end="3687:34">buf</name></expr></argument>, <argument pos:start="3687:37" pos:end="3687:40"><expr pos:start="3687:37" pos:end="3687:40"><name pos:start="3687:37" pos:end="3687:40">arg1</name></expr></argument>, <argument pos:start="3687:43" pos:end="3687:43"><expr pos:start="3687:43" pos:end="3687:43"><literal type="number" pos:start="3687:43" pos:end="3687:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="3691:9" pos:end="3694:0">break;</break>

<cpp:ifdef pos:start="3693:1" pos:end="3693:18">#<cpp:directive pos:start="3693:2" pos:end="3693:6">ifdef</cpp:directive> <name pos:start="3693:8" pos:end="3693:18">TARGET_I386</name></cpp:ifdef>

    <case pos:start="3695:5" pos:end="3695:30">case <expr pos:start="3695:10" pos:end="3695:29"><name pos:start="3695:10" pos:end="3695:29">TARGET_NR_modify_ldt</name></expr>:</case>

        <expr_stmt pos:start="3697:9" pos:end="3697:55"><expr pos:start="3697:9" pos:end="3697:54"><name pos:start="3697:9" pos:end="3697:11">ret</name> <operator pos:start="3697:13" pos:end="3697:13">=</operator> <call pos:start="3697:15" pos:end="3697:54"><name pos:start="3697:15" pos:end="3697:27">do_modify_ldt</name><argument_list pos:start="3697:28" pos:end="3697:54">(<argument pos:start="3697:29" pos:end="3697:35"><expr pos:start="3697:29" pos:end="3697:35"><name pos:start="3697:29" pos:end="3697:35">cpu_env</name></expr></argument>, <argument pos:start="3697:38" pos:end="3697:41"><expr pos:start="3697:38" pos:end="3697:41"><name pos:start="3697:38" pos:end="3697:41">arg1</name></expr></argument>, <argument pos:start="3697:44" pos:end="3697:47"><expr pos:start="3697:44" pos:end="3697:47"><name pos:start="3697:44" pos:end="3697:47">arg2</name></expr></argument>, <argument pos:start="3697:50" pos:end="3697:53"><expr pos:start="3697:50" pos:end="3697:53"><name pos:start="3697:50" pos:end="3697:53">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3699:9" pos:end="3702:0">break;</break>

<cpp:if pos:start="3701:1" pos:end="3701:27">#<cpp:directive pos:start="3701:2" pos:end="3701:3">if</cpp:directive> <expr pos:start="3701:5" pos:end="3701:27"><operator pos:start="3701:5" pos:end="3701:5">!</operator><call pos:start="3701:6" pos:end="3701:27"><name pos:start="3701:6" pos:end="3701:12">defined</name><argument_list pos:start="3701:13" pos:end="3701:27">(<argument pos:start="3701:14" pos:end="3701:26"><expr pos:start="3701:14" pos:end="3701:26"><name pos:start="3701:14" pos:end="3701:26">TARGET_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="3703:5" pos:end="3703:27">case <expr pos:start="3703:10" pos:end="3703:26"><name pos:start="3703:10" pos:end="3703:26">TARGET_NR_vm86old</name></expr>:</case>

        <goto pos:start="3705:9" pos:end="3705:27">goto <name pos:start="3705:14" pos:end="3705:26">unimplemented</name>;</goto>

    <case pos:start="3707:5" pos:end="3707:24">case <expr pos:start="3707:10" pos:end="3707:23"><name pos:start="3707:10" pos:end="3707:23">TARGET_NR_vm86</name></expr>:</case>

        <expr_stmt pos:start="3709:9" pos:end="3709:43"><expr pos:start="3709:9" pos:end="3709:42"><name pos:start="3709:9" pos:end="3709:11">ret</name> <operator pos:start="3709:13" pos:end="3709:13">=</operator> <call pos:start="3709:15" pos:end="3709:42"><name pos:start="3709:15" pos:end="3709:21">do_vm86</name><argument_list pos:start="3709:22" pos:end="3709:42">(<argument pos:start="3709:23" pos:end="3709:29"><expr pos:start="3709:23" pos:end="3709:29"><name pos:start="3709:23" pos:end="3709:29">cpu_env</name></expr></argument>, <argument pos:start="3709:32" pos:end="3709:35"><expr pos:start="3709:32" pos:end="3709:35"><name pos:start="3709:32" pos:end="3709:35">arg1</name></expr></argument>, <argument pos:start="3709:38" pos:end="3709:41"><expr pos:start="3709:38" pos:end="3709:41"><name pos:start="3709:38" pos:end="3709:41">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3711:9" pos:end="3716:0">break;</break>

<cpp:endif pos:start="3713:1" pos:end="3713:6">#<cpp:directive pos:start="3713:2" pos:end="3713:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="3715:1" pos:end="3715:6">#<cpp:directive pos:start="3715:2" pos:end="3715:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3717:5" pos:end="3717:28">case <expr pos:start="3717:10" pos:end="3717:27"><name pos:start="3717:10" pos:end="3717:27">TARGET_NR_adjtimex</name></expr>:</case>

        <goto pos:start="3719:9" pos:end="3722:0">goto <name pos:start="3719:14" pos:end="3719:26">unimplemented</name>;</goto>

<cpp:ifdef pos:start="3721:1" pos:end="3721:30">#<cpp:directive pos:start="3721:2" pos:end="3721:6">ifdef</cpp:directive> <name pos:start="3721:8" pos:end="3721:30">TARGET_NR_create_module</name></cpp:ifdef>

    <case pos:start="3723:5" pos:end="3726:0">case <expr pos:start="3723:10" pos:end="3723:32"><name pos:start="3723:10" pos:end="3723:32">TARGET_NR_create_module</name></expr>:</case>

<cpp:endif pos:start="3725:1" pos:end="3725:6">#<cpp:directive pos:start="3725:2" pos:end="3725:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3727:5" pos:end="3727:31">case <expr pos:start="3727:10" pos:end="3727:30"><name pos:start="3727:10" pos:end="3727:30">TARGET_NR_init_module</name></expr>:</case>

    <case pos:start="3729:5" pos:end="3732:0">case <expr pos:start="3729:10" pos:end="3729:32"><name pos:start="3729:10" pos:end="3729:32">TARGET_NR_delete_module</name></expr>:</case>

<cpp:ifdef pos:start="3731:1" pos:end="3731:32">#<cpp:directive pos:start="3731:2" pos:end="3731:6">ifdef</cpp:directive> <name pos:start="3731:8" pos:end="3731:32">TARGET_NR_get_kernel_syms</name></cpp:ifdef>

    <case pos:start="3733:5" pos:end="3736:0">case <expr pos:start="3733:10" pos:end="3733:34"><name pos:start="3733:10" pos:end="3733:34">TARGET_NR_get_kernel_syms</name></expr>:</case>

<cpp:endif pos:start="3735:1" pos:end="3735:6">#<cpp:directive pos:start="3735:2" pos:end="3735:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="3737:9" pos:end="3737:27">goto <name pos:start="3737:14" pos:end="3737:26">unimplemented</name>;</goto>

    <case pos:start="3739:5" pos:end="3739:28">case <expr pos:start="3739:10" pos:end="3739:27"><name pos:start="3739:10" pos:end="3739:27">TARGET_NR_quotactl</name></expr>:</case>

        <goto pos:start="3741:9" pos:end="3741:27">goto <name pos:start="3741:14" pos:end="3741:26">unimplemented</name>;</goto>

    <case pos:start="3743:5" pos:end="3743:27">case <expr pos:start="3743:10" pos:end="3743:26"><name pos:start="3743:10" pos:end="3743:26">TARGET_NR_getpgid</name></expr>:</case>

        <expr_stmt pos:start="3745:9" pos:end="3745:39"><expr pos:start="3745:9" pos:end="3745:38"><name pos:start="3745:9" pos:end="3745:11">ret</name> <operator pos:start="3745:13" pos:end="3745:13">=</operator> <call pos:start="3745:15" pos:end="3745:38"><name pos:start="3745:15" pos:end="3745:23">get_errno</name><argument_list pos:start="3745:24" pos:end="3745:38">(<argument pos:start="3745:25" pos:end="3745:37"><expr pos:start="3745:25" pos:end="3745:37"><call pos:start="3745:25" pos:end="3745:37"><name pos:start="3745:25" pos:end="3745:31">getpgid</name><argument_list pos:start="3745:32" pos:end="3745:37">(<argument pos:start="3745:33" pos:end="3745:36"><expr pos:start="3745:33" pos:end="3745:36"><name pos:start="3745:33" pos:end="3745:36">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3747:9" pos:end="3747:14">break;</break>

    <case pos:start="3749:5" pos:end="3749:26">case <expr pos:start="3749:10" pos:end="3749:25"><name pos:start="3749:10" pos:end="3749:25">TARGET_NR_fchdir</name></expr>:</case>

        <expr_stmt pos:start="3751:9" pos:end="3751:38"><expr pos:start="3751:9" pos:end="3751:37"><name pos:start="3751:9" pos:end="3751:11">ret</name> <operator pos:start="3751:13" pos:end="3751:13">=</operator> <call pos:start="3751:15" pos:end="3751:37"><name pos:start="3751:15" pos:end="3751:23">get_errno</name><argument_list pos:start="3751:24" pos:end="3751:37">(<argument pos:start="3751:25" pos:end="3751:36"><expr pos:start="3751:25" pos:end="3751:36"><call pos:start="3751:25" pos:end="3751:36"><name pos:start="3751:25" pos:end="3751:30">fchdir</name><argument_list pos:start="3751:31" pos:end="3751:36">(<argument pos:start="3751:32" pos:end="3751:35"><expr pos:start="3751:32" pos:end="3751:35"><name pos:start="3751:32" pos:end="3751:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3753:9" pos:end="3756:0">break;</break>

<cpp:ifdef pos:start="3755:1" pos:end="3755:24">#<cpp:directive pos:start="3755:2" pos:end="3755:6">ifdef</cpp:directive> <name pos:start="3755:8" pos:end="3755:24">TARGET_NR_bdflush</name></cpp:ifdef> <comment type="block" pos:start="3755:26" pos:end="3755:44">/* not on x86_64 */</comment>

    <case pos:start="3757:5" pos:end="3757:27">case <expr pos:start="3757:10" pos:end="3757:26"><name pos:start="3757:10" pos:end="3757:26">TARGET_NR_bdflush</name></expr>:</case>

        <goto pos:start="3759:9" pos:end="3764:0">goto <name pos:start="3759:14" pos:end="3759:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3761:1" pos:end="3761:6">#<cpp:directive pos:start="3761:2" pos:end="3761:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3763:1" pos:end="3763:22">#<cpp:directive pos:start="3763:2" pos:end="3763:6">ifdef</cpp:directive> <name pos:start="3763:8" pos:end="3763:22">TARGET_NR_sysfs</name></cpp:ifdef>

    <case pos:start="3765:5" pos:end="3765:25">case <expr pos:start="3765:10" pos:end="3765:24"><name pos:start="3765:10" pos:end="3765:24">TARGET_NR_sysfs</name></expr>:</case>

        <goto pos:start="3767:9" pos:end="3770:0">goto <name pos:start="3767:14" pos:end="3767:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3769:1" pos:end="3769:6">#<cpp:directive pos:start="3769:2" pos:end="3769:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3771:5" pos:end="3771:31">case <expr pos:start="3771:10" pos:end="3771:30"><name pos:start="3771:10" pos:end="3771:30">TARGET_NR_personality</name></expr>:</case>

        <expr_stmt pos:start="3773:9" pos:end="3773:43"><expr pos:start="3773:9" pos:end="3773:42"><name pos:start="3773:9" pos:end="3773:11">ret</name> <operator pos:start="3773:13" pos:end="3773:13">=</operator> <call pos:start="3773:15" pos:end="3773:42"><name pos:start="3773:15" pos:end="3773:23">get_errno</name><argument_list pos:start="3773:24" pos:end="3773:42">(<argument pos:start="3773:25" pos:end="3773:41"><expr pos:start="3773:25" pos:end="3773:41"><call pos:start="3773:25" pos:end="3773:41"><name pos:start="3773:25" pos:end="3773:35">personality</name><argument_list pos:start="3773:36" pos:end="3773:41">(<argument pos:start="3773:37" pos:end="3773:40"><expr pos:start="3773:37" pos:end="3773:40"><name pos:start="3773:37" pos:end="3773:40">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3775:9" pos:end="3778:0">break;</break>

<cpp:ifdef pos:start="3777:1" pos:end="3777:28">#<cpp:directive pos:start="3777:2" pos:end="3777:6">ifdef</cpp:directive> <name pos:start="3777:8" pos:end="3777:28">TARGET_NR_afs_syscall</name></cpp:ifdef>

    <case pos:start="3779:5" pos:end="3779:31">case <expr pos:start="3779:10" pos:end="3779:30"><name pos:start="3779:10" pos:end="3779:30">TARGET_NR_afs_syscall</name></expr>:</case>

        <goto pos:start="3781:9" pos:end="3786:0">goto <name pos:start="3781:14" pos:end="3781:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3783:1" pos:end="3783:6">#<cpp:directive pos:start="3783:2" pos:end="3783:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3785:1" pos:end="3785:24">#<cpp:directive pos:start="3785:2" pos:end="3785:6">ifdef</cpp:directive> <name pos:start="3785:8" pos:end="3785:24">TARGET_NR__llseek</name></cpp:ifdef> <comment type="block" pos:start="3785:26" pos:end="3785:43">/* Not on alpha */</comment>

    <case pos:start="3787:5" pos:end="3787:27">case <expr pos:start="3787:10" pos:end="3787:26"><name pos:start="3787:10" pos:end="3787:26">TARGET_NR__llseek</name></expr>:</case>

        <block pos:start="3789:9" pos:end="3819:9">{<block_content pos:start="3791:13" pos:end="3817:13">

            <decl_stmt pos:start="3791:13" pos:end="3794:0"><decl pos:start="3791:13" pos:end="3791:23"><type pos:start="3791:13" pos:end="3791:19"><name pos:start="3791:13" pos:end="3791:19">int64_t</name></type> <name pos:start="3791:21" pos:end="3791:23">res</name></decl>;</decl_stmt>

<cpp:if pos:start="3793:1" pos:end="3793:25">#<cpp:directive pos:start="3793:2" pos:end="3793:3">if</cpp:directive> <expr pos:start="3793:5" pos:end="3793:25"><operator pos:start="3793:5" pos:end="3793:5">!</operator><call pos:start="3793:6" pos:end="3793:25"><name pos:start="3793:6" pos:end="3793:12">defined</name><argument_list pos:start="3793:13" pos:end="3793:25">(<argument pos:start="3793:14" pos:end="3793:24"><expr pos:start="3793:14" pos:end="3793:24"><name pos:start="3793:14" pos:end="3793:24">__NR_llseek</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="3795:13" pos:end="3795:67"><expr pos:start="3795:13" pos:end="3795:66"><name pos:start="3795:13" pos:end="3795:15">res</name> <operator pos:start="3795:17" pos:end="3795:17">=</operator> <call pos:start="3795:19" pos:end="3795:66"><name pos:start="3795:19" pos:end="3795:23">lseek</name><argument_list pos:start="3795:24" pos:end="3795:66">(<argument pos:start="3795:25" pos:end="3795:28"><expr pos:start="3795:25" pos:end="3795:28"><name pos:start="3795:25" pos:end="3795:28">arg1</name></expr></argument>, <argument pos:start="3795:31" pos:end="3795:59"><expr pos:start="3795:31" pos:end="3795:59"><operator pos:start="3795:31" pos:end="3795:31">(</operator><operator pos:start="3795:32" pos:end="3795:32">(</operator><name pos:start="3795:33" pos:end="3795:40">uint64_t</name><operator pos:start="3795:41" pos:end="3795:41">)</operator><name pos:start="3795:42" pos:end="3795:45">arg2</name> <operator pos:start="3795:47" pos:end="3795:48">&lt;&lt;</operator> <literal type="number" pos:start="3795:50" pos:end="3795:51">32</literal><operator pos:start="3795:52" pos:end="3795:52">)</operator> <operator pos:start="3795:54" pos:end="3795:54">|</operator> <name pos:start="3795:56" pos:end="3795:59">arg3</name></expr></argument>, <argument pos:start="3795:62" pos:end="3795:65"><expr pos:start="3795:62" pos:end="3795:65"><name pos:start="3795:62" pos:end="3795:65">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3797:13" pos:end="3808:0"><if pos:start="3797:13" pos:end="3801:13">if <condition pos:start="3797:16" pos:end="3797:26">(<expr pos:start="3797:17" pos:end="3797:25"><name pos:start="3797:17" pos:end="3797:19">res</name> <operator pos:start="3797:21" pos:end="3797:22">==</operator> <operator pos:start="3797:24" pos:end="3797:24">-</operator><literal type="number" pos:start="3797:25" pos:end="3797:25">1</literal></expr>)</condition> <block pos:start="3797:28" pos:end="3801:13">{<block_content pos:start="3799:17" pos:end="3799:37">

                <expr_stmt pos:start="3799:17" pos:end="3799:37"><expr pos:start="3799:17" pos:end="3799:36"><name pos:start="3799:17" pos:end="3799:19">ret</name> <operator pos:start="3799:21" pos:end="3799:21">=</operator> <call pos:start="3799:23" pos:end="3799:36"><name pos:start="3799:23" pos:end="3799:31">get_errno</name><argument_list pos:start="3799:32" pos:end="3799:36">(<argument pos:start="3799:33" pos:end="3799:35"><expr pos:start="3799:33" pos:end="3799:35"><name pos:start="3799:33" pos:end="3799:35">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="3801:15" pos:end="3808:0">else <block pos:start="3801:20" pos:end="3808:0">{<block_content pos:start="3803:17" pos:end="3803:24">

                <expr_stmt pos:start="3803:17" pos:end="3803:24"><expr pos:start="3803:17" pos:end="3803:23"><name pos:start="3803:17" pos:end="3803:19">ret</name> <operator pos:start="3803:21" pos:end="3803:21">=</operator> <literal type="number" pos:start="3803:23" pos:end="3803:23">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

<cpp:else pos:start="3807:1" pos:end="3807:5">#<cpp:directive pos:start="3807:2" pos:end="3807:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="3809:13" pos:end="3812:0"><expr pos:start="3809:13" pos:end="3809:66"><name pos:start="3809:13" pos:end="3809:15">ret</name> <operator pos:start="3809:17" pos:end="3809:17">=</operator> <call pos:start="3809:19" pos:end="3809:66"><name pos:start="3809:19" pos:end="3809:27">get_errno</name><argument_list pos:start="3809:28" pos:end="3809:66">(<argument pos:start="3809:29" pos:end="3809:65"><expr pos:start="3809:29" pos:end="3809:65"><call pos:start="3809:29" pos:end="3809:65"><name pos:start="3809:29" pos:end="3809:35">_llseek</name><argument_list pos:start="3809:36" pos:end="3809:65">(<argument pos:start="3809:37" pos:end="3809:40"><expr pos:start="3809:37" pos:end="3809:40"><name pos:start="3809:37" pos:end="3809:40">arg1</name></expr></argument>, <argument pos:start="3809:43" pos:end="3809:46"><expr pos:start="3809:43" pos:end="3809:46"><name pos:start="3809:43" pos:end="3809:46">arg2</name></expr></argument>, <argument pos:start="3809:49" pos:end="3809:52"><expr pos:start="3809:49" pos:end="3809:52"><name pos:start="3809:49" pos:end="3809:52">arg3</name></expr></argument>, <argument pos:start="3809:55" pos:end="3809:58"><expr pos:start="3809:55" pos:end="3809:58"><operator pos:start="3809:55" pos:end="3809:55">&amp;</operator><name pos:start="3809:56" pos:end="3809:58">res</name></expr></argument>, <argument pos:start="3809:61" pos:end="3809:64"><expr pos:start="3809:61" pos:end="3809:64"><name pos:start="3809:61" pos:end="3809:64">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="3811:1" pos:end="3811:6">#<cpp:directive pos:start="3811:2" pos:end="3811:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="3813:13" pos:end="3817:13"><if pos:start="3813:13" pos:end="3817:13">if <condition pos:start="3813:16" pos:end="3813:54">(<expr pos:start="3813:17" pos:end="3813:53"><operator pos:start="3813:17" pos:end="3813:17">(</operator><name pos:start="3813:18" pos:end="3813:20">ret</name> <operator pos:start="3813:22" pos:end="3813:23">==</operator> <literal type="number" pos:start="3813:25" pos:end="3813:25">0</literal><operator pos:start="3813:26" pos:end="3813:26">)</operator> <operator pos:start="3813:28" pos:end="3813:29">&amp;&amp;</operator> <call pos:start="3813:31" pos:end="3813:53"><name pos:start="3813:31" pos:end="3813:42">put_user_s64</name><argument_list pos:start="3813:43" pos:end="3813:53">(<argument pos:start="3813:44" pos:end="3813:46"><expr pos:start="3813:44" pos:end="3813:46"><name pos:start="3813:44" pos:end="3813:46">res</name></expr></argument>, <argument pos:start="3813:49" pos:end="3813:52"><expr pos:start="3813:49" pos:end="3813:52"><name pos:start="3813:49" pos:end="3813:52">arg4</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3813:56" pos:end="3817:13">{<block_content pos:start="3815:17" pos:end="3815:28">

                <goto pos:start="3815:17" pos:end="3815:28">goto <name pos:start="3815:22" pos:end="3815:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3821:9" pos:end="3824:0">break;</break>

<cpp:endif pos:start="3823:1" pos:end="3823:6">#<cpp:directive pos:start="3823:2" pos:end="3823:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3825:5" pos:end="3828:0">case <expr pos:start="3825:10" pos:end="3825:27"><name pos:start="3825:10" pos:end="3825:27">TARGET_NR_getdents</name></expr>:</case>

<cpp:if pos:start="3827:1" pos:end="3827:49">#<cpp:directive pos:start="3827:2" pos:end="3827:3">if</cpp:directive> <expr pos:start="3827:5" pos:end="3827:49"><name pos:start="3827:5" pos:end="3827:19">TARGET_ABI_BITS</name> <operator pos:start="3827:21" pos:end="3827:22">==</operator> <literal type="number" pos:start="3827:24" pos:end="3827:25">32</literal> <operator pos:start="3827:27" pos:end="3827:28">&amp;&amp;</operator> <name pos:start="3827:30" pos:end="3827:43">HOST_LONG_BITS</name> <operator pos:start="3827:45" pos:end="3827:46">==</operator> <literal type="number" pos:start="3827:48" pos:end="3827:49">64</literal></expr></cpp:if>

        <block pos:start="3829:9" pos:end="3918:0">{<block_content pos:start="3831:13" pos:end="3913:23">

            <decl_stmt pos:start="3831:13" pos:end="3831:46"><decl pos:start="3831:13" pos:end="3831:45"><type pos:start="3831:13" pos:end="3831:34"><name pos:start="3831:13" pos:end="3831:32"><name pos:start="3831:13" pos:end="3831:18">struct</name> <name pos:start="3831:20" pos:end="3831:32">target_dirent</name></name> <modifier pos:start="3831:34" pos:end="3831:34">*</modifier></type><name pos:start="3831:35" pos:end="3831:45">target_dirp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3833:13" pos:end="3833:38"><decl pos:start="3833:13" pos:end="3833:37"><type pos:start="3833:13" pos:end="3833:33"><name pos:start="3833:13" pos:end="3833:31"><name pos:start="3833:13" pos:end="3833:18">struct</name> <name pos:start="3833:20" pos:end="3833:31">linux_dirent</name></name> <modifier pos:start="3833:33" pos:end="3833:33">*</modifier></type><name pos:start="3833:34" pos:end="3833:37">dirp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3835:13" pos:end="3835:34"><decl pos:start="3835:13" pos:end="3835:33"><type pos:start="3835:13" pos:end="3835:20"><name pos:start="3835:13" pos:end="3835:20">abi_long</name></type> <name pos:start="3835:22" pos:end="3835:26">count</name> <init pos:start="3835:28" pos:end="3835:33">= <expr pos:start="3835:30" pos:end="3835:33"><name pos:start="3835:30" pos:end="3835:33">arg3</name></expr></init></decl>;</decl_stmt>



	    <expr_stmt pos:start="3839:13" pos:end="3839:33"><expr pos:start="3839:13" pos:end="3839:32"><name pos:start="3839:13" pos:end="3839:16">dirp</name> <operator pos:start="3839:18" pos:end="3839:18">=</operator> <call pos:start="3839:20" pos:end="3839:32"><name pos:start="3839:20" pos:end="3839:25">malloc</name><argument_list pos:start="3839:26" pos:end="3839:32">(<argument pos:start="3839:27" pos:end="3839:31"><expr pos:start="3839:27" pos:end="3839:31"><name pos:start="3839:27" pos:end="3839:31">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="3841:13" pos:end="3847:13"><if pos:start="3841:13" pos:end="3847:13">if <condition pos:start="3841:16" pos:end="3841:22">(<expr pos:start="3841:17" pos:end="3841:21"><operator pos:start="3841:17" pos:end="3841:17">!</operator><name pos:start="3841:18" pos:end="3841:21">dirp</name></expr>)</condition> <block pos:start="3841:24" pos:end="3847:13">{<block_content pos:start="3843:17" pos:end="3845:26">

                <expr_stmt pos:start="3843:17" pos:end="3843:37"><expr pos:start="3843:17" pos:end="3843:36"><name pos:start="3843:17" pos:end="3843:19">ret</name> <operator pos:start="3843:21" pos:end="3843:21">=</operator> <operator pos:start="3843:23" pos:end="3843:23">-</operator><name pos:start="3843:24" pos:end="3843:36">TARGET_ENOMEM</name></expr>;</expr_stmt>

                <goto pos:start="3845:17" pos:end="3845:26">goto <name pos:start="3845:22" pos:end="3845:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="3851:13" pos:end="3851:61"><expr pos:start="3851:13" pos:end="3851:60"><name pos:start="3851:13" pos:end="3851:15">ret</name> <operator pos:start="3851:17" pos:end="3851:17">=</operator> <call pos:start="3851:19" pos:end="3851:60"><name pos:start="3851:19" pos:end="3851:27">get_errno</name><argument_list pos:start="3851:28" pos:end="3851:60">(<argument pos:start="3851:29" pos:end="3851:59"><expr pos:start="3851:29" pos:end="3851:59"><call pos:start="3851:29" pos:end="3851:59"><name pos:start="3851:29" pos:end="3851:40">sys_getdents</name><argument_list pos:start="3851:41" pos:end="3851:59">(<argument pos:start="3851:42" pos:end="3851:45"><expr pos:start="3851:42" pos:end="3851:45"><name pos:start="3851:42" pos:end="3851:45">arg1</name></expr></argument>, <argument pos:start="3851:48" pos:end="3851:51"><expr pos:start="3851:48" pos:end="3851:51"><name pos:start="3851:48" pos:end="3851:51">dirp</name></expr></argument>, <argument pos:start="3851:54" pos:end="3851:58"><expr pos:start="3851:54" pos:end="3851:58"><name pos:start="3851:54" pos:end="3851:58">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3853:13" pos:end="3911:13"><if pos:start="3853:13" pos:end="3911:13">if <condition pos:start="3853:16" pos:end="3853:31">(<expr pos:start="3853:17" pos:end="3853:30"><operator pos:start="3853:17" pos:end="3853:17">!</operator><call pos:start="3853:18" pos:end="3853:30"><name pos:start="3853:18" pos:end="3853:25">is_error</name><argument_list pos:start="3853:26" pos:end="3853:30">(<argument pos:start="3853:27" pos:end="3853:29"><expr pos:start="3853:27" pos:end="3853:29"><name pos:start="3853:27" pos:end="3853:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3853:33" pos:end="3911:13">{<block_content pos:start="3855:17" pos:end="3909:52">

                <decl_stmt pos:start="3855:17" pos:end="3855:40"><decl pos:start="3855:17" pos:end="3855:39"><type pos:start="3855:17" pos:end="3855:37"><name pos:start="3855:17" pos:end="3855:35"><name pos:start="3855:17" pos:end="3855:22">struct</name> <name pos:start="3855:24" pos:end="3855:35">linux_dirent</name></name> <modifier pos:start="3855:37" pos:end="3855:37">*</modifier></type><name pos:start="3855:38" pos:end="3855:39">de</name></decl>;</decl_stmt>

		<decl_stmt pos:start="3857:17" pos:end="3857:42"><decl pos:start="3857:17" pos:end="3857:41"><type pos:start="3857:17" pos:end="3857:38"><name pos:start="3857:17" pos:end="3857:36"><name pos:start="3857:17" pos:end="3857:22">struct</name> <name pos:start="3857:24" pos:end="3857:36">target_dirent</name></name> <modifier pos:start="3857:38" pos:end="3857:38">*</modifier></type><name pos:start="3857:39" pos:end="3857:41">tde</name></decl>;</decl_stmt>

                <decl_stmt pos:start="3859:17" pos:end="3859:30"><decl pos:start="3859:17" pos:end="3859:29"><type pos:start="3859:17" pos:end="3859:19"><name pos:start="3859:17" pos:end="3859:19">int</name></type> <name pos:start="3859:21" pos:end="3859:23">len</name> <init pos:start="3859:25" pos:end="3859:29">= <expr pos:start="3859:27" pos:end="3859:29"><name pos:start="3859:27" pos:end="3859:29">ret</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="3861:17" pos:end="3861:36"><decl pos:start="3861:17" pos:end="3861:26"><type pos:start="3861:17" pos:end="3861:19"><name pos:start="3861:17" pos:end="3861:19">int</name></type> <name pos:start="3861:21" pos:end="3861:26">reclen</name></decl>, <decl pos:start="3861:29" pos:end="3861:35"><type ref="prev" pos:start="3861:17" pos:end="3861:19"/><name pos:start="3861:29" pos:end="3861:35">treclen</name></decl>;</decl_stmt>

		<decl_stmt pos:start="3863:17" pos:end="3863:37"><decl pos:start="3863:17" pos:end="3863:26"><type pos:start="3863:17" pos:end="3863:19"><name pos:start="3863:17" pos:end="3863:19">int</name></type> <name pos:start="3863:21" pos:end="3863:26">count1</name></decl>, <decl pos:start="3863:29" pos:end="3863:36"><type ref="prev" pos:start="3863:17" pos:end="3863:19"/><name pos:start="3863:29" pos:end="3863:36">tnamelen</name></decl>;</decl_stmt>



		<expr_stmt pos:start="3867:17" pos:end="3867:27"><expr pos:start="3867:17" pos:end="3867:26"><name pos:start="3867:17" pos:end="3867:22">count1</name> <operator pos:start="3867:24" pos:end="3867:24">=</operator> <literal type="number" pos:start="3867:26" pos:end="3867:26">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="3869:17" pos:end="3869:26"><expr pos:start="3869:17" pos:end="3869:25"><name pos:start="3869:17" pos:end="3869:18">de</name> <operator pos:start="3869:20" pos:end="3869:20">=</operator> <name pos:start="3869:22" pos:end="3869:25">dirp</name></expr>;</expr_stmt>

                <if_stmt pos:start="3871:17" pos:end="3873:32"><if pos:start="3871:17" pos:end="3873:32">if <condition pos:start="3871:20" pos:end="3871:77">(<expr pos:start="3871:21" pos:end="3871:76"><operator pos:start="3871:21" pos:end="3871:21">!</operator><operator pos:start="3871:22" pos:end="3871:22">(</operator><name pos:start="3871:23" pos:end="3871:33">target_dirp</name> <operator pos:start="3871:35" pos:end="3871:35">=</operator> <call pos:start="3871:37" pos:end="3871:75"><name pos:start="3871:37" pos:end="3871:45">lock_user</name><argument_list pos:start="3871:46" pos:end="3871:75">(<argument pos:start="3871:47" pos:end="3871:58"><expr pos:start="3871:47" pos:end="3871:58"><name pos:start="3871:47" pos:end="3871:58">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3871:61" pos:end="3871:64"><expr pos:start="3871:61" pos:end="3871:64"><name pos:start="3871:61" pos:end="3871:64">arg2</name></expr></argument>, <argument pos:start="3871:67" pos:end="3871:71"><expr pos:start="3871:67" pos:end="3871:71"><name pos:start="3871:67" pos:end="3871:71">count</name></expr></argument>, <argument pos:start="3871:74" pos:end="3871:74"><expr pos:start="3871:74" pos:end="3871:74"><literal type="number" pos:start="3871:74" pos:end="3871:74">0</literal></expr></argument>)</argument_list></call><operator pos:start="3871:76" pos:end="3871:76">)</operator></expr>)</condition><block type="pseudo" pos:start="3873:21" pos:end="3873:32"><block_content pos:start="3873:21" pos:end="3873:32">

                    <goto pos:start="3873:21" pos:end="3873:32">goto <name pos:start="3873:26" pos:end="3873:31">efault</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt pos:start="3875:17" pos:end="3875:34"><expr pos:start="3875:17" pos:end="3875:33"><name pos:start="3875:17" pos:end="3875:19">tde</name> <operator pos:start="3875:21" pos:end="3875:21">=</operator> <name pos:start="3875:23" pos:end="3875:33">target_dirp</name></expr>;</expr_stmt>

                <while pos:start="3877:17" pos:end="3905:17">while <condition pos:start="3877:23" pos:end="3877:31">(<expr pos:start="3877:24" pos:end="3877:30"><name pos:start="3877:24" pos:end="3877:26">len</name> <operator pos:start="3877:28" pos:end="3877:28">&gt;</operator> <literal type="number" pos:start="3877:30" pos:end="3877:30">0</literal></expr>)</condition> <block pos:start="3877:33" pos:end="3905:17">{<block_content pos:start="3879:21" pos:end="3903:38">

                    <expr_stmt pos:start="3879:21" pos:end="3879:42"><expr pos:start="3879:21" pos:end="3879:41"><name pos:start="3879:21" pos:end="3879:26">reclen</name> <operator pos:start="3879:28" pos:end="3879:28">=</operator> <name pos:start="3879:30" pos:end="3879:41"><name pos:start="3879:30" pos:end="3879:31">de</name><operator pos:start="3879:32" pos:end="3879:33">-&gt;</operator><name pos:start="3879:34" pos:end="3879:41">d_reclen</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="3881:21" pos:end="3881:78"><expr pos:start="3881:21" pos:end="3881:77"><name pos:start="3881:21" pos:end="3881:28">tnamelen</name> <operator pos:start="3881:30" pos:end="3881:30">=</operator> <name pos:start="3881:32" pos:end="3881:37">reclen</name> <operator pos:start="3881:39" pos:end="3881:39">-</operator> <call pos:start="3881:41" pos:end="3881:77"><name pos:start="3881:41" pos:end="3881:48">offsetof</name><argument_list pos:start="3881:49" pos:end="3881:77">(<argument pos:start="3881:50" pos:end="3881:68"><expr pos:start="3881:50" pos:end="3881:68">struct <name pos:start="3881:57" pos:end="3881:68">linux_dirent</name></expr></argument>, <argument pos:start="3881:71" pos:end="3881:76"><expr pos:start="3881:71" pos:end="3881:76"><name pos:start="3881:71" pos:end="3881:76">d_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3883:21" pos:end="3883:42"><expr pos:start="3883:21" pos:end="3883:41"><call pos:start="3883:21" pos:end="3883:41"><name pos:start="3883:21" pos:end="3883:26">assert</name><argument_list pos:start="3883:27" pos:end="3883:41">(<argument pos:start="3883:28" pos:end="3883:40"><expr pos:start="3883:28" pos:end="3883:40"><name pos:start="3883:28" pos:end="3883:35">tnamelen</name> <operator pos:start="3883:37" pos:end="3883:38">&gt;=</operator> <literal type="number" pos:start="3883:40" pos:end="3883:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3885:21" pos:end="3885:80"><expr pos:start="3885:21" pos:end="3885:79"><name pos:start="3885:21" pos:end="3885:27">treclen</name> <operator pos:start="3885:29" pos:end="3885:29">=</operator> <name pos:start="3885:31" pos:end="3885:38">tnamelen</name> <operator pos:start="3885:40" pos:end="3885:40">+</operator> <call pos:start="3885:42" pos:end="3885:79"><name pos:start="3885:42" pos:end="3885:49">offsetof</name><argument_list pos:start="3885:50" pos:end="3885:79">(<argument pos:start="3885:51" pos:end="3885:70"><expr pos:start="3885:51" pos:end="3885:70">struct <name pos:start="3885:58" pos:end="3885:70">target_dirent</name></expr></argument>, <argument pos:start="3885:73" pos:end="3885:78"><expr pos:start="3885:73" pos:end="3885:78"><name pos:start="3885:73" pos:end="3885:78">d_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3887:21" pos:end="3887:54"><expr pos:start="3887:21" pos:end="3887:53"><call pos:start="3887:21" pos:end="3887:53"><name pos:start="3887:21" pos:end="3887:26">assert</name><argument_list pos:start="3887:27" pos:end="3887:53">(<argument pos:start="3887:28" pos:end="3887:52"><expr pos:start="3887:28" pos:end="3887:52"><name pos:start="3887:28" pos:end="3887:33">count1</name> <operator pos:start="3887:35" pos:end="3887:35">+</operator> <name pos:start="3887:37" pos:end="3887:43">treclen</name> <operator pos:start="3887:45" pos:end="3887:46">&lt;=</operator> <name pos:start="3887:48" pos:end="3887:52">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3889:21" pos:end="3889:53"><expr pos:start="3889:21" pos:end="3889:52"><name pos:start="3889:21" pos:end="3889:33"><name pos:start="3889:21" pos:end="3889:23">tde</name><operator pos:start="3889:24" pos:end="3889:25">-&gt;</operator><name pos:start="3889:26" pos:end="3889:33">d_reclen</name></name> <operator pos:start="3889:35" pos:end="3889:35">=</operator> <call pos:start="3889:37" pos:end="3889:52"><name pos:start="3889:37" pos:end="3889:43">tswap16</name><argument_list pos:start="3889:44" pos:end="3889:52">(<argument pos:start="3889:45" pos:end="3889:51"><expr pos:start="3889:45" pos:end="3889:51"><name pos:start="3889:45" pos:end="3889:51">treclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3891:21" pos:end="3891:52"><expr pos:start="3891:21" pos:end="3891:51"><name pos:start="3891:21" pos:end="3891:30"><name pos:start="3891:21" pos:end="3891:23">tde</name><operator pos:start="3891:24" pos:end="3891:25">-&gt;</operator><name pos:start="3891:26" pos:end="3891:30">d_ino</name></name> <operator pos:start="3891:32" pos:end="3891:32">=</operator> <call pos:start="3891:34" pos:end="3891:51"><name pos:start="3891:34" pos:end="3891:40">tswapal</name><argument_list pos:start="3891:41" pos:end="3891:51">(<argument pos:start="3891:42" pos:end="3891:50"><expr pos:start="3891:42" pos:end="3891:50"><name pos:start="3891:42" pos:end="3891:50"><name pos:start="3891:42" pos:end="3891:43">de</name><operator pos:start="3891:44" pos:end="3891:45">-&gt;</operator><name pos:start="3891:46" pos:end="3891:50">d_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3893:21" pos:end="3893:52"><expr pos:start="3893:21" pos:end="3893:51"><name pos:start="3893:21" pos:end="3893:30"><name pos:start="3893:21" pos:end="3893:23">tde</name><operator pos:start="3893:24" pos:end="3893:25">-&gt;</operator><name pos:start="3893:26" pos:end="3893:30">d_off</name></name> <operator pos:start="3893:32" pos:end="3893:32">=</operator> <call pos:start="3893:34" pos:end="3893:51"><name pos:start="3893:34" pos:end="3893:40">tswapal</name><argument_list pos:start="3893:41" pos:end="3893:51">(<argument pos:start="3893:42" pos:end="3893:50"><expr pos:start="3893:42" pos:end="3893:50"><name pos:start="3893:42" pos:end="3893:50"><name pos:start="3893:42" pos:end="3893:43">de</name><operator pos:start="3893:44" pos:end="3893:45">-&gt;</operator><name pos:start="3893:46" pos:end="3893:50">d_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3895:21" pos:end="3895:62"><expr pos:start="3895:21" pos:end="3895:61"><call pos:start="3895:21" pos:end="3895:61"><name pos:start="3895:21" pos:end="3895:26">memcpy</name><argument_list pos:start="3895:27" pos:end="3895:61">(<argument pos:start="3895:28" pos:end="3895:38"><expr pos:start="3895:28" pos:end="3895:38"><name pos:start="3895:28" pos:end="3895:38"><name pos:start="3895:28" pos:end="3895:30">tde</name><operator pos:start="3895:31" pos:end="3895:32">-&gt;</operator><name pos:start="3895:33" pos:end="3895:38">d_name</name></name></expr></argument>, <argument pos:start="3895:41" pos:end="3895:50"><expr pos:start="3895:41" pos:end="3895:50"><name pos:start="3895:41" pos:end="3895:50"><name pos:start="3895:41" pos:end="3895:42">de</name><operator pos:start="3895:43" pos:end="3895:44">-&gt;</operator><name pos:start="3895:45" pos:end="3895:50">d_name</name></name></expr></argument>, <argument pos:start="3895:53" pos:end="3895:60"><expr pos:start="3895:53" pos:end="3895:60"><name pos:start="3895:53" pos:end="3895:60">tnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3897:21" pos:end="3897:70"><expr pos:start="3897:21" pos:end="3897:69"><name pos:start="3897:21" pos:end="3897:22">de</name> <operator pos:start="3897:24" pos:end="3897:24">=</operator> <operator pos:start="3897:26" pos:end="3897:26">(</operator>struct <name pos:start="3897:34" pos:end="3897:45">linux_dirent</name> <operator pos:start="3897:47" pos:end="3897:47">*</operator><operator pos:start="3897:48" pos:end="3897:48">)</operator><operator pos:start="3897:49" pos:end="3897:49">(</operator><operator pos:start="3897:50" pos:end="3897:50">(</operator><name pos:start="3897:51" pos:end="3897:54">char</name> <operator pos:start="3897:56" pos:end="3897:56">*</operator><operator pos:start="3897:57" pos:end="3897:57">)</operator><name pos:start="3897:58" pos:end="3897:59">de</name> <operator pos:start="3897:61" pos:end="3897:61">+</operator> <name pos:start="3897:63" pos:end="3897:68">reclen</name><operator pos:start="3897:69" pos:end="3897:69">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="3899:21" pos:end="3899:34"><expr pos:start="3899:21" pos:end="3899:33"><name pos:start="3899:21" pos:end="3899:23">len</name> <operator pos:start="3899:25" pos:end="3899:26">-=</operator> <name pos:start="3899:28" pos:end="3899:33">reclen</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="3901:21" pos:end="3901:74"><expr pos:start="3901:21" pos:end="3901:73"><name pos:start="3901:21" pos:end="3901:23">tde</name> <operator pos:start="3901:25" pos:end="3901:25">=</operator> <operator pos:start="3901:27" pos:end="3901:27">(</operator>struct <name pos:start="3901:35" pos:end="3901:47">target_dirent</name> <operator pos:start="3901:49" pos:end="3901:49">*</operator><operator pos:start="3901:50" pos:end="3901:50">)</operator><operator pos:start="3901:51" pos:end="3901:51">(</operator><operator pos:start="3901:52" pos:end="3901:52">(</operator><name pos:start="3901:53" pos:end="3901:56">char</name> <operator pos:start="3901:58" pos:end="3901:58">*</operator><operator pos:start="3901:59" pos:end="3901:59">)</operator><name pos:start="3901:60" pos:end="3901:62">tde</name> <operator pos:start="3901:64" pos:end="3901:64">+</operator> <name pos:start="3901:66" pos:end="3901:72">treclen</name><operator pos:start="3901:73" pos:end="3901:73">)</operator></expr>;</expr_stmt>

		    <expr_stmt pos:start="3903:21" pos:end="3903:38"><expr pos:start="3903:21" pos:end="3903:37"><name pos:start="3903:21" pos:end="3903:26">count1</name> <operator pos:start="3903:28" pos:end="3903:29">+=</operator> <name pos:start="3903:31" pos:end="3903:37">treclen</name></expr>;</expr_stmt>

                </block_content>}</block></while>

		<expr_stmt pos:start="3907:17" pos:end="3907:29"><expr pos:start="3907:17" pos:end="3907:28"><name pos:start="3907:17" pos:end="3907:19">ret</name> <operator pos:start="3907:21" pos:end="3907:21">=</operator> <name pos:start="3907:23" pos:end="3907:28">count1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="3909:17" pos:end="3909:52"><expr pos:start="3909:17" pos:end="3909:51"><call pos:start="3909:17" pos:end="3909:51"><name pos:start="3909:17" pos:end="3909:27">unlock_user</name><argument_list pos:start="3909:28" pos:end="3909:51">(<argument pos:start="3909:29" pos:end="3909:39"><expr pos:start="3909:29" pos:end="3909:39"><name pos:start="3909:29" pos:end="3909:39">target_dirp</name></expr></argument>, <argument pos:start="3909:42" pos:end="3909:45"><expr pos:start="3909:42" pos:end="3909:45"><name pos:start="3909:42" pos:end="3909:45">arg2</name></expr></argument>, <argument pos:start="3909:48" pos:end="3909:50"><expr pos:start="3909:48" pos:end="3909:50"><name pos:start="3909:48" pos:end="3909:50">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="3913:13" pos:end="3913:23"><expr pos:start="3913:13" pos:end="3913:22"><call pos:start="3913:13" pos:end="3913:22"><name pos:start="3913:13" pos:end="3913:16">free</name><argument_list pos:start="3913:17" pos:end="3913:22">(<argument pos:start="3913:18" pos:end="3913:21"><expr pos:start="3913:18" pos:end="3913:21"><name pos:start="3913:18" pos:end="3913:21">dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:else pos:start="3917:1" pos:end="3917:5">#<cpp:directive pos:start="3917:2" pos:end="3917:5">else</cpp:directive></cpp:else>

        <block pos:start="3919:9" pos:end="3970:0">{<block_content pos:start="3921:13" pos:end="3965:41">

            <decl_stmt pos:start="3921:13" pos:end="3921:38"><decl pos:start="3921:13" pos:end="3921:37"><type pos:start="3921:13" pos:end="3921:33"><name pos:start="3921:13" pos:end="3921:31"><name pos:start="3921:13" pos:end="3921:18">struct</name> <name pos:start="3921:20" pos:end="3921:31">linux_dirent</name></name> <modifier pos:start="3921:33" pos:end="3921:33">*</modifier></type><name pos:start="3921:34" pos:end="3921:37">dirp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3923:13" pos:end="3923:34"><decl pos:start="3923:13" pos:end="3923:33"><type pos:start="3923:13" pos:end="3923:20"><name pos:start="3923:13" pos:end="3923:20">abi_long</name></type> <name pos:start="3923:22" pos:end="3923:26">count</name> <init pos:start="3923:28" pos:end="3923:33">= <expr pos:start="3923:30" pos:end="3923:33"><name pos:start="3923:30" pos:end="3923:33">arg3</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="3927:13" pos:end="3929:28"><if pos:start="3927:13" pos:end="3929:28">if <condition pos:start="3927:16" pos:end="3927:66">(<expr pos:start="3927:17" pos:end="3927:65"><operator pos:start="3927:17" pos:end="3927:17">!</operator><operator pos:start="3927:18" pos:end="3927:18">(</operator><name pos:start="3927:19" pos:end="3927:22">dirp</name> <operator pos:start="3927:24" pos:end="3927:24">=</operator> <call pos:start="3927:26" pos:end="3927:64"><name pos:start="3927:26" pos:end="3927:34">lock_user</name><argument_list pos:start="3927:35" pos:end="3927:64">(<argument pos:start="3927:36" pos:end="3927:47"><expr pos:start="3927:36" pos:end="3927:47"><name pos:start="3927:36" pos:end="3927:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3927:50" pos:end="3927:53"><expr pos:start="3927:50" pos:end="3927:53"><name pos:start="3927:50" pos:end="3927:53">arg2</name></expr></argument>, <argument pos:start="3927:56" pos:end="3927:60"><expr pos:start="3927:56" pos:end="3927:60"><name pos:start="3927:56" pos:end="3927:60">count</name></expr></argument>, <argument pos:start="3927:63" pos:end="3927:63"><expr pos:start="3927:63" pos:end="3927:63"><literal type="number" pos:start="3927:63" pos:end="3927:63">0</literal></expr></argument>)</argument_list></call><operator pos:start="3927:65" pos:end="3927:65">)</operator></expr>)</condition><block type="pseudo" pos:start="3929:17" pos:end="3929:28"><block_content pos:start="3929:17" pos:end="3929:28">

                <goto pos:start="3929:17" pos:end="3929:28">goto <name pos:start="3929:22" pos:end="3929:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3931:13" pos:end="3931:61"><expr pos:start="3931:13" pos:end="3931:60"><name pos:start="3931:13" pos:end="3931:15">ret</name> <operator pos:start="3931:17" pos:end="3931:17">=</operator> <call pos:start="3931:19" pos:end="3931:60"><name pos:start="3931:19" pos:end="3931:27">get_errno</name><argument_list pos:start="3931:28" pos:end="3931:60">(<argument pos:start="3931:29" pos:end="3931:59"><expr pos:start="3931:29" pos:end="3931:59"><call pos:start="3931:29" pos:end="3931:59"><name pos:start="3931:29" pos:end="3931:40">sys_getdents</name><argument_list pos:start="3931:41" pos:end="3931:59">(<argument pos:start="3931:42" pos:end="3931:45"><expr pos:start="3931:42" pos:end="3931:45"><name pos:start="3931:42" pos:end="3931:45">arg1</name></expr></argument>, <argument pos:start="3931:48" pos:end="3931:51"><expr pos:start="3931:48" pos:end="3931:51"><name pos:start="3931:48" pos:end="3931:51">dirp</name></expr></argument>, <argument pos:start="3931:54" pos:end="3931:58"><expr pos:start="3931:54" pos:end="3931:58"><name pos:start="3931:54" pos:end="3931:58">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3933:13" pos:end="3963:13"><if pos:start="3933:13" pos:end="3963:13">if <condition pos:start="3933:16" pos:end="3933:31">(<expr pos:start="3933:17" pos:end="3933:30"><operator pos:start="3933:17" pos:end="3933:17">!</operator><call pos:start="3933:18" pos:end="3933:30"><name pos:start="3933:18" pos:end="3933:25">is_error</name><argument_list pos:start="3933:26" pos:end="3933:30">(<argument pos:start="3933:27" pos:end="3933:29"><expr pos:start="3933:27" pos:end="3933:29"><name pos:start="3933:27" pos:end="3933:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3933:33" pos:end="3963:13">{<block_content pos:start="3935:17" pos:end="3961:17">

                <decl_stmt pos:start="3935:17" pos:end="3935:40"><decl pos:start="3935:17" pos:end="3935:39"><type pos:start="3935:17" pos:end="3935:37"><name pos:start="3935:17" pos:end="3935:35"><name pos:start="3935:17" pos:end="3935:22">struct</name> <name pos:start="3935:24" pos:end="3935:35">linux_dirent</name></name> <modifier pos:start="3935:37" pos:end="3935:37">*</modifier></type><name pos:start="3935:38" pos:end="3935:39">de</name></decl>;</decl_stmt>

                <decl_stmt pos:start="3937:17" pos:end="3937:30"><decl pos:start="3937:17" pos:end="3937:29"><type pos:start="3937:17" pos:end="3937:19"><name pos:start="3937:17" pos:end="3937:19">int</name></type> <name pos:start="3937:21" pos:end="3937:23">len</name> <init pos:start="3937:25" pos:end="3937:29">= <expr pos:start="3937:27" pos:end="3937:29"><name pos:start="3937:27" pos:end="3937:29">ret</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="3939:17" pos:end="3939:27"><decl pos:start="3939:17" pos:end="3939:26"><type pos:start="3939:17" pos:end="3939:19"><name pos:start="3939:17" pos:end="3939:19">int</name></type> <name pos:start="3939:21" pos:end="3939:26">reclen</name></decl>;</decl_stmt>

                <expr_stmt pos:start="3941:17" pos:end="3941:26"><expr pos:start="3941:17" pos:end="3941:25"><name pos:start="3941:17" pos:end="3941:18">de</name> <operator pos:start="3941:20" pos:end="3941:20">=</operator> <name pos:start="3941:22" pos:end="3941:25">dirp</name></expr>;</expr_stmt>

                <while pos:start="3943:17" pos:end="3961:17">while <condition pos:start="3943:23" pos:end="3943:31">(<expr pos:start="3943:24" pos:end="3943:30"><name pos:start="3943:24" pos:end="3943:26">len</name> <operator pos:start="3943:28" pos:end="3943:28">&gt;</operator> <literal type="number" pos:start="3943:30" pos:end="3943:30">0</literal></expr>)</condition> <block pos:start="3943:33" pos:end="3961:17">{<block_content pos:start="3945:21" pos:end="3959:34">

                    <expr_stmt pos:start="3945:21" pos:end="3945:42"><expr pos:start="3945:21" pos:end="3945:41"><name pos:start="3945:21" pos:end="3945:26">reclen</name> <operator pos:start="3945:28" pos:end="3945:28">=</operator> <name pos:start="3945:30" pos:end="3945:41"><name pos:start="3945:30" pos:end="3945:31">de</name><operator pos:start="3945:32" pos:end="3945:33">-&gt;</operator><name pos:start="3945:34" pos:end="3945:41">d_reclen</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="3947:21" pos:end="3949:30"><if pos:start="3947:21" pos:end="3949:30">if <condition pos:start="3947:24" pos:end="3947:37">(<expr pos:start="3947:25" pos:end="3947:36"><name pos:start="3947:25" pos:end="3947:30">reclen</name> <operator pos:start="3947:32" pos:end="3947:32">&gt;</operator> <name pos:start="3947:34" pos:end="3947:36">len</name></expr>)</condition><block type="pseudo" pos:start="3949:25" pos:end="3949:30"><block_content pos:start="3949:25" pos:end="3949:30">

                        <break pos:start="3949:25" pos:end="3949:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="3951:21" pos:end="3951:51"><expr pos:start="3951:21" pos:end="3951:50"><name pos:start="3951:21" pos:end="3951:32"><name pos:start="3951:21" pos:end="3951:22">de</name><operator pos:start="3951:23" pos:end="3951:24">-&gt;</operator><name pos:start="3951:25" pos:end="3951:32">d_reclen</name></name> <operator pos:start="3951:34" pos:end="3951:34">=</operator> <call pos:start="3951:36" pos:end="3951:50"><name pos:start="3951:36" pos:end="3951:42">tswap16</name><argument_list pos:start="3951:43" pos:end="3951:50">(<argument pos:start="3951:44" pos:end="3951:49"><expr pos:start="3951:44" pos:end="3951:49"><name pos:start="3951:44" pos:end="3951:49">reclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3953:21" pos:end="3953:40"><expr pos:start="3953:21" pos:end="3953:39"><call pos:start="3953:21" pos:end="3953:39"><name pos:start="3953:21" pos:end="3953:27">tswapls</name><argument_list pos:start="3953:28" pos:end="3953:39">(<argument pos:start="3953:29" pos:end="3953:38"><expr pos:start="3953:29" pos:end="3953:38"><operator pos:start="3953:29" pos:end="3953:29">&amp;</operator><name pos:start="3953:30" pos:end="3953:38"><name pos:start="3953:30" pos:end="3953:31">de</name><operator pos:start="3953:32" pos:end="3953:33">-&gt;</operator><name pos:start="3953:34" pos:end="3953:38">d_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3955:21" pos:end="3955:40"><expr pos:start="3955:21" pos:end="3955:39"><call pos:start="3955:21" pos:end="3955:39"><name pos:start="3955:21" pos:end="3955:27">tswapls</name><argument_list pos:start="3955:28" pos:end="3955:39">(<argument pos:start="3955:29" pos:end="3955:38"><expr pos:start="3955:29" pos:end="3955:38"><operator pos:start="3955:29" pos:end="3955:29">&amp;</operator><name pos:start="3955:30" pos:end="3955:38"><name pos:start="3955:30" pos:end="3955:31">de</name><operator pos:start="3955:32" pos:end="3955:33">-&gt;</operator><name pos:start="3955:34" pos:end="3955:38">d_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3957:21" pos:end="3957:70"><expr pos:start="3957:21" pos:end="3957:69"><name pos:start="3957:21" pos:end="3957:22">de</name> <operator pos:start="3957:24" pos:end="3957:24">=</operator> <operator pos:start="3957:26" pos:end="3957:26">(</operator>struct <name pos:start="3957:34" pos:end="3957:45">linux_dirent</name> <operator pos:start="3957:47" pos:end="3957:47">*</operator><operator pos:start="3957:48" pos:end="3957:48">)</operator><operator pos:start="3957:49" pos:end="3957:49">(</operator><operator pos:start="3957:50" pos:end="3957:50">(</operator><name pos:start="3957:51" pos:end="3957:54">char</name> <operator pos:start="3957:56" pos:end="3957:56">*</operator><operator pos:start="3957:57" pos:end="3957:57">)</operator><name pos:start="3957:58" pos:end="3957:59">de</name> <operator pos:start="3957:61" pos:end="3957:61">+</operator> <name pos:start="3957:63" pos:end="3957:68">reclen</name><operator pos:start="3957:69" pos:end="3957:69">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="3959:21" pos:end="3959:34"><expr pos:start="3959:21" pos:end="3959:33"><name pos:start="3959:21" pos:end="3959:23">len</name> <operator pos:start="3959:25" pos:end="3959:26">-=</operator> <name pos:start="3959:28" pos:end="3959:33">reclen</name></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="3965:13" pos:end="3965:41"><expr pos:start="3965:13" pos:end="3965:40"><call pos:start="3965:13" pos:end="3965:40"><name pos:start="3965:13" pos:end="3965:23">unlock_user</name><argument_list pos:start="3965:24" pos:end="3965:40">(<argument pos:start="3965:25" pos:end="3965:28"><expr pos:start="3965:25" pos:end="3965:28"><name pos:start="3965:25" pos:end="3965:28">dirp</name></expr></argument>, <argument pos:start="3965:31" pos:end="3965:34"><expr pos:start="3965:31" pos:end="3965:34"><name pos:start="3965:31" pos:end="3965:34">arg2</name></expr></argument>, <argument pos:start="3965:37" pos:end="3965:39"><expr pos:start="3965:37" pos:end="3965:39"><name pos:start="3965:37" pos:end="3965:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:endif pos:start="3969:1" pos:end="3969:6">#<cpp:directive pos:start="3969:2" pos:end="3969:6">endif</cpp:directive></cpp:endif>

        <break pos:start="3971:9" pos:end="3974:0">break;</break>

<cpp:if pos:start="3973:1" pos:end="3973:61">#<cpp:directive pos:start="3973:2" pos:end="3973:3">if</cpp:directive> <expr pos:start="3973:5" pos:end="3973:61"><call pos:start="3973:5" pos:end="3973:33"><name pos:start="3973:5" pos:end="3973:11">defined</name><argument_list pos:start="3973:12" pos:end="3973:33">(<argument pos:start="3973:13" pos:end="3973:32"><expr pos:start="3973:13" pos:end="3973:32"><name pos:start="3973:13" pos:end="3973:32">TARGET_NR_getdents64</name></expr></argument>)</argument_list></call> <operator pos:start="3973:35" pos:end="3973:36">&amp;&amp;</operator> <call pos:start="3973:38" pos:end="3973:61"><name pos:start="3973:38" pos:end="3973:44">defined</name><argument_list pos:start="3973:45" pos:end="3973:61">(<argument pos:start="3973:46" pos:end="3973:60"><expr pos:start="3973:46" pos:end="3973:60"><name pos:start="3973:46" pos:end="3973:60">__NR_getdents64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="3975:5" pos:end="3975:30">case <expr pos:start="3975:10" pos:end="3975:29"><name pos:start="3975:10" pos:end="3975:29">TARGET_NR_getdents64</name></expr>:</case>

        <block pos:start="3977:9" pos:end="4023:9">{<block_content pos:start="3979:13" pos:end="4021:41">

            <decl_stmt pos:start="3979:13" pos:end="3979:40"><decl pos:start="3979:13" pos:end="3979:39"><type pos:start="3979:13" pos:end="3979:35"><name pos:start="3979:13" pos:end="3979:33"><name pos:start="3979:13" pos:end="3979:18">struct</name> <name pos:start="3979:20" pos:end="3979:33">linux_dirent64</name></name> <modifier pos:start="3979:35" pos:end="3979:35">*</modifier></type><name pos:start="3979:36" pos:end="3979:39">dirp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3981:13" pos:end="3981:34"><decl pos:start="3981:13" pos:end="3981:33"><type pos:start="3981:13" pos:end="3981:20"><name pos:start="3981:13" pos:end="3981:20">abi_long</name></type> <name pos:start="3981:22" pos:end="3981:26">count</name> <init pos:start="3981:28" pos:end="3981:33">= <expr pos:start="3981:30" pos:end="3981:33"><name pos:start="3981:30" pos:end="3981:33">arg3</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="3983:13" pos:end="3985:28"><if pos:start="3983:13" pos:end="3985:28">if <condition pos:start="3983:16" pos:end="3983:66">(<expr pos:start="3983:17" pos:end="3983:65"><operator pos:start="3983:17" pos:end="3983:17">!</operator><operator pos:start="3983:18" pos:end="3983:18">(</operator><name pos:start="3983:19" pos:end="3983:22">dirp</name> <operator pos:start="3983:24" pos:end="3983:24">=</operator> <call pos:start="3983:26" pos:end="3983:64"><name pos:start="3983:26" pos:end="3983:34">lock_user</name><argument_list pos:start="3983:35" pos:end="3983:64">(<argument pos:start="3983:36" pos:end="3983:47"><expr pos:start="3983:36" pos:end="3983:47"><name pos:start="3983:36" pos:end="3983:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3983:50" pos:end="3983:53"><expr pos:start="3983:50" pos:end="3983:53"><name pos:start="3983:50" pos:end="3983:53">arg2</name></expr></argument>, <argument pos:start="3983:56" pos:end="3983:60"><expr pos:start="3983:56" pos:end="3983:60"><name pos:start="3983:56" pos:end="3983:60">count</name></expr></argument>, <argument pos:start="3983:63" pos:end="3983:63"><expr pos:start="3983:63" pos:end="3983:63"><literal type="number" pos:start="3983:63" pos:end="3983:63">0</literal></expr></argument>)</argument_list></call><operator pos:start="3983:65" pos:end="3983:65">)</operator></expr>)</condition><block type="pseudo" pos:start="3985:17" pos:end="3985:28"><block_content pos:start="3985:17" pos:end="3985:28">

                <goto pos:start="3985:17" pos:end="3985:28">goto <name pos:start="3985:22" pos:end="3985:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3987:13" pos:end="3987:63"><expr pos:start="3987:13" pos:end="3987:62"><name pos:start="3987:13" pos:end="3987:15">ret</name> <operator pos:start="3987:17" pos:end="3987:17">=</operator> <call pos:start="3987:19" pos:end="3987:62"><name pos:start="3987:19" pos:end="3987:27">get_errno</name><argument_list pos:start="3987:28" pos:end="3987:62">(<argument pos:start="3987:29" pos:end="3987:61"><expr pos:start="3987:29" pos:end="3987:61"><call pos:start="3987:29" pos:end="3987:61"><name pos:start="3987:29" pos:end="3987:42">sys_getdents64</name><argument_list pos:start="3987:43" pos:end="3987:61">(<argument pos:start="3987:44" pos:end="3987:47"><expr pos:start="3987:44" pos:end="3987:47"><name pos:start="3987:44" pos:end="3987:47">arg1</name></expr></argument>, <argument pos:start="3987:50" pos:end="3987:53"><expr pos:start="3987:50" pos:end="3987:53"><name pos:start="3987:50" pos:end="3987:53">dirp</name></expr></argument>, <argument pos:start="3987:56" pos:end="3987:60"><expr pos:start="3987:56" pos:end="3987:60"><name pos:start="3987:56" pos:end="3987:60">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3989:13" pos:end="4019:13"><if pos:start="3989:13" pos:end="4019:13">if <condition pos:start="3989:16" pos:end="3989:31">(<expr pos:start="3989:17" pos:end="3989:30"><operator pos:start="3989:17" pos:end="3989:17">!</operator><call pos:start="3989:18" pos:end="3989:30"><name pos:start="3989:18" pos:end="3989:25">is_error</name><argument_list pos:start="3989:26" pos:end="3989:30">(<argument pos:start="3989:27" pos:end="3989:29"><expr pos:start="3989:27" pos:end="3989:29"><name pos:start="3989:27" pos:end="3989:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3989:33" pos:end="4019:13">{<block_content pos:start="3991:17" pos:end="4017:17">

                <decl_stmt pos:start="3991:17" pos:end="3991:42"><decl pos:start="3991:17" pos:end="3991:41"><type pos:start="3991:17" pos:end="3991:39"><name pos:start="3991:17" pos:end="3991:37"><name pos:start="3991:17" pos:end="3991:22">struct</name> <name pos:start="3991:24" pos:end="3991:37">linux_dirent64</name></name> <modifier pos:start="3991:39" pos:end="3991:39">*</modifier></type><name pos:start="3991:40" pos:end="3991:41">de</name></decl>;</decl_stmt>

                <decl_stmt pos:start="3993:17" pos:end="3993:30"><decl pos:start="3993:17" pos:end="3993:29"><type pos:start="3993:17" pos:end="3993:19"><name pos:start="3993:17" pos:end="3993:19">int</name></type> <name pos:start="3993:21" pos:end="3993:23">len</name> <init pos:start="3993:25" pos:end="3993:29">= <expr pos:start="3993:27" pos:end="3993:29"><name pos:start="3993:27" pos:end="3993:29">ret</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="3995:17" pos:end="3995:27"><decl pos:start="3995:17" pos:end="3995:26"><type pos:start="3995:17" pos:end="3995:19"><name pos:start="3995:17" pos:end="3995:19">int</name></type> <name pos:start="3995:21" pos:end="3995:26">reclen</name></decl>;</decl_stmt>

                <expr_stmt pos:start="3997:17" pos:end="3997:26"><expr pos:start="3997:17" pos:end="3997:25"><name pos:start="3997:17" pos:end="3997:18">de</name> <operator pos:start="3997:20" pos:end="3997:20">=</operator> <name pos:start="3997:22" pos:end="3997:25">dirp</name></expr>;</expr_stmt>

                <while pos:start="3999:17" pos:end="4017:17">while <condition pos:start="3999:23" pos:end="3999:31">(<expr pos:start="3999:24" pos:end="3999:30"><name pos:start="3999:24" pos:end="3999:26">len</name> <operator pos:start="3999:28" pos:end="3999:28">&gt;</operator> <literal type="number" pos:start="3999:30" pos:end="3999:30">0</literal></expr>)</condition> <block pos:start="3999:33" pos:end="4017:17">{<block_content pos:start="4001:21" pos:end="4015:34">

                    <expr_stmt pos:start="4001:21" pos:end="4001:42"><expr pos:start="4001:21" pos:end="4001:41"><name pos:start="4001:21" pos:end="4001:26">reclen</name> <operator pos:start="4001:28" pos:end="4001:28">=</operator> <name pos:start="4001:30" pos:end="4001:41"><name pos:start="4001:30" pos:end="4001:31">de</name><operator pos:start="4001:32" pos:end="4001:33">-&gt;</operator><name pos:start="4001:34" pos:end="4001:41">d_reclen</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="4003:21" pos:end="4005:30"><if pos:start="4003:21" pos:end="4005:30">if <condition pos:start="4003:24" pos:end="4003:37">(<expr pos:start="4003:25" pos:end="4003:36"><name pos:start="4003:25" pos:end="4003:30">reclen</name> <operator pos:start="4003:32" pos:end="4003:32">&gt;</operator> <name pos:start="4003:34" pos:end="4003:36">len</name></expr>)</condition><block type="pseudo" pos:start="4005:25" pos:end="4005:30"><block_content pos:start="4005:25" pos:end="4005:30">

                        <break pos:start="4005:25" pos:end="4005:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="4007:21" pos:end="4007:51"><expr pos:start="4007:21" pos:end="4007:50"><name pos:start="4007:21" pos:end="4007:32"><name pos:start="4007:21" pos:end="4007:22">de</name><operator pos:start="4007:23" pos:end="4007:24">-&gt;</operator><name pos:start="4007:25" pos:end="4007:32">d_reclen</name></name> <operator pos:start="4007:34" pos:end="4007:34">=</operator> <call pos:start="4007:36" pos:end="4007:50"><name pos:start="4007:36" pos:end="4007:42">tswap16</name><argument_list pos:start="4007:43" pos:end="4007:50">(<argument pos:start="4007:44" pos:end="4007:49"><expr pos:start="4007:44" pos:end="4007:49"><name pos:start="4007:44" pos:end="4007:49">reclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4009:21" pos:end="4009:53"><expr pos:start="4009:21" pos:end="4009:52"><call pos:start="4009:21" pos:end="4009:52"><name pos:start="4009:21" pos:end="4009:28">tswap64s</name><argument_list pos:start="4009:29" pos:end="4009:52">(<argument pos:start="4009:30" pos:end="4009:51"><expr pos:start="4009:30" pos:end="4009:51"><operator pos:start="4009:30" pos:end="4009:30">(</operator><name pos:start="4009:31" pos:end="4009:38">uint64_t</name> <operator pos:start="4009:40" pos:end="4009:40">*</operator><operator pos:start="4009:41" pos:end="4009:41">)</operator><operator pos:start="4009:42" pos:end="4009:42">&amp;</operator><name pos:start="4009:43" pos:end="4009:51"><name pos:start="4009:43" pos:end="4009:44">de</name><operator pos:start="4009:45" pos:end="4009:46">-&gt;</operator><name pos:start="4009:47" pos:end="4009:51">d_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4011:21" pos:end="4011:53"><expr pos:start="4011:21" pos:end="4011:52"><call pos:start="4011:21" pos:end="4011:52"><name pos:start="4011:21" pos:end="4011:28">tswap64s</name><argument_list pos:start="4011:29" pos:end="4011:52">(<argument pos:start="4011:30" pos:end="4011:51"><expr pos:start="4011:30" pos:end="4011:51"><operator pos:start="4011:30" pos:end="4011:30">(</operator><name pos:start="4011:31" pos:end="4011:38">uint64_t</name> <operator pos:start="4011:40" pos:end="4011:40">*</operator><operator pos:start="4011:41" pos:end="4011:41">)</operator><operator pos:start="4011:42" pos:end="4011:42">&amp;</operator><name pos:start="4011:43" pos:end="4011:51"><name pos:start="4011:43" pos:end="4011:44">de</name><operator pos:start="4011:45" pos:end="4011:46">-&gt;</operator><name pos:start="4011:47" pos:end="4011:51">d_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4013:21" pos:end="4013:72"><expr pos:start="4013:21" pos:end="4013:71"><name pos:start="4013:21" pos:end="4013:22">de</name> <operator pos:start="4013:24" pos:end="4013:24">=</operator> <operator pos:start="4013:26" pos:end="4013:26">(</operator>struct <name pos:start="4013:34" pos:end="4013:47">linux_dirent64</name> <operator pos:start="4013:49" pos:end="4013:49">*</operator><operator pos:start="4013:50" pos:end="4013:50">)</operator><operator pos:start="4013:51" pos:end="4013:51">(</operator><operator pos:start="4013:52" pos:end="4013:52">(</operator><name pos:start="4013:53" pos:end="4013:56">char</name> <operator pos:start="4013:58" pos:end="4013:58">*</operator><operator pos:start="4013:59" pos:end="4013:59">)</operator><name pos:start="4013:60" pos:end="4013:61">de</name> <operator pos:start="4013:63" pos:end="4013:63">+</operator> <name pos:start="4013:65" pos:end="4013:70">reclen</name><operator pos:start="4013:71" pos:end="4013:71">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="4015:21" pos:end="4015:34"><expr pos:start="4015:21" pos:end="4015:33"><name pos:start="4015:21" pos:end="4015:23">len</name> <operator pos:start="4015:25" pos:end="4015:26">-=</operator> <name pos:start="4015:28" pos:end="4015:33">reclen</name></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4021:13" pos:end="4021:41"><expr pos:start="4021:13" pos:end="4021:40"><call pos:start="4021:13" pos:end="4021:40"><name pos:start="4021:13" pos:end="4021:23">unlock_user</name><argument_list pos:start="4021:24" pos:end="4021:40">(<argument pos:start="4021:25" pos:end="4021:28"><expr pos:start="4021:25" pos:end="4021:28"><name pos:start="4021:25" pos:end="4021:28">dirp</name></expr></argument>, <argument pos:start="4021:31" pos:end="4021:34"><expr pos:start="4021:31" pos:end="4021:34"><name pos:start="4021:31" pos:end="4021:34">arg2</name></expr></argument>, <argument pos:start="4021:37" pos:end="4021:39"><expr pos:start="4021:37" pos:end="4021:39"><name pos:start="4021:37" pos:end="4021:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4025:9" pos:end="4032:0">break;</break>

<cpp:endif pos:start="4027:1" pos:end="4027:6">#<cpp:directive pos:start="4027:2" pos:end="4027:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="4027:8" pos:end="4027:33">/* TARGET_NR_getdents64 */</comment>

<cpp:if pos:start="4029:1" pos:end="4029:58">#<cpp:directive pos:start="4029:2" pos:end="4029:3">if</cpp:directive> <expr pos:start="4029:5" pos:end="4029:58"><call pos:start="4029:5" pos:end="4029:33"><name pos:start="4029:5" pos:end="4029:11">defined</name><argument_list pos:start="4029:12" pos:end="4029:33">(<argument pos:start="4029:13" pos:end="4029:32"><expr pos:start="4029:13" pos:end="4029:32"><name pos:start="4029:13" pos:end="4029:32">TARGET_NR__newselect</name></expr></argument>)</argument_list></call> <operator pos:start="4029:35" pos:end="4029:36">||</operator> <call pos:start="4029:38" pos:end="4029:58"><name pos:start="4029:38" pos:end="4029:44">defined</name><argument_list pos:start="4029:45" pos:end="4029:58">(<argument pos:start="4029:46" pos:end="4029:57"><expr pos:start="4029:46" pos:end="4029:57"><name pos:start="4029:46" pos:end="4029:57">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="4031:1" pos:end="4031:19">#<cpp:directive pos:start="4031:2" pos:end="4031:6">ifdef</cpp:directive> <name pos:start="4031:8" pos:end="4031:19">TARGET_S390X</name></cpp:ifdef>

    <case pos:start="4033:5" pos:end="4036:0">case <expr pos:start="4033:10" pos:end="4033:25"><name pos:start="4033:10" pos:end="4033:25">TARGET_NR_select</name></expr>:</case>

<cpp:else pos:start="4035:1" pos:end="4035:5">#<cpp:directive pos:start="4035:2" pos:end="4035:5">else</cpp:directive></cpp:else>

    <case pos:start="4037:5" pos:end="4040:0">case <expr pos:start="4037:10" pos:end="4037:29"><name pos:start="4037:10" pos:end="4037:29">TARGET_NR__newselect</name></expr>:</case>

<cpp:endif pos:start="4039:1" pos:end="4039:6">#<cpp:directive pos:start="4039:2" pos:end="4039:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="4041:9" pos:end="4041:54"><expr pos:start="4041:9" pos:end="4041:53"><name pos:start="4041:9" pos:end="4041:11">ret</name> <operator pos:start="4041:13" pos:end="4041:13">=</operator> <call pos:start="4041:15" pos:end="4041:53"><name pos:start="4041:15" pos:end="4041:23">do_select</name><argument_list pos:start="4041:24" pos:end="4041:53">(<argument pos:start="4041:25" pos:end="4041:28"><expr pos:start="4041:25" pos:end="4041:28"><name pos:start="4041:25" pos:end="4041:28">arg1</name></expr></argument>, <argument pos:start="4041:31" pos:end="4041:34"><expr pos:start="4041:31" pos:end="4041:34"><name pos:start="4041:31" pos:end="4041:34">arg2</name></expr></argument>, <argument pos:start="4041:37" pos:end="4041:40"><expr pos:start="4041:37" pos:end="4041:40"><name pos:start="4041:37" pos:end="4041:40">arg3</name></expr></argument>, <argument pos:start="4041:43" pos:end="4041:46"><expr pos:start="4041:43" pos:end="4041:46"><name pos:start="4041:43" pos:end="4041:46">arg4</name></expr></argument>, <argument pos:start="4041:49" pos:end="4041:52"><expr pos:start="4041:49" pos:end="4041:52"><name pos:start="4041:49" pos:end="4041:52">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4043:9" pos:end="4050:0">break;</break>

<cpp:endif pos:start="4045:1" pos:end="4045:6">#<cpp:directive pos:start="4045:2" pos:end="4045:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="4047:1" pos:end="4047:55">#<cpp:directive pos:start="4047:2" pos:end="4047:3">if</cpp:directive> <expr pos:start="4047:5" pos:end="4047:55"><call pos:start="4047:5" pos:end="4047:27"><name pos:start="4047:5" pos:end="4047:11">defined</name><argument_list pos:start="4047:12" pos:end="4047:27">(<argument pos:start="4047:13" pos:end="4047:26"><expr pos:start="4047:13" pos:end="4047:26"><name pos:start="4047:13" pos:end="4047:26">TARGET_NR_poll</name></expr></argument>)</argument_list></call> <operator pos:start="4047:29" pos:end="4047:30">||</operator> <call pos:start="4047:32" pos:end="4047:55"><name pos:start="4047:32" pos:end="4047:38">defined</name><argument_list pos:start="4047:39" pos:end="4047:55">(<argument pos:start="4047:40" pos:end="4047:54"><expr pos:start="4047:40" pos:end="4047:54"><name pos:start="4047:40" pos:end="4047:54">TARGET_NR_ppoll</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="4049:1" pos:end="4049:22"># <cpp:directive pos:start="4049:3" pos:end="4049:7">ifdef</cpp:directive> <name pos:start="4049:9" pos:end="4049:22">TARGET_NR_poll</name></cpp:ifdef>

    <case pos:start="4051:5" pos:end="4056:0">case <expr pos:start="4051:10" pos:end="4051:23"><name pos:start="4051:10" pos:end="4051:23">TARGET_NR_poll</name></expr>:</case>

<cpp:endif pos:start="4053:1" pos:end="4053:7"># <cpp:directive pos:start="4053:3" pos:end="4053:7">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4055:1" pos:end="4055:23"># <cpp:directive pos:start="4055:3" pos:end="4055:7">ifdef</cpp:directive> <name pos:start="4055:9" pos:end="4055:23">TARGET_NR_ppoll</name></cpp:ifdef>

    <case pos:start="4057:5" pos:end="4060:0">case <expr pos:start="4057:10" pos:end="4057:24"><name pos:start="4057:10" pos:end="4057:24">TARGET_NR_ppoll</name></expr>:</case>

<cpp:endif pos:start="4059:1" pos:end="4059:7"># <cpp:directive pos:start="4059:3" pos:end="4059:7">endif</cpp:directive></cpp:endif>

        <block pos:start="4061:9" pos:end="4183:9">{<block_content pos:start="4063:13" pos:end="4181:79">

            <decl_stmt pos:start="4063:13" pos:end="4063:45"><decl pos:start="4063:13" pos:end="4063:44"><type pos:start="4063:13" pos:end="4063:34"><name pos:start="4063:13" pos:end="4063:32"><name pos:start="4063:13" pos:end="4063:18">struct</name> <name pos:start="4063:20" pos:end="4063:32">target_pollfd</name></name> <modifier pos:start="4063:34" pos:end="4063:34">*</modifier></type><name pos:start="4063:35" pos:end="4063:44">target_pfd</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4065:13" pos:end="4065:37"><decl pos:start="4065:13" pos:end="4065:36"><type pos:start="4065:13" pos:end="4065:24"><name pos:start="4065:13" pos:end="4065:20">unsigned</name> <name pos:start="4065:22" pos:end="4065:24">int</name></type> <name pos:start="4065:26" pos:end="4065:29">nfds</name> <init pos:start="4065:31" pos:end="4065:36">= <expr pos:start="4065:33" pos:end="4065:36"><name pos:start="4065:33" pos:end="4065:36">arg2</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="4067:13" pos:end="4067:31"><decl pos:start="4067:13" pos:end="4067:30"><type pos:start="4067:13" pos:end="4067:15"><name pos:start="4067:13" pos:end="4067:15">int</name></type> <name pos:start="4067:17" pos:end="4067:23">timeout</name> <init pos:start="4067:25" pos:end="4067:30">= <expr pos:start="4067:27" pos:end="4067:30"><name pos:start="4067:27" pos:end="4067:30">arg3</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="4069:13" pos:end="4069:31"><decl pos:start="4069:13" pos:end="4069:30"><type pos:start="4069:13" pos:end="4069:27"><name pos:start="4069:13" pos:end="4069:25"><name pos:start="4069:13" pos:end="4069:18">struct</name> <name pos:start="4069:20" pos:end="4069:25">pollfd</name></name> <modifier pos:start="4069:27" pos:end="4069:27">*</modifier></type><name pos:start="4069:28" pos:end="4069:30">pfd</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4071:13" pos:end="4071:27"><decl pos:start="4071:13" pos:end="4071:26"><type pos:start="4071:13" pos:end="4071:24"><name pos:start="4071:13" pos:end="4071:20">unsigned</name> <name pos:start="4071:22" pos:end="4071:24">int</name></type> <name pos:start="4071:26" pos:end="4071:26">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="4075:13" pos:end="4075:95"><expr pos:start="4075:13" pos:end="4075:94"><name pos:start="4075:13" pos:end="4075:22">target_pfd</name> <operator pos:start="4075:24" pos:end="4075:24">=</operator> <call pos:start="4075:26" pos:end="4075:94"><name pos:start="4075:26" pos:end="4075:34">lock_user</name><argument_list pos:start="4075:35" pos:end="4075:94">(<argument pos:start="4075:36" pos:end="4075:47"><expr pos:start="4075:36" pos:end="4075:47"><name pos:start="4075:36" pos:end="4075:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4075:50" pos:end="4075:53"><expr pos:start="4075:50" pos:end="4075:53"><name pos:start="4075:50" pos:end="4075:53">arg1</name></expr></argument>, <argument pos:start="4075:56" pos:end="4075:90"><expr pos:start="4075:56" pos:end="4075:90"><sizeof pos:start="4075:56" pos:end="4075:83">sizeof<argument_list pos:start="4075:62" pos:end="4075:83">(<argument pos:start="4075:63" pos:end="4075:82"><expr pos:start="4075:63" pos:end="4075:82">struct <name pos:start="4075:70" pos:end="4075:82">target_pollfd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4075:85" pos:end="4075:85">*</operator> <name pos:start="4075:87" pos:end="4075:90">nfds</name></expr></argument>, <argument pos:start="4075:93" pos:end="4075:93"><expr pos:start="4075:93" pos:end="4075:93"><literal type="number" pos:start="4075:93" pos:end="4075:93">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4077:13" pos:end="4079:28"><if pos:start="4077:13" pos:end="4079:28">if <condition pos:start="4077:16" pos:end="4077:28">(<expr pos:start="4077:17" pos:end="4077:27"><operator pos:start="4077:17" pos:end="4077:17">!</operator><name pos:start="4077:18" pos:end="4077:27">target_pfd</name></expr>)</condition><block type="pseudo" pos:start="4079:17" pos:end="4079:28"><block_content pos:start="4079:17" pos:end="4079:28">

                <goto pos:start="4079:17" pos:end="4079:28">goto <name pos:start="4079:22" pos:end="4079:27">efault</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="4083:13" pos:end="4083:55"><expr pos:start="4083:13" pos:end="4083:54"><name pos:start="4083:13" pos:end="4083:15">pfd</name> <operator pos:start="4083:17" pos:end="4083:17">=</operator> <call pos:start="4083:19" pos:end="4083:54"><name pos:start="4083:19" pos:end="4083:24">alloca</name><argument_list pos:start="4083:25" pos:end="4083:54">(<argument pos:start="4083:26" pos:end="4083:53"><expr pos:start="4083:26" pos:end="4083:53"><sizeof pos:start="4083:26" pos:end="4083:46">sizeof<argument_list pos:start="4083:32" pos:end="4083:46">(<argument pos:start="4083:33" pos:end="4083:45"><expr pos:start="4083:33" pos:end="4083:45">struct <name pos:start="4083:40" pos:end="4083:45">pollfd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4083:48" pos:end="4083:48">*</operator> <name pos:start="4083:50" pos:end="4083:53">nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="4085:13" pos:end="4096:0">for<control pos:start="4085:16" pos:end="4085:37">(<init pos:start="4085:17" pos:end="4085:22"><expr pos:start="4085:17" pos:end="4085:21"><name pos:start="4085:17" pos:end="4085:17">i</name> <operator pos:start="4085:19" pos:end="4085:19">=</operator> <literal type="number" pos:start="4085:21" pos:end="4085:21">0</literal></expr>;</init> <condition pos:start="4085:24" pos:end="4085:32"><expr pos:start="4085:24" pos:end="4085:31"><name pos:start="4085:24" pos:end="4085:24">i</name> <operator pos:start="4085:26" pos:end="4085:26">&lt;</operator> <name pos:start="4085:28" pos:end="4085:31">nfds</name></expr>;</condition> <incr pos:start="4085:34" pos:end="4085:36"><expr pos:start="4085:34" pos:end="4085:36"><name pos:start="4085:34" pos:end="4085:34">i</name><operator pos:start="4085:35" pos:end="4085:36">++</operator></expr></incr>)</control> <block pos:start="4085:39" pos:end="4096:0">{<block_content pos:start="4087:17" pos:end="4089:62">

                <expr_stmt pos:start="4087:17" pos:end="4087:54"><expr pos:start="4087:17" pos:end="4087:53"><name pos:start="4087:17" pos:end="4087:22"><name pos:start="4087:17" pos:end="4087:19">pfd</name><index pos:start="4087:20" pos:end="4087:22">[<expr pos:start="4087:21" pos:end="4087:21"><name pos:start="4087:21" pos:end="4087:21">i</name></expr>]</index></name><operator pos:start="4087:23" pos:end="4087:23">.</operator><name pos:start="4087:24" pos:end="4087:25">fd</name> <operator pos:start="4087:27" pos:end="4087:27">=</operator> <call pos:start="4087:29" pos:end="4087:53"><name pos:start="4087:29" pos:end="4087:35">tswap32</name><argument_list pos:start="4087:36" pos:end="4087:53">(<argument pos:start="4087:37" pos:end="4087:52"><expr pos:start="4087:37" pos:end="4087:52"><name pos:start="4087:37" pos:end="4087:49"><name pos:start="4087:37" pos:end="4087:46">target_pfd</name><index pos:start="4087:47" pos:end="4087:49">[<expr pos:start="4087:48" pos:end="4087:48"><name pos:start="4087:48" pos:end="4087:48">i</name></expr>]</index></name><operator pos:start="4087:50" pos:end="4087:50">.</operator><name pos:start="4087:51" pos:end="4087:52">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4089:17" pos:end="4089:62"><expr pos:start="4089:17" pos:end="4089:61"><name pos:start="4089:17" pos:end="4089:22"><name pos:start="4089:17" pos:end="4089:19">pfd</name><index pos:start="4089:20" pos:end="4089:22">[<expr pos:start="4089:21" pos:end="4089:21"><name pos:start="4089:21" pos:end="4089:21">i</name></expr>]</index></name><operator pos:start="4089:23" pos:end="4089:23">.</operator><name pos:start="4089:24" pos:end="4089:29">events</name> <operator pos:start="4089:31" pos:end="4089:31">=</operator> <call pos:start="4089:33" pos:end="4089:61"><name pos:start="4089:33" pos:end="4089:39">tswap16</name><argument_list pos:start="4089:40" pos:end="4089:61">(<argument pos:start="4089:41" pos:end="4089:60"><expr pos:start="4089:41" pos:end="4089:60"><name pos:start="4089:41" pos:end="4089:53"><name pos:start="4089:41" pos:end="4089:50">target_pfd</name><index pos:start="4089:51" pos:end="4089:53">[<expr pos:start="4089:52" pos:end="4089:52"><name pos:start="4089:52" pos:end="4089:52">i</name></expr>]</index></name><operator pos:start="4089:54" pos:end="4089:54">.</operator><name pos:start="4089:55" pos:end="4089:60">events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



<cpp:ifdef pos:start="4095:1" pos:end="4095:23"># <cpp:directive pos:start="4095:3" pos:end="4095:7">ifdef</cpp:directive> <name pos:start="4095:9" pos:end="4095:23">TARGET_NR_ppoll</name></cpp:ifdef>

            <if_stmt pos:start="4097:13" pos:end="4167:58"><if pos:start="4097:13" pos:end="4163:13">if <condition pos:start="4097:16" pos:end="4097:39">(<expr pos:start="4097:17" pos:end="4097:38"><name pos:start="4097:17" pos:end="4097:19">num</name> <operator pos:start="4097:21" pos:end="4097:22">==</operator> <name pos:start="4097:24" pos:end="4097:38">TARGET_NR_ppoll</name></expr>)</condition> <block pos:start="4097:41" pos:end="4163:13">{<block_content pos:start="4099:17" pos:end="4161:17">

                <decl_stmt pos:start="4099:17" pos:end="4099:72"><decl pos:start="4099:17" pos:end="4099:43"><type pos:start="4099:17" pos:end="4099:31"><name pos:start="4099:17" pos:end="4099:31"><name pos:start="4099:17" pos:end="4099:22">struct</name> <name pos:start="4099:24" pos:end="4099:31">timespec</name></name></type> <name pos:start="4099:33" pos:end="4099:43">_timeout_ts</name></decl>, <decl pos:start="4099:46" pos:end="4099:71"><type ref="prev" pos:start="4099:17" pos:end="4099:31"><modifier pos:start="4099:46" pos:end="4099:46">*</modifier></type><name pos:start="4099:47" pos:end="4099:56">timeout_ts</name> <init pos:start="4099:58" pos:end="4099:71">= <expr pos:start="4099:60" pos:end="4099:71"><operator pos:start="4099:60" pos:end="4099:60">&amp;</operator><name pos:start="4099:61" pos:end="4099:71">_timeout_ts</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="4101:17" pos:end="4101:44"><decl pos:start="4101:17" pos:end="4101:43"><type pos:start="4101:17" pos:end="4101:33"><name pos:start="4101:17" pos:end="4101:31">target_sigset_t</name> <modifier pos:start="4101:33" pos:end="4101:33">*</modifier></type><name pos:start="4101:34" pos:end="4101:43">target_set</name></decl>;</decl_stmt>

                <decl_stmt pos:start="4103:17" pos:end="4103:44"><decl pos:start="4103:17" pos:end="4103:29"><type pos:start="4103:17" pos:end="4103:24"><name pos:start="4103:17" pos:end="4103:24">sigset_t</name></type> <name pos:start="4103:26" pos:end="4103:29">_set</name></decl>, <decl pos:start="4103:32" pos:end="4103:43"><type ref="prev" pos:start="4103:17" pos:end="4103:24"><modifier pos:start="4103:32" pos:end="4103:32">*</modifier></type><name pos:start="4103:33" pos:end="4103:35">set</name> <init pos:start="4103:37" pos:end="4103:43">= <expr pos:start="4103:39" pos:end="4103:43"><operator pos:start="4103:39" pos:end="4103:39">&amp;</operator><name pos:start="4103:40" pos:end="4103:43">_set</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="4107:17" pos:end="4121:17"><if pos:start="4107:17" pos:end="4117:17">if <condition pos:start="4107:20" pos:end="4107:25">(<expr pos:start="4107:21" pos:end="4107:24"><name pos:start="4107:21" pos:end="4107:24">arg3</name></expr>)</condition> <block pos:start="4107:27" pos:end="4117:17">{<block_content pos:start="4109:21" pos:end="4115:21">

                    <if_stmt pos:start="4109:21" pos:end="4115:21"><if pos:start="4109:21" pos:end="4115:21">if <condition pos:start="4109:24" pos:end="4109:66">(<expr pos:start="4109:25" pos:end="4109:65"><call pos:start="4109:25" pos:end="4109:65"><name pos:start="4109:25" pos:end="4109:47">target_to_host_timespec</name><argument_list pos:start="4109:48" pos:end="4109:65">(<argument pos:start="4109:49" pos:end="4109:58"><expr pos:start="4109:49" pos:end="4109:58"><name pos:start="4109:49" pos:end="4109:58">timeout_ts</name></expr></argument>, <argument pos:start="4109:61" pos:end="4109:64"><expr pos:start="4109:61" pos:end="4109:64"><name pos:start="4109:61" pos:end="4109:64">arg3</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4109:68" pos:end="4115:21">{<block_content pos:start="4111:25" pos:end="4113:36">

                        <expr_stmt pos:start="4111:25" pos:end="4111:57"><expr pos:start="4111:25" pos:end="4111:56"><call pos:start="4111:25" pos:end="4111:56"><name pos:start="4111:25" pos:end="4111:35">unlock_user</name><argument_list pos:start="4111:36" pos:end="4111:56">(<argument pos:start="4111:37" pos:end="4111:46"><expr pos:start="4111:37" pos:end="4111:46"><name pos:start="4111:37" pos:end="4111:46">target_pfd</name></expr></argument>, <argument pos:start="4111:49" pos:end="4111:52"><expr pos:start="4111:49" pos:end="4111:52"><name pos:start="4111:49" pos:end="4111:52">arg1</name></expr></argument>, <argument pos:start="4111:55" pos:end="4111:55"><expr pos:start="4111:55" pos:end="4111:55"><literal type="number" pos:start="4111:55" pos:end="4111:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="4113:25" pos:end="4113:36">goto <name pos:start="4113:30" pos:end="4113:35">efault</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="4117:19" pos:end="4121:17">else <block pos:start="4117:24" pos:end="4121:17">{<block_content pos:start="4119:21" pos:end="4119:38">

                    <expr_stmt pos:start="4119:21" pos:end="4119:38"><expr pos:start="4119:21" pos:end="4119:37"><name pos:start="4119:21" pos:end="4119:30">timeout_ts</name> <operator pos:start="4119:32" pos:end="4119:32">=</operator> <name pos:start="4119:34" pos:end="4119:37">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="4125:17" pos:end="4143:17"><if pos:start="4125:17" pos:end="4139:17">if <condition pos:start="4125:20" pos:end="4125:25">(<expr pos:start="4125:21" pos:end="4125:24"><name pos:start="4125:21" pos:end="4125:24">arg4</name></expr>)</condition> <block pos:start="4125:27" pos:end="4139:17">{<block_content pos:start="4127:21" pos:end="4137:59">

                    <expr_stmt pos:start="4127:21" pos:end="4127:90"><expr pos:start="4127:21" pos:end="4127:89"><name pos:start="4127:21" pos:end="4127:30">target_set</name> <operator pos:start="4127:32" pos:end="4127:32">=</operator> <call pos:start="4127:34" pos:end="4127:89"><name pos:start="4127:34" pos:end="4127:42">lock_user</name><argument_list pos:start="4127:43" pos:end="4127:89">(<argument pos:start="4127:44" pos:end="4127:54"><expr pos:start="4127:44" pos:end="4127:54"><name pos:start="4127:44" pos:end="4127:54">VERIFY_READ</name></expr></argument>, <argument pos:start="4127:57" pos:end="4127:60"><expr pos:start="4127:57" pos:end="4127:60"><name pos:start="4127:57" pos:end="4127:60">arg4</name></expr></argument>, <argument pos:start="4127:63" pos:end="4127:85"><expr pos:start="4127:63" pos:end="4127:85"><sizeof pos:start="4127:63" pos:end="4127:85">sizeof<argument_list pos:start="4127:69" pos:end="4127:85">(<argument pos:start="4127:70" pos:end="4127:84"><expr pos:start="4127:70" pos:end="4127:84"><name pos:start="4127:70" pos:end="4127:84">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="4127:88" pos:end="4127:88"><expr pos:start="4127:88" pos:end="4127:88"><literal type="number" pos:start="4127:88" pos:end="4127:88">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="4129:21" pos:end="4135:21"><if pos:start="4129:21" pos:end="4135:21">if <condition pos:start="4129:24" pos:end="4129:36">(<expr pos:start="4129:25" pos:end="4129:35"><operator pos:start="4129:25" pos:end="4129:25">!</operator><name pos:start="4129:26" pos:end="4129:35">target_set</name></expr>)</condition> <block pos:start="4129:38" pos:end="4135:21">{<block_content pos:start="4131:25" pos:end="4133:36">

                        <expr_stmt pos:start="4131:25" pos:end="4131:57"><expr pos:start="4131:25" pos:end="4131:56"><call pos:start="4131:25" pos:end="4131:56"><name pos:start="4131:25" pos:end="4131:35">unlock_user</name><argument_list pos:start="4131:36" pos:end="4131:56">(<argument pos:start="4131:37" pos:end="4131:46"><expr pos:start="4131:37" pos:end="4131:46"><name pos:start="4131:37" pos:end="4131:46">target_pfd</name></expr></argument>, <argument pos:start="4131:49" pos:end="4131:52"><expr pos:start="4131:49" pos:end="4131:52"><name pos:start="4131:49" pos:end="4131:52">arg1</name></expr></argument>, <argument pos:start="4131:55" pos:end="4131:55"><expr pos:start="4131:55" pos:end="4131:55"><literal type="number" pos:start="4131:55" pos:end="4131:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="4133:25" pos:end="4133:36">goto <name pos:start="4133:30" pos:end="4133:35">efault</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="4137:21" pos:end="4137:59"><expr pos:start="4137:21" pos:end="4137:58"><call pos:start="4137:21" pos:end="4137:58"><name pos:start="4137:21" pos:end="4137:41">target_to_host_sigset</name><argument_list pos:start="4137:42" pos:end="4137:58">(<argument pos:start="4137:43" pos:end="4137:45"><expr pos:start="4137:43" pos:end="4137:45"><name pos:start="4137:43" pos:end="4137:45">set</name></expr></argument>, <argument pos:start="4137:48" pos:end="4137:57"><expr pos:start="4137:48" pos:end="4137:57"><name pos:start="4137:48" pos:end="4137:57">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4139:19" pos:end="4143:17">else <block pos:start="4139:24" pos:end="4143:17">{<block_content pos:start="4141:21" pos:end="4141:31">

                    <expr_stmt pos:start="4141:21" pos:end="4141:31"><expr pos:start="4141:21" pos:end="4141:30"><name pos:start="4141:21" pos:end="4141:23">set</name> <operator pos:start="4141:25" pos:end="4141:25">=</operator> <name pos:start="4141:27" pos:end="4141:30">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="4147:17" pos:end="4147:80"><expr pos:start="4147:17" pos:end="4147:79"><name pos:start="4147:17" pos:end="4147:19">ret</name> <operator pos:start="4147:21" pos:end="4147:21">=</operator> <call pos:start="4147:23" pos:end="4147:79"><name pos:start="4147:23" pos:end="4147:31">get_errno</name><argument_list pos:start="4147:32" pos:end="4147:79">(<argument pos:start="4147:33" pos:end="4147:78"><expr pos:start="4147:33" pos:end="4147:78"><call pos:start="4147:33" pos:end="4147:78"><name pos:start="4147:33" pos:end="4147:41">sys_ppoll</name><argument_list pos:start="4147:42" pos:end="4147:78">(<argument pos:start="4147:43" pos:end="4147:45"><expr pos:start="4147:43" pos:end="4147:45"><name pos:start="4147:43" pos:end="4147:45">pfd</name></expr></argument>, <argument pos:start="4147:48" pos:end="4147:51"><expr pos:start="4147:48" pos:end="4147:51"><name pos:start="4147:48" pos:end="4147:51">nfds</name></expr></argument>, <argument pos:start="4147:54" pos:end="4147:63"><expr pos:start="4147:54" pos:end="4147:63"><name pos:start="4147:54" pos:end="4147:63">timeout_ts</name></expr></argument>, <argument pos:start="4147:66" pos:end="4147:68"><expr pos:start="4147:66" pos:end="4147:68"><name pos:start="4147:66" pos:end="4147:68">set</name></expr></argument>, <argument pos:start="4147:71" pos:end="4147:77"><expr pos:start="4147:71" pos:end="4147:77"><name pos:start="4147:71" pos:end="4147:75">_NSIG</name><operator pos:start="4147:76" pos:end="4147:76">/</operator><literal type="number" pos:start="4147:77" pos:end="4147:77">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="4151:17" pos:end="4155:17"><if pos:start="4151:17" pos:end="4155:17">if <condition pos:start="4151:20" pos:end="4151:43">(<expr pos:start="4151:21" pos:end="4151:42"><operator pos:start="4151:21" pos:end="4151:21">!</operator><call pos:start="4151:22" pos:end="4151:34"><name pos:start="4151:22" pos:end="4151:29">is_error</name><argument_list pos:start="4151:30" pos:end="4151:34">(<argument pos:start="4151:31" pos:end="4151:33"><expr pos:start="4151:31" pos:end="4151:33"><name pos:start="4151:31" pos:end="4151:33">ret</name></expr></argument>)</argument_list></call> <operator pos:start="4151:36" pos:end="4151:37">&amp;&amp;</operator> <name pos:start="4151:39" pos:end="4151:42">arg3</name></expr>)</condition> <block pos:start="4151:45" pos:end="4155:17">{<block_content pos:start="4153:21" pos:end="4153:62">

                    <expr_stmt pos:start="4153:21" pos:end="4153:62"><expr pos:start="4153:21" pos:end="4153:61"><call pos:start="4153:21" pos:end="4153:61"><name pos:start="4153:21" pos:end="4153:43">host_to_target_timespec</name><argument_list pos:start="4153:44" pos:end="4153:61">(<argument pos:start="4153:45" pos:end="4153:48"><expr pos:start="4153:45" pos:end="4153:48"><name pos:start="4153:45" pos:end="4153:48">arg3</name></expr></argument>, <argument pos:start="4153:51" pos:end="4153:60"><expr pos:start="4153:51" pos:end="4153:60"><name pos:start="4153:51" pos:end="4153:60">timeout_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="4157:17" pos:end="4161:17"><if pos:start="4157:17" pos:end="4161:17">if <condition pos:start="4157:20" pos:end="4157:25">(<expr pos:start="4157:21" pos:end="4157:24"><name pos:start="4157:21" pos:end="4157:24">arg4</name></expr>)</condition> <block pos:start="4157:27" pos:end="4161:17">{<block_content pos:start="4159:21" pos:end="4159:53">

                    <expr_stmt pos:start="4159:21" pos:end="4159:53"><expr pos:start="4159:21" pos:end="4159:52"><call pos:start="4159:21" pos:end="4159:52"><name pos:start="4159:21" pos:end="4159:31">unlock_user</name><argument_list pos:start="4159:32" pos:end="4159:52">(<argument pos:start="4159:33" pos:end="4159:42"><expr pos:start="4159:33" pos:end="4159:42"><name pos:start="4159:33" pos:end="4159:42">target_set</name></expr></argument>, <argument pos:start="4159:45" pos:end="4159:48"><expr pos:start="4159:45" pos:end="4159:48"><name pos:start="4159:45" pos:end="4159:48">arg4</name></expr></argument>, <argument pos:start="4159:51" pos:end="4159:51"><expr pos:start="4159:51" pos:end="4159:51"><literal type="number" pos:start="4159:51" pos:end="4159:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="4163:15" pos:end="4167:58">else<block type="pseudo" pos:start="4167:17" pos:end="4167:58"><block_content pos:start="4167:17" pos:end="4167:58">

<cpp:endif pos:start="4165:1" pos:end="4165:7"># <cpp:directive pos:start="4165:3" pos:end="4165:7">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="4167:17" pos:end="4167:58"><expr pos:start="4167:17" pos:end="4167:57"><name pos:start="4167:17" pos:end="4167:19">ret</name> <operator pos:start="4167:21" pos:end="4167:21">=</operator> <call pos:start="4167:23" pos:end="4167:57"><name pos:start="4167:23" pos:end="4167:31">get_errno</name><argument_list pos:start="4167:32" pos:end="4167:57">(<argument pos:start="4167:33" pos:end="4167:56"><expr pos:start="4167:33" pos:end="4167:56"><call pos:start="4167:33" pos:end="4167:56"><name pos:start="4167:33" pos:end="4167:36">poll</name><argument_list pos:start="4167:37" pos:end="4167:56">(<argument pos:start="4167:38" pos:end="4167:40"><expr pos:start="4167:38" pos:end="4167:40"><name pos:start="4167:38" pos:end="4167:40">pfd</name></expr></argument>, <argument pos:start="4167:43" pos:end="4167:46"><expr pos:start="4167:43" pos:end="4167:46"><name pos:start="4167:43" pos:end="4167:46">nfds</name></expr></argument>, <argument pos:start="4167:49" pos:end="4167:55"><expr pos:start="4167:49" pos:end="4167:55"><name pos:start="4167:49" pos:end="4167:55">timeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="4171:13" pos:end="4179:13"><if pos:start="4171:13" pos:end="4179:13">if <condition pos:start="4171:16" pos:end="4171:31">(<expr pos:start="4171:17" pos:end="4171:30"><operator pos:start="4171:17" pos:end="4171:17">!</operator><call pos:start="4171:18" pos:end="4171:30"><name pos:start="4171:18" pos:end="4171:25">is_error</name><argument_list pos:start="4171:26" pos:end="4171:30">(<argument pos:start="4171:27" pos:end="4171:29"><expr pos:start="4171:27" pos:end="4171:29"><name pos:start="4171:27" pos:end="4171:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4171:33" pos:end="4179:13">{<block_content pos:start="4173:17" pos:end="4177:17">

                <for pos:start="4173:17" pos:end="4177:17">for<control pos:start="4173:20" pos:end="4173:41">(<init pos:start="4173:21" pos:end="4173:26"><expr pos:start="4173:21" pos:end="4173:25"><name pos:start="4173:21" pos:end="4173:21">i</name> <operator pos:start="4173:23" pos:end="4173:23">=</operator> <literal type="number" pos:start="4173:25" pos:end="4173:25">0</literal></expr>;</init> <condition pos:start="4173:28" pos:end="4173:36"><expr pos:start="4173:28" pos:end="4173:35"><name pos:start="4173:28" pos:end="4173:28">i</name> <operator pos:start="4173:30" pos:end="4173:30">&lt;</operator> <name pos:start="4173:32" pos:end="4173:35">nfds</name></expr>;</condition> <incr pos:start="4173:38" pos:end="4173:40"><expr pos:start="4173:38" pos:end="4173:40"><name pos:start="4173:38" pos:end="4173:38">i</name><operator pos:start="4173:39" pos:end="4173:40">++</operator></expr></incr>)</control> <block pos:start="4173:43" pos:end="4177:17">{<block_content pos:start="4175:21" pos:end="4175:68">

                    <expr_stmt pos:start="4175:21" pos:end="4175:68"><expr pos:start="4175:21" pos:end="4175:67"><name pos:start="4175:21" pos:end="4175:33"><name pos:start="4175:21" pos:end="4175:30">target_pfd</name><index pos:start="4175:31" pos:end="4175:33">[<expr pos:start="4175:32" pos:end="4175:32"><name pos:start="4175:32" pos:end="4175:32">i</name></expr>]</index></name><operator pos:start="4175:34" pos:end="4175:34">.</operator><name pos:start="4175:35" pos:end="4175:41">revents</name> <operator pos:start="4175:43" pos:end="4175:43">=</operator> <call pos:start="4175:45" pos:end="4175:67"><name pos:start="4175:45" pos:end="4175:51">tswap16</name><argument_list pos:start="4175:52" pos:end="4175:67">(<argument pos:start="4175:53" pos:end="4175:66"><expr pos:start="4175:53" pos:end="4175:66"><name pos:start="4175:53" pos:end="4175:58"><name pos:start="4175:53" pos:end="4175:55">pfd</name><index pos:start="4175:56" pos:end="4175:58">[<expr pos:start="4175:57" pos:end="4175:57"><name pos:start="4175:57" pos:end="4175:57">i</name></expr>]</index></name><operator pos:start="4175:59" pos:end="4175:59">.</operator><name pos:start="4175:60" pos:end="4175:66">revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4181:13" pos:end="4181:79"><expr pos:start="4181:13" pos:end="4181:78"><call pos:start="4181:13" pos:end="4181:78"><name pos:start="4181:13" pos:end="4181:23">unlock_user</name><argument_list pos:start="4181:24" pos:end="4181:78">(<argument pos:start="4181:25" pos:end="4181:34"><expr pos:start="4181:25" pos:end="4181:34"><name pos:start="4181:25" pos:end="4181:34">target_pfd</name></expr></argument>, <argument pos:start="4181:37" pos:end="4181:40"><expr pos:start="4181:37" pos:end="4181:40"><name pos:start="4181:37" pos:end="4181:40">arg1</name></expr></argument>, <argument pos:start="4181:43" pos:end="4181:77"><expr pos:start="4181:43" pos:end="4181:77"><sizeof pos:start="4181:43" pos:end="4181:70">sizeof<argument_list pos:start="4181:49" pos:end="4181:70">(<argument pos:start="4181:50" pos:end="4181:69"><expr pos:start="4181:50" pos:end="4181:69">struct <name pos:start="4181:57" pos:end="4181:69">target_pollfd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4181:72" pos:end="4181:72">*</operator> <name pos:start="4181:74" pos:end="4181:77">nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4185:9" pos:end="4188:0">break;</break>

<cpp:endif pos:start="4187:1" pos:end="4187:6">#<cpp:directive pos:start="4187:2" pos:end="4187:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4189:5" pos:end="4189:25">case <expr pos:start="4189:10" pos:end="4189:24"><name pos:start="4189:10" pos:end="4189:24">TARGET_NR_flock</name></expr>:</case>

        <comment type="block" pos:start="4191:9" pos:end="4193:28">/* NOTE: the flock constant seems to be the same for every

           Linux platform */</comment>

        <expr_stmt pos:start="4195:9" pos:end="4195:43"><expr pos:start="4195:9" pos:end="4195:42"><name pos:start="4195:9" pos:end="4195:11">ret</name> <operator pos:start="4195:13" pos:end="4195:13">=</operator> <call pos:start="4195:15" pos:end="4195:42"><name pos:start="4195:15" pos:end="4195:23">get_errno</name><argument_list pos:start="4195:24" pos:end="4195:42">(<argument pos:start="4195:25" pos:end="4195:41"><expr pos:start="4195:25" pos:end="4195:41"><call pos:start="4195:25" pos:end="4195:41"><name pos:start="4195:25" pos:end="4195:29">flock</name><argument_list pos:start="4195:30" pos:end="4195:41">(<argument pos:start="4195:31" pos:end="4195:34"><expr pos:start="4195:31" pos:end="4195:34"><name pos:start="4195:31" pos:end="4195:34">arg1</name></expr></argument>, <argument pos:start="4195:37" pos:end="4195:40"><expr pos:start="4195:37" pos:end="4195:40"><name pos:start="4195:37" pos:end="4195:40">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4197:9" pos:end="4197:14">break;</break>

    <case pos:start="4199:5" pos:end="4199:25">case <expr pos:start="4199:10" pos:end="4199:24"><name pos:start="4199:10" pos:end="4199:24">TARGET_NR_readv</name></expr>:</case>

        <block pos:start="4201:9" pos:end="4219:9">{<block_content pos:start="4203:13" pos:end="4217:46">

            <decl_stmt pos:start="4203:13" pos:end="4203:29"><decl pos:start="4203:13" pos:end="4203:28"><type pos:start="4203:13" pos:end="4203:15"><name pos:start="4203:13" pos:end="4203:15">int</name></type> <name pos:start="4203:17" pos:end="4203:21">count</name> <init pos:start="4203:23" pos:end="4203:28">= <expr pos:start="4203:25" pos:end="4203:28"><name pos:start="4203:25" pos:end="4203:28">arg3</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="4205:13" pos:end="4205:30"><decl pos:start="4205:13" pos:end="4205:29"><type pos:start="4205:13" pos:end="4205:26"><name pos:start="4205:13" pos:end="4205:24"><name pos:start="4205:13" pos:end="4205:18">struct</name> <name pos:start="4205:20" pos:end="4205:24">iovec</name></name> <modifier pos:start="4205:26" pos:end="4205:26">*</modifier></type><name pos:start="4205:27" pos:end="4205:29">vec</name></decl>;</decl_stmt>



            <expr_stmt pos:start="4209:13" pos:end="4209:55"><expr pos:start="4209:13" pos:end="4209:54"><name pos:start="4209:13" pos:end="4209:15">vec</name> <operator pos:start="4209:17" pos:end="4209:17">=</operator> <call pos:start="4209:19" pos:end="4209:54"><name pos:start="4209:19" pos:end="4209:24">alloca</name><argument_list pos:start="4209:25" pos:end="4209:54">(<argument pos:start="4209:26" pos:end="4209:53"><expr pos:start="4209:26" pos:end="4209:53"><name pos:start="4209:26" pos:end="4209:30">count</name> <operator pos:start="4209:32" pos:end="4209:32">*</operator> <sizeof pos:start="4209:34" pos:end="4209:53">sizeof<argument_list pos:start="4209:40" pos:end="4209:53">(<argument pos:start="4209:41" pos:end="4209:52"><expr pos:start="4209:41" pos:end="4209:52">struct <name pos:start="4209:48" pos:end="4209:52">iovec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4211:13" pos:end="4213:28"><if pos:start="4211:13" pos:end="4213:28">if <condition pos:start="4211:16" pos:end="4211:66">(<expr pos:start="4211:17" pos:end="4211:65"><call pos:start="4211:17" pos:end="4211:61"><name pos:start="4211:17" pos:end="4211:26">lock_iovec</name><argument_list pos:start="4211:27" pos:end="4211:61">(<argument pos:start="4211:28" pos:end="4211:39"><expr pos:start="4211:28" pos:end="4211:39"><name pos:start="4211:28" pos:end="4211:39">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4211:42" pos:end="4211:44"><expr pos:start="4211:42" pos:end="4211:44"><name pos:start="4211:42" pos:end="4211:44">vec</name></expr></argument>, <argument pos:start="4211:47" pos:end="4211:50"><expr pos:start="4211:47" pos:end="4211:50"><name pos:start="4211:47" pos:end="4211:50">arg2</name></expr></argument>, <argument pos:start="4211:53" pos:end="4211:57"><expr pos:start="4211:53" pos:end="4211:57"><name pos:start="4211:53" pos:end="4211:57">count</name></expr></argument>, <argument pos:start="4211:60" pos:end="4211:60"><expr pos:start="4211:60" pos:end="4211:60"><literal type="number" pos:start="4211:60" pos:end="4211:60">0</literal></expr></argument>)</argument_list></call> <operator pos:start="4211:63" pos:end="4211:63">&lt;</operator> <literal type="number" pos:start="4211:65" pos:end="4211:65">0</literal></expr>)</condition><block type="pseudo" pos:start="4213:17" pos:end="4213:28"><block_content pos:start="4213:17" pos:end="4213:28">

                <goto pos:start="4213:17" pos:end="4213:28">goto <name pos:start="4213:22" pos:end="4213:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4215:13" pos:end="4215:53"><expr pos:start="4215:13" pos:end="4215:52"><name pos:start="4215:13" pos:end="4215:15">ret</name> <operator pos:start="4215:17" pos:end="4215:17">=</operator> <call pos:start="4215:19" pos:end="4215:52"><name pos:start="4215:19" pos:end="4215:27">get_errno</name><argument_list pos:start="4215:28" pos:end="4215:52">(<argument pos:start="4215:29" pos:end="4215:51"><expr pos:start="4215:29" pos:end="4215:51"><call pos:start="4215:29" pos:end="4215:51"><name pos:start="4215:29" pos:end="4215:33">readv</name><argument_list pos:start="4215:34" pos:end="4215:51">(<argument pos:start="4215:35" pos:end="4215:38"><expr pos:start="4215:35" pos:end="4215:38"><name pos:start="4215:35" pos:end="4215:38">arg1</name></expr></argument>, <argument pos:start="4215:41" pos:end="4215:43"><expr pos:start="4215:41" pos:end="4215:43"><name pos:start="4215:41" pos:end="4215:43">vec</name></expr></argument>, <argument pos:start="4215:46" pos:end="4215:50"><expr pos:start="4215:46" pos:end="4215:50"><name pos:start="4215:46" pos:end="4215:50">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4217:13" pos:end="4217:46"><expr pos:start="4217:13" pos:end="4217:45"><call pos:start="4217:13" pos:end="4217:45"><name pos:start="4217:13" pos:end="4217:24">unlock_iovec</name><argument_list pos:start="4217:25" pos:end="4217:45">(<argument pos:start="4217:26" pos:end="4217:28"><expr pos:start="4217:26" pos:end="4217:28"><name pos:start="4217:26" pos:end="4217:28">vec</name></expr></argument>, <argument pos:start="4217:31" pos:end="4217:34"><expr pos:start="4217:31" pos:end="4217:34"><name pos:start="4217:31" pos:end="4217:34">arg2</name></expr></argument>, <argument pos:start="4217:37" pos:end="4217:41"><expr pos:start="4217:37" pos:end="4217:41"><name pos:start="4217:37" pos:end="4217:41">count</name></expr></argument>, <argument pos:start="4217:44" pos:end="4217:44"><expr pos:start="4217:44" pos:end="4217:44"><literal type="number" pos:start="4217:44" pos:end="4217:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4221:9" pos:end="4221:14">break;</break>

    <case pos:start="4223:5" pos:end="4223:26">case <expr pos:start="4223:10" pos:end="4223:25"><name pos:start="4223:10" pos:end="4223:25">TARGET_NR_writev</name></expr>:</case>

        <block pos:start="4225:9" pos:end="4243:9">{<block_content pos:start="4227:13" pos:end="4241:46">

            <decl_stmt pos:start="4227:13" pos:end="4227:29"><decl pos:start="4227:13" pos:end="4227:28"><type pos:start="4227:13" pos:end="4227:15"><name pos:start="4227:13" pos:end="4227:15">int</name></type> <name pos:start="4227:17" pos:end="4227:21">count</name> <init pos:start="4227:23" pos:end="4227:28">= <expr pos:start="4227:25" pos:end="4227:28"><name pos:start="4227:25" pos:end="4227:28">arg3</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="4229:13" pos:end="4229:30"><decl pos:start="4229:13" pos:end="4229:29"><type pos:start="4229:13" pos:end="4229:26"><name pos:start="4229:13" pos:end="4229:24"><name pos:start="4229:13" pos:end="4229:18">struct</name> <name pos:start="4229:20" pos:end="4229:24">iovec</name></name> <modifier pos:start="4229:26" pos:end="4229:26">*</modifier></type><name pos:start="4229:27" pos:end="4229:29">vec</name></decl>;</decl_stmt>



            <expr_stmt pos:start="4233:13" pos:end="4233:55"><expr pos:start="4233:13" pos:end="4233:54"><name pos:start="4233:13" pos:end="4233:15">vec</name> <operator pos:start="4233:17" pos:end="4233:17">=</operator> <call pos:start="4233:19" pos:end="4233:54"><name pos:start="4233:19" pos:end="4233:24">alloca</name><argument_list pos:start="4233:25" pos:end="4233:54">(<argument pos:start="4233:26" pos:end="4233:53"><expr pos:start="4233:26" pos:end="4233:53"><name pos:start="4233:26" pos:end="4233:30">count</name> <operator pos:start="4233:32" pos:end="4233:32">*</operator> <sizeof pos:start="4233:34" pos:end="4233:53">sizeof<argument_list pos:start="4233:40" pos:end="4233:53">(<argument pos:start="4233:41" pos:end="4233:52"><expr pos:start="4233:41" pos:end="4233:52">struct <name pos:start="4233:48" pos:end="4233:52">iovec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4235:13" pos:end="4237:28"><if pos:start="4235:13" pos:end="4237:28">if <condition pos:start="4235:16" pos:end="4235:65">(<expr pos:start="4235:17" pos:end="4235:64"><call pos:start="4235:17" pos:end="4235:60"><name pos:start="4235:17" pos:end="4235:26">lock_iovec</name><argument_list pos:start="4235:27" pos:end="4235:60">(<argument pos:start="4235:28" pos:end="4235:38"><expr pos:start="4235:28" pos:end="4235:38"><name pos:start="4235:28" pos:end="4235:38">VERIFY_READ</name></expr></argument>, <argument pos:start="4235:41" pos:end="4235:43"><expr pos:start="4235:41" pos:end="4235:43"><name pos:start="4235:41" pos:end="4235:43">vec</name></expr></argument>, <argument pos:start="4235:46" pos:end="4235:49"><expr pos:start="4235:46" pos:end="4235:49"><name pos:start="4235:46" pos:end="4235:49">arg2</name></expr></argument>, <argument pos:start="4235:52" pos:end="4235:56"><expr pos:start="4235:52" pos:end="4235:56"><name pos:start="4235:52" pos:end="4235:56">count</name></expr></argument>, <argument pos:start="4235:59" pos:end="4235:59"><expr pos:start="4235:59" pos:end="4235:59"><literal type="number" pos:start="4235:59" pos:end="4235:59">1</literal></expr></argument>)</argument_list></call> <operator pos:start="4235:62" pos:end="4235:62">&lt;</operator> <literal type="number" pos:start="4235:64" pos:end="4235:64">0</literal></expr>)</condition><block type="pseudo" pos:start="4237:17" pos:end="4237:28"><block_content pos:start="4237:17" pos:end="4237:28">

                <goto pos:start="4237:17" pos:end="4237:28">goto <name pos:start="4237:22" pos:end="4237:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4239:13" pos:end="4239:54"><expr pos:start="4239:13" pos:end="4239:53"><name pos:start="4239:13" pos:end="4239:15">ret</name> <operator pos:start="4239:17" pos:end="4239:17">=</operator> <call pos:start="4239:19" pos:end="4239:53"><name pos:start="4239:19" pos:end="4239:27">get_errno</name><argument_list pos:start="4239:28" pos:end="4239:53">(<argument pos:start="4239:29" pos:end="4239:52"><expr pos:start="4239:29" pos:end="4239:52"><call pos:start="4239:29" pos:end="4239:52"><name pos:start="4239:29" pos:end="4239:34">writev</name><argument_list pos:start="4239:35" pos:end="4239:52">(<argument pos:start="4239:36" pos:end="4239:39"><expr pos:start="4239:36" pos:end="4239:39"><name pos:start="4239:36" pos:end="4239:39">arg1</name></expr></argument>, <argument pos:start="4239:42" pos:end="4239:44"><expr pos:start="4239:42" pos:end="4239:44"><name pos:start="4239:42" pos:end="4239:44">vec</name></expr></argument>, <argument pos:start="4239:47" pos:end="4239:51"><expr pos:start="4239:47" pos:end="4239:51"><name pos:start="4239:47" pos:end="4239:51">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4241:13" pos:end="4241:46"><expr pos:start="4241:13" pos:end="4241:45"><call pos:start="4241:13" pos:end="4241:45"><name pos:start="4241:13" pos:end="4241:24">unlock_iovec</name><argument_list pos:start="4241:25" pos:end="4241:45">(<argument pos:start="4241:26" pos:end="4241:28"><expr pos:start="4241:26" pos:end="4241:28"><name pos:start="4241:26" pos:end="4241:28">vec</name></expr></argument>, <argument pos:start="4241:31" pos:end="4241:34"><expr pos:start="4241:31" pos:end="4241:34"><name pos:start="4241:31" pos:end="4241:34">arg2</name></expr></argument>, <argument pos:start="4241:37" pos:end="4241:41"><expr pos:start="4241:37" pos:end="4241:41"><name pos:start="4241:37" pos:end="4241:41">count</name></expr></argument>, <argument pos:start="4241:44" pos:end="4241:44"><expr pos:start="4241:44" pos:end="4241:44"><literal type="number" pos:start="4241:44" pos:end="4241:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4245:9" pos:end="4245:14">break;</break>

    <case pos:start="4247:5" pos:end="4247:26">case <expr pos:start="4247:10" pos:end="4247:25"><name pos:start="4247:10" pos:end="4247:25">TARGET_NR_getsid</name></expr>:</case>

        <expr_stmt pos:start="4249:9" pos:end="4249:38"><expr pos:start="4249:9" pos:end="4249:37"><name pos:start="4249:9" pos:end="4249:11">ret</name> <operator pos:start="4249:13" pos:end="4249:13">=</operator> <call pos:start="4249:15" pos:end="4249:37"><name pos:start="4249:15" pos:end="4249:23">get_errno</name><argument_list pos:start="4249:24" pos:end="4249:37">(<argument pos:start="4249:25" pos:end="4249:36"><expr pos:start="4249:25" pos:end="4249:36"><call pos:start="4249:25" pos:end="4249:36"><name pos:start="4249:25" pos:end="4249:30">getsid</name><argument_list pos:start="4249:31" pos:end="4249:36">(<argument pos:start="4249:32" pos:end="4249:35"><expr pos:start="4249:32" pos:end="4249:35"><name pos:start="4249:32" pos:end="4249:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4251:9" pos:end="4254:0">break;</break>

<cpp:if pos:start="4253:1" pos:end="4253:32">#<cpp:directive pos:start="4253:2" pos:end="4253:3">if</cpp:directive> <expr pos:start="4253:5" pos:end="4253:32"><call pos:start="4253:5" pos:end="4253:32"><name pos:start="4253:5" pos:end="4253:11">defined</name><argument_list pos:start="4253:12" pos:end="4253:32">(<argument pos:start="4253:13" pos:end="4253:31"><expr pos:start="4253:13" pos:end="4253:31"><name pos:start="4253:13" pos:end="4253:31">TARGET_NR_fdatasync</name></expr></argument>)</argument_list></call></expr></cpp:if> <comment type="block" pos:start="4253:34" pos:end="4253:68">/* Not on alpha (osf_datasync ?) */</comment>

    <case pos:start="4255:5" pos:end="4255:29">case <expr pos:start="4255:10" pos:end="4255:28"><name pos:start="4255:10" pos:end="4255:28">TARGET_NR_fdatasync</name></expr>:</case>

        <expr_stmt pos:start="4257:9" pos:end="4257:41"><expr pos:start="4257:9" pos:end="4257:40"><name pos:start="4257:9" pos:end="4257:11">ret</name> <operator pos:start="4257:13" pos:end="4257:13">=</operator> <call pos:start="4257:15" pos:end="4257:40"><name pos:start="4257:15" pos:end="4257:23">get_errno</name><argument_list pos:start="4257:24" pos:end="4257:40">(<argument pos:start="4257:25" pos:end="4257:39"><expr pos:start="4257:25" pos:end="4257:39"><call pos:start="4257:25" pos:end="4257:39"><name pos:start="4257:25" pos:end="4257:33">fdatasync</name><argument_list pos:start="4257:34" pos:end="4257:39">(<argument pos:start="4257:35" pos:end="4257:38"><expr pos:start="4257:35" pos:end="4257:38"><name pos:start="4257:35" pos:end="4257:38">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4259:9" pos:end="4262:0">break;</break>

<cpp:endif pos:start="4261:1" pos:end="4261:6">#<cpp:directive pos:start="4261:2" pos:end="4261:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4263:5" pos:end="4263:27">case <expr pos:start="4263:10" pos:end="4263:26"><name pos:start="4263:10" pos:end="4263:26">TARGET_NR__sysctl</name></expr>:</case>

        <comment type="block" pos:start="4265:9" pos:end="4267:27">/* We don't implement this, but ENOTDIR is always a safe

           return value. */</comment>

        <expr_stmt pos:start="4269:9" pos:end="4269:30"><expr pos:start="4269:9" pos:end="4269:29"><name pos:start="4269:9" pos:end="4269:11">ret</name> <operator pos:start="4269:13" pos:end="4269:13">=</operator> <operator pos:start="4269:15" pos:end="4269:15">-</operator><name pos:start="4269:16" pos:end="4269:29">TARGET_ENOTDIR</name></expr>;</expr_stmt>

        <break pos:start="4271:9" pos:end="4271:14">break;</break>

    <case pos:start="4273:5" pos:end="4273:37">case <expr pos:start="4273:10" pos:end="4273:36"><name pos:start="4273:10" pos:end="4273:36">TARGET_NR_sched_getaffinity</name></expr>:</case>

        <block pos:start="4275:9" pos:end="4319:9">{<block_content pos:start="4277:13" pos:end="4317:13">

            <decl_stmt pos:start="4277:13" pos:end="4277:35"><decl pos:start="4277:13" pos:end="4277:34"><type pos:start="4277:13" pos:end="4277:24"><name pos:start="4277:13" pos:end="4277:20">unsigned</name> <name pos:start="4277:22" pos:end="4277:24">int</name></type> <name pos:start="4277:26" pos:end="4277:34">mask_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4279:13" pos:end="4279:32"><decl pos:start="4279:13" pos:end="4279:31"><type pos:start="4279:13" pos:end="4279:27"><name pos:start="4279:13" pos:end="4279:20">unsigned</name> <name pos:start="4279:22" pos:end="4279:25">long</name> <modifier pos:start="4279:27" pos:end="4279:27">*</modifier></type><name pos:start="4279:28" pos:end="4279:31">mask</name></decl>;</decl_stmt>



            <comment type="block" pos:start="4283:13" pos:end="4289:15">/*

             * sched_getaffinity needs multiples of ulong, so need to take

             * care of mismatches between target ulong and host ulong sizes.

             */</comment>

            <if_stmt pos:start="4291:13" pos:end="4297:13"><if pos:start="4291:13" pos:end="4297:13">if <condition pos:start="4291:16" pos:end="4291:47">(<expr pos:start="4291:17" pos:end="4291:46"><name pos:start="4291:17" pos:end="4291:20">arg2</name> <operator pos:start="4291:22" pos:end="4291:22">&amp;</operator> <operator pos:start="4291:24" pos:end="4291:24">(</operator><sizeof pos:start="4291:25" pos:end="4291:41">sizeof<argument_list pos:start="4291:31" pos:end="4291:41">(<argument pos:start="4291:32" pos:end="4291:40"><expr pos:start="4291:32" pos:end="4291:40"><name pos:start="4291:32" pos:end="4291:40">abi_ulong</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4291:43" pos:end="4291:43">-</operator> <literal type="number" pos:start="4291:45" pos:end="4291:45">1</literal><operator pos:start="4291:46" pos:end="4291:46">)</operator></expr>)</condition> <block pos:start="4291:49" pos:end="4297:13">{<block_content pos:start="4293:17" pos:end="4295:22">

                <expr_stmt pos:start="4293:17" pos:end="4293:37"><expr pos:start="4293:17" pos:end="4293:36"><name pos:start="4293:17" pos:end="4293:19">ret</name> <operator pos:start="4293:21" pos:end="4293:21">=</operator> <operator pos:start="4293:23" pos:end="4293:23">-</operator><name pos:start="4293:24" pos:end="4293:36">TARGET_EINVAL</name></expr>;</expr_stmt>

                <break pos:start="4295:17" pos:end="4295:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4299:13" pos:end="4299:76"><expr pos:start="4299:13" pos:end="4299:75"><name pos:start="4299:13" pos:end="4299:21">mask_size</name> <operator pos:start="4299:23" pos:end="4299:23">=</operator> <operator pos:start="4299:25" pos:end="4299:25">(</operator><name pos:start="4299:26" pos:end="4299:29">arg2</name> <operator pos:start="4299:31" pos:end="4299:31">+</operator> <operator pos:start="4299:33" pos:end="4299:33">(</operator><sizeof pos:start="4299:34" pos:end="4299:46">sizeof<argument_list pos:start="4299:40" pos:end="4299:46">(<argument pos:start="4299:41" pos:end="4299:45"><expr pos:start="4299:41" pos:end="4299:45"><operator pos:start="4299:41" pos:end="4299:41">*</operator><name pos:start="4299:42" pos:end="4299:45">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4299:48" pos:end="4299:48">-</operator> <literal type="number" pos:start="4299:50" pos:end="4299:50">1</literal><operator pos:start="4299:51" pos:end="4299:51">)</operator><operator pos:start="4299:52" pos:end="4299:52">)</operator> <operator pos:start="4299:54" pos:end="4299:54">&amp;</operator> <operator pos:start="4299:56" pos:end="4299:56">~</operator><operator pos:start="4299:57" pos:end="4299:57">(</operator><sizeof pos:start="4299:58" pos:end="4299:70">sizeof<argument_list pos:start="4299:64" pos:end="4299:70">(<argument pos:start="4299:65" pos:end="4299:69"><expr pos:start="4299:65" pos:end="4299:69"><operator pos:start="4299:65" pos:end="4299:65">*</operator><name pos:start="4299:66" pos:end="4299:69">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4299:72" pos:end="4299:72">-</operator> <literal type="number" pos:start="4299:74" pos:end="4299:74">1</literal><operator pos:start="4299:75" pos:end="4299:75">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="4303:13" pos:end="4303:37"><expr pos:start="4303:13" pos:end="4303:36"><name pos:start="4303:13" pos:end="4303:16">mask</name> <operator pos:start="4303:18" pos:end="4303:18">=</operator> <call pos:start="4303:20" pos:end="4303:36"><name pos:start="4303:20" pos:end="4303:25">alloca</name><argument_list pos:start="4303:26" pos:end="4303:36">(<argument pos:start="4303:27" pos:end="4303:35"><expr pos:start="4303:27" pos:end="4303:35"><name pos:start="4303:27" pos:end="4303:35">mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4305:13" pos:end="4305:74"><expr pos:start="4305:13" pos:end="4305:73"><name pos:start="4305:13" pos:end="4305:15">ret</name> <operator pos:start="4305:17" pos:end="4305:17">=</operator> <call pos:start="4305:19" pos:end="4305:73"><name pos:start="4305:19" pos:end="4305:27">get_errno</name><argument_list pos:start="4305:28" pos:end="4305:73">(<argument pos:start="4305:29" pos:end="4305:72"><expr pos:start="4305:29" pos:end="4305:72"><call pos:start="4305:29" pos:end="4305:72"><name pos:start="4305:29" pos:end="4305:49">sys_sched_getaffinity</name><argument_list pos:start="4305:50" pos:end="4305:72">(<argument pos:start="4305:51" pos:end="4305:54"><expr pos:start="4305:51" pos:end="4305:54"><name pos:start="4305:51" pos:end="4305:54">arg1</name></expr></argument>, <argument pos:start="4305:57" pos:end="4305:65"><expr pos:start="4305:57" pos:end="4305:65"><name pos:start="4305:57" pos:end="4305:65">mask_size</name></expr></argument>, <argument pos:start="4305:68" pos:end="4305:71"><expr pos:start="4305:68" pos:end="4305:71"><name pos:start="4305:68" pos:end="4305:71">mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="4309:13" pos:end="4317:13"><if pos:start="4309:13" pos:end="4317:13">if <condition pos:start="4309:16" pos:end="4309:31">(<expr pos:start="4309:17" pos:end="4309:30"><operator pos:start="4309:17" pos:end="4309:17">!</operator><call pos:start="4309:18" pos:end="4309:30"><name pos:start="4309:18" pos:end="4309:25">is_error</name><argument_list pos:start="4309:26" pos:end="4309:30">(<argument pos:start="4309:27" pos:end="4309:29"><expr pos:start="4309:27" pos:end="4309:29"><name pos:start="4309:27" pos:end="4309:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4309:33" pos:end="4317:13">{<block_content pos:start="4311:17" pos:end="4315:17">

                <if_stmt pos:start="4311:17" pos:end="4315:17"><if pos:start="4311:17" pos:end="4315:17">if <condition pos:start="4311:20" pos:end="4311:50">(<expr pos:start="4311:21" pos:end="4311:49"><call pos:start="4311:21" pos:end="4311:49"><name pos:start="4311:21" pos:end="4311:32">copy_to_user</name><argument_list pos:start="4311:33" pos:end="4311:49">(<argument pos:start="4311:34" pos:end="4311:37"><expr pos:start="4311:34" pos:end="4311:37"><name pos:start="4311:34" pos:end="4311:37">arg3</name></expr></argument>, <argument pos:start="4311:40" pos:end="4311:43"><expr pos:start="4311:40" pos:end="4311:43"><name pos:start="4311:40" pos:end="4311:43">mask</name></expr></argument>, <argument pos:start="4311:46" pos:end="4311:48"><expr pos:start="4311:46" pos:end="4311:48"><name pos:start="4311:46" pos:end="4311:48">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4311:52" pos:end="4315:17">{<block_content pos:start="4313:21" pos:end="4313:32">

                    <goto pos:start="4313:21" pos:end="4313:32">goto <name pos:start="4313:26" pos:end="4313:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="4321:9" pos:end="4321:14">break;</break>

    <case pos:start="4323:5" pos:end="4323:37">case <expr pos:start="4323:10" pos:end="4323:36"><name pos:start="4323:10" pos:end="4323:36">TARGET_NR_sched_setaffinity</name></expr>:</case>

        <block pos:start="4325:9" pos:end="4369:9">{<block_content pos:start="4327:13" pos:end="4367:74">

            <decl_stmt pos:start="4327:13" pos:end="4327:35"><decl pos:start="4327:13" pos:end="4327:34"><type pos:start="4327:13" pos:end="4327:24"><name pos:start="4327:13" pos:end="4327:20">unsigned</name> <name pos:start="4327:22" pos:end="4327:24">int</name></type> <name pos:start="4327:26" pos:end="4327:34">mask_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4329:13" pos:end="4329:32"><decl pos:start="4329:13" pos:end="4329:31"><type pos:start="4329:13" pos:end="4329:27"><name pos:start="4329:13" pos:end="4329:20">unsigned</name> <name pos:start="4329:22" pos:end="4329:25">long</name> <modifier pos:start="4329:27" pos:end="4329:27">*</modifier></type><name pos:start="4329:28" pos:end="4329:31">mask</name></decl>;</decl_stmt>



            <comment type="block" pos:start="4333:13" pos:end="4339:15">/*

             * sched_setaffinity needs multiples of ulong, so need to take

             * care of mismatches between target ulong and host ulong sizes.

             */</comment>

            <if_stmt pos:start="4341:13" pos:end="4347:13"><if pos:start="4341:13" pos:end="4347:13">if <condition pos:start="4341:16" pos:end="4341:47">(<expr pos:start="4341:17" pos:end="4341:46"><name pos:start="4341:17" pos:end="4341:20">arg2</name> <operator pos:start="4341:22" pos:end="4341:22">&amp;</operator> <operator pos:start="4341:24" pos:end="4341:24">(</operator><sizeof pos:start="4341:25" pos:end="4341:41">sizeof<argument_list pos:start="4341:31" pos:end="4341:41">(<argument pos:start="4341:32" pos:end="4341:40"><expr pos:start="4341:32" pos:end="4341:40"><name pos:start="4341:32" pos:end="4341:40">abi_ulong</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4341:43" pos:end="4341:43">-</operator> <literal type="number" pos:start="4341:45" pos:end="4341:45">1</literal><operator pos:start="4341:46" pos:end="4341:46">)</operator></expr>)</condition> <block pos:start="4341:49" pos:end="4347:13">{<block_content pos:start="4343:17" pos:end="4345:22">

                <expr_stmt pos:start="4343:17" pos:end="4343:37"><expr pos:start="4343:17" pos:end="4343:36"><name pos:start="4343:17" pos:end="4343:19">ret</name> <operator pos:start="4343:21" pos:end="4343:21">=</operator> <operator pos:start="4343:23" pos:end="4343:23">-</operator><name pos:start="4343:24" pos:end="4343:36">TARGET_EINVAL</name></expr>;</expr_stmt>

                <break pos:start="4345:17" pos:end="4345:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4349:13" pos:end="4349:76"><expr pos:start="4349:13" pos:end="4349:75"><name pos:start="4349:13" pos:end="4349:21">mask_size</name> <operator pos:start="4349:23" pos:end="4349:23">=</operator> <operator pos:start="4349:25" pos:end="4349:25">(</operator><name pos:start="4349:26" pos:end="4349:29">arg2</name> <operator pos:start="4349:31" pos:end="4349:31">+</operator> <operator pos:start="4349:33" pos:end="4349:33">(</operator><sizeof pos:start="4349:34" pos:end="4349:46">sizeof<argument_list pos:start="4349:40" pos:end="4349:46">(<argument pos:start="4349:41" pos:end="4349:45"><expr pos:start="4349:41" pos:end="4349:45"><operator pos:start="4349:41" pos:end="4349:41">*</operator><name pos:start="4349:42" pos:end="4349:45">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4349:48" pos:end="4349:48">-</operator> <literal type="number" pos:start="4349:50" pos:end="4349:50">1</literal><operator pos:start="4349:51" pos:end="4349:51">)</operator><operator pos:start="4349:52" pos:end="4349:52">)</operator> <operator pos:start="4349:54" pos:end="4349:54">&amp;</operator> <operator pos:start="4349:56" pos:end="4349:56">~</operator><operator pos:start="4349:57" pos:end="4349:57">(</operator><sizeof pos:start="4349:58" pos:end="4349:70">sizeof<argument_list pos:start="4349:64" pos:end="4349:70">(<argument pos:start="4349:65" pos:end="4349:69"><expr pos:start="4349:65" pos:end="4349:69"><operator pos:start="4349:65" pos:end="4349:65">*</operator><name pos:start="4349:66" pos:end="4349:69">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4349:72" pos:end="4349:72">-</operator> <literal type="number" pos:start="4349:74" pos:end="4349:74">1</literal><operator pos:start="4349:75" pos:end="4349:75">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="4353:13" pos:end="4353:37"><expr pos:start="4353:13" pos:end="4353:36"><name pos:start="4353:13" pos:end="4353:16">mask</name> <operator pos:start="4353:18" pos:end="4353:18">=</operator> <call pos:start="4353:20" pos:end="4353:36"><name pos:start="4353:20" pos:end="4353:25">alloca</name><argument_list pos:start="4353:26" pos:end="4353:36">(<argument pos:start="4353:27" pos:end="4353:35"><expr pos:start="4353:27" pos:end="4353:35"><name pos:start="4353:27" pos:end="4353:35">mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4355:13" pos:end="4359:13"><if pos:start="4355:13" pos:end="4359:13">if <condition pos:start="4355:16" pos:end="4355:59">(<expr pos:start="4355:17" pos:end="4355:58"><operator pos:start="4355:17" pos:end="4355:17">!</operator><call pos:start="4355:18" pos:end="4355:58"><name pos:start="4355:18" pos:end="4355:33">lock_user_struct</name><argument_list pos:start="4355:34" pos:end="4355:58">(<argument pos:start="4355:35" pos:end="4355:45"><expr pos:start="4355:35" pos:end="4355:45"><name pos:start="4355:35" pos:end="4355:45">VERIFY_READ</name></expr></argument>, <argument pos:start="4355:48" pos:end="4355:48"><expr pos:start="4355:48" pos:end="4355:48"><name pos:start="4355:48" pos:end="4355:48">p</name></expr></argument>, <argument pos:start="4355:51" pos:end="4355:54"><expr pos:start="4355:51" pos:end="4355:54"><name pos:start="4355:51" pos:end="4355:54">arg3</name></expr></argument>, <argument pos:start="4355:57" pos:end="4355:57"><expr pos:start="4355:57" pos:end="4355:57"><literal type="number" pos:start="4355:57" pos:end="4355:57">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4355:61" pos:end="4359:13">{<block_content pos:start="4357:17" pos:end="4357:28">

                <goto pos:start="4357:17" pos:end="4357:28">goto <name pos:start="4357:22" pos:end="4357:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4361:13" pos:end="4361:34"><expr pos:start="4361:13" pos:end="4361:33"><call pos:start="4361:13" pos:end="4361:33"><name pos:start="4361:13" pos:end="4361:18">memcpy</name><argument_list pos:start="4361:19" pos:end="4361:33">(<argument pos:start="4361:20" pos:end="4361:23"><expr pos:start="4361:20" pos:end="4361:23"><name pos:start="4361:20" pos:end="4361:23">mask</name></expr></argument>, <argument pos:start="4361:26" pos:end="4361:26"><expr pos:start="4361:26" pos:end="4361:26"><name pos:start="4361:26" pos:end="4361:26">p</name></expr></argument>, <argument pos:start="4361:29" pos:end="4361:32"><expr pos:start="4361:29" pos:end="4361:32"><name pos:start="4361:29" pos:end="4361:32">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4363:13" pos:end="4363:43"><expr pos:start="4363:13" pos:end="4363:42"><call pos:start="4363:13" pos:end="4363:42"><name pos:start="4363:13" pos:end="4363:30">unlock_user_struct</name><argument_list pos:start="4363:31" pos:end="4363:42">(<argument pos:start="4363:32" pos:end="4363:32"><expr pos:start="4363:32" pos:end="4363:32"><name pos:start="4363:32" pos:end="4363:32">p</name></expr></argument>, <argument pos:start="4363:35" pos:end="4363:38"><expr pos:start="4363:35" pos:end="4363:38"><name pos:start="4363:35" pos:end="4363:38">arg2</name></expr></argument>, <argument pos:start="4363:41" pos:end="4363:41"><expr pos:start="4363:41" pos:end="4363:41"><literal type="number" pos:start="4363:41" pos:end="4363:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4367:13" pos:end="4367:74"><expr pos:start="4367:13" pos:end="4367:73"><name pos:start="4367:13" pos:end="4367:15">ret</name> <operator pos:start="4367:17" pos:end="4367:17">=</operator> <call pos:start="4367:19" pos:end="4367:73"><name pos:start="4367:19" pos:end="4367:27">get_errno</name><argument_list pos:start="4367:28" pos:end="4367:73">(<argument pos:start="4367:29" pos:end="4367:72"><expr pos:start="4367:29" pos:end="4367:72"><call pos:start="4367:29" pos:end="4367:72"><name pos:start="4367:29" pos:end="4367:49">sys_sched_setaffinity</name><argument_list pos:start="4367:50" pos:end="4367:72">(<argument pos:start="4367:51" pos:end="4367:54"><expr pos:start="4367:51" pos:end="4367:54"><name pos:start="4367:51" pos:end="4367:54">arg1</name></expr></argument>, <argument pos:start="4367:57" pos:end="4367:65"><expr pos:start="4367:57" pos:end="4367:65"><name pos:start="4367:57" pos:end="4367:65">mask_size</name></expr></argument>, <argument pos:start="4367:68" pos:end="4367:71"><expr pos:start="4367:68" pos:end="4367:71"><name pos:start="4367:68" pos:end="4367:71">mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4371:9" pos:end="4371:14">break;</break>

    <case pos:start="4373:5" pos:end="4373:34">case <expr pos:start="4373:10" pos:end="4373:33"><name pos:start="4373:10" pos:end="4373:33">TARGET_NR_sched_setparam</name></expr>:</case>

        <block pos:start="4375:9" pos:end="4393:9">{<block_content pos:start="4377:13" pos:end="4391:57">

            <decl_stmt pos:start="4377:13" pos:end="4377:44"><decl pos:start="4377:13" pos:end="4377:43"><type pos:start="4377:13" pos:end="4377:32"><name pos:start="4377:13" pos:end="4377:30"><name pos:start="4377:13" pos:end="4377:18">struct</name> <name pos:start="4377:20" pos:end="4377:30">sched_param</name></name> <modifier pos:start="4377:32" pos:end="4377:32">*</modifier></type><name pos:start="4377:33" pos:end="4377:43">target_schp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4379:13" pos:end="4379:36"><decl pos:start="4379:13" pos:end="4379:35"><type pos:start="4379:13" pos:end="4379:30"><name pos:start="4379:13" pos:end="4379:30"><name pos:start="4379:13" pos:end="4379:18">struct</name> <name pos:start="4379:20" pos:end="4379:30">sched_param</name></name></type> <name pos:start="4379:32" pos:end="4379:35">schp</name></decl>;</decl_stmt>



            <if_stmt pos:start="4383:13" pos:end="4385:28"><if pos:start="4383:13" pos:end="4385:28">if <condition pos:start="4383:16" pos:end="4383:69">(<expr pos:start="4383:17" pos:end="4383:68"><operator pos:start="4383:17" pos:end="4383:17">!</operator><call pos:start="4383:18" pos:end="4383:68"><name pos:start="4383:18" pos:end="4383:33">lock_user_struct</name><argument_list pos:start="4383:34" pos:end="4383:68">(<argument pos:start="4383:35" pos:end="4383:45"><expr pos:start="4383:35" pos:end="4383:45"><name pos:start="4383:35" pos:end="4383:45">VERIFY_READ</name></expr></argument>, <argument pos:start="4383:48" pos:end="4383:58"><expr pos:start="4383:48" pos:end="4383:58"><name pos:start="4383:48" pos:end="4383:58">target_schp</name></expr></argument>, <argument pos:start="4383:61" pos:end="4383:64"><expr pos:start="4383:61" pos:end="4383:64"><name pos:start="4383:61" pos:end="4383:64">arg2</name></expr></argument>, <argument pos:start="4383:67" pos:end="4383:67"><expr pos:start="4383:67" pos:end="4383:67"><literal type="number" pos:start="4383:67" pos:end="4383:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4385:17" pos:end="4385:28"><block_content pos:start="4385:17" pos:end="4385:28">

                <goto pos:start="4385:17" pos:end="4385:28">goto <name pos:start="4385:22" pos:end="4385:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4387:13" pos:end="4387:71"><expr pos:start="4387:13" pos:end="4387:70"><name pos:start="4387:13" pos:end="4387:31"><name pos:start="4387:13" pos:end="4387:16">schp</name><operator pos:start="4387:17" pos:end="4387:17">.</operator><name pos:start="4387:18" pos:end="4387:31">sched_priority</name></name> <operator pos:start="4387:33" pos:end="4387:33">=</operator> <call pos:start="4387:35" pos:end="4387:70"><name pos:start="4387:35" pos:end="4387:41">tswap32</name><argument_list pos:start="4387:42" pos:end="4387:70">(<argument pos:start="4387:43" pos:end="4387:69"><expr pos:start="4387:43" pos:end="4387:69"><name pos:start="4387:43" pos:end="4387:69"><name pos:start="4387:43" pos:end="4387:53">target_schp</name><operator pos:start="4387:54" pos:end="4387:55">-&gt;</operator><name pos:start="4387:56" pos:end="4387:69">sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4389:13" pos:end="4389:53"><expr pos:start="4389:13" pos:end="4389:52"><call pos:start="4389:13" pos:end="4389:52"><name pos:start="4389:13" pos:end="4389:30">unlock_user_struct</name><argument_list pos:start="4389:31" pos:end="4389:52">(<argument pos:start="4389:32" pos:end="4389:42"><expr pos:start="4389:32" pos:end="4389:42"><name pos:start="4389:32" pos:end="4389:42">target_schp</name></expr></argument>, <argument pos:start="4389:45" pos:end="4389:48"><expr pos:start="4389:45" pos:end="4389:48"><name pos:start="4389:45" pos:end="4389:48">arg2</name></expr></argument>, <argument pos:start="4389:51" pos:end="4389:51"><expr pos:start="4389:51" pos:end="4389:51"><literal type="number" pos:start="4389:51" pos:end="4389:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4391:13" pos:end="4391:57"><expr pos:start="4391:13" pos:end="4391:56"><name pos:start="4391:13" pos:end="4391:15">ret</name> <operator pos:start="4391:17" pos:end="4391:17">=</operator> <call pos:start="4391:19" pos:end="4391:56"><name pos:start="4391:19" pos:end="4391:27">get_errno</name><argument_list pos:start="4391:28" pos:end="4391:56">(<argument pos:start="4391:29" pos:end="4391:55"><expr pos:start="4391:29" pos:end="4391:55"><call pos:start="4391:29" pos:end="4391:55"><name pos:start="4391:29" pos:end="4391:42">sched_setparam</name><argument_list pos:start="4391:43" pos:end="4391:55">(<argument pos:start="4391:44" pos:end="4391:47"><expr pos:start="4391:44" pos:end="4391:47"><name pos:start="4391:44" pos:end="4391:47">arg1</name></expr></argument>, <argument pos:start="4391:50" pos:end="4391:54"><expr pos:start="4391:50" pos:end="4391:54"><operator pos:start="4391:50" pos:end="4391:50">&amp;</operator><name pos:start="4391:51" pos:end="4391:54">schp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4395:9" pos:end="4395:14">break;</break>

    <case pos:start="4397:5" pos:end="4397:34">case <expr pos:start="4397:10" pos:end="4397:33"><name pos:start="4397:10" pos:end="4397:33">TARGET_NR_sched_getparam</name></expr>:</case>

        <block pos:start="4399:9" pos:end="4419:9">{<block_content pos:start="4401:13" pos:end="4417:13">

            <decl_stmt pos:start="4401:13" pos:end="4401:44"><decl pos:start="4401:13" pos:end="4401:43"><type pos:start="4401:13" pos:end="4401:32"><name pos:start="4401:13" pos:end="4401:30"><name pos:start="4401:13" pos:end="4401:18">struct</name> <name pos:start="4401:20" pos:end="4401:30">sched_param</name></name> <modifier pos:start="4401:32" pos:end="4401:32">*</modifier></type><name pos:start="4401:33" pos:end="4401:43">target_schp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4403:13" pos:end="4403:36"><decl pos:start="4403:13" pos:end="4403:35"><type pos:start="4403:13" pos:end="4403:30"><name pos:start="4403:13" pos:end="4403:30"><name pos:start="4403:13" pos:end="4403:18">struct</name> <name pos:start="4403:20" pos:end="4403:30">sched_param</name></name></type> <name pos:start="4403:32" pos:end="4403:35">schp</name></decl>;</decl_stmt>

            <expr_stmt pos:start="4405:13" pos:end="4405:57"><expr pos:start="4405:13" pos:end="4405:56"><name pos:start="4405:13" pos:end="4405:15">ret</name> <operator pos:start="4405:17" pos:end="4405:17">=</operator> <call pos:start="4405:19" pos:end="4405:56"><name pos:start="4405:19" pos:end="4405:27">get_errno</name><argument_list pos:start="4405:28" pos:end="4405:56">(<argument pos:start="4405:29" pos:end="4405:55"><expr pos:start="4405:29" pos:end="4405:55"><call pos:start="4405:29" pos:end="4405:55"><name pos:start="4405:29" pos:end="4405:42">sched_getparam</name><argument_list pos:start="4405:43" pos:end="4405:55">(<argument pos:start="4405:44" pos:end="4405:47"><expr pos:start="4405:44" pos:end="4405:47"><name pos:start="4405:44" pos:end="4405:47">arg1</name></expr></argument>, <argument pos:start="4405:50" pos:end="4405:54"><expr pos:start="4405:50" pos:end="4405:54"><operator pos:start="4405:50" pos:end="4405:50">&amp;</operator><name pos:start="4405:51" pos:end="4405:54">schp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4407:13" pos:end="4417:13"><if pos:start="4407:13" pos:end="4417:13">if <condition pos:start="4407:16" pos:end="4407:31">(<expr pos:start="4407:17" pos:end="4407:30"><operator pos:start="4407:17" pos:end="4407:17">!</operator><call pos:start="4407:18" pos:end="4407:30"><name pos:start="4407:18" pos:end="4407:25">is_error</name><argument_list pos:start="4407:26" pos:end="4407:30">(<argument pos:start="4407:27" pos:end="4407:29"><expr pos:start="4407:27" pos:end="4407:29"><name pos:start="4407:27" pos:end="4407:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4407:33" pos:end="4417:13">{<block_content pos:start="4409:17" pos:end="4415:57">

                <if_stmt pos:start="4409:17" pos:end="4411:32"><if pos:start="4409:17" pos:end="4411:32">if <condition pos:start="4409:20" pos:end="4409:74">(<expr pos:start="4409:21" pos:end="4409:73"><operator pos:start="4409:21" pos:end="4409:21">!</operator><call pos:start="4409:22" pos:end="4409:73"><name pos:start="4409:22" pos:end="4409:37">lock_user_struct</name><argument_list pos:start="4409:38" pos:end="4409:73">(<argument pos:start="4409:39" pos:end="4409:50"><expr pos:start="4409:39" pos:end="4409:50"><name pos:start="4409:39" pos:end="4409:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4409:53" pos:end="4409:63"><expr pos:start="4409:53" pos:end="4409:63"><name pos:start="4409:53" pos:end="4409:63">target_schp</name></expr></argument>, <argument pos:start="4409:66" pos:end="4409:69"><expr pos:start="4409:66" pos:end="4409:69"><name pos:start="4409:66" pos:end="4409:69">arg2</name></expr></argument>, <argument pos:start="4409:72" pos:end="4409:72"><expr pos:start="4409:72" pos:end="4409:72"><literal type="number" pos:start="4409:72" pos:end="4409:72">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4411:21" pos:end="4411:32"><block_content pos:start="4411:21" pos:end="4411:32">

                    <goto pos:start="4411:21" pos:end="4411:32">goto <name pos:start="4411:26" pos:end="4411:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="4413:17" pos:end="4413:75"><expr pos:start="4413:17" pos:end="4413:74"><name pos:start="4413:17" pos:end="4413:43"><name pos:start="4413:17" pos:end="4413:27">target_schp</name><operator pos:start="4413:28" pos:end="4413:29">-&gt;</operator><name pos:start="4413:30" pos:end="4413:43">sched_priority</name></name> <operator pos:start="4413:45" pos:end="4413:45">=</operator> <call pos:start="4413:47" pos:end="4413:74"><name pos:start="4413:47" pos:end="4413:53">tswap32</name><argument_list pos:start="4413:54" pos:end="4413:74">(<argument pos:start="4413:55" pos:end="4413:73"><expr pos:start="4413:55" pos:end="4413:73"><name pos:start="4413:55" pos:end="4413:73"><name pos:start="4413:55" pos:end="4413:58">schp</name><operator pos:start="4413:59" pos:end="4413:59">.</operator><name pos:start="4413:60" pos:end="4413:73">sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4415:17" pos:end="4415:57"><expr pos:start="4415:17" pos:end="4415:56"><call pos:start="4415:17" pos:end="4415:56"><name pos:start="4415:17" pos:end="4415:34">unlock_user_struct</name><argument_list pos:start="4415:35" pos:end="4415:56">(<argument pos:start="4415:36" pos:end="4415:46"><expr pos:start="4415:36" pos:end="4415:46"><name pos:start="4415:36" pos:end="4415:46">target_schp</name></expr></argument>, <argument pos:start="4415:49" pos:end="4415:52"><expr pos:start="4415:49" pos:end="4415:52"><name pos:start="4415:49" pos:end="4415:52">arg2</name></expr></argument>, <argument pos:start="4415:55" pos:end="4415:55"><expr pos:start="4415:55" pos:end="4415:55"><literal type="number" pos:start="4415:55" pos:end="4415:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="4421:9" pos:end="4421:14">break;</break>

    <case pos:start="4423:5" pos:end="4423:38">case <expr pos:start="4423:10" pos:end="4423:37"><name pos:start="4423:10" pos:end="4423:37">TARGET_NR_sched_setscheduler</name></expr>:</case>

        <block pos:start="4425:9" pos:end="4441:9">{<block_content pos:start="4427:13" pos:end="4439:67">

            <decl_stmt pos:start="4427:13" pos:end="4427:44"><decl pos:start="4427:13" pos:end="4427:43"><type pos:start="4427:13" pos:end="4427:32"><name pos:start="4427:13" pos:end="4427:30"><name pos:start="4427:13" pos:end="4427:18">struct</name> <name pos:start="4427:20" pos:end="4427:30">sched_param</name></name> <modifier pos:start="4427:32" pos:end="4427:32">*</modifier></type><name pos:start="4427:33" pos:end="4427:43">target_schp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4429:13" pos:end="4429:36"><decl pos:start="4429:13" pos:end="4429:35"><type pos:start="4429:13" pos:end="4429:30"><name pos:start="4429:13" pos:end="4429:30"><name pos:start="4429:13" pos:end="4429:18">struct</name> <name pos:start="4429:20" pos:end="4429:30">sched_param</name></name></type> <name pos:start="4429:32" pos:end="4429:35">schp</name></decl>;</decl_stmt>

            <if_stmt pos:start="4431:13" pos:end="4433:28"><if pos:start="4431:13" pos:end="4433:28">if <condition pos:start="4431:16" pos:end="4431:69">(<expr pos:start="4431:17" pos:end="4431:68"><operator pos:start="4431:17" pos:end="4431:17">!</operator><call pos:start="4431:18" pos:end="4431:68"><name pos:start="4431:18" pos:end="4431:33">lock_user_struct</name><argument_list pos:start="4431:34" pos:end="4431:68">(<argument pos:start="4431:35" pos:end="4431:45"><expr pos:start="4431:35" pos:end="4431:45"><name pos:start="4431:35" pos:end="4431:45">VERIFY_READ</name></expr></argument>, <argument pos:start="4431:48" pos:end="4431:58"><expr pos:start="4431:48" pos:end="4431:58"><name pos:start="4431:48" pos:end="4431:58">target_schp</name></expr></argument>, <argument pos:start="4431:61" pos:end="4431:64"><expr pos:start="4431:61" pos:end="4431:64"><name pos:start="4431:61" pos:end="4431:64">arg3</name></expr></argument>, <argument pos:start="4431:67" pos:end="4431:67"><expr pos:start="4431:67" pos:end="4431:67"><literal type="number" pos:start="4431:67" pos:end="4431:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4433:17" pos:end="4433:28"><block_content pos:start="4433:17" pos:end="4433:28">

                <goto pos:start="4433:17" pos:end="4433:28">goto <name pos:start="4433:22" pos:end="4433:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4435:13" pos:end="4435:71"><expr pos:start="4435:13" pos:end="4435:70"><name pos:start="4435:13" pos:end="4435:31"><name pos:start="4435:13" pos:end="4435:16">schp</name><operator pos:start="4435:17" pos:end="4435:17">.</operator><name pos:start="4435:18" pos:end="4435:31">sched_priority</name></name> <operator pos:start="4435:33" pos:end="4435:33">=</operator> <call pos:start="4435:35" pos:end="4435:70"><name pos:start="4435:35" pos:end="4435:41">tswap32</name><argument_list pos:start="4435:42" pos:end="4435:70">(<argument pos:start="4435:43" pos:end="4435:69"><expr pos:start="4435:43" pos:end="4435:69"><name pos:start="4435:43" pos:end="4435:69"><name pos:start="4435:43" pos:end="4435:53">target_schp</name><operator pos:start="4435:54" pos:end="4435:55">-&gt;</operator><name pos:start="4435:56" pos:end="4435:69">sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4437:13" pos:end="4437:53"><expr pos:start="4437:13" pos:end="4437:52"><call pos:start="4437:13" pos:end="4437:52"><name pos:start="4437:13" pos:end="4437:30">unlock_user_struct</name><argument_list pos:start="4437:31" pos:end="4437:52">(<argument pos:start="4437:32" pos:end="4437:42"><expr pos:start="4437:32" pos:end="4437:42"><name pos:start="4437:32" pos:end="4437:42">target_schp</name></expr></argument>, <argument pos:start="4437:45" pos:end="4437:48"><expr pos:start="4437:45" pos:end="4437:48"><name pos:start="4437:45" pos:end="4437:48">arg3</name></expr></argument>, <argument pos:start="4437:51" pos:end="4437:51"><expr pos:start="4437:51" pos:end="4437:51"><literal type="number" pos:start="4437:51" pos:end="4437:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4439:13" pos:end="4439:67"><expr pos:start="4439:13" pos:end="4439:66"><name pos:start="4439:13" pos:end="4439:15">ret</name> <operator pos:start="4439:17" pos:end="4439:17">=</operator> <call pos:start="4439:19" pos:end="4439:66"><name pos:start="4439:19" pos:end="4439:27">get_errno</name><argument_list pos:start="4439:28" pos:end="4439:66">(<argument pos:start="4439:29" pos:end="4439:65"><expr pos:start="4439:29" pos:end="4439:65"><call pos:start="4439:29" pos:end="4439:65"><name pos:start="4439:29" pos:end="4439:46">sched_setscheduler</name><argument_list pos:start="4439:47" pos:end="4439:65">(<argument pos:start="4439:48" pos:end="4439:51"><expr pos:start="4439:48" pos:end="4439:51"><name pos:start="4439:48" pos:end="4439:51">arg1</name></expr></argument>, <argument pos:start="4439:54" pos:end="4439:57"><expr pos:start="4439:54" pos:end="4439:57"><name pos:start="4439:54" pos:end="4439:57">arg2</name></expr></argument>, <argument pos:start="4439:60" pos:end="4439:64"><expr pos:start="4439:60" pos:end="4439:64"><operator pos:start="4439:60" pos:end="4439:60">&amp;</operator><name pos:start="4439:61" pos:end="4439:64">schp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4443:9" pos:end="4443:14">break;</break>

    <case pos:start="4445:5" pos:end="4445:38">case <expr pos:start="4445:10" pos:end="4445:37"><name pos:start="4445:10" pos:end="4445:37">TARGET_NR_sched_getscheduler</name></expr>:</case>

        <expr_stmt pos:start="4447:9" pos:end="4447:50"><expr pos:start="4447:9" pos:end="4447:49"><name pos:start="4447:9" pos:end="4447:11">ret</name> <operator pos:start="4447:13" pos:end="4447:13">=</operator> <call pos:start="4447:15" pos:end="4447:49"><name pos:start="4447:15" pos:end="4447:23">get_errno</name><argument_list pos:start="4447:24" pos:end="4447:49">(<argument pos:start="4447:25" pos:end="4447:48"><expr pos:start="4447:25" pos:end="4447:48"><call pos:start="4447:25" pos:end="4447:48"><name pos:start="4447:25" pos:end="4447:42">sched_getscheduler</name><argument_list pos:start="4447:43" pos:end="4447:48">(<argument pos:start="4447:44" pos:end="4447:47"><expr pos:start="4447:44" pos:end="4447:47"><name pos:start="4447:44" pos:end="4447:47">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4449:9" pos:end="4449:14">break;</break>

    <case pos:start="4451:5" pos:end="4451:31">case <expr pos:start="4451:10" pos:end="4451:30"><name pos:start="4451:10" pos:end="4451:30">TARGET_NR_sched_yield</name></expr>:</case>

        <expr_stmt pos:start="4453:9" pos:end="4453:39"><expr pos:start="4453:9" pos:end="4453:38"><name pos:start="4453:9" pos:end="4453:11">ret</name> <operator pos:start="4453:13" pos:end="4453:13">=</operator> <call pos:start="4453:15" pos:end="4453:38"><name pos:start="4453:15" pos:end="4453:23">get_errno</name><argument_list pos:start="4453:24" pos:end="4453:38">(<argument pos:start="4453:25" pos:end="4453:37"><expr pos:start="4453:25" pos:end="4453:37"><call pos:start="4453:25" pos:end="4453:37"><name pos:start="4453:25" pos:end="4453:35">sched_yield</name><argument_list pos:start="4453:36" pos:end="4453:37">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4455:9" pos:end="4455:14">break;</break>

    <case pos:start="4457:5" pos:end="4457:42">case <expr pos:start="4457:10" pos:end="4457:41"><name pos:start="4457:10" pos:end="4457:41">TARGET_NR_sched_get_priority_max</name></expr>:</case>

        <expr_stmt pos:start="4459:9" pos:end="4459:54"><expr pos:start="4459:9" pos:end="4459:53"><name pos:start="4459:9" pos:end="4459:11">ret</name> <operator pos:start="4459:13" pos:end="4459:13">=</operator> <call pos:start="4459:15" pos:end="4459:53"><name pos:start="4459:15" pos:end="4459:23">get_errno</name><argument_list pos:start="4459:24" pos:end="4459:53">(<argument pos:start="4459:25" pos:end="4459:52"><expr pos:start="4459:25" pos:end="4459:52"><call pos:start="4459:25" pos:end="4459:52"><name pos:start="4459:25" pos:end="4459:46">sched_get_priority_max</name><argument_list pos:start="4459:47" pos:end="4459:52">(<argument pos:start="4459:48" pos:end="4459:51"><expr pos:start="4459:48" pos:end="4459:51"><name pos:start="4459:48" pos:end="4459:51">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4461:9" pos:end="4461:14">break;</break>

    <case pos:start="4463:5" pos:end="4463:42">case <expr pos:start="4463:10" pos:end="4463:41"><name pos:start="4463:10" pos:end="4463:41">TARGET_NR_sched_get_priority_min</name></expr>:</case>

        <expr_stmt pos:start="4465:9" pos:end="4465:54"><expr pos:start="4465:9" pos:end="4465:53"><name pos:start="4465:9" pos:end="4465:11">ret</name> <operator pos:start="4465:13" pos:end="4465:13">=</operator> <call pos:start="4465:15" pos:end="4465:53"><name pos:start="4465:15" pos:end="4465:23">get_errno</name><argument_list pos:start="4465:24" pos:end="4465:53">(<argument pos:start="4465:25" pos:end="4465:52"><expr pos:start="4465:25" pos:end="4465:52"><call pos:start="4465:25" pos:end="4465:52"><name pos:start="4465:25" pos:end="4465:46">sched_get_priority_min</name><argument_list pos:start="4465:47" pos:end="4465:52">(<argument pos:start="4465:48" pos:end="4465:51"><expr pos:start="4465:48" pos:end="4465:51"><name pos:start="4465:48" pos:end="4465:51">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4467:9" pos:end="4467:14">break;</break>

    <case pos:start="4469:5" pos:end="4469:41">case <expr pos:start="4469:10" pos:end="4469:40"><name pos:start="4469:10" pos:end="4469:40">TARGET_NR_sched_rr_get_interval</name></expr>:</case>

        <block pos:start="4471:9" pos:end="4483:9">{<block_content pos:start="4473:13" pos:end="4481:13">

            <decl_stmt pos:start="4473:13" pos:end="4473:31"><decl pos:start="4473:13" pos:end="4473:30"><type pos:start="4473:13" pos:end="4473:27"><name pos:start="4473:13" pos:end="4473:27"><name pos:start="4473:13" pos:end="4473:18">struct</name> <name pos:start="4473:20" pos:end="4473:27">timespec</name></name></type> <name pos:start="4473:29" pos:end="4473:30">ts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="4475:13" pos:end="4475:62"><expr pos:start="4475:13" pos:end="4475:61"><name pos:start="4475:13" pos:end="4475:15">ret</name> <operator pos:start="4475:17" pos:end="4475:17">=</operator> <call pos:start="4475:19" pos:end="4475:61"><name pos:start="4475:19" pos:end="4475:27">get_errno</name><argument_list pos:start="4475:28" pos:end="4475:61">(<argument pos:start="4475:29" pos:end="4475:60"><expr pos:start="4475:29" pos:end="4475:60"><call pos:start="4475:29" pos:end="4475:60"><name pos:start="4475:29" pos:end="4475:49">sched_rr_get_interval</name><argument_list pos:start="4475:50" pos:end="4475:60">(<argument pos:start="4475:51" pos:end="4475:54"><expr pos:start="4475:51" pos:end="4475:54"><name pos:start="4475:51" pos:end="4475:54">arg1</name></expr></argument>, <argument pos:start="4475:57" pos:end="4475:59"><expr pos:start="4475:57" pos:end="4475:59"><operator pos:start="4475:57" pos:end="4475:57">&amp;</operator><name pos:start="4475:58" pos:end="4475:59">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4477:13" pos:end="4481:13"><if pos:start="4477:13" pos:end="4481:13">if <condition pos:start="4477:16" pos:end="4477:31">(<expr pos:start="4477:17" pos:end="4477:30"><operator pos:start="4477:17" pos:end="4477:17">!</operator><call pos:start="4477:18" pos:end="4477:30"><name pos:start="4477:18" pos:end="4477:25">is_error</name><argument_list pos:start="4477:26" pos:end="4477:30">(<argument pos:start="4477:27" pos:end="4477:29"><expr pos:start="4477:27" pos:end="4477:29"><name pos:start="4477:27" pos:end="4477:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4477:33" pos:end="4481:13">{<block_content pos:start="4479:17" pos:end="4479:51">

                <expr_stmt pos:start="4479:17" pos:end="4479:51"><expr pos:start="4479:17" pos:end="4479:50"><call pos:start="4479:17" pos:end="4479:50"><name pos:start="4479:17" pos:end="4479:39">host_to_target_timespec</name><argument_list pos:start="4479:40" pos:end="4479:50">(<argument pos:start="4479:41" pos:end="4479:44"><expr pos:start="4479:41" pos:end="4479:44"><name pos:start="4479:41" pos:end="4479:44">arg2</name></expr></argument>, <argument pos:start="4479:47" pos:end="4479:49"><expr pos:start="4479:47" pos:end="4479:49"><operator pos:start="4479:47" pos:end="4479:47">&amp;</operator><name pos:start="4479:48" pos:end="4479:49">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="4485:9" pos:end="4485:14">break;</break>

    <case pos:start="4487:5" pos:end="4487:29">case <expr pos:start="4487:10" pos:end="4487:28"><name pos:start="4487:10" pos:end="4487:28">TARGET_NR_nanosleep</name></expr>:</case>

        <block pos:start="4489:9" pos:end="4503:9">{<block_content pos:start="4491:13" pos:end="4501:13">

            <decl_stmt pos:start="4491:13" pos:end="4491:37"><decl pos:start="4491:13" pos:end="4491:31"><type pos:start="4491:13" pos:end="4491:27"><name pos:start="4491:13" pos:end="4491:27"><name pos:start="4491:13" pos:end="4491:18">struct</name> <name pos:start="4491:20" pos:end="4491:27">timespec</name></name></type> <name pos:start="4491:29" pos:end="4491:31">req</name></decl>, <decl pos:start="4491:34" pos:end="4491:36"><type ref="prev" pos:start="4491:13" pos:end="4491:27"/><name pos:start="4491:34" pos:end="4491:36">rem</name></decl>;</decl_stmt>

            <expr_stmt pos:start="4493:13" pos:end="4493:48"><expr pos:start="4493:13" pos:end="4493:47"><call pos:start="4493:13" pos:end="4493:47"><name pos:start="4493:13" pos:end="4493:35">target_to_host_timespec</name><argument_list pos:start="4493:36" pos:end="4493:47">(<argument pos:start="4493:37" pos:end="4493:40"><expr pos:start="4493:37" pos:end="4493:40"><operator pos:start="4493:37" pos:end="4493:37">&amp;</operator><name pos:start="4493:38" pos:end="4493:40">req</name></expr></argument>, <argument pos:start="4493:43" pos:end="4493:46"><expr pos:start="4493:43" pos:end="4493:46"><name pos:start="4493:43" pos:end="4493:46">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4495:13" pos:end="4495:51"><expr pos:start="4495:13" pos:end="4495:50"><name pos:start="4495:13" pos:end="4495:15">ret</name> <operator pos:start="4495:17" pos:end="4495:17">=</operator> <call pos:start="4495:19" pos:end="4495:50"><name pos:start="4495:19" pos:end="4495:27">get_errno</name><argument_list pos:start="4495:28" pos:end="4495:50">(<argument pos:start="4495:29" pos:end="4495:49"><expr pos:start="4495:29" pos:end="4495:49"><call pos:start="4495:29" pos:end="4495:49"><name pos:start="4495:29" pos:end="4495:37">nanosleep</name><argument_list pos:start="4495:38" pos:end="4495:49">(<argument pos:start="4495:39" pos:end="4495:42"><expr pos:start="4495:39" pos:end="4495:42"><operator pos:start="4495:39" pos:end="4495:39">&amp;</operator><name pos:start="4495:40" pos:end="4495:42">req</name></expr></argument>, <argument pos:start="4495:45" pos:end="4495:48"><expr pos:start="4495:45" pos:end="4495:48"><operator pos:start="4495:45" pos:end="4495:45">&amp;</operator><name pos:start="4495:46" pos:end="4495:48">rem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4497:13" pos:end="4501:13"><if pos:start="4497:13" pos:end="4501:13">if <condition pos:start="4497:16" pos:end="4497:38">(<expr pos:start="4497:17" pos:end="4497:37"><call pos:start="4497:17" pos:end="4497:29"><name pos:start="4497:17" pos:end="4497:24">is_error</name><argument_list pos:start="4497:25" pos:end="4497:29">(<argument pos:start="4497:26" pos:end="4497:28"><expr pos:start="4497:26" pos:end="4497:28"><name pos:start="4497:26" pos:end="4497:28">ret</name></expr></argument>)</argument_list></call> <operator pos:start="4497:31" pos:end="4497:32">&amp;&amp;</operator> <name pos:start="4497:34" pos:end="4497:37">arg2</name></expr>)</condition> <block pos:start="4497:40" pos:end="4501:13">{<block_content pos:start="4499:17" pos:end="4499:52">

                <expr_stmt pos:start="4499:17" pos:end="4499:52"><expr pos:start="4499:17" pos:end="4499:51"><call pos:start="4499:17" pos:end="4499:51"><name pos:start="4499:17" pos:end="4499:39">host_to_target_timespec</name><argument_list pos:start="4499:40" pos:end="4499:51">(<argument pos:start="4499:41" pos:end="4499:44"><expr pos:start="4499:41" pos:end="4499:44"><name pos:start="4499:41" pos:end="4499:44">arg2</name></expr></argument>, <argument pos:start="4499:47" pos:end="4499:50"><expr pos:start="4499:47" pos:end="4499:50"><operator pos:start="4499:47" pos:end="4499:47">&amp;</operator><name pos:start="4499:48" pos:end="4499:50">rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="4505:9" pos:end="4508:0">break;</break>

<cpp:ifdef pos:start="4507:1" pos:end="4507:29">#<cpp:directive pos:start="4507:2" pos:end="4507:6">ifdef</cpp:directive> <name pos:start="4507:8" pos:end="4507:29">TARGET_NR_query_module</name></cpp:ifdef>

    <case pos:start="4509:5" pos:end="4509:32">case <expr pos:start="4509:10" pos:end="4509:31"><name pos:start="4509:10" pos:end="4509:31">TARGET_NR_query_module</name></expr>:</case>

        <goto pos:start="4511:9" pos:end="4516:0">goto <name pos:start="4511:14" pos:end="4511:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4513:1" pos:end="4513:6">#<cpp:directive pos:start="4513:2" pos:end="4513:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4515:1" pos:end="4515:27">#<cpp:directive pos:start="4515:2" pos:end="4515:6">ifdef</cpp:directive> <name pos:start="4515:8" pos:end="4515:27">TARGET_NR_nfsservctl</name></cpp:ifdef>

    <case pos:start="4517:5" pos:end="4517:30">case <expr pos:start="4517:10" pos:end="4517:29"><name pos:start="4517:10" pos:end="4517:29">TARGET_NR_nfsservctl</name></expr>:</case>

        <goto pos:start="4519:9" pos:end="4522:0">goto <name pos:start="4519:14" pos:end="4519:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4521:1" pos:end="4521:6">#<cpp:directive pos:start="4521:2" pos:end="4521:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4523:5" pos:end="4523:25">case <expr pos:start="4523:10" pos:end="4523:24"><name pos:start="4523:10" pos:end="4523:24">TARGET_NR_prctl</name></expr>:</case>

        <switch pos:start="4525:9" pos:end="4603:9">switch <condition pos:start="4525:16" pos:end="4525:21">(<expr pos:start="4525:17" pos:end="4525:20"><name pos:start="4525:17" pos:end="4525:20">arg1</name></expr>)</condition> <block pos:start="4525:23" pos:end="4603:9">{<block_content pos:start="4527:9" pos:end="4601:18">

        <case pos:start="4527:9" pos:end="4527:30">case <expr pos:start="4527:14" pos:end="4527:29"><name pos:start="4527:14" pos:end="4527:29">PR_GET_PDEATHSIG</name></expr>:</case>

        <block pos:start="4529:9" pos:end="4548:0">{<block_content pos:start="4531:13" pos:end="4543:18">

            <decl_stmt pos:start="4531:13" pos:end="4531:25"><decl pos:start="4531:13" pos:end="4531:24"><type pos:start="4531:13" pos:end="4531:15"><name pos:start="4531:13" pos:end="4531:15">int</name></type> <name pos:start="4531:17" pos:end="4531:24">deathsig</name></decl>;</decl_stmt>

            <expr_stmt pos:start="4533:13" pos:end="4533:70"><expr pos:start="4533:13" pos:end="4533:69"><name pos:start="4533:13" pos:end="4533:15">ret</name> <operator pos:start="4533:17" pos:end="4533:17">=</operator> <call pos:start="4533:19" pos:end="4533:69"><name pos:start="4533:19" pos:end="4533:27">get_errno</name><argument_list pos:start="4533:28" pos:end="4533:69">(<argument pos:start="4533:29" pos:end="4533:68"><expr pos:start="4533:29" pos:end="4533:68"><call pos:start="4533:29" pos:end="4533:68"><name pos:start="4533:29" pos:end="4533:33">prctl</name><argument_list pos:start="4533:34" pos:end="4533:68">(<argument pos:start="4533:35" pos:end="4533:38"><expr pos:start="4533:35" pos:end="4533:38"><name pos:start="4533:35" pos:end="4533:38">arg1</name></expr></argument>, <argument pos:start="4533:41" pos:end="4533:49"><expr pos:start="4533:41" pos:end="4533:49"><operator pos:start="4533:41" pos:end="4533:41">&amp;</operator><name pos:start="4533:42" pos:end="4533:49">deathsig</name></expr></argument>, <argument pos:start="4533:52" pos:end="4533:55"><expr pos:start="4533:52" pos:end="4533:55"><name pos:start="4533:52" pos:end="4533:55">arg3</name></expr></argument>, <argument pos:start="4533:58" pos:end="4533:61"><expr pos:start="4533:58" pos:end="4533:61"><name pos:start="4533:58" pos:end="4533:61">arg4</name></expr></argument>, <argument pos:start="4533:64" pos:end="4533:67"><expr pos:start="4533:64" pos:end="4533:67"><name pos:start="4533:64" pos:end="4533:67">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4535:13" pos:end="4541:13"><if pos:start="4535:13" pos:end="4541:13">if <condition pos:start="4535:16" pos:end="4537:48">(<expr pos:start="4535:17" pos:end="4537:47"><operator pos:start="4535:17" pos:end="4535:17">!</operator><call pos:start="4535:18" pos:end="4535:30"><name pos:start="4535:18" pos:end="4535:25">is_error</name><argument_list pos:start="4535:26" pos:end="4535:30">(<argument pos:start="4535:27" pos:end="4535:29"><expr pos:start="4535:27" pos:end="4535:29"><name pos:start="4535:27" pos:end="4535:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="4535:32" pos:end="4535:33">&amp;&amp;</operator> <name pos:start="4535:35" pos:end="4535:38">arg2</name>

                <operator pos:start="4537:17" pos:end="4537:18">&amp;&amp;</operator> <call pos:start="4537:20" pos:end="4537:47"><name pos:start="4537:20" pos:end="4537:31">put_user_ual</name><argument_list pos:start="4537:32" pos:end="4537:47">(<argument pos:start="4537:33" pos:end="4537:40"><expr pos:start="4537:33" pos:end="4537:40"><name pos:start="4537:33" pos:end="4537:40">deathsig</name></expr></argument>, <argument pos:start="4537:43" pos:end="4537:46"><expr pos:start="4537:43" pos:end="4537:46"><name pos:start="4537:43" pos:end="4537:46">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4537:50" pos:end="4541:13">{<block_content pos:start="4539:17" pos:end="4539:28">

                <goto pos:start="4539:17" pos:end="4539:28">goto <name pos:start="4539:22" pos:end="4539:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="4543:13" pos:end="4543:18">break;</break>

        </block_content>}</block>

<cpp:ifdef pos:start="4547:1" pos:end="4547:18">#<cpp:directive pos:start="4547:2" pos:end="4547:6">ifdef</cpp:directive> <name pos:start="4547:8" pos:end="4547:18">PR_GET_NAME</name></cpp:ifdef>

        <case pos:start="4549:9" pos:end="4549:25">case <expr pos:start="4549:14" pos:end="4549:24"><name pos:start="4549:14" pos:end="4549:24">PR_GET_NAME</name></expr>:</case>

        <block pos:start="4551:9" pos:end="4569:9">{<block_content pos:start="4553:13" pos:end="4567:18">

            <decl_stmt pos:start="4553:13" pos:end="4553:62"><decl pos:start="4553:13" pos:end="4553:61"><type pos:start="4553:13" pos:end="4553:18"><name pos:start="4553:13" pos:end="4553:16">void</name> <modifier pos:start="4553:18" pos:end="4553:18">*</modifier></type><name pos:start="4553:19" pos:end="4553:22">name</name> <init pos:start="4553:24" pos:end="4553:61">= <expr pos:start="4553:26" pos:end="4553:61"><call pos:start="4553:26" pos:end="4553:61"><name pos:start="4553:26" pos:end="4553:34">lock_user</name><argument_list pos:start="4553:35" pos:end="4553:61">(<argument pos:start="4553:36" pos:end="4553:47"><expr pos:start="4553:36" pos:end="4553:47"><name pos:start="4553:36" pos:end="4553:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4553:50" pos:end="4553:53"><expr pos:start="4553:50" pos:end="4553:53"><name pos:start="4553:50" pos:end="4553:53">arg2</name></expr></argument>, <argument pos:start="4553:56" pos:end="4553:57"><expr pos:start="4553:56" pos:end="4553:57"><literal type="number" pos:start="4553:56" pos:end="4553:57">16</literal></expr></argument>, <argument pos:start="4553:60" pos:end="4553:60"><expr pos:start="4553:60" pos:end="4553:60"><literal type="number" pos:start="4553:60" pos:end="4553:60">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="4555:13" pos:end="4559:13"><if pos:start="4555:13" pos:end="4559:13">if <condition pos:start="4555:16" pos:end="4555:22">(<expr pos:start="4555:17" pos:end="4555:21"><operator pos:start="4555:17" pos:end="4555:17">!</operator><name pos:start="4555:18" pos:end="4555:21">name</name></expr>)</condition> <block pos:start="4555:24" pos:end="4559:13">{<block_content pos:start="4557:17" pos:end="4557:28">

                <goto pos:start="4557:17" pos:end="4557:28">goto <name pos:start="4557:22" pos:end="4557:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4561:13" pos:end="4563:53"><expr pos:start="4561:13" pos:end="4563:52"><name pos:start="4561:13" pos:end="4561:15">ret</name> <operator pos:start="4561:17" pos:end="4561:17">=</operator> <call pos:start="4561:19" pos:end="4563:52"><name pos:start="4561:19" pos:end="4561:27">get_errno</name><argument_list pos:start="4561:28" pos:end="4563:52">(<argument pos:start="4561:29" pos:end="4563:51"><expr pos:start="4561:29" pos:end="4563:51"><call pos:start="4561:29" pos:end="4563:51"><name pos:start="4561:29" pos:end="4561:33">prctl</name><argument_list pos:start="4561:34" pos:end="4563:51">(<argument pos:start="4561:35" pos:end="4561:38"><expr pos:start="4561:35" pos:end="4561:38"><name pos:start="4561:35" pos:end="4561:38">arg1</name></expr></argument>, <argument pos:start="4561:41" pos:end="4561:59"><expr pos:start="4561:41" pos:end="4561:59"><operator pos:start="4561:41" pos:end="4561:41">(</operator><name pos:start="4561:42" pos:end="4561:49">unsigned</name> <name pos:start="4561:51" pos:end="4561:54">long</name><operator pos:start="4561:55" pos:end="4561:55">)</operator><name pos:start="4561:56" pos:end="4561:59">name</name></expr></argument>,

                                  <argument pos:start="4563:35" pos:end="4563:38"><expr pos:start="4563:35" pos:end="4563:38"><name pos:start="4563:35" pos:end="4563:38">arg3</name></expr></argument>, <argument pos:start="4563:41" pos:end="4563:44"><expr pos:start="4563:41" pos:end="4563:44"><name pos:start="4563:41" pos:end="4563:44">arg4</name></expr></argument>, <argument pos:start="4563:47" pos:end="4563:50"><expr pos:start="4563:47" pos:end="4563:50"><name pos:start="4563:47" pos:end="4563:50">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4565:13" pos:end="4565:40"><expr pos:start="4565:13" pos:end="4565:39"><call pos:start="4565:13" pos:end="4565:39"><name pos:start="4565:13" pos:end="4565:23">unlock_user</name><argument_list pos:start="4565:24" pos:end="4565:39">(<argument pos:start="4565:25" pos:end="4565:28"><expr pos:start="4565:25" pos:end="4565:28"><name pos:start="4565:25" pos:end="4565:28">name</name></expr></argument>, <argument pos:start="4565:31" pos:end="4565:34"><expr pos:start="4565:31" pos:end="4565:34"><name pos:start="4565:31" pos:end="4565:34">arg2</name></expr></argument>, <argument pos:start="4565:37" pos:end="4565:38"><expr pos:start="4565:37" pos:end="4565:38"><literal type="number" pos:start="4565:37" pos:end="4565:38">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4567:13" pos:end="4567:18">break;</break>

        </block_content>}</block>

        <case pos:start="4571:9" pos:end="4571:25">case <expr pos:start="4571:14" pos:end="4571:24"><name pos:start="4571:14" pos:end="4571:24">PR_SET_NAME</name></expr>:</case>

        <block pos:start="4573:9" pos:end="4594:0">{<block_content pos:start="4575:13" pos:end="4589:18">

            <decl_stmt pos:start="4575:13" pos:end="4575:61"><decl pos:start="4575:13" pos:end="4575:60"><type pos:start="4575:13" pos:end="4575:18"><name pos:start="4575:13" pos:end="4575:16">void</name> <modifier pos:start="4575:18" pos:end="4575:18">*</modifier></type><name pos:start="4575:19" pos:end="4575:22">name</name> <init pos:start="4575:24" pos:end="4575:60">= <expr pos:start="4575:26" pos:end="4575:60"><call pos:start="4575:26" pos:end="4575:60"><name pos:start="4575:26" pos:end="4575:34">lock_user</name><argument_list pos:start="4575:35" pos:end="4575:60">(<argument pos:start="4575:36" pos:end="4575:46"><expr pos:start="4575:36" pos:end="4575:46"><name pos:start="4575:36" pos:end="4575:46">VERIFY_READ</name></expr></argument>, <argument pos:start="4575:49" pos:end="4575:52"><expr pos:start="4575:49" pos:end="4575:52"><name pos:start="4575:49" pos:end="4575:52">arg2</name></expr></argument>, <argument pos:start="4575:55" pos:end="4575:56"><expr pos:start="4575:55" pos:end="4575:56"><literal type="number" pos:start="4575:55" pos:end="4575:56">16</literal></expr></argument>, <argument pos:start="4575:59" pos:end="4575:59"><expr pos:start="4575:59" pos:end="4575:59"><literal type="number" pos:start="4575:59" pos:end="4575:59">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="4577:13" pos:end="4581:13"><if pos:start="4577:13" pos:end="4581:13">if <condition pos:start="4577:16" pos:end="4577:22">(<expr pos:start="4577:17" pos:end="4577:21"><operator pos:start="4577:17" pos:end="4577:17">!</operator><name pos:start="4577:18" pos:end="4577:21">name</name></expr>)</condition> <block pos:start="4577:24" pos:end="4581:13">{<block_content pos:start="4579:17" pos:end="4579:28">

                <goto pos:start="4579:17" pos:end="4579:28">goto <name pos:start="4579:22" pos:end="4579:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4583:13" pos:end="4585:53"><expr pos:start="4583:13" pos:end="4585:52"><name pos:start="4583:13" pos:end="4583:15">ret</name> <operator pos:start="4583:17" pos:end="4583:17">=</operator> <call pos:start="4583:19" pos:end="4585:52"><name pos:start="4583:19" pos:end="4583:27">get_errno</name><argument_list pos:start="4583:28" pos:end="4585:52">(<argument pos:start="4583:29" pos:end="4585:51"><expr pos:start="4583:29" pos:end="4585:51"><call pos:start="4583:29" pos:end="4585:51"><name pos:start="4583:29" pos:end="4583:33">prctl</name><argument_list pos:start="4583:34" pos:end="4585:51">(<argument pos:start="4583:35" pos:end="4583:38"><expr pos:start="4583:35" pos:end="4583:38"><name pos:start="4583:35" pos:end="4583:38">arg1</name></expr></argument>, <argument pos:start="4583:41" pos:end="4583:59"><expr pos:start="4583:41" pos:end="4583:59"><operator pos:start="4583:41" pos:end="4583:41">(</operator><name pos:start="4583:42" pos:end="4583:49">unsigned</name> <name pos:start="4583:51" pos:end="4583:54">long</name><operator pos:start="4583:55" pos:end="4583:55">)</operator><name pos:start="4583:56" pos:end="4583:59">name</name></expr></argument>,

                                  <argument pos:start="4585:35" pos:end="4585:38"><expr pos:start="4585:35" pos:end="4585:38"><name pos:start="4585:35" pos:end="4585:38">arg3</name></expr></argument>, <argument pos:start="4585:41" pos:end="4585:44"><expr pos:start="4585:41" pos:end="4585:44"><name pos:start="4585:41" pos:end="4585:44">arg4</name></expr></argument>, <argument pos:start="4585:47" pos:end="4585:50"><expr pos:start="4585:47" pos:end="4585:50"><name pos:start="4585:47" pos:end="4585:50">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4587:13" pos:end="4587:39"><expr pos:start="4587:13" pos:end="4587:38"><call pos:start="4587:13" pos:end="4587:38"><name pos:start="4587:13" pos:end="4587:23">unlock_user</name><argument_list pos:start="4587:24" pos:end="4587:38">(<argument pos:start="4587:25" pos:end="4587:28"><expr pos:start="4587:25" pos:end="4587:28"><name pos:start="4587:25" pos:end="4587:28">name</name></expr></argument>, <argument pos:start="4587:31" pos:end="4587:34"><expr pos:start="4587:31" pos:end="4587:34"><name pos:start="4587:31" pos:end="4587:34">arg2</name></expr></argument>, <argument pos:start="4587:37" pos:end="4587:37"><expr pos:start="4587:37" pos:end="4587:37"><literal type="number" pos:start="4587:37" pos:end="4587:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4589:13" pos:end="4589:18">break;</break>

        </block_content>}</block>

<cpp:endif pos:start="4593:1" pos:end="4593:6">#<cpp:directive pos:start="4593:2" pos:end="4593:6">endif</cpp:directive></cpp:endif>

        <default pos:start="4595:9" pos:end="4595:16">default:</default>

            <comment type="block" pos:start="4597:13" pos:end="4597:62">/* Most prctl options have no pointer arguments */</comment>

            <expr_stmt pos:start="4599:13" pos:end="4599:65"><expr pos:start="4599:13" pos:end="4599:64"><name pos:start="4599:13" pos:end="4599:15">ret</name> <operator pos:start="4599:17" pos:end="4599:17">=</operator> <call pos:start="4599:19" pos:end="4599:64"><name pos:start="4599:19" pos:end="4599:27">get_errno</name><argument_list pos:start="4599:28" pos:end="4599:64">(<argument pos:start="4599:29" pos:end="4599:63"><expr pos:start="4599:29" pos:end="4599:63"><call pos:start="4599:29" pos:end="4599:63"><name pos:start="4599:29" pos:end="4599:33">prctl</name><argument_list pos:start="4599:34" pos:end="4599:63">(<argument pos:start="4599:35" pos:end="4599:38"><expr pos:start="4599:35" pos:end="4599:38"><name pos:start="4599:35" pos:end="4599:38">arg1</name></expr></argument>, <argument pos:start="4599:41" pos:end="4599:44"><expr pos:start="4599:41" pos:end="4599:44"><name pos:start="4599:41" pos:end="4599:44">arg2</name></expr></argument>, <argument pos:start="4599:47" pos:end="4599:50"><expr pos:start="4599:47" pos:end="4599:50"><name pos:start="4599:47" pos:end="4599:50">arg3</name></expr></argument>, <argument pos:start="4599:53" pos:end="4599:56"><expr pos:start="4599:53" pos:end="4599:56"><name pos:start="4599:53" pos:end="4599:56">arg4</name></expr></argument>, <argument pos:start="4599:59" pos:end="4599:62"><expr pos:start="4599:59" pos:end="4599:62"><name pos:start="4599:59" pos:end="4599:62">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4601:13" pos:end="4601:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="4605:9" pos:end="4608:0">break;</break>

<cpp:ifdef pos:start="4607:1" pos:end="4607:27">#<cpp:directive pos:start="4607:2" pos:end="4607:6">ifdef</cpp:directive> <name pos:start="4607:8" pos:end="4607:27">TARGET_NR_arch_prctl</name></cpp:ifdef>

    <case pos:start="4609:5" pos:end="4612:0">case <expr pos:start="4609:10" pos:end="4609:29"><name pos:start="4609:10" pos:end="4609:29">TARGET_NR_arch_prctl</name></expr>:</case>

<cpp:if pos:start="4611:1" pos:end="4611:50">#<cpp:directive pos:start="4611:2" pos:end="4611:3">if</cpp:directive> <expr pos:start="4611:5" pos:end="4611:50"><call pos:start="4611:5" pos:end="4611:24"><name pos:start="4611:5" pos:end="4611:11">defined</name><argument_list pos:start="4611:12" pos:end="4611:24">(<argument pos:start="4611:13" pos:end="4611:23"><expr pos:start="4611:13" pos:end="4611:23"><name pos:start="4611:13" pos:end="4611:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="4611:26" pos:end="4611:27">&amp;&amp;</operator> <operator pos:start="4611:29" pos:end="4611:29">!</operator><call pos:start="4611:30" pos:end="4611:50"><name pos:start="4611:30" pos:end="4611:36">defined</name><argument_list pos:start="4611:37" pos:end="4611:50">(<argument pos:start="4611:38" pos:end="4611:49"><expr pos:start="4611:38" pos:end="4611:49"><name pos:start="4611:38" pos:end="4611:49">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="4613:9" pos:end="4613:49"><expr pos:start="4613:9" pos:end="4613:48"><name pos:start="4613:9" pos:end="4613:11">ret</name> <operator pos:start="4613:13" pos:end="4613:13">=</operator> <call pos:start="4613:15" pos:end="4613:48"><name pos:start="4613:15" pos:end="4613:27">do_arch_prctl</name><argument_list pos:start="4613:28" pos:end="4613:48">(<argument pos:start="4613:29" pos:end="4613:35"><expr pos:start="4613:29" pos:end="4613:35"><name pos:start="4613:29" pos:end="4613:35">cpu_env</name></expr></argument>, <argument pos:start="4613:38" pos:end="4613:41"><expr pos:start="4613:38" pos:end="4613:41"><name pos:start="4613:38" pos:end="4613:41">arg1</name></expr></argument>, <argument pos:start="4613:44" pos:end="4613:47"><expr pos:start="4613:44" pos:end="4613:47"><name pos:start="4613:44" pos:end="4613:47">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4615:9" pos:end="4618:0">break;</break>

<cpp:else pos:start="4617:1" pos:end="4617:5">#<cpp:directive pos:start="4617:2" pos:end="4617:5">else</cpp:directive></cpp:else>

        <goto pos:start="4619:9" pos:end="4626:0">goto <name pos:start="4619:14" pos:end="4619:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4621:1" pos:end="4621:6">#<cpp:directive pos:start="4621:2" pos:end="4621:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="4623:1" pos:end="4623:6">#<cpp:directive pos:start="4623:2" pos:end="4623:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4625:1" pos:end="4625:22">#<cpp:directive pos:start="4625:2" pos:end="4625:6">ifdef</cpp:directive> <name pos:start="4625:8" pos:end="4625:22">TARGET_NR_pread</name></cpp:ifdef>

    <case pos:start="4627:5" pos:end="4627:25">case <expr pos:start="4627:10" pos:end="4627:24"><name pos:start="4627:10" pos:end="4627:24">TARGET_NR_pread</name></expr>:</case>

        <if_stmt pos:start="4629:9" pos:end="4631:24"><if pos:start="4629:9" pos:end="4631:24">if <condition pos:start="4629:12" pos:end="4629:38">(<expr pos:start="4629:13" pos:end="4629:37"><call pos:start="4629:13" pos:end="4629:37"><name pos:start="4629:13" pos:end="4629:28">regpairs_aligned</name><argument_list pos:start="4629:29" pos:end="4629:37">(<argument pos:start="4629:30" pos:end="4629:36"><expr pos:start="4629:30" pos:end="4629:36"><name pos:start="4629:30" pos:end="4629:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4631:13" pos:end="4631:24"><block_content pos:start="4631:13" pos:end="4631:24">

            <expr_stmt pos:start="4631:13" pos:end="4631:24"><expr pos:start="4631:13" pos:end="4631:23"><name pos:start="4631:13" pos:end="4631:16">arg4</name> <operator pos:start="4631:18" pos:end="4631:18">=</operator> <name pos:start="4631:20" pos:end="4631:23">arg5</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="4633:9" pos:end="4635:24"><if pos:start="4633:9" pos:end="4635:24">if <condition pos:start="4633:12" pos:end="4633:58">(<expr pos:start="4633:13" pos:end="4633:57"><operator pos:start="4633:13" pos:end="4633:13">!</operator><operator pos:start="4633:14" pos:end="4633:14">(</operator><name pos:start="4633:15" pos:end="4633:15">p</name> <operator pos:start="4633:17" pos:end="4633:17">=</operator> <call pos:start="4633:19" pos:end="4633:56"><name pos:start="4633:19" pos:end="4633:27">lock_user</name><argument_list pos:start="4633:28" pos:end="4633:56">(<argument pos:start="4633:29" pos:end="4633:40"><expr pos:start="4633:29" pos:end="4633:40"><name pos:start="4633:29" pos:end="4633:40">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4633:43" pos:end="4633:46"><expr pos:start="4633:43" pos:end="4633:46"><name pos:start="4633:43" pos:end="4633:46">arg2</name></expr></argument>, <argument pos:start="4633:49" pos:end="4633:52"><expr pos:start="4633:49" pos:end="4633:52"><name pos:start="4633:49" pos:end="4633:52">arg3</name></expr></argument>, <argument pos:start="4633:55" pos:end="4633:55"><expr pos:start="4633:55" pos:end="4633:55"><literal type="number" pos:start="4633:55" pos:end="4633:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="4633:57" pos:end="4633:57">)</operator></expr>)</condition><block type="pseudo" pos:start="4635:13" pos:end="4635:24"><block_content pos:start="4635:13" pos:end="4635:24">

            <goto pos:start="4635:13" pos:end="4635:24">goto <name pos:start="4635:18" pos:end="4635:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4637:9" pos:end="4637:52"><expr pos:start="4637:9" pos:end="4637:51"><name pos:start="4637:9" pos:end="4637:11">ret</name> <operator pos:start="4637:13" pos:end="4637:13">=</operator> <call pos:start="4637:15" pos:end="4637:51"><name pos:start="4637:15" pos:end="4637:23">get_errno</name><argument_list pos:start="4637:24" pos:end="4637:51">(<argument pos:start="4637:25" pos:end="4637:50"><expr pos:start="4637:25" pos:end="4637:50"><call pos:start="4637:25" pos:end="4637:50"><name pos:start="4637:25" pos:end="4637:29">pread</name><argument_list pos:start="4637:30" pos:end="4637:50">(<argument pos:start="4637:31" pos:end="4637:34"><expr pos:start="4637:31" pos:end="4637:34"><name pos:start="4637:31" pos:end="4637:34">arg1</name></expr></argument>, <argument pos:start="4637:37" pos:end="4637:37"><expr pos:start="4637:37" pos:end="4637:37"><name pos:start="4637:37" pos:end="4637:37">p</name></expr></argument>, <argument pos:start="4637:40" pos:end="4637:43"><expr pos:start="4637:40" pos:end="4637:43"><name pos:start="4637:40" pos:end="4637:43">arg3</name></expr></argument>, <argument pos:start="4637:46" pos:end="4637:49"><expr pos:start="4637:46" pos:end="4637:49"><name pos:start="4637:46" pos:end="4637:49">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4639:9" pos:end="4639:34"><expr pos:start="4639:9" pos:end="4639:33"><call pos:start="4639:9" pos:end="4639:33"><name pos:start="4639:9" pos:end="4639:19">unlock_user</name><argument_list pos:start="4639:20" pos:end="4639:33">(<argument pos:start="4639:21" pos:end="4639:21"><expr pos:start="4639:21" pos:end="4639:21"><name pos:start="4639:21" pos:end="4639:21">p</name></expr></argument>, <argument pos:start="4639:24" pos:end="4639:27"><expr pos:start="4639:24" pos:end="4639:27"><name pos:start="4639:24" pos:end="4639:27">arg2</name></expr></argument>, <argument pos:start="4639:30" pos:end="4639:32"><expr pos:start="4639:30" pos:end="4639:32"><name pos:start="4639:30" pos:end="4639:32">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4641:9" pos:end="4641:14">break;</break>

    <case pos:start="4643:5" pos:end="4643:26">case <expr pos:start="4643:10" pos:end="4643:25"><name pos:start="4643:10" pos:end="4643:25">TARGET_NR_pwrite</name></expr>:</case>

        <if_stmt pos:start="4645:9" pos:end="4647:24"><if pos:start="4645:9" pos:end="4647:24">if <condition pos:start="4645:12" pos:end="4645:38">(<expr pos:start="4645:13" pos:end="4645:37"><call pos:start="4645:13" pos:end="4645:37"><name pos:start="4645:13" pos:end="4645:28">regpairs_aligned</name><argument_list pos:start="4645:29" pos:end="4645:37">(<argument pos:start="4645:30" pos:end="4645:36"><expr pos:start="4645:30" pos:end="4645:36"><name pos:start="4645:30" pos:end="4645:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4647:13" pos:end="4647:24"><block_content pos:start="4647:13" pos:end="4647:24">

            <expr_stmt pos:start="4647:13" pos:end="4647:24"><expr pos:start="4647:13" pos:end="4647:23"><name pos:start="4647:13" pos:end="4647:16">arg4</name> <operator pos:start="4647:18" pos:end="4647:18">=</operator> <name pos:start="4647:20" pos:end="4647:23">arg5</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="4649:9" pos:end="4651:24"><if pos:start="4649:9" pos:end="4651:24">if <condition pos:start="4649:12" pos:end="4649:57">(<expr pos:start="4649:13" pos:end="4649:56"><operator pos:start="4649:13" pos:end="4649:13">!</operator><operator pos:start="4649:14" pos:end="4649:14">(</operator><name pos:start="4649:15" pos:end="4649:15">p</name> <operator pos:start="4649:17" pos:end="4649:17">=</operator> <call pos:start="4649:19" pos:end="4649:55"><name pos:start="4649:19" pos:end="4649:27">lock_user</name><argument_list pos:start="4649:28" pos:end="4649:55">(<argument pos:start="4649:29" pos:end="4649:39"><expr pos:start="4649:29" pos:end="4649:39"><name pos:start="4649:29" pos:end="4649:39">VERIFY_READ</name></expr></argument>, <argument pos:start="4649:42" pos:end="4649:45"><expr pos:start="4649:42" pos:end="4649:45"><name pos:start="4649:42" pos:end="4649:45">arg2</name></expr></argument>, <argument pos:start="4649:48" pos:end="4649:51"><expr pos:start="4649:48" pos:end="4649:51"><name pos:start="4649:48" pos:end="4649:51">arg3</name></expr></argument>, <argument pos:start="4649:54" pos:end="4649:54"><expr pos:start="4649:54" pos:end="4649:54"><literal type="number" pos:start="4649:54" pos:end="4649:54">1</literal></expr></argument>)</argument_list></call><operator pos:start="4649:56" pos:end="4649:56">)</operator></expr>)</condition><block type="pseudo" pos:start="4651:13" pos:end="4651:24"><block_content pos:start="4651:13" pos:end="4651:24">

            <goto pos:start="4651:13" pos:end="4651:24">goto <name pos:start="4651:18" pos:end="4651:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4653:9" pos:end="4653:53"><expr pos:start="4653:9" pos:end="4653:52"><name pos:start="4653:9" pos:end="4653:11">ret</name> <operator pos:start="4653:13" pos:end="4653:13">=</operator> <call pos:start="4653:15" pos:end="4653:52"><name pos:start="4653:15" pos:end="4653:23">get_errno</name><argument_list pos:start="4653:24" pos:end="4653:52">(<argument pos:start="4653:25" pos:end="4653:51"><expr pos:start="4653:25" pos:end="4653:51"><call pos:start="4653:25" pos:end="4653:51"><name pos:start="4653:25" pos:end="4653:30">pwrite</name><argument_list pos:start="4653:31" pos:end="4653:51">(<argument pos:start="4653:32" pos:end="4653:35"><expr pos:start="4653:32" pos:end="4653:35"><name pos:start="4653:32" pos:end="4653:35">arg1</name></expr></argument>, <argument pos:start="4653:38" pos:end="4653:38"><expr pos:start="4653:38" pos:end="4653:38"><name pos:start="4653:38" pos:end="4653:38">p</name></expr></argument>, <argument pos:start="4653:41" pos:end="4653:44"><expr pos:start="4653:41" pos:end="4653:44"><name pos:start="4653:41" pos:end="4653:44">arg3</name></expr></argument>, <argument pos:start="4653:47" pos:end="4653:50"><expr pos:start="4653:47" pos:end="4653:50"><name pos:start="4653:47" pos:end="4653:50">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4655:9" pos:end="4655:32"><expr pos:start="4655:9" pos:end="4655:31"><call pos:start="4655:9" pos:end="4655:31"><name pos:start="4655:9" pos:end="4655:19">unlock_user</name><argument_list pos:start="4655:20" pos:end="4655:31">(<argument pos:start="4655:21" pos:end="4655:21"><expr pos:start="4655:21" pos:end="4655:21"><name pos:start="4655:21" pos:end="4655:21">p</name></expr></argument>, <argument pos:start="4655:24" pos:end="4655:27"><expr pos:start="4655:24" pos:end="4655:27"><name pos:start="4655:24" pos:end="4655:27">arg2</name></expr></argument>, <argument pos:start="4655:30" pos:end="4655:30"><expr pos:start="4655:30" pos:end="4655:30"><literal type="number" pos:start="4655:30" pos:end="4655:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4657:9" pos:end="4662:0">break;</break>

<cpp:endif pos:start="4659:1" pos:end="4659:6">#<cpp:directive pos:start="4659:2" pos:end="4659:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4661:1" pos:end="4661:24">#<cpp:directive pos:start="4661:2" pos:end="4661:6">ifdef</cpp:directive> <name pos:start="4661:8" pos:end="4661:24">TARGET_NR_pread64</name></cpp:ifdef>

    <case pos:start="4663:5" pos:end="4663:27">case <expr pos:start="4663:10" pos:end="4663:26"><name pos:start="4663:10" pos:end="4663:26">TARGET_NR_pread64</name></expr>:</case>

        <if_stmt pos:start="4665:9" pos:end="4667:24"><if pos:start="4665:9" pos:end="4667:24">if <condition pos:start="4665:12" pos:end="4665:58">(<expr pos:start="4665:13" pos:end="4665:57"><operator pos:start="4665:13" pos:end="4665:13">!</operator><operator pos:start="4665:14" pos:end="4665:14">(</operator><name pos:start="4665:15" pos:end="4665:15">p</name> <operator pos:start="4665:17" pos:end="4665:17">=</operator> <call pos:start="4665:19" pos:end="4665:56"><name pos:start="4665:19" pos:end="4665:27">lock_user</name><argument_list pos:start="4665:28" pos:end="4665:56">(<argument pos:start="4665:29" pos:end="4665:40"><expr pos:start="4665:29" pos:end="4665:40"><name pos:start="4665:29" pos:end="4665:40">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4665:43" pos:end="4665:46"><expr pos:start="4665:43" pos:end="4665:46"><name pos:start="4665:43" pos:end="4665:46">arg2</name></expr></argument>, <argument pos:start="4665:49" pos:end="4665:52"><expr pos:start="4665:49" pos:end="4665:52"><name pos:start="4665:49" pos:end="4665:52">arg3</name></expr></argument>, <argument pos:start="4665:55" pos:end="4665:55"><expr pos:start="4665:55" pos:end="4665:55"><literal type="number" pos:start="4665:55" pos:end="4665:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="4665:57" pos:end="4665:57">)</operator></expr>)</condition><block type="pseudo" pos:start="4667:13" pos:end="4667:24"><block_content pos:start="4667:13" pos:end="4667:24">

            <goto pos:start="4667:13" pos:end="4667:24">goto <name pos:start="4667:18" pos:end="4667:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4669:9" pos:end="4669:77"><expr pos:start="4669:9" pos:end="4669:76"><name pos:start="4669:9" pos:end="4669:11">ret</name> <operator pos:start="4669:13" pos:end="4669:13">=</operator> <call pos:start="4669:15" pos:end="4669:76"><name pos:start="4669:15" pos:end="4669:23">get_errno</name><argument_list pos:start="4669:24" pos:end="4669:76">(<argument pos:start="4669:25" pos:end="4669:75"><expr pos:start="4669:25" pos:end="4669:75"><call pos:start="4669:25" pos:end="4669:75"><name pos:start="4669:25" pos:end="4669:31">pread64</name><argument_list pos:start="4669:32" pos:end="4669:75">(<argument pos:start="4669:33" pos:end="4669:36"><expr pos:start="4669:33" pos:end="4669:36"><name pos:start="4669:33" pos:end="4669:36">arg1</name></expr></argument>, <argument pos:start="4669:39" pos:end="4669:39"><expr pos:start="4669:39" pos:end="4669:39"><name pos:start="4669:39" pos:end="4669:39">p</name></expr></argument>, <argument pos:start="4669:42" pos:end="4669:45"><expr pos:start="4669:42" pos:end="4669:45"><name pos:start="4669:42" pos:end="4669:45">arg3</name></expr></argument>, <argument pos:start="4669:48" pos:end="4669:74"><expr pos:start="4669:48" pos:end="4669:74"><call pos:start="4669:48" pos:end="4669:74"><name pos:start="4669:48" pos:end="4669:62">target_offset64</name><argument_list pos:start="4669:63" pos:end="4669:74">(<argument pos:start="4669:64" pos:end="4669:67"><expr pos:start="4669:64" pos:end="4669:67"><name pos:start="4669:64" pos:end="4669:67">arg4</name></expr></argument>, <argument pos:start="4669:70" pos:end="4669:73"><expr pos:start="4669:70" pos:end="4669:73"><name pos:start="4669:70" pos:end="4669:73">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4671:9" pos:end="4671:34"><expr pos:start="4671:9" pos:end="4671:33"><call pos:start="4671:9" pos:end="4671:33"><name pos:start="4671:9" pos:end="4671:19">unlock_user</name><argument_list pos:start="4671:20" pos:end="4671:33">(<argument pos:start="4671:21" pos:end="4671:21"><expr pos:start="4671:21" pos:end="4671:21"><name pos:start="4671:21" pos:end="4671:21">p</name></expr></argument>, <argument pos:start="4671:24" pos:end="4671:27"><expr pos:start="4671:24" pos:end="4671:27"><name pos:start="4671:24" pos:end="4671:27">arg2</name></expr></argument>, <argument pos:start="4671:30" pos:end="4671:32"><expr pos:start="4671:30" pos:end="4671:32"><name pos:start="4671:30" pos:end="4671:32">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4673:9" pos:end="4673:14">break;</break>

    <case pos:start="4675:5" pos:end="4675:28">case <expr pos:start="4675:10" pos:end="4675:27"><name pos:start="4675:10" pos:end="4675:27">TARGET_NR_pwrite64</name></expr>:</case>

        <if_stmt pos:start="4677:9" pos:end="4679:24"><if pos:start="4677:9" pos:end="4679:24">if <condition pos:start="4677:12" pos:end="4677:57">(<expr pos:start="4677:13" pos:end="4677:56"><operator pos:start="4677:13" pos:end="4677:13">!</operator><operator pos:start="4677:14" pos:end="4677:14">(</operator><name pos:start="4677:15" pos:end="4677:15">p</name> <operator pos:start="4677:17" pos:end="4677:17">=</operator> <call pos:start="4677:19" pos:end="4677:55"><name pos:start="4677:19" pos:end="4677:27">lock_user</name><argument_list pos:start="4677:28" pos:end="4677:55">(<argument pos:start="4677:29" pos:end="4677:39"><expr pos:start="4677:29" pos:end="4677:39"><name pos:start="4677:29" pos:end="4677:39">VERIFY_READ</name></expr></argument>, <argument pos:start="4677:42" pos:end="4677:45"><expr pos:start="4677:42" pos:end="4677:45"><name pos:start="4677:42" pos:end="4677:45">arg2</name></expr></argument>, <argument pos:start="4677:48" pos:end="4677:51"><expr pos:start="4677:48" pos:end="4677:51"><name pos:start="4677:48" pos:end="4677:51">arg3</name></expr></argument>, <argument pos:start="4677:54" pos:end="4677:54"><expr pos:start="4677:54" pos:end="4677:54"><literal type="number" pos:start="4677:54" pos:end="4677:54">1</literal></expr></argument>)</argument_list></call><operator pos:start="4677:56" pos:end="4677:56">)</operator></expr>)</condition><block type="pseudo" pos:start="4679:13" pos:end="4679:24"><block_content pos:start="4679:13" pos:end="4679:24">

            <goto pos:start="4679:13" pos:end="4679:24">goto <name pos:start="4679:18" pos:end="4679:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4681:9" pos:end="4681:78"><expr pos:start="4681:9" pos:end="4681:77"><name pos:start="4681:9" pos:end="4681:11">ret</name> <operator pos:start="4681:13" pos:end="4681:13">=</operator> <call pos:start="4681:15" pos:end="4681:77"><name pos:start="4681:15" pos:end="4681:23">get_errno</name><argument_list pos:start="4681:24" pos:end="4681:77">(<argument pos:start="4681:25" pos:end="4681:76"><expr pos:start="4681:25" pos:end="4681:76"><call pos:start="4681:25" pos:end="4681:76"><name pos:start="4681:25" pos:end="4681:32">pwrite64</name><argument_list pos:start="4681:33" pos:end="4681:76">(<argument pos:start="4681:34" pos:end="4681:37"><expr pos:start="4681:34" pos:end="4681:37"><name pos:start="4681:34" pos:end="4681:37">arg1</name></expr></argument>, <argument pos:start="4681:40" pos:end="4681:40"><expr pos:start="4681:40" pos:end="4681:40"><name pos:start="4681:40" pos:end="4681:40">p</name></expr></argument>, <argument pos:start="4681:43" pos:end="4681:46"><expr pos:start="4681:43" pos:end="4681:46"><name pos:start="4681:43" pos:end="4681:46">arg3</name></expr></argument>, <argument pos:start="4681:49" pos:end="4681:75"><expr pos:start="4681:49" pos:end="4681:75"><call pos:start="4681:49" pos:end="4681:75"><name pos:start="4681:49" pos:end="4681:63">target_offset64</name><argument_list pos:start="4681:64" pos:end="4681:75">(<argument pos:start="4681:65" pos:end="4681:68"><expr pos:start="4681:65" pos:end="4681:68"><name pos:start="4681:65" pos:end="4681:68">arg4</name></expr></argument>, <argument pos:start="4681:71" pos:end="4681:74"><expr pos:start="4681:71" pos:end="4681:74"><name pos:start="4681:71" pos:end="4681:74">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4683:9" pos:end="4683:32"><expr pos:start="4683:9" pos:end="4683:31"><call pos:start="4683:9" pos:end="4683:31"><name pos:start="4683:9" pos:end="4683:19">unlock_user</name><argument_list pos:start="4683:20" pos:end="4683:31">(<argument pos:start="4683:21" pos:end="4683:21"><expr pos:start="4683:21" pos:end="4683:21"><name pos:start="4683:21" pos:end="4683:21">p</name></expr></argument>, <argument pos:start="4683:24" pos:end="4683:27"><expr pos:start="4683:24" pos:end="4683:27"><name pos:start="4683:24" pos:end="4683:27">arg2</name></expr></argument>, <argument pos:start="4683:30" pos:end="4683:30"><expr pos:start="4683:30" pos:end="4683:30"><literal type="number" pos:start="4683:30" pos:end="4683:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4685:9" pos:end="4688:0">break;</break>

<cpp:endif pos:start="4687:1" pos:end="4687:6">#<cpp:directive pos:start="4687:2" pos:end="4687:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4689:5" pos:end="4689:26">case <expr pos:start="4689:10" pos:end="4689:25"><name pos:start="4689:10" pos:end="4689:25">TARGET_NR_getcwd</name></expr>:</case>

        <if_stmt pos:start="4691:9" pos:end="4693:24"><if pos:start="4691:9" pos:end="4693:24">if <condition pos:start="4691:12" pos:end="4691:58">(<expr pos:start="4691:13" pos:end="4691:57"><operator pos:start="4691:13" pos:end="4691:13">!</operator><operator pos:start="4691:14" pos:end="4691:14">(</operator><name pos:start="4691:15" pos:end="4691:15">p</name> <operator pos:start="4691:17" pos:end="4691:17">=</operator> <call pos:start="4691:19" pos:end="4691:56"><name pos:start="4691:19" pos:end="4691:27">lock_user</name><argument_list pos:start="4691:28" pos:end="4691:56">(<argument pos:start="4691:29" pos:end="4691:40"><expr pos:start="4691:29" pos:end="4691:40"><name pos:start="4691:29" pos:end="4691:40">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4691:43" pos:end="4691:46"><expr pos:start="4691:43" pos:end="4691:46"><name pos:start="4691:43" pos:end="4691:46">arg1</name></expr></argument>, <argument pos:start="4691:49" pos:end="4691:52"><expr pos:start="4691:49" pos:end="4691:52"><name pos:start="4691:49" pos:end="4691:52">arg2</name></expr></argument>, <argument pos:start="4691:55" pos:end="4691:55"><expr pos:start="4691:55" pos:end="4691:55"><literal type="number" pos:start="4691:55" pos:end="4691:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="4691:57" pos:end="4691:57">)</operator></expr>)</condition><block type="pseudo" pos:start="4693:13" pos:end="4693:24"><block_content pos:start="4693:13" pos:end="4693:24">

            <goto pos:start="4693:13" pos:end="4693:24">goto <name pos:start="4693:18" pos:end="4693:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4695:9" pos:end="4695:46"><expr pos:start="4695:9" pos:end="4695:45"><name pos:start="4695:9" pos:end="4695:11">ret</name> <operator pos:start="4695:13" pos:end="4695:13">=</operator> <call pos:start="4695:15" pos:end="4695:45"><name pos:start="4695:15" pos:end="4695:23">get_errno</name><argument_list pos:start="4695:24" pos:end="4695:45">(<argument pos:start="4695:25" pos:end="4695:44"><expr pos:start="4695:25" pos:end="4695:44"><call pos:start="4695:25" pos:end="4695:44"><name pos:start="4695:25" pos:end="4695:35">sys_getcwd1</name><argument_list pos:start="4695:36" pos:end="4695:44">(<argument pos:start="4695:37" pos:end="4695:37"><expr pos:start="4695:37" pos:end="4695:37"><name pos:start="4695:37" pos:end="4695:37">p</name></expr></argument>, <argument pos:start="4695:40" pos:end="4695:43"><expr pos:start="4695:40" pos:end="4695:43"><name pos:start="4695:40" pos:end="4695:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4697:9" pos:end="4697:34"><expr pos:start="4697:9" pos:end="4697:33"><call pos:start="4697:9" pos:end="4697:33"><name pos:start="4697:9" pos:end="4697:19">unlock_user</name><argument_list pos:start="4697:20" pos:end="4697:33">(<argument pos:start="4697:21" pos:end="4697:21"><expr pos:start="4697:21" pos:end="4697:21"><name pos:start="4697:21" pos:end="4697:21">p</name></expr></argument>, <argument pos:start="4697:24" pos:end="4697:27"><expr pos:start="4697:24" pos:end="4697:27"><name pos:start="4697:24" pos:end="4697:27">arg1</name></expr></argument>, <argument pos:start="4697:30" pos:end="4697:32"><expr pos:start="4697:30" pos:end="4697:32"><name pos:start="4697:30" pos:end="4697:32">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4699:9" pos:end="4699:14">break;</break>

    <case pos:start="4701:5" pos:end="4701:26">case <expr pos:start="4701:10" pos:end="4701:25"><name pos:start="4701:10" pos:end="4701:25">TARGET_NR_capget</name></expr>:</case>

        <goto pos:start="4703:9" pos:end="4703:27">goto <name pos:start="4703:14" pos:end="4703:26">unimplemented</name>;</goto>

    <case pos:start="4705:5" pos:end="4705:26">case <expr pos:start="4705:10" pos:end="4705:25"><name pos:start="4705:10" pos:end="4705:25">TARGET_NR_capset</name></expr>:</case>

        <goto pos:start="4707:9" pos:end="4707:27">goto <name pos:start="4707:14" pos:end="4707:26">unimplemented</name>;</goto>

    <case pos:start="4709:5" pos:end="4716:0">case <expr pos:start="4709:10" pos:end="4709:30"><name pos:start="4709:10" pos:end="4709:30">TARGET_NR_sigaltstack</name></expr>:</case>

<cpp:if pos:start="4711:1" pos:end="4715:77">#<cpp:directive pos:start="4711:2" pos:end="4711:3">if</cpp:directive> <expr pos:start="4711:5" pos:end="4715:77"><call pos:start="4711:5" pos:end="4711:24"><name pos:start="4711:5" pos:end="4711:11">defined</name><argument_list pos:start="4711:12" pos:end="4711:24">(<argument pos:start="4711:13" pos:end="4711:23"><expr pos:start="4711:13" pos:end="4711:23"><name pos:start="4711:13" pos:end="4711:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="4711:26" pos:end="4711:27">||</operator> <call pos:start="4711:29" pos:end="4711:47"><name pos:start="4711:29" pos:end="4711:35">defined</name><argument_list pos:start="4711:36" pos:end="4711:47">(<argument pos:start="4711:37" pos:end="4711:46"><expr pos:start="4711:37" pos:end="4711:46"><name pos:start="4711:37" pos:end="4711:46">TARGET_ARM</name></expr></argument>)</argument_list></call> <operator pos:start="4711:49" pos:end="4711:50">||</operator> <call pos:start="4711:52" pos:end="4711:71"><name pos:start="4711:52" pos:end="4711:58">defined</name><argument_list pos:start="4711:59" pos:end="4711:71">(<argument pos:start="4711:60" pos:end="4711:70"><expr pos:start="4711:60" pos:end="4711:70"><name pos:start="4711:60" pos:end="4711:70">TARGET_MIPS</name></expr></argument>)</argument_list></call> <operator pos:start="4711:73" pos:end="4711:74">||</operator> \

    <call pos:start="4713:5" pos:end="4713:25"><name pos:start="4713:5" pos:end="4713:11">defined</name><argument_list pos:start="4713:12" pos:end="4713:25">(<argument pos:start="4713:13" pos:end="4713:24"><expr pos:start="4713:13" pos:end="4713:24"><name pos:start="4713:13" pos:end="4713:24">TARGET_SPARC</name></expr></argument>)</argument_list></call> <operator pos:start="4713:27" pos:end="4713:28">||</operator> <call pos:start="4713:30" pos:end="4713:48"><name pos:start="4713:30" pos:end="4713:36">defined</name><argument_list pos:start="4713:37" pos:end="4713:48">(<argument pos:start="4713:38" pos:end="4713:47"><expr pos:start="4713:38" pos:end="4713:47"><name pos:start="4713:38" pos:end="4713:47">TARGET_PPC</name></expr></argument>)</argument_list></call> <operator pos:start="4713:50" pos:end="4713:51">||</operator> <call pos:start="4713:53" pos:end="4713:73"><name pos:start="4713:53" pos:end="4713:59">defined</name><argument_list pos:start="4713:60" pos:end="4713:73">(<argument pos:start="4713:61" pos:end="4713:72"><expr pos:start="4713:61" pos:end="4713:72"><name pos:start="4713:61" pos:end="4713:72">TARGET_ALPHA</name></expr></argument>)</argument_list></call> <operator pos:start="4713:75" pos:end="4713:76">||</operator> \

    <call pos:start="4715:5" pos:end="4715:24"><name pos:start="4715:5" pos:end="4715:11">defined</name><argument_list pos:start="4715:12" pos:end="4715:24">(<argument pos:start="4715:13" pos:end="4715:23"><expr pos:start="4715:13" pos:end="4715:23"><name pos:start="4715:13" pos:end="4715:23">TARGET_M68K</name></expr></argument>)</argument_list></call> <operator pos:start="4715:26" pos:end="4715:27">||</operator> <call pos:start="4715:29" pos:end="4715:49"><name pos:start="4715:29" pos:end="4715:35">defined</name><argument_list pos:start="4715:36" pos:end="4715:49">(<argument pos:start="4715:37" pos:end="4715:48"><expr pos:start="4715:37" pos:end="4715:48"><name pos:start="4715:37" pos:end="4715:48">TARGET_S390X</name></expr></argument>)</argument_list></call> <operator pos:start="4715:51" pos:end="4715:52">||</operator> <call pos:start="4715:54" pos:end="4715:77"><name pos:start="4715:54" pos:end="4715:60">defined</name><argument_list pos:start="4715:61" pos:end="4715:77">(<argument pos:start="4715:62" pos:end="4715:76"><expr pos:start="4715:62" pos:end="4715:76"><name pos:start="4715:62" pos:end="4715:76">TARGET_OPENRISC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="4717:9" pos:end="4717:88"><expr pos:start="4717:9" pos:end="4717:87"><name pos:start="4717:9" pos:end="4717:11">ret</name> <operator pos:start="4717:13" pos:end="4717:13">=</operator> <call pos:start="4717:15" pos:end="4717:87"><name pos:start="4717:15" pos:end="4717:28">do_sigaltstack</name><argument_list pos:start="4717:29" pos:end="4717:87">(<argument pos:start="4717:30" pos:end="4717:33"><expr pos:start="4717:30" pos:end="4717:33"><name pos:start="4717:30" pos:end="4717:33">arg1</name></expr></argument>, <argument pos:start="4717:36" pos:end="4717:39"><expr pos:start="4717:36" pos:end="4717:39"><name pos:start="4717:36" pos:end="4717:39">arg2</name></expr></argument>, <argument pos:start="4717:42" pos:end="4717:86"><expr pos:start="4717:42" pos:end="4717:86"><call pos:start="4717:42" pos:end="4717:86"><name pos:start="4717:42" pos:end="4717:61">get_sp_from_cpustate</name><argument_list pos:start="4717:62" pos:end="4717:86">(<argument pos:start="4717:63" pos:end="4717:85"><expr pos:start="4717:63" pos:end="4717:85"><operator pos:start="4717:63" pos:end="4717:63">(</operator><name pos:start="4717:64" pos:end="4717:75">CPUArchState</name> <operator pos:start="4717:77" pos:end="4717:77">*</operator><operator pos:start="4717:78" pos:end="4717:78">)</operator><name pos:start="4717:79" pos:end="4717:85">cpu_env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4719:9" pos:end="4722:0">break;</break>

<cpp:else pos:start="4721:1" pos:end="4721:5">#<cpp:directive pos:start="4721:2" pos:end="4721:5">else</cpp:directive></cpp:else>

        <goto pos:start="4723:9" pos:end="4726:0">goto <name pos:start="4723:14" pos:end="4723:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4725:1" pos:end="4725:6">#<cpp:directive pos:start="4725:2" pos:end="4725:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4727:5" pos:end="4727:28">case <expr pos:start="4727:10" pos:end="4727:27"><name pos:start="4727:10" pos:end="4727:27">TARGET_NR_sendfile</name></expr>:</case>

        <goto pos:start="4729:9" pos:end="4732:0">goto <name pos:start="4729:14" pos:end="4729:26">unimplemented</name>;</goto>

<cpp:ifdef pos:start="4731:1" pos:end="4731:24">#<cpp:directive pos:start="4731:2" pos:end="4731:6">ifdef</cpp:directive> <name pos:start="4731:8" pos:end="4731:24">TARGET_NR_getpmsg</name></cpp:ifdef>

    <case pos:start="4733:5" pos:end="4733:27">case <expr pos:start="4733:10" pos:end="4733:26"><name pos:start="4733:10" pos:end="4733:26">TARGET_NR_getpmsg</name></expr>:</case>

        <goto pos:start="4735:9" pos:end="4740:0">goto <name pos:start="4735:14" pos:end="4735:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4737:1" pos:end="4737:6">#<cpp:directive pos:start="4737:2" pos:end="4737:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4739:1" pos:end="4739:24">#<cpp:directive pos:start="4739:2" pos:end="4739:6">ifdef</cpp:directive> <name pos:start="4739:8" pos:end="4739:24">TARGET_NR_putpmsg</name></cpp:ifdef>

    <case pos:start="4741:5" pos:end="4741:27">case <expr pos:start="4741:10" pos:end="4741:26"><name pos:start="4741:10" pos:end="4741:26">TARGET_NR_putpmsg</name></expr>:</case>

        <goto pos:start="4743:9" pos:end="4748:0">goto <name pos:start="4743:14" pos:end="4743:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4745:1" pos:end="4745:6">#<cpp:directive pos:start="4745:2" pos:end="4745:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4747:1" pos:end="4747:22">#<cpp:directive pos:start="4747:2" pos:end="4747:6">ifdef</cpp:directive> <name pos:start="4747:8" pos:end="4747:22">TARGET_NR_vfork</name></cpp:ifdef>

    <case pos:start="4749:5" pos:end="4749:25">case <expr pos:start="4749:10" pos:end="4749:24"><name pos:start="4749:10" pos:end="4749:24">TARGET_NR_vfork</name></expr>:</case>

        <expr_stmt pos:start="4751:9" pos:end="4753:37"><expr pos:start="4751:9" pos:end="4753:36"><name pos:start="4751:9" pos:end="4751:11">ret</name> <operator pos:start="4751:13" pos:end="4751:13">=</operator> <call pos:start="4751:15" pos:end="4753:36"><name pos:start="4751:15" pos:end="4751:23">get_errno</name><argument_list pos:start="4751:24" pos:end="4753:36">(<argument pos:start="4751:25" pos:end="4753:35"><expr pos:start="4751:25" pos:end="4753:35"><call pos:start="4751:25" pos:end="4753:35"><name pos:start="4751:25" pos:end="4751:31">do_fork</name><argument_list pos:start="4751:32" pos:end="4753:35">(<argument pos:start="4751:33" pos:end="4751:39"><expr pos:start="4751:33" pos:end="4751:39"><name pos:start="4751:33" pos:end="4751:39">cpu_env</name></expr></argument>, <argument pos:start="4751:42" pos:end="4751:73"><expr pos:start="4751:42" pos:end="4751:73"><name pos:start="4751:42" pos:end="4751:52">CLONE_VFORK</name> <operator pos:start="4751:54" pos:end="4751:54">|</operator> <name pos:start="4751:56" pos:end="4751:63">CLONE_VM</name> <operator pos:start="4751:65" pos:end="4751:65">|</operator> <name pos:start="4751:67" pos:end="4751:73">SIGCHLD</name></expr></argument>,

                        <argument pos:start="4753:25" pos:end="4753:25"><expr pos:start="4753:25" pos:end="4753:25"><literal type="number" pos:start="4753:25" pos:end="4753:25">0</literal></expr></argument>, <argument pos:start="4753:28" pos:end="4753:28"><expr pos:start="4753:28" pos:end="4753:28"><literal type="number" pos:start="4753:28" pos:end="4753:28">0</literal></expr></argument>, <argument pos:start="4753:31" pos:end="4753:31"><expr pos:start="4753:31" pos:end="4753:31"><literal type="number" pos:start="4753:31" pos:end="4753:31">0</literal></expr></argument>, <argument pos:start="4753:34" pos:end="4753:34"><expr pos:start="4753:34" pos:end="4753:34"><literal type="number" pos:start="4753:34" pos:end="4753:34">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4755:9" pos:end="4760:0">break;</break>

<cpp:endif pos:start="4757:1" pos:end="4757:6">#<cpp:directive pos:start="4757:2" pos:end="4757:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4759:1" pos:end="4759:27">#<cpp:directive pos:start="4759:2" pos:end="4759:6">ifdef</cpp:directive> <name pos:start="4759:8" pos:end="4759:27">TARGET_NR_ugetrlimit</name></cpp:ifdef>

    <case pos:start="4761:5" pos:end="4761:30">case <expr pos:start="4761:10" pos:end="4761:29"><name pos:start="4761:10" pos:end="4761:29">TARGET_NR_ugetrlimit</name></expr>:</case>

    <block pos:start="4763:5" pos:end="4794:0">{<block_content pos:start="4765:9" pos:end="4787:14">

	<decl_stmt pos:start="4765:9" pos:end="4765:27"><decl pos:start="4765:9" pos:end="4765:26"><type pos:start="4765:9" pos:end="4765:21"><name pos:start="4765:9" pos:end="4765:21"><name pos:start="4765:9" pos:end="4765:14">struct</name> <name pos:start="4765:16" pos:end="4765:21">rlimit</name></name></type> <name pos:start="4765:23" pos:end="4765:26">rlim</name></decl>;</decl_stmt>

	<decl_stmt pos:start="4767:9" pos:end="4767:53"><decl pos:start="4767:9" pos:end="4767:52"><type pos:start="4767:9" pos:end="4767:11"><name pos:start="4767:9" pos:end="4767:11">int</name></type> <name pos:start="4767:13" pos:end="4767:20">resource</name> <init pos:start="4767:22" pos:end="4767:52">= <expr pos:start="4767:24" pos:end="4767:52"><call pos:start="4767:24" pos:end="4767:52"><name pos:start="4767:24" pos:end="4767:46">target_to_host_resource</name><argument_list pos:start="4767:47" pos:end="4767:52">(<argument pos:start="4767:48" pos:end="4767:51"><expr pos:start="4767:48" pos:end="4767:51"><name pos:start="4767:48" pos:end="4767:51">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="4769:9" pos:end="4769:52"><expr pos:start="4769:9" pos:end="4769:51"><name pos:start="4769:9" pos:end="4769:11">ret</name> <operator pos:start="4769:13" pos:end="4769:13">=</operator> <call pos:start="4769:15" pos:end="4769:51"><name pos:start="4769:15" pos:end="4769:23">get_errno</name><argument_list pos:start="4769:24" pos:end="4769:51">(<argument pos:start="4769:25" pos:end="4769:50"><expr pos:start="4769:25" pos:end="4769:50"><call pos:start="4769:25" pos:end="4769:50"><name pos:start="4769:25" pos:end="4769:33">getrlimit</name><argument_list pos:start="4769:34" pos:end="4769:50">(<argument pos:start="4769:35" pos:end="4769:42"><expr pos:start="4769:35" pos:end="4769:42"><name pos:start="4769:35" pos:end="4769:42">resource</name></expr></argument>, <argument pos:start="4769:45" pos:end="4769:49"><expr pos:start="4769:45" pos:end="4769:49"><operator pos:start="4769:45" pos:end="4769:45">&amp;</operator><name pos:start="4769:46" pos:end="4769:49">rlim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="4771:9" pos:end="4785:9"><if pos:start="4771:9" pos:end="4785:9">if <condition pos:start="4771:12" pos:end="4771:27">(<expr pos:start="4771:13" pos:end="4771:26"><operator pos:start="4771:13" pos:end="4771:13">!</operator><call pos:start="4771:14" pos:end="4771:26"><name pos:start="4771:14" pos:end="4771:21">is_error</name><argument_list pos:start="4771:22" pos:end="4771:26">(<argument pos:start="4771:23" pos:end="4771:25"><expr pos:start="4771:23" pos:end="4771:25"><name pos:start="4771:23" pos:end="4771:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4771:29" pos:end="4785:9">{<block_content pos:start="4773:13" pos:end="4783:53">

	    <decl_stmt pos:start="4773:13" pos:end="4773:46"><decl pos:start="4773:13" pos:end="4773:45"><type pos:start="4773:13" pos:end="4773:34"><name pos:start="4773:13" pos:end="4773:32"><name pos:start="4773:13" pos:end="4773:18">struct</name> <name pos:start="4773:20" pos:end="4773:32">target_rlimit</name></name> <modifier pos:start="4773:34" pos:end="4773:34">*</modifier></type><name pos:start="4773:35" pos:end="4773:45">target_rlim</name></decl>;</decl_stmt>

            <if_stmt pos:start="4775:13" pos:end="4777:28"><if pos:start="4775:13" pos:end="4777:28">if <condition pos:start="4775:16" pos:end="4775:70">(<expr pos:start="4775:17" pos:end="4775:69"><operator pos:start="4775:17" pos:end="4775:17">!</operator><call pos:start="4775:18" pos:end="4775:69"><name pos:start="4775:18" pos:end="4775:33">lock_user_struct</name><argument_list pos:start="4775:34" pos:end="4775:69">(<argument pos:start="4775:35" pos:end="4775:46"><expr pos:start="4775:35" pos:end="4775:46"><name pos:start="4775:35" pos:end="4775:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4775:49" pos:end="4775:59"><expr pos:start="4775:49" pos:end="4775:59"><name pos:start="4775:49" pos:end="4775:59">target_rlim</name></expr></argument>, <argument pos:start="4775:62" pos:end="4775:65"><expr pos:start="4775:62" pos:end="4775:65"><name pos:start="4775:62" pos:end="4775:65">arg2</name></expr></argument>, <argument pos:start="4775:68" pos:end="4775:68"><expr pos:start="4775:68" pos:end="4775:68"><literal type="number" pos:start="4775:68" pos:end="4775:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4777:17" pos:end="4777:28"><block_content pos:start="4777:17" pos:end="4777:28">

                <goto pos:start="4777:17" pos:end="4777:28">goto <name pos:start="4777:22" pos:end="4777:27">efault</name>;</goto></block_content></block></if></if_stmt>

	    <expr_stmt pos:start="4779:13" pos:end="4779:71"><expr pos:start="4779:13" pos:end="4779:70"><name pos:start="4779:13" pos:end="4779:33"><name pos:start="4779:13" pos:end="4779:23">target_rlim</name><operator pos:start="4779:24" pos:end="4779:25">-&gt;</operator><name pos:start="4779:26" pos:end="4779:33">rlim_cur</name></name> <operator pos:start="4779:35" pos:end="4779:35">=</operator> <call pos:start="4779:37" pos:end="4779:70"><name pos:start="4779:37" pos:end="4779:55">host_to_target_rlim</name><argument_list pos:start="4779:56" pos:end="4779:70">(<argument pos:start="4779:57" pos:end="4779:69"><expr pos:start="4779:57" pos:end="4779:69"><name pos:start="4779:57" pos:end="4779:69"><name pos:start="4779:57" pos:end="4779:60">rlim</name><operator pos:start="4779:61" pos:end="4779:61">.</operator><name pos:start="4779:62" pos:end="4779:69">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="4781:13" pos:end="4781:71"><expr pos:start="4781:13" pos:end="4781:70"><name pos:start="4781:13" pos:end="4781:33"><name pos:start="4781:13" pos:end="4781:23">target_rlim</name><operator pos:start="4781:24" pos:end="4781:25">-&gt;</operator><name pos:start="4781:26" pos:end="4781:33">rlim_max</name></name> <operator pos:start="4781:35" pos:end="4781:35">=</operator> <call pos:start="4781:37" pos:end="4781:70"><name pos:start="4781:37" pos:end="4781:55">host_to_target_rlim</name><argument_list pos:start="4781:56" pos:end="4781:70">(<argument pos:start="4781:57" pos:end="4781:69"><expr pos:start="4781:57" pos:end="4781:69"><name pos:start="4781:57" pos:end="4781:69"><name pos:start="4781:57" pos:end="4781:60">rlim</name><operator pos:start="4781:61" pos:end="4781:61">.</operator><name pos:start="4781:62" pos:end="4781:69">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4783:13" pos:end="4783:53"><expr pos:start="4783:13" pos:end="4783:52"><call pos:start="4783:13" pos:end="4783:52"><name pos:start="4783:13" pos:end="4783:30">unlock_user_struct</name><argument_list pos:start="4783:31" pos:end="4783:52">(<argument pos:start="4783:32" pos:end="4783:42"><expr pos:start="4783:32" pos:end="4783:42"><name pos:start="4783:32" pos:end="4783:42">target_rlim</name></expr></argument>, <argument pos:start="4783:45" pos:end="4783:48"><expr pos:start="4783:45" pos:end="4783:48"><name pos:start="4783:45" pos:end="4783:48">arg2</name></expr></argument>, <argument pos:start="4783:51" pos:end="4783:51"><expr pos:start="4783:51" pos:end="4783:51"><literal type="number" pos:start="4783:51" pos:end="4783:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<break pos:start="4787:9" pos:end="4787:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="4791:1" pos:end="4791:6">#<cpp:directive pos:start="4791:2" pos:end="4791:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4793:1" pos:end="4793:27">#<cpp:directive pos:start="4793:2" pos:end="4793:6">ifdef</cpp:directive> <name pos:start="4793:8" pos:end="4793:27">TARGET_NR_truncate64</name></cpp:ifdef>

    <case pos:start="4795:5" pos:end="4795:30">case <expr pos:start="4795:10" pos:end="4795:29"><name pos:start="4795:10" pos:end="4795:29">TARGET_NR_truncate64</name></expr>:</case>

        <if_stmt pos:start="4797:9" pos:end="4799:24"><if pos:start="4797:9" pos:end="4799:24">if <condition pos:start="4797:12" pos:end="4797:42">(<expr pos:start="4797:13" pos:end="4797:41"><operator pos:start="4797:13" pos:end="4797:13">!</operator><operator pos:start="4797:14" pos:end="4797:14">(</operator><name pos:start="4797:15" pos:end="4797:15">p</name> <operator pos:start="4797:17" pos:end="4797:17">=</operator> <call pos:start="4797:19" pos:end="4797:40"><name pos:start="4797:19" pos:end="4797:34">lock_user_string</name><argument_list pos:start="4797:35" pos:end="4797:40">(<argument pos:start="4797:36" pos:end="4797:39"><expr pos:start="4797:36" pos:end="4797:39"><name pos:start="4797:36" pos:end="4797:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="4797:41" pos:end="4797:41">)</operator></expr>)</condition><block type="pseudo" pos:start="4799:13" pos:end="4799:24"><block_content pos:start="4799:13" pos:end="4799:24">

            <goto pos:start="4799:13" pos:end="4799:24">goto <name pos:start="4799:18" pos:end="4799:23">efault</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt pos:start="4801:9" pos:end="4801:62"><expr pos:start="4801:9" pos:end="4801:61"><name pos:start="4801:9" pos:end="4801:11">ret</name> <operator pos:start="4801:13" pos:end="4801:13">=</operator> <call pos:start="4801:15" pos:end="4801:61"><name pos:start="4801:15" pos:end="4801:31">target_truncate64</name><argument_list pos:start="4801:32" pos:end="4801:61">(<argument pos:start="4801:33" pos:end="4801:39"><expr pos:start="4801:33" pos:end="4801:39"><name pos:start="4801:33" pos:end="4801:39">cpu_env</name></expr></argument>, <argument pos:start="4801:42" pos:end="4801:42"><expr pos:start="4801:42" pos:end="4801:42"><name pos:start="4801:42" pos:end="4801:42">p</name></expr></argument>, <argument pos:start="4801:45" pos:end="4801:48"><expr pos:start="4801:45" pos:end="4801:48"><name pos:start="4801:45" pos:end="4801:48">arg2</name></expr></argument>, <argument pos:start="4801:51" pos:end="4801:54"><expr pos:start="4801:51" pos:end="4801:54"><name pos:start="4801:51" pos:end="4801:54">arg3</name></expr></argument>, <argument pos:start="4801:57" pos:end="4801:60"><expr pos:start="4801:57" pos:end="4801:60"><name pos:start="4801:57" pos:end="4801:60">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4803:9" pos:end="4803:32"><expr pos:start="4803:9" pos:end="4803:31"><call pos:start="4803:9" pos:end="4803:31"><name pos:start="4803:9" pos:end="4803:19">unlock_user</name><argument_list pos:start="4803:20" pos:end="4803:31">(<argument pos:start="4803:21" pos:end="4803:21"><expr pos:start="4803:21" pos:end="4803:21"><name pos:start="4803:21" pos:end="4803:21">p</name></expr></argument>, <argument pos:start="4803:24" pos:end="4803:27"><expr pos:start="4803:24" pos:end="4803:27"><name pos:start="4803:24" pos:end="4803:27">arg1</name></expr></argument>, <argument pos:start="4803:30" pos:end="4803:30"><expr pos:start="4803:30" pos:end="4803:30"><literal type="number" pos:start="4803:30" pos:end="4803:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="4805:9" pos:end="4810:0">break;</break>

<cpp:endif pos:start="4807:1" pos:end="4807:6">#<cpp:directive pos:start="4807:2" pos:end="4807:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4809:1" pos:end="4809:28">#<cpp:directive pos:start="4809:2" pos:end="4809:6">ifdef</cpp:directive> <name pos:start="4809:8" pos:end="4809:28">TARGET_NR_ftruncate64</name></cpp:ifdef>

    <case pos:start="4811:5" pos:end="4811:31">case <expr pos:start="4811:10" pos:end="4811:30"><name pos:start="4811:10" pos:end="4811:30">TARGET_NR_ftruncate64</name></expr>:</case>

	<expr_stmt pos:start="4813:9" pos:end="4813:66"><expr pos:start="4813:9" pos:end="4813:65"><name pos:start="4813:9" pos:end="4813:11">ret</name> <operator pos:start="4813:13" pos:end="4813:13">=</operator> <call pos:start="4813:15" pos:end="4813:65"><name pos:start="4813:15" pos:end="4813:32">target_ftruncate64</name><argument_list pos:start="4813:33" pos:end="4813:65">(<argument pos:start="4813:34" pos:end="4813:40"><expr pos:start="4813:34" pos:end="4813:40"><name pos:start="4813:34" pos:end="4813:40">cpu_env</name></expr></argument>, <argument pos:start="4813:43" pos:end="4813:46"><expr pos:start="4813:43" pos:end="4813:46"><name pos:start="4813:43" pos:end="4813:46">arg1</name></expr></argument>, <argument pos:start="4813:49" pos:end="4813:52"><expr pos:start="4813:49" pos:end="4813:52"><name pos:start="4813:49" pos:end="4813:52">arg2</name></expr></argument>, <argument pos:start="4813:55" pos:end="4813:58"><expr pos:start="4813:55" pos:end="4813:58"><name pos:start="4813:55" pos:end="4813:58">arg3</name></expr></argument>, <argument pos:start="4813:61" pos:end="4813:64"><expr pos:start="4813:61" pos:end="4813:64"><name pos:start="4813:61" pos:end="4813:64">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="4815:9" pos:end="4820:0">break;</break>

<cpp:endif pos:start="4817:1" pos:end="4817:6">#<cpp:directive pos:start="4817:2" pos:end="4817:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4819:1" pos:end="4819:23">#<cpp:directive pos:start="4819:2" pos:end="4819:6">ifdef</cpp:directive> <name pos:start="4819:8" pos:end="4819:23">TARGET_NR_stat64</name></cpp:ifdef>

    <case pos:start="4821:5" pos:end="4821:26">case <expr pos:start="4821:10" pos:end="4821:25"><name pos:start="4821:10" pos:end="4821:25">TARGET_NR_stat64</name></expr>:</case>

        <if_stmt pos:start="4823:9" pos:end="4825:24"><if pos:start="4823:9" pos:end="4825:24">if <condition pos:start="4823:12" pos:end="4823:42">(<expr pos:start="4823:13" pos:end="4823:41"><operator pos:start="4823:13" pos:end="4823:13">!</operator><operator pos:start="4823:14" pos:end="4823:14">(</operator><name pos:start="4823:15" pos:end="4823:15">p</name> <operator pos:start="4823:17" pos:end="4823:17">=</operator> <call pos:start="4823:19" pos:end="4823:40"><name pos:start="4823:19" pos:end="4823:34">lock_user_string</name><argument_list pos:start="4823:35" pos:end="4823:40">(<argument pos:start="4823:36" pos:end="4823:39"><expr pos:start="4823:36" pos:end="4823:39"><name pos:start="4823:36" pos:end="4823:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="4823:41" pos:end="4823:41">)</operator></expr>)</condition><block type="pseudo" pos:start="4825:13" pos:end="4825:24"><block_content pos:start="4825:13" pos:end="4825:24">

            <goto pos:start="4825:13" pos:end="4825:24">goto <name pos:start="4825:18" pos:end="4825:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4827:9" pos:end="4827:44"><expr pos:start="4827:9" pos:end="4827:43"><name pos:start="4827:9" pos:end="4827:11">ret</name> <operator pos:start="4827:13" pos:end="4827:13">=</operator> <call pos:start="4827:15" pos:end="4827:43"><name pos:start="4827:15" pos:end="4827:23">get_errno</name><argument_list pos:start="4827:24" pos:end="4827:43">(<argument pos:start="4827:25" pos:end="4827:42"><expr pos:start="4827:25" pos:end="4827:42"><call pos:start="4827:25" pos:end="4827:42"><name pos:start="4827:25" pos:end="4827:28">stat</name><argument_list pos:start="4827:29" pos:end="4827:42">(<argument pos:start="4827:30" pos:end="4827:36"><expr pos:start="4827:30" pos:end="4827:36"><call pos:start="4827:30" pos:end="4827:36"><name pos:start="4827:30" pos:end="4827:33">path</name><argument_list pos:start="4827:34" pos:end="4827:36">(<argument pos:start="4827:35" pos:end="4827:35"><expr pos:start="4827:35" pos:end="4827:35"><name pos:start="4827:35" pos:end="4827:35">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="4827:39" pos:end="4827:41"><expr pos:start="4827:39" pos:end="4827:41"><operator pos:start="4827:39" pos:end="4827:39">&amp;</operator><name pos:start="4827:40" pos:end="4827:41">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4829:9" pos:end="4829:32"><expr pos:start="4829:9" pos:end="4829:31"><call pos:start="4829:9" pos:end="4829:31"><name pos:start="4829:9" pos:end="4829:19">unlock_user</name><argument_list pos:start="4829:20" pos:end="4829:31">(<argument pos:start="4829:21" pos:end="4829:21"><expr pos:start="4829:21" pos:end="4829:21"><name pos:start="4829:21" pos:end="4829:21">p</name></expr></argument>, <argument pos:start="4829:24" pos:end="4829:27"><expr pos:start="4829:24" pos:end="4829:27"><name pos:start="4829:24" pos:end="4829:27">arg1</name></expr></argument>, <argument pos:start="4829:30" pos:end="4829:30"><expr pos:start="4829:30" pos:end="4829:30"><literal type="number" pos:start="4829:30" pos:end="4829:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4831:9" pos:end="4833:60"><if pos:start="4831:9" pos:end="4833:60">if <condition pos:start="4831:12" pos:end="4831:27">(<expr pos:start="4831:13" pos:end="4831:26"><operator pos:start="4831:13" pos:end="4831:13">!</operator><call pos:start="4831:14" pos:end="4831:26"><name pos:start="4831:14" pos:end="4831:21">is_error</name><argument_list pos:start="4831:22" pos:end="4831:26">(<argument pos:start="4831:23" pos:end="4831:25"><expr pos:start="4831:23" pos:end="4831:25"><name pos:start="4831:23" pos:end="4831:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4833:13" pos:end="4833:60"><block_content pos:start="4833:13" pos:end="4833:60">

            <expr_stmt pos:start="4833:13" pos:end="4833:60"><expr pos:start="4833:13" pos:end="4833:59"><name pos:start="4833:13" pos:end="4833:15">ret</name> <operator pos:start="4833:17" pos:end="4833:17">=</operator> <call pos:start="4833:19" pos:end="4833:59"><name pos:start="4833:19" pos:end="4833:39">host_to_target_stat64</name><argument_list pos:start="4833:40" pos:end="4833:59">(<argument pos:start="4833:41" pos:end="4833:47"><expr pos:start="4833:41" pos:end="4833:47"><name pos:start="4833:41" pos:end="4833:47">cpu_env</name></expr></argument>, <argument pos:start="4833:50" pos:end="4833:53"><expr pos:start="4833:50" pos:end="4833:53"><name pos:start="4833:50" pos:end="4833:53">arg2</name></expr></argument>, <argument pos:start="4833:56" pos:end="4833:58"><expr pos:start="4833:56" pos:end="4833:58"><operator pos:start="4833:56" pos:end="4833:56">&amp;</operator><name pos:start="4833:57" pos:end="4833:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="4835:9" pos:end="4840:0">break;</break>

<cpp:endif pos:start="4837:1" pos:end="4837:6">#<cpp:directive pos:start="4837:2" pos:end="4837:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4839:1" pos:end="4839:24">#<cpp:directive pos:start="4839:2" pos:end="4839:6">ifdef</cpp:directive> <name pos:start="4839:8" pos:end="4839:24">TARGET_NR_lstat64</name></cpp:ifdef>

    <case pos:start="4841:5" pos:end="4841:27">case <expr pos:start="4841:10" pos:end="4841:26"><name pos:start="4841:10" pos:end="4841:26">TARGET_NR_lstat64</name></expr>:</case>

        <if_stmt pos:start="4843:9" pos:end="4845:24"><if pos:start="4843:9" pos:end="4845:24">if <condition pos:start="4843:12" pos:end="4843:42">(<expr pos:start="4843:13" pos:end="4843:41"><operator pos:start="4843:13" pos:end="4843:13">!</operator><operator pos:start="4843:14" pos:end="4843:14">(</operator><name pos:start="4843:15" pos:end="4843:15">p</name> <operator pos:start="4843:17" pos:end="4843:17">=</operator> <call pos:start="4843:19" pos:end="4843:40"><name pos:start="4843:19" pos:end="4843:34">lock_user_string</name><argument_list pos:start="4843:35" pos:end="4843:40">(<argument pos:start="4843:36" pos:end="4843:39"><expr pos:start="4843:36" pos:end="4843:39"><name pos:start="4843:36" pos:end="4843:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="4843:41" pos:end="4843:41">)</operator></expr>)</condition><block type="pseudo" pos:start="4845:13" pos:end="4845:24"><block_content pos:start="4845:13" pos:end="4845:24">

            <goto pos:start="4845:13" pos:end="4845:24">goto <name pos:start="4845:18" pos:end="4845:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4847:9" pos:end="4847:45"><expr pos:start="4847:9" pos:end="4847:44"><name pos:start="4847:9" pos:end="4847:11">ret</name> <operator pos:start="4847:13" pos:end="4847:13">=</operator> <call pos:start="4847:15" pos:end="4847:44"><name pos:start="4847:15" pos:end="4847:23">get_errno</name><argument_list pos:start="4847:24" pos:end="4847:44">(<argument pos:start="4847:25" pos:end="4847:43"><expr pos:start="4847:25" pos:end="4847:43"><call pos:start="4847:25" pos:end="4847:43"><name pos:start="4847:25" pos:end="4847:29">lstat</name><argument_list pos:start="4847:30" pos:end="4847:43">(<argument pos:start="4847:31" pos:end="4847:37"><expr pos:start="4847:31" pos:end="4847:37"><call pos:start="4847:31" pos:end="4847:37"><name pos:start="4847:31" pos:end="4847:34">path</name><argument_list pos:start="4847:35" pos:end="4847:37">(<argument pos:start="4847:36" pos:end="4847:36"><expr pos:start="4847:36" pos:end="4847:36"><name pos:start="4847:36" pos:end="4847:36">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="4847:40" pos:end="4847:42"><expr pos:start="4847:40" pos:end="4847:42"><operator pos:start="4847:40" pos:end="4847:40">&amp;</operator><name pos:start="4847:41" pos:end="4847:42">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4849:9" pos:end="4849:32"><expr pos:start="4849:9" pos:end="4849:31"><call pos:start="4849:9" pos:end="4849:31"><name pos:start="4849:9" pos:end="4849:19">unlock_user</name><argument_list pos:start="4849:20" pos:end="4849:31">(<argument pos:start="4849:21" pos:end="4849:21"><expr pos:start="4849:21" pos:end="4849:21"><name pos:start="4849:21" pos:end="4849:21">p</name></expr></argument>, <argument pos:start="4849:24" pos:end="4849:27"><expr pos:start="4849:24" pos:end="4849:27"><name pos:start="4849:24" pos:end="4849:27">arg1</name></expr></argument>, <argument pos:start="4849:30" pos:end="4849:30"><expr pos:start="4849:30" pos:end="4849:30"><literal type="number" pos:start="4849:30" pos:end="4849:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4851:9" pos:end="4853:60"><if pos:start="4851:9" pos:end="4853:60">if <condition pos:start="4851:12" pos:end="4851:27">(<expr pos:start="4851:13" pos:end="4851:26"><operator pos:start="4851:13" pos:end="4851:13">!</operator><call pos:start="4851:14" pos:end="4851:26"><name pos:start="4851:14" pos:end="4851:21">is_error</name><argument_list pos:start="4851:22" pos:end="4851:26">(<argument pos:start="4851:23" pos:end="4851:25"><expr pos:start="4851:23" pos:end="4851:25"><name pos:start="4851:23" pos:end="4851:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4853:13" pos:end="4853:60"><block_content pos:start="4853:13" pos:end="4853:60">

            <expr_stmt pos:start="4853:13" pos:end="4853:60"><expr pos:start="4853:13" pos:end="4853:59"><name pos:start="4853:13" pos:end="4853:15">ret</name> <operator pos:start="4853:17" pos:end="4853:17">=</operator> <call pos:start="4853:19" pos:end="4853:59"><name pos:start="4853:19" pos:end="4853:39">host_to_target_stat64</name><argument_list pos:start="4853:40" pos:end="4853:59">(<argument pos:start="4853:41" pos:end="4853:47"><expr pos:start="4853:41" pos:end="4853:47"><name pos:start="4853:41" pos:end="4853:47">cpu_env</name></expr></argument>, <argument pos:start="4853:50" pos:end="4853:53"><expr pos:start="4853:50" pos:end="4853:53"><name pos:start="4853:50" pos:end="4853:53">arg2</name></expr></argument>, <argument pos:start="4853:56" pos:end="4853:58"><expr pos:start="4853:56" pos:end="4853:58"><operator pos:start="4853:56" pos:end="4853:56">&amp;</operator><name pos:start="4853:57" pos:end="4853:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="4855:9" pos:end="4860:0">break;</break>

<cpp:endif pos:start="4857:1" pos:end="4857:6">#<cpp:directive pos:start="4857:2" pos:end="4857:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4859:1" pos:end="4859:24">#<cpp:directive pos:start="4859:2" pos:end="4859:6">ifdef</cpp:directive> <name pos:start="4859:8" pos:end="4859:24">TARGET_NR_fstat64</name></cpp:ifdef>

    <case pos:start="4861:5" pos:end="4861:27">case <expr pos:start="4861:10" pos:end="4861:26"><name pos:start="4861:10" pos:end="4861:26">TARGET_NR_fstat64</name></expr>:</case>

        <expr_stmt pos:start="4863:9" pos:end="4863:42"><expr pos:start="4863:9" pos:end="4863:41"><name pos:start="4863:9" pos:end="4863:11">ret</name> <operator pos:start="4863:13" pos:end="4863:13">=</operator> <call pos:start="4863:15" pos:end="4863:41"><name pos:start="4863:15" pos:end="4863:23">get_errno</name><argument_list pos:start="4863:24" pos:end="4863:41">(<argument pos:start="4863:25" pos:end="4863:40"><expr pos:start="4863:25" pos:end="4863:40"><call pos:start="4863:25" pos:end="4863:40"><name pos:start="4863:25" pos:end="4863:29">fstat</name><argument_list pos:start="4863:30" pos:end="4863:40">(<argument pos:start="4863:31" pos:end="4863:34"><expr pos:start="4863:31" pos:end="4863:34"><name pos:start="4863:31" pos:end="4863:34">arg1</name></expr></argument>, <argument pos:start="4863:37" pos:end="4863:39"><expr pos:start="4863:37" pos:end="4863:39"><operator pos:start="4863:37" pos:end="4863:37">&amp;</operator><name pos:start="4863:38" pos:end="4863:39">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4865:9" pos:end="4867:60"><if pos:start="4865:9" pos:end="4867:60">if <condition pos:start="4865:12" pos:end="4865:27">(<expr pos:start="4865:13" pos:end="4865:26"><operator pos:start="4865:13" pos:end="4865:13">!</operator><call pos:start="4865:14" pos:end="4865:26"><name pos:start="4865:14" pos:end="4865:21">is_error</name><argument_list pos:start="4865:22" pos:end="4865:26">(<argument pos:start="4865:23" pos:end="4865:25"><expr pos:start="4865:23" pos:end="4865:25"><name pos:start="4865:23" pos:end="4865:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4867:13" pos:end="4867:60"><block_content pos:start="4867:13" pos:end="4867:60">

            <expr_stmt pos:start="4867:13" pos:end="4867:60"><expr pos:start="4867:13" pos:end="4867:59"><name pos:start="4867:13" pos:end="4867:15">ret</name> <operator pos:start="4867:17" pos:end="4867:17">=</operator> <call pos:start="4867:19" pos:end="4867:59"><name pos:start="4867:19" pos:end="4867:39">host_to_target_stat64</name><argument_list pos:start="4867:40" pos:end="4867:59">(<argument pos:start="4867:41" pos:end="4867:47"><expr pos:start="4867:41" pos:end="4867:47"><name pos:start="4867:41" pos:end="4867:47">cpu_env</name></expr></argument>, <argument pos:start="4867:50" pos:end="4867:53"><expr pos:start="4867:50" pos:end="4867:53"><name pos:start="4867:50" pos:end="4867:53">arg2</name></expr></argument>, <argument pos:start="4867:56" pos:end="4867:58"><expr pos:start="4867:56" pos:end="4867:58"><operator pos:start="4867:56" pos:end="4867:56">&amp;</operator><name pos:start="4867:57" pos:end="4867:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="4869:9" pos:end="4878:0">break;</break>

<cpp:endif pos:start="4871:1" pos:end="4871:6">#<cpp:directive pos:start="4871:2" pos:end="4871:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="4873:1" pos:end="4875:61">#<cpp:directive pos:start="4873:2" pos:end="4873:3">if</cpp:directive> <expr pos:start="4873:5" pos:end="4875:61"><operator pos:start="4873:5" pos:end="4873:5">(</operator><call pos:start="4873:6" pos:end="4873:33"><name pos:start="4873:6" pos:end="4873:12">defined</name><argument_list pos:start="4873:13" pos:end="4873:33">(<argument pos:start="4873:14" pos:end="4873:32"><expr pos:start="4873:14" pos:end="4873:32"><name pos:start="4873:14" pos:end="4873:32">TARGET_NR_fstatat64</name></expr></argument>)</argument_list></call> <operator pos:start="4873:35" pos:end="4873:36">||</operator> <call pos:start="4873:38" pos:end="4873:66"><name pos:start="4873:38" pos:end="4873:44">defined</name><argument_list pos:start="4873:45" pos:end="4873:66">(<argument pos:start="4873:46" pos:end="4873:65"><expr pos:start="4873:46" pos:end="4873:65"><name pos:start="4873:46" pos:end="4873:65">TARGET_NR_newfstatat</name></expr></argument>)</argument_list></call><operator pos:start="4873:67" pos:end="4873:67">)</operator> <operator pos:start="4873:69" pos:end="4873:70">&amp;&amp;</operator> \

        <operator pos:start="4875:9" pos:end="4875:9">(</operator><call pos:start="4875:10" pos:end="4875:32"><name pos:start="4875:10" pos:end="4875:16">defined</name><argument_list pos:start="4875:17" pos:end="4875:32">(<argument pos:start="4875:18" pos:end="4875:31"><expr pos:start="4875:18" pos:end="4875:31"><name pos:start="4875:18" pos:end="4875:31">__NR_fstatat64</name></expr></argument>)</argument_list></call> <operator pos:start="4875:34" pos:end="4875:35">||</operator> <call pos:start="4875:37" pos:end="4875:60"><name pos:start="4875:37" pos:end="4875:43">defined</name><argument_list pos:start="4875:44" pos:end="4875:60">(<argument pos:start="4875:45" pos:end="4875:59"><expr pos:start="4875:45" pos:end="4875:59"><name pos:start="4875:45" pos:end="4875:59">__NR_newfstatat</name></expr></argument>)</argument_list></call><operator pos:start="4875:61" pos:end="4875:61">)</operator></expr></cpp:if>

<cpp:ifdef pos:start="4877:1" pos:end="4877:26">#<cpp:directive pos:start="4877:2" pos:end="4877:6">ifdef</cpp:directive> <name pos:start="4877:8" pos:end="4877:26">TARGET_NR_fstatat64</name></cpp:ifdef>

    <case pos:start="4879:5" pos:end="4884:0">case <expr pos:start="4879:10" pos:end="4879:28"><name pos:start="4879:10" pos:end="4879:28">TARGET_NR_fstatat64</name></expr>:</case>

<cpp:endif pos:start="4881:1" pos:end="4881:6">#<cpp:directive pos:start="4881:2" pos:end="4881:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4883:1" pos:end="4883:27">#<cpp:directive pos:start="4883:2" pos:end="4883:6">ifdef</cpp:directive> <name pos:start="4883:8" pos:end="4883:27">TARGET_NR_newfstatat</name></cpp:ifdef>

    <case pos:start="4885:5" pos:end="4888:0">case <expr pos:start="4885:10" pos:end="4885:29"><name pos:start="4885:10" pos:end="4885:29">TARGET_NR_newfstatat</name></expr>:</case>

<cpp:endif pos:start="4887:1" pos:end="4887:6">#<cpp:directive pos:start="4887:2" pos:end="4887:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="4889:9" pos:end="4894:0"><if pos:start="4889:9" pos:end="4894:0">if <condition pos:start="4889:12" pos:end="4889:42">(<expr pos:start="4889:13" pos:end="4889:41"><operator pos:start="4889:13" pos:end="4889:13">!</operator><operator pos:start="4889:14" pos:end="4889:14">(</operator><name pos:start="4889:15" pos:end="4889:15">p</name> <operator pos:start="4889:17" pos:end="4889:17">=</operator> <call pos:start="4889:19" pos:end="4889:40"><name pos:start="4889:19" pos:end="4889:34">lock_user_string</name><argument_list pos:start="4889:35" pos:end="4889:40">(<argument pos:start="4889:36" pos:end="4889:39"><expr pos:start="4889:36" pos:end="4889:39"><name pos:start="4889:36" pos:end="4889:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="4889:41" pos:end="4889:41">)</operator></expr>)</condition><block type="pseudo" pos:start="4891:13" pos:end="4894:0"><block_content pos:start="4891:13" pos:end="4894:0">

            <goto pos:start="4891:13" pos:end="4894:0">goto <name pos:start="4891:18" pos:end="4891:23">efault</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="4893:1" pos:end="4893:21">#<cpp:directive pos:start="4893:2" pos:end="4893:6">ifdef</cpp:directive> <name pos:start="4893:8" pos:end="4893:21">__NR_fstatat64</name></cpp:ifdef>

        <expr_stmt pos:start="4895:9" pos:end="4898:0"><expr pos:start="4895:9" pos:end="4895:64"><name pos:start="4895:9" pos:end="4895:11">ret</name> <operator pos:start="4895:13" pos:end="4895:13">=</operator> <call pos:start="4895:15" pos:end="4895:64"><name pos:start="4895:15" pos:end="4895:23">get_errno</name><argument_list pos:start="4895:24" pos:end="4895:64">(<argument pos:start="4895:25" pos:end="4895:63"><expr pos:start="4895:25" pos:end="4895:63"><call pos:start="4895:25" pos:end="4895:63"><name pos:start="4895:25" pos:end="4895:37">sys_fstatat64</name><argument_list pos:start="4895:38" pos:end="4895:63">(<argument pos:start="4895:39" pos:end="4895:42"><expr pos:start="4895:39" pos:end="4895:42"><name pos:start="4895:39" pos:end="4895:42">arg1</name></expr></argument>, <argument pos:start="4895:45" pos:end="4895:51"><expr pos:start="4895:45" pos:end="4895:51"><call pos:start="4895:45" pos:end="4895:51"><name pos:start="4895:45" pos:end="4895:48">path</name><argument_list pos:start="4895:49" pos:end="4895:51">(<argument pos:start="4895:50" pos:end="4895:50"><expr pos:start="4895:50" pos:end="4895:50"><name pos:start="4895:50" pos:end="4895:50">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="4895:54" pos:end="4895:56"><expr pos:start="4895:54" pos:end="4895:56"><operator pos:start="4895:54" pos:end="4895:54">&amp;</operator><name pos:start="4895:55" pos:end="4895:56">st</name></expr></argument>, <argument pos:start="4895:59" pos:end="4895:62"><expr pos:start="4895:59" pos:end="4895:62"><name pos:start="4895:59" pos:end="4895:62">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="4897:1" pos:end="4897:5">#<cpp:directive pos:start="4897:2" pos:end="4897:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="4899:9" pos:end="4902:0"><expr pos:start="4899:9" pos:end="4899:65"><name pos:start="4899:9" pos:end="4899:11">ret</name> <operator pos:start="4899:13" pos:end="4899:13">=</operator> <call pos:start="4899:15" pos:end="4899:65"><name pos:start="4899:15" pos:end="4899:23">get_errno</name><argument_list pos:start="4899:24" pos:end="4899:65">(<argument pos:start="4899:25" pos:end="4899:64"><expr pos:start="4899:25" pos:end="4899:64"><call pos:start="4899:25" pos:end="4899:64"><name pos:start="4899:25" pos:end="4899:38">sys_newfstatat</name><argument_list pos:start="4899:39" pos:end="4899:64">(<argument pos:start="4899:40" pos:end="4899:43"><expr pos:start="4899:40" pos:end="4899:43"><name pos:start="4899:40" pos:end="4899:43">arg1</name></expr></argument>, <argument pos:start="4899:46" pos:end="4899:52"><expr pos:start="4899:46" pos:end="4899:52"><call pos:start="4899:46" pos:end="4899:52"><name pos:start="4899:46" pos:end="4899:49">path</name><argument_list pos:start="4899:50" pos:end="4899:52">(<argument pos:start="4899:51" pos:end="4899:51"><expr pos:start="4899:51" pos:end="4899:51"><name pos:start="4899:51" pos:end="4899:51">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="4899:55" pos:end="4899:57"><expr pos:start="4899:55" pos:end="4899:57"><operator pos:start="4899:55" pos:end="4899:55">&amp;</operator><name pos:start="4899:56" pos:end="4899:57">st</name></expr></argument>, <argument pos:start="4899:60" pos:end="4899:63"><expr pos:start="4899:60" pos:end="4899:63"><name pos:start="4899:60" pos:end="4899:63">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="4901:1" pos:end="4901:6">#<cpp:directive pos:start="4901:2" pos:end="4901:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="4903:9" pos:end="4905:60"><if pos:start="4903:9" pos:end="4905:60">if <condition pos:start="4903:12" pos:end="4903:27">(<expr pos:start="4903:13" pos:end="4903:26"><operator pos:start="4903:13" pos:end="4903:13">!</operator><call pos:start="4903:14" pos:end="4903:26"><name pos:start="4903:14" pos:end="4903:21">is_error</name><argument_list pos:start="4903:22" pos:end="4903:26">(<argument pos:start="4903:23" pos:end="4903:25"><expr pos:start="4903:23" pos:end="4903:25"><name pos:start="4903:23" pos:end="4903:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4905:13" pos:end="4905:60"><block_content pos:start="4905:13" pos:end="4905:60">

            <expr_stmt pos:start="4905:13" pos:end="4905:60"><expr pos:start="4905:13" pos:end="4905:59"><name pos:start="4905:13" pos:end="4905:15">ret</name> <operator pos:start="4905:17" pos:end="4905:17">=</operator> <call pos:start="4905:19" pos:end="4905:59"><name pos:start="4905:19" pos:end="4905:39">host_to_target_stat64</name><argument_list pos:start="4905:40" pos:end="4905:59">(<argument pos:start="4905:41" pos:end="4905:47"><expr pos:start="4905:41" pos:end="4905:47"><name pos:start="4905:41" pos:end="4905:47">cpu_env</name></expr></argument>, <argument pos:start="4905:50" pos:end="4905:53"><expr pos:start="4905:50" pos:end="4905:53"><name pos:start="4905:50" pos:end="4905:53">arg3</name></expr></argument>, <argument pos:start="4905:56" pos:end="4905:58"><expr pos:start="4905:56" pos:end="4905:58"><operator pos:start="4905:56" pos:end="4905:56">&amp;</operator><name pos:start="4905:57" pos:end="4905:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="4907:9" pos:end="4910:0">break;</break>

<cpp:endif pos:start="4909:1" pos:end="4909:6">#<cpp:directive pos:start="4909:2" pos:end="4909:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4911:5" pos:end="4911:26">case <expr pos:start="4911:10" pos:end="4911:25"><name pos:start="4911:10" pos:end="4911:25">TARGET_NR_lchown</name></expr>:</case>

        <if_stmt pos:start="4913:9" pos:end="4915:24"><if pos:start="4913:9" pos:end="4915:24">if <condition pos:start="4913:12" pos:end="4913:42">(<expr pos:start="4913:13" pos:end="4913:41"><operator pos:start="4913:13" pos:end="4913:13">!</operator><operator pos:start="4913:14" pos:end="4913:14">(</operator><name pos:start="4913:15" pos:end="4913:15">p</name> <operator pos:start="4913:17" pos:end="4913:17">=</operator> <call pos:start="4913:19" pos:end="4913:40"><name pos:start="4913:19" pos:end="4913:34">lock_user_string</name><argument_list pos:start="4913:35" pos:end="4913:40">(<argument pos:start="4913:36" pos:end="4913:39"><expr pos:start="4913:36" pos:end="4913:39"><name pos:start="4913:36" pos:end="4913:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="4913:41" pos:end="4913:41">)</operator></expr>)</condition><block type="pseudo" pos:start="4915:13" pos:end="4915:24"><block_content pos:start="4915:13" pos:end="4915:24">

            <goto pos:start="4915:13" pos:end="4915:24">goto <name pos:start="4915:18" pos:end="4915:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4917:9" pos:end="4917:73"><expr pos:start="4917:9" pos:end="4917:72"><name pos:start="4917:9" pos:end="4917:11">ret</name> <operator pos:start="4917:13" pos:end="4917:13">=</operator> <call pos:start="4917:15" pos:end="4917:72"><name pos:start="4917:15" pos:end="4917:23">get_errno</name><argument_list pos:start="4917:24" pos:end="4917:72">(<argument pos:start="4917:25" pos:end="4917:71"><expr pos:start="4917:25" pos:end="4917:71"><call pos:start="4917:25" pos:end="4917:71"><name pos:start="4917:25" pos:end="4917:30">lchown</name><argument_list pos:start="4917:31" pos:end="4917:71">(<argument pos:start="4917:32" pos:end="4917:32"><expr pos:start="4917:32" pos:end="4917:32"><name pos:start="4917:32" pos:end="4917:32">p</name></expr></argument>, <argument pos:start="4917:35" pos:end="4917:51"><expr pos:start="4917:35" pos:end="4917:51"><call pos:start="4917:35" pos:end="4917:51"><name pos:start="4917:35" pos:end="4917:45">low2highuid</name><argument_list pos:start="4917:46" pos:end="4917:51">(<argument pos:start="4917:47" pos:end="4917:50"><expr pos:start="4917:47" pos:end="4917:50"><name pos:start="4917:47" pos:end="4917:50">arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="4917:54" pos:end="4917:70"><expr pos:start="4917:54" pos:end="4917:70"><call pos:start="4917:54" pos:end="4917:70"><name pos:start="4917:54" pos:end="4917:64">low2highgid</name><argument_list pos:start="4917:65" pos:end="4917:70">(<argument pos:start="4917:66" pos:end="4917:69"><expr pos:start="4917:66" pos:end="4917:69"><name pos:start="4917:66" pos:end="4917:69">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4919:9" pos:end="4919:32"><expr pos:start="4919:9" pos:end="4919:31"><call pos:start="4919:9" pos:end="4919:31"><name pos:start="4919:9" pos:end="4919:19">unlock_user</name><argument_list pos:start="4919:20" pos:end="4919:31">(<argument pos:start="4919:21" pos:end="4919:21"><expr pos:start="4919:21" pos:end="4919:21"><name pos:start="4919:21" pos:end="4919:21">p</name></expr></argument>, <argument pos:start="4919:24" pos:end="4919:27"><expr pos:start="4919:24" pos:end="4919:27"><name pos:start="4919:24" pos:end="4919:27">arg1</name></expr></argument>, <argument pos:start="4919:30" pos:end="4919:30"><expr pos:start="4919:30" pos:end="4919:30"><literal type="number" pos:start="4919:30" pos:end="4919:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4921:9" pos:end="4924:0">break;</break>

<cpp:ifdef pos:start="4923:1" pos:end="4923:23">#<cpp:directive pos:start="4923:2" pos:end="4923:6">ifdef</cpp:directive> <name pos:start="4923:8" pos:end="4923:23">TARGET_NR_getuid</name></cpp:ifdef>

    <case pos:start="4925:5" pos:end="4925:26">case <expr pos:start="4925:10" pos:end="4925:25"><name pos:start="4925:10" pos:end="4925:25">TARGET_NR_getuid</name></expr>:</case>

        <expr_stmt pos:start="4927:9" pos:end="4927:47"><expr pos:start="4927:9" pos:end="4927:46"><name pos:start="4927:9" pos:end="4927:11">ret</name> <operator pos:start="4927:13" pos:end="4927:13">=</operator> <call pos:start="4927:15" pos:end="4927:46"><name pos:start="4927:15" pos:end="4927:23">get_errno</name><argument_list pos:start="4927:24" pos:end="4927:46">(<argument pos:start="4927:25" pos:end="4927:45"><expr pos:start="4927:25" pos:end="4927:45"><call pos:start="4927:25" pos:end="4927:45"><name pos:start="4927:25" pos:end="4927:35">high2lowuid</name><argument_list pos:start="4927:36" pos:end="4927:45">(<argument pos:start="4927:37" pos:end="4927:44"><expr pos:start="4927:37" pos:end="4927:44"><call pos:start="4927:37" pos:end="4927:44"><name pos:start="4927:37" pos:end="4927:42">getuid</name><argument_list pos:start="4927:43" pos:end="4927:44">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4929:9" pos:end="4934:0">break;</break>

<cpp:endif pos:start="4931:1" pos:end="4931:6">#<cpp:directive pos:start="4931:2" pos:end="4931:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4933:1" pos:end="4933:23">#<cpp:directive pos:start="4933:2" pos:end="4933:6">ifdef</cpp:directive> <name pos:start="4933:8" pos:end="4933:23">TARGET_NR_getgid</name></cpp:ifdef>

    <case pos:start="4935:5" pos:end="4935:26">case <expr pos:start="4935:10" pos:end="4935:25"><name pos:start="4935:10" pos:end="4935:25">TARGET_NR_getgid</name></expr>:</case>

        <expr_stmt pos:start="4937:9" pos:end="4937:47"><expr pos:start="4937:9" pos:end="4937:46"><name pos:start="4937:9" pos:end="4937:11">ret</name> <operator pos:start="4937:13" pos:end="4937:13">=</operator> <call pos:start="4937:15" pos:end="4937:46"><name pos:start="4937:15" pos:end="4937:23">get_errno</name><argument_list pos:start="4937:24" pos:end="4937:46">(<argument pos:start="4937:25" pos:end="4937:45"><expr pos:start="4937:25" pos:end="4937:45"><call pos:start="4937:25" pos:end="4937:45"><name pos:start="4937:25" pos:end="4937:35">high2lowgid</name><argument_list pos:start="4937:36" pos:end="4937:45">(<argument pos:start="4937:37" pos:end="4937:44"><expr pos:start="4937:37" pos:end="4937:44"><call pos:start="4937:37" pos:end="4937:44"><name pos:start="4937:37" pos:end="4937:42">getgid</name><argument_list pos:start="4937:43" pos:end="4937:44">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4939:9" pos:end="4944:0">break;</break>

<cpp:endif pos:start="4941:1" pos:end="4941:6">#<cpp:directive pos:start="4941:2" pos:end="4941:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4943:1" pos:end="4943:24">#<cpp:directive pos:start="4943:2" pos:end="4943:6">ifdef</cpp:directive> <name pos:start="4943:8" pos:end="4943:24">TARGET_NR_geteuid</name></cpp:ifdef>

    <case pos:start="4945:5" pos:end="4945:27">case <expr pos:start="4945:10" pos:end="4945:26"><name pos:start="4945:10" pos:end="4945:26">TARGET_NR_geteuid</name></expr>:</case>

        <expr_stmt pos:start="4947:9" pos:end="4947:48"><expr pos:start="4947:9" pos:end="4947:47"><name pos:start="4947:9" pos:end="4947:11">ret</name> <operator pos:start="4947:13" pos:end="4947:13">=</operator> <call pos:start="4947:15" pos:end="4947:47"><name pos:start="4947:15" pos:end="4947:23">get_errno</name><argument_list pos:start="4947:24" pos:end="4947:47">(<argument pos:start="4947:25" pos:end="4947:46"><expr pos:start="4947:25" pos:end="4947:46"><call pos:start="4947:25" pos:end="4947:46"><name pos:start="4947:25" pos:end="4947:35">high2lowuid</name><argument_list pos:start="4947:36" pos:end="4947:46">(<argument pos:start="4947:37" pos:end="4947:45"><expr pos:start="4947:37" pos:end="4947:45"><call pos:start="4947:37" pos:end="4947:45"><name pos:start="4947:37" pos:end="4947:43">geteuid</name><argument_list pos:start="4947:44" pos:end="4947:45">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4949:9" pos:end="4954:0">break;</break>

<cpp:endif pos:start="4951:1" pos:end="4951:6">#<cpp:directive pos:start="4951:2" pos:end="4951:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4953:1" pos:end="4953:24">#<cpp:directive pos:start="4953:2" pos:end="4953:6">ifdef</cpp:directive> <name pos:start="4953:8" pos:end="4953:24">TARGET_NR_getegid</name></cpp:ifdef>

    <case pos:start="4955:5" pos:end="4955:27">case <expr pos:start="4955:10" pos:end="4955:26"><name pos:start="4955:10" pos:end="4955:26">TARGET_NR_getegid</name></expr>:</case>

        <expr_stmt pos:start="4957:9" pos:end="4957:48"><expr pos:start="4957:9" pos:end="4957:47"><name pos:start="4957:9" pos:end="4957:11">ret</name> <operator pos:start="4957:13" pos:end="4957:13">=</operator> <call pos:start="4957:15" pos:end="4957:47"><name pos:start="4957:15" pos:end="4957:23">get_errno</name><argument_list pos:start="4957:24" pos:end="4957:47">(<argument pos:start="4957:25" pos:end="4957:46"><expr pos:start="4957:25" pos:end="4957:46"><call pos:start="4957:25" pos:end="4957:46"><name pos:start="4957:25" pos:end="4957:35">high2lowgid</name><argument_list pos:start="4957:36" pos:end="4957:46">(<argument pos:start="4957:37" pos:end="4957:45"><expr pos:start="4957:37" pos:end="4957:45"><call pos:start="4957:37" pos:end="4957:45"><name pos:start="4957:37" pos:end="4957:43">getegid</name><argument_list pos:start="4957:44" pos:end="4957:45">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4959:9" pos:end="4962:0">break;</break>

<cpp:endif pos:start="4961:1" pos:end="4961:6">#<cpp:directive pos:start="4961:2" pos:end="4961:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4963:5" pos:end="4963:28">case <expr pos:start="4963:10" pos:end="4963:27"><name pos:start="4963:10" pos:end="4963:27">TARGET_NR_setreuid</name></expr>:</case>

        <expr_stmt pos:start="4965:9" pos:end="4965:72"><expr pos:start="4965:9" pos:end="4965:71"><name pos:start="4965:9" pos:end="4965:11">ret</name> <operator pos:start="4965:13" pos:end="4965:13">=</operator> <call pos:start="4965:15" pos:end="4965:71"><name pos:start="4965:15" pos:end="4965:23">get_errno</name><argument_list pos:start="4965:24" pos:end="4965:71">(<argument pos:start="4965:25" pos:end="4965:70"><expr pos:start="4965:25" pos:end="4965:70"><call pos:start="4965:25" pos:end="4965:70"><name pos:start="4965:25" pos:end="4965:32">setreuid</name><argument_list pos:start="4965:33" pos:end="4965:70">(<argument pos:start="4965:34" pos:end="4965:50"><expr pos:start="4965:34" pos:end="4965:50"><call pos:start="4965:34" pos:end="4965:50"><name pos:start="4965:34" pos:end="4965:44">low2highuid</name><argument_list pos:start="4965:45" pos:end="4965:50">(<argument pos:start="4965:46" pos:end="4965:49"><expr pos:start="4965:46" pos:end="4965:49"><name pos:start="4965:46" pos:end="4965:49">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="4965:53" pos:end="4965:69"><expr pos:start="4965:53" pos:end="4965:69"><call pos:start="4965:53" pos:end="4965:69"><name pos:start="4965:53" pos:end="4965:63">low2highuid</name><argument_list pos:start="4965:64" pos:end="4965:69">(<argument pos:start="4965:65" pos:end="4965:68"><expr pos:start="4965:65" pos:end="4965:68"><name pos:start="4965:65" pos:end="4965:68">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4967:9" pos:end="4967:14">break;</break>

    <case pos:start="4969:5" pos:end="4969:28">case <expr pos:start="4969:10" pos:end="4969:27"><name pos:start="4969:10" pos:end="4969:27">TARGET_NR_setregid</name></expr>:</case>

        <expr_stmt pos:start="4971:9" pos:end="4971:72"><expr pos:start="4971:9" pos:end="4971:71"><name pos:start="4971:9" pos:end="4971:11">ret</name> <operator pos:start="4971:13" pos:end="4971:13">=</operator> <call pos:start="4971:15" pos:end="4971:71"><name pos:start="4971:15" pos:end="4971:23">get_errno</name><argument_list pos:start="4971:24" pos:end="4971:71">(<argument pos:start="4971:25" pos:end="4971:70"><expr pos:start="4971:25" pos:end="4971:70"><call pos:start="4971:25" pos:end="4971:70"><name pos:start="4971:25" pos:end="4971:32">setregid</name><argument_list pos:start="4971:33" pos:end="4971:70">(<argument pos:start="4971:34" pos:end="4971:50"><expr pos:start="4971:34" pos:end="4971:50"><call pos:start="4971:34" pos:end="4971:50"><name pos:start="4971:34" pos:end="4971:44">low2highgid</name><argument_list pos:start="4971:45" pos:end="4971:50">(<argument pos:start="4971:46" pos:end="4971:49"><expr pos:start="4971:46" pos:end="4971:49"><name pos:start="4971:46" pos:end="4971:49">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="4971:53" pos:end="4971:69"><expr pos:start="4971:53" pos:end="4971:69"><call pos:start="4971:53" pos:end="4971:69"><name pos:start="4971:53" pos:end="4971:63">low2highgid</name><argument_list pos:start="4971:64" pos:end="4971:69">(<argument pos:start="4971:65" pos:end="4971:68"><expr pos:start="4971:65" pos:end="4971:68"><name pos:start="4971:65" pos:end="4971:68">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4973:9" pos:end="4973:14">break;</break>

    <case pos:start="4975:5" pos:end="4975:29">case <expr pos:start="4975:10" pos:end="4975:28"><name pos:start="4975:10" pos:end="4975:28">TARGET_NR_getgroups</name></expr>:</case>

        <block pos:start="4977:9" pos:end="5013:9">{<block_content pos:start="4979:13" pos:end="5011:13">

            <decl_stmt pos:start="4979:13" pos:end="4979:34"><decl pos:start="4979:13" pos:end="4979:33"><type pos:start="4979:13" pos:end="4979:15"><name pos:start="4979:13" pos:end="4979:15">int</name></type> <name pos:start="4979:17" pos:end="4979:26">gidsetsize</name> <init pos:start="4979:28" pos:end="4979:33">= <expr pos:start="4979:30" pos:end="4979:33"><name pos:start="4979:30" pos:end="4979:33">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="4981:13" pos:end="4981:40"><decl pos:start="4981:13" pos:end="4981:39"><type pos:start="4981:13" pos:end="4981:23"><name pos:start="4981:13" pos:end="4981:21">target_id</name> <modifier pos:start="4981:23" pos:end="4981:23">*</modifier></type><name pos:start="4981:24" pos:end="4981:39">target_grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4983:13" pos:end="4983:29"><decl pos:start="4983:13" pos:end="4983:28"><type pos:start="4983:13" pos:end="4983:19"><name pos:start="4983:13" pos:end="4983:17">gid_t</name> <modifier pos:start="4983:19" pos:end="4983:19">*</modifier></type><name pos:start="4983:20" pos:end="4983:28">grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4985:13" pos:end="4985:18"><decl pos:start="4985:13" pos:end="4985:17"><type pos:start="4985:13" pos:end="4985:15"><name pos:start="4985:13" pos:end="4985:15">int</name></type> <name pos:start="4985:17" pos:end="4985:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="4989:13" pos:end="4989:59"><expr pos:start="4989:13" pos:end="4989:58"><name pos:start="4989:13" pos:end="4989:21">grouplist</name> <operator pos:start="4989:23" pos:end="4989:23">=</operator> <call pos:start="4989:25" pos:end="4989:58"><name pos:start="4989:25" pos:end="4989:30">alloca</name><argument_list pos:start="4989:31" pos:end="4989:58">(<argument pos:start="4989:32" pos:end="4989:57"><expr pos:start="4989:32" pos:end="4989:57"><name pos:start="4989:32" pos:end="4989:41">gidsetsize</name> <operator pos:start="4989:43" pos:end="4989:43">*</operator> <sizeof pos:start="4989:45" pos:end="4989:57">sizeof<argument_list pos:start="4989:51" pos:end="4989:57">(<argument pos:start="4989:52" pos:end="4989:56"><expr pos:start="4989:52" pos:end="4989:56"><name pos:start="4989:52" pos:end="4989:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4991:13" pos:end="4991:62"><expr pos:start="4991:13" pos:end="4991:61"><name pos:start="4991:13" pos:end="4991:15">ret</name> <operator pos:start="4991:17" pos:end="4991:17">=</operator> <call pos:start="4991:19" pos:end="4991:61"><name pos:start="4991:19" pos:end="4991:27">get_errno</name><argument_list pos:start="4991:28" pos:end="4991:61">(<argument pos:start="4991:29" pos:end="4991:60"><expr pos:start="4991:29" pos:end="4991:60"><call pos:start="4991:29" pos:end="4991:60"><name pos:start="4991:29" pos:end="4991:37">getgroups</name><argument_list pos:start="4991:38" pos:end="4991:60">(<argument pos:start="4991:39" pos:end="4991:48"><expr pos:start="4991:39" pos:end="4991:48"><name pos:start="4991:39" pos:end="4991:48">gidsetsize</name></expr></argument>, <argument pos:start="4991:51" pos:end="4991:59"><expr pos:start="4991:51" pos:end="4991:59"><name pos:start="4991:51" pos:end="4991:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4993:13" pos:end="4995:22"><if pos:start="4993:13" pos:end="4995:22">if <condition pos:start="4993:16" pos:end="4993:32">(<expr pos:start="4993:17" pos:end="4993:31"><name pos:start="4993:17" pos:end="4993:26">gidsetsize</name> <operator pos:start="4993:28" pos:end="4993:29">==</operator> <literal type="number" pos:start="4993:31" pos:end="4993:31">0</literal></expr>)</condition><block type="pseudo" pos:start="4995:17" pos:end="4995:22"><block_content pos:start="4995:17" pos:end="4995:22">

                <break pos:start="4995:17" pos:end="4995:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="4997:13" pos:end="5011:13"><if pos:start="4997:13" pos:end="5011:13">if <condition pos:start="4997:16" pos:end="4997:31">(<expr pos:start="4997:17" pos:end="4997:30"><operator pos:start="4997:17" pos:end="4997:17">!</operator><call pos:start="4997:18" pos:end="4997:30"><name pos:start="4997:18" pos:end="4997:25">is_error</name><argument_list pos:start="4997:26" pos:end="4997:30">(<argument pos:start="4997:27" pos:end="4997:29"><expr pos:start="4997:27" pos:end="4997:29"><name pos:start="4997:27" pos:end="4997:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4997:33" pos:end="5011:13">{<block_content pos:start="4999:17" pos:end="5009:68">

                <expr_stmt pos:start="4999:17" pos:end="4999:84"><expr pos:start="4999:17" pos:end="4999:83"><name pos:start="4999:17" pos:end="4999:32">target_grouplist</name> <operator pos:start="4999:34" pos:end="4999:34">=</operator> <call pos:start="4999:36" pos:end="4999:83"><name pos:start="4999:36" pos:end="4999:44">lock_user</name><argument_list pos:start="4999:45" pos:end="4999:83">(<argument pos:start="4999:46" pos:end="4999:57"><expr pos:start="4999:46" pos:end="4999:57"><name pos:start="4999:46" pos:end="4999:57">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4999:60" pos:end="4999:63"><expr pos:start="4999:60" pos:end="4999:63"><name pos:start="4999:60" pos:end="4999:63">arg2</name></expr></argument>, <argument pos:start="4999:66" pos:end="4999:79"><expr pos:start="4999:66" pos:end="4999:79"><name pos:start="4999:66" pos:end="4999:75">gidsetsize</name> <operator pos:start="4999:77" pos:end="4999:77">*</operator> <literal type="number" pos:start="4999:79" pos:end="4999:79">2</literal></expr></argument>, <argument pos:start="4999:82" pos:end="4999:82"><expr pos:start="4999:82" pos:end="4999:82"><literal type="number" pos:start="4999:82" pos:end="4999:82">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5001:17" pos:end="5003:32"><if pos:start="5001:17" pos:end="5003:32">if <condition pos:start="5001:20" pos:end="5001:38">(<expr pos:start="5001:21" pos:end="5001:37"><operator pos:start="5001:21" pos:end="5001:21">!</operator><name pos:start="5001:22" pos:end="5001:37">target_grouplist</name></expr>)</condition><block type="pseudo" pos:start="5003:21" pos:end="5003:32"><block_content pos:start="5003:21" pos:end="5003:32">

                    <goto pos:start="5003:21" pos:end="5003:32">goto <name pos:start="5003:26" pos:end="5003:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <for pos:start="5005:17" pos:end="5007:77">for<control pos:start="5005:20" pos:end="5005:39">(<init pos:start="5005:21" pos:end="5005:26"><expr pos:start="5005:21" pos:end="5005:25"><name pos:start="5005:21" pos:end="5005:21">i</name> <operator pos:start="5005:23" pos:end="5005:23">=</operator> <literal type="number" pos:start="5005:25" pos:end="5005:25">0</literal></expr>;</init><condition pos:start="5005:27" pos:end="5005:34"><expr pos:start="5005:27" pos:end="5005:33"><name pos:start="5005:27" pos:end="5005:27">i</name> <operator pos:start="5005:29" pos:end="5005:29">&lt;</operator> <name pos:start="5005:31" pos:end="5005:33">ret</name></expr>;</condition> <incr pos:start="5005:36" pos:end="5005:38"><expr pos:start="5005:36" pos:end="5005:38"><name pos:start="5005:36" pos:end="5005:36">i</name><operator pos:start="5005:37" pos:end="5005:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="5007:21" pos:end="5007:77"><block_content pos:start="5007:21" pos:end="5007:77">

                    <expr_stmt pos:start="5007:21" pos:end="5007:77"><expr pos:start="5007:21" pos:end="5007:76"><name pos:start="5007:21" pos:end="5007:39"><name pos:start="5007:21" pos:end="5007:36">target_grouplist</name><index pos:start="5007:37" pos:end="5007:39">[<expr pos:start="5007:38" pos:end="5007:38"><name pos:start="5007:38" pos:end="5007:38">i</name></expr>]</index></name> <operator pos:start="5007:41" pos:end="5007:41">=</operator> <call pos:start="5007:43" pos:end="5007:76"><name pos:start="5007:43" pos:end="5007:49">tswapid</name><argument_list pos:start="5007:50" pos:end="5007:76">(<argument pos:start="5007:51" pos:end="5007:75"><expr pos:start="5007:51" pos:end="5007:75"><call pos:start="5007:51" pos:end="5007:75"><name pos:start="5007:51" pos:end="5007:61">high2lowgid</name><argument_list pos:start="5007:62" pos:end="5007:75">(<argument pos:start="5007:63" pos:end="5007:74"><expr pos:start="5007:63" pos:end="5007:74"><name pos:start="5007:63" pos:end="5007:74"><name pos:start="5007:63" pos:end="5007:71">grouplist</name><index pos:start="5007:72" pos:end="5007:74">[<expr pos:start="5007:73" pos:end="5007:73"><name pos:start="5007:73" pos:end="5007:73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="5009:17" pos:end="5009:68"><expr pos:start="5009:17" pos:end="5009:67"><call pos:start="5009:17" pos:end="5009:67"><name pos:start="5009:17" pos:end="5009:27">unlock_user</name><argument_list pos:start="5009:28" pos:end="5009:67">(<argument pos:start="5009:29" pos:end="5009:44"><expr pos:start="5009:29" pos:end="5009:44"><name pos:start="5009:29" pos:end="5009:44">target_grouplist</name></expr></argument>, <argument pos:start="5009:47" pos:end="5009:50"><expr pos:start="5009:47" pos:end="5009:50"><name pos:start="5009:47" pos:end="5009:50">arg2</name></expr></argument>, <argument pos:start="5009:53" pos:end="5009:66"><expr pos:start="5009:53" pos:end="5009:66"><name pos:start="5009:53" pos:end="5009:62">gidsetsize</name> <operator pos:start="5009:64" pos:end="5009:64">*</operator> <literal type="number" pos:start="5009:66" pos:end="5009:66">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5015:9" pos:end="5015:14">break;</break>

    <case pos:start="5017:5" pos:end="5017:29">case <expr pos:start="5017:10" pos:end="5017:28"><name pos:start="5017:10" pos:end="5017:28">TARGET_NR_setgroups</name></expr>:</case>

        <block pos:start="5019:9" pos:end="5051:9">{<block_content pos:start="5021:13" pos:end="5049:62">

            <decl_stmt pos:start="5021:13" pos:end="5021:34"><decl pos:start="5021:13" pos:end="5021:33"><type pos:start="5021:13" pos:end="5021:15"><name pos:start="5021:13" pos:end="5021:15">int</name></type> <name pos:start="5021:17" pos:end="5021:26">gidsetsize</name> <init pos:start="5021:28" pos:end="5021:33">= <expr pos:start="5021:30" pos:end="5021:33"><name pos:start="5021:30" pos:end="5021:33">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="5023:13" pos:end="5023:40"><decl pos:start="5023:13" pos:end="5023:39"><type pos:start="5023:13" pos:end="5023:23"><name pos:start="5023:13" pos:end="5023:21">target_id</name> <modifier pos:start="5023:23" pos:end="5023:23">*</modifier></type><name pos:start="5023:24" pos:end="5023:39">target_grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5025:13" pos:end="5025:29"><decl pos:start="5025:13" pos:end="5025:28"><type pos:start="5025:13" pos:end="5025:19"><name pos:start="5025:13" pos:end="5025:17">gid_t</name> <modifier pos:start="5025:19" pos:end="5025:19">*</modifier></type><name pos:start="5025:20" pos:end="5025:28">grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5027:13" pos:end="5027:18"><decl pos:start="5027:13" pos:end="5027:17"><type pos:start="5027:13" pos:end="5027:15"><name pos:start="5027:13" pos:end="5027:15">int</name></type> <name pos:start="5027:17" pos:end="5027:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5031:13" pos:end="5031:59"><expr pos:start="5031:13" pos:end="5031:58"><name pos:start="5031:13" pos:end="5031:21">grouplist</name> <operator pos:start="5031:23" pos:end="5031:23">=</operator> <call pos:start="5031:25" pos:end="5031:58"><name pos:start="5031:25" pos:end="5031:30">alloca</name><argument_list pos:start="5031:31" pos:end="5031:58">(<argument pos:start="5031:32" pos:end="5031:57"><expr pos:start="5031:32" pos:end="5031:57"><name pos:start="5031:32" pos:end="5031:41">gidsetsize</name> <operator pos:start="5031:43" pos:end="5031:43">*</operator> <sizeof pos:start="5031:45" pos:end="5031:57">sizeof<argument_list pos:start="5031:51" pos:end="5031:57">(<argument pos:start="5031:52" pos:end="5031:56"><expr pos:start="5031:52" pos:end="5031:56"><name pos:start="5031:52" pos:end="5031:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5033:13" pos:end="5033:79"><expr pos:start="5033:13" pos:end="5033:78"><name pos:start="5033:13" pos:end="5033:28">target_grouplist</name> <operator pos:start="5033:30" pos:end="5033:30">=</operator> <call pos:start="5033:32" pos:end="5033:78"><name pos:start="5033:32" pos:end="5033:40">lock_user</name><argument_list pos:start="5033:41" pos:end="5033:78">(<argument pos:start="5033:42" pos:end="5033:52"><expr pos:start="5033:42" pos:end="5033:52"><name pos:start="5033:42" pos:end="5033:52">VERIFY_READ</name></expr></argument>, <argument pos:start="5033:55" pos:end="5033:58"><expr pos:start="5033:55" pos:end="5033:58"><name pos:start="5033:55" pos:end="5033:58">arg2</name></expr></argument>, <argument pos:start="5033:61" pos:end="5033:74"><expr pos:start="5033:61" pos:end="5033:74"><name pos:start="5033:61" pos:end="5033:70">gidsetsize</name> <operator pos:start="5033:72" pos:end="5033:72">*</operator> <literal type="number" pos:start="5033:74" pos:end="5033:74">2</literal></expr></argument>, <argument pos:start="5033:77" pos:end="5033:77"><expr pos:start="5033:77" pos:end="5033:77"><literal type="number" pos:start="5033:77" pos:end="5033:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5035:13" pos:end="5041:13"><if pos:start="5035:13" pos:end="5041:13">if <condition pos:start="5035:16" pos:end="5035:34">(<expr pos:start="5035:17" pos:end="5035:33"><operator pos:start="5035:17" pos:end="5035:17">!</operator><name pos:start="5035:18" pos:end="5035:33">target_grouplist</name></expr>)</condition> <block pos:start="5035:36" pos:end="5041:13">{<block_content pos:start="5037:17" pos:end="5039:26">

                <expr_stmt pos:start="5037:17" pos:end="5037:37"><expr pos:start="5037:17" pos:end="5037:36"><name pos:start="5037:17" pos:end="5037:19">ret</name> <operator pos:start="5037:21" pos:end="5037:21">=</operator> <operator pos:start="5037:23" pos:end="5037:23">-</operator><name pos:start="5037:24" pos:end="5037:36">TARGET_EFAULT</name></expr>;</expr_stmt>

                <goto pos:start="5039:17" pos:end="5039:26">goto <name pos:start="5039:22" pos:end="5039:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <for pos:start="5043:13" pos:end="5045:73">for<control pos:start="5043:16" pos:end="5043:42">(<init pos:start="5043:17" pos:end="5043:22"><expr pos:start="5043:17" pos:end="5043:21"><name pos:start="5043:17" pos:end="5043:17">i</name> <operator pos:start="5043:19" pos:end="5043:19">=</operator> <literal type="number" pos:start="5043:21" pos:end="5043:21">0</literal></expr>;</init><condition pos:start="5043:23" pos:end="5043:37"><expr pos:start="5043:23" pos:end="5043:36"><name pos:start="5043:23" pos:end="5043:23">i</name> <operator pos:start="5043:25" pos:end="5043:25">&lt;</operator> <name pos:start="5043:27" pos:end="5043:36">gidsetsize</name></expr>;</condition> <incr pos:start="5043:39" pos:end="5043:41"><expr pos:start="5043:39" pos:end="5043:41"><name pos:start="5043:39" pos:end="5043:39">i</name><operator pos:start="5043:40" pos:end="5043:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="5045:17" pos:end="5045:73"><block_content pos:start="5045:17" pos:end="5045:73">

                <expr_stmt pos:start="5045:17" pos:end="5045:73"><expr pos:start="5045:17" pos:end="5045:72"><name pos:start="5045:17" pos:end="5045:28"><name pos:start="5045:17" pos:end="5045:25">grouplist</name><index pos:start="5045:26" pos:end="5045:28">[<expr pos:start="5045:27" pos:end="5045:27"><name pos:start="5045:27" pos:end="5045:27">i</name></expr>]</index></name> <operator pos:start="5045:30" pos:end="5045:30">=</operator> <call pos:start="5045:32" pos:end="5045:72"><name pos:start="5045:32" pos:end="5045:42">low2highgid</name><argument_list pos:start="5045:43" pos:end="5045:72">(<argument pos:start="5045:44" pos:end="5045:71"><expr pos:start="5045:44" pos:end="5045:71"><call pos:start="5045:44" pos:end="5045:71"><name pos:start="5045:44" pos:end="5045:50">tswapid</name><argument_list pos:start="5045:51" pos:end="5045:71">(<argument pos:start="5045:52" pos:end="5045:70"><expr pos:start="5045:52" pos:end="5045:70"><name pos:start="5045:52" pos:end="5045:70"><name pos:start="5045:52" pos:end="5045:67">target_grouplist</name><index pos:start="5045:68" pos:end="5045:70">[<expr pos:start="5045:69" pos:end="5045:69"><name pos:start="5045:69" pos:end="5045:69">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="5047:13" pos:end="5047:51"><expr pos:start="5047:13" pos:end="5047:50"><call pos:start="5047:13" pos:end="5047:50"><name pos:start="5047:13" pos:end="5047:23">unlock_user</name><argument_list pos:start="5047:24" pos:end="5047:50">(<argument pos:start="5047:25" pos:end="5047:40"><expr pos:start="5047:25" pos:end="5047:40"><name pos:start="5047:25" pos:end="5047:40">target_grouplist</name></expr></argument>, <argument pos:start="5047:43" pos:end="5047:46"><expr pos:start="5047:43" pos:end="5047:46"><name pos:start="5047:43" pos:end="5047:46">arg2</name></expr></argument>, <argument pos:start="5047:49" pos:end="5047:49"><expr pos:start="5047:49" pos:end="5047:49"><literal type="number" pos:start="5047:49" pos:end="5047:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5049:13" pos:end="5049:62"><expr pos:start="5049:13" pos:end="5049:61"><name pos:start="5049:13" pos:end="5049:15">ret</name> <operator pos:start="5049:17" pos:end="5049:17">=</operator> <call pos:start="5049:19" pos:end="5049:61"><name pos:start="5049:19" pos:end="5049:27">get_errno</name><argument_list pos:start="5049:28" pos:end="5049:61">(<argument pos:start="5049:29" pos:end="5049:60"><expr pos:start="5049:29" pos:end="5049:60"><call pos:start="5049:29" pos:end="5049:60"><name pos:start="5049:29" pos:end="5049:37">setgroups</name><argument_list pos:start="5049:38" pos:end="5049:60">(<argument pos:start="5049:39" pos:end="5049:48"><expr pos:start="5049:39" pos:end="5049:48"><name pos:start="5049:39" pos:end="5049:48">gidsetsize</name></expr></argument>, <argument pos:start="5049:51" pos:end="5049:59"><expr pos:start="5049:51" pos:end="5049:59"><name pos:start="5049:51" pos:end="5049:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5053:9" pos:end="5053:14">break;</break>

    <case pos:start="5055:5" pos:end="5055:26">case <expr pos:start="5055:10" pos:end="5055:25"><name pos:start="5055:10" pos:end="5055:25">TARGET_NR_fchown</name></expr>:</case>

        <expr_stmt pos:start="5057:9" pos:end="5057:76"><expr pos:start="5057:9" pos:end="5057:75"><name pos:start="5057:9" pos:end="5057:11">ret</name> <operator pos:start="5057:13" pos:end="5057:13">=</operator> <call pos:start="5057:15" pos:end="5057:75"><name pos:start="5057:15" pos:end="5057:23">get_errno</name><argument_list pos:start="5057:24" pos:end="5057:75">(<argument pos:start="5057:25" pos:end="5057:74"><expr pos:start="5057:25" pos:end="5057:74"><call pos:start="5057:25" pos:end="5057:74"><name pos:start="5057:25" pos:end="5057:30">fchown</name><argument_list pos:start="5057:31" pos:end="5057:74">(<argument pos:start="5057:32" pos:end="5057:35"><expr pos:start="5057:32" pos:end="5057:35"><name pos:start="5057:32" pos:end="5057:35">arg1</name></expr></argument>, <argument pos:start="5057:38" pos:end="5057:54"><expr pos:start="5057:38" pos:end="5057:54"><call pos:start="5057:38" pos:end="5057:54"><name pos:start="5057:38" pos:end="5057:48">low2highuid</name><argument_list pos:start="5057:49" pos:end="5057:54">(<argument pos:start="5057:50" pos:end="5057:53"><expr pos:start="5057:50" pos:end="5057:53"><name pos:start="5057:50" pos:end="5057:53">arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5057:57" pos:end="5057:73"><expr pos:start="5057:57" pos:end="5057:73"><call pos:start="5057:57" pos:end="5057:73"><name pos:start="5057:57" pos:end="5057:67">low2highgid</name><argument_list pos:start="5057:68" pos:end="5057:73">(<argument pos:start="5057:69" pos:end="5057:72"><expr pos:start="5057:69" pos:end="5057:72"><name pos:start="5057:69" pos:end="5057:72">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5059:9" pos:end="5062:0">break;</break>

<cpp:if pos:start="5061:1" pos:end="5061:57">#<cpp:directive pos:start="5061:2" pos:end="5061:3">if</cpp:directive> <expr pos:start="5061:5" pos:end="5061:57"><call pos:start="5061:5" pos:end="5061:31"><name pos:start="5061:5" pos:end="5061:11">defined</name><argument_list pos:start="5061:12" pos:end="5061:31">(<argument pos:start="5061:13" pos:end="5061:30"><expr pos:start="5061:13" pos:end="5061:30"><name pos:start="5061:13" pos:end="5061:30">TARGET_NR_fchownat</name></expr></argument>)</argument_list></call> <operator pos:start="5061:33" pos:end="5061:34">&amp;&amp;</operator> <call pos:start="5061:36" pos:end="5061:57"><name pos:start="5061:36" pos:end="5061:42">defined</name><argument_list pos:start="5061:43" pos:end="5061:57">(<argument pos:start="5061:44" pos:end="5061:56"><expr pos:start="5061:44" pos:end="5061:56"><name pos:start="5061:44" pos:end="5061:56">__NR_fchownat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="5063:5" pos:end="5063:28">case <expr pos:start="5063:10" pos:end="5063:27"><name pos:start="5063:10" pos:end="5063:27">TARGET_NR_fchownat</name></expr>:</case>

        <if_stmt pos:start="5065:9" pos:end="5067:24"><if pos:start="5065:9" pos:end="5067:24">if <condition pos:start="5065:12" pos:end="5065:42">(<expr pos:start="5065:13" pos:end="5065:41"><operator pos:start="5065:13" pos:end="5065:13">!</operator><operator pos:start="5065:14" pos:end="5065:14">(</operator><name pos:start="5065:15" pos:end="5065:15">p</name> <operator pos:start="5065:17" pos:end="5065:17">=</operator> <call pos:start="5065:19" pos:end="5065:40"><name pos:start="5065:19" pos:end="5065:34">lock_user_string</name><argument_list pos:start="5065:35" pos:end="5065:40">(<argument pos:start="5065:36" pos:end="5065:39"><expr pos:start="5065:36" pos:end="5065:39"><name pos:start="5065:36" pos:end="5065:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="5065:41" pos:end="5065:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5067:13" pos:end="5067:24"><block_content pos:start="5067:13" pos:end="5067:24"> 

            <goto pos:start="5067:13" pos:end="5067:24">goto <name pos:start="5067:18" pos:end="5067:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5069:9" pos:end="5069:91"><expr pos:start="5069:9" pos:end="5069:90"><name pos:start="5069:9" pos:end="5069:11">ret</name> <operator pos:start="5069:13" pos:end="5069:13">=</operator> <call pos:start="5069:15" pos:end="5069:90"><name pos:start="5069:15" pos:end="5069:23">get_errno</name><argument_list pos:start="5069:24" pos:end="5069:90">(<argument pos:start="5069:25" pos:end="5069:89"><expr pos:start="5069:25" pos:end="5069:89"><call pos:start="5069:25" pos:end="5069:89"><name pos:start="5069:25" pos:end="5069:36">sys_fchownat</name><argument_list pos:start="5069:37" pos:end="5069:89">(<argument pos:start="5069:38" pos:end="5069:41"><expr pos:start="5069:38" pos:end="5069:41"><name pos:start="5069:38" pos:end="5069:41">arg1</name></expr></argument>, <argument pos:start="5069:44" pos:end="5069:44"><expr pos:start="5069:44" pos:end="5069:44"><name pos:start="5069:44" pos:end="5069:44">p</name></expr></argument>, <argument pos:start="5069:47" pos:end="5069:63"><expr pos:start="5069:47" pos:end="5069:63"><call pos:start="5069:47" pos:end="5069:63"><name pos:start="5069:47" pos:end="5069:57">low2highuid</name><argument_list pos:start="5069:58" pos:end="5069:63">(<argument pos:start="5069:59" pos:end="5069:62"><expr pos:start="5069:59" pos:end="5069:62"><name pos:start="5069:59" pos:end="5069:62">arg3</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5069:66" pos:end="5069:82"><expr pos:start="5069:66" pos:end="5069:82"><call pos:start="5069:66" pos:end="5069:82"><name pos:start="5069:66" pos:end="5069:76">low2highgid</name><argument_list pos:start="5069:77" pos:end="5069:82">(<argument pos:start="5069:78" pos:end="5069:81"><expr pos:start="5069:78" pos:end="5069:81"><name pos:start="5069:78" pos:end="5069:81">arg4</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5069:85" pos:end="5069:88"><expr pos:start="5069:85" pos:end="5069:88"><name pos:start="5069:85" pos:end="5069:88">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5071:9" pos:end="5071:32"><expr pos:start="5071:9" pos:end="5071:31"><call pos:start="5071:9" pos:end="5071:31"><name pos:start="5071:9" pos:end="5071:19">unlock_user</name><argument_list pos:start="5071:20" pos:end="5071:31">(<argument pos:start="5071:21" pos:end="5071:21"><expr pos:start="5071:21" pos:end="5071:21"><name pos:start="5071:21" pos:end="5071:21">p</name></expr></argument>, <argument pos:start="5071:24" pos:end="5071:27"><expr pos:start="5071:24" pos:end="5071:27"><name pos:start="5071:24" pos:end="5071:27">arg2</name></expr></argument>, <argument pos:start="5071:30" pos:end="5071:30"><expr pos:start="5071:30" pos:end="5071:30"><literal type="number" pos:start="5071:30" pos:end="5071:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5073:9" pos:end="5078:0">break;</break>

<cpp:endif pos:start="5075:1" pos:end="5075:6">#<cpp:directive pos:start="5075:2" pos:end="5075:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5077:1" pos:end="5077:26">#<cpp:directive pos:start="5077:2" pos:end="5077:6">ifdef</cpp:directive> <name pos:start="5077:8" pos:end="5077:26">TARGET_NR_setresuid</name></cpp:ifdef>

    <case pos:start="5079:5" pos:end="5079:29">case <expr pos:start="5079:10" pos:end="5079:28"><name pos:start="5079:10" pos:end="5079:28">TARGET_NR_setresuid</name></expr>:</case>

        <expr_stmt pos:start="5081:9" pos:end="5085:54"><expr pos:start="5081:9" pos:end="5085:53"><name pos:start="5081:9" pos:end="5081:11">ret</name> <operator pos:start="5081:13" pos:end="5081:13">=</operator> <call pos:start="5081:15" pos:end="5085:53"><name pos:start="5081:15" pos:end="5081:23">get_errno</name><argument_list pos:start="5081:24" pos:end="5085:53">(<argument pos:start="5081:25" pos:end="5085:52"><expr pos:start="5081:25" pos:end="5085:52"><call pos:start="5081:25" pos:end="5085:52"><name pos:start="5081:25" pos:end="5081:33">setresuid</name><argument_list pos:start="5081:34" pos:end="5085:52">(<argument pos:start="5081:35" pos:end="5081:51"><expr pos:start="5081:35" pos:end="5081:51"><call pos:start="5081:35" pos:end="5081:51"><name pos:start="5081:35" pos:end="5081:45">low2highuid</name><argument_list pos:start="5081:46" pos:end="5081:51">(<argument pos:start="5081:47" pos:end="5081:50"><expr pos:start="5081:47" pos:end="5081:50"><name pos:start="5081:47" pos:end="5081:50">arg1</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="5083:35" pos:end="5083:51"><expr pos:start="5083:35" pos:end="5083:51"><call pos:start="5083:35" pos:end="5083:51"><name pos:start="5083:35" pos:end="5083:45">low2highuid</name><argument_list pos:start="5083:46" pos:end="5083:51">(<argument pos:start="5083:47" pos:end="5083:50"><expr pos:start="5083:47" pos:end="5083:50"><name pos:start="5083:47" pos:end="5083:50">arg2</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="5085:35" pos:end="5085:51"><expr pos:start="5085:35" pos:end="5085:51"><call pos:start="5085:35" pos:end="5085:51"><name pos:start="5085:35" pos:end="5085:45">low2highuid</name><argument_list pos:start="5085:46" pos:end="5085:51">(<argument pos:start="5085:47" pos:end="5085:50"><expr pos:start="5085:47" pos:end="5085:50"><name pos:start="5085:47" pos:end="5085:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5087:9" pos:end="5092:0">break;</break>

<cpp:endif pos:start="5089:1" pos:end="5089:6">#<cpp:directive pos:start="5089:2" pos:end="5089:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5091:1" pos:end="5091:26">#<cpp:directive pos:start="5091:2" pos:end="5091:6">ifdef</cpp:directive> <name pos:start="5091:8" pos:end="5091:26">TARGET_NR_getresuid</name></cpp:ifdef>

    <case pos:start="5093:5" pos:end="5093:29">case <expr pos:start="5093:10" pos:end="5093:28"><name pos:start="5093:10" pos:end="5093:28">TARGET_NR_getresuid</name></expr>:</case>

        <block pos:start="5095:9" pos:end="5113:9">{<block_content pos:start="5097:13" pos:end="5111:13">

            <decl_stmt pos:start="5097:13" pos:end="5097:35"><decl pos:start="5097:13" pos:end="5097:22"><type pos:start="5097:13" pos:end="5097:17"><name pos:start="5097:13" pos:end="5097:17">uid_t</name></type> <name pos:start="5097:19" pos:end="5097:22">ruid</name></decl>, <decl pos:start="5097:25" pos:end="5097:28"><type ref="prev" pos:start="5097:13" pos:end="5097:17"/><name pos:start="5097:25" pos:end="5097:28">euid</name></decl>, <decl pos:start="5097:31" pos:end="5097:34"><type ref="prev" pos:start="5097:13" pos:end="5097:17"/><name pos:start="5097:31" pos:end="5097:34">suid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5099:13" pos:end="5099:60"><expr pos:start="5099:13" pos:end="5099:59"><name pos:start="5099:13" pos:end="5099:15">ret</name> <operator pos:start="5099:17" pos:end="5099:17">=</operator> <call pos:start="5099:19" pos:end="5099:59"><name pos:start="5099:19" pos:end="5099:27">get_errno</name><argument_list pos:start="5099:28" pos:end="5099:59">(<argument pos:start="5099:29" pos:end="5099:58"><expr pos:start="5099:29" pos:end="5099:58"><call pos:start="5099:29" pos:end="5099:58"><name pos:start="5099:29" pos:end="5099:37">getresuid</name><argument_list pos:start="5099:38" pos:end="5099:58">(<argument pos:start="5099:39" pos:end="5099:43"><expr pos:start="5099:39" pos:end="5099:43"><operator pos:start="5099:39" pos:end="5099:39">&amp;</operator><name pos:start="5099:40" pos:end="5099:43">ruid</name></expr></argument>, <argument pos:start="5099:46" pos:end="5099:50"><expr pos:start="5099:46" pos:end="5099:50"><operator pos:start="5099:46" pos:end="5099:46">&amp;</operator><name pos:start="5099:47" pos:end="5099:50">euid</name></expr></argument>, <argument pos:start="5099:53" pos:end="5099:57"><expr pos:start="5099:53" pos:end="5099:57"><operator pos:start="5099:53" pos:end="5099:53">&amp;</operator><name pos:start="5099:54" pos:end="5099:57">suid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5101:13" pos:end="5111:13"><if pos:start="5101:13" pos:end="5111:13">if <condition pos:start="5101:16" pos:end="5101:31">(<expr pos:start="5101:17" pos:end="5101:30"><operator pos:start="5101:17" pos:end="5101:17">!</operator><call pos:start="5101:18" pos:end="5101:30"><name pos:start="5101:18" pos:end="5101:25">is_error</name><argument_list pos:start="5101:26" pos:end="5101:30">(<argument pos:start="5101:27" pos:end="5101:29"><expr pos:start="5101:27" pos:end="5101:29"><name pos:start="5101:27" pos:end="5101:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5101:33" pos:end="5111:13">{<block_content pos:start="5103:17" pos:end="5109:32">

                <if_stmt pos:start="5103:17" pos:end="5109:32"><if pos:start="5103:17" pos:end="5109:32">if <condition pos:start="5103:20" pos:end="5107:61">(<expr pos:start="5103:21" pos:end="5107:60"><call pos:start="5103:21" pos:end="5103:57"><name pos:start="5103:21" pos:end="5103:32">put_user_u16</name><argument_list pos:start="5103:33" pos:end="5103:57">(<argument pos:start="5103:34" pos:end="5103:50"><expr pos:start="5103:34" pos:end="5103:50"><call pos:start="5103:34" pos:end="5103:50"><name pos:start="5103:34" pos:end="5103:44">high2lowuid</name><argument_list pos:start="5103:45" pos:end="5103:50">(<argument pos:start="5103:46" pos:end="5103:49"><expr pos:start="5103:46" pos:end="5103:49"><name pos:start="5103:46" pos:end="5103:49">ruid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5103:53" pos:end="5103:56"><expr pos:start="5103:53" pos:end="5103:56"><name pos:start="5103:53" pos:end="5103:56">arg1</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5105:21" pos:end="5105:22">||</operator> <call pos:start="5105:24" pos:end="5105:60"><name pos:start="5105:24" pos:end="5105:35">put_user_u16</name><argument_list pos:start="5105:36" pos:end="5105:60">(<argument pos:start="5105:37" pos:end="5105:53"><expr pos:start="5105:37" pos:end="5105:53"><call pos:start="5105:37" pos:end="5105:53"><name pos:start="5105:37" pos:end="5105:47">high2lowuid</name><argument_list pos:start="5105:48" pos:end="5105:53">(<argument pos:start="5105:49" pos:end="5105:52"><expr pos:start="5105:49" pos:end="5105:52"><name pos:start="5105:49" pos:end="5105:52">euid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5105:56" pos:end="5105:59"><expr pos:start="5105:56" pos:end="5105:59"><name pos:start="5105:56" pos:end="5105:59">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5107:21" pos:end="5107:22">||</operator> <call pos:start="5107:24" pos:end="5107:60"><name pos:start="5107:24" pos:end="5107:35">put_user_u16</name><argument_list pos:start="5107:36" pos:end="5107:60">(<argument pos:start="5107:37" pos:end="5107:53"><expr pos:start="5107:37" pos:end="5107:53"><call pos:start="5107:37" pos:end="5107:53"><name pos:start="5107:37" pos:end="5107:47">high2lowuid</name><argument_list pos:start="5107:48" pos:end="5107:53">(<argument pos:start="5107:49" pos:end="5107:52"><expr pos:start="5107:49" pos:end="5107:52"><name pos:start="5107:49" pos:end="5107:52">suid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5107:56" pos:end="5107:59"><expr pos:start="5107:56" pos:end="5107:59"><name pos:start="5107:56" pos:end="5107:59">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5109:21" pos:end="5109:32"><block_content pos:start="5109:21" pos:end="5109:32">

                    <goto pos:start="5109:21" pos:end="5109:32">goto <name pos:start="5109:26" pos:end="5109:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5115:9" pos:end="5120:0">break;</break>

<cpp:endif pos:start="5117:1" pos:end="5117:6">#<cpp:directive pos:start="5117:2" pos:end="5117:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5119:1" pos:end="5119:26">#<cpp:directive pos:start="5119:2" pos:end="5119:6">ifdef</cpp:directive> <name pos:start="5119:8" pos:end="5119:26">TARGET_NR_getresgid</name></cpp:ifdef>

    <case pos:start="5121:5" pos:end="5121:29">case <expr pos:start="5121:10" pos:end="5121:28"><name pos:start="5121:10" pos:end="5121:28">TARGET_NR_setresgid</name></expr>:</case>

        <expr_stmt pos:start="5123:9" pos:end="5127:54"><expr pos:start="5123:9" pos:end="5127:53"><name pos:start="5123:9" pos:end="5123:11">ret</name> <operator pos:start="5123:13" pos:end="5123:13">=</operator> <call pos:start="5123:15" pos:end="5127:53"><name pos:start="5123:15" pos:end="5123:23">get_errno</name><argument_list pos:start="5123:24" pos:end="5127:53">(<argument pos:start="5123:25" pos:end="5127:52"><expr pos:start="5123:25" pos:end="5127:52"><call pos:start="5123:25" pos:end="5127:52"><name pos:start="5123:25" pos:end="5123:33">setresgid</name><argument_list pos:start="5123:34" pos:end="5127:52">(<argument pos:start="5123:35" pos:end="5123:51"><expr pos:start="5123:35" pos:end="5123:51"><call pos:start="5123:35" pos:end="5123:51"><name pos:start="5123:35" pos:end="5123:45">low2highgid</name><argument_list pos:start="5123:46" pos:end="5123:51">(<argument pos:start="5123:47" pos:end="5123:50"><expr pos:start="5123:47" pos:end="5123:50"><name pos:start="5123:47" pos:end="5123:50">arg1</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="5125:35" pos:end="5125:51"><expr pos:start="5125:35" pos:end="5125:51"><call pos:start="5125:35" pos:end="5125:51"><name pos:start="5125:35" pos:end="5125:45">low2highgid</name><argument_list pos:start="5125:46" pos:end="5125:51">(<argument pos:start="5125:47" pos:end="5125:50"><expr pos:start="5125:47" pos:end="5125:50"><name pos:start="5125:47" pos:end="5125:50">arg2</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="5127:35" pos:end="5127:51"><expr pos:start="5127:35" pos:end="5127:51"><call pos:start="5127:35" pos:end="5127:51"><name pos:start="5127:35" pos:end="5127:45">low2highgid</name><argument_list pos:start="5127:46" pos:end="5127:51">(<argument pos:start="5127:47" pos:end="5127:50"><expr pos:start="5127:47" pos:end="5127:50"><name pos:start="5127:47" pos:end="5127:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5129:9" pos:end="5134:0">break;</break>

<cpp:endif pos:start="5131:1" pos:end="5131:6">#<cpp:directive pos:start="5131:2" pos:end="5131:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5133:1" pos:end="5133:26">#<cpp:directive pos:start="5133:2" pos:end="5133:6">ifdef</cpp:directive> <name pos:start="5133:8" pos:end="5133:26">TARGET_NR_getresgid</name></cpp:ifdef>

    <case pos:start="5135:5" pos:end="5135:29">case <expr pos:start="5135:10" pos:end="5135:28"><name pos:start="5135:10" pos:end="5135:28">TARGET_NR_getresgid</name></expr>:</case>

        <block pos:start="5137:9" pos:end="5155:9">{<block_content pos:start="5139:13" pos:end="5153:13">

            <decl_stmt pos:start="5139:13" pos:end="5139:35"><decl pos:start="5139:13" pos:end="5139:22"><type pos:start="5139:13" pos:end="5139:17"><name pos:start="5139:13" pos:end="5139:17">gid_t</name></type> <name pos:start="5139:19" pos:end="5139:22">rgid</name></decl>, <decl pos:start="5139:25" pos:end="5139:28"><type ref="prev" pos:start="5139:13" pos:end="5139:17"/><name pos:start="5139:25" pos:end="5139:28">egid</name></decl>, <decl pos:start="5139:31" pos:end="5139:34"><type ref="prev" pos:start="5139:13" pos:end="5139:17"/><name pos:start="5139:31" pos:end="5139:34">sgid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5141:13" pos:end="5141:60"><expr pos:start="5141:13" pos:end="5141:59"><name pos:start="5141:13" pos:end="5141:15">ret</name> <operator pos:start="5141:17" pos:end="5141:17">=</operator> <call pos:start="5141:19" pos:end="5141:59"><name pos:start="5141:19" pos:end="5141:27">get_errno</name><argument_list pos:start="5141:28" pos:end="5141:59">(<argument pos:start="5141:29" pos:end="5141:58"><expr pos:start="5141:29" pos:end="5141:58"><call pos:start="5141:29" pos:end="5141:58"><name pos:start="5141:29" pos:end="5141:37">getresgid</name><argument_list pos:start="5141:38" pos:end="5141:58">(<argument pos:start="5141:39" pos:end="5141:43"><expr pos:start="5141:39" pos:end="5141:43"><operator pos:start="5141:39" pos:end="5141:39">&amp;</operator><name pos:start="5141:40" pos:end="5141:43">rgid</name></expr></argument>, <argument pos:start="5141:46" pos:end="5141:50"><expr pos:start="5141:46" pos:end="5141:50"><operator pos:start="5141:46" pos:end="5141:46">&amp;</operator><name pos:start="5141:47" pos:end="5141:50">egid</name></expr></argument>, <argument pos:start="5141:53" pos:end="5141:57"><expr pos:start="5141:53" pos:end="5141:57"><operator pos:start="5141:53" pos:end="5141:53">&amp;</operator><name pos:start="5141:54" pos:end="5141:57">sgid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5143:13" pos:end="5153:13"><if pos:start="5143:13" pos:end="5153:13">if <condition pos:start="5143:16" pos:end="5143:31">(<expr pos:start="5143:17" pos:end="5143:30"><operator pos:start="5143:17" pos:end="5143:17">!</operator><call pos:start="5143:18" pos:end="5143:30"><name pos:start="5143:18" pos:end="5143:25">is_error</name><argument_list pos:start="5143:26" pos:end="5143:30">(<argument pos:start="5143:27" pos:end="5143:29"><expr pos:start="5143:27" pos:end="5143:29"><name pos:start="5143:27" pos:end="5143:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5143:33" pos:end="5153:13">{<block_content pos:start="5145:17" pos:end="5151:32">

                <if_stmt pos:start="5145:17" pos:end="5151:32"><if pos:start="5145:17" pos:end="5151:32">if <condition pos:start="5145:20" pos:end="5149:61">(<expr pos:start="5145:21" pos:end="5149:60"><call pos:start="5145:21" pos:end="5145:57"><name pos:start="5145:21" pos:end="5145:32">put_user_u16</name><argument_list pos:start="5145:33" pos:end="5145:57">(<argument pos:start="5145:34" pos:end="5145:50"><expr pos:start="5145:34" pos:end="5145:50"><call pos:start="5145:34" pos:end="5145:50"><name pos:start="5145:34" pos:end="5145:44">high2lowgid</name><argument_list pos:start="5145:45" pos:end="5145:50">(<argument pos:start="5145:46" pos:end="5145:49"><expr pos:start="5145:46" pos:end="5145:49"><name pos:start="5145:46" pos:end="5145:49">rgid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5145:53" pos:end="5145:56"><expr pos:start="5145:53" pos:end="5145:56"><name pos:start="5145:53" pos:end="5145:56">arg1</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5147:21" pos:end="5147:22">||</operator> <call pos:start="5147:24" pos:end="5147:60"><name pos:start="5147:24" pos:end="5147:35">put_user_u16</name><argument_list pos:start="5147:36" pos:end="5147:60">(<argument pos:start="5147:37" pos:end="5147:53"><expr pos:start="5147:37" pos:end="5147:53"><call pos:start="5147:37" pos:end="5147:53"><name pos:start="5147:37" pos:end="5147:47">high2lowgid</name><argument_list pos:start="5147:48" pos:end="5147:53">(<argument pos:start="5147:49" pos:end="5147:52"><expr pos:start="5147:49" pos:end="5147:52"><name pos:start="5147:49" pos:end="5147:52">egid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5147:56" pos:end="5147:59"><expr pos:start="5147:56" pos:end="5147:59"><name pos:start="5147:56" pos:end="5147:59">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5149:21" pos:end="5149:22">||</operator> <call pos:start="5149:24" pos:end="5149:60"><name pos:start="5149:24" pos:end="5149:35">put_user_u16</name><argument_list pos:start="5149:36" pos:end="5149:60">(<argument pos:start="5149:37" pos:end="5149:53"><expr pos:start="5149:37" pos:end="5149:53"><call pos:start="5149:37" pos:end="5149:53"><name pos:start="5149:37" pos:end="5149:47">high2lowgid</name><argument_list pos:start="5149:48" pos:end="5149:53">(<argument pos:start="5149:49" pos:end="5149:52"><expr pos:start="5149:49" pos:end="5149:52"><name pos:start="5149:49" pos:end="5149:52">sgid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5149:56" pos:end="5149:59"><expr pos:start="5149:56" pos:end="5149:59"><name pos:start="5149:56" pos:end="5149:59">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5151:21" pos:end="5151:32"><block_content pos:start="5151:21" pos:end="5151:32">

                    <goto pos:start="5151:21" pos:end="5151:32">goto <name pos:start="5151:26" pos:end="5151:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5157:9" pos:end="5160:0">break;</break>

<cpp:endif pos:start="5159:1" pos:end="5159:6">#<cpp:directive pos:start="5159:2" pos:end="5159:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5161:5" pos:end="5161:25">case <expr pos:start="5161:10" pos:end="5161:24"><name pos:start="5161:10" pos:end="5161:24">TARGET_NR_chown</name></expr>:</case>

        <if_stmt pos:start="5163:9" pos:end="5165:24"><if pos:start="5163:9" pos:end="5165:24">if <condition pos:start="5163:12" pos:end="5163:42">(<expr pos:start="5163:13" pos:end="5163:41"><operator pos:start="5163:13" pos:end="5163:13">!</operator><operator pos:start="5163:14" pos:end="5163:14">(</operator><name pos:start="5163:15" pos:end="5163:15">p</name> <operator pos:start="5163:17" pos:end="5163:17">=</operator> <call pos:start="5163:19" pos:end="5163:40"><name pos:start="5163:19" pos:end="5163:34">lock_user_string</name><argument_list pos:start="5163:35" pos:end="5163:40">(<argument pos:start="5163:36" pos:end="5163:39"><expr pos:start="5163:36" pos:end="5163:39"><name pos:start="5163:36" pos:end="5163:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="5163:41" pos:end="5163:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5165:13" pos:end="5165:24"><block_content pos:start="5165:13" pos:end="5165:24">

            <goto pos:start="5165:13" pos:end="5165:24">goto <name pos:start="5165:18" pos:end="5165:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5167:9" pos:end="5167:72"><expr pos:start="5167:9" pos:end="5167:71"><name pos:start="5167:9" pos:end="5167:11">ret</name> <operator pos:start="5167:13" pos:end="5167:13">=</operator> <call pos:start="5167:15" pos:end="5167:71"><name pos:start="5167:15" pos:end="5167:23">get_errno</name><argument_list pos:start="5167:24" pos:end="5167:71">(<argument pos:start="5167:25" pos:end="5167:70"><expr pos:start="5167:25" pos:end="5167:70"><call pos:start="5167:25" pos:end="5167:70"><name pos:start="5167:25" pos:end="5167:29">chown</name><argument_list pos:start="5167:30" pos:end="5167:70">(<argument pos:start="5167:31" pos:end="5167:31"><expr pos:start="5167:31" pos:end="5167:31"><name pos:start="5167:31" pos:end="5167:31">p</name></expr></argument>, <argument pos:start="5167:34" pos:end="5167:50"><expr pos:start="5167:34" pos:end="5167:50"><call pos:start="5167:34" pos:end="5167:50"><name pos:start="5167:34" pos:end="5167:44">low2highuid</name><argument_list pos:start="5167:45" pos:end="5167:50">(<argument pos:start="5167:46" pos:end="5167:49"><expr pos:start="5167:46" pos:end="5167:49"><name pos:start="5167:46" pos:end="5167:49">arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5167:53" pos:end="5167:69"><expr pos:start="5167:53" pos:end="5167:69"><call pos:start="5167:53" pos:end="5167:69"><name pos:start="5167:53" pos:end="5167:63">low2highgid</name><argument_list pos:start="5167:64" pos:end="5167:69">(<argument pos:start="5167:65" pos:end="5167:68"><expr pos:start="5167:65" pos:end="5167:68"><name pos:start="5167:65" pos:end="5167:68">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5169:9" pos:end="5169:32"><expr pos:start="5169:9" pos:end="5169:31"><call pos:start="5169:9" pos:end="5169:31"><name pos:start="5169:9" pos:end="5169:19">unlock_user</name><argument_list pos:start="5169:20" pos:end="5169:31">(<argument pos:start="5169:21" pos:end="5169:21"><expr pos:start="5169:21" pos:end="5169:21"><name pos:start="5169:21" pos:end="5169:21">p</name></expr></argument>, <argument pos:start="5169:24" pos:end="5169:27"><expr pos:start="5169:24" pos:end="5169:27"><name pos:start="5169:24" pos:end="5169:27">arg1</name></expr></argument>, <argument pos:start="5169:30" pos:end="5169:30"><expr pos:start="5169:30" pos:end="5169:30"><literal type="number" pos:start="5169:30" pos:end="5169:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5171:9" pos:end="5171:14">break;</break>

    <case pos:start="5173:5" pos:end="5173:26">case <expr pos:start="5173:10" pos:end="5173:25"><name pos:start="5173:10" pos:end="5173:25">TARGET_NR_setuid</name></expr>:</case>

        <expr_stmt pos:start="5175:9" pos:end="5175:51"><expr pos:start="5175:9" pos:end="5175:50"><name pos:start="5175:9" pos:end="5175:11">ret</name> <operator pos:start="5175:13" pos:end="5175:13">=</operator> <call pos:start="5175:15" pos:end="5175:50"><name pos:start="5175:15" pos:end="5175:23">get_errno</name><argument_list pos:start="5175:24" pos:end="5175:50">(<argument pos:start="5175:25" pos:end="5175:49"><expr pos:start="5175:25" pos:end="5175:49"><call pos:start="5175:25" pos:end="5175:49"><name pos:start="5175:25" pos:end="5175:30">setuid</name><argument_list pos:start="5175:31" pos:end="5175:49">(<argument pos:start="5175:32" pos:end="5175:48"><expr pos:start="5175:32" pos:end="5175:48"><call pos:start="5175:32" pos:end="5175:48"><name pos:start="5175:32" pos:end="5175:42">low2highuid</name><argument_list pos:start="5175:43" pos:end="5175:48">(<argument pos:start="5175:44" pos:end="5175:47"><expr pos:start="5175:44" pos:end="5175:47"><name pos:start="5175:44" pos:end="5175:47">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5177:9" pos:end="5177:14">break;</break>

    <case pos:start="5179:5" pos:end="5179:26">case <expr pos:start="5179:10" pos:end="5179:25"><name pos:start="5179:10" pos:end="5179:25">TARGET_NR_setgid</name></expr>:</case>

        <expr_stmt pos:start="5181:9" pos:end="5181:51"><expr pos:start="5181:9" pos:end="5181:50"><name pos:start="5181:9" pos:end="5181:11">ret</name> <operator pos:start="5181:13" pos:end="5181:13">=</operator> <call pos:start="5181:15" pos:end="5181:50"><name pos:start="5181:15" pos:end="5181:23">get_errno</name><argument_list pos:start="5181:24" pos:end="5181:50">(<argument pos:start="5181:25" pos:end="5181:49"><expr pos:start="5181:25" pos:end="5181:49"><call pos:start="5181:25" pos:end="5181:49"><name pos:start="5181:25" pos:end="5181:30">setgid</name><argument_list pos:start="5181:31" pos:end="5181:49">(<argument pos:start="5181:32" pos:end="5181:48"><expr pos:start="5181:32" pos:end="5181:48"><call pos:start="5181:32" pos:end="5181:48"><name pos:start="5181:32" pos:end="5181:42">low2highgid</name><argument_list pos:start="5181:43" pos:end="5181:48">(<argument pos:start="5181:44" pos:end="5181:47"><expr pos:start="5181:44" pos:end="5181:47"><name pos:start="5181:44" pos:end="5181:47">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5183:9" pos:end="5183:14">break;</break>

    <case pos:start="5185:5" pos:end="5185:28">case <expr pos:start="5185:10" pos:end="5185:27"><name pos:start="5185:10" pos:end="5185:27">TARGET_NR_setfsuid</name></expr>:</case>

        <expr_stmt pos:start="5187:9" pos:end="5187:40"><expr pos:start="5187:9" pos:end="5187:39"><name pos:start="5187:9" pos:end="5187:11">ret</name> <operator pos:start="5187:13" pos:end="5187:13">=</operator> <call pos:start="5187:15" pos:end="5187:39"><name pos:start="5187:15" pos:end="5187:23">get_errno</name><argument_list pos:start="5187:24" pos:end="5187:39">(<argument pos:start="5187:25" pos:end="5187:38"><expr pos:start="5187:25" pos:end="5187:38"><call pos:start="5187:25" pos:end="5187:38"><name pos:start="5187:25" pos:end="5187:32">setfsuid</name><argument_list pos:start="5187:33" pos:end="5187:38">(<argument pos:start="5187:34" pos:end="5187:37"><expr pos:start="5187:34" pos:end="5187:37"><name pos:start="5187:34" pos:end="5187:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5189:9" pos:end="5189:14">break;</break>

    <case pos:start="5191:5" pos:end="5191:28">case <expr pos:start="5191:10" pos:end="5191:27"><name pos:start="5191:10" pos:end="5191:27">TARGET_NR_setfsgid</name></expr>:</case>

        <expr_stmt pos:start="5193:9" pos:end="5193:40"><expr pos:start="5193:9" pos:end="5193:39"><name pos:start="5193:9" pos:end="5193:11">ret</name> <operator pos:start="5193:13" pos:end="5193:13">=</operator> <call pos:start="5193:15" pos:end="5193:39"><name pos:start="5193:15" pos:end="5193:23">get_errno</name><argument_list pos:start="5193:24" pos:end="5193:39">(<argument pos:start="5193:25" pos:end="5193:38"><expr pos:start="5193:25" pos:end="5193:38"><call pos:start="5193:25" pos:end="5193:38"><name pos:start="5193:25" pos:end="5193:32">setfsgid</name><argument_list pos:start="5193:33" pos:end="5193:38">(<argument pos:start="5193:34" pos:end="5193:37"><expr pos:start="5193:34" pos:end="5193:37"><name pos:start="5193:34" pos:end="5193:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5195:9" pos:end="5200:0">break;</break>



<cpp:ifdef pos:start="5199:1" pos:end="5199:25">#<cpp:directive pos:start="5199:2" pos:end="5199:6">ifdef</cpp:directive> <name pos:start="5199:8" pos:end="5199:25">TARGET_NR_lchown32</name></cpp:ifdef>

    <case pos:start="5201:5" pos:end="5201:28">case <expr pos:start="5201:10" pos:end="5201:27"><name pos:start="5201:10" pos:end="5201:27">TARGET_NR_lchown32</name></expr>:</case>

        <if_stmt pos:start="5203:9" pos:end="5205:24"><if pos:start="5203:9" pos:end="5205:24">if <condition pos:start="5203:12" pos:end="5203:42">(<expr pos:start="5203:13" pos:end="5203:41"><operator pos:start="5203:13" pos:end="5203:13">!</operator><operator pos:start="5203:14" pos:end="5203:14">(</operator><name pos:start="5203:15" pos:end="5203:15">p</name> <operator pos:start="5203:17" pos:end="5203:17">=</operator> <call pos:start="5203:19" pos:end="5203:40"><name pos:start="5203:19" pos:end="5203:34">lock_user_string</name><argument_list pos:start="5203:35" pos:end="5203:40">(<argument pos:start="5203:36" pos:end="5203:39"><expr pos:start="5203:36" pos:end="5203:39"><name pos:start="5203:36" pos:end="5203:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="5203:41" pos:end="5203:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5205:13" pos:end="5205:24"><block_content pos:start="5205:13" pos:end="5205:24">

            <goto pos:start="5205:13" pos:end="5205:24">goto <name pos:start="5205:18" pos:end="5205:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5207:9" pos:end="5207:47"><expr pos:start="5207:9" pos:end="5207:46"><name pos:start="5207:9" pos:end="5207:11">ret</name> <operator pos:start="5207:13" pos:end="5207:13">=</operator> <call pos:start="5207:15" pos:end="5207:46"><name pos:start="5207:15" pos:end="5207:23">get_errno</name><argument_list pos:start="5207:24" pos:end="5207:46">(<argument pos:start="5207:25" pos:end="5207:45"><expr pos:start="5207:25" pos:end="5207:45"><call pos:start="5207:25" pos:end="5207:45"><name pos:start="5207:25" pos:end="5207:30">lchown</name><argument_list pos:start="5207:31" pos:end="5207:45">(<argument pos:start="5207:32" pos:end="5207:32"><expr pos:start="5207:32" pos:end="5207:32"><name pos:start="5207:32" pos:end="5207:32">p</name></expr></argument>, <argument pos:start="5207:35" pos:end="5207:38"><expr pos:start="5207:35" pos:end="5207:38"><name pos:start="5207:35" pos:end="5207:38">arg2</name></expr></argument>, <argument pos:start="5207:41" pos:end="5207:44"><expr pos:start="5207:41" pos:end="5207:44"><name pos:start="5207:41" pos:end="5207:44">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5209:9" pos:end="5209:32"><expr pos:start="5209:9" pos:end="5209:31"><call pos:start="5209:9" pos:end="5209:31"><name pos:start="5209:9" pos:end="5209:19">unlock_user</name><argument_list pos:start="5209:20" pos:end="5209:31">(<argument pos:start="5209:21" pos:end="5209:21"><expr pos:start="5209:21" pos:end="5209:21"><name pos:start="5209:21" pos:end="5209:21">p</name></expr></argument>, <argument pos:start="5209:24" pos:end="5209:27"><expr pos:start="5209:24" pos:end="5209:27"><name pos:start="5209:24" pos:end="5209:27">arg1</name></expr></argument>, <argument pos:start="5209:30" pos:end="5209:30"><expr pos:start="5209:30" pos:end="5209:30"><literal type="number" pos:start="5209:30" pos:end="5209:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5211:9" pos:end="5216:0">break;</break>

<cpp:endif pos:start="5213:1" pos:end="5213:6">#<cpp:directive pos:start="5213:2" pos:end="5213:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5215:1" pos:end="5215:25">#<cpp:directive pos:start="5215:2" pos:end="5215:6">ifdef</cpp:directive> <name pos:start="5215:8" pos:end="5215:25">TARGET_NR_getuid32</name></cpp:ifdef>

    <case pos:start="5217:5" pos:end="5217:28">case <expr pos:start="5217:10" pos:end="5217:27"><name pos:start="5217:10" pos:end="5217:27">TARGET_NR_getuid32</name></expr>:</case>

        <expr_stmt pos:start="5219:9" pos:end="5219:34"><expr pos:start="5219:9" pos:end="5219:33"><name pos:start="5219:9" pos:end="5219:11">ret</name> <operator pos:start="5219:13" pos:end="5219:13">=</operator> <call pos:start="5219:15" pos:end="5219:33"><name pos:start="5219:15" pos:end="5219:23">get_errno</name><argument_list pos:start="5219:24" pos:end="5219:33">(<argument pos:start="5219:25" pos:end="5219:32"><expr pos:start="5219:25" pos:end="5219:32"><call pos:start="5219:25" pos:end="5219:32"><name pos:start="5219:25" pos:end="5219:30">getuid</name><argument_list pos:start="5219:31" pos:end="5219:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5221:9" pos:end="5228:0">break;</break>

<cpp:endif pos:start="5223:1" pos:end="5223:6">#<cpp:directive pos:start="5223:2" pos:end="5223:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="5227:1" pos:end="5227:55">#<cpp:directive pos:start="5227:2" pos:end="5227:3">if</cpp:directive> <expr pos:start="5227:5" pos:end="5227:55"><call pos:start="5227:5" pos:end="5227:30"><name pos:start="5227:5" pos:end="5227:11">defined</name><argument_list pos:start="5227:12" pos:end="5227:30">(<argument pos:start="5227:13" pos:end="5227:29"><expr pos:start="5227:13" pos:end="5227:29"><name pos:start="5227:13" pos:end="5227:29">TARGET_NR_getxuid</name></expr></argument>)</argument_list></call> <operator pos:start="5227:32" pos:end="5227:33">&amp;&amp;</operator> <call pos:start="5227:35" pos:end="5227:55"><name pos:start="5227:35" pos:end="5227:41">defined</name><argument_list pos:start="5227:42" pos:end="5227:55">(<argument pos:start="5227:43" pos:end="5227:54"><expr pos:start="5227:43" pos:end="5227:54"><name pos:start="5227:43" pos:end="5227:54">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

   <comment type="block" pos:start="5229:4" pos:end="5229:23">/* Alpha specific */</comment>

    <case pos:start="5231:5" pos:end="5231:27">case <expr pos:start="5231:10" pos:end="5231:26"><name pos:start="5231:10" pos:end="5231:26">TARGET_NR_getxuid</name></expr>:</case>

         <block pos:start="5233:10" pos:end="5241:10">{<block_content pos:start="5235:13" pos:end="5239:55">

            <decl_stmt pos:start="5235:13" pos:end="5235:23"><decl pos:start="5235:13" pos:end="5235:22"><type pos:start="5235:13" pos:end="5235:17"><name pos:start="5235:13" pos:end="5235:17">uid_t</name></type> <name pos:start="5235:19" pos:end="5235:22">euid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5237:13" pos:end="5237:27"><expr pos:start="5237:13" pos:end="5237:26"><name pos:start="5237:13" pos:end="5237:16">euid</name><operator pos:start="5237:17" pos:end="5237:17">=</operator><call pos:start="5237:18" pos:end="5237:26"><name pos:start="5237:18" pos:end="5237:24">geteuid</name><argument_list pos:start="5237:25" pos:end="5237:26">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5239:13" pos:end="5239:55"><expr pos:start="5239:13" pos:end="5239:54"><operator pos:start="5239:13" pos:end="5239:13">(</operator><operator pos:start="5239:14" pos:end="5239:14">(</operator><name pos:start="5239:15" pos:end="5239:27">CPUAlphaState</name> <operator pos:start="5239:29" pos:end="5239:29">*</operator><operator pos:start="5239:30" pos:end="5239:30">)</operator><name pos:start="5239:31" pos:end="5239:37">cpu_env</name><operator pos:start="5239:38" pos:end="5239:38">)</operator><operator pos:start="5239:39" pos:end="5239:40">-&gt;</operator><name pos:start="5239:41" pos:end="5239:49"><name pos:start="5239:41" pos:end="5239:42">ir</name><index pos:start="5239:43" pos:end="5239:49">[<expr pos:start="5239:44" pos:end="5239:48"><name pos:start="5239:44" pos:end="5239:48">IR_A4</name></expr>]</index></name><operator pos:start="5239:50" pos:end="5239:50">=</operator><name pos:start="5239:51" pos:end="5239:54">euid</name></expr>;</expr_stmt>

         </block_content>}</block>

        <expr_stmt pos:start="5243:9" pos:end="5243:34"><expr pos:start="5243:9" pos:end="5243:33"><name pos:start="5243:9" pos:end="5243:11">ret</name> <operator pos:start="5243:13" pos:end="5243:13">=</operator> <call pos:start="5243:15" pos:end="5243:33"><name pos:start="5243:15" pos:end="5243:23">get_errno</name><argument_list pos:start="5243:24" pos:end="5243:33">(<argument pos:start="5243:25" pos:end="5243:32"><expr pos:start="5243:25" pos:end="5243:32"><call pos:start="5243:25" pos:end="5243:32"><name pos:start="5243:25" pos:end="5243:30">getuid</name><argument_list pos:start="5243:31" pos:end="5243:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5245:9" pos:end="5250:0">break;</break>

<cpp:endif pos:start="5247:1" pos:end="5247:6">#<cpp:directive pos:start="5247:2" pos:end="5247:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="5249:1" pos:end="5249:55">#<cpp:directive pos:start="5249:2" pos:end="5249:3">if</cpp:directive> <expr pos:start="5249:5" pos:end="5249:55"><call pos:start="5249:5" pos:end="5249:30"><name pos:start="5249:5" pos:end="5249:11">defined</name><argument_list pos:start="5249:12" pos:end="5249:30">(<argument pos:start="5249:13" pos:end="5249:29"><expr pos:start="5249:13" pos:end="5249:29"><name pos:start="5249:13" pos:end="5249:29">TARGET_NR_getxgid</name></expr></argument>)</argument_list></call> <operator pos:start="5249:32" pos:end="5249:33">&amp;&amp;</operator> <call pos:start="5249:35" pos:end="5249:55"><name pos:start="5249:35" pos:end="5249:41">defined</name><argument_list pos:start="5249:42" pos:end="5249:55">(<argument pos:start="5249:43" pos:end="5249:54"><expr pos:start="5249:43" pos:end="5249:54"><name pos:start="5249:43" pos:end="5249:54">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

   <comment type="block" pos:start="5251:4" pos:end="5251:23">/* Alpha specific */</comment>

    <case pos:start="5253:5" pos:end="5253:27">case <expr pos:start="5253:10" pos:end="5253:26"><name pos:start="5253:10" pos:end="5253:26">TARGET_NR_getxgid</name></expr>:</case>

         <block pos:start="5255:10" pos:end="5263:10">{<block_content pos:start="5257:13" pos:end="5261:55">

            <decl_stmt pos:start="5257:13" pos:end="5257:23"><decl pos:start="5257:13" pos:end="5257:22"><type pos:start="5257:13" pos:end="5257:17"><name pos:start="5257:13" pos:end="5257:17">uid_t</name></type> <name pos:start="5257:19" pos:end="5257:22">egid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5259:13" pos:end="5259:27"><expr pos:start="5259:13" pos:end="5259:26"><name pos:start="5259:13" pos:end="5259:16">egid</name><operator pos:start="5259:17" pos:end="5259:17">=</operator><call pos:start="5259:18" pos:end="5259:26"><name pos:start="5259:18" pos:end="5259:24">getegid</name><argument_list pos:start="5259:25" pos:end="5259:26">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5261:13" pos:end="5261:55"><expr pos:start="5261:13" pos:end="5261:54"><operator pos:start="5261:13" pos:end="5261:13">(</operator><operator pos:start="5261:14" pos:end="5261:14">(</operator><name pos:start="5261:15" pos:end="5261:27">CPUAlphaState</name> <operator pos:start="5261:29" pos:end="5261:29">*</operator><operator pos:start="5261:30" pos:end="5261:30">)</operator><name pos:start="5261:31" pos:end="5261:37">cpu_env</name><operator pos:start="5261:38" pos:end="5261:38">)</operator><operator pos:start="5261:39" pos:end="5261:40">-&gt;</operator><name pos:start="5261:41" pos:end="5261:49"><name pos:start="5261:41" pos:end="5261:42">ir</name><index pos:start="5261:43" pos:end="5261:49">[<expr pos:start="5261:44" pos:end="5261:48"><name pos:start="5261:44" pos:end="5261:48">IR_A4</name></expr>]</index></name><operator pos:start="5261:50" pos:end="5261:50">=</operator><name pos:start="5261:51" pos:end="5261:54">egid</name></expr>;</expr_stmt>

         </block_content>}</block>

        <expr_stmt pos:start="5265:9" pos:end="5265:34"><expr pos:start="5265:9" pos:end="5265:33"><name pos:start="5265:9" pos:end="5265:11">ret</name> <operator pos:start="5265:13" pos:end="5265:13">=</operator> <call pos:start="5265:15" pos:end="5265:33"><name pos:start="5265:15" pos:end="5265:23">get_errno</name><argument_list pos:start="5265:24" pos:end="5265:33">(<argument pos:start="5265:25" pos:end="5265:32"><expr pos:start="5265:25" pos:end="5265:32"><call pos:start="5265:25" pos:end="5265:32"><name pos:start="5265:25" pos:end="5265:30">getgid</name><argument_list pos:start="5265:31" pos:end="5265:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5267:9" pos:end="5272:0">break;</break>

<cpp:endif pos:start="5269:1" pos:end="5269:6">#<cpp:directive pos:start="5269:2" pos:end="5269:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="5271:1" pos:end="5271:62">#<cpp:directive pos:start="5271:2" pos:end="5271:3">if</cpp:directive> <expr pos:start="5271:5" pos:end="5271:62"><call pos:start="5271:5" pos:end="5271:37"><name pos:start="5271:5" pos:end="5271:11">defined</name><argument_list pos:start="5271:12" pos:end="5271:37">(<argument pos:start="5271:13" pos:end="5271:36"><expr pos:start="5271:13" pos:end="5271:36"><name pos:start="5271:13" pos:end="5271:36">TARGET_NR_osf_getsysinfo</name></expr></argument>)</argument_list></call> <operator pos:start="5271:39" pos:end="5271:40">&amp;&amp;</operator> <call pos:start="5271:42" pos:end="5271:62"><name pos:start="5271:42" pos:end="5271:48">defined</name><argument_list pos:start="5271:49" pos:end="5271:62">(<argument pos:start="5271:50" pos:end="5271:61"><expr pos:start="5271:50" pos:end="5271:61"><name pos:start="5271:50" pos:end="5271:61">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="5273:5" pos:end="5273:24">/* Alpha specific */</comment>

    <case pos:start="5275:5" pos:end="5275:34">case <expr pos:start="5275:10" pos:end="5275:33"><name pos:start="5275:10" pos:end="5275:33">TARGET_NR_osf_getsysinfo</name></expr>:</case>

        <expr_stmt pos:start="5277:9" pos:end="5277:33"><expr pos:start="5277:9" pos:end="5277:32"><name pos:start="5277:9" pos:end="5277:11">ret</name> <operator pos:start="5277:13" pos:end="5277:13">=</operator> <operator pos:start="5277:15" pos:end="5277:15">-</operator><name pos:start="5277:16" pos:end="5277:32">TARGET_EOPNOTSUPP</name></expr>;</expr_stmt>

        <switch pos:start="5279:9" pos:end="5341:9">switch <condition pos:start="5279:16" pos:end="5279:21">(<expr pos:start="5279:17" pos:end="5279:20"><name pos:start="5279:17" pos:end="5279:20">arg1</name></expr>)</condition> <block pos:start="5279:23" pos:end="5341:9">{<block_content pos:start="5281:11" pos:end="5319:18">

          <case pos:start="5281:11" pos:end="5281:42">case <expr pos:start="5281:16" pos:end="5281:41"><name pos:start="5281:16" pos:end="5281:41">TARGET_GSI_IEEE_FP_CONTROL</name></expr>:</case>

            <block pos:start="5283:13" pos:end="5317:13">{<block_content pos:start="5285:17" pos:end="5315:24">

                <decl_stmt pos:start="5285:17" pos:end="5285:68"><decl pos:start="5285:17" pos:end="5285:29"><type pos:start="5285:17" pos:end="5285:24"><name pos:start="5285:17" pos:end="5285:24">uint64_t</name></type> <name pos:start="5285:26" pos:end="5285:29">swcr</name></decl>, <decl pos:start="5285:32" pos:end="5285:67"><type ref="prev" pos:start="5285:17" pos:end="5285:24"/><name pos:start="5285:32" pos:end="5285:35">fpcr</name> <init pos:start="5285:37" pos:end="5285:67">= <expr pos:start="5285:39" pos:end="5285:67"><call pos:start="5285:39" pos:end="5285:67"><name pos:start="5285:39" pos:end="5285:57">cpu_alpha_load_fpcr</name> <argument_list pos:start="5285:59" pos:end="5285:67">(<argument pos:start="5285:60" pos:end="5285:66"><expr pos:start="5285:60" pos:end="5285:66"><name pos:start="5285:60" pos:end="5285:66">cpu_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="5289:17" pos:end="5289:59">/* Copied from linux ieee_fpcr_to_swcr.  */</comment>

                <expr_stmt pos:start="5291:17" pos:end="5291:55"><expr pos:start="5291:17" pos:end="5291:54"><name pos:start="5291:17" pos:end="5291:20">swcr</name> <operator pos:start="5291:22" pos:end="5291:22">=</operator> <operator pos:start="5291:24" pos:end="5291:24">(</operator><name pos:start="5291:25" pos:end="5291:28">fpcr</name> <operator pos:start="5291:30" pos:end="5291:31">&gt;&gt;</operator> <literal type="number" pos:start="5291:33" pos:end="5291:34">35</literal><operator pos:start="5291:35" pos:end="5291:35">)</operator> <operator pos:start="5291:37" pos:end="5291:37">&amp;</operator> <name pos:start="5291:39" pos:end="5291:54">SWCR_STATUS_MASK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="5293:17" pos:end="5293:52"><expr pos:start="5293:17" pos:end="5293:51"><name pos:start="5293:17" pos:end="5293:20">swcr</name> <operator pos:start="5293:22" pos:end="5293:23">|=</operator> <operator pos:start="5293:25" pos:end="5293:25">(</operator><name pos:start="5293:26" pos:end="5293:29">fpcr</name> <operator pos:start="5293:31" pos:end="5293:32">&gt;&gt;</operator> <literal type="number" pos:start="5293:34" pos:end="5293:35">36</literal><operator pos:start="5293:36" pos:end="5293:36">)</operator> <operator pos:start="5293:38" pos:end="5293:38">&amp;</operator> <name pos:start="5293:40" pos:end="5293:51">SWCR_MAP_DMZ</name></expr>;</expr_stmt>

                <expr_stmt pos:start="5295:17" pos:end="5299:64"><expr pos:start="5295:17" pos:end="5299:63"><name pos:start="5295:17" pos:end="5295:20">swcr</name> <operator pos:start="5295:22" pos:end="5295:23">|=</operator> <operator pos:start="5295:25" pos:end="5295:25">(</operator><operator pos:start="5295:26" pos:end="5295:26">~</operator><name pos:start="5295:27" pos:end="5295:30">fpcr</name> <operator pos:start="5295:32" pos:end="5295:33">&gt;&gt;</operator> <literal type="number" pos:start="5295:35" pos:end="5295:36">48</literal><operator pos:start="5295:37" pos:end="5295:37">)</operator> <operator pos:start="5295:39" pos:end="5295:39">&amp;</operator> <operator pos:start="5295:41" pos:end="5295:41">(</operator><name pos:start="5295:42" pos:end="5295:61">SWCR_TRAP_ENABLE_INV</name>

                                        <operator pos:start="5297:41" pos:end="5297:41">|</operator> <name pos:start="5297:43" pos:end="5297:62">SWCR_TRAP_ENABLE_DZE</name>

                                        <operator pos:start="5299:41" pos:end="5299:41">|</operator> <name pos:start="5299:43" pos:end="5299:62">SWCR_TRAP_ENABLE_OVF</name><operator pos:start="5299:63" pos:end="5299:63">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="5301:17" pos:end="5303:64"><expr pos:start="5301:17" pos:end="5303:63"><name pos:start="5301:17" pos:end="5301:20">swcr</name> <operator pos:start="5301:22" pos:end="5301:23">|=</operator> <operator pos:start="5301:25" pos:end="5301:25">(</operator><operator pos:start="5301:26" pos:end="5301:26">~</operator><name pos:start="5301:27" pos:end="5301:30">fpcr</name> <operator pos:start="5301:32" pos:end="5301:33">&gt;&gt;</operator> <literal type="number" pos:start="5301:35" pos:end="5301:36">57</literal><operator pos:start="5301:37" pos:end="5301:37">)</operator> <operator pos:start="5301:39" pos:end="5301:39">&amp;</operator> <operator pos:start="5301:41" pos:end="5301:41">(</operator><name pos:start="5301:42" pos:end="5301:61">SWCR_TRAP_ENABLE_UNF</name>

                                        <operator pos:start="5303:41" pos:end="5303:41">|</operator> <name pos:start="5303:43" pos:end="5303:62">SWCR_TRAP_ENABLE_INE</name><operator pos:start="5303:63" pos:end="5303:63">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="5305:17" pos:end="5305:52"><expr pos:start="5305:17" pos:end="5305:51"><name pos:start="5305:17" pos:end="5305:20">swcr</name> <operator pos:start="5305:22" pos:end="5305:23">|=</operator> <operator pos:start="5305:25" pos:end="5305:25">(</operator><name pos:start="5305:26" pos:end="5305:29">fpcr</name> <operator pos:start="5305:31" pos:end="5305:32">&gt;&gt;</operator> <literal type="number" pos:start="5305:34" pos:end="5305:35">47</literal><operator pos:start="5305:36" pos:end="5305:36">)</operator> <operator pos:start="5305:38" pos:end="5305:38">&amp;</operator> <name pos:start="5305:40" pos:end="5305:51">SWCR_MAP_UMZ</name></expr>;</expr_stmt>

                <expr_stmt pos:start="5307:17" pos:end="5307:61"><expr pos:start="5307:17" pos:end="5307:60"><name pos:start="5307:17" pos:end="5307:20">swcr</name> <operator pos:start="5307:22" pos:end="5307:23">|=</operator> <operator pos:start="5307:25" pos:end="5307:25">(</operator><operator pos:start="5307:26" pos:end="5307:26">~</operator><name pos:start="5307:27" pos:end="5307:30">fpcr</name> <operator pos:start="5307:32" pos:end="5307:33">&gt;&gt;</operator> <literal type="number" pos:start="5307:35" pos:end="5307:36">41</literal><operator pos:start="5307:37" pos:end="5307:37">)</operator> <operator pos:start="5307:39" pos:end="5307:39">&amp;</operator> <name pos:start="5307:41" pos:end="5307:60">SWCR_TRAP_ENABLE_DNO</name></expr>;</expr_stmt>



                <if_stmt pos:start="5311:17" pos:end="5313:36"><if pos:start="5311:17" pos:end="5313:36">if <condition pos:start="5311:20" pos:end="5311:46">(<expr pos:start="5311:21" pos:end="5311:45"><call pos:start="5311:21" pos:end="5311:45"><name pos:start="5311:21" pos:end="5311:32">put_user_u64</name> <argument_list pos:start="5311:34" pos:end="5311:45">(<argument pos:start="5311:35" pos:end="5311:38"><expr pos:start="5311:35" pos:end="5311:38"><name pos:start="5311:35" pos:end="5311:38">swcr</name></expr></argument>, <argument pos:start="5311:41" pos:end="5311:44"><expr pos:start="5311:41" pos:end="5311:44"><name pos:start="5311:41" pos:end="5311:44">arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5313:25" pos:end="5313:36"><block_content pos:start="5313:25" pos:end="5313:36">

                        <goto pos:start="5313:25" pos:end="5313:36">goto <name pos:start="5313:30" pos:end="5313:35">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="5315:17" pos:end="5315:24"><expr pos:start="5315:17" pos:end="5315:23"><name pos:start="5315:17" pos:end="5315:19">ret</name> <operator pos:start="5315:21" pos:end="5315:21">=</operator> <literal type="number" pos:start="5315:23" pos:end="5315:23">0</literal></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="5319:13" pos:end="5319:18">break;</break>



          <comment type="block" pos:start="5323:11" pos:end="5339:12">/* case GSI_IEEE_STATE_AT_SIGNAL:

             -- Not implemented in linux kernel.

             case GSI_UACPROC:

             -- Retrieves current unaligned access state; not much used.

             case GSI_PROC_TYPE:

             -- Retrieves implver information; surely not used.

             case GSI_GET_HWRPB:

             -- Grabs a copy of the HWRPB; surely not used.

          */</comment>

        </block_content>}</block></switch>

        <break pos:start="5343:9" pos:end="5348:0">break;</break>

<cpp:endif pos:start="5345:1" pos:end="5345:6">#<cpp:directive pos:start="5345:2" pos:end="5345:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="5347:1" pos:end="5347:62">#<cpp:directive pos:start="5347:2" pos:end="5347:3">if</cpp:directive> <expr pos:start="5347:5" pos:end="5347:62"><call pos:start="5347:5" pos:end="5347:37"><name pos:start="5347:5" pos:end="5347:11">defined</name><argument_list pos:start="5347:12" pos:end="5347:37">(<argument pos:start="5347:13" pos:end="5347:36"><expr pos:start="5347:13" pos:end="5347:36"><name pos:start="5347:13" pos:end="5347:36">TARGET_NR_osf_setsysinfo</name></expr></argument>)</argument_list></call> <operator pos:start="5347:39" pos:end="5347:40">&amp;&amp;</operator> <call pos:start="5347:42" pos:end="5347:62"><name pos:start="5347:42" pos:end="5347:48">defined</name><argument_list pos:start="5347:49" pos:end="5347:62">(<argument pos:start="5347:50" pos:end="5347:61"><expr pos:start="5347:50" pos:end="5347:61"><name pos:start="5347:50" pos:end="5347:61">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="5349:5" pos:end="5349:24">/* Alpha specific */</comment>

    <case pos:start="5351:5" pos:end="5351:34">case <expr pos:start="5351:10" pos:end="5351:33"><name pos:start="5351:10" pos:end="5351:33">TARGET_NR_osf_setsysinfo</name></expr>:</case>

        <expr_stmt pos:start="5353:9" pos:end="5353:33"><expr pos:start="5353:9" pos:end="5353:32"><name pos:start="5353:9" pos:end="5353:11">ret</name> <operator pos:start="5353:13" pos:end="5353:13">=</operator> <operator pos:start="5353:15" pos:end="5353:15">-</operator><name pos:start="5353:16" pos:end="5353:32">TARGET_EOPNOTSUPP</name></expr>;</expr_stmt>

        <switch pos:start="5355:9" pos:end="5521:9">switch <condition pos:start="5355:16" pos:end="5355:21">(<expr pos:start="5355:17" pos:end="5355:20"><name pos:start="5355:17" pos:end="5355:20">arg1</name></expr>)</condition> <block pos:start="5355:23" pos:end="5521:9">{<block_content pos:start="5357:11" pos:end="5505:18">

          <case pos:start="5357:11" pos:end="5357:42">case <expr pos:start="5357:16" pos:end="5357:41"><name pos:start="5357:16" pos:end="5357:41">TARGET_SSI_IEEE_FP_CONTROL</name></expr>:</case>

            <block pos:start="5359:13" pos:end="5403:13">{<block_content pos:start="5361:17" pos:end="5401:24">

                <decl_stmt pos:start="5361:17" pos:end="5361:47"><decl pos:start="5361:17" pos:end="5361:29"><type pos:start="5361:17" pos:end="5361:24"><name pos:start="5361:17" pos:end="5361:24">uint64_t</name></type> <name pos:start="5361:26" pos:end="5361:29">swcr</name></decl>, <decl pos:start="5361:32" pos:end="5361:35"><type ref="prev" pos:start="5361:17" pos:end="5361:24"/><name pos:start="5361:32" pos:end="5361:35">fpcr</name></decl>, <decl pos:start="5361:38" pos:end="5361:46"><type ref="prev" pos:start="5361:17" pos:end="5361:24"/><name pos:start="5361:38" pos:end="5361:46">orig_fpcr</name></decl>;</decl_stmt>



                <if_stmt pos:start="5365:17" pos:end="5369:17"><if pos:start="5365:17" pos:end="5369:17">if <condition pos:start="5365:20" pos:end="5365:46">(<expr pos:start="5365:21" pos:end="5365:45"><call pos:start="5365:21" pos:end="5365:45"><name pos:start="5365:21" pos:end="5365:32">get_user_u64</name> <argument_list pos:start="5365:34" pos:end="5365:45">(<argument pos:start="5365:35" pos:end="5365:38"><expr pos:start="5365:35" pos:end="5365:38"><name pos:start="5365:35" pos:end="5365:38">swcr</name></expr></argument>, <argument pos:start="5365:41" pos:end="5365:44"><expr pos:start="5365:41" pos:end="5365:44"><name pos:start="5365:41" pos:end="5365:44">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5365:48" pos:end="5369:17">{<block_content pos:start="5367:21" pos:end="5367:32">

                    <goto pos:start="5367:21" pos:end="5367:32">goto <name pos:start="5367:26" pos:end="5367:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="5371:17" pos:end="5371:57"><expr pos:start="5371:17" pos:end="5371:56"><name pos:start="5371:17" pos:end="5371:25">orig_fpcr</name> <operator pos:start="5371:27" pos:end="5371:27">=</operator> <call pos:start="5371:29" pos:end="5371:56"><name pos:start="5371:29" pos:end="5371:47">cpu_alpha_load_fpcr</name><argument_list pos:start="5371:48" pos:end="5371:56">(<argument pos:start="5371:49" pos:end="5371:55"><expr pos:start="5371:49" pos:end="5371:55"><name pos:start="5371:49" pos:end="5371:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5373:17" pos:end="5373:49"><expr pos:start="5373:17" pos:end="5373:48"><name pos:start="5373:17" pos:end="5373:20">fpcr</name> <operator pos:start="5373:22" pos:end="5373:22">=</operator> <name pos:start="5373:24" pos:end="5373:32">orig_fpcr</name> <operator pos:start="5373:34" pos:end="5373:34">&amp;</operator> <name pos:start="5373:36" pos:end="5373:48">FPCR_DYN_MASK</name></expr>;</expr_stmt>



                <comment type="block" pos:start="5377:17" pos:end="5377:59">/* Copied from linux ieee_swcr_to_fpcr.  */</comment>

                <expr_stmt pos:start="5379:17" pos:end="5379:56"><expr pos:start="5379:17" pos:end="5379:55"><name pos:start="5379:17" pos:end="5379:20">fpcr</name> <operator pos:start="5379:22" pos:end="5379:23">|=</operator> <operator pos:start="5379:25" pos:end="5379:25">(</operator><name pos:start="5379:26" pos:end="5379:29">swcr</name> <operator pos:start="5379:31" pos:end="5379:31">&amp;</operator> <name pos:start="5379:33" pos:end="5379:48">SWCR_STATUS_MASK</name><operator pos:start="5379:49" pos:end="5379:49">)</operator> <operator pos:start="5379:51" pos:end="5379:52">&lt;&lt;</operator> <literal type="number" pos:start="5379:54" pos:end="5379:55">35</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="5381:17" pos:end="5381:52"><expr pos:start="5381:17" pos:end="5381:51"><name pos:start="5381:17" pos:end="5381:20">fpcr</name> <operator pos:start="5381:22" pos:end="5381:23">|=</operator> <operator pos:start="5381:25" pos:end="5381:25">(</operator><name pos:start="5381:26" pos:end="5381:29">swcr</name> <operator pos:start="5381:31" pos:end="5381:31">&amp;</operator> <name pos:start="5381:33" pos:end="5381:44">SWCR_MAP_DMZ</name><operator pos:start="5381:45" pos:end="5381:45">)</operator> <operator pos:start="5381:47" pos:end="5381:48">&lt;&lt;</operator> <literal type="number" pos:start="5381:50" pos:end="5381:51">36</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="5383:17" pos:end="5387:65"><expr pos:start="5383:17" pos:end="5387:64"><name pos:start="5383:17" pos:end="5383:20">fpcr</name> <operator pos:start="5383:22" pos:end="5383:23">|=</operator> <operator pos:start="5383:25" pos:end="5383:25">(</operator><operator pos:start="5383:26" pos:end="5383:26">~</operator><name pos:start="5383:27" pos:end="5383:30">swcr</name> <operator pos:start="5383:32" pos:end="5383:32">&amp;</operator> <operator pos:start="5383:34" pos:end="5383:34">(</operator><name pos:start="5383:35" pos:end="5383:54">SWCR_TRAP_ENABLE_INV</name>

                                  <operator pos:start="5385:35" pos:end="5385:35">|</operator> <name pos:start="5385:37" pos:end="5385:56">SWCR_TRAP_ENABLE_DZE</name>

                                  <operator pos:start="5387:35" pos:end="5387:35">|</operator> <name pos:start="5387:37" pos:end="5387:56">SWCR_TRAP_ENABLE_OVF</name><operator pos:start="5387:57" pos:end="5387:57">)</operator><operator pos:start="5387:58" pos:end="5387:58">)</operator> <operator pos:start="5387:60" pos:end="5387:61">&lt;&lt;</operator> <literal type="number" pos:start="5387:63" pos:end="5387:64">48</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="5389:17" pos:end="5391:65"><expr pos:start="5389:17" pos:end="5391:64"><name pos:start="5389:17" pos:end="5389:20">fpcr</name> <operator pos:start="5389:22" pos:end="5389:23">|=</operator> <operator pos:start="5389:25" pos:end="5389:25">(</operator><operator pos:start="5389:26" pos:end="5389:26">~</operator><name pos:start="5389:27" pos:end="5389:30">swcr</name> <operator pos:start="5389:32" pos:end="5389:32">&amp;</operator> <operator pos:start="5389:34" pos:end="5389:34">(</operator><name pos:start="5389:35" pos:end="5389:54">SWCR_TRAP_ENABLE_UNF</name>

                                  <operator pos:start="5391:35" pos:end="5391:35">|</operator> <name pos:start="5391:37" pos:end="5391:56">SWCR_TRAP_ENABLE_INE</name><operator pos:start="5391:57" pos:end="5391:57">)</operator><operator pos:start="5391:58" pos:end="5391:58">)</operator> <operator pos:start="5391:60" pos:end="5391:61">&lt;&lt;</operator> <literal type="number" pos:start="5391:63" pos:end="5391:64">57</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="5393:17" pos:end="5393:74"><expr pos:start="5393:17" pos:end="5393:73"><name pos:start="5393:17" pos:end="5393:20">fpcr</name> <operator pos:start="5393:22" pos:end="5393:23">|=</operator> <operator pos:start="5393:25" pos:end="5393:25">(</operator><ternary pos:start="5393:26" pos:end="5393:72"><condition pos:start="5393:26" pos:end="5393:46"><expr pos:start="5393:26" pos:end="5393:44"><name pos:start="5393:26" pos:end="5393:29">swcr</name> <operator pos:start="5393:31" pos:end="5393:31">&amp;</operator> <name pos:start="5393:33" pos:end="5393:44">SWCR_MAP_UMZ</name></expr> ?</condition><then pos:start="5393:48" pos:end="5393:68"> <expr pos:start="5393:48" pos:end="5393:68"><name pos:start="5393:48" pos:end="5393:56">FPCR_UNDZ</name> <operator pos:start="5393:58" pos:end="5393:58">|</operator> <name pos:start="5393:60" pos:end="5393:68">FPCR_UNFD</name></expr> </then><else pos:start="5393:70" pos:end="5393:72">: <expr pos:start="5393:72" pos:end="5393:72"><literal type="number" pos:start="5393:72" pos:end="5393:72">0</literal></expr></else></ternary><operator pos:start="5393:73" pos:end="5393:73">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="5395:17" pos:end="5395:61"><expr pos:start="5395:17" pos:end="5395:60"><name pos:start="5395:17" pos:end="5395:20">fpcr</name> <operator pos:start="5395:22" pos:end="5395:23">|=</operator> <operator pos:start="5395:25" pos:end="5395:25">(</operator><operator pos:start="5395:26" pos:end="5395:26">~</operator><name pos:start="5395:27" pos:end="5395:30">swcr</name> <operator pos:start="5395:32" pos:end="5395:32">&amp;</operator> <name pos:start="5395:34" pos:end="5395:53">SWCR_TRAP_ENABLE_DNO</name><operator pos:start="5395:54" pos:end="5395:54">)</operator> <operator pos:start="5395:56" pos:end="5395:57">&lt;&lt;</operator> <literal type="number" pos:start="5395:59" pos:end="5395:60">41</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="5399:17" pos:end="5399:52"><expr pos:start="5399:17" pos:end="5399:51"><call pos:start="5399:17" pos:end="5399:51"><name pos:start="5399:17" pos:end="5399:36">cpu_alpha_store_fpcr</name><argument_list pos:start="5399:37" pos:end="5399:51">(<argument pos:start="5399:38" pos:end="5399:44"><expr pos:start="5399:38" pos:end="5399:44"><name pos:start="5399:38" pos:end="5399:44">cpu_env</name></expr></argument>, <argument pos:start="5399:47" pos:end="5399:50"><expr pos:start="5399:47" pos:end="5399:50"><name pos:start="5399:47" pos:end="5399:50">fpcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5401:17" pos:end="5401:24"><expr pos:start="5401:17" pos:end="5401:23"><name pos:start="5401:17" pos:end="5401:19">ret</name> <operator pos:start="5401:21" pos:end="5401:21">=</operator> <literal type="number" pos:start="5401:23" pos:end="5401:23">0</literal></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="5405:13" pos:end="5405:18">break;</break>



          <case pos:start="5409:11" pos:end="5409:47">case <expr pos:start="5409:16" pos:end="5409:46"><name pos:start="5409:16" pos:end="5409:46">TARGET_SSI_IEEE_RAISE_EXCEPTION</name></expr>:</case>

            <block pos:start="5411:13" pos:end="5503:13">{<block_content pos:start="5413:17" pos:end="5501:17">

                <decl_stmt pos:start="5413:17" pos:end="5413:46"><decl pos:start="5413:17" pos:end="5413:28"><type pos:start="5413:17" pos:end="5413:24"><name pos:start="5413:17" pos:end="5413:24">uint64_t</name></type> <name pos:start="5413:26" pos:end="5413:28">exc</name></decl>, <decl pos:start="5413:31" pos:end="5413:34"><type ref="prev" pos:start="5413:17" pos:end="5413:24"/><name pos:start="5413:31" pos:end="5413:34">fpcr</name></decl>, <decl pos:start="5413:37" pos:end="5413:45"><type ref="prev" pos:start="5413:17" pos:end="5413:24"/><name pos:start="5413:37" pos:end="5413:45">orig_fpcr</name></decl>;</decl_stmt>

                <decl_stmt pos:start="5415:17" pos:end="5415:28"><decl pos:start="5415:17" pos:end="5415:27"><type pos:start="5415:17" pos:end="5415:19"><name pos:start="5415:17" pos:end="5415:19">int</name></type> <name pos:start="5415:21" pos:end="5415:27">si_code</name></decl>;</decl_stmt>



                <if_stmt pos:start="5419:17" pos:end="5423:17"><if pos:start="5419:17" pos:end="5423:17">if <condition pos:start="5419:20" pos:end="5419:44">(<expr pos:start="5419:21" pos:end="5419:43"><call pos:start="5419:21" pos:end="5419:43"><name pos:start="5419:21" pos:end="5419:32">get_user_u64</name><argument_list pos:start="5419:33" pos:end="5419:43">(<argument pos:start="5419:34" pos:end="5419:36"><expr pos:start="5419:34" pos:end="5419:36"><name pos:start="5419:34" pos:end="5419:36">exc</name></expr></argument>, <argument pos:start="5419:39" pos:end="5419:42"><expr pos:start="5419:39" pos:end="5419:42"><name pos:start="5419:39" pos:end="5419:42">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5419:46" pos:end="5423:17">{<block_content pos:start="5421:21" pos:end="5421:32">

                    <goto pos:start="5421:21" pos:end="5421:32">goto <name pos:start="5421:26" pos:end="5421:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="5427:17" pos:end="5427:57"><expr pos:start="5427:17" pos:end="5427:56"><name pos:start="5427:17" pos:end="5427:25">orig_fpcr</name> <operator pos:start="5427:27" pos:end="5427:27">=</operator> <call pos:start="5427:29" pos:end="5427:56"><name pos:start="5427:29" pos:end="5427:47">cpu_alpha_load_fpcr</name><argument_list pos:start="5427:48" pos:end="5427:56">(<argument pos:start="5427:49" pos:end="5427:55"><expr pos:start="5427:49" pos:end="5427:55"><name pos:start="5427:49" pos:end="5427:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="5431:17" pos:end="5431:64">/* We only add to the exception status here.  */</comment>

                <expr_stmt pos:start="5433:17" pos:end="5433:68"><expr pos:start="5433:17" pos:end="5433:67"><name pos:start="5433:17" pos:end="5433:20">fpcr</name> <operator pos:start="5433:22" pos:end="5433:22">=</operator> <name pos:start="5433:24" pos:end="5433:32">orig_fpcr</name> <operator pos:start="5433:34" pos:end="5433:34">|</operator> <operator pos:start="5433:36" pos:end="5433:36">(</operator><operator pos:start="5433:37" pos:end="5433:37">(</operator><name pos:start="5433:38" pos:end="5433:40">exc</name> <operator pos:start="5433:42" pos:end="5433:42">&amp;</operator> <name pos:start="5433:44" pos:end="5433:59">SWCR_STATUS_MASK</name><operator pos:start="5433:60" pos:end="5433:60">)</operator> <operator pos:start="5433:62" pos:end="5433:63">&lt;&lt;</operator> <literal type="number" pos:start="5433:65" pos:end="5433:66">35</literal><operator pos:start="5433:67" pos:end="5433:67">)</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="5437:17" pos:end="5437:52"><expr pos:start="5437:17" pos:end="5437:51"><call pos:start="5437:17" pos:end="5437:51"><name pos:start="5437:17" pos:end="5437:36">cpu_alpha_store_fpcr</name><argument_list pos:start="5437:37" pos:end="5437:51">(<argument pos:start="5437:38" pos:end="5437:44"><expr pos:start="5437:38" pos:end="5437:44"><name pos:start="5437:38" pos:end="5437:44">cpu_env</name></expr></argument>, <argument pos:start="5437:47" pos:end="5437:50"><expr pos:start="5437:47" pos:end="5437:50"><name pos:start="5437:47" pos:end="5437:50">fpcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5439:17" pos:end="5439:24"><expr pos:start="5439:17" pos:end="5439:23"><name pos:start="5439:17" pos:end="5439:19">ret</name> <operator pos:start="5439:21" pos:end="5439:21">=</operator> <literal type="number" pos:start="5439:23" pos:end="5439:23">0</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="5443:17" pos:end="5443:55">/* Old exceptions are not signaled.  */</comment>

                <expr_stmt pos:start="5445:17" pos:end="5445:56"><expr pos:start="5445:17" pos:end="5445:55"><name pos:start="5445:17" pos:end="5445:20">fpcr</name> <operator pos:start="5445:22" pos:end="5445:23">&amp;=</operator> <operator pos:start="5445:25" pos:end="5445:25">~</operator><operator pos:start="5445:26" pos:end="5445:26">(</operator><name pos:start="5445:27" pos:end="5445:35">orig_fpcr</name> <operator pos:start="5445:37" pos:end="5445:37">&amp;</operator> <name pos:start="5445:39" pos:end="5445:54">FPCR_STATUS_MASK</name><operator pos:start="5445:55" pos:end="5445:55">)</operator></expr>;</expr_stmt>



                <comment type="block" pos:start="5449:17" pos:end="5451:55">/* If any exceptions set by this call,

                   and are unmasked, send a signal.  */</comment>

                <expr_stmt pos:start="5453:17" pos:end="5453:28"><expr pos:start="5453:17" pos:end="5453:27"><name pos:start="5453:17" pos:end="5453:23">si_code</name> <operator pos:start="5453:25" pos:end="5453:25">=</operator> <literal type="number" pos:start="5453:27" pos:end="5453:27">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="5455:17" pos:end="5459:17"><if pos:start="5455:17" pos:end="5459:17">if <condition pos:start="5455:20" pos:end="5455:64">(<expr pos:start="5455:21" pos:end="5455:63"><operator pos:start="5455:21" pos:end="5455:21">(</operator><name pos:start="5455:22" pos:end="5455:25">fpcr</name> <operator pos:start="5455:27" pos:end="5455:27">&amp;</operator> <operator pos:start="5455:29" pos:end="5455:29">(</operator><name pos:start="5455:30" pos:end="5455:37">FPCR_INE</name> <operator pos:start="5455:39" pos:end="5455:39">|</operator> <name pos:start="5455:41" pos:end="5455:49">FPCR_INED</name><operator pos:start="5455:50" pos:end="5455:50">)</operator><operator pos:start="5455:51" pos:end="5455:51">)</operator> <operator pos:start="5455:53" pos:end="5455:54">==</operator> <name pos:start="5455:56" pos:end="5455:63">FPCR_INE</name></expr>)</condition> <block pos:start="5455:66" pos:end="5459:17">{<block_content pos:start="5457:21" pos:end="5457:48">

                    <expr_stmt pos:start="5457:21" pos:end="5457:48"><expr pos:start="5457:21" pos:end="5457:47"><name pos:start="5457:21" pos:end="5457:27">si_code</name> <operator pos:start="5457:29" pos:end="5457:29">=</operator> <name pos:start="5457:31" pos:end="5457:47">TARGET_FPE_FLTRES</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5461:17" pos:end="5465:17"><if pos:start="5461:17" pos:end="5465:17">if <condition pos:start="5461:20" pos:end="5461:64">(<expr pos:start="5461:21" pos:end="5461:63"><operator pos:start="5461:21" pos:end="5461:21">(</operator><name pos:start="5461:22" pos:end="5461:25">fpcr</name> <operator pos:start="5461:27" pos:end="5461:27">&amp;</operator> <operator pos:start="5461:29" pos:end="5461:29">(</operator><name pos:start="5461:30" pos:end="5461:37">FPCR_UNF</name> <operator pos:start="5461:39" pos:end="5461:39">|</operator> <name pos:start="5461:41" pos:end="5461:49">FPCR_UNFD</name><operator pos:start="5461:50" pos:end="5461:50">)</operator><operator pos:start="5461:51" pos:end="5461:51">)</operator> <operator pos:start="5461:53" pos:end="5461:54">==</operator> <name pos:start="5461:56" pos:end="5461:63">FPCR_UNF</name></expr>)</condition> <block pos:start="5461:66" pos:end="5465:17">{<block_content pos:start="5463:21" pos:end="5463:48">

                    <expr_stmt pos:start="5463:21" pos:end="5463:48"><expr pos:start="5463:21" pos:end="5463:47"><name pos:start="5463:21" pos:end="5463:27">si_code</name> <operator pos:start="5463:29" pos:end="5463:29">=</operator> <name pos:start="5463:31" pos:end="5463:47">TARGET_FPE_FLTUND</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5467:17" pos:end="5471:17"><if pos:start="5467:17" pos:end="5471:17">if <condition pos:start="5467:20" pos:end="5467:64">(<expr pos:start="5467:21" pos:end="5467:63"><operator pos:start="5467:21" pos:end="5467:21">(</operator><name pos:start="5467:22" pos:end="5467:25">fpcr</name> <operator pos:start="5467:27" pos:end="5467:27">&amp;</operator> <operator pos:start="5467:29" pos:end="5467:29">(</operator><name pos:start="5467:30" pos:end="5467:37">FPCR_OVF</name> <operator pos:start="5467:39" pos:end="5467:39">|</operator> <name pos:start="5467:41" pos:end="5467:49">FPCR_OVFD</name><operator pos:start="5467:50" pos:end="5467:50">)</operator><operator pos:start="5467:51" pos:end="5467:51">)</operator> <operator pos:start="5467:53" pos:end="5467:54">==</operator> <name pos:start="5467:56" pos:end="5467:63">FPCR_OVF</name></expr>)</condition> <block pos:start="5467:66" pos:end="5471:17">{<block_content pos:start="5469:21" pos:end="5469:48">

                    <expr_stmt pos:start="5469:21" pos:end="5469:48"><expr pos:start="5469:21" pos:end="5469:47"><name pos:start="5469:21" pos:end="5469:27">si_code</name> <operator pos:start="5469:29" pos:end="5469:29">=</operator> <name pos:start="5469:31" pos:end="5469:47">TARGET_FPE_FLTOVF</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5473:17" pos:end="5477:17"><if pos:start="5473:17" pos:end="5477:17">if <condition pos:start="5473:20" pos:end="5473:64">(<expr pos:start="5473:21" pos:end="5473:63"><operator pos:start="5473:21" pos:end="5473:21">(</operator><name pos:start="5473:22" pos:end="5473:25">fpcr</name> <operator pos:start="5473:27" pos:end="5473:27">&amp;</operator> <operator pos:start="5473:29" pos:end="5473:29">(</operator><name pos:start="5473:30" pos:end="5473:37">FPCR_DZE</name> <operator pos:start="5473:39" pos:end="5473:39">|</operator> <name pos:start="5473:41" pos:end="5473:49">FPCR_DZED</name><operator pos:start="5473:50" pos:end="5473:50">)</operator><operator pos:start="5473:51" pos:end="5473:51">)</operator> <operator pos:start="5473:53" pos:end="5473:54">==</operator> <name pos:start="5473:56" pos:end="5473:63">FPCR_DZE</name></expr>)</condition> <block pos:start="5473:66" pos:end="5477:17">{<block_content pos:start="5475:21" pos:end="5475:48">

                    <expr_stmt pos:start="5475:21" pos:end="5475:48"><expr pos:start="5475:21" pos:end="5475:47"><name pos:start="5475:21" pos:end="5475:27">si_code</name> <operator pos:start="5475:29" pos:end="5475:29">=</operator> <name pos:start="5475:31" pos:end="5475:47">TARGET_FPE_FLTDIV</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5479:17" pos:end="5483:17"><if pos:start="5479:17" pos:end="5483:17">if <condition pos:start="5479:20" pos:end="5479:64">(<expr pos:start="5479:21" pos:end="5479:63"><operator pos:start="5479:21" pos:end="5479:21">(</operator><name pos:start="5479:22" pos:end="5479:25">fpcr</name> <operator pos:start="5479:27" pos:end="5479:27">&amp;</operator> <operator pos:start="5479:29" pos:end="5479:29">(</operator><name pos:start="5479:30" pos:end="5479:37">FPCR_INV</name> <operator pos:start="5479:39" pos:end="5479:39">|</operator> <name pos:start="5479:41" pos:end="5479:49">FPCR_INVD</name><operator pos:start="5479:50" pos:end="5479:50">)</operator><operator pos:start="5479:51" pos:end="5479:51">)</operator> <operator pos:start="5479:53" pos:end="5479:54">==</operator> <name pos:start="5479:56" pos:end="5479:63">FPCR_INV</name></expr>)</condition> <block pos:start="5479:66" pos:end="5483:17">{<block_content pos:start="5481:21" pos:end="5481:48">

                    <expr_stmt pos:start="5481:21" pos:end="5481:48"><expr pos:start="5481:21" pos:end="5481:47"><name pos:start="5481:21" pos:end="5481:27">si_code</name> <operator pos:start="5481:29" pos:end="5481:29">=</operator> <name pos:start="5481:31" pos:end="5481:47">TARGET_FPE_FLTINV</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5485:17" pos:end="5501:17"><if pos:start="5485:17" pos:end="5501:17">if <condition pos:start="5485:20" pos:end="5485:33">(<expr pos:start="5485:21" pos:end="5485:32"><name pos:start="5485:21" pos:end="5485:27">si_code</name> <operator pos:start="5485:29" pos:end="5485:30">!=</operator> <literal type="number" pos:start="5485:32" pos:end="5485:32">0</literal></expr>)</condition> <block pos:start="5485:35" pos:end="5501:17">{<block_content pos:start="5487:21" pos:end="5499:80">

                    <decl_stmt pos:start="5487:21" pos:end="5487:42"><decl pos:start="5487:21" pos:end="5487:41"><type pos:start="5487:21" pos:end="5487:36"><name pos:start="5487:21" pos:end="5487:36">target_siginfo_t</name></type> <name pos:start="5487:38" pos:end="5487:41">info</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="5489:21" pos:end="5489:43"><expr pos:start="5489:21" pos:end="5489:42"><name pos:start="5489:21" pos:end="5489:33"><name pos:start="5489:21" pos:end="5489:24">info</name><operator pos:start="5489:25" pos:end="5489:25">.</operator><name pos:start="5489:26" pos:end="5489:33">si_signo</name></name> <operator pos:start="5489:35" pos:end="5489:35">=</operator> <name pos:start="5489:37" pos:end="5489:42">SIGFPE</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="5491:21" pos:end="5491:38"><expr pos:start="5491:21" pos:end="5491:37"><name pos:start="5491:21" pos:end="5491:33"><name pos:start="5491:21" pos:end="5491:24">info</name><operator pos:start="5491:25" pos:end="5491:25">.</operator><name pos:start="5491:26" pos:end="5491:33">si_errno</name></name> <operator pos:start="5491:35" pos:end="5491:35">=</operator> <literal type="number" pos:start="5491:37" pos:end="5491:37">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="5493:21" pos:end="5493:43"><expr pos:start="5493:21" pos:end="5493:42"><name pos:start="5493:21" pos:end="5493:32"><name pos:start="5493:21" pos:end="5493:24">info</name><operator pos:start="5493:25" pos:end="5493:25">.</operator><name pos:start="5493:26" pos:end="5493:32">si_code</name></name> <operator pos:start="5493:34" pos:end="5493:34">=</operator> <name pos:start="5493:36" pos:end="5493:42">si_code</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="5495:21" pos:end="5497:56"><expr pos:start="5495:21" pos:end="5497:55"><name pos:start="5495:21" pos:end="5495:50"><name pos:start="5495:21" pos:end="5495:24">info</name><operator pos:start="5495:25" pos:end="5495:25">.</operator><name pos:start="5495:26" pos:end="5495:34">_sifields</name><operator pos:start="5495:35" pos:end="5495:35">.</operator><name pos:start="5495:36" pos:end="5495:44">_sigfault</name><operator pos:start="5495:45" pos:end="5495:45">.</operator><name pos:start="5495:46" pos:end="5495:50">_addr</name></name>

                        <operator pos:start="5497:25" pos:end="5497:25">=</operator> <operator pos:start="5497:27" pos:end="5497:27">(</operator><operator pos:start="5497:28" pos:end="5497:28">(</operator><name pos:start="5497:29" pos:end="5497:40">CPUArchState</name> <operator pos:start="5497:42" pos:end="5497:42">*</operator><operator pos:start="5497:43" pos:end="5497:43">)</operator><name pos:start="5497:44" pos:end="5497:50">cpu_env</name><operator pos:start="5497:51" pos:end="5497:51">)</operator><operator pos:start="5497:52" pos:end="5497:53">-&gt;</operator><name pos:start="5497:54" pos:end="5497:55">pc</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="5499:21" pos:end="5499:80"><expr pos:start="5499:21" pos:end="5499:79"><call pos:start="5499:21" pos:end="5499:79"><name pos:start="5499:21" pos:end="5499:32">queue_signal</name><argument_list pos:start="5499:33" pos:end="5499:79">(<argument pos:start="5499:34" pos:end="5499:56"><expr pos:start="5499:34" pos:end="5499:56"><operator pos:start="5499:34" pos:end="5499:34">(</operator><name pos:start="5499:35" pos:end="5499:46">CPUArchState</name> <operator pos:start="5499:48" pos:end="5499:48">*</operator><operator pos:start="5499:49" pos:end="5499:49">)</operator><name pos:start="5499:50" pos:end="5499:56">cpu_env</name></expr></argument>, <argument pos:start="5499:59" pos:end="5499:71"><expr pos:start="5499:59" pos:end="5499:71"><name pos:start="5499:59" pos:end="5499:71"><name pos:start="5499:59" pos:end="5499:62">info</name><operator pos:start="5499:63" pos:end="5499:63">.</operator><name pos:start="5499:64" pos:end="5499:71">si_signo</name></name></expr></argument>, <argument pos:start="5499:74" pos:end="5499:78"><expr pos:start="5499:74" pos:end="5499:78"><operator pos:start="5499:74" pos:end="5499:74">&amp;</operator><name pos:start="5499:75" pos:end="5499:78">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <break pos:start="5505:13" pos:end="5505:18">break;</break>



          <comment type="block" pos:start="5509:11" pos:end="5519:12">/* case SSI_NVPAIRS:

             -- Used with SSIN_UACPROC to enable unaligned accesses.

             case SSI_IEEE_STATE_AT_SIGNAL:

             case SSI_IEEE_IGNORE_STATE_AT_SIGNAL:

             -- Not implemented in linux kernel

          */</comment>

        </block_content>}</block></switch>

        <break pos:start="5523:9" pos:end="5528:0">break;</break>

<cpp:endif pos:start="5525:1" pos:end="5525:6">#<cpp:directive pos:start="5525:2" pos:end="5525:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5527:1" pos:end="5527:32">#<cpp:directive pos:start="5527:2" pos:end="5527:6">ifdef</cpp:directive> <name pos:start="5527:8" pos:end="5527:32">TARGET_NR_osf_sigprocmask</name></cpp:ifdef>

    <comment type="block" pos:start="5529:5" pos:end="5529:26">/* Alpha specific.  */</comment>

    <case pos:start="5531:5" pos:end="5531:35">case <expr pos:start="5531:10" pos:end="5531:34"><name pos:start="5531:10" pos:end="5531:34">TARGET_NR_osf_sigprocmask</name></expr>:</case>

        <block pos:start="5533:9" pos:end="5581:9">{<block_content pos:start="5535:13" pos:end="5579:23">

            <decl_stmt pos:start="5535:13" pos:end="5535:27"><decl pos:start="5535:13" pos:end="5535:26"><type pos:start="5535:13" pos:end="5535:21"><name pos:start="5535:13" pos:end="5535:21">abi_ulong</name></type> <name pos:start="5535:23" pos:end="5535:26">mask</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5537:13" pos:end="5537:20"><decl pos:start="5537:13" pos:end="5537:19"><type pos:start="5537:13" pos:end="5537:15"><name pos:start="5537:13" pos:end="5537:15">int</name></type> <name pos:start="5537:17" pos:end="5537:19">how</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5539:13" pos:end="5539:33"><decl pos:start="5539:13" pos:end="5539:24"><type pos:start="5539:13" pos:end="5539:20"><name pos:start="5539:13" pos:end="5539:20">sigset_t</name></type> <name pos:start="5539:22" pos:end="5539:24">set</name></decl>, <decl pos:start="5539:27" pos:end="5539:32"><type ref="prev" pos:start="5539:13" pos:end="5539:20"/><name pos:start="5539:27" pos:end="5539:32">oldset</name></decl>;</decl_stmt>



            <switch pos:start="5543:13" pos:end="5569:13">switch<condition pos:start="5543:19" pos:end="5543:24">(<expr pos:start="5543:20" pos:end="5543:23"><name pos:start="5543:20" pos:end="5543:23">arg1</name></expr>)</condition> <block pos:start="5543:26" pos:end="5569:13">{<block_content pos:start="5545:13" pos:end="5567:26">

            <case pos:start="5545:13" pos:end="5545:34">case <expr pos:start="5545:18" pos:end="5545:33"><name pos:start="5545:18" pos:end="5545:33">TARGET_SIG_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="5547:17" pos:end="5547:32"><expr pos:start="5547:17" pos:end="5547:31"><name pos:start="5547:17" pos:end="5547:19">how</name> <operator pos:start="5547:21" pos:end="5547:21">=</operator> <name pos:start="5547:23" pos:end="5547:31">SIG_BLOCK</name></expr>;</expr_stmt>

                <break pos:start="5549:17" pos:end="5549:22">break;</break>

            <case pos:start="5551:13" pos:end="5551:36">case <expr pos:start="5551:18" pos:end="5551:35"><name pos:start="5551:18" pos:end="5551:35">TARGET_SIG_UNBLOCK</name></expr>:</case>

                <expr_stmt pos:start="5553:17" pos:end="5553:34"><expr pos:start="5553:17" pos:end="5553:33"><name pos:start="5553:17" pos:end="5553:19">how</name> <operator pos:start="5553:21" pos:end="5553:21">=</operator> <name pos:start="5553:23" pos:end="5553:33">SIG_UNBLOCK</name></expr>;</expr_stmt>

                <break pos:start="5555:17" pos:end="5555:22">break;</break>

            <case pos:start="5557:13" pos:end="5557:36">case <expr pos:start="5557:18" pos:end="5557:35"><name pos:start="5557:18" pos:end="5557:35">TARGET_SIG_SETMASK</name></expr>:</case>

                <expr_stmt pos:start="5559:17" pos:end="5559:34"><expr pos:start="5559:17" pos:end="5559:33"><name pos:start="5559:17" pos:end="5559:19">how</name> <operator pos:start="5559:21" pos:end="5559:21">=</operator> <name pos:start="5559:23" pos:end="5559:33">SIG_SETMASK</name></expr>;</expr_stmt>

                <break pos:start="5561:17" pos:end="5561:22">break;</break>

            <default pos:start="5563:13" pos:end="5563:20">default:</default>

                <expr_stmt pos:start="5565:17" pos:end="5565:37"><expr pos:start="5565:17" pos:end="5565:36"><name pos:start="5565:17" pos:end="5565:19">ret</name> <operator pos:start="5565:21" pos:end="5565:21">=</operator> <operator pos:start="5565:23" pos:end="5565:23">-</operator><name pos:start="5565:24" pos:end="5565:36">TARGET_EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="5567:17" pos:end="5567:26">goto <name pos:start="5567:22" pos:end="5567:25">fail</name>;</goto>

            </block_content>}</block></switch>

            <expr_stmt pos:start="5571:13" pos:end="5571:24"><expr pos:start="5571:13" pos:end="5571:23"><name pos:start="5571:13" pos:end="5571:16">mask</name> <operator pos:start="5571:18" pos:end="5571:18">=</operator> <name pos:start="5571:20" pos:end="5571:23">arg2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="5573:13" pos:end="5573:51"><expr pos:start="5573:13" pos:end="5573:50"><call pos:start="5573:13" pos:end="5573:50"><name pos:start="5573:13" pos:end="5573:37">target_to_host_old_sigset</name><argument_list pos:start="5573:38" pos:end="5573:50">(<argument pos:start="5573:39" pos:end="5573:42"><expr pos:start="5573:39" pos:end="5573:42"><operator pos:start="5573:39" pos:end="5573:39">&amp;</operator><name pos:start="5573:40" pos:end="5573:42">set</name></expr></argument>, <argument pos:start="5573:45" pos:end="5573:49"><expr pos:start="5573:45" pos:end="5573:49"><operator pos:start="5573:45" pos:end="5573:45">&amp;</operator><name pos:start="5573:46" pos:end="5573:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5575:13" pos:end="5575:44"><expr pos:start="5575:13" pos:end="5575:43"><call pos:start="5575:13" pos:end="5575:43"><name pos:start="5575:13" pos:end="5575:23">sigprocmask</name><argument_list pos:start="5575:24" pos:end="5575:43">(<argument pos:start="5575:25" pos:end="5575:27"><expr pos:start="5575:25" pos:end="5575:27"><name pos:start="5575:25" pos:end="5575:27">how</name></expr></argument>, <argument pos:start="5575:30" pos:end="5575:33"><expr pos:start="5575:30" pos:end="5575:33"><operator pos:start="5575:30" pos:end="5575:30">&amp;</operator><name pos:start="5575:31" pos:end="5575:33">set</name></expr></argument>, <argument pos:start="5575:36" pos:end="5575:42"><expr pos:start="5575:36" pos:end="5575:42"><operator pos:start="5575:36" pos:end="5575:36">&amp;</operator><name pos:start="5575:37" pos:end="5575:42">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5577:13" pos:end="5577:54"><expr pos:start="5577:13" pos:end="5577:53"><call pos:start="5577:13" pos:end="5577:53"><name pos:start="5577:13" pos:end="5577:37">host_to_target_old_sigset</name><argument_list pos:start="5577:38" pos:end="5577:53">(<argument pos:start="5577:39" pos:end="5577:43"><expr pos:start="5577:39" pos:end="5577:43"><operator pos:start="5577:39" pos:end="5577:39">&amp;</operator><name pos:start="5577:40" pos:end="5577:43">mask</name></expr></argument>, <argument pos:start="5577:46" pos:end="5577:52"><expr pos:start="5577:46" pos:end="5577:52"><operator pos:start="5577:46" pos:end="5577:46">&amp;</operator><name pos:start="5577:47" pos:end="5577:52">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5579:13" pos:end="5579:23"><expr pos:start="5579:13" pos:end="5579:22"><name pos:start="5579:13" pos:end="5579:15">ret</name> <operator pos:start="5579:17" pos:end="5579:17">=</operator> <name pos:start="5579:19" pos:end="5579:22">mask</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5583:9" pos:end="5590:0">break;</break>

<cpp:endif pos:start="5585:1" pos:end="5585:6">#<cpp:directive pos:start="5585:2" pos:end="5585:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="5589:1" pos:end="5589:25">#<cpp:directive pos:start="5589:2" pos:end="5589:6">ifdef</cpp:directive> <name pos:start="5589:8" pos:end="5589:25">TARGET_NR_getgid32</name></cpp:ifdef>

    <case pos:start="5591:5" pos:end="5591:28">case <expr pos:start="5591:10" pos:end="5591:27"><name pos:start="5591:10" pos:end="5591:27">TARGET_NR_getgid32</name></expr>:</case>

        <expr_stmt pos:start="5593:9" pos:end="5593:34"><expr pos:start="5593:9" pos:end="5593:33"><name pos:start="5593:9" pos:end="5593:11">ret</name> <operator pos:start="5593:13" pos:end="5593:13">=</operator> <call pos:start="5593:15" pos:end="5593:33"><name pos:start="5593:15" pos:end="5593:23">get_errno</name><argument_list pos:start="5593:24" pos:end="5593:33">(<argument pos:start="5593:25" pos:end="5593:32"><expr pos:start="5593:25" pos:end="5593:32"><call pos:start="5593:25" pos:end="5593:32"><name pos:start="5593:25" pos:end="5593:30">getgid</name><argument_list pos:start="5593:31" pos:end="5593:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5595:9" pos:end="5600:0">break;</break>

<cpp:endif pos:start="5597:1" pos:end="5597:6">#<cpp:directive pos:start="5597:2" pos:end="5597:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5599:1" pos:end="5599:26">#<cpp:directive pos:start="5599:2" pos:end="5599:6">ifdef</cpp:directive> <name pos:start="5599:8" pos:end="5599:26">TARGET_NR_geteuid32</name></cpp:ifdef>

    <case pos:start="5601:5" pos:end="5601:29">case <expr pos:start="5601:10" pos:end="5601:28"><name pos:start="5601:10" pos:end="5601:28">TARGET_NR_geteuid32</name></expr>:</case>

        <expr_stmt pos:start="5603:9" pos:end="5603:35"><expr pos:start="5603:9" pos:end="5603:34"><name pos:start="5603:9" pos:end="5603:11">ret</name> <operator pos:start="5603:13" pos:end="5603:13">=</operator> <call pos:start="5603:15" pos:end="5603:34"><name pos:start="5603:15" pos:end="5603:23">get_errno</name><argument_list pos:start="5603:24" pos:end="5603:34">(<argument pos:start="5603:25" pos:end="5603:33"><expr pos:start="5603:25" pos:end="5603:33"><call pos:start="5603:25" pos:end="5603:33"><name pos:start="5603:25" pos:end="5603:31">geteuid</name><argument_list pos:start="5603:32" pos:end="5603:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5605:9" pos:end="5610:0">break;</break>

<cpp:endif pos:start="5607:1" pos:end="5607:6">#<cpp:directive pos:start="5607:2" pos:end="5607:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5609:1" pos:end="5609:26">#<cpp:directive pos:start="5609:2" pos:end="5609:6">ifdef</cpp:directive> <name pos:start="5609:8" pos:end="5609:26">TARGET_NR_getegid32</name></cpp:ifdef>

    <case pos:start="5611:5" pos:end="5611:29">case <expr pos:start="5611:10" pos:end="5611:28"><name pos:start="5611:10" pos:end="5611:28">TARGET_NR_getegid32</name></expr>:</case>

        <expr_stmt pos:start="5613:9" pos:end="5613:35"><expr pos:start="5613:9" pos:end="5613:34"><name pos:start="5613:9" pos:end="5613:11">ret</name> <operator pos:start="5613:13" pos:end="5613:13">=</operator> <call pos:start="5613:15" pos:end="5613:34"><name pos:start="5613:15" pos:end="5613:23">get_errno</name><argument_list pos:start="5613:24" pos:end="5613:34">(<argument pos:start="5613:25" pos:end="5613:33"><expr pos:start="5613:25" pos:end="5613:33"><call pos:start="5613:25" pos:end="5613:33"><name pos:start="5613:25" pos:end="5613:31">getegid</name><argument_list pos:start="5613:32" pos:end="5613:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5615:9" pos:end="5620:0">break;</break>

<cpp:endif pos:start="5617:1" pos:end="5617:6">#<cpp:directive pos:start="5617:2" pos:end="5617:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5619:1" pos:end="5619:27">#<cpp:directive pos:start="5619:2" pos:end="5619:6">ifdef</cpp:directive> <name pos:start="5619:8" pos:end="5619:27">TARGET_NR_setreuid32</name></cpp:ifdef>

    <case pos:start="5621:5" pos:end="5621:30">case <expr pos:start="5621:10" pos:end="5621:29"><name pos:start="5621:10" pos:end="5621:29">TARGET_NR_setreuid32</name></expr>:</case>

        <expr_stmt pos:start="5623:9" pos:end="5623:46"><expr pos:start="5623:9" pos:end="5623:45"><name pos:start="5623:9" pos:end="5623:11">ret</name> <operator pos:start="5623:13" pos:end="5623:13">=</operator> <call pos:start="5623:15" pos:end="5623:45"><name pos:start="5623:15" pos:end="5623:23">get_errno</name><argument_list pos:start="5623:24" pos:end="5623:45">(<argument pos:start="5623:25" pos:end="5623:44"><expr pos:start="5623:25" pos:end="5623:44"><call pos:start="5623:25" pos:end="5623:44"><name pos:start="5623:25" pos:end="5623:32">setreuid</name><argument_list pos:start="5623:33" pos:end="5623:44">(<argument pos:start="5623:34" pos:end="5623:37"><expr pos:start="5623:34" pos:end="5623:37"><name pos:start="5623:34" pos:end="5623:37">arg1</name></expr></argument>, <argument pos:start="5623:40" pos:end="5623:43"><expr pos:start="5623:40" pos:end="5623:43"><name pos:start="5623:40" pos:end="5623:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5625:9" pos:end="5630:0">break;</break>

<cpp:endif pos:start="5627:1" pos:end="5627:6">#<cpp:directive pos:start="5627:2" pos:end="5627:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5629:1" pos:end="5629:27">#<cpp:directive pos:start="5629:2" pos:end="5629:6">ifdef</cpp:directive> <name pos:start="5629:8" pos:end="5629:27">TARGET_NR_setregid32</name></cpp:ifdef>

    <case pos:start="5631:5" pos:end="5631:30">case <expr pos:start="5631:10" pos:end="5631:29"><name pos:start="5631:10" pos:end="5631:29">TARGET_NR_setregid32</name></expr>:</case>

        <expr_stmt pos:start="5633:9" pos:end="5633:46"><expr pos:start="5633:9" pos:end="5633:45"><name pos:start="5633:9" pos:end="5633:11">ret</name> <operator pos:start="5633:13" pos:end="5633:13">=</operator> <call pos:start="5633:15" pos:end="5633:45"><name pos:start="5633:15" pos:end="5633:23">get_errno</name><argument_list pos:start="5633:24" pos:end="5633:45">(<argument pos:start="5633:25" pos:end="5633:44"><expr pos:start="5633:25" pos:end="5633:44"><call pos:start="5633:25" pos:end="5633:44"><name pos:start="5633:25" pos:end="5633:32">setregid</name><argument_list pos:start="5633:33" pos:end="5633:44">(<argument pos:start="5633:34" pos:end="5633:37"><expr pos:start="5633:34" pos:end="5633:37"><name pos:start="5633:34" pos:end="5633:37">arg1</name></expr></argument>, <argument pos:start="5633:40" pos:end="5633:43"><expr pos:start="5633:40" pos:end="5633:43"><name pos:start="5633:40" pos:end="5633:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5635:9" pos:end="5640:0">break;</break>

<cpp:endif pos:start="5637:1" pos:end="5637:6">#<cpp:directive pos:start="5637:2" pos:end="5637:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5639:1" pos:end="5639:28">#<cpp:directive pos:start="5639:2" pos:end="5639:6">ifdef</cpp:directive> <name pos:start="5639:8" pos:end="5639:28">TARGET_NR_getgroups32</name></cpp:ifdef>

    <case pos:start="5641:5" pos:end="5641:31">case <expr pos:start="5641:10" pos:end="5641:30"><name pos:start="5641:10" pos:end="5641:30">TARGET_NR_getgroups32</name></expr>:</case>

        <block pos:start="5643:9" pos:end="5683:9">{<block_content pos:start="5645:13" pos:end="5681:13">

            <decl_stmt pos:start="5645:13" pos:end="5645:34"><decl pos:start="5645:13" pos:end="5645:33"><type pos:start="5645:13" pos:end="5645:15"><name pos:start="5645:13" pos:end="5645:15">int</name></type> <name pos:start="5645:17" pos:end="5645:26">gidsetsize</name> <init pos:start="5645:28" pos:end="5645:33">= <expr pos:start="5645:30" pos:end="5645:33"><name pos:start="5645:30" pos:end="5645:33">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="5647:13" pos:end="5647:39"><decl pos:start="5647:13" pos:end="5647:38"><type pos:start="5647:13" pos:end="5647:22"><name pos:start="5647:13" pos:end="5647:20">uint32_t</name> <modifier pos:start="5647:22" pos:end="5647:22">*</modifier></type><name pos:start="5647:23" pos:end="5647:38">target_grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5649:13" pos:end="5649:29"><decl pos:start="5649:13" pos:end="5649:28"><type pos:start="5649:13" pos:end="5649:19"><name pos:start="5649:13" pos:end="5649:17">gid_t</name> <modifier pos:start="5649:19" pos:end="5649:19">*</modifier></type><name pos:start="5649:20" pos:end="5649:28">grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5651:13" pos:end="5651:18"><decl pos:start="5651:13" pos:end="5651:17"><type pos:start="5651:13" pos:end="5651:15"><name pos:start="5651:13" pos:end="5651:15">int</name></type> <name pos:start="5651:17" pos:end="5651:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5655:13" pos:end="5655:59"><expr pos:start="5655:13" pos:end="5655:58"><name pos:start="5655:13" pos:end="5655:21">grouplist</name> <operator pos:start="5655:23" pos:end="5655:23">=</operator> <call pos:start="5655:25" pos:end="5655:58"><name pos:start="5655:25" pos:end="5655:30">alloca</name><argument_list pos:start="5655:31" pos:end="5655:58">(<argument pos:start="5655:32" pos:end="5655:57"><expr pos:start="5655:32" pos:end="5655:57"><name pos:start="5655:32" pos:end="5655:41">gidsetsize</name> <operator pos:start="5655:43" pos:end="5655:43">*</operator> <sizeof pos:start="5655:45" pos:end="5655:57">sizeof<argument_list pos:start="5655:51" pos:end="5655:57">(<argument pos:start="5655:52" pos:end="5655:56"><expr pos:start="5655:52" pos:end="5655:56"><name pos:start="5655:52" pos:end="5655:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5657:13" pos:end="5657:62"><expr pos:start="5657:13" pos:end="5657:61"><name pos:start="5657:13" pos:end="5657:15">ret</name> <operator pos:start="5657:17" pos:end="5657:17">=</operator> <call pos:start="5657:19" pos:end="5657:61"><name pos:start="5657:19" pos:end="5657:27">get_errno</name><argument_list pos:start="5657:28" pos:end="5657:61">(<argument pos:start="5657:29" pos:end="5657:60"><expr pos:start="5657:29" pos:end="5657:60"><call pos:start="5657:29" pos:end="5657:60"><name pos:start="5657:29" pos:end="5657:37">getgroups</name><argument_list pos:start="5657:38" pos:end="5657:60">(<argument pos:start="5657:39" pos:end="5657:48"><expr pos:start="5657:39" pos:end="5657:48"><name pos:start="5657:39" pos:end="5657:48">gidsetsize</name></expr></argument>, <argument pos:start="5657:51" pos:end="5657:59"><expr pos:start="5657:51" pos:end="5657:59"><name pos:start="5657:51" pos:end="5657:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5659:13" pos:end="5661:22"><if pos:start="5659:13" pos:end="5661:22">if <condition pos:start="5659:16" pos:end="5659:32">(<expr pos:start="5659:17" pos:end="5659:31"><name pos:start="5659:17" pos:end="5659:26">gidsetsize</name> <operator pos:start="5659:28" pos:end="5659:29">==</operator> <literal type="number" pos:start="5659:31" pos:end="5659:31">0</literal></expr>)</condition><block type="pseudo" pos:start="5661:17" pos:end="5661:22"><block_content pos:start="5661:17" pos:end="5661:22">

                <break pos:start="5661:17" pos:end="5661:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="5663:13" pos:end="5681:13"><if pos:start="5663:13" pos:end="5681:13">if <condition pos:start="5663:16" pos:end="5663:31">(<expr pos:start="5663:17" pos:end="5663:30"><operator pos:start="5663:17" pos:end="5663:17">!</operator><call pos:start="5663:18" pos:end="5663:30"><name pos:start="5663:18" pos:end="5663:25">is_error</name><argument_list pos:start="5663:26" pos:end="5663:30">(<argument pos:start="5663:27" pos:end="5663:29"><expr pos:start="5663:27" pos:end="5663:29"><name pos:start="5663:27" pos:end="5663:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5663:33" pos:end="5681:13">{<block_content pos:start="5665:17" pos:end="5679:68">

                <expr_stmt pos:start="5665:17" pos:end="5665:84"><expr pos:start="5665:17" pos:end="5665:83"><name pos:start="5665:17" pos:end="5665:32">target_grouplist</name> <operator pos:start="5665:34" pos:end="5665:34">=</operator> <call pos:start="5665:36" pos:end="5665:83"><name pos:start="5665:36" pos:end="5665:44">lock_user</name><argument_list pos:start="5665:45" pos:end="5665:83">(<argument pos:start="5665:46" pos:end="5665:57"><expr pos:start="5665:46" pos:end="5665:57"><name pos:start="5665:46" pos:end="5665:57">VERIFY_WRITE</name></expr></argument>, <argument pos:start="5665:60" pos:end="5665:63"><expr pos:start="5665:60" pos:end="5665:63"><name pos:start="5665:60" pos:end="5665:63">arg2</name></expr></argument>, <argument pos:start="5665:66" pos:end="5665:79"><expr pos:start="5665:66" pos:end="5665:79"><name pos:start="5665:66" pos:end="5665:75">gidsetsize</name> <operator pos:start="5665:77" pos:end="5665:77">*</operator> <literal type="number" pos:start="5665:79" pos:end="5665:79">4</literal></expr></argument>, <argument pos:start="5665:82" pos:end="5665:82"><expr pos:start="5665:82" pos:end="5665:82"><literal type="number" pos:start="5665:82" pos:end="5665:82">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5667:17" pos:end="5673:17"><if pos:start="5667:17" pos:end="5673:17">if <condition pos:start="5667:20" pos:end="5667:38">(<expr pos:start="5667:21" pos:end="5667:37"><operator pos:start="5667:21" pos:end="5667:21">!</operator><name pos:start="5667:22" pos:end="5667:37">target_grouplist</name></expr>)</condition> <block pos:start="5667:40" pos:end="5673:17">{<block_content pos:start="5669:21" pos:end="5671:30">

                    <expr_stmt pos:start="5669:21" pos:end="5669:41"><expr pos:start="5669:21" pos:end="5669:40"><name pos:start="5669:21" pos:end="5669:23">ret</name> <operator pos:start="5669:25" pos:end="5669:25">=</operator> <operator pos:start="5669:27" pos:end="5669:27">-</operator><name pos:start="5669:28" pos:end="5669:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <goto pos:start="5671:21" pos:end="5671:30">goto <name pos:start="5671:26" pos:end="5671:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <for pos:start="5675:17" pos:end="5677:64">for<control pos:start="5675:20" pos:end="5675:39">(<init pos:start="5675:21" pos:end="5675:26"><expr pos:start="5675:21" pos:end="5675:25"><name pos:start="5675:21" pos:end="5675:21">i</name> <operator pos:start="5675:23" pos:end="5675:23">=</operator> <literal type="number" pos:start="5675:25" pos:end="5675:25">0</literal></expr>;</init><condition pos:start="5675:27" pos:end="5675:34"><expr pos:start="5675:27" pos:end="5675:33"><name pos:start="5675:27" pos:end="5675:27">i</name> <operator pos:start="5675:29" pos:end="5675:29">&lt;</operator> <name pos:start="5675:31" pos:end="5675:33">ret</name></expr>;</condition> <incr pos:start="5675:36" pos:end="5675:38"><expr pos:start="5675:36" pos:end="5675:38"><name pos:start="5675:36" pos:end="5675:36">i</name><operator pos:start="5675:37" pos:end="5675:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="5677:21" pos:end="5677:64"><block_content pos:start="5677:21" pos:end="5677:64">

                    <expr_stmt pos:start="5677:21" pos:end="5677:64"><expr pos:start="5677:21" pos:end="5677:63"><name pos:start="5677:21" pos:end="5677:39"><name pos:start="5677:21" pos:end="5677:36">target_grouplist</name><index pos:start="5677:37" pos:end="5677:39">[<expr pos:start="5677:38" pos:end="5677:38"><name pos:start="5677:38" pos:end="5677:38">i</name></expr>]</index></name> <operator pos:start="5677:41" pos:end="5677:41">=</operator> <call pos:start="5677:43" pos:end="5677:63"><name pos:start="5677:43" pos:end="5677:49">tswap32</name><argument_list pos:start="5677:50" pos:end="5677:63">(<argument pos:start="5677:51" pos:end="5677:62"><expr pos:start="5677:51" pos:end="5677:62"><name pos:start="5677:51" pos:end="5677:62"><name pos:start="5677:51" pos:end="5677:59">grouplist</name><index pos:start="5677:60" pos:end="5677:62">[<expr pos:start="5677:61" pos:end="5677:61"><name pos:start="5677:61" pos:end="5677:61">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="5679:17" pos:end="5679:68"><expr pos:start="5679:17" pos:end="5679:67"><call pos:start="5679:17" pos:end="5679:67"><name pos:start="5679:17" pos:end="5679:27">unlock_user</name><argument_list pos:start="5679:28" pos:end="5679:67">(<argument pos:start="5679:29" pos:end="5679:44"><expr pos:start="5679:29" pos:end="5679:44"><name pos:start="5679:29" pos:end="5679:44">target_grouplist</name></expr></argument>, <argument pos:start="5679:47" pos:end="5679:50"><expr pos:start="5679:47" pos:end="5679:50"><name pos:start="5679:47" pos:end="5679:50">arg2</name></expr></argument>, <argument pos:start="5679:53" pos:end="5679:66"><expr pos:start="5679:53" pos:end="5679:66"><name pos:start="5679:53" pos:end="5679:62">gidsetsize</name> <operator pos:start="5679:64" pos:end="5679:64">*</operator> <literal type="number" pos:start="5679:66" pos:end="5679:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5685:9" pos:end="5690:0">break;</break>

<cpp:endif pos:start="5687:1" pos:end="5687:6">#<cpp:directive pos:start="5687:2" pos:end="5687:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5689:1" pos:end="5689:28">#<cpp:directive pos:start="5689:2" pos:end="5689:6">ifdef</cpp:directive> <name pos:start="5689:8" pos:end="5689:28">TARGET_NR_setgroups32</name></cpp:ifdef>

    <case pos:start="5691:5" pos:end="5691:31">case <expr pos:start="5691:10" pos:end="5691:30"><name pos:start="5691:10" pos:end="5691:30">TARGET_NR_setgroups32</name></expr>:</case>

        <block pos:start="5693:9" pos:end="5725:9">{<block_content pos:start="5695:13" pos:end="5723:62">

            <decl_stmt pos:start="5695:13" pos:end="5695:34"><decl pos:start="5695:13" pos:end="5695:33"><type pos:start="5695:13" pos:end="5695:15"><name pos:start="5695:13" pos:end="5695:15">int</name></type> <name pos:start="5695:17" pos:end="5695:26">gidsetsize</name> <init pos:start="5695:28" pos:end="5695:33">= <expr pos:start="5695:30" pos:end="5695:33"><name pos:start="5695:30" pos:end="5695:33">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="5697:13" pos:end="5697:39"><decl pos:start="5697:13" pos:end="5697:38"><type pos:start="5697:13" pos:end="5697:22"><name pos:start="5697:13" pos:end="5697:20">uint32_t</name> <modifier pos:start="5697:22" pos:end="5697:22">*</modifier></type><name pos:start="5697:23" pos:end="5697:38">target_grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5699:13" pos:end="5699:29"><decl pos:start="5699:13" pos:end="5699:28"><type pos:start="5699:13" pos:end="5699:19"><name pos:start="5699:13" pos:end="5699:17">gid_t</name> <modifier pos:start="5699:19" pos:end="5699:19">*</modifier></type><name pos:start="5699:20" pos:end="5699:28">grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5701:13" pos:end="5701:18"><decl pos:start="5701:13" pos:end="5701:17"><type pos:start="5701:13" pos:end="5701:15"><name pos:start="5701:13" pos:end="5701:15">int</name></type> <name pos:start="5701:17" pos:end="5701:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5705:13" pos:end="5705:59"><expr pos:start="5705:13" pos:end="5705:58"><name pos:start="5705:13" pos:end="5705:21">grouplist</name> <operator pos:start="5705:23" pos:end="5705:23">=</operator> <call pos:start="5705:25" pos:end="5705:58"><name pos:start="5705:25" pos:end="5705:30">alloca</name><argument_list pos:start="5705:31" pos:end="5705:58">(<argument pos:start="5705:32" pos:end="5705:57"><expr pos:start="5705:32" pos:end="5705:57"><name pos:start="5705:32" pos:end="5705:41">gidsetsize</name> <operator pos:start="5705:43" pos:end="5705:43">*</operator> <sizeof pos:start="5705:45" pos:end="5705:57">sizeof<argument_list pos:start="5705:51" pos:end="5705:57">(<argument pos:start="5705:52" pos:end="5705:56"><expr pos:start="5705:52" pos:end="5705:56"><name pos:start="5705:52" pos:end="5705:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5707:13" pos:end="5707:79"><expr pos:start="5707:13" pos:end="5707:78"><name pos:start="5707:13" pos:end="5707:28">target_grouplist</name> <operator pos:start="5707:30" pos:end="5707:30">=</operator> <call pos:start="5707:32" pos:end="5707:78"><name pos:start="5707:32" pos:end="5707:40">lock_user</name><argument_list pos:start="5707:41" pos:end="5707:78">(<argument pos:start="5707:42" pos:end="5707:52"><expr pos:start="5707:42" pos:end="5707:52"><name pos:start="5707:42" pos:end="5707:52">VERIFY_READ</name></expr></argument>, <argument pos:start="5707:55" pos:end="5707:58"><expr pos:start="5707:55" pos:end="5707:58"><name pos:start="5707:55" pos:end="5707:58">arg2</name></expr></argument>, <argument pos:start="5707:61" pos:end="5707:74"><expr pos:start="5707:61" pos:end="5707:74"><name pos:start="5707:61" pos:end="5707:70">gidsetsize</name> <operator pos:start="5707:72" pos:end="5707:72">*</operator> <literal type="number" pos:start="5707:74" pos:end="5707:74">4</literal></expr></argument>, <argument pos:start="5707:77" pos:end="5707:77"><expr pos:start="5707:77" pos:end="5707:77"><literal type="number" pos:start="5707:77" pos:end="5707:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5709:13" pos:end="5715:13"><if pos:start="5709:13" pos:end="5715:13">if <condition pos:start="5709:16" pos:end="5709:34">(<expr pos:start="5709:17" pos:end="5709:33"><operator pos:start="5709:17" pos:end="5709:17">!</operator><name pos:start="5709:18" pos:end="5709:33">target_grouplist</name></expr>)</condition> <block pos:start="5709:36" pos:end="5715:13">{<block_content pos:start="5711:17" pos:end="5713:26">

                <expr_stmt pos:start="5711:17" pos:end="5711:37"><expr pos:start="5711:17" pos:end="5711:36"><name pos:start="5711:17" pos:end="5711:19">ret</name> <operator pos:start="5711:21" pos:end="5711:21">=</operator> <operator pos:start="5711:23" pos:end="5711:23">-</operator><name pos:start="5711:24" pos:end="5711:36">TARGET_EFAULT</name></expr>;</expr_stmt>

                <goto pos:start="5713:17" pos:end="5713:26">goto <name pos:start="5713:22" pos:end="5713:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <for pos:start="5717:13" pos:end="5719:60">for<control pos:start="5717:16" pos:end="5717:42">(<init pos:start="5717:17" pos:end="5717:22"><expr pos:start="5717:17" pos:end="5717:21"><name pos:start="5717:17" pos:end="5717:17">i</name> <operator pos:start="5717:19" pos:end="5717:19">=</operator> <literal type="number" pos:start="5717:21" pos:end="5717:21">0</literal></expr>;</init><condition pos:start="5717:23" pos:end="5717:37"><expr pos:start="5717:23" pos:end="5717:36"><name pos:start="5717:23" pos:end="5717:23">i</name> <operator pos:start="5717:25" pos:end="5717:25">&lt;</operator> <name pos:start="5717:27" pos:end="5717:36">gidsetsize</name></expr>;</condition> <incr pos:start="5717:39" pos:end="5717:41"><expr pos:start="5717:39" pos:end="5717:41"><name pos:start="5717:39" pos:end="5717:39">i</name><operator pos:start="5717:40" pos:end="5717:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="5719:17" pos:end="5719:60"><block_content pos:start="5719:17" pos:end="5719:60">

                <expr_stmt pos:start="5719:17" pos:end="5719:60"><expr pos:start="5719:17" pos:end="5719:59"><name pos:start="5719:17" pos:end="5719:28"><name pos:start="5719:17" pos:end="5719:25">grouplist</name><index pos:start="5719:26" pos:end="5719:28">[<expr pos:start="5719:27" pos:end="5719:27"><name pos:start="5719:27" pos:end="5719:27">i</name></expr>]</index></name> <operator pos:start="5719:30" pos:end="5719:30">=</operator> <call pos:start="5719:32" pos:end="5719:59"><name pos:start="5719:32" pos:end="5719:38">tswap32</name><argument_list pos:start="5719:39" pos:end="5719:59">(<argument pos:start="5719:40" pos:end="5719:58"><expr pos:start="5719:40" pos:end="5719:58"><name pos:start="5719:40" pos:end="5719:58"><name pos:start="5719:40" pos:end="5719:55">target_grouplist</name><index pos:start="5719:56" pos:end="5719:58">[<expr pos:start="5719:57" pos:end="5719:57"><name pos:start="5719:57" pos:end="5719:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="5721:13" pos:end="5721:51"><expr pos:start="5721:13" pos:end="5721:50"><call pos:start="5721:13" pos:end="5721:50"><name pos:start="5721:13" pos:end="5721:23">unlock_user</name><argument_list pos:start="5721:24" pos:end="5721:50">(<argument pos:start="5721:25" pos:end="5721:40"><expr pos:start="5721:25" pos:end="5721:40"><name pos:start="5721:25" pos:end="5721:40">target_grouplist</name></expr></argument>, <argument pos:start="5721:43" pos:end="5721:46"><expr pos:start="5721:43" pos:end="5721:46"><name pos:start="5721:43" pos:end="5721:46">arg2</name></expr></argument>, <argument pos:start="5721:49" pos:end="5721:49"><expr pos:start="5721:49" pos:end="5721:49"><literal type="number" pos:start="5721:49" pos:end="5721:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5723:13" pos:end="5723:62"><expr pos:start="5723:13" pos:end="5723:61"><name pos:start="5723:13" pos:end="5723:15">ret</name> <operator pos:start="5723:17" pos:end="5723:17">=</operator> <call pos:start="5723:19" pos:end="5723:61"><name pos:start="5723:19" pos:end="5723:27">get_errno</name><argument_list pos:start="5723:28" pos:end="5723:61">(<argument pos:start="5723:29" pos:end="5723:60"><expr pos:start="5723:29" pos:end="5723:60"><call pos:start="5723:29" pos:end="5723:60"><name pos:start="5723:29" pos:end="5723:37">setgroups</name><argument_list pos:start="5723:38" pos:end="5723:60">(<argument pos:start="5723:39" pos:end="5723:48"><expr pos:start="5723:39" pos:end="5723:48"><name pos:start="5723:39" pos:end="5723:48">gidsetsize</name></expr></argument>, <argument pos:start="5723:51" pos:end="5723:59"><expr pos:start="5723:51" pos:end="5723:59"><name pos:start="5723:51" pos:end="5723:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5727:9" pos:end="5732:0">break;</break>

<cpp:endif pos:start="5729:1" pos:end="5729:6">#<cpp:directive pos:start="5729:2" pos:end="5729:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5731:1" pos:end="5731:25">#<cpp:directive pos:start="5731:2" pos:end="5731:6">ifdef</cpp:directive> <name pos:start="5731:8" pos:end="5731:25">TARGET_NR_fchown32</name></cpp:ifdef>

    <case pos:start="5733:5" pos:end="5733:28">case <expr pos:start="5733:10" pos:end="5733:27"><name pos:start="5733:10" pos:end="5733:27">TARGET_NR_fchown32</name></expr>:</case>

        <expr_stmt pos:start="5735:9" pos:end="5735:50"><expr pos:start="5735:9" pos:end="5735:49"><name pos:start="5735:9" pos:end="5735:11">ret</name> <operator pos:start="5735:13" pos:end="5735:13">=</operator> <call pos:start="5735:15" pos:end="5735:49"><name pos:start="5735:15" pos:end="5735:23">get_errno</name><argument_list pos:start="5735:24" pos:end="5735:49">(<argument pos:start="5735:25" pos:end="5735:48"><expr pos:start="5735:25" pos:end="5735:48"><call pos:start="5735:25" pos:end="5735:48"><name pos:start="5735:25" pos:end="5735:30">fchown</name><argument_list pos:start="5735:31" pos:end="5735:48">(<argument pos:start="5735:32" pos:end="5735:35"><expr pos:start="5735:32" pos:end="5735:35"><name pos:start="5735:32" pos:end="5735:35">arg1</name></expr></argument>, <argument pos:start="5735:38" pos:end="5735:41"><expr pos:start="5735:38" pos:end="5735:41"><name pos:start="5735:38" pos:end="5735:41">arg2</name></expr></argument>, <argument pos:start="5735:44" pos:end="5735:47"><expr pos:start="5735:44" pos:end="5735:47"><name pos:start="5735:44" pos:end="5735:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5737:9" pos:end="5742:0">break;</break>

<cpp:endif pos:start="5739:1" pos:end="5739:6">#<cpp:directive pos:start="5739:2" pos:end="5739:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5741:1" pos:end="5741:28">#<cpp:directive pos:start="5741:2" pos:end="5741:6">ifdef</cpp:directive> <name pos:start="5741:8" pos:end="5741:28">TARGET_NR_setresuid32</name></cpp:ifdef>

    <case pos:start="5743:5" pos:end="5743:31">case <expr pos:start="5743:10" pos:end="5743:30"><name pos:start="5743:10" pos:end="5743:30">TARGET_NR_setresuid32</name></expr>:</case>

        <expr_stmt pos:start="5745:9" pos:end="5745:53"><expr pos:start="5745:9" pos:end="5745:52"><name pos:start="5745:9" pos:end="5745:11">ret</name> <operator pos:start="5745:13" pos:end="5745:13">=</operator> <call pos:start="5745:15" pos:end="5745:52"><name pos:start="5745:15" pos:end="5745:23">get_errno</name><argument_list pos:start="5745:24" pos:end="5745:52">(<argument pos:start="5745:25" pos:end="5745:51"><expr pos:start="5745:25" pos:end="5745:51"><call pos:start="5745:25" pos:end="5745:51"><name pos:start="5745:25" pos:end="5745:33">setresuid</name><argument_list pos:start="5745:34" pos:end="5745:51">(<argument pos:start="5745:35" pos:end="5745:38"><expr pos:start="5745:35" pos:end="5745:38"><name pos:start="5745:35" pos:end="5745:38">arg1</name></expr></argument>, <argument pos:start="5745:41" pos:end="5745:44"><expr pos:start="5745:41" pos:end="5745:44"><name pos:start="5745:41" pos:end="5745:44">arg2</name></expr></argument>, <argument pos:start="5745:47" pos:end="5745:50"><expr pos:start="5745:47" pos:end="5745:50"><name pos:start="5745:47" pos:end="5745:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5747:9" pos:end="5752:0">break;</break>

<cpp:endif pos:start="5749:1" pos:end="5749:6">#<cpp:directive pos:start="5749:2" pos:end="5749:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5751:1" pos:end="5751:28">#<cpp:directive pos:start="5751:2" pos:end="5751:6">ifdef</cpp:directive> <name pos:start="5751:8" pos:end="5751:28">TARGET_NR_getresuid32</name></cpp:ifdef>

    <case pos:start="5753:5" pos:end="5753:31">case <expr pos:start="5753:10" pos:end="5753:30"><name pos:start="5753:10" pos:end="5753:30">TARGET_NR_getresuid32</name></expr>:</case>

        <block pos:start="5755:9" pos:end="5773:9">{<block_content pos:start="5757:13" pos:end="5771:13">

            <decl_stmt pos:start="5757:13" pos:end="5757:35"><decl pos:start="5757:13" pos:end="5757:22"><type pos:start="5757:13" pos:end="5757:17"><name pos:start="5757:13" pos:end="5757:17">uid_t</name></type> <name pos:start="5757:19" pos:end="5757:22">ruid</name></decl>, <decl pos:start="5757:25" pos:end="5757:28"><type ref="prev" pos:start="5757:13" pos:end="5757:17"/><name pos:start="5757:25" pos:end="5757:28">euid</name></decl>, <decl pos:start="5757:31" pos:end="5757:34"><type ref="prev" pos:start="5757:13" pos:end="5757:17"/><name pos:start="5757:31" pos:end="5757:34">suid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5759:13" pos:end="5759:60"><expr pos:start="5759:13" pos:end="5759:59"><name pos:start="5759:13" pos:end="5759:15">ret</name> <operator pos:start="5759:17" pos:end="5759:17">=</operator> <call pos:start="5759:19" pos:end="5759:59"><name pos:start="5759:19" pos:end="5759:27">get_errno</name><argument_list pos:start="5759:28" pos:end="5759:59">(<argument pos:start="5759:29" pos:end="5759:58"><expr pos:start="5759:29" pos:end="5759:58"><call pos:start="5759:29" pos:end="5759:58"><name pos:start="5759:29" pos:end="5759:37">getresuid</name><argument_list pos:start="5759:38" pos:end="5759:58">(<argument pos:start="5759:39" pos:end="5759:43"><expr pos:start="5759:39" pos:end="5759:43"><operator pos:start="5759:39" pos:end="5759:39">&amp;</operator><name pos:start="5759:40" pos:end="5759:43">ruid</name></expr></argument>, <argument pos:start="5759:46" pos:end="5759:50"><expr pos:start="5759:46" pos:end="5759:50"><operator pos:start="5759:46" pos:end="5759:46">&amp;</operator><name pos:start="5759:47" pos:end="5759:50">euid</name></expr></argument>, <argument pos:start="5759:53" pos:end="5759:57"><expr pos:start="5759:53" pos:end="5759:57"><operator pos:start="5759:53" pos:end="5759:53">&amp;</operator><name pos:start="5759:54" pos:end="5759:57">suid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5761:13" pos:end="5771:13"><if pos:start="5761:13" pos:end="5771:13">if <condition pos:start="5761:16" pos:end="5761:31">(<expr pos:start="5761:17" pos:end="5761:30"><operator pos:start="5761:17" pos:end="5761:17">!</operator><call pos:start="5761:18" pos:end="5761:30"><name pos:start="5761:18" pos:end="5761:25">is_error</name><argument_list pos:start="5761:26" pos:end="5761:30">(<argument pos:start="5761:27" pos:end="5761:29"><expr pos:start="5761:27" pos:end="5761:29"><name pos:start="5761:27" pos:end="5761:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5761:33" pos:end="5771:13">{<block_content pos:start="5763:17" pos:end="5769:32">

                <if_stmt pos:start="5763:17" pos:end="5769:32"><if pos:start="5763:17" pos:end="5769:32">if <condition pos:start="5763:20" pos:end="5767:48">(<expr pos:start="5763:21" pos:end="5767:47"><call pos:start="5763:21" pos:end="5763:44"><name pos:start="5763:21" pos:end="5763:32">put_user_u32</name><argument_list pos:start="5763:33" pos:end="5763:44">(<argument pos:start="5763:34" pos:end="5763:37"><expr pos:start="5763:34" pos:end="5763:37"><name pos:start="5763:34" pos:end="5763:37">ruid</name></expr></argument>, <argument pos:start="5763:40" pos:end="5763:43"><expr pos:start="5763:40" pos:end="5763:43"><name pos:start="5763:40" pos:end="5763:43">arg1</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5765:21" pos:end="5765:22">||</operator> <call pos:start="5765:24" pos:end="5765:47"><name pos:start="5765:24" pos:end="5765:35">put_user_u32</name><argument_list pos:start="5765:36" pos:end="5765:47">(<argument pos:start="5765:37" pos:end="5765:40"><expr pos:start="5765:37" pos:end="5765:40"><name pos:start="5765:37" pos:end="5765:40">euid</name></expr></argument>, <argument pos:start="5765:43" pos:end="5765:46"><expr pos:start="5765:43" pos:end="5765:46"><name pos:start="5765:43" pos:end="5765:46">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5767:21" pos:end="5767:22">||</operator> <call pos:start="5767:24" pos:end="5767:47"><name pos:start="5767:24" pos:end="5767:35">put_user_u32</name><argument_list pos:start="5767:36" pos:end="5767:47">(<argument pos:start="5767:37" pos:end="5767:40"><expr pos:start="5767:37" pos:end="5767:40"><name pos:start="5767:37" pos:end="5767:40">suid</name></expr></argument>, <argument pos:start="5767:43" pos:end="5767:46"><expr pos:start="5767:43" pos:end="5767:46"><name pos:start="5767:43" pos:end="5767:46">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5769:21" pos:end="5769:32"><block_content pos:start="5769:21" pos:end="5769:32">

                    <goto pos:start="5769:21" pos:end="5769:32">goto <name pos:start="5769:26" pos:end="5769:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5775:9" pos:end="5780:0">break;</break>

<cpp:endif pos:start="5777:1" pos:end="5777:6">#<cpp:directive pos:start="5777:2" pos:end="5777:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5779:1" pos:end="5779:28">#<cpp:directive pos:start="5779:2" pos:end="5779:6">ifdef</cpp:directive> <name pos:start="5779:8" pos:end="5779:28">TARGET_NR_setresgid32</name></cpp:ifdef>

    <case pos:start="5781:5" pos:end="5781:31">case <expr pos:start="5781:10" pos:end="5781:30"><name pos:start="5781:10" pos:end="5781:30">TARGET_NR_setresgid32</name></expr>:</case>

        <expr_stmt pos:start="5783:9" pos:end="5783:53"><expr pos:start="5783:9" pos:end="5783:52"><name pos:start="5783:9" pos:end="5783:11">ret</name> <operator pos:start="5783:13" pos:end="5783:13">=</operator> <call pos:start="5783:15" pos:end="5783:52"><name pos:start="5783:15" pos:end="5783:23">get_errno</name><argument_list pos:start="5783:24" pos:end="5783:52">(<argument pos:start="5783:25" pos:end="5783:51"><expr pos:start="5783:25" pos:end="5783:51"><call pos:start="5783:25" pos:end="5783:51"><name pos:start="5783:25" pos:end="5783:33">setresgid</name><argument_list pos:start="5783:34" pos:end="5783:51">(<argument pos:start="5783:35" pos:end="5783:38"><expr pos:start="5783:35" pos:end="5783:38"><name pos:start="5783:35" pos:end="5783:38">arg1</name></expr></argument>, <argument pos:start="5783:41" pos:end="5783:44"><expr pos:start="5783:41" pos:end="5783:44"><name pos:start="5783:41" pos:end="5783:44">arg2</name></expr></argument>, <argument pos:start="5783:47" pos:end="5783:50"><expr pos:start="5783:47" pos:end="5783:50"><name pos:start="5783:47" pos:end="5783:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5785:9" pos:end="5790:0">break;</break>

<cpp:endif pos:start="5787:1" pos:end="5787:6">#<cpp:directive pos:start="5787:2" pos:end="5787:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5789:1" pos:end="5789:28">#<cpp:directive pos:start="5789:2" pos:end="5789:6">ifdef</cpp:directive> <name pos:start="5789:8" pos:end="5789:28">TARGET_NR_getresgid32</name></cpp:ifdef>

    <case pos:start="5791:5" pos:end="5791:31">case <expr pos:start="5791:10" pos:end="5791:30"><name pos:start="5791:10" pos:end="5791:30">TARGET_NR_getresgid32</name></expr>:</case>

        <block pos:start="5793:9" pos:end="5811:9">{<block_content pos:start="5795:13" pos:end="5809:13">

            <decl_stmt pos:start="5795:13" pos:end="5795:35"><decl pos:start="5795:13" pos:end="5795:22"><type pos:start="5795:13" pos:end="5795:17"><name pos:start="5795:13" pos:end="5795:17">gid_t</name></type> <name pos:start="5795:19" pos:end="5795:22">rgid</name></decl>, <decl pos:start="5795:25" pos:end="5795:28"><type ref="prev" pos:start="5795:13" pos:end="5795:17"/><name pos:start="5795:25" pos:end="5795:28">egid</name></decl>, <decl pos:start="5795:31" pos:end="5795:34"><type ref="prev" pos:start="5795:13" pos:end="5795:17"/><name pos:start="5795:31" pos:end="5795:34">sgid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5797:13" pos:end="5797:60"><expr pos:start="5797:13" pos:end="5797:59"><name pos:start="5797:13" pos:end="5797:15">ret</name> <operator pos:start="5797:17" pos:end="5797:17">=</operator> <call pos:start="5797:19" pos:end="5797:59"><name pos:start="5797:19" pos:end="5797:27">get_errno</name><argument_list pos:start="5797:28" pos:end="5797:59">(<argument pos:start="5797:29" pos:end="5797:58"><expr pos:start="5797:29" pos:end="5797:58"><call pos:start="5797:29" pos:end="5797:58"><name pos:start="5797:29" pos:end="5797:37">getresgid</name><argument_list pos:start="5797:38" pos:end="5797:58">(<argument pos:start="5797:39" pos:end="5797:43"><expr pos:start="5797:39" pos:end="5797:43"><operator pos:start="5797:39" pos:end="5797:39">&amp;</operator><name pos:start="5797:40" pos:end="5797:43">rgid</name></expr></argument>, <argument pos:start="5797:46" pos:end="5797:50"><expr pos:start="5797:46" pos:end="5797:50"><operator pos:start="5797:46" pos:end="5797:46">&amp;</operator><name pos:start="5797:47" pos:end="5797:50">egid</name></expr></argument>, <argument pos:start="5797:53" pos:end="5797:57"><expr pos:start="5797:53" pos:end="5797:57"><operator pos:start="5797:53" pos:end="5797:53">&amp;</operator><name pos:start="5797:54" pos:end="5797:57">sgid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5799:13" pos:end="5809:13"><if pos:start="5799:13" pos:end="5809:13">if <condition pos:start="5799:16" pos:end="5799:31">(<expr pos:start="5799:17" pos:end="5799:30"><operator pos:start="5799:17" pos:end="5799:17">!</operator><call pos:start="5799:18" pos:end="5799:30"><name pos:start="5799:18" pos:end="5799:25">is_error</name><argument_list pos:start="5799:26" pos:end="5799:30">(<argument pos:start="5799:27" pos:end="5799:29"><expr pos:start="5799:27" pos:end="5799:29"><name pos:start="5799:27" pos:end="5799:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5799:33" pos:end="5809:13">{<block_content pos:start="5801:17" pos:end="5807:32">

                <if_stmt pos:start="5801:17" pos:end="5807:32"><if pos:start="5801:17" pos:end="5807:32">if <condition pos:start="5801:20" pos:end="5805:48">(<expr pos:start="5801:21" pos:end="5805:47"><call pos:start="5801:21" pos:end="5801:44"><name pos:start="5801:21" pos:end="5801:32">put_user_u32</name><argument_list pos:start="5801:33" pos:end="5801:44">(<argument pos:start="5801:34" pos:end="5801:37"><expr pos:start="5801:34" pos:end="5801:37"><name pos:start="5801:34" pos:end="5801:37">rgid</name></expr></argument>, <argument pos:start="5801:40" pos:end="5801:43"><expr pos:start="5801:40" pos:end="5801:43"><name pos:start="5801:40" pos:end="5801:43">arg1</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5803:21" pos:end="5803:22">||</operator> <call pos:start="5803:24" pos:end="5803:47"><name pos:start="5803:24" pos:end="5803:35">put_user_u32</name><argument_list pos:start="5803:36" pos:end="5803:47">(<argument pos:start="5803:37" pos:end="5803:40"><expr pos:start="5803:37" pos:end="5803:40"><name pos:start="5803:37" pos:end="5803:40">egid</name></expr></argument>, <argument pos:start="5803:43" pos:end="5803:46"><expr pos:start="5803:43" pos:end="5803:46"><name pos:start="5803:43" pos:end="5803:46">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5805:21" pos:end="5805:22">||</operator> <call pos:start="5805:24" pos:end="5805:47"><name pos:start="5805:24" pos:end="5805:35">put_user_u32</name><argument_list pos:start="5805:36" pos:end="5805:47">(<argument pos:start="5805:37" pos:end="5805:40"><expr pos:start="5805:37" pos:end="5805:40"><name pos:start="5805:37" pos:end="5805:40">sgid</name></expr></argument>, <argument pos:start="5805:43" pos:end="5805:46"><expr pos:start="5805:43" pos:end="5805:46"><name pos:start="5805:43" pos:end="5805:46">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5807:21" pos:end="5807:32"><block_content pos:start="5807:21" pos:end="5807:32">

                    <goto pos:start="5807:21" pos:end="5807:32">goto <name pos:start="5807:26" pos:end="5807:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5813:9" pos:end="5818:0">break;</break>

<cpp:endif pos:start="5815:1" pos:end="5815:6">#<cpp:directive pos:start="5815:2" pos:end="5815:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5817:1" pos:end="5817:24">#<cpp:directive pos:start="5817:2" pos:end="5817:6">ifdef</cpp:directive> <name pos:start="5817:8" pos:end="5817:24">TARGET_NR_chown32</name></cpp:ifdef>

    <case pos:start="5819:5" pos:end="5819:27">case <expr pos:start="5819:10" pos:end="5819:26"><name pos:start="5819:10" pos:end="5819:26">TARGET_NR_chown32</name></expr>:</case>

        <if_stmt pos:start="5821:9" pos:end="5823:24"><if pos:start="5821:9" pos:end="5823:24">if <condition pos:start="5821:12" pos:end="5821:42">(<expr pos:start="5821:13" pos:end="5821:41"><operator pos:start="5821:13" pos:end="5821:13">!</operator><operator pos:start="5821:14" pos:end="5821:14">(</operator><name pos:start="5821:15" pos:end="5821:15">p</name> <operator pos:start="5821:17" pos:end="5821:17">=</operator> <call pos:start="5821:19" pos:end="5821:40"><name pos:start="5821:19" pos:end="5821:34">lock_user_string</name><argument_list pos:start="5821:35" pos:end="5821:40">(<argument pos:start="5821:36" pos:end="5821:39"><expr pos:start="5821:36" pos:end="5821:39"><name pos:start="5821:36" pos:end="5821:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="5821:41" pos:end="5821:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5823:13" pos:end="5823:24"><block_content pos:start="5823:13" pos:end="5823:24">

            <goto pos:start="5823:13" pos:end="5823:24">goto <name pos:start="5823:18" pos:end="5823:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5825:9" pos:end="5825:46"><expr pos:start="5825:9" pos:end="5825:45"><name pos:start="5825:9" pos:end="5825:11">ret</name> <operator pos:start="5825:13" pos:end="5825:13">=</operator> <call pos:start="5825:15" pos:end="5825:45"><name pos:start="5825:15" pos:end="5825:23">get_errno</name><argument_list pos:start="5825:24" pos:end="5825:45">(<argument pos:start="5825:25" pos:end="5825:44"><expr pos:start="5825:25" pos:end="5825:44"><call pos:start="5825:25" pos:end="5825:44"><name pos:start="5825:25" pos:end="5825:29">chown</name><argument_list pos:start="5825:30" pos:end="5825:44">(<argument pos:start="5825:31" pos:end="5825:31"><expr pos:start="5825:31" pos:end="5825:31"><name pos:start="5825:31" pos:end="5825:31">p</name></expr></argument>, <argument pos:start="5825:34" pos:end="5825:37"><expr pos:start="5825:34" pos:end="5825:37"><name pos:start="5825:34" pos:end="5825:37">arg2</name></expr></argument>, <argument pos:start="5825:40" pos:end="5825:43"><expr pos:start="5825:40" pos:end="5825:43"><name pos:start="5825:40" pos:end="5825:43">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5827:9" pos:end="5827:32"><expr pos:start="5827:9" pos:end="5827:31"><call pos:start="5827:9" pos:end="5827:31"><name pos:start="5827:9" pos:end="5827:19">unlock_user</name><argument_list pos:start="5827:20" pos:end="5827:31">(<argument pos:start="5827:21" pos:end="5827:21"><expr pos:start="5827:21" pos:end="5827:21"><name pos:start="5827:21" pos:end="5827:21">p</name></expr></argument>, <argument pos:start="5827:24" pos:end="5827:27"><expr pos:start="5827:24" pos:end="5827:27"><name pos:start="5827:24" pos:end="5827:27">arg1</name></expr></argument>, <argument pos:start="5827:30" pos:end="5827:30"><expr pos:start="5827:30" pos:end="5827:30"><literal type="number" pos:start="5827:30" pos:end="5827:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5829:9" pos:end="5834:0">break;</break>

<cpp:endif pos:start="5831:1" pos:end="5831:6">#<cpp:directive pos:start="5831:2" pos:end="5831:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5833:1" pos:end="5833:25">#<cpp:directive pos:start="5833:2" pos:end="5833:6">ifdef</cpp:directive> <name pos:start="5833:8" pos:end="5833:25">TARGET_NR_setuid32</name></cpp:ifdef>

    <case pos:start="5835:5" pos:end="5835:28">case <expr pos:start="5835:10" pos:end="5835:27"><name pos:start="5835:10" pos:end="5835:27">TARGET_NR_setuid32</name></expr>:</case>

        <expr_stmt pos:start="5837:9" pos:end="5837:38"><expr pos:start="5837:9" pos:end="5837:37"><name pos:start="5837:9" pos:end="5837:11">ret</name> <operator pos:start="5837:13" pos:end="5837:13">=</operator> <call pos:start="5837:15" pos:end="5837:37"><name pos:start="5837:15" pos:end="5837:23">get_errno</name><argument_list pos:start="5837:24" pos:end="5837:37">(<argument pos:start="5837:25" pos:end="5837:36"><expr pos:start="5837:25" pos:end="5837:36"><call pos:start="5837:25" pos:end="5837:36"><name pos:start="5837:25" pos:end="5837:30">setuid</name><argument_list pos:start="5837:31" pos:end="5837:36">(<argument pos:start="5837:32" pos:end="5837:35"><expr pos:start="5837:32" pos:end="5837:35"><name pos:start="5837:32" pos:end="5837:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5839:9" pos:end="5844:0">break;</break>

<cpp:endif pos:start="5841:1" pos:end="5841:6">#<cpp:directive pos:start="5841:2" pos:end="5841:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5843:1" pos:end="5843:25">#<cpp:directive pos:start="5843:2" pos:end="5843:6">ifdef</cpp:directive> <name pos:start="5843:8" pos:end="5843:25">TARGET_NR_setgid32</name></cpp:ifdef>

    <case pos:start="5845:5" pos:end="5845:28">case <expr pos:start="5845:10" pos:end="5845:27"><name pos:start="5845:10" pos:end="5845:27">TARGET_NR_setgid32</name></expr>:</case>

        <expr_stmt pos:start="5847:9" pos:end="5847:38"><expr pos:start="5847:9" pos:end="5847:37"><name pos:start="5847:9" pos:end="5847:11">ret</name> <operator pos:start="5847:13" pos:end="5847:13">=</operator> <call pos:start="5847:15" pos:end="5847:37"><name pos:start="5847:15" pos:end="5847:23">get_errno</name><argument_list pos:start="5847:24" pos:end="5847:37">(<argument pos:start="5847:25" pos:end="5847:36"><expr pos:start="5847:25" pos:end="5847:36"><call pos:start="5847:25" pos:end="5847:36"><name pos:start="5847:25" pos:end="5847:30">setgid</name><argument_list pos:start="5847:31" pos:end="5847:36">(<argument pos:start="5847:32" pos:end="5847:35"><expr pos:start="5847:32" pos:end="5847:35"><name pos:start="5847:32" pos:end="5847:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5849:9" pos:end="5854:0">break;</break>

<cpp:endif pos:start="5851:1" pos:end="5851:6">#<cpp:directive pos:start="5851:2" pos:end="5851:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5853:1" pos:end="5853:27">#<cpp:directive pos:start="5853:2" pos:end="5853:6">ifdef</cpp:directive> <name pos:start="5853:8" pos:end="5853:27">TARGET_NR_setfsuid32</name></cpp:ifdef>

    <case pos:start="5855:5" pos:end="5855:30">case <expr pos:start="5855:10" pos:end="5855:29"><name pos:start="5855:10" pos:end="5855:29">TARGET_NR_setfsuid32</name></expr>:</case>

        <expr_stmt pos:start="5857:9" pos:end="5857:40"><expr pos:start="5857:9" pos:end="5857:39"><name pos:start="5857:9" pos:end="5857:11">ret</name> <operator pos:start="5857:13" pos:end="5857:13">=</operator> <call pos:start="5857:15" pos:end="5857:39"><name pos:start="5857:15" pos:end="5857:23">get_errno</name><argument_list pos:start="5857:24" pos:end="5857:39">(<argument pos:start="5857:25" pos:end="5857:38"><expr pos:start="5857:25" pos:end="5857:38"><call pos:start="5857:25" pos:end="5857:38"><name pos:start="5857:25" pos:end="5857:32">setfsuid</name><argument_list pos:start="5857:33" pos:end="5857:38">(<argument pos:start="5857:34" pos:end="5857:37"><expr pos:start="5857:34" pos:end="5857:37"><name pos:start="5857:34" pos:end="5857:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5859:9" pos:end="5864:0">break;</break>

<cpp:endif pos:start="5861:1" pos:end="5861:6">#<cpp:directive pos:start="5861:2" pos:end="5861:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5863:1" pos:end="5863:27">#<cpp:directive pos:start="5863:2" pos:end="5863:6">ifdef</cpp:directive> <name pos:start="5863:8" pos:end="5863:27">TARGET_NR_setfsgid32</name></cpp:ifdef>

    <case pos:start="5865:5" pos:end="5865:30">case <expr pos:start="5865:10" pos:end="5865:29"><name pos:start="5865:10" pos:end="5865:29">TARGET_NR_setfsgid32</name></expr>:</case>

        <expr_stmt pos:start="5867:9" pos:end="5867:40"><expr pos:start="5867:9" pos:end="5867:39"><name pos:start="5867:9" pos:end="5867:11">ret</name> <operator pos:start="5867:13" pos:end="5867:13">=</operator> <call pos:start="5867:15" pos:end="5867:39"><name pos:start="5867:15" pos:end="5867:23">get_errno</name><argument_list pos:start="5867:24" pos:end="5867:39">(<argument pos:start="5867:25" pos:end="5867:38"><expr pos:start="5867:25" pos:end="5867:38"><call pos:start="5867:25" pos:end="5867:38"><name pos:start="5867:25" pos:end="5867:32">setfsgid</name><argument_list pos:start="5867:33" pos:end="5867:38">(<argument pos:start="5867:34" pos:end="5867:37"><expr pos:start="5867:34" pos:end="5867:37"><name pos:start="5867:34" pos:end="5867:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5869:9" pos:end="5872:0">break;</break>

<cpp:endif pos:start="5871:1" pos:end="5871:6">#<cpp:directive pos:start="5871:2" pos:end="5871:6">endif</cpp:directive></cpp:endif>



    <case pos:start="5875:5" pos:end="5875:30">case <expr pos:start="5875:10" pos:end="5875:29"><name pos:start="5875:10" pos:end="5875:29">TARGET_NR_pivot_root</name></expr>:</case>

        <goto pos:start="5877:9" pos:end="5880:0">goto <name pos:start="5877:14" pos:end="5877:26">unimplemented</name>;</goto>

<cpp:ifdef pos:start="5879:1" pos:end="5879:24">#<cpp:directive pos:start="5879:2" pos:end="5879:6">ifdef</cpp:directive> <name pos:start="5879:8" pos:end="5879:24">TARGET_NR_mincore</name></cpp:ifdef>

    <case pos:start="5881:5" pos:end="5881:27">case <expr pos:start="5881:10" pos:end="5881:26"><name pos:start="5881:10" pos:end="5881:26">TARGET_NR_mincore</name></expr>:</case>

        <block pos:start="5883:9" pos:end="5905:9">{<block_content pos:start="5885:13" pos:end="5903:36">

            <decl_stmt pos:start="5885:13" pos:end="5885:20"><decl pos:start="5885:13" pos:end="5885:19"><type pos:start="5885:13" pos:end="5885:18"><name pos:start="5885:13" pos:end="5885:16">void</name> <modifier pos:start="5885:18" pos:end="5885:18">*</modifier></type><name pos:start="5885:19" pos:end="5885:19">a</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5887:13" pos:end="5887:33"><expr pos:start="5887:13" pos:end="5887:32"><name pos:start="5887:13" pos:end="5887:15">ret</name> <operator pos:start="5887:17" pos:end="5887:17">=</operator> <operator pos:start="5887:19" pos:end="5887:19">-</operator><name pos:start="5887:20" pos:end="5887:32">TARGET_EFAULT</name></expr>;</expr_stmt>

            <if_stmt pos:start="5889:13" pos:end="5891:28"><if pos:start="5889:13" pos:end="5891:28">if <condition pos:start="5889:16" pos:end="5889:60">(<expr pos:start="5889:17" pos:end="5889:59"><operator pos:start="5889:17" pos:end="5889:17">!</operator><operator pos:start="5889:18" pos:end="5889:18">(</operator><name pos:start="5889:19" pos:end="5889:19">a</name> <operator pos:start="5889:21" pos:end="5889:21">=</operator> <call pos:start="5889:23" pos:end="5889:58"><name pos:start="5889:23" pos:end="5889:31">lock_user</name><argument_list pos:start="5889:32" pos:end="5889:58">(<argument pos:start="5889:33" pos:end="5889:43"><expr pos:start="5889:33" pos:end="5889:43"><name pos:start="5889:33" pos:end="5889:43">VERIFY_READ</name></expr></argument>, <argument pos:start="5889:46" pos:end="5889:49"><expr pos:start="5889:46" pos:end="5889:49"><name pos:start="5889:46" pos:end="5889:49">arg1</name></expr></argument>,<argument pos:start="5889:51" pos:end="5889:54"><expr pos:start="5889:51" pos:end="5889:54"><name pos:start="5889:51" pos:end="5889:54">arg2</name></expr></argument>, <argument pos:start="5889:57" pos:end="5889:57"><expr pos:start="5889:57" pos:end="5889:57"><literal type="number" pos:start="5889:57" pos:end="5889:57">0</literal></expr></argument>)</argument_list></call><operator pos:start="5889:59" pos:end="5889:59">)</operator></expr>)</condition><block type="pseudo" pos:start="5891:17" pos:end="5891:28"><block_content pos:start="5891:17" pos:end="5891:28">

                <goto pos:start="5891:17" pos:end="5891:28">goto <name pos:start="5891:22" pos:end="5891:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="5893:13" pos:end="5895:34"><if pos:start="5893:13" pos:end="5895:34">if <condition pos:start="5893:16" pos:end="5893:46">(<expr pos:start="5893:17" pos:end="5893:45"><operator pos:start="5893:17" pos:end="5893:17">!</operator><operator pos:start="5893:18" pos:end="5893:18">(</operator><name pos:start="5893:19" pos:end="5893:19">p</name> <operator pos:start="5893:21" pos:end="5893:21">=</operator> <call pos:start="5893:23" pos:end="5893:44"><name pos:start="5893:23" pos:end="5893:38">lock_user_string</name><argument_list pos:start="5893:39" pos:end="5893:44">(<argument pos:start="5893:40" pos:end="5893:43"><expr pos:start="5893:40" pos:end="5893:43"><name pos:start="5893:40" pos:end="5893:43">arg3</name></expr></argument>)</argument_list></call><operator pos:start="5893:45" pos:end="5893:45">)</operator></expr>)</condition><block type="pseudo" pos:start="5895:17" pos:end="5895:34"><block_content pos:start="5895:17" pos:end="5895:34">

                <goto pos:start="5895:17" pos:end="5895:34">goto <name pos:start="5895:22" pos:end="5895:33">mincore_fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5897:13" pos:end="5897:49"><expr pos:start="5897:13" pos:end="5897:48"><name pos:start="5897:13" pos:end="5897:15">ret</name> <operator pos:start="5897:17" pos:end="5897:17">=</operator> <call pos:start="5897:19" pos:end="5897:48"><name pos:start="5897:19" pos:end="5897:27">get_errno</name><argument_list pos:start="5897:28" pos:end="5897:48">(<argument pos:start="5897:29" pos:end="5897:47"><expr pos:start="5897:29" pos:end="5897:47"><call pos:start="5897:29" pos:end="5897:47"><name pos:start="5897:29" pos:end="5897:35">mincore</name><argument_list pos:start="5897:36" pos:end="5897:47">(<argument pos:start="5897:37" pos:end="5897:37"><expr pos:start="5897:37" pos:end="5897:37"><name pos:start="5897:37" pos:end="5897:37">a</name></expr></argument>, <argument pos:start="5897:40" pos:end="5897:43"><expr pos:start="5897:40" pos:end="5897:43"><name pos:start="5897:40" pos:end="5897:43">arg2</name></expr></argument>, <argument pos:start="5897:46" pos:end="5897:46"><expr pos:start="5897:46" pos:end="5897:46"><name pos:start="5897:46" pos:end="5897:46">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5899:13" pos:end="5899:38"><expr pos:start="5899:13" pos:end="5899:37"><call pos:start="5899:13" pos:end="5899:37"><name pos:start="5899:13" pos:end="5899:23">unlock_user</name><argument_list pos:start="5899:24" pos:end="5899:37">(<argument pos:start="5899:25" pos:end="5899:25"><expr pos:start="5899:25" pos:end="5899:25"><name pos:start="5899:25" pos:end="5899:25">p</name></expr></argument>, <argument pos:start="5899:28" pos:end="5899:31"><expr pos:start="5899:28" pos:end="5899:31"><name pos:start="5899:28" pos:end="5899:31">arg3</name></expr></argument>, <argument pos:start="5899:34" pos:end="5899:36"><expr pos:start="5899:34" pos:end="5899:36"><name pos:start="5899:34" pos:end="5899:36">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <label pos:start="5901:13" pos:end="5901:25"><name pos:start="5901:13" pos:end="5901:24">mincore_fail</name>:</label>

            <expr_stmt pos:start="5903:13" pos:end="5903:36"><expr pos:start="5903:13" pos:end="5903:35"><call pos:start="5903:13" pos:end="5903:35"><name pos:start="5903:13" pos:end="5903:23">unlock_user</name><argument_list pos:start="5903:24" pos:end="5903:35">(<argument pos:start="5903:25" pos:end="5903:25"><expr pos:start="5903:25" pos:end="5903:25"><name pos:start="5903:25" pos:end="5903:25">a</name></expr></argument>, <argument pos:start="5903:28" pos:end="5903:31"><expr pos:start="5903:28" pos:end="5903:31"><name pos:start="5903:28" pos:end="5903:31">arg1</name></expr></argument>, <argument pos:start="5903:34" pos:end="5903:34"><expr pos:start="5903:34" pos:end="5903:34"><literal type="number" pos:start="5903:34" pos:end="5903:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5907:9" pos:end="5912:0">break;</break>

<cpp:endif pos:start="5909:1" pos:end="5909:6">#<cpp:directive pos:start="5909:2" pos:end="5909:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5911:1" pos:end="5911:33">#<cpp:directive pos:start="5911:2" pos:end="5911:6">ifdef</cpp:directive> <name pos:start="5911:8" pos:end="5911:33">TARGET_NR_arm_fadvise64_64</name></cpp:ifdef>

    <case pos:start="5913:5" pos:end="5913:36">case <expr pos:start="5913:10" pos:end="5913:35"><name pos:start="5913:10" pos:end="5913:35">TARGET_NR_arm_fadvise64_64</name></expr>:</case>

	<block pos:start="5915:9" pos:end="5940:0">{<block_content pos:start="5925:17" pos:end="5931:28">

		<comment type="block" pos:start="5917:17" pos:end="5923:19">/*

		 * arm_fadvise64_64 looks like fadvise64_64 but

		 * with different argument order

		 */</comment>

		<decl_stmt pos:start="5925:17" pos:end="5925:30"><decl pos:start="5925:17" pos:end="5925:29"><type pos:start="5925:17" pos:end="5925:24"><name pos:start="5925:17" pos:end="5925:24">abi_long</name></type> <name pos:start="5925:26" pos:end="5925:29">temp</name></decl>;</decl_stmt>

		<expr_stmt pos:start="5927:17" pos:end="5927:28"><expr pos:start="5927:17" pos:end="5927:27"><name pos:start="5927:17" pos:end="5927:20">temp</name> <operator pos:start="5927:22" pos:end="5927:22">=</operator> <name pos:start="5927:24" pos:end="5927:27">arg3</name></expr>;</expr_stmt>

		<expr_stmt pos:start="5929:17" pos:end="5929:28"><expr pos:start="5929:17" pos:end="5929:27"><name pos:start="5929:17" pos:end="5929:20">arg3</name> <operator pos:start="5929:22" pos:end="5929:22">=</operator> <name pos:start="5929:24" pos:end="5929:27">arg4</name></expr>;</expr_stmt>

		<expr_stmt pos:start="5931:17" pos:end="5931:28"><expr pos:start="5931:17" pos:end="5931:27"><name pos:start="5931:17" pos:end="5931:20">arg4</name> <operator pos:start="5931:22" pos:end="5931:22">=</operator> <name pos:start="5931:24" pos:end="5931:27">temp</name></expr>;</expr_stmt>

	</block_content>}</block>

<cpp:endif pos:start="5935:1" pos:end="5935:6">#<cpp:directive pos:start="5935:2" pos:end="5935:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="5937:1" pos:end="5937:106">#<cpp:directive pos:start="5937:2" pos:end="5937:3">if</cpp:directive> <expr pos:start="5937:5" pos:end="5937:106"><call pos:start="5937:5" pos:end="5937:35"><name pos:start="5937:5" pos:end="5937:11">defined</name><argument_list pos:start="5937:12" pos:end="5937:35">(<argument pos:start="5937:13" pos:end="5937:34"><expr pos:start="5937:13" pos:end="5937:34"><name pos:start="5937:13" pos:end="5937:34">TARGET_NR_fadvise64_64</name></expr></argument>)</argument_list></call> <operator pos:start="5937:37" pos:end="5937:38">||</operator> <call pos:start="5937:40" pos:end="5937:74"><name pos:start="5937:40" pos:end="5937:46">defined</name><argument_list pos:start="5937:47" pos:end="5937:74">(<argument pos:start="5937:48" pos:end="5937:73"><expr pos:start="5937:48" pos:end="5937:73"><name pos:start="5937:48" pos:end="5937:73">TARGET_NR_arm_fadvise64_64</name></expr></argument>)</argument_list></call> <operator pos:start="5937:76" pos:end="5937:77">||</operator> <call pos:start="5937:79" pos:end="5937:106"><name pos:start="5937:79" pos:end="5937:85">defined</name><argument_list pos:start="5937:86" pos:end="5937:106">(<argument pos:start="5937:87" pos:end="5937:105"><expr pos:start="5937:87" pos:end="5937:105"><name pos:start="5937:87" pos:end="5937:105">TARGET_NR_fadvise64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="5939:1" pos:end="5939:29">#<cpp:directive pos:start="5939:2" pos:end="5939:6">ifdef</cpp:directive> <name pos:start="5939:8" pos:end="5939:29">TARGET_NR_fadvise64_64</name></cpp:ifdef>

    <case pos:start="5941:5" pos:end="5946:0">case <expr pos:start="5941:10" pos:end="5941:31"><name pos:start="5941:10" pos:end="5941:31">TARGET_NR_fadvise64_64</name></expr>:</case>

<cpp:endif pos:start="5943:1" pos:end="5943:6">#<cpp:directive pos:start="5943:2" pos:end="5943:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5945:1" pos:end="5945:26">#<cpp:directive pos:start="5945:2" pos:end="5945:6">ifdef</cpp:directive> <name pos:start="5945:8" pos:end="5945:26">TARGET_NR_fadvise64</name></cpp:ifdef>

    <case pos:start="5947:5" pos:end="5952:0">case <expr pos:start="5947:10" pos:end="5947:28"><name pos:start="5947:10" pos:end="5947:28">TARGET_NR_fadvise64</name></expr>:</case>

<cpp:endif pos:start="5949:1" pos:end="5949:6">#<cpp:directive pos:start="5949:2" pos:end="5949:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5951:1" pos:end="5951:19">#<cpp:directive pos:start="5951:2" pos:end="5951:6">ifdef</cpp:directive> <name pos:start="5951:8" pos:end="5951:19">TARGET_S390X</name></cpp:ifdef>

        <switch pos:start="5953:9" pos:end="5968:0">switch <condition pos:start="5953:16" pos:end="5953:21">(<expr pos:start="5953:17" pos:end="5953:20"><name pos:start="5953:17" pos:end="5953:20">arg4</name></expr>)</condition> <block pos:start="5953:23" pos:end="5968:0">{<block_content pos:start="5955:9" pos:end="5963:23">

        <case pos:start="5955:9" pos:end="5955:15">case <expr pos:start="5955:14" pos:end="5955:14"><literal type="number" pos:start="5955:14" pos:end="5955:14">4</literal></expr>:</case> <expr_stmt pos:start="5955:17" pos:end="5955:46"><expr pos:start="5955:17" pos:end="5955:45"><name pos:start="5955:17" pos:end="5955:20">arg4</name> <operator pos:start="5955:22" pos:end="5955:22">=</operator> <name pos:start="5955:24" pos:end="5955:41">POSIX_FADV_NOREUSE</name> <operator pos:start="5955:43" pos:end="5955:43">+</operator> <literal type="number" pos:start="5955:45" pos:end="5955:45">1</literal></expr>;</expr_stmt> <break pos:start="5955:48" pos:end="5955:53">break;</break> <comment type="block" pos:start="5955:55" pos:end="5955:91">/* make sure it's an invalid value */</comment>

        <case pos:start="5957:9" pos:end="5957:15">case <expr pos:start="5957:14" pos:end="5957:14"><literal type="number" pos:start="5957:14" pos:end="5957:14">5</literal></expr>:</case> <expr_stmt pos:start="5957:17" pos:end="5957:46"><expr pos:start="5957:17" pos:end="5957:45"><name pos:start="5957:17" pos:end="5957:20">arg4</name> <operator pos:start="5957:22" pos:end="5957:22">=</operator> <name pos:start="5957:24" pos:end="5957:41">POSIX_FADV_NOREUSE</name> <operator pos:start="5957:43" pos:end="5957:43">+</operator> <literal type="number" pos:start="5957:45" pos:end="5957:45">2</literal></expr>;</expr_stmt> <break pos:start="5957:48" pos:end="5957:53">break;</break> <comment type="block" pos:start="5957:55" pos:end="5957:65">/* ditto */</comment>

        <case pos:start="5959:9" pos:end="5959:15">case <expr pos:start="5959:14" pos:end="5959:14"><literal type="number" pos:start="5959:14" pos:end="5959:14">6</literal></expr>:</case> <expr_stmt pos:start="5959:17" pos:end="5959:43"><expr pos:start="5959:17" pos:end="5959:42"><name pos:start="5959:17" pos:end="5959:20">arg4</name> <operator pos:start="5959:22" pos:end="5959:22">=</operator> <name pos:start="5959:24" pos:end="5959:42">POSIX_FADV_DONTNEED</name></expr>;</expr_stmt> <break pos:start="5959:45" pos:end="5959:50">break;</break>

        <case pos:start="5961:9" pos:end="5961:15">case <expr pos:start="5961:14" pos:end="5961:14"><literal type="number" pos:start="5961:14" pos:end="5961:14">7</literal></expr>:</case> <expr_stmt pos:start="5961:17" pos:end="5961:42"><expr pos:start="5961:17" pos:end="5961:41"><name pos:start="5961:17" pos:end="5961:20">arg4</name> <operator pos:start="5961:22" pos:end="5961:22">=</operator> <name pos:start="5961:24" pos:end="5961:41">POSIX_FADV_NOREUSE</name></expr>;</expr_stmt> <break pos:start="5961:44" pos:end="5961:49">break;</break>

        <default pos:start="5963:9" pos:end="5963:16">default:</default> <break pos:start="5963:18" pos:end="5963:23">break;</break>

        </block_content>}</block></switch>

<cpp:endif pos:start="5967:1" pos:end="5967:6">#<cpp:directive pos:start="5967:2" pos:end="5967:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="5969:9" pos:end="5969:53"><expr pos:start="5969:9" pos:end="5969:52"><name pos:start="5969:9" pos:end="5969:11">ret</name> <operator pos:start="5969:13" pos:end="5969:13">=</operator> <operator pos:start="5969:15" pos:end="5969:15">-</operator><call pos:start="5969:16" pos:end="5969:52"><name pos:start="5969:16" pos:end="5969:28">posix_fadvise</name><argument_list pos:start="5969:29" pos:end="5969:52">(<argument pos:start="5969:30" pos:end="5969:33"><expr pos:start="5969:30" pos:end="5969:33"><name pos:start="5969:30" pos:end="5969:33">arg1</name></expr></argument>, <argument pos:start="5969:36" pos:end="5969:39"><expr pos:start="5969:36" pos:end="5969:39"><name pos:start="5969:36" pos:end="5969:39">arg2</name></expr></argument>, <argument pos:start="5969:42" pos:end="5969:45"><expr pos:start="5969:42" pos:end="5969:45"><name pos:start="5969:42" pos:end="5969:45">arg3</name></expr></argument>, <argument pos:start="5969:48" pos:end="5969:51"><expr pos:start="5969:48" pos:end="5969:51"><name pos:start="5969:48" pos:end="5969:51">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="5971:9" pos:end="5976:0">break;</break>

<cpp:endif pos:start="5973:1" pos:end="5973:6">#<cpp:directive pos:start="5973:2" pos:end="5973:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5975:1" pos:end="5975:24">#<cpp:directive pos:start="5975:2" pos:end="5975:6">ifdef</cpp:directive> <name pos:start="5975:8" pos:end="5975:24">TARGET_NR_madvise</name></cpp:ifdef>

    <case pos:start="5977:5" pos:end="5977:27">case <expr pos:start="5977:10" pos:end="5977:26"><name pos:start="5977:10" pos:end="5977:26">TARGET_NR_madvise</name></expr>:</case>

        <comment type="block" pos:start="5979:9" pos:end="5985:71">/* A straight passthrough may not be safe because qemu sometimes

           turns private flie-backed mappings into anonymous mappings.

           This will break MADV_DONTNEED.

           This is a hint, so ignoring and returning success is ok.  */</comment>

        <expr_stmt pos:start="5987:9" pos:end="5987:27"><expr pos:start="5987:9" pos:end="5987:26"><name pos:start="5987:9" pos:end="5987:11">ret</name> <operator pos:start="5987:13" pos:end="5987:13">=</operator> <call pos:start="5987:15" pos:end="5987:26"><name pos:start="5987:15" pos:end="5987:23">get_errno</name><argument_list pos:start="5987:24" pos:end="5987:26">(<argument pos:start="5987:25" pos:end="5987:25"><expr pos:start="5987:25" pos:end="5987:25"><literal type="number" pos:start="5987:25" pos:end="5987:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5989:9" pos:end="5994:0">break;</break>

<cpp:endif pos:start="5991:1" pos:end="5991:6">#<cpp:directive pos:start="5991:2" pos:end="5991:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="5993:1" pos:end="5993:25">#<cpp:directive pos:start="5993:2" pos:end="5993:3">if</cpp:directive> <expr pos:start="5993:5" pos:end="5993:25"><name pos:start="5993:5" pos:end="5993:19">TARGET_ABI_BITS</name> <operator pos:start="5993:21" pos:end="5993:22">==</operator> <literal type="number" pos:start="5993:24" pos:end="5993:25">32</literal></expr></cpp:if>

    <case pos:start="5995:5" pos:end="5995:27">case <expr pos:start="5995:10" pos:end="5995:26"><name pos:start="5995:10" pos:end="5995:26">TARGET_NR_fcntl64</name></expr>:</case>

    <block pos:start="5997:5" pos:end="6194:0">{<block_content pos:start="5999:9" pos:end="6187:14">

	<decl_stmt pos:start="5999:9" pos:end="5999:16"><decl pos:start="5999:9" pos:end="5999:15"><type pos:start="5999:9" pos:end="5999:11"><name pos:start="5999:9" pos:end="5999:11">int</name></type> <name pos:start="5999:13" pos:end="5999:15">cmd</name></decl>;</decl_stmt>

	<decl_stmt pos:start="6001:9" pos:end="6001:26"><decl pos:start="6001:9" pos:end="6001:25"><type pos:start="6001:9" pos:end="6001:22"><name pos:start="6001:9" pos:end="6001:22"><name pos:start="6001:9" pos:end="6001:14">struct</name> <name pos:start="6001:16" pos:end="6001:22">flock64</name></name></type> <name pos:start="6001:24" pos:end="6001:25">fl</name></decl>;</decl_stmt>

	<decl_stmt pos:start="6003:9" pos:end="6006:0"><decl pos:start="6003:9" pos:end="6003:40"><type pos:start="6003:9" pos:end="6003:31"><name pos:start="6003:9" pos:end="6003:29"><name pos:start="6003:9" pos:end="6003:14">struct</name> <name pos:start="6003:16" pos:end="6003:29">target_flock64</name></name> <modifier pos:start="6003:31" pos:end="6003:31">*</modifier></type><name pos:start="6003:32" pos:end="6003:40">target_fl</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="6005:1" pos:end="6005:17">#<cpp:directive pos:start="6005:2" pos:end="6005:6">ifdef</cpp:directive> <name pos:start="6005:8" pos:end="6005:17">TARGET_ARM</name></cpp:ifdef>

	<decl_stmt pos:start="6007:9" pos:end="6010:0"><decl pos:start="6007:9" pos:end="6007:46"><type pos:start="6007:9" pos:end="6007:36"><name pos:start="6007:9" pos:end="6007:34"><name pos:start="6007:9" pos:end="6007:14">struct</name> <name pos:start="6007:16" pos:end="6007:34">target_eabi_flock64</name></name> <modifier pos:start="6007:36" pos:end="6007:36">*</modifier></type><name pos:start="6007:37" pos:end="6007:46">target_efl</name></decl>;</decl_stmt>

<cpp:endif pos:start="6009:1" pos:end="6009:6">#<cpp:directive pos:start="6009:2" pos:end="6009:6">endif</cpp:directive></cpp:endif>



	<expr_stmt pos:start="6013:9" pos:end="6013:45"><expr pos:start="6013:9" pos:end="6013:44"><name pos:start="6013:9" pos:end="6013:11">cmd</name> <operator pos:start="6013:13" pos:end="6013:13">=</operator> <call pos:start="6013:15" pos:end="6013:44"><name pos:start="6013:15" pos:end="6013:38">target_to_host_fcntl_cmd</name><argument_list pos:start="6013:39" pos:end="6013:44">(<argument pos:start="6013:40" pos:end="6013:43"><expr pos:start="6013:40" pos:end="6013:43"><name pos:start="6013:40" pos:end="6013:43">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6015:9" pos:end="6021:9"><if pos:start="6015:9" pos:end="6021:9">if <condition pos:start="6015:12" pos:end="6015:34">(<expr pos:start="6015:13" pos:end="6015:33"><name pos:start="6015:13" pos:end="6015:15">cmd</name> <operator pos:start="6015:17" pos:end="6015:18">==</operator> <operator pos:start="6015:20" pos:end="6015:20">-</operator><name pos:start="6015:21" pos:end="6015:33">TARGET_EINVAL</name></expr>)</condition> <block pos:start="6015:36" pos:end="6021:9">{<block_content pos:start="6017:13" pos:end="6019:18">

            <expr_stmt pos:start="6017:13" pos:end="6017:22"><expr pos:start="6017:13" pos:end="6017:21"><name pos:start="6017:13" pos:end="6017:15">ret</name> <operator pos:start="6017:17" pos:end="6017:17">=</operator> <name pos:start="6017:19" pos:end="6017:21">cmd</name></expr>;</expr_stmt>

            <break pos:start="6019:13" pos:end="6019:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="6025:9" pos:end="6185:9">switch<condition pos:start="6025:15" pos:end="6025:20">(<expr pos:start="6025:16" pos:end="6025:19"><name pos:start="6025:16" pos:end="6025:19">arg2</name></expr>)</condition> <block pos:start="6025:22" pos:end="6185:9">{<block_content pos:start="6027:9" pos:end="6183:18">

        <case pos:start="6027:9" pos:end="6030:0">case <expr pos:start="6027:14" pos:end="6027:29"><name pos:start="6027:14" pos:end="6027:29">TARGET_F_GETLK64</name></expr>:</case>

<cpp:ifdef pos:start="6029:1" pos:end="6029:17">#<cpp:directive pos:start="6029:2" pos:end="6029:6">ifdef</cpp:directive> <name pos:start="6029:8" pos:end="6029:17">TARGET_ARM</name></cpp:ifdef>

            <if_stmt pos:start="6031:13" pos:end="6071:13"><if pos:start="6031:13" pos:end="6049:13">if <condition pos:start="6031:16" pos:end="6031:47">(<expr pos:start="6031:17" pos:end="6031:46"><operator pos:start="6031:17" pos:end="6031:17">(</operator><operator pos:start="6031:18" pos:end="6031:18">(</operator><name pos:start="6031:19" pos:end="6031:29">CPUARMState</name> <operator pos:start="6031:31" pos:end="6031:31">*</operator><operator pos:start="6031:32" pos:end="6031:32">)</operator><name pos:start="6031:33" pos:end="6031:39">cpu_env</name><operator pos:start="6031:40" pos:end="6031:40">)</operator><operator pos:start="6031:41" pos:end="6031:42">-&gt;</operator><name pos:start="6031:43" pos:end="6031:46">eabi</name></expr>)</condition> <block pos:start="6031:49" pos:end="6049:13">{<block_content pos:start="6033:17" pos:end="6047:56">

                <if_stmt pos:start="6033:17" pos:end="6035:32"><if pos:start="6033:17" pos:end="6035:32">if <condition pos:start="6033:20" pos:end="6033:72">(<expr pos:start="6033:21" pos:end="6033:71"><operator pos:start="6033:21" pos:end="6033:21">!</operator><call pos:start="6033:22" pos:end="6033:71"><name pos:start="6033:22" pos:end="6033:37">lock_user_struct</name><argument_list pos:start="6033:38" pos:end="6033:71">(<argument pos:start="6033:39" pos:end="6033:49"><expr pos:start="6033:39" pos:end="6033:49"><name pos:start="6033:39" pos:end="6033:49">VERIFY_READ</name></expr></argument>, <argument pos:start="6033:52" pos:end="6033:61"><expr pos:start="6033:52" pos:end="6033:61"><name pos:start="6033:52" pos:end="6033:61">target_efl</name></expr></argument>, <argument pos:start="6033:64" pos:end="6033:67"><expr pos:start="6033:64" pos:end="6033:67"><name pos:start="6033:64" pos:end="6033:67">arg3</name></expr></argument>, <argument pos:start="6033:70" pos:end="6033:70"><expr pos:start="6033:70" pos:end="6033:70"><literal type="number" pos:start="6033:70" pos:end="6033:70">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6035:21" pos:end="6035:32"><block_content pos:start="6035:21" pos:end="6035:32"> 

                    <goto pos:start="6035:21" pos:end="6035:32">goto <name pos:start="6035:26" pos:end="6035:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6037:17" pos:end="6037:56"><expr pos:start="6037:17" pos:end="6037:55"><name pos:start="6037:17" pos:end="6037:25"><name pos:start="6037:17" pos:end="6037:18">fl</name><operator pos:start="6037:19" pos:end="6037:19">.</operator><name pos:start="6037:20" pos:end="6037:25">l_type</name></name> <operator pos:start="6037:27" pos:end="6037:27">=</operator> <call pos:start="6037:29" pos:end="6037:55"><name pos:start="6037:29" pos:end="6037:35">tswap16</name><argument_list pos:start="6037:36" pos:end="6037:55">(<argument pos:start="6037:37" pos:end="6037:54"><expr pos:start="6037:37" pos:end="6037:54"><name pos:start="6037:37" pos:end="6037:54"><name pos:start="6037:37" pos:end="6037:46">target_efl</name><operator pos:start="6037:47" pos:end="6037:48">-&gt;</operator><name pos:start="6037:49" pos:end="6037:54">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6039:17" pos:end="6039:60"><expr pos:start="6039:17" pos:end="6039:59"><name pos:start="6039:17" pos:end="6039:27"><name pos:start="6039:17" pos:end="6039:18">fl</name><operator pos:start="6039:19" pos:end="6039:19">.</operator><name pos:start="6039:20" pos:end="6039:27">l_whence</name></name> <operator pos:start="6039:29" pos:end="6039:29">=</operator> <call pos:start="6039:31" pos:end="6039:59"><name pos:start="6039:31" pos:end="6039:37">tswap16</name><argument_list pos:start="6039:38" pos:end="6039:59">(<argument pos:start="6039:39" pos:end="6039:58"><expr pos:start="6039:39" pos:end="6039:58"><name pos:start="6039:39" pos:end="6039:58"><name pos:start="6039:39" pos:end="6039:48">target_efl</name><operator pos:start="6039:49" pos:end="6039:50">-&gt;</operator><name pos:start="6039:51" pos:end="6039:58">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6041:17" pos:end="6041:58"><expr pos:start="6041:17" pos:end="6041:57"><name pos:start="6041:17" pos:end="6041:26"><name pos:start="6041:17" pos:end="6041:18">fl</name><operator pos:start="6041:19" pos:end="6041:19">.</operator><name pos:start="6041:20" pos:end="6041:26">l_start</name></name> <operator pos:start="6041:28" pos:end="6041:28">=</operator> <call pos:start="6041:30" pos:end="6041:57"><name pos:start="6041:30" pos:end="6041:36">tswap64</name><argument_list pos:start="6041:37" pos:end="6041:57">(<argument pos:start="6041:38" pos:end="6041:56"><expr pos:start="6041:38" pos:end="6041:56"><name pos:start="6041:38" pos:end="6041:56"><name pos:start="6041:38" pos:end="6041:47">target_efl</name><operator pos:start="6041:48" pos:end="6041:49">-&gt;</operator><name pos:start="6041:50" pos:end="6041:56">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6043:17" pos:end="6043:54"><expr pos:start="6043:17" pos:end="6043:53"><name pos:start="6043:17" pos:end="6043:24"><name pos:start="6043:17" pos:end="6043:18">fl</name><operator pos:start="6043:19" pos:end="6043:19">.</operator><name pos:start="6043:20" pos:end="6043:24">l_len</name></name> <operator pos:start="6043:26" pos:end="6043:26">=</operator> <call pos:start="6043:28" pos:end="6043:53"><name pos:start="6043:28" pos:end="6043:34">tswap64</name><argument_list pos:start="6043:35" pos:end="6043:53">(<argument pos:start="6043:36" pos:end="6043:52"><expr pos:start="6043:36" pos:end="6043:52"><name pos:start="6043:36" pos:end="6043:52"><name pos:start="6043:36" pos:end="6043:45">target_efl</name><operator pos:start="6043:46" pos:end="6043:47">-&gt;</operator><name pos:start="6043:48" pos:end="6043:52">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6045:17" pos:end="6045:54"><expr pos:start="6045:17" pos:end="6045:53"><name pos:start="6045:17" pos:end="6045:24"><name pos:start="6045:17" pos:end="6045:18">fl</name><operator pos:start="6045:19" pos:end="6045:19">.</operator><name pos:start="6045:20" pos:end="6045:24">l_pid</name></name> <operator pos:start="6045:26" pos:end="6045:26">=</operator> <call pos:start="6045:28" pos:end="6045:53"><name pos:start="6045:28" pos:end="6045:34">tswap32</name><argument_list pos:start="6045:35" pos:end="6045:53">(<argument pos:start="6045:36" pos:end="6045:52"><expr pos:start="6045:36" pos:end="6045:52"><name pos:start="6045:36" pos:end="6045:52"><name pos:start="6045:36" pos:end="6045:45">target_efl</name><operator pos:start="6045:46" pos:end="6045:47">-&gt;</operator><name pos:start="6045:48" pos:end="6045:52">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6047:17" pos:end="6047:56"><expr pos:start="6047:17" pos:end="6047:55"><call pos:start="6047:17" pos:end="6047:55"><name pos:start="6047:17" pos:end="6047:34">unlock_user_struct</name><argument_list pos:start="6047:35" pos:end="6047:55">(<argument pos:start="6047:36" pos:end="6047:45"><expr pos:start="6047:36" pos:end="6047:45"><name pos:start="6047:36" pos:end="6047:45">target_efl</name></expr></argument>, <argument pos:start="6047:48" pos:end="6047:51"><expr pos:start="6047:48" pos:end="6047:51"><name pos:start="6047:48" pos:end="6047:51">arg3</name></expr></argument>, <argument pos:start="6047:54" pos:end="6047:54"><expr pos:start="6047:54" pos:end="6047:54"><literal type="number" pos:start="6047:54" pos:end="6047:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6049:15" pos:end="6071:13">else

<cpp:endif pos:start="6051:1" pos:end="6051:6">#<cpp:directive pos:start="6051:2" pos:end="6051:6">endif</cpp:directive></cpp:endif>

            <block pos:start="6053:13" pos:end="6071:13">{<block_content pos:start="6055:17" pos:end="6069:55">

                <if_stmt pos:start="6055:17" pos:end="6057:32"><if pos:start="6055:17" pos:end="6057:32">if <condition pos:start="6055:20" pos:end="6055:71">(<expr pos:start="6055:21" pos:end="6055:70"><operator pos:start="6055:21" pos:end="6055:21">!</operator><call pos:start="6055:22" pos:end="6055:70"><name pos:start="6055:22" pos:end="6055:37">lock_user_struct</name><argument_list pos:start="6055:38" pos:end="6055:70">(<argument pos:start="6055:39" pos:end="6055:49"><expr pos:start="6055:39" pos:end="6055:49"><name pos:start="6055:39" pos:end="6055:49">VERIFY_READ</name></expr></argument>, <argument pos:start="6055:52" pos:end="6055:60"><expr pos:start="6055:52" pos:end="6055:60"><name pos:start="6055:52" pos:end="6055:60">target_fl</name></expr></argument>, <argument pos:start="6055:63" pos:end="6055:66"><expr pos:start="6055:63" pos:end="6055:66"><name pos:start="6055:63" pos:end="6055:66">arg3</name></expr></argument>, <argument pos:start="6055:69" pos:end="6055:69"><expr pos:start="6055:69" pos:end="6055:69"><literal type="number" pos:start="6055:69" pos:end="6055:69">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6057:21" pos:end="6057:32"><block_content pos:start="6057:21" pos:end="6057:32"> 

                    <goto pos:start="6057:21" pos:end="6057:32">goto <name pos:start="6057:26" pos:end="6057:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6059:17" pos:end="6059:55"><expr pos:start="6059:17" pos:end="6059:54"><name pos:start="6059:17" pos:end="6059:25"><name pos:start="6059:17" pos:end="6059:18">fl</name><operator pos:start="6059:19" pos:end="6059:19">.</operator><name pos:start="6059:20" pos:end="6059:25">l_type</name></name> <operator pos:start="6059:27" pos:end="6059:27">=</operator> <call pos:start="6059:29" pos:end="6059:54"><name pos:start="6059:29" pos:end="6059:35">tswap16</name><argument_list pos:start="6059:36" pos:end="6059:54">(<argument pos:start="6059:37" pos:end="6059:53"><expr pos:start="6059:37" pos:end="6059:53"><name pos:start="6059:37" pos:end="6059:53"><name pos:start="6059:37" pos:end="6059:45">target_fl</name><operator pos:start="6059:46" pos:end="6059:47">-&gt;</operator><name pos:start="6059:48" pos:end="6059:53">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6061:17" pos:end="6061:59"><expr pos:start="6061:17" pos:end="6061:58"><name pos:start="6061:17" pos:end="6061:27"><name pos:start="6061:17" pos:end="6061:18">fl</name><operator pos:start="6061:19" pos:end="6061:19">.</operator><name pos:start="6061:20" pos:end="6061:27">l_whence</name></name> <operator pos:start="6061:29" pos:end="6061:29">=</operator> <call pos:start="6061:31" pos:end="6061:58"><name pos:start="6061:31" pos:end="6061:37">tswap16</name><argument_list pos:start="6061:38" pos:end="6061:58">(<argument pos:start="6061:39" pos:end="6061:57"><expr pos:start="6061:39" pos:end="6061:57"><name pos:start="6061:39" pos:end="6061:57"><name pos:start="6061:39" pos:end="6061:47">target_fl</name><operator pos:start="6061:48" pos:end="6061:49">-&gt;</operator><name pos:start="6061:50" pos:end="6061:57">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6063:17" pos:end="6063:57"><expr pos:start="6063:17" pos:end="6063:56"><name pos:start="6063:17" pos:end="6063:26"><name pos:start="6063:17" pos:end="6063:18">fl</name><operator pos:start="6063:19" pos:end="6063:19">.</operator><name pos:start="6063:20" pos:end="6063:26">l_start</name></name> <operator pos:start="6063:28" pos:end="6063:28">=</operator> <call pos:start="6063:30" pos:end="6063:56"><name pos:start="6063:30" pos:end="6063:36">tswap64</name><argument_list pos:start="6063:37" pos:end="6063:56">(<argument pos:start="6063:38" pos:end="6063:55"><expr pos:start="6063:38" pos:end="6063:55"><name pos:start="6063:38" pos:end="6063:55"><name pos:start="6063:38" pos:end="6063:46">target_fl</name><operator pos:start="6063:47" pos:end="6063:48">-&gt;</operator><name pos:start="6063:49" pos:end="6063:55">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6065:17" pos:end="6065:53"><expr pos:start="6065:17" pos:end="6065:52"><name pos:start="6065:17" pos:end="6065:24"><name pos:start="6065:17" pos:end="6065:18">fl</name><operator pos:start="6065:19" pos:end="6065:19">.</operator><name pos:start="6065:20" pos:end="6065:24">l_len</name></name> <operator pos:start="6065:26" pos:end="6065:26">=</operator> <call pos:start="6065:28" pos:end="6065:52"><name pos:start="6065:28" pos:end="6065:34">tswap64</name><argument_list pos:start="6065:35" pos:end="6065:52">(<argument pos:start="6065:36" pos:end="6065:51"><expr pos:start="6065:36" pos:end="6065:51"><name pos:start="6065:36" pos:end="6065:51"><name pos:start="6065:36" pos:end="6065:44">target_fl</name><operator pos:start="6065:45" pos:end="6065:46">-&gt;</operator><name pos:start="6065:47" pos:end="6065:51">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6067:17" pos:end="6067:53"><expr pos:start="6067:17" pos:end="6067:52"><name pos:start="6067:17" pos:end="6067:24"><name pos:start="6067:17" pos:end="6067:18">fl</name><operator pos:start="6067:19" pos:end="6067:19">.</operator><name pos:start="6067:20" pos:end="6067:24">l_pid</name></name> <operator pos:start="6067:26" pos:end="6067:26">=</operator> <call pos:start="6067:28" pos:end="6067:52"><name pos:start="6067:28" pos:end="6067:34">tswap32</name><argument_list pos:start="6067:35" pos:end="6067:52">(<argument pos:start="6067:36" pos:end="6067:51"><expr pos:start="6067:36" pos:end="6067:51"><name pos:start="6067:36" pos:end="6067:51"><name pos:start="6067:36" pos:end="6067:44">target_fl</name><operator pos:start="6067:45" pos:end="6067:46">-&gt;</operator><name pos:start="6067:47" pos:end="6067:51">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6069:17" pos:end="6069:55"><expr pos:start="6069:17" pos:end="6069:54"><call pos:start="6069:17" pos:end="6069:54"><name pos:start="6069:17" pos:end="6069:34">unlock_user_struct</name><argument_list pos:start="6069:35" pos:end="6069:54">(<argument pos:start="6069:36" pos:end="6069:44"><expr pos:start="6069:36" pos:end="6069:44"><name pos:start="6069:36" pos:end="6069:44">target_fl</name></expr></argument>, <argument pos:start="6069:47" pos:end="6069:50"><expr pos:start="6069:47" pos:end="6069:50"><name pos:start="6069:47" pos:end="6069:50">arg3</name></expr></argument>, <argument pos:start="6069:53" pos:end="6069:53"><expr pos:start="6069:53" pos:end="6069:53"><literal type="number" pos:start="6069:53" pos:end="6069:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6073:13" pos:end="6073:51"><expr pos:start="6073:13" pos:end="6073:50"><name pos:start="6073:13" pos:end="6073:15">ret</name> <operator pos:start="6073:17" pos:end="6073:17">=</operator> <call pos:start="6073:19" pos:end="6073:50"><name pos:start="6073:19" pos:end="6073:27">get_errno</name><argument_list pos:start="6073:28" pos:end="6073:50">(<argument pos:start="6073:29" pos:end="6073:49"><expr pos:start="6073:29" pos:end="6073:49"><call pos:start="6073:29" pos:end="6073:49"><name pos:start="6073:29" pos:end="6073:33">fcntl</name><argument_list pos:start="6073:34" pos:end="6073:49">(<argument pos:start="6073:35" pos:end="6073:38"><expr pos:start="6073:35" pos:end="6073:38"><name pos:start="6073:35" pos:end="6073:38">arg1</name></expr></argument>, <argument pos:start="6073:41" pos:end="6073:43"><expr pos:start="6073:41" pos:end="6073:43"><name pos:start="6073:41" pos:end="6073:43">cmd</name></expr></argument>, <argument pos:start="6073:46" pos:end="6073:48"><expr pos:start="6073:46" pos:end="6073:48"><operator pos:start="6073:46" pos:end="6073:46">&amp;</operator><name pos:start="6073:47" pos:end="6073:48">fl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="6075:13" pos:end="6121:13"><if pos:start="6075:13" pos:end="6121:13">if <condition pos:start="6075:16" pos:end="6075:25">(<expr pos:start="6075:17" pos:end="6075:24"><name pos:start="6075:17" pos:end="6075:19">ret</name> <operator pos:start="6075:21" pos:end="6075:22">==</operator> <literal type="number" pos:start="6075:24" pos:end="6075:24">0</literal></expr>)</condition> <block pos:start="6075:27" pos:end="6121:13">{<block_content pos:start="6079:17" pos:end="6119:17">

<cpp:ifdef pos:start="6077:1" pos:end="6077:17">#<cpp:directive pos:start="6077:2" pos:end="6077:6">ifdef</cpp:directive> <name pos:start="6077:8" pos:end="6077:17">TARGET_ARM</name></cpp:ifdef>

                <if_stmt pos:start="6079:17" pos:end="6119:17"><if pos:start="6079:17" pos:end="6097:17">if <condition pos:start="6079:20" pos:end="6079:51">(<expr pos:start="6079:21" pos:end="6079:50"><operator pos:start="6079:21" pos:end="6079:21">(</operator><operator pos:start="6079:22" pos:end="6079:22">(</operator><name pos:start="6079:23" pos:end="6079:33">CPUARMState</name> <operator pos:start="6079:35" pos:end="6079:35">*</operator><operator pos:start="6079:36" pos:end="6079:36">)</operator><name pos:start="6079:37" pos:end="6079:43">cpu_env</name><operator pos:start="6079:44" pos:end="6079:44">)</operator><operator pos:start="6079:45" pos:end="6079:46">-&gt;</operator><name pos:start="6079:47" pos:end="6079:50">eabi</name></expr>)</condition> <block pos:start="6079:53" pos:end="6097:17">{<block_content pos:start="6081:21" pos:end="6095:60">

                    <if_stmt pos:start="6081:21" pos:end="6083:36"><if pos:start="6081:21" pos:end="6083:36">if <condition pos:start="6081:24" pos:end="6081:77">(<expr pos:start="6081:25" pos:end="6081:76"><operator pos:start="6081:25" pos:end="6081:25">!</operator><call pos:start="6081:26" pos:end="6081:76"><name pos:start="6081:26" pos:end="6081:41">lock_user_struct</name><argument_list pos:start="6081:42" pos:end="6081:76">(<argument pos:start="6081:43" pos:end="6081:54"><expr pos:start="6081:43" pos:end="6081:54"><name pos:start="6081:43" pos:end="6081:54">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6081:57" pos:end="6081:66"><expr pos:start="6081:57" pos:end="6081:66"><name pos:start="6081:57" pos:end="6081:66">target_efl</name></expr></argument>, <argument pos:start="6081:69" pos:end="6081:72"><expr pos:start="6081:69" pos:end="6081:72"><name pos:start="6081:69" pos:end="6081:72">arg3</name></expr></argument>, <argument pos:start="6081:75" pos:end="6081:75"><expr pos:start="6081:75" pos:end="6081:75"><literal type="number" pos:start="6081:75" pos:end="6081:75">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6083:25" pos:end="6083:36"><block_content pos:start="6083:25" pos:end="6083:36"> 

                        <goto pos:start="6083:25" pos:end="6083:36">goto <name pos:start="6083:30" pos:end="6083:35">efault</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6085:21" pos:end="6085:60"><expr pos:start="6085:21" pos:end="6085:59"><name pos:start="6085:21" pos:end="6085:38"><name pos:start="6085:21" pos:end="6085:30">target_efl</name><operator pos:start="6085:31" pos:end="6085:32">-&gt;</operator><name pos:start="6085:33" pos:end="6085:38">l_type</name></name> <operator pos:start="6085:40" pos:end="6085:40">=</operator> <call pos:start="6085:42" pos:end="6085:59"><name pos:start="6085:42" pos:end="6085:48">tswap16</name><argument_list pos:start="6085:49" pos:end="6085:59">(<argument pos:start="6085:50" pos:end="6085:58"><expr pos:start="6085:50" pos:end="6085:58"><name pos:start="6085:50" pos:end="6085:58"><name pos:start="6085:50" pos:end="6085:51">fl</name><operator pos:start="6085:52" pos:end="6085:52">.</operator><name pos:start="6085:53" pos:end="6085:58">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6087:21" pos:end="6087:64"><expr pos:start="6087:21" pos:end="6087:63"><name pos:start="6087:21" pos:end="6087:40"><name pos:start="6087:21" pos:end="6087:30">target_efl</name><operator pos:start="6087:31" pos:end="6087:32">-&gt;</operator><name pos:start="6087:33" pos:end="6087:40">l_whence</name></name> <operator pos:start="6087:42" pos:end="6087:42">=</operator> <call pos:start="6087:44" pos:end="6087:63"><name pos:start="6087:44" pos:end="6087:50">tswap16</name><argument_list pos:start="6087:51" pos:end="6087:63">(<argument pos:start="6087:52" pos:end="6087:62"><expr pos:start="6087:52" pos:end="6087:62"><name pos:start="6087:52" pos:end="6087:62"><name pos:start="6087:52" pos:end="6087:53">fl</name><operator pos:start="6087:54" pos:end="6087:54">.</operator><name pos:start="6087:55" pos:end="6087:62">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6089:21" pos:end="6089:62"><expr pos:start="6089:21" pos:end="6089:61"><name pos:start="6089:21" pos:end="6089:39"><name pos:start="6089:21" pos:end="6089:30">target_efl</name><operator pos:start="6089:31" pos:end="6089:32">-&gt;</operator><name pos:start="6089:33" pos:end="6089:39">l_start</name></name> <operator pos:start="6089:41" pos:end="6089:41">=</operator> <call pos:start="6089:43" pos:end="6089:61"><name pos:start="6089:43" pos:end="6089:49">tswap64</name><argument_list pos:start="6089:50" pos:end="6089:61">(<argument pos:start="6089:51" pos:end="6089:60"><expr pos:start="6089:51" pos:end="6089:60"><name pos:start="6089:51" pos:end="6089:60"><name pos:start="6089:51" pos:end="6089:52">fl</name><operator pos:start="6089:53" pos:end="6089:53">.</operator><name pos:start="6089:54" pos:end="6089:60">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6091:21" pos:end="6091:58"><expr pos:start="6091:21" pos:end="6091:57"><name pos:start="6091:21" pos:end="6091:37"><name pos:start="6091:21" pos:end="6091:30">target_efl</name><operator pos:start="6091:31" pos:end="6091:32">-&gt;</operator><name pos:start="6091:33" pos:end="6091:37">l_len</name></name> <operator pos:start="6091:39" pos:end="6091:39">=</operator> <call pos:start="6091:41" pos:end="6091:57"><name pos:start="6091:41" pos:end="6091:47">tswap64</name><argument_list pos:start="6091:48" pos:end="6091:57">(<argument pos:start="6091:49" pos:end="6091:56"><expr pos:start="6091:49" pos:end="6091:56"><name pos:start="6091:49" pos:end="6091:56"><name pos:start="6091:49" pos:end="6091:50">fl</name><operator pos:start="6091:51" pos:end="6091:51">.</operator><name pos:start="6091:52" pos:end="6091:56">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6093:21" pos:end="6093:58"><expr pos:start="6093:21" pos:end="6093:57"><name pos:start="6093:21" pos:end="6093:37"><name pos:start="6093:21" pos:end="6093:30">target_efl</name><operator pos:start="6093:31" pos:end="6093:32">-&gt;</operator><name pos:start="6093:33" pos:end="6093:37">l_pid</name></name> <operator pos:start="6093:39" pos:end="6093:39">=</operator> <call pos:start="6093:41" pos:end="6093:57"><name pos:start="6093:41" pos:end="6093:47">tswap32</name><argument_list pos:start="6093:48" pos:end="6093:57">(<argument pos:start="6093:49" pos:end="6093:56"><expr pos:start="6093:49" pos:end="6093:56"><name pos:start="6093:49" pos:end="6093:56"><name pos:start="6093:49" pos:end="6093:50">fl</name><operator pos:start="6093:51" pos:end="6093:51">.</operator><name pos:start="6093:52" pos:end="6093:56">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6095:21" pos:end="6095:60"><expr pos:start="6095:21" pos:end="6095:59"><call pos:start="6095:21" pos:end="6095:59"><name pos:start="6095:21" pos:end="6095:38">unlock_user_struct</name><argument_list pos:start="6095:39" pos:end="6095:59">(<argument pos:start="6095:40" pos:end="6095:49"><expr pos:start="6095:40" pos:end="6095:49"><name pos:start="6095:40" pos:end="6095:49">target_efl</name></expr></argument>, <argument pos:start="6095:52" pos:end="6095:55"><expr pos:start="6095:52" pos:end="6095:55"><name pos:start="6095:52" pos:end="6095:55">arg3</name></expr></argument>, <argument pos:start="6095:58" pos:end="6095:58"><expr pos:start="6095:58" pos:end="6095:58"><literal type="number" pos:start="6095:58" pos:end="6095:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6097:19" pos:end="6119:17">else

<cpp:endif pos:start="6099:1" pos:end="6099:6">#<cpp:directive pos:start="6099:2" pos:end="6099:6">endif</cpp:directive></cpp:endif>

                <block pos:start="6101:17" pos:end="6119:17">{<block_content pos:start="6103:21" pos:end="6117:59">

                    <if_stmt pos:start="6103:21" pos:end="6105:36"><if pos:start="6103:21" pos:end="6105:36">if <condition pos:start="6103:24" pos:end="6103:76">(<expr pos:start="6103:25" pos:end="6103:75"><operator pos:start="6103:25" pos:end="6103:25">!</operator><call pos:start="6103:26" pos:end="6103:75"><name pos:start="6103:26" pos:end="6103:41">lock_user_struct</name><argument_list pos:start="6103:42" pos:end="6103:75">(<argument pos:start="6103:43" pos:end="6103:54"><expr pos:start="6103:43" pos:end="6103:54"><name pos:start="6103:43" pos:end="6103:54">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6103:57" pos:end="6103:65"><expr pos:start="6103:57" pos:end="6103:65"><name pos:start="6103:57" pos:end="6103:65">target_fl</name></expr></argument>, <argument pos:start="6103:68" pos:end="6103:71"><expr pos:start="6103:68" pos:end="6103:71"><name pos:start="6103:68" pos:end="6103:71">arg3</name></expr></argument>, <argument pos:start="6103:74" pos:end="6103:74"><expr pos:start="6103:74" pos:end="6103:74"><literal type="number" pos:start="6103:74" pos:end="6103:74">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6105:25" pos:end="6105:36"><block_content pos:start="6105:25" pos:end="6105:36"> 

                        <goto pos:start="6105:25" pos:end="6105:36">goto <name pos:start="6105:30" pos:end="6105:35">efault</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6107:21" pos:end="6107:59"><expr pos:start="6107:21" pos:end="6107:58"><name pos:start="6107:21" pos:end="6107:37"><name pos:start="6107:21" pos:end="6107:29">target_fl</name><operator pos:start="6107:30" pos:end="6107:31">-&gt;</operator><name pos:start="6107:32" pos:end="6107:37">l_type</name></name> <operator pos:start="6107:39" pos:end="6107:39">=</operator> <call pos:start="6107:41" pos:end="6107:58"><name pos:start="6107:41" pos:end="6107:47">tswap16</name><argument_list pos:start="6107:48" pos:end="6107:58">(<argument pos:start="6107:49" pos:end="6107:57"><expr pos:start="6107:49" pos:end="6107:57"><name pos:start="6107:49" pos:end="6107:57"><name pos:start="6107:49" pos:end="6107:50">fl</name><operator pos:start="6107:51" pos:end="6107:51">.</operator><name pos:start="6107:52" pos:end="6107:57">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6109:21" pos:end="6109:63"><expr pos:start="6109:21" pos:end="6109:62"><name pos:start="6109:21" pos:end="6109:39"><name pos:start="6109:21" pos:end="6109:29">target_fl</name><operator pos:start="6109:30" pos:end="6109:31">-&gt;</operator><name pos:start="6109:32" pos:end="6109:39">l_whence</name></name> <operator pos:start="6109:41" pos:end="6109:41">=</operator> <call pos:start="6109:43" pos:end="6109:62"><name pos:start="6109:43" pos:end="6109:49">tswap16</name><argument_list pos:start="6109:50" pos:end="6109:62">(<argument pos:start="6109:51" pos:end="6109:61"><expr pos:start="6109:51" pos:end="6109:61"><name pos:start="6109:51" pos:end="6109:61"><name pos:start="6109:51" pos:end="6109:52">fl</name><operator pos:start="6109:53" pos:end="6109:53">.</operator><name pos:start="6109:54" pos:end="6109:61">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6111:21" pos:end="6111:61"><expr pos:start="6111:21" pos:end="6111:60"><name pos:start="6111:21" pos:end="6111:38"><name pos:start="6111:21" pos:end="6111:29">target_fl</name><operator pos:start="6111:30" pos:end="6111:31">-&gt;</operator><name pos:start="6111:32" pos:end="6111:38">l_start</name></name> <operator pos:start="6111:40" pos:end="6111:40">=</operator> <call pos:start="6111:42" pos:end="6111:60"><name pos:start="6111:42" pos:end="6111:48">tswap64</name><argument_list pos:start="6111:49" pos:end="6111:60">(<argument pos:start="6111:50" pos:end="6111:59"><expr pos:start="6111:50" pos:end="6111:59"><name pos:start="6111:50" pos:end="6111:59"><name pos:start="6111:50" pos:end="6111:51">fl</name><operator pos:start="6111:52" pos:end="6111:52">.</operator><name pos:start="6111:53" pos:end="6111:59">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6113:21" pos:end="6113:57"><expr pos:start="6113:21" pos:end="6113:56"><name pos:start="6113:21" pos:end="6113:36"><name pos:start="6113:21" pos:end="6113:29">target_fl</name><operator pos:start="6113:30" pos:end="6113:31">-&gt;</operator><name pos:start="6113:32" pos:end="6113:36">l_len</name></name> <operator pos:start="6113:38" pos:end="6113:38">=</operator> <call pos:start="6113:40" pos:end="6113:56"><name pos:start="6113:40" pos:end="6113:46">tswap64</name><argument_list pos:start="6113:47" pos:end="6113:56">(<argument pos:start="6113:48" pos:end="6113:55"><expr pos:start="6113:48" pos:end="6113:55"><name pos:start="6113:48" pos:end="6113:55"><name pos:start="6113:48" pos:end="6113:49">fl</name><operator pos:start="6113:50" pos:end="6113:50">.</operator><name pos:start="6113:51" pos:end="6113:55">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6115:21" pos:end="6115:57"><expr pos:start="6115:21" pos:end="6115:56"><name pos:start="6115:21" pos:end="6115:36"><name pos:start="6115:21" pos:end="6115:29">target_fl</name><operator pos:start="6115:30" pos:end="6115:31">-&gt;</operator><name pos:start="6115:32" pos:end="6115:36">l_pid</name></name> <operator pos:start="6115:38" pos:end="6115:38">=</operator> <call pos:start="6115:40" pos:end="6115:56"><name pos:start="6115:40" pos:end="6115:46">tswap32</name><argument_list pos:start="6115:47" pos:end="6115:56">(<argument pos:start="6115:48" pos:end="6115:55"><expr pos:start="6115:48" pos:end="6115:55"><name pos:start="6115:48" pos:end="6115:55"><name pos:start="6115:48" pos:end="6115:49">fl</name><operator pos:start="6115:50" pos:end="6115:50">.</operator><name pos:start="6115:51" pos:end="6115:55">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6117:21" pos:end="6117:59"><expr pos:start="6117:21" pos:end="6117:58"><call pos:start="6117:21" pos:end="6117:58"><name pos:start="6117:21" pos:end="6117:38">unlock_user_struct</name><argument_list pos:start="6117:39" pos:end="6117:58">(<argument pos:start="6117:40" pos:end="6117:48"><expr pos:start="6117:40" pos:end="6117:48"><name pos:start="6117:40" pos:end="6117:48">target_fl</name></expr></argument>, <argument pos:start="6117:51" pos:end="6117:54"><expr pos:start="6117:51" pos:end="6117:54"><name pos:start="6117:51" pos:end="6117:54">arg3</name></expr></argument>, <argument pos:start="6117:57" pos:end="6117:57"><expr pos:start="6117:57" pos:end="6117:57"><literal type="number" pos:start="6117:57" pos:end="6117:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

	    </block_content>}</block></if></if_stmt>

	    <break pos:start="6123:13" pos:end="6123:18">break;</break>



        <case pos:start="6127:9" pos:end="6127:30">case <expr pos:start="6127:14" pos:end="6127:29"><name pos:start="6127:14" pos:end="6127:29">TARGET_F_SETLK64</name></expr>:</case>

        <case pos:start="6129:9" pos:end="6132:0">case <expr pos:start="6129:14" pos:end="6129:30"><name pos:start="6129:14" pos:end="6129:30">TARGET_F_SETLKW64</name></expr>:</case>

<cpp:ifdef pos:start="6131:1" pos:end="6131:17">#<cpp:directive pos:start="6131:2" pos:end="6131:6">ifdef</cpp:directive> <name pos:start="6131:8" pos:end="6131:17">TARGET_ARM</name></cpp:ifdef>

            <if_stmt pos:start="6133:13" pos:end="6173:13"><if pos:start="6133:13" pos:end="6151:13">if <condition pos:start="6133:16" pos:end="6133:47">(<expr pos:start="6133:17" pos:end="6133:46"><operator pos:start="6133:17" pos:end="6133:17">(</operator><operator pos:start="6133:18" pos:end="6133:18">(</operator><name pos:start="6133:19" pos:end="6133:29">CPUARMState</name> <operator pos:start="6133:31" pos:end="6133:31">*</operator><operator pos:start="6133:32" pos:end="6133:32">)</operator><name pos:start="6133:33" pos:end="6133:39">cpu_env</name><operator pos:start="6133:40" pos:end="6133:40">)</operator><operator pos:start="6133:41" pos:end="6133:42">-&gt;</operator><name pos:start="6133:43" pos:end="6133:46">eabi</name></expr>)</condition> <block pos:start="6133:49" pos:end="6151:13">{<block_content pos:start="6135:17" pos:end="6149:56">

                <if_stmt pos:start="6135:17" pos:end="6137:32"><if pos:start="6135:17" pos:end="6137:32">if <condition pos:start="6135:20" pos:end="6135:72">(<expr pos:start="6135:21" pos:end="6135:71"><operator pos:start="6135:21" pos:end="6135:21">!</operator><call pos:start="6135:22" pos:end="6135:71"><name pos:start="6135:22" pos:end="6135:37">lock_user_struct</name><argument_list pos:start="6135:38" pos:end="6135:71">(<argument pos:start="6135:39" pos:end="6135:49"><expr pos:start="6135:39" pos:end="6135:49"><name pos:start="6135:39" pos:end="6135:49">VERIFY_READ</name></expr></argument>, <argument pos:start="6135:52" pos:end="6135:61"><expr pos:start="6135:52" pos:end="6135:61"><name pos:start="6135:52" pos:end="6135:61">target_efl</name></expr></argument>, <argument pos:start="6135:64" pos:end="6135:67"><expr pos:start="6135:64" pos:end="6135:67"><name pos:start="6135:64" pos:end="6135:67">arg3</name></expr></argument>, <argument pos:start="6135:70" pos:end="6135:70"><expr pos:start="6135:70" pos:end="6135:70"><literal type="number" pos:start="6135:70" pos:end="6135:70">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6137:21" pos:end="6137:32"><block_content pos:start="6137:21" pos:end="6137:32"> 

                    <goto pos:start="6137:21" pos:end="6137:32">goto <name pos:start="6137:26" pos:end="6137:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6139:17" pos:end="6139:56"><expr pos:start="6139:17" pos:end="6139:55"><name pos:start="6139:17" pos:end="6139:25"><name pos:start="6139:17" pos:end="6139:18">fl</name><operator pos:start="6139:19" pos:end="6139:19">.</operator><name pos:start="6139:20" pos:end="6139:25">l_type</name></name> <operator pos:start="6139:27" pos:end="6139:27">=</operator> <call pos:start="6139:29" pos:end="6139:55"><name pos:start="6139:29" pos:end="6139:35">tswap16</name><argument_list pos:start="6139:36" pos:end="6139:55">(<argument pos:start="6139:37" pos:end="6139:54"><expr pos:start="6139:37" pos:end="6139:54"><name pos:start="6139:37" pos:end="6139:54"><name pos:start="6139:37" pos:end="6139:46">target_efl</name><operator pos:start="6139:47" pos:end="6139:48">-&gt;</operator><name pos:start="6139:49" pos:end="6139:54">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6141:17" pos:end="6141:60"><expr pos:start="6141:17" pos:end="6141:59"><name pos:start="6141:17" pos:end="6141:27"><name pos:start="6141:17" pos:end="6141:18">fl</name><operator pos:start="6141:19" pos:end="6141:19">.</operator><name pos:start="6141:20" pos:end="6141:27">l_whence</name></name> <operator pos:start="6141:29" pos:end="6141:29">=</operator> <call pos:start="6141:31" pos:end="6141:59"><name pos:start="6141:31" pos:end="6141:37">tswap16</name><argument_list pos:start="6141:38" pos:end="6141:59">(<argument pos:start="6141:39" pos:end="6141:58"><expr pos:start="6141:39" pos:end="6141:58"><name pos:start="6141:39" pos:end="6141:58"><name pos:start="6141:39" pos:end="6141:48">target_efl</name><operator pos:start="6141:49" pos:end="6141:50">-&gt;</operator><name pos:start="6141:51" pos:end="6141:58">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6143:17" pos:end="6143:58"><expr pos:start="6143:17" pos:end="6143:57"><name pos:start="6143:17" pos:end="6143:26"><name pos:start="6143:17" pos:end="6143:18">fl</name><operator pos:start="6143:19" pos:end="6143:19">.</operator><name pos:start="6143:20" pos:end="6143:26">l_start</name></name> <operator pos:start="6143:28" pos:end="6143:28">=</operator> <call pos:start="6143:30" pos:end="6143:57"><name pos:start="6143:30" pos:end="6143:36">tswap64</name><argument_list pos:start="6143:37" pos:end="6143:57">(<argument pos:start="6143:38" pos:end="6143:56"><expr pos:start="6143:38" pos:end="6143:56"><name pos:start="6143:38" pos:end="6143:56"><name pos:start="6143:38" pos:end="6143:47">target_efl</name><operator pos:start="6143:48" pos:end="6143:49">-&gt;</operator><name pos:start="6143:50" pos:end="6143:56">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6145:17" pos:end="6145:54"><expr pos:start="6145:17" pos:end="6145:53"><name pos:start="6145:17" pos:end="6145:24"><name pos:start="6145:17" pos:end="6145:18">fl</name><operator pos:start="6145:19" pos:end="6145:19">.</operator><name pos:start="6145:20" pos:end="6145:24">l_len</name></name> <operator pos:start="6145:26" pos:end="6145:26">=</operator> <call pos:start="6145:28" pos:end="6145:53"><name pos:start="6145:28" pos:end="6145:34">tswap64</name><argument_list pos:start="6145:35" pos:end="6145:53">(<argument pos:start="6145:36" pos:end="6145:52"><expr pos:start="6145:36" pos:end="6145:52"><name pos:start="6145:36" pos:end="6145:52"><name pos:start="6145:36" pos:end="6145:45">target_efl</name><operator pos:start="6145:46" pos:end="6145:47">-&gt;</operator><name pos:start="6145:48" pos:end="6145:52">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6147:17" pos:end="6147:54"><expr pos:start="6147:17" pos:end="6147:53"><name pos:start="6147:17" pos:end="6147:24"><name pos:start="6147:17" pos:end="6147:18">fl</name><operator pos:start="6147:19" pos:end="6147:19">.</operator><name pos:start="6147:20" pos:end="6147:24">l_pid</name></name> <operator pos:start="6147:26" pos:end="6147:26">=</operator> <call pos:start="6147:28" pos:end="6147:53"><name pos:start="6147:28" pos:end="6147:34">tswap32</name><argument_list pos:start="6147:35" pos:end="6147:53">(<argument pos:start="6147:36" pos:end="6147:52"><expr pos:start="6147:36" pos:end="6147:52"><name pos:start="6147:36" pos:end="6147:52"><name pos:start="6147:36" pos:end="6147:45">target_efl</name><operator pos:start="6147:46" pos:end="6147:47">-&gt;</operator><name pos:start="6147:48" pos:end="6147:52">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6149:17" pos:end="6149:56"><expr pos:start="6149:17" pos:end="6149:55"><call pos:start="6149:17" pos:end="6149:55"><name pos:start="6149:17" pos:end="6149:34">unlock_user_struct</name><argument_list pos:start="6149:35" pos:end="6149:55">(<argument pos:start="6149:36" pos:end="6149:45"><expr pos:start="6149:36" pos:end="6149:45"><name pos:start="6149:36" pos:end="6149:45">target_efl</name></expr></argument>, <argument pos:start="6149:48" pos:end="6149:51"><expr pos:start="6149:48" pos:end="6149:51"><name pos:start="6149:48" pos:end="6149:51">arg3</name></expr></argument>, <argument pos:start="6149:54" pos:end="6149:54"><expr pos:start="6149:54" pos:end="6149:54"><literal type="number" pos:start="6149:54" pos:end="6149:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6151:15" pos:end="6173:13">else

<cpp:endif pos:start="6153:1" pos:end="6153:6">#<cpp:directive pos:start="6153:2" pos:end="6153:6">endif</cpp:directive></cpp:endif>

            <block pos:start="6155:13" pos:end="6173:13">{<block_content pos:start="6157:17" pos:end="6171:55">

                <if_stmt pos:start="6157:17" pos:end="6159:32"><if pos:start="6157:17" pos:end="6159:32">if <condition pos:start="6157:20" pos:end="6157:71">(<expr pos:start="6157:21" pos:end="6157:70"><operator pos:start="6157:21" pos:end="6157:21">!</operator><call pos:start="6157:22" pos:end="6157:70"><name pos:start="6157:22" pos:end="6157:37">lock_user_struct</name><argument_list pos:start="6157:38" pos:end="6157:70">(<argument pos:start="6157:39" pos:end="6157:49"><expr pos:start="6157:39" pos:end="6157:49"><name pos:start="6157:39" pos:end="6157:49">VERIFY_READ</name></expr></argument>, <argument pos:start="6157:52" pos:end="6157:60"><expr pos:start="6157:52" pos:end="6157:60"><name pos:start="6157:52" pos:end="6157:60">target_fl</name></expr></argument>, <argument pos:start="6157:63" pos:end="6157:66"><expr pos:start="6157:63" pos:end="6157:66"><name pos:start="6157:63" pos:end="6157:66">arg3</name></expr></argument>, <argument pos:start="6157:69" pos:end="6157:69"><expr pos:start="6157:69" pos:end="6157:69"><literal type="number" pos:start="6157:69" pos:end="6157:69">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6159:21" pos:end="6159:32"><block_content pos:start="6159:21" pos:end="6159:32"> 

                    <goto pos:start="6159:21" pos:end="6159:32">goto <name pos:start="6159:26" pos:end="6159:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6161:17" pos:end="6161:55"><expr pos:start="6161:17" pos:end="6161:54"><name pos:start="6161:17" pos:end="6161:25"><name pos:start="6161:17" pos:end="6161:18">fl</name><operator pos:start="6161:19" pos:end="6161:19">.</operator><name pos:start="6161:20" pos:end="6161:25">l_type</name></name> <operator pos:start="6161:27" pos:end="6161:27">=</operator> <call pos:start="6161:29" pos:end="6161:54"><name pos:start="6161:29" pos:end="6161:35">tswap16</name><argument_list pos:start="6161:36" pos:end="6161:54">(<argument pos:start="6161:37" pos:end="6161:53"><expr pos:start="6161:37" pos:end="6161:53"><name pos:start="6161:37" pos:end="6161:53"><name pos:start="6161:37" pos:end="6161:45">target_fl</name><operator pos:start="6161:46" pos:end="6161:47">-&gt;</operator><name pos:start="6161:48" pos:end="6161:53">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6163:17" pos:end="6163:59"><expr pos:start="6163:17" pos:end="6163:58"><name pos:start="6163:17" pos:end="6163:27"><name pos:start="6163:17" pos:end="6163:18">fl</name><operator pos:start="6163:19" pos:end="6163:19">.</operator><name pos:start="6163:20" pos:end="6163:27">l_whence</name></name> <operator pos:start="6163:29" pos:end="6163:29">=</operator> <call pos:start="6163:31" pos:end="6163:58"><name pos:start="6163:31" pos:end="6163:37">tswap16</name><argument_list pos:start="6163:38" pos:end="6163:58">(<argument pos:start="6163:39" pos:end="6163:57"><expr pos:start="6163:39" pos:end="6163:57"><name pos:start="6163:39" pos:end="6163:57"><name pos:start="6163:39" pos:end="6163:47">target_fl</name><operator pos:start="6163:48" pos:end="6163:49">-&gt;</operator><name pos:start="6163:50" pos:end="6163:57">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6165:17" pos:end="6165:57"><expr pos:start="6165:17" pos:end="6165:56"><name pos:start="6165:17" pos:end="6165:26"><name pos:start="6165:17" pos:end="6165:18">fl</name><operator pos:start="6165:19" pos:end="6165:19">.</operator><name pos:start="6165:20" pos:end="6165:26">l_start</name></name> <operator pos:start="6165:28" pos:end="6165:28">=</operator> <call pos:start="6165:30" pos:end="6165:56"><name pos:start="6165:30" pos:end="6165:36">tswap64</name><argument_list pos:start="6165:37" pos:end="6165:56">(<argument pos:start="6165:38" pos:end="6165:55"><expr pos:start="6165:38" pos:end="6165:55"><name pos:start="6165:38" pos:end="6165:55"><name pos:start="6165:38" pos:end="6165:46">target_fl</name><operator pos:start="6165:47" pos:end="6165:48">-&gt;</operator><name pos:start="6165:49" pos:end="6165:55">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6167:17" pos:end="6167:53"><expr pos:start="6167:17" pos:end="6167:52"><name pos:start="6167:17" pos:end="6167:24"><name pos:start="6167:17" pos:end="6167:18">fl</name><operator pos:start="6167:19" pos:end="6167:19">.</operator><name pos:start="6167:20" pos:end="6167:24">l_len</name></name> <operator pos:start="6167:26" pos:end="6167:26">=</operator> <call pos:start="6167:28" pos:end="6167:52"><name pos:start="6167:28" pos:end="6167:34">tswap64</name><argument_list pos:start="6167:35" pos:end="6167:52">(<argument pos:start="6167:36" pos:end="6167:51"><expr pos:start="6167:36" pos:end="6167:51"><name pos:start="6167:36" pos:end="6167:51"><name pos:start="6167:36" pos:end="6167:44">target_fl</name><operator pos:start="6167:45" pos:end="6167:46">-&gt;</operator><name pos:start="6167:47" pos:end="6167:51">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6169:17" pos:end="6169:53"><expr pos:start="6169:17" pos:end="6169:52"><name pos:start="6169:17" pos:end="6169:24"><name pos:start="6169:17" pos:end="6169:18">fl</name><operator pos:start="6169:19" pos:end="6169:19">.</operator><name pos:start="6169:20" pos:end="6169:24">l_pid</name></name> <operator pos:start="6169:26" pos:end="6169:26">=</operator> <call pos:start="6169:28" pos:end="6169:52"><name pos:start="6169:28" pos:end="6169:34">tswap32</name><argument_list pos:start="6169:35" pos:end="6169:52">(<argument pos:start="6169:36" pos:end="6169:51"><expr pos:start="6169:36" pos:end="6169:51"><name pos:start="6169:36" pos:end="6169:51"><name pos:start="6169:36" pos:end="6169:44">target_fl</name><operator pos:start="6169:45" pos:end="6169:46">-&gt;</operator><name pos:start="6169:47" pos:end="6169:51">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6171:17" pos:end="6171:55"><expr pos:start="6171:17" pos:end="6171:54"><call pos:start="6171:17" pos:end="6171:54"><name pos:start="6171:17" pos:end="6171:34">unlock_user_struct</name><argument_list pos:start="6171:35" pos:end="6171:54">(<argument pos:start="6171:36" pos:end="6171:44"><expr pos:start="6171:36" pos:end="6171:44"><name pos:start="6171:36" pos:end="6171:44">target_fl</name></expr></argument>, <argument pos:start="6171:47" pos:end="6171:50"><expr pos:start="6171:47" pos:end="6171:50"><name pos:start="6171:47" pos:end="6171:50">arg3</name></expr></argument>, <argument pos:start="6171:53" pos:end="6171:53"><expr pos:start="6171:53" pos:end="6171:53"><literal type="number" pos:start="6171:53" pos:end="6171:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6175:13" pos:end="6175:51"><expr pos:start="6175:13" pos:end="6175:50"><name pos:start="6175:13" pos:end="6175:15">ret</name> <operator pos:start="6175:17" pos:end="6175:17">=</operator> <call pos:start="6175:19" pos:end="6175:50"><name pos:start="6175:19" pos:end="6175:27">get_errno</name><argument_list pos:start="6175:28" pos:end="6175:50">(<argument pos:start="6175:29" pos:end="6175:49"><expr pos:start="6175:29" pos:end="6175:49"><call pos:start="6175:29" pos:end="6175:49"><name pos:start="6175:29" pos:end="6175:33">fcntl</name><argument_list pos:start="6175:34" pos:end="6175:49">(<argument pos:start="6175:35" pos:end="6175:38"><expr pos:start="6175:35" pos:end="6175:38"><name pos:start="6175:35" pos:end="6175:38">arg1</name></expr></argument>, <argument pos:start="6175:41" pos:end="6175:43"><expr pos:start="6175:41" pos:end="6175:43"><name pos:start="6175:41" pos:end="6175:43">cmd</name></expr></argument>, <argument pos:start="6175:46" pos:end="6175:48"><expr pos:start="6175:46" pos:end="6175:48"><operator pos:start="6175:46" pos:end="6175:46">&amp;</operator><name pos:start="6175:47" pos:end="6175:48">fl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="6177:13" pos:end="6177:18">break;</break>

        <default pos:start="6179:9" pos:end="6179:16">default:</default>

            <expr_stmt pos:start="6181:13" pos:end="6181:45"><expr pos:start="6181:13" pos:end="6181:44"><name pos:start="6181:13" pos:end="6181:15">ret</name> <operator pos:start="6181:17" pos:end="6181:17">=</operator> <call pos:start="6181:19" pos:end="6181:44"><name pos:start="6181:19" pos:end="6181:26">do_fcntl</name><argument_list pos:start="6181:27" pos:end="6181:44">(<argument pos:start="6181:28" pos:end="6181:31"><expr pos:start="6181:28" pos:end="6181:31"><name pos:start="6181:28" pos:end="6181:31">arg1</name></expr></argument>, <argument pos:start="6181:34" pos:end="6181:37"><expr pos:start="6181:34" pos:end="6181:37"><name pos:start="6181:34" pos:end="6181:37">arg2</name></expr></argument>, <argument pos:start="6181:40" pos:end="6181:43"><expr pos:start="6181:40" pos:end="6181:43"><name pos:start="6181:40" pos:end="6181:43">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6183:13" pos:end="6183:18">break;</break>

        </block_content>}</block></switch>

	<break pos:start="6187:9" pos:end="6187:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="6191:1" pos:end="6191:6">#<cpp:directive pos:start="6191:2" pos:end="6191:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6193:1" pos:end="6193:27">#<cpp:directive pos:start="6193:2" pos:end="6193:6">ifdef</cpp:directive> <name pos:start="6193:8" pos:end="6193:27">TARGET_NR_cacheflush</name></cpp:ifdef>

    <case pos:start="6195:5" pos:end="6195:30">case <expr pos:start="6195:10" pos:end="6195:29"><name pos:start="6195:10" pos:end="6195:29">TARGET_NR_cacheflush</name></expr>:</case>

        <comment type="block" pos:start="6197:9" pos:end="6197:77">/* self-modifying code is handled automatically, so nothing needed */</comment>

        <expr_stmt pos:start="6199:9" pos:end="6199:16"><expr pos:start="6199:9" pos:end="6199:15"><name pos:start="6199:9" pos:end="6199:11">ret</name> <operator pos:start="6199:13" pos:end="6199:13">=</operator> <literal type="number" pos:start="6199:15" pos:end="6199:15">0</literal></expr>;</expr_stmt>

        <break pos:start="6201:9" pos:end="6206:0">break;</break>

<cpp:endif pos:start="6203:1" pos:end="6203:6">#<cpp:directive pos:start="6203:2" pos:end="6203:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6205:1" pos:end="6205:25">#<cpp:directive pos:start="6205:2" pos:end="6205:6">ifdef</cpp:directive> <name pos:start="6205:8" pos:end="6205:25">TARGET_NR_security</name></cpp:ifdef>

    <case pos:start="6207:5" pos:end="6207:28">case <expr pos:start="6207:10" pos:end="6207:27"><name pos:start="6207:10" pos:end="6207:27">TARGET_NR_security</name></expr>:</case>

        <goto pos:start="6209:9" pos:end="6214:0">goto <name pos:start="6209:14" pos:end="6209:26">unimplemented</name>;</goto>

<cpp:endif pos:start="6211:1" pos:end="6211:6">#<cpp:directive pos:start="6211:2" pos:end="6211:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6213:1" pos:end="6213:28">#<cpp:directive pos:start="6213:2" pos:end="6213:6">ifdef</cpp:directive> <name pos:start="6213:8" pos:end="6213:28">TARGET_NR_getpagesize</name></cpp:ifdef>

    <case pos:start="6215:5" pos:end="6215:31">case <expr pos:start="6215:10" pos:end="6215:30"><name pos:start="6215:10" pos:end="6215:30">TARGET_NR_getpagesize</name></expr>:</case>

        <expr_stmt pos:start="6217:9" pos:end="6217:31"><expr pos:start="6217:9" pos:end="6217:30"><name pos:start="6217:9" pos:end="6217:11">ret</name> <operator pos:start="6217:13" pos:end="6217:13">=</operator> <name pos:start="6217:15" pos:end="6217:30">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

        <break pos:start="6219:9" pos:end="6222:0">break;</break>

<cpp:endif pos:start="6221:1" pos:end="6221:6">#<cpp:directive pos:start="6221:2" pos:end="6221:6">endif</cpp:directive></cpp:endif>

    <case pos:start="6223:5" pos:end="6223:26">case <expr pos:start="6223:10" pos:end="6223:25"><name pos:start="6223:10" pos:end="6223:25">TARGET_NR_gettid</name></expr>:</case>

        <expr_stmt pos:start="6225:9" pos:end="6225:34"><expr pos:start="6225:9" pos:end="6225:33"><name pos:start="6225:9" pos:end="6225:11">ret</name> <operator pos:start="6225:13" pos:end="6225:13">=</operator> <call pos:start="6225:15" pos:end="6225:33"><name pos:start="6225:15" pos:end="6225:23">get_errno</name><argument_list pos:start="6225:24" pos:end="6225:33">(<argument pos:start="6225:25" pos:end="6225:32"><expr pos:start="6225:25" pos:end="6225:32"><call pos:start="6225:25" pos:end="6225:32"><name pos:start="6225:25" pos:end="6225:30">gettid</name><argument_list pos:start="6225:31" pos:end="6225:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6227:9" pos:end="6230:0">break;</break>

<cpp:ifdef pos:start="6229:1" pos:end="6229:26">#<cpp:directive pos:start="6229:2" pos:end="6229:6">ifdef</cpp:directive> <name pos:start="6229:8" pos:end="6229:26">TARGET_NR_readahead</name></cpp:ifdef>

    <case pos:start="6231:5" pos:end="6234:0">case <expr pos:start="6231:10" pos:end="6231:28"><name pos:start="6231:10" pos:end="6231:28">TARGET_NR_readahead</name></expr>:</case>

<cpp:if pos:start="6233:1" pos:end="6233:25">#<cpp:directive pos:start="6233:2" pos:end="6233:3">if</cpp:directive> <expr pos:start="6233:5" pos:end="6233:25"><name pos:start="6233:5" pos:end="6233:19">TARGET_ABI_BITS</name> <operator pos:start="6233:21" pos:end="6233:22">==</operator> <literal type="number" pos:start="6233:24" pos:end="6233:25">32</literal></expr></cpp:if>

        <if_stmt pos:start="6235:9" pos:end="6243:9"><if pos:start="6235:9" pos:end="6243:9">if <condition pos:start="6235:12" pos:end="6235:38">(<expr pos:start="6235:13" pos:end="6235:37"><call pos:start="6235:13" pos:end="6235:37"><name pos:start="6235:13" pos:end="6235:28">regpairs_aligned</name><argument_list pos:start="6235:29" pos:end="6235:37">(<argument pos:start="6235:30" pos:end="6235:36"><expr pos:start="6235:30" pos:end="6235:36"><name pos:start="6235:30" pos:end="6235:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6235:40" pos:end="6243:9">{<block_content pos:start="6237:13" pos:end="6241:24">

            <expr_stmt pos:start="6237:13" pos:end="6237:24"><expr pos:start="6237:13" pos:end="6237:23"><name pos:start="6237:13" pos:end="6237:16">arg2</name> <operator pos:start="6237:18" pos:end="6237:18">=</operator> <name pos:start="6237:20" pos:end="6237:23">arg3</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6239:13" pos:end="6239:24"><expr pos:start="6239:13" pos:end="6239:23"><name pos:start="6239:13" pos:end="6239:16">arg3</name> <operator pos:start="6239:18" pos:end="6239:18">=</operator> <name pos:start="6239:20" pos:end="6239:23">arg4</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6241:13" pos:end="6241:24"><expr pos:start="6241:13" pos:end="6241:23"><name pos:start="6241:13" pos:end="6241:16">arg4</name> <operator pos:start="6241:18" pos:end="6241:18">=</operator> <name pos:start="6241:20" pos:end="6241:23">arg5</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="6245:9" pos:end="6248:0"><expr pos:start="6245:9" pos:end="6245:76"><name pos:start="6245:9" pos:end="6245:11">ret</name> <operator pos:start="6245:13" pos:end="6245:13">=</operator> <call pos:start="6245:15" pos:end="6245:76"><name pos:start="6245:15" pos:end="6245:23">get_errno</name><argument_list pos:start="6245:24" pos:end="6245:76">(<argument pos:start="6245:25" pos:end="6245:75"><expr pos:start="6245:25" pos:end="6245:75"><call pos:start="6245:25" pos:end="6245:75"><name pos:start="6245:25" pos:end="6245:33">readahead</name><argument_list pos:start="6245:34" pos:end="6245:75">(<argument pos:start="6245:35" pos:end="6245:38"><expr pos:start="6245:35" pos:end="6245:38"><name pos:start="6245:35" pos:end="6245:38">arg1</name></expr></argument>, <argument pos:start="6245:41" pos:end="6245:68"><expr pos:start="6245:41" pos:end="6245:68"><operator pos:start="6245:41" pos:end="6245:41">(</operator><operator pos:start="6245:42" pos:end="6245:42">(</operator><name pos:start="6245:43" pos:end="6245:49">off64_t</name><operator pos:start="6245:50" pos:end="6245:50">)</operator><name pos:start="6245:51" pos:end="6245:54">arg3</name> <operator pos:start="6245:56" pos:end="6245:57">&lt;&lt;</operator> <literal type="number" pos:start="6245:59" pos:end="6245:60">32</literal><operator pos:start="6245:61" pos:end="6245:61">)</operator> <operator pos:start="6245:63" pos:end="6245:63">|</operator> <name pos:start="6245:65" pos:end="6245:68">arg2</name></expr></argument>, <argument pos:start="6245:71" pos:end="6245:74"><expr pos:start="6245:71" pos:end="6245:74"><name pos:start="6245:71" pos:end="6245:74">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="6247:1" pos:end="6247:5">#<cpp:directive pos:start="6247:2" pos:end="6247:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="6249:9" pos:end="6252:0"><expr pos:start="6249:9" pos:end="6249:52"><name pos:start="6249:9" pos:end="6249:11">ret</name> <operator pos:start="6249:13" pos:end="6249:13">=</operator> <call pos:start="6249:15" pos:end="6249:52"><name pos:start="6249:15" pos:end="6249:23">get_errno</name><argument_list pos:start="6249:24" pos:end="6249:52">(<argument pos:start="6249:25" pos:end="6249:51"><expr pos:start="6249:25" pos:end="6249:51"><call pos:start="6249:25" pos:end="6249:51"><name pos:start="6249:25" pos:end="6249:33">readahead</name><argument_list pos:start="6249:34" pos:end="6249:51">(<argument pos:start="6249:35" pos:end="6249:38"><expr pos:start="6249:35" pos:end="6249:38"><name pos:start="6249:35" pos:end="6249:38">arg1</name></expr></argument>, <argument pos:start="6249:41" pos:end="6249:44"><expr pos:start="6249:41" pos:end="6249:44"><name pos:start="6249:41" pos:end="6249:44">arg2</name></expr></argument>, <argument pos:start="6249:47" pos:end="6249:50"><expr pos:start="6249:47" pos:end="6249:50"><name pos:start="6249:47" pos:end="6249:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="6251:1" pos:end="6251:6">#<cpp:directive pos:start="6251:2" pos:end="6251:6">endif</cpp:directive></cpp:endif>

        <break pos:start="6253:9" pos:end="6260:0">break;</break>

<cpp:endif pos:start="6255:1" pos:end="6255:6">#<cpp:directive pos:start="6255:2" pos:end="6255:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6257:1" pos:end="6257:18">#<cpp:directive pos:start="6257:2" pos:end="6257:6">ifdef</cpp:directive> <name pos:start="6257:8" pos:end="6257:18">CONFIG_ATTR</name></cpp:ifdef>

<cpp:ifdef pos:start="6259:1" pos:end="6259:25">#<cpp:directive pos:start="6259:2" pos:end="6259:6">ifdef</cpp:directive> <name pos:start="6259:8" pos:end="6259:25">TARGET_NR_setxattr</name></cpp:ifdef>

    <case pos:start="6261:5" pos:end="6261:29">case <expr pos:start="6261:10" pos:end="6261:28"><name pos:start="6261:10" pos:end="6261:28">TARGET_NR_listxattr</name></expr>:</case>

    <case pos:start="6263:5" pos:end="6263:30">case <expr pos:start="6263:10" pos:end="6263:29"><name pos:start="6263:10" pos:end="6263:29">TARGET_NR_llistxattr</name></expr>:</case>

    <block pos:start="6265:5" pos:end="6309:5">{<block_content pos:start="6267:9" pos:end="6307:14">

        <decl_stmt pos:start="6267:9" pos:end="6267:24"><decl pos:start="6267:9" pos:end="6267:15"><type pos:start="6267:9" pos:end="6267:14"><name pos:start="6267:9" pos:end="6267:12">void</name> <modifier pos:start="6267:14" pos:end="6267:14">*</modifier></type><name pos:start="6267:15" pos:end="6267:15">p</name></decl>, <decl pos:start="6267:18" pos:end="6267:23"><type ref="prev" pos:start="6267:9" pos:end="6267:14"><modifier pos:start="6267:18" pos:end="6267:18">*</modifier></type><name pos:start="6267:19" pos:end="6267:19">b</name> <init pos:start="6267:21" pos:end="6267:23">= <expr pos:start="6267:23" pos:end="6267:23"><literal type="number" pos:start="6267:23" pos:end="6267:23">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="6269:9" pos:end="6281:9"><if pos:start="6269:9" pos:end="6281:9">if <condition pos:start="6269:12" pos:end="6269:17">(<expr pos:start="6269:13" pos:end="6269:16"><name pos:start="6269:13" pos:end="6269:16">arg2</name></expr>)</condition> <block pos:start="6269:19" pos:end="6281:9">{<block_content pos:start="6271:13" pos:end="6279:13">

            <expr_stmt pos:start="6271:13" pos:end="6271:55"><expr pos:start="6271:13" pos:end="6271:54"><name pos:start="6271:13" pos:end="6271:13">b</name> <operator pos:start="6271:15" pos:end="6271:15">=</operator> <call pos:start="6271:17" pos:end="6271:54"><name pos:start="6271:17" pos:end="6271:25">lock_user</name><argument_list pos:start="6271:26" pos:end="6271:54">(<argument pos:start="6271:27" pos:end="6271:38"><expr pos:start="6271:27" pos:end="6271:38"><name pos:start="6271:27" pos:end="6271:38">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6271:41" pos:end="6271:44"><expr pos:start="6271:41" pos:end="6271:44"><name pos:start="6271:41" pos:end="6271:44">arg2</name></expr></argument>, <argument pos:start="6271:47" pos:end="6271:50"><expr pos:start="6271:47" pos:end="6271:50"><name pos:start="6271:47" pos:end="6271:50">arg3</name></expr></argument>, <argument pos:start="6271:53" pos:end="6271:53"><expr pos:start="6271:53" pos:end="6271:53"><literal type="number" pos:start="6271:53" pos:end="6271:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6273:13" pos:end="6279:13"><if pos:start="6273:13" pos:end="6279:13">if <condition pos:start="6273:16" pos:end="6273:19">(<expr pos:start="6273:17" pos:end="6273:18"><operator pos:start="6273:17" pos:end="6273:17">!</operator><name pos:start="6273:18" pos:end="6273:18">b</name></expr>)</condition> <block pos:start="6273:21" pos:end="6279:13">{<block_content pos:start="6275:17" pos:end="6277:22">

                <expr_stmt pos:start="6275:17" pos:end="6275:37"><expr pos:start="6275:17" pos:end="6275:36"><name pos:start="6275:17" pos:end="6275:19">ret</name> <operator pos:start="6275:21" pos:end="6275:21">=</operator> <operator pos:start="6275:23" pos:end="6275:23">-</operator><name pos:start="6275:24" pos:end="6275:36">TARGET_EFAULT</name></expr>;</expr_stmt>

                <break pos:start="6277:17" pos:end="6277:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="6283:9" pos:end="6283:35"><expr pos:start="6283:9" pos:end="6283:34"><name pos:start="6283:9" pos:end="6283:9">p</name> <operator pos:start="6283:11" pos:end="6283:11">=</operator> <call pos:start="6283:13" pos:end="6283:34"><name pos:start="6283:13" pos:end="6283:28">lock_user_string</name><argument_list pos:start="6283:29" pos:end="6283:34">(<argument pos:start="6283:30" pos:end="6283:33"><expr pos:start="6283:30" pos:end="6283:33"><name pos:start="6283:30" pos:end="6283:33">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6285:9" pos:end="6301:9"><if pos:start="6285:9" pos:end="6297:9">if <condition pos:start="6285:12" pos:end="6285:14">(<expr pos:start="6285:13" pos:end="6285:13"><name pos:start="6285:13" pos:end="6285:13">p</name></expr>)</condition> <block pos:start="6285:16" pos:end="6297:9">{<block_content pos:start="6287:13" pos:end="6295:13">

            <if_stmt pos:start="6287:13" pos:end="6295:13"><if pos:start="6287:13" pos:end="6291:13">if <condition pos:start="6287:16" pos:end="6287:43">(<expr pos:start="6287:17" pos:end="6287:42"><name pos:start="6287:17" pos:end="6287:19">num</name> <operator pos:start="6287:21" pos:end="6287:22">==</operator> <name pos:start="6287:24" pos:end="6287:42">TARGET_NR_listxattr</name></expr>)</condition> <block pos:start="6287:45" pos:end="6291:13">{<block_content pos:start="6289:17" pos:end="6289:55">

                <expr_stmt pos:start="6289:17" pos:end="6289:55"><expr pos:start="6289:17" pos:end="6289:54"><name pos:start="6289:17" pos:end="6289:19">ret</name> <operator pos:start="6289:21" pos:end="6289:21">=</operator> <call pos:start="6289:23" pos:end="6289:54"><name pos:start="6289:23" pos:end="6289:31">get_errno</name><argument_list pos:start="6289:32" pos:end="6289:54">(<argument pos:start="6289:33" pos:end="6289:53"><expr pos:start="6289:33" pos:end="6289:53"><call pos:start="6289:33" pos:end="6289:53"><name pos:start="6289:33" pos:end="6289:41">listxattr</name><argument_list pos:start="6289:42" pos:end="6289:53">(<argument pos:start="6289:43" pos:end="6289:43"><expr pos:start="6289:43" pos:end="6289:43"><name pos:start="6289:43" pos:end="6289:43">p</name></expr></argument>, <argument pos:start="6289:46" pos:end="6289:46"><expr pos:start="6289:46" pos:end="6289:46"><name pos:start="6289:46" pos:end="6289:46">b</name></expr></argument>, <argument pos:start="6289:49" pos:end="6289:52"><expr pos:start="6289:49" pos:end="6289:52"><name pos:start="6289:49" pos:end="6289:52">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6291:15" pos:end="6295:13">else <block pos:start="6291:20" pos:end="6295:13">{<block_content pos:start="6293:17" pos:end="6293:56">

                <expr_stmt pos:start="6293:17" pos:end="6293:56"><expr pos:start="6293:17" pos:end="6293:55"><name pos:start="6293:17" pos:end="6293:19">ret</name> <operator pos:start="6293:21" pos:end="6293:21">=</operator> <call pos:start="6293:23" pos:end="6293:55"><name pos:start="6293:23" pos:end="6293:31">get_errno</name><argument_list pos:start="6293:32" pos:end="6293:55">(<argument pos:start="6293:33" pos:end="6293:54"><expr pos:start="6293:33" pos:end="6293:54"><call pos:start="6293:33" pos:end="6293:54"><name pos:start="6293:33" pos:end="6293:42">llistxattr</name><argument_list pos:start="6293:43" pos:end="6293:54">(<argument pos:start="6293:44" pos:end="6293:44"><expr pos:start="6293:44" pos:end="6293:44"><name pos:start="6293:44" pos:end="6293:44">p</name></expr></argument>, <argument pos:start="6293:47" pos:end="6293:47"><expr pos:start="6293:47" pos:end="6293:47"><name pos:start="6293:47" pos:end="6293:47">b</name></expr></argument>, <argument pos:start="6293:50" pos:end="6293:53"><expr pos:start="6293:50" pos:end="6293:53"><name pos:start="6293:50" pos:end="6293:53">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="6297:11" pos:end="6301:9">else <block pos:start="6297:16" pos:end="6301:9">{<block_content pos:start="6299:13" pos:end="6299:33">

            <expr_stmt pos:start="6299:13" pos:end="6299:33"><expr pos:start="6299:13" pos:end="6299:32"><name pos:start="6299:13" pos:end="6299:15">ret</name> <operator pos:start="6299:17" pos:end="6299:17">=</operator> <operator pos:start="6299:19" pos:end="6299:19">-</operator><name pos:start="6299:20" pos:end="6299:32">TARGET_EFAULT</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="6303:9" pos:end="6303:32"><expr pos:start="6303:9" pos:end="6303:31"><call pos:start="6303:9" pos:end="6303:31"><name pos:start="6303:9" pos:end="6303:19">unlock_user</name><argument_list pos:start="6303:20" pos:end="6303:31">(<argument pos:start="6303:21" pos:end="6303:21"><expr pos:start="6303:21" pos:end="6303:21"><name pos:start="6303:21" pos:end="6303:21">p</name></expr></argument>, <argument pos:start="6303:24" pos:end="6303:27"><expr pos:start="6303:24" pos:end="6303:27"><name pos:start="6303:24" pos:end="6303:27">arg1</name></expr></argument>, <argument pos:start="6303:30" pos:end="6303:30"><expr pos:start="6303:30" pos:end="6303:30"><literal type="number" pos:start="6303:30" pos:end="6303:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6305:9" pos:end="6305:35"><expr pos:start="6305:9" pos:end="6305:34"><call pos:start="6305:9" pos:end="6305:34"><name pos:start="6305:9" pos:end="6305:19">unlock_user</name><argument_list pos:start="6305:20" pos:end="6305:34">(<argument pos:start="6305:21" pos:end="6305:21"><expr pos:start="6305:21" pos:end="6305:21"><name pos:start="6305:21" pos:end="6305:21">b</name></expr></argument>, <argument pos:start="6305:24" pos:end="6305:27"><expr pos:start="6305:24" pos:end="6305:27"><name pos:start="6305:24" pos:end="6305:27">arg2</name></expr></argument>, <argument pos:start="6305:30" pos:end="6305:33"><expr pos:start="6305:30" pos:end="6305:33"><name pos:start="6305:30" pos:end="6305:33">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6307:9" pos:end="6307:14">break;</break>

    </block_content>}</block>

    <case pos:start="6311:5" pos:end="6311:30">case <expr pos:start="6311:10" pos:end="6311:29"><name pos:start="6311:10" pos:end="6311:29">TARGET_NR_flistxattr</name></expr>:</case>

    <block pos:start="6313:5" pos:end="6337:5">{<block_content pos:start="6315:9" pos:end="6335:14">

        <decl_stmt pos:start="6315:9" pos:end="6315:20"><decl pos:start="6315:9" pos:end="6315:19"><type pos:start="6315:9" pos:end="6315:14"><name pos:start="6315:9" pos:end="6315:12">void</name> <modifier pos:start="6315:14" pos:end="6315:14">*</modifier></type><name pos:start="6315:15" pos:end="6315:15">b</name> <init pos:start="6315:17" pos:end="6315:19">= <expr pos:start="6315:19" pos:end="6315:19"><literal type="number" pos:start="6315:19" pos:end="6315:19">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="6317:9" pos:end="6329:9"><if pos:start="6317:9" pos:end="6329:9">if <condition pos:start="6317:12" pos:end="6317:17">(<expr pos:start="6317:13" pos:end="6317:16"><name pos:start="6317:13" pos:end="6317:16">arg2</name></expr>)</condition> <block pos:start="6317:19" pos:end="6329:9">{<block_content pos:start="6319:13" pos:end="6327:13">

            <expr_stmt pos:start="6319:13" pos:end="6319:55"><expr pos:start="6319:13" pos:end="6319:54"><name pos:start="6319:13" pos:end="6319:13">b</name> <operator pos:start="6319:15" pos:end="6319:15">=</operator> <call pos:start="6319:17" pos:end="6319:54"><name pos:start="6319:17" pos:end="6319:25">lock_user</name><argument_list pos:start="6319:26" pos:end="6319:54">(<argument pos:start="6319:27" pos:end="6319:38"><expr pos:start="6319:27" pos:end="6319:38"><name pos:start="6319:27" pos:end="6319:38">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6319:41" pos:end="6319:44"><expr pos:start="6319:41" pos:end="6319:44"><name pos:start="6319:41" pos:end="6319:44">arg2</name></expr></argument>, <argument pos:start="6319:47" pos:end="6319:50"><expr pos:start="6319:47" pos:end="6319:50"><name pos:start="6319:47" pos:end="6319:50">arg3</name></expr></argument>, <argument pos:start="6319:53" pos:end="6319:53"><expr pos:start="6319:53" pos:end="6319:53"><literal type="number" pos:start="6319:53" pos:end="6319:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6321:13" pos:end="6327:13"><if pos:start="6321:13" pos:end="6327:13">if <condition pos:start="6321:16" pos:end="6321:19">(<expr pos:start="6321:17" pos:end="6321:18"><operator pos:start="6321:17" pos:end="6321:17">!</operator><name pos:start="6321:18" pos:end="6321:18">b</name></expr>)</condition> <block pos:start="6321:21" pos:end="6327:13">{<block_content pos:start="6323:17" pos:end="6325:22">

                <expr_stmt pos:start="6323:17" pos:end="6323:37"><expr pos:start="6323:17" pos:end="6323:36"><name pos:start="6323:17" pos:end="6323:19">ret</name> <operator pos:start="6323:21" pos:end="6323:21">=</operator> <operator pos:start="6323:23" pos:end="6323:23">-</operator><name pos:start="6323:24" pos:end="6323:36">TARGET_EFAULT</name></expr>;</expr_stmt>

                <break pos:start="6325:17" pos:end="6325:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="6331:9" pos:end="6331:51"><expr pos:start="6331:9" pos:end="6331:50"><name pos:start="6331:9" pos:end="6331:11">ret</name> <operator pos:start="6331:13" pos:end="6331:13">=</operator> <call pos:start="6331:15" pos:end="6331:50"><name pos:start="6331:15" pos:end="6331:23">get_errno</name><argument_list pos:start="6331:24" pos:end="6331:50">(<argument pos:start="6331:25" pos:end="6331:49"><expr pos:start="6331:25" pos:end="6331:49"><call pos:start="6331:25" pos:end="6331:49"><name pos:start="6331:25" pos:end="6331:34">flistxattr</name><argument_list pos:start="6331:35" pos:end="6331:49">(<argument pos:start="6331:36" pos:end="6331:39"><expr pos:start="6331:36" pos:end="6331:39"><name pos:start="6331:36" pos:end="6331:39">arg1</name></expr></argument>, <argument pos:start="6331:42" pos:end="6331:42"><expr pos:start="6331:42" pos:end="6331:42"><name pos:start="6331:42" pos:end="6331:42">b</name></expr></argument>, <argument pos:start="6331:45" pos:end="6331:48"><expr pos:start="6331:45" pos:end="6331:48"><name pos:start="6331:45" pos:end="6331:48">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6333:9" pos:end="6333:35"><expr pos:start="6333:9" pos:end="6333:34"><call pos:start="6333:9" pos:end="6333:34"><name pos:start="6333:9" pos:end="6333:19">unlock_user</name><argument_list pos:start="6333:20" pos:end="6333:34">(<argument pos:start="6333:21" pos:end="6333:21"><expr pos:start="6333:21" pos:end="6333:21"><name pos:start="6333:21" pos:end="6333:21">b</name></expr></argument>, <argument pos:start="6333:24" pos:end="6333:27"><expr pos:start="6333:24" pos:end="6333:27"><name pos:start="6333:24" pos:end="6333:27">arg2</name></expr></argument>, <argument pos:start="6333:30" pos:end="6333:33"><expr pos:start="6333:30" pos:end="6333:33"><name pos:start="6333:30" pos:end="6333:33">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6335:9" pos:end="6335:14">break;</break>

    </block_content>}</block>

    <case pos:start="6339:5" pos:end="6339:28">case <expr pos:start="6339:10" pos:end="6339:27"><name pos:start="6339:10" pos:end="6339:27">TARGET_NR_setxattr</name></expr>:</case>

    <case pos:start="6341:5" pos:end="6341:29">case <expr pos:start="6341:10" pos:end="6341:28"><name pos:start="6341:10" pos:end="6341:28">TARGET_NR_lsetxattr</name></expr>:</case>

        <block pos:start="6343:9" pos:end="6389:9">{<block_content pos:start="6345:13" pos:end="6387:36">

            <decl_stmt pos:start="6345:13" pos:end="6345:32"><decl pos:start="6345:13" pos:end="6345:19"><type pos:start="6345:13" pos:end="6345:18"><name pos:start="6345:13" pos:end="6345:16">void</name> <modifier pos:start="6345:18" pos:end="6345:18">*</modifier></type><name pos:start="6345:19" pos:end="6345:19">p</name></decl>, <decl pos:start="6345:22" pos:end="6345:23"><type ref="prev" pos:start="6345:13" pos:end="6345:18"><modifier pos:start="6345:22" pos:end="6345:22">*</modifier></type><name pos:start="6345:23" pos:end="6345:23">n</name></decl>, <decl pos:start="6345:26" pos:end="6345:31"><type ref="prev" pos:start="6345:13" pos:end="6345:18"><modifier pos:start="6345:26" pos:end="6345:26">*</modifier></type><name pos:start="6345:27" pos:end="6345:27">v</name> <init pos:start="6345:29" pos:end="6345:31">= <expr pos:start="6345:31" pos:end="6345:31"><literal type="number" pos:start="6345:31" pos:end="6345:31">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="6347:13" pos:end="6359:13"><if pos:start="6347:13" pos:end="6359:13">if <condition pos:start="6347:16" pos:end="6347:21">(<expr pos:start="6347:17" pos:end="6347:20"><name pos:start="6347:17" pos:end="6347:20">arg3</name></expr>)</condition> <block pos:start="6347:23" pos:end="6359:13">{<block_content pos:start="6349:17" pos:end="6357:17">

                <expr_stmt pos:start="6349:17" pos:end="6349:58"><expr pos:start="6349:17" pos:end="6349:57"><name pos:start="6349:17" pos:end="6349:17">v</name> <operator pos:start="6349:19" pos:end="6349:19">=</operator> <call pos:start="6349:21" pos:end="6349:57"><name pos:start="6349:21" pos:end="6349:29">lock_user</name><argument_list pos:start="6349:30" pos:end="6349:57">(<argument pos:start="6349:31" pos:end="6349:41"><expr pos:start="6349:31" pos:end="6349:41"><name pos:start="6349:31" pos:end="6349:41">VERIFY_READ</name></expr></argument>, <argument pos:start="6349:44" pos:end="6349:47"><expr pos:start="6349:44" pos:end="6349:47"><name pos:start="6349:44" pos:end="6349:47">arg3</name></expr></argument>, <argument pos:start="6349:50" pos:end="6349:53"><expr pos:start="6349:50" pos:end="6349:53"><name pos:start="6349:50" pos:end="6349:53">arg4</name></expr></argument>, <argument pos:start="6349:56" pos:end="6349:56"><expr pos:start="6349:56" pos:end="6349:56"><literal type="number" pos:start="6349:56" pos:end="6349:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6351:17" pos:end="6357:17"><if pos:start="6351:17" pos:end="6357:17">if <condition pos:start="6351:20" pos:end="6351:23">(<expr pos:start="6351:21" pos:end="6351:22"><operator pos:start="6351:21" pos:end="6351:21">!</operator><name pos:start="6351:22" pos:end="6351:22">v</name></expr>)</condition> <block pos:start="6351:25" pos:end="6357:17">{<block_content pos:start="6353:21" pos:end="6355:26">

                    <expr_stmt pos:start="6353:21" pos:end="6353:41"><expr pos:start="6353:21" pos:end="6353:40"><name pos:start="6353:21" pos:end="6353:23">ret</name> <operator pos:start="6353:25" pos:end="6353:25">=</operator> <operator pos:start="6353:27" pos:end="6353:27">-</operator><name pos:start="6353:28" pos:end="6353:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <break pos:start="6355:21" pos:end="6355:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6361:13" pos:end="6361:39"><expr pos:start="6361:13" pos:end="6361:38"><name pos:start="6361:13" pos:end="6361:13">p</name> <operator pos:start="6361:15" pos:end="6361:15">=</operator> <call pos:start="6361:17" pos:end="6361:38"><name pos:start="6361:17" pos:end="6361:32">lock_user_string</name><argument_list pos:start="6361:33" pos:end="6361:38">(<argument pos:start="6361:34" pos:end="6361:37"><expr pos:start="6361:34" pos:end="6361:37"><name pos:start="6361:34" pos:end="6361:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6363:13" pos:end="6363:39"><expr pos:start="6363:13" pos:end="6363:38"><name pos:start="6363:13" pos:end="6363:13">n</name> <operator pos:start="6363:15" pos:end="6363:15">=</operator> <call pos:start="6363:17" pos:end="6363:38"><name pos:start="6363:17" pos:end="6363:32">lock_user_string</name><argument_list pos:start="6363:33" pos:end="6363:38">(<argument pos:start="6363:34" pos:end="6363:37"><expr pos:start="6363:34" pos:end="6363:37"><name pos:start="6363:34" pos:end="6363:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6365:13" pos:end="6381:13"><if pos:start="6365:13" pos:end="6377:13">if <condition pos:start="6365:16" pos:end="6365:23">(<expr pos:start="6365:17" pos:end="6365:22"><name pos:start="6365:17" pos:end="6365:17">p</name> <operator pos:start="6365:19" pos:end="6365:20">&amp;&amp;</operator> <name pos:start="6365:22" pos:end="6365:22">n</name></expr>)</condition> <block pos:start="6365:25" pos:end="6377:13">{<block_content pos:start="6367:17" pos:end="6375:17">

                <if_stmt pos:start="6367:17" pos:end="6375:17"><if pos:start="6367:17" pos:end="6371:17">if <condition pos:start="6367:20" pos:end="6367:46">(<expr pos:start="6367:21" pos:end="6367:45"><name pos:start="6367:21" pos:end="6367:23">num</name> <operator pos:start="6367:25" pos:end="6367:26">==</operator> <name pos:start="6367:28" pos:end="6367:45">TARGET_NR_setxattr</name></expr>)</condition> <block pos:start="6367:48" pos:end="6371:17">{<block_content pos:start="6369:21" pos:end="6369:67">

                    <expr_stmt pos:start="6369:21" pos:end="6369:67"><expr pos:start="6369:21" pos:end="6369:66"><name pos:start="6369:21" pos:end="6369:23">ret</name> <operator pos:start="6369:25" pos:end="6369:25">=</operator> <call pos:start="6369:27" pos:end="6369:66"><name pos:start="6369:27" pos:end="6369:35">get_errno</name><argument_list pos:start="6369:36" pos:end="6369:66">(<argument pos:start="6369:37" pos:end="6369:65"><expr pos:start="6369:37" pos:end="6369:65"><call pos:start="6369:37" pos:end="6369:65"><name pos:start="6369:37" pos:end="6369:44">setxattr</name><argument_list pos:start="6369:45" pos:end="6369:65">(<argument pos:start="6369:46" pos:end="6369:46"><expr pos:start="6369:46" pos:end="6369:46"><name pos:start="6369:46" pos:end="6369:46">p</name></expr></argument>, <argument pos:start="6369:49" pos:end="6369:49"><expr pos:start="6369:49" pos:end="6369:49"><name pos:start="6369:49" pos:end="6369:49">n</name></expr></argument>, <argument pos:start="6369:52" pos:end="6369:52"><expr pos:start="6369:52" pos:end="6369:52"><name pos:start="6369:52" pos:end="6369:52">v</name></expr></argument>, <argument pos:start="6369:55" pos:end="6369:58"><expr pos:start="6369:55" pos:end="6369:58"><name pos:start="6369:55" pos:end="6369:58">arg4</name></expr></argument>, <argument pos:start="6369:61" pos:end="6369:64"><expr pos:start="6369:61" pos:end="6369:64"><name pos:start="6369:61" pos:end="6369:64">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6371:19" pos:end="6375:17">else <block pos:start="6371:24" pos:end="6375:17">{<block_content pos:start="6373:21" pos:end="6373:68">

                    <expr_stmt pos:start="6373:21" pos:end="6373:68"><expr pos:start="6373:21" pos:end="6373:67"><name pos:start="6373:21" pos:end="6373:23">ret</name> <operator pos:start="6373:25" pos:end="6373:25">=</operator> <call pos:start="6373:27" pos:end="6373:67"><name pos:start="6373:27" pos:end="6373:35">get_errno</name><argument_list pos:start="6373:36" pos:end="6373:67">(<argument pos:start="6373:37" pos:end="6373:66"><expr pos:start="6373:37" pos:end="6373:66"><call pos:start="6373:37" pos:end="6373:66"><name pos:start="6373:37" pos:end="6373:45">lsetxattr</name><argument_list pos:start="6373:46" pos:end="6373:66">(<argument pos:start="6373:47" pos:end="6373:47"><expr pos:start="6373:47" pos:end="6373:47"><name pos:start="6373:47" pos:end="6373:47">p</name></expr></argument>, <argument pos:start="6373:50" pos:end="6373:50"><expr pos:start="6373:50" pos:end="6373:50"><name pos:start="6373:50" pos:end="6373:50">n</name></expr></argument>, <argument pos:start="6373:53" pos:end="6373:53"><expr pos:start="6373:53" pos:end="6373:53"><name pos:start="6373:53" pos:end="6373:53">v</name></expr></argument>, <argument pos:start="6373:56" pos:end="6373:59"><expr pos:start="6373:56" pos:end="6373:59"><name pos:start="6373:56" pos:end="6373:59">arg4</name></expr></argument>, <argument pos:start="6373:62" pos:end="6373:65"><expr pos:start="6373:62" pos:end="6373:65"><name pos:start="6373:62" pos:end="6373:65">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="6377:15" pos:end="6381:13">else <block pos:start="6377:20" pos:end="6381:13">{<block_content pos:start="6379:17" pos:end="6379:37">

                <expr_stmt pos:start="6379:17" pos:end="6379:37"><expr pos:start="6379:17" pos:end="6379:36"><name pos:start="6379:17" pos:end="6379:19">ret</name> <operator pos:start="6379:21" pos:end="6379:21">=</operator> <operator pos:start="6379:23" pos:end="6379:23">-</operator><name pos:start="6379:24" pos:end="6379:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6383:13" pos:end="6383:36"><expr pos:start="6383:13" pos:end="6383:35"><call pos:start="6383:13" pos:end="6383:35"><name pos:start="6383:13" pos:end="6383:23">unlock_user</name><argument_list pos:start="6383:24" pos:end="6383:35">(<argument pos:start="6383:25" pos:end="6383:25"><expr pos:start="6383:25" pos:end="6383:25"><name pos:start="6383:25" pos:end="6383:25">p</name></expr></argument>, <argument pos:start="6383:28" pos:end="6383:31"><expr pos:start="6383:28" pos:end="6383:31"><name pos:start="6383:28" pos:end="6383:31">arg1</name></expr></argument>, <argument pos:start="6383:34" pos:end="6383:34"><expr pos:start="6383:34" pos:end="6383:34"><literal type="number" pos:start="6383:34" pos:end="6383:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6385:13" pos:end="6385:36"><expr pos:start="6385:13" pos:end="6385:35"><call pos:start="6385:13" pos:end="6385:35"><name pos:start="6385:13" pos:end="6385:23">unlock_user</name><argument_list pos:start="6385:24" pos:end="6385:35">(<argument pos:start="6385:25" pos:end="6385:25"><expr pos:start="6385:25" pos:end="6385:25"><name pos:start="6385:25" pos:end="6385:25">n</name></expr></argument>, <argument pos:start="6385:28" pos:end="6385:31"><expr pos:start="6385:28" pos:end="6385:31"><name pos:start="6385:28" pos:end="6385:31">arg2</name></expr></argument>, <argument pos:start="6385:34" pos:end="6385:34"><expr pos:start="6385:34" pos:end="6385:34"><literal type="number" pos:start="6385:34" pos:end="6385:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6387:13" pos:end="6387:36"><expr pos:start="6387:13" pos:end="6387:35"><call pos:start="6387:13" pos:end="6387:35"><name pos:start="6387:13" pos:end="6387:23">unlock_user</name><argument_list pos:start="6387:24" pos:end="6387:35">(<argument pos:start="6387:25" pos:end="6387:25"><expr pos:start="6387:25" pos:end="6387:25"><name pos:start="6387:25" pos:end="6387:25">v</name></expr></argument>, <argument pos:start="6387:28" pos:end="6387:31"><expr pos:start="6387:28" pos:end="6387:31"><name pos:start="6387:28" pos:end="6387:31">arg3</name></expr></argument>, <argument pos:start="6387:34" pos:end="6387:34"><expr pos:start="6387:34" pos:end="6387:34"><literal type="number" pos:start="6387:34" pos:end="6387:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6391:9" pos:end="6391:14">break;</break>

    <case pos:start="6393:5" pos:end="6393:29">case <expr pos:start="6393:10" pos:end="6393:28"><name pos:start="6393:10" pos:end="6393:28">TARGET_NR_fsetxattr</name></expr>:</case>

        <block pos:start="6395:9" pos:end="6429:9">{<block_content pos:start="6397:13" pos:end="6427:36">

            <decl_stmt pos:start="6397:13" pos:end="6397:28"><decl pos:start="6397:13" pos:end="6397:19"><type pos:start="6397:13" pos:end="6397:18"><name pos:start="6397:13" pos:end="6397:16">void</name> <modifier pos:start="6397:18" pos:end="6397:18">*</modifier></type><name pos:start="6397:19" pos:end="6397:19">n</name></decl>, <decl pos:start="6397:22" pos:end="6397:27"><type ref="prev" pos:start="6397:13" pos:end="6397:18"><modifier pos:start="6397:22" pos:end="6397:22">*</modifier></type><name pos:start="6397:23" pos:end="6397:23">v</name> <init pos:start="6397:25" pos:end="6397:27">= <expr pos:start="6397:27" pos:end="6397:27"><literal type="number" pos:start="6397:27" pos:end="6397:27">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="6399:13" pos:end="6411:13"><if pos:start="6399:13" pos:end="6411:13">if <condition pos:start="6399:16" pos:end="6399:21">(<expr pos:start="6399:17" pos:end="6399:20"><name pos:start="6399:17" pos:end="6399:20">arg3</name></expr>)</condition> <block pos:start="6399:23" pos:end="6411:13">{<block_content pos:start="6401:17" pos:end="6409:17">

                <expr_stmt pos:start="6401:17" pos:end="6401:58"><expr pos:start="6401:17" pos:end="6401:57"><name pos:start="6401:17" pos:end="6401:17">v</name> <operator pos:start="6401:19" pos:end="6401:19">=</operator> <call pos:start="6401:21" pos:end="6401:57"><name pos:start="6401:21" pos:end="6401:29">lock_user</name><argument_list pos:start="6401:30" pos:end="6401:57">(<argument pos:start="6401:31" pos:end="6401:41"><expr pos:start="6401:31" pos:end="6401:41"><name pos:start="6401:31" pos:end="6401:41">VERIFY_READ</name></expr></argument>, <argument pos:start="6401:44" pos:end="6401:47"><expr pos:start="6401:44" pos:end="6401:47"><name pos:start="6401:44" pos:end="6401:47">arg3</name></expr></argument>, <argument pos:start="6401:50" pos:end="6401:53"><expr pos:start="6401:50" pos:end="6401:53"><name pos:start="6401:50" pos:end="6401:53">arg4</name></expr></argument>, <argument pos:start="6401:56" pos:end="6401:56"><expr pos:start="6401:56" pos:end="6401:56"><literal type="number" pos:start="6401:56" pos:end="6401:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6403:17" pos:end="6409:17"><if pos:start="6403:17" pos:end="6409:17">if <condition pos:start="6403:20" pos:end="6403:23">(<expr pos:start="6403:21" pos:end="6403:22"><operator pos:start="6403:21" pos:end="6403:21">!</operator><name pos:start="6403:22" pos:end="6403:22">v</name></expr>)</condition> <block pos:start="6403:25" pos:end="6409:17">{<block_content pos:start="6405:21" pos:end="6407:26">

                    <expr_stmt pos:start="6405:21" pos:end="6405:41"><expr pos:start="6405:21" pos:end="6405:40"><name pos:start="6405:21" pos:end="6405:23">ret</name> <operator pos:start="6405:25" pos:end="6405:25">=</operator> <operator pos:start="6405:27" pos:end="6405:27">-</operator><name pos:start="6405:28" pos:end="6405:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <break pos:start="6407:21" pos:end="6407:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6413:13" pos:end="6413:39"><expr pos:start="6413:13" pos:end="6413:38"><name pos:start="6413:13" pos:end="6413:13">n</name> <operator pos:start="6413:15" pos:end="6413:15">=</operator> <call pos:start="6413:17" pos:end="6413:38"><name pos:start="6413:17" pos:end="6413:32">lock_user_string</name><argument_list pos:start="6413:33" pos:end="6413:38">(<argument pos:start="6413:34" pos:end="6413:37"><expr pos:start="6413:34" pos:end="6413:37"><name pos:start="6413:34" pos:end="6413:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6415:13" pos:end="6423:13"><if pos:start="6415:13" pos:end="6419:13">if <condition pos:start="6415:16" pos:end="6415:18">(<expr pos:start="6415:17" pos:end="6415:17"><name pos:start="6415:17" pos:end="6415:17">n</name></expr>)</condition> <block pos:start="6415:20" pos:end="6419:13">{<block_content pos:start="6417:17" pos:end="6417:67">

                <expr_stmt pos:start="6417:17" pos:end="6417:67"><expr pos:start="6417:17" pos:end="6417:66"><name pos:start="6417:17" pos:end="6417:19">ret</name> <operator pos:start="6417:21" pos:end="6417:21">=</operator> <call pos:start="6417:23" pos:end="6417:66"><name pos:start="6417:23" pos:end="6417:31">get_errno</name><argument_list pos:start="6417:32" pos:end="6417:66">(<argument pos:start="6417:33" pos:end="6417:65"><expr pos:start="6417:33" pos:end="6417:65"><call pos:start="6417:33" pos:end="6417:65"><name pos:start="6417:33" pos:end="6417:41">fsetxattr</name><argument_list pos:start="6417:42" pos:end="6417:65">(<argument pos:start="6417:43" pos:end="6417:46"><expr pos:start="6417:43" pos:end="6417:46"><name pos:start="6417:43" pos:end="6417:46">arg1</name></expr></argument>, <argument pos:start="6417:49" pos:end="6417:49"><expr pos:start="6417:49" pos:end="6417:49"><name pos:start="6417:49" pos:end="6417:49">n</name></expr></argument>, <argument pos:start="6417:52" pos:end="6417:52"><expr pos:start="6417:52" pos:end="6417:52"><name pos:start="6417:52" pos:end="6417:52">v</name></expr></argument>, <argument pos:start="6417:55" pos:end="6417:58"><expr pos:start="6417:55" pos:end="6417:58"><name pos:start="6417:55" pos:end="6417:58">arg4</name></expr></argument>, <argument pos:start="6417:61" pos:end="6417:64"><expr pos:start="6417:61" pos:end="6417:64"><name pos:start="6417:61" pos:end="6417:64">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6419:15" pos:end="6423:13">else <block pos:start="6419:20" pos:end="6423:13">{<block_content pos:start="6421:17" pos:end="6421:37">

                <expr_stmt pos:start="6421:17" pos:end="6421:37"><expr pos:start="6421:17" pos:end="6421:36"><name pos:start="6421:17" pos:end="6421:19">ret</name> <operator pos:start="6421:21" pos:end="6421:21">=</operator> <operator pos:start="6421:23" pos:end="6421:23">-</operator><name pos:start="6421:24" pos:end="6421:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6425:13" pos:end="6425:36"><expr pos:start="6425:13" pos:end="6425:35"><call pos:start="6425:13" pos:end="6425:35"><name pos:start="6425:13" pos:end="6425:23">unlock_user</name><argument_list pos:start="6425:24" pos:end="6425:35">(<argument pos:start="6425:25" pos:end="6425:25"><expr pos:start="6425:25" pos:end="6425:25"><name pos:start="6425:25" pos:end="6425:25">n</name></expr></argument>, <argument pos:start="6425:28" pos:end="6425:31"><expr pos:start="6425:28" pos:end="6425:31"><name pos:start="6425:28" pos:end="6425:31">arg2</name></expr></argument>, <argument pos:start="6425:34" pos:end="6425:34"><expr pos:start="6425:34" pos:end="6425:34"><literal type="number" pos:start="6425:34" pos:end="6425:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6427:13" pos:end="6427:36"><expr pos:start="6427:13" pos:end="6427:35"><call pos:start="6427:13" pos:end="6427:35"><name pos:start="6427:13" pos:end="6427:23">unlock_user</name><argument_list pos:start="6427:24" pos:end="6427:35">(<argument pos:start="6427:25" pos:end="6427:25"><expr pos:start="6427:25" pos:end="6427:25"><name pos:start="6427:25" pos:end="6427:25">v</name></expr></argument>, <argument pos:start="6427:28" pos:end="6427:31"><expr pos:start="6427:28" pos:end="6427:31"><name pos:start="6427:28" pos:end="6427:31">arg3</name></expr></argument>, <argument pos:start="6427:34" pos:end="6427:34"><expr pos:start="6427:34" pos:end="6427:34"><literal type="number" pos:start="6427:34" pos:end="6427:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6431:9" pos:end="6431:14">break;</break>

    <case pos:start="6433:5" pos:end="6433:28">case <expr pos:start="6433:10" pos:end="6433:27"><name pos:start="6433:10" pos:end="6433:27">TARGET_NR_getxattr</name></expr>:</case>

    <case pos:start="6435:5" pos:end="6435:29">case <expr pos:start="6435:10" pos:end="6435:28"><name pos:start="6435:10" pos:end="6435:28">TARGET_NR_lgetxattr</name></expr>:</case>

        <block pos:start="6437:9" pos:end="6483:9">{<block_content pos:start="6439:13" pos:end="6481:39">

            <decl_stmt pos:start="6439:13" pos:end="6439:32"><decl pos:start="6439:13" pos:end="6439:19"><type pos:start="6439:13" pos:end="6439:18"><name pos:start="6439:13" pos:end="6439:16">void</name> <modifier pos:start="6439:18" pos:end="6439:18">*</modifier></type><name pos:start="6439:19" pos:end="6439:19">p</name></decl>, <decl pos:start="6439:22" pos:end="6439:23"><type ref="prev" pos:start="6439:13" pos:end="6439:18"><modifier pos:start="6439:22" pos:end="6439:22">*</modifier></type><name pos:start="6439:23" pos:end="6439:23">n</name></decl>, <decl pos:start="6439:26" pos:end="6439:31"><type ref="prev" pos:start="6439:13" pos:end="6439:18"><modifier pos:start="6439:26" pos:end="6439:26">*</modifier></type><name pos:start="6439:27" pos:end="6439:27">v</name> <init pos:start="6439:29" pos:end="6439:31">= <expr pos:start="6439:31" pos:end="6439:31"><literal type="number" pos:start="6439:31" pos:end="6439:31">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="6441:13" pos:end="6453:13"><if pos:start="6441:13" pos:end="6453:13">if <condition pos:start="6441:16" pos:end="6441:21">(<expr pos:start="6441:17" pos:end="6441:20"><name pos:start="6441:17" pos:end="6441:20">arg3</name></expr>)</condition> <block pos:start="6441:23" pos:end="6453:13">{<block_content pos:start="6443:17" pos:end="6451:17">

                <expr_stmt pos:start="6443:17" pos:end="6443:59"><expr pos:start="6443:17" pos:end="6443:58"><name pos:start="6443:17" pos:end="6443:17">v</name> <operator pos:start="6443:19" pos:end="6443:19">=</operator> <call pos:start="6443:21" pos:end="6443:58"><name pos:start="6443:21" pos:end="6443:29">lock_user</name><argument_list pos:start="6443:30" pos:end="6443:58">(<argument pos:start="6443:31" pos:end="6443:42"><expr pos:start="6443:31" pos:end="6443:42"><name pos:start="6443:31" pos:end="6443:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6443:45" pos:end="6443:48"><expr pos:start="6443:45" pos:end="6443:48"><name pos:start="6443:45" pos:end="6443:48">arg3</name></expr></argument>, <argument pos:start="6443:51" pos:end="6443:54"><expr pos:start="6443:51" pos:end="6443:54"><name pos:start="6443:51" pos:end="6443:54">arg4</name></expr></argument>, <argument pos:start="6443:57" pos:end="6443:57"><expr pos:start="6443:57" pos:end="6443:57"><literal type="number" pos:start="6443:57" pos:end="6443:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6445:17" pos:end="6451:17"><if pos:start="6445:17" pos:end="6451:17">if <condition pos:start="6445:20" pos:end="6445:23">(<expr pos:start="6445:21" pos:end="6445:22"><operator pos:start="6445:21" pos:end="6445:21">!</operator><name pos:start="6445:22" pos:end="6445:22">v</name></expr>)</condition> <block pos:start="6445:25" pos:end="6451:17">{<block_content pos:start="6447:21" pos:end="6449:26">

                    <expr_stmt pos:start="6447:21" pos:end="6447:41"><expr pos:start="6447:21" pos:end="6447:40"><name pos:start="6447:21" pos:end="6447:23">ret</name> <operator pos:start="6447:25" pos:end="6447:25">=</operator> <operator pos:start="6447:27" pos:end="6447:27">-</operator><name pos:start="6447:28" pos:end="6447:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <break pos:start="6449:21" pos:end="6449:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6455:13" pos:end="6455:39"><expr pos:start="6455:13" pos:end="6455:38"><name pos:start="6455:13" pos:end="6455:13">p</name> <operator pos:start="6455:15" pos:end="6455:15">=</operator> <call pos:start="6455:17" pos:end="6455:38"><name pos:start="6455:17" pos:end="6455:32">lock_user_string</name><argument_list pos:start="6455:33" pos:end="6455:38">(<argument pos:start="6455:34" pos:end="6455:37"><expr pos:start="6455:34" pos:end="6455:37"><name pos:start="6455:34" pos:end="6455:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6457:13" pos:end="6457:39"><expr pos:start="6457:13" pos:end="6457:38"><name pos:start="6457:13" pos:end="6457:13">n</name> <operator pos:start="6457:15" pos:end="6457:15">=</operator> <call pos:start="6457:17" pos:end="6457:38"><name pos:start="6457:17" pos:end="6457:32">lock_user_string</name><argument_list pos:start="6457:33" pos:end="6457:38">(<argument pos:start="6457:34" pos:end="6457:37"><expr pos:start="6457:34" pos:end="6457:37"><name pos:start="6457:34" pos:end="6457:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6459:13" pos:end="6475:13"><if pos:start="6459:13" pos:end="6471:13">if <condition pos:start="6459:16" pos:end="6459:23">(<expr pos:start="6459:17" pos:end="6459:22"><name pos:start="6459:17" pos:end="6459:17">p</name> <operator pos:start="6459:19" pos:end="6459:20">&amp;&amp;</operator> <name pos:start="6459:22" pos:end="6459:22">n</name></expr>)</condition> <block pos:start="6459:25" pos:end="6471:13">{<block_content pos:start="6461:17" pos:end="6469:17">

                <if_stmt pos:start="6461:17" pos:end="6469:17"><if pos:start="6461:17" pos:end="6465:17">if <condition pos:start="6461:20" pos:end="6461:46">(<expr pos:start="6461:21" pos:end="6461:45"><name pos:start="6461:21" pos:end="6461:23">num</name> <operator pos:start="6461:25" pos:end="6461:26">==</operator> <name pos:start="6461:28" pos:end="6461:45">TARGET_NR_getxattr</name></expr>)</condition> <block pos:start="6461:48" pos:end="6465:17">{<block_content pos:start="6463:21" pos:end="6463:61">

                    <expr_stmt pos:start="6463:21" pos:end="6463:61"><expr pos:start="6463:21" pos:end="6463:60"><name pos:start="6463:21" pos:end="6463:23">ret</name> <operator pos:start="6463:25" pos:end="6463:25">=</operator> <call pos:start="6463:27" pos:end="6463:60"><name pos:start="6463:27" pos:end="6463:35">get_errno</name><argument_list pos:start="6463:36" pos:end="6463:60">(<argument pos:start="6463:37" pos:end="6463:59"><expr pos:start="6463:37" pos:end="6463:59"><call pos:start="6463:37" pos:end="6463:59"><name pos:start="6463:37" pos:end="6463:44">getxattr</name><argument_list pos:start="6463:45" pos:end="6463:59">(<argument pos:start="6463:46" pos:end="6463:46"><expr pos:start="6463:46" pos:end="6463:46"><name pos:start="6463:46" pos:end="6463:46">p</name></expr></argument>, <argument pos:start="6463:49" pos:end="6463:49"><expr pos:start="6463:49" pos:end="6463:49"><name pos:start="6463:49" pos:end="6463:49">n</name></expr></argument>, <argument pos:start="6463:52" pos:end="6463:52"><expr pos:start="6463:52" pos:end="6463:52"><name pos:start="6463:52" pos:end="6463:52">v</name></expr></argument>, <argument pos:start="6463:55" pos:end="6463:58"><expr pos:start="6463:55" pos:end="6463:58"><name pos:start="6463:55" pos:end="6463:58">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6465:19" pos:end="6469:17">else <block pos:start="6465:24" pos:end="6469:17">{<block_content pos:start="6467:21" pos:end="6467:62">

                    <expr_stmt pos:start="6467:21" pos:end="6467:62"><expr pos:start="6467:21" pos:end="6467:61"><name pos:start="6467:21" pos:end="6467:23">ret</name> <operator pos:start="6467:25" pos:end="6467:25">=</operator> <call pos:start="6467:27" pos:end="6467:61"><name pos:start="6467:27" pos:end="6467:35">get_errno</name><argument_list pos:start="6467:36" pos:end="6467:61">(<argument pos:start="6467:37" pos:end="6467:60"><expr pos:start="6467:37" pos:end="6467:60"><call pos:start="6467:37" pos:end="6467:60"><name pos:start="6467:37" pos:end="6467:45">lgetxattr</name><argument_list pos:start="6467:46" pos:end="6467:60">(<argument pos:start="6467:47" pos:end="6467:47"><expr pos:start="6467:47" pos:end="6467:47"><name pos:start="6467:47" pos:end="6467:47">p</name></expr></argument>, <argument pos:start="6467:50" pos:end="6467:50"><expr pos:start="6467:50" pos:end="6467:50"><name pos:start="6467:50" pos:end="6467:50">n</name></expr></argument>, <argument pos:start="6467:53" pos:end="6467:53"><expr pos:start="6467:53" pos:end="6467:53"><name pos:start="6467:53" pos:end="6467:53">v</name></expr></argument>, <argument pos:start="6467:56" pos:end="6467:59"><expr pos:start="6467:56" pos:end="6467:59"><name pos:start="6467:56" pos:end="6467:59">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="6471:15" pos:end="6475:13">else <block pos:start="6471:20" pos:end="6475:13">{<block_content pos:start="6473:17" pos:end="6473:37">

                <expr_stmt pos:start="6473:17" pos:end="6473:37"><expr pos:start="6473:17" pos:end="6473:36"><name pos:start="6473:17" pos:end="6473:19">ret</name> <operator pos:start="6473:21" pos:end="6473:21">=</operator> <operator pos:start="6473:23" pos:end="6473:23">-</operator><name pos:start="6473:24" pos:end="6473:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6477:13" pos:end="6477:36"><expr pos:start="6477:13" pos:end="6477:35"><call pos:start="6477:13" pos:end="6477:35"><name pos:start="6477:13" pos:end="6477:23">unlock_user</name><argument_list pos:start="6477:24" pos:end="6477:35">(<argument pos:start="6477:25" pos:end="6477:25"><expr pos:start="6477:25" pos:end="6477:25"><name pos:start="6477:25" pos:end="6477:25">p</name></expr></argument>, <argument pos:start="6477:28" pos:end="6477:31"><expr pos:start="6477:28" pos:end="6477:31"><name pos:start="6477:28" pos:end="6477:31">arg1</name></expr></argument>, <argument pos:start="6477:34" pos:end="6477:34"><expr pos:start="6477:34" pos:end="6477:34"><literal type="number" pos:start="6477:34" pos:end="6477:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6479:13" pos:end="6479:36"><expr pos:start="6479:13" pos:end="6479:35"><call pos:start="6479:13" pos:end="6479:35"><name pos:start="6479:13" pos:end="6479:23">unlock_user</name><argument_list pos:start="6479:24" pos:end="6479:35">(<argument pos:start="6479:25" pos:end="6479:25"><expr pos:start="6479:25" pos:end="6479:25"><name pos:start="6479:25" pos:end="6479:25">n</name></expr></argument>, <argument pos:start="6479:28" pos:end="6479:31"><expr pos:start="6479:28" pos:end="6479:31"><name pos:start="6479:28" pos:end="6479:31">arg2</name></expr></argument>, <argument pos:start="6479:34" pos:end="6479:34"><expr pos:start="6479:34" pos:end="6479:34"><literal type="number" pos:start="6479:34" pos:end="6479:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6481:13" pos:end="6481:39"><expr pos:start="6481:13" pos:end="6481:38"><call pos:start="6481:13" pos:end="6481:38"><name pos:start="6481:13" pos:end="6481:23">unlock_user</name><argument_list pos:start="6481:24" pos:end="6481:38">(<argument pos:start="6481:25" pos:end="6481:25"><expr pos:start="6481:25" pos:end="6481:25"><name pos:start="6481:25" pos:end="6481:25">v</name></expr></argument>, <argument pos:start="6481:28" pos:end="6481:31"><expr pos:start="6481:28" pos:end="6481:31"><name pos:start="6481:28" pos:end="6481:31">arg3</name></expr></argument>, <argument pos:start="6481:34" pos:end="6481:37"><expr pos:start="6481:34" pos:end="6481:37"><name pos:start="6481:34" pos:end="6481:37">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6485:9" pos:end="6485:14">break;</break>

    <case pos:start="6487:5" pos:end="6487:29">case <expr pos:start="6487:10" pos:end="6487:28"><name pos:start="6487:10" pos:end="6487:28">TARGET_NR_fgetxattr</name></expr>:</case>

        <block pos:start="6489:9" pos:end="6523:9">{<block_content pos:start="6491:13" pos:end="6521:39">

            <decl_stmt pos:start="6491:13" pos:end="6491:28"><decl pos:start="6491:13" pos:end="6491:19"><type pos:start="6491:13" pos:end="6491:18"><name pos:start="6491:13" pos:end="6491:16">void</name> <modifier pos:start="6491:18" pos:end="6491:18">*</modifier></type><name pos:start="6491:19" pos:end="6491:19">n</name></decl>, <decl pos:start="6491:22" pos:end="6491:27"><type ref="prev" pos:start="6491:13" pos:end="6491:18"><modifier pos:start="6491:22" pos:end="6491:22">*</modifier></type><name pos:start="6491:23" pos:end="6491:23">v</name> <init pos:start="6491:25" pos:end="6491:27">= <expr pos:start="6491:27" pos:end="6491:27"><literal type="number" pos:start="6491:27" pos:end="6491:27">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="6493:13" pos:end="6505:13"><if pos:start="6493:13" pos:end="6505:13">if <condition pos:start="6493:16" pos:end="6493:21">(<expr pos:start="6493:17" pos:end="6493:20"><name pos:start="6493:17" pos:end="6493:20">arg3</name></expr>)</condition> <block pos:start="6493:23" pos:end="6505:13">{<block_content pos:start="6495:17" pos:end="6503:17">

                <expr_stmt pos:start="6495:17" pos:end="6495:59"><expr pos:start="6495:17" pos:end="6495:58"><name pos:start="6495:17" pos:end="6495:17">v</name> <operator pos:start="6495:19" pos:end="6495:19">=</operator> <call pos:start="6495:21" pos:end="6495:58"><name pos:start="6495:21" pos:end="6495:29">lock_user</name><argument_list pos:start="6495:30" pos:end="6495:58">(<argument pos:start="6495:31" pos:end="6495:42"><expr pos:start="6495:31" pos:end="6495:42"><name pos:start="6495:31" pos:end="6495:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6495:45" pos:end="6495:48"><expr pos:start="6495:45" pos:end="6495:48"><name pos:start="6495:45" pos:end="6495:48">arg3</name></expr></argument>, <argument pos:start="6495:51" pos:end="6495:54"><expr pos:start="6495:51" pos:end="6495:54"><name pos:start="6495:51" pos:end="6495:54">arg4</name></expr></argument>, <argument pos:start="6495:57" pos:end="6495:57"><expr pos:start="6495:57" pos:end="6495:57"><literal type="number" pos:start="6495:57" pos:end="6495:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6497:17" pos:end="6503:17"><if pos:start="6497:17" pos:end="6503:17">if <condition pos:start="6497:20" pos:end="6497:23">(<expr pos:start="6497:21" pos:end="6497:22"><operator pos:start="6497:21" pos:end="6497:21">!</operator><name pos:start="6497:22" pos:end="6497:22">v</name></expr>)</condition> <block pos:start="6497:25" pos:end="6503:17">{<block_content pos:start="6499:21" pos:end="6501:26">

                    <expr_stmt pos:start="6499:21" pos:end="6499:41"><expr pos:start="6499:21" pos:end="6499:40"><name pos:start="6499:21" pos:end="6499:23">ret</name> <operator pos:start="6499:25" pos:end="6499:25">=</operator> <operator pos:start="6499:27" pos:end="6499:27">-</operator><name pos:start="6499:28" pos:end="6499:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <break pos:start="6501:21" pos:end="6501:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6507:13" pos:end="6507:39"><expr pos:start="6507:13" pos:end="6507:38"><name pos:start="6507:13" pos:end="6507:13">n</name> <operator pos:start="6507:15" pos:end="6507:15">=</operator> <call pos:start="6507:17" pos:end="6507:38"><name pos:start="6507:17" pos:end="6507:32">lock_user_string</name><argument_list pos:start="6507:33" pos:end="6507:38">(<argument pos:start="6507:34" pos:end="6507:37"><expr pos:start="6507:34" pos:end="6507:37"><name pos:start="6507:34" pos:end="6507:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6509:13" pos:end="6517:13"><if pos:start="6509:13" pos:end="6513:13">if <condition pos:start="6509:16" pos:end="6509:18">(<expr pos:start="6509:17" pos:end="6509:17"><name pos:start="6509:17" pos:end="6509:17">n</name></expr>)</condition> <block pos:start="6509:20" pos:end="6513:13">{<block_content pos:start="6511:17" pos:end="6511:61">

                <expr_stmt pos:start="6511:17" pos:end="6511:61"><expr pos:start="6511:17" pos:end="6511:60"><name pos:start="6511:17" pos:end="6511:19">ret</name> <operator pos:start="6511:21" pos:end="6511:21">=</operator> <call pos:start="6511:23" pos:end="6511:60"><name pos:start="6511:23" pos:end="6511:31">get_errno</name><argument_list pos:start="6511:32" pos:end="6511:60">(<argument pos:start="6511:33" pos:end="6511:59"><expr pos:start="6511:33" pos:end="6511:59"><call pos:start="6511:33" pos:end="6511:59"><name pos:start="6511:33" pos:end="6511:41">fgetxattr</name><argument_list pos:start="6511:42" pos:end="6511:59">(<argument pos:start="6511:43" pos:end="6511:46"><expr pos:start="6511:43" pos:end="6511:46"><name pos:start="6511:43" pos:end="6511:46">arg1</name></expr></argument>, <argument pos:start="6511:49" pos:end="6511:49"><expr pos:start="6511:49" pos:end="6511:49"><name pos:start="6511:49" pos:end="6511:49">n</name></expr></argument>, <argument pos:start="6511:52" pos:end="6511:52"><expr pos:start="6511:52" pos:end="6511:52"><name pos:start="6511:52" pos:end="6511:52">v</name></expr></argument>, <argument pos:start="6511:55" pos:end="6511:58"><expr pos:start="6511:55" pos:end="6511:58"><name pos:start="6511:55" pos:end="6511:58">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6513:15" pos:end="6517:13">else <block pos:start="6513:20" pos:end="6517:13">{<block_content pos:start="6515:17" pos:end="6515:37">

                <expr_stmt pos:start="6515:17" pos:end="6515:37"><expr pos:start="6515:17" pos:end="6515:36"><name pos:start="6515:17" pos:end="6515:19">ret</name> <operator pos:start="6515:21" pos:end="6515:21">=</operator> <operator pos:start="6515:23" pos:end="6515:23">-</operator><name pos:start="6515:24" pos:end="6515:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6519:13" pos:end="6519:36"><expr pos:start="6519:13" pos:end="6519:35"><call pos:start="6519:13" pos:end="6519:35"><name pos:start="6519:13" pos:end="6519:23">unlock_user</name><argument_list pos:start="6519:24" pos:end="6519:35">(<argument pos:start="6519:25" pos:end="6519:25"><expr pos:start="6519:25" pos:end="6519:25"><name pos:start="6519:25" pos:end="6519:25">n</name></expr></argument>, <argument pos:start="6519:28" pos:end="6519:31"><expr pos:start="6519:28" pos:end="6519:31"><name pos:start="6519:28" pos:end="6519:31">arg2</name></expr></argument>, <argument pos:start="6519:34" pos:end="6519:34"><expr pos:start="6519:34" pos:end="6519:34"><literal type="number" pos:start="6519:34" pos:end="6519:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6521:13" pos:end="6521:39"><expr pos:start="6521:13" pos:end="6521:38"><call pos:start="6521:13" pos:end="6521:38"><name pos:start="6521:13" pos:end="6521:23">unlock_user</name><argument_list pos:start="6521:24" pos:end="6521:38">(<argument pos:start="6521:25" pos:end="6521:25"><expr pos:start="6521:25" pos:end="6521:25"><name pos:start="6521:25" pos:end="6521:25">v</name></expr></argument>, <argument pos:start="6521:28" pos:end="6521:31"><expr pos:start="6521:28" pos:end="6521:31"><name pos:start="6521:28" pos:end="6521:31">arg3</name></expr></argument>, <argument pos:start="6521:34" pos:end="6521:37"><expr pos:start="6521:34" pos:end="6521:37"><name pos:start="6521:34" pos:end="6521:37">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6525:9" pos:end="6525:14">break;</break>

    <case pos:start="6527:5" pos:end="6527:31">case <expr pos:start="6527:10" pos:end="6527:30"><name pos:start="6527:10" pos:end="6527:30">TARGET_NR_removexattr</name></expr>:</case>

    <case pos:start="6529:5" pos:end="6529:32">case <expr pos:start="6529:10" pos:end="6529:31"><name pos:start="6529:10" pos:end="6529:31">TARGET_NR_lremovexattr</name></expr>:</case>

        <block pos:start="6531:9" pos:end="6561:9">{<block_content pos:start="6533:13" pos:end="6559:36">

            <decl_stmt pos:start="6533:13" pos:end="6533:24"><decl pos:start="6533:13" pos:end="6533:19"><type pos:start="6533:13" pos:end="6533:18"><name pos:start="6533:13" pos:end="6533:16">void</name> <modifier pos:start="6533:18" pos:end="6533:18">*</modifier></type><name pos:start="6533:19" pos:end="6533:19">p</name></decl>, <decl pos:start="6533:22" pos:end="6533:23"><type ref="prev" pos:start="6533:13" pos:end="6533:18"><modifier pos:start="6533:22" pos:end="6533:22">*</modifier></type><name pos:start="6533:23" pos:end="6533:23">n</name></decl>;</decl_stmt>

            <expr_stmt pos:start="6535:13" pos:end="6535:39"><expr pos:start="6535:13" pos:end="6535:38"><name pos:start="6535:13" pos:end="6535:13">p</name> <operator pos:start="6535:15" pos:end="6535:15">=</operator> <call pos:start="6535:17" pos:end="6535:38"><name pos:start="6535:17" pos:end="6535:32">lock_user_string</name><argument_list pos:start="6535:33" pos:end="6535:38">(<argument pos:start="6535:34" pos:end="6535:37"><expr pos:start="6535:34" pos:end="6535:37"><name pos:start="6535:34" pos:end="6535:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6537:13" pos:end="6537:39"><expr pos:start="6537:13" pos:end="6537:38"><name pos:start="6537:13" pos:end="6537:13">n</name> <operator pos:start="6537:15" pos:end="6537:15">=</operator> <call pos:start="6537:17" pos:end="6537:38"><name pos:start="6537:17" pos:end="6537:32">lock_user_string</name><argument_list pos:start="6537:33" pos:end="6537:38">(<argument pos:start="6537:34" pos:end="6537:37"><expr pos:start="6537:34" pos:end="6537:37"><name pos:start="6537:34" pos:end="6537:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6539:13" pos:end="6555:13"><if pos:start="6539:13" pos:end="6551:13">if <condition pos:start="6539:16" pos:end="6539:23">(<expr pos:start="6539:17" pos:end="6539:22"><name pos:start="6539:17" pos:end="6539:17">p</name> <operator pos:start="6539:19" pos:end="6539:20">&amp;&amp;</operator> <name pos:start="6539:22" pos:end="6539:22">n</name></expr>)</condition> <block pos:start="6539:25" pos:end="6551:13">{<block_content pos:start="6541:17" pos:end="6549:17">

                <if_stmt pos:start="6541:17" pos:end="6549:17"><if pos:start="6541:17" pos:end="6545:17">if <condition pos:start="6541:20" pos:end="6541:49">(<expr pos:start="6541:21" pos:end="6541:48"><name pos:start="6541:21" pos:end="6541:23">num</name> <operator pos:start="6541:25" pos:end="6541:26">==</operator> <name pos:start="6541:28" pos:end="6541:48">TARGET_NR_removexattr</name></expr>)</condition> <block pos:start="6541:51" pos:end="6545:17">{<block_content pos:start="6543:21" pos:end="6543:55">

                    <expr_stmt pos:start="6543:21" pos:end="6543:55"><expr pos:start="6543:21" pos:end="6543:54"><name pos:start="6543:21" pos:end="6543:23">ret</name> <operator pos:start="6543:25" pos:end="6543:25">=</operator> <call pos:start="6543:27" pos:end="6543:54"><name pos:start="6543:27" pos:end="6543:35">get_errno</name><argument_list pos:start="6543:36" pos:end="6543:54">(<argument pos:start="6543:37" pos:end="6543:53"><expr pos:start="6543:37" pos:end="6543:53"><call pos:start="6543:37" pos:end="6543:53"><name pos:start="6543:37" pos:end="6543:47">removexattr</name><argument_list pos:start="6543:48" pos:end="6543:53">(<argument pos:start="6543:49" pos:end="6543:49"><expr pos:start="6543:49" pos:end="6543:49"><name pos:start="6543:49" pos:end="6543:49">p</name></expr></argument>, <argument pos:start="6543:52" pos:end="6543:52"><expr pos:start="6543:52" pos:end="6543:52"><name pos:start="6543:52" pos:end="6543:52">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6545:19" pos:end="6549:17">else <block pos:start="6545:24" pos:end="6549:17">{<block_content pos:start="6547:21" pos:end="6547:56">

                    <expr_stmt pos:start="6547:21" pos:end="6547:56"><expr pos:start="6547:21" pos:end="6547:55"><name pos:start="6547:21" pos:end="6547:23">ret</name> <operator pos:start="6547:25" pos:end="6547:25">=</operator> <call pos:start="6547:27" pos:end="6547:55"><name pos:start="6547:27" pos:end="6547:35">get_errno</name><argument_list pos:start="6547:36" pos:end="6547:55">(<argument pos:start="6547:37" pos:end="6547:54"><expr pos:start="6547:37" pos:end="6547:54"><call pos:start="6547:37" pos:end="6547:54"><name pos:start="6547:37" pos:end="6547:48">lremovexattr</name><argument_list pos:start="6547:49" pos:end="6547:54">(<argument pos:start="6547:50" pos:end="6547:50"><expr pos:start="6547:50" pos:end="6547:50"><name pos:start="6547:50" pos:end="6547:50">p</name></expr></argument>, <argument pos:start="6547:53" pos:end="6547:53"><expr pos:start="6547:53" pos:end="6547:53"><name pos:start="6547:53" pos:end="6547:53">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="6551:15" pos:end="6555:13">else <block pos:start="6551:20" pos:end="6555:13">{<block_content pos:start="6553:17" pos:end="6553:37">

                <expr_stmt pos:start="6553:17" pos:end="6553:37"><expr pos:start="6553:17" pos:end="6553:36"><name pos:start="6553:17" pos:end="6553:19">ret</name> <operator pos:start="6553:21" pos:end="6553:21">=</operator> <operator pos:start="6553:23" pos:end="6553:23">-</operator><name pos:start="6553:24" pos:end="6553:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6557:13" pos:end="6557:36"><expr pos:start="6557:13" pos:end="6557:35"><call pos:start="6557:13" pos:end="6557:35"><name pos:start="6557:13" pos:end="6557:23">unlock_user</name><argument_list pos:start="6557:24" pos:end="6557:35">(<argument pos:start="6557:25" pos:end="6557:25"><expr pos:start="6557:25" pos:end="6557:25"><name pos:start="6557:25" pos:end="6557:25">p</name></expr></argument>, <argument pos:start="6557:28" pos:end="6557:31"><expr pos:start="6557:28" pos:end="6557:31"><name pos:start="6557:28" pos:end="6557:31">arg1</name></expr></argument>, <argument pos:start="6557:34" pos:end="6557:34"><expr pos:start="6557:34" pos:end="6557:34"><literal type="number" pos:start="6557:34" pos:end="6557:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6559:13" pos:end="6559:36"><expr pos:start="6559:13" pos:end="6559:35"><call pos:start="6559:13" pos:end="6559:35"><name pos:start="6559:13" pos:end="6559:23">unlock_user</name><argument_list pos:start="6559:24" pos:end="6559:35">(<argument pos:start="6559:25" pos:end="6559:25"><expr pos:start="6559:25" pos:end="6559:25"><name pos:start="6559:25" pos:end="6559:25">n</name></expr></argument>, <argument pos:start="6559:28" pos:end="6559:31"><expr pos:start="6559:28" pos:end="6559:31"><name pos:start="6559:28" pos:end="6559:31">arg2</name></expr></argument>, <argument pos:start="6559:34" pos:end="6559:34"><expr pos:start="6559:34" pos:end="6559:34"><literal type="number" pos:start="6559:34" pos:end="6559:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6563:9" pos:end="6563:14">break;</break>

    <case pos:start="6565:5" pos:end="6565:32">case <expr pos:start="6565:10" pos:end="6565:31"><name pos:start="6565:10" pos:end="6565:31">TARGET_NR_fremovexattr</name></expr>:</case>

        <block pos:start="6567:9" pos:end="6585:9">{<block_content pos:start="6569:13" pos:end="6583:36">

            <decl_stmt pos:start="6569:13" pos:end="6569:20"><decl pos:start="6569:13" pos:end="6569:19"><type pos:start="6569:13" pos:end="6569:18"><name pos:start="6569:13" pos:end="6569:16">void</name> <modifier pos:start="6569:18" pos:end="6569:18">*</modifier></type><name pos:start="6569:19" pos:end="6569:19">n</name></decl>;</decl_stmt>

            <expr_stmt pos:start="6571:13" pos:end="6571:39"><expr pos:start="6571:13" pos:end="6571:38"><name pos:start="6571:13" pos:end="6571:13">n</name> <operator pos:start="6571:15" pos:end="6571:15">=</operator> <call pos:start="6571:17" pos:end="6571:38"><name pos:start="6571:17" pos:end="6571:32">lock_user_string</name><argument_list pos:start="6571:33" pos:end="6571:38">(<argument pos:start="6571:34" pos:end="6571:37"><expr pos:start="6571:34" pos:end="6571:37"><name pos:start="6571:34" pos:end="6571:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6573:13" pos:end="6581:13"><if pos:start="6573:13" pos:end="6577:13">if <condition pos:start="6573:16" pos:end="6573:18">(<expr pos:start="6573:17" pos:end="6573:17"><name pos:start="6573:17" pos:end="6573:17">n</name></expr>)</condition> <block pos:start="6573:20" pos:end="6577:13">{<block_content pos:start="6575:17" pos:end="6575:55">

                <expr_stmt pos:start="6575:17" pos:end="6575:55"><expr pos:start="6575:17" pos:end="6575:54"><name pos:start="6575:17" pos:end="6575:19">ret</name> <operator pos:start="6575:21" pos:end="6575:21">=</operator> <call pos:start="6575:23" pos:end="6575:54"><name pos:start="6575:23" pos:end="6575:31">get_errno</name><argument_list pos:start="6575:32" pos:end="6575:54">(<argument pos:start="6575:33" pos:end="6575:53"><expr pos:start="6575:33" pos:end="6575:53"><call pos:start="6575:33" pos:end="6575:53"><name pos:start="6575:33" pos:end="6575:44">fremovexattr</name><argument_list pos:start="6575:45" pos:end="6575:53">(<argument pos:start="6575:46" pos:end="6575:49"><expr pos:start="6575:46" pos:end="6575:49"><name pos:start="6575:46" pos:end="6575:49">arg1</name></expr></argument>, <argument pos:start="6575:52" pos:end="6575:52"><expr pos:start="6575:52" pos:end="6575:52"><name pos:start="6575:52" pos:end="6575:52">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6577:15" pos:end="6581:13">else <block pos:start="6577:20" pos:end="6581:13">{<block_content pos:start="6579:17" pos:end="6579:37">

                <expr_stmt pos:start="6579:17" pos:end="6579:37"><expr pos:start="6579:17" pos:end="6579:36"><name pos:start="6579:17" pos:end="6579:19">ret</name> <operator pos:start="6579:21" pos:end="6579:21">=</operator> <operator pos:start="6579:23" pos:end="6579:23">-</operator><name pos:start="6579:24" pos:end="6579:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6583:13" pos:end="6583:36"><expr pos:start="6583:13" pos:end="6583:35"><call pos:start="6583:13" pos:end="6583:35"><name pos:start="6583:13" pos:end="6583:23">unlock_user</name><argument_list pos:start="6583:24" pos:end="6583:35">(<argument pos:start="6583:25" pos:end="6583:25"><expr pos:start="6583:25" pos:end="6583:25"><name pos:start="6583:25" pos:end="6583:25">n</name></expr></argument>, <argument pos:start="6583:28" pos:end="6583:31"><expr pos:start="6583:28" pos:end="6583:31"><name pos:start="6583:28" pos:end="6583:31">arg2</name></expr></argument>, <argument pos:start="6583:34" pos:end="6583:34"><expr pos:start="6583:34" pos:end="6583:34"><literal type="number" pos:start="6583:34" pos:end="6583:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6587:9" pos:end="6594:0">break;</break>

<cpp:endif pos:start="6589:1" pos:end="6589:6">#<cpp:directive pos:start="6589:2" pos:end="6589:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="6591:1" pos:end="6591:6">#<cpp:directive pos:start="6591:2" pos:end="6591:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="6591:8" pos:end="6591:24">/* CONFIG_ATTR */</comment>

<cpp:ifdef pos:start="6593:1" pos:end="6593:32">#<cpp:directive pos:start="6593:2" pos:end="6593:6">ifdef</cpp:directive> <name pos:start="6593:8" pos:end="6593:32">TARGET_NR_set_thread_area</name></cpp:ifdef>

    <case pos:start="6595:5" pos:end="6598:0">case <expr pos:start="6595:10" pos:end="6595:34"><name pos:start="6595:10" pos:end="6595:34">TARGET_NR_set_thread_area</name></expr>:</case>

<cpp:if pos:start="6597:1" pos:end="6597:24">#<cpp:directive pos:start="6597:2" pos:end="6597:3">if</cpp:directive> <expr pos:start="6597:5" pos:end="6597:24"><call pos:start="6597:5" pos:end="6597:24"><name pos:start="6597:5" pos:end="6597:11">defined</name><argument_list pos:start="6597:12" pos:end="6597:24">(<argument pos:start="6597:13" pos:end="6597:23"><expr pos:start="6597:13" pos:end="6597:23"><name pos:start="6597:13" pos:end="6597:23">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

      <expr_stmt pos:start="6599:7" pos:end="6599:51"><expr pos:start="6599:7" pos:end="6599:50"><operator pos:start="6599:7" pos:end="6599:7">(</operator><operator pos:start="6599:8" pos:end="6599:8">(</operator><name pos:start="6599:9" pos:end="6599:20">CPUMIPSState</name> <operator pos:start="6599:22" pos:end="6599:22">*</operator><operator pos:start="6599:23" pos:end="6599:23">)</operator> <name pos:start="6599:25" pos:end="6599:31">cpu_env</name><operator pos:start="6599:32" pos:end="6599:32">)</operator><operator pos:start="6599:33" pos:end="6599:34">-&gt;</operator><name pos:start="6599:35" pos:end="6599:43">tls_value</name> <operator pos:start="6599:45" pos:end="6599:45">=</operator> <name pos:start="6599:47" pos:end="6599:50">arg1</name></expr>;</expr_stmt>

      <expr_stmt pos:start="6601:7" pos:end="6601:14"><expr pos:start="6601:7" pos:end="6601:13"><name pos:start="6601:7" pos:end="6601:9">ret</name> <operator pos:start="6601:11" pos:end="6601:11">=</operator> <literal type="number" pos:start="6601:13" pos:end="6601:13">0</literal></expr>;</expr_stmt>

      <break pos:start="6603:7" pos:end="6606:0">break;</break>

<cpp:elif pos:start="6605:1" pos:end="6605:26">#<cpp:directive pos:start="6605:2" pos:end="6605:5">elif</cpp:directive> <expr pos:start="6605:7" pos:end="6605:26"><call pos:start="6605:7" pos:end="6605:26"><name pos:start="6605:7" pos:end="6605:13">defined</name><argument_list pos:start="6605:14" pos:end="6605:26">(<argument pos:start="6605:15" pos:end="6605:25"><expr pos:start="6605:15" pos:end="6605:25"><name pos:start="6605:15" pos:end="6605:25">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

      <if_stmt pos:start="6607:7" pos:end="6617:7"><if pos:start="6607:7" pos:end="6609:31">if <condition pos:start="6607:10" pos:end="6607:22">(<expr pos:start="6607:11" pos:end="6607:21"><name pos:start="6607:11" pos:end="6607:14">arg1</name> <operator pos:start="6607:16" pos:end="6607:16">&amp;</operator> <literal type="number" pos:start="6607:18" pos:end="6607:21">0xff</literal></expr>)</condition><block type="pseudo" pos:start="6609:11" pos:end="6609:31"><block_content pos:start="6609:11" pos:end="6609:31">

          <expr_stmt pos:start="6609:11" pos:end="6609:31"><expr pos:start="6609:11" pos:end="6609:30"><name pos:start="6609:11" pos:end="6609:13">ret</name> <operator pos:start="6609:15" pos:end="6609:15">=</operator> <operator pos:start="6609:17" pos:end="6609:17">-</operator><name pos:start="6609:18" pos:end="6609:30">TARGET_EINVAL</name></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="6611:7" pos:end="6617:7">else <block pos:start="6611:12" pos:end="6617:7">{<block_content pos:start="6613:11" pos:end="6615:18">

          <expr_stmt pos:start="6613:11" pos:end="6613:59"><expr pos:start="6613:11" pos:end="6613:58"><operator pos:start="6613:11" pos:end="6613:11">(</operator><operator pos:start="6613:12" pos:end="6613:12">(</operator><name pos:start="6613:13" pos:end="6613:24">CPUCRISState</name> <operator pos:start="6613:26" pos:end="6613:26">*</operator><operator pos:start="6613:27" pos:end="6613:27">)</operator> <name pos:start="6613:29" pos:end="6613:35">cpu_env</name><operator pos:start="6613:36" pos:end="6613:36">)</operator><operator pos:start="6613:37" pos:end="6613:38">-&gt;</operator><name pos:start="6613:39" pos:end="6613:51"><name pos:start="6613:39" pos:end="6613:43">pregs</name><index pos:start="6613:44" pos:end="6613:51">[<expr pos:start="6613:45" pos:end="6613:50"><name pos:start="6613:45" pos:end="6613:50">PR_PID</name></expr>]</index></name> <operator pos:start="6613:53" pos:end="6613:53">=</operator> <name pos:start="6613:55" pos:end="6613:58">arg1</name></expr>;</expr_stmt>

          <expr_stmt pos:start="6615:11" pos:end="6615:18"><expr pos:start="6615:11" pos:end="6615:17"><name pos:start="6615:11" pos:end="6615:13">ret</name> <operator pos:start="6615:15" pos:end="6615:15">=</operator> <literal type="number" pos:start="6615:17" pos:end="6615:17">0</literal></expr>;</expr_stmt>

      </block_content>}</block></else></if_stmt>

      <break pos:start="6619:7" pos:end="6622:0">break;</break>

<cpp:elif pos:start="6621:1" pos:end="6621:51">#<cpp:directive pos:start="6621:2" pos:end="6621:5">elif</cpp:directive> <expr pos:start="6621:7" pos:end="6621:51"><call pos:start="6621:7" pos:end="6621:26"><name pos:start="6621:7" pos:end="6621:13">defined</name><argument_list pos:start="6621:14" pos:end="6621:26">(<argument pos:start="6621:15" pos:end="6621:25"><expr pos:start="6621:15" pos:end="6621:25"><name pos:start="6621:15" pos:end="6621:25">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="6621:28" pos:end="6621:29">&amp;&amp;</operator> <call pos:start="6621:31" pos:end="6621:51"><name pos:start="6621:31" pos:end="6621:37">defined</name><argument_list pos:start="6621:38" pos:end="6621:51">(<argument pos:start="6621:39" pos:end="6621:50"><expr pos:start="6621:39" pos:end="6621:50"><name pos:start="6621:39" pos:end="6621:50">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

      <expr_stmt pos:start="6623:7" pos:end="6623:46"><expr pos:start="6623:7" pos:end="6623:45"><name pos:start="6623:7" pos:end="6623:9">ret</name> <operator pos:start="6623:11" pos:end="6623:11">=</operator> <call pos:start="6623:13" pos:end="6623:45"><name pos:start="6623:13" pos:end="6623:30">do_set_thread_area</name><argument_list pos:start="6623:31" pos:end="6623:45">(<argument pos:start="6623:32" pos:end="6623:38"><expr pos:start="6623:32" pos:end="6623:38"><name pos:start="6623:32" pos:end="6623:38">cpu_env</name></expr></argument>, <argument pos:start="6623:41" pos:end="6623:44"><expr pos:start="6623:41" pos:end="6623:44"><name pos:start="6623:41" pos:end="6623:44">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="6625:7" pos:end="6628:0">break;</break>

<cpp:else pos:start="6627:1" pos:end="6627:5">#<cpp:directive pos:start="6627:2" pos:end="6627:5">else</cpp:directive></cpp:else>

      <goto pos:start="6629:7" pos:end="6636:0">goto <name pos:start="6629:12" pos:end="6629:31">unimplemented_nowarn</name>;</goto>

<cpp:endif pos:start="6631:1" pos:end="6631:6">#<cpp:directive pos:start="6631:2" pos:end="6631:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="6633:1" pos:end="6633:6">#<cpp:directive pos:start="6633:2" pos:end="6633:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6635:1" pos:end="6635:32">#<cpp:directive pos:start="6635:2" pos:end="6635:6">ifdef</cpp:directive> <name pos:start="6635:8" pos:end="6635:32">TARGET_NR_get_thread_area</name></cpp:ifdef>

    <case pos:start="6637:5" pos:end="6640:0">case <expr pos:start="6637:10" pos:end="6637:34"><name pos:start="6637:10" pos:end="6637:34">TARGET_NR_get_thread_area</name></expr>:</case>

<cpp:if pos:start="6639:1" pos:end="6639:49">#<cpp:directive pos:start="6639:2" pos:end="6639:3">if</cpp:directive> <expr pos:start="6639:5" pos:end="6639:49"><call pos:start="6639:5" pos:end="6639:24"><name pos:start="6639:5" pos:end="6639:11">defined</name><argument_list pos:start="6639:12" pos:end="6639:24">(<argument pos:start="6639:13" pos:end="6639:23"><expr pos:start="6639:13" pos:end="6639:23"><name pos:start="6639:13" pos:end="6639:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="6639:26" pos:end="6639:27">&amp;&amp;</operator> <call pos:start="6639:29" pos:end="6639:49"><name pos:start="6639:29" pos:end="6639:35">defined</name><argument_list pos:start="6639:36" pos:end="6639:49">(<argument pos:start="6639:37" pos:end="6639:48"><expr pos:start="6639:37" pos:end="6639:48"><name pos:start="6639:37" pos:end="6639:48">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="6641:9" pos:end="6644:0"><expr pos:start="6641:9" pos:end="6641:47"><name pos:start="6641:9" pos:end="6641:11">ret</name> <operator pos:start="6641:13" pos:end="6641:13">=</operator> <call pos:start="6641:15" pos:end="6641:47"><name pos:start="6641:15" pos:end="6641:32">do_get_thread_area</name><argument_list pos:start="6641:33" pos:end="6641:47">(<argument pos:start="6641:34" pos:end="6641:40"><expr pos:start="6641:34" pos:end="6641:40"><name pos:start="6641:34" pos:end="6641:40">cpu_env</name></expr></argument>, <argument pos:start="6641:43" pos:end="6641:46"><expr pos:start="6641:43" pos:end="6641:46"><name pos:start="6641:43" pos:end="6641:46">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="6643:1" pos:end="6643:5">#<cpp:directive pos:start="6643:2" pos:end="6643:5">else</cpp:directive></cpp:else>

        <goto pos:start="6645:9" pos:end="6652:0">goto <name pos:start="6645:14" pos:end="6645:33">unimplemented_nowarn</name>;</goto>

<cpp:endif pos:start="6647:1" pos:end="6647:6">#<cpp:directive pos:start="6647:2" pos:end="6647:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="6649:1" pos:end="6649:6">#<cpp:directive pos:start="6649:2" pos:end="6649:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6651:1" pos:end="6651:30">#<cpp:directive pos:start="6651:2" pos:end="6651:6">ifdef</cpp:directive> <name pos:start="6651:8" pos:end="6651:30">TARGET_NR_getdomainname</name></cpp:ifdef>

    <case pos:start="6653:5" pos:end="6653:33">case <expr pos:start="6653:10" pos:end="6653:32"><name pos:start="6653:10" pos:end="6653:32">TARGET_NR_getdomainname</name></expr>:</case>

        <goto pos:start="6655:9" pos:end="6662:0">goto <name pos:start="6655:14" pos:end="6655:33">unimplemented_nowarn</name>;</goto>

<cpp:endif pos:start="6657:1" pos:end="6657:6">#<cpp:directive pos:start="6657:2" pos:end="6657:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="6661:1" pos:end="6661:30">#<cpp:directive pos:start="6661:2" pos:end="6661:6">ifdef</cpp:directive> <name pos:start="6661:8" pos:end="6661:30">TARGET_NR_clock_gettime</name></cpp:ifdef>

    <case pos:start="6663:5" pos:end="6663:33">case <expr pos:start="6663:10" pos:end="6663:32"><name pos:start="6663:10" pos:end="6663:32">TARGET_NR_clock_gettime</name></expr>:</case>

    <block pos:start="6665:5" pos:end="6684:0">{<block_content pos:start="6667:9" pos:end="6677:14">

        <decl_stmt pos:start="6667:9" pos:end="6667:27"><decl pos:start="6667:9" pos:end="6667:26"><type pos:start="6667:9" pos:end="6667:23"><name pos:start="6667:9" pos:end="6667:23"><name pos:start="6667:9" pos:end="6667:14">struct</name> <name pos:start="6667:16" pos:end="6667:23">timespec</name></name></type> <name pos:start="6667:25" pos:end="6667:26">ts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="6669:9" pos:end="6669:50"><expr pos:start="6669:9" pos:end="6669:49"><name pos:start="6669:9" pos:end="6669:11">ret</name> <operator pos:start="6669:13" pos:end="6669:13">=</operator> <call pos:start="6669:15" pos:end="6669:49"><name pos:start="6669:15" pos:end="6669:23">get_errno</name><argument_list pos:start="6669:24" pos:end="6669:49">(<argument pos:start="6669:25" pos:end="6669:48"><expr pos:start="6669:25" pos:end="6669:48"><call pos:start="6669:25" pos:end="6669:48"><name pos:start="6669:25" pos:end="6669:37">clock_gettime</name><argument_list pos:start="6669:38" pos:end="6669:48">(<argument pos:start="6669:39" pos:end="6669:42"><expr pos:start="6669:39" pos:end="6669:42"><name pos:start="6669:39" pos:end="6669:42">arg1</name></expr></argument>, <argument pos:start="6669:45" pos:end="6669:47"><expr pos:start="6669:45" pos:end="6669:47"><operator pos:start="6669:45" pos:end="6669:45">&amp;</operator><name pos:start="6669:46" pos:end="6669:47">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6671:9" pos:end="6675:9"><if pos:start="6671:9" pos:end="6675:9">if <condition pos:start="6671:12" pos:end="6671:27">(<expr pos:start="6671:13" pos:end="6671:26"><operator pos:start="6671:13" pos:end="6671:13">!</operator><call pos:start="6671:14" pos:end="6671:26"><name pos:start="6671:14" pos:end="6671:21">is_error</name><argument_list pos:start="6671:22" pos:end="6671:26">(<argument pos:start="6671:23" pos:end="6671:25"><expr pos:start="6671:23" pos:end="6671:25"><name pos:start="6671:23" pos:end="6671:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6671:29" pos:end="6675:9">{<block_content pos:start="6673:13" pos:end="6673:47">

            <expr_stmt pos:start="6673:13" pos:end="6673:47"><expr pos:start="6673:13" pos:end="6673:46"><call pos:start="6673:13" pos:end="6673:46"><name pos:start="6673:13" pos:end="6673:35">host_to_target_timespec</name><argument_list pos:start="6673:36" pos:end="6673:46">(<argument pos:start="6673:37" pos:end="6673:40"><expr pos:start="6673:37" pos:end="6673:40"><name pos:start="6673:37" pos:end="6673:40">arg2</name></expr></argument>, <argument pos:start="6673:43" pos:end="6673:45"><expr pos:start="6673:43" pos:end="6673:45"><operator pos:start="6673:43" pos:end="6673:43">&amp;</operator><name pos:start="6673:44" pos:end="6673:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="6677:9" pos:end="6677:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="6681:1" pos:end="6681:6">#<cpp:directive pos:start="6681:2" pos:end="6681:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6683:1" pos:end="6683:29">#<cpp:directive pos:start="6683:2" pos:end="6683:6">ifdef</cpp:directive> <name pos:start="6683:8" pos:end="6683:29">TARGET_NR_clock_getres</name></cpp:ifdef>

    <case pos:start="6685:5" pos:end="6685:32">case <expr pos:start="6685:10" pos:end="6685:31"><name pos:start="6685:10" pos:end="6685:31">TARGET_NR_clock_getres</name></expr>:</case>

    <block pos:start="6687:5" pos:end="6706:0">{<block_content pos:start="6689:9" pos:end="6699:14">

        <decl_stmt pos:start="6689:9" pos:end="6689:27"><decl pos:start="6689:9" pos:end="6689:26"><type pos:start="6689:9" pos:end="6689:23"><name pos:start="6689:9" pos:end="6689:23"><name pos:start="6689:9" pos:end="6689:14">struct</name> <name pos:start="6689:16" pos:end="6689:23">timespec</name></name></type> <name pos:start="6689:25" pos:end="6689:26">ts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="6691:9" pos:end="6691:49"><expr pos:start="6691:9" pos:end="6691:48"><name pos:start="6691:9" pos:end="6691:11">ret</name> <operator pos:start="6691:13" pos:end="6691:13">=</operator> <call pos:start="6691:15" pos:end="6691:48"><name pos:start="6691:15" pos:end="6691:23">get_errno</name><argument_list pos:start="6691:24" pos:end="6691:48">(<argument pos:start="6691:25" pos:end="6691:47"><expr pos:start="6691:25" pos:end="6691:47"><call pos:start="6691:25" pos:end="6691:47"><name pos:start="6691:25" pos:end="6691:36">clock_getres</name><argument_list pos:start="6691:37" pos:end="6691:47">(<argument pos:start="6691:38" pos:end="6691:41"><expr pos:start="6691:38" pos:end="6691:41"><name pos:start="6691:38" pos:end="6691:41">arg1</name></expr></argument>, <argument pos:start="6691:44" pos:end="6691:46"><expr pos:start="6691:44" pos:end="6691:46"><operator pos:start="6691:44" pos:end="6691:44">&amp;</operator><name pos:start="6691:45" pos:end="6691:46">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6693:9" pos:end="6697:9"><if pos:start="6693:9" pos:end="6697:9">if <condition pos:start="6693:12" pos:end="6693:27">(<expr pos:start="6693:13" pos:end="6693:26"><operator pos:start="6693:13" pos:end="6693:13">!</operator><call pos:start="6693:14" pos:end="6693:26"><name pos:start="6693:14" pos:end="6693:21">is_error</name><argument_list pos:start="6693:22" pos:end="6693:26">(<argument pos:start="6693:23" pos:end="6693:25"><expr pos:start="6693:23" pos:end="6693:25"><name pos:start="6693:23" pos:end="6693:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6693:29" pos:end="6697:9">{<block_content pos:start="6695:13" pos:end="6695:47">

            <expr_stmt pos:start="6695:13" pos:end="6695:47"><expr pos:start="6695:13" pos:end="6695:46"><call pos:start="6695:13" pos:end="6695:46"><name pos:start="6695:13" pos:end="6695:35">host_to_target_timespec</name><argument_list pos:start="6695:36" pos:end="6695:46">(<argument pos:start="6695:37" pos:end="6695:40"><expr pos:start="6695:37" pos:end="6695:40"><name pos:start="6695:37" pos:end="6695:40">arg2</name></expr></argument>, <argument pos:start="6695:43" pos:end="6695:45"><expr pos:start="6695:43" pos:end="6695:45"><operator pos:start="6695:43" pos:end="6695:43">&amp;</operator><name pos:start="6695:44" pos:end="6695:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="6699:9" pos:end="6699:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="6703:1" pos:end="6703:6">#<cpp:directive pos:start="6703:2" pos:end="6703:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6705:1" pos:end="6705:32">#<cpp:directive pos:start="6705:2" pos:end="6705:6">ifdef</cpp:directive> <name pos:start="6705:8" pos:end="6705:32">TARGET_NR_clock_nanosleep</name></cpp:ifdef>

    <case pos:start="6707:5" pos:end="6707:35">case <expr pos:start="6707:10" pos:end="6707:34"><name pos:start="6707:10" pos:end="6707:34">TARGET_NR_clock_nanosleep</name></expr>:</case>

    <block pos:start="6709:5" pos:end="6730:0">{<block_content pos:start="6711:9" pos:end="6721:14">

        <decl_stmt pos:start="6711:9" pos:end="6711:27"><decl pos:start="6711:9" pos:end="6711:26"><type pos:start="6711:9" pos:end="6711:23"><name pos:start="6711:9" pos:end="6711:23"><name pos:start="6711:9" pos:end="6711:14">struct</name> <name pos:start="6711:16" pos:end="6711:23">timespec</name></name></type> <name pos:start="6711:25" pos:end="6711:26">ts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="6713:9" pos:end="6713:43"><expr pos:start="6713:9" pos:end="6713:42"><call pos:start="6713:9" pos:end="6713:42"><name pos:start="6713:9" pos:end="6713:31">target_to_host_timespec</name><argument_list pos:start="6713:32" pos:end="6713:42">(<argument pos:start="6713:33" pos:end="6713:35"><expr pos:start="6713:33" pos:end="6713:35"><operator pos:start="6713:33" pos:end="6713:33">&amp;</operator><name pos:start="6713:34" pos:end="6713:35">ts</name></expr></argument>, <argument pos:start="6713:38" pos:end="6713:41"><expr pos:start="6713:38" pos:end="6713:41"><name pos:start="6713:38" pos:end="6713:41">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6715:9" pos:end="6715:77"><expr pos:start="6715:9" pos:end="6715:76"><name pos:start="6715:9" pos:end="6715:11">ret</name> <operator pos:start="6715:13" pos:end="6715:13">=</operator> <call pos:start="6715:15" pos:end="6715:76"><name pos:start="6715:15" pos:end="6715:23">get_errno</name><argument_list pos:start="6715:24" pos:end="6715:76">(<argument pos:start="6715:25" pos:end="6715:75"><expr pos:start="6715:25" pos:end="6715:75"><call pos:start="6715:25" pos:end="6715:75"><name pos:start="6715:25" pos:end="6715:39">clock_nanosleep</name><argument_list pos:start="6715:40" pos:end="6715:75">(<argument pos:start="6715:41" pos:end="6715:44"><expr pos:start="6715:41" pos:end="6715:44"><name pos:start="6715:41" pos:end="6715:44">arg1</name></expr></argument>, <argument pos:start="6715:47" pos:end="6715:50"><expr pos:start="6715:47" pos:end="6715:50"><name pos:start="6715:47" pos:end="6715:50">arg2</name></expr></argument>, <argument pos:start="6715:53" pos:end="6715:55"><expr pos:start="6715:53" pos:end="6715:55"><operator pos:start="6715:53" pos:end="6715:53">&amp;</operator><name pos:start="6715:54" pos:end="6715:55">ts</name></expr></argument>, <argument pos:start="6715:58" pos:end="6715:74"><expr pos:start="6715:58" pos:end="6715:74"><ternary pos:start="6715:58" pos:end="6715:74"><condition pos:start="6715:58" pos:end="6715:63"><expr pos:start="6715:58" pos:end="6715:61"><name pos:start="6715:58" pos:end="6715:61">arg4</name></expr> ?</condition><then pos:start="6715:65" pos:end="6715:67"> <expr pos:start="6715:65" pos:end="6715:67"><operator pos:start="6715:65" pos:end="6715:65">&amp;</operator><name pos:start="6715:66" pos:end="6715:67">ts</name></expr> </then><else pos:start="6715:69" pos:end="6715:74">: <expr pos:start="6715:71" pos:end="6715:74"><name pos:start="6715:71" pos:end="6715:74">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6717:9" pos:end="6719:47"><if pos:start="6717:9" pos:end="6719:47">if <condition pos:start="6717:12" pos:end="6717:17">(<expr pos:start="6717:13" pos:end="6717:16"><name pos:start="6717:13" pos:end="6717:16">arg4</name></expr>)</condition><block type="pseudo" pos:start="6719:13" pos:end="6719:47"><block_content pos:start="6719:13" pos:end="6719:47">

            <expr_stmt pos:start="6719:13" pos:end="6719:47"><expr pos:start="6719:13" pos:end="6719:46"><call pos:start="6719:13" pos:end="6719:46"><name pos:start="6719:13" pos:end="6719:35">host_to_target_timespec</name><argument_list pos:start="6719:36" pos:end="6719:46">(<argument pos:start="6719:37" pos:end="6719:40"><expr pos:start="6719:37" pos:end="6719:40"><name pos:start="6719:37" pos:end="6719:40">arg4</name></expr></argument>, <argument pos:start="6719:43" pos:end="6719:45"><expr pos:start="6719:43" pos:end="6719:45"><operator pos:start="6719:43" pos:end="6719:43">&amp;</operator><name pos:start="6719:44" pos:end="6719:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="6721:9" pos:end="6721:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="6725:1" pos:end="6725:6">#<cpp:directive pos:start="6725:2" pos:end="6725:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="6729:1" pos:end="6729:71">#<cpp:directive pos:start="6729:2" pos:end="6729:3">if</cpp:directive> <expr pos:start="6729:5" pos:end="6729:71"><call pos:start="6729:5" pos:end="6729:38"><name pos:start="6729:5" pos:end="6729:11">defined</name><argument_list pos:start="6729:12" pos:end="6729:38">(<argument pos:start="6729:13" pos:end="6729:37"><expr pos:start="6729:13" pos:end="6729:37"><name pos:start="6729:13" pos:end="6729:37">TARGET_NR_set_tid_address</name></expr></argument>)</argument_list></call> <operator pos:start="6729:40" pos:end="6729:41">&amp;&amp;</operator> <call pos:start="6729:43" pos:end="6729:71"><name pos:start="6729:43" pos:end="6729:49">defined</name><argument_list pos:start="6729:50" pos:end="6729:71">(<argument pos:start="6729:51" pos:end="6729:70"><expr pos:start="6729:51" pos:end="6729:70"><name pos:start="6729:51" pos:end="6729:70">__NR_set_tid_address</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6731:5" pos:end="6731:35">case <expr pos:start="6731:10" pos:end="6731:34"><name pos:start="6731:10" pos:end="6731:34">TARGET_NR_set_tid_address</name></expr>:</case>

        <expr_stmt pos:start="6733:9" pos:end="6733:59"><expr pos:start="6733:9" pos:end="6733:58"><name pos:start="6733:9" pos:end="6733:11">ret</name> <operator pos:start="6733:13" pos:end="6733:13">=</operator> <call pos:start="6733:15" pos:end="6733:58"><name pos:start="6733:15" pos:end="6733:23">get_errno</name><argument_list pos:start="6733:24" pos:end="6733:58">(<argument pos:start="6733:25" pos:end="6733:57"><expr pos:start="6733:25" pos:end="6733:57"><call pos:start="6733:25" pos:end="6733:57"><name pos:start="6733:25" pos:end="6733:39">set_tid_address</name><argument_list pos:start="6733:40" pos:end="6733:57">(<argument pos:start="6733:41" pos:end="6733:56"><expr pos:start="6733:41" pos:end="6733:56"><operator pos:start="6733:41" pos:end="6733:41">(</operator><name pos:start="6733:42" pos:end="6733:44">int</name> <operator pos:start="6733:46" pos:end="6733:46">*</operator><operator pos:start="6733:47" pos:end="6733:47">)</operator><call pos:start="6733:48" pos:end="6733:56"><name pos:start="6733:48" pos:end="6733:50">g2h</name><argument_list pos:start="6733:51" pos:end="6733:56">(<argument pos:start="6733:52" pos:end="6733:55"><expr pos:start="6733:52" pos:end="6733:55"><name pos:start="6733:52" pos:end="6733:55">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6735:9" pos:end="6742:0">break;</break>

<cpp:endif pos:start="6737:1" pos:end="6737:6">#<cpp:directive pos:start="6737:2" pos:end="6737:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="6741:1" pos:end="6741:51">#<cpp:directive pos:start="6741:2" pos:end="6741:3">if</cpp:directive> <expr pos:start="6741:5" pos:end="6741:51"><call pos:start="6741:5" pos:end="6741:28"><name pos:start="6741:5" pos:end="6741:11">defined</name><argument_list pos:start="6741:12" pos:end="6741:28">(<argument pos:start="6741:13" pos:end="6741:27"><expr pos:start="6741:13" pos:end="6741:27"><name pos:start="6741:13" pos:end="6741:27">TARGET_NR_tkill</name></expr></argument>)</argument_list></call> <operator pos:start="6741:30" pos:end="6741:31">&amp;&amp;</operator> <call pos:start="6741:33" pos:end="6741:51"><name pos:start="6741:33" pos:end="6741:39">defined</name><argument_list pos:start="6741:40" pos:end="6741:51">(<argument pos:start="6741:41" pos:end="6741:50"><expr pos:start="6741:41" pos:end="6741:50"><name pos:start="6741:41" pos:end="6741:50">__NR_tkill</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6743:5" pos:end="6743:25">case <expr pos:start="6743:10" pos:end="6743:24"><name pos:start="6743:10" pos:end="6743:24">TARGET_NR_tkill</name></expr>:</case>

        <expr_stmt pos:start="6745:9" pos:end="6745:75"><expr pos:start="6745:9" pos:end="6745:74"><name pos:start="6745:9" pos:end="6745:11">ret</name> <operator pos:start="6745:13" pos:end="6745:13">=</operator> <call pos:start="6745:15" pos:end="6745:74"><name pos:start="6745:15" pos:end="6745:23">get_errno</name><argument_list pos:start="6745:24" pos:end="6745:74">(<argument pos:start="6745:25" pos:end="6745:73"><expr pos:start="6745:25" pos:end="6745:73"><call pos:start="6745:25" pos:end="6745:73"><name pos:start="6745:25" pos:end="6745:33">sys_tkill</name><argument_list pos:start="6745:34" pos:end="6745:73">(<argument pos:start="6745:35" pos:end="6745:43"><expr pos:start="6745:35" pos:end="6745:43"><operator pos:start="6745:35" pos:end="6745:35">(</operator><name pos:start="6745:36" pos:end="6745:38">int</name><operator pos:start="6745:39" pos:end="6745:39">)</operator><name pos:start="6745:40" pos:end="6745:43">arg1</name></expr></argument>, <argument pos:start="6745:46" pos:end="6745:72"><expr pos:start="6745:46" pos:end="6745:72"><call pos:start="6745:46" pos:end="6745:72"><name pos:start="6745:46" pos:end="6745:66">target_to_host_signal</name><argument_list pos:start="6745:67" pos:end="6745:72">(<argument pos:start="6745:68" pos:end="6745:71"><expr pos:start="6745:68" pos:end="6745:71"><name pos:start="6745:68" pos:end="6745:71">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6747:9" pos:end="6754:0">break;</break>

<cpp:endif pos:start="6749:1" pos:end="6749:6">#<cpp:directive pos:start="6749:2" pos:end="6749:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="6753:1" pos:end="6753:53">#<cpp:directive pos:start="6753:2" pos:end="6753:3">if</cpp:directive> <expr pos:start="6753:5" pos:end="6753:53"><call pos:start="6753:5" pos:end="6753:29"><name pos:start="6753:5" pos:end="6753:11">defined</name><argument_list pos:start="6753:12" pos:end="6753:29">(<argument pos:start="6753:13" pos:end="6753:28"><expr pos:start="6753:13" pos:end="6753:28"><name pos:start="6753:13" pos:end="6753:28">TARGET_NR_tgkill</name></expr></argument>)</argument_list></call> <operator pos:start="6753:31" pos:end="6753:32">&amp;&amp;</operator> <call pos:start="6753:34" pos:end="6753:53"><name pos:start="6753:34" pos:end="6753:40">defined</name><argument_list pos:start="6753:41" pos:end="6753:53">(<argument pos:start="6753:42" pos:end="6753:52"><expr pos:start="6753:42" pos:end="6753:52"><name pos:start="6753:42" pos:end="6753:52">__NR_tgkill</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6755:5" pos:end="6755:26">case <expr pos:start="6755:10" pos:end="6755:25"><name pos:start="6755:10" pos:end="6755:25">TARGET_NR_tgkill</name></expr>:</case>

	<expr_stmt pos:start="6757:9" pos:end="6759:54"><expr pos:start="6757:9" pos:end="6759:53"><name pos:start="6757:9" pos:end="6757:11">ret</name> <operator pos:start="6757:13" pos:end="6757:13">=</operator> <call pos:start="6757:15" pos:end="6759:53"><name pos:start="6757:15" pos:end="6757:23">get_errno</name><argument_list pos:start="6757:24" pos:end="6759:53">(<argument pos:start="6757:25" pos:end="6759:52"><expr pos:start="6757:25" pos:end="6759:52"><call pos:start="6757:25" pos:end="6759:52"><name pos:start="6757:25" pos:end="6757:34">sys_tgkill</name><argument_list pos:start="6757:35" pos:end="6759:52">(<argument pos:start="6757:36" pos:end="6757:44"><expr pos:start="6757:36" pos:end="6757:44"><operator pos:start="6757:36" pos:end="6757:36">(</operator><name pos:start="6757:37" pos:end="6757:39">int</name><operator pos:start="6757:40" pos:end="6757:40">)</operator><name pos:start="6757:41" pos:end="6757:44">arg1</name></expr></argument>, <argument pos:start="6757:47" pos:end="6757:55"><expr pos:start="6757:47" pos:end="6757:55"><operator pos:start="6757:47" pos:end="6757:47">(</operator><name pos:start="6757:48" pos:end="6757:50">int</name><operator pos:start="6757:51" pos:end="6757:51">)</operator><name pos:start="6757:52" pos:end="6757:55">arg2</name></expr></argument>,

                        <argument pos:start="6759:25" pos:end="6759:51"><expr pos:start="6759:25" pos:end="6759:51"><call pos:start="6759:25" pos:end="6759:51"><name pos:start="6759:25" pos:end="6759:45">target_to_host_signal</name><argument_list pos:start="6759:46" pos:end="6759:51">(<argument pos:start="6759:47" pos:end="6759:50"><expr pos:start="6759:47" pos:end="6759:50"><name pos:start="6759:47" pos:end="6759:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="6761:9" pos:end="6768:0">break;</break>

<cpp:endif pos:start="6763:1" pos:end="6763:6">#<cpp:directive pos:start="6763:2" pos:end="6763:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="6767:1" pos:end="6767:32">#<cpp:directive pos:start="6767:2" pos:end="6767:6">ifdef</cpp:directive> <name pos:start="6767:8" pos:end="6767:32">TARGET_NR_set_robust_list</name></cpp:ifdef>

    <case pos:start="6769:5" pos:end="6769:35">case <expr pos:start="6769:10" pos:end="6769:34"><name pos:start="6769:10" pos:end="6769:34">TARGET_NR_set_robust_list</name></expr>:</case>

	<goto pos:start="6771:9" pos:end="6778:0">goto <name pos:start="6771:14" pos:end="6771:33">unimplemented_nowarn</name>;</goto>

<cpp:endif pos:start="6773:1" pos:end="6773:6">#<cpp:directive pos:start="6773:2" pos:end="6773:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="6777:1" pos:end="6777:59">#<cpp:directive pos:start="6777:2" pos:end="6777:3">if</cpp:directive> <expr pos:start="6777:5" pos:end="6777:59"><call pos:start="6777:5" pos:end="6777:32"><name pos:start="6777:5" pos:end="6777:11">defined</name><argument_list pos:start="6777:12" pos:end="6777:32">(<argument pos:start="6777:13" pos:end="6777:31"><expr pos:start="6777:13" pos:end="6777:31"><name pos:start="6777:13" pos:end="6777:31">TARGET_NR_utimensat</name></expr></argument>)</argument_list></call> <operator pos:start="6777:34" pos:end="6777:35">&amp;&amp;</operator> <call pos:start="6777:37" pos:end="6777:59"><name pos:start="6777:37" pos:end="6777:43">defined</name><argument_list pos:start="6777:44" pos:end="6777:59">(<argument pos:start="6777:45" pos:end="6777:58"><expr pos:start="6777:45" pos:end="6777:58"><name pos:start="6777:45" pos:end="6777:58">__NR_utimensat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6779:5" pos:end="6779:29">case <expr pos:start="6779:10" pos:end="6779:28"><name pos:start="6779:10" pos:end="6779:28">TARGET_NR_utimensat</name></expr>:</case>

        <block pos:start="6781:9" pos:end="6819:9">{<block_content pos:start="6783:13" pos:end="6817:13">

            <decl_stmt pos:start="6783:13" pos:end="6783:40"><decl pos:start="6783:13" pos:end="6783:32"><type pos:start="6783:13" pos:end="6783:29"><name pos:start="6783:13" pos:end="6783:27"><name pos:start="6783:13" pos:end="6783:18">struct</name> <name pos:start="6783:20" pos:end="6783:27">timespec</name></name> <modifier pos:start="6783:29" pos:end="6783:29">*</modifier></type><name pos:start="6783:30" pos:end="6783:32">tsp</name></decl>, <decl pos:start="6783:35" pos:end="6783:39"><type ref="prev" pos:start="6783:13" pos:end="6783:29"/><name pos:start="6783:35" pos:end="6783:39"><name pos:start="6783:35" pos:end="6783:36">ts</name><index pos:start="6783:37" pos:end="6783:39">[<expr pos:start="6783:38" pos:end="6783:38"><literal type="number" pos:start="6783:38" pos:end="6783:38">2</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt pos:start="6785:13" pos:end="6797:13"><if pos:start="6785:13" pos:end="6789:13">if <condition pos:start="6785:16" pos:end="6785:22">(<expr pos:start="6785:17" pos:end="6785:21"><operator pos:start="6785:17" pos:end="6785:17">!</operator><name pos:start="6785:18" pos:end="6785:21">arg3</name></expr>)</condition> <block pos:start="6785:24" pos:end="6789:13">{<block_content pos:start="6787:17" pos:end="6787:27">

                <expr_stmt pos:start="6787:17" pos:end="6787:27"><expr pos:start="6787:17" pos:end="6787:26"><name pos:start="6787:17" pos:end="6787:19">tsp</name> <operator pos:start="6787:21" pos:end="6787:21">=</operator> <name pos:start="6787:23" pos:end="6787:26">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6789:15" pos:end="6797:13">else <block pos:start="6789:20" pos:end="6797:13">{<block_content pos:start="6791:17" pos:end="6795:25">

                <expr_stmt pos:start="6791:17" pos:end="6791:50"><expr pos:start="6791:17" pos:end="6791:49"><call pos:start="6791:17" pos:end="6791:49"><name pos:start="6791:17" pos:end="6791:39">target_to_host_timespec</name><argument_list pos:start="6791:40" pos:end="6791:49">(<argument pos:start="6791:41" pos:end="6791:42"><expr pos:start="6791:41" pos:end="6791:42"><name pos:start="6791:41" pos:end="6791:42">ts</name></expr></argument>, <argument pos:start="6791:45" pos:end="6791:48"><expr pos:start="6791:45" pos:end="6791:48"><name pos:start="6791:45" pos:end="6791:48">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6793:17" pos:end="6793:83"><expr pos:start="6793:17" pos:end="6793:82"><call pos:start="6793:17" pos:end="6793:82"><name pos:start="6793:17" pos:end="6793:39">target_to_host_timespec</name><argument_list pos:start="6793:40" pos:end="6793:82">(<argument pos:start="6793:41" pos:end="6793:44"><expr pos:start="6793:41" pos:end="6793:44"><name pos:start="6793:41" pos:end="6793:42">ts</name><operator pos:start="6793:43" pos:end="6793:43">+</operator><literal type="number" pos:start="6793:44" pos:end="6793:44">1</literal></expr></argument>, <argument pos:start="6793:47" pos:end="6793:81"><expr pos:start="6793:47" pos:end="6793:81"><name pos:start="6793:47" pos:end="6793:50">arg3</name><operator pos:start="6793:51" pos:end="6793:51">+</operator><sizeof pos:start="6793:52" pos:end="6793:81">sizeof<argument_list pos:start="6793:58" pos:end="6793:81">(<argument pos:start="6793:59" pos:end="6793:80"><expr pos:start="6793:59" pos:end="6793:80">struct <name pos:start="6793:66" pos:end="6793:80">target_timespec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6795:17" pos:end="6795:25"><expr pos:start="6795:17" pos:end="6795:24"><name pos:start="6795:17" pos:end="6795:19">tsp</name> <operator pos:start="6795:21" pos:end="6795:21">=</operator> <name pos:start="6795:23" pos:end="6795:24">ts</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="6799:13" pos:end="6817:13"><if pos:start="6799:13" pos:end="6801:70">if <condition pos:start="6799:16" pos:end="6799:22">(<expr pos:start="6799:17" pos:end="6799:21"><operator pos:start="6799:17" pos:end="6799:17">!</operator><name pos:start="6799:18" pos:end="6799:21">arg2</name></expr>)</condition><block type="pseudo" pos:start="6801:17" pos:end="6801:70"><block_content pos:start="6801:17" pos:end="6801:70">

                <expr_stmt pos:start="6801:17" pos:end="6801:70"><expr pos:start="6801:17" pos:end="6801:69"><name pos:start="6801:17" pos:end="6801:19">ret</name> <operator pos:start="6801:21" pos:end="6801:21">=</operator> <call pos:start="6801:23" pos:end="6801:69"><name pos:start="6801:23" pos:end="6801:31">get_errno</name><argument_list pos:start="6801:32" pos:end="6801:69">(<argument pos:start="6801:33" pos:end="6801:68"><expr pos:start="6801:33" pos:end="6801:68"><call pos:start="6801:33" pos:end="6801:68"><name pos:start="6801:33" pos:end="6801:45">sys_utimensat</name><argument_list pos:start="6801:46" pos:end="6801:68">(<argument pos:start="6801:47" pos:end="6801:50"><expr pos:start="6801:47" pos:end="6801:50"><name pos:start="6801:47" pos:end="6801:50">arg1</name></expr></argument>, <argument pos:start="6801:53" pos:end="6801:56"><expr pos:start="6801:53" pos:end="6801:56"><name pos:start="6801:53" pos:end="6801:56">NULL</name></expr></argument>, <argument pos:start="6801:59" pos:end="6801:61"><expr pos:start="6801:59" pos:end="6801:61"><name pos:start="6801:59" pos:end="6801:61">tsp</name></expr></argument>, <argument pos:start="6801:64" pos:end="6801:67"><expr pos:start="6801:64" pos:end="6801:67"><name pos:start="6801:64" pos:end="6801:67">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="6803:13" pos:end="6817:13">else <block pos:start="6803:18" pos:end="6817:13">{<block_content pos:start="6805:17" pos:end="6815:40">

                <if_stmt pos:start="6805:17" pos:end="6811:17"><if pos:start="6805:17" pos:end="6811:17">if <condition pos:start="6805:20" pos:end="6805:50">(<expr pos:start="6805:21" pos:end="6805:49"><operator pos:start="6805:21" pos:end="6805:21">!</operator><operator pos:start="6805:22" pos:end="6805:22">(</operator><name pos:start="6805:23" pos:end="6805:23">p</name> <operator pos:start="6805:25" pos:end="6805:25">=</operator> <call pos:start="6805:27" pos:end="6805:48"><name pos:start="6805:27" pos:end="6805:42">lock_user_string</name><argument_list pos:start="6805:43" pos:end="6805:48">(<argument pos:start="6805:44" pos:end="6805:47"><expr pos:start="6805:44" pos:end="6805:47"><name pos:start="6805:44" pos:end="6805:47">arg2</name></expr></argument>)</argument_list></call><operator pos:start="6805:49" pos:end="6805:49">)</operator></expr>)</condition> <block pos:start="6805:52" pos:end="6811:17">{<block_content pos:start="6807:21" pos:end="6809:30">

                    <expr_stmt pos:start="6807:21" pos:end="6807:41"><expr pos:start="6807:21" pos:end="6807:40"><name pos:start="6807:21" pos:end="6807:23">ret</name> <operator pos:start="6807:25" pos:end="6807:25">=</operator> <operator pos:start="6807:27" pos:end="6807:27">-</operator><name pos:start="6807:28" pos:end="6807:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <goto pos:start="6809:21" pos:end="6809:30">goto <name pos:start="6809:26" pos:end="6809:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="6813:17" pos:end="6813:73"><expr pos:start="6813:17" pos:end="6813:72"><name pos:start="6813:17" pos:end="6813:19">ret</name> <operator pos:start="6813:21" pos:end="6813:21">=</operator> <call pos:start="6813:23" pos:end="6813:72"><name pos:start="6813:23" pos:end="6813:31">get_errno</name><argument_list pos:start="6813:32" pos:end="6813:72">(<argument pos:start="6813:33" pos:end="6813:71"><expr pos:start="6813:33" pos:end="6813:71"><call pos:start="6813:33" pos:end="6813:71"><name pos:start="6813:33" pos:end="6813:45">sys_utimensat</name><argument_list pos:start="6813:46" pos:end="6813:71">(<argument pos:start="6813:47" pos:end="6813:50"><expr pos:start="6813:47" pos:end="6813:50"><name pos:start="6813:47" pos:end="6813:50">arg1</name></expr></argument>, <argument pos:start="6813:53" pos:end="6813:59"><expr pos:start="6813:53" pos:end="6813:59"><call pos:start="6813:53" pos:end="6813:59"><name pos:start="6813:53" pos:end="6813:56">path</name><argument_list pos:start="6813:57" pos:end="6813:59">(<argument pos:start="6813:58" pos:end="6813:58"><expr pos:start="6813:58" pos:end="6813:58"><name pos:start="6813:58" pos:end="6813:58">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="6813:62" pos:end="6813:64"><expr pos:start="6813:62" pos:end="6813:64"><name pos:start="6813:62" pos:end="6813:64">tsp</name></expr></argument>, <argument pos:start="6813:67" pos:end="6813:70"><expr pos:start="6813:67" pos:end="6813:70"><name pos:start="6813:67" pos:end="6813:70">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6815:17" pos:end="6815:40"><expr pos:start="6815:17" pos:end="6815:39"><call pos:start="6815:17" pos:end="6815:39"><name pos:start="6815:17" pos:end="6815:27">unlock_user</name><argument_list pos:start="6815:28" pos:end="6815:39">(<argument pos:start="6815:29" pos:end="6815:29"><expr pos:start="6815:29" pos:end="6815:29"><name pos:start="6815:29" pos:end="6815:29">p</name></expr></argument>, <argument pos:start="6815:32" pos:end="6815:35"><expr pos:start="6815:32" pos:end="6815:35"><name pos:start="6815:32" pos:end="6815:35">arg2</name></expr></argument>, <argument pos:start="6815:38" pos:end="6815:38"><expr pos:start="6815:38" pos:end="6815:38"><literal type="number" pos:start="6815:38" pos:end="6815:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

	<break pos:start="6821:9" pos:end="6826:0">break;</break>

<cpp:endif pos:start="6823:1" pos:end="6823:6">#<cpp:directive pos:start="6823:2" pos:end="6823:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="6825:1" pos:end="6825:28">#<cpp:directive pos:start="6825:2" pos:end="6825:3">if</cpp:directive> <expr pos:start="6825:5" pos:end="6825:28"><call pos:start="6825:5" pos:end="6825:28"><name pos:start="6825:5" pos:end="6825:11">defined</name><argument_list pos:start="6825:12" pos:end="6825:28">(<argument pos:start="6825:13" pos:end="6825:27"><expr pos:start="6825:13" pos:end="6825:27"><name pos:start="6825:13" pos:end="6825:27">CONFIG_USE_NPTL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6827:5" pos:end="6827:25">case <expr pos:start="6827:10" pos:end="6827:24"><name pos:start="6827:10" pos:end="6827:24">TARGET_NR_futex</name></expr>:</case>

        <expr_stmt pos:start="6829:9" pos:end="6829:59"><expr pos:start="6829:9" pos:end="6829:58"><name pos:start="6829:9" pos:end="6829:11">ret</name> <operator pos:start="6829:13" pos:end="6829:13">=</operator> <call pos:start="6829:15" pos:end="6829:58"><name pos:start="6829:15" pos:end="6829:22">do_futex</name><argument_list pos:start="6829:23" pos:end="6829:58">(<argument pos:start="6829:24" pos:end="6829:27"><expr pos:start="6829:24" pos:end="6829:27"><name pos:start="6829:24" pos:end="6829:27">arg1</name></expr></argument>, <argument pos:start="6829:30" pos:end="6829:33"><expr pos:start="6829:30" pos:end="6829:33"><name pos:start="6829:30" pos:end="6829:33">arg2</name></expr></argument>, <argument pos:start="6829:36" pos:end="6829:39"><expr pos:start="6829:36" pos:end="6829:39"><name pos:start="6829:36" pos:end="6829:39">arg3</name></expr></argument>, <argument pos:start="6829:42" pos:end="6829:45"><expr pos:start="6829:42" pos:end="6829:45"><name pos:start="6829:42" pos:end="6829:45">arg4</name></expr></argument>, <argument pos:start="6829:48" pos:end="6829:51"><expr pos:start="6829:48" pos:end="6829:51"><name pos:start="6829:48" pos:end="6829:51">arg5</name></expr></argument>, <argument pos:start="6829:54" pos:end="6829:57"><expr pos:start="6829:54" pos:end="6829:57"><name pos:start="6829:54" pos:end="6829:57">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6831:9" pos:end="6836:0">break;</break>

<cpp:endif pos:start="6833:1" pos:end="6833:6">#<cpp:directive pos:start="6833:2" pos:end="6833:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="6835:1" pos:end="6835:65">#<cpp:directive pos:start="6835:2" pos:end="6835:3">if</cpp:directive> <expr pos:start="6835:5" pos:end="6835:65"><call pos:start="6835:5" pos:end="6835:35"><name pos:start="6835:5" pos:end="6835:11">defined</name><argument_list pos:start="6835:12" pos:end="6835:35">(<argument pos:start="6835:13" pos:end="6835:34"><expr pos:start="6835:13" pos:end="6835:34"><name pos:start="6835:13" pos:end="6835:34">TARGET_NR_inotify_init</name></expr></argument>)</argument_list></call> <operator pos:start="6835:37" pos:end="6835:38">&amp;&amp;</operator> <call pos:start="6835:40" pos:end="6835:65"><name pos:start="6835:40" pos:end="6835:46">defined</name><argument_list pos:start="6835:47" pos:end="6835:65">(<argument pos:start="6835:48" pos:end="6835:64"><expr pos:start="6835:48" pos:end="6835:64"><name pos:start="6835:48" pos:end="6835:64">__NR_inotify_init</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6837:5" pos:end="6837:32">case <expr pos:start="6837:10" pos:end="6837:31"><name pos:start="6837:10" pos:end="6837:31">TARGET_NR_inotify_init</name></expr>:</case>

        <expr_stmt pos:start="6839:9" pos:end="6839:44"><expr pos:start="6839:9" pos:end="6839:43"><name pos:start="6839:9" pos:end="6839:11">ret</name> <operator pos:start="6839:13" pos:end="6839:13">=</operator> <call pos:start="6839:15" pos:end="6839:43"><name pos:start="6839:15" pos:end="6839:23">get_errno</name><argument_list pos:start="6839:24" pos:end="6839:43">(<argument pos:start="6839:25" pos:end="6839:42"><expr pos:start="6839:25" pos:end="6839:42"><call pos:start="6839:25" pos:end="6839:42"><name pos:start="6839:25" pos:end="6839:40">sys_inotify_init</name><argument_list pos:start="6839:41" pos:end="6839:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6841:9" pos:end="6848:0">break;</break>

<cpp:endif pos:start="6843:1" pos:end="6843:6">#<cpp:directive pos:start="6843:2" pos:end="6843:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6845:1" pos:end="6845:22">#<cpp:directive pos:start="6845:2" pos:end="6845:6">ifdef</cpp:directive> <name pos:start="6845:8" pos:end="6845:22">CONFIG_INOTIFY1</name></cpp:ifdef>

<cpp:if pos:start="6847:1" pos:end="6847:67">#<cpp:directive pos:start="6847:2" pos:end="6847:3">if</cpp:directive> <expr pos:start="6847:5" pos:end="6847:67"><call pos:start="6847:5" pos:end="6847:36"><name pos:start="6847:5" pos:end="6847:11">defined</name><argument_list pos:start="6847:12" pos:end="6847:36">(<argument pos:start="6847:13" pos:end="6847:35"><expr pos:start="6847:13" pos:end="6847:35"><name pos:start="6847:13" pos:end="6847:35">TARGET_NR_inotify_init1</name></expr></argument>)</argument_list></call> <operator pos:start="6847:38" pos:end="6847:39">&amp;&amp;</operator> <call pos:start="6847:41" pos:end="6847:67"><name pos:start="6847:41" pos:end="6847:47">defined</name><argument_list pos:start="6847:48" pos:end="6847:67">(<argument pos:start="6847:49" pos:end="6847:66"><expr pos:start="6847:49" pos:end="6847:66"><name pos:start="6847:49" pos:end="6847:66">__NR_inotify_init1</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6849:5" pos:end="6849:33">case <expr pos:start="6849:10" pos:end="6849:32"><name pos:start="6849:10" pos:end="6849:32">TARGET_NR_inotify_init1</name></expr>:</case>

        <expr_stmt pos:start="6851:9" pos:end="6851:49"><expr pos:start="6851:9" pos:end="6851:48"><name pos:start="6851:9" pos:end="6851:11">ret</name> <operator pos:start="6851:13" pos:end="6851:13">=</operator> <call pos:start="6851:15" pos:end="6851:48"><name pos:start="6851:15" pos:end="6851:23">get_errno</name><argument_list pos:start="6851:24" pos:end="6851:48">(<argument pos:start="6851:25" pos:end="6851:47"><expr pos:start="6851:25" pos:end="6851:47"><call pos:start="6851:25" pos:end="6851:47"><name pos:start="6851:25" pos:end="6851:41">sys_inotify_init1</name><argument_list pos:start="6851:42" pos:end="6851:47">(<argument pos:start="6851:43" pos:end="6851:46"><expr pos:start="6851:43" pos:end="6851:46"><name pos:start="6851:43" pos:end="6851:46">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6853:9" pos:end="6860:0">break;</break>

<cpp:endif pos:start="6855:1" pos:end="6855:6">#<cpp:directive pos:start="6855:2" pos:end="6855:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="6857:1" pos:end="6857:6">#<cpp:directive pos:start="6857:2" pos:end="6857:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="6859:1" pos:end="6859:75">#<cpp:directive pos:start="6859:2" pos:end="6859:3">if</cpp:directive> <expr pos:start="6859:5" pos:end="6859:75"><call pos:start="6859:5" pos:end="6859:40"><name pos:start="6859:5" pos:end="6859:11">defined</name><argument_list pos:start="6859:12" pos:end="6859:40">(<argument pos:start="6859:13" pos:end="6859:39"><expr pos:start="6859:13" pos:end="6859:39"><name pos:start="6859:13" pos:end="6859:39">TARGET_NR_inotify_add_watch</name></expr></argument>)</argument_list></call> <operator pos:start="6859:42" pos:end="6859:43">&amp;&amp;</operator> <call pos:start="6859:45" pos:end="6859:75"><name pos:start="6859:45" pos:end="6859:51">defined</name><argument_list pos:start="6859:52" pos:end="6859:75">(<argument pos:start="6859:53" pos:end="6859:74"><expr pos:start="6859:53" pos:end="6859:74"><name pos:start="6859:53" pos:end="6859:74">__NR_inotify_add_watch</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6861:5" pos:end="6861:37">case <expr pos:start="6861:10" pos:end="6861:36"><name pos:start="6861:10" pos:end="6861:36">TARGET_NR_inotify_add_watch</name></expr>:</case>

        <expr_stmt pos:start="6863:9" pos:end="6863:35"><expr pos:start="6863:9" pos:end="6863:34"><name pos:start="6863:9" pos:end="6863:9">p</name> <operator pos:start="6863:11" pos:end="6863:11">=</operator> <call pos:start="6863:13" pos:end="6863:34"><name pos:start="6863:13" pos:end="6863:28">lock_user_string</name><argument_list pos:start="6863:29" pos:end="6863:34">(<argument pos:start="6863:30" pos:end="6863:33"><expr pos:start="6863:30" pos:end="6863:33"><name pos:start="6863:30" pos:end="6863:33">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6865:9" pos:end="6865:68"><expr pos:start="6865:9" pos:end="6865:67"><name pos:start="6865:9" pos:end="6865:11">ret</name> <operator pos:start="6865:13" pos:end="6865:13">=</operator> <call pos:start="6865:15" pos:end="6865:67"><name pos:start="6865:15" pos:end="6865:23">get_errno</name><argument_list pos:start="6865:24" pos:end="6865:67">(<argument pos:start="6865:25" pos:end="6865:66"><expr pos:start="6865:25" pos:end="6865:66"><call pos:start="6865:25" pos:end="6865:66"><name pos:start="6865:25" pos:end="6865:45">sys_inotify_add_watch</name><argument_list pos:start="6865:46" pos:end="6865:66">(<argument pos:start="6865:47" pos:end="6865:50"><expr pos:start="6865:47" pos:end="6865:50"><name pos:start="6865:47" pos:end="6865:50">arg1</name></expr></argument>, <argument pos:start="6865:53" pos:end="6865:59"><expr pos:start="6865:53" pos:end="6865:59"><call pos:start="6865:53" pos:end="6865:59"><name pos:start="6865:53" pos:end="6865:56">path</name><argument_list pos:start="6865:57" pos:end="6865:59">(<argument pos:start="6865:58" pos:end="6865:58"><expr pos:start="6865:58" pos:end="6865:58"><name pos:start="6865:58" pos:end="6865:58">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="6865:62" pos:end="6865:65"><expr pos:start="6865:62" pos:end="6865:65"><name pos:start="6865:62" pos:end="6865:65">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6867:9" pos:end="6867:32"><expr pos:start="6867:9" pos:end="6867:31"><call pos:start="6867:9" pos:end="6867:31"><name pos:start="6867:9" pos:end="6867:19">unlock_user</name><argument_list pos:start="6867:20" pos:end="6867:31">(<argument pos:start="6867:21" pos:end="6867:21"><expr pos:start="6867:21" pos:end="6867:21"><name pos:start="6867:21" pos:end="6867:21">p</name></expr></argument>, <argument pos:start="6867:24" pos:end="6867:27"><expr pos:start="6867:24" pos:end="6867:27"><name pos:start="6867:24" pos:end="6867:27">arg2</name></expr></argument>, <argument pos:start="6867:30" pos:end="6867:30"><expr pos:start="6867:30" pos:end="6867:30"><literal type="number" pos:start="6867:30" pos:end="6867:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6869:9" pos:end="6874:0">break;</break>

<cpp:endif pos:start="6871:1" pos:end="6871:6">#<cpp:directive pos:start="6871:2" pos:end="6871:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="6873:1" pos:end="6873:73">#<cpp:directive pos:start="6873:2" pos:end="6873:3">if</cpp:directive> <expr pos:start="6873:5" pos:end="6873:73"><call pos:start="6873:5" pos:end="6873:39"><name pos:start="6873:5" pos:end="6873:11">defined</name><argument_list pos:start="6873:12" pos:end="6873:39">(<argument pos:start="6873:13" pos:end="6873:38"><expr pos:start="6873:13" pos:end="6873:38"><name pos:start="6873:13" pos:end="6873:38">TARGET_NR_inotify_rm_watch</name></expr></argument>)</argument_list></call> <operator pos:start="6873:41" pos:end="6873:42">&amp;&amp;</operator> <call pos:start="6873:44" pos:end="6873:73"><name pos:start="6873:44" pos:end="6873:50">defined</name><argument_list pos:start="6873:51" pos:end="6873:73">(<argument pos:start="6873:52" pos:end="6873:72"><expr pos:start="6873:52" pos:end="6873:72"><name pos:start="6873:52" pos:end="6873:72">__NR_inotify_rm_watch</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6875:5" pos:end="6875:36">case <expr pos:start="6875:10" pos:end="6875:35"><name pos:start="6875:10" pos:end="6875:35">TARGET_NR_inotify_rm_watch</name></expr>:</case>

        <expr_stmt pos:start="6877:9" pos:end="6877:58"><expr pos:start="6877:9" pos:end="6877:57"><name pos:start="6877:9" pos:end="6877:11">ret</name> <operator pos:start="6877:13" pos:end="6877:13">=</operator> <call pos:start="6877:15" pos:end="6877:57"><name pos:start="6877:15" pos:end="6877:23">get_errno</name><argument_list pos:start="6877:24" pos:end="6877:57">(<argument pos:start="6877:25" pos:end="6877:56"><expr pos:start="6877:25" pos:end="6877:56"><call pos:start="6877:25" pos:end="6877:56"><name pos:start="6877:25" pos:end="6877:44">sys_inotify_rm_watch</name><argument_list pos:start="6877:45" pos:end="6877:56">(<argument pos:start="6877:46" pos:end="6877:49"><expr pos:start="6877:46" pos:end="6877:49"><name pos:start="6877:46" pos:end="6877:49">arg1</name></expr></argument>, <argument pos:start="6877:52" pos:end="6877:55"><expr pos:start="6877:52" pos:end="6877:55"><name pos:start="6877:52" pos:end="6877:55">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6879:9" pos:end="6886:0">break;</break>

<cpp:endif pos:start="6881:1" pos:end="6881:6">#<cpp:directive pos:start="6881:2" pos:end="6881:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="6885:1" pos:end="6885:55">#<cpp:directive pos:start="6885:2" pos:end="6885:3">if</cpp:directive> <expr pos:start="6885:5" pos:end="6885:55"><call pos:start="6885:5" pos:end="6885:30"><name pos:start="6885:5" pos:end="6885:11">defined</name><argument_list pos:start="6885:12" pos:end="6885:30">(<argument pos:start="6885:13" pos:end="6885:29"><expr pos:start="6885:13" pos:end="6885:29"><name pos:start="6885:13" pos:end="6885:29">TARGET_NR_mq_open</name></expr></argument>)</argument_list></call> <operator pos:start="6885:32" pos:end="6885:33">&amp;&amp;</operator> <call pos:start="6885:35" pos:end="6885:55"><name pos:start="6885:35" pos:end="6885:41">defined</name><argument_list pos:start="6885:42" pos:end="6885:55">(<argument pos:start="6885:43" pos:end="6885:54"><expr pos:start="6885:43" pos:end="6885:54"><name pos:start="6885:43" pos:end="6885:54">__NR_mq_open</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6887:5" pos:end="6887:27">case <expr pos:start="6887:10" pos:end="6887:26"><name pos:start="6887:10" pos:end="6887:26">TARGET_NR_mq_open</name></expr>:</case>

        <block pos:start="6889:9" pos:end="6905:9">{<block_content pos:start="6891:13" pos:end="6903:37">

            <decl_stmt pos:start="6891:13" pos:end="6891:41"><decl pos:start="6891:13" pos:end="6891:40"><type pos:start="6891:13" pos:end="6891:26"><name pos:start="6891:13" pos:end="6891:26"><name pos:start="6891:13" pos:end="6891:18">struct</name> <name pos:start="6891:20" pos:end="6891:26">mq_attr</name></name></type> <name pos:start="6891:28" pos:end="6891:40">posix_mq_attr</name></decl>;</decl_stmt>



            <expr_stmt pos:start="6895:13" pos:end="6895:43"><expr pos:start="6895:13" pos:end="6895:42"><name pos:start="6895:13" pos:end="6895:13">p</name> <operator pos:start="6895:15" pos:end="6895:15">=</operator> <call pos:start="6895:17" pos:end="6895:42"><name pos:start="6895:17" pos:end="6895:32">lock_user_string</name><argument_list pos:start="6895:33" pos:end="6895:42">(<argument pos:start="6895:34" pos:end="6895:41"><expr pos:start="6895:34" pos:end="6895:41"><name pos:start="6895:34" pos:end="6895:37">arg1</name> <operator pos:start="6895:39" pos:end="6895:39">-</operator> <literal type="number" pos:start="6895:41" pos:end="6895:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6897:13" pos:end="6899:62"><if pos:start="6897:13" pos:end="6899:62">if <condition pos:start="6897:16" pos:end="6897:26">(<expr pos:start="6897:17" pos:end="6897:25"><name pos:start="6897:17" pos:end="6897:20">arg4</name> <operator pos:start="6897:22" pos:end="6897:23">!=</operator> <literal type="number" pos:start="6897:25" pos:end="6897:25">0</literal></expr>)</condition><block type="pseudo" pos:start="6899:17" pos:end="6899:62"><block_content pos:start="6899:17" pos:end="6899:62">

                <expr_stmt pos:start="6899:17" pos:end="6899:62"><expr pos:start="6899:17" pos:end="6899:61"><call pos:start="6899:17" pos:end="6899:61"><name pos:start="6899:17" pos:end="6899:38">copy_from_user_mq_attr</name> <argument_list pos:start="6899:40" pos:end="6899:61">(<argument pos:start="6899:41" pos:end="6899:54"><expr pos:start="6899:41" pos:end="6899:54"><operator pos:start="6899:41" pos:end="6899:41">&amp;</operator><name pos:start="6899:42" pos:end="6899:54">posix_mq_attr</name></expr></argument>, <argument pos:start="6899:57" pos:end="6899:60"><expr pos:start="6899:57" pos:end="6899:60"><name pos:start="6899:57" pos:end="6899:60">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6901:13" pos:end="6901:68"><expr pos:start="6901:13" pos:end="6901:67"><name pos:start="6901:13" pos:end="6901:15">ret</name> <operator pos:start="6901:17" pos:end="6901:17">=</operator> <call pos:start="6901:19" pos:end="6901:67"><name pos:start="6901:19" pos:end="6901:27">get_errno</name><argument_list pos:start="6901:28" pos:end="6901:67">(<argument pos:start="6901:29" pos:end="6901:66"><expr pos:start="6901:29" pos:end="6901:66"><call pos:start="6901:29" pos:end="6901:66"><name pos:start="6901:29" pos:end="6901:35">mq_open</name><argument_list pos:start="6901:36" pos:end="6901:66">(<argument pos:start="6901:37" pos:end="6901:37"><expr pos:start="6901:37" pos:end="6901:37"><name pos:start="6901:37" pos:end="6901:37">p</name></expr></argument>, <argument pos:start="6901:40" pos:end="6901:43"><expr pos:start="6901:40" pos:end="6901:43"><name pos:start="6901:40" pos:end="6901:43">arg2</name></expr></argument>, <argument pos:start="6901:46" pos:end="6901:49"><expr pos:start="6901:46" pos:end="6901:49"><name pos:start="6901:46" pos:end="6901:49">arg3</name></expr></argument>, <argument pos:start="6901:52" pos:end="6901:65"><expr pos:start="6901:52" pos:end="6901:65"><operator pos:start="6901:52" pos:end="6901:52">&amp;</operator><name pos:start="6901:53" pos:end="6901:65">posix_mq_attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6903:13" pos:end="6903:37"><expr pos:start="6903:13" pos:end="6903:36"><call pos:start="6903:13" pos:end="6903:36"><name pos:start="6903:13" pos:end="6903:23">unlock_user</name> <argument_list pos:start="6903:25" pos:end="6903:36">(<argument pos:start="6903:26" pos:end="6903:26"><expr pos:start="6903:26" pos:end="6903:26"><name pos:start="6903:26" pos:end="6903:26">p</name></expr></argument>, <argument pos:start="6903:29" pos:end="6903:32"><expr pos:start="6903:29" pos:end="6903:32"><name pos:start="6903:29" pos:end="6903:32">arg1</name></expr></argument>, <argument pos:start="6903:35" pos:end="6903:35"><expr pos:start="6903:35" pos:end="6903:35"><literal type="number" pos:start="6903:35" pos:end="6903:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6907:9" pos:end="6907:14">break;</break>



    <case pos:start="6911:5" pos:end="6911:29">case <expr pos:start="6911:10" pos:end="6911:28"><name pos:start="6911:10" pos:end="6911:28">TARGET_NR_mq_unlink</name></expr>:</case>

        <expr_stmt pos:start="6913:9" pos:end="6913:39"><expr pos:start="6913:9" pos:end="6913:38"><name pos:start="6913:9" pos:end="6913:9">p</name> <operator pos:start="6913:11" pos:end="6913:11">=</operator> <call pos:start="6913:13" pos:end="6913:38"><name pos:start="6913:13" pos:end="6913:28">lock_user_string</name><argument_list pos:start="6913:29" pos:end="6913:38">(<argument pos:start="6913:30" pos:end="6913:37"><expr pos:start="6913:30" pos:end="6913:37"><name pos:start="6913:30" pos:end="6913:33">arg1</name> <operator pos:start="6913:35" pos:end="6913:35">-</operator> <literal type="number" pos:start="6913:37" pos:end="6913:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6915:9" pos:end="6915:38"><expr pos:start="6915:9" pos:end="6915:37"><name pos:start="6915:9" pos:end="6915:11">ret</name> <operator pos:start="6915:13" pos:end="6915:13">=</operator> <call pos:start="6915:15" pos:end="6915:37"><name pos:start="6915:15" pos:end="6915:23">get_errno</name><argument_list pos:start="6915:24" pos:end="6915:37">(<argument pos:start="6915:25" pos:end="6915:36"><expr pos:start="6915:25" pos:end="6915:36"><call pos:start="6915:25" pos:end="6915:36"><name pos:start="6915:25" pos:end="6915:33">mq_unlink</name><argument_list pos:start="6915:34" pos:end="6915:36">(<argument pos:start="6915:35" pos:end="6915:35"><expr pos:start="6915:35" pos:end="6915:35"><name pos:start="6915:35" pos:end="6915:35">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6917:9" pos:end="6917:33"><expr pos:start="6917:9" pos:end="6917:32"><call pos:start="6917:9" pos:end="6917:32"><name pos:start="6917:9" pos:end="6917:19">unlock_user</name> <argument_list pos:start="6917:21" pos:end="6917:32">(<argument pos:start="6917:22" pos:end="6917:22"><expr pos:start="6917:22" pos:end="6917:22"><name pos:start="6917:22" pos:end="6917:22">p</name></expr></argument>, <argument pos:start="6917:25" pos:end="6917:28"><expr pos:start="6917:25" pos:end="6917:28"><name pos:start="6917:25" pos:end="6917:28">arg1</name></expr></argument>, <argument pos:start="6917:31" pos:end="6917:31"><expr pos:start="6917:31" pos:end="6917:31"><literal type="number" pos:start="6917:31" pos:end="6917:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6919:9" pos:end="6919:14">break;</break>



    <case pos:start="6923:5" pos:end="6923:32">case <expr pos:start="6923:10" pos:end="6923:31"><name pos:start="6923:10" pos:end="6923:31">TARGET_NR_mq_timedsend</name></expr>:</case>

        <block pos:start="6925:9" pos:end="6949:9">{<block_content pos:start="6927:13" pos:end="6947:40">

            <decl_stmt pos:start="6927:13" pos:end="6927:31"><decl pos:start="6927:13" pos:end="6927:30"><type pos:start="6927:13" pos:end="6927:27"><name pos:start="6927:13" pos:end="6927:27"><name pos:start="6927:13" pos:end="6927:18">struct</name> <name pos:start="6927:20" pos:end="6927:27">timespec</name></name></type> <name pos:start="6927:29" pos:end="6927:30">ts</name></decl>;</decl_stmt>



            <expr_stmt pos:start="6931:13" pos:end="6931:55"><expr pos:start="6931:13" pos:end="6931:54"><name pos:start="6931:13" pos:end="6931:13">p</name> <operator pos:start="6931:15" pos:end="6931:15">=</operator> <call pos:start="6931:17" pos:end="6931:54"><name pos:start="6931:17" pos:end="6931:25">lock_user</name> <argument_list pos:start="6931:27" pos:end="6931:54">(<argument pos:start="6931:28" pos:end="6931:38"><expr pos:start="6931:28" pos:end="6931:38"><name pos:start="6931:28" pos:end="6931:38">VERIFY_READ</name></expr></argument>, <argument pos:start="6931:41" pos:end="6931:44"><expr pos:start="6931:41" pos:end="6931:44"><name pos:start="6931:41" pos:end="6931:44">arg2</name></expr></argument>, <argument pos:start="6931:47" pos:end="6931:50"><expr pos:start="6931:47" pos:end="6931:50"><name pos:start="6931:47" pos:end="6931:50">arg3</name></expr></argument>, <argument pos:start="6931:53" pos:end="6931:53"><expr pos:start="6931:53" pos:end="6931:53"><literal type="number" pos:start="6931:53" pos:end="6931:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6933:13" pos:end="6945:62"><if pos:start="6933:13" pos:end="6941:13">if <condition pos:start="6933:16" pos:end="6933:26">(<expr pos:start="6933:17" pos:end="6933:25"><name pos:start="6933:17" pos:end="6933:20">arg5</name> <operator pos:start="6933:22" pos:end="6933:23">!=</operator> <literal type="number" pos:start="6933:25" pos:end="6933:25">0</literal></expr>)</condition> <block pos:start="6933:28" pos:end="6941:13">{<block_content pos:start="6935:17" pos:end="6939:51">

                <expr_stmt pos:start="6935:17" pos:end="6935:51"><expr pos:start="6935:17" pos:end="6935:50"><call pos:start="6935:17" pos:end="6935:50"><name pos:start="6935:17" pos:end="6935:39">target_to_host_timespec</name><argument_list pos:start="6935:40" pos:end="6935:50">(<argument pos:start="6935:41" pos:end="6935:43"><expr pos:start="6935:41" pos:end="6935:43"><operator pos:start="6935:41" pos:end="6935:41">&amp;</operator><name pos:start="6935:42" pos:end="6935:43">ts</name></expr></argument>, <argument pos:start="6935:46" pos:end="6935:49"><expr pos:start="6935:46" pos:end="6935:49"><name pos:start="6935:46" pos:end="6935:49">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6937:17" pos:end="6937:72"><expr pos:start="6937:17" pos:end="6937:71"><name pos:start="6937:17" pos:end="6937:19">ret</name> <operator pos:start="6937:21" pos:end="6937:21">=</operator> <call pos:start="6937:23" pos:end="6937:71"><name pos:start="6937:23" pos:end="6937:31">get_errno</name><argument_list pos:start="6937:32" pos:end="6937:71">(<argument pos:start="6937:33" pos:end="6937:70"><expr pos:start="6937:33" pos:end="6937:70"><call pos:start="6937:33" pos:end="6937:70"><name pos:start="6937:33" pos:end="6937:44">mq_timedsend</name><argument_list pos:start="6937:45" pos:end="6937:70">(<argument pos:start="6937:46" pos:end="6937:49"><expr pos:start="6937:46" pos:end="6937:49"><name pos:start="6937:46" pos:end="6937:49">arg1</name></expr></argument>, <argument pos:start="6937:52" pos:end="6937:52"><expr pos:start="6937:52" pos:end="6937:52"><name pos:start="6937:52" pos:end="6937:52">p</name></expr></argument>, <argument pos:start="6937:55" pos:end="6937:58"><expr pos:start="6937:55" pos:end="6937:58"><name pos:start="6937:55" pos:end="6937:58">arg3</name></expr></argument>, <argument pos:start="6937:61" pos:end="6937:64"><expr pos:start="6937:61" pos:end="6937:64"><name pos:start="6937:61" pos:end="6937:64">arg4</name></expr></argument>, <argument pos:start="6937:67" pos:end="6937:69"><expr pos:start="6937:67" pos:end="6937:69"><operator pos:start="6937:67" pos:end="6937:67">&amp;</operator><name pos:start="6937:68" pos:end="6937:69">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6939:17" pos:end="6939:51"><expr pos:start="6939:17" pos:end="6939:50"><call pos:start="6939:17" pos:end="6939:50"><name pos:start="6939:17" pos:end="6939:39">host_to_target_timespec</name><argument_list pos:start="6939:40" pos:end="6939:50">(<argument pos:start="6939:41" pos:end="6939:44"><expr pos:start="6939:41" pos:end="6939:44"><name pos:start="6939:41" pos:end="6939:44">arg5</name></expr></argument>, <argument pos:start="6939:47" pos:end="6939:49"><expr pos:start="6939:47" pos:end="6939:49"><operator pos:start="6939:47" pos:end="6939:47">&amp;</operator><name pos:start="6939:48" pos:end="6939:49">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if>

            <else pos:start="6943:13" pos:end="6945:62">else<block type="pseudo" pos:start="6945:17" pos:end="6945:62"><block_content pos:start="6945:17" pos:end="6945:62">

                <expr_stmt pos:start="6945:17" pos:end="6945:62"><expr pos:start="6945:17" pos:end="6945:61"><name pos:start="6945:17" pos:end="6945:19">ret</name> <operator pos:start="6945:21" pos:end="6945:21">=</operator> <call pos:start="6945:23" pos:end="6945:61"><name pos:start="6945:23" pos:end="6945:31">get_errno</name><argument_list pos:start="6945:32" pos:end="6945:61">(<argument pos:start="6945:33" pos:end="6945:60"><expr pos:start="6945:33" pos:end="6945:60"><call pos:start="6945:33" pos:end="6945:60"><name pos:start="6945:33" pos:end="6945:39">mq_send</name><argument_list pos:start="6945:40" pos:end="6945:60">(<argument pos:start="6945:41" pos:end="6945:44"><expr pos:start="6945:41" pos:end="6945:44"><name pos:start="6945:41" pos:end="6945:44">arg1</name></expr></argument>, <argument pos:start="6945:47" pos:end="6945:47"><expr pos:start="6945:47" pos:end="6945:47"><name pos:start="6945:47" pos:end="6945:47">p</name></expr></argument>, <argument pos:start="6945:50" pos:end="6945:53"><expr pos:start="6945:50" pos:end="6945:53"><name pos:start="6945:50" pos:end="6945:53">arg3</name></expr></argument>, <argument pos:start="6945:56" pos:end="6945:59"><expr pos:start="6945:56" pos:end="6945:59"><name pos:start="6945:56" pos:end="6945:59">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="6947:13" pos:end="6947:40"><expr pos:start="6947:13" pos:end="6947:39"><call pos:start="6947:13" pos:end="6947:39"><name pos:start="6947:13" pos:end="6947:23">unlock_user</name> <argument_list pos:start="6947:25" pos:end="6947:39">(<argument pos:start="6947:26" pos:end="6947:26"><expr pos:start="6947:26" pos:end="6947:26"><name pos:start="6947:26" pos:end="6947:26">p</name></expr></argument>, <argument pos:start="6947:29" pos:end="6947:32"><expr pos:start="6947:29" pos:end="6947:32"><name pos:start="6947:29" pos:end="6947:32">arg2</name></expr></argument>, <argument pos:start="6947:35" pos:end="6947:38"><expr pos:start="6947:35" pos:end="6947:38"><name pos:start="6947:35" pos:end="6947:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6951:9" pos:end="6951:14">break;</break>



    <case pos:start="6955:5" pos:end="6955:35">case <expr pos:start="6955:10" pos:end="6955:34"><name pos:start="6955:10" pos:end="6955:34">TARGET_NR_mq_timedreceive</name></expr>:</case>

        <block pos:start="6957:9" pos:end="6987:9">{<block_content pos:start="6959:13" pos:end="6985:41">

            <decl_stmt pos:start="6959:13" pos:end="6959:31"><decl pos:start="6959:13" pos:end="6959:30"><type pos:start="6959:13" pos:end="6959:27"><name pos:start="6959:13" pos:end="6959:27"><name pos:start="6959:13" pos:end="6959:18">struct</name> <name pos:start="6959:20" pos:end="6959:27">timespec</name></name></type> <name pos:start="6959:29" pos:end="6959:30">ts</name></decl>;</decl_stmt>

            <decl_stmt pos:start="6961:13" pos:end="6961:30"><decl pos:start="6961:13" pos:end="6961:29"><type pos:start="6961:13" pos:end="6961:24"><name pos:start="6961:13" pos:end="6961:20">unsigned</name> <name pos:start="6961:22" pos:end="6961:24">int</name></type> <name pos:start="6961:26" pos:end="6961:29">prio</name></decl>;</decl_stmt>



            <expr_stmt pos:start="6965:13" pos:end="6965:55"><expr pos:start="6965:13" pos:end="6965:54"><name pos:start="6965:13" pos:end="6965:13">p</name> <operator pos:start="6965:15" pos:end="6965:15">=</operator> <call pos:start="6965:17" pos:end="6965:54"><name pos:start="6965:17" pos:end="6965:25">lock_user</name> <argument_list pos:start="6965:27" pos:end="6965:54">(<argument pos:start="6965:28" pos:end="6965:38"><expr pos:start="6965:28" pos:end="6965:38"><name pos:start="6965:28" pos:end="6965:38">VERIFY_READ</name></expr></argument>, <argument pos:start="6965:41" pos:end="6965:44"><expr pos:start="6965:41" pos:end="6965:44"><name pos:start="6965:41" pos:end="6965:44">arg2</name></expr></argument>, <argument pos:start="6965:47" pos:end="6965:50"><expr pos:start="6965:47" pos:end="6965:50"><name pos:start="6965:47" pos:end="6965:50">arg3</name></expr></argument>, <argument pos:start="6965:53" pos:end="6965:53"><expr pos:start="6965:53" pos:end="6965:53"><literal type="number" pos:start="6965:53" pos:end="6965:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6967:13" pos:end="6979:66"><if pos:start="6967:13" pos:end="6975:13">if <condition pos:start="6967:16" pos:end="6967:26">(<expr pos:start="6967:17" pos:end="6967:25"><name pos:start="6967:17" pos:end="6967:20">arg5</name> <operator pos:start="6967:22" pos:end="6967:23">!=</operator> <literal type="number" pos:start="6967:25" pos:end="6967:25">0</literal></expr>)</condition> <block pos:start="6967:28" pos:end="6975:13">{<block_content pos:start="6969:17" pos:end="6973:51">

                <expr_stmt pos:start="6969:17" pos:end="6969:51"><expr pos:start="6969:17" pos:end="6969:50"><call pos:start="6969:17" pos:end="6969:50"><name pos:start="6969:17" pos:end="6969:39">target_to_host_timespec</name><argument_list pos:start="6969:40" pos:end="6969:50">(<argument pos:start="6969:41" pos:end="6969:43"><expr pos:start="6969:41" pos:end="6969:43"><operator pos:start="6969:41" pos:end="6969:41">&amp;</operator><name pos:start="6969:42" pos:end="6969:43">ts</name></expr></argument>, <argument pos:start="6969:46" pos:end="6969:49"><expr pos:start="6969:46" pos:end="6969:49"><name pos:start="6969:46" pos:end="6969:49">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6971:17" pos:end="6971:76"><expr pos:start="6971:17" pos:end="6971:75"><name pos:start="6971:17" pos:end="6971:19">ret</name> <operator pos:start="6971:21" pos:end="6971:21">=</operator> <call pos:start="6971:23" pos:end="6971:75"><name pos:start="6971:23" pos:end="6971:31">get_errno</name><argument_list pos:start="6971:32" pos:end="6971:75">(<argument pos:start="6971:33" pos:end="6971:74"><expr pos:start="6971:33" pos:end="6971:74"><call pos:start="6971:33" pos:end="6971:74"><name pos:start="6971:33" pos:end="6971:47">mq_timedreceive</name><argument_list pos:start="6971:48" pos:end="6971:74">(<argument pos:start="6971:49" pos:end="6971:52"><expr pos:start="6971:49" pos:end="6971:52"><name pos:start="6971:49" pos:end="6971:52">arg1</name></expr></argument>, <argument pos:start="6971:55" pos:end="6971:55"><expr pos:start="6971:55" pos:end="6971:55"><name pos:start="6971:55" pos:end="6971:55">p</name></expr></argument>, <argument pos:start="6971:58" pos:end="6971:61"><expr pos:start="6971:58" pos:end="6971:61"><name pos:start="6971:58" pos:end="6971:61">arg3</name></expr></argument>, <argument pos:start="6971:64" pos:end="6971:68"><expr pos:start="6971:64" pos:end="6971:68"><operator pos:start="6971:64" pos:end="6971:64">&amp;</operator><name pos:start="6971:65" pos:end="6971:68">prio</name></expr></argument>, <argument pos:start="6971:71" pos:end="6971:73"><expr pos:start="6971:71" pos:end="6971:73"><operator pos:start="6971:71" pos:end="6971:71">&amp;</operator><name pos:start="6971:72" pos:end="6971:73">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6973:17" pos:end="6973:51"><expr pos:start="6973:17" pos:end="6973:50"><call pos:start="6973:17" pos:end="6973:50"><name pos:start="6973:17" pos:end="6973:39">host_to_target_timespec</name><argument_list pos:start="6973:40" pos:end="6973:50">(<argument pos:start="6973:41" pos:end="6973:44"><expr pos:start="6973:41" pos:end="6973:44"><name pos:start="6973:41" pos:end="6973:44">arg5</name></expr></argument>, <argument pos:start="6973:47" pos:end="6973:49"><expr pos:start="6973:47" pos:end="6973:49"><operator pos:start="6973:47" pos:end="6973:47">&amp;</operator><name pos:start="6973:48" pos:end="6973:49">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if>

            <else pos:start="6977:13" pos:end="6979:66">else<block type="pseudo" pos:start="6979:17" pos:end="6979:66"><block_content pos:start="6979:17" pos:end="6979:66">

                <expr_stmt pos:start="6979:17" pos:end="6979:66"><expr pos:start="6979:17" pos:end="6979:65"><name pos:start="6979:17" pos:end="6979:19">ret</name> <operator pos:start="6979:21" pos:end="6979:21">=</operator> <call pos:start="6979:23" pos:end="6979:65"><name pos:start="6979:23" pos:end="6979:31">get_errno</name><argument_list pos:start="6979:32" pos:end="6979:65">(<argument pos:start="6979:33" pos:end="6979:64"><expr pos:start="6979:33" pos:end="6979:64"><call pos:start="6979:33" pos:end="6979:64"><name pos:start="6979:33" pos:end="6979:42">mq_receive</name><argument_list pos:start="6979:43" pos:end="6979:64">(<argument pos:start="6979:44" pos:end="6979:47"><expr pos:start="6979:44" pos:end="6979:47"><name pos:start="6979:44" pos:end="6979:47">arg1</name></expr></argument>, <argument pos:start="6979:50" pos:end="6979:50"><expr pos:start="6979:50" pos:end="6979:50"><name pos:start="6979:50" pos:end="6979:50">p</name></expr></argument>, <argument pos:start="6979:53" pos:end="6979:56"><expr pos:start="6979:53" pos:end="6979:56"><name pos:start="6979:53" pos:end="6979:56">arg3</name></expr></argument>, <argument pos:start="6979:59" pos:end="6979:63"><expr pos:start="6979:59" pos:end="6979:63"><operator pos:start="6979:59" pos:end="6979:59">&amp;</operator><name pos:start="6979:60" pos:end="6979:63">prio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="6981:13" pos:end="6981:40"><expr pos:start="6981:13" pos:end="6981:39"><call pos:start="6981:13" pos:end="6981:39"><name pos:start="6981:13" pos:end="6981:23">unlock_user</name> <argument_list pos:start="6981:25" pos:end="6981:39">(<argument pos:start="6981:26" pos:end="6981:26"><expr pos:start="6981:26" pos:end="6981:26"><name pos:start="6981:26" pos:end="6981:26">p</name></expr></argument>, <argument pos:start="6981:29" pos:end="6981:32"><expr pos:start="6981:29" pos:end="6981:32"><name pos:start="6981:29" pos:end="6981:32">arg2</name></expr></argument>, <argument pos:start="6981:35" pos:end="6981:38"><expr pos:start="6981:35" pos:end="6981:38"><name pos:start="6981:35" pos:end="6981:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6983:13" pos:end="6985:41"><if pos:start="6983:13" pos:end="6985:41">if <condition pos:start="6983:16" pos:end="6983:26">(<expr pos:start="6983:17" pos:end="6983:25"><name pos:start="6983:17" pos:end="6983:20">arg4</name> <operator pos:start="6983:22" pos:end="6983:23">!=</operator> <literal type="number" pos:start="6983:25" pos:end="6983:25">0</literal></expr>)</condition><block type="pseudo" pos:start="6985:17" pos:end="6985:41"><block_content pos:start="6985:17" pos:end="6985:41">

                <expr_stmt pos:start="6985:17" pos:end="6985:41"><expr pos:start="6985:17" pos:end="6985:40"><call pos:start="6985:17" pos:end="6985:40"><name pos:start="6985:17" pos:end="6985:28">put_user_u32</name><argument_list pos:start="6985:29" pos:end="6985:40">(<argument pos:start="6985:30" pos:end="6985:33"><expr pos:start="6985:30" pos:end="6985:33"><name pos:start="6985:30" pos:end="6985:33">prio</name></expr></argument>, <argument pos:start="6985:36" pos:end="6985:39"><expr pos:start="6985:36" pos:end="6985:39"><name pos:start="6985:36" pos:end="6985:39">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="6989:9" pos:end="6989:14">break;</break>



    <comment type="block" pos:start="6993:5" pos:end="6993:36">/* Not implemented for now... */</comment>

<comment type="block" pos:start="6995:1" pos:end="6995:35">/*     case TARGET_NR_mq_notify: */</comment>

<comment type="block" pos:start="6997:1" pos:end="6997:20">/*         break; */</comment>



    <case pos:start="7001:5" pos:end="7001:33">case <expr pos:start="7001:10" pos:end="7001:32"><name pos:start="7001:10" pos:end="7001:32">TARGET_NR_mq_getsetattr</name></expr>:</case>

        <block pos:start="7003:9" pos:end="7027:9">{<block_content pos:start="7005:13" pos:end="7023:13">

            <decl_stmt pos:start="7005:13" pos:end="7005:63"><decl pos:start="7005:13" pos:end="7005:43"><type pos:start="7005:13" pos:end="7005:26"><name pos:start="7005:13" pos:end="7005:26"><name pos:start="7005:13" pos:end="7005:18">struct</name> <name pos:start="7005:20" pos:end="7005:26">mq_attr</name></name></type> <name pos:start="7005:28" pos:end="7005:43">posix_mq_attr_in</name></decl>, <decl pos:start="7005:46" pos:end="7005:62"><type ref="prev" pos:start="7005:13" pos:end="7005:26"/><name pos:start="7005:46" pos:end="7005:62">posix_mq_attr_out</name></decl>;</decl_stmt>

            <expr_stmt pos:start="7007:13" pos:end="7007:20"><expr pos:start="7007:13" pos:end="7007:19"><name pos:start="7007:13" pos:end="7007:15">ret</name> <operator pos:start="7007:17" pos:end="7007:17">=</operator> <literal type="number" pos:start="7007:19" pos:end="7007:19">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="7009:13" pos:end="7015:13"><if pos:start="7009:13" pos:end="7015:13">if <condition pos:start="7009:16" pos:end="7009:26">(<expr pos:start="7009:17" pos:end="7009:25"><name pos:start="7009:17" pos:end="7009:20">arg3</name> <operator pos:start="7009:22" pos:end="7009:23">!=</operator> <literal type="number" pos:start="7009:25" pos:end="7009:25">0</literal></expr>)</condition> <block pos:start="7009:28" pos:end="7015:13">{<block_content pos:start="7011:17" pos:end="7013:63">

                <expr_stmt pos:start="7011:17" pos:end="7011:59"><expr pos:start="7011:17" pos:end="7011:58"><name pos:start="7011:17" pos:end="7011:19">ret</name> <operator pos:start="7011:21" pos:end="7011:21">=</operator> <call pos:start="7011:23" pos:end="7011:58"><name pos:start="7011:23" pos:end="7011:32">mq_getattr</name><argument_list pos:start="7011:33" pos:end="7011:58">(<argument pos:start="7011:34" pos:end="7011:37"><expr pos:start="7011:34" pos:end="7011:37"><name pos:start="7011:34" pos:end="7011:37">arg1</name></expr></argument>, <argument pos:start="7011:40" pos:end="7011:57"><expr pos:start="7011:40" pos:end="7011:57"><operator pos:start="7011:40" pos:end="7011:40">&amp;</operator><name pos:start="7011:41" pos:end="7011:57">posix_mq_attr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7013:17" pos:end="7013:63"><expr pos:start="7013:17" pos:end="7013:62"><call pos:start="7013:17" pos:end="7013:62"><name pos:start="7013:17" pos:end="7013:36">copy_to_user_mq_attr</name><argument_list pos:start="7013:37" pos:end="7013:62">(<argument pos:start="7013:38" pos:end="7013:41"><expr pos:start="7013:38" pos:end="7013:41"><name pos:start="7013:38" pos:end="7013:41">arg3</name></expr></argument>, <argument pos:start="7013:44" pos:end="7013:61"><expr pos:start="7013:44" pos:end="7013:61"><operator pos:start="7013:44" pos:end="7013:44">&amp;</operator><name pos:start="7013:45" pos:end="7013:61">posix_mq_attr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7017:13" pos:end="7023:13"><if pos:start="7017:13" pos:end="7023:13">if <condition pos:start="7017:16" pos:end="7017:26">(<expr pos:start="7017:17" pos:end="7017:25"><name pos:start="7017:17" pos:end="7017:20">arg2</name> <operator pos:start="7017:22" pos:end="7017:23">!=</operator> <literal type="number" pos:start="7017:25" pos:end="7017:25">0</literal></expr>)</condition> <block pos:start="7017:28" pos:end="7023:13">{<block_content pos:start="7019:17" pos:end="7021:79">

                <expr_stmt pos:start="7019:17" pos:end="7019:64"><expr pos:start="7019:17" pos:end="7019:63"><call pos:start="7019:17" pos:end="7019:63"><name pos:start="7019:17" pos:end="7019:38">copy_from_user_mq_attr</name><argument_list pos:start="7019:39" pos:end="7019:63">(<argument pos:start="7019:40" pos:end="7019:56"><expr pos:start="7019:40" pos:end="7019:56"><operator pos:start="7019:40" pos:end="7019:40">&amp;</operator><name pos:start="7019:41" pos:end="7019:56">posix_mq_attr_in</name></expr></argument>, <argument pos:start="7019:59" pos:end="7019:62"><expr pos:start="7019:59" pos:end="7019:62"><name pos:start="7019:59" pos:end="7019:62">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7021:17" pos:end="7021:79"><expr pos:start="7021:17" pos:end="7021:78"><name pos:start="7021:17" pos:end="7021:19">ret</name> <operator pos:start="7021:21" pos:end="7021:22">|=</operator> <call pos:start="7021:24" pos:end="7021:78"><name pos:start="7021:24" pos:end="7021:33">mq_setattr</name><argument_list pos:start="7021:34" pos:end="7021:78">(<argument pos:start="7021:35" pos:end="7021:38"><expr pos:start="7021:35" pos:end="7021:38"><name pos:start="7021:35" pos:end="7021:38">arg1</name></expr></argument>, <argument pos:start="7021:41" pos:end="7021:57"><expr pos:start="7021:41" pos:end="7021:57"><operator pos:start="7021:41" pos:end="7021:41">&amp;</operator><name pos:start="7021:42" pos:end="7021:57">posix_mq_attr_in</name></expr></argument>, <argument pos:start="7021:60" pos:end="7021:77"><expr pos:start="7021:60" pos:end="7021:77"><operator pos:start="7021:60" pos:end="7021:60">&amp;</operator><name pos:start="7021:61" pos:end="7021:77">posix_mq_attr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



        </block_content>}</block>

        <break pos:start="7029:9" pos:end="7038:0">break;</break>

<cpp:endif pos:start="7031:1" pos:end="7031:6">#<cpp:directive pos:start="7031:2" pos:end="7031:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="7035:1" pos:end="7035:20">#<cpp:directive pos:start="7035:2" pos:end="7035:6">ifdef</cpp:directive> <name pos:start="7035:8" pos:end="7035:20">CONFIG_SPLICE</name></cpp:ifdef>

<cpp:ifdef pos:start="7037:1" pos:end="7037:20">#<cpp:directive pos:start="7037:2" pos:end="7037:6">ifdef</cpp:directive> <name pos:start="7037:8" pos:end="7037:20">TARGET_NR_tee</name></cpp:ifdef>

    <case pos:start="7039:5" pos:end="7039:23">case <expr pos:start="7039:10" pos:end="7039:22"><name pos:start="7039:10" pos:end="7039:22">TARGET_NR_tee</name></expr>:</case>

        <block pos:start="7041:9" pos:end="7045:9">{<block_content pos:start="7043:13" pos:end="7043:54">

            <expr_stmt pos:start="7043:13" pos:end="7043:54"><expr pos:start="7043:13" pos:end="7043:53"><name pos:start="7043:13" pos:end="7043:15">ret</name> <operator pos:start="7043:17" pos:end="7043:17">=</operator> <call pos:start="7043:19" pos:end="7043:53"><name pos:start="7043:19" pos:end="7043:27">get_errno</name><argument_list pos:start="7043:28" pos:end="7043:53">(<argument pos:start="7043:29" pos:end="7043:52"><expr pos:start="7043:29" pos:end="7043:52"><call pos:start="7043:29" pos:end="7043:52"><name pos:start="7043:29" pos:end="7043:31">tee</name><argument_list pos:start="7043:32" pos:end="7043:52">(<argument pos:start="7043:33" pos:end="7043:36"><expr pos:start="7043:33" pos:end="7043:36"><name pos:start="7043:33" pos:end="7043:36">arg1</name></expr></argument>,<argument pos:start="7043:38" pos:end="7043:41"><expr pos:start="7043:38" pos:end="7043:41"><name pos:start="7043:38" pos:end="7043:41">arg2</name></expr></argument>,<argument pos:start="7043:43" pos:end="7043:46"><expr pos:start="7043:43" pos:end="7043:46"><name pos:start="7043:43" pos:end="7043:46">arg3</name></expr></argument>,<argument pos:start="7043:48" pos:end="7043:51"><expr pos:start="7043:48" pos:end="7043:51"><name pos:start="7043:48" pos:end="7043:51">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="7047:9" pos:end="7052:0">break;</break>

<cpp:endif pos:start="7049:1" pos:end="7049:6">#<cpp:directive pos:start="7049:2" pos:end="7049:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7051:1" pos:end="7051:23">#<cpp:directive pos:start="7051:2" pos:end="7051:6">ifdef</cpp:directive> <name pos:start="7051:8" pos:end="7051:23">TARGET_NR_splice</name></cpp:ifdef>

    <case pos:start="7053:5" pos:end="7053:26">case <expr pos:start="7053:10" pos:end="7053:25"><name pos:start="7053:10" pos:end="7053:25">TARGET_NR_splice</name></expr>:</case>

        <block pos:start="7055:9" pos:end="7079:9">{<block_content pos:start="7057:13" pos:end="7077:81">

            <decl_stmt pos:start="7057:13" pos:end="7057:37"><decl pos:start="7057:13" pos:end="7057:26"><type pos:start="7057:13" pos:end="7057:18"><name pos:start="7057:13" pos:end="7057:18">loff_t</name></type> <name pos:start="7057:20" pos:end="7057:26">loff_in</name></decl>, <decl pos:start="7057:29" pos:end="7057:36"><type ref="prev" pos:start="7057:13" pos:end="7057:18"/><name pos:start="7057:29" pos:end="7057:36">loff_out</name></decl>;</decl_stmt>

            <decl_stmt pos:start="7059:13" pos:end="7059:55"><decl pos:start="7059:13" pos:end="7059:35"><type pos:start="7059:13" pos:end="7059:20"><name pos:start="7059:13" pos:end="7059:18">loff_t</name> <modifier pos:start="7059:20" pos:end="7059:20">*</modifier></type><name pos:start="7059:21" pos:end="7059:28">ploff_in</name> <init pos:start="7059:30" pos:end="7059:35">= <expr pos:start="7059:32" pos:end="7059:35"><name pos:start="7059:32" pos:end="7059:35">NULL</name></expr></init></decl>, <decl pos:start="7059:38" pos:end="7059:54"><type ref="prev" pos:start="7059:13" pos:end="7059:20"><modifier pos:start="7059:38" pos:end="7059:38">*</modifier></type><name pos:start="7059:39" pos:end="7059:47">ploff_out</name> <init pos:start="7059:49" pos:end="7059:54">= <expr pos:start="7059:51" pos:end="7059:54"><name pos:start="7059:51" pos:end="7059:54">NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="7061:13" pos:end="7067:13"><if pos:start="7061:13" pos:end="7067:13">if<condition pos:start="7061:15" pos:end="7061:20">(<expr pos:start="7061:16" pos:end="7061:19"><name pos:start="7061:16" pos:end="7061:19">arg2</name></expr>)</condition> <block pos:start="7061:22" pos:end="7067:13">{<block_content pos:start="7063:17" pos:end="7065:36">

                <expr_stmt pos:start="7063:17" pos:end="7063:44"><expr pos:start="7063:17" pos:end="7063:43"><call pos:start="7063:17" pos:end="7063:43"><name pos:start="7063:17" pos:end="7063:28">get_user_u64</name><argument_list pos:start="7063:29" pos:end="7063:43">(<argument pos:start="7063:30" pos:end="7063:36"><expr pos:start="7063:30" pos:end="7063:36"><name pos:start="7063:30" pos:end="7063:36">loff_in</name></expr></argument>, <argument pos:start="7063:39" pos:end="7063:42"><expr pos:start="7063:39" pos:end="7063:42"><name pos:start="7063:39" pos:end="7063:42">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7065:17" pos:end="7065:36"><expr pos:start="7065:17" pos:end="7065:35"><name pos:start="7065:17" pos:end="7065:24">ploff_in</name> <operator pos:start="7065:26" pos:end="7065:26">=</operator> <operator pos:start="7065:28" pos:end="7065:28">&amp;</operator><name pos:start="7065:29" pos:end="7065:35">loff_in</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7069:13" pos:end="7075:13"><if pos:start="7069:13" pos:end="7075:13">if<condition pos:start="7069:15" pos:end="7069:20">(<expr pos:start="7069:16" pos:end="7069:19"><name pos:start="7069:16" pos:end="7069:19">arg4</name></expr>)</condition> <block pos:start="7069:22" pos:end="7075:13">{<block_content pos:start="7071:17" pos:end="7073:38">

                <expr_stmt pos:start="7071:17" pos:end="7071:45"><expr pos:start="7071:17" pos:end="7071:44"><call pos:start="7071:17" pos:end="7071:44"><name pos:start="7071:17" pos:end="7071:28">get_user_u64</name><argument_list pos:start="7071:29" pos:end="7071:44">(<argument pos:start="7071:30" pos:end="7071:37"><expr pos:start="7071:30" pos:end="7071:37"><name pos:start="7071:30" pos:end="7071:37">loff_out</name></expr></argument>, <argument pos:start="7071:40" pos:end="7071:43"><expr pos:start="7071:40" pos:end="7071:43"><name pos:start="7071:40" pos:end="7071:43">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7073:17" pos:end="7073:38"><expr pos:start="7073:17" pos:end="7073:37"><name pos:start="7073:17" pos:end="7073:25">ploff_out</name> <operator pos:start="7073:27" pos:end="7073:27">=</operator> <operator pos:start="7073:29" pos:end="7073:29">&amp;</operator><name pos:start="7073:30" pos:end="7073:37">loff_out</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7077:13" pos:end="7077:81"><expr pos:start="7077:13" pos:end="7077:80"><name pos:start="7077:13" pos:end="7077:15">ret</name> <operator pos:start="7077:17" pos:end="7077:17">=</operator> <call pos:start="7077:19" pos:end="7077:80"><name pos:start="7077:19" pos:end="7077:27">get_errno</name><argument_list pos:start="7077:28" pos:end="7077:80">(<argument pos:start="7077:29" pos:end="7077:79"><expr pos:start="7077:29" pos:end="7077:79"><call pos:start="7077:29" pos:end="7077:79"><name pos:start="7077:29" pos:end="7077:34">splice</name><argument_list pos:start="7077:35" pos:end="7077:79">(<argument pos:start="7077:36" pos:end="7077:39"><expr pos:start="7077:36" pos:end="7077:39"><name pos:start="7077:36" pos:end="7077:39">arg1</name></expr></argument>, <argument pos:start="7077:42" pos:end="7077:49"><expr pos:start="7077:42" pos:end="7077:49"><name pos:start="7077:42" pos:end="7077:49">ploff_in</name></expr></argument>, <argument pos:start="7077:52" pos:end="7077:55"><expr pos:start="7077:52" pos:end="7077:55"><name pos:start="7077:52" pos:end="7077:55">arg3</name></expr></argument>, <argument pos:start="7077:58" pos:end="7077:66"><expr pos:start="7077:58" pos:end="7077:66"><name pos:start="7077:58" pos:end="7077:66">ploff_out</name></expr></argument>, <argument pos:start="7077:69" pos:end="7077:72"><expr pos:start="7077:69" pos:end="7077:72"><name pos:start="7077:69" pos:end="7077:72">arg5</name></expr></argument>, <argument pos:start="7077:75" pos:end="7077:78"><expr pos:start="7077:75" pos:end="7077:78"><name pos:start="7077:75" pos:end="7077:78">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="7081:9" pos:end="7086:0">break;</break>

<cpp:endif pos:start="7083:1" pos:end="7083:6">#<cpp:directive pos:start="7083:2" pos:end="7083:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7085:1" pos:end="7085:25">#<cpp:directive pos:start="7085:2" pos:end="7085:6">ifdef</cpp:directive> <name pos:start="7085:8" pos:end="7085:25">TARGET_NR_vmsplice</name></cpp:ifdef>

	<case pos:start="7087:9" pos:end="7087:32">case <expr pos:start="7087:14" pos:end="7087:31"><name pos:start="7087:14" pos:end="7087:31">TARGET_NR_vmsplice</name></expr>:</case>

        <block pos:start="7089:9" pos:end="7107:9">{<block_content pos:start="7091:13" pos:end="7105:46">

            <decl_stmt pos:start="7091:13" pos:end="7091:29"><decl pos:start="7091:13" pos:end="7091:28"><type pos:start="7091:13" pos:end="7091:15"><name pos:start="7091:13" pos:end="7091:15">int</name></type> <name pos:start="7091:17" pos:end="7091:21">count</name> <init pos:start="7091:23" pos:end="7091:28">= <expr pos:start="7091:25" pos:end="7091:28"><name pos:start="7091:25" pos:end="7091:28">arg3</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="7093:13" pos:end="7093:30"><decl pos:start="7093:13" pos:end="7093:29"><type pos:start="7093:13" pos:end="7093:26"><name pos:start="7093:13" pos:end="7093:24"><name pos:start="7093:13" pos:end="7093:18">struct</name> <name pos:start="7093:20" pos:end="7093:24">iovec</name></name> <modifier pos:start="7093:26" pos:end="7093:26">*</modifier></type><name pos:start="7093:27" pos:end="7093:29">vec</name></decl>;</decl_stmt>



            <expr_stmt pos:start="7097:13" pos:end="7097:55"><expr pos:start="7097:13" pos:end="7097:54"><name pos:start="7097:13" pos:end="7097:15">vec</name> <operator pos:start="7097:17" pos:end="7097:17">=</operator> <call pos:start="7097:19" pos:end="7097:54"><name pos:start="7097:19" pos:end="7097:24">alloca</name><argument_list pos:start="7097:25" pos:end="7097:54">(<argument pos:start="7097:26" pos:end="7097:53"><expr pos:start="7097:26" pos:end="7097:53"><name pos:start="7097:26" pos:end="7097:30">count</name> <operator pos:start="7097:32" pos:end="7097:32">*</operator> <sizeof pos:start="7097:34" pos:end="7097:53">sizeof<argument_list pos:start="7097:40" pos:end="7097:53">(<argument pos:start="7097:41" pos:end="7097:52"><expr pos:start="7097:41" pos:end="7097:52">struct <name pos:start="7097:48" pos:end="7097:52">iovec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="7099:13" pos:end="7101:28"><if pos:start="7099:13" pos:end="7101:28">if <condition pos:start="7099:16" pos:end="7099:65">(<expr pos:start="7099:17" pos:end="7099:64"><call pos:start="7099:17" pos:end="7099:60"><name pos:start="7099:17" pos:end="7099:26">lock_iovec</name><argument_list pos:start="7099:27" pos:end="7099:60">(<argument pos:start="7099:28" pos:end="7099:38"><expr pos:start="7099:28" pos:end="7099:38"><name pos:start="7099:28" pos:end="7099:38">VERIFY_READ</name></expr></argument>, <argument pos:start="7099:41" pos:end="7099:43"><expr pos:start="7099:41" pos:end="7099:43"><name pos:start="7099:41" pos:end="7099:43">vec</name></expr></argument>, <argument pos:start="7099:46" pos:end="7099:49"><expr pos:start="7099:46" pos:end="7099:49"><name pos:start="7099:46" pos:end="7099:49">arg2</name></expr></argument>, <argument pos:start="7099:52" pos:end="7099:56"><expr pos:start="7099:52" pos:end="7099:56"><name pos:start="7099:52" pos:end="7099:56">count</name></expr></argument>, <argument pos:start="7099:59" pos:end="7099:59"><expr pos:start="7099:59" pos:end="7099:59"><literal type="number" pos:start="7099:59" pos:end="7099:59">1</literal></expr></argument>)</argument_list></call> <operator pos:start="7099:62" pos:end="7099:62">&lt;</operator> <literal type="number" pos:start="7099:64" pos:end="7099:64">0</literal></expr>)</condition><block type="pseudo" pos:start="7101:17" pos:end="7101:28"><block_content pos:start="7101:17" pos:end="7101:28">

                <goto pos:start="7101:17" pos:end="7101:28">goto <name pos:start="7101:22" pos:end="7101:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="7103:13" pos:end="7103:62"><expr pos:start="7103:13" pos:end="7103:61"><name pos:start="7103:13" pos:end="7103:15">ret</name> <operator pos:start="7103:17" pos:end="7103:17">=</operator> <call pos:start="7103:19" pos:end="7103:61"><name pos:start="7103:19" pos:end="7103:27">get_errno</name><argument_list pos:start="7103:28" pos:end="7103:61">(<argument pos:start="7103:29" pos:end="7103:60"><expr pos:start="7103:29" pos:end="7103:60"><call pos:start="7103:29" pos:end="7103:60"><name pos:start="7103:29" pos:end="7103:36">vmsplice</name><argument_list pos:start="7103:37" pos:end="7103:60">(<argument pos:start="7103:38" pos:end="7103:41"><expr pos:start="7103:38" pos:end="7103:41"><name pos:start="7103:38" pos:end="7103:41">arg1</name></expr></argument>, <argument pos:start="7103:44" pos:end="7103:46"><expr pos:start="7103:44" pos:end="7103:46"><name pos:start="7103:44" pos:end="7103:46">vec</name></expr></argument>, <argument pos:start="7103:49" pos:end="7103:53"><expr pos:start="7103:49" pos:end="7103:53"><name pos:start="7103:49" pos:end="7103:53">count</name></expr></argument>, <argument pos:start="7103:56" pos:end="7103:59"><expr pos:start="7103:56" pos:end="7103:59"><name pos:start="7103:56" pos:end="7103:59">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7105:13" pos:end="7105:46"><expr pos:start="7105:13" pos:end="7105:45"><call pos:start="7105:13" pos:end="7105:45"><name pos:start="7105:13" pos:end="7105:24">unlock_iovec</name><argument_list pos:start="7105:25" pos:end="7105:45">(<argument pos:start="7105:26" pos:end="7105:28"><expr pos:start="7105:26" pos:end="7105:28"><name pos:start="7105:26" pos:end="7105:28">vec</name></expr></argument>, <argument pos:start="7105:31" pos:end="7105:34"><expr pos:start="7105:31" pos:end="7105:34"><name pos:start="7105:31" pos:end="7105:34">arg2</name></expr></argument>, <argument pos:start="7105:37" pos:end="7105:41"><expr pos:start="7105:37" pos:end="7105:41"><name pos:start="7105:37" pos:end="7105:41">count</name></expr></argument>, <argument pos:start="7105:44" pos:end="7105:44"><expr pos:start="7105:44" pos:end="7105:44"><literal type="number" pos:start="7105:44" pos:end="7105:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="7109:9" pos:end="7118:0">break;</break>

<cpp:endif pos:start="7111:1" pos:end="7111:6">#<cpp:directive pos:start="7111:2" pos:end="7111:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="7113:1" pos:end="7113:6">#<cpp:directive pos:start="7113:2" pos:end="7113:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="7113:8" pos:end="7113:26">/* CONFIG_SPLICE */</comment>

<cpp:ifdef pos:start="7115:1" pos:end="7115:21">#<cpp:directive pos:start="7115:2" pos:end="7115:6">ifdef</cpp:directive> <name pos:start="7115:8" pos:end="7115:21">CONFIG_EVENTFD</name></cpp:ifdef>

<cpp:if pos:start="7117:1" pos:end="7117:30">#<cpp:directive pos:start="7117:2" pos:end="7117:3">if</cpp:directive> <expr pos:start="7117:5" pos:end="7117:30"><call pos:start="7117:5" pos:end="7117:30"><name pos:start="7117:5" pos:end="7117:11">defined</name><argument_list pos:start="7117:12" pos:end="7117:30">(<argument pos:start="7117:13" pos:end="7117:29"><expr pos:start="7117:13" pos:end="7117:29"><name pos:start="7117:13" pos:end="7117:29">TARGET_NR_eventfd</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7119:5" pos:end="7119:27">case <expr pos:start="7119:10" pos:end="7119:26"><name pos:start="7119:10" pos:end="7119:26">TARGET_NR_eventfd</name></expr>:</case>

        <expr_stmt pos:start="7121:9" pos:end="7121:42"><expr pos:start="7121:9" pos:end="7121:41"><name pos:start="7121:9" pos:end="7121:11">ret</name> <operator pos:start="7121:13" pos:end="7121:13">=</operator> <call pos:start="7121:15" pos:end="7121:41"><name pos:start="7121:15" pos:end="7121:23">get_errno</name><argument_list pos:start="7121:24" pos:end="7121:41">(<argument pos:start="7121:25" pos:end="7121:40"><expr pos:start="7121:25" pos:end="7121:40"><call pos:start="7121:25" pos:end="7121:40"><name pos:start="7121:25" pos:end="7121:31">eventfd</name><argument_list pos:start="7121:32" pos:end="7121:40">(<argument pos:start="7121:33" pos:end="7121:36"><expr pos:start="7121:33" pos:end="7121:36"><name pos:start="7121:33" pos:end="7121:36">arg1</name></expr></argument>, <argument pos:start="7121:39" pos:end="7121:39"><expr pos:start="7121:39" pos:end="7121:39"><literal type="number" pos:start="7121:39" pos:end="7121:39">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7123:9" pos:end="7128:0">break;</break>

<cpp:endif pos:start="7125:1" pos:end="7125:6">#<cpp:directive pos:start="7125:2" pos:end="7125:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7127:1" pos:end="7127:31">#<cpp:directive pos:start="7127:2" pos:end="7127:3">if</cpp:directive> <expr pos:start="7127:5" pos:end="7127:31"><call pos:start="7127:5" pos:end="7127:31"><name pos:start="7127:5" pos:end="7127:11">defined</name><argument_list pos:start="7127:12" pos:end="7127:31">(<argument pos:start="7127:13" pos:end="7127:30"><expr pos:start="7127:13" pos:end="7127:30"><name pos:start="7127:13" pos:end="7127:30">TARGET_NR_eventfd2</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7129:5" pos:end="7129:28">case <expr pos:start="7129:10" pos:end="7129:27"><name pos:start="7129:10" pos:end="7129:27">TARGET_NR_eventfd2</name></expr>:</case>

        <expr_stmt pos:start="7131:9" pos:end="7131:45"><expr pos:start="7131:9" pos:end="7131:44"><name pos:start="7131:9" pos:end="7131:11">ret</name> <operator pos:start="7131:13" pos:end="7131:13">=</operator> <call pos:start="7131:15" pos:end="7131:44"><name pos:start="7131:15" pos:end="7131:23">get_errno</name><argument_list pos:start="7131:24" pos:end="7131:44">(<argument pos:start="7131:25" pos:end="7131:43"><expr pos:start="7131:25" pos:end="7131:43"><call pos:start="7131:25" pos:end="7131:43"><name pos:start="7131:25" pos:end="7131:31">eventfd</name><argument_list pos:start="7131:32" pos:end="7131:43">(<argument pos:start="7131:33" pos:end="7131:36"><expr pos:start="7131:33" pos:end="7131:36"><name pos:start="7131:33" pos:end="7131:36">arg1</name></expr></argument>, <argument pos:start="7131:39" pos:end="7131:42"><expr pos:start="7131:39" pos:end="7131:42"><name pos:start="7131:39" pos:end="7131:42">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7133:9" pos:end="7140:0">break;</break>

<cpp:endif pos:start="7135:1" pos:end="7135:6">#<cpp:directive pos:start="7135:2" pos:end="7135:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="7137:1" pos:end="7137:6">#<cpp:directive pos:start="7137:2" pos:end="7137:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="7137:8" pos:end="7137:28">/* CONFIG_EVENTFD  */</comment>

<cpp:if pos:start="7139:1" pos:end="7139:61">#<cpp:directive pos:start="7139:2" pos:end="7139:3">if</cpp:directive> <expr pos:start="7139:5" pos:end="7139:61"><call pos:start="7139:5" pos:end="7139:29"><name pos:start="7139:5" pos:end="7139:11">defined</name><argument_list pos:start="7139:12" pos:end="7139:29">(<argument pos:start="7139:13" pos:end="7139:28"><expr pos:start="7139:13" pos:end="7139:28"><name pos:start="7139:13" pos:end="7139:28">CONFIG_FALLOCATE</name></expr></argument>)</argument_list></call> <operator pos:start="7139:31" pos:end="7139:32">&amp;&amp;</operator> <call pos:start="7139:34" pos:end="7139:61"><name pos:start="7139:34" pos:end="7139:40">defined</name><argument_list pos:start="7139:41" pos:end="7139:61">(<argument pos:start="7139:42" pos:end="7139:60"><expr pos:start="7139:42" pos:end="7139:60"><name pos:start="7139:42" pos:end="7139:60">TARGET_NR_fallocate</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7141:5" pos:end="7144:0">case <expr pos:start="7141:10" pos:end="7141:28"><name pos:start="7141:10" pos:end="7141:28">TARGET_NR_fallocate</name></expr>:</case>

<cpp:if pos:start="7143:1" pos:end="7143:25">#<cpp:directive pos:start="7143:2" pos:end="7143:3">if</cpp:directive> <expr pos:start="7143:5" pos:end="7143:25"><name pos:start="7143:5" pos:end="7143:19">TARGET_ABI_BITS</name> <operator pos:start="7143:21" pos:end="7143:22">==</operator> <literal type="number" pos:start="7143:24" pos:end="7143:25">32</literal></expr></cpp:if>

        <expr_stmt pos:start="7145:9" pos:end="7150:0"><expr pos:start="7145:9" pos:end="7147:63"><name pos:start="7145:9" pos:end="7145:11">ret</name> <operator pos:start="7145:13" pos:end="7145:13">=</operator> <call pos:start="7145:15" pos:end="7147:63"><name pos:start="7145:15" pos:end="7145:23">get_errno</name><argument_list pos:start="7145:24" pos:end="7147:63">(<argument pos:start="7145:25" pos:end="7147:62"><expr pos:start="7145:25" pos:end="7147:62"><call pos:start="7145:25" pos:end="7147:62"><name pos:start="7145:25" pos:end="7145:33">fallocate</name><argument_list pos:start="7145:34" pos:end="7147:62">(<argument pos:start="7145:35" pos:end="7145:38"><expr pos:start="7145:35" pos:end="7145:38"><name pos:start="7145:35" pos:end="7145:38">arg1</name></expr></argument>, <argument pos:start="7145:41" pos:end="7145:44"><expr pos:start="7145:41" pos:end="7145:44"><name pos:start="7145:41" pos:end="7145:44">arg2</name></expr></argument>, <argument pos:start="7145:47" pos:end="7145:73"><expr pos:start="7145:47" pos:end="7145:73"><call pos:start="7145:47" pos:end="7145:73"><name pos:start="7145:47" pos:end="7145:61">target_offset64</name><argument_list pos:start="7145:62" pos:end="7145:73">(<argument pos:start="7145:63" pos:end="7145:66"><expr pos:start="7145:63" pos:end="7145:66"><name pos:start="7145:63" pos:end="7145:66">arg3</name></expr></argument>, <argument pos:start="7145:69" pos:end="7145:72"><expr pos:start="7145:69" pos:end="7145:72"><name pos:start="7145:69" pos:end="7145:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="7147:35" pos:end="7147:61"><expr pos:start="7147:35" pos:end="7147:61"><call pos:start="7147:35" pos:end="7147:61"><name pos:start="7147:35" pos:end="7147:49">target_offset64</name><argument_list pos:start="7147:50" pos:end="7147:61">(<argument pos:start="7147:51" pos:end="7147:54"><expr pos:start="7147:51" pos:end="7147:54"><name pos:start="7147:51" pos:end="7147:54">arg5</name></expr></argument>, <argument pos:start="7147:57" pos:end="7147:60"><expr pos:start="7147:57" pos:end="7147:60"><name pos:start="7147:57" pos:end="7147:60">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="7149:1" pos:end="7149:5">#<cpp:directive pos:start="7149:2" pos:end="7149:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="7151:9" pos:end="7154:0"><expr pos:start="7151:9" pos:end="7151:58"><name pos:start="7151:9" pos:end="7151:11">ret</name> <operator pos:start="7151:13" pos:end="7151:13">=</operator> <call pos:start="7151:15" pos:end="7151:58"><name pos:start="7151:15" pos:end="7151:23">get_errno</name><argument_list pos:start="7151:24" pos:end="7151:58">(<argument pos:start="7151:25" pos:end="7151:57"><expr pos:start="7151:25" pos:end="7151:57"><call pos:start="7151:25" pos:end="7151:57"><name pos:start="7151:25" pos:end="7151:33">fallocate</name><argument_list pos:start="7151:34" pos:end="7151:57">(<argument pos:start="7151:35" pos:end="7151:38"><expr pos:start="7151:35" pos:end="7151:38"><name pos:start="7151:35" pos:end="7151:38">arg1</name></expr></argument>, <argument pos:start="7151:41" pos:end="7151:44"><expr pos:start="7151:41" pos:end="7151:44"><name pos:start="7151:41" pos:end="7151:44">arg2</name></expr></argument>, <argument pos:start="7151:47" pos:end="7151:50"><expr pos:start="7151:47" pos:end="7151:50"><name pos:start="7151:47" pos:end="7151:50">arg3</name></expr></argument>, <argument pos:start="7151:53" pos:end="7151:56"><expr pos:start="7151:53" pos:end="7151:56"><name pos:start="7151:53" pos:end="7151:56">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="7153:1" pos:end="7153:6">#<cpp:directive pos:start="7153:2" pos:end="7153:6">endif</cpp:directive></cpp:endif>

        <break pos:start="7155:9" pos:end="7162:0">break;</break>

<cpp:endif pos:start="7157:1" pos:end="7157:6">#<cpp:directive pos:start="7157:2" pos:end="7157:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7159:1" pos:end="7159:35">#<cpp:directive pos:start="7159:2" pos:end="7159:3">if</cpp:directive> <expr pos:start="7159:5" pos:end="7159:35"><call pos:start="7159:5" pos:end="7159:35"><name pos:start="7159:5" pos:end="7159:11">defined</name><argument_list pos:start="7159:12" pos:end="7159:35">(<argument pos:start="7159:13" pos:end="7159:34"><expr pos:start="7159:13" pos:end="7159:34"><name pos:start="7159:13" pos:end="7159:34">CONFIG_SYNC_FILE_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if pos:start="7161:1" pos:end="7161:38">#<cpp:directive pos:start="7161:2" pos:end="7161:3">if</cpp:directive> <expr pos:start="7161:5" pos:end="7161:38"><call pos:start="7161:5" pos:end="7161:38"><name pos:start="7161:5" pos:end="7161:11">defined</name><argument_list pos:start="7161:12" pos:end="7161:38">(<argument pos:start="7161:13" pos:end="7161:37"><expr pos:start="7161:13" pos:end="7161:37"><name pos:start="7161:13" pos:end="7161:37">TARGET_NR_sync_file_range</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7163:5" pos:end="7168:0">case <expr pos:start="7163:10" pos:end="7163:34"><name pos:start="7163:10" pos:end="7163:34">TARGET_NR_sync_file_range</name></expr>:</case>

<cpp:if pos:start="7165:1" pos:end="7165:25">#<cpp:directive pos:start="7165:2" pos:end="7165:3">if</cpp:directive> <expr pos:start="7165:5" pos:end="7165:25"><name pos:start="7165:5" pos:end="7165:19">TARGET_ABI_BITS</name> <operator pos:start="7165:21" pos:end="7165:22">==</operator> <literal type="number" pos:start="7165:24" pos:end="7165:25">32</literal></expr></cpp:if>

<cpp:if pos:start="7167:1" pos:end="7167:24">#<cpp:directive pos:start="7167:2" pos:end="7167:3">if</cpp:directive> <expr pos:start="7167:5" pos:end="7167:24"><call pos:start="7167:5" pos:end="7167:24"><name pos:start="7167:5" pos:end="7167:11">defined</name><argument_list pos:start="7167:12" pos:end="7167:24">(<argument pos:start="7167:13" pos:end="7167:23"><expr pos:start="7167:13" pos:end="7167:23"><name pos:start="7167:13" pos:end="7167:23">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="7169:9" pos:end="7174:0"><expr pos:start="7169:9" pos:end="7171:75"><name pos:start="7169:9" pos:end="7169:11">ret</name> <operator pos:start="7169:13" pos:end="7169:13">=</operator> <call pos:start="7169:15" pos:end="7171:75"><name pos:start="7169:15" pos:end="7169:23">get_errno</name><argument_list pos:start="7169:24" pos:end="7171:75">(<argument pos:start="7169:25" pos:end="7171:74"><expr pos:start="7169:25" pos:end="7171:74"><call pos:start="7169:25" pos:end="7171:74"><name pos:start="7169:25" pos:end="7169:39">sync_file_range</name><argument_list pos:start="7169:40" pos:end="7171:74">(<argument pos:start="7169:41" pos:end="7169:44"><expr pos:start="7169:41" pos:end="7169:44"><name pos:start="7169:41" pos:end="7169:44">arg1</name></expr></argument>, <argument pos:start="7169:47" pos:end="7169:73"><expr pos:start="7169:47" pos:end="7169:73"><call pos:start="7169:47" pos:end="7169:73"><name pos:start="7169:47" pos:end="7169:61">target_offset64</name><argument_list pos:start="7169:62" pos:end="7169:73">(<argument pos:start="7169:63" pos:end="7169:66"><expr pos:start="7169:63" pos:end="7169:66"><name pos:start="7169:63" pos:end="7169:66">arg3</name></expr></argument>, <argument pos:start="7169:69" pos:end="7169:72"><expr pos:start="7169:69" pos:end="7169:72"><name pos:start="7169:69" pos:end="7169:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="7171:41" pos:end="7171:67"><expr pos:start="7171:41" pos:end="7171:67"><call pos:start="7171:41" pos:end="7171:67"><name pos:start="7171:41" pos:end="7171:55">target_offset64</name><argument_list pos:start="7171:56" pos:end="7171:67">(<argument pos:start="7171:57" pos:end="7171:60"><expr pos:start="7171:57" pos:end="7171:60"><name pos:start="7171:57" pos:end="7171:60">arg5</name></expr></argument>, <argument pos:start="7171:63" pos:end="7171:66"><expr pos:start="7171:63" pos:end="7171:66"><name pos:start="7171:63" pos:end="7171:66">arg6</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="7171:70" pos:end="7171:73"><expr pos:start="7171:70" pos:end="7171:73"><name pos:start="7171:70" pos:end="7171:73">arg7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="7173:1" pos:end="7173:5">#<cpp:directive pos:start="7173:2" pos:end="7173:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="7175:9" pos:end="7182:0"><expr pos:start="7175:9" pos:end="7177:75"><name pos:start="7175:9" pos:end="7175:11">ret</name> <operator pos:start="7175:13" pos:end="7175:13">=</operator> <call pos:start="7175:15" pos:end="7177:75"><name pos:start="7175:15" pos:end="7175:23">get_errno</name><argument_list pos:start="7175:24" pos:end="7177:75">(<argument pos:start="7175:25" pos:end="7177:74"><expr pos:start="7175:25" pos:end="7177:74"><call pos:start="7175:25" pos:end="7177:74"><name pos:start="7175:25" pos:end="7175:39">sync_file_range</name><argument_list pos:start="7175:40" pos:end="7177:74">(<argument pos:start="7175:41" pos:end="7175:44"><expr pos:start="7175:41" pos:end="7175:44"><name pos:start="7175:41" pos:end="7175:44">arg1</name></expr></argument>, <argument pos:start="7175:47" pos:end="7175:73"><expr pos:start="7175:47" pos:end="7175:73"><call pos:start="7175:47" pos:end="7175:73"><name pos:start="7175:47" pos:end="7175:61">target_offset64</name><argument_list pos:start="7175:62" pos:end="7175:73">(<argument pos:start="7175:63" pos:end="7175:66"><expr pos:start="7175:63" pos:end="7175:66"><name pos:start="7175:63" pos:end="7175:66">arg2</name></expr></argument>, <argument pos:start="7175:69" pos:end="7175:72"><expr pos:start="7175:69" pos:end="7175:72"><name pos:start="7175:69" pos:end="7175:72">arg3</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="7177:41" pos:end="7177:67"><expr pos:start="7177:41" pos:end="7177:67"><call pos:start="7177:41" pos:end="7177:67"><name pos:start="7177:41" pos:end="7177:55">target_offset64</name><argument_list pos:start="7177:56" pos:end="7177:67">(<argument pos:start="7177:57" pos:end="7177:60"><expr pos:start="7177:57" pos:end="7177:60"><name pos:start="7177:57" pos:end="7177:60">arg4</name></expr></argument>, <argument pos:start="7177:63" pos:end="7177:66"><expr pos:start="7177:63" pos:end="7177:66"><name pos:start="7177:63" pos:end="7177:66">arg5</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="7177:70" pos:end="7177:73"><expr pos:start="7177:70" pos:end="7177:73"><name pos:start="7177:70" pos:end="7177:73">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="7179:1" pos:end="7179:6">#<cpp:directive pos:start="7179:2" pos:end="7179:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="7179:8" pos:end="7179:25">/* !TARGET_MIPS */</comment>

<cpp:else pos:start="7181:1" pos:end="7181:5">#<cpp:directive pos:start="7181:2" pos:end="7181:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="7183:9" pos:end="7186:0"><expr pos:start="7183:9" pos:end="7183:64"><name pos:start="7183:9" pos:end="7183:11">ret</name> <operator pos:start="7183:13" pos:end="7183:13">=</operator> <call pos:start="7183:15" pos:end="7183:64"><name pos:start="7183:15" pos:end="7183:23">get_errno</name><argument_list pos:start="7183:24" pos:end="7183:64">(<argument pos:start="7183:25" pos:end="7183:63"><expr pos:start="7183:25" pos:end="7183:63"><call pos:start="7183:25" pos:end="7183:63"><name pos:start="7183:25" pos:end="7183:39">sync_file_range</name><argument_list pos:start="7183:40" pos:end="7183:63">(<argument pos:start="7183:41" pos:end="7183:44"><expr pos:start="7183:41" pos:end="7183:44"><name pos:start="7183:41" pos:end="7183:44">arg1</name></expr></argument>, <argument pos:start="7183:47" pos:end="7183:50"><expr pos:start="7183:47" pos:end="7183:50"><name pos:start="7183:47" pos:end="7183:50">arg2</name></expr></argument>, <argument pos:start="7183:53" pos:end="7183:56"><expr pos:start="7183:53" pos:end="7183:56"><name pos:start="7183:53" pos:end="7183:56">arg3</name></expr></argument>, <argument pos:start="7183:59" pos:end="7183:62"><expr pos:start="7183:59" pos:end="7183:62"><name pos:start="7183:59" pos:end="7183:62">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="7185:1" pos:end="7185:6">#<cpp:directive pos:start="7185:2" pos:end="7185:6">endif</cpp:directive></cpp:endif>

        <break pos:start="7187:9" pos:end="7192:0">break;</break>

<cpp:endif pos:start="7189:1" pos:end="7189:6">#<cpp:directive pos:start="7189:2" pos:end="7189:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7191:1" pos:end="7191:39">#<cpp:directive pos:start="7191:2" pos:end="7191:3">if</cpp:directive> <expr pos:start="7191:5" pos:end="7191:39"><call pos:start="7191:5" pos:end="7191:39"><name pos:start="7191:5" pos:end="7191:11">defined</name><argument_list pos:start="7191:12" pos:end="7191:39">(<argument pos:start="7191:13" pos:end="7191:38"><expr pos:start="7191:13" pos:end="7191:38"><name pos:start="7191:13" pos:end="7191:38">TARGET_NR_sync_file_range2</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7193:5" pos:end="7198:0">case <expr pos:start="7193:10" pos:end="7193:35"><name pos:start="7193:10" pos:end="7193:35">TARGET_NR_sync_file_range2</name></expr>:</case>

        <comment type="block" pos:start="7195:9" pos:end="7195:74">/* This is like sync_file_range but the arguments are reordered */</comment>

<cpp:if pos:start="7197:1" pos:end="7197:25">#<cpp:directive pos:start="7197:2" pos:end="7197:3">if</cpp:directive> <expr pos:start="7197:5" pos:end="7197:25"><name pos:start="7197:5" pos:end="7197:19">TARGET_ABI_BITS</name> <operator pos:start="7197:21" pos:end="7197:22">==</operator> <literal type="number" pos:start="7197:24" pos:end="7197:25">32</literal></expr></cpp:if>

        <expr_stmt pos:start="7199:9" pos:end="7204:0"><expr pos:start="7199:9" pos:end="7201:75"><name pos:start="7199:9" pos:end="7199:11">ret</name> <operator pos:start="7199:13" pos:end="7199:13">=</operator> <call pos:start="7199:15" pos:end="7201:75"><name pos:start="7199:15" pos:end="7199:23">get_errno</name><argument_list pos:start="7199:24" pos:end="7201:75">(<argument pos:start="7199:25" pos:end="7201:74"><expr pos:start="7199:25" pos:end="7201:74"><call pos:start="7199:25" pos:end="7201:74"><name pos:start="7199:25" pos:end="7199:39">sync_file_range</name><argument_list pos:start="7199:40" pos:end="7201:74">(<argument pos:start="7199:41" pos:end="7199:44"><expr pos:start="7199:41" pos:end="7199:44"><name pos:start="7199:41" pos:end="7199:44">arg1</name></expr></argument>, <argument pos:start="7199:47" pos:end="7199:73"><expr pos:start="7199:47" pos:end="7199:73"><call pos:start="7199:47" pos:end="7199:73"><name pos:start="7199:47" pos:end="7199:61">target_offset64</name><argument_list pos:start="7199:62" pos:end="7199:73">(<argument pos:start="7199:63" pos:end="7199:66"><expr pos:start="7199:63" pos:end="7199:66"><name pos:start="7199:63" pos:end="7199:66">arg3</name></expr></argument>, <argument pos:start="7199:69" pos:end="7199:72"><expr pos:start="7199:69" pos:end="7199:72"><name pos:start="7199:69" pos:end="7199:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="7201:41" pos:end="7201:67"><expr pos:start="7201:41" pos:end="7201:67"><call pos:start="7201:41" pos:end="7201:67"><name pos:start="7201:41" pos:end="7201:55">target_offset64</name><argument_list pos:start="7201:56" pos:end="7201:67">(<argument pos:start="7201:57" pos:end="7201:60"><expr pos:start="7201:57" pos:end="7201:60"><name pos:start="7201:57" pos:end="7201:60">arg5</name></expr></argument>, <argument pos:start="7201:63" pos:end="7201:66"><expr pos:start="7201:63" pos:end="7201:66"><name pos:start="7201:63" pos:end="7201:66">arg6</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="7201:70" pos:end="7201:73"><expr pos:start="7201:70" pos:end="7201:73"><name pos:start="7201:70" pos:end="7201:73">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="7203:1" pos:end="7203:5">#<cpp:directive pos:start="7203:2" pos:end="7203:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="7205:9" pos:end="7208:0"><expr pos:start="7205:9" pos:end="7205:64"><name pos:start="7205:9" pos:end="7205:11">ret</name> <operator pos:start="7205:13" pos:end="7205:13">=</operator> <call pos:start="7205:15" pos:end="7205:64"><name pos:start="7205:15" pos:end="7205:23">get_errno</name><argument_list pos:start="7205:24" pos:end="7205:64">(<argument pos:start="7205:25" pos:end="7205:63"><expr pos:start="7205:25" pos:end="7205:63"><call pos:start="7205:25" pos:end="7205:63"><name pos:start="7205:25" pos:end="7205:39">sync_file_range</name><argument_list pos:start="7205:40" pos:end="7205:63">(<argument pos:start="7205:41" pos:end="7205:44"><expr pos:start="7205:41" pos:end="7205:44"><name pos:start="7205:41" pos:end="7205:44">arg1</name></expr></argument>, <argument pos:start="7205:47" pos:end="7205:50"><expr pos:start="7205:47" pos:end="7205:50"><name pos:start="7205:47" pos:end="7205:50">arg3</name></expr></argument>, <argument pos:start="7205:53" pos:end="7205:56"><expr pos:start="7205:53" pos:end="7205:56"><name pos:start="7205:53" pos:end="7205:56">arg4</name></expr></argument>, <argument pos:start="7205:59" pos:end="7205:62"><expr pos:start="7205:59" pos:end="7205:62"><name pos:start="7205:59" pos:end="7205:62">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="7207:1" pos:end="7207:6">#<cpp:directive pos:start="7207:2" pos:end="7207:6">endif</cpp:directive></cpp:endif>

        <break pos:start="7209:9" pos:end="7218:0">break;</break>

<cpp:endif pos:start="7211:1" pos:end="7211:6">#<cpp:directive pos:start="7211:2" pos:end="7211:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="7213:1" pos:end="7213:6">#<cpp:directive pos:start="7213:2" pos:end="7213:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7215:1" pos:end="7215:25">#<cpp:directive pos:start="7215:2" pos:end="7215:3">if</cpp:directive> <expr pos:start="7215:5" pos:end="7215:25"><call pos:start="7215:5" pos:end="7215:25"><name pos:start="7215:5" pos:end="7215:11">defined</name><argument_list pos:start="7215:12" pos:end="7215:25">(<argument pos:start="7215:13" pos:end="7215:24"><expr pos:start="7215:13" pos:end="7215:24"><name pos:start="7215:13" pos:end="7215:24">CONFIG_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if pos:start="7217:1" pos:end="7217:35">#<cpp:directive pos:start="7217:2" pos:end="7217:3">if</cpp:directive> <expr pos:start="7217:5" pos:end="7217:35"><call pos:start="7217:5" pos:end="7217:35"><name pos:start="7217:5" pos:end="7217:11">defined</name><argument_list pos:start="7217:12" pos:end="7217:35">(<argument pos:start="7217:13" pos:end="7217:34"><expr pos:start="7217:13" pos:end="7217:34"><name pos:start="7217:13" pos:end="7217:34">TARGET_NR_epoll_create</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7219:5" pos:end="7219:32">case <expr pos:start="7219:10" pos:end="7219:31"><name pos:start="7219:10" pos:end="7219:31">TARGET_NR_epoll_create</name></expr>:</case>

        <expr_stmt pos:start="7221:9" pos:end="7221:44"><expr pos:start="7221:9" pos:end="7221:43"><name pos:start="7221:9" pos:end="7221:11">ret</name> <operator pos:start="7221:13" pos:end="7221:13">=</operator> <call pos:start="7221:15" pos:end="7221:43"><name pos:start="7221:15" pos:end="7221:23">get_errno</name><argument_list pos:start="7221:24" pos:end="7221:43">(<argument pos:start="7221:25" pos:end="7221:42"><expr pos:start="7221:25" pos:end="7221:42"><call pos:start="7221:25" pos:end="7221:42"><name pos:start="7221:25" pos:end="7221:36">epoll_create</name><argument_list pos:start="7221:37" pos:end="7221:42">(<argument pos:start="7221:38" pos:end="7221:41"><expr pos:start="7221:38" pos:end="7221:41"><name pos:start="7221:38" pos:end="7221:41">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7223:9" pos:end="7228:0">break;</break>

<cpp:endif pos:start="7225:1" pos:end="7225:6">#<cpp:directive pos:start="7225:2" pos:end="7225:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7227:1" pos:end="7227:69">#<cpp:directive pos:start="7227:2" pos:end="7227:3">if</cpp:directive> <expr pos:start="7227:5" pos:end="7227:69"><call pos:start="7227:5" pos:end="7227:36"><name pos:start="7227:5" pos:end="7227:11">defined</name><argument_list pos:start="7227:12" pos:end="7227:36">(<argument pos:start="7227:13" pos:end="7227:35"><expr pos:start="7227:13" pos:end="7227:35"><name pos:start="7227:13" pos:end="7227:35">TARGET_NR_epoll_create1</name></expr></argument>)</argument_list></call> <operator pos:start="7227:38" pos:end="7227:39">&amp;&amp;</operator> <call pos:start="7227:41" pos:end="7227:69"><name pos:start="7227:41" pos:end="7227:47">defined</name><argument_list pos:start="7227:48" pos:end="7227:69">(<argument pos:start="7227:49" pos:end="7227:68"><expr pos:start="7227:49" pos:end="7227:68"><name pos:start="7227:49" pos:end="7227:68">CONFIG_EPOLL_CREATE1</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7229:5" pos:end="7229:33">case <expr pos:start="7229:10" pos:end="7229:32"><name pos:start="7229:10" pos:end="7229:32">TARGET_NR_epoll_create1</name></expr>:</case>

        <expr_stmt pos:start="7231:9" pos:end="7231:45"><expr pos:start="7231:9" pos:end="7231:44"><name pos:start="7231:9" pos:end="7231:11">ret</name> <operator pos:start="7231:13" pos:end="7231:13">=</operator> <call pos:start="7231:15" pos:end="7231:44"><name pos:start="7231:15" pos:end="7231:23">get_errno</name><argument_list pos:start="7231:24" pos:end="7231:44">(<argument pos:start="7231:25" pos:end="7231:43"><expr pos:start="7231:25" pos:end="7231:43"><call pos:start="7231:25" pos:end="7231:43"><name pos:start="7231:25" pos:end="7231:37">epoll_create1</name><argument_list pos:start="7231:38" pos:end="7231:43">(<argument pos:start="7231:39" pos:end="7231:42"><expr pos:start="7231:39" pos:end="7231:42"><name pos:start="7231:39" pos:end="7231:42">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7233:9" pos:end="7238:0">break;</break>

<cpp:endif pos:start="7235:1" pos:end="7235:6">#<cpp:directive pos:start="7235:2" pos:end="7235:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7237:1" pos:end="7237:32">#<cpp:directive pos:start="7237:2" pos:end="7237:3">if</cpp:directive> <expr pos:start="7237:5" pos:end="7237:32"><call pos:start="7237:5" pos:end="7237:32"><name pos:start="7237:5" pos:end="7237:11">defined</name><argument_list pos:start="7237:12" pos:end="7237:32">(<argument pos:start="7237:13" pos:end="7237:31"><expr pos:start="7237:13" pos:end="7237:31"><name pos:start="7237:13" pos:end="7237:31">TARGET_NR_epoll_ctl</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7239:5" pos:end="7239:29">case <expr pos:start="7239:10" pos:end="7239:28"><name pos:start="7239:10" pos:end="7239:28">TARGET_NR_epoll_ctl</name></expr>:</case>

    <block pos:start="7241:5" pos:end="7294:0">{<block_content pos:start="7243:9" pos:end="7277:14">

        <decl_stmt pos:start="7243:9" pos:end="7243:30"><decl pos:start="7243:9" pos:end="7243:29"><type pos:start="7243:9" pos:end="7243:26"><name pos:start="7243:9" pos:end="7243:26"><name pos:start="7243:9" pos:end="7243:14">struct</name> <name pos:start="7243:16" pos:end="7243:26">epoll_event</name></name></type> <name pos:start="7243:28" pos:end="7243:29">ep</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7245:9" pos:end="7245:36"><decl pos:start="7245:9" pos:end="7245:35"><type pos:start="7245:9" pos:end="7245:28"><name pos:start="7245:9" pos:end="7245:26"><name pos:start="7245:9" pos:end="7245:14">struct</name> <name pos:start="7245:16" pos:end="7245:26">epoll_event</name></name> <modifier pos:start="7245:28" pos:end="7245:28">*</modifier></type><name pos:start="7245:29" pos:end="7245:31">epp</name> <init pos:start="7245:33" pos:end="7245:35">= <expr pos:start="7245:35" pos:end="7245:35"><literal type="number" pos:start="7245:35" pos:end="7245:35">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="7247:9" pos:end="7273:9"><if pos:start="7247:9" pos:end="7273:9">if <condition pos:start="7247:12" pos:end="7247:17">(<expr pos:start="7247:13" pos:end="7247:16"><name pos:start="7247:13" pos:end="7247:16">arg4</name></expr>)</condition> <block pos:start="7247:19" pos:end="7273:9">{<block_content pos:start="7249:13" pos:end="7271:22">

            <decl_stmt pos:start="7249:13" pos:end="7249:49"><decl pos:start="7249:13" pos:end="7249:48"><type pos:start="7249:13" pos:end="7249:39"><name pos:start="7249:13" pos:end="7249:37"><name pos:start="7249:13" pos:end="7249:18">struct</name> <name pos:start="7249:20" pos:end="7249:37">target_epoll_event</name></name> <modifier pos:start="7249:39" pos:end="7249:39">*</modifier></type><name pos:start="7249:40" pos:end="7249:48">target_ep</name></decl>;</decl_stmt>

            <if_stmt pos:start="7251:13" pos:end="7255:13"><if pos:start="7251:13" pos:end="7255:13">if <condition pos:start="7251:16" pos:end="7251:67">(<expr pos:start="7251:17" pos:end="7251:66"><operator pos:start="7251:17" pos:end="7251:17">!</operator><call pos:start="7251:18" pos:end="7251:66"><name pos:start="7251:18" pos:end="7251:33">lock_user_struct</name><argument_list pos:start="7251:34" pos:end="7251:66">(<argument pos:start="7251:35" pos:end="7251:45"><expr pos:start="7251:35" pos:end="7251:45"><name pos:start="7251:35" pos:end="7251:45">VERIFY_READ</name></expr></argument>, <argument pos:start="7251:48" pos:end="7251:56"><expr pos:start="7251:48" pos:end="7251:56"><name pos:start="7251:48" pos:end="7251:56">target_ep</name></expr></argument>, <argument pos:start="7251:59" pos:end="7251:62"><expr pos:start="7251:59" pos:end="7251:62"><name pos:start="7251:59" pos:end="7251:62">arg4</name></expr></argument>, <argument pos:start="7251:65" pos:end="7251:65"><expr pos:start="7251:65" pos:end="7251:65"><literal type="number" pos:start="7251:65" pos:end="7251:65">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7251:69" pos:end="7255:13">{<block_content pos:start="7253:17" pos:end="7253:28">

                <goto pos:start="7253:17" pos:end="7253:28">goto <name pos:start="7253:22" pos:end="7253:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7257:13" pos:end="7257:51"><expr pos:start="7257:13" pos:end="7257:50"><name pos:start="7257:13" pos:end="7257:21"><name pos:start="7257:13" pos:end="7257:14">ep</name><operator pos:start="7257:15" pos:end="7257:15">.</operator><name pos:start="7257:16" pos:end="7257:21">events</name></name> <operator pos:start="7257:23" pos:end="7257:23">=</operator> <call pos:start="7257:25" pos:end="7257:50"><name pos:start="7257:25" pos:end="7257:31">tswap32</name><argument_list pos:start="7257:32" pos:end="7257:50">(<argument pos:start="7257:33" pos:end="7257:49"><expr pos:start="7257:33" pos:end="7257:49"><name pos:start="7257:33" pos:end="7257:49"><name pos:start="7257:33" pos:end="7257:41">target_ep</name><operator pos:start="7257:42" pos:end="7257:43">-&gt;</operator><name pos:start="7257:44" pos:end="7257:49">events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="7259:13" pos:end="7265:15">/* The epoll_data_t union is just opaque data to the kernel,

             * so we transfer all 64 bits across and need not worry what

             * actual data type it is.

             */</comment>

            <expr_stmt pos:start="7267:13" pos:end="7267:55"><expr pos:start="7267:13" pos:end="7267:54"><name pos:start="7267:13" pos:end="7267:23"><name pos:start="7267:13" pos:end="7267:14">ep</name><operator pos:start="7267:15" pos:end="7267:15">.</operator><name pos:start="7267:16" pos:end="7267:19">data</name><operator pos:start="7267:20" pos:end="7267:20">.</operator><name pos:start="7267:21" pos:end="7267:23">u64</name></name> <operator pos:start="7267:25" pos:end="7267:25">=</operator> <call pos:start="7267:27" pos:end="7267:54"><name pos:start="7267:27" pos:end="7267:33">tswap64</name><argument_list pos:start="7267:34" pos:end="7267:54">(<argument pos:start="7267:35" pos:end="7267:53"><expr pos:start="7267:35" pos:end="7267:53"><name pos:start="7267:35" pos:end="7267:53"><name pos:start="7267:35" pos:end="7267:43">target_ep</name><operator pos:start="7267:44" pos:end="7267:45">-&gt;</operator><name pos:start="7267:46" pos:end="7267:49">data</name><operator pos:start="7267:50" pos:end="7267:50">.</operator><name pos:start="7267:51" pos:end="7267:53">u64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7269:13" pos:end="7269:51"><expr pos:start="7269:13" pos:end="7269:50"><call pos:start="7269:13" pos:end="7269:50"><name pos:start="7269:13" pos:end="7269:30">unlock_user_struct</name><argument_list pos:start="7269:31" pos:end="7269:50">(<argument pos:start="7269:32" pos:end="7269:40"><expr pos:start="7269:32" pos:end="7269:40"><name pos:start="7269:32" pos:end="7269:40">target_ep</name></expr></argument>, <argument pos:start="7269:43" pos:end="7269:46"><expr pos:start="7269:43" pos:end="7269:46"><name pos:start="7269:43" pos:end="7269:46">arg4</name></expr></argument>, <argument pos:start="7269:49" pos:end="7269:49"><expr pos:start="7269:49" pos:end="7269:49"><literal type="number" pos:start="7269:49" pos:end="7269:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7271:13" pos:end="7271:22"><expr pos:start="7271:13" pos:end="7271:21"><name pos:start="7271:13" pos:end="7271:15">epp</name> <operator pos:start="7271:17" pos:end="7271:17">=</operator> <operator pos:start="7271:19" pos:end="7271:19">&amp;</operator><name pos:start="7271:20" pos:end="7271:21">ep</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="7275:9" pos:end="7275:58"><expr pos:start="7275:9" pos:end="7275:57"><name pos:start="7275:9" pos:end="7275:11">ret</name> <operator pos:start="7275:13" pos:end="7275:13">=</operator> <call pos:start="7275:15" pos:end="7275:57"><name pos:start="7275:15" pos:end="7275:23">get_errno</name><argument_list pos:start="7275:24" pos:end="7275:57">(<argument pos:start="7275:25" pos:end="7275:56"><expr pos:start="7275:25" pos:end="7275:56"><call pos:start="7275:25" pos:end="7275:56"><name pos:start="7275:25" pos:end="7275:33">epoll_ctl</name><argument_list pos:start="7275:34" pos:end="7275:56">(<argument pos:start="7275:35" pos:end="7275:38"><expr pos:start="7275:35" pos:end="7275:38"><name pos:start="7275:35" pos:end="7275:38">arg1</name></expr></argument>, <argument pos:start="7275:41" pos:end="7275:44"><expr pos:start="7275:41" pos:end="7275:44"><name pos:start="7275:41" pos:end="7275:44">arg2</name></expr></argument>, <argument pos:start="7275:47" pos:end="7275:50"><expr pos:start="7275:47" pos:end="7275:50"><name pos:start="7275:47" pos:end="7275:50">arg3</name></expr></argument>, <argument pos:start="7275:53" pos:end="7275:55"><expr pos:start="7275:53" pos:end="7275:55"><name pos:start="7275:53" pos:end="7275:55">epp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7277:9" pos:end="7277:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7281:1" pos:end="7281:6">#<cpp:directive pos:start="7281:2" pos:end="7281:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="7285:1" pos:end="7285:65">#<cpp:directive pos:start="7285:2" pos:end="7285:3">if</cpp:directive> <expr pos:start="7285:5" pos:end="7285:65"><call pos:start="7285:5" pos:end="7285:34"><name pos:start="7285:5" pos:end="7285:11">defined</name><argument_list pos:start="7285:12" pos:end="7285:34">(<argument pos:start="7285:13" pos:end="7285:33"><expr pos:start="7285:13" pos:end="7285:33"><name pos:start="7285:13" pos:end="7285:33">TARGET_NR_epoll_pwait</name></expr></argument>)</argument_list></call> <operator pos:start="7285:36" pos:end="7285:37">&amp;&amp;</operator> <call pos:start="7285:39" pos:end="7285:65"><name pos:start="7285:39" pos:end="7285:45">defined</name><argument_list pos:start="7285:46" pos:end="7285:65">(<argument pos:start="7285:47" pos:end="7285:64"><expr pos:start="7285:47" pos:end="7285:64"><name pos:start="7285:47" pos:end="7285:64">CONFIG_EPOLL_PWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define pos:start="7287:1" pos:end="7287:29">#<cpp:directive pos:start="7287:2" pos:end="7287:7">define</cpp:directive> <cpp:macro pos:start="7287:9" pos:end="7287:29"><name pos:start="7287:9" pos:end="7287:29">IMPLEMENT_EPOLL_PWAIT</name></cpp:macro></cpp:define>

<cpp:endif pos:start="7289:1" pos:end="7289:6">#<cpp:directive pos:start="7289:2" pos:end="7289:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7291:1" pos:end="7291:67">#<cpp:directive pos:start="7291:2" pos:end="7291:3">if</cpp:directive> <expr pos:start="7291:5" pos:end="7291:67"><call pos:start="7291:5" pos:end="7291:33"><name pos:start="7291:5" pos:end="7291:11">defined</name><argument_list pos:start="7291:12" pos:end="7291:33">(<argument pos:start="7291:13" pos:end="7291:32"><expr pos:start="7291:13" pos:end="7291:32"><name pos:start="7291:13" pos:end="7291:32">TARGET_NR_epoll_wait</name></expr></argument>)</argument_list></call> <operator pos:start="7291:35" pos:end="7291:36">||</operator> <call pos:start="7291:38" pos:end="7291:67"><name pos:start="7291:38" pos:end="7291:44">defined</name><argument_list pos:start="7291:45" pos:end="7291:67">(<argument pos:start="7291:46" pos:end="7291:66"><expr pos:start="7291:46" pos:end="7291:66"><name pos:start="7291:46" pos:end="7291:66">IMPLEMENT_EPOLL_PWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if pos:start="7293:1" pos:end="7293:33">#<cpp:directive pos:start="7293:2" pos:end="7293:3">if</cpp:directive> <expr pos:start="7293:5" pos:end="7293:33"><call pos:start="7293:5" pos:end="7293:33"><name pos:start="7293:5" pos:end="7293:11">defined</name><argument_list pos:start="7293:12" pos:end="7293:33">(<argument pos:start="7293:13" pos:end="7293:32"><expr pos:start="7293:13" pos:end="7293:32"><name pos:start="7293:13" pos:end="7293:32">TARGET_NR_epoll_wait</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7295:5" pos:end="7300:0">case <expr pos:start="7295:10" pos:end="7295:29"><name pos:start="7295:10" pos:end="7295:29">TARGET_NR_epoll_wait</name></expr>:</case>

<cpp:endif pos:start="7297:1" pos:end="7297:6">#<cpp:directive pos:start="7297:2" pos:end="7297:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7299:1" pos:end="7299:34">#<cpp:directive pos:start="7299:2" pos:end="7299:3">if</cpp:directive> <expr pos:start="7299:5" pos:end="7299:34"><call pos:start="7299:5" pos:end="7299:34"><name pos:start="7299:5" pos:end="7299:11">defined</name><argument_list pos:start="7299:12" pos:end="7299:34">(<argument pos:start="7299:13" pos:end="7299:33"><expr pos:start="7299:13" pos:end="7299:33"><name pos:start="7299:13" pos:end="7299:33">IMPLEMENT_EPOLL_PWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7301:5" pos:end="7304:0">case <expr pos:start="7301:10" pos:end="7301:30"><name pos:start="7301:10" pos:end="7301:30">TARGET_NR_epoll_pwait</name></expr>:</case>

<cpp:endif pos:start="7303:1" pos:end="7303:6">#<cpp:directive pos:start="7303:2" pos:end="7303:6">endif</cpp:directive></cpp:endif>

    <block pos:start="7305:5" pos:end="7424:0">{<block_content pos:start="7307:9" pos:end="7415:14">

        <decl_stmt pos:start="7307:9" pos:end="7307:45"><decl pos:start="7307:9" pos:end="7307:44"><type pos:start="7307:9" pos:end="7307:35"><name pos:start="7307:9" pos:end="7307:33"><name pos:start="7307:9" pos:end="7307:14">struct</name> <name pos:start="7307:16" pos:end="7307:33">target_epoll_event</name></name> <modifier pos:start="7307:35" pos:end="7307:35">*</modifier></type><name pos:start="7307:36" pos:end="7307:44">target_ep</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7309:9" pos:end="7309:31"><decl pos:start="7309:9" pos:end="7309:30"><type pos:start="7309:9" pos:end="7309:28"><name pos:start="7309:9" pos:end="7309:26"><name pos:start="7309:9" pos:end="7309:14">struct</name> <name pos:start="7309:16" pos:end="7309:26">epoll_event</name></name> <modifier pos:start="7309:28" pos:end="7309:28">*</modifier></type><name pos:start="7309:29" pos:end="7309:30">ep</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7311:9" pos:end="7311:24"><decl pos:start="7311:9" pos:end="7311:23"><type pos:start="7311:9" pos:end="7311:11"><name pos:start="7311:9" pos:end="7311:11">int</name></type> <name pos:start="7311:13" pos:end="7311:16">epfd</name> <init pos:start="7311:18" pos:end="7311:23">= <expr pos:start="7311:20" pos:end="7311:23"><name pos:start="7311:20" pos:end="7311:23">arg1</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="7313:9" pos:end="7313:29"><decl pos:start="7313:9" pos:end="7313:28"><type pos:start="7313:9" pos:end="7313:11"><name pos:start="7313:9" pos:end="7313:11">int</name></type> <name pos:start="7313:13" pos:end="7313:21">maxevents</name> <init pos:start="7313:23" pos:end="7313:28">= <expr pos:start="7313:25" pos:end="7313:28"><name pos:start="7313:25" pos:end="7313:28">arg3</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="7315:9" pos:end="7315:27"><decl pos:start="7315:9" pos:end="7315:26"><type pos:start="7315:9" pos:end="7315:11"><name pos:start="7315:9" pos:end="7315:11">int</name></type> <name pos:start="7315:13" pos:end="7315:19">timeout</name> <init pos:start="7315:21" pos:end="7315:26">= <expr pos:start="7315:23" pos:end="7315:26"><name pos:start="7315:23" pos:end="7315:26">arg4</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="7319:9" pos:end="7321:80"><expr pos:start="7319:9" pos:end="7321:79"><name pos:start="7319:9" pos:end="7319:17">target_ep</name> <operator pos:start="7319:19" pos:end="7319:19">=</operator> <call pos:start="7319:21" pos:end="7321:79"><name pos:start="7319:21" pos:end="7319:29">lock_user</name><argument_list pos:start="7319:30" pos:end="7321:79">(<argument pos:start="7319:31" pos:end="7319:42"><expr pos:start="7319:31" pos:end="7319:42"><name pos:start="7319:31" pos:end="7319:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="7319:45" pos:end="7319:48"><expr pos:start="7319:45" pos:end="7319:48"><name pos:start="7319:45" pos:end="7319:48">arg2</name></expr></argument>,

                              <argument pos:start="7321:31" pos:end="7321:75"><expr pos:start="7321:31" pos:end="7321:75"><name pos:start="7321:31" pos:end="7321:39">maxevents</name> <operator pos:start="7321:41" pos:end="7321:41">*</operator> <sizeof pos:start="7321:43" pos:end="7321:75">sizeof<argument_list pos:start="7321:49" pos:end="7321:75">(<argument pos:start="7321:50" pos:end="7321:74"><expr pos:start="7321:50" pos:end="7321:74">struct <name pos:start="7321:57" pos:end="7321:74">target_epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="7321:78" pos:end="7321:78"><expr pos:start="7321:78" pos:end="7321:78"><literal type="number" pos:start="7321:78" pos:end="7321:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="7323:9" pos:end="7327:9"><if pos:start="7323:9" pos:end="7327:9">if <condition pos:start="7323:12" pos:end="7323:23">(<expr pos:start="7323:13" pos:end="7323:22"><operator pos:start="7323:13" pos:end="7323:13">!</operator><name pos:start="7323:14" pos:end="7323:22">target_ep</name></expr>)</condition> <block pos:start="7323:25" pos:end="7327:9">{<block_content pos:start="7325:13" pos:end="7325:24">

            <goto pos:start="7325:13" pos:end="7325:24">goto <name pos:start="7325:18" pos:end="7325:23">efault</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="7331:9" pos:end="7331:60"><expr pos:start="7331:9" pos:end="7331:59"><name pos:start="7331:9" pos:end="7331:10">ep</name> <operator pos:start="7331:12" pos:end="7331:12">=</operator> <call pos:start="7331:14" pos:end="7331:59"><name pos:start="7331:14" pos:end="7331:19">alloca</name><argument_list pos:start="7331:20" pos:end="7331:59">(<argument pos:start="7331:21" pos:end="7331:58"><expr pos:start="7331:21" pos:end="7331:58"><name pos:start="7331:21" pos:end="7331:29">maxevents</name> <operator pos:start="7331:31" pos:end="7331:31">*</operator> <sizeof pos:start="7331:33" pos:end="7331:58">sizeof<argument_list pos:start="7331:39" pos:end="7331:58">(<argument pos:start="7331:40" pos:end="7331:57"><expr pos:start="7331:40" pos:end="7331:57">struct <name pos:start="7331:47" pos:end="7331:57">epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="7335:9" pos:end="7397:9">switch <condition pos:start="7335:16" pos:end="7335:20">(<expr pos:start="7335:17" pos:end="7335:19"><name pos:start="7335:17" pos:end="7335:19">num</name></expr>)</condition> <block pos:start="7335:22" pos:end="7397:9">{<block_content pos:start="7339:9" pos:end="7395:33">

<cpp:if pos:start="7337:1" pos:end="7337:34">#<cpp:directive pos:start="7337:2" pos:end="7337:3">if</cpp:directive> <expr pos:start="7337:5" pos:end="7337:34"><call pos:start="7337:5" pos:end="7337:34"><name pos:start="7337:5" pos:end="7337:11">defined</name><argument_list pos:start="7337:12" pos:end="7337:34">(<argument pos:start="7337:13" pos:end="7337:33"><expr pos:start="7337:13" pos:end="7337:33"><name pos:start="7337:13" pos:end="7337:33">IMPLEMENT_EPOLL_PWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="7339:9" pos:end="7339:35">case <expr pos:start="7339:14" pos:end="7339:34"><name pos:start="7339:14" pos:end="7339:34">TARGET_NR_epoll_pwait</name></expr>:</case>

        <block pos:start="7341:9" pos:end="7384:0">{<block_content pos:start="7343:13" pos:end="7377:18">

            <decl_stmt pos:start="7343:13" pos:end="7343:40"><decl pos:start="7343:13" pos:end="7343:39"><type pos:start="7343:13" pos:end="7343:29"><name pos:start="7343:13" pos:end="7343:27">target_sigset_t</name> <modifier pos:start="7343:29" pos:end="7343:29">*</modifier></type><name pos:start="7343:30" pos:end="7343:39">target_set</name></decl>;</decl_stmt>

            <decl_stmt pos:start="7345:13" pos:end="7345:40"><decl pos:start="7345:13" pos:end="7345:25"><type pos:start="7345:13" pos:end="7345:20"><name pos:start="7345:13" pos:end="7345:20">sigset_t</name></type> <name pos:start="7345:22" pos:end="7345:25">_set</name></decl>, <decl pos:start="7345:28" pos:end="7345:39"><type ref="prev" pos:start="7345:13" pos:end="7345:20"><modifier pos:start="7345:28" pos:end="7345:28">*</modifier></type><name pos:start="7345:29" pos:end="7345:31">set</name> <init pos:start="7345:33" pos:end="7345:39">= <expr pos:start="7345:35" pos:end="7345:39"><operator pos:start="7345:35" pos:end="7345:35">&amp;</operator><name pos:start="7345:36" pos:end="7345:39">_set</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="7349:13" pos:end="7371:13"><if pos:start="7349:13" pos:end="7367:13">if <condition pos:start="7349:16" pos:end="7349:21">(<expr pos:start="7349:17" pos:end="7349:20"><name pos:start="7349:17" pos:end="7349:20">arg5</name></expr>)</condition> <block pos:start="7349:23" pos:end="7367:13">{<block_content pos:start="7351:17" pos:end="7365:49">

                <expr_stmt pos:start="7351:17" pos:end="7353:67"><expr pos:start="7351:17" pos:end="7353:66"><name pos:start="7351:17" pos:end="7351:26">target_set</name> <operator pos:start="7351:28" pos:end="7351:28">=</operator> <call pos:start="7351:30" pos:end="7353:66"><name pos:start="7351:30" pos:end="7351:38">lock_user</name><argument_list pos:start="7351:39" pos:end="7353:66">(<argument pos:start="7351:40" pos:end="7351:50"><expr pos:start="7351:40" pos:end="7351:50"><name pos:start="7351:40" pos:end="7351:50">VERIFY_READ</name></expr></argument>, <argument pos:start="7351:53" pos:end="7351:56"><expr pos:start="7351:53" pos:end="7351:56"><name pos:start="7351:53" pos:end="7351:56">arg5</name></expr></argument>,

                                       <argument pos:start="7353:40" pos:end="7353:62"><expr pos:start="7353:40" pos:end="7353:62"><sizeof pos:start="7353:40" pos:end="7353:62">sizeof<argument_list pos:start="7353:46" pos:end="7353:62">(<argument pos:start="7353:47" pos:end="7353:61"><expr pos:start="7353:47" pos:end="7353:61"><name pos:start="7353:47" pos:end="7353:61">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="7353:65" pos:end="7353:65"><expr pos:start="7353:65" pos:end="7353:65"><literal type="number" pos:start="7353:65" pos:end="7353:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="7355:17" pos:end="7361:17"><if pos:start="7355:17" pos:end="7361:17">if <condition pos:start="7355:20" pos:end="7355:32">(<expr pos:start="7355:21" pos:end="7355:31"><operator pos:start="7355:21" pos:end="7355:21">!</operator><name pos:start="7355:22" pos:end="7355:31">target_set</name></expr>)</condition> <block pos:start="7355:34" pos:end="7361:17">{<block_content pos:start="7357:21" pos:end="7359:32">

                    <expr_stmt pos:start="7357:21" pos:end="7357:52"><expr pos:start="7357:21" pos:end="7357:51"><call pos:start="7357:21" pos:end="7357:51"><name pos:start="7357:21" pos:end="7357:31">unlock_user</name><argument_list pos:start="7357:32" pos:end="7357:51">(<argument pos:start="7357:33" pos:end="7357:41"><expr pos:start="7357:33" pos:end="7357:41"><name pos:start="7357:33" pos:end="7357:41">target_ep</name></expr></argument>, <argument pos:start="7357:44" pos:end="7357:47"><expr pos:start="7357:44" pos:end="7357:47"><name pos:start="7357:44" pos:end="7357:47">arg2</name></expr></argument>, <argument pos:start="7357:50" pos:end="7357:50"><expr pos:start="7357:50" pos:end="7357:50"><literal type="number" pos:start="7357:50" pos:end="7357:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="7359:21" pos:end="7359:32">goto <name pos:start="7359:26" pos:end="7359:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="7363:17" pos:end="7363:55"><expr pos:start="7363:17" pos:end="7363:54"><call pos:start="7363:17" pos:end="7363:54"><name pos:start="7363:17" pos:end="7363:37">target_to_host_sigset</name><argument_list pos:start="7363:38" pos:end="7363:54">(<argument pos:start="7363:39" pos:end="7363:41"><expr pos:start="7363:39" pos:end="7363:41"><name pos:start="7363:39" pos:end="7363:41">set</name></expr></argument>, <argument pos:start="7363:44" pos:end="7363:53"><expr pos:start="7363:44" pos:end="7363:53"><name pos:start="7363:44" pos:end="7363:53">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7365:17" pos:end="7365:49"><expr pos:start="7365:17" pos:end="7365:48"><call pos:start="7365:17" pos:end="7365:48"><name pos:start="7365:17" pos:end="7365:27">unlock_user</name><argument_list pos:start="7365:28" pos:end="7365:48">(<argument pos:start="7365:29" pos:end="7365:38"><expr pos:start="7365:29" pos:end="7365:38"><name pos:start="7365:29" pos:end="7365:38">target_set</name></expr></argument>, <argument pos:start="7365:41" pos:end="7365:44"><expr pos:start="7365:41" pos:end="7365:44"><name pos:start="7365:41" pos:end="7365:44">arg5</name></expr></argument>, <argument pos:start="7365:47" pos:end="7365:47"><expr pos:start="7365:47" pos:end="7365:47"><literal type="number" pos:start="7365:47" pos:end="7365:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="7367:15" pos:end="7371:13">else <block pos:start="7367:20" pos:end="7371:13">{<block_content pos:start="7369:17" pos:end="7369:27">

                <expr_stmt pos:start="7369:17" pos:end="7369:27"><expr pos:start="7369:17" pos:end="7369:26"><name pos:start="7369:17" pos:end="7369:19">set</name> <operator pos:start="7369:21" pos:end="7369:21">=</operator> <name pos:start="7369:23" pos:end="7369:26">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="7375:13" pos:end="7375:76"><expr pos:start="7375:13" pos:end="7375:75"><name pos:start="7375:13" pos:end="7375:15">ret</name> <operator pos:start="7375:17" pos:end="7375:17">=</operator> <call pos:start="7375:19" pos:end="7375:75"><name pos:start="7375:19" pos:end="7375:27">get_errno</name><argument_list pos:start="7375:28" pos:end="7375:75">(<argument pos:start="7375:29" pos:end="7375:74"><expr pos:start="7375:29" pos:end="7375:74"><call pos:start="7375:29" pos:end="7375:74"><name pos:start="7375:29" pos:end="7375:39">epoll_pwait</name><argument_list pos:start="7375:40" pos:end="7375:74">(<argument pos:start="7375:41" pos:end="7375:44"><expr pos:start="7375:41" pos:end="7375:44"><name pos:start="7375:41" pos:end="7375:44">epfd</name></expr></argument>, <argument pos:start="7375:47" pos:end="7375:48"><expr pos:start="7375:47" pos:end="7375:48"><name pos:start="7375:47" pos:end="7375:48">ep</name></expr></argument>, <argument pos:start="7375:51" pos:end="7375:59"><expr pos:start="7375:51" pos:end="7375:59"><name pos:start="7375:51" pos:end="7375:59">maxevents</name></expr></argument>, <argument pos:start="7375:62" pos:end="7375:68"><expr pos:start="7375:62" pos:end="7375:68"><name pos:start="7375:62" pos:end="7375:68">timeout</name></expr></argument>, <argument pos:start="7375:71" pos:end="7375:73"><expr pos:start="7375:71" pos:end="7375:73"><name pos:start="7375:71" pos:end="7375:73">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7377:13" pos:end="7377:18">break;</break>

        </block_content>}</block>

<cpp:endif pos:start="7381:1" pos:end="7381:6">#<cpp:directive pos:start="7381:2" pos:end="7381:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7383:1" pos:end="7383:33">#<cpp:directive pos:start="7383:2" pos:end="7383:3">if</cpp:directive> <expr pos:start="7383:5" pos:end="7383:33"><call pos:start="7383:5" pos:end="7383:33"><name pos:start="7383:5" pos:end="7383:11">defined</name><argument_list pos:start="7383:12" pos:end="7383:33">(<argument pos:start="7383:13" pos:end="7383:32"><expr pos:start="7383:13" pos:end="7383:32"><name pos:start="7383:13" pos:end="7383:32">TARGET_NR_epoll_wait</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="7385:9" pos:end="7385:34">case <expr pos:start="7385:14" pos:end="7385:33"><name pos:start="7385:14" pos:end="7385:33">TARGET_NR_epoll_wait</name></expr>:</case>

            <expr_stmt pos:start="7387:13" pos:end="7387:70"><expr pos:start="7387:13" pos:end="7387:69"><name pos:start="7387:13" pos:end="7387:15">ret</name> <operator pos:start="7387:17" pos:end="7387:17">=</operator> <call pos:start="7387:19" pos:end="7387:69"><name pos:start="7387:19" pos:end="7387:27">get_errno</name><argument_list pos:start="7387:28" pos:end="7387:69">(<argument pos:start="7387:29" pos:end="7387:68"><expr pos:start="7387:29" pos:end="7387:68"><call pos:start="7387:29" pos:end="7387:68"><name pos:start="7387:29" pos:end="7387:38">epoll_wait</name><argument_list pos:start="7387:39" pos:end="7387:68">(<argument pos:start="7387:40" pos:end="7387:43"><expr pos:start="7387:40" pos:end="7387:43"><name pos:start="7387:40" pos:end="7387:43">epfd</name></expr></argument>, <argument pos:start="7387:46" pos:end="7387:47"><expr pos:start="7387:46" pos:end="7387:47"><name pos:start="7387:46" pos:end="7387:47">ep</name></expr></argument>, <argument pos:start="7387:50" pos:end="7387:58"><expr pos:start="7387:50" pos:end="7387:58"><name pos:start="7387:50" pos:end="7387:58">maxevents</name></expr></argument>, <argument pos:start="7387:61" pos:end="7387:67"><expr pos:start="7387:61" pos:end="7387:67"><name pos:start="7387:61" pos:end="7387:67">timeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7389:13" pos:end="7392:0">break;</break>

<cpp:endif pos:start="7391:1" pos:end="7391:6">#<cpp:directive pos:start="7391:2" pos:end="7391:6">endif</cpp:directive></cpp:endif>

        <default pos:start="7393:9" pos:end="7393:16">default:</default>

            <expr_stmt pos:start="7395:13" pos:end="7395:33"><expr pos:start="7395:13" pos:end="7395:32"><name pos:start="7395:13" pos:end="7395:15">ret</name> <operator pos:start="7395:17" pos:end="7395:17">=</operator> <operator pos:start="7395:19" pos:end="7395:19">-</operator><name pos:start="7395:20" pos:end="7395:32">TARGET_ENOSYS</name></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="7399:9" pos:end="7411:9"><if pos:start="7399:9" pos:end="7411:9">if <condition pos:start="7399:12" pos:end="7399:27">(<expr pos:start="7399:13" pos:end="7399:26"><operator pos:start="7399:13" pos:end="7399:13">!</operator><call pos:start="7399:14" pos:end="7399:26"><name pos:start="7399:14" pos:end="7399:21">is_error</name><argument_list pos:start="7399:22" pos:end="7399:26">(<argument pos:start="7399:23" pos:end="7399:25"><expr pos:start="7399:23" pos:end="7399:25"><name pos:start="7399:23" pos:end="7399:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7399:29" pos:end="7411:9">{<block_content pos:start="7401:13" pos:end="7409:13">

            <decl_stmt pos:start="7401:13" pos:end="7401:18"><decl pos:start="7401:13" pos:end="7401:17"><type pos:start="7401:13" pos:end="7401:15"><name pos:start="7401:13" pos:end="7401:15">int</name></type> <name pos:start="7401:17" pos:end="7401:17">i</name></decl>;</decl_stmt>

            <for pos:start="7403:13" pos:end="7409:13">for <control pos:start="7403:17" pos:end="7403:37">(<init pos:start="7403:18" pos:end="7403:23"><expr pos:start="7403:18" pos:end="7403:22"><name pos:start="7403:18" pos:end="7403:18">i</name> <operator pos:start="7403:20" pos:end="7403:20">=</operator> <literal type="number" pos:start="7403:22" pos:end="7403:22">0</literal></expr>;</init> <condition pos:start="7403:25" pos:end="7403:32"><expr pos:start="7403:25" pos:end="7403:31"><name pos:start="7403:25" pos:end="7403:25">i</name> <operator pos:start="7403:27" pos:end="7403:27">&lt;</operator> <name pos:start="7403:29" pos:end="7403:31">ret</name></expr>;</condition> <incr pos:start="7403:34" pos:end="7403:36"><expr pos:start="7403:34" pos:end="7403:36"><name pos:start="7403:34" pos:end="7403:34">i</name><operator pos:start="7403:35" pos:end="7403:36">++</operator></expr></incr>)</control> <block pos:start="7403:39" pos:end="7409:13">{<block_content pos:start="7405:17" pos:end="7407:64">

                <expr_stmt pos:start="7405:17" pos:end="7405:60"><expr pos:start="7405:17" pos:end="7405:59"><name pos:start="7405:17" pos:end="7405:28"><name pos:start="7405:17" pos:end="7405:25">target_ep</name><index pos:start="7405:26" pos:end="7405:28">[<expr pos:start="7405:27" pos:end="7405:27"><name pos:start="7405:27" pos:end="7405:27">i</name></expr>]</index></name><operator pos:start="7405:29" pos:end="7405:29">.</operator><name pos:start="7405:30" pos:end="7405:35">events</name> <operator pos:start="7405:37" pos:end="7405:37">=</operator> <call pos:start="7405:39" pos:end="7405:59"><name pos:start="7405:39" pos:end="7405:45">tswap32</name><argument_list pos:start="7405:46" pos:end="7405:59">(<argument pos:start="7405:47" pos:end="7405:58"><expr pos:start="7405:47" pos:end="7405:58"><name pos:start="7405:47" pos:end="7405:51"><name pos:start="7405:47" pos:end="7405:48">ep</name><index pos:start="7405:49" pos:end="7405:51">[<expr pos:start="7405:50" pos:end="7405:50"><name pos:start="7405:50" pos:end="7405:50">i</name></expr>]</index></name><operator pos:start="7405:52" pos:end="7405:52">.</operator><name pos:start="7405:53" pos:end="7405:58">events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7407:17" pos:end="7407:64"><expr pos:start="7407:17" pos:end="7407:63"><name pos:start="7407:17" pos:end="7407:28"><name pos:start="7407:17" pos:end="7407:25">target_ep</name><index pos:start="7407:26" pos:end="7407:28">[<expr pos:start="7407:27" pos:end="7407:27"><name pos:start="7407:27" pos:end="7407:27">i</name></expr>]</index></name><operator pos:start="7407:29" pos:end="7407:29">.</operator><name pos:start="7407:30" pos:end="7407:37"><name pos:start="7407:30" pos:end="7407:33">data</name><operator pos:start="7407:34" pos:end="7407:34">.</operator><name pos:start="7407:35" pos:end="7407:37">u64</name></name> <operator pos:start="7407:39" pos:end="7407:39">=</operator> <call pos:start="7407:41" pos:end="7407:63"><name pos:start="7407:41" pos:end="7407:47">tswap64</name><argument_list pos:start="7407:48" pos:end="7407:63">(<argument pos:start="7407:49" pos:end="7407:62"><expr pos:start="7407:49" pos:end="7407:62"><name pos:start="7407:49" pos:end="7407:53"><name pos:start="7407:49" pos:end="7407:50">ep</name><index pos:start="7407:51" pos:end="7407:53">[<expr pos:start="7407:52" pos:end="7407:52"><name pos:start="7407:52" pos:end="7407:52">i</name></expr>]</index></name><operator pos:start="7407:54" pos:end="7407:54">.</operator><name pos:start="7407:55" pos:end="7407:62"><name pos:start="7407:55" pos:end="7407:58">data</name><operator pos:start="7407:59" pos:end="7407:59">.</operator><name pos:start="7407:60" pos:end="7407:62">u64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="7413:9" pos:end="7413:78"><expr pos:start="7413:9" pos:end="7413:77"><call pos:start="7413:9" pos:end="7413:77"><name pos:start="7413:9" pos:end="7413:19">unlock_user</name><argument_list pos:start="7413:20" pos:end="7413:77">(<argument pos:start="7413:21" pos:end="7413:29"><expr pos:start="7413:21" pos:end="7413:29"><name pos:start="7413:21" pos:end="7413:29">target_ep</name></expr></argument>, <argument pos:start="7413:32" pos:end="7413:35"><expr pos:start="7413:32" pos:end="7413:35"><name pos:start="7413:32" pos:end="7413:35">arg2</name></expr></argument>, <argument pos:start="7413:38" pos:end="7413:76"><expr pos:start="7413:38" pos:end="7413:76"><name pos:start="7413:38" pos:end="7413:40">ret</name> <operator pos:start="7413:42" pos:end="7413:42">*</operator> <sizeof pos:start="7413:44" pos:end="7413:76">sizeof<argument_list pos:start="7413:50" pos:end="7413:76">(<argument pos:start="7413:51" pos:end="7413:75"><expr pos:start="7413:51" pos:end="7413:75">struct <name pos:start="7413:58" pos:end="7413:75">target_epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7415:9" pos:end="7415:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7419:1" pos:end="7419:6">#<cpp:directive pos:start="7419:2" pos:end="7419:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="7421:1" pos:end="7421:6">#<cpp:directive pos:start="7421:2" pos:end="7421:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7423:1" pos:end="7423:26">#<cpp:directive pos:start="7423:2" pos:end="7423:6">ifdef</cpp:directive> <name pos:start="7423:8" pos:end="7423:26">TARGET_NR_prlimit64</name></cpp:ifdef>

    <case pos:start="7425:5" pos:end="7425:29">case <expr pos:start="7425:10" pos:end="7425:28"><name pos:start="7425:10" pos:end="7425:28">TARGET_NR_prlimit64</name></expr>:</case>

    <block pos:start="7427:5" pos:end="7478:0">{<block_content pos:start="7431:9" pos:end="7473:14">

        <comment type="block" pos:start="7429:9" pos:end="7429:78">/* args: pid, resource number, ptr to new rlimit, ptr to old rlimit */</comment>

        <decl_stmt pos:start="7431:9" pos:end="7431:58"><decl pos:start="7431:9" pos:end="7431:43"><type pos:start="7431:9" pos:end="7431:32"><name pos:start="7431:9" pos:end="7431:30"><name pos:start="7431:9" pos:end="7431:14">struct</name> <name pos:start="7431:16" pos:end="7431:30">target_rlimit64</name></name> <modifier pos:start="7431:32" pos:end="7431:32">*</modifier></type><name pos:start="7431:33" pos:end="7431:43">target_rnew</name></decl>, <decl pos:start="7431:46" pos:end="7431:57"><type ref="prev" pos:start="7431:9" pos:end="7431:32"><modifier pos:start="7431:46" pos:end="7431:46">*</modifier></type><name pos:start="7431:47" pos:end="7431:57">target_rold</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7433:9" pos:end="7433:52"><decl pos:start="7433:9" pos:end="7433:33"><type pos:start="7433:9" pos:end="7433:28"><name pos:start="7433:9" pos:end="7433:28"><name pos:start="7433:9" pos:end="7433:14">struct</name> <name pos:start="7433:16" pos:end="7433:28">host_rlimit64</name></name></type> <name pos:start="7433:30" pos:end="7433:33">rnew</name></decl>, <decl pos:start="7433:36" pos:end="7433:39"><type ref="prev" pos:start="7433:9" pos:end="7433:28"/><name pos:start="7433:36" pos:end="7433:39">rold</name></decl>, <decl pos:start="7433:42" pos:end="7433:51"><type ref="prev" pos:start="7433:9" pos:end="7433:28"><modifier pos:start="7433:42" pos:end="7433:42">*</modifier></type><name pos:start="7433:43" pos:end="7433:47">rnewp</name> <init pos:start="7433:49" pos:end="7433:51">= <expr pos:start="7433:51" pos:end="7433:51"><literal type="number" pos:start="7433:51" pos:end="7433:51">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="7435:9" pos:end="7451:9"><if pos:start="7435:9" pos:end="7451:9">if <condition pos:start="7435:12" pos:end="7435:17">(<expr pos:start="7435:13" pos:end="7435:16"><name pos:start="7435:13" pos:end="7435:16">arg3</name></expr>)</condition> <block pos:start="7435:19" pos:end="7451:9">{<block_content pos:start="7437:13" pos:end="7449:26">

            <if_stmt pos:start="7437:13" pos:end="7441:13"><if pos:start="7437:13" pos:end="7441:13">if <condition pos:start="7437:16" pos:end="7437:69">(<expr pos:start="7437:17" pos:end="7437:68"><operator pos:start="7437:17" pos:end="7437:17">!</operator><call pos:start="7437:18" pos:end="7437:68"><name pos:start="7437:18" pos:end="7437:33">lock_user_struct</name><argument_list pos:start="7437:34" pos:end="7437:68">(<argument pos:start="7437:35" pos:end="7437:45"><expr pos:start="7437:35" pos:end="7437:45"><name pos:start="7437:35" pos:end="7437:45">VERIFY_READ</name></expr></argument>, <argument pos:start="7437:48" pos:end="7437:58"><expr pos:start="7437:48" pos:end="7437:58"><name pos:start="7437:48" pos:end="7437:58">target_rnew</name></expr></argument>, <argument pos:start="7437:61" pos:end="7437:64"><expr pos:start="7437:61" pos:end="7437:64"><name pos:start="7437:61" pos:end="7437:64">arg3</name></expr></argument>, <argument pos:start="7437:67" pos:end="7437:67"><expr pos:start="7437:67" pos:end="7437:67"><literal type="number" pos:start="7437:67" pos:end="7437:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7437:71" pos:end="7441:13">{<block_content pos:start="7439:17" pos:end="7439:28">

                <goto pos:start="7439:17" pos:end="7439:28">goto <name pos:start="7439:22" pos:end="7439:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7443:13" pos:end="7443:59"><expr pos:start="7443:13" pos:end="7443:58"><name pos:start="7443:13" pos:end="7443:25"><name pos:start="7443:13" pos:end="7443:16">rnew</name><operator pos:start="7443:17" pos:end="7443:17">.</operator><name pos:start="7443:18" pos:end="7443:25">rlim_cur</name></name> <operator pos:start="7443:27" pos:end="7443:27">=</operator> <call pos:start="7443:29" pos:end="7443:58"><name pos:start="7443:29" pos:end="7443:35">tswap64</name><argument_list pos:start="7443:36" pos:end="7443:58">(<argument pos:start="7443:37" pos:end="7443:57"><expr pos:start="7443:37" pos:end="7443:57"><name pos:start="7443:37" pos:end="7443:57"><name pos:start="7443:37" pos:end="7443:47">target_rnew</name><operator pos:start="7443:48" pos:end="7443:49">-&gt;</operator><name pos:start="7443:50" pos:end="7443:57">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7445:13" pos:end="7445:59"><expr pos:start="7445:13" pos:end="7445:58"><name pos:start="7445:13" pos:end="7445:25"><name pos:start="7445:13" pos:end="7445:16">rnew</name><operator pos:start="7445:17" pos:end="7445:17">.</operator><name pos:start="7445:18" pos:end="7445:25">rlim_max</name></name> <operator pos:start="7445:27" pos:end="7445:27">=</operator> <call pos:start="7445:29" pos:end="7445:58"><name pos:start="7445:29" pos:end="7445:35">tswap64</name><argument_list pos:start="7445:36" pos:end="7445:58">(<argument pos:start="7445:37" pos:end="7445:57"><expr pos:start="7445:37" pos:end="7445:57"><name pos:start="7445:37" pos:end="7445:57"><name pos:start="7445:37" pos:end="7445:47">target_rnew</name><operator pos:start="7445:48" pos:end="7445:49">-&gt;</operator><name pos:start="7445:50" pos:end="7445:57">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7447:13" pos:end="7447:53"><expr pos:start="7447:13" pos:end="7447:52"><call pos:start="7447:13" pos:end="7447:52"><name pos:start="7447:13" pos:end="7447:30">unlock_user_struct</name><argument_list pos:start="7447:31" pos:end="7447:52">(<argument pos:start="7447:32" pos:end="7447:42"><expr pos:start="7447:32" pos:end="7447:42"><name pos:start="7447:32" pos:end="7447:42">target_rnew</name></expr></argument>, <argument pos:start="7447:45" pos:end="7447:48"><expr pos:start="7447:45" pos:end="7447:48"><name pos:start="7447:45" pos:end="7447:48">arg3</name></expr></argument>, <argument pos:start="7447:51" pos:end="7447:51"><expr pos:start="7447:51" pos:end="7447:51"><literal type="number" pos:start="7447:51" pos:end="7447:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7449:13" pos:end="7449:26"><expr pos:start="7449:13" pos:end="7449:25"><name pos:start="7449:13" pos:end="7449:17">rnewp</name> <operator pos:start="7449:19" pos:end="7449:19">=</operator> <operator pos:start="7449:21" pos:end="7449:21">&amp;</operator><name pos:start="7449:22" pos:end="7449:25">rnew</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="7455:9" pos:end="7455:76"><expr pos:start="7455:9" pos:end="7455:75"><name pos:start="7455:9" pos:end="7455:11">ret</name> <operator pos:start="7455:13" pos:end="7455:13">=</operator> <call pos:start="7455:15" pos:end="7455:75"><name pos:start="7455:15" pos:end="7455:23">get_errno</name><argument_list pos:start="7455:24" pos:end="7455:75">(<argument pos:start="7455:25" pos:end="7455:74"><expr pos:start="7455:25" pos:end="7455:74"><call pos:start="7455:25" pos:end="7455:74"><name pos:start="7455:25" pos:end="7455:37">sys_prlimit64</name><argument_list pos:start="7455:38" pos:end="7455:74">(<argument pos:start="7455:39" pos:end="7455:42"><expr pos:start="7455:39" pos:end="7455:42"><name pos:start="7455:39" pos:end="7455:42">arg1</name></expr></argument>, <argument pos:start="7455:45" pos:end="7455:48"><expr pos:start="7455:45" pos:end="7455:48"><name pos:start="7455:45" pos:end="7455:48">arg2</name></expr></argument>, <argument pos:start="7455:51" pos:end="7455:55"><expr pos:start="7455:51" pos:end="7455:55"><name pos:start="7455:51" pos:end="7455:55">rnewp</name></expr></argument>, <argument pos:start="7455:58" pos:end="7455:73"><expr pos:start="7455:58" pos:end="7455:73"><ternary pos:start="7455:58" pos:end="7455:73"><condition pos:start="7455:58" pos:end="7455:63"><expr pos:start="7455:58" pos:end="7455:61"><name pos:start="7455:58" pos:end="7455:61">arg4</name></expr> ?</condition><then pos:start="7455:65" pos:end="7455:69"> <expr pos:start="7455:65" pos:end="7455:69"><operator pos:start="7455:65" pos:end="7455:65">&amp;</operator><name pos:start="7455:66" pos:end="7455:69">rold</name></expr> </then><else pos:start="7455:71" pos:end="7455:73">: <expr pos:start="7455:73" pos:end="7455:73"><literal type="number" pos:start="7455:73" pos:end="7455:73">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="7457:9" pos:end="7471:9"><if pos:start="7457:9" pos:end="7471:9">if <condition pos:start="7457:12" pos:end="7457:35">(<expr pos:start="7457:13" pos:end="7457:34"><operator pos:start="7457:13" pos:end="7457:13">!</operator><call pos:start="7457:14" pos:end="7457:26"><name pos:start="7457:14" pos:end="7457:21">is_error</name><argument_list pos:start="7457:22" pos:end="7457:26">(<argument pos:start="7457:23" pos:end="7457:25"><expr pos:start="7457:23" pos:end="7457:25"><name pos:start="7457:23" pos:end="7457:25">ret</name></expr></argument>)</argument_list></call> <operator pos:start="7457:28" pos:end="7457:29">&amp;&amp;</operator> <name pos:start="7457:31" pos:end="7457:34">arg4</name></expr>)</condition> <block pos:start="7457:37" pos:end="7471:9">{<block_content pos:start="7459:13" pos:end="7469:53">

            <if_stmt pos:start="7459:13" pos:end="7463:13"><if pos:start="7459:13" pos:end="7463:13">if <condition pos:start="7459:16" pos:end="7459:70">(<expr pos:start="7459:17" pos:end="7459:69"><operator pos:start="7459:17" pos:end="7459:17">!</operator><call pos:start="7459:18" pos:end="7459:69"><name pos:start="7459:18" pos:end="7459:33">lock_user_struct</name><argument_list pos:start="7459:34" pos:end="7459:69">(<argument pos:start="7459:35" pos:end="7459:46"><expr pos:start="7459:35" pos:end="7459:46"><name pos:start="7459:35" pos:end="7459:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="7459:49" pos:end="7459:59"><expr pos:start="7459:49" pos:end="7459:59"><name pos:start="7459:49" pos:end="7459:59">target_rold</name></expr></argument>, <argument pos:start="7459:62" pos:end="7459:65"><expr pos:start="7459:62" pos:end="7459:65"><name pos:start="7459:62" pos:end="7459:65">arg4</name></expr></argument>, <argument pos:start="7459:68" pos:end="7459:68"><expr pos:start="7459:68" pos:end="7459:68"><literal type="number" pos:start="7459:68" pos:end="7459:68">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7459:72" pos:end="7463:13">{<block_content pos:start="7461:17" pos:end="7461:28">

                <goto pos:start="7461:17" pos:end="7461:28">goto <name pos:start="7461:22" pos:end="7461:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7465:13" pos:end="7465:59"><expr pos:start="7465:13" pos:end="7465:58"><name pos:start="7465:13" pos:end="7465:33"><name pos:start="7465:13" pos:end="7465:23">target_rold</name><operator pos:start="7465:24" pos:end="7465:25">-&gt;</operator><name pos:start="7465:26" pos:end="7465:33">rlim_cur</name></name> <operator pos:start="7465:35" pos:end="7465:35">=</operator> <call pos:start="7465:37" pos:end="7465:58"><name pos:start="7465:37" pos:end="7465:43">tswap64</name><argument_list pos:start="7465:44" pos:end="7465:58">(<argument pos:start="7465:45" pos:end="7465:57"><expr pos:start="7465:45" pos:end="7465:57"><name pos:start="7465:45" pos:end="7465:57"><name pos:start="7465:45" pos:end="7465:48">rold</name><operator pos:start="7465:49" pos:end="7465:49">.</operator><name pos:start="7465:50" pos:end="7465:57">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7467:13" pos:end="7467:59"><expr pos:start="7467:13" pos:end="7467:58"><name pos:start="7467:13" pos:end="7467:33"><name pos:start="7467:13" pos:end="7467:23">target_rold</name><operator pos:start="7467:24" pos:end="7467:25">-&gt;</operator><name pos:start="7467:26" pos:end="7467:33">rlim_max</name></name> <operator pos:start="7467:35" pos:end="7467:35">=</operator> <call pos:start="7467:37" pos:end="7467:58"><name pos:start="7467:37" pos:end="7467:43">tswap64</name><argument_list pos:start="7467:44" pos:end="7467:58">(<argument pos:start="7467:45" pos:end="7467:57"><expr pos:start="7467:45" pos:end="7467:57"><name pos:start="7467:45" pos:end="7467:57"><name pos:start="7467:45" pos:end="7467:48">rold</name><operator pos:start="7467:49" pos:end="7467:49">.</operator><name pos:start="7467:50" pos:end="7467:57">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7469:13" pos:end="7469:53"><expr pos:start="7469:13" pos:end="7469:52"><call pos:start="7469:13" pos:end="7469:52"><name pos:start="7469:13" pos:end="7469:30">unlock_user_struct</name><argument_list pos:start="7469:31" pos:end="7469:52">(<argument pos:start="7469:32" pos:end="7469:42"><expr pos:start="7469:32" pos:end="7469:42"><name pos:start="7469:32" pos:end="7469:42">target_rold</name></expr></argument>, <argument pos:start="7469:45" pos:end="7469:48"><expr pos:start="7469:45" pos:end="7469:48"><name pos:start="7469:45" pos:end="7469:48">arg4</name></expr></argument>, <argument pos:start="7469:51" pos:end="7469:51"><expr pos:start="7469:51" pos:end="7469:51"><literal type="number" pos:start="7469:51" pos:end="7469:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="7473:9" pos:end="7473:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7477:1" pos:end="7477:6">#<cpp:directive pos:start="7477:2" pos:end="7477:6">endif</cpp:directive></cpp:endif>

    <default pos:start="7479:5" pos:end="7479:12">default:</default>

    <label pos:start="7481:5" pos:end="7481:18"><name pos:start="7481:5" pos:end="7481:17">unimplemented</name>:</label>

        <expr_stmt pos:start="7483:9" pos:end="7486:0"><expr pos:start="7483:9" pos:end="7483:56"><call pos:start="7483:9" pos:end="7483:56"><name pos:start="7483:9" pos:end="7483:16">gemu_log</name><argument_list pos:start="7483:17" pos:end="7483:56">(<argument pos:start="7483:18" pos:end="7483:50"><expr pos:start="7483:18" pos:end="7483:50"><literal type="string" pos:start="7483:18" pos:end="7483:50">"qemu: Unsupported syscall: %d\n"</literal></expr></argument>, <argument pos:start="7483:53" pos:end="7483:55"><expr pos:start="7483:53" pos:end="7483:55"><name pos:start="7483:53" pos:end="7483:55">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="7485:1" pos:end="7485:143">#<cpp:directive pos:start="7485:2" pos:end="7485:3">if</cpp:directive> <expr pos:start="7485:5" pos:end="7485:143"><call pos:start="7485:5" pos:end="7485:31"><name pos:start="7485:5" pos:end="7485:11">defined</name><argument_list pos:start="7485:12" pos:end="7485:31">(<argument pos:start="7485:13" pos:end="7485:30"><expr pos:start="7485:13" pos:end="7485:30"><name pos:start="7485:13" pos:end="7485:30">TARGET_NR_setxattr</name></expr></argument>)</argument_list></call> <operator pos:start="7485:33" pos:end="7485:34">||</operator> <call pos:start="7485:36" pos:end="7485:69"><name pos:start="7485:36" pos:end="7485:42">defined</name><argument_list pos:start="7485:43" pos:end="7485:69">(<argument pos:start="7485:44" pos:end="7485:68"><expr pos:start="7485:44" pos:end="7485:68"><name pos:start="7485:44" pos:end="7485:68">TARGET_NR_get_thread_area</name></expr></argument>)</argument_list></call> <operator pos:start="7485:71" pos:end="7485:72">||</operator> <call pos:start="7485:74" pos:end="7485:105"><name pos:start="7485:74" pos:end="7485:80">defined</name><argument_list pos:start="7485:81" pos:end="7485:105">(<argument pos:start="7485:82" pos:end="7485:104"><expr pos:start="7485:82" pos:end="7485:104"><name pos:start="7485:82" pos:end="7485:104">TARGET_NR_getdomainname</name></expr></argument>)</argument_list></call> <operator pos:start="7485:107" pos:end="7485:108">||</operator> <call pos:start="7485:110" pos:end="7485:143"><name pos:start="7485:110" pos:end="7485:116">defined</name><argument_list pos:start="7485:117" pos:end="7485:143">(<argument pos:start="7485:118" pos:end="7485:142"><expr pos:start="7485:118" pos:end="7485:142"><name pos:start="7485:118" pos:end="7485:142">TARGET_NR_set_robust_list</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <label pos:start="7487:5" pos:end="7490:0"><name pos:start="7487:5" pos:end="7487:24">unimplemented_nowarn</name>:</label>

<cpp:endif pos:start="7489:1" pos:end="7489:6">#<cpp:directive pos:start="7489:2" pos:end="7489:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="7491:9" pos:end="7491:29"><expr pos:start="7491:9" pos:end="7491:28"><name pos:start="7491:9" pos:end="7491:11">ret</name> <operator pos:start="7491:13" pos:end="7491:13">=</operator> <operator pos:start="7491:15" pos:end="7491:15">-</operator><name pos:start="7491:16" pos:end="7491:28">TARGET_ENOSYS</name></expr>;</expr_stmt>

        <break pos:start="7493:9" pos:end="7493:14">break;</break>

    </block_content>}</block></switch>

<label pos:start="7497:1" pos:end="7500:0"><name pos:start="7497:1" pos:end="7497:4">fail</name>:</label>

<cpp:ifdef pos:start="7499:1" pos:end="7499:12">#<cpp:directive pos:start="7499:2" pos:end="7499:6">ifdef</cpp:directive> <name pos:start="7499:8" pos:end="7499:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="7501:5" pos:end="7504:0"><expr pos:start="7501:5" pos:end="7501:47"><call pos:start="7501:5" pos:end="7501:47"><name pos:start="7501:5" pos:end="7501:12">gemu_log</name><argument_list pos:start="7501:13" pos:end="7501:47">(<argument pos:start="7501:14" pos:end="7501:41"><expr pos:start="7501:14" pos:end="7501:41"><literal type="string" pos:start="7501:14" pos:end="7501:18">" = "</literal> <name pos:start="7501:20" pos:end="7501:36">TARGET_ABI_FMT_ld</name> <literal type="string" pos:start="7501:38" pos:end="7501:41">"\n"</literal></expr></argument>, <argument pos:start="7501:44" pos:end="7501:46"><expr pos:start="7501:44" pos:end="7501:46"><name pos:start="7501:44" pos:end="7501:46">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="7503:1" pos:end="7503:6">#<cpp:directive pos:start="7503:2" pos:end="7503:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="7505:5" pos:end="7507:36"><if pos:start="7505:5" pos:end="7507:36">if<condition pos:start="7505:7" pos:end="7505:17">(<expr pos:start="7505:8" pos:end="7505:16"><name pos:start="7505:8" pos:end="7505:16">do_strace</name></expr>)</condition><block type="pseudo" pos:start="7507:9" pos:end="7507:36"><block_content pos:start="7507:9" pos:end="7507:36">

        <expr_stmt pos:start="7507:9" pos:end="7507:36"><expr pos:start="7507:9" pos:end="7507:35"><call pos:start="7507:9" pos:end="7507:35"><name pos:start="7507:9" pos:end="7507:25">print_syscall_ret</name><argument_list pos:start="7507:26" pos:end="7507:35">(<argument pos:start="7507:27" pos:end="7507:29"><expr pos:start="7507:27" pos:end="7507:29"><name pos:start="7507:27" pos:end="7507:29">num</name></expr></argument>, <argument pos:start="7507:32" pos:end="7507:34"><expr pos:start="7507:32" pos:end="7507:34"><name pos:start="7507:32" pos:end="7507:34">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="7509:5" pos:end="7509:15">return <expr pos:start="7509:12" pos:end="7509:14"><name pos:start="7509:12" pos:end="7509:14">ret</name></expr>;</return>

<label pos:start="7511:1" pos:end="7511:7"><name pos:start="7511:1" pos:end="7511:6">efault</name>:</label>

    <expr_stmt pos:start="7513:5" pos:end="7513:25"><expr pos:start="7513:5" pos:end="7513:24"><name pos:start="7513:5" pos:end="7513:7">ret</name> <operator pos:start="7513:9" pos:end="7513:9">=</operator> <operator pos:start="7513:11" pos:end="7513:11">-</operator><name pos:start="7513:12" pos:end="7513:24">TARGET_EFAULT</name></expr>;</expr_stmt>

    <goto pos:start="7515:5" pos:end="7515:14">goto <name pos:start="7515:10" pos:end="7515:13">fail</name>;</goto>

</block_content>}</block></function>
</unit>
