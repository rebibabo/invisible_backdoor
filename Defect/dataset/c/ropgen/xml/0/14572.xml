<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14572.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">aarch64_tr_translate_insn</name><parameter_list pos:start="1:38" pos:end="1:78">(<parameter pos:start="1:39" pos:end="1:62"><decl pos:start="1:39" pos:end="1:62"><type pos:start="1:39" pos:end="1:62"><name pos:start="1:39" pos:end="1:54">DisasContextBase</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:62">dcbase</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:77"><decl pos:start="1:65" pos:end="1:77"><type pos:start="1:65" pos:end="1:77"><name pos:start="1:65" pos:end="1:72">CPUState</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:77">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:42">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">DisasContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">dc</name> <init pos:start="5:22" pos:end="5:63">= <expr pos:start="5:24" pos:end="5:63"><call pos:start="5:24" pos:end="5:63"><name pos:start="5:24" pos:end="5:35">container_of</name><argument_list pos:start="5:36" pos:end="5:63">(<argument pos:start="5:37" pos:end="5:42"><expr pos:start="5:37" pos:end="5:42"><name pos:start="5:37" pos:end="5:42">dcbase</name></expr></argument>, <argument pos:start="5:45" pos:end="5:56"><expr pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:56">DisasContext</name></expr></argument>, <argument pos:start="5:59" pos:end="5:62"><expr pos:start="5:59" pos:end="5:62"><name pos:start="5:59" pos:end="5:62">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUARMState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:35">= <expr pos:start="7:24" pos:end="7:35"><name pos:start="7:24" pos:end="7:35"><name pos:start="7:24" pos:end="7:26">cpu</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:35">env_ptr</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="45:5"><if pos:start="11:5" pos:end="41:5">if <condition pos:start="11:8" pos:end="11:40">(<expr pos:start="11:9" pos:end="11:39"><name pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:10">dc</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:21">ss_active</name></name> <operator pos:start="11:23" pos:end="11:24">&amp;&amp;</operator> <operator pos:start="11:26" pos:end="11:26">!</operator><name pos:start="11:27" pos:end="11:39"><name pos:start="11:27" pos:end="11:28">dc</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:39">pstate_ss</name></name></expr>)</condition> <block pos:start="11:42" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:41">

        <comment type="block" pos:start="13:9" pos:end="31:11">/* Singlestep state is Active-pending.

         * If we're in this state at the start of a TB then either

         *  a) we just took an exception to an EL which is being debugged

         *     and this is the first insn in the exception handler

         *  b) debug exceptions were masked and we just unmasked them

         *     without changing EL (eg by clearing PSTATE.D)

         * In either case we're going to take a swstep exception in the

         * "did not step an insn" case, and so the syndrome ISV and EX

         * bits should be zero.

         */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:40"><expr pos:start="33:9" pos:end="33:39"><call pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:14">assert</name><argument_list pos:start="33:15" pos:end="33:39">(<argument pos:start="33:16" pos:end="33:38"><expr pos:start="33:16" pos:end="33:38"><name pos:start="33:16" pos:end="33:33"><name pos:start="33:16" pos:end="33:17">dc</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:23">base</name><operator pos:start="33:24" pos:end="33:24">.</operator><name pos:start="33:25" pos:end="33:33">num_insns</name></name> <operator pos:start="33:35" pos:end="33:36">==</operator> <literal type="number" pos:start="33:38" pos:end="33:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="37:48"><expr pos:start="35:9" pos:end="37:47"><call pos:start="35:9" pos:end="37:47"><name pos:start="35:9" pos:end="35:21">gen_exception</name><argument_list pos:start="35:22" pos:end="37:47">(<argument pos:start="35:23" pos:end="35:31"><expr pos:start="35:23" pos:end="35:31"><name pos:start="35:23" pos:end="35:31">EXCP_UDEF</name></expr></argument>, <argument pos:start="35:34" pos:end="35:65"><expr pos:start="35:34" pos:end="35:65"><call pos:start="35:34" pos:end="35:65"><name pos:start="35:34" pos:end="35:43">syn_swstep</name><argument_list pos:start="35:44" pos:end="35:65">(<argument pos:start="35:45" pos:end="35:58"><expr pos:start="35:45" pos:end="35:58"><name pos:start="35:45" pos:end="35:58"><name pos:start="35:45" pos:end="35:46">dc</name><operator pos:start="35:47" pos:end="35:48">-&gt;</operator><name pos:start="35:49" pos:end="35:58">ss_same_el</name></name></expr></argument>, <argument pos:start="35:61" pos:end="35:61"><expr pos:start="35:61" pos:end="35:61"><literal type="number" pos:start="35:61" pos:end="35:61">0</literal></expr></argument>, <argument pos:start="35:64" pos:end="35:64"><expr pos:start="35:64" pos:end="35:64"><literal type="number" pos:start="35:64" pos:end="35:64">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="37:23" pos:end="37:46"><expr pos:start="37:23" pos:end="37:46"><call pos:start="37:23" pos:end="37:46"><name pos:start="37:23" pos:end="37:42">default_exception_el</name><argument_list pos:start="37:43" pos:end="37:46">(<argument pos:start="37:44" pos:end="37:45"><expr pos:start="37:44" pos:end="37:45"><name pos:start="37:44" pos:end="37:45">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:10">dc</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:16">base</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:23">is_jmp</name></name> <operator pos:start="39:25" pos:end="39:25">=</operator> <name pos:start="39:27" pos:end="39:40">DISAS_NORETURN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="45:5">else <block pos:start="41:12" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:32">

        <expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><call pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:22">disas_a64_insn</name><argument_list pos:start="43:23" pos:end="43:31">(<argument pos:start="43:24" pos:end="43:26"><expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:26">env</name></expr></argument>, <argument pos:start="43:29" pos:end="43:30"><expr pos:start="43:29" pos:end="43:30"><name pos:start="43:29" pos:end="43:30">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:38">(<expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:10">dc</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:16">base</name><operator pos:start="49:17" pos:end="49:17">.</operator><name pos:start="49:18" pos:end="49:23">is_jmp</name></name> <operator pos:start="49:25" pos:end="49:26">==</operator> <name pos:start="49:28" pos:end="49:37">DISAS_NEXT</name></expr>)</condition> <block pos:start="49:40" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:9">

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:59">(<expr pos:start="51:13" pos:end="51:58"><name pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:14">dc</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:25">ss_active</name></name> <operator pos:start="51:27" pos:end="51:28">||</operator> <name pos:start="51:30" pos:end="51:35"><name pos:start="51:30" pos:end="51:31">dc</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:35">pc</name></name> <operator pos:start="51:37" pos:end="51:38">&gt;=</operator> <name pos:start="51:40" pos:end="51:58"><name pos:start="51:40" pos:end="51:41">dc</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:58">next_page_start</name></name></expr>)</condition> <block pos:start="51:61" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:45">

            <expr_stmt pos:start="53:13" pos:end="53:45"><expr pos:start="53:13" pos:end="53:44"><name pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:14">dc</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:20">base</name><operator pos:start="53:21" pos:end="53:21">.</operator><name pos:start="53:22" pos:end="53:27">is_jmp</name></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <name pos:start="53:31" pos:end="53:44">DISAS_TOO_MANY</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:30"><expr pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:12">base</name><operator pos:start="61:13" pos:end="61:13">.</operator><name pos:start="61:14" pos:end="61:20">pc_next</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:29"><name pos:start="61:24" pos:end="61:25">dc</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:29">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:42"><expr pos:start="63:5" pos:end="63:41"><call pos:start="63:5" pos:end="63:41"><name pos:start="63:5" pos:end="63:30">translator_loop_temp_check</name><argument_list pos:start="63:31" pos:end="63:41">(<argument pos:start="63:32" pos:end="63:40"><expr pos:start="63:32" pos:end="63:40"><operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:40"><name pos:start="63:33" pos:end="63:34">dc</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:40">base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
