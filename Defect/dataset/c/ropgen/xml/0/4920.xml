<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4920.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">bdrv_prwv_co</name><parameter_list pos:start="1:24" pos:end="5:47">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:60"><decl pos:start="1:47" pos:end="1:60"><type pos:start="1:47" pos:end="1:60"><name pos:start="1:47" pos:end="1:53">int64_t</name></type> <name pos:start="1:55" pos:end="1:60">offset</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:42"><decl pos:start="3:25" pos:end="3:42"><type pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:36">QEMUIOVector</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">qiov</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:48">bool</name></type> <name pos:start="3:50" pos:end="3:57">is_write</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:46"><decl pos:start="5:25" pos:end="5:46"><type pos:start="5:25" pos:end="5:46"><name pos:start="5:25" pos:end="5:40">BdrvRequestFlags</name></type> <name pos:start="5:42" pos:end="5:46">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="77:1">{<block_content pos:start="9:5" pos:end="75:20">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">Coroutine</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:17">co</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="25:6"><decl pos:start="11:5" pos:end="25:5"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">RwCo</name></type> <name pos:start="11:10" pos:end="11:13">rwco</name> <init pos:start="11:15" pos:end="25:5">= <expr pos:start="11:17" pos:end="25:5"><block pos:start="11:17" pos:end="25:5">{

        <expr pos:start="13:9" pos:end="13:16"><operator pos:start="13:9" pos:end="13:9">.</operator><name pos:start="13:10" pos:end="13:11">bs</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <name pos:start="13:15" pos:end="13:16">bs</name></expr>,

        <expr pos:start="15:9" pos:end="15:24"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:15">offset</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:24">offset</name></expr>,

        <expr pos:start="17:9" pos:end="17:20"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:13">qiov</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:20">qiov</name></expr>,

        <expr pos:start="19:9" pos:end="19:28"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:17">is_write</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <name pos:start="19:21" pos:end="19:28">is_write</name></expr>,

        <expr pos:start="21:9" pos:end="21:23"><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:12">ret</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:23">NOT_DONE</name></expr>,

        <expr pos:start="23:9" pos:end="23:22"><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:14">flags</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:22">flags</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <comment type="block" format="doxygen" pos:start="29:5" pos:end="37:7">/**

     * In sync call context, when the vcpu is blocked, this throttling timer

     * will not fire; so the I/O throttling function has to be disabled here

     * if it has been enabled.

     */</comment>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:30">(<expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:10">bs</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:29">io_limits_enabled</name></name></expr>)</condition> <block pos:start="39:32" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:35">

        <expr_stmt pos:start="41:9" pos:end="43:75"><expr pos:start="41:9" pos:end="43:74"><call pos:start="41:9" pos:end="43:74"><name pos:start="41:9" pos:end="41:15">fprintf</name><argument_list pos:start="41:16" pos:end="43:74">(<argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">stderr</name></expr></argument>, <argument pos:start="41:25" pos:end="43:47"><expr pos:start="41:25" pos:end="43:47"><literal type="string" pos:start="41:25" pos:end="41:63">"Disabling I/O throttling on '%s' due "</literal>

                        <literal type="string" pos:start="43:25" pos:end="43:47">"to synchronous I/O.\n"</literal></expr></argument>, <argument pos:start="43:50" pos:end="43:73"><expr pos:start="43:50" pos:end="43:73"><call pos:start="43:50" pos:end="43:73"><name pos:start="43:50" pos:end="43:69">bdrv_get_device_name</name><argument_list pos:start="43:70" pos:end="43:73">(<argument pos:start="43:71" pos:end="43:72"><expr pos:start="43:71" pos:end="43:72"><name pos:start="43:71" pos:end="43:72">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><call pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:30">bdrv_io_limits_disable</name><argument_list pos:start="45:31" pos:end="45:34">(<argument pos:start="45:32" pos:end="45:33"><expr pos:start="45:32" pos:end="45:33"><name pos:start="45:32" pos:end="45:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="73:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:28">(<expr pos:start="51:9" pos:end="51:27"><call pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:25">qemu_in_coroutine</name><argument_list pos:start="51:26" pos:end="51:27">()</argument_list></call></expr>)</condition> <block pos:start="51:30" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:32">

        <comment type="block" pos:start="53:9" pos:end="53:55">/* Fast-path if already in coroutine context */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><call pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:24">bdrv_rw_co_entry</name><argument_list pos:start="55:25" pos:end="55:31">(<argument pos:start="55:26" pos:end="55:30"><expr pos:start="55:26" pos:end="55:30"><operator pos:start="55:26" pos:end="55:26">&amp;</operator><name pos:start="55:27" pos:end="55:30">rwco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="73:5">else <block pos:start="57:12" pos:end="73:5">{<block_content pos:start="59:9" pos:end="71:9">

        <decl_stmt pos:start="59:9" pos:end="59:59"><decl pos:start="59:9" pos:end="59:58"><type pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:18">AioContext</name> <modifier pos:start="59:20" pos:end="59:20">*</modifier></type><name pos:start="59:21" pos:end="59:31">aio_context</name> <init pos:start="59:33" pos:end="59:58">= <expr pos:start="59:35" pos:end="59:58"><call pos:start="59:35" pos:end="59:58"><name pos:start="59:35" pos:end="59:54">bdrv_get_aio_context</name><argument_list pos:start="59:55" pos:end="59:58">(<argument pos:start="59:56" pos:end="59:57"><expr pos:start="59:56" pos:end="59:57"><name pos:start="59:56" pos:end="59:57">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:53"><expr pos:start="63:9" pos:end="63:52"><name pos:start="63:9" pos:end="63:10">co</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:52"><name pos:start="63:14" pos:end="63:34">qemu_coroutine_create</name><argument_list pos:start="63:35" pos:end="63:52">(<argument pos:start="63:36" pos:end="63:51"><expr pos:start="63:36" pos:end="63:51"><name pos:start="63:36" pos:end="63:51">bdrv_rw_co_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><call pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:28">qemu_coroutine_enter</name><argument_list pos:start="65:29" pos:end="65:39">(<argument pos:start="65:30" pos:end="65:31"><expr pos:start="65:30" pos:end="65:31"><name pos:start="65:30" pos:end="65:31">co</name></expr></argument>, <argument pos:start="65:34" pos:end="65:38"><expr pos:start="65:34" pos:end="65:38"><operator pos:start="65:34" pos:end="65:34">&amp;</operator><name pos:start="65:35" pos:end="65:38">rwco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="67:9" pos:end="71:9">while <condition pos:start="67:15" pos:end="67:36">(<expr pos:start="67:16" pos:end="67:35"><name pos:start="67:16" pos:end="67:23"><name pos:start="67:16" pos:end="67:19">rwco</name><operator pos:start="67:20" pos:end="67:20">.</operator><name pos:start="67:21" pos:end="67:23">ret</name></name> <operator pos:start="67:25" pos:end="67:26">==</operator> <name pos:start="67:28" pos:end="67:35">NOT_DONE</name></expr>)</condition> <block pos:start="67:38" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:40">

            <expr_stmt pos:start="69:13" pos:end="69:40"><expr pos:start="69:13" pos:end="69:39"><call pos:start="69:13" pos:end="69:39"><name pos:start="69:13" pos:end="69:20">aio_poll</name><argument_list pos:start="69:21" pos:end="69:39">(<argument pos:start="69:22" pos:end="69:32"><expr pos:start="69:22" pos:end="69:32"><name pos:start="69:22" pos:end="69:32">aio_context</name></expr></argument>, <argument pos:start="69:35" pos:end="69:38"><expr pos:start="69:35" pos:end="69:38"><name pos:start="69:35" pos:end="69:38">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>

    <return pos:start="75:5" pos:end="75:20">return <expr pos:start="75:12" pos:end="75:19"><name pos:start="75:12" pos:end="75:19"><name pos:start="75:12" pos:end="75:15">rwco</name><operator pos:start="75:16" pos:end="75:16">.</operator><name pos:start="75:17" pos:end="75:19">ret</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
