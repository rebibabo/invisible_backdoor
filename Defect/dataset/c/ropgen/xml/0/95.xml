<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/95.c" pos:tabs="8"><function pos:start="1:1" pos:end="369:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pcm_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:61">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:46"><decl pos:start="5:29" pos:end="5:46"><type pos:start="5:29" pos:end="5:46"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:41">uint8_t</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:46">buf</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:60"><decl pos:start="5:49" pos:end="5:60"><type pos:start="5:49" pos:end="5:60"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:60">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="369:1">{<block_content pos:start="9:5" pos:end="367:21">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCMDecode</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:16">s</name> <init pos:start="9:18" pos:end="9:35">= <expr pos:start="9:20" pos:end="9:35"><name pos:start="9:20" pos:end="9:35"><name pos:start="9:20" pos:end="9:24">avctx</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:35">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">sample_size</name></decl>, <decl pos:start="11:22" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:22">c</name></decl>, <decl pos:start="11:25" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:25" pos:end="11:25">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">short</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:18">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:51"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">src</name></decl>, <decl pos:start="15:25" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:19"><modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:29">src8</name></decl>, <decl pos:start="15:32" pos:end="15:50"><type ref="prev" pos:start="15:5" pos:end="15:19"><modifier pos:start="15:32" pos:end="15:32">*</modifier></type><name pos:start="15:33" pos:end="15:50"><name pos:start="15:33" pos:end="15:36">src2</name><index pos:start="15:37" pos:end="15:50">[<expr pos:start="15:38" pos:end="15:49"><name pos:start="15:38" pos:end="15:49">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:18">dstu8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">int16_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:24">dst_int16_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">int32_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:24">dst_int32_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">int64_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:24">dst_int64_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">uint16_t</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:26">dst_uint16_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">uint32_t</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:26">dst_uint32_t</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:11">samples</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:18">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:14"><expr pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:7">src</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:13">buf</name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:56">(<expr pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:25">sample_fmt</name></name><operator pos:start="37:26" pos:end="37:27">!=</operator><name pos:start="37:28" pos:end="37:55"><name pos:start="37:28" pos:end="37:32">avctx</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:39">codec</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:52">sample_fmts</name><index pos:start="37:53" pos:end="37:55">[<expr pos:start="37:54" pos:end="37:54"><literal type="number" pos:start="37:54" pos:end="37:54">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="37:58" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:60"><expr pos:start="39:9" pos:end="39:59"><call pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:59">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:58"><expr pos:start="39:37" pos:end="39:58"><literal type="string" pos:start="39:37" pos:end="39:58">"invalid sample_fmt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if<condition pos:start="47:7" pos:end="47:62">(<expr pos:start="47:8" pos:end="47:61"><name pos:start="47:8" pos:end="47:22"><name pos:start="47:8" pos:end="47:12">avctx</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:22">channels</name></name> <operator pos:start="47:24" pos:end="47:25">&lt;=</operator> <literal type="number" pos:start="47:27" pos:end="47:27">0</literal> <operator pos:start="47:29" pos:end="47:30">||</operator> <name pos:start="47:32" pos:end="47:46"><name pos:start="47:32" pos:end="47:36">avctx</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:46">channels</name></name> <operator pos:start="47:48" pos:end="47:48">&gt;</operator> <name pos:start="47:50" pos:end="47:61">MAX_CHANNELS</name></expr>)</condition><block pos:start="47:63" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:68"><expr pos:start="49:9" pos:end="49:67"><call pos:start="49:9" pos:end="49:67"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:67">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:66"><expr pos:start="49:37" pos:end="49:66"><literal type="string" pos:start="49:37" pos:end="49:66">"PCM channels out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:60"><expr pos:start="57:5" pos:end="57:59"><name pos:start="57:5" pos:end="57:15">sample_size</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="57:57"><name pos:start="57:19" pos:end="57:40">av_get_bits_per_sample</name><argument_list pos:start="57:41" pos:end="57:57">(<argument pos:start="57:42" pos:end="57:56"><expr pos:start="57:42" pos:end="57:56"><name pos:start="57:42" pos:end="57:56"><name pos:start="57:42" pos:end="57:46">avctx</name><operator pos:start="57:47" pos:end="57:48">-&gt;</operator><name pos:start="57:49" pos:end="57:56">codec_id</name></name></expr></argument>)</argument_list></call><operator pos:start="57:58" pos:end="57:58">/</operator><literal type="number" pos:start="57:59" pos:end="57:59">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:63">/* av_get_bits_per_sample returns 0 for CODEC_ID_PCM_DVD */</comment>

    <if_stmt pos:start="63:5" pos:end="67:59"><if pos:start="63:5" pos:end="67:59">if <condition pos:start="63:8" pos:end="63:44">(<expr pos:start="63:9" pos:end="63:43"><name pos:start="63:9" pos:end="63:24">CODEC_ID_PCM_DVD</name> <operator pos:start="63:26" pos:end="63:27">==</operator> <name pos:start="63:29" pos:end="63:43"><name pos:start="63:29" pos:end="63:33">avctx</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:43">codec_id</name></name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:59"><block_content pos:start="67:9" pos:end="67:59">

        <comment type="block" pos:start="65:9" pos:end="65:60">/* 2 samples are interleaved per block in PCM_DVD */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:59"><expr pos:start="67:9" pos:end="67:58"><name pos:start="67:9" pos:end="67:19">sample_size</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:50"><name pos:start="67:23" pos:end="67:27">avctx</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:50">bits_per_coded_sample</name></name> <operator pos:start="67:52" pos:end="67:52">*</operator> <literal type="number" pos:start="67:54" pos:end="67:54">2</literal> <operator pos:start="67:56" pos:end="67:56">/</operator> <literal type="number" pos:start="67:58" pos:end="67:58">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:38"><expr pos:start="71:5" pos:end="71:37"><name pos:start="71:5" pos:end="71:5">n</name> <operator pos:start="71:7" pos:end="71:7">=</operator> <name pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:13">avctx</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:23">channels</name></name> <operator pos:start="71:25" pos:end="71:25">*</operator> <name pos:start="71:27" pos:end="71:37">sample_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if<condition pos:start="75:7" pos:end="75:25">(<expr pos:start="75:8" pos:end="75:24"><name pos:start="75:8" pos:end="75:8">n</name> <operator pos:start="75:10" pos:end="75:11">&amp;&amp;</operator> <name pos:start="75:13" pos:end="75:20">buf_size</name> <operator pos:start="75:22" pos:end="75:22">%</operator> <name pos:start="75:24" pos:end="75:24">n</name></expr>)</condition><block pos:start="75:26" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:18">

        <expr_stmt pos:start="77:9" pos:end="77:60"><expr pos:start="77:9" pos:end="77:59"><call pos:start="77:9" pos:end="77:59"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="77:59">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:58"><expr pos:start="77:37" pos:end="77:58"><literal type="string" pos:start="77:37" pos:end="77:58">"invalid PCM packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:18">return <expr pos:start="79:16" pos:end="79:17"><operator pos:start="79:16" pos:end="79:16">-</operator><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:44"><expr pos:start="85:5" pos:end="85:43"><name pos:start="85:5" pos:end="85:12">buf_size</name><operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:43"><name pos:start="85:15" pos:end="85:19">FFMIN</name><argument_list pos:start="85:20" pos:end="85:43">(<argument pos:start="85:21" pos:end="85:28"><expr pos:start="85:21" pos:end="85:28"><name pos:start="85:21" pos:end="85:28">buf_size</name></expr></argument>, <argument pos:start="85:31" pos:end="85:42"><expr pos:start="85:31" pos:end="85:42"><operator pos:start="85:31" pos:end="85:31">*</operator><name pos:start="85:32" pos:end="85:40">data_size</name><operator pos:start="85:41" pos:end="85:41">/</operator><literal type="number" pos:start="85:42" pos:end="85:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:17"><expr pos:start="87:5" pos:end="87:16"><operator pos:start="87:5" pos:end="87:5">*</operator><name pos:start="87:6" pos:end="87:14">data_size</name><operator pos:start="87:15" pos:end="87:15">=</operator><literal type="number" pos:start="87:16" pos:end="87:16">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:29"><expr pos:start="91:5" pos:end="91:28"><name pos:start="91:5" pos:end="91:5">n</name> <operator pos:start="91:7" pos:end="91:7">=</operator> <name pos:start="91:9" pos:end="91:16">buf_size</name><operator pos:start="91:17" pos:end="91:17">/</operator><name pos:start="91:18" pos:end="91:28">sample_size</name></expr>;</expr_stmt>



    <switch pos:start="95:5" pos:end="363:5">switch<condition pos:start="95:11" pos:end="95:28">(<expr pos:start="95:12" pos:end="95:27"><name pos:start="95:12" pos:end="95:27"><name pos:start="95:12" pos:end="95:16">avctx</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:23">codec</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:27">id</name></name></expr>)</condition> <block pos:start="95:30" pos:end="363:5">{<block_content pos:start="97:5" pos:end="361:18">

    <case pos:start="97:5" pos:end="97:28">case <expr pos:start="97:10" pos:end="97:27"><name pos:start="97:10" pos:end="97:27">CODEC_ID_PCM_U32LE</name></expr>:</case>

        <macro pos:start="99:9" pos:end="99:62"><name pos:start="99:9" pos:end="99:14">DECODE</name><argument_list pos:start="99:15" pos:end="99:62">(<argument pos:start="99:16" pos:end="99:23">uint32_t</argument>, <argument pos:start="99:26" pos:end="99:29">le32</argument>, <argument pos:start="99:32" pos:end="99:34">src</argument>, <argument pos:start="99:37" pos:end="99:43">samples</argument>, <argument pos:start="99:46" pos:end="99:46">n</argument>, <argument pos:start="99:49" pos:end="99:49"><literal type="number" pos:start="99:49" pos:end="99:49">0</literal></argument>, <argument pos:start="99:52" pos:end="99:61"><literal type="number" pos:start="99:52" pos:end="99:61">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:28">case <expr pos:start="103:10" pos:end="103:27"><name pos:start="103:10" pos:end="103:27">CODEC_ID_PCM_U32BE</name></expr>:</case>

        <macro pos:start="105:9" pos:end="105:62"><name pos:start="105:9" pos:end="105:14">DECODE</name><argument_list pos:start="105:15" pos:end="105:62">(<argument pos:start="105:16" pos:end="105:23">uint32_t</argument>, <argument pos:start="105:26" pos:end="105:29">be32</argument>, <argument pos:start="105:32" pos:end="105:34">src</argument>, <argument pos:start="105:37" pos:end="105:43">samples</argument>, <argument pos:start="105:46" pos:end="105:46">n</argument>, <argument pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">0</literal></argument>, <argument pos:start="105:52" pos:end="105:61"><literal type="number" pos:start="105:52" pos:end="105:61">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:28">case <expr pos:start="109:10" pos:end="109:27"><name pos:start="109:10" pos:end="109:27">CODEC_ID_PCM_S24LE</name></expr>:</case>

        <macro pos:start="111:9" pos:end="111:52"><name pos:start="111:9" pos:end="111:14">DECODE</name><argument_list pos:start="111:15" pos:end="111:52">(<argument pos:start="111:16" pos:end="111:22">int32_t</argument>, <argument pos:start="111:25" pos:end="111:28">le24</argument>, <argument pos:start="111:31" pos:end="111:33">src</argument>, <argument pos:start="111:36" pos:end="111:42">samples</argument>, <argument pos:start="111:45" pos:end="111:45">n</argument>, <argument pos:start="111:48" pos:end="111:48"><literal type="number" pos:start="111:48" pos:end="111:48">8</literal></argument>, <argument pos:start="111:51" pos:end="111:51"><literal type="number" pos:start="111:51" pos:end="111:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:28">case <expr pos:start="115:10" pos:end="115:27"><name pos:start="115:10" pos:end="115:27">CODEC_ID_PCM_S24BE</name></expr>:</case>

        <macro pos:start="117:9" pos:end="117:52"><name pos:start="117:9" pos:end="117:14">DECODE</name><argument_list pos:start="117:15" pos:end="117:52">(<argument pos:start="117:16" pos:end="117:22">int32_t</argument>, <argument pos:start="117:25" pos:end="117:28">be24</argument>, <argument pos:start="117:31" pos:end="117:33">src</argument>, <argument pos:start="117:36" pos:end="117:42">samples</argument>, <argument pos:start="117:45" pos:end="117:45">n</argument>, <argument pos:start="117:48" pos:end="117:48"><literal type="number" pos:start="117:48" pos:end="117:48">8</literal></argument>, <argument pos:start="117:51" pos:end="117:51"><literal type="number" pos:start="117:51" pos:end="117:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:28">case <expr pos:start="121:10" pos:end="121:27"><name pos:start="121:10" pos:end="121:27">CODEC_ID_PCM_U24LE</name></expr>:</case>

        <macro pos:start="123:9" pos:end="123:60"><name pos:start="123:9" pos:end="123:14">DECODE</name><argument_list pos:start="123:15" pos:end="123:60">(<argument pos:start="123:16" pos:end="123:23">uint32_t</argument>, <argument pos:start="123:26" pos:end="123:29">le24</argument>, <argument pos:start="123:32" pos:end="123:34">src</argument>, <argument pos:start="123:37" pos:end="123:43">samples</argument>, <argument pos:start="123:46" pos:end="123:46">n</argument>, <argument pos:start="123:49" pos:end="123:49"><literal type="number" pos:start="123:49" pos:end="123:49">8</literal></argument>, <argument pos:start="123:52" pos:end="123:59"><literal type="number" pos:start="123:52" pos:end="123:59">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:28">case <expr pos:start="127:10" pos:end="127:27"><name pos:start="127:10" pos:end="127:27">CODEC_ID_PCM_U24BE</name></expr>:</case>

        <macro pos:start="129:9" pos:end="129:60"><name pos:start="129:9" pos:end="129:14">DECODE</name><argument_list pos:start="129:15" pos:end="129:60">(<argument pos:start="129:16" pos:end="129:23">uint32_t</argument>, <argument pos:start="129:26" pos:end="129:29">be24</argument>, <argument pos:start="129:32" pos:end="129:34">src</argument>, <argument pos:start="129:37" pos:end="129:43">samples</argument>, <argument pos:start="129:46" pos:end="129:46">n</argument>, <argument pos:start="129:49" pos:end="129:49"><literal type="number" pos:start="129:49" pos:end="129:49">8</literal></argument>, <argument pos:start="129:52" pos:end="129:59"><literal type="number" pos:start="129:52" pos:end="129:59">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="131:9" pos:end="131:14">break;</break>

    <case pos:start="133:5" pos:end="133:30">case <expr pos:start="133:10" pos:end="133:29"><name pos:start="133:10" pos:end="133:29">CODEC_ID_PCM_S24DAUD</name></expr>:</case>

        <for pos:start="135:9" pos:end="145:9">for<control pos:start="135:12" pos:end="135:21">(<init pos:start="135:13" pos:end="135:13">;</init><condition pos:start="135:14" pos:end="135:17"><expr pos:start="135:14" pos:end="135:16"><name pos:start="135:14" pos:end="135:14">n</name><operator pos:start="135:15" pos:end="135:15">&gt;</operator><literal type="number" pos:start="135:16" pos:end="135:16">0</literal></expr>;</condition><incr pos:start="135:18" pos:end="135:20"><expr pos:start="135:18" pos:end="135:20"><name pos:start="135:18" pos:end="135:18">n</name><operator pos:start="135:19" pos:end="135:20">--</operator></expr></incr>)</control> <block pos:start="135:23" pos:end="145:9">{<block_content pos:start="137:11" pos:end="143:51">

          <decl_stmt pos:start="137:11" pos:end="137:49"><decl pos:start="137:11" pos:end="137:48"><type pos:start="137:11" pos:end="137:18"><name pos:start="137:11" pos:end="137:18">uint32_t</name></type> <name pos:start="137:20" pos:end="137:20">v</name> <init pos:start="137:22" pos:end="137:48">= <expr pos:start="137:24" pos:end="137:48"><call pos:start="137:24" pos:end="137:48"><name pos:start="137:24" pos:end="137:42">bytestream_get_be24</name><argument_list pos:start="137:43" pos:end="137:48">(<argument pos:start="137:44" pos:end="137:47"><expr pos:start="137:44" pos:end="137:47"><operator pos:start="137:44" pos:end="137:44">&amp;</operator><name pos:start="137:45" pos:end="137:47">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt pos:start="139:11" pos:end="139:18"><expr pos:start="139:11" pos:end="139:17"><name pos:start="139:11" pos:end="139:11">v</name> <operator pos:start="139:13" pos:end="139:15">&gt;&gt;=</operator> <literal type="number" pos:start="139:17" pos:end="139:17">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="139:20" pos:end="139:41">// sync flags are here</comment>

          <expr_stmt pos:start="141:11" pos:end="143:51"><expr pos:start="141:11" pos:end="143:50"><operator pos:start="141:11" pos:end="141:11">*</operator><name pos:start="141:12" pos:end="141:18">samples</name><operator pos:start="141:19" pos:end="141:20">++</operator> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:50"><name pos:start="141:24" pos:end="141:33">ff_reverse</name><index pos:start="141:34" pos:end="141:50">[<expr pos:start="141:35" pos:end="141:49"><operator pos:start="141:35" pos:end="141:35">(</operator><name pos:start="141:36" pos:end="141:36">v</name> <operator pos:start="141:38" pos:end="141:39">&gt;&gt;</operator> <literal type="number" pos:start="141:41" pos:end="141:41">8</literal><operator pos:start="141:42" pos:end="141:42">)</operator> <operator pos:start="141:44" pos:end="141:44">&amp;</operator> <literal type="number" pos:start="141:46" pos:end="141:49">0xff</literal></expr>]</index></name> <operator pos:start="141:52" pos:end="141:52">+</operator>

                       <operator pos:start="143:24" pos:end="143:24">(</operator><name pos:start="143:25" pos:end="143:44"><name pos:start="143:25" pos:end="143:34">ff_reverse</name><index pos:start="143:35" pos:end="143:44">[<expr pos:start="143:36" pos:end="143:43"><name pos:start="143:36" pos:end="143:36">v</name> <operator pos:start="143:38" pos:end="143:38">&amp;</operator> <literal type="number" pos:start="143:40" pos:end="143:43">0xff</literal></expr>]</index></name> <operator pos:start="143:46" pos:end="143:47">&lt;&lt;</operator> <literal type="number" pos:start="143:49" pos:end="143:49">8</literal><operator pos:start="143:50" pos:end="143:50">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:35">case <expr pos:start="149:10" pos:end="149:34"><name pos:start="149:10" pos:end="149:34">CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:29"><expr pos:start="151:9" pos:end="151:28"><name pos:start="151:9" pos:end="151:9">n</name> <operator pos:start="151:11" pos:end="151:12">/=</operator> <name pos:start="151:14" pos:end="151:28"><name pos:start="151:14" pos:end="151:18">avctx</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:28">channels</name></name></expr>;</expr_stmt>

        <for pos:start="153:9" pos:end="155:34">for<control pos:start="153:12" pos:end="153:38">(<init pos:start="153:13" pos:end="153:16"><expr pos:start="153:13" pos:end="153:15"><name pos:start="153:13" pos:end="153:13">c</name><operator pos:start="153:14" pos:end="153:14">=</operator><literal type="number" pos:start="153:15" pos:end="153:15">0</literal></expr>;</init><condition pos:start="153:17" pos:end="153:34"><expr pos:start="153:17" pos:end="153:33"><name pos:start="153:17" pos:end="153:17">c</name><operator pos:start="153:18" pos:end="153:18">&lt;</operator><name pos:start="153:19" pos:end="153:33"><name pos:start="153:19" pos:end="153:23">avctx</name><operator pos:start="153:24" pos:end="153:25">-&gt;</operator><name pos:start="153:26" pos:end="153:33">channels</name></name></expr>;</condition><incr pos:start="153:35" pos:end="153:37"><expr pos:start="153:35" pos:end="153:37"><name pos:start="153:35" pos:end="153:35">c</name><operator pos:start="153:36" pos:end="153:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="155:13" pos:end="155:34"><block_content pos:start="155:13" pos:end="155:34">

            <expr_stmt pos:start="155:13" pos:end="155:34"><expr pos:start="155:13" pos:end="155:33"><name pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:16">src2</name><index pos:start="155:17" pos:end="155:19">[<expr pos:start="155:18" pos:end="155:18"><name pos:start="155:18" pos:end="155:18">c</name></expr>]</index></name> <operator pos:start="155:21" pos:end="155:21">=</operator> <operator pos:start="155:23" pos:end="155:23">&amp;</operator><name pos:start="155:24" pos:end="155:33"><name pos:start="155:24" pos:end="155:26">src</name><index pos:start="155:27" pos:end="155:33">[<expr pos:start="155:28" pos:end="155:32"><name pos:start="155:28" pos:end="155:28">c</name><operator pos:start="155:29" pos:end="155:29">*</operator><name pos:start="155:30" pos:end="155:30">n</name><operator pos:start="155:31" pos:end="155:31">*</operator><literal type="number" pos:start="155:32" pos:end="155:32">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="157:9" pos:end="161:59">for<control pos:start="157:12" pos:end="157:21">(<init pos:start="157:13" pos:end="157:13">;</init><condition pos:start="157:14" pos:end="157:17"><expr pos:start="157:14" pos:end="157:16"><name pos:start="157:14" pos:end="157:14">n</name><operator pos:start="157:15" pos:end="157:15">&gt;</operator><literal type="number" pos:start="157:16" pos:end="157:16">0</literal></expr>;</condition><incr pos:start="157:18" pos:end="157:20"><expr pos:start="157:18" pos:end="157:20"><name pos:start="157:18" pos:end="157:18">n</name><operator pos:start="157:19" pos:end="157:20">--</operator></expr></incr>)</control><block type="pseudo" pos:start="159:13" pos:end="161:59"><block_content pos:start="159:13" pos:end="161:59">

            <for pos:start="159:13" pos:end="161:59">for<control pos:start="159:16" pos:end="159:42">(<init pos:start="159:17" pos:end="159:20"><expr pos:start="159:17" pos:end="159:19"><name pos:start="159:17" pos:end="159:17">c</name><operator pos:start="159:18" pos:end="159:18">=</operator><literal type="number" pos:start="159:19" pos:end="159:19">0</literal></expr>;</init><condition pos:start="159:21" pos:end="159:38"><expr pos:start="159:21" pos:end="159:37"><name pos:start="159:21" pos:end="159:21">c</name><operator pos:start="159:22" pos:end="159:22">&lt;</operator><name pos:start="159:23" pos:end="159:37"><name pos:start="159:23" pos:end="159:27">avctx</name><operator pos:start="159:28" pos:end="159:29">-&gt;</operator><name pos:start="159:30" pos:end="159:37">channels</name></name></expr>;</condition><incr pos:start="159:39" pos:end="159:41"><expr pos:start="159:39" pos:end="159:41"><name pos:start="159:39" pos:end="159:39">c</name><operator pos:start="159:40" pos:end="159:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="161:17" pos:end="161:59"><block_content pos:start="161:17" pos:end="161:59">

                <expr_stmt pos:start="161:17" pos:end="161:59"><expr pos:start="161:17" pos:end="161:58"><operator pos:start="161:17" pos:end="161:17">*</operator><name pos:start="161:18" pos:end="161:24">samples</name><operator pos:start="161:25" pos:end="161:26">++</operator> <operator pos:start="161:28" pos:end="161:28">=</operator> <call pos:start="161:30" pos:end="161:58"><name pos:start="161:30" pos:end="161:48">bytestream_get_le16</name><argument_list pos:start="161:49" pos:end="161:58">(<argument pos:start="161:50" pos:end="161:57"><expr pos:start="161:50" pos:end="161:57"><operator pos:start="161:50" pos:end="161:50">&amp;</operator><name pos:start="161:51" pos:end="161:57"><name pos:start="161:51" pos:end="161:54">src2</name><index pos:start="161:55" pos:end="161:57">[<expr pos:start="161:56" pos:end="161:56"><name pos:start="161:56" pos:end="161:56">c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

        <expr_stmt pos:start="163:9" pos:end="163:38"><expr pos:start="163:9" pos:end="163:37"><name pos:start="163:9" pos:end="163:11">src</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <name pos:start="163:15" pos:end="163:37"><name pos:start="163:15" pos:end="163:18">src2</name><index pos:start="163:19" pos:end="163:37">[<expr pos:start="163:20" pos:end="163:36"><name pos:start="163:20" pos:end="163:34"><name pos:start="163:20" pos:end="163:24">avctx</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:34">channels</name></name><operator pos:start="163:35" pos:end="163:35">-</operator><literal type="number" pos:start="163:36" pos:end="163:36">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:28">case <expr pos:start="167:10" pos:end="167:27"><name pos:start="167:10" pos:end="167:27">CODEC_ID_PCM_U16LE</name></expr>:</case>

        <macro pos:start="169:9" pos:end="169:58"><name pos:start="169:9" pos:end="169:14">DECODE</name><argument_list pos:start="169:15" pos:end="169:58">(<argument pos:start="169:16" pos:end="169:23">uint16_t</argument>, <argument pos:start="169:26" pos:end="169:29">le16</argument>, <argument pos:start="169:32" pos:end="169:34">src</argument>, <argument pos:start="169:37" pos:end="169:43">samples</argument>, <argument pos:start="169:46" pos:end="169:46">n</argument>, <argument pos:start="169:49" pos:end="169:49"><literal type="number" pos:start="169:49" pos:end="169:49">0</literal></argument>, <argument pos:start="169:52" pos:end="169:57"><literal type="number" pos:start="169:52" pos:end="169:57">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="171:9" pos:end="171:14">break;</break>

    <case pos:start="173:5" pos:end="173:28">case <expr pos:start="173:10" pos:end="173:27"><name pos:start="173:10" pos:end="173:27">CODEC_ID_PCM_U16BE</name></expr>:</case>

        <macro pos:start="175:9" pos:end="175:58"><name pos:start="175:9" pos:end="175:14">DECODE</name><argument_list pos:start="175:15" pos:end="175:58">(<argument pos:start="175:16" pos:end="175:23">uint16_t</argument>, <argument pos:start="175:26" pos:end="175:29">be16</argument>, <argument pos:start="175:32" pos:end="175:34">src</argument>, <argument pos:start="175:37" pos:end="175:43">samples</argument>, <argument pos:start="175:46" pos:end="175:46">n</argument>, <argument pos:start="175:49" pos:end="175:49"><literal type="number" pos:start="175:49" pos:end="175:49">0</literal></argument>, <argument pos:start="175:52" pos:end="175:57"><literal type="number" pos:start="175:52" pos:end="175:57">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="177:9" pos:end="177:14">break;</break>

    <case pos:start="179:5" pos:end="179:25">case <expr pos:start="179:10" pos:end="179:24"><name pos:start="179:10" pos:end="179:24">CODEC_ID_PCM_S8</name></expr>:</case>

        <expr_stmt pos:start="181:9" pos:end="181:33"><expr pos:start="181:9" pos:end="181:32"><name pos:start="181:9" pos:end="181:13">dstu8</name><operator pos:start="181:14" pos:end="181:14">=</operator> <operator pos:start="181:16" pos:end="181:16">(</operator><name pos:start="181:17" pos:end="181:23">uint8_t</name><operator pos:start="181:24" pos:end="181:24">*</operator><operator pos:start="181:25" pos:end="181:25">)</operator><name pos:start="181:26" pos:end="181:32">samples</name></expr>;</expr_stmt>

        <for pos:start="183:9" pos:end="187:9">for<control pos:start="183:12" pos:end="183:21">(<init pos:start="183:13" pos:end="183:13">;</init><condition pos:start="183:14" pos:end="183:17"><expr pos:start="183:14" pos:end="183:16"><name pos:start="183:14" pos:end="183:14">n</name><operator pos:start="183:15" pos:end="183:15">&gt;</operator><literal type="number" pos:start="183:16" pos:end="183:16">0</literal></expr>;</condition><incr pos:start="183:18" pos:end="183:20"><expr pos:start="183:18" pos:end="183:20"><name pos:start="183:18" pos:end="183:18">n</name><operator pos:start="183:19" pos:end="183:20">--</operator></expr></incr>)</control> <block pos:start="183:23" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:36">

            <expr_stmt pos:start="185:13" pos:end="185:36"><expr pos:start="185:13" pos:end="185:35"><operator pos:start="185:13" pos:end="185:13">*</operator><name pos:start="185:14" pos:end="185:18">dstu8</name><operator pos:start="185:19" pos:end="185:20">++</operator> <operator pos:start="185:22" pos:end="185:22">=</operator> <operator pos:start="185:24" pos:end="185:24">*</operator><name pos:start="185:25" pos:end="185:27">src</name><operator pos:start="185:28" pos:end="185:29">++</operator> <operator pos:start="185:31" pos:end="185:31">+</operator> <literal type="number" pos:start="185:33" pos:end="185:35">128</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="189:9" pos:end="189:31"><expr pos:start="189:9" pos:end="189:30"><name pos:start="189:9" pos:end="189:15">samples</name><operator pos:start="189:16" pos:end="189:16">=</operator> <operator pos:start="189:18" pos:end="189:18">(</operator><name pos:start="189:19" pos:end="189:23">short</name><operator pos:start="189:24" pos:end="189:24">*</operator><operator pos:start="189:25" pos:end="189:25">)</operator><name pos:start="189:26" pos:end="189:30">dstu8</name></expr>;</expr_stmt>

        <break pos:start="191:9" pos:end="194:0">break;</break>

<cpp:if pos:start="193:1" pos:end="193:19">#<cpp:directive pos:start="193:2" pos:end="193:3">if</cpp:directive> <expr pos:start="193:5" pos:end="193:19"><name pos:start="193:5" pos:end="193:19">WORDS_BIGENDIAN</name></expr></cpp:if>

    <case pos:start="195:5" pos:end="195:28">case <expr pos:start="195:10" pos:end="195:27"><name pos:start="195:10" pos:end="195:27">CODEC_ID_PCM_F64LE</name></expr>:</case>

        <macro pos:start="197:9" pos:end="197:52"><name pos:start="197:9" pos:end="197:14">DECODE</name><argument_list pos:start="197:15" pos:end="197:52">(<argument pos:start="197:16" pos:end="197:22">int64_t</argument>, <argument pos:start="197:25" pos:end="197:28">le64</argument>, <argument pos:start="197:31" pos:end="197:33">src</argument>, <argument pos:start="197:36" pos:end="197:42">samples</argument>, <argument pos:start="197:45" pos:end="197:45">n</argument>, <argument pos:start="197:48" pos:end="197:48"><literal type="number" pos:start="197:48" pos:end="197:48">0</literal></argument>, <argument pos:start="197:51" pos:end="197:51"><literal type="number" pos:start="197:51" pos:end="197:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    <case pos:start="201:5" pos:end="201:28">case <expr pos:start="201:10" pos:end="201:27"><name pos:start="201:10" pos:end="201:27">CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="203:5" pos:end="203:28">case <expr pos:start="203:10" pos:end="203:27"><name pos:start="203:10" pos:end="203:27">CODEC_ID_PCM_F32LE</name></expr>:</case>

        <macro pos:start="205:9" pos:end="205:52"><name pos:start="205:9" pos:end="205:14">DECODE</name><argument_list pos:start="205:15" pos:end="205:52">(<argument pos:start="205:16" pos:end="205:22">int32_t</argument>, <argument pos:start="205:25" pos:end="205:28">le32</argument>, <argument pos:start="205:31" pos:end="205:33">src</argument>, <argument pos:start="205:36" pos:end="205:42">samples</argument>, <argument pos:start="205:45" pos:end="205:45">n</argument>, <argument pos:start="205:48" pos:end="205:48"><literal type="number" pos:start="205:48" pos:end="205:48">0</literal></argument>, <argument pos:start="205:51" pos:end="205:51"><literal type="number" pos:start="205:51" pos:end="205:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="207:9" pos:end="207:14">break;</break>

    <case pos:start="209:5" pos:end="209:28">case <expr pos:start="209:10" pos:end="209:27"><name pos:start="209:10" pos:end="209:27">CODEC_ID_PCM_S16LE</name></expr>:</case>

        <macro pos:start="211:9" pos:end="211:52"><name pos:start="211:9" pos:end="211:14">DECODE</name><argument_list pos:start="211:15" pos:end="211:52">(<argument pos:start="211:16" pos:end="211:22">int16_t</argument>, <argument pos:start="211:25" pos:end="211:28">le16</argument>, <argument pos:start="211:31" pos:end="211:33">src</argument>, <argument pos:start="211:36" pos:end="211:42">samples</argument>, <argument pos:start="211:45" pos:end="211:45">n</argument>, <argument pos:start="211:48" pos:end="211:48"><literal type="number" pos:start="211:48" pos:end="211:48">0</literal></argument>, <argument pos:start="211:51" pos:end="211:51"><literal type="number" pos:start="211:51" pos:end="211:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="213:9" pos:end="213:14">break;</break>

    <case pos:start="215:5" pos:end="215:28">case <expr pos:start="215:10" pos:end="215:27"><name pos:start="215:10" pos:end="215:27">CODEC_ID_PCM_F64BE</name></expr>:</case>

    <case pos:start="217:5" pos:end="217:28">case <expr pos:start="217:10" pos:end="217:27"><name pos:start="217:10" pos:end="217:27">CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="219:5" pos:end="219:28">case <expr pos:start="219:10" pos:end="219:27"><name pos:start="219:10" pos:end="219:27">CODEC_ID_PCM_S32BE</name></expr>:</case>

    <case pos:start="221:5" pos:end="224:0">case <expr pos:start="221:10" pos:end="221:27"><name pos:start="221:10" pos:end="221:27">CODEC_ID_PCM_S16BE</name></expr>:</case>

<cpp:else pos:start="223:1" pos:end="223:5">#<cpp:directive pos:start="223:2" pos:end="223:5">else</cpp:directive></cpp:else>

    <case pos:start="225:5" pos:end="225:28">case <expr pos:start="225:10" pos:end="225:27"><name pos:start="225:10" pos:end="225:27">CODEC_ID_PCM_F64BE</name></expr>:</case>

        <macro pos:start="227:9" pos:end="227:52"><name pos:start="227:9" pos:end="227:14">DECODE</name><argument_list pos:start="227:15" pos:end="227:52">(<argument pos:start="227:16" pos:end="227:22">int64_t</argument>, <argument pos:start="227:25" pos:end="227:28">be64</argument>, <argument pos:start="227:31" pos:end="227:33">src</argument>, <argument pos:start="227:36" pos:end="227:42">samples</argument>, <argument pos:start="227:45" pos:end="227:45">n</argument>, <argument pos:start="227:48" pos:end="227:48"><literal type="number" pos:start="227:48" pos:end="227:48">0</literal></argument>, <argument pos:start="227:51" pos:end="227:51"><literal type="number" pos:start="227:51" pos:end="227:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="229:9" pos:end="229:14">break;</break>

    <case pos:start="231:5" pos:end="231:28">case <expr pos:start="231:10" pos:end="231:27"><name pos:start="231:10" pos:end="231:27">CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="233:5" pos:end="233:28">case <expr pos:start="233:10" pos:end="233:27"><name pos:start="233:10" pos:end="233:27">CODEC_ID_PCM_S32BE</name></expr>:</case>

        <macro pos:start="235:9" pos:end="235:52"><name pos:start="235:9" pos:end="235:14">DECODE</name><argument_list pos:start="235:15" pos:end="235:52">(<argument pos:start="235:16" pos:end="235:22">int32_t</argument>, <argument pos:start="235:25" pos:end="235:28">be32</argument>, <argument pos:start="235:31" pos:end="235:33">src</argument>, <argument pos:start="235:36" pos:end="235:42">samples</argument>, <argument pos:start="235:45" pos:end="235:45">n</argument>, <argument pos:start="235:48" pos:end="235:48"><literal type="number" pos:start="235:48" pos:end="235:48">0</literal></argument>, <argument pos:start="235:51" pos:end="235:51"><literal type="number" pos:start="235:51" pos:end="235:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <case pos:start="239:5" pos:end="239:28">case <expr pos:start="239:10" pos:end="239:27"><name pos:start="239:10" pos:end="239:27">CODEC_ID_PCM_S16BE</name></expr>:</case>

        <macro pos:start="241:9" pos:end="241:52"><name pos:start="241:9" pos:end="241:14">DECODE</name><argument_list pos:start="241:15" pos:end="241:52">(<argument pos:start="241:16" pos:end="241:22">int16_t</argument>, <argument pos:start="241:25" pos:end="241:28">be16</argument>, <argument pos:start="241:31" pos:end="241:33">src</argument>, <argument pos:start="241:36" pos:end="241:42">samples</argument>, <argument pos:start="241:45" pos:end="241:45">n</argument>, <argument pos:start="241:48" pos:end="241:48"><literal type="number" pos:start="241:48" pos:end="241:48">0</literal></argument>, <argument pos:start="241:51" pos:end="241:51"><literal type="number" pos:start="241:51" pos:end="241:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="243:9" pos:end="243:14">break;</break>

    <case pos:start="245:5" pos:end="245:28">case <expr pos:start="245:10" pos:end="245:27"><name pos:start="245:10" pos:end="245:27">CODEC_ID_PCM_F64LE</name></expr>:</case>

    <case pos:start="247:5" pos:end="247:28">case <expr pos:start="247:10" pos:end="247:27"><name pos:start="247:10" pos:end="247:27">CODEC_ID_PCM_F32LE</name></expr>:</case>

    <case pos:start="249:5" pos:end="249:28">case <expr pos:start="249:10" pos:end="249:27"><name pos:start="249:10" pos:end="249:27">CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="251:5" pos:end="254:0">case <expr pos:start="251:10" pos:end="251:27"><name pos:start="251:10" pos:end="251:27">CODEC_ID_PCM_S16LE</name></expr>:</case>

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="253:8" pos:end="253:28">/* WORDS_BIGENDIAN */</comment>

    <case pos:start="255:5" pos:end="255:25">case <expr pos:start="255:10" pos:end="255:24"><name pos:start="255:10" pos:end="255:24">CODEC_ID_PCM_U8</name></expr>:</case>

        <expr_stmt pos:start="257:9" pos:end="257:44"><expr pos:start="257:9" pos:end="257:43"><call pos:start="257:9" pos:end="257:43"><name pos:start="257:9" pos:end="257:14">memcpy</name><argument_list pos:start="257:15" pos:end="257:43">(<argument pos:start="257:16" pos:end="257:22"><expr pos:start="257:16" pos:end="257:22"><name pos:start="257:16" pos:end="257:22">samples</name></expr></argument>, <argument pos:start="257:25" pos:end="257:27"><expr pos:start="257:25" pos:end="257:27"><name pos:start="257:25" pos:end="257:27">src</name></expr></argument>, <argument pos:start="257:30" pos:end="257:42"><expr pos:start="257:30" pos:end="257:42"><name pos:start="257:30" pos:end="257:30">n</name><operator pos:start="257:31" pos:end="257:31">*</operator><name pos:start="257:32" pos:end="257:42">sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:29"><expr pos:start="259:9" pos:end="259:28"><name pos:start="259:9" pos:end="259:11">src</name> <operator pos:start="259:13" pos:end="259:14">+=</operator> <name pos:start="259:16" pos:end="259:16">n</name><operator pos:start="259:17" pos:end="259:17">*</operator><name pos:start="259:18" pos:end="259:28">sample_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:59"><expr pos:start="261:9" pos:end="261:58"><name pos:start="261:9" pos:end="261:15">samples</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <operator pos:start="261:19" pos:end="261:19">(</operator><name pos:start="261:20" pos:end="261:24">short</name><operator pos:start="261:25" pos:end="261:25">*</operator><operator pos:start="261:26" pos:end="261:26">)</operator><operator pos:start="261:27" pos:end="261:27">(</operator><operator pos:start="261:28" pos:end="261:28">(</operator><name pos:start="261:29" pos:end="261:35">uint8_t</name><operator pos:start="261:36" pos:end="261:36">*</operator><operator pos:start="261:37" pos:end="261:37">)</operator><name pos:start="261:38" pos:end="261:41">data</name> <operator pos:start="261:43" pos:end="261:43">+</operator> <name pos:start="261:45" pos:end="261:45">n</name><operator pos:start="261:46" pos:end="261:46">*</operator><name pos:start="261:47" pos:end="261:57">sample_size</name><operator pos:start="261:58" pos:end="261:58">)</operator></expr>;</expr_stmt>

        <break pos:start="263:9" pos:end="263:14">break;</break>

    <case pos:start="265:5" pos:end="265:27">case <expr pos:start="265:10" pos:end="265:26"><name pos:start="265:10" pos:end="265:26">CODEC_ID_PCM_ZORK</name></expr>:</case>

        <for pos:start="267:9" pos:end="277:9">for<control pos:start="267:12" pos:end="267:21">(<init pos:start="267:13" pos:end="267:13">;</init><condition pos:start="267:14" pos:end="267:17"><expr pos:start="267:14" pos:end="267:16"><name pos:start="267:14" pos:end="267:14">n</name><operator pos:start="267:15" pos:end="267:15">&gt;</operator><literal type="number" pos:start="267:16" pos:end="267:16">0</literal></expr>;</condition><incr pos:start="267:18" pos:end="267:20"><expr pos:start="267:18" pos:end="267:20"><name pos:start="267:18" pos:end="267:18">n</name><operator pos:start="267:19" pos:end="267:20">--</operator></expr></incr>)</control> <block pos:start="267:23" pos:end="277:9">{<block_content pos:start="269:13" pos:end="275:32">

            <decl_stmt pos:start="269:13" pos:end="269:26"><decl pos:start="269:13" pos:end="269:25"><type pos:start="269:13" pos:end="269:15"><name pos:start="269:13" pos:end="269:15">int</name></type> <name pos:start="269:17" pos:end="269:17">x</name><init pos:start="269:18" pos:end="269:25">= <expr pos:start="269:20" pos:end="269:25"><operator pos:start="269:20" pos:end="269:20">*</operator><name pos:start="269:21" pos:end="269:23">src</name><operator pos:start="269:24" pos:end="269:25">++</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="271:13" pos:end="273:29"><if pos:start="271:13" pos:end="271:30">if<condition pos:start="271:15" pos:end="271:21">(<expr pos:start="271:16" pos:end="271:20"><name pos:start="271:16" pos:end="271:16">x</name><operator pos:start="271:17" pos:end="271:17">&amp;</operator><literal type="number" pos:start="271:18" pos:end="271:20">128</literal></expr>)</condition><block type="pseudo" pos:start="271:23" pos:end="271:30"><block_content pos:start="271:23" pos:end="271:30"> <expr_stmt pos:start="271:23" pos:end="271:30"><expr pos:start="271:23" pos:end="271:29"><name pos:start="271:23" pos:end="271:23">x</name><operator pos:start="271:24" pos:end="271:25">-=</operator> <literal type="number" pos:start="271:27" pos:end="271:29">128</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="273:13" pos:end="273:29">else<block type="pseudo" pos:start="273:23" pos:end="273:29"><block_content pos:start="273:23" pos:end="273:29">      <expr_stmt pos:start="273:23" pos:end="273:29"><expr pos:start="273:23" pos:end="273:28"><name pos:start="273:23" pos:end="273:23">x</name> <operator pos:start="273:25" pos:end="273:25">=</operator> <operator pos:start="273:27" pos:end="273:27">-</operator><name pos:start="273:28" pos:end="273:28">x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:32"><expr pos:start="275:13" pos:end="275:31"><operator pos:start="275:13" pos:end="275:13">*</operator><name pos:start="275:14" pos:end="275:20">samples</name><operator pos:start="275:21" pos:end="275:22">++</operator> <operator pos:start="275:24" pos:end="275:24">=</operator> <name pos:start="275:26" pos:end="275:26">x</name> <operator pos:start="275:28" pos:end="275:29">&lt;&lt;</operator> <literal type="number" pos:start="275:31" pos:end="275:31">8</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="279:9" pos:end="279:14">break;</break>

    <case pos:start="281:5" pos:end="281:27">case <expr pos:start="281:10" pos:end="281:26"><name pos:start="281:10" pos:end="281:26">CODEC_ID_PCM_ALAW</name></expr>:</case>

    <case pos:start="283:5" pos:end="283:28">case <expr pos:start="283:10" pos:end="283:27"><name pos:start="283:10" pos:end="283:27">CODEC_ID_PCM_MULAW</name></expr>:</case>

        <for pos:start="285:9" pos:end="289:9">for<control pos:start="285:12" pos:end="285:21">(<init pos:start="285:13" pos:end="285:13">;</init><condition pos:start="285:14" pos:end="285:17"><expr pos:start="285:14" pos:end="285:16"><name pos:start="285:14" pos:end="285:14">n</name><operator pos:start="285:15" pos:end="285:15">&gt;</operator><literal type="number" pos:start="285:16" pos:end="285:16">0</literal></expr>;</condition><incr pos:start="285:18" pos:end="285:20"><expr pos:start="285:18" pos:end="285:20"><name pos:start="285:18" pos:end="285:18">n</name><operator pos:start="285:19" pos:end="285:20">--</operator></expr></incr>)</control> <block pos:start="285:23" pos:end="289:9">{<block_content pos:start="287:13" pos:end="287:42">

            <expr_stmt pos:start="287:13" pos:end="287:42"><expr pos:start="287:13" pos:end="287:41"><operator pos:start="287:13" pos:end="287:13">*</operator><name pos:start="287:14" pos:end="287:20">samples</name><operator pos:start="287:21" pos:end="287:22">++</operator> <operator pos:start="287:24" pos:end="287:24">=</operator> <name pos:start="287:26" pos:end="287:41"><name pos:start="287:26" pos:end="287:26">s</name><operator pos:start="287:27" pos:end="287:28">-&gt;</operator><name pos:start="287:29" pos:end="287:33">table</name><index pos:start="287:34" pos:end="287:41">[<expr pos:start="287:35" pos:end="287:40"><operator pos:start="287:35" pos:end="287:35">*</operator><name pos:start="287:36" pos:end="287:38">src</name><operator pos:start="287:39" pos:end="287:40">++</operator></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="291:9" pos:end="291:14">break;</break>

    <case pos:start="293:5" pos:end="293:26">case <expr pos:start="293:10" pos:end="293:25"><name pos:start="293:10" pos:end="293:25">CODEC_ID_PCM_DVD</name></expr>:</case>

        <expr_stmt pos:start="295:9" pos:end="295:27"><expr pos:start="295:9" pos:end="295:26"><name pos:start="295:9" pos:end="295:19">dst_int32_t</name> <operator pos:start="295:21" pos:end="295:21">=</operator> <name pos:start="295:23" pos:end="295:26">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:29"><expr pos:start="297:9" pos:end="297:28"><name pos:start="297:9" pos:end="297:9">n</name> <operator pos:start="297:11" pos:end="297:12">/=</operator> <name pos:start="297:14" pos:end="297:28"><name pos:start="297:14" pos:end="297:18">avctx</name><operator pos:start="297:19" pos:end="297:20">-&gt;</operator><name pos:start="297:21" pos:end="297:28">channels</name></name></expr>;</expr_stmt>

        <switch pos:start="299:9" pos:end="353:9">switch <condition pos:start="299:16" pos:end="299:45">(<expr pos:start="299:17" pos:end="299:44"><name pos:start="299:17" pos:end="299:44"><name pos:start="299:17" pos:end="299:21">avctx</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:44">bits_per_coded_sample</name></name></expr>)</condition> <block pos:start="299:47" pos:end="353:9">{<block_content pos:start="301:9" pos:end="351:18">

        <case pos:start="301:9" pos:end="301:16">case <expr pos:start="301:14" pos:end="301:15"><literal type="number" pos:start="301:14" pos:end="301:15">20</literal></expr>:</case>

            <while pos:start="303:13" pos:end="319:13">while <condition pos:start="303:19" pos:end="303:23">(<expr pos:start="303:20" pos:end="303:22"><name pos:start="303:20" pos:end="303:20">n</name><operator pos:start="303:21" pos:end="303:22">--</operator></expr>)</condition> <block pos:start="303:25" pos:end="319:13">{<block_content pos:start="305:17" pos:end="317:27">

                <expr_stmt pos:start="305:17" pos:end="305:36"><expr pos:start="305:17" pos:end="305:35"><name pos:start="305:17" pos:end="305:17">c</name> <operator pos:start="305:19" pos:end="305:19">=</operator> <name pos:start="305:21" pos:end="305:35"><name pos:start="305:21" pos:end="305:25">avctx</name><operator pos:start="305:26" pos:end="305:27">-&gt;</operator><name pos:start="305:28" pos:end="305:35">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="307:17" pos:end="307:33"><expr pos:start="307:17" pos:end="307:32"><name pos:start="307:17" pos:end="307:20">src8</name> <operator pos:start="307:22" pos:end="307:22">=</operator> <name pos:start="307:24" pos:end="307:26">src</name> <operator pos:start="307:28" pos:end="307:28">+</operator> <literal type="number" pos:start="307:30" pos:end="307:30">4</literal><operator pos:start="307:31" pos:end="307:31">*</operator><name pos:start="307:32" pos:end="307:32">c</name></expr>;</expr_stmt>

                <while pos:start="309:17" pos:end="315:17">while <condition pos:start="309:23" pos:end="309:27">(<expr pos:start="309:24" pos:end="309:26"><name pos:start="309:24" pos:end="309:24">c</name><operator pos:start="309:25" pos:end="309:26">--</operator></expr>)</condition> <block pos:start="309:29" pos:end="315:17">{<block_content pos:start="311:21" pos:end="313:97">

                    <expr_stmt pos:start="311:21" pos:end="311:96"><expr pos:start="311:21" pos:end="311:95"><operator pos:start="311:21" pos:end="311:21">*</operator><name pos:start="311:22" pos:end="311:32">dst_int32_t</name><operator pos:start="311:33" pos:end="311:34">++</operator> <operator pos:start="311:36" pos:end="311:36">=</operator> <operator pos:start="311:38" pos:end="311:38">(</operator><call pos:start="311:39" pos:end="311:63"><name pos:start="311:39" pos:end="311:57">bytestream_get_be16</name><argument_list pos:start="311:58" pos:end="311:63">(<argument pos:start="311:59" pos:end="311:62"><expr pos:start="311:59" pos:end="311:62"><operator pos:start="311:59" pos:end="311:59">&amp;</operator><name pos:start="311:60" pos:end="311:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="311:65" pos:end="311:66">&lt;&lt;</operator> <literal type="number" pos:start="311:68" pos:end="311:69">16</literal><operator pos:start="311:70" pos:end="311:70">)</operator> <operator pos:start="311:72" pos:end="311:72">+</operator> <operator pos:start="311:74" pos:end="311:74">(</operator><operator pos:start="311:75" pos:end="311:75">(</operator><operator pos:start="311:76" pos:end="311:76">*</operator><name pos:start="311:77" pos:end="311:80">src8</name>   <operator pos:start="311:84" pos:end="311:84">&amp;</operator><literal type="number" pos:start="311:85" pos:end="311:88">0xf0</literal><operator pos:start="311:89" pos:end="311:89">)</operator> <operator pos:start="311:91" pos:end="311:92">&lt;&lt;</operator> <literal type="number" pos:start="311:94" pos:end="311:94">8</literal><operator pos:start="311:95" pos:end="311:95">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="313:21" pos:end="313:97"><expr pos:start="313:21" pos:end="313:96"><operator pos:start="313:21" pos:end="313:21">*</operator><name pos:start="313:22" pos:end="313:32">dst_int32_t</name><operator pos:start="313:33" pos:end="313:34">++</operator> <operator pos:start="313:36" pos:end="313:36">=</operator> <operator pos:start="313:38" pos:end="313:38">(</operator><call pos:start="313:39" pos:end="313:63"><name pos:start="313:39" pos:end="313:57">bytestream_get_be16</name><argument_list pos:start="313:58" pos:end="313:63">(<argument pos:start="313:59" pos:end="313:62"><expr pos:start="313:59" pos:end="313:62"><operator pos:start="313:59" pos:end="313:59">&amp;</operator><name pos:start="313:60" pos:end="313:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="313:65" pos:end="313:66">&lt;&lt;</operator> <literal type="number" pos:start="313:68" pos:end="313:69">16</literal><operator pos:start="313:70" pos:end="313:70">)</operator> <operator pos:start="313:72" pos:end="313:72">+</operator> <operator pos:start="313:74" pos:end="313:74">(</operator><operator pos:start="313:75" pos:end="313:75">(</operator><operator pos:start="313:76" pos:end="313:76">*</operator><name pos:start="313:77" pos:end="313:80">src8</name><operator pos:start="313:81" pos:end="313:82">++</operator> <operator pos:start="313:84" pos:end="313:84">&amp;</operator><literal type="number" pos:start="313:85" pos:end="313:88">0x0f</literal><operator pos:start="313:89" pos:end="313:89">)</operator> <operator pos:start="313:91" pos:end="313:92">&lt;&lt;</operator> <literal type="number" pos:start="313:94" pos:end="313:95">12</literal><operator pos:start="313:96" pos:end="313:96">)</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="317:17" pos:end="317:27"><expr pos:start="317:17" pos:end="317:26"><name pos:start="317:17" pos:end="317:19">src</name> <operator pos:start="317:21" pos:end="317:21">=</operator> <name pos:start="317:23" pos:end="317:26">src8</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="321:13" pos:end="321:18">break;</break>

        <case pos:start="323:9" pos:end="323:16">case <expr pos:start="323:14" pos:end="323:15"><literal type="number" pos:start="323:14" pos:end="323:15">24</literal></expr>:</case>

            <while pos:start="325:13" pos:end="341:13">while <condition pos:start="325:19" pos:end="325:23">(<expr pos:start="325:20" pos:end="325:22"><name pos:start="325:20" pos:end="325:20">n</name><operator pos:start="325:21" pos:end="325:22">--</operator></expr>)</condition> <block pos:start="325:25" pos:end="341:13">{<block_content pos:start="327:17" pos:end="339:27">

                <expr_stmt pos:start="327:17" pos:end="327:36"><expr pos:start="327:17" pos:end="327:35"><name pos:start="327:17" pos:end="327:17">c</name> <operator pos:start="327:19" pos:end="327:19">=</operator> <name pos:start="327:21" pos:end="327:35"><name pos:start="327:21" pos:end="327:25">avctx</name><operator pos:start="327:26" pos:end="327:27">-&gt;</operator><name pos:start="327:28" pos:end="327:35">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:33"><expr pos:start="329:17" pos:end="329:32"><name pos:start="329:17" pos:end="329:20">src8</name> <operator pos:start="329:22" pos:end="329:22">=</operator> <name pos:start="329:24" pos:end="329:26">src</name> <operator pos:start="329:28" pos:end="329:28">+</operator> <literal type="number" pos:start="329:30" pos:end="329:30">4</literal><operator pos:start="329:31" pos:end="329:31">*</operator><name pos:start="329:32" pos:end="329:32">c</name></expr>;</expr_stmt>

                <while pos:start="331:17" pos:end="337:17">while <condition pos:start="331:23" pos:end="331:27">(<expr pos:start="331:24" pos:end="331:26"><name pos:start="331:24" pos:end="331:24">c</name><operator pos:start="331:25" pos:end="331:26">--</operator></expr>)</condition> <block pos:start="331:29" pos:end="337:17">{<block_content pos:start="333:21" pos:end="335:90">

                    <expr_stmt pos:start="333:21" pos:end="333:90"><expr pos:start="333:21" pos:end="333:89"><operator pos:start="333:21" pos:end="333:21">*</operator><name pos:start="333:22" pos:end="333:32">dst_int32_t</name><operator pos:start="333:33" pos:end="333:34">++</operator> <operator pos:start="333:36" pos:end="333:36">=</operator> <operator pos:start="333:38" pos:end="333:38">(</operator><call pos:start="333:39" pos:end="333:63"><name pos:start="333:39" pos:end="333:57">bytestream_get_be16</name><argument_list pos:start="333:58" pos:end="333:63">(<argument pos:start="333:59" pos:end="333:62"><expr pos:start="333:59" pos:end="333:62"><operator pos:start="333:59" pos:end="333:59">&amp;</operator><name pos:start="333:60" pos:end="333:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="333:65" pos:end="333:66">&lt;&lt;</operator> <literal type="number" pos:start="333:68" pos:end="333:69">16</literal><operator pos:start="333:70" pos:end="333:70">)</operator> <operator pos:start="333:72" pos:end="333:72">+</operator> <operator pos:start="333:74" pos:end="333:74">(</operator><operator pos:start="333:75" pos:end="333:75">(</operator><operator pos:start="333:76" pos:end="333:76">*</operator><name pos:start="333:77" pos:end="333:80">src8</name><operator pos:start="333:81" pos:end="333:82">++</operator><operator pos:start="333:83" pos:end="333:83">)</operator> <operator pos:start="333:85" pos:end="333:86">&lt;&lt;</operator> <literal type="number" pos:start="333:88" pos:end="333:88">8</literal><operator pos:start="333:89" pos:end="333:89">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="335:90"><expr pos:start="335:21" pos:end="335:89"><operator pos:start="335:21" pos:end="335:21">*</operator><name pos:start="335:22" pos:end="335:32">dst_int32_t</name><operator pos:start="335:33" pos:end="335:34">++</operator> <operator pos:start="335:36" pos:end="335:36">=</operator> <operator pos:start="335:38" pos:end="335:38">(</operator><call pos:start="335:39" pos:end="335:63"><name pos:start="335:39" pos:end="335:57">bytestream_get_be16</name><argument_list pos:start="335:58" pos:end="335:63">(<argument pos:start="335:59" pos:end="335:62"><expr pos:start="335:59" pos:end="335:62"><operator pos:start="335:59" pos:end="335:59">&amp;</operator><name pos:start="335:60" pos:end="335:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="335:65" pos:end="335:66">&lt;&lt;</operator> <literal type="number" pos:start="335:68" pos:end="335:69">16</literal><operator pos:start="335:70" pos:end="335:70">)</operator> <operator pos:start="335:72" pos:end="335:72">+</operator> <operator pos:start="335:74" pos:end="335:74">(</operator><operator pos:start="335:75" pos:end="335:75">(</operator><operator pos:start="335:76" pos:end="335:76">*</operator><name pos:start="335:77" pos:end="335:80">src8</name><operator pos:start="335:81" pos:end="335:82">++</operator><operator pos:start="335:83" pos:end="335:83">)</operator> <operator pos:start="335:85" pos:end="335:86">&lt;&lt;</operator> <literal type="number" pos:start="335:88" pos:end="335:88">8</literal><operator pos:start="335:89" pos:end="335:89">)</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="339:17" pos:end="339:27"><expr pos:start="339:17" pos:end="339:26"><name pos:start="339:17" pos:end="339:19">src</name> <operator pos:start="339:21" pos:end="339:21">=</operator> <name pos:start="339:23" pos:end="339:26">src8</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="343:13" pos:end="343:18">break;</break>

        <default pos:start="345:9" pos:end="345:16">default:</default>

            <expr_stmt pos:start="347:13" pos:end="347:78"><expr pos:start="347:13" pos:end="347:77"><call pos:start="347:13" pos:end="347:77"><name pos:start="347:13" pos:end="347:18">av_log</name><argument_list pos:start="347:19" pos:end="347:77">(<argument pos:start="347:20" pos:end="347:24"><expr pos:start="347:20" pos:end="347:24"><name pos:start="347:20" pos:end="347:24">avctx</name></expr></argument>, <argument pos:start="347:27" pos:end="347:38"><expr pos:start="347:27" pos:end="347:38"><name pos:start="347:27" pos:end="347:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="347:41" pos:end="347:76"><expr pos:start="347:41" pos:end="347:76"><literal type="string" pos:start="347:41" pos:end="347:76">"PCM DVD unsupported sample depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="349:13" pos:end="349:22">return <expr pos:start="349:20" pos:end="349:21"><operator pos:start="349:20" pos:end="349:20">-</operator><literal type="number" pos:start="349:21" pos:end="349:21">1</literal></expr>;</return>

            <break pos:start="351:13" pos:end="351:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="355:9" pos:end="355:40"><expr pos:start="355:9" pos:end="355:39"><name pos:start="355:9" pos:end="355:15">samples</name> <operator pos:start="355:17" pos:end="355:17">=</operator> <operator pos:start="355:19" pos:end="355:19">(</operator><name pos:start="355:20" pos:end="355:24">short</name> <operator pos:start="355:26" pos:end="355:26">*</operator><operator pos:start="355:27" pos:end="355:27">)</operator> <name pos:start="355:29" pos:end="355:39">dst_int32_t</name></expr>;</expr_stmt>

        <break pos:start="357:9" pos:end="357:14">break;</break>

    <default pos:start="359:5" pos:end="359:12">default:</default>

        <return pos:start="361:9" pos:end="361:18">return <expr pos:start="361:16" pos:end="361:17"><operator pos:start="361:16" pos:end="361:16">-</operator><literal type="number" pos:start="361:17" pos:end="361:17">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="365:5" pos:end="365:54"><expr pos:start="365:5" pos:end="365:53"><operator pos:start="365:5" pos:end="365:5">*</operator><name pos:start="365:6" pos:end="365:14">data_size</name> <operator pos:start="365:16" pos:end="365:16">=</operator> <operator pos:start="365:18" pos:end="365:18">(</operator><name pos:start="365:19" pos:end="365:25">uint8_t</name> <operator pos:start="365:27" pos:end="365:27">*</operator><operator pos:start="365:28" pos:end="365:28">)</operator><name pos:start="365:29" pos:end="365:35">samples</name> <operator pos:start="365:37" pos:end="365:37">-</operator> <operator pos:start="365:39" pos:end="365:39">(</operator><name pos:start="365:40" pos:end="365:46">uint8_t</name> <operator pos:start="365:48" pos:end="365:48">*</operator><operator pos:start="365:49" pos:end="365:49">)</operator><name pos:start="365:50" pos:end="365:53">data</name></expr>;</expr_stmt>

    <return pos:start="367:5" pos:end="367:21">return <expr pos:start="367:12" pos:end="367:20"><name pos:start="367:12" pos:end="367:14">src</name> <operator pos:start="367:16" pos:end="367:16">-</operator> <name pos:start="367:18" pos:end="367:20">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
