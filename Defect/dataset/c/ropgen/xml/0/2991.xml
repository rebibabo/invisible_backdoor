<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2991.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">AddressParts</name></type> <name pos:start="1:21" pos:end="1:35">gen_lea_modrm_0</name><parameter_list pos:start="1:36" pos:end="3:46">(<parameter pos:start="1:37" pos:end="1:52"><decl pos:start="1:37" pos:end="1:52"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:47">CPUX86State</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">env</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:69"><decl pos:start="1:55" pos:end="1:69"><type pos:start="1:55" pos:end="1:69"><name pos:start="1:55" pos:end="1:66">DisasContext</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:69">s</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:45"><decl pos:start="3:37" pos:end="3:45"><type pos:start="3:37" pos:end="3:45"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:45">modrm</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="251:1">{<block_content pos:start="7:5" pos:end="249:63">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">def_seg</name></decl>, <decl pos:start="7:18" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:21">base</name></decl>, <decl pos:start="7:24" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:24" pos:end="7:28">index</name></decl>, <decl pos:start="7:31" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:31" pos:end="7:35">scale</name></decl>, <decl pos:start="7:38" pos:end="7:40"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:38" pos:end="7:40">mod</name></decl>, <decl pos:start="7:43" pos:end="7:44"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:43" pos:end="7:44">rm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">target_long</name></type> <name pos:start="9:17" pos:end="9:20">disp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:16">havesib</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:19"><expr pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:11">def_seg</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:18">R_DS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:9">index</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <operator pos:start="17:13" pos:end="17:13">-</operator><literal type="number" pos:start="17:14" pos:end="17:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:14"><expr pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:9">scale</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <literal type="number" pos:start="19:13" pos:end="19:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:13"><expr pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:8">disp</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <literal type="number" pos:start="21:12" pos:end="21:12">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:7">mod</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <operator pos:start="25:11" pos:end="25:11">(</operator><name pos:start="25:12" pos:end="25:16">modrm</name> <operator pos:start="25:18" pos:end="25:19">&gt;&gt;</operator> <literal type="number" pos:start="25:21" pos:end="25:21">6</literal><operator pos:start="25:22" pos:end="25:22">)</operator> <operator pos:start="25:24" pos:end="25:24">&amp;</operator> <literal type="number" pos:start="25:26" pos:end="25:26">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:19"><expr pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:6">rm</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <name pos:start="27:10" pos:end="27:14">modrm</name> <operator pos:start="27:16" pos:end="27:16">&amp;</operator> <literal type="number" pos:start="27:18" pos:end="27:18">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:25"><expr pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:8">base</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <name pos:start="29:12" pos:end="29:13">rm</name> <operator pos:start="29:15" pos:end="29:15">|</operator> <call pos:start="29:17" pos:end="29:24"><name pos:start="29:17" pos:end="29:21">REX_B</name><argument_list pos:start="29:22" pos:end="29:24">(<argument pos:start="29:23" pos:end="29:23"><expr pos:start="29:23" pos:end="29:23"><name pos:start="29:23" pos:end="29:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:11">mod</name> <operator pos:start="33:13" pos:end="33:14">==</operator> <literal type="number" pos:start="33:16" pos:end="33:16">3</literal></expr>)</condition> <block pos:start="33:19" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:18">

        <comment type="block" pos:start="35:9" pos:end="37:73">/* Normally filtered out earlier, but including this path

           simplifies multi-byte nop, as well as bndcl, bndcu, bndcn.  */</comment>

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="45:5" pos:end="243:5">switch <condition pos:start="45:12" pos:end="45:21">(<expr pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:20">aflag</name></name></expr>)</condition> <block pos:start="45:23" pos:end="243:5">{<block_content pos:start="47:5" pos:end="241:20">

    <case pos:start="47:5" pos:end="47:15">case <expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:14">MO_64</name></expr>:</case>

    <case pos:start="49:5" pos:end="49:15">case <expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:14">MO_32</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:20"><expr pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:15">havesib</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="71:9"><if pos:start="53:9" pos:end="71:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:14">rm</name> <operator pos:start="53:16" pos:end="53:17">==</operator> <literal type="number" pos:start="53:19" pos:end="53:19">4</literal></expr>)</condition> <block pos:start="53:22" pos:end="71:9">{<block_content pos:start="55:13" pos:end="69:24">

            <decl_stmt pos:start="55:13" pos:end="55:51"><decl pos:start="55:13" pos:end="55:50"><type pos:start="55:13" pos:end="55:15"><name pos:start="55:13" pos:end="55:15">int</name></type> <name pos:start="55:17" pos:end="55:20">code</name> <init pos:start="55:22" pos:end="55:50">= <expr pos:start="55:24" pos:end="55:50"><call pos:start="55:24" pos:end="55:50"><name pos:start="55:24" pos:end="55:36">cpu_ldub_code</name><argument_list pos:start="55:37" pos:end="55:50">(<argument pos:start="55:38" pos:end="55:40"><expr pos:start="55:38" pos:end="55:40"><name pos:start="55:38" pos:end="55:40">env</name></expr></argument>, <argument pos:start="55:43" pos:end="55:49"><expr pos:start="55:43" pos:end="55:49"><name pos:start="55:43" pos:end="55:47"><name pos:start="55:43" pos:end="55:43">s</name><operator pos:start="55:44" pos:end="55:45">-&gt;</operator><name pos:start="55:46" pos:end="55:47">pc</name></name><operator pos:start="55:48" pos:end="55:49">++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:36"><expr pos:start="57:13" pos:end="57:35"><name pos:start="57:13" pos:end="57:17">scale</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <operator pos:start="57:21" pos:end="57:21">(</operator><name pos:start="57:22" pos:end="57:25">code</name> <operator pos:start="57:27" pos:end="57:28">&gt;&gt;</operator> <literal type="number" pos:start="57:30" pos:end="57:30">6</literal><operator pos:start="57:31" pos:end="57:31">)</operator> <operator pos:start="57:33" pos:end="57:33">&amp;</operator> <literal type="number" pos:start="57:35" pos:end="57:35">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:49"><expr pos:start="59:13" pos:end="59:48"><name pos:start="59:13" pos:end="59:17">index</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <operator pos:start="59:21" pos:end="59:21">(</operator><operator pos:start="59:22" pos:end="59:22">(</operator><name pos:start="59:23" pos:end="59:26">code</name> <operator pos:start="59:28" pos:end="59:29">&gt;&gt;</operator> <literal type="number" pos:start="59:31" pos:end="59:31">3</literal><operator pos:start="59:32" pos:end="59:32">)</operator> <operator pos:start="59:34" pos:end="59:34">&amp;</operator> <literal type="number" pos:start="59:36" pos:end="59:36">7</literal><operator pos:start="59:37" pos:end="59:37">)</operator> <operator pos:start="59:39" pos:end="59:39">|</operator> <call pos:start="59:41" pos:end="59:48"><name pos:start="59:41" pos:end="59:45">REX_X</name><argument_list pos:start="59:46" pos:end="59:48">(<argument pos:start="59:47" pos:end="59:47"><expr pos:start="59:47" pos:end="59:47"><name pos:start="59:47" pos:end="59:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="65:13"><if pos:start="61:13" pos:end="65:13">if <condition pos:start="61:16" pos:end="61:27">(<expr pos:start="61:17" pos:end="61:26"><name pos:start="61:17" pos:end="61:21">index</name> <operator pos:start="61:23" pos:end="61:24">==</operator> <literal type="number" pos:start="61:26" pos:end="61:26">4</literal></expr>)</condition> <block pos:start="61:29" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:27">

                <expr_stmt pos:start="63:17" pos:end="63:27"><expr pos:start="63:17" pos:end="63:26"><name pos:start="63:17" pos:end="63:21">index</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <operator pos:start="63:25" pos:end="63:25">-</operator><literal type="number" pos:start="63:26" pos:end="63:26">1</literal></expr>;</expr_stmt>  <comment type="block" pos:start="63:30" pos:end="63:43">/* no index */</comment>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:41"><expr pos:start="67:13" pos:end="67:40"><name pos:start="67:13" pos:end="67:16">base</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <operator pos:start="67:20" pos:end="67:20">(</operator><name pos:start="67:21" pos:end="67:24">code</name> <operator pos:start="67:26" pos:end="67:26">&amp;</operator> <literal type="number" pos:start="67:28" pos:end="67:28">7</literal><operator pos:start="67:29" pos:end="67:29">)</operator> <operator pos:start="67:31" pos:end="67:31">|</operator> <call pos:start="67:33" pos:end="67:40"><name pos:start="67:33" pos:end="67:37">REX_B</name><argument_list pos:start="67:38" pos:end="67:40">(<argument pos:start="67:39" pos:end="67:39"><expr pos:start="67:39" pos:end="67:39"><name pos:start="67:39" pos:end="67:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:24"><expr pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:19">havesib</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <literal type="number" pos:start="69:23" pos:end="69:23">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="75:9" pos:end="115:9">switch <condition pos:start="75:16" pos:end="75:20">(<expr pos:start="75:17" pos:end="75:19"><name pos:start="75:17" pos:end="75:19">mod</name></expr>)</condition> <block pos:start="75:22" pos:end="115:9">{<block_content pos:start="77:9" pos:end="113:18">

        <case pos:start="77:9" pos:end="77:15">case <expr pos:start="77:14" pos:end="77:14"><literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>:</case>

            <if_stmt pos:start="79:13" pos:end="95:13"><if pos:start="79:13" pos:end="95:13">if <condition pos:start="79:16" pos:end="79:32">(<expr pos:start="79:17" pos:end="79:31"><operator pos:start="79:17" pos:end="79:17">(</operator><name pos:start="79:18" pos:end="79:21">base</name> <operator pos:start="79:23" pos:end="79:23">&amp;</operator> <literal type="number" pos:start="79:25" pos:end="79:25">7</literal><operator pos:start="79:26" pos:end="79:26">)</operator> <operator pos:start="79:28" pos:end="79:29">==</operator> <literal type="number" pos:start="79:31" pos:end="79:31">5</literal></expr>)</condition> <block pos:start="79:34" pos:end="95:13">{<block_content pos:start="81:17" pos:end="93:17">

                <expr_stmt pos:start="81:17" pos:end="81:26"><expr pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:20">base</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <operator pos:start="81:24" pos:end="81:24">-</operator><literal type="number" pos:start="81:25" pos:end="81:25">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:57"><expr pos:start="83:17" pos:end="83:56"><name pos:start="83:17" pos:end="83:20">disp</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <operator pos:start="83:24" pos:end="83:24">(</operator><name pos:start="83:25" pos:end="83:31">int32_t</name><operator pos:start="83:32" pos:end="83:32">)</operator><call pos:start="83:33" pos:end="83:56"><name pos:start="83:33" pos:end="83:44">cpu_ldl_code</name><argument_list pos:start="83:45" pos:end="83:56">(<argument pos:start="83:46" pos:end="83:48"><expr pos:start="83:46" pos:end="83:48"><name pos:start="83:46" pos:end="83:48">env</name></expr></argument>, <argument pos:start="83:51" pos:end="83:55"><expr pos:start="83:51" pos:end="83:55"><name pos:start="83:51" pos:end="83:55"><name pos:start="83:51" pos:end="83:51">s</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:55">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:27"><expr pos:start="85:17" pos:end="85:26"><name pos:start="85:17" pos:end="85:21"><name pos:start="85:17" pos:end="85:17">s</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:21">pc</name></name> <operator pos:start="85:23" pos:end="85:24">+=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">4</literal></expr>;</expr_stmt>

                <if_stmt pos:start="87:17" pos:end="93:17"><if pos:start="87:17" pos:end="93:17">if <condition pos:start="87:20" pos:end="87:42">(<expr pos:start="87:21" pos:end="87:41"><call pos:start="87:21" pos:end="87:29"><name pos:start="87:21" pos:end="87:26">CODE64</name><argument_list pos:start="87:27" pos:end="87:29">(<argument pos:start="87:28" pos:end="87:28"><expr pos:start="87:28" pos:end="87:28"><name pos:start="87:28" pos:end="87:28">s</name></expr></argument>)</argument_list></call> <operator pos:start="87:31" pos:end="87:32">&amp;&amp;</operator> <operator pos:start="87:34" pos:end="87:34">!</operator><name pos:start="87:35" pos:end="87:41">havesib</name></expr>)</condition> <block pos:start="87:44" pos:end="93:17">{<block_content pos:start="89:21" pos:end="91:50">

                    <expr_stmt pos:start="89:21" pos:end="89:30"><expr pos:start="89:21" pos:end="89:29"><name pos:start="89:21" pos:end="89:24">base</name> <operator pos:start="89:26" pos:end="89:26">=</operator> <operator pos:start="89:28" pos:end="89:28">-</operator><literal type="number" pos:start="89:29" pos:end="89:29">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:50"><expr pos:start="91:21" pos:end="91:49"><name pos:start="91:21" pos:end="91:24">disp</name> <operator pos:start="91:26" pos:end="91:27">+=</operator> <name pos:start="91:29" pos:end="91:33"><name pos:start="91:29" pos:end="91:29">s</name><operator pos:start="91:30" pos:end="91:31">-&gt;</operator><name pos:start="91:32" pos:end="91:33">pc</name></name> <operator pos:start="91:35" pos:end="91:35">+</operator> <name pos:start="91:37" pos:end="91:49"><name pos:start="91:37" pos:end="91:37">s</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:49">rip_offset</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:15">case <expr pos:start="99:14" pos:end="99:14"><literal type="number" pos:start="99:14" pos:end="99:14">1</literal></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:55"><expr pos:start="101:13" pos:end="101:54"><name pos:start="101:13" pos:end="101:16">disp</name> <operator pos:start="101:18" pos:end="101:18">=</operator> <operator pos:start="101:20" pos:end="101:20">(</operator><name pos:start="101:21" pos:end="101:26">int8_t</name><operator pos:start="101:27" pos:end="101:27">)</operator><call pos:start="101:28" pos:end="101:54"><name pos:start="101:28" pos:end="101:40">cpu_ldub_code</name><argument_list pos:start="101:41" pos:end="101:54">(<argument pos:start="101:42" pos:end="101:44"><expr pos:start="101:42" pos:end="101:44"><name pos:start="101:42" pos:end="101:44">env</name></expr></argument>, <argument pos:start="101:47" pos:end="101:53"><expr pos:start="101:47" pos:end="101:53"><name pos:start="101:47" pos:end="101:51"><name pos:start="101:47" pos:end="101:47">s</name><operator pos:start="101:48" pos:end="101:49">-&gt;</operator><name pos:start="101:50" pos:end="101:51">pc</name></name><operator pos:start="101:52" pos:end="101:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        <default pos:start="105:9" pos:end="105:16">default:</default>

        <case pos:start="107:9" pos:end="107:15">case <expr pos:start="107:14" pos:end="107:14"><literal type="number" pos:start="107:14" pos:end="107:14">2</literal></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:53"><expr pos:start="109:13" pos:end="109:52"><name pos:start="109:13" pos:end="109:16">disp</name> <operator pos:start="109:18" pos:end="109:18">=</operator> <operator pos:start="109:20" pos:end="109:20">(</operator><name pos:start="109:21" pos:end="109:27">int32_t</name><operator pos:start="109:28" pos:end="109:28">)</operator><call pos:start="109:29" pos:end="109:52"><name pos:start="109:29" pos:end="109:40">cpu_ldl_code</name><argument_list pos:start="109:41" pos:end="109:52">(<argument pos:start="109:42" pos:end="109:44"><expr pos:start="109:42" pos:end="109:44"><name pos:start="109:42" pos:end="109:44">env</name></expr></argument>, <argument pos:start="109:47" pos:end="109:51"><expr pos:start="109:47" pos:end="109:51"><name pos:start="109:47" pos:end="109:51"><name pos:start="109:47" pos:end="109:47">s</name><operator pos:start="109:48" pos:end="109:49">-&gt;</operator><name pos:start="109:50" pos:end="109:51">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:23"><expr pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:17"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:17">pc</name></name> <operator pos:start="111:19" pos:end="111:20">+=</operator> <literal type="number" pos:start="111:22" pos:end="111:22">4</literal></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="119:9" pos:end="119:50">/* For correct popl handling with esp.  */</comment>

        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:46">(<expr pos:start="121:13" pos:end="121:45"><name pos:start="121:13" pos:end="121:16">base</name> <operator pos:start="121:18" pos:end="121:19">==</operator> <name pos:start="121:21" pos:end="121:25">R_ESP</name> <operator pos:start="121:27" pos:end="121:28">&amp;&amp;</operator> <name pos:start="121:30" pos:end="121:45"><name pos:start="121:30" pos:end="121:30">s</name><operator pos:start="121:31" pos:end="121:32">-&gt;</operator><name pos:start="121:33" pos:end="121:45">popl_esp_hack</name></name></expr>)</condition> <block pos:start="121:48" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:37">

            <expr_stmt pos:start="123:13" pos:end="123:37"><expr pos:start="123:13" pos:end="123:36"><name pos:start="123:13" pos:end="123:16">disp</name> <operator pos:start="123:18" pos:end="123:19">+=</operator> <name pos:start="123:21" pos:end="123:36"><name pos:start="123:21" pos:end="123:21">s</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:36">popl_esp_hack</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="127:9" pos:end="131:9"><if pos:start="127:9" pos:end="131:9">if <condition pos:start="127:12" pos:end="127:43">(<expr pos:start="127:13" pos:end="127:42"><name pos:start="127:13" pos:end="127:16">base</name> <operator pos:start="127:18" pos:end="127:19">==</operator> <name pos:start="127:21" pos:end="127:25">R_EBP</name> <operator pos:start="127:27" pos:end="127:28">||</operator> <name pos:start="127:30" pos:end="127:33">base</name> <operator pos:start="127:35" pos:end="127:36">==</operator> <name pos:start="127:38" pos:end="127:42">R_ESP</name></expr>)</condition> <block pos:start="127:45" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:27">

            <expr_stmt pos:start="129:13" pos:end="129:27"><expr pos:start="129:13" pos:end="129:26"><name pos:start="129:13" pos:end="129:19">def_seg</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:26">R_SS</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>



    <case pos:start="137:5" pos:end="137:15">case <expr pos:start="137:10" pos:end="137:14"><name pos:start="137:10" pos:end="137:14">MO_16</name></expr>:</case>

        <if_stmt pos:start="139:9" pos:end="163:9"><if pos:start="139:9" pos:end="153:9">if <condition pos:start="139:12" pos:end="139:21">(<expr pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:15">mod</name> <operator pos:start="139:17" pos:end="139:18">==</operator> <literal type="number" pos:start="139:20" pos:end="139:20">0</literal></expr>)</condition> <block pos:start="139:23" pos:end="153:9">{<block_content pos:start="141:13" pos:end="151:13">

            <if_stmt pos:start="141:13" pos:end="151:13"><if pos:start="141:13" pos:end="151:13">if <condition pos:start="141:16" pos:end="141:24">(<expr pos:start="141:17" pos:end="141:23"><name pos:start="141:17" pos:end="141:18">rm</name> <operator pos:start="141:20" pos:end="141:21">==</operator> <literal type="number" pos:start="141:23" pos:end="141:23">6</literal></expr>)</condition> <block pos:start="141:26" pos:end="151:13">{<block_content pos:start="143:17" pos:end="149:22">

                <expr_stmt pos:start="143:17" pos:end="143:26"><expr pos:start="143:17" pos:end="143:25"><name pos:start="143:17" pos:end="143:20">base</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <operator pos:start="143:24" pos:end="143:24">-</operator><literal type="number" pos:start="143:25" pos:end="143:25">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:49"><expr pos:start="145:17" pos:end="145:48"><name pos:start="145:17" pos:end="145:20">disp</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <call pos:start="145:24" pos:end="145:48"><name pos:start="145:24" pos:end="145:36">cpu_lduw_code</name><argument_list pos:start="145:37" pos:end="145:48">(<argument pos:start="145:38" pos:end="145:40"><expr pos:start="145:38" pos:end="145:40"><name pos:start="145:38" pos:end="145:40">env</name></expr></argument>, <argument pos:start="145:43" pos:end="145:47"><expr pos:start="145:43" pos:end="145:47"><name pos:start="145:43" pos:end="145:47"><name pos:start="145:43" pos:end="145:43">s</name><operator pos:start="145:44" pos:end="145:45">-&gt;</operator><name pos:start="145:46" pos:end="145:47">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:27"><expr pos:start="147:17" pos:end="147:26"><name pos:start="147:17" pos:end="147:21"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:21">pc</name></name> <operator pos:start="147:23" pos:end="147:24">+=</operator> <literal type="number" pos:start="147:26" pos:end="147:26">2</literal></expr>;</expr_stmt>

                <break pos:start="149:17" pos:end="149:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="153:11" pos:end="157:9">else if <condition pos:start="153:19" pos:end="153:28">(<expr pos:start="153:20" pos:end="153:27"><name pos:start="153:20" pos:end="153:22">mod</name> <operator pos:start="153:24" pos:end="153:25">==</operator> <literal type="number" pos:start="153:27" pos:end="153:27">1</literal></expr>)</condition> <block pos:start="153:30" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:55">

            <expr_stmt pos:start="155:13" pos:end="155:55"><expr pos:start="155:13" pos:end="155:54"><name pos:start="155:13" pos:end="155:16">disp</name> <operator pos:start="155:18" pos:end="155:18">=</operator> <operator pos:start="155:20" pos:end="155:20">(</operator><name pos:start="155:21" pos:end="155:26">int8_t</name><operator pos:start="155:27" pos:end="155:27">)</operator><call pos:start="155:28" pos:end="155:54"><name pos:start="155:28" pos:end="155:40">cpu_ldub_code</name><argument_list pos:start="155:41" pos:end="155:54">(<argument pos:start="155:42" pos:end="155:44"><expr pos:start="155:42" pos:end="155:44"><name pos:start="155:42" pos:end="155:44">env</name></expr></argument>, <argument pos:start="155:47" pos:end="155:53"><expr pos:start="155:47" pos:end="155:53"><name pos:start="155:47" pos:end="155:51"><name pos:start="155:47" pos:end="155:47">s</name><operator pos:start="155:48" pos:end="155:49">-&gt;</operator><name pos:start="155:50" pos:end="155:51">pc</name></name><operator pos:start="155:52" pos:end="155:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="163:9">else <block pos:start="157:16" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:23">

            <expr_stmt pos:start="159:13" pos:end="159:54"><expr pos:start="159:13" pos:end="159:53"><name pos:start="159:13" pos:end="159:16">disp</name> <operator pos:start="159:18" pos:end="159:18">=</operator> <operator pos:start="159:20" pos:end="159:20">(</operator><name pos:start="159:21" pos:end="159:27">int16_t</name><operator pos:start="159:28" pos:end="159:28">)</operator><call pos:start="159:29" pos:end="159:53"><name pos:start="159:29" pos:end="159:41">cpu_lduw_code</name><argument_list pos:start="159:42" pos:end="159:53">(<argument pos:start="159:43" pos:end="159:45"><expr pos:start="159:43" pos:end="159:45"><name pos:start="159:43" pos:end="159:45">env</name></expr></argument>, <argument pos:start="159:48" pos:end="159:52"><expr pos:start="159:48" pos:end="159:52"><name pos:start="159:48" pos:end="159:52"><name pos:start="159:48" pos:end="159:48">s</name><operator pos:start="159:49" pos:end="159:50">-&gt;</operator><name pos:start="159:51" pos:end="159:52">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:23"><expr pos:start="161:13" pos:end="161:22"><name pos:start="161:13" pos:end="161:17"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:17">pc</name></name> <operator pos:start="161:19" pos:end="161:20">+=</operator> <literal type="number" pos:start="161:22" pos:end="161:22">2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="167:9" pos:end="233:9">switch <condition pos:start="167:16" pos:end="167:19">(<expr pos:start="167:17" pos:end="167:18"><name pos:start="167:17" pos:end="167:18">rm</name></expr>)</condition> <block pos:start="167:21" pos:end="233:9">{<block_content pos:start="169:9" pos:end="231:18">

        <case pos:start="169:9" pos:end="169:15">case <expr pos:start="169:14" pos:end="169:14"><literal type="number" pos:start="169:14" pos:end="169:14">0</literal></expr>:</case>

            <expr_stmt pos:start="171:13" pos:end="171:25"><expr pos:start="171:13" pos:end="171:24"><name pos:start="171:13" pos:end="171:16">base</name> <operator pos:start="171:18" pos:end="171:18">=</operator> <name pos:start="171:20" pos:end="171:24">R_EBX</name></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:26"><expr pos:start="173:13" pos:end="173:25"><name pos:start="173:13" pos:end="173:17">index</name> <operator pos:start="173:19" pos:end="173:19">=</operator> <name pos:start="173:21" pos:end="173:25">R_ESI</name></expr>;</expr_stmt>

            <break pos:start="175:13" pos:end="175:18">break;</break>

        <case pos:start="177:9" pos:end="177:15">case <expr pos:start="177:14" pos:end="177:14"><literal type="number" pos:start="177:14" pos:end="177:14">1</literal></expr>:</case>

            <expr_stmt pos:start="179:13" pos:end="179:25"><expr pos:start="179:13" pos:end="179:24"><name pos:start="179:13" pos:end="179:16">base</name> <operator pos:start="179:18" pos:end="179:18">=</operator> <name pos:start="179:20" pos:end="179:24">R_EBX</name></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:26"><expr pos:start="181:13" pos:end="181:25"><name pos:start="181:13" pos:end="181:17">index</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <name pos:start="181:21" pos:end="181:25">R_EDI</name></expr>;</expr_stmt>

            <break pos:start="183:13" pos:end="183:18">break;</break>

        <case pos:start="185:9" pos:end="185:15">case <expr pos:start="185:14" pos:end="185:14"><literal type="number" pos:start="185:14" pos:end="185:14">2</literal></expr>:</case>

            <expr_stmt pos:start="187:13" pos:end="187:25"><expr pos:start="187:13" pos:end="187:24"><name pos:start="187:13" pos:end="187:16">base</name> <operator pos:start="187:18" pos:end="187:18">=</operator> <name pos:start="187:20" pos:end="187:24">R_EBP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:26"><expr pos:start="189:13" pos:end="189:25"><name pos:start="189:13" pos:end="189:17">index</name> <operator pos:start="189:19" pos:end="189:19">=</operator> <name pos:start="189:21" pos:end="189:25">R_ESI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:27"><expr pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:19">def_seg</name> <operator pos:start="191:21" pos:end="191:21">=</operator> <name pos:start="191:23" pos:end="191:26">R_SS</name></expr>;</expr_stmt>

            <break pos:start="193:13" pos:end="193:18">break;</break>

        <case pos:start="195:9" pos:end="195:15">case <expr pos:start="195:14" pos:end="195:14"><literal type="number" pos:start="195:14" pos:end="195:14">3</literal></expr>:</case>

            <expr_stmt pos:start="197:13" pos:end="197:25"><expr pos:start="197:13" pos:end="197:24"><name pos:start="197:13" pos:end="197:16">base</name> <operator pos:start="197:18" pos:end="197:18">=</operator> <name pos:start="197:20" pos:end="197:24">R_EBP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:26"><expr pos:start="199:13" pos:end="199:25"><name pos:start="199:13" pos:end="199:17">index</name> <operator pos:start="199:19" pos:end="199:19">=</operator> <name pos:start="199:21" pos:end="199:25">R_EDI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:27"><expr pos:start="201:13" pos:end="201:26"><name pos:start="201:13" pos:end="201:19">def_seg</name> <operator pos:start="201:21" pos:end="201:21">=</operator> <name pos:start="201:23" pos:end="201:26">R_SS</name></expr>;</expr_stmt>

            <break pos:start="203:13" pos:end="203:18">break;</break>

        <case pos:start="205:9" pos:end="205:15">case <expr pos:start="205:14" pos:end="205:14"><literal type="number" pos:start="205:14" pos:end="205:14">4</literal></expr>:</case>

            <expr_stmt pos:start="207:13" pos:end="207:25"><expr pos:start="207:13" pos:end="207:24"><name pos:start="207:13" pos:end="207:16">base</name> <operator pos:start="207:18" pos:end="207:18">=</operator> <name pos:start="207:20" pos:end="207:24">R_ESI</name></expr>;</expr_stmt>

            <break pos:start="209:13" pos:end="209:18">break;</break>

        <case pos:start="211:9" pos:end="211:15">case <expr pos:start="211:14" pos:end="211:14"><literal type="number" pos:start="211:14" pos:end="211:14">5</literal></expr>:</case>

            <expr_stmt pos:start="213:13" pos:end="213:25"><expr pos:start="213:13" pos:end="213:24"><name pos:start="213:13" pos:end="213:16">base</name> <operator pos:start="213:18" pos:end="213:18">=</operator> <name pos:start="213:20" pos:end="213:24">R_EDI</name></expr>;</expr_stmt>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        <case pos:start="217:9" pos:end="217:15">case <expr pos:start="217:14" pos:end="217:14"><literal type="number" pos:start="217:14" pos:end="217:14">6</literal></expr>:</case>

            <expr_stmt pos:start="219:13" pos:end="219:25"><expr pos:start="219:13" pos:end="219:24"><name pos:start="219:13" pos:end="219:16">base</name> <operator pos:start="219:18" pos:end="219:18">=</operator> <name pos:start="219:20" pos:end="219:24">R_EBP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:27"><expr pos:start="221:13" pos:end="221:26"><name pos:start="221:13" pos:end="221:19">def_seg</name> <operator pos:start="221:21" pos:end="221:21">=</operator> <name pos:start="221:23" pos:end="221:26">R_SS</name></expr>;</expr_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        <default pos:start="225:9" pos:end="225:16">default:</default>

        <case pos:start="227:9" pos:end="227:15">case <expr pos:start="227:14" pos:end="227:14"><literal type="number" pos:start="227:14" pos:end="227:14">7</literal></expr>:</case>

            <expr_stmt pos:start="229:13" pos:end="229:25"><expr pos:start="229:13" pos:end="229:24"><name pos:start="229:13" pos:end="229:16">base</name> <operator pos:start="229:18" pos:end="229:18">=</operator> <name pos:start="229:20" pos:end="229:24">R_EBX</name></expr>;</expr_stmt>

            <break pos:start="231:13" pos:end="231:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="235:9" pos:end="235:14">break;</break>



    <default pos:start="239:5" pos:end="239:12">default:</default>

        <expr_stmt pos:start="241:9" pos:end="241:20"><expr pos:start="241:9" pos:end="241:19"><call pos:start="241:9" pos:end="241:19"><name pos:start="241:9" pos:end="241:17">tcg_abort</name><argument_list pos:start="241:18" pos:end="241:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



 <label pos:start="247:2" pos:end="247:6"><name pos:start="247:2" pos:end="247:5">done</name>:</label>

    <return pos:start="249:5" pos:end="249:63">return <expr pos:start="249:12" pos:end="249:62"><operator pos:start="249:12" pos:end="249:12">(</operator><name pos:start="249:13" pos:end="249:24">AddressParts</name><operator pos:start="249:25" pos:end="249:25">)</operator><block pos:start="249:26" pos:end="249:62">{ <expr pos:start="249:28" pos:end="249:34"><name pos:start="249:28" pos:end="249:34">def_seg</name></expr>, <expr pos:start="249:37" pos:end="249:40"><name pos:start="249:37" pos:end="249:40">base</name></expr>, <expr pos:start="249:43" pos:end="249:47"><name pos:start="249:43" pos:end="249:47">index</name></expr>, <expr pos:start="249:50" pos:end="249:54"><name pos:start="249:50" pos:end="249:54">scale</name></expr>, <expr pos:start="249:57" pos:end="249:60"><name pos:start="249:57" pos:end="249:60">disp</name></expr> }</block></expr>;</return>

</block_content>}</block></function>
</unit>
