<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25096.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">avio_read_partial</name><parameter_list pos:start="1:22" pos:end="1:67">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:33">AVIOContext</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">s</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:56"><decl pos:start="1:39" pos:end="1:56"><type pos:start="1:39" pos:end="1:56"><name pos:start="1:39" pos:end="1:46">unsigned</name> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">buf</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:66"><decl pos:start="1:59" pos:end="1:66"><type pos:start="1:59" pos:end="1:66"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:66">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:15">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">len</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:18"><if pos:start="9:5" pos:end="11:18">if <condition pos:start="9:8" pos:end="9:17">(<expr pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:12">size</name> <operator pos:start="9:14" pos:end="9:14">&lt;</operator> <literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:18"><block_content pos:start="11:9" pos:end="11:18">

        <return pos:start="11:9" pos:end="11:18">return <expr pos:start="11:16" pos:end="11:17"><operator pos:start="11:16" pos:end="11:16">-</operator><literal type="number" pos:start="11:17" pos:end="11:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="15:5" pos:end="25:5"><if pos:start="15:5" pos:end="25:5">if <condition pos:start="15:8" pos:end="15:40">(<expr pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:22">read_packet</name></name> <operator pos:start="15:24" pos:end="15:25">&amp;&amp;</operator> <name pos:start="15:27" pos:end="15:39"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:39">write_flag</name></name></expr>)</condition> <block pos:start="15:42" pos:end="25:5">{<block_content pos:start="17:9" pos:end="23:19">

        <expr_stmt pos:start="17:9" pos:end="17:51"><expr pos:start="17:9" pos:end="17:50"><name pos:start="17:9" pos:end="17:11">len</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:50"><name pos:start="17:15" pos:end="17:28"><name pos:start="17:15" pos:end="17:15">s</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:28">read_packet</name></name><argument_list pos:start="17:29" pos:end="17:50">(<argument pos:start="17:30" pos:end="17:38"><expr pos:start="17:30" pos:end="17:38"><name pos:start="17:30" pos:end="17:38"><name pos:start="17:30" pos:end="17:30">s</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:38">opaque</name></name></expr></argument>, <argument pos:start="17:41" pos:end="17:43"><expr pos:start="17:41" pos:end="17:43"><name pos:start="17:41" pos:end="17:43">buf</name></expr></argument>, <argument pos:start="17:46" pos:end="17:49"><expr pos:start="17:46" pos:end="17:49"><name pos:start="17:46" pos:end="17:49">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="21:26"><if pos:start="19:9" pos:end="21:26">if <condition pos:start="19:12" pos:end="19:20">(<expr pos:start="19:13" pos:end="19:19"><name pos:start="19:13" pos:end="19:15">len</name> <operator pos:start="19:17" pos:end="19:17">&gt;</operator> <literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:26"><block_content pos:start="21:13" pos:end="21:26">

            <expr_stmt pos:start="21:13" pos:end="21:26"><expr pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:18">pos</name></name> <operator pos:start="21:20" pos:end="21:21">+=</operator> <name pos:start="21:23" pos:end="21:25">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="23:9" pos:end="23:19">return <expr pos:start="23:16" pos:end="23:18"><name pos:start="23:16" pos:end="23:18">len</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:7">len</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:20"><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:20">buf_end</name></name> <operator pos:start="29:22" pos:end="29:22">-</operator> <name pos:start="29:24" pos:end="29:33"><name pos:start="29:24" pos:end="29:24">s</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:33">buf_ptr</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="51:5"><if pos:start="31:5" pos:end="51:5">if <condition pos:start="31:8" pos:end="31:17">(<expr pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:11">len</name> <operator pos:start="31:13" pos:end="31:14">==</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>)</condition> <block pos:start="31:19" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:38">

        <comment type="block" pos:start="33:9" pos:end="43:11">/* Reset the buf_end pointer to the start of the buffer, to make sure

         * the fill_buffer call tries to read as much data as fits into the

         * full buffer, instead of just what space is left after buf_end.

         * This avoids returning partial packets at the end of the buffer,

         * for packet based inputs.

         */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:44"><expr pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:18">buf_end</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:31"><name pos:start="45:22" pos:end="45:22">s</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:31">buf_ptr</name></name> <operator pos:start="45:33" pos:end="45:33">=</operator> <name pos:start="45:35" pos:end="45:43"><name pos:start="45:35" pos:end="45:35">s</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:43">buffer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><call pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:19">fill_buffer</name><argument_list pos:start="47:20" pos:end="47:22">(<argument pos:start="47:21" pos:end="47:21"><expr pos:start="47:21" pos:end="47:21"><name pos:start="47:21" pos:end="47:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:38"><expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:11">len</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <name pos:start="49:15" pos:end="49:24"><name pos:start="49:15" pos:end="49:15">s</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:24">buf_end</name></name> <operator pos:start="49:26" pos:end="49:26">-</operator> <name pos:start="49:28" pos:end="49:37"><name pos:start="49:28" pos:end="49:28">s</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:37">buf_ptr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="55:19"><if pos:start="53:5" pos:end="55:19">if <condition pos:start="53:8" pos:end="53:19">(<expr pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:11">len</name> <operator pos:start="53:13" pos:end="53:13">&gt;</operator> <name pos:start="53:15" pos:end="53:18">size</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:19"><block_content pos:start="55:9" pos:end="55:19">

        <expr_stmt pos:start="55:9" pos:end="55:19"><expr pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:11">len</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:18">size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><call pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:10">memcpy</name><argument_list pos:start="57:11" pos:end="57:32">(<argument pos:start="57:12" pos:end="57:14"><expr pos:start="57:12" pos:end="57:14"><name pos:start="57:12" pos:end="57:14">buf</name></expr></argument>, <argument pos:start="57:17" pos:end="57:26"><expr pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:26">buf_ptr</name></name></expr></argument>, <argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:31">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:22"><expr pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:14"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:14">buf_ptr</name></name> <operator pos:start="59:16" pos:end="59:17">+=</operator> <name pos:start="59:19" pos:end="59:21">len</name></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:13">(<expr pos:start="61:9" pos:end="61:12"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:12">len</name></expr>)</condition> <block pos:start="61:15" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:46">

        <if_stmt pos:start="63:9" pos:end="63:43"><if pos:start="63:9" pos:end="63:43">if <condition pos:start="63:12" pos:end="63:21">(<expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:20">error</name></name></expr>)</condition><block type="pseudo" pos:start="63:28" pos:end="63:43"><block_content pos:start="63:28" pos:end="63:43">      <return pos:start="63:28" pos:end="63:43">return <expr pos:start="63:35" pos:end="63:42"><name pos:start="63:35" pos:end="63:42"><name pos:start="63:35" pos:end="63:35">s</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:42">error</name></name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="65:46"><if pos:start="65:9" pos:end="65:46">if <condition pos:start="65:12" pos:end="65:25">(<expr pos:start="65:13" pos:end="65:24"><call pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:21">avio_feof</name><argument_list pos:start="65:22" pos:end="65:24">(<argument pos:start="65:23" pos:end="65:23"><expr pos:start="65:23" pos:end="65:23"><name pos:start="65:23" pos:end="65:23">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="65:28" pos:end="65:46"><block_content pos:start="65:28" pos:end="65:46">  <return pos:start="65:28" pos:end="65:46">return <expr pos:start="65:35" pos:end="65:45"><name pos:start="65:35" pos:end="65:45">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="69:5" pos:end="69:15">return <expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
