<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5675.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:15">av_file_map</name><parameter_list pos:start="1:16" pos:end="3:46">(<parameter pos:start="1:17" pos:end="1:36"><decl pos:start="1:17" pos:end="1:36"><type pos:start="1:17" pos:end="1:36"><specifier pos:start="1:17" pos:end="1:21">const</specifier> <name pos:start="1:23" pos:end="1:26">char</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:36">filename</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:54"><decl pos:start="1:39" pos:end="1:54"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:45">uint8_t</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier><modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">bufptr</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:62">size_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">size</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:30"><decl pos:start="3:17" pos:end="3:30"><type pos:start="3:17" pos:end="3:30"><name pos:start="3:17" pos:end="3:19">int</name></type> <name pos:start="3:21" pos:end="3:30">log_offset</name></decl></parameter>, <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:36">void</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:45">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="157:1">{<block_content pos:start="7:5" pos:end="155:13">

    <decl_stmt pos:start="7:5" pos:end="7:79"><decl pos:start="7:5" pos:end="7:78"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18">FileLogContext</name></type> <name pos:start="7:20" pos:end="7:31">file_log_ctx</name> <init pos:start="7:33" pos:end="7:78">= <expr pos:start="7:35" pos:end="7:78"><block pos:start="7:35" pos:end="7:78">{ <expr pos:start="7:37" pos:end="7:55"><operator pos:start="7:37" pos:end="7:37">&amp;</operator><name pos:start="7:38" pos:end="7:55">file_log_ctx_class</name></expr>, <expr pos:start="7:58" pos:end="7:67"><name pos:start="7:58" pos:end="7:67">log_offset</name></expr>, <expr pos:start="7:70" pos:end="7:76"><name pos:start="7:70" pos:end="7:76">log_ctx</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">err</name></decl>, <decl pos:start="9:14" pos:end="9:42"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:15">fd</name> <init pos:start="9:17" pos:end="9:42">= <expr pos:start="9:19" pos:end="9:42"><call pos:start="9:19" pos:end="9:42"><name pos:start="9:19" pos:end="9:22">open</name><argument_list pos:start="9:23" pos:end="9:42">(<argument pos:start="9:24" pos:end="9:31"><expr pos:start="9:24" pos:end="9:31"><name pos:start="9:24" pos:end="9:31">filename</name></expr></argument>, <argument pos:start="9:34" pos:end="9:41"><expr pos:start="9:34" pos:end="9:41"><name pos:start="9:34" pos:end="9:41">O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:15">stat</name></name></type> <name pos:start="11:17" pos:end="11:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:13">av_unused</name> <name pos:start="13:15" pos:end="13:18">void</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:23">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">off_t</name></type> <name pos:start="15:11" pos:end="15:18">off_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:20"><name pos:start="17:10" pos:end="17:15">errbuf</name><index pos:start="17:16" pos:end="17:20">[<expr pos:start="17:17" pos:end="17:19"><literal type="number" pos:start="17:17" pos:end="17:19">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:19"><expr pos:start="19:5" pos:end="19:18"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:11">bufptr</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:18">NULL</name></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="33:5"><if pos:start="23:5" pos:end="33:5">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:10">fd</name> <operator pos:start="23:12" pos:end="23:12">&lt;</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>)</condition> <block pos:start="23:17" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:19">

        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:11">err</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:28"><name pos:start="25:15" pos:end="25:21">AVERROR</name><argument_list pos:start="25:22" pos:end="25:28">(<argument pos:start="25:23" pos:end="25:27"><expr pos:start="25:23" pos:end="25:27"><name pos:start="25:23" pos:end="25:27">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:49"><expr pos:start="27:9" pos:end="27:48"><call pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:19">av_strerror</name><argument_list pos:start="27:20" pos:end="27:48">(<argument pos:start="27:21" pos:end="27:23"><expr pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">err</name></expr></argument>, <argument pos:start="27:26" pos:end="27:31"><expr pos:start="27:26" pos:end="27:31"><name pos:start="27:26" pos:end="27:31">errbuf</name></expr></argument>, <argument pos:start="27:34" pos:end="27:47"><expr pos:start="27:34" pos:end="27:47"><sizeof pos:start="27:34" pos:end="27:47">sizeof<argument_list pos:start="27:40" pos:end="27:47">(<argument pos:start="27:41" pos:end="27:46"><expr pos:start="27:41" pos:end="27:46"><name pos:start="27:41" pos:end="27:46">errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:93"><expr pos:start="29:9" pos:end="29:92"><call pos:start="29:9" pos:end="29:92"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:92">(<argument pos:start="29:16" pos:end="29:28"><expr pos:start="29:16" pos:end="29:28"><operator pos:start="29:16" pos:end="29:16">&amp;</operator><name pos:start="29:17" pos:end="29:28">file_log_ctx</name></expr></argument>, <argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:45" pos:end="29:73"><expr pos:start="29:45" pos:end="29:73"><literal type="string" pos:start="29:45" pos:end="29:73">"Cannot read file '%s': %s\n"</literal></expr></argument>, <argument pos:start="29:76" pos:end="29:83"><expr pos:start="29:76" pos:end="29:83"><name pos:start="29:76" pos:end="29:83">filename</name></expr></argument>, <argument pos:start="29:86" pos:end="29:91"><expr pos:start="29:86" pos:end="29:91"><name pos:start="29:86" pos:end="29:91">errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:19">return <expr pos:start="31:16" pos:end="31:18"><name pos:start="31:16" pos:end="31:18">err</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="49:5">if <condition pos:start="37:8" pos:end="37:27">(<expr pos:start="37:9" pos:end="37:26"><call pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:13">fstat</name><argument_list pos:start="37:14" pos:end="37:22">(<argument pos:start="37:15" pos:end="37:16"><expr pos:start="37:15" pos:end="37:16"><name pos:start="37:15" pos:end="37:16">fd</name></expr></argument>, <argument pos:start="37:19" pos:end="37:21"><expr pos:start="37:19" pos:end="37:21"><operator pos:start="37:19" pos:end="37:19">&amp;</operator><name pos:start="37:20" pos:end="37:21">st</name></expr></argument>)</argument_list></call> <operator pos:start="37:24" pos:end="37:24">&lt;</operator> <literal type="number" pos:start="37:26" pos:end="37:26">0</literal></expr>)</condition> <block pos:start="37:29" pos:end="49:5">{<block_content pos:start="39:9" pos:end="47:19">

        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:11">err</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:28"><name pos:start="39:15" pos:end="39:21">AVERROR</name><argument_list pos:start="39:22" pos:end="39:28">(<argument pos:start="39:23" pos:end="39:27"><expr pos:start="39:23" pos:end="39:27"><name pos:start="39:23" pos:end="39:27">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:49"><expr pos:start="41:9" pos:end="41:48"><call pos:start="41:9" pos:end="41:48"><name pos:start="41:9" pos:end="41:19">av_strerror</name><argument_list pos:start="41:20" pos:end="41:48">(<argument pos:start="41:21" pos:end="41:23"><expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">err</name></expr></argument>, <argument pos:start="41:26" pos:end="41:31"><expr pos:start="41:26" pos:end="41:31"><name pos:start="41:26" pos:end="41:31">errbuf</name></expr></argument>, <argument pos:start="41:34" pos:end="41:47"><expr pos:start="41:34" pos:end="41:47"><sizeof pos:start="41:34" pos:end="41:47">sizeof<argument_list pos:start="41:40" pos:end="41:47">(<argument pos:start="41:41" pos:end="41:46"><expr pos:start="41:41" pos:end="41:46"><name pos:start="41:41" pos:end="41:46">errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:87"><expr pos:start="43:9" pos:end="43:86"><call pos:start="43:9" pos:end="43:86"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:86">(<argument pos:start="43:16" pos:end="43:28"><expr pos:start="43:16" pos:end="43:28"><operator pos:start="43:16" pos:end="43:16">&amp;</operator><name pos:start="43:17" pos:end="43:28">file_log_ctx</name></expr></argument>, <argument pos:start="43:31" pos:end="43:42"><expr pos:start="43:31" pos:end="43:42"><name pos:start="43:31" pos:end="43:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:45" pos:end="43:77"><expr pos:start="43:45" pos:end="43:77"><literal type="string" pos:start="43:45" pos:end="43:77">"Error occurred in fstat(): %s\n"</literal></expr></argument>, <argument pos:start="43:80" pos:end="43:85"><expr pos:start="43:80" pos:end="43:85"><name pos:start="43:80" pos:end="43:85">errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:18"><expr pos:start="45:9" pos:end="45:17"><call pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:13">close</name><argument_list pos:start="45:14" pos:end="45:17">(<argument pos:start="45:15" pos:end="45:16"><expr pos:start="45:15" pos:end="45:16"><name pos:start="45:15" pos:end="45:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:19">return <expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">err</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:26"><expr pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:12">off_size</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <name pos:start="53:16" pos:end="53:25"><name pos:start="53:16" pos:end="53:17">st</name><operator pos:start="53:18" pos:end="53:18">.</operator><name pos:start="53:19" pos:end="53:25">st_size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="55:28">(<expr pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:16">off_size</name> <operator pos:start="55:18" pos:end="55:18">&gt;</operator> <name pos:start="55:20" pos:end="55:27">SIZE_MAX</name></expr>)</condition> <block pos:start="55:30" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:31">

        <expr_stmt pos:start="57:9" pos:end="59:65"><expr pos:start="57:9" pos:end="59:64"><call pos:start="57:9" pos:end="59:64"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="59:64">(<argument pos:start="57:16" pos:end="57:28"><expr pos:start="57:16" pos:end="57:28"><operator pos:start="57:16" pos:end="57:16">&amp;</operator><name pos:start="57:17" pos:end="57:28">file_log_ctx</name></expr></argument>, <argument pos:start="57:31" pos:end="57:42"><expr pos:start="57:31" pos:end="57:42"><name pos:start="57:31" pos:end="57:42">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="59:16" pos:end="59:53"><expr pos:start="59:16" pos:end="59:53"><literal type="string" pos:start="59:16" pos:end="59:53">"File size for file '%s' is too big\n"</literal></expr></argument>, <argument pos:start="59:56" pos:end="59:63"><expr pos:start="59:56" pos:end="59:63"><name pos:start="59:56" pos:end="59:63">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:18"><expr pos:start="61:9" pos:end="61:17"><call pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:13">close</name><argument_list pos:start="61:14" pos:end="61:17">(<argument pos:start="61:15" pos:end="61:16"><expr pos:start="61:15" pos:end="61:16"><name pos:start="61:15" pos:end="61:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:31">return <expr pos:start="63:16" pos:end="63:30"><call pos:start="63:16" pos:end="63:30"><name pos:start="63:16" pos:end="63:22">AVERROR</name><argument_list pos:start="63:23" pos:end="63:30">(<argument pos:start="63:24" pos:end="63:29"><expr pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="72:0"><expr pos:start="67:5" pos:end="67:20"><operator pos:start="67:5" pos:end="67:5">*</operator><name pos:start="67:6" pos:end="67:9">size</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <name pos:start="67:13" pos:end="67:20">off_size</name></expr>;</expr_stmt>



<cpp:if pos:start="71:1" pos:end="71:13">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:13">HAVE_MMAP</name></expr></cpp:if>

    <expr_stmt pos:start="73:5" pos:end="73:70"><expr pos:start="73:5" pos:end="73:69"><name pos:start="73:5" pos:end="73:7">ptr</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:69"><name pos:start="73:11" pos:end="73:14">mmap</name><argument_list pos:start="73:15" pos:end="73:69">(<argument pos:start="73:16" pos:end="73:19"><expr pos:start="73:16" pos:end="73:19"><name pos:start="73:16" pos:end="73:19">NULL</name></expr></argument>, <argument pos:start="73:22" pos:end="73:26"><expr pos:start="73:22" pos:end="73:26"><operator pos:start="73:22" pos:end="73:22">*</operator><name pos:start="73:23" pos:end="73:26">size</name></expr></argument>, <argument pos:start="73:29" pos:end="73:48"><expr pos:start="73:29" pos:end="73:48"><name pos:start="73:29" pos:end="73:37">PROT_READ</name><operator pos:start="73:38" pos:end="73:38">|</operator><name pos:start="73:39" pos:end="73:48">PROT_WRITE</name></expr></argument>, <argument pos:start="73:51" pos:end="73:61"><expr pos:start="73:51" pos:end="73:61"><name pos:start="73:51" pos:end="73:61">MAP_PRIVATE</name></expr></argument>, <argument pos:start="73:64" pos:end="73:65"><expr pos:start="73:64" pos:end="73:65"><name pos:start="73:64" pos:end="73:65">fd</name></expr></argument>, <argument pos:start="73:68" pos:end="73:68"><expr pos:start="73:68" pos:end="73:68"><literal type="number" pos:start="73:68" pos:end="73:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="87:5"><if pos:start="75:5" pos:end="87:5">if <condition pos:start="75:8" pos:end="75:25">(<expr pos:start="75:9" pos:end="75:24"><operator pos:start="75:9" pos:end="75:9">(</operator><name pos:start="75:10" pos:end="75:12">int</name><operator pos:start="75:13" pos:end="75:13">)</operator><operator pos:start="75:14" pos:end="75:14">(</operator><name pos:start="75:15" pos:end="75:17">ptr</name><operator pos:start="75:18" pos:end="75:18">)</operator> <operator pos:start="75:20" pos:end="75:21">==</operator> <operator pos:start="75:23" pos:end="75:23">-</operator><literal type="number" pos:start="75:24" pos:end="75:24">1</literal></expr>)</condition> <block pos:start="75:27" pos:end="87:5">{<block_content pos:start="77:9" pos:end="85:19">

        <expr_stmt pos:start="77:9" pos:end="77:29"><expr pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:11">err</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:28"><name pos:start="77:15" pos:end="77:21">AVERROR</name><argument_list pos:start="77:22" pos:end="77:28">(<argument pos:start="77:23" pos:end="77:27"><expr pos:start="77:23" pos:end="77:27"><name pos:start="77:23" pos:end="77:27">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:49"><expr pos:start="79:9" pos:end="79:48"><call pos:start="79:9" pos:end="79:48"><name pos:start="79:9" pos:end="79:19">av_strerror</name><argument_list pos:start="79:20" pos:end="79:48">(<argument pos:start="79:21" pos:end="79:23"><expr pos:start="79:21" pos:end="79:23"><name pos:start="79:21" pos:end="79:23">err</name></expr></argument>, <argument pos:start="79:26" pos:end="79:31"><expr pos:start="79:26" pos:end="79:31"><name pos:start="79:26" pos:end="79:31">errbuf</name></expr></argument>, <argument pos:start="79:34" pos:end="79:47"><expr pos:start="79:34" pos:end="79:47"><sizeof pos:start="79:34" pos:end="79:47">sizeof<argument_list pos:start="79:40" pos:end="79:47">(<argument pos:start="79:41" pos:end="79:46"><expr pos:start="79:41" pos:end="79:46"><name pos:start="79:41" pos:end="79:46">errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:86"><expr pos:start="81:9" pos:end="81:85"><call pos:start="81:9" pos:end="81:85"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="81:85">(<argument pos:start="81:16" pos:end="81:28"><expr pos:start="81:16" pos:end="81:28"><operator pos:start="81:16" pos:end="81:16">&amp;</operator><name pos:start="81:17" pos:end="81:28">file_log_ctx</name></expr></argument>, <argument pos:start="81:31" pos:end="81:42"><expr pos:start="81:31" pos:end="81:42"><name pos:start="81:31" pos:end="81:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:45" pos:end="81:76"><expr pos:start="81:45" pos:end="81:76"><literal type="string" pos:start="81:45" pos:end="81:76">"Error occurred in mmap(): %s\n"</literal></expr></argument>, <argument pos:start="81:79" pos:end="81:84"><expr pos:start="81:79" pos:end="81:84"><name pos:start="81:79" pos:end="81:84">errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:18"><expr pos:start="83:9" pos:end="83:17"><call pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:13">close</name><argument_list pos:start="83:14" pos:end="83:17">(<argument pos:start="83:15" pos:end="83:16"><expr pos:start="83:15" pos:end="83:16"><name pos:start="83:15" pos:end="83:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:19">return <expr pos:start="85:16" pos:end="85:18"><name pos:start="85:16" pos:end="85:18">err</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="92:0"><expr pos:start="89:5" pos:end="89:17"><operator pos:start="89:5" pos:end="89:5">*</operator><name pos:start="89:6" pos:end="89:11">bufptr</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <name pos:start="89:15" pos:end="89:17">ptr</name></expr>;</expr_stmt>

<cpp:elif pos:start="91:1" pos:end="91:24">#<cpp:directive pos:start="91:2" pos:end="91:5">elif</cpp:directive> <expr pos:start="91:7" pos:end="91:24"><name pos:start="91:7" pos:end="91:24">HAVE_MAPVIEWOFFILE</name></expr></cpp:elif>

    <block pos:start="93:5" pos:end="134:0">{<block_content pos:start="95:9" pos:end="129:22">

        <decl_stmt pos:start="95:9" pos:end="95:51"><decl pos:start="95:9" pos:end="95:17"><type pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:14">HANDLE</name></type> <name pos:start="95:16" pos:end="95:17">mh</name></decl>, <decl pos:start="95:20" pos:end="95:50"><type ref="prev" pos:start="95:9" pos:end="95:14"/><name pos:start="95:20" pos:end="95:21">fh</name> <init pos:start="95:23" pos:end="95:50">= <expr pos:start="95:25" pos:end="95:50"><operator pos:start="95:25" pos:end="95:25">(</operator><name pos:start="95:26" pos:end="95:31">HANDLE</name><operator pos:start="95:32" pos:end="95:32">)</operator><call pos:start="95:33" pos:end="95:50"><name pos:start="95:33" pos:end="95:46">_get_osfhandle</name><argument_list pos:start="95:47" pos:end="95:50">(<argument pos:start="95:48" pos:end="95:49"><expr pos:start="95:48" pos:end="95:49"><name pos:start="95:48" pos:end="95:49">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:68"><expr pos:start="99:9" pos:end="99:67"><name pos:start="99:9" pos:end="99:10">mh</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <call pos:start="99:14" pos:end="99:67"><name pos:start="99:14" pos:end="99:30">CreateFileMapping</name><argument_list pos:start="99:31" pos:end="99:67">(<argument pos:start="99:32" pos:end="99:33"><expr pos:start="99:32" pos:end="99:33"><name pos:start="99:32" pos:end="99:33">fh</name></expr></argument>, <argument pos:start="99:36" pos:end="99:39"><expr pos:start="99:36" pos:end="99:39"><name pos:start="99:36" pos:end="99:39">NULL</name></expr></argument>, <argument pos:start="99:42" pos:end="99:54"><expr pos:start="99:42" pos:end="99:54"><name pos:start="99:42" pos:end="99:54">PAGE_READONLY</name></expr></argument>, <argument pos:start="99:57" pos:end="99:57"><expr pos:start="99:57" pos:end="99:57"><literal type="number" pos:start="99:57" pos:end="99:57">0</literal></expr></argument>, <argument pos:start="99:60" pos:end="99:60"><expr pos:start="99:60" pos:end="99:60"><literal type="number" pos:start="99:60" pos:end="99:60">0</literal></expr></argument>, <argument pos:start="99:63" pos:end="99:66"><expr pos:start="99:63" pos:end="99:66"><name pos:start="99:63" pos:end="99:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="109:9"><if pos:start="101:9" pos:end="109:9">if <condition pos:start="101:12" pos:end="101:16">(<expr pos:start="101:13" pos:end="101:15"><operator pos:start="101:13" pos:end="101:13">!</operator><name pos:start="101:14" pos:end="101:15">mh</name></expr>)</condition> <block pos:start="101:18" pos:end="109:9">{<block_content pos:start="103:13" pos:end="107:22">

            <expr_stmt pos:start="103:13" pos:end="103:91"><expr pos:start="103:13" pos:end="103:90"><call pos:start="103:13" pos:end="103:90"><name pos:start="103:13" pos:end="103:18">av_log</name><argument_list pos:start="103:19" pos:end="103:90">(<argument pos:start="103:20" pos:end="103:32"><expr pos:start="103:20" pos:end="103:32"><operator pos:start="103:20" pos:end="103:20">&amp;</operator><name pos:start="103:21" pos:end="103:32">file_log_ctx</name></expr></argument>, <argument pos:start="103:35" pos:end="103:46"><expr pos:start="103:35" pos:end="103:46"><name pos:start="103:35" pos:end="103:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:49" pos:end="103:89"><expr pos:start="103:49" pos:end="103:89"><literal type="string" pos:start="103:49" pos:end="103:89">"Error occurred in CreateFileMapping()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:22"><expr pos:start="105:13" pos:end="105:21"><call pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:17">close</name><argument_list pos:start="105:18" pos:end="105:21">(<argument pos:start="105:19" pos:end="105:20"><expr pos:start="105:19" pos:end="105:20"><name pos:start="105:19" pos:end="105:20">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:22">return <expr pos:start="107:20" pos:end="107:21"><operator pos:start="107:20" pos:end="107:20">-</operator><literal type="number" pos:start="107:21" pos:end="107:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:60"><expr pos:start="113:9" pos:end="113:59"><name pos:start="113:9" pos:end="113:11">ptr</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:59"><name pos:start="113:15" pos:end="113:27">MapViewOfFile</name><argument_list pos:start="113:28" pos:end="113:59">(<argument pos:start="113:29" pos:end="113:30"><expr pos:start="113:29" pos:end="113:30"><name pos:start="113:29" pos:end="113:30">mh</name></expr></argument>, <argument pos:start="113:33" pos:end="113:45"><expr pos:start="113:33" pos:end="113:45"><name pos:start="113:33" pos:end="113:45">FILE_MAP_READ</name></expr></argument>, <argument pos:start="113:48" pos:end="113:48"><expr pos:start="113:48" pos:end="113:48"><literal type="number" pos:start="113:48" pos:end="113:48">0</literal></expr></argument>, <argument pos:start="113:51" pos:end="113:51"><expr pos:start="113:51" pos:end="113:51"><literal type="number" pos:start="113:51" pos:end="113:51">0</literal></expr></argument>, <argument pos:start="113:54" pos:end="113:58"><expr pos:start="113:54" pos:end="113:58"><operator pos:start="113:54" pos:end="113:54">*</operator><name pos:start="113:55" pos:end="113:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:24"><expr pos:start="115:9" pos:end="115:23"><call pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:19">CloseHandle</name><argument_list pos:start="115:20" pos:end="115:23">(<argument pos:start="115:21" pos:end="115:22"><expr pos:start="115:21" pos:end="115:22"><name pos:start="115:21" pos:end="115:22">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="125:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:17">(<expr pos:start="117:13" pos:end="117:16"><operator pos:start="117:13" pos:end="117:13">!</operator><name pos:start="117:14" pos:end="117:16">ptr</name></expr>)</condition> <block pos:start="117:19" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:22">

            <expr_stmt pos:start="119:13" pos:end="119:87"><expr pos:start="119:13" pos:end="119:86"><call pos:start="119:13" pos:end="119:86"><name pos:start="119:13" pos:end="119:18">av_log</name><argument_list pos:start="119:19" pos:end="119:86">(<argument pos:start="119:20" pos:end="119:32"><expr pos:start="119:20" pos:end="119:32"><operator pos:start="119:20" pos:end="119:20">&amp;</operator><name pos:start="119:21" pos:end="119:32">file_log_ctx</name></expr></argument>, <argument pos:start="119:35" pos:end="119:46"><expr pos:start="119:35" pos:end="119:46"><name pos:start="119:35" pos:end="119:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:49" pos:end="119:85"><expr pos:start="119:49" pos:end="119:85"><literal type="string" pos:start="119:49" pos:end="119:85">"Error occurred in MapViewOfFile()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:22"><expr pos:start="121:13" pos:end="121:21"><call pos:start="121:13" pos:end="121:21"><name pos:start="121:13" pos:end="121:17">close</name><argument_list pos:start="121:18" pos:end="121:21">(<argument pos:start="121:19" pos:end="121:20"><expr pos:start="121:19" pos:end="121:20"><name pos:start="121:19" pos:end="121:20">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:22">return <expr pos:start="123:20" pos:end="123:21"><operator pos:start="123:20" pos:end="123:20">-</operator><literal type="number" pos:start="123:21" pos:end="123:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:22"><expr pos:start="129:9" pos:end="129:21"><operator pos:start="129:9" pos:end="129:9">*</operator><name pos:start="129:10" pos:end="129:15">bufptr</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <name pos:start="129:19" pos:end="129:21">ptr</name></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:else pos:start="133:1" pos:end="133:5">#<cpp:directive pos:start="133:2" pos:end="133:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="135:5" pos:end="135:31"><expr pos:start="135:5" pos:end="135:30"><operator pos:start="135:5" pos:end="135:5">*</operator><name pos:start="135:6" pos:end="135:11">bufptr</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="135:30"><name pos:start="135:15" pos:end="135:23">av_malloc</name><argument_list pos:start="135:24" pos:end="135:30">(<argument pos:start="135:25" pos:end="135:29"><expr pos:start="135:25" pos:end="135:29"><operator pos:start="135:25" pos:end="135:25">*</operator><name pos:start="135:26" pos:end="135:29">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="145:5"><if pos:start="137:5" pos:end="145:5">if <condition pos:start="137:8" pos:end="137:17">(<expr pos:start="137:9" pos:end="137:16"><operator pos:start="137:9" pos:end="137:9">!</operator><operator pos:start="137:10" pos:end="137:10">*</operator><name pos:start="137:11" pos:end="137:16">bufptr</name></expr>)</condition> <block pos:start="137:19" pos:end="145:5">{<block_content pos:start="139:9" pos:end="143:31">

        <expr_stmt pos:start="139:9" pos:end="139:82"><expr pos:start="139:9" pos:end="139:81"><call pos:start="139:9" pos:end="139:81"><name pos:start="139:9" pos:end="139:14">av_log</name><argument_list pos:start="139:15" pos:end="139:81">(<argument pos:start="139:16" pos:end="139:28"><expr pos:start="139:16" pos:end="139:28"><operator pos:start="139:16" pos:end="139:16">&amp;</operator><name pos:start="139:17" pos:end="139:28">file_log_ctx</name></expr></argument>, <argument pos:start="139:31" pos:end="139:42"><expr pos:start="139:31" pos:end="139:42"><name pos:start="139:31" pos:end="139:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:45" pos:end="139:80"><expr pos:start="139:45" pos:end="139:80"><literal type="string" pos:start="139:45" pos:end="139:80">"Memory allocation error occurred\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:18"><expr pos:start="141:9" pos:end="141:17"><call pos:start="141:9" pos:end="141:17"><name pos:start="141:9" pos:end="141:13">close</name><argument_list pos:start="141:14" pos:end="141:17">(<argument pos:start="141:15" pos:end="141:16"><expr pos:start="141:15" pos:end="141:16"><name pos:start="141:15" pos:end="141:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:31">return <expr pos:start="143:16" pos:end="143:30"><call pos:start="143:16" pos:end="143:30"><name pos:start="143:16" pos:end="143:22">AVERROR</name><argument_list pos:start="143:23" pos:end="143:30">(<argument pos:start="143:24" pos:end="143:29"><expr pos:start="143:24" pos:end="143:29"><name pos:start="143:24" pos:end="143:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="150:0"><expr pos:start="147:5" pos:end="147:28"><call pos:start="147:5" pos:end="147:28"><name pos:start="147:5" pos:end="147:8">read</name><argument_list pos:start="147:9" pos:end="147:28">(<argument pos:start="147:10" pos:end="147:11"><expr pos:start="147:10" pos:end="147:11"><name pos:start="147:10" pos:end="147:11">fd</name></expr></argument>, <argument pos:start="147:14" pos:end="147:20"><expr pos:start="147:14" pos:end="147:20"><operator pos:start="147:14" pos:end="147:14">*</operator><name pos:start="147:15" pos:end="147:20">bufptr</name></expr></argument>, <argument pos:start="147:23" pos:end="147:27"><expr pos:start="147:23" pos:end="147:27"><operator pos:start="147:23" pos:end="147:23">*</operator><name pos:start="147:24" pos:end="147:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="153:5" pos:end="153:14"><expr pos:start="153:5" pos:end="153:13"><call pos:start="153:5" pos:end="153:13"><name pos:start="153:5" pos:end="153:9">close</name><argument_list pos:start="153:10" pos:end="153:13">(<argument pos:start="153:11" pos:end="153:12"><expr pos:start="153:11" pos:end="153:12"><name pos:start="153:11" pos:end="153:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="155:5" pos:end="155:13">return <expr pos:start="155:12" pos:end="155:12"><literal type="number" pos:start="155:12" pos:end="155:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
