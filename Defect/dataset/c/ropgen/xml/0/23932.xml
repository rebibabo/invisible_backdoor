<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23932.c" pos:tabs="8"><function pos:start="1:1" pos:end="277:1"><type pos:start="1:1" pos:end="1:13"><name pos:start="1:1" pos:end="1:11">PXA2xxState</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:24">pxa270_init</name><parameter_list pos:start="1:25" pos:end="3:71">(<parameter pos:start="1:26" pos:end="1:52"><decl pos:start="1:26" pos:end="1:52"><type pos:start="1:26" pos:end="1:52"><name pos:start="1:26" pos:end="1:37">MemoryRegion</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:52">address_space</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:48"><decl pos:start="3:26" pos:end="3:48"><type pos:start="3:26" pos:end="3:48"><name pos:start="3:26" pos:end="3:33">unsigned</name> <name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:48">sdram_size</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:70"><decl pos:start="3:51" pos:end="3:70"><type pos:start="3:51" pos:end="3:70"><specifier pos:start="3:51" pos:end="3:55">const</specifier> <name pos:start="3:57" pos:end="3:60">char</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:70">revision</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="277:1">{<block_content pos:start="7:5" pos:end="275:13">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">PXA2xxState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">DriveInfo</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:20">dinfo</name></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:55"><expr pos:start="13:5" pos:end="13:54"><name pos:start="13:5" pos:end="13:5">s</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:20">PXA2xxState</name> <operator pos:start="13:22" pos:end="13:22">*</operator><operator pos:start="13:23" pos:end="13:23">)</operator> <call pos:start="13:25" pos:end="13:54"><name pos:start="13:25" pos:end="13:33">g_malloc0</name><argument_list pos:start="13:34" pos:end="13:54">(<argument pos:start="13:35" pos:end="13:53"><expr pos:start="13:35" pos:end="13:53"><sizeof pos:start="13:35" pos:end="13:53">sizeof<argument_list pos:start="13:41" pos:end="13:53">(<argument pos:start="13:42" pos:end="13:52"><expr pos:start="13:42" pos:end="13:52"><name pos:start="13:42" pos:end="13:52">PXA2xxState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:50">(<expr pos:start="17:9" pos:end="17:49"><name pos:start="17:9" pos:end="17:16">revision</name> <operator pos:start="17:18" pos:end="17:19">&amp;&amp;</operator> <call pos:start="17:21" pos:end="17:49"><name pos:start="17:21" pos:end="17:27">strncmp</name><argument_list pos:start="17:28" pos:end="17:49">(<argument pos:start="17:29" pos:end="17:36"><expr pos:start="17:29" pos:end="17:36"><name pos:start="17:29" pos:end="17:36">revision</name></expr></argument>, <argument pos:start="17:39" pos:end="17:45"><expr pos:start="17:39" pos:end="17:45"><literal type="string" pos:start="17:39" pos:end="17:45">"pxa27"</literal></expr></argument>, <argument pos:start="17:48" pos:end="17:48"><expr pos:start="17:48" pos:end="17:48"><literal type="number" pos:start="17:48" pos:end="17:48">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:52" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:16">

        <expr_stmt pos:start="19:9" pos:end="19:66"><expr pos:start="19:9" pos:end="19:65"><call pos:start="19:9" pos:end="19:65"><name pos:start="19:9" pos:end="19:15">fprintf</name><argument_list pos:start="19:16" pos:end="19:65">(<argument pos:start="19:17" pos:end="19:22"><expr pos:start="19:17" pos:end="19:22"><name pos:start="19:17" pos:end="19:22">stderr</name></expr></argument>, <argument pos:start="19:25" pos:end="19:64"><expr pos:start="19:25" pos:end="19:64"><literal type="string" pos:start="19:25" pos:end="19:64">"Machine requires a PXA27x processor.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:16"><expr pos:start="21:9" pos:end="21:15"><call pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:12">exit</name><argument_list pos:start="21:13" pos:end="21:15">(<argument pos:start="21:14" pos:end="21:14"><expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="27:28"><if pos:start="25:5" pos:end="27:28">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:17">revision</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:28"><block_content pos:start="27:9" pos:end="27:28">

        <expr_stmt pos:start="27:9" pos:end="27:28"><expr pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:16">revision</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <literal type="string" pos:start="27:20" pos:end="27:27">"pxa270"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    

    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:10">cpu</name></name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:35"><name pos:start="31:14" pos:end="31:25">cpu_arm_init</name><argument_list pos:start="31:26" pos:end="31:35">(<argument pos:start="31:27" pos:end="31:34"><expr pos:start="31:27" pos:end="31:34"><name pos:start="31:27" pos:end="31:34">revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:23">(<expr pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:14">cpu</name></name> <operator pos:start="33:16" pos:end="33:17">==</operator> <name pos:start="33:19" pos:end="33:22">NULL</name></expr>)</condition> <block pos:start="33:25" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:16">

        <expr_stmt pos:start="35:9" pos:end="35:59"><expr pos:start="35:9" pos:end="35:58"><call pos:start="35:9" pos:end="35:58"><name pos:start="35:9" pos:end="35:15">fprintf</name><argument_list pos:start="35:16" pos:end="35:58">(<argument pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">stderr</name></expr></argument>, <argument pos:start="35:25" pos:end="35:57"><expr pos:start="35:25" pos:end="35:57"><literal type="string" pos:start="35:25" pos:end="35:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><call pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:12">exit</name><argument_list pos:start="37:13" pos:end="37:15">(<argument pos:start="37:14" pos:end="37:14"><expr pos:start="37:14" pos:end="37:14"><literal type="number" pos:start="37:14" pos:end="37:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:53"><expr pos:start="41:5" pos:end="41:52"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:12">reset</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:52"><name pos:start="41:16" pos:end="41:32">qemu_allocate_irq</name><argument_list pos:start="41:33" pos:end="41:52">(<argument pos:start="41:34" pos:end="41:45"><expr pos:start="41:34" pos:end="41:45"><name pos:start="41:34" pos:end="41:45">pxa2xx_reset</name></expr></argument>, <argument pos:start="41:48" pos:end="41:48"><expr pos:start="41:48" pos:end="41:48"><name pos:start="41:48" pos:end="41:48">s</name></expr></argument>, <argument pos:start="41:51" pos:end="41:51"><expr pos:start="41:51" pos:end="41:51"><literal type="number" pos:start="41:51" pos:end="41:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:41">/* SDRAM &amp; Internal Memory Storage */</comment>

    <expr_stmt pos:start="47:5" pos:end="49:41"><expr pos:start="47:5" pos:end="49:40"><call pos:start="47:5" pos:end="49:40"><name pos:start="47:5" pos:end="47:26">memory_region_init_ram</name><argument_list pos:start="47:27" pos:end="49:40">(<argument pos:start="47:28" pos:end="47:36"><expr pos:start="47:28" pos:end="47:36"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:36"><name pos:start="47:29" pos:end="47:29">s</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:36">sdram</name></name></expr></argument>, <argument pos:start="47:39" pos:end="47:42"><expr pos:start="47:39" pos:end="47:42"><name pos:start="47:39" pos:end="47:42">NULL</name></expr></argument>, <argument pos:start="47:45" pos:end="47:58"><expr pos:start="47:45" pos:end="47:58"><literal type="string" pos:start="47:45" pos:end="47:58">"pxa270.sdram"</literal></expr></argument>, <argument pos:start="47:61" pos:end="47:70"><expr pos:start="47:61" pos:end="47:70"><name pos:start="47:61" pos:end="47:70">sdram_size</name></expr></argument>,

                           <argument pos:start="49:28" pos:end="49:39"><expr pos:start="49:28" pos:end="49:39"><operator pos:start="49:28" pos:end="49:28">&amp;</operator><name pos:start="49:29" pos:end="49:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><call pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:31">vmstate_register_ram_global</name><argument_list pos:start="51:32" pos:end="51:42">(<argument pos:start="51:33" pos:end="51:41"><expr pos:start="51:33" pos:end="51:41"><operator pos:start="51:33" pos:end="51:33">&amp;</operator><name pos:start="51:34" pos:end="51:41"><name pos:start="51:34" pos:end="51:34">s</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:41">sdram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:77"><expr pos:start="53:5" pos:end="53:76"><call pos:start="53:5" pos:end="53:76"><name pos:start="53:5" pos:end="53:31">memory_region_add_subregion</name><argument_list pos:start="53:32" pos:end="53:76">(<argument pos:start="53:33" pos:end="53:45"><expr pos:start="53:33" pos:end="53:45"><name pos:start="53:33" pos:end="53:45">address_space</name></expr></argument>, <argument pos:start="53:48" pos:end="53:64"><expr pos:start="53:48" pos:end="53:64"><name pos:start="53:48" pos:end="53:64">PXA2XX_SDRAM_BASE</name></expr></argument>, <argument pos:start="53:67" pos:end="53:75"><expr pos:start="53:67" pos:end="53:75"><operator pos:start="53:67" pos:end="53:67">&amp;</operator><name pos:start="53:68" pos:end="53:75"><name pos:start="53:68" pos:end="53:68">s</name><operator pos:start="53:69" pos:end="53:70">-&gt;</operator><name pos:start="53:71" pos:end="53:75">sdram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="57:41"><expr pos:start="55:5" pos:end="57:40"><call pos:start="55:5" pos:end="57:40"><name pos:start="55:5" pos:end="55:26">memory_region_init_ram</name><argument_list pos:start="55:27" pos:end="57:40">(<argument pos:start="55:28" pos:end="55:39"><expr pos:start="55:28" pos:end="55:39"><operator pos:start="55:28" pos:end="55:28">&amp;</operator><name pos:start="55:29" pos:end="55:39"><name pos:start="55:29" pos:end="55:29">s</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:39">internal</name></name></expr></argument>, <argument pos:start="55:42" pos:end="55:45"><expr pos:start="55:42" pos:end="55:45"><name pos:start="55:42" pos:end="55:45">NULL</name></expr></argument>, <argument pos:start="55:48" pos:end="55:64"><expr pos:start="55:48" pos:end="55:64"><literal type="string" pos:start="55:48" pos:end="55:64">"pxa270.internal"</literal></expr></argument>, <argument pos:start="55:67" pos:end="55:73"><expr pos:start="55:67" pos:end="55:73"><literal type="number" pos:start="55:67" pos:end="55:73">0x40000</literal></expr></argument>,

                           <argument pos:start="57:28" pos:end="57:39"><expr pos:start="57:28" pos:end="57:39"><operator pos:start="57:28" pos:end="57:28">&amp;</operator><name pos:start="57:29" pos:end="57:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><call pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:31">vmstate_register_ram_global</name><argument_list pos:start="59:32" pos:end="59:45">(<argument pos:start="59:33" pos:end="59:44"><expr pos:start="59:33" pos:end="59:44"><operator pos:start="59:33" pos:end="59:33">&amp;</operator><name pos:start="59:34" pos:end="59:44"><name pos:start="59:34" pos:end="59:34">s</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:44">internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:46"><expr pos:start="61:5" pos:end="63:45"><call pos:start="61:5" pos:end="63:45"><name pos:start="61:5" pos:end="61:31">memory_region_add_subregion</name><argument_list pos:start="61:32" pos:end="63:45">(<argument pos:start="61:33" pos:end="61:45"><expr pos:start="61:33" pos:end="61:45"><name pos:start="61:33" pos:end="61:45">address_space</name></expr></argument>, <argument pos:start="61:48" pos:end="61:67"><expr pos:start="61:48" pos:end="61:67"><name pos:start="61:48" pos:end="61:67">PXA2XX_INTERNAL_BASE</name></expr></argument>,

                                <argument pos:start="63:33" pos:end="63:44"><expr pos:start="63:33" pos:end="63:44"><operator pos:start="63:33" pos:end="63:33">&amp;</operator><name pos:start="63:34" pos:end="63:44"><name pos:start="63:34" pos:end="63:34">s</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:44">internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:49"><expr pos:start="67:5" pos:end="67:48"><name pos:start="67:5" pos:end="67:10"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:10">pic</name></name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:48"><name pos:start="67:14" pos:end="67:28">pxa2xx_pic_init</name><argument_list pos:start="67:29" pos:end="67:48">(<argument pos:start="67:30" pos:end="67:39"><expr pos:start="67:30" pos:end="67:39"><literal type="number" pos:start="67:30" pos:end="67:39">0x40d00000</literal></expr></argument>, <argument pos:start="67:42" pos:end="67:47"><expr pos:start="67:42" pos:end="67:47"><name pos:start="67:42" pos:end="67:47"><name pos:start="67:42" pos:end="67:42">s</name><operator pos:start="67:43" pos:end="67:44">-&gt;</operator><name pos:start="67:45" pos:end="67:47">cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:62"><expr pos:start="71:5" pos:end="73:61"><name pos:start="71:5" pos:end="71:10"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:10">dma</name></name> <operator pos:start="71:12" pos:end="71:12">=</operator> <call pos:start="71:14" pos:end="73:61"><name pos:start="71:14" pos:end="71:28">pxa27x_dma_init</name><argument_list pos:start="71:29" pos:end="73:61">(<argument pos:start="71:30" pos:end="71:39"><expr pos:start="71:30" pos:end="71:39"><literal type="number" pos:start="71:30" pos:end="71:39">0x40000000</literal></expr></argument>,

                    <argument pos:start="73:21" pos:end="73:60"><expr pos:start="73:21" pos:end="73:60"><call pos:start="73:21" pos:end="73:60"><name pos:start="73:21" pos:end="73:36">qdev_get_gpio_in</name><argument_list pos:start="73:37" pos:end="73:60">(<argument pos:start="73:38" pos:end="73:43"><expr pos:start="73:38" pos:end="73:43"><name pos:start="73:38" pos:end="73:43"><name pos:start="73:38" pos:end="73:38">s</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:43">pic</name></name></expr></argument>, <argument pos:start="73:46" pos:end="73:59"><expr pos:start="73:46" pos:end="73:59"><name pos:start="73:46" pos:end="73:59">PXA2XX_PIC_DMA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="89:26"><expr pos:start="77:5" pos:end="89:25"><call pos:start="77:5" pos:end="89:25"><name pos:start="77:5" pos:end="77:25">sysbus_create_varargs</name><argument_list pos:start="77:26" pos:end="89:25">(<argument pos:start="77:27" pos:end="77:40"><expr pos:start="77:27" pos:end="77:40"><literal type="string" pos:start="77:27" pos:end="77:40">"pxa27x-timer"</literal></expr></argument>, <argument pos:start="77:43" pos:end="77:52"><expr pos:start="77:43" pos:end="77:52"><literal type="number" pos:start="77:43" pos:end="77:52">0x40a00000</literal></expr></argument>,

                    <argument pos:start="79:21" pos:end="79:66"><expr pos:start="79:21" pos:end="79:66"><call pos:start="79:21" pos:end="79:66"><name pos:start="79:21" pos:end="79:36">qdev_get_gpio_in</name><argument_list pos:start="79:37" pos:end="79:66">(<argument pos:start="79:38" pos:end="79:43"><expr pos:start="79:38" pos:end="79:43"><name pos:start="79:38" pos:end="79:43"><name pos:start="79:38" pos:end="79:38">s</name><operator pos:start="79:39" pos:end="79:40">-&gt;</operator><name pos:start="79:41" pos:end="79:43">pic</name></name></expr></argument>, <argument pos:start="79:46" pos:end="79:65"><expr pos:start="79:46" pos:end="79:65"><name pos:start="79:46" pos:end="79:61">PXA2XX_PIC_OST_0</name> <operator pos:start="79:63" pos:end="79:63">+</operator> <literal type="number" pos:start="79:65" pos:end="79:65">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="81:21" pos:end="81:66"><expr pos:start="81:21" pos:end="81:66"><call pos:start="81:21" pos:end="81:66"><name pos:start="81:21" pos:end="81:36">qdev_get_gpio_in</name><argument_list pos:start="81:37" pos:end="81:66">(<argument pos:start="81:38" pos:end="81:43"><expr pos:start="81:38" pos:end="81:43"><name pos:start="81:38" pos:end="81:43"><name pos:start="81:38" pos:end="81:38">s</name><operator pos:start="81:39" pos:end="81:40">-&gt;</operator><name pos:start="81:41" pos:end="81:43">pic</name></name></expr></argument>, <argument pos:start="81:46" pos:end="81:65"><expr pos:start="81:46" pos:end="81:65"><name pos:start="81:46" pos:end="81:61">PXA2XX_PIC_OST_0</name> <operator pos:start="81:63" pos:end="81:63">+</operator> <literal type="number" pos:start="81:65" pos:end="81:65">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="83:21" pos:end="83:66"><expr pos:start="83:21" pos:end="83:66"><call pos:start="83:21" pos:end="83:66"><name pos:start="83:21" pos:end="83:36">qdev_get_gpio_in</name><argument_list pos:start="83:37" pos:end="83:66">(<argument pos:start="83:38" pos:end="83:43"><expr pos:start="83:38" pos:end="83:43"><name pos:start="83:38" pos:end="83:43"><name pos:start="83:38" pos:end="83:38">s</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:43">pic</name></name></expr></argument>, <argument pos:start="83:46" pos:end="83:65"><expr pos:start="83:46" pos:end="83:65"><name pos:start="83:46" pos:end="83:61">PXA2XX_PIC_OST_0</name> <operator pos:start="83:63" pos:end="83:63">+</operator> <literal type="number" pos:start="83:65" pos:end="83:65">2</literal></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="85:21" pos:end="85:66"><expr pos:start="85:21" pos:end="85:66"><call pos:start="85:21" pos:end="85:66"><name pos:start="85:21" pos:end="85:36">qdev_get_gpio_in</name><argument_list pos:start="85:37" pos:end="85:66">(<argument pos:start="85:38" pos:end="85:43"><expr pos:start="85:38" pos:end="85:43"><name pos:start="85:38" pos:end="85:43"><name pos:start="85:38" pos:end="85:38">s</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:43">pic</name></name></expr></argument>, <argument pos:start="85:46" pos:end="85:65"><expr pos:start="85:46" pos:end="85:65"><name pos:start="85:46" pos:end="85:61">PXA2XX_PIC_OST_0</name> <operator pos:start="85:63" pos:end="85:63">+</operator> <literal type="number" pos:start="85:65" pos:end="85:65">3</literal></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="87:21" pos:end="87:65"><expr pos:start="87:21" pos:end="87:65"><call pos:start="87:21" pos:end="87:65"><name pos:start="87:21" pos:end="87:36">qdev_get_gpio_in</name><argument_list pos:start="87:37" pos:end="87:65">(<argument pos:start="87:38" pos:end="87:43"><expr pos:start="87:38" pos:end="87:43"><name pos:start="87:38" pos:end="87:43"><name pos:start="87:38" pos:end="87:38">s</name><operator pos:start="87:39" pos:end="87:40">-&gt;</operator><name pos:start="87:41" pos:end="87:43">pic</name></name></expr></argument>, <argument pos:start="87:46" pos:end="87:64"><expr pos:start="87:46" pos:end="87:64"><name pos:start="87:46" pos:end="87:64">PXA27X_PIC_OST_4_11</name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="89:21" pos:end="89:24"><expr pos:start="89:21" pos:end="89:24"><name pos:start="89:21" pos:end="89:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:64"><expr pos:start="93:5" pos:end="93:63"><name pos:start="93:5" pos:end="93:11"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:11">gpio</name></name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:63"><name pos:start="93:15" pos:end="93:30">pxa2xx_gpio_init</name><argument_list pos:start="93:31" pos:end="93:63">(<argument pos:start="93:32" pos:end="93:41"><expr pos:start="93:32" pos:end="93:41"><literal type="number" pos:start="93:32" pos:end="93:41">0x40e00000</literal></expr></argument>, <argument pos:start="93:44" pos:end="93:49"><expr pos:start="93:44" pos:end="93:49"><name pos:start="93:44" pos:end="93:49"><name pos:start="93:44" pos:end="93:44">s</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:49">cpu</name></name></expr></argument>, <argument pos:start="93:52" pos:end="93:57"><expr pos:start="93:52" pos:end="93:57"><name pos:start="93:52" pos:end="93:57"><name pos:start="93:52" pos:end="93:52">s</name><operator pos:start="93:53" pos:end="93:54">-&gt;</operator><name pos:start="93:55" pos:end="93:57">pic</name></name></expr></argument>, <argument pos:start="93:60" pos:end="93:62"><expr pos:start="93:60" pos:end="93:62"><literal type="number" pos:start="93:60" pos:end="93:62">121</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:35"><expr pos:start="97:5" pos:end="97:34"><name pos:start="97:5" pos:end="97:9">dinfo</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <call pos:start="97:13" pos:end="97:34"><name pos:start="97:13" pos:end="97:21">drive_get</name><argument_list pos:start="97:22" pos:end="97:34">(<argument pos:start="97:23" pos:end="97:27"><expr pos:start="97:23" pos:end="97:27"><name pos:start="97:23" pos:end="97:27">IF_SD</name></expr></argument>, <argument pos:start="97:30" pos:end="97:30"><expr pos:start="97:30" pos:end="97:30"><literal type="number" pos:start="97:30" pos:end="97:30">0</literal></expr></argument>, <argument pos:start="97:33" pos:end="97:33"><expr pos:start="97:33" pos:end="97:33"><literal type="number" pos:start="97:33" pos:end="97:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:15">(<expr pos:start="99:9" pos:end="99:14"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:14">dinfo</name></expr>)</condition> <block pos:start="99:17" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:16">

        <expr_stmt pos:start="101:9" pos:end="101:64"><expr pos:start="101:9" pos:end="101:63"><call pos:start="101:9" pos:end="101:63"><name pos:start="101:9" pos:end="101:15">fprintf</name><argument_list pos:start="101:16" pos:end="101:63">(<argument pos:start="101:17" pos:end="101:22"><expr pos:start="101:17" pos:end="101:22"><name pos:start="101:17" pos:end="101:22">stderr</name></expr></argument>, <argument pos:start="101:25" pos:end="101:62"><expr pos:start="101:25" pos:end="101:62"><literal type="string" pos:start="101:25" pos:end="101:62">"qemu: missing SecureDigital device\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:16"><expr pos:start="103:9" pos:end="103:15"><call pos:start="103:9" pos:end="103:15"><name pos:start="103:9" pos:end="103:12">exit</name><argument_list pos:start="103:13" pos:end="103:15">(<argument pos:start="103:14" pos:end="103:14"><expr pos:start="103:14" pos:end="103:14"><literal type="number" pos:start="103:14" pos:end="103:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="115:65"><expr pos:start="107:5" pos:end="115:64"><name pos:start="107:5" pos:end="107:10"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:10">mmc</name></name> <operator pos:start="107:12" pos:end="107:12">=</operator> <call pos:start="107:14" pos:end="115:64"><name pos:start="107:14" pos:end="107:29">pxa2xx_mmci_init</name><argument_list pos:start="107:30" pos:end="115:64">(<argument pos:start="107:31" pos:end="107:43"><expr pos:start="107:31" pos:end="107:43"><name pos:start="107:31" pos:end="107:43">address_space</name></expr></argument>, <argument pos:start="107:46" pos:end="107:55"><expr pos:start="107:46" pos:end="107:55"><literal type="number" pos:start="107:46" pos:end="107:55">0x41100000</literal></expr></argument>,

                    <argument pos:start="109:21" pos:end="109:54"><expr pos:start="109:21" pos:end="109:54"><call pos:start="109:21" pos:end="109:54"><name pos:start="109:21" pos:end="109:26">blk_bs</name><argument_list pos:start="109:27" pos:end="109:54">(<argument pos:start="109:28" pos:end="109:53"><expr pos:start="109:28" pos:end="109:53"><call pos:start="109:28" pos:end="109:53"><name pos:start="109:28" pos:end="109:46">blk_by_legacy_dinfo</name><argument_list pos:start="109:47" pos:end="109:53">(<argument pos:start="109:48" pos:end="109:52"><expr pos:start="109:48" pos:end="109:52"><name pos:start="109:48" pos:end="109:52">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="111:21" pos:end="111:60"><expr pos:start="111:21" pos:end="111:60"><call pos:start="111:21" pos:end="111:60"><name pos:start="111:21" pos:end="111:36">qdev_get_gpio_in</name><argument_list pos:start="111:37" pos:end="111:60">(<argument pos:start="111:38" pos:end="111:43"><expr pos:start="111:38" pos:end="111:43"><name pos:start="111:38" pos:end="111:43"><name pos:start="111:38" pos:end="111:38">s</name><operator pos:start="111:39" pos:end="111:40">-&gt;</operator><name pos:start="111:41" pos:end="111:43">pic</name></name></expr></argument>, <argument pos:start="111:46" pos:end="111:59"><expr pos:start="111:46" pos:end="111:59"><name pos:start="111:46" pos:end="111:59">PXA2XX_PIC_MMC</name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="113:21" pos:end="113:63"><expr pos:start="113:21" pos:end="113:63"><call pos:start="113:21" pos:end="113:63"><name pos:start="113:21" pos:end="113:36">qdev_get_gpio_in</name><argument_list pos:start="113:37" pos:end="113:63">(<argument pos:start="113:38" pos:end="113:43"><expr pos:start="113:38" pos:end="113:43"><name pos:start="113:38" pos:end="113:43"><name pos:start="113:38" pos:end="113:38">s</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:43">dma</name></name></expr></argument>, <argument pos:start="113:46" pos:end="113:62"><expr pos:start="113:46" pos:end="113:62"><name pos:start="113:46" pos:end="113:62">PXA2XX_RX_RQ_MMCI</name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="115:21" pos:end="115:63"><expr pos:start="115:21" pos:end="115:63"><call pos:start="115:21" pos:end="115:63"><name pos:start="115:21" pos:end="115:36">qdev_get_gpio_in</name><argument_list pos:start="115:37" pos:end="115:63">(<argument pos:start="115:38" pos:end="115:43"><expr pos:start="115:38" pos:end="115:43"><name pos:start="115:38" pos:end="115:43"><name pos:start="115:38" pos:end="115:38">s</name><operator pos:start="115:39" pos:end="115:40">-&gt;</operator><name pos:start="115:41" pos:end="115:43">dma</name></name></expr></argument>, <argument pos:start="115:46" pos:end="115:62"><expr pos:start="115:46" pos:end="115:62"><name pos:start="115:46" pos:end="115:62">PXA2XX_TX_RQ_MMCI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="119:5" pos:end="137:5">for <control pos:start="119:9" pos:end="119:46">(<init pos:start="119:10" pos:end="119:15"><expr pos:start="119:10" pos:end="119:14"><name pos:start="119:10" pos:end="119:10">i</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <literal type="number" pos:start="119:14" pos:end="119:14">0</literal></expr>;</init> <condition pos:start="119:17" pos:end="119:41"><expr pos:start="119:17" pos:end="119:40"><name pos:start="119:17" pos:end="119:32"><name pos:start="119:17" pos:end="119:29">pxa270_serial</name><index pos:start="119:30" pos:end="119:32">[<expr pos:start="119:31" pos:end="119:31"><name pos:start="119:31" pos:end="119:31">i</name></expr>]</index></name><operator pos:start="119:33" pos:end="119:33">.</operator><name pos:start="119:34" pos:end="119:40">io_base</name></expr>;</condition> <incr pos:start="119:43" pos:end="119:45"><expr pos:start="119:43" pos:end="119:45"><name pos:start="119:43" pos:end="119:43">i</name><operator pos:start="119:44" pos:end="119:45">++</operator></expr></incr>)</control> <block pos:start="119:48" pos:end="137:5">{<block_content pos:start="121:9" pos:end="135:9">

        <if_stmt pos:start="121:9" pos:end="135:9"><if pos:start="121:9" pos:end="131:9">if <condition pos:start="121:12" pos:end="121:26">(<expr pos:start="121:13" pos:end="121:25"><name pos:start="121:13" pos:end="121:25"><name pos:start="121:13" pos:end="121:22">serial_hds</name><index pos:start="121:23" pos:end="121:25">[<expr pos:start="121:24" pos:end="121:24"><name pos:start="121:24" pos:end="121:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="121:28" pos:end="131:9">{<block_content pos:start="123:13" pos:end="129:49">

            <expr_stmt pos:start="123:13" pos:end="129:49"><expr pos:start="123:13" pos:end="129:48"><call pos:start="123:13" pos:end="129:48"><name pos:start="123:13" pos:end="123:26">serial_mm_init</name><argument_list pos:start="123:27" pos:end="129:48">(<argument pos:start="123:28" pos:end="123:40"><expr pos:start="123:28" pos:end="123:40"><name pos:start="123:28" pos:end="123:40">address_space</name></expr></argument>, <argument pos:start="123:43" pos:end="123:66"><expr pos:start="123:43" pos:end="123:66"><name pos:start="123:43" pos:end="123:58"><name pos:start="123:43" pos:end="123:55">pxa270_serial</name><index pos:start="123:56" pos:end="123:58">[<expr pos:start="123:57" pos:end="123:57"><name pos:start="123:57" pos:end="123:57">i</name></expr>]</index></name><operator pos:start="123:59" pos:end="123:59">.</operator><name pos:start="123:60" pos:end="123:66">io_base</name></expr></argument>, <argument pos:start="123:69" pos:end="123:69"><expr pos:start="123:69" pos:end="123:69"><literal type="number" pos:start="123:69" pos:end="123:69">2</literal></expr></argument>,

                           <argument pos:start="125:28" pos:end="125:74"><expr pos:start="125:28" pos:end="125:74"><call pos:start="125:28" pos:end="125:74"><name pos:start="125:28" pos:end="125:43">qdev_get_gpio_in</name><argument_list pos:start="125:44" pos:end="125:74">(<argument pos:start="125:45" pos:end="125:50"><expr pos:start="125:45" pos:end="125:50"><name pos:start="125:45" pos:end="125:50"><name pos:start="125:45" pos:end="125:45">s</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:50">pic</name></name></expr></argument>, <argument pos:start="125:53" pos:end="125:73"><expr pos:start="125:53" pos:end="125:73"><name pos:start="125:53" pos:end="125:68"><name pos:start="125:53" pos:end="125:65">pxa270_serial</name><index pos:start="125:66" pos:end="125:68">[<expr pos:start="125:67" pos:end="125:67"><name pos:start="125:67" pos:end="125:67">i</name></expr>]</index></name><operator pos:start="125:69" pos:end="125:69">.</operator><name pos:start="125:70" pos:end="125:73">irqn</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="127:28" pos:end="127:40"><expr pos:start="127:28" pos:end="127:40"><literal type="number" pos:start="127:28" pos:end="127:35">14857000</literal> <operator pos:start="127:37" pos:end="127:37">/</operator> <literal type="number" pos:start="127:39" pos:end="127:40">16</literal></expr></argument>, <argument pos:start="127:43" pos:end="127:55"><expr pos:start="127:43" pos:end="127:55"><name pos:start="127:43" pos:end="127:55"><name pos:start="127:43" pos:end="127:52">serial_hds</name><index pos:start="127:53" pos:end="127:55">[<expr pos:start="127:54" pos:end="127:54"><name pos:start="127:54" pos:end="127:54">i</name></expr>]</index></name></expr></argument>,

                           <argument pos:start="129:28" pos:end="129:47"><expr pos:start="129:28" pos:end="129:47"><name pos:start="129:28" pos:end="129:47">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="131:11" pos:end="135:9">else <block pos:start="131:16" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:18">

            <break pos:start="133:13" pos:end="133:18">break;</break>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="139:5" pos:end="149:39"><if pos:start="139:5" pos:end="149:39">if <condition pos:start="139:8" pos:end="139:22">(<expr pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:18">serial_hds</name><index pos:start="139:19" pos:end="139:21">[<expr pos:start="139:20" pos:end="139:20"><name pos:start="139:20" pos:end="139:20">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="149:39"><block_content pos:start="141:9" pos:end="149:39">

        <expr_stmt pos:start="141:9" pos:end="149:39"><expr pos:start="141:9" pos:end="149:38"><name pos:start="141:9" pos:end="141:14"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:14">fir</name></name> <operator pos:start="141:16" pos:end="141:16">=</operator> <call pos:start="141:18" pos:end="149:38"><name pos:start="141:18" pos:end="141:32">pxa2xx_fir_init</name><argument_list pos:start="141:33" pos:end="149:38">(<argument pos:start="141:34" pos:end="141:46"><expr pos:start="141:34" pos:end="141:46"><name pos:start="141:34" pos:end="141:46">address_space</name></expr></argument>, <argument pos:start="141:49" pos:end="141:58"><expr pos:start="141:49" pos:end="141:58"><literal type="number" pos:start="141:49" pos:end="141:58">0x40800000</literal></expr></argument>,

                        <argument pos:start="143:25" pos:end="143:64"><expr pos:start="143:25" pos:end="143:64"><call pos:start="143:25" pos:end="143:64"><name pos:start="143:25" pos:end="143:40">qdev_get_gpio_in</name><argument_list pos:start="143:41" pos:end="143:64">(<argument pos:start="143:42" pos:end="143:47"><expr pos:start="143:42" pos:end="143:47"><name pos:start="143:42" pos:end="143:47"><name pos:start="143:42" pos:end="143:42">s</name><operator pos:start="143:43" pos:end="143:44">-&gt;</operator><name pos:start="143:45" pos:end="143:47">pic</name></name></expr></argument>, <argument pos:start="143:50" pos:end="143:63"><expr pos:start="143:50" pos:end="143:63"><name pos:start="143:50" pos:end="143:63">PXA2XX_PIC_ICP</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="145:25" pos:end="145:66"><expr pos:start="145:25" pos:end="145:66"><call pos:start="145:25" pos:end="145:66"><name pos:start="145:25" pos:end="145:40">qdev_get_gpio_in</name><argument_list pos:start="145:41" pos:end="145:66">(<argument pos:start="145:42" pos:end="145:47"><expr pos:start="145:42" pos:end="145:47"><name pos:start="145:42" pos:end="145:47"><name pos:start="145:42" pos:end="145:42">s</name><operator pos:start="145:43" pos:end="145:44">-&gt;</operator><name pos:start="145:45" pos:end="145:47">dma</name></name></expr></argument>, <argument pos:start="145:50" pos:end="145:65"><expr pos:start="145:50" pos:end="145:65"><name pos:start="145:50" pos:end="145:65">PXA2XX_RX_RQ_ICP</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="147:25" pos:end="147:66"><expr pos:start="147:25" pos:end="147:66"><call pos:start="147:25" pos:end="147:66"><name pos:start="147:25" pos:end="147:40">qdev_get_gpio_in</name><argument_list pos:start="147:41" pos:end="147:66">(<argument pos:start="147:42" pos:end="147:47"><expr pos:start="147:42" pos:end="147:47"><name pos:start="147:42" pos:end="147:47"><name pos:start="147:42" pos:end="147:42">s</name><operator pos:start="147:43" pos:end="147:44">-&gt;</operator><name pos:start="147:45" pos:end="147:47">dma</name></name></expr></argument>, <argument pos:start="147:50" pos:end="147:65"><expr pos:start="147:50" pos:end="147:65"><name pos:start="147:50" pos:end="147:65">PXA2XX_TX_RQ_ICP</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="149:25" pos:end="149:37"><expr pos:start="149:25" pos:end="149:37"><name pos:start="149:25" pos:end="149:37"><name pos:start="149:25" pos:end="149:34">serial_hds</name><index pos:start="149:35" pos:end="149:37">[<expr pos:start="149:36" pos:end="149:36"><name pos:start="149:36" pos:end="149:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="155:62"><expr pos:start="153:5" pos:end="155:61"><name pos:start="153:5" pos:end="153:10"><name pos:start="153:5" pos:end="153:5">s</name><operator pos:start="153:6" pos:end="153:7">-&gt;</operator><name pos:start="153:8" pos:end="153:10">lcd</name></name> <operator pos:start="153:12" pos:end="153:12">=</operator> <call pos:start="153:14" pos:end="155:61"><name pos:start="153:14" pos:end="153:29">pxa2xx_lcdc_init</name><argument_list pos:start="153:30" pos:end="155:61">(<argument pos:start="153:31" pos:end="153:43"><expr pos:start="153:31" pos:end="153:43"><name pos:start="153:31" pos:end="153:43">address_space</name></expr></argument>, <argument pos:start="153:46" pos:end="153:55"><expr pos:start="153:46" pos:end="153:55"><literal type="number" pos:start="153:46" pos:end="153:55">0x44000000</literal></expr></argument>,

                    <argument pos:start="155:21" pos:end="155:60"><expr pos:start="155:21" pos:end="155:60"><call pos:start="155:21" pos:end="155:60"><name pos:start="155:21" pos:end="155:36">qdev_get_gpio_in</name><argument_list pos:start="155:37" pos:end="155:60">(<argument pos:start="155:38" pos:end="155:43"><expr pos:start="155:38" pos:end="155:43"><name pos:start="155:38" pos:end="155:43"><name pos:start="155:38" pos:end="155:38">s</name><operator pos:start="155:39" pos:end="155:40">-&gt;</operator><name pos:start="155:41" pos:end="155:43">pic</name></name></expr></argument>, <argument pos:start="155:46" pos:end="155:59"><expr pos:start="155:46" pos:end="155:59"><name pos:start="155:46" pos:end="155:59">PXA2XX_PIC_LCD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:28"><expr pos:start="159:5" pos:end="159:27"><name pos:start="159:5" pos:end="159:14"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:14">cm_base</name></name> <operator pos:start="159:16" pos:end="159:16">=</operator> <literal type="number" pos:start="159:18" pos:end="159:27">0x41300000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:39"><expr pos:start="161:5" pos:end="161:38"><name pos:start="161:5" pos:end="161:25"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:14">cm_regs</name><index pos:start="161:15" pos:end="161:25">[<expr pos:start="161:16" pos:end="161:24"><name pos:start="161:16" pos:end="161:19">CCCR</name> <operator pos:start="161:21" pos:end="161:22">&gt;&gt;</operator> <literal type="number" pos:start="161:24" pos:end="161:24">2</literal></expr>]</index></name> <operator pos:start="161:27" pos:end="161:27">=</operator> <literal type="number" pos:start="161:29" pos:end="161:38">0x02000210</literal></expr>;</expr_stmt>	<comment type="block" pos:start="161:41" pos:end="161:55">/* 416.0 MHz */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:27"><expr pos:start="163:5" pos:end="163:26"><name pos:start="163:5" pos:end="163:13"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:13">clkcfg</name></name> <operator pos:start="163:15" pos:end="163:15">=</operator> <literal type="number" pos:start="163:17" pos:end="163:26">0x00000009</literal></expr>;</expr_stmt>		<comment type="block" pos:start="163:41" pos:end="163:63">/* Turbo mode active */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:86"><expr pos:start="165:5" pos:end="165:85"><call pos:start="165:5" pos:end="165:85"><name pos:start="165:5" pos:end="165:25">memory_region_init_io</name><argument_list pos:start="165:26" pos:end="165:85">(<argument pos:start="165:27" pos:end="165:38"><expr pos:start="165:27" pos:end="165:38"><operator pos:start="165:27" pos:end="165:27">&amp;</operator><name pos:start="165:28" pos:end="165:38"><name pos:start="165:28" pos:end="165:28">s</name><operator pos:start="165:29" pos:end="165:30">-&gt;</operator><name pos:start="165:31" pos:end="165:38">cm_iomem</name></name></expr></argument>, <argument pos:start="165:41" pos:end="165:44"><expr pos:start="165:41" pos:end="165:44"><name pos:start="165:41" pos:end="165:44">NULL</name></expr></argument>, <argument pos:start="165:47" pos:end="165:60"><expr pos:start="165:47" pos:end="165:60"><operator pos:start="165:47" pos:end="165:47">&amp;</operator><name pos:start="165:48" pos:end="165:60">pxa2xx_cm_ops</name></expr></argument>, <argument pos:start="165:63" pos:end="165:63"><expr pos:start="165:63" pos:end="165:63"><name pos:start="165:63" pos:end="165:63">s</name></expr></argument>, <argument pos:start="165:66" pos:end="165:76"><expr pos:start="165:66" pos:end="165:76"><literal type="string" pos:start="165:66" pos:end="165:76">"pxa2xx-cm"</literal></expr></argument>, <argument pos:start="165:79" pos:end="165:84"><expr pos:start="165:79" pos:end="165:84"><literal type="number" pos:start="165:79" pos:end="165:84">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:73"><expr pos:start="167:5" pos:end="167:72"><call pos:start="167:5" pos:end="167:72"><name pos:start="167:5" pos:end="167:31">memory_region_add_subregion</name><argument_list pos:start="167:32" pos:end="167:72">(<argument pos:start="167:33" pos:end="167:45"><expr pos:start="167:33" pos:end="167:45"><name pos:start="167:33" pos:end="167:45">address_space</name></expr></argument>, <argument pos:start="167:48" pos:end="167:57"><expr pos:start="167:48" pos:end="167:57"><name pos:start="167:48" pos:end="167:57"><name pos:start="167:48" pos:end="167:48">s</name><operator pos:start="167:49" pos:end="167:50">-&gt;</operator><name pos:start="167:51" pos:end="167:57">cm_base</name></name></expr></argument>, <argument pos:start="167:60" pos:end="167:71"><expr pos:start="167:60" pos:end="167:71"><operator pos:start="167:60" pos:end="167:60">&amp;</operator><name pos:start="167:61" pos:end="167:71"><name pos:start="167:61" pos:end="167:61">s</name><operator pos:start="167:62" pos:end="167:63">-&gt;</operator><name pos:start="167:64" pos:end="167:71">cm_iomem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:53"><expr pos:start="169:5" pos:end="169:52"><call pos:start="169:5" pos:end="169:52"><name pos:start="169:5" pos:end="169:20">vmstate_register</name><argument_list pos:start="169:21" pos:end="169:52">(<argument pos:start="169:22" pos:end="169:25"><expr pos:start="169:22" pos:end="169:25"><name pos:start="169:22" pos:end="169:25">NULL</name></expr></argument>, <argument pos:start="169:28" pos:end="169:28"><expr pos:start="169:28" pos:end="169:28"><literal type="number" pos:start="169:28" pos:end="169:28">0</literal></expr></argument>, <argument pos:start="169:31" pos:end="169:48"><expr pos:start="169:31" pos:end="169:48"><operator pos:start="169:31" pos:end="169:31">&amp;</operator><name pos:start="169:32" pos:end="169:48">vmstate_pxa2xx_cm</name></expr></argument>, <argument pos:start="169:51" pos:end="169:51"><expr pos:start="169:51" pos:end="169:51"><name pos:start="169:51" pos:end="169:51">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:25"><expr pos:start="173:5" pos:end="173:24"><call pos:start="173:5" pos:end="173:24"><name pos:start="173:5" pos:end="173:21">pxa2xx_setup_cp14</name><argument_list pos:start="173:22" pos:end="173:24">(<argument pos:start="173:23" pos:end="173:23"><expr pos:start="173:23" pos:end="173:23"><name pos:start="173:23" pos:end="173:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:28"><expr pos:start="177:5" pos:end="177:27"><name pos:start="177:5" pos:end="177:14"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:14">mm_base</name></name> <operator pos:start="177:16" pos:end="177:16">=</operator> <literal type="number" pos:start="177:18" pos:end="177:27">0x48000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:40"><expr pos:start="179:5" pos:end="179:39"><name pos:start="179:5" pos:end="179:26"><name pos:start="179:5" pos:end="179:5">s</name><operator pos:start="179:6" pos:end="179:7">-&gt;</operator><name pos:start="179:8" pos:end="179:14">mm_regs</name><index pos:start="179:15" pos:end="179:26">[<expr pos:start="179:16" pos:end="179:25"><name pos:start="179:16" pos:end="179:20">MDMRS</name> <operator pos:start="179:22" pos:end="179:23">&gt;&gt;</operator> <literal type="number" pos:start="179:25" pos:end="179:25">2</literal></expr>]</index></name> <operator pos:start="179:28" pos:end="179:28">=</operator> <literal type="number" pos:start="179:30" pos:end="179:39">0x00020002</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:41"><expr pos:start="181:5" pos:end="181:40"><name pos:start="181:5" pos:end="181:27"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:14">mm_regs</name><index pos:start="181:15" pos:end="181:27">[<expr pos:start="181:16" pos:end="181:26"><name pos:start="181:16" pos:end="181:21">MDREFR</name> <operator pos:start="181:23" pos:end="181:24">&gt;&gt;</operator> <literal type="number" pos:start="181:26" pos:end="181:26">2</literal></expr>]</index></name> <operator pos:start="181:29" pos:end="181:29">=</operator> <literal type="number" pos:start="181:31" pos:end="181:40">0x03ca4000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:39"><expr pos:start="183:5" pos:end="183:38"><name pos:start="183:5" pos:end="183:25"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:14">mm_regs</name><index pos:start="183:15" pos:end="183:25">[<expr pos:start="183:16" pos:end="183:24"><name pos:start="183:16" pos:end="183:19">MECR</name> <operator pos:start="183:21" pos:end="183:22">&gt;&gt;</operator> <literal type="number" pos:start="183:24" pos:end="183:24">2</literal></expr>]</index></name> <operator pos:start="183:27" pos:end="183:27">=</operator> <literal type="number" pos:start="183:29" pos:end="183:38">0x00000001</literal></expr>;</expr_stmt>	<comment type="block" pos:start="183:41" pos:end="183:65">/* Two PC Card sockets */</comment>

    <expr_stmt pos:start="185:5" pos:end="185:86"><expr pos:start="185:5" pos:end="185:85"><call pos:start="185:5" pos:end="185:85"><name pos:start="185:5" pos:end="185:25">memory_region_init_io</name><argument_list pos:start="185:26" pos:end="185:85">(<argument pos:start="185:27" pos:end="185:38"><expr pos:start="185:27" pos:end="185:38"><operator pos:start="185:27" pos:end="185:27">&amp;</operator><name pos:start="185:28" pos:end="185:38"><name pos:start="185:28" pos:end="185:28">s</name><operator pos:start="185:29" pos:end="185:30">-&gt;</operator><name pos:start="185:31" pos:end="185:38">mm_iomem</name></name></expr></argument>, <argument pos:start="185:41" pos:end="185:44"><expr pos:start="185:41" pos:end="185:44"><name pos:start="185:41" pos:end="185:44">NULL</name></expr></argument>, <argument pos:start="185:47" pos:end="185:60"><expr pos:start="185:47" pos:end="185:60"><operator pos:start="185:47" pos:end="185:47">&amp;</operator><name pos:start="185:48" pos:end="185:60">pxa2xx_mm_ops</name></expr></argument>, <argument pos:start="185:63" pos:end="185:63"><expr pos:start="185:63" pos:end="185:63"><name pos:start="185:63" pos:end="185:63">s</name></expr></argument>, <argument pos:start="185:66" pos:end="185:76"><expr pos:start="185:66" pos:end="185:76"><literal type="string" pos:start="185:66" pos:end="185:76">"pxa2xx-mm"</literal></expr></argument>, <argument pos:start="185:79" pos:end="185:84"><expr pos:start="185:79" pos:end="185:84"><literal type="number" pos:start="185:79" pos:end="185:84">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:73"><expr pos:start="187:5" pos:end="187:72"><call pos:start="187:5" pos:end="187:72"><name pos:start="187:5" pos:end="187:31">memory_region_add_subregion</name><argument_list pos:start="187:32" pos:end="187:72">(<argument pos:start="187:33" pos:end="187:45"><expr pos:start="187:33" pos:end="187:45"><name pos:start="187:33" pos:end="187:45">address_space</name></expr></argument>, <argument pos:start="187:48" pos:end="187:57"><expr pos:start="187:48" pos:end="187:57"><name pos:start="187:48" pos:end="187:57"><name pos:start="187:48" pos:end="187:48">s</name><operator pos:start="187:49" pos:end="187:50">-&gt;</operator><name pos:start="187:51" pos:end="187:57">mm_base</name></name></expr></argument>, <argument pos:start="187:60" pos:end="187:71"><expr pos:start="187:60" pos:end="187:71"><operator pos:start="187:60" pos:end="187:60">&amp;</operator><name pos:start="187:61" pos:end="187:71"><name pos:start="187:61" pos:end="187:61">s</name><operator pos:start="187:62" pos:end="187:63">-&gt;</operator><name pos:start="187:64" pos:end="187:71">mm_iomem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:53"><expr pos:start="189:5" pos:end="189:52"><call pos:start="189:5" pos:end="189:52"><name pos:start="189:5" pos:end="189:20">vmstate_register</name><argument_list pos:start="189:21" pos:end="189:52">(<argument pos:start="189:22" pos:end="189:25"><expr pos:start="189:22" pos:end="189:25"><name pos:start="189:22" pos:end="189:25">NULL</name></expr></argument>, <argument pos:start="189:28" pos:end="189:28"><expr pos:start="189:28" pos:end="189:28"><literal type="number" pos:start="189:28" pos:end="189:28">0</literal></expr></argument>, <argument pos:start="189:31" pos:end="189:48"><expr pos:start="189:31" pos:end="189:48"><operator pos:start="189:31" pos:end="189:31">&amp;</operator><name pos:start="189:32" pos:end="189:48">vmstate_pxa2xx_mm</name></expr></argument>, <argument pos:start="189:51" pos:end="189:51"><expr pos:start="189:51" pos:end="189:51"><name pos:start="189:51" pos:end="189:51">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:28"><expr pos:start="193:5" pos:end="193:27"><name pos:start="193:5" pos:end="193:14"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:14">pm_base</name></name> <operator pos:start="193:16" pos:end="193:16">=</operator> <literal type="number" pos:start="193:18" pos:end="193:27">0x40f00000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:85"><expr pos:start="195:5" pos:end="195:84"><call pos:start="195:5" pos:end="195:84"><name pos:start="195:5" pos:end="195:25">memory_region_init_io</name><argument_list pos:start="195:26" pos:end="195:84">(<argument pos:start="195:27" pos:end="195:38"><expr pos:start="195:27" pos:end="195:38"><operator pos:start="195:27" pos:end="195:27">&amp;</operator><name pos:start="195:28" pos:end="195:38"><name pos:start="195:28" pos:end="195:28">s</name><operator pos:start="195:29" pos:end="195:30">-&gt;</operator><name pos:start="195:31" pos:end="195:38">pm_iomem</name></name></expr></argument>, <argument pos:start="195:41" pos:end="195:44"><expr pos:start="195:41" pos:end="195:44"><name pos:start="195:41" pos:end="195:44">NULL</name></expr></argument>, <argument pos:start="195:47" pos:end="195:60"><expr pos:start="195:47" pos:end="195:60"><operator pos:start="195:47" pos:end="195:47">&amp;</operator><name pos:start="195:48" pos:end="195:60">pxa2xx_pm_ops</name></expr></argument>, <argument pos:start="195:63" pos:end="195:63"><expr pos:start="195:63" pos:end="195:63"><name pos:start="195:63" pos:end="195:63">s</name></expr></argument>, <argument pos:start="195:66" pos:end="195:76"><expr pos:start="195:66" pos:end="195:76"><literal type="string" pos:start="195:66" pos:end="195:76">"pxa2xx-pm"</literal></expr></argument>, <argument pos:start="195:79" pos:end="195:83"><expr pos:start="195:79" pos:end="195:83"><literal type="number" pos:start="195:79" pos:end="195:83">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:73"><expr pos:start="197:5" pos:end="197:72"><call pos:start="197:5" pos:end="197:72"><name pos:start="197:5" pos:end="197:31">memory_region_add_subregion</name><argument_list pos:start="197:32" pos:end="197:72">(<argument pos:start="197:33" pos:end="197:45"><expr pos:start="197:33" pos:end="197:45"><name pos:start="197:33" pos:end="197:45">address_space</name></expr></argument>, <argument pos:start="197:48" pos:end="197:57"><expr pos:start="197:48" pos:end="197:57"><name pos:start="197:48" pos:end="197:57"><name pos:start="197:48" pos:end="197:48">s</name><operator pos:start="197:49" pos:end="197:50">-&gt;</operator><name pos:start="197:51" pos:end="197:57">pm_base</name></name></expr></argument>, <argument pos:start="197:60" pos:end="197:71"><expr pos:start="197:60" pos:end="197:71"><operator pos:start="197:60" pos:end="197:60">&amp;</operator><name pos:start="197:61" pos:end="197:71"><name pos:start="197:61" pos:end="197:61">s</name><operator pos:start="197:62" pos:end="197:63">-&gt;</operator><name pos:start="197:64" pos:end="197:71">pm_iomem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:53"><expr pos:start="199:5" pos:end="199:52"><call pos:start="199:5" pos:end="199:52"><name pos:start="199:5" pos:end="199:20">vmstate_register</name><argument_list pos:start="199:21" pos:end="199:52">(<argument pos:start="199:22" pos:end="199:25"><expr pos:start="199:22" pos:end="199:25"><name pos:start="199:22" pos:end="199:25">NULL</name></expr></argument>, <argument pos:start="199:28" pos:end="199:28"><expr pos:start="199:28" pos:end="199:28"><literal type="number" pos:start="199:28" pos:end="199:28">0</literal></expr></argument>, <argument pos:start="199:31" pos:end="199:48"><expr pos:start="199:31" pos:end="199:48"><operator pos:start="199:31" pos:end="199:31">&amp;</operator><name pos:start="199:32" pos:end="199:48">vmstate_pxa2xx_pm</name></expr></argument>, <argument pos:start="199:51" pos:end="199:51"><expr pos:start="199:51" pos:end="199:51"><name pos:start="199:51" pos:end="199:51">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="203:5" pos:end="203:45">for <control pos:start="203:9" pos:end="203:44">(<init pos:start="203:10" pos:end="203:15"><expr pos:start="203:10" pos:end="203:14"><name pos:start="203:10" pos:end="203:10">i</name> <operator pos:start="203:12" pos:end="203:12">=</operator> <literal type="number" pos:start="203:14" pos:end="203:14">0</literal></expr>;</init> <condition pos:start="203:17" pos:end="203:38"><expr pos:start="203:17" pos:end="203:37"><name pos:start="203:17" pos:end="203:29"><name pos:start="203:17" pos:end="203:26">pxa27x_ssp</name><index pos:start="203:27" pos:end="203:29">[<expr pos:start="203:28" pos:end="203:28"><name pos:start="203:28" pos:end="203:28">i</name></expr>]</index></name><operator pos:start="203:30" pos:end="203:30">.</operator><name pos:start="203:31" pos:end="203:37">io_base</name></expr>;</condition> <incr pos:start="203:40" pos:end="203:43"><expr pos:start="203:40" pos:end="203:43"><name pos:start="203:40" pos:end="203:40">i</name> <operator pos:start="203:42" pos:end="203:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="203:45" pos:end="203:45"><block_content pos:start="203:45" pos:end="203:45"><empty_stmt pos:start="203:45" pos:end="203:45">;</empty_stmt></block_content></block></for>

    <expr_stmt pos:start="205:5" pos:end="205:56"><expr pos:start="205:5" pos:end="205:55"><name pos:start="205:5" pos:end="205:10"><name pos:start="205:5" pos:end="205:5">s</name><operator pos:start="205:6" pos:end="205:7">-&gt;</operator><name pos:start="205:8" pos:end="205:10">ssp</name></name> <operator pos:start="205:12" pos:end="205:12">=</operator> <operator pos:start="205:14" pos:end="205:14">(</operator><name pos:start="205:15" pos:end="205:20">SSIBus</name> <operator pos:start="205:22" pos:end="205:22">*</operator><operator pos:start="205:23" pos:end="205:23">*</operator><operator pos:start="205:24" pos:end="205:24">)</operator><call pos:start="205:25" pos:end="205:55"><name pos:start="205:25" pos:end="205:33">g_malloc0</name><argument_list pos:start="205:34" pos:end="205:55">(<argument pos:start="205:35" pos:end="205:54"><expr pos:start="205:35" pos:end="205:54"><sizeof pos:start="205:35" pos:end="205:50">sizeof<argument_list pos:start="205:41" pos:end="205:50">(<argument pos:start="205:42" pos:end="205:49"><expr pos:start="205:42" pos:end="205:49"><name pos:start="205:42" pos:end="205:47">SSIBus</name> <operator pos:start="205:49" pos:end="205:49">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="205:52" pos:end="205:52">*</operator> <name pos:start="205:54" pos:end="205:54">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="207:5" pos:end="217:5">for <control pos:start="207:9" pos:end="207:44">(<init pos:start="207:10" pos:end="207:15"><expr pos:start="207:10" pos:end="207:14"><name pos:start="207:10" pos:end="207:10">i</name> <operator pos:start="207:12" pos:end="207:12">=</operator> <literal type="number" pos:start="207:14" pos:end="207:14">0</literal></expr>;</init> <condition pos:start="207:17" pos:end="207:38"><expr pos:start="207:17" pos:end="207:37"><name pos:start="207:17" pos:end="207:29"><name pos:start="207:17" pos:end="207:26">pxa27x_ssp</name><index pos:start="207:27" pos:end="207:29">[<expr pos:start="207:28" pos:end="207:28"><name pos:start="207:28" pos:end="207:28">i</name></expr>]</index></name><operator pos:start="207:30" pos:end="207:30">.</operator><name pos:start="207:31" pos:end="207:37">io_base</name></expr>;</condition> <incr pos:start="207:40" pos:end="207:43"><expr pos:start="207:40" pos:end="207:43"><name pos:start="207:40" pos:end="207:40">i</name> <operator pos:start="207:42" pos:end="207:43">++</operator></expr></incr>)</control> <block pos:start="207:46" pos:end="217:5">{<block_content pos:start="209:9" pos:end="215:61">

        <decl_stmt pos:start="209:9" pos:end="209:25"><decl pos:start="209:9" pos:end="209:24"><type pos:start="209:9" pos:end="209:21"><name pos:start="209:9" pos:end="209:19">DeviceState</name> <modifier pos:start="209:21" pos:end="209:21">*</modifier></type><name pos:start="209:22" pos:end="209:24">dev</name></decl>;</decl_stmt>

        <expr_stmt pos:start="211:9" pos:end="213:70"><expr pos:start="211:9" pos:end="213:69"><name pos:start="211:9" pos:end="211:11">dev</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <call pos:start="211:15" pos:end="213:69"><name pos:start="211:15" pos:end="211:34">sysbus_create_simple</name><argument_list pos:start="211:35" pos:end="213:69">(<argument pos:start="211:36" pos:end="211:50"><expr pos:start="211:36" pos:end="211:50"><name pos:start="211:36" pos:end="211:50">TYPE_PXA2XX_SSP</name></expr></argument>, <argument pos:start="211:53" pos:end="211:73"><expr pos:start="211:53" pos:end="211:73"><name pos:start="211:53" pos:end="211:65"><name pos:start="211:53" pos:end="211:62">pxa27x_ssp</name><index pos:start="211:63" pos:end="211:65">[<expr pos:start="211:64" pos:end="211:64"><name pos:start="211:64" pos:end="211:64">i</name></expr>]</index></name><operator pos:start="211:66" pos:end="211:66">.</operator><name pos:start="211:67" pos:end="211:73">io_base</name></expr></argument>,

                        <argument pos:start="213:25" pos:end="213:68"><expr pos:start="213:25" pos:end="213:68"><call pos:start="213:25" pos:end="213:68"><name pos:start="213:25" pos:end="213:40">qdev_get_gpio_in</name><argument_list pos:start="213:41" pos:end="213:68">(<argument pos:start="213:42" pos:end="213:47"><expr pos:start="213:42" pos:end="213:47"><name pos:start="213:42" pos:end="213:47"><name pos:start="213:42" pos:end="213:42">s</name><operator pos:start="213:43" pos:end="213:44">-&gt;</operator><name pos:start="213:45" pos:end="213:47">pic</name></name></expr></argument>, <argument pos:start="213:50" pos:end="213:67"><expr pos:start="213:50" pos:end="213:67"><name pos:start="213:50" pos:end="213:62"><name pos:start="213:50" pos:end="213:59">pxa27x_ssp</name><index pos:start="213:60" pos:end="213:62">[<expr pos:start="213:61" pos:end="213:61"><name pos:start="213:61" pos:end="213:61">i</name></expr>]</index></name><operator pos:start="213:63" pos:end="213:63">.</operator><name pos:start="213:64" pos:end="213:67">irqn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:61"><expr pos:start="215:9" pos:end="215:60"><name pos:start="215:9" pos:end="215:17"><name pos:start="215:9" pos:end="215:9">s</name><operator pos:start="215:10" pos:end="215:11">-&gt;</operator><name pos:start="215:12" pos:end="215:14">ssp</name><index pos:start="215:15" pos:end="215:17">[<expr pos:start="215:16" pos:end="215:16"><name pos:start="215:16" pos:end="215:16">i</name></expr>]</index></name> <operator pos:start="215:19" pos:end="215:19">=</operator> <operator pos:start="215:21" pos:end="215:21">(</operator><name pos:start="215:22" pos:end="215:27">SSIBus</name> <operator pos:start="215:29" pos:end="215:29">*</operator><operator pos:start="215:30" pos:end="215:30">)</operator><call pos:start="215:31" pos:end="215:60"><name pos:start="215:31" pos:end="215:48">qdev_get_child_bus</name><argument_list pos:start="215:49" pos:end="215:60">(<argument pos:start="215:50" pos:end="215:52"><expr pos:start="215:50" pos:end="215:52"><name pos:start="215:50" pos:end="215:52">dev</name></expr></argument>, <argument pos:start="215:55" pos:end="215:59"><expr pos:start="215:55" pos:end="215:59"><literal type="string" pos:start="215:55" pos:end="215:59">"ssi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="221:5" pos:end="227:5"><if pos:start="221:5" pos:end="227:5">if <condition pos:start="221:8" pos:end="221:27">(<expr pos:start="221:9" pos:end="221:26"><call pos:start="221:9" pos:end="221:26"><name pos:start="221:9" pos:end="221:19">usb_enabled</name><argument_list pos:start="221:20" pos:end="221:26">(<argument pos:start="221:21" pos:end="221:25"><expr pos:start="221:21" pos:end="221:25"><name pos:start="221:21" pos:end="221:25">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:29" pos:end="227:5">{<block_content pos:start="223:9" pos:end="225:68">

        <expr_stmt pos:start="223:9" pos:end="225:68"><expr pos:start="223:9" pos:end="225:67"><call pos:start="223:9" pos:end="225:67"><name pos:start="223:9" pos:end="223:28">sysbus_create_simple</name><argument_list pos:start="223:29" pos:end="225:67">(<argument pos:start="223:30" pos:end="223:42"><expr pos:start="223:30" pos:end="223:42"><literal type="string" pos:start="223:30" pos:end="223:42">"sysbus-ohci"</literal></expr></argument>, <argument pos:start="223:45" pos:end="223:54"><expr pos:start="223:45" pos:end="223:54"><literal type="number" pos:start="223:45" pos:end="223:54">0x4c000000</literal></expr></argument>,

                        <argument pos:start="225:25" pos:end="225:66"><expr pos:start="225:25" pos:end="225:66"><call pos:start="225:25" pos:end="225:66"><name pos:start="225:25" pos:end="225:40">qdev_get_gpio_in</name><argument_list pos:start="225:41" pos:end="225:66">(<argument pos:start="225:42" pos:end="225:47"><expr pos:start="225:42" pos:end="225:47"><name pos:start="225:42" pos:end="225:47"><name pos:start="225:42" pos:end="225:42">s</name><operator pos:start="225:43" pos:end="225:44">-&gt;</operator><name pos:start="225:45" pos:end="225:47">pic</name></name></expr></argument>, <argument pos:start="225:50" pos:end="225:65"><expr pos:start="225:50" pos:end="225:65"><name pos:start="225:50" pos:end="225:65">PXA2XX_PIC_USBH1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="231:5" pos:end="231:65"><expr pos:start="231:5" pos:end="231:64"><name pos:start="231:5" pos:end="231:16"><name pos:start="231:5" pos:end="231:5">s</name><operator pos:start="231:6" pos:end="231:7">-&gt;</operator><name pos:start="231:8" pos:end="231:13">pcmcia</name><index pos:start="231:14" pos:end="231:16">[<expr pos:start="231:15" pos:end="231:15"><literal type="number" pos:start="231:15" pos:end="231:15">0</literal></expr>]</index></name> <operator pos:start="231:18" pos:end="231:18">=</operator> <call pos:start="231:20" pos:end="231:64"><name pos:start="231:20" pos:end="231:37">pxa2xx_pcmcia_init</name><argument_list pos:start="231:38" pos:end="231:64">(<argument pos:start="231:39" pos:end="231:51"><expr pos:start="231:39" pos:end="231:51"><name pos:start="231:39" pos:end="231:51">address_space</name></expr></argument>, <argument pos:start="231:54" pos:end="231:63"><expr pos:start="231:54" pos:end="231:63"><literal type="number" pos:start="231:54" pos:end="231:63">0x20000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:65"><expr pos:start="233:5" pos:end="233:64"><name pos:start="233:5" pos:end="233:16"><name pos:start="233:5" pos:end="233:5">s</name><operator pos:start="233:6" pos:end="233:7">-&gt;</operator><name pos:start="233:8" pos:end="233:13">pcmcia</name><index pos:start="233:14" pos:end="233:16">[<expr pos:start="233:15" pos:end="233:15"><literal type="number" pos:start="233:15" pos:end="233:15">1</literal></expr>]</index></name> <operator pos:start="233:18" pos:end="233:18">=</operator> <call pos:start="233:20" pos:end="233:64"><name pos:start="233:20" pos:end="233:37">pxa2xx_pcmcia_init</name><argument_list pos:start="233:38" pos:end="233:64">(<argument pos:start="233:39" pos:end="233:51"><expr pos:start="233:39" pos:end="233:51"><name pos:start="233:39" pos:end="233:51">address_space</name></expr></argument>, <argument pos:start="233:54" pos:end="233:63"><expr pos:start="233:54" pos:end="233:63"><literal type="number" pos:start="233:54" pos:end="233:63">0x30000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="237:5" pos:end="239:67"><expr pos:start="237:5" pos:end="239:66"><call pos:start="237:5" pos:end="239:66"><name pos:start="237:5" pos:end="237:24">sysbus_create_simple</name><argument_list pos:start="237:25" pos:end="239:66">(<argument pos:start="237:26" pos:end="237:40"><expr pos:start="237:26" pos:end="237:40"><name pos:start="237:26" pos:end="237:40">TYPE_PXA2XX_RTC</name></expr></argument>, <argument pos:start="237:43" pos:end="237:52"><expr pos:start="237:43" pos:end="237:52"><literal type="number" pos:start="237:43" pos:end="237:52">0x40900000</literal></expr></argument>,

                    <argument pos:start="239:21" pos:end="239:65"><expr pos:start="239:21" pos:end="239:65"><call pos:start="239:21" pos:end="239:65"><name pos:start="239:21" pos:end="239:36">qdev_get_gpio_in</name><argument_list pos:start="239:37" pos:end="239:65">(<argument pos:start="239:38" pos:end="239:43"><expr pos:start="239:38" pos:end="239:43"><name pos:start="239:38" pos:end="239:43"><name pos:start="239:38" pos:end="239:38">s</name><operator pos:start="239:39" pos:end="239:40">-&gt;</operator><name pos:start="239:41" pos:end="239:43">pic</name></name></expr></argument>, <argument pos:start="239:46" pos:end="239:64"><expr pos:start="239:46" pos:end="239:64"><name pos:start="239:46" pos:end="239:64">PXA2XX_PIC_RTCALARM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="243:5" pos:end="245:70"><expr pos:start="243:5" pos:end="245:69"><name pos:start="243:5" pos:end="243:13"><name pos:start="243:5" pos:end="243:5">s</name><operator pos:start="243:6" pos:end="243:7">-&gt;</operator><name pos:start="243:8" pos:end="243:10">i2c</name><index pos:start="243:11" pos:end="243:13">[<expr pos:start="243:12" pos:end="243:12"><literal type="number" pos:start="243:12" pos:end="243:12">0</literal></expr>]</index></name> <operator pos:start="243:15" pos:end="243:15">=</operator> <call pos:start="243:17" pos:end="245:69"><name pos:start="243:17" pos:end="243:31">pxa2xx_i2c_init</name><argument_list pos:start="243:32" pos:end="245:69">(<argument pos:start="243:33" pos:end="243:42"><expr pos:start="243:33" pos:end="243:42"><literal type="number" pos:start="243:33" pos:end="243:42">0x40301600</literal></expr></argument>,

                    <argument pos:start="245:21" pos:end="245:60"><expr pos:start="245:21" pos:end="245:60"><call pos:start="245:21" pos:end="245:60"><name pos:start="245:21" pos:end="245:36">qdev_get_gpio_in</name><argument_list pos:start="245:37" pos:end="245:60">(<argument pos:start="245:38" pos:end="245:43"><expr pos:start="245:38" pos:end="245:43"><name pos:start="245:38" pos:end="245:43"><name pos:start="245:38" pos:end="245:38">s</name><operator pos:start="245:39" pos:end="245:40">-&gt;</operator><name pos:start="245:41" pos:end="245:43">pic</name></name></expr></argument>, <argument pos:start="245:46" pos:end="245:59"><expr pos:start="245:46" pos:end="245:59"><name pos:start="245:46" pos:end="245:59">PXA2XX_PIC_I2C</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:63" pos:end="245:68"><expr pos:start="245:63" pos:end="245:68"><literal type="number" pos:start="245:63" pos:end="245:68">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="249:71"><expr pos:start="247:5" pos:end="249:70"><name pos:start="247:5" pos:end="247:13"><name pos:start="247:5" pos:end="247:5">s</name><operator pos:start="247:6" pos:end="247:7">-&gt;</operator><name pos:start="247:8" pos:end="247:10">i2c</name><index pos:start="247:11" pos:end="247:13">[<expr pos:start="247:12" pos:end="247:12"><literal type="number" pos:start="247:12" pos:end="247:12">1</literal></expr>]</index></name> <operator pos:start="247:15" pos:end="247:15">=</operator> <call pos:start="247:17" pos:end="249:70"><name pos:start="247:17" pos:end="247:31">pxa2xx_i2c_init</name><argument_list pos:start="247:32" pos:end="249:70">(<argument pos:start="247:33" pos:end="247:42"><expr pos:start="247:33" pos:end="247:42"><literal type="number" pos:start="247:33" pos:end="247:42">0x40f00100</literal></expr></argument>,

                    <argument pos:start="249:21" pos:end="249:63"><expr pos:start="249:21" pos:end="249:63"><call pos:start="249:21" pos:end="249:63"><name pos:start="249:21" pos:end="249:36">qdev_get_gpio_in</name><argument_list pos:start="249:37" pos:end="249:63">(<argument pos:start="249:38" pos:end="249:43"><expr pos:start="249:38" pos:end="249:43"><name pos:start="249:38" pos:end="249:43"><name pos:start="249:38" pos:end="249:38">s</name><operator pos:start="249:39" pos:end="249:40">-&gt;</operator><name pos:start="249:41" pos:end="249:43">pic</name></name></expr></argument>, <argument pos:start="249:46" pos:end="249:62"><expr pos:start="249:46" pos:end="249:62"><name pos:start="249:46" pos:end="249:62">PXA2XX_PIC_PWRI2C</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="249:66" pos:end="249:69"><expr pos:start="249:66" pos:end="249:69"><literal type="number" pos:start="249:66" pos:end="249:69">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="259:64"><expr pos:start="253:5" pos:end="259:63"><name pos:start="253:5" pos:end="253:10"><name pos:start="253:5" pos:end="253:5">s</name><operator pos:start="253:6" pos:end="253:7">-&gt;</operator><name pos:start="253:8" pos:end="253:10">i2s</name></name> <operator pos:start="253:12" pos:end="253:12">=</operator> <call pos:start="253:14" pos:end="259:63"><name pos:start="253:14" pos:end="253:28">pxa2xx_i2s_init</name><argument_list pos:start="253:29" pos:end="259:63">(<argument pos:start="253:30" pos:end="253:42"><expr pos:start="253:30" pos:end="253:42"><name pos:start="253:30" pos:end="253:42">address_space</name></expr></argument>, <argument pos:start="253:45" pos:end="253:54"><expr pos:start="253:45" pos:end="253:54"><literal type="number" pos:start="253:45" pos:end="253:54">0x40400000</literal></expr></argument>,

                    <argument pos:start="255:21" pos:end="255:60"><expr pos:start="255:21" pos:end="255:60"><call pos:start="255:21" pos:end="255:60"><name pos:start="255:21" pos:end="255:36">qdev_get_gpio_in</name><argument_list pos:start="255:37" pos:end="255:60">(<argument pos:start="255:38" pos:end="255:43"><expr pos:start="255:38" pos:end="255:43"><name pos:start="255:38" pos:end="255:43"><name pos:start="255:38" pos:end="255:38">s</name><operator pos:start="255:39" pos:end="255:40">-&gt;</operator><name pos:start="255:41" pos:end="255:43">pic</name></name></expr></argument>, <argument pos:start="255:46" pos:end="255:59"><expr pos:start="255:46" pos:end="255:59"><name pos:start="255:46" pos:end="255:59">PXA2XX_PIC_I2S</name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="257:21" pos:end="257:62"><expr pos:start="257:21" pos:end="257:62"><call pos:start="257:21" pos:end="257:62"><name pos:start="257:21" pos:end="257:36">qdev_get_gpio_in</name><argument_list pos:start="257:37" pos:end="257:62">(<argument pos:start="257:38" pos:end="257:43"><expr pos:start="257:38" pos:end="257:43"><name pos:start="257:38" pos:end="257:43"><name pos:start="257:38" pos:end="257:38">s</name><operator pos:start="257:39" pos:end="257:40">-&gt;</operator><name pos:start="257:41" pos:end="257:43">dma</name></name></expr></argument>, <argument pos:start="257:46" pos:end="257:61"><expr pos:start="257:46" pos:end="257:61"><name pos:start="257:46" pos:end="257:61">PXA2XX_RX_RQ_I2S</name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="259:21" pos:end="259:62"><expr pos:start="259:21" pos:end="259:62"><call pos:start="259:21" pos:end="259:62"><name pos:start="259:21" pos:end="259:36">qdev_get_gpio_in</name><argument_list pos:start="259:37" pos:end="259:62">(<argument pos:start="259:38" pos:end="259:43"><expr pos:start="259:38" pos:end="259:43"><name pos:start="259:38" pos:end="259:43"><name pos:start="259:38" pos:end="259:38">s</name><operator pos:start="259:39" pos:end="259:40">-&gt;</operator><name pos:start="259:41" pos:end="259:43">dma</name></name></expr></argument>, <argument pos:start="259:46" pos:end="259:61"><expr pos:start="259:46" pos:end="259:61"><name pos:start="259:46" pos:end="259:61">PXA2XX_TX_RQ_I2S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="263:5" pos:end="265:65"><expr pos:start="263:5" pos:end="265:64"><name pos:start="263:5" pos:end="263:9"><name pos:start="263:5" pos:end="263:5">s</name><operator pos:start="263:6" pos:end="263:7">-&gt;</operator><name pos:start="263:8" pos:end="263:9">kp</name></name> <operator pos:start="263:11" pos:end="263:11">=</operator> <call pos:start="263:13" pos:end="265:64"><name pos:start="263:13" pos:end="263:30">pxa27x_keypad_init</name><argument_list pos:start="263:31" pos:end="265:64">(<argument pos:start="263:32" pos:end="263:44"><expr pos:start="263:32" pos:end="263:44"><name pos:start="263:32" pos:end="263:44">address_space</name></expr></argument>, <argument pos:start="263:47" pos:end="263:56"><expr pos:start="263:47" pos:end="263:56"><literal type="number" pos:start="263:47" pos:end="263:56">0x41500000</literal></expr></argument>,

                    <argument pos:start="265:21" pos:end="265:63"><expr pos:start="265:21" pos:end="265:63"><call pos:start="265:21" pos:end="265:63"><name pos:start="265:21" pos:end="265:36">qdev_get_gpio_in</name><argument_list pos:start="265:37" pos:end="265:63">(<argument pos:start="265:38" pos:end="265:43"><expr pos:start="265:38" pos:end="265:43"><name pos:start="265:38" pos:end="265:43"><name pos:start="265:38" pos:end="265:38">s</name><operator pos:start="265:39" pos:end="265:40">-&gt;</operator><name pos:start="265:41" pos:end="265:43">pic</name></name></expr></argument>, <argument pos:start="265:46" pos:end="265:62"><expr pos:start="265:46" pos:end="265:62"><name pos:start="265:46" pos:end="265:62">PXA2XX_PIC_KEYPAD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="269:5" pos:end="269:36">/* GPIO1 resets the processor */</comment>

    <comment type="block" pos:start="271:5" pos:end="271:62">/* The handler can be overridden by board-specific code */</comment>

    <expr_stmt pos:start="273:5" pos:end="273:48"><expr pos:start="273:5" pos:end="273:47"><call pos:start="273:5" pos:end="273:47"><name pos:start="273:5" pos:end="273:25">qdev_connect_gpio_out</name><argument_list pos:start="273:26" pos:end="273:47">(<argument pos:start="273:27" pos:end="273:33"><expr pos:start="273:27" pos:end="273:33"><name pos:start="273:27" pos:end="273:33"><name pos:start="273:27" pos:end="273:27">s</name><operator pos:start="273:28" pos:end="273:29">-&gt;</operator><name pos:start="273:30" pos:end="273:33">gpio</name></name></expr></argument>, <argument pos:start="273:36" pos:end="273:36"><expr pos:start="273:36" pos:end="273:36"><literal type="number" pos:start="273:36" pos:end="273:36">1</literal></expr></argument>, <argument pos:start="273:39" pos:end="273:46"><expr pos:start="273:39" pos:end="273:46"><name pos:start="273:39" pos:end="273:46"><name pos:start="273:39" pos:end="273:39">s</name><operator pos:start="273:40" pos:end="273:41">-&gt;</operator><name pos:start="273:42" pos:end="273:46">reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="275:5" pos:end="275:13">return <expr pos:start="275:12" pos:end="275:12"><name pos:start="275:12" pos:end="275:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
