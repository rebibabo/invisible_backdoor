<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/320.c" pos:tabs="8"><function pos:start="1:1" pos:end="487:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">cpu_x86_exec</name><parameter_list pos:start="1:17" pos:end="1:35">(<parameter pos:start="1:18" pos:end="1:34"><decl pos:start="1:18" pos:end="1:34"><type pos:start="1:18" pos:end="1:30"><name pos:start="1:18" pos:end="1:28">CPUX86State</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:34">env1</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="487:1">{<block_content pos:start="5:5" pos:end="485:15">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">saved_T0</name></decl>, <decl pos:start="5:19" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:26">saved_T1</name></decl>, <decl pos:start="5:29" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:36">saved_A0</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUX86State</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:26">saved_env</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="9:1" pos:end="9:14">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:14">reg_EAX</name></cpp:ifdef>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">saved_EAX</name></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="15:1" pos:end="15:14">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:14">reg_ECX</name></cpp:ifdef>

    <decl_stmt pos:start="17:5" pos:end="22:0"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">saved_ECX</name></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="21:1" pos:end="21:14">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:14">reg_EDX</name></cpp:ifdef>

    <decl_stmt pos:start="23:5" pos:end="28:0"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">saved_EDX</name></decl>;</decl_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="27:1" pos:end="27:14">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:14">reg_EBX</name></cpp:ifdef>

    <decl_stmt pos:start="29:5" pos:end="34:0"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:17">saved_EBX</name></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="33:1" pos:end="33:14">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:14">reg_ESP</name></cpp:ifdef>

    <decl_stmt pos:start="35:5" pos:end="40:0"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:17">saved_ESP</name></decl>;</decl_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="39:1" pos:end="39:14">#<cpp:directive pos:start="39:2" pos:end="39:6">ifdef</cpp:directive> <name pos:start="39:8" pos:end="39:14">reg_EBP</name></cpp:ifdef>

    <decl_stmt pos:start="41:5" pos:end="46:0"><decl pos:start="41:5" pos:end="41:17"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:17">saved_EBP</name></decl>;</decl_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="45:1" pos:end="45:14">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:14">reg_ESI</name></cpp:ifdef>

    <decl_stmt pos:start="47:5" pos:end="52:0"><decl pos:start="47:5" pos:end="47:17"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:17">saved_ESI</name></decl>;</decl_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="51:1" pos:end="51:14">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:14">reg_EDI</name></cpp:ifdef>

    <decl_stmt pos:start="53:5" pos:end="58:0"><decl pos:start="53:5" pos:end="53:17"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:17">saved_EDI</name></decl>;</decl_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="57:1" pos:end="57:16">#<cpp:directive pos:start="57:2" pos:end="57:6">ifdef</cpp:directive> <name pos:start="57:8" pos:end="57:16">__sparc__</name></cpp:ifdef>

    <decl_stmt pos:start="59:5" pos:end="62:0"><decl pos:start="59:5" pos:end="59:16"><type pos:start="59:5" pos:end="59:7"><name pos:start="59:5" pos:end="59:7">int</name></type> <name pos:start="59:9" pos:end="59:16">saved_i7</name></decl>, <decl pos:start="59:19" pos:end="59:24"><type ref="prev" pos:start="59:5" pos:end="59:7"/><name pos:start="59:19" pos:end="59:24">tmp_T0</name></decl>;</decl_stmt>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="63:5" pos:end="63:27"><decl pos:start="63:5" pos:end="63:21"><type pos:start="63:5" pos:end="63:7"><name pos:start="63:5" pos:end="63:7">int</name></type> <name pos:start="63:9" pos:end="63:21">code_gen_size</name></decl>, <decl pos:start="63:24" pos:end="63:26"><type ref="prev" pos:start="63:5" pos:end="63:7"/><name pos:start="63:24" pos:end="63:26">ret</name></decl>;</decl_stmt>

    <function_decl pos:start="65:5" pos:end="65:27"><type pos:start="65:5" pos:end="65:8"><name pos:start="65:5" pos:end="65:8">void</name></type> (<modifier pos:start="65:11" pos:end="65:11">*</modifier><name pos:start="65:12" pos:end="65:19">gen_func</name>)<parameter_list pos:start="65:21" pos:end="65:26">(<parameter pos:start="65:22" pos:end="65:25"><decl pos:start="65:22" pos:end="65:25"><type pos:start="65:22" pos:end="65:25"><name pos:start="65:22" pos:end="65:25">void</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt pos:start="67:5" pos:end="67:32"><decl pos:start="67:5" pos:end="67:24"><type pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:20">TranslationBlock</name> <modifier pos:start="67:22" pos:end="67:22">*</modifier></type><name pos:start="67:23" pos:end="67:24">tb</name></decl>, <decl pos:start="67:27" pos:end="67:31"><type ref="prev" pos:start="67:5" pos:end="67:22"><modifier pos:start="67:27" pos:end="67:27">*</modifier><modifier pos:start="67:28" pos:end="67:28">*</modifier></type><name pos:start="67:29" pos:end="67:31">ptb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="69:5" pos:end="69:35"><decl pos:start="69:5" pos:end="69:19"><type pos:start="69:5" pos:end="69:13"><name pos:start="69:5" pos:end="69:11">uint8_t</name> <modifier pos:start="69:13" pos:end="69:13">*</modifier></type><name pos:start="69:14" pos:end="69:19">tc_ptr</name></decl>, <decl pos:start="69:22" pos:end="69:29"><type ref="prev" pos:start="69:5" pos:end="69:13"><modifier pos:start="69:22" pos:end="69:22">*</modifier></type><name pos:start="69:23" pos:end="69:29">cs_base</name></decl>, <decl pos:start="69:32" pos:end="69:34"><type ref="prev" pos:start="69:5" pos:end="69:13"><modifier pos:start="69:32" pos:end="69:32">*</modifier></type><name pos:start="69:33" pos:end="69:34">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="71:5" pos:end="71:23"><decl pos:start="71:5" pos:end="71:22"><type pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:12">unsigned</name> <name pos:start="71:14" pos:end="71:16">int</name></type> <name pos:start="71:18" pos:end="71:22">flags</name></decl>;</decl_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:40">/* first we save global registers */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:18"><expr pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:12">saved_T0</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <name pos:start="77:16" pos:end="77:17">T0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:18"><expr pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:12">saved_T1</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <name pos:start="79:16" pos:end="79:17">T1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:18"><expr pos:start="81:5" pos:end="81:17"><name pos:start="81:5" pos:end="81:12">saved_A0</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <name pos:start="81:16" pos:end="81:17">A0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:20"><expr pos:start="83:5" pos:end="83:19"><name pos:start="83:5" pos:end="83:13">saved_env</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:19">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="88:0"><expr pos:start="85:5" pos:end="85:14"><name pos:start="85:5" pos:end="85:7">env</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <name pos:start="85:11" pos:end="85:14">env1</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="87:1" pos:end="87:14">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:14">reg_EAX</name></cpp:ifdef>

    <expr_stmt pos:start="89:5" pos:end="89:20"><expr pos:start="89:5" pos:end="89:19"><name pos:start="89:5" pos:end="89:13">saved_EAX</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <name pos:start="89:17" pos:end="89:19">EAX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="96:0"><expr pos:start="91:5" pos:end="91:26"><name pos:start="91:5" pos:end="91:7">EAX</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <name pos:start="91:11" pos:end="91:26"><name pos:start="91:11" pos:end="91:13">env</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:19">regs</name><index pos:start="91:20" pos:end="91:26">[<expr pos:start="91:21" pos:end="91:25"><name pos:start="91:21" pos:end="91:25">R_EAX</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="95:1" pos:end="95:14">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:14">reg_ECX</name></cpp:ifdef>

    <expr_stmt pos:start="97:5" pos:end="97:20"><expr pos:start="97:5" pos:end="97:19"><name pos:start="97:5" pos:end="97:13">saved_ECX</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <name pos:start="97:17" pos:end="97:19">ECX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="104:0"><expr pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:7">ECX</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <name pos:start="99:11" pos:end="99:26"><name pos:start="99:11" pos:end="99:13">env</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:19">regs</name><index pos:start="99:20" pos:end="99:26">[<expr pos:start="99:21" pos:end="99:25"><name pos:start="99:21" pos:end="99:25">R_ECX</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="103:1" pos:end="103:14">#<cpp:directive pos:start="103:2" pos:end="103:6">ifdef</cpp:directive> <name pos:start="103:8" pos:end="103:14">reg_EDX</name></cpp:ifdef>

    <expr_stmt pos:start="105:5" pos:end="105:20"><expr pos:start="105:5" pos:end="105:19"><name pos:start="105:5" pos:end="105:13">saved_EDX</name> <operator pos:start="105:15" pos:end="105:15">=</operator> <name pos:start="105:17" pos:end="105:19">EDX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="112:0"><expr pos:start="107:5" pos:end="107:26"><name pos:start="107:5" pos:end="107:7">EDX</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <name pos:start="107:11" pos:end="107:26"><name pos:start="107:11" pos:end="107:13">env</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:19">regs</name><index pos:start="107:20" pos:end="107:26">[<expr pos:start="107:21" pos:end="107:25"><name pos:start="107:21" pos:end="107:25">R_EDX</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="111:1" pos:end="111:14">#<cpp:directive pos:start="111:2" pos:end="111:6">ifdef</cpp:directive> <name pos:start="111:8" pos:end="111:14">reg_EBX</name></cpp:ifdef>

    <expr_stmt pos:start="113:5" pos:end="113:20"><expr pos:start="113:5" pos:end="113:19"><name pos:start="113:5" pos:end="113:13">saved_EBX</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <name pos:start="113:17" pos:end="113:19">EBX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="120:0"><expr pos:start="115:5" pos:end="115:26"><name pos:start="115:5" pos:end="115:7">EBX</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <name pos:start="115:11" pos:end="115:26"><name pos:start="115:11" pos:end="115:13">env</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:19">regs</name><index pos:start="115:20" pos:end="115:26">[<expr pos:start="115:21" pos:end="115:25"><name pos:start="115:21" pos:end="115:25">R_EBX</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="119:1" pos:end="119:14">#<cpp:directive pos:start="119:2" pos:end="119:6">ifdef</cpp:directive> <name pos:start="119:8" pos:end="119:14">reg_ESP</name></cpp:ifdef>

    <expr_stmt pos:start="121:5" pos:end="121:20"><expr pos:start="121:5" pos:end="121:19"><name pos:start="121:5" pos:end="121:13">saved_ESP</name> <operator pos:start="121:15" pos:end="121:15">=</operator> <name pos:start="121:17" pos:end="121:19">ESP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="128:0"><expr pos:start="123:5" pos:end="123:26"><name pos:start="123:5" pos:end="123:7">ESP</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <name pos:start="123:11" pos:end="123:26"><name pos:start="123:11" pos:end="123:13">env</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:19">regs</name><index pos:start="123:20" pos:end="123:26">[<expr pos:start="123:21" pos:end="123:25"><name pos:start="123:21" pos:end="123:25">R_ESP</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="127:1" pos:end="127:14">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:14">reg_EBP</name></cpp:ifdef>

    <expr_stmt pos:start="129:5" pos:end="129:20"><expr pos:start="129:5" pos:end="129:19"><name pos:start="129:5" pos:end="129:13">saved_EBP</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <name pos:start="129:17" pos:end="129:19">EBP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="136:0"><expr pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:7">EBP</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <name pos:start="131:11" pos:end="131:26"><name pos:start="131:11" pos:end="131:13">env</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:19">regs</name><index pos:start="131:20" pos:end="131:26">[<expr pos:start="131:21" pos:end="131:25"><name pos:start="131:21" pos:end="131:25">R_EBP</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="135:1" pos:end="135:14">#<cpp:directive pos:start="135:2" pos:end="135:6">ifdef</cpp:directive> <name pos:start="135:8" pos:end="135:14">reg_ESI</name></cpp:ifdef>

    <expr_stmt pos:start="137:5" pos:end="137:20"><expr pos:start="137:5" pos:end="137:19"><name pos:start="137:5" pos:end="137:13">saved_ESI</name> <operator pos:start="137:15" pos:end="137:15">=</operator> <name pos:start="137:17" pos:end="137:19">ESI</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="144:0"><expr pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:7">ESI</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <name pos:start="139:11" pos:end="139:26"><name pos:start="139:11" pos:end="139:13">env</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:19">regs</name><index pos:start="139:20" pos:end="139:26">[<expr pos:start="139:21" pos:end="139:25"><name pos:start="139:21" pos:end="139:25">R_ESI</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="143:1" pos:end="143:14">#<cpp:directive pos:start="143:2" pos:end="143:6">ifdef</cpp:directive> <name pos:start="143:8" pos:end="143:14">reg_EDI</name></cpp:ifdef>

    <expr_stmt pos:start="145:5" pos:end="145:20"><expr pos:start="145:5" pos:end="145:19"><name pos:start="145:5" pos:end="145:13">saved_EDI</name> <operator pos:start="145:15" pos:end="145:15">=</operator> <name pos:start="145:17" pos:end="145:19">EDI</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="152:0"><expr pos:start="147:5" pos:end="147:26"><name pos:start="147:5" pos:end="147:7">EDI</name> <operator pos:start="147:9" pos:end="147:9">=</operator> <name pos:start="147:11" pos:end="147:26"><name pos:start="147:11" pos:end="147:13">env</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:19">regs</name><index pos:start="147:20" pos:end="147:26">[<expr pos:start="147:21" pos:end="147:25"><name pos:start="147:21" pos:end="147:25">R_EDI</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="151:1" pos:end="151:16">#<cpp:directive pos:start="151:2" pos:end="151:6">ifdef</cpp:directive> <name pos:start="151:8" pos:end="151:16">__sparc__</name></cpp:ifdef>

    <comment type="block" pos:start="153:5" pos:end="153:60">/* we also save i7 because longjmp may not restore it */</comment>

    <asm pos:start="155:5" pos:end="158:0">asm <specifier pos:start="155:9" pos:end="155:16">volatile</specifier> ("mov %%i7, %0" : "=r" (saved_i7));</asm>

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif>

    

    <comment type="block" pos:start="161:5" pos:end="161:44">/* put eflags in CPU temporary format */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:69"><expr pos:start="163:5" pos:end="163:68"><name pos:start="163:5" pos:end="163:10">CC_SRC</name> <operator pos:start="163:12" pos:end="163:12">=</operator> <name pos:start="163:14" pos:end="163:24"><name pos:start="163:14" pos:end="163:16">env</name><operator pos:start="163:17" pos:end="163:18">-&gt;</operator><name pos:start="163:19" pos:end="163:24">eflags</name></name> <operator pos:start="163:26" pos:end="163:26">&amp;</operator> <operator pos:start="163:28" pos:end="163:28">(</operator><name pos:start="163:29" pos:end="163:32">CC_O</name> <operator pos:start="163:34" pos:end="163:34">|</operator> <name pos:start="163:36" pos:end="163:39">CC_S</name> <operator pos:start="163:41" pos:end="163:41">|</operator> <name pos:start="163:43" pos:end="163:46">CC_Z</name> <operator pos:start="163:48" pos:end="163:48">|</operator> <name pos:start="163:50" pos:end="163:53">CC_A</name> <operator pos:start="163:55" pos:end="163:55">|</operator> <name pos:start="163:57" pos:end="163:60">CC_P</name> <operator pos:start="163:62" pos:end="163:62">|</operator> <name pos:start="163:64" pos:end="163:67">CC_C</name><operator pos:start="163:68" pos:end="163:68">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:45"><expr pos:start="165:5" pos:end="165:44"><name pos:start="165:5" pos:end="165:6">DF</name> <operator pos:start="165:8" pos:end="165:8">=</operator> <literal type="number" pos:start="165:10" pos:end="165:12">1</literal> <operator pos:start="165:12" pos:end="165:12">-</operator> <operator pos:start="165:14" pos:end="165:14">(</operator><literal type="number" pos:start="165:15" pos:end="165:15">2</literal> <operator pos:start="165:17" pos:end="165:17">*</operator> <operator pos:start="165:19" pos:end="165:19">(</operator><operator pos:start="165:20" pos:end="165:20">(</operator><name pos:start="165:21" pos:end="165:31"><name pos:start="165:21" pos:end="165:23">env</name><operator pos:start="165:24" pos:end="165:25">-&gt;</operator><name pos:start="165:26" pos:end="165:31">eflags</name></name> <operator pos:start="165:33" pos:end="165:34">&gt;&gt;</operator> <literal type="number" pos:start="165:36" pos:end="165:37">10</literal><operator pos:start="165:38" pos:end="165:38">)</operator> <operator pos:start="165:40" pos:end="165:40">&amp;</operator> <literal type="number" pos:start="165:42" pos:end="165:42">1</literal><operator pos:start="165:43" pos:end="165:43">)</operator><operator pos:start="165:44" pos:end="165:44">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:25"><expr pos:start="167:5" pos:end="167:24"><name pos:start="167:5" pos:end="167:9">CC_OP</name> <operator pos:start="167:11" pos:end="167:11">=</operator> <name pos:start="167:13" pos:end="167:24">CC_OP_EFLAGS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:72"><expr pos:start="169:5" pos:end="169:71"><name pos:start="169:5" pos:end="169:15"><name pos:start="169:5" pos:end="169:7">env</name><operator pos:start="169:8" pos:end="169:9">-&gt;</operator><name pos:start="169:10" pos:end="169:15">eflags</name></name> <operator pos:start="169:17" pos:end="169:18">&amp;=</operator> <operator pos:start="169:20" pos:end="169:20">~</operator><operator pos:start="169:21" pos:end="169:21">(</operator><name pos:start="169:22" pos:end="169:28">DF_MASK</name> <operator pos:start="169:30" pos:end="169:30">|</operator> <name pos:start="169:32" pos:end="169:35">CC_O</name> <operator pos:start="169:37" pos:end="169:37">|</operator> <name pos:start="169:39" pos:end="169:42">CC_S</name> <operator pos:start="169:44" pos:end="169:44">|</operator> <name pos:start="169:46" pos:end="169:49">CC_Z</name> <operator pos:start="169:51" pos:end="169:51">|</operator> <name pos:start="169:53" pos:end="169:56">CC_A</name> <operator pos:start="169:58" pos:end="169:58">|</operator> <name pos:start="169:60" pos:end="169:63">CC_P</name> <operator pos:start="169:65" pos:end="169:65">|</operator> <name pos:start="169:67" pos:end="169:70">CC_C</name><operator pos:start="169:71" pos:end="169:71">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:31"><expr pos:start="171:5" pos:end="171:30"><name pos:start="171:5" pos:end="171:26"><name pos:start="171:5" pos:end="171:7">env</name><operator pos:start="171:8" pos:end="171:9">-&gt;</operator><name pos:start="171:10" pos:end="171:26">interrupt_request</name></name> <operator pos:start="171:28" pos:end="171:28">=</operator> <literal type="number" pos:start="171:30" pos:end="171:30">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:55">/* prepare setjmp context for exception handling */</comment>

    <if_stmt pos:start="177:5" pos:end="409:5"><if pos:start="177:5" pos:end="409:5">if <condition pos:start="177:8" pos:end="177:34">(<expr pos:start="177:9" pos:end="177:33"><call pos:start="177:9" pos:end="177:28"><name pos:start="177:9" pos:end="177:14">setjmp</name><argument_list pos:start="177:15" pos:end="177:28">(<argument pos:start="177:16" pos:end="177:27"><expr pos:start="177:16" pos:end="177:27"><name pos:start="177:16" pos:end="177:27"><name pos:start="177:16" pos:end="177:18">env</name><operator pos:start="177:19" pos:end="177:20">-&gt;</operator><name pos:start="177:21" pos:end="177:27">jmp_env</name></name></expr></argument>)</argument_list></call> <operator pos:start="177:30" pos:end="177:31">==</operator> <literal type="number" pos:start="177:33" pos:end="177:33">0</literal></expr>)</condition> <block pos:start="177:36" pos:end="409:5">{<block_content pos:start="179:9" pos:end="407:9">

        <expr_stmt pos:start="179:9" pos:end="179:15"><expr pos:start="179:9" pos:end="179:14"><name pos:start="179:9" pos:end="179:10">T0</name> <operator pos:start="179:12" pos:end="179:12">=</operator> <literal type="number" pos:start="179:14" pos:end="179:14">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="179:17" pos:end="179:46">/* force lookup of first TB */</comment>

        <for pos:start="181:9" pos:end="407:9">for<control pos:start="181:12" pos:end="181:15">(<init pos:start="181:13" pos:end="181:13">;</init><condition pos:start="181:14" pos:end="181:14">;</condition><incr/>)</control> <block pos:start="181:17" pos:end="407:9">{<block_content pos:start="187:13" pos:end="406:0">

<cpp:ifdef pos:start="183:1" pos:end="183:16">#<cpp:directive pos:start="183:2" pos:end="183:6">ifdef</cpp:directive> <name pos:start="183:8" pos:end="183:16">__sparc__</name></cpp:ifdef>

	  <comment type="block" pos:start="185:11" pos:end="185:58">/* g1 can be modified by some libc? functions */</comment> 

	    <expr_stmt pos:start="187:13" pos:end="190:0"><expr pos:start="187:13" pos:end="187:23"><name pos:start="187:13" pos:end="187:18">tmp_T0</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <name pos:start="187:22" pos:end="187:23">T0</name></expr>;</expr_stmt>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>	    

            <if_stmt pos:start="191:13" pos:end="200:0"><if pos:start="191:13" pos:end="200:0">if <condition pos:start="191:16" pos:end="191:39">(<expr pos:start="191:17" pos:end="191:38"><name pos:start="191:17" pos:end="191:38"><name pos:start="191:17" pos:end="191:19">env</name><operator pos:start="191:20" pos:end="191:21">-&gt;</operator><name pos:start="191:22" pos:end="191:38">interrupt_request</name></name></expr>)</condition> <block pos:start="191:41" pos:end="200:0">{<block_content pos:start="193:17" pos:end="195:32">

                <expr_stmt pos:start="193:17" pos:end="193:54"><expr pos:start="193:17" pos:end="193:53"><name pos:start="193:17" pos:end="193:36"><name pos:start="193:17" pos:end="193:19">env</name><operator pos:start="193:20" pos:end="193:21">-&gt;</operator><name pos:start="193:22" pos:end="193:36">exception_index</name></name> <operator pos:start="193:38" pos:end="193:38">=</operator> <name pos:start="193:40" pos:end="193:53">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:32"><expr pos:start="195:17" pos:end="195:31"><call pos:start="195:17" pos:end="195:31"><name pos:start="195:17" pos:end="195:29">cpu_loop_exit</name><argument_list pos:start="195:30" pos:end="195:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="199:1" pos:end="199:17">#<cpp:directive pos:start="199:2" pos:end="199:6">ifdef</cpp:directive> <name pos:start="199:8" pos:end="199:17">DEBUG_EXEC</name></cpp:ifdef>

            <if_stmt pos:start="201:13" pos:end="232:0"><if pos:start="201:13" pos:end="232:0">if <condition pos:start="201:16" pos:end="201:25">(<expr pos:start="201:17" pos:end="201:24"><name pos:start="201:17" pos:end="201:24">loglevel</name></expr>)</condition> <block pos:start="201:27" pos:end="232:0">{<block_content pos:start="207:17" pos:end="227:84">

                <comment type="block" pos:start="203:17" pos:end="203:63">/* XXX: save all volatile state in cpu state */</comment>

                <comment type="block" pos:start="205:17" pos:end="205:54">/* restore flags in standard format */</comment>

                <expr_stmt pos:start="207:17" pos:end="207:39"><expr pos:start="207:17" pos:end="207:38"><name pos:start="207:17" pos:end="207:32"><name pos:start="207:17" pos:end="207:19">env</name><operator pos:start="207:20" pos:end="207:21">-&gt;</operator><name pos:start="207:22" pos:end="207:25">regs</name><index pos:start="207:26" pos:end="207:32">[<expr pos:start="207:27" pos:end="207:31"><name pos:start="207:27" pos:end="207:31">R_EAX</name></expr>]</index></name> <operator pos:start="207:34" pos:end="207:34">=</operator> <name pos:start="207:36" pos:end="207:38">EAX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:39"><expr pos:start="209:17" pos:end="209:38"><name pos:start="209:17" pos:end="209:32"><name pos:start="209:17" pos:end="209:19">env</name><operator pos:start="209:20" pos:end="209:21">-&gt;</operator><name pos:start="209:22" pos:end="209:25">regs</name><index pos:start="209:26" pos:end="209:32">[<expr pos:start="209:27" pos:end="209:31"><name pos:start="209:27" pos:end="209:31">R_EBX</name></expr>]</index></name> <operator pos:start="209:34" pos:end="209:34">=</operator> <name pos:start="209:36" pos:end="209:38">EBX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:39"><expr pos:start="211:17" pos:end="211:38"><name pos:start="211:17" pos:end="211:32"><name pos:start="211:17" pos:end="211:19">env</name><operator pos:start="211:20" pos:end="211:21">-&gt;</operator><name pos:start="211:22" pos:end="211:25">regs</name><index pos:start="211:26" pos:end="211:32">[<expr pos:start="211:27" pos:end="211:31"><name pos:start="211:27" pos:end="211:31">R_ECX</name></expr>]</index></name> <operator pos:start="211:34" pos:end="211:34">=</operator> <name pos:start="211:36" pos:end="211:38">ECX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:39"><expr pos:start="213:17" pos:end="213:38"><name pos:start="213:17" pos:end="213:32"><name pos:start="213:17" pos:end="213:19">env</name><operator pos:start="213:20" pos:end="213:21">-&gt;</operator><name pos:start="213:22" pos:end="213:25">regs</name><index pos:start="213:26" pos:end="213:32">[<expr pos:start="213:27" pos:end="213:31"><name pos:start="213:27" pos:end="213:31">R_EDX</name></expr>]</index></name> <operator pos:start="213:34" pos:end="213:34">=</operator> <name pos:start="213:36" pos:end="213:38">EDX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:39"><expr pos:start="215:17" pos:end="215:38"><name pos:start="215:17" pos:end="215:32"><name pos:start="215:17" pos:end="215:19">env</name><operator pos:start="215:20" pos:end="215:21">-&gt;</operator><name pos:start="215:22" pos:end="215:25">regs</name><index pos:start="215:26" pos:end="215:32">[<expr pos:start="215:27" pos:end="215:31"><name pos:start="215:27" pos:end="215:31">R_ESI</name></expr>]</index></name> <operator pos:start="215:34" pos:end="215:34">=</operator> <name pos:start="215:36" pos:end="215:38">ESI</name></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:39"><expr pos:start="217:17" pos:end="217:38"><name pos:start="217:17" pos:end="217:32"><name pos:start="217:17" pos:end="217:19">env</name><operator pos:start="217:20" pos:end="217:21">-&gt;</operator><name pos:start="217:22" pos:end="217:25">regs</name><index pos:start="217:26" pos:end="217:32">[<expr pos:start="217:27" pos:end="217:31"><name pos:start="217:27" pos:end="217:31">R_EDI</name></expr>]</index></name> <operator pos:start="217:34" pos:end="217:34">=</operator> <name pos:start="217:36" pos:end="217:38">EDI</name></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:39"><expr pos:start="219:17" pos:end="219:38"><name pos:start="219:17" pos:end="219:32"><name pos:start="219:17" pos:end="219:19">env</name><operator pos:start="219:20" pos:end="219:21">-&gt;</operator><name pos:start="219:22" pos:end="219:25">regs</name><index pos:start="219:26" pos:end="219:32">[<expr pos:start="219:27" pos:end="219:31"><name pos:start="219:27" pos:end="219:31">R_EBP</name></expr>]</index></name> <operator pos:start="219:34" pos:end="219:34">=</operator> <name pos:start="219:36" pos:end="219:38">EBP</name></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:39"><expr pos:start="221:17" pos:end="221:38"><name pos:start="221:17" pos:end="221:32"><name pos:start="221:17" pos:end="221:19">env</name><operator pos:start="221:20" pos:end="221:21">-&gt;</operator><name pos:start="221:22" pos:end="221:25">regs</name><index pos:start="221:26" pos:end="221:32">[<expr pos:start="221:27" pos:end="221:31"><name pos:start="221:27" pos:end="221:31">R_ESP</name></expr>]</index></name> <operator pos:start="221:34" pos:end="221:34">=</operator> <name pos:start="221:36" pos:end="221:38">ESP</name></expr>;</expr_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:91"><expr pos:start="223:17" pos:end="223:90"><name pos:start="223:17" pos:end="223:27"><name pos:start="223:17" pos:end="223:19">env</name><operator pos:start="223:20" pos:end="223:21">-&gt;</operator><name pos:start="223:22" pos:end="223:27">eflags</name></name> <operator pos:start="223:29" pos:end="223:29">=</operator> <name pos:start="223:31" pos:end="223:41"><name pos:start="223:31" pos:end="223:33">env</name><operator pos:start="223:34" pos:end="223:35">-&gt;</operator><name pos:start="223:36" pos:end="223:41">eflags</name></name> <operator pos:start="223:43" pos:end="223:43">|</operator> <name pos:start="223:45" pos:end="223:59"><name pos:start="223:45" pos:end="223:52">cc_table</name><index pos:start="223:53" pos:end="223:59">[<expr pos:start="223:54" pos:end="223:58"><name pos:start="223:54" pos:end="223:58">CC_OP</name></expr>]</index></name><operator pos:start="223:60" pos:end="223:60">.</operator><call pos:start="223:61" pos:end="223:73"><name pos:start="223:61" pos:end="223:71">compute_all</name><argument_list pos:start="223:72" pos:end="223:73">()</argument_list></call> <operator pos:start="223:75" pos:end="223:75">|</operator> <operator pos:start="223:77" pos:end="223:77">(</operator><name pos:start="223:78" pos:end="223:79">DF</name> <operator pos:start="223:81" pos:end="223:81">&amp;</operator> <name pos:start="223:83" pos:end="223:89">DF_MASK</name><operator pos:start="223:90" pos:end="223:90">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="225:17" pos:end="225:52"><expr pos:start="225:17" pos:end="225:51"><call pos:start="225:17" pos:end="225:51"><name pos:start="225:17" pos:end="225:34">cpu_x86_dump_state</name><argument_list pos:start="225:35" pos:end="225:51">(<argument pos:start="225:36" pos:end="225:38"><expr pos:start="225:36" pos:end="225:38"><name pos:start="225:36" pos:end="225:38">env</name></expr></argument>, <argument pos:start="225:41" pos:end="225:47"><expr pos:start="225:41" pos:end="225:47"><name pos:start="225:41" pos:end="225:47">logfile</name></expr></argument>, <argument pos:start="225:50" pos:end="225:50"><expr pos:start="225:50" pos:end="225:50"><literal type="number" pos:start="225:50" pos:end="225:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:84"><expr pos:start="227:17" pos:end="227:83"><name pos:start="227:17" pos:end="227:27"><name pos:start="227:17" pos:end="227:19">env</name><operator pos:start="227:20" pos:end="227:21">-&gt;</operator><name pos:start="227:22" pos:end="227:27">eflags</name></name> <operator pos:start="227:29" pos:end="227:30">&amp;=</operator> <operator pos:start="227:32" pos:end="227:32">~</operator><operator pos:start="227:33" pos:end="227:33">(</operator><name pos:start="227:34" pos:end="227:40">DF_MASK</name> <operator pos:start="227:42" pos:end="227:42">|</operator> <name pos:start="227:44" pos:end="227:47">CC_O</name> <operator pos:start="227:49" pos:end="227:49">|</operator> <name pos:start="227:51" pos:end="227:54">CC_S</name> <operator pos:start="227:56" pos:end="227:56">|</operator> <name pos:start="227:58" pos:end="227:61">CC_Z</name> <operator pos:start="227:63" pos:end="227:63">|</operator> <name pos:start="227:65" pos:end="227:68">CC_A</name> <operator pos:start="227:70" pos:end="227:70">|</operator> <name pos:start="227:72" pos:end="227:75">CC_P</name> <operator pos:start="227:77" pos:end="227:77">|</operator> <name pos:start="227:79" pos:end="227:82">CC_C</name><operator pos:start="227:83" pos:end="227:83">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="231:1" pos:end="231:6">#<cpp:directive pos:start="231:2" pos:end="231:6">endif</cpp:directive></cpp:endif>

            <comment type="block" pos:start="233:13" pos:end="235:58">/* we compute the CPU state. We assume it will not

               change during the whole generated block. */</comment>

            <expr_stmt pos:start="237:13" pos:end="237:76"><expr pos:start="237:13" pos:end="237:75"><name pos:start="237:13" pos:end="237:17">flags</name> <operator pos:start="237:19" pos:end="237:19">=</operator> <name pos:start="237:21" pos:end="237:40"><name pos:start="237:21" pos:end="237:23">env</name><operator pos:start="237:24" pos:end="237:25">-&gt;</operator><name pos:start="237:26" pos:end="237:34">seg_cache</name><index pos:start="237:35" pos:end="237:40">[<expr pos:start="237:36" pos:end="237:39"><name pos:start="237:36" pos:end="237:39">R_CS</name></expr>]</index></name><operator pos:start="237:41" pos:end="237:41">.</operator><name pos:start="237:42" pos:end="237:50">seg_32bit</name> <operator pos:start="237:52" pos:end="237:53">&lt;&lt;</operator> <name pos:start="237:55" pos:end="237:75">GEN_FLAG_CODE32_SHIFT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:75"><expr pos:start="239:13" pos:end="239:74"><name pos:start="239:13" pos:end="239:17">flags</name> <operator pos:start="239:19" pos:end="239:20">|=</operator> <name pos:start="239:22" pos:end="239:41"><name pos:start="239:22" pos:end="239:24">env</name><operator pos:start="239:25" pos:end="239:26">-&gt;</operator><name pos:start="239:27" pos:end="239:35">seg_cache</name><index pos:start="239:36" pos:end="239:41">[<expr pos:start="239:37" pos:end="239:40"><name pos:start="239:37" pos:end="239:40">R_SS</name></expr>]</index></name><operator pos:start="239:42" pos:end="239:42">.</operator><name pos:start="239:43" pos:end="239:51">seg_32bit</name> <operator pos:start="239:53" pos:end="239:54">&lt;&lt;</operator> <name pos:start="239:56" pos:end="239:74">GEN_FLAG_SS32_SHIFT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="247:38"><expr pos:start="241:13" pos:end="247:37"><name pos:start="241:13" pos:end="241:17">flags</name> <operator pos:start="241:19" pos:end="241:20">|=</operator> <operator pos:start="241:22" pos:end="241:22">(</operator><operator pos:start="241:23" pos:end="241:23">(</operator><operator pos:start="241:24" pos:end="241:24">(</operator><name pos:start="241:25" pos:end="241:32">unsigned</name> <name pos:start="241:34" pos:end="241:37">long</name><operator pos:start="241:38" pos:end="241:38">)</operator><name pos:start="241:39" pos:end="241:58"><name pos:start="241:39" pos:end="241:41">env</name><operator pos:start="241:42" pos:end="241:43">-&gt;</operator><name pos:start="241:44" pos:end="241:52">seg_cache</name><index pos:start="241:53" pos:end="241:58">[<expr pos:start="241:54" pos:end="241:57"><name pos:start="241:54" pos:end="241:57">R_DS</name></expr>]</index></name><operator pos:start="241:59" pos:end="241:59">.</operator><name pos:start="241:60" pos:end="241:63">base</name> <operator pos:start="241:65" pos:end="241:65">|</operator> 

                       <operator pos:start="243:24" pos:end="243:24">(</operator><name pos:start="243:25" pos:end="243:32">unsigned</name> <name pos:start="243:34" pos:end="243:37">long</name><operator pos:start="243:38" pos:end="243:38">)</operator><name pos:start="243:39" pos:end="243:58"><name pos:start="243:39" pos:end="243:41">env</name><operator pos:start="243:42" pos:end="243:43">-&gt;</operator><name pos:start="243:44" pos:end="243:52">seg_cache</name><index pos:start="243:53" pos:end="243:58">[<expr pos:start="243:54" pos:end="243:57"><name pos:start="243:54" pos:end="243:57">R_ES</name></expr>]</index></name><operator pos:start="243:59" pos:end="243:59">.</operator><name pos:start="243:60" pos:end="243:63">base</name> <operator pos:start="243:65" pos:end="243:65">|</operator>

                       <operator pos:start="245:24" pos:end="245:24">(</operator><name pos:start="245:25" pos:end="245:32">unsigned</name> <name pos:start="245:34" pos:end="245:37">long</name><operator pos:start="245:38" pos:end="245:38">)</operator><name pos:start="245:39" pos:end="245:58"><name pos:start="245:39" pos:end="245:41">env</name><operator pos:start="245:42" pos:end="245:43">-&gt;</operator><name pos:start="245:44" pos:end="245:52">seg_cache</name><index pos:start="245:53" pos:end="245:58">[<expr pos:start="245:54" pos:end="245:57"><name pos:start="245:54" pos:end="245:57">R_SS</name></expr>]</index></name><operator pos:start="245:59" pos:end="245:59">.</operator><name pos:start="245:60" pos:end="245:63">base</name><operator pos:start="245:64" pos:end="245:64">)</operator> <operator pos:start="245:66" pos:end="245:67">!=</operator> <literal type="number" pos:start="245:69" pos:end="245:69">0</literal><operator pos:start="245:70" pos:end="245:70">)</operator> <operator pos:start="245:72" pos:end="245:73">&lt;&lt;</operator> 

                <name pos:start="247:17" pos:end="247:37">GEN_FLAG_ADDSEG_SHIFT</name></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="261:13"><if pos:start="249:13" pos:end="253:13">if <condition pos:start="249:16" pos:end="249:41">(<expr pos:start="249:17" pos:end="249:40"><operator pos:start="249:17" pos:end="249:17">!</operator><operator pos:start="249:18" pos:end="249:18">(</operator><name pos:start="249:19" pos:end="249:29"><name pos:start="249:19" pos:end="249:21">env</name><operator pos:start="249:22" pos:end="249:23">-&gt;</operator><name pos:start="249:24" pos:end="249:29">eflags</name></name> <operator pos:start="249:31" pos:end="249:31">&amp;</operator> <name pos:start="249:33" pos:end="249:39">VM_MASK</name><operator pos:start="249:40" pos:end="249:40">)</operator></expr>)</condition> <block pos:start="249:43" pos:end="253:13">{<block_content pos:start="251:17" pos:end="251:69">

                <expr_stmt pos:start="251:17" pos:end="251:69"><expr pos:start="251:17" pos:end="251:68"><name pos:start="251:17" pos:end="251:21">flags</name> <operator pos:start="251:23" pos:end="251:24">|=</operator> <operator pos:start="251:26" pos:end="251:26">(</operator><name pos:start="251:27" pos:end="251:41"><name pos:start="251:27" pos:end="251:29">env</name><operator pos:start="251:30" pos:end="251:31">-&gt;</operator><name pos:start="251:32" pos:end="251:35">segs</name><index pos:start="251:36" pos:end="251:41">[<expr pos:start="251:37" pos:end="251:40"><name pos:start="251:37" pos:end="251:40">R_CS</name></expr>]</index></name> <operator pos:start="251:43" pos:end="251:43">&amp;</operator> <literal type="number" pos:start="251:45" pos:end="251:45">3</literal><operator pos:start="251:46" pos:end="251:46">)</operator> <operator pos:start="251:48" pos:end="251:49">&lt;&lt;</operator> <name pos:start="251:51" pos:end="251:68">GEN_FLAG_CPL_SHIFT</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="253:15" pos:end="261:13">else <block pos:start="253:20" pos:end="261:13">{<block_content pos:start="257:17" pos:end="259:51">

                <comment type="block" pos:start="255:17" pos:end="255:47">/* NOTE: a dummy CPL is kept */</comment>

                <expr_stmt pos:start="257:17" pos:end="257:50"><expr pos:start="257:17" pos:end="257:49"><name pos:start="257:17" pos:end="257:21">flags</name> <operator pos:start="257:23" pos:end="257:24">|=</operator> <operator pos:start="257:26" pos:end="257:26">(</operator><literal type="number" pos:start="257:27" pos:end="257:27">1</literal> <operator pos:start="257:29" pos:end="257:30">&lt;&lt;</operator> <name pos:start="257:32" pos:end="257:48">GEN_FLAG_VM_SHIFT</name><operator pos:start="257:49" pos:end="257:49">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="259:17" pos:end="259:51"><expr pos:start="259:17" pos:end="259:50"><name pos:start="259:17" pos:end="259:21">flags</name> <operator pos:start="259:23" pos:end="259:24">|=</operator> <operator pos:start="259:26" pos:end="259:26">(</operator><literal type="number" pos:start="259:27" pos:end="259:27">3</literal> <operator pos:start="259:29" pos:end="259:30">&lt;&lt;</operator> <name pos:start="259:32" pos:end="259:49">GEN_FLAG_CPL_SHIFT</name><operator pos:start="259:50" pos:end="259:50">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:59"><expr pos:start="263:13" pos:end="263:58"><name pos:start="263:13" pos:end="263:17">flags</name> <operator pos:start="263:19" pos:end="263:20">|=</operator> <operator pos:start="263:22" pos:end="263:22">(</operator><name pos:start="263:23" pos:end="263:33"><name pos:start="263:23" pos:end="263:25">env</name><operator pos:start="263:26" pos:end="263:27">-&gt;</operator><name pos:start="263:28" pos:end="263:33">eflags</name></name> <operator pos:start="263:35" pos:end="263:35">&amp;</operator> <operator pos:start="263:37" pos:end="263:37">(</operator><name pos:start="263:38" pos:end="263:46">IOPL_MASK</name> <operator pos:start="263:48" pos:end="263:48">|</operator> <name pos:start="263:50" pos:end="263:56">TF_MASK</name><operator pos:start="263:57" pos:end="263:57">)</operator><operator pos:start="263:58" pos:end="263:58">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:48"><expr pos:start="265:13" pos:end="265:47"><name pos:start="265:13" pos:end="265:19">cs_base</name> <operator pos:start="265:21" pos:end="265:21">=</operator> <name pos:start="265:23" pos:end="265:42"><name pos:start="265:23" pos:end="265:25">env</name><operator pos:start="265:26" pos:end="265:27">-&gt;</operator><name pos:start="265:28" pos:end="265:36">seg_cache</name><index pos:start="265:37" pos:end="265:42">[<expr pos:start="265:38" pos:end="265:41"><name pos:start="265:38" pos:end="265:41">R_CS</name></expr>]</index></name><operator pos:start="265:43" pos:end="265:43">.</operator><name pos:start="265:44" pos:end="265:47">base</name></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:36"><expr pos:start="267:13" pos:end="267:35"><name pos:start="267:13" pos:end="267:14">pc</name> <operator pos:start="267:16" pos:end="267:16">=</operator> <name pos:start="267:18" pos:end="267:24">cs_base</name> <operator pos:start="267:26" pos:end="267:26">+</operator> <name pos:start="267:28" pos:end="267:35"><name pos:start="267:28" pos:end="267:30">env</name><operator pos:start="267:31" pos:end="267:32">-&gt;</operator><name pos:start="267:33" pos:end="267:35">eip</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="271:32"><expr pos:start="269:13" pos:end="271:31"><name pos:start="269:13" pos:end="269:14">tb</name> <operator pos:start="269:16" pos:end="269:16">=</operator> <call pos:start="269:18" pos:end="271:31"><name pos:start="269:18" pos:end="269:24">tb_find</name><argument_list pos:start="269:25" pos:end="271:31">(<argument pos:start="269:26" pos:end="269:29"><expr pos:start="269:26" pos:end="269:29"><operator pos:start="269:26" pos:end="269:26">&amp;</operator><name pos:start="269:27" pos:end="269:29">ptb</name></expr></argument>, <argument pos:start="269:32" pos:end="269:48"><expr pos:start="269:32" pos:end="269:48"><operator pos:start="269:32" pos:end="269:32">(</operator><name pos:start="269:33" pos:end="269:40">unsigned</name> <name pos:start="269:42" pos:end="269:45">long</name><operator pos:start="269:46" pos:end="269:46">)</operator><name pos:start="269:47" pos:end="269:48">pc</name></expr></argument>, <argument pos:start="269:51" pos:end="269:72"><expr pos:start="269:51" pos:end="269:72"><operator pos:start="269:51" pos:end="269:51">(</operator><name pos:start="269:52" pos:end="269:59">unsigned</name> <name pos:start="269:61" pos:end="269:64">long</name><operator pos:start="269:65" pos:end="269:65">)</operator><name pos:start="269:66" pos:end="269:72">cs_base</name></expr></argument>, 

                         <argument pos:start="271:26" pos:end="271:30"><expr pos:start="271:26" pos:end="271:30"><name pos:start="271:26" pos:end="271:30">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="273:13" pos:end="336:0"><if pos:start="273:13" pos:end="336:0">if <condition pos:start="273:16" pos:end="273:20">(<expr pos:start="273:17" pos:end="273:19"><operator pos:start="273:17" pos:end="273:17">!</operator><name pos:start="273:18" pos:end="273:19">tb</name></expr>)</condition> <block pos:start="273:22" pos:end="336:0">{<block_content pos:start="275:17" pos:end="331:38">

                <expr_stmt pos:start="275:17" pos:end="275:36"><expr pos:start="275:17" pos:end="275:35"><call pos:start="275:17" pos:end="275:35"><name pos:start="275:17" pos:end="275:25">spin_lock</name><argument_list pos:start="275:26" pos:end="275:35">(<argument pos:start="275:27" pos:end="275:34"><expr pos:start="275:27" pos:end="275:34"><operator pos:start="275:27" pos:end="275:27">&amp;</operator><name pos:start="275:28" pos:end="275:34">tb_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="277:17" pos:end="277:76">/* if no translated code available, then translate it now */</comment>

                <expr_stmt pos:start="279:17" pos:end="279:49"><expr pos:start="279:17" pos:end="279:48"><name pos:start="279:17" pos:end="279:18">tb</name> <operator pos:start="279:20" pos:end="279:20">=</operator> <call pos:start="279:22" pos:end="279:48"><name pos:start="279:22" pos:end="279:29">tb_alloc</name><argument_list pos:start="279:30" pos:end="279:48">(<argument pos:start="279:31" pos:end="279:47"><expr pos:start="279:31" pos:end="279:47"><operator pos:start="279:31" pos:end="279:31">(</operator><name pos:start="279:32" pos:end="279:39">unsigned</name> <name pos:start="279:41" pos:end="279:44">long</name><operator pos:start="279:45" pos:end="279:45">)</operator><name pos:start="279:46" pos:end="279:47">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="281:17" pos:end="297:17"><if pos:start="281:17" pos:end="297:17">if <condition pos:start="281:20" pos:end="281:24">(<expr pos:start="281:21" pos:end="281:23"><operator pos:start="281:21" pos:end="281:21">!</operator><name pos:start="281:22" pos:end="281:23">tb</name></expr>)</condition> <block pos:start="281:26" pos:end="297:17">{<block_content pos:start="285:21" pos:end="295:27">

                    <comment type="block" pos:start="283:21" pos:end="283:44">/* flush must be done */</comment>

                    <expr_stmt pos:start="285:21" pos:end="285:31"><expr pos:start="285:21" pos:end="285:30"><call pos:start="285:21" pos:end="285:30"><name pos:start="285:21" pos:end="285:28">tb_flush</name><argument_list pos:start="285:29" pos:end="285:30">()</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="287:21" pos:end="287:51">/* cannot fail at this point */</comment>

                    <expr_stmt pos:start="289:21" pos:end="289:53"><expr pos:start="289:21" pos:end="289:52"><name pos:start="289:21" pos:end="289:22">tb</name> <operator pos:start="289:24" pos:end="289:24">=</operator> <call pos:start="289:26" pos:end="289:52"><name pos:start="289:26" pos:end="289:33">tb_alloc</name><argument_list pos:start="289:34" pos:end="289:52">(<argument pos:start="289:35" pos:end="289:51"><expr pos:start="289:35" pos:end="289:51"><operator pos:start="289:35" pos:end="289:35">(</operator><name pos:start="289:36" pos:end="289:43">unsigned</name> <name pos:start="289:45" pos:end="289:48">long</name><operator pos:start="289:49" pos:end="289:49">)</operator><name pos:start="289:50" pos:end="289:51">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="291:21" pos:end="291:69">/* don't forget to invalidate previous TB info */</comment>

                    <expr_stmt pos:start="293:21" pos:end="293:68"><expr pos:start="293:21" pos:end="293:67"><name pos:start="293:21" pos:end="293:23">ptb</name> <operator pos:start="293:25" pos:end="293:25">=</operator> <operator pos:start="293:27" pos:end="293:27">&amp;</operator><name pos:start="293:28" pos:end="293:67"><name pos:start="293:28" pos:end="293:34">tb_hash</name><index pos:start="293:35" pos:end="293:67">[<expr pos:start="293:36" pos:end="293:66"><call pos:start="293:36" pos:end="293:66"><name pos:start="293:36" pos:end="293:47">tb_hash_func</name><argument_list pos:start="293:48" pos:end="293:66">(<argument pos:start="293:49" pos:end="293:65"><expr pos:start="293:49" pos:end="293:65"><operator pos:start="293:49" pos:end="293:49">(</operator><name pos:start="293:50" pos:end="293:57">unsigned</name> <name pos:start="293:59" pos:end="293:62">long</name><operator pos:start="293:63" pos:end="293:63">)</operator><name pos:start="293:64" pos:end="293:65">pc</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:27"><expr pos:start="295:21" pos:end="295:26"><name pos:start="295:21" pos:end="295:22">T0</name> <operator pos:start="295:24" pos:end="295:24">=</operator> <literal type="number" pos:start="295:26" pos:end="295:26">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:38"><expr pos:start="299:17" pos:end="299:37"><name pos:start="299:17" pos:end="299:22">tc_ptr</name> <operator pos:start="299:24" pos:end="299:24">=</operator> <name pos:start="299:26" pos:end="299:37">code_gen_ptr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:36"><expr pos:start="301:17" pos:end="301:35"><name pos:start="301:17" pos:end="301:26"><name pos:start="301:17" pos:end="301:18">tb</name><operator pos:start="301:19" pos:end="301:20">-&gt;</operator><name pos:start="301:21" pos:end="301:26">tc_ptr</name></name> <operator pos:start="301:28" pos:end="301:28">=</operator> <name pos:start="301:30" pos:end="301:35">tc_ptr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="303:53"><expr pos:start="303:17" pos:end="303:52"><name pos:start="303:17" pos:end="303:27"><name pos:start="303:17" pos:end="303:18">tb</name><operator pos:start="303:19" pos:end="303:20">-&gt;</operator><name pos:start="303:21" pos:end="303:27">cs_base</name></name> <operator pos:start="303:29" pos:end="303:29">=</operator> <operator pos:start="303:31" pos:end="303:31">(</operator><name pos:start="303:32" pos:end="303:39">unsigned</name> <name pos:start="303:41" pos:end="303:44">long</name><operator pos:start="303:45" pos:end="303:45">)</operator><name pos:start="303:46" pos:end="303:52">cs_base</name></expr>;</expr_stmt>

                <expr_stmt pos:start="305:17" pos:end="305:34"><expr pos:start="305:17" pos:end="305:33"><name pos:start="305:17" pos:end="305:25"><name pos:start="305:17" pos:end="305:18">tb</name><operator pos:start="305:19" pos:end="305:20">-&gt;</operator><name pos:start="305:21" pos:end="305:25">flags</name></name> <operator pos:start="305:27" pos:end="305:27">=</operator> <name pos:start="305:29" pos:end="305:33">flags</name></expr>;</expr_stmt>

                <expr_stmt pos:start="307:17" pos:end="307:78"><expr pos:start="307:17" pos:end="307:77"><name pos:start="307:17" pos:end="307:19">ret</name> <operator pos:start="307:21" pos:end="307:21">=</operator> <call pos:start="307:23" pos:end="307:77"><name pos:start="307:23" pos:end="307:38">cpu_x86_gen_code</name><argument_list pos:start="307:39" pos:end="307:77">(<argument pos:start="307:40" pos:end="307:41"><expr pos:start="307:40" pos:end="307:41"><name pos:start="307:40" pos:end="307:41">tb</name></expr></argument>, <argument pos:start="307:44" pos:end="307:60"><expr pos:start="307:44" pos:end="307:60"><name pos:start="307:44" pos:end="307:60">CODE_GEN_MAX_SIZE</name></expr></argument>, <argument pos:start="307:63" pos:end="307:76"><expr pos:start="307:63" pos:end="307:76"><operator pos:start="307:63" pos:end="307:63">&amp;</operator><name pos:start="307:64" pos:end="307:76">code_gen_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="309:17" pos:end="309:55">/* if invalid instruction, signal it */</comment>

                <if_stmt pos:start="311:17" pos:end="321:17"><if pos:start="311:17" pos:end="321:17">if <condition pos:start="311:20" pos:end="311:29">(<expr pos:start="311:21" pos:end="311:28"><name pos:start="311:21" pos:end="311:23">ret</name> <operator pos:start="311:25" pos:end="311:26">!=</operator> <literal type="number" pos:start="311:28" pos:end="311:28">0</literal></expr>)</condition> <block pos:start="311:31" pos:end="321:17">{<block_content pos:start="317:21" pos:end="319:50">

                    <comment type="block" pos:start="313:21" pos:end="315:38">/* NOTE: the tb is allocated but not linked, so we

                       can leave it */</comment>

                    <expr_stmt pos:start="317:21" pos:end="317:42"><expr pos:start="317:21" pos:end="317:41"><call pos:start="317:21" pos:end="317:41"><name pos:start="317:21" pos:end="317:31">spin_unlock</name><argument_list pos:start="317:32" pos:end="317:41">(<argument pos:start="317:33" pos:end="317:40"><expr pos:start="317:33" pos:end="317:40"><operator pos:start="317:33" pos:end="317:33">&amp;</operator><name pos:start="317:34" pos:end="317:40">tb_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="319:21" pos:end="319:50"><expr pos:start="319:21" pos:end="319:49"><call pos:start="319:21" pos:end="319:49"><name pos:start="319:21" pos:end="319:35">raise_exception</name><argument_list pos:start="319:36" pos:end="319:49">(<argument pos:start="319:37" pos:end="319:48"><expr pos:start="319:37" pos:end="319:48"><name pos:start="319:37" pos:end="319:48">EXCP06_ILLOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="323:17" pos:end="323:26"><expr pos:start="323:17" pos:end="323:25"><operator pos:start="323:17" pos:end="323:17">*</operator><name pos:start="323:18" pos:end="323:20">ptb</name> <operator pos:start="323:22" pos:end="323:22">=</operator> <name pos:start="323:24" pos:end="323:25">tb</name></expr>;</expr_stmt>

                <expr_stmt pos:start="325:17" pos:end="325:37"><expr pos:start="325:17" pos:end="325:36"><name pos:start="325:17" pos:end="325:29"><name pos:start="325:17" pos:end="325:18">tb</name><operator pos:start="325:19" pos:end="325:20">-&gt;</operator><name pos:start="325:21" pos:end="325:29">hash_next</name></name> <operator pos:start="325:31" pos:end="325:31">=</operator> <name pos:start="325:33" pos:end="325:36">NULL</name></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:28"><expr pos:start="327:17" pos:end="327:27"><call pos:start="327:17" pos:end="327:27"><name pos:start="327:17" pos:end="327:23">tb_link</name><argument_list pos:start="327:24" pos:end="327:27">(<argument pos:start="327:25" pos:end="327:26"><expr pos:start="327:25" pos:end="327:26"><name pos:start="327:25" pos:end="327:26">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:132"><expr pos:start="329:17" pos:end="329:131"><name pos:start="329:17" pos:end="329:28">code_gen_ptr</name> <operator pos:start="329:30" pos:end="329:30">=</operator> <operator pos:start="329:32" pos:end="329:32">(</operator><name pos:start="329:33" pos:end="329:36">void</name> <operator pos:start="329:38" pos:end="329:38">*</operator><operator pos:start="329:39" pos:end="329:39">)</operator><operator pos:start="329:40" pos:end="329:40">(</operator><operator pos:start="329:41" pos:end="329:41">(</operator><operator pos:start="329:42" pos:end="329:42">(</operator><name pos:start="329:43" pos:end="329:50">unsigned</name> <name pos:start="329:52" pos:end="329:55">long</name><operator pos:start="329:56" pos:end="329:56">)</operator><name pos:start="329:57" pos:end="329:68">code_gen_ptr</name> <operator pos:start="329:70" pos:end="329:70">+</operator> <name pos:start="329:72" pos:end="329:84">code_gen_size</name> <operator pos:start="329:86" pos:end="329:86">+</operator> <name pos:start="329:88" pos:end="329:101">CODE_GEN_ALIGN</name> <operator pos:start="329:103" pos:end="329:103">-</operator> <literal type="number" pos:start="329:105" pos:end="329:105">1</literal><operator pos:start="329:106" pos:end="329:106">)</operator> <operator pos:start="329:108" pos:end="329:108">&amp;</operator> <operator pos:start="329:110" pos:end="329:110">~</operator><operator pos:start="329:111" pos:end="329:111">(</operator><name pos:start="329:112" pos:end="329:125">CODE_GEN_ALIGN</name> <operator pos:start="329:127" pos:end="329:127">-</operator> <literal type="number" pos:start="329:129" pos:end="329:129">1</literal><operator pos:start="329:130" pos:end="329:130">)</operator><operator pos:start="329:131" pos:end="329:131">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:38"><expr pos:start="331:17" pos:end="331:37"><call pos:start="331:17" pos:end="331:37"><name pos:start="331:17" pos:end="331:27">spin_unlock</name><argument_list pos:start="331:28" pos:end="331:37">(<argument pos:start="331:29" pos:end="331:36"><expr pos:start="331:29" pos:end="331:36"><operator pos:start="331:29" pos:end="331:29">&amp;</operator><name pos:start="331:30" pos:end="331:36">tb_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="335:1" pos:end="335:17">#<cpp:directive pos:start="335:2" pos:end="335:6">ifdef</cpp:directive> <name pos:start="335:8" pos:end="335:17">DEBUG_EXEC</name></cpp:ifdef>

	    <if_stmt pos:start="337:13" pos:end="350:0"><if pos:start="337:13" pos:end="350:0">if <condition pos:start="337:16" pos:end="337:25">(<expr pos:start="337:17" pos:end="337:24"><name pos:start="337:17" pos:end="337:24">loglevel</name></expr>)</condition> <block pos:start="337:27" pos:end="350:0">{<block_content pos:start="339:17" pos:end="343:55">

		<expr_stmt pos:start="339:17" pos:end="343:55"><expr pos:start="339:17" pos:end="343:54"><call pos:start="339:17" pos:end="343:54"><name pos:start="339:17" pos:end="339:23">fprintf</name><argument_list pos:start="339:24" pos:end="343:54">(<argument pos:start="339:25" pos:end="339:31"><expr pos:start="339:25" pos:end="339:31"><name pos:start="339:25" pos:end="339:31">logfile</name></expr></argument>, <argument pos:start="339:34" pos:end="339:63"><expr pos:start="339:34" pos:end="339:63"><literal type="string" pos:start="339:34" pos:end="339:63">"Trace 0x%08lx [0x%08lx] %s\n"</literal></expr></argument>,

			<argument pos:start="341:25" pos:end="341:40"><expr pos:start="341:25" pos:end="341:40"><operator pos:start="341:25" pos:end="341:25">(</operator><name pos:start="341:26" pos:end="341:29">long</name><operator pos:start="341:30" pos:end="341:30">)</operator><name pos:start="341:31" pos:end="341:40"><name pos:start="341:31" pos:end="341:32">tb</name><operator pos:start="341:33" pos:end="341:34">-&gt;</operator><name pos:start="341:35" pos:end="341:40">tc_ptr</name></name></expr></argument>, <argument pos:start="341:43" pos:end="341:54"><expr pos:start="341:43" pos:end="341:54"><operator pos:start="341:43" pos:end="341:43">(</operator><name pos:start="341:44" pos:end="341:47">long</name><operator pos:start="341:48" pos:end="341:48">)</operator><name pos:start="341:49" pos:end="341:54"><name pos:start="341:49" pos:end="341:50">tb</name><operator pos:start="341:51" pos:end="341:52">-&gt;</operator><name pos:start="341:53" pos:end="341:54">pc</name></name></expr></argument>,

			<argument pos:start="343:25" pos:end="343:53"><expr pos:start="343:25" pos:end="343:53"><call pos:start="343:25" pos:end="343:53"><name pos:start="343:25" pos:end="343:37">lookup_symbol</name><argument_list pos:start="343:38" pos:end="343:53">(<argument pos:start="343:39" pos:end="343:52"><expr pos:start="343:39" pos:end="343:52"><operator pos:start="343:39" pos:end="343:39">(</operator><name pos:start="343:40" pos:end="343:43">void</name> <operator pos:start="343:45" pos:end="343:45">*</operator><operator pos:start="343:46" pos:end="343:46">)</operator><name pos:start="343:47" pos:end="343:52"><name pos:start="343:47" pos:end="343:48">tb</name><operator pos:start="343:49" pos:end="343:50">-&gt;</operator><name pos:start="343:51" pos:end="343:52">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="347:1" pos:end="347:6">#<cpp:directive pos:start="347:2" pos:end="347:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="349:1" pos:end="349:16">#<cpp:directive pos:start="349:2" pos:end="349:6">ifdef</cpp:directive> <name pos:start="349:8" pos:end="349:16">__sparc__</name></cpp:ifdef>

	    <expr_stmt pos:start="351:13" pos:end="354:0"><expr pos:start="351:13" pos:end="351:23"><name pos:start="351:13" pos:end="351:14">T0</name> <operator pos:start="351:16" pos:end="351:16">=</operator> <name pos:start="351:18" pos:end="351:23">tmp_T0</name></expr>;</expr_stmt>

<cpp:endif pos:start="353:1" pos:end="353:6">#<cpp:directive pos:start="353:2" pos:end="353:6">endif</cpp:directive></cpp:endif>	    

            <comment type="block" pos:start="355:13" pos:end="355:52">/* see if we can patch the calling TB */</comment>

            <if_stmt pos:start="357:13" pos:end="365:13"><if pos:start="357:13" pos:end="365:13">if <condition pos:start="357:16" pos:end="357:52">(<expr pos:start="357:17" pos:end="357:51"><name pos:start="357:17" pos:end="357:18">T0</name> <operator pos:start="357:20" pos:end="357:21">!=</operator> <literal type="number" pos:start="357:23" pos:end="357:23">0</literal> <operator pos:start="357:25" pos:end="357:26">&amp;&amp;</operator> <operator pos:start="357:28" pos:end="357:28">!</operator><operator pos:start="357:29" pos:end="357:29">(</operator><name pos:start="357:30" pos:end="357:40"><name pos:start="357:30" pos:end="357:32">env</name><operator pos:start="357:33" pos:end="357:34">-&gt;</operator><name pos:start="357:35" pos:end="357:40">eflags</name></name> <operator pos:start="357:42" pos:end="357:42">&amp;</operator> <name pos:start="357:44" pos:end="357:50">TF_MASK</name><operator pos:start="357:51" pos:end="357:51">)</operator></expr>)</condition> <block pos:start="357:54" pos:end="365:13">{<block_content pos:start="359:17" pos:end="363:38">

                <expr_stmt pos:start="359:17" pos:end="359:36"><expr pos:start="359:17" pos:end="359:35"><call pos:start="359:17" pos:end="359:35"><name pos:start="359:17" pos:end="359:25">spin_lock</name><argument_list pos:start="359:26" pos:end="359:35">(<argument pos:start="359:27" pos:end="359:34"><expr pos:start="359:27" pos:end="359:34"><operator pos:start="359:27" pos:end="359:27">&amp;</operator><name pos:start="359:28" pos:end="359:34">tb_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="361:17" pos:end="361:71"><expr pos:start="361:17" pos:end="361:70"><call pos:start="361:17" pos:end="361:70"><name pos:start="361:17" pos:end="361:27">tb_add_jump</name><argument_list pos:start="361:28" pos:end="361:70">(<argument pos:start="361:29" pos:end="361:57"><expr pos:start="361:29" pos:end="361:57"><operator pos:start="361:29" pos:end="361:29">(</operator><name pos:start="361:30" pos:end="361:45">TranslationBlock</name> <operator pos:start="361:47" pos:end="361:47">*</operator><operator pos:start="361:48" pos:end="361:48">)</operator><operator pos:start="361:49" pos:end="361:49">(</operator><name pos:start="361:50" pos:end="361:51">T0</name> <operator pos:start="361:53" pos:end="361:53">&amp;</operator> <operator pos:start="361:55" pos:end="361:55">~</operator><literal type="number" pos:start="361:56" pos:end="361:56">3</literal><operator pos:start="361:57" pos:end="361:57">)</operator></expr></argument>, <argument pos:start="361:60" pos:end="361:65"><expr pos:start="361:60" pos:end="361:65"><name pos:start="361:60" pos:end="361:61">T0</name> <operator pos:start="361:63" pos:end="361:63">&amp;</operator> <literal type="number" pos:start="361:65" pos:end="361:65">3</literal></expr></argument>, <argument pos:start="361:68" pos:end="361:69"><expr pos:start="361:68" pos:end="361:69"><name pos:start="361:68" pos:end="361:69">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="363:17" pos:end="363:38"><expr pos:start="363:17" pos:end="363:37"><call pos:start="363:17" pos:end="363:37"><name pos:start="363:17" pos:end="363:27">spin_unlock</name><argument_list pos:start="363:28" pos:end="363:37">(<argument pos:start="363:29" pos:end="363:36"><expr pos:start="363:29" pos:end="363:36"><operator pos:start="363:29" pos:end="363:29">&amp;</operator><name pos:start="363:30" pos:end="363:36">tb_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:32"><expr pos:start="367:13" pos:end="367:31"><name pos:start="367:13" pos:end="367:18">tc_ptr</name> <operator pos:start="367:20" pos:end="367:20">=</operator> <name pos:start="367:22" pos:end="367:31"><name pos:start="367:22" pos:end="367:23">tb</name><operator pos:start="367:24" pos:end="367:25">-&gt;</operator><name pos:start="367:26" pos:end="367:31">tc_ptr</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="371:13" pos:end="371:44">/* execute the generated code */</comment>

            <expr_stmt pos:start="373:13" pos:end="376:0"><expr pos:start="373:13" pos:end="373:37"><name pos:start="373:13" pos:end="373:20">gen_func</name> <operator pos:start="373:22" pos:end="373:22">=</operator> <operator pos:start="373:24" pos:end="373:24">(</operator><name pos:start="373:25" pos:end="373:28">void</name> <operator pos:start="373:30" pos:end="373:30">*</operator><operator pos:start="373:31" pos:end="373:31">)</operator><name pos:start="373:32" pos:end="373:37">tc_ptr</name></expr>;</expr_stmt>

<cpp:if pos:start="375:1" pos:end="375:22">#<cpp:directive pos:start="375:2" pos:end="375:3">if</cpp:directive> <expr pos:start="375:5" pos:end="375:22"><call pos:start="375:5" pos:end="375:22"><name pos:start="375:5" pos:end="375:11">defined</name><argument_list pos:start="375:12" pos:end="375:22">(<argument pos:start="375:13" pos:end="375:21"><expr pos:start="375:13" pos:end="375:21"><name pos:start="375:13" pos:end="375:21">__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:if>

	    <asm pos:start="377:13" pos:end="388:0">__asm__ <specifier pos:start="377:21" pos:end="377:32">__volatile__</specifier>("call	%0\n\t"

				 "mov	%%o7,%%i0"

				 : <comment type="block" pos:start="381:36" pos:end="381:51">/* no outputs */</comment>

				 : "r" (gen_func) 

				 : "i0", "i1", "i2", "i3", "i4", "i5");</asm>

<cpp:elif pos:start="387:1" pos:end="387:22">#<cpp:directive pos:start="387:2" pos:end="387:5">elif</cpp:directive> <expr pos:start="387:7" pos:end="387:22"><call pos:start="387:7" pos:end="387:22"><name pos:start="387:7" pos:end="387:13">defined</name><argument_list pos:start="387:14" pos:end="387:22">(<argument pos:start="387:15" pos:end="387:21"><expr pos:start="387:15" pos:end="387:21"><name pos:start="387:15" pos:end="387:21">__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <asm pos:start="389:13" pos:end="402:0">asm <specifier pos:start="389:17" pos:end="389:24">volatile</specifier> ("mov pc, %0\n\t"

                          ".global exec_loop\n\t"

                          "exec_loop:\n\t"

                          : <comment type="block" pos:start="395:29" pos:end="395:44">/* no outputs */</comment>

                          : "r" (gen_func)

                          : "r1", "r2", "r3", "r8", "r9", "r10", "r12", "r14");</asm>

<cpp:else pos:start="401:1" pos:end="401:5">#<cpp:directive pos:start="401:2" pos:end="401:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="403:13" pos:end="406:0"><expr pos:start="403:13" pos:end="403:22"><call pos:start="403:13" pos:end="403:22"><name pos:start="403:13" pos:end="403:20">gen_func</name><argument_list pos:start="403:21" pos:end="403:22">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="405:1" pos:end="405:6">#<cpp:directive pos:start="405:2" pos:end="405:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="411:5" pos:end="411:31"><expr pos:start="411:5" pos:end="411:30"><name pos:start="411:5" pos:end="411:7">ret</name> <operator pos:start="411:9" pos:end="411:9">=</operator> <name pos:start="411:11" pos:end="411:30"><name pos:start="411:11" pos:end="411:13">env</name><operator pos:start="411:14" pos:end="411:15">-&gt;</operator><name pos:start="411:16" pos:end="411:30">exception_index</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="415:5" pos:end="415:42">/* restore flags in standard format */</comment>

    <expr_stmt pos:start="417:5" pos:end="424:0"><expr pos:start="417:5" pos:end="417:78"><name pos:start="417:5" pos:end="417:15"><name pos:start="417:5" pos:end="417:7">env</name><operator pos:start="417:8" pos:end="417:9">-&gt;</operator><name pos:start="417:10" pos:end="417:15">eflags</name></name> <operator pos:start="417:17" pos:end="417:17">=</operator> <name pos:start="417:19" pos:end="417:29"><name pos:start="417:19" pos:end="417:21">env</name><operator pos:start="417:22" pos:end="417:23">-&gt;</operator><name pos:start="417:24" pos:end="417:29">eflags</name></name> <operator pos:start="417:31" pos:end="417:31">|</operator> <name pos:start="417:33" pos:end="417:47"><name pos:start="417:33" pos:end="417:40">cc_table</name><index pos:start="417:41" pos:end="417:47">[<expr pos:start="417:42" pos:end="417:46"><name pos:start="417:42" pos:end="417:46">CC_OP</name></expr>]</index></name><operator pos:start="417:48" pos:end="417:48">.</operator><call pos:start="417:49" pos:end="417:61"><name pos:start="417:49" pos:end="417:59">compute_all</name><argument_list pos:start="417:60" pos:end="417:61">()</argument_list></call> <operator pos:start="417:63" pos:end="417:63">|</operator> <operator pos:start="417:65" pos:end="417:65">(</operator><name pos:start="417:66" pos:end="417:67">DF</name> <operator pos:start="417:69" pos:end="417:69">&amp;</operator> <name pos:start="417:71" pos:end="417:77">DF_MASK</name><operator pos:start="417:78" pos:end="417:78">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="421:5" pos:end="421:34">/* restore global registers */</comment>

<cpp:ifdef pos:start="423:1" pos:end="423:14">#<cpp:directive pos:start="423:2" pos:end="423:6">ifdef</cpp:directive> <name pos:start="423:8" pos:end="423:14">reg_EAX</name></cpp:ifdef>

    <expr_stmt pos:start="425:5" pos:end="430:0"><expr pos:start="425:5" pos:end="425:19"><name pos:start="425:5" pos:end="425:7">EAX</name> <operator pos:start="425:9" pos:end="425:9">=</operator> <name pos:start="425:11" pos:end="425:19">saved_EAX</name></expr>;</expr_stmt>

<cpp:endif pos:start="427:1" pos:end="427:6">#<cpp:directive pos:start="427:2" pos:end="427:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="429:1" pos:end="429:14">#<cpp:directive pos:start="429:2" pos:end="429:6">ifdef</cpp:directive> <name pos:start="429:8" pos:end="429:14">reg_ECX</name></cpp:ifdef>

    <expr_stmt pos:start="431:5" pos:end="436:0"><expr pos:start="431:5" pos:end="431:19"><name pos:start="431:5" pos:end="431:7">ECX</name> <operator pos:start="431:9" pos:end="431:9">=</operator> <name pos:start="431:11" pos:end="431:19">saved_ECX</name></expr>;</expr_stmt>

<cpp:endif pos:start="433:1" pos:end="433:6">#<cpp:directive pos:start="433:2" pos:end="433:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="435:1" pos:end="435:14">#<cpp:directive pos:start="435:2" pos:end="435:6">ifdef</cpp:directive> <name pos:start="435:8" pos:end="435:14">reg_EDX</name></cpp:ifdef>

    <expr_stmt pos:start="437:5" pos:end="442:0"><expr pos:start="437:5" pos:end="437:19"><name pos:start="437:5" pos:end="437:7">EDX</name> <operator pos:start="437:9" pos:end="437:9">=</operator> <name pos:start="437:11" pos:end="437:19">saved_EDX</name></expr>;</expr_stmt>

<cpp:endif pos:start="439:1" pos:end="439:6">#<cpp:directive pos:start="439:2" pos:end="439:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="441:1" pos:end="441:14">#<cpp:directive pos:start="441:2" pos:end="441:6">ifdef</cpp:directive> <name pos:start="441:8" pos:end="441:14">reg_EBX</name></cpp:ifdef>

    <expr_stmt pos:start="443:5" pos:end="448:0"><expr pos:start="443:5" pos:end="443:19"><name pos:start="443:5" pos:end="443:7">EBX</name> <operator pos:start="443:9" pos:end="443:9">=</operator> <name pos:start="443:11" pos:end="443:19">saved_EBX</name></expr>;</expr_stmt>

<cpp:endif pos:start="445:1" pos:end="445:6">#<cpp:directive pos:start="445:2" pos:end="445:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="447:1" pos:end="447:14">#<cpp:directive pos:start="447:2" pos:end="447:6">ifdef</cpp:directive> <name pos:start="447:8" pos:end="447:14">reg_ESP</name></cpp:ifdef>

    <expr_stmt pos:start="449:5" pos:end="454:0"><expr pos:start="449:5" pos:end="449:19"><name pos:start="449:5" pos:end="449:7">ESP</name> <operator pos:start="449:9" pos:end="449:9">=</operator> <name pos:start="449:11" pos:end="449:19">saved_ESP</name></expr>;</expr_stmt>

<cpp:endif pos:start="451:1" pos:end="451:6">#<cpp:directive pos:start="451:2" pos:end="451:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="453:1" pos:end="453:14">#<cpp:directive pos:start="453:2" pos:end="453:6">ifdef</cpp:directive> <name pos:start="453:8" pos:end="453:14">reg_EBP</name></cpp:ifdef>

    <expr_stmt pos:start="455:5" pos:end="460:0"><expr pos:start="455:5" pos:end="455:19"><name pos:start="455:5" pos:end="455:7">EBP</name> <operator pos:start="455:9" pos:end="455:9">=</operator> <name pos:start="455:11" pos:end="455:19">saved_EBP</name></expr>;</expr_stmt>

<cpp:endif pos:start="457:1" pos:end="457:6">#<cpp:directive pos:start="457:2" pos:end="457:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="459:1" pos:end="459:14">#<cpp:directive pos:start="459:2" pos:end="459:6">ifdef</cpp:directive> <name pos:start="459:8" pos:end="459:14">reg_ESI</name></cpp:ifdef>

    <expr_stmt pos:start="461:5" pos:end="466:0"><expr pos:start="461:5" pos:end="461:19"><name pos:start="461:5" pos:end="461:7">ESI</name> <operator pos:start="461:9" pos:end="461:9">=</operator> <name pos:start="461:11" pos:end="461:19">saved_ESI</name></expr>;</expr_stmt>

<cpp:endif pos:start="463:1" pos:end="463:6">#<cpp:directive pos:start="463:2" pos:end="463:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="465:1" pos:end="465:14">#<cpp:directive pos:start="465:2" pos:end="465:6">ifdef</cpp:directive> <name pos:start="465:8" pos:end="465:14">reg_EDI</name></cpp:ifdef>

    <expr_stmt pos:start="467:5" pos:end="472:0"><expr pos:start="467:5" pos:end="467:19"><name pos:start="467:5" pos:end="467:7">EDI</name> <operator pos:start="467:9" pos:end="467:9">=</operator> <name pos:start="467:11" pos:end="467:19">saved_EDI</name></expr>;</expr_stmt>

<cpp:endif pos:start="469:1" pos:end="469:6">#<cpp:directive pos:start="469:2" pos:end="469:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="471:1" pos:end="471:16">#<cpp:directive pos:start="471:2" pos:end="471:6">ifdef</cpp:directive> <name pos:start="471:8" pos:end="471:16">__sparc__</name></cpp:ifdef>

    <asm pos:start="473:5" pos:end="476:0">asm <specifier pos:start="473:9" pos:end="473:16">volatile</specifier> ("mov %0, %%i7" : : "r" (saved_i7));</asm>

<cpp:endif pos:start="475:1" pos:end="475:6">#<cpp:directive pos:start="475:2" pos:end="475:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="477:5" pos:end="477:18"><expr pos:start="477:5" pos:end="477:17"><name pos:start="477:5" pos:end="477:6">T0</name> <operator pos:start="477:8" pos:end="477:8">=</operator> <name pos:start="477:10" pos:end="477:17">saved_T0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="479:5" pos:end="479:18"><expr pos:start="479:5" pos:end="479:17"><name pos:start="479:5" pos:end="479:6">T1</name> <operator pos:start="479:8" pos:end="479:8">=</operator> <name pos:start="479:10" pos:end="479:17">saved_T1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="481:5" pos:end="481:18"><expr pos:start="481:5" pos:end="481:17"><name pos:start="481:5" pos:end="481:6">A0</name> <operator pos:start="481:8" pos:end="481:8">=</operator> <name pos:start="481:10" pos:end="481:17">saved_A0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="483:5" pos:end="483:20"><expr pos:start="483:5" pos:end="483:19"><name pos:start="483:5" pos:end="483:7">env</name> <operator pos:start="483:9" pos:end="483:9">=</operator> <name pos:start="483:11" pos:end="483:19">saved_env</name></expr>;</expr_stmt>

    <return pos:start="485:5" pos:end="485:15">return <expr pos:start="485:12" pos:end="485:14"><name pos:start="485:12" pos:end="485:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
