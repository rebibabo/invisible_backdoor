<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14527.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">pci_add_capability</name><parameter_list pos:start="1:23" pos:end="5:36">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:38"><name pos:start="1:24" pos:end="1:32">PCIDevice</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">pdev</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:54"><decl pos:start="1:41" pos:end="1:54"><type pos:start="1:41" pos:end="1:54"><name pos:start="1:41" pos:end="1:47">uint8_t</name></type> <name pos:start="1:49" pos:end="1:54">cap_id</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:37"><decl pos:start="3:24" pos:end="3:37"><type pos:start="3:24" pos:end="3:37"><name pos:start="3:24" pos:end="3:30">uint8_t</name></type> <name pos:start="3:32" pos:end="3:37">offset</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:51"><decl pos:start="3:40" pos:end="3:51"><type pos:start="3:40" pos:end="3:51"><name pos:start="3:40" pos:end="3:46">uint8_t</name></type> <name pos:start="3:48" pos:end="3:51">size</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:35"><decl pos:start="5:24" pos:end="5:35"><type pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:28">Error</name> <modifier pos:start="5:30" pos:end="5:30">*</modifier><modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:35">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="83:1">{<block_content pos:start="9:5" pos:end="81:18">

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:19">config</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:26">overlapping_cap</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="57:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:15">offset</name></expr>)</condition> <block pos:start="15:18" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:23">

        <expr_stmt pos:start="17:9" pos:end="17:44"><expr pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:14">offset</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <call pos:start="17:18" pos:end="17:43"><name pos:start="17:18" pos:end="17:31">pci_find_space</name><argument_list pos:start="17:32" pos:end="17:43">(<argument pos:start="17:33" pos:end="17:36"><expr pos:start="17:33" pos:end="17:36"><name pos:start="17:33" pos:end="17:36">pdev</name></expr></argument>, <argument pos:start="17:39" pos:end="17:42"><expr pos:start="17:39" pos:end="17:42"><name pos:start="17:39" pos:end="17:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="19:9" pos:end="19:58">/* out of PCI config space is programming error */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><call pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:14">assert</name><argument_list pos:start="21:15" pos:end="21:22">(<argument pos:start="21:16" pos:end="21:21"><expr pos:start="21:16" pos:end="21:21"><name pos:start="21:16" pos:end="21:21">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="57:5">else <block pos:start="23:12" pos:end="57:5">{<block_content pos:start="33:9" pos:end="55:9">

        <comment type="block" pos:start="25:9" pos:end="31:34">/* Verify that capabilities don't overlap.  Note: device assignment

         * depends on this check to verify that the device is not broken.

         * Should never trigger for emulated devices, but it's helpful

         * for debugging these. */</comment>

        <for pos:start="33:9" pos:end="55:9">for <control pos:start="33:13" pos:end="33:48">(<init pos:start="33:14" pos:end="33:24"><expr pos:start="33:14" pos:end="33:23"><name pos:start="33:14" pos:end="33:14">i</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:23">offset</name></expr>;</init> <condition pos:start="33:26" pos:end="33:43"><expr pos:start="33:26" pos:end="33:42"><name pos:start="33:26" pos:end="33:26">i</name> <operator pos:start="33:28" pos:end="33:28">&lt;</operator> <name pos:start="33:30" pos:end="33:35">offset</name> <operator pos:start="33:37" pos:end="33:37">+</operator> <name pos:start="33:39" pos:end="33:42">size</name></expr>;</condition> <incr pos:start="33:45" pos:end="33:47"><expr pos:start="33:45" pos:end="33:47"><name pos:start="33:45" pos:end="33:45">i</name><operator pos:start="33:46" pos:end="33:47">++</operator></expr></incr>)</control> <block pos:start="33:50" pos:end="55:9">{<block_content pos:start="35:13" pos:end="53:13">

            <expr_stmt pos:start="35:13" pos:end="35:69"><expr pos:start="35:13" pos:end="35:68"><name pos:start="35:13" pos:end="35:27">overlapping_cap</name> <operator pos:start="35:29" pos:end="35:29">=</operator> <call pos:start="35:31" pos:end="35:68"><name pos:start="35:31" pos:end="35:59">pci_find_capability_at_offset</name><argument_list pos:start="35:60" pos:end="35:68">(<argument pos:start="35:61" pos:end="35:64"><expr pos:start="35:61" pos:end="35:64"><name pos:start="35:61" pos:end="35:64">pdev</name></expr></argument>, <argument pos:start="35:67" pos:end="35:67"><expr pos:start="35:67" pos:end="35:67"><name pos:start="35:67" pos:end="35:67">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="53:13"><if pos:start="37:13" pos:end="53:13">if <condition pos:start="37:16" pos:end="37:32">(<expr pos:start="37:17" pos:end="37:31"><name pos:start="37:17" pos:end="37:31">overlapping_cap</name></expr>)</condition> <block pos:start="37:34" pos:end="53:13">{<block_content pos:start="39:17" pos:end="51:31">

                <expr_stmt pos:start="39:17" pos:end="49:63"><expr pos:start="39:17" pos:end="49:62"><call pos:start="39:17" pos:end="49:62"><name pos:start="39:17" pos:end="39:26">error_setg</name><argument_list pos:start="39:27" pos:end="49:62">(<argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">errp</name></expr></argument>, <argument pos:start="39:34" pos:end="43:76"><expr pos:start="39:34" pos:end="43:76"><literal type="string" pos:start="39:34" pos:end="39:51">"%s:%02x:%02x.%x "</literal>

                           <literal type="string" pos:start="41:28" pos:end="41:72">"Attempt to add PCI capability %x at offset "</literal>

                           <literal type="string" pos:start="43:28" pos:end="43:76">"%x overlaps existing capability %x at offset %x"</literal></expr></argument>,

                           <argument pos:start="45:28" pos:end="45:50"><expr pos:start="45:28" pos:end="45:50"><call pos:start="45:28" pos:end="45:50"><name pos:start="45:28" pos:end="45:44">pci_root_bus_path</name><argument_list pos:start="45:45" pos:end="45:50">(<argument pos:start="45:46" pos:end="45:49"><expr pos:start="45:46" pos:end="45:49"><name pos:start="45:46" pos:end="45:49">pdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="45:53" pos:end="45:74"><expr pos:start="45:53" pos:end="45:74"><call pos:start="45:53" pos:end="45:74"><name pos:start="45:53" pos:end="45:63">pci_bus_num</name><argument_list pos:start="45:64" pos:end="45:74">(<argument pos:start="45:65" pos:end="45:73"><expr pos:start="45:65" pos:end="45:73"><name pos:start="45:65" pos:end="45:73"><name pos:start="45:65" pos:end="45:68">pdev</name><operator pos:start="45:69" pos:end="45:70">-&gt;</operator><name pos:start="45:71" pos:end="45:73">bus</name></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="47:28" pos:end="47:48"><expr pos:start="47:28" pos:end="47:48"><call pos:start="47:28" pos:end="47:48"><name pos:start="47:28" pos:end="47:35">PCI_SLOT</name><argument_list pos:start="47:36" pos:end="47:48">(<argument pos:start="47:37" pos:end="47:47"><expr pos:start="47:37" pos:end="47:47"><name pos:start="47:37" pos:end="47:47"><name pos:start="47:37" pos:end="47:40">pdev</name><operator pos:start="47:41" pos:end="47:42">-&gt;</operator><name pos:start="47:43" pos:end="47:47">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:51" pos:end="47:71"><expr pos:start="47:51" pos:end="47:71"><call pos:start="47:51" pos:end="47:71"><name pos:start="47:51" pos:end="47:58">PCI_FUNC</name><argument_list pos:start="47:59" pos:end="47:71">(<argument pos:start="47:60" pos:end="47:70"><expr pos:start="47:60" pos:end="47:70"><name pos:start="47:60" pos:end="47:70"><name pos:start="47:60" pos:end="47:63">pdev</name><operator pos:start="47:64" pos:end="47:65">-&gt;</operator><name pos:start="47:66" pos:end="47:70">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><name pos:start="49:28" pos:end="49:33">cap_id</name></expr></argument>, <argument pos:start="49:36" pos:end="49:41"><expr pos:start="49:36" pos:end="49:41"><name pos:start="49:36" pos:end="49:41">offset</name></expr></argument>, <argument pos:start="49:44" pos:end="49:58"><expr pos:start="49:44" pos:end="49:58"><name pos:start="49:44" pos:end="49:58">overlapping_cap</name></expr></argument>, <argument pos:start="49:61" pos:end="49:61"><expr pos:start="49:61" pos:end="49:61"><name pos:start="49:61" pos:end="49:61">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="51:17" pos:end="51:31">return <expr pos:start="51:24" pos:end="51:30"><operator pos:start="51:24" pos:end="51:24">-</operator><name pos:start="51:25" pos:end="51:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:10">config</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <name pos:start="61:14" pos:end="61:25"><name pos:start="61:14" pos:end="61:17">pdev</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:25">config</name></name> <operator pos:start="61:27" pos:end="61:27">+</operator> <name pos:start="61:29" pos:end="61:34">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:10">config</name><index pos:start="63:11" pos:end="63:27">[<expr pos:start="63:12" pos:end="63:26"><name pos:start="63:12" pos:end="63:26">PCI_CAP_LIST_ID</name></expr>]</index></name> <operator pos:start="63:29" pos:end="63:29">=</operator> <name pos:start="63:31" pos:end="63:36">cap_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:66"><expr pos:start="65:5" pos:end="65:65"><name pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:10">config</name><index pos:start="65:11" pos:end="65:29">[<expr pos:start="65:12" pos:end="65:28"><name pos:start="65:12" pos:end="65:28">PCI_CAP_LIST_NEXT</name></expr>]</index></name> <operator pos:start="65:31" pos:end="65:31">=</operator> <name pos:start="65:33" pos:end="65:65"><name pos:start="65:33" pos:end="65:36">pdev</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:44">config</name><index pos:start="65:45" pos:end="65:65">[<expr pos:start="65:46" pos:end="65:64"><name pos:start="65:46" pos:end="65:64">PCI_CAPABILITY_LIST</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:47"><expr pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:37"><name pos:start="67:5" pos:end="67:8">pdev</name><operator pos:start="67:9" pos:end="67:10">-&gt;</operator><name pos:start="67:11" pos:end="67:16">config</name><index pos:start="67:17" pos:end="67:37">[<expr pos:start="67:18" pos:end="67:36"><name pos:start="67:18" pos:end="67:36">PCI_CAPABILITY_LIST</name></expr>]</index></name> <operator pos:start="67:39" pos:end="67:39">=</operator> <name pos:start="67:41" pos:end="67:46">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:52"><expr pos:start="69:5" pos:end="69:51"><name pos:start="69:5" pos:end="69:28"><name pos:start="69:5" pos:end="69:8">pdev</name><operator pos:start="69:9" pos:end="69:10">-&gt;</operator><name pos:start="69:11" pos:end="69:16">config</name><index pos:start="69:17" pos:end="69:28">[<expr pos:start="69:18" pos:end="69:27"><name pos:start="69:18" pos:end="69:27">PCI_STATUS</name></expr>]</index></name> <operator pos:start="69:30" pos:end="69:31">|=</operator> <name pos:start="69:33" pos:end="69:51">PCI_STATUS_CAP_LIST</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:62"><expr pos:start="71:5" pos:end="71:61"><call pos:start="71:5" pos:end="71:61"><name pos:start="71:5" pos:end="71:10">memset</name><argument_list pos:start="71:11" pos:end="71:61">(<argument pos:start="71:12" pos:end="71:30"><expr pos:start="71:12" pos:end="71:30"><name pos:start="71:12" pos:end="71:21"><name pos:start="71:12" pos:end="71:15">pdev</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:21">used</name></name> <operator pos:start="71:23" pos:end="71:23">+</operator> <name pos:start="71:25" pos:end="71:30">offset</name></expr></argument>, <argument pos:start="71:33" pos:end="71:36"><expr pos:start="71:33" pos:end="71:36"><literal type="number" pos:start="71:33" pos:end="71:36">0xFF</literal></expr></argument>, <argument pos:start="71:39" pos:end="71:60"><expr pos:start="71:39" pos:end="71:60"><call pos:start="71:39" pos:end="71:60"><name pos:start="71:39" pos:end="71:51">QEMU_ALIGN_UP</name><argument_list pos:start="71:52" pos:end="71:60">(<argument pos:start="71:53" pos:end="71:56"><expr pos:start="71:53" pos:end="71:56"><name pos:start="71:53" pos:end="71:56">size</name></expr></argument>, <argument pos:start="71:59" pos:end="71:59"><expr pos:start="71:59" pos:end="71:59"><literal type="number" pos:start="71:59" pos:end="71:59">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="73:5" pos:end="73:46">/* Make capability read-only by default */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:42"><expr pos:start="75:5" pos:end="75:41"><call pos:start="75:5" pos:end="75:41"><name pos:start="75:5" pos:end="75:10">memset</name><argument_list pos:start="75:11" pos:end="75:41">(<argument pos:start="75:12" pos:end="75:31"><expr pos:start="75:12" pos:end="75:31"><name pos:start="75:12" pos:end="75:22"><name pos:start="75:12" pos:end="75:15">pdev</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:22">wmask</name></name> <operator pos:start="75:24" pos:end="75:24">+</operator> <name pos:start="75:26" pos:end="75:31">offset</name></expr></argument>, <argument pos:start="75:34" pos:end="75:34"><expr pos:start="75:34" pos:end="75:34"><literal type="number" pos:start="75:34" pos:end="75:34">0</literal></expr></argument>, <argument pos:start="75:37" pos:end="75:40"><expr pos:start="75:37" pos:end="75:40"><name pos:start="75:37" pos:end="75:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="77:5" pos:end="77:37">/* Check capability by default */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:45"><expr pos:start="79:5" pos:end="79:44"><call pos:start="79:5" pos:end="79:44"><name pos:start="79:5" pos:end="79:10">memset</name><argument_list pos:start="79:11" pos:end="79:44">(<argument pos:start="79:12" pos:end="79:31"><expr pos:start="79:12" pos:end="79:31"><name pos:start="79:12" pos:end="79:22"><name pos:start="79:12" pos:end="79:15">pdev</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:22">cmask</name></name> <operator pos:start="79:24" pos:end="79:24">+</operator> <name pos:start="79:26" pos:end="79:31">offset</name></expr></argument>, <argument pos:start="79:34" pos:end="79:37"><expr pos:start="79:34" pos:end="79:37"><literal type="number" pos:start="79:34" pos:end="79:37">0xFF</literal></expr></argument>, <argument pos:start="79:40" pos:end="79:43"><expr pos:start="79:40" pos:end="79:43"><name pos:start="79:40" pos:end="79:43">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="81:5" pos:end="81:18">return <expr pos:start="81:12" pos:end="81:17"><name pos:start="81:12" pos:end="81:17">offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
