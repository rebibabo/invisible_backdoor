<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10473.c" pos:tabs="8"><function pos:start="1:1" pos:end="779:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">initFilter</name><parameter_list pos:start="1:22" pos:end="9:57">(<parameter pos:start="1:23" pos:end="1:41"><decl pos:start="1:23" pos:end="1:41"><type pos:start="1:23" pos:end="1:41"><name pos:start="1:23" pos:end="1:29">int16_t</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier><modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:41">outFilter</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:62"><decl pos:start="1:44" pos:end="1:62"><type pos:start="1:44" pos:end="1:62"><name pos:start="1:44" pos:end="1:50">int32_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier><modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:62">filterPos</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:40"><decl pos:start="3:23" pos:end="3:40"><type pos:start="3:23" pos:end="3:40"><name pos:start="3:23" pos:end="3:25">int</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:40">outFilterSize</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:50"><decl pos:start="3:43" pos:end="3:50"><type pos:start="3:43" pos:end="3:50"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:50">xInc</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:60"><decl pos:start="3:53" pos:end="3:60"><type pos:start="3:53" pos:end="3:60"><name pos:start="3:53" pos:end="3:55">int</name></type> <name pos:start="3:57" pos:end="3:60">srcW</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:70"><decl pos:start="3:63" pos:end="3:70"><type pos:start="3:63" pos:end="3:70"><name pos:start="3:63" pos:end="3:65">int</name></type> <name pos:start="3:67" pos:end="3:70">dstW</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:37"><decl pos:start="5:23" pos:end="5:37"><type pos:start="5:23" pos:end="5:37"><name pos:start="5:23" pos:end="5:25">int</name></type> <name pos:start="5:27" pos:end="5:37">filterAlign</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:46"><decl pos:start="5:40" pos:end="5:46"><type pos:start="5:40" pos:end="5:46"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:46">one</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:57"><decl pos:start="5:49" pos:end="5:57"><type pos:start="5:49" pos:end="5:57"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:57">flags</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:72"><decl pos:start="5:60" pos:end="5:72"><type pos:start="5:60" pos:end="5:72"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:72">cpu_flags</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:42"><decl pos:start="7:23" pos:end="7:42"><type pos:start="7:23" pos:end="7:42"><name pos:start="7:23" pos:end="7:31">SwsVector</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:42">srcFilter</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:64"><decl pos:start="7:45" pos:end="7:64"><type pos:start="7:45" pos:end="7:64"><name pos:start="7:45" pos:end="7:53">SwsVector</name> <modifier pos:start="7:55" pos:end="7:55">*</modifier></type><name pos:start="7:56" pos:end="7:64">dstFilter</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:37"><decl pos:start="9:23" pos:end="9:37"><type pos:start="9:23" pos:end="9:34"><name pos:start="9:23" pos:end="9:28">double</name></type> <name pos:start="9:30" pos:end="9:37"><name pos:start="9:30" pos:end="9:34">param</name><index pos:start="9:35" pos:end="9:37">[<expr pos:start="9:36" pos:end="9:36"><literal type="number" pos:start="9:36" pos:end="9:36">2</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="9:40" pos:end="9:56"><decl pos:start="9:40" pos:end="9:56"><type pos:start="9:40" pos:end="9:56"><name pos:start="9:40" pos:end="9:42">int</name></type> <name pos:start="9:44" pos:end="9:56">is_horizontal</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="779:1">{<block_content pos:start="13:5" pos:end="777:15">

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">filterSize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">filter2Size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:21">minFilterSize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">int64_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:19">filter</name>    <init pos:start="21:24" pos:end="21:29">= <expr pos:start="21:26" pos:end="21:29"><name pos:start="21:26" pos:end="21:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">int64_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:20">filter2</name>   <init pos:start="23:24" pos:end="23:29">= <expr pos:start="23:26" pos:end="23:29"><name pos:start="23:26" pos:end="23:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:35"><decl pos:start="25:5" pos:end="25:34"><type pos:start="25:5" pos:end="25:17"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:17">int64_t</name></type> <name pos:start="25:19" pos:end="25:22">fone</name> <init pos:start="25:24" pos:end="25:34">= <expr pos:start="25:26" pos:end="25:34"><literal type="number" pos:start="25:26" pos:end="25:28">1LL</literal> <operator pos:start="25:30" pos:end="25:31">&lt;&lt;</operator> <literal type="number" pos:start="25:33" pos:end="25:34">54</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">ret</name>            <init pos:start="27:24" pos:end="27:27">= <expr pos:start="27:26" pos:end="27:27"><operator pos:start="27:26" pos:end="27:26">-</operator><literal type="number" pos:start="27:27" pos:end="27:27">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:13"><expr pos:start="31:5" pos:end="31:12"><call pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:10">emms_c</name><argument_list pos:start="31:11" pos:end="31:12">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="31:15" pos:end="31:80">// FIXME should not be required but IS (even for non-MMX versions)</comment>



    <comment type="line" pos:start="35:5" pos:end="35:80">// NOTE: the +3 is for the MMX(+1) / SSE(+3) scaler which reads over the end</comment>

    <expr_stmt pos:start="37:5" pos:end="37:79"><expr pos:start="37:5" pos:end="37:78"><call pos:start="37:5" pos:end="37:78"><name pos:start="37:5" pos:end="37:20">FF_ALLOC_OR_GOTO</name><argument_list pos:start="37:21" pos:end="37:78">(<argument pos:start="37:22" pos:end="37:25"><expr pos:start="37:22" pos:end="37:25"><name pos:start="37:22" pos:end="37:25">NULL</name></expr></argument>, <argument pos:start="37:28" pos:end="37:37"><expr pos:start="37:28" pos:end="37:37"><operator pos:start="37:28" pos:end="37:28">*</operator><name pos:start="37:29" pos:end="37:37">filterPos</name></expr></argument>, <argument pos:start="37:40" pos:end="37:71"><expr pos:start="37:40" pos:end="37:71"><operator pos:start="37:40" pos:end="37:40">(</operator><name pos:start="37:41" pos:end="37:44">dstW</name> <operator pos:start="37:46" pos:end="37:46">+</operator> <literal type="number" pos:start="37:48" pos:end="37:48">3</literal><operator pos:start="37:49" pos:end="37:49">)</operator> <operator pos:start="37:51" pos:end="37:51">*</operator> <sizeof pos:start="37:53" pos:end="37:71">sizeof<argument_list pos:start="37:59" pos:end="37:71">(<argument pos:start="37:60" pos:end="37:70"><expr pos:start="37:60" pos:end="37:70"><operator pos:start="37:60" pos:end="37:60">*</operator><operator pos:start="37:61" pos:end="37:61">*</operator><name pos:start="37:62" pos:end="37:70">filterPos</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:74" pos:end="37:77"><expr pos:start="37:74" pos:end="37:77"><name pos:start="37:74" pos:end="37:77">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="401:5"><if pos:start="41:5" pos:end="61:5">if <condition pos:start="41:8" pos:end="41:35">(<expr pos:start="41:9" pos:end="41:34"><call pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:13">FFABS</name><argument_list pos:start="41:14" pos:end="41:29">(<argument pos:start="41:15" pos:end="41:28"><expr pos:start="41:15" pos:end="41:28"><name pos:start="41:15" pos:end="41:18">xInc</name> <operator pos:start="41:20" pos:end="41:20">-</operator> <literal type="number" pos:start="41:22" pos:end="41:28">0x10000</literal></expr></argument>)</argument_list></call> <operator pos:start="41:31" pos:end="41:31">&lt;</operator> <literal type="number" pos:start="41:33" pos:end="41:34">10</literal></expr>)</condition> <block pos:start="41:37" pos:end="61:5">{<block_content pos:start="43:9" pos:end="59:9"> <comment type="line" pos:start="41:39" pos:end="41:49">// unscaled</comment>

        <decl_stmt pos:start="43:9" pos:end="43:14"><decl pos:start="43:9" pos:end="43:13"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:23"><expr pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:18">filterSize</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <literal type="number" pos:start="45:22" pos:end="45:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="49:69"><expr pos:start="47:9" pos:end="49:68"><call pos:start="47:9" pos:end="49:68"><name pos:start="47:9" pos:end="47:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="47:26" pos:end="49:68">(<argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">NULL</name></expr></argument>, <argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:38">filter</name></expr></argument>,

                          <argument pos:start="49:27" pos:end="49:61"><expr pos:start="49:27" pos:end="49:61"><name pos:start="49:27" pos:end="49:30">dstW</name> <operator pos:start="49:32" pos:end="49:32">*</operator> <sizeof pos:start="49:34" pos:end="49:48">sizeof<argument_list pos:start="49:40" pos:end="49:48">(<argument pos:start="49:41" pos:end="49:47"><expr pos:start="49:41" pos:end="49:47"><operator pos:start="49:41" pos:end="49:41">*</operator><name pos:start="49:42" pos:end="49:47">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="49:50" pos:end="49:50">*</operator> <name pos:start="49:52" pos:end="49:61">filterSize</name></expr></argument>, <argument pos:start="49:64" pos:end="49:67"><expr pos:start="49:64" pos:end="49:67"><name pos:start="49:64" pos:end="49:67">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="53:9" pos:end="59:9">for <control pos:start="53:13" pos:end="53:34">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:29"><expr pos:start="53:21" pos:end="53:28"><name pos:start="53:21" pos:end="53:21">i</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <name pos:start="53:25" pos:end="53:28">dstW</name></expr>;</condition> <incr pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:31">i</name><operator pos:start="53:32" pos:end="53:33">++</operator></expr></incr>)</control> <block pos:start="53:36" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:39">

            <expr_stmt pos:start="55:13" pos:end="55:42"><expr pos:start="55:13" pos:end="55:41"><name pos:start="55:13" pos:end="55:34"><name pos:start="55:13" pos:end="55:18">filter</name><index pos:start="55:19" pos:end="55:34">[<expr pos:start="55:20" pos:end="55:33"><name pos:start="55:20" pos:end="55:20">i</name> <operator pos:start="55:22" pos:end="55:22">*</operator> <name pos:start="55:24" pos:end="55:33">filterSize</name></expr>]</index></name> <operator pos:start="55:36" pos:end="55:36">=</operator> <name pos:start="55:38" pos:end="55:41">fone</name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:39"><expr pos:start="57:13" pos:end="57:38"><operator pos:start="57:13" pos:end="57:13">(</operator><operator pos:start="57:14" pos:end="57:14">*</operator><name pos:start="57:15" pos:end="57:23">filterPos</name><operator pos:start="57:24" pos:end="57:24">)</operator><index pos:start="57:25" pos:end="57:27">[<expr pos:start="57:26" pos:end="57:26"><name pos:start="57:26" pos:end="57:26">i</name></expr>]</index>        <operator pos:start="57:36" pos:end="57:36">=</operator> <name pos:start="57:38" pos:end="57:38">i</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="91:5">else if <condition pos:start="61:15" pos:end="61:33">(<expr pos:start="61:16" pos:end="61:32"><name pos:start="61:16" pos:end="61:20">flags</name> <operator pos:start="61:22" pos:end="61:22">&amp;</operator> <name pos:start="61:24" pos:end="61:32">SWS_POINT</name></expr>)</condition> <block pos:start="61:35" pos:end="91:5">{<block_content pos:start="63:9" pos:end="89:9"> <comment type="line" pos:start="61:37" pos:end="61:71">// lame looking point sampling mode</comment>

        <decl_stmt pos:start="63:9" pos:end="63:14"><decl pos:start="63:9" pos:end="63:13"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:22"><decl pos:start="65:9" pos:end="65:21"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:21">xDstInSrc</name></decl>;</decl_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:23"><expr pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:18">filterSize</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <literal type="number" pos:start="67:22" pos:end="67:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="71:68"><expr pos:start="69:9" pos:end="71:67"><call pos:start="69:9" pos:end="71:67"><name pos:start="69:9" pos:end="69:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="69:25" pos:end="71:67">(<argument pos:start="69:26" pos:end="69:29"><expr pos:start="69:26" pos:end="69:29"><name pos:start="69:26" pos:end="69:29">NULL</name></expr></argument>, <argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:37">filter</name></expr></argument>,

                         <argument pos:start="71:26" pos:end="71:60"><expr pos:start="71:26" pos:end="71:60"><name pos:start="71:26" pos:end="71:29">dstW</name> <operator pos:start="71:31" pos:end="71:31">*</operator> <sizeof pos:start="71:33" pos:end="71:47">sizeof<argument_list pos:start="71:39" pos:end="71:47">(<argument pos:start="71:40" pos:end="71:46"><expr pos:start="71:40" pos:end="71:46"><operator pos:start="71:40" pos:end="71:40">*</operator><name pos:start="71:41" pos:end="71:46">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="71:49" pos:end="71:49">*</operator> <name pos:start="71:51" pos:end="71:60">filterSize</name></expr></argument>, <argument pos:start="71:63" pos:end="71:66"><expr pos:start="71:63" pos:end="71:66"><name pos:start="71:63" pos:end="71:66">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:17">xDstInSrc</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:24">xInc</name> <operator pos:start="75:26" pos:end="75:26">/</operator> <literal type="number" pos:start="75:28" pos:end="75:30">2</literal> <operator pos:start="75:30" pos:end="75:30">-</operator> <literal type="number" pos:start="75:32" pos:end="75:37">0x8000</literal></expr>;</expr_stmt>

        <for pos:start="77:9" pos:end="89:9">for <control pos:start="77:13" pos:end="77:34">(<init pos:start="77:14" pos:end="77:19"><expr pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:14">i</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</init> <condition pos:start="77:21" pos:end="77:29"><expr pos:start="77:21" pos:end="77:28"><name pos:start="77:21" pos:end="77:21">i</name> <operator pos:start="77:23" pos:end="77:23">&lt;</operator> <name pos:start="77:25" pos:end="77:28">dstW</name></expr>;</condition> <incr pos:start="77:31" pos:end="77:33"><expr pos:start="77:31" pos:end="77:33"><name pos:start="77:31" pos:end="77:31">i</name><operator pos:start="77:32" pos:end="77:33">++</operator></expr></incr>)</control> <block pos:start="77:36" pos:end="89:9">{<block_content pos:start="79:13" pos:end="87:35">

            <decl_stmt pos:start="79:13" pos:end="79:78"><decl pos:start="79:13" pos:end="79:77"><type pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">int</name></type> <name pos:start="79:17" pos:end="79:18">xx</name> <init pos:start="79:20" pos:end="79:77">= <expr pos:start="79:22" pos:end="79:77"><operator pos:start="79:22" pos:end="79:22">(</operator><name pos:start="79:23" pos:end="79:31">xDstInSrc</name> <operator pos:start="79:33" pos:end="79:33">-</operator> <operator pos:start="79:35" pos:end="79:35">(</operator><operator pos:start="79:36" pos:end="79:36">(</operator><name pos:start="79:37" pos:end="79:46">filterSize</name> <operator pos:start="79:48" pos:end="79:48">-</operator> <literal type="number" pos:start="79:50" pos:end="79:50">1</literal><operator pos:start="79:51" pos:end="79:51">)</operator> <operator pos:start="79:53" pos:end="79:54">&lt;&lt;</operator> <literal type="number" pos:start="79:56" pos:end="79:57">15</literal><operator pos:start="79:58" pos:end="79:58">)</operator> <operator pos:start="79:60" pos:end="79:60">+</operator> <operator pos:start="79:62" pos:end="79:62">(</operator><literal type="number" pos:start="79:63" pos:end="79:63">1</literal> <operator pos:start="79:65" pos:end="79:66">&lt;&lt;</operator> <literal type="number" pos:start="79:68" pos:end="79:69">15</literal><operator pos:start="79:70" pos:end="79:70">)</operator><operator pos:start="79:71" pos:end="79:71">)</operator> <operator pos:start="79:73" pos:end="79:74">&gt;&gt;</operator> <literal type="number" pos:start="79:76" pos:end="79:77">16</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:33"><expr pos:start="83:13" pos:end="83:32"><operator pos:start="83:13" pos:end="83:13">(</operator><operator pos:start="83:14" pos:end="83:14">*</operator><name pos:start="83:15" pos:end="83:23">filterPos</name><operator pos:start="83:24" pos:end="83:24">)</operator><index pos:start="83:25" pos:end="83:27">[<expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">i</name></expr>]</index> <operator pos:start="83:29" pos:end="83:29">=</operator> <name pos:start="83:31" pos:end="83:32">xx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:35"><expr pos:start="85:13" pos:end="85:34"><name pos:start="85:13" pos:end="85:21"><name pos:start="85:13" pos:end="85:18">filter</name><index pos:start="85:19" pos:end="85:21">[<expr pos:start="85:20" pos:end="85:20"><name pos:start="85:20" pos:end="85:20">i</name></expr>]</index></name>       <operator pos:start="85:29" pos:end="85:29">=</operator> <name pos:start="85:31" pos:end="85:34">fone</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:21">xDstInSrc</name>      <operator pos:start="87:28" pos:end="87:29">+=</operator> <name pos:start="87:31" pos:end="87:34">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="91:7" pos:end="141:5">else if <condition pos:start="91:15" pos:end="93:43">(<expr pos:start="91:16" pos:end="93:42"><operator pos:start="91:16" pos:end="91:16">(</operator><name pos:start="91:17" pos:end="91:20">xInc</name> <operator pos:start="91:22" pos:end="91:23">&lt;=</operator> <operator pos:start="91:25" pos:end="91:25">(</operator><literal type="number" pos:start="91:26" pos:end="91:26">1</literal> <operator pos:start="91:28" pos:end="91:29">&lt;&lt;</operator> <literal type="number" pos:start="91:31" pos:end="91:32">16</literal><operator pos:start="91:33" pos:end="91:33">)</operator> <operator pos:start="91:35" pos:end="91:36">&amp;&amp;</operator> <operator pos:start="91:38" pos:end="91:38">(</operator><name pos:start="91:39" pos:end="91:43">flags</name> <operator pos:start="91:45" pos:end="91:45">&amp;</operator> <name pos:start="91:47" pos:end="91:54">SWS_AREA</name><operator pos:start="91:55" pos:end="91:55">)</operator><operator pos:start="91:56" pos:end="91:56">)</operator> <operator pos:start="91:58" pos:end="91:59">||</operator>

               <operator pos:start="93:16" pos:end="93:16">(</operator><name pos:start="93:17" pos:end="93:21">flags</name> <operator pos:start="93:23" pos:end="93:23">&amp;</operator> <name pos:start="93:25" pos:end="93:41">SWS_FAST_BILINEAR</name><operator pos:start="93:42" pos:end="93:42">)</operator></expr>)</condition> <block pos:start="93:45" pos:end="141:5">{<block_content pos:start="95:9" pos:end="139:9"> <comment type="line" pos:start="93:47" pos:end="93:65">// bilinear upscale</comment>

        <decl_stmt pos:start="95:9" pos:end="95:14"><decl pos:start="95:9" pos:end="95:13"><type pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">int</name></type> <name pos:start="95:13" pos:end="95:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="97:9" pos:end="97:22"><decl pos:start="97:9" pos:end="97:21"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:21">xDstInSrc</name></decl>;</decl_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:23"><expr pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:18">filterSize</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <literal type="number" pos:start="99:22" pos:end="99:22">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="103:68"><expr pos:start="101:9" pos:end="103:67"><call pos:start="101:9" pos:end="103:67"><name pos:start="101:9" pos:end="101:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="101:25" pos:end="103:67">(<argument pos:start="101:26" pos:end="101:29"><expr pos:start="101:26" pos:end="101:29"><name pos:start="101:26" pos:end="101:29">NULL</name></expr></argument>, <argument pos:start="101:32" pos:end="101:37"><expr pos:start="101:32" pos:end="101:37"><name pos:start="101:32" pos:end="101:37">filter</name></expr></argument>,

                         <argument pos:start="103:26" pos:end="103:60"><expr pos:start="103:26" pos:end="103:60"><name pos:start="103:26" pos:end="103:29">dstW</name> <operator pos:start="103:31" pos:end="103:31">*</operator> <sizeof pos:start="103:33" pos:end="103:47">sizeof<argument_list pos:start="103:39" pos:end="103:47">(<argument pos:start="103:40" pos:end="103:46"><expr pos:start="103:40" pos:end="103:46"><operator pos:start="103:40" pos:end="103:40">*</operator><name pos:start="103:41" pos:end="103:46">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="103:49" pos:end="103:49">*</operator> <name pos:start="103:51" pos:end="103:60">filterSize</name></expr></argument>, <argument pos:start="103:63" pos:end="103:66"><expr pos:start="103:63" pos:end="103:66"><name pos:start="103:63" pos:end="103:66">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:38"><expr pos:start="107:9" pos:end="107:37"><name pos:start="107:9" pos:end="107:17">xDstInSrc</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <name pos:start="107:21" pos:end="107:24">xInc</name> <operator pos:start="107:26" pos:end="107:26">/</operator> <literal type="number" pos:start="107:28" pos:end="107:30">2</literal> <operator pos:start="107:30" pos:end="107:30">-</operator> <literal type="number" pos:start="107:32" pos:end="107:37">0x8000</literal></expr>;</expr_stmt>

        <for pos:start="109:9" pos:end="139:9">for <control pos:start="109:13" pos:end="109:34">(<init pos:start="109:14" pos:end="109:19"><expr pos:start="109:14" pos:end="109:18"><name pos:start="109:14" pos:end="109:14">i</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <literal type="number" pos:start="109:18" pos:end="109:18">0</literal></expr>;</init> <condition pos:start="109:21" pos:end="109:29"><expr pos:start="109:21" pos:end="109:28"><name pos:start="109:21" pos:end="109:21">i</name> <operator pos:start="109:23" pos:end="109:23">&lt;</operator> <name pos:start="109:25" pos:end="109:28">dstW</name></expr>;</condition> <incr pos:start="109:31" pos:end="109:33"><expr pos:start="109:31" pos:end="109:33"><name pos:start="109:31" pos:end="109:31">i</name><operator pos:start="109:32" pos:end="109:33">++</operator></expr></incr>)</control> <block pos:start="109:36" pos:end="139:9">{<block_content pos:start="111:13" pos:end="137:30">

            <decl_stmt pos:start="111:13" pos:end="111:78"><decl pos:start="111:13" pos:end="111:77"><type pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:15">int</name></type> <name pos:start="111:17" pos:end="111:18">xx</name> <init pos:start="111:20" pos:end="111:77">= <expr pos:start="111:22" pos:end="111:77"><operator pos:start="111:22" pos:end="111:22">(</operator><name pos:start="111:23" pos:end="111:31">xDstInSrc</name> <operator pos:start="111:33" pos:end="111:33">-</operator> <operator pos:start="111:35" pos:end="111:35">(</operator><operator pos:start="111:36" pos:end="111:36">(</operator><name pos:start="111:37" pos:end="111:46">filterSize</name> <operator pos:start="111:48" pos:end="111:48">-</operator> <literal type="number" pos:start="111:50" pos:end="111:50">1</literal><operator pos:start="111:51" pos:end="111:51">)</operator> <operator pos:start="111:53" pos:end="111:54">&lt;&lt;</operator> <literal type="number" pos:start="111:56" pos:end="111:57">15</literal><operator pos:start="111:58" pos:end="111:58">)</operator> <operator pos:start="111:60" pos:end="111:60">+</operator> <operator pos:start="111:62" pos:end="111:62">(</operator><literal type="number" pos:start="111:63" pos:end="111:63">1</literal> <operator pos:start="111:65" pos:end="111:66">&lt;&lt;</operator> <literal type="number" pos:start="111:68" pos:end="111:69">15</literal><operator pos:start="111:70" pos:end="111:70">)</operator><operator pos:start="111:71" pos:end="111:71">)</operator> <operator pos:start="111:73" pos:end="111:74">&gt;&gt;</operator> <literal type="number" pos:start="111:76" pos:end="111:77">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="113:13" pos:end="113:18"><decl pos:start="113:13" pos:end="113:17"><type pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">int</name></type> <name pos:start="113:17" pos:end="113:17">j</name></decl>;</decl_stmt>



            <expr_stmt pos:start="117:13" pos:end="117:33"><expr pos:start="117:13" pos:end="117:32"><operator pos:start="117:13" pos:end="117:13">(</operator><operator pos:start="117:14" pos:end="117:14">*</operator><name pos:start="117:15" pos:end="117:23">filterPos</name><operator pos:start="117:24" pos:end="117:24">)</operator><index pos:start="117:25" pos:end="117:27">[<expr pos:start="117:26" pos:end="117:26"><name pos:start="117:26" pos:end="117:26">i</name></expr>]</index> <operator pos:start="117:29" pos:end="117:29">=</operator> <name pos:start="117:31" pos:end="117:32">xx</name></expr>;</expr_stmt>

            <comment type="line" pos:start="119:13" pos:end="119:69">// bilinear upscale / linear interpolate / area averaging</comment>

            <for pos:start="121:13" pos:end="135:13">for <control pos:start="121:17" pos:end="121:44">(<init pos:start="121:18" pos:end="121:23"><expr pos:start="121:18" pos:end="121:22"><name pos:start="121:18" pos:end="121:18">j</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <literal type="number" pos:start="121:22" pos:end="121:22">0</literal></expr>;</init> <condition pos:start="121:25" pos:end="121:39"><expr pos:start="121:25" pos:end="121:38"><name pos:start="121:25" pos:end="121:25">j</name> <operator pos:start="121:27" pos:end="121:27">&lt;</operator> <name pos:start="121:29" pos:end="121:38">filterSize</name></expr>;</condition> <incr pos:start="121:41" pos:end="121:43"><expr pos:start="121:41" pos:end="121:43"><name pos:start="121:41" pos:end="121:41">j</name><operator pos:start="121:42" pos:end="121:43">++</operator></expr></incr>)</control> <block pos:start="121:46" pos:end="135:13">{<block_content pos:start="123:17" pos:end="133:21">

                <decl_stmt pos:start="123:17" pos:end="125:45"><decl pos:start="123:17" pos:end="125:44"><type pos:start="123:17" pos:end="123:23"><name pos:start="123:17" pos:end="123:23">int64_t</name></type> <name pos:start="123:25" pos:end="123:29">coeff</name> <init pos:start="123:31" pos:end="125:44">= <expr pos:start="123:33" pos:end="125:44"><name pos:start="123:33" pos:end="123:36">fone</name> <operator pos:start="123:38" pos:end="123:38">-</operator> <call pos:start="123:40" pos:end="123:68"><name pos:start="123:40" pos:end="123:44">FFABS</name><argument_list pos:start="123:45" pos:end="123:68">(<argument pos:start="123:46" pos:end="123:67"><expr pos:start="123:46" pos:end="123:67"><operator pos:start="123:46" pos:end="123:46">(</operator><name pos:start="123:47" pos:end="123:48">xx</name> <operator pos:start="123:50" pos:end="123:51">&lt;&lt;</operator> <literal type="number" pos:start="123:53" pos:end="123:54">16</literal><operator pos:start="123:55" pos:end="123:55">)</operator> <operator pos:start="123:57" pos:end="123:57">-</operator> <name pos:start="123:59" pos:end="123:67">xDstInSrc</name></expr></argument>)</argument_list></call> <operator pos:start="123:70" pos:end="123:70">*</operator>

                                <operator pos:start="125:33" pos:end="125:33">(</operator><name pos:start="125:34" pos:end="125:37">fone</name> <operator pos:start="125:39" pos:end="125:40">&gt;&gt;</operator> <literal type="number" pos:start="125:42" pos:end="125:43">16</literal><operator pos:start="125:44" pos:end="125:44">)</operator></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="127:17" pos:end="129:30"><if pos:start="127:17" pos:end="129:30">if <condition pos:start="127:20" pos:end="127:30">(<expr pos:start="127:21" pos:end="127:29"><name pos:start="127:21" pos:end="127:25">coeff</name> <operator pos:start="127:27" pos:end="127:27">&lt;</operator> <literal type="number" pos:start="127:29" pos:end="127:29">0</literal></expr>)</condition><block type="pseudo" pos:start="129:21" pos:end="129:30"><block_content pos:start="129:21" pos:end="129:30">

                    <expr_stmt pos:start="129:21" pos:end="129:30"><expr pos:start="129:21" pos:end="129:29"><name pos:start="129:21" pos:end="129:25">coeff</name> <operator pos:start="129:27" pos:end="129:27">=</operator> <literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:51"><expr pos:start="131:17" pos:end="131:50"><name pos:start="131:17" pos:end="131:42"><name pos:start="131:17" pos:end="131:22">filter</name><index pos:start="131:23" pos:end="131:42">[<expr pos:start="131:24" pos:end="131:41"><name pos:start="131:24" pos:end="131:24">i</name> <operator pos:start="131:26" pos:end="131:26">*</operator> <name pos:start="131:28" pos:end="131:37">filterSize</name> <operator pos:start="131:39" pos:end="131:39">+</operator> <name pos:start="131:41" pos:end="131:41">j</name></expr>]</index></name> <operator pos:start="131:44" pos:end="131:44">=</operator> <name pos:start="131:46" pos:end="131:50">coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:21"><expr pos:start="133:17" pos:end="133:20"><name pos:start="133:17" pos:end="133:18">xx</name><operator pos:start="133:19" pos:end="133:20">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="137:13" pos:end="137:30"><expr pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:21">xDstInSrc</name> <operator pos:start="137:23" pos:end="137:24">+=</operator> <name pos:start="137:26" pos:end="137:29">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="401:5">else <block pos:start="141:12" pos:end="401:5">{<block_content pos:start="143:9" pos:end="399:9">

        <decl_stmt pos:start="143:9" pos:end="143:26"><decl pos:start="143:9" pos:end="143:25"><type pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:15">int64_t</name></type> <name pos:start="143:17" pos:end="143:25">xDstInSrc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="145:23"><decl pos:start="145:9" pos:end="145:22"><type pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">int</name></type> <name pos:start="145:13" pos:end="145:22">sizeFactor</name></decl>;</decl_stmt>



        <if_stmt pos:start="149:9" pos:end="187:9"><if pos:start="149:9" pos:end="151:27">if <condition pos:start="149:12" pos:end="149:32">(<expr pos:start="149:13" pos:end="149:31"><name pos:start="149:13" pos:end="149:17">flags</name> <operator pos:start="149:19" pos:end="149:19">&amp;</operator> <name pos:start="149:21" pos:end="149:31">SWS_BICUBIC</name></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:27"><block_content pos:start="151:13" pos:end="151:27">

            <expr_stmt pos:start="151:13" pos:end="151:27"><expr pos:start="151:13" pos:end="151:26"><name pos:start="151:13" pos:end="151:22">sizeFactor</name> <operator pos:start="151:24" pos:end="151:24">=</operator> <literal type="number" pos:start="151:26" pos:end="151:26">4</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="153:9" pos:end="155:27">else if <condition pos:start="153:17" pos:end="153:31">(<expr pos:start="153:18" pos:end="153:30"><name pos:start="153:18" pos:end="153:22">flags</name> <operator pos:start="153:24" pos:end="153:24">&amp;</operator> <name pos:start="153:26" pos:end="153:30">SWS_X</name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:27"><block_content pos:start="155:13" pos:end="155:27">

            <expr_stmt pos:start="155:13" pos:end="155:27"><expr pos:start="155:13" pos:end="155:26"><name pos:start="155:13" pos:end="155:22">sizeFactor</name> <operator pos:start="155:24" pos:end="155:24">=</operator> <literal type="number" pos:start="155:26" pos:end="155:26">8</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="157:9" pos:end="159:27">else if <condition pos:start="157:17" pos:end="157:34">(<expr pos:start="157:18" pos:end="157:33"><name pos:start="157:18" pos:end="157:22">flags</name> <operator pos:start="157:24" pos:end="157:24">&amp;</operator> <name pos:start="157:26" pos:end="157:33">SWS_AREA</name></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:27"><block_content pos:start="159:13" pos:end="159:27">

            <expr_stmt pos:start="159:13" pos:end="159:27"><expr pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:22">sizeFactor</name> <operator pos:start="159:24" pos:end="159:24">=</operator> <literal type="number" pos:start="159:26" pos:end="159:26">1</literal></expr>;</expr_stmt></block_content></block></if>     <comment type="line" pos:start="159:33" pos:end="159:77">// downscale only, for upscale it is bilinear</comment>

        <if type="elseif" pos:start="161:9" pos:end="163:27">else if <condition pos:start="161:17" pos:end="161:35">(<expr pos:start="161:18" pos:end="161:34"><name pos:start="161:18" pos:end="161:22">flags</name> <operator pos:start="161:24" pos:end="161:24">&amp;</operator> <name pos:start="161:26" pos:end="161:34">SWS_GAUSS</name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:27"><block_content pos:start="163:13" pos:end="163:27">

            <expr_stmt pos:start="163:13" pos:end="163:27"><expr pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:22">sizeFactor</name> <operator pos:start="163:24" pos:end="163:24">=</operator> <literal type="number" pos:start="163:26" pos:end="163:26">8</literal></expr>;</expr_stmt></block_content></block></if>     <comment type="line" pos:start="163:33" pos:end="163:46">// infinite ;)</comment>

        <if type="elseif" pos:start="165:9" pos:end="167:80">else if <condition pos:start="165:17" pos:end="165:37">(<expr pos:start="165:18" pos:end="165:36"><name pos:start="165:18" pos:end="165:22">flags</name> <operator pos:start="165:24" pos:end="165:24">&amp;</operator> <name pos:start="165:26" pos:end="165:36">SWS_LANCZOS</name></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:80"><block_content pos:start="167:13" pos:end="167:80">

            <expr_stmt pos:start="167:13" pos:end="167:80"><expr pos:start="167:13" pos:end="167:79"><name pos:start="167:13" pos:end="167:22">sizeFactor</name> <operator pos:start="167:24" pos:end="167:24">=</operator> <ternary pos:start="167:26" pos:end="167:79"><condition pos:start="167:26" pos:end="167:56"><expr pos:start="167:26" pos:end="167:54"><name pos:start="167:26" pos:end="167:33"><name pos:start="167:26" pos:end="167:30">param</name><index pos:start="167:31" pos:end="167:33">[<expr pos:start="167:32" pos:end="167:32"><literal type="number" pos:start="167:32" pos:end="167:32">0</literal></expr>]</index></name> <operator pos:start="167:35" pos:end="167:36">!=</operator> <name pos:start="167:38" pos:end="167:54">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="167:58" pos:end="167:75"> <expr pos:start="167:58" pos:end="167:75"><call pos:start="167:58" pos:end="167:75"><name pos:start="167:58" pos:end="167:61">ceil</name><argument_list pos:start="167:62" pos:end="167:75">(<argument pos:start="167:63" pos:end="167:74"><expr pos:start="167:63" pos:end="167:74"><literal type="number" pos:start="167:63" pos:end="167:63">2</literal> <operator pos:start="167:65" pos:end="167:65">*</operator> <name pos:start="167:67" pos:end="167:74"><name pos:start="167:67" pos:end="167:71">param</name><index pos:start="167:72" pos:end="167:74">[<expr pos:start="167:73" pos:end="167:73"><literal type="number" pos:start="167:73" pos:end="167:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="167:77" pos:end="167:79">: <expr pos:start="167:79" pos:end="167:79"><literal type="number" pos:start="167:79" pos:end="167:79">6</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="169:9" pos:end="171:28">else if <condition pos:start="169:17" pos:end="169:34">(<expr pos:start="169:18" pos:end="169:33"><name pos:start="169:18" pos:end="169:22">flags</name> <operator pos:start="169:24" pos:end="169:24">&amp;</operator> <name pos:start="169:26" pos:end="169:33">SWS_SINC</name></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:28"><block_content pos:start="171:13" pos:end="171:28">

            <expr_stmt pos:start="171:13" pos:end="171:28"><expr pos:start="171:13" pos:end="171:27"><name pos:start="171:13" pos:end="171:22">sizeFactor</name> <operator pos:start="171:24" pos:end="171:24">=</operator> <literal type="number" pos:start="171:26" pos:end="171:27">20</literal></expr>;</expr_stmt></block_content></block></if>    <comment type="line" pos:start="171:33" pos:end="171:46">// infinite ;)</comment>

        <if type="elseif" pos:start="173:9" pos:end="175:28">else if <condition pos:start="173:17" pos:end="173:36">(<expr pos:start="173:18" pos:end="173:35"><name pos:start="173:18" pos:end="173:22">flags</name> <operator pos:start="173:24" pos:end="173:24">&amp;</operator> <name pos:start="173:26" pos:end="173:35">SWS_SPLINE</name></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:28"><block_content pos:start="175:13" pos:end="175:28">

            <expr_stmt pos:start="175:13" pos:end="175:28"><expr pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:22">sizeFactor</name> <operator pos:start="175:24" pos:end="175:24">=</operator> <literal type="number" pos:start="175:26" pos:end="175:27">20</literal></expr>;</expr_stmt></block_content></block></if>    <comment type="line" pos:start="175:33" pos:end="175:46">// infinite ;)</comment>

        <if type="elseif" pos:start="177:9" pos:end="179:27">else if <condition pos:start="177:17" pos:end="177:38">(<expr pos:start="177:18" pos:end="177:37"><name pos:start="177:18" pos:end="177:22">flags</name> <operator pos:start="177:24" pos:end="177:24">&amp;</operator> <name pos:start="177:26" pos:end="177:37">SWS_BILINEAR</name></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:27"><block_content pos:start="179:13" pos:end="179:27">

            <expr_stmt pos:start="179:13" pos:end="179:27"><expr pos:start="179:13" pos:end="179:26"><name pos:start="179:13" pos:end="179:22">sizeFactor</name> <operator pos:start="179:24" pos:end="179:24">=</operator> <literal type="number" pos:start="179:26" pos:end="179:26">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="181:9" pos:end="187:9">else <block pos:start="181:14" pos:end="187:9">{<block_content pos:start="183:13" pos:end="185:22">

            <expr_stmt pos:start="183:13" pos:end="183:27"><expr pos:start="183:13" pos:end="183:26"><name pos:start="183:13" pos:end="183:22">sizeFactor</name> <operator pos:start="183:24" pos:end="183:24">=</operator> <literal type="number" pos:start="183:26" pos:end="183:26">0</literal></expr>;</expr_stmt>     <comment type="line" pos:start="183:33" pos:end="183:53">// GCC warning killer</comment>

            <expr_stmt pos:start="185:13" pos:end="185:22"><expr pos:start="185:13" pos:end="185:21"><call pos:start="185:13" pos:end="185:21"><name pos:start="185:13" pos:end="185:18">assert</name><argument_list pos:start="185:19" pos:end="185:21">(<argument pos:start="185:20" pos:end="185:20"><expr pos:start="185:20" pos:end="185:20"><literal type="number" pos:start="185:20" pos:end="185:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="191:9" pos:end="197:67"><if pos:start="191:9" pos:end="193:40">if <condition pos:start="191:12" pos:end="191:28">(<expr pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:16">xInc</name> <operator pos:start="191:18" pos:end="191:19">&lt;=</operator> <literal type="number" pos:start="191:21" pos:end="191:21">1</literal> <operator pos:start="191:23" pos:end="191:24">&lt;&lt;</operator> <literal type="number" pos:start="191:26" pos:end="191:27">16</literal></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:40"><block_content pos:start="193:13" pos:end="193:40">

            <expr_stmt pos:start="193:13" pos:end="193:40"><expr pos:start="193:13" pos:end="193:39"><name pos:start="193:13" pos:end="193:22">filterSize</name> <operator pos:start="193:24" pos:end="193:24">=</operator> <literal type="number" pos:start="193:26" pos:end="193:28">1</literal> <operator pos:start="193:28" pos:end="193:28">+</operator> <name pos:start="193:30" pos:end="193:39">sizeFactor</name></expr>;</expr_stmt></block_content></block></if>    <comment type="line" pos:start="193:45" pos:end="193:54">// upscale</comment>

        <else pos:start="195:9" pos:end="197:67">else<block type="pseudo" pos:start="197:13" pos:end="197:67"><block_content pos:start="197:13" pos:end="197:67">

            <expr_stmt pos:start="197:13" pos:end="197:67"><expr pos:start="197:13" pos:end="197:66"><name pos:start="197:13" pos:end="197:22">filterSize</name> <operator pos:start="197:24" pos:end="197:24">=</operator> <literal type="number" pos:start="197:26" pos:end="197:28">1</literal> <operator pos:start="197:28" pos:end="197:28">+</operator> <operator pos:start="197:30" pos:end="197:30">(</operator><name pos:start="197:31" pos:end="197:40">sizeFactor</name> <operator pos:start="197:42" pos:end="197:42">*</operator> <name pos:start="197:44" pos:end="197:47">srcW</name> <operator pos:start="197:49" pos:end="197:49">+</operator> <name pos:start="197:51" pos:end="197:54">dstW</name> <operator pos:start="197:56" pos:end="197:56">-</operator> <literal type="number" pos:start="197:58" pos:end="197:58">1</literal><operator pos:start="197:59" pos:end="197:59">)</operator> <operator pos:start="197:61" pos:end="197:61">/</operator> <name pos:start="197:63" pos:end="197:66">dstW</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="201:9" pos:end="201:49"><expr pos:start="201:9" pos:end="201:48"><name pos:start="201:9" pos:end="201:18">filterSize</name> <operator pos:start="201:20" pos:end="201:20">=</operator> <call pos:start="201:22" pos:end="201:48"><name pos:start="201:22" pos:end="201:26">FFMIN</name><argument_list pos:start="201:27" pos:end="201:48">(<argument pos:start="201:28" pos:end="201:37"><expr pos:start="201:28" pos:end="201:37"><name pos:start="201:28" pos:end="201:37">filterSize</name></expr></argument>, <argument pos:start="201:40" pos:end="201:47"><expr pos:start="201:40" pos:end="201:47"><name pos:start="201:40" pos:end="201:43">srcW</name> <operator pos:start="201:45" pos:end="201:45">-</operator> <literal type="number" pos:start="201:47" pos:end="201:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:42"><expr pos:start="203:9" pos:end="203:41"><name pos:start="203:9" pos:end="203:18">filterSize</name> <operator pos:start="203:20" pos:end="203:20">=</operator> <call pos:start="203:22" pos:end="203:41"><name pos:start="203:22" pos:end="203:26">FFMAX</name><argument_list pos:start="203:27" pos:end="203:41">(<argument pos:start="203:28" pos:end="203:37"><expr pos:start="203:28" pos:end="203:37"><name pos:start="203:28" pos:end="203:37">filterSize</name></expr></argument>, <argument pos:start="203:40" pos:end="203:40"><expr pos:start="203:40" pos:end="203:40"><literal type="number" pos:start="203:40" pos:end="203:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="207:9" pos:end="209:68"><expr pos:start="207:9" pos:end="209:67"><call pos:start="207:9" pos:end="209:67"><name pos:start="207:9" pos:end="207:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="207:25" pos:end="209:67">(<argument pos:start="207:26" pos:end="207:29"><expr pos:start="207:26" pos:end="207:29"><name pos:start="207:26" pos:end="207:29">NULL</name></expr></argument>, <argument pos:start="207:32" pos:end="207:37"><expr pos:start="207:32" pos:end="207:37"><name pos:start="207:32" pos:end="207:37">filter</name></expr></argument>,

                         <argument pos:start="209:26" pos:end="209:60"><expr pos:start="209:26" pos:end="209:60"><name pos:start="209:26" pos:end="209:29">dstW</name> <operator pos:start="209:31" pos:end="209:31">*</operator> <sizeof pos:start="209:33" pos:end="209:47">sizeof<argument_list pos:start="209:39" pos:end="209:47">(<argument pos:start="209:40" pos:end="209:46"><expr pos:start="209:40" pos:end="209:46"><operator pos:start="209:40" pos:end="209:40">*</operator><name pos:start="209:41" pos:end="209:46">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="209:49" pos:end="209:49">*</operator> <name pos:start="209:51" pos:end="209:60">filterSize</name></expr></argument>, <argument pos:start="209:63" pos:end="209:66"><expr pos:start="209:63" pos:end="209:66"><name pos:start="209:63" pos:end="209:66">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="213:9" pos:end="213:35"><expr pos:start="213:9" pos:end="213:34"><name pos:start="213:9" pos:end="213:17">xDstInSrc</name> <operator pos:start="213:19" pos:end="213:19">=</operator> <name pos:start="213:21" pos:end="213:24">xInc</name> <operator pos:start="213:26" pos:end="213:26">-</operator> <literal type="number" pos:start="213:28" pos:end="213:34">0x10000</literal></expr>;</expr_stmt>

        <for pos:start="215:9" pos:end="399:9">for <control pos:start="215:13" pos:end="215:34">(<init pos:start="215:14" pos:end="215:19"><expr pos:start="215:14" pos:end="215:18"><name pos:start="215:14" pos:end="215:14">i</name> <operator pos:start="215:16" pos:end="215:16">=</operator> <literal type="number" pos:start="215:18" pos:end="215:18">0</literal></expr>;</init> <condition pos:start="215:21" pos:end="215:29"><expr pos:start="215:21" pos:end="215:28"><name pos:start="215:21" pos:end="215:21">i</name> <operator pos:start="215:23" pos:end="215:23">&lt;</operator> <name pos:start="215:25" pos:end="215:28">dstW</name></expr>;</condition> <incr pos:start="215:31" pos:end="215:33"><expr pos:start="215:31" pos:end="215:33"><name pos:start="215:31" pos:end="215:31">i</name><operator pos:start="215:32" pos:end="215:33">++</operator></expr></incr>)</control> <block pos:start="215:36" pos:end="399:9">{<block_content pos:start="217:13" pos:end="397:34">

            <decl_stmt pos:start="217:13" pos:end="217:72"><decl pos:start="217:13" pos:end="217:71"><type pos:start="217:13" pos:end="217:15"><name pos:start="217:13" pos:end="217:15">int</name></type> <name pos:start="217:17" pos:end="217:18">xx</name> <init pos:start="217:20" pos:end="217:71">= <expr pos:start="217:22" pos:end="217:71"><operator pos:start="217:22" pos:end="217:22">(</operator><name pos:start="217:23" pos:end="217:31">xDstInSrc</name> <operator pos:start="217:33" pos:end="217:33">-</operator> <operator pos:start="217:35" pos:end="217:35">(</operator><operator pos:start="217:36" pos:end="217:36">(</operator><name pos:start="217:37" pos:end="217:46">filterSize</name> <operator pos:start="217:48" pos:end="217:48">-</operator> <literal type="number" pos:start="217:50" pos:end="217:50">2</literal><operator pos:start="217:51" pos:end="217:51">)</operator> <operator pos:start="217:53" pos:end="217:54">&lt;&lt;</operator> <literal type="number" pos:start="217:56" pos:end="217:57">16</literal><operator pos:start="217:58" pos:end="217:58">)</operator><operator pos:start="217:59" pos:end="217:59">)</operator> <operator pos:start="217:61" pos:end="217:61">/</operator> <operator pos:start="217:63" pos:end="217:63">(</operator><literal type="number" pos:start="217:64" pos:end="217:64">1</literal> <operator pos:start="217:66" pos:end="217:67">&lt;&lt;</operator> <literal type="number" pos:start="217:69" pos:end="217:70">17</literal><operator pos:start="217:71" pos:end="217:71">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="219:13" pos:end="219:18"><decl pos:start="219:13" pos:end="219:17"><type pos:start="219:13" pos:end="219:15"><name pos:start="219:13" pos:end="219:15">int</name></type> <name pos:start="219:17" pos:end="219:17">j</name></decl>;</decl_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:33"><expr pos:start="221:13" pos:end="221:32"><operator pos:start="221:13" pos:end="221:13">(</operator><operator pos:start="221:14" pos:end="221:14">*</operator><name pos:start="221:15" pos:end="221:23">filterPos</name><operator pos:start="221:24" pos:end="221:24">)</operator><index pos:start="221:25" pos:end="221:27">[<expr pos:start="221:26" pos:end="221:26"><name pos:start="221:26" pos:end="221:26">i</name></expr>]</index> <operator pos:start="221:29" pos:end="221:29">=</operator> <name pos:start="221:31" pos:end="221:32">xx</name></expr>;</expr_stmt>

            <for pos:start="223:13" pos:end="395:13">for <control pos:start="223:17" pos:end="223:44">(<init pos:start="223:18" pos:end="223:23"><expr pos:start="223:18" pos:end="223:22"><name pos:start="223:18" pos:end="223:18">j</name> <operator pos:start="223:20" pos:end="223:20">=</operator> <literal type="number" pos:start="223:22" pos:end="223:22">0</literal></expr>;</init> <condition pos:start="223:25" pos:end="223:39"><expr pos:start="223:25" pos:end="223:38"><name pos:start="223:25" pos:end="223:25">j</name> <operator pos:start="223:27" pos:end="223:27">&lt;</operator> <name pos:start="223:29" pos:end="223:38">filterSize</name></expr>;</condition> <incr pos:start="223:41" pos:end="223:43"><expr pos:start="223:41" pos:end="223:43"><name pos:start="223:41" pos:end="223:41">j</name><operator pos:start="223:42" pos:end="223:43">++</operator></expr></incr>)</control> <block pos:start="223:46" pos:end="395:13">{<block_content pos:start="225:17" pos:end="393:21">

                <decl_stmt pos:start="225:17" pos:end="225:75"><decl pos:start="225:17" pos:end="225:74"><type pos:start="225:17" pos:end="225:23"><name pos:start="225:17" pos:end="225:23">int64_t</name></type> <name pos:start="225:25" pos:end="225:25">d</name> <init pos:start="225:27" pos:end="225:74">= <expr pos:start="225:29" pos:end="225:74"><operator pos:start="225:29" pos:end="225:29">(</operator><call pos:start="225:30" pos:end="225:67"><name pos:start="225:30" pos:end="225:34">FFABS</name><argument_list pos:start="225:35" pos:end="225:67">(<argument pos:start="225:36" pos:end="225:66"><expr pos:start="225:36" pos:end="225:66"><operator pos:start="225:36" pos:end="225:36">(</operator><operator pos:start="225:37" pos:end="225:37">(</operator><name pos:start="225:38" pos:end="225:44">int64_t</name><operator pos:start="225:45" pos:end="225:45">)</operator><name pos:start="225:46" pos:end="225:47">xx</name> <operator pos:start="225:49" pos:end="225:50">&lt;&lt;</operator> <literal type="number" pos:start="225:52" pos:end="225:53">17</literal><operator pos:start="225:54" pos:end="225:54">)</operator> <operator pos:start="225:56" pos:end="225:56">-</operator> <name pos:start="225:58" pos:end="225:66">xDstInSrc</name></expr></argument>)</argument_list></call><operator pos:start="225:68" pos:end="225:68">)</operator> <operator pos:start="225:70" pos:end="225:71">&lt;&lt;</operator> <literal type="number" pos:start="225:73" pos:end="225:74">13</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="227:17" pos:end="227:30"><decl pos:start="227:17" pos:end="227:29"><type pos:start="227:17" pos:end="227:22"><name pos:start="227:17" pos:end="227:22">double</name></type> <name pos:start="227:24" pos:end="227:29">floatd</name></decl>;</decl_stmt>

                <decl_stmt pos:start="229:17" pos:end="229:30"><decl pos:start="229:17" pos:end="229:29"><type pos:start="229:17" pos:end="229:23"><name pos:start="229:17" pos:end="229:23">int64_t</name></type> <name pos:start="229:25" pos:end="229:29">coeff</name></decl>;</decl_stmt>



                <if_stmt pos:start="233:17" pos:end="235:40"><if pos:start="233:17" pos:end="235:40">if <condition pos:start="233:20" pos:end="233:35">(<expr pos:start="233:21" pos:end="233:34"><name pos:start="233:21" pos:end="233:24">xInc</name> <operator pos:start="233:26" pos:end="233:26">&gt;</operator> <literal type="number" pos:start="233:28" pos:end="233:28">1</literal> <operator pos:start="233:30" pos:end="233:31">&lt;&lt;</operator> <literal type="number" pos:start="233:33" pos:end="233:34">16</literal></expr>)</condition><block type="pseudo" pos:start="235:21" pos:end="235:40"><block_content pos:start="235:21" pos:end="235:40">

                    <expr_stmt pos:start="235:21" pos:end="235:40"><expr pos:start="235:21" pos:end="235:39"><name pos:start="235:21" pos:end="235:21">d</name> <operator pos:start="235:23" pos:end="235:23">=</operator> <name pos:start="235:25" pos:end="235:25">d</name> <operator pos:start="235:27" pos:end="235:27">*</operator> <name pos:start="235:29" pos:end="235:32">dstW</name> <operator pos:start="235:34" pos:end="235:34">/</operator> <name pos:start="235:36" pos:end="235:39">srcW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:47"><expr pos:start="237:17" pos:end="237:46"><name pos:start="237:17" pos:end="237:22">floatd</name> <operator pos:start="237:24" pos:end="237:24">=</operator> <name pos:start="237:26" pos:end="237:26">d</name> <operator pos:start="237:28" pos:end="237:28">*</operator> <operator pos:start="237:30" pos:end="237:30">(</operator><literal type="number" pos:start="237:31" pos:end="237:33">1.0</literal> <operator pos:start="237:35" pos:end="237:35">/</operator> <operator pos:start="237:37" pos:end="237:37">(</operator><literal type="number" pos:start="237:38" pos:end="237:38">1</literal> <operator pos:start="237:40" pos:end="237:41">&lt;&lt;</operator> <literal type="number" pos:start="237:43" pos:end="237:44">30</literal><operator pos:start="237:45" pos:end="237:45">)</operator><operator pos:start="237:46" pos:end="237:46">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="241:17" pos:end="387:17"><if pos:start="241:17" pos:end="298:0">if <condition pos:start="241:20" pos:end="241:40">(<expr pos:start="241:21" pos:end="241:39"><name pos:start="241:21" pos:end="241:25">flags</name> <operator pos:start="241:27" pos:end="241:27">&amp;</operator> <name pos:start="241:29" pos:end="241:39">SWS_BICUBIC</name></expr>)</condition> <block pos:start="241:42" pos:end="298:0">{<block_content pos:start="243:21" pos:end="281:47">

                    <decl_stmt pos:start="243:21" pos:end="243:93"><decl pos:start="243:21" pos:end="243:92"><type pos:start="243:21" pos:end="243:27"><name pos:start="243:21" pos:end="243:27">int64_t</name></type> <name pos:start="243:29" pos:end="243:29">B</name> <init pos:start="243:31" pos:end="243:92">= <expr pos:start="243:33" pos:end="243:92"><operator pos:start="243:33" pos:end="243:33">(</operator><ternary pos:start="243:34" pos:end="243:79"><condition pos:start="243:34" pos:end="243:64"><expr pos:start="243:34" pos:end="243:62"><name pos:start="243:34" pos:end="243:41"><name pos:start="243:34" pos:end="243:38">param</name><index pos:start="243:39" pos:end="243:41">[<expr pos:start="243:40" pos:end="243:40"><literal type="number" pos:start="243:40" pos:end="243:40">0</literal></expr>]</index></name> <operator pos:start="243:43" pos:end="243:44">!=</operator> <name pos:start="243:46" pos:end="243:62">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="243:66" pos:end="243:73"> <expr pos:start="243:66" pos:end="243:73"><name pos:start="243:66" pos:end="243:73"><name pos:start="243:66" pos:end="243:70">param</name><index pos:start="243:71" pos:end="243:73">[<expr pos:start="243:72" pos:end="243:72"><literal type="number" pos:start="243:72" pos:end="243:72">0</literal></expr>]</index></name></expr> </then><else pos:start="243:75" pos:end="243:79">:   <expr pos:start="243:79" pos:end="243:79"><literal type="number" pos:start="243:79" pos:end="243:79">0</literal></expr></else></ternary><operator pos:start="243:80" pos:end="243:80">)</operator> <operator pos:start="243:82" pos:end="243:82">*</operator> <operator pos:start="243:84" pos:end="243:84">(</operator><literal type="number" pos:start="243:85" pos:end="243:85">1</literal> <operator pos:start="243:87" pos:end="243:88">&lt;&lt;</operator> <literal type="number" pos:start="243:90" pos:end="243:91">24</literal><operator pos:start="243:92" pos:end="243:92">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="245:21" pos:end="245:93"><decl pos:start="245:21" pos:end="245:92"><type pos:start="245:21" pos:end="245:27"><name pos:start="245:21" pos:end="245:27">int64_t</name></type> <name pos:start="245:29" pos:end="245:29">C</name> <init pos:start="245:31" pos:end="245:92">= <expr pos:start="245:33" pos:end="245:92"><operator pos:start="245:33" pos:end="245:33">(</operator><ternary pos:start="245:34" pos:end="245:79"><condition pos:start="245:34" pos:end="245:64"><expr pos:start="245:34" pos:end="245:62"><name pos:start="245:34" pos:end="245:41"><name pos:start="245:34" pos:end="245:38">param</name><index pos:start="245:39" pos:end="245:41">[<expr pos:start="245:40" pos:end="245:40"><literal type="number" pos:start="245:40" pos:end="245:40">1</literal></expr>]</index></name> <operator pos:start="245:43" pos:end="245:44">!=</operator> <name pos:start="245:46" pos:end="245:62">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="245:66" pos:end="245:73"> <expr pos:start="245:66" pos:end="245:73"><name pos:start="245:66" pos:end="245:73"><name pos:start="245:66" pos:end="245:70">param</name><index pos:start="245:71" pos:end="245:73">[<expr pos:start="245:72" pos:end="245:72"><literal type="number" pos:start="245:72" pos:end="245:72">1</literal></expr>]</index></name></expr> </then><else pos:start="245:75" pos:end="245:79">: <expr pos:start="245:77" pos:end="245:79"><literal type="number" pos:start="245:77" pos:end="245:79">0.6</literal></expr></else></ternary><operator pos:start="245:80" pos:end="245:80">)</operator> <operator pos:start="245:82" pos:end="245:82">*</operator> <operator pos:start="245:84" pos:end="245:84">(</operator><literal type="number" pos:start="245:85" pos:end="245:85">1</literal> <operator pos:start="245:87" pos:end="245:88">&lt;&lt;</operator> <literal type="number" pos:start="245:90" pos:end="245:91">24</literal><operator pos:start="245:92" pos:end="245:92">)</operator></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="249:21" pos:end="279:21"><if pos:start="249:21" pos:end="253:21">if <condition pos:start="249:24" pos:end="249:39">(<expr pos:start="249:25" pos:end="249:38"><name pos:start="249:25" pos:end="249:25">d</name> <operator pos:start="249:27" pos:end="249:28">&gt;=</operator> <literal type="number" pos:start="249:30" pos:end="249:32">1LL</literal> <operator pos:start="249:34" pos:end="249:35">&lt;&lt;</operator> <literal type="number" pos:start="249:37" pos:end="249:38">31</literal></expr>)</condition> <block pos:start="249:41" pos:end="253:21">{<block_content pos:start="251:25" pos:end="251:36">

                        <expr_stmt pos:start="251:25" pos:end="251:36"><expr pos:start="251:25" pos:end="251:35"><name pos:start="251:25" pos:end="251:29">coeff</name> <operator pos:start="251:31" pos:end="251:31">=</operator> <literal type="number" pos:start="251:33" pos:end="251:35">0.0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="253:23" pos:end="279:21">else <block pos:start="253:28" pos:end="279:21">{<block_content pos:start="255:25" pos:end="277:67">

                        <decl_stmt pos:start="255:25" pos:end="255:53"><decl pos:start="255:25" pos:end="255:52"><type pos:start="255:25" pos:end="255:31"><name pos:start="255:25" pos:end="255:31">int64_t</name></type> <name pos:start="255:33" pos:end="255:34">dd</name>  <init pos:start="255:37" pos:end="255:52">= <expr pos:start="255:39" pos:end="255:52"><operator pos:start="255:39" pos:end="255:39">(</operator><name pos:start="255:40" pos:end="255:40">d</name>  <operator pos:start="255:43" pos:end="255:43">*</operator> <name pos:start="255:45" pos:end="255:45">d</name><operator pos:start="255:46" pos:end="255:46">)</operator> <operator pos:start="255:48" pos:end="255:49">&gt;&gt;</operator> <literal type="number" pos:start="255:51" pos:end="255:52">30</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="257:25" pos:end="257:53"><decl pos:start="257:25" pos:end="257:52"><type pos:start="257:25" pos:end="257:31"><name pos:start="257:25" pos:end="257:31">int64_t</name></type> <name pos:start="257:33" pos:end="257:35">ddd</name> <init pos:start="257:37" pos:end="257:52">= <expr pos:start="257:39" pos:end="257:52"><operator pos:start="257:39" pos:end="257:39">(</operator><name pos:start="257:40" pos:end="257:41">dd</name> <operator pos:start="257:43" pos:end="257:43">*</operator> <name pos:start="257:45" pos:end="257:45">d</name><operator pos:start="257:46" pos:end="257:46">)</operator> <operator pos:start="257:48" pos:end="257:49">&gt;&gt;</operator> <literal type="number" pos:start="257:51" pos:end="257:52">30</literal></expr></init></decl>;</decl_stmt>



                        <if_stmt pos:start="261:25" pos:end="277:67"><if pos:start="261:25" pos:end="267:83">if <condition pos:start="261:28" pos:end="261:42">(<expr pos:start="261:29" pos:end="261:41"><name pos:start="261:29" pos:end="261:29">d</name> <operator pos:start="261:31" pos:end="261:31">&lt;</operator> <literal type="number" pos:start="261:33" pos:end="261:35">1LL</literal> <operator pos:start="261:37" pos:end="261:38">&lt;&lt;</operator> <literal type="number" pos:start="261:40" pos:end="261:41">30</literal></expr>)</condition><block type="pseudo" pos:start="263:29" pos:end="267:83"><block_content pos:start="263:29" pos:end="267:83">

                            <expr_stmt pos:start="263:29" pos:end="267:83"><expr pos:start="263:29" pos:end="267:82"><name pos:start="263:29" pos:end="263:33">coeff</name> <operator pos:start="263:35" pos:end="263:35">=</operator>  <operator pos:start="263:38" pos:end="263:38">(</operator><literal type="number" pos:start="263:39" pos:end="263:40">12</literal> <operator pos:start="263:42" pos:end="263:42">*</operator> <operator pos:start="263:44" pos:end="263:44">(</operator><literal type="number" pos:start="263:45" pos:end="263:45">1</literal> <operator pos:start="263:47" pos:end="263:48">&lt;&lt;</operator> <literal type="number" pos:start="263:50" pos:end="263:51">24</literal><operator pos:start="263:52" pos:end="263:52">)</operator> <operator pos:start="263:54" pos:end="263:54">-</operator>  <literal type="number" pos:start="263:57" pos:end="263:57">9</literal> <operator pos:start="263:59" pos:end="263:59">*</operator> <name pos:start="263:61" pos:end="263:61">B</name> <operator pos:start="263:63" pos:end="263:63">-</operator> <literal type="number" pos:start="263:65" pos:end="263:65">6</literal> <operator pos:start="263:67" pos:end="263:67">*</operator> <name pos:start="263:69" pos:end="263:69">C</name><operator pos:start="263:70" pos:end="263:70">)</operator> <operator pos:start="263:72" pos:end="263:72">*</operator> <name pos:start="263:74" pos:end="263:76">ddd</name> <operator pos:start="263:78" pos:end="263:78">+</operator>

                                    <operator pos:start="265:37" pos:end="265:37">(</operator><operator pos:start="265:38" pos:end="265:38">-</operator><literal type="number" pos:start="265:39" pos:end="265:40">18</literal> <operator pos:start="265:42" pos:end="265:42">*</operator> <operator pos:start="265:44" pos:end="265:44">(</operator><literal type="number" pos:start="265:45" pos:end="265:45">1</literal> <operator pos:start="265:47" pos:end="265:48">&lt;&lt;</operator> <literal type="number" pos:start="265:50" pos:end="265:51">24</literal><operator pos:start="265:52" pos:end="265:52">)</operator> <operator pos:start="265:54" pos:end="265:54">+</operator> <literal type="number" pos:start="265:56" pos:end="265:57">12</literal> <operator pos:start="265:59" pos:end="265:59">*</operator> <name pos:start="265:61" pos:end="265:61">B</name> <operator pos:start="265:63" pos:end="265:63">+</operator> <literal type="number" pos:start="265:65" pos:end="265:65">6</literal> <operator pos:start="265:67" pos:end="265:67">*</operator> <name pos:start="265:69" pos:end="265:69">C</name><operator pos:start="265:70" pos:end="265:70">)</operator> <operator pos:start="265:72" pos:end="265:72">*</operator>  <name pos:start="265:75" pos:end="265:76">dd</name> <operator pos:start="265:78" pos:end="265:78">+</operator>

                                      <operator pos:start="267:39" pos:end="267:39">(</operator><literal type="number" pos:start="267:40" pos:end="267:40">6</literal> <operator pos:start="267:42" pos:end="267:42">*</operator> <operator pos:start="267:44" pos:end="267:44">(</operator><literal type="number" pos:start="267:45" pos:end="267:45">1</literal> <operator pos:start="267:47" pos:end="267:48">&lt;&lt;</operator> <literal type="number" pos:start="267:50" pos:end="267:51">24</literal><operator pos:start="267:52" pos:end="267:52">)</operator> <operator pos:start="267:54" pos:end="267:54">-</operator>  <literal type="number" pos:start="267:57" pos:end="267:57">2</literal> <operator pos:start="267:59" pos:end="267:59">*</operator> <name pos:start="267:61" pos:end="267:61">B</name><operator pos:start="267:62" pos:end="267:62">)</operator>         <operator pos:start="267:72" pos:end="267:72">*</operator> <operator pos:start="267:74" pos:end="267:74">(</operator><literal type="number" pos:start="267:75" pos:end="267:75">1</literal> <operator pos:start="267:77" pos:end="267:78">&lt;&lt;</operator> <literal type="number" pos:start="267:80" pos:end="267:81">30</literal><operator pos:start="267:82" pos:end="267:82">)</operator></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="269:25" pos:end="277:67">else<block type="pseudo" pos:start="271:29" pos:end="277:67"><block_content pos:start="271:29" pos:end="277:67">

                            <expr_stmt pos:start="271:29" pos:end="277:67"><expr pos:start="271:29" pos:end="277:66"><name pos:start="271:29" pos:end="271:33">coeff</name> <operator pos:start="271:35" pos:end="271:35">=</operator>      <operator pos:start="271:42" pos:end="271:42">(</operator><operator pos:start="271:43" pos:end="271:43">-</operator><name pos:start="271:44" pos:end="271:44">B</name> <operator pos:start="271:46" pos:end="271:46">-</operator>  <literal type="number" pos:start="271:49" pos:end="271:49">6</literal> <operator pos:start="271:51" pos:end="271:51">*</operator> <name pos:start="271:53" pos:end="271:53">C</name><operator pos:start="271:54" pos:end="271:54">)</operator> <operator pos:start="271:56" pos:end="271:56">*</operator> <name pos:start="271:58" pos:end="271:60">ddd</name> <operator pos:start="271:62" pos:end="271:62">+</operator>

                                      <operator pos:start="273:39" pos:end="273:39">(</operator><literal type="number" pos:start="273:40" pos:end="273:40">6</literal> <operator pos:start="273:42" pos:end="273:42">*</operator> <name pos:start="273:44" pos:end="273:44">B</name> <operator pos:start="273:46" pos:end="273:46">+</operator> <literal type="number" pos:start="273:48" pos:end="273:49">30</literal> <operator pos:start="273:51" pos:end="273:51">*</operator> <name pos:start="273:53" pos:end="273:53">C</name><operator pos:start="273:54" pos:end="273:54">)</operator> <operator pos:start="273:56" pos:end="273:56">*</operator> <name pos:start="273:58" pos:end="273:59">dd</name>  <operator pos:start="273:62" pos:end="273:62">+</operator>

                                    <operator pos:start="275:37" pos:end="275:37">(</operator><operator pos:start="275:38" pos:end="275:38">-</operator><literal type="number" pos:start="275:39" pos:end="275:40">12</literal> <operator pos:start="275:42" pos:end="275:42">*</operator> <name pos:start="275:44" pos:end="275:44">B</name> <operator pos:start="275:46" pos:end="275:46">-</operator> <literal type="number" pos:start="275:48" pos:end="275:49">48</literal> <operator pos:start="275:51" pos:end="275:51">*</operator> <name pos:start="275:53" pos:end="275:53">C</name><operator pos:start="275:54" pos:end="275:54">)</operator> <operator pos:start="275:56" pos:end="275:56">*</operator> <name pos:start="275:58" pos:end="275:58">d</name>   <operator pos:start="275:62" pos:end="275:62">+</operator>

                                      <operator pos:start="277:39" pos:end="277:39">(</operator><literal type="number" pos:start="277:40" pos:end="277:40">8</literal> <operator pos:start="277:42" pos:end="277:42">*</operator> <name pos:start="277:44" pos:end="277:44">B</name> <operator pos:start="277:46" pos:end="277:46">+</operator> <literal type="number" pos:start="277:48" pos:end="277:49">24</literal> <operator pos:start="277:51" pos:end="277:51">*</operator> <name pos:start="277:53" pos:end="277:53">C</name><operator pos:start="277:54" pos:end="277:54">)</operator> <operator pos:start="277:56" pos:end="277:56">*</operator> <operator pos:start="277:58" pos:end="277:58">(</operator><literal type="number" pos:start="277:59" pos:end="277:59">1</literal> <operator pos:start="277:61" pos:end="277:62">&lt;&lt;</operator> <literal type="number" pos:start="277:64" pos:end="277:65">30</literal><operator pos:start="277:66" pos:end="277:66">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="281:21" pos:end="281:47"><expr pos:start="281:21" pos:end="281:46"><name pos:start="281:21" pos:end="281:25">coeff</name> <operator pos:start="281:27" pos:end="281:28">*=</operator> <name pos:start="281:30" pos:end="281:33">fone</name> <operator pos:start="281:35" pos:end="281:36">&gt;&gt;</operator> <operator pos:start="281:38" pos:end="281:38">(</operator><literal type="number" pos:start="281:39" pos:end="281:42">30</literal> <operator pos:start="281:42" pos:end="281:42">+</operator> <literal type="number" pos:start="281:44" pos:end="281:45">24</literal><operator pos:start="281:46" pos:end="281:46">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if>

<cpp:if pos:start="285:1" pos:end="285:5">#<cpp:directive pos:start="285:2" pos:end="285:3">if</cpp:directive> <expr pos:start="285:5" pos:end="285:5"><literal type="number" pos:start="285:5" pos:end="285:5">0</literal></expr></cpp:if>

                else if (flags &amp; SWS_X) {

                    double p  = param ? param * 0.01 : 0.3;

                    coeff     = d ? sin(d * M_PI) / (d * M_PI) : 1.0;

                    coeff    *= pow(2.0, -p * d * d);

                }

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>

                <if type="elseif" pos:start="299:17" pos:end="325:17">else if <condition pos:start="299:25" pos:end="299:39">(<expr pos:start="299:26" pos:end="299:38"><name pos:start="299:26" pos:end="299:30">flags</name> <operator pos:start="299:32" pos:end="299:32">&amp;</operator> <name pos:start="299:34" pos:end="299:38">SWS_X</name></expr>)</condition> <block pos:start="299:41" pos:end="325:17">{<block_content pos:start="301:21" pos:end="323:51">

                    <decl_stmt pos:start="301:21" pos:end="301:78"><decl pos:start="301:21" pos:end="301:77"><type pos:start="301:21" pos:end="301:26"><name pos:start="301:21" pos:end="301:26">double</name></type> <name pos:start="301:28" pos:end="301:28">A</name> <init pos:start="301:30" pos:end="301:77">= <expr pos:start="301:32" pos:end="301:77"><ternary pos:start="301:32" pos:end="301:77"><condition pos:start="301:32" pos:end="301:62"><expr pos:start="301:32" pos:end="301:60"><name pos:start="301:32" pos:end="301:39"><name pos:start="301:32" pos:end="301:36">param</name><index pos:start="301:37" pos:end="301:39">[<expr pos:start="301:38" pos:end="301:38"><literal type="number" pos:start="301:38" pos:end="301:38">0</literal></expr>]</index></name> <operator pos:start="301:41" pos:end="301:42">!=</operator> <name pos:start="301:44" pos:end="301:60">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="301:64" pos:end="301:71"> <expr pos:start="301:64" pos:end="301:71"><name pos:start="301:64" pos:end="301:71"><name pos:start="301:64" pos:end="301:68">param</name><index pos:start="301:69" pos:end="301:71">[<expr pos:start="301:70" pos:end="301:70"><literal type="number" pos:start="301:70" pos:end="301:70">0</literal></expr>]</index></name></expr> </then><else pos:start="301:73" pos:end="301:77">: <expr pos:start="301:75" pos:end="301:77"><literal type="number" pos:start="301:75" pos:end="301:77">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="303:21" pos:end="303:29"><decl pos:start="303:21" pos:end="303:28"><type pos:start="303:21" pos:end="303:26"><name pos:start="303:21" pos:end="303:26">double</name></type> <name pos:start="303:28" pos:end="303:28">c</name></decl>;</decl_stmt>



                    <if_stmt pos:start="307:21" pos:end="313:33"><if pos:start="307:21" pos:end="309:47">if <condition pos:start="307:24" pos:end="307:37">(<expr pos:start="307:25" pos:end="307:36"><name pos:start="307:25" pos:end="307:30">floatd</name> <operator pos:start="307:32" pos:end="307:32">&lt;</operator> <literal type="number" pos:start="307:34" pos:end="307:36">1.0</literal></expr>)</condition><block type="pseudo" pos:start="309:25" pos:end="309:47"><block_content pos:start="309:25" pos:end="309:47">

                        <expr_stmt pos:start="309:25" pos:end="309:47"><expr pos:start="309:25" pos:end="309:46"><name pos:start="309:25" pos:end="309:25">c</name> <operator pos:start="309:27" pos:end="309:27">=</operator> <call pos:start="309:29" pos:end="309:46"><name pos:start="309:29" pos:end="309:31">cos</name><argument_list pos:start="309:32" pos:end="309:46">(<argument pos:start="309:33" pos:end="309:45"><expr pos:start="309:33" pos:end="309:45"><name pos:start="309:33" pos:end="309:38">floatd</name> <operator pos:start="309:40" pos:end="309:40">*</operator> <name pos:start="309:42" pos:end="309:45">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="311:21" pos:end="313:33">else<block type="pseudo" pos:start="313:25" pos:end="313:33"><block_content pos:start="313:25" pos:end="313:33">

                        <expr_stmt pos:start="313:25" pos:end="313:33"><expr pos:start="313:25" pos:end="313:32"><name pos:start="313:25" pos:end="313:25">c</name> <operator pos:start="313:27" pos:end="313:27">=</operator> <operator pos:start="313:29" pos:end="313:29">-</operator><literal type="number" pos:start="313:30" pos:end="313:32">1.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt pos:start="315:21" pos:end="321:38"><if pos:start="315:21" pos:end="317:40">if <condition pos:start="315:24" pos:end="315:32">(<expr pos:start="315:25" pos:end="315:31"><name pos:start="315:25" pos:end="315:25">c</name> <operator pos:start="315:27" pos:end="315:27">&lt;</operator> <literal type="number" pos:start="315:29" pos:end="315:31">0.0</literal></expr>)</condition><block type="pseudo" pos:start="317:25" pos:end="317:40"><block_content pos:start="317:25" pos:end="317:40">

                        <expr_stmt pos:start="317:25" pos:end="317:40"><expr pos:start="317:25" pos:end="317:39"><name pos:start="317:25" pos:end="317:25">c</name> <operator pos:start="317:27" pos:end="317:27">=</operator> <operator pos:start="317:29" pos:end="317:29">-</operator><call pos:start="317:30" pos:end="317:39"><name pos:start="317:30" pos:end="317:32">pow</name><argument_list pos:start="317:33" pos:end="317:39">(<argument pos:start="317:34" pos:end="317:35"><expr pos:start="317:34" pos:end="317:35"><operator pos:start="317:34" pos:end="317:34">-</operator><name pos:start="317:35" pos:end="317:35">c</name></expr></argument>, <argument pos:start="317:38" pos:end="317:38"><expr pos:start="317:38" pos:end="317:38"><name pos:start="317:38" pos:end="317:38">A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="319:21" pos:end="321:38">else<block type="pseudo" pos:start="321:25" pos:end="321:38"><block_content pos:start="321:25" pos:end="321:38">

                        <expr_stmt pos:start="321:25" pos:end="321:38"><expr pos:start="321:25" pos:end="321:37"><name pos:start="321:25" pos:end="321:25">c</name> <operator pos:start="321:27" pos:end="321:27">=</operator> <call pos:start="321:29" pos:end="321:37"><name pos:start="321:29" pos:end="321:31">pow</name><argument_list pos:start="321:32" pos:end="321:37">(<argument pos:start="321:33" pos:end="321:33"><expr pos:start="321:33" pos:end="321:33"><name pos:start="321:33" pos:end="321:33">c</name></expr></argument>, <argument pos:start="321:36" pos:end="321:36"><expr pos:start="321:36" pos:end="321:36"><name pos:start="321:36" pos:end="321:36">A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="323:21" pos:end="323:51"><expr pos:start="323:21" pos:end="323:50"><name pos:start="323:21" pos:end="323:25">coeff</name> <operator pos:start="323:27" pos:end="323:27">=</operator> <operator pos:start="323:29" pos:end="323:29">(</operator><name pos:start="323:30" pos:end="323:30">c</name> <operator pos:start="323:32" pos:end="323:32">*</operator> <literal type="number" pos:start="323:34" pos:end="323:38">0.5</literal> <operator pos:start="323:38" pos:end="323:38">+</operator> <literal type="number" pos:start="323:40" pos:end="323:42">0.5</literal><operator pos:start="323:43" pos:end="323:43">)</operator> <operator pos:start="323:45" pos:end="323:45">*</operator> <name pos:start="323:47" pos:end="323:50">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="325:19" pos:end="343:17">else if <condition pos:start="325:27" pos:end="325:44">(<expr pos:start="325:28" pos:end="325:43"><name pos:start="325:28" pos:end="325:32">flags</name> <operator pos:start="325:34" pos:end="325:34">&amp;</operator> <name pos:start="325:36" pos:end="325:43">SWS_AREA</name></expr>)</condition> <block pos:start="325:46" pos:end="343:17">{<block_content pos:start="327:21" pos:end="341:47">

                    <decl_stmt pos:start="327:21" pos:end="327:47"><decl pos:start="327:21" pos:end="327:46"><type pos:start="327:21" pos:end="327:27"><name pos:start="327:21" pos:end="327:27">int64_t</name></type> <name pos:start="327:29" pos:end="327:30">d2</name> <init pos:start="327:32" pos:end="327:46">= <expr pos:start="327:34" pos:end="327:46"><name pos:start="327:34" pos:end="327:34">d</name> <operator pos:start="327:36" pos:end="327:36">-</operator> <operator pos:start="327:38" pos:end="327:38">(</operator><literal type="number" pos:start="327:39" pos:end="327:39">1</literal> <operator pos:start="327:41" pos:end="327:42">&lt;&lt;</operator> <literal type="number" pos:start="327:44" pos:end="327:45">29</literal><operator pos:start="327:46" pos:end="327:46">)</operator></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="329:21" pos:end="339:36"><if pos:start="329:21" pos:end="331:57">if <condition pos:start="329:24" pos:end="329:56">(<expr pos:start="329:25" pos:end="329:55"><name pos:start="329:25" pos:end="329:26">d2</name> <operator pos:start="329:28" pos:end="329:28">*</operator> <name pos:start="329:30" pos:end="329:33">xInc</name> <operator pos:start="329:35" pos:end="329:35">&lt;</operator> <operator pos:start="329:37" pos:end="329:37">-</operator><operator pos:start="329:38" pos:end="329:38">(</operator><literal type="number" pos:start="329:39" pos:end="329:41">1LL</literal> <operator pos:start="329:43" pos:end="329:44">&lt;&lt;</operator> <operator pos:start="329:46" pos:end="329:46">(</operator><literal type="number" pos:start="329:47" pos:end="329:50">29</literal> <operator pos:start="329:50" pos:end="329:50">+</operator> <literal type="number" pos:start="329:52" pos:end="329:53">16</literal><operator pos:start="329:54" pos:end="329:54">)</operator><operator pos:start="329:55" pos:end="329:55">)</operator></expr>)</condition><block type="pseudo" pos:start="331:25" pos:end="331:57"><block_content pos:start="331:25" pos:end="331:57">

                        <expr_stmt pos:start="331:25" pos:end="331:57"><expr pos:start="331:25" pos:end="331:56"><name pos:start="331:25" pos:end="331:29">coeff</name> <operator pos:start="331:31" pos:end="331:31">=</operator> <literal type="number" pos:start="331:33" pos:end="331:35">1.0</literal> <operator pos:start="331:37" pos:end="331:37">*</operator> <operator pos:start="331:39" pos:end="331:39">(</operator><literal type="number" pos:start="331:40" pos:end="331:42">1LL</literal> <operator pos:start="331:44" pos:end="331:45">&lt;&lt;</operator> <operator pos:start="331:47" pos:end="331:47">(</operator><literal type="number" pos:start="331:48" pos:end="331:51">30</literal> <operator pos:start="331:51" pos:end="331:51">+</operator> <literal type="number" pos:start="331:53" pos:end="331:54">16</literal><operator pos:start="331:55" pos:end="331:55">)</operator><operator pos:start="331:56" pos:end="331:56">)</operator></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="333:21" pos:end="335:64">else if <condition pos:start="333:29" pos:end="333:60">(<expr pos:start="333:30" pos:end="333:59"><name pos:start="333:30" pos:end="333:31">d2</name> <operator pos:start="333:33" pos:end="333:33">*</operator> <name pos:start="333:35" pos:end="333:38">xInc</name> <operator pos:start="333:40" pos:end="333:40">&lt;</operator> <operator pos:start="333:42" pos:end="333:42">(</operator><literal type="number" pos:start="333:43" pos:end="333:45">1LL</literal> <operator pos:start="333:47" pos:end="333:48">&lt;&lt;</operator> <operator pos:start="333:50" pos:end="333:50">(</operator><literal type="number" pos:start="333:51" pos:end="333:54">29</literal> <operator pos:start="333:54" pos:end="333:54">+</operator> <literal type="number" pos:start="333:56" pos:end="333:57">16</literal><operator pos:start="333:58" pos:end="333:58">)</operator><operator pos:start="333:59" pos:end="333:59">)</operator></expr>)</condition><block type="pseudo" pos:start="335:25" pos:end="335:64"><block_content pos:start="335:25" pos:end="335:64">

                        <expr_stmt pos:start="335:25" pos:end="335:64"><expr pos:start="335:25" pos:end="335:63"><name pos:start="335:25" pos:end="335:29">coeff</name> <operator pos:start="335:31" pos:end="335:31">=</operator> <operator pos:start="335:33" pos:end="335:33">-</operator><name pos:start="335:34" pos:end="335:35">d2</name> <operator pos:start="335:37" pos:end="335:37">*</operator> <name pos:start="335:39" pos:end="335:42">xInc</name> <operator pos:start="335:44" pos:end="335:44">+</operator> <operator pos:start="335:46" pos:end="335:46">(</operator><literal type="number" pos:start="335:47" pos:end="335:49">1LL</literal> <operator pos:start="335:51" pos:end="335:52">&lt;&lt;</operator> <operator pos:start="335:54" pos:end="335:54">(</operator><literal type="number" pos:start="335:55" pos:end="335:58">29</literal> <operator pos:start="335:58" pos:end="335:58">+</operator> <literal type="number" pos:start="335:60" pos:end="335:61">16</literal><operator pos:start="335:62" pos:end="335:62">)</operator><operator pos:start="335:63" pos:end="335:63">)</operator></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="337:21" pos:end="339:36">else<block type="pseudo" pos:start="339:25" pos:end="339:36"><block_content pos:start="339:25" pos:end="339:36">

                        <expr_stmt pos:start="339:25" pos:end="339:36"><expr pos:start="339:25" pos:end="339:35"><name pos:start="339:25" pos:end="339:29">coeff</name> <operator pos:start="339:31" pos:end="339:31">=</operator> <literal type="number" pos:start="339:33" pos:end="339:35">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="341:21" pos:end="341:47"><expr pos:start="341:21" pos:end="341:46"><name pos:start="341:21" pos:end="341:25">coeff</name> <operator pos:start="341:27" pos:end="341:28">*=</operator> <name pos:start="341:30" pos:end="341:33">fone</name> <operator pos:start="341:35" pos:end="341:36">&gt;&gt;</operator> <operator pos:start="341:38" pos:end="341:38">(</operator><literal type="number" pos:start="341:39" pos:end="341:42">30</literal> <operator pos:start="341:42" pos:end="341:42">+</operator> <literal type="number" pos:start="341:44" pos:end="341:45">16</literal><operator pos:start="341:46" pos:end="341:46">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="343:19" pos:end="349:17">else if <condition pos:start="343:27" pos:end="343:45">(<expr pos:start="343:28" pos:end="343:44"><name pos:start="343:28" pos:end="343:32">flags</name> <operator pos:start="343:34" pos:end="343:34">&amp;</operator> <name pos:start="343:36" pos:end="343:44">SWS_GAUSS</name></expr>)</condition> <block pos:start="343:47" pos:end="349:17">{<block_content pos:start="345:21" pos:end="347:68">

                    <decl_stmt pos:start="345:21" pos:end="345:78"><decl pos:start="345:21" pos:end="345:77"><type pos:start="345:21" pos:end="345:26"><name pos:start="345:21" pos:end="345:26">double</name></type> <name pos:start="345:28" pos:end="345:28">p</name> <init pos:start="345:30" pos:end="345:77">= <expr pos:start="345:32" pos:end="345:77"><ternary pos:start="345:32" pos:end="345:77"><condition pos:start="345:32" pos:end="345:62"><expr pos:start="345:32" pos:end="345:60"><name pos:start="345:32" pos:end="345:39"><name pos:start="345:32" pos:end="345:36">param</name><index pos:start="345:37" pos:end="345:39">[<expr pos:start="345:38" pos:end="345:38"><literal type="number" pos:start="345:38" pos:end="345:38">0</literal></expr>]</index></name> <operator pos:start="345:41" pos:end="345:42">!=</operator> <name pos:start="345:44" pos:end="345:60">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="345:64" pos:end="345:71"> <expr pos:start="345:64" pos:end="345:71"><name pos:start="345:64" pos:end="345:71"><name pos:start="345:64" pos:end="345:68">param</name><index pos:start="345:69" pos:end="345:71">[<expr pos:start="345:70" pos:end="345:70"><literal type="number" pos:start="345:70" pos:end="345:70">0</literal></expr>]</index></name></expr> </then><else pos:start="345:73" pos:end="345:77">: <expr pos:start="345:75" pos:end="345:77"><literal type="number" pos:start="345:75" pos:end="345:77">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="347:21" pos:end="347:68"><expr pos:start="347:21" pos:end="347:67"><name pos:start="347:21" pos:end="347:25">coeff</name> <operator pos:start="347:27" pos:end="347:27">=</operator> <operator pos:start="347:29" pos:end="347:29">(</operator><call pos:start="347:30" pos:end="347:59"><name pos:start="347:30" pos:end="347:32">pow</name><argument_list pos:start="347:33" pos:end="347:59">(<argument pos:start="347:34" pos:end="347:36"><expr pos:start="347:34" pos:end="347:36"><literal type="number" pos:start="347:34" pos:end="347:36">2.0</literal></expr></argument>, <argument pos:start="347:39" pos:end="347:58"><expr pos:start="347:39" pos:end="347:58"><operator pos:start="347:39" pos:end="347:39">-</operator><name pos:start="347:40" pos:end="347:40">p</name> <operator pos:start="347:42" pos:end="347:42">*</operator> <name pos:start="347:44" pos:end="347:49">floatd</name> <operator pos:start="347:51" pos:end="347:51">*</operator> <name pos:start="347:53" pos:end="347:58">floatd</name></expr></argument>)</argument_list></call><operator pos:start="347:60" pos:end="347:60">)</operator> <operator pos:start="347:62" pos:end="347:62">*</operator> <name pos:start="347:64" pos:end="347:67">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="349:19" pos:end="353:17">else if <condition pos:start="349:27" pos:end="349:44">(<expr pos:start="349:28" pos:end="349:43"><name pos:start="349:28" pos:end="349:32">flags</name> <operator pos:start="349:34" pos:end="349:34">&amp;</operator> <name pos:start="349:36" pos:end="349:43">SWS_SINC</name></expr>)</condition> <block pos:start="349:46" pos:end="353:17">{<block_content pos:start="351:21" pos:end="351:84">

                    <expr_stmt pos:start="351:21" pos:end="351:84"><expr pos:start="351:21" pos:end="351:83"><name pos:start="351:21" pos:end="351:25">coeff</name> <operator pos:start="351:27" pos:end="351:27">=</operator> <operator pos:start="351:29" pos:end="351:29">(</operator><ternary pos:start="351:30" pos:end="351:75"><condition pos:start="351:30" pos:end="351:32"><expr pos:start="351:30" pos:end="351:30"><name pos:start="351:30" pos:end="351:30">d</name></expr> ?</condition><then pos:start="351:34" pos:end="351:69"> <expr pos:start="351:34" pos:end="351:69"><call pos:start="351:34" pos:end="351:51"><name pos:start="351:34" pos:end="351:36">sin</name><argument_list pos:start="351:37" pos:end="351:51">(<argument pos:start="351:38" pos:end="351:50"><expr pos:start="351:38" pos:end="351:50"><name pos:start="351:38" pos:end="351:43">floatd</name> <operator pos:start="351:45" pos:end="351:45">*</operator> <name pos:start="351:47" pos:end="351:50">M_PI</name></expr></argument>)</argument_list></call> <operator pos:start="351:53" pos:end="351:53">/</operator> <operator pos:start="351:55" pos:end="351:55">(</operator><name pos:start="351:56" pos:end="351:61">floatd</name> <operator pos:start="351:63" pos:end="351:63">*</operator> <name pos:start="351:65" pos:end="351:68">M_PI</name><operator pos:start="351:69" pos:end="351:69">)</operator></expr> </then><else pos:start="351:71" pos:end="351:75">: <expr pos:start="351:73" pos:end="351:75"><literal type="number" pos:start="351:73" pos:end="351:75">1.0</literal></expr></else></ternary><operator pos:start="351:76" pos:end="351:76">)</operator> <operator pos:start="351:78" pos:end="351:78">*</operator> <name pos:start="351:80" pos:end="351:83">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="353:19" pos:end="365:17">else if <condition pos:start="353:27" pos:end="353:47">(<expr pos:start="353:28" pos:end="353:46"><name pos:start="353:28" pos:end="353:32">flags</name> <operator pos:start="353:34" pos:end="353:34">&amp;</operator> <name pos:start="353:36" pos:end="353:46">SWS_LANCZOS</name></expr>)</condition> <block pos:start="353:49" pos:end="365:17">{<block_content pos:start="355:21" pos:end="363:34">

                    <decl_stmt pos:start="355:21" pos:end="355:78"><decl pos:start="355:21" pos:end="355:77"><type pos:start="355:21" pos:end="355:26"><name pos:start="355:21" pos:end="355:26">double</name></type> <name pos:start="355:28" pos:end="355:28">p</name> <init pos:start="355:30" pos:end="355:77">= <expr pos:start="355:32" pos:end="355:77"><ternary pos:start="355:32" pos:end="355:77"><condition pos:start="355:32" pos:end="355:62"><expr pos:start="355:32" pos:end="355:60"><name pos:start="355:32" pos:end="355:39"><name pos:start="355:32" pos:end="355:36">param</name><index pos:start="355:37" pos:end="355:39">[<expr pos:start="355:38" pos:end="355:38"><literal type="number" pos:start="355:38" pos:end="355:38">0</literal></expr>]</index></name> <operator pos:start="355:41" pos:end="355:42">!=</operator> <name pos:start="355:44" pos:end="355:60">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="355:64" pos:end="355:71"> <expr pos:start="355:64" pos:end="355:71"><name pos:start="355:64" pos:end="355:71"><name pos:start="355:64" pos:end="355:68">param</name><index pos:start="355:69" pos:end="355:71">[<expr pos:start="355:70" pos:end="355:70"><literal type="number" pos:start="355:70" pos:end="355:70">0</literal></expr>]</index></name></expr> </then><else pos:start="355:73" pos:end="355:77">: <expr pos:start="355:75" pos:end="355:77"><literal type="number" pos:start="355:75" pos:end="355:77">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="357:21" pos:end="359:79"><expr pos:start="357:21" pos:end="359:78"><name pos:start="357:21" pos:end="357:25">coeff</name> <operator pos:start="357:27" pos:end="357:27">=</operator> <operator pos:start="357:29" pos:end="357:29">(</operator><ternary pos:start="357:30" pos:end="359:70"><condition pos:start="357:30" pos:end="357:32"><expr pos:start="357:30" pos:end="357:30"><name pos:start="357:30" pos:end="357:30">d</name></expr> ?</condition><then pos:start="357:34" pos:end="359:64"> <expr pos:start="357:34" pos:end="359:64"><call pos:start="357:34" pos:end="357:51"><name pos:start="357:34" pos:end="357:36">sin</name><argument_list pos:start="357:37" pos:end="357:51">(<argument pos:start="357:38" pos:end="357:50"><expr pos:start="357:38" pos:end="357:50"><name pos:start="357:38" pos:end="357:43">floatd</name> <operator pos:start="357:45" pos:end="357:45">*</operator> <name pos:start="357:47" pos:end="357:50">M_PI</name></expr></argument>)</argument_list></call> <operator pos:start="357:53" pos:end="357:53">*</operator> <call pos:start="357:55" pos:end="357:76"><name pos:start="357:55" pos:end="357:57">sin</name><argument_list pos:start="357:58" pos:end="357:76">(<argument pos:start="357:59" pos:end="357:75"><expr pos:start="357:59" pos:end="357:75"><name pos:start="357:59" pos:end="357:64">floatd</name> <operator pos:start="357:66" pos:end="357:66">*</operator> <name pos:start="357:68" pos:end="357:71">M_PI</name> <operator pos:start="357:73" pos:end="357:73">/</operator> <name pos:start="357:75" pos:end="357:75">p</name></expr></argument>)</argument_list></call> <operator pos:start="357:78" pos:end="357:78">/</operator>

                             <operator pos:start="359:30" pos:end="359:30">(</operator><name pos:start="359:31" pos:end="359:36">floatd</name> <operator pos:start="359:38" pos:end="359:38">*</operator> <name pos:start="359:40" pos:end="359:45">floatd</name> <operator pos:start="359:47" pos:end="359:47">*</operator> <name pos:start="359:49" pos:end="359:52">M_PI</name> <operator pos:start="359:54" pos:end="359:54">*</operator> <name pos:start="359:56" pos:end="359:59">M_PI</name> <operator pos:start="359:61" pos:end="359:61">/</operator> <name pos:start="359:63" pos:end="359:63">p</name><operator pos:start="359:64" pos:end="359:64">)</operator></expr> </then><else pos:start="359:66" pos:end="359:70">: <expr pos:start="359:68" pos:end="359:70"><literal type="number" pos:start="359:68" pos:end="359:70">1.0</literal></expr></else></ternary><operator pos:start="359:71" pos:end="359:71">)</operator> <operator pos:start="359:73" pos:end="359:73">*</operator> <name pos:start="359:75" pos:end="359:78">fone</name></expr>;</expr_stmt>

                    <if_stmt pos:start="361:21" pos:end="363:34"><if pos:start="361:21" pos:end="363:34">if <condition pos:start="361:24" pos:end="361:35">(<expr pos:start="361:25" pos:end="361:34"><name pos:start="361:25" pos:end="361:30">floatd</name> <operator pos:start="361:32" pos:end="361:32">&gt;</operator> <name pos:start="361:34" pos:end="361:34">p</name></expr>)</condition><block type="pseudo" pos:start="363:25" pos:end="363:34"><block_content pos:start="363:25" pos:end="363:34">

                        <expr_stmt pos:start="363:25" pos:end="363:34"><expr pos:start="363:25" pos:end="363:33"><name pos:start="363:25" pos:end="363:29">coeff</name> <operator pos:start="363:31" pos:end="363:31">=</operator> <literal type="number" pos:start="363:33" pos:end="363:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="365:19" pos:end="375:17">else if <condition pos:start="365:27" pos:end="365:48">(<expr pos:start="365:28" pos:end="365:47"><name pos:start="365:28" pos:end="365:32">flags</name> <operator pos:start="365:34" pos:end="365:34">&amp;</operator> <name pos:start="365:36" pos:end="365:47">SWS_BILINEAR</name></expr>)</condition> <block pos:start="365:50" pos:end="375:17">{<block_content pos:start="367:21" pos:end="373:40">

                    <expr_stmt pos:start="367:21" pos:end="367:42"><expr pos:start="367:21" pos:end="367:41"><name pos:start="367:21" pos:end="367:25">coeff</name> <operator pos:start="367:27" pos:end="367:27">=</operator> <operator pos:start="367:29" pos:end="367:29">(</operator><literal type="number" pos:start="367:30" pos:end="367:30">1</literal> <operator pos:start="367:32" pos:end="367:33">&lt;&lt;</operator> <literal type="number" pos:start="367:35" pos:end="367:36">30</literal><operator pos:start="367:37" pos:end="367:37">)</operator> <operator pos:start="367:39" pos:end="367:39">-</operator> <name pos:start="367:41" pos:end="367:41">d</name></expr>;</expr_stmt>

                    <if_stmt pos:start="369:21" pos:end="371:34"><if pos:start="369:21" pos:end="371:34">if <condition pos:start="369:24" pos:end="369:34">(<expr pos:start="369:25" pos:end="369:33"><name pos:start="369:25" pos:end="369:29">coeff</name> <operator pos:start="369:31" pos:end="369:31">&lt;</operator> <literal type="number" pos:start="369:33" pos:end="369:33">0</literal></expr>)</condition><block type="pseudo" pos:start="371:25" pos:end="371:34"><block_content pos:start="371:25" pos:end="371:34">

                        <expr_stmt pos:start="371:25" pos:end="371:34"><expr pos:start="371:25" pos:end="371:33"><name pos:start="371:25" pos:end="371:29">coeff</name> <operator pos:start="371:31" pos:end="371:31">=</operator> <literal type="number" pos:start="371:33" pos:end="371:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="373:21" pos:end="373:40"><expr pos:start="373:21" pos:end="373:39"><name pos:start="373:21" pos:end="373:25">coeff</name> <operator pos:start="373:27" pos:end="373:28">*=</operator> <name pos:start="373:30" pos:end="373:33">fone</name> <operator pos:start="373:35" pos:end="373:36">&gt;&gt;</operator> <literal type="number" pos:start="373:38" pos:end="373:39">30</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="375:19" pos:end="381:17">else if <condition pos:start="375:27" pos:end="375:46">(<expr pos:start="375:28" pos:end="375:45"><name pos:start="375:28" pos:end="375:32">flags</name> <operator pos:start="375:34" pos:end="375:34">&amp;</operator> <name pos:start="375:36" pos:end="375:45">SWS_SPLINE</name></expr>)</condition> <block pos:start="375:48" pos:end="381:17">{<block_content pos:start="377:21" pos:end="379:81">

                    <decl_stmt pos:start="377:21" pos:end="377:50"><decl pos:start="377:21" pos:end="377:49"><type pos:start="377:21" pos:end="377:26"><name pos:start="377:21" pos:end="377:26">double</name></type> <name pos:start="377:28" pos:end="377:28">p</name> <init pos:start="377:30" pos:end="377:49">= <expr pos:start="377:32" pos:end="377:49"><operator pos:start="377:32" pos:end="377:32">-</operator><literal type="number" pos:start="377:33" pos:end="377:49">2.196152422706632</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="379:21" pos:end="379:81"><expr pos:start="379:21" pos:end="379:80"><name pos:start="379:21" pos:end="379:25">coeff</name> <operator pos:start="379:27" pos:end="379:27">=</operator> <call pos:start="379:29" pos:end="379:73"><name pos:start="379:29" pos:end="379:42">getSplineCoeff</name><argument_list pos:start="379:43" pos:end="379:73">(<argument pos:start="379:44" pos:end="379:46"><expr pos:start="379:44" pos:end="379:46"><literal type="number" pos:start="379:44" pos:end="379:46">1.0</literal></expr></argument>, <argument pos:start="379:49" pos:end="379:51"><expr pos:start="379:49" pos:end="379:51"><literal type="number" pos:start="379:49" pos:end="379:51">0.0</literal></expr></argument>, <argument pos:start="379:54" pos:end="379:54"><expr pos:start="379:54" pos:end="379:54"><name pos:start="379:54" pos:end="379:54">p</name></expr></argument>, <argument pos:start="379:57" pos:end="379:64"><expr pos:start="379:57" pos:end="379:64"><operator pos:start="379:57" pos:end="379:57">-</operator><name pos:start="379:58" pos:end="379:58">p</name> <operator pos:start="379:60" pos:end="379:60">-</operator> <literal type="number" pos:start="379:62" pos:end="379:64">1.0</literal></expr></argument>, <argument pos:start="379:67" pos:end="379:72"><expr pos:start="379:67" pos:end="379:72"><name pos:start="379:67" pos:end="379:72">floatd</name></expr></argument>)</argument_list></call> <operator pos:start="379:75" pos:end="379:75">*</operator> <name pos:start="379:77" pos:end="379:80">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="381:19" pos:end="387:17">else <block pos:start="381:24" pos:end="387:17">{<block_content pos:start="383:21" pos:end="385:30">

                    <expr_stmt pos:start="383:21" pos:end="383:32"><expr pos:start="383:21" pos:end="383:31"><name pos:start="383:21" pos:end="383:25">coeff</name> <operator pos:start="383:27" pos:end="383:27">=</operator> <literal type="number" pos:start="383:29" pos:end="383:31">0.0</literal></expr>;</expr_stmt> <comment type="line" pos:start="383:34" pos:end="383:54">// GCC warning killer</comment>

                    <expr_stmt pos:start="385:21" pos:end="385:30"><expr pos:start="385:21" pos:end="385:29"><call pos:start="385:21" pos:end="385:29"><name pos:start="385:21" pos:end="385:26">assert</name><argument_list pos:start="385:27" pos:end="385:29">(<argument pos:start="385:28" pos:end="385:28"><expr pos:start="385:28" pos:end="385:28"><literal type="number" pos:start="385:28" pos:end="385:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="391:17" pos:end="391:51"><expr pos:start="391:17" pos:end="391:50"><name pos:start="391:17" pos:end="391:42"><name pos:start="391:17" pos:end="391:22">filter</name><index pos:start="391:23" pos:end="391:42">[<expr pos:start="391:24" pos:end="391:41"><name pos:start="391:24" pos:end="391:24">i</name> <operator pos:start="391:26" pos:end="391:26">*</operator> <name pos:start="391:28" pos:end="391:37">filterSize</name> <operator pos:start="391:39" pos:end="391:39">+</operator> <name pos:start="391:41" pos:end="391:41">j</name></expr>]</index></name> <operator pos:start="391:44" pos:end="391:44">=</operator> <name pos:start="391:46" pos:end="391:50">coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:21"><expr pos:start="393:17" pos:end="393:20"><name pos:start="393:17" pos:end="393:18">xx</name><operator pos:start="393:19" pos:end="393:20">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="397:13" pos:end="397:34"><expr pos:start="397:13" pos:end="397:33"><name pos:start="397:13" pos:end="397:21">xDstInSrc</name> <operator pos:start="397:23" pos:end="397:24">+=</operator> <literal type="number" pos:start="397:26" pos:end="397:26">2</literal> <operator pos:start="397:28" pos:end="397:28">*</operator> <name pos:start="397:30" pos:end="397:33">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="405:5" pos:end="409:7">/* apply src &amp; dst Filter to filter -&gt; filter2

     * av_free(filter);

     */</comment>

    <expr_stmt pos:start="411:5" pos:end="411:27"><expr pos:start="411:5" pos:end="411:26"><call pos:start="411:5" pos:end="411:26"><name pos:start="411:5" pos:end="411:10">assert</name><argument_list pos:start="411:11" pos:end="411:26">(<argument pos:start="411:12" pos:end="411:25"><expr pos:start="411:12" pos:end="411:25"><name pos:start="411:12" pos:end="411:21">filterSize</name> <operator pos:start="411:23" pos:end="411:23">&gt;</operator> <literal type="number" pos:start="411:25" pos:end="411:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="413:5" pos:end="413:29"><expr pos:start="413:5" pos:end="413:28"><name pos:start="413:5" pos:end="413:15">filter2Size</name> <operator pos:start="413:17" pos:end="413:17">=</operator> <name pos:start="413:19" pos:end="413:28">filterSize</name></expr>;</expr_stmt>

    <if_stmt pos:start="415:5" pos:end="417:45"><if pos:start="415:5" pos:end="417:45">if <condition pos:start="415:8" pos:end="415:18">(<expr pos:start="415:9" pos:end="415:17"><name pos:start="415:9" pos:end="415:17">srcFilter</name></expr>)</condition><block type="pseudo" pos:start="417:9" pos:end="417:45"><block_content pos:start="417:9" pos:end="417:45">

        <expr_stmt pos:start="417:9" pos:end="417:45"><expr pos:start="417:9" pos:end="417:44"><name pos:start="417:9" pos:end="417:19">filter2Size</name> <operator pos:start="417:21" pos:end="417:22">+=</operator> <name pos:start="417:24" pos:end="417:40"><name pos:start="417:24" pos:end="417:32">srcFilter</name><operator pos:start="417:33" pos:end="417:34">-&gt;</operator><name pos:start="417:35" pos:end="417:40">length</name></name> <operator pos:start="417:42" pos:end="417:42">-</operator> <literal type="number" pos:start="417:44" pos:end="417:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="419:5" pos:end="421:45"><if pos:start="419:5" pos:end="421:45">if <condition pos:start="419:8" pos:end="419:18">(<expr pos:start="419:9" pos:end="419:17"><name pos:start="419:9" pos:end="419:17">dstFilter</name></expr>)</condition><block type="pseudo" pos:start="421:9" pos:end="421:45"><block_content pos:start="421:9" pos:end="421:45">

        <expr_stmt pos:start="421:9" pos:end="421:45"><expr pos:start="421:9" pos:end="421:44"><name pos:start="421:9" pos:end="421:19">filter2Size</name> <operator pos:start="421:21" pos:end="421:22">+=</operator> <name pos:start="421:24" pos:end="421:40"><name pos:start="421:24" pos:end="421:32">dstFilter</name><operator pos:start="421:33" pos:end="421:34">-&gt;</operator><name pos:start="421:35" pos:end="421:40">length</name></name> <operator pos:start="421:42" pos:end="421:42">-</operator> <literal type="number" pos:start="421:44" pos:end="421:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:28"><expr pos:start="423:5" pos:end="423:27"><call pos:start="423:5" pos:end="423:27"><name pos:start="423:5" pos:end="423:10">assert</name><argument_list pos:start="423:11" pos:end="423:27">(<argument pos:start="423:12" pos:end="423:26"><expr pos:start="423:12" pos:end="423:26"><name pos:start="423:12" pos:end="423:22">filter2Size</name> <operator pos:start="423:24" pos:end="423:24">&gt;</operator> <literal type="number" pos:start="423:26" pos:end="423:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:82"><expr pos:start="425:5" pos:end="425:81"><call pos:start="425:5" pos:end="425:81"><name pos:start="425:5" pos:end="425:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="425:22" pos:end="425:81">(<argument pos:start="425:23" pos:end="425:26"><expr pos:start="425:23" pos:end="425:26"><name pos:start="425:23" pos:end="425:26">NULL</name></expr></argument>, <argument pos:start="425:29" pos:end="425:35"><expr pos:start="425:29" pos:end="425:35"><name pos:start="425:29" pos:end="425:35">filter2</name></expr></argument>, <argument pos:start="425:38" pos:end="425:74"><expr pos:start="425:38" pos:end="425:74"><name pos:start="425:38" pos:end="425:48">filter2Size</name> <operator pos:start="425:50" pos:end="425:50">*</operator> <name pos:start="425:52" pos:end="425:55">dstW</name> <operator pos:start="425:57" pos:end="425:57">*</operator> <sizeof pos:start="425:59" pos:end="425:74">sizeof<argument_list pos:start="425:65" pos:end="425:74">(<argument pos:start="425:66" pos:end="425:73"><expr pos:start="425:66" pos:end="425:73"><operator pos:start="425:66" pos:end="425:66">*</operator><name pos:start="425:67" pos:end="425:73">filter2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="425:77" pos:end="425:80"><expr pos:start="425:77" pos:end="425:80"><name pos:start="425:77" pos:end="425:80">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="429:5" pos:end="461:5">for <control pos:start="429:9" pos:end="429:30">(<init pos:start="429:10" pos:end="429:15"><expr pos:start="429:10" pos:end="429:14"><name pos:start="429:10" pos:end="429:10">i</name> <operator pos:start="429:12" pos:end="429:12">=</operator> <literal type="number" pos:start="429:14" pos:end="429:14">0</literal></expr>;</init> <condition pos:start="429:17" pos:end="429:25"><expr pos:start="429:17" pos:end="429:24"><name pos:start="429:17" pos:end="429:17">i</name> <operator pos:start="429:19" pos:end="429:19">&lt;</operator> <name pos:start="429:21" pos:end="429:24">dstW</name></expr>;</condition> <incr pos:start="429:27" pos:end="429:29"><expr pos:start="429:27" pos:end="429:29"><name pos:start="429:27" pos:end="429:27">i</name><operator pos:start="429:28" pos:end="429:29">++</operator></expr></incr>)</control> <block pos:start="429:32" pos:end="461:5">{<block_content pos:start="431:9" pos:end="459:72">

        <decl_stmt pos:start="431:9" pos:end="431:17"><decl pos:start="431:9" pos:end="431:13"><type pos:start="431:9" pos:end="431:11"><name pos:start="431:9" pos:end="431:11">int</name></type> <name pos:start="431:13" pos:end="431:13">j</name></decl>, <decl pos:start="431:16" pos:end="431:16"><type ref="prev" pos:start="431:9" pos:end="431:11"/><name pos:start="431:16" pos:end="431:16">k</name></decl>;</decl_stmt>



        <if_stmt pos:start="435:9" pos:end="453:9"><if pos:start="435:9" pos:end="447:9">if <condition pos:start="435:12" pos:end="435:22">(<expr pos:start="435:13" pos:end="435:21"><name pos:start="435:13" pos:end="435:21">srcFilter</name></expr>)</condition> <block pos:start="435:24" pos:end="447:9">{<block_content pos:start="437:13" pos:end="445:13">

            <for pos:start="437:13" pos:end="445:13">for <control pos:start="437:17" pos:end="437:51">(<init pos:start="437:18" pos:end="437:23"><expr pos:start="437:18" pos:end="437:22"><name pos:start="437:18" pos:end="437:18">k</name> <operator pos:start="437:20" pos:end="437:20">=</operator> <literal type="number" pos:start="437:22" pos:end="437:22">0</literal></expr>;</init> <condition pos:start="437:25" pos:end="437:46"><expr pos:start="437:25" pos:end="437:45"><name pos:start="437:25" pos:end="437:25">k</name> <operator pos:start="437:27" pos:end="437:27">&lt;</operator> <name pos:start="437:29" pos:end="437:45"><name pos:start="437:29" pos:end="437:37">srcFilter</name><operator pos:start="437:38" pos:end="437:39">-&gt;</operator><name pos:start="437:40" pos:end="437:45">length</name></name></expr>;</condition> <incr pos:start="437:48" pos:end="437:50"><expr pos:start="437:48" pos:end="437:50"><name pos:start="437:48" pos:end="437:48">k</name><operator pos:start="437:49" pos:end="437:50">++</operator></expr></incr>)</control> <block pos:start="437:53" pos:end="445:13">{<block_content pos:start="439:17" pos:end="443:73">

                <for pos:start="439:17" pos:end="443:73">for <control pos:start="439:21" pos:end="439:48">(<init pos:start="439:22" pos:end="439:27"><expr pos:start="439:22" pos:end="439:26"><name pos:start="439:22" pos:end="439:22">j</name> <operator pos:start="439:24" pos:end="439:24">=</operator> <literal type="number" pos:start="439:26" pos:end="439:26">0</literal></expr>;</init> <condition pos:start="439:29" pos:end="439:43"><expr pos:start="439:29" pos:end="439:42"><name pos:start="439:29" pos:end="439:29">j</name> <operator pos:start="439:31" pos:end="439:31">&lt;</operator> <name pos:start="439:33" pos:end="439:42">filterSize</name></expr>;</condition> <incr pos:start="439:45" pos:end="439:47"><expr pos:start="439:45" pos:end="439:47"><name pos:start="439:45" pos:end="439:45">j</name><operator pos:start="439:46" pos:end="439:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="441:21" pos:end="443:73"><block_content pos:start="441:21" pos:end="443:73">

                    <expr_stmt pos:start="441:21" pos:end="443:73"><expr pos:start="441:21" pos:end="443:72"><name pos:start="441:21" pos:end="441:52"><name pos:start="441:21" pos:end="441:27">filter2</name><index pos:start="441:28" pos:end="441:52">[<expr pos:start="441:29" pos:end="441:51"><name pos:start="441:29" pos:end="441:29">i</name> <operator pos:start="441:31" pos:end="441:31">*</operator> <name pos:start="441:33" pos:end="441:43">filter2Size</name> <operator pos:start="441:45" pos:end="441:45">+</operator> <name pos:start="441:47" pos:end="441:47">k</name> <operator pos:start="441:49" pos:end="441:49">+</operator> <name pos:start="441:51" pos:end="441:51">j</name></expr>]</index></name> <operator pos:start="441:54" pos:end="441:55">+=</operator>

                        <name pos:start="443:25" pos:end="443:43"><name pos:start="443:25" pos:end="443:33">srcFilter</name><operator pos:start="443:34" pos:end="443:35">-&gt;</operator><name pos:start="443:36" pos:end="443:40">coeff</name><index pos:start="443:41" pos:end="443:43">[<expr pos:start="443:42" pos:end="443:42"><name pos:start="443:42" pos:end="443:42">k</name></expr>]</index></name> <operator pos:start="443:45" pos:end="443:45">*</operator> <name pos:start="443:47" pos:end="443:72"><name pos:start="443:47" pos:end="443:52">filter</name><index pos:start="443:53" pos:end="443:72">[<expr pos:start="443:54" pos:end="443:71"><name pos:start="443:54" pos:end="443:54">i</name> <operator pos:start="443:56" pos:end="443:56">*</operator> <name pos:start="443:58" pos:end="443:67">filterSize</name> <operator pos:start="443:69" pos:end="443:69">+</operator> <name pos:start="443:71" pos:end="443:71">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="447:11" pos:end="453:9">else <block pos:start="447:16" pos:end="453:9">{<block_content pos:start="449:13" pos:end="451:74">

            <for pos:start="449:13" pos:end="451:74">for <control pos:start="449:17" pos:end="449:44">(<init pos:start="449:18" pos:end="449:23"><expr pos:start="449:18" pos:end="449:22"><name pos:start="449:18" pos:end="449:18">j</name> <operator pos:start="449:20" pos:end="449:20">=</operator> <literal type="number" pos:start="449:22" pos:end="449:22">0</literal></expr>;</init> <condition pos:start="449:25" pos:end="449:39"><expr pos:start="449:25" pos:end="449:38"><name pos:start="449:25" pos:end="449:25">j</name> <operator pos:start="449:27" pos:end="449:27">&lt;</operator> <name pos:start="449:29" pos:end="449:38">filterSize</name></expr>;</condition> <incr pos:start="449:41" pos:end="449:43"><expr pos:start="449:41" pos:end="449:43"><name pos:start="449:41" pos:end="449:41">j</name><operator pos:start="449:42" pos:end="449:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="451:17" pos:end="451:74"><block_content pos:start="451:17" pos:end="451:74">

                <expr_stmt pos:start="451:17" pos:end="451:74"><expr pos:start="451:17" pos:end="451:73"><name pos:start="451:17" pos:end="451:44"><name pos:start="451:17" pos:end="451:23">filter2</name><index pos:start="451:24" pos:end="451:44">[<expr pos:start="451:25" pos:end="451:43"><name pos:start="451:25" pos:end="451:25">i</name> <operator pos:start="451:27" pos:end="451:27">*</operator> <name pos:start="451:29" pos:end="451:39">filter2Size</name> <operator pos:start="451:41" pos:end="451:41">+</operator> <name pos:start="451:43" pos:end="451:43">j</name></expr>]</index></name> <operator pos:start="451:46" pos:end="451:46">=</operator> <name pos:start="451:48" pos:end="451:73"><name pos:start="451:48" pos:end="451:53">filter</name><index pos:start="451:54" pos:end="451:73">[<expr pos:start="451:55" pos:end="451:72"><name pos:start="451:55" pos:end="451:55">i</name> <operator pos:start="451:57" pos:end="451:57">*</operator> <name pos:start="451:59" pos:end="451:68">filterSize</name> <operator pos:start="451:70" pos:end="451:70">+</operator> <name pos:start="451:72" pos:end="451:72">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <comment type="line" pos:start="455:9" pos:end="455:26">// FIXME dstFilter</comment>



        <expr_stmt pos:start="459:9" pos:end="459:72"><expr pos:start="459:9" pos:end="459:71"><operator pos:start="459:9" pos:end="459:9">(</operator><operator pos:start="459:10" pos:end="459:10">*</operator><name pos:start="459:11" pos:end="459:19">filterPos</name><operator pos:start="459:20" pos:end="459:20">)</operator><index pos:start="459:21" pos:end="459:23">[<expr pos:start="459:22" pos:end="459:22"><name pos:start="459:22" pos:end="459:22">i</name></expr>]</index> <operator pos:start="459:25" pos:end="459:26">+=</operator> <operator pos:start="459:28" pos:end="459:28">(</operator><name pos:start="459:29" pos:end="459:38">filterSize</name> <operator pos:start="459:40" pos:end="459:40">-</operator> <literal type="number" pos:start="459:42" pos:end="459:42">1</literal><operator pos:start="459:43" pos:end="459:43">)</operator> <operator pos:start="459:45" pos:end="459:45">/</operator> <literal type="number" pos:start="459:47" pos:end="459:49">2</literal> <operator pos:start="459:49" pos:end="459:49">-</operator> <operator pos:start="459:51" pos:end="459:51">(</operator><name pos:start="459:52" pos:end="459:62">filter2Size</name> <operator pos:start="459:64" pos:end="459:64">-</operator> <literal type="number" pos:start="459:66" pos:end="459:66">1</literal><operator pos:start="459:67" pos:end="459:67">)</operator> <operator pos:start="459:69" pos:end="459:69">/</operator> <literal type="number" pos:start="459:71" pos:end="459:71">2</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="463:5" pos:end="463:22"><expr pos:start="463:5" pos:end="463:21"><call pos:start="463:5" pos:end="463:21"><name pos:start="463:5" pos:end="463:12">av_freep</name><argument_list pos:start="463:13" pos:end="463:21">(<argument pos:start="463:14" pos:end="463:20"><expr pos:start="463:14" pos:end="463:20"><operator pos:start="463:14" pos:end="463:14">&amp;</operator><name pos:start="463:15" pos:end="463:20">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="467:5" pos:end="467:72">/* try to reduce the filter-size (step1 find size and shift left) */</comment>

    <comment type="line" pos:start="469:5" pos:end="469:76">// Assume it is near normalized (*0.5 or *2.0 is OK but * 0.001 is not).</comment>

    <expr_stmt pos:start="471:5" pos:end="471:22"><expr pos:start="471:5" pos:end="471:21"><name pos:start="471:5" pos:end="471:17">minFilterSize</name> <operator pos:start="471:19" pos:end="471:19">=</operator> <literal type="number" pos:start="471:21" pos:end="471:21">0</literal></expr>;</expr_stmt>

    <for pos:start="473:5" pos:end="547:5">for <control pos:start="473:9" pos:end="473:35">(<init pos:start="473:10" pos:end="473:22"><expr pos:start="473:10" pos:end="473:21"><name pos:start="473:10" pos:end="473:10">i</name> <operator pos:start="473:12" pos:end="473:12">=</operator> <name pos:start="473:14" pos:end="473:17">dstW</name> <operator pos:start="473:19" pos:end="473:19">-</operator> <literal type="number" pos:start="473:21" pos:end="473:21">1</literal></expr>;</init> <condition pos:start="473:24" pos:end="473:30"><expr pos:start="473:24" pos:end="473:29"><name pos:start="473:24" pos:end="473:24">i</name> <operator pos:start="473:26" pos:end="473:27">&gt;=</operator> <literal type="number" pos:start="473:29" pos:end="473:29">0</literal></expr>;</condition> <incr pos:start="473:32" pos:end="473:34"><expr pos:start="473:32" pos:end="473:34"><name pos:start="473:32" pos:end="473:32">i</name><operator pos:start="473:33" pos:end="473:34">--</operator></expr></incr>)</control> <block pos:start="473:37" pos:end="547:5">{<block_content pos:start="475:9" pos:end="545:32">

        <decl_stmt pos:start="475:9" pos:end="475:30"><decl pos:start="475:9" pos:end="475:29"><type pos:start="475:9" pos:end="475:11"><name pos:start="475:9" pos:end="475:11">int</name></type> <name pos:start="475:13" pos:end="475:15">min</name> <init pos:start="475:17" pos:end="475:29">= <expr pos:start="475:19" pos:end="475:29"><name pos:start="475:19" pos:end="475:29">filter2Size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="477:9" pos:end="477:14"><decl pos:start="477:9" pos:end="477:13"><type pos:start="477:9" pos:end="477:11"><name pos:start="477:9" pos:end="477:11">int</name></type> <name pos:start="477:13" pos:end="477:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="479:9" pos:end="479:29"><decl pos:start="479:9" pos:end="479:28"><type pos:start="479:9" pos:end="479:15"><name pos:start="479:9" pos:end="479:15">int64_t</name></type> <name pos:start="479:17" pos:end="479:22">cutOff</name> <init pos:start="479:24" pos:end="479:28">= <expr pos:start="479:26" pos:end="479:28"><literal type="number" pos:start="479:26" pos:end="479:28">0.0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="483:9" pos:end="483:72">/* get rid of near zero elements on the left by shifting left */</comment>

        <for pos:start="485:9" pos:end="519:9">for <control pos:start="485:13" pos:end="485:41">(<init pos:start="485:14" pos:end="485:19"><expr pos:start="485:14" pos:end="485:18"><name pos:start="485:14" pos:end="485:14">j</name> <operator pos:start="485:16" pos:end="485:16">=</operator> <literal type="number" pos:start="485:18" pos:end="485:18">0</literal></expr>;</init> <condition pos:start="485:21" pos:end="485:36"><expr pos:start="485:21" pos:end="485:35"><name pos:start="485:21" pos:end="485:21">j</name> <operator pos:start="485:23" pos:end="485:23">&lt;</operator> <name pos:start="485:25" pos:end="485:35">filter2Size</name></expr>;</condition> <incr pos:start="485:38" pos:end="485:40"><expr pos:start="485:38" pos:end="485:40"><name pos:start="485:38" pos:end="485:38">j</name><operator pos:start="485:39" pos:end="485:40">++</operator></expr></incr>)</control> <block pos:start="485:43" pos:end="519:9">{<block_content pos:start="487:13" pos:end="517:30">

            <decl_stmt pos:start="487:13" pos:end="487:18"><decl pos:start="487:13" pos:end="487:17"><type pos:start="487:13" pos:end="487:15"><name pos:start="487:13" pos:end="487:15">int</name></type> <name pos:start="487:17" pos:end="487:17">k</name></decl>;</decl_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:54"><expr pos:start="489:13" pos:end="489:53"><name pos:start="489:13" pos:end="489:18">cutOff</name> <operator pos:start="489:20" pos:end="489:21">+=</operator> <call pos:start="489:23" pos:end="489:53"><name pos:start="489:23" pos:end="489:27">FFABS</name><argument_list pos:start="489:28" pos:end="489:53">(<argument pos:start="489:29" pos:end="489:52"><expr pos:start="489:29" pos:end="489:52"><name pos:start="489:29" pos:end="489:52"><name pos:start="489:29" pos:end="489:35">filter2</name><index pos:start="489:36" pos:end="489:52">[<expr pos:start="489:37" pos:end="489:51"><name pos:start="489:37" pos:end="489:37">i</name> <operator pos:start="489:39" pos:end="489:39">*</operator> <name pos:start="489:41" pos:end="489:51">filter2Size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="493:13" pos:end="495:22"><if pos:start="493:13" pos:end="495:22">if <condition pos:start="493:16" pos:end="493:54">(<expr pos:start="493:17" pos:end="493:53"><name pos:start="493:17" pos:end="493:22">cutOff</name> <operator pos:start="493:24" pos:end="493:24">&gt;</operator> <name pos:start="493:26" pos:end="493:46">SWS_MAX_REDUCE_CUTOFF</name> <operator pos:start="493:48" pos:end="493:48">*</operator> <name pos:start="493:50" pos:end="493:53">fone</name></expr>)</condition><block type="pseudo" pos:start="495:17" pos:end="495:22"><block_content pos:start="495:17" pos:end="495:22">

                <break pos:start="495:17" pos:end="495:22">break;</break></block_content></block></if></if_stmt>



            <comment type="block" pos:start="499:13" pos:end="501:34">/* preserve monotonicity because the core can't handle the

             * filter otherwise */</comment>

            <if_stmt pos:start="503:13" pos:end="505:22"><if pos:start="503:13" pos:end="505:22">if <condition pos:start="503:16" pos:end="503:71">(<expr pos:start="503:17" pos:end="503:70"><name pos:start="503:17" pos:end="503:17">i</name> <operator pos:start="503:19" pos:end="503:19">&lt;</operator> <name pos:start="503:21" pos:end="503:24">dstW</name> <operator pos:start="503:26" pos:end="503:26">-</operator> <literal type="number" pos:start="503:28" pos:end="503:28">1</literal> <operator pos:start="503:30" pos:end="503:31">&amp;&amp;</operator> <operator pos:start="503:33" pos:end="503:33">(</operator><operator pos:start="503:34" pos:end="503:34">*</operator><name pos:start="503:35" pos:end="503:43">filterPos</name><operator pos:start="503:44" pos:end="503:44">)</operator><index pos:start="503:45" pos:end="503:47">[<expr pos:start="503:46" pos:end="503:46"><name pos:start="503:46" pos:end="503:46">i</name></expr>]</index> <operator pos:start="503:49" pos:end="503:50">&gt;=</operator> <operator pos:start="503:52" pos:end="503:52">(</operator><operator pos:start="503:53" pos:end="503:53">*</operator><name pos:start="503:54" pos:end="503:62">filterPos</name><operator pos:start="503:63" pos:end="503:63">)</operator><index pos:start="503:64" pos:end="503:70">[<expr pos:start="503:65" pos:end="503:69"><name pos:start="503:65" pos:end="503:65">i</name> <operator pos:start="503:67" pos:end="503:67">+</operator> <literal type="number" pos:start="503:69" pos:end="503:69">1</literal></expr>]</index></expr>)</condition><block type="pseudo" pos:start="505:17" pos:end="505:22"><block_content pos:start="505:17" pos:end="505:22">

                <break pos:start="505:17" pos:end="505:22">break;</break></block_content></block></if></if_stmt>



            <comment type="line" pos:start="509:13" pos:end="509:44">// move filter coefficients left</comment>

            <for pos:start="511:13" pos:end="513:80">for <control pos:start="511:17" pos:end="511:45">(<init pos:start="511:18" pos:end="511:23"><expr pos:start="511:18" pos:end="511:22"><name pos:start="511:18" pos:end="511:18">k</name> <operator pos:start="511:20" pos:end="511:20">=</operator> <literal type="number" pos:start="511:22" pos:end="511:22">1</literal></expr>;</init> <condition pos:start="511:25" pos:end="511:40"><expr pos:start="511:25" pos:end="511:39"><name pos:start="511:25" pos:end="511:25">k</name> <operator pos:start="511:27" pos:end="511:27">&lt;</operator> <name pos:start="511:29" pos:end="511:39">filter2Size</name></expr>;</condition> <incr pos:start="511:42" pos:end="511:44"><expr pos:start="511:42" pos:end="511:44"><name pos:start="511:42" pos:end="511:42">k</name><operator pos:start="511:43" pos:end="511:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="513:17" pos:end="513:80"><block_content pos:start="513:17" pos:end="513:80">

                <expr_stmt pos:start="513:17" pos:end="513:80"><expr pos:start="513:17" pos:end="513:79"><name pos:start="513:17" pos:end="513:48"><name pos:start="513:17" pos:end="513:23">filter2</name><index pos:start="513:24" pos:end="513:48">[<expr pos:start="513:25" pos:end="513:47"><name pos:start="513:25" pos:end="513:25">i</name> <operator pos:start="513:27" pos:end="513:27">*</operator> <name pos:start="513:29" pos:end="513:39">filter2Size</name> <operator pos:start="513:41" pos:end="513:41">+</operator> <name pos:start="513:43" pos:end="513:43">k</name> <operator pos:start="513:45" pos:end="513:45">-</operator> <literal type="number" pos:start="513:47" pos:end="513:47">1</literal></expr>]</index></name> <operator pos:start="513:50" pos:end="513:50">=</operator> <name pos:start="513:52" pos:end="513:79"><name pos:start="513:52" pos:end="513:58">filter2</name><index pos:start="513:59" pos:end="513:79">[<expr pos:start="513:60" pos:end="513:78"><name pos:start="513:60" pos:end="513:60">i</name> <operator pos:start="513:62" pos:end="513:62">*</operator> <name pos:start="513:64" pos:end="513:74">filter2Size</name> <operator pos:start="513:76" pos:end="513:76">+</operator> <name pos:start="513:78" pos:end="513:78">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="515:13" pos:end="515:49"><expr pos:start="515:13" pos:end="515:48"><name pos:start="515:13" pos:end="515:44"><name pos:start="515:13" pos:end="515:19">filter2</name><index pos:start="515:20" pos:end="515:44">[<expr pos:start="515:21" pos:end="515:43"><name pos:start="515:21" pos:end="515:21">i</name> <operator pos:start="515:23" pos:end="515:23">*</operator> <name pos:start="515:25" pos:end="515:35">filter2Size</name> <operator pos:start="515:37" pos:end="515:37">+</operator> <name pos:start="515:39" pos:end="515:39">k</name> <operator pos:start="515:41" pos:end="515:41">-</operator> <literal type="number" pos:start="515:43" pos:end="515:43">1</literal></expr>]</index></name> <operator pos:start="515:46" pos:end="515:46">=</operator> <literal type="number" pos:start="515:48" pos:end="515:48">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="517:13" pos:end="517:30"><expr pos:start="517:13" pos:end="517:29"><operator pos:start="517:13" pos:end="517:13">(</operator><operator pos:start="517:14" pos:end="517:14">*</operator><name pos:start="517:15" pos:end="517:23">filterPos</name><operator pos:start="517:24" pos:end="517:24">)</operator><index pos:start="517:25" pos:end="517:27">[<expr pos:start="517:26" pos:end="517:26"><name pos:start="517:26" pos:end="517:26">i</name></expr>]</index><operator pos:start="517:28" pos:end="517:29">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="523:9" pos:end="523:19"><expr pos:start="523:9" pos:end="523:18"><name pos:start="523:9" pos:end="523:14">cutOff</name> <operator pos:start="523:16" pos:end="523:16">=</operator> <literal type="number" pos:start="523:18" pos:end="523:18">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="525:9" pos:end="525:43">/* count near zeros on the right */</comment>

        <for pos:start="527:9" pos:end="539:9">for <control pos:start="527:13" pos:end="527:45">(<init pos:start="527:14" pos:end="527:33"><expr pos:start="527:14" pos:end="527:32"><name pos:start="527:14" pos:end="527:14">j</name> <operator pos:start="527:16" pos:end="527:16">=</operator> <name pos:start="527:18" pos:end="527:28">filter2Size</name> <operator pos:start="527:30" pos:end="527:30">-</operator> <literal type="number" pos:start="527:32" pos:end="527:32">1</literal></expr>;</init> <condition pos:start="527:35" pos:end="527:40"><expr pos:start="527:35" pos:end="527:39"><name pos:start="527:35" pos:end="527:35">j</name> <operator pos:start="527:37" pos:end="527:37">&gt;</operator> <literal type="number" pos:start="527:39" pos:end="527:39">0</literal></expr>;</condition> <incr pos:start="527:42" pos:end="527:44"><expr pos:start="527:42" pos:end="527:44"><name pos:start="527:42" pos:end="527:42">j</name><operator pos:start="527:43" pos:end="527:44">--</operator></expr></incr>)</control> <block pos:start="527:47" pos:end="539:9">{<block_content pos:start="529:13" pos:end="537:18">

            <expr_stmt pos:start="529:13" pos:end="529:58"><expr pos:start="529:13" pos:end="529:57"><name pos:start="529:13" pos:end="529:18">cutOff</name> <operator pos:start="529:20" pos:end="529:21">+=</operator> <call pos:start="529:23" pos:end="529:57"><name pos:start="529:23" pos:end="529:27">FFABS</name><argument_list pos:start="529:28" pos:end="529:57">(<argument pos:start="529:29" pos:end="529:56"><expr pos:start="529:29" pos:end="529:56"><name pos:start="529:29" pos:end="529:56"><name pos:start="529:29" pos:end="529:35">filter2</name><index pos:start="529:36" pos:end="529:56">[<expr pos:start="529:37" pos:end="529:55"><name pos:start="529:37" pos:end="529:37">i</name> <operator pos:start="529:39" pos:end="529:39">*</operator> <name pos:start="529:41" pos:end="529:51">filter2Size</name> <operator pos:start="529:53" pos:end="529:53">+</operator> <name pos:start="529:55" pos:end="529:55">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="533:13" pos:end="535:22"><if pos:start="533:13" pos:end="535:22">if <condition pos:start="533:16" pos:end="533:54">(<expr pos:start="533:17" pos:end="533:53"><name pos:start="533:17" pos:end="533:22">cutOff</name> <operator pos:start="533:24" pos:end="533:24">&gt;</operator> <name pos:start="533:26" pos:end="533:46">SWS_MAX_REDUCE_CUTOFF</name> <operator pos:start="533:48" pos:end="533:48">*</operator> <name pos:start="533:50" pos:end="533:53">fone</name></expr>)</condition><block type="pseudo" pos:start="535:17" pos:end="535:22"><block_content pos:start="535:17" pos:end="535:22">

                <break pos:start="535:17" pos:end="535:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="537:13" pos:end="537:18"><expr pos:start="537:13" pos:end="537:17"><name pos:start="537:13" pos:end="537:15">min</name><operator pos:start="537:16" pos:end="537:17">--</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="543:9" pos:end="545:32"><if pos:start="543:9" pos:end="545:32">if <condition pos:start="543:12" pos:end="543:32">(<expr pos:start="543:13" pos:end="543:31"><name pos:start="543:13" pos:end="543:15">min</name> <operator pos:start="543:17" pos:end="543:17">&gt;</operator> <name pos:start="543:19" pos:end="543:31">minFilterSize</name></expr>)</condition><block type="pseudo" pos:start="545:13" pos:end="545:32"><block_content pos:start="545:13" pos:end="545:32">

            <expr_stmt pos:start="545:13" pos:end="545:32"><expr pos:start="545:13" pos:end="545:31"><name pos:start="545:13" pos:end="545:25">minFilterSize</name> <operator pos:start="545:27" pos:end="545:27">=</operator> <name pos:start="545:29" pos:end="545:31">min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="551:5" pos:end="571:5"><if pos:start="551:5" pos:end="571:5">if <condition pos:start="551:8" pos:end="551:56">(<expr pos:start="551:9" pos:end="551:55"><name pos:start="551:9" pos:end="551:20">HAVE_ALTIVEC</name> <operator pos:start="551:22" pos:end="551:23">&amp;&amp;</operator> <name pos:start="551:25" pos:end="551:33">cpu_flags</name> <operator pos:start="551:35" pos:end="551:35">&amp;</operator> <name pos:start="551:37" pos:end="551:55">AV_CPU_FLAG_ALTIVEC</name></expr>)</condition> <block pos:start="551:58" pos:end="571:5">{<block_content pos:start="555:9" pos:end="569:28">

        <comment type="line" pos:start="553:9" pos:end="553:78">// we can handle the special case 4, so we don't want to go the full 8</comment>

        <if_stmt pos:start="555:9" pos:end="557:28"><if pos:start="555:9" pos:end="557:28">if <condition pos:start="555:12" pos:end="555:30">(<expr pos:start="555:13" pos:end="555:29"><name pos:start="555:13" pos:end="555:25">minFilterSize</name> <operator pos:start="555:27" pos:end="555:27">&lt;</operator> <literal type="number" pos:start="555:29" pos:end="555:29">5</literal></expr>)</condition><block type="pseudo" pos:start="557:13" pos:end="557:28"><block_content pos:start="557:13" pos:end="557:28">

            <expr_stmt pos:start="557:13" pos:end="557:28"><expr pos:start="557:13" pos:end="557:27"><name pos:start="557:13" pos:end="557:23">filterAlign</name> <operator pos:start="557:25" pos:end="557:25">=</operator> <literal type="number" pos:start="557:27" pos:end="557:27">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="561:9" pos:end="565:77">/* We really don't want to waste our time doing useless computation, so

         * fall back on the scalar C code for very small filters.

         * Vectorizing is worth it only if you have a decent-sized vector. */</comment>

        <if_stmt pos:start="567:9" pos:end="569:28"><if pos:start="567:9" pos:end="569:28">if <condition pos:start="567:12" pos:end="567:30">(<expr pos:start="567:13" pos:end="567:29"><name pos:start="567:13" pos:end="567:25">minFilterSize</name> <operator pos:start="567:27" pos:end="567:27">&lt;</operator> <literal type="number" pos:start="567:29" pos:end="567:29">3</literal></expr>)</condition><block type="pseudo" pos:start="569:13" pos:end="569:28"><block_content pos:start="569:13" pos:end="569:28">

            <expr_stmt pos:start="569:13" pos:end="569:28"><expr pos:start="569:13" pos:end="569:27"><name pos:start="569:13" pos:end="569:23">filterAlign</name> <operator pos:start="569:25" pos:end="569:25">=</operator> <literal type="number" pos:start="569:27" pos:end="569:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="575:5" pos:end="583:5"><if pos:start="575:5" pos:end="583:5">if <condition pos:start="575:8" pos:end="575:48">(<expr pos:start="575:9" pos:end="575:47"><name pos:start="575:9" pos:end="575:16">HAVE_MMX</name> <operator pos:start="575:18" pos:end="575:19">&amp;&amp;</operator> <name pos:start="575:21" pos:end="575:29">cpu_flags</name> <operator pos:start="575:31" pos:end="575:31">&amp;</operator> <name pos:start="575:33" pos:end="575:47">AV_CPU_FLAG_MMX</name></expr>)</condition> <block pos:start="575:50" pos:end="583:5">{<block_content pos:start="579:9" pos:end="581:28">

        <comment type="line" pos:start="577:9" pos:end="577:55">// special case for unscaled vertical filtering</comment>

        <if_stmt pos:start="579:9" pos:end="581:28"><if pos:start="579:9" pos:end="581:28">if <condition pos:start="579:12" pos:end="579:51">(<expr pos:start="579:13" pos:end="579:50"><name pos:start="579:13" pos:end="579:25">minFilterSize</name> <operator pos:start="579:27" pos:end="579:28">==</operator> <literal type="number" pos:start="579:30" pos:end="579:30">1</literal> <operator pos:start="579:32" pos:end="579:33">&amp;&amp;</operator> <name pos:start="579:35" pos:end="579:45">filterAlign</name> <operator pos:start="579:47" pos:end="579:48">==</operator> <literal type="number" pos:start="579:50" pos:end="579:50">2</literal></expr>)</condition><block type="pseudo" pos:start="581:13" pos:end="581:28"><block_content pos:start="581:13" pos:end="581:28">

            <expr_stmt pos:start="581:13" pos:end="581:28"><expr pos:start="581:13" pos:end="581:27"><name pos:start="581:13" pos:end="581:23">filterAlign</name> <operator pos:start="581:25" pos:end="581:25">=</operator> <literal type="number" pos:start="581:27" pos:end="581:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="587:5" pos:end="587:30"><expr pos:start="587:5" pos:end="587:29"><call pos:start="587:5" pos:end="587:29"><name pos:start="587:5" pos:end="587:10">assert</name><argument_list pos:start="587:11" pos:end="587:29">(<argument pos:start="587:12" pos:end="587:28"><expr pos:start="587:12" pos:end="587:28"><name pos:start="587:12" pos:end="587:24">minFilterSize</name> <operator pos:start="587:26" pos:end="587:26">&gt;</operator> <literal type="number" pos:start="587:28" pos:end="587:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="589:5" pos:end="589:76"><expr pos:start="589:5" pos:end="589:75"><name pos:start="589:5" pos:end="589:14">filterSize</name> <operator pos:start="589:16" pos:end="589:16">=</operator> <operator pos:start="589:18" pos:end="589:18">(</operator><name pos:start="589:19" pos:end="589:31">minFilterSize</name> <operator pos:start="589:33" pos:end="589:33">+</operator> <operator pos:start="589:35" pos:end="589:35">(</operator><name pos:start="589:36" pos:end="589:46">filterAlign</name> <operator pos:start="589:48" pos:end="589:48">-</operator> <literal type="number" pos:start="589:50" pos:end="589:50">1</literal><operator pos:start="589:51" pos:end="589:51">)</operator><operator pos:start="589:52" pos:end="589:52">)</operator> <operator pos:start="589:54" pos:end="589:54">&amp;</operator> <operator pos:start="589:56" pos:end="589:56">(</operator><operator pos:start="589:57" pos:end="589:57">~</operator><operator pos:start="589:58" pos:end="589:58">(</operator><name pos:start="589:59" pos:end="589:69">filterAlign</name> <operator pos:start="589:71" pos:end="589:71">-</operator> <literal type="number" pos:start="589:73" pos:end="589:73">1</literal><operator pos:start="589:74" pos:end="589:74">)</operator><operator pos:start="589:75" pos:end="589:75">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="591:5" pos:end="591:27"><expr pos:start="591:5" pos:end="591:26"><call pos:start="591:5" pos:end="591:26"><name pos:start="591:5" pos:end="591:10">assert</name><argument_list pos:start="591:11" pos:end="591:26">(<argument pos:start="591:12" pos:end="591:25"><expr pos:start="591:12" pos:end="591:25"><name pos:start="591:12" pos:end="591:21">filterSize</name> <operator pos:start="591:23" pos:end="591:23">&gt;</operator> <literal type="number" pos:start="591:25" pos:end="591:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="593:5" pos:end="593:60"><expr pos:start="593:5" pos:end="593:59"><name pos:start="593:5" pos:end="593:10">filter</name> <operator pos:start="593:12" pos:end="593:12">=</operator> <call pos:start="593:14" pos:end="593:59"><name pos:start="593:14" pos:end="593:22">av_malloc</name><argument_list pos:start="593:23" pos:end="593:59">(<argument pos:start="593:24" pos:end="593:58"><expr pos:start="593:24" pos:end="593:58"><name pos:start="593:24" pos:end="593:33">filterSize</name> <operator pos:start="593:35" pos:end="593:35">*</operator> <name pos:start="593:37" pos:end="593:40">dstW</name> <operator pos:start="593:42" pos:end="593:42">*</operator> <sizeof pos:start="593:44" pos:end="593:58">sizeof<argument_list pos:start="593:50" pos:end="593:58">(<argument pos:start="593:51" pos:end="593:57"><expr pos:start="593:51" pos:end="593:57"><operator pos:start="593:51" pos:end="593:51">*</operator><name pos:start="593:52" pos:end="593:57">filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="595:5" pos:end="599:18"><if pos:start="595:5" pos:end="599:18">if <condition pos:start="595:8" pos:end="597:79">(<expr pos:start="595:9" pos:end="597:78"><name pos:start="595:9" pos:end="595:18">filterSize</name> <operator pos:start="595:20" pos:end="595:21">&gt;=</operator> <name pos:start="595:23" pos:end="595:37">MAX_FILTER_SIZE</name> <operator pos:start="595:39" pos:end="595:39">*</operator> <literal type="number" pos:start="595:41" pos:end="595:42">16</literal> <operator pos:start="595:44" pos:end="595:44">/</operator>

                      <operator pos:start="597:23" pos:end="597:23">(</operator><ternary pos:start="597:24" pos:end="597:66"><condition pos:start="597:24" pos:end="597:51"><expr pos:start="597:24" pos:end="597:49"><operator pos:start="597:24" pos:end="597:24">(</operator><name pos:start="597:25" pos:end="597:29">flags</name> <operator pos:start="597:31" pos:end="597:31">&amp;</operator> <name pos:start="597:33" pos:end="597:48">SWS_ACCURATE_RND</name><operator pos:start="597:49" pos:end="597:49">)</operator></expr> ?</condition><then pos:start="597:53" pos:end="597:61"> <expr pos:start="597:53" pos:end="597:61"><name pos:start="597:53" pos:end="597:61">APCK_SIZE</name></expr> </then><else pos:start="597:63" pos:end="597:66">: <expr pos:start="597:65" pos:end="597:66"><literal type="number" pos:start="597:65" pos:end="597:66">16</literal></expr></else></ternary><operator pos:start="597:67" pos:end="597:67">)</operator> <operator pos:start="597:69" pos:end="597:70">||</operator> <operator pos:start="597:72" pos:end="597:72">!</operator><name pos:start="597:73" pos:end="597:78">filter</name></expr>)</condition><block type="pseudo" pos:start="599:9" pos:end="599:18"><block_content pos:start="599:9" pos:end="599:18">

        <goto pos:start="599:9" pos:end="599:18">goto <name pos:start="599:14" pos:end="599:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="601:5" pos:end="601:32"><expr pos:start="601:5" pos:end="601:31"><operator pos:start="601:5" pos:end="601:5">*</operator><name pos:start="601:6" pos:end="601:18">outFilterSize</name> <operator pos:start="601:20" pos:end="601:20">=</operator> <name pos:start="601:22" pos:end="601:31">filterSize</name></expr>;</expr_stmt>



    <if_stmt pos:start="605:5" pos:end="611:40"><if pos:start="605:5" pos:end="611:40">if <condition pos:start="605:8" pos:end="605:31">(<expr pos:start="605:9" pos:end="605:30"><name pos:start="605:9" pos:end="605:13">flags</name> <operator pos:start="605:15" pos:end="605:15">&amp;</operator> <name pos:start="605:17" pos:end="605:30">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="607:9" pos:end="611:40"><block_content pos:start="607:9" pos:end="611:40">

        <expr_stmt pos:start="607:9" pos:end="611:40"><expr pos:start="607:9" pos:end="611:39"><call pos:start="607:9" pos:end="611:39"><name pos:start="607:9" pos:end="607:14">av_log</name><argument_list pos:start="607:15" pos:end="611:39">(<argument pos:start="607:16" pos:end="607:19"><expr pos:start="607:16" pos:end="607:19"><name pos:start="607:16" pos:end="607:19">NULL</name></expr></argument>, <argument pos:start="607:22" pos:end="607:35"><expr pos:start="607:22" pos:end="607:35"><name pos:start="607:22" pos:end="607:35">AV_LOG_VERBOSE</name></expr></argument>,

               <argument pos:start="609:16" pos:end="609:68"><expr pos:start="609:16" pos:end="609:68"><literal type="string" pos:start="609:16" pos:end="609:68">"SwScaler: reducing / aligning filtersize %d -&gt; %d\n"</literal></expr></argument>,

               <argument pos:start="611:16" pos:end="611:26"><expr pos:start="611:16" pos:end="611:26"><name pos:start="611:16" pos:end="611:26">filter2Size</name></expr></argument>, <argument pos:start="611:29" pos:end="611:38"><expr pos:start="611:29" pos:end="611:38"><name pos:start="611:29" pos:end="611:38">filterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="613:5" pos:end="613:57">/* try to reduce the filter-size (step2 reduce it) */</comment>

    <for pos:start="615:5" pos:end="637:5">for <control pos:start="615:9" pos:end="615:30">(<init pos:start="615:10" pos:end="615:15"><expr pos:start="615:10" pos:end="615:14"><name pos:start="615:10" pos:end="615:10">i</name> <operator pos:start="615:12" pos:end="615:12">=</operator> <literal type="number" pos:start="615:14" pos:end="615:14">0</literal></expr>;</init> <condition pos:start="615:17" pos:end="615:25"><expr pos:start="615:17" pos:end="615:24"><name pos:start="615:17" pos:end="615:17">i</name> <operator pos:start="615:19" pos:end="615:19">&lt;</operator> <name pos:start="615:21" pos:end="615:24">dstW</name></expr>;</condition> <incr pos:start="615:27" pos:end="615:29"><expr pos:start="615:27" pos:end="615:29"><name pos:start="615:27" pos:end="615:27">i</name><operator pos:start="615:28" pos:end="615:29">++</operator></expr></incr>)</control> <block pos:start="615:32" pos:end="637:5">{<block_content pos:start="617:9" pos:end="635:9">

        <decl_stmt pos:start="617:9" pos:end="617:14"><decl pos:start="617:9" pos:end="617:13"><type pos:start="617:9" pos:end="617:11"><name pos:start="617:9" pos:end="617:11">int</name></type> <name pos:start="617:13" pos:end="617:13">j</name></decl>;</decl_stmt>



        <for pos:start="621:9" pos:end="635:9">for <control pos:start="621:13" pos:end="621:40">(<init pos:start="621:14" pos:end="621:19"><expr pos:start="621:14" pos:end="621:18"><name pos:start="621:14" pos:end="621:14">j</name> <operator pos:start="621:16" pos:end="621:16">=</operator> <literal type="number" pos:start="621:18" pos:end="621:18">0</literal></expr>;</init> <condition pos:start="621:21" pos:end="621:35"><expr pos:start="621:21" pos:end="621:34"><name pos:start="621:21" pos:end="621:21">j</name> <operator pos:start="621:23" pos:end="621:23">&lt;</operator> <name pos:start="621:25" pos:end="621:34">filterSize</name></expr>;</condition> <incr pos:start="621:37" pos:end="621:39"><expr pos:start="621:37" pos:end="621:39"><name pos:start="621:37" pos:end="621:37">j</name><operator pos:start="621:38" pos:end="621:39">++</operator></expr></incr>)</control> <block pos:start="621:42" pos:end="635:9">{<block_content pos:start="623:13" pos:end="633:47">

            <if_stmt pos:start="623:13" pos:end="629:74"><if pos:start="623:13" pos:end="625:47">if <condition pos:start="623:16" pos:end="623:33">(<expr pos:start="623:17" pos:end="623:32"><name pos:start="623:17" pos:end="623:17">j</name> <operator pos:start="623:19" pos:end="623:20">&gt;=</operator> <name pos:start="623:22" pos:end="623:32">filter2Size</name></expr>)</condition><block type="pseudo" pos:start="625:17" pos:end="625:47"><block_content pos:start="625:17" pos:end="625:47">

                <expr_stmt pos:start="625:17" pos:end="625:47"><expr pos:start="625:17" pos:end="625:46"><name pos:start="625:17" pos:end="625:42"><name pos:start="625:17" pos:end="625:22">filter</name><index pos:start="625:23" pos:end="625:42">[<expr pos:start="625:24" pos:end="625:41"><name pos:start="625:24" pos:end="625:24">i</name> <operator pos:start="625:26" pos:end="625:26">*</operator> <name pos:start="625:28" pos:end="625:37">filterSize</name> <operator pos:start="625:39" pos:end="625:39">+</operator> <name pos:start="625:41" pos:end="625:41">j</name></expr>]</index></name> <operator pos:start="625:44" pos:end="625:44">=</operator> <literal type="number" pos:start="625:46" pos:end="625:46">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="627:13" pos:end="629:74">else<block type="pseudo" pos:start="629:17" pos:end="629:74"><block_content pos:start="629:17" pos:end="629:74">

                <expr_stmt pos:start="629:17" pos:end="629:74"><expr pos:start="629:17" pos:end="629:73"><name pos:start="629:17" pos:end="629:42"><name pos:start="629:17" pos:end="629:22">filter</name><index pos:start="629:23" pos:end="629:42">[<expr pos:start="629:24" pos:end="629:41"><name pos:start="629:24" pos:end="629:24">i</name> <operator pos:start="629:26" pos:end="629:26">*</operator> <name pos:start="629:28" pos:end="629:37">filterSize</name> <operator pos:start="629:39" pos:end="629:39">+</operator> <name pos:start="629:41" pos:end="629:41">j</name></expr>]</index></name> <operator pos:start="629:44" pos:end="629:44">=</operator> <name pos:start="629:46" pos:end="629:73"><name pos:start="629:46" pos:end="629:52">filter2</name><index pos:start="629:53" pos:end="629:73">[<expr pos:start="629:54" pos:end="629:72"><name pos:start="629:54" pos:end="629:54">i</name> <operator pos:start="629:56" pos:end="629:56">*</operator> <name pos:start="629:58" pos:end="629:68">filter2Size</name> <operator pos:start="629:70" pos:end="629:70">+</operator> <name pos:start="629:72" pos:end="629:72">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="631:13" pos:end="633:47"><if pos:start="631:13" pos:end="633:47">if <condition pos:start="631:16" pos:end="631:61">(<expr pos:start="631:17" pos:end="631:60"><operator pos:start="631:17" pos:end="631:17">(</operator><name pos:start="631:18" pos:end="631:22">flags</name> <operator pos:start="631:24" pos:end="631:24">&amp;</operator> <name pos:start="631:26" pos:end="631:37">SWS_BITEXACT</name><operator pos:start="631:38" pos:end="631:38">)</operator> <operator pos:start="631:40" pos:end="631:41">&amp;&amp;</operator> <name pos:start="631:43" pos:end="631:43">j</name> <operator pos:start="631:45" pos:end="631:46">&gt;=</operator> <name pos:start="631:48" pos:end="631:60">minFilterSize</name></expr>)</condition><block type="pseudo" pos:start="633:17" pos:end="633:47"><block_content pos:start="633:17" pos:end="633:47">

                <expr_stmt pos:start="633:17" pos:end="633:47"><expr pos:start="633:17" pos:end="633:46"><name pos:start="633:17" pos:end="633:42"><name pos:start="633:17" pos:end="633:22">filter</name><index pos:start="633:23" pos:end="633:42">[<expr pos:start="633:24" pos:end="633:41"><name pos:start="633:24" pos:end="633:24">i</name> <operator pos:start="633:26" pos:end="633:26">*</operator> <name pos:start="633:28" pos:end="633:37">filterSize</name> <operator pos:start="633:39" pos:end="633:39">+</operator> <name pos:start="633:41" pos:end="633:41">j</name></expr>]</index></name> <operator pos:start="633:44" pos:end="633:44">=</operator> <literal type="number" pos:start="633:46" pos:end="633:46">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="line" pos:start="641:5" pos:end="641:47">// FIXME try to align filterPos if possible</comment>



    <comment type="line" pos:start="645:5" pos:end="645:18">// fix borders</comment>

    <if_stmt pos:start="647:5" pos:end="695:5"><if pos:start="647:5" pos:end="695:5">if <condition pos:start="647:8" pos:end="647:22">(<expr pos:start="647:9" pos:end="647:21"><name pos:start="647:9" pos:end="647:21">is_horizontal</name></expr>)</condition> <block pos:start="647:24" pos:end="695:5">{<block_content pos:start="649:9" pos:end="693:9">

        <for pos:start="649:9" pos:end="693:9">for <control pos:start="649:13" pos:end="649:34">(<init pos:start="649:14" pos:end="649:19"><expr pos:start="649:14" pos:end="649:18"><name pos:start="649:14" pos:end="649:14">i</name> <operator pos:start="649:16" pos:end="649:16">=</operator> <literal type="number" pos:start="649:18" pos:end="649:18">0</literal></expr>;</init> <condition pos:start="649:21" pos:end="649:29"><expr pos:start="649:21" pos:end="649:28"><name pos:start="649:21" pos:end="649:21">i</name> <operator pos:start="649:23" pos:end="649:23">&lt;</operator> <name pos:start="649:25" pos:end="649:28">dstW</name></expr>;</condition> <incr pos:start="649:31" pos:end="649:33"><expr pos:start="649:31" pos:end="649:33"><name pos:start="649:31" pos:end="649:31">i</name><operator pos:start="649:32" pos:end="649:33">++</operator></expr></incr>)</control> <block pos:start="649:36" pos:end="693:9">{<block_content pos:start="651:13" pos:end="691:13">

            <decl_stmt pos:start="651:13" pos:end="651:18"><decl pos:start="651:13" pos:end="651:17"><type pos:start="651:13" pos:end="651:15"><name pos:start="651:13" pos:end="651:15">int</name></type> <name pos:start="651:17" pos:end="651:17">j</name></decl>;</decl_stmt>

            <if_stmt pos:start="653:13" pos:end="669:13"><if pos:start="653:13" pos:end="669:13">if <condition pos:start="653:16" pos:end="653:36">(<expr pos:start="653:17" pos:end="653:35"><operator pos:start="653:17" pos:end="653:17">(</operator><operator pos:start="653:18" pos:end="653:18">*</operator><name pos:start="653:19" pos:end="653:27">filterPos</name><operator pos:start="653:28" pos:end="653:28">)</operator><index pos:start="653:29" pos:end="653:31">[<expr pos:start="653:30" pos:end="653:30"><name pos:start="653:30" pos:end="653:30">i</name></expr>]</index> <operator pos:start="653:33" pos:end="653:33">&lt;</operator> <literal type="number" pos:start="653:35" pos:end="653:35">0</literal></expr>)</condition> <block pos:start="653:38" pos:end="669:13">{<block_content pos:start="657:17" pos:end="667:36">

                <comment type="line" pos:start="655:17" pos:end="655:76">// move filter coefficients left to compensate for filterPos</comment>

                <for pos:start="657:17" pos:end="665:17">for <control pos:start="657:21" pos:end="657:48">(<init pos:start="657:22" pos:end="657:27"><expr pos:start="657:22" pos:end="657:26"><name pos:start="657:22" pos:end="657:22">j</name> <operator pos:start="657:24" pos:end="657:24">=</operator> <literal type="number" pos:start="657:26" pos:end="657:26">1</literal></expr>;</init> <condition pos:start="657:29" pos:end="657:43"><expr pos:start="657:29" pos:end="657:42"><name pos:start="657:29" pos:end="657:29">j</name> <operator pos:start="657:31" pos:end="657:31">&lt;</operator> <name pos:start="657:33" pos:end="657:42">filterSize</name></expr>;</condition> <incr pos:start="657:45" pos:end="657:47"><expr pos:start="657:45" pos:end="657:47"><name pos:start="657:45" pos:end="657:45">j</name><operator pos:start="657:46" pos:end="657:47">++</operator></expr></incr>)</control> <block pos:start="657:50" pos:end="665:17">{<block_content pos:start="659:21" pos:end="663:55">

                    <decl_stmt pos:start="659:21" pos:end="659:61"><decl pos:start="659:21" pos:end="659:60"><type pos:start="659:21" pos:end="659:23"><name pos:start="659:21" pos:end="659:23">int</name></type> <name pos:start="659:25" pos:end="659:28">left</name> <init pos:start="659:30" pos:end="659:60">= <expr pos:start="659:32" pos:end="659:60"><call pos:start="659:32" pos:end="659:60"><name pos:start="659:32" pos:end="659:36">FFMAX</name><argument_list pos:start="659:37" pos:end="659:60">(<argument pos:start="659:38" pos:end="659:56"><expr pos:start="659:38" pos:end="659:56"><name pos:start="659:38" pos:end="659:38">j</name> <operator pos:start="659:40" pos:end="659:40">+</operator> <operator pos:start="659:42" pos:end="659:42">(</operator><operator pos:start="659:43" pos:end="659:43">*</operator><name pos:start="659:44" pos:end="659:52">filterPos</name><operator pos:start="659:53" pos:end="659:53">)</operator><index pos:start="659:54" pos:end="659:56">[<expr pos:start="659:55" pos:end="659:55"><name pos:start="659:55" pos:end="659:55">i</name></expr>]</index></expr></argument>, <argument pos:start="659:59" pos:end="659:59"><expr pos:start="659:59" pos:end="659:59"><literal type="number" pos:start="659:59" pos:end="659:59">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="661:21" pos:end="661:80"><expr pos:start="661:21" pos:end="661:79"><name pos:start="661:21" pos:end="661:49"><name pos:start="661:21" pos:end="661:26">filter</name><index pos:start="661:27" pos:end="661:49">[<expr pos:start="661:28" pos:end="661:48"><name pos:start="661:28" pos:end="661:28">i</name> <operator pos:start="661:30" pos:end="661:30">*</operator> <name pos:start="661:32" pos:end="661:41">filterSize</name> <operator pos:start="661:43" pos:end="661:43">+</operator> <name pos:start="661:45" pos:end="661:48">left</name></expr>]</index></name> <operator pos:start="661:51" pos:end="661:52">+=</operator> <name pos:start="661:54" pos:end="661:79"><name pos:start="661:54" pos:end="661:59">filter</name><index pos:start="661:60" pos:end="661:79">[<expr pos:start="661:61" pos:end="661:78"><name pos:start="661:61" pos:end="661:61">i</name> <operator pos:start="661:63" pos:end="661:63">*</operator> <name pos:start="661:65" pos:end="661:74">filterSize</name> <operator pos:start="661:76" pos:end="661:76">+</operator> <name pos:start="661:78" pos:end="661:78">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="663:21" pos:end="663:55"><expr pos:start="663:21" pos:end="663:54"><name pos:start="663:21" pos:end="663:46"><name pos:start="663:21" pos:end="663:26">filter</name><index pos:start="663:27" pos:end="663:46">[<expr pos:start="663:28" pos:end="663:45"><name pos:start="663:28" pos:end="663:28">i</name> <operator pos:start="663:30" pos:end="663:30">*</operator> <name pos:start="663:32" pos:end="663:41">filterSize</name> <operator pos:start="663:43" pos:end="663:43">+</operator> <name pos:start="663:45" pos:end="663:45">j</name></expr>]</index></name>     <operator pos:start="663:52" pos:end="663:52">=</operator> <literal type="number" pos:start="663:54" pos:end="663:54">0</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="667:17" pos:end="667:36"><expr pos:start="667:17" pos:end="667:35"><operator pos:start="667:17" pos:end="667:17">(</operator><operator pos:start="667:18" pos:end="667:18">*</operator><name pos:start="667:19" pos:end="667:27">filterPos</name><operator pos:start="667:28" pos:end="667:28">)</operator><index pos:start="667:29" pos:end="667:31">[<expr pos:start="667:30" pos:end="667:30"><name pos:start="667:30" pos:end="667:30">i</name></expr>]</index> <operator pos:start="667:33" pos:end="667:33">=</operator> <literal type="number" pos:start="667:35" pos:end="667:35">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="673:13" pos:end="691:13"><if pos:start="673:13" pos:end="691:13">if <condition pos:start="673:16" pos:end="673:52">(<expr pos:start="673:17" pos:end="673:51"><operator pos:start="673:17" pos:end="673:17">(</operator><operator pos:start="673:18" pos:end="673:18">*</operator><name pos:start="673:19" pos:end="673:27">filterPos</name><operator pos:start="673:28" pos:end="673:28">)</operator><index pos:start="673:29" pos:end="673:31">[<expr pos:start="673:30" pos:end="673:30"><name pos:start="673:30" pos:end="673:30">i</name></expr>]</index> <operator pos:start="673:33" pos:end="673:33">+</operator> <name pos:start="673:35" pos:end="673:44">filterSize</name> <operator pos:start="673:46" pos:end="673:46">&gt;</operator> <name pos:start="673:48" pos:end="673:51">srcW</name></expr>)</condition> <block pos:start="673:54" pos:end="691:13">{<block_content pos:start="675:17" pos:end="689:52">

                <decl_stmt pos:start="675:17" pos:end="675:64"><decl pos:start="675:17" pos:end="675:63"><type pos:start="675:17" pos:end="675:19"><name pos:start="675:17" pos:end="675:19">int</name></type> <name pos:start="675:21" pos:end="675:25">shift</name> <init pos:start="675:27" pos:end="675:63">= <expr pos:start="675:29" pos:end="675:63"><operator pos:start="675:29" pos:end="675:29">(</operator><operator pos:start="675:30" pos:end="675:30">*</operator><name pos:start="675:31" pos:end="675:39">filterPos</name><operator pos:start="675:40" pos:end="675:40">)</operator><index pos:start="675:41" pos:end="675:43">[<expr pos:start="675:42" pos:end="675:42"><name pos:start="675:42" pos:end="675:42">i</name></expr>]</index> <operator pos:start="675:45" pos:end="675:45">+</operator> <name pos:start="675:47" pos:end="675:56">filterSize</name> <operator pos:start="675:58" pos:end="675:58">-</operator> <name pos:start="675:60" pos:end="675:63">srcW</name></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:start="677:17" pos:end="677:77">// move filter coefficients right to compensate for filterPos</comment>

                <for pos:start="679:17" pos:end="687:17">for <control pos:start="679:21" pos:end="679:53">(<init pos:start="679:22" pos:end="679:40"><expr pos:start="679:22" pos:end="679:39"><name pos:start="679:22" pos:end="679:22">j</name> <operator pos:start="679:24" pos:end="679:24">=</operator> <name pos:start="679:26" pos:end="679:35">filterSize</name> <operator pos:start="679:37" pos:end="679:37">-</operator> <literal type="number" pos:start="679:39" pos:end="679:39">2</literal></expr>;</init> <condition pos:start="679:42" pos:end="679:48"><expr pos:start="679:42" pos:end="679:47"><name pos:start="679:42" pos:end="679:42">j</name> <operator pos:start="679:44" pos:end="679:45">&gt;=</operator> <literal type="number" pos:start="679:47" pos:end="679:47">0</literal></expr>;</condition> <incr pos:start="679:50" pos:end="679:52"><expr pos:start="679:50" pos:end="679:52"><name pos:start="679:50" pos:end="679:50">j</name><operator pos:start="679:51" pos:end="679:52">--</operator></expr></incr>)</control> <block pos:start="679:55" pos:end="687:17">{<block_content pos:start="681:21" pos:end="685:56">

                    <decl_stmt pos:start="681:21" pos:end="681:65"><decl pos:start="681:21" pos:end="681:64"><type pos:start="681:21" pos:end="681:23"><name pos:start="681:21" pos:end="681:23">int</name></type> <name pos:start="681:25" pos:end="681:29">right</name> <init pos:start="681:31" pos:end="681:64">= <expr pos:start="681:33" pos:end="681:64"><call pos:start="681:33" pos:end="681:64"><name pos:start="681:33" pos:end="681:37">FFMIN</name><argument_list pos:start="681:38" pos:end="681:64">(<argument pos:start="681:39" pos:end="681:47"><expr pos:start="681:39" pos:end="681:47"><name pos:start="681:39" pos:end="681:39">j</name> <operator pos:start="681:41" pos:end="681:41">+</operator> <name pos:start="681:43" pos:end="681:47">shift</name></expr></argument>, <argument pos:start="681:50" pos:end="681:63"><expr pos:start="681:50" pos:end="681:63"><name pos:start="681:50" pos:end="681:59">filterSize</name> <operator pos:start="681:61" pos:end="681:61">-</operator> <literal type="number" pos:start="681:63" pos:end="681:63">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="683:21" pos:end="683:81"><expr pos:start="683:21" pos:end="683:80"><name pos:start="683:21" pos:end="683:50"><name pos:start="683:21" pos:end="683:26">filter</name><index pos:start="683:27" pos:end="683:50">[<expr pos:start="683:28" pos:end="683:49"><name pos:start="683:28" pos:end="683:28">i</name> <operator pos:start="683:30" pos:end="683:30">*</operator> <name pos:start="683:32" pos:end="683:41">filterSize</name> <operator pos:start="683:43" pos:end="683:43">+</operator> <name pos:start="683:45" pos:end="683:49">right</name></expr>]</index></name> <operator pos:start="683:52" pos:end="683:53">+=</operator> <name pos:start="683:55" pos:end="683:80"><name pos:start="683:55" pos:end="683:60">filter</name><index pos:start="683:61" pos:end="683:80">[<expr pos:start="683:62" pos:end="683:79"><name pos:start="683:62" pos:end="683:62">i</name> <operator pos:start="683:64" pos:end="683:64">*</operator> <name pos:start="683:66" pos:end="683:75">filterSize</name> <operator pos:start="683:77" pos:end="683:77">+</operator> <name pos:start="683:79" pos:end="683:79">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="685:21" pos:end="685:56"><expr pos:start="685:21" pos:end="685:55"><name pos:start="685:21" pos:end="685:46"><name pos:start="685:21" pos:end="685:26">filter</name><index pos:start="685:27" pos:end="685:46">[<expr pos:start="685:28" pos:end="685:45"><name pos:start="685:28" pos:end="685:28">i</name> <operator pos:start="685:30" pos:end="685:30">*</operator> <name pos:start="685:32" pos:end="685:41">filterSize</name> <operator pos:start="685:43" pos:end="685:43">+</operator> <name pos:start="685:45" pos:end="685:45">j</name></expr>]</index></name>      <operator pos:start="685:53" pos:end="685:53">=</operator> <literal type="number" pos:start="685:55" pos:end="685:55">0</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="689:17" pos:end="689:52"><expr pos:start="689:17" pos:end="689:51"><operator pos:start="689:17" pos:end="689:17">(</operator><operator pos:start="689:18" pos:end="689:18">*</operator><name pos:start="689:19" pos:end="689:27">filterPos</name><operator pos:start="689:28" pos:end="689:28">)</operator><index pos:start="689:29" pos:end="689:31">[<expr pos:start="689:30" pos:end="689:30"><name pos:start="689:30" pos:end="689:30">i</name></expr>]</index> <operator pos:start="689:33" pos:end="689:33">=</operator> <name pos:start="689:35" pos:end="689:38">srcW</name> <operator pos:start="689:40" pos:end="689:40">-</operator> <name pos:start="689:42" pos:end="689:51">filterSize</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="699:5" pos:end="699:65">// Note the +1 is for the MMX scaler which reads over the end</comment>

    <comment type="block" pos:start="701:5" pos:end="701:65">/* align at 16 for AltiVec (needed by hScale_altivec_real) */</comment>

    <expr_stmt pos:start="703:5" pos:end="705:75"><expr pos:start="703:5" pos:end="705:74"><call pos:start="703:5" pos:end="705:74"><name pos:start="703:5" pos:end="703:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="703:22" pos:end="705:74">(<argument pos:start="703:23" pos:end="703:26"><expr pos:start="703:23" pos:end="703:26"><name pos:start="703:23" pos:end="703:26">NULL</name></expr></argument>, <argument pos:start="703:29" pos:end="703:38"><expr pos:start="703:29" pos:end="703:38"><operator pos:start="703:29" pos:end="703:29">*</operator><name pos:start="703:30" pos:end="703:38">outFilter</name></expr></argument>,

                      <argument pos:start="705:23" pos:end="705:67"><expr pos:start="705:23" pos:end="705:67"><operator pos:start="705:23" pos:end="705:23">*</operator><name pos:start="705:24" pos:end="705:36">outFilterSize</name> <operator pos:start="705:38" pos:end="705:38">*</operator> <operator pos:start="705:40" pos:end="705:40">(</operator><name pos:start="705:41" pos:end="705:44">dstW</name> <operator pos:start="705:46" pos:end="705:46">+</operator> <literal type="number" pos:start="705:48" pos:end="705:48">3</literal><operator pos:start="705:49" pos:end="705:49">)</operator> <operator pos:start="705:51" pos:end="705:51">*</operator> <sizeof pos:start="705:53" pos:end="705:67">sizeof<argument_list pos:start="705:59" pos:end="705:67">(<argument pos:start="705:60" pos:end="705:66"><expr pos:start="705:60" pos:end="705:66"><name pos:start="705:60" pos:end="705:66">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="705:70" pos:end="705:73"><expr pos:start="705:70" pos:end="705:73"><name pos:start="705:70" pos:end="705:73">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="709:5" pos:end="709:40">/* normalize &amp; store in outFilter */</comment>

    <for pos:start="711:5" pos:end="741:5">for <control pos:start="711:9" pos:end="711:30">(<init pos:start="711:10" pos:end="711:15"><expr pos:start="711:10" pos:end="711:14"><name pos:start="711:10" pos:end="711:10">i</name> <operator pos:start="711:12" pos:end="711:12">=</operator> <literal type="number" pos:start="711:14" pos:end="711:14">0</literal></expr>;</init> <condition pos:start="711:17" pos:end="711:25"><expr pos:start="711:17" pos:end="711:24"><name pos:start="711:17" pos:end="711:17">i</name> <operator pos:start="711:19" pos:end="711:19">&lt;</operator> <name pos:start="711:21" pos:end="711:24">dstW</name></expr>;</condition> <incr pos:start="711:27" pos:end="711:29"><expr pos:start="711:27" pos:end="711:29"><name pos:start="711:27" pos:end="711:27">i</name><operator pos:start="711:28" pos:end="711:29">++</operator></expr></incr>)</control> <block pos:start="711:32" pos:end="741:5">{<block_content pos:start="713:9" pos:end="739:9">

        <decl_stmt pos:start="713:9" pos:end="713:14"><decl pos:start="713:9" pos:end="713:13"><type pos:start="713:9" pos:end="713:11"><name pos:start="713:9" pos:end="713:11">int</name></type> <name pos:start="713:13" pos:end="713:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="715:9" pos:end="715:26"><decl pos:start="715:9" pos:end="715:25"><type pos:start="715:9" pos:end="715:15"><name pos:start="715:9" pos:end="715:15">int64_t</name></type> <name pos:start="715:17" pos:end="715:21">error</name> <init pos:start="715:23" pos:end="715:25">= <expr pos:start="715:25" pos:end="715:25"><literal type="number" pos:start="715:25" pos:end="715:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="717:9" pos:end="717:26"><decl pos:start="717:9" pos:end="717:25"><type pos:start="717:9" pos:end="717:15"><name pos:start="717:9" pos:end="717:15">int64_t</name></type> <name pos:start="717:17" pos:end="717:19">sum</name>   <init pos:start="717:23" pos:end="717:25">= <expr pos:start="717:25" pos:end="717:25"><literal type="number" pos:start="717:25" pos:end="717:25">0</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="721:9" pos:end="725:9">for <control pos:start="721:13" pos:end="721:40">(<init pos:start="721:14" pos:end="721:19"><expr pos:start="721:14" pos:end="721:18"><name pos:start="721:14" pos:end="721:14">j</name> <operator pos:start="721:16" pos:end="721:16">=</operator> <literal type="number" pos:start="721:18" pos:end="721:18">0</literal></expr>;</init> <condition pos:start="721:21" pos:end="721:35"><expr pos:start="721:21" pos:end="721:34"><name pos:start="721:21" pos:end="721:21">j</name> <operator pos:start="721:23" pos:end="721:23">&lt;</operator> <name pos:start="721:25" pos:end="721:34">filterSize</name></expr>;</condition> <incr pos:start="721:37" pos:end="721:39"><expr pos:start="721:37" pos:end="721:39"><name pos:start="721:37" pos:end="721:37">j</name><operator pos:start="721:38" pos:end="721:39">++</operator></expr></incr>)</control> <block pos:start="721:42" pos:end="725:9">{<block_content pos:start="723:13" pos:end="723:46">

            <expr_stmt pos:start="723:13" pos:end="723:46"><expr pos:start="723:13" pos:end="723:45"><name pos:start="723:13" pos:end="723:15">sum</name> <operator pos:start="723:17" pos:end="723:18">+=</operator> <name pos:start="723:20" pos:end="723:45"><name pos:start="723:20" pos:end="723:25">filter</name><index pos:start="723:26" pos:end="723:45">[<expr pos:start="723:27" pos:end="723:44"><name pos:start="723:27" pos:end="723:27">i</name> <operator pos:start="723:29" pos:end="723:29">*</operator> <name pos:start="723:31" pos:end="723:40">filterSize</name> <operator pos:start="723:42" pos:end="723:42">+</operator> <name pos:start="723:44" pos:end="723:44">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="727:9" pos:end="727:36"><expr pos:start="727:9" pos:end="727:35"><name pos:start="727:9" pos:end="727:11">sum</name> <operator pos:start="727:13" pos:end="727:13">=</operator> <operator pos:start="727:15" pos:end="727:15">(</operator><name pos:start="727:16" pos:end="727:18">sum</name> <operator pos:start="727:20" pos:end="727:20">+</operator> <name pos:start="727:22" pos:end="727:24">one</name> <operator pos:start="727:26" pos:end="727:26">/</operator> <literal type="number" pos:start="727:28" pos:end="727:28">2</literal><operator pos:start="727:29" pos:end="727:29">)</operator> <operator pos:start="727:31" pos:end="727:31">/</operator> <name pos:start="727:33" pos:end="727:35">one</name></expr>;</expr_stmt>

        <for pos:start="729:9" pos:end="739:9">for <control pos:start="729:13" pos:end="729:44">(<init pos:start="729:14" pos:end="729:19"><expr pos:start="729:14" pos:end="729:18"><name pos:start="729:14" pos:end="729:14">j</name> <operator pos:start="729:16" pos:end="729:16">=</operator> <literal type="number" pos:start="729:18" pos:end="729:18">0</literal></expr>;</init> <condition pos:start="729:21" pos:end="729:39"><expr pos:start="729:21" pos:end="729:38"><name pos:start="729:21" pos:end="729:21">j</name> <operator pos:start="729:23" pos:end="729:23">&lt;</operator> <operator pos:start="729:25" pos:end="729:25">*</operator><name pos:start="729:26" pos:end="729:38">outFilterSize</name></expr>;</condition> <incr pos:start="729:41" pos:end="729:43"><expr pos:start="729:41" pos:end="729:43"><name pos:start="729:41" pos:end="729:41">j</name><operator pos:start="729:42" pos:end="729:43">++</operator></expr></incr>)</control> <block pos:start="729:46" pos:end="739:9">{<block_content pos:start="731:13" pos:end="737:68">

            <decl_stmt pos:start="731:13" pos:end="731:59"><decl pos:start="731:13" pos:end="731:58"><type pos:start="731:13" pos:end="731:19"><name pos:start="731:13" pos:end="731:19">int64_t</name></type> <name pos:start="731:21" pos:end="731:21">v</name> <init pos:start="731:23" pos:end="731:58">= <expr pos:start="731:25" pos:end="731:58"><name pos:start="731:25" pos:end="731:50"><name pos:start="731:25" pos:end="731:30">filter</name><index pos:start="731:31" pos:end="731:50">[<expr pos:start="731:32" pos:end="731:49"><name pos:start="731:32" pos:end="731:32">i</name> <operator pos:start="731:34" pos:end="731:34">*</operator> <name pos:start="731:36" pos:end="731:45">filterSize</name> <operator pos:start="731:47" pos:end="731:47">+</operator> <name pos:start="731:49" pos:end="731:49">j</name></expr>]</index></name> <operator pos:start="731:52" pos:end="731:52">+</operator> <name pos:start="731:54" pos:end="731:58">error</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="733:13" pos:end="733:44"><decl pos:start="733:13" pos:end="733:43"><type pos:start="733:13" pos:end="733:15"><name pos:start="733:13" pos:end="733:15">int</name></type> <name pos:start="733:17" pos:end="733:20">intV</name>  <init pos:start="733:23" pos:end="733:43">= <expr pos:start="733:25" pos:end="733:43"><call pos:start="733:25" pos:end="733:43"><name pos:start="733:25" pos:end="733:35">ROUNDED_DIV</name><argument_list pos:start="733:36" pos:end="733:43">(<argument pos:start="733:37" pos:end="733:37"><expr pos:start="733:37" pos:end="733:37"><name pos:start="733:37" pos:end="733:37">v</name></expr></argument>, <argument pos:start="733:40" pos:end="733:42"><expr pos:start="733:40" pos:end="733:42"><name pos:start="733:40" pos:end="733:42">sum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="735:13" pos:end="735:58"><expr pos:start="735:13" pos:end="735:57"><operator pos:start="735:13" pos:end="735:13">(</operator><operator pos:start="735:14" pos:end="735:14">*</operator><name pos:start="735:15" pos:end="735:23">outFilter</name><operator pos:start="735:24" pos:end="735:24">)</operator><index pos:start="735:25" pos:end="735:50">[<expr pos:start="735:26" pos:end="735:49"><name pos:start="735:26" pos:end="735:26">i</name> <operator pos:start="735:28" pos:end="735:28">*</operator> <operator pos:start="735:30" pos:end="735:30">(</operator><operator pos:start="735:31" pos:end="735:31">*</operator><name pos:start="735:32" pos:end="735:44">outFilterSize</name><operator pos:start="735:45" pos:end="735:45">)</operator> <operator pos:start="735:47" pos:end="735:47">+</operator> <name pos:start="735:49" pos:end="735:49">j</name></expr>]</index> <operator pos:start="735:52" pos:end="735:52">=</operator> <name pos:start="735:54" pos:end="735:57">intV</name></expr>;</expr_stmt>

            <expr_stmt pos:start="737:13" pos:end="737:68"><expr pos:start="737:13" pos:end="737:67"><name pos:start="737:13" pos:end="737:17">error</name>                                  <operator pos:start="737:52" pos:end="737:52">=</operator> <name pos:start="737:54" pos:end="737:54">v</name> <operator pos:start="737:56" pos:end="737:56">-</operator> <name pos:start="737:58" pos:end="737:61">intV</name> <operator pos:start="737:63" pos:end="737:63">*</operator> <name pos:start="737:65" pos:end="737:67">sum</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="745:5" pos:end="749:52"><expr pos:start="745:5" pos:end="749:51"><operator pos:start="745:5" pos:end="745:5">(</operator><operator pos:start="745:6" pos:end="745:6">*</operator><name pos:start="745:7" pos:end="745:15">filterPos</name><operator pos:start="745:16" pos:end="745:16">)</operator><index pos:start="745:17" pos:end="745:26">[<expr pos:start="745:18" pos:end="745:25"><name pos:start="745:18" pos:end="745:21">dstW</name> <operator pos:start="745:23" pos:end="745:23">+</operator> <literal type="number" pos:start="745:25" pos:end="745:25">0</literal></expr>]</index> <operator pos:start="745:28" pos:end="745:28">=</operator>

    <operator pos:start="747:5" pos:end="747:5">(</operator><operator pos:start="747:6" pos:end="747:6">*</operator><name pos:start="747:7" pos:end="747:15">filterPos</name><operator pos:start="747:16" pos:end="747:16">)</operator><index pos:start="747:17" pos:end="747:26">[<expr pos:start="747:18" pos:end="747:25"><name pos:start="747:18" pos:end="747:21">dstW</name> <operator pos:start="747:23" pos:end="747:23">+</operator> <literal type="number" pos:start="747:25" pos:end="747:25">1</literal></expr>]</index> <operator pos:start="747:28" pos:end="747:28">=</operator>

    <operator pos:start="749:5" pos:end="749:5">(</operator><operator pos:start="749:6" pos:end="749:6">*</operator><name pos:start="749:7" pos:end="749:15">filterPos</name><operator pos:start="749:16" pos:end="749:16">)</operator><index pos:start="749:17" pos:end="749:26">[<expr pos:start="749:18" pos:end="749:25"><name pos:start="749:18" pos:end="749:21">dstW</name> <operator pos:start="749:23" pos:end="749:23">+</operator> <literal type="number" pos:start="749:25" pos:end="749:25">2</literal></expr>]</index> <operator pos:start="749:28" pos:end="749:28">=</operator> <operator pos:start="749:30" pos:end="749:30">(</operator><operator pos:start="749:31" pos:end="749:31">*</operator><name pos:start="749:32" pos:end="749:40">filterPos</name><operator pos:start="749:41" pos:end="749:41">)</operator><index pos:start="749:42" pos:end="749:51">[<expr pos:start="749:43" pos:end="749:50"><name pos:start="749:43" pos:end="749:46">dstW</name> <operator pos:start="749:48" pos:end="749:48">-</operator> <literal type="number" pos:start="749:50" pos:end="749:50">1</literal></expr>]</index></expr>;</expr_stmt> <comment type="block" pos:start="749:54" pos:end="751:76">/* the MMX/SSE scaler will

                                                      * read over the end */</comment>

    <for pos:start="753:5" pos:end="763:5">for <control pos:start="753:9" pos:end="753:40">(<init pos:start="753:10" pos:end="753:15"><expr pos:start="753:10" pos:end="753:14"><name pos:start="753:10" pos:end="753:10">i</name> <operator pos:start="753:12" pos:end="753:12">=</operator> <literal type="number" pos:start="753:14" pos:end="753:14">0</literal></expr>;</init> <condition pos:start="753:17" pos:end="753:35"><expr pos:start="753:17" pos:end="753:34"><name pos:start="753:17" pos:end="753:17">i</name> <operator pos:start="753:19" pos:end="753:19">&lt;</operator> <operator pos:start="753:21" pos:end="753:21">*</operator><name pos:start="753:22" pos:end="753:34">outFilterSize</name></expr>;</condition> <incr pos:start="753:37" pos:end="753:39"><expr pos:start="753:37" pos:end="753:39"><name pos:start="753:37" pos:end="753:37">i</name><operator pos:start="753:38" pos:end="753:39">++</operator></expr></incr>)</control> <block pos:start="753:42" pos:end="763:5">{<block_content pos:start="755:9" pos:end="761:65">

        <decl_stmt pos:start="755:9" pos:end="755:50"><decl pos:start="755:9" pos:end="755:49"><type pos:start="755:9" pos:end="755:11"><name pos:start="755:9" pos:end="755:11">int</name></type> <name pos:start="755:13" pos:end="755:13">k</name> <init pos:start="755:15" pos:end="755:49">= <expr pos:start="755:17" pos:end="755:49"><operator pos:start="755:17" pos:end="755:17">(</operator><name pos:start="755:18" pos:end="755:21">dstW</name> <operator pos:start="755:23" pos:end="755:23">-</operator> <literal type="number" pos:start="755:25" pos:end="755:25">1</literal><operator pos:start="755:26" pos:end="755:26">)</operator> <operator pos:start="755:28" pos:end="755:28">*</operator> <operator pos:start="755:30" pos:end="755:30">(</operator><operator pos:start="755:31" pos:end="755:31">*</operator><name pos:start="755:32" pos:end="755:44">outFilterSize</name><operator pos:start="755:45" pos:end="755:45">)</operator> <operator pos:start="755:47" pos:end="755:47">+</operator> <name pos:start="755:49" pos:end="755:49">i</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="757:9" pos:end="761:65"><expr pos:start="757:9" pos:end="761:64"><operator pos:start="757:9" pos:end="757:9">(</operator><operator pos:start="757:10" pos:end="757:10">*</operator><name pos:start="757:11" pos:end="757:19">outFilter</name><operator pos:start="757:20" pos:end="757:20">)</operator><index pos:start="757:21" pos:end="757:46">[<expr pos:start="757:22" pos:end="757:45"><name pos:start="757:22" pos:end="757:22">k</name> <operator pos:start="757:24" pos:end="757:24">+</operator> <literal type="number" pos:start="757:26" pos:end="757:26">1</literal> <operator pos:start="757:28" pos:end="757:28">*</operator> <operator pos:start="757:30" pos:end="757:30">(</operator><operator pos:start="757:31" pos:end="757:31">*</operator><name pos:start="757:32" pos:end="757:44">outFilterSize</name><operator pos:start="757:45" pos:end="757:45">)</operator></expr>]</index> <operator pos:start="757:48" pos:end="757:48">=</operator>

        <operator pos:start="759:9" pos:end="759:9">(</operator><operator pos:start="759:10" pos:end="759:10">*</operator><name pos:start="759:11" pos:end="759:19">outFilter</name><operator pos:start="759:20" pos:end="759:20">)</operator><index pos:start="759:21" pos:end="759:46">[<expr pos:start="759:22" pos:end="759:45"><name pos:start="759:22" pos:end="759:22">k</name> <operator pos:start="759:24" pos:end="759:24">+</operator> <literal type="number" pos:start="759:26" pos:end="759:26">2</literal> <operator pos:start="759:28" pos:end="759:28">*</operator> <operator pos:start="759:30" pos:end="759:30">(</operator><operator pos:start="759:31" pos:end="759:31">*</operator><name pos:start="759:32" pos:end="759:44">outFilterSize</name><operator pos:start="759:45" pos:end="759:45">)</operator></expr>]</index> <operator pos:start="759:48" pos:end="759:48">=</operator>

        <operator pos:start="761:9" pos:end="761:9">(</operator><operator pos:start="761:10" pos:end="761:10">*</operator><name pos:start="761:11" pos:end="761:19">outFilter</name><operator pos:start="761:20" pos:end="761:20">)</operator><index pos:start="761:21" pos:end="761:46">[<expr pos:start="761:22" pos:end="761:45"><name pos:start="761:22" pos:end="761:22">k</name> <operator pos:start="761:24" pos:end="761:24">+</operator> <literal type="number" pos:start="761:26" pos:end="761:26">3</literal> <operator pos:start="761:28" pos:end="761:28">*</operator> <operator pos:start="761:30" pos:end="761:30">(</operator><operator pos:start="761:31" pos:end="761:31">*</operator><name pos:start="761:32" pos:end="761:44">outFilterSize</name><operator pos:start="761:45" pos:end="761:45">)</operator></expr>]</index> <operator pos:start="761:48" pos:end="761:48">=</operator> <operator pos:start="761:50" pos:end="761:50">(</operator><operator pos:start="761:51" pos:end="761:51">*</operator><name pos:start="761:52" pos:end="761:60">outFilter</name><operator pos:start="761:61" pos:end="761:61">)</operator><index pos:start="761:62" pos:end="761:64">[<expr pos:start="761:63" pos:end="761:63"><name pos:start="761:63" pos:end="761:63">k</name></expr>]</index></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="767:5" pos:end="767:12"><expr pos:start="767:5" pos:end="767:11"><name pos:start="767:5" pos:end="767:7">ret</name> <operator pos:start="767:9" pos:end="767:9">=</operator> <literal type="number" pos:start="767:11" pos:end="767:11">0</literal></expr>;</expr_stmt>



<label pos:start="771:1" pos:end="771:5"><name pos:start="771:1" pos:end="771:4">fail</name>:</label>

    <expr_stmt pos:start="773:5" pos:end="773:20"><expr pos:start="773:5" pos:end="773:19"><call pos:start="773:5" pos:end="773:19"><name pos:start="773:5" pos:end="773:11">av_free</name><argument_list pos:start="773:12" pos:end="773:19">(<argument pos:start="773:13" pos:end="773:18"><expr pos:start="773:13" pos:end="773:18"><name pos:start="773:13" pos:end="773:18">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="775:5" pos:end="775:21"><expr pos:start="775:5" pos:end="775:20"><call pos:start="775:5" pos:end="775:20"><name pos:start="775:5" pos:end="775:11">av_free</name><argument_list pos:start="775:12" pos:end="775:20">(<argument pos:start="775:13" pos:end="775:19"><expr pos:start="775:13" pos:end="775:19"><name pos:start="775:13" pos:end="775:19">filter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="777:5" pos:end="777:15">return <expr pos:start="777:12" pos:end="777:14"><name pos:start="777:12" pos:end="777:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
