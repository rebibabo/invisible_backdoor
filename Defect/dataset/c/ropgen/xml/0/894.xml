<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/894.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">h264_extradata_to_annexb</name><parameter_list pos:start="1:36" pos:end="1:77">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:57"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:76"><decl pos:start="1:60" pos:end="1:76"><type pos:start="1:60" pos:end="1:76"><specifier pos:start="1:60" pos:end="1:64">const</specifier> <name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:76">padding</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:23">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint16_t</name></type> <name pos:start="5:14" pos:end="5:22">unit_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:23">total_size</name>                 <init pos:start="7:41" pos:end="7:43">= <expr pos:start="7:43" pos:end="7:43"><literal type="number" pos:start="7:43" pos:end="7:43">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="11:58"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">out</name>                        <init pos:start="9:41" pos:end="9:46">= <expr pos:start="9:43" pos:end="9:46"><name pos:start="9:43" pos:end="9:46">NULL</name></expr></init></decl>, <decl pos:start="9:49" pos:end="9:55"><type ref="prev" pos:start="9:5" pos:end="9:13"/><name pos:start="9:49" pos:end="9:55">unit_nb</name></decl>, <decl pos:start="9:58" pos:end="9:69"><type ref="prev" pos:start="9:5" pos:end="9:13"/><name pos:start="9:58" pos:end="9:65">sps_done</name> <init pos:start="9:67" pos:end="9:69">= <expr pos:start="9:69" pos:end="9:69"><literal type="number" pos:start="9:69" pos:end="9:69">0</literal></expr></init></decl>,

             <decl pos:start="11:14" pos:end="11:43"><type ref="prev" pos:start="9:5" pos:end="9:13"/><name pos:start="11:14" pos:end="11:21">sps_seen</name>                   <init pos:start="11:41" pos:end="11:43">= <expr pos:start="11:43" pos:end="11:43"><literal type="number" pos:start="11:43" pos:end="11:43">0</literal></expr></init></decl>, <decl pos:start="11:46" pos:end="11:57"><type ref="prev" pos:start="9:5" pos:end="9:13"/><name pos:start="11:46" pos:end="11:53">pps_seen</name> <init pos:start="11:55" pos:end="11:57">= <expr pos:start="11:57" pos:end="11:57"><literal type="number" pos:start="11:57" pos:end="11:57">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:63"><decl pos:start="13:5" pos:end="13:62"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:28">extradata</name>            <init pos:start="13:41" pos:end="13:62">= <expr pos:start="13:43" pos:end="13:62"><name pos:start="13:43" pos:end="13:58"><name pos:start="13:43" pos:end="13:47">avctx</name><operator pos:start="13:48" pos:end="13:49">-&gt;</operator><name pos:start="13:50" pos:end="13:58">extradata</name></name> <operator pos:start="13:60" pos:end="13:60">+</operator> <literal type="number" pos:start="13:62" pos:end="13:62">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:57"><decl pos:start="15:5" pos:end="15:56"><type pos:start="15:5" pos:end="15:24"><specifier pos:start="15:5" pos:end="15:10">static</specifier> <specifier pos:start="15:12" pos:end="15:16">const</specifier> <name pos:start="15:18" pos:end="15:24">uint8_t</name></type> <name pos:start="15:26" pos:end="15:39"><name pos:start="15:26" pos:end="15:36">nalu_header</name><index pos:start="15:37" pos:end="15:39">[<expr pos:start="15:38" pos:end="15:38"><literal type="number" pos:start="15:38" pos:end="15:38">4</literal></expr>]</index></name> <init pos:start="15:41" pos:end="15:56">= <expr pos:start="15:43" pos:end="15:56"><block pos:start="15:43" pos:end="15:56">{ <expr pos:start="15:45" pos:end="15:45"><literal type="number" pos:start="15:45" pos:end="15:45">0</literal></expr>, <expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">0</literal></expr>, <expr pos:start="15:51" pos:end="15:51"><literal type="number" pos:start="15:51" pos:end="15:51">0</literal></expr>, <expr pos:start="15:54" pos:end="15:54"><literal type="number" pos:start="15:54" pos:end="15:54">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">length_size</name> <init pos:start="17:21" pos:end="17:46">= <expr pos:start="17:23" pos:end="17:46"><operator pos:start="17:23" pos:end="17:23">(</operator><operator pos:start="17:24" pos:end="17:24">*</operator><name pos:start="17:25" pos:end="17:33">extradata</name><operator pos:start="17:34" pos:end="17:35">++</operator> <operator pos:start="17:37" pos:end="17:37">&amp;</operator> <literal type="number" pos:start="17:39" pos:end="17:41">0x3</literal><operator pos:start="17:42" pos:end="17:42">)</operator> <operator pos:start="17:44" pos:end="17:44">+</operator> <literal type="number" pos:start="17:46" pos:end="17:46">1</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="17:49" pos:end="17:77">// retrieve length coded size</comment>



    <comment type="block" pos:start="21:5" pos:end="21:38">/* retrieve sps and pps unit(s) */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:11">unit_nb</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <operator pos:start="23:15" pos:end="23:15">*</operator><name pos:start="23:16" pos:end="23:24">extradata</name><operator pos:start="23:25" pos:end="23:26">++</operator> <operator pos:start="23:28" pos:end="23:28">&amp;</operator> <literal type="number" pos:start="23:30" pos:end="23:33">0x1f</literal></expr>;</expr_stmt> <comment type="block" pos:start="23:36" pos:end="23:62">/* number of sps unit(s) */</comment>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:16">unit_nb</name></expr>)</condition> <block pos:start="25:19" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:17">

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">pps</name>;</goto>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="33:5">else <block pos:start="29:12" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:21">

        <expr_stmt pos:start="31:9" pos:end="31:21"><expr pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:16">sps_seen</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <literal type="number" pos:start="31:20" pos:end="31:20">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <while pos:start="37:5" pos:end="89:5">while <condition pos:start="37:11" pos:end="37:21">(<expr pos:start="37:12" pos:end="37:20"><name pos:start="37:12" pos:end="37:18">unit_nb</name><operator pos:start="37:19" pos:end="37:20">--</operator></expr>)</condition> <block pos:start="37:23" pos:end="89:5">{<block_content pos:start="39:9" pos:end="87:9">

        <decl_stmt pos:start="39:9" pos:end="39:18"><decl pos:start="39:9" pos:end="39:17"><type pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:12">void</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:17">tmp</name></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:41"><expr pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:17">unit_size</name>   <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:40"><name pos:start="43:23" pos:end="43:29">AV_RB16</name><argument_list pos:start="43:30" pos:end="43:40">(<argument pos:start="43:31" pos:end="43:39"><expr pos:start="43:31" pos:end="43:39"><name pos:start="43:31" pos:end="43:39">extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:36"><expr pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:18">total_size</name> <operator pos:start="45:20" pos:end="45:21">+=</operator> <name pos:start="45:23" pos:end="45:31">unit_size</name> <operator pos:start="45:33" pos:end="45:33">+</operator> <literal type="number" pos:start="45:35" pos:end="45:35">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="57:9"><if pos:start="47:9" pos:end="57:9">if <condition pos:start="47:12" pos:end="51:34">(<expr pos:start="47:13" pos:end="51:33"><name pos:start="47:13" pos:end="47:22">total_size</name> <operator pos:start="47:24" pos:end="47:24">&gt;</operator> <name pos:start="47:26" pos:end="47:32">INT_MAX</name> <operator pos:start="47:34" pos:end="47:34">-</operator> <name pos:start="47:36" pos:end="47:42">padding</name> <operator pos:start="47:44" pos:end="47:45">||</operator>

            <name pos:start="49:13" pos:end="49:21">extradata</name> <operator pos:start="49:23" pos:end="49:23">+</operator> <literal type="number" pos:start="49:25" pos:end="49:27">2</literal> <operator pos:start="49:27" pos:end="49:27">+</operator> <name pos:start="49:29" pos:end="49:37">unit_size</name> <operator pos:start="49:39" pos:end="49:39">&gt;</operator> <name pos:start="49:41" pos:end="49:56"><name pos:start="49:41" pos:end="49:45">avctx</name><operator pos:start="49:46" pos:end="49:47">-&gt;</operator><name pos:start="49:48" pos:end="49:56">extradata</name></name> <operator pos:start="49:58" pos:end="49:58">+</operator>

            <name pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:17">avctx</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:33">extradata_size</name></name></expr>)</condition> <block pos:start="51:36" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:35">

            <expr_stmt pos:start="53:13" pos:end="53:25"><expr pos:start="53:13" pos:end="53:24"><call pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:19">av_free</name><argument_list pos:start="53:20" pos:end="53:24">(<argument pos:start="53:21" pos:end="53:23"><expr pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:23">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:35">return <expr pos:start="55:20" pos:end="55:34"><call pos:start="55:20" pos:end="55:34"><name pos:start="55:20" pos:end="55:26">AVERROR</name><argument_list pos:start="55:27" pos:end="55:34">(<argument pos:start="55:28" pos:end="55:33"><expr pos:start="55:28" pos:end="55:33"><name pos:start="55:28" pos:end="55:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:52"><expr pos:start="59:9" pos:end="59:51"><name pos:start="59:9" pos:end="59:11">tmp</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:51"><name pos:start="59:15" pos:end="59:24">av_realloc</name><argument_list pos:start="59:25" pos:end="59:51">(<argument pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><name pos:start="59:26" pos:end="59:28">out</name></expr></argument>, <argument pos:start="59:31" pos:end="59:50"><expr pos:start="59:31" pos:end="59:50"><name pos:start="59:31" pos:end="59:40">total_size</name> <operator pos:start="59:42" pos:end="59:42">+</operator> <name pos:start="59:44" pos:end="59:50">padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:17">(<expr pos:start="61:13" pos:end="61:16"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:16">tmp</name></expr>)</condition> <block pos:start="61:19" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:35">

            <expr_stmt pos:start="63:13" pos:end="63:25"><expr pos:start="63:13" pos:end="63:24"><call pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:19">av_free</name><argument_list pos:start="63:20" pos:end="63:24">(<argument pos:start="63:21" pos:end="63:23"><expr pos:start="63:21" pos:end="63:23"><name pos:start="63:21" pos:end="63:23">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:35">return <expr pos:start="65:20" pos:end="65:34"><call pos:start="65:20" pos:end="65:34"><name pos:start="65:20" pos:end="65:26">AVERROR</name><argument_list pos:start="65:27" pos:end="65:34">(<argument pos:start="65:28" pos:end="65:33"><expr pos:start="65:28" pos:end="65:33"><name pos:start="65:28" pos:end="65:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:18"><expr pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:11">out</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:17">tmp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:65"><expr pos:start="71:9" pos:end="71:64"><call pos:start="71:9" pos:end="71:64"><name pos:start="71:9" pos:end="71:14">memcpy</name><argument_list pos:start="71:15" pos:end="71:64">(<argument pos:start="71:16" pos:end="71:47"><expr pos:start="71:16" pos:end="71:47"><name pos:start="71:16" pos:end="71:18">out</name> <operator pos:start="71:20" pos:end="71:20">+</operator> <name pos:start="71:22" pos:end="71:31">total_size</name> <operator pos:start="71:33" pos:end="71:33">-</operator> <name pos:start="71:35" pos:end="71:43">unit_size</name> <operator pos:start="71:45" pos:end="71:45">-</operator> <literal type="number" pos:start="71:47" pos:end="71:47">4</literal></expr></argument>, <argument pos:start="71:50" pos:end="71:60"><expr pos:start="71:50" pos:end="71:60"><name pos:start="71:50" pos:end="71:60">nalu_header</name></expr></argument>, <argument pos:start="71:63" pos:end="71:63"><expr pos:start="71:63" pos:end="71:63"><literal type="number" pos:start="71:63" pos:end="71:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:71"><expr pos:start="73:9" pos:end="73:70"><call pos:start="73:9" pos:end="73:70"><name pos:start="73:9" pos:end="73:14">memcpy</name><argument_list pos:start="73:15" pos:end="73:70">(<argument pos:start="73:16" pos:end="73:43"><expr pos:start="73:16" pos:end="73:43"><name pos:start="73:16" pos:end="73:18">out</name> <operator pos:start="73:20" pos:end="73:20">+</operator> <name pos:start="73:22" pos:end="73:31">total_size</name> <operator pos:start="73:33" pos:end="73:33">-</operator> <name pos:start="73:35" pos:end="73:43">unit_size</name></expr></argument>, <argument pos:start="73:46" pos:end="73:58"><expr pos:start="73:46" pos:end="73:58"><name pos:start="73:46" pos:end="73:54">extradata</name> <operator pos:start="73:56" pos:end="73:56">+</operator> <literal type="number" pos:start="73:58" pos:end="73:58">2</literal></expr></argument>, <argument pos:start="73:61" pos:end="73:69"><expr pos:start="73:61" pos:end="73:69"><name pos:start="73:61" pos:end="73:69">unit_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:17">extradata</name> <operator pos:start="75:19" pos:end="75:20">+=</operator> <literal type="number" pos:start="75:22" pos:end="75:24">2</literal> <operator pos:start="75:24" pos:end="75:24">+</operator> <name pos:start="75:26" pos:end="75:34">unit_size</name></expr>;</expr_stmt>

<label pos:start="77:1" pos:end="77:4"><name pos:start="77:1" pos:end="77:3">pps</name>:</label>

        <if_stmt pos:start="79:9" pos:end="87:9"><if pos:start="79:9" pos:end="87:9">if <condition pos:start="79:12" pos:end="79:36">(<expr pos:start="79:13" pos:end="79:35"><operator pos:start="79:13" pos:end="79:13">!</operator><name pos:start="79:14" pos:end="79:20">unit_nb</name> <operator pos:start="79:22" pos:end="79:23">&amp;&amp;</operator> <operator pos:start="79:25" pos:end="79:25">!</operator><name pos:start="79:26" pos:end="79:33">sps_done</name><operator pos:start="79:34" pos:end="79:35">++</operator></expr>)</condition> <block pos:start="79:38" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:29">

            <expr_stmt pos:start="81:13" pos:end="81:35"><expr pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:19">unit_nb</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <operator pos:start="81:23" pos:end="81:23">*</operator><name pos:start="81:24" pos:end="81:32">extradata</name><operator pos:start="81:33" pos:end="81:34">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="81:37" pos:end="81:63">/* number of pps unit(s) */</comment>

            <if_stmt pos:start="83:13" pos:end="85:29"><if pos:start="83:13" pos:end="85:29">if <condition pos:start="83:16" pos:end="83:24">(<expr pos:start="83:17" pos:end="83:23"><name pos:start="83:17" pos:end="83:23">unit_nb</name></expr>)</condition><block type="pseudo" pos:start="85:17" pos:end="85:29"><block_content pos:start="85:17" pos:end="85:29">

                <expr_stmt pos:start="85:17" pos:end="85:29"><expr pos:start="85:17" pos:end="85:28"><name pos:start="85:17" pos:end="85:24">pps_seen</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <literal type="number" pos:start="85:28" pos:end="85:28">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="93:5" pos:end="95:66"><if pos:start="93:5" pos:end="95:66">if <condition pos:start="93:8" pos:end="93:12">(<expr pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">out</name></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:66"><block_content pos:start="95:9" pos:end="95:66">

        <expr_stmt pos:start="95:9" pos:end="95:66"><expr pos:start="95:9" pos:end="95:65"><call pos:start="95:9" pos:end="95:65"><name pos:start="95:9" pos:end="95:14">memset</name><argument_list pos:start="95:15" pos:end="95:65">(<argument pos:start="95:16" pos:end="95:31"><expr pos:start="95:16" pos:end="95:31"><name pos:start="95:16" pos:end="95:18">out</name> <operator pos:start="95:20" pos:end="95:20">+</operator> <name pos:start="95:22" pos:end="95:31">total_size</name></expr></argument>, <argument pos:start="95:34" pos:end="95:34"><expr pos:start="95:34" pos:end="95:34"><literal type="number" pos:start="95:34" pos:end="95:34">0</literal></expr></argument>, <argument pos:start="95:37" pos:end="95:64"><expr pos:start="95:37" pos:end="95:64"><name pos:start="95:37" pos:end="95:64">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="105:55"><if pos:start="99:5" pos:end="105:55">if <condition pos:start="99:8" pos:end="99:18">(<expr pos:start="99:9" pos:end="99:17"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:17">sps_seen</name></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="105:55"><block_content pos:start="101:9" pos:end="105:55">

        <expr_stmt pos:start="101:9" pos:end="105:55"><expr pos:start="101:9" pos:end="105:54"><call pos:start="101:9" pos:end="105:54"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="105:54">(<argument pos:start="101:16" pos:end="101:20"><expr pos:start="101:16" pos:end="101:20"><name pos:start="101:16" pos:end="101:20">avctx</name></expr></argument>, <argument pos:start="101:23" pos:end="101:36"><expr pos:start="101:23" pos:end="101:36"><name pos:start="101:23" pos:end="101:36">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="103:16" pos:end="105:53"><expr pos:start="103:16" pos:end="105:53"><literal type="string" pos:start="103:16" pos:end="103:55">"Warning: SPS NALU missing or invalid. "</literal>

               <literal type="string" pos:start="105:16" pos:end="105:53">"The resulting stream may not play.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="115:55"><if pos:start="109:5" pos:end="115:55">if <condition pos:start="109:8" pos:end="109:18">(<expr pos:start="109:9" pos:end="109:17"><operator pos:start="109:9" pos:end="109:9">!</operator><name pos:start="109:10" pos:end="109:17">pps_seen</name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="115:55"><block_content pos:start="111:9" pos:end="115:55">

        <expr_stmt pos:start="111:9" pos:end="115:55"><expr pos:start="111:9" pos:end="115:54"><call pos:start="111:9" pos:end="115:54"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="115:54">(<argument pos:start="111:16" pos:end="111:20"><expr pos:start="111:16" pos:end="111:20"><name pos:start="111:16" pos:end="111:20">avctx</name></expr></argument>, <argument pos:start="111:23" pos:end="111:36"><expr pos:start="111:23" pos:end="111:36"><name pos:start="111:23" pos:end="111:36">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="113:16" pos:end="115:53"><expr pos:start="113:16" pos:end="115:53"><literal type="string" pos:start="113:16" pos:end="113:55">"Warning: PPS NALU missing or invalid. "</literal>

               <literal type="string" pos:start="115:16" pos:end="115:53">"The resulting stream may not play.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:30"><expr pos:start="119:5" pos:end="119:29"><call pos:start="119:5" pos:end="119:29"><name pos:start="119:5" pos:end="119:11">av_free</name><argument_list pos:start="119:12" pos:end="119:29">(<argument pos:start="119:13" pos:end="119:28"><expr pos:start="119:13" pos:end="119:28"><name pos:start="119:13" pos:end="119:28"><name pos:start="119:13" pos:end="119:17">avctx</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:28">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:32"><expr pos:start="121:5" pos:end="121:31"><name pos:start="121:5" pos:end="121:20"><name pos:start="121:5" pos:end="121:9">avctx</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:20">extradata</name></name>      <operator pos:start="121:27" pos:end="121:27">=</operator> <name pos:start="121:29" pos:end="121:31">out</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:39"><expr pos:start="123:5" pos:end="123:38"><name pos:start="123:5" pos:end="123:25"><name pos:start="123:5" pos:end="123:9">avctx</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:25">extradata_size</name></name> <operator pos:start="123:27" pos:end="123:27">=</operator> <name pos:start="123:29" pos:end="123:38">total_size</name></expr>;</expr_stmt>



    <return pos:start="127:5" pos:end="127:23">return <expr pos:start="127:12" pos:end="127:22"><name pos:start="127:12" pos:end="127:22">length_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
