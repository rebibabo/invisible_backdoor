<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14124.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">read_SCP_info</name><parameter_list pos:start="1:26" pos:end="1:55">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:36">SCLPDevice</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">sclp</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:54"><decl pos:start="1:45" pos:end="1:54"><type pos:start="1:45" pos:end="1:54"><name pos:start="1:45" pos:end="1:48">SCCB</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">sccb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="181:1">{<block_content pos:start="5:5" pos:end="179:72">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">ReadInfo</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:23">read_info</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><operator pos:start="5:27" pos:end="5:27">(</operator><name pos:start="5:28" pos:end="5:35">ReadInfo</name> <operator pos:start="5:37" pos:end="5:37">*</operator><operator pos:start="5:38" pos:end="5:38">)</operator> <name pos:start="5:40" pos:end="5:43">sccb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MachineState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">machine</name> <init pos:start="7:27" pos:end="7:55">= <expr pos:start="7:29" pos:end="7:55"><call pos:start="7:29" pos:end="7:55"><name pos:start="7:29" pos:end="7:35">MACHINE</name><argument_list pos:start="7:36" pos:end="7:55">(<argument pos:start="7:37" pos:end="7:54"><expr pos:start="7:37" pos:end="7:54"><call pos:start="7:37" pos:end="7:54"><name pos:start="7:37" pos:end="7:52">qdev_get_machine</name><argument_list pos:start="7:53" pos:end="7:54">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:62"><decl pos:start="9:5" pos:end="9:61"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24">sclpMemoryHotplugDev</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:29">mhd</name> <init pos:start="9:31" pos:end="9:61">= <expr pos:start="9:33" pos:end="9:61"><call pos:start="9:33" pos:end="9:61"><name pos:start="9:33" pos:end="9:59">get_sclp_memory_hotplug_dev</name><argument_list pos:start="9:60" pos:end="9:61">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">cpu_count</name> <init pos:start="13:19" pos:end="13:21">= <expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">rnsize</name></decl>, <decl pos:start="15:17" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:21">rnmax</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:75"><decl pos:start="17:5" pos:end="17:74"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">slots</name> <init pos:start="17:15" pos:end="17:74">= <expr pos:start="17:17" pos:end="17:74"><call pos:start="17:17" pos:end="17:74"><name pos:start="17:17" pos:end="17:19">MIN</name><argument_list pos:start="17:20" pos:end="17:74">(<argument pos:start="17:21" pos:end="17:38"><expr pos:start="17:21" pos:end="17:38"><name pos:start="17:21" pos:end="17:38"><name pos:start="17:21" pos:end="17:27">machine</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:38">ram_slots</name></name></expr></argument>, <argument pos:start="17:41" pos:end="17:73"><expr pos:start="17:41" pos:end="17:73"><call pos:start="17:41" pos:end="17:73"><name pos:start="17:41" pos:end="17:62">s390_get_memslot_count</name><argument_list pos:start="17:63" pos:end="17:73">(<argument pos:start="17:64" pos:end="17:72"><expr pos:start="17:64" pos:end="17:72"><name pos:start="17:64" pos:end="17:72">kvm_state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:50"><decl pos:start="19:5" pos:end="19:49"><type pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:21">IplParameterBlock</name> <modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:27">ipib</name> <init pos:start="19:29" pos:end="19:49">= <expr pos:start="19:31" pos:end="19:49"><call pos:start="19:31" pos:end="19:49"><name pos:start="19:31" pos:end="19:47">s390_ipl_get_iplb</name><argument_list pos:start="19:48" pos:end="19:49">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <macro pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:15">CPU_FOREACH</name><argument_list pos:start="23:16" pos:end="23:20">(<argument pos:start="23:17" pos:end="23:19">cpu</argument>)</argument_list></macro> <block pos:start="23:22" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:20">

        <expr_stmt pos:start="25:9" pos:end="25:20"><expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:17">cpu_count</name><operator pos:start="25:18" pos:end="25:19">++</operator></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="31:5" pos:end="31:25">/* CPU information */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:52"><expr pos:start="33:5" pos:end="33:51"><name pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:13">read_info</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:26">entries_cpu</name></name> <operator pos:start="33:28" pos:end="33:28">=</operator> <call pos:start="33:30" pos:end="33:51"><name pos:start="33:30" pos:end="33:40">cpu_to_be16</name><argument_list pos:start="33:41" pos:end="33:51">(<argument pos:start="33:42" pos:end="33:50"><expr pos:start="33:42" pos:end="33:50"><name pos:start="33:42" pos:end="33:50">cpu_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:69"><expr pos:start="35:5" pos:end="35:68"><name pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:13">read_info</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:25">offset_cpu</name></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <call pos:start="35:29" pos:end="35:68"><name pos:start="35:29" pos:end="35:39">cpu_to_be16</name><argument_list pos:start="35:40" pos:end="35:68">(<argument pos:start="35:41" pos:end="35:67"><expr pos:start="35:41" pos:end="35:67"><call pos:start="35:41" pos:end="35:67"><name pos:start="35:41" pos:end="35:48">offsetof</name><argument_list pos:start="35:49" pos:end="35:67">(<argument pos:start="35:50" pos:end="35:57"><expr pos:start="35:50" pos:end="35:57"><name pos:start="35:50" pos:end="35:57">ReadInfo</name></expr></argument>, <argument pos:start="35:60" pos:end="35:66"><expr pos:start="35:60" pos:end="35:66"><name pos:start="35:60" pos:end="35:66">entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:51"><expr pos:start="37:5" pos:end="37:50"><name pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:13">read_info</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:26">highest_cpu</name></name> <operator pos:start="37:28" pos:end="37:28">=</operator> <call pos:start="37:30" pos:end="37:50"><name pos:start="37:30" pos:end="37:40">cpu_to_be16</name><argument_list pos:start="37:41" pos:end="37:50">(<argument pos:start="37:42" pos:end="37:49"><expr pos:start="37:42" pos:end="37:49"><name pos:start="37:42" pos:end="37:49">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:57"><expr pos:start="41:5" pos:end="41:56"><name pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:13">read_info</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:22">ibc_val</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <call pos:start="41:26" pos:end="41:56"><name pos:start="41:26" pos:end="41:36">cpu_to_be32</name><argument_list pos:start="41:37" pos:end="41:56">(<argument pos:start="41:38" pos:end="41:55"><expr pos:start="41:38" pos:end="41:55"><call pos:start="41:38" pos:end="41:55"><name pos:start="41:38" pos:end="41:53">s390_get_ibc_val</name><argument_list pos:start="41:54" pos:end="41:55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:50">/* Configuration Characteristic (Extension) */</comment>

    <expr_stmt pos:start="47:5" pos:end="49:47"><expr pos:start="47:5" pos:end="49:46"><call pos:start="47:5" pos:end="49:46"><name pos:start="47:5" pos:end="47:23">s390_get_feat_block</name><argument_list pos:start="47:24" pos:end="49:46">(<argument pos:start="47:25" pos:end="47:53"><expr pos:start="47:25" pos:end="47:53"><name pos:start="47:25" pos:end="47:53">S390_FEAT_TYPE_SCLP_CONF_CHAR</name></expr></argument>,

                         <argument pos:start="49:26" pos:end="49:45"><expr pos:start="49:26" pos:end="49:45"><name pos:start="49:26" pos:end="49:45"><name pos:start="49:26" pos:end="49:34">read_info</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:45">conf_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="53:51"><expr pos:start="51:5" pos:end="53:50"><call pos:start="51:5" pos:end="53:50"><name pos:start="51:5" pos:end="51:23">s390_get_feat_block</name><argument_list pos:start="51:24" pos:end="53:50">(<argument pos:start="51:25" pos:end="51:57"><expr pos:start="51:25" pos:end="51:57"><name pos:start="51:25" pos:end="51:57">S390_FEAT_TYPE_SCLP_CONF_CHAR_EXT</name></expr></argument>,

                         <argument pos:start="53:26" pos:end="53:49"><expr pos:start="53:26" pos:end="53:49"><name pos:start="53:26" pos:end="53:49"><name pos:start="53:26" pos:end="53:34">read_info</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:49">conf_char_ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:61"><expr pos:start="57:5" pos:end="57:60"><call pos:start="57:5" pos:end="57:60"><name pos:start="57:5" pos:end="57:23">prepare_cpu_entries</name><argument_list pos:start="57:24" pos:end="57:60">(<argument pos:start="57:25" pos:end="57:28"><expr pos:start="57:25" pos:end="57:28"><name pos:start="57:25" pos:end="57:28">sclp</name></expr></argument>, <argument pos:start="57:31" pos:end="57:48"><expr pos:start="57:31" pos:end="57:48"><name pos:start="57:31" pos:end="57:48"><name pos:start="57:31" pos:end="57:39">read_info</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:48">entries</name></name></expr></argument>, <argument pos:start="57:51" pos:end="57:59"><expr pos:start="57:51" pos:end="57:59"><name pos:start="57:51" pos:end="57:59">cpu_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="63:63"><expr pos:start="61:5" pos:end="63:62"><name pos:start="61:5" pos:end="61:25"><name pos:start="61:5" pos:end="61:13">read_info</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:25">facilities</name></name> <operator pos:start="61:27" pos:end="61:27">=</operator> <call pos:start="61:29" pos:end="63:62"><name pos:start="61:29" pos:end="61:39">cpu_to_be64</name><argument_list pos:start="61:40" pos:end="63:62">(<argument pos:start="61:41" pos:end="63:61"><expr pos:start="61:41" pos:end="63:61"><name pos:start="61:41" pos:end="61:57">SCLP_HAS_CPU_INFO</name> <operator pos:start="61:59" pos:end="61:59">|</operator>

                                        <name pos:start="63:41" pos:end="63:61">SCLP_HAS_PCI_RECONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:67">/* Memory Hotplug is only supported for the ccw machine type */</comment>

    <if_stmt pos:start="69:5" pos:end="125:5"><if pos:start="69:5" pos:end="125:5">if <condition pos:start="69:8" pos:end="69:12">(<expr pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">mhd</name></expr>)</condition> <block pos:start="69:14" pos:end="125:5">{<block_content pos:start="71:9" pos:end="123:78">

        <expr_stmt pos:start="71:9" pos:end="71:55"><expr pos:start="71:9" pos:end="71:54"><name pos:start="71:9" pos:end="71:35"><name pos:start="71:9" pos:end="71:11">mhd</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:35">standby_subregion_size</name></name> <operator pos:start="71:37" pos:end="71:37">=</operator> <name pos:start="71:39" pos:end="71:54">MEM_SECTION_SIZE</name></expr>;</expr_stmt>

        <comment type="block" pos:start="73:9" pos:end="73:58">/* Deduct the memory slot already used for core */</comment>

        <if_stmt pos:start="75:9" pos:end="85:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="75:22">(<expr pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:17">slots</name> <operator pos:start="75:19" pos:end="75:19">&gt;</operator> <literal type="number" pos:start="75:21" pos:end="75:21">0</literal></expr>)</condition> <block pos:start="75:24" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:13">

            <while pos:start="77:13" pos:end="83:13">while <condition pos:start="77:19" pos:end="79:45">(<expr pos:start="77:20" pos:end="79:44"><operator pos:start="77:20" pos:end="77:20">(</operator><name pos:start="77:21" pos:end="77:47"><name pos:start="77:21" pos:end="77:23">mhd</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:47">standby_subregion_size</name></name> <operator pos:start="77:49" pos:end="77:49">*</operator> <operator pos:start="77:51" pos:end="77:51">(</operator><name pos:start="77:52" pos:end="77:56">slots</name> <operator pos:start="77:58" pos:end="77:58">-</operator> <literal type="number" pos:start="77:60" pos:end="77:60">1</literal><operator pos:start="77:61" pos:end="77:61">)</operator>

                    <operator pos:start="79:21" pos:end="79:21">&lt;</operator> <name pos:start="79:23" pos:end="79:43"><name pos:start="79:23" pos:end="79:25">mhd</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:43">standby_mem_size</name></name><operator pos:start="79:44" pos:end="79:44">)</operator></expr>)</condition> <block pos:start="79:47" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:79">

                <expr_stmt pos:start="81:17" pos:end="81:79"><expr pos:start="81:17" pos:end="81:78"><name pos:start="81:17" pos:end="81:43"><name pos:start="81:17" pos:end="81:19">mhd</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:43">standby_subregion_size</name></name> <operator pos:start="81:45" pos:end="81:45">=</operator> <name pos:start="81:47" pos:end="81:73"><name pos:start="81:47" pos:end="81:49">mhd</name><operator pos:start="81:50" pos:end="81:51">-&gt;</operator><name pos:start="81:52" pos:end="81:73">standby_subregion_size</name></name> <operator pos:start="81:75" pos:end="81:76">&lt;&lt;</operator> <literal type="number" pos:start="81:78" pos:end="81:78">1</literal></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="87:9" pos:end="93:11">/*

         * Initialize mapping of guest standby memory sections indicating which

         * are and are not online. Assume all standby memory begins offline.

         */</comment>

        <if_stmt pos:start="95:9" pos:end="115:9"><if pos:start="95:9" pos:end="115:9">if <condition pos:start="95:12" pos:end="95:40">(<expr pos:start="95:13" pos:end="95:39"><name pos:start="95:13" pos:end="95:34"><name pos:start="95:13" pos:end="95:15">mhd</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:34">standby_state_map</name></name> <operator pos:start="95:36" pos:end="95:37">==</operator> <literal type="number" pos:start="95:39" pos:end="95:39">0</literal></expr>)</condition> <block pos:start="95:42" pos:end="115:9">{<block_content pos:start="97:13" pos:end="113:13">

            <if_stmt pos:start="97:13" pos:end="113:13"><if pos:start="97:13" pos:end="107:13">if <condition pos:start="97:16" pos:end="97:68">(<expr pos:start="97:17" pos:end="97:67"><name pos:start="97:17" pos:end="97:37"><name pos:start="97:17" pos:end="97:19">mhd</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:37">standby_mem_size</name></name> <operator pos:start="97:39" pos:end="97:39">%</operator> <name pos:start="97:41" pos:end="97:67"><name pos:start="97:41" pos:end="97:43">mhd</name><operator pos:start="97:44" pos:end="97:45">-&gt;</operator><name pos:start="97:46" pos:end="97:67">standby_subregion_size</name></name></expr>)</condition> <block pos:start="97:70" pos:end="107:13">{<block_content pos:start="99:17" pos:end="105:64">

                <expr_stmt pos:start="99:17" pos:end="105:64"><expr pos:start="99:17" pos:end="105:63"><name pos:start="99:17" pos:end="99:38"><name pos:start="99:17" pos:end="99:19">mhd</name><operator pos:start="99:20" pos:end="99:21">-&gt;</operator><name pos:start="99:22" pos:end="99:38">standby_state_map</name></name> <operator pos:start="99:40" pos:end="99:40">=</operator> <call pos:start="99:42" pos:end="105:63"><name pos:start="99:42" pos:end="99:50">g_malloc0</name><argument_list pos:start="99:51" pos:end="105:63">(<argument pos:start="99:52" pos:end="105:62"><expr pos:start="99:52" pos:end="105:62"><operator pos:start="99:52" pos:end="99:52">(</operator><name pos:start="99:53" pos:end="99:73"><name pos:start="99:53" pos:end="99:55">mhd</name><operator pos:start="99:56" pos:end="99:57">-&gt;</operator><name pos:start="99:58" pos:end="99:73">standby_mem_size</name></name> <operator pos:start="99:75" pos:end="99:75">/</operator>

                                             <name pos:start="101:46" pos:end="101:72"><name pos:start="101:46" pos:end="101:48">mhd</name><operator pos:start="101:49" pos:end="101:50">-&gt;</operator><name pos:start="101:51" pos:end="101:72">standby_subregion_size</name></name> <operator pos:start="101:74" pos:end="101:74">+</operator> <literal type="number" pos:start="101:76" pos:end="101:76">1</literal><operator pos:start="101:77" pos:end="101:77">)</operator> <operator pos:start="101:79" pos:end="101:79">*</operator>

                                             <operator pos:start="103:46" pos:end="103:46">(</operator><name pos:start="103:47" pos:end="103:73"><name pos:start="103:47" pos:end="103:49">mhd</name><operator pos:start="103:50" pos:end="103:51">-&gt;</operator><name pos:start="103:52" pos:end="103:73">standby_subregion_size</name></name> <operator pos:start="103:75" pos:end="103:75">/</operator>

                                             <name pos:start="105:46" pos:end="105:61">MEM_SECTION_SIZE</name><operator pos:start="105:62" pos:end="105:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="107:15" pos:end="113:13">else <block pos:start="107:20" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:69">

                <expr_stmt pos:start="109:17" pos:end="111:69"><expr pos:start="109:17" pos:end="111:68"><name pos:start="109:17" pos:end="109:38"><name pos:start="109:17" pos:end="109:19">mhd</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:38">standby_state_map</name></name> <operator pos:start="109:40" pos:end="109:40">=</operator> <call pos:start="109:42" pos:end="111:68"><name pos:start="109:42" pos:end="109:50">g_malloc0</name><argument_list pos:start="109:51" pos:end="111:68">(<argument pos:start="109:52" pos:end="111:67"><expr pos:start="109:52" pos:end="111:67"><name pos:start="109:52" pos:end="109:72"><name pos:start="109:52" pos:end="109:54">mhd</name><operator pos:start="109:55" pos:end="109:56">-&gt;</operator><name pos:start="109:57" pos:end="109:72">standby_mem_size</name></name> <operator pos:start="109:74" pos:end="109:74">/</operator>

                                                   <name pos:start="111:52" pos:end="111:67">MEM_SECTION_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:56"><expr pos:start="117:9" pos:end="117:55"><name pos:start="117:9" pos:end="117:28"><name pos:start="117:9" pos:end="117:11">mhd</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:28">padded_ram_size</name></name> <operator pos:start="117:30" pos:end="117:30">=</operator> <name pos:start="117:32" pos:end="117:39">ram_size</name> <operator pos:start="117:41" pos:end="117:41">+</operator> <name pos:start="117:43" pos:end="117:55"><name pos:start="117:43" pos:end="117:45">mhd</name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:55">pad_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:44"><expr pos:start="119:9" pos:end="119:43"><name pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:11">mhd</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:16">rzm</name></name> <operator pos:start="119:18" pos:end="119:18">=</operator> <literal type="number" pos:start="119:20" pos:end="119:20">1</literal> <operator pos:start="119:22" pos:end="119:23">&lt;&lt;</operator> <name pos:start="119:25" pos:end="119:43"><name pos:start="119:25" pos:end="119:27">mhd</name><operator pos:start="119:28" pos:end="119:29">-&gt;</operator><name pos:start="119:30" pos:end="119:43">increment_size</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:78"><expr pos:start="123:9" pos:end="123:77"><name pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:17">read_info</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:29">facilities</name></name> <operator pos:start="123:31" pos:end="123:32">|=</operator> <call pos:start="123:34" pos:end="123:77"><name pos:start="123:34" pos:end="123:44">cpu_to_be64</name><argument_list pos:start="123:45" pos:end="123:77">(<argument pos:start="123:46" pos:end="123:76"><expr pos:start="123:46" pos:end="123:76"><name pos:start="123:46" pos:end="123:76">SCLP_FC_ASSIGN_ATTACH_READ_STOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:44"><expr pos:start="127:5" pos:end="127:43"><name pos:start="127:5" pos:end="127:22"><name pos:start="127:5" pos:end="127:13">read_info</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:22">mha_pow</name></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <call pos:start="127:26" pos:end="127:43"><name pos:start="127:26" pos:end="127:41">s390_get_mha_pow</name><argument_list pos:start="127:42" pos:end="127:43">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:53"><expr pos:start="129:5" pos:end="129:52"><name pos:start="129:5" pos:end="129:20"><name pos:start="129:5" pos:end="129:13">read_info</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:20">hmfai</name></name> <operator pos:start="129:22" pos:end="129:22">=</operator> <call pos:start="129:24" pos:end="129:52"><name pos:start="129:24" pos:end="129:34">cpu_to_be32</name><argument_list pos:start="129:35" pos:end="129:52">(<argument pos:start="129:36" pos:end="129:51"><expr pos:start="129:36" pos:end="129:51"><call pos:start="129:36" pos:end="129:51"><name pos:start="129:36" pos:end="129:49">s390_get_hmfai</name><argument_list pos:start="129:50" pos:end="129:51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:46"><expr pos:start="133:5" pos:end="133:45"><name pos:start="133:5" pos:end="133:10">rnsize</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <literal type="number" pos:start="133:14" pos:end="133:14">1</literal> <operator pos:start="133:16" pos:end="133:17">&lt;&lt;</operator> <operator pos:start="133:19" pos:end="133:19">(</operator><name pos:start="133:20" pos:end="133:39"><name pos:start="133:20" pos:end="133:23">sclp</name><operator pos:start="133:24" pos:end="133:25">-&gt;</operator><name pos:start="133:26" pos:end="133:39">increment_size</name></name> <operator pos:start="133:41" pos:end="133:41">-</operator> <literal type="number" pos:start="133:43" pos:end="133:44">20</literal><operator pos:start="133:45" pos:end="133:45">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="145:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:22">(<expr pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:14">rnsize</name> <operator pos:start="135:16" pos:end="135:17">&lt;=</operator> <literal type="number" pos:start="135:19" pos:end="135:21">128</literal></expr>)</condition> <block pos:start="135:24" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:35">

        <expr_stmt pos:start="137:9" pos:end="137:35"><expr pos:start="137:9" pos:end="137:34"><name pos:start="137:9" pos:end="137:25"><name pos:start="137:9" pos:end="137:17">read_info</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:25">rnsize</name></name> <operator pos:start="137:27" pos:end="137:27">=</operator> <name pos:start="137:29" pos:end="137:34">rnsize</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="139:7" pos:end="145:5">else <block pos:start="139:12" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:49">

        <expr_stmt pos:start="141:9" pos:end="141:30"><expr pos:start="141:9" pos:end="141:29"><name pos:start="141:9" pos:end="141:25"><name pos:start="141:9" pos:end="141:17">read_info</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:25">rnsize</name></name> <operator pos:start="141:27" pos:end="141:27">=</operator> <literal type="number" pos:start="141:29" pos:end="141:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:49"><expr pos:start="143:9" pos:end="143:48"><name pos:start="143:9" pos:end="143:26"><name pos:start="143:9" pos:end="143:17">read_info</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:26">rnsize2</name></name> <operator pos:start="143:28" pos:end="143:28">=</operator> <call pos:start="143:30" pos:end="143:48"><name pos:start="143:30" pos:end="143:40">cpu_to_be32</name><argument_list pos:start="143:41" pos:end="143:48">(<argument pos:start="143:42" pos:end="143:47"><expr pos:start="143:42" pos:end="143:47"><name pos:start="143:42" pos:end="143:47">rnsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:57"><expr pos:start="149:5" pos:end="149:56"><name pos:start="149:5" pos:end="149:9">rnmax</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <name pos:start="149:13" pos:end="149:32"><name pos:start="149:13" pos:end="149:19">machine</name><operator pos:start="149:20" pos:end="149:21">-&gt;</operator><name pos:start="149:22" pos:end="149:32">maxram_size</name></name> <operator pos:start="149:34" pos:end="149:35">&gt;&gt;</operator> <name pos:start="149:37" pos:end="149:56"><name pos:start="149:37" pos:end="149:40">sclp</name><operator pos:start="149:41" pos:end="149:42">-&gt;</operator><name pos:start="149:43" pos:end="149:56">increment_size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="161:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:24">(<expr pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:13">rnmax</name> <operator pos:start="151:15" pos:end="151:15">&lt;</operator> <literal type="number" pos:start="151:17" pos:end="151:23">0x10000</literal></expr>)</condition> <block pos:start="151:26" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:46">

        <expr_stmt pos:start="153:9" pos:end="153:46"><expr pos:start="153:9" pos:end="153:45"><name pos:start="153:9" pos:end="153:24"><name pos:start="153:9" pos:end="153:17">read_info</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:24">rnmax</name></name> <operator pos:start="153:26" pos:end="153:26">=</operator> <call pos:start="153:28" pos:end="153:45"><name pos:start="153:28" pos:end="153:38">cpu_to_be16</name><argument_list pos:start="153:39" pos:end="153:45">(<argument pos:start="153:40" pos:end="153:44"><expr pos:start="153:40" pos:end="153:44"><name pos:start="153:40" pos:end="153:44">rnmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="155:7" pos:end="161:5">else <block pos:start="155:12" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:47">

        <expr_stmt pos:start="157:9" pos:end="157:42"><expr pos:start="157:9" pos:end="157:41"><name pos:start="157:9" pos:end="157:24"><name pos:start="157:9" pos:end="157:17">read_info</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:24">rnmax</name></name> <operator pos:start="157:26" pos:end="157:26">=</operator> <call pos:start="157:28" pos:end="157:41"><name pos:start="157:28" pos:end="157:38">cpu_to_be16</name><argument_list pos:start="157:39" pos:end="157:41">(<argument pos:start="157:40" pos:end="157:40"><expr pos:start="157:40" pos:end="157:40"><literal type="number" pos:start="157:40" pos:end="157:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:47"><expr pos:start="159:9" pos:end="159:46"><name pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:17">read_info</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:25">rnmax2</name></name> <operator pos:start="159:27" pos:end="159:27">=</operator> <call pos:start="159:29" pos:end="159:46"><name pos:start="159:29" pos:end="159:39">cpu_to_be64</name><argument_list pos:start="159:40" pos:end="159:46">(<argument pos:start="159:41" pos:end="159:45"><expr pos:start="159:41" pos:end="159:45"><name pos:start="159:41" pos:end="159:45">rnmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="165:5" pos:end="175:5"><if pos:start="165:5" pos:end="171:5">if <condition pos:start="165:8" pos:end="165:53">(<expr pos:start="165:9" pos:end="165:52"><name pos:start="165:9" pos:end="165:12">ipib</name> <operator pos:start="165:14" pos:end="165:15">&amp;&amp;</operator> <name pos:start="165:17" pos:end="165:27"><name pos:start="165:17" pos:end="165:20">ipib</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:27">flags</name></name> <operator pos:start="165:29" pos:end="165:29">&amp;</operator> <name pos:start="165:31" pos:end="165:52">DIAG308_FLAGS_LP_VALID</name></expr>)</condition> <block pos:start="165:55" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:44">

        <expr_stmt pos:start="167:9" pos:end="169:44"><expr pos:start="167:9" pos:end="169:43"><call pos:start="167:9" pos:end="169:43"><name pos:start="167:9" pos:end="167:14">memcpy</name><argument_list pos:start="167:15" pos:end="169:43">(<argument pos:start="167:16" pos:end="167:35"><expr pos:start="167:16" pos:end="167:35"><operator pos:start="167:16" pos:end="167:16">&amp;</operator><name pos:start="167:17" pos:end="167:35"><name pos:start="167:17" pos:end="167:25">read_info</name><operator pos:start="167:26" pos:end="167:27">-&gt;</operator><name pos:start="167:28" pos:end="167:35">loadparm</name></name></expr></argument>, <argument pos:start="167:38" pos:end="167:52"><expr pos:start="167:38" pos:end="167:52"><operator pos:start="167:38" pos:end="167:38">&amp;</operator><name pos:start="167:39" pos:end="167:52"><name pos:start="167:39" pos:end="167:42">ipib</name><operator pos:start="167:43" pos:end="167:44">-&gt;</operator><name pos:start="167:45" pos:end="167:52">loadparm</name></name></expr></argument>,

               <argument pos:start="169:16" pos:end="169:42"><expr pos:start="169:16" pos:end="169:42"><sizeof pos:start="169:16" pos:end="169:42">sizeof<argument_list pos:start="169:22" pos:end="169:42">(<argument pos:start="169:23" pos:end="169:41"><expr pos:start="169:23" pos:end="169:41"><name pos:start="169:23" pos:end="169:41"><name pos:start="169:23" pos:end="169:31">read_info</name><operator pos:start="169:32" pos:end="169:33">-&gt;</operator><name pos:start="169:34" pos:end="169:41">loadparm</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="171:7" pos:end="175:5">else <block pos:start="171:12" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:51">

        <expr_stmt pos:start="173:9" pos:end="173:51"><expr pos:start="173:9" pos:end="173:50"><call pos:start="173:9" pos:end="173:50"><name pos:start="173:9" pos:end="173:29">s390_ipl_set_loadparm</name><argument_list pos:start="173:30" pos:end="173:50">(<argument pos:start="173:31" pos:end="173:49"><expr pos:start="173:31" pos:end="173:49"><name pos:start="173:31" pos:end="173:49"><name pos:start="173:31" pos:end="173:39">read_info</name><operator pos:start="173:40" pos:end="173:41">-&gt;</operator><name pos:start="173:42" pos:end="173:49">loadparm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:72"><expr pos:start="179:5" pos:end="179:71"><name pos:start="179:5" pos:end="179:25"><name pos:start="179:5" pos:end="179:8">sccb</name><operator pos:start="179:9" pos:end="179:10">-&gt;</operator><name pos:start="179:11" pos:end="179:11">h</name><operator pos:start="179:12" pos:end="179:12">.</operator><name pos:start="179:13" pos:end="179:25">response_code</name></name> <operator pos:start="179:27" pos:end="179:27">=</operator> <call pos:start="179:29" pos:end="179:71"><name pos:start="179:29" pos:end="179:39">cpu_to_be16</name><argument_list pos:start="179:40" pos:end="179:71">(<argument pos:start="179:41" pos:end="179:70"><expr pos:start="179:41" pos:end="179:70"><name pos:start="179:41" pos:end="179:70">SCLP_RC_NORMAL_READ_COMPLETION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
