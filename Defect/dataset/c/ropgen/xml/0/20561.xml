<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20561.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">nbd_negotiate_send_rep_len</name><parameter_list pos:start="1:38" pos:end="3:79">(<parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:48">QIOChannel</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">ioc</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:68"><decl pos:start="1:56" pos:end="1:68"><type pos:start="1:56" pos:end="1:68"><name pos:start="1:56" pos:end="1:63">uint32_t</name></type> <name pos:start="1:65" pos:end="1:68">type</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:50"><decl pos:start="3:39" pos:end="3:50"><type pos:start="3:39" pos:end="3:50"><name pos:start="3:39" pos:end="3:46">uint32_t</name></type> <name pos:start="3:48" pos:end="3:50">opt</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:64"><decl pos:start="3:53" pos:end="3:64"><type pos:start="3:53" pos:end="3:64"><name pos:start="3:53" pos:end="3:60">uint32_t</name></type> <name pos:start="3:62" pos:end="3:64">len</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:78"><decl pos:start="3:67" pos:end="3:78"><type pos:start="3:67" pos:end="3:78"><name pos:start="3:67" pos:end="3:71">Error</name> <modifier pos:start="3:73" pos:end="3:73">*</modifier><modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:78">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="63:1">{<block_content pos:start="7:5" pos:end="61:13">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:18">magic</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:53"><expr pos:start="11:5" pos:end="11:52"><call pos:start="11:5" pos:end="11:52"><name pos:start="11:5" pos:end="11:36">trace_nbd_negotiate_send_rep_len</name><argument_list pos:start="11:37" pos:end="11:52">(<argument pos:start="11:38" pos:end="11:40"><expr pos:start="11:38" pos:end="11:40"><name pos:start="11:38" pos:end="11:40">opt</name></expr></argument>, <argument pos:start="11:43" pos:end="11:46"><expr pos:start="11:43" pos:end="11:46"><name pos:start="11:43" pos:end="11:46">type</name></expr></argument>, <argument pos:start="11:49" pos:end="11:51"><expr pos:start="11:49" pos:end="11:51"><name pos:start="11:49" pos:end="11:51">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:9">magic</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <call pos:start="15:13" pos:end="15:38"><name pos:start="15:13" pos:end="15:23">cpu_to_be64</name><argument_list pos:start="15:24" pos:end="15:38">(<argument pos:start="15:25" pos:end="15:37"><expr pos:start="15:25" pos:end="15:37"><name pos:start="15:25" pos:end="15:37">NBD_REP_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:56">(<expr pos:start="17:9" pos:end="17:55"><call pos:start="17:9" pos:end="17:51"><name pos:start="17:9" pos:end="17:17">nbd_write</name><argument_list pos:start="17:18" pos:end="17:51">(<argument pos:start="17:19" pos:end="17:21"><expr pos:start="17:19" pos:end="17:21"><name pos:start="17:19" pos:end="17:21">ioc</name></expr></argument>, <argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:29">magic</name></expr></argument>, <argument pos:start="17:32" pos:end="17:44"><expr pos:start="17:32" pos:end="17:44"><sizeof pos:start="17:32" pos:end="17:44">sizeof<argument_list pos:start="17:38" pos:end="17:44">(<argument pos:start="17:39" pos:end="17:43"><expr pos:start="17:39" pos:end="17:43"><name pos:start="17:39" pos:end="17:43">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="17:47" pos:end="17:50"><expr pos:start="17:47" pos:end="17:50"><name pos:start="17:47" pos:end="17:50">errp</name></expr></argument>)</argument_list></call> <operator pos:start="17:53" pos:end="17:53">&lt;</operator> <literal type="number" pos:start="17:55" pos:end="17:55">0</literal></expr>)</condition> <block pos:start="17:58" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:23">

        <expr_stmt pos:start="19:9" pos:end="19:58"><expr pos:start="19:9" pos:end="19:57"><call pos:start="19:9" pos:end="19:57"><name pos:start="19:9" pos:end="19:21">error_prepend</name><argument_list pos:start="19:22" pos:end="19:57">(<argument pos:start="19:23" pos:end="19:26"><expr pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">errp</name></expr></argument>, <argument pos:start="19:29" pos:end="19:56"><expr pos:start="19:29" pos:end="19:56"><literal type="string" pos:start="19:29" pos:end="19:56">"write failed (rep magic): "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:7">opt</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:26"><name pos:start="27:11" pos:end="27:21">cpu_to_be32</name><argument_list pos:start="27:22" pos:end="27:26">(<argument pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:25">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:52">(<expr pos:start="29:9" pos:end="29:51"><call pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:17">nbd_write</name><argument_list pos:start="29:18" pos:end="29:47">(<argument pos:start="29:19" pos:end="29:21"><expr pos:start="29:19" pos:end="29:21"><name pos:start="29:19" pos:end="29:21">ioc</name></expr></argument>, <argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><operator pos:start="29:24" pos:end="29:24">&amp;</operator><name pos:start="29:25" pos:end="29:27">opt</name></expr></argument>, <argument pos:start="29:30" pos:end="29:40"><expr pos:start="29:30" pos:end="29:40"><sizeof pos:start="29:30" pos:end="29:40">sizeof<argument_list pos:start="29:36" pos:end="29:40">(<argument pos:start="29:37" pos:end="29:39"><expr pos:start="29:37" pos:end="29:39"><name pos:start="29:37" pos:end="29:39">opt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:43" pos:end="29:46"><expr pos:start="29:43" pos:end="29:46"><name pos:start="29:43" pos:end="29:46">errp</name></expr></argument>)</argument_list></call> <operator pos:start="29:49" pos:end="29:49">&lt;</operator> <literal type="number" pos:start="29:51" pos:end="29:51">0</literal></expr>)</condition> <block pos:start="29:54" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:23">

        <expr_stmt pos:start="31:9" pos:end="31:56"><expr pos:start="31:9" pos:end="31:55"><call pos:start="31:9" pos:end="31:55"><name pos:start="31:9" pos:end="31:21">error_prepend</name><argument_list pos:start="31:22" pos:end="31:55">(<argument pos:start="31:23" pos:end="31:26"><expr pos:start="31:23" pos:end="31:26"><name pos:start="31:23" pos:end="31:26">errp</name></expr></argument>, <argument pos:start="31:29" pos:end="31:54"><expr pos:start="31:29" pos:end="31:54"><literal type="string" pos:start="31:29" pos:end="31:54">"write failed (rep opt): "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:23">return <expr pos:start="33:16" pos:end="33:22"><operator pos:start="33:16" pos:end="33:16">-</operator><name pos:start="33:17" pos:end="33:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:8">type</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:28"><name pos:start="39:12" pos:end="39:22">cpu_to_be32</name><argument_list pos:start="39:23" pos:end="39:28">(<argument pos:start="39:24" pos:end="39:27"><expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:54">(<expr pos:start="41:9" pos:end="41:53"><call pos:start="41:9" pos:end="41:49"><name pos:start="41:9" pos:end="41:17">nbd_write</name><argument_list pos:start="41:18" pos:end="41:49">(<argument pos:start="41:19" pos:end="41:21"><expr pos:start="41:19" pos:end="41:21"><name pos:start="41:19" pos:end="41:21">ioc</name></expr></argument>, <argument pos:start="41:24" pos:end="41:28"><expr pos:start="41:24" pos:end="41:28"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:28">type</name></expr></argument>, <argument pos:start="41:31" pos:end="41:42"><expr pos:start="41:31" pos:end="41:42"><sizeof pos:start="41:31" pos:end="41:42">sizeof<argument_list pos:start="41:37" pos:end="41:42">(<argument pos:start="41:38" pos:end="41:41"><expr pos:start="41:38" pos:end="41:41"><name pos:start="41:38" pos:end="41:41">type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="41:45" pos:end="41:48"><expr pos:start="41:45" pos:end="41:48"><name pos:start="41:45" pos:end="41:48">errp</name></expr></argument>)</argument_list></call> <operator pos:start="41:51" pos:end="41:51">&lt;</operator> <literal type="number" pos:start="41:53" pos:end="41:53">0</literal></expr>)</condition> <block pos:start="41:56" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:23">

        <expr_stmt pos:start="43:9" pos:end="43:57"><expr pos:start="43:9" pos:end="43:56"><call pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:21">error_prepend</name><argument_list pos:start="43:22" pos:end="43:56">(<argument pos:start="43:23" pos:end="43:26"><expr pos:start="43:23" pos:end="43:26"><name pos:start="43:23" pos:end="43:26">errp</name></expr></argument>, <argument pos:start="43:29" pos:end="43:55"><expr pos:start="43:29" pos:end="43:55"><literal type="string" pos:start="43:29" pos:end="43:55">"write failed (rep type): "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:23">return <expr pos:start="45:16" pos:end="45:22"><operator pos:start="45:16" pos:end="45:16">-</operator><name pos:start="45:17" pos:end="45:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:7">len</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:26"><name pos:start="51:11" pos:end="51:21">cpu_to_be32</name><argument_list pos:start="51:22" pos:end="51:26">(<argument pos:start="51:23" pos:end="51:25"><expr pos:start="51:23" pos:end="51:25"><name pos:start="51:23" pos:end="51:25">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:52">(<expr pos:start="53:9" pos:end="53:51"><call pos:start="53:9" pos:end="53:47"><name pos:start="53:9" pos:end="53:17">nbd_write</name><argument_list pos:start="53:18" pos:end="53:47">(<argument pos:start="53:19" pos:end="53:21"><expr pos:start="53:19" pos:end="53:21"><name pos:start="53:19" pos:end="53:21">ioc</name></expr></argument>, <argument pos:start="53:24" pos:end="53:27"><expr pos:start="53:24" pos:end="53:27"><operator pos:start="53:24" pos:end="53:24">&amp;</operator><name pos:start="53:25" pos:end="53:27">len</name></expr></argument>, <argument pos:start="53:30" pos:end="53:40"><expr pos:start="53:30" pos:end="53:40"><sizeof pos:start="53:30" pos:end="53:40">sizeof<argument_list pos:start="53:36" pos:end="53:40">(<argument pos:start="53:37" pos:end="53:39"><expr pos:start="53:37" pos:end="53:39"><name pos:start="53:37" pos:end="53:39">len</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="53:43" pos:end="53:46"><expr pos:start="53:43" pos:end="53:46"><name pos:start="53:43" pos:end="53:46">errp</name></expr></argument>)</argument_list></call> <operator pos:start="53:49" pos:end="53:49">&lt;</operator> <literal type="number" pos:start="53:51" pos:end="53:51">0</literal></expr>)</condition> <block pos:start="53:54" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:23">

        <expr_stmt pos:start="55:9" pos:end="55:64"><expr pos:start="55:9" pos:end="55:63"><call pos:start="55:9" pos:end="55:63"><name pos:start="55:9" pos:end="55:21">error_prepend</name><argument_list pos:start="55:22" pos:end="55:63">(<argument pos:start="55:23" pos:end="55:26"><expr pos:start="55:23" pos:end="55:26"><name pos:start="55:23" pos:end="55:26">errp</name></expr></argument>, <argument pos:start="55:29" pos:end="55:62"><expr pos:start="55:29" pos:end="55:62"><literal type="string" pos:start="55:29" pos:end="55:62">"write failed (rep data length): "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:23">return <expr pos:start="57:16" pos:end="57:22"><operator pos:start="57:16" pos:end="57:16">-</operator><name pos:start="57:17" pos:end="57:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="61:5" pos:end="61:13">return <expr pos:start="61:12" pos:end="61:12"><literal type="number" pos:start="61:12" pos:end="61:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
