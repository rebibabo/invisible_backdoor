<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4113.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">bdrv_assign_node_name</name><parameter_list pos:start="1:34" pos:end="5:47">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:50">BlockDriverState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">bs</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:55"><decl pos:start="3:35" pos:end="3:55"><type pos:start="3:35" pos:end="3:55"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:44">char</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">node_name</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:46"><decl pos:start="5:35" pos:end="5:46"><type pos:start="5:35" pos:end="5:46"><name pos:start="5:35" pos:end="5:39">Error</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier><modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="61:1">{<block_content pos:start="9:5" pos:end="59:58">

    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:19">(<expr pos:start="9:9" pos:end="9:18"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:18">node_name</name></expr>)</condition> <block pos:start="9:21" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:15">

        <return pos:start="11:9" pos:end="11:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:43">/* empty string node name is invalid */</comment>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:17">node_name</name><index pos:start="19:18" pos:end="19:20">[<expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>]</index></name> <operator pos:start="19:22" pos:end="19:23">==</operator> <literal type="char" pos:start="19:25" pos:end="19:28">'\0'</literal></expr>)</condition> <block pos:start="19:31" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:44"><expr pos:start="21:9" pos:end="21:43"><call pos:start="21:9" pos:end="21:43"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:43">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:42"><expr pos:start="21:26" pos:end="21:42"><literal type="string" pos:start="21:26" pos:end="21:42">"Empty node name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:54">/* takes care of avoiding namespaces collisions */</comment>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:29">(<expr pos:start="31:9" pos:end="31:28"><call pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:17">bdrv_find</name><argument_list pos:start="31:18" pos:end="31:28">(<argument pos:start="31:19" pos:end="31:27"><expr pos:start="31:19" pos:end="31:27"><name pos:start="31:19" pos:end="31:27">node_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:31" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:15">

        <expr_stmt pos:start="33:9" pos:end="35:30"><expr pos:start="33:9" pos:end="35:29"><call pos:start="33:9" pos:end="35:29"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="35:29">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="33:71"><expr pos:start="33:26" pos:end="33:71"><literal type="string" pos:start="33:26" pos:end="33:71">"node-name=%s is conflicting with a device id"</literal></expr></argument>,

                   <argument pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:28">node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:54">/* takes care of avoiding duplicates node names */</comment>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:34">(<expr pos:start="45:9" pos:end="45:33"><call pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:22">bdrv_find_node</name><argument_list pos:start="45:23" pos:end="45:33">(<argument pos:start="45:24" pos:end="45:32"><expr pos:start="45:24" pos:end="45:32"><name pos:start="45:24" pos:end="45:32">node_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:36" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:15">

        <expr_stmt pos:start="47:9" pos:end="47:48"><expr pos:start="47:9" pos:end="47:47"><call pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="47:47">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">errp</name></expr></argument>, <argument pos:start="47:26" pos:end="47:46"><expr pos:start="47:26" pos:end="47:46"><literal type="string" pos:start="47:26" pos:end="47:46">"Duplicate node name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:70">/* copy node name into the bs and insert it into the graph list */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:61"><expr pos:start="57:5" pos:end="57:60"><call pos:start="57:5" pos:end="57:60"><name pos:start="57:5" pos:end="57:11">pstrcpy</name><argument_list pos:start="57:12" pos:end="57:60">(<argument pos:start="57:13" pos:end="57:25"><expr pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:14">bs</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:25">node_name</name></name></expr></argument>, <argument pos:start="57:28" pos:end="57:48"><expr pos:start="57:28" pos:end="57:48"><sizeof pos:start="57:28" pos:end="57:48">sizeof<argument_list pos:start="57:34" pos:end="57:48">(<argument pos:start="57:35" pos:end="57:47"><expr pos:start="57:35" pos:end="57:47"><name pos:start="57:35" pos:end="57:47"><name pos:start="57:35" pos:end="57:36">bs</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:47">node_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="57:51" pos:end="57:59"><expr pos:start="57:51" pos:end="57:59"><name pos:start="57:51" pos:end="57:59">node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:58"><expr pos:start="59:5" pos:end="59:57"><call pos:start="59:5" pos:end="59:57"><name pos:start="59:5" pos:end="59:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="59:23" pos:end="59:57">(<argument pos:start="59:24" pos:end="59:41"><expr pos:start="59:24" pos:end="59:41"><operator pos:start="59:24" pos:end="59:24">&amp;</operator><name pos:start="59:25" pos:end="59:41">graph_bdrv_states</name></expr></argument>, <argument pos:start="59:44" pos:end="59:45"><expr pos:start="59:44" pos:end="59:45"><name pos:start="59:44" pos:end="59:45">bs</name></expr></argument>, <argument pos:start="59:48" pos:end="59:56"><expr pos:start="59:48" pos:end="59:56"><name pos:start="59:48" pos:end="59:56">node_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
