<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1283.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:47">qmp_chardev_open_socket</name><parameter_list pos:start="1:48" pos:end="7:61">(<parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">id</name></decl></parameter>,

                                                <parameter pos:start="3:49" pos:end="3:71"><decl pos:start="3:49" pos:end="3:71"><type pos:start="3:49" pos:end="3:71"><name pos:start="3:49" pos:end="3:62">ChardevBackend</name> <modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:71">backend</name></decl></parameter>,

                                                <parameter pos:start="5:49" pos:end="5:66"><decl pos:start="5:49" pos:end="5:66"><type pos:start="5:49" pos:end="5:66"><name pos:start="5:49" pos:end="5:61">ChardevReturn</name> <modifier pos:start="5:63" pos:end="5:63">*</modifier></type><name pos:start="5:64" pos:end="5:66">ret</name></decl></parameter>,

                                                <parameter pos:start="7:49" pos:end="7:60"><decl pos:start="7:49" pos:end="7:60"><type pos:start="7:49" pos:end="7:60"><name pos:start="7:49" pos:end="7:53">Error</name> <modifier pos:start="7:55" pos:end="7:55">*</modifier><modifier pos:start="7:56" pos:end="7:56">*</modifier></type><name pos:start="7:57" pos:end="7:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="251:1">{<block_content pos:start="11:5" pos:end="249:16">

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">CharDriverState</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">TCPCharDriver</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:20">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:44"><decl pos:start="15:5" pos:end="15:43"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">ChardevSocket</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:23">sock</name> <init pos:start="15:25" pos:end="15:43">= <expr pos:start="15:27" pos:end="15:43"><name pos:start="15:27" pos:end="15:43"><name pos:start="15:27" pos:end="15:33">backend</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:36">u</name><operator pos:start="15:37" pos:end="15:37">.</operator><name pos:start="15:38" pos:end="15:43">socket</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">SocketAddress</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:23">addr</name> <init pos:start="17:25" pos:end="17:36">= <expr pos:start="17:27" pos:end="17:36"><name pos:start="17:27" pos:end="17:36"><name pos:start="17:27" pos:end="17:30">sock</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:36">addr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:68"><decl pos:start="19:5" pos:end="19:67"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:19">do_nodelay</name>     <init pos:start="19:25" pos:end="19:67">= <expr pos:start="19:27" pos:end="19:67"><ternary pos:start="19:27" pos:end="19:67"><condition pos:start="19:27" pos:end="19:45"><expr pos:start="19:27" pos:end="19:43"><name pos:start="19:27" pos:end="19:43"><name pos:start="19:27" pos:end="19:30">sock</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:43">has_nodelay</name></name></expr> ?</condition><then pos:start="19:47" pos:end="19:59"> <expr pos:start="19:47" pos:end="19:59"><name pos:start="19:47" pos:end="19:59"><name pos:start="19:47" pos:end="19:50">sock</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:59">nodelay</name></name></expr> </then><else pos:start="19:61" pos:end="19:67">: <expr pos:start="19:63" pos:end="19:67"><name pos:start="19:63" pos:end="19:67">false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:67"><decl pos:start="21:5" pos:end="21:66"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:18">is_listen</name>      <init pos:start="21:25" pos:end="21:66">= <expr pos:start="21:27" pos:end="21:66"><ternary pos:start="21:27" pos:end="21:66"><condition pos:start="21:27" pos:end="21:45"><expr pos:start="21:27" pos:end="21:42"><name pos:start="21:27" pos:end="21:42"><name pos:start="21:27" pos:end="21:30">sock</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:42">has_server</name></name></expr>  ?</condition><then pos:start="21:47" pos:end="21:58"> <expr pos:start="21:47" pos:end="21:58"><name pos:start="21:47" pos:end="21:58"><name pos:start="21:47" pos:end="21:50">sock</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:58">server</name></name></expr>  </then><else pos:start="21:61" pos:end="21:66">: <expr pos:start="21:63" pos:end="21:66"><name pos:start="21:63" pos:end="21:66">true</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:68"><decl pos:start="23:5" pos:end="23:67"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:18">is_telnet</name>      <init pos:start="23:25" pos:end="23:67">= <expr pos:start="23:27" pos:end="23:67"><ternary pos:start="23:27" pos:end="23:67"><condition pos:start="23:27" pos:end="23:45"><expr pos:start="23:27" pos:end="23:42"><name pos:start="23:27" pos:end="23:42"><name pos:start="23:27" pos:end="23:30">sock</name><operator pos:start="23:31" pos:end="23:32">-&gt;</operator><name pos:start="23:33" pos:end="23:42">has_telnet</name></name></expr>  ?</condition><then pos:start="23:47" pos:end="23:58"> <expr pos:start="23:47" pos:end="23:58"><name pos:start="23:47" pos:end="23:58"><name pos:start="23:47" pos:end="23:50">sock</name><operator pos:start="23:51" pos:end="23:52">-&gt;</operator><name pos:start="23:53" pos:end="23:58">telnet</name></name></expr>  </then><else pos:start="23:61" pos:end="23:67">: <expr pos:start="23:63" pos:end="23:67"><name pos:start="23:63" pos:end="23:67">false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:68"><decl pos:start="25:5" pos:end="25:67"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:23">is_waitconnect</name> <init pos:start="25:25" pos:end="25:67">= <expr pos:start="25:27" pos:end="25:67"><ternary pos:start="25:27" pos:end="25:67"><condition pos:start="25:27" pos:end="25:45"><expr pos:start="25:27" pos:end="25:40"><name pos:start="25:27" pos:end="25:40"><name pos:start="25:27" pos:end="25:30">sock</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:40">has_wait</name></name></expr>    ?</condition><then pos:start="25:47" pos:end="25:56"> <expr pos:start="25:47" pos:end="25:56"><name pos:start="25:47" pos:end="25:56"><name pos:start="25:47" pos:end="25:50">sock</name><operator pos:start="25:51" pos:end="25:52">-&gt;</operator><name pos:start="25:53" pos:end="25:56">wait</name></name></expr>    </then><else pos:start="25:61" pos:end="25:67">: <expr pos:start="25:63" pos:end="25:67"><name pos:start="25:63" pos:end="25:67">false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:68"><decl pos:start="27:5" pos:end="27:67"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">int64_t</name></type> <name pos:start="27:13" pos:end="27:21">reconnect</name>   <init pos:start="27:25" pos:end="27:67">= <expr pos:start="27:27" pos:end="27:67"><ternary pos:start="27:27" pos:end="27:67"><condition pos:start="27:27" pos:end="27:47"><expr pos:start="27:27" pos:end="27:45"><name pos:start="27:27" pos:end="27:45"><name pos:start="27:27" pos:end="27:30">sock</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:45">has_reconnect</name></name></expr> ?</condition><then pos:start="27:49" pos:end="27:63"> <expr pos:start="27:49" pos:end="27:63"><name pos:start="27:49" pos:end="27:63"><name pos:start="27:49" pos:end="27:52">sock</name><operator pos:start="27:53" pos:end="27:54">-&gt;</operator><name pos:start="27:55" pos:end="27:63">reconnect</name></name></expr> </then><else pos:start="27:65" pos:end="27:67">: <expr pos:start="27:67" pos:end="27:67"><literal type="number" pos:start="27:67" pos:end="27:67">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:58"><decl pos:start="29:5" pos:end="29:57"><type pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:17">ChardevCommon</name> <modifier pos:start="29:19" pos:end="29:19">*</modifier></type><name pos:start="29:20" pos:end="29:25">common</name> <init pos:start="29:27" pos:end="29:57">= <expr pos:start="29:29" pos:end="29:57"><call pos:start="29:29" pos:end="29:57"><name pos:start="29:29" pos:end="29:51">qapi_ChardevSocket_base</name><argument_list pos:start="29:52" pos:end="29:57">(<argument pos:start="29:53" pos:end="29:56"><expr pos:start="29:53" pos:end="29:56"><name pos:start="29:53" pos:end="29:56">sock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:34"><decl pos:start="31:5" pos:end="31:33"><type pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:20">QIOChannelSocket</name> <modifier pos:start="31:22" pos:end="31:22">*</modifier></type><name pos:start="31:23" pos:end="31:26">sioc</name> <init pos:start="31:28" pos:end="31:33">= <expr pos:start="31:30" pos:end="31:33"><name pos:start="31:30" pos:end="31:33">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:7">chr</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:38"><name pos:start="35:11" pos:end="35:24">qemu_chr_alloc</name><argument_list pos:start="35:25" pos:end="35:38">(<argument pos:start="35:26" pos:end="35:31"><expr pos:start="35:26" pos:end="35:31"><name pos:start="35:26" pos:end="35:31">common</name></expr></argument>, <argument pos:start="35:34" pos:end="35:37"><expr pos:start="35:34" pos:end="35:37"><name pos:start="35:34" pos:end="35:37">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:13">(<expr pos:start="37:9" pos:end="37:12"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:12">chr</name></expr>)</condition> <block pos:start="37:15" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:20">

        <return pos:start="39:9" pos:end="39:20">return <expr pos:start="39:16" pos:end="39:19"><name pos:start="39:16" pos:end="39:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:5">s</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <call pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:14">g_new0</name><argument_list pos:start="43:15" pos:end="43:32">(<argument pos:start="43:16" pos:end="43:28"><expr pos:start="43:16" pos:end="43:28"><name pos:start="43:16" pos:end="43:28">TCPCharDriver</name></expr></argument>, <argument pos:start="43:31" pos:end="43:31"><expr pos:start="43:31" pos:end="43:31"><literal type="number" pos:start="43:31" pos:end="43:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:56"><expr pos:start="47:5" pos:end="47:55"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:14">is_unix</name></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:27"><name pos:start="47:18" pos:end="47:21">addr</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:27">type</name></name> <operator pos:start="47:29" pos:end="47:30">==</operator> <name pos:start="47:32" pos:end="47:55">SOCKET_ADDRESS_KIND_UNIX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:16">is_listen</name></name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:28">is_listen</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:29"><expr pos:start="51:5" pos:end="51:28"><name pos:start="51:5" pos:end="51:16"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:16">is_telnet</name></name> <operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:28">is_telnet</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:17">do_nodelay</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:30">do_nodelay</name></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="117:5"><if pos:start="55:5" pos:end="117:5">if <condition pos:start="55:8" pos:end="55:24">(<expr pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:12">sock</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:23">tls_creds</name></name></expr>)</condition> <block pos:start="55:26" pos:end="117:5">{<block_content pos:start="57:9" pos:end="115:9">

        <decl_stmt pos:start="57:9" pos:end="57:22"><decl pos:start="57:9" pos:end="57:21"><type pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:14">Object</name> <modifier pos:start="57:16" pos:end="57:16">*</modifier></type><name pos:start="57:17" pos:end="57:21">creds</name></decl>;</decl_stmt>

        <expr_stmt pos:start="59:9" pos:end="61:56"><expr pos:start="59:9" pos:end="61:55"><name pos:start="59:9" pos:end="59:13">creds</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="61:55"><name pos:start="59:17" pos:end="59:45">object_resolve_path_component</name><argument_list pos:start="59:46" pos:end="61:55">(

            <argument pos:start="61:13" pos:end="61:37"><expr pos:start="61:13" pos:end="61:37"><call pos:start="61:13" pos:end="61:37"><name pos:start="61:13" pos:end="61:35">object_get_objects_root</name><argument_list pos:start="61:36" pos:end="61:37">()</argument_list></call></expr></argument>, <argument pos:start="61:40" pos:end="61:54"><expr pos:start="61:40" pos:end="61:54"><name pos:start="61:40" pos:end="61:54"><name pos:start="61:40" pos:end="61:43">sock</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:54">tls_creds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="71:9"><if pos:start="63:9" pos:end="71:9">if <condition pos:start="63:12" pos:end="63:19">(<expr pos:start="63:13" pos:end="63:18"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:18">creds</name></expr>)</condition> <block pos:start="63:21" pos:end="71:9">{<block_content pos:start="65:13" pos:end="69:23">

            <expr_stmt pos:start="65:13" pos:end="67:40"><expr pos:start="65:13" pos:end="67:39"><call pos:start="65:13" pos:end="67:39"><name pos:start="65:13" pos:end="65:22">error_setg</name><argument_list pos:start="65:23" pos:end="67:39">(<argument pos:start="65:24" pos:end="65:27"><expr pos:start="65:24" pos:end="65:27"><name pos:start="65:24" pos:end="65:27">errp</name></expr></argument>, <argument pos:start="65:30" pos:end="65:62"><expr pos:start="65:30" pos:end="65:62"><literal type="string" pos:start="65:30" pos:end="65:62">"No TLS credentials with id '%s'"</literal></expr></argument>,

                       <argument pos:start="67:24" pos:end="67:38"><expr pos:start="67:24" pos:end="67:38"><name pos:start="67:24" pos:end="67:38"><name pos:start="67:24" pos:end="67:27">sock</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:38">tls_creds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="69:13" pos:end="69:23">goto <name pos:start="69:18" pos:end="69:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="77:56"><expr pos:start="73:9" pos:end="77:55"><name pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:20">tls_creds</name></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <operator pos:start="73:24" pos:end="73:24">(</operator><name pos:start="73:25" pos:end="73:39">QCryptoTLSCreds</name> <operator pos:start="73:41" pos:end="73:41">*</operator><operator pos:start="73:42" pos:end="73:42">)</operator>

            <call pos:start="75:13" pos:end="77:55"><name pos:start="75:13" pos:end="75:31">object_dynamic_cast</name><argument_list pos:start="75:32" pos:end="77:55">(<argument pos:start="75:33" pos:end="75:37"><expr pos:start="75:33" pos:end="75:37"><name pos:start="75:33" pos:end="75:37">creds</name></expr></argument>,

                                <argument pos:start="77:33" pos:end="77:54"><expr pos:start="77:33" pos:end="77:54"><name pos:start="77:33" pos:end="77:54">TYPE_QCRYPTO_TLS_CREDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="87:9"><if pos:start="79:9" pos:end="87:9">if <condition pos:start="79:12" pos:end="79:26">(<expr pos:start="79:13" pos:end="79:25"><operator pos:start="79:13" pos:end="79:13">!</operator><name pos:start="79:14" pos:end="79:25"><name pos:start="79:14" pos:end="79:14">s</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:25">tls_creds</name></name></expr>)</condition> <block pos:start="79:28" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:23">

            <expr_stmt pos:start="81:13" pos:end="83:40"><expr pos:start="81:13" pos:end="83:39"><call pos:start="81:13" pos:end="83:39"><name pos:start="81:13" pos:end="81:22">error_setg</name><argument_list pos:start="81:23" pos:end="83:39">(<argument pos:start="81:24" pos:end="81:27"><expr pos:start="81:24" pos:end="81:27"><name pos:start="81:24" pos:end="81:27">errp</name></expr></argument>, <argument pos:start="81:30" pos:end="81:73"><expr pos:start="81:30" pos:end="81:73"><literal type="string" pos:start="81:30" pos:end="81:73">"Object with id '%s' is not TLS credentials"</literal></expr></argument>,

                       <argument pos:start="83:24" pos:end="83:38"><expr pos:start="83:24" pos:end="83:38"><name pos:start="83:24" pos:end="83:38"><name pos:start="83:24" pos:end="83:27">sock</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:38">tls_creds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:23">goto <name pos:start="85:18" pos:end="85:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:41"><expr pos:start="89:9" pos:end="89:40"><call pos:start="89:9" pos:end="89:40"><name pos:start="89:9" pos:end="89:18">object_ref</name><argument_list pos:start="89:19" pos:end="89:40">(<argument pos:start="89:20" pos:end="89:39"><expr pos:start="89:20" pos:end="89:39"><call pos:start="89:20" pos:end="89:39"><name pos:start="89:20" pos:end="89:25">OBJECT</name><argument_list pos:start="89:26" pos:end="89:39">(<argument pos:start="89:27" pos:end="89:38"><expr pos:start="89:27" pos:end="89:38"><name pos:start="89:27" pos:end="89:38"><name pos:start="89:27" pos:end="89:27">s</name><operator pos:start="89:28" pos:end="89:29">-&gt;</operator><name pos:start="89:30" pos:end="89:38">tls_creds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="115:9"><if pos:start="91:9" pos:end="103:9">if <condition pos:start="91:12" pos:end="91:22">(<expr pos:start="91:13" pos:end="91:21"><name pos:start="91:13" pos:end="91:21">is_listen</name></expr>)</condition> <block pos:start="91:24" pos:end="103:9">{<block_content pos:start="93:13" pos:end="101:13">

            <if_stmt pos:start="93:13" pos:end="101:13"><if pos:start="93:13" pos:end="101:13">if <condition pos:start="93:16" pos:end="93:76">(<expr pos:start="93:17" pos:end="93:75"><name pos:start="93:17" pos:end="93:38"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:28">tls_creds</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:38">endpoint</name></name> <operator pos:start="93:40" pos:end="93:41">!=</operator> <name pos:start="93:43" pos:end="93:75">QCRYPTO_TLS_CREDS_ENDPOINT_SERVER</name></expr>)</condition> <block pos:start="93:78" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:27">

                <expr_stmt pos:start="95:17" pos:end="97:75"><expr pos:start="95:17" pos:end="97:74"><call pos:start="95:17" pos:end="97:74"><name pos:start="95:17" pos:end="95:26">error_setg</name><argument_list pos:start="95:27" pos:end="97:74">(<argument pos:start="95:28" pos:end="95:31"><expr pos:start="95:28" pos:end="95:31"><name pos:start="95:28" pos:end="95:31">errp</name></expr></argument>, <argument pos:start="95:34" pos:end="95:37"><expr pos:start="95:34" pos:end="95:37"><literal type="string" pos:start="95:34" pos:end="95:37">"%s"</literal></expr></argument>,

                           <argument pos:start="97:28" pos:end="97:73"><expr pos:start="97:28" pos:end="97:73"><literal type="string" pos:start="97:28" pos:end="97:73">"Expected TLS credentials for server endpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="99:17" pos:end="99:27">goto <name pos:start="99:22" pos:end="99:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="115:9">else <block pos:start="103:16" pos:end="115:9">{<block_content pos:start="105:13" pos:end="113:13">

            <if_stmt pos:start="105:13" pos:end="113:13"><if pos:start="105:13" pos:end="113:13">if <condition pos:start="105:16" pos:end="105:76">(<expr pos:start="105:17" pos:end="105:75"><name pos:start="105:17" pos:end="105:38"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:28">tls_creds</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:38">endpoint</name></name> <operator pos:start="105:40" pos:end="105:41">!=</operator> <name pos:start="105:43" pos:end="105:75">QCRYPTO_TLS_CREDS_ENDPOINT_CLIENT</name></expr>)</condition> <block pos:start="105:78" pos:end="113:13">{<block_content pos:start="107:17" pos:end="111:27">

                <expr_stmt pos:start="107:17" pos:end="109:75"><expr pos:start="107:17" pos:end="109:74"><call pos:start="107:17" pos:end="109:74"><name pos:start="107:17" pos:end="107:26">error_setg</name><argument_list pos:start="107:27" pos:end="109:74">(<argument pos:start="107:28" pos:end="107:31"><expr pos:start="107:28" pos:end="107:31"><name pos:start="107:28" pos:end="107:31">errp</name></expr></argument>, <argument pos:start="107:34" pos:end="107:37"><expr pos:start="107:34" pos:end="107:37"><literal type="string" pos:start="107:34" pos:end="107:37">"%s"</literal></expr></argument>,

                           <argument pos:start="109:28" pos:end="109:73"><expr pos:start="109:28" pos:end="109:73"><literal type="string" pos:start="109:28" pos:end="109:73">"Expected TLS credentials for client endpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="111:17" pos:end="111:27">goto <name pos:start="111:22" pos:end="111:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:50"><expr pos:start="121:5" pos:end="121:49"><call pos:start="121:5" pos:end="121:49"><name pos:start="121:5" pos:end="121:27">qapi_copy_SocketAddress</name><argument_list pos:start="121:28" pos:end="121:49">(<argument pos:start="121:29" pos:end="121:36"><expr pos:start="121:29" pos:end="121:36"><operator pos:start="121:29" pos:end="121:29">&amp;</operator><name pos:start="121:30" pos:end="121:36"><name pos:start="121:30" pos:end="121:30">s</name><operator pos:start="121:31" pos:end="121:32">-&gt;</operator><name pos:start="121:33" pos:end="121:36">addr</name></name></expr></argument>, <argument pos:start="121:39" pos:end="121:48"><expr pos:start="121:39" pos:end="121:48"><name pos:start="121:39" pos:end="121:48"><name pos:start="121:39" pos:end="121:42">sock</name><operator pos:start="121:43" pos:end="121:44">-&gt;</operator><name pos:start="121:45" pos:end="121:48">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:20"><expr pos:start="125:5" pos:end="125:19"><name pos:start="125:5" pos:end="125:15"><name pos:start="125:5" pos:end="125:7">chr</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:15">opaque</name></name> <operator pos:start="125:17" pos:end="125:17">=</operator> <name pos:start="125:19" pos:end="125:19">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:35"><expr pos:start="127:5" pos:end="127:34"><name pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:7">chr</name><operator pos:start="127:8" pos:end="127:9">-&gt;</operator><name pos:start="127:10" pos:end="127:18">chr_write</name></name> <operator pos:start="127:20" pos:end="127:20">=</operator> <name pos:start="127:22" pos:end="127:34">tcp_chr_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:43"><expr pos:start="129:5" pos:end="129:42"><name pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:7">chr</name><operator pos:start="129:8" pos:end="129:9">-&gt;</operator><name pos:start="129:10" pos:end="129:22">chr_sync_read</name></name> <operator pos:start="129:24" pos:end="129:24">=</operator> <name pos:start="129:26" pos:end="129:42">tcp_chr_sync_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:35"><expr pos:start="131:5" pos:end="131:34"><name pos:start="131:5" pos:end="131:18"><name pos:start="131:5" pos:end="131:7">chr</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:18">chr_close</name></name> <operator pos:start="131:20" pos:end="131:20">=</operator> <name pos:start="131:22" pos:end="131:34">tcp_chr_close</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:37"><expr pos:start="133:5" pos:end="133:36"><name pos:start="133:5" pos:end="133:19"><name pos:start="133:5" pos:end="133:7">chr</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:19">get_msgfds</name></name> <operator pos:start="133:21" pos:end="133:21">=</operator> <name pos:start="133:23" pos:end="133:36">tcp_get_msgfds</name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:37"><expr pos:start="135:5" pos:end="135:36"><name pos:start="135:5" pos:end="135:19"><name pos:start="135:5" pos:end="135:7">chr</name><operator pos:start="135:8" pos:end="135:9">-&gt;</operator><name pos:start="135:10" pos:end="135:19">set_msgfds</name></name> <operator pos:start="135:21" pos:end="135:21">=</operator> <name pos:start="135:23" pos:end="135:36">tcp_set_msgfds</name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:45"><expr pos:start="137:5" pos:end="137:44"><name pos:start="137:5" pos:end="137:23"><name pos:start="137:5" pos:end="137:7">chr</name><operator pos:start="137:8" pos:end="137:9">-&gt;</operator><name pos:start="137:10" pos:end="137:23">chr_add_client</name></name> <operator pos:start="137:25" pos:end="137:25">=</operator> <name pos:start="137:27" pos:end="137:44">tcp_chr_add_client</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:43"><expr pos:start="139:5" pos:end="139:42"><name pos:start="139:5" pos:end="139:22"><name pos:start="139:5" pos:end="139:7">chr</name><operator pos:start="139:8" pos:end="139:9">-&gt;</operator><name pos:start="139:10" pos:end="139:22">chr_add_watch</name></name> <operator pos:start="139:24" pos:end="139:24">=</operator> <name pos:start="139:26" pos:end="139:42">tcp_chr_add_watch</name></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:63"><expr pos:start="141:5" pos:end="141:62"><name pos:start="141:5" pos:end="141:32"><name pos:start="141:5" pos:end="141:7">chr</name><operator pos:start="141:8" pos:end="141:9">-&gt;</operator><name pos:start="141:10" pos:end="141:32">chr_update_read_handler</name></name> <operator pos:start="141:34" pos:end="141:34">=</operator> <name pos:start="141:36" pos:end="141:62">tcp_chr_update_read_handler</name></expr>;</expr_stmt>

    <comment type="block" pos:start="143:5" pos:end="143:51">/* be isn't opened until we get a connection */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:33"><expr pos:start="145:5" pos:end="145:32"><name pos:start="145:5" pos:end="145:25"><name pos:start="145:5" pos:end="145:7">chr</name><operator pos:start="145:8" pos:end="145:9">-&gt;</operator><name pos:start="145:10" pos:end="145:25">explicit_be_open</name></name> <operator pos:start="145:27" pos:end="145:27">=</operator> <name pos:start="145:29" pos:end="145:32">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="151:69"><expr pos:start="149:5" pos:end="151:68"><name pos:start="149:5" pos:end="149:17"><name pos:start="149:5" pos:end="149:7">chr</name><operator pos:start="149:8" pos:end="149:9">-&gt;</operator><name pos:start="149:10" pos:end="149:17">filename</name></name> <operator pos:start="149:19" pos:end="149:19">=</operator> <call pos:start="149:21" pos:end="151:68"><name pos:start="149:21" pos:end="149:40">SocketAddress_to_str</name><argument_list pos:start="149:41" pos:end="151:68">(<argument pos:start="149:42" pos:end="149:56"><expr pos:start="149:42" pos:end="149:56"><literal type="string" pos:start="149:42" pos:end="149:56">"disconnected:"</literal></expr></argument>,

                                         <argument pos:start="151:42" pos:end="151:45"><expr pos:start="151:42" pos:end="151:45"><name pos:start="151:42" pos:end="151:45">addr</name></expr></argument>, <argument pos:start="151:48" pos:end="151:56"><expr pos:start="151:48" pos:end="151:56"><name pos:start="151:48" pos:end="151:56">is_listen</name></expr></argument>, <argument pos:start="151:59" pos:end="151:67"><expr pos:start="151:59" pos:end="151:67"><name pos:start="151:59" pos:end="151:67">is_telnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="155:5" pos:end="167:5"><if pos:start="155:5" pos:end="163:5">if <condition pos:start="155:8" pos:end="155:18">(<expr pos:start="155:9" pos:end="155:17"><name pos:start="155:9" pos:end="155:17">is_listen</name></expr>)</condition> <block pos:start="155:20" pos:end="163:5">{<block_content pos:start="157:9" pos:end="161:9">

        <if_stmt pos:start="157:9" pos:end="161:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:22">(<expr pos:start="157:13" pos:end="157:21"><name pos:start="157:13" pos:end="157:21">is_telnet</name></expr>)</condition> <block pos:start="157:24" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:32">

            <expr_stmt pos:start="159:13" pos:end="159:32"><expr pos:start="159:13" pos:end="159:31"><name pos:start="159:13" pos:end="159:27"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:27">do_telnetopt</name></name> <operator pos:start="159:29" pos:end="159:29">=</operator> <literal type="number" pos:start="159:31" pos:end="159:31">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="163:7" pos:end="167:5">else if <condition pos:start="163:15" pos:end="163:29">(<expr pos:start="163:16" pos:end="163:28"><name pos:start="163:16" pos:end="163:24">reconnect</name> <operator pos:start="163:26" pos:end="163:26">&gt;</operator> <literal type="number" pos:start="163:28" pos:end="163:28">0</literal></expr>)</condition> <block pos:start="163:31" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:38">

        <expr_stmt pos:start="165:9" pos:end="165:38"><expr pos:start="165:9" pos:end="165:37"><name pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:25">reconnect_time</name></name> <operator pos:start="165:27" pos:end="165:27">=</operator> <name pos:start="165:29" pos:end="165:37">reconnect</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:36"><expr pos:start="171:5" pos:end="171:35"><name pos:start="171:5" pos:end="171:8">sioc</name> <operator pos:start="171:10" pos:end="171:10">=</operator> <call pos:start="171:12" pos:end="171:35"><name pos:start="171:12" pos:end="171:33">qio_channel_socket_new</name><argument_list pos:start="171:34" pos:end="171:35">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="223:5"><if pos:start="173:5" pos:end="181:5">if <condition pos:start="173:8" pos:end="173:26">(<expr pos:start="173:9" pos:end="173:25"><name pos:start="173:9" pos:end="173:25"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:25">reconnect_time</name></name></expr>)</condition> <block pos:start="173:28" pos:end="181:5">{<block_content pos:start="175:9" pos:end="179:52">

        <expr_stmt pos:start="175:9" pos:end="179:52"><expr pos:start="175:9" pos:end="179:51"><call pos:start="175:9" pos:end="179:51"><name pos:start="175:9" pos:end="175:40">qio_channel_socket_connect_async</name><argument_list pos:start="175:41" pos:end="179:51">(<argument pos:start="175:42" pos:end="175:45"><expr pos:start="175:42" pos:end="175:45"><name pos:start="175:42" pos:end="175:45">sioc</name></expr></argument>, <argument pos:start="175:48" pos:end="175:54"><expr pos:start="175:48" pos:end="175:54"><name pos:start="175:48" pos:end="175:54"><name pos:start="175:48" pos:end="175:48">s</name><operator pos:start="175:49" pos:end="175:50">-&gt;</operator><name pos:start="175:51" pos:end="175:54">addr</name></name></expr></argument>,

                                         <argument pos:start="177:42" pos:end="177:66"><expr pos:start="177:42" pos:end="177:66"><name pos:start="177:42" pos:end="177:66">qemu_chr_socket_connected</name></expr></argument>,

                                         <argument pos:start="179:42" pos:end="179:44"><expr pos:start="179:42" pos:end="179:44"><name pos:start="179:42" pos:end="179:44">chr</name></expr></argument>, <argument pos:start="179:47" pos:end="179:50"><expr pos:start="179:47" pos:end="179:50"><name pos:start="179:47" pos:end="179:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="181:7" pos:end="211:5">else if <condition pos:start="181:15" pos:end="181:28">(<expr pos:start="181:16" pos:end="181:27"><name pos:start="181:16" pos:end="181:27"><name pos:start="181:16" pos:end="181:16">s</name><operator pos:start="181:17" pos:end="181:18">-&gt;</operator><name pos:start="181:19" pos:end="181:27">is_listen</name></name></expr>)</condition> <block pos:start="181:30" pos:end="211:5">{<block_content pos:start="183:9" pos:end="209:9">

        <if_stmt pos:start="183:9" pos:end="187:9"><if pos:start="183:9" pos:end="187:9">if <condition pos:start="183:12" pos:end="183:68">(<expr pos:start="183:13" pos:end="183:67"><call pos:start="183:13" pos:end="183:63"><name pos:start="183:13" pos:end="183:42">qio_channel_socket_listen_sync</name><argument_list pos:start="183:43" pos:end="183:63">(<argument pos:start="183:44" pos:end="183:47"><expr pos:start="183:44" pos:end="183:47"><name pos:start="183:44" pos:end="183:47">sioc</name></expr></argument>, <argument pos:start="183:50" pos:end="183:56"><expr pos:start="183:50" pos:end="183:56"><name pos:start="183:50" pos:end="183:56"><name pos:start="183:50" pos:end="183:50">s</name><operator pos:start="183:51" pos:end="183:52">-&gt;</operator><name pos:start="183:53" pos:end="183:56">addr</name></name></expr></argument>, <argument pos:start="183:59" pos:end="183:62"><expr pos:start="183:59" pos:end="183:62"><name pos:start="183:59" pos:end="183:62">errp</name></expr></argument>)</argument_list></call> <operator pos:start="183:65" pos:end="183:65">&lt;</operator> <literal type="number" pos:start="183:67" pos:end="183:67">0</literal></expr>)</condition> <block pos:start="183:70" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:23">

            <goto pos:start="185:13" pos:end="185:23">goto <name pos:start="185:18" pos:end="185:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:29"><expr pos:start="189:9" pos:end="189:28"><name pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:21">listen_ioc</name></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:28">sioc</name></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="199:9"><if pos:start="191:9" pos:end="199:9">if <condition pos:start="191:12" pos:end="191:27">(<expr pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:26">is_waitconnect</name></expr>)</condition> <block pos:start="191:29" pos:end="199:9">{<block_content pos:start="193:13" pos:end="197:69">

            <expr_stmt pos:start="193:13" pos:end="195:35"><expr pos:start="193:13" pos:end="195:34"><call pos:start="193:13" pos:end="195:34"><name pos:start="193:13" pos:end="193:19">fprintf</name><argument_list pos:start="193:20" pos:end="195:34">(<argument pos:start="193:21" pos:end="193:26"><expr pos:start="193:21" pos:end="193:26"><name pos:start="193:21" pos:end="193:26">stderr</name></expr></argument>, <argument pos:start="193:29" pos:end="193:66"><expr pos:start="193:29" pos:end="193:66"><literal type="string" pos:start="193:29" pos:end="193:66">"QEMU waiting for connection on: %s\n"</literal></expr></argument>,

                    <argument pos:start="195:21" pos:end="195:33"><expr pos:start="195:21" pos:end="195:33"><name pos:start="195:21" pos:end="195:33"><name pos:start="195:21" pos:end="195:23">chr</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:33">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:69"><expr pos:start="197:13" pos:end="197:68"><call pos:start="197:13" pos:end="197:68"><name pos:start="197:13" pos:end="197:26">tcp_chr_accept</name><argument_list pos:start="197:27" pos:end="197:68">(<argument pos:start="197:28" pos:end="197:53"><expr pos:start="197:28" pos:end="197:53"><call pos:start="197:28" pos:end="197:53"><name pos:start="197:28" pos:end="197:38">QIO_CHANNEL</name><argument_list pos:start="197:39" pos:end="197:53">(<argument pos:start="197:40" pos:end="197:52"><expr pos:start="197:40" pos:end="197:52"><name pos:start="197:40" pos:end="197:52"><name pos:start="197:40" pos:end="197:40">s</name><operator pos:start="197:41" pos:end="197:42">-&gt;</operator><name pos:start="197:43" pos:end="197:52">listen_ioc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="197:56" pos:end="197:62"><expr pos:start="197:56" pos:end="197:62"><name pos:start="197:56" pos:end="197:62">G_IO_IN</name></expr></argument>, <argument pos:start="197:65" pos:end="197:67"><expr pos:start="197:65" pos:end="197:67"><name pos:start="197:65" pos:end="197:67">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:74"><expr pos:start="201:9" pos:end="201:73"><call pos:start="201:9" pos:end="201:73"><name pos:start="201:9" pos:end="201:32">qio_channel_set_blocking</name><argument_list pos:start="201:33" pos:end="201:73">(<argument pos:start="201:34" pos:end="201:59"><expr pos:start="201:34" pos:end="201:59"><call pos:start="201:34" pos:end="201:59"><name pos:start="201:34" pos:end="201:44">QIO_CHANNEL</name><argument_list pos:start="201:45" pos:end="201:59">(<argument pos:start="201:46" pos:end="201:58"><expr pos:start="201:46" pos:end="201:58"><name pos:start="201:46" pos:end="201:58"><name pos:start="201:46" pos:end="201:46">s</name><operator pos:start="201:47" pos:end="201:48">-&gt;</operator><name pos:start="201:49" pos:end="201:58">listen_ioc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="201:62" pos:end="201:66"><expr pos:start="201:62" pos:end="201:66"><name pos:start="201:62" pos:end="201:66">false</name></expr></argument>, <argument pos:start="201:69" pos:end="201:72"><expr pos:start="201:69" pos:end="201:72"><name pos:start="201:69" pos:end="201:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="203:9" pos:end="209:9"><if pos:start="203:9" pos:end="209:9">if <condition pos:start="203:12" pos:end="203:20">(<expr pos:start="203:13" pos:end="203:19"><operator pos:start="203:13" pos:end="203:13">!</operator><name pos:start="203:14" pos:end="203:19"><name pos:start="203:14" pos:end="203:14">s</name><operator pos:start="203:15" pos:end="203:16">-&gt;</operator><name pos:start="203:17" pos:end="203:19">ioc</name></name></expr>)</condition> <block pos:start="203:22" pos:end="209:9">{<block_content pos:start="205:13" pos:end="207:80">

            <expr_stmt pos:start="205:13" pos:end="207:80"><expr pos:start="205:13" pos:end="207:79"><name pos:start="205:13" pos:end="205:25"><name pos:start="205:13" pos:end="205:13">s</name><operator pos:start="205:14" pos:end="205:15">-&gt;</operator><name pos:start="205:16" pos:end="205:25">listen_tag</name></name> <operator pos:start="205:27" pos:end="205:27">=</operator> <call pos:start="205:29" pos:end="207:79"><name pos:start="205:29" pos:end="205:49">qio_channel_add_watch</name><argument_list pos:start="205:50" pos:end="207:79">(

                <argument pos:start="207:17" pos:end="207:42"><expr pos:start="207:17" pos:end="207:42"><call pos:start="207:17" pos:end="207:42"><name pos:start="207:17" pos:end="207:27">QIO_CHANNEL</name><argument_list pos:start="207:28" pos:end="207:42">(<argument pos:start="207:29" pos:end="207:41"><expr pos:start="207:29" pos:end="207:41"><name pos:start="207:29" pos:end="207:41"><name pos:start="207:29" pos:end="207:29">s</name><operator pos:start="207:30" pos:end="207:31">-&gt;</operator><name pos:start="207:32" pos:end="207:41">listen_ioc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="207:45" pos:end="207:51"><expr pos:start="207:45" pos:end="207:51"><name pos:start="207:45" pos:end="207:51">G_IO_IN</name></expr></argument>, <argument pos:start="207:54" pos:end="207:67"><expr pos:start="207:54" pos:end="207:67"><name pos:start="207:54" pos:end="207:67">tcp_chr_accept</name></expr></argument>, <argument pos:start="207:70" pos:end="207:72"><expr pos:start="207:70" pos:end="207:72"><name pos:start="207:70" pos:end="207:72">chr</name></expr></argument>, <argument pos:start="207:75" pos:end="207:78"><expr pos:start="207:75" pos:end="207:78"><name pos:start="207:75" pos:end="207:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="211:7" pos:end="223:5">else <block pos:start="211:12" pos:end="223:5">{<block_content pos:start="213:9" pos:end="221:35">

        <if_stmt pos:start="213:9" pos:end="217:9"><if pos:start="213:9" pos:end="217:9">if <condition pos:start="213:12" pos:end="213:69">(<expr pos:start="213:13" pos:end="213:68"><call pos:start="213:13" pos:end="213:64"><name pos:start="213:13" pos:end="213:43">qio_channel_socket_connect_sync</name><argument_list pos:start="213:44" pos:end="213:64">(<argument pos:start="213:45" pos:end="213:48"><expr pos:start="213:45" pos:end="213:48"><name pos:start="213:45" pos:end="213:48">sioc</name></expr></argument>, <argument pos:start="213:51" pos:end="213:57"><expr pos:start="213:51" pos:end="213:57"><name pos:start="213:51" pos:end="213:57"><name pos:start="213:51" pos:end="213:51">s</name><operator pos:start="213:52" pos:end="213:53">-&gt;</operator><name pos:start="213:54" pos:end="213:57">addr</name></name></expr></argument>, <argument pos:start="213:60" pos:end="213:63"><expr pos:start="213:60" pos:end="213:63"><name pos:start="213:60" pos:end="213:63">errp</name></expr></argument>)</argument_list></call> <operator pos:start="213:66" pos:end="213:66">&lt;</operator> <literal type="number" pos:start="213:68" pos:end="213:68">0</literal></expr>)</condition> <block pos:start="213:71" pos:end="217:9">{<block_content pos:start="215:13" pos:end="215:23">

            <goto pos:start="215:13" pos:end="215:23">goto <name pos:start="215:18" pos:end="215:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:38"><expr pos:start="219:9" pos:end="219:37"><call pos:start="219:9" pos:end="219:37"><name pos:start="219:9" pos:end="219:26">tcp_chr_new_client</name><argument_list pos:start="219:27" pos:end="219:37">(<argument pos:start="219:28" pos:end="219:30"><expr pos:start="219:28" pos:end="219:30"><name pos:start="219:28" pos:end="219:30">chr</name></expr></argument>, <argument pos:start="219:33" pos:end="219:36"><expr pos:start="219:33" pos:end="219:36"><name pos:start="219:33" pos:end="219:36">sioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:35"><expr pos:start="221:9" pos:end="221:34"><call pos:start="221:9" pos:end="221:34"><name pos:start="221:9" pos:end="221:20">object_unref</name><argument_list pos:start="221:21" pos:end="221:34">(<argument pos:start="221:22" pos:end="221:33"><expr pos:start="221:22" pos:end="221:33"><call pos:start="221:22" pos:end="221:33"><name pos:start="221:22" pos:end="221:27">OBJECT</name><argument_list pos:start="221:28" pos:end="221:33">(<argument pos:start="221:29" pos:end="221:32"><expr pos:start="221:29" pos:end="221:32"><name pos:start="221:29" pos:end="221:32">sioc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="227:5" pos:end="227:15">return <expr pos:start="227:12" pos:end="227:14"><name pos:start="227:12" pos:end="227:14">chr</name></expr>;</return>



 <label pos:start="231:2" pos:end="231:7"><name pos:start="231:2" pos:end="231:6">error</name>:</label>

    <if_stmt pos:start="233:5" pos:end="237:5"><if pos:start="233:5" pos:end="237:5">if <condition pos:start="233:8" pos:end="233:13">(<expr pos:start="233:9" pos:end="233:12"><name pos:start="233:9" pos:end="233:12">sioc</name></expr>)</condition> <block pos:start="233:15" pos:end="237:5">{<block_content pos:start="235:9" pos:end="235:35">

        <expr_stmt pos:start="235:9" pos:end="235:35"><expr pos:start="235:9" pos:end="235:34"><call pos:start="235:9" pos:end="235:34"><name pos:start="235:9" pos:end="235:20">object_unref</name><argument_list pos:start="235:21" pos:end="235:34">(<argument pos:start="235:22" pos:end="235:33"><expr pos:start="235:22" pos:end="235:33"><call pos:start="235:22" pos:end="235:33"><name pos:start="235:22" pos:end="235:27">OBJECT</name><argument_list pos:start="235:28" pos:end="235:33">(<argument pos:start="235:29" pos:end="235:32"><expr pos:start="235:29" pos:end="235:32"><name pos:start="235:29" pos:end="235:32">sioc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="239:5" pos:end="243:5"><if pos:start="239:5" pos:end="243:5">if <condition pos:start="239:8" pos:end="239:21">(<expr pos:start="239:9" pos:end="239:20"><name pos:start="239:9" pos:end="239:20"><name pos:start="239:9" pos:end="239:9">s</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:20">tls_creds</name></name></expr>)</condition> <block pos:start="239:23" pos:end="243:5">{<block_content pos:start="241:9" pos:end="241:43">

        <expr_stmt pos:start="241:9" pos:end="241:43"><expr pos:start="241:9" pos:end="241:42"><call pos:start="241:9" pos:end="241:42"><name pos:start="241:9" pos:end="241:20">object_unref</name><argument_list pos:start="241:21" pos:end="241:42">(<argument pos:start="241:22" pos:end="241:41"><expr pos:start="241:22" pos:end="241:41"><call pos:start="241:22" pos:end="241:41"><name pos:start="241:22" pos:end="241:27">OBJECT</name><argument_list pos:start="241:28" pos:end="241:41">(<argument pos:start="241:29" pos:end="241:40"><expr pos:start="241:29" pos:end="241:40"><name pos:start="241:29" pos:end="241:40"><name pos:start="241:29" pos:end="241:29">s</name><operator pos:start="241:30" pos:end="241:31">-&gt;</operator><name pos:start="241:32" pos:end="241:40">tls_creds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:14"><expr pos:start="245:5" pos:end="245:13"><call pos:start="245:5" pos:end="245:13"><name pos:start="245:5" pos:end="245:10">g_free</name><argument_list pos:start="245:11" pos:end="245:13">(<argument pos:start="245:12" pos:end="245:12"><expr pos:start="245:12" pos:end="245:12"><name pos:start="245:12" pos:end="245:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:30"><expr pos:start="247:5" pos:end="247:29"><call pos:start="247:5" pos:end="247:29"><name pos:start="247:5" pos:end="247:24">qemu_chr_free_common</name><argument_list pos:start="247:25" pos:end="247:29">(<argument pos:start="247:26" pos:end="247:28"><expr pos:start="247:26" pos:end="247:28"><name pos:start="247:26" pos:end="247:28">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="249:5" pos:end="249:16">return <expr pos:start="249:12" pos:end="249:15"><name pos:start="249:12" pos:end="249:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
