<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1445.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">ff_get_wav_header</name><parameter_list pos:start="1:22" pos:end="3:54">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:37">AVFormatContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:57"><decl pos:start="1:43" pos:end="1:57"><type pos:start="1:43" pos:end="1:57"><name pos:start="1:43" pos:end="1:53">AVIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:43"><decl pos:start="3:23" pos:end="3:43"><type pos:start="3:23" pos:end="3:43"><name pos:start="3:23" pos:end="3:36">AVCodecContext</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">codec</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:53"><decl pos:start="3:46" pos:end="3:53"><type pos:start="3:46" pos:end="3:53"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:53">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:13">

    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">id</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:35"><if pos:start="11:5" pos:end="13:35">if <condition pos:start="11:8" pos:end="11:18">(<expr pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:12">size</name> <operator pos:start="11:14" pos:end="11:14">&lt;</operator> <literal type="number" pos:start="11:16" pos:end="11:17">14</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:35"><block_content pos:start="13:9" pos:end="13:35">

        <return pos:start="13:9" pos:end="13:35">return <expr pos:start="13:16" pos:end="13:34"><name pos:start="13:16" pos:end="13:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:39"><expr pos:start="17:5" pos:end="17:38"><name pos:start="17:5" pos:end="17:6">id</name>                 <operator pos:start="17:24" pos:end="17:24">=</operator> <call pos:start="17:26" pos:end="17:38"><name pos:start="17:26" pos:end="17:34">avio_rl16</name><argument_list pos:start="17:35" pos:end="17:38">(<argument pos:start="17:36" pos:end="17:37"><expr pos:start="17:36" pos:end="17:37"><name pos:start="17:36" pos:end="17:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:44"><expr pos:start="19:5" pos:end="19:43"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:9">codec</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:21">codec_type</name></name>  <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:43">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:9">codec</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:19">channels</name></name>    <operator pos:start="21:24" pos:end="21:24">=</operator> <call pos:start="21:26" pos:end="21:38"><name pos:start="21:26" pos:end="21:34">avio_rl16</name><argument_list pos:start="21:35" pos:end="21:38">(<argument pos:start="21:36" pos:end="21:37"><expr pos:start="21:36" pos:end="21:37"><name pos:start="21:36" pos:end="21:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:9">codec</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:22">sample_rate</name></name> <operator pos:start="23:24" pos:end="23:24">=</operator> <call pos:start="23:26" pos:end="23:38"><name pos:start="23:26" pos:end="23:34">avio_rl32</name><argument_list pos:start="23:35" pos:end="23:38">(<argument pos:start="23:36" pos:end="23:37"><expr pos:start="23:36" pos:end="23:37"><name pos:start="23:36" pos:end="23:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:43"><expr pos:start="25:5" pos:end="25:42"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:9">codec</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:19">bit_rate</name></name>    <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="25:38"><name pos:start="25:26" pos:end="25:34">avio_rl32</name><argument_list pos:start="25:35" pos:end="25:38">(<argument pos:start="25:36" pos:end="25:37"><expr pos:start="25:36" pos:end="25:37"><name pos:start="25:36" pos:end="25:37">pb</name></expr></argument>)</argument_list></call> <operator pos:start="25:40" pos:end="25:40">*</operator> <literal type="number" pos:start="25:42" pos:end="25:42">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:9">codec</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:22">block_align</name></name> <operator pos:start="27:24" pos:end="27:24">=</operator> <call pos:start="27:26" pos:end="27:38"><name pos:start="27:26" pos:end="27:34">avio_rl16</name><argument_list pos:start="27:35" pos:end="27:38">(<argument pos:start="27:36" pos:end="27:37"><expr pos:start="27:36" pos:end="27:37"><name pos:start="27:36" pos:end="27:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:53"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:19">(<expr pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:12">size</name> <operator pos:start="29:14" pos:end="29:15">==</operator> <literal type="number" pos:start="29:17" pos:end="29:18">14</literal></expr>)</condition> <block pos:start="29:21" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:41">  <comment type="block" pos:start="29:24" pos:end="29:72">/* We're dealing with plain vanilla WAVEFORMAT */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:41"><expr pos:start="31:9" pos:end="31:40"><name pos:start="31:9" pos:end="31:36"><name pos:start="31:9" pos:end="31:13">codec</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:36">bits_per_coded_sample</name></name> <operator pos:start="31:38" pos:end="31:38">=</operator> <literal type="number" pos:start="31:40" pos:end="31:40">8</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="35:53">else<block type="pseudo" pos:start="35:9" pos:end="35:53"><block_content pos:start="35:9" pos:end="35:53">

        <expr_stmt pos:start="35:9" pos:end="35:53"><expr pos:start="35:9" pos:end="35:52"><name pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:13">codec</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:36">bits_per_coded_sample</name></name> <operator pos:start="35:38" pos:end="35:38">=</operator> <call pos:start="35:40" pos:end="35:52"><name pos:start="35:40" pos:end="35:48">avio_rl16</name><argument_list pos:start="35:49" pos:end="35:52">(<argument pos:start="35:50" pos:end="35:51"><expr pos:start="35:50" pos:end="35:51"><name pos:start="35:50" pos:end="35:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:10">id</name> <operator pos:start="37:12" pos:end="37:13">==</operator> <literal type="number" pos:start="37:15" pos:end="37:20">0xFFFE</literal></expr>)</condition> <block pos:start="37:23" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:29">

        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:13">codec</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:24">codec_tag</name></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <literal type="number" pos:start="39:28" pos:end="39:28">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="49:5">else <block pos:start="41:12" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:77">

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:13">codec</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:24">codec_tag</name></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:29">id</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="47:77"><expr pos:start="45:9" pos:end="47:76"><name pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:13">codec</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:23">codec_id</name></name>  <operator pos:start="45:26" pos:end="45:26">=</operator> <call pos:start="45:28" pos:end="47:76"><name pos:start="45:28" pos:end="45:46">ff_wav_codec_get_id</name><argument_list pos:start="45:47" pos:end="47:76">(<argument pos:start="45:48" pos:end="45:49"><expr pos:start="45:48" pos:end="45:49"><name pos:start="45:48" pos:end="45:49">id</name></expr></argument>,

                                               <argument pos:start="47:48" pos:end="47:75"><expr pos:start="47:48" pos:end="47:75"><name pos:start="47:48" pos:end="47:75"><name pos:start="47:48" pos:end="47:52">codec</name><operator pos:start="47:53" pos:end="47:54">-&gt;</operator><name pos:start="47:55" pos:end="47:75">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="51:5" pos:end="97:5"><if pos:start="51:5" pos:end="97:5">if <condition pos:start="51:8" pos:end="51:19">(<expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:12">size</name> <operator pos:start="51:14" pos:end="51:15">&gt;=</operator> <literal type="number" pos:start="51:17" pos:end="51:18">18</literal></expr>)</condition> <block pos:start="51:21" pos:end="97:5">{<block_content pos:start="53:9" pos:end="95:32">  <comment type="block" pos:start="51:24" pos:end="51:70">/* We're obviously dealing with WAVEFORMATEX */</comment>

        <decl_stmt pos:start="53:9" pos:end="53:35"><decl pos:start="53:9" pos:end="53:34"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:18">cbSize</name> <init pos:start="53:20" pos:end="53:34">= <expr pos:start="53:22" pos:end="53:34"><call pos:start="53:22" pos:end="53:34"><name pos:start="53:22" pos:end="53:30">avio_rl16</name><argument_list pos:start="53:31" pos:end="53:34">(<argument pos:start="53:32" pos:end="53:33"><expr pos:start="53:32" pos:end="53:33"><name pos:start="53:32" pos:end="53:33">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="53:37" pos:end="53:48">/* cbSize */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:20"><expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:12">size</name>  <operator pos:start="55:15" pos:end="55:16">-=</operator> <literal type="number" pos:start="55:18" pos:end="55:19">18</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:14">cbSize</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:36"><name pos:start="57:18" pos:end="57:22">FFMIN</name><argument_list pos:start="57:23" pos:end="57:36">(<argument pos:start="57:24" pos:end="57:27"><expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:27">size</name></expr></argument>, <argument pos:start="57:30" pos:end="57:35"><expr pos:start="57:30" pos:end="57:35"><name pos:start="57:30" pos:end="57:35">cbSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:41">(<expr pos:start="59:13" pos:end="59:40"><name pos:start="59:13" pos:end="59:18">cbSize</name> <operator pos:start="59:20" pos:end="59:21">&gt;=</operator> <literal type="number" pos:start="59:23" pos:end="59:24">22</literal> <operator pos:start="59:26" pos:end="59:27">&amp;&amp;</operator> <name pos:start="59:29" pos:end="59:30">id</name> <operator pos:start="59:32" pos:end="59:33">==</operator> <literal type="number" pos:start="59:35" pos:end="59:40">0xfffe</literal></expr>)</condition> <block pos:start="59:43" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:25"> <comment type="block" pos:start="59:45" pos:end="59:70">/* WAVEFORMATEXTENSIBLE */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:42"><expr pos:start="61:13" pos:end="61:41"><call pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:30">parse_waveformatex</name><argument_list pos:start="61:31" pos:end="61:41">(<argument pos:start="61:32" pos:end="61:33"><expr pos:start="61:32" pos:end="61:33"><name pos:start="61:32" pos:end="61:33">pb</name></expr></argument>, <argument pos:start="61:36" pos:end="61:40"><expr pos:start="61:36" pos:end="61:40"><name pos:start="61:36" pos:end="61:40">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:25"><expr pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:18">cbSize</name> <operator pos:start="63:20" pos:end="63:21">-=</operator> <literal type="number" pos:start="63:23" pos:end="63:24">22</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:25"><expr pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:16">size</name>   <operator pos:start="65:20" pos:end="65:21">-=</operator> <literal type="number" pos:start="65:23" pos:end="65:24">22</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:13">codec</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:29">extradata_size</name></name> <operator pos:start="69:31" pos:end="69:31">=</operator> <name pos:start="69:33" pos:end="69:38">cbSize</name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="87:9"><if pos:start="71:9" pos:end="87:9">if <condition pos:start="71:12" pos:end="71:23">(<expr pos:start="71:13" pos:end="71:22"><name pos:start="71:13" pos:end="71:18">cbSize</name> <operator pos:start="71:20" pos:end="71:20">&gt;</operator> <literal type="number" pos:start="71:22" pos:end="71:22">0</literal></expr>)</condition> <block pos:start="71:25" pos:end="87:9">{<block_content pos:start="73:13" pos:end="85:27">

            <expr_stmt pos:start="73:13" pos:end="73:38"><expr pos:start="73:13" pos:end="73:37"><call pos:start="73:13" pos:end="73:37"><name pos:start="73:13" pos:end="73:19">av_free</name><argument_list pos:start="73:20" pos:end="73:37">(<argument pos:start="73:21" pos:end="73:36"><expr pos:start="73:21" pos:end="73:36"><name pos:start="73:21" pos:end="73:36"><name pos:start="73:21" pos:end="73:25">codec</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:36">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="77:72"><expr pos:start="75:13" pos:end="77:71"><name pos:start="75:13" pos:end="75:28"><name pos:start="75:13" pos:end="75:17">codec</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:28">extradata</name></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <call pos:start="75:32" pos:end="77:71"><name pos:start="75:32" pos:end="75:41">av_mallocz</name><argument_list pos:start="75:42" pos:end="77:71">(<argument pos:start="75:43" pos:end="77:70"><expr pos:start="75:43" pos:end="77:70"><name pos:start="75:43" pos:end="75:63"><name pos:start="75:43" pos:end="75:47">codec</name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:63">extradata_size</name></name> <operator pos:start="75:65" pos:end="75:65">+</operator>

                                          <name pos:start="77:43" pos:end="77:70">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="81:39"><if pos:start="79:13" pos:end="81:39">if <condition pos:start="79:16" pos:end="79:34">(<expr pos:start="79:17" pos:end="79:33"><operator pos:start="79:17" pos:end="79:17">!</operator><name pos:start="79:18" pos:end="79:33"><name pos:start="79:18" pos:end="79:22">codec</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:33">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="81:39"><block_content pos:start="81:17" pos:end="81:39">

                <return pos:start="81:17" pos:end="81:39">return <expr pos:start="81:24" pos:end="81:38"><call pos:start="81:24" pos:end="81:38"><name pos:start="81:24" pos:end="81:30">AVERROR</name><argument_list pos:start="81:31" pos:end="81:38">(<argument pos:start="81:32" pos:end="81:37"><expr pos:start="81:32" pos:end="81:37"><name pos:start="81:32" pos:end="81:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:67"><expr pos:start="83:13" pos:end="83:66"><call pos:start="83:13" pos:end="83:66"><name pos:start="83:13" pos:end="83:21">avio_read</name><argument_list pos:start="83:22" pos:end="83:66">(<argument pos:start="83:23" pos:end="83:24"><expr pos:start="83:23" pos:end="83:24"><name pos:start="83:23" pos:end="83:24">pb</name></expr></argument>, <argument pos:start="83:27" pos:end="83:42"><expr pos:start="83:27" pos:end="83:42"><name pos:start="83:27" pos:end="83:42"><name pos:start="83:27" pos:end="83:31">codec</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:42">extradata</name></name></expr></argument>, <argument pos:start="83:45" pos:end="83:65"><expr pos:start="83:45" pos:end="83:65"><name pos:start="83:45" pos:end="83:65"><name pos:start="83:45" pos:end="83:49">codec</name><operator pos:start="83:50" pos:end="83:51">-&gt;</operator><name pos:start="83:52" pos:end="83:65">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:16">size</name> <operator pos:start="85:18" pos:end="85:19">-=</operator> <name pos:start="85:21" pos:end="85:26">cbSize</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="91:9" pos:end="91:72">/* It is possible for the chunk to contain garbage at the end */</comment>

        <if_stmt pos:start="93:9" pos:end="95:32"><if pos:start="93:9" pos:end="95:32">if <condition pos:start="93:12" pos:end="93:21">(<expr pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:16">size</name> <operator pos:start="93:18" pos:end="93:18">&gt;</operator> <literal type="number" pos:start="93:20" pos:end="93:20">0</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:32"><block_content pos:start="95:13" pos:end="95:32">

            <expr_stmt pos:start="95:13" pos:end="95:32"><expr pos:start="95:13" pos:end="95:31"><call pos:start="95:13" pos:end="95:31"><name pos:start="95:13" pos:end="95:21">avio_skip</name><argument_list pos:start="95:22" pos:end="95:31">(<argument pos:start="95:23" pos:end="95:24"><expr pos:start="95:23" pos:end="95:24"><name pos:start="95:23" pos:end="95:24">pb</name></expr></argument>, <argument pos:start="95:27" pos:end="95:30"><expr pos:start="95:27" pos:end="95:30"><name pos:start="95:27" pos:end="95:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="99:5" pos:end="107:5"><if pos:start="99:5" pos:end="107:5">if <condition pos:start="99:8" pos:end="99:32">(<expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:13">codec</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:26">sample_rate</name></name> <operator pos:start="99:28" pos:end="99:29">&lt;=</operator> <literal type="number" pos:start="99:31" pos:end="99:31">0</literal></expr>)</condition> <block pos:start="99:34" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:35">

        <expr_stmt pos:start="101:9" pos:end="103:64"><expr pos:start="101:9" pos:end="103:63"><call pos:start="101:9" pos:end="103:63"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="103:63">(<argument pos:start="101:16" pos:end="101:16"><expr pos:start="101:16" pos:end="101:16"><name pos:start="101:16" pos:end="101:16">s</name></expr></argument>, <argument pos:start="101:19" pos:end="101:30"><expr pos:start="101:19" pos:end="101:30"><name pos:start="101:19" pos:end="101:30">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="103:16" pos:end="103:42"><expr pos:start="103:16" pos:end="103:42"><literal type="string" pos:start="103:16" pos:end="103:42">"Invalid sample rate: %d\n"</literal></expr></argument>, <argument pos:start="103:45" pos:end="103:62"><expr pos:start="103:45" pos:end="103:62"><name pos:start="103:45" pos:end="103:62"><name pos:start="103:45" pos:end="103:49">codec</name><operator pos:start="103:50" pos:end="103:51">-&gt;</operator><name pos:start="103:52" pos:end="103:62">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:35">return <expr pos:start="105:16" pos:end="105:34"><name pos:start="105:16" pos:end="105:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:48">(<expr pos:start="109:9" pos:end="109:47"><name pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:13">codec</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:23">codec_id</name></name> <operator pos:start="109:25" pos:end="109:26">==</operator> <name pos:start="109:28" pos:end="109:47">AV_CODEC_ID_AAC_LATM</name></expr>)</condition> <block pos:start="109:50" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:31">

        <comment type="block" pos:start="111:9" pos:end="113:24">/* Channels and sample_rate values are those prior to applying SBR

         * and/or PS. */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:31"><expr pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:13">codec</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:23">channels</name></name>    <operator pos:start="115:28" pos:end="115:28">=</operator> <literal type="number" pos:start="115:30" pos:end="115:30">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:31"><expr pos:start="117:9" pos:end="117:30"><name pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:13">codec</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:26">sample_rate</name></name> <operator pos:start="117:28" pos:end="117:28">=</operator> <literal type="number" pos:start="117:30" pos:end="117:30">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="121:5" pos:end="121:50">/* override bits_per_coded_sample for G.726 */</comment>

    <if_stmt pos:start="123:5" pos:end="125:76"><if pos:start="123:5" pos:end="125:76">if <condition pos:start="123:8" pos:end="123:50">(<expr pos:start="123:9" pos:end="123:49"><name pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:13">codec</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:23">codec_id</name></name> <operator pos:start="123:25" pos:end="123:26">==</operator> <name pos:start="123:28" pos:end="123:49">AV_CODEC_ID_ADPCM_G726</name></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:76"><block_content pos:start="125:9" pos:end="125:76">

        <expr_stmt pos:start="125:9" pos:end="125:76"><expr pos:start="125:9" pos:end="125:75"><name pos:start="125:9" pos:end="125:36"><name pos:start="125:9" pos:end="125:13">codec</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:36">bits_per_coded_sample</name></name> <operator pos:start="125:38" pos:end="125:38">=</operator> <name pos:start="125:40" pos:end="125:54"><name pos:start="125:40" pos:end="125:44">codec</name><operator pos:start="125:45" pos:end="125:46">-&gt;</operator><name pos:start="125:47" pos:end="125:54">bit_rate</name></name> <operator pos:start="125:56" pos:end="125:56">/</operator> <name pos:start="125:58" pos:end="125:75"><name pos:start="125:58" pos:end="125:62">codec</name><operator pos:start="125:63" pos:end="125:64">-&gt;</operator><name pos:start="125:65" pos:end="125:75">sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
