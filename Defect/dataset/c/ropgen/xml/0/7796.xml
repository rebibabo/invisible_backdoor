<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7796.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">qemu_notify_event</name><parameter_list pos:start="1:23" pos:end="1:28">(<parameter pos:start="1:24" pos:end="1:27"><decl pos:start="1:24" pos:end="1:27"><type pos:start="1:24" pos:end="1:27"><name pos:start="1:24" pos:end="1:27">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="7:5" pos:end="37:5">

    <comment type="block" pos:start="5:5" pos:end="5:55">/* Write 8 bytes to be compatible with eventfd.  */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:25"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:25">uint64_t</name></type> <name pos:start="7:27" pos:end="7:29">val</name> <init pos:start="7:31" pos:end="7:33">= <expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:20">io_thread_fd</name> <operator pos:start="13:22" pos:end="13:23">==</operator> <operator pos:start="13:25" pos:end="13:25">-</operator><literal type="number" pos:start="13:26" pos:end="13:26">1</literal></expr>)</condition> <block pos:start="13:29" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <do pos:start="19:5" pos:end="23:40">do <block pos:start="19:8" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:53">

        <expr_stmt pos:start="21:9" pos:end="21:53"><expr pos:start="21:9" pos:end="21:52"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:52"><name pos:start="21:15" pos:end="21:19">write</name><argument_list pos:start="21:20" pos:end="21:52">(<argument pos:start="21:21" pos:end="21:32"><expr pos:start="21:21" pos:end="21:32"><name pos:start="21:21" pos:end="21:32">io_thread_fd</name></expr></argument>, <argument pos:start="21:35" pos:end="21:38"><expr pos:start="21:35" pos:end="21:38"><operator pos:start="21:35" pos:end="21:35">&amp;</operator><name pos:start="21:36" pos:end="21:38">val</name></expr></argument>, <argument pos:start="21:41" pos:end="21:51"><expr pos:start="21:41" pos:end="21:51"><sizeof pos:start="21:41" pos:end="21:51">sizeof<argument_list pos:start="21:47" pos:end="21:51">(<argument pos:start="21:48" pos:end="21:50"><expr pos:start="21:48" pos:end="21:50"><name pos:start="21:48" pos:end="21:50">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="23:13" pos:end="23:39">(<expr pos:start="23:14" pos:end="23:38"><name pos:start="23:14" pos:end="23:16">ret</name> <operator pos:start="23:18" pos:end="23:18">&lt;</operator> <literal type="number" pos:start="23:20" pos:end="23:20">0</literal> <operator pos:start="23:22" pos:end="23:23">&amp;&amp;</operator> <name pos:start="23:25" pos:end="23:29">errno</name> <operator pos:start="23:31" pos:end="23:32">==</operator> <name pos:start="23:34" pos:end="23:38">EINTR</name></expr>)</condition>;</do>



    <comment type="block" pos:start="27:5" pos:end="27:50">/* EAGAIN is fine, a read must be pending.  */</comment>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:35">(<expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal> <operator pos:start="29:17" pos:end="29:18">&amp;&amp;</operator> <name pos:start="29:20" pos:end="29:24">errno</name> <operator pos:start="29:26" pos:end="29:27">!=</operator> <name pos:start="29:29" pos:end="29:34">EAGAIN</name></expr>)</condition> <block pos:start="29:37" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:16">

        <expr_stmt pos:start="31:9" pos:end="33:33"><expr pos:start="31:9" pos:end="33:32"><call pos:start="31:9" pos:end="33:32"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="33:32">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:65"><expr pos:start="31:25" pos:end="31:65"><literal type="string" pos:start="31:25" pos:end="31:65">"qemu_notify_event: write() failed: %s\n"</literal></expr></argument>,

                <argument pos:start="33:17" pos:end="33:31"><expr pos:start="33:17" pos:end="33:31"><call pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:24">strerror</name><argument_list pos:start="33:25" pos:end="33:31">(<argument pos:start="33:26" pos:end="33:30"><expr pos:start="33:26" pos:end="33:30"><name pos:start="33:26" pos:end="33:30">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><call pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:12">exit</name><argument_list pos:start="35:13" pos:end="35:15">(<argument pos:start="35:14" pos:end="35:14"><expr pos:start="35:14" pos:end="35:14"><literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
