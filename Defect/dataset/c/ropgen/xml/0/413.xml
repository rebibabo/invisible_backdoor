<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/413.c" pos:tabs="8"><function pos:start="1:1" pos:end="715:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">DriveInfo</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:20">drive_new</name><parameter_list pos:start="1:21" pos:end="1:79">(<parameter pos:start="1:22" pos:end="1:39"><decl pos:start="1:22" pos:end="1:39"><type pos:start="1:22" pos:end="1:39"><name pos:start="1:22" pos:end="1:29">QemuOpts</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:39">all_opts</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:78"><decl pos:start="1:42" pos:end="1:78"><type pos:start="1:42" pos:end="1:78"><name pos:start="1:42" pos:end="1:59">BlockInterfaceType</name></type> <name pos:start="1:61" pos:end="1:78">block_default_type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="715:1">{<block_content pos:start="5:5" pos:end="713:17">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:21">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BlockBackend</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">DriveInfo</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:20">dinfo</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">QDict</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:18">bs_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:25">legacy_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18">DriveMediaType</name></type> <name pos:start="15:20" pos:end="15:24">media</name> <init pos:start="15:26" pos:end="15:37">= <expr pos:start="15:28" pos:end="15:37"><name pos:start="15:28" pos:end="15:37">MEDIA_DISK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:22">BlockInterfaceType</name></type> <name pos:start="17:24" pos:end="17:27">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">cyls</name></decl>, <decl pos:start="19:15" pos:end="19:19"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:15" pos:end="19:19">heads</name></decl>, <decl pos:start="19:22" pos:end="19:25"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:22" pos:end="19:25">secs</name></decl>, <decl pos:start="19:28" pos:end="19:38"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:28" pos:end="19:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:41"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:16">max_devs</name></decl>, <decl pos:start="21:19" pos:end="21:24"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:19" pos:end="21:24">bus_id</name></decl>, <decl pos:start="21:27" pos:end="21:33"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:27" pos:end="21:33">unit_id</name></decl>, <decl pos:start="21:36" pos:end="21:40"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:36" pos:end="21:40">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:23">devaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:22">werror</name></decl>, <decl pos:start="25:25" pos:end="25:31"><type ref="prev" pos:start="25:5" pos:end="25:16"><modifier pos:start="25:25" pos:end="25:25">*</modifier></type><name pos:start="25:26" pos:end="25:31">rerror</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:18">read_only</name> <init pos:start="27:20" pos:end="27:26">= <expr pos:start="27:22" pos:end="27:26"><name pos:start="27:22" pos:end="27:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:22"><decl pos:start="29:5" pos:end="29:21"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">bool</name></type> <name pos:start="29:10" pos:end="29:21">copy_on_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:23"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:16"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:14">char</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:22">serial</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:25"><decl pos:start="33:5" pos:end="33:24"><type pos:start="33:5" pos:end="33:16"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:14">char</name> <modifier pos:start="33:16" pos:end="33:16">*</modifier></type><name pos:start="33:17" pos:end="33:24">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:28"><decl pos:start="35:5" pos:end="35:27"><type pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:9">Error</name> <modifier pos:start="35:11" pos:end="35:11">*</modifier></type><name pos:start="35:12" pos:end="35:20">local_err</name> <init pos:start="35:22" pos:end="35:27">= <expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:10"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="43:6"><decl pos:start="39:5" pos:end="43:5"><type pos:start="39:5" pos:end="39:16"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:14">char</name> <modifier pos:start="39:16" pos:end="39:16">*</modifier></type><name pos:start="39:17" pos:end="39:28"><name pos:start="39:17" pos:end="39:26">deprecated</name><index pos:start="39:27" pos:end="39:28">[]</index></name> <init pos:start="39:30" pos:end="43:5">= <expr pos:start="39:32" pos:end="43:5"><block pos:start="39:32" pos:end="43:5">{

        <expr pos:start="41:9" pos:end="41:16"><literal type="string" pos:start="41:9" pos:end="41:16">"serial"</literal></expr>, <expr pos:start="41:19" pos:end="41:25"><literal type="string" pos:start="41:19" pos:end="41:25">"trans"</literal></expr>, <expr pos:start="41:28" pos:end="41:33"><literal type="string" pos:start="41:28" pos:end="41:33">"secs"</literal></expr>, <expr pos:start="41:36" pos:end="41:42"><literal type="string" pos:start="41:36" pos:end="41:42">"heads"</literal></expr>, <expr pos:start="41:45" pos:end="41:50"><literal type="string" pos:start="41:45" pos:end="41:50">"cyls"</literal></expr>, <expr pos:start="41:53" pos:end="41:58"><literal type="string" pos:start="41:53" pos:end="41:58">"addr"</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:58">/* Change legacy command line options into QMP ones */</comment>

    <struct pos:start="49:5" pos:end="99:6"><specifier pos:start="49:5" pos:end="49:10">static</specifier> <specifier pos:start="49:12" pos:end="49:16">const</specifier> struct <block pos:start="49:25" pos:end="55:5">{

        <decl_stmt pos:start="51:9" pos:end="51:25"><decl pos:start="51:9" pos:end="51:24"><type pos:start="51:9" pos:end="51:20"><specifier pos:start="51:9" pos:end="51:13">const</specifier> <name pos:start="51:15" pos:end="51:18">char</name> <modifier pos:start="51:20" pos:end="51:20">*</modifier></type><name pos:start="51:21" pos:end="51:24">from</name></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:23"><decl pos:start="53:9" pos:end="53:22"><type pos:start="53:9" pos:end="53:20"><specifier pos:start="53:9" pos:end="53:13">const</specifier> <name pos:start="53:15" pos:end="53:18">char</name> <modifier pos:start="53:20" pos:end="53:20">*</modifier></type><name pos:start="53:21" pos:end="53:22">to</name></decl>;</decl_stmt>

    }</block> <decl pos:start="55:7" pos:end="99:5"><name pos:start="55:7" pos:end="55:19"><name pos:start="55:7" pos:end="55:17">opt_renames</name><index pos:start="55:18" pos:end="55:19">[]</index></name> <init pos:start="55:21" pos:end="99:5">= <expr pos:start="55:23" pos:end="99:5"><block pos:start="55:23" pos:end="99:5">{

        <expr pos:start="57:9" pos:end="57:53"><block pos:start="57:9" pos:end="57:53">{ <expr pos:start="57:11" pos:end="57:16"><literal type="string" pos:start="57:11" pos:end="57:16">"iops"</literal></expr>,           <expr pos:start="57:29" pos:end="57:51"><literal type="string" pos:start="57:29" pos:end="57:51">"throttling.iops-total"</literal></expr> }</block></expr>,

        <expr pos:start="59:9" pos:end="59:52"><block pos:start="59:9" pos:end="59:52">{ <expr pos:start="59:11" pos:end="59:19"><literal type="string" pos:start="59:11" pos:end="59:19">"iops_rd"</literal></expr>,        <expr pos:start="59:29" pos:end="59:50"><literal type="string" pos:start="59:29" pos:end="59:50">"throttling.iops-read"</literal></expr> }</block></expr>,

        <expr pos:start="61:9" pos:end="61:53"><block pos:start="61:9" pos:end="61:53">{ <expr pos:start="61:11" pos:end="61:19"><literal type="string" pos:start="61:11" pos:end="61:19">"iops_wr"</literal></expr>,        <expr pos:start="61:29" pos:end="61:51"><literal type="string" pos:start="61:29" pos:end="61:51">"throttling.iops-write"</literal></expr> }</block></expr>,



        <expr pos:start="65:9" pos:end="65:52"><block pos:start="65:9" pos:end="65:52">{ <expr pos:start="65:11" pos:end="65:15"><literal type="string" pos:start="65:11" pos:end="65:15">"bps"</literal></expr>,            <expr pos:start="65:29" pos:end="65:50"><literal type="string" pos:start="65:29" pos:end="65:50">"throttling.bps-total"</literal></expr> }</block></expr>,

        <expr pos:start="67:9" pos:end="67:51"><block pos:start="67:9" pos:end="67:51">{ <expr pos:start="67:11" pos:end="67:18"><literal type="string" pos:start="67:11" pos:end="67:18">"bps_rd"</literal></expr>,         <expr pos:start="67:29" pos:end="67:49"><literal type="string" pos:start="67:29" pos:end="67:49">"throttling.bps-read"</literal></expr> }</block></expr>,

        <expr pos:start="69:9" pos:end="69:52"><block pos:start="69:9" pos:end="69:52">{ <expr pos:start="69:11" pos:end="69:18"><literal type="string" pos:start="69:11" pos:end="69:18">"bps_wr"</literal></expr>,         <expr pos:start="69:29" pos:end="69:50"><literal type="string" pos:start="69:29" pos:end="69:50">"throttling.bps-write"</literal></expr> }</block></expr>,



        <expr pos:start="73:9" pos:end="73:57"><block pos:start="73:9" pos:end="73:57">{ <expr pos:start="73:11" pos:end="73:20"><literal type="string" pos:start="73:11" pos:end="73:20">"iops_max"</literal></expr>,       <expr pos:start="73:29" pos:end="73:55"><literal type="string" pos:start="73:29" pos:end="73:55">"throttling.iops-total-max"</literal></expr> }</block></expr>,

        <expr pos:start="75:9" pos:end="75:56"><block pos:start="75:9" pos:end="75:56">{ <expr pos:start="75:11" pos:end="75:23"><literal type="string" pos:start="75:11" pos:end="75:23">"iops_rd_max"</literal></expr>,    <expr pos:start="75:29" pos:end="75:54"><literal type="string" pos:start="75:29" pos:end="75:54">"throttling.iops-read-max"</literal></expr> }</block></expr>,

        <expr pos:start="77:9" pos:end="77:57"><block pos:start="77:9" pos:end="77:57">{ <expr pos:start="77:11" pos:end="77:23"><literal type="string" pos:start="77:11" pos:end="77:23">"iops_wr_max"</literal></expr>,    <expr pos:start="77:29" pos:end="77:55"><literal type="string" pos:start="77:29" pos:end="77:55">"throttling.iops-write-max"</literal></expr> }</block></expr>,



        <expr pos:start="81:9" pos:end="81:56"><block pos:start="81:9" pos:end="81:56">{ <expr pos:start="81:11" pos:end="81:19"><literal type="string" pos:start="81:11" pos:end="81:19">"bps_max"</literal></expr>,        <expr pos:start="81:29" pos:end="81:54"><literal type="string" pos:start="81:29" pos:end="81:54">"throttling.bps-total-max"</literal></expr> }</block></expr>,

        <expr pos:start="83:9" pos:end="83:55"><block pos:start="83:9" pos:end="83:55">{ <expr pos:start="83:11" pos:end="83:22"><literal type="string" pos:start="83:11" pos:end="83:22">"bps_rd_max"</literal></expr>,     <expr pos:start="83:29" pos:end="83:53"><literal type="string" pos:start="83:29" pos:end="83:53">"throttling.bps-read-max"</literal></expr> }</block></expr>,

        <expr pos:start="85:9" pos:end="85:56"><block pos:start="85:9" pos:end="85:56">{ <expr pos:start="85:11" pos:end="85:22"><literal type="string" pos:start="85:11" pos:end="85:22">"bps_wr_max"</literal></expr>,     <expr pos:start="85:29" pos:end="85:54"><literal type="string" pos:start="85:29" pos:end="85:54">"throttling.bps-write-max"</literal></expr> }</block></expr>,



        <expr pos:start="89:9" pos:end="89:52"><block pos:start="89:9" pos:end="89:52">{ <expr pos:start="89:11" pos:end="89:21"><literal type="string" pos:start="89:11" pos:end="89:21">"iops_size"</literal></expr>,      <expr pos:start="89:29" pos:end="89:50"><literal type="string" pos:start="89:29" pos:end="89:50">"throttling.iops-size"</literal></expr> }</block></expr>,



        <expr pos:start="93:9" pos:end="93:48"><block pos:start="93:9" pos:end="93:48">{ <expr pos:start="93:11" pos:end="93:17"><literal type="string" pos:start="93:11" pos:end="93:17">"group"</literal></expr>,          <expr pos:start="93:29" pos:end="93:46"><literal type="string" pos:start="93:29" pos:end="93:46">"throttling.group"</literal></expr> }</block></expr>,



        <expr pos:start="97:9" pos:end="97:48"><block pos:start="97:9" pos:end="97:48">{ <expr pos:start="97:11" pos:end="97:20"><literal type="string" pos:start="97:11" pos:end="97:20">"readonly"</literal></expr>,       <expr pos:start="97:29" pos:end="97:46"><name pos:start="97:29" pos:end="97:46">BDRV_OPT_READ_ONLY</name></expr> }</block></expr>,

    }</block></expr></init></decl>;</struct>



    <for pos:start="103:5" pos:end="117:5">for <control pos:start="103:9" pos:end="103:49">(<init pos:start="103:10" pos:end="103:15"><expr pos:start="103:10" pos:end="103:14"><name pos:start="103:10" pos:end="103:10">i</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <literal type="number" pos:start="103:14" pos:end="103:14">0</literal></expr>;</init> <condition pos:start="103:17" pos:end="103:44"><expr pos:start="103:17" pos:end="103:43"><name pos:start="103:17" pos:end="103:17">i</name> <operator pos:start="103:19" pos:end="103:19">&lt;</operator> <call pos:start="103:21" pos:end="103:43"><name pos:start="103:21" pos:end="103:30">ARRAY_SIZE</name><argument_list pos:start="103:31" pos:end="103:43">(<argument pos:start="103:32" pos:end="103:42"><expr pos:start="103:32" pos:end="103:42"><name pos:start="103:32" pos:end="103:42">opt_renames</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="103:46" pos:end="103:48"><expr pos:start="103:46" pos:end="103:48"><name pos:start="103:46" pos:end="103:46">i</name><operator pos:start="103:47" pos:end="103:48">++</operator></expr></incr>)</control> <block pos:start="103:51" pos:end="117:5">{<block_content pos:start="105:9" pos:end="115:9">

        <expr_stmt pos:start="105:9" pos:end="107:36"><expr pos:start="105:9" pos:end="107:35"><call pos:start="105:9" pos:end="107:35"><name pos:start="105:9" pos:end="105:23">qemu_opt_rename</name><argument_list pos:start="105:24" pos:end="107:35">(<argument pos:start="105:25" pos:end="105:32"><expr pos:start="105:25" pos:end="105:32"><name pos:start="105:25" pos:end="105:32">all_opts</name></expr></argument>, <argument pos:start="105:35" pos:end="105:53"><expr pos:start="105:35" pos:end="105:53"><name pos:start="105:35" pos:end="105:48"><name pos:start="105:35" pos:end="105:45">opt_renames</name><index pos:start="105:46" pos:end="105:48">[<expr pos:start="105:47" pos:end="105:47"><name pos:start="105:47" pos:end="105:47">i</name></expr>]</index></name><operator pos:start="105:49" pos:end="105:49">.</operator><name pos:start="105:50" pos:end="105:53">from</name></expr></argument>, <argument pos:start="105:56" pos:end="105:72"><expr pos:start="105:56" pos:end="105:72"><name pos:start="105:56" pos:end="105:69"><name pos:start="105:56" pos:end="105:66">opt_renames</name><index pos:start="105:67" pos:end="105:69">[<expr pos:start="105:68" pos:end="105:68"><name pos:start="105:68" pos:end="105:68">i</name></expr>]</index></name><operator pos:start="105:70" pos:end="105:70">.</operator><name pos:start="105:71" pos:end="105:72">to</name></expr></argument>,

                        <argument pos:start="107:25" pos:end="107:34"><expr pos:start="107:25" pos:end="107:34"><operator pos:start="107:25" pos:end="107:25">&amp;</operator><name pos:start="107:26" pos:end="107:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:22">(<expr pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:21">local_err</name></expr>)</condition> <block pos:start="109:24" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:24">

            <expr_stmt pos:start="111:13" pos:end="111:40"><expr pos:start="111:13" pos:end="111:39"><call pos:start="111:13" pos:end="111:39"><name pos:start="111:13" pos:end="111:28">error_report_err</name><argument_list pos:start="111:29" pos:end="111:39">(<argument pos:start="111:30" pos:end="111:38"><expr pos:start="111:30" pos:end="111:38"><name pos:start="111:30" pos:end="111:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="113:13" pos:end="113:24">return <expr pos:start="113:20" pos:end="113:23"><name pos:start="113:20" pos:end="113:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="121:5" pos:end="121:44"><expr pos:start="121:5" pos:end="121:43"><name pos:start="121:5" pos:end="121:9">value</name> <operator pos:start="121:11" pos:end="121:11">=</operator> <call pos:start="121:13" pos:end="121:43"><name pos:start="121:13" pos:end="121:24">qemu_opt_get</name><argument_list pos:start="121:25" pos:end="121:43">(<argument pos:start="121:26" pos:end="121:33"><expr pos:start="121:26" pos:end="121:33"><name pos:start="121:26" pos:end="121:33">all_opts</name></expr></argument>, <argument pos:start="121:36" pos:end="121:42"><expr pos:start="121:36" pos:end="121:42"><literal type="string" pos:start="121:36" pos:end="121:42">"cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="169:5"><if pos:start="123:5" pos:end="169:5">if <condition pos:start="123:8" pos:end="123:14">(<expr pos:start="123:9" pos:end="123:13"><name pos:start="123:9" pos:end="123:13">value</name></expr>)</condition> <block pos:start="123:16" pos:end="169:5">{<block_content pos:start="125:9" pos:end="167:42">

        <decl_stmt pos:start="125:9" pos:end="125:22"><decl pos:start="125:9" pos:end="125:21"><type pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">int</name></type> <name pos:start="125:13" pos:end="125:17">flags</name> <init pos:start="125:19" pos:end="125:21">= <expr pos:start="125:21" pos:end="125:21"><literal type="number" pos:start="125:21" pos:end="125:21">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="127:9" pos:end="127:26"><decl pos:start="127:9" pos:end="127:25"><type pos:start="127:9" pos:end="127:12"><name pos:start="127:9" pos:end="127:12">bool</name></type> <name pos:start="127:14" pos:end="127:25">writethrough</name></decl>;</decl_stmt>



        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:69">(<expr pos:start="131:13" pos:end="131:68"><call pos:start="131:13" pos:end="131:63"><name pos:start="131:13" pos:end="131:33">bdrv_parse_cache_mode</name><argument_list pos:start="131:34" pos:end="131:63">(<argument pos:start="131:35" pos:end="131:39"><expr pos:start="131:35" pos:end="131:39"><name pos:start="131:35" pos:end="131:39">value</name></expr></argument>, <argument pos:start="131:42" pos:end="131:47"><expr pos:start="131:42" pos:end="131:47"><operator pos:start="131:42" pos:end="131:42">&amp;</operator><name pos:start="131:43" pos:end="131:47">flags</name></expr></argument>, <argument pos:start="131:50" pos:end="131:62"><expr pos:start="131:50" pos:end="131:62"><operator pos:start="131:50" pos:end="131:50">&amp;</operator><name pos:start="131:51" pos:end="131:62">writethrough</name></expr></argument>)</argument_list></call> <operator pos:start="131:65" pos:end="131:66">!=</operator> <literal type="number" pos:start="131:68" pos:end="131:68">0</literal></expr>)</condition> <block pos:start="131:71" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:24">

            <expr_stmt pos:start="133:13" pos:end="133:49"><expr pos:start="133:13" pos:end="133:48"><call pos:start="133:13" pos:end="133:48"><name pos:start="133:13" pos:end="133:24">error_report</name><argument_list pos:start="133:25" pos:end="133:48">(<argument pos:start="133:26" pos:end="133:47"><expr pos:start="133:26" pos:end="133:47"><literal type="string" pos:start="133:26" pos:end="133:47">"invalid cache option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="135:13" pos:end="135:24">return <expr pos:start="135:20" pos:end="135:23"><name pos:start="135:20" pos:end="135:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="141:9" pos:end="141:46">/* Specific options take precedence */</comment>

        <if_stmt pos:start="143:9" pos:end="149:9"><if pos:start="143:9" pos:end="149:9">if <condition pos:start="143:12" pos:end="143:55">(<expr pos:start="143:13" pos:end="143:54"><operator pos:start="143:13" pos:end="143:13">!</operator><call pos:start="143:14" pos:end="143:54"><name pos:start="143:14" pos:end="143:25">qemu_opt_get</name><argument_list pos:start="143:26" pos:end="143:54">(<argument pos:start="143:27" pos:end="143:34"><expr pos:start="143:27" pos:end="143:34"><name pos:start="143:27" pos:end="143:34">all_opts</name></expr></argument>, <argument pos:start="143:37" pos:end="143:53"><expr pos:start="143:37" pos:end="143:53"><name pos:start="143:37" pos:end="143:53">BDRV_OPT_CACHE_WB</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="143:57" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:59">

            <expr_stmt pos:start="145:13" pos:end="147:59"><expr pos:start="145:13" pos:end="147:58"><call pos:start="145:13" pos:end="147:58"><name pos:start="145:13" pos:end="145:29">qemu_opt_set_bool</name><argument_list pos:start="145:30" pos:end="147:58">(<argument pos:start="145:31" pos:end="145:38"><expr pos:start="145:31" pos:end="145:38"><name pos:start="145:31" pos:end="145:38">all_opts</name></expr></argument>, <argument pos:start="145:41" pos:end="145:57"><expr pos:start="145:41" pos:end="145:57"><name pos:start="145:41" pos:end="145:57">BDRV_OPT_CACHE_WB</name></expr></argument>,

                              <argument pos:start="147:31" pos:end="147:43"><expr pos:start="147:31" pos:end="147:43"><operator pos:start="147:31" pos:end="147:31">!</operator><name pos:start="147:32" pos:end="147:43">writethrough</name></expr></argument>, <argument pos:start="147:46" pos:end="147:57"><expr pos:start="147:46" pos:end="147:57"><operator pos:start="147:46" pos:end="147:46">&amp;</operator><name pos:start="147:47" pos:end="147:57">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="151:9" pos:end="157:9"><if pos:start="151:9" pos:end="157:9">if <condition pos:start="151:12" pos:end="151:59">(<expr pos:start="151:13" pos:end="151:58"><operator pos:start="151:13" pos:end="151:13">!</operator><call pos:start="151:14" pos:end="151:58"><name pos:start="151:14" pos:end="151:25">qemu_opt_get</name><argument_list pos:start="151:26" pos:end="151:58">(<argument pos:start="151:27" pos:end="151:34"><expr pos:start="151:27" pos:end="151:34"><name pos:start="151:27" pos:end="151:34">all_opts</name></expr></argument>, <argument pos:start="151:37" pos:end="151:57"><expr pos:start="151:37" pos:end="151:57"><name pos:start="151:37" pos:end="151:57">BDRV_OPT_CACHE_DIRECT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:61" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:72">

            <expr_stmt pos:start="153:13" pos:end="155:72"><expr pos:start="153:13" pos:end="155:71"><call pos:start="153:13" pos:end="155:71"><name pos:start="153:13" pos:end="153:29">qemu_opt_set_bool</name><argument_list pos:start="153:30" pos:end="155:71">(<argument pos:start="153:31" pos:end="153:38"><expr pos:start="153:31" pos:end="153:38"><name pos:start="153:31" pos:end="153:38">all_opts</name></expr></argument>, <argument pos:start="153:41" pos:end="153:61"><expr pos:start="153:41" pos:end="153:61"><name pos:start="153:41" pos:end="153:61">BDRV_OPT_CACHE_DIRECT</name></expr></argument>,

                              <argument pos:start="155:31" pos:end="155:56"><expr pos:start="155:31" pos:end="155:56"><operator pos:start="155:31" pos:end="155:31">!</operator><operator pos:start="155:32" pos:end="155:32">!</operator><operator pos:start="155:33" pos:end="155:33">(</operator><name pos:start="155:34" pos:end="155:38">flags</name> <operator pos:start="155:40" pos:end="155:40">&amp;</operator> <name pos:start="155:42" pos:end="155:55">BDRV_O_NOCACHE</name><operator pos:start="155:56" pos:end="155:56">)</operator></expr></argument>, <argument pos:start="155:59" pos:end="155:70"><expr pos:start="155:59" pos:end="155:70"><operator pos:start="155:59" pos:end="155:59">&amp;</operator><name pos:start="155:60" pos:end="155:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="159:9" pos:end="165:9"><if pos:start="159:9" pos:end="165:9">if <condition pos:start="159:12" pos:end="159:61">(<expr pos:start="159:13" pos:end="159:60"><operator pos:start="159:13" pos:end="159:13">!</operator><call pos:start="159:14" pos:end="159:60"><name pos:start="159:14" pos:end="159:25">qemu_opt_get</name><argument_list pos:start="159:26" pos:end="159:60">(<argument pos:start="159:27" pos:end="159:34"><expr pos:start="159:27" pos:end="159:34"><name pos:start="159:27" pos:end="159:34">all_opts</name></expr></argument>, <argument pos:start="159:37" pos:end="159:59"><expr pos:start="159:37" pos:end="159:59"><name pos:start="159:37" pos:end="159:59">BDRV_OPT_CACHE_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:63" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:73">

            <expr_stmt pos:start="161:13" pos:end="163:73"><expr pos:start="161:13" pos:end="163:72"><call pos:start="161:13" pos:end="163:72"><name pos:start="161:13" pos:end="161:29">qemu_opt_set_bool</name><argument_list pos:start="161:30" pos:end="163:72">(<argument pos:start="161:31" pos:end="161:38"><expr pos:start="161:31" pos:end="161:38"><name pos:start="161:31" pos:end="161:38">all_opts</name></expr></argument>, <argument pos:start="161:41" pos:end="161:63"><expr pos:start="161:41" pos:end="161:63"><name pos:start="161:41" pos:end="161:63">BDRV_OPT_CACHE_NO_FLUSH</name></expr></argument>,

                              <argument pos:start="163:31" pos:end="163:57"><expr pos:start="163:31" pos:end="163:57"><operator pos:start="163:31" pos:end="163:31">!</operator><operator pos:start="163:32" pos:end="163:32">!</operator><operator pos:start="163:33" pos:end="163:33">(</operator><name pos:start="163:34" pos:end="163:38">flags</name> <operator pos:start="163:40" pos:end="163:40">&amp;</operator> <name pos:start="163:42" pos:end="163:56">BDRV_O_NO_FLUSH</name><operator pos:start="163:57" pos:end="163:57">)</operator></expr></argument>, <argument pos:start="163:60" pos:end="163:71"><expr pos:start="163:60" pos:end="163:71"><operator pos:start="163:60" pos:end="163:60">&amp;</operator><name pos:start="163:61" pos:end="163:71">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:42"><expr pos:start="167:9" pos:end="167:41"><call pos:start="167:9" pos:end="167:41"><name pos:start="167:9" pos:end="167:22">qemu_opt_unset</name><argument_list pos:start="167:23" pos:end="167:41">(<argument pos:start="167:24" pos:end="167:31"><expr pos:start="167:24" pos:end="167:31"><name pos:start="167:24" pos:end="167:31">all_opts</name></expr></argument>, <argument pos:start="167:34" pos:end="167:40"><expr pos:start="167:34" pos:end="167:40"><literal type="string" pos:start="167:34" pos:end="167:40">"cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:48">/* Get a QDict for processing the options */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:26"><expr pos:start="175:5" pos:end="175:25"><name pos:start="175:5" pos:end="175:11">bs_opts</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:25"><name pos:start="175:15" pos:end="175:23">qdict_new</name><argument_list pos:start="175:24" pos:end="175:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:42"><expr pos:start="177:5" pos:end="177:41"><call pos:start="177:5" pos:end="177:41"><name pos:start="177:5" pos:end="177:22">qemu_opts_to_qdict</name><argument_list pos:start="177:23" pos:end="177:41">(<argument pos:start="177:24" pos:end="177:31"><expr pos:start="177:24" pos:end="177:31"><name pos:start="177:24" pos:end="177:31">all_opts</name></expr></argument>, <argument pos:start="177:34" pos:end="177:40"><expr pos:start="177:34" pos:end="177:40"><name pos:start="177:34" pos:end="177:40">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="183:49"><expr pos:start="181:5" pos:end="183:48"><name pos:start="181:5" pos:end="181:15">legacy_opts</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <call pos:start="181:19" pos:end="183:48"><name pos:start="181:19" pos:end="181:34">qemu_opts_create</name><argument_list pos:start="181:35" pos:end="183:48">(<argument pos:start="181:36" pos:end="181:58"><expr pos:start="181:36" pos:end="181:58"><operator pos:start="181:36" pos:end="181:36">&amp;</operator><name pos:start="181:37" pos:end="181:58">qemu_legacy_drive_opts</name></expr></argument>, <argument pos:start="181:61" pos:end="181:64"><expr pos:start="181:61" pos:end="181:64"><name pos:start="181:61" pos:end="181:64">NULL</name></expr></argument>, <argument pos:start="181:67" pos:end="181:67"><expr pos:start="181:67" pos:end="181:67"><literal type="number" pos:start="181:67" pos:end="181:67">0</literal></expr></argument>,

                                   <argument pos:start="183:36" pos:end="183:47"><expr pos:start="183:36" pos:end="183:47"><operator pos:start="183:36" pos:end="183:36">&amp;</operator><name pos:start="183:37" pos:end="183:47">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:61"><expr pos:start="185:5" pos:end="185:60"><call pos:start="185:5" pos:end="185:60"><name pos:start="185:5" pos:end="185:26">qemu_opts_absorb_qdict</name><argument_list pos:start="185:27" pos:end="185:60">(<argument pos:start="185:28" pos:end="185:38"><expr pos:start="185:28" pos:end="185:38"><name pos:start="185:28" pos:end="185:38">legacy_opts</name></expr></argument>, <argument pos:start="185:41" pos:end="185:47"><expr pos:start="185:41" pos:end="185:47"><name pos:start="185:41" pos:end="185:47">bs_opts</name></expr></argument>, <argument pos:start="185:50" pos:end="185:59"><expr pos:start="185:50" pos:end="185:59"><operator pos:start="185:50" pos:end="185:50">&amp;</operator><name pos:start="185:51" pos:end="185:59">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="193:5"><if pos:start="187:5" pos:end="193:5">if <condition pos:start="187:8" pos:end="187:18">(<expr pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:17">local_err</name></expr>)</condition> <block pos:start="187:20" pos:end="193:5">{<block_content pos:start="189:9" pos:end="191:18">

        <expr_stmt pos:start="189:9" pos:end="189:36"><expr pos:start="189:9" pos:end="189:35"><call pos:start="189:9" pos:end="189:35"><name pos:start="189:9" pos:end="189:24">error_report_err</name><argument_list pos:start="189:25" pos:end="189:35">(<argument pos:start="189:26" pos:end="189:34"><expr pos:start="189:26" pos:end="189:34"><name pos:start="189:26" pos:end="189:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="191:9" pos:end="191:18">goto <name pos:start="191:14" pos:end="191:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="197:5" pos:end="197:41">/* Deprecated option boot=[on|off] */</comment>

    <if_stmt pos:start="199:5" pos:end="207:5"><if pos:start="199:5" pos:end="207:5">if <condition pos:start="199:8" pos:end="199:50">(<expr pos:start="199:9" pos:end="199:49"><call pos:start="199:9" pos:end="199:41"><name pos:start="199:9" pos:end="199:20">qemu_opt_get</name><argument_list pos:start="199:21" pos:end="199:41">(<argument pos:start="199:22" pos:end="199:32"><expr pos:start="199:22" pos:end="199:32"><name pos:start="199:22" pos:end="199:32">legacy_opts</name></expr></argument>, <argument pos:start="199:35" pos:end="199:40"><expr pos:start="199:35" pos:end="199:40"><literal type="string" pos:start="199:35" pos:end="199:40">"boot"</literal></expr></argument>)</argument_list></call> <operator pos:start="199:43" pos:end="199:44">!=</operator> <name pos:start="199:46" pos:end="199:49">NULL</name></expr>)</condition> <block pos:start="199:52" pos:end="207:5">{<block_content pos:start="201:9" pos:end="205:42">

        <expr_stmt pos:start="201:9" pos:end="205:42"><expr pos:start="201:9" pos:end="205:41"><call pos:start="201:9" pos:end="205:41"><name pos:start="201:9" pos:end="201:15">fprintf</name><argument_list pos:start="201:16" pos:end="205:41">(<argument pos:start="201:17" pos:end="201:22"><expr pos:start="201:17" pos:end="201:22"><name pos:start="201:17" pos:end="201:22">stderr</name></expr></argument>, <argument pos:start="201:25" pos:end="205:40"><expr pos:start="201:25" pos:end="205:40"><literal type="string" pos:start="201:25" pos:end="201:74">"qemu-kvm: boot=on|off is deprecated and will be "</literal>

                <literal type="string" pos:start="203:17" pos:end="203:78">"ignored. Future versions will reject this parameter. Please "</literal>

                <literal type="string" pos:start="205:17" pos:end="205:40">"update your scripts.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:34">/* Other deprecated options */</comment>

    <if_stmt pos:start="213:5" pos:end="227:5"><if pos:start="213:5" pos:end="227:5">if <condition pos:start="213:8" pos:end="213:25">(<expr pos:start="213:9" pos:end="213:24"><operator pos:start="213:9" pos:end="213:9">!</operator><call pos:start="213:10" pos:end="213:24"><name pos:start="213:10" pos:end="213:22">qtest_enabled</name><argument_list pos:start="213:23" pos:end="213:24">()</argument_list></call></expr>)</condition> <block pos:start="213:27" pos:end="227:5">{<block_content pos:start="215:9" pos:end="225:9">

        <for pos:start="215:9" pos:end="225:9">for <control pos:start="215:13" pos:end="215:52">(<init pos:start="215:14" pos:end="215:19"><expr pos:start="215:14" pos:end="215:18"><name pos:start="215:14" pos:end="215:14">i</name> <operator pos:start="215:16" pos:end="215:16">=</operator> <literal type="number" pos:start="215:18" pos:end="215:18">0</literal></expr>;</init> <condition pos:start="215:21" pos:end="215:47"><expr pos:start="215:21" pos:end="215:46"><name pos:start="215:21" pos:end="215:21">i</name> <operator pos:start="215:23" pos:end="215:23">&lt;</operator> <call pos:start="215:25" pos:end="215:46"><name pos:start="215:25" pos:end="215:34">ARRAY_SIZE</name><argument_list pos:start="215:35" pos:end="215:46">(<argument pos:start="215:36" pos:end="215:45"><expr pos:start="215:36" pos:end="215:45"><name pos:start="215:36" pos:end="215:45">deprecated</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="215:49" pos:end="215:51"><expr pos:start="215:49" pos:end="215:51"><name pos:start="215:49" pos:end="215:49">i</name><operator pos:start="215:50" pos:end="215:51">++</operator></expr></incr>)</control> <block pos:start="215:54" pos:end="225:9">{<block_content pos:start="217:13" pos:end="223:13">

            <if_stmt pos:start="217:13" pos:end="223:13"><if pos:start="217:13" pos:end="223:13">if <condition pos:start="217:16" pos:end="217:65">(<expr pos:start="217:17" pos:end="217:64"><call pos:start="217:17" pos:end="217:56"><name pos:start="217:17" pos:end="217:28">qemu_opt_get</name><argument_list pos:start="217:29" pos:end="217:56">(<argument pos:start="217:30" pos:end="217:40"><expr pos:start="217:30" pos:end="217:40"><name pos:start="217:30" pos:end="217:40">legacy_opts</name></expr></argument>, <argument pos:start="217:43" pos:end="217:55"><expr pos:start="217:43" pos:end="217:55"><name pos:start="217:43" pos:end="217:55"><name pos:start="217:43" pos:end="217:52">deprecated</name><index pos:start="217:53" pos:end="217:55">[<expr pos:start="217:54" pos:end="217:54"><name pos:start="217:54" pos:end="217:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="217:58" pos:end="217:59">!=</operator> <name pos:start="217:61" pos:end="217:64">NULL</name></expr>)</condition> <block pos:start="217:67" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:75">

                <expr_stmt pos:start="219:17" pos:end="221:75"><expr pos:start="219:17" pos:end="221:74"><call pos:start="219:17" pos:end="221:74"><name pos:start="219:17" pos:end="219:28">error_report</name><argument_list pos:start="219:29" pos:end="221:74">(<argument pos:start="219:30" pos:end="221:58"><expr pos:start="219:30" pos:end="221:58"><literal type="string" pos:start="219:30" pos:end="219:80">"'%s' is deprecated, please use the corresponding "</literal>

                             <literal type="string" pos:start="221:30" pos:end="221:58">"option of '-device' instead"</literal></expr></argument>, <argument pos:start="221:61" pos:end="221:73"><expr pos:start="221:61" pos:end="221:73"><name pos:start="221:61" pos:end="221:73"><name pos:start="221:61" pos:end="221:70">deprecated</name><index pos:start="221:71" pos:end="221:73">[<expr pos:start="221:72" pos:end="221:72"><name pos:start="221:72" pos:end="221:72">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:20">/* Media type */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:47"><expr pos:start="233:5" pos:end="233:46"><name pos:start="233:5" pos:end="233:9">value</name> <operator pos:start="233:11" pos:end="233:11">=</operator> <call pos:start="233:13" pos:end="233:46"><name pos:start="233:13" pos:end="233:24">qemu_opt_get</name><argument_list pos:start="233:25" pos:end="233:46">(<argument pos:start="233:26" pos:end="233:36"><expr pos:start="233:26" pos:end="233:36"><name pos:start="233:26" pos:end="233:36">legacy_opts</name></expr></argument>, <argument pos:start="233:39" pos:end="233:45"><expr pos:start="233:39" pos:end="233:45"><literal type="string" pos:start="233:39" pos:end="233:45">"media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="235:5" pos:end="255:5"><if pos:start="235:5" pos:end="255:5">if <condition pos:start="235:8" pos:end="235:14">(<expr pos:start="235:9" pos:end="235:13"><name pos:start="235:9" pos:end="235:13">value</name></expr>)</condition> <block pos:start="235:16" pos:end="255:5">{<block_content pos:start="237:9" pos:end="253:9">

        <if_stmt pos:start="237:9" pos:end="253:9"><if pos:start="237:9" pos:end="241:9">if <condition pos:start="237:12" pos:end="237:35">(<expr pos:start="237:13" pos:end="237:34"><operator pos:start="237:13" pos:end="237:13">!</operator><call pos:start="237:14" pos:end="237:34"><name pos:start="237:14" pos:end="237:19">strcmp</name><argument_list pos:start="237:20" pos:end="237:34">(<argument pos:start="237:21" pos:end="237:25"><expr pos:start="237:21" pos:end="237:25"><name pos:start="237:21" pos:end="237:25">value</name></expr></argument>, <argument pos:start="237:28" pos:end="237:33"><expr pos:start="237:28" pos:end="237:33"><literal type="string" pos:start="237:28" pos:end="237:33">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="237:37" pos:end="241:9">{<block_content pos:start="239:13" pos:end="239:31">

            <expr_stmt pos:start="239:13" pos:end="239:31"><expr pos:start="239:13" pos:end="239:30"><name pos:start="239:13" pos:end="239:17">media</name> <operator pos:start="239:19" pos:end="239:19">=</operator> <name pos:start="239:21" pos:end="239:30">MEDIA_DISK</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="241:11" pos:end="247:9">else if <condition pos:start="241:19" pos:end="241:43">(<expr pos:start="241:20" pos:end="241:42"><operator pos:start="241:20" pos:end="241:20">!</operator><call pos:start="241:21" pos:end="241:42"><name pos:start="241:21" pos:end="241:26">strcmp</name><argument_list pos:start="241:27" pos:end="241:42">(<argument pos:start="241:28" pos:end="241:32"><expr pos:start="241:28" pos:end="241:32"><name pos:start="241:28" pos:end="241:32">value</name></expr></argument>, <argument pos:start="241:35" pos:end="241:41"><expr pos:start="241:35" pos:end="241:41"><literal type="string" pos:start="241:35" pos:end="241:41">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="241:45" pos:end="247:9">{<block_content pos:start="243:13" pos:end="245:29">

            <expr_stmt pos:start="243:13" pos:end="243:32"><expr pos:start="243:13" pos:end="243:31"><name pos:start="243:13" pos:end="243:17">media</name> <operator pos:start="243:19" pos:end="243:19">=</operator> <name pos:start="243:21" pos:end="243:31">MEDIA_CDROM</name></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:29"><expr pos:start="245:13" pos:end="245:28"><name pos:start="245:13" pos:end="245:21">read_only</name> <operator pos:start="245:23" pos:end="245:23">=</operator> <name pos:start="245:25" pos:end="245:28">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="247:11" pos:end="253:9">else <block pos:start="247:16" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:22">

            <expr_stmt pos:start="249:13" pos:end="249:54"><expr pos:start="249:13" pos:end="249:53"><call pos:start="249:13" pos:end="249:53"><name pos:start="249:13" pos:end="249:24">error_report</name><argument_list pos:start="249:25" pos:end="249:53">(<argument pos:start="249:26" pos:end="249:45"><expr pos:start="249:26" pos:end="249:45"><literal type="string" pos:start="249:26" pos:end="249:45">"'%s' invalid media"</literal></expr></argument>, <argument pos:start="249:48" pos:end="249:52"><expr pos:start="249:48" pos:end="249:52"><name pos:start="249:48" pos:end="249:52">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="251:13" pos:end="251:22">goto <name pos:start="251:18" pos:end="251:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="259:5" pos:end="259:71">/* copy-on-read is disabled with a warning for read-only devices */</comment>

    <expr_stmt pos:start="261:5" pos:end="261:75"><expr pos:start="261:5" pos:end="261:74"><name pos:start="261:5" pos:end="261:13">read_only</name> <operator pos:start="261:15" pos:end="261:16">|=</operator> <call pos:start="261:18" pos:end="261:74"><name pos:start="261:18" pos:end="261:34">qemu_opt_get_bool</name><argument_list pos:start="261:35" pos:end="261:74">(<argument pos:start="261:36" pos:end="261:46"><expr pos:start="261:36" pos:end="261:46"><name pos:start="261:36" pos:end="261:46">legacy_opts</name></expr></argument>, <argument pos:start="261:49" pos:end="261:66"><expr pos:start="261:49" pos:end="261:66"><name pos:start="261:49" pos:end="261:66">BDRV_OPT_READ_ONLY</name></expr></argument>, <argument pos:start="261:69" pos:end="261:73"><expr pos:start="261:69" pos:end="261:73"><name pos:start="261:69" pos:end="261:73">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:73"><expr pos:start="263:5" pos:end="263:72"><name pos:start="263:5" pos:end="263:16">copy_on_read</name> <operator pos:start="263:18" pos:end="263:18">=</operator> <call pos:start="263:20" pos:end="263:72"><name pos:start="263:20" pos:end="263:36">qemu_opt_get_bool</name><argument_list pos:start="263:37" pos:end="263:72">(<argument pos:start="263:38" pos:end="263:48"><expr pos:start="263:38" pos:end="263:48"><name pos:start="263:38" pos:end="263:48">legacy_opts</name></expr></argument>, <argument pos:start="263:51" pos:end="263:64"><expr pos:start="263:51" pos:end="263:64"><literal type="string" pos:start="263:51" pos:end="263:64">"copy-on-read"</literal></expr></argument>, <argument pos:start="263:67" pos:end="263:71"><expr pos:start="263:67" pos:end="263:71"><name pos:start="263:67" pos:end="263:71">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="267:5" pos:end="273:5"><if pos:start="267:5" pos:end="273:5">if <condition pos:start="267:8" pos:end="267:34">(<expr pos:start="267:9" pos:end="267:33"><name pos:start="267:9" pos:end="267:17">read_only</name> <operator pos:start="267:19" pos:end="267:20">&amp;&amp;</operator> <name pos:start="267:22" pos:end="267:33">copy_on_read</name></expr>)</condition> <block pos:start="267:36" pos:end="273:5">{<block_content pos:start="269:9" pos:end="271:29">

        <expr_stmt pos:start="269:9" pos:end="269:75"><expr pos:start="269:9" pos:end="269:74"><call pos:start="269:9" pos:end="269:74"><name pos:start="269:9" pos:end="269:20">error_report</name><argument_list pos:start="269:21" pos:end="269:74">(<argument pos:start="269:22" pos:end="269:73"><expr pos:start="269:22" pos:end="269:73"><literal type="string" pos:start="269:22" pos:end="269:73">"warning: disabling copy-on-read on read-only drive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:29"><expr pos:start="271:9" pos:end="271:28"><name pos:start="271:9" pos:end="271:20">copy_on_read</name> <operator pos:start="271:22" pos:end="271:22">=</operator> <name pos:start="271:24" pos:end="271:28">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="277:5" pos:end="277:73"><expr pos:start="277:5" pos:end="277:72"><call pos:start="277:5" pos:end="277:72"><name pos:start="277:5" pos:end="277:17">qdict_put_str</name><argument_list pos:start="277:18" pos:end="277:72">(<argument pos:start="277:19" pos:end="277:25"><expr pos:start="277:19" pos:end="277:25"><name pos:start="277:19" pos:end="277:25">bs_opts</name></expr></argument>, <argument pos:start="277:28" pos:end="277:45"><expr pos:start="277:28" pos:end="277:45"><name pos:start="277:28" pos:end="277:45">BDRV_OPT_READ_ONLY</name></expr></argument>, <argument pos:start="277:48" pos:end="277:71"><expr pos:start="277:48" pos:end="277:71"><ternary pos:start="277:48" pos:end="277:71"><condition pos:start="277:48" pos:end="277:58"><expr pos:start="277:48" pos:end="277:56"><name pos:start="277:48" pos:end="277:56">read_only</name></expr> ?</condition><then pos:start="277:60" pos:end="277:63"> <expr pos:start="277:60" pos:end="277:63"><literal type="string" pos:start="277:60" pos:end="277:63">"on"</literal></expr> </then><else pos:start="277:65" pos:end="277:71">: <expr pos:start="277:67" pos:end="277:71"><literal type="string" pos:start="277:67" pos:end="277:71">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:72"><expr pos:start="279:5" pos:end="279:71"><call pos:start="279:5" pos:end="279:71"><name pos:start="279:5" pos:end="279:17">qdict_put_str</name><argument_list pos:start="279:18" pos:end="279:71">(<argument pos:start="279:19" pos:end="279:25"><expr pos:start="279:19" pos:end="279:25"><name pos:start="279:19" pos:end="279:25">bs_opts</name></expr></argument>, <argument pos:start="279:28" pos:end="279:41"><expr pos:start="279:28" pos:end="279:41"><literal type="string" pos:start="279:28" pos:end="279:41">"copy-on-read"</literal></expr></argument>, <argument pos:start="279:44" pos:end="279:70"><expr pos:start="279:44" pos:end="279:70"><ternary pos:start="279:44" pos:end="279:70"><condition pos:start="279:44" pos:end="279:57"><expr pos:start="279:44" pos:end="279:55"><name pos:start="279:44" pos:end="279:55">copy_on_read</name></expr> ?</condition><then pos:start="279:59" pos:end="279:62"> <expr pos:start="279:59" pos:end="279:62"><literal type="string" pos:start="279:59" pos:end="279:62">"on"</literal></expr> </then><else pos:start="279:64" pos:end="279:70">: <expr pos:start="279:66" pos:end="279:70"><literal type="string" pos:start="279:66" pos:end="279:70">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="283:5" pos:end="283:25">/* Controller type */</comment>

    <expr_stmt pos:start="285:5" pos:end="285:44"><expr pos:start="285:5" pos:end="285:43"><name pos:start="285:5" pos:end="285:9">value</name> <operator pos:start="285:11" pos:end="285:11">=</operator> <call pos:start="285:13" pos:end="285:43"><name pos:start="285:13" pos:end="285:24">qemu_opt_get</name><argument_list pos:start="285:25" pos:end="285:43">(<argument pos:start="285:26" pos:end="285:36"><expr pos:start="285:26" pos:end="285:36"><name pos:start="285:26" pos:end="285:36">legacy_opts</name></expr></argument>, <argument pos:start="285:39" pos:end="285:42"><expr pos:start="285:39" pos:end="285:42"><literal type="string" pos:start="285:39" pos:end="285:42">"if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="287:5" pos:end="309:5"><if pos:start="287:5" pos:end="305:5">if <condition pos:start="287:8" pos:end="287:14">(<expr pos:start="287:9" pos:end="287:13"><name pos:start="287:9" pos:end="287:13">value</name></expr>)</condition> <block pos:start="287:16" pos:end="305:5">{<block_content pos:start="289:9" pos:end="303:9">

        <for pos:start="289:9" pos:end="295:9">for <control pos:start="289:13" pos:end="293:20">(<init pos:start="289:14" pos:end="289:22"><expr pos:start="289:14" pos:end="289:21"><name pos:start="289:14" pos:end="289:17">type</name> <operator pos:start="289:19" pos:end="289:19">=</operator> <literal type="number" pos:start="289:21" pos:end="289:21">0</literal></expr>;</init>

             <condition pos:start="291:14" pos:end="291:61"><expr pos:start="291:14" pos:end="291:60"><name pos:start="291:14" pos:end="291:17">type</name> <operator pos:start="291:19" pos:end="291:19">&lt;</operator> <name pos:start="291:21" pos:end="291:28">IF_COUNT</name> <operator pos:start="291:30" pos:end="291:31">&amp;&amp;</operator> <call pos:start="291:33" pos:end="291:60"><name pos:start="291:33" pos:end="291:38">strcmp</name><argument_list pos:start="291:39" pos:end="291:60">(<argument pos:start="291:40" pos:end="291:44"><expr pos:start="291:40" pos:end="291:44"><name pos:start="291:40" pos:end="291:44">value</name></expr></argument>, <argument pos:start="291:47" pos:end="291:59"><expr pos:start="291:47" pos:end="291:59"><name pos:start="291:47" pos:end="291:59"><name pos:start="291:47" pos:end="291:53">if_name</name><index pos:start="291:54" pos:end="291:59">[<expr pos:start="291:55" pos:end="291:58"><name pos:start="291:55" pos:end="291:58">type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition>

             <incr pos:start="293:14" pos:end="293:19"><expr pos:start="293:14" pos:end="293:19"><name pos:start="293:14" pos:end="293:17">type</name><operator pos:start="293:18" pos:end="293:19">++</operator></expr></incr>)</control> <block pos:start="293:22" pos:end="295:9">{<block_content>

        </block_content>}</block></for>

        <if_stmt pos:start="297:9" pos:end="303:9"><if pos:start="297:9" pos:end="303:9">if <condition pos:start="297:12" pos:end="297:29">(<expr pos:start="297:13" pos:end="297:28"><name pos:start="297:13" pos:end="297:16">type</name> <operator pos:start="297:18" pos:end="297:19">==</operator> <name pos:start="297:21" pos:end="297:28">IF_COUNT</name></expr>)</condition> <block pos:start="297:31" pos:end="303:9">{<block_content pos:start="299:13" pos:end="301:22">

            <expr_stmt pos:start="299:13" pos:end="299:61"><expr pos:start="299:13" pos:end="299:60"><call pos:start="299:13" pos:end="299:60"><name pos:start="299:13" pos:end="299:24">error_report</name><argument_list pos:start="299:25" pos:end="299:60">(<argument pos:start="299:26" pos:end="299:52"><expr pos:start="299:26" pos:end="299:52"><literal type="string" pos:start="299:26" pos:end="299:52">"unsupported bus type '%s'"</literal></expr></argument>, <argument pos:start="299:55" pos:end="299:59"><expr pos:start="299:55" pos:end="299:59"><name pos:start="299:55" pos:end="299:59">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="301:13" pos:end="301:22">goto <name pos:start="301:18" pos:end="301:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="305:7" pos:end="309:5">else <block pos:start="305:12" pos:end="309:5">{<block_content pos:start="307:9" pos:end="307:34">

        <expr_stmt pos:start="307:9" pos:end="307:34"><expr pos:start="307:9" pos:end="307:33"><name pos:start="307:9" pos:end="307:12">type</name> <operator pos:start="307:14" pos:end="307:14">=</operator> <name pos:start="307:16" pos:end="307:33">block_default_type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="313:5" pos:end="313:18">/* Geometry */</comment>

    <expr_stmt pos:start="315:5" pos:end="315:56"><expr pos:start="315:5" pos:end="315:55"><name pos:start="315:5" pos:end="315:8">cyls</name>  <operator pos:start="315:11" pos:end="315:11">=</operator> <call pos:start="315:13" pos:end="315:55"><name pos:start="315:13" pos:end="315:31">qemu_opt_get_number</name><argument_list pos:start="315:32" pos:end="315:55">(<argument pos:start="315:33" pos:end="315:43"><expr pos:start="315:33" pos:end="315:43"><name pos:start="315:33" pos:end="315:43">legacy_opts</name></expr></argument>, <argument pos:start="315:46" pos:end="315:51"><expr pos:start="315:46" pos:end="315:51"><literal type="string" pos:start="315:46" pos:end="315:51">"cyls"</literal></expr></argument>, <argument pos:start="315:54" pos:end="315:54"><expr pos:start="315:54" pos:end="315:54"><literal type="number" pos:start="315:54" pos:end="315:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:57"><expr pos:start="317:5" pos:end="317:56"><name pos:start="317:5" pos:end="317:9">heads</name> <operator pos:start="317:11" pos:end="317:11">=</operator> <call pos:start="317:13" pos:end="317:56"><name pos:start="317:13" pos:end="317:31">qemu_opt_get_number</name><argument_list pos:start="317:32" pos:end="317:56">(<argument pos:start="317:33" pos:end="317:43"><expr pos:start="317:33" pos:end="317:43"><name pos:start="317:33" pos:end="317:43">legacy_opts</name></expr></argument>, <argument pos:start="317:46" pos:end="317:52"><expr pos:start="317:46" pos:end="317:52"><literal type="string" pos:start="317:46" pos:end="317:52">"heads"</literal></expr></argument>, <argument pos:start="317:55" pos:end="317:55"><expr pos:start="317:55" pos:end="317:55"><literal type="number" pos:start="317:55" pos:end="317:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:56"><expr pos:start="319:5" pos:end="319:55"><name pos:start="319:5" pos:end="319:8">secs</name>  <operator pos:start="319:11" pos:end="319:11">=</operator> <call pos:start="319:13" pos:end="319:55"><name pos:start="319:13" pos:end="319:31">qemu_opt_get_number</name><argument_list pos:start="319:32" pos:end="319:55">(<argument pos:start="319:33" pos:end="319:43"><expr pos:start="319:33" pos:end="319:43"><name pos:start="319:33" pos:end="319:43">legacy_opts</name></expr></argument>, <argument pos:start="319:46" pos:end="319:51"><expr pos:start="319:46" pos:end="319:51"><literal type="string" pos:start="319:46" pos:end="319:51">"secs"</literal></expr></argument>, <argument pos:start="319:54" pos:end="319:54"><expr pos:start="319:54" pos:end="319:54"><literal type="number" pos:start="319:54" pos:end="319:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="323:5" pos:end="349:5"><if pos:start="323:5" pos:end="349:5">if <condition pos:start="323:8" pos:end="323:30">(<expr pos:start="323:9" pos:end="323:29"><name pos:start="323:9" pos:end="323:12">cyls</name> <operator pos:start="323:14" pos:end="323:15">||</operator> <name pos:start="323:17" pos:end="323:21">heads</name> <operator pos:start="323:23" pos:end="323:24">||</operator> <name pos:start="323:26" pos:end="323:29">secs</name></expr>)</condition> <block pos:start="323:32" pos:end="349:5">{<block_content pos:start="325:9" pos:end="347:9">

        <if_stmt pos:start="325:9" pos:end="331:9"><if pos:start="325:9" pos:end="331:9">if <condition pos:start="325:12" pos:end="325:21">(<expr pos:start="325:13" pos:end="325:20"><name pos:start="325:13" pos:end="325:16">cyls</name> <operator pos:start="325:18" pos:end="325:18">&lt;</operator> <literal type="number" pos:start="325:20" pos:end="325:20">1</literal></expr>)</condition> <block pos:start="325:23" pos:end="331:9">{<block_content pos:start="327:13" pos:end="329:22">

            <expr_stmt pos:start="327:13" pos:end="327:57"><expr pos:start="327:13" pos:end="327:56"><call pos:start="327:13" pos:end="327:56"><name pos:start="327:13" pos:end="327:24">error_report</name><argument_list pos:start="327:25" pos:end="327:56">(<argument pos:start="327:26" pos:end="327:55"><expr pos:start="327:26" pos:end="327:55"><literal type="string" pos:start="327:26" pos:end="327:55">"invalid physical cyls number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="329:13" pos:end="329:22">goto <name pos:start="329:18" pos:end="329:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="333:9" pos:end="339:9"><if pos:start="333:9" pos:end="339:9">if <condition pos:start="333:12" pos:end="333:22">(<expr pos:start="333:13" pos:end="333:21"><name pos:start="333:13" pos:end="333:17">heads</name> <operator pos:start="333:19" pos:end="333:19">&lt;</operator> <literal type="number" pos:start="333:21" pos:end="333:21">1</literal></expr>)</condition> <block pos:start="333:24" pos:end="339:9">{<block_content pos:start="335:13" pos:end="337:22">

            <expr_stmt pos:start="335:13" pos:end="335:58"><expr pos:start="335:13" pos:end="335:57"><call pos:start="335:13" pos:end="335:57"><name pos:start="335:13" pos:end="335:24">error_report</name><argument_list pos:start="335:25" pos:end="335:57">(<argument pos:start="335:26" pos:end="335:56"><expr pos:start="335:26" pos:end="335:56"><literal type="string" pos:start="335:26" pos:end="335:56">"invalid physical heads number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="337:13" pos:end="337:22">goto <name pos:start="337:18" pos:end="337:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="341:9" pos:end="347:9"><if pos:start="341:9" pos:end="347:9">if <condition pos:start="341:12" pos:end="341:21">(<expr pos:start="341:13" pos:end="341:20"><name pos:start="341:13" pos:end="341:16">secs</name> <operator pos:start="341:18" pos:end="341:18">&lt;</operator> <literal type="number" pos:start="341:20" pos:end="341:20">1</literal></expr>)</condition> <block pos:start="341:23" pos:end="347:9">{<block_content pos:start="343:13" pos:end="345:22">

            <expr_stmt pos:start="343:13" pos:end="343:57"><expr pos:start="343:13" pos:end="343:56"><call pos:start="343:13" pos:end="343:56"><name pos:start="343:13" pos:end="343:24">error_report</name><argument_list pos:start="343:25" pos:end="343:56">(<argument pos:start="343:26" pos:end="343:55"><expr pos:start="343:26" pos:end="343:55"><literal type="string" pos:start="343:26" pos:end="343:55">"invalid physical secs number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="345:13" pos:end="345:22">goto <name pos:start="345:18" pos:end="345:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="353:5" pos:end="353:44"><expr pos:start="353:5" pos:end="353:43"><name pos:start="353:5" pos:end="353:15">translation</name> <operator pos:start="353:17" pos:end="353:17">=</operator> <name pos:start="353:19" pos:end="353:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:47"><expr pos:start="355:5" pos:end="355:46"><name pos:start="355:5" pos:end="355:9">value</name> <operator pos:start="355:11" pos:end="355:11">=</operator> <call pos:start="355:13" pos:end="355:46"><name pos:start="355:13" pos:end="355:24">qemu_opt_get</name><argument_list pos:start="355:25" pos:end="355:46">(<argument pos:start="355:26" pos:end="355:36"><expr pos:start="355:26" pos:end="355:36"><name pos:start="355:26" pos:end="355:36">legacy_opts</name></expr></argument>, <argument pos:start="355:39" pos:end="355:45"><expr pos:start="355:39" pos:end="355:45"><literal type="string" pos:start="355:39" pos:end="355:45">"trans"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="357:5" pos:end="397:5"><if pos:start="357:5" pos:end="397:5">if <condition pos:start="357:8" pos:end="357:22">(<expr pos:start="357:9" pos:end="357:21"><name pos:start="357:9" pos:end="357:13">value</name> <operator pos:start="357:15" pos:end="357:16">!=</operator> <name pos:start="357:18" pos:end="357:21">NULL</name></expr>)</condition> <block pos:start="357:24" pos:end="397:5">{<block_content pos:start="359:9" pos:end="395:9">

        <if_stmt pos:start="359:9" pos:end="367:9"><if pos:start="359:9" pos:end="367:9">if <condition pos:start="359:12" pos:end="359:18">(<expr pos:start="359:13" pos:end="359:17"><operator pos:start="359:13" pos:end="359:13">!</operator><name pos:start="359:14" pos:end="359:17">cyls</name></expr>)</condition> <block pos:start="359:20" pos:end="367:9">{<block_content pos:start="361:13" pos:end="365:22">

            <expr_stmt pos:start="361:13" pos:end="363:32"><expr pos:start="361:13" pos:end="363:31"><call pos:start="361:13" pos:end="363:31"><name pos:start="361:13" pos:end="361:24">error_report</name><argument_list pos:start="361:25" pos:end="363:31">(<argument pos:start="361:26" pos:end="361:76"><expr pos:start="361:26" pos:end="361:76"><literal type="string" pos:start="361:26" pos:end="361:76">"'%s' trans must be used with cyls, heads and secs"</literal></expr></argument>,

                         <argument pos:start="363:26" pos:end="363:30"><expr pos:start="363:26" pos:end="363:30"><name pos:start="363:26" pos:end="363:30">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="365:13" pos:end="365:22">goto <name pos:start="365:18" pos:end="365:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="369:9" pos:end="395:9"><if pos:start="369:9" pos:end="373:9">if <condition pos:start="369:12" pos:end="369:35">(<expr pos:start="369:13" pos:end="369:34"><operator pos:start="369:13" pos:end="369:13">!</operator><call pos:start="369:14" pos:end="369:34"><name pos:start="369:14" pos:end="369:19">strcmp</name><argument_list pos:start="369:20" pos:end="369:34">(<argument pos:start="369:21" pos:end="369:25"><expr pos:start="369:21" pos:end="369:25"><name pos:start="369:21" pos:end="369:25">value</name></expr></argument>, <argument pos:start="369:28" pos:end="369:33"><expr pos:start="369:28" pos:end="369:33"><literal type="string" pos:start="369:28" pos:end="369:33">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="369:37" pos:end="373:9">{<block_content pos:start="371:13" pos:end="371:52">

            <expr_stmt pos:start="371:13" pos:end="371:52"><expr pos:start="371:13" pos:end="371:51"><name pos:start="371:13" pos:end="371:23">translation</name> <operator pos:start="371:25" pos:end="371:25">=</operator> <name pos:start="371:27" pos:end="371:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="373:11" pos:end="377:9">else if <condition pos:start="373:19" pos:end="373:41">(<expr pos:start="373:20" pos:end="373:40"><operator pos:start="373:20" pos:end="373:20">!</operator><call pos:start="373:21" pos:end="373:40"><name pos:start="373:21" pos:end="373:26">strcmp</name><argument_list pos:start="373:27" pos:end="373:40">(<argument pos:start="373:28" pos:end="373:32"><expr pos:start="373:28" pos:end="373:32"><name pos:start="373:28" pos:end="373:32">value</name></expr></argument>, <argument pos:start="373:35" pos:end="373:39"><expr pos:start="373:35" pos:end="373:39"><literal type="string" pos:start="373:35" pos:end="373:39">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="373:43" pos:end="377:9">{<block_content pos:start="375:13" pos:end="375:51">

            <expr_stmt pos:start="375:13" pos:end="375:51"><expr pos:start="375:13" pos:end="375:50"><name pos:start="375:13" pos:end="375:23">translation</name> <operator pos:start="375:25" pos:end="375:25">=</operator> <name pos:start="375:27" pos:end="375:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="377:11" pos:end="381:9">else if <condition pos:start="377:19" pos:end="377:43">(<expr pos:start="377:20" pos:end="377:42"><operator pos:start="377:20" pos:end="377:20">!</operator><call pos:start="377:21" pos:end="377:42"><name pos:start="377:21" pos:end="377:26">strcmp</name><argument_list pos:start="377:27" pos:end="377:42">(<argument pos:start="377:28" pos:end="377:32"><expr pos:start="377:28" pos:end="377:32"><name pos:start="377:28" pos:end="377:32">value</name></expr></argument>, <argument pos:start="377:35" pos:end="377:41"><expr pos:start="377:35" pos:end="377:41"><literal type="string" pos:start="377:35" pos:end="377:41">"large"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="377:45" pos:end="381:9">{<block_content pos:start="379:13" pos:end="379:53">

            <expr_stmt pos:start="379:13" pos:end="379:53"><expr pos:start="379:13" pos:end="379:52"><name pos:start="379:13" pos:end="379:23">translation</name> <operator pos:start="379:25" pos:end="379:25">=</operator> <name pos:start="379:27" pos:end="379:52">BIOS_ATA_TRANSLATION_LARGE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="381:11" pos:end="385:9">else if <condition pos:start="381:19" pos:end="381:43">(<expr pos:start="381:20" pos:end="381:42"><operator pos:start="381:20" pos:end="381:20">!</operator><call pos:start="381:21" pos:end="381:42"><name pos:start="381:21" pos:end="381:26">strcmp</name><argument_list pos:start="381:27" pos:end="381:42">(<argument pos:start="381:28" pos:end="381:32"><expr pos:start="381:28" pos:end="381:32"><name pos:start="381:28" pos:end="381:32">value</name></expr></argument>, <argument pos:start="381:35" pos:end="381:41"><expr pos:start="381:35" pos:end="381:41"><literal type="string" pos:start="381:35" pos:end="381:41">"rechs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="381:45" pos:end="385:9">{<block_content pos:start="383:13" pos:end="383:53">

            <expr_stmt pos:start="383:13" pos:end="383:53"><expr pos:start="383:13" pos:end="383:52"><name pos:start="383:13" pos:end="383:23">translation</name> <operator pos:start="383:25" pos:end="383:25">=</operator> <name pos:start="383:27" pos:end="383:52">BIOS_ATA_TRANSLATION_RECHS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="385:11" pos:end="389:9">else if <condition pos:start="385:19" pos:end="385:42">(<expr pos:start="385:20" pos:end="385:41"><operator pos:start="385:20" pos:end="385:20">!</operator><call pos:start="385:21" pos:end="385:41"><name pos:start="385:21" pos:end="385:26">strcmp</name><argument_list pos:start="385:27" pos:end="385:41">(<argument pos:start="385:28" pos:end="385:32"><expr pos:start="385:28" pos:end="385:32"><name pos:start="385:28" pos:end="385:32">value</name></expr></argument>, <argument pos:start="385:35" pos:end="385:40"><expr pos:start="385:35" pos:end="385:40"><literal type="string" pos:start="385:35" pos:end="385:40">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="385:44" pos:end="389:9">{<block_content pos:start="387:13" pos:end="387:52">

            <expr_stmt pos:start="387:13" pos:end="387:52"><expr pos:start="387:13" pos:end="387:51"><name pos:start="387:13" pos:end="387:23">translation</name> <operator pos:start="387:25" pos:end="387:25">=</operator> <name pos:start="387:27" pos:end="387:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="389:11" pos:end="395:9">else <block pos:start="389:16" pos:end="395:9">{<block_content pos:start="391:13" pos:end="393:22">

            <expr_stmt pos:start="391:13" pos:end="391:65"><expr pos:start="391:13" pos:end="391:64"><call pos:start="391:13" pos:end="391:64"><name pos:start="391:13" pos:end="391:24">error_report</name><argument_list pos:start="391:25" pos:end="391:64">(<argument pos:start="391:26" pos:end="391:56"><expr pos:start="391:26" pos:end="391:56"><literal type="string" pos:start="391:26" pos:end="391:56">"'%s' invalid translation type"</literal></expr></argument>, <argument pos:start="391:59" pos:end="391:63"><expr pos:start="391:59" pos:end="391:63"><name pos:start="391:59" pos:end="391:63">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="393:13" pos:end="393:22">goto <name pos:start="393:18" pos:end="393:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="401:5" pos:end="411:5"><if pos:start="401:5" pos:end="411:5">if <condition pos:start="401:8" pos:end="401:29">(<expr pos:start="401:9" pos:end="401:28"><name pos:start="401:9" pos:end="401:13">media</name> <operator pos:start="401:15" pos:end="401:16">==</operator> <name pos:start="401:18" pos:end="401:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="401:31" pos:end="411:5">{<block_content pos:start="403:9" pos:end="409:9">

        <if_stmt pos:start="403:9" pos:end="409:9"><if pos:start="403:9" pos:end="409:9">if <condition pos:start="403:12" pos:end="403:34">(<expr pos:start="403:13" pos:end="403:33"><name pos:start="403:13" pos:end="403:16">cyls</name> <operator pos:start="403:18" pos:end="403:19">||</operator> <name pos:start="403:21" pos:end="403:24">secs</name> <operator pos:start="403:26" pos:end="403:27">||</operator> <name pos:start="403:29" pos:end="403:33">heads</name></expr>)</condition> <block pos:start="403:36" pos:end="409:9">{<block_content pos:start="405:13" pos:end="407:22">

            <expr_stmt pos:start="405:13" pos:end="405:62"><expr pos:start="405:13" pos:end="405:61"><call pos:start="405:13" pos:end="405:61"><name pos:start="405:13" pos:end="405:24">error_report</name><argument_list pos:start="405:25" pos:end="405:61">(<argument pos:start="405:26" pos:end="405:60"><expr pos:start="405:26" pos:end="405:60"><literal type="string" pos:start="405:26" pos:end="405:60">"CHS can't be set with media=cdrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="407:13" pos:end="407:22">goto <name pos:start="407:18" pos:end="407:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="415:5" pos:end="417:64">/* Device address specified by bus/unit or index.

     * If none was specified, try to find the first free one. */</comment>

    <expr_stmt pos:start="419:5" pos:end="419:57"><expr pos:start="419:5" pos:end="419:56"><name pos:start="419:5" pos:end="419:10">bus_id</name>  <operator pos:start="419:13" pos:end="419:13">=</operator> <call pos:start="419:15" pos:end="419:56"><name pos:start="419:15" pos:end="419:33">qemu_opt_get_number</name><argument_list pos:start="419:34" pos:end="419:56">(<argument pos:start="419:35" pos:end="419:45"><expr pos:start="419:35" pos:end="419:45"><name pos:start="419:35" pos:end="419:45">legacy_opts</name></expr></argument>, <argument pos:start="419:48" pos:end="419:52"><expr pos:start="419:48" pos:end="419:52"><literal type="string" pos:start="419:48" pos:end="419:52">"bus"</literal></expr></argument>, <argument pos:start="419:55" pos:end="419:55"><expr pos:start="419:55" pos:end="419:55"><literal type="number" pos:start="419:55" pos:end="419:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="421:5" pos:end="421:59"><expr pos:start="421:5" pos:end="421:58"><name pos:start="421:5" pos:end="421:11">unit_id</name> <operator pos:start="421:13" pos:end="421:13">=</operator> <call pos:start="421:15" pos:end="421:58"><name pos:start="421:15" pos:end="421:33">qemu_opt_get_number</name><argument_list pos:start="421:34" pos:end="421:58">(<argument pos:start="421:35" pos:end="421:45"><expr pos:start="421:35" pos:end="421:45"><name pos:start="421:35" pos:end="421:45">legacy_opts</name></expr></argument>, <argument pos:start="421:48" pos:end="421:53"><expr pos:start="421:48" pos:end="421:53"><literal type="string" pos:start="421:48" pos:end="421:53">"unit"</literal></expr></argument>, <argument pos:start="421:56" pos:end="421:57"><expr pos:start="421:56" pos:end="421:57"><operator pos:start="421:56" pos:end="421:56">-</operator><literal type="number" pos:start="421:57" pos:end="421:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:60"><expr pos:start="423:5" pos:end="423:59"><name pos:start="423:5" pos:end="423:9">index</name>   <operator pos:start="423:13" pos:end="423:13">=</operator> <call pos:start="423:15" pos:end="423:59"><name pos:start="423:15" pos:end="423:33">qemu_opt_get_number</name><argument_list pos:start="423:34" pos:end="423:59">(<argument pos:start="423:35" pos:end="423:45"><expr pos:start="423:35" pos:end="423:45"><name pos:start="423:35" pos:end="423:45">legacy_opts</name></expr></argument>, <argument pos:start="423:48" pos:end="423:54"><expr pos:start="423:48" pos:end="423:54"><literal type="string" pos:start="423:48" pos:end="423:54">"index"</literal></expr></argument>, <argument pos:start="423:57" pos:end="423:58"><expr pos:start="423:57" pos:end="423:58"><operator pos:start="423:57" pos:end="423:57">-</operator><literal type="number" pos:start="423:58" pos:end="423:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="427:5" pos:end="427:33"><expr pos:start="427:5" pos:end="427:32"><name pos:start="427:5" pos:end="427:12">max_devs</name> <operator pos:start="427:14" pos:end="427:14">=</operator> <name pos:start="427:16" pos:end="427:32"><name pos:start="427:16" pos:end="427:26">if_max_devs</name><index pos:start="427:27" pos:end="427:32">[<expr pos:start="427:28" pos:end="427:31"><name pos:start="427:28" pos:end="427:31">type</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="431:5" pos:end="445:5"><if pos:start="431:5" pos:end="445:5">if <condition pos:start="431:8" pos:end="431:20">(<expr pos:start="431:9" pos:end="431:19"><name pos:start="431:9" pos:end="431:13">index</name> <operator pos:start="431:15" pos:end="431:16">!=</operator> <operator pos:start="431:18" pos:end="431:18">-</operator><literal type="number" pos:start="431:19" pos:end="431:19">1</literal></expr>)</condition> <block pos:start="431:22" pos:end="445:5">{<block_content pos:start="433:9" pos:end="443:54">

        <if_stmt pos:start="433:9" pos:end="439:9"><if pos:start="433:9" pos:end="439:9">if <condition pos:start="433:12" pos:end="433:41">(<expr pos:start="433:13" pos:end="433:40"><name pos:start="433:13" pos:end="433:18">bus_id</name> <operator pos:start="433:20" pos:end="433:21">!=</operator> <literal type="number" pos:start="433:23" pos:end="433:23">0</literal> <operator pos:start="433:25" pos:end="433:26">||</operator> <name pos:start="433:28" pos:end="433:34">unit_id</name> <operator pos:start="433:36" pos:end="433:37">!=</operator> <operator pos:start="433:39" pos:end="433:39">-</operator><literal type="number" pos:start="433:40" pos:end="433:40">1</literal></expr>)</condition> <block pos:start="433:43" pos:end="439:9">{<block_content pos:start="435:13" pos:end="437:22">

            <expr_stmt pos:start="435:13" pos:end="435:67"><expr pos:start="435:13" pos:end="435:66"><call pos:start="435:13" pos:end="435:66"><name pos:start="435:13" pos:end="435:24">error_report</name><argument_list pos:start="435:25" pos:end="435:66">(<argument pos:start="435:26" pos:end="435:65"><expr pos:start="435:26" pos:end="435:65"><literal type="string" pos:start="435:26" pos:end="435:65">"index cannot be used with bus and unit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="437:13" pos:end="437:22">goto <name pos:start="437:18" pos:end="437:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="441:9" pos:end="441:52"><expr pos:start="441:9" pos:end="441:51"><name pos:start="441:9" pos:end="441:14">bus_id</name> <operator pos:start="441:16" pos:end="441:16">=</operator> <call pos:start="441:18" pos:end="441:51"><name pos:start="441:18" pos:end="441:38">drive_index_to_bus_id</name><argument_list pos:start="441:39" pos:end="441:51">(<argument pos:start="441:40" pos:end="441:43"><expr pos:start="441:40" pos:end="441:43"><name pos:start="441:40" pos:end="441:43">type</name></expr></argument>, <argument pos:start="441:46" pos:end="441:50"><expr pos:start="441:46" pos:end="441:50"><name pos:start="441:46" pos:end="441:50">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="443:9" pos:end="443:54"><expr pos:start="443:9" pos:end="443:53"><name pos:start="443:9" pos:end="443:15">unit_id</name> <operator pos:start="443:17" pos:end="443:17">=</operator> <call pos:start="443:19" pos:end="443:53"><name pos:start="443:19" pos:end="443:40">drive_index_to_unit_id</name><argument_list pos:start="443:41" pos:end="443:53">(<argument pos:start="443:42" pos:end="443:45"><expr pos:start="443:42" pos:end="443:45"><name pos:start="443:42" pos:end="443:45">type</name></expr></argument>, <argument pos:start="443:48" pos:end="443:52"><expr pos:start="443:48" pos:end="443:52"><name pos:start="443:48" pos:end="443:52">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="449:5" pos:end="467:5"><if pos:start="449:5" pos:end="467:5">if <condition pos:start="449:8" pos:end="449:22">(<expr pos:start="449:9" pos:end="449:21"><name pos:start="449:9" pos:end="449:15">unit_id</name> <operator pos:start="449:17" pos:end="449:18">==</operator> <operator pos:start="449:20" pos:end="449:20">-</operator><literal type="number" pos:start="449:21" pos:end="449:21">1</literal></expr>)</condition> <block pos:start="449:24" pos:end="467:5">{<block_content pos:start="451:8" pos:end="465:8">

       <expr_stmt pos:start="451:8" pos:end="451:19"><expr pos:start="451:8" pos:end="451:18"><name pos:start="451:8" pos:end="451:14">unit_id</name> <operator pos:start="451:16" pos:end="451:16">=</operator> <literal type="number" pos:start="451:18" pos:end="451:18">0</literal></expr>;</expr_stmt>

       <while pos:start="453:8" pos:end="465:8">while <condition pos:start="453:14" pos:end="453:55">(<expr pos:start="453:15" pos:end="453:54"><call pos:start="453:15" pos:end="453:46"><name pos:start="453:15" pos:end="453:23">drive_get</name><argument_list pos:start="453:24" pos:end="453:46">(<argument pos:start="453:25" pos:end="453:28"><expr pos:start="453:25" pos:end="453:28"><name pos:start="453:25" pos:end="453:28">type</name></expr></argument>, <argument pos:start="453:31" pos:end="453:36"><expr pos:start="453:31" pos:end="453:36"><name pos:start="453:31" pos:end="453:36">bus_id</name></expr></argument>, <argument pos:start="453:39" pos:end="453:45"><expr pos:start="453:39" pos:end="453:45"><name pos:start="453:39" pos:end="453:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="453:48" pos:end="453:49">!=</operator> <name pos:start="453:51" pos:end="453:54">NULL</name></expr>)</condition> <block pos:start="453:57" pos:end="465:8">{<block_content pos:start="455:12" pos:end="463:12">

           <expr_stmt pos:start="455:12" pos:end="455:21"><expr pos:start="455:12" pos:end="455:20"><name pos:start="455:12" pos:end="455:18">unit_id</name><operator pos:start="455:19" pos:end="455:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="457:12" pos:end="463:12"><if pos:start="457:12" pos:end="463:12">if <condition pos:start="457:15" pos:end="457:47">(<expr pos:start="457:16" pos:end="457:46"><name pos:start="457:16" pos:end="457:23">max_devs</name> <operator pos:start="457:25" pos:end="457:26">&amp;&amp;</operator> <name pos:start="457:28" pos:end="457:34">unit_id</name> <operator pos:start="457:36" pos:end="457:37">&gt;=</operator> <name pos:start="457:39" pos:end="457:46">max_devs</name></expr>)</condition> <block pos:start="457:49" pos:end="463:12">{<block_content pos:start="459:16" pos:end="461:24">

               <expr_stmt pos:start="459:16" pos:end="459:35"><expr pos:start="459:16" pos:end="459:34"><name pos:start="459:16" pos:end="459:22">unit_id</name> <operator pos:start="459:24" pos:end="459:25">-=</operator> <name pos:start="459:27" pos:end="459:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="461:16" pos:end="461:24"><expr pos:start="461:16" pos:end="461:23"><name pos:start="461:16" pos:end="461:21">bus_id</name><operator pos:start="461:22" pos:end="461:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="471:5" pos:end="477:5"><if pos:start="471:5" pos:end="477:5">if <condition pos:start="471:8" pos:end="471:40">(<expr pos:start="471:9" pos:end="471:39"><name pos:start="471:9" pos:end="471:16">max_devs</name> <operator pos:start="471:18" pos:end="471:19">&amp;&amp;</operator> <name pos:start="471:21" pos:end="471:27">unit_id</name> <operator pos:start="471:29" pos:end="471:30">&gt;=</operator> <name pos:start="471:32" pos:end="471:39">max_devs</name></expr>)</condition> <block pos:start="471:42" pos:end="477:5">{<block_content pos:start="473:9" pos:end="475:18">

        <expr_stmt pos:start="473:9" pos:end="473:75"><expr pos:start="473:9" pos:end="473:74"><call pos:start="473:9" pos:end="473:74"><name pos:start="473:9" pos:end="473:20">error_report</name><argument_list pos:start="473:21" pos:end="473:74">(<argument pos:start="473:22" pos:end="473:50"><expr pos:start="473:22" pos:end="473:50"><literal type="string" pos:start="473:22" pos:end="473:50">"unit %d too big (max is %d)"</literal></expr></argument>, <argument pos:start="473:53" pos:end="473:59"><expr pos:start="473:53" pos:end="473:59"><name pos:start="473:53" pos:end="473:59">unit_id</name></expr></argument>, <argument pos:start="473:62" pos:end="473:73"><expr pos:start="473:62" pos:end="473:73"><name pos:start="473:62" pos:end="473:69">max_devs</name> <operator pos:start="473:71" pos:end="473:71">-</operator> <literal type="number" pos:start="473:73" pos:end="473:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="475:9" pos:end="475:18">goto <name pos:start="475:14" pos:end="475:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="481:5" pos:end="489:5"><if pos:start="481:5" pos:end="489:5">if <condition pos:start="481:8" pos:end="481:49">(<expr pos:start="481:9" pos:end="481:48"><call pos:start="481:9" pos:end="481:40"><name pos:start="481:9" pos:end="481:17">drive_get</name><argument_list pos:start="481:18" pos:end="481:40">(<argument pos:start="481:19" pos:end="481:22"><expr pos:start="481:19" pos:end="481:22"><name pos:start="481:19" pos:end="481:22">type</name></expr></argument>, <argument pos:start="481:25" pos:end="481:30"><expr pos:start="481:25" pos:end="481:30"><name pos:start="481:25" pos:end="481:30">bus_id</name></expr></argument>, <argument pos:start="481:33" pos:end="481:39"><expr pos:start="481:33" pos:end="481:39"><name pos:start="481:33" pos:end="481:39">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="481:42" pos:end="481:43">!=</operator> <name pos:start="481:45" pos:end="481:48">NULL</name></expr>)</condition> <block pos:start="481:51" pos:end="489:5">{<block_content pos:start="483:9" pos:end="487:18">

        <expr_stmt pos:start="483:9" pos:end="485:45"><expr pos:start="483:9" pos:end="485:44"><call pos:start="483:9" pos:end="485:44"><name pos:start="483:9" pos:end="483:20">error_report</name><argument_list pos:start="483:21" pos:end="485:44">(<argument pos:start="483:22" pos:end="483:67"><expr pos:start="483:22" pos:end="483:67"><literal type="string" pos:start="483:22" pos:end="483:67">"drive with bus=%d, unit=%d (index=%d) exists"</literal></expr></argument>,

                     <argument pos:start="485:22" pos:end="485:27"><expr pos:start="485:22" pos:end="485:27"><name pos:start="485:22" pos:end="485:27">bus_id</name></expr></argument>, <argument pos:start="485:30" pos:end="485:36"><expr pos:start="485:30" pos:end="485:36"><name pos:start="485:30" pos:end="485:36">unit_id</name></expr></argument>, <argument pos:start="485:39" pos:end="485:43"><expr pos:start="485:39" pos:end="485:43"><name pos:start="485:39" pos:end="485:43">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="487:9" pos:end="487:18">goto <name pos:start="487:14" pos:end="487:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="493:5" pos:end="493:23">/* Serial number */</comment>

    <expr_stmt pos:start="495:5" pos:end="495:49"><expr pos:start="495:5" pos:end="495:48"><name pos:start="495:5" pos:end="495:10">serial</name> <operator pos:start="495:12" pos:end="495:12">=</operator> <call pos:start="495:14" pos:end="495:48"><name pos:start="495:14" pos:end="495:25">qemu_opt_get</name><argument_list pos:start="495:26" pos:end="495:48">(<argument pos:start="495:27" pos:end="495:37"><expr pos:start="495:27" pos:end="495:37"><name pos:start="495:27" pos:end="495:37">legacy_opts</name></expr></argument>, <argument pos:start="495:40" pos:end="495:47"><expr pos:start="495:40" pos:end="495:47"><literal type="string" pos:start="495:40" pos:end="495:47">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="499:5" pos:end="499:38">/* no id supplied -&gt; create one */</comment>

    <if_stmt pos:start="501:5" pos:end="531:5"><if pos:start="501:5" pos:end="531:5">if <condition pos:start="501:8" pos:end="501:39">(<expr pos:start="501:9" pos:end="501:38"><call pos:start="501:9" pos:end="501:30"><name pos:start="501:9" pos:end="501:20">qemu_opts_id</name><argument_list pos:start="501:21" pos:end="501:30">(<argument pos:start="501:22" pos:end="501:29"><expr pos:start="501:22" pos:end="501:29"><name pos:start="501:22" pos:end="501:29">all_opts</name></expr></argument>)</argument_list></call> <operator pos:start="501:32" pos:end="501:33">==</operator> <name pos:start="501:35" pos:end="501:38">NULL</name></expr>)</condition> <block pos:start="501:41" pos:end="531:5">{<block_content pos:start="503:9" pos:end="529:23">

        <decl_stmt pos:start="503:9" pos:end="503:21"><decl pos:start="503:9" pos:end="503:20"><type pos:start="503:9" pos:end="503:14"><name pos:start="503:9" pos:end="503:12">char</name> <modifier pos:start="503:14" pos:end="503:14">*</modifier></type><name pos:start="503:15" pos:end="503:20">new_id</name></decl>;</decl_stmt>

        <decl_stmt pos:start="505:9" pos:end="505:34"><decl pos:start="505:9" pos:end="505:33"><type pos:start="505:9" pos:end="505:20"><specifier pos:start="505:9" pos:end="505:13">const</specifier> <name pos:start="505:15" pos:end="505:18">char</name> <modifier pos:start="505:20" pos:end="505:20">*</modifier></type><name pos:start="505:21" pos:end="505:28">mediastr</name> <init pos:start="505:30" pos:end="505:33">= <expr pos:start="505:32" pos:end="505:33"><literal type="string" pos:start="505:32" pos:end="505:33">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="507:9" pos:end="511:9"><if pos:start="507:9" pos:end="511:9">if <condition pos:start="507:12" pos:end="507:46">(<expr pos:start="507:13" pos:end="507:45"><name pos:start="507:13" pos:end="507:16">type</name> <operator pos:start="507:18" pos:end="507:19">==</operator> <name pos:start="507:21" pos:end="507:26">IF_IDE</name> <operator pos:start="507:28" pos:end="507:29">||</operator> <name pos:start="507:31" pos:end="507:34">type</name> <operator pos:start="507:36" pos:end="507:37">==</operator> <name pos:start="507:39" pos:end="507:45">IF_SCSI</name></expr>)</condition> <block pos:start="507:48" pos:end="511:9">{<block_content pos:start="509:13" pos:end="509:62">

            <expr_stmt pos:start="509:13" pos:end="509:62"><expr pos:start="509:13" pos:end="509:61"><name pos:start="509:13" pos:end="509:20">mediastr</name> <operator pos:start="509:22" pos:end="509:22">=</operator> <ternary pos:start="509:24" pos:end="509:61"><condition pos:start="509:24" pos:end="509:47"><expr pos:start="509:24" pos:end="509:45"><operator pos:start="509:24" pos:end="509:24">(</operator><name pos:start="509:25" pos:end="509:29">media</name> <operator pos:start="509:31" pos:end="509:32">==</operator> <name pos:start="509:34" pos:end="509:44">MEDIA_CDROM</name><operator pos:start="509:45" pos:end="509:45">)</operator></expr> ?</condition><then pos:start="509:49" pos:end="509:53"> <expr pos:start="509:49" pos:end="509:53"><literal type="string" pos:start="509:49" pos:end="509:53">"-cd"</literal></expr> </then><else pos:start="509:55" pos:end="509:61">: <expr pos:start="509:57" pos:end="509:61"><literal type="string" pos:start="509:57" pos:end="509:61">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="513:9" pos:end="525:9"><if pos:start="513:9" pos:end="519:9">if <condition pos:start="513:12" pos:end="513:21">(<expr pos:start="513:13" pos:end="513:20"><name pos:start="513:13" pos:end="513:20">max_devs</name></expr>)</condition> <block pos:start="513:23" pos:end="519:9">{<block_content pos:start="515:13" pos:end="517:56">

            <expr_stmt pos:start="515:13" pos:end="517:56"><expr pos:start="515:13" pos:end="517:55"><name pos:start="515:13" pos:end="515:18">new_id</name> <operator pos:start="515:20" pos:end="515:20">=</operator> <call pos:start="515:22" pos:end="517:55"><name pos:start="515:22" pos:end="515:36">g_strdup_printf</name><argument_list pos:start="515:37" pos:end="517:55">(<argument pos:start="515:38" pos:end="515:47"><expr pos:start="515:38" pos:end="515:47"><literal type="string" pos:start="515:38" pos:end="515:47">"%s%i%s%i"</literal></expr></argument>, <argument pos:start="515:50" pos:end="515:62"><expr pos:start="515:50" pos:end="515:62"><name pos:start="515:50" pos:end="515:62"><name pos:start="515:50" pos:end="515:56">if_name</name><index pos:start="515:57" pos:end="515:62">[<expr pos:start="515:58" pos:end="515:61"><name pos:start="515:58" pos:end="515:61">type</name></expr>]</index></name></expr></argument>, <argument pos:start="515:65" pos:end="515:70"><expr pos:start="515:65" pos:end="515:70"><name pos:start="515:65" pos:end="515:70">bus_id</name></expr></argument>,

                                     <argument pos:start="517:38" pos:end="517:45"><expr pos:start="517:38" pos:end="517:45"><name pos:start="517:38" pos:end="517:45">mediastr</name></expr></argument>, <argument pos:start="517:48" pos:end="517:54"><expr pos:start="517:48" pos:end="517:54"><name pos:start="517:48" pos:end="517:54">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="519:11" pos:end="525:9">else <block pos:start="519:16" pos:end="525:9">{<block_content pos:start="521:13" pos:end="523:56">

            <expr_stmt pos:start="521:13" pos:end="523:56"><expr pos:start="521:13" pos:end="523:55"><name pos:start="521:13" pos:end="521:18">new_id</name> <operator pos:start="521:20" pos:end="521:20">=</operator> <call pos:start="521:22" pos:end="523:55"><name pos:start="521:22" pos:end="521:36">g_strdup_printf</name><argument_list pos:start="521:37" pos:end="523:55">(<argument pos:start="521:38" pos:end="521:45"><expr pos:start="521:38" pos:end="521:45"><literal type="string" pos:start="521:38" pos:end="521:45">"%s%s%i"</literal></expr></argument>, <argument pos:start="521:48" pos:end="521:60"><expr pos:start="521:48" pos:end="521:60"><name pos:start="521:48" pos:end="521:60"><name pos:start="521:48" pos:end="521:54">if_name</name><index pos:start="521:55" pos:end="521:60">[<expr pos:start="521:56" pos:end="521:59"><name pos:start="521:56" pos:end="521:59">type</name></expr>]</index></name></expr></argument>,

                                     <argument pos:start="523:38" pos:end="523:45"><expr pos:start="523:38" pos:end="523:45"><name pos:start="523:38" pos:end="523:45">mediastr</name></expr></argument>, <argument pos:start="523:48" pos:end="523:54"><expr pos:start="523:48" pos:end="523:54"><name pos:start="523:48" pos:end="523:54">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="527:9" pos:end="527:45"><expr pos:start="527:9" pos:end="527:44"><call pos:start="527:9" pos:end="527:44"><name pos:start="527:9" pos:end="527:21">qdict_put_str</name><argument_list pos:start="527:22" pos:end="527:44">(<argument pos:start="527:23" pos:end="527:29"><expr pos:start="527:23" pos:end="527:29"><name pos:start="527:23" pos:end="527:29">bs_opts</name></expr></argument>, <argument pos:start="527:32" pos:end="527:35"><expr pos:start="527:32" pos:end="527:35"><literal type="string" pos:start="527:32" pos:end="527:35">"id"</literal></expr></argument>, <argument pos:start="527:38" pos:end="527:43"><expr pos:start="527:38" pos:end="527:43"><name pos:start="527:38" pos:end="527:43">new_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="529:9" pos:end="529:23"><expr pos:start="529:9" pos:end="529:22"><call pos:start="529:9" pos:end="529:22"><name pos:start="529:9" pos:end="529:14">g_free</name><argument_list pos:start="529:15" pos:end="529:22">(<argument pos:start="529:16" pos:end="529:21"><expr pos:start="529:16" pos:end="529:21"><name pos:start="529:16" pos:end="529:21">new_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="535:5" pos:end="535:33">/* Add virtio block device */</comment>

    <expr_stmt pos:start="537:5" pos:end="537:48"><expr pos:start="537:5" pos:end="537:47"><name pos:start="537:5" pos:end="537:11">devaddr</name> <operator pos:start="537:13" pos:end="537:13">=</operator> <call pos:start="537:15" pos:end="537:47"><name pos:start="537:15" pos:end="537:26">qemu_opt_get</name><argument_list pos:start="537:27" pos:end="537:47">(<argument pos:start="537:28" pos:end="537:38"><expr pos:start="537:28" pos:end="537:38"><name pos:start="537:28" pos:end="537:38">legacy_opts</name></expr></argument>, <argument pos:start="537:41" pos:end="537:46"><expr pos:start="537:41" pos:end="537:46"><literal type="string" pos:start="537:41" pos:end="537:46">"addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="539:5" pos:end="545:5"><if pos:start="539:5" pos:end="545:5">if <condition pos:start="539:8" pos:end="539:37">(<expr pos:start="539:9" pos:end="539:36"><name pos:start="539:9" pos:end="539:15">devaddr</name> <operator pos:start="539:17" pos:end="539:18">&amp;&amp;</operator> <name pos:start="539:20" pos:end="539:23">type</name> <operator pos:start="539:25" pos:end="539:26">!=</operator> <name pos:start="539:28" pos:end="539:36">IF_VIRTIO</name></expr>)</condition> <block pos:start="539:39" pos:end="545:5">{<block_content pos:start="541:9" pos:end="543:18">

        <expr_stmt pos:start="541:9" pos:end="541:63"><expr pos:start="541:9" pos:end="541:62"><call pos:start="541:9" pos:end="541:62"><name pos:start="541:9" pos:end="541:20">error_report</name><argument_list pos:start="541:21" pos:end="541:62">(<argument pos:start="541:22" pos:end="541:61"><expr pos:start="541:22" pos:end="541:61"><literal type="string" pos:start="541:22" pos:end="541:61">"addr is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="543:9" pos:end="543:18">goto <name pos:start="543:14" pos:end="543:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="549:5" pos:end="577:5"><if pos:start="549:5" pos:end="577:5">if <condition pos:start="549:8" pos:end="549:26">(<expr pos:start="549:9" pos:end="549:25"><name pos:start="549:9" pos:end="549:12">type</name> <operator pos:start="549:14" pos:end="549:15">==</operator> <name pos:start="549:17" pos:end="549:25">IF_VIRTIO</name></expr>)</condition> <block pos:start="549:28" pos:end="577:5">{<block_content pos:start="551:9" pos:end="575:9">

        <decl_stmt pos:start="551:9" pos:end="551:26"><decl pos:start="551:9" pos:end="551:25"><type pos:start="551:9" pos:end="551:18"><name pos:start="551:9" pos:end="551:16">QemuOpts</name> <modifier pos:start="551:18" pos:end="551:18">*</modifier></type><name pos:start="551:19" pos:end="551:25">devopts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="553:9" pos:end="555:49"><expr pos:start="553:9" pos:end="555:48"><name pos:start="553:9" pos:end="553:15">devopts</name> <operator pos:start="553:17" pos:end="553:17">=</operator> <call pos:start="553:19" pos:end="555:48"><name pos:start="553:19" pos:end="553:34">qemu_opts_create</name><argument_list pos:start="553:35" pos:end="555:48">(<argument pos:start="553:36" pos:end="553:59"><expr pos:start="553:36" pos:end="553:59"><call pos:start="553:36" pos:end="553:59"><name pos:start="553:36" pos:end="553:49">qemu_find_opts</name><argument_list pos:start="553:50" pos:end="553:59">(<argument pos:start="553:51" pos:end="553:58"><expr pos:start="553:51" pos:end="553:58"><literal type="string" pos:start="553:51" pos:end="553:58">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="553:62" pos:end="553:65"><expr pos:start="553:62" pos:end="553:65"><name pos:start="553:62" pos:end="553:65">NULL</name></expr></argument>, <argument pos:start="553:68" pos:end="553:68"><expr pos:start="553:68" pos:end="553:68"><literal type="number" pos:start="553:68" pos:end="553:68">0</literal></expr></argument>,

                                   <argument pos:start="555:36" pos:end="555:47"><expr pos:start="555:36" pos:end="555:47"><operator pos:start="555:36" pos:end="555:36">&amp;</operator><name pos:start="555:37" pos:end="555:47">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="557:9" pos:end="565:9"><if pos:start="557:9" pos:end="561:9">if <condition pos:start="557:12" pos:end="557:41">(<expr pos:start="557:13" pos:end="557:40"><name pos:start="557:13" pos:end="557:21">arch_type</name> <operator pos:start="557:23" pos:end="557:24">==</operator> <name pos:start="557:26" pos:end="557:40">QEMU_ARCH_S390X</name></expr>)</condition> <block pos:start="557:43" pos:end="561:9">{<block_content pos:start="559:13" pos:end="559:76">

            <expr_stmt pos:start="559:13" pos:end="559:76"><expr pos:start="559:13" pos:end="559:75"><call pos:start="559:13" pos:end="559:75"><name pos:start="559:13" pos:end="559:24">qemu_opt_set</name><argument_list pos:start="559:25" pos:end="559:75">(<argument pos:start="559:26" pos:end="559:32"><expr pos:start="559:26" pos:end="559:32"><name pos:start="559:26" pos:end="559:32">devopts</name></expr></argument>, <argument pos:start="559:35" pos:end="559:42"><expr pos:start="559:35" pos:end="559:42"><literal type="string" pos:start="559:35" pos:end="559:42">"driver"</literal></expr></argument>, <argument pos:start="559:45" pos:end="559:60"><expr pos:start="559:45" pos:end="559:60"><literal type="string" pos:start="559:45" pos:end="559:60">"virtio-blk-ccw"</literal></expr></argument>, <argument pos:start="559:63" pos:end="559:74"><expr pos:start="559:63" pos:end="559:74"><operator pos:start="559:63" pos:end="559:63">&amp;</operator><name pos:start="559:64" pos:end="559:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="561:11" pos:end="565:9">else <block pos:start="561:16" pos:end="565:9">{<block_content pos:start="563:13" pos:end="563:76">

            <expr_stmt pos:start="563:13" pos:end="563:76"><expr pos:start="563:13" pos:end="563:75"><call pos:start="563:13" pos:end="563:75"><name pos:start="563:13" pos:end="563:24">qemu_opt_set</name><argument_list pos:start="563:25" pos:end="563:75">(<argument pos:start="563:26" pos:end="563:32"><expr pos:start="563:26" pos:end="563:32"><name pos:start="563:26" pos:end="563:32">devopts</name></expr></argument>, <argument pos:start="563:35" pos:end="563:42"><expr pos:start="563:35" pos:end="563:42"><literal type="string" pos:start="563:35" pos:end="563:42">"driver"</literal></expr></argument>, <argument pos:start="563:45" pos:end="563:60"><expr pos:start="563:45" pos:end="563:60"><literal type="string" pos:start="563:45" pos:end="563:60">"virtio-blk-pci"</literal></expr></argument>, <argument pos:start="563:63" pos:end="563:74"><expr pos:start="563:63" pos:end="563:74"><operator pos:start="563:63" pos:end="563:63">&amp;</operator><name pos:start="563:64" pos:end="563:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="567:9" pos:end="569:35"><expr pos:start="567:9" pos:end="569:34"><call pos:start="567:9" pos:end="569:34"><name pos:start="567:9" pos:end="567:20">qemu_opt_set</name><argument_list pos:start="567:21" pos:end="569:34">(<argument pos:start="567:22" pos:end="567:28"><expr pos:start="567:22" pos:end="567:28"><name pos:start="567:22" pos:end="567:28">devopts</name></expr></argument>, <argument pos:start="567:31" pos:end="567:37"><expr pos:start="567:31" pos:end="567:37"><literal type="string" pos:start="567:31" pos:end="567:37">"drive"</literal></expr></argument>, <argument pos:start="567:40" pos:end="567:67"><expr pos:start="567:40" pos:end="567:67"><call pos:start="567:40" pos:end="567:67"><name pos:start="567:40" pos:end="567:52">qdict_get_str</name><argument_list pos:start="567:53" pos:end="567:67">(<argument pos:start="567:54" pos:end="567:60"><expr pos:start="567:54" pos:end="567:60"><name pos:start="567:54" pos:end="567:60">bs_opts</name></expr></argument>, <argument pos:start="567:63" pos:end="567:66"><expr pos:start="567:63" pos:end="567:66"><literal type="string" pos:start="567:63" pos:end="567:66">"id"</literal></expr></argument>)</argument_list></call></expr></argument>,

                     <argument pos:start="569:22" pos:end="569:33"><expr pos:start="569:22" pos:end="569:33"><operator pos:start="569:22" pos:end="569:22">&amp;</operator><name pos:start="569:23" pos:end="569:33">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="571:9" pos:end="575:9"><if pos:start="571:9" pos:end="575:9">if <condition pos:start="571:12" pos:end="571:20">(<expr pos:start="571:13" pos:end="571:19"><name pos:start="571:13" pos:end="571:19">devaddr</name></expr>)</condition> <block pos:start="571:22" pos:end="575:9">{<block_content pos:start="573:13" pos:end="573:65">

            <expr_stmt pos:start="573:13" pos:end="573:65"><expr pos:start="573:13" pos:end="573:64"><call pos:start="573:13" pos:end="573:64"><name pos:start="573:13" pos:end="573:24">qemu_opt_set</name><argument_list pos:start="573:25" pos:end="573:64">(<argument pos:start="573:26" pos:end="573:32"><expr pos:start="573:26" pos:end="573:32"><name pos:start="573:26" pos:end="573:32">devopts</name></expr></argument>, <argument pos:start="573:35" pos:end="573:40"><expr pos:start="573:35" pos:end="573:40"><literal type="string" pos:start="573:35" pos:end="573:40">"addr"</literal></expr></argument>, <argument pos:start="573:43" pos:end="573:49"><expr pos:start="573:43" pos:end="573:49"><name pos:start="573:43" pos:end="573:49">devaddr</name></expr></argument>, <argument pos:start="573:52" pos:end="573:63"><expr pos:start="573:52" pos:end="573:63"><operator pos:start="573:52" pos:end="573:52">&amp;</operator><name pos:start="573:53" pos:end="573:63">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="581:5" pos:end="581:49"><expr pos:start="581:5" pos:end="581:48"><name pos:start="581:5" pos:end="581:12">filename</name> <operator pos:start="581:14" pos:end="581:14">=</operator> <call pos:start="581:16" pos:end="581:48"><name pos:start="581:16" pos:end="581:27">qemu_opt_get</name><argument_list pos:start="581:28" pos:end="581:48">(<argument pos:start="581:29" pos:end="581:39"><expr pos:start="581:29" pos:end="581:39"><name pos:start="581:29" pos:end="581:39">legacy_opts</name></expr></argument>, <argument pos:start="581:42" pos:end="581:47"><expr pos:start="581:42" pos:end="581:47"><literal type="string" pos:start="581:42" pos:end="581:47">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="585:5" pos:end="585:55">/* Check werror/rerror compatibility with if=... */</comment>

    <expr_stmt pos:start="587:5" pos:end="587:49"><expr pos:start="587:5" pos:end="587:48"><name pos:start="587:5" pos:end="587:10">werror</name> <operator pos:start="587:12" pos:end="587:12">=</operator> <call pos:start="587:14" pos:end="587:48"><name pos:start="587:14" pos:end="587:25">qemu_opt_get</name><argument_list pos:start="587:26" pos:end="587:48">(<argument pos:start="587:27" pos:end="587:37"><expr pos:start="587:27" pos:end="587:37"><name pos:start="587:27" pos:end="587:37">legacy_opts</name></expr></argument>, <argument pos:start="587:40" pos:end="587:47"><expr pos:start="587:40" pos:end="587:47"><literal type="string" pos:start="587:40" pos:end="587:47">"werror"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="589:5" pos:end="603:5"><if pos:start="589:5" pos:end="603:5">if <condition pos:start="589:8" pos:end="589:23">(<expr pos:start="589:9" pos:end="589:22"><name pos:start="589:9" pos:end="589:14">werror</name> <operator pos:start="589:16" pos:end="589:17">!=</operator> <name pos:start="589:19" pos:end="589:22">NULL</name></expr>)</condition> <block pos:start="589:25" pos:end="603:5">{<block_content pos:start="591:9" pos:end="601:49">

        <if_stmt pos:start="591:9" pos:end="599:9"><if pos:start="591:9" pos:end="599:9">if <condition pos:start="591:12" pos:end="593:28">(<expr pos:start="591:13" pos:end="593:27"><name pos:start="591:13" pos:end="591:16">type</name> <operator pos:start="591:18" pos:end="591:19">!=</operator> <name pos:start="591:21" pos:end="591:26">IF_IDE</name> <operator pos:start="591:28" pos:end="591:29">&amp;&amp;</operator> <name pos:start="591:31" pos:end="591:34">type</name> <operator pos:start="591:36" pos:end="591:37">!=</operator> <name pos:start="591:39" pos:end="591:45">IF_SCSI</name> <operator pos:start="591:47" pos:end="591:48">&amp;&amp;</operator> <name pos:start="591:50" pos:end="591:53">type</name> <operator pos:start="591:55" pos:end="591:56">!=</operator> <name pos:start="591:58" pos:end="591:66">IF_VIRTIO</name> <operator pos:start="591:68" pos:end="591:69">&amp;&amp;</operator>

            <name pos:start="593:13" pos:end="593:16">type</name> <operator pos:start="593:18" pos:end="593:19">!=</operator> <name pos:start="593:21" pos:end="593:27">IF_NONE</name></expr>)</condition> <block pos:start="593:30" pos:end="599:9">{<block_content pos:start="595:13" pos:end="597:22">

            <expr_stmt pos:start="595:13" pos:end="595:69"><expr pos:start="595:13" pos:end="595:68"><call pos:start="595:13" pos:end="595:68"><name pos:start="595:13" pos:end="595:24">error_report</name><argument_list pos:start="595:25" pos:end="595:68">(<argument pos:start="595:26" pos:end="595:67"><expr pos:start="595:26" pos:end="595:67"><literal type="string" pos:start="595:26" pos:end="595:67">"werror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="597:13" pos:end="597:22">goto <name pos:start="597:18" pos:end="597:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:49"><expr pos:start="601:9" pos:end="601:48"><call pos:start="601:9" pos:end="601:48"><name pos:start="601:9" pos:end="601:21">qdict_put_str</name><argument_list pos:start="601:22" pos:end="601:48">(<argument pos:start="601:23" pos:end="601:29"><expr pos:start="601:23" pos:end="601:29"><name pos:start="601:23" pos:end="601:29">bs_opts</name></expr></argument>, <argument pos:start="601:32" pos:end="601:39"><expr pos:start="601:32" pos:end="601:39"><literal type="string" pos:start="601:32" pos:end="601:39">"werror"</literal></expr></argument>, <argument pos:start="601:42" pos:end="601:47"><expr pos:start="601:42" pos:end="601:47"><name pos:start="601:42" pos:end="601:47">werror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="607:5" pos:end="607:49"><expr pos:start="607:5" pos:end="607:48"><name pos:start="607:5" pos:end="607:10">rerror</name> <operator pos:start="607:12" pos:end="607:12">=</operator> <call pos:start="607:14" pos:end="607:48"><name pos:start="607:14" pos:end="607:25">qemu_opt_get</name><argument_list pos:start="607:26" pos:end="607:48">(<argument pos:start="607:27" pos:end="607:37"><expr pos:start="607:27" pos:end="607:37"><name pos:start="607:27" pos:end="607:37">legacy_opts</name></expr></argument>, <argument pos:start="607:40" pos:end="607:47"><expr pos:start="607:40" pos:end="607:47"><literal type="string" pos:start="607:40" pos:end="607:47">"rerror"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="609:5" pos:end="623:5"><if pos:start="609:5" pos:end="623:5">if <condition pos:start="609:8" pos:end="609:23">(<expr pos:start="609:9" pos:end="609:22"><name pos:start="609:9" pos:end="609:14">rerror</name> <operator pos:start="609:16" pos:end="609:17">!=</operator> <name pos:start="609:19" pos:end="609:22">NULL</name></expr>)</condition> <block pos:start="609:25" pos:end="623:5">{<block_content pos:start="611:9" pos:end="621:49">

        <if_stmt pos:start="611:9" pos:end="619:9"><if pos:start="611:9" pos:end="619:9">if <condition pos:start="611:12" pos:end="613:28">(<expr pos:start="611:13" pos:end="613:27"><name pos:start="611:13" pos:end="611:16">type</name> <operator pos:start="611:18" pos:end="611:19">!=</operator> <name pos:start="611:21" pos:end="611:26">IF_IDE</name> <operator pos:start="611:28" pos:end="611:29">&amp;&amp;</operator> <name pos:start="611:31" pos:end="611:34">type</name> <operator pos:start="611:36" pos:end="611:37">!=</operator> <name pos:start="611:39" pos:end="611:47">IF_VIRTIO</name> <operator pos:start="611:49" pos:end="611:50">&amp;&amp;</operator> <name pos:start="611:52" pos:end="611:55">type</name> <operator pos:start="611:57" pos:end="611:58">!=</operator> <name pos:start="611:60" pos:end="611:66">IF_SCSI</name> <operator pos:start="611:68" pos:end="611:69">&amp;&amp;</operator>

            <name pos:start="613:13" pos:end="613:16">type</name> <operator pos:start="613:18" pos:end="613:19">!=</operator> <name pos:start="613:21" pos:end="613:27">IF_NONE</name></expr>)</condition> <block pos:start="613:30" pos:end="619:9">{<block_content pos:start="615:13" pos:end="617:22">

            <expr_stmt pos:start="615:13" pos:end="615:69"><expr pos:start="615:13" pos:end="615:68"><call pos:start="615:13" pos:end="615:68"><name pos:start="615:13" pos:end="615:24">error_report</name><argument_list pos:start="615:25" pos:end="615:68">(<argument pos:start="615:26" pos:end="615:67"><expr pos:start="615:26" pos:end="615:67"><literal type="string" pos:start="615:26" pos:end="615:67">"rerror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="617:13" pos:end="617:22">goto <name pos:start="617:18" pos:end="617:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="621:9" pos:end="621:49"><expr pos:start="621:9" pos:end="621:48"><call pos:start="621:9" pos:end="621:48"><name pos:start="621:9" pos:end="621:21">qdict_put_str</name><argument_list pos:start="621:22" pos:end="621:48">(<argument pos:start="621:23" pos:end="621:29"><expr pos:start="621:23" pos:end="621:29"><name pos:start="621:23" pos:end="621:29">bs_opts</name></expr></argument>, <argument pos:start="621:32" pos:end="621:39"><expr pos:start="621:32" pos:end="621:39"><literal type="string" pos:start="621:32" pos:end="621:39">"rerror"</literal></expr></argument>, <argument pos:start="621:42" pos:end="621:47"><expr pos:start="621:42" pos:end="621:47"><name pos:start="621:42" pos:end="621:47">rerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="627:5" pos:end="627:74">/* Actual block device init: Functionality shared with blockdev-add */</comment>

    <expr_stmt pos:start="629:5" pos:end="629:55"><expr pos:start="629:5" pos:end="629:54"><name pos:start="629:5" pos:end="629:7">blk</name> <operator pos:start="629:9" pos:end="629:9">=</operator> <call pos:start="629:11" pos:end="629:54"><name pos:start="629:11" pos:end="629:23">blockdev_init</name><argument_list pos:start="629:24" pos:end="629:54">(<argument pos:start="629:25" pos:end="629:32"><expr pos:start="629:25" pos:end="629:32"><name pos:start="629:25" pos:end="629:32">filename</name></expr></argument>, <argument pos:start="629:35" pos:end="629:41"><expr pos:start="629:35" pos:end="629:41"><name pos:start="629:35" pos:end="629:41">bs_opts</name></expr></argument>, <argument pos:start="629:44" pos:end="629:53"><expr pos:start="629:44" pos:end="629:53"><operator pos:start="629:44" pos:end="629:44">&amp;</operator><name pos:start="629:45" pos:end="629:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="631:5" pos:end="631:19"><expr pos:start="631:5" pos:end="631:18"><name pos:start="631:5" pos:end="631:11">bs_opts</name> <operator pos:start="631:13" pos:end="631:13">=</operator> <name pos:start="631:15" pos:end="631:18">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="633:5" pos:end="647:5"><if pos:start="633:5" pos:end="643:5">if <condition pos:start="633:8" pos:end="633:13">(<expr pos:start="633:9" pos:end="633:12"><operator pos:start="633:9" pos:end="633:9">!</operator><name pos:start="633:10" pos:end="633:12">blk</name></expr>)</condition> <block pos:start="633:15" pos:end="643:5">{<block_content pos:start="635:9" pos:end="641:18">

        <if_stmt pos:start="635:9" pos:end="639:9"><if pos:start="635:9" pos:end="639:9">if <condition pos:start="635:12" pos:end="635:22">(<expr pos:start="635:13" pos:end="635:21"><name pos:start="635:13" pos:end="635:21">local_err</name></expr>)</condition> <block pos:start="635:24" pos:end="639:9">{<block_content pos:start="637:13" pos:end="637:40">

            <expr_stmt pos:start="637:13" pos:end="637:40"><expr pos:start="637:13" pos:end="637:39"><call pos:start="637:13" pos:end="637:39"><name pos:start="637:13" pos:end="637:28">error_report_err</name><argument_list pos:start="637:29" pos:end="637:39">(<argument pos:start="637:30" pos:end="637:38"><expr pos:start="637:30" pos:end="637:38"><name pos:start="637:30" pos:end="637:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="641:9" pos:end="641:18">goto <name pos:start="641:14" pos:end="641:17">fail</name>;</goto>

    </block_content>}</block></if> <else pos:start="643:7" pos:end="647:5">else <block pos:start="643:12" pos:end="647:5">{<block_content pos:start="645:9" pos:end="645:27">

        <expr_stmt pos:start="645:9" pos:end="645:27"><expr pos:start="645:9" pos:end="645:26"><call pos:start="645:9" pos:end="645:26"><name pos:start="645:9" pos:end="645:14">assert</name><argument_list pos:start="645:15" pos:end="645:26">(<argument pos:start="645:16" pos:end="645:25"><expr pos:start="645:16" pos:end="645:25"><operator pos:start="645:16" pos:end="645:16">!</operator><name pos:start="645:17" pos:end="645:25">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="651:5" pos:end="651:33">/* Create legacy DriveInfo */</comment>

    <expr_stmt pos:start="653:5" pos:end="653:38"><expr pos:start="653:5" pos:end="653:37"><name pos:start="653:5" pos:end="653:9">dinfo</name> <operator pos:start="653:11" pos:end="653:11">=</operator> <call pos:start="653:13" pos:end="653:37"><name pos:start="653:13" pos:end="653:21">g_malloc0</name><argument_list pos:start="653:22" pos:end="653:37">(<argument pos:start="653:23" pos:end="653:36"><expr pos:start="653:23" pos:end="653:36"><sizeof pos:start="653:23" pos:end="653:36">sizeof<argument_list pos:start="653:29" pos:end="653:36">(<argument pos:start="653:30" pos:end="653:35"><expr pos:start="653:30" pos:end="653:35"><operator pos:start="653:30" pos:end="653:30">*</operator><name pos:start="653:31" pos:end="653:35">dinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="655:5" pos:end="655:27"><expr pos:start="655:5" pos:end="655:26"><name pos:start="655:5" pos:end="655:15"><name pos:start="655:5" pos:end="655:9">dinfo</name><operator pos:start="655:10" pos:end="655:11">-&gt;</operator><name pos:start="655:12" pos:end="655:15">opts</name></name> <operator pos:start="655:17" pos:end="655:17">=</operator> <name pos:start="655:19" pos:end="655:26">all_opts</name></expr>;</expr_stmt>



    <expr_stmt pos:start="659:5" pos:end="659:23"><expr pos:start="659:5" pos:end="659:22"><name pos:start="659:5" pos:end="659:15"><name pos:start="659:5" pos:end="659:9">dinfo</name><operator pos:start="659:10" pos:end="659:11">-&gt;</operator><name pos:start="659:12" pos:end="659:15">cyls</name></name> <operator pos:start="659:17" pos:end="659:17">=</operator> <name pos:start="659:19" pos:end="659:22">cyls</name></expr>;</expr_stmt>

    <expr_stmt pos:start="661:5" pos:end="661:25"><expr pos:start="661:5" pos:end="661:24"><name pos:start="661:5" pos:end="661:16"><name pos:start="661:5" pos:end="661:9">dinfo</name><operator pos:start="661:10" pos:end="661:11">-&gt;</operator><name pos:start="661:12" pos:end="661:16">heads</name></name> <operator pos:start="661:18" pos:end="661:18">=</operator> <name pos:start="661:20" pos:end="661:24">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="663:5" pos:end="663:23"><expr pos:start="663:5" pos:end="663:22"><name pos:start="663:5" pos:end="663:15"><name pos:start="663:5" pos:end="663:9">dinfo</name><operator pos:start="663:10" pos:end="663:11">-&gt;</operator><name pos:start="663:12" pos:end="663:15">secs</name></name> <operator pos:start="663:17" pos:end="663:17">=</operator> <name pos:start="663:19" pos:end="663:22">secs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="665:5" pos:end="665:31"><expr pos:start="665:5" pos:end="665:30"><name pos:start="665:5" pos:end="665:16"><name pos:start="665:5" pos:end="665:9">dinfo</name><operator pos:start="665:10" pos:end="665:11">-&gt;</operator><name pos:start="665:12" pos:end="665:16">trans</name></name> <operator pos:start="665:18" pos:end="665:18">=</operator> <name pos:start="665:20" pos:end="665:30">translation</name></expr>;</expr_stmt>



    <expr_stmt pos:start="669:5" pos:end="669:23"><expr pos:start="669:5" pos:end="669:22"><name pos:start="669:5" pos:end="669:15"><name pos:start="669:5" pos:end="669:9">dinfo</name><operator pos:start="669:10" pos:end="669:11">-&gt;</operator><name pos:start="669:12" pos:end="669:15">type</name></name> <operator pos:start="669:17" pos:end="669:17">=</operator> <name pos:start="669:19" pos:end="669:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="671:5" pos:end="671:24"><expr pos:start="671:5" pos:end="671:23"><name pos:start="671:5" pos:end="671:14"><name pos:start="671:5" pos:end="671:9">dinfo</name><operator pos:start="671:10" pos:end="671:11">-&gt;</operator><name pos:start="671:12" pos:end="671:14">bus</name></name> <operator pos:start="671:16" pos:end="671:16">=</operator> <name pos:start="671:18" pos:end="671:23">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="673:5" pos:end="673:26"><expr pos:start="673:5" pos:end="673:25"><name pos:start="673:5" pos:end="673:15"><name pos:start="673:5" pos:end="673:9">dinfo</name><operator pos:start="673:10" pos:end="673:11">-&gt;</operator><name pos:start="673:12" pos:end="673:15">unit</name></name> <operator pos:start="673:17" pos:end="673:17">=</operator> <name pos:start="673:19" pos:end="673:25">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="675:5" pos:end="675:29"><expr pos:start="675:5" pos:end="675:28"><name pos:start="675:5" pos:end="675:18"><name pos:start="675:5" pos:end="675:9">dinfo</name><operator pos:start="675:10" pos:end="675:11">-&gt;</operator><name pos:start="675:12" pos:end="675:18">devaddr</name></name> <operator pos:start="675:20" pos:end="675:20">=</operator> <name pos:start="675:22" pos:end="675:28">devaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="677:5" pos:end="677:37"><expr pos:start="677:5" pos:end="677:36"><name pos:start="677:5" pos:end="677:17"><name pos:start="677:5" pos:end="677:9">dinfo</name><operator pos:start="677:10" pos:end="677:11">-&gt;</operator><name pos:start="677:12" pos:end="677:17">serial</name></name> <operator pos:start="677:19" pos:end="677:19">=</operator> <call pos:start="677:21" pos:end="677:36"><name pos:start="677:21" pos:end="677:28">g_strdup</name><argument_list pos:start="677:29" pos:end="677:36">(<argument pos:start="677:30" pos:end="677:35"><expr pos:start="677:30" pos:end="677:35"><name pos:start="677:30" pos:end="677:35">serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="681:5" pos:end="681:37"><expr pos:start="681:5" pos:end="681:36"><call pos:start="681:5" pos:end="681:36"><name pos:start="681:5" pos:end="681:24">blk_set_legacy_dinfo</name><argument_list pos:start="681:25" pos:end="681:36">(<argument pos:start="681:26" pos:end="681:28"><expr pos:start="681:26" pos:end="681:28"><name pos:start="681:26" pos:end="681:28">blk</name></expr></argument>, <argument pos:start="681:31" pos:end="681:35"><expr pos:start="681:31" pos:end="681:35"><name pos:start="681:31" pos:end="681:35">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="685:5" pos:end="703:5">switch<condition pos:start="685:11" pos:end="685:16">(<expr pos:start="685:12" pos:end="685:15"><name pos:start="685:12" pos:end="685:15">type</name></expr>)</condition> <block pos:start="685:18" pos:end="703:5">{<block_content pos:start="687:5" pos:end="701:14">

    <case pos:start="687:5" pos:end="687:16">case <expr pos:start="687:10" pos:end="687:15"><name pos:start="687:10" pos:end="687:15">IF_IDE</name></expr>:</case>

    <case pos:start="689:5" pos:end="689:17">case <expr pos:start="689:10" pos:end="689:16"><name pos:start="689:10" pos:end="689:16">IF_SCSI</name></expr>:</case>

    <case pos:start="691:5" pos:end="691:16">case <expr pos:start="691:10" pos:end="691:15"><name pos:start="691:10" pos:end="691:15">IF_XEN</name></expr>:</case>

    <case pos:start="693:5" pos:end="693:17">case <expr pos:start="693:10" pos:end="693:16"><name pos:start="693:10" pos:end="693:16">IF_NONE</name></expr>:</case>

        <expr_stmt pos:start="695:9" pos:end="695:47"><expr pos:start="695:9" pos:end="695:46"><name pos:start="695:9" pos:end="695:23"><name pos:start="695:9" pos:end="695:13">dinfo</name><operator pos:start="695:14" pos:end="695:15">-&gt;</operator><name pos:start="695:16" pos:end="695:23">media_cd</name></name> <operator pos:start="695:25" pos:end="695:25">=</operator> <name pos:start="695:27" pos:end="695:31">media</name> <operator pos:start="695:33" pos:end="695:34">==</operator> <name pos:start="695:36" pos:end="695:46">MEDIA_CDROM</name></expr>;</expr_stmt>

        <break pos:start="697:9" pos:end="697:14">break;</break>

    <default pos:start="699:5" pos:end="699:12">default:</default>

        <break pos:start="701:9" pos:end="701:14">break;</break>

    </block_content>}</block></switch>



<label pos:start="707:1" pos:end="707:5"><name pos:start="707:1" pos:end="707:4">fail</name>:</label>

    <expr_stmt pos:start="709:5" pos:end="709:31"><expr pos:start="709:5" pos:end="709:30"><call pos:start="709:5" pos:end="709:30"><name pos:start="709:5" pos:end="709:17">qemu_opts_del</name><argument_list pos:start="709:18" pos:end="709:30">(<argument pos:start="709:19" pos:end="709:29"><expr pos:start="709:19" pos:end="709:29"><name pos:start="709:19" pos:end="709:29">legacy_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="711:5" pos:end="711:21"><expr pos:start="711:5" pos:end="711:20"><call pos:start="711:5" pos:end="711:20"><name pos:start="711:5" pos:end="711:11">QDECREF</name><argument_list pos:start="711:12" pos:end="711:20">(<argument pos:start="711:13" pos:end="711:19"><expr pos:start="711:13" pos:end="711:19"><name pos:start="711:13" pos:end="711:19">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="713:5" pos:end="713:17">return <expr pos:start="713:12" pos:end="713:16"><name pos:start="713:12" pos:end="713:16">dinfo</name></expr>;</return>

</block_content>}</block></function>
</unit>
