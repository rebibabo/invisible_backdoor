<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24097.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">vnc_display_open</name><parameter_list pos:start="1:21" pos:end="1:59">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:37"><name pos:start="1:22" pos:end="1:33">DisplayState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:37">ds</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:58"><decl pos:start="1:40" pos:end="1:58"><type pos:start="1:40" pos:end="1:58"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">display</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="283:1">{<block_content pos:start="5:5" pos:end="281:87">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">VncState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">vs</name> <init pos:start="5:18" pos:end="5:58">= <expr pos:start="5:20" pos:end="5:58"><ternary pos:start="5:20" pos:end="5:58"><condition pos:start="5:20" pos:end="5:23"><expr pos:start="5:20" pos:end="5:21"><name pos:start="5:20" pos:end="5:21">ds</name></expr> ?</condition><then pos:start="5:25" pos:end="5:46"> <expr pos:start="5:25" pos:end="5:46"><operator pos:start="5:25" pos:end="5:25">(</operator><name pos:start="5:26" pos:end="5:33">VncState</name> <operator pos:start="5:35" pos:end="5:35">*</operator><operator pos:start="5:36" pos:end="5:36">)</operator><name pos:start="5:37" pos:end="5:46"><name pos:start="5:37" pos:end="5:38">ds</name><operator pos:start="5:39" pos:end="5:40">-&gt;</operator><name pos:start="5:41" pos:end="5:46">opaque</name></name></expr> </then><else pos:start="5:48" pos:end="5:58">: <expr pos:start="5:50" pos:end="5:58"><name pos:start="5:50" pos:end="5:58">vnc_state</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:23">options</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">password</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">reverse</name> <init pos:start="11:17" pos:end="11:19">= <expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">to_port</name> <init pos:start="13:17" pos:end="13:19">= <expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="15:1" pos:end="15:21">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:21">CONFIG_VNC_TLS</name></cpp:ifdef>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">tls</name> <init pos:start="17:13" pos:end="17:15">= <expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr></init></decl>, <decl pos:start="17:18" pos:end="17:25"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:18" pos:end="17:21">x509</name> <init pos:start="17:23" pos:end="17:25">= <expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><call pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:21">vnc_display_close</name><argument_list pos:start="23:22" pos:end="23:25">(<argument pos:start="23:23" pos:end="23:24"><expr pos:start="23:23" pos:end="23:24"><name pos:start="23:23" pos:end="23:24">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:17"><if pos:start="25:5" pos:end="27:17">if <condition pos:start="25:8" pos:end="25:37">(<expr pos:start="25:9" pos:end="25:36"><call pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:14">strcmp</name><argument_list pos:start="25:15" pos:end="25:31">(<argument pos:start="25:16" pos:end="25:22"><expr pos:start="25:16" pos:end="25:22"><name pos:start="25:16" pos:end="25:22">display</name></expr></argument>, <argument pos:start="25:25" pos:end="25:30"><expr pos:start="25:25" pos:end="25:30"><literal type="string" pos:start="25:25" pos:end="25:30">"none"</literal></expr></argument>)</argument_list></call> <operator pos:start="25:33" pos:end="25:34">==</operator> <literal type="number" pos:start="25:36" pos:end="25:36">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:17"><block_content pos:start="27:9" pos:end="27:17">

	<return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="33:18"><if pos:start="31:5" pos:end="33:18">if <condition pos:start="31:8" pos:end="31:41">(<expr pos:start="31:9" pos:end="31:40"><operator pos:start="31:9" pos:end="31:9">!</operator><operator pos:start="31:10" pos:end="31:10">(</operator><name pos:start="31:11" pos:end="31:21"><name pos:start="31:11" pos:end="31:12">vs</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:21">display</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <call pos:start="31:25" pos:end="31:39"><name pos:start="31:25" pos:end="31:30">strdup</name><argument_list pos:start="31:31" pos:end="31:39">(<argument pos:start="31:32" pos:end="31:38"><expr pos:start="31:32" pos:end="31:38"><name pos:start="31:32" pos:end="31:38">display</name></expr></argument>)</argument_list></call><operator pos:start="31:40" pos:end="31:40">)</operator></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:18"><block_content pos:start="33:9" pos:end="33:18">

	<return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:11">options</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:21">display</name></expr>;</expr_stmt>

    <while pos:start="39:5" pos:end="127:5">while <condition pos:start="39:11" pos:end="39:44">(<expr pos:start="39:12" pos:end="39:43"><operator pos:start="39:12" pos:end="39:12">(</operator><name pos:start="39:13" pos:end="39:19">options</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:42"><name pos:start="39:23" pos:end="39:28">strchr</name><argument_list pos:start="39:29" pos:end="39:42">(<argument pos:start="39:30" pos:end="39:36"><expr pos:start="39:30" pos:end="39:36"><name pos:start="39:30" pos:end="39:36">options</name></expr></argument>, <argument pos:start="39:39" pos:end="39:41"><expr pos:start="39:39" pos:end="39:41"><literal type="char" pos:start="39:39" pos:end="39:41">','</literal></expr></argument>)</argument_list></call><operator pos:start="39:43" pos:end="39:43">)</operator></expr>)</condition> <block pos:start="39:46" pos:end="127:5">{<block_content pos:start="41:9" pos:end="125:9">

	<expr_stmt pos:start="41:9" pos:end="41:18"><expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:15">options</name><operator pos:start="41:16" pos:end="41:17">++</operator></expr>;</expr_stmt>

	<if_stmt pos:start="43:9" pos:end="125:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:49">(<expr pos:start="43:13" pos:end="43:48"><call pos:start="43:13" pos:end="43:43"><name pos:start="43:13" pos:end="43:19">strncmp</name><argument_list pos:start="43:20" pos:end="43:43">(<argument pos:start="43:21" pos:end="43:27"><expr pos:start="43:21" pos:end="43:27"><name pos:start="43:21" pos:end="43:27">options</name></expr></argument>, <argument pos:start="43:30" pos:end="43:39"><expr pos:start="43:30" pos:end="43:39"><literal type="string" pos:start="43:30" pos:end="43:39">"password"</literal></expr></argument>, <argument pos:start="43:42" pos:end="43:42"><expr pos:start="43:42" pos:end="43:42"><literal type="number" pos:start="43:42" pos:end="43:42">8</literal></expr></argument>)</argument_list></call> <operator pos:start="43:45" pos:end="43:46">==</operator> <literal type="number" pos:start="43:48" pos:end="43:48">0</literal></expr>)</condition> <block pos:start="43:51" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:25">

	    <expr_stmt pos:start="45:13" pos:end="45:25"><expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:20">password</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <literal type="number" pos:start="45:24" pos:end="45:24">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="45:27" pos:end="45:53">/* Require password auth */</comment>

	</block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="51:9">else if <condition pos:start="47:19" pos:end="47:55">(<expr pos:start="47:20" pos:end="47:54"><call pos:start="47:20" pos:end="47:49"><name pos:start="47:20" pos:end="47:26">strncmp</name><argument_list pos:start="47:27" pos:end="47:49">(<argument pos:start="47:28" pos:end="47:34"><expr pos:start="47:28" pos:end="47:34"><name pos:start="47:28" pos:end="47:34">options</name></expr></argument>, <argument pos:start="47:37" pos:end="47:45"><expr pos:start="47:37" pos:end="47:45"><literal type="string" pos:start="47:37" pos:end="47:45">"reverse"</literal></expr></argument>, <argument pos:start="47:48" pos:end="47:48"><expr pos:start="47:48" pos:end="47:48"><literal type="number" pos:start="47:48" pos:end="47:48">7</literal></expr></argument>)</argument_list></call> <operator pos:start="47:51" pos:end="47:52">==</operator> <literal type="number" pos:start="47:54" pos:end="47:54">0</literal></expr>)</condition> <block pos:start="47:57" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:24">

	    <expr_stmt pos:start="49:13" pos:end="49:24"><expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:19">reverse</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <literal type="number" pos:start="49:23" pos:end="49:23">1</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="51:11" pos:end="57:9">else if <condition pos:start="51:19" pos:end="51:51">(<expr pos:start="51:20" pos:end="51:50"><call pos:start="51:20" pos:end="51:45"><name pos:start="51:20" pos:end="51:26">strncmp</name><argument_list pos:start="51:27" pos:end="51:45">(<argument pos:start="51:28" pos:end="51:34"><expr pos:start="51:28" pos:end="51:34"><name pos:start="51:28" pos:end="51:34">options</name></expr></argument>, <argument pos:start="51:37" pos:end="51:41"><expr pos:start="51:37" pos:end="51:41"><literal type="string" pos:start="51:37" pos:end="51:41">"to="</literal></expr></argument>, <argument pos:start="51:44" pos:end="51:44"><expr pos:start="51:44" pos:end="51:44"><literal type="number" pos:start="51:44" pos:end="51:44">3</literal></expr></argument>)</argument_list></call> <operator pos:start="51:47" pos:end="51:48">==</operator> <literal type="number" pos:start="51:50" pos:end="51:50">0</literal></expr>)</condition> <block pos:start="51:53" pos:end="57:9">{<block_content pos:start="53:13" pos:end="56:0">

            <expr_stmt pos:start="53:13" pos:end="56:0"><expr pos:start="53:13" pos:end="53:44"><name pos:start="53:13" pos:end="53:19">to_port</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:37"><name pos:start="53:23" pos:end="53:26">atoi</name><argument_list pos:start="53:27" pos:end="53:37">(<argument pos:start="53:28" pos:end="53:36"><expr pos:start="53:28" pos:end="53:36"><name pos:start="53:28" pos:end="53:34">options</name><operator pos:start="53:35" pos:end="53:35">+</operator><literal type="number" pos:start="53:36" pos:end="53:36">3</literal></expr></argument>)</argument_list></call> <operator pos:start="53:39" pos:end="53:39">+</operator> <literal type="number" pos:start="53:41" pos:end="53:44">5900</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="55:1" pos:end="55:21">#<cpp:directive pos:start="55:2" pos:end="55:6">ifdef</cpp:directive> <name pos:start="55:8" pos:end="55:21">CONFIG_VNC_TLS</name></cpp:ifdef>

	</block_content>}</block></if> <if type="elseif" pos:start="57:11" pos:end="61:9">else if <condition pos:start="57:19" pos:end="57:51">(<expr pos:start="57:20" pos:end="57:50"><call pos:start="57:20" pos:end="57:45"><name pos:start="57:20" pos:end="57:26">strncmp</name><argument_list pos:start="57:27" pos:end="57:45">(<argument pos:start="57:28" pos:end="57:34"><expr pos:start="57:28" pos:end="57:34"><name pos:start="57:28" pos:end="57:34">options</name></expr></argument>, <argument pos:start="57:37" pos:end="57:41"><expr pos:start="57:37" pos:end="57:41"><literal type="string" pos:start="57:37" pos:end="57:41">"tls"</literal></expr></argument>, <argument pos:start="57:44" pos:end="57:44"><expr pos:start="57:44" pos:end="57:44"><literal type="number" pos:start="57:44" pos:end="57:44">3</literal></expr></argument>)</argument_list></call> <operator pos:start="57:47" pos:end="57:48">==</operator> <literal type="number" pos:start="57:50" pos:end="57:50">0</literal></expr>)</condition> <block pos:start="57:53" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:20">

	    <expr_stmt pos:start="59:13" pos:end="59:20"><expr pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:15">tls</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <literal type="number" pos:start="59:19" pos:end="59:19">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="59:22" pos:end="59:38">/* Require TLS */</comment>

	</block_content>}</block></if> <if type="elseif" pos:start="61:11" pos:end="125:9">else if <condition pos:start="61:19" pos:end="61:52">(<expr pos:start="61:20" pos:end="61:51"><call pos:start="61:20" pos:end="61:46"><name pos:start="61:20" pos:end="61:26">strncmp</name><argument_list pos:start="61:27" pos:end="61:46">(<argument pos:start="61:28" pos:end="61:34"><expr pos:start="61:28" pos:end="61:34"><name pos:start="61:28" pos:end="61:34">options</name></expr></argument>, <argument pos:start="61:37" pos:end="61:42"><expr pos:start="61:37" pos:end="61:42"><literal type="string" pos:start="61:37" pos:end="61:42">"x509"</literal></expr></argument>, <argument pos:start="61:45" pos:end="61:45"><expr pos:start="61:45" pos:end="61:45"><literal type="number" pos:start="61:45" pos:end="61:45">4</literal></expr></argument>)</argument_list></call> <operator pos:start="61:48" pos:end="61:49">==</operator> <literal type="number" pos:start="61:51" pos:end="61:51">0</literal></expr>)</condition> <block pos:start="61:54" pos:end="125:9">{<block_content pos:start="63:13" pos:end="124:0">

	    <decl_stmt pos:start="63:13" pos:end="63:30"><decl pos:start="63:13" pos:end="63:23"><type pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:16">char</name> <modifier pos:start="63:18" pos:end="63:18">*</modifier></type><name pos:start="63:19" pos:end="63:23">start</name></decl>, <decl pos:start="63:26" pos:end="63:29"><type ref="prev" pos:start="63:13" pos:end="63:18"><modifier pos:start="63:26" pos:end="63:26">*</modifier></type><name pos:start="63:27" pos:end="63:29">end</name></decl>;</decl_stmt>

	    <expr_stmt pos:start="65:13" pos:end="65:21"><expr pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:16">x509</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <literal type="number" pos:start="65:20" pos:end="65:20">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="65:23" pos:end="65:53">/* Require x509 certificates */</comment>

	    <if_stmt pos:start="67:13" pos:end="69:35"><if pos:start="67:13" pos:end="69:35">if <condition pos:start="67:16" pos:end="67:56">(<expr pos:start="67:17" pos:end="67:55"><call pos:start="67:17" pos:end="67:50"><name pos:start="67:17" pos:end="67:23">strncmp</name><argument_list pos:start="67:24" pos:end="67:50">(<argument pos:start="67:25" pos:end="67:31"><expr pos:start="67:25" pos:end="67:31"><name pos:start="67:25" pos:end="67:31">options</name></expr></argument>, <argument pos:start="67:34" pos:end="67:45"><expr pos:start="67:34" pos:end="67:45"><literal type="string" pos:start="67:34" pos:end="67:45">"x509verify"</literal></expr></argument>, <argument pos:start="67:48" pos:end="67:49"><expr pos:start="67:48" pos:end="67:49"><literal type="number" pos:start="67:48" pos:end="67:49">10</literal></expr></argument>)</argument_list></call> <operator pos:start="67:52" pos:end="67:53">==</operator> <literal type="number" pos:start="67:55" pos:end="67:55">0</literal></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:35"><block_content pos:start="69:17" pos:end="69:35">

	        <expr_stmt pos:start="69:17" pos:end="69:35"><expr pos:start="69:17" pos:end="69:34"><name pos:start="69:17" pos:end="69:30"><name pos:start="69:17" pos:end="69:18">vs</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:30">x509verify</name></name> <operator pos:start="69:32" pos:end="69:32">=</operator> <literal type="number" pos:start="69:34" pos:end="69:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="69:37" pos:end="69:68">/* ...and verify client certs */</comment>



	    <comment type="block" pos:start="73:13" pos:end="75:66">/* Now check for 'x509=/some/path' postfix

	     * and use that to setup x509 certificate/key paths */</comment>

	    <expr_stmt pos:start="77:13" pos:end="77:41"><expr pos:start="77:13" pos:end="77:40"><name pos:start="77:13" pos:end="77:17">start</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <call pos:start="77:21" pos:end="77:40"><name pos:start="77:21" pos:end="77:26">strchr</name><argument_list pos:start="77:27" pos:end="77:40">(<argument pos:start="77:28" pos:end="77:34"><expr pos:start="77:28" pos:end="77:34"><name pos:start="77:28" pos:end="77:34">options</name></expr></argument>, <argument pos:start="77:37" pos:end="77:39"><expr pos:start="77:37" pos:end="77:39"><literal type="char" pos:start="77:37" pos:end="77:39">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="79:13" pos:end="79:39"><expr pos:start="79:13" pos:end="79:38"><name pos:start="79:13" pos:end="79:15">end</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <call pos:start="79:19" pos:end="79:38"><name pos:start="79:19" pos:end="79:24">strchr</name><argument_list pos:start="79:25" pos:end="79:38">(<argument pos:start="79:26" pos:end="79:32"><expr pos:start="79:26" pos:end="79:32"><name pos:start="79:26" pos:end="79:32">options</name></expr></argument>, <argument pos:start="79:35" pos:end="79:37"><expr pos:start="79:35" pos:end="79:37"><literal type="char" pos:start="79:35" pos:end="79:37">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="81:13" pos:end="124:0"><if pos:start="81:13" pos:end="111:13">if <condition pos:start="81:16" pos:end="81:49">(<expr pos:start="81:17" pos:end="81:48"><name pos:start="81:17" pos:end="81:21">start</name> <operator pos:start="81:23" pos:end="81:24">&amp;&amp;</operator> <operator pos:start="81:26" pos:end="81:26">(</operator><operator pos:start="81:27" pos:end="81:27">!</operator><name pos:start="81:28" pos:end="81:30">end</name> <operator pos:start="81:32" pos:end="81:33">||</operator> <operator pos:start="81:35" pos:end="81:35">(</operator><name pos:start="81:36" pos:end="81:40">start</name> <operator pos:start="81:42" pos:end="81:42">&lt;</operator> <name pos:start="81:44" pos:end="81:46">end</name><operator pos:start="81:47" pos:end="81:47">)</operator><operator pos:start="81:48" pos:end="81:48">)</operator></expr>)</condition> <block pos:start="81:51" pos:end="111:13">{<block_content pos:start="83:17" pos:end="109:32">

		<decl_stmt pos:start="83:17" pos:end="83:64"><decl pos:start="83:17" pos:end="83:63"><type pos:start="83:17" pos:end="83:19"><name pos:start="83:17" pos:end="83:19">int</name></type> <name pos:start="83:21" pos:end="83:23">len</name> <init pos:start="83:25" pos:end="83:63">= <expr pos:start="83:27" pos:end="83:63"><ternary pos:start="83:27" pos:end="83:63"><condition pos:start="83:27" pos:end="83:31"><expr pos:start="83:27" pos:end="83:29"><name pos:start="83:27" pos:end="83:29">end</name></expr> ?</condition><then pos:start="83:33" pos:end="83:45"> <expr pos:start="83:33" pos:end="83:45"><name pos:start="83:33" pos:end="83:35">end</name><operator pos:start="83:36" pos:end="83:36">-</operator><operator pos:start="83:37" pos:end="83:37">(</operator><name pos:start="83:38" pos:end="83:42">start</name><operator pos:start="83:43" pos:end="83:43">+</operator><literal type="number" pos:start="83:44" pos:end="83:44">1</literal><operator pos:start="83:45" pos:end="83:45">)</operator></expr> </then><else pos:start="83:47" pos:end="83:63">: <expr pos:start="83:49" pos:end="83:63"><call pos:start="83:49" pos:end="83:63"><name pos:start="83:49" pos:end="83:54">strlen</name><argument_list pos:start="83:55" pos:end="83:63">(<argument pos:start="83:56" pos:end="83:62"><expr pos:start="83:56" pos:end="83:62"><name pos:start="83:56" pos:end="83:60">start</name><operator pos:start="83:61" pos:end="83:61">+</operator><literal type="number" pos:start="83:62" pos:end="83:62">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="85:17" pos:end="85:48"><decl pos:start="85:17" pos:end="85:47"><type pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:20">char</name> <modifier pos:start="85:22" pos:end="85:22">*</modifier></type><name pos:start="85:23" pos:end="85:26">path</name> <init pos:start="85:28" pos:end="85:47">= <expr pos:start="85:30" pos:end="85:47"><call pos:start="85:30" pos:end="85:47"><name pos:start="85:30" pos:end="85:40">qemu_malloc</name><argument_list pos:start="85:41" pos:end="85:47">(<argument pos:start="85:42" pos:end="85:46"><expr pos:start="85:42" pos:end="85:46"><name pos:start="85:42" pos:end="85:44">len</name><operator pos:start="85:45" pos:end="85:45">+</operator><literal type="number" pos:start="85:46" pos:end="85:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="89:17" pos:end="89:46"><expr pos:start="89:17" pos:end="89:45"><call pos:start="89:17" pos:end="89:45"><name pos:start="89:17" pos:end="89:23">pstrcpy</name><argument_list pos:start="89:24" pos:end="89:45">(<argument pos:start="89:25" pos:end="89:28"><expr pos:start="89:25" pos:end="89:28"><name pos:start="89:25" pos:end="89:28">path</name></expr></argument>, <argument pos:start="89:31" pos:end="89:33"><expr pos:start="89:31" pos:end="89:33"><name pos:start="89:31" pos:end="89:33">len</name></expr></argument>, <argument pos:start="89:36" pos:end="89:44"><expr pos:start="89:36" pos:end="89:44"><name pos:start="89:36" pos:end="89:40">start</name> <operator pos:start="89:42" pos:end="89:42">+</operator> <literal type="number" pos:start="89:44" pos:end="89:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="91:17" pos:end="91:33"><expr pos:start="91:17" pos:end="91:32"><name pos:start="91:17" pos:end="91:25"><name pos:start="91:17" pos:end="91:20">path</name><index pos:start="91:21" pos:end="91:25">[<expr pos:start="91:22" pos:end="91:24"><name pos:start="91:22" pos:end="91:24">len</name></expr>]</index></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <literal type="char" pos:start="91:29" pos:end="91:32">'\0'</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="93:17" pos:end="93:66"><expr pos:start="93:17" pos:end="93:65"><call pos:start="93:17" pos:end="93:65"><name pos:start="93:17" pos:end="93:25">VNC_DEBUG</name><argument_list pos:start="93:26" pos:end="93:65">(<argument pos:start="93:27" pos:end="93:58"><expr pos:start="93:27" pos:end="93:58"><literal type="string" pos:start="93:27" pos:end="93:58">"Trying certificate path '%s'\n"</literal></expr></argument>, <argument pos:start="93:61" pos:end="93:64"><expr pos:start="93:61" pos:end="93:64"><name pos:start="93:61" pos:end="93:64">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="95:17" pos:end="107:17"><if pos:start="95:17" pos:end="107:17">if <condition pos:start="95:20" pos:end="95:62">(<expr pos:start="95:21" pos:end="95:61"><call pos:start="95:21" pos:end="95:57"><name pos:start="95:21" pos:end="95:47">vnc_set_x509_credential_dir</name><argument_list pos:start="95:48" pos:end="95:57">(<argument pos:start="95:49" pos:end="95:50"><expr pos:start="95:49" pos:end="95:50"><name pos:start="95:49" pos:end="95:50">vs</name></expr></argument>, <argument pos:start="95:53" pos:end="95:56"><expr pos:start="95:53" pos:end="95:56"><name pos:start="95:53" pos:end="95:56">path</name></expr></argument>)</argument_list></call> <operator pos:start="95:59" pos:end="95:59">&lt;</operator> <literal type="number" pos:start="95:61" pos:end="95:61">0</literal></expr>)</condition> <block pos:start="95:64" pos:end="107:17">{<block_content pos:start="97:21" pos:end="105:30">

		    <expr_stmt pos:start="97:21" pos:end="97:91"><expr pos:start="97:21" pos:end="97:90"><call pos:start="97:21" pos:end="97:90"><name pos:start="97:21" pos:end="97:27">fprintf</name><argument_list pos:start="97:28" pos:end="97:90">(<argument pos:start="97:29" pos:end="97:34"><expr pos:start="97:29" pos:end="97:34"><name pos:start="97:29" pos:end="97:34">stderr</name></expr></argument>, <argument pos:start="97:37" pos:end="97:83"><expr pos:start="97:37" pos:end="97:83"><literal type="string" pos:start="97:37" pos:end="97:83">"Failed to find x509 certificates/keys in %s\n"</literal></expr></argument>, <argument pos:start="97:86" pos:end="97:89"><expr pos:start="97:86" pos:end="97:89"><name pos:start="97:86" pos:end="97:89">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="99:21" pos:end="99:36"><expr pos:start="99:21" pos:end="99:35"><call pos:start="99:21" pos:end="99:35"><name pos:start="99:21" pos:end="99:29">qemu_free</name><argument_list pos:start="99:30" pos:end="99:35">(<argument pos:start="99:31" pos:end="99:34"><expr pos:start="99:31" pos:end="99:34"><name pos:start="99:31" pos:end="99:34">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="101:21" pos:end="101:43"><expr pos:start="101:21" pos:end="101:42"><call pos:start="101:21" pos:end="101:42"><name pos:start="101:21" pos:end="101:29">qemu_free</name><argument_list pos:start="101:30" pos:end="101:42">(<argument pos:start="101:31" pos:end="101:41"><expr pos:start="101:31" pos:end="101:41"><name pos:start="101:31" pos:end="101:41"><name pos:start="101:31" pos:end="101:32">vs</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:41">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="103:21" pos:end="103:39"><expr pos:start="103:21" pos:end="103:38"><name pos:start="103:21" pos:end="103:31"><name pos:start="103:21" pos:end="103:22">vs</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:31">display</name></name> <operator pos:start="103:33" pos:end="103:33">=</operator> <name pos:start="103:35" pos:end="103:38">NULL</name></expr>;</expr_stmt>

		    <return pos:start="105:21" pos:end="105:30">return <expr pos:start="105:28" pos:end="105:29"><operator pos:start="105:28" pos:end="105:28">-</operator><literal type="number" pos:start="105:29" pos:end="105:29">1</literal></expr>;</return>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="109:17" pos:end="109:32"><expr pos:start="109:17" pos:end="109:31"><call pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:25">qemu_free</name><argument_list pos:start="109:26" pos:end="109:31">(<argument pos:start="109:27" pos:end="109:30"><expr pos:start="109:27" pos:end="109:30"><name pos:start="109:27" pos:end="109:30">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if> <else pos:start="111:15" pos:end="124:0">else <block pos:start="111:20" pos:end="124:0">{<block_content pos:start="113:17" pos:end="119:26">

		<expr_stmt pos:start="113:17" pos:end="113:66"><expr pos:start="113:17" pos:end="113:65"><call pos:start="113:17" pos:end="113:65"><name pos:start="113:17" pos:end="113:23">fprintf</name><argument_list pos:start="113:24" pos:end="113:65">(<argument pos:start="113:25" pos:end="113:30"><expr pos:start="113:25" pos:end="113:30"><name pos:start="113:25" pos:end="113:30">stderr</name></expr></argument>, <argument pos:start="113:33" pos:end="113:64"><expr pos:start="113:33" pos:end="113:64"><literal type="string" pos:start="113:33" pos:end="113:64">"No certificate path provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="115:17" pos:end="115:39"><expr pos:start="115:17" pos:end="115:38"><call pos:start="115:17" pos:end="115:38"><name pos:start="115:17" pos:end="115:25">qemu_free</name><argument_list pos:start="115:26" pos:end="115:38">(<argument pos:start="115:27" pos:end="115:37"><expr pos:start="115:27" pos:end="115:37"><name pos:start="115:27" pos:end="115:37"><name pos:start="115:27" pos:end="115:28">vs</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:37">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="117:17" pos:end="117:35"><expr pos:start="117:17" pos:end="117:34"><name pos:start="117:17" pos:end="117:27"><name pos:start="117:17" pos:end="117:18">vs</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:27">display</name></name> <operator pos:start="117:29" pos:end="117:29">=</operator> <name pos:start="117:31" pos:end="117:34">NULL</name></expr>;</expr_stmt>

		<return pos:start="119:17" pos:end="119:26">return <expr pos:start="119:24" pos:end="119:25"><operator pos:start="119:24" pos:end="119:24">-</operator><literal type="number" pos:start="119:25" pos:end="119:25">1</literal></expr>;</return>

	    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="131:5" pos:end="207:5"><if pos:start="131:5" pos:end="169:5">if <condition pos:start="131:8" pos:end="131:17">(<expr pos:start="131:9" pos:end="131:16"><name pos:start="131:9" pos:end="131:16">password</name></expr>)</condition> <block pos:start="131:19" pos:end="169:5">{<block_content pos:start="135:9" pos:end="168:0">

<cpp:ifdef pos:start="133:1" pos:end="133:21">#<cpp:directive pos:start="133:2" pos:end="133:6">ifdef</cpp:directive> <name pos:start="133:8" pos:end="133:21">CONFIG_VNC_TLS</name></cpp:ifdef>

	<if_stmt pos:start="135:9" pos:end="168:0"><if pos:start="135:9" pos:end="153:9">if <condition pos:start="135:12" pos:end="135:16">(<expr pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">tls</name></expr>)</condition> <block pos:start="135:18" pos:end="153:9">{<block_content pos:start="137:13" pos:end="151:13">

	    <expr_stmt pos:start="137:13" pos:end="137:41"><expr pos:start="137:13" pos:end="137:40"><name pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:14">vs</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:20">auth</name></name> <operator pos:start="137:22" pos:end="137:22">=</operator> <name pos:start="137:24" pos:end="137:40">VNC_AUTH_VENCRYPT</name></expr>;</expr_stmt>

	    <if_stmt pos:start="139:13" pos:end="151:13"><if pos:start="139:13" pos:end="145:13">if <condition pos:start="139:16" pos:end="139:21">(<expr pos:start="139:17" pos:end="139:20"><name pos:start="139:17" pos:end="139:20">x509</name></expr>)</condition> <block pos:start="139:23" pos:end="145:13">{<block_content pos:start="141:17" pos:end="143:56">

		<expr_stmt pos:start="141:17" pos:end="141:79"><expr pos:start="141:17" pos:end="141:78"><call pos:start="141:17" pos:end="141:78"><name pos:start="141:17" pos:end="141:25">VNC_DEBUG</name><argument_list pos:start="141:26" pos:end="141:78">(<argument pos:start="141:27" pos:end="141:77"><expr pos:start="141:27" pos:end="141:77"><literal type="string" pos:start="141:27" pos:end="141:77">"Initializing VNC server with x509 password auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="143:17" pos:end="143:56"><expr pos:start="143:17" pos:end="143:55"><name pos:start="143:17" pos:end="143:27"><name pos:start="143:17" pos:end="143:18">vs</name><operator pos:start="143:19" pos:end="143:20">-&gt;</operator><name pos:start="143:21" pos:end="143:27">subauth</name></name> <operator pos:start="143:29" pos:end="143:29">=</operator> <name pos:start="143:31" pos:end="143:55">VNC_AUTH_VENCRYPT_X509VNC</name></expr>;</expr_stmt>

	    </block_content>}</block></if> <else pos:start="145:15" pos:end="151:13">else <block pos:start="145:20" pos:end="151:13">{<block_content pos:start="147:17" pos:end="149:55">

		<expr_stmt pos:start="147:17" pos:end="147:78"><expr pos:start="147:17" pos:end="147:77"><call pos:start="147:17" pos:end="147:77"><name pos:start="147:17" pos:end="147:25">VNC_DEBUG</name><argument_list pos:start="147:26" pos:end="147:77">(<argument pos:start="147:27" pos:end="147:76"><expr pos:start="147:27" pos:end="147:76"><literal type="string" pos:start="147:27" pos:end="147:76">"Initializing VNC server with TLS password auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="149:17" pos:end="149:55"><expr pos:start="149:17" pos:end="149:54"><name pos:start="149:17" pos:end="149:27"><name pos:start="149:17" pos:end="149:18">vs</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:27">subauth</name></name> <operator pos:start="149:29" pos:end="149:29">=</operator> <name pos:start="149:31" pos:end="149:54">VNC_AUTH_VENCRYPT_TLSVNC</name></expr>;</expr_stmt>

	    </block_content>}</block></else></if_stmt>

	</block_content>}</block></if> <else pos:start="153:11" pos:end="168:0">else <block pos:start="153:16" pos:end="168:0">{<block_content pos:start="157:13" pos:end="163:43">

<cpp:endif pos:start="155:1" pos:end="155:6">#<cpp:directive pos:start="155:2" pos:end="155:6">endif</cpp:directive></cpp:endif>

	    <expr_stmt pos:start="157:13" pos:end="157:70"><expr pos:start="157:13" pos:end="157:69"><call pos:start="157:13" pos:end="157:69"><name pos:start="157:13" pos:end="157:21">VNC_DEBUG</name><argument_list pos:start="157:22" pos:end="157:69">(<argument pos:start="157:23" pos:end="157:68"><expr pos:start="157:23" pos:end="157:68"><literal type="string" pos:start="157:23" pos:end="157:68">"Initializing VNC server with password auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="159:13" pos:end="162:0"><expr pos:start="159:13" pos:end="159:35"><name pos:start="159:13" pos:end="159:20"><name pos:start="159:13" pos:end="159:14">vs</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:20">auth</name></name> <operator pos:start="159:22" pos:end="159:22">=</operator> <name pos:start="159:24" pos:end="159:35">VNC_AUTH_VNC</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="161:1" pos:end="161:21">#<cpp:directive pos:start="161:2" pos:end="161:6">ifdef</cpp:directive> <name pos:start="161:8" pos:end="161:21">CONFIG_VNC_TLS</name></cpp:ifdef>

	    <expr_stmt pos:start="163:13" pos:end="163:43"><expr pos:start="163:13" pos:end="163:42"><name pos:start="163:13" pos:end="163:23"><name pos:start="163:13" pos:end="163:14">vs</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:23">subauth</name></name> <operator pos:start="163:25" pos:end="163:25">=</operator> <name pos:start="163:27" pos:end="163:42">VNC_AUTH_INVALID</name></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

<cpp:endif pos:start="167:1" pos:end="167:6">#<cpp:directive pos:start="167:2" pos:end="167:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="169:7" pos:end="207:5">else <block pos:start="169:12" pos:end="207:5">{<block_content pos:start="173:9" pos:end="206:0">

<cpp:ifdef pos:start="171:1" pos:end="171:21">#<cpp:directive pos:start="171:2" pos:end="171:6">ifdef</cpp:directive> <name pos:start="171:8" pos:end="171:21">CONFIG_VNC_TLS</name></cpp:ifdef>

	<if_stmt pos:start="173:9" pos:end="206:0"><if pos:start="173:9" pos:end="191:9">if <condition pos:start="173:12" pos:end="173:16">(<expr pos:start="173:13" pos:end="173:15"><name pos:start="173:13" pos:end="173:15">tls</name></expr>)</condition> <block pos:start="173:18" pos:end="191:9">{<block_content pos:start="175:13" pos:end="189:13">

	    <expr_stmt pos:start="175:13" pos:end="175:41"><expr pos:start="175:13" pos:end="175:40"><name pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:14">vs</name><operator pos:start="175:15" pos:end="175:16">-&gt;</operator><name pos:start="175:17" pos:end="175:20">auth</name></name> <operator pos:start="175:22" pos:end="175:22">=</operator> <name pos:start="175:24" pos:end="175:40">VNC_AUTH_VENCRYPT</name></expr>;</expr_stmt>

	    <if_stmt pos:start="177:13" pos:end="189:13"><if pos:start="177:13" pos:end="183:13">if <condition pos:start="177:16" pos:end="177:21">(<expr pos:start="177:17" pos:end="177:20"><name pos:start="177:17" pos:end="177:20">x509</name></expr>)</condition> <block pos:start="177:23" pos:end="183:13">{<block_content pos:start="179:17" pos:end="181:57">

		<expr_stmt pos:start="179:17" pos:end="179:73"><expr pos:start="179:17" pos:end="179:72"><call pos:start="179:17" pos:end="179:72"><name pos:start="179:17" pos:end="179:25">VNC_DEBUG</name><argument_list pos:start="179:26" pos:end="179:72">(<argument pos:start="179:27" pos:end="179:71"><expr pos:start="179:27" pos:end="179:71"><literal type="string" pos:start="179:27" pos:end="179:71">"Initializing VNC server with x509 no auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="181:17" pos:end="181:57"><expr pos:start="181:17" pos:end="181:56"><name pos:start="181:17" pos:end="181:27"><name pos:start="181:17" pos:end="181:18">vs</name><operator pos:start="181:19" pos:end="181:20">-&gt;</operator><name pos:start="181:21" pos:end="181:27">subauth</name></name> <operator pos:start="181:29" pos:end="181:29">=</operator> <name pos:start="181:31" pos:end="181:56">VNC_AUTH_VENCRYPT_X509NONE</name></expr>;</expr_stmt>

	    </block_content>}</block></if> <else pos:start="183:15" pos:end="189:13">else <block pos:start="183:20" pos:end="189:13">{<block_content pos:start="185:17" pos:end="187:56">

		<expr_stmt pos:start="185:17" pos:end="185:72"><expr pos:start="185:17" pos:end="185:71"><call pos:start="185:17" pos:end="185:71"><name pos:start="185:17" pos:end="185:25">VNC_DEBUG</name><argument_list pos:start="185:26" pos:end="185:71">(<argument pos:start="185:27" pos:end="185:70"><expr pos:start="185:27" pos:end="185:70"><literal type="string" pos:start="185:27" pos:end="185:70">"Initializing VNC server with TLS no auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="187:17" pos:end="187:56"><expr pos:start="187:17" pos:end="187:55"><name pos:start="187:17" pos:end="187:27"><name pos:start="187:17" pos:end="187:18">vs</name><operator pos:start="187:19" pos:end="187:20">-&gt;</operator><name pos:start="187:21" pos:end="187:27">subauth</name></name> <operator pos:start="187:29" pos:end="187:29">=</operator> <name pos:start="187:31" pos:end="187:55">VNC_AUTH_VENCRYPT_TLSNONE</name></expr>;</expr_stmt>

	    </block_content>}</block></else></if_stmt>

	</block_content>}</block></if> <else pos:start="191:11" pos:end="206:0">else <block pos:start="191:16" pos:end="206:0">{<block_content pos:start="195:13" pos:end="201:43">

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>

	    <expr_stmt pos:start="195:13" pos:end="195:64"><expr pos:start="195:13" pos:end="195:63"><call pos:start="195:13" pos:end="195:63"><name pos:start="195:13" pos:end="195:21">VNC_DEBUG</name><argument_list pos:start="195:22" pos:end="195:63">(<argument pos:start="195:23" pos:end="195:62"><expr pos:start="195:23" pos:end="195:62"><literal type="string" pos:start="195:23" pos:end="195:62">"Initializing VNC server with no auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="197:13" pos:end="200:0"><expr pos:start="197:13" pos:end="197:36"><name pos:start="197:13" pos:end="197:20"><name pos:start="197:13" pos:end="197:14">vs</name><operator pos:start="197:15" pos:end="197:16">-&gt;</operator><name pos:start="197:17" pos:end="197:20">auth</name></name> <operator pos:start="197:22" pos:end="197:22">=</operator> <name pos:start="197:24" pos:end="197:36">VNC_AUTH_NONE</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="199:1" pos:end="199:21">#<cpp:directive pos:start="199:2" pos:end="199:6">ifdef</cpp:directive> <name pos:start="199:8" pos:end="199:21">CONFIG_VNC_TLS</name></cpp:ifdef>

	    <expr_stmt pos:start="201:13" pos:end="201:43"><expr pos:start="201:13" pos:end="201:42"><name pos:start="201:13" pos:end="201:23"><name pos:start="201:13" pos:end="201:14">vs</name><operator pos:start="201:15" pos:end="201:16">-&gt;</operator><name pos:start="201:17" pos:end="201:23">subauth</name></name> <operator pos:start="201:25" pos:end="201:25">=</operator> <name pos:start="201:27" pos:end="201:42">VNC_AUTH_INVALID</name></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

<cpp:endif pos:start="205:1" pos:end="205:6">#<cpp:directive pos:start="205:2" pos:end="205:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="211:5" pos:end="277:5"><if pos:start="211:5" pos:end="245:5">if <condition pos:start="211:8" pos:end="211:16">(<expr pos:start="211:9" pos:end="211:15"><name pos:start="211:9" pos:end="211:15">reverse</name></expr>)</condition> <block pos:start="211:18" pos:end="245:5">{<block_content pos:start="215:9" pos:end="241:17">

        <comment type="block" pos:start="213:9" pos:end="213:31">/* connect to viewer */</comment>

        <if_stmt pos:start="215:9" pos:end="221:59"><if pos:start="215:9" pos:end="217:48">if <condition pos:start="215:12" pos:end="215:46">(<expr pos:start="215:13" pos:end="215:45"><call pos:start="215:13" pos:end="215:40"><name pos:start="215:13" pos:end="215:19">strncmp</name><argument_list pos:start="215:20" pos:end="215:40">(<argument pos:start="215:21" pos:end="215:27"><expr pos:start="215:21" pos:end="215:27"><name pos:start="215:21" pos:end="215:27">display</name></expr></argument>, <argument pos:start="215:30" pos:end="215:36"><expr pos:start="215:30" pos:end="215:36"><literal type="string" pos:start="215:30" pos:end="215:36">"unix:"</literal></expr></argument>, <argument pos:start="215:39" pos:end="215:39"><expr pos:start="215:39" pos:end="215:39"><literal type="number" pos:start="215:39" pos:end="215:39">5</literal></expr></argument>)</argument_list></call> <operator pos:start="215:42" pos:end="215:43">==</operator> <literal type="number" pos:start="215:45" pos:end="215:45">0</literal></expr>)</condition><block type="pseudo" pos:start="217:13" pos:end="217:48"><block_content pos:start="217:13" pos:end="217:48">

            <expr_stmt pos:start="217:13" pos:end="217:48"><expr pos:start="217:13" pos:end="217:47"><name pos:start="217:13" pos:end="217:21"><name pos:start="217:13" pos:end="217:14">vs</name><operator pos:start="217:15" pos:end="217:16">-&gt;</operator><name pos:start="217:17" pos:end="217:21">lsock</name></name> <operator pos:start="217:23" pos:end="217:23">=</operator> <call pos:start="217:25" pos:end="217:47"><name pos:start="217:25" pos:end="217:36">unix_connect</name><argument_list pos:start="217:37" pos:end="217:47">(<argument pos:start="217:38" pos:end="217:46"><expr pos:start="217:38" pos:end="217:46"><name pos:start="217:38" pos:end="217:44">display</name><operator pos:start="217:45" pos:end="217:45">+</operator><literal type="number" pos:start="217:46" pos:end="217:46">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="219:9" pos:end="221:59">else<block type="pseudo" pos:start="221:13" pos:end="221:59"><block_content pos:start="221:13" pos:end="221:59">

            <expr_stmt pos:start="221:13" pos:end="221:59"><expr pos:start="221:13" pos:end="221:58"><name pos:start="221:13" pos:end="221:21"><name pos:start="221:13" pos:end="221:14">vs</name><operator pos:start="221:15" pos:end="221:16">-&gt;</operator><name pos:start="221:17" pos:end="221:21">lsock</name></name> <operator pos:start="221:23" pos:end="221:23">=</operator> <call pos:start="221:25" pos:end="221:58"><name pos:start="221:25" pos:end="221:36">inet_connect</name><argument_list pos:start="221:37" pos:end="221:58">(<argument pos:start="221:38" pos:end="221:44"><expr pos:start="221:38" pos:end="221:44"><name pos:start="221:38" pos:end="221:44">display</name></expr></argument>, <argument pos:start="221:47" pos:end="221:57"><expr pos:start="221:47" pos:end="221:57"><name pos:start="221:47" pos:end="221:57">SOCK_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="223:9" pos:end="239:9"><if pos:start="223:9" pos:end="231:9">if <condition pos:start="223:12" pos:end="223:28">(<expr pos:start="223:13" pos:end="223:27"><operator pos:start="223:13" pos:end="223:13">-</operator><literal type="number" pos:start="223:14" pos:end="223:14">1</literal> <operator pos:start="223:16" pos:end="223:17">==</operator> <name pos:start="223:19" pos:end="223:27"><name pos:start="223:19" pos:end="223:20">vs</name><operator pos:start="223:21" pos:end="223:22">-&gt;</operator><name pos:start="223:23" pos:end="223:27">lsock</name></name></expr>)</condition> <block pos:start="223:30" pos:end="231:9">{<block_content pos:start="225:13" pos:end="229:22">

            <expr_stmt pos:start="225:13" pos:end="225:30"><expr pos:start="225:13" pos:end="225:29"><call pos:start="225:13" pos:end="225:29"><name pos:start="225:13" pos:end="225:16">free</name><argument_list pos:start="225:17" pos:end="225:29">(<argument pos:start="225:18" pos:end="225:28"><expr pos:start="225:18" pos:end="225:28"><name pos:start="225:18" pos:end="225:28"><name pos:start="225:18" pos:end="225:19">vs</name><operator pos:start="225:20" pos:end="225:21">-&gt;</operator><name pos:start="225:22" pos:end="225:28">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:31"><expr pos:start="227:13" pos:end="227:30"><name pos:start="227:13" pos:end="227:23"><name pos:start="227:13" pos:end="227:14">vs</name><operator pos:start="227:15" pos:end="227:16">-&gt;</operator><name pos:start="227:17" pos:end="227:23">display</name></name> <operator pos:start="227:25" pos:end="227:25">=</operator> <name pos:start="227:27" pos:end="227:30">NULL</name></expr>;</expr_stmt>

            <return pos:start="229:13" pos:end="229:22">return <expr pos:start="229:20" pos:end="229:21"><operator pos:start="229:20" pos:end="229:20">-</operator><literal type="number" pos:start="229:21" pos:end="229:21">1</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="231:11" pos:end="239:9">else <block pos:start="231:16" pos:end="239:9">{<block_content pos:start="233:13" pos:end="237:28">

            <expr_stmt pos:start="233:13" pos:end="233:34"><expr pos:start="233:13" pos:end="233:33"><name pos:start="233:13" pos:end="233:21"><name pos:start="233:13" pos:end="233:14">vs</name><operator pos:start="233:15" pos:end="233:16">-&gt;</operator><name pos:start="233:17" pos:end="233:21">csock</name></name> <operator pos:start="233:23" pos:end="233:23">=</operator> <name pos:start="233:25" pos:end="233:33"><name pos:start="233:25" pos:end="233:26">vs</name><operator pos:start="233:27" pos:end="233:28">-&gt;</operator><name pos:start="233:29" pos:end="233:33">lsock</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:27"><expr pos:start="235:13" pos:end="235:26"><name pos:start="235:13" pos:end="235:21"><name pos:start="235:13" pos:end="235:14">vs</name><operator pos:start="235:15" pos:end="235:16">-&gt;</operator><name pos:start="235:17" pos:end="235:21">lsock</name></name> <operator pos:start="235:23" pos:end="235:23">=</operator> <operator pos:start="235:25" pos:end="235:25">-</operator><literal type="number" pos:start="235:26" pos:end="235:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:28"><expr pos:start="237:13" pos:end="237:27"><call pos:start="237:13" pos:end="237:27"><name pos:start="237:13" pos:end="237:23">vnc_connect</name><argument_list pos:start="237:24" pos:end="237:27">(<argument pos:start="237:25" pos:end="237:26"><expr pos:start="237:25" pos:end="237:26"><name pos:start="237:25" pos:end="237:26">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="241:9" pos:end="241:17">return <expr pos:start="241:16" pos:end="241:16"><literal type="number" pos:start="241:16" pos:end="241:16">0</literal></expr>;</return>



    </block_content>}</block></if> <else pos:start="245:7" pos:end="277:5">else <block pos:start="245:12" pos:end="277:5">{<block_content pos:start="249:9" pos:end="275:9">

        <comment type="block" pos:start="247:9" pos:end="247:33">/* listen for connects */</comment>

        <decl_stmt pos:start="249:9" pos:end="249:18"><decl pos:start="249:9" pos:end="249:17"><type pos:start="249:9" pos:end="249:14"><name pos:start="249:9" pos:end="249:12">char</name> <modifier pos:start="249:14" pos:end="249:14">*</modifier></type><name pos:start="249:15" pos:end="249:17">dpy</name></decl>;</decl_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:31"><expr pos:start="251:9" pos:end="251:30"><name pos:start="251:9" pos:end="251:11">dpy</name> <operator pos:start="251:13" pos:end="251:13">=</operator> <call pos:start="251:15" pos:end="251:30"><name pos:start="251:15" pos:end="251:25">qemu_malloc</name><argument_list pos:start="251:26" pos:end="251:30">(<argument pos:start="251:27" pos:end="251:29"><expr pos:start="251:27" pos:end="251:29"><literal type="number" pos:start="251:27" pos:end="251:29">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="253:9" pos:end="263:9"><if pos:start="253:9" pos:end="259:9">if <condition pos:start="253:12" pos:end="253:46">(<expr pos:start="253:13" pos:end="253:45"><call pos:start="253:13" pos:end="253:40"><name pos:start="253:13" pos:end="253:19">strncmp</name><argument_list pos:start="253:20" pos:end="253:40">(<argument pos:start="253:21" pos:end="253:27"><expr pos:start="253:21" pos:end="253:27"><name pos:start="253:21" pos:end="253:27">display</name></expr></argument>, <argument pos:start="253:30" pos:end="253:36"><expr pos:start="253:30" pos:end="253:36"><literal type="string" pos:start="253:30" pos:end="253:36">"unix:"</literal></expr></argument>, <argument pos:start="253:39" pos:end="253:39"><expr pos:start="253:39" pos:end="253:39"><literal type="number" pos:start="253:39" pos:end="253:39">5</literal></expr></argument>)</argument_list></call> <operator pos:start="253:42" pos:end="253:43">==</operator> <literal type="number" pos:start="253:45" pos:end="253:45">0</literal></expr>)</condition> <block pos:start="253:48" pos:end="259:9">{<block_content pos:start="255:13" pos:end="257:59">

            <expr_stmt pos:start="255:13" pos:end="255:33"><expr pos:start="255:13" pos:end="255:32"><call pos:start="255:13" pos:end="255:32"><name pos:start="255:13" pos:end="255:18">strcpy</name><argument_list pos:start="255:19" pos:end="255:32">(<argument pos:start="255:20" pos:end="255:22"><expr pos:start="255:20" pos:end="255:22"><name pos:start="255:20" pos:end="255:22">dpy</name></expr></argument>, <argument pos:start="255:25" pos:end="255:31"><expr pos:start="255:25" pos:end="255:31"><literal type="string" pos:start="255:25" pos:end="255:31">"unix:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:59"><expr pos:start="257:13" pos:end="257:58"><name pos:start="257:13" pos:end="257:21"><name pos:start="257:13" pos:end="257:14">vs</name><operator pos:start="257:15" pos:end="257:16">-&gt;</operator><name pos:start="257:17" pos:end="257:21">lsock</name></name> <operator pos:start="257:23" pos:end="257:23">=</operator> <call pos:start="257:25" pos:end="257:58"><name pos:start="257:25" pos:end="257:35">unix_listen</name><argument_list pos:start="257:36" pos:end="257:58">(<argument pos:start="257:37" pos:end="257:43"><expr pos:start="257:37" pos:end="257:43"><name pos:start="257:37" pos:end="257:43">display</name></expr></argument>, <argument pos:start="257:46" pos:end="257:50"><expr pos:start="257:46" pos:end="257:50"><name pos:start="257:46" pos:end="257:48">dpy</name><operator pos:start="257:49" pos:end="257:49">+</operator><literal type="number" pos:start="257:50" pos:end="257:50">5</literal></expr></argument>, <argument pos:start="257:53" pos:end="257:57"><expr pos:start="257:53" pos:end="257:57"><literal type="number" pos:start="257:53" pos:end="257:56">256</literal><operator pos:start="257:56" pos:end="257:56">-</operator><literal type="number" pos:start="257:57" pos:end="257:57">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="259:11" pos:end="263:9">else <block pos:start="259:16" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:74">

            <expr_stmt pos:start="261:13" pos:end="261:74"><expr pos:start="261:13" pos:end="261:73"><name pos:start="261:13" pos:end="261:21"><name pos:start="261:13" pos:end="261:14">vs</name><operator pos:start="261:15" pos:end="261:16">-&gt;</operator><name pos:start="261:17" pos:end="261:21">lsock</name></name> <operator pos:start="261:23" pos:end="261:23">=</operator> <call pos:start="261:25" pos:end="261:73"><name pos:start="261:25" pos:end="261:35">inet_listen</name><argument_list pos:start="261:36" pos:end="261:73">(<argument pos:start="261:37" pos:end="261:43"><expr pos:start="261:37" pos:end="261:43"><name pos:start="261:37" pos:end="261:43">display</name></expr></argument>, <argument pos:start="261:46" pos:end="261:48"><expr pos:start="261:46" pos:end="261:48"><name pos:start="261:46" pos:end="261:48">dpy</name></expr></argument>, <argument pos:start="261:51" pos:end="261:53"><expr pos:start="261:51" pos:end="261:53"><literal type="number" pos:start="261:51" pos:end="261:53">256</literal></expr></argument>, <argument pos:start="261:56" pos:end="261:66"><expr pos:start="261:56" pos:end="261:66"><name pos:start="261:56" pos:end="261:66">SOCK_STREAM</name></expr></argument>, <argument pos:start="261:69" pos:end="261:72"><expr pos:start="261:69" pos:end="261:72"><literal type="number" pos:start="261:69" pos:end="261:72">5900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="265:9" pos:end="275:9"><if pos:start="265:9" pos:end="269:9">if <condition pos:start="265:12" pos:end="265:28">(<expr pos:start="265:13" pos:end="265:27"><operator pos:start="265:13" pos:end="265:13">-</operator><literal type="number" pos:start="265:14" pos:end="265:14">1</literal> <operator pos:start="265:16" pos:end="265:17">==</operator> <name pos:start="265:19" pos:end="265:27"><name pos:start="265:19" pos:end="265:20">vs</name><operator pos:start="265:21" pos:end="265:22">-&gt;</operator><name pos:start="265:23" pos:end="265:27">lsock</name></name></expr>)</condition> <block pos:start="265:30" pos:end="269:9">{<block_content pos:start="267:13" pos:end="267:22">

            <expr_stmt pos:start="267:13" pos:end="267:22"><expr pos:start="267:13" pos:end="267:21"><call pos:start="267:13" pos:end="267:21"><name pos:start="267:13" pos:end="267:16">free</name><argument_list pos:start="267:17" pos:end="267:21">(<argument pos:start="267:18" pos:end="267:20"><expr pos:start="267:18" pos:end="267:20"><name pos:start="267:18" pos:end="267:20">dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="269:11" pos:end="275:9">else <block pos:start="269:16" pos:end="275:9">{<block_content pos:start="271:13" pos:end="273:30">

            <expr_stmt pos:start="271:13" pos:end="271:30"><expr pos:start="271:13" pos:end="271:29"><call pos:start="271:13" pos:end="271:29"><name pos:start="271:13" pos:end="271:16">free</name><argument_list pos:start="271:17" pos:end="271:29">(<argument pos:start="271:18" pos:end="271:28"><expr pos:start="271:18" pos:end="271:28"><name pos:start="271:18" pos:end="271:28"><name pos:start="271:18" pos:end="271:19">vs</name><operator pos:start="271:20" pos:end="271:21">-&gt;</operator><name pos:start="271:22" pos:end="271:28">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:30"><expr pos:start="273:13" pos:end="273:29"><name pos:start="273:13" pos:end="273:23"><name pos:start="273:13" pos:end="273:14">vs</name><operator pos:start="273:15" pos:end="273:16">-&gt;</operator><name pos:start="273:17" pos:end="273:23">display</name></name> <operator pos:start="273:25" pos:end="273:25">=</operator> <name pos:start="273:27" pos:end="273:29">dpy</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="281:5" pos:end="281:87">return <expr pos:start="281:12" pos:end="281:86"><call pos:start="281:12" pos:end="281:86"><name pos:start="281:12" pos:end="281:31">qemu_set_fd_handler2</name><argument_list pos:start="281:32" pos:end="281:86">(<argument pos:start="281:33" pos:end="281:41"><expr pos:start="281:33" pos:end="281:41"><name pos:start="281:33" pos:end="281:41"><name pos:start="281:33" pos:end="281:34">vs</name><operator pos:start="281:35" pos:end="281:36">-&gt;</operator><name pos:start="281:37" pos:end="281:41">lsock</name></name></expr></argument>, <argument pos:start="281:44" pos:end="281:58"><expr pos:start="281:44" pos:end="281:58"><name pos:start="281:44" pos:end="281:58">vnc_listen_poll</name></expr></argument>, <argument pos:start="281:61" pos:end="281:75"><expr pos:start="281:61" pos:end="281:75"><name pos:start="281:61" pos:end="281:75">vnc_listen_read</name></expr></argument>, <argument pos:start="281:78" pos:end="281:81"><expr pos:start="281:78" pos:end="281:81"><name pos:start="281:78" pos:end="281:81">NULL</name></expr></argument>, <argument pos:start="281:84" pos:end="281:85"><expr pos:start="281:84" pos:end="281:85"><name pos:start="281:84" pos:end="281:85">vs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
