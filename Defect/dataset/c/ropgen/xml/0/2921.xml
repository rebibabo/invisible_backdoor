<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2921.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">decode_delta_e</name><parameter_list pos:start="1:27" pos:end="5:66">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:34">uint8_t</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">dst</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:45"><decl pos:start="3:28" pos:end="3:45"><type pos:start="3:28" pos:end="3:45"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:40">uint8_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">buf</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:69"><decl pos:start="3:48" pos:end="3:69"><type pos:start="3:48" pos:end="3:69"><specifier pos:start="3:48" pos:end="3:52">const</specifier> <name pos:start="3:54" pos:end="3:60">uint8_t</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:69">buf_end</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:32"><decl pos:start="5:28" pos:end="5:32"><type pos:start="5:28" pos:end="5:32"><name pos:start="5:28" pos:end="5:30">int</name></type> <name pos:start="5:32" pos:end="5:32">w</name></decl></parameter>, <parameter pos:start="5:35" pos:end="5:42"><decl pos:start="5:35" pos:end="5:42"><type pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:37">int</name></type> <name pos:start="5:39" pos:end="5:42">flag</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:51"><decl pos:start="5:45" pos:end="5:51"><type pos:start="5:45" pos:end="5:51"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:51">bpp</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:65"><decl pos:start="5:54" pos:end="5:65"><type pos:start="5:54" pos:end="5:65"><name pos:start="5:54" pos:end="5:56">int</name></type> <name pos:start="5:58" pos:end="5:65">dst_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="107:1">{<block_content pos:start="9:5" pos:end="105:5">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">planepitch</name> <init pos:start="9:20" pos:end="9:40">= <expr pos:start="9:22" pos:end="9:40"><call pos:start="9:22" pos:end="9:35"><name pos:start="9:22" pos:end="9:28">FFALIGN</name><argument_list pos:start="9:29" pos:end="9:35">(<argument pos:start="9:30" pos:end="9:30"><expr pos:start="9:30" pos:end="9:30"><name pos:start="9:30" pos:end="9:30">w</name></expr></argument>, <argument pos:start="9:33" pos:end="9:34"><expr pos:start="9:33" pos:end="9:34"><literal type="number" pos:start="9:33" pos:end="9:34">16</literal></expr></argument>)</argument_list></call> <operator pos:start="9:37" pos:end="9:38">&gt;&gt;</operator> <literal type="number" pos:start="9:40" pos:end="9:40">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">pitch</name> <init pos:start="11:15" pos:end="11:32">= <expr pos:start="11:17" pos:end="11:32"><name pos:start="11:17" pos:end="11:26">planepitch</name> <operator pos:start="11:28" pos:end="11:28">*</operator> <name pos:start="11:30" pos:end="11:32">bpp</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:23">planepitch_byte</name> <init pos:start="13:25" pos:end="13:37">= <expr pos:start="13:27" pos:end="13:37"><operator pos:start="13:27" pos:end="13:27">(</operator><name pos:start="13:28" pos:end="13:28">w</name> <operator pos:start="13:30" pos:end="13:30">+</operator> <literal type="number" pos:start="13:32" pos:end="13:32">7</literal><operator pos:start="13:33" pos:end="13:33">)</operator> <operator pos:start="13:35" pos:end="13:35">/</operator> <literal type="number" pos:start="13:37" pos:end="13:37">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:20">entries</name></decl>, <decl pos:start="15:23" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:23" pos:end="15:28">ofssrc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:18">GetByteContext</name></type> <name pos:start="17:20" pos:end="17:21">gb</name></decl>, <decl pos:start="17:24" pos:end="17:27"><type ref="prev" pos:start="17:5" pos:end="17:18"/><name pos:start="17:24" pos:end="17:27">ptrs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:18">PutByteContext</name></type> <name pos:start="19:20" pos:end="19:21">pb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">k</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:15"><if pos:start="25:5" pos:end="27:15">if <condition pos:start="25:8" pos:end="25:33">(<expr pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:15">buf_end</name> <operator pos:start="25:17" pos:end="25:17">-</operator> <name pos:start="25:19" pos:end="25:21">buf</name> <operator pos:start="25:23" pos:end="25:24">&lt;=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">4</literal> <operator pos:start="25:28" pos:end="25:28">*</operator> <name pos:start="25:30" pos:end="25:32">bpp</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:15"><block_content pos:start="27:9" pos:end="27:15">

        <return pos:start="27:9" pos:end="27:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:48"><expr pos:start="31:5" pos:end="31:47"><call pos:start="31:5" pos:end="31:47"><name pos:start="31:5" pos:end="31:27">bytestream2_init_writer</name><argument_list pos:start="31:28" pos:end="31:47">(<argument pos:start="31:29" pos:end="31:31"><expr pos:start="31:29" pos:end="31:31"><operator pos:start="31:29" pos:end="31:29">&amp;</operator><name pos:start="31:30" pos:end="31:31">pb</name></expr></argument>, <argument pos:start="31:34" pos:end="31:36"><expr pos:start="31:34" pos:end="31:36"><name pos:start="31:34" pos:end="31:36">dst</name></expr></argument>, <argument pos:start="31:39" pos:end="31:46"><expr pos:start="31:39" pos:end="31:46"><name pos:start="31:39" pos:end="31:46">dst_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><call pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:20">bytestream2_init</name><argument_list pos:start="33:21" pos:end="33:41">(<argument pos:start="33:22" pos:end="33:26"><expr pos:start="33:22" pos:end="33:26"><operator pos:start="33:22" pos:end="33:22">&amp;</operator><name pos:start="33:23" pos:end="33:26">ptrs</name></expr></argument>, <argument pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:31">buf</name></expr></argument>, <argument pos:start="33:34" pos:end="33:40"><expr pos:start="33:34" pos:end="33:40"><name pos:start="33:34" pos:end="33:36">bpp</name> <operator pos:start="33:38" pos:end="33:38">*</operator> <literal type="number" pos:start="33:40" pos:end="33:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="37:5" pos:end="105:5">for <control pos:start="37:9" pos:end="37:29">(<init pos:start="37:10" pos:end="37:15"><expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:10">k</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr>;</init> <condition pos:start="37:17" pos:end="37:24"><expr pos:start="37:17" pos:end="37:23"><name pos:start="37:17" pos:end="37:17">k</name> <operator pos:start="37:19" pos:end="37:19">&lt;</operator> <name pos:start="37:21" pos:end="37:23">bpp</name></expr>;</condition> <incr pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:26">k</name><operator pos:start="37:27" pos:end="37:28">++</operator></expr></incr>)</control> <block pos:start="37:31" pos:end="105:5">{<block_content pos:start="39:9" pos:end="103:9">

        <expr_stmt pos:start="39:9" pos:end="39:45"><expr pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:14">ofssrc</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:44"><name pos:start="39:18" pos:end="39:37">bytestream2_get_be32</name><argument_list pos:start="39:38" pos:end="39:44">(<argument pos:start="39:39" pos:end="39:43"><expr pos:start="39:39" pos:end="39:43"><operator pos:start="39:39" pos:end="39:39">&amp;</operator><name pos:start="39:40" pos:end="39:43">ptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="43:9" pos:end="45:21"><if pos:start="43:9" pos:end="45:21">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:19">ofssrc</name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:21"><block_content pos:start="45:13" pos:end="45:21">

            <continue pos:start="45:13" pos:end="45:21">continue;</continue></block_content></block></if></if_stmt>



        <if_stmt pos:start="49:9" pos:end="51:21"><if pos:start="49:9" pos:end="51:21">if <condition pos:start="49:12" pos:end="49:36">(<expr pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:18">ofssrc</name> <operator pos:start="49:20" pos:end="49:21">&gt;=</operator> <name pos:start="49:23" pos:end="49:29">buf_end</name> <operator pos:start="49:31" pos:end="49:31">-</operator> <name pos:start="49:33" pos:end="49:35">buf</name></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:21"><block_content pos:start="51:13" pos:end="51:21">

            <continue pos:start="51:13" pos:end="51:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:70"><expr pos:start="55:9" pos:end="55:69"><call pos:start="55:9" pos:end="55:69"><name pos:start="55:9" pos:end="55:24">bytestream2_init</name><argument_list pos:start="55:25" pos:end="55:69">(<argument pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><operator pos:start="55:26" pos:end="55:26">&amp;</operator><name pos:start="55:27" pos:end="55:28">gb</name></expr></argument>, <argument pos:start="55:31" pos:end="55:42"><expr pos:start="55:31" pos:end="55:42"><name pos:start="55:31" pos:end="55:33">buf</name> <operator pos:start="55:35" pos:end="55:35">+</operator> <name pos:start="55:37" pos:end="55:42">ofssrc</name></expr></argument>, <argument pos:start="55:45" pos:end="55:68"><expr pos:start="55:45" pos:end="55:68"><name pos:start="55:45" pos:end="55:51">buf_end</name> <operator pos:start="55:53" pos:end="55:53">-</operator> <operator pos:start="55:55" pos:end="55:55">(</operator><name pos:start="55:56" pos:end="55:58">buf</name> <operator pos:start="55:60" pos:end="55:60">+</operator> <name pos:start="55:62" pos:end="55:67">ofssrc</name><operator pos:start="55:68" pos:end="55:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:44"><expr pos:start="59:9" pos:end="59:43"><name pos:start="59:9" pos:end="59:15">entries</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:43"><name pos:start="59:19" pos:end="59:38">bytestream2_get_be16</name><argument_list pos:start="59:39" pos:end="59:43">(<argument pos:start="59:40" pos:end="59:42"><expr pos:start="59:40" pos:end="59:42"><operator pos:start="59:40" pos:end="59:40">&amp;</operator><name pos:start="59:41" pos:end="59:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="61:9" pos:end="103:9">while <condition pos:start="61:15" pos:end="61:23">(<expr pos:start="61:16" pos:end="61:22"><name pos:start="61:16" pos:end="61:22">entries</name></expr>)</condition> <block pos:start="61:25" pos:end="103:9">{<block_content pos:start="63:13" pos:end="101:22">

            <decl_stmt pos:start="63:13" pos:end="63:56"><decl pos:start="63:13" pos:end="63:55"><type pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:19">int16_t</name></type> <name pos:start="63:21" pos:end="63:26">opcode</name>  <init pos:start="63:29" pos:end="63:55">= <expr pos:start="63:31" pos:end="63:55"><call pos:start="63:31" pos:end="63:55"><name pos:start="63:31" pos:end="63:50">bytestream2_get_be16</name><argument_list pos:start="63:51" pos:end="63:55">(<argument pos:start="63:52" pos:end="63:54"><expr pos:start="63:52" pos:end="63:54"><operator pos:start="63:52" pos:end="63:52">&amp;</operator><name pos:start="63:53" pos:end="63:54">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="65:13" pos:end="65:56"><decl pos:start="65:13" pos:end="65:55"><type pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:20">unsigned</name></type> <name pos:start="65:22" pos:end="65:27">offset</name> <init pos:start="65:29" pos:end="65:55">= <expr pos:start="65:31" pos:end="65:55"><call pos:start="65:31" pos:end="65:55"><name pos:start="65:31" pos:end="65:50">bytestream2_get_be32</name><argument_list pos:start="65:51" pos:end="65:55">(<argument pos:start="65:52" pos:end="65:54"><expr pos:start="65:52" pos:end="65:54"><operator pos:start="65:52" pos:end="65:52">&amp;</operator><name pos:start="65:53" pos:end="65:54">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="69:13" pos:end="69:128"><expr pos:start="69:13" pos:end="69:127"><call pos:start="69:13" pos:end="69:127"><name pos:start="69:13" pos:end="69:30">bytestream2_seek_p</name><argument_list pos:start="69:31" pos:end="69:127">(<argument pos:start="69:32" pos:end="69:34"><expr pos:start="69:32" pos:end="69:34"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:34">pb</name></expr></argument>, <argument pos:start="69:37" pos:end="69:116"><expr pos:start="69:37" pos:end="69:116"><operator pos:start="69:37" pos:end="69:37">(</operator><name pos:start="69:38" pos:end="69:43">offset</name> <operator pos:start="69:45" pos:end="69:45">/</operator> <name pos:start="69:47" pos:end="69:61">planepitch_byte</name><operator pos:start="69:62" pos:end="69:62">)</operator> <operator pos:start="69:64" pos:end="69:64">*</operator> <name pos:start="69:66" pos:end="69:70">pitch</name> <operator pos:start="69:72" pos:end="69:72">+</operator> <operator pos:start="69:74" pos:end="69:74">(</operator><name pos:start="69:75" pos:end="69:80">offset</name> <operator pos:start="69:82" pos:end="69:82">%</operator> <name pos:start="69:84" pos:end="69:98">planepitch_byte</name><operator pos:start="69:99" pos:end="69:99">)</operator> <operator pos:start="69:101" pos:end="69:101">+</operator> <name pos:start="69:103" pos:end="69:103">k</name> <operator pos:start="69:105" pos:end="69:105">*</operator> <name pos:start="69:107" pos:end="69:116">planepitch</name></expr></argument>, <argument pos:start="69:119" pos:end="69:126"><expr pos:start="69:119" pos:end="69:126"><name pos:start="69:119" pos:end="69:126">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="99:13"><if pos:start="71:13" pos:end="85:13">if <condition pos:start="71:16" pos:end="71:28">(<expr pos:start="71:17" pos:end="71:27"><name pos:start="71:17" pos:end="71:22">opcode</name> <operator pos:start="71:24" pos:end="71:25">&gt;=</operator> <literal type="number" pos:start="71:27" pos:end="71:27">0</literal></expr>)</condition> <block pos:start="71:30" pos:end="85:13">{<block_content pos:start="73:17" pos:end="83:17">

                <decl_stmt pos:start="73:17" pos:end="73:55"><decl pos:start="73:17" pos:end="73:54"><type pos:start="73:17" pos:end="73:24"><name pos:start="73:17" pos:end="73:24">uint16_t</name></type> <name pos:start="73:26" pos:end="73:26">x</name> <init pos:start="73:28" pos:end="73:54">= <expr pos:start="73:30" pos:end="73:54"><call pos:start="73:30" pos:end="73:54"><name pos:start="73:30" pos:end="73:49">bytestream2_get_be16</name><argument_list pos:start="73:50" pos:end="73:54">(<argument pos:start="73:51" pos:end="73:53"><expr pos:start="73:51" pos:end="73:53"><operator pos:start="73:51" pos:end="73:51">&amp;</operator><name pos:start="73:52" pos:end="73:53">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <while pos:start="75:17" pos:end="83:17">while <condition pos:start="75:23" pos:end="75:71">(<expr pos:start="75:24" pos:end="75:70"><name pos:start="75:24" pos:end="75:29">opcode</name> <operator pos:start="75:31" pos:end="75:32">&amp;&amp;</operator> <call pos:start="75:34" pos:end="75:66"><name pos:start="75:34" pos:end="75:61">bytestream2_get_bytes_left_p</name><argument_list pos:start="75:62" pos:end="75:66">(<argument pos:start="75:63" pos:end="75:65"><expr pos:start="75:63" pos:end="75:65"><operator pos:start="75:63" pos:end="75:63">&amp;</operator><name pos:start="75:64" pos:end="75:65">pb</name></expr></argument>)</argument_list></call> <operator pos:start="75:68" pos:end="75:68">&gt;</operator> <literal type="number" pos:start="75:70" pos:end="75:70">0</literal></expr>)</condition> <block pos:start="75:73" pos:end="83:17">{<block_content pos:start="77:21" pos:end="81:29">

                    <expr_stmt pos:start="77:21" pos:end="77:49"><expr pos:start="77:21" pos:end="77:48"><call pos:start="77:21" pos:end="77:48"><name pos:start="77:21" pos:end="77:40">bytestream2_put_be16</name><argument_list pos:start="77:41" pos:end="77:48">(<argument pos:start="77:42" pos:end="77:44"><expr pos:start="77:42" pos:end="77:44"><operator pos:start="77:42" pos:end="77:42">&amp;</operator><name pos:start="77:43" pos:end="77:44">pb</name></expr></argument>, <argument pos:start="77:47" pos:end="77:47"><expr pos:start="77:47" pos:end="77:47"><name pos:start="77:47" pos:end="77:47">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="79:21" pos:end="79:55"><expr pos:start="79:21" pos:end="79:54"><call pos:start="79:21" pos:end="79:54"><name pos:start="79:21" pos:end="79:38">bytestream2_skip_p</name><argument_list pos:start="79:39" pos:end="79:54">(<argument pos:start="79:40" pos:end="79:42"><expr pos:start="79:40" pos:end="79:42"><operator pos:start="79:40" pos:end="79:40">&amp;</operator><name pos:start="79:41" pos:end="79:42">pb</name></expr></argument>, <argument pos:start="79:45" pos:end="79:53"><expr pos:start="79:45" pos:end="79:53"><name pos:start="79:45" pos:end="79:49">pitch</name> <operator pos:start="79:51" pos:end="79:51">-</operator> <literal type="number" pos:start="79:53" pos:end="79:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:29"><expr pos:start="81:21" pos:end="81:28"><name pos:start="81:21" pos:end="81:26">opcode</name><operator pos:start="81:27" pos:end="81:28">--</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if> <else pos:start="85:15" pos:end="99:13">else <block pos:start="85:20" pos:end="99:13">{<block_content pos:start="87:17" pos:end="97:17">

                <expr_stmt pos:start="87:17" pos:end="87:33"><expr pos:start="87:17" pos:end="87:32"><name pos:start="87:17" pos:end="87:22">opcode</name> <operator pos:start="87:24" pos:end="87:24">=</operator> <operator pos:start="87:26" pos:end="87:26">-</operator><name pos:start="87:27" pos:end="87:32">opcode</name></expr>;</expr_stmt>

                <while pos:start="89:17" pos:end="97:17">while <condition pos:start="89:23" pos:end="89:69">(<expr pos:start="89:24" pos:end="89:68"><name pos:start="89:24" pos:end="89:29">opcode</name> <operator pos:start="89:31" pos:end="89:32">&amp;&amp;</operator> <call pos:start="89:34" pos:end="89:64"><name pos:start="89:34" pos:end="89:59">bytestream2_get_bytes_left</name><argument_list pos:start="89:60" pos:end="89:64">(<argument pos:start="89:61" pos:end="89:63"><expr pos:start="89:61" pos:end="89:63"><operator pos:start="89:61" pos:end="89:61">&amp;</operator><name pos:start="89:62" pos:end="89:63">gb</name></expr></argument>)</argument_list></call> <operator pos:start="89:66" pos:end="89:66">&gt;</operator> <literal type="number" pos:start="89:68" pos:end="89:68">0</literal></expr>)</condition> <block pos:start="89:71" pos:end="97:17">{<block_content pos:start="91:21" pos:end="95:29">

                    <expr_stmt pos:start="91:21" pos:end="91:73"><expr pos:start="91:21" pos:end="91:72"><call pos:start="91:21" pos:end="91:72"><name pos:start="91:21" pos:end="91:40">bytestream2_put_be16</name><argument_list pos:start="91:41" pos:end="91:72">(<argument pos:start="91:42" pos:end="91:44"><expr pos:start="91:42" pos:end="91:44"><operator pos:start="91:42" pos:end="91:42">&amp;</operator><name pos:start="91:43" pos:end="91:44">pb</name></expr></argument>, <argument pos:start="91:47" pos:end="91:71"><expr pos:start="91:47" pos:end="91:71"><call pos:start="91:47" pos:end="91:71"><name pos:start="91:47" pos:end="91:66">bytestream2_get_be16</name><argument_list pos:start="91:67" pos:end="91:71">(<argument pos:start="91:68" pos:end="91:70"><expr pos:start="91:68" pos:end="91:70"><operator pos:start="91:68" pos:end="91:68">&amp;</operator><name pos:start="91:69" pos:end="91:70">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:55"><expr pos:start="93:21" pos:end="93:54"><call pos:start="93:21" pos:end="93:54"><name pos:start="93:21" pos:end="93:38">bytestream2_skip_p</name><argument_list pos:start="93:39" pos:end="93:54">(<argument pos:start="93:40" pos:end="93:42"><expr pos:start="93:40" pos:end="93:42"><operator pos:start="93:40" pos:end="93:40">&amp;</operator><name pos:start="93:41" pos:end="93:42">pb</name></expr></argument>, <argument pos:start="93:45" pos:end="93:53"><expr pos:start="93:45" pos:end="93:53"><name pos:start="93:45" pos:end="93:49">pitch</name> <operator pos:start="93:51" pos:end="93:51">-</operator> <literal type="number" pos:start="93:53" pos:end="93:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="95:29"><expr pos:start="95:21" pos:end="95:28"><name pos:start="95:21" pos:end="95:26">opcode</name><operator pos:start="95:27" pos:end="95:28">--</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:22"><expr pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:19">entries</name><operator pos:start="101:20" pos:end="101:21">--</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
