<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17207.c" pos:tabs="8"><function pos:start="1:1" pos:end="1009:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_h264_decode_mb_cavlc</name><parameter_list pos:start="1:28" pos:end="1:43">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">H264Context</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">h</name></decl></parameter>)</parameter_list><block pos:start="1:44" pos:end="1009:1">{<block_content pos:start="3:5" pos:end="1007:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">mb_xy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:23">partition_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:24">mb_type</name></decl>, <decl pos:start="9:27" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:27" pos:end="9:29">cbp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">dct8x8_allowed</name><init pos:start="11:23" pos:end="11:49">= <expr pos:start="11:25" pos:end="11:49"><name pos:start="11:25" pos:end="11:49"><name pos:start="11:25" pos:end="11:25">h</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:30">pps</name><operator pos:start="11:31" pos:end="11:31">.</operator><name pos:start="11:32" pos:end="11:49">transform_8x8_mode</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:54"><expr pos:start="15:5" pos:end="15:53"><name pos:start="15:5" pos:end="15:9">mb_xy</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:13">h</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:20">mb_xy</name></name> <operator pos:start="15:22" pos:end="15:22">=</operator> <name pos:start="15:24" pos:end="15:30"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:30">mb_x</name></name> <operator pos:start="15:32" pos:end="15:32">+</operator> <name pos:start="15:34" pos:end="15:40"><name pos:start="15:34" pos:end="15:34">s</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:40">mb_y</name></name><operator pos:start="15:41" pos:end="15:41">*</operator><name pos:start="15:42" pos:end="15:53"><name pos:start="15:42" pos:end="15:42">s</name><operator pos:start="15:43" pos:end="15:44">-&gt;</operator><name pos:start="15:45" pos:end="15:53">mb_stride</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:75"><expr pos:start="19:5" pos:end="19:74"><call pos:start="19:5" pos:end="19:74"><name pos:start="19:5" pos:end="19:11">tprintf</name><argument_list pos:start="19:12" pos:end="19:74">(<argument pos:start="19:13" pos:end="19:20"><expr pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:20">avctx</name></name></expr></argument>, <argument pos:start="19:23" pos:end="19:41"><expr pos:start="19:23" pos:end="19:41"><literal type="string" pos:start="19:23" pos:end="19:41">"pic:%d mb:%d/%d\n"</literal></expr></argument>, <argument pos:start="19:44" pos:end="19:55"><expr pos:start="19:44" pos:end="19:55"><name pos:start="19:44" pos:end="19:55"><name pos:start="19:44" pos:end="19:44">h</name><operator pos:start="19:45" pos:end="19:46">-&gt;</operator><name pos:start="19:47" pos:end="19:55">frame_num</name></name></expr></argument>, <argument pos:start="19:58" pos:end="19:64"><expr pos:start="19:58" pos:end="19:64"><name pos:start="19:58" pos:end="19:64"><name pos:start="19:58" pos:end="19:58">s</name><operator pos:start="19:59" pos:end="19:60">-&gt;</operator><name pos:start="19:61" pos:end="19:64">mb_x</name></name></expr></argument>, <argument pos:start="19:67" pos:end="19:73"><expr pos:start="19:67" pos:end="19:73"><name pos:start="19:67" pos:end="19:73"><name pos:start="19:67" pos:end="19:67">s</name><operator pos:start="19:68" pos:end="19:69">-&gt;</operator><name pos:start="19:70" pos:end="19:73">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:12"><expr pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:7">cbp</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <literal type="number" pos:start="21:11" pos:end="21:11">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="21:14" pos:end="23:32">/* avoid warning. FIXME: find a solution without slowing

                down the code */</comment>

    <if_stmt pos:start="25:5" pos:end="53:5"><if pos:start="25:5" pos:end="53:5">if<condition pos:start="25:7" pos:end="25:38">(<expr pos:start="25:8" pos:end="25:37"><name pos:start="25:8" pos:end="25:24"><name pos:start="25:8" pos:end="25:8">h</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:24">slice_type_nos</name></name> <operator pos:start="25:26" pos:end="25:27">!=</operator> <name pos:start="25:29" pos:end="25:37">FF_I_TYPE</name></expr>)</condition><block pos:start="25:39" pos:end="53:5">{<block_content pos:start="27:9" pos:end="51:9">

        <if_stmt pos:start="27:9" pos:end="29:50"><if pos:start="27:9" pos:end="29:50">if<condition pos:start="27:11" pos:end="27:30">(<expr pos:start="27:12" pos:end="27:29"><name pos:start="27:12" pos:end="27:25"><name pos:start="27:12" pos:end="27:12">s</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:25">mb_skip_run</name></name><operator pos:start="27:26" pos:end="27:27">==</operator><operator pos:start="27:28" pos:end="27:28">-</operator><literal type="number" pos:start="27:29" pos:end="27:29">1</literal></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:50"><block_content pos:start="29:13" pos:end="29:50">

            <expr_stmt pos:start="29:13" pos:end="29:50"><expr pos:start="29:13" pos:end="29:49"><name pos:start="29:13" pos:end="29:26"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:26">mb_skip_run</name></name><operator pos:start="29:27" pos:end="29:27">=</operator> <call pos:start="29:29" pos:end="29:49"><name pos:start="29:29" pos:end="29:41">get_ue_golomb</name><argument_list pos:start="29:42" pos:end="29:49">(<argument pos:start="29:43" pos:end="29:48"><expr pos:start="29:43" pos:end="29:48"><operator pos:start="29:43" pos:end="29:43">&amp;</operator><name pos:start="29:44" pos:end="29:48"><name pos:start="29:44" pos:end="29:44">s</name><operator pos:start="29:45" pos:end="29:46">-&gt;</operator><name pos:start="29:47" pos:end="29:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="33:9" pos:end="51:9"><if pos:start="33:9" pos:end="51:9">if <condition pos:start="33:12" pos:end="33:29">(<expr pos:start="33:13" pos:end="33:28"><name pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:26">mb_skip_run</name></name><operator pos:start="33:27" pos:end="33:28">--</operator></expr>)</condition> <block pos:start="33:31" pos:end="51:9">{<block_content pos:start="35:13" pos:end="49:21">

            <if_stmt pos:start="35:13" pos:end="45:13"><if pos:start="35:13" pos:end="45:13">if<condition pos:start="35:15" pos:end="35:47">(<expr pos:start="35:16" pos:end="35:46"><name pos:start="35:16" pos:end="35:26">FRAME_MBAFF</name> <operator pos:start="35:28" pos:end="35:29">&amp;&amp;</operator> <operator pos:start="35:31" pos:end="35:31">(</operator><name pos:start="35:32" pos:end="35:38"><name pos:start="35:32" pos:end="35:32">s</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:38">mb_y</name></name><operator pos:start="35:39" pos:end="35:39">&amp;</operator><literal type="number" pos:start="35:40" pos:end="35:40">1</literal><operator pos:start="35:41" pos:end="35:41">)</operator> <operator pos:start="35:43" pos:end="35:44">==</operator> <literal type="number" pos:start="35:46" pos:end="35:46">0</literal></expr>)</condition><block pos:start="35:48" pos:end="45:13">{<block_content pos:start="37:17" pos:end="43:51">

                <if_stmt pos:start="37:17" pos:end="43:51"><if pos:start="37:17" pos:end="39:80">if<condition pos:start="37:19" pos:end="37:37">(<expr pos:start="37:20" pos:end="37:36"><name pos:start="37:20" pos:end="37:33"><name pos:start="37:20" pos:end="37:20">s</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:33">mb_skip_run</name></name><operator pos:start="37:34" pos:end="37:35">==</operator><literal type="number" pos:start="37:36" pos:end="37:36">0</literal></expr>)</condition><block type="pseudo" pos:start="39:21" pos:end="39:80"><block_content pos:start="39:21" pos:end="39:80">

                    <expr_stmt pos:start="39:21" pos:end="39:80"><expr pos:start="39:21" pos:end="39:79"><name pos:start="39:21" pos:end="39:31"><name pos:start="39:21" pos:end="39:21">h</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:31">mb_mbaff</name></name> <operator pos:start="39:33" pos:end="39:33">=</operator> <name pos:start="39:35" pos:end="39:59"><name pos:start="39:35" pos:end="39:35">h</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:59">mb_field_decoding_flag</name></name> <operator pos:start="39:61" pos:end="39:61">=</operator> <call pos:start="39:63" pos:end="39:79"><name pos:start="39:63" pos:end="39:71">get_bits1</name><argument_list pos:start="39:72" pos:end="39:79">(<argument pos:start="39:73" pos:end="39:78"><expr pos:start="39:73" pos:end="39:78"><operator pos:start="39:73" pos:end="39:73">&amp;</operator><name pos:start="39:74" pos:end="39:78"><name pos:start="39:74" pos:end="39:74">s</name><operator pos:start="39:75" pos:end="39:76">-&gt;</operator><name pos:start="39:77" pos:end="39:78">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="41:17" pos:end="43:51">else<block type="pseudo" pos:start="43:21" pos:end="43:51"><block_content pos:start="43:21" pos:end="43:51">

                    <expr_stmt pos:start="43:21" pos:end="43:51"><expr pos:start="43:21" pos:end="43:50"><call pos:start="43:21" pos:end="43:50"><name pos:start="43:21" pos:end="43:47">predict_field_decoding_flag</name><argument_list pos:start="43:48" pos:end="43:50">(<argument pos:start="43:49" pos:end="43:49"><expr pos:start="43:49" pos:end="43:49"><name pos:start="43:49" pos:end="43:49">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:30"><expr pos:start="47:13" pos:end="47:29"><call pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:26">decode_mb_skip</name><argument_list pos:start="47:27" pos:end="47:29">(<argument pos:start="47:28" pos:end="47:28"><expr pos:start="47:28" pos:end="47:28"><name pos:start="47:28" pos:end="47:28">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:21">return <expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if<condition pos:start="55:7" pos:end="55:19">(<expr pos:start="55:8" pos:end="55:18"><name pos:start="55:8" pos:end="55:18">FRAME_MBAFF</name></expr>)</condition><block pos:start="55:20" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:72">

        <if_stmt pos:start="57:9" pos:end="59:72"><if pos:start="57:9" pos:end="59:72">if<condition pos:start="57:11" pos:end="57:30">( <expr pos:start="57:13" pos:end="57:28"><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:20"><name pos:start="57:14" pos:end="57:14">s</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:20">mb_y</name></name><operator pos:start="57:21" pos:end="57:21">&amp;</operator><literal type="number" pos:start="57:22" pos:end="57:22">1</literal><operator pos:start="57:23" pos:end="57:23">)</operator> <operator pos:start="57:25" pos:end="57:26">==</operator> <literal type="number" pos:start="57:28" pos:end="57:28">0</literal></expr> )</condition><block type="pseudo" pos:start="59:13" pos:end="59:72"><block_content pos:start="59:13" pos:end="59:72">

            <expr_stmt pos:start="59:13" pos:end="59:72"><expr pos:start="59:13" pos:end="59:71"><name pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:13">h</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:23">mb_mbaff</name></name> <operator pos:start="59:25" pos:end="59:25">=</operator> <name pos:start="59:27" pos:end="59:51"><name pos:start="59:27" pos:end="59:27">h</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:51">mb_field_decoding_flag</name></name> <operator pos:start="59:53" pos:end="59:53">=</operator> <call pos:start="59:55" pos:end="59:71"><name pos:start="59:55" pos:end="59:63">get_bits1</name><argument_list pos:start="59:64" pos:end="59:71">(<argument pos:start="59:65" pos:end="59:70"><expr pos:start="59:65" pos:end="59:70"><operator pos:start="59:65" pos:end="59:65">&amp;</operator><name pos:start="59:66" pos:end="59:70"><name pos:start="59:66" pos:end="59:66">s</name><operator pos:start="59:67" pos:end="59:68">-&gt;</operator><name pos:start="59:69" pos:end="59:70">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:26"><expr pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:5">h</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:22">prev_mb_skipped</name></name><operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:25">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:35"><expr pos:start="69:5" pos:end="69:34"><name pos:start="69:5" pos:end="69:11">mb_type</name><operator pos:start="69:12" pos:end="69:12">=</operator> <call pos:start="69:14" pos:end="69:34"><name pos:start="69:14" pos:end="69:26">get_ue_golomb</name><argument_list pos:start="69:27" pos:end="69:34">(<argument pos:start="69:28" pos:end="69:33"><expr pos:start="69:28" pos:end="69:33"><operator pos:start="69:28" pos:end="69:28">&amp;</operator><name pos:start="69:29" pos:end="69:33"><name pos:start="69:29" pos:end="69:29">s</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="129:5"><if pos:start="71:5" pos:end="87:5">if<condition pos:start="71:7" pos:end="71:38">(<expr pos:start="71:8" pos:end="71:37"><name pos:start="71:8" pos:end="71:24"><name pos:start="71:8" pos:end="71:8">h</name><operator pos:start="71:9" pos:end="71:10">-&gt;</operator><name pos:start="71:11" pos:end="71:24">slice_type_nos</name></name> <operator pos:start="71:26" pos:end="71:27">==</operator> <name pos:start="71:29" pos:end="71:37">FF_B_TYPE</name></expr>)</condition><block pos:start="71:39" pos:end="87:5">{<block_content pos:start="73:9" pos:end="85:9">

        <if_stmt pos:start="73:9" pos:end="85:9"><if pos:start="73:9" pos:end="79:9">if<condition pos:start="73:11" pos:end="73:24">(<expr pos:start="73:12" pos:end="73:23"><name pos:start="73:12" pos:end="73:18">mb_type</name> <operator pos:start="73:20" pos:end="73:20">&lt;</operator> <literal type="number" pos:start="73:22" pos:end="73:23">23</literal></expr>)</condition><block pos:start="73:25" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:58">

            <expr_stmt pos:start="75:13" pos:end="75:69"><expr pos:start="75:13" pos:end="75:68"><name pos:start="75:13" pos:end="75:27">partition_count</name><operator pos:start="75:28" pos:end="75:28">=</operator> <name pos:start="75:30" pos:end="75:52"><name pos:start="75:30" pos:end="75:43">b_mb_type_info</name><index pos:start="75:44" pos:end="75:52">[<expr pos:start="75:45" pos:end="75:51"><name pos:start="75:45" pos:end="75:51">mb_type</name></expr>]</index></name><operator pos:start="75:53" pos:end="75:53">.</operator><name pos:start="75:54" pos:end="75:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:58"><expr pos:start="77:13" pos:end="77:57"><name pos:start="77:13" pos:end="77:19">mb_type</name><operator pos:start="77:20" pos:end="77:20">=</operator>         <name pos:start="77:30" pos:end="77:52"><name pos:start="77:30" pos:end="77:43">b_mb_type_info</name><index pos:start="77:44" pos:end="77:52">[<expr pos:start="77:45" pos:end="77:51"><name pos:start="77:45" pos:end="77:51">mb_type</name></expr>]</index></name><operator pos:start="77:53" pos:end="77:53">.</operator><name pos:start="77:54" pos:end="77:57">type</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="79:10" pos:end="85:9">else<block pos:start="79:14" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:33">

            <expr_stmt pos:start="81:13" pos:end="81:26"><expr pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:19">mb_type</name> <operator pos:start="81:21" pos:end="81:22">-=</operator> <literal type="number" pos:start="81:24" pos:end="81:25">23</literal></expr>;</expr_stmt>

            <goto pos:start="83:13" pos:end="83:33">goto <name pos:start="83:18" pos:end="83:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="87:6" pos:end="103:5">else if<condition pos:start="87:13" pos:end="87:44">(<expr pos:start="87:14" pos:end="87:43"><name pos:start="87:14" pos:end="87:30"><name pos:start="87:14" pos:end="87:14">h</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:30">slice_type_nos</name></name> <operator pos:start="87:32" pos:end="87:33">==</operator> <name pos:start="87:35" pos:end="87:43">FF_P_TYPE</name></expr>)</condition><block pos:start="87:45" pos:end="103:5">{<block_content pos:start="89:9" pos:end="101:9">

        <if_stmt pos:start="89:9" pos:end="101:9"><if pos:start="89:9" pos:end="95:9">if<condition pos:start="89:11" pos:end="89:23">(<expr pos:start="89:12" pos:end="89:22"><name pos:start="89:12" pos:end="89:18">mb_type</name> <operator pos:start="89:20" pos:end="89:20">&lt;</operator> <literal type="number" pos:start="89:22" pos:end="89:22">5</literal></expr>)</condition><block pos:start="89:24" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:58">

            <expr_stmt pos:start="91:13" pos:end="91:69"><expr pos:start="91:13" pos:end="91:68"><name pos:start="91:13" pos:end="91:27">partition_count</name><operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:52"><name pos:start="91:30" pos:end="91:43">p_mb_type_info</name><index pos:start="91:44" pos:end="91:52">[<expr pos:start="91:45" pos:end="91:51"><name pos:start="91:45" pos:end="91:51">mb_type</name></expr>]</index></name><operator pos:start="91:53" pos:end="91:53">.</operator><name pos:start="91:54" pos:end="91:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:58"><expr pos:start="93:13" pos:end="93:57"><name pos:start="93:13" pos:end="93:19">mb_type</name><operator pos:start="93:20" pos:end="93:20">=</operator>         <name pos:start="93:30" pos:end="93:52"><name pos:start="93:30" pos:end="93:43">p_mb_type_info</name><index pos:start="93:44" pos:end="93:52">[<expr pos:start="93:45" pos:end="93:51"><name pos:start="93:45" pos:end="93:51">mb_type</name></expr>]</index></name><operator pos:start="93:53" pos:end="93:53">.</operator><name pos:start="93:54" pos:end="93:57">type</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="95:10" pos:end="101:9">else<block pos:start="95:14" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:33">

            <expr_stmt pos:start="97:13" pos:end="97:25"><expr pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:19">mb_type</name> <operator pos:start="97:21" pos:end="97:22">-=</operator> <literal type="number" pos:start="97:24" pos:end="97:24">5</literal></expr>;</expr_stmt>

            <goto pos:start="99:13" pos:end="99:33">goto <name pos:start="99:18" pos:end="99:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="103:6" pos:end="129:5">else<block pos:start="103:10" pos:end="129:5">{<block_content pos:start="105:8" pos:end="127:46">

       <expr_stmt pos:start="105:8" pos:end="105:46"><expr pos:start="105:8" pos:end="105:45"><call pos:start="105:8" pos:end="105:45"><name pos:start="105:8" pos:end="105:13">assert</name><argument_list pos:start="105:14" pos:end="105:45">(<argument pos:start="105:15" pos:end="105:44"><expr pos:start="105:15" pos:end="105:44"><name pos:start="105:15" pos:end="105:31"><name pos:start="105:15" pos:end="105:15">h</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:31">slice_type_nos</name></name> <operator pos:start="105:33" pos:end="105:34">==</operator> <name pos:start="105:36" pos:end="105:44">FF_I_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="109:22"><if pos:start="107:9" pos:end="109:22">if<condition pos:start="107:11" pos:end="107:50">(<expr pos:start="107:12" pos:end="107:49"><name pos:start="107:12" pos:end="107:24"><name pos:start="107:12" pos:end="107:12">h</name><operator pos:start="107:13" pos:end="107:14">-&gt;</operator><name pos:start="107:15" pos:end="107:24">slice_type</name></name> <operator pos:start="107:26" pos:end="107:27">==</operator> <name pos:start="107:29" pos:end="107:38">FF_SI_TYPE</name> <operator pos:start="107:40" pos:end="107:41">&amp;&amp;</operator> <name pos:start="107:43" pos:end="107:49">mb_type</name></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:22"><block_content pos:start="109:13" pos:end="109:22">

            <expr_stmt pos:start="109:13" pos:end="109:22"><expr pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:19">mb_type</name><operator pos:start="109:20" pos:end="109:21">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label pos:start="111:1" pos:end="111:16"><name pos:start="111:1" pos:end="111:15">decode_intra_mb</name>:</label>

        <if_stmt pos:start="113:9" pos:end="119:9"><if pos:start="113:9" pos:end="119:9">if<condition pos:start="113:11" pos:end="113:24">(<expr pos:start="113:12" pos:end="113:23"><name pos:start="113:12" pos:end="113:18">mb_type</name> <operator pos:start="113:20" pos:end="113:20">&gt;</operator> <literal type="number" pos:start="113:22" pos:end="113:23">25</literal></expr>)</condition><block pos:start="113:25" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:22">

            <expr_stmt pos:start="115:13" pos:end="115:157"><expr pos:start="115:13" pos:end="115:156"><call pos:start="115:13" pos:end="115:156"><name pos:start="115:13" pos:end="115:18">av_log</name><argument_list pos:start="115:19" pos:end="115:156">(<argument pos:start="115:20" pos:end="115:29"><expr pos:start="115:20" pos:end="115:29"><name pos:start="115:20" pos:end="115:29"><name pos:start="115:20" pos:end="115:20">h</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:23">s</name><operator pos:start="115:24" pos:end="115:24">.</operator><name pos:start="115:25" pos:end="115:29">avctx</name></name></expr></argument>, <argument pos:start="115:32" pos:end="115:43"><expr pos:start="115:32" pos:end="115:43"><name pos:start="115:32" pos:end="115:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:46" pos:end="115:90"><expr pos:start="115:46" pos:end="115:90"><literal type="string" pos:start="115:46" pos:end="115:90">"mb_type %d in %c slice too large at %d %d\n"</literal></expr></argument>, <argument pos:start="115:93" pos:end="115:99"><expr pos:start="115:93" pos:end="115:99"><name pos:start="115:93" pos:end="115:99">mb_type</name></expr></argument>, <argument pos:start="115:102" pos:end="115:137"><expr pos:start="115:102" pos:end="115:137"><call pos:start="115:102" pos:end="115:137"><name pos:start="115:102" pos:end="115:122">av_get_pict_type_char</name><argument_list pos:start="115:123" pos:end="115:137">(<argument pos:start="115:124" pos:end="115:136"><expr pos:start="115:124" pos:end="115:136"><name pos:start="115:124" pos:end="115:136"><name pos:start="115:124" pos:end="115:124">h</name><operator pos:start="115:125" pos:end="115:126">-&gt;</operator><name pos:start="115:127" pos:end="115:136">slice_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:140" pos:end="115:146"><expr pos:start="115:140" pos:end="115:146"><name pos:start="115:140" pos:end="115:146"><name pos:start="115:140" pos:end="115:140">s</name><operator pos:start="115:141" pos:end="115:142">-&gt;</operator><name pos:start="115:143" pos:end="115:146">mb_x</name></name></expr></argument>, <argument pos:start="115:149" pos:end="115:155"><expr pos:start="115:149" pos:end="115:155"><name pos:start="115:149" pos:end="115:155"><name pos:start="115:149" pos:end="115:149">s</name><operator pos:start="115:150" pos:end="115:151">-&gt;</operator><name pos:start="115:152" pos:end="115:155">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="117:13" pos:end="117:22">return <expr pos:start="117:20" pos:end="117:21"><operator pos:start="117:20" pos:end="117:20">-</operator><literal type="number" pos:start="117:21" pos:end="117:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:26"><expr pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:23">partition_count</name><operator pos:start="121:24" pos:end="121:24">=</operator><literal type="number" pos:start="121:25" pos:end="121:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:41"><expr pos:start="123:9" pos:end="123:40"><name pos:start="123:9" pos:end="123:11">cbp</name><operator pos:start="123:12" pos:end="123:12">=</operator> <name pos:start="123:14" pos:end="123:36"><name pos:start="123:14" pos:end="123:27">i_mb_type_info</name><index pos:start="123:28" pos:end="123:36">[<expr pos:start="123:29" pos:end="123:35"><name pos:start="123:29" pos:end="123:35">mb_type</name></expr>]</index></name><operator pos:start="123:37" pos:end="123:37">.</operator><name pos:start="123:38" pos:end="123:40">cbp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:67"><expr pos:start="125:9" pos:end="125:66"><name pos:start="125:9" pos:end="125:31"><name pos:start="125:9" pos:end="125:9">h</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:31">intra16x16_pred_mode</name></name><operator pos:start="125:32" pos:end="125:32">=</operator> <name pos:start="125:34" pos:end="125:56"><name pos:start="125:34" pos:end="125:47">i_mb_type_info</name><index pos:start="125:48" pos:end="125:56">[<expr pos:start="125:49" pos:end="125:55"><name pos:start="125:49" pos:end="125:55">mb_type</name></expr>]</index></name><operator pos:start="125:57" pos:end="125:57">.</operator><name pos:start="125:58" pos:end="125:66">pred_mode</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:46"><expr pos:start="127:9" pos:end="127:45"><name pos:start="127:9" pos:end="127:15">mb_type</name><operator pos:start="127:16" pos:end="127:16">=</operator> <name pos:start="127:18" pos:end="127:40"><name pos:start="127:18" pos:end="127:31">i_mb_type_info</name><index pos:start="127:32" pos:end="127:40">[<expr pos:start="127:33" pos:end="127:39"><name pos:start="127:33" pos:end="127:39">mb_type</name></expr>]</index></name><operator pos:start="127:41" pos:end="127:41">.</operator><name pos:start="127:42" pos:end="127:45">type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="133:5" pos:end="135:38"><if pos:start="133:5" pos:end="135:38">if<condition pos:start="133:7" pos:end="133:16">(<expr pos:start="133:8" pos:end="133:15"><name pos:start="133:8" pos:end="133:15">MB_FIELD</name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:38"><block_content pos:start="135:9" pos:end="135:38">

        <expr_stmt pos:start="135:9" pos:end="135:38"><expr pos:start="135:9" pos:end="135:37"><name pos:start="135:9" pos:end="135:15">mb_type</name> <operator pos:start="135:17" pos:end="135:18">|=</operator> <name pos:start="135:20" pos:end="135:37">MB_TYPE_INTERLACED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:42"><expr pos:start="139:5" pos:end="139:41"><name pos:start="139:5" pos:end="139:27"><name pos:start="139:5" pos:end="139:5">h</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:18">slice_table</name><index pos:start="139:19" pos:end="139:27">[ <expr pos:start="139:21" pos:end="139:25"><name pos:start="139:21" pos:end="139:25">mb_xy</name></expr> ]</index></name><operator pos:start="139:28" pos:end="139:28">=</operator> <name pos:start="139:30" pos:end="139:41"><name pos:start="139:30" pos:end="139:30">h</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:41">slice_num</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="143:5" pos:end="179:5"><if pos:start="143:5" pos:end="179:5">if<condition pos:start="143:7" pos:end="143:29">(<expr pos:start="143:8" pos:end="143:28"><call pos:start="143:8" pos:end="143:28"><name pos:start="143:8" pos:end="143:19">IS_INTRA_PCM</name><argument_list pos:start="143:20" pos:end="143:28">(<argument pos:start="143:21" pos:end="143:27"><expr pos:start="143:21" pos:end="143:27"><name pos:start="143:21" pos:end="143:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="143:30" pos:end="179:5">{<block_content pos:start="145:9" pos:end="177:17">

        <decl_stmt pos:start="145:9" pos:end="145:23"><decl pos:start="145:9" pos:end="145:22"><type pos:start="145:9" pos:end="145:20"><name pos:start="145:9" pos:end="145:16">unsigned</name> <name pos:start="145:18" pos:end="145:20">int</name></type> <name pos:start="145:22" pos:end="145:22">x</name></decl>;</decl_stmt>



        <comment type="line" pos:start="149:9" pos:end="149:73">// We assume these blocks are very rare so we do not optimize it.</comment>

        <expr_stmt pos:start="151:9" pos:end="151:31"><expr pos:start="151:9" pos:end="151:30"><call pos:start="151:9" pos:end="151:30"><name pos:start="151:9" pos:end="151:22">align_get_bits</name><argument_list pos:start="151:23" pos:end="151:30">(<argument pos:start="151:24" pos:end="151:29"><expr pos:start="151:24" pos:end="151:29"><operator pos:start="151:24" pos:end="151:24">&amp;</operator><name pos:start="151:25" pos:end="151:29"><name pos:start="151:25" pos:end="151:25">s</name><operator pos:start="151:26" pos:end="151:27">-&gt;</operator><name pos:start="151:28" pos:end="151:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="155:9" pos:end="155:76">// The pixels are stored in the same order as levels in h-&gt;mb array.</comment>

        <for pos:start="157:9" pos:end="161:9">for<control pos:start="157:12" pos:end="157:47">(<init pos:start="157:13" pos:end="157:16"><expr pos:start="157:13" pos:end="157:15"><name pos:start="157:13" pos:end="157:13">x</name><operator pos:start="157:14" pos:end="157:14">=</operator><literal type="number" pos:start="157:15" pos:end="157:15">0</literal></expr>;</init> <condition pos:start="157:18" pos:end="157:42"><expr pos:start="157:18" pos:end="157:41"><name pos:start="157:18" pos:end="157:18">x</name> <operator pos:start="157:20" pos:end="157:20">&lt;</operator> <operator pos:start="157:22" pos:end="157:22">(</operator><ternary pos:start="157:23" pos:end="157:40"><condition pos:start="157:23" pos:end="157:30"><expr pos:start="157:23" pos:end="157:28"><name pos:start="157:23" pos:end="157:28">CHROMA</name></expr> ?</condition><then pos:start="157:32" pos:end="157:34"> <expr pos:start="157:32" pos:end="157:34"><literal type="number" pos:start="157:32" pos:end="157:34">384</literal></expr> </then><else pos:start="157:36" pos:end="157:40">: <expr pos:start="157:38" pos:end="157:40"><literal type="number" pos:start="157:38" pos:end="157:40">256</literal></expr></else></ternary><operator pos:start="157:41" pos:end="157:41">)</operator></expr>;</condition> <incr pos:start="157:44" pos:end="157:46"><expr pos:start="157:44" pos:end="157:46"><name pos:start="157:44" pos:end="157:44">x</name><operator pos:start="157:45" pos:end="157:46">++</operator></expr></incr>)</control><block pos:start="157:48" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:54">

            <expr_stmt pos:start="159:13" pos:end="159:54"><expr pos:start="159:13" pos:end="159:53"><operator pos:start="159:13" pos:end="159:13">(</operator><operator pos:start="159:14" pos:end="159:14">(</operator><name pos:start="159:15" pos:end="159:21">uint8_t</name><operator pos:start="159:22" pos:end="159:22">*</operator><operator pos:start="159:23" pos:end="159:23">)</operator><name pos:start="159:24" pos:end="159:28"><name pos:start="159:24" pos:end="159:24">h</name><operator pos:start="159:25" pos:end="159:26">-&gt;</operator><name pos:start="159:27" pos:end="159:28">mb</name></name><operator pos:start="159:29" pos:end="159:29">)</operator><index pos:start="159:30" pos:end="159:32">[<expr pos:start="159:31" pos:end="159:31"><name pos:start="159:31" pos:end="159:31">x</name></expr>]</index><operator pos:start="159:33" pos:end="159:33">=</operator> <call pos:start="159:35" pos:end="159:53"><name pos:start="159:35" pos:end="159:42">get_bits</name><argument_list pos:start="159:43" pos:end="159:53">(<argument pos:start="159:44" pos:end="159:49"><expr pos:start="159:44" pos:end="159:49"><operator pos:start="159:44" pos:end="159:44">&amp;</operator><name pos:start="159:45" pos:end="159:49"><name pos:start="159:45" pos:end="159:45">s</name><operator pos:start="159:46" pos:end="159:47">-&gt;</operator><name pos:start="159:48" pos:end="159:49">gb</name></name></expr></argument>, <argument pos:start="159:52" pos:end="159:52"><expr pos:start="159:52" pos:end="159:52"><literal type="number" pos:start="159:52" pos:end="159:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="line" pos:start="165:9" pos:end="165:44">// In deblocking, the quantizer is 0</comment>

        <expr_stmt pos:start="167:9" pos:end="167:50"><expr pos:start="167:9" pos:end="167:49"><name pos:start="167:9" pos:end="167:46"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:26">current_picture</name><operator pos:start="167:27" pos:end="167:27">.</operator><name pos:start="167:28" pos:end="167:39">qscale_table</name><index pos:start="167:40" pos:end="167:46">[<expr pos:start="167:41" pos:end="167:45"><name pos:start="167:41" pos:end="167:45">mb_xy</name></expr>]</index></name><operator pos:start="167:47" pos:end="167:47">=</operator> <literal type="number" pos:start="167:49" pos:end="167:49">0</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="169:9" pos:end="169:33">// All coeffs are present</comment>

        <expr_stmt pos:start="171:9" pos:end="171:49"><expr pos:start="171:9" pos:end="171:48"><call pos:start="171:9" pos:end="171:48"><name pos:start="171:9" pos:end="171:14">memset</name><argument_list pos:start="171:15" pos:end="171:48">(<argument pos:start="171:16" pos:end="171:39"><expr pos:start="171:16" pos:end="171:39"><name pos:start="171:16" pos:end="171:39"><name pos:start="171:16" pos:end="171:16">h</name><operator pos:start="171:17" pos:end="171:18">-&gt;</operator><name pos:start="171:19" pos:end="171:32">non_zero_count</name><index pos:start="171:33" pos:end="171:39">[<expr pos:start="171:34" pos:end="171:38"><name pos:start="171:34" pos:end="171:38">mb_xy</name></expr>]</index></name></expr></argument>, <argument pos:start="171:42" pos:end="171:43"><expr pos:start="171:42" pos:end="171:43"><literal type="number" pos:start="171:42" pos:end="171:43">16</literal></expr></argument>, <argument pos:start="171:46" pos:end="171:47"><expr pos:start="171:46" pos:end="171:47"><literal type="number" pos:start="171:46" pos:end="171:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:51"><expr pos:start="175:9" pos:end="175:50"><name pos:start="175:9" pos:end="175:41"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:26">current_picture</name><operator pos:start="175:27" pos:end="175:27">.</operator><name pos:start="175:28" pos:end="175:34">mb_type</name><index pos:start="175:35" pos:end="175:41">[<expr pos:start="175:36" pos:end="175:40"><name pos:start="175:36" pos:end="175:40">mb_xy</name></expr>]</index></name><operator pos:start="175:42" pos:end="175:42">=</operator> <name pos:start="175:44" pos:end="175:50">mb_type</name></expr>;</expr_stmt>

        <return pos:start="177:9" pos:end="177:17">return <expr pos:start="177:16" pos:end="177:16"><literal type="number" pos:start="177:16" pos:end="177:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="183:5" pos:end="189:5"><if pos:start="183:5" pos:end="189:5">if<condition pos:start="183:7" pos:end="183:16">(<expr pos:start="183:8" pos:end="183:15"><name pos:start="183:8" pos:end="183:15">MB_MBAFF</name></expr>)</condition><block pos:start="183:17" pos:end="189:5">{<block_content pos:start="185:9" pos:end="187:30">

        <expr_stmt pos:start="185:9" pos:end="185:30"><expr pos:start="185:9" pos:end="185:29"><name pos:start="185:9" pos:end="185:23"><name pos:start="185:9" pos:end="185:9">h</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:20">ref_count</name><index pos:start="185:21" pos:end="185:23">[<expr pos:start="185:22" pos:end="185:22"><literal type="number" pos:start="185:22" pos:end="185:22">0</literal></expr>]</index></name> <operator pos:start="185:25" pos:end="185:27">&lt;&lt;=</operator> <literal type="number" pos:start="185:29" pos:end="185:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:30"><expr pos:start="187:9" pos:end="187:29"><name pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:9">h</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:20">ref_count</name><index pos:start="187:21" pos:end="187:23">[<expr pos:start="187:22" pos:end="187:22"><literal type="number" pos:start="187:22" pos:end="187:22">1</literal></expr>]</index></name> <operator pos:start="187:25" pos:end="187:27">&lt;&lt;=</operator> <literal type="number" pos:start="187:29" pos:end="187:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:31"><expr pos:start="193:5" pos:end="193:30"><call pos:start="193:5" pos:end="193:30"><name pos:start="193:5" pos:end="193:15">fill_caches</name><argument_list pos:start="193:16" pos:end="193:30">(<argument pos:start="193:17" pos:end="193:17"><expr pos:start="193:17" pos:end="193:17"><name pos:start="193:17" pos:end="193:17">h</name></expr></argument>, <argument pos:start="193:20" pos:end="193:26"><expr pos:start="193:20" pos:end="193:26"><name pos:start="193:20" pos:end="193:26">mb_type</name></expr></argument>, <argument pos:start="193:29" pos:end="193:29"><expr pos:start="193:29" pos:end="193:29"><literal type="number" pos:start="193:29" pos:end="193:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="197:5" pos:end="197:13">//mb_pred</comment>

    <if_stmt pos:start="199:5" pos:end="713:5"><if pos:start="199:5" pos:end="277:5">if<condition pos:start="199:7" pos:end="199:25">(<expr pos:start="199:8" pos:end="199:24"><call pos:start="199:8" pos:end="199:24"><name pos:start="199:8" pos:end="199:15">IS_INTRA</name><argument_list pos:start="199:16" pos:end="199:24">(<argument pos:start="199:17" pos:end="199:23"><expr pos:start="199:17" pos:end="199:23"><name pos:start="199:17" pos:end="199:23">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="199:26" pos:end="277:5">{<block_content pos:start="201:9" pos:end="275:9">

        <decl_stmt pos:start="201:9" pos:end="201:22"><decl pos:start="201:9" pos:end="201:21"><type pos:start="201:9" pos:end="201:11"><name pos:start="201:9" pos:end="201:11">int</name></type> <name pos:start="201:13" pos:end="201:21">pred_mode</name></decl>;</decl_stmt>

<comment type="line" pos:start="203:1" pos:end="203:44">//            init_top_left_availability(h);</comment>

        <if_stmt pos:start="205:9" pos:end="263:9"><if pos:start="205:9" pos:end="255:9">if<condition pos:start="205:11" pos:end="205:32">(<expr pos:start="205:12" pos:end="205:31"><call pos:start="205:12" pos:end="205:31"><name pos:start="205:12" pos:end="205:22">IS_INTRA4x4</name><argument_list pos:start="205:23" pos:end="205:31">(<argument pos:start="205:24" pos:end="205:30"><expr pos:start="205:24" pos:end="205:30"><name pos:start="205:24" pos:end="205:30">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="205:33" pos:end="255:9">{<block_content pos:start="207:13" pos:end="253:26">

            <decl_stmt pos:start="207:13" pos:end="207:18"><decl pos:start="207:13" pos:end="207:17"><type pos:start="207:13" pos:end="207:15"><name pos:start="207:13" pos:end="207:15">int</name></type> <name pos:start="207:17" pos:end="207:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="209:13" pos:end="209:23"><decl pos:start="209:13" pos:end="209:22"><type pos:start="209:13" pos:end="209:15"><name pos:start="209:13" pos:end="209:15">int</name></type> <name pos:start="209:17" pos:end="209:18">di</name> <init pos:start="209:20" pos:end="209:22">= <expr pos:start="209:22" pos:end="209:22"><literal type="number" pos:start="209:22" pos:end="209:22">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="211:13" pos:end="217:13"><if pos:start="211:13" pos:end="217:13">if<condition pos:start="211:15" pos:end="211:51">(<expr pos:start="211:16" pos:end="211:50"><name pos:start="211:16" pos:end="211:29">dct8x8_allowed</name> <operator pos:start="211:31" pos:end="211:32">&amp;&amp;</operator> <call pos:start="211:34" pos:end="211:50"><name pos:start="211:34" pos:end="211:42">get_bits1</name><argument_list pos:start="211:43" pos:end="211:50">(<argument pos:start="211:44" pos:end="211:49"><expr pos:start="211:44" pos:end="211:49"><operator pos:start="211:44" pos:end="211:44">&amp;</operator><name pos:start="211:45" pos:end="211:49"><name pos:start="211:45" pos:end="211:45">s</name><operator pos:start="211:46" pos:end="211:47">-&gt;</operator><name pos:start="211:48" pos:end="211:49">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="211:52" pos:end="217:13">{<block_content pos:start="213:17" pos:end="215:23">

                <expr_stmt pos:start="213:17" pos:end="213:42"><expr pos:start="213:17" pos:end="213:41"><name pos:start="213:17" pos:end="213:23">mb_type</name> <operator pos:start="213:25" pos:end="213:26">|=</operator> <name pos:start="213:28" pos:end="213:41">MB_TYPE_8x8DCT</name></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:23"><expr pos:start="215:17" pos:end="215:22"><name pos:start="215:17" pos:end="215:18">di</name> <operator pos:start="215:20" pos:end="215:20">=</operator> <literal type="number" pos:start="215:22" pos:end="215:22">4</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="221:1" pos:end="221:46">//                fill_intra4x4_pred_table(h);</comment>

            <for pos:start="223:13" pos:end="247:13">for<control pos:start="223:16" pos:end="223:33">(<init pos:start="223:17" pos:end="223:20"><expr pos:start="223:17" pos:end="223:19"><name pos:start="223:17" pos:end="223:17">i</name><operator pos:start="223:18" pos:end="223:18">=</operator><literal type="number" pos:start="223:19" pos:end="223:19">0</literal></expr>;</init> <condition pos:start="223:22" pos:end="223:26"><expr pos:start="223:22" pos:end="223:25"><name pos:start="223:22" pos:end="223:22">i</name><operator pos:start="223:23" pos:end="223:23">&lt;</operator><literal type="number" pos:start="223:24" pos:end="223:25">16</literal></expr>;</condition> <incr pos:start="223:28" pos:end="223:32"><expr pos:start="223:28" pos:end="223:32"><name pos:start="223:28" pos:end="223:28">i</name><operator pos:start="223:29" pos:end="223:30">+=</operator><name pos:start="223:31" pos:end="223:32">di</name></expr></incr>)</control><block pos:start="223:34" pos:end="247:13">{<block_content pos:start="225:17" pos:end="245:67">

                <decl_stmt pos:start="225:17" pos:end="225:48"><decl pos:start="225:17" pos:end="225:47"><type pos:start="225:17" pos:end="225:19"><name pos:start="225:17" pos:end="225:19">int</name></type> <name pos:start="225:21" pos:end="225:24">mode</name><init pos:start="225:25" pos:end="225:47">= <expr pos:start="225:27" pos:end="225:47"><call pos:start="225:27" pos:end="225:47"><name pos:start="225:27" pos:end="225:41">pred_intra_mode</name><argument_list pos:start="225:42" pos:end="225:47">(<argument pos:start="225:43" pos:end="225:43"><expr pos:start="225:43" pos:end="225:43"><name pos:start="225:43" pos:end="225:43">h</name></expr></argument>, <argument pos:start="225:46" pos:end="225:46"><expr pos:start="225:46" pos:end="225:46"><name pos:start="225:46" pos:end="225:46">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="229:17" pos:end="235:17"><if pos:start="229:17" pos:end="235:17">if<condition pos:start="229:19" pos:end="229:38">(<expr pos:start="229:20" pos:end="229:37"><operator pos:start="229:20" pos:end="229:20">!</operator><call pos:start="229:21" pos:end="229:37"><name pos:start="229:21" pos:end="229:29">get_bits1</name><argument_list pos:start="229:30" pos:end="229:37">(<argument pos:start="229:31" pos:end="229:36"><expr pos:start="229:31" pos:end="229:36"><operator pos:start="229:31" pos:end="229:31">&amp;</operator><name pos:start="229:32" pos:end="229:36"><name pos:start="229:32" pos:end="229:32">s</name><operator pos:start="229:33" pos:end="229:34">-&gt;</operator><name pos:start="229:35" pos:end="229:36">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="229:39" pos:end="235:17">{<block_content pos:start="231:21" pos:end="233:57">

                    <decl_stmt pos:start="231:21" pos:end="231:60"><decl pos:start="231:21" pos:end="231:59"><type pos:start="231:21" pos:end="231:29"><specifier pos:start="231:21" pos:end="231:25">const</specifier> <name pos:start="231:27" pos:end="231:29">int</name></type> <name pos:start="231:31" pos:end="231:38">rem_mode</name><init pos:start="231:39" pos:end="231:59">= <expr pos:start="231:41" pos:end="231:59"><call pos:start="231:41" pos:end="231:59"><name pos:start="231:41" pos:end="231:48">get_bits</name><argument_list pos:start="231:49" pos:end="231:59">(<argument pos:start="231:50" pos:end="231:55"><expr pos:start="231:50" pos:end="231:55"><operator pos:start="231:50" pos:end="231:50">&amp;</operator><name pos:start="231:51" pos:end="231:55"><name pos:start="231:51" pos:end="231:51">s</name><operator pos:start="231:52" pos:end="231:53">-&gt;</operator><name pos:start="231:54" pos:end="231:55">gb</name></name></expr></argument>, <argument pos:start="231:58" pos:end="231:58"><expr pos:start="231:58" pos:end="231:58"><literal type="number" pos:start="231:58" pos:end="231:58">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:57"><expr pos:start="233:21" pos:end="233:56"><name pos:start="233:21" pos:end="233:24">mode</name> <operator pos:start="233:26" pos:end="233:26">=</operator> <name pos:start="233:28" pos:end="233:35">rem_mode</name> <operator pos:start="233:37" pos:end="233:37">+</operator> <operator pos:start="233:39" pos:end="233:39">(</operator><name pos:start="233:40" pos:end="233:47">rem_mode</name> <operator pos:start="233:49" pos:end="233:50">&gt;=</operator> <name pos:start="233:52" pos:end="233:55">mode</name><operator pos:start="233:56" pos:end="233:56">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="239:17" pos:end="245:67"><if pos:start="239:17" pos:end="241:97">if<condition pos:start="239:19" pos:end="239:25">(<expr pos:start="239:20" pos:end="239:24"><name pos:start="239:20" pos:end="239:21">di</name><operator pos:start="239:22" pos:end="239:23">==</operator><literal type="number" pos:start="239:24" pos:end="239:24">4</literal></expr>)</condition><block type="pseudo" pos:start="241:21" pos:end="241:97"><block_content pos:start="241:21" pos:end="241:97">

                    <expr_stmt pos:start="241:21" pos:end="241:97"><expr pos:start="241:21" pos:end="241:96"><call pos:start="241:21" pos:end="241:96"><name pos:start="241:21" pos:end="241:34">fill_rectangle</name><argument_list pos:start="241:35" pos:end="241:96">( <argument pos:start="241:37" pos:end="241:76"><expr pos:start="241:37" pos:end="241:76"><operator pos:start="241:37" pos:end="241:37">&amp;</operator><name pos:start="241:38" pos:end="241:76"><name pos:start="241:38" pos:end="241:38">h</name><operator pos:start="241:39" pos:end="241:40">-&gt;</operator><name pos:start="241:41" pos:end="241:64">intra4x4_pred_mode_cache</name><index pos:start="241:65" pos:end="241:76">[ <expr pos:start="241:67" pos:end="241:74"><name pos:start="241:67" pos:end="241:74"><name pos:start="241:67" pos:end="241:71">scan8</name><index pos:start="241:72" pos:end="241:74">[<expr pos:start="241:73" pos:end="241:73"><name pos:start="241:73" pos:end="241:73">i</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="241:79" pos:end="241:79"><expr pos:start="241:79" pos:end="241:79"><literal type="number" pos:start="241:79" pos:end="241:79">2</literal></expr></argument>, <argument pos:start="241:82" pos:end="241:82"><expr pos:start="241:82" pos:end="241:82"><literal type="number" pos:start="241:82" pos:end="241:82">2</literal></expr></argument>, <argument pos:start="241:85" pos:end="241:85"><expr pos:start="241:85" pos:end="241:85"><literal type="number" pos:start="241:85" pos:end="241:85">8</literal></expr></argument>, <argument pos:start="241:88" pos:end="241:91"><expr pos:start="241:88" pos:end="241:91"><name pos:start="241:88" pos:end="241:91">mode</name></expr></argument>, <argument pos:start="241:94" pos:end="241:94"><expr pos:start="241:94" pos:end="241:94"><literal type="number" pos:start="241:94" pos:end="241:94">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="243:17" pos:end="245:67">else<block type="pseudo" pos:start="245:21" pos:end="245:67"><block_content pos:start="245:21" pos:end="245:67">

                    <expr_stmt pos:start="245:21" pos:end="245:67"><expr pos:start="245:21" pos:end="245:66"><name pos:start="245:21" pos:end="245:59"><name pos:start="245:21" pos:end="245:21">h</name><operator pos:start="245:22" pos:end="245:23">-&gt;</operator><name pos:start="245:24" pos:end="245:47">intra4x4_pred_mode_cache</name><index pos:start="245:48" pos:end="245:59">[ <expr pos:start="245:50" pos:end="245:57"><name pos:start="245:50" pos:end="245:57"><name pos:start="245:50" pos:end="245:54">scan8</name><index pos:start="245:55" pos:end="245:57">[<expr pos:start="245:56" pos:end="245:56"><name pos:start="245:56" pos:end="245:56">i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="245:61" pos:end="245:61">=</operator> <name pos:start="245:63" pos:end="245:66">mode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="249:13" pos:end="249:50"><expr pos:start="249:13" pos:end="249:49"><call pos:start="249:13" pos:end="249:49"><name pos:start="249:13" pos:end="249:46">ff_h264_write_back_intra_pred_mode</name><argument_list pos:start="249:47" pos:end="249:49">(<argument pos:start="249:48" pos:end="249:48"><expr pos:start="249:48" pos:end="249:48"><name pos:start="249:48" pos:end="249:48">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="251:13" pos:end="253:26"><if pos:start="251:13" pos:end="253:26">if<condition pos:start="251:15" pos:end="251:56">( <expr pos:start="251:17" pos:end="251:55"><call pos:start="251:17" pos:end="251:51"><name pos:start="251:17" pos:end="251:48">ff_h264_check_intra4x4_pred_mode</name><argument_list pos:start="251:49" pos:end="251:51">(<argument pos:start="251:50" pos:end="251:50"><expr pos:start="251:50" pos:end="251:50"><name pos:start="251:50" pos:end="251:50">h</name></expr></argument>)</argument_list></call> <operator pos:start="251:53" pos:end="251:53">&lt;</operator> <literal type="number" pos:start="251:55" pos:end="251:55">0</literal></expr>)</condition><block type="pseudo" pos:start="253:17" pos:end="253:26"><block_content pos:start="253:17" pos:end="253:26">

                <return pos:start="253:17" pos:end="253:26">return <expr pos:start="253:24" pos:end="253:25"><operator pos:start="253:24" pos:end="253:24">-</operator><literal type="number" pos:start="253:25" pos:end="253:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if><else pos:start="255:10" pos:end="263:9">else<block pos:start="255:14" pos:end="263:9">{<block_content pos:start="257:13" pos:end="261:26">

            <expr_stmt pos:start="257:13" pos:end="257:95"><expr pos:start="257:13" pos:end="257:94"><name pos:start="257:13" pos:end="257:35"><name pos:start="257:13" pos:end="257:13">h</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:35">intra16x16_pred_mode</name></name><operator pos:start="257:36" pos:end="257:36">=</operator> <call pos:start="257:38" pos:end="257:94"><name pos:start="257:38" pos:end="257:66">ff_h264_check_intra_pred_mode</name><argument_list pos:start="257:67" pos:end="257:94">(<argument pos:start="257:68" pos:end="257:68"><expr pos:start="257:68" pos:end="257:68"><name pos:start="257:68" pos:end="257:68">h</name></expr></argument>, <argument pos:start="257:71" pos:end="257:93"><expr pos:start="257:71" pos:end="257:93"><name pos:start="257:71" pos:end="257:93"><name pos:start="257:71" pos:end="257:71">h</name><operator pos:start="257:72" pos:end="257:73">-&gt;</operator><name pos:start="257:74" pos:end="257:93">intra16x16_pred_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="259:13" pos:end="261:26"><if pos:start="259:13" pos:end="261:26">if<condition pos:start="259:15" pos:end="259:43">(<expr pos:start="259:16" pos:end="259:42"><name pos:start="259:16" pos:end="259:38"><name pos:start="259:16" pos:end="259:16">h</name><operator pos:start="259:17" pos:end="259:18">-&gt;</operator><name pos:start="259:19" pos:end="259:38">intra16x16_pred_mode</name></name> <operator pos:start="259:40" pos:end="259:40">&lt;</operator> <literal type="number" pos:start="259:42" pos:end="259:42">0</literal></expr>)</condition><block type="pseudo" pos:start="261:17" pos:end="261:26"><block_content pos:start="261:17" pos:end="261:26">

                <return pos:start="261:17" pos:end="261:26">return <expr pos:start="261:24" pos:end="261:25"><operator pos:start="261:24" pos:end="261:24">-</operator><literal type="number" pos:start="261:25" pos:end="261:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="265:9" pos:end="275:9"><if pos:start="265:9" pos:end="275:9">if<condition pos:start="265:11" pos:end="265:18">(<expr pos:start="265:12" pos:end="265:17"><name pos:start="265:12" pos:end="265:17">CHROMA</name></expr>)</condition><block pos:start="265:19" pos:end="275:9">{<block_content pos:start="267:13" pos:end="273:43">

            <expr_stmt pos:start="267:13" pos:end="267:82"><expr pos:start="267:13" pos:end="267:81"><name pos:start="267:13" pos:end="267:21">pred_mode</name><operator pos:start="267:22" pos:end="267:22">=</operator> <call pos:start="267:24" pos:end="267:81"><name pos:start="267:24" pos:end="267:52">ff_h264_check_intra_pred_mode</name><argument_list pos:start="267:53" pos:end="267:81">(<argument pos:start="267:54" pos:end="267:54"><expr pos:start="267:54" pos:end="267:54"><name pos:start="267:54" pos:end="267:54">h</name></expr></argument>, <argument pos:start="267:57" pos:end="267:80"><expr pos:start="267:57" pos:end="267:80"><call pos:start="267:57" pos:end="267:80"><name pos:start="267:57" pos:end="267:72">get_ue_golomb_31</name><argument_list pos:start="267:73" pos:end="267:80">(<argument pos:start="267:74" pos:end="267:79"><expr pos:start="267:74" pos:end="267:79"><operator pos:start="267:74" pos:end="267:74">&amp;</operator><name pos:start="267:75" pos:end="267:79"><name pos:start="267:75" pos:end="267:75">s</name><operator pos:start="267:76" pos:end="267:77">-&gt;</operator><name pos:start="267:78" pos:end="267:79">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="269:13" pos:end="271:26"><if pos:start="269:13" pos:end="271:26">if<condition pos:start="269:15" pos:end="269:29">(<expr pos:start="269:16" pos:end="269:28"><name pos:start="269:16" pos:end="269:24">pred_mode</name> <operator pos:start="269:26" pos:end="269:26">&lt;</operator> <literal type="number" pos:start="269:28" pos:end="269:28">0</literal></expr>)</condition><block type="pseudo" pos:start="271:17" pos:end="271:26"><block_content pos:start="271:17" pos:end="271:26">

                <return pos:start="271:17" pos:end="271:26">return <expr pos:start="271:24" pos:end="271:25"><operator pos:start="271:24" pos:end="271:24">-</operator><literal type="number" pos:start="271:25" pos:end="271:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:43"><expr pos:start="273:13" pos:end="273:42"><name pos:start="273:13" pos:end="273:31"><name pos:start="273:13" pos:end="273:13">h</name><operator pos:start="273:14" pos:end="273:15">-&gt;</operator><name pos:start="273:16" pos:end="273:31">chroma_pred_mode</name></name><operator pos:start="273:32" pos:end="273:32">=</operator> <name pos:start="273:34" pos:end="273:42">pred_mode</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="277:6" pos:end="487:5">else if<condition pos:start="277:13" pos:end="277:32">(<expr pos:start="277:14" pos:end="277:31"><name pos:start="277:14" pos:end="277:28">partition_count</name><operator pos:start="277:29" pos:end="277:30">==</operator><literal type="number" pos:start="277:31" pos:end="277:31">4</literal></expr>)</condition><block pos:start="277:33" pos:end="487:5">{<block_content pos:start="279:9" pos:end="485:9">

        <decl_stmt pos:start="279:9" pos:end="279:58"><decl pos:start="279:9" pos:end="279:13"><type pos:start="279:9" pos:end="279:11"><name pos:start="279:9" pos:end="279:11">int</name></type> <name pos:start="279:13" pos:end="279:13">i</name></decl>, <decl pos:start="279:16" pos:end="279:16"><type ref="prev" pos:start="279:9" pos:end="279:11"/><name pos:start="279:16" pos:end="279:16">j</name></decl>, <decl pos:start="279:19" pos:end="279:40"><type ref="prev" pos:start="279:9" pos:end="279:11"/><name pos:start="279:19" pos:end="279:40"><name pos:start="279:19" pos:end="279:37">sub_partition_count</name><index pos:start="279:38" pos:end="279:40">[<expr pos:start="279:39" pos:end="279:39"><literal type="number" pos:start="279:39" pos:end="279:39">4</literal></expr>]</index></name></decl>, <decl pos:start="279:43" pos:end="279:46"><type ref="prev" pos:start="279:9" pos:end="279:11"/><name pos:start="279:43" pos:end="279:46">list</name></decl>, <decl pos:start="279:49" pos:end="279:57"><type ref="prev" pos:start="279:9" pos:end="279:11"/><name pos:start="279:49" pos:end="279:57"><name pos:start="279:49" pos:end="279:51">ref</name><index pos:start="279:52" pos:end="279:54">[<expr pos:start="279:53" pos:end="279:53"><literal type="number" pos:start="279:53" pos:end="279:53">2</literal></expr>]</index><index pos:start="279:55" pos:end="279:57">[<expr pos:start="279:56" pos:end="279:56"><literal type="number" pos:start="279:56" pos:end="279:56">4</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="283:9" pos:end="341:9"><if pos:start="283:9" pos:end="319:9">if<condition pos:start="283:11" pos:end="283:42">(<expr pos:start="283:12" pos:end="283:41"><name pos:start="283:12" pos:end="283:28"><name pos:start="283:12" pos:end="283:12">h</name><operator pos:start="283:13" pos:end="283:14">-&gt;</operator><name pos:start="283:15" pos:end="283:28">slice_type_nos</name></name> <operator pos:start="283:30" pos:end="283:31">==</operator> <name pos:start="283:33" pos:end="283:41">FF_B_TYPE</name></expr>)</condition><block pos:start="283:43" pos:end="319:9">{<block_content pos:start="285:13" pos:end="317:13">

            <for pos:start="285:13" pos:end="301:13">for<control pos:start="285:16" pos:end="285:30">(<init pos:start="285:17" pos:end="285:20"><expr pos:start="285:17" pos:end="285:19"><name pos:start="285:17" pos:end="285:17">i</name><operator pos:start="285:18" pos:end="285:18">=</operator><literal type="number" pos:start="285:19" pos:end="285:19">0</literal></expr>;</init> <condition pos:start="285:22" pos:end="285:25"><expr pos:start="285:22" pos:end="285:24"><name pos:start="285:22" pos:end="285:22">i</name><operator pos:start="285:23" pos:end="285:23">&lt;</operator><literal type="number" pos:start="285:24" pos:end="285:24">4</literal></expr>;</condition> <incr pos:start="285:27" pos:end="285:29"><expr pos:start="285:27" pos:end="285:29"><name pos:start="285:27" pos:end="285:27">i</name><operator pos:start="285:28" pos:end="285:29">++</operator></expr></incr>)</control><block pos:start="285:31" pos:end="301:13">{<block_content pos:start="287:17" pos:end="299:85">

                <expr_stmt pos:start="287:17" pos:end="287:60"><expr pos:start="287:17" pos:end="287:59"><name pos:start="287:17" pos:end="287:33"><name pos:start="287:17" pos:end="287:17">h</name><operator pos:start="287:18" pos:end="287:19">-&gt;</operator><name pos:start="287:20" pos:end="287:30">sub_mb_type</name><index pos:start="287:31" pos:end="287:33">[<expr pos:start="287:32" pos:end="287:32"><name pos:start="287:32" pos:end="287:32">i</name></expr>]</index></name><operator pos:start="287:34" pos:end="287:34">=</operator> <call pos:start="287:36" pos:end="287:59"><name pos:start="287:36" pos:end="287:51">get_ue_golomb_31</name><argument_list pos:start="287:52" pos:end="287:59">(<argument pos:start="287:53" pos:end="287:58"><expr pos:start="287:53" pos:end="287:58"><operator pos:start="287:53" pos:end="287:53">&amp;</operator><name pos:start="287:54" pos:end="287:58"><name pos:start="287:54" pos:end="287:54">s</name><operator pos:start="287:55" pos:end="287:56">-&gt;</operator><name pos:start="287:57" pos:end="287:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="289:17" pos:end="295:17"><if pos:start="289:17" pos:end="295:17">if<condition pos:start="289:19" pos:end="289:42">(<expr pos:start="289:20" pos:end="289:41"><name pos:start="289:20" pos:end="289:36"><name pos:start="289:20" pos:end="289:20">h</name><operator pos:start="289:21" pos:end="289:22">-&gt;</operator><name pos:start="289:23" pos:end="289:33">sub_mb_type</name><index pos:start="289:34" pos:end="289:36">[<expr pos:start="289:35" pos:end="289:35"><name pos:start="289:35" pos:end="289:35">i</name></expr>]</index></name> <operator pos:start="289:38" pos:end="289:39">&gt;=</operator><literal type="number" pos:start="289:40" pos:end="289:41">13</literal></expr>)</condition><block pos:start="289:43" pos:end="295:17">{<block_content pos:start="291:21" pos:end="293:30">

                    <expr_stmt pos:start="291:21" pos:end="291:134"><expr pos:start="291:21" pos:end="291:133"><call pos:start="291:21" pos:end="291:133"><name pos:start="291:21" pos:end="291:26">av_log</name><argument_list pos:start="291:27" pos:end="291:133">(<argument pos:start="291:28" pos:end="291:37"><expr pos:start="291:28" pos:end="291:37"><name pos:start="291:28" pos:end="291:37"><name pos:start="291:28" pos:end="291:28">h</name><operator pos:start="291:29" pos:end="291:30">-&gt;</operator><name pos:start="291:31" pos:end="291:31">s</name><operator pos:start="291:32" pos:end="291:32">.</operator><name pos:start="291:33" pos:end="291:37">avctx</name></name></expr></argument>, <argument pos:start="291:40" pos:end="291:51"><expr pos:start="291:40" pos:end="291:51"><name pos:start="291:40" pos:end="291:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="291:54" pos:end="291:95"><expr pos:start="291:54" pos:end="291:95"><literal type="string" pos:start="291:54" pos:end="291:95">"B sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument pos:start="291:98" pos:end="291:114"><expr pos:start="291:98" pos:end="291:114"><name pos:start="291:98" pos:end="291:114"><name pos:start="291:98" pos:end="291:98">h</name><operator pos:start="291:99" pos:end="291:100">-&gt;</operator><name pos:start="291:101" pos:end="291:111">sub_mb_type</name><index pos:start="291:112" pos:end="291:114">[<expr pos:start="291:113" pos:end="291:113"><name pos:start="291:113" pos:end="291:113">i</name></expr>]</index></name></expr></argument>, <argument pos:start="291:117" pos:end="291:123"><expr pos:start="291:117" pos:end="291:123"><name pos:start="291:117" pos:end="291:123"><name pos:start="291:117" pos:end="291:117">s</name><operator pos:start="291:118" pos:end="291:119">-&gt;</operator><name pos:start="291:120" pos:end="291:123">mb_x</name></name></expr></argument>, <argument pos:start="291:126" pos:end="291:132"><expr pos:start="291:126" pos:end="291:132"><name pos:start="291:126" pos:end="291:132"><name pos:start="291:126" pos:end="291:126">s</name><operator pos:start="291:127" pos:end="291:128">-&gt;</operator><name pos:start="291:129" pos:end="291:132">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="293:21" pos:end="293:30">return <expr pos:start="293:28" pos:end="293:29"><operator pos:start="293:28" pos:end="293:28">-</operator><literal type="number" pos:start="293:29" pos:end="293:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:96"><expr pos:start="297:17" pos:end="297:95"><name pos:start="297:17" pos:end="297:38"><name pos:start="297:17" pos:end="297:35">sub_partition_count</name><index pos:start="297:36" pos:end="297:38">[<expr pos:start="297:37" pos:end="297:37"><name pos:start="297:37" pos:end="297:37">i</name></expr>]</index></name><operator pos:start="297:39" pos:end="297:39">=</operator> <name pos:start="297:41" pos:end="297:79"><name pos:start="297:41" pos:end="297:58">b_sub_mb_type_info</name><index pos:start="297:59" pos:end="297:79">[ <expr pos:start="297:61" pos:end="297:77"><name pos:start="297:61" pos:end="297:77"><name pos:start="297:61" pos:end="297:61">h</name><operator pos:start="297:62" pos:end="297:63">-&gt;</operator><name pos:start="297:64" pos:end="297:74">sub_mb_type</name><index pos:start="297:75" pos:end="297:77">[<expr pos:start="297:76" pos:end="297:76"><name pos:start="297:76" pos:end="297:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="297:80" pos:end="297:80">.</operator><name pos:start="297:81" pos:end="297:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:85"><expr pos:start="299:17" pos:end="299:84"><name pos:start="299:17" pos:end="299:33"><name pos:start="299:17" pos:end="299:17">h</name><operator pos:start="299:18" pos:end="299:19">-&gt;</operator><name pos:start="299:20" pos:end="299:30">sub_mb_type</name><index pos:start="299:31" pos:end="299:33">[<expr pos:start="299:32" pos:end="299:32"><name pos:start="299:32" pos:end="299:32">i</name></expr>]</index></name><operator pos:start="299:34" pos:end="299:34">=</operator>      <name pos:start="299:41" pos:end="299:79"><name pos:start="299:41" pos:end="299:58">b_sub_mb_type_info</name><index pos:start="299:59" pos:end="299:79">[ <expr pos:start="299:61" pos:end="299:77"><name pos:start="299:61" pos:end="299:77"><name pos:start="299:61" pos:end="299:61">h</name><operator pos:start="299:62" pos:end="299:63">-&gt;</operator><name pos:start="299:64" pos:end="299:74">sub_mb_type</name><index pos:start="299:75" pos:end="299:77">[<expr pos:start="299:76" pos:end="299:76"><name pos:start="299:76" pos:end="299:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="299:80" pos:end="299:80">.</operator><name pos:start="299:81" pos:end="299:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="303:13" pos:end="317:13"><if pos:start="303:13" pos:end="317:13">if<condition pos:start="303:15" pos:end="305:79">(   <expr pos:start="303:19" pos:end="305:78"><call pos:start="303:19" pos:end="303:46"><name pos:start="303:19" pos:end="303:27">IS_DIRECT</name><argument_list pos:start="303:28" pos:end="303:46">(<argument pos:start="303:29" pos:end="303:45"><expr pos:start="303:29" pos:end="303:45"><name pos:start="303:29" pos:end="303:45"><name pos:start="303:29" pos:end="303:29">h</name><operator pos:start="303:30" pos:end="303:31">-&gt;</operator><name pos:start="303:32" pos:end="303:42">sub_mb_type</name><index pos:start="303:43" pos:end="303:45">[<expr pos:start="303:44" pos:end="303:44"><literal type="number" pos:start="303:44" pos:end="303:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="303:48" pos:end="303:49">||</operator> <call pos:start="303:51" pos:end="303:78"><name pos:start="303:51" pos:end="303:59">IS_DIRECT</name><argument_list pos:start="303:60" pos:end="303:78">(<argument pos:start="303:61" pos:end="303:77"><expr pos:start="303:61" pos:end="303:77"><name pos:start="303:61" pos:end="303:77"><name pos:start="303:61" pos:end="303:61">h</name><operator pos:start="303:62" pos:end="303:63">-&gt;</operator><name pos:start="303:64" pos:end="303:74">sub_mb_type</name><index pos:start="303:75" pos:end="303:77">[<expr pos:start="303:76" pos:end="303:76"><literal type="number" pos:start="303:76" pos:end="303:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

               <operator pos:start="305:16" pos:end="305:17">||</operator> <call pos:start="305:19" pos:end="305:46"><name pos:start="305:19" pos:end="305:27">IS_DIRECT</name><argument_list pos:start="305:28" pos:end="305:46">(<argument pos:start="305:29" pos:end="305:45"><expr pos:start="305:29" pos:end="305:45"><name pos:start="305:29" pos:end="305:45"><name pos:start="305:29" pos:end="305:29">h</name><operator pos:start="305:30" pos:end="305:31">-&gt;</operator><name pos:start="305:32" pos:end="305:42">sub_mb_type</name><index pos:start="305:43" pos:end="305:45">[<expr pos:start="305:44" pos:end="305:44"><literal type="number" pos:start="305:44" pos:end="305:44">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="305:48" pos:end="305:49">||</operator> <call pos:start="305:51" pos:end="305:78"><name pos:start="305:51" pos:end="305:59">IS_DIRECT</name><argument_list pos:start="305:60" pos:end="305:78">(<argument pos:start="305:61" pos:end="305:77"><expr pos:start="305:61" pos:end="305:77"><name pos:start="305:61" pos:end="305:77"><name pos:start="305:61" pos:end="305:61">h</name><operator pos:start="305:62" pos:end="305:63">-&gt;</operator><name pos:start="305:64" pos:end="305:74">sub_mb_type</name><index pos:start="305:75" pos:end="305:77">[<expr pos:start="305:76" pos:end="305:76"><literal type="number" pos:start="305:76" pos:end="305:76">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="305:81" pos:end="317:13">{<block_content pos:start="307:17" pos:end="315:64">

                <expr_stmt pos:start="307:17" pos:end="307:56"><expr pos:start="307:17" pos:end="307:55"><call pos:start="307:17" pos:end="307:55"><name pos:start="307:17" pos:end="307:42">ff_h264_pred_direct_motion</name><argument_list pos:start="307:43" pos:end="307:55">(<argument pos:start="307:44" pos:end="307:44"><expr pos:start="307:44" pos:end="307:44"><name pos:start="307:44" pos:end="307:44">h</name></expr></argument>, <argument pos:start="307:47" pos:end="307:54"><expr pos:start="307:47" pos:end="307:54"><operator pos:start="307:47" pos:end="307:47">&amp;</operator><name pos:start="307:48" pos:end="307:54">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="309:17" pos:end="315:64"><expr pos:start="309:17" pos:end="315:63"><name pos:start="309:17" pos:end="309:41"><name pos:start="309:17" pos:end="309:17">h</name><operator pos:start="309:18" pos:end="309:19">-&gt;</operator><name pos:start="309:20" pos:end="309:28">ref_cache</name><index pos:start="309:29" pos:end="309:31">[<expr pos:start="309:30" pos:end="309:30"><literal type="number" pos:start="309:30" pos:end="309:30">0</literal></expr>]</index><index pos:start="309:32" pos:end="309:41">[<expr pos:start="309:33" pos:end="309:40"><name pos:start="309:33" pos:end="309:40"><name pos:start="309:33" pos:end="309:37">scan8</name><index pos:start="309:38" pos:end="309:40">[<expr pos:start="309:39" pos:end="309:39"><literal type="number" pos:start="309:39" pos:end="309:39">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="309:43" pos:end="309:43">=</operator>

                <name pos:start="311:17" pos:end="311:41"><name pos:start="311:17" pos:end="311:17">h</name><operator pos:start="311:18" pos:end="311:19">-&gt;</operator><name pos:start="311:20" pos:end="311:28">ref_cache</name><index pos:start="311:29" pos:end="311:31">[<expr pos:start="311:30" pos:end="311:30"><literal type="number" pos:start="311:30" pos:end="311:30">1</literal></expr>]</index><index pos:start="311:32" pos:end="311:41">[<expr pos:start="311:33" pos:end="311:40"><name pos:start="311:33" pos:end="311:40"><name pos:start="311:33" pos:end="311:37">scan8</name><index pos:start="311:38" pos:end="311:40">[<expr pos:start="311:39" pos:end="311:39"><literal type="number" pos:start="311:39" pos:end="311:39">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="311:43" pos:end="311:43">=</operator>

                <name pos:start="313:17" pos:end="313:42"><name pos:start="313:17" pos:end="313:17">h</name><operator pos:start="313:18" pos:end="313:19">-&gt;</operator><name pos:start="313:20" pos:end="313:28">ref_cache</name><index pos:start="313:29" pos:end="313:31">[<expr pos:start="313:30" pos:end="313:30"><literal type="number" pos:start="313:30" pos:end="313:30">0</literal></expr>]</index><index pos:start="313:32" pos:end="313:42">[<expr pos:start="313:33" pos:end="313:41"><name pos:start="313:33" pos:end="313:41"><name pos:start="313:33" pos:end="313:37">scan8</name><index pos:start="313:38" pos:end="313:41">[<expr pos:start="313:39" pos:end="313:40"><literal type="number" pos:start="313:39" pos:end="313:40">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="313:44" pos:end="313:44">=</operator>

                <name pos:start="315:17" pos:end="315:42"><name pos:start="315:17" pos:end="315:17">h</name><operator pos:start="315:18" pos:end="315:19">-&gt;</operator><name pos:start="315:20" pos:end="315:28">ref_cache</name><index pos:start="315:29" pos:end="315:31">[<expr pos:start="315:30" pos:end="315:30"><literal type="number" pos:start="315:30" pos:end="315:30">1</literal></expr>]</index><index pos:start="315:32" pos:end="315:42">[<expr pos:start="315:33" pos:end="315:41"><name pos:start="315:33" pos:end="315:41"><name pos:start="315:33" pos:end="315:37">scan8</name><index pos:start="315:38" pos:end="315:41">[<expr pos:start="315:39" pos:end="315:40"><literal type="number" pos:start="315:39" pos:end="315:40">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="315:44" pos:end="315:44">=</operator> <name pos:start="315:46" pos:end="315:63">PART_NOT_AVAILABLE</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if><else pos:start="319:10" pos:end="341:9">else<block pos:start="319:14" pos:end="341:9">{<block_content pos:start="321:13" pos:end="339:13">

            <expr_stmt pos:start="321:13" pos:end="321:51"><expr pos:start="321:13" pos:end="321:50"><call pos:start="321:13" pos:end="321:50"><name pos:start="321:13" pos:end="321:18">assert</name><argument_list pos:start="321:19" pos:end="321:50">(<argument pos:start="321:20" pos:end="321:49"><expr pos:start="321:20" pos:end="321:49"><name pos:start="321:20" pos:end="321:36"><name pos:start="321:20" pos:end="321:20">h</name><operator pos:start="321:21" pos:end="321:22">-&gt;</operator><name pos:start="321:23" pos:end="321:36">slice_type_nos</name></name> <operator pos:start="321:38" pos:end="321:39">==</operator> <name pos:start="321:41" pos:end="321:49">FF_P_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="321:53" pos:end="321:72">//FIXME SP correct ?</comment>

            <for pos:start="323:13" pos:end="339:13">for<control pos:start="323:16" pos:end="323:30">(<init pos:start="323:17" pos:end="323:20"><expr pos:start="323:17" pos:end="323:19"><name pos:start="323:17" pos:end="323:17">i</name><operator pos:start="323:18" pos:end="323:18">=</operator><literal type="number" pos:start="323:19" pos:end="323:19">0</literal></expr>;</init> <condition pos:start="323:22" pos:end="323:25"><expr pos:start="323:22" pos:end="323:24"><name pos:start="323:22" pos:end="323:22">i</name><operator pos:start="323:23" pos:end="323:23">&lt;</operator><literal type="number" pos:start="323:24" pos:end="323:24">4</literal></expr>;</condition> <incr pos:start="323:27" pos:end="323:29"><expr pos:start="323:27" pos:end="323:29"><name pos:start="323:27" pos:end="323:27">i</name><operator pos:start="323:28" pos:end="323:29">++</operator></expr></incr>)</control><block pos:start="323:31" pos:end="339:13">{<block_content pos:start="325:17" pos:end="337:85">

                <expr_stmt pos:start="325:17" pos:end="325:60"><expr pos:start="325:17" pos:end="325:59"><name pos:start="325:17" pos:end="325:33"><name pos:start="325:17" pos:end="325:17">h</name><operator pos:start="325:18" pos:end="325:19">-&gt;</operator><name pos:start="325:20" pos:end="325:30">sub_mb_type</name><index pos:start="325:31" pos:end="325:33">[<expr pos:start="325:32" pos:end="325:32"><name pos:start="325:32" pos:end="325:32">i</name></expr>]</index></name><operator pos:start="325:34" pos:end="325:34">=</operator> <call pos:start="325:36" pos:end="325:59"><name pos:start="325:36" pos:end="325:51">get_ue_golomb_31</name><argument_list pos:start="325:52" pos:end="325:59">(<argument pos:start="325:53" pos:end="325:58"><expr pos:start="325:53" pos:end="325:58"><operator pos:start="325:53" pos:end="325:53">&amp;</operator><name pos:start="325:54" pos:end="325:58"><name pos:start="325:54" pos:end="325:54">s</name><operator pos:start="325:55" pos:end="325:56">-&gt;</operator><name pos:start="325:57" pos:end="325:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="327:17" pos:end="333:17"><if pos:start="327:17" pos:end="333:17">if<condition pos:start="327:19" pos:end="327:41">(<expr pos:start="327:20" pos:end="327:40"><name pos:start="327:20" pos:end="327:36"><name pos:start="327:20" pos:end="327:20">h</name><operator pos:start="327:21" pos:end="327:22">-&gt;</operator><name pos:start="327:23" pos:end="327:33">sub_mb_type</name><index pos:start="327:34" pos:end="327:36">[<expr pos:start="327:35" pos:end="327:35"><name pos:start="327:35" pos:end="327:35">i</name></expr>]</index></name> <operator pos:start="327:38" pos:end="327:39">&gt;=</operator><literal type="number" pos:start="327:40" pos:end="327:40">4</literal></expr>)</condition><block pos:start="327:42" pos:end="333:17">{<block_content pos:start="329:21" pos:end="331:30">

                    <expr_stmt pos:start="329:21" pos:end="329:134"><expr pos:start="329:21" pos:end="329:133"><call pos:start="329:21" pos:end="329:133"><name pos:start="329:21" pos:end="329:26">av_log</name><argument_list pos:start="329:27" pos:end="329:133">(<argument pos:start="329:28" pos:end="329:37"><expr pos:start="329:28" pos:end="329:37"><name pos:start="329:28" pos:end="329:37"><name pos:start="329:28" pos:end="329:28">h</name><operator pos:start="329:29" pos:end="329:30">-&gt;</operator><name pos:start="329:31" pos:end="329:31">s</name><operator pos:start="329:32" pos:end="329:32">.</operator><name pos:start="329:33" pos:end="329:37">avctx</name></name></expr></argument>, <argument pos:start="329:40" pos:end="329:51"><expr pos:start="329:40" pos:end="329:51"><name pos:start="329:40" pos:end="329:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="329:54" pos:end="329:95"><expr pos:start="329:54" pos:end="329:95"><literal type="string" pos:start="329:54" pos:end="329:95">"P sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument pos:start="329:98" pos:end="329:114"><expr pos:start="329:98" pos:end="329:114"><name pos:start="329:98" pos:end="329:114"><name pos:start="329:98" pos:end="329:98">h</name><operator pos:start="329:99" pos:end="329:100">-&gt;</operator><name pos:start="329:101" pos:end="329:111">sub_mb_type</name><index pos:start="329:112" pos:end="329:114">[<expr pos:start="329:113" pos:end="329:113"><name pos:start="329:113" pos:end="329:113">i</name></expr>]</index></name></expr></argument>, <argument pos:start="329:117" pos:end="329:123"><expr pos:start="329:117" pos:end="329:123"><name pos:start="329:117" pos:end="329:123"><name pos:start="329:117" pos:end="329:117">s</name><operator pos:start="329:118" pos:end="329:119">-&gt;</operator><name pos:start="329:120" pos:end="329:123">mb_x</name></name></expr></argument>, <argument pos:start="329:126" pos:end="329:132"><expr pos:start="329:126" pos:end="329:132"><name pos:start="329:126" pos:end="329:132"><name pos:start="329:126" pos:end="329:126">s</name><operator pos:start="329:127" pos:end="329:128">-&gt;</operator><name pos:start="329:129" pos:end="329:132">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="331:21" pos:end="331:30">return <expr pos:start="331:28" pos:end="331:29"><operator pos:start="331:28" pos:end="331:28">-</operator><literal type="number" pos:start="331:29" pos:end="331:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:96"><expr pos:start="335:17" pos:end="335:95"><name pos:start="335:17" pos:end="335:38"><name pos:start="335:17" pos:end="335:35">sub_partition_count</name><index pos:start="335:36" pos:end="335:38">[<expr pos:start="335:37" pos:end="335:37"><name pos:start="335:37" pos:end="335:37">i</name></expr>]</index></name><operator pos:start="335:39" pos:end="335:39">=</operator> <name pos:start="335:41" pos:end="335:79"><name pos:start="335:41" pos:end="335:58">p_sub_mb_type_info</name><index pos:start="335:59" pos:end="335:79">[ <expr pos:start="335:61" pos:end="335:77"><name pos:start="335:61" pos:end="335:77"><name pos:start="335:61" pos:end="335:61">h</name><operator pos:start="335:62" pos:end="335:63">-&gt;</operator><name pos:start="335:64" pos:end="335:74">sub_mb_type</name><index pos:start="335:75" pos:end="335:77">[<expr pos:start="335:76" pos:end="335:76"><name pos:start="335:76" pos:end="335:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="335:80" pos:end="335:80">.</operator><name pos:start="335:81" pos:end="335:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="337:17" pos:end="337:85"><expr pos:start="337:17" pos:end="337:84"><name pos:start="337:17" pos:end="337:33"><name pos:start="337:17" pos:end="337:17">h</name><operator pos:start="337:18" pos:end="337:19">-&gt;</operator><name pos:start="337:20" pos:end="337:30">sub_mb_type</name><index pos:start="337:31" pos:end="337:33">[<expr pos:start="337:32" pos:end="337:32"><name pos:start="337:32" pos:end="337:32">i</name></expr>]</index></name><operator pos:start="337:34" pos:end="337:34">=</operator>      <name pos:start="337:41" pos:end="337:79"><name pos:start="337:41" pos:end="337:58">p_sub_mb_type_info</name><index pos:start="337:59" pos:end="337:79">[ <expr pos:start="337:61" pos:end="337:77"><name pos:start="337:61" pos:end="337:77"><name pos:start="337:61" pos:end="337:61">h</name><operator pos:start="337:62" pos:end="337:63">-&gt;</operator><name pos:start="337:64" pos:end="337:74">sub_mb_type</name><index pos:start="337:75" pos:end="337:77">[<expr pos:start="337:76" pos:end="337:76"><name pos:start="337:76" pos:end="337:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="337:80" pos:end="337:80">.</operator><name pos:start="337:81" pos:end="337:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <for pos:start="345:9" pos:end="391:9">for<control pos:start="345:12" pos:end="345:47">(<init pos:start="345:13" pos:end="345:19"><expr pos:start="345:13" pos:end="345:18"><name pos:start="345:13" pos:end="345:16">list</name><operator pos:start="345:17" pos:end="345:17">=</operator><literal type="number" pos:start="345:18" pos:end="345:18">0</literal></expr>;</init> <condition pos:start="345:21" pos:end="345:39"><expr pos:start="345:21" pos:end="345:38"><name pos:start="345:21" pos:end="345:24">list</name><operator pos:start="345:25" pos:end="345:25">&lt;</operator><name pos:start="345:26" pos:end="345:38"><name pos:start="345:26" pos:end="345:26">h</name><operator pos:start="345:27" pos:end="345:28">-&gt;</operator><name pos:start="345:29" pos:end="345:38">list_count</name></name></expr>;</condition> <incr pos:start="345:41" pos:end="345:46"><expr pos:start="345:41" pos:end="345:46"><name pos:start="345:41" pos:end="345:44">list</name><operator pos:start="345:45" pos:end="345:46">++</operator></expr></incr>)</control><block pos:start="345:48" pos:end="391:9">{<block_content pos:start="347:13" pos:end="389:13">

            <decl_stmt pos:start="347:13" pos:end="347:69"><decl pos:start="347:13" pos:end="347:68"><type pos:start="347:13" pos:end="347:15"><name pos:start="347:13" pos:end="347:15">int</name></type> <name pos:start="347:17" pos:end="347:25">ref_count</name><init pos:start="347:26" pos:end="347:68">= <expr pos:start="347:28" pos:end="347:68"><ternary pos:start="347:28" pos:end="347:68"><condition pos:start="347:28" pos:end="347:45"><expr pos:start="347:28" pos:end="347:43"><call pos:start="347:28" pos:end="347:43"><name pos:start="347:28" pos:end="347:34">IS_REF0</name><argument_list pos:start="347:35" pos:end="347:43">(<argument pos:start="347:36" pos:end="347:42"><expr pos:start="347:36" pos:end="347:42"><name pos:start="347:36" pos:end="347:42">mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="347:47" pos:end="347:47"> <expr pos:start="347:47" pos:end="347:47"><literal type="number" pos:start="347:47" pos:end="347:47">1</literal></expr> </then><else pos:start="347:49" pos:end="347:68">: <expr pos:start="347:51" pos:end="347:68"><name pos:start="347:51" pos:end="347:68"><name pos:start="347:51" pos:end="347:51">h</name><operator pos:start="347:52" pos:end="347:53">-&gt;</operator><name pos:start="347:54" pos:end="347:62">ref_count</name><index pos:start="347:63" pos:end="347:68">[<expr pos:start="347:64" pos:end="347:67"><name pos:start="347:64" pos:end="347:67">list</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <for pos:start="349:13" pos:end="389:13">for<control pos:start="349:16" pos:end="349:30">(<init pos:start="349:17" pos:end="349:20"><expr pos:start="349:17" pos:end="349:19"><name pos:start="349:17" pos:end="349:17">i</name><operator pos:start="349:18" pos:end="349:18">=</operator><literal type="number" pos:start="349:19" pos:end="349:19">0</literal></expr>;</init> <condition pos:start="349:22" pos:end="349:25"><expr pos:start="349:22" pos:end="349:24"><name pos:start="349:22" pos:end="349:22">i</name><operator pos:start="349:23" pos:end="349:23">&lt;</operator><literal type="number" pos:start="349:24" pos:end="349:24">4</literal></expr>;</condition> <incr pos:start="349:27" pos:end="349:29"><expr pos:start="349:27" pos:end="349:29"><name pos:start="349:27" pos:end="349:27">i</name><operator pos:start="349:28" pos:end="349:29">++</operator></expr></incr>)</control><block pos:start="349:31" pos:end="389:13">{<block_content pos:start="351:17" pos:end="387:17">

                <if_stmt pos:start="351:17" pos:end="351:58"><if pos:start="351:17" pos:end="351:58">if<condition pos:start="351:19" pos:end="351:48">(<expr pos:start="351:20" pos:end="351:47"><call pos:start="351:20" pos:end="351:47"><name pos:start="351:20" pos:end="351:28">IS_DIRECT</name><argument_list pos:start="351:29" pos:end="351:47">(<argument pos:start="351:30" pos:end="351:46"><expr pos:start="351:30" pos:end="351:46"><name pos:start="351:30" pos:end="351:46"><name pos:start="351:30" pos:end="351:30">h</name><operator pos:start="351:31" pos:end="351:32">-&gt;</operator><name pos:start="351:33" pos:end="351:43">sub_mb_type</name><index pos:start="351:44" pos:end="351:46">[<expr pos:start="351:45" pos:end="351:45"><name pos:start="351:45" pos:end="351:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="351:50" pos:end="351:58"><block_content pos:start="351:50" pos:end="351:58"> <continue pos:start="351:50" pos:end="351:58">continue;</continue></block_content></block></if></if_stmt>

                <if_stmt pos:start="353:17" pos:end="387:17"><if pos:start="353:17" pos:end="381:17">if<condition pos:start="353:19" pos:end="353:54">(<expr pos:start="353:20" pos:end="353:53"><call pos:start="353:20" pos:end="353:53"><name pos:start="353:20" pos:end="353:25">IS_DIR</name><argument_list pos:start="353:26" pos:end="353:53">(<argument pos:start="353:27" pos:end="353:43"><expr pos:start="353:27" pos:end="353:43"><name pos:start="353:27" pos:end="353:43"><name pos:start="353:27" pos:end="353:27">h</name><operator pos:start="353:28" pos:end="353:29">-&gt;</operator><name pos:start="353:30" pos:end="353:40">sub_mb_type</name><index pos:start="353:41" pos:end="353:43">[<expr pos:start="353:42" pos:end="353:42"><name pos:start="353:42" pos:end="353:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="353:46" pos:end="353:46"><expr pos:start="353:46" pos:end="353:46"><literal type="number" pos:start="353:46" pos:end="353:46">0</literal></expr></argument>, <argument pos:start="353:49" pos:end="353:52"><expr pos:start="353:49" pos:end="353:52"><name pos:start="353:49" pos:end="353:52">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="353:55" pos:end="381:17">{<block_content pos:start="355:21" pos:end="379:38">

                    <decl_stmt pos:start="355:21" pos:end="355:37"><decl pos:start="355:21" pos:end="355:36"><type pos:start="355:21" pos:end="355:32"><name pos:start="355:21" pos:end="355:28">unsigned</name> <name pos:start="355:30" pos:end="355:32">int</name></type> <name pos:start="355:34" pos:end="355:36">tmp</name></decl>;</decl_stmt>

                    <if_stmt pos:start="357:21" pos:end="377:21"><if pos:start="357:21" pos:end="361:21">if<condition pos:start="357:23" pos:end="357:38">(<expr pos:start="357:24" pos:end="357:37"><name pos:start="357:24" pos:end="357:32">ref_count</name> <operator pos:start="357:34" pos:end="357:35">==</operator> <literal type="number" pos:start="357:37" pos:end="357:37">1</literal></expr>)</condition><block pos:start="357:39" pos:end="361:21">{<block_content pos:start="359:25" pos:end="359:31">

                        <expr_stmt pos:start="359:25" pos:end="359:31"><expr pos:start="359:25" pos:end="359:30"><name pos:start="359:25" pos:end="359:27">tmp</name><operator pos:start="359:28" pos:end="359:28">=</operator> <literal type="number" pos:start="359:30" pos:end="359:30">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if><if type="elseif" pos:start="361:22" pos:end="365:21">else if<condition pos:start="361:29" pos:end="361:44">(<expr pos:start="361:30" pos:end="361:43"><name pos:start="361:30" pos:end="361:38">ref_count</name> <operator pos:start="361:40" pos:end="361:41">==</operator> <literal type="number" pos:start="361:43" pos:end="361:43">2</literal></expr>)</condition><block pos:start="361:45" pos:end="365:21">{<block_content pos:start="363:25" pos:end="363:49">

                        <expr_stmt pos:start="363:25" pos:end="363:49"><expr pos:start="363:25" pos:end="363:48"><name pos:start="363:25" pos:end="363:27">tmp</name><operator pos:start="363:28" pos:end="363:28">=</operator> <call pos:start="363:30" pos:end="363:46"><name pos:start="363:30" pos:end="363:38">get_bits1</name><argument_list pos:start="363:39" pos:end="363:46">(<argument pos:start="363:40" pos:end="363:45"><expr pos:start="363:40" pos:end="363:45"><operator pos:start="363:40" pos:end="363:40">&amp;</operator><name pos:start="363:41" pos:end="363:45"><name pos:start="363:41" pos:end="363:41">s</name><operator pos:start="363:42" pos:end="363:43">-&gt;</operator><name pos:start="363:44" pos:end="363:45">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="363:47" pos:end="363:47">^</operator><literal type="number" pos:start="363:48" pos:end="363:48">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="365:22" pos:end="377:21">else<block pos:start="365:26" pos:end="377:21">{<block_content pos:start="367:25" pos:end="375:25">

                        <expr_stmt pos:start="367:25" pos:end="367:54"><expr pos:start="367:25" pos:end="367:53"><name pos:start="367:25" pos:end="367:27">tmp</name><operator pos:start="367:28" pos:end="367:28">=</operator> <call pos:start="367:30" pos:end="367:53"><name pos:start="367:30" pos:end="367:45">get_ue_golomb_31</name><argument_list pos:start="367:46" pos:end="367:53">(<argument pos:start="367:47" pos:end="367:52"><expr pos:start="367:47" pos:end="367:52"><operator pos:start="367:47" pos:end="367:47">&amp;</operator><name pos:start="367:48" pos:end="367:52"><name pos:start="367:48" pos:end="367:48">s</name><operator pos:start="367:49" pos:end="367:50">-&gt;</operator><name pos:start="367:51" pos:end="367:52">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="369:25" pos:end="375:25"><if pos:start="369:25" pos:end="375:25">if<condition pos:start="369:27" pos:end="369:42">(<expr pos:start="369:28" pos:end="369:41"><name pos:start="369:28" pos:end="369:30">tmp</name><operator pos:start="369:31" pos:end="369:32">&gt;=</operator><name pos:start="369:33" pos:end="369:41">ref_count</name></expr>)</condition><block pos:start="369:43" pos:end="375:25">{<block_content pos:start="371:29" pos:end="373:38">

                            <expr_stmt pos:start="371:29" pos:end="371:87"><expr pos:start="371:29" pos:end="371:86"><call pos:start="371:29" pos:end="371:86"><name pos:start="371:29" pos:end="371:34">av_log</name><argument_list pos:start="371:35" pos:end="371:86">(<argument pos:start="371:36" pos:end="371:45"><expr pos:start="371:36" pos:end="371:45"><name pos:start="371:36" pos:end="371:45"><name pos:start="371:36" pos:end="371:36">h</name><operator pos:start="371:37" pos:end="371:38">-&gt;</operator><name pos:start="371:39" pos:end="371:39">s</name><operator pos:start="371:40" pos:end="371:40">.</operator><name pos:start="371:41" pos:end="371:45">avctx</name></name></expr></argument>, <argument pos:start="371:48" pos:end="371:59"><expr pos:start="371:48" pos:end="371:59"><name pos:start="371:48" pos:end="371:59">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="371:62" pos:end="371:80"><expr pos:start="371:62" pos:end="371:80"><literal type="string" pos:start="371:62" pos:end="371:80">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="371:83" pos:end="371:85"><expr pos:start="371:83" pos:end="371:85"><name pos:start="371:83" pos:end="371:85">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="373:29" pos:end="373:38">return <expr pos:start="373:36" pos:end="373:37"><operator pos:start="373:36" pos:end="373:36">-</operator><literal type="number" pos:start="373:37" pos:end="373:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="379:21" pos:end="379:38"><expr pos:start="379:21" pos:end="379:37"><name pos:start="379:21" pos:end="379:32"><name pos:start="379:21" pos:end="379:23">ref</name><index pos:start="379:24" pos:end="379:29">[<expr pos:start="379:25" pos:end="379:28"><name pos:start="379:25" pos:end="379:28">list</name></expr>]</index><index pos:start="379:30" pos:end="379:32">[<expr pos:start="379:31" pos:end="379:31"><name pos:start="379:31" pos:end="379:31">i</name></expr>]</index></name><operator pos:start="379:33" pos:end="379:33">=</operator> <name pos:start="379:35" pos:end="379:37">tmp</name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="381:18" pos:end="387:17">else<block pos:start="381:22" pos:end="387:17">{<block_content pos:start="385:21" pos:end="385:38">

                 <comment type="line" pos:start="383:18" pos:end="383:24">//FIXME</comment>

                    <expr_stmt pos:start="385:21" pos:end="385:38"><expr pos:start="385:21" pos:end="385:37"><name pos:start="385:21" pos:end="385:32"><name pos:start="385:21" pos:end="385:23">ref</name><index pos:start="385:24" pos:end="385:29">[<expr pos:start="385:25" pos:end="385:28"><name pos:start="385:25" pos:end="385:28">list</name></expr>]</index><index pos:start="385:30" pos:end="385:32">[<expr pos:start="385:31" pos:end="385:31"><name pos:start="385:31" pos:end="385:31">i</name></expr>]</index></name> <operator pos:start="385:34" pos:end="385:34">=</operator> <operator pos:start="385:36" pos:end="385:36">-</operator><literal type="number" pos:start="385:37" pos:end="385:37">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="395:9" pos:end="397:51"><if pos:start="395:9" pos:end="397:51">if<condition pos:start="395:11" pos:end="395:26">(<expr pos:start="395:12" pos:end="395:25"><name pos:start="395:12" pos:end="395:25">dct8x8_allowed</name></expr>)</condition><block type="pseudo" pos:start="397:13" pos:end="397:51"><block_content pos:start="397:13" pos:end="397:51">

            <expr_stmt pos:start="397:13" pos:end="397:51"><expr pos:start="397:13" pos:end="397:50"><name pos:start="397:13" pos:end="397:26">dct8x8_allowed</name> <operator pos:start="397:28" pos:end="397:28">=</operator> <call pos:start="397:30" pos:end="397:50"><name pos:start="397:30" pos:end="397:47">get_dct8x8_allowed</name><argument_list pos:start="397:48" pos:end="397:50">(<argument pos:start="397:49" pos:end="397:49"><expr pos:start="397:49" pos:end="397:49"><name pos:start="397:49" pos:end="397:49">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="401:9" pos:end="485:9">for<control pos:start="401:12" pos:end="401:47">(<init pos:start="401:13" pos:end="401:19"><expr pos:start="401:13" pos:end="401:18"><name pos:start="401:13" pos:end="401:16">list</name><operator pos:start="401:17" pos:end="401:17">=</operator><literal type="number" pos:start="401:18" pos:end="401:18">0</literal></expr>;</init> <condition pos:start="401:21" pos:end="401:39"><expr pos:start="401:21" pos:end="401:38"><name pos:start="401:21" pos:end="401:24">list</name><operator pos:start="401:25" pos:end="401:25">&lt;</operator><name pos:start="401:26" pos:end="401:38"><name pos:start="401:26" pos:end="401:26">h</name><operator pos:start="401:27" pos:end="401:28">-&gt;</operator><name pos:start="401:29" pos:end="401:38">list_count</name></name></expr>;</condition> <incr pos:start="401:41" pos:end="401:46"><expr pos:start="401:41" pos:end="401:46"><name pos:start="401:41" pos:end="401:44">list</name><operator pos:start="401:45" pos:end="401:46">++</operator></expr></incr>)</control><block pos:start="401:48" pos:end="485:9">{<block_content pos:start="403:13" pos:end="483:13">

            <for pos:start="403:13" pos:end="483:13">for<control pos:start="403:16" pos:end="403:30">(<init pos:start="403:17" pos:end="403:20"><expr pos:start="403:17" pos:end="403:19"><name pos:start="403:17" pos:end="403:17">i</name><operator pos:start="403:18" pos:end="403:18">=</operator><literal type="number" pos:start="403:19" pos:end="403:19">0</literal></expr>;</init> <condition pos:start="403:22" pos:end="403:25"><expr pos:start="403:22" pos:end="403:24"><name pos:start="403:22" pos:end="403:22">i</name><operator pos:start="403:23" pos:end="403:23">&lt;</operator><literal type="number" pos:start="403:24" pos:end="403:24">4</literal></expr>;</condition> <incr pos:start="403:27" pos:end="403:29"><expr pos:start="403:27" pos:end="403:29"><name pos:start="403:27" pos:end="403:27">i</name><operator pos:start="403:28" pos:end="403:29">++</operator></expr></incr>)</control><block pos:start="403:31" pos:end="483:13">{<block_content pos:start="405:17" pos:end="481:17">

                <if_stmt pos:start="405:17" pos:end="411:17"><if pos:start="405:17" pos:end="411:17">if<condition pos:start="405:19" pos:end="405:48">(<expr pos:start="405:20" pos:end="405:47"><call pos:start="405:20" pos:end="405:47"><name pos:start="405:20" pos:end="405:28">IS_DIRECT</name><argument_list pos:start="405:29" pos:end="405:47">(<argument pos:start="405:30" pos:end="405:46"><expr pos:start="405:30" pos:end="405:46"><name pos:start="405:30" pos:end="405:46"><name pos:start="405:30" pos:end="405:30">h</name><operator pos:start="405:31" pos:end="405:32">-&gt;</operator><name pos:start="405:33" pos:end="405:43">sub_mb_type</name><index pos:start="405:44" pos:end="405:46">[<expr pos:start="405:45" pos:end="405:45"><name pos:start="405:45" pos:end="405:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="405:50" pos:end="411:17">{<block_content pos:start="407:21" pos:end="409:29">

                    <expr_stmt pos:start="407:21" pos:end="407:90"><expr pos:start="407:21" pos:end="407:89"><name pos:start="407:21" pos:end="407:52"><name pos:start="407:21" pos:end="407:21">h</name><operator pos:start="407:22" pos:end="407:23">-&gt;</operator><name pos:start="407:24" pos:end="407:32">ref_cache</name><index pos:start="407:33" pos:end="407:38">[<expr pos:start="407:34" pos:end="407:37"><name pos:start="407:34" pos:end="407:37">list</name></expr>]</index><index pos:start="407:39" pos:end="407:52">[ <expr pos:start="407:41" pos:end="407:50"><name pos:start="407:41" pos:end="407:50"><name pos:start="407:41" pos:end="407:45">scan8</name><index pos:start="407:46" pos:end="407:50">[<expr pos:start="407:47" pos:end="407:49"><literal type="number" pos:start="407:47" pos:end="407:47">4</literal><operator pos:start="407:48" pos:end="407:48">*</operator><name pos:start="407:49" pos:end="407:49">i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="407:54" pos:end="407:54">=</operator> <name pos:start="407:56" pos:end="407:89"><name pos:start="407:56" pos:end="407:56">h</name><operator pos:start="407:57" pos:end="407:58">-&gt;</operator><name pos:start="407:59" pos:end="407:67">ref_cache</name><index pos:start="407:68" pos:end="407:73">[<expr pos:start="407:69" pos:end="407:72"><name pos:start="407:69" pos:end="407:72">list</name></expr>]</index><index pos:start="407:74" pos:end="407:89">[ <expr pos:start="407:76" pos:end="407:87"><name pos:start="407:76" pos:end="407:85"><name pos:start="407:76" pos:end="407:80">scan8</name><index pos:start="407:81" pos:end="407:85">[<expr pos:start="407:82" pos:end="407:84"><literal type="number" pos:start="407:82" pos:end="407:82">4</literal><operator pos:start="407:83" pos:end="407:83">*</operator><name pos:start="407:84" pos:end="407:84">i</name></expr>]</index></name><operator pos:start="407:86" pos:end="407:86">+</operator><literal type="number" pos:start="407:87" pos:end="407:87">1</literal></expr> ]</index></name></expr>;</expr_stmt>

                    <continue pos:start="409:21" pos:end="409:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="413:17" pos:end="415:100"><expr pos:start="413:17" pos:end="415:99"><name pos:start="413:17" pos:end="413:50"><name pos:start="413:17" pos:end="413:17">h</name><operator pos:start="413:18" pos:end="413:19">-&gt;</operator><name pos:start="413:20" pos:end="413:28">ref_cache</name><index pos:start="413:29" pos:end="413:34">[<expr pos:start="413:30" pos:end="413:33"><name pos:start="413:30" pos:end="413:33">list</name></expr>]</index><index pos:start="413:35" pos:end="413:50">[ <expr pos:start="413:37" pos:end="413:46"><name pos:start="413:37" pos:end="413:46"><name pos:start="413:37" pos:end="413:41">scan8</name><index pos:start="413:42" pos:end="413:46">[<expr pos:start="413:43" pos:end="413:45"><literal type="number" pos:start="413:43" pos:end="413:43">4</literal><operator pos:start="413:44" pos:end="413:44">*</operator><name pos:start="413:45" pos:end="413:45">i</name></expr>]</index></name></expr>   ]</index></name><operator pos:start="413:51" pos:end="413:51">=</operator><name pos:start="413:52" pos:end="413:85"><name pos:start="413:52" pos:end="413:52">h</name><operator pos:start="413:53" pos:end="413:54">-&gt;</operator><name pos:start="413:55" pos:end="413:63">ref_cache</name><index pos:start="413:64" pos:end="413:69">[<expr pos:start="413:65" pos:end="413:68"><name pos:start="413:65" pos:end="413:68">list</name></expr>]</index><index pos:start="413:70" pos:end="413:85">[ <expr pos:start="413:72" pos:end="413:83"><name pos:start="413:72" pos:end="413:81"><name pos:start="413:72" pos:end="413:76">scan8</name><index pos:start="413:77" pos:end="413:81">[<expr pos:start="413:78" pos:end="413:80"><literal type="number" pos:start="413:78" pos:end="413:78">4</literal><operator pos:start="413:79" pos:end="413:79">*</operator><name pos:start="413:80" pos:end="413:80">i</name></expr>]</index></name><operator pos:start="413:82" pos:end="413:82">+</operator><literal type="number" pos:start="413:83" pos:end="413:83">1</literal></expr> ]</index></name><operator pos:start="413:86" pos:end="413:86">=</operator>

                <name pos:start="415:17" pos:end="415:50"><name pos:start="415:17" pos:end="415:17">h</name><operator pos:start="415:18" pos:end="415:19">-&gt;</operator><name pos:start="415:20" pos:end="415:28">ref_cache</name><index pos:start="415:29" pos:end="415:34">[<expr pos:start="415:30" pos:end="415:33"><name pos:start="415:30" pos:end="415:33">list</name></expr>]</index><index pos:start="415:35" pos:end="415:50">[ <expr pos:start="415:37" pos:end="415:48"><name pos:start="415:37" pos:end="415:46"><name pos:start="415:37" pos:end="415:41">scan8</name><index pos:start="415:42" pos:end="415:46">[<expr pos:start="415:43" pos:end="415:45"><literal type="number" pos:start="415:43" pos:end="415:43">4</literal><operator pos:start="415:44" pos:end="415:44">*</operator><name pos:start="415:45" pos:end="415:45">i</name></expr>]</index></name><operator pos:start="415:47" pos:end="415:47">+</operator><literal type="number" pos:start="415:48" pos:end="415:48">8</literal></expr> ]</index></name><operator pos:start="415:51" pos:end="415:51">=</operator><name pos:start="415:52" pos:end="415:85"><name pos:start="415:52" pos:end="415:52">h</name><operator pos:start="415:53" pos:end="415:54">-&gt;</operator><name pos:start="415:55" pos:end="415:63">ref_cache</name><index pos:start="415:64" pos:end="415:69">[<expr pos:start="415:65" pos:end="415:68"><name pos:start="415:65" pos:end="415:68">list</name></expr>]</index><index pos:start="415:70" pos:end="415:85">[ <expr pos:start="415:72" pos:end="415:83"><name pos:start="415:72" pos:end="415:81"><name pos:start="415:72" pos:end="415:76">scan8</name><index pos:start="415:77" pos:end="415:81">[<expr pos:start="415:78" pos:end="415:80"><literal type="number" pos:start="415:78" pos:end="415:78">4</literal><operator pos:start="415:79" pos:end="415:79">*</operator><name pos:start="415:80" pos:end="415:80">i</name></expr>]</index></name><operator pos:start="415:82" pos:end="415:82">+</operator><literal type="number" pos:start="415:83" pos:end="415:83">9</literal></expr> ]</index></name><operator pos:start="415:86" pos:end="415:86">=</operator> <name pos:start="415:88" pos:end="415:99"><name pos:start="415:88" pos:end="415:90">ref</name><index pos:start="415:91" pos:end="415:96">[<expr pos:start="415:92" pos:end="415:95"><name pos:start="415:92" pos:end="415:95">list</name></expr>]</index><index pos:start="415:97" pos:end="415:99">[<expr pos:start="415:98" pos:end="415:98"><name pos:start="415:98" pos:end="415:98">i</name></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="419:17" pos:end="481:17"><if pos:start="419:17" pos:end="473:17">if<condition pos:start="419:19" pos:end="419:54">(<expr pos:start="419:20" pos:end="419:53"><call pos:start="419:20" pos:end="419:53"><name pos:start="419:20" pos:end="419:25">IS_DIR</name><argument_list pos:start="419:26" pos:end="419:53">(<argument pos:start="419:27" pos:end="419:43"><expr pos:start="419:27" pos:end="419:43"><name pos:start="419:27" pos:end="419:43"><name pos:start="419:27" pos:end="419:27">h</name><operator pos:start="419:28" pos:end="419:29">-&gt;</operator><name pos:start="419:30" pos:end="419:40">sub_mb_type</name><index pos:start="419:41" pos:end="419:43">[<expr pos:start="419:42" pos:end="419:42"><name pos:start="419:42" pos:end="419:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="419:46" pos:end="419:46"><expr pos:start="419:46" pos:end="419:46"><literal type="number" pos:start="419:46" pos:end="419:46">0</literal></expr></argument>, <argument pos:start="419:49" pos:end="419:52"><expr pos:start="419:49" pos:end="419:52"><name pos:start="419:49" pos:end="419:52">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="419:55" pos:end="473:17">{<block_content pos:start="421:21" pos:end="471:21">

                    <decl_stmt pos:start="421:21" pos:end="421:61"><decl pos:start="421:21" pos:end="421:60"><type pos:start="421:21" pos:end="421:29"><specifier pos:start="421:21" pos:end="421:25">const</specifier> <name pos:start="421:27" pos:end="421:29">int</name></type> <name pos:start="421:31" pos:end="421:41">sub_mb_type</name><init pos:start="421:42" pos:end="421:60">= <expr pos:start="421:44" pos:end="421:60"><name pos:start="421:44" pos:end="421:60"><name pos:start="421:44" pos:end="421:44">h</name><operator pos:start="421:45" pos:end="421:46">-&gt;</operator><name pos:start="421:47" pos:end="421:57">sub_mb_type</name><index pos:start="421:58" pos:end="421:60">[<expr pos:start="421:59" pos:end="421:59"><name pos:start="421:59" pos:end="421:59">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="423:21" pos:end="423:96"><decl pos:start="423:21" pos:end="423:95"><type pos:start="423:21" pos:end="423:29"><specifier pos:start="423:21" pos:end="423:25">const</specifier> <name pos:start="423:27" pos:end="423:29">int</name></type> <name pos:start="423:31" pos:end="423:41">block_width</name><init pos:start="423:42" pos:end="423:95">= <expr pos:start="423:44" pos:end="423:95"><ternary pos:start="423:44" pos:end="423:95"><condition pos:start="423:44" pos:end="423:89"><expr pos:start="423:44" pos:end="423:87"><operator pos:start="423:44" pos:end="423:44">(</operator><name pos:start="423:45" pos:end="423:55">sub_mb_type</name> <operator pos:start="423:57" pos:end="423:57">&amp;</operator> <operator pos:start="423:59" pos:end="423:59">(</operator><name pos:start="423:60" pos:end="423:72">MB_TYPE_16x16</name><operator pos:start="423:73" pos:end="423:73">|</operator><name pos:start="423:74" pos:end="423:85">MB_TYPE_16x8</name><operator pos:start="423:86" pos:end="423:86">)</operator><operator pos:start="423:87" pos:end="423:87">)</operator></expr> ?</condition><then pos:start="423:91" pos:end="423:91"> <expr pos:start="423:91" pos:end="423:91"><literal type="number" pos:start="423:91" pos:end="423:91">2</literal></expr> </then><else pos:start="423:93" pos:end="423:95">: <expr pos:start="423:95" pos:end="423:95"><literal type="number" pos:start="423:95" pos:end="423:95">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <for pos:start="425:21" pos:end="471:21">for<control pos:start="425:24" pos:end="425:59">(<init pos:start="425:25" pos:end="425:28"><expr pos:start="425:25" pos:end="425:27"><name pos:start="425:25" pos:end="425:25">j</name><operator pos:start="425:26" pos:end="425:26">=</operator><literal type="number" pos:start="425:27" pos:end="425:27">0</literal></expr>;</init> <condition pos:start="425:30" pos:end="425:54"><expr pos:start="425:30" pos:end="425:53"><name pos:start="425:30" pos:end="425:30">j</name><operator pos:start="425:31" pos:end="425:31">&lt;</operator><name pos:start="425:32" pos:end="425:53"><name pos:start="425:32" pos:end="425:50">sub_partition_count</name><index pos:start="425:51" pos:end="425:53">[<expr pos:start="425:52" pos:end="425:52"><name pos:start="425:52" pos:end="425:52">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="425:56" pos:end="425:58"><expr pos:start="425:56" pos:end="425:58"><name pos:start="425:56" pos:end="425:56">j</name><operator pos:start="425:57" pos:end="425:58">++</operator></expr></incr>)</control><block pos:start="425:60" pos:end="471:21">{<block_content pos:start="427:25" pos:end="469:45">

                        <decl_stmt pos:start="427:25" pos:end="427:35"><decl pos:start="427:25" pos:end="427:30"><type pos:start="427:25" pos:end="427:27"><name pos:start="427:25" pos:end="427:27">int</name></type> <name pos:start="427:29" pos:end="427:30">mx</name></decl>, <decl pos:start="427:33" pos:end="427:34"><type ref="prev" pos:start="427:25" pos:end="427:27"/><name pos:start="427:33" pos:end="427:34">my</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="429:25" pos:end="429:61"><decl pos:start="429:25" pos:end="429:60"><type pos:start="429:25" pos:end="429:33"><specifier pos:start="429:25" pos:end="429:29">const</specifier> <name pos:start="429:31" pos:end="429:33">int</name></type> <name pos:start="429:35" pos:end="429:39">index</name><init pos:start="429:40" pos:end="429:60">= <expr pos:start="429:42" pos:end="429:60"><literal type="number" pos:start="429:42" pos:end="429:42">4</literal><operator pos:start="429:43" pos:end="429:43">*</operator><name pos:start="429:44" pos:end="429:44">i</name> <operator pos:start="429:46" pos:end="429:46">+</operator> <name pos:start="429:48" pos:end="429:58">block_width</name><operator pos:start="429:59" pos:end="429:59">*</operator><name pos:start="429:60" pos:end="429:60">j</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="431:25" pos:end="431:84"><expr pos:start="431:25" pos:end="431:83"><call pos:start="431:25" pos:end="431:44"><name pos:start="431:25" pos:end="431:31">int16_t</name> <argument_list pos:start="431:33" pos:end="431:44">(<argument pos:start="431:34" pos:end="431:43"><expr pos:start="431:34" pos:end="431:43"><operator pos:start="431:34" pos:end="431:34">*</operator> <name pos:start="431:36" pos:end="431:43">mv_cache</name></expr></argument>)</argument_list></call><index pos:start="431:45" pos:end="431:47">[<expr pos:start="431:46" pos:end="431:46"><literal type="number" pos:start="431:46" pos:end="431:46">2</literal></expr>]</index><operator pos:start="431:48" pos:end="431:48">=</operator> <operator pos:start="431:50" pos:end="431:50">&amp;</operator><name pos:start="431:51" pos:end="431:83"><name pos:start="431:51" pos:end="431:51">h</name><operator pos:start="431:52" pos:end="431:53">-&gt;</operator><name pos:start="431:54" pos:end="431:61">mv_cache</name><index pos:start="431:62" pos:end="431:67">[<expr pos:start="431:63" pos:end="431:66"><name pos:start="431:63" pos:end="431:66">list</name></expr>]</index><index pos:start="431:68" pos:end="431:83">[ <expr pos:start="431:70" pos:end="431:81"><name pos:start="431:70" pos:end="431:81"><name pos:start="431:70" pos:end="431:74">scan8</name><index pos:start="431:75" pos:end="431:81">[<expr pos:start="431:76" pos:end="431:80"><name pos:start="431:76" pos:end="431:80">index</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="433:25" pos:end="433:111"><expr pos:start="433:25" pos:end="433:110"><call pos:start="433:25" pos:end="433:110"><name pos:start="433:25" pos:end="433:35">pred_motion</name><argument_list pos:start="433:36" pos:end="433:110">(<argument pos:start="433:37" pos:end="433:37"><expr pos:start="433:37" pos:end="433:37"><name pos:start="433:37" pos:end="433:37">h</name></expr></argument>, <argument pos:start="433:40" pos:end="433:44"><expr pos:start="433:40" pos:end="433:44"><name pos:start="433:40" pos:end="433:44">index</name></expr></argument>, <argument pos:start="433:47" pos:end="433:57"><expr pos:start="433:47" pos:end="433:57"><name pos:start="433:47" pos:end="433:57">block_width</name></expr></argument>, <argument pos:start="433:60" pos:end="433:63"><expr pos:start="433:60" pos:end="433:63"><name pos:start="433:60" pos:end="433:63">list</name></expr></argument>, <argument pos:start="433:66" pos:end="433:99"><expr pos:start="433:66" pos:end="433:99"><name pos:start="433:66" pos:end="433:99"><name pos:start="433:66" pos:end="433:66">h</name><operator pos:start="433:67" pos:end="433:68">-&gt;</operator><name pos:start="433:69" pos:end="433:77">ref_cache</name><index pos:start="433:78" pos:end="433:83">[<expr pos:start="433:79" pos:end="433:82"><name pos:start="433:79" pos:end="433:82">list</name></expr>]</index><index pos:start="433:84" pos:end="433:99">[ <expr pos:start="433:86" pos:end="433:97"><name pos:start="433:86" pos:end="433:97"><name pos:start="433:86" pos:end="433:90">scan8</name><index pos:start="433:91" pos:end="433:97">[<expr pos:start="433:92" pos:end="433:96"><name pos:start="433:92" pos:end="433:96">index</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="433:102" pos:end="433:104"><expr pos:start="433:102" pos:end="433:104"><operator pos:start="433:102" pos:end="433:102">&amp;</operator><name pos:start="433:103" pos:end="433:104">mx</name></expr></argument>, <argument pos:start="433:107" pos:end="433:109"><expr pos:start="433:107" pos:end="433:109"><operator pos:start="433:107" pos:end="433:107">&amp;</operator><name pos:start="433:108" pos:end="433:109">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="435:25" pos:end="435:52"><expr pos:start="435:25" pos:end="435:51"><name pos:start="435:25" pos:end="435:26">mx</name> <operator pos:start="435:28" pos:end="435:29">+=</operator> <call pos:start="435:31" pos:end="435:51"><name pos:start="435:31" pos:end="435:43">get_se_golomb</name><argument_list pos:start="435:44" pos:end="435:51">(<argument pos:start="435:45" pos:end="435:50"><expr pos:start="435:45" pos:end="435:50"><operator pos:start="435:45" pos:end="435:45">&amp;</operator><name pos:start="435:46" pos:end="435:50"><name pos:start="435:46" pos:end="435:46">s</name><operator pos:start="435:47" pos:end="435:48">-&gt;</operator><name pos:start="435:49" pos:end="435:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="437:25" pos:end="437:52"><expr pos:start="437:25" pos:end="437:51"><name pos:start="437:25" pos:end="437:26">my</name> <operator pos:start="437:28" pos:end="437:29">+=</operator> <call pos:start="437:31" pos:end="437:51"><name pos:start="437:31" pos:end="437:43">get_se_golomb</name><argument_list pos:start="437:44" pos:end="437:51">(<argument pos:start="437:45" pos:end="437:50"><expr pos:start="437:45" pos:end="437:50"><operator pos:start="437:45" pos:end="437:45">&amp;</operator><name pos:start="437:46" pos:end="437:50"><name pos:start="437:46" pos:end="437:46">s</name><operator pos:start="437:47" pos:end="437:48">-&gt;</operator><name pos:start="437:49" pos:end="437:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="439:25" pos:end="439:70"><expr pos:start="439:25" pos:end="439:69"><call pos:start="439:25" pos:end="439:69"><name pos:start="439:25" pos:end="439:31">tprintf</name><argument_list pos:start="439:32" pos:end="439:69">(<argument pos:start="439:33" pos:end="439:40"><expr pos:start="439:33" pos:end="439:40"><name pos:start="439:33" pos:end="439:40"><name pos:start="439:33" pos:end="439:33">s</name><operator pos:start="439:34" pos:end="439:35">-&gt;</operator><name pos:start="439:36" pos:end="439:40">avctx</name></name></expr></argument>, <argument pos:start="439:43" pos:end="439:60"><expr pos:start="439:43" pos:end="439:60"><literal type="string" pos:start="439:43" pos:end="439:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="439:63" pos:end="439:64"><expr pos:start="439:63" pos:end="439:64"><name pos:start="439:63" pos:end="439:64">mx</name></expr></argument>, <argument pos:start="439:67" pos:end="439:68"><expr pos:start="439:67" pos:end="439:68"><name pos:start="439:67" pos:end="439:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="443:25" pos:end="465:25"><if pos:start="443:25" pos:end="453:25">if<condition pos:start="443:27" pos:end="443:51">(<expr pos:start="443:28" pos:end="443:50"><call pos:start="443:28" pos:end="443:50"><name pos:start="443:28" pos:end="443:37">IS_SUB_8X8</name><argument_list pos:start="443:38" pos:end="443:50">(<argument pos:start="443:39" pos:end="443:49"><expr pos:start="443:39" pos:end="443:49"><name pos:start="443:39" pos:end="443:49">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="443:52" pos:end="453:25">{<block_content pos:start="445:29" pos:end="451:67">

                            <expr_stmt pos:start="445:29" pos:end="447:67"><expr pos:start="445:29" pos:end="447:66"><name pos:start="445:29" pos:end="445:44"><name pos:start="445:29" pos:end="445:36">mv_cache</name><index pos:start="445:37" pos:end="445:41">[ <expr pos:start="445:39" pos:end="445:39"><literal type="number" pos:start="445:39" pos:end="445:39">1</literal></expr> ]</index><index pos:start="445:42" pos:end="445:44">[<expr pos:start="445:43" pos:end="445:43"><literal type="number" pos:start="445:43" pos:end="445:43">0</literal></expr>]</index></name><operator pos:start="445:45" pos:end="445:45">=</operator>

                            <name pos:start="447:29" pos:end="447:44"><name pos:start="447:29" pos:end="447:36">mv_cache</name><index pos:start="447:37" pos:end="447:41">[ <expr pos:start="447:39" pos:end="447:39"><literal type="number" pos:start="447:39" pos:end="447:39">8</literal></expr> ]</index><index pos:start="447:42" pos:end="447:44">[<expr pos:start="447:43" pos:end="447:43"><literal type="number" pos:start="447:43" pos:end="447:43">0</literal></expr>]</index></name><operator pos:start="447:45" pos:end="447:45">=</operator> <name pos:start="447:47" pos:end="447:62"><name pos:start="447:47" pos:end="447:54">mv_cache</name><index pos:start="447:55" pos:end="447:59">[ <expr pos:start="447:57" pos:end="447:57"><literal type="number" pos:start="447:57" pos:end="447:57">9</literal></expr> ]</index><index pos:start="447:60" pos:end="447:62">[<expr pos:start="447:61" pos:end="447:61"><literal type="number" pos:start="447:61" pos:end="447:61">0</literal></expr>]</index></name><operator pos:start="447:63" pos:end="447:63">=</operator> <name pos:start="447:65" pos:end="447:66">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="449:29" pos:end="451:67"><expr pos:start="449:29" pos:end="451:66"><name pos:start="449:29" pos:end="449:44"><name pos:start="449:29" pos:end="449:36">mv_cache</name><index pos:start="449:37" pos:end="449:41">[ <expr pos:start="449:39" pos:end="449:39"><literal type="number" pos:start="449:39" pos:end="449:39">1</literal></expr> ]</index><index pos:start="449:42" pos:end="449:44">[<expr pos:start="449:43" pos:end="449:43"><literal type="number" pos:start="449:43" pos:end="449:43">1</literal></expr>]</index></name><operator pos:start="449:45" pos:end="449:45">=</operator>

                            <name pos:start="451:29" pos:end="451:44"><name pos:start="451:29" pos:end="451:36">mv_cache</name><index pos:start="451:37" pos:end="451:41">[ <expr pos:start="451:39" pos:end="451:39"><literal type="number" pos:start="451:39" pos:end="451:39">8</literal></expr> ]</index><index pos:start="451:42" pos:end="451:44">[<expr pos:start="451:43" pos:end="451:43"><literal type="number" pos:start="451:43" pos:end="451:43">1</literal></expr>]</index></name><operator pos:start="451:45" pos:end="451:45">=</operator> <name pos:start="451:47" pos:end="451:62"><name pos:start="451:47" pos:end="451:54">mv_cache</name><index pos:start="451:55" pos:end="451:59">[ <expr pos:start="451:57" pos:end="451:57"><literal type="number" pos:start="451:57" pos:end="451:57">9</literal></expr> ]</index><index pos:start="451:60" pos:end="451:62">[<expr pos:start="451:61" pos:end="451:61"><literal type="number" pos:start="451:61" pos:end="451:61">1</literal></expr>]</index></name><operator pos:start="451:63" pos:end="451:63">=</operator> <name pos:start="451:65" pos:end="451:66">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="453:26" pos:end="459:25">else if<condition pos:start="453:33" pos:end="453:57">(<expr pos:start="453:34" pos:end="453:56"><call pos:start="453:34" pos:end="453:56"><name pos:start="453:34" pos:end="453:43">IS_SUB_8X4</name><argument_list pos:start="453:44" pos:end="453:56">(<argument pos:start="453:45" pos:end="453:55"><expr pos:start="453:45" pos:end="453:55"><name pos:start="453:45" pos:end="453:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="453:58" pos:end="459:25">{<block_content pos:start="455:29" pos:end="457:49">

                            <expr_stmt pos:start="455:29" pos:end="455:49"><expr pos:start="455:29" pos:end="455:48"><name pos:start="455:29" pos:end="455:44"><name pos:start="455:29" pos:end="455:36">mv_cache</name><index pos:start="455:37" pos:end="455:41">[ <expr pos:start="455:39" pos:end="455:39"><literal type="number" pos:start="455:39" pos:end="455:39">1</literal></expr> ]</index><index pos:start="455:42" pos:end="455:44">[<expr pos:start="455:43" pos:end="455:43"><literal type="number" pos:start="455:43" pos:end="455:43">0</literal></expr>]</index></name><operator pos:start="455:45" pos:end="455:45">=</operator> <name pos:start="455:47" pos:end="455:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="457:29" pos:end="457:49"><expr pos:start="457:29" pos:end="457:48"><name pos:start="457:29" pos:end="457:44"><name pos:start="457:29" pos:end="457:36">mv_cache</name><index pos:start="457:37" pos:end="457:41">[ <expr pos:start="457:39" pos:end="457:39"><literal type="number" pos:start="457:39" pos:end="457:39">1</literal></expr> ]</index><index pos:start="457:42" pos:end="457:44">[<expr pos:start="457:43" pos:end="457:43"><literal type="number" pos:start="457:43" pos:end="457:43">1</literal></expr>]</index></name><operator pos:start="457:45" pos:end="457:45">=</operator> <name pos:start="457:47" pos:end="457:48">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="459:26" pos:end="465:25">else if<condition pos:start="459:33" pos:end="459:57">(<expr pos:start="459:34" pos:end="459:56"><call pos:start="459:34" pos:end="459:56"><name pos:start="459:34" pos:end="459:43">IS_SUB_4X8</name><argument_list pos:start="459:44" pos:end="459:56">(<argument pos:start="459:45" pos:end="459:55"><expr pos:start="459:45" pos:end="459:55"><name pos:start="459:45" pos:end="459:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="459:58" pos:end="465:25">{<block_content pos:start="461:29" pos:end="463:49">

                            <expr_stmt pos:start="461:29" pos:end="461:49"><expr pos:start="461:29" pos:end="461:48"><name pos:start="461:29" pos:end="461:44"><name pos:start="461:29" pos:end="461:36">mv_cache</name><index pos:start="461:37" pos:end="461:41">[ <expr pos:start="461:39" pos:end="461:39"><literal type="number" pos:start="461:39" pos:end="461:39">8</literal></expr> ]</index><index pos:start="461:42" pos:end="461:44">[<expr pos:start="461:43" pos:end="461:43"><literal type="number" pos:start="461:43" pos:end="461:43">0</literal></expr>]</index></name><operator pos:start="461:45" pos:end="461:45">=</operator> <name pos:start="461:47" pos:end="461:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="463:29" pos:end="463:49"><expr pos:start="463:29" pos:end="463:48"><name pos:start="463:29" pos:end="463:44"><name pos:start="463:29" pos:end="463:36">mv_cache</name><index pos:start="463:37" pos:end="463:41">[ <expr pos:start="463:39" pos:end="463:39"><literal type="number" pos:start="463:39" pos:end="463:39">8</literal></expr> ]</index><index pos:start="463:42" pos:end="463:44">[<expr pos:start="463:43" pos:end="463:43"><literal type="number" pos:start="463:43" pos:end="463:43">1</literal></expr>]</index></name><operator pos:start="463:45" pos:end="463:45">=</operator> <name pos:start="463:47" pos:end="463:48">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="467:25" pos:end="467:45"><expr pos:start="467:25" pos:end="467:44"><name pos:start="467:25" pos:end="467:40"><name pos:start="467:25" pos:end="467:32">mv_cache</name><index pos:start="467:33" pos:end="467:37">[ <expr pos:start="467:35" pos:end="467:35"><literal type="number" pos:start="467:35" pos:end="467:35">0</literal></expr> ]</index><index pos:start="467:38" pos:end="467:40">[<expr pos:start="467:39" pos:end="467:39"><literal type="number" pos:start="467:39" pos:end="467:39">0</literal></expr>]</index></name><operator pos:start="467:41" pos:end="467:41">=</operator> <name pos:start="467:43" pos:end="467:44">mx</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="469:25" pos:end="469:45"><expr pos:start="469:25" pos:end="469:44"><name pos:start="469:25" pos:end="469:40"><name pos:start="469:25" pos:end="469:32">mv_cache</name><index pos:start="469:33" pos:end="469:37">[ <expr pos:start="469:35" pos:end="469:35"><literal type="number" pos:start="469:35" pos:end="469:35">0</literal></expr> ]</index><index pos:start="469:38" pos:end="469:40">[<expr pos:start="469:39" pos:end="469:39"><literal type="number" pos:start="469:39" pos:end="469:39">1</literal></expr>]</index></name><operator pos:start="469:41" pos:end="469:41">=</operator> <name pos:start="469:43" pos:end="469:44">my</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if><else pos:start="473:18" pos:end="481:17">else<block pos:start="473:22" pos:end="481:17">{<block_content pos:start="475:21" pos:end="479:35">

                    <decl_stmt pos:start="475:21" pos:end="475:81"><decl pos:start="475:21" pos:end="475:80"><type pos:start="475:21" pos:end="475:30"><name pos:start="475:21" pos:end="475:28">uint32_t</name> <modifier pos:start="475:30" pos:end="475:30">*</modifier></type><name pos:start="475:31" pos:end="475:31">p</name><init pos:start="475:32" pos:end="475:80">= <expr pos:start="475:34" pos:end="475:80"><operator pos:start="475:34" pos:end="475:34">(</operator><name pos:start="475:35" pos:end="475:42">uint32_t</name> <operator pos:start="475:44" pos:end="475:44">*</operator><operator pos:start="475:45" pos:end="475:45">)</operator><operator pos:start="475:46" pos:end="475:46">&amp;</operator><name pos:start="475:47" pos:end="475:80"><name pos:start="475:47" pos:end="475:47">h</name><operator pos:start="475:48" pos:end="475:49">-&gt;</operator><name pos:start="475:50" pos:end="475:57">mv_cache</name><index pos:start="475:58" pos:end="475:63">[<expr pos:start="475:59" pos:end="475:62"><name pos:start="475:59" pos:end="475:62">list</name></expr>]</index><index pos:start="475:64" pos:end="475:77">[ <expr pos:start="475:66" pos:end="475:75"><name pos:start="475:66" pos:end="475:75"><name pos:start="475:66" pos:end="475:70">scan8</name><index pos:start="475:71" pos:end="475:75">[<expr pos:start="475:72" pos:end="475:74"><literal type="number" pos:start="475:72" pos:end="475:72">4</literal><operator pos:start="475:73" pos:end="475:73">*</operator><name pos:start="475:74" pos:end="475:74">i</name></expr>]</index></name></expr> ]</index><index pos:start="475:78" pos:end="475:80">[<expr pos:start="475:79" pos:end="475:79"><literal type="number" pos:start="475:79" pos:end="475:79">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="477:21" pos:end="479:35"><expr pos:start="477:21" pos:end="479:34"><name pos:start="477:21" pos:end="477:24"><name pos:start="477:21" pos:end="477:21">p</name><index pos:start="477:22" pos:end="477:24">[<expr pos:start="477:23" pos:end="477:23"><literal type="number" pos:start="477:23" pos:end="477:23">0</literal></expr>]</index></name> <operator pos:start="477:26" pos:end="477:26">=</operator> <name pos:start="477:28" pos:end="477:31"><name pos:start="477:28" pos:end="477:28">p</name><index pos:start="477:29" pos:end="477:31">[<expr pos:start="477:30" pos:end="477:30"><literal type="number" pos:start="477:30" pos:end="477:30">1</literal></expr>]</index></name><operator pos:start="477:32" pos:end="477:32">=</operator>

                    <name pos:start="479:21" pos:end="479:24"><name pos:start="479:21" pos:end="479:21">p</name><index pos:start="479:22" pos:end="479:24">[<expr pos:start="479:23" pos:end="479:23"><literal type="number" pos:start="479:23" pos:end="479:23">8</literal></expr>]</index></name> <operator pos:start="479:26" pos:end="479:26">=</operator> <name pos:start="479:28" pos:end="479:31"><name pos:start="479:28" pos:end="479:28">p</name><index pos:start="479:29" pos:end="479:31">[<expr pos:start="479:30" pos:end="479:30"><literal type="number" pos:start="479:30" pos:end="479:30">9</literal></expr>]</index></name><operator pos:start="479:32" pos:end="479:32">=</operator> <literal type="number" pos:start="479:34" pos:end="479:34">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if><if type="elseif" pos:start="487:6" pos:end="493:5">else if<condition pos:start="487:13" pos:end="487:32">(<expr pos:start="487:14" pos:end="487:31"><call pos:start="487:14" pos:end="487:31"><name pos:start="487:14" pos:end="487:22">IS_DIRECT</name><argument_list pos:start="487:23" pos:end="487:31">(<argument pos:start="487:24" pos:end="487:30"><expr pos:start="487:24" pos:end="487:30"><name pos:start="487:24" pos:end="487:30">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="487:33" pos:end="493:5">{<block_content pos:start="489:9" pos:end="491:59">

        <expr_stmt pos:start="489:9" pos:end="489:48"><expr pos:start="489:9" pos:end="489:47"><call pos:start="489:9" pos:end="489:47"><name pos:start="489:9" pos:end="489:34">ff_h264_pred_direct_motion</name><argument_list pos:start="489:35" pos:end="489:47">(<argument pos:start="489:36" pos:end="489:36"><expr pos:start="489:36" pos:end="489:36"><name pos:start="489:36" pos:end="489:36">h</name></expr></argument>, <argument pos:start="489:39" pos:end="489:46"><expr pos:start="489:39" pos:end="489:46"><operator pos:start="489:39" pos:end="489:39">&amp;</operator><name pos:start="489:40" pos:end="489:46">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="491:9" pos:end="491:59"><expr pos:start="491:9" pos:end="491:58"><name pos:start="491:9" pos:end="491:22">dct8x8_allowed</name> <operator pos:start="491:24" pos:end="491:25">&amp;=</operator> <name pos:start="491:27" pos:end="491:58"><name pos:start="491:27" pos:end="491:27">h</name><operator pos:start="491:28" pos:end="491:29">-&gt;</operator><name pos:start="491:30" pos:end="491:32">sps</name><operator pos:start="491:33" pos:end="491:33">.</operator><name pos:start="491:34" pos:end="491:58">direct_8x8_inference_flag</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="493:6" pos:end="713:5">else<block pos:start="493:10" pos:end="713:5">{<block_content pos:start="495:9" pos:end="711:9">

        <decl_stmt pos:start="495:9" pos:end="495:28"><decl pos:start="495:9" pos:end="495:16"><type pos:start="495:9" pos:end="495:11"><name pos:start="495:9" pos:end="495:11">int</name></type> <name pos:start="495:13" pos:end="495:16">list</name></decl>, <decl pos:start="495:19" pos:end="495:20"><type ref="prev" pos:start="495:9" pos:end="495:11"/><name pos:start="495:19" pos:end="495:20">mx</name></decl>, <decl pos:start="495:23" pos:end="495:24"><type ref="prev" pos:start="495:9" pos:end="495:11"/><name pos:start="495:23" pos:end="495:24">my</name></decl>, <decl pos:start="495:27" pos:end="495:27"><type ref="prev" pos:start="495:9" pos:end="495:11"/><name pos:start="495:27" pos:end="495:27">i</name></decl>;</decl_stmt>

         <comment type="line" pos:start="497:10" pos:end="497:71">//FIXME we should set ref_idx_l? to 0 if we use that later ...</comment>

        <if_stmt pos:start="499:9" pos:end="711:9"><if pos:start="499:9" pos:end="563:9">if<condition pos:start="499:11" pos:end="499:29">(<expr pos:start="499:12" pos:end="499:28"><call pos:start="499:12" pos:end="499:28"><name pos:start="499:12" pos:end="499:19">IS_16X16</name><argument_list pos:start="499:20" pos:end="499:28">(<argument pos:start="499:21" pos:end="499:27"><expr pos:start="499:21" pos:end="499:27"><name pos:start="499:21" pos:end="499:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="499:30" pos:end="563:9">{<block_content pos:start="501:13" pos:end="561:13">

            <for pos:start="501:13" pos:end="535:13">for<control pos:start="501:16" pos:end="501:51">(<init pos:start="501:17" pos:end="501:23"><expr pos:start="501:17" pos:end="501:22"><name pos:start="501:17" pos:end="501:20">list</name><operator pos:start="501:21" pos:end="501:21">=</operator><literal type="number" pos:start="501:22" pos:end="501:22">0</literal></expr>;</init> <condition pos:start="501:25" pos:end="501:43"><expr pos:start="501:25" pos:end="501:42"><name pos:start="501:25" pos:end="501:28">list</name><operator pos:start="501:29" pos:end="501:29">&lt;</operator><name pos:start="501:30" pos:end="501:42"><name pos:start="501:30" pos:end="501:30">h</name><operator pos:start="501:31" pos:end="501:32">-&gt;</operator><name pos:start="501:33" pos:end="501:42">list_count</name></name></expr>;</condition> <incr pos:start="501:45" pos:end="501:50"><expr pos:start="501:45" pos:end="501:50"><name pos:start="501:45" pos:end="501:48">list</name><operator pos:start="501:49" pos:end="501:50">++</operator></expr></incr>)</control><block pos:start="501:52" pos:end="535:13">{<block_content pos:start="503:21" pos:end="533:85">

                    <decl_stmt pos:start="503:21" pos:end="503:37"><decl pos:start="503:21" pos:end="503:36"><type pos:start="503:21" pos:end="503:32"><name pos:start="503:21" pos:end="503:28">unsigned</name> <name pos:start="503:30" pos:end="503:32">int</name></type> <name pos:start="503:34" pos:end="503:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="505:21" pos:end="531:48"><if pos:start="505:21" pos:end="529:21">if<condition pos:start="505:23" pos:end="505:48">(<expr pos:start="505:24" pos:end="505:47"><call pos:start="505:24" pos:end="505:47"><name pos:start="505:24" pos:end="505:29">IS_DIR</name><argument_list pos:start="505:30" pos:end="505:47">(<argument pos:start="505:31" pos:end="505:37"><expr pos:start="505:31" pos:end="505:37"><name pos:start="505:31" pos:end="505:37">mb_type</name></expr></argument>, <argument pos:start="505:40" pos:end="505:40"><expr pos:start="505:40" pos:end="505:40"><literal type="number" pos:start="505:40" pos:end="505:40">0</literal></expr></argument>, <argument pos:start="505:43" pos:end="505:46"><expr pos:start="505:43" pos:end="505:46"><name pos:start="505:43" pos:end="505:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="505:49" pos:end="529:21">{<block_content pos:start="507:25" pos:end="527:25">

                        <if_stmt pos:start="507:25" pos:end="527:25"><if pos:start="507:25" pos:end="511:25">if<condition pos:start="507:27" pos:end="507:49">(<expr pos:start="507:28" pos:end="507:48"><name pos:start="507:28" pos:end="507:45"><name pos:start="507:28" pos:end="507:28">h</name><operator pos:start="507:29" pos:end="507:30">-&gt;</operator><name pos:start="507:31" pos:end="507:39">ref_count</name><index pos:start="507:40" pos:end="507:45">[<expr pos:start="507:41" pos:end="507:44"><name pos:start="507:41" pos:end="507:44">list</name></expr>]</index></name><operator pos:start="507:46" pos:end="507:47">==</operator><literal type="number" pos:start="507:48" pos:end="507:48">1</literal></expr>)</condition><block pos:start="507:50" pos:end="511:25">{<block_content pos:start="509:29" pos:end="509:35">

                            <expr_stmt pos:start="509:29" pos:end="509:35"><expr pos:start="509:29" pos:end="509:34"><name pos:start="509:29" pos:end="509:31">val</name><operator pos:start="509:32" pos:end="509:32">=</operator> <literal type="number" pos:start="509:34" pos:end="509:34">0</literal></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="511:26" pos:end="515:25">else if<condition pos:start="511:33" pos:end="511:55">(<expr pos:start="511:34" pos:end="511:54"><name pos:start="511:34" pos:end="511:51"><name pos:start="511:34" pos:end="511:34">h</name><operator pos:start="511:35" pos:end="511:36">-&gt;</operator><name pos:start="511:37" pos:end="511:45">ref_count</name><index pos:start="511:46" pos:end="511:51">[<expr pos:start="511:47" pos:end="511:50"><name pos:start="511:47" pos:end="511:50">list</name></expr>]</index></name><operator pos:start="511:52" pos:end="511:53">==</operator><literal type="number" pos:start="511:54" pos:end="511:54">2</literal></expr>)</condition><block pos:start="511:56" pos:end="515:25">{<block_content pos:start="513:29" pos:end="513:53">

                            <expr_stmt pos:start="513:29" pos:end="513:53"><expr pos:start="513:29" pos:end="513:52"><name pos:start="513:29" pos:end="513:31">val</name><operator pos:start="513:32" pos:end="513:32">=</operator> <call pos:start="513:34" pos:end="513:50"><name pos:start="513:34" pos:end="513:42">get_bits1</name><argument_list pos:start="513:43" pos:end="513:50">(<argument pos:start="513:44" pos:end="513:49"><expr pos:start="513:44" pos:end="513:49"><operator pos:start="513:44" pos:end="513:44">&amp;</operator><name pos:start="513:45" pos:end="513:49"><name pos:start="513:45" pos:end="513:45">s</name><operator pos:start="513:46" pos:end="513:47">-&gt;</operator><name pos:start="513:48" pos:end="513:49">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="513:51" pos:end="513:51">^</operator><literal type="number" pos:start="513:52" pos:end="513:52">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></if><else pos:start="515:26" pos:end="527:25">else<block pos:start="515:30" pos:end="527:25">{<block_content pos:start="517:29" pos:end="525:29">

                            <expr_stmt pos:start="517:29" pos:end="517:58"><expr pos:start="517:29" pos:end="517:57"><name pos:start="517:29" pos:end="517:31">val</name><operator pos:start="517:32" pos:end="517:32">=</operator> <call pos:start="517:34" pos:end="517:57"><name pos:start="517:34" pos:end="517:49">get_ue_golomb_31</name><argument_list pos:start="517:50" pos:end="517:57">(<argument pos:start="517:51" pos:end="517:56"><expr pos:start="517:51" pos:end="517:56"><operator pos:start="517:51" pos:end="517:51">&amp;</operator><name pos:start="517:52" pos:end="517:56"><name pos:start="517:52" pos:end="517:52">s</name><operator pos:start="517:53" pos:end="517:54">-&gt;</operator><name pos:start="517:55" pos:end="517:56">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="519:29" pos:end="525:29"><if pos:start="519:29" pos:end="525:29">if<condition pos:start="519:31" pos:end="519:57">(<expr pos:start="519:32" pos:end="519:56"><name pos:start="519:32" pos:end="519:34">val</name> <operator pos:start="519:36" pos:end="519:37">&gt;=</operator> <name pos:start="519:39" pos:end="519:56"><name pos:start="519:39" pos:end="519:39">h</name><operator pos:start="519:40" pos:end="519:41">-&gt;</operator><name pos:start="519:42" pos:end="519:50">ref_count</name><index pos:start="519:51" pos:end="519:56">[<expr pos:start="519:52" pos:end="519:55"><name pos:start="519:52" pos:end="519:55">list</name></expr>]</index></name></expr>)</condition><block pos:start="519:58" pos:end="525:29">{<block_content pos:start="521:33" pos:end="523:42">

                                <expr_stmt pos:start="521:33" pos:end="521:91"><expr pos:start="521:33" pos:end="521:90"><call pos:start="521:33" pos:end="521:90"><name pos:start="521:33" pos:end="521:38">av_log</name><argument_list pos:start="521:39" pos:end="521:90">(<argument pos:start="521:40" pos:end="521:49"><expr pos:start="521:40" pos:end="521:49"><name pos:start="521:40" pos:end="521:49"><name pos:start="521:40" pos:end="521:40">h</name><operator pos:start="521:41" pos:end="521:42">-&gt;</operator><name pos:start="521:43" pos:end="521:43">s</name><operator pos:start="521:44" pos:end="521:44">.</operator><name pos:start="521:45" pos:end="521:49">avctx</name></name></expr></argument>, <argument pos:start="521:52" pos:end="521:63"><expr pos:start="521:52" pos:end="521:63"><name pos:start="521:52" pos:end="521:63">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="521:66" pos:end="521:84"><expr pos:start="521:66" pos:end="521:84"><literal type="string" pos:start="521:66" pos:end="521:84">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="521:87" pos:end="521:89"><expr pos:start="521:87" pos:end="521:89"><name pos:start="521:87" pos:end="521:89">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="523:33" pos:end="523:42">return <expr pos:start="523:40" pos:end="523:41"><operator pos:start="523:40" pos:end="523:40">-</operator><literal type="number" pos:start="523:41" pos:end="523:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if><else pos:start="529:22" pos:end="531:48">else<block type="pseudo" pos:start="531:25" pos:end="531:48"><block_content pos:start="531:25" pos:end="531:48">

                        <expr_stmt pos:start="531:25" pos:end="531:48"><expr pos:start="531:25" pos:end="531:47"><name pos:start="531:25" pos:end="531:27">val</name><operator pos:start="531:28" pos:end="531:28">=</operator> <name pos:start="531:30" pos:end="531:42">LIST_NOT_USED</name><operator pos:start="531:43" pos:end="531:43">&amp;</operator><literal type="number" pos:start="531:44" pos:end="531:47">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="533:21" pos:end="533:85"><expr pos:start="533:21" pos:end="533:84"><call pos:start="533:21" pos:end="533:84"><name pos:start="533:21" pos:end="533:34">fill_rectangle</name><argument_list pos:start="533:35" pos:end="533:84">(<argument pos:start="533:36" pos:end="533:66"><expr pos:start="533:36" pos:end="533:66"><operator pos:start="533:36" pos:end="533:36">&amp;</operator><name pos:start="533:37" pos:end="533:66"><name pos:start="533:37" pos:end="533:37">h</name><operator pos:start="533:38" pos:end="533:39">-&gt;</operator><name pos:start="533:40" pos:end="533:48">ref_cache</name><index pos:start="533:49" pos:end="533:54">[<expr pos:start="533:50" pos:end="533:53"><name pos:start="533:50" pos:end="533:53">list</name></expr>]</index><index pos:start="533:55" pos:end="533:66">[ <expr pos:start="533:57" pos:end="533:64"><name pos:start="533:57" pos:end="533:64"><name pos:start="533:57" pos:end="533:61">scan8</name><index pos:start="533:62" pos:end="533:64">[<expr pos:start="533:63" pos:end="533:63"><literal type="number" pos:start="533:63" pos:end="533:63">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="533:69" pos:end="533:69"><expr pos:start="533:69" pos:end="533:69"><literal type="number" pos:start="533:69" pos:end="533:69">4</literal></expr></argument>, <argument pos:start="533:72" pos:end="533:72"><expr pos:start="533:72" pos:end="533:72"><literal type="number" pos:start="533:72" pos:end="533:72">4</literal></expr></argument>, <argument pos:start="533:75" pos:end="533:75"><expr pos:start="533:75" pos:end="533:75"><literal type="number" pos:start="533:75" pos:end="533:75">8</literal></expr></argument>, <argument pos:start="533:78" pos:end="533:80"><expr pos:start="533:78" pos:end="533:80"><name pos:start="533:78" pos:end="533:80">val</name></expr></argument>, <argument pos:start="533:83" pos:end="533:83"><expr pos:start="533:83" pos:end="533:83"><literal type="number" pos:start="533:83" pos:end="533:83">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="537:13" pos:end="561:13">for<control pos:start="537:16" pos:end="537:51">(<init pos:start="537:17" pos:end="537:23"><expr pos:start="537:17" pos:end="537:22"><name pos:start="537:17" pos:end="537:20">list</name><operator pos:start="537:21" pos:end="537:21">=</operator><literal type="number" pos:start="537:22" pos:end="537:22">0</literal></expr>;</init> <condition pos:start="537:25" pos:end="537:43"><expr pos:start="537:25" pos:end="537:42"><name pos:start="537:25" pos:end="537:28">list</name><operator pos:start="537:29" pos:end="537:29">&lt;</operator><name pos:start="537:30" pos:end="537:42"><name pos:start="537:30" pos:end="537:30">h</name><operator pos:start="537:31" pos:end="537:32">-&gt;</operator><name pos:start="537:33" pos:end="537:42">list_count</name></name></expr>;</condition> <incr pos:start="537:45" pos:end="537:50"><expr pos:start="537:45" pos:end="537:50"><name pos:start="537:45" pos:end="537:48">list</name><operator pos:start="537:49" pos:end="537:50">++</operator></expr></incr>)</control><block pos:start="537:52" pos:end="561:13">{<block_content pos:start="539:17" pos:end="559:79">

                <decl_stmt pos:start="539:17" pos:end="539:33"><decl pos:start="539:17" pos:end="539:32"><type pos:start="539:17" pos:end="539:28"><name pos:start="539:17" pos:end="539:24">unsigned</name> <name pos:start="539:26" pos:end="539:28">int</name></type> <name pos:start="539:30" pos:end="539:32">val</name></decl>;</decl_stmt>

                <if_stmt pos:start="541:17" pos:end="557:26"><if pos:start="541:17" pos:end="555:17">if<condition pos:start="541:19" pos:end="541:44">(<expr pos:start="541:20" pos:end="541:43"><call pos:start="541:20" pos:end="541:43"><name pos:start="541:20" pos:end="541:25">IS_DIR</name><argument_list pos:start="541:26" pos:end="541:43">(<argument pos:start="541:27" pos:end="541:33"><expr pos:start="541:27" pos:end="541:33"><name pos:start="541:27" pos:end="541:33">mb_type</name></expr></argument>, <argument pos:start="541:36" pos:end="541:36"><expr pos:start="541:36" pos:end="541:36"><literal type="number" pos:start="541:36" pos:end="541:36">0</literal></expr></argument>, <argument pos:start="541:39" pos:end="541:42"><expr pos:start="541:39" pos:end="541:42"><name pos:start="541:39" pos:end="541:42">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="541:45" pos:end="555:17">{<block_content pos:start="543:21" pos:end="553:43">

                    <expr_stmt pos:start="543:21" pos:end="543:89"><expr pos:start="543:21" pos:end="543:88"><call pos:start="543:21" pos:end="543:88"><name pos:start="543:21" pos:end="543:31">pred_motion</name><argument_list pos:start="543:32" pos:end="543:88">(<argument pos:start="543:33" pos:end="543:33"><expr pos:start="543:33" pos:end="543:33"><name pos:start="543:33" pos:end="543:33">h</name></expr></argument>, <argument pos:start="543:36" pos:end="543:36"><expr pos:start="543:36" pos:end="543:36"><literal type="number" pos:start="543:36" pos:end="543:36">0</literal></expr></argument>, <argument pos:start="543:39" pos:end="543:39"><expr pos:start="543:39" pos:end="543:39"><literal type="number" pos:start="543:39" pos:end="543:39">4</literal></expr></argument>, <argument pos:start="543:42" pos:end="543:45"><expr pos:start="543:42" pos:end="543:45"><name pos:start="543:42" pos:end="543:45">list</name></expr></argument>, <argument pos:start="543:48" pos:end="543:77"><expr pos:start="543:48" pos:end="543:77"><name pos:start="543:48" pos:end="543:77"><name pos:start="543:48" pos:end="543:48">h</name><operator pos:start="543:49" pos:end="543:50">-&gt;</operator><name pos:start="543:51" pos:end="543:59">ref_cache</name><index pos:start="543:60" pos:end="543:65">[<expr pos:start="543:61" pos:end="543:64"><name pos:start="543:61" pos:end="543:64">list</name></expr>]</index><index pos:start="543:66" pos:end="543:77">[ <expr pos:start="543:68" pos:end="543:75"><name pos:start="543:68" pos:end="543:75"><name pos:start="543:68" pos:end="543:72">scan8</name><index pos:start="543:73" pos:end="543:75">[<expr pos:start="543:74" pos:end="543:74"><literal type="number" pos:start="543:74" pos:end="543:74">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="543:80" pos:end="543:82"><expr pos:start="543:80" pos:end="543:82"><operator pos:start="543:80" pos:end="543:80">&amp;</operator><name pos:start="543:81" pos:end="543:82">mx</name></expr></argument>, <argument pos:start="543:85" pos:end="543:87"><expr pos:start="543:85" pos:end="543:87"><operator pos:start="543:85" pos:end="543:85">&amp;</operator><name pos:start="543:86" pos:end="543:87">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="545:21" pos:end="545:48"><expr pos:start="545:21" pos:end="545:47"><name pos:start="545:21" pos:end="545:22">mx</name> <operator pos:start="545:24" pos:end="545:25">+=</operator> <call pos:start="545:27" pos:end="545:47"><name pos:start="545:27" pos:end="545:39">get_se_golomb</name><argument_list pos:start="545:40" pos:end="545:47">(<argument pos:start="545:41" pos:end="545:46"><expr pos:start="545:41" pos:end="545:46"><operator pos:start="545:41" pos:end="545:41">&amp;</operator><name pos:start="545:42" pos:end="545:46"><name pos:start="545:42" pos:end="545:42">s</name><operator pos:start="545:43" pos:end="545:44">-&gt;</operator><name pos:start="545:45" pos:end="545:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="547:21" pos:end="547:48"><expr pos:start="547:21" pos:end="547:47"><name pos:start="547:21" pos:end="547:22">my</name> <operator pos:start="547:24" pos:end="547:25">+=</operator> <call pos:start="547:27" pos:end="547:47"><name pos:start="547:27" pos:end="547:39">get_se_golomb</name><argument_list pos:start="547:40" pos:end="547:47">(<argument pos:start="547:41" pos:end="547:46"><expr pos:start="547:41" pos:end="547:46"><operator pos:start="547:41" pos:end="547:41">&amp;</operator><name pos:start="547:42" pos:end="547:46"><name pos:start="547:42" pos:end="547:42">s</name><operator pos:start="547:43" pos:end="547:44">-&gt;</operator><name pos:start="547:45" pos:end="547:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="549:21" pos:end="549:66"><expr pos:start="549:21" pos:end="549:65"><call pos:start="549:21" pos:end="549:65"><name pos:start="549:21" pos:end="549:27">tprintf</name><argument_list pos:start="549:28" pos:end="549:65">(<argument pos:start="549:29" pos:end="549:36"><expr pos:start="549:29" pos:end="549:36"><name pos:start="549:29" pos:end="549:36"><name pos:start="549:29" pos:end="549:29">s</name><operator pos:start="549:30" pos:end="549:31">-&gt;</operator><name pos:start="549:32" pos:end="549:36">avctx</name></name></expr></argument>, <argument pos:start="549:39" pos:end="549:56"><expr pos:start="549:39" pos:end="549:56"><literal type="string" pos:start="549:39" pos:end="549:56">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="549:59" pos:end="549:60"><expr pos:start="549:59" pos:end="549:60"><name pos:start="549:59" pos:end="549:60">mx</name></expr></argument>, <argument pos:start="549:63" pos:end="549:64"><expr pos:start="549:63" pos:end="549:64"><name pos:start="549:63" pos:end="549:64">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="553:21" pos:end="553:43"><expr pos:start="553:21" pos:end="553:42"><name pos:start="553:21" pos:end="553:23">val</name><operator pos:start="553:24" pos:end="553:24">=</operator> <call pos:start="553:26" pos:end="553:42"><name pos:start="553:26" pos:end="553:35">pack16to32</name><argument_list pos:start="553:36" pos:end="553:42">(<argument pos:start="553:37" pos:end="553:38"><expr pos:start="553:37" pos:end="553:38"><name pos:start="553:37" pos:end="553:38">mx</name></expr></argument>,<argument pos:start="553:40" pos:end="553:41"><expr pos:start="553:40" pos:end="553:41"><name pos:start="553:40" pos:end="553:41">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="555:18" pos:end="557:26">else<block type="pseudo" pos:start="557:21" pos:end="557:26"><block_content pos:start="557:21" pos:end="557:26">

                    <expr_stmt pos:start="557:21" pos:end="557:26"><expr pos:start="557:21" pos:end="557:25"><name pos:start="557:21" pos:end="557:23">val</name><operator pos:start="557:24" pos:end="557:24">=</operator><literal type="number" pos:start="557:25" pos:end="557:25">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="559:17" pos:end="559:79"><expr pos:start="559:17" pos:end="559:78"><call pos:start="559:17" pos:end="559:78"><name pos:start="559:17" pos:end="559:30">fill_rectangle</name><argument_list pos:start="559:31" pos:end="559:78">(<argument pos:start="559:32" pos:end="559:60"><expr pos:start="559:32" pos:end="559:60"><name pos:start="559:32" pos:end="559:60"><name pos:start="559:32" pos:end="559:32">h</name><operator pos:start="559:33" pos:end="559:34">-&gt;</operator><name pos:start="559:35" pos:end="559:42">mv_cache</name><index pos:start="559:43" pos:end="559:48">[<expr pos:start="559:44" pos:end="559:47"><name pos:start="559:44" pos:end="559:47">list</name></expr>]</index><index pos:start="559:49" pos:end="559:60">[ <expr pos:start="559:51" pos:end="559:58"><name pos:start="559:51" pos:end="559:58"><name pos:start="559:51" pos:end="559:55">scan8</name><index pos:start="559:56" pos:end="559:58">[<expr pos:start="559:57" pos:end="559:57"><literal type="number" pos:start="559:57" pos:end="559:57">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="559:63" pos:end="559:63"><expr pos:start="559:63" pos:end="559:63"><literal type="number" pos:start="559:63" pos:end="559:63">4</literal></expr></argument>, <argument pos:start="559:66" pos:end="559:66"><expr pos:start="559:66" pos:end="559:66"><literal type="number" pos:start="559:66" pos:end="559:66">4</literal></expr></argument>, <argument pos:start="559:69" pos:end="559:69"><expr pos:start="559:69" pos:end="559:69"><literal type="number" pos:start="559:69" pos:end="559:69">8</literal></expr></argument>, <argument pos:start="559:72" pos:end="559:74"><expr pos:start="559:72" pos:end="559:74"><name pos:start="559:72" pos:end="559:74">val</name></expr></argument>, <argument pos:start="559:77" pos:end="559:77"><expr pos:start="559:77" pos:end="559:77"><literal type="number" pos:start="559:77" pos:end="559:77">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <if type="elseif" pos:start="565:9" pos:end="637:9">else if<condition pos:start="565:16" pos:end="565:33">(<expr pos:start="565:17" pos:end="565:32"><call pos:start="565:17" pos:end="565:32"><name pos:start="565:17" pos:end="565:23">IS_16X8</name><argument_list pos:start="565:24" pos:end="565:32">(<argument pos:start="565:25" pos:end="565:31"><expr pos:start="565:25" pos:end="565:31"><name pos:start="565:25" pos:end="565:31">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="565:34" pos:end="637:9">{<block_content pos:start="567:13" pos:end="635:13">

            <for pos:start="567:13" pos:end="605:13">for<control pos:start="567:16" pos:end="567:51">(<init pos:start="567:17" pos:end="567:23"><expr pos:start="567:17" pos:end="567:22"><name pos:start="567:17" pos:end="567:20">list</name><operator pos:start="567:21" pos:end="567:21">=</operator><literal type="number" pos:start="567:22" pos:end="567:22">0</literal></expr>;</init> <condition pos:start="567:25" pos:end="567:43"><expr pos:start="567:25" pos:end="567:42"><name pos:start="567:25" pos:end="567:28">list</name><operator pos:start="567:29" pos:end="567:29">&lt;</operator><name pos:start="567:30" pos:end="567:42"><name pos:start="567:30" pos:end="567:30">h</name><operator pos:start="567:31" pos:end="567:32">-&gt;</operator><name pos:start="567:33" pos:end="567:42">list_count</name></name></expr>;</condition> <incr pos:start="567:45" pos:end="567:50"><expr pos:start="567:45" pos:end="567:50"><name pos:start="567:45" pos:end="567:48">list</name><operator pos:start="567:49" pos:end="567:50">++</operator></expr></incr>)</control><block pos:start="567:52" pos:end="605:13">{<block_content pos:start="569:21" pos:end="603:21">

                    <for pos:start="569:21" pos:end="603:21">for<control pos:start="569:24" pos:end="569:38">(<init pos:start="569:25" pos:end="569:28"><expr pos:start="569:25" pos:end="569:27"><name pos:start="569:25" pos:end="569:25">i</name><operator pos:start="569:26" pos:end="569:26">=</operator><literal type="number" pos:start="569:27" pos:end="569:27">0</literal></expr>;</init> <condition pos:start="569:30" pos:end="569:33"><expr pos:start="569:30" pos:end="569:32"><name pos:start="569:30" pos:end="569:30">i</name><operator pos:start="569:31" pos:end="569:31">&lt;</operator><literal type="number" pos:start="569:32" pos:end="569:32">2</literal></expr>;</condition> <incr pos:start="569:35" pos:end="569:37"><expr pos:start="569:35" pos:end="569:37"><name pos:start="569:35" pos:end="569:35">i</name><operator pos:start="569:36" pos:end="569:37">++</operator></expr></incr>)</control><block pos:start="569:39" pos:end="603:21">{<block_content pos:start="571:25" pos:end="601:96">

                        <decl_stmt pos:start="571:25" pos:end="571:41"><decl pos:start="571:25" pos:end="571:40"><type pos:start="571:25" pos:end="571:36"><name pos:start="571:25" pos:end="571:32">unsigned</name> <name pos:start="571:34" pos:end="571:36">int</name></type> <name pos:start="571:38" pos:end="571:40">val</name></decl>;</decl_stmt>

                        <if_stmt pos:start="573:25" pos:end="599:52"><if pos:start="573:25" pos:end="597:25">if<condition pos:start="573:27" pos:end="573:52">(<expr pos:start="573:28" pos:end="573:51"><call pos:start="573:28" pos:end="573:51"><name pos:start="573:28" pos:end="573:33">IS_DIR</name><argument_list pos:start="573:34" pos:end="573:51">(<argument pos:start="573:35" pos:end="573:41"><expr pos:start="573:35" pos:end="573:41"><name pos:start="573:35" pos:end="573:41">mb_type</name></expr></argument>, <argument pos:start="573:44" pos:end="573:44"><expr pos:start="573:44" pos:end="573:44"><name pos:start="573:44" pos:end="573:44">i</name></expr></argument>, <argument pos:start="573:47" pos:end="573:50"><expr pos:start="573:47" pos:end="573:50"><name pos:start="573:47" pos:end="573:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="573:53" pos:end="597:25">{<block_content pos:start="575:29" pos:end="595:29">

                            <if_stmt pos:start="575:29" pos:end="595:29"><if pos:start="575:29" pos:end="579:29">if<condition pos:start="575:31" pos:end="575:55">(<expr pos:start="575:32" pos:end="575:54"><name pos:start="575:32" pos:end="575:49"><name pos:start="575:32" pos:end="575:32">h</name><operator pos:start="575:33" pos:end="575:34">-&gt;</operator><name pos:start="575:35" pos:end="575:43">ref_count</name><index pos:start="575:44" pos:end="575:49">[<expr pos:start="575:45" pos:end="575:48"><name pos:start="575:45" pos:end="575:48">list</name></expr>]</index></name> <operator pos:start="575:51" pos:end="575:52">==</operator> <literal type="number" pos:start="575:54" pos:end="575:54">1</literal></expr>)</condition><block pos:start="575:56" pos:end="579:29">{<block_content pos:start="577:33" pos:end="577:39">

                                <expr_stmt pos:start="577:33" pos:end="577:39"><expr pos:start="577:33" pos:end="577:38"><name pos:start="577:33" pos:end="577:35">val</name><operator pos:start="577:36" pos:end="577:36">=</operator> <literal type="number" pos:start="577:38" pos:end="577:38">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><if type="elseif" pos:start="579:30" pos:end="583:29">else if<condition pos:start="579:37" pos:end="579:61">(<expr pos:start="579:38" pos:end="579:60"><name pos:start="579:38" pos:end="579:55"><name pos:start="579:38" pos:end="579:38">h</name><operator pos:start="579:39" pos:end="579:40">-&gt;</operator><name pos:start="579:41" pos:end="579:49">ref_count</name><index pos:start="579:50" pos:end="579:55">[<expr pos:start="579:51" pos:end="579:54"><name pos:start="579:51" pos:end="579:54">list</name></expr>]</index></name> <operator pos:start="579:57" pos:end="579:58">==</operator> <literal type="number" pos:start="579:60" pos:end="579:60">2</literal></expr>)</condition><block pos:start="579:62" pos:end="583:29">{<block_content pos:start="581:33" pos:end="581:57">

                                <expr_stmt pos:start="581:33" pos:end="581:57"><expr pos:start="581:33" pos:end="581:56"><name pos:start="581:33" pos:end="581:35">val</name><operator pos:start="581:36" pos:end="581:36">=</operator> <call pos:start="581:38" pos:end="581:54"><name pos:start="581:38" pos:end="581:46">get_bits1</name><argument_list pos:start="581:47" pos:end="581:54">(<argument pos:start="581:48" pos:end="581:53"><expr pos:start="581:48" pos:end="581:53"><operator pos:start="581:48" pos:end="581:48">&amp;</operator><name pos:start="581:49" pos:end="581:53"><name pos:start="581:49" pos:end="581:49">s</name><operator pos:start="581:50" pos:end="581:51">-&gt;</operator><name pos:start="581:52" pos:end="581:53">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="581:55" pos:end="581:55">^</operator><literal type="number" pos:start="581:56" pos:end="581:56">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><else pos:start="583:30" pos:end="595:29">else<block pos:start="583:34" pos:end="595:29">{<block_content pos:start="585:33" pos:end="593:33">

                                <expr_stmt pos:start="585:33" pos:end="585:62"><expr pos:start="585:33" pos:end="585:61"><name pos:start="585:33" pos:end="585:35">val</name><operator pos:start="585:36" pos:end="585:36">=</operator> <call pos:start="585:38" pos:end="585:61"><name pos:start="585:38" pos:end="585:53">get_ue_golomb_31</name><argument_list pos:start="585:54" pos:end="585:61">(<argument pos:start="585:55" pos:end="585:60"><expr pos:start="585:55" pos:end="585:60"><operator pos:start="585:55" pos:end="585:55">&amp;</operator><name pos:start="585:56" pos:end="585:60"><name pos:start="585:56" pos:end="585:56">s</name><operator pos:start="585:57" pos:end="585:58">-&gt;</operator><name pos:start="585:59" pos:end="585:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="587:33" pos:end="593:33"><if pos:start="587:33" pos:end="593:33">if<condition pos:start="587:35" pos:end="587:61">(<expr pos:start="587:36" pos:end="587:60"><name pos:start="587:36" pos:end="587:38">val</name> <operator pos:start="587:40" pos:end="587:41">&gt;=</operator> <name pos:start="587:43" pos:end="587:60"><name pos:start="587:43" pos:end="587:43">h</name><operator pos:start="587:44" pos:end="587:45">-&gt;</operator><name pos:start="587:46" pos:end="587:54">ref_count</name><index pos:start="587:55" pos:end="587:60">[<expr pos:start="587:56" pos:end="587:59"><name pos:start="587:56" pos:end="587:59">list</name></expr>]</index></name></expr>)</condition><block pos:start="587:62" pos:end="593:33">{<block_content pos:start="589:37" pos:end="591:46">

                                    <expr_stmt pos:start="589:37" pos:end="589:95"><expr pos:start="589:37" pos:end="589:94"><call pos:start="589:37" pos:end="589:94"><name pos:start="589:37" pos:end="589:42">av_log</name><argument_list pos:start="589:43" pos:end="589:94">(<argument pos:start="589:44" pos:end="589:53"><expr pos:start="589:44" pos:end="589:53"><name pos:start="589:44" pos:end="589:53"><name pos:start="589:44" pos:end="589:44">h</name><operator pos:start="589:45" pos:end="589:46">-&gt;</operator><name pos:start="589:47" pos:end="589:47">s</name><operator pos:start="589:48" pos:end="589:48">.</operator><name pos:start="589:49" pos:end="589:53">avctx</name></name></expr></argument>, <argument pos:start="589:56" pos:end="589:67"><expr pos:start="589:56" pos:end="589:67"><name pos:start="589:56" pos:end="589:67">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="589:70" pos:end="589:88"><expr pos:start="589:70" pos:end="589:88"><literal type="string" pos:start="589:70" pos:end="589:88">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="589:91" pos:end="589:93"><expr pos:start="589:91" pos:end="589:93"><name pos:start="589:91" pos:end="589:93">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <return pos:start="591:37" pos:end="591:46">return <expr pos:start="591:44" pos:end="591:45"><operator pos:start="591:44" pos:end="591:44">-</operator><literal type="number" pos:start="591:45" pos:end="591:45">1</literal></expr>;</return>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if><else pos:start="597:26" pos:end="599:52">else<block type="pseudo" pos:start="599:29" pos:end="599:52"><block_content pos:start="599:29" pos:end="599:52">

                            <expr_stmt pos:start="599:29" pos:end="599:52"><expr pos:start="599:29" pos:end="599:51"><name pos:start="599:29" pos:end="599:31">val</name><operator pos:start="599:32" pos:end="599:32">=</operator> <name pos:start="599:34" pos:end="599:46">LIST_NOT_USED</name><operator pos:start="599:47" pos:end="599:47">&amp;</operator><literal type="number" pos:start="599:48" pos:end="599:51">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="601:25" pos:end="601:96"><expr pos:start="601:25" pos:end="601:95"><call pos:start="601:25" pos:end="601:95"><name pos:start="601:25" pos:end="601:38">fill_rectangle</name><argument_list pos:start="601:39" pos:end="601:95">(<argument pos:start="601:40" pos:end="601:77"><expr pos:start="601:40" pos:end="601:77"><operator pos:start="601:40" pos:end="601:40">&amp;</operator><name pos:start="601:41" pos:end="601:77"><name pos:start="601:41" pos:end="601:41">h</name><operator pos:start="601:42" pos:end="601:43">-&gt;</operator><name pos:start="601:44" pos:end="601:52">ref_cache</name><index pos:start="601:53" pos:end="601:58">[<expr pos:start="601:54" pos:end="601:57"><name pos:start="601:54" pos:end="601:57">list</name></expr>]</index><index pos:start="601:59" pos:end="601:77">[ <expr pos:start="601:61" pos:end="601:75"><name pos:start="601:61" pos:end="601:68"><name pos:start="601:61" pos:end="601:65">scan8</name><index pos:start="601:66" pos:end="601:68">[<expr pos:start="601:67" pos:end="601:67"><literal type="number" pos:start="601:67" pos:end="601:67">0</literal></expr>]</index></name> <operator pos:start="601:70" pos:end="601:70">+</operator> <literal type="number" pos:start="601:72" pos:end="601:73">16</literal><operator pos:start="601:74" pos:end="601:74">*</operator><name pos:start="601:75" pos:end="601:75">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="601:80" pos:end="601:80"><expr pos:start="601:80" pos:end="601:80"><literal type="number" pos:start="601:80" pos:end="601:80">4</literal></expr></argument>, <argument pos:start="601:83" pos:end="601:83"><expr pos:start="601:83" pos:end="601:83"><literal type="number" pos:start="601:83" pos:end="601:83">2</literal></expr></argument>, <argument pos:start="601:86" pos:end="601:86"><expr pos:start="601:86" pos:end="601:86"><literal type="number" pos:start="601:86" pos:end="601:86">8</literal></expr></argument>, <argument pos:start="601:89" pos:end="601:91"><expr pos:start="601:89" pos:end="601:91"><name pos:start="601:89" pos:end="601:91">val</name></expr></argument>, <argument pos:start="601:94" pos:end="601:94"><expr pos:start="601:94" pos:end="601:94"><literal type="number" pos:start="601:94" pos:end="601:94">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="607:13" pos:end="635:13">for<control pos:start="607:16" pos:end="607:51">(<init pos:start="607:17" pos:end="607:23"><expr pos:start="607:17" pos:end="607:22"><name pos:start="607:17" pos:end="607:20">list</name><operator pos:start="607:21" pos:end="607:21">=</operator><literal type="number" pos:start="607:22" pos:end="607:22">0</literal></expr>;</init> <condition pos:start="607:25" pos:end="607:43"><expr pos:start="607:25" pos:end="607:42"><name pos:start="607:25" pos:end="607:28">list</name><operator pos:start="607:29" pos:end="607:29">&lt;</operator><name pos:start="607:30" pos:end="607:42"><name pos:start="607:30" pos:end="607:30">h</name><operator pos:start="607:31" pos:end="607:32">-&gt;</operator><name pos:start="607:33" pos:end="607:42">list_count</name></name></expr>;</condition> <incr pos:start="607:45" pos:end="607:50"><expr pos:start="607:45" pos:end="607:50"><name pos:start="607:45" pos:end="607:48">list</name><operator pos:start="607:49" pos:end="607:50">++</operator></expr></incr>)</control><block pos:start="607:52" pos:end="635:13">{<block_content pos:start="609:17" pos:end="633:17">

                <for pos:start="609:17" pos:end="633:17">for<control pos:start="609:20" pos:end="609:34">(<init pos:start="609:21" pos:end="609:24"><expr pos:start="609:21" pos:end="609:23"><name pos:start="609:21" pos:end="609:21">i</name><operator pos:start="609:22" pos:end="609:22">=</operator><literal type="number" pos:start="609:23" pos:end="609:23">0</literal></expr>;</init> <condition pos:start="609:26" pos:end="609:29"><expr pos:start="609:26" pos:end="609:28"><name pos:start="609:26" pos:end="609:26">i</name><operator pos:start="609:27" pos:end="609:27">&lt;</operator><literal type="number" pos:start="609:28" pos:end="609:28">2</literal></expr>;</condition> <incr pos:start="609:31" pos:end="609:33"><expr pos:start="609:31" pos:end="609:33"><name pos:start="609:31" pos:end="609:31">i</name><operator pos:start="609:32" pos:end="609:33">++</operator></expr></incr>)</control><block pos:start="609:35" pos:end="633:17">{<block_content pos:start="611:21" pos:end="631:90">

                    <decl_stmt pos:start="611:21" pos:end="611:37"><decl pos:start="611:21" pos:end="611:36"><type pos:start="611:21" pos:end="611:32"><name pos:start="611:21" pos:end="611:28">unsigned</name> <name pos:start="611:30" pos:end="611:32">int</name></type> <name pos:start="611:34" pos:end="611:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="613:21" pos:end="629:30"><if pos:start="613:21" pos:end="627:21">if<condition pos:start="613:23" pos:end="613:48">(<expr pos:start="613:24" pos:end="613:47"><call pos:start="613:24" pos:end="613:47"><name pos:start="613:24" pos:end="613:29">IS_DIR</name><argument_list pos:start="613:30" pos:end="613:47">(<argument pos:start="613:31" pos:end="613:37"><expr pos:start="613:31" pos:end="613:37"><name pos:start="613:31" pos:end="613:37">mb_type</name></expr></argument>, <argument pos:start="613:40" pos:end="613:40"><expr pos:start="613:40" pos:end="613:40"><name pos:start="613:40" pos:end="613:40">i</name></expr></argument>, <argument pos:start="613:43" pos:end="613:46"><expr pos:start="613:43" pos:end="613:46"><name pos:start="613:43" pos:end="613:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="613:49" pos:end="627:21">{<block_content pos:start="615:25" pos:end="625:47">

                        <expr_stmt pos:start="615:25" pos:end="615:102"><expr pos:start="615:25" pos:end="615:101"><call pos:start="615:25" pos:end="615:101"><name pos:start="615:25" pos:end="615:40">pred_16x8_motion</name><argument_list pos:start="615:41" pos:end="615:101">(<argument pos:start="615:42" pos:end="615:42"><expr pos:start="615:42" pos:end="615:42"><name pos:start="615:42" pos:end="615:42">h</name></expr></argument>, <argument pos:start="615:45" pos:end="615:47"><expr pos:start="615:45" pos:end="615:47"><literal type="number" pos:start="615:45" pos:end="615:45">8</literal><operator pos:start="615:46" pos:end="615:46">*</operator><name pos:start="615:47" pos:end="615:47">i</name></expr></argument>, <argument pos:start="615:50" pos:end="615:53"><expr pos:start="615:50" pos:end="615:53"><name pos:start="615:50" pos:end="615:53">list</name></expr></argument>, <argument pos:start="615:56" pos:end="615:90"><expr pos:start="615:56" pos:end="615:90"><name pos:start="615:56" pos:end="615:90"><name pos:start="615:56" pos:end="615:56">h</name><operator pos:start="615:57" pos:end="615:58">-&gt;</operator><name pos:start="615:59" pos:end="615:67">ref_cache</name><index pos:start="615:68" pos:end="615:73">[<expr pos:start="615:69" pos:end="615:72"><name pos:start="615:69" pos:end="615:72">list</name></expr>]</index><index pos:start="615:74" pos:end="615:90">[<expr pos:start="615:75" pos:end="615:89"><name pos:start="615:75" pos:end="615:82"><name pos:start="615:75" pos:end="615:79">scan8</name><index pos:start="615:80" pos:end="615:82">[<expr pos:start="615:81" pos:end="615:81"><literal type="number" pos:start="615:81" pos:end="615:81">0</literal></expr>]</index></name> <operator pos:start="615:84" pos:end="615:84">+</operator> <literal type="number" pos:start="615:86" pos:end="615:87">16</literal><operator pos:start="615:88" pos:end="615:88">*</operator><name pos:start="615:89" pos:end="615:89">i</name></expr>]</index></name></expr></argument>, <argument pos:start="615:93" pos:end="615:95"><expr pos:start="615:93" pos:end="615:95"><operator pos:start="615:93" pos:end="615:93">&amp;</operator><name pos:start="615:94" pos:end="615:95">mx</name></expr></argument>, <argument pos:start="615:98" pos:end="615:100"><expr pos:start="615:98" pos:end="615:100"><operator pos:start="615:98" pos:end="615:98">&amp;</operator><name pos:start="615:99" pos:end="615:100">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="617:25" pos:end="617:52"><expr pos:start="617:25" pos:end="617:51"><name pos:start="617:25" pos:end="617:26">mx</name> <operator pos:start="617:28" pos:end="617:29">+=</operator> <call pos:start="617:31" pos:end="617:51"><name pos:start="617:31" pos:end="617:43">get_se_golomb</name><argument_list pos:start="617:44" pos:end="617:51">(<argument pos:start="617:45" pos:end="617:50"><expr pos:start="617:45" pos:end="617:50"><operator pos:start="617:45" pos:end="617:45">&amp;</operator><name pos:start="617:46" pos:end="617:50"><name pos:start="617:46" pos:end="617:46">s</name><operator pos:start="617:47" pos:end="617:48">-&gt;</operator><name pos:start="617:49" pos:end="617:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="619:25" pos:end="619:52"><expr pos:start="619:25" pos:end="619:51"><name pos:start="619:25" pos:end="619:26">my</name> <operator pos:start="619:28" pos:end="619:29">+=</operator> <call pos:start="619:31" pos:end="619:51"><name pos:start="619:31" pos:end="619:43">get_se_golomb</name><argument_list pos:start="619:44" pos:end="619:51">(<argument pos:start="619:45" pos:end="619:50"><expr pos:start="619:45" pos:end="619:50"><operator pos:start="619:45" pos:end="619:45">&amp;</operator><name pos:start="619:46" pos:end="619:50"><name pos:start="619:46" pos:end="619:46">s</name><operator pos:start="619:47" pos:end="619:48">-&gt;</operator><name pos:start="619:49" pos:end="619:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="621:25" pos:end="621:70"><expr pos:start="621:25" pos:end="621:69"><call pos:start="621:25" pos:end="621:69"><name pos:start="621:25" pos:end="621:31">tprintf</name><argument_list pos:start="621:32" pos:end="621:69">(<argument pos:start="621:33" pos:end="621:40"><expr pos:start="621:33" pos:end="621:40"><name pos:start="621:33" pos:end="621:40"><name pos:start="621:33" pos:end="621:33">s</name><operator pos:start="621:34" pos:end="621:35">-&gt;</operator><name pos:start="621:36" pos:end="621:40">avctx</name></name></expr></argument>, <argument pos:start="621:43" pos:end="621:60"><expr pos:start="621:43" pos:end="621:60"><literal type="string" pos:start="621:43" pos:end="621:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="621:63" pos:end="621:64"><expr pos:start="621:63" pos:end="621:64"><name pos:start="621:63" pos:end="621:64">mx</name></expr></argument>, <argument pos:start="621:67" pos:end="621:68"><expr pos:start="621:67" pos:end="621:68"><name pos:start="621:67" pos:end="621:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="625:25" pos:end="625:47"><expr pos:start="625:25" pos:end="625:46"><name pos:start="625:25" pos:end="625:27">val</name><operator pos:start="625:28" pos:end="625:28">=</operator> <call pos:start="625:30" pos:end="625:46"><name pos:start="625:30" pos:end="625:39">pack16to32</name><argument_list pos:start="625:40" pos:end="625:46">(<argument pos:start="625:41" pos:end="625:42"><expr pos:start="625:41" pos:end="625:42"><name pos:start="625:41" pos:end="625:42">mx</name></expr></argument>,<argument pos:start="625:44" pos:end="625:45"><expr pos:start="625:44" pos:end="625:45"><name pos:start="625:44" pos:end="625:45">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="627:22" pos:end="629:30">else<block type="pseudo" pos:start="629:25" pos:end="629:30"><block_content pos:start="629:25" pos:end="629:30">

                        <expr_stmt pos:start="629:25" pos:end="629:30"><expr pos:start="629:25" pos:end="629:29"><name pos:start="629:25" pos:end="629:27">val</name><operator pos:start="629:28" pos:end="629:28">=</operator><literal type="number" pos:start="629:29" pos:end="629:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="631:21" pos:end="631:90"><expr pos:start="631:21" pos:end="631:89"><call pos:start="631:21" pos:end="631:89"><name pos:start="631:21" pos:end="631:34">fill_rectangle</name><argument_list pos:start="631:35" pos:end="631:89">(<argument pos:start="631:36" pos:end="631:71"><expr pos:start="631:36" pos:end="631:71"><name pos:start="631:36" pos:end="631:71"><name pos:start="631:36" pos:end="631:36">h</name><operator pos:start="631:37" pos:end="631:38">-&gt;</operator><name pos:start="631:39" pos:end="631:46">mv_cache</name><index pos:start="631:47" pos:end="631:52">[<expr pos:start="631:48" pos:end="631:51"><name pos:start="631:48" pos:end="631:51">list</name></expr>]</index><index pos:start="631:53" pos:end="631:71">[ <expr pos:start="631:55" pos:end="631:69"><name pos:start="631:55" pos:end="631:62"><name pos:start="631:55" pos:end="631:59">scan8</name><index pos:start="631:60" pos:end="631:62">[<expr pos:start="631:61" pos:end="631:61"><literal type="number" pos:start="631:61" pos:end="631:61">0</literal></expr>]</index></name> <operator pos:start="631:64" pos:end="631:64">+</operator> <literal type="number" pos:start="631:66" pos:end="631:67">16</literal><operator pos:start="631:68" pos:end="631:68">*</operator><name pos:start="631:69" pos:end="631:69">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="631:74" pos:end="631:74"><expr pos:start="631:74" pos:end="631:74"><literal type="number" pos:start="631:74" pos:end="631:74">4</literal></expr></argument>, <argument pos:start="631:77" pos:end="631:77"><expr pos:start="631:77" pos:end="631:77"><literal type="number" pos:start="631:77" pos:end="631:77">2</literal></expr></argument>, <argument pos:start="631:80" pos:end="631:80"><expr pos:start="631:80" pos:end="631:80"><literal type="number" pos:start="631:80" pos:end="631:80">8</literal></expr></argument>, <argument pos:start="631:83" pos:end="631:85"><expr pos:start="631:83" pos:end="631:85"><name pos:start="631:83" pos:end="631:85">val</name></expr></argument>, <argument pos:start="631:88" pos:end="631:88"><expr pos:start="631:88" pos:end="631:88"><literal type="number" pos:start="631:88" pos:end="631:88">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="637:10" pos:end="711:9">else<block pos:start="637:14" pos:end="711:9">{<block_content pos:start="639:13" pos:end="709:13">

            <expr_stmt pos:start="639:13" pos:end="639:37"><expr pos:start="639:13" pos:end="639:36"><call pos:start="639:13" pos:end="639:36"><name pos:start="639:13" pos:end="639:18">assert</name><argument_list pos:start="639:19" pos:end="639:36">(<argument pos:start="639:20" pos:end="639:35"><expr pos:start="639:20" pos:end="639:35"><call pos:start="639:20" pos:end="639:35"><name pos:start="639:20" pos:end="639:26">IS_8X16</name><argument_list pos:start="639:27" pos:end="639:35">(<argument pos:start="639:28" pos:end="639:34"><expr pos:start="639:28" pos:end="639:34"><name pos:start="639:28" pos:end="639:34">mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="641:13" pos:end="679:13">for<control pos:start="641:16" pos:end="641:51">(<init pos:start="641:17" pos:end="641:23"><expr pos:start="641:17" pos:end="641:22"><name pos:start="641:17" pos:end="641:20">list</name><operator pos:start="641:21" pos:end="641:21">=</operator><literal type="number" pos:start="641:22" pos:end="641:22">0</literal></expr>;</init> <condition pos:start="641:25" pos:end="641:43"><expr pos:start="641:25" pos:end="641:42"><name pos:start="641:25" pos:end="641:28">list</name><operator pos:start="641:29" pos:end="641:29">&lt;</operator><name pos:start="641:30" pos:end="641:42"><name pos:start="641:30" pos:end="641:30">h</name><operator pos:start="641:31" pos:end="641:32">-&gt;</operator><name pos:start="641:33" pos:end="641:42">list_count</name></name></expr>;</condition> <incr pos:start="641:45" pos:end="641:50"><expr pos:start="641:45" pos:end="641:50"><name pos:start="641:45" pos:end="641:48">list</name><operator pos:start="641:49" pos:end="641:50">++</operator></expr></incr>)</control><block pos:start="641:52" pos:end="679:13">{<block_content pos:start="643:21" pos:end="677:21">

                    <for pos:start="643:21" pos:end="677:21">for<control pos:start="643:24" pos:end="643:38">(<init pos:start="643:25" pos:end="643:28"><expr pos:start="643:25" pos:end="643:27"><name pos:start="643:25" pos:end="643:25">i</name><operator pos:start="643:26" pos:end="643:26">=</operator><literal type="number" pos:start="643:27" pos:end="643:27">0</literal></expr>;</init> <condition pos:start="643:30" pos:end="643:33"><expr pos:start="643:30" pos:end="643:32"><name pos:start="643:30" pos:end="643:30">i</name><operator pos:start="643:31" pos:end="643:31">&lt;</operator><literal type="number" pos:start="643:32" pos:end="643:32">2</literal></expr>;</condition> <incr pos:start="643:35" pos:end="643:37"><expr pos:start="643:35" pos:end="643:37"><name pos:start="643:35" pos:end="643:35">i</name><operator pos:start="643:36" pos:end="643:37">++</operator></expr></incr>)</control><block pos:start="643:39" pos:end="677:21">{<block_content pos:start="645:25" pos:end="675:95">

                        <decl_stmt pos:start="645:25" pos:end="645:41"><decl pos:start="645:25" pos:end="645:40"><type pos:start="645:25" pos:end="645:36"><name pos:start="645:25" pos:end="645:32">unsigned</name> <name pos:start="645:34" pos:end="645:36">int</name></type> <name pos:start="645:38" pos:end="645:40">val</name></decl>;</decl_stmt>

                        <if_stmt pos:start="647:25" pos:end="673:52"><if pos:start="647:25" pos:end="671:25">if<condition pos:start="647:27" pos:end="647:52">(<expr pos:start="647:28" pos:end="647:51"><call pos:start="647:28" pos:end="647:51"><name pos:start="647:28" pos:end="647:33">IS_DIR</name><argument_list pos:start="647:34" pos:end="647:51">(<argument pos:start="647:35" pos:end="647:41"><expr pos:start="647:35" pos:end="647:41"><name pos:start="647:35" pos:end="647:41">mb_type</name></expr></argument>, <argument pos:start="647:44" pos:end="647:44"><expr pos:start="647:44" pos:end="647:44"><name pos:start="647:44" pos:end="647:44">i</name></expr></argument>, <argument pos:start="647:47" pos:end="647:50"><expr pos:start="647:47" pos:end="647:50"><name pos:start="647:47" pos:end="647:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="647:53" pos:end="671:25">{<block_content pos:start="649:29" pos:end="669:29"> <comment type="line" pos:start="647:55" pos:end="647:70">//FIXME optimize</comment>

                            <if_stmt pos:start="649:29" pos:end="669:29"><if pos:start="649:29" pos:end="653:29">if<condition pos:start="649:31" pos:end="649:53">(<expr pos:start="649:32" pos:end="649:52"><name pos:start="649:32" pos:end="649:49"><name pos:start="649:32" pos:end="649:32">h</name><operator pos:start="649:33" pos:end="649:34">-&gt;</operator><name pos:start="649:35" pos:end="649:43">ref_count</name><index pos:start="649:44" pos:end="649:49">[<expr pos:start="649:45" pos:end="649:48"><name pos:start="649:45" pos:end="649:48">list</name></expr>]</index></name><operator pos:start="649:50" pos:end="649:51">==</operator><literal type="number" pos:start="649:52" pos:end="649:52">1</literal></expr>)</condition><block pos:start="649:54" pos:end="653:29">{<block_content pos:start="651:33" pos:end="651:39">

                                <expr_stmt pos:start="651:33" pos:end="651:39"><expr pos:start="651:33" pos:end="651:38"><name pos:start="651:33" pos:end="651:35">val</name><operator pos:start="651:36" pos:end="651:36">=</operator> <literal type="number" pos:start="651:38" pos:end="651:38">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><if type="elseif" pos:start="653:30" pos:end="657:29">else if<condition pos:start="653:37" pos:end="653:59">(<expr pos:start="653:38" pos:end="653:58"><name pos:start="653:38" pos:end="653:55"><name pos:start="653:38" pos:end="653:38">h</name><operator pos:start="653:39" pos:end="653:40">-&gt;</operator><name pos:start="653:41" pos:end="653:49">ref_count</name><index pos:start="653:50" pos:end="653:55">[<expr pos:start="653:51" pos:end="653:54"><name pos:start="653:51" pos:end="653:54">list</name></expr>]</index></name><operator pos:start="653:56" pos:end="653:57">==</operator><literal type="number" pos:start="653:58" pos:end="653:58">2</literal></expr>)</condition><block pos:start="653:60" pos:end="657:29">{<block_content pos:start="655:33" pos:end="655:57">

                                <expr_stmt pos:start="655:33" pos:end="655:57"><expr pos:start="655:33" pos:end="655:56"><name pos:start="655:33" pos:end="655:35">val</name><operator pos:start="655:36" pos:end="655:36">=</operator> <call pos:start="655:38" pos:end="655:54"><name pos:start="655:38" pos:end="655:46">get_bits1</name><argument_list pos:start="655:47" pos:end="655:54">(<argument pos:start="655:48" pos:end="655:53"><expr pos:start="655:48" pos:end="655:53"><operator pos:start="655:48" pos:end="655:48">&amp;</operator><name pos:start="655:49" pos:end="655:53"><name pos:start="655:49" pos:end="655:49">s</name><operator pos:start="655:50" pos:end="655:51">-&gt;</operator><name pos:start="655:52" pos:end="655:53">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="655:55" pos:end="655:55">^</operator><literal type="number" pos:start="655:56" pos:end="655:56">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><else pos:start="657:30" pos:end="669:29">else<block pos:start="657:34" pos:end="669:29">{<block_content pos:start="659:33" pos:end="667:33">

                                <expr_stmt pos:start="659:33" pos:end="659:62"><expr pos:start="659:33" pos:end="659:61"><name pos:start="659:33" pos:end="659:35">val</name><operator pos:start="659:36" pos:end="659:36">=</operator> <call pos:start="659:38" pos:end="659:61"><name pos:start="659:38" pos:end="659:53">get_ue_golomb_31</name><argument_list pos:start="659:54" pos:end="659:61">(<argument pos:start="659:55" pos:end="659:60"><expr pos:start="659:55" pos:end="659:60"><operator pos:start="659:55" pos:end="659:55">&amp;</operator><name pos:start="659:56" pos:end="659:60"><name pos:start="659:56" pos:end="659:56">s</name><operator pos:start="659:57" pos:end="659:58">-&gt;</operator><name pos:start="659:59" pos:end="659:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="661:33" pos:end="667:33"><if pos:start="661:33" pos:end="667:33">if<condition pos:start="661:35" pos:end="661:61">(<expr pos:start="661:36" pos:end="661:60"><name pos:start="661:36" pos:end="661:38">val</name> <operator pos:start="661:40" pos:end="661:41">&gt;=</operator> <name pos:start="661:43" pos:end="661:60"><name pos:start="661:43" pos:end="661:43">h</name><operator pos:start="661:44" pos:end="661:45">-&gt;</operator><name pos:start="661:46" pos:end="661:54">ref_count</name><index pos:start="661:55" pos:end="661:60">[<expr pos:start="661:56" pos:end="661:59"><name pos:start="661:56" pos:end="661:59">list</name></expr>]</index></name></expr>)</condition><block pos:start="661:62" pos:end="667:33">{<block_content pos:start="663:37" pos:end="665:46">

                                    <expr_stmt pos:start="663:37" pos:end="663:95"><expr pos:start="663:37" pos:end="663:94"><call pos:start="663:37" pos:end="663:94"><name pos:start="663:37" pos:end="663:42">av_log</name><argument_list pos:start="663:43" pos:end="663:94">(<argument pos:start="663:44" pos:end="663:53"><expr pos:start="663:44" pos:end="663:53"><name pos:start="663:44" pos:end="663:53"><name pos:start="663:44" pos:end="663:44">h</name><operator pos:start="663:45" pos:end="663:46">-&gt;</operator><name pos:start="663:47" pos:end="663:47">s</name><operator pos:start="663:48" pos:end="663:48">.</operator><name pos:start="663:49" pos:end="663:53">avctx</name></name></expr></argument>, <argument pos:start="663:56" pos:end="663:67"><expr pos:start="663:56" pos:end="663:67"><name pos:start="663:56" pos:end="663:67">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="663:70" pos:end="663:88"><expr pos:start="663:70" pos:end="663:88"><literal type="string" pos:start="663:70" pos:end="663:88">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="663:91" pos:end="663:93"><expr pos:start="663:91" pos:end="663:93"><name pos:start="663:91" pos:end="663:93">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <return pos:start="665:37" pos:end="665:46">return <expr pos:start="665:44" pos:end="665:45"><operator pos:start="665:44" pos:end="665:44">-</operator><literal type="number" pos:start="665:45" pos:end="665:45">1</literal></expr>;</return>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if><else pos:start="671:26" pos:end="673:52">else<block type="pseudo" pos:start="673:29" pos:end="673:52"><block_content pos:start="673:29" pos:end="673:52">

                            <expr_stmt pos:start="673:29" pos:end="673:52"><expr pos:start="673:29" pos:end="673:51"><name pos:start="673:29" pos:end="673:31">val</name><operator pos:start="673:32" pos:end="673:32">=</operator> <name pos:start="673:34" pos:end="673:46">LIST_NOT_USED</name><operator pos:start="673:47" pos:end="673:47">&amp;</operator><literal type="number" pos:start="673:48" pos:end="673:51">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="675:25" pos:end="675:95"><expr pos:start="675:25" pos:end="675:94"><call pos:start="675:25" pos:end="675:94"><name pos:start="675:25" pos:end="675:38">fill_rectangle</name><argument_list pos:start="675:39" pos:end="675:94">(<argument pos:start="675:40" pos:end="675:76"><expr pos:start="675:40" pos:end="675:76"><operator pos:start="675:40" pos:end="675:40">&amp;</operator><name pos:start="675:41" pos:end="675:76"><name pos:start="675:41" pos:end="675:41">h</name><operator pos:start="675:42" pos:end="675:43">-&gt;</operator><name pos:start="675:44" pos:end="675:52">ref_cache</name><index pos:start="675:53" pos:end="675:58">[<expr pos:start="675:54" pos:end="675:57"><name pos:start="675:54" pos:end="675:57">list</name></expr>]</index><index pos:start="675:59" pos:end="675:76">[ <expr pos:start="675:61" pos:end="675:74"><name pos:start="675:61" pos:end="675:68"><name pos:start="675:61" pos:end="675:65">scan8</name><index pos:start="675:66" pos:end="675:68">[<expr pos:start="675:67" pos:end="675:67"><literal type="number" pos:start="675:67" pos:end="675:67">0</literal></expr>]</index></name> <operator pos:start="675:70" pos:end="675:70">+</operator> <literal type="number" pos:start="675:72" pos:end="675:72">2</literal><operator pos:start="675:73" pos:end="675:73">*</operator><name pos:start="675:74" pos:end="675:74">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="675:79" pos:end="675:79"><expr pos:start="675:79" pos:end="675:79"><literal type="number" pos:start="675:79" pos:end="675:79">2</literal></expr></argument>, <argument pos:start="675:82" pos:end="675:82"><expr pos:start="675:82" pos:end="675:82"><literal type="number" pos:start="675:82" pos:end="675:82">4</literal></expr></argument>, <argument pos:start="675:85" pos:end="675:85"><expr pos:start="675:85" pos:end="675:85"><literal type="number" pos:start="675:85" pos:end="675:85">8</literal></expr></argument>, <argument pos:start="675:88" pos:end="675:90"><expr pos:start="675:88" pos:end="675:90"><name pos:start="675:88" pos:end="675:90">val</name></expr></argument>, <argument pos:start="675:93" pos:end="675:93"><expr pos:start="675:93" pos:end="675:93"><literal type="number" pos:start="675:93" pos:end="675:93">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="681:13" pos:end="709:13">for<control pos:start="681:16" pos:end="681:51">(<init pos:start="681:17" pos:end="681:23"><expr pos:start="681:17" pos:end="681:22"><name pos:start="681:17" pos:end="681:20">list</name><operator pos:start="681:21" pos:end="681:21">=</operator><literal type="number" pos:start="681:22" pos:end="681:22">0</literal></expr>;</init> <condition pos:start="681:25" pos:end="681:43"><expr pos:start="681:25" pos:end="681:42"><name pos:start="681:25" pos:end="681:28">list</name><operator pos:start="681:29" pos:end="681:29">&lt;</operator><name pos:start="681:30" pos:end="681:42"><name pos:start="681:30" pos:end="681:30">h</name><operator pos:start="681:31" pos:end="681:32">-&gt;</operator><name pos:start="681:33" pos:end="681:42">list_count</name></name></expr>;</condition> <incr pos:start="681:45" pos:end="681:50"><expr pos:start="681:45" pos:end="681:50"><name pos:start="681:45" pos:end="681:48">list</name><operator pos:start="681:49" pos:end="681:50">++</operator></expr></incr>)</control><block pos:start="681:52" pos:end="709:13">{<block_content pos:start="683:17" pos:end="707:17">

                <for pos:start="683:17" pos:end="707:17">for<control pos:start="683:20" pos:end="683:34">(<init pos:start="683:21" pos:end="683:24"><expr pos:start="683:21" pos:end="683:23"><name pos:start="683:21" pos:end="683:21">i</name><operator pos:start="683:22" pos:end="683:22">=</operator><literal type="number" pos:start="683:23" pos:end="683:23">0</literal></expr>;</init> <condition pos:start="683:26" pos:end="683:29"><expr pos:start="683:26" pos:end="683:28"><name pos:start="683:26" pos:end="683:26">i</name><operator pos:start="683:27" pos:end="683:27">&lt;</operator><literal type="number" pos:start="683:28" pos:end="683:28">2</literal></expr>;</condition> <incr pos:start="683:31" pos:end="683:33"><expr pos:start="683:31" pos:end="683:33"><name pos:start="683:31" pos:end="683:31">i</name><operator pos:start="683:32" pos:end="683:33">++</operator></expr></incr>)</control><block pos:start="683:35" pos:end="707:17">{<block_content pos:start="685:21" pos:end="705:89">

                    <decl_stmt pos:start="685:21" pos:end="685:37"><decl pos:start="685:21" pos:end="685:36"><type pos:start="685:21" pos:end="685:32"><name pos:start="685:21" pos:end="685:28">unsigned</name> <name pos:start="685:30" pos:end="685:32">int</name></type> <name pos:start="685:34" pos:end="685:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="687:21" pos:end="703:30"><if pos:start="687:21" pos:end="701:21">if<condition pos:start="687:23" pos:end="687:48">(<expr pos:start="687:24" pos:end="687:47"><call pos:start="687:24" pos:end="687:47"><name pos:start="687:24" pos:end="687:29">IS_DIR</name><argument_list pos:start="687:30" pos:end="687:47">(<argument pos:start="687:31" pos:end="687:37"><expr pos:start="687:31" pos:end="687:37"><name pos:start="687:31" pos:end="687:37">mb_type</name></expr></argument>, <argument pos:start="687:40" pos:end="687:40"><expr pos:start="687:40" pos:end="687:40"><name pos:start="687:40" pos:end="687:40">i</name></expr></argument>, <argument pos:start="687:43" pos:end="687:46"><expr pos:start="687:43" pos:end="687:46"><name pos:start="687:43" pos:end="687:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="687:49" pos:end="701:21">{<block_content pos:start="689:25" pos:end="699:47">

                        <expr_stmt pos:start="689:25" pos:end="689:103"><expr pos:start="689:25" pos:end="689:102"><call pos:start="689:25" pos:end="689:102"><name pos:start="689:25" pos:end="689:40">pred_8x16_motion</name><argument_list pos:start="689:41" pos:end="689:102">(<argument pos:start="689:42" pos:end="689:42"><expr pos:start="689:42" pos:end="689:42"><name pos:start="689:42" pos:end="689:42">h</name></expr></argument>, <argument pos:start="689:45" pos:end="689:47"><expr pos:start="689:45" pos:end="689:47"><name pos:start="689:45" pos:end="689:45">i</name><operator pos:start="689:46" pos:end="689:46">*</operator><literal type="number" pos:start="689:47" pos:end="689:47">4</literal></expr></argument>, <argument pos:start="689:50" pos:end="689:53"><expr pos:start="689:50" pos:end="689:53"><name pos:start="689:50" pos:end="689:53">list</name></expr></argument>, <argument pos:start="689:56" pos:end="689:91"><expr pos:start="689:56" pos:end="689:91"><name pos:start="689:56" pos:end="689:91"><name pos:start="689:56" pos:end="689:56">h</name><operator pos:start="689:57" pos:end="689:58">-&gt;</operator><name pos:start="689:59" pos:end="689:67">ref_cache</name><index pos:start="689:68" pos:end="689:73">[<expr pos:start="689:69" pos:end="689:72"><name pos:start="689:69" pos:end="689:72">list</name></expr>]</index><index pos:start="689:74" pos:end="689:91">[ <expr pos:start="689:76" pos:end="689:89"><name pos:start="689:76" pos:end="689:83"><name pos:start="689:76" pos:end="689:80">scan8</name><index pos:start="689:81" pos:end="689:83">[<expr pos:start="689:82" pos:end="689:82"><literal type="number" pos:start="689:82" pos:end="689:82">0</literal></expr>]</index></name> <operator pos:start="689:85" pos:end="689:85">+</operator> <literal type="number" pos:start="689:87" pos:end="689:87">2</literal><operator pos:start="689:88" pos:end="689:88">*</operator><name pos:start="689:89" pos:end="689:89">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="689:94" pos:end="689:96"><expr pos:start="689:94" pos:end="689:96"><operator pos:start="689:94" pos:end="689:94">&amp;</operator><name pos:start="689:95" pos:end="689:96">mx</name></expr></argument>, <argument pos:start="689:99" pos:end="689:101"><expr pos:start="689:99" pos:end="689:101"><operator pos:start="689:99" pos:end="689:99">&amp;</operator><name pos:start="689:100" pos:end="689:101">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="691:25" pos:end="691:52"><expr pos:start="691:25" pos:end="691:51"><name pos:start="691:25" pos:end="691:26">mx</name> <operator pos:start="691:28" pos:end="691:29">+=</operator> <call pos:start="691:31" pos:end="691:51"><name pos:start="691:31" pos:end="691:43">get_se_golomb</name><argument_list pos:start="691:44" pos:end="691:51">(<argument pos:start="691:45" pos:end="691:50"><expr pos:start="691:45" pos:end="691:50"><operator pos:start="691:45" pos:end="691:45">&amp;</operator><name pos:start="691:46" pos:end="691:50"><name pos:start="691:46" pos:end="691:46">s</name><operator pos:start="691:47" pos:end="691:48">-&gt;</operator><name pos:start="691:49" pos:end="691:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="693:25" pos:end="693:52"><expr pos:start="693:25" pos:end="693:51"><name pos:start="693:25" pos:end="693:26">my</name> <operator pos:start="693:28" pos:end="693:29">+=</operator> <call pos:start="693:31" pos:end="693:51"><name pos:start="693:31" pos:end="693:43">get_se_golomb</name><argument_list pos:start="693:44" pos:end="693:51">(<argument pos:start="693:45" pos:end="693:50"><expr pos:start="693:45" pos:end="693:50"><operator pos:start="693:45" pos:end="693:45">&amp;</operator><name pos:start="693:46" pos:end="693:50"><name pos:start="693:46" pos:end="693:46">s</name><operator pos:start="693:47" pos:end="693:48">-&gt;</operator><name pos:start="693:49" pos:end="693:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="695:25" pos:end="695:70"><expr pos:start="695:25" pos:end="695:69"><call pos:start="695:25" pos:end="695:69"><name pos:start="695:25" pos:end="695:31">tprintf</name><argument_list pos:start="695:32" pos:end="695:69">(<argument pos:start="695:33" pos:end="695:40"><expr pos:start="695:33" pos:end="695:40"><name pos:start="695:33" pos:end="695:40"><name pos:start="695:33" pos:end="695:33">s</name><operator pos:start="695:34" pos:end="695:35">-&gt;</operator><name pos:start="695:36" pos:end="695:40">avctx</name></name></expr></argument>, <argument pos:start="695:43" pos:end="695:60"><expr pos:start="695:43" pos:end="695:60"><literal type="string" pos:start="695:43" pos:end="695:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="695:63" pos:end="695:64"><expr pos:start="695:63" pos:end="695:64"><name pos:start="695:63" pos:end="695:64">mx</name></expr></argument>, <argument pos:start="695:67" pos:end="695:68"><expr pos:start="695:67" pos:end="695:68"><name pos:start="695:67" pos:end="695:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="699:25" pos:end="699:47"><expr pos:start="699:25" pos:end="699:46"><name pos:start="699:25" pos:end="699:27">val</name><operator pos:start="699:28" pos:end="699:28">=</operator> <call pos:start="699:30" pos:end="699:46"><name pos:start="699:30" pos:end="699:39">pack16to32</name><argument_list pos:start="699:40" pos:end="699:46">(<argument pos:start="699:41" pos:end="699:42"><expr pos:start="699:41" pos:end="699:42"><name pos:start="699:41" pos:end="699:42">mx</name></expr></argument>,<argument pos:start="699:44" pos:end="699:45"><expr pos:start="699:44" pos:end="699:45"><name pos:start="699:44" pos:end="699:45">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="701:22" pos:end="703:30">else<block type="pseudo" pos:start="703:25" pos:end="703:30"><block_content pos:start="703:25" pos:end="703:30">

                        <expr_stmt pos:start="703:25" pos:end="703:30"><expr pos:start="703:25" pos:end="703:29"><name pos:start="703:25" pos:end="703:27">val</name><operator pos:start="703:28" pos:end="703:28">=</operator><literal type="number" pos:start="703:29" pos:end="703:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="705:21" pos:end="705:89"><expr pos:start="705:21" pos:end="705:88"><call pos:start="705:21" pos:end="705:88"><name pos:start="705:21" pos:end="705:34">fill_rectangle</name><argument_list pos:start="705:35" pos:end="705:88">(<argument pos:start="705:36" pos:end="705:70"><expr pos:start="705:36" pos:end="705:70"><name pos:start="705:36" pos:end="705:70"><name pos:start="705:36" pos:end="705:36">h</name><operator pos:start="705:37" pos:end="705:38">-&gt;</operator><name pos:start="705:39" pos:end="705:46">mv_cache</name><index pos:start="705:47" pos:end="705:52">[<expr pos:start="705:48" pos:end="705:51"><name pos:start="705:48" pos:end="705:51">list</name></expr>]</index><index pos:start="705:53" pos:end="705:70">[ <expr pos:start="705:55" pos:end="705:68"><name pos:start="705:55" pos:end="705:62"><name pos:start="705:55" pos:end="705:59">scan8</name><index pos:start="705:60" pos:end="705:62">[<expr pos:start="705:61" pos:end="705:61"><literal type="number" pos:start="705:61" pos:end="705:61">0</literal></expr>]</index></name> <operator pos:start="705:64" pos:end="705:64">+</operator> <literal type="number" pos:start="705:66" pos:end="705:66">2</literal><operator pos:start="705:67" pos:end="705:67">*</operator><name pos:start="705:68" pos:end="705:68">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="705:73" pos:end="705:73"><expr pos:start="705:73" pos:end="705:73"><literal type="number" pos:start="705:73" pos:end="705:73">2</literal></expr></argument>, <argument pos:start="705:76" pos:end="705:76"><expr pos:start="705:76" pos:end="705:76"><literal type="number" pos:start="705:76" pos:end="705:76">4</literal></expr></argument>, <argument pos:start="705:79" pos:end="705:79"><expr pos:start="705:79" pos:end="705:79"><literal type="number" pos:start="705:79" pos:end="705:79">8</literal></expr></argument>, <argument pos:start="705:82" pos:end="705:84"><expr pos:start="705:82" pos:end="705:84"><name pos:start="705:82" pos:end="705:84">val</name></expr></argument>, <argument pos:start="705:87" pos:end="705:87"><expr pos:start="705:87" pos:end="705:87"><literal type="number" pos:start="705:87" pos:end="705:87">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="717:5" pos:end="719:38"><if pos:start="717:5" pos:end="719:38">if<condition pos:start="717:7" pos:end="717:25">(<expr pos:start="717:8" pos:end="717:24"><call pos:start="717:8" pos:end="717:24"><name pos:start="717:8" pos:end="717:15">IS_INTER</name><argument_list pos:start="717:16" pos:end="717:24">(<argument pos:start="717:17" pos:end="717:23"><expr pos:start="717:17" pos:end="717:23"><name pos:start="717:17" pos:end="717:23">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="719:9" pos:end="719:38"><block_content pos:start="719:9" pos:end="719:38">

        <expr_stmt pos:start="719:9" pos:end="719:38"><expr pos:start="719:9" pos:end="719:37"><call pos:start="719:9" pos:end="719:37"><name pos:start="719:9" pos:end="719:25">write_back_motion</name><argument_list pos:start="719:26" pos:end="719:37">(<argument pos:start="719:27" pos:end="719:27"><expr pos:start="719:27" pos:end="719:27"><name pos:start="719:27" pos:end="719:27">h</name></expr></argument>, <argument pos:start="719:30" pos:end="719:36"><expr pos:start="719:30" pos:end="719:36"><name pos:start="719:30" pos:end="719:36">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="723:5" pos:end="751:5"><if pos:start="723:5" pos:end="751:5">if<condition pos:start="723:7" pos:end="723:31">(<expr pos:start="723:8" pos:end="723:30"><operator pos:start="723:8" pos:end="723:8">!</operator><call pos:start="723:9" pos:end="723:30"><name pos:start="723:9" pos:end="723:21">IS_INTRA16x16</name><argument_list pos:start="723:22" pos:end="723:30">(<argument pos:start="723:23" pos:end="723:29"><expr pos:start="723:23" pos:end="723:29"><name pos:start="723:23" pos:end="723:29">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="723:32" pos:end="751:5">{<block_content pos:start="725:9" pos:end="749:9">

        <expr_stmt pos:start="725:9" pos:end="725:35"><expr pos:start="725:9" pos:end="725:34"><name pos:start="725:9" pos:end="725:11">cbp</name><operator pos:start="725:12" pos:end="725:12">=</operator> <call pos:start="725:14" pos:end="725:34"><name pos:start="725:14" pos:end="725:26">get_ue_golomb</name><argument_list pos:start="725:27" pos:end="725:34">(<argument pos:start="725:28" pos:end="725:33"><expr pos:start="725:28" pos:end="725:33"><operator pos:start="725:28" pos:end="725:28">&amp;</operator><name pos:start="725:29" pos:end="725:33"><name pos:start="725:29" pos:end="725:29">s</name><operator pos:start="725:30" pos:end="725:31">-&gt;</operator><name pos:start="725:32" pos:end="725:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="727:9" pos:end="733:9"><if pos:start="727:9" pos:end="733:9">if<condition pos:start="727:11" pos:end="727:20">(<expr pos:start="727:12" pos:end="727:19"><name pos:start="727:12" pos:end="727:14">cbp</name> <operator pos:start="727:16" pos:end="727:16">&gt;</operator> <literal type="number" pos:start="727:18" pos:end="727:19">47</literal></expr>)</condition><block pos:start="727:21" pos:end="733:9">{<block_content pos:start="729:13" pos:end="731:22">

            <expr_stmt pos:start="729:13" pos:end="729:101"><expr pos:start="729:13" pos:end="729:100"><call pos:start="729:13" pos:end="729:100"><name pos:start="729:13" pos:end="729:18">av_log</name><argument_list pos:start="729:19" pos:end="729:100">(<argument pos:start="729:20" pos:end="729:29"><expr pos:start="729:20" pos:end="729:29"><name pos:start="729:20" pos:end="729:29"><name pos:start="729:20" pos:end="729:20">h</name><operator pos:start="729:21" pos:end="729:22">-&gt;</operator><name pos:start="729:23" pos:end="729:23">s</name><operator pos:start="729:24" pos:end="729:24">.</operator><name pos:start="729:25" pos:end="729:29">avctx</name></name></expr></argument>, <argument pos:start="729:32" pos:end="729:43"><expr pos:start="729:32" pos:end="729:43"><name pos:start="729:32" pos:end="729:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="729:46" pos:end="729:76"><expr pos:start="729:46" pos:end="729:76"><literal type="string" pos:start="729:46" pos:end="729:76">"cbp too large (%u) at %d %d\n"</literal></expr></argument>, <argument pos:start="729:79" pos:end="729:81"><expr pos:start="729:79" pos:end="729:81"><name pos:start="729:79" pos:end="729:81">cbp</name></expr></argument>, <argument pos:start="729:84" pos:end="729:90"><expr pos:start="729:84" pos:end="729:90"><name pos:start="729:84" pos:end="729:90"><name pos:start="729:84" pos:end="729:84">s</name><operator pos:start="729:85" pos:end="729:86">-&gt;</operator><name pos:start="729:87" pos:end="729:90">mb_x</name></name></expr></argument>, <argument pos:start="729:93" pos:end="729:99"><expr pos:start="729:93" pos:end="729:99"><name pos:start="729:93" pos:end="729:99"><name pos:start="729:93" pos:end="729:93">s</name><operator pos:start="729:94" pos:end="729:95">-&gt;</operator><name pos:start="729:96" pos:end="729:99">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="731:13" pos:end="731:22">return <expr pos:start="731:20" pos:end="731:21"><operator pos:start="731:20" pos:end="731:20">-</operator><literal type="number" pos:start="731:21" pos:end="731:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="737:9" pos:end="749:9"><if pos:start="737:9" pos:end="743:9">if<condition pos:start="737:11" pos:end="737:18">(<expr pos:start="737:12" pos:end="737:17"><name pos:start="737:12" pos:end="737:17">CHROMA</name></expr>)</condition><block pos:start="737:19" pos:end="743:9">{<block_content pos:start="739:13" pos:end="741:70">

            <if_stmt pos:start="739:13" pos:end="741:70"><if pos:start="739:13" pos:end="739:70">if<condition pos:start="739:15" pos:end="739:36">(<expr pos:start="739:16" pos:end="739:35"><call pos:start="739:16" pos:end="739:35"><name pos:start="739:16" pos:end="739:26">IS_INTRA4x4</name><argument_list pos:start="739:27" pos:end="739:35">(<argument pos:start="739:28" pos:end="739:34"><expr pos:start="739:28" pos:end="739:34"><name pos:start="739:28" pos:end="739:34">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="739:38" pos:end="739:70"><block_content pos:start="739:38" pos:end="739:70"> <expr_stmt pos:start="739:38" pos:end="739:70"><expr pos:start="739:38" pos:end="739:69"><name pos:start="739:38" pos:end="739:40">cbp</name><operator pos:start="739:41" pos:end="739:41">=</operator> <name pos:start="739:43" pos:end="739:69"><name pos:start="739:43" pos:end="739:64">golomb_to_intra4x4_cbp</name><index pos:start="739:65" pos:end="739:69">[<expr pos:start="739:66" pos:end="739:68"><name pos:start="739:66" pos:end="739:68">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="741:13" pos:end="741:70">else<block type="pseudo" pos:start="741:38" pos:end="741:70"><block_content pos:start="741:38" pos:end="741:70">                     <expr_stmt pos:start="741:38" pos:end="741:70"><expr pos:start="741:38" pos:end="741:69"><name pos:start="741:38" pos:end="741:40">cbp</name><operator pos:start="741:41" pos:end="741:41">=</operator> <name pos:start="741:43" pos:end="741:69"><name pos:start="741:43" pos:end="741:61">golomb_to_inter_cbp</name>   <index pos:start="741:65" pos:end="741:69">[<expr pos:start="741:66" pos:end="741:68"><name pos:start="741:66" pos:end="741:68">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if><else pos:start="743:10" pos:end="749:9">else<block pos:start="743:14" pos:end="749:9">{<block_content pos:start="745:13" pos:end="747:72">

            <if_stmt pos:start="745:13" pos:end="747:72"><if pos:start="745:13" pos:end="745:75">if<condition pos:start="745:15" pos:end="745:36">(<expr pos:start="745:16" pos:end="745:35"><call pos:start="745:16" pos:end="745:35"><name pos:start="745:16" pos:end="745:26">IS_INTRA4x4</name><argument_list pos:start="745:27" pos:end="745:35">(<argument pos:start="745:28" pos:end="745:34"><expr pos:start="745:28" pos:end="745:34"><name pos:start="745:28" pos:end="745:34">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="745:38" pos:end="745:75"><block_content pos:start="745:38" pos:end="745:75"> <expr_stmt pos:start="745:38" pos:end="745:75"><expr pos:start="745:38" pos:end="745:74"><name pos:start="745:38" pos:end="745:40">cbp</name><operator pos:start="745:41" pos:end="745:41">=</operator> <name pos:start="745:43" pos:end="745:74"><name pos:start="745:43" pos:end="745:69">golomb_to_intra4x4_cbp_gray</name><index pos:start="745:70" pos:end="745:74">[<expr pos:start="745:71" pos:end="745:73"><name pos:start="745:71" pos:end="745:73">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="747:13" pos:end="747:72">else<block type="pseudo" pos:start="747:38" pos:end="747:72"><block_content pos:start="747:38" pos:end="747:72">                     <expr_stmt pos:start="747:38" pos:end="747:72"><expr pos:start="747:38" pos:end="747:71"><name pos:start="747:38" pos:end="747:40">cbp</name><operator pos:start="747:41" pos:end="747:41">=</operator> <name pos:start="747:43" pos:end="747:71"><name pos:start="747:43" pos:end="747:66">golomb_to_inter_cbp_gray</name><index pos:start="747:67" pos:end="747:71">[<expr pos:start="747:68" pos:end="747:70"><name pos:start="747:68" pos:end="747:70">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="753:5" pos:end="753:17"><expr pos:start="753:5" pos:end="753:16"><name pos:start="753:5" pos:end="753:10"><name pos:start="753:5" pos:end="753:5">h</name><operator pos:start="753:6" pos:end="753:7">-&gt;</operator><name pos:start="753:8" pos:end="753:10">cbp</name></name> <operator pos:start="753:12" pos:end="753:12">=</operator> <name pos:start="753:14" pos:end="753:16">cbp</name></expr>;</expr_stmt>



    <if_stmt pos:start="757:5" pos:end="767:5"><if pos:start="757:5" pos:end="767:5">if<condition pos:start="757:7" pos:end="757:56">(<expr pos:start="757:8" pos:end="757:55"><name pos:start="757:8" pos:end="757:21">dct8x8_allowed</name> <operator pos:start="757:23" pos:end="757:24">&amp;&amp;</operator> <operator pos:start="757:26" pos:end="757:26">(</operator><name pos:start="757:27" pos:end="757:29">cbp</name><operator pos:start="757:30" pos:end="757:30">&amp;</operator><literal type="number" pos:start="757:31" pos:end="757:32">15</literal><operator pos:start="757:33" pos:end="757:33">)</operator> <operator pos:start="757:35" pos:end="757:36">&amp;&amp;</operator> <operator pos:start="757:38" pos:end="757:38">!</operator><call pos:start="757:39" pos:end="757:55"><name pos:start="757:39" pos:end="757:46">IS_INTRA</name><argument_list pos:start="757:47" pos:end="757:55">(<argument pos:start="757:48" pos:end="757:54"><expr pos:start="757:48" pos:end="757:54"><name pos:start="757:48" pos:end="757:54">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="757:57" pos:end="767:5">{<block_content pos:start="759:9" pos:end="765:9">

        <if_stmt pos:start="759:9" pos:end="765:9"><if pos:start="759:9" pos:end="765:9">if<condition pos:start="759:11" pos:end="759:29">(<expr pos:start="759:12" pos:end="759:28"><call pos:start="759:12" pos:end="759:28"><name pos:start="759:12" pos:end="759:20">get_bits1</name><argument_list pos:start="759:21" pos:end="759:28">(<argument pos:start="759:22" pos:end="759:27"><expr pos:start="759:22" pos:end="759:27"><operator pos:start="759:22" pos:end="759:22">&amp;</operator><name pos:start="759:23" pos:end="759:27"><name pos:start="759:23" pos:end="759:23">s</name><operator pos:start="759:24" pos:end="759:25">-&gt;</operator><name pos:start="759:26" pos:end="759:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="759:30" pos:end="765:9">{<block_content pos:start="761:13" pos:end="763:37">

            <expr_stmt pos:start="761:13" pos:end="761:38"><expr pos:start="761:13" pos:end="761:37"><name pos:start="761:13" pos:end="761:19">mb_type</name> <operator pos:start="761:21" pos:end="761:22">|=</operator> <name pos:start="761:24" pos:end="761:37">MB_TYPE_8x8DCT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="763:13" pos:end="763:37"><expr pos:start="763:13" pos:end="763:36"><name pos:start="763:13" pos:end="763:31"><name pos:start="763:13" pos:end="763:13">h</name><operator pos:start="763:14" pos:end="763:15">-&gt;</operator><name pos:start="763:16" pos:end="763:24">cbp_table</name><index pos:start="763:25" pos:end="763:31">[<expr pos:start="763:26" pos:end="763:30"><name pos:start="763:26" pos:end="763:30">mb_xy</name></expr>]</index></name><operator pos:start="763:32" pos:end="763:32">=</operator> <name pos:start="763:34" pos:end="763:36">cbp</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="769:5" pos:end="769:47"><expr pos:start="769:5" pos:end="769:46"><name pos:start="769:5" pos:end="769:37"><name pos:start="769:5" pos:end="769:5">s</name><operator pos:start="769:6" pos:end="769:7">-&gt;</operator><name pos:start="769:8" pos:end="769:22">current_picture</name><operator pos:start="769:23" pos:end="769:23">.</operator><name pos:start="769:24" pos:end="769:30">mb_type</name><index pos:start="769:31" pos:end="769:37">[<expr pos:start="769:32" pos:end="769:36"><name pos:start="769:32" pos:end="769:36">mb_xy</name></expr>]</index></name><operator pos:start="769:38" pos:end="769:38">=</operator> <name pos:start="769:40" pos:end="769:46">mb_type</name></expr>;</expr_stmt>



    <if_stmt pos:start="773:5" pos:end="989:5"><if pos:start="773:5" pos:end="979:5">if<condition pos:start="773:7" pos:end="773:37">(<expr pos:start="773:8" pos:end="773:36"><name pos:start="773:8" pos:end="773:10">cbp</name> <operator pos:start="773:12" pos:end="773:13">||</operator> <call pos:start="773:15" pos:end="773:36"><name pos:start="773:15" pos:end="773:27">IS_INTRA16x16</name><argument_list pos:start="773:28" pos:end="773:36">(<argument pos:start="773:29" pos:end="773:35"><expr pos:start="773:29" pos:end="773:35"><name pos:start="773:29" pos:end="773:35">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="773:38" pos:end="979:5">{<block_content pos:start="775:9" pos:end="977:9">

        <decl_stmt pos:start="775:9" pos:end="775:35"><decl pos:start="775:9" pos:end="775:16"><type pos:start="775:9" pos:end="775:11"><name pos:start="775:9" pos:end="775:11">int</name></type> <name pos:start="775:13" pos:end="775:16">i8x8</name></decl>, <decl pos:start="775:19" pos:end="775:22"><type ref="prev" pos:start="775:9" pos:end="775:11"/><name pos:start="775:19" pos:end="775:22">i4x4</name></decl>, <decl pos:start="775:25" pos:end="775:34"><type ref="prev" pos:start="775:9" pos:end="775:11"/><name pos:start="775:25" pos:end="775:34">chroma_idx</name></decl>;</decl_stmt>

        <decl_stmt pos:start="777:9" pos:end="777:19"><decl pos:start="777:9" pos:end="777:18"><type pos:start="777:9" pos:end="777:11"><name pos:start="777:9" pos:end="777:11">int</name></type> <name pos:start="777:13" pos:end="777:18">dquant</name></decl>;</decl_stmt>

        <decl_stmt pos:start="779:9" pos:end="779:81"><decl pos:start="779:9" pos:end="779:80"><type pos:start="779:9" pos:end="779:23"><name pos:start="779:9" pos:end="779:21">GetBitContext</name> <modifier pos:start="779:23" pos:end="779:23">*</modifier></type><name pos:start="779:24" pos:end="779:25">gb</name><init pos:start="779:26" pos:end="779:80">= <expr pos:start="779:28" pos:end="779:80"><ternary pos:start="779:28" pos:end="779:80"><condition pos:start="779:28" pos:end="779:46"><expr pos:start="779:28" pos:end="779:44"><call pos:start="779:28" pos:end="779:44"><name pos:start="779:28" pos:end="779:35">IS_INTRA</name><argument_list pos:start="779:36" pos:end="779:44">(<argument pos:start="779:37" pos:end="779:43"><expr pos:start="779:37" pos:end="779:43"><name pos:start="779:37" pos:end="779:43">mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="779:48" pos:end="779:62"> <expr pos:start="779:48" pos:end="779:62"><name pos:start="779:48" pos:end="779:62"><name pos:start="779:48" pos:end="779:48">h</name><operator pos:start="779:49" pos:end="779:50">-&gt;</operator><name pos:start="779:51" pos:end="779:62">intra_gb_ptr</name></name></expr> </then><else pos:start="779:64" pos:end="779:80">: <expr pos:start="779:66" pos:end="779:80"><name pos:start="779:66" pos:end="779:80"><name pos:start="779:66" pos:end="779:66">h</name><operator pos:start="779:67" pos:end="779:68">-&gt;</operator><name pos:start="779:69" pos:end="779:80">inter_gb_ptr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="781:9" pos:end="781:48"><decl pos:start="781:9" pos:end="781:27"><type pos:start="781:9" pos:end="781:23"><specifier pos:start="781:9" pos:end="781:13">const</specifier> <name pos:start="781:15" pos:end="781:21">uint8_t</name> <modifier pos:start="781:23" pos:end="781:23">*</modifier></type><name pos:start="781:24" pos:end="781:27">scan</name></decl>, <decl pos:start="781:30" pos:end="781:37"><type ref="prev" pos:start="781:9" pos:end="781:23"><modifier pos:start="781:30" pos:end="781:30">*</modifier></type><name pos:start="781:31" pos:end="781:37">scan8x8</name></decl>, <decl pos:start="781:40" pos:end="781:47"><type ref="prev" pos:start="781:9" pos:end="781:23"><modifier pos:start="781:40" pos:end="781:40">*</modifier></type><name pos:start="781:41" pos:end="781:47">dc_scan</name></decl>;</decl_stmt>



<comment type="line" pos:start="785:1" pos:end="785:39">//        fill_non_zero_count_cache(h);</comment>



        <if_stmt pos:start="789:9" pos:end="805:9"><if pos:start="789:9" pos:end="797:9">if<condition pos:start="789:11" pos:end="789:34">(<expr pos:start="789:12" pos:end="789:33"><call pos:start="789:12" pos:end="789:33"><name pos:start="789:12" pos:end="789:24">IS_INTERLACED</name><argument_list pos:start="789:25" pos:end="789:33">(<argument pos:start="789:26" pos:end="789:32"><expr pos:start="789:26" pos:end="789:32"><name pos:start="789:26" pos:end="789:32">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="789:35" pos:end="797:9">{<block_content pos:start="791:13" pos:end="795:40">

            <expr_stmt pos:start="791:13" pos:end="791:84"><expr pos:start="791:13" pos:end="791:83"><name pos:start="791:13" pos:end="791:19">scan8x8</name><operator pos:start="791:20" pos:end="791:20">=</operator> <ternary pos:start="791:22" pos:end="791:83"><condition pos:start="791:22" pos:end="791:32"><expr pos:start="791:22" pos:end="791:30"><name pos:start="791:22" pos:end="791:30"><name pos:start="791:22" pos:end="791:22">s</name><operator pos:start="791:23" pos:end="791:24">-&gt;</operator><name pos:start="791:25" pos:end="791:30">qscale</name></name></expr> ?</condition><then pos:start="791:34" pos:end="791:55"> <expr pos:start="791:34" pos:end="791:55"><name pos:start="791:34" pos:end="791:55"><name pos:start="791:34" pos:end="791:34">h</name><operator pos:start="791:35" pos:end="791:36">-&gt;</operator><name pos:start="791:37" pos:end="791:55">field_scan8x8_cavlc</name></name></expr> </then><else pos:start="791:57" pos:end="791:83">: <expr pos:start="791:59" pos:end="791:83"><name pos:start="791:59" pos:end="791:83"><name pos:start="791:59" pos:end="791:59">h</name><operator pos:start="791:60" pos:end="791:61">-&gt;</operator><name pos:start="791:62" pos:end="791:83">field_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="793:13" pos:end="793:63"><expr pos:start="793:13" pos:end="793:62"><name pos:start="793:13" pos:end="793:16">scan</name><operator pos:start="793:17" pos:end="793:17">=</operator> <ternary pos:start="793:19" pos:end="793:62"><condition pos:start="793:19" pos:end="793:29"><expr pos:start="793:19" pos:end="793:27"><name pos:start="793:19" pos:end="793:27"><name pos:start="793:19" pos:end="793:19">s</name><operator pos:start="793:20" pos:end="793:21">-&gt;</operator><name pos:start="793:22" pos:end="793:27">qscale</name></name></expr> ?</condition><then pos:start="793:31" pos:end="793:43"> <expr pos:start="793:31" pos:end="793:43"><name pos:start="793:31" pos:end="793:43"><name pos:start="793:31" pos:end="793:31">h</name><operator pos:start="793:32" pos:end="793:33">-&gt;</operator><name pos:start="793:34" pos:end="793:43">field_scan</name></name></expr> </then><else pos:start="793:45" pos:end="793:62">: <expr pos:start="793:47" pos:end="793:62"><name pos:start="793:47" pos:end="793:62"><name pos:start="793:47" pos:end="793:47">h</name><operator pos:start="793:48" pos:end="793:49">-&gt;</operator><name pos:start="793:50" pos:end="793:62">field_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="795:13" pos:end="795:40"><expr pos:start="795:13" pos:end="795:39"><name pos:start="795:13" pos:end="795:19">dc_scan</name><operator pos:start="795:20" pos:end="795:20">=</operator> <name pos:start="795:22" pos:end="795:39">luma_dc_field_scan</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="797:10" pos:end="805:9">else<block pos:start="797:14" pos:end="805:9">{<block_content pos:start="799:13" pos:end="803:41">

            <expr_stmt pos:start="799:13" pos:end="799:86"><expr pos:start="799:13" pos:end="799:85"><name pos:start="799:13" pos:end="799:19">scan8x8</name><operator pos:start="799:20" pos:end="799:20">=</operator> <ternary pos:start="799:22" pos:end="799:85"><condition pos:start="799:22" pos:end="799:32"><expr pos:start="799:22" pos:end="799:30"><name pos:start="799:22" pos:end="799:30"><name pos:start="799:22" pos:end="799:22">s</name><operator pos:start="799:23" pos:end="799:24">-&gt;</operator><name pos:start="799:25" pos:end="799:30">qscale</name></name></expr> ?</condition><then pos:start="799:34" pos:end="799:56"> <expr pos:start="799:34" pos:end="799:56"><name pos:start="799:34" pos:end="799:56"><name pos:start="799:34" pos:end="799:34">h</name><operator pos:start="799:35" pos:end="799:36">-&gt;</operator><name pos:start="799:37" pos:end="799:56">zigzag_scan8x8_cavlc</name></name></expr> </then><else pos:start="799:58" pos:end="799:85">: <expr pos:start="799:60" pos:end="799:85"><name pos:start="799:60" pos:end="799:85"><name pos:start="799:60" pos:end="799:60">h</name><operator pos:start="799:61" pos:end="799:62">-&gt;</operator><name pos:start="799:63" pos:end="799:85">zigzag_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="801:13" pos:end="801:65"><expr pos:start="801:13" pos:end="801:64"><name pos:start="801:13" pos:end="801:16">scan</name><operator pos:start="801:17" pos:end="801:17">=</operator> <ternary pos:start="801:19" pos:end="801:64"><condition pos:start="801:19" pos:end="801:29"><expr pos:start="801:19" pos:end="801:27"><name pos:start="801:19" pos:end="801:27"><name pos:start="801:19" pos:end="801:19">s</name><operator pos:start="801:20" pos:end="801:21">-&gt;</operator><name pos:start="801:22" pos:end="801:27">qscale</name></name></expr> ?</condition><then pos:start="801:31" pos:end="801:44"> <expr pos:start="801:31" pos:end="801:44"><name pos:start="801:31" pos:end="801:44"><name pos:start="801:31" pos:end="801:31">h</name><operator pos:start="801:32" pos:end="801:33">-&gt;</operator><name pos:start="801:34" pos:end="801:44">zigzag_scan</name></name></expr> </then><else pos:start="801:46" pos:end="801:64">: <expr pos:start="801:48" pos:end="801:64"><name pos:start="801:48" pos:end="801:64"><name pos:start="801:48" pos:end="801:48">h</name><operator pos:start="801:49" pos:end="801:50">-&gt;</operator><name pos:start="801:51" pos:end="801:64">zigzag_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="803:13" pos:end="803:41"><expr pos:start="803:13" pos:end="803:40"><name pos:start="803:13" pos:end="803:19">dc_scan</name><operator pos:start="803:20" pos:end="803:20">=</operator> <name pos:start="803:22" pos:end="803:40">luma_dc_zigzag_scan</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="809:9" pos:end="809:38"><expr pos:start="809:9" pos:end="809:37"><name pos:start="809:9" pos:end="809:14">dquant</name><operator pos:start="809:15" pos:end="809:15">=</operator> <call pos:start="809:17" pos:end="809:37"><name pos:start="809:17" pos:end="809:29">get_se_golomb</name><argument_list pos:start="809:30" pos:end="809:37">(<argument pos:start="809:31" pos:end="809:36"><expr pos:start="809:31" pos:end="809:36"><operator pos:start="809:31" pos:end="809:31">&amp;</operator><name pos:start="809:32" pos:end="809:36"><name pos:start="809:32" pos:end="809:32">s</name><operator pos:start="809:33" pos:end="809:34">-&gt;</operator><name pos:start="809:35" pos:end="809:36">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="813:9" pos:end="819:9"><if pos:start="813:9" pos:end="819:9">if<condition pos:start="813:11" pos:end="813:41">( <expr pos:start="813:13" pos:end="813:39"><name pos:start="813:13" pos:end="813:18">dquant</name> <operator pos:start="813:20" pos:end="813:20">&gt;</operator> <literal type="number" pos:start="813:22" pos:end="813:23">25</literal> <operator pos:start="813:25" pos:end="813:26">||</operator> <name pos:start="813:28" pos:end="813:33">dquant</name> <operator pos:start="813:35" pos:end="813:35">&lt;</operator> <operator pos:start="813:37" pos:end="813:37">-</operator><literal type="number" pos:start="813:38" pos:end="813:39">26</literal></expr> )</condition><block pos:start="813:42" pos:end="819:9">{<block_content pos:start="815:13" pos:end="817:22">

            <expr_stmt pos:start="815:13" pos:end="815:110"><expr pos:start="815:13" pos:end="815:109"><call pos:start="815:13" pos:end="815:109"><name pos:start="815:13" pos:end="815:18">av_log</name><argument_list pos:start="815:19" pos:end="815:109">(<argument pos:start="815:20" pos:end="815:29"><expr pos:start="815:20" pos:end="815:29"><name pos:start="815:20" pos:end="815:29"><name pos:start="815:20" pos:end="815:20">h</name><operator pos:start="815:21" pos:end="815:22">-&gt;</operator><name pos:start="815:23" pos:end="815:23">s</name><operator pos:start="815:24" pos:end="815:24">.</operator><name pos:start="815:25" pos:end="815:29">avctx</name></name></expr></argument>, <argument pos:start="815:32" pos:end="815:43"><expr pos:start="815:32" pos:end="815:43"><name pos:start="815:32" pos:end="815:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="815:46" pos:end="815:82"><expr pos:start="815:46" pos:end="815:82"><literal type="string" pos:start="815:46" pos:end="815:82">"dquant out of range (%d) at %d %d\n"</literal></expr></argument>, <argument pos:start="815:85" pos:end="815:90"><expr pos:start="815:85" pos:end="815:90"><name pos:start="815:85" pos:end="815:90">dquant</name></expr></argument>, <argument pos:start="815:93" pos:end="815:99"><expr pos:start="815:93" pos:end="815:99"><name pos:start="815:93" pos:end="815:99"><name pos:start="815:93" pos:end="815:93">s</name><operator pos:start="815:94" pos:end="815:95">-&gt;</operator><name pos:start="815:96" pos:end="815:99">mb_x</name></name></expr></argument>, <argument pos:start="815:102" pos:end="815:108"><expr pos:start="815:102" pos:end="815:108"><name pos:start="815:102" pos:end="815:108"><name pos:start="815:102" pos:end="815:102">s</name><operator pos:start="815:103" pos:end="815:104">-&gt;</operator><name pos:start="815:105" pos:end="815:108">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="817:13" pos:end="817:22">return <expr pos:start="817:20" pos:end="817:21"><operator pos:start="817:20" pos:end="817:20">-</operator><literal type="number" pos:start="817:21" pos:end="817:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="823:9" pos:end="823:28"><expr pos:start="823:9" pos:end="823:27"><name pos:start="823:9" pos:end="823:17"><name pos:start="823:9" pos:end="823:9">s</name><operator pos:start="823:10" pos:end="823:11">-&gt;</operator><name pos:start="823:12" pos:end="823:17">qscale</name></name> <operator pos:start="823:19" pos:end="823:20">+=</operator> <name pos:start="823:22" pos:end="823:27">dquant</name></expr>;</expr_stmt>

        <if_stmt pos:start="825:9" pos:end="831:9"><if pos:start="825:9" pos:end="831:9">if<condition pos:start="825:11" pos:end="825:38">(<expr pos:start="825:12" pos:end="825:37"><operator pos:start="825:12" pos:end="825:12">(</operator><operator pos:start="825:13" pos:end="825:13">(</operator><name pos:start="825:14" pos:end="825:21">unsigned</name><operator pos:start="825:22" pos:end="825:22">)</operator><name pos:start="825:23" pos:end="825:31"><name pos:start="825:23" pos:end="825:23">s</name><operator pos:start="825:24" pos:end="825:25">-&gt;</operator><name pos:start="825:26" pos:end="825:31">qscale</name></name><operator pos:start="825:32" pos:end="825:32">)</operator> <operator pos:start="825:34" pos:end="825:34">&gt;</operator> <literal type="number" pos:start="825:36" pos:end="825:37">51</literal></expr>)</condition><block pos:start="825:39" pos:end="831:9">{<block_content pos:start="827:13" pos:end="829:43">

            <if_stmt pos:start="827:13" pos:end="829:43"><if pos:start="827:13" pos:end="827:43">if<condition pos:start="827:15" pos:end="827:27">(<expr pos:start="827:16" pos:end="827:26"><name pos:start="827:16" pos:end="827:24"><name pos:start="827:16" pos:end="827:16">s</name><operator pos:start="827:17" pos:end="827:18">-&gt;</operator><name pos:start="827:19" pos:end="827:24">qscale</name></name><operator pos:start="827:25" pos:end="827:25">&lt;</operator><literal type="number" pos:start="827:26" pos:end="827:26">0</literal></expr>)</condition><block type="pseudo" pos:start="827:29" pos:end="827:43"><block_content pos:start="827:29" pos:end="827:43"> <expr_stmt pos:start="827:29" pos:end="827:43"><expr pos:start="827:29" pos:end="827:42"><name pos:start="827:29" pos:end="827:37"><name pos:start="827:29" pos:end="827:29">s</name><operator pos:start="827:30" pos:end="827:31">-&gt;</operator><name pos:start="827:32" pos:end="827:37">qscale</name></name><operator pos:start="827:38" pos:end="827:39">+=</operator> <literal type="number" pos:start="827:41" pos:end="827:42">52</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="829:13" pos:end="829:43">else<block type="pseudo" pos:start="829:29" pos:end="829:43"><block_content pos:start="829:29" pos:end="829:43">            <expr_stmt pos:start="829:29" pos:end="829:43"><expr pos:start="829:29" pos:end="829:42"><name pos:start="829:29" pos:end="829:37"><name pos:start="829:29" pos:end="829:29">s</name><operator pos:start="829:30" pos:end="829:31">-&gt;</operator><name pos:start="829:32" pos:end="829:37">qscale</name></name><operator pos:start="829:38" pos:end="829:39">-=</operator> <literal type="number" pos:start="829:41" pos:end="829:42">52</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="835:9" pos:end="835:56"><expr pos:start="835:9" pos:end="835:55"><name pos:start="835:9" pos:end="835:23"><name pos:start="835:9" pos:end="835:9">h</name><operator pos:start="835:10" pos:end="835:11">-&gt;</operator><name pos:start="835:12" pos:end="835:20">chroma_qp</name><index pos:start="835:21" pos:end="835:23">[<expr pos:start="835:22" pos:end="835:22"><literal type="number" pos:start="835:22" pos:end="835:22">0</literal></expr>]</index></name><operator pos:start="835:24" pos:end="835:24">=</operator> <call pos:start="835:26" pos:end="835:55"><name pos:start="835:26" pos:end="835:38">get_chroma_qp</name><argument_list pos:start="835:39" pos:end="835:55">(<argument pos:start="835:40" pos:end="835:40"><expr pos:start="835:40" pos:end="835:40"><name pos:start="835:40" pos:end="835:40">h</name></expr></argument>, <argument pos:start="835:43" pos:end="835:43"><expr pos:start="835:43" pos:end="835:43"><literal type="number" pos:start="835:43" pos:end="835:43">0</literal></expr></argument>, <argument pos:start="835:46" pos:end="835:54"><expr pos:start="835:46" pos:end="835:54"><name pos:start="835:46" pos:end="835:54"><name pos:start="835:46" pos:end="835:46">s</name><operator pos:start="835:47" pos:end="835:48">-&gt;</operator><name pos:start="835:49" pos:end="835:54">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="837:9" pos:end="837:56"><expr pos:start="837:9" pos:end="837:55"><name pos:start="837:9" pos:end="837:23"><name pos:start="837:9" pos:end="837:9">h</name><operator pos:start="837:10" pos:end="837:11">-&gt;</operator><name pos:start="837:12" pos:end="837:20">chroma_qp</name><index pos:start="837:21" pos:end="837:23">[<expr pos:start="837:22" pos:end="837:22"><literal type="number" pos:start="837:22" pos:end="837:22">1</literal></expr>]</index></name><operator pos:start="837:24" pos:end="837:24">=</operator> <call pos:start="837:26" pos:end="837:55"><name pos:start="837:26" pos:end="837:38">get_chroma_qp</name><argument_list pos:start="837:39" pos:end="837:55">(<argument pos:start="837:40" pos:end="837:40"><expr pos:start="837:40" pos:end="837:40"><name pos:start="837:40" pos:end="837:40">h</name></expr></argument>, <argument pos:start="837:43" pos:end="837:43"><expr pos:start="837:43" pos:end="837:43"><literal type="number" pos:start="837:43" pos:end="837:43">1</literal></expr></argument>, <argument pos:start="837:46" pos:end="837:54"><expr pos:start="837:46" pos:end="837:54"><name pos:start="837:46" pos:end="837:54"><name pos:start="837:46" pos:end="837:46">s</name><operator pos:start="837:47" pos:end="837:48">-&gt;</operator><name pos:start="837:49" pos:end="837:54">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="839:9" pos:end="931:9"><if pos:start="839:9" pos:end="877:9">if<condition pos:start="839:11" pos:end="839:34">(<expr pos:start="839:12" pos:end="839:33"><call pos:start="839:12" pos:end="839:33"><name pos:start="839:12" pos:end="839:24">IS_INTRA16x16</name><argument_list pos:start="839:25" pos:end="839:33">(<argument pos:start="839:26" pos:end="839:32"><expr pos:start="839:26" pos:end="839:32"><name pos:start="839:26" pos:end="839:32">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="839:35" pos:end="877:9">{<block_content pos:start="841:13" pos:end="875:13">

            <if_stmt pos:start="841:13" pos:end="845:13"><if pos:start="841:13" pos:end="845:13">if<condition pos:start="841:15" pos:end="841:130">( <expr pos:start="841:17" pos:end="841:129"><call pos:start="841:17" pos:end="841:125"><name pos:start="841:17" pos:end="841:31">decode_residual</name><argument_list pos:start="841:32" pos:end="841:125">(<argument pos:start="841:33" pos:end="841:33"><expr pos:start="841:33" pos:end="841:33"><name pos:start="841:33" pos:end="841:33">h</name></expr></argument>, <argument pos:start="841:36" pos:end="841:50"><expr pos:start="841:36" pos:end="841:50"><name pos:start="841:36" pos:end="841:50"><name pos:start="841:36" pos:end="841:36">h</name><operator pos:start="841:37" pos:end="841:38">-&gt;</operator><name pos:start="841:39" pos:end="841:50">intra_gb_ptr</name></name></expr></argument>, <argument pos:start="841:53" pos:end="841:57"><expr pos:start="841:53" pos:end="841:57"><name pos:start="841:53" pos:end="841:57"><name pos:start="841:53" pos:end="841:53">h</name><operator pos:start="841:54" pos:end="841:55">-&gt;</operator><name pos:start="841:56" pos:end="841:57">mb</name></name></expr></argument>, <argument pos:start="841:60" pos:end="841:78"><expr pos:start="841:60" pos:end="841:78"><name pos:start="841:60" pos:end="841:78">LUMA_DC_BLOCK_INDEX</name></expr></argument>, <argument pos:start="841:81" pos:end="841:87"><expr pos:start="841:81" pos:end="841:87"><name pos:start="841:81" pos:end="841:87">dc_scan</name></expr></argument>, <argument pos:start="841:90" pos:end="841:120"><expr pos:start="841:90" pos:end="841:120"><name pos:start="841:90" pos:end="841:120"><name pos:start="841:90" pos:end="841:90">h</name><operator pos:start="841:91" pos:end="841:92">-&gt;</operator><name pos:start="841:93" pos:end="841:106">dequant4_coeff</name><index pos:start="841:107" pos:end="841:109">[<expr pos:start="841:108" pos:end="841:108"><literal type="number" pos:start="841:108" pos:end="841:108">0</literal></expr>]</index><index pos:start="841:110" pos:end="841:120">[<expr pos:start="841:111" pos:end="841:119"><name pos:start="841:111" pos:end="841:119"><name pos:start="841:111" pos:end="841:111">s</name><operator pos:start="841:112" pos:end="841:113">-&gt;</operator><name pos:start="841:114" pos:end="841:119">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="841:123" pos:end="841:124"><expr pos:start="841:123" pos:end="841:124"><literal type="number" pos:start="841:123" pos:end="841:124">16</literal></expr></argument>)</argument_list></call> <operator pos:start="841:127" pos:end="841:127">&lt;</operator> <literal type="number" pos:start="841:129" pos:end="841:129">0</literal></expr>)</condition><block pos:start="841:131" pos:end="845:13">{<block_content pos:start="843:17" pos:end="843:26">

                <return pos:start="843:17" pos:end="843:26">return <expr pos:start="843:24" pos:end="843:25"><operator pos:start="843:24" pos:end="843:24">-</operator><literal type="number" pos:start="843:25" pos:end="843:25">1</literal></expr>;</return> <comment type="line" pos:start="843:28" pos:end="843:82">//FIXME continue if partitioned and other return -1 too</comment>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="849:13" pos:end="849:52"><expr pos:start="849:13" pos:end="849:51"><call pos:start="849:13" pos:end="849:51"><name pos:start="849:13" pos:end="849:18">assert</name><argument_list pos:start="849:19" pos:end="849:51">(<argument pos:start="849:20" pos:end="849:50"><expr pos:start="849:20" pos:end="849:50"><operator pos:start="849:20" pos:end="849:20">(</operator><name pos:start="849:21" pos:end="849:23">cbp</name><operator pos:start="849:24" pos:end="849:24">&amp;</operator><literal type="number" pos:start="849:25" pos:end="849:26">15</literal><operator pos:start="849:27" pos:end="849:27">)</operator> <operator pos:start="849:29" pos:end="849:30">==</operator> <literal type="number" pos:start="849:32" pos:end="849:32">0</literal> <operator pos:start="849:34" pos:end="849:35">||</operator> <operator pos:start="849:37" pos:end="849:37">(</operator><name pos:start="849:38" pos:end="849:40">cbp</name><operator pos:start="849:41" pos:end="849:41">&amp;</operator><literal type="number" pos:start="849:42" pos:end="849:43">15</literal><operator pos:start="849:44" pos:end="849:44">)</operator> <operator pos:start="849:46" pos:end="849:47">==</operator> <literal type="number" pos:start="849:49" pos:end="849:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="853:13" pos:end="875:13"><if pos:start="853:13" pos:end="871:13">if<condition pos:start="853:15" pos:end="853:22">(<expr pos:start="853:16" pos:end="853:21"><name pos:start="853:16" pos:end="853:18">cbp</name><operator pos:start="853:19" pos:end="853:19">&amp;</operator><literal type="number" pos:start="853:20" pos:end="853:21">15</literal></expr>)</condition><block pos:start="853:23" pos:end="871:13">{<block_content pos:start="855:17" pos:end="869:17">

                <for pos:start="855:17" pos:end="869:17">for<control pos:start="855:20" pos:end="855:43">(<init pos:start="855:21" pos:end="855:27"><expr pos:start="855:21" pos:end="855:26"><name pos:start="855:21" pos:end="855:24">i8x8</name><operator pos:start="855:25" pos:end="855:25">=</operator><literal type="number" pos:start="855:26" pos:end="855:26">0</literal></expr>;</init> <condition pos:start="855:29" pos:end="855:35"><expr pos:start="855:29" pos:end="855:34"><name pos:start="855:29" pos:end="855:32">i8x8</name><operator pos:start="855:33" pos:end="855:33">&lt;</operator><literal type="number" pos:start="855:34" pos:end="855:34">4</literal></expr>;</condition> <incr pos:start="855:37" pos:end="855:42"><expr pos:start="855:37" pos:end="855:42"><name pos:start="855:37" pos:end="855:40">i8x8</name><operator pos:start="855:41" pos:end="855:42">++</operator></expr></incr>)</control><block pos:start="855:44" pos:end="869:17">{<block_content pos:start="857:21" pos:end="867:21">

                    <for pos:start="857:21" pos:end="867:21">for<control pos:start="857:24" pos:end="857:47">(<init pos:start="857:25" pos:end="857:31"><expr pos:start="857:25" pos:end="857:30"><name pos:start="857:25" pos:end="857:28">i4x4</name><operator pos:start="857:29" pos:end="857:29">=</operator><literal type="number" pos:start="857:30" pos:end="857:30">0</literal></expr>;</init> <condition pos:start="857:33" pos:end="857:39"><expr pos:start="857:33" pos:end="857:38"><name pos:start="857:33" pos:end="857:36">i4x4</name><operator pos:start="857:37" pos:end="857:37">&lt;</operator><literal type="number" pos:start="857:38" pos:end="857:38">4</literal></expr>;</condition> <incr pos:start="857:41" pos:end="857:46"><expr pos:start="857:41" pos:end="857:46"><name pos:start="857:41" pos:end="857:44">i4x4</name><operator pos:start="857:45" pos:end="857:46">++</operator></expr></incr>)</control><block pos:start="857:48" pos:end="867:21">{<block_content pos:start="859:25" pos:end="865:25">

                        <decl_stmt pos:start="859:25" pos:end="859:55"><decl pos:start="859:25" pos:end="859:54"><type pos:start="859:25" pos:end="859:33"><specifier pos:start="859:25" pos:end="859:29">const</specifier> <name pos:start="859:31" pos:end="859:33">int</name></type> <name pos:start="859:35" pos:end="859:39">index</name><init pos:start="859:40" pos:end="859:54">= <expr pos:start="859:42" pos:end="859:54"><name pos:start="859:42" pos:end="859:45">i4x4</name> <operator pos:start="859:47" pos:end="859:47">+</operator> <literal type="number" pos:start="859:49" pos:end="859:49">4</literal><operator pos:start="859:50" pos:end="859:50">*</operator><name pos:start="859:51" pos:end="859:54">i8x8</name></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="861:25" pos:end="865:25"><if pos:start="861:25" pos:end="865:25">if<condition pos:start="861:27" pos:end="861:141">( <expr pos:start="861:29" pos:end="861:139"><call pos:start="861:29" pos:end="861:135"><name pos:start="861:29" pos:end="861:43">decode_residual</name><argument_list pos:start="861:44" pos:end="861:135">(<argument pos:start="861:45" pos:end="861:45"><expr pos:start="861:45" pos:end="861:45"><name pos:start="861:45" pos:end="861:45">h</name></expr></argument>, <argument pos:start="861:48" pos:end="861:62"><expr pos:start="861:48" pos:end="861:62"><name pos:start="861:48" pos:end="861:62"><name pos:start="861:48" pos:end="861:48">h</name><operator pos:start="861:49" pos:end="861:50">-&gt;</operator><name pos:start="861:51" pos:end="861:62">intra_gb_ptr</name></name></expr></argument>, <argument pos:start="861:65" pos:end="861:80"><expr pos:start="861:65" pos:end="861:80"><name pos:start="861:65" pos:end="861:69"><name pos:start="861:65" pos:end="861:65">h</name><operator pos:start="861:66" pos:end="861:67">-&gt;</operator><name pos:start="861:68" pos:end="861:69">mb</name></name> <operator pos:start="861:71" pos:end="861:71">+</operator> <literal type="number" pos:start="861:73" pos:end="861:74">16</literal><operator pos:start="861:75" pos:end="861:75">*</operator><name pos:start="861:76" pos:end="861:80">index</name></expr></argument>, <argument pos:start="861:83" pos:end="861:87"><expr pos:start="861:83" pos:end="861:87"><name pos:start="861:83" pos:end="861:87">index</name></expr></argument>, <argument pos:start="861:90" pos:end="861:97"><expr pos:start="861:90" pos:end="861:97"><name pos:start="861:90" pos:end="861:93">scan</name> <operator pos:start="861:95" pos:end="861:95">+</operator> <literal type="number" pos:start="861:97" pos:end="861:97">1</literal></expr></argument>, <argument pos:start="861:100" pos:end="861:130"><expr pos:start="861:100" pos:end="861:130"><name pos:start="861:100" pos:end="861:130"><name pos:start="861:100" pos:end="861:100">h</name><operator pos:start="861:101" pos:end="861:102">-&gt;</operator><name pos:start="861:103" pos:end="861:116">dequant4_coeff</name><index pos:start="861:117" pos:end="861:119">[<expr pos:start="861:118" pos:end="861:118"><literal type="number" pos:start="861:118" pos:end="861:118">0</literal></expr>]</index><index pos:start="861:120" pos:end="861:130">[<expr pos:start="861:121" pos:end="861:129"><name pos:start="861:121" pos:end="861:129"><name pos:start="861:121" pos:end="861:121">s</name><operator pos:start="861:122" pos:end="861:123">-&gt;</operator><name pos:start="861:124" pos:end="861:129">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="861:133" pos:end="861:134"><expr pos:start="861:133" pos:end="861:134"><literal type="number" pos:start="861:133" pos:end="861:134">15</literal></expr></argument>)</argument_list></call> <operator pos:start="861:137" pos:end="861:137">&lt;</operator> <literal type="number" pos:start="861:139" pos:end="861:139">0</literal></expr> )</condition><block pos:start="861:142" pos:end="865:25">{<block_content pos:start="863:29" pos:end="863:38">

                            <return pos:start="863:29" pos:end="863:38">return <expr pos:start="863:36" pos:end="863:37"><operator pos:start="863:36" pos:end="863:36">-</operator><literal type="number" pos:start="863:37" pos:end="863:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></if><else pos:start="871:14" pos:end="875:13">else<block pos:start="871:18" pos:end="875:13">{<block_content pos:start="873:17" pos:end="873:82">

                <expr_stmt pos:start="873:17" pos:end="873:82"><expr pos:start="873:17" pos:end="873:81"><call pos:start="873:17" pos:end="873:81"><name pos:start="873:17" pos:end="873:30">fill_rectangle</name><argument_list pos:start="873:31" pos:end="873:81">(<argument pos:start="873:32" pos:end="873:65"><expr pos:start="873:32" pos:end="873:65"><operator pos:start="873:32" pos:end="873:32">&amp;</operator><name pos:start="873:33" pos:end="873:65"><name pos:start="873:33" pos:end="873:33">h</name><operator pos:start="873:34" pos:end="873:35">-&gt;</operator><name pos:start="873:36" pos:end="873:55">non_zero_count_cache</name><index pos:start="873:56" pos:end="873:65">[<expr pos:start="873:57" pos:end="873:64"><name pos:start="873:57" pos:end="873:64"><name pos:start="873:57" pos:end="873:61">scan8</name><index pos:start="873:62" pos:end="873:64">[<expr pos:start="873:63" pos:end="873:63"><literal type="number" pos:start="873:63" pos:end="873:63">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="873:68" pos:end="873:68"><expr pos:start="873:68" pos:end="873:68"><literal type="number" pos:start="873:68" pos:end="873:68">4</literal></expr></argument>, <argument pos:start="873:71" pos:end="873:71"><expr pos:start="873:71" pos:end="873:71"><literal type="number" pos:start="873:71" pos:end="873:71">4</literal></expr></argument>, <argument pos:start="873:74" pos:end="873:74"><expr pos:start="873:74" pos:end="873:74"><literal type="number" pos:start="873:74" pos:end="873:74">8</literal></expr></argument>, <argument pos:start="873:77" pos:end="873:77"><expr pos:start="873:77" pos:end="873:77"><literal type="number" pos:start="873:77" pos:end="873:77">0</literal></expr></argument>, <argument pos:start="873:80" pos:end="873:80"><expr pos:start="873:80" pos:end="873:80"><literal type="number" pos:start="873:80" pos:end="873:80">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if><else pos:start="877:10" pos:end="931:9">else<block pos:start="877:14" pos:end="931:9">{<block_content pos:start="879:13" pos:end="929:13">

            <for pos:start="879:13" pos:end="929:13">for<control pos:start="879:16" pos:end="879:39">(<init pos:start="879:17" pos:end="879:23"><expr pos:start="879:17" pos:end="879:22"><name pos:start="879:17" pos:end="879:20">i8x8</name><operator pos:start="879:21" pos:end="879:21">=</operator><literal type="number" pos:start="879:22" pos:end="879:22">0</literal></expr>;</init> <condition pos:start="879:25" pos:end="879:31"><expr pos:start="879:25" pos:end="879:30"><name pos:start="879:25" pos:end="879:28">i8x8</name><operator pos:start="879:29" pos:end="879:29">&lt;</operator><literal type="number" pos:start="879:30" pos:end="879:30">4</literal></expr>;</condition> <incr pos:start="879:33" pos:end="879:38"><expr pos:start="879:33" pos:end="879:38"><name pos:start="879:33" pos:end="879:36">i8x8</name><operator pos:start="879:37" pos:end="879:38">++</operator></expr></incr>)</control><block pos:start="879:40" pos:end="929:13">{<block_content pos:start="881:17" pos:end="927:17">

                <if_stmt pos:start="881:17" pos:end="927:17"><if pos:start="881:17" pos:end="921:17">if<condition pos:start="881:19" pos:end="881:35">(<expr pos:start="881:20" pos:end="881:34"><name pos:start="881:20" pos:end="881:22">cbp</name> <operator pos:start="881:24" pos:end="881:24">&amp;</operator> <operator pos:start="881:26" pos:end="881:26">(</operator><literal type="number" pos:start="881:27" pos:end="881:27">1</literal><operator pos:start="881:28" pos:end="881:29">&lt;&lt;</operator><name pos:start="881:30" pos:end="881:33">i8x8</name><operator pos:start="881:34" pos:end="881:34">)</operator></expr>)</condition><block pos:start="881:36" pos:end="921:17">{<block_content pos:start="883:21" pos:end="919:21">

                    <if_stmt pos:start="883:21" pos:end="919:21"><if pos:start="883:21" pos:end="903:21">if<condition pos:start="883:23" pos:end="883:42">(<expr pos:start="883:24" pos:end="883:41"><call pos:start="883:24" pos:end="883:41"><name pos:start="883:24" pos:end="883:32">IS_8x8DCT</name><argument_list pos:start="883:33" pos:end="883:41">(<argument pos:start="883:34" pos:end="883:40"><expr pos:start="883:34" pos:end="883:40"><name pos:start="883:34" pos:end="883:40">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="883:43" pos:end="903:21">{<block_content pos:start="885:25" pos:end="901:59">

                        <decl_stmt pos:start="885:25" pos:end="885:55"><decl pos:start="885:25" pos:end="885:54"><type pos:start="885:25" pos:end="885:33"><name pos:start="885:25" pos:end="885:31">DCTELEM</name> <modifier pos:start="885:33" pos:end="885:33">*</modifier></type><name pos:start="885:34" pos:end="885:36">buf</name> <init pos:start="885:38" pos:end="885:54">= <expr pos:start="885:40" pos:end="885:54"><operator pos:start="885:40" pos:end="885:40">&amp;</operator><name pos:start="885:41" pos:end="885:54"><name pos:start="885:41" pos:end="885:41">h</name><operator pos:start="885:42" pos:end="885:43">-&gt;</operator><name pos:start="885:44" pos:end="885:45">mb</name><index pos:start="885:46" pos:end="885:54">[<expr pos:start="885:47" pos:end="885:53"><literal type="number" pos:start="885:47" pos:end="885:48">64</literal><operator pos:start="885:49" pos:end="885:49">*</operator><name pos:start="885:50" pos:end="885:53">i8x8</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="887:25" pos:end="887:37"><decl pos:start="887:25" pos:end="887:36"><type pos:start="887:25" pos:end="887:33"><name pos:start="887:25" pos:end="887:31">uint8_t</name> <modifier pos:start="887:33" pos:end="887:33">*</modifier></type><name pos:start="887:34" pos:end="887:36">nnz</name></decl>;</decl_stmt>

                        <for pos:start="889:25" pos:end="897:25">for<control pos:start="889:28" pos:end="889:51">(<init pos:start="889:29" pos:end="889:35"><expr pos:start="889:29" pos:end="889:34"><name pos:start="889:29" pos:end="889:32">i4x4</name><operator pos:start="889:33" pos:end="889:33">=</operator><literal type="number" pos:start="889:34" pos:end="889:34">0</literal></expr>;</init> <condition pos:start="889:37" pos:end="889:43"><expr pos:start="889:37" pos:end="889:42"><name pos:start="889:37" pos:end="889:40">i4x4</name><operator pos:start="889:41" pos:end="889:41">&lt;</operator><literal type="number" pos:start="889:42" pos:end="889:42">4</literal></expr>;</condition> <incr pos:start="889:45" pos:end="889:50"><expr pos:start="889:45" pos:end="889:50"><name pos:start="889:45" pos:end="889:48">i4x4</name><operator pos:start="889:49" pos:end="889:50">++</operator></expr></incr>)</control><block pos:start="889:52" pos:end="897:25">{<block_content pos:start="891:29" pos:end="895:42">

                            <if_stmt pos:start="891:29" pos:end="895:42"><if pos:start="891:29" pos:end="895:42">if<condition pos:start="891:31" pos:end="893:113">( <expr pos:start="891:33" pos:end="893:111"><call pos:start="891:33" pos:end="893:108"><name pos:start="891:33" pos:end="891:47">decode_residual</name><argument_list pos:start="891:48" pos:end="893:108">(<argument pos:start="891:49" pos:end="891:49"><expr pos:start="891:49" pos:end="891:49"><name pos:start="891:49" pos:end="891:49">h</name></expr></argument>, <argument pos:start="891:52" pos:end="891:53"><expr pos:start="891:52" pos:end="891:53"><name pos:start="891:52" pos:end="891:53">gb</name></expr></argument>, <argument pos:start="891:56" pos:end="891:58"><expr pos:start="891:56" pos:end="891:58"><name pos:start="891:56" pos:end="891:58">buf</name></expr></argument>, <argument pos:start="891:61" pos:end="891:71"><expr pos:start="891:61" pos:end="891:71"><name pos:start="891:61" pos:end="891:64">i4x4</name><operator pos:start="891:65" pos:end="891:65">+</operator><literal type="number" pos:start="891:66" pos:end="891:66">4</literal><operator pos:start="891:67" pos:end="891:67">*</operator><name pos:start="891:68" pos:end="891:71">i8x8</name></expr></argument>, <argument pos:start="891:74" pos:end="891:88"><expr pos:start="891:74" pos:end="891:88"><name pos:start="891:74" pos:end="891:80">scan8x8</name><operator pos:start="891:81" pos:end="891:81">+</operator><literal type="number" pos:start="891:82" pos:end="891:83">16</literal><operator pos:start="891:84" pos:end="891:84">*</operator><name pos:start="891:85" pos:end="891:88">i4x4</name></expr></argument>,

                                                <argument pos:start="893:49" pos:end="893:103"><expr pos:start="893:49" pos:end="893:103"><name pos:start="893:49" pos:end="893:103"><name pos:start="893:49" pos:end="893:49">h</name><operator pos:start="893:50" pos:end="893:51">-&gt;</operator><name pos:start="893:52" pos:end="893:65">dequant8_coeff</name><index pos:start="893:66" pos:end="893:92">[<expr pos:start="893:67" pos:end="893:91"><ternary pos:start="893:67" pos:end="893:91"><condition pos:start="893:67" pos:end="893:87"><expr pos:start="893:67" pos:end="893:85"><call pos:start="893:67" pos:end="893:85"><name pos:start="893:67" pos:end="893:74">IS_INTRA</name><argument_list pos:start="893:75" pos:end="893:85">( <argument pos:start="893:77" pos:end="893:83"><expr pos:start="893:77" pos:end="893:83"><name pos:start="893:77" pos:end="893:83">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="893:89" pos:end="893:89"> <expr pos:start="893:89" pos:end="893:89"><literal type="number" pos:start="893:89" pos:end="893:89">0</literal></expr></then><else pos:start="893:90" pos:end="893:91">:<expr pos:start="893:91" pos:end="893:91"><literal type="number" pos:start="893:91" pos:end="893:91">1</literal></expr></else></ternary></expr>]</index><index pos:start="893:93" pos:end="893:103">[<expr pos:start="893:94" pos:end="893:102"><name pos:start="893:94" pos:end="893:102"><name pos:start="893:94" pos:end="893:94">s</name><operator pos:start="893:95" pos:end="893:96">-&gt;</operator><name pos:start="893:97" pos:end="893:102">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="893:106" pos:end="893:107"><expr pos:start="893:106" pos:end="893:107"><literal type="number" pos:start="893:106" pos:end="893:107">16</literal></expr></argument>)</argument_list></call> <operator pos:start="893:110" pos:end="893:110">&lt;</operator><literal type="number" pos:start="893:111" pos:end="893:111">0</literal></expr> )</condition><block type="pseudo" pos:start="895:33" pos:end="895:42"><block_content pos:start="895:33" pos:end="895:42">

                                <return pos:start="895:33" pos:end="895:42">return <expr pos:start="895:40" pos:end="895:41"><operator pos:start="895:40" pos:end="895:40">-</operator><literal type="number" pos:start="895:41" pos:end="895:41">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="899:25" pos:end="899:71"><expr pos:start="899:25" pos:end="899:70"><name pos:start="899:25" pos:end="899:27">nnz</name><operator pos:start="899:28" pos:end="899:28">=</operator> <operator pos:start="899:30" pos:end="899:30">&amp;</operator><name pos:start="899:31" pos:end="899:70"><name pos:start="899:31" pos:end="899:31">h</name><operator pos:start="899:32" pos:end="899:33">-&gt;</operator><name pos:start="899:34" pos:end="899:53">non_zero_count_cache</name><index pos:start="899:54" pos:end="899:70">[ <expr pos:start="899:56" pos:end="899:68"><name pos:start="899:56" pos:end="899:68"><name pos:start="899:56" pos:end="899:60">scan8</name><index pos:start="899:61" pos:end="899:68">[<expr pos:start="899:62" pos:end="899:67"><literal type="number" pos:start="899:62" pos:end="899:62">4</literal><operator pos:start="899:63" pos:end="899:63">*</operator><name pos:start="899:64" pos:end="899:67">i8x8</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="901:25" pos:end="901:59"><expr pos:start="901:25" pos:end="901:58"><name pos:start="901:25" pos:end="901:30"><name pos:start="901:25" pos:end="901:27">nnz</name><index pos:start="901:28" pos:end="901:30">[<expr pos:start="901:29" pos:end="901:29"><literal type="number" pos:start="901:29" pos:end="901:29">0</literal></expr>]</index></name> <operator pos:start="901:32" pos:end="901:33">+=</operator> <name pos:start="901:35" pos:end="901:40"><name pos:start="901:35" pos:end="901:37">nnz</name><index pos:start="901:38" pos:end="901:40">[<expr pos:start="901:39" pos:end="901:39"><literal type="number" pos:start="901:39" pos:end="901:39">1</literal></expr>]</index></name> <operator pos:start="901:42" pos:end="901:42">+</operator> <name pos:start="901:44" pos:end="901:49"><name pos:start="901:44" pos:end="901:46">nnz</name><index pos:start="901:47" pos:end="901:49">[<expr pos:start="901:48" pos:end="901:48"><literal type="number" pos:start="901:48" pos:end="901:48">8</literal></expr>]</index></name> <operator pos:start="901:51" pos:end="901:51">+</operator> <name pos:start="901:53" pos:end="901:58"><name pos:start="901:53" pos:end="901:55">nnz</name><index pos:start="901:56" pos:end="901:58">[<expr pos:start="901:57" pos:end="901:57"><literal type="number" pos:start="901:57" pos:end="901:57">9</literal></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="903:22" pos:end="919:21">else<block pos:start="903:26" pos:end="919:21">{<block_content pos:start="905:25" pos:end="917:25">

                        <for pos:start="905:25" pos:end="917:25">for<control pos:start="905:28" pos:end="905:51">(<init pos:start="905:29" pos:end="905:35"><expr pos:start="905:29" pos:end="905:34"><name pos:start="905:29" pos:end="905:32">i4x4</name><operator pos:start="905:33" pos:end="905:33">=</operator><literal type="number" pos:start="905:34" pos:end="905:34">0</literal></expr>;</init> <condition pos:start="905:37" pos:end="905:43"><expr pos:start="905:37" pos:end="905:42"><name pos:start="905:37" pos:end="905:40">i4x4</name><operator pos:start="905:41" pos:end="905:41">&lt;</operator><literal type="number" pos:start="905:42" pos:end="905:42">4</literal></expr>;</condition> <incr pos:start="905:45" pos:end="905:50"><expr pos:start="905:45" pos:end="905:50"><name pos:start="905:45" pos:end="905:48">i4x4</name><operator pos:start="905:49" pos:end="905:50">++</operator></expr></incr>)</control><block pos:start="905:52" pos:end="917:25">{<block_content pos:start="907:29" pos:end="915:29">

                            <decl_stmt pos:start="907:29" pos:end="907:59"><decl pos:start="907:29" pos:end="907:58"><type pos:start="907:29" pos:end="907:37"><specifier pos:start="907:29" pos:end="907:33">const</specifier> <name pos:start="907:35" pos:end="907:37">int</name></type> <name pos:start="907:39" pos:end="907:43">index</name><init pos:start="907:44" pos:end="907:58">= <expr pos:start="907:46" pos:end="907:58"><name pos:start="907:46" pos:end="907:49">i4x4</name> <operator pos:start="907:51" pos:end="907:51">+</operator> <literal type="number" pos:start="907:53" pos:end="907:53">4</literal><operator pos:start="907:54" pos:end="907:54">*</operator><name pos:start="907:55" pos:end="907:58">i8x8</name></expr></init></decl>;</decl_stmt>



                            <if_stmt pos:start="911:29" pos:end="915:29"><if pos:start="911:29" pos:end="915:29">if<condition pos:start="911:31" pos:end="911:151">( <expr pos:start="911:33" pos:end="911:149"><call pos:start="911:33" pos:end="911:146"><name pos:start="911:33" pos:end="911:47">decode_residual</name><argument_list pos:start="911:48" pos:end="911:146">(<argument pos:start="911:49" pos:end="911:49"><expr pos:start="911:49" pos:end="911:49"><name pos:start="911:49" pos:end="911:49">h</name></expr></argument>, <argument pos:start="911:52" pos:end="911:53"><expr pos:start="911:52" pos:end="911:53"><name pos:start="911:52" pos:end="911:53">gb</name></expr></argument>, <argument pos:start="911:56" pos:end="911:71"><expr pos:start="911:56" pos:end="911:71"><name pos:start="911:56" pos:end="911:60"><name pos:start="911:56" pos:end="911:56">h</name><operator pos:start="911:57" pos:end="911:58">-&gt;</operator><name pos:start="911:59" pos:end="911:60">mb</name></name> <operator pos:start="911:62" pos:end="911:62">+</operator> <literal type="number" pos:start="911:64" pos:end="911:65">16</literal><operator pos:start="911:66" pos:end="911:66">*</operator><name pos:start="911:67" pos:end="911:71">index</name></expr></argument>, <argument pos:start="911:74" pos:end="911:78"><expr pos:start="911:74" pos:end="911:78"><name pos:start="911:74" pos:end="911:78">index</name></expr></argument>, <argument pos:start="911:81" pos:end="911:84"><expr pos:start="911:81" pos:end="911:84"><name pos:start="911:81" pos:end="911:84">scan</name></expr></argument>, <argument pos:start="911:87" pos:end="911:141"><expr pos:start="911:87" pos:end="911:141"><name pos:start="911:87" pos:end="911:141"><name pos:start="911:87" pos:end="911:87">h</name><operator pos:start="911:88" pos:end="911:89">-&gt;</operator><name pos:start="911:90" pos:end="911:103">dequant4_coeff</name><index pos:start="911:104" pos:end="911:130">[<expr pos:start="911:105" pos:end="911:129"><ternary pos:start="911:105" pos:end="911:129"><condition pos:start="911:105" pos:end="911:125"><expr pos:start="911:105" pos:end="911:123"><call pos:start="911:105" pos:end="911:123"><name pos:start="911:105" pos:end="911:112">IS_INTRA</name><argument_list pos:start="911:113" pos:end="911:123">( <argument pos:start="911:115" pos:end="911:121"><expr pos:start="911:115" pos:end="911:121"><name pos:start="911:115" pos:end="911:121">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="911:127" pos:end="911:127"> <expr pos:start="911:127" pos:end="911:127"><literal type="number" pos:start="911:127" pos:end="911:127">0</literal></expr></then><else pos:start="911:128" pos:end="911:129">:<expr pos:start="911:129" pos:end="911:129"><literal type="number" pos:start="911:129" pos:end="911:129">3</literal></expr></else></ternary></expr>]</index><index pos:start="911:131" pos:end="911:141">[<expr pos:start="911:132" pos:end="911:140"><name pos:start="911:132" pos:end="911:140"><name pos:start="911:132" pos:end="911:132">s</name><operator pos:start="911:133" pos:end="911:134">-&gt;</operator><name pos:start="911:135" pos:end="911:140">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="911:144" pos:end="911:145"><expr pos:start="911:144" pos:end="911:145"><literal type="number" pos:start="911:144" pos:end="911:145">16</literal></expr></argument>)</argument_list></call> <operator pos:start="911:148" pos:end="911:148">&lt;</operator><literal type="number" pos:start="911:149" pos:end="911:149">0</literal></expr> )</condition><block pos:start="911:152" pos:end="915:29">{<block_content pos:start="913:33" pos:end="913:42">

                                <return pos:start="913:33" pos:end="913:42">return <expr pos:start="913:40" pos:end="913:41"><operator pos:start="913:40" pos:end="913:40">-</operator><literal type="number" pos:start="913:41" pos:end="913:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if><else pos:start="921:18" pos:end="927:17">else<block pos:start="921:22" pos:end="927:17">{<block_content pos:start="923:21" pos:end="925:58">

                    <decl_stmt pos:start="923:21" pos:end="923:83"><decl pos:start="923:21" pos:end="923:82"><type pos:start="923:21" pos:end="923:35"><name pos:start="923:21" pos:end="923:27">uint8_t</name> <modifier pos:start="923:29" pos:end="923:29">*</modifier> <specifier pos:start="923:31" pos:end="923:35">const</specifier></type> <name pos:start="923:37" pos:end="923:39">nnz</name><init pos:start="923:40" pos:end="923:82">= <expr pos:start="923:42" pos:end="923:82"><operator pos:start="923:42" pos:end="923:42">&amp;</operator><name pos:start="923:43" pos:end="923:82"><name pos:start="923:43" pos:end="923:43">h</name><operator pos:start="923:44" pos:end="923:45">-&gt;</operator><name pos:start="923:46" pos:end="923:65">non_zero_count_cache</name><index pos:start="923:66" pos:end="923:82">[ <expr pos:start="923:68" pos:end="923:80"><name pos:start="923:68" pos:end="923:80"><name pos:start="923:68" pos:end="923:72">scan8</name><index pos:start="923:73" pos:end="923:80">[<expr pos:start="923:74" pos:end="923:79"><literal type="number" pos:start="923:74" pos:end="923:74">4</literal><operator pos:start="923:75" pos:end="923:75">*</operator><name pos:start="923:76" pos:end="923:79">i8x8</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="925:21" pos:end="925:58"><expr pos:start="925:21" pos:end="925:57"><name pos:start="925:21" pos:end="925:26"><name pos:start="925:21" pos:end="925:23">nnz</name><index pos:start="925:24" pos:end="925:26">[<expr pos:start="925:25" pos:end="925:25"><literal type="number" pos:start="925:25" pos:end="925:25">0</literal></expr>]</index></name> <operator pos:start="925:28" pos:end="925:28">=</operator> <name pos:start="925:30" pos:end="925:35"><name pos:start="925:30" pos:end="925:32">nnz</name><index pos:start="925:33" pos:end="925:35">[<expr pos:start="925:34" pos:end="925:34"><literal type="number" pos:start="925:34" pos:end="925:34">1</literal></expr>]</index></name> <operator pos:start="925:37" pos:end="925:37">=</operator> <name pos:start="925:39" pos:end="925:44"><name pos:start="925:39" pos:end="925:41">nnz</name><index pos:start="925:42" pos:end="925:44">[<expr pos:start="925:43" pos:end="925:43"><literal type="number" pos:start="925:43" pos:end="925:43">8</literal></expr>]</index></name> <operator pos:start="925:46" pos:end="925:46">=</operator> <name pos:start="925:48" pos:end="925:53"><name pos:start="925:48" pos:end="925:50">nnz</name><index pos:start="925:51" pos:end="925:53">[<expr pos:start="925:52" pos:end="925:52"><literal type="number" pos:start="925:52" pos:end="925:52">9</literal></expr>]</index></name> <operator pos:start="925:55" pos:end="925:55">=</operator> <literal type="number" pos:start="925:57" pos:end="925:57">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="935:9" pos:end="945:9"><if pos:start="935:9" pos:end="945:9">if<condition pos:start="935:11" pos:end="935:20">(<expr pos:start="935:12" pos:end="935:19"><name pos:start="935:12" pos:end="935:14">cbp</name><operator pos:start="935:15" pos:end="935:15">&amp;</operator><literal type="number" pos:start="935:16" pos:end="935:19">0x30</literal></expr>)</condition><block pos:start="935:21" pos:end="945:9">{<block_content pos:start="937:13" pos:end="943:17">

            <for pos:start="937:13" pos:end="943:17">for<control pos:start="937:16" pos:end="937:57">(<init pos:start="937:17" pos:end="937:29"><expr pos:start="937:17" pos:end="937:28"><name pos:start="937:17" pos:end="937:26">chroma_idx</name><operator pos:start="937:27" pos:end="937:27">=</operator><literal type="number" pos:start="937:28" pos:end="937:28">0</literal></expr>;</init> <condition pos:start="937:31" pos:end="937:43"><expr pos:start="937:31" pos:end="937:42"><name pos:start="937:31" pos:end="937:40">chroma_idx</name><operator pos:start="937:41" pos:end="937:41">&lt;</operator><literal type="number" pos:start="937:42" pos:end="937:42">2</literal></expr>;</condition> <incr pos:start="937:45" pos:end="937:56"><expr pos:start="937:45" pos:end="937:56"><name pos:start="937:45" pos:end="937:54">chroma_idx</name><operator pos:start="937:55" pos:end="937:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="939:17" pos:end="943:17"><block_content pos:start="939:17" pos:end="943:17">

                <if_stmt pos:start="939:17" pos:end="943:17"><if pos:start="939:17" pos:end="943:17">if<condition pos:start="939:19" pos:end="939:126">( <expr pos:start="939:21" pos:end="939:125"><call pos:start="939:21" pos:end="939:121"><name pos:start="939:21" pos:end="939:35">decode_residual</name><argument_list pos:start="939:36" pos:end="939:121">(<argument pos:start="939:37" pos:end="939:37"><expr pos:start="939:37" pos:end="939:37"><name pos:start="939:37" pos:end="939:37">h</name></expr></argument>, <argument pos:start="939:40" pos:end="939:41"><expr pos:start="939:40" pos:end="939:41"><name pos:start="939:40" pos:end="939:41">gb</name></expr></argument>, <argument pos:start="939:44" pos:end="939:72"><expr pos:start="939:44" pos:end="939:72"><name pos:start="939:44" pos:end="939:48"><name pos:start="939:44" pos:end="939:44">h</name><operator pos:start="939:45" pos:end="939:46">-&gt;</operator><name pos:start="939:47" pos:end="939:48">mb</name></name> <operator pos:start="939:50" pos:end="939:50">+</operator> <literal type="number" pos:start="939:52" pos:end="939:56">256</literal> <operator pos:start="939:56" pos:end="939:56">+</operator> <literal type="number" pos:start="939:58" pos:end="939:59">16</literal><operator pos:start="939:60" pos:end="939:60">*</operator><literal type="number" pos:start="939:61" pos:end="939:61">4</literal><operator pos:start="939:62" pos:end="939:62">*</operator><name pos:start="939:63" pos:end="939:72">chroma_idx</name></expr></argument>, <argument pos:start="939:75" pos:end="939:95"><expr pos:start="939:75" pos:end="939:95"><name pos:start="939:75" pos:end="939:95">CHROMA_DC_BLOCK_INDEX</name></expr></argument>, <argument pos:start="939:98" pos:end="939:111"><expr pos:start="939:98" pos:end="939:111"><name pos:start="939:98" pos:end="939:111">chroma_dc_scan</name></expr></argument>, <argument pos:start="939:114" pos:end="939:117"><expr pos:start="939:114" pos:end="939:117"><name pos:start="939:114" pos:end="939:117">NULL</name></expr></argument>, <argument pos:start="939:120" pos:end="939:120"><expr pos:start="939:120" pos:end="939:120"><literal type="number" pos:start="939:120" pos:end="939:120">4</literal></expr></argument>)</argument_list></call> <operator pos:start="939:123" pos:end="939:123">&lt;</operator> <literal type="number" pos:start="939:125" pos:end="939:125">0</literal></expr>)</condition><block pos:start="939:127" pos:end="943:17">{<block_content pos:start="941:21" pos:end="941:30">

                    <return pos:start="941:21" pos:end="941:30">return <expr pos:start="941:28" pos:end="941:29"><operator pos:start="941:28" pos:end="941:28">-</operator><literal type="number" pos:start="941:29" pos:end="941:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="949:9" pos:end="977:9"><if pos:start="949:9" pos:end="969:9">if<condition pos:start="949:11" pos:end="949:20">(<expr pos:start="949:12" pos:end="949:19"><name pos:start="949:12" pos:end="949:14">cbp</name><operator pos:start="949:15" pos:end="949:15">&amp;</operator><literal type="number" pos:start="949:16" pos:end="949:19">0x20</literal></expr>)</condition><block pos:start="949:21" pos:end="969:9">{<block_content pos:start="951:13" pos:end="967:13">

            <for pos:start="951:13" pos:end="967:13">for<control pos:start="951:16" pos:end="951:57">(<init pos:start="951:17" pos:end="951:29"><expr pos:start="951:17" pos:end="951:28"><name pos:start="951:17" pos:end="951:26">chroma_idx</name><operator pos:start="951:27" pos:end="951:27">=</operator><literal type="number" pos:start="951:28" pos:end="951:28">0</literal></expr>;</init> <condition pos:start="951:31" pos:end="951:43"><expr pos:start="951:31" pos:end="951:42"><name pos:start="951:31" pos:end="951:40">chroma_idx</name><operator pos:start="951:41" pos:end="951:41">&lt;</operator><literal type="number" pos:start="951:42" pos:end="951:42">2</literal></expr>;</condition> <incr pos:start="951:45" pos:end="951:56"><expr pos:start="951:45" pos:end="951:56"><name pos:start="951:45" pos:end="951:54">chroma_idx</name><operator pos:start="951:55" pos:end="951:56">++</operator></expr></incr>)</control><block pos:start="951:58" pos:end="967:13">{<block_content pos:start="953:17" pos:end="965:17">

                <decl_stmt pos:start="953:17" pos:end="953:125"><decl pos:start="953:17" pos:end="953:124"><type pos:start="953:17" pos:end="953:32"><specifier pos:start="953:17" pos:end="953:21">const</specifier> <name pos:start="953:23" pos:end="953:30">uint32_t</name> <modifier pos:start="953:32" pos:end="953:32">*</modifier></type><name pos:start="953:33" pos:end="953:36">qmul</name> <init pos:start="953:38" pos:end="953:124">= <expr pos:start="953:40" pos:end="953:124"><name pos:start="953:40" pos:end="953:124"><name pos:start="953:40" pos:end="953:40">h</name><operator pos:start="953:41" pos:end="953:42">-&gt;</operator><name pos:start="953:43" pos:end="953:56">dequant4_coeff</name><index pos:start="953:57" pos:end="953:98">[<expr pos:start="953:58" pos:end="953:97"><name pos:start="953:58" pos:end="953:67">chroma_idx</name><operator pos:start="953:68" pos:end="953:68">+</operator><literal type="number" pos:start="953:69" pos:end="953:70">1</literal><operator pos:start="953:70" pos:end="953:70">+</operator><operator pos:start="953:71" pos:end="953:71">(</operator><ternary pos:start="953:72" pos:end="953:96"><condition pos:start="953:72" pos:end="953:92"><expr pos:start="953:72" pos:end="953:90"><call pos:start="953:72" pos:end="953:90"><name pos:start="953:72" pos:end="953:79">IS_INTRA</name><argument_list pos:start="953:80" pos:end="953:90">( <argument pos:start="953:82" pos:end="953:88"><expr pos:start="953:82" pos:end="953:88"><name pos:start="953:82" pos:end="953:88">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="953:94" pos:end="953:94"> <expr pos:start="953:94" pos:end="953:94"><literal type="number" pos:start="953:94" pos:end="953:94">0</literal></expr></then><else pos:start="953:95" pos:end="953:96">:<expr pos:start="953:96" pos:end="953:96"><literal type="number" pos:start="953:96" pos:end="953:96">3</literal></expr></else></ternary><operator pos:start="953:97" pos:end="953:97">)</operator></expr>]</index><index pos:start="953:99" pos:end="953:124">[<expr pos:start="953:100" pos:end="953:123"><name pos:start="953:100" pos:end="953:123"><name pos:start="953:100" pos:end="953:100">h</name><operator pos:start="953:101" pos:end="953:102">-&gt;</operator><name pos:start="953:103" pos:end="953:111">chroma_qp</name><index pos:start="953:112" pos:end="953:123">[<expr pos:start="953:113" pos:end="953:122"><name pos:start="953:113" pos:end="953:122">chroma_idx</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <for pos:start="955:17" pos:end="965:17">for<control pos:start="955:20" pos:end="955:43">(<init pos:start="955:21" pos:end="955:27"><expr pos:start="955:21" pos:end="955:26"><name pos:start="955:21" pos:end="955:24">i4x4</name><operator pos:start="955:25" pos:end="955:25">=</operator><literal type="number" pos:start="955:26" pos:end="955:26">0</literal></expr>;</init> <condition pos:start="955:29" pos:end="955:35"><expr pos:start="955:29" pos:end="955:34"><name pos:start="955:29" pos:end="955:32">i4x4</name><operator pos:start="955:33" pos:end="955:33">&lt;</operator><literal type="number" pos:start="955:34" pos:end="955:34">4</literal></expr>;</condition> <incr pos:start="955:37" pos:end="955:42"><expr pos:start="955:37" pos:end="955:42"><name pos:start="955:37" pos:end="955:40">i4x4</name><operator pos:start="955:41" pos:end="955:42">++</operator></expr></incr>)</control><block pos:start="955:44" pos:end="965:17">{<block_content pos:start="957:21" pos:end="963:21">

                    <decl_stmt pos:start="957:21" pos:end="957:62"><decl pos:start="957:21" pos:end="957:61"><type pos:start="957:21" pos:end="957:29"><specifier pos:start="957:21" pos:end="957:25">const</specifier> <name pos:start="957:27" pos:end="957:29">int</name></type> <name pos:start="957:31" pos:end="957:35">index</name><init pos:start="957:36" pos:end="957:61">= <expr pos:start="957:38" pos:end="957:61"><literal type="number" pos:start="957:38" pos:end="957:41">16</literal> <operator pos:start="957:41" pos:end="957:41">+</operator> <literal type="number" pos:start="957:43" pos:end="957:43">4</literal><operator pos:start="957:44" pos:end="957:44">*</operator><name pos:start="957:45" pos:end="957:54">chroma_idx</name> <operator pos:start="957:56" pos:end="957:56">+</operator> <name pos:start="957:58" pos:end="957:61">i4x4</name></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="959:21" pos:end="963:21"><if pos:start="959:21" pos:end="963:21">if<condition pos:start="959:23" pos:end="959:96">( <expr pos:start="959:25" pos:end="959:95"><call pos:start="959:25" pos:end="959:91"><name pos:start="959:25" pos:end="959:39">decode_residual</name><argument_list pos:start="959:40" pos:end="959:91">(<argument pos:start="959:41" pos:end="959:41"><expr pos:start="959:41" pos:end="959:41"><name pos:start="959:41" pos:end="959:41">h</name></expr></argument>, <argument pos:start="959:44" pos:end="959:45"><expr pos:start="959:44" pos:end="959:45"><name pos:start="959:44" pos:end="959:45">gb</name></expr></argument>, <argument pos:start="959:48" pos:end="959:63"><expr pos:start="959:48" pos:end="959:63"><name pos:start="959:48" pos:end="959:52"><name pos:start="959:48" pos:end="959:48">h</name><operator pos:start="959:49" pos:end="959:50">-&gt;</operator><name pos:start="959:51" pos:end="959:52">mb</name></name> <operator pos:start="959:54" pos:end="959:54">+</operator> <literal type="number" pos:start="959:56" pos:end="959:57">16</literal><operator pos:start="959:58" pos:end="959:58">*</operator><name pos:start="959:59" pos:end="959:63">index</name></expr></argument>, <argument pos:start="959:66" pos:end="959:70"><expr pos:start="959:66" pos:end="959:70"><name pos:start="959:66" pos:end="959:70">index</name></expr></argument>, <argument pos:start="959:73" pos:end="959:80"><expr pos:start="959:73" pos:end="959:80"><name pos:start="959:73" pos:end="959:76">scan</name> <operator pos:start="959:78" pos:end="959:78">+</operator> <literal type="number" pos:start="959:80" pos:end="959:80">1</literal></expr></argument>, <argument pos:start="959:83" pos:end="959:86"><expr pos:start="959:83" pos:end="959:86"><name pos:start="959:83" pos:end="959:86">qmul</name></expr></argument>, <argument pos:start="959:89" pos:end="959:90"><expr pos:start="959:89" pos:end="959:90"><literal type="number" pos:start="959:89" pos:end="959:90">15</literal></expr></argument>)</argument_list></call> <operator pos:start="959:93" pos:end="959:93">&lt;</operator> <literal type="number" pos:start="959:95" pos:end="959:95">0</literal></expr>)</condition><block pos:start="959:97" pos:end="963:21">{<block_content pos:start="961:25" pos:end="961:34">

                        <return pos:start="961:25" pos:end="961:34">return <expr pos:start="961:32" pos:end="961:33"><operator pos:start="961:32" pos:end="961:32">-</operator><literal type="number" pos:start="961:33" pos:end="961:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="969:10" pos:end="977:9">else<block pos:start="969:14" pos:end="977:9">{<block_content pos:start="971:13" pos:end="975:96">

            <decl_stmt pos:start="971:13" pos:end="971:61"><decl pos:start="971:13" pos:end="971:60"><type pos:start="971:13" pos:end="971:27"><name pos:start="971:13" pos:end="971:19">uint8_t</name> <modifier pos:start="971:21" pos:end="971:21">*</modifier> <specifier pos:start="971:23" pos:end="971:27">const</specifier></type> <name pos:start="971:29" pos:end="971:31">nnz</name><init pos:start="971:32" pos:end="971:60">= <expr pos:start="971:34" pos:end="971:60"><operator pos:start="971:34" pos:end="971:34">&amp;</operator><name pos:start="971:35" pos:end="971:60"><name pos:start="971:35" pos:end="971:35">h</name><operator pos:start="971:36" pos:end="971:37">-&gt;</operator><name pos:start="971:38" pos:end="971:57">non_zero_count_cache</name><index pos:start="971:58" pos:end="971:60">[<expr pos:start="971:59" pos:end="971:59"><literal type="number" pos:start="971:59" pos:end="971:59">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="973:13" pos:end="975:96"><expr pos:start="973:13" pos:end="975:95"><name pos:start="973:13" pos:end="973:30"><name pos:start="973:13" pos:end="973:15">nnz</name><index pos:start="973:16" pos:end="973:30">[ <expr pos:start="973:18" pos:end="973:28"><name pos:start="973:18" pos:end="973:26"><name pos:start="973:18" pos:end="973:22">scan8</name><index pos:start="973:23" pos:end="973:26">[<expr pos:start="973:24" pos:end="973:25"><literal type="number" pos:start="973:24" pos:end="973:25">16</literal></expr>]</index></name><operator pos:start="973:27" pos:end="973:27">+</operator><literal type="number" pos:start="973:28" pos:end="973:28">0</literal></expr> ]</index></name> <operator pos:start="973:32" pos:end="973:32">=</operator> <name pos:start="973:34" pos:end="973:51"><name pos:start="973:34" pos:end="973:36">nnz</name><index pos:start="973:37" pos:end="973:51">[ <expr pos:start="973:39" pos:end="973:49"><name pos:start="973:39" pos:end="973:47"><name pos:start="973:39" pos:end="973:43">scan8</name><index pos:start="973:44" pos:end="973:47">[<expr pos:start="973:45" pos:end="973:46"><literal type="number" pos:start="973:45" pos:end="973:46">16</literal></expr>]</index></name><operator pos:start="973:48" pos:end="973:48">+</operator><literal type="number" pos:start="973:49" pos:end="973:49">1</literal></expr> ]</index></name> <operator pos:start="973:53" pos:end="973:53">=</operator><name pos:start="973:54" pos:end="973:71"><name pos:start="973:54" pos:end="973:56">nnz</name><index pos:start="973:57" pos:end="973:71">[ <expr pos:start="973:59" pos:end="973:69"><name pos:start="973:59" pos:end="973:67"><name pos:start="973:59" pos:end="973:63">scan8</name><index pos:start="973:64" pos:end="973:67">[<expr pos:start="973:65" pos:end="973:66"><literal type="number" pos:start="973:65" pos:end="973:66">16</literal></expr>]</index></name><operator pos:start="973:68" pos:end="973:68">+</operator><literal type="number" pos:start="973:69" pos:end="973:69">8</literal></expr> ]</index></name> <operator pos:start="973:73" pos:end="973:73">=</operator><name pos:start="973:74" pos:end="973:91"><name pos:start="973:74" pos:end="973:76">nnz</name><index pos:start="973:77" pos:end="973:91">[ <expr pos:start="973:79" pos:end="973:89"><name pos:start="973:79" pos:end="973:87"><name pos:start="973:79" pos:end="973:83">scan8</name><index pos:start="973:84" pos:end="973:87">[<expr pos:start="973:85" pos:end="973:86"><literal type="number" pos:start="973:85" pos:end="973:86">16</literal></expr>]</index></name><operator pos:start="973:88" pos:end="973:88">+</operator><literal type="number" pos:start="973:89" pos:end="973:89">9</literal></expr> ]</index></name> <operator pos:start="973:93" pos:end="973:93">=</operator>

            <name pos:start="975:13" pos:end="975:30"><name pos:start="975:13" pos:end="975:15">nnz</name><index pos:start="975:16" pos:end="975:30">[ <expr pos:start="975:18" pos:end="975:28"><name pos:start="975:18" pos:end="975:26"><name pos:start="975:18" pos:end="975:22">scan8</name><index pos:start="975:23" pos:end="975:26">[<expr pos:start="975:24" pos:end="975:25"><literal type="number" pos:start="975:24" pos:end="975:25">20</literal></expr>]</index></name><operator pos:start="975:27" pos:end="975:27">+</operator><literal type="number" pos:start="975:28" pos:end="975:28">0</literal></expr> ]</index></name> <operator pos:start="975:32" pos:end="975:32">=</operator> <name pos:start="975:34" pos:end="975:51"><name pos:start="975:34" pos:end="975:36">nnz</name><index pos:start="975:37" pos:end="975:51">[ <expr pos:start="975:39" pos:end="975:49"><name pos:start="975:39" pos:end="975:47"><name pos:start="975:39" pos:end="975:43">scan8</name><index pos:start="975:44" pos:end="975:47">[<expr pos:start="975:45" pos:end="975:46"><literal type="number" pos:start="975:45" pos:end="975:46">20</literal></expr>]</index></name><operator pos:start="975:48" pos:end="975:48">+</operator><literal type="number" pos:start="975:49" pos:end="975:49">1</literal></expr> ]</index></name> <operator pos:start="975:53" pos:end="975:53">=</operator><name pos:start="975:54" pos:end="975:71"><name pos:start="975:54" pos:end="975:56">nnz</name><index pos:start="975:57" pos:end="975:71">[ <expr pos:start="975:59" pos:end="975:69"><name pos:start="975:59" pos:end="975:67"><name pos:start="975:59" pos:end="975:63">scan8</name><index pos:start="975:64" pos:end="975:67">[<expr pos:start="975:65" pos:end="975:66"><literal type="number" pos:start="975:65" pos:end="975:66">20</literal></expr>]</index></name><operator pos:start="975:68" pos:end="975:68">+</operator><literal type="number" pos:start="975:69" pos:end="975:69">8</literal></expr> ]</index></name> <operator pos:start="975:73" pos:end="975:73">=</operator><name pos:start="975:74" pos:end="975:91"><name pos:start="975:74" pos:end="975:76">nnz</name><index pos:start="975:77" pos:end="975:91">[ <expr pos:start="975:79" pos:end="975:89"><name pos:start="975:79" pos:end="975:87"><name pos:start="975:79" pos:end="975:83">scan8</name><index pos:start="975:84" pos:end="975:87">[<expr pos:start="975:85" pos:end="975:86"><literal type="number" pos:start="975:85" pos:end="975:86">20</literal></expr>]</index></name><operator pos:start="975:88" pos:end="975:88">+</operator><literal type="number" pos:start="975:89" pos:end="975:89">9</literal></expr> ]</index></name> <operator pos:start="975:93" pos:end="975:93">=</operator> <literal type="number" pos:start="975:95" pos:end="975:95">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="979:6" pos:end="989:5">else<block pos:start="979:10" pos:end="989:5">{<block_content pos:start="981:9" pos:end="987:92">

        <decl_stmt pos:start="981:9" pos:end="981:57"><decl pos:start="981:9" pos:end="981:56"><type pos:start="981:9" pos:end="981:23"><name pos:start="981:9" pos:end="981:15">uint8_t</name> <modifier pos:start="981:17" pos:end="981:17">*</modifier> <specifier pos:start="981:19" pos:end="981:23">const</specifier></type> <name pos:start="981:25" pos:end="981:27">nnz</name><init pos:start="981:28" pos:end="981:56">= <expr pos:start="981:30" pos:end="981:56"><operator pos:start="981:30" pos:end="981:30">&amp;</operator><name pos:start="981:31" pos:end="981:56"><name pos:start="981:31" pos:end="981:31">h</name><operator pos:start="981:32" pos:end="981:33">-&gt;</operator><name pos:start="981:34" pos:end="981:53">non_zero_count_cache</name><index pos:start="981:54" pos:end="981:56">[<expr pos:start="981:55" pos:end="981:55"><literal type="number" pos:start="981:55" pos:end="981:55">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="983:9" pos:end="983:54"><expr pos:start="983:9" pos:end="983:53"><call pos:start="983:9" pos:end="983:53"><name pos:start="983:9" pos:end="983:22">fill_rectangle</name><argument_list pos:start="983:23" pos:end="983:53">(<argument pos:start="983:24" pos:end="983:37"><expr pos:start="983:24" pos:end="983:37"><operator pos:start="983:24" pos:end="983:24">&amp;</operator><name pos:start="983:25" pos:end="983:37"><name pos:start="983:25" pos:end="983:27">nnz</name><index pos:start="983:28" pos:end="983:37">[<expr pos:start="983:29" pos:end="983:36"><name pos:start="983:29" pos:end="983:36"><name pos:start="983:29" pos:end="983:33">scan8</name><index pos:start="983:34" pos:end="983:36">[<expr pos:start="983:35" pos:end="983:35"><literal type="number" pos:start="983:35" pos:end="983:35">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="983:40" pos:end="983:40"><expr pos:start="983:40" pos:end="983:40"><literal type="number" pos:start="983:40" pos:end="983:40">4</literal></expr></argument>, <argument pos:start="983:43" pos:end="983:43"><expr pos:start="983:43" pos:end="983:43"><literal type="number" pos:start="983:43" pos:end="983:43">4</literal></expr></argument>, <argument pos:start="983:46" pos:end="983:46"><expr pos:start="983:46" pos:end="983:46"><literal type="number" pos:start="983:46" pos:end="983:46">8</literal></expr></argument>, <argument pos:start="983:49" pos:end="983:49"><expr pos:start="983:49" pos:end="983:49"><literal type="number" pos:start="983:49" pos:end="983:49">0</literal></expr></argument>, <argument pos:start="983:52" pos:end="983:52"><expr pos:start="983:52" pos:end="983:52"><literal type="number" pos:start="983:52" pos:end="983:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="985:9" pos:end="987:92"><expr pos:start="985:9" pos:end="987:91"><name pos:start="985:9" pos:end="985:26"><name pos:start="985:9" pos:end="985:11">nnz</name><index pos:start="985:12" pos:end="985:26">[ <expr pos:start="985:14" pos:end="985:24"><name pos:start="985:14" pos:end="985:22"><name pos:start="985:14" pos:end="985:18">scan8</name><index pos:start="985:19" pos:end="985:22">[<expr pos:start="985:20" pos:end="985:21"><literal type="number" pos:start="985:20" pos:end="985:21">16</literal></expr>]</index></name><operator pos:start="985:23" pos:end="985:23">+</operator><literal type="number" pos:start="985:24" pos:end="985:24">0</literal></expr> ]</index></name> <operator pos:start="985:28" pos:end="985:28">=</operator> <name pos:start="985:30" pos:end="985:47"><name pos:start="985:30" pos:end="985:32">nnz</name><index pos:start="985:33" pos:end="985:47">[ <expr pos:start="985:35" pos:end="985:45"><name pos:start="985:35" pos:end="985:43"><name pos:start="985:35" pos:end="985:39">scan8</name><index pos:start="985:40" pos:end="985:43">[<expr pos:start="985:41" pos:end="985:42"><literal type="number" pos:start="985:41" pos:end="985:42">16</literal></expr>]</index></name><operator pos:start="985:44" pos:end="985:44">+</operator><literal type="number" pos:start="985:45" pos:end="985:45">1</literal></expr> ]</index></name> <operator pos:start="985:49" pos:end="985:49">=</operator><name pos:start="985:50" pos:end="985:67"><name pos:start="985:50" pos:end="985:52">nnz</name><index pos:start="985:53" pos:end="985:67">[ <expr pos:start="985:55" pos:end="985:65"><name pos:start="985:55" pos:end="985:63"><name pos:start="985:55" pos:end="985:59">scan8</name><index pos:start="985:60" pos:end="985:63">[<expr pos:start="985:61" pos:end="985:62"><literal type="number" pos:start="985:61" pos:end="985:62">16</literal></expr>]</index></name><operator pos:start="985:64" pos:end="985:64">+</operator><literal type="number" pos:start="985:65" pos:end="985:65">8</literal></expr> ]</index></name> <operator pos:start="985:69" pos:end="985:69">=</operator><name pos:start="985:70" pos:end="985:87"><name pos:start="985:70" pos:end="985:72">nnz</name><index pos:start="985:73" pos:end="985:87">[ <expr pos:start="985:75" pos:end="985:85"><name pos:start="985:75" pos:end="985:83"><name pos:start="985:75" pos:end="985:79">scan8</name><index pos:start="985:80" pos:end="985:83">[<expr pos:start="985:81" pos:end="985:82"><literal type="number" pos:start="985:81" pos:end="985:82">16</literal></expr>]</index></name><operator pos:start="985:84" pos:end="985:84">+</operator><literal type="number" pos:start="985:85" pos:end="985:85">9</literal></expr> ]</index></name> <operator pos:start="985:89" pos:end="985:89">=</operator>

        <name pos:start="987:9" pos:end="987:26"><name pos:start="987:9" pos:end="987:11">nnz</name><index pos:start="987:12" pos:end="987:26">[ <expr pos:start="987:14" pos:end="987:24"><name pos:start="987:14" pos:end="987:22"><name pos:start="987:14" pos:end="987:18">scan8</name><index pos:start="987:19" pos:end="987:22">[<expr pos:start="987:20" pos:end="987:21"><literal type="number" pos:start="987:20" pos:end="987:21">20</literal></expr>]</index></name><operator pos:start="987:23" pos:end="987:23">+</operator><literal type="number" pos:start="987:24" pos:end="987:24">0</literal></expr> ]</index></name> <operator pos:start="987:28" pos:end="987:28">=</operator> <name pos:start="987:30" pos:end="987:47"><name pos:start="987:30" pos:end="987:32">nnz</name><index pos:start="987:33" pos:end="987:47">[ <expr pos:start="987:35" pos:end="987:45"><name pos:start="987:35" pos:end="987:43"><name pos:start="987:35" pos:end="987:39">scan8</name><index pos:start="987:40" pos:end="987:43">[<expr pos:start="987:41" pos:end="987:42"><literal type="number" pos:start="987:41" pos:end="987:42">20</literal></expr>]</index></name><operator pos:start="987:44" pos:end="987:44">+</operator><literal type="number" pos:start="987:45" pos:end="987:45">1</literal></expr> ]</index></name> <operator pos:start="987:49" pos:end="987:49">=</operator><name pos:start="987:50" pos:end="987:67"><name pos:start="987:50" pos:end="987:52">nnz</name><index pos:start="987:53" pos:end="987:67">[ <expr pos:start="987:55" pos:end="987:65"><name pos:start="987:55" pos:end="987:63"><name pos:start="987:55" pos:end="987:59">scan8</name><index pos:start="987:60" pos:end="987:63">[<expr pos:start="987:61" pos:end="987:62"><literal type="number" pos:start="987:61" pos:end="987:62">20</literal></expr>]</index></name><operator pos:start="987:64" pos:end="987:64">+</operator><literal type="number" pos:start="987:65" pos:end="987:65">8</literal></expr> ]</index></name> <operator pos:start="987:69" pos:end="987:69">=</operator><name pos:start="987:70" pos:end="987:87"><name pos:start="987:70" pos:end="987:72">nnz</name><index pos:start="987:73" pos:end="987:87">[ <expr pos:start="987:75" pos:end="987:85"><name pos:start="987:75" pos:end="987:83"><name pos:start="987:75" pos:end="987:79">scan8</name><index pos:start="987:80" pos:end="987:83">[<expr pos:start="987:81" pos:end="987:82"><literal type="number" pos:start="987:81" pos:end="987:82">20</literal></expr>]</index></name><operator pos:start="987:84" pos:end="987:84">+</operator><literal type="number" pos:start="987:85" pos:end="987:85">9</literal></expr> ]</index></name> <operator pos:start="987:89" pos:end="987:89">=</operator> <literal type="number" pos:start="987:91" pos:end="987:91">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="991:5" pos:end="991:54"><expr pos:start="991:5" pos:end="991:53"><name pos:start="991:5" pos:end="991:42"><name pos:start="991:5" pos:end="991:5">s</name><operator pos:start="991:6" pos:end="991:7">-&gt;</operator><name pos:start="991:8" pos:end="991:22">current_picture</name><operator pos:start="991:23" pos:end="991:23">.</operator><name pos:start="991:24" pos:end="991:35">qscale_table</name><index pos:start="991:36" pos:end="991:42">[<expr pos:start="991:37" pos:end="991:41"><name pos:start="991:37" pos:end="991:41">mb_xy</name></expr>]</index></name><operator pos:start="991:43" pos:end="991:43">=</operator> <name pos:start="991:45" pos:end="991:53"><name pos:start="991:45" pos:end="991:45">s</name><operator pos:start="991:46" pos:end="991:47">-&gt;</operator><name pos:start="991:48" pos:end="991:53">qscale</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="993:5" pos:end="993:33"><expr pos:start="993:5" pos:end="993:32"><call pos:start="993:5" pos:end="993:32"><name pos:start="993:5" pos:end="993:29">write_back_non_zero_count</name><argument_list pos:start="993:30" pos:end="993:32">(<argument pos:start="993:31" pos:end="993:31"><expr pos:start="993:31" pos:end="993:31"><name pos:start="993:31" pos:end="993:31">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="997:5" pos:end="1003:5"><if pos:start="997:5" pos:end="1003:5">if<condition pos:start="997:7" pos:end="997:16">(<expr pos:start="997:8" pos:end="997:15"><name pos:start="997:8" pos:end="997:15">MB_MBAFF</name></expr>)</condition><block pos:start="997:17" pos:end="1003:5">{<block_content pos:start="999:9" pos:end="1001:30">

        <expr_stmt pos:start="999:9" pos:end="999:30"><expr pos:start="999:9" pos:end="999:29"><name pos:start="999:9" pos:end="999:23"><name pos:start="999:9" pos:end="999:9">h</name><operator pos:start="999:10" pos:end="999:11">-&gt;</operator><name pos:start="999:12" pos:end="999:20">ref_count</name><index pos:start="999:21" pos:end="999:23">[<expr pos:start="999:22" pos:end="999:22"><literal type="number" pos:start="999:22" pos:end="999:22">0</literal></expr>]</index></name> <operator pos:start="999:25" pos:end="999:27">&gt;&gt;=</operator> <literal type="number" pos:start="999:29" pos:end="999:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1001:9" pos:end="1001:30"><expr pos:start="1001:9" pos:end="1001:29"><name pos:start="1001:9" pos:end="1001:23"><name pos:start="1001:9" pos:end="1001:9">h</name><operator pos:start="1001:10" pos:end="1001:11">-&gt;</operator><name pos:start="1001:12" pos:end="1001:20">ref_count</name><index pos:start="1001:21" pos:end="1001:23">[<expr pos:start="1001:22" pos:end="1001:22"><literal type="number" pos:start="1001:22" pos:end="1001:22">1</literal></expr>]</index></name> <operator pos:start="1001:25" pos:end="1001:27">&gt;&gt;=</operator> <literal type="number" pos:start="1001:29" pos:end="1001:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="1007:5" pos:end="1007:13">return <expr pos:start="1007:12" pos:end="1007:12"><literal type="number" pos:start="1007:12" pos:end="1007:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
