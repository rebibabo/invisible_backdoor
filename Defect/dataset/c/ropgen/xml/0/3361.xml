<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3361.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">write_console_data</name><parameter_list pos:start="1:30" pos:end="1:76">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:39">SCLPEvent</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">event</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">buf</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:75"><decl pos:start="1:69" pos:end="1:75"><type pos:start="1:69" pos:end="1:75"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:75">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:29">buf_offset</name></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:48"><decl pos:start="11:5" pos:end="11:47"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">SCLPConsoleLM</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:23">scon</name> <init pos:start="11:25" pos:end="11:47">= <expr pos:start="11:27" pos:end="11:47"><call pos:start="11:27" pos:end="11:47"><name pos:start="11:27" pos:end="11:40">SCLPLM_CONSOLE</name><argument_list pos:start="11:41" pos:end="11:47">(<argument pos:start="11:42" pos:end="11:46"><expr pos:start="11:42" pos:end="11:46"><name pos:start="11:42" pos:end="11:46">event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:18"><name pos:start="15:10" pos:end="15:13">scon</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:18">chr</name></name></expr>)</condition> <block pos:start="15:21" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:19">

        <comment type="block" pos:start="17:9" pos:end="17:74">/* If there's no backend, we can just say we consumed all data. */</comment>

        <return pos:start="19:9" pos:end="19:19">return <expr pos:start="19:16" pos:end="19:18"><name pos:start="19:16" pos:end="19:18">len</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:14">buf_offset</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:20">buf</name></expr>;</expr_stmt>

    <while pos:start="27:5" pos:end="49:5">while <condition pos:start="27:11" pos:end="27:19">(<expr pos:start="27:12" pos:end="27:18"><name pos:start="27:12" pos:end="27:14">len</name> <operator pos:start="27:16" pos:end="27:16">&gt;</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>)</condition> <block pos:start="27:21" pos:end="49:5">{<block_content pos:start="29:9" pos:end="47:9">

        <expr_stmt pos:start="29:9" pos:end="29:53"><expr pos:start="29:9" pos:end="29:52"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:52"><name pos:start="29:15" pos:end="29:31">qemu_chr_fe_write</name><argument_list pos:start="29:32" pos:end="29:52">(<argument pos:start="29:33" pos:end="29:41"><expr pos:start="29:33" pos:end="29:41"><name pos:start="29:33" pos:end="29:41"><name pos:start="29:33" pos:end="29:36">scon</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:41">chr</name></name></expr></argument>, <argument pos:start="29:44" pos:end="29:46"><expr pos:start="29:44" pos:end="29:46"><name pos:start="29:44" pos:end="29:46">buf</name></expr></argument>, <argument pos:start="29:49" pos:end="29:51"><expr pos:start="29:49" pos:end="29:51"><name pos:start="29:49" pos:end="29:51">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="47:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:21">(<expr pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:18">==</operator> <literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>)</condition> <block pos:start="31:23" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:20">

            <comment type="block" pos:start="33:13" pos:end="33:63">/* a pty doesn't seem to be connected - no error */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:20"><expr pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:15">len</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="37:11" pos:end="43:9">else if <condition pos:start="37:19" pos:end="37:60">(<expr pos:start="37:20" pos:end="37:59"><name pos:start="37:20" pos:end="37:22">ret</name> <operator pos:start="37:24" pos:end="37:25">==</operator> <operator pos:start="37:27" pos:end="37:27">-</operator><name pos:start="37:28" pos:end="37:33">EAGAIN</name> <operator pos:start="37:35" pos:end="37:36">||</operator> <operator pos:start="37:38" pos:end="37:38">(</operator><name pos:start="37:39" pos:end="37:41">ret</name> <operator pos:start="37:43" pos:end="37:43">&gt;</operator> <literal type="number" pos:start="37:45" pos:end="37:45">0</literal> <operator pos:start="37:47" pos:end="37:48">&amp;&amp;</operator> <name pos:start="37:50" pos:end="37:52">ret</name> <operator pos:start="37:54" pos:end="37:54">&lt;</operator> <name pos:start="37:56" pos:end="37:58">len</name><operator pos:start="37:59" pos:end="37:59">)</operator></expr>)</condition> <block pos:start="37:62" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:30">

            <expr_stmt pos:start="39:13" pos:end="39:23"><expr pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:15">len</name> <operator pos:start="39:17" pos:end="39:18">-=</operator> <name pos:start="39:20" pos:end="39:22">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:30"><expr pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:22">buf_offset</name> <operator pos:start="41:24" pos:end="41:25">+=</operator> <name pos:start="41:27" pos:end="41:29">ret</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="43:11" pos:end="47:9">else <block pos:start="43:16" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:20">

            <expr_stmt pos:start="45:13" pos:end="45:20"><expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">len</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
