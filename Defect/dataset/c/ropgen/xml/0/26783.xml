<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26783.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">aio_bh_update_timeout</name><parameter_list pos:start="1:27" pos:end="1:62">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:37">AioContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:52">uint32_t</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:61">timeout</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:5">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">QEMUBH</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:14">bh</name></decl>;</decl_stmt>



    <for pos:start="9:5" pos:end="35:5">for <control pos:start="9:9" pos:end="9:47">(<init pos:start="9:10" pos:end="9:28"><expr pos:start="9:10" pos:end="9:27"><name pos:start="9:10" pos:end="9:11">bh</name> <operator pos:start="9:13" pos:end="9:13">=</operator> <name pos:start="9:15" pos:end="9:27"><name pos:start="9:15" pos:end="9:17">ctx</name><operator pos:start="9:18" pos:end="9:19">-&gt;</operator><name pos:start="9:20" pos:end="9:27">first_bh</name></name></expr>;</init> <condition pos:start="9:30" pos:end="9:32"><expr pos:start="9:30" pos:end="9:31"><name pos:start="9:30" pos:end="9:31">bh</name></expr>;</condition> <incr pos:start="9:34" pos:end="9:46"><expr pos:start="9:34" pos:end="9:46"><name pos:start="9:34" pos:end="9:35">bh</name> <operator pos:start="9:37" pos:end="9:37">=</operator> <name pos:start="9:39" pos:end="9:46"><name pos:start="9:39" pos:end="9:40">bh</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:46">next</name></name></expr></incr>)</control> <block pos:start="9:49" pos:end="35:5">{<block_content pos:start="11:9" pos:end="33:9">

        <if_stmt pos:start="11:9" pos:end="33:9"><if pos:start="11:9" pos:end="33:9">if <condition pos:start="11:12" pos:end="11:42">(<expr pos:start="11:13" pos:end="11:41"><operator pos:start="11:13" pos:end="11:13">!</operator><name pos:start="11:14" pos:end="11:24"><name pos:start="11:14" pos:end="11:15">bh</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:24">deleted</name></name> <operator pos:start="11:26" pos:end="11:27">&amp;&amp;</operator> <name pos:start="11:29" pos:end="11:41"><name pos:start="11:29" pos:end="11:30">bh</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:41">scheduled</name></name></expr>)</condition> <block pos:start="11:44" pos:end="33:9">{<block_content pos:start="13:13" pos:end="31:13">

            <if_stmt pos:start="13:13" pos:end="31:13"><if pos:start="13:13" pos:end="21:13">if <condition pos:start="13:16" pos:end="13:25">(<expr pos:start="13:17" pos:end="13:24"><name pos:start="13:17" pos:end="13:24"><name pos:start="13:17" pos:end="13:18">bh</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:24">idle</name></name></expr>)</condition> <block pos:start="13:27" pos:end="21:13">{<block_content pos:start="19:17" pos:end="19:45">

                <comment type="block" pos:start="15:17" pos:end="17:32">/* idle bottom halves will be polled at least

                 * every 10ms */</comment>

                <expr_stmt pos:start="19:17" pos:end="19:45"><expr pos:start="19:17" pos:end="19:44"><operator pos:start="19:17" pos:end="19:17">*</operator><name pos:start="19:18" pos:end="19:24">timeout</name> <operator pos:start="19:26" pos:end="19:26">=</operator> <call pos:start="19:28" pos:end="19:44"><name pos:start="19:28" pos:end="19:30">MIN</name><argument_list pos:start="19:31" pos:end="19:44">(<argument pos:start="19:32" pos:end="19:33"><expr pos:start="19:32" pos:end="19:33"><literal type="number" pos:start="19:32" pos:end="19:33">10</literal></expr></argument>, <argument pos:start="19:36" pos:end="19:43"><expr pos:start="19:36" pos:end="19:43"><operator pos:start="19:36" pos:end="19:36">*</operator><name pos:start="19:37" pos:end="19:43">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="21:15" pos:end="31:13">else <block pos:start="21:20" pos:end="31:13">{<block_content pos:start="27:17" pos:end="29:22">

                <comment type="block" pos:start="23:17" pos:end="25:33">/* non-idle bottom halves will be executed

                 * immediately */</comment>

                <expr_stmt pos:start="27:17" pos:end="27:29"><expr pos:start="27:17" pos:end="27:28"><operator pos:start="27:17" pos:end="27:17">*</operator><name pos:start="27:18" pos:end="27:24">timeout</name> <operator pos:start="27:26" pos:end="27:26">=</operator> <literal type="number" pos:start="27:28" pos:end="27:28">0</literal></expr>;</expr_stmt>

                <break pos:start="29:17" pos:end="29:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
