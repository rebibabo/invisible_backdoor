<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21737.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">test_cdrom_dma</name><parameter_list pos:start="1:27" pos:end="1:32">(<parameter pos:start="1:28" pos:end="1:31"><decl pos:start="1:28" pos:end="1:31"><type pos:start="1:28" pos:end="1:31"><name pos:start="1:28" pos:end="1:31">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:26">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:23"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:23">size_t</name></type> <name pos:start="5:25" pos:end="5:27">len</name> <init pos:start="5:29" pos:end="5:46">= <expr pos:start="5:31" pos:end="5:46"><name pos:start="5:31" pos:end="5:46">ATAPI_BLOCK_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:17">pattern</name> <init pos:start="7:19" pos:end="7:51">= <expr pos:start="7:21" pos:end="7:51"><call pos:start="7:21" pos:end="7:51"><name pos:start="7:21" pos:end="7:28">g_malloc</name><argument_list pos:start="7:29" pos:end="7:51">(<argument pos:start="7:30" pos:end="7:50"><expr pos:start="7:30" pos:end="7:50"><name pos:start="7:30" pos:end="7:45">ATAPI_BLOCK_SIZE</name> <operator pos:start="7:47" pos:end="7:47">*</operator> <literal type="number" pos:start="7:49" pos:end="7:50">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:12">rx</name> <init pos:start="9:14" pos:end="9:29">= <expr pos:start="9:16" pos:end="9:29"><call pos:start="9:16" pos:end="9:29"><name pos:start="9:16" pos:end="9:24">g_malloc0</name><argument_list pos:start="9:25" pos:end="9:29">(<argument pos:start="9:26" pos:end="9:28"><expr pos:start="9:26" pos:end="9:28"><name pos:start="9:26" pos:end="9:28">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">uintptr_t</name></type> <name pos:start="11:15" pos:end="11:23">guest_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">PrdtEntry</name></type> <name pos:start="13:15" pos:end="13:21"><name pos:start="13:15" pos:end="13:18">prdt</name><index pos:start="13:19" pos:end="13:21">[<expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">FILE</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:12">fh</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:67"><expr pos:start="19:5" pos:end="21:66"><call pos:start="19:5" pos:end="21:66"><name pos:start="19:5" pos:end="19:18">ide_test_start</name><argument_list pos:start="19:19" pos:end="21:66">(<argument pos:start="19:20" pos:end="21:55"><expr pos:start="19:20" pos:end="21:55"><literal type="string" pos:start="19:20" pos:end="19:82">"-drive if=none,file=%s,media=cdrom,format=raw,id=sr0,index=0 "</literal>

                   <literal type="string" pos:start="21:20" pos:end="21:55">"-device ide-cd,drive=sr0,bus=ide.0"</literal></expr></argument>, <argument pos:start="21:58" pos:end="21:65"><expr pos:start="21:58" pos:end="21:65"><name pos:start="21:58" pos:end="21:65">tmp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:51"><expr pos:start="23:5" pos:end="23:50"><call pos:start="23:5" pos:end="23:50"><name pos:start="23:5" pos:end="23:26">qtest_irq_intercept_in</name><argument_list pos:start="23:27" pos:end="23:50">(<argument pos:start="23:28" pos:end="23:39"><expr pos:start="23:28" pos:end="23:39"><name pos:start="23:28" pos:end="23:39">global_qtest</name></expr></argument>, <argument pos:start="23:42" pos:end="23:49"><expr pos:start="23:42" pos:end="23:49"><literal type="string" pos:start="23:42" pos:end="23:49">"ioapic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:13">guest_buf</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:46"><name pos:start="27:17" pos:end="27:27">guest_alloc</name><argument_list pos:start="27:28" pos:end="27:46">(<argument pos:start="27:29" pos:end="27:40"><expr pos:start="27:29" pos:end="27:40"><name pos:start="27:29" pos:end="27:40">guest_malloc</name></expr></argument>, <argument pos:start="27:43" pos:end="27:45"><expr pos:start="27:43" pos:end="27:45"><name pos:start="27:43" pos:end="27:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:8">prdt</name><index pos:start="29:9" pos:end="29:11">[<expr pos:start="29:10" pos:end="29:10"><literal type="number" pos:start="29:10" pos:end="29:10">0</literal></expr>]</index></name><operator pos:start="29:12" pos:end="29:12">.</operator><name pos:start="29:13" pos:end="29:16">addr</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:41"><name pos:start="29:20" pos:end="29:30">cpu_to_le32</name><argument_list pos:start="29:31" pos:end="29:41">(<argument pos:start="29:32" pos:end="29:40"><expr pos:start="29:32" pos:end="29:40"><name pos:start="29:32" pos:end="29:40">guest_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:47"><expr pos:start="31:5" pos:end="31:46"><name pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:8">prdt</name><index pos:start="31:9" pos:end="31:11">[<expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">0</literal></expr>]</index></name><operator pos:start="31:12" pos:end="31:12">.</operator><name pos:start="31:13" pos:end="31:16">size</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:46"><name pos:start="31:20" pos:end="31:30">cpu_to_le32</name><argument_list pos:start="31:31" pos:end="31:46">(<argument pos:start="31:32" pos:end="31:45"><expr pos:start="31:32" pos:end="31:45"><name pos:start="31:32" pos:end="31:34">len</name> <operator pos:start="31:36" pos:end="31:36">|</operator> <name pos:start="31:38" pos:end="31:45">PRDT_EOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:71"><expr pos:start="35:5" pos:end="35:70"><call pos:start="35:5" pos:end="35:70"><name pos:start="35:5" pos:end="35:20">generate_pattern</name><argument_list pos:start="35:21" pos:end="35:70">(<argument pos:start="35:22" pos:end="35:28"><expr pos:start="35:22" pos:end="35:28"><name pos:start="35:22" pos:end="35:28">pattern</name></expr></argument>, <argument pos:start="35:31" pos:end="35:51"><expr pos:start="35:31" pos:end="35:51"><name pos:start="35:31" pos:end="35:46">ATAPI_BLOCK_SIZE</name> <operator pos:start="35:48" pos:end="35:48">*</operator> <literal type="number" pos:start="35:50" pos:end="35:51">16</literal></expr></argument>, <argument pos:start="35:54" pos:end="35:69"><expr pos:start="35:54" pos:end="35:69"><name pos:start="35:54" pos:end="35:69">ATAPI_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:6">fh</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:30"><name pos:start="37:10" pos:end="37:14">fopen</name><argument_list pos:start="37:15" pos:end="37:30">(<argument pos:start="37:16" pos:end="37:23"><expr pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:23">tmp_path</name></expr></argument>, <argument pos:start="37:26" pos:end="37:29"><expr pos:start="37:26" pos:end="37:29"><literal type="string" pos:start="37:26" pos:end="37:29">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:46"><expr pos:start="39:5" pos:end="39:45"><call pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:10">fwrite</name><argument_list pos:start="39:11" pos:end="39:45">(<argument pos:start="39:12" pos:end="39:18"><expr pos:start="39:12" pos:end="39:18"><name pos:start="39:12" pos:end="39:18">pattern</name></expr></argument>, <argument pos:start="39:21" pos:end="39:36"><expr pos:start="39:21" pos:end="39:36"><name pos:start="39:21" pos:end="39:36">ATAPI_BLOCK_SIZE</name></expr></argument>, <argument pos:start="39:39" pos:end="39:40"><expr pos:start="39:39" pos:end="39:40"><literal type="number" pos:start="39:39" pos:end="39:40">16</literal></expr></argument>, <argument pos:start="39:43" pos:end="39:44"><expr pos:start="39:43" pos:end="39:44"><name pos:start="39:43" pos:end="39:44">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:15"><expr pos:start="41:5" pos:end="41:14"><call pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:10">fclose</name><argument_list pos:start="41:11" pos:end="41:14">(<argument pos:start="41:12" pos:end="41:13"><expr pos:start="41:12" pos:end="41:13"><name pos:start="41:12" pos:end="41:13">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:70"><expr pos:start="45:5" pos:end="45:69"><call pos:start="45:5" pos:end="45:69"><name pos:start="45:5" pos:end="45:20">send_dma_request</name><argument_list pos:start="45:21" pos:end="45:69">(<argument pos:start="45:22" pos:end="45:31"><expr pos:start="45:22" pos:end="45:31"><name pos:start="45:22" pos:end="45:31">CMD_PACKET</name></expr></argument>, <argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><literal type="number" pos:start="45:34" pos:end="45:34">0</literal></expr></argument>, <argument pos:start="45:37" pos:end="45:37"><expr pos:start="45:37" pos:end="45:37"><literal type="number" pos:start="45:37" pos:end="45:37">1</literal></expr></argument>, <argument pos:start="45:40" pos:end="45:43"><expr pos:start="45:40" pos:end="45:43"><name pos:start="45:40" pos:end="45:43">prdt</name></expr></argument>, <argument pos:start="45:46" pos:end="45:46"><expr pos:start="45:46" pos:end="45:46"><literal type="number" pos:start="45:46" pos:end="45:46">1</literal></expr></argument>, <argument pos:start="45:49" pos:end="45:68"><expr pos:start="45:49" pos:end="45:68"><name pos:start="45:49" pos:end="45:68">send_scsi_cdb_read10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:66">/* Read back data from guest memory into local qtest memory */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:32"><expr pos:start="51:5" pos:end="51:31"><call pos:start="51:5" pos:end="51:31"><name pos:start="51:5" pos:end="51:11">memread</name><argument_list pos:start="51:12" pos:end="51:31">(<argument pos:start="51:13" pos:end="51:21"><expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:21">guest_buf</name></expr></argument>, <argument pos:start="51:24" pos:end="51:25"><expr pos:start="51:24" pos:end="51:25"><name pos:start="51:24" pos:end="51:25">rx</name></expr></argument>, <argument pos:start="51:28" pos:end="51:30"><expr pos:start="51:28" pos:end="51:30"><name pos:start="51:28" pos:end="51:30">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:53"><expr pos:start="53:5" pos:end="53:52"><call pos:start="53:5" pos:end="53:52"><name pos:start="53:5" pos:end="53:19">g_assert_cmpint</name><argument_list pos:start="53:20" pos:end="53:52">(<argument pos:start="53:21" pos:end="53:44"><expr pos:start="53:21" pos:end="53:44"><call pos:start="53:21" pos:end="53:44"><name pos:start="53:21" pos:end="53:26">memcmp</name><argument_list pos:start="53:27" pos:end="53:44">(<argument pos:start="53:28" pos:end="53:34"><expr pos:start="53:28" pos:end="53:34"><name pos:start="53:28" pos:end="53:34">pattern</name></expr></argument>, <argument pos:start="53:37" pos:end="53:38"><expr pos:start="53:37" pos:end="53:38"><name pos:start="53:37" pos:end="53:38">rx</name></expr></argument>, <argument pos:start="53:41" pos:end="53:43"><expr pos:start="53:41" pos:end="53:43"><name pos:start="53:41" pos:end="53:43">len</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:47" pos:end="53:48"><expr pos:start="53:47" pos:end="53:48"><operator pos:start="53:47" pos:end="53:48">==</operator></expr></argument>, <argument pos:start="53:51" pos:end="53:51"><expr pos:start="53:51" pos:end="53:51"><literal type="number" pos:start="53:51" pos:end="53:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:20"><expr pos:start="57:5" pos:end="57:19"><call pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:10">g_free</name><argument_list pos:start="57:11" pos:end="57:19">(<argument pos:start="57:12" pos:end="57:18"><expr pos:start="57:12" pos:end="57:18"><name pos:start="57:12" pos:end="57:18">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:15"><expr pos:start="59:5" pos:end="59:14"><call pos:start="59:5" pos:end="59:14"><name pos:start="59:5" pos:end="59:10">g_free</name><argument_list pos:start="59:11" pos:end="59:14">(<argument pos:start="59:12" pos:end="59:13"><expr pos:start="59:12" pos:end="59:13"><name pos:start="59:12" pos:end="59:13">rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:26"><expr pos:start="61:5" pos:end="61:25"><call pos:start="61:5" pos:end="61:25"><name pos:start="61:5" pos:end="61:23">test_bmdma_teardown</name><argument_list pos:start="61:24" pos:end="61:25">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
