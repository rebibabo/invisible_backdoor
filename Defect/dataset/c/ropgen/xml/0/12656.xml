<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12656.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">ff_qsv_encode</name><parameter_list pos:start="1:18" pos:end="3:71">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:39"><name pos:start="1:19" pos:end="1:32">AVCodecContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:39">avctx</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:54">QSVEncContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">q</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:31"><decl pos:start="3:19" pos:end="3:31"><type pos:start="3:19" pos:end="3:31"><name pos:start="3:19" pos:end="3:26">AVPacket</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:31">pkt</name></decl></parameter>, <parameter pos:start="3:34" pos:end="3:53"><decl pos:start="3:34" pos:end="3:53"><type pos:start="3:34" pos:end="3:53"><specifier pos:start="3:34" pos:end="3:38">const</specifier> <name pos:start="3:40" pos:end="3:46">AVFrame</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:53">frame</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:70"><decl pos:start="3:56" pos:end="3:70"><type pos:start="3:56" pos:end="3:70"><name pos:start="3:56" pos:end="3:58">int</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:70">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="133:1">{<block_content pos:start="7:5" pos:end="131:13">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:40"><expr pos:start="11:5" pos:end="11:39"><name pos:start="11:5" pos:end="11:7">ret</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:39"><name pos:start="11:11" pos:end="11:22">encode_frame</name><argument_list pos:start="11:23" pos:end="11:39">(<argument pos:start="11:24" pos:end="11:28"><expr pos:start="11:24" pos:end="11:28"><name pos:start="11:24" pos:end="11:28">avctx</name></expr></argument>, <argument pos:start="11:31" pos:end="11:31"><expr pos:start="11:31" pos:end="11:31"><name pos:start="11:31" pos:end="11:31">q</name></expr></argument>, <argument pos:start="11:34" pos:end="11:38"><expr pos:start="11:34" pos:end="11:38"><name pos:start="11:34" pos:end="11:38">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="15:19"><if pos:start="13:5" pos:end="15:19">if <condition pos:start="13:8" pos:end="13:16">(<expr pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:11">ret</name> <operator pos:start="13:13" pos:end="13:13">&lt;</operator> <literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:19"><block_content pos:start="15:9" pos:end="15:19">

        <return pos:start="15:9" pos:end="15:19">return <expr pos:start="15:16" pos:end="15:18"><name pos:start="15:16" pos:end="15:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="127:5"><if pos:start="19:5" pos:end="127:5">if <condition pos:start="19:8" pos:end="21:48">(<expr pos:start="19:9" pos:end="21:47"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:37"><name pos:start="19:10" pos:end="19:22">av_fifo_space</name><argument_list pos:start="19:23" pos:end="19:37">(<argument pos:start="19:24" pos:end="19:36"><expr pos:start="19:24" pos:end="19:36"><name pos:start="19:24" pos:end="19:36"><name pos:start="19:24" pos:end="19:24">q</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:36">async_fifo</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:39" pos:end="19:40">||</operator>

        <operator pos:start="21:9" pos:end="21:9">(</operator><operator pos:start="21:10" pos:end="21:10">!</operator><name pos:start="21:11" pos:end="21:15">frame</name> <operator pos:start="21:17" pos:end="21:18">&amp;&amp;</operator> <call pos:start="21:20" pos:end="21:46"><name pos:start="21:20" pos:end="21:31">av_fifo_size</name><argument_list pos:start="21:32" pos:end="21:46">(<argument pos:start="21:33" pos:end="21:45"><expr pos:start="21:33" pos:end="21:45"><name pos:start="21:33" pos:end="21:45"><name pos:start="21:33" pos:end="21:33">q</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:45">async_fifo</name></name></expr></argument>)</argument_list></call><operator pos:start="21:47" pos:end="21:47">)</operator></expr>)</condition> <block pos:start="21:50" pos:end="127:5">{<block_content pos:start="23:9" pos:end="125:24">

        <decl_stmt pos:start="23:9" pos:end="23:25"><decl pos:start="23:9" pos:end="23:24"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">AVPacket</name></type> <name pos:start="23:18" pos:end="23:24">new_pkt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:25"><decl pos:start="25:9" pos:end="25:24"><type pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:20">mfxBitstream</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:24">bs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:26"><decl pos:start="27:9" pos:end="27:25"><type pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:20">mfxSyncPoint</name></type> <name pos:start="27:22" pos:end="27:25">sync</name></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:77"><expr pos:start="31:9" pos:end="31:76"><call pos:start="31:9" pos:end="31:76"><name pos:start="31:9" pos:end="31:28">av_fifo_generic_read</name><argument_list pos:start="31:29" pos:end="31:76">(<argument pos:start="31:30" pos:end="31:42"><expr pos:start="31:30" pos:end="31:42"><name pos:start="31:30" pos:end="31:42"><name pos:start="31:30" pos:end="31:30">q</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:42">async_fifo</name></name></expr></argument>, <argument pos:start="31:45" pos:end="31:52"><expr pos:start="31:45" pos:end="31:52"><operator pos:start="31:45" pos:end="31:45">&amp;</operator><name pos:start="31:46" pos:end="31:52">new_pkt</name></expr></argument>, <argument pos:start="31:55" pos:end="31:69"><expr pos:start="31:55" pos:end="31:69"><sizeof pos:start="31:55" pos:end="31:69">sizeof<argument_list pos:start="31:61" pos:end="31:69">(<argument pos:start="31:62" pos:end="31:68"><expr pos:start="31:62" pos:end="31:68"><name pos:start="31:62" pos:end="31:68">new_pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:72" pos:end="31:75"><expr pos:start="31:72" pos:end="31:75"><name pos:start="31:72" pos:end="31:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:77"><expr pos:start="33:9" pos:end="33:76"><call pos:start="33:9" pos:end="33:76"><name pos:start="33:9" pos:end="33:28">av_fifo_generic_read</name><argument_list pos:start="33:29" pos:end="33:76">(<argument pos:start="33:30" pos:end="33:42"><expr pos:start="33:30" pos:end="33:42"><name pos:start="33:30" pos:end="33:42"><name pos:start="33:30" pos:end="33:30">q</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:42">async_fifo</name></name></expr></argument>, <argument pos:start="33:45" pos:end="33:49"><expr pos:start="33:45" pos:end="33:49"><operator pos:start="33:45" pos:end="33:45">&amp;</operator><name pos:start="33:46" pos:end="33:49">sync</name></expr></argument>,    <argument pos:start="33:55" pos:end="33:66"><expr pos:start="33:55" pos:end="33:66"><sizeof pos:start="33:55" pos:end="33:66">sizeof<argument_list pos:start="33:61" pos:end="33:66">(<argument pos:start="33:62" pos:end="33:65"><expr pos:start="33:62" pos:end="33:65"><name pos:start="33:62" pos:end="33:65">sync</name></expr></argument>)</argument_list></sizeof></expr></argument>,    <argument pos:start="33:72" pos:end="33:75"><expr pos:start="33:72" pos:end="33:75"><name pos:start="33:72" pos:end="33:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:77"><expr pos:start="35:9" pos:end="35:76"><call pos:start="35:9" pos:end="35:76"><name pos:start="35:9" pos:end="35:28">av_fifo_generic_read</name><argument_list pos:start="35:29" pos:end="35:76">(<argument pos:start="35:30" pos:end="35:42"><expr pos:start="35:30" pos:end="35:42"><name pos:start="35:30" pos:end="35:42"><name pos:start="35:30" pos:end="35:30">q</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:42">async_fifo</name></name></expr></argument>, <argument pos:start="35:45" pos:end="35:47"><expr pos:start="35:45" pos:end="35:47"><operator pos:start="35:45" pos:end="35:45">&amp;</operator><name pos:start="35:46" pos:end="35:47">bs</name></expr></argument>,      <argument pos:start="35:55" pos:end="35:64"><expr pos:start="35:55" pos:end="35:64"><sizeof pos:start="35:55" pos:end="35:64">sizeof<argument_list pos:start="35:61" pos:end="35:64">(<argument pos:start="35:62" pos:end="35:63"><expr pos:start="35:62" pos:end="35:63"><name pos:start="35:62" pos:end="35:63">bs</name></expr></argument>)</argument_list></sizeof></expr></argument>,      <argument pos:start="35:72" pos:end="35:75"><expr pos:start="35:72" pos:end="35:75"><name pos:start="35:72" pos:end="35:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <do pos:start="39:9" pos:end="43:46">do <block pos:start="39:12" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:69">

            <expr_stmt pos:start="41:13" pos:end="41:69"><expr pos:start="41:13" pos:end="41:68"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:68"><name pos:start="41:19" pos:end="41:44">MFXVideoCORE_SyncOperation</name><argument_list pos:start="41:45" pos:end="41:68">(<argument pos:start="41:46" pos:end="41:55"><expr pos:start="41:46" pos:end="41:55"><name pos:start="41:46" pos:end="41:55"><name pos:start="41:46" pos:end="41:46">q</name><operator pos:start="41:47" pos:end="41:48">-&gt;</operator><name pos:start="41:49" pos:end="41:55">session</name></name></expr></argument>, <argument pos:start="41:58" pos:end="41:61"><expr pos:start="41:58" pos:end="41:61"><name pos:start="41:58" pos:end="41:61">sync</name></expr></argument>, <argument pos:start="41:64" pos:end="41:67"><expr pos:start="41:64" pos:end="41:67"><literal type="number" pos:start="41:64" pos:end="41:67">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="43:17" pos:end="43:45">(<expr pos:start="43:18" pos:end="43:44"><name pos:start="43:18" pos:end="43:20">ret</name> <operator pos:start="43:22" pos:end="43:23">==</operator> <name pos:start="43:25" pos:end="43:44">MFX_WRN_IN_EXECUTION</name></expr>)</condition>;</do>



        <expr_stmt pos:start="47:9" pos:end="47:99"><expr pos:start="47:9" pos:end="47:98"><name pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:15">new_pkt</name><operator pos:start="47:16" pos:end="47:16">.</operator><name pos:start="47:17" pos:end="47:19">dts</name></name>  <operator pos:start="47:22" pos:end="47:22">=</operator> <macro pos:start="47:24" pos:end="47:98"><name pos:start="47:24" pos:end="47:35">av_rescale_q</name><argument_list pos:start="47:36" pos:end="47:98">(<argument pos:start="47:37" pos:end="47:55">bs-&gt;DecodeTimeStamp</argument>, <argument pos:start="47:58" pos:end="47:71">(AVRational){<literal type="number" pos:start="47:71" pos:end="47:71">1</literal></argument>, <argument pos:start="47:74" pos:end="47:79"><literal type="number" pos:start="47:74" pos:end="47:78">90000</literal>}</argument>, <argument pos:start="47:82" pos:end="47:97">avctx-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:99"><expr pos:start="49:9" pos:end="49:98"><name pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:15">new_pkt</name><operator pos:start="49:16" pos:end="49:16">.</operator><name pos:start="49:17" pos:end="49:19">pts</name></name>  <operator pos:start="49:22" pos:end="49:22">=</operator> <macro pos:start="49:24" pos:end="49:98"><name pos:start="49:24" pos:end="49:35">av_rescale_q</name><argument_list pos:start="49:36" pos:end="49:98">(<argument pos:start="49:37" pos:end="49:49">bs-&gt;TimeStamp</argument>,       <argument pos:start="49:58" pos:end="49:71">(AVRational){<literal type="number" pos:start="49:71" pos:end="49:71">1</literal></argument>, <argument pos:start="49:74" pos:end="49:79"><literal type="number" pos:start="49:74" pos:end="49:78">90000</literal>}</argument>, <argument pos:start="49:82" pos:end="49:97">avctx-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:38"><expr pos:start="51:9" pos:end="51:37"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:15">new_pkt</name><operator pos:start="51:16" pos:end="51:16">.</operator><name pos:start="51:17" pos:end="51:20">size</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:37"><name pos:start="51:24" pos:end="51:25">bs</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:37">DataLength</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="55:9" pos:end="64:0"><if pos:start="55:9" pos:end="64:0">if <condition pos:start="55:12" pos:end="57:47">(<expr pos:start="55:13" pos:end="57:46"><name pos:start="55:13" pos:end="55:25"><name pos:start="55:13" pos:end="55:14">bs</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:25">FrameType</name></name> <operator pos:start="55:27" pos:end="55:27">&amp;</operator> <name pos:start="55:29" pos:end="55:45">MFX_FRAMETYPE_IDR</name> <operator pos:start="55:47" pos:end="55:48">||</operator>

            <name pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:14">bs</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:25">FrameType</name></name> <operator pos:start="57:27" pos:end="57:27">&amp;</operator> <name pos:start="57:29" pos:end="57:46">MFX_FRAMETYPE_xIDR</name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="64:0"><block_content pos:start="59:13" pos:end="64:0">

            <expr_stmt pos:start="59:13" pos:end="64:0"><expr pos:start="59:13" pos:end="59:44"><name pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:19">new_pkt</name><operator pos:start="59:20" pos:end="59:20">.</operator><name pos:start="59:21" pos:end="59:25">flags</name></name> <operator pos:start="59:27" pos:end="59:28">|=</operator> <name pos:start="59:30" pos:end="59:44">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:if pos:start="63:1" pos:end="63:22">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:22"><name pos:start="63:5" pos:end="63:22">FF_API_CODED_FRAME</name></expr></cpp:if>

<macro pos:start="65:1" pos:end="65:31"><name pos:start="65:1" pos:end="65:31">FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

        <if_stmt pos:start="67:9" pos:end="77:62"><if pos:start="67:9" pos:end="69:62">if <condition pos:start="67:12" pos:end="67:80">(<expr pos:start="67:13" pos:end="67:79"><name pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:14">bs</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:25">FrameType</name></name> <operator pos:start="67:27" pos:end="67:27">&amp;</operator> <name pos:start="67:29" pos:end="67:43">MFX_FRAMETYPE_I</name> <operator pos:start="67:45" pos:end="67:46">||</operator> <name pos:start="67:48" pos:end="67:60"><name pos:start="67:48" pos:end="67:49">bs</name><operator pos:start="67:50" pos:end="67:51">-&gt;</operator><name pos:start="67:52" pos:end="67:60">FrameType</name></name> <operator pos:start="67:62" pos:end="67:62">&amp;</operator> <name pos:start="67:64" pos:end="67:79">MFX_FRAMETYPE_xI</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:62"><block_content pos:start="69:13" pos:end="69:62">

            <expr_stmt pos:start="69:13" pos:end="69:62"><expr pos:start="69:13" pos:end="69:61"><name pos:start="69:13" pos:end="69:41"><name pos:start="69:13" pos:end="69:17">avctx</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:30">coded_frame</name><operator pos:start="69:31" pos:end="69:32">-&gt;</operator><name pos:start="69:33" pos:end="69:41">pict_type</name></name> <operator pos:start="69:43" pos:end="69:43">=</operator> <name pos:start="69:45" pos:end="69:61">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="71:9" pos:end="73:62">else if <condition pos:start="71:17" pos:end="71:85">(<expr pos:start="71:18" pos:end="71:84"><name pos:start="71:18" pos:end="71:30"><name pos:start="71:18" pos:end="71:19">bs</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:30">FrameType</name></name> <operator pos:start="71:32" pos:end="71:32">&amp;</operator> <name pos:start="71:34" pos:end="71:48">MFX_FRAMETYPE_P</name> <operator pos:start="71:50" pos:end="71:51">||</operator> <name pos:start="71:53" pos:end="71:65"><name pos:start="71:53" pos:end="71:54">bs</name><operator pos:start="71:55" pos:end="71:56">-&gt;</operator><name pos:start="71:57" pos:end="71:65">FrameType</name></name> <operator pos:start="71:67" pos:end="71:67">&amp;</operator> <name pos:start="71:69" pos:end="71:84">MFX_FRAMETYPE_xP</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:62"><block_content pos:start="73:13" pos:end="73:62">

            <expr_stmt pos:start="73:13" pos:end="73:62"><expr pos:start="73:13" pos:end="73:61"><name pos:start="73:13" pos:end="73:41"><name pos:start="73:13" pos:end="73:17">avctx</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:30">coded_frame</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:41">pict_type</name></name> <operator pos:start="73:43" pos:end="73:43">=</operator> <name pos:start="73:45" pos:end="73:61">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="75:9" pos:end="77:62">else if <condition pos:start="75:17" pos:end="75:85">(<expr pos:start="75:18" pos:end="75:84"><name pos:start="75:18" pos:end="75:30"><name pos:start="75:18" pos:end="75:19">bs</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:30">FrameType</name></name> <operator pos:start="75:32" pos:end="75:32">&amp;</operator> <name pos:start="75:34" pos:end="75:48">MFX_FRAMETYPE_B</name> <operator pos:start="75:50" pos:end="75:51">||</operator> <name pos:start="75:53" pos:end="75:65"><name pos:start="75:53" pos:end="75:54">bs</name><operator pos:start="75:55" pos:end="75:56">-&gt;</operator><name pos:start="75:57" pos:end="75:65">FrameType</name></name> <operator pos:start="75:67" pos:end="75:67">&amp;</operator> <name pos:start="75:69" pos:end="75:84">MFX_FRAMETYPE_xB</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:62"><block_content pos:start="77:13" pos:end="77:62">

            <expr_stmt pos:start="77:13" pos:end="77:62"><expr pos:start="77:13" pos:end="77:61"><name pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:17">avctx</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:30">coded_frame</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:41">pict_type</name></name> <operator pos:start="77:43" pos:end="77:43">=</operator> <name pos:start="77:45" pos:end="77:61">AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt pos:start="79:1" pos:end="85:22"><decl pos:start="79:1" pos:end="85:21"><type pos:start="79:1" pos:end="82:0"><name pos:start="79:1" pos:end="82:0">FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>



        <name pos:start="85:9" pos:end="85:16">av_freep</name><argument_list pos:start="85:17" pos:end="85:21">(<argument pos:start="85:18" pos:end="85:20"><expr pos:start="85:18" pos:end="85:20"><operator pos:start="85:18" pos:end="85:18">&amp;</operator><name pos:start="85:19" pos:end="85:20">bs</name></expr></argument>)</argument_list></decl>;</decl_stmt>



        <if_stmt pos:start="89:9" pos:end="121:27"><if pos:start="89:9" pos:end="119:9">if <condition pos:start="89:12" pos:end="89:22">(<expr pos:start="89:13" pos:end="89:21"><name pos:start="89:13" pos:end="89:21"><name pos:start="89:13" pos:end="89:15">pkt</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:21">data</name></name></expr>)</condition> <block pos:start="89:24" pos:end="119:9">{<block_content pos:start="91:13" pos:end="117:27">

            <if_stmt pos:start="91:13" pos:end="101:13"><if pos:start="91:13" pos:end="101:13">if <condition pos:start="91:16" pos:end="91:41">(<expr pos:start="91:17" pos:end="91:40"><name pos:start="91:17" pos:end="91:25"><name pos:start="91:17" pos:end="91:19">pkt</name><operator pos:start="91:20" pos:end="91:21">-&gt;</operator><name pos:start="91:22" pos:end="91:25">size</name></name> <operator pos:start="91:27" pos:end="91:27">&lt;</operator> <name pos:start="91:29" pos:end="91:40"><name pos:start="91:29" pos:end="91:35">new_pkt</name><operator pos:start="91:36" pos:end="91:36">.</operator><name pos:start="91:37" pos:end="91:40">size</name></name></expr>)</condition> <block pos:start="91:43" pos:end="101:13">{<block_content pos:start="93:17" pos:end="99:39">

                <expr_stmt pos:start="93:17" pos:end="95:48"><expr pos:start="93:17" pos:end="95:47"><call pos:start="93:17" pos:end="95:47"><name pos:start="93:17" pos:end="93:22">av_log</name><argument_list pos:start="93:23" pos:end="95:47">(<argument pos:start="93:24" pos:end="93:28"><expr pos:start="93:24" pos:end="93:28"><name pos:start="93:24" pos:end="93:28">avctx</name></expr></argument>, <argument pos:start="93:31" pos:end="93:42"><expr pos:start="93:31" pos:end="93:42"><name pos:start="93:31" pos:end="93:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:45" pos:end="93:90"><expr pos:start="93:45" pos:end="93:90"><literal type="string" pos:start="93:45" pos:end="93:90">"Submitted buffer not large enough: %d &lt; %d\n"</literal></expr></argument>,

                       <argument pos:start="95:24" pos:end="95:32"><expr pos:start="95:24" pos:end="95:32"><name pos:start="95:24" pos:end="95:32"><name pos:start="95:24" pos:end="95:26">pkt</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:32">size</name></name></expr></argument>, <argument pos:start="95:35" pos:end="95:46"><expr pos:start="95:35" pos:end="95:46"><name pos:start="95:35" pos:end="95:46"><name pos:start="95:35" pos:end="95:41">new_pkt</name><operator pos:start="95:42" pos:end="95:42">.</operator><name pos:start="95:43" pos:end="95:46">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:42"><expr pos:start="97:17" pos:end="97:41"><call pos:start="97:17" pos:end="97:41"><name pos:start="97:17" pos:end="97:31">av_packet_unref</name><argument_list pos:start="97:32" pos:end="97:41">(<argument pos:start="97:33" pos:end="97:40"><expr pos:start="97:33" pos:end="97:40"><operator pos:start="97:33" pos:end="97:33">&amp;</operator><name pos:start="97:34" pos:end="97:40">new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="99:17" pos:end="99:39">return <expr pos:start="99:24" pos:end="99:38"><call pos:start="99:24" pos:end="99:38"><name pos:start="99:24" pos:end="99:30">AVERROR</name><argument_list pos:start="99:31" pos:end="99:38">(<argument pos:start="99:32" pos:end="99:37"><expr pos:start="99:32" pos:end="99:37"><name pos:start="99:32" pos:end="99:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="105:13" pos:end="105:58"><expr pos:start="105:13" pos:end="105:57"><call pos:start="105:13" pos:end="105:57"><name pos:start="105:13" pos:end="105:18">memcpy</name><argument_list pos:start="105:19" pos:end="105:57">(<argument pos:start="105:20" pos:end="105:28"><expr pos:start="105:20" pos:end="105:28"><name pos:start="105:20" pos:end="105:28"><name pos:start="105:20" pos:end="105:22">pkt</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:28">data</name></name></expr></argument>, <argument pos:start="105:31" pos:end="105:42"><expr pos:start="105:31" pos:end="105:42"><name pos:start="105:31" pos:end="105:42"><name pos:start="105:31" pos:end="105:37">new_pkt</name><operator pos:start="105:38" pos:end="105:38">.</operator><name pos:start="105:39" pos:end="105:42">data</name></name></expr></argument>, <argument pos:start="105:45" pos:end="105:56"><expr pos:start="105:45" pos:end="105:56"><name pos:start="105:45" pos:end="105:56"><name pos:start="105:45" pos:end="105:51">new_pkt</name><operator pos:start="105:52" pos:end="105:52">.</operator><name pos:start="105:53" pos:end="105:56">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:37"><expr pos:start="107:13" pos:end="107:36"><name pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:15">pkt</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:21">size</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:36"><name pos:start="107:25" pos:end="107:31">new_pkt</name><operator pos:start="107:32" pos:end="107:32">.</operator><name pos:start="107:33" pos:end="107:36">size</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:54"><expr pos:start="111:13" pos:end="111:53"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:53"><name pos:start="111:19" pos:end="111:38">av_packet_copy_props</name><argument_list pos:start="111:39" pos:end="111:53">(<argument pos:start="111:40" pos:end="111:42"><expr pos:start="111:40" pos:end="111:42"><name pos:start="111:40" pos:end="111:42">pkt</name></expr></argument>, <argument pos:start="111:45" pos:end="111:52"><expr pos:start="111:45" pos:end="111:52"><operator pos:start="111:45" pos:end="111:45">&amp;</operator><name pos:start="111:46" pos:end="111:52">new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:38"><expr pos:start="113:13" pos:end="113:37"><call pos:start="113:13" pos:end="113:37"><name pos:start="113:13" pos:end="113:27">av_packet_unref</name><argument_list pos:start="113:28" pos:end="113:37">(<argument pos:start="113:29" pos:end="113:36"><expr pos:start="113:29" pos:end="113:36"><operator pos:start="113:29" pos:end="113:29">&amp;</operator><name pos:start="113:30" pos:end="113:36">new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="117:27"><if pos:start="115:13" pos:end="117:27">if <condition pos:start="115:16" pos:end="115:24">(<expr pos:start="115:17" pos:end="115:23"><name pos:start="115:17" pos:end="115:19">ret</name> <operator pos:start="115:21" pos:end="115:21">&lt;</operator> <literal type="number" pos:start="115:23" pos:end="115:23">0</literal></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="117:27"><block_content pos:start="117:17" pos:end="117:27">

                <return pos:start="117:17" pos:end="117:27">return <expr pos:start="117:24" pos:end="117:26"><name pos:start="117:24" pos:end="117:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="119:11" pos:end="121:27">else<block type="pseudo" pos:start="121:13" pos:end="121:27"><block_content pos:start="121:13" pos:end="121:27">

            <expr_stmt pos:start="121:13" pos:end="121:27"><expr pos:start="121:13" pos:end="121:26"><operator pos:start="121:13" pos:end="121:13">*</operator><name pos:start="121:14" pos:end="121:16">pkt</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:26">new_pkt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:24"><expr pos:start="125:9" pos:end="125:23"><operator pos:start="125:9" pos:end="125:9">*</operator><name pos:start="125:10" pos:end="125:19">got_packet</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <literal type="number" pos:start="125:23" pos:end="125:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="131:5" pos:end="131:13">return <expr pos:start="131:12" pos:end="131:12"><literal type="number" pos:start="131:12" pos:end="131:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
