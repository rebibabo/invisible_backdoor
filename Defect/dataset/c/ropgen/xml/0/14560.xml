<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14560.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">slirp_remove_hostfwd</name><parameter_list pos:start="1:25" pos:end="1:77">(<parameter pos:start="1:26" pos:end="1:35"><decl pos:start="1:26" pos:end="1:35"><type pos:start="1:26" pos:end="1:35"><name pos:start="1:26" pos:end="1:28">int</name></type> <name pos:start="1:30" pos:end="1:35">is_udp</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:61"><decl pos:start="1:38" pos:end="1:61"><type pos:start="1:38" pos:end="1:61"><name pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:43">struct</name> <name pos:start="1:45" pos:end="1:51">in_addr</name></name></type> <name pos:start="1:53" pos:end="1:61">host_addr</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:76">host_port</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:17">socket</name></name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">so</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:17">socket</name></name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">head</name> <init pos:start="7:25" pos:end="7:48">= <expr pos:start="7:27" pos:end="7:48"><operator pos:start="7:27" pos:end="7:27">(</operator><ternary pos:start="7:28" pos:end="7:47"><condition pos:start="7:28" pos:end="7:35"><expr pos:start="7:28" pos:end="7:33"><name pos:start="7:28" pos:end="7:33">is_udp</name></expr> ?</condition><then pos:start="7:37" pos:end="7:40"> <expr pos:start="7:37" pos:end="7:40"><operator pos:start="7:37" pos:end="7:37">&amp;</operator><name pos:start="7:38" pos:end="7:40">udb</name></expr> </then><else pos:start="7:42" pos:end="7:47">: <expr pos:start="7:44" pos:end="7:47"><operator pos:start="7:44" pos:end="7:44">&amp;</operator><name pos:start="7:45" pos:end="7:47">tcb</name></expr></else></ternary><operator pos:start="7:48" pos:end="7:48">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">sockaddr_in</name></name></type> <name pos:start="9:24" pos:end="9:27">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">port</name> <init pos:start="11:14" pos:end="11:31">= <expr pos:start="11:16" pos:end="11:31"><call pos:start="11:16" pos:end="11:31"><name pos:start="11:16" pos:end="11:20">htons</name><argument_list pos:start="11:21" pos:end="11:31">(<argument pos:start="11:22" pos:end="11:30"><expr pos:start="11:22" pos:end="11:30"><name pos:start="11:22" pos:end="11:30">host_port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">socklen_t</name></type> <name pos:start="13:15" pos:end="13:22">addr_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name> <init pos:start="15:11" pos:end="15:13">= <expr pos:start="15:13" pos:end="15:13"><literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr></init></decl>;</decl_stmt>



 <label pos:start="19:2" pos:end="19:12"><name pos:start="19:2" pos:end="19:11">loop_again</name>:</label>

    <for pos:start="21:5" pos:end="41:5">for <control pos:start="21:9" pos:end="21:58">(<init pos:start="21:10" pos:end="21:28"><expr pos:start="21:10" pos:end="21:27"><name pos:start="21:10" pos:end="21:11">so</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:27"><name pos:start="21:15" pos:end="21:18">head</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:27">so_next</name></name></expr>;</init> <condition pos:start="21:30" pos:end="21:40"><expr pos:start="21:30" pos:end="21:39"><name pos:start="21:30" pos:end="21:31">so</name> <operator pos:start="21:33" pos:end="21:34">!=</operator> <name pos:start="21:36" pos:end="21:39">head</name></expr>;</condition> <incr pos:start="21:42" pos:end="21:57"><expr pos:start="21:42" pos:end="21:57"><name pos:start="21:42" pos:end="21:43">so</name> <operator pos:start="21:45" pos:end="21:45">=</operator> <name pos:start="21:47" pos:end="21:57"><name pos:start="21:47" pos:end="21:48">so</name><operator pos:start="21:49" pos:end="21:50">-&gt;</operator><name pos:start="21:51" pos:end="21:57">so_next</name></name></expr></incr>)</control> <block pos:start="21:60" pos:end="41:5">{<block_content pos:start="23:9" pos:end="39:9">

        <expr_stmt pos:start="23:9" pos:end="23:32"><expr pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:16">addr_len</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <sizeof pos:start="23:20" pos:end="23:31">sizeof<argument_list pos:start="23:26" pos:end="23:31">(<argument pos:start="23:27" pos:end="23:30"><expr pos:start="23:27" pos:end="23:30"><name pos:start="23:27" pos:end="23:30">addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="39:9"><if pos:start="25:9" pos:end="39:9">if <condition pos:start="25:12" pos:end="29:34">(<expr pos:start="25:13" pos:end="29:33"><call pos:start="25:13" pos:end="25:67"><name pos:start="25:13" pos:end="25:23">getsockname</name><argument_list pos:start="25:24" pos:end="25:67">(<argument pos:start="25:25" pos:end="25:29"><expr pos:start="25:25" pos:end="25:29"><name pos:start="25:25" pos:end="25:29"><name pos:start="25:25" pos:end="25:26">so</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:29">s</name></name></expr></argument>, <argument pos:start="25:32" pos:end="25:55"><expr pos:start="25:32" pos:end="25:55"><operator pos:start="25:32" pos:end="25:32">(</operator>struct <name pos:start="25:40" pos:end="25:47">sockaddr</name> <operator pos:start="25:49" pos:end="25:49">*</operator><operator pos:start="25:50" pos:end="25:50">)</operator><operator pos:start="25:51" pos:end="25:51">&amp;</operator><name pos:start="25:52" pos:end="25:55">addr</name></expr></argument>, <argument pos:start="25:58" pos:end="25:66"><expr pos:start="25:58" pos:end="25:66"><operator pos:start="25:58" pos:end="25:58">&amp;</operator><name pos:start="25:59" pos:end="25:66">addr_len</name></expr></argument>)</argument_list></call> <operator pos:start="25:69" pos:end="25:70">==</operator> <literal type="number" pos:start="25:72" pos:end="25:72">0</literal> <operator pos:start="25:74" pos:end="25:75">&amp;&amp;</operator>

            <name pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:16">addr</name><operator pos:start="27:17" pos:end="27:17">.</operator><name pos:start="27:18" pos:end="27:25">sin_addr</name><operator pos:start="27:26" pos:end="27:26">.</operator><name pos:start="27:27" pos:end="27:32">s_addr</name></name> <operator pos:start="27:34" pos:end="27:35">==</operator> <name pos:start="27:37" pos:end="27:52"><name pos:start="27:37" pos:end="27:45">host_addr</name><operator pos:start="27:46" pos:end="27:46">.</operator><name pos:start="27:47" pos:end="27:52">s_addr</name></name> <operator pos:start="27:54" pos:end="27:55">&amp;&amp;</operator>

            <name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:16">addr</name><operator pos:start="29:17" pos:end="29:17">.</operator><name pos:start="29:18" pos:end="29:25">sin_port</name></name> <operator pos:start="29:27" pos:end="29:28">==</operator> <name pos:start="29:30" pos:end="29:33">port</name></expr>)</condition> <block pos:start="29:36" pos:end="39:9">{<block_content pos:start="31:13" pos:end="37:28">

            <expr_stmt pos:start="31:13" pos:end="31:25"><expr pos:start="31:13" pos:end="31:24"><call pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:17">close</name><argument_list pos:start="31:18" pos:end="31:24">(<argument pos:start="31:19" pos:end="31:23"><expr pos:start="31:19" pos:end="31:23"><name pos:start="31:19" pos:end="31:23"><name pos:start="31:19" pos:end="31:20">so</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:23">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:23"><expr pos:start="33:13" pos:end="33:22"><call pos:start="33:13" pos:end="33:22"><name pos:start="33:13" pos:end="33:18">sofree</name><argument_list pos:start="33:19" pos:end="33:22">(<argument pos:start="33:20" pos:end="33:21"><expr pos:start="33:20" pos:end="33:21"><name pos:start="33:20" pos:end="33:21">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:16"><expr pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:13">n</name><operator pos:start="35:14" pos:end="35:15">++</operator></expr>;</expr_stmt>

            <goto pos:start="37:13" pos:end="37:28">goto <name pos:start="37:18" pos:end="37:27">loop_again</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="45:5" pos:end="45:13">return <expr pos:start="45:12" pos:end="45:12"><name pos:start="45:12" pos:end="45:12">n</name></expr>;</return>

</block_content>}</block></function>
</unit>
