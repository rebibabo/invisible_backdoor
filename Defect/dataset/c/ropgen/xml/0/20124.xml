<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20124.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:34">ff_mpeg4_pred_dc</name><parameter_list pos:start="1:35" pos:end="1:100">(<parameter pos:start="1:36" pos:end="1:53"><decl pos:start="1:36" pos:end="1:53"><type pos:start="1:36" pos:end="1:53"><name pos:start="1:36" pos:end="1:49">MpegEncContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type> <name pos:start="1:53" pos:end="1:53">s</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:60"><decl pos:start="1:56" pos:end="1:60"><type pos:start="1:56" pos:end="1:60"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:60">n</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:71"><decl pos:start="1:63" pos:end="1:71"><type pos:start="1:63" pos:end="1:71"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:71">level</name></decl></parameter>, <parameter pos:start="1:74" pos:end="1:85"><decl pos:start="1:74" pos:end="1:85"><type pos:start="1:74" pos:end="1:85"><name pos:start="1:74" pos:end="1:76">int</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:85">dir_ptr</name></decl></parameter>, <parameter pos:start="1:88" pos:end="1:99"><decl pos:start="1:88" pos:end="1:99"><type pos:start="1:88" pos:end="1:99"><name pos:start="1:88" pos:end="1:90">int</name></type> <name pos:start="1:92" pos:end="1:99">encoding</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:15">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">a</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">b</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">c</name></decl>, <decl pos:start="5:18" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:21">wrap</name></decl>, <decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:27">pred</name></decl>, <decl pos:start="5:30" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:30" pos:end="5:34">scale</name></decl>, <decl pos:start="5:37" pos:end="5:39"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:37" pos:end="5:39">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">int16_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:19">dc_val</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:25">/* find prediction */</comment>

    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:14">(<expr pos:start="13:9" pos:end="13:13"><name pos:start="13:9" pos:end="13:9">n</name> <operator pos:start="13:11" pos:end="13:11">&lt;</operator> <literal type="number" pos:start="13:13" pos:end="13:13">4</literal></expr>)</condition> <block pos:start="13:16" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:30">

        <expr_stmt pos:start="15:9" pos:end="15:30"><expr pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:13">scale</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:29"><name pos:start="15:17" pos:end="15:17">s</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:29">y_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="17:7" pos:end="21:5">else <block pos:start="17:12" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:30">

        <expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:13">scale</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:29"><name pos:start="19:17" pos:end="19:17">s</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:29">c_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="23:5" pos:end="25:17"><if pos:start="23:5" pos:end="25:17">if<condition pos:start="23:7" pos:end="23:15">(<expr pos:start="23:8" pos:end="23:14"><name pos:start="23:8" pos:end="23:14">IS_3IV1</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:17"><block_content pos:start="25:9" pos:end="25:17">

        <expr_stmt pos:start="25:9" pos:end="25:17"><expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:13">scale</name><operator pos:start="25:14" pos:end="25:14">=</operator> <literal type="number" pos:start="25:16" pos:end="25:16">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:27"><expr pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:8">wrap</name><operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:26"><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:23">block_wrap</name><index pos:start="29:24" pos:end="29:26">[<expr pos:start="29:25" pos:end="29:25"><name pos:start="29:25" pos:end="29:25">n</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:46"><expr pos:start="31:5" pos:end="31:45"><name pos:start="31:5" pos:end="31:10">dc_val</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:25"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:22">dc_val</name><index pos:start="31:23" pos:end="31:25">[<expr pos:start="31:24" pos:end="31:24"><literal type="number" pos:start="31:24" pos:end="31:24">0</literal></expr>]</index></name> <operator pos:start="31:27" pos:end="31:27">+</operator> <name pos:start="31:29" pos:end="31:45"><name pos:start="31:29" pos:end="31:29">s</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:42">block_index</name><index pos:start="31:43" pos:end="31:45">[<expr pos:start="31:44" pos:end="31:44"><name pos:start="31:44" pos:end="31:44">n</name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="39:7">/* B C

     * A X

     */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:21"><expr pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:5">a</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <name pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:14">dc_val</name><index pos:start="41:15" pos:end="41:20">[ <expr pos:start="41:17" pos:end="41:19"><operator pos:start="41:17" pos:end="41:17">-</operator> <literal type="number" pos:start="41:19" pos:end="41:19">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:28"><expr pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:5">b</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <name pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:14">dc_val</name><index pos:start="43:15" pos:end="43:27">[ <expr pos:start="43:17" pos:end="43:26"><operator pos:start="43:17" pos:end="43:17">-</operator> <literal type="number" pos:start="43:19" pos:end="43:21">1</literal> <operator pos:start="43:21" pos:end="43:21">-</operator> <name pos:start="43:23" pos:end="43:26">wrap</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:24"><expr pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:5">c</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <name pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:14">dc_val</name><index pos:start="45:15" pos:end="45:23">[ <expr pos:start="45:17" pos:end="45:22"><operator pos:start="45:17" pos:end="45:17">-</operator> <name pos:start="45:19" pos:end="45:22">wrap</name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:100">/* outside slice handling (we can't do that by memset as we need the dc for error resilience) */</comment>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if<condition pos:start="51:7" pos:end="51:35">(<expr pos:start="51:8" pos:end="51:34"><name pos:start="51:8" pos:end="51:26"><name pos:start="51:8" pos:end="51:8">s</name><operator pos:start="51:9" pos:end="51:10">-&gt;</operator><name pos:start="51:11" pos:end="51:26">first_slice_line</name></name> <operator pos:start="51:28" pos:end="51:29">&amp;&amp;</operator> <name pos:start="51:31" pos:end="51:31">n</name><operator pos:start="51:32" pos:end="51:33">!=</operator><literal type="number" pos:start="51:34" pos:end="51:34">3</literal></expr>)</condition><block pos:start="51:36" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:56">

        <if_stmt pos:start="53:9" pos:end="53:27"><if pos:start="53:9" pos:end="53:27">if<condition pos:start="53:11" pos:end="53:16">(<expr pos:start="53:12" pos:end="53:15"><name pos:start="53:12" pos:end="53:12">n</name><operator pos:start="53:13" pos:end="53:14">!=</operator><literal type="number" pos:start="53:15" pos:end="53:15">2</literal></expr>)</condition><block type="pseudo" pos:start="53:18" pos:end="53:27"><block_content pos:start="53:18" pos:end="53:27"> <expr_stmt pos:start="53:18" pos:end="53:27"><expr pos:start="53:18" pos:end="53:26"><name pos:start="53:18" pos:end="53:18">b</name><operator pos:start="53:19" pos:end="53:19">=</operator><name pos:start="53:20" pos:end="53:20">c</name><operator pos:start="53:21" pos:end="53:21">=</operator> <literal type="number" pos:start="53:23" pos:end="53:26">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="55:56"><if pos:start="55:9" pos:end="55:56">if<condition pos:start="55:11" pos:end="55:45">(<expr pos:start="55:12" pos:end="55:44"><name pos:start="55:12" pos:end="55:12">n</name><operator pos:start="55:13" pos:end="55:14">!=</operator><literal type="number" pos:start="55:15" pos:end="55:15">1</literal> <operator pos:start="55:17" pos:end="55:18">&amp;&amp;</operator> <name pos:start="55:20" pos:end="55:26"><name pos:start="55:20" pos:end="55:20">s</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:26">mb_x</name></name> <operator pos:start="55:28" pos:end="55:29">==</operator> <name pos:start="55:31" pos:end="55:44"><name pos:start="55:31" pos:end="55:31">s</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:44">resync_mb_x</name></name></expr>)</condition><block type="pseudo" pos:start="55:47" pos:end="55:56"><block_content pos:start="55:47" pos:end="55:56"> <expr_stmt pos:start="55:47" pos:end="55:56"><expr pos:start="55:47" pos:end="55:55"><name pos:start="55:47" pos:end="55:47">b</name><operator pos:start="55:48" pos:end="55:48">=</operator><name pos:start="55:49" pos:end="55:49">a</name><operator pos:start="55:50" pos:end="55:50">=</operator> <literal type="number" pos:start="55:52" pos:end="55:55">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if<condition pos:start="59:7" pos:end="59:64">(<expr pos:start="59:8" pos:end="59:63"><name pos:start="59:8" pos:end="59:14"><name pos:start="59:8" pos:end="59:8">s</name><operator pos:start="59:9" pos:end="59:10">-&gt;</operator><name pos:start="59:11" pos:end="59:14">mb_x</name></name> <operator pos:start="59:16" pos:end="59:17">==</operator> <name pos:start="59:19" pos:end="59:32"><name pos:start="59:19" pos:end="59:19">s</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:32">resync_mb_x</name></name> <operator pos:start="59:34" pos:end="59:35">&amp;&amp;</operator> <name pos:start="59:37" pos:end="59:43"><name pos:start="59:37" pos:end="59:37">s</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:43">mb_y</name></name> <operator pos:start="59:45" pos:end="59:46">==</operator> <name pos:start="59:48" pos:end="59:61"><name pos:start="59:48" pos:end="59:48">s</name><operator pos:start="59:49" pos:end="59:50">-&gt;</operator><name pos:start="59:51" pos:end="59:61">resync_mb_y</name></name><operator pos:start="59:62" pos:end="59:62">+</operator><literal type="number" pos:start="59:63" pos:end="59:63">1</literal></expr>)</condition><block pos:start="59:65" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:19">

        <if_stmt pos:start="61:9" pos:end="63:19"><if pos:start="61:9" pos:end="63:19">if<condition pos:start="61:11" pos:end="61:32">(<expr pos:start="61:12" pos:end="61:31"><name pos:start="61:12" pos:end="61:12">n</name><operator pos:start="61:13" pos:end="61:14">==</operator><literal type="number" pos:start="61:15" pos:end="61:15">0</literal> <operator pos:start="61:17" pos:end="61:18">||</operator> <name pos:start="61:20" pos:end="61:20">n</name><operator pos:start="61:21" pos:end="61:22">==</operator><literal type="number" pos:start="61:23" pos:end="61:23">4</literal> <operator pos:start="61:25" pos:end="61:26">||</operator> <name pos:start="61:28" pos:end="61:28">n</name><operator pos:start="61:29" pos:end="61:30">==</operator><literal type="number" pos:start="61:31" pos:end="61:31">5</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:19"><block_content pos:start="63:13" pos:end="63:19">

            <expr_stmt pos:start="63:13" pos:end="63:19"><expr pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:13">b</name><operator pos:start="63:14" pos:end="63:14">=</operator><literal type="number" pos:start="63:15" pos:end="63:18">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="81:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:32">(<expr pos:start="69:9" pos:end="69:31"><call pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:11">abs</name><argument_list pos:start="69:12" pos:end="69:18">(<argument pos:start="69:13" pos:end="69:17"><expr pos:start="69:13" pos:end="69:17"><name pos:start="69:13" pos:end="69:13">a</name> <operator pos:start="69:15" pos:end="69:15">-</operator> <name pos:start="69:17" pos:end="69:17">b</name></expr></argument>)</argument_list></call> <operator pos:start="69:20" pos:end="69:20">&lt;</operator> <call pos:start="69:22" pos:end="69:31"><name pos:start="69:22" pos:end="69:24">abs</name><argument_list pos:start="69:25" pos:end="69:31">(<argument pos:start="69:26" pos:end="69:30"><expr pos:start="69:26" pos:end="69:30"><name pos:start="69:26" pos:end="69:26">b</name> <operator pos:start="69:28" pos:end="69:28">-</operator> <name pos:start="69:30" pos:end="69:30">c</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:34" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:21">

        <expr_stmt pos:start="71:9" pos:end="71:17"><expr pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:12">pred</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <name pos:start="71:16" pos:end="71:16">c</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:21"><expr pos:start="73:9" pos:end="73:20"><operator pos:start="73:9" pos:end="73:9">*</operator><name pos:start="73:10" pos:end="73:16">dir_ptr</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <literal type="number" pos:start="73:20" pos:end="73:20">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="73:23" pos:end="73:31">/* top */</comment>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="81:5">else <block pos:start="75:12" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:21">

        <expr_stmt pos:start="77:9" pos:end="77:17"><expr pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:12">pred</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <name pos:start="77:16" pos:end="77:16">a</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:21"><expr pos:start="79:9" pos:end="79:20"><operator pos:start="79:9" pos:end="79:9">*</operator><name pos:start="79:10" pos:end="79:16">dir_ptr</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <literal type="number" pos:start="79:20" pos:end="79:20">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="79:23" pos:end="79:32">/* left */</comment>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="83:5" pos:end="83:36">/* we assume pred is positive */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:8">pred</name> <operator pos:start="85:10" pos:end="85:10">=</operator> <call pos:start="85:12" pos:end="85:48"><name pos:start="85:12" pos:end="85:18">FASTDIV</name><argument_list pos:start="85:19" pos:end="85:48">(<argument pos:start="85:20" pos:end="85:40"><expr pos:start="85:20" pos:end="85:40"><operator pos:start="85:20" pos:end="85:20">(</operator><name pos:start="85:21" pos:end="85:24">pred</name> <operator pos:start="85:26" pos:end="85:26">+</operator> <operator pos:start="85:28" pos:end="85:28">(</operator><name pos:start="85:29" pos:end="85:33">scale</name> <operator pos:start="85:35" pos:end="85:36">&gt;&gt;</operator> <literal type="number" pos:start="85:38" pos:end="85:38">1</literal><operator pos:start="85:39" pos:end="85:39">)</operator><operator pos:start="85:40" pos:end="85:40">)</operator></expr></argument>, <argument pos:start="85:43" pos:end="85:47"><expr pos:start="85:43" pos:end="85:47"><name pos:start="85:43" pos:end="85:47">scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="119:5"><if pos:start="89:5" pos:end="93:5">if<condition pos:start="89:7" pos:end="89:16">(<expr pos:start="89:8" pos:end="89:15"><name pos:start="89:8" pos:end="89:15">encoding</name></expr>)</condition><block pos:start="89:17" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:27">

        <expr_stmt pos:start="91:9" pos:end="91:27"><expr pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:19">level</name> <operator pos:start="91:21" pos:end="91:21">-</operator> <name pos:start="91:23" pos:end="91:26">pred</name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="93:6" pos:end="119:5">else<block pos:start="93:10" pos:end="119:5">{<block_content pos:start="95:9" pos:end="117:9">

        <expr_stmt pos:start="95:9" pos:end="95:22"><expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:13">level</name> <operator pos:start="95:15" pos:end="95:16">+=</operator> <name pos:start="95:18" pos:end="95:21">pred</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:19"><expr pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:11">ret</name><operator pos:start="97:12" pos:end="97:12">=</operator> <name pos:start="97:14" pos:end="97:18">level</name></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="117:9"><if pos:start="99:9" pos:end="117:9">if<condition pos:start="99:11" pos:end="99:35">(<expr pos:start="99:12" pos:end="99:34"><name pos:start="99:12" pos:end="99:31"><name pos:start="99:12" pos:end="99:12">s</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:31">error_recognition</name></name><operator pos:start="99:32" pos:end="99:33">&gt;=</operator><literal type="number" pos:start="99:34" pos:end="99:34">3</literal></expr>)</condition><block pos:start="99:36" pos:end="117:9">{<block_content pos:start="101:13" pos:end="115:13">

            <if_stmt pos:start="101:13" pos:end="107:13"><if pos:start="101:13" pos:end="107:13">if<condition pos:start="101:15" pos:end="101:23">(<expr pos:start="101:16" pos:end="101:22"><name pos:start="101:16" pos:end="101:20">level</name><operator pos:start="101:21" pos:end="101:21">&lt;</operator><literal type="number" pos:start="101:22" pos:end="101:22">0</literal></expr>)</condition><block pos:start="101:24" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:26">

                <expr_stmt pos:start="103:17" pos:end="103:84"><expr pos:start="103:17" pos:end="103:83"><call pos:start="103:17" pos:end="103:83"><name pos:start="103:17" pos:end="103:22">av_log</name><argument_list pos:start="103:23" pos:end="103:83">(<argument pos:start="103:24" pos:end="103:31"><expr pos:start="103:24" pos:end="103:31"><name pos:start="103:24" pos:end="103:31"><name pos:start="103:24" pos:end="103:24">s</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:31">avctx</name></name></expr></argument>, <argument pos:start="103:34" pos:end="103:45"><expr pos:start="103:34" pos:end="103:45"><name pos:start="103:34" pos:end="103:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:48" pos:end="103:64"><expr pos:start="103:48" pos:end="103:64"><literal type="string" pos:start="103:48" pos:end="103:64">"dc&lt;0 at %dx%d\n"</literal></expr></argument>, <argument pos:start="103:67" pos:end="103:73"><expr pos:start="103:67" pos:end="103:73"><name pos:start="103:67" pos:end="103:73"><name pos:start="103:67" pos:end="103:67">s</name><operator pos:start="103:68" pos:end="103:69">-&gt;</operator><name pos:start="103:70" pos:end="103:73">mb_x</name></name></expr></argument>, <argument pos:start="103:76" pos:end="103:82"><expr pos:start="103:76" pos:end="103:82"><name pos:start="103:76" pos:end="103:82"><name pos:start="103:76" pos:end="103:76">s</name><operator pos:start="103:77" pos:end="103:78">-&gt;</operator><name pos:start="103:79" pos:end="103:82">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="105:17" pos:end="105:26">return <expr pos:start="105:24" pos:end="105:25"><operator pos:start="105:24" pos:end="105:24">-</operator><literal type="number" pos:start="105:25" pos:end="105:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="109:13" pos:end="115:13"><if pos:start="109:13" pos:end="115:13">if<condition pos:start="109:15" pos:end="109:42">(<expr pos:start="109:16" pos:end="109:41"><name pos:start="109:16" pos:end="109:20">level</name><operator pos:start="109:21" pos:end="109:21">*</operator><name pos:start="109:22" pos:end="109:26">scale</name> <operator pos:start="109:28" pos:end="109:28">&gt;</operator> <literal type="number" pos:start="109:30" pos:end="109:35">2048</literal> <operator pos:start="109:35" pos:end="109:35">+</operator> <name pos:start="109:37" pos:end="109:41">scale</name></expr>)</condition><block pos:start="109:43" pos:end="115:13">{<block_content pos:start="111:17" pos:end="113:26">

                <expr_stmt pos:start="111:17" pos:end="111:91"><expr pos:start="111:17" pos:end="111:90"><call pos:start="111:17" pos:end="111:90"><name pos:start="111:17" pos:end="111:22">av_log</name><argument_list pos:start="111:23" pos:end="111:90">(<argument pos:start="111:24" pos:end="111:31"><expr pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:24">s</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:31">avctx</name></name></expr></argument>, <argument pos:start="111:34" pos:end="111:45"><expr pos:start="111:34" pos:end="111:45"><name pos:start="111:34" pos:end="111:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:48" pos:end="111:71"><expr pos:start="111:48" pos:end="111:71"><literal type="string" pos:start="111:48" pos:end="111:71">"dc overflow at %dx%d\n"</literal></expr></argument>, <argument pos:start="111:74" pos:end="111:80"><expr pos:start="111:74" pos:end="111:80"><name pos:start="111:74" pos:end="111:80"><name pos:start="111:74" pos:end="111:74">s</name><operator pos:start="111:75" pos:end="111:76">-&gt;</operator><name pos:start="111:77" pos:end="111:80">mb_x</name></name></expr></argument>, <argument pos:start="111:83" pos:end="111:89"><expr pos:start="111:83" pos:end="111:89"><name pos:start="111:83" pos:end="111:89"><name pos:start="111:83" pos:end="111:83">s</name><operator pos:start="111:84" pos:end="111:85">-&gt;</operator><name pos:start="111:86" pos:end="111:89">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="113:17" pos:end="113:26">return <expr pos:start="113:24" pos:end="113:25"><operator pos:start="113:24" pos:end="113:24">-</operator><literal type="number" pos:start="113:25" pos:end="113:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:18"><expr pos:start="121:5" pos:end="121:17"><name pos:start="121:5" pos:end="121:9">level</name> <operator pos:start="121:11" pos:end="121:12">*=</operator><name pos:start="121:13" pos:end="121:17">scale</name></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="133:5"><if pos:start="123:5" pos:end="133:5">if<condition pos:start="123:7" pos:end="123:21">(<expr pos:start="123:8" pos:end="123:20"><name pos:start="123:8" pos:end="123:12">level</name><operator pos:start="123:13" pos:end="123:13">&amp;</operator><operator pos:start="123:14" pos:end="123:14">(</operator><operator pos:start="123:15" pos:end="123:15">~</operator><literal type="number" pos:start="123:16" pos:end="123:19">2047</literal><operator pos:start="123:20" pos:end="123:20">)</operator></expr>)</condition><block pos:start="123:22" pos:end="133:5">{<block_content pos:start="125:9" pos:end="131:23">

        <if_stmt pos:start="125:9" pos:end="131:23"><if pos:start="125:9" pos:end="127:20">if<condition pos:start="125:11" pos:end="125:19">(<expr pos:start="125:12" pos:end="125:18"><name pos:start="125:12" pos:end="125:16">level</name><operator pos:start="125:17" pos:end="125:17">&lt;</operator><literal type="number" pos:start="125:18" pos:end="125:18">0</literal></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:20"><block_content pos:start="127:13" pos:end="127:20">

            <expr_stmt pos:start="127:13" pos:end="127:20"><expr pos:start="127:13" pos:end="127:19"><name pos:start="127:13" pos:end="127:17">level</name><operator pos:start="127:18" pos:end="127:18">=</operator><literal type="number" pos:start="127:19" pos:end="127:19">0</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="129:9" pos:end="131:23">else if<condition pos:start="129:16" pos:end="129:53">(<expr pos:start="129:17" pos:end="129:52"><operator pos:start="129:17" pos:end="129:17">!</operator><operator pos:start="129:18" pos:end="129:18">(</operator><name pos:start="129:19" pos:end="129:36"><name pos:start="129:19" pos:end="129:19">s</name><operator pos:start="129:20" pos:end="129:21">-&gt;</operator><name pos:start="129:22" pos:end="129:36">workaround_bugs</name></name><operator pos:start="129:37" pos:end="129:37">&amp;</operator><name pos:start="129:38" pos:end="129:51">FF_BUG_DC_CLIP</name><operator pos:start="129:52" pos:end="129:52">)</operator></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:23"><block_content pos:start="131:13" pos:end="131:23">

            <expr_stmt pos:start="131:13" pos:end="131:23"><expr pos:start="131:13" pos:end="131:22"><name pos:start="131:13" pos:end="131:17">level</name><operator pos:start="131:18" pos:end="131:18">=</operator><literal type="number" pos:start="131:19" pos:end="131:22">2047</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:21"><expr pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:13"><name pos:start="135:5" pos:end="135:10">dc_val</name><index pos:start="135:11" pos:end="135:13">[<expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>]</index></name><operator pos:start="135:14" pos:end="135:14">=</operator> <name pos:start="135:16" pos:end="135:20">level</name></expr>;</expr_stmt>



    <return pos:start="139:5" pos:end="139:15">return <expr pos:start="139:12" pos:end="139:14"><name pos:start="139:12" pos:end="139:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
