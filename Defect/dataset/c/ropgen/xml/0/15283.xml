<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15283.c" pos:tabs="8"><function pos:start="1:1" pos:end="455:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">adpcm_encode_frame</name><parameter_list pos:start="1:30" pos:end="3:72">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:61">AVPacket</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:68">avpkt</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:50"><decl pos:start="3:31" pos:end="3:50"><type pos:start="3:31" pos:end="3:50"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:43">AVFrame</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:50">frame</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:71"><decl pos:start="3:53" pos:end="3:71"><type pos:start="3:53" pos:end="3:71"><name pos:start="3:53" pos:end="3:55">int</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:71">got_packet_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="455:1">{<block_content pos:start="7:5" pos:end="453:27">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">i</name></decl>, <decl pos:start="7:15" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:16">ch</name></decl>, <decl pos:start="7:19" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:20">st</name></decl>, <decl pos:start="7:23" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:30">pkt_size</name></decl>, <decl pos:start="7:33" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:33" pos:end="7:35">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">int16_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:26">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:11">int16_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier><modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:23">samples_p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:44"><type pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:22">ADPCMEncodeContext</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:25">c</name> <init pos:start="15:27" pos:end="15:44">= <expr pos:start="15:29" pos:end="15:44"><name pos:start="15:29" pos:end="15:44"><name pos:start="15:29" pos:end="15:33">avctx</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:16">buf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:46"><expr pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:11">samples</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <operator pos:start="21:15" pos:end="21:15">(</operator><specifier pos:start="21:16" pos:end="21:20">const</specifier> <name pos:start="21:22" pos:end="21:28">int16_t</name> <operator pos:start="21:30" pos:end="21:30">*</operator><operator pos:start="21:31" pos:end="21:31">)</operator><name pos:start="21:32" pos:end="21:45"><name pos:start="21:32" pos:end="21:36">frame</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:42">data</name><index pos:start="21:43" pos:end="21:45">[<expr pos:start="21:44" pos:end="21:44"><literal type="number" pos:start="21:44" pos:end="21:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:49"><expr pos:start="23:5" pos:end="23:48"><name pos:start="23:5" pos:end="23:13">samples_p</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <operator pos:start="23:17" pos:end="23:17">(</operator><name pos:start="23:18" pos:end="23:24">int16_t</name> <operator pos:start="23:26" pos:end="23:26">*</operator><operator pos:start="23:27" pos:end="23:27">*</operator><operator pos:start="23:28" pos:end="23:28">)</operator><name pos:start="23:29" pos:end="23:48"><name pos:start="23:29" pos:end="23:33">frame</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:48">extended_data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:6">st</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <name pos:start="25:10" pos:end="25:24"><name pos:start="25:10" pos:end="25:14">avctx</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:24">channels</name></name> <operator pos:start="25:26" pos:end="25:27">==</operator> <literal type="number" pos:start="25:29" pos:end="25:29">2</literal></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="35:38"><if pos:start="29:5" pos:end="31:86">if <condition pos:start="29:8" pos:end="29:49">(<expr pos:start="29:9" pos:end="29:48"><name pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:13">avctx</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:23">codec_id</name></name> <operator pos:start="29:25" pos:end="29:26">==</operator> <name pos:start="29:28" pos:end="29:48">AV_CODEC_ID_ADPCM_SWF</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:86"><block_content pos:start="31:9" pos:end="31:86">

        <expr_stmt pos:start="31:9" pos:end="31:86"><expr pos:start="31:9" pos:end="31:85"><name pos:start="31:9" pos:end="31:16">pkt_size</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <operator pos:start="31:20" pos:end="31:20">(</operator><literal type="number" pos:start="31:21" pos:end="31:23">2</literal> <operator pos:start="31:23" pos:end="31:23">+</operator> <name pos:start="31:25" pos:end="31:39"><name pos:start="31:25" pos:end="31:29">avctx</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:39">channels</name></name> <operator pos:start="31:41" pos:end="31:41">*</operator> <operator pos:start="31:43" pos:end="31:43">(</operator><literal type="number" pos:start="31:44" pos:end="31:47">22</literal> <operator pos:start="31:47" pos:end="31:47">+</operator> <literal type="number" pos:start="31:49" pos:end="31:49">4</literal> <operator pos:start="31:51" pos:end="31:51">*</operator> <operator pos:start="31:53" pos:end="31:53">(</operator><name pos:start="31:54" pos:end="31:70"><name pos:start="31:54" pos:end="31:58">frame</name><operator pos:start="31:59" pos:end="31:60">-&gt;</operator><name pos:start="31:61" pos:end="31:70">nb_samples</name></name> <operator pos:start="31:72" pos:end="31:72">-</operator> <literal type="number" pos:start="31:74" pos:end="31:74">1</literal><operator pos:start="31:75" pos:end="31:75">)</operator><operator pos:start="31:76" pos:end="31:76">)</operator> <operator pos:start="31:78" pos:end="31:78">+</operator> <literal type="number" pos:start="31:80" pos:end="31:80">7</literal><operator pos:start="31:81" pos:end="31:81">)</operator> <operator pos:start="31:83" pos:end="31:83">/</operator> <literal type="number" pos:start="31:85" pos:end="31:85">8</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="33:5" pos:end="35:38">else<block type="pseudo" pos:start="35:9" pos:end="35:38"><block_content pos:start="35:9" pos:end="35:38">

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:16">pkt_size</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:37"><name pos:start="35:20" pos:end="35:24">avctx</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:37">block_align</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="37:5" pos:end="39:19"><if pos:start="37:5" pos:end="39:19">if <condition pos:start="37:8" pos:end="37:57">(<expr pos:start="37:9" pos:end="37:56"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:12">ret</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:55"><name pos:start="37:16" pos:end="37:31">ff_alloc_packet2</name><argument_list pos:start="37:32" pos:end="37:55">(<argument pos:start="37:33" pos:end="37:37"><expr pos:start="37:33" pos:end="37:37"><name pos:start="37:33" pos:end="37:37">avctx</name></expr></argument>, <argument pos:start="37:40" pos:end="37:44"><expr pos:start="37:40" pos:end="37:44"><name pos:start="37:40" pos:end="37:44">avpkt</name></expr></argument>, <argument pos:start="37:47" pos:end="37:54"><expr pos:start="37:47" pos:end="37:54"><name pos:start="37:47" pos:end="37:54">pkt_size</name></expr></argument>)</argument_list></call><operator pos:start="37:56" pos:end="37:56">)</operator></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:19"><block_content pos:start="39:9" pos:end="39:19">

        <return pos:start="39:9" pos:end="39:19">return <expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:7">dst</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <name pos:start="41:11" pos:end="41:21"><name pos:start="41:11" pos:end="41:15">avpkt</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:21">data</name></name></expr>;</expr_stmt>



    <switch pos:start="45:5" pos:end="441:5">switch<condition pos:start="45:11" pos:end="45:28">(<expr pos:start="45:12" pos:end="45:27"><name pos:start="45:12" pos:end="45:27"><name pos:start="45:12" pos:end="45:16">avctx</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:23">codec</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:27">id</name></name></expr>)</condition> <block pos:start="45:30" pos:end="441:5">{<block_content pos:start="47:5" pos:end="439:31">

    <case pos:start="47:5" pos:end="47:35">case <expr pos:start="47:10" pos:end="47:34"><name pos:start="47:10" pos:end="47:34">AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

    <block pos:start="49:5" pos:end="139:5">{<block_content pos:start="51:9" pos:end="137:14">

        <decl_stmt pos:start="51:9" pos:end="51:22"><decl pos:start="51:9" pos:end="51:18"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:18">blocks</name></decl>, <decl pos:start="51:21" pos:end="51:21"><type ref="prev" pos:start="51:9" pos:end="51:11"/><name pos:start="51:21" pos:end="51:21">j</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:45"><expr pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:14">blocks</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <operator pos:start="55:18" pos:end="55:18">(</operator><name pos:start="55:19" pos:end="55:35"><name pos:start="55:19" pos:end="55:23">frame</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:35">nb_samples</name></name> <operator pos:start="55:37" pos:end="55:37">-</operator> <literal type="number" pos:start="55:39" pos:end="55:39">1</literal><operator pos:start="55:40" pos:end="55:40">)</operator> <operator pos:start="55:42" pos:end="55:42">/</operator> <literal type="number" pos:start="55:44" pos:end="55:44">8</literal></expr>;</expr_stmt>



        <for pos:start="59:9" pos:end="75:9">for <control pos:start="59:13" pos:end="59:48">(<init pos:start="59:14" pos:end="59:20"><expr pos:start="59:14" pos:end="59:19"><name pos:start="59:14" pos:end="59:15">ch</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>;</init> <condition pos:start="59:22" pos:end="59:42"><expr pos:start="59:22" pos:end="59:41"><name pos:start="59:22" pos:end="59:23">ch</name> <operator pos:start="59:25" pos:end="59:25">&lt;</operator> <name pos:start="59:27" pos:end="59:41"><name pos:start="59:27" pos:end="59:31">avctx</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:41">channels</name></name></expr>;</condition> <incr pos:start="59:44" pos:end="59:47"><expr pos:start="59:44" pos:end="59:47"><name pos:start="59:44" pos:end="59:45">ch</name><operator pos:start="59:46" pos:end="59:47">++</operator></expr></incr>)</control> <block pos:start="59:50" pos:end="75:9">{<block_content pos:start="61:13" pos:end="73:23">

            <decl_stmt pos:start="61:13" pos:end="61:56"><decl pos:start="61:13" pos:end="61:55"><type pos:start="61:13" pos:end="61:32"><name pos:start="61:13" pos:end="61:30">ADPCMChannelStatus</name> <modifier pos:start="61:32" pos:end="61:32">*</modifier></type><name pos:start="61:33" pos:end="61:38">status</name> <init pos:start="61:40" pos:end="61:55">= <expr pos:start="61:42" pos:end="61:55"><operator pos:start="61:42" pos:end="61:42">&amp;</operator><name pos:start="61:43" pos:end="61:55"><name pos:start="61:43" pos:end="61:43">c</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:51">status</name><index pos:start="61:52" pos:end="61:55">[<expr pos:start="61:53" pos:end="61:54"><name pos:start="61:53" pos:end="61:54">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:51"><expr pos:start="63:13" pos:end="63:50"><name pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:18">status</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:31">prev_sample</name></name> <operator pos:start="63:33" pos:end="63:33">=</operator> <name pos:start="63:35" pos:end="63:50"><name pos:start="63:35" pos:end="63:43">samples_p</name><index pos:start="63:44" pos:end="63:47">[<expr pos:start="63:45" pos:end="63:46"><name pos:start="63:45" pos:end="63:46">ch</name></expr>]</index><index pos:start="63:48" pos:end="63:50">[<expr pos:start="63:49" pos:end="63:49"><literal type="number" pos:start="63:49" pos:end="63:49">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <comment type="block" pos:start="65:13" pos:end="67:61">/* status-&gt;step_index = 0;

               XXX: not sure how to init the state machine */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:59"><expr pos:start="69:13" pos:end="69:58"><call pos:start="69:13" pos:end="69:58"><name pos:start="69:13" pos:end="69:31">bytestream_put_le16</name><argument_list pos:start="69:32" pos:end="69:58">(<argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><operator pos:start="69:33" pos:end="69:33">&amp;</operator><name pos:start="69:34" pos:end="69:36">dst</name></expr></argument>, <argument pos:start="69:39" pos:end="69:57"><expr pos:start="69:39" pos:end="69:57"><name pos:start="69:39" pos:end="69:57"><name pos:start="69:39" pos:end="69:44">status</name><operator pos:start="69:45" pos:end="69:46">-&gt;</operator><name pos:start="69:47" pos:end="69:57">prev_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:40"><expr pos:start="71:13" pos:end="71:39"><operator pos:start="71:13" pos:end="71:13">*</operator><name pos:start="71:14" pos:end="71:16">dst</name><operator pos:start="71:17" pos:end="71:18">++</operator> <operator pos:start="71:20" pos:end="71:20">=</operator> <name pos:start="71:22" pos:end="71:39"><name pos:start="71:22" pos:end="71:27">status</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:39">step_index</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:23"><expr pos:start="73:13" pos:end="73:22"><operator pos:start="73:13" pos:end="73:13">*</operator><name pos:start="73:14" pos:end="73:16">dst</name><operator pos:start="73:17" pos:end="73:18">++</operator> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="73:25" pos:end="73:37">/* unknown */</comment>

        </block_content>}</block></for>



        <comment type="block" pos:start="79:9" pos:end="79:69">/* stereo: 4 bytes (8 samples) for left, 4 bytes for right */</comment>

        <if_stmt pos:start="81:9" pos:end="135:9"><if pos:start="81:9" pos:end="111:9">if <condition pos:start="81:12" pos:end="81:31">(<expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:26"><name pos:start="81:13" pos:end="81:17">avctx</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:26">trellis</name></name> <operator pos:start="81:28" pos:end="81:28">&gt;</operator> <literal type="number" pos:start="81:30" pos:end="81:30">0</literal></expr>)</condition> <block pos:start="81:33" pos:end="111:9">{<block_content pos:start="83:13" pos:end="109:25">

            <expr_stmt pos:start="83:13" pos:end="83:78"><expr pos:start="83:13" pos:end="83:77"><call pos:start="83:13" pos:end="83:77"><name pos:start="83:13" pos:end="83:28">FF_ALLOC_OR_GOTO</name><argument_list pos:start="83:29" pos:end="83:77">(<argument pos:start="83:30" pos:end="83:34"><expr pos:start="83:30" pos:end="83:34"><name pos:start="83:30" pos:end="83:34">avctx</name></expr></argument>, <argument pos:start="83:37" pos:end="83:39"><expr pos:start="83:37" pos:end="83:39"><name pos:start="83:37" pos:end="83:39">buf</name></expr></argument>, <argument pos:start="83:42" pos:end="83:69"><expr pos:start="83:42" pos:end="83:69"><name pos:start="83:42" pos:end="83:56"><name pos:start="83:42" pos:end="83:46">avctx</name><operator pos:start="83:47" pos:end="83:48">-&gt;</operator><name pos:start="83:49" pos:end="83:56">channels</name></name> <operator pos:start="83:58" pos:end="83:58">*</operator> <name pos:start="83:60" pos:end="83:65">blocks</name> <operator pos:start="83:67" pos:end="83:67">*</operator> <literal type="number" pos:start="83:69" pos:end="83:69">8</literal></expr></argument>, <argument pos:start="83:72" pos:end="83:76"><expr pos:start="83:72" pos:end="83:76"><name pos:start="83:72" pos:end="83:76">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="85:13" pos:end="93:13">for <control pos:start="85:17" pos:end="85:52">(<init pos:start="85:18" pos:end="85:24"><expr pos:start="85:18" pos:end="85:23"><name pos:start="85:18" pos:end="85:19">ch</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <literal type="number" pos:start="85:23" pos:end="85:23">0</literal></expr>;</init> <condition pos:start="85:26" pos:end="85:46"><expr pos:start="85:26" pos:end="85:45"><name pos:start="85:26" pos:end="85:27">ch</name> <operator pos:start="85:29" pos:end="85:29">&lt;</operator> <name pos:start="85:31" pos:end="85:45"><name pos:start="85:31" pos:end="85:35">avctx</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:45">channels</name></name></expr>;</condition> <incr pos:start="85:48" pos:end="85:51"><expr pos:start="85:48" pos:end="85:51"><name pos:start="85:48" pos:end="85:49">ch</name><operator pos:start="85:50" pos:end="85:51">++</operator></expr></incr>)</control> <block pos:start="85:54" pos:end="93:13">{<block_content pos:start="87:17" pos:end="91:54">

                <expr_stmt pos:start="87:17" pos:end="91:54"><expr pos:start="87:17" pos:end="91:53"><call pos:start="87:17" pos:end="91:53"><name pos:start="87:17" pos:end="87:38">adpcm_compress_trellis</name><argument_list pos:start="87:39" pos:end="91:53">(<argument pos:start="87:40" pos:end="87:44"><expr pos:start="87:40" pos:end="87:44"><name pos:start="87:40" pos:end="87:44">avctx</name></expr></argument>, <argument pos:start="87:47" pos:end="87:63"><expr pos:start="87:47" pos:end="87:63"><operator pos:start="87:47" pos:end="87:47">&amp;</operator><name pos:start="87:48" pos:end="87:63"><name pos:start="87:48" pos:end="87:56">samples_p</name><index pos:start="87:57" pos:end="87:60">[<expr pos:start="87:58" pos:end="87:59"><name pos:start="87:58" pos:end="87:59">ch</name></expr>]</index><index pos:start="87:61" pos:end="87:63">[<expr pos:start="87:62" pos:end="87:62"><literal type="number" pos:start="87:62" pos:end="87:62">1</literal></expr>]</index></name></expr></argument>,

                                       <argument pos:start="89:40" pos:end="89:60"><expr pos:start="89:40" pos:end="89:60"><name pos:start="89:40" pos:end="89:42">buf</name> <operator pos:start="89:44" pos:end="89:44">+</operator> <name pos:start="89:46" pos:end="89:47">ch</name> <operator pos:start="89:49" pos:end="89:49">*</operator> <name pos:start="89:51" pos:end="89:56">blocks</name> <operator pos:start="89:58" pos:end="89:58">*</operator> <literal type="number" pos:start="89:60" pos:end="89:60">8</literal></expr></argument>, <argument pos:start="89:63" pos:end="89:76"><expr pos:start="89:63" pos:end="89:76"><operator pos:start="89:63" pos:end="89:63">&amp;</operator><name pos:start="89:64" pos:end="89:76"><name pos:start="89:64" pos:end="89:64">c</name><operator pos:start="89:65" pos:end="89:66">-&gt;</operator><name pos:start="89:67" pos:end="89:72">status</name><index pos:start="89:73" pos:end="89:76">[<expr pos:start="89:74" pos:end="89:75"><name pos:start="89:74" pos:end="89:75">ch</name></expr>]</index></name></expr></argument>,

                                       <argument pos:start="91:40" pos:end="91:49"><expr pos:start="91:40" pos:end="91:49"><name pos:start="91:40" pos:end="91:45">blocks</name> <operator pos:start="91:47" pos:end="91:47">*</operator> <literal type="number" pos:start="91:49" pos:end="91:49">8</literal></expr></argument>, <argument pos:start="91:52" pos:end="91:52"><expr pos:start="91:52" pos:end="91:52"><literal type="number" pos:start="91:52" pos:end="91:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="95:13" pos:end="107:13">for <control pos:start="95:17" pos:end="95:40">(<init pos:start="95:18" pos:end="95:23"><expr pos:start="95:18" pos:end="95:22"><name pos:start="95:18" pos:end="95:18">i</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <literal type="number" pos:start="95:22" pos:end="95:22">0</literal></expr>;</init> <condition pos:start="95:25" pos:end="95:35"><expr pos:start="95:25" pos:end="95:34"><name pos:start="95:25" pos:end="95:25">i</name> <operator pos:start="95:27" pos:end="95:27">&lt;</operator> <name pos:start="95:29" pos:end="95:34">blocks</name></expr>;</condition> <incr pos:start="95:37" pos:end="95:39"><expr pos:start="95:37" pos:end="95:39"><name pos:start="95:37" pos:end="95:37">i</name><operator pos:start="95:38" pos:end="95:39">++</operator></expr></incr>)</control> <block pos:start="95:42" pos:end="107:13">{<block_content pos:start="97:17" pos:end="105:17">

                <for pos:start="97:17" pos:end="105:17">for <control pos:start="97:21" pos:end="97:56">(<init pos:start="97:22" pos:end="97:28"><expr pos:start="97:22" pos:end="97:27"><name pos:start="97:22" pos:end="97:23">ch</name> <operator pos:start="97:25" pos:end="97:25">=</operator> <literal type="number" pos:start="97:27" pos:end="97:27">0</literal></expr>;</init> <condition pos:start="97:30" pos:end="97:50"><expr pos:start="97:30" pos:end="97:49"><name pos:start="97:30" pos:end="97:31">ch</name> <operator pos:start="97:33" pos:end="97:33">&lt;</operator> <name pos:start="97:35" pos:end="97:49"><name pos:start="97:35" pos:end="97:39">avctx</name><operator pos:start="97:40" pos:end="97:41">-&gt;</operator><name pos:start="97:42" pos:end="97:49">channels</name></name></expr>;</condition> <incr pos:start="97:52" pos:end="97:55"><expr pos:start="97:52" pos:end="97:55"><name pos:start="97:52" pos:end="97:53">ch</name><operator pos:start="97:54" pos:end="97:55">++</operator></expr></incr>)</control> <block pos:start="97:58" pos:end="105:17">{<block_content pos:start="99:21" pos:end="103:62">

                    <decl_stmt pos:start="99:21" pos:end="99:66"><decl pos:start="99:21" pos:end="99:65"><type pos:start="99:21" pos:end="99:29"><name pos:start="99:21" pos:end="99:27">uint8_t</name> <modifier pos:start="99:29" pos:end="99:29">*</modifier></type><name pos:start="99:30" pos:end="99:33">buf1</name> <init pos:start="99:35" pos:end="99:65">= <expr pos:start="99:37" pos:end="99:65"><name pos:start="99:37" pos:end="99:39">buf</name> <operator pos:start="99:41" pos:end="99:41">+</operator> <name pos:start="99:43" pos:end="99:44">ch</name> <operator pos:start="99:46" pos:end="99:46">*</operator> <name pos:start="99:48" pos:end="99:53">blocks</name> <operator pos:start="99:55" pos:end="99:55">*</operator> <literal type="number" pos:start="99:57" pos:end="99:59">8</literal> <operator pos:start="99:59" pos:end="99:59">+</operator> <name pos:start="99:61" pos:end="99:61">i</name> <operator pos:start="99:63" pos:end="99:63">*</operator> <literal type="number" pos:start="99:65" pos:end="99:65">8</literal></expr></init></decl>;</decl_stmt>

                    <for pos:start="101:21" pos:end="103:62">for <control pos:start="101:25" pos:end="101:46">(<init pos:start="101:26" pos:end="101:31"><expr pos:start="101:26" pos:end="101:30"><name pos:start="101:26" pos:end="101:26">j</name> <operator pos:start="101:28" pos:end="101:28">=</operator> <literal type="number" pos:start="101:30" pos:end="101:30">0</literal></expr>;</init> <condition pos:start="101:33" pos:end="101:38"><expr pos:start="101:33" pos:end="101:37"><name pos:start="101:33" pos:end="101:33">j</name> <operator pos:start="101:35" pos:end="101:35">&lt;</operator> <literal type="number" pos:start="101:37" pos:end="101:37">8</literal></expr>;</condition> <incr pos:start="101:40" pos:end="101:45"><expr pos:start="101:40" pos:end="101:45"><name pos:start="101:40" pos:end="101:40">j</name> <operator pos:start="101:42" pos:end="101:43">+=</operator> <literal type="number" pos:start="101:45" pos:end="101:45">2</literal></expr></incr>)</control><block type="pseudo" pos:start="103:25" pos:end="103:62"><block_content pos:start="103:25" pos:end="103:62">

                        <expr_stmt pos:start="103:25" pos:end="103:62"><expr pos:start="103:25" pos:end="103:61"><operator pos:start="103:25" pos:end="103:25">*</operator><name pos:start="103:26" pos:end="103:28">dst</name><operator pos:start="103:29" pos:end="103:30">++</operator> <operator pos:start="103:32" pos:end="103:32">=</operator> <name pos:start="103:34" pos:end="103:40"><name pos:start="103:34" pos:end="103:37">buf1</name><index pos:start="103:38" pos:end="103:40">[<expr pos:start="103:39" pos:end="103:39"><name pos:start="103:39" pos:end="103:39">j</name></expr>]</index></name> <operator pos:start="103:42" pos:end="103:42">|</operator> <operator pos:start="103:44" pos:end="103:44">(</operator><name pos:start="103:45" pos:end="103:55"><name pos:start="103:45" pos:end="103:48">buf1</name><index pos:start="103:49" pos:end="103:55">[<expr pos:start="103:50" pos:end="103:54"><name pos:start="103:50" pos:end="103:50">j</name> <operator pos:start="103:52" pos:end="103:52">+</operator> <literal type="number" pos:start="103:54" pos:end="103:54">1</literal></expr>]</index></name> <operator pos:start="103:57" pos:end="103:58">&lt;&lt;</operator> <literal type="number" pos:start="103:60" pos:end="103:60">4</literal><operator pos:start="103:61" pos:end="103:61">)</operator></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></for>

            </block_content>}</block></for>

            <expr_stmt pos:start="109:13" pos:end="109:25"><expr pos:start="109:13" pos:end="109:24"><call pos:start="109:13" pos:end="109:24"><name pos:start="109:13" pos:end="109:19">av_free</name><argument_list pos:start="109:20" pos:end="109:24">(<argument pos:start="109:21" pos:end="109:23"><expr pos:start="109:21" pos:end="109:23"><name pos:start="109:21" pos:end="109:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="111:11" pos:end="135:9">else <block pos:start="111:16" pos:end="135:9">{<block_content pos:start="113:13" pos:end="133:13">

            <for pos:start="113:13" pos:end="133:13">for <control pos:start="113:17" pos:end="113:40">(<init pos:start="113:18" pos:end="113:23"><expr pos:start="113:18" pos:end="113:22"><name pos:start="113:18" pos:end="113:18">i</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <literal type="number" pos:start="113:22" pos:end="113:22">0</literal></expr>;</init> <condition pos:start="113:25" pos:end="113:35"><expr pos:start="113:25" pos:end="113:34"><name pos:start="113:25" pos:end="113:25">i</name> <operator pos:start="113:27" pos:end="113:27">&lt;</operator> <name pos:start="113:29" pos:end="113:34">blocks</name></expr>;</condition> <incr pos:start="113:37" pos:end="113:39"><expr pos:start="113:37" pos:end="113:39"><name pos:start="113:37" pos:end="113:37">i</name><operator pos:start="113:38" pos:end="113:39">++</operator></expr></incr>)</control> <block pos:start="113:42" pos:end="133:13">{<block_content pos:start="115:17" pos:end="131:17">

                <for pos:start="115:17" pos:end="131:17">for <control pos:start="115:21" pos:end="115:56">(<init pos:start="115:22" pos:end="115:28"><expr pos:start="115:22" pos:end="115:27"><name pos:start="115:22" pos:end="115:23">ch</name> <operator pos:start="115:25" pos:end="115:25">=</operator> <literal type="number" pos:start="115:27" pos:end="115:27">0</literal></expr>;</init> <condition pos:start="115:30" pos:end="115:50"><expr pos:start="115:30" pos:end="115:49"><name pos:start="115:30" pos:end="115:31">ch</name> <operator pos:start="115:33" pos:end="115:33">&lt;</operator> <name pos:start="115:35" pos:end="115:49"><name pos:start="115:35" pos:end="115:39">avctx</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:49">channels</name></name></expr>;</condition> <incr pos:start="115:52" pos:end="115:55"><expr pos:start="115:52" pos:end="115:55"><name pos:start="115:52" pos:end="115:53">ch</name><operator pos:start="115:54" pos:end="115:55">++</operator></expr></incr>)</control> <block pos:start="115:58" pos:end="131:17">{<block_content pos:start="117:21" pos:end="129:21">

                    <decl_stmt pos:start="117:21" pos:end="117:64"><decl pos:start="117:21" pos:end="117:63"><type pos:start="117:21" pos:end="117:40"><name pos:start="117:21" pos:end="117:38">ADPCMChannelStatus</name> <modifier pos:start="117:40" pos:end="117:40">*</modifier></type><name pos:start="117:41" pos:end="117:46">status</name> <init pos:start="117:48" pos:end="117:63">= <expr pos:start="117:50" pos:end="117:63"><operator pos:start="117:50" pos:end="117:50">&amp;</operator><name pos:start="117:51" pos:end="117:63"><name pos:start="117:51" pos:end="117:51">c</name><operator pos:start="117:52" pos:end="117:53">-&gt;</operator><name pos:start="117:54" pos:end="117:59">status</name><index pos:start="117:60" pos:end="117:63">[<expr pos:start="117:61" pos:end="117:62"><name pos:start="117:61" pos:end="117:62">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="119:21" pos:end="119:67"><decl pos:start="119:21" pos:end="119:66"><type pos:start="119:21" pos:end="119:35"><specifier pos:start="119:21" pos:end="119:25">const</specifier> <name pos:start="119:27" pos:end="119:33">int16_t</name> <modifier pos:start="119:35" pos:end="119:35">*</modifier></type><name pos:start="119:36" pos:end="119:38">smp</name> <init pos:start="119:40" pos:end="119:66">= <expr pos:start="119:42" pos:end="119:66"><operator pos:start="119:42" pos:end="119:42">&amp;</operator><name pos:start="119:43" pos:end="119:66"><name pos:start="119:43" pos:end="119:51">samples_p</name><index pos:start="119:52" pos:end="119:55">[<expr pos:start="119:53" pos:end="119:54"><name pos:start="119:53" pos:end="119:54">ch</name></expr>]</index><index pos:start="119:56" pos:end="119:66">[<expr pos:start="119:57" pos:end="119:65"><literal type="number" pos:start="119:57" pos:end="119:59">1</literal> <operator pos:start="119:59" pos:end="119:59">+</operator> <name pos:start="119:61" pos:end="119:61">i</name> <operator pos:start="119:63" pos:end="119:63">*</operator> <literal type="number" pos:start="119:65" pos:end="119:65">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <for pos:start="121:21" pos:end="129:21">for <control pos:start="121:25" pos:end="121:46">(<init pos:start="121:26" pos:end="121:31"><expr pos:start="121:26" pos:end="121:30"><name pos:start="121:26" pos:end="121:26">j</name> <operator pos:start="121:28" pos:end="121:28">=</operator> <literal type="number" pos:start="121:30" pos:end="121:30">0</literal></expr>;</init> <condition pos:start="121:33" pos:end="121:38"><expr pos:start="121:33" pos:end="121:37"><name pos:start="121:33" pos:end="121:33">j</name> <operator pos:start="121:35" pos:end="121:35">&lt;</operator> <literal type="number" pos:start="121:37" pos:end="121:37">8</literal></expr>;</condition> <incr pos:start="121:40" pos:end="121:45"><expr pos:start="121:40" pos:end="121:45"><name pos:start="121:40" pos:end="121:40">j</name> <operator pos:start="121:42" pos:end="121:43">+=</operator> <literal type="number" pos:start="121:45" pos:end="121:45">2</literal></expr></incr>)</control> <block pos:start="121:48" pos:end="129:21">{<block_content pos:start="123:25" pos:end="127:35">

                        <decl_stmt pos:start="123:25" pos:end="123:82"><decl pos:start="123:25" pos:end="123:81"><type pos:start="123:25" pos:end="123:31"><name pos:start="123:25" pos:end="123:31">uint8_t</name></type> <name pos:start="123:33" pos:end="123:33">v</name> <init pos:start="123:35" pos:end="123:81">= <expr pos:start="123:37" pos:end="123:81"><call pos:start="123:37" pos:end="123:81"><name pos:start="123:37" pos:end="123:61">adpcm_ima_compress_sample</name><argument_list pos:start="123:62" pos:end="123:81">(<argument pos:start="123:63" pos:end="123:68"><expr pos:start="123:63" pos:end="123:68"><name pos:start="123:63" pos:end="123:68">status</name></expr></argument>, <argument pos:start="123:71" pos:end="123:80"><expr pos:start="123:71" pos:end="123:80"><name pos:start="123:71" pos:end="123:80"><name pos:start="123:71" pos:end="123:73">smp</name><index pos:start="123:74" pos:end="123:80">[<expr pos:start="123:75" pos:end="123:75"><name pos:start="123:75" pos:end="123:75">j</name></expr>    ]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="125:25" pos:end="125:87"><expr pos:start="125:25" pos:end="125:86"><name pos:start="125:25" pos:end="125:25">v</name>        <operator pos:start="125:34" pos:end="125:35">|=</operator> <call pos:start="125:37" pos:end="125:81"><name pos:start="125:37" pos:end="125:61">adpcm_ima_compress_sample</name><argument_list pos:start="125:62" pos:end="125:81">(<argument pos:start="125:63" pos:end="125:68"><expr pos:start="125:63" pos:end="125:68"><name pos:start="125:63" pos:end="125:68">status</name></expr></argument>, <argument pos:start="125:71" pos:end="125:80"><expr pos:start="125:71" pos:end="125:80"><name pos:start="125:71" pos:end="125:80"><name pos:start="125:71" pos:end="125:73">smp</name><index pos:start="125:74" pos:end="125:80">[<expr pos:start="125:75" pos:end="125:79"><name pos:start="125:75" pos:end="125:75">j</name> <operator pos:start="125:77" pos:end="125:77">+</operator> <literal type="number" pos:start="125:79" pos:end="125:79">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="125:83" pos:end="125:84">&lt;&lt;</operator> <literal type="number" pos:start="125:86" pos:end="125:86">4</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="127:25" pos:end="127:35"><expr pos:start="127:25" pos:end="127:34"><operator pos:start="127:25" pos:end="127:25">*</operator><name pos:start="127:26" pos:end="127:28">dst</name><operator pos:start="127:29" pos:end="127:30">++</operator> <operator pos:start="127:32" pos:end="127:32">=</operator> <name pos:start="127:34" pos:end="127:34">v</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    </block_content>}</block>

    <case pos:start="141:5" pos:end="141:34">case <expr pos:start="141:10" pos:end="141:33"><name pos:start="141:10" pos:end="141:33">AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

    <block pos:start="143:5" pos:end="197:5">{<block_content pos:start="145:9" pos:end="195:14">

        <decl_stmt pos:start="145:9" pos:end="145:25"><decl pos:start="145:9" pos:end="145:24"><type pos:start="145:9" pos:end="145:21"><name pos:start="145:9" pos:end="145:21">PutBitContext</name></type> <name pos:start="145:23" pos:end="145:24">pb</name></decl>;</decl_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:46"><expr pos:start="147:9" pos:end="147:45"><call pos:start="147:9" pos:end="147:45"><name pos:start="147:9" pos:end="147:21">init_put_bits</name><argument_list pos:start="147:22" pos:end="147:45">(<argument pos:start="147:23" pos:end="147:25"><expr pos:start="147:23" pos:end="147:25"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:25">pb</name></expr></argument>, <argument pos:start="147:28" pos:end="147:30"><expr pos:start="147:28" pos:end="147:30"><name pos:start="147:28" pos:end="147:30">dst</name></expr></argument>, <argument pos:start="147:33" pos:end="147:44"><expr pos:start="147:33" pos:end="147:44"><name pos:start="147:33" pos:end="147:40">pkt_size</name> <operator pos:start="147:42" pos:end="147:42">*</operator> <literal type="number" pos:start="147:44" pos:end="147:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="151:9" pos:end="189:9">for <control pos:start="151:13" pos:end="151:48">(<init pos:start="151:14" pos:end="151:20"><expr pos:start="151:14" pos:end="151:19"><name pos:start="151:14" pos:end="151:15">ch</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <literal type="number" pos:start="151:19" pos:end="151:19">0</literal></expr>;</init> <condition pos:start="151:22" pos:end="151:42"><expr pos:start="151:22" pos:end="151:41"><name pos:start="151:22" pos:end="151:23">ch</name> <operator pos:start="151:25" pos:end="151:25">&lt;</operator> <name pos:start="151:27" pos:end="151:41"><name pos:start="151:27" pos:end="151:31">avctx</name><operator pos:start="151:32" pos:end="151:33">-&gt;</operator><name pos:start="151:34" pos:end="151:41">channels</name></name></expr>;</condition> <incr pos:start="151:44" pos:end="151:47"><expr pos:start="151:44" pos:end="151:47"><name pos:start="151:44" pos:end="151:45">ch</name><operator pos:start="151:46" pos:end="151:47">++</operator></expr></incr>)</control> <block pos:start="151:50" pos:end="189:9">{<block_content pos:start="153:13" pos:end="187:13">

            <decl_stmt pos:start="153:13" pos:end="153:56"><decl pos:start="153:13" pos:end="153:55"><type pos:start="153:13" pos:end="153:32"><name pos:start="153:13" pos:end="153:30">ADPCMChannelStatus</name> <modifier pos:start="153:32" pos:end="153:32">*</modifier></type><name pos:start="153:33" pos:end="153:38">status</name> <init pos:start="153:40" pos:end="153:55">= <expr pos:start="153:42" pos:end="153:55"><operator pos:start="153:42" pos:end="153:42">&amp;</operator><name pos:start="153:43" pos:end="153:55"><name pos:start="153:43" pos:end="153:43">c</name><operator pos:start="153:44" pos:end="153:45">-&gt;</operator><name pos:start="153:46" pos:end="153:51">status</name><index pos:start="153:52" pos:end="153:55">[<expr pos:start="153:53" pos:end="153:54"><name pos:start="153:53" pos:end="153:54">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:66"><expr pos:start="155:13" pos:end="155:65"><call pos:start="155:13" pos:end="155:65"><name pos:start="155:13" pos:end="155:20">put_bits</name><argument_list pos:start="155:21" pos:end="155:65">(<argument pos:start="155:22" pos:end="155:24"><expr pos:start="155:22" pos:end="155:24"><operator pos:start="155:22" pos:end="155:22">&amp;</operator><name pos:start="155:23" pos:end="155:24">pb</name></expr></argument>, <argument pos:start="155:27" pos:end="155:27"><expr pos:start="155:27" pos:end="155:27"><literal type="number" pos:start="155:27" pos:end="155:27">9</literal></expr></argument>, <argument pos:start="155:30" pos:end="155:64"><expr pos:start="155:30" pos:end="155:64"><operator pos:start="155:30" pos:end="155:30">(</operator><name pos:start="155:31" pos:end="155:49"><name pos:start="155:31" pos:end="155:36">status</name><operator pos:start="155:37" pos:end="155:38">-&gt;</operator><name pos:start="155:39" pos:end="155:49">prev_sample</name></name> <operator pos:start="155:51" pos:end="155:51">&amp;</operator> <literal type="number" pos:start="155:53" pos:end="155:58">0xFFFF</literal><operator pos:start="155:59" pos:end="155:59">)</operator> <operator pos:start="155:61" pos:end="155:62">&gt;&gt;</operator> <literal type="number" pos:start="155:64" pos:end="155:64">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:50"><expr pos:start="157:13" pos:end="157:49"><call pos:start="157:13" pos:end="157:49"><name pos:start="157:13" pos:end="157:20">put_bits</name><argument_list pos:start="157:21" pos:end="157:49">(<argument pos:start="157:22" pos:end="157:24"><expr pos:start="157:22" pos:end="157:24"><operator pos:start="157:22" pos:end="157:22">&amp;</operator><name pos:start="157:23" pos:end="157:24">pb</name></expr></argument>, <argument pos:start="157:27" pos:end="157:27"><expr pos:start="157:27" pos:end="157:27"><literal type="number" pos:start="157:27" pos:end="157:27">7</literal></expr></argument>,  <argument pos:start="157:31" pos:end="157:48"><expr pos:start="157:31" pos:end="157:48"><name pos:start="157:31" pos:end="157:48"><name pos:start="157:31" pos:end="157:36">status</name><operator pos:start="157:37" pos:end="157:38">-&gt;</operator><name pos:start="157:39" pos:end="157:48">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="159:13" pos:end="187:13"><if pos:start="159:13" pos:end="171:13">if <condition pos:start="159:16" pos:end="159:35">(<expr pos:start="159:17" pos:end="159:34"><name pos:start="159:17" pos:end="159:30"><name pos:start="159:17" pos:end="159:21">avctx</name><operator pos:start="159:22" pos:end="159:23">-&gt;</operator><name pos:start="159:24" pos:end="159:30">trellis</name></name> <operator pos:start="159:32" pos:end="159:32">&gt;</operator> <literal type="number" pos:start="159:34" pos:end="159:34">0</literal></expr>)</condition> <block pos:start="159:37" pos:end="171:13">{<block_content pos:start="161:17" pos:end="169:49">

                <decl_stmt pos:start="161:17" pos:end="161:32"><decl pos:start="161:17" pos:end="161:31"><type pos:start="161:17" pos:end="161:23"><name pos:start="161:17" pos:end="161:23">uint8_t</name></type> <name pos:start="161:25" pos:end="161:31"><name pos:start="161:25" pos:end="161:27">buf</name><index pos:start="161:28" pos:end="161:31">[<expr pos:start="161:29" pos:end="161:30"><literal type="number" pos:start="161:29" pos:end="161:30">64</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="163:17" pos:end="165:46"><expr pos:start="163:17" pos:end="165:45"><call pos:start="163:17" pos:end="165:45"><name pos:start="163:17" pos:end="163:38">adpcm_compress_trellis</name><argument_list pos:start="163:39" pos:end="165:45">(<argument pos:start="163:40" pos:end="163:44"><expr pos:start="163:40" pos:end="163:44"><name pos:start="163:40" pos:end="163:44">avctx</name></expr></argument>, <argument pos:start="163:47" pos:end="163:63"><expr pos:start="163:47" pos:end="163:63"><operator pos:start="163:47" pos:end="163:47">&amp;</operator><name pos:start="163:48" pos:end="163:63"><name pos:start="163:48" pos:end="163:56">samples_p</name><index pos:start="163:57" pos:end="163:60">[<expr pos:start="163:58" pos:end="163:59"><name pos:start="163:58" pos:end="163:59">ch</name></expr>]</index><index pos:start="163:61" pos:end="163:63">[<expr pos:start="163:62" pos:end="163:62"><literal type="number" pos:start="163:62" pos:end="163:62">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:66" pos:end="163:68"><expr pos:start="163:66" pos:end="163:68"><name pos:start="163:66" pos:end="163:68">buf</name></expr></argument>, <argument pos:start="163:71" pos:end="163:76"><expr pos:start="163:71" pos:end="163:76"><name pos:start="163:71" pos:end="163:76">status</name></expr></argument>,

                                       <argument pos:start="165:40" pos:end="165:41"><expr pos:start="165:40" pos:end="165:41"><literal type="number" pos:start="165:40" pos:end="165:41">64</literal></expr></argument>, <argument pos:start="165:44" pos:end="165:44"><expr pos:start="165:44" pos:end="165:44"><literal type="number" pos:start="165:44" pos:end="165:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="167:17" pos:end="169:49">for <control pos:start="167:21" pos:end="167:40">(<init pos:start="167:22" pos:end="167:27"><expr pos:start="167:22" pos:end="167:26"><name pos:start="167:22" pos:end="167:22">i</name> <operator pos:start="167:24" pos:end="167:24">=</operator> <literal type="number" pos:start="167:26" pos:end="167:26">0</literal></expr>;</init> <condition pos:start="167:29" pos:end="167:35"><expr pos:start="167:29" pos:end="167:34"><name pos:start="167:29" pos:end="167:29">i</name> <operator pos:start="167:31" pos:end="167:31">&lt;</operator> <literal type="number" pos:start="167:33" pos:end="167:34">64</literal></expr>;</condition> <incr pos:start="167:37" pos:end="167:39"><expr pos:start="167:37" pos:end="167:39"><name pos:start="167:37" pos:end="167:37">i</name><operator pos:start="167:38" pos:end="167:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="169:21" pos:end="169:49"><block_content pos:start="169:21" pos:end="169:49">

                    <expr_stmt pos:start="169:21" pos:end="169:49"><expr pos:start="169:21" pos:end="169:48"><call pos:start="169:21" pos:end="169:48"><name pos:start="169:21" pos:end="169:28">put_bits</name><argument_list pos:start="169:29" pos:end="169:48">(<argument pos:start="169:30" pos:end="169:32"><expr pos:start="169:30" pos:end="169:32"><operator pos:start="169:30" pos:end="169:30">&amp;</operator><name pos:start="169:31" pos:end="169:32">pb</name></expr></argument>, <argument pos:start="169:35" pos:end="169:35"><expr pos:start="169:35" pos:end="169:35"><literal type="number" pos:start="169:35" pos:end="169:35">4</literal></expr></argument>, <argument pos:start="169:38" pos:end="169:47"><expr pos:start="169:38" pos:end="169:47"><name pos:start="169:38" pos:end="169:47"><name pos:start="169:38" pos:end="169:40">buf</name><index pos:start="169:41" pos:end="169:47">[<expr pos:start="169:42" pos:end="169:46"><name pos:start="169:42" pos:end="169:42">i</name> <operator pos:start="169:44" pos:end="169:44">^</operator> <literal type="number" pos:start="169:46" pos:end="169:46">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="171:15" pos:end="187:13">else <block pos:start="171:20" pos:end="187:13">{<block_content pos:start="173:17" pos:end="185:17">

                <for pos:start="173:17" pos:end="185:17">for <control pos:start="173:21" pos:end="173:43">(<init pos:start="173:22" pos:end="173:27"><expr pos:start="173:22" pos:end="173:26"><name pos:start="173:22" pos:end="173:22">i</name> <operator pos:start="173:24" pos:end="173:24">=</operator> <literal type="number" pos:start="173:26" pos:end="173:26">0</literal></expr>;</init> <condition pos:start="173:29" pos:end="173:35"><expr pos:start="173:29" pos:end="173:34"><name pos:start="173:29" pos:end="173:29">i</name> <operator pos:start="173:31" pos:end="173:31">&lt;</operator> <literal type="number" pos:start="173:33" pos:end="173:34">64</literal></expr>;</condition> <incr pos:start="173:37" pos:end="173:42"><expr pos:start="173:37" pos:end="173:42"><name pos:start="173:37" pos:end="173:37">i</name> <operator pos:start="173:39" pos:end="173:40">+=</operator> <literal type="number" pos:start="173:42" pos:end="173:42">2</literal></expr></incr>)</control> <block pos:start="173:45" pos:end="185:17">{<block_content pos:start="175:21" pos:end="183:41">

                    <decl_stmt pos:start="175:21" pos:end="175:31"><decl pos:start="175:21" pos:end="175:26"><type pos:start="175:21" pos:end="175:23"><name pos:start="175:21" pos:end="175:23">int</name></type> <name pos:start="175:25" pos:end="175:26">t1</name></decl>, <decl pos:start="175:29" pos:end="175:30"><type ref="prev" pos:start="175:21" pos:end="175:23"/><name pos:start="175:29" pos:end="175:30">t2</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="177:21" pos:end="177:84"><expr pos:start="177:21" pos:end="177:83"><name pos:start="177:21" pos:end="177:22">t1</name> <operator pos:start="177:24" pos:end="177:24">=</operator> <call pos:start="177:26" pos:end="177:83"><name pos:start="177:26" pos:end="177:53">adpcm_ima_qt_compress_sample</name><argument_list pos:start="177:54" pos:end="177:83">(<argument pos:start="177:55" pos:end="177:60"><expr pos:start="177:55" pos:end="177:60"><name pos:start="177:55" pos:end="177:60">status</name></expr></argument>, <argument pos:start="177:63" pos:end="177:82"><expr pos:start="177:63" pos:end="177:82"><name pos:start="177:63" pos:end="177:82"><name pos:start="177:63" pos:end="177:71">samples_p</name><index pos:start="177:72" pos:end="177:75">[<expr pos:start="177:73" pos:end="177:74"><name pos:start="177:73" pos:end="177:74">ch</name></expr>]</index><index pos:start="177:76" pos:end="177:82">[<expr pos:start="177:77" pos:end="177:77"><name pos:start="177:77" pos:end="177:77">i</name></expr>    ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:84"><expr pos:start="179:21" pos:end="179:83"><name pos:start="179:21" pos:end="179:22">t2</name> <operator pos:start="179:24" pos:end="179:24">=</operator> <call pos:start="179:26" pos:end="179:83"><name pos:start="179:26" pos:end="179:53">adpcm_ima_qt_compress_sample</name><argument_list pos:start="179:54" pos:end="179:83">(<argument pos:start="179:55" pos:end="179:60"><expr pos:start="179:55" pos:end="179:60"><name pos:start="179:55" pos:end="179:60">status</name></expr></argument>, <argument pos:start="179:63" pos:end="179:82"><expr pos:start="179:63" pos:end="179:82"><name pos:start="179:63" pos:end="179:82"><name pos:start="179:63" pos:end="179:71">samples_p</name><index pos:start="179:72" pos:end="179:75">[<expr pos:start="179:73" pos:end="179:74"><name pos:start="179:73" pos:end="179:74">ch</name></expr>]</index><index pos:start="179:76" pos:end="179:82">[<expr pos:start="179:77" pos:end="179:81"><name pos:start="179:77" pos:end="179:77">i</name> <operator pos:start="179:79" pos:end="179:79">+</operator> <literal type="number" pos:start="179:81" pos:end="179:81">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="181:21" pos:end="181:41"><expr pos:start="181:21" pos:end="181:40"><call pos:start="181:21" pos:end="181:40"><name pos:start="181:21" pos:end="181:28">put_bits</name><argument_list pos:start="181:29" pos:end="181:40">(<argument pos:start="181:30" pos:end="181:32"><expr pos:start="181:30" pos:end="181:32"><operator pos:start="181:30" pos:end="181:30">&amp;</operator><name pos:start="181:31" pos:end="181:32">pb</name></expr></argument>, <argument pos:start="181:35" pos:end="181:35"><expr pos:start="181:35" pos:end="181:35"><literal type="number" pos:start="181:35" pos:end="181:35">4</literal></expr></argument>, <argument pos:start="181:38" pos:end="181:39"><expr pos:start="181:38" pos:end="181:39"><name pos:start="181:38" pos:end="181:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="183:21" pos:end="183:41"><expr pos:start="183:21" pos:end="183:40"><call pos:start="183:21" pos:end="183:40"><name pos:start="183:21" pos:end="183:28">put_bits</name><argument_list pos:start="183:29" pos:end="183:40">(<argument pos:start="183:30" pos:end="183:32"><expr pos:start="183:30" pos:end="183:32"><operator pos:start="183:30" pos:end="183:30">&amp;</operator><name pos:start="183:31" pos:end="183:32">pb</name></expr></argument>, <argument pos:start="183:35" pos:end="183:35"><expr pos:start="183:35" pos:end="183:35"><literal type="number" pos:start="183:35" pos:end="183:35">4</literal></expr></argument>, <argument pos:start="183:38" pos:end="183:39"><expr pos:start="183:38" pos:end="183:39"><name pos:start="183:38" pos:end="183:39">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="193:9" pos:end="193:28"><expr pos:start="193:9" pos:end="193:27"><call pos:start="193:9" pos:end="193:27"><name pos:start="193:9" pos:end="193:22">flush_put_bits</name><argument_list pos:start="193:23" pos:end="193:27">(<argument pos:start="193:24" pos:end="193:26"><expr pos:start="193:24" pos:end="193:26"><operator pos:start="193:24" pos:end="193:24">&amp;</operator><name pos:start="193:25" pos:end="193:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="195:9" pos:end="195:14">break;</break>

    </block_content>}</block>

    <case pos:start="199:5" pos:end="199:31">case <expr pos:start="199:10" pos:end="199:30"><name pos:start="199:10" pos:end="199:30">AV_CODEC_ID_ADPCM_SWF</name></expr>:</case>

    <block pos:start="201:5" pos:end="287:5">{<block_content pos:start="203:9" pos:end="285:14">

        <decl_stmt pos:start="203:9" pos:end="203:25"><decl pos:start="203:9" pos:end="203:24"><type pos:start="203:9" pos:end="203:21"><name pos:start="203:9" pos:end="203:21">PutBitContext</name></type> <name pos:start="203:23" pos:end="203:24">pb</name></decl>;</decl_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:46"><expr pos:start="205:9" pos:end="205:45"><call pos:start="205:9" pos:end="205:45"><name pos:start="205:9" pos:end="205:21">init_put_bits</name><argument_list pos:start="205:22" pos:end="205:45">(<argument pos:start="205:23" pos:end="205:25"><expr pos:start="205:23" pos:end="205:25"><operator pos:start="205:23" pos:end="205:23">&amp;</operator><name pos:start="205:24" pos:end="205:25">pb</name></expr></argument>, <argument pos:start="205:28" pos:end="205:30"><expr pos:start="205:28" pos:end="205:30"><name pos:start="205:28" pos:end="205:30">dst</name></expr></argument>, <argument pos:start="205:33" pos:end="205:44"><expr pos:start="205:33" pos:end="205:44"><name pos:start="205:33" pos:end="205:40">pkt_size</name> <operator pos:start="205:42" pos:end="205:42">*</operator> <literal type="number" pos:start="205:44" pos:end="205:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="209:9" pos:end="209:34"><expr pos:start="209:9" pos:end="209:33"><name pos:start="209:9" pos:end="209:9">n</name> <operator pos:start="209:11" pos:end="209:11">=</operator> <name pos:start="209:13" pos:end="209:29"><name pos:start="209:13" pos:end="209:17">frame</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:29">nb_samples</name></name> <operator pos:start="209:31" pos:end="209:31">-</operator> <literal type="number" pos:start="209:33" pos:end="209:33">1</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="213:9" pos:end="213:30">// store AdpcmCodeSize</comment>

        <expr_stmt pos:start="215:9" pos:end="215:28"><expr pos:start="215:9" pos:end="215:27"><call pos:start="215:9" pos:end="215:27"><name pos:start="215:9" pos:end="215:16">put_bits</name><argument_list pos:start="215:17" pos:end="215:27">(<argument pos:start="215:18" pos:end="215:20"><expr pos:start="215:18" pos:end="215:20"><operator pos:start="215:18" pos:end="215:18">&amp;</operator><name pos:start="215:19" pos:end="215:20">pb</name></expr></argument>, <argument pos:start="215:23" pos:end="215:23"><expr pos:start="215:23" pos:end="215:23"><literal type="number" pos:start="215:23" pos:end="215:23">2</literal></expr></argument>, <argument pos:start="215:26" pos:end="215:26"><expr pos:start="215:26" pos:end="215:26"><literal type="number" pos:start="215:26" pos:end="215:26">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:start="215:33" pos:end="215:63">// set 4-bit flash adpcm format</comment>



        <comment type="line" pos:start="219:9" pos:end="219:33">// init the encoder state</comment>

        <for pos:start="221:9" pos:end="233:9">for <control pos:start="221:13" pos:end="221:45">(<init pos:start="221:14" pos:end="221:19"><expr pos:start="221:14" pos:end="221:18"><name pos:start="221:14" pos:end="221:14">i</name> <operator pos:start="221:16" pos:end="221:16">=</operator> <literal type="number" pos:start="221:18" pos:end="221:18">0</literal></expr>;</init> <condition pos:start="221:21" pos:end="221:40"><expr pos:start="221:21" pos:end="221:39"><name pos:start="221:21" pos:end="221:21">i</name> <operator pos:start="221:23" pos:end="221:23">&lt;</operator> <name pos:start="221:25" pos:end="221:39"><name pos:start="221:25" pos:end="221:29">avctx</name><operator pos:start="221:30" pos:end="221:31">-&gt;</operator><name pos:start="221:32" pos:end="221:39">channels</name></name></expr>;</condition> <incr pos:start="221:42" pos:end="221:44"><expr pos:start="221:42" pos:end="221:44"><name pos:start="221:42" pos:end="221:42">i</name><operator pos:start="221:43" pos:end="221:44">++</operator></expr></incr>)</control> <block pos:start="221:47" pos:end="233:9">{<block_content pos:start="225:13" pos:end="231:50">

            <comment type="line" pos:start="223:13" pos:end="223:42">// clip step so it fits 6 bits</comment>

            <expr_stmt pos:start="225:13" pos:end="225:78"><expr pos:start="225:13" pos:end="225:77"><name pos:start="225:13" pos:end="225:24"><name pos:start="225:13" pos:end="225:13">c</name><operator pos:start="225:14" pos:end="225:15">-&gt;</operator><name pos:start="225:16" pos:end="225:21">status</name><index pos:start="225:22" pos:end="225:24">[<expr pos:start="225:23" pos:end="225:23"><name pos:start="225:23" pos:end="225:23">i</name></expr>]</index></name><operator pos:start="225:25" pos:end="225:25">.</operator><name pos:start="225:26" pos:end="225:35">step_index</name> <operator pos:start="225:37" pos:end="225:37">=</operator> <call pos:start="225:39" pos:end="225:77"><name pos:start="225:39" pos:end="225:45">av_clip</name><argument_list pos:start="225:46" pos:end="225:77">(<argument pos:start="225:47" pos:end="225:69"><expr pos:start="225:47" pos:end="225:69"><name pos:start="225:47" pos:end="225:58"><name pos:start="225:47" pos:end="225:47">c</name><operator pos:start="225:48" pos:end="225:49">-&gt;</operator><name pos:start="225:50" pos:end="225:55">status</name><index pos:start="225:56" pos:end="225:58">[<expr pos:start="225:57" pos:end="225:57"><name pos:start="225:57" pos:end="225:57">i</name></expr>]</index></name><operator pos:start="225:59" pos:end="225:59">.</operator><name pos:start="225:60" pos:end="225:69">step_index</name></expr></argument>, <argument pos:start="225:72" pos:end="225:72"><expr pos:start="225:72" pos:end="225:72"><literal type="number" pos:start="225:72" pos:end="225:72">0</literal></expr></argument>, <argument pos:start="225:75" pos:end="225:76"><expr pos:start="225:75" pos:end="225:76"><literal type="number" pos:start="225:75" pos:end="225:76">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:43"><expr pos:start="227:13" pos:end="227:42"><call pos:start="227:13" pos:end="227:42"><name pos:start="227:13" pos:end="227:21">put_sbits</name><argument_list pos:start="227:22" pos:end="227:42">(<argument pos:start="227:23" pos:end="227:25"><expr pos:start="227:23" pos:end="227:25"><operator pos:start="227:23" pos:end="227:23">&amp;</operator><name pos:start="227:24" pos:end="227:25">pb</name></expr></argument>, <argument pos:start="227:28" pos:end="227:29"><expr pos:start="227:28" pos:end="227:29"><literal type="number" pos:start="227:28" pos:end="227:29">16</literal></expr></argument>, <argument pos:start="227:32" pos:end="227:41"><expr pos:start="227:32" pos:end="227:41"><name pos:start="227:32" pos:end="227:41"><name pos:start="227:32" pos:end="227:38">samples</name><index pos:start="227:39" pos:end="227:41">[<expr pos:start="227:40" pos:end="227:40"><name pos:start="227:40" pos:end="227:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:54"><expr pos:start="229:13" pos:end="229:53"><call pos:start="229:13" pos:end="229:53"><name pos:start="229:13" pos:end="229:20">put_bits</name><argument_list pos:start="229:21" pos:end="229:53">(<argument pos:start="229:22" pos:end="229:24"><expr pos:start="229:22" pos:end="229:24"><operator pos:start="229:22" pos:end="229:22">&amp;</operator><name pos:start="229:23" pos:end="229:24">pb</name></expr></argument>, <argument pos:start="229:27" pos:end="229:27"><expr pos:start="229:27" pos:end="229:27"><literal type="number" pos:start="229:27" pos:end="229:27">6</literal></expr></argument>, <argument pos:start="229:30" pos:end="229:52"><expr pos:start="229:30" pos:end="229:52"><name pos:start="229:30" pos:end="229:41"><name pos:start="229:30" pos:end="229:30">c</name><operator pos:start="229:31" pos:end="229:32">-&gt;</operator><name pos:start="229:33" pos:end="229:38">status</name><index pos:start="229:39" pos:end="229:41">[<expr pos:start="229:40" pos:end="229:40"><name pos:start="229:40" pos:end="229:40">i</name></expr>]</index></name><operator pos:start="229:42" pos:end="229:42">.</operator><name pos:start="229:43" pos:end="229:52">step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:50"><expr pos:start="231:13" pos:end="231:49"><name pos:start="231:13" pos:end="231:24"><name pos:start="231:13" pos:end="231:13">c</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:21">status</name><index pos:start="231:22" pos:end="231:24">[<expr pos:start="231:23" pos:end="231:23"><name pos:start="231:23" pos:end="231:23">i</name></expr>]</index></name><operator pos:start="231:25" pos:end="231:25">.</operator><name pos:start="231:26" pos:end="231:36">prev_sample</name> <operator pos:start="231:38" pos:end="231:38">=</operator> <name pos:start="231:40" pos:end="231:49"><name pos:start="231:40" pos:end="231:46">samples</name><index pos:start="231:47" pos:end="231:49">[<expr pos:start="231:48" pos:end="231:48"><name pos:start="231:48" pos:end="231:48">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="237:9" pos:end="281:9"><if pos:start="237:9" pos:end="265:9">if <condition pos:start="237:12" pos:end="237:31">(<expr pos:start="237:13" pos:end="237:30"><name pos:start="237:13" pos:end="237:26"><name pos:start="237:13" pos:end="237:17">avctx</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:26">trellis</name></name> <operator pos:start="237:28" pos:end="237:28">&gt;</operator> <literal type="number" pos:start="237:30" pos:end="237:30">0</literal></expr>)</condition> <block pos:start="237:33" pos:end="265:9">{<block_content pos:start="239:13" pos:end="263:25">

            <expr_stmt pos:start="239:13" pos:end="239:55"><expr pos:start="239:13" pos:end="239:54"><call pos:start="239:13" pos:end="239:54"><name pos:start="239:13" pos:end="239:28">FF_ALLOC_OR_GOTO</name><argument_list pos:start="239:29" pos:end="239:54">(<argument pos:start="239:30" pos:end="239:34"><expr pos:start="239:30" pos:end="239:34"><name pos:start="239:30" pos:end="239:34">avctx</name></expr></argument>, <argument pos:start="239:37" pos:end="239:39"><expr pos:start="239:37" pos:end="239:39"><name pos:start="239:37" pos:end="239:39">buf</name></expr></argument>, <argument pos:start="239:42" pos:end="239:46"><expr pos:start="239:42" pos:end="239:46"><literal type="number" pos:start="239:42" pos:end="239:42">2</literal> <operator pos:start="239:44" pos:end="239:44">*</operator> <name pos:start="239:46" pos:end="239:46">n</name></expr></argument>, <argument pos:start="239:49" pos:end="239:53"><expr pos:start="239:49" pos:end="239:53"><name pos:start="239:49" pos:end="239:53">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="243:70"><expr pos:start="241:13" pos:end="243:69"><call pos:start="241:13" pos:end="243:69"><name pos:start="241:13" pos:end="241:34">adpcm_compress_trellis</name><argument_list pos:start="241:35" pos:end="243:69">(<argument pos:start="241:36" pos:end="241:40"><expr pos:start="241:36" pos:end="241:40"><name pos:start="241:36" pos:end="241:40">avctx</name></expr></argument>, <argument pos:start="241:43" pos:end="241:67"><expr pos:start="241:43" pos:end="241:67"><name pos:start="241:43" pos:end="241:49">samples</name> <operator pos:start="241:51" pos:end="241:51">+</operator> <name pos:start="241:53" pos:end="241:67"><name pos:start="241:53" pos:end="241:57">avctx</name><operator pos:start="241:58" pos:end="241:59">-&gt;</operator><name pos:start="241:60" pos:end="241:67">channels</name></name></expr></argument>, <argument pos:start="241:70" pos:end="241:72"><expr pos:start="241:70" pos:end="241:72"><name pos:start="241:70" pos:end="241:72">buf</name></expr></argument>,

                                   <argument pos:start="243:36" pos:end="243:48"><expr pos:start="243:36" pos:end="243:48"><operator pos:start="243:36" pos:end="243:36">&amp;</operator><name pos:start="243:37" pos:end="243:48"><name pos:start="243:37" pos:end="243:37">c</name><operator pos:start="243:38" pos:end="243:39">-&gt;</operator><name pos:start="243:40" pos:end="243:45">status</name><index pos:start="243:46" pos:end="243:48">[<expr pos:start="243:47" pos:end="243:47"><literal type="number" pos:start="243:47" pos:end="243:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="243:51" pos:end="243:51"><expr pos:start="243:51" pos:end="243:51"><name pos:start="243:51" pos:end="243:51">n</name></expr></argument>, <argument pos:start="243:54" pos:end="243:68"><expr pos:start="243:54" pos:end="243:68"><name pos:start="243:54" pos:end="243:68"><name pos:start="243:54" pos:end="243:58">avctx</name><operator pos:start="243:59" pos:end="243:60">-&gt;</operator><name pos:start="243:61" pos:end="243:68">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="245:13" pos:end="251:56"><if pos:start="245:13" pos:end="251:56">if <condition pos:start="245:16" pos:end="245:37">(<expr pos:start="245:17" pos:end="245:36"><name pos:start="245:17" pos:end="245:31"><name pos:start="245:17" pos:end="245:21">avctx</name><operator pos:start="245:22" pos:end="245:23">-&gt;</operator><name pos:start="245:24" pos:end="245:31">channels</name></name> <operator pos:start="245:33" pos:end="245:34">==</operator> <literal type="number" pos:start="245:36" pos:end="245:36">2</literal></expr>)</condition><block type="pseudo" pos:start="247:17" pos:end="251:56"><block_content pos:start="247:17" pos:end="251:56">

                <expr_stmt pos:start="247:17" pos:end="251:56"><expr pos:start="247:17" pos:end="251:55"><call pos:start="247:17" pos:end="251:55"><name pos:start="247:17" pos:end="247:38">adpcm_compress_trellis</name><argument_list pos:start="247:39" pos:end="251:55">(<argument pos:start="247:40" pos:end="247:44"><expr pos:start="247:40" pos:end="247:44"><name pos:start="247:40" pos:end="247:44">avctx</name></expr></argument>, <argument pos:start="247:47" pos:end="247:75"><expr pos:start="247:47" pos:end="247:75"><name pos:start="247:47" pos:end="247:53">samples</name> <operator pos:start="247:55" pos:end="247:55">+</operator> <name pos:start="247:57" pos:end="247:71"><name pos:start="247:57" pos:end="247:61">avctx</name><operator pos:start="247:62" pos:end="247:63">-&gt;</operator><name pos:start="247:64" pos:end="247:71">channels</name></name> <operator pos:start="247:73" pos:end="247:73">+</operator> <literal type="number" pos:start="247:75" pos:end="247:75">1</literal></expr></argument>,

                                       <argument pos:start="249:40" pos:end="249:46"><expr pos:start="249:40" pos:end="249:46"><name pos:start="249:40" pos:end="249:42">buf</name> <operator pos:start="249:44" pos:end="249:44">+</operator> <name pos:start="249:46" pos:end="249:46">n</name></expr></argument>, <argument pos:start="249:49" pos:end="249:61"><expr pos:start="249:49" pos:end="249:61"><operator pos:start="249:49" pos:end="249:49">&amp;</operator><name pos:start="249:50" pos:end="249:61"><name pos:start="249:50" pos:end="249:50">c</name><operator pos:start="249:51" pos:end="249:52">-&gt;</operator><name pos:start="249:53" pos:end="249:58">status</name><index pos:start="249:59" pos:end="249:61">[<expr pos:start="249:60" pos:end="249:60"><literal type="number" pos:start="249:60" pos:end="249:60">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="249:64" pos:end="249:64"><expr pos:start="249:64" pos:end="249:64"><name pos:start="249:64" pos:end="249:64">n</name></expr></argument>,

                                       <argument pos:start="251:40" pos:end="251:54"><expr pos:start="251:40" pos:end="251:54"><name pos:start="251:40" pos:end="251:54"><name pos:start="251:40" pos:end="251:44">avctx</name><operator pos:start="251:45" pos:end="251:46">-&gt;</operator><name pos:start="251:47" pos:end="251:54">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <for pos:start="253:13" pos:end="261:13">for <control pos:start="253:17" pos:end="253:35">(<init pos:start="253:18" pos:end="253:23"><expr pos:start="253:18" pos:end="253:22"><name pos:start="253:18" pos:end="253:18">i</name> <operator pos:start="253:20" pos:end="253:20">=</operator> <literal type="number" pos:start="253:22" pos:end="253:22">0</literal></expr>;</init> <condition pos:start="253:25" pos:end="253:30"><expr pos:start="253:25" pos:end="253:29"><name pos:start="253:25" pos:end="253:25">i</name> <operator pos:start="253:27" pos:end="253:27">&lt;</operator> <name pos:start="253:29" pos:end="253:29">n</name></expr>;</condition> <incr pos:start="253:32" pos:end="253:34"><expr pos:start="253:32" pos:end="253:34"><name pos:start="253:32" pos:end="253:32">i</name><operator pos:start="253:33" pos:end="253:34">++</operator></expr></incr>)</control> <block pos:start="253:37" pos:end="261:13">{<block_content pos:start="255:17" pos:end="259:49">

                <expr_stmt pos:start="255:17" pos:end="255:41"><expr pos:start="255:17" pos:end="255:40"><call pos:start="255:17" pos:end="255:40"><name pos:start="255:17" pos:end="255:24">put_bits</name><argument_list pos:start="255:25" pos:end="255:40">(<argument pos:start="255:26" pos:end="255:28"><expr pos:start="255:26" pos:end="255:28"><operator pos:start="255:26" pos:end="255:26">&amp;</operator><name pos:start="255:27" pos:end="255:28">pb</name></expr></argument>, <argument pos:start="255:31" pos:end="255:31"><expr pos:start="255:31" pos:end="255:31"><literal type="number" pos:start="255:31" pos:end="255:31">4</literal></expr></argument>, <argument pos:start="255:34" pos:end="255:39"><expr pos:start="255:34" pos:end="255:39"><name pos:start="255:34" pos:end="255:39"><name pos:start="255:34" pos:end="255:36">buf</name><index pos:start="255:37" pos:end="255:39">[<expr pos:start="255:38" pos:end="255:38"><name pos:start="255:38" pos:end="255:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="257:17" pos:end="259:49"><if pos:start="257:17" pos:end="259:49">if <condition pos:start="257:20" pos:end="257:41">(<expr pos:start="257:21" pos:end="257:40"><name pos:start="257:21" pos:end="257:35"><name pos:start="257:21" pos:end="257:25">avctx</name><operator pos:start="257:26" pos:end="257:27">-&gt;</operator><name pos:start="257:28" pos:end="257:35">channels</name></name> <operator pos:start="257:37" pos:end="257:38">==</operator> <literal type="number" pos:start="257:40" pos:end="257:40">2</literal></expr>)</condition><block type="pseudo" pos:start="259:21" pos:end="259:49"><block_content pos:start="259:21" pos:end="259:49">

                    <expr_stmt pos:start="259:21" pos:end="259:49"><expr pos:start="259:21" pos:end="259:48"><call pos:start="259:21" pos:end="259:48"><name pos:start="259:21" pos:end="259:28">put_bits</name><argument_list pos:start="259:29" pos:end="259:48">(<argument pos:start="259:30" pos:end="259:32"><expr pos:start="259:30" pos:end="259:32"><operator pos:start="259:30" pos:end="259:30">&amp;</operator><name pos:start="259:31" pos:end="259:32">pb</name></expr></argument>, <argument pos:start="259:35" pos:end="259:35"><expr pos:start="259:35" pos:end="259:35"><literal type="number" pos:start="259:35" pos:end="259:35">4</literal></expr></argument>, <argument pos:start="259:38" pos:end="259:47"><expr pos:start="259:38" pos:end="259:47"><name pos:start="259:38" pos:end="259:47"><name pos:start="259:38" pos:end="259:40">buf</name><index pos:start="259:41" pos:end="259:47">[<expr pos:start="259:42" pos:end="259:46"><name pos:start="259:42" pos:end="259:42">n</name> <operator pos:start="259:44" pos:end="259:44">+</operator> <name pos:start="259:46" pos:end="259:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="263:13" pos:end="263:25"><expr pos:start="263:13" pos:end="263:24"><call pos:start="263:13" pos:end="263:24"><name pos:start="263:13" pos:end="263:19">av_free</name><argument_list pos:start="263:20" pos:end="263:24">(<argument pos:start="263:21" pos:end="263:23"><expr pos:start="263:21" pos:end="263:23"><name pos:start="263:21" pos:end="263:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="265:11" pos:end="281:9">else <block pos:start="265:16" pos:end="281:9">{<block_content pos:start="267:13" pos:end="279:13">

            <for pos:start="267:13" pos:end="279:13">for <control pos:start="267:17" pos:end="267:51">(<init pos:start="267:18" pos:end="267:23"><expr pos:start="267:18" pos:end="267:22"><name pos:start="267:18" pos:end="267:18">i</name> <operator pos:start="267:20" pos:end="267:20">=</operator> <literal type="number" pos:start="267:22" pos:end="267:22">1</literal></expr>;</init> <condition pos:start="267:25" pos:end="267:46"><expr pos:start="267:25" pos:end="267:45"><name pos:start="267:25" pos:end="267:25">i</name> <operator pos:start="267:27" pos:end="267:27">&lt;</operator> <name pos:start="267:29" pos:end="267:45"><name pos:start="267:29" pos:end="267:33">frame</name><operator pos:start="267:34" pos:end="267:35">-&gt;</operator><name pos:start="267:36" pos:end="267:45">nb_samples</name></name></expr>;</condition> <incr pos:start="267:48" pos:end="267:50"><expr pos:start="267:48" pos:end="267:50"><name pos:start="267:48" pos:end="267:48">i</name><operator pos:start="267:49" pos:end="267:50">++</operator></expr></incr>)</control> <block pos:start="267:53" pos:end="279:13">{<block_content pos:start="269:17" pos:end="277:50">

                <expr_stmt pos:start="269:17" pos:end="271:56"><expr pos:start="269:17" pos:end="271:55"><call pos:start="269:17" pos:end="271:55"><name pos:start="269:17" pos:end="269:24">put_bits</name><argument_list pos:start="269:25" pos:end="271:55">(<argument pos:start="269:26" pos:end="269:28"><expr pos:start="269:26" pos:end="269:28"><operator pos:start="269:26" pos:end="269:26">&amp;</operator><name pos:start="269:27" pos:end="269:28">pb</name></expr></argument>, <argument pos:start="269:31" pos:end="269:31"><expr pos:start="269:31" pos:end="269:31"><literal type="number" pos:start="269:31" pos:end="269:31">4</literal></expr></argument>, <argument pos:start="269:34" pos:end="271:54"><expr pos:start="269:34" pos:end="271:54"><call pos:start="269:34" pos:end="271:54"><name pos:start="269:34" pos:end="269:58">adpcm_ima_compress_sample</name><argument_list pos:start="269:59" pos:end="271:54">(<argument pos:start="269:60" pos:end="269:72"><expr pos:start="269:60" pos:end="269:72"><operator pos:start="269:60" pos:end="269:60">&amp;</operator><name pos:start="269:61" pos:end="269:72"><name pos:start="269:61" pos:end="269:61">c</name><operator pos:start="269:62" pos:end="269:63">-&gt;</operator><name pos:start="269:64" pos:end="269:69">status</name><index pos:start="269:70" pos:end="269:72">[<expr pos:start="269:71" pos:end="269:71"><literal type="number" pos:start="269:71" pos:end="269:71">0</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="271:26" pos:end="271:53"><expr pos:start="271:26" pos:end="271:53"><name pos:start="271:26" pos:end="271:53"><name pos:start="271:26" pos:end="271:32">samples</name><index pos:start="271:33" pos:end="271:53">[<expr pos:start="271:34" pos:end="271:52"><name pos:start="271:34" pos:end="271:48"><name pos:start="271:34" pos:end="271:38">avctx</name><operator pos:start="271:39" pos:end="271:40">-&gt;</operator><name pos:start="271:41" pos:end="271:48">channels</name></name> <operator pos:start="271:50" pos:end="271:50">*</operator> <name pos:start="271:52" pos:end="271:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="273:17" pos:end="277:50"><if pos:start="273:17" pos:end="277:50">if <condition pos:start="273:20" pos:end="273:41">(<expr pos:start="273:21" pos:end="273:40"><name pos:start="273:21" pos:end="273:35"><name pos:start="273:21" pos:end="273:25">avctx</name><operator pos:start="273:26" pos:end="273:27">-&gt;</operator><name pos:start="273:28" pos:end="273:35">channels</name></name> <operator pos:start="273:37" pos:end="273:38">==</operator> <literal type="number" pos:start="273:40" pos:end="273:40">2</literal></expr>)</condition><block type="pseudo" pos:start="275:21" pos:end="277:50"><block_content pos:start="275:21" pos:end="277:50">

                    <expr_stmt pos:start="275:21" pos:end="277:50"><expr pos:start="275:21" pos:end="277:49"><call pos:start="275:21" pos:end="277:49"><name pos:start="275:21" pos:end="275:28">put_bits</name><argument_list pos:start="275:29" pos:end="277:49">(<argument pos:start="275:30" pos:end="275:32"><expr pos:start="275:30" pos:end="275:32"><operator pos:start="275:30" pos:end="275:30">&amp;</operator><name pos:start="275:31" pos:end="275:32">pb</name></expr></argument>, <argument pos:start="275:35" pos:end="275:35"><expr pos:start="275:35" pos:end="275:35"><literal type="number" pos:start="275:35" pos:end="275:35">4</literal></expr></argument>, <argument pos:start="275:38" pos:end="277:48"><expr pos:start="275:38" pos:end="277:48"><call pos:start="275:38" pos:end="277:48"><name pos:start="275:38" pos:end="275:62">adpcm_ima_compress_sample</name><argument_list pos:start="275:63" pos:end="277:48">(<argument pos:start="275:64" pos:end="275:76"><expr pos:start="275:64" pos:end="275:76"><operator pos:start="275:64" pos:end="275:64">&amp;</operator><name pos:start="275:65" pos:end="275:76"><name pos:start="275:65" pos:end="275:65">c</name><operator pos:start="275:66" pos:end="275:67">-&gt;</operator><name pos:start="275:68" pos:end="275:73">status</name><index pos:start="275:74" pos:end="275:76">[<expr pos:start="275:75" pos:end="275:75"><literal type="number" pos:start="275:75" pos:end="275:75">1</literal></expr>]</index></name></expr></argument>,

                             <argument pos:start="277:30" pos:end="277:47"><expr pos:start="277:30" pos:end="277:47"><name pos:start="277:30" pos:end="277:47"><name pos:start="277:30" pos:end="277:36">samples</name><index pos:start="277:37" pos:end="277:47">[<expr pos:start="277:38" pos:end="277:46"><literal type="number" pos:start="277:38" pos:end="277:38">2</literal> <operator pos:start="277:40" pos:end="277:40">*</operator> <name pos:start="277:42" pos:end="277:42">i</name> <operator pos:start="277:44" pos:end="277:44">+</operator> <literal type="number" pos:start="277:46" pos:end="277:46">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:28"><expr pos:start="283:9" pos:end="283:27"><call pos:start="283:9" pos:end="283:27"><name pos:start="283:9" pos:end="283:22">flush_put_bits</name><argument_list pos:start="283:23" pos:end="283:27">(<argument pos:start="283:24" pos:end="283:26"><expr pos:start="283:24" pos:end="283:26"><operator pos:start="283:24" pos:end="283:24">&amp;</operator><name pos:start="283:25" pos:end="283:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="285:9" pos:end="285:14">break;</break>

    </block_content>}</block>

    <case pos:start="289:5" pos:end="289:30">case <expr pos:start="289:10" pos:end="289:29"><name pos:start="289:10" pos:end="289:29">AV_CODEC_ID_ADPCM_MS</name></expr>:</case>

        <for pos:start="291:9" pos:end="301:9">for <control pos:start="291:13" pos:end="291:45">(<init pos:start="291:14" pos:end="291:19"><expr pos:start="291:14" pos:end="291:18"><name pos:start="291:14" pos:end="291:14">i</name> <operator pos:start="291:16" pos:end="291:16">=</operator> <literal type="number" pos:start="291:18" pos:end="291:18">0</literal></expr>;</init> <condition pos:start="291:21" pos:end="291:40"><expr pos:start="291:21" pos:end="291:39"><name pos:start="291:21" pos:end="291:21">i</name> <operator pos:start="291:23" pos:end="291:23">&lt;</operator> <name pos:start="291:25" pos:end="291:39"><name pos:start="291:25" pos:end="291:29">avctx</name><operator pos:start="291:30" pos:end="291:31">-&gt;</operator><name pos:start="291:32" pos:end="291:39">channels</name></name></expr>;</condition> <incr pos:start="291:42" pos:end="291:44"><expr pos:start="291:42" pos:end="291:44"><name pos:start="291:42" pos:end="291:42">i</name><operator pos:start="291:43" pos:end="291:44">++</operator></expr></incr>)</control> <block pos:start="291:47" pos:end="301:9">{<block_content pos:start="293:13" pos:end="299:66">

            <decl_stmt pos:start="293:13" pos:end="293:30"><decl pos:start="293:13" pos:end="293:29"><type pos:start="293:13" pos:end="293:15"><name pos:start="293:13" pos:end="293:15">int</name></type> <name pos:start="293:17" pos:end="293:25">predictor</name> <init pos:start="293:27" pos:end="293:29">= <expr pos:start="293:29" pos:end="293:29"><literal type="number" pos:start="293:29" pos:end="293:29">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:31"><expr pos:start="295:13" pos:end="295:30"><operator pos:start="295:13" pos:end="295:13">*</operator><name pos:start="295:14" pos:end="295:16">dst</name><operator pos:start="295:17" pos:end="295:18">++</operator> <operator pos:start="295:20" pos:end="295:20">=</operator> <name pos:start="295:22" pos:end="295:30">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:66"><expr pos:start="297:13" pos:end="297:65"><name pos:start="297:13" pos:end="297:24"><name pos:start="297:13" pos:end="297:13">c</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:21">status</name><index pos:start="297:22" pos:end="297:24">[<expr pos:start="297:23" pos:end="297:23"><name pos:start="297:23" pos:end="297:23">i</name></expr>]</index></name><operator pos:start="297:25" pos:end="297:25">.</operator><name pos:start="297:26" pos:end="297:31">coeff1</name> <operator pos:start="297:33" pos:end="297:33">=</operator> <name pos:start="297:35" pos:end="297:65"><name pos:start="297:35" pos:end="297:54">ff_adpcm_AdaptCoeff1</name><index pos:start="297:55" pos:end="297:65">[<expr pos:start="297:56" pos:end="297:64"><name pos:start="297:56" pos:end="297:64">predictor</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:66"><expr pos:start="299:13" pos:end="299:65"><name pos:start="299:13" pos:end="299:24"><name pos:start="299:13" pos:end="299:13">c</name><operator pos:start="299:14" pos:end="299:15">-&gt;</operator><name pos:start="299:16" pos:end="299:21">status</name><index pos:start="299:22" pos:end="299:24">[<expr pos:start="299:23" pos:end="299:23"><name pos:start="299:23" pos:end="299:23">i</name></expr>]</index></name><operator pos:start="299:25" pos:end="299:25">.</operator><name pos:start="299:26" pos:end="299:31">coeff2</name> <operator pos:start="299:33" pos:end="299:33">=</operator> <name pos:start="299:35" pos:end="299:65"><name pos:start="299:35" pos:end="299:54">ff_adpcm_AdaptCoeff2</name><index pos:start="299:55" pos:end="299:65">[<expr pos:start="299:56" pos:end="299:64"><name pos:start="299:56" pos:end="299:64">predictor</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="303:9" pos:end="311:9">for <control pos:start="303:13" pos:end="303:45">(<init pos:start="303:14" pos:end="303:19"><expr pos:start="303:14" pos:end="303:18"><name pos:start="303:14" pos:end="303:14">i</name> <operator pos:start="303:16" pos:end="303:16">=</operator> <literal type="number" pos:start="303:18" pos:end="303:18">0</literal></expr>;</init> <condition pos:start="303:21" pos:end="303:40"><expr pos:start="303:21" pos:end="303:39"><name pos:start="303:21" pos:end="303:21">i</name> <operator pos:start="303:23" pos:end="303:23">&lt;</operator> <name pos:start="303:25" pos:end="303:39"><name pos:start="303:25" pos:end="303:29">avctx</name><operator pos:start="303:30" pos:end="303:31">-&gt;</operator><name pos:start="303:32" pos:end="303:39">channels</name></name></expr>;</condition> <incr pos:start="303:42" pos:end="303:44"><expr pos:start="303:42" pos:end="303:44"><name pos:start="303:42" pos:end="303:42">i</name><operator pos:start="303:43" pos:end="303:44">++</operator></expr></incr>)</control> <block pos:start="303:47" pos:end="311:9">{<block_content pos:start="305:13" pos:end="309:59">

            <if_stmt pos:start="305:13" pos:end="307:41"><if pos:start="305:13" pos:end="307:41">if <condition pos:start="305:16" pos:end="305:41">(<expr pos:start="305:17" pos:end="305:40"><name pos:start="305:17" pos:end="305:28"><name pos:start="305:17" pos:end="305:17">c</name><operator pos:start="305:18" pos:end="305:19">-&gt;</operator><name pos:start="305:20" pos:end="305:25">status</name><index pos:start="305:26" pos:end="305:28">[<expr pos:start="305:27" pos:end="305:27"><name pos:start="305:27" pos:end="305:27">i</name></expr>]</index></name><operator pos:start="305:29" pos:end="305:29">.</operator><name pos:start="305:30" pos:end="305:35">idelta</name> <operator pos:start="305:37" pos:end="305:37">&lt;</operator> <literal type="number" pos:start="305:39" pos:end="305:40">16</literal></expr>)</condition><block type="pseudo" pos:start="307:17" pos:end="307:41"><block_content pos:start="307:17" pos:end="307:41">

                <expr_stmt pos:start="307:17" pos:end="307:41"><expr pos:start="307:17" pos:end="307:40"><name pos:start="307:17" pos:end="307:28"><name pos:start="307:17" pos:end="307:17">c</name><operator pos:start="307:18" pos:end="307:19">-&gt;</operator><name pos:start="307:20" pos:end="307:25">status</name><index pos:start="307:26" pos:end="307:28">[<expr pos:start="307:27" pos:end="307:27"><name pos:start="307:27" pos:end="307:27">i</name></expr>]</index></name><operator pos:start="307:29" pos:end="307:29">.</operator><name pos:start="307:30" pos:end="307:35">idelta</name> <operator pos:start="307:37" pos:end="307:37">=</operator> <literal type="number" pos:start="307:39" pos:end="307:40">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:59"><expr pos:start="309:13" pos:end="309:58"><call pos:start="309:13" pos:end="309:58"><name pos:start="309:13" pos:end="309:31">bytestream_put_le16</name><argument_list pos:start="309:32" pos:end="309:58">(<argument pos:start="309:33" pos:end="309:36"><expr pos:start="309:33" pos:end="309:36"><operator pos:start="309:33" pos:end="309:33">&amp;</operator><name pos:start="309:34" pos:end="309:36">dst</name></expr></argument>, <argument pos:start="309:39" pos:end="309:57"><expr pos:start="309:39" pos:end="309:57"><name pos:start="309:39" pos:end="309:50"><name pos:start="309:39" pos:end="309:39">c</name><operator pos:start="309:40" pos:end="309:41">-&gt;</operator><name pos:start="309:42" pos:end="309:47">status</name><index pos:start="309:48" pos:end="309:50">[<expr pos:start="309:49" pos:end="309:49"><name pos:start="309:49" pos:end="309:49">i</name></expr>]</index></name><operator pos:start="309:51" pos:end="309:51">.</operator><name pos:start="309:52" pos:end="309:57">idelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="313:9" pos:end="315:45">for <control pos:start="313:13" pos:end="313:45">(<init pos:start="313:14" pos:end="313:19"><expr pos:start="313:14" pos:end="313:18"><name pos:start="313:14" pos:end="313:14">i</name> <operator pos:start="313:16" pos:end="313:16">=</operator> <literal type="number" pos:start="313:18" pos:end="313:18">0</literal></expr>;</init> <condition pos:start="313:21" pos:end="313:40"><expr pos:start="313:21" pos:end="313:39"><name pos:start="313:21" pos:end="313:21">i</name> <operator pos:start="313:23" pos:end="313:23">&lt;</operator> <name pos:start="313:25" pos:end="313:39"><name pos:start="313:25" pos:end="313:29">avctx</name><operator pos:start="313:30" pos:end="313:31">-&gt;</operator><name pos:start="313:32" pos:end="313:39">channels</name></name></expr>;</condition> <incr pos:start="313:42" pos:end="313:44"><expr pos:start="313:42" pos:end="313:44"><name pos:start="313:42" pos:end="313:42">i</name><operator pos:start="313:43" pos:end="313:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="315:13" pos:end="315:45"><block_content pos:start="315:13" pos:end="315:45">

            <expr_stmt pos:start="315:13" pos:end="315:45"><expr pos:start="315:13" pos:end="315:44"><name pos:start="315:13" pos:end="315:24"><name pos:start="315:13" pos:end="315:13">c</name><operator pos:start="315:14" pos:end="315:15">-&gt;</operator><name pos:start="315:16" pos:end="315:21">status</name><index pos:start="315:22" pos:end="315:24">[<expr pos:start="315:23" pos:end="315:23"><name pos:start="315:23" pos:end="315:23">i</name></expr>]</index></name><operator pos:start="315:25" pos:end="315:25">.</operator><name pos:start="315:26" pos:end="315:32">sample2</name><operator pos:start="315:33" pos:end="315:33">=</operator> <operator pos:start="315:35" pos:end="315:35">*</operator><name pos:start="315:36" pos:end="315:42">samples</name><operator pos:start="315:43" pos:end="315:44">++</operator></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="317:9" pos:end="323:9">for <control pos:start="317:13" pos:end="317:45">(<init pos:start="317:14" pos:end="317:19"><expr pos:start="317:14" pos:end="317:18"><name pos:start="317:14" pos:end="317:14">i</name> <operator pos:start="317:16" pos:end="317:16">=</operator> <literal type="number" pos:start="317:18" pos:end="317:18">0</literal></expr>;</init> <condition pos:start="317:21" pos:end="317:40"><expr pos:start="317:21" pos:end="317:39"><name pos:start="317:21" pos:end="317:21">i</name> <operator pos:start="317:23" pos:end="317:23">&lt;</operator> <name pos:start="317:25" pos:end="317:39"><name pos:start="317:25" pos:end="317:29">avctx</name><operator pos:start="317:30" pos:end="317:31">-&gt;</operator><name pos:start="317:32" pos:end="317:39">channels</name></name></expr>;</condition> <incr pos:start="317:42" pos:end="317:44"><expr pos:start="317:42" pos:end="317:44"><name pos:start="317:42" pos:end="317:42">i</name><operator pos:start="317:43" pos:end="317:44">++</operator></expr></incr>)</control> <block pos:start="317:47" pos:end="323:9">{<block_content pos:start="319:13" pos:end="321:60">

            <expr_stmt pos:start="319:13" pos:end="319:46"><expr pos:start="319:13" pos:end="319:45"><name pos:start="319:13" pos:end="319:24"><name pos:start="319:13" pos:end="319:13">c</name><operator pos:start="319:14" pos:end="319:15">-&gt;</operator><name pos:start="319:16" pos:end="319:21">status</name><index pos:start="319:22" pos:end="319:24">[<expr pos:start="319:23" pos:end="319:23"><name pos:start="319:23" pos:end="319:23">i</name></expr>]</index></name><operator pos:start="319:25" pos:end="319:25">.</operator><name pos:start="319:26" pos:end="319:32">sample1</name> <operator pos:start="319:34" pos:end="319:34">=</operator> <operator pos:start="319:36" pos:end="319:36">*</operator><name pos:start="319:37" pos:end="319:43">samples</name><operator pos:start="319:44" pos:end="319:45">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:60"><expr pos:start="321:13" pos:end="321:59"><call pos:start="321:13" pos:end="321:59"><name pos:start="321:13" pos:end="321:31">bytestream_put_le16</name><argument_list pos:start="321:32" pos:end="321:59">(<argument pos:start="321:33" pos:end="321:36"><expr pos:start="321:33" pos:end="321:36"><operator pos:start="321:33" pos:end="321:33">&amp;</operator><name pos:start="321:34" pos:end="321:36">dst</name></expr></argument>, <argument pos:start="321:39" pos:end="321:58"><expr pos:start="321:39" pos:end="321:58"><name pos:start="321:39" pos:end="321:50"><name pos:start="321:39" pos:end="321:39">c</name><operator pos:start="321:40" pos:end="321:41">-&gt;</operator><name pos:start="321:42" pos:end="321:47">status</name><index pos:start="321:48" pos:end="321:50">[<expr pos:start="321:49" pos:end="321:49"><name pos:start="321:49" pos:end="321:49">i</name></expr>]</index></name><operator pos:start="321:51" pos:end="321:51">.</operator><name pos:start="321:52" pos:end="321:58">sample1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="325:9" pos:end="327:60">for <control pos:start="325:13" pos:end="325:45">(<init pos:start="325:14" pos:end="325:19"><expr pos:start="325:14" pos:end="325:18"><name pos:start="325:14" pos:end="325:14">i</name> <operator pos:start="325:16" pos:end="325:16">=</operator> <literal type="number" pos:start="325:18" pos:end="325:18">0</literal></expr>;</init> <condition pos:start="325:21" pos:end="325:40"><expr pos:start="325:21" pos:end="325:39"><name pos:start="325:21" pos:end="325:21">i</name> <operator pos:start="325:23" pos:end="325:23">&lt;</operator> <name pos:start="325:25" pos:end="325:39"><name pos:start="325:25" pos:end="325:29">avctx</name><operator pos:start="325:30" pos:end="325:31">-&gt;</operator><name pos:start="325:32" pos:end="325:39">channels</name></name></expr>;</condition> <incr pos:start="325:42" pos:end="325:44"><expr pos:start="325:42" pos:end="325:44"><name pos:start="325:42" pos:end="325:42">i</name><operator pos:start="325:43" pos:end="325:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="327:13" pos:end="327:60"><block_content pos:start="327:13" pos:end="327:60">

            <expr_stmt pos:start="327:13" pos:end="327:60"><expr pos:start="327:13" pos:end="327:59"><call pos:start="327:13" pos:end="327:59"><name pos:start="327:13" pos:end="327:31">bytestream_put_le16</name><argument_list pos:start="327:32" pos:end="327:59">(<argument pos:start="327:33" pos:end="327:36"><expr pos:start="327:33" pos:end="327:36"><operator pos:start="327:33" pos:end="327:33">&amp;</operator><name pos:start="327:34" pos:end="327:36">dst</name></expr></argument>, <argument pos:start="327:39" pos:end="327:58"><expr pos:start="327:39" pos:end="327:58"><name pos:start="327:39" pos:end="327:50"><name pos:start="327:39" pos:end="327:39">c</name><operator pos:start="327:40" pos:end="327:41">-&gt;</operator><name pos:start="327:42" pos:end="327:47">status</name><index pos:start="327:48" pos:end="327:50">[<expr pos:start="327:49" pos:end="327:49"><name pos:start="327:49" pos:end="327:49">i</name></expr>]</index></name><operator pos:start="327:51" pos:end="327:51">.</operator><name pos:start="327:52" pos:end="327:58">sample2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="331:9" pos:end="379:9"><if pos:start="331:9" pos:end="365:9">if <condition pos:start="331:12" pos:end="331:31">(<expr pos:start="331:13" pos:end="331:30"><name pos:start="331:13" pos:end="331:26"><name pos:start="331:13" pos:end="331:17">avctx</name><operator pos:start="331:18" pos:end="331:19">-&gt;</operator><name pos:start="331:20" pos:end="331:26">trellis</name></name> <operator pos:start="331:28" pos:end="331:28">&gt;</operator> <literal type="number" pos:start="331:30" pos:end="331:30">0</literal></expr>)</condition> <block pos:start="331:33" pos:end="365:9">{<block_content pos:start="333:13" pos:end="363:25">

            <expr_stmt pos:start="333:13" pos:end="333:57"><expr pos:start="333:13" pos:end="333:56"><name pos:start="333:13" pos:end="333:13">n</name> <operator pos:start="333:15" pos:end="333:15">=</operator> <name pos:start="333:17" pos:end="333:34"><name pos:start="333:17" pos:end="333:21">avctx</name><operator pos:start="333:22" pos:end="333:23">-&gt;</operator><name pos:start="333:24" pos:end="333:34">block_align</name></name> <operator pos:start="333:36" pos:end="333:36">-</operator> <literal type="number" pos:start="333:38" pos:end="333:38">7</literal> <operator pos:start="333:40" pos:end="333:40">*</operator> <name pos:start="333:42" pos:end="333:56"><name pos:start="333:42" pos:end="333:46">avctx</name><operator pos:start="333:47" pos:end="333:48">-&gt;</operator><name pos:start="333:49" pos:end="333:56">channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:55"><expr pos:start="335:13" pos:end="335:54"><call pos:start="335:13" pos:end="335:54"><name pos:start="335:13" pos:end="335:28">FF_ALLOC_OR_GOTO</name><argument_list pos:start="335:29" pos:end="335:54">(<argument pos:start="335:30" pos:end="335:34"><expr pos:start="335:30" pos:end="335:34"><name pos:start="335:30" pos:end="335:34">avctx</name></expr></argument>, <argument pos:start="335:37" pos:end="335:39"><expr pos:start="335:37" pos:end="335:39"><name pos:start="335:37" pos:end="335:39">buf</name></expr></argument>, <argument pos:start="335:42" pos:end="335:46"><expr pos:start="335:42" pos:end="335:46"><literal type="number" pos:start="335:42" pos:end="335:42">2</literal> <operator pos:start="335:44" pos:end="335:44">*</operator> <name pos:start="335:46" pos:end="335:46">n</name></expr></argument>, <argument pos:start="335:49" pos:end="335:53"><expr pos:start="335:49" pos:end="335:53"><name pos:start="335:49" pos:end="335:53">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="337:13" pos:end="361:13"><if pos:start="337:13" pos:end="347:13">if <condition pos:start="337:16" pos:end="337:37">(<expr pos:start="337:17" pos:end="337:36"><name pos:start="337:17" pos:end="337:31"><name pos:start="337:17" pos:end="337:21">avctx</name><operator pos:start="337:22" pos:end="337:23">-&gt;</operator><name pos:start="337:24" pos:end="337:31">channels</name></name> <operator pos:start="337:33" pos:end="337:34">==</operator> <literal type="number" pos:start="337:36" pos:end="337:36">1</literal></expr>)</condition> <block pos:start="337:39" pos:end="347:13">{<block_content pos:start="339:17" pos:end="345:56">

                <expr_stmt pos:start="339:17" pos:end="341:56"><expr pos:start="339:17" pos:end="341:55"><call pos:start="339:17" pos:end="341:55"><name pos:start="339:17" pos:end="339:38">adpcm_compress_trellis</name><argument_list pos:start="339:39" pos:end="341:55">(<argument pos:start="339:40" pos:end="339:44"><expr pos:start="339:40" pos:end="339:44"><name pos:start="339:40" pos:end="339:44">avctx</name></expr></argument>, <argument pos:start="339:47" pos:end="339:53"><expr pos:start="339:47" pos:end="339:53"><name pos:start="339:47" pos:end="339:53">samples</name></expr></argument>, <argument pos:start="339:56" pos:end="339:58"><expr pos:start="339:56" pos:end="339:58"><name pos:start="339:56" pos:end="339:58">buf</name></expr></argument>, <argument pos:start="339:61" pos:end="339:73"><expr pos:start="339:61" pos:end="339:73"><operator pos:start="339:61" pos:end="339:61">&amp;</operator><name pos:start="339:62" pos:end="339:73"><name pos:start="339:62" pos:end="339:62">c</name><operator pos:start="339:63" pos:end="339:64">-&gt;</operator><name pos:start="339:65" pos:end="339:70">status</name><index pos:start="339:71" pos:end="339:73">[<expr pos:start="339:72" pos:end="339:72"><literal type="number" pos:start="339:72" pos:end="339:72">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="339:76" pos:end="339:76"><expr pos:start="339:76" pos:end="339:76"><name pos:start="339:76" pos:end="339:76">n</name></expr></argument>,

                                       <argument pos:start="341:40" pos:end="341:54"><expr pos:start="341:40" pos:end="341:54"><name pos:start="341:40" pos:end="341:54"><name pos:start="341:40" pos:end="341:44">avctx</name><operator pos:start="341:45" pos:end="341:46">-&gt;</operator><name pos:start="341:47" pos:end="341:54">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="343:17" pos:end="345:56">for <control pos:start="343:21" pos:end="343:42">(<init pos:start="343:22" pos:end="343:27"><expr pos:start="343:22" pos:end="343:26"><name pos:start="343:22" pos:end="343:22">i</name> <operator pos:start="343:24" pos:end="343:24">=</operator> <literal type="number" pos:start="343:26" pos:end="343:26">0</literal></expr>;</init> <condition pos:start="343:29" pos:end="343:34"><expr pos:start="343:29" pos:end="343:33"><name pos:start="343:29" pos:end="343:29">i</name> <operator pos:start="343:31" pos:end="343:31">&lt;</operator> <name pos:start="343:33" pos:end="343:33">n</name></expr>;</condition> <incr pos:start="343:36" pos:end="343:41"><expr pos:start="343:36" pos:end="343:41"><name pos:start="343:36" pos:end="343:36">i</name> <operator pos:start="343:38" pos:end="343:39">+=</operator> <literal type="number" pos:start="343:41" pos:end="343:41">2</literal></expr></incr>)</control><block type="pseudo" pos:start="345:21" pos:end="345:56"><block_content pos:start="345:21" pos:end="345:56">

                    <expr_stmt pos:start="345:21" pos:end="345:56"><expr pos:start="345:21" pos:end="345:55"><operator pos:start="345:21" pos:end="345:21">*</operator><name pos:start="345:22" pos:end="345:24">dst</name><operator pos:start="345:25" pos:end="345:26">++</operator> <operator pos:start="345:28" pos:end="345:28">=</operator> <operator pos:start="345:30" pos:end="345:30">(</operator><name pos:start="345:31" pos:end="345:36"><name pos:start="345:31" pos:end="345:33">buf</name><index pos:start="345:34" pos:end="345:36">[<expr pos:start="345:35" pos:end="345:35"><name pos:start="345:35" pos:end="345:35">i</name></expr>]</index></name> <operator pos:start="345:38" pos:end="345:39">&lt;&lt;</operator> <literal type="number" pos:start="345:41" pos:end="345:41">4</literal><operator pos:start="345:42" pos:end="345:42">)</operator> <operator pos:start="345:44" pos:end="345:44">|</operator> <name pos:start="345:46" pos:end="345:55"><name pos:start="345:46" pos:end="345:48">buf</name><index pos:start="345:49" pos:end="345:55">[<expr pos:start="345:50" pos:end="345:54"><name pos:start="345:50" pos:end="345:50">i</name> <operator pos:start="345:52" pos:end="345:52">+</operator> <literal type="number" pos:start="345:54" pos:end="345:54">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="347:15" pos:end="361:13">else <block pos:start="347:20" pos:end="361:13">{<block_content pos:start="349:17" pos:end="359:56">

                <expr_stmt pos:start="349:17" pos:end="351:74"><expr pos:start="349:17" pos:end="351:73"><call pos:start="349:17" pos:end="351:73"><name pos:start="349:17" pos:end="349:38">adpcm_compress_trellis</name><argument_list pos:start="349:39" pos:end="351:73">(<argument pos:start="349:40" pos:end="349:44"><expr pos:start="349:40" pos:end="349:44"><name pos:start="349:40" pos:end="349:44">avctx</name></expr></argument>, <argument pos:start="349:47" pos:end="349:53"><expr pos:start="349:47" pos:end="349:53"><name pos:start="349:47" pos:end="349:53">samples</name></expr></argument>,     <argument pos:start="349:60" pos:end="349:62"><expr pos:start="349:60" pos:end="349:62"><name pos:start="349:60" pos:end="349:62">buf</name></expr></argument>,

                                       <argument pos:start="351:40" pos:end="351:52"><expr pos:start="351:40" pos:end="351:52"><operator pos:start="351:40" pos:end="351:40">&amp;</operator><name pos:start="351:41" pos:end="351:52"><name pos:start="351:41" pos:end="351:41">c</name><operator pos:start="351:42" pos:end="351:43">-&gt;</operator><name pos:start="351:44" pos:end="351:49">status</name><index pos:start="351:50" pos:end="351:52">[<expr pos:start="351:51" pos:end="351:51"><literal type="number" pos:start="351:51" pos:end="351:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="351:55" pos:end="351:55"><expr pos:start="351:55" pos:end="351:55"><name pos:start="351:55" pos:end="351:55">n</name></expr></argument>, <argument pos:start="351:58" pos:end="351:72"><expr pos:start="351:58" pos:end="351:72"><name pos:start="351:58" pos:end="351:72"><name pos:start="351:58" pos:end="351:62">avctx</name><operator pos:start="351:63" pos:end="351:64">-&gt;</operator><name pos:start="351:65" pos:end="351:72">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="355:74"><expr pos:start="353:17" pos:end="355:73"><call pos:start="353:17" pos:end="355:73"><name pos:start="353:17" pos:end="353:38">adpcm_compress_trellis</name><argument_list pos:start="353:39" pos:end="355:73">(<argument pos:start="353:40" pos:end="353:44"><expr pos:start="353:40" pos:end="353:44"><name pos:start="353:40" pos:end="353:44">avctx</name></expr></argument>, <argument pos:start="353:47" pos:end="353:57"><expr pos:start="353:47" pos:end="353:57"><name pos:start="353:47" pos:end="353:53">samples</name> <operator pos:start="353:55" pos:end="353:55">+</operator> <literal type="number" pos:start="353:57" pos:end="353:57">1</literal></expr></argument>, <argument pos:start="353:60" pos:end="353:66"><expr pos:start="353:60" pos:end="353:66"><name pos:start="353:60" pos:end="353:62">buf</name> <operator pos:start="353:64" pos:end="353:64">+</operator> <name pos:start="353:66" pos:end="353:66">n</name></expr></argument>,

                                       <argument pos:start="355:40" pos:end="355:52"><expr pos:start="355:40" pos:end="355:52"><operator pos:start="355:40" pos:end="355:40">&amp;</operator><name pos:start="355:41" pos:end="355:52"><name pos:start="355:41" pos:end="355:41">c</name><operator pos:start="355:42" pos:end="355:43">-&gt;</operator><name pos:start="355:44" pos:end="355:49">status</name><index pos:start="355:50" pos:end="355:52">[<expr pos:start="355:51" pos:end="355:51"><literal type="number" pos:start="355:51" pos:end="355:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="355:55" pos:end="355:55"><expr pos:start="355:55" pos:end="355:55"><name pos:start="355:55" pos:end="355:55">n</name></expr></argument>, <argument pos:start="355:58" pos:end="355:72"><expr pos:start="355:58" pos:end="355:72"><name pos:start="355:58" pos:end="355:72"><name pos:start="355:58" pos:end="355:62">avctx</name><operator pos:start="355:63" pos:end="355:64">-&gt;</operator><name pos:start="355:65" pos:end="355:72">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="357:17" pos:end="359:56">for <control pos:start="357:21" pos:end="357:39">(<init pos:start="357:22" pos:end="357:27"><expr pos:start="357:22" pos:end="357:26"><name pos:start="357:22" pos:end="357:22">i</name> <operator pos:start="357:24" pos:end="357:24">=</operator> <literal type="number" pos:start="357:26" pos:end="357:26">0</literal></expr>;</init> <condition pos:start="357:29" pos:end="357:34"><expr pos:start="357:29" pos:end="357:33"><name pos:start="357:29" pos:end="357:29">i</name> <operator pos:start="357:31" pos:end="357:31">&lt;</operator> <name pos:start="357:33" pos:end="357:33">n</name></expr>;</condition> <incr pos:start="357:36" pos:end="357:38"><expr pos:start="357:36" pos:end="357:38"><name pos:start="357:36" pos:end="357:36">i</name><operator pos:start="357:37" pos:end="357:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="359:21" pos:end="359:56"><block_content pos:start="359:21" pos:end="359:56">

                    <expr_stmt pos:start="359:21" pos:end="359:56"><expr pos:start="359:21" pos:end="359:55"><operator pos:start="359:21" pos:end="359:21">*</operator><name pos:start="359:22" pos:end="359:24">dst</name><operator pos:start="359:25" pos:end="359:26">++</operator> <operator pos:start="359:28" pos:end="359:28">=</operator> <operator pos:start="359:30" pos:end="359:30">(</operator><name pos:start="359:31" pos:end="359:36"><name pos:start="359:31" pos:end="359:33">buf</name><index pos:start="359:34" pos:end="359:36">[<expr pos:start="359:35" pos:end="359:35"><name pos:start="359:35" pos:end="359:35">i</name></expr>]</index></name> <operator pos:start="359:38" pos:end="359:39">&lt;&lt;</operator> <literal type="number" pos:start="359:41" pos:end="359:41">4</literal><operator pos:start="359:42" pos:end="359:42">)</operator> <operator pos:start="359:44" pos:end="359:44">|</operator> <name pos:start="359:46" pos:end="359:55"><name pos:start="359:46" pos:end="359:48">buf</name><index pos:start="359:49" pos:end="359:55">[<expr pos:start="359:50" pos:end="359:54"><name pos:start="359:50" pos:end="359:50">n</name> <operator pos:start="359:52" pos:end="359:52">+</operator> <name pos:start="359:54" pos:end="359:54">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="363:13" pos:end="363:25"><expr pos:start="363:13" pos:end="363:24"><call pos:start="363:13" pos:end="363:24"><name pos:start="363:13" pos:end="363:19">av_free</name><argument_list pos:start="363:20" pos:end="363:24">(<argument pos:start="363:21" pos:end="363:23"><expr pos:start="363:21" pos:end="363:23"><name pos:start="363:21" pos:end="363:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="365:11" pos:end="379:9">else <block pos:start="365:16" pos:end="379:9">{<block_content pos:start="367:13" pos:end="377:13">

            <for pos:start="367:13" pos:end="377:13">for <control pos:start="367:17" pos:end="367:70">(<init pos:start="367:18" pos:end="367:41"><expr pos:start="367:18" pos:end="367:40"><name pos:start="367:18" pos:end="367:18">i</name> <operator pos:start="367:20" pos:end="367:20">=</operator> <literal type="number" pos:start="367:22" pos:end="367:22">7</literal> <operator pos:start="367:24" pos:end="367:24">*</operator> <name pos:start="367:26" pos:end="367:40"><name pos:start="367:26" pos:end="367:30">avctx</name><operator pos:start="367:31" pos:end="367:32">-&gt;</operator><name pos:start="367:33" pos:end="367:40">channels</name></name></expr>;</init> <condition pos:start="367:43" pos:end="367:65"><expr pos:start="367:43" pos:end="367:64"><name pos:start="367:43" pos:end="367:43">i</name> <operator pos:start="367:45" pos:end="367:45">&lt;</operator> <name pos:start="367:47" pos:end="367:64"><name pos:start="367:47" pos:end="367:51">avctx</name><operator pos:start="367:52" pos:end="367:53">-&gt;</operator><name pos:start="367:54" pos:end="367:64">block_align</name></name></expr>;</condition> <incr pos:start="367:67" pos:end="367:69"><expr pos:start="367:67" pos:end="367:69"><name pos:start="367:67" pos:end="367:67">i</name><operator pos:start="367:68" pos:end="367:69">++</operator></expr></incr>)</control> <block pos:start="367:72" pos:end="377:13">{<block_content pos:start="369:17" pos:end="375:33">

                <decl_stmt pos:start="369:17" pos:end="369:27"><decl pos:start="369:17" pos:end="369:26"><type pos:start="369:17" pos:end="369:19"><name pos:start="369:17" pos:end="369:19">int</name></type> <name pos:start="369:21" pos:end="369:26">nibble</name></decl>;</decl_stmt>

                <expr_stmt pos:start="371:17" pos:end="371:84"><expr pos:start="371:17" pos:end="371:83"><name pos:start="371:17" pos:end="371:22">nibble</name>  <operator pos:start="371:25" pos:end="371:25">=</operator> <call pos:start="371:27" pos:end="371:78"><name pos:start="371:27" pos:end="371:50">adpcm_ms_compress_sample</name><argument_list pos:start="371:51" pos:end="371:78">(<argument pos:start="371:52" pos:end="371:65"><expr pos:start="371:52" pos:end="371:65"><operator pos:start="371:52" pos:end="371:52">&amp;</operator><name pos:start="371:53" pos:end="371:65"><name pos:start="371:53" pos:end="371:53">c</name><operator pos:start="371:54" pos:end="371:55">-&gt;</operator><name pos:start="371:56" pos:end="371:61">status</name><index pos:start="371:62" pos:end="371:65">[ <expr pos:start="371:64" pos:end="371:64"><literal type="number" pos:start="371:64" pos:end="371:64">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="371:68" pos:end="371:77"><expr pos:start="371:68" pos:end="371:77"><operator pos:start="371:68" pos:end="371:68">*</operator><name pos:start="371:69" pos:end="371:75">samples</name><operator pos:start="371:76" pos:end="371:77">++</operator></expr></argument>)</argument_list></call> <operator pos:start="371:80" pos:end="371:81">&lt;&lt;</operator> <literal type="number" pos:start="371:83" pos:end="371:83">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:79"><expr pos:start="373:17" pos:end="373:78"><name pos:start="373:17" pos:end="373:22">nibble</name> <operator pos:start="373:24" pos:end="373:25">|=</operator> <call pos:start="373:27" pos:end="373:78"><name pos:start="373:27" pos:end="373:50">adpcm_ms_compress_sample</name><argument_list pos:start="373:51" pos:end="373:78">(<argument pos:start="373:52" pos:end="373:65"><expr pos:start="373:52" pos:end="373:65"><operator pos:start="373:52" pos:end="373:52">&amp;</operator><name pos:start="373:53" pos:end="373:65"><name pos:start="373:53" pos:end="373:53">c</name><operator pos:start="373:54" pos:end="373:55">-&gt;</operator><name pos:start="373:56" pos:end="373:61">status</name><index pos:start="373:62" pos:end="373:65">[<expr pos:start="373:63" pos:end="373:64"><name pos:start="373:63" pos:end="373:64">st</name></expr>]</index></name></expr></argument>, <argument pos:start="373:68" pos:end="373:77"><expr pos:start="373:68" pos:end="373:77"><operator pos:start="373:68" pos:end="373:68">*</operator><name pos:start="373:69" pos:end="373:75">samples</name><operator pos:start="373:76" pos:end="373:77">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:33"><expr pos:start="375:17" pos:end="375:32"><operator pos:start="375:17" pos:end="375:17">*</operator><name pos:start="375:18" pos:end="375:20">dst</name><operator pos:start="375:21" pos:end="375:22">++</operator>  <operator pos:start="375:25" pos:end="375:25">=</operator> <name pos:start="375:27" pos:end="375:32">nibble</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="381:9" pos:end="381:14">break;</break>

    <case pos:start="383:5" pos:end="383:34">case <expr pos:start="383:10" pos:end="383:33"><name pos:start="383:10" pos:end="383:33">AV_CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>

        <expr_stmt pos:start="385:9" pos:end="385:34"><expr pos:start="385:9" pos:end="385:33"><name pos:start="385:9" pos:end="385:9">n</name> <operator pos:start="385:11" pos:end="385:11">=</operator> <name pos:start="385:13" pos:end="385:29"><name pos:start="385:13" pos:end="385:17">frame</name><operator pos:start="385:18" pos:end="385:19">-&gt;</operator><name pos:start="385:20" pos:end="385:29">nb_samples</name></name> <operator pos:start="385:31" pos:end="385:31">/</operator> <literal type="number" pos:start="385:33" pos:end="385:33">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="387:9" pos:end="433:13"><if pos:start="387:9" pos:end="421:9">if <condition pos:start="387:12" pos:end="387:31">(<expr pos:start="387:13" pos:end="387:30"><name pos:start="387:13" pos:end="387:26"><name pos:start="387:13" pos:end="387:17">avctx</name><operator pos:start="387:18" pos:end="387:19">-&gt;</operator><name pos:start="387:20" pos:end="387:26">trellis</name></name> <operator pos:start="387:28" pos:end="387:28">&gt;</operator> <literal type="number" pos:start="387:30" pos:end="387:30">0</literal></expr>)</condition> <block pos:start="387:33" pos:end="421:9">{<block_content pos:start="389:13" pos:end="419:25">

            <expr_stmt pos:start="389:13" pos:end="389:59"><expr pos:start="389:13" pos:end="389:58"><call pos:start="389:13" pos:end="389:58"><name pos:start="389:13" pos:end="389:28">FF_ALLOC_OR_GOTO</name><argument_list pos:start="389:29" pos:end="389:58">(<argument pos:start="389:30" pos:end="389:34"><expr pos:start="389:30" pos:end="389:34"><name pos:start="389:30" pos:end="389:34">avctx</name></expr></argument>, <argument pos:start="389:37" pos:end="389:39"><expr pos:start="389:37" pos:end="389:39"><name pos:start="389:37" pos:end="389:39">buf</name></expr></argument>, <argument pos:start="389:42" pos:end="389:50"><expr pos:start="389:42" pos:end="389:50"><literal type="number" pos:start="389:42" pos:end="389:42">2</literal> <operator pos:start="389:44" pos:end="389:44">*</operator> <name pos:start="389:46" pos:end="389:46">n</name> <operator pos:start="389:48" pos:end="389:48">*</operator> <literal type="number" pos:start="389:50" pos:end="389:50">2</literal></expr></argument>, <argument pos:start="389:53" pos:end="389:57"><expr pos:start="389:53" pos:end="389:57"><name pos:start="389:53" pos:end="389:57">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:19"><expr pos:start="391:13" pos:end="391:18"><name pos:start="391:13" pos:end="391:13">n</name> <operator pos:start="391:15" pos:end="391:16">*=</operator> <literal type="number" pos:start="391:18" pos:end="391:18">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="393:13" pos:end="417:13"><if pos:start="393:13" pos:end="403:13">if <condition pos:start="393:16" pos:end="393:37">(<expr pos:start="393:17" pos:end="393:36"><name pos:start="393:17" pos:end="393:31"><name pos:start="393:17" pos:end="393:21">avctx</name><operator pos:start="393:22" pos:end="393:23">-&gt;</operator><name pos:start="393:24" pos:end="393:31">channels</name></name> <operator pos:start="393:33" pos:end="393:34">==</operator> <literal type="number" pos:start="393:36" pos:end="393:36">1</literal></expr>)</condition> <block pos:start="393:39" pos:end="403:13">{<block_content pos:start="395:17" pos:end="401:56">

                <expr_stmt pos:start="395:17" pos:end="397:56"><expr pos:start="395:17" pos:end="397:55"><call pos:start="395:17" pos:end="397:55"><name pos:start="395:17" pos:end="395:38">adpcm_compress_trellis</name><argument_list pos:start="395:39" pos:end="397:55">(<argument pos:start="395:40" pos:end="395:44"><expr pos:start="395:40" pos:end="395:44"><name pos:start="395:40" pos:end="395:44">avctx</name></expr></argument>, <argument pos:start="395:47" pos:end="395:53"><expr pos:start="395:47" pos:end="395:53"><name pos:start="395:47" pos:end="395:53">samples</name></expr></argument>, <argument pos:start="395:56" pos:end="395:58"><expr pos:start="395:56" pos:end="395:58"><name pos:start="395:56" pos:end="395:58">buf</name></expr></argument>, <argument pos:start="395:61" pos:end="395:73"><expr pos:start="395:61" pos:end="395:73"><operator pos:start="395:61" pos:end="395:61">&amp;</operator><name pos:start="395:62" pos:end="395:73"><name pos:start="395:62" pos:end="395:62">c</name><operator pos:start="395:63" pos:end="395:64">-&gt;</operator><name pos:start="395:65" pos:end="395:70">status</name><index pos:start="395:71" pos:end="395:73">[<expr pos:start="395:72" pos:end="395:72"><literal type="number" pos:start="395:72" pos:end="395:72">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="395:76" pos:end="395:76"><expr pos:start="395:76" pos:end="395:76"><name pos:start="395:76" pos:end="395:76">n</name></expr></argument>,

                                       <argument pos:start="397:40" pos:end="397:54"><expr pos:start="397:40" pos:end="397:54"><name pos:start="397:40" pos:end="397:54"><name pos:start="397:40" pos:end="397:44">avctx</name><operator pos:start="397:45" pos:end="397:46">-&gt;</operator><name pos:start="397:47" pos:end="397:54">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="399:17" pos:end="401:56">for <control pos:start="399:21" pos:end="399:42">(<init pos:start="399:22" pos:end="399:27"><expr pos:start="399:22" pos:end="399:26"><name pos:start="399:22" pos:end="399:22">i</name> <operator pos:start="399:24" pos:end="399:24">=</operator> <literal type="number" pos:start="399:26" pos:end="399:26">0</literal></expr>;</init> <condition pos:start="399:29" pos:end="399:34"><expr pos:start="399:29" pos:end="399:33"><name pos:start="399:29" pos:end="399:29">i</name> <operator pos:start="399:31" pos:end="399:31">&lt;</operator> <name pos:start="399:33" pos:end="399:33">n</name></expr>;</condition> <incr pos:start="399:36" pos:end="399:41"><expr pos:start="399:36" pos:end="399:41"><name pos:start="399:36" pos:end="399:36">i</name> <operator pos:start="399:38" pos:end="399:39">+=</operator> <literal type="number" pos:start="399:41" pos:end="399:41">2</literal></expr></incr>)</control><block type="pseudo" pos:start="401:21" pos:end="401:56"><block_content pos:start="401:21" pos:end="401:56">

                    <expr_stmt pos:start="401:21" pos:end="401:56"><expr pos:start="401:21" pos:end="401:55"><operator pos:start="401:21" pos:end="401:21">*</operator><name pos:start="401:22" pos:end="401:24">dst</name><operator pos:start="401:25" pos:end="401:26">++</operator> <operator pos:start="401:28" pos:end="401:28">=</operator> <name pos:start="401:30" pos:end="401:35"><name pos:start="401:30" pos:end="401:32">buf</name><index pos:start="401:33" pos:end="401:35">[<expr pos:start="401:34" pos:end="401:34"><name pos:start="401:34" pos:end="401:34">i</name></expr>]</index></name> <operator pos:start="401:37" pos:end="401:37">|</operator> <operator pos:start="401:39" pos:end="401:39">(</operator><name pos:start="401:40" pos:end="401:49"><name pos:start="401:40" pos:end="401:42">buf</name><index pos:start="401:43" pos:end="401:49">[<expr pos:start="401:44" pos:end="401:48"><name pos:start="401:44" pos:end="401:44">i</name> <operator pos:start="401:46" pos:end="401:46">+</operator> <literal type="number" pos:start="401:48" pos:end="401:48">1</literal></expr>]</index></name> <operator pos:start="401:51" pos:end="401:52">&lt;&lt;</operator> <literal type="number" pos:start="401:54" pos:end="401:54">4</literal><operator pos:start="401:55" pos:end="401:55">)</operator></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="403:15" pos:end="417:13">else <block pos:start="403:20" pos:end="417:13">{<block_content pos:start="405:17" pos:end="415:56">

                <expr_stmt pos:start="405:17" pos:end="407:74"><expr pos:start="405:17" pos:end="407:73"><call pos:start="405:17" pos:end="407:73"><name pos:start="405:17" pos:end="405:38">adpcm_compress_trellis</name><argument_list pos:start="405:39" pos:end="407:73">(<argument pos:start="405:40" pos:end="405:44"><expr pos:start="405:40" pos:end="405:44"><name pos:start="405:40" pos:end="405:44">avctx</name></expr></argument>, <argument pos:start="405:47" pos:end="405:53"><expr pos:start="405:47" pos:end="405:53"><name pos:start="405:47" pos:end="405:53">samples</name></expr></argument>,     <argument pos:start="405:60" pos:end="405:62"><expr pos:start="405:60" pos:end="405:62"><name pos:start="405:60" pos:end="405:62">buf</name></expr></argument>,

                                       <argument pos:start="407:40" pos:end="407:52"><expr pos:start="407:40" pos:end="407:52"><operator pos:start="407:40" pos:end="407:40">&amp;</operator><name pos:start="407:41" pos:end="407:52"><name pos:start="407:41" pos:end="407:41">c</name><operator pos:start="407:42" pos:end="407:43">-&gt;</operator><name pos:start="407:44" pos:end="407:49">status</name><index pos:start="407:50" pos:end="407:52">[<expr pos:start="407:51" pos:end="407:51"><literal type="number" pos:start="407:51" pos:end="407:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="407:55" pos:end="407:55"><expr pos:start="407:55" pos:end="407:55"><name pos:start="407:55" pos:end="407:55">n</name></expr></argument>, <argument pos:start="407:58" pos:end="407:72"><expr pos:start="407:58" pos:end="407:72"><name pos:start="407:58" pos:end="407:72"><name pos:start="407:58" pos:end="407:62">avctx</name><operator pos:start="407:63" pos:end="407:64">-&gt;</operator><name pos:start="407:65" pos:end="407:72">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="411:74"><expr pos:start="409:17" pos:end="411:73"><call pos:start="409:17" pos:end="411:73"><name pos:start="409:17" pos:end="409:38">adpcm_compress_trellis</name><argument_list pos:start="409:39" pos:end="411:73">(<argument pos:start="409:40" pos:end="409:44"><expr pos:start="409:40" pos:end="409:44"><name pos:start="409:40" pos:end="409:44">avctx</name></expr></argument>, <argument pos:start="409:47" pos:end="409:57"><expr pos:start="409:47" pos:end="409:57"><name pos:start="409:47" pos:end="409:53">samples</name> <operator pos:start="409:55" pos:end="409:55">+</operator> <literal type="number" pos:start="409:57" pos:end="409:57">1</literal></expr></argument>, <argument pos:start="409:60" pos:end="409:66"><expr pos:start="409:60" pos:end="409:66"><name pos:start="409:60" pos:end="409:62">buf</name> <operator pos:start="409:64" pos:end="409:64">+</operator> <name pos:start="409:66" pos:end="409:66">n</name></expr></argument>,

                                       <argument pos:start="411:40" pos:end="411:52"><expr pos:start="411:40" pos:end="411:52"><operator pos:start="411:40" pos:end="411:40">&amp;</operator><name pos:start="411:41" pos:end="411:52"><name pos:start="411:41" pos:end="411:41">c</name><operator pos:start="411:42" pos:end="411:43">-&gt;</operator><name pos:start="411:44" pos:end="411:49">status</name><index pos:start="411:50" pos:end="411:52">[<expr pos:start="411:51" pos:end="411:51"><literal type="number" pos:start="411:51" pos:end="411:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="411:55" pos:end="411:55"><expr pos:start="411:55" pos:end="411:55"><name pos:start="411:55" pos:end="411:55">n</name></expr></argument>, <argument pos:start="411:58" pos:end="411:72"><expr pos:start="411:58" pos:end="411:72"><name pos:start="411:58" pos:end="411:72"><name pos:start="411:58" pos:end="411:62">avctx</name><operator pos:start="411:63" pos:end="411:64">-&gt;</operator><name pos:start="411:65" pos:end="411:72">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="413:17" pos:end="415:56">for <control pos:start="413:21" pos:end="413:39">(<init pos:start="413:22" pos:end="413:27"><expr pos:start="413:22" pos:end="413:26"><name pos:start="413:22" pos:end="413:22">i</name> <operator pos:start="413:24" pos:end="413:24">=</operator> <literal type="number" pos:start="413:26" pos:end="413:26">0</literal></expr>;</init> <condition pos:start="413:29" pos:end="413:34"><expr pos:start="413:29" pos:end="413:33"><name pos:start="413:29" pos:end="413:29">i</name> <operator pos:start="413:31" pos:end="413:31">&lt;</operator> <name pos:start="413:33" pos:end="413:33">n</name></expr>;</condition> <incr pos:start="413:36" pos:end="413:38"><expr pos:start="413:36" pos:end="413:38"><name pos:start="413:36" pos:end="413:36">i</name><operator pos:start="413:37" pos:end="413:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="415:21" pos:end="415:56"><block_content pos:start="415:21" pos:end="415:56">

                    <expr_stmt pos:start="415:21" pos:end="415:56"><expr pos:start="415:21" pos:end="415:55"><operator pos:start="415:21" pos:end="415:21">*</operator><name pos:start="415:22" pos:end="415:24">dst</name><operator pos:start="415:25" pos:end="415:26">++</operator> <operator pos:start="415:28" pos:end="415:28">=</operator> <name pos:start="415:30" pos:end="415:35"><name pos:start="415:30" pos:end="415:32">buf</name><index pos:start="415:33" pos:end="415:35">[<expr pos:start="415:34" pos:end="415:34"><name pos:start="415:34" pos:end="415:34">i</name></expr>]</index></name> <operator pos:start="415:37" pos:end="415:37">|</operator> <operator pos:start="415:39" pos:end="415:39">(</operator><name pos:start="415:40" pos:end="415:49"><name pos:start="415:40" pos:end="415:42">buf</name><index pos:start="415:43" pos:end="415:49">[<expr pos:start="415:44" pos:end="415:48"><name pos:start="415:44" pos:end="415:44">n</name> <operator pos:start="415:46" pos:end="415:46">+</operator> <name pos:start="415:48" pos:end="415:48">i</name></expr>]</index></name> <operator pos:start="415:51" pos:end="415:52">&lt;&lt;</operator> <literal type="number" pos:start="415:54" pos:end="415:54">4</literal><operator pos:start="415:55" pos:end="415:55">)</operator></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="419:13" pos:end="419:25"><expr pos:start="419:13" pos:end="419:24"><call pos:start="419:13" pos:end="419:24"><name pos:start="419:13" pos:end="419:19">av_free</name><argument_list pos:start="419:20" pos:end="419:24">(<argument pos:start="419:21" pos:end="419:23"><expr pos:start="419:21" pos:end="419:23"><name pos:start="419:21" pos:end="419:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="421:11" pos:end="433:13">else<block type="pseudo" pos:start="423:13" pos:end="433:13"><block_content pos:start="423:13" pos:end="433:13">

            <for pos:start="423:13" pos:end="433:13">for <control pos:start="423:17" pos:end="423:50">(<init pos:start="423:18" pos:end="423:38"><expr pos:start="423:18" pos:end="423:37"><name pos:start="423:18" pos:end="423:18">n</name> <operator pos:start="423:20" pos:end="423:21">*=</operator> <name pos:start="423:23" pos:end="423:37"><name pos:start="423:23" pos:end="423:27">avctx</name><operator pos:start="423:28" pos:end="423:29">-&gt;</operator><name pos:start="423:30" pos:end="423:37">channels</name></name></expr>;</init> <condition pos:start="423:40" pos:end="423:45"><expr pos:start="423:40" pos:end="423:44"><name pos:start="423:40" pos:end="423:40">n</name> <operator pos:start="423:42" pos:end="423:42">&gt;</operator> <literal type="number" pos:start="423:44" pos:end="423:44">0</literal></expr>;</condition> <incr pos:start="423:47" pos:end="423:49"><expr pos:start="423:47" pos:end="423:49"><name pos:start="423:47" pos:end="423:47">n</name><operator pos:start="423:48" pos:end="423:49">--</operator></expr></incr>)</control> <block pos:start="423:52" pos:end="433:13">{<block_content pos:start="425:17" pos:end="431:33">

                <decl_stmt pos:start="425:17" pos:end="425:27"><decl pos:start="425:17" pos:end="425:26"><type pos:start="425:17" pos:end="425:19"><name pos:start="425:17" pos:end="425:19">int</name></type> <name pos:start="425:21" pos:end="425:26">nibble</name></decl>;</decl_stmt>

                <expr_stmt pos:start="427:17" pos:end="427:83"><expr pos:start="427:17" pos:end="427:82"><name pos:start="427:17" pos:end="427:22">nibble</name>  <operator pos:start="427:25" pos:end="427:25">=</operator> <call pos:start="427:27" pos:end="427:82"><name pos:start="427:27" pos:end="427:54">adpcm_yamaha_compress_sample</name><argument_list pos:start="427:55" pos:end="427:82">(<argument pos:start="427:56" pos:end="427:69"><expr pos:start="427:56" pos:end="427:69"><operator pos:start="427:56" pos:end="427:56">&amp;</operator><name pos:start="427:57" pos:end="427:69"><name pos:start="427:57" pos:end="427:57">c</name><operator pos:start="427:58" pos:end="427:59">-&gt;</operator><name pos:start="427:60" pos:end="427:65">status</name><index pos:start="427:66" pos:end="427:69">[ <expr pos:start="427:68" pos:end="427:68"><literal type="number" pos:start="427:68" pos:end="427:68">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="427:72" pos:end="427:81"><expr pos:start="427:72" pos:end="427:81"><operator pos:start="427:72" pos:end="427:72">*</operator><name pos:start="427:73" pos:end="427:79">samples</name><operator pos:start="427:80" pos:end="427:81">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="429:17" pos:end="429:88"><expr pos:start="429:17" pos:end="429:87"><name pos:start="429:17" pos:end="429:22">nibble</name> <operator pos:start="429:24" pos:end="429:25">|=</operator> <call pos:start="429:27" pos:end="429:82"><name pos:start="429:27" pos:end="429:54">adpcm_yamaha_compress_sample</name><argument_list pos:start="429:55" pos:end="429:82">(<argument pos:start="429:56" pos:end="429:69"><expr pos:start="429:56" pos:end="429:69"><operator pos:start="429:56" pos:end="429:56">&amp;</operator><name pos:start="429:57" pos:end="429:69"><name pos:start="429:57" pos:end="429:57">c</name><operator pos:start="429:58" pos:end="429:59">-&gt;</operator><name pos:start="429:60" pos:end="429:65">status</name><index pos:start="429:66" pos:end="429:69">[<expr pos:start="429:67" pos:end="429:68"><name pos:start="429:67" pos:end="429:68">st</name></expr>]</index></name></expr></argument>, <argument pos:start="429:72" pos:end="429:81"><expr pos:start="429:72" pos:end="429:81"><operator pos:start="429:72" pos:end="429:72">*</operator><name pos:start="429:73" pos:end="429:79">samples</name><operator pos:start="429:80" pos:end="429:81">++</operator></expr></argument>)</argument_list></call> <operator pos:start="429:84" pos:end="429:85">&lt;&lt;</operator> <literal type="number" pos:start="429:87" pos:end="429:87">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="431:17" pos:end="431:33"><expr pos:start="431:17" pos:end="431:32"><operator pos:start="431:17" pos:end="431:17">*</operator><name pos:start="431:18" pos:end="431:20">dst</name><operator pos:start="431:21" pos:end="431:22">++</operator>  <operator pos:start="431:25" pos:end="431:25">=</operator> <name pos:start="431:27" pos:end="431:32">nibble</name></expr>;</expr_stmt>

            </block_content>}</block></for></block_content></block></else></if_stmt>

        <break pos:start="435:9" pos:end="435:14">break;</break>

    <default pos:start="437:5" pos:end="437:12">default:</default>

        <return pos:start="439:9" pos:end="439:31">return <expr pos:start="439:16" pos:end="439:30"><call pos:start="439:16" pos:end="439:30"><name pos:start="439:16" pos:end="439:22">AVERROR</name><argument_list pos:start="439:23" pos:end="439:30">(<argument pos:start="439:24" pos:end="439:29"><expr pos:start="439:24" pos:end="439:29"><name pos:start="439:24" pos:end="439:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="445:5" pos:end="445:27"><expr pos:start="445:5" pos:end="445:26"><name pos:start="445:5" pos:end="445:15"><name pos:start="445:5" pos:end="445:9">avpkt</name><operator pos:start="445:10" pos:end="445:11">-&gt;</operator><name pos:start="445:12" pos:end="445:15">size</name></name> <operator pos:start="445:17" pos:end="445:17">=</operator> <name pos:start="445:19" pos:end="445:26">pkt_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="447:5" pos:end="447:24"><expr pos:start="447:5" pos:end="447:23"><operator pos:start="447:5" pos:end="447:5">*</operator><name pos:start="447:6" pos:end="447:19">got_packet_ptr</name> <operator pos:start="447:21" pos:end="447:21">=</operator> <literal type="number" pos:start="447:23" pos:end="447:23">1</literal></expr>;</expr_stmt>

    <return pos:start="449:5" pos:end="449:13">return <expr pos:start="449:12" pos:end="449:12"><literal type="number" pos:start="449:12" pos:end="449:12">0</literal></expr>;</return>

<label pos:start="451:1" pos:end="451:6"><name pos:start="451:1" pos:end="451:5">error</name>:</label>

    <return pos:start="453:5" pos:end="453:27">return <expr pos:start="453:12" pos:end="453:26"><call pos:start="453:12" pos:end="453:26"><name pos:start="453:12" pos:end="453:18">AVERROR</name><argument_list pos:start="453:19" pos:end="453:26">(<argument pos:start="453:20" pos:end="453:25"><expr pos:start="453:20" pos:end="453:25"><name pos:start="453:20" pos:end="453:25">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
