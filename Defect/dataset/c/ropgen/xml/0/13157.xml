<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13157.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">cpu_exec_realizefn</name><parameter_list pos:start="1:24" pos:end="1:52">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:32">CPUState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">cpu</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:44">Error</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier><modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="38:0">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUClass</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cc</name> <init pos:start="5:18" pos:end="5:37">= <expr pos:start="5:20" pos:end="5:37"><call pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:32">CPU_GET_CLASS</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:22"><expr pos:start="9:5" pos:end="9:21"><call pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:16">cpu_list_add</name><argument_list pos:start="9:17" pos:end="9:21">(<argument pos:start="9:18" pos:end="9:20"><expr pos:start="9:18" pos:end="9:20"><name pos:start="9:18" pos:end="9:20">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="24:0"><if pos:start="13:5" pos:end="24:0">if <condition pos:start="13:8" pos:end="13:46">(<expr pos:start="13:9" pos:end="13:45"><call pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:19">tcg_enabled</name><argument_list pos:start="13:20" pos:end="13:21">()</argument_list></call> <operator pos:start="13:23" pos:end="13:24">&amp;&amp;</operator> <operator pos:start="13:26" pos:end="13:26">!</operator><name pos:start="13:27" pos:end="13:45"><name pos:start="13:27" pos:end="13:28">cc</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:45">tcg_initialized</name></name></expr>)</condition> <block pos:start="13:48" pos:end="24:0">{<block_content pos:start="15:9" pos:end="17:29">

        <expr_stmt pos:start="15:9" pos:end="15:35"><expr pos:start="15:9" pos:end="15:34"><name pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:10">cc</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:27">tcg_initialized</name></name> <operator pos:start="15:29" pos:end="15:29">=</operator> <name pos:start="15:31" pos:end="15:34">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:29"><expr pos:start="17:9" pos:end="17:28"><call pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:10">cc</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:26">tcg_initialize</name></name><argument_list pos:start="17:27" pos:end="17:28">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:7">ifndef</cpp:directive> <name pos:start="23:9" pos:end="23:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:43">(<expr pos:start="25:9" pos:end="25:42"><call pos:start="25:9" pos:end="25:34"><name pos:start="25:9" pos:end="25:21">qdev_get_vmsd</name><argument_list pos:start="25:22" pos:end="25:34">(<argument pos:start="25:23" pos:end="25:33"><expr pos:start="25:23" pos:end="25:33"><call pos:start="25:23" pos:end="25:33"><name pos:start="25:23" pos:end="25:28">DEVICE</name><argument_list pos:start="25:29" pos:end="25:33">(<argument pos:start="25:30" pos:end="25:32"><expr pos:start="25:30" pos:end="25:32"><name pos:start="25:30" pos:end="25:32">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="25:36" pos:end="25:37">==</operator> <name pos:start="25:39" pos:end="25:42">NULL</name></expr>)</condition> <block pos:start="25:45" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:73">

        <expr_stmt pos:start="27:9" pos:end="27:73"><expr pos:start="27:9" pos:end="27:72"><call pos:start="27:9" pos:end="27:72"><name pos:start="27:9" pos:end="27:24">vmstate_register</name><argument_list pos:start="27:25" pos:end="27:72">(<argument pos:start="27:26" pos:end="27:29"><expr pos:start="27:26" pos:end="27:29"><name pos:start="27:26" pos:end="27:29">NULL</name></expr></argument>, <argument pos:start="27:32" pos:end="27:45"><expr pos:start="27:32" pos:end="27:45"><name pos:start="27:32" pos:end="27:45"><name pos:start="27:32" pos:end="27:34">cpu</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:45">cpu_index</name></name></expr></argument>, <argument pos:start="27:48" pos:end="27:66"><expr pos:start="27:48" pos:end="27:66"><operator pos:start="27:48" pos:end="27:48">&amp;</operator><name pos:start="27:49" pos:end="27:66">vmstate_cpu_common</name></expr></argument>, <argument pos:start="27:69" pos:end="27:71"><expr pos:start="27:69" pos:end="27:71"><name pos:start="27:69" pos:end="27:71">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="38:0"><if pos:start="31:5" pos:end="38:0">if <condition pos:start="31:8" pos:end="31:25">(<expr pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:10">cc</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:16">vmsd</name></name> <operator pos:start="31:18" pos:end="31:19">!=</operator> <name pos:start="31:21" pos:end="31:24">NULL</name></expr>)</condition> <block pos:start="31:27" pos:end="38:0">{<block_content pos:start="33:9" pos:end="33:62">

        <expr_stmt pos:start="33:9" pos:end="33:62"><expr pos:start="33:9" pos:end="33:61"><call pos:start="33:9" pos:end="33:61"><name pos:start="33:9" pos:end="33:24">vmstate_register</name><argument_list pos:start="33:25" pos:end="33:61">(<argument pos:start="33:26" pos:end="33:29"><expr pos:start="33:26" pos:end="33:29"><name pos:start="33:26" pos:end="33:29">NULL</name></expr></argument>, <argument pos:start="33:32" pos:end="33:45"><expr pos:start="33:32" pos:end="33:45"><name pos:start="33:32" pos:end="33:45"><name pos:start="33:32" pos:end="33:34">cpu</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:45">cpu_index</name></name></expr></argument>, <argument pos:start="33:48" pos:end="33:55"><expr pos:start="33:48" pos:end="33:55"><name pos:start="33:48" pos:end="33:55"><name pos:start="33:48" pos:end="33:49">cc</name><operator pos:start="33:50" pos:end="33:51">-&gt;</operator><name pos:start="33:52" pos:end="33:55">vmsd</name></name></expr></argument>, <argument pos:start="33:58" pos:end="33:60"><expr pos:start="33:58" pos:end="33:60"><name pos:start="33:58" pos:end="33:60">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
