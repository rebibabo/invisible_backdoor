<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17161.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">buffered_flush</name><parameter_list pos:start="1:27" pos:end="1:47">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:43">QEMUFileBuffered</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:29">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">size_t</name></type> <name pos:start="5:12" pos:end="5:17">offset</name> <init pos:start="5:19" pos:end="5:21">= <expr pos:start="5:21" pos:end="5:21"><literal type="number" pos:start="5:21" pos:end="5:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">error</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:41"><expr pos:start="11:5" pos:end="11:40"><name pos:start="11:5" pos:end="11:9">error</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <call pos:start="11:13" pos:end="11:40"><name pos:start="11:13" pos:end="11:31">qemu_file_get_error</name><argument_list pos:start="11:32" pos:end="11:40">(<argument pos:start="11:33" pos:end="11:39"><expr pos:start="11:33" pos:end="11:39"><name pos:start="11:33" pos:end="11:39"><name pos:start="11:33" pos:end="11:33">s</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:39">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:19">(<expr pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:13">error</name> <operator pos:start="13:15" pos:end="13:16">!=</operator> <literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr>)</condition> <block pos:start="13:21" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:69"><expr pos:start="15:9" pos:end="15:68"><call pos:start="15:9" pos:end="15:68"><name pos:start="15:9" pos:end="15:15">DPRINTF</name><argument_list pos:start="15:16" pos:end="15:68">(<argument pos:start="15:17" pos:end="15:49"><expr pos:start="15:17" pos:end="15:49"><literal type="string" pos:start="15:17" pos:end="15:49">"flush when error, bailing: %s\n"</literal></expr></argument>, <argument pos:start="15:52" pos:end="15:67"><expr pos:start="15:52" pos:end="15:67"><call pos:start="15:52" pos:end="15:67"><name pos:start="15:52" pos:end="15:59">strerror</name><argument_list pos:start="15:60" pos:end="15:67">(<argument pos:start="15:61" pos:end="15:66"><expr pos:start="15:61" pos:end="15:66"><operator pos:start="15:61" pos:end="15:61">-</operator><name pos:start="15:62" pos:end="15:66">error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:62"><expr pos:start="23:5" pos:end="23:61"><call pos:start="23:5" pos:end="23:61"><name pos:start="23:5" pos:end="23:11">DPRINTF</name><argument_list pos:start="23:12" pos:end="23:61">(<argument pos:start="23:13" pos:end="23:44"><expr pos:start="23:13" pos:end="23:44"><literal type="string" pos:start="23:13" pos:end="23:44">"flushing %zu byte(s) of data\n"</literal></expr></argument>, <argument pos:start="23:47" pos:end="23:60"><expr pos:start="23:47" pos:end="23:60"><name pos:start="23:47" pos:end="23:60"><name pos:start="23:47" pos:end="23:47">s</name><operator pos:start="23:48" pos:end="23:49">-&gt;</operator><name pos:start="23:50" pos:end="23:60">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="27:5" pos:end="67:5">while <condition pos:start="27:11" pos:end="27:68">(<expr pos:start="27:12" pos:end="27:67"><name pos:start="27:12" pos:end="27:24"><name pos:start="27:12" pos:end="27:12">s</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:24">bytes_xfer</name></name> <operator pos:start="27:26" pos:end="27:26">&lt;</operator> <name pos:start="27:28" pos:end="27:40"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:40">xfer_limit</name></name> <operator pos:start="27:42" pos:end="27:43">&amp;&amp;</operator> <name pos:start="27:45" pos:end="27:50">offset</name> <operator pos:start="27:52" pos:end="27:52">&lt;</operator> <name pos:start="27:54" pos:end="27:67"><name pos:start="27:54" pos:end="27:54">s</name><operator pos:start="27:55" pos:end="27:56">-&gt;</operator><name pos:start="27:57" pos:end="27:67">buffer_size</name></name></expr>)</condition> <block pos:start="27:70" pos:end="67:5">{<block_content pos:start="29:9" pos:end="65:9">

        <decl_stmt pos:start="29:9" pos:end="29:20"><decl pos:start="29:9" pos:end="29:19"><type pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:15">ssize_t</name></type> <name pos:start="29:17" pos:end="29:19">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="35:61"><expr pos:start="33:9" pos:end="35:60"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="35:60"><name pos:start="33:15" pos:end="33:35">migrate_fd_put_buffer</name><argument_list pos:start="33:36" pos:end="35:60">(<argument pos:start="33:37" pos:end="33:54"><expr pos:start="33:37" pos:end="33:54"><name pos:start="33:37" pos:end="33:54"><name pos:start="33:37" pos:end="33:37">s</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:54">migration_state</name></name></expr></argument>, <argument pos:start="33:57" pos:end="33:74"><expr pos:start="33:57" pos:end="33:74"><name pos:start="33:57" pos:end="33:65"><name pos:start="33:57" pos:end="33:57">s</name><operator pos:start="33:58" pos:end="33:59">-&gt;</operator><name pos:start="33:60" pos:end="33:65">buffer</name></name> <operator pos:start="33:67" pos:end="33:67">+</operator> <name pos:start="33:69" pos:end="33:74">offset</name></expr></argument>,

                                    <argument pos:start="35:37" pos:end="35:59"><expr pos:start="35:37" pos:end="35:59"><name pos:start="35:37" pos:end="35:50"><name pos:start="35:37" pos:end="35:37">s</name><operator pos:start="35:38" pos:end="35:39">-&gt;</operator><name pos:start="35:40" pos:end="35:50">buffer_size</name></name> <operator pos:start="35:52" pos:end="35:52">-</operator> <name pos:start="35:54" pos:end="35:59">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:27">(<expr pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:18">==</operator> <operator pos:start="37:20" pos:end="37:20">-</operator><name pos:start="37:21" pos:end="37:26">EAGAIN</name></expr>)</condition> <block pos:start="37:29" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:18">

            <expr_stmt pos:start="39:13" pos:end="39:53"><expr pos:start="39:13" pos:end="39:52"><call pos:start="39:13" pos:end="39:52"><name pos:start="39:13" pos:end="39:19">DPRINTF</name><argument_list pos:start="39:20" pos:end="39:52">(<argument pos:start="39:21" pos:end="39:51"><expr pos:start="39:21" pos:end="39:51"><literal type="string" pos:start="39:21" pos:end="39:51">"backend not ready, freezing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:28"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:28">freeze_output</name></name> <operator pos:start="41:30" pos:end="41:30">=</operator> <literal type="number" pos:start="41:32" pos:end="41:32">1</literal></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="49:9" pos:end="65:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:21">(<expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:18">&lt;=</operator> <literal type="number" pos:start="49:20" pos:end="49:20">0</literal></expr>)</condition> <block pos:start="49:23" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:18">

            <expr_stmt pos:start="51:13" pos:end="51:55"><expr pos:start="51:13" pos:end="51:54"><call pos:start="51:13" pos:end="51:54"><name pos:start="51:13" pos:end="51:19">DPRINTF</name><argument_list pos:start="51:20" pos:end="51:54">(<argument pos:start="51:21" pos:end="51:48"><expr pos:start="51:21" pos:end="51:48"><literal type="string" pos:start="51:21" pos:end="51:48">"error flushing data, %zd\n"</literal></expr></argument>, <argument pos:start="51:51" pos:end="51:53"><expr pos:start="51:51" pos:end="51:53"><name pos:start="51:51" pos:end="51:53">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:46"><expr pos:start="53:13" pos:end="53:45"><call pos:start="53:13" pos:end="53:45"><name pos:start="53:13" pos:end="53:31">qemu_file_set_error</name><argument_list pos:start="53:32" pos:end="53:45">(<argument pos:start="53:33" pos:end="53:39"><expr pos:start="53:33" pos:end="53:39"><name pos:start="53:33" pos:end="53:39"><name pos:start="53:33" pos:end="53:33">s</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:39">file</name></name></expr></argument>, <argument pos:start="53:42" pos:end="53:44"><expr pos:start="53:42" pos:end="53:44"><name pos:start="53:42" pos:end="53:44">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="65:9">else <block pos:start="57:16" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:33">

            <expr_stmt pos:start="59:13" pos:end="59:50"><expr pos:start="59:13" pos:end="59:49"><call pos:start="59:13" pos:end="59:49"><name pos:start="59:13" pos:end="59:19">DPRINTF</name><argument_list pos:start="59:20" pos:end="59:49">(<argument pos:start="59:21" pos:end="59:43"><expr pos:start="59:21" pos:end="59:43"><literal type="string" pos:start="59:21" pos:end="59:43">"flushed %zd byte(s)\n"</literal></expr></argument>, <argument pos:start="59:46" pos:end="59:48"><expr pos:start="59:46" pos:end="59:48"><name pos:start="59:46" pos:end="59:48">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:26"><expr pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:18">offset</name> <operator pos:start="61:20" pos:end="61:21">+=</operator> <name pos:start="61:23" pos:end="61:25">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:33"><expr pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:25">bytes_xfer</name></name> <operator pos:start="63:27" pos:end="63:28">+=</operator> <name pos:start="63:30" pos:end="63:32">ret</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="71:5" pos:end="71:68"><expr pos:start="71:5" pos:end="71:67"><call pos:start="71:5" pos:end="71:67"><name pos:start="71:5" pos:end="71:11">DPRINTF</name><argument_list pos:start="71:12" pos:end="71:67">(<argument pos:start="71:13" pos:end="71:42"><expr pos:start="71:13" pos:end="71:42"><literal type="string" pos:start="71:13" pos:end="71:42">"flushed %zu of %zu byte(s)\n"</literal></expr></argument>, <argument pos:start="71:45" pos:end="71:50"><expr pos:start="71:45" pos:end="71:50"><name pos:start="71:45" pos:end="71:50">offset</name></expr></argument>, <argument pos:start="71:53" pos:end="71:66"><expr pos:start="71:53" pos:end="71:66"><name pos:start="71:53" pos:end="71:66"><name pos:start="71:53" pos:end="71:53">s</name><operator pos:start="71:54" pos:end="71:55">-&gt;</operator><name pos:start="71:56" pos:end="71:66">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:68"><expr pos:start="73:5" pos:end="73:67"><call pos:start="73:5" pos:end="73:67"><name pos:start="73:5" pos:end="73:11">memmove</name><argument_list pos:start="73:12" pos:end="73:67">(<argument pos:start="73:13" pos:end="73:21"><expr pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:21">buffer</name></name></expr></argument>, <argument pos:start="73:24" pos:end="73:41"><expr pos:start="73:24" pos:end="73:41"><name pos:start="73:24" pos:end="73:32"><name pos:start="73:24" pos:end="73:24">s</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:32">buffer</name></name> <operator pos:start="73:34" pos:end="73:34">+</operator> <name pos:start="73:36" pos:end="73:41">offset</name></expr></argument>, <argument pos:start="73:44" pos:end="73:66"><expr pos:start="73:44" pos:end="73:66"><name pos:start="73:44" pos:end="73:57"><name pos:start="73:44" pos:end="73:44">s</name><operator pos:start="73:45" pos:end="73:46">-&gt;</operator><name pos:start="73:47" pos:end="73:57">buffer_size</name></name> <operator pos:start="73:59" pos:end="73:59">-</operator> <name pos:start="73:61" pos:end="73:66">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:18">buffer_size</name></name> <operator pos:start="75:20" pos:end="75:21">-=</operator> <name pos:start="75:23" pos:end="75:28">offset</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
