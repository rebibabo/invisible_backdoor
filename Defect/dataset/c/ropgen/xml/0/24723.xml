<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24723.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:36">copy_sectors</name><parameter_list pos:start="1:37" pos:end="7:60">(<parameter pos:start="1:38" pos:end="1:57"><decl pos:start="1:38" pos:end="1:57"><type pos:start="1:38" pos:end="1:57"><name pos:start="1:38" pos:end="1:53">BlockDriverState</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">bs</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:56"><decl pos:start="3:38" pos:end="3:56"><type pos:start="3:38" pos:end="3:56"><name pos:start="3:38" pos:end="3:45">uint64_t</name></type> <name pos:start="3:47" pos:end="3:56">start_sect</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:60"><decl pos:start="5:38" pos:end="5:60"><type pos:start="5:38" pos:end="5:60"><name pos:start="5:38" pos:end="5:45">uint64_t</name></type> <name pos:start="5:47" pos:end="5:60">cluster_offset</name></decl></parameter>,

                                     <parameter pos:start="7:38" pos:end="7:48"><decl pos:start="7:38" pos:end="7:48"><type pos:start="7:38" pos:end="7:48"><name pos:start="7:38" pos:end="7:40">int</name></type> <name pos:start="7:42" pos:end="7:48">n_start</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:59"><decl pos:start="7:51" pos:end="7:59"><type pos:start="7:51" pos:end="7:59"><name pos:start="7:51" pos:end="7:53">int</name></type> <name pos:start="7:55" pos:end="7:59">n_end</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="133:1">{<block_content pos:start="11:5" pos:end="131:15">

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVQcowState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">QEMUIOVector</name></type> <name pos:start="13:18" pos:end="13:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:16">iovec</name></name></type> <name pos:start="15:18" pos:end="15:20">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">n</name></decl>, <decl pos:start="17:12" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="29:7">/*

     * If this is the last cluster and it is only partially used, we must only

     * copy until the end of the image, or bdrv_check_request will fail for the

     * bdrv_read/write calls below.

     */</comment>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:47">(<expr pos:start="31:9" pos:end="31:46"><name pos:start="31:9" pos:end="31:18">start_sect</name> <operator pos:start="31:20" pos:end="31:20">+</operator> <name pos:start="31:22" pos:end="31:26">n_end</name> <operator pos:start="31:28" pos:end="31:28">&gt;</operator> <name pos:start="31:30" pos:end="31:46"><name pos:start="31:30" pos:end="31:31">bs</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:46">total_sectors</name></name></expr>)</condition> <block pos:start="31:49" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:47">

        <expr_stmt pos:start="33:9" pos:end="33:47"><expr pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:13">n_end</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:33"><name pos:start="33:17" pos:end="33:18">bs</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:33">total_sectors</name></name> <operator pos:start="33:35" pos:end="33:35">-</operator> <name pos:start="33:37" pos:end="33:46">start_sect</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:5">n</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <name pos:start="39:9" pos:end="39:13">n_end</name> <operator pos:start="39:15" pos:end="39:15">-</operator> <name pos:start="39:17" pos:end="39:23">n_start</name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:15">(<expr pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:9">n</name> <operator pos:start="41:11" pos:end="41:12">&lt;=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>)</condition> <block pos:start="41:17" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:17">

        <return pos:start="43:9" pos:end="43:17">return <expr pos:start="43:16" pos:end="43:16"><literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:7">iov</name><operator pos:start="49:8" pos:end="49:8">.</operator><name pos:start="49:9" pos:end="49:15">iov_len</name></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:19">n</name> <operator pos:start="49:21" pos:end="49:21">*</operator> <name pos:start="49:23" pos:end="49:38">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:16"><name pos:start="51:5" pos:end="51:7">iov</name><operator pos:start="51:8" pos:end="51:8">.</operator><name pos:start="51:9" pos:end="51:16">iov_base</name></name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:51"><name pos:start="51:20" pos:end="51:34">qemu_blockalign</name><argument_list pos:start="51:35" pos:end="51:51">(<argument pos:start="51:36" pos:end="51:37"><expr pos:start="51:36" pos:end="51:37"><name pos:start="51:36" pos:end="51:37">bs</name></expr></argument>, <argument pos:start="51:40" pos:end="51:50"><expr pos:start="51:40" pos:end="51:50"><name pos:start="51:40" pos:end="51:50"><name pos:start="51:40" pos:end="51:42">iov</name><operator pos:start="51:43" pos:end="51:43">.</operator><name pos:start="51:44" pos:end="51:50">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:45"><expr pos:start="55:5" pos:end="55:44"><call pos:start="55:5" pos:end="55:44"><name pos:start="55:5" pos:end="55:28">qemu_iovec_init_external</name><argument_list pos:start="55:29" pos:end="55:44">(<argument pos:start="55:30" pos:end="55:34"><expr pos:start="55:30" pos:end="55:34"><operator pos:start="55:30" pos:end="55:30">&amp;</operator><name pos:start="55:31" pos:end="55:34">qiov</name></expr></argument>, <argument pos:start="55:37" pos:end="55:40"><expr pos:start="55:37" pos:end="55:40"><operator pos:start="55:37" pos:end="55:37">&amp;</operator><name pos:start="55:38" pos:end="55:40">iov</name></expr></argument>, <argument pos:start="55:43" pos:end="55:43"><expr pos:start="55:43" pos:end="55:43"><literal type="number" pos:start="55:43" pos:end="55:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:44"><expr pos:start="59:5" pos:end="59:43"><call pos:start="59:5" pos:end="59:43"><name pos:start="59:5" pos:end="59:16">BLKDBG_EVENT</name><argument_list pos:start="59:17" pos:end="59:43">(<argument pos:start="59:18" pos:end="59:25"><expr pos:start="59:18" pos:end="59:25"><name pos:start="59:18" pos:end="59:25"><name pos:start="59:18" pos:end="59:19">bs</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:25">file</name></name></expr></argument>, <argument pos:start="59:28" pos:end="59:42"><expr pos:start="59:28" pos:end="59:42"><name pos:start="59:28" pos:end="59:42">BLKDBG_COW_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:17">(<expr pos:start="63:9" pos:end="63:16"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:16"><name pos:start="63:10" pos:end="63:11">bs</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:16">drv</name></name></expr>)</condition> <block pos:start="63:19" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:26">

        <return pos:start="65:9" pos:end="65:26">return <expr pos:start="65:16" pos:end="65:25"><operator pos:start="65:16" pos:end="65:16">-</operator><name pos:start="65:17" pos:end="65:25">ENOMEDIUM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="77:7">/* Call .bdrv_co_readv() directly instead of using the public block-layer

     * interface.  This avoids double I/O throttling and request tracking,

     * which can lead to deadlock when block layer copy-on-read is enabled.

     */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:69"><expr pos:start="79:5" pos:end="79:68"><name pos:start="79:5" pos:end="79:7">ret</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:68"><name pos:start="79:11" pos:end="79:32"><name pos:start="79:11" pos:end="79:12">bs</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:17">drv</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:32">bdrv_co_readv</name></name><argument_list pos:start="79:33" pos:end="79:68">(<argument pos:start="79:34" pos:end="79:35"><expr pos:start="79:34" pos:end="79:35"><name pos:start="79:34" pos:end="79:35">bs</name></expr></argument>, <argument pos:start="79:38" pos:end="79:57"><expr pos:start="79:38" pos:end="79:57"><name pos:start="79:38" pos:end="79:47">start_sect</name> <operator pos:start="79:49" pos:end="79:49">+</operator> <name pos:start="79:51" pos:end="79:57">n_start</name></expr></argument>, <argument pos:start="79:60" pos:end="79:60"><expr pos:start="79:60" pos:end="79:60"><name pos:start="79:60" pos:end="79:60">n</name></expr></argument>, <argument pos:start="79:63" pos:end="79:67"><expr pos:start="79:63" pos:end="79:67"><operator pos:start="79:63" pos:end="79:63">&amp;</operator><name pos:start="79:64" pos:end="79:67">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:16">(<expr pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">&lt;</operator> <literal type="number" pos:start="81:15" pos:end="81:15">0</literal></expr>)</condition> <block pos:start="81:18" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:17">

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:24">(<expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:23">crypt_method</name></name></expr>)</condition> <block pos:start="89:26" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:45">

        <expr_stmt pos:start="91:9" pos:end="95:45"><expr pos:start="91:9" pos:end="95:44"><call pos:start="91:9" pos:end="95:44"><name pos:start="91:9" pos:end="91:29">qcow2_encrypt_sectors</name><argument_list pos:start="91:30" pos:end="95:44">(<argument pos:start="91:31" pos:end="91:31"><expr pos:start="91:31" pos:end="91:31"><name pos:start="91:31" pos:end="91:31">s</name></expr></argument>, <argument pos:start="91:34" pos:end="91:53"><expr pos:start="91:34" pos:end="91:53"><name pos:start="91:34" pos:end="91:43">start_sect</name> <operator pos:start="91:45" pos:end="91:45">+</operator> <name pos:start="91:47" pos:end="91:53">n_start</name></expr></argument>,

                        <argument pos:start="93:25" pos:end="93:36"><expr pos:start="93:25" pos:end="93:36"><name pos:start="93:25" pos:end="93:36"><name pos:start="93:25" pos:end="93:27">iov</name><operator pos:start="93:28" pos:end="93:28">.</operator><name pos:start="93:29" pos:end="93:36">iov_base</name></name></expr></argument>, <argument pos:start="93:39" pos:end="93:50"><expr pos:start="93:39" pos:end="93:50"><name pos:start="93:39" pos:end="93:50"><name pos:start="93:39" pos:end="93:41">iov</name><operator pos:start="93:42" pos:end="93:42">.</operator><name pos:start="93:43" pos:end="93:50">iov_base</name></name></expr></argument>, <argument pos:start="93:53" pos:end="93:53"><expr pos:start="93:53" pos:end="93:53"><name pos:start="93:53" pos:end="93:53">n</name></expr></argument>, <argument pos:start="93:56" pos:end="93:56"><expr pos:start="93:56" pos:end="93:56"><literal type="number" pos:start="93:56" pos:end="93:56">1</literal></expr></argument>,

                        <argument pos:start="95:25" pos:end="95:43"><expr pos:start="95:25" pos:end="95:43"><operator pos:start="95:25" pos:end="95:25">&amp;</operator><name pos:start="95:26" pos:end="95:43"><name pos:start="95:26" pos:end="95:26">s</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:43">aes_encrypt_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="103:79"><expr pos:start="101:5" pos:end="103:78"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="103:78"><name pos:start="101:11" pos:end="101:39">qcow2_pre_write_overlap_check</name><argument_list pos:start="101:40" pos:end="103:78">(<argument pos:start="101:41" pos:end="101:42"><expr pos:start="101:41" pos:end="101:42"><name pos:start="101:41" pos:end="101:42">bs</name></expr></argument>, <argument pos:start="101:45" pos:end="101:45"><expr pos:start="101:45" pos:end="101:45"><literal type="number" pos:start="101:45" pos:end="101:45">0</literal></expr></argument>,

            <argument pos:start="103:13" pos:end="103:55"><expr pos:start="103:13" pos:end="103:55"><name pos:start="103:13" pos:end="103:26">cluster_offset</name> <operator pos:start="103:28" pos:end="103:28">+</operator> <name pos:start="103:30" pos:end="103:36">n_start</name> <operator pos:start="103:38" pos:end="103:38">*</operator> <name pos:start="103:40" pos:end="103:55">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="103:58" pos:end="103:77"><expr pos:start="103:58" pos:end="103:77"><name pos:start="103:58" pos:end="103:58">n</name> <operator pos:start="103:60" pos:end="103:60">*</operator> <name pos:start="103:62" pos:end="103:77">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:16">(<expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">&lt;</operator> <literal type="number" pos:start="105:15" pos:end="105:15">0</literal></expr>)</condition> <block pos:start="105:18" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:17">

        <goto pos:start="107:9" pos:end="107:17">goto <name pos:start="107:14" pos:end="107:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:45"><expr pos:start="113:5" pos:end="113:44"><call pos:start="113:5" pos:end="113:44"><name pos:start="113:5" pos:end="113:16">BLKDBG_EVENT</name><argument_list pos:start="113:17" pos:end="113:44">(<argument pos:start="113:18" pos:end="113:25"><expr pos:start="113:18" pos:end="113:25"><name pos:start="113:18" pos:end="113:25"><name pos:start="113:18" pos:end="113:19">bs</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:25">file</name></name></expr></argument>, <argument pos:start="113:28" pos:end="113:43"><expr pos:start="113:28" pos:end="113:43"><name pos:start="113:28" pos:end="113:43">BLKDBG_COW_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:78"><expr pos:start="115:5" pos:end="115:77"><name pos:start="115:5" pos:end="115:7">ret</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <call pos:start="115:11" pos:end="115:77"><name pos:start="115:11" pos:end="115:24">bdrv_co_writev</name><argument_list pos:start="115:25" pos:end="115:77">(<argument pos:start="115:26" pos:end="115:33"><expr pos:start="115:26" pos:end="115:33"><name pos:start="115:26" pos:end="115:33"><name pos:start="115:26" pos:end="115:27">bs</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:33">file</name></name></expr></argument>, <argument pos:start="115:36" pos:end="115:66"><expr pos:start="115:36" pos:end="115:66"><operator pos:start="115:36" pos:end="115:36">(</operator><name pos:start="115:37" pos:end="115:50">cluster_offset</name> <operator pos:start="115:52" pos:end="115:53">&gt;&gt;</operator> <literal type="number" pos:start="115:55" pos:end="115:55">9</literal><operator pos:start="115:56" pos:end="115:56">)</operator> <operator pos:start="115:58" pos:end="115:58">+</operator> <name pos:start="115:60" pos:end="115:66">n_start</name></expr></argument>, <argument pos:start="115:69" pos:end="115:69"><expr pos:start="115:69" pos:end="115:69"><name pos:start="115:69" pos:end="115:69">n</name></expr></argument>, <argument pos:start="115:72" pos:end="115:76"><expr pos:start="115:72" pos:end="115:76"><operator pos:start="115:72" pos:end="115:72">&amp;</operator><name pos:start="115:73" pos:end="115:76">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:16">(<expr pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">&lt;</operator> <literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr>)</condition> <block pos:start="117:18" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:17">

        <goto pos:start="119:9" pos:end="119:17">goto <name pos:start="119:14" pos:end="119:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:12"><expr pos:start="125:5" pos:end="125:11"><name pos:start="125:5" pos:end="125:7">ret</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <literal type="number" pos:start="125:11" pos:end="125:11">0</literal></expr>;</expr_stmt>

<label pos:start="127:1" pos:end="127:4"><name pos:start="127:1" pos:end="127:3">out</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:29"><expr pos:start="129:5" pos:end="129:28"><call pos:start="129:5" pos:end="129:28"><name pos:start="129:5" pos:end="129:14">qemu_vfree</name><argument_list pos:start="129:15" pos:end="129:28">(<argument pos:start="129:16" pos:end="129:27"><expr pos:start="129:16" pos:end="129:27"><name pos:start="129:16" pos:end="129:27"><name pos:start="129:16" pos:end="129:18">iov</name><operator pos:start="129:19" pos:end="129:19">.</operator><name pos:start="129:20" pos:end="129:27">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="131:5" pos:end="131:15">return <expr pos:start="131:12" pos:end="131:14"><name pos:start="131:12" pos:end="131:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
