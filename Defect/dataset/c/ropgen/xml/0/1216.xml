<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1216.c" pos:tabs="8"><function pos:start="1:1" pos:end="657:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="9:60">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:31">ram_addr_t</name></type> <name pos:start="1:33" pos:end="1:40">ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>,

                     <parameter pos:start="9:22" pos:end="9:36"><decl pos:start="9:22" pos:end="9:36"><type pos:start="9:22" pos:end="9:36"><name pos:start="9:22" pos:end="9:24">int</name></type> <name pos:start="9:26" pos:end="9:36">pci_enabled</name></decl></parameter>, <parameter pos:start="9:39" pos:end="9:59"><decl pos:start="9:39" pos:end="9:59"><type pos:start="9:39" pos:end="9:59"><specifier pos:start="9:39" pos:end="9:43">const</specifier> <name pos:start="9:45" pos:end="9:48">char</name> <modifier pos:start="9:50" pos:end="9:50">*</modifier></type><name pos:start="9:51" pos:end="9:59">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="657:1">{<block_content pos:start="13:5" pos:end="655:5">

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:23">linux_boot</name></decl>, <decl pos:start="15:26" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:26" pos:end="15:26">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">ram_addr_t</name></type> <name pos:start="17:16" pos:end="17:23">ram_addr</name></decl>, <decl pos:start="17:26" pos:end="17:36"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:26" pos:end="17:36">bios_offset</name></decl>, <decl pos:start="17:39" pos:end="17:55"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:39" pos:end="17:55">option_rom_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:56"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:14">ram_addr_t</name></type> <name pos:start="19:16" pos:end="19:32">below_4g_mem_size</name></decl>, <decl pos:start="19:35" pos:end="19:55"><type ref="prev" pos:start="19:5" pos:end="19:14"/><name pos:start="19:35" pos:end="19:51">above_4g_mem_size</name> <init pos:start="19:53" pos:end="19:55">= <expr pos:start="19:55" pos:end="19:55"><literal type="number" pos:start="19:55" pos:end="19:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:50"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:17">bios_size</name></decl>, <decl pos:start="21:20" pos:end="21:32"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:20" pos:end="21:32">isa_bios_size</name></decl>, <decl pos:start="21:35" pos:end="21:49"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:35" pos:end="21:49">oprom_area_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:10">PCIBus</name> <modifier pos:start="23:12" pos:end="23:12">*</modifier></type><name pos:start="23:13" pos:end="23:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:19">piix3_devfn</name> <init pos:start="25:21" pos:end="25:24">= <expr pos:start="25:23" pos:end="25:24"><operator pos:start="25:23" pos:end="25:23">-</operator><literal type="number" pos:start="25:24" pos:end="25:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">CPUState</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:22"><decl pos:start="29:5" pos:end="29:21"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">qemu_irq</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:14"><decl pos:start="33:5" pos:end="33:13"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:53"><decl pos:start="35:5" pos:end="35:52"><type pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:20">BlockDriverState</name> <modifier pos:start="35:22" pos:end="35:22">*</modifier></type><name pos:start="35:23" pos:end="35:52"><name pos:start="35:23" pos:end="35:24">hd</name><index pos:start="35:25" pos:end="35:52">[<expr pos:start="35:26" pos:end="35:51"><name pos:start="35:26" pos:end="35:36">MAX_IDE_BUS</name> <operator pos:start="35:38" pos:end="35:38">*</operator> <name pos:start="35:40" pos:end="35:51">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:33"><decl pos:start="37:5" pos:end="37:32"><type pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:20">BlockDriverState</name> <modifier pos:start="37:22" pos:end="37:22">*</modifier></type><name pos:start="37:23" pos:end="37:32"><name pos:start="37:23" pos:end="37:24">fd</name><index pos:start="37:25" pos:end="37:32">[<expr pos:start="37:26" pos:end="37:31"><name pos:start="37:26" pos:end="37:31">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:76"><decl pos:start="39:5" pos:end="39:75"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:17">using_vga</name> <init pos:start="39:19" pos:end="39:75">= <expr pos:start="39:21" pos:end="39:75"><name pos:start="39:21" pos:end="39:38">cirrus_vga_enabled</name> <operator pos:start="39:40" pos:end="39:41">||</operator> <name pos:start="39:43" pos:end="39:57">std_vga_enabled</name> <operator pos:start="39:59" pos:end="39:60">||</operator> <name pos:start="39:62" pos:end="39:75">vmsvga_enabled</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:32">(<expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:16">ram_size</name> <operator pos:start="43:18" pos:end="43:19">&gt;=</operator> <literal type="number" pos:start="43:21" pos:end="43:30">0xe0000000</literal></expr> )</condition> <block pos:start="43:34" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:39">

        <expr_stmt pos:start="45:9" pos:end="45:50"><expr pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:25">above_4g_mem_size</name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:36">ram_size</name> <operator pos:start="45:38" pos:end="45:38">-</operator> <literal type="number" pos:start="45:40" pos:end="45:49">0xe0000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:25">below_4g_mem_size</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <literal type="number" pos:start="47:29" pos:end="47:38">0xe0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="53:5">else <block pos:start="49:12" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:37">

        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:25">below_4g_mem_size</name> <operator pos:start="51:27" pos:end="51:27">=</operator> <name pos:start="51:29" pos:end="51:36">ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:14">linux_boot</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:33">kernel_filename</name> <operator pos:start="57:35" pos:end="57:36">!=</operator> <name pos:start="57:38" pos:end="57:41">NULL</name><operator pos:start="57:42" pos:end="57:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:19">/* init CPUs */</comment>

    <if_stmt pos:start="63:5" pos:end="75:5"><if pos:start="63:5" pos:end="75:5">if <condition pos:start="63:8" pos:end="63:26">(<expr pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:17">cpu_model</name> <operator pos:start="63:19" pos:end="63:20">==</operator> <name pos:start="63:22" pos:end="63:25">NULL</name></expr>)</condition> <block pos:start="63:28" pos:end="75:5">{<block_content pos:start="67:9" pos:end="74:0">

<cpp:ifdef pos:start="65:1" pos:end="65:20">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:20">TARGET_X86_64</name></cpp:ifdef>

        <expr_stmt pos:start="67:9" pos:end="70:0"><expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:17">cpu_model</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="string" pos:start="67:21" pos:end="67:28">"qemu64"</literal></expr>;</expr_stmt>

<cpp:else pos:start="69:1" pos:end="69:5">#<cpp:directive pos:start="69:2" pos:end="69:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="71:9" pos:end="74:0"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:17">cpu_model</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <literal type="string" pos:start="71:21" pos:end="71:28">"qemu32"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    

    <for pos:start="79:5" pos:end="101:5">for<control pos:start="79:8" pos:end="79:33">(<init pos:start="79:9" pos:end="79:14"><expr pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:9">i</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <literal type="number" pos:start="79:13" pos:end="79:13">0</literal></expr>;</init> <condition pos:start="79:16" pos:end="79:28"><expr pos:start="79:16" pos:end="79:27"><name pos:start="79:16" pos:end="79:16">i</name> <operator pos:start="79:18" pos:end="79:18">&lt;</operator> <name pos:start="79:20" pos:end="79:27">smp_cpus</name></expr>;</condition> <incr pos:start="79:30" pos:end="79:32"><expr pos:start="79:30" pos:end="79:32"><name pos:start="79:30" pos:end="79:30">i</name><operator pos:start="79:31" pos:end="79:32">++</operator></expr></incr>)</control> <block pos:start="79:35" pos:end="101:5">{<block_content pos:start="81:9" pos:end="99:52">

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:11">env</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:33"><name pos:start="81:15" pos:end="81:22">cpu_init</name><argument_list pos:start="81:23" pos:end="81:33">(<argument pos:start="81:24" pos:end="81:32"><expr pos:start="81:24" pos:end="81:32"><name pos:start="81:24" pos:end="81:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:17">(<expr pos:start="83:13" pos:end="83:16"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:16">env</name></expr>)</condition> <block pos:start="83:19" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:20">

            <expr_stmt pos:start="85:13" pos:end="85:67"><expr pos:start="85:13" pos:end="85:66"><call pos:start="85:13" pos:end="85:66"><name pos:start="85:13" pos:end="85:19">fprintf</name><argument_list pos:start="85:20" pos:end="85:66">(<argument pos:start="85:21" pos:end="85:26"><expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">stderr</name></expr></argument>, <argument pos:start="85:29" pos:end="85:65"><expr pos:start="85:29" pos:end="85:65"><literal type="string" pos:start="85:29" pos:end="85:65">"Unable to find x86 CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><call pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:16">exit</name><argument_list pos:start="87:17" pos:end="87:19">(<argument pos:start="87:18" pos:end="87:18"><expr pos:start="87:18" pos:end="87:18"><literal type="number" pos:start="87:18" pos:end="87:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:63">(<expr pos:start="91:13" pos:end="91:62"><operator pos:start="91:13" pos:end="91:13">(</operator><name pos:start="91:14" pos:end="91:32"><name pos:start="91:14" pos:end="91:16">env</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:32">cpuid_features</name></name> <operator pos:start="91:34" pos:end="91:34">&amp;</operator> <name pos:start="91:36" pos:end="91:45">CPUID_APIC</name><operator pos:start="91:46" pos:end="91:46">)</operator> <operator pos:start="91:48" pos:end="91:49">||</operator> <name pos:start="91:51" pos:end="91:58">smp_cpus</name> <operator pos:start="91:60" pos:end="91:60">&gt;</operator> <literal type="number" pos:start="91:62" pos:end="91:62">1</literal></expr>)</condition> <block pos:start="91:65" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:27">

            <expr_stmt pos:start="93:13" pos:end="93:48"><expr pos:start="93:13" pos:end="93:47"><name pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:15">env</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:30">cpuid_apic_id</name></name> <operator pos:start="93:32" pos:end="93:32">=</operator> <name pos:start="93:34" pos:end="93:47"><name pos:start="93:34" pos:end="93:36">env</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:47">cpu_index</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:27"><expr pos:start="95:13" pos:end="95:26"><call pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:21">apic_init</name><argument_list pos:start="95:22" pos:end="95:26">(<argument pos:start="95:23" pos:end="95:25"><expr pos:start="95:23" pos:end="95:25"><name pos:start="95:23" pos:end="95:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:52"><expr pos:start="99:9" pos:end="99:51"><call pos:start="99:9" pos:end="99:51"><name pos:start="99:9" pos:end="99:27">qemu_register_reset</name><argument_list pos:start="99:28" pos:end="99:51">(<argument pos:start="99:29" pos:end="99:42"><expr pos:start="99:29" pos:end="99:42"><name pos:start="99:29" pos:end="99:42">main_cpu_reset</name></expr></argument>, <argument pos:start="99:45" pos:end="99:45"><expr pos:start="99:45" pos:end="99:45"><literal type="number" pos:start="99:45" pos:end="99:45">0</literal></expr></argument>, <argument pos:start="99:48" pos:end="99:50"><expr pos:start="99:48" pos:end="99:50"><name pos:start="99:48" pos:end="99:50">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="105:5" pos:end="105:18"><expr pos:start="105:5" pos:end="105:17"><call pos:start="105:5" pos:end="105:17"><name pos:start="105:5" pos:end="105:15">vmport_init</name><argument_list pos:start="105:16" pos:end="105:17">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:39"><expr pos:start="111:5" pos:end="111:38"><name pos:start="111:5" pos:end="111:12">ram_addr</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <call pos:start="111:16" pos:end="111:38"><name pos:start="111:16" pos:end="111:29">qemu_ram_alloc</name><argument_list pos:start="111:30" pos:end="111:38">(<argument pos:start="111:31" pos:end="111:37"><expr pos:start="111:31" pos:end="111:37"><literal type="number" pos:start="111:31" pos:end="111:37">0xa0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:55"><expr pos:start="113:5" pos:end="113:54"><call pos:start="113:5" pos:end="113:54"><name pos:start="113:5" pos:end="113:32">cpu_register_physical_memory</name><argument_list pos:start="113:33" pos:end="113:54">(<argument pos:start="113:34" pos:end="113:34"><expr pos:start="113:34" pos:end="113:34"><literal type="number" pos:start="113:34" pos:end="113:34">0</literal></expr></argument>, <argument pos:start="113:37" pos:end="113:43"><expr pos:start="113:37" pos:end="113:43"><literal type="number" pos:start="113:37" pos:end="113:43">0xa0000</literal></expr></argument>, <argument pos:start="113:46" pos:end="113:53"><expr pos:start="113:46" pos:end="113:53"><name pos:start="113:46" pos:end="113:53">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="117:5" pos:end="123:7">/* Allocate, even though we won't register, so we don't break the

     * phys_ram_base + PA assumption. This range includes vga (0xa0000 - 0xc0000),

     * and some bios areas, which will be registered later

     */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:50"><expr pos:start="125:5" pos:end="125:49"><name pos:start="125:5" pos:end="125:12">ram_addr</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <call pos:start="125:16" pos:end="125:49"><name pos:start="125:16" pos:end="125:29">qemu_ram_alloc</name><argument_list pos:start="125:30" pos:end="125:49">(<argument pos:start="125:31" pos:end="125:48"><expr pos:start="125:31" pos:end="125:48"><literal type="number" pos:start="125:31" pos:end="125:40">0x100000</literal> <operator pos:start="125:40" pos:end="125:40">-</operator> <literal type="number" pos:start="125:42" pos:end="125:48">0xa0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:60"><expr pos:start="127:5" pos:end="127:59"><name pos:start="127:5" pos:end="127:12">ram_addr</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <call pos:start="127:16" pos:end="127:59"><name pos:start="127:16" pos:end="127:29">qemu_ram_alloc</name><argument_list pos:start="127:30" pos:end="127:59">(<argument pos:start="127:31" pos:end="127:58"><expr pos:start="127:31" pos:end="127:58"><name pos:start="127:31" pos:end="127:47">below_4g_mem_size</name> <operator pos:start="127:49" pos:end="127:49">-</operator> <literal type="number" pos:start="127:51" pos:end="127:58">0x100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="133:27"><expr pos:start="129:5" pos:end="133:26"><call pos:start="129:5" pos:end="133:26"><name pos:start="129:5" pos:end="129:32">cpu_register_physical_memory</name><argument_list pos:start="129:33" pos:end="133:26">(<argument pos:start="129:34" pos:end="129:41"><expr pos:start="129:34" pos:end="129:41"><literal type="number" pos:start="129:34" pos:end="129:41">0x100000</literal></expr></argument>,

                 <argument pos:start="131:18" pos:end="131:45"><expr pos:start="131:18" pos:end="131:45"><name pos:start="131:18" pos:end="131:34">below_4g_mem_size</name> <operator pos:start="131:36" pos:end="131:36">-</operator> <literal type="number" pos:start="131:38" pos:end="131:45">0x100000</literal></expr></argument>,

                 <argument pos:start="133:18" pos:end="133:25"><expr pos:start="133:18" pos:end="133:25"><name pos:start="133:18" pos:end="133:25">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:39">/* above 4giga memory allocation */</comment>

    <if_stmt pos:start="139:5" pos:end="157:5"><if pos:start="139:5" pos:end="157:5">if <condition pos:start="139:8" pos:end="139:30">(<expr pos:start="139:9" pos:end="139:29"><name pos:start="139:9" pos:end="139:25">above_4g_mem_size</name> <operator pos:start="139:27" pos:end="139:27">&gt;</operator> <literal type="number" pos:start="139:29" pos:end="139:29">0</literal></expr>)</condition> <block pos:start="139:32" pos:end="157:5">{<block_content pos:start="143:9" pos:end="156:0">

<cpp:if pos:start="141:1" pos:end="141:31">#<cpp:directive pos:start="141:2" pos:end="141:3">if</cpp:directive> <expr pos:start="141:5" pos:end="141:31"><name pos:start="141:5" pos:end="141:25">TARGET_PHYS_ADDR_BITS</name> <operator pos:start="141:27" pos:end="141:28">==</operator> <literal type="number" pos:start="141:30" pos:end="141:31">32</literal></expr></cpp:if>

        <expr_stmt pos:start="143:9" pos:end="146:0"><expr pos:start="143:9" pos:end="143:59"><call pos:start="143:9" pos:end="143:59"><name pos:start="143:9" pos:end="143:16">hw_error</name><argument_list pos:start="143:17" pos:end="143:59">(<argument pos:start="143:18" pos:end="143:58"><expr pos:start="143:18" pos:end="143:58"><literal type="string" pos:start="143:18" pos:end="143:58">"To much RAM for 32-bit physical address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="145:1" pos:end="145:5">#<cpp:directive pos:start="145:2" pos:end="145:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="147:9" pos:end="147:53"><expr pos:start="147:9" pos:end="147:52"><name pos:start="147:9" pos:end="147:16">ram_addr</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <call pos:start="147:20" pos:end="147:52"><name pos:start="147:20" pos:end="147:33">qemu_ram_alloc</name><argument_list pos:start="147:34" pos:end="147:52">(<argument pos:start="147:35" pos:end="147:51"><expr pos:start="147:35" pos:end="147:51"><name pos:start="147:35" pos:end="147:51">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="156:0"><expr pos:start="149:9" pos:end="153:46"><call pos:start="149:9" pos:end="153:46"><name pos:start="149:9" pos:end="149:36">cpu_register_physical_memory</name><argument_list pos:start="149:37" pos:end="153:46">(<argument pos:start="149:38" pos:end="149:51"><expr pos:start="149:38" pos:end="149:51"><literal type="number" pos:start="149:38" pos:end="149:51">0x100000000ULL</literal></expr></argument>,

                                     <argument pos:start="151:38" pos:end="151:54"><expr pos:start="151:38" pos:end="151:54"><name pos:start="151:38" pos:end="151:54">above_4g_mem_size</name></expr></argument>,

                                     <argument pos:start="153:38" pos:end="153:45"><expr pos:start="153:38" pos:end="153:45"><name pos:start="153:38" pos:end="153:45">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="155:1" pos:end="155:6">#<cpp:directive pos:start="155:2" pos:end="155:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="163:5" pos:end="163:19">/* BIOS load */</comment>

    <if_stmt pos:start="165:5" pos:end="167:34"><if pos:start="165:5" pos:end="167:34">if <condition pos:start="165:8" pos:end="165:26">(<expr pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:17">bios_name</name> <operator pos:start="165:19" pos:end="165:20">==</operator> <name pos:start="165:22" pos:end="165:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="167:9" pos:end="167:34"><block_content pos:start="167:9" pos:end="167:34">

        <expr_stmt pos:start="167:9" pos:end="167:34"><expr pos:start="167:9" pos:end="167:33"><name pos:start="167:9" pos:end="167:17">bios_name</name> <operator pos:start="167:19" pos:end="167:19">=</operator> <name pos:start="167:21" pos:end="167:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:62"><expr pos:start="169:5" pos:end="169:61"><name pos:start="169:5" pos:end="169:12">filename</name> <operator pos:start="169:14" pos:end="169:14">=</operator> <call pos:start="169:16" pos:end="169:61"><name pos:start="169:16" pos:end="169:29">qemu_find_file</name><argument_list pos:start="169:30" pos:end="169:61">(<argument pos:start="169:31" pos:end="169:49"><expr pos:start="169:31" pos:end="169:49"><name pos:start="169:31" pos:end="169:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="169:52" pos:end="169:60"><expr pos:start="169:52" pos:end="169:60"><name pos:start="169:52" pos:end="169:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="179:5"><if pos:start="171:5" pos:end="175:5">if <condition pos:start="171:8" pos:end="171:17">(<expr pos:start="171:9" pos:end="171:16"><name pos:start="171:9" pos:end="171:16">filename</name></expr>)</condition> <block pos:start="171:19" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:45">

        <expr_stmt pos:start="173:9" pos:end="173:45"><expr pos:start="173:9" pos:end="173:44"><name pos:start="173:9" pos:end="173:17">bios_size</name> <operator pos:start="173:19" pos:end="173:19">=</operator> <call pos:start="173:21" pos:end="173:44"><name pos:start="173:21" pos:end="173:34">get_image_size</name><argument_list pos:start="173:35" pos:end="173:44">(<argument pos:start="173:36" pos:end="173:43"><expr pos:start="173:36" pos:end="173:43"><name pos:start="173:36" pos:end="173:43">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="175:7" pos:end="179:5">else <block pos:start="175:12" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:23">

        <expr_stmt pos:start="177:9" pos:end="177:23"><expr pos:start="177:9" pos:end="177:22"><name pos:start="177:9" pos:end="177:17">bios_size</name> <operator pos:start="177:19" pos:end="177:19">=</operator> <operator pos:start="177:21" pos:end="177:21">-</operator><literal type="number" pos:start="177:22" pos:end="177:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if <condition pos:start="181:8" pos:end="183:33">(<expr pos:start="181:9" pos:end="183:32"><name pos:start="181:9" pos:end="181:17">bios_size</name> <operator pos:start="181:19" pos:end="181:20">&lt;=</operator> <literal type="number" pos:start="181:22" pos:end="181:22">0</literal> <operator pos:start="181:24" pos:end="181:25">||</operator>

        <operator pos:start="183:9" pos:end="183:9">(</operator><name pos:start="183:10" pos:end="183:18">bios_size</name> <operator pos:start="183:20" pos:end="183:20">%</operator> <literal type="number" pos:start="183:22" pos:end="183:26">65536</literal><operator pos:start="183:27" pos:end="183:27">)</operator> <operator pos:start="183:29" pos:end="183:30">!=</operator> <literal type="number" pos:start="183:32" pos:end="183:32">0</literal></expr>)</condition> <block pos:start="183:35" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:24">

        <goto pos:start="185:9" pos:end="185:24">goto <name pos:start="185:14" pos:end="185:23">bios_error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:44"><expr pos:start="189:5" pos:end="189:43"><name pos:start="189:5" pos:end="189:15">bios_offset</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:43"><name pos:start="189:19" pos:end="189:32">qemu_ram_alloc</name><argument_list pos:start="189:33" pos:end="189:43">(<argument pos:start="189:34" pos:end="189:42"><expr pos:start="189:34" pos:end="189:42"><name pos:start="189:34" pos:end="189:42">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:62"><expr pos:start="191:5" pos:end="191:61"><name pos:start="191:5" pos:end="191:7">ret</name> <operator pos:start="191:9" pos:end="191:9">=</operator> <call pos:start="191:11" pos:end="191:61"><name pos:start="191:11" pos:end="191:20">load_image</name><argument_list pos:start="191:21" pos:end="191:61">(<argument pos:start="191:22" pos:end="191:29"><expr pos:start="191:22" pos:end="191:29"><name pos:start="191:22" pos:end="191:29">filename</name></expr></argument>, <argument pos:start="191:32" pos:end="191:60"><expr pos:start="191:32" pos:end="191:60"><call pos:start="191:32" pos:end="191:60"><name pos:start="191:32" pos:end="191:47">qemu_get_ram_ptr</name><argument_list pos:start="191:48" pos:end="191:60">(<argument pos:start="191:49" pos:end="191:59"><expr pos:start="191:49" pos:end="191:59"><name pos:start="191:49" pos:end="191:59">bios_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="201:5"><if pos:start="193:5" pos:end="201:5">if <condition pos:start="193:8" pos:end="193:25">(<expr pos:start="193:9" pos:end="193:24"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:14">!=</operator> <name pos:start="193:16" pos:end="193:24">bios_size</name></expr>)</condition> <block pos:start="193:27" pos:end="201:5">{<block_content pos:start="195:5" pos:end="199:16">

    <label pos:start="195:5" pos:end="195:15"><name pos:start="195:5" pos:end="195:14">bios_error</name>:</label>

        <expr_stmt pos:start="197:9" pos:end="197:74"><expr pos:start="197:9" pos:end="197:73"><call pos:start="197:9" pos:end="197:73"><name pos:start="197:9" pos:end="197:15">fprintf</name><argument_list pos:start="197:16" pos:end="197:73">(<argument pos:start="197:17" pos:end="197:22"><expr pos:start="197:17" pos:end="197:22"><name pos:start="197:17" pos:end="197:22">stderr</name></expr></argument>, <argument pos:start="197:25" pos:end="197:61"><expr pos:start="197:25" pos:end="197:61"><literal type="string" pos:start="197:25" pos:end="197:61">"qemu: could not load PC BIOS '%s'\n"</literal></expr></argument>, <argument pos:start="197:64" pos:end="197:72"><expr pos:start="197:64" pos:end="197:72"><name pos:start="197:64" pos:end="197:72">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:16"><expr pos:start="199:9" pos:end="199:15"><call pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:12">exit</name><argument_list pos:start="199:13" pos:end="199:15">(<argument pos:start="199:14" pos:end="199:14"><expr pos:start="199:14" pos:end="199:14"><literal type="number" pos:start="199:14" pos:end="199:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="203:5" pos:end="207:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:17">(<expr pos:start="203:9" pos:end="203:16"><name pos:start="203:9" pos:end="203:16">filename</name></expr>)</condition> <block pos:start="203:19" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:28">

        <expr_stmt pos:start="205:9" pos:end="205:28"><expr pos:start="205:9" pos:end="205:27"><call pos:start="205:9" pos:end="205:27"><name pos:start="205:9" pos:end="205:17">qemu_free</name><argument_list pos:start="205:18" pos:end="205:27">(<argument pos:start="205:19" pos:end="205:26"><expr pos:start="205:19" pos:end="205:26"><name pos:start="205:19" pos:end="205:26">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="209:5" pos:end="209:53">/* map the last 128KB of the BIOS in ISA space */</comment>

    <expr_stmt pos:start="211:5" pos:end="211:30"><expr pos:start="211:5" pos:end="211:29"><name pos:start="211:5" pos:end="211:17">isa_bios_size</name> <operator pos:start="211:19" pos:end="211:19">=</operator> <name pos:start="211:21" pos:end="211:29">bios_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="213:5" pos:end="215:35"><if pos:start="213:5" pos:end="215:35">if <condition pos:start="213:8" pos:end="213:37">(<expr pos:start="213:9" pos:end="213:36"><name pos:start="213:9" pos:end="213:21">isa_bios_size</name> <operator pos:start="213:23" pos:end="213:23">&gt;</operator> <operator pos:start="213:25" pos:end="213:25">(</operator><literal type="number" pos:start="213:26" pos:end="213:28">128</literal> <operator pos:start="213:30" pos:end="213:30">*</operator> <literal type="number" pos:start="213:32" pos:end="213:35">1024</literal><operator pos:start="213:36" pos:end="213:36">)</operator></expr>)</condition><block type="pseudo" pos:start="215:9" pos:end="215:35"><block_content pos:start="215:9" pos:end="215:35">

        <expr_stmt pos:start="215:9" pos:end="215:35"><expr pos:start="215:9" pos:end="215:34"><name pos:start="215:9" pos:end="215:21">isa_bios_size</name> <operator pos:start="215:23" pos:end="215:23">=</operator> <literal type="number" pos:start="215:25" pos:end="215:27">128</literal> <operator pos:start="215:29" pos:end="215:29">*</operator> <literal type="number" pos:start="215:31" pos:end="215:34">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="217:5" pos:end="221:89"><expr pos:start="217:5" pos:end="221:88"><call pos:start="217:5" pos:end="221:88"><name pos:start="217:5" pos:end="217:32">cpu_register_physical_memory</name><argument_list pos:start="217:33" pos:end="221:88">(<argument pos:start="217:34" pos:end="217:57"><expr pos:start="217:34" pos:end="217:57"><literal type="number" pos:start="217:34" pos:end="217:43">0x100000</literal> <operator pos:start="217:43" pos:end="217:43">-</operator> <name pos:start="217:45" pos:end="217:57">isa_bios_size</name></expr></argument>,

                                 <argument pos:start="219:34" pos:end="219:46"><expr pos:start="219:34" pos:end="219:46"><name pos:start="219:34" pos:end="219:46">isa_bios_size</name></expr></argument>,

                                 <argument pos:start="221:34" pos:end="221:87"><expr pos:start="221:34" pos:end="221:87"><operator pos:start="221:34" pos:end="221:34">(</operator><name pos:start="221:35" pos:end="221:45">bios_offset</name> <operator pos:start="221:47" pos:end="221:47">+</operator> <name pos:start="221:49" pos:end="221:57">bios_size</name> <operator pos:start="221:59" pos:end="221:59">-</operator> <name pos:start="221:61" pos:end="221:73">isa_bios_size</name><operator pos:start="221:74" pos:end="221:74">)</operator> <operator pos:start="221:76" pos:end="221:76">|</operator> <name pos:start="221:78" pos:end="221:87">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







    <expr_stmt pos:start="229:5" pos:end="229:48"><expr pos:start="229:5" pos:end="229:47"><name pos:start="229:5" pos:end="229:21">option_rom_offset</name> <operator pos:start="229:23" pos:end="229:23">=</operator> <call pos:start="229:25" pos:end="229:47"><name pos:start="229:25" pos:end="229:38">qemu_ram_alloc</name><argument_list pos:start="229:39" pos:end="229:47">(<argument pos:start="229:40" pos:end="229:46"><expr pos:start="229:40" pos:end="229:46"><literal type="number" pos:start="229:40" pos:end="229:46">0x20000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:24"><expr pos:start="231:5" pos:end="231:23"><name pos:start="231:5" pos:end="231:19">oprom_area_size</name> <operator pos:start="231:21" pos:end="231:21">=</operator> <literal type="number" pos:start="231:23" pos:end="231:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:70"><expr pos:start="233:5" pos:end="233:69"><call pos:start="233:5" pos:end="233:69"><name pos:start="233:5" pos:end="233:32">cpu_register_physical_memory</name><argument_list pos:start="233:33" pos:end="233:69">(<argument pos:start="233:34" pos:end="233:40"><expr pos:start="233:34" pos:end="233:40"><literal type="number" pos:start="233:34" pos:end="233:40">0xc0000</literal></expr></argument>, <argument pos:start="233:43" pos:end="233:49"><expr pos:start="233:43" pos:end="233:49"><literal type="number" pos:start="233:43" pos:end="233:49">0x20000</literal></expr></argument>, <argument pos:start="233:52" pos:end="233:68"><expr pos:start="233:52" pos:end="233:68"><name pos:start="233:52" pos:end="233:68">option_rom_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="237:5" pos:end="255:5"><if pos:start="237:5" pos:end="255:5">if <condition pos:start="237:8" pos:end="237:18">(<expr pos:start="237:9" pos:end="237:17"><name pos:start="237:9" pos:end="237:17">using_vga</name></expr>)</condition> <block pos:start="237:20" pos:end="255:5">{<block_content pos:start="239:9" pos:end="253:78">

        <decl_stmt pos:start="239:9" pos:end="239:37"><decl pos:start="239:9" pos:end="239:36"><type pos:start="239:9" pos:end="239:20"><specifier pos:start="239:9" pos:end="239:13">const</specifier> <name pos:start="239:15" pos:end="239:18">char</name> <modifier pos:start="239:20" pos:end="239:20">*</modifier></type><name pos:start="239:21" pos:end="239:36">vgabios_filename</name></decl>;</decl_stmt>

        <comment type="block" pos:start="241:9" pos:end="241:27">/* VGA BIOS load */</comment>

        <if_stmt pos:start="243:9" pos:end="251:9"><if pos:start="243:9" pos:end="247:9">if <condition pos:start="243:12" pos:end="243:31">(<expr pos:start="243:13" pos:end="243:30"><name pos:start="243:13" pos:end="243:30">cirrus_vga_enabled</name></expr>)</condition> <block pos:start="243:33" pos:end="247:9">{<block_content pos:start="245:13" pos:end="245:55">

            <expr_stmt pos:start="245:13" pos:end="245:55"><expr pos:start="245:13" pos:end="245:54"><name pos:start="245:13" pos:end="245:28">vgabios_filename</name> <operator pos:start="245:30" pos:end="245:30">=</operator> <name pos:start="245:32" pos:end="245:54">VGABIOS_CIRRUS_FILENAME</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="247:11" pos:end="251:9">else <block pos:start="247:16" pos:end="251:9">{<block_content pos:start="249:13" pos:end="249:48">

            <expr_stmt pos:start="249:13" pos:end="249:48"><expr pos:start="249:13" pos:end="249:47"><name pos:start="249:13" pos:end="249:28">vgabios_filename</name> <operator pos:start="249:30" pos:end="249:30">=</operator> <name pos:start="249:32" pos:end="249:47">VGABIOS_FILENAME</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:78"><expr pos:start="253:9" pos:end="253:77"><name pos:start="253:9" pos:end="253:23">oprom_area_size</name> <operator pos:start="253:25" pos:end="253:25">=</operator> <call pos:start="253:27" pos:end="253:77"><name pos:start="253:27" pos:end="253:41">load_option_rom</name><argument_list pos:start="253:42" pos:end="253:77">(<argument pos:start="253:43" pos:end="253:58"><expr pos:start="253:43" pos:end="253:58"><name pos:start="253:43" pos:end="253:58">vgabios_filename</name></expr></argument>, <argument pos:start="253:61" pos:end="253:67"><expr pos:start="253:61" pos:end="253:67"><literal type="number" pos:start="253:61" pos:end="253:67">0xc0000</literal></expr></argument>, <argument pos:start="253:70" pos:end="253:76"><expr pos:start="253:70" pos:end="253:76"><literal type="number" pos:start="253:70" pos:end="253:76">0xe0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="257:5" pos:end="261:59">/* Although video roms can grow larger than 0x8000, the area between

     * 0xc0000 - 0xc8000 is reserved for them. It means we won't be looking

     * for any other kind of option rom inside this area */</comment>

    <if_stmt pos:start="263:5" pos:end="265:33"><if pos:start="263:5" pos:end="265:33">if <condition pos:start="263:8" pos:end="263:33">(<expr pos:start="263:9" pos:end="263:32"><name pos:start="263:9" pos:end="263:23">oprom_area_size</name> <operator pos:start="263:25" pos:end="263:25">&lt;</operator> <literal type="number" pos:start="263:27" pos:end="263:32">0x8000</literal></expr>)</condition><block type="pseudo" pos:start="265:9" pos:end="265:33"><block_content pos:start="265:9" pos:end="265:33">

        <expr_stmt pos:start="265:9" pos:end="265:33"><expr pos:start="265:9" pos:end="265:32"><name pos:start="265:9" pos:end="265:23">oprom_area_size</name> <operator pos:start="265:25" pos:end="265:25">=</operator> <literal type="number" pos:start="265:27" pos:end="265:32">0x8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="269:5" pos:end="277:5"><if pos:start="269:5" pos:end="277:5">if <condition pos:start="269:8" pos:end="269:19">(<expr pos:start="269:9" pos:end="269:18"><name pos:start="269:9" pos:end="269:18">linux_boot</name></expr>)</condition> <block pos:start="269:21" pos:end="277:5">{<block_content pos:start="271:9" pos:end="275:32">

        <expr_stmt pos:start="271:9" pos:end="273:88"><expr pos:start="271:9" pos:end="273:87"><call pos:start="271:9" pos:end="273:87"><name pos:start="271:9" pos:end="271:18">load_linux</name><argument_list pos:start="271:19" pos:end="273:87">(<argument pos:start="271:20" pos:end="271:44"><expr pos:start="271:20" pos:end="271:44"><literal type="number" pos:start="271:20" pos:end="271:28">0xc0000</literal> <operator pos:start="271:28" pos:end="271:28">+</operator> <name pos:start="271:30" pos:end="271:44">oprom_area_size</name></expr></argument>,

                   <argument pos:start="273:20" pos:end="273:34"><expr pos:start="273:20" pos:end="273:34"><name pos:start="273:20" pos:end="273:34">kernel_filename</name></expr></argument>, <argument pos:start="273:37" pos:end="273:51"><expr pos:start="273:37" pos:end="273:51"><name pos:start="273:37" pos:end="273:51">initrd_filename</name></expr></argument>, <argument pos:start="273:54" pos:end="273:67"><expr pos:start="273:54" pos:end="273:67"><name pos:start="273:54" pos:end="273:67">kernel_cmdline</name></expr></argument>, <argument pos:start="273:70" pos:end="273:86"><expr pos:start="273:70" pos:end="273:86"><name pos:start="273:70" pos:end="273:86">below_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:32"><expr pos:start="275:9" pos:end="275:31"><name pos:start="275:9" pos:end="275:23">oprom_area_size</name> <operator pos:start="275:25" pos:end="275:26">+=</operator> <literal type="number" pos:start="275:28" pos:end="275:31">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="281:5" pos:end="287:5">for <control pos:start="281:9" pos:end="281:40">(<init pos:start="281:10" pos:end="281:15"><expr pos:start="281:10" pos:end="281:14"><name pos:start="281:10" pos:end="281:10">i</name> <operator pos:start="281:12" pos:end="281:12">=</operator> <literal type="number" pos:start="281:14" pos:end="281:14">0</literal></expr>;</init> <condition pos:start="281:17" pos:end="281:35"><expr pos:start="281:17" pos:end="281:34"><name pos:start="281:17" pos:end="281:17">i</name> <operator pos:start="281:19" pos:end="281:19">&lt;</operator> <name pos:start="281:21" pos:end="281:34">nb_option_roms</name></expr>;</condition> <incr pos:start="281:37" pos:end="281:39"><expr pos:start="281:37" pos:end="281:39"><name pos:start="281:37" pos:end="281:37">i</name><operator pos:start="281:38" pos:end="281:39">++</operator></expr></incr>)</control> <block pos:start="281:42" pos:end="287:5">{<block_content pos:start="283:9" pos:end="285:79">

        <expr_stmt pos:start="283:9" pos:end="285:79"><expr pos:start="283:9" pos:end="285:78"><name pos:start="283:9" pos:end="283:23">oprom_area_size</name> <operator pos:start="283:25" pos:end="283:26">+=</operator> <call pos:start="283:28" pos:end="285:78"><name pos:start="283:28" pos:end="283:42">load_option_rom</name><argument_list pos:start="283:43" pos:end="285:78">(<argument pos:start="283:44" pos:end="283:56"><expr pos:start="283:44" pos:end="283:56"><name pos:start="283:44" pos:end="283:56"><name pos:start="283:44" pos:end="283:53">option_rom</name><index pos:start="283:54" pos:end="283:56">[<expr pos:start="283:55" pos:end="283:55"><name pos:start="283:55" pos:end="283:55">i</name></expr>]</index></name></expr></argument>,

                                           <argument pos:start="285:44" pos:end="285:68"><expr pos:start="285:44" pos:end="285:68"><literal type="number" pos:start="285:44" pos:end="285:52">0xc0000</literal> <operator pos:start="285:52" pos:end="285:52">+</operator> <name pos:start="285:54" pos:end="285:68">oprom_area_size</name></expr></argument>, <argument pos:start="285:71" pos:end="285:77"><expr pos:start="285:71" pos:end="285:77"><literal type="number" pos:start="285:71" pos:end="285:77">0xe0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="291:5" pos:end="291:47">/* map all the bios at the top of memory */</comment>

    <expr_stmt pos:start="293:5" pos:end="295:70"><expr pos:start="293:5" pos:end="295:69"><call pos:start="293:5" pos:end="295:69"><name pos:start="293:5" pos:end="293:32">cpu_register_physical_memory</name><argument_list pos:start="293:33" pos:end="295:69">(<argument pos:start="293:34" pos:end="293:55"><expr pos:start="293:34" pos:end="293:55"><operator pos:start="293:34" pos:end="293:34">(</operator><name pos:start="293:35" pos:end="293:42">uint32_t</name><operator pos:start="293:43" pos:end="293:43">)</operator><operator pos:start="293:44" pos:end="293:44">(</operator><operator pos:start="293:45" pos:end="293:45">-</operator><name pos:start="293:46" pos:end="293:54">bios_size</name><operator pos:start="293:55" pos:end="293:55">)</operator></expr></argument>,

                                 <argument pos:start="295:34" pos:end="295:42"><expr pos:start="295:34" pos:end="295:42"><name pos:start="295:34" pos:end="295:42">bios_size</name></expr></argument>, <argument pos:start="295:45" pos:end="295:68"><expr pos:start="295:45" pos:end="295:68"><name pos:start="295:45" pos:end="295:55">bios_offset</name> <operator pos:start="295:57" pos:end="295:57">|</operator> <name pos:start="295:59" pos:end="295:68">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="299:5" pos:end="299:22"><expr pos:start="299:5" pos:end="299:21"><call pos:start="299:5" pos:end="299:21"><name pos:start="299:5" pos:end="299:19">bochs_bios_init</name><argument_list pos:start="299:20" pos:end="299:21">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="303:5" pos:end="303:59"><expr pos:start="303:5" pos:end="303:58"><name pos:start="303:5" pos:end="303:11">cpu_irq</name> <operator pos:start="303:13" pos:end="303:13">=</operator> <call pos:start="303:15" pos:end="303:58"><name pos:start="303:15" pos:end="303:32">qemu_allocate_irqs</name><argument_list pos:start="303:33" pos:end="303:58">(<argument pos:start="303:34" pos:end="303:48"><expr pos:start="303:34" pos:end="303:48"><name pos:start="303:34" pos:end="303:48">pic_irq_request</name></expr></argument>, <argument pos:start="303:51" pos:end="303:54"><expr pos:start="303:51" pos:end="303:54"><name pos:start="303:51" pos:end="303:54">NULL</name></expr></argument>, <argument pos:start="303:57" pos:end="303:57"><expr pos:start="303:57" pos:end="303:57"><literal type="number" pos:start="303:57" pos:end="303:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="305:35"><expr pos:start="305:5" pos:end="305:34"><name pos:start="305:5" pos:end="305:9">i8259</name> <operator pos:start="305:11" pos:end="305:11">=</operator> <call pos:start="305:13" pos:end="305:34"><name pos:start="305:13" pos:end="305:22">i8259_init</name><argument_list pos:start="305:23" pos:end="305:34">(<argument pos:start="305:24" pos:end="305:33"><expr pos:start="305:24" pos:end="305:33"><name pos:start="305:24" pos:end="305:33"><name pos:start="305:24" pos:end="305:30">cpu_irq</name><index pos:start="305:31" pos:end="305:33">[<expr pos:start="305:32" pos:end="305:32"><literal type="number" pos:start="305:32" pos:end="305:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:25"><expr pos:start="307:5" pos:end="307:24"><name pos:start="307:5" pos:end="307:12">ferr_irq</name> <operator pos:start="307:14" pos:end="307:14">=</operator> <name pos:start="307:16" pos:end="307:24"><name pos:start="307:16" pos:end="307:20">i8259</name><index pos:start="307:21" pos:end="307:24">[<expr pos:start="307:22" pos:end="307:23"><literal type="number" pos:start="307:22" pos:end="307:23">13</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="311:5" pos:end="321:5"><if pos:start="311:5" pos:end="317:5">if <condition pos:start="311:8" pos:end="311:20">(<expr pos:start="311:9" pos:end="311:19"><name pos:start="311:9" pos:end="311:19">pci_enabled</name></expr>)</condition> <block pos:start="311:22" pos:end="317:5">{<block_content pos:start="313:9" pos:end="315:46">

        <expr_stmt pos:start="313:9" pos:end="313:52"><expr pos:start="313:9" pos:end="313:51"><name pos:start="313:9" pos:end="313:15">pci_bus</name> <operator pos:start="313:17" pos:end="313:17">=</operator> <call pos:start="313:19" pos:end="313:51"><name pos:start="313:19" pos:end="313:29">i440fx_init</name><argument_list pos:start="313:30" pos:end="313:51">(<argument pos:start="313:31" pos:end="313:43"><expr pos:start="313:31" pos:end="313:43"><operator pos:start="313:31" pos:end="313:31">&amp;</operator><name pos:start="313:32" pos:end="313:43">i440fx_state</name></expr></argument>, <argument pos:start="313:46" pos:end="313:50"><expr pos:start="313:46" pos:end="313:50"><name pos:start="313:46" pos:end="313:50">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:46"><expr pos:start="315:9" pos:end="315:45"><name pos:start="315:9" pos:end="315:19">piix3_devfn</name> <operator pos:start="315:21" pos:end="315:21">=</operator> <call pos:start="315:23" pos:end="315:45"><name pos:start="315:23" pos:end="315:32">piix3_init</name><argument_list pos:start="315:33" pos:end="315:45">(<argument pos:start="315:34" pos:end="315:40"><expr pos:start="315:34" pos:end="315:40"><name pos:start="315:34" pos:end="315:40">pci_bus</name></expr></argument>, <argument pos:start="315:43" pos:end="315:44"><expr pos:start="315:43" pos:end="315:44"><operator pos:start="315:43" pos:end="315:43">-</operator><literal type="number" pos:start="315:44" pos:end="315:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="317:7" pos:end="321:5">else <block pos:start="317:12" pos:end="321:5">{<block_content pos:start="319:9" pos:end="319:23">

        <expr_stmt pos:start="319:9" pos:end="319:23"><expr pos:start="319:9" pos:end="319:22"><name pos:start="319:9" pos:end="319:15">pci_bus</name> <operator pos:start="319:17" pos:end="319:17">=</operator> <name pos:start="319:19" pos:end="319:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="325:5" pos:end="325:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="327:5" pos:end="327:60"><expr pos:start="327:5" pos:end="327:59"><call pos:start="327:5" pos:end="327:59"><name pos:start="327:5" pos:end="327:25">register_ioport_write</name><argument_list pos:start="327:26" pos:end="327:59">(<argument pos:start="327:27" pos:end="327:30"><expr pos:start="327:27" pos:end="327:30"><literal type="number" pos:start="327:27" pos:end="327:30">0x80</literal></expr></argument>, <argument pos:start="327:33" pos:end="327:33"><expr pos:start="327:33" pos:end="327:33"><literal type="number" pos:start="327:33" pos:end="327:33">1</literal></expr></argument>, <argument pos:start="327:36" pos:end="327:36"><expr pos:start="327:36" pos:end="327:36"><literal type="number" pos:start="327:36" pos:end="327:36">1</literal></expr></argument>, <argument pos:start="327:39" pos:end="327:52"><expr pos:start="327:39" pos:end="327:52"><name pos:start="327:39" pos:end="327:52">ioport80_write</name></expr></argument>, <argument pos:start="327:55" pos:end="327:58"><expr pos:start="327:55" pos:end="327:58"><name pos:start="327:55" pos:end="327:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="331:5" pos:end="331:60"><expr pos:start="331:5" pos:end="331:59"><call pos:start="331:5" pos:end="331:59"><name pos:start="331:5" pos:end="331:25">register_ioport_write</name><argument_list pos:start="331:26" pos:end="331:59">(<argument pos:start="331:27" pos:end="331:30"><expr pos:start="331:27" pos:end="331:30"><literal type="number" pos:start="331:27" pos:end="331:30">0xf0</literal></expr></argument>, <argument pos:start="331:33" pos:end="331:33"><expr pos:start="331:33" pos:end="331:33"><literal type="number" pos:start="331:33" pos:end="331:33">1</literal></expr></argument>, <argument pos:start="331:36" pos:end="331:36"><expr pos:start="331:36" pos:end="331:36"><literal type="number" pos:start="331:36" pos:end="331:36">1</literal></expr></argument>, <argument pos:start="331:39" pos:end="331:52"><expr pos:start="331:39" pos:end="331:52"><name pos:start="331:39" pos:end="331:52">ioportF0_write</name></expr></argument>, <argument pos:start="331:55" pos:end="331:58"><expr pos:start="331:55" pos:end="331:58"><name pos:start="331:55" pos:end="331:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="335:5" pos:end="369:5"><if pos:start="335:5" pos:end="347:5">if <condition pos:start="335:8" pos:end="335:27">(<expr pos:start="335:9" pos:end="335:26"><name pos:start="335:9" pos:end="335:26">cirrus_vga_enabled</name></expr>)</condition> <block pos:start="335:29" pos:end="347:5">{<block_content pos:start="337:9" pos:end="345:9">

        <if_stmt pos:start="337:9" pos:end="345:9"><if pos:start="337:9" pos:end="341:9">if <condition pos:start="337:12" pos:end="337:24">(<expr pos:start="337:13" pos:end="337:23"><name pos:start="337:13" pos:end="337:23">pci_enabled</name></expr>)</condition> <block pos:start="337:26" pos:end="341:9">{<block_content pos:start="339:13" pos:end="339:41">

            <expr_stmt pos:start="339:13" pos:end="339:41"><expr pos:start="339:13" pos:end="339:40"><call pos:start="339:13" pos:end="339:40"><name pos:start="339:13" pos:end="339:31">pci_cirrus_vga_init</name><argument_list pos:start="339:32" pos:end="339:40">(<argument pos:start="339:33" pos:end="339:39"><expr pos:start="339:33" pos:end="339:39"><name pos:start="339:33" pos:end="339:39">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="341:11" pos:end="345:9">else <block pos:start="341:16" pos:end="345:9">{<block_content pos:start="343:13" pos:end="343:34">

            <expr_stmt pos:start="343:13" pos:end="343:34"><expr pos:start="343:13" pos:end="343:33"><call pos:start="343:13" pos:end="343:33"><name pos:start="343:13" pos:end="343:31">isa_cirrus_vga_init</name><argument_list pos:start="343:32" pos:end="343:33">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="347:7" pos:end="357:5">else if <condition pos:start="347:15" pos:end="347:30">(<expr pos:start="347:16" pos:end="347:29"><name pos:start="347:16" pos:end="347:29">vmsvga_enabled</name></expr>)</condition> <block pos:start="347:32" pos:end="357:5">{<block_content pos:start="349:9" pos:end="355:74">

        <if_stmt pos:start="349:9" pos:end="355:74"><if pos:start="349:9" pos:end="351:37">if <condition pos:start="349:12" pos:end="349:24">(<expr pos:start="349:13" pos:end="349:23"><name pos:start="349:13" pos:end="349:23">pci_enabled</name></expr>)</condition><block type="pseudo" pos:start="351:13" pos:end="351:37"><block_content pos:start="351:13" pos:end="351:37">

            <expr_stmt pos:start="351:13" pos:end="351:37"><expr pos:start="351:13" pos:end="351:36"><call pos:start="351:13" pos:end="351:36"><name pos:start="351:13" pos:end="351:27">pci_vmsvga_init</name><argument_list pos:start="351:28" pos:end="351:36">(<argument pos:start="351:29" pos:end="351:35"><expr pos:start="351:29" pos:end="351:35"><name pos:start="351:29" pos:end="351:35">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="353:9" pos:end="355:74">else<block type="pseudo" pos:start="355:13" pos:end="355:74"><block_content pos:start="355:13" pos:end="355:74">

            <expr_stmt pos:start="355:13" pos:end="355:74"><expr pos:start="355:13" pos:end="355:73"><call pos:start="355:13" pos:end="355:73"><name pos:start="355:13" pos:end="355:19">fprintf</name><argument_list pos:start="355:20" pos:end="355:73">(<argument pos:start="355:21" pos:end="355:26"><expr pos:start="355:21" pos:end="355:26"><name pos:start="355:21" pos:end="355:26">stderr</name></expr></argument>, <argument pos:start="355:29" pos:end="355:58"><expr pos:start="355:29" pos:end="355:58"><literal type="string" pos:start="355:29" pos:end="355:58">"%s: vmware_vga: no PCI bus\n"</literal></expr></argument>, <argument pos:start="355:61" pos:end="355:72"><expr pos:start="355:61" pos:end="355:72"><name pos:start="355:61" pos:end="355:72">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="357:7" pos:end="369:5">else if <condition pos:start="357:15" pos:end="357:31">(<expr pos:start="357:16" pos:end="357:30"><name pos:start="357:16" pos:end="357:30">std_vga_enabled</name></expr>)</condition> <block pos:start="357:33" pos:end="369:5">{<block_content pos:start="359:9" pos:end="367:9">

        <if_stmt pos:start="359:9" pos:end="367:9"><if pos:start="359:9" pos:end="363:9">if <condition pos:start="359:12" pos:end="359:24">(<expr pos:start="359:13" pos:end="359:23"><name pos:start="359:13" pos:end="359:23">pci_enabled</name></expr>)</condition> <block pos:start="359:26" pos:end="363:9">{<block_content pos:start="361:13" pos:end="361:40">

            <expr_stmt pos:start="361:13" pos:end="361:40"><expr pos:start="361:13" pos:end="361:39"><call pos:start="361:13" pos:end="361:39"><name pos:start="361:13" pos:end="361:24">pci_vga_init</name><argument_list pos:start="361:25" pos:end="361:39">(<argument pos:start="361:26" pos:end="361:32"><expr pos:start="361:26" pos:end="361:32"><name pos:start="361:26" pos:end="361:32">pci_bus</name></expr></argument>, <argument pos:start="361:35" pos:end="361:35"><expr pos:start="361:35" pos:end="361:35"><literal type="number" pos:start="361:35" pos:end="361:35">0</literal></expr></argument>, <argument pos:start="361:38" pos:end="361:38"><expr pos:start="361:38" pos:end="361:38"><literal type="number" pos:start="361:38" pos:end="361:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="363:11" pos:end="367:9">else <block pos:start="363:16" pos:end="367:9">{<block_content pos:start="365:13" pos:end="365:27">

            <expr_stmt pos:start="365:13" pos:end="365:27"><expr pos:start="365:13" pos:end="365:26"><call pos:start="365:13" pos:end="365:26"><name pos:start="365:13" pos:end="365:24">isa_vga_init</name><argument_list pos:start="365:25" pos:end="365:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="373:5" pos:end="373:47"><expr pos:start="373:5" pos:end="373:46"><name pos:start="373:5" pos:end="373:13">rtc_state</name> <operator pos:start="373:15" pos:end="373:15">=</operator> <call pos:start="373:17" pos:end="373:46"><name pos:start="373:17" pos:end="373:24">rtc_init</name><argument_list pos:start="373:25" pos:end="373:46">(<argument pos:start="373:26" pos:end="373:29"><expr pos:start="373:26" pos:end="373:29"><literal type="number" pos:start="373:26" pos:end="373:29">0x70</literal></expr></argument>, <argument pos:start="373:32" pos:end="373:39"><expr pos:start="373:32" pos:end="373:39"><name pos:start="373:32" pos:end="373:39"><name pos:start="373:32" pos:end="373:36">i8259</name><index pos:start="373:37" pos:end="373:39">[<expr pos:start="373:38" pos:end="373:38"><literal type="number" pos:start="373:38" pos:end="373:38">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="373:42" pos:end="373:45"><expr pos:start="373:42" pos:end="373:45"><literal type="number" pos:start="373:42" pos:end="373:45">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="377:5" pos:end="377:51"><expr pos:start="377:5" pos:end="377:50"><call pos:start="377:5" pos:end="377:50"><name pos:start="377:5" pos:end="377:26">qemu_register_boot_set</name><argument_list pos:start="377:27" pos:end="377:50">(<argument pos:start="377:28" pos:end="377:38"><expr pos:start="377:28" pos:end="377:38"><name pos:start="377:28" pos:end="377:38">pc_boot_set</name></expr></argument>, <argument pos:start="377:41" pos:end="377:49"><expr pos:start="377:41" pos:end="377:49"><name pos:start="377:41" pos:end="377:49">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="381:5" pos:end="381:58"><expr pos:start="381:5" pos:end="381:57"><call pos:start="381:5" pos:end="381:57"><name pos:start="381:5" pos:end="381:24">register_ioport_read</name><argument_list pos:start="381:25" pos:end="381:57">(<argument pos:start="381:26" pos:end="381:29"><expr pos:start="381:26" pos:end="381:29"><literal type="number" pos:start="381:26" pos:end="381:29">0x92</literal></expr></argument>, <argument pos:start="381:32" pos:end="381:32"><expr pos:start="381:32" pos:end="381:32"><literal type="number" pos:start="381:32" pos:end="381:32">1</literal></expr></argument>, <argument pos:start="381:35" pos:end="381:35"><expr pos:start="381:35" pos:end="381:35"><literal type="number" pos:start="381:35" pos:end="381:35">1</literal></expr></argument>, <argument pos:start="381:38" pos:end="381:50"><expr pos:start="381:38" pos:end="381:50"><name pos:start="381:38" pos:end="381:50">ioport92_read</name></expr></argument>, <argument pos:start="381:53" pos:end="381:56"><expr pos:start="381:53" pos:end="381:56"><name pos:start="381:53" pos:end="381:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="383:60"><expr pos:start="383:5" pos:end="383:59"><call pos:start="383:5" pos:end="383:59"><name pos:start="383:5" pos:end="383:25">register_ioport_write</name><argument_list pos:start="383:26" pos:end="383:59">(<argument pos:start="383:27" pos:end="383:30"><expr pos:start="383:27" pos:end="383:30"><literal type="number" pos:start="383:27" pos:end="383:30">0x92</literal></expr></argument>, <argument pos:start="383:33" pos:end="383:33"><expr pos:start="383:33" pos:end="383:33"><literal type="number" pos:start="383:33" pos:end="383:33">1</literal></expr></argument>, <argument pos:start="383:36" pos:end="383:36"><expr pos:start="383:36" pos:end="383:36"><literal type="number" pos:start="383:36" pos:end="383:36">1</literal></expr></argument>, <argument pos:start="383:39" pos:end="383:52"><expr pos:start="383:39" pos:end="383:52"><name pos:start="383:39" pos:end="383:52">ioport92_write</name></expr></argument>, <argument pos:start="383:55" pos:end="383:58"><expr pos:start="383:55" pos:end="383:58"><name pos:start="383:55" pos:end="383:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="387:5" pos:end="391:5"><if pos:start="387:5" pos:end="391:5">if <condition pos:start="387:8" pos:end="387:20">(<expr pos:start="387:9" pos:end="387:19"><name pos:start="387:9" pos:end="387:19">pci_enabled</name></expr>)</condition> <block pos:start="387:22" pos:end="391:5">{<block_content pos:start="389:9" pos:end="389:31">

        <expr_stmt pos:start="389:9" pos:end="389:31"><expr pos:start="389:9" pos:end="389:30"><name pos:start="389:9" pos:end="389:14">ioapic</name> <operator pos:start="389:16" pos:end="389:16">=</operator> <call pos:start="389:18" pos:end="389:30"><name pos:start="389:18" pos:end="389:28">ioapic_init</name><argument_list pos:start="389:29" pos:end="389:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:35"><expr pos:start="393:5" pos:end="393:34"><name pos:start="393:5" pos:end="393:7">pit</name> <operator pos:start="393:9" pos:end="393:9">=</operator> <call pos:start="393:11" pos:end="393:34"><name pos:start="393:11" pos:end="393:18">pit_init</name><argument_list pos:start="393:19" pos:end="393:34">(<argument pos:start="393:20" pos:end="393:23"><expr pos:start="393:20" pos:end="393:23"><literal type="number" pos:start="393:20" pos:end="393:23">0x40</literal></expr></argument>, <argument pos:start="393:26" pos:end="393:33"><expr pos:start="393:26" pos:end="393:33"><name pos:start="393:26" pos:end="393:33"><name pos:start="393:26" pos:end="393:30">i8259</name><index pos:start="393:31" pos:end="393:33">[<expr pos:start="393:32" pos:end="393:32"><literal type="number" pos:start="393:32" pos:end="393:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:20"><expr pos:start="395:5" pos:end="395:19"><call pos:start="395:5" pos:end="395:19"><name pos:start="395:5" pos:end="395:14">pcspk_init</name><argument_list pos:start="395:15" pos:end="395:19">(<argument pos:start="395:16" pos:end="395:18"><expr pos:start="395:16" pos:end="395:18"><name pos:start="395:16" pos:end="395:18">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="397:5" pos:end="401:5"><if pos:start="397:5" pos:end="401:5">if <condition pos:start="397:8" pos:end="397:17">(<expr pos:start="397:9" pos:end="397:16"><operator pos:start="397:9" pos:end="397:9">!</operator><name pos:start="397:10" pos:end="397:16">no_hpet</name></expr>)</condition> <block pos:start="397:19" pos:end="401:5">{<block_content pos:start="399:9" pos:end="399:25">

        <expr_stmt pos:start="399:9" pos:end="399:25"><expr pos:start="399:9" pos:end="399:24"><call pos:start="399:9" pos:end="399:24"><name pos:start="399:9" pos:end="399:17">hpet_init</name><argument_list pos:start="399:18" pos:end="399:24">(<argument pos:start="399:19" pos:end="399:23"><expr pos:start="399:19" pos:end="399:23"><name pos:start="399:19" pos:end="399:23">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="403:5" pos:end="407:5"><if pos:start="403:5" pos:end="407:5">if <condition pos:start="403:8" pos:end="403:20">(<expr pos:start="403:9" pos:end="403:19"><name pos:start="403:9" pos:end="403:19">pci_enabled</name></expr>)</condition> <block pos:start="403:22" pos:end="407:5">{<block_content pos:start="405:9" pos:end="405:62">

        <expr_stmt pos:start="405:9" pos:end="405:62"><expr pos:start="405:9" pos:end="405:61"><call pos:start="405:9" pos:end="405:61"><name pos:start="405:9" pos:end="405:28">pic_set_alt_irq_func</name><argument_list pos:start="405:29" pos:end="405:61">(<argument pos:start="405:30" pos:end="405:36"><expr pos:start="405:30" pos:end="405:36"><name pos:start="405:30" pos:end="405:36">isa_pic</name></expr></argument>, <argument pos:start="405:39" pos:end="405:52"><expr pos:start="405:39" pos:end="405:52"><name pos:start="405:39" pos:end="405:52">ioapic_set_irq</name></expr></argument>, <argument pos:start="405:55" pos:end="405:60"><expr pos:start="405:55" pos:end="405:60"><name pos:start="405:55" pos:end="405:60">ioapic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="411:5" pos:end="421:5">for<control pos:start="411:8" pos:end="411:41">(<init pos:start="411:9" pos:end="411:14"><expr pos:start="411:9" pos:end="411:13"><name pos:start="411:9" pos:end="411:9">i</name> <operator pos:start="411:11" pos:end="411:11">=</operator> <literal type="number" pos:start="411:13" pos:end="411:13">0</literal></expr>;</init> <condition pos:start="411:16" pos:end="411:36"><expr pos:start="411:16" pos:end="411:35"><name pos:start="411:16" pos:end="411:16">i</name> <operator pos:start="411:18" pos:end="411:18">&lt;</operator> <name pos:start="411:20" pos:end="411:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="411:38" pos:end="411:40"><expr pos:start="411:38" pos:end="411:40"><name pos:start="411:38" pos:end="411:38">i</name><operator pos:start="411:39" pos:end="411:40">++</operator></expr></incr>)</control> <block pos:start="411:43" pos:end="421:5">{<block_content pos:start="413:9" pos:end="419:9">

        <if_stmt pos:start="413:9" pos:end="419:9"><if pos:start="413:9" pos:end="419:9">if <condition pos:start="413:12" pos:end="413:26">(<expr pos:start="413:13" pos:end="413:25"><name pos:start="413:13" pos:end="413:25"><name pos:start="413:13" pos:end="413:22">serial_hds</name><index pos:start="413:23" pos:end="413:25">[<expr pos:start="413:24" pos:end="413:24"><name pos:start="413:24" pos:end="413:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="413:28" pos:end="419:9">{<block_content pos:start="415:13" pos:end="417:39">

            <expr_stmt pos:start="415:13" pos:end="417:39"><expr pos:start="415:13" pos:end="417:38"><call pos:start="415:13" pos:end="417:38"><name pos:start="415:13" pos:end="415:23">serial_init</name><argument_list pos:start="415:24" pos:end="417:38">(<argument pos:start="415:25" pos:end="415:36"><expr pos:start="415:25" pos:end="415:36"><name pos:start="415:25" pos:end="415:36"><name pos:start="415:25" pos:end="415:33">serial_io</name><index pos:start="415:34" pos:end="415:36">[<expr pos:start="415:35" pos:end="415:35"><name pos:start="415:35" pos:end="415:35">i</name></expr>]</index></name></expr></argument>, <argument pos:start="415:39" pos:end="415:58"><expr pos:start="415:39" pos:end="415:58"><name pos:start="415:39" pos:end="415:58"><name pos:start="415:39" pos:end="415:43">i8259</name><index pos:start="415:44" pos:end="415:58">[<expr pos:start="415:45" pos:end="415:57"><name pos:start="415:45" pos:end="415:57"><name pos:start="415:45" pos:end="415:54">serial_irq</name><index pos:start="415:55" pos:end="415:57">[<expr pos:start="415:56" pos:end="415:56"><name pos:start="415:56" pos:end="415:56">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="415:61" pos:end="415:66"><expr pos:start="415:61" pos:end="415:66"><literal type="number" pos:start="415:61" pos:end="415:66">115200</literal></expr></argument>,

                        <argument pos:start="417:25" pos:end="417:37"><expr pos:start="417:25" pos:end="417:37"><name pos:start="417:25" pos:end="417:37"><name pos:start="417:25" pos:end="417:34">serial_hds</name><index pos:start="417:35" pos:end="417:37">[<expr pos:start="417:36" pos:end="417:36"><name pos:start="417:36" pos:end="417:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="425:5" pos:end="435:5">for<control pos:start="425:8" pos:end="425:43">(<init pos:start="425:9" pos:end="425:14"><expr pos:start="425:9" pos:end="425:13"><name pos:start="425:9" pos:end="425:9">i</name> <operator pos:start="425:11" pos:end="425:11">=</operator> <literal type="number" pos:start="425:13" pos:end="425:13">0</literal></expr>;</init> <condition pos:start="425:16" pos:end="425:38"><expr pos:start="425:16" pos:end="425:37"><name pos:start="425:16" pos:end="425:16">i</name> <operator pos:start="425:18" pos:end="425:18">&lt;</operator> <name pos:start="425:20" pos:end="425:37">MAX_PARALLEL_PORTS</name></expr>;</condition> <incr pos:start="425:40" pos:end="425:42"><expr pos:start="425:40" pos:end="425:42"><name pos:start="425:40" pos:end="425:40">i</name><operator pos:start="425:41" pos:end="425:42">++</operator></expr></incr>)</control> <block pos:start="425:45" pos:end="435:5">{<block_content pos:start="427:9" pos:end="433:9">

        <if_stmt pos:start="427:9" pos:end="433:9"><if pos:start="427:9" pos:end="433:9">if <condition pos:start="427:12" pos:end="427:28">(<expr pos:start="427:13" pos:end="427:27"><name pos:start="427:13" pos:end="427:27"><name pos:start="427:13" pos:end="427:24">parallel_hds</name><index pos:start="427:25" pos:end="427:27">[<expr pos:start="427:26" pos:end="427:26"><name pos:start="427:26" pos:end="427:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="427:30" pos:end="433:9">{<block_content pos:start="429:13" pos:end="431:43">

            <expr_stmt pos:start="429:13" pos:end="431:43"><expr pos:start="429:13" pos:end="431:42"><call pos:start="429:13" pos:end="431:42"><name pos:start="429:13" pos:end="429:25">parallel_init</name><argument_list pos:start="429:26" pos:end="431:42">(<argument pos:start="429:27" pos:end="429:40"><expr pos:start="429:27" pos:end="429:40"><name pos:start="429:27" pos:end="429:40"><name pos:start="429:27" pos:end="429:37">parallel_io</name><index pos:start="429:38" pos:end="429:40">[<expr pos:start="429:39" pos:end="429:39"><name pos:start="429:39" pos:end="429:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="429:43" pos:end="429:64"><expr pos:start="429:43" pos:end="429:64"><name pos:start="429:43" pos:end="429:64"><name pos:start="429:43" pos:end="429:47">i8259</name><index pos:start="429:48" pos:end="429:64">[<expr pos:start="429:49" pos:end="429:63"><name pos:start="429:49" pos:end="429:63"><name pos:start="429:49" pos:end="429:60">parallel_irq</name><index pos:start="429:61" pos:end="429:63">[<expr pos:start="429:62" pos:end="429:62"><name pos:start="429:62" pos:end="429:62">i</name></expr>]</index></name></expr>]</index></name></expr></argument>,

                          <argument pos:start="431:27" pos:end="431:41"><expr pos:start="431:27" pos:end="431:41"><name pos:start="431:27" pos:end="431:41"><name pos:start="431:27" pos:end="431:38">parallel_hds</name><index pos:start="431:39" pos:end="431:41">[<expr pos:start="431:40" pos:end="431:40"><name pos:start="431:40" pos:end="431:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="439:5" pos:end="439:30"><expr pos:start="439:5" pos:end="439:29"><call pos:start="439:5" pos:end="439:29"><name pos:start="439:5" pos:end="439:20">watchdog_pc_init</name><argument_list pos:start="439:21" pos:end="439:29">(<argument pos:start="439:22" pos:end="439:28"><expr pos:start="439:22" pos:end="439:28"><name pos:start="439:22" pos:end="439:28">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="443:5" pos:end="457:5">for<control pos:start="443:8" pos:end="443:32">(<init pos:start="443:9" pos:end="443:14"><expr pos:start="443:9" pos:end="443:13"><name pos:start="443:9" pos:end="443:9">i</name> <operator pos:start="443:11" pos:end="443:11">=</operator> <literal type="number" pos:start="443:13" pos:end="443:13">0</literal></expr>;</init> <condition pos:start="443:16" pos:end="443:27"><expr pos:start="443:16" pos:end="443:26"><name pos:start="443:16" pos:end="443:16">i</name> <operator pos:start="443:18" pos:end="443:18">&lt;</operator> <name pos:start="443:20" pos:end="443:26">nb_nics</name></expr>;</condition> <incr pos:start="443:29" pos:end="443:31"><expr pos:start="443:29" pos:end="443:31"><name pos:start="443:29" pos:end="443:29">i</name><operator pos:start="443:30" pos:end="443:31">++</operator></expr></incr>)</control> <block pos:start="443:34" pos:end="457:5">{<block_content pos:start="445:9" pos:end="455:54">

        <decl_stmt pos:start="445:9" pos:end="445:35"><decl pos:start="445:9" pos:end="445:34"><type pos:start="445:9" pos:end="445:17"><name pos:start="445:9" pos:end="445:15">NICInfo</name> <modifier pos:start="445:17" pos:end="445:17">*</modifier></type><name pos:start="445:18" pos:end="445:19">nd</name> <init pos:start="445:21" pos:end="445:34">= <expr pos:start="445:23" pos:end="445:34"><operator pos:start="445:23" pos:end="445:23">&amp;</operator><name pos:start="445:24" pos:end="445:34"><name pos:start="445:24" pos:end="445:31">nd_table</name><index pos:start="445:32" pos:end="445:34">[<expr pos:start="445:33" pos:end="445:33"><name pos:start="445:33" pos:end="445:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="449:9" pos:end="455:54"><if pos:start="449:9" pos:end="451:40">if <condition pos:start="449:12" pos:end="449:78">(<expr pos:start="449:13" pos:end="449:77"><operator pos:start="449:13" pos:end="449:13">!</operator><name pos:start="449:14" pos:end="449:24">pci_enabled</name> <operator pos:start="449:26" pos:end="449:27">||</operator> <operator pos:start="449:29" pos:end="449:29">(</operator><name pos:start="449:30" pos:end="449:38"><name pos:start="449:30" pos:end="449:31">nd</name><operator pos:start="449:32" pos:end="449:33">-&gt;</operator><name pos:start="449:34" pos:end="449:38">model</name></name> <operator pos:start="449:40" pos:end="449:41">&amp;&amp;</operator> <call pos:start="449:43" pos:end="449:71"><name pos:start="449:43" pos:end="449:48">strcmp</name><argument_list pos:start="449:49" pos:end="449:71">(<argument pos:start="449:50" pos:end="449:58"><expr pos:start="449:50" pos:end="449:58"><name pos:start="449:50" pos:end="449:58"><name pos:start="449:50" pos:end="449:51">nd</name><operator pos:start="449:52" pos:end="449:53">-&gt;</operator><name pos:start="449:54" pos:end="449:58">model</name></name></expr></argument>, <argument pos:start="449:61" pos:end="449:70"><expr pos:start="449:61" pos:end="449:70"><literal type="string" pos:start="449:61" pos:end="449:70">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="449:73" pos:end="449:74">==</operator> <literal type="number" pos:start="449:76" pos:end="449:76">0</literal><operator pos:start="449:77" pos:end="449:77">)</operator></expr>)</condition><block type="pseudo" pos:start="451:13" pos:end="451:40"><block_content pos:start="451:13" pos:end="451:40">

            <expr_stmt pos:start="451:13" pos:end="451:40"><expr pos:start="451:13" pos:end="451:39"><call pos:start="451:13" pos:end="451:39"><name pos:start="451:13" pos:end="451:28">pc_init_ne2k_isa</name><argument_list pos:start="451:29" pos:end="451:39">(<argument pos:start="451:30" pos:end="451:31"><expr pos:start="451:30" pos:end="451:31"><name pos:start="451:30" pos:end="451:31">nd</name></expr></argument>, <argument pos:start="451:34" pos:end="451:38"><expr pos:start="451:34" pos:end="451:38"><name pos:start="451:34" pos:end="451:38">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="453:9" pos:end="455:54">else<block type="pseudo" pos:start="455:13" pos:end="455:54"><block_content pos:start="455:13" pos:end="455:54">

            <expr_stmt pos:start="455:13" pos:end="455:54"><expr pos:start="455:13" pos:end="455:53"><call pos:start="455:13" pos:end="455:53"><name pos:start="455:13" pos:end="455:24">pci_nic_init</name><argument_list pos:start="455:25" pos:end="455:53">(<argument pos:start="455:26" pos:end="455:32"><expr pos:start="455:26" pos:end="455:32"><name pos:start="455:26" pos:end="455:32">pci_bus</name></expr></argument>, <argument pos:start="455:35" pos:end="455:36"><expr pos:start="455:35" pos:end="455:36"><name pos:start="455:35" pos:end="455:36">nd</name></expr></argument>, <argument pos:start="455:39" pos:end="455:40"><expr pos:start="455:39" pos:end="455:40"><operator pos:start="455:39" pos:end="455:39">-</operator><literal type="number" pos:start="455:40" pos:end="455:40">1</literal></expr></argument>, <argument pos:start="455:43" pos:end="455:52"><expr pos:start="455:43" pos:end="455:52"><literal type="string" pos:start="455:43" pos:end="455:52">"ne2k_pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="461:5" pos:end="461:31"><expr pos:start="461:5" pos:end="461:30"><call pos:start="461:5" pos:end="461:30"><name pos:start="461:5" pos:end="461:28">qemu_system_hot_add_init</name><argument_list pos:start="461:29" pos:end="461:30">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="465:5" pos:end="471:5"><if pos:start="465:5" pos:end="471:5">if <condition pos:start="465:8" pos:end="465:49">(<expr pos:start="465:9" pos:end="465:48"><call pos:start="465:9" pos:end="465:33"><name pos:start="465:9" pos:end="465:25">drive_get_max_bus</name><argument_list pos:start="465:26" pos:end="465:33">(<argument pos:start="465:27" pos:end="465:32"><expr pos:start="465:27" pos:end="465:32"><name pos:start="465:27" pos:end="465:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="465:35" pos:end="465:36">&gt;=</operator> <name pos:start="465:38" pos:end="465:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="465:51" pos:end="471:5">{<block_content pos:start="467:9" pos:end="469:16">

        <expr_stmt pos:start="467:9" pos:end="467:52"><expr pos:start="467:9" pos:end="467:51"><call pos:start="467:9" pos:end="467:51"><name pos:start="467:9" pos:end="467:15">fprintf</name><argument_list pos:start="467:16" pos:end="467:51">(<argument pos:start="467:17" pos:end="467:22"><expr pos:start="467:17" pos:end="467:22"><name pos:start="467:17" pos:end="467:22">stderr</name></expr></argument>, <argument pos:start="467:25" pos:end="467:50"><expr pos:start="467:25" pos:end="467:50"><literal type="string" pos:start="467:25" pos:end="467:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="469:9" pos:end="469:16"><expr pos:start="469:9" pos:end="469:15"><call pos:start="469:9" pos:end="469:15"><name pos:start="469:9" pos:end="469:12">exit</name><argument_list pos:start="469:13" pos:end="469:15">(<argument pos:start="469:14" pos:end="469:14"><expr pos:start="469:14" pos:end="469:14"><literal type="number" pos:start="469:14" pos:end="469:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="475:5" pos:end="487:5">for<control pos:start="475:8" pos:end="475:51">(<init pos:start="475:9" pos:end="475:14"><expr pos:start="475:9" pos:end="475:13"><name pos:start="475:9" pos:end="475:9">i</name> <operator pos:start="475:11" pos:end="475:11">=</operator> <literal type="number" pos:start="475:13" pos:end="475:13">0</literal></expr>;</init> <condition pos:start="475:16" pos:end="475:46"><expr pos:start="475:16" pos:end="475:45"><name pos:start="475:16" pos:end="475:16">i</name> <operator pos:start="475:18" pos:end="475:18">&lt;</operator> <name pos:start="475:20" pos:end="475:30">MAX_IDE_BUS</name> <operator pos:start="475:32" pos:end="475:32">*</operator> <name pos:start="475:34" pos:end="475:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="475:48" pos:end="475:50"><expr pos:start="475:48" pos:end="475:50"><name pos:start="475:48" pos:end="475:48">i</name><operator pos:start="475:49" pos:end="475:50">++</operator></expr></incr>)</control> <block pos:start="475:53" pos:end="487:5">{<block_content pos:start="477:9" pos:end="485:25">

        <expr_stmt pos:start="477:9" pos:end="477:76"><expr pos:start="477:9" pos:end="477:75"><name pos:start="477:9" pos:end="477:13">index</name> <operator pos:start="477:15" pos:end="477:15">=</operator> <call pos:start="477:17" pos:end="477:75"><name pos:start="477:17" pos:end="477:31">drive_get_index</name><argument_list pos:start="477:32" pos:end="477:75">(<argument pos:start="477:33" pos:end="477:38"><expr pos:start="477:33" pos:end="477:38"><name pos:start="477:33" pos:end="477:38">IF_IDE</name></expr></argument>, <argument pos:start="477:41" pos:end="477:56"><expr pos:start="477:41" pos:end="477:56"><name pos:start="477:41" pos:end="477:41">i</name> <operator pos:start="477:43" pos:end="477:43">/</operator> <name pos:start="477:45" pos:end="477:56">MAX_IDE_DEVS</name></expr></argument>, <argument pos:start="477:59" pos:end="477:74"><expr pos:start="477:59" pos:end="477:74"><name pos:start="477:59" pos:end="477:59">i</name> <operator pos:start="477:61" pos:end="477:61">%</operator> <name pos:start="477:63" pos:end="477:74">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="479:9" pos:end="485:25"><if pos:start="479:9" pos:end="481:45">if <condition pos:start="479:12" pos:end="479:24">(<expr pos:start="479:13" pos:end="479:23"><name pos:start="479:13" pos:end="479:17">index</name> <operator pos:start="479:19" pos:end="479:20">!=</operator> <operator pos:start="479:22" pos:end="479:22">-</operator><literal type="number" pos:start="479:23" pos:end="479:23">1</literal></expr>)</condition><block type="pseudo" pos:start="481:13" pos:end="481:45"><block_content pos:start="481:13" pos:end="481:45">

	    <expr_stmt pos:start="481:13" pos:end="481:45"><expr pos:start="481:13" pos:end="481:44"><name pos:start="481:13" pos:end="481:17"><name pos:start="481:13" pos:end="481:14">hd</name><index pos:start="481:15" pos:end="481:17">[<expr pos:start="481:16" pos:end="481:16"><name pos:start="481:16" pos:end="481:16">i</name></expr>]</index></name> <operator pos:start="481:19" pos:end="481:19">=</operator> <name pos:start="481:21" pos:end="481:39"><name pos:start="481:21" pos:end="481:32">drives_table</name><index pos:start="481:33" pos:end="481:39">[<expr pos:start="481:34" pos:end="481:38"><name pos:start="481:34" pos:end="481:38">index</name></expr>]</index></name><operator pos:start="481:40" pos:end="481:40">.</operator><name pos:start="481:41" pos:end="481:44">bdrv</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="483:9" pos:end="485:25">else<block type="pseudo" pos:start="485:13" pos:end="485:25"><block_content pos:start="485:13" pos:end="485:25">

	    <expr_stmt pos:start="485:13" pos:end="485:25"><expr pos:start="485:13" pos:end="485:24"><name pos:start="485:13" pos:end="485:17"><name pos:start="485:13" pos:end="485:14">hd</name><index pos:start="485:15" pos:end="485:17">[<expr pos:start="485:16" pos:end="485:16"><name pos:start="485:16" pos:end="485:16">i</name></expr>]</index></name> <operator pos:start="485:19" pos:end="485:19">=</operator> <name pos:start="485:21" pos:end="485:24">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="491:5" pos:end="505:5"><if pos:start="491:5" pos:end="495:5">if <condition pos:start="491:8" pos:end="491:20">(<expr pos:start="491:9" pos:end="491:19"><name pos:start="491:9" pos:end="491:19">pci_enabled</name></expr>)</condition> <block pos:start="491:22" pos:end="495:5">{<block_content pos:start="493:9" pos:end="493:64">

        <expr_stmt pos:start="493:9" pos:end="493:64"><expr pos:start="493:9" pos:end="493:63"><call pos:start="493:9" pos:end="493:63"><name pos:start="493:9" pos:end="493:26">pci_piix3_ide_init</name><argument_list pos:start="493:27" pos:end="493:63">(<argument pos:start="493:28" pos:end="493:34"><expr pos:start="493:28" pos:end="493:34"><name pos:start="493:28" pos:end="493:34">pci_bus</name></expr></argument>, <argument pos:start="493:37" pos:end="493:38"><expr pos:start="493:37" pos:end="493:38"><name pos:start="493:37" pos:end="493:38">hd</name></expr></argument>, <argument pos:start="493:41" pos:end="493:55"><expr pos:start="493:41" pos:end="493:55"><name pos:start="493:41" pos:end="493:51">piix3_devfn</name> <operator pos:start="493:53" pos:end="493:53">+</operator> <literal type="number" pos:start="493:55" pos:end="493:55">1</literal></expr></argument>, <argument pos:start="493:58" pos:end="493:62"><expr pos:start="493:58" pos:end="493:62"><name pos:start="493:58" pos:end="493:62">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="495:7" pos:end="505:5">else <block pos:start="495:12" pos:end="505:5">{<block_content pos:start="497:9" pos:end="503:9">

        <for pos:start="497:9" pos:end="503:9">for<control pos:start="497:12" pos:end="497:40">(<init pos:start="497:13" pos:end="497:18"><expr pos:start="497:13" pos:end="497:17"><name pos:start="497:13" pos:end="497:13">i</name> <operator pos:start="497:15" pos:end="497:15">=</operator> <literal type="number" pos:start="497:17" pos:end="497:17">0</literal></expr>;</init> <condition pos:start="497:20" pos:end="497:35"><expr pos:start="497:20" pos:end="497:34"><name pos:start="497:20" pos:end="497:20">i</name> <operator pos:start="497:22" pos:end="497:22">&lt;</operator> <name pos:start="497:24" pos:end="497:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="497:37" pos:end="497:39"><expr pos:start="497:37" pos:end="497:39"><name pos:start="497:37" pos:end="497:37">i</name><operator pos:start="497:38" pos:end="497:39">++</operator></expr></incr>)</control> <block pos:start="497:42" pos:end="503:9">{<block_content pos:start="499:13" pos:end="501:73">

            <expr_stmt pos:start="499:13" pos:end="501:73"><expr pos:start="499:13" pos:end="501:72"><call pos:start="499:13" pos:end="501:72"><name pos:start="499:13" pos:end="499:24">isa_ide_init</name><argument_list pos:start="499:25" pos:end="501:72">(<argument pos:start="499:26" pos:end="499:38"><expr pos:start="499:26" pos:end="499:38"><name pos:start="499:26" pos:end="499:38"><name pos:start="499:26" pos:end="499:35">ide_iobase</name><index pos:start="499:36" pos:end="499:38">[<expr pos:start="499:37" pos:end="499:37"><name pos:start="499:37" pos:end="499:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="499:41" pos:end="499:54"><expr pos:start="499:41" pos:end="499:54"><name pos:start="499:41" pos:end="499:54"><name pos:start="499:41" pos:end="499:51">ide_iobase2</name><index pos:start="499:52" pos:end="499:54">[<expr pos:start="499:53" pos:end="499:53"><name pos:start="499:53" pos:end="499:53">i</name></expr>]</index></name></expr></argument>, <argument pos:start="499:57" pos:end="499:73"><expr pos:start="499:57" pos:end="499:73"><name pos:start="499:57" pos:end="499:73"><name pos:start="499:57" pos:end="499:61">i8259</name><index pos:start="499:62" pos:end="499:73">[<expr pos:start="499:63" pos:end="499:72"><name pos:start="499:63" pos:end="499:72"><name pos:start="499:63" pos:end="499:69">ide_irq</name><index pos:start="499:70" pos:end="499:72">[<expr pos:start="499:71" pos:end="499:71"><name pos:start="499:71" pos:end="499:71">i</name></expr>]</index></name></expr>]</index></name></expr></argument>,

	                 <argument pos:start="501:26" pos:end="501:45"><expr pos:start="501:26" pos:end="501:45"><name pos:start="501:26" pos:end="501:45"><name pos:start="501:26" pos:end="501:27">hd</name><index pos:start="501:28" pos:end="501:45">[<expr pos:start="501:29" pos:end="501:44"><name pos:start="501:29" pos:end="501:40">MAX_IDE_DEVS</name> <operator pos:start="501:42" pos:end="501:42">*</operator> <name pos:start="501:44" pos:end="501:44">i</name></expr>]</index></name></expr></argument>, <argument pos:start="501:48" pos:end="501:71"><expr pos:start="501:48" pos:end="501:71"><name pos:start="501:48" pos:end="501:71"><name pos:start="501:48" pos:end="501:49">hd</name><index pos:start="501:50" pos:end="501:71">[<expr pos:start="501:51" pos:end="501:70"><name pos:start="501:51" pos:end="501:62">MAX_IDE_DEVS</name> <operator pos:start="501:64" pos:end="501:64">*</operator> <name pos:start="501:66" pos:end="501:66">i</name> <operator pos:start="501:68" pos:end="501:68">+</operator> <literal type="number" pos:start="501:70" pos:end="501:70">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="509:5" pos:end="509:42"><expr pos:start="509:5" pos:end="509:41"><call pos:start="509:5" pos:end="509:41"><name pos:start="509:5" pos:end="509:14">i8042_init</name><argument_list pos:start="509:15" pos:end="509:41">(<argument pos:start="509:16" pos:end="509:23"><expr pos:start="509:16" pos:end="509:23"><name pos:start="509:16" pos:end="509:23"><name pos:start="509:16" pos:end="509:20">i8259</name><index pos:start="509:21" pos:end="509:23">[<expr pos:start="509:22" pos:end="509:22"><literal type="number" pos:start="509:22" pos:end="509:22">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="509:26" pos:end="509:34"><expr pos:start="509:26" pos:end="509:34"><name pos:start="509:26" pos:end="509:34"><name pos:start="509:26" pos:end="509:30">i8259</name><index pos:start="509:31" pos:end="509:34">[<expr pos:start="509:32" pos:end="509:33"><literal type="number" pos:start="509:32" pos:end="509:33">12</literal></expr>]</index></name></expr></argument>, <argument pos:start="509:37" pos:end="509:40"><expr pos:start="509:37" pos:end="509:40"><literal type="number" pos:start="509:37" pos:end="509:40">0x60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="511:5" pos:end="514:0"><expr pos:start="511:5" pos:end="511:15"><call pos:start="511:5" pos:end="511:15"><name pos:start="511:5" pos:end="511:12">DMA_init</name><argument_list pos:start="511:13" pos:end="511:15">(<argument pos:start="511:14" pos:end="511:14"><expr pos:start="511:14" pos:end="511:14"><literal type="number" pos:start="511:14" pos:end="511:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="513:1" pos:end="513:16">#<cpp:directive pos:start="513:2" pos:end="513:6">ifdef</cpp:directive> <name pos:start="513:8" pos:end="513:16">HAS_AUDIO</name></cpp:ifdef>

    <expr_stmt pos:start="515:5" pos:end="518:0"><expr pos:start="515:5" pos:end="515:51"><call pos:start="515:5" pos:end="515:51"><name pos:start="515:5" pos:end="515:14">audio_init</name><argument_list pos:start="515:15" pos:end="515:51">(<argument pos:start="515:16" pos:end="515:43"><expr pos:start="515:16" pos:end="515:43"><ternary pos:start="515:16" pos:end="515:43"><condition pos:start="515:16" pos:end="515:28"><expr pos:start="515:16" pos:end="515:26"><name pos:start="515:16" pos:end="515:26">pci_enabled</name></expr> ?</condition><then pos:start="515:30" pos:end="515:36"> <expr pos:start="515:30" pos:end="515:36"><name pos:start="515:30" pos:end="515:36">pci_bus</name></expr> </then><else pos:start="515:38" pos:end="515:43">: <expr pos:start="515:40" pos:end="515:43"><name pos:start="515:40" pos:end="515:43">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="515:46" pos:end="515:50"><expr pos:start="515:46" pos:end="515:50"><name pos:start="515:46" pos:end="515:50">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="517:1" pos:end="517:6">#<cpp:directive pos:start="517:2" pos:end="517:6">endif</cpp:directive></cpp:endif>



    <for pos:start="521:5" pos:end="533:5">for<control pos:start="521:8" pos:end="521:31">(<init pos:start="521:9" pos:end="521:14"><expr pos:start="521:9" pos:end="521:13"><name pos:start="521:9" pos:end="521:9">i</name> <operator pos:start="521:11" pos:end="521:11">=</operator> <literal type="number" pos:start="521:13" pos:end="521:13">0</literal></expr>;</init> <condition pos:start="521:16" pos:end="521:26"><expr pos:start="521:16" pos:end="521:25"><name pos:start="521:16" pos:end="521:16">i</name> <operator pos:start="521:18" pos:end="521:18">&lt;</operator> <name pos:start="521:20" pos:end="521:25">MAX_FD</name></expr>;</condition> <incr pos:start="521:28" pos:end="521:30"><expr pos:start="521:28" pos:end="521:30"><name pos:start="521:28" pos:end="521:28">i</name><operator pos:start="521:29" pos:end="521:30">++</operator></expr></incr>)</control> <block pos:start="521:33" pos:end="533:5">{<block_content pos:start="523:9" pos:end="531:25">

        <expr_stmt pos:start="523:9" pos:end="523:49"><expr pos:start="523:9" pos:end="523:48"><name pos:start="523:9" pos:end="523:13">index</name> <operator pos:start="523:15" pos:end="523:15">=</operator> <call pos:start="523:17" pos:end="523:48"><name pos:start="523:17" pos:end="523:31">drive_get_index</name><argument_list pos:start="523:32" pos:end="523:48">(<argument pos:start="523:33" pos:end="523:41"><expr pos:start="523:33" pos:end="523:41"><name pos:start="523:33" pos:end="523:41">IF_FLOPPY</name></expr></argument>, <argument pos:start="523:44" pos:end="523:44"><expr pos:start="523:44" pos:end="523:44"><literal type="number" pos:start="523:44" pos:end="523:44">0</literal></expr></argument>, <argument pos:start="523:47" pos:end="523:47"><expr pos:start="523:47" pos:end="523:47"><name pos:start="523:47" pos:end="523:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="525:9" pos:end="531:25"><if pos:start="525:9" pos:end="527:45">if <condition pos:start="525:12" pos:end="525:24">(<expr pos:start="525:13" pos:end="525:23"><name pos:start="525:13" pos:end="525:17">index</name> <operator pos:start="525:19" pos:end="525:20">!=</operator> <operator pos:start="525:22" pos:end="525:22">-</operator><literal type="number" pos:start="525:23" pos:end="525:23">1</literal></expr>)</condition><block type="pseudo" pos:start="527:13" pos:end="527:45"><block_content pos:start="527:13" pos:end="527:45">

	    <expr_stmt pos:start="527:13" pos:end="527:45"><expr pos:start="527:13" pos:end="527:44"><name pos:start="527:13" pos:end="527:17"><name pos:start="527:13" pos:end="527:14">fd</name><index pos:start="527:15" pos:end="527:17">[<expr pos:start="527:16" pos:end="527:16"><name pos:start="527:16" pos:end="527:16">i</name></expr>]</index></name> <operator pos:start="527:19" pos:end="527:19">=</operator> <name pos:start="527:21" pos:end="527:39"><name pos:start="527:21" pos:end="527:32">drives_table</name><index pos:start="527:33" pos:end="527:39">[<expr pos:start="527:34" pos:end="527:38"><name pos:start="527:34" pos:end="527:38">index</name></expr>]</index></name><operator pos:start="527:40" pos:end="527:40">.</operator><name pos:start="527:41" pos:end="527:44">bdrv</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="529:9" pos:end="531:25">else<block type="pseudo" pos:start="531:13" pos:end="531:25"><block_content pos:start="531:13" pos:end="531:25">

	    <expr_stmt pos:start="531:13" pos:end="531:25"><expr pos:start="531:13" pos:end="531:24"><name pos:start="531:13" pos:end="531:17"><name pos:start="531:13" pos:end="531:14">fd</name><index pos:start="531:15" pos:end="531:17">[<expr pos:start="531:16" pos:end="531:16"><name pos:start="531:16" pos:end="531:16">i</name></expr>]</index></name> <operator pos:start="531:19" pos:end="531:19">=</operator> <name pos:start="531:21" pos:end="531:24">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="535:5" pos:end="535:63"><expr pos:start="535:5" pos:end="535:62"><name pos:start="535:5" pos:end="535:21">floppy_controller</name> <operator pos:start="535:23" pos:end="535:23">=</operator> <call pos:start="535:25" pos:end="535:62"><name pos:start="535:25" pos:end="535:35">fdctrl_init</name><argument_list pos:start="535:36" pos:end="535:62">(<argument pos:start="535:37" pos:end="535:44"><expr pos:start="535:37" pos:end="535:44"><name pos:start="535:37" pos:end="535:44"><name pos:start="535:37" pos:end="535:41">i8259</name><index pos:start="535:42" pos:end="535:44">[<expr pos:start="535:43" pos:end="535:43"><literal type="number" pos:start="535:43" pos:end="535:43">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="535:47" pos:end="535:47"><expr pos:start="535:47" pos:end="535:47"><literal type="number" pos:start="535:47" pos:end="535:47">2</literal></expr></argument>, <argument pos:start="535:50" pos:end="535:50"><expr pos:start="535:50" pos:end="535:50"><literal type="number" pos:start="535:50" pos:end="535:50">0</literal></expr></argument>, <argument pos:start="535:53" pos:end="535:57"><expr pos:start="535:53" pos:end="535:57"><literal type="number" pos:start="535:53" pos:end="535:57">0x3f0</literal></expr></argument>, <argument pos:start="535:60" pos:end="535:61"><expr pos:start="535:60" pos:end="535:61"><name pos:start="535:60" pos:end="535:61">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="539:5" pos:end="539:69"><expr pos:start="539:5" pos:end="539:68"><call pos:start="539:5" pos:end="539:68"><name pos:start="539:5" pos:end="539:13">cmos_init</name><argument_list pos:start="539:14" pos:end="539:68">(<argument pos:start="539:15" pos:end="539:31"><expr pos:start="539:15" pos:end="539:31"><name pos:start="539:15" pos:end="539:31">below_4g_mem_size</name></expr></argument>, <argument pos:start="539:34" pos:end="539:50"><expr pos:start="539:34" pos:end="539:50"><name pos:start="539:34" pos:end="539:50">above_4g_mem_size</name></expr></argument>, <argument pos:start="539:53" pos:end="539:63"><expr pos:start="539:53" pos:end="539:63"><name pos:start="539:53" pos:end="539:63">boot_device</name></expr></argument>, <argument pos:start="539:66" pos:end="539:67"><expr pos:start="539:66" pos:end="539:67"><name pos:start="539:66" pos:end="539:67">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="543:5" pos:end="547:5"><if pos:start="543:5" pos:end="547:5">if <condition pos:start="543:8" pos:end="543:35">(<expr pos:start="543:9" pos:end="543:34"><name pos:start="543:9" pos:end="543:19">pci_enabled</name> <operator pos:start="543:21" pos:end="543:22">&amp;&amp;</operator> <name pos:start="543:24" pos:end="543:34">usb_enabled</name></expr>)</condition> <block pos:start="543:37" pos:end="547:5">{<block_content pos:start="545:9" pos:end="545:54">

        <expr_stmt pos:start="545:9" pos:end="545:54"><expr pos:start="545:9" pos:end="545:53"><call pos:start="545:9" pos:end="545:53"><name pos:start="545:9" pos:end="545:27">usb_uhci_piix3_init</name><argument_list pos:start="545:28" pos:end="545:53">(<argument pos:start="545:29" pos:end="545:35"><expr pos:start="545:29" pos:end="545:35"><name pos:start="545:29" pos:end="545:35">pci_bus</name></expr></argument>, <argument pos:start="545:38" pos:end="545:52"><expr pos:start="545:38" pos:end="545:52"><name pos:start="545:38" pos:end="545:48">piix3_devfn</name> <operator pos:start="545:50" pos:end="545:50">+</operator> <literal type="number" pos:start="545:52" pos:end="545:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="551:5" pos:end="577:5"><if pos:start="551:5" pos:end="577:5">if <condition pos:start="551:8" pos:end="551:36">(<expr pos:start="551:9" pos:end="551:35"><name pos:start="551:9" pos:end="551:19">pci_enabled</name> <operator pos:start="551:21" pos:end="551:22">&amp;&amp;</operator> <name pos:start="551:24" pos:end="551:35">acpi_enabled</name></expr>)</condition> <block pos:start="551:38" pos:end="577:5">{<block_content pos:start="553:9" pos:end="575:9">

        <decl_stmt pos:start="553:9" pos:end="553:52"><decl pos:start="553:9" pos:end="553:51"><type pos:start="553:9" pos:end="553:17"><name pos:start="553:9" pos:end="553:15">uint8_t</name> <modifier pos:start="553:17" pos:end="553:17">*</modifier></type><name pos:start="553:18" pos:end="553:27">eeprom_buf</name> <init pos:start="553:29" pos:end="553:51">= <expr pos:start="553:31" pos:end="553:51"><call pos:start="553:31" pos:end="553:51"><name pos:start="553:31" pos:end="553:42">qemu_mallocz</name><argument_list pos:start="553:43" pos:end="553:51">(<argument pos:start="553:44" pos:end="553:50"><expr pos:start="553:44" pos:end="553:50"><literal type="number" pos:start="553:44" pos:end="553:44">8</literal> <operator pos:start="553:46" pos:end="553:46">*</operator> <literal type="number" pos:start="553:48" pos:end="553:50">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="553:54" pos:end="553:84">/* XXX: make this persistent */</comment>

        <decl_stmt pos:start="555:9" pos:end="555:23"><decl pos:start="555:9" pos:end="555:22"><type pos:start="555:9" pos:end="555:17"><name pos:start="555:9" pos:end="555:15">i2c_bus</name> <modifier pos:start="555:17" pos:end="555:17">*</modifier></type><name pos:start="555:18" pos:end="555:22">smbus</name></decl>;</decl_stmt>



        <comment type="block" pos:start="559:9" pos:end="559:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="561:9" pos:end="561:74"><expr pos:start="561:9" pos:end="561:73"><name pos:start="561:9" pos:end="561:13">smbus</name> <operator pos:start="561:15" pos:end="561:15">=</operator> <call pos:start="561:17" pos:end="561:73"><name pos:start="561:17" pos:end="561:29">piix4_pm_init</name><argument_list pos:start="561:30" pos:end="561:73">(<argument pos:start="561:31" pos:end="561:37"><expr pos:start="561:31" pos:end="561:37"><name pos:start="561:31" pos:end="561:37">pci_bus</name></expr></argument>, <argument pos:start="561:40" pos:end="561:54"><expr pos:start="561:40" pos:end="561:54"><name pos:start="561:40" pos:end="561:50">piix3_devfn</name> <operator pos:start="561:52" pos:end="561:52">+</operator> <literal type="number" pos:start="561:54" pos:end="561:54">3</literal></expr></argument>, <argument pos:start="561:57" pos:end="561:62"><expr pos:start="561:57" pos:end="561:62"><literal type="number" pos:start="561:57" pos:end="561:62">0xb100</literal></expr></argument>, <argument pos:start="561:65" pos:end="561:72"><expr pos:start="561:65" pos:end="561:72"><name pos:start="561:65" pos:end="561:72"><name pos:start="561:65" pos:end="561:69">i8259</name><index pos:start="561:70" pos:end="561:72">[<expr pos:start="561:71" pos:end="561:71"><literal type="number" pos:start="561:71" pos:end="561:71">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="563:9" pos:end="575:9">for <control pos:start="563:13" pos:end="563:31">(<init pos:start="563:14" pos:end="563:19"><expr pos:start="563:14" pos:end="563:18"><name pos:start="563:14" pos:end="563:14">i</name> <operator pos:start="563:16" pos:end="563:16">=</operator> <literal type="number" pos:start="563:18" pos:end="563:18">0</literal></expr>;</init> <condition pos:start="563:21" pos:end="563:26"><expr pos:start="563:21" pos:end="563:25"><name pos:start="563:21" pos:end="563:21">i</name> <operator pos:start="563:23" pos:end="563:23">&lt;</operator> <literal type="number" pos:start="563:25" pos:end="563:25">8</literal></expr>;</condition> <incr pos:start="563:28" pos:end="563:30"><expr pos:start="563:28" pos:end="563:30"><name pos:start="563:28" pos:end="563:28">i</name><operator pos:start="563:29" pos:end="563:30">++</operator></expr></incr>)</control> <block pos:start="563:33" pos:end="575:9">{<block_content pos:start="565:13" pos:end="573:30">

            <decl_stmt pos:start="565:13" pos:end="565:32"><decl pos:start="565:13" pos:end="565:31"><type pos:start="565:13" pos:end="565:25"><name pos:start="565:13" pos:end="565:23">DeviceState</name> <modifier pos:start="565:25" pos:end="565:25">*</modifier></type><name pos:start="565:26" pos:end="565:31">eeprom</name></decl>;</decl_stmt>

            <expr_stmt pos:start="567:13" pos:end="567:68"><expr pos:start="567:13" pos:end="567:67"><name pos:start="567:13" pos:end="567:18">eeprom</name> <operator pos:start="567:20" pos:end="567:20">=</operator> <call pos:start="567:22" pos:end="567:67"><name pos:start="567:22" pos:end="567:32">qdev_create</name><argument_list pos:start="567:33" pos:end="567:67">(<argument pos:start="567:34" pos:end="567:50"><expr pos:start="567:34" pos:end="567:50"><operator pos:start="567:34" pos:end="567:34">(</operator><name pos:start="567:35" pos:end="567:42">BusState</name> <operator pos:start="567:44" pos:end="567:44">*</operator><operator pos:start="567:45" pos:end="567:45">)</operator><name pos:start="567:46" pos:end="567:50">smbus</name></expr></argument>, <argument pos:start="567:53" pos:end="567:66"><expr pos:start="567:53" pos:end="567:66"><literal type="string" pos:start="567:53" pos:end="567:66">"smbus-eeprom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="569:13" pos:end="569:59"><expr pos:start="569:13" pos:end="569:58"><call pos:start="569:13" pos:end="569:58"><name pos:start="569:13" pos:end="569:29">qdev_set_prop_int</name><argument_list pos:start="569:30" pos:end="569:58">(<argument pos:start="569:31" pos:end="569:36"><expr pos:start="569:31" pos:end="569:36"><name pos:start="569:31" pos:end="569:36">eeprom</name></expr></argument>, <argument pos:start="569:39" pos:end="569:47"><expr pos:start="569:39" pos:end="569:47"><literal type="string" pos:start="569:39" pos:end="569:47">"address"</literal></expr></argument>, <argument pos:start="569:50" pos:end="569:57"><expr pos:start="569:50" pos:end="569:57"><literal type="number" pos:start="569:50" pos:end="569:55">0x50</literal> <operator pos:start="569:55" pos:end="569:55">+</operator> <name pos:start="569:57" pos:end="569:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="571:13" pos:end="571:70"><expr pos:start="571:13" pos:end="571:69"><call pos:start="571:13" pos:end="571:69"><name pos:start="571:13" pos:end="571:29">qdev_set_prop_ptr</name><argument_list pos:start="571:30" pos:end="571:69">(<argument pos:start="571:31" pos:end="571:36"><expr pos:start="571:31" pos:end="571:36"><name pos:start="571:31" pos:end="571:36">eeprom</name></expr></argument>, <argument pos:start="571:39" pos:end="571:44"><expr pos:start="571:39" pos:end="571:44"><literal type="string" pos:start="571:39" pos:end="571:44">"data"</literal></expr></argument>, <argument pos:start="571:47" pos:end="571:68"><expr pos:start="571:47" pos:end="571:68"><name pos:start="571:47" pos:end="571:56">eeprom_buf</name> <operator pos:start="571:58" pos:end="571:58">+</operator> <operator pos:start="571:60" pos:end="571:60">(</operator><name pos:start="571:61" pos:end="571:61">i</name> <operator pos:start="571:63" pos:end="571:63">*</operator> <literal type="number" pos:start="571:65" pos:end="571:67">256</literal><operator pos:start="571:68" pos:end="571:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="573:13" pos:end="573:30"><expr pos:start="573:13" pos:end="573:29"><call pos:start="573:13" pos:end="573:29"><name pos:start="573:13" pos:end="573:21">qdev_init</name><argument_list pos:start="573:22" pos:end="573:29">(<argument pos:start="573:23" pos:end="573:28"><expr pos:start="573:23" pos:end="573:28"><name pos:start="573:23" pos:end="573:28">eeprom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="581:5" pos:end="585:5"><if pos:start="581:5" pos:end="585:5">if <condition pos:start="581:8" pos:end="581:21">(<expr pos:start="581:9" pos:end="581:20"><name pos:start="581:9" pos:end="581:20">i440fx_state</name></expr>)</condition> <block pos:start="581:23" pos:end="585:5">{<block_content pos:start="583:9" pos:end="583:50">

        <expr_stmt pos:start="583:9" pos:end="583:50"><expr pos:start="583:9" pos:end="583:49"><call pos:start="583:9" pos:end="583:49"><name pos:start="583:9" pos:end="583:35">i440fx_init_memory_mappings</name><argument_list pos:start="583:36" pos:end="583:49">(<argument pos:start="583:37" pos:end="583:48"><expr pos:start="583:37" pos:end="583:48"><name pos:start="583:37" pos:end="583:48">i440fx_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="589:5" pos:end="605:5"><if pos:start="589:5" pos:end="605:5">if <condition pos:start="589:8" pos:end="589:20">(<expr pos:start="589:9" pos:end="589:19"><name pos:start="589:9" pos:end="589:19">pci_enabled</name></expr>)</condition> <block pos:start="589:22" pos:end="605:5">{<block_content pos:start="591:9" pos:end="603:9">

	<decl_stmt pos:start="591:9" pos:end="591:20"><decl pos:start="591:9" pos:end="591:19"><type pos:start="591:9" pos:end="591:11"><name pos:start="591:9" pos:end="591:11">int</name></type> <name pos:start="591:13" pos:end="591:19">max_bus</name></decl>;</decl_stmt>

        <decl_stmt pos:start="593:9" pos:end="593:16"><decl pos:start="593:9" pos:end="593:15"><type pos:start="593:9" pos:end="593:11"><name pos:start="593:9" pos:end="593:11">int</name></type> <name pos:start="593:13" pos:end="593:15">bus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="597:9" pos:end="597:45"><expr pos:start="597:9" pos:end="597:44"><name pos:start="597:9" pos:end="597:15">max_bus</name> <operator pos:start="597:17" pos:end="597:17">=</operator> <call pos:start="597:19" pos:end="597:44"><name pos:start="597:19" pos:end="597:35">drive_get_max_bus</name><argument_list pos:start="597:36" pos:end="597:44">(<argument pos:start="597:37" pos:end="597:43"><expr pos:start="597:37" pos:end="597:43"><name pos:start="597:37" pos:end="597:43">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:start="599:9" pos:end="603:9">for <control pos:start="599:13" pos:end="599:44">(<init pos:start="599:14" pos:end="599:21"><expr pos:start="599:14" pos:end="599:20"><name pos:start="599:14" pos:end="599:16">bus</name> <operator pos:start="599:18" pos:end="599:18">=</operator> <literal type="number" pos:start="599:20" pos:end="599:20">0</literal></expr>;</init> <condition pos:start="599:23" pos:end="599:37"><expr pos:start="599:23" pos:end="599:36"><name pos:start="599:23" pos:end="599:25">bus</name> <operator pos:start="599:27" pos:end="599:28">&lt;=</operator> <name pos:start="599:30" pos:end="599:36">max_bus</name></expr>;</condition> <incr pos:start="599:39" pos:end="599:43"><expr pos:start="599:39" pos:end="599:43"><name pos:start="599:39" pos:end="599:41">bus</name><operator pos:start="599:42" pos:end="599:43">++</operator></expr></incr>)</control> <block pos:start="599:46" pos:end="603:9">{<block_content pos:start="601:13" pos:end="601:57">

            <expr_stmt pos:start="601:13" pos:end="601:57"><expr pos:start="601:13" pos:end="601:56"><call pos:start="601:13" pos:end="601:56"><name pos:start="601:13" pos:end="601:29">pci_create_simple</name><argument_list pos:start="601:30" pos:end="601:56">(<argument pos:start="601:31" pos:end="601:37"><expr pos:start="601:31" pos:end="601:37"><name pos:start="601:31" pos:end="601:37">pci_bus</name></expr></argument>, <argument pos:start="601:40" pos:end="601:41"><expr pos:start="601:40" pos:end="601:41"><operator pos:start="601:40" pos:end="601:40">-</operator><literal type="number" pos:start="601:41" pos:end="601:41">1</literal></expr></argument>, <argument pos:start="601:44" pos:end="601:55"><expr pos:start="601:44" pos:end="601:55"><literal type="string" pos:start="601:44" pos:end="601:55">"lsi53c895a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="609:5" pos:end="609:34">/* Add virtio block devices */</comment>

    <if_stmt pos:start="611:5" pos:end="627:5"><if pos:start="611:5" pos:end="627:5">if <condition pos:start="611:8" pos:end="611:20">(<expr pos:start="611:9" pos:end="611:19"><name pos:start="611:9" pos:end="611:19">pci_enabled</name></expr>)</condition> <block pos:start="611:22" pos:end="627:5">{<block_content pos:start="613:9" pos:end="625:9">

        <decl_stmt pos:start="613:9" pos:end="613:18"><decl pos:start="613:9" pos:end="613:17"><type pos:start="613:9" pos:end="613:11"><name pos:start="613:9" pos:end="613:11">int</name></type> <name pos:start="613:13" pos:end="613:17">index</name></decl>;</decl_stmt>

        <decl_stmt pos:start="615:9" pos:end="615:24"><decl pos:start="615:9" pos:end="615:23"><type pos:start="615:9" pos:end="615:11"><name pos:start="615:9" pos:end="615:11">int</name></type> <name pos:start="615:13" pos:end="615:19">unit_id</name> <init pos:start="615:21" pos:end="615:23">= <expr pos:start="615:23" pos:end="615:23"><literal type="number" pos:start="615:23" pos:end="615:23">0</literal></expr></init></decl>;</decl_stmt>



        <while pos:start="619:9" pos:end="625:9">while <condition pos:start="619:15" pos:end="619:70">(<expr pos:start="619:16" pos:end="619:69"><operator pos:start="619:16" pos:end="619:16">(</operator><name pos:start="619:17" pos:end="619:21">index</name> <operator pos:start="619:23" pos:end="619:23">=</operator> <call pos:start="619:25" pos:end="619:62"><name pos:start="619:25" pos:end="619:39">drive_get_index</name><argument_list pos:start="619:40" pos:end="619:62">(<argument pos:start="619:41" pos:end="619:49"><expr pos:start="619:41" pos:end="619:49"><name pos:start="619:41" pos:end="619:49">IF_VIRTIO</name></expr></argument>, <argument pos:start="619:52" pos:end="619:52"><expr pos:start="619:52" pos:end="619:52"><literal type="number" pos:start="619:52" pos:end="619:52">0</literal></expr></argument>, <argument pos:start="619:55" pos:end="619:61"><expr pos:start="619:55" pos:end="619:61"><name pos:start="619:55" pos:end="619:61">unit_id</name></expr></argument>)</argument_list></call><operator pos:start="619:63" pos:end="619:63">)</operator> <operator pos:start="619:65" pos:end="619:66">!=</operator> <operator pos:start="619:68" pos:end="619:68">-</operator><literal type="number" pos:start="619:69" pos:end="619:69">1</literal></expr>)</condition> <block pos:start="619:72" pos:end="625:9">{<block_content pos:start="621:13" pos:end="623:22">

            <expr_stmt pos:start="621:13" pos:end="621:61"><expr pos:start="621:13" pos:end="621:60"><call pos:start="621:13" pos:end="621:60"><name pos:start="621:13" pos:end="621:29">pci_create_simple</name><argument_list pos:start="621:30" pos:end="621:60">(<argument pos:start="621:31" pos:end="621:37"><expr pos:start="621:31" pos:end="621:37"><name pos:start="621:31" pos:end="621:37">pci_bus</name></expr></argument>, <argument pos:start="621:40" pos:end="621:41"><expr pos:start="621:40" pos:end="621:41"><operator pos:start="621:40" pos:end="621:40">-</operator><literal type="number" pos:start="621:41" pos:end="621:41">1</literal></expr></argument>, <argument pos:start="621:44" pos:end="621:59"><expr pos:start="621:44" pos:end="621:59"><literal type="string" pos:start="621:44" pos:end="621:59">"virtio-blk-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="623:13" pos:end="623:22"><expr pos:start="623:13" pos:end="623:21"><name pos:start="623:13" pos:end="623:19">unit_id</name><operator pos:start="623:20" pos:end="623:21">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="631:5" pos:end="631:35">/* Add virtio balloon device */</comment>

    <if_stmt pos:start="633:5" pos:end="637:5"><if pos:start="633:5" pos:end="637:5">if <condition pos:start="633:8" pos:end="633:42">(<expr pos:start="633:9" pos:end="633:41"><name pos:start="633:9" pos:end="633:19">pci_enabled</name> <operator pos:start="633:21" pos:end="633:22">&amp;&amp;</operator> <operator pos:start="633:24" pos:end="633:24">!</operator><name pos:start="633:25" pos:end="633:41">no_virtio_balloon</name></expr>)</condition> <block pos:start="633:44" pos:end="637:5">{<block_content pos:start="635:9" pos:end="635:61">

        <expr_stmt pos:start="635:9" pos:end="635:61"><expr pos:start="635:9" pos:end="635:60"><call pos:start="635:9" pos:end="635:60"><name pos:start="635:9" pos:end="635:25">pci_create_simple</name><argument_list pos:start="635:26" pos:end="635:60">(<argument pos:start="635:27" pos:end="635:33"><expr pos:start="635:27" pos:end="635:33"><name pos:start="635:27" pos:end="635:33">pci_bus</name></expr></argument>, <argument pos:start="635:36" pos:end="635:37"><expr pos:start="635:36" pos:end="635:37"><operator pos:start="635:36" pos:end="635:36">-</operator><literal type="number" pos:start="635:37" pos:end="635:37">1</literal></expr></argument>, <argument pos:start="635:40" pos:end="635:59"><expr pos:start="635:40" pos:end="635:59"><literal type="string" pos:start="635:40" pos:end="635:59">"virtio-balloon-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="641:5" pos:end="641:36">/* Add virtio console devices */</comment>

    <if_stmt pos:start="643:5" pos:end="655:5"><if pos:start="643:5" pos:end="655:5">if <condition pos:start="643:8" pos:end="643:20">(<expr pos:start="643:9" pos:end="643:19"><name pos:start="643:9" pos:end="643:19">pci_enabled</name></expr>)</condition> <block pos:start="643:22" pos:end="655:5">{<block_content pos:start="645:9" pos:end="653:9">

        <for pos:start="645:9" pos:end="653:9">for<control pos:start="645:12" pos:end="645:48">(<init pos:start="645:13" pos:end="645:18"><expr pos:start="645:13" pos:end="645:17"><name pos:start="645:13" pos:end="645:13">i</name> <operator pos:start="645:15" pos:end="645:15">=</operator> <literal type="number" pos:start="645:17" pos:end="645:17">0</literal></expr>;</init> <condition pos:start="645:20" pos:end="645:43"><expr pos:start="645:20" pos:end="645:42"><name pos:start="645:20" pos:end="645:20">i</name> <operator pos:start="645:22" pos:end="645:22">&lt;</operator> <name pos:start="645:24" pos:end="645:42">MAX_VIRTIO_CONSOLES</name></expr>;</condition> <incr pos:start="645:45" pos:end="645:47"><expr pos:start="645:45" pos:end="645:47"><name pos:start="645:45" pos:end="645:45">i</name><operator pos:start="645:46" pos:end="645:47">++</operator></expr></incr>)</control> <block pos:start="645:50" pos:end="653:9">{<block_content pos:start="647:13" pos:end="651:13">

            <if_stmt pos:start="647:13" pos:end="651:13"><if pos:start="647:13" pos:end="651:13">if <condition pos:start="647:16" pos:end="647:31">(<expr pos:start="647:17" pos:end="647:30"><name pos:start="647:17" pos:end="647:30"><name pos:start="647:17" pos:end="647:27">virtcon_hds</name><index pos:start="647:28" pos:end="647:30">[<expr pos:start="647:29" pos:end="647:29"><name pos:start="647:29" pos:end="647:29">i</name></expr>]</index></name></expr>)</condition> <block pos:start="647:33" pos:end="651:13">{<block_content pos:start="649:17" pos:end="649:69">

                <expr_stmt pos:start="649:17" pos:end="649:69"><expr pos:start="649:17" pos:end="649:68"><call pos:start="649:17" pos:end="649:68"><name pos:start="649:17" pos:end="649:33">pci_create_simple</name><argument_list pos:start="649:34" pos:end="649:68">(<argument pos:start="649:35" pos:end="649:41"><expr pos:start="649:35" pos:end="649:41"><name pos:start="649:35" pos:end="649:41">pci_bus</name></expr></argument>, <argument pos:start="649:44" pos:end="649:45"><expr pos:start="649:44" pos:end="649:45"><operator pos:start="649:44" pos:end="649:44">-</operator><literal type="number" pos:start="649:45" pos:end="649:45">1</literal></expr></argument>, <argument pos:start="649:48" pos:end="649:67"><expr pos:start="649:48" pos:end="649:67"><literal type="string" pos:start="649:48" pos:end="649:67">"virtio-console-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
