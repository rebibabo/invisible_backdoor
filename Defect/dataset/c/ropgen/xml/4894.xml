<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4894.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">pmac_ide_transfer_cb</name><parameter_list pos:start="1:33" pos:end="1:55">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:54"><decl pos:start="1:48" pos:end="1:54"><type pos:start="1:48" pos:end="1:54"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:54">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="303:1">{<block_content pos:start="5:5" pos:end="301:20">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">DBDMA_io</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">io</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">MACIOIDEState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">m</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">io</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">IDEState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:43">= <expr pos:start="9:19" pos:end="9:43"><call pos:start="9:19" pos:end="9:43"><name pos:start="9:19" pos:end="9:34">idebus_active_if</name><argument_list pos:start="9:35" pos:end="9:43">(<argument pos:start="9:36" pos:end="9:42"><expr pos:start="9:36" pos:end="9:42"><operator pos:start="9:36" pos:end="9:36">&amp;</operator><name pos:start="9:37" pos:end="9:42"><name pos:start="9:37" pos:end="9:37">m</name><operator pos:start="9:38" pos:end="9:39">-&gt;</operator><name pos:start="9:40" pos:end="9:42">bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">n</name> <init pos:start="11:11" pos:end="11:13">= <expr pos:start="11:13" pos:end="11:13"><literal type="number" pos:start="11:13" pos:end="11:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:22">sector_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">unaligned</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="33:5"><if pos:start="19:5" pos:end="33:5">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">&lt;</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>)</condition> <block pos:start="19:18" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:18">

        <expr_stmt pos:start="21:9" pos:end="21:37"><expr pos:start="21:9" pos:end="21:36"><call pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:21">MACIO_DPRINTF</name><argument_list pos:start="21:22" pos:end="21:36">(<argument pos:start="21:23" pos:end="21:35"><expr pos:start="21:23" pos:end="21:35"><literal type="string" pos:start="21:23" pos:end="21:35">"DMA error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:24"><expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:9">m</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:16">aiocb</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:23">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><call pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:27">qemu_sglist_destroy</name><argument_list pos:start="25:28" pos:end="25:35">(<argument pos:start="25:29" pos:end="25:34"><expr pos:start="25:29" pos:end="25:34"><operator pos:start="25:29" pos:end="25:29">&amp;</operator><name pos:start="25:30" pos:end="25:34"><name pos:start="25:30" pos:end="25:30">s</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:34">sg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:25"><expr pos:start="27:9" pos:end="27:24"><call pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:21">ide_dma_error</name><argument_list pos:start="27:22" pos:end="27:24">(<argument pos:start="27:23" pos:end="27:23"><expr pos:start="27:23" pos:end="27:23"><name pos:start="27:23" pos:end="27:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:10">io</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:25">remainder_len</name></name> <operator pos:start="29:27" pos:end="29:27">=</operator> <literal type="number" pos:start="29:29" pos:end="29:29">0</literal></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:18">goto <name pos:start="31:14" pos:end="31:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="49:5">if <condition pos:start="37:8" pos:end="37:23">(<expr pos:start="37:9" pos:end="37:22"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:22"><name pos:start="37:10" pos:end="37:10">m</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:22">dma_active</name></name></expr>)</condition> <block pos:start="37:25" pos:end="49:5">{<block_content pos:start="39:9" pos:end="47:15">

        <expr_stmt pos:start="39:9" pos:end="41:54"><expr pos:start="39:9" pos:end="41:53"><call pos:start="39:9" pos:end="41:53"><name pos:start="39:9" pos:end="39:21">MACIO_DPRINTF</name><argument_list pos:start="39:22" pos:end="41:53">(<argument pos:start="39:23" pos:end="39:59"><expr pos:start="39:23" pos:end="39:59"><literal type="string" pos:start="39:23" pos:end="39:59">"waiting for data (%#x - %#x - %x)\n"</literal></expr></argument>,

                      <argument pos:start="41:23" pos:end="41:32"><expr pos:start="41:23" pos:end="41:32"><name pos:start="41:23" pos:end="41:32"><name pos:start="41:23" pos:end="41:23">s</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:32">nsector</name></name></expr></argument>, <argument pos:start="41:35" pos:end="41:41"><expr pos:start="41:35" pos:end="41:41"><name pos:start="41:35" pos:end="41:41"><name pos:start="41:35" pos:end="41:36">io</name><operator pos:start="41:37" pos:end="41:38">-&gt;</operator><name pos:start="41:39" pos:end="41:41">len</name></name></expr></argument>, <argument pos:start="41:44" pos:end="41:52"><expr pos:start="41:44" pos:end="41:52"><name pos:start="41:44" pos:end="41:52"><name pos:start="41:44" pos:end="41:44">s</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:52">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="43:9" pos:end="43:71">/* data not ready yet, wait for the channel to get restarted */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:31"><expr pos:start="45:9" pos:end="45:30"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:10">io</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:22">processing</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <name pos:start="45:26" pos:end="45:30">false</name></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:14">sector_num</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:34"><name pos:start="53:18" pos:end="53:31">ide_get_sector</name><argument_list pos:start="53:32" pos:end="53:34">(<argument pos:start="53:33" pos:end="53:33"><expr pos:start="53:33" pos:end="53:33"><name pos:start="53:33" pos:end="53:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:63"><expr pos:start="55:5" pos:end="55:62"><call pos:start="55:5" pos:end="55:62"><name pos:start="55:5" pos:end="55:17">MACIO_DPRINTF</name><argument_list pos:start="55:18" pos:end="55:62">(<argument pos:start="55:19" pos:end="55:42"><expr pos:start="55:19" pos:end="55:42"><literal type="string" pos:start="55:19" pos:end="55:42">"io_buffer_size = %#x\n"</literal></expr></argument>, <argument pos:start="55:45" pos:end="55:61"><expr pos:start="55:45" pos:end="55:61"><name pos:start="55:45" pos:end="55:61"><name pos:start="55:45" pos:end="55:45">s</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:61">io_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="71:5"><if pos:start="57:5" pos:end="71:5">if <condition pos:start="57:8" pos:end="57:30">(<expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:25">io_buffer_size</name></name> <operator pos:start="57:27" pos:end="57:27">&gt;</operator> <literal type="number" pos:start="57:29" pos:end="57:29">0</literal></expr>)</condition> <block pos:start="57:32" pos:end="71:5">{<block_content pos:start="59:9" pos:end="69:24">

        <expr_stmt pos:start="59:9" pos:end="59:24"><expr pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:9">m</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:16">aiocb</name></name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:23">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><call pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:27">qemu_sglist_destroy</name><argument_list pos:start="61:28" pos:end="61:35">(<argument pos:start="61:29" pos:end="61:34"><expr pos:start="61:29" pos:end="61:34"><operator pos:start="61:29" pos:end="61:29">&amp;</operator><name pos:start="61:30" pos:end="61:34"><name pos:start="61:30" pos:end="61:30">s</name><operator pos:start="61:31" pos:end="61:32">-&gt;</operator><name pos:start="61:33" pos:end="61:34">sg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:45"><expr pos:start="63:9" pos:end="63:44"><name pos:start="63:9" pos:end="63:9">n</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:30"><name pos:start="63:14" pos:end="63:14">s</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:30">io_buffer_size</name></name> <operator pos:start="63:32" pos:end="63:32">+</operator> <literal type="number" pos:start="63:34" pos:end="63:38">0x1ff</literal><operator pos:start="63:39" pos:end="63:39">)</operator> <operator pos:start="63:41" pos:end="63:42">&gt;&gt;</operator> <literal type="number" pos:start="63:44" pos:end="63:44">9</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:18">sector_num</name> <operator pos:start="65:20" pos:end="65:21">+=</operator> <name pos:start="65:23" pos:end="65:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><call pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:22">ide_set_sector</name><argument_list pos:start="67:23" pos:end="67:37">(<argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">s</name></expr></argument>, <argument pos:start="67:27" pos:end="67:36"><expr pos:start="67:27" pos:end="67:36"><name pos:start="67:27" pos:end="67:36">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:24"><expr pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:18">nsector</name></name> <operator pos:start="69:20" pos:end="69:21">-=</operator> <name pos:start="69:23" pos:end="69:23">n</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="79:70"><expr pos:start="75:5" pos:end="79:69"><call pos:start="75:5" pos:end="79:69"><name pos:start="75:5" pos:end="75:17">MACIO_DPRINTF</name><argument_list pos:start="75:18" pos:end="79:69">(<argument pos:start="75:19" pos:end="77:45"><expr pos:start="75:19" pos:end="77:45"><literal type="string" pos:start="75:19" pos:end="75:58">"remainder: %d io-&gt;len: %d nsector: %d "</literal>

                  <literal type="string" pos:start="77:19" pos:end="77:33">"sector_num: %"</literal> <name pos:start="77:35" pos:end="77:40">PRId64</name> <literal type="string" pos:start="77:42" pos:end="77:45">"\n"</literal></expr></argument>,

                  <argument pos:start="79:19" pos:end="79:35"><expr pos:start="79:19" pos:end="79:35"><name pos:start="79:19" pos:end="79:35"><name pos:start="79:19" pos:end="79:20">io</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:35">remainder_len</name></name></expr></argument>, <argument pos:start="79:38" pos:end="79:44"><expr pos:start="79:38" pos:end="79:44"><name pos:start="79:38" pos:end="79:44"><name pos:start="79:38" pos:end="79:39">io</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:44">len</name></name></expr></argument>, <argument pos:start="79:47" pos:end="79:56"><expr pos:start="79:47" pos:end="79:56"><name pos:start="79:47" pos:end="79:56"><name pos:start="79:47" pos:end="79:47">s</name><operator pos:start="79:48" pos:end="79:49">-&gt;</operator><name pos:start="79:50" pos:end="79:56">nsector</name></name></expr></argument>, <argument pos:start="79:59" pos:end="79:68"><expr pos:start="79:59" pos:end="79:68"><name pos:start="79:59" pos:end="79:68">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="125:5"><if pos:start="81:5" pos:end="125:5">if <condition pos:start="81:8" pos:end="81:37">(<expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:10">io</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:25">remainder_len</name></name> <operator pos:start="81:27" pos:end="81:28">&amp;&amp;</operator> <name pos:start="81:30" pos:end="81:36"><name pos:start="81:30" pos:end="81:31">io</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:36">len</name></name></expr>)</condition> <block pos:start="81:39" pos:end="125:5">{<block_content pos:start="85:9" pos:end="123:43">

        <comment type="block" pos:start="83:9" pos:end="83:59">/* guest wants the rest of its previous transfer */</comment>

        <decl_stmt pos:start="85:9" pos:end="85:60"><decl pos:start="85:9" pos:end="85:59"><type pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">int</name></type> <name pos:start="85:13" pos:end="85:25">remainder_len</name> <init pos:start="85:27" pos:end="85:59">= <expr pos:start="85:29" pos:end="85:59"><call pos:start="85:29" pos:end="85:59"><name pos:start="85:29" pos:end="85:31">MIN</name><argument_list pos:start="85:32" pos:end="85:59">(<argument pos:start="85:33" pos:end="85:49"><expr pos:start="85:33" pos:end="85:49"><name pos:start="85:33" pos:end="85:49"><name pos:start="85:33" pos:end="85:34">io</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:49">remainder_len</name></name></expr></argument>, <argument pos:start="85:52" pos:end="85:58"><expr pos:start="85:52" pos:end="85:58"><name pos:start="85:52" pos:end="85:58"><name pos:start="85:52" pos:end="85:53">io</name><operator pos:start="85:54" pos:end="85:55">-&gt;</operator><name pos:start="85:56" pos:end="85:58">len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="87:9" pos:end="87:59"><decl pos:start="87:9" pos:end="87:58"><type pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:15">uint8_t</name> <modifier pos:start="87:17" pos:end="87:17">*</modifier></type><name pos:start="87:18" pos:end="87:18">p</name> <init pos:start="87:20" pos:end="87:58">= <expr pos:start="87:22" pos:end="87:58"><operator pos:start="87:22" pos:end="87:22">&amp;</operator><name pos:start="87:23" pos:end="87:58"><name pos:start="87:23" pos:end="87:24">io</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:35">remainder</name><index pos:start="87:36" pos:end="87:58">[<expr pos:start="87:37" pos:end="87:57"><literal type="number" pos:start="87:37" pos:end="87:43">0x200</literal> <operator pos:start="87:43" pos:end="87:43">-</operator> <name pos:start="87:45" pos:end="87:57">remainder_len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="91:9" pos:end="93:47"><expr pos:start="91:9" pos:end="93:46"><call pos:start="91:9" pos:end="93:46"><name pos:start="91:9" pos:end="91:21">MACIO_DPRINTF</name><argument_list pos:start="91:22" pos:end="93:46">(<argument pos:start="91:23" pos:end="91:73"><expr pos:start="91:23" pos:end="91:73"><literal type="string" pos:start="91:23" pos:end="91:56">"copying remainder %d bytes at %#"</literal> <name pos:start="91:58" pos:end="91:68">HWADDR_PRIx</name> <literal type="string" pos:start="91:70" pos:end="91:73">"\n"</literal></expr></argument>,

                      <argument pos:start="93:23" pos:end="93:35"><expr pos:start="93:23" pos:end="93:35"><name pos:start="93:23" pos:end="93:35">remainder_len</name></expr></argument>, <argument pos:start="93:38" pos:end="93:45"><expr pos:start="93:38" pos:end="93:45"><name pos:start="93:38" pos:end="93:45"><name pos:start="93:38" pos:end="93:39">io</name><operator pos:start="93:40" pos:end="93:41">-&gt;</operator><name pos:start="93:42" pos:end="93:45">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="97:9" pos:end="117:9">switch <condition pos:start="97:16" pos:end="97:27">(<expr pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:17">s</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:26">dma_cmd</name></name></expr>)</condition> <block pos:start="97:29" pos:end="117:9">{<block_content pos:start="99:9" pos:end="115:18">

        <case pos:start="99:9" pos:end="99:26">case <expr pos:start="99:14" pos:end="99:25"><name pos:start="99:14" pos:end="99:25">IDE_DMA_READ</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:66"><expr pos:start="101:13" pos:end="101:65"><call pos:start="101:13" pos:end="101:65"><name pos:start="101:13" pos:end="101:37">cpu_physical_memory_write</name><argument_list pos:start="101:38" pos:end="101:65">(<argument pos:start="101:39" pos:end="101:46"><expr pos:start="101:39" pos:end="101:46"><name pos:start="101:39" pos:end="101:46"><name pos:start="101:39" pos:end="101:40">io</name><operator pos:start="101:41" pos:end="101:42">-&gt;</operator><name pos:start="101:43" pos:end="101:46">addr</name></name></expr></argument>, <argument pos:start="101:49" pos:end="101:49"><expr pos:start="101:49" pos:end="101:49"><name pos:start="101:49" pos:end="101:49">p</name></expr></argument>, <argument pos:start="101:52" pos:end="101:64"><expr pos:start="101:52" pos:end="101:64"><name pos:start="101:52" pos:end="101:64">remainder_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        <case pos:start="105:9" pos:end="105:27">case <expr pos:start="105:14" pos:end="105:26"><name pos:start="105:14" pos:end="105:26">IDE_DMA_WRITE</name></expr>:</case>

            <expr_stmt pos:start="107:13" pos:end="107:65"><expr pos:start="107:13" pos:end="107:64"><call pos:start="107:13" pos:end="107:64"><name pos:start="107:13" pos:end="107:36">cpu_physical_memory_read</name><argument_list pos:start="107:37" pos:end="107:64">(<argument pos:start="107:38" pos:end="107:45"><expr pos:start="107:38" pos:end="107:45"><name pos:start="107:38" pos:end="107:45"><name pos:start="107:38" pos:end="107:39">io</name><operator pos:start="107:40" pos:end="107:41">-&gt;</operator><name pos:start="107:42" pos:end="107:45">addr</name></name></expr></argument>, <argument pos:start="107:48" pos:end="107:48"><expr pos:start="107:48" pos:end="107:48"><name pos:start="107:48" pos:end="107:48">p</name></expr></argument>, <argument pos:start="107:51" pos:end="107:63"><expr pos:start="107:51" pos:end="107:63"><name pos:start="107:51" pos:end="107:63">remainder_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:64"><expr pos:start="109:13" pos:end="109:63"><call pos:start="109:13" pos:end="109:63"><name pos:start="109:13" pos:end="109:22">bdrv_write</name><argument_list pos:start="109:23" pos:end="109:63">(<argument pos:start="109:24" pos:end="109:28"><expr pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:24">s</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:28">bs</name></name></expr></argument>, <argument pos:start="109:31" pos:end="109:44"><expr pos:start="109:31" pos:end="109:44"><name pos:start="109:31" pos:end="109:40">sector_num</name> <operator pos:start="109:42" pos:end="109:42">-</operator> <literal type="number" pos:start="109:44" pos:end="109:44">1</literal></expr></argument>, <argument pos:start="109:47" pos:end="109:59"><expr pos:start="109:47" pos:end="109:59"><name pos:start="109:47" pos:end="109:59"><name pos:start="109:47" pos:end="109:48">io</name><operator pos:start="109:49" pos:end="109:50">-&gt;</operator><name pos:start="109:51" pos:end="109:59">remainder</name></name></expr></argument>, <argument pos:start="109:62" pos:end="109:62"><expr pos:start="109:62" pos:end="109:62"><literal type="number" pos:start="109:62" pos:end="109:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        <case pos:start="113:9" pos:end="113:26">case <expr pos:start="113:14" pos:end="113:25"><name pos:start="113:14" pos:end="113:25">IDE_DMA_TRIM</name></expr>:</case>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:10">io</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:16">addr</name></name> <operator pos:start="119:18" pos:end="119:19">+=</operator> <name pos:start="119:21" pos:end="119:33">remainder_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:33"><expr pos:start="121:9" pos:end="121:32"><name pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:10">io</name><operator pos:start="121:11" pos:end="121:12">-&gt;</operator><name pos:start="121:13" pos:end="121:15">len</name></name> <operator pos:start="121:17" pos:end="121:18">-=</operator> <name pos:start="121:20" pos:end="121:32">remainder_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:43"><expr pos:start="123:9" pos:end="123:42"><name pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:10">io</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:25">remainder_len</name></name> <operator pos:start="123:27" pos:end="123:28">-=</operator> <name pos:start="123:30" pos:end="123:42">remainder_len</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="129:5" pos:end="139:5"><if pos:start="129:5" pos:end="139:5">if <condition pos:start="129:8" pos:end="129:46">(<expr pos:start="129:9" pos:end="129:45"><name pos:start="129:9" pos:end="129:18"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:18">nsector</name></name> <operator pos:start="129:20" pos:end="129:21">==</operator> <literal type="number" pos:start="129:23" pos:end="129:23">0</literal> <operator pos:start="129:25" pos:end="129:26">&amp;&amp;</operator> <operator pos:start="129:28" pos:end="129:28">!</operator><name pos:start="129:29" pos:end="129:45"><name pos:start="129:29" pos:end="129:30">io</name><operator pos:start="129:31" pos:end="129:32">-&gt;</operator><name pos:start="129:33" pos:end="129:45">remainder_len</name></name></expr>)</condition> <block pos:start="129:48" pos:end="139:5">{<block_content pos:start="131:9" pos:end="137:30">

        <expr_stmt pos:start="131:9" pos:end="131:43"><expr pos:start="131:9" pos:end="131:42"><call pos:start="131:9" pos:end="131:42"><name pos:start="131:9" pos:end="131:21">MACIO_DPRINTF</name><argument_list pos:start="131:22" pos:end="131:42">(<argument pos:start="131:23" pos:end="131:41"><expr pos:start="131:23" pos:end="131:41"><literal type="string" pos:start="131:23" pos:end="131:41">"end of transfer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:43"><expr pos:start="133:9" pos:end="133:42"><name pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:17">status</name></name> <operator pos:start="133:19" pos:end="133:19">=</operator> <name pos:start="133:21" pos:end="133:30">READY_STAT</name> <operator pos:start="133:32" pos:end="133:32">|</operator> <name pos:start="133:34" pos:end="133:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:28"><expr pos:start="135:9" pos:end="135:27"><call pos:start="135:9" pos:end="135:27"><name pos:start="135:9" pos:end="135:19">ide_set_irq</name><argument_list pos:start="135:20" pos:end="135:27">(<argument pos:start="135:21" pos:end="135:26"><expr pos:start="135:21" pos:end="135:26"><name pos:start="135:21" pos:end="135:26"><name pos:start="135:21" pos:end="135:21">s</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:30"><expr pos:start="137:9" pos:end="137:29"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:9">m</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:21">dma_active</name></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <name pos:start="137:25" pos:end="137:29">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="143:5" pos:end="149:5"><if pos:start="143:5" pos:end="149:5">if <condition pos:start="143:8" pos:end="143:21">(<expr pos:start="143:9" pos:end="143:20"><name pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:10">io</name><operator pos:start="143:11" pos:end="143:12">-&gt;</operator><name pos:start="143:13" pos:end="143:15">len</name></name> <operator pos:start="143:17" pos:end="143:18">==</operator> <literal type="number" pos:start="143:20" pos:end="143:20">0</literal></expr>)</condition> <block pos:start="143:23" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:18">

        <expr_stmt pos:start="145:9" pos:end="145:38"><expr pos:start="145:9" pos:end="145:37"><call pos:start="145:9" pos:end="145:37"><name pos:start="145:9" pos:end="145:21">MACIO_DPRINTF</name><argument_list pos:start="145:22" pos:end="145:37">(<argument pos:start="145:23" pos:end="145:36"><expr pos:start="145:23" pos:end="145:36"><literal type="string" pos:start="145:23" pos:end="145:36">"end of DMA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="147:9" pos:end="147:18">goto <name pos:start="147:14" pos:end="147:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:30">/* launch next transfer */</comment>



    <expr_stmt pos:start="157:5" pos:end="157:27"><expr pos:start="157:5" pos:end="157:26"><name pos:start="157:5" pos:end="157:22"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:22">io_buffer_index</name></name> <operator pos:start="157:24" pos:end="157:24">=</operator> <literal type="number" pos:start="157:26" pos:end="157:26">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:55"><expr pos:start="159:5" pos:end="159:54"><name pos:start="159:5" pos:end="159:21"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:21">io_buffer_size</name></name> <operator pos:start="159:23" pos:end="159:23">=</operator> <call pos:start="159:25" pos:end="159:54"><name pos:start="159:25" pos:end="159:27">MIN</name><argument_list pos:start="159:28" pos:end="159:54">(<argument pos:start="159:29" pos:end="159:35"><expr pos:start="159:29" pos:end="159:35"><name pos:start="159:29" pos:end="159:35"><name pos:start="159:29" pos:end="159:30">io</name><operator pos:start="159:31" pos:end="159:32">-&gt;</operator><name pos:start="159:33" pos:end="159:35">len</name></name></expr></argument>, <argument pos:start="159:38" pos:end="159:53"><expr pos:start="159:38" pos:end="159:53"><name pos:start="159:38" pos:end="159:47"><name pos:start="159:38" pos:end="159:38">s</name><operator pos:start="159:39" pos:end="159:40">-&gt;</operator><name pos:start="159:41" pos:end="159:47">nsector</name></name> <operator pos:start="159:49" pos:end="159:49">*</operator> <literal type="number" pos:start="159:51" pos:end="159:53">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="163:5" pos:end="165:61">/* handle unaligned accesses first, get them over with and only do the

       remaining bulk transfer using our async DMA helpers */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:32"><expr pos:start="167:5" pos:end="167:31"><name pos:start="167:5" pos:end="167:13">unaligned</name> <operator pos:start="167:15" pos:end="167:15">=</operator> <name pos:start="167:17" pos:end="167:23"><name pos:start="167:17" pos:end="167:18">io</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:23">len</name></name> <operator pos:start="167:25" pos:end="167:25">&amp;</operator> <literal type="number" pos:start="167:27" pos:end="167:31">0x1ff</literal></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="213:5"><if pos:start="169:5" pos:end="213:5">if <condition pos:start="169:8" pos:end="169:18">(<expr pos:start="169:9" pos:end="169:17"><name pos:start="169:9" pos:end="169:17">unaligned</name></expr>)</condition> <block pos:start="169:20" pos:end="213:5">{<block_content pos:start="171:9" pos:end="211:29">

        <decl_stmt pos:start="171:9" pos:end="171:35"><decl pos:start="171:9" pos:end="171:34"><type pos:start="171:9" pos:end="171:11"><name pos:start="171:9" pos:end="171:11">int</name></type> <name pos:start="171:13" pos:end="171:19">nsector</name> <init pos:start="171:21" pos:end="171:34">= <expr pos:start="171:23" pos:end="171:34"><name pos:start="171:23" pos:end="171:29"><name pos:start="171:23" pos:end="171:24">io</name><operator pos:start="171:25" pos:end="171:26">-&gt;</operator><name pos:start="171:27" pos:end="171:29">len</name></name> <operator pos:start="171:31" pos:end="171:32">&gt;&gt;</operator> <literal type="number" pos:start="171:34" pos:end="171:34">9</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="175:9" pos:end="177:65"><expr pos:start="175:9" pos:end="177:64"><call pos:start="175:9" pos:end="177:64"><name pos:start="175:9" pos:end="175:21">MACIO_DPRINTF</name><argument_list pos:start="175:22" pos:end="177:64">(<argument pos:start="175:23" pos:end="175:76"><expr pos:start="175:23" pos:end="175:76"><literal type="string" pos:start="175:23" pos:end="175:59">"precopying unaligned %d bytes to %#"</literal> <name pos:start="175:61" pos:end="175:71">HWADDR_PRIx</name> <literal type="string" pos:start="175:73" pos:end="175:76">"\n"</literal></expr></argument>,

                      <argument pos:start="177:23" pos:end="177:31"><expr pos:start="177:23" pos:end="177:31"><name pos:start="177:23" pos:end="177:31">unaligned</name></expr></argument>, <argument pos:start="177:34" pos:end="177:63"><expr pos:start="177:34" pos:end="177:63"><name pos:start="177:34" pos:end="177:41"><name pos:start="177:34" pos:end="177:35">io</name><operator pos:start="177:36" pos:end="177:37">-&gt;</operator><name pos:start="177:38" pos:end="177:41">addr</name></name> <operator pos:start="177:43" pos:end="177:43">+</operator> <name pos:start="177:45" pos:end="177:51"><name pos:start="177:45" pos:end="177:46">io</name><operator pos:start="177:47" pos:end="177:48">-&gt;</operator><name pos:start="177:49" pos:end="177:51">len</name></name> <operator pos:start="177:53" pos:end="177:53">-</operator> <name pos:start="177:55" pos:end="177:63">unaligned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="181:9" pos:end="207:9">switch <condition pos:start="181:16" pos:end="181:27">(<expr pos:start="181:17" pos:end="181:26"><name pos:start="181:17" pos:end="181:26"><name pos:start="181:17" pos:end="181:17">s</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:26">dma_cmd</name></name></expr>)</condition> <block pos:start="181:29" pos:end="207:9">{<block_content pos:start="183:9" pos:end="205:18">

        <case pos:start="183:9" pos:end="183:26">case <expr pos:start="183:14" pos:end="183:25"><name pos:start="183:14" pos:end="183:25">IDE_DMA_READ</name></expr>:</case>

            <expr_stmt pos:start="185:13" pos:end="185:69"><expr pos:start="185:13" pos:end="185:68"><call pos:start="185:13" pos:end="185:68"><name pos:start="185:13" pos:end="185:21">bdrv_read</name><argument_list pos:start="185:22" pos:end="185:68">(<argument pos:start="185:23" pos:end="185:27"><expr pos:start="185:23" pos:end="185:27"><name pos:start="185:23" pos:end="185:27"><name pos:start="185:23" pos:end="185:23">s</name><operator pos:start="185:24" pos:end="185:25">-&gt;</operator><name pos:start="185:26" pos:end="185:27">bs</name></name></expr></argument>, <argument pos:start="185:30" pos:end="185:49"><expr pos:start="185:30" pos:end="185:49"><name pos:start="185:30" pos:end="185:39">sector_num</name> <operator pos:start="185:41" pos:end="185:41">+</operator> <name pos:start="185:43" pos:end="185:49">nsector</name></expr></argument>, <argument pos:start="185:52" pos:end="185:64"><expr pos:start="185:52" pos:end="185:64"><name pos:start="185:52" pos:end="185:64"><name pos:start="185:52" pos:end="185:53">io</name><operator pos:start="185:54" pos:end="185:55">-&gt;</operator><name pos:start="185:56" pos:end="185:64">remainder</name></name></expr></argument>, <argument pos:start="185:67" pos:end="185:67"><expr pos:start="185:67" pos:end="185:67"><literal type="number" pos:start="185:67" pos:end="185:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="189:64"><expr pos:start="187:13" pos:end="189:63"><call pos:start="187:13" pos:end="189:63"><name pos:start="187:13" pos:end="187:37">cpu_physical_memory_write</name><argument_list pos:start="187:38" pos:end="189:63">(<argument pos:start="187:39" pos:end="187:68"><expr pos:start="187:39" pos:end="187:68"><name pos:start="187:39" pos:end="187:46"><name pos:start="187:39" pos:end="187:40">io</name><operator pos:start="187:41" pos:end="187:42">-&gt;</operator><name pos:start="187:43" pos:end="187:46">addr</name></name> <operator pos:start="187:48" pos:end="187:48">+</operator> <name pos:start="187:50" pos:end="187:56"><name pos:start="187:50" pos:end="187:51">io</name><operator pos:start="187:52" pos:end="187:53">-&gt;</operator><name pos:start="187:54" pos:end="187:56">len</name></name> <operator pos:start="187:58" pos:end="187:58">-</operator> <name pos:start="187:60" pos:end="187:68">unaligned</name></expr></argument>,

                                      <argument pos:start="189:39" pos:end="189:51"><expr pos:start="189:39" pos:end="189:51"><name pos:start="189:39" pos:end="189:51"><name pos:start="189:39" pos:end="189:40">io</name><operator pos:start="189:41" pos:end="189:42">-&gt;</operator><name pos:start="189:43" pos:end="189:51">remainder</name></name></expr></argument>, <argument pos:start="189:54" pos:end="189:62"><expr pos:start="189:54" pos:end="189:62"><name pos:start="189:54" pos:end="189:62">unaligned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="191:13" pos:end="191:18">break;</break>

        <case pos:start="193:9" pos:end="193:27">case <expr pos:start="193:14" pos:end="193:26"><name pos:start="193:14" pos:end="193:26">IDE_DMA_WRITE</name></expr>:</case>

            <comment type="block" pos:start="195:13" pos:end="195:53">/* cache the contents in our io struct */</comment>

            <expr_stmt pos:start="197:13" pos:end="199:63"><expr pos:start="197:13" pos:end="199:62"><call pos:start="197:13" pos:end="199:62"><name pos:start="197:13" pos:end="197:36">cpu_physical_memory_read</name><argument_list pos:start="197:37" pos:end="199:62">(<argument pos:start="197:38" pos:end="197:67"><expr pos:start="197:38" pos:end="197:67"><name pos:start="197:38" pos:end="197:45"><name pos:start="197:38" pos:end="197:39">io</name><operator pos:start="197:40" pos:end="197:41">-&gt;</operator><name pos:start="197:42" pos:end="197:45">addr</name></name> <operator pos:start="197:47" pos:end="197:47">+</operator> <name pos:start="197:49" pos:end="197:55"><name pos:start="197:49" pos:end="197:50">io</name><operator pos:start="197:51" pos:end="197:52">-&gt;</operator><name pos:start="197:53" pos:end="197:55">len</name></name> <operator pos:start="197:57" pos:end="197:57">-</operator> <name pos:start="197:59" pos:end="197:67">unaligned</name></expr></argument>,

                                     <argument pos:start="199:38" pos:end="199:50"><expr pos:start="199:38" pos:end="199:50"><name pos:start="199:38" pos:end="199:50"><name pos:start="199:38" pos:end="199:39">io</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:50">remainder</name></name></expr></argument>, <argument pos:start="199:53" pos:end="199:61"><expr pos:start="199:53" pos:end="199:61"><name pos:start="199:53" pos:end="199:61">unaligned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="201:13" pos:end="201:18">break;</break>

        <case pos:start="203:9" pos:end="203:26">case <expr pos:start="203:14" pos:end="203:25"><name pos:start="203:14" pos:end="203:25">IDE_DMA_TRIM</name></expr>:</case>

            <break pos:start="205:13" pos:end="205:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="211:9" pos:end="211:29"><expr pos:start="211:9" pos:end="211:28"><name pos:start="211:9" pos:end="211:15"><name pos:start="211:9" pos:end="211:10">io</name><operator pos:start="211:11" pos:end="211:12">-&gt;</operator><name pos:start="211:13" pos:end="211:15">len</name></name> <operator pos:start="211:17" pos:end="211:18">-=</operator> <name pos:start="211:20" pos:end="211:28">unaligned</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:46"><expr pos:start="217:5" pos:end="217:45"><call pos:start="217:5" pos:end="217:45"><name pos:start="217:5" pos:end="217:17">MACIO_DPRINTF</name><argument_list pos:start="217:18" pos:end="217:45">(<argument pos:start="217:19" pos:end="217:35"><expr pos:start="217:19" pos:end="217:35"><literal type="string" pos:start="217:19" pos:end="217:35">"io-&gt;len = %#x\n"</literal></expr></argument>, <argument pos:start="217:38" pos:end="217:44"><expr pos:start="217:38" pos:end="217:44"><name pos:start="217:38" pos:end="217:44"><name pos:start="217:38" pos:end="217:39">io</name><operator pos:start="217:40" pos:end="217:41">-&gt;</operator><name pos:start="217:42" pos:end="217:44">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="223:44"><expr pos:start="221:5" pos:end="223:43"><call pos:start="221:5" pos:end="223:43"><name pos:start="221:5" pos:end="221:20">qemu_sglist_init</name><argument_list pos:start="221:21" pos:end="223:43">(<argument pos:start="221:22" pos:end="221:27"><expr pos:start="221:22" pos:end="221:27"><operator pos:start="221:22" pos:end="221:22">&amp;</operator><name pos:start="221:23" pos:end="221:27"><name pos:start="221:23" pos:end="221:23">s</name><operator pos:start="221:24" pos:end="221:25">-&gt;</operator><name pos:start="221:26" pos:end="221:27">sg</name></name></expr></argument>, <argument pos:start="221:30" pos:end="221:38"><expr pos:start="221:30" pos:end="221:38"><call pos:start="221:30" pos:end="221:38"><name pos:start="221:30" pos:end="221:35">DEVICE</name><argument_list pos:start="221:36" pos:end="221:38">(<argument pos:start="221:37" pos:end="221:37"><expr pos:start="221:37" pos:end="221:37"><name pos:start="221:37" pos:end="221:37">m</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="221:41" pos:end="221:69"><expr pos:start="221:41" pos:end="221:69"><name pos:start="221:41" pos:end="221:47"><name pos:start="221:41" pos:end="221:42">io</name><operator pos:start="221:43" pos:end="221:44">-&gt;</operator><name pos:start="221:45" pos:end="221:47">len</name></name> <operator pos:start="221:49" pos:end="221:49">/</operator> <name pos:start="221:51" pos:end="221:65">MACIO_PAGE_SIZE</name> <operator pos:start="221:67" pos:end="221:67">+</operator> <literal type="number" pos:start="221:69" pos:end="221:69">1</literal></expr></argument>,

                     <argument pos:start="223:22" pos:end="223:42"><expr pos:start="223:22" pos:end="223:42"><operator pos:start="223:22" pos:end="223:22">&amp;</operator><name pos:start="223:23" pos:end="223:42">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:47"><expr pos:start="225:5" pos:end="225:46"><call pos:start="225:5" pos:end="225:46"><name pos:start="225:5" pos:end="225:19">qemu_sglist_add</name><argument_list pos:start="225:20" pos:end="225:46">(<argument pos:start="225:21" pos:end="225:26"><expr pos:start="225:21" pos:end="225:26"><operator pos:start="225:21" pos:end="225:21">&amp;</operator><name pos:start="225:22" pos:end="225:26"><name pos:start="225:22" pos:end="225:22">s</name><operator pos:start="225:23" pos:end="225:24">-&gt;</operator><name pos:start="225:25" pos:end="225:26">sg</name></name></expr></argument>, <argument pos:start="225:29" pos:end="225:36"><expr pos:start="225:29" pos:end="225:36"><name pos:start="225:29" pos:end="225:36"><name pos:start="225:29" pos:end="225:30">io</name><operator pos:start="225:31" pos:end="225:32">-&gt;</operator><name pos:start="225:33" pos:end="225:36">addr</name></name></expr></argument>, <argument pos:start="225:39" pos:end="225:45"><expr pos:start="225:39" pos:end="225:45"><name pos:start="225:39" pos:end="225:45"><name pos:start="225:39" pos:end="225:40">io</name><operator pos:start="225:41" pos:end="225:42">-&gt;</operator><name pos:start="225:43" pos:end="225:45">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:36"><expr pos:start="227:5" pos:end="227:35"><name pos:start="227:5" pos:end="227:12"><name pos:start="227:5" pos:end="227:6">io</name><operator pos:start="227:7" pos:end="227:8">-&gt;</operator><name pos:start="227:9" pos:end="227:12">addr</name></name> <operator pos:start="227:14" pos:end="227:15">+=</operator> <name pos:start="227:17" pos:end="227:23"><name pos:start="227:17" pos:end="227:18">io</name><operator pos:start="227:19" pos:end="227:20">-&gt;</operator><name pos:start="227:21" pos:end="227:23">len</name></name> <operator pos:start="227:25" pos:end="227:25">+</operator> <name pos:start="227:27" pos:end="227:35">unaligned</name></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:52"><expr pos:start="229:5" pos:end="229:51"><name pos:start="229:5" pos:end="229:21"><name pos:start="229:5" pos:end="229:6">io</name><operator pos:start="229:7" pos:end="229:8">-&gt;</operator><name pos:start="229:9" pos:end="229:21">remainder_len</name></name> <operator pos:start="229:23" pos:end="229:23">=</operator> <operator pos:start="229:25" pos:end="229:25">(</operator><literal type="number" pos:start="229:26" pos:end="229:32">0x200</literal> <operator pos:start="229:32" pos:end="229:32">-</operator> <name pos:start="229:34" pos:end="229:42">unaligned</name><operator pos:start="229:43" pos:end="229:43">)</operator> <operator pos:start="229:45" pos:end="229:45">&amp;</operator> <literal type="number" pos:start="229:47" pos:end="229:51">0x1ff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:63"><expr pos:start="231:5" pos:end="231:62"><call pos:start="231:5" pos:end="231:62"><name pos:start="231:5" pos:end="231:17">MACIO_DPRINTF</name><argument_list pos:start="231:18" pos:end="231:62">(<argument pos:start="231:19" pos:end="231:42"><expr pos:start="231:19" pos:end="231:42"><literal type="string" pos:start="231:19" pos:end="231:42">"set remainder to: %d\n"</literal></expr></argument>, <argument pos:start="231:45" pos:end="231:61"><expr pos:start="231:45" pos:end="231:61"><name pos:start="231:45" pos:end="231:61"><name pos:start="231:45" pos:end="231:46">io</name><operator pos:start="231:47" pos:end="231:48">-&gt;</operator><name pos:start="231:49" pos:end="231:61">remainder_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="235:5" pos:end="237:40">/* We would read no data from the block layer, thus not get a callback.

       Just fake completion manually. */</comment>

    <if_stmt pos:start="239:5" pos:end="245:5"><if pos:start="239:5" pos:end="245:5">if <condition pos:start="239:8" pos:end="239:17">(<expr pos:start="239:9" pos:end="239:16"><operator pos:start="239:9" pos:end="239:9">!</operator><name pos:start="239:10" pos:end="239:16"><name pos:start="239:10" pos:end="239:11">io</name><operator pos:start="239:12" pos:end="239:13">-&gt;</operator><name pos:start="239:14" pos:end="239:16">len</name></name></expr>)</condition> <block pos:start="239:19" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:15">

        <expr_stmt pos:start="241:9" pos:end="241:40"><expr pos:start="241:9" pos:end="241:39"><call pos:start="241:9" pos:end="241:39"><name pos:start="241:9" pos:end="241:28">pmac_ide_transfer_cb</name><argument_list pos:start="241:29" pos:end="241:39">(<argument pos:start="241:30" pos:end="241:35"><expr pos:start="241:30" pos:end="241:35"><name pos:start="241:30" pos:end="241:35">opaque</name></expr></argument>, <argument pos:start="241:38" pos:end="241:38"><expr pos:start="241:38" pos:end="241:38"><literal type="number" pos:start="241:38" pos:end="241:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="243:9" pos:end="243:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:16"><expr pos:start="249:5" pos:end="249:15"><name pos:start="249:5" pos:end="249:11"><name pos:start="249:5" pos:end="249:6">io</name><operator pos:start="249:7" pos:end="249:8">-&gt;</operator><name pos:start="249:9" pos:end="249:11">len</name></name> <operator pos:start="249:13" pos:end="249:13">=</operator> <literal type="number" pos:start="249:15" pos:end="249:15">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="255:57"><expr pos:start="253:5" pos:end="255:56"><call pos:start="253:5" pos:end="255:56"><name pos:start="253:5" pos:end="253:17">MACIO_DPRINTF</name><argument_list pos:start="253:18" pos:end="255:56">(<argument pos:start="253:19" pos:end="253:73"><expr pos:start="253:19" pos:end="253:73"><literal type="string" pos:start="253:19" pos:end="253:32">"sector_num=%"</literal> <name pos:start="253:34" pos:end="253:39">PRId64</name> <literal type="string" pos:start="253:41" pos:end="253:73">" n=%d, nsector=%d, cmd_cmd=%d\n"</literal></expr></argument>,

                  <argument pos:start="255:19" pos:end="255:28"><expr pos:start="255:19" pos:end="255:28"><name pos:start="255:19" pos:end="255:28">sector_num</name></expr></argument>, <argument pos:start="255:31" pos:end="255:31"><expr pos:start="255:31" pos:end="255:31"><name pos:start="255:31" pos:end="255:31">n</name></expr></argument>, <argument pos:start="255:34" pos:end="255:43"><expr pos:start="255:34" pos:end="255:43"><name pos:start="255:34" pos:end="255:43"><name pos:start="255:34" pos:end="255:34">s</name><operator pos:start="255:35" pos:end="255:36">-&gt;</operator><name pos:start="255:37" pos:end="255:43">nsector</name></name></expr></argument>, <argument pos:start="255:46" pos:end="255:55"><expr pos:start="255:46" pos:end="255:55"><name pos:start="255:46" pos:end="255:55"><name pos:start="255:46" pos:end="255:46">s</name><operator pos:start="255:47" pos:end="255:48">-&gt;</operator><name pos:start="255:49" pos:end="255:55">dma_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="259:5" pos:end="287:5">switch <condition pos:start="259:12" pos:end="259:23">(<expr pos:start="259:13" pos:end="259:22"><name pos:start="259:13" pos:end="259:22"><name pos:start="259:13" pos:end="259:13">s</name><operator pos:start="259:14" pos:end="259:15">-&gt;</operator><name pos:start="259:16" pos:end="259:22">dma_cmd</name></name></expr>)</condition> <block pos:start="259:25" pos:end="287:5">{<block_content pos:start="261:5" pos:end="285:14">

    <case pos:start="261:5" pos:end="261:22">case <expr pos:start="261:10" pos:end="261:21"><name pos:start="261:10" pos:end="261:21">IDE_DMA_READ</name></expr>:</case>

        <expr_stmt pos:start="263:9" pos:end="265:59"><expr pos:start="263:9" pos:end="265:58"><name pos:start="263:9" pos:end="263:16"><name pos:start="263:9" pos:end="263:9">m</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:16">aiocb</name></name> <operator pos:start="263:18" pos:end="263:18">=</operator> <call pos:start="263:20" pos:end="265:58"><name pos:start="263:20" pos:end="263:32">dma_bdrv_read</name><argument_list pos:start="263:33" pos:end="265:58">(<argument pos:start="263:34" pos:end="263:38"><expr pos:start="263:34" pos:end="263:38"><name pos:start="263:34" pos:end="263:38"><name pos:start="263:34" pos:end="263:34">s</name><operator pos:start="263:35" pos:end="263:36">-&gt;</operator><name pos:start="263:37" pos:end="263:38">bs</name></name></expr></argument>, <argument pos:start="263:41" pos:end="263:46"><expr pos:start="263:41" pos:end="263:46"><operator pos:start="263:41" pos:end="263:41">&amp;</operator><name pos:start="263:42" pos:end="263:46"><name pos:start="263:42" pos:end="263:42">s</name><operator pos:start="263:43" pos:end="263:44">-&gt;</operator><name pos:start="263:45" pos:end="263:46">sg</name></name></expr></argument>, <argument pos:start="263:49" pos:end="263:58"><expr pos:start="263:49" pos:end="263:58"><name pos:start="263:49" pos:end="263:58">sector_num</name></expr></argument>,

                                 <argument pos:start="265:34" pos:end="265:53"><expr pos:start="265:34" pos:end="265:53"><name pos:start="265:34" pos:end="265:53">pmac_ide_transfer_cb</name></expr></argument>, <argument pos:start="265:56" pos:end="265:57"><expr pos:start="265:56" pos:end="265:57"><name pos:start="265:56" pos:end="265:57">io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="267:9" pos:end="267:14">break;</break>

    <case pos:start="269:5" pos:end="269:23">case <expr pos:start="269:10" pos:end="269:22"><name pos:start="269:10" pos:end="269:22">IDE_DMA_WRITE</name></expr>:</case>

        <expr_stmt pos:start="271:9" pos:end="273:60"><expr pos:start="271:9" pos:end="273:59"><name pos:start="271:9" pos:end="271:16"><name pos:start="271:9" pos:end="271:9">m</name><operator pos:start="271:10" pos:end="271:11">-&gt;</operator><name pos:start="271:12" pos:end="271:16">aiocb</name></name> <operator pos:start="271:18" pos:end="271:18">=</operator> <call pos:start="271:20" pos:end="273:59"><name pos:start="271:20" pos:end="271:33">dma_bdrv_write</name><argument_list pos:start="271:34" pos:end="273:59">(<argument pos:start="271:35" pos:end="271:39"><expr pos:start="271:35" pos:end="271:39"><name pos:start="271:35" pos:end="271:39"><name pos:start="271:35" pos:end="271:35">s</name><operator pos:start="271:36" pos:end="271:37">-&gt;</operator><name pos:start="271:38" pos:end="271:39">bs</name></name></expr></argument>, <argument pos:start="271:42" pos:end="271:47"><expr pos:start="271:42" pos:end="271:47"><operator pos:start="271:42" pos:end="271:42">&amp;</operator><name pos:start="271:43" pos:end="271:47"><name pos:start="271:43" pos:end="271:43">s</name><operator pos:start="271:44" pos:end="271:45">-&gt;</operator><name pos:start="271:46" pos:end="271:47">sg</name></name></expr></argument>, <argument pos:start="271:50" pos:end="271:59"><expr pos:start="271:50" pos:end="271:59"><name pos:start="271:50" pos:end="271:59">sector_num</name></expr></argument>,

                                  <argument pos:start="273:35" pos:end="273:54"><expr pos:start="273:35" pos:end="273:54"><name pos:start="273:35" pos:end="273:54">pmac_ide_transfer_cb</name></expr></argument>, <argument pos:start="273:57" pos:end="273:58"><expr pos:start="273:57" pos:end="273:58"><name pos:start="273:57" pos:end="273:58">io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="275:9" pos:end="275:14">break;</break>

    <case pos:start="277:5" pos:end="277:22">case <expr pos:start="277:10" pos:end="277:21"><name pos:start="277:10" pos:end="277:21">IDE_DMA_TRIM</name></expr>:</case>

        <expr_stmt pos:start="279:9" pos:end="283:56"><expr pos:start="279:9" pos:end="283:55"><name pos:start="279:9" pos:end="279:16"><name pos:start="279:9" pos:end="279:9">m</name><operator pos:start="279:10" pos:end="279:11">-&gt;</operator><name pos:start="279:12" pos:end="279:16">aiocb</name></name> <operator pos:start="279:18" pos:end="279:18">=</operator> <call pos:start="279:20" pos:end="283:55"><name pos:start="279:20" pos:end="279:30">dma_bdrv_io</name><argument_list pos:start="279:31" pos:end="283:55">(<argument pos:start="279:32" pos:end="279:36"><expr pos:start="279:32" pos:end="279:36"><name pos:start="279:32" pos:end="279:36"><name pos:start="279:32" pos:end="279:32">s</name><operator pos:start="279:33" pos:end="279:34">-&gt;</operator><name pos:start="279:35" pos:end="279:36">bs</name></name></expr></argument>, <argument pos:start="279:39" pos:end="279:44"><expr pos:start="279:39" pos:end="279:44"><operator pos:start="279:39" pos:end="279:39">&amp;</operator><name pos:start="279:40" pos:end="279:44"><name pos:start="279:40" pos:end="279:40">s</name><operator pos:start="279:41" pos:end="279:42">-&gt;</operator><name pos:start="279:43" pos:end="279:44">sg</name></name></expr></argument>, <argument pos:start="279:47" pos:end="279:56"><expr pos:start="279:47" pos:end="279:56"><name pos:start="279:47" pos:end="279:56">sector_num</name></expr></argument>,

                               <argument pos:start="281:32" pos:end="281:45"><expr pos:start="281:32" pos:end="281:45"><name pos:start="281:32" pos:end="281:45">ide_issue_trim</name></expr></argument>, <argument pos:start="281:48" pos:end="281:67"><expr pos:start="281:48" pos:end="281:67"><name pos:start="281:48" pos:end="281:67">pmac_ide_transfer_cb</name></expr></argument>, <argument pos:start="281:70" pos:end="281:71"><expr pos:start="281:70" pos:end="281:71"><name pos:start="281:70" pos:end="281:71">io</name></expr></argument>,

                               <argument pos:start="283:32" pos:end="283:54"><expr pos:start="283:32" pos:end="283:54"><name pos:start="283:32" pos:end="283:54">DMA_DIRECTION_TO_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="285:9" pos:end="285:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="289:5" pos:end="289:11">return;</return>



<label pos:start="293:1" pos:end="293:5"><name pos:start="293:1" pos:end="293:4">done</name>:</label>

    <if_stmt pos:start="295:5" pos:end="299:5"><if pos:start="295:5" pos:end="299:5">if <condition pos:start="295:8" pos:end="295:66">(<expr pos:start="295:9" pos:end="295:65"><name pos:start="295:9" pos:end="295:18"><name pos:start="295:9" pos:end="295:9">s</name><operator pos:start="295:10" pos:end="295:11">-&gt;</operator><name pos:start="295:12" pos:end="295:18">dma_cmd</name></name> <operator pos:start="295:20" pos:end="295:21">==</operator> <name pos:start="295:23" pos:end="295:34">IDE_DMA_READ</name> <operator pos:start="295:36" pos:end="295:37">||</operator> <name pos:start="295:39" pos:end="295:48"><name pos:start="295:39" pos:end="295:39">s</name><operator pos:start="295:40" pos:end="295:41">-&gt;</operator><name pos:start="295:42" pos:end="295:48">dma_cmd</name></name> <operator pos:start="295:50" pos:end="295:51">==</operator> <name pos:start="295:53" pos:end="295:65">IDE_DMA_WRITE</name></expr>)</condition> <block pos:start="295:68" pos:end="299:5">{<block_content pos:start="297:9" pos:end="297:40">

        <expr_stmt pos:start="297:9" pos:end="297:40"><expr pos:start="297:9" pos:end="297:39"><call pos:start="297:9" pos:end="297:39"><name pos:start="297:9" pos:end="297:22">bdrv_acct_done</name><argument_list pos:start="297:23" pos:end="297:39">(<argument pos:start="297:24" pos:end="297:28"><expr pos:start="297:24" pos:end="297:28"><name pos:start="297:24" pos:end="297:28"><name pos:start="297:24" pos:end="297:24">s</name><operator pos:start="297:25" pos:end="297:26">-&gt;</operator><name pos:start="297:27" pos:end="297:28">bs</name></name></expr></argument>, <argument pos:start="297:31" pos:end="297:38"><expr pos:start="297:31" pos:end="297:38"><operator pos:start="297:31" pos:end="297:31">&amp;</operator><name pos:start="297:32" pos:end="297:38"><name pos:start="297:32" pos:end="297:32">s</name><operator pos:start="297:33" pos:end="297:34">-&gt;</operator><name pos:start="297:35" pos:end="297:38">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:20"><expr pos:start="301:5" pos:end="301:19"><call pos:start="301:5" pos:end="301:19"><name pos:start="301:5" pos:end="301:15"><name pos:start="301:5" pos:end="301:6">io</name><operator pos:start="301:7" pos:end="301:8">-&gt;</operator><name pos:start="301:9" pos:end="301:15">dma_end</name></name><argument_list pos:start="301:16" pos:end="301:19">(<argument pos:start="301:17" pos:end="301:18"><expr pos:start="301:17" pos:end="301:18"><name pos:start="301:17" pos:end="301:18">io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
