<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24387.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">usb_host_handle_iso_data</name><parameter_list pos:start="1:36" pos:end="1:75">(<parameter pos:start="1:37" pos:end="1:52"><decl pos:start="1:37" pos:end="1:52"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:49">USBHostDevice</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:63">USBPacket</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:66">p</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:74"><decl pos:start="1:69" pos:end="1:74"><type pos:start="1:69" pos:end="1:74"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:74">in</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="199:1">{<block_content pos:start="5:5" pos:end="197:15">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AsyncURB</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">aurb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">j</name></decl>, <decl pos:start="7:15" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:17">ret</name></decl>, <decl pos:start="7:20" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:34">max_packet_size</name></decl>, <decl pos:start="7:37" pos:end="7:42"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:37" pos:end="7:42">offset</name></decl>, <decl pos:start="7:45" pos:end="7:51"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:45" pos:end="7:47">len</name> <init pos:start="7:49" pos:end="7:51">= <expr pos:start="7:51" pos:end="7:51"><literal type="number" pos:start="7:51" pos:end="7:51">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:55"><expr pos:start="11:5" pos:end="11:54"><name pos:start="11:5" pos:end="11:19">max_packet_size</name> <operator pos:start="11:21" pos:end="11:21">=</operator> <call pos:start="11:23" pos:end="11:54"><name pos:start="11:23" pos:end="11:41">get_max_packet_size</name><argument_list pos:start="11:42" pos:end="11:54">(<argument pos:start="11:43" pos:end="11:43"><expr pos:start="11:43" pos:end="11:43"><name pos:start="11:43" pos:end="11:43">s</name></expr></argument>, <argument pos:start="11:46" pos:end="11:53"><expr pos:start="11:46" pos:end="11:53"><name pos:start="11:46" pos:end="11:53"><name pos:start="11:46" pos:end="11:46">p</name><operator pos:start="11:47" pos:end="11:48">-&gt;</operator><name pos:start="11:49" pos:end="11:53">devep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="15:27"><if pos:start="13:5" pos:end="15:27">if <condition pos:start="13:8" pos:end="13:29">(<expr pos:start="13:9" pos:end="13:28"><name pos:start="13:9" pos:end="13:23">max_packet_size</name> <operator pos:start="13:25" pos:end="13:26">==</operator> <literal type="number" pos:start="13:28" pos:end="13:28">0</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:27"><block_content pos:start="15:9" pos:end="15:27">

        <return pos:start="15:9" pos:end="15:27">return <expr pos:start="15:16" pos:end="15:26"><name pos:start="15:16" pos:end="15:26">USB_RET_NAK</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:36"><expr pos:start="19:5" pos:end="19:35"><name pos:start="19:5" pos:end="19:8">aurb</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="19:35"><name pos:start="19:12" pos:end="19:22">get_iso_urb</name><argument_list pos:start="19:23" pos:end="19:35">(<argument pos:start="19:24" pos:end="19:24"><expr pos:start="19:24" pos:end="19:24"><name pos:start="19:24" pos:end="19:24">s</name></expr></argument>, <argument pos:start="19:27" pos:end="19:34"><expr pos:start="19:27" pos:end="19:34"><name pos:start="19:27" pos:end="19:34"><name pos:start="19:27" pos:end="19:27">p</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:34">devep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:13">aurb</name></expr>)</condition> <block pos:start="21:16" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:51">

        <expr_stmt pos:start="23:9" pos:end="23:51"><expr pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:12">aurb</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:50"><name pos:start="23:16" pos:end="23:33">usb_host_alloc_iso</name><argument_list pos:start="23:34" pos:end="23:50">(<argument pos:start="23:35" pos:end="23:35"><expr pos:start="23:35" pos:end="23:35"><name pos:start="23:35" pos:end="23:35">s</name></expr></argument>, <argument pos:start="23:38" pos:end="23:45"><expr pos:start="23:38" pos:end="23:45"><name pos:start="23:38" pos:end="23:45"><name pos:start="23:38" pos:end="23:38">p</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:45">devep</name></name></expr></argument>, <argument pos:start="23:48" pos:end="23:49"><expr pos:start="23:48" pos:end="23:49"><name pos:start="23:48" pos:end="23:49">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:5">i</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <call pos:start="29:9" pos:end="29:36"><name pos:start="29:9" pos:end="29:23">get_iso_urb_idx</name><argument_list pos:start="29:24" pos:end="29:36">(<argument pos:start="29:25" pos:end="29:25"><expr pos:start="29:25" pos:end="29:25"><name pos:start="29:25" pos:end="29:25">s</name></expr></argument>, <argument pos:start="29:28" pos:end="29:35"><expr pos:start="29:28" pos:end="29:35"><name pos:start="29:28" pos:end="29:35"><name pos:start="29:28" pos:end="29:28">p</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:35">devep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:5">j</name> <operator pos:start="31:7" pos:end="31:7">=</operator> <name pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">aurb</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><name pos:start="31:14" pos:end="31:14">i</name></expr>]</index></name><operator pos:start="31:16" pos:end="31:16">.</operator><name pos:start="31:17" pos:end="31:29">iso_frame_idx</name></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="143:5"><if pos:start="33:5" pos:end="131:5">if <condition pos:start="33:8" pos:end="33:45">(<expr pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:9">j</name> <operator pos:start="33:11" pos:end="33:12">&gt;=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal> <operator pos:start="33:16" pos:end="33:17">&amp;&amp;</operator> <name pos:start="33:19" pos:end="33:19">j</name> <operator pos:start="33:21" pos:end="33:21">&lt;</operator> <name pos:start="33:23" pos:end="33:44">ISO_FRAME_DESC_PER_URB</name></expr>)</condition> <block pos:start="33:47" pos:end="131:5">{<block_content pos:start="35:9" pos:end="129:9">

        <if_stmt pos:start="35:9" pos:end="119:9"><if pos:start="35:9" pos:end="79:9">if <condition pos:start="35:12" pos:end="35:15">(<expr pos:start="35:13" pos:end="35:14"><name pos:start="35:13" pos:end="35:14">in</name></expr>)</condition> <block pos:start="35:17" pos:end="79:9">{<block_content pos:start="39:13" pos:end="77:13">

            <comment type="block" pos:start="37:13" pos:end="37:35">/* Check urb status  */</comment>

            <if_stmt pos:start="39:13" pos:end="77:13"><if pos:start="39:13" pos:end="49:13">if <condition pos:start="39:16" pos:end="39:35">(<expr pos:start="39:17" pos:end="39:34"><name pos:start="39:17" pos:end="39:23"><name pos:start="39:17" pos:end="39:20">aurb</name><index pos:start="39:21" pos:end="39:23">[<expr pos:start="39:22" pos:end="39:22"><name pos:start="39:22" pos:end="39:22">i</name></expr>]</index></name><operator pos:start="39:24" pos:end="39:24">.</operator><name pos:start="39:25" pos:end="39:34"><name pos:start="39:25" pos:end="39:27">urb</name><operator pos:start="39:28" pos:end="39:28">.</operator><name pos:start="39:29" pos:end="39:34">status</name></name></expr>)</condition> <block pos:start="39:37" pos:end="49:13">{<block_content pos:start="41:17" pos:end="45:67">

                <expr_stmt pos:start="41:17" pos:end="41:64"><expr pos:start="41:17" pos:end="41:63"><name pos:start="41:17" pos:end="41:19">len</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:63"><name pos:start="41:23" pos:end="41:43">urb_status_to_usb_ret</name><argument_list pos:start="41:44" pos:end="41:63">(<argument pos:start="41:45" pos:end="41:62"><expr pos:start="41:45" pos:end="41:62"><name pos:start="41:45" pos:end="41:51"><name pos:start="41:45" pos:end="41:48">aurb</name><index pos:start="41:49" pos:end="41:51">[<expr pos:start="41:50" pos:end="41:50"><name pos:start="41:50" pos:end="41:50">i</name></expr>]</index></name><operator pos:start="41:52" pos:end="41:52">.</operator><name pos:start="41:53" pos:end="41:62"><name pos:start="41:53" pos:end="41:55">urb</name><operator pos:start="41:56" pos:end="41:56">.</operator><name pos:start="41:57" pos:end="41:62">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="43:17" pos:end="43:42">/* Move to the next urb */</comment>

                <expr_stmt pos:start="45:17" pos:end="45:67"><expr pos:start="45:17" pos:end="45:66"><name pos:start="45:17" pos:end="45:23"><name pos:start="45:17" pos:end="45:20">aurb</name><index pos:start="45:21" pos:end="45:23">[<expr pos:start="45:22" pos:end="45:22"><name pos:start="45:22" pos:end="45:22">i</name></expr>]</index></name><operator pos:start="45:24" pos:end="45:24">.</operator><name pos:start="45:25" pos:end="45:37">iso_frame_idx</name> <operator pos:start="45:39" pos:end="45:39">=</operator> <name pos:start="45:41" pos:end="45:62">ISO_FRAME_DESC_PER_URB</name> <operator pos:start="45:64" pos:end="45:64">-</operator> <literal type="number" pos:start="45:66" pos:end="45:66">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="47:13" pos:end="47:36">/* Check frame status */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="49:15" pos:end="57:13">else if <condition pos:start="49:23" pos:end="49:60">(<expr pos:start="49:24" pos:end="49:59"><name pos:start="49:24" pos:end="49:30"><name pos:start="49:24" pos:end="49:27">aurb</name><index pos:start="49:28" pos:end="49:30">[<expr pos:start="49:29" pos:end="49:29"><name pos:start="49:29" pos:end="49:29">i</name></expr>]</index></name><operator pos:start="49:31" pos:end="49:31">.</operator><name pos:start="49:32" pos:end="49:52"><name pos:start="49:32" pos:end="49:34">urb</name><operator pos:start="49:35" pos:end="49:35">.</operator><name pos:start="49:36" pos:end="49:49">iso_frame_desc</name><index pos:start="49:50" pos:end="49:52">[<expr pos:start="49:51" pos:end="49:51"><name pos:start="49:51" pos:end="49:51">j</name></expr>]</index></name><operator pos:start="49:53" pos:end="49:53">.</operator><name pos:start="49:54" pos:end="49:59">status</name></expr>)</condition> <block pos:start="49:62" pos:end="57:13">{<block_content pos:start="51:17" pos:end="53:78">

                <expr_stmt pos:start="51:17" pos:end="53:78"><expr pos:start="51:17" pos:end="53:77"><name pos:start="51:17" pos:end="51:19">len</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="53:77"><name pos:start="51:23" pos:end="51:43">urb_status_to_usb_ret</name><argument_list pos:start="51:44" pos:end="53:77">(

                                        <argument pos:start="53:41" pos:end="53:76"><expr pos:start="53:41" pos:end="53:76"><name pos:start="53:41" pos:end="53:47"><name pos:start="53:41" pos:end="53:44">aurb</name><index pos:start="53:45" pos:end="53:47">[<expr pos:start="53:46" pos:end="53:46"><name pos:start="53:46" pos:end="53:46">i</name></expr>]</index></name><operator pos:start="53:48" pos:end="53:48">.</operator><name pos:start="53:49" pos:end="53:69"><name pos:start="53:49" pos:end="53:51">urb</name><operator pos:start="53:52" pos:end="53:52">.</operator><name pos:start="53:53" pos:end="53:66">iso_frame_desc</name><index pos:start="53:67" pos:end="53:69">[<expr pos:start="53:68" pos:end="53:68"><name pos:start="53:68" pos:end="53:68">j</name></expr>]</index></name><operator pos:start="53:70" pos:end="53:70">.</operator><name pos:start="53:71" pos:end="53:76">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="55:13" pos:end="55:38">/* Check the frame fits */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="57:15" pos:end="65:13">else if <condition pos:start="57:23" pos:end="57:76">(<expr pos:start="57:24" pos:end="57:75"><name pos:start="57:24" pos:end="57:30"><name pos:start="57:24" pos:end="57:27">aurb</name><index pos:start="57:28" pos:end="57:30">[<expr pos:start="57:29" pos:end="57:29"><name pos:start="57:29" pos:end="57:29">i</name></expr>]</index></name><operator pos:start="57:31" pos:end="57:31">.</operator><name pos:start="57:32" pos:end="57:52"><name pos:start="57:32" pos:end="57:34">urb</name><operator pos:start="57:35" pos:end="57:35">.</operator><name pos:start="57:36" pos:end="57:49">iso_frame_desc</name><index pos:start="57:50" pos:end="57:52">[<expr pos:start="57:51" pos:end="57:51"><name pos:start="57:51" pos:end="57:51">j</name></expr>]</index></name><operator pos:start="57:53" pos:end="57:53">.</operator><name pos:start="57:54" pos:end="57:66">actual_length</name> <operator pos:start="57:68" pos:end="57:68">&gt;</operator> <name pos:start="57:70" pos:end="57:75"><name pos:start="57:70" pos:end="57:70">p</name><operator pos:start="57:71" pos:end="57:72">-&gt;</operator><name pos:start="57:73" pos:end="57:75">len</name></name></expr>)</condition> <block pos:start="57:78" pos:end="65:13">{<block_content pos:start="59:17" pos:end="61:34">

                <expr_stmt pos:start="59:17" pos:end="59:74"><expr pos:start="59:17" pos:end="59:73"><call pos:start="59:17" pos:end="59:73"><name pos:start="59:17" pos:end="59:22">printf</name><argument_list pos:start="59:23" pos:end="59:73">(<argument pos:start="59:24" pos:end="59:72"><expr pos:start="59:24" pos:end="59:72"><literal type="string" pos:start="59:24" pos:end="59:72">"husb: received iso data is larger then packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:34"><expr pos:start="61:17" pos:end="61:33"><name pos:start="61:17" pos:end="61:19">len</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:33">USB_RET_NAK</name></expr>;</expr_stmt>

            <comment type="block" pos:start="63:13" pos:end="63:41">/* All good copy data over */</comment>

            </block_content>}</block></if> <else pos:start="65:15" pos:end="77:13">else <block pos:start="65:20" pos:end="77:13">{<block_content pos:start="67:17" pos:end="75:28">

                <expr_stmt pos:start="67:17" pos:end="67:66"><expr pos:start="67:17" pos:end="67:65"><name pos:start="67:17" pos:end="67:19">len</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:29"><name pos:start="67:23" pos:end="67:26">aurb</name><index pos:start="67:27" pos:end="67:29">[<expr pos:start="67:28" pos:end="67:28"><name pos:start="67:28" pos:end="67:28">i</name></expr>]</index></name><operator pos:start="67:30" pos:end="67:30">.</operator><name pos:start="67:31" pos:end="67:51"><name pos:start="67:31" pos:end="67:33">urb</name><operator pos:start="67:34" pos:end="67:34">.</operator><name pos:start="67:35" pos:end="67:48">iso_frame_desc</name><index pos:start="67:49" pos:end="67:51">[<expr pos:start="67:50" pos:end="67:50"><name pos:start="67:50" pos:end="67:50">j</name></expr>]</index></name><operator pos:start="67:52" pos:end="67:52">.</operator><name pos:start="67:53" pos:end="67:65">actual_length</name></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="75:28"><expr pos:start="69:17" pos:end="75:27"><call pos:start="69:17" pos:end="75:27"><name pos:start="69:17" pos:end="69:22">memcpy</name><argument_list pos:start="69:23" pos:end="75:27">(<argument pos:start="69:24" pos:end="69:30"><expr pos:start="69:24" pos:end="69:30"><name pos:start="69:24" pos:end="69:30"><name pos:start="69:24" pos:end="69:24">p</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:30">data</name></name></expr></argument>,

                       <argument pos:start="71:24" pos:end="73:67"><expr pos:start="71:24" pos:end="73:67"><name pos:start="71:24" pos:end="71:30"><name pos:start="71:24" pos:end="71:27">aurb</name><index pos:start="71:28" pos:end="71:30">[<expr pos:start="71:29" pos:end="71:29"><name pos:start="71:29" pos:end="71:29">i</name></expr>]</index></name><operator pos:start="71:31" pos:end="71:31">.</operator><name pos:start="71:32" pos:end="71:41"><name pos:start="71:32" pos:end="71:34">urb</name><operator pos:start="71:35" pos:end="71:35">.</operator><name pos:start="71:36" pos:end="71:41">buffer</name></name> <operator pos:start="71:43" pos:end="71:43">+</operator>

                           <name pos:start="73:28" pos:end="73:28">j</name> <operator pos:start="73:30" pos:end="73:30">*</operator> <name pos:start="73:32" pos:end="73:38"><name pos:start="73:32" pos:end="73:35">aurb</name><index pos:start="73:36" pos:end="73:38">[<expr pos:start="73:37" pos:end="73:37"><name pos:start="73:37" pos:end="73:37">i</name></expr>]</index></name><operator pos:start="73:39" pos:end="73:39">.</operator><name pos:start="73:40" pos:end="73:60"><name pos:start="73:40" pos:end="73:42">urb</name><operator pos:start="73:43" pos:end="73:43">.</operator><name pos:start="73:44" pos:end="73:57">iso_frame_desc</name><index pos:start="73:58" pos:end="73:60">[<expr pos:start="73:59" pos:end="73:59"><literal type="number" pos:start="73:59" pos:end="73:59">0</literal></expr>]</index></name><operator pos:start="73:61" pos:end="73:61">.</operator><name pos:start="73:62" pos:end="73:67">length</name></expr></argument>,

                       <argument pos:start="75:24" pos:end="75:26"><expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:26">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="119:9">else <block pos:start="79:16" pos:end="119:9">{<block_content pos:start="81:13" pos:end="117:13">

            <expr_stmt pos:start="81:13" pos:end="81:25"><expr pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:15">len</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:24"><name pos:start="81:19" pos:end="81:19">p</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:24">len</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:69"><expr pos:start="83:13" pos:end="83:68"><name pos:start="83:13" pos:end="83:18">offset</name> <operator pos:start="83:20" pos:end="83:20">=</operator> <ternary pos:start="83:22" pos:end="83:68"><condition pos:start="83:22" pos:end="83:31"><expr pos:start="83:22" pos:end="83:29"><operator pos:start="83:22" pos:end="83:22">(</operator><name pos:start="83:23" pos:end="83:23">j</name> <operator pos:start="83:25" pos:end="83:26">==</operator> <literal type="number" pos:start="83:28" pos:end="83:28">0</literal><operator pos:start="83:29" pos:end="83:29">)</operator></expr> ?</condition><then pos:start="83:33" pos:end="83:33"> <expr pos:start="83:33" pos:end="83:33"><literal type="number" pos:start="83:33" pos:end="83:33">0</literal></expr> </then><else pos:start="83:35" pos:end="83:68">: <expr pos:start="83:37" pos:end="83:68"><call pos:start="83:37" pos:end="83:68"><name pos:start="83:37" pos:end="83:55">get_iso_buffer_used</name><argument_list pos:start="83:56" pos:end="83:68">(<argument pos:start="83:57" pos:end="83:57"><expr pos:start="83:57" pos:end="83:57"><name pos:start="83:57" pos:end="83:57">s</name></expr></argument>, <argument pos:start="83:60" pos:end="83:67"><expr pos:start="83:60" pos:end="83:67"><name pos:start="83:60" pos:end="83:67"><name pos:start="83:60" pos:end="83:60">p</name><operator pos:start="83:61" pos:end="83:62">-&gt;</operator><name pos:start="83:63" pos:end="83:67">devep</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>



            <comment type="block" pos:start="87:13" pos:end="87:38">/* Check the frame fits */</comment>

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="89:38">(<expr pos:start="89:17" pos:end="89:37"><name pos:start="89:17" pos:end="89:19">len</name> <operator pos:start="89:21" pos:end="89:21">&gt;</operator> <name pos:start="89:23" pos:end="89:37">max_packet_size</name></expr>)</condition> <block pos:start="89:40" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:35">

                <expr_stmt pos:start="91:17" pos:end="91:79"><expr pos:start="91:17" pos:end="91:78"><call pos:start="91:17" pos:end="91:78"><name pos:start="91:17" pos:end="91:22">printf</name><argument_list pos:start="91:23" pos:end="91:78">(<argument pos:start="91:24" pos:end="91:77"><expr pos:start="91:24" pos:end="91:77"><literal type="string" pos:start="91:24" pos:end="91:77">"husb: send iso data is larger then max packet size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="93:17" pos:end="93:35">return <expr pos:start="93:24" pos:end="93:34"><name pos:start="93:24" pos:end="93:34">USB_RET_NAK</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="99:13" pos:end="99:41">/* All good copy data over */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:62"><expr pos:start="101:13" pos:end="101:61"><call pos:start="101:13" pos:end="101:61"><name pos:start="101:13" pos:end="101:18">memcpy</name><argument_list pos:start="101:19" pos:end="101:61">(<argument pos:start="101:20" pos:end="101:46"><expr pos:start="101:20" pos:end="101:46"><name pos:start="101:20" pos:end="101:26"><name pos:start="101:20" pos:end="101:23">aurb</name><index pos:start="101:24" pos:end="101:26">[<expr pos:start="101:25" pos:end="101:25"><name pos:start="101:25" pos:end="101:25">i</name></expr>]</index></name><operator pos:start="101:27" pos:end="101:27">.</operator><name pos:start="101:28" pos:end="101:37"><name pos:start="101:28" pos:end="101:30">urb</name><operator pos:start="101:31" pos:end="101:31">.</operator><name pos:start="101:32" pos:end="101:37">buffer</name></name> <operator pos:start="101:39" pos:end="101:39">+</operator> <name pos:start="101:41" pos:end="101:46">offset</name></expr></argument>, <argument pos:start="101:49" pos:end="101:55"><expr pos:start="101:49" pos:end="101:55"><name pos:start="101:49" pos:end="101:55"><name pos:start="101:49" pos:end="101:49">p</name><operator pos:start="101:50" pos:end="101:51">-&gt;</operator><name pos:start="101:52" pos:end="101:55">data</name></name></expr></argument>, <argument pos:start="101:58" pos:end="101:60"><expr pos:start="101:58" pos:end="101:60"><name pos:start="101:58" pos:end="101:60">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:55"><expr pos:start="103:13" pos:end="103:54"><name pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:16">aurb</name><index pos:start="103:17" pos:end="103:19">[<expr pos:start="103:18" pos:end="103:18"><name pos:start="103:18" pos:end="103:18">i</name></expr>]</index></name><operator pos:start="103:20" pos:end="103:20">.</operator><name pos:start="103:21" pos:end="103:41"><name pos:start="103:21" pos:end="103:23">urb</name><operator pos:start="103:24" pos:end="103:24">.</operator><name pos:start="103:25" pos:end="103:38">iso_frame_desc</name><index pos:start="103:39" pos:end="103:41">[<expr pos:start="103:40" pos:end="103:40"><name pos:start="103:40" pos:end="103:40">j</name></expr>]</index></name><operator pos:start="103:42" pos:end="103:42">.</operator><name pos:start="103:43" pos:end="103:48">length</name> <operator pos:start="103:50" pos:end="103:50">=</operator> <name pos:start="103:52" pos:end="103:54">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:26"><expr pos:start="105:13" pos:end="105:25"><name pos:start="105:13" pos:end="105:18">offset</name> <operator pos:start="105:20" pos:end="105:21">+=</operator> <name pos:start="105:23" pos:end="105:25">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:53"><expr pos:start="107:13" pos:end="107:52"><call pos:start="107:13" pos:end="107:52"><name pos:start="107:13" pos:end="107:31">set_iso_buffer_used</name><argument_list pos:start="107:32" pos:end="107:52">(<argument pos:start="107:33" pos:end="107:33"><expr pos:start="107:33" pos:end="107:33"><name pos:start="107:33" pos:end="107:33">s</name></expr></argument>, <argument pos:start="107:36" pos:end="107:43"><expr pos:start="107:36" pos:end="107:43"><name pos:start="107:36" pos:end="107:43"><name pos:start="107:36" pos:end="107:36">p</name><operator pos:start="107:37" pos:end="107:38">-&gt;</operator><name pos:start="107:39" pos:end="107:43">devep</name></name></expr></argument>, <argument pos:start="107:46" pos:end="107:51"><expr pos:start="107:46" pos:end="107:51"><name pos:start="107:46" pos:end="107:51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="111:13" pos:end="111:68">/* Start the stream once we have buffered enough data */</comment>

            <if_stmt pos:start="113:13" pos:end="117:13"><if pos:start="113:13" pos:end="117:13">if <condition pos:start="113:16" pos:end="113:65">(<expr pos:start="113:17" pos:end="113:64"><operator pos:start="113:17" pos:end="113:17">!</operator><call pos:start="113:18" pos:end="113:44"><name pos:start="113:18" pos:end="113:31">is_iso_started</name><argument_list pos:start="113:32" pos:end="113:44">(<argument pos:start="113:33" pos:end="113:33"><expr pos:start="113:33" pos:end="113:33"><name pos:start="113:33" pos:end="113:33">s</name></expr></argument>, <argument pos:start="113:36" pos:end="113:43"><expr pos:start="113:36" pos:end="113:43"><name pos:start="113:36" pos:end="113:43"><name pos:start="113:36" pos:end="113:36">p</name><operator pos:start="113:37" pos:end="113:38">-&gt;</operator><name pos:start="113:39" pos:end="113:43">devep</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:46" pos:end="113:47">&amp;&amp;</operator> <name pos:start="113:49" pos:end="113:49">i</name> <operator pos:start="113:51" pos:end="113:52">==</operator> <literal type="number" pos:start="113:54" pos:end="113:54">1</literal> <operator pos:start="113:56" pos:end="113:57">&amp;&amp;</operator> <name pos:start="113:59" pos:end="113:59">j</name> <operator pos:start="113:61" pos:end="113:62">==</operator> <literal type="number" pos:start="113:64" pos:end="113:64">8</literal></expr>)</condition> <block pos:start="113:67" pos:end="117:13">{<block_content pos:start="115:17" pos:end="115:45">

                <expr_stmt pos:start="115:17" pos:end="115:45"><expr pos:start="115:17" pos:end="115:44"><call pos:start="115:17" pos:end="115:44"><name pos:start="115:17" pos:end="115:31">set_iso_started</name><argument_list pos:start="115:32" pos:end="115:44">(<argument pos:start="115:33" pos:end="115:33"><expr pos:start="115:33" pos:end="115:33"><name pos:start="115:33" pos:end="115:33">s</name></expr></argument>, <argument pos:start="115:36" pos:end="115:43"><expr pos:start="115:36" pos:end="115:43"><name pos:start="115:36" pos:end="115:43"><name pos:start="115:36" pos:end="115:36">p</name><operator pos:start="115:37" pos:end="115:38">-&gt;</operator><name pos:start="115:39" pos:end="115:43">devep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:32"><expr pos:start="121:9" pos:end="121:31"><name pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:12">aurb</name><index pos:start="121:13" pos:end="121:15">[<expr pos:start="121:14" pos:end="121:14"><name pos:start="121:14" pos:end="121:14">i</name></expr>]</index></name><operator pos:start="121:16" pos:end="121:16">.</operator><name pos:start="121:17" pos:end="121:29">iso_frame_idx</name><operator pos:start="121:30" pos:end="121:31">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="129:9"><if pos:start="123:9" pos:end="129:9">if <condition pos:start="123:12" pos:end="123:60">(<expr pos:start="123:13" pos:end="123:59"><name pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:16">aurb</name><index pos:start="123:17" pos:end="123:19">[<expr pos:start="123:18" pos:end="123:18"><name pos:start="123:18" pos:end="123:18">i</name></expr>]</index></name><operator pos:start="123:20" pos:end="123:20">.</operator><name pos:start="123:21" pos:end="123:33">iso_frame_idx</name> <operator pos:start="123:35" pos:end="123:36">==</operator> <name pos:start="123:38" pos:end="123:59">ISO_FRAME_DESC_PER_URB</name></expr>)</condition> <block pos:start="123:62" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:44">

            <expr_stmt pos:start="125:13" pos:end="125:43"><expr pos:start="125:13" pos:end="125:42"><name pos:start="125:13" pos:end="125:13">i</name> <operator pos:start="125:15" pos:end="125:15">=</operator> <operator pos:start="125:17" pos:end="125:17">(</operator><name pos:start="125:18" pos:end="125:18">i</name> <operator pos:start="125:20" pos:end="125:20">+</operator> <literal type="number" pos:start="125:22" pos:end="125:22">1</literal><operator pos:start="125:23" pos:end="125:23">)</operator> <operator pos:start="125:25" pos:end="125:25">%</operator> <name pos:start="125:27" pos:end="125:42"><name pos:start="125:27" pos:end="125:27">s</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:42">iso_urb_count</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:44"><expr pos:start="127:13" pos:end="127:43"><call pos:start="127:13" pos:end="127:43"><name pos:start="127:13" pos:end="127:27">set_iso_urb_idx</name><argument_list pos:start="127:28" pos:end="127:43">(<argument pos:start="127:29" pos:end="127:29"><expr pos:start="127:29" pos:end="127:29"><name pos:start="127:29" pos:end="127:29">s</name></expr></argument>, <argument pos:start="127:32" pos:end="127:39"><expr pos:start="127:32" pos:end="127:39"><name pos:start="127:32" pos:end="127:39"><name pos:start="127:32" pos:end="127:32">p</name><operator pos:start="127:33" pos:end="127:34">-&gt;</operator><name pos:start="127:35" pos:end="127:39">devep</name></name></expr></argument>, <argument pos:start="127:42" pos:end="127:42"><expr pos:start="127:42" pos:end="127:42"><name pos:start="127:42" pos:end="127:42">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="143:5">else <block pos:start="131:12" pos:end="143:5">{<block_content pos:start="133:9" pos:end="141:9">

        <if_stmt pos:start="133:9" pos:end="141:9"><if pos:start="133:9" pos:end="137:9">if <condition pos:start="133:12" pos:end="133:15">(<expr pos:start="133:13" pos:end="133:14"><name pos:start="133:13" pos:end="133:14">in</name></expr>)</condition> <block pos:start="133:17" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:41">

            <expr_stmt pos:start="135:13" pos:end="135:41"><expr pos:start="135:13" pos:end="135:40"><call pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:27">set_iso_started</name><argument_list pos:start="135:28" pos:end="135:40">(<argument pos:start="135:29" pos:end="135:29"><expr pos:start="135:29" pos:end="135:29"><name pos:start="135:29" pos:end="135:29">s</name></expr></argument>, <argument pos:start="135:32" pos:end="135:39"><expr pos:start="135:32" pos:end="135:39"><name pos:start="135:32" pos:end="135:39"><name pos:start="135:32" pos:end="135:32">p</name><operator pos:start="135:33" pos:end="135:34">-&gt;</operator><name pos:start="135:35" pos:end="135:39">devep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="137:11" pos:end="141:9">else <block pos:start="137:16" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:77">

            <expr_stmt pos:start="139:13" pos:end="139:77"><expr pos:start="139:13" pos:end="139:76"><call pos:start="139:13" pos:end="139:76"><name pos:start="139:13" pos:end="139:19">DPRINTF</name><argument_list pos:start="139:20" pos:end="139:76">(<argument pos:start="139:21" pos:end="139:75"><expr pos:start="139:21" pos:end="139:75"><literal type="string" pos:start="139:21" pos:end="139:75">"hubs: iso out error no free buffer, dropping packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="147:5" pos:end="193:5"><if pos:start="147:5" pos:end="193:5">if <condition pos:start="147:8" pos:end="147:36">(<expr pos:start="147:9" pos:end="147:35"><call pos:start="147:9" pos:end="147:35"><name pos:start="147:9" pos:end="147:22">is_iso_started</name><argument_list pos:start="147:23" pos:end="147:35">(<argument pos:start="147:24" pos:end="147:24"><expr pos:start="147:24" pos:end="147:24"><name pos:start="147:24" pos:end="147:24">s</name></expr></argument>, <argument pos:start="147:27" pos:end="147:34"><expr pos:start="147:27" pos:end="147:34"><name pos:start="147:27" pos:end="147:34"><name pos:start="147:27" pos:end="147:27">p</name><operator pos:start="147:28" pos:end="147:29">-&gt;</operator><name pos:start="147:30" pos:end="147:34">devep</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:38" pos:end="193:5">{<block_content pos:start="151:9" pos:end="191:9">

        <comment type="block" pos:start="149:9" pos:end="149:58">/* (Re)-submit all fully consumed / filled urbs */</comment>

        <for pos:start="151:9" pos:end="191:9">for <control pos:start="151:13" pos:end="151:46">(<init pos:start="151:14" pos:end="151:19"><expr pos:start="151:14" pos:end="151:18"><name pos:start="151:14" pos:end="151:14">i</name> <operator pos:start="151:16" pos:end="151:16">=</operator> <literal type="number" pos:start="151:18" pos:end="151:18">0</literal></expr>;</init> <condition pos:start="151:21" pos:end="151:41"><expr pos:start="151:21" pos:end="151:40"><name pos:start="151:21" pos:end="151:21">i</name> <operator pos:start="151:23" pos:end="151:23">&lt;</operator> <name pos:start="151:25" pos:end="151:40"><name pos:start="151:25" pos:end="151:25">s</name><operator pos:start="151:26" pos:end="151:27">-&gt;</operator><name pos:start="151:28" pos:end="151:40">iso_urb_count</name></name></expr>;</condition> <incr pos:start="151:43" pos:end="151:45"><expr pos:start="151:43" pos:end="151:45"><name pos:start="151:43" pos:end="151:43">i</name><operator pos:start="151:44" pos:end="151:45">++</operator></expr></incr>)</control> <block pos:start="151:48" pos:end="191:9">{<block_content pos:start="153:13" pos:end="189:13">

            <if_stmt pos:start="153:13" pos:end="189:13"><if pos:start="153:13" pos:end="189:13">if <condition pos:start="153:16" pos:end="153:64">(<expr pos:start="153:17" pos:end="153:63"><name pos:start="153:17" pos:end="153:23"><name pos:start="153:17" pos:end="153:20">aurb</name><index pos:start="153:21" pos:end="153:23">[<expr pos:start="153:22" pos:end="153:22"><name pos:start="153:22" pos:end="153:22">i</name></expr>]</index></name><operator pos:start="153:24" pos:end="153:24">.</operator><name pos:start="153:25" pos:end="153:37">iso_frame_idx</name> <operator pos:start="153:39" pos:end="153:40">==</operator> <name pos:start="153:42" pos:end="153:63">ISO_FRAME_DESC_PER_URB</name></expr>)</condition> <block pos:start="153:66" pos:end="189:13">{<block_content pos:start="155:17" pos:end="187:53">

                <expr_stmt pos:start="155:17" pos:end="155:65"><expr pos:start="155:17" pos:end="155:64"><name pos:start="155:17" pos:end="155:19">ret</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <call pos:start="155:23" pos:end="155:64"><name pos:start="155:23" pos:end="155:27">ioctl</name><argument_list pos:start="155:28" pos:end="155:64">(<argument pos:start="155:29" pos:end="155:33"><expr pos:start="155:29" pos:end="155:33"><name pos:start="155:29" pos:end="155:33"><name pos:start="155:29" pos:end="155:29">s</name><operator pos:start="155:30" pos:end="155:31">-&gt;</operator><name pos:start="155:32" pos:end="155:33">fd</name></name></expr></argument>, <argument pos:start="155:36" pos:end="155:53"><expr pos:start="155:36" pos:end="155:53"><name pos:start="155:36" pos:end="155:53">USBDEVFS_SUBMITURB</name></expr></argument>, <argument pos:start="155:56" pos:end="155:63"><expr pos:start="155:56" pos:end="155:63"><operator pos:start="155:56" pos:end="155:56">&amp;</operator><name pos:start="155:57" pos:end="155:63"><name pos:start="155:57" pos:end="155:60">aurb</name><index pos:start="155:61" pos:end="155:63">[<expr pos:start="155:62" pos:end="155:62"><name pos:start="155:62" pos:end="155:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="157:17" pos:end="183:17"><if pos:start="157:17" pos:end="183:17">if <condition pos:start="157:20" pos:end="157:28">(<expr pos:start="157:21" pos:end="157:27"><name pos:start="157:21" pos:end="157:23">ret</name> <operator pos:start="157:25" pos:end="157:25">&lt;</operator> <literal type="number" pos:start="157:27" pos:end="157:27">0</literal></expr>)</condition> <block pos:start="157:30" pos:end="183:17">{<block_content pos:start="159:21" pos:end="181:26">

                    <expr_stmt pos:start="159:21" pos:end="159:79"><expr pos:start="159:21" pos:end="159:78"><call pos:start="159:21" pos:end="159:78"><name pos:start="159:21" pos:end="159:26">printf</name><argument_list pos:start="159:27" pos:end="159:78">(<argument pos:start="159:28" pos:end="159:67"><expr pos:start="159:28" pos:end="159:67"><literal type="string" pos:start="159:28" pos:end="159:67">"husb error submitting iso urb %d: %d\n"</literal></expr></argument>, <argument pos:start="159:70" pos:end="159:70"><expr pos:start="159:70" pos:end="159:70"><name pos:start="159:70" pos:end="159:70">i</name></expr></argument>, <argument pos:start="159:73" pos:end="159:77"><expr pos:start="159:73" pos:end="159:77"><name pos:start="159:73" pos:end="159:77">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="161:21" pos:end="179:21"><if pos:start="161:21" pos:end="179:21">if <condition pos:start="161:24" pos:end="161:40">(<expr pos:start="161:25" pos:end="161:39"><operator pos:start="161:25" pos:end="161:25">!</operator><name pos:start="161:26" pos:end="161:27">in</name> <operator pos:start="161:29" pos:end="161:30">||</operator> <name pos:start="161:32" pos:end="161:34">len</name> <operator pos:start="161:36" pos:end="161:37">==</operator> <literal type="number" pos:start="161:39" pos:end="161:39">0</literal></expr>)</condition> <block pos:start="161:42" pos:end="179:21">{<block_content pos:start="163:25" pos:end="177:25">

                        <switch pos:start="163:25" pos:end="177:25">switch<condition pos:start="163:31" pos:end="163:37">(<expr pos:start="163:32" pos:end="163:36"><name pos:start="163:32" pos:end="163:36">errno</name></expr>)</condition> <block pos:start="163:39" pos:end="177:25">{<block_content pos:start="165:25" pos:end="175:48">

                        <case pos:start="165:25" pos:end="165:39">case <expr pos:start="165:30" pos:end="165:38"><name pos:start="165:30" pos:end="165:38">ETIMEDOUT</name></expr>:</case>

                            <expr_stmt pos:start="167:29" pos:end="167:46"><expr pos:start="167:29" pos:end="167:45"><name pos:start="167:29" pos:end="167:31">len</name> <operator pos:start="167:33" pos:end="167:33">=</operator> <name pos:start="167:35" pos:end="167:45">USB_RET_NAK</name></expr>;</expr_stmt>

                            <break pos:start="169:29" pos:end="169:34">break;</break>

                        <case pos:start="171:25" pos:end="171:35">case <expr pos:start="171:30" pos:end="171:34"><name pos:start="171:30" pos:end="171:34">EPIPE</name></expr>:</case>

                        <default pos:start="173:25" pos:end="173:32">default:</default>

                            <expr_stmt pos:start="175:29" pos:end="175:48"><expr pos:start="175:29" pos:end="175:47"><name pos:start="175:29" pos:end="175:31">len</name> <operator pos:start="175:33" pos:end="175:33">=</operator> <name pos:start="175:35" pos:end="175:47">USB_RET_STALL</name></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="181:21" pos:end="181:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:43"><expr pos:start="185:17" pos:end="185:42"><name pos:start="185:17" pos:end="185:23"><name pos:start="185:17" pos:end="185:20">aurb</name><index pos:start="185:21" pos:end="185:23">[<expr pos:start="185:22" pos:end="185:22"><name pos:start="185:22" pos:end="185:22">i</name></expr>]</index></name><operator pos:start="185:24" pos:end="185:24">.</operator><name pos:start="185:25" pos:end="185:37">iso_frame_idx</name> <operator pos:start="185:39" pos:end="185:39">=</operator> <operator pos:start="185:41" pos:end="185:41">-</operator><literal type="number" pos:start="185:42" pos:end="185:42">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:53"><expr pos:start="187:17" pos:end="187:52"><call pos:start="187:17" pos:end="187:52"><name pos:start="187:17" pos:end="187:35">change_iso_inflight</name><argument_list pos:start="187:36" pos:end="187:52">(<argument pos:start="187:37" pos:end="187:37"><expr pos:start="187:37" pos:end="187:37"><name pos:start="187:37" pos:end="187:37">s</name></expr></argument>, <argument pos:start="187:40" pos:end="187:47"><expr pos:start="187:40" pos:end="187:47"><name pos:start="187:40" pos:end="187:47"><name pos:start="187:40" pos:end="187:40">p</name><operator pos:start="187:41" pos:end="187:42">-&gt;</operator><name pos:start="187:43" pos:end="187:47">devep</name></name></expr></argument>, <argument pos:start="187:50" pos:end="187:51"><expr pos:start="187:50" pos:end="187:51"><operator pos:start="187:50" pos:end="187:50">+</operator><literal type="number" pos:start="187:51" pos:end="187:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="197:5" pos:end="197:15">return <expr pos:start="197:12" pos:end="197:14"><name pos:start="197:12" pos:end="197:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
