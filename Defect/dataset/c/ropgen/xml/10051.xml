<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10051.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">nbd_client_session_init</name><parameter_list pos:start="1:28" pos:end="3:71">(<parameter pos:start="1:29" pos:end="1:52"><decl pos:start="1:29" pos:end="1:52"><type pos:start="1:29" pos:end="1:52"><name pos:start="1:29" pos:end="1:44">NbdClientSession</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:52">client</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:74"><decl pos:start="1:55" pos:end="1:74"><type pos:start="1:55" pos:end="1:74"><name pos:start="1:55" pos:end="1:70">BlockDriverState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:74">bs</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:36"><decl pos:start="3:29" pos:end="3:36"><type pos:start="3:29" pos:end="3:36"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:36">sock</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:56"><decl pos:start="3:39" pos:end="3:56"><type pos:start="3:39" pos:end="3:56"><specifier pos:start="3:39" pos:end="3:43">const</specifier> <name pos:start="3:45" pos:end="3:48">char</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:56">export</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:70"><decl pos:start="3:59" pos:end="3:70"><type pos:start="3:59" pos:end="3:70"><name pos:start="3:59" pos:end="3:63">Error</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier><modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:70">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:13">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:23">/* NBD handshake */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:40"><expr pos:start="13:5" pos:end="13:39"><call pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:10">logout</name><argument_list pos:start="13:11" pos:end="13:39">(<argument pos:start="13:12" pos:end="13:30"><expr pos:start="13:12" pos:end="13:30"><literal type="string" pos:start="13:12" pos:end="13:30">"session init %s\n"</literal></expr></argument>, <argument pos:start="13:33" pos:end="13:38"><expr pos:start="13:33" pos:end="13:38"><name pos:start="13:33" pos:end="13:38">export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><call pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:18">qemu_set_block</name><argument_list pos:start="15:19" pos:end="15:24">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="21:58"><expr pos:start="17:5" pos:end="21:57"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="21:57"><name pos:start="17:11" pos:end="17:31">nbd_receive_negotiate</name><argument_list pos:start="17:32" pos:end="21:57">(<argument pos:start="17:33" pos:end="17:36"><expr pos:start="17:33" pos:end="17:36"><name pos:start="17:33" pos:end="17:36">sock</name></expr></argument>, <argument pos:start="17:39" pos:end="17:44"><expr pos:start="17:39" pos:end="17:44"><name pos:start="17:39" pos:end="17:44">export</name></expr></argument>,

                                <argument pos:start="19:33" pos:end="19:49"><expr pos:start="19:33" pos:end="19:49"><operator pos:start="19:33" pos:end="19:33">&amp;</operator><name pos:start="19:34" pos:end="19:49"><name pos:start="19:34" pos:end="19:39">client</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:49">nbdflags</name></name></expr></argument>, <argument pos:start="19:52" pos:end="19:64"><expr pos:start="19:52" pos:end="19:64"><operator pos:start="19:52" pos:end="19:52">&amp;</operator><name pos:start="19:53" pos:end="19:64"><name pos:start="19:53" pos:end="19:58">client</name><operator pos:start="19:59" pos:end="19:60">-&gt;</operator><name pos:start="19:61" pos:end="19:64">size</name></name></expr></argument>,

                                <argument pos:start="21:33" pos:end="21:50"><expr pos:start="21:33" pos:end="21:50"><operator pos:start="21:33" pos:end="21:33">&amp;</operator><name pos:start="21:34" pos:end="21:50"><name pos:start="21:34" pos:end="21:39">client</name><operator pos:start="21:40" pos:end="21:41">-&gt;</operator><name pos:start="21:42" pos:end="21:50">blocksize</name></name></expr></argument>, <argument pos:start="21:53" pos:end="21:56"><expr pos:start="21:53" pos:end="21:56"><name pos:start="21:53" pos:end="21:56">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:19">

        <expr_stmt pos:start="25:9" pos:end="25:60"><expr pos:start="25:9" pos:end="25:59"><call pos:start="25:9" pos:end="25:59"><name pos:start="25:9" pos:end="25:14">logout</name><argument_list pos:start="25:15" pos:end="25:59">(<argument pos:start="25:16" pos:end="25:58"><expr pos:start="25:16" pos:end="25:58"><literal type="string" pos:start="25:16" pos:end="25:58">"Failed to negotiate with the NBD server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:26"><expr pos:start="27:9" pos:end="27:25"><call pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:19">closesocket</name><argument_list pos:start="27:20" pos:end="27:25">(<argument pos:start="27:21" pos:end="27:24"><expr pos:start="27:21" pos:end="27:24"><name pos:start="27:21" pos:end="27:24">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:44"><expr pos:start="35:5" pos:end="35:43"><call pos:start="35:5" pos:end="35:43"><name pos:start="35:5" pos:end="35:22">qemu_co_mutex_init</name><argument_list pos:start="35:23" pos:end="35:43">(<argument pos:start="35:24" pos:end="35:42"><expr pos:start="35:24" pos:end="35:42"><operator pos:start="35:24" pos:end="35:24">&amp;</operator><name pos:start="35:25" pos:end="35:42"><name pos:start="35:25" pos:end="35:30">client</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:42">send_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:43"><expr pos:start="37:5" pos:end="37:42"><call pos:start="37:5" pos:end="37:42"><name pos:start="37:5" pos:end="37:22">qemu_co_mutex_init</name><argument_list pos:start="37:23" pos:end="37:42">(<argument pos:start="37:24" pos:end="37:41"><expr pos:start="37:24" pos:end="37:41"><operator pos:start="37:24" pos:end="37:24">&amp;</operator><name pos:start="37:25" pos:end="37:41"><name pos:start="37:25" pos:end="37:30">client</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:41">free_sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:20"><expr pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:10">client</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:14">bs</name></name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:19">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:10">client</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:16">sock</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <name pos:start="41:20" pos:end="41:23">sock</name></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="47:36">/* Now that we're connected, set the socket to be non-blocking and

     * kick the reply mechanism.  */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:28"><expr pos:start="49:5" pos:end="49:27"><call pos:start="49:5" pos:end="49:27"><name pos:start="49:5" pos:end="49:21">qemu_set_nonblock</name><argument_list pos:start="49:22" pos:end="49:27">(<argument pos:start="49:23" pos:end="49:26"><expr pos:start="49:23" pos:end="49:26"><name pos:start="49:23" pos:end="49:26">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:76"><expr pos:start="51:5" pos:end="51:75"><call pos:start="51:5" pos:end="51:75"><name pos:start="51:5" pos:end="51:41">nbd_client_session_attach_aio_context</name><argument_list pos:start="51:42" pos:end="51:75">(<argument pos:start="51:43" pos:end="51:48"><expr pos:start="51:43" pos:end="51:48"><name pos:start="51:43" pos:end="51:48">client</name></expr></argument>, <argument pos:start="51:51" pos:end="51:74"><expr pos:start="51:51" pos:end="51:74"><call pos:start="51:51" pos:end="51:74"><name pos:start="51:51" pos:end="51:70">bdrv_get_aio_context</name><argument_list pos:start="51:71" pos:end="51:74">(<argument pos:start="51:72" pos:end="51:73"><expr pos:start="51:72" pos:end="51:73"><name pos:start="51:72" pos:end="51:73">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:55"><expr pos:start="55:5" pos:end="55:54"><call pos:start="55:5" pos:end="55:54"><name pos:start="55:5" pos:end="55:10">logout</name><argument_list pos:start="55:11" pos:end="55:54">(<argument pos:start="55:12" pos:end="55:53"><expr pos:start="55:12" pos:end="55:53"><literal type="string" pos:start="55:12" pos:end="55:53">"Established connection with NBD server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
