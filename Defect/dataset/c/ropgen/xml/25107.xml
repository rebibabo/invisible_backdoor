<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25107.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:38">hyscale_fast</name>)<parameter_list pos:start="1:40" pos:end="5:49">(<parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:50">SwsContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">c</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:62">int16_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">dst</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:53"><decl pos:start="3:41" pos:end="3:53"><type pos:start="3:41" pos:end="3:53"><name pos:start="3:41" pos:end="3:44">long</name></type> <name pos:start="3:46" pos:end="3:53">dstWidth</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:73"><decl pos:start="3:56" pos:end="3:73"><type pos:start="3:56" pos:end="3:73"><specifier pos:start="3:56" pos:end="3:60">const</specifier> <name pos:start="3:62" pos:end="3:68">uint8_t</name> <modifier pos:start="3:70" pos:end="3:70">*</modifier></type><name pos:start="3:71" pos:end="3:73">src</name></decl></parameter>, <parameter pos:start="3:76" pos:end="3:83"><decl pos:start="3:76" pos:end="3:83"><type pos:start="3:76" pos:end="3:83"><name pos:start="3:76" pos:end="3:78">int</name></type> <name pos:start="3:80" pos:end="3:83">srcW</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:48"><decl pos:start="5:41" pos:end="5:48"><type pos:start="5:41" pos:end="5:48"><name pos:start="5:41" pos:end="5:43">int</name></type> <name pos:start="5:45" pos:end="5:48">xInc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="243:1">{<block_content pos:start="13:5" pos:end="242:0">

<cpp:if pos:start="9:1" pos:end="9:12">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">ARCH_X86</name></expr></cpp:if>

<cpp:if pos:start="11:1" pos:end="11:25">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:25">COMPILE_TEMPLATE_MMX2</name></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int32_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:22">filterPos</name> <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:26">c</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:41">hLumFilterPos</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:19">filter</name>    <init pos:start="15:24" pos:end="15:38">= <expr pos:start="15:26" pos:end="15:38"><name pos:start="15:26" pos:end="15:38"><name pos:start="15:26" pos:end="15:26">c</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:38">hLumFilter</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:46"><decl pos:start="17:5" pos:end="17:45"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type>     <name pos:start="17:13" pos:end="17:25">canMMX2BeUsed</name>  <init pos:start="17:28" pos:end="17:45">= <expr pos:start="17:30" pos:end="17:45"><name pos:start="17:30" pos:end="17:45"><name pos:start="17:30" pos:end="17:30">c</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:45">canMMX2BeUsed</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:50"><decl pos:start="19:5" pos:end="19:49"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:8">void</name>    <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:27">mmx2FilterCode</name><init pos:start="19:28" pos:end="19:49">= <expr pos:start="19:30" pos:end="19:49"><name pos:start="19:30" pos:end="19:49"><name pos:start="19:30" pos:end="19:30">c</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:49">lumMmx2FilterCode</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

<cpp:if pos:start="23:1" pos:end="23:16">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:16"><call pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:11">defined</name><argument_list pos:start="23:12" pos:end="23:16">(<argument pos:start="23:13" pos:end="23:15"><expr pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:41"><call pos:start="25:5" pos:end="25:41"><name pos:start="25:5" pos:end="25:19">DECLARE_ALIGNED</name><argument_list pos:start="25:20" pos:end="25:41">(<argument pos:start="25:21" pos:end="25:21"><expr pos:start="25:21" pos:end="25:21"><literal type="number" pos:start="25:21" pos:end="25:21">8</literal></expr></argument>, <argument pos:start="25:24" pos:end="25:31"><expr pos:start="25:24" pos:end="25:31"><name pos:start="25:24" pos:end="25:31">uint64_t</name></expr></argument>, <argument pos:start="25:34" pos:end="25:40"><expr pos:start="25:34" pos:end="25:40"><name pos:start="25:34" pos:end="25:40">ebxsave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="29:5" pos:end="224:0"><if pos:start="29:5" pos:end="147:5">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:21">canMMX2BeUsed</name></expr>)</condition> <block pos:start="29:24" pos:end="147:5">{<block_content pos:start="31:9" pos:end="145:80">

        <asm pos:start="31:9" pos:end="143:10">__asm__ <specifier pos:start="31:17" pos:end="31:24">volatile</specifier>(

<cpp:if pos:start="33:1" pos:end="33:16">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:16"><call pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:11">defined</name><argument_list pos:start="33:12" pos:end="33:16">(<argument pos:start="33:13" pos:end="33:15"><expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov               %%"REG_b", %5        \n\t"

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

            "pxor                  %%mm7, %%mm7     \n\t"

            "mov                      %0, %%"REG_c" \n\t"

            "mov                      %1, %%"REG_D" \n\t"

            "mov                      %2, %%"REG_d" \n\t"

            "mov                      %3, %%"REG_b" \n\t"

            "xor               %%"REG_a", %%"REG_a" \n\t" <comment type="line" pos:start="49:59" pos:end="49:62">// i</comment>

            PREFETCH"        (%%"REG_c")            \n\t"

            PREFETCH"      32(%%"REG_c")            \n\t"

            PREFETCH"      64(%%"REG_c")            \n\t"



<cpp:if pos:start="59:1" pos:end="59:15">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:15">ARCH_X86_64</name></expr></cpp:if>



<cpp:define pos:start="63:1" pos:end="79:5">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:29">CALL_MMX2_FILTER_CODE</name></cpp:macro> \

            <cpp:value pos:start="65:13" pos:end="79:5">"movl            (%%"REG_b"), %%esi     \n\t"\

            "call                    *%4            \n\t"\

            "movl (%%"REG_b", %%"REG_a"), %%esi     \n\t"\

            "add               %%"REG_S", %%"REG_c" \n\t"\

            "add               %%"REG_a", %%"REG_D" \n\t"\

            "xor               %%"REG_a", %%"REG_a" \n\t"\



#else</cpp:value></cpp:define>



<cpp:define pos:start="83:1" pos:end="97:6">#<cpp:directive pos:start="83:2" pos:end="83:7">define</cpp:directive> <cpp:macro pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:29">CALL_MMX2_FILTER_CODE</name></cpp:macro> \

            <cpp:value pos:start="85:13" pos:end="97:6">"movl (%%"REG_b"), %%esi        \n\t"\

            "call         *%4                       \n\t"\

            "addl (%%"REG_b", %%"REG_a"), %%"REG_c" \n\t"\

            "add               %%"REG_a", %%"REG_D" \n\t"\

            "xor               %%"REG_a", %%"REG_a" \n\t"\



#endif</cpp:value></cpp:define> <comment type="block" pos:start="97:8" pos:end="97:24">/* ARCH_X86_64 */</comment>



            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE



<cpp:if pos:start="119:1" pos:end="119:16">#<cpp:directive pos:start="119:2" pos:end="119:3">if</cpp:directive> <expr pos:start="119:5" pos:end="119:16"><call pos:start="119:5" pos:end="119:16"><name pos:start="119:5" pos:end="119:11">defined</name><argument_list pos:start="119:12" pos:end="119:16">(<argument pos:start="119:13" pos:end="119:15"><expr pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov                      %5, %%"REG_b" \n\t"

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

            :: "m" (src), "m" (dst), "m" (filter), "m" (filterPos),

            "m" (mmx2FilterCode)

<cpp:if pos:start="129:1" pos:end="129:16">#<cpp:directive pos:start="129:2" pos:end="129:3">if</cpp:directive> <expr pos:start="129:5" pos:end="129:16"><call pos:start="129:5" pos:end="129:16"><name pos:start="129:5" pos:end="129:11">defined</name><argument_list pos:start="129:12" pos:end="129:16">(<argument pos:start="129:13" pos:end="129:15"><expr pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            ,"m" (ebxsave)

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

            : "%"REG_a, "%"REG_c, "%"REG_d, "%"REG_S, "%"REG_D

<cpp:if pos:start="137:1" pos:end="137:17">#<cpp:directive pos:start="137:2" pos:end="137:3">if</cpp:directive> <expr pos:start="137:5" pos:end="137:17"><operator pos:start="137:5" pos:end="137:5">!</operator><call pos:start="137:6" pos:end="137:17"><name pos:start="137:6" pos:end="137:12">defined</name><argument_list pos:start="137:13" pos:end="137:17">(<argument pos:start="137:14" pos:end="137:16"><expr pos:start="137:14" pos:end="137:16"><name pos:start="137:14" pos:end="137:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            ,"%"REG_b

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

        );</asm>

        <for pos:start="145:9" pos:end="145:80">for <control pos:start="145:13" pos:end="145:54">(<init pos:start="145:14" pos:end="145:26"><expr pos:start="145:14" pos:end="145:25"><name pos:start="145:14" pos:end="145:14">i</name><operator pos:start="145:15" pos:end="145:15">=</operator><name pos:start="145:16" pos:end="145:23">dstWidth</name><operator pos:start="145:24" pos:end="145:24">-</operator><literal type="number" pos:start="145:25" pos:end="145:25">1</literal></expr>;</init> <condition pos:start="145:28" pos:end="145:49"><expr pos:start="145:28" pos:end="145:48"><operator pos:start="145:28" pos:end="145:28">(</operator><name pos:start="145:29" pos:end="145:29">i</name><operator pos:start="145:30" pos:end="145:30">*</operator><name pos:start="145:31" pos:end="145:34">xInc</name><operator pos:start="145:35" pos:end="145:35">)</operator><operator pos:start="145:36" pos:end="145:37">&gt;&gt;</operator><literal type="number" pos:start="145:38" pos:end="145:39">16</literal> <operator pos:start="145:41" pos:end="145:42">&gt;=</operator><name pos:start="145:43" pos:end="145:46">srcW</name><operator pos:start="145:47" pos:end="145:47">-</operator><literal type="number" pos:start="145:48" pos:end="145:48">1</literal></expr>;</condition> <incr pos:start="145:51" pos:end="145:53"><expr pos:start="145:51" pos:end="145:53"><name pos:start="145:51" pos:end="145:51">i</name><operator pos:start="145:52" pos:end="145:53">--</operator></expr></incr>)</control><block type="pseudo" pos:start="145:56" pos:end="145:80"><block_content pos:start="145:56" pos:end="145:80"> <expr_stmt pos:start="145:56" pos:end="145:80"><expr pos:start="145:56" pos:end="145:79"><name pos:start="145:56" pos:end="145:61"><name pos:start="145:56" pos:end="145:58">dst</name><index pos:start="145:59" pos:end="145:61">[<expr pos:start="145:60" pos:end="145:60"><name pos:start="145:60" pos:end="145:60">i</name></expr>]</index></name> <operator pos:start="145:63" pos:end="145:63">=</operator> <name pos:start="145:65" pos:end="145:75"><name pos:start="145:65" pos:end="145:67">src</name><index pos:start="145:68" pos:end="145:75">[<expr pos:start="145:69" pos:end="145:74"><name pos:start="145:69" pos:end="145:72">srcW</name><operator pos:start="145:73" pos:end="145:73">-</operator><literal type="number" pos:start="145:74" pos:end="145:74">1</literal></expr>]</index></name><operator pos:start="145:76" pos:end="145:76">*</operator><literal type="number" pos:start="145:77" pos:end="145:79">128</literal></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <else pos:start="147:7" pos:end="224:0">else <block pos:start="147:12" pos:end="224:0">{<block_content pos:start="151:5" pos:end="218:0">

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="149:8" pos:end="149:34">/* COMPILE_TEMPLATE_MMX2 */</comment>

    <decl_stmt pos:start="151:5" pos:end="151:36"><decl pos:start="151:5" pos:end="151:35"><type pos:start="151:5" pos:end="151:11"><name pos:start="151:5" pos:end="151:11">x86_reg</name></type> <name pos:start="151:13" pos:end="151:22">xInc_shr16</name> <init pos:start="151:24" pos:end="151:35">= <expr pos:start="151:26" pos:end="151:35"><name pos:start="151:26" pos:end="151:29">xInc</name> <operator pos:start="151:31" pos:end="151:32">&gt;&gt;</operator> <literal type="number" pos:start="151:34" pos:end="151:35">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="153:5" pos:end="153:39"><decl pos:start="153:5" pos:end="153:38"><type pos:start="153:5" pos:end="153:12"><name pos:start="153:5" pos:end="153:12">uint16_t</name></type> <name pos:start="153:14" pos:end="153:22">xInc_mask</name> <init pos:start="153:24" pos:end="153:38">= <expr pos:start="153:26" pos:end="153:38"><name pos:start="153:26" pos:end="153:29">xInc</name> <operator pos:start="153:31" pos:end="153:31">&amp;</operator> <literal type="number" pos:start="153:33" pos:end="153:38">0xffff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="155:5" pos:end="155:36"><decl pos:start="155:5" pos:end="155:35"><type pos:start="155:5" pos:end="155:11"><name pos:start="155:5" pos:end="155:11">x86_reg</name></type> <name pos:start="155:13" pos:end="155:24">dstWidth_reg</name> <init pos:start="155:26" pos:end="155:35">= <expr pos:start="155:28" pos:end="155:35"><name pos:start="155:28" pos:end="155:35">dstWidth</name></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:start="157:5" pos:end="157:32">//NO MMX just normal asm ...</comment>

    <asm pos:start="159:5" pos:end="218:0">__asm__ <specifier pos:start="159:13" pos:end="159:20">volatile</specifier>(

        "xor %%"REG_a", %%"REG_a"            \n\t" <comment type="line" pos:start="161:52" pos:end="161:55">// i</comment>

        "xor %%"REG_d", %%"REG_d"            \n\t" <comment type="line" pos:start="163:52" pos:end="163:56">// xx</comment>

        "xorl    %%ecx, %%ecx                \n\t" <comment type="line" pos:start="165:52" pos:end="165:60">// xalpha</comment>

        ".p2align    4                       \n\t"

        "1:                                  \n\t"

        "movzbl    (%0, %%"REG_d"), %%edi    \n\t" <comment type="line" pos:start="171:52" pos:end="171:60">//src[xx]</comment>

        "movzbl   1(%0, %%"REG_d"), %%esi    \n\t" <comment type="line" pos:start="173:52" pos:end="173:62">//src[xx+1]</comment>

        FAST_BILINEAR_X86

        "movw     %%si, (%%"REG_D", %%"REG_a", 2)   \n\t"

        "addw       %4, %%cx                 \n\t" <comment type="line" pos:start="179:52" pos:end="179:74">//xalpha += xInc&amp;0xFFFF</comment>

        "adc        %3, %%"REG_d"            \n\t" <comment type="line" pos:start="181:52" pos:end="181:74">//xx+= xInc&gt;&gt;16 + carry</comment>



        "movzbl    (%0, %%"REG_d"), %%edi    \n\t" <comment type="line" pos:start="185:52" pos:end="185:60">//src[xx]</comment>

        "movzbl   1(%0, %%"REG_d"), %%esi    \n\t" <comment type="line" pos:start="187:52" pos:end="187:62">//src[xx+1]</comment>

        FAST_BILINEAR_X86

        "movw     %%si, 2(%%"REG_D", %%"REG_a", 2)  \n\t"

        "addw       %4, %%cx                 \n\t" <comment type="line" pos:start="193:52" pos:end="193:74">//xalpha += xInc&amp;0xFFFF</comment>

        "adc        %3, %%"REG_d"            \n\t" <comment type="line" pos:start="195:52" pos:end="195:74">//xx+= xInc&gt;&gt;16 + carry</comment>





        "add        $2, %%"REG_a"            \n\t"

        "cmp        %2, %%"REG_a"            \n\t"

        " jb        1b                       \n\t"





        :: "r" (src), "m" (dst), "m" (dstWidth_reg), "m" (xInc_shr16), "m" (xInc_mask)

        : "%"REG_a, "%"REG_d, "%ecx", "%"REG_D, "%esi"

    );</asm>

<cpp:if pos:start="217:1" pos:end="217:25">#<cpp:directive pos:start="217:2" pos:end="217:3">if</cpp:directive> <expr pos:start="217:5" pos:end="217:25"><name pos:start="217:5" pos:end="217:25">COMPILE_TEMPLATE_MMX2</name></expr></cpp:if>

    </block_content>}</block></else></if_stmt> <comment type="line" pos:start="219:7" pos:end="219:29">//if MMX2 can't be used</comment>

<cpp:endif pos:start="221:1" pos:end="221:6">#<cpp:directive pos:start="221:2" pos:end="221:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="223:1" pos:end="223:5">#<cpp:directive pos:start="223:2" pos:end="223:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="225:5" pos:end="225:10"><decl pos:start="225:5" pos:end="225:9"><type pos:start="225:5" pos:end="225:7"><name pos:start="225:5" pos:end="225:7">int</name></type> <name pos:start="225:9" pos:end="225:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="227:5" pos:end="227:24"><decl pos:start="227:5" pos:end="227:23"><type pos:start="227:5" pos:end="227:16"><name pos:start="227:5" pos:end="227:12">unsigned</name> <name pos:start="227:14" pos:end="227:16">int</name></type> <name pos:start="227:18" pos:end="227:21">xpos</name><init pos:start="227:22" pos:end="227:23">=<expr pos:start="227:23" pos:end="227:23"><literal type="number" pos:start="227:23" pos:end="227:23">0</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="229:5" pos:end="242:0">for <control pos:start="229:9" pos:end="229:28">(<init pos:start="229:10" pos:end="229:13"><expr pos:start="229:10" pos:end="229:12"><name pos:start="229:10" pos:end="229:10">i</name><operator pos:start="229:11" pos:end="229:11">=</operator><literal type="number" pos:start="229:12" pos:end="229:12">0</literal></expr>;</init><condition pos:start="229:14" pos:end="229:24"><expr pos:start="229:14" pos:end="229:23"><name pos:start="229:14" pos:end="229:14">i</name><operator pos:start="229:15" pos:end="229:15">&lt;</operator><name pos:start="229:16" pos:end="229:23">dstWidth</name></expr>;</condition><incr pos:start="229:25" pos:end="229:27"><expr pos:start="229:25" pos:end="229:27"><name pos:start="229:25" pos:end="229:25">i</name><operator pos:start="229:26" pos:end="229:27">++</operator></expr></incr>)</control> <block pos:start="229:30" pos:end="242:0">{<block_content pos:start="231:9" pos:end="237:19">

        <decl_stmt pos:start="231:9" pos:end="231:42"><decl pos:start="231:9" pos:end="231:41"><type pos:start="231:9" pos:end="231:29"><specifier pos:start="231:9" pos:end="231:16">register</specifier> <name pos:start="231:18" pos:end="231:25">unsigned</name> <name pos:start="231:27" pos:end="231:29">int</name></type> <name pos:start="231:31" pos:end="231:32">xx</name><init pos:start="231:33" pos:end="231:41">=<expr pos:start="231:34" pos:end="231:41"><name pos:start="231:34" pos:end="231:37">xpos</name><operator pos:start="231:38" pos:end="231:39">&gt;&gt;</operator><literal type="number" pos:start="231:40" pos:end="231:41">16</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="233:9" pos:end="233:54"><decl pos:start="233:9" pos:end="233:53"><type pos:start="233:9" pos:end="233:29"><specifier pos:start="233:9" pos:end="233:16">register</specifier> <name pos:start="233:18" pos:end="233:25">unsigned</name> <name pos:start="233:27" pos:end="233:29">int</name></type> <name pos:start="233:31" pos:end="233:36">xalpha</name><init pos:start="233:37" pos:end="233:53">=<expr pos:start="233:38" pos:end="233:53"><operator pos:start="233:38" pos:end="233:38">(</operator><name pos:start="233:39" pos:end="233:42">xpos</name><operator pos:start="233:43" pos:end="233:43">&amp;</operator><literal type="number" pos:start="233:44" pos:end="233:49">0xFFFF</literal><operator pos:start="233:50" pos:end="233:50">)</operator><operator pos:start="233:51" pos:end="233:52">&gt;&gt;</operator><literal type="number" pos:start="233:53" pos:end="233:53">9</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:60"><expr pos:start="235:9" pos:end="235:59"><name pos:start="235:9" pos:end="235:14"><name pos:start="235:9" pos:end="235:11">dst</name><index pos:start="235:12" pos:end="235:14">[<expr pos:start="235:13" pos:end="235:13"><name pos:start="235:13" pos:end="235:13">i</name></expr>]</index></name><operator pos:start="235:15" pos:end="235:15">=</operator> <operator pos:start="235:17" pos:end="235:17">(</operator><name pos:start="235:18" pos:end="235:24"><name pos:start="235:18" pos:end="235:20">src</name><index pos:start="235:21" pos:end="235:24">[<expr pos:start="235:22" pos:end="235:23"><name pos:start="235:22" pos:end="235:23">xx</name></expr>]</index></name><operator pos:start="235:25" pos:end="235:26">&lt;&lt;</operator><literal type="number" pos:start="235:27" pos:end="235:27">7</literal><operator pos:start="235:28" pos:end="235:28">)</operator> <operator pos:start="235:30" pos:end="235:30">+</operator> <operator pos:start="235:32" pos:end="235:32">(</operator><name pos:start="235:33" pos:end="235:41"><name pos:start="235:33" pos:end="235:35">src</name><index pos:start="235:36" pos:end="235:41">[<expr pos:start="235:37" pos:end="235:40"><name pos:start="235:37" pos:end="235:38">xx</name><operator pos:start="235:39" pos:end="235:39">+</operator><literal type="number" pos:start="235:40" pos:end="235:40">1</literal></expr>]</index></name> <operator pos:start="235:43" pos:end="235:43">-</operator> <name pos:start="235:45" pos:end="235:51"><name pos:start="235:45" pos:end="235:47">src</name><index pos:start="235:48" pos:end="235:51">[<expr pos:start="235:49" pos:end="235:50"><name pos:start="235:49" pos:end="235:50">xx</name></expr>]</index></name><operator pos:start="235:52" pos:end="235:52">)</operator><operator pos:start="235:53" pos:end="235:53">*</operator><name pos:start="235:54" pos:end="235:59">xalpha</name></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:19"><expr pos:start="237:9" pos:end="237:18"><name pos:start="237:9" pos:end="237:12">xpos</name><operator pos:start="237:13" pos:end="237:14">+=</operator><name pos:start="237:15" pos:end="237:18">xInc</name></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="241:1" pos:end="241:6">#<cpp:directive pos:start="241:2" pos:end="241:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="241:8" pos:end="241:21">/* ARCH_X86 */</comment>

</block_content>}</block></function>
</unit>
