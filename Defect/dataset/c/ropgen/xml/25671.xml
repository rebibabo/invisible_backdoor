<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25671.c" pos:tabs="8"><function pos:start="1:1" pos:end="781:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:29">initFilter</name><parameter_list pos:start="1:30" pos:end="11:65">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:37">int16_t</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier><modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:49">outFilter</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:70"><decl pos:start="1:52" pos:end="1:70"><type pos:start="1:52" pos:end="1:70"><name pos:start="1:52" pos:end="1:58">int32_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:70">filterPos</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:48">outFilterSize</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:58"><decl pos:start="3:51" pos:end="3:58"><type pos:start="3:51" pos:end="3:58"><name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:58">xInc</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:68"><decl pos:start="3:61" pos:end="3:68"><type pos:start="3:61" pos:end="3:68"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:68">srcW</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:38"><decl pos:start="5:31" pos:end="5:38"><type pos:start="5:31" pos:end="5:38"><name pos:start="5:31" pos:end="5:33">int</name></type> <name pos:start="5:35" pos:end="5:38">dstW</name></decl></parameter>, <parameter pos:start="5:41" pos:end="5:55"><decl pos:start="5:41" pos:end="5:55"><type pos:start="5:41" pos:end="5:55"><name pos:start="5:41" pos:end="5:43">int</name></type> <name pos:start="5:45" pos:end="5:55">filterAlign</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:64"><decl pos:start="5:58" pos:end="5:64"><type pos:start="5:58" pos:end="5:64"><name pos:start="5:58" pos:end="5:60">int</name></type> <name pos:start="5:62" pos:end="5:64">one</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:39"><decl pos:start="7:31" pos:end="7:39"><type pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:33">int</name></type> <name pos:start="7:35" pos:end="7:39">flags</name></decl></parameter>, <parameter pos:start="7:42" pos:end="7:54"><decl pos:start="7:42" pos:end="7:54"><type pos:start="7:42" pos:end="7:54"><name pos:start="7:42" pos:end="7:44">int</name></type> <name pos:start="7:46" pos:end="7:54">cpu_flags</name></decl></parameter>,

                              <parameter pos:start="9:31" pos:end="9:50"><decl pos:start="9:31" pos:end="9:50"><type pos:start="9:31" pos:end="9:50"><name pos:start="9:31" pos:end="9:39">SwsVector</name> <modifier pos:start="9:41" pos:end="9:41">*</modifier></type><name pos:start="9:42" pos:end="9:50">srcFilter</name></decl></parameter>, <parameter pos:start="9:53" pos:end="9:72"><decl pos:start="9:53" pos:end="9:72"><type pos:start="9:53" pos:end="9:72"><name pos:start="9:53" pos:end="9:61">SwsVector</name> <modifier pos:start="9:63" pos:end="9:63">*</modifier></type><name pos:start="9:64" pos:end="9:72">dstFilter</name></decl></parameter>,

                              <parameter pos:start="11:31" pos:end="11:45"><decl pos:start="11:31" pos:end="11:45"><type pos:start="11:31" pos:end="11:42"><name pos:start="11:31" pos:end="11:36">double</name></type> <name pos:start="11:38" pos:end="11:45"><name pos:start="11:38" pos:end="11:42">param</name><index pos:start="11:43" pos:end="11:45">[<expr pos:start="11:44" pos:end="11:44"><literal type="number" pos:start="11:44" pos:end="11:44">2</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="11:48" pos:end="11:64"><decl pos:start="11:48" pos:end="11:64"><type pos:start="11:48" pos:end="11:64"><name pos:start="11:48" pos:end="11:50">int</name></type> <name pos:start="11:52" pos:end="11:64">is_horizontal</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="781:1">{<block_content pos:start="15:5" pos:end="779:15">

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">filterSize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">filter2Size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:21">minFilterSize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">int64_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:19">filter</name>    <init pos:start="23:24" pos:end="23:29">= <expr pos:start="23:26" pos:end="23:29"><name pos:start="23:26" pos:end="23:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">int64_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:20">filter2</name>   <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:35"><decl pos:start="27:5" pos:end="27:34"><type pos:start="27:5" pos:end="27:17"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:17">int64_t</name></type> <name pos:start="27:19" pos:end="27:22">fone</name> <init pos:start="27:24" pos:end="27:34">= <expr pos:start="27:26" pos:end="27:34"><literal type="number" pos:start="27:26" pos:end="27:28">1LL</literal> <operator pos:start="27:30" pos:end="27:31">&lt;&lt;</operator> <literal type="number" pos:start="27:33" pos:end="27:34">54</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name>            <init pos:start="29:24" pos:end="29:27">= <expr pos:start="29:26" pos:end="29:27"><operator pos:start="29:26" pos:end="29:26">-</operator><literal type="number" pos:start="29:27" pos:end="29:27">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:13"><expr pos:start="33:5" pos:end="33:12"><call pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:10">emms_c</name><argument_list pos:start="33:11" pos:end="33:12">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="33:15" pos:end="33:80">// FIXME should not be required but IS (even for non-MMX versions)</comment>



    <comment type="line" pos:start="37:5" pos:end="37:80">// NOTE: the +3 is for the MMX(+1) / SSE(+3) scaler which reads over the end</comment>

    <expr_stmt pos:start="39:5" pos:end="39:79"><expr pos:start="39:5" pos:end="39:78"><call pos:start="39:5" pos:end="39:78"><name pos:start="39:5" pos:end="39:20">FF_ALLOC_OR_GOTO</name><argument_list pos:start="39:21" pos:end="39:78">(<argument pos:start="39:22" pos:end="39:25"><expr pos:start="39:22" pos:end="39:25"><name pos:start="39:22" pos:end="39:25">NULL</name></expr></argument>, <argument pos:start="39:28" pos:end="39:37"><expr pos:start="39:28" pos:end="39:37"><operator pos:start="39:28" pos:end="39:28">*</operator><name pos:start="39:29" pos:end="39:37">filterPos</name></expr></argument>, <argument pos:start="39:40" pos:end="39:71"><expr pos:start="39:40" pos:end="39:71"><operator pos:start="39:40" pos:end="39:40">(</operator><name pos:start="39:41" pos:end="39:44">dstW</name> <operator pos:start="39:46" pos:end="39:46">+</operator> <literal type="number" pos:start="39:48" pos:end="39:48">3</literal><operator pos:start="39:49" pos:end="39:49">)</operator> <operator pos:start="39:51" pos:end="39:51">*</operator> <sizeof pos:start="39:53" pos:end="39:71">sizeof<argument_list pos:start="39:59" pos:end="39:71">(<argument pos:start="39:60" pos:end="39:70"><expr pos:start="39:60" pos:end="39:70"><operator pos:start="39:60" pos:end="39:60">*</operator><operator pos:start="39:61" pos:end="39:61">*</operator><name pos:start="39:62" pos:end="39:70">filterPos</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:74" pos:end="39:77"><expr pos:start="39:74" pos:end="39:77"><name pos:start="39:74" pos:end="39:77">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="403:5"><if pos:start="43:5" pos:end="63:5">if <condition pos:start="43:8" pos:end="43:35">(<expr pos:start="43:9" pos:end="43:34"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:13">FFABS</name><argument_list pos:start="43:14" pos:end="43:29">(<argument pos:start="43:15" pos:end="43:28"><expr pos:start="43:15" pos:end="43:28"><name pos:start="43:15" pos:end="43:18">xInc</name> <operator pos:start="43:20" pos:end="43:20">-</operator> <literal type="number" pos:start="43:22" pos:end="43:28">0x10000</literal></expr></argument>)</argument_list></call> <operator pos:start="43:31" pos:end="43:31">&lt;</operator> <literal type="number" pos:start="43:33" pos:end="43:34">10</literal></expr>)</condition> <block pos:start="43:37" pos:end="63:5">{<block_content pos:start="45:9" pos:end="61:9"> <comment type="line" pos:start="43:39" pos:end="43:49">// unscaled</comment>

        <decl_stmt pos:start="45:9" pos:end="45:14"><decl pos:start="45:9" pos:end="45:13"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:18">filterSize</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:69"><expr pos:start="49:9" pos:end="51:68"><call pos:start="49:9" pos:end="51:68"><name pos:start="49:9" pos:end="49:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="49:26" pos:end="51:68">(<argument pos:start="49:27" pos:end="49:30"><expr pos:start="49:27" pos:end="49:30"><name pos:start="49:27" pos:end="49:30">NULL</name></expr></argument>, <argument pos:start="49:33" pos:end="49:38"><expr pos:start="49:33" pos:end="49:38"><name pos:start="49:33" pos:end="49:38">filter</name></expr></argument>,

                          <argument pos:start="51:27" pos:end="51:61"><expr pos:start="51:27" pos:end="51:61"><name pos:start="51:27" pos:end="51:30">dstW</name> <operator pos:start="51:32" pos:end="51:32">*</operator> <sizeof pos:start="51:34" pos:end="51:48">sizeof<argument_list pos:start="51:40" pos:end="51:48">(<argument pos:start="51:41" pos:end="51:47"><expr pos:start="51:41" pos:end="51:47"><operator pos:start="51:41" pos:end="51:41">*</operator><name pos:start="51:42" pos:end="51:47">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="51:50" pos:end="51:50">*</operator> <name pos:start="51:52" pos:end="51:61">filterSize</name></expr></argument>, <argument pos:start="51:64" pos:end="51:67"><expr pos:start="51:64" pos:end="51:67"><name pos:start="51:64" pos:end="51:67">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="55:9" pos:end="61:9">for <control pos:start="55:13" pos:end="55:34">(<init pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:14">i</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</init> <condition pos:start="55:21" pos:end="55:29"><expr pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:21">i</name> <operator pos:start="55:23" pos:end="55:23">&lt;</operator> <name pos:start="55:25" pos:end="55:28">dstW</name></expr>;</condition> <incr pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:31">i</name><operator pos:start="55:32" pos:end="55:33">++</operator></expr></incr>)</control> <block pos:start="55:36" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:39">

            <expr_stmt pos:start="57:13" pos:end="57:42"><expr pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:18">filter</name><index pos:start="57:19" pos:end="57:34">[<expr pos:start="57:20" pos:end="57:33"><name pos:start="57:20" pos:end="57:20">i</name> <operator pos:start="57:22" pos:end="57:22">*</operator> <name pos:start="57:24" pos:end="57:33">filterSize</name></expr>]</index></name> <operator pos:start="57:36" pos:end="57:36">=</operator> <name pos:start="57:38" pos:end="57:41">fone</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:39"><expr pos:start="59:13" pos:end="59:38"><operator pos:start="59:13" pos:end="59:13">(</operator><operator pos:start="59:14" pos:end="59:14">*</operator><name pos:start="59:15" pos:end="59:23">filterPos</name><operator pos:start="59:24" pos:end="59:24">)</operator><index pos:start="59:25" pos:end="59:27">[<expr pos:start="59:26" pos:end="59:26"><name pos:start="59:26" pos:end="59:26">i</name></expr>]</index>        <operator pos:start="59:36" pos:end="59:36">=</operator> <name pos:start="59:38" pos:end="59:38">i</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="63:7" pos:end="93:5">else if <condition pos:start="63:15" pos:end="63:33">(<expr pos:start="63:16" pos:end="63:32"><name pos:start="63:16" pos:end="63:20">flags</name> <operator pos:start="63:22" pos:end="63:22">&amp;</operator> <name pos:start="63:24" pos:end="63:32">SWS_POINT</name></expr>)</condition> <block pos:start="63:35" pos:end="93:5">{<block_content pos:start="65:9" pos:end="91:9"> <comment type="line" pos:start="63:37" pos:end="63:71">// lame looking point sampling mode</comment>

        <decl_stmt pos:start="65:9" pos:end="65:14"><decl pos:start="65:9" pos:end="65:13"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:22"><decl pos:start="67:9" pos:end="67:21"><type pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">int</name></type> <name pos:start="67:13" pos:end="67:21">xDstInSrc</name></decl>;</decl_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:18">filterSize</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="73:68"><expr pos:start="71:9" pos:end="73:67"><call pos:start="71:9" pos:end="73:67"><name pos:start="71:9" pos:end="71:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="71:25" pos:end="73:67">(<argument pos:start="71:26" pos:end="71:29"><expr pos:start="71:26" pos:end="71:29"><name pos:start="71:26" pos:end="71:29">NULL</name></expr></argument>, <argument pos:start="71:32" pos:end="71:37"><expr pos:start="71:32" pos:end="71:37"><name pos:start="71:32" pos:end="71:37">filter</name></expr></argument>,

                         <argument pos:start="73:26" pos:end="73:60"><expr pos:start="73:26" pos:end="73:60"><name pos:start="73:26" pos:end="73:29">dstW</name> <operator pos:start="73:31" pos:end="73:31">*</operator> <sizeof pos:start="73:33" pos:end="73:47">sizeof<argument_list pos:start="73:39" pos:end="73:47">(<argument pos:start="73:40" pos:end="73:46"><expr pos:start="73:40" pos:end="73:46"><operator pos:start="73:40" pos:end="73:40">*</operator><name pos:start="73:41" pos:end="73:46">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="73:49" pos:end="73:49">*</operator> <name pos:start="73:51" pos:end="73:60">filterSize</name></expr></argument>, <argument pos:start="73:63" pos:end="73:66"><expr pos:start="73:63" pos:end="73:66"><name pos:start="73:63" pos:end="73:66">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:38"><expr pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:17">xDstInSrc</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <name pos:start="77:21" pos:end="77:24">xInc</name> <operator pos:start="77:26" pos:end="77:26">/</operator> <literal type="number" pos:start="77:28" pos:end="77:30">2</literal> <operator pos:start="77:30" pos:end="77:30">-</operator> <literal type="number" pos:start="77:32" pos:end="77:37">0x8000</literal></expr>;</expr_stmt>

        <for pos:start="79:9" pos:end="91:9">for <control pos:start="79:13" pos:end="79:34">(<init pos:start="79:14" pos:end="79:19"><expr pos:start="79:14" pos:end="79:18"><name pos:start="79:14" pos:end="79:14">i</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <literal type="number" pos:start="79:18" pos:end="79:18">0</literal></expr>;</init> <condition pos:start="79:21" pos:end="79:29"><expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:21">i</name> <operator pos:start="79:23" pos:end="79:23">&lt;</operator> <name pos:start="79:25" pos:end="79:28">dstW</name></expr>;</condition> <incr pos:start="79:31" pos:end="79:33"><expr pos:start="79:31" pos:end="79:33"><name pos:start="79:31" pos:end="79:31">i</name><operator pos:start="79:32" pos:end="79:33">++</operator></expr></incr>)</control> <block pos:start="79:36" pos:end="91:9">{<block_content pos:start="81:13" pos:end="89:35">

            <decl_stmt pos:start="81:13" pos:end="81:78"><decl pos:start="81:13" pos:end="81:77"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:18">xx</name> <init pos:start="81:20" pos:end="81:77">= <expr pos:start="81:22" pos:end="81:77"><operator pos:start="81:22" pos:end="81:22">(</operator><name pos:start="81:23" pos:end="81:31">xDstInSrc</name> <operator pos:start="81:33" pos:end="81:33">-</operator> <operator pos:start="81:35" pos:end="81:35">(</operator><operator pos:start="81:36" pos:end="81:36">(</operator><name pos:start="81:37" pos:end="81:46">filterSize</name> <operator pos:start="81:48" pos:end="81:48">-</operator> <literal type="number" pos:start="81:50" pos:end="81:50">1</literal><operator pos:start="81:51" pos:end="81:51">)</operator> <operator pos:start="81:53" pos:end="81:54">&lt;&lt;</operator> <literal type="number" pos:start="81:56" pos:end="81:57">15</literal><operator pos:start="81:58" pos:end="81:58">)</operator> <operator pos:start="81:60" pos:end="81:60">+</operator> <operator pos:start="81:62" pos:end="81:62">(</operator><literal type="number" pos:start="81:63" pos:end="81:63">1</literal> <operator pos:start="81:65" pos:end="81:66">&lt;&lt;</operator> <literal type="number" pos:start="81:68" pos:end="81:69">15</literal><operator pos:start="81:70" pos:end="81:70">)</operator><operator pos:start="81:71" pos:end="81:71">)</operator> <operator pos:start="81:73" pos:end="81:74">&gt;&gt;</operator> <literal type="number" pos:start="81:76" pos:end="81:77">16</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:33"><expr pos:start="85:13" pos:end="85:32"><operator pos:start="85:13" pos:end="85:13">(</operator><operator pos:start="85:14" pos:end="85:14">*</operator><name pos:start="85:15" pos:end="85:23">filterPos</name><operator pos:start="85:24" pos:end="85:24">)</operator><index pos:start="85:25" pos:end="85:27">[<expr pos:start="85:26" pos:end="85:26"><name pos:start="85:26" pos:end="85:26">i</name></expr>]</index> <operator pos:start="85:29" pos:end="85:29">=</operator> <name pos:start="85:31" pos:end="85:32">xx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:18">filter</name><index pos:start="87:19" pos:end="87:21">[<expr pos:start="87:20" pos:end="87:20"><name pos:start="87:20" pos:end="87:20">i</name></expr>]</index></name>       <operator pos:start="87:29" pos:end="87:29">=</operator> <name pos:start="87:31" pos:end="87:34">fone</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:21">xDstInSrc</name>      <operator pos:start="89:28" pos:end="89:29">+=</operator> <name pos:start="89:31" pos:end="89:34">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="93:7" pos:end="143:5">else if <condition pos:start="93:15" pos:end="95:43">(<expr pos:start="93:16" pos:end="95:42"><operator pos:start="93:16" pos:end="93:16">(</operator><name pos:start="93:17" pos:end="93:20">xInc</name> <operator pos:start="93:22" pos:end="93:23">&lt;=</operator> <operator pos:start="93:25" pos:end="93:25">(</operator><literal type="number" pos:start="93:26" pos:end="93:26">1</literal> <operator pos:start="93:28" pos:end="93:29">&lt;&lt;</operator> <literal type="number" pos:start="93:31" pos:end="93:32">16</literal><operator pos:start="93:33" pos:end="93:33">)</operator> <operator pos:start="93:35" pos:end="93:36">&amp;&amp;</operator> <operator pos:start="93:38" pos:end="93:38">(</operator><name pos:start="93:39" pos:end="93:43">flags</name> <operator pos:start="93:45" pos:end="93:45">&amp;</operator> <name pos:start="93:47" pos:end="93:54">SWS_AREA</name><operator pos:start="93:55" pos:end="93:55">)</operator><operator pos:start="93:56" pos:end="93:56">)</operator> <operator pos:start="93:58" pos:end="93:59">||</operator>

               <operator pos:start="95:16" pos:end="95:16">(</operator><name pos:start="95:17" pos:end="95:21">flags</name> <operator pos:start="95:23" pos:end="95:23">&amp;</operator> <name pos:start="95:25" pos:end="95:41">SWS_FAST_BILINEAR</name><operator pos:start="95:42" pos:end="95:42">)</operator></expr>)</condition> <block pos:start="95:45" pos:end="143:5">{<block_content pos:start="97:9" pos:end="141:9"> <comment type="line" pos:start="95:47" pos:end="95:65">// bilinear upscale</comment>

        <decl_stmt pos:start="97:9" pos:end="97:14"><decl pos:start="97:9" pos:end="97:13"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="99:9" pos:end="99:22"><decl pos:start="99:9" pos:end="99:21"><type pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">int</name></type> <name pos:start="99:13" pos:end="99:21">xDstInSrc</name></decl>;</decl_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:23"><expr pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:18">filterSize</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="105:68"><expr pos:start="103:9" pos:end="105:67"><call pos:start="103:9" pos:end="105:67"><name pos:start="103:9" pos:end="103:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="103:25" pos:end="105:67">(<argument pos:start="103:26" pos:end="103:29"><expr pos:start="103:26" pos:end="103:29"><name pos:start="103:26" pos:end="103:29">NULL</name></expr></argument>, <argument pos:start="103:32" pos:end="103:37"><expr pos:start="103:32" pos:end="103:37"><name pos:start="103:32" pos:end="103:37">filter</name></expr></argument>,

                         <argument pos:start="105:26" pos:end="105:60"><expr pos:start="105:26" pos:end="105:60"><name pos:start="105:26" pos:end="105:29">dstW</name> <operator pos:start="105:31" pos:end="105:31">*</operator> <sizeof pos:start="105:33" pos:end="105:47">sizeof<argument_list pos:start="105:39" pos:end="105:47">(<argument pos:start="105:40" pos:end="105:46"><expr pos:start="105:40" pos:end="105:46"><operator pos:start="105:40" pos:end="105:40">*</operator><name pos:start="105:41" pos:end="105:46">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="105:49" pos:end="105:49">*</operator> <name pos:start="105:51" pos:end="105:60">filterSize</name></expr></argument>, <argument pos:start="105:63" pos:end="105:66"><expr pos:start="105:63" pos:end="105:66"><name pos:start="105:63" pos:end="105:66">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:38"><expr pos:start="109:9" pos:end="109:37"><name pos:start="109:9" pos:end="109:17">xDstInSrc</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:24">xInc</name> <operator pos:start="109:26" pos:end="109:26">/</operator> <literal type="number" pos:start="109:28" pos:end="109:30">2</literal> <operator pos:start="109:30" pos:end="109:30">-</operator> <literal type="number" pos:start="109:32" pos:end="109:37">0x8000</literal></expr>;</expr_stmt>

        <for pos:start="111:9" pos:end="141:9">for <control pos:start="111:13" pos:end="111:34">(<init pos:start="111:14" pos:end="111:19"><expr pos:start="111:14" pos:end="111:18"><name pos:start="111:14" pos:end="111:14">i</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">0</literal></expr>;</init> <condition pos:start="111:21" pos:end="111:29"><expr pos:start="111:21" pos:end="111:28"><name pos:start="111:21" pos:end="111:21">i</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <name pos:start="111:25" pos:end="111:28">dstW</name></expr>;</condition> <incr pos:start="111:31" pos:end="111:33"><expr pos:start="111:31" pos:end="111:33"><name pos:start="111:31" pos:end="111:31">i</name><operator pos:start="111:32" pos:end="111:33">++</operator></expr></incr>)</control> <block pos:start="111:36" pos:end="141:9">{<block_content pos:start="113:13" pos:end="139:30">

            <decl_stmt pos:start="113:13" pos:end="113:78"><decl pos:start="113:13" pos:end="113:77"><type pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">int</name></type> <name pos:start="113:17" pos:end="113:18">xx</name> <init pos:start="113:20" pos:end="113:77">= <expr pos:start="113:22" pos:end="113:77"><operator pos:start="113:22" pos:end="113:22">(</operator><name pos:start="113:23" pos:end="113:31">xDstInSrc</name> <operator pos:start="113:33" pos:end="113:33">-</operator> <operator pos:start="113:35" pos:end="113:35">(</operator><operator pos:start="113:36" pos:end="113:36">(</operator><name pos:start="113:37" pos:end="113:46">filterSize</name> <operator pos:start="113:48" pos:end="113:48">-</operator> <literal type="number" pos:start="113:50" pos:end="113:50">1</literal><operator pos:start="113:51" pos:end="113:51">)</operator> <operator pos:start="113:53" pos:end="113:54">&lt;&lt;</operator> <literal type="number" pos:start="113:56" pos:end="113:57">15</literal><operator pos:start="113:58" pos:end="113:58">)</operator> <operator pos:start="113:60" pos:end="113:60">+</operator> <operator pos:start="113:62" pos:end="113:62">(</operator><literal type="number" pos:start="113:63" pos:end="113:63">1</literal> <operator pos:start="113:65" pos:end="113:66">&lt;&lt;</operator> <literal type="number" pos:start="113:68" pos:end="113:69">15</literal><operator pos:start="113:70" pos:end="113:70">)</operator><operator pos:start="113:71" pos:end="113:71">)</operator> <operator pos:start="113:73" pos:end="113:74">&gt;&gt;</operator> <literal type="number" pos:start="113:76" pos:end="113:77">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="115:13" pos:end="115:18"><decl pos:start="115:13" pos:end="115:17"><type pos:start="115:13" pos:end="115:15"><name pos:start="115:13" pos:end="115:15">int</name></type> <name pos:start="115:17" pos:end="115:17">j</name></decl>;</decl_stmt>



            <expr_stmt pos:start="119:13" pos:end="119:33"><expr pos:start="119:13" pos:end="119:32"><operator pos:start="119:13" pos:end="119:13">(</operator><operator pos:start="119:14" pos:end="119:14">*</operator><name pos:start="119:15" pos:end="119:23">filterPos</name><operator pos:start="119:24" pos:end="119:24">)</operator><index pos:start="119:25" pos:end="119:27">[<expr pos:start="119:26" pos:end="119:26"><name pos:start="119:26" pos:end="119:26">i</name></expr>]</index> <operator pos:start="119:29" pos:end="119:29">=</operator> <name pos:start="119:31" pos:end="119:32">xx</name></expr>;</expr_stmt>

            <comment type="line" pos:start="121:13" pos:end="121:69">// bilinear upscale / linear interpolate / area averaging</comment>

            <for pos:start="123:13" pos:end="137:13">for <control pos:start="123:17" pos:end="123:44">(<init pos:start="123:18" pos:end="123:23"><expr pos:start="123:18" pos:end="123:22"><name pos:start="123:18" pos:end="123:18">j</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <literal type="number" pos:start="123:22" pos:end="123:22">0</literal></expr>;</init> <condition pos:start="123:25" pos:end="123:39"><expr pos:start="123:25" pos:end="123:38"><name pos:start="123:25" pos:end="123:25">j</name> <operator pos:start="123:27" pos:end="123:27">&lt;</operator> <name pos:start="123:29" pos:end="123:38">filterSize</name></expr>;</condition> <incr pos:start="123:41" pos:end="123:43"><expr pos:start="123:41" pos:end="123:43"><name pos:start="123:41" pos:end="123:41">j</name><operator pos:start="123:42" pos:end="123:43">++</operator></expr></incr>)</control> <block pos:start="123:46" pos:end="137:13">{<block_content pos:start="125:17" pos:end="135:21">

                <decl_stmt pos:start="125:17" pos:end="127:45"><decl pos:start="125:17" pos:end="127:44"><type pos:start="125:17" pos:end="125:23"><name pos:start="125:17" pos:end="125:23">int64_t</name></type> <name pos:start="125:25" pos:end="125:29">coeff</name> <init pos:start="125:31" pos:end="127:44">= <expr pos:start="125:33" pos:end="127:44"><name pos:start="125:33" pos:end="125:36">fone</name> <operator pos:start="125:38" pos:end="125:38">-</operator> <call pos:start="125:40" pos:end="125:68"><name pos:start="125:40" pos:end="125:44">FFABS</name><argument_list pos:start="125:45" pos:end="125:68">(<argument pos:start="125:46" pos:end="125:67"><expr pos:start="125:46" pos:end="125:67"><operator pos:start="125:46" pos:end="125:46">(</operator><name pos:start="125:47" pos:end="125:48">xx</name> <operator pos:start="125:50" pos:end="125:51">&lt;&lt;</operator> <literal type="number" pos:start="125:53" pos:end="125:54">16</literal><operator pos:start="125:55" pos:end="125:55">)</operator> <operator pos:start="125:57" pos:end="125:57">-</operator> <name pos:start="125:59" pos:end="125:67">xDstInSrc</name></expr></argument>)</argument_list></call> <operator pos:start="125:70" pos:end="125:70">*</operator>

                                <operator pos:start="127:33" pos:end="127:33">(</operator><name pos:start="127:34" pos:end="127:37">fone</name> <operator pos:start="127:39" pos:end="127:40">&gt;&gt;</operator> <literal type="number" pos:start="127:42" pos:end="127:43">16</literal><operator pos:start="127:44" pos:end="127:44">)</operator></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="129:17" pos:end="131:30"><if pos:start="129:17" pos:end="131:30">if <condition pos:start="129:20" pos:end="129:30">(<expr pos:start="129:21" pos:end="129:29"><name pos:start="129:21" pos:end="129:25">coeff</name> <operator pos:start="129:27" pos:end="129:27">&lt;</operator> <literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr>)</condition><block type="pseudo" pos:start="131:21" pos:end="131:30"><block_content pos:start="131:21" pos:end="131:30">

                    <expr_stmt pos:start="131:21" pos:end="131:30"><expr pos:start="131:21" pos:end="131:29"><name pos:start="131:21" pos:end="131:25">coeff</name> <operator pos:start="131:27" pos:end="131:27">=</operator> <literal type="number" pos:start="131:29" pos:end="131:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:51"><expr pos:start="133:17" pos:end="133:50"><name pos:start="133:17" pos:end="133:42"><name pos:start="133:17" pos:end="133:22">filter</name><index pos:start="133:23" pos:end="133:42">[<expr pos:start="133:24" pos:end="133:41"><name pos:start="133:24" pos:end="133:24">i</name> <operator pos:start="133:26" pos:end="133:26">*</operator> <name pos:start="133:28" pos:end="133:37">filterSize</name> <operator pos:start="133:39" pos:end="133:39">+</operator> <name pos:start="133:41" pos:end="133:41">j</name></expr>]</index></name> <operator pos:start="133:44" pos:end="133:44">=</operator> <name pos:start="133:46" pos:end="133:50">coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:21"><expr pos:start="135:17" pos:end="135:20"><name pos:start="135:17" pos:end="135:18">xx</name><operator pos:start="135:19" pos:end="135:20">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="139:13" pos:end="139:30"><expr pos:start="139:13" pos:end="139:29"><name pos:start="139:13" pos:end="139:21">xDstInSrc</name> <operator pos:start="139:23" pos:end="139:24">+=</operator> <name pos:start="139:26" pos:end="139:29">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="143:7" pos:end="403:5">else <block pos:start="143:12" pos:end="403:5">{<block_content pos:start="145:9" pos:end="401:9">

        <decl_stmt pos:start="145:9" pos:end="145:26"><decl pos:start="145:9" pos:end="145:25"><type pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:15">int64_t</name></type> <name pos:start="145:17" pos:end="145:25">xDstInSrc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:23"><decl pos:start="147:9" pos:end="147:22"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:22">sizeFactor</name></decl>;</decl_stmt>



        <if_stmt pos:start="151:9" pos:end="189:9"><if pos:start="151:9" pos:end="153:27">if <condition pos:start="151:12" pos:end="151:32">(<expr pos:start="151:13" pos:end="151:31"><name pos:start="151:13" pos:end="151:17">flags</name> <operator pos:start="151:19" pos:end="151:19">&amp;</operator> <name pos:start="151:21" pos:end="151:31">SWS_BICUBIC</name></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:27"><block_content pos:start="153:13" pos:end="153:27">

            <expr_stmt pos:start="153:13" pos:end="153:27"><expr pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:22">sizeFactor</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <literal type="number" pos:start="153:26" pos:end="153:26">4</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="155:9" pos:end="157:27">else if <condition pos:start="155:17" pos:end="155:31">(<expr pos:start="155:18" pos:end="155:30"><name pos:start="155:18" pos:end="155:22">flags</name> <operator pos:start="155:24" pos:end="155:24">&amp;</operator> <name pos:start="155:26" pos:end="155:30">SWS_X</name></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:27"><block_content pos:start="157:13" pos:end="157:27">

            <expr_stmt pos:start="157:13" pos:end="157:27"><expr pos:start="157:13" pos:end="157:26"><name pos:start="157:13" pos:end="157:22">sizeFactor</name> <operator pos:start="157:24" pos:end="157:24">=</operator> <literal type="number" pos:start="157:26" pos:end="157:26">8</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="159:9" pos:end="161:27">else if <condition pos:start="159:17" pos:end="159:34">(<expr pos:start="159:18" pos:end="159:33"><name pos:start="159:18" pos:end="159:22">flags</name> <operator pos:start="159:24" pos:end="159:24">&amp;</operator> <name pos:start="159:26" pos:end="159:33">SWS_AREA</name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:27"><block_content pos:start="161:13" pos:end="161:27">

            <expr_stmt pos:start="161:13" pos:end="161:27"><expr pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:22">sizeFactor</name> <operator pos:start="161:24" pos:end="161:24">=</operator> <literal type="number" pos:start="161:26" pos:end="161:26">1</literal></expr>;</expr_stmt></block_content></block></if>     <comment type="line" pos:start="161:33" pos:end="161:77">// downscale only, for upscale it is bilinear</comment>

        <if type="elseif" pos:start="163:9" pos:end="165:27">else if <condition pos:start="163:17" pos:end="163:35">(<expr pos:start="163:18" pos:end="163:34"><name pos:start="163:18" pos:end="163:22">flags</name> <operator pos:start="163:24" pos:end="163:24">&amp;</operator> <name pos:start="163:26" pos:end="163:34">SWS_GAUSS</name></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:27"><block_content pos:start="165:13" pos:end="165:27">

            <expr_stmt pos:start="165:13" pos:end="165:27"><expr pos:start="165:13" pos:end="165:26"><name pos:start="165:13" pos:end="165:22">sizeFactor</name> <operator pos:start="165:24" pos:end="165:24">=</operator> <literal type="number" pos:start="165:26" pos:end="165:26">8</literal></expr>;</expr_stmt></block_content></block></if>     <comment type="line" pos:start="165:33" pos:end="165:46">// infinite ;)</comment>

        <if type="elseif" pos:start="167:9" pos:end="169:80">else if <condition pos:start="167:17" pos:end="167:37">(<expr pos:start="167:18" pos:end="167:36"><name pos:start="167:18" pos:end="167:22">flags</name> <operator pos:start="167:24" pos:end="167:24">&amp;</operator> <name pos:start="167:26" pos:end="167:36">SWS_LANCZOS</name></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:80"><block_content pos:start="169:13" pos:end="169:80">

            <expr_stmt pos:start="169:13" pos:end="169:80"><expr pos:start="169:13" pos:end="169:79"><name pos:start="169:13" pos:end="169:22">sizeFactor</name> <operator pos:start="169:24" pos:end="169:24">=</operator> <ternary pos:start="169:26" pos:end="169:79"><condition pos:start="169:26" pos:end="169:56"><expr pos:start="169:26" pos:end="169:54"><name pos:start="169:26" pos:end="169:33"><name pos:start="169:26" pos:end="169:30">param</name><index pos:start="169:31" pos:end="169:33">[<expr pos:start="169:32" pos:end="169:32"><literal type="number" pos:start="169:32" pos:end="169:32">0</literal></expr>]</index></name> <operator pos:start="169:35" pos:end="169:36">!=</operator> <name pos:start="169:38" pos:end="169:54">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="169:58" pos:end="169:75"> <expr pos:start="169:58" pos:end="169:75"><call pos:start="169:58" pos:end="169:75"><name pos:start="169:58" pos:end="169:61">ceil</name><argument_list pos:start="169:62" pos:end="169:75">(<argument pos:start="169:63" pos:end="169:74"><expr pos:start="169:63" pos:end="169:74"><literal type="number" pos:start="169:63" pos:end="169:63">2</literal> <operator pos:start="169:65" pos:end="169:65">*</operator> <name pos:start="169:67" pos:end="169:74"><name pos:start="169:67" pos:end="169:71">param</name><index pos:start="169:72" pos:end="169:74">[<expr pos:start="169:73" pos:end="169:73"><literal type="number" pos:start="169:73" pos:end="169:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="169:77" pos:end="169:79">: <expr pos:start="169:79" pos:end="169:79"><literal type="number" pos:start="169:79" pos:end="169:79">6</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="171:9" pos:end="173:28">else if <condition pos:start="171:17" pos:end="171:34">(<expr pos:start="171:18" pos:end="171:33"><name pos:start="171:18" pos:end="171:22">flags</name> <operator pos:start="171:24" pos:end="171:24">&amp;</operator> <name pos:start="171:26" pos:end="171:33">SWS_SINC</name></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:28"><block_content pos:start="173:13" pos:end="173:28">

            <expr_stmt pos:start="173:13" pos:end="173:28"><expr pos:start="173:13" pos:end="173:27"><name pos:start="173:13" pos:end="173:22">sizeFactor</name> <operator pos:start="173:24" pos:end="173:24">=</operator> <literal type="number" pos:start="173:26" pos:end="173:27">20</literal></expr>;</expr_stmt></block_content></block></if>    <comment type="line" pos:start="173:33" pos:end="173:46">// infinite ;)</comment>

        <if type="elseif" pos:start="175:9" pos:end="177:28">else if <condition pos:start="175:17" pos:end="175:36">(<expr pos:start="175:18" pos:end="175:35"><name pos:start="175:18" pos:end="175:22">flags</name> <operator pos:start="175:24" pos:end="175:24">&amp;</operator> <name pos:start="175:26" pos:end="175:35">SWS_SPLINE</name></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:28"><block_content pos:start="177:13" pos:end="177:28">

            <expr_stmt pos:start="177:13" pos:end="177:28"><expr pos:start="177:13" pos:end="177:27"><name pos:start="177:13" pos:end="177:22">sizeFactor</name> <operator pos:start="177:24" pos:end="177:24">=</operator> <literal type="number" pos:start="177:26" pos:end="177:27">20</literal></expr>;</expr_stmt></block_content></block></if>    <comment type="line" pos:start="177:33" pos:end="177:46">// infinite ;)</comment>

        <if type="elseif" pos:start="179:9" pos:end="181:27">else if <condition pos:start="179:17" pos:end="179:38">(<expr pos:start="179:18" pos:end="179:37"><name pos:start="179:18" pos:end="179:22">flags</name> <operator pos:start="179:24" pos:end="179:24">&amp;</operator> <name pos:start="179:26" pos:end="179:37">SWS_BILINEAR</name></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:27"><block_content pos:start="181:13" pos:end="181:27">

            <expr_stmt pos:start="181:13" pos:end="181:27"><expr pos:start="181:13" pos:end="181:26"><name pos:start="181:13" pos:end="181:22">sizeFactor</name> <operator pos:start="181:24" pos:end="181:24">=</operator> <literal type="number" pos:start="181:26" pos:end="181:26">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="183:9" pos:end="189:9">else <block pos:start="183:14" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:22">

            <expr_stmt pos:start="185:13" pos:end="185:27"><expr pos:start="185:13" pos:end="185:26"><name pos:start="185:13" pos:end="185:22">sizeFactor</name> <operator pos:start="185:24" pos:end="185:24">=</operator> <literal type="number" pos:start="185:26" pos:end="185:26">0</literal></expr>;</expr_stmt>     <comment type="line" pos:start="185:33" pos:end="185:53">// GCC warning killer</comment>

            <expr_stmt pos:start="187:13" pos:end="187:22"><expr pos:start="187:13" pos:end="187:21"><call pos:start="187:13" pos:end="187:21"><name pos:start="187:13" pos:end="187:18">assert</name><argument_list pos:start="187:19" pos:end="187:21">(<argument pos:start="187:20" pos:end="187:20"><expr pos:start="187:20" pos:end="187:20"><literal type="number" pos:start="187:20" pos:end="187:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="193:9" pos:end="199:67"><if pos:start="193:9" pos:end="195:40">if <condition pos:start="193:12" pos:end="193:28">(<expr pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:16">xInc</name> <operator pos:start="193:18" pos:end="193:19">&lt;=</operator> <literal type="number" pos:start="193:21" pos:end="193:21">1</literal> <operator pos:start="193:23" pos:end="193:24">&lt;&lt;</operator> <literal type="number" pos:start="193:26" pos:end="193:27">16</literal></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="195:40"><block_content pos:start="195:13" pos:end="195:40">

            <expr_stmt pos:start="195:13" pos:end="195:40"><expr pos:start="195:13" pos:end="195:39"><name pos:start="195:13" pos:end="195:22">filterSize</name> <operator pos:start="195:24" pos:end="195:24">=</operator> <literal type="number" pos:start="195:26" pos:end="195:28">1</literal> <operator pos:start="195:28" pos:end="195:28">+</operator> <name pos:start="195:30" pos:end="195:39">sizeFactor</name></expr>;</expr_stmt></block_content></block></if>    <comment type="line" pos:start="195:45" pos:end="195:54">// upscale</comment>

        <else pos:start="197:9" pos:end="199:67">else<block type="pseudo" pos:start="199:13" pos:end="199:67"><block_content pos:start="199:13" pos:end="199:67">

            <expr_stmt pos:start="199:13" pos:end="199:67"><expr pos:start="199:13" pos:end="199:66"><name pos:start="199:13" pos:end="199:22">filterSize</name> <operator pos:start="199:24" pos:end="199:24">=</operator> <literal type="number" pos:start="199:26" pos:end="199:28">1</literal> <operator pos:start="199:28" pos:end="199:28">+</operator> <operator pos:start="199:30" pos:end="199:30">(</operator><name pos:start="199:31" pos:end="199:40">sizeFactor</name> <operator pos:start="199:42" pos:end="199:42">*</operator> <name pos:start="199:44" pos:end="199:47">srcW</name> <operator pos:start="199:49" pos:end="199:49">+</operator> <name pos:start="199:51" pos:end="199:54">dstW</name> <operator pos:start="199:56" pos:end="199:56">-</operator> <literal type="number" pos:start="199:58" pos:end="199:58">1</literal><operator pos:start="199:59" pos:end="199:59">)</operator> <operator pos:start="199:61" pos:end="199:61">/</operator> <name pos:start="199:63" pos:end="199:66">dstW</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="203:9" pos:end="203:49"><expr pos:start="203:9" pos:end="203:48"><name pos:start="203:9" pos:end="203:18">filterSize</name> <operator pos:start="203:20" pos:end="203:20">=</operator> <call pos:start="203:22" pos:end="203:48"><name pos:start="203:22" pos:end="203:26">FFMIN</name><argument_list pos:start="203:27" pos:end="203:48">(<argument pos:start="203:28" pos:end="203:37"><expr pos:start="203:28" pos:end="203:37"><name pos:start="203:28" pos:end="203:37">filterSize</name></expr></argument>, <argument pos:start="203:40" pos:end="203:47"><expr pos:start="203:40" pos:end="203:47"><name pos:start="203:40" pos:end="203:43">srcW</name> <operator pos:start="203:45" pos:end="203:45">-</operator> <literal type="number" pos:start="203:47" pos:end="203:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:42"><expr pos:start="205:9" pos:end="205:41"><name pos:start="205:9" pos:end="205:18">filterSize</name> <operator pos:start="205:20" pos:end="205:20">=</operator> <call pos:start="205:22" pos:end="205:41"><name pos:start="205:22" pos:end="205:26">FFMAX</name><argument_list pos:start="205:27" pos:end="205:41">(<argument pos:start="205:28" pos:end="205:37"><expr pos:start="205:28" pos:end="205:37"><name pos:start="205:28" pos:end="205:37">filterSize</name></expr></argument>, <argument pos:start="205:40" pos:end="205:40"><expr pos:start="205:40" pos:end="205:40"><literal type="number" pos:start="205:40" pos:end="205:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="209:9" pos:end="211:68"><expr pos:start="209:9" pos:end="211:67"><call pos:start="209:9" pos:end="211:67"><name pos:start="209:9" pos:end="209:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="209:25" pos:end="211:67">(<argument pos:start="209:26" pos:end="209:29"><expr pos:start="209:26" pos:end="209:29"><name pos:start="209:26" pos:end="209:29">NULL</name></expr></argument>, <argument pos:start="209:32" pos:end="209:37"><expr pos:start="209:32" pos:end="209:37"><name pos:start="209:32" pos:end="209:37">filter</name></expr></argument>,

                         <argument pos:start="211:26" pos:end="211:60"><expr pos:start="211:26" pos:end="211:60"><name pos:start="211:26" pos:end="211:29">dstW</name> <operator pos:start="211:31" pos:end="211:31">*</operator> <sizeof pos:start="211:33" pos:end="211:47">sizeof<argument_list pos:start="211:39" pos:end="211:47">(<argument pos:start="211:40" pos:end="211:46"><expr pos:start="211:40" pos:end="211:46"><operator pos:start="211:40" pos:end="211:40">*</operator><name pos:start="211:41" pos:end="211:46">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="211:49" pos:end="211:49">*</operator> <name pos:start="211:51" pos:end="211:60">filterSize</name></expr></argument>, <argument pos:start="211:63" pos:end="211:66"><expr pos:start="211:63" pos:end="211:66"><name pos:start="211:63" pos:end="211:66">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="215:9" pos:end="215:35"><expr pos:start="215:9" pos:end="215:34"><name pos:start="215:9" pos:end="215:17">xDstInSrc</name> <operator pos:start="215:19" pos:end="215:19">=</operator> <name pos:start="215:21" pos:end="215:24">xInc</name> <operator pos:start="215:26" pos:end="215:26">-</operator> <literal type="number" pos:start="215:28" pos:end="215:34">0x10000</literal></expr>;</expr_stmt>

        <for pos:start="217:9" pos:end="401:9">for <control pos:start="217:13" pos:end="217:34">(<init pos:start="217:14" pos:end="217:19"><expr pos:start="217:14" pos:end="217:18"><name pos:start="217:14" pos:end="217:14">i</name> <operator pos:start="217:16" pos:end="217:16">=</operator> <literal type="number" pos:start="217:18" pos:end="217:18">0</literal></expr>;</init> <condition pos:start="217:21" pos:end="217:29"><expr pos:start="217:21" pos:end="217:28"><name pos:start="217:21" pos:end="217:21">i</name> <operator pos:start="217:23" pos:end="217:23">&lt;</operator> <name pos:start="217:25" pos:end="217:28">dstW</name></expr>;</condition> <incr pos:start="217:31" pos:end="217:33"><expr pos:start="217:31" pos:end="217:33"><name pos:start="217:31" pos:end="217:31">i</name><operator pos:start="217:32" pos:end="217:33">++</operator></expr></incr>)</control> <block pos:start="217:36" pos:end="401:9">{<block_content pos:start="219:13" pos:end="399:34">

            <decl_stmt pos:start="219:13" pos:end="219:72"><decl pos:start="219:13" pos:end="219:71"><type pos:start="219:13" pos:end="219:15"><name pos:start="219:13" pos:end="219:15">int</name></type> <name pos:start="219:17" pos:end="219:18">xx</name> <init pos:start="219:20" pos:end="219:71">= <expr pos:start="219:22" pos:end="219:71"><operator pos:start="219:22" pos:end="219:22">(</operator><name pos:start="219:23" pos:end="219:31">xDstInSrc</name> <operator pos:start="219:33" pos:end="219:33">-</operator> <operator pos:start="219:35" pos:end="219:35">(</operator><operator pos:start="219:36" pos:end="219:36">(</operator><name pos:start="219:37" pos:end="219:46">filterSize</name> <operator pos:start="219:48" pos:end="219:48">-</operator> <literal type="number" pos:start="219:50" pos:end="219:50">2</literal><operator pos:start="219:51" pos:end="219:51">)</operator> <operator pos:start="219:53" pos:end="219:54">&lt;&lt;</operator> <literal type="number" pos:start="219:56" pos:end="219:57">16</literal><operator pos:start="219:58" pos:end="219:58">)</operator><operator pos:start="219:59" pos:end="219:59">)</operator> <operator pos:start="219:61" pos:end="219:61">/</operator> <operator pos:start="219:63" pos:end="219:63">(</operator><literal type="number" pos:start="219:64" pos:end="219:64">1</literal> <operator pos:start="219:66" pos:end="219:67">&lt;&lt;</operator> <literal type="number" pos:start="219:69" pos:end="219:70">17</literal><operator pos:start="219:71" pos:end="219:71">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="221:13" pos:end="221:18"><decl pos:start="221:13" pos:end="221:17"><type pos:start="221:13" pos:end="221:15"><name pos:start="221:13" pos:end="221:15">int</name></type> <name pos:start="221:17" pos:end="221:17">j</name></decl>;</decl_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:33"><expr pos:start="223:13" pos:end="223:32"><operator pos:start="223:13" pos:end="223:13">(</operator><operator pos:start="223:14" pos:end="223:14">*</operator><name pos:start="223:15" pos:end="223:23">filterPos</name><operator pos:start="223:24" pos:end="223:24">)</operator><index pos:start="223:25" pos:end="223:27">[<expr pos:start="223:26" pos:end="223:26"><name pos:start="223:26" pos:end="223:26">i</name></expr>]</index> <operator pos:start="223:29" pos:end="223:29">=</operator> <name pos:start="223:31" pos:end="223:32">xx</name></expr>;</expr_stmt>

            <for pos:start="225:13" pos:end="397:13">for <control pos:start="225:17" pos:end="225:44">(<init pos:start="225:18" pos:end="225:23"><expr pos:start="225:18" pos:end="225:22"><name pos:start="225:18" pos:end="225:18">j</name> <operator pos:start="225:20" pos:end="225:20">=</operator> <literal type="number" pos:start="225:22" pos:end="225:22">0</literal></expr>;</init> <condition pos:start="225:25" pos:end="225:39"><expr pos:start="225:25" pos:end="225:38"><name pos:start="225:25" pos:end="225:25">j</name> <operator pos:start="225:27" pos:end="225:27">&lt;</operator> <name pos:start="225:29" pos:end="225:38">filterSize</name></expr>;</condition> <incr pos:start="225:41" pos:end="225:43"><expr pos:start="225:41" pos:end="225:43"><name pos:start="225:41" pos:end="225:41">j</name><operator pos:start="225:42" pos:end="225:43">++</operator></expr></incr>)</control> <block pos:start="225:46" pos:end="397:13">{<block_content pos:start="227:17" pos:end="395:21">

                <decl_stmt pos:start="227:17" pos:end="227:75"><decl pos:start="227:17" pos:end="227:74"><type pos:start="227:17" pos:end="227:23"><name pos:start="227:17" pos:end="227:23">int64_t</name></type> <name pos:start="227:25" pos:end="227:25">d</name> <init pos:start="227:27" pos:end="227:74">= <expr pos:start="227:29" pos:end="227:74"><operator pos:start="227:29" pos:end="227:29">(</operator><call pos:start="227:30" pos:end="227:67"><name pos:start="227:30" pos:end="227:34">FFABS</name><argument_list pos:start="227:35" pos:end="227:67">(<argument pos:start="227:36" pos:end="227:66"><expr pos:start="227:36" pos:end="227:66"><operator pos:start="227:36" pos:end="227:36">(</operator><operator pos:start="227:37" pos:end="227:37">(</operator><name pos:start="227:38" pos:end="227:44">int64_t</name><operator pos:start="227:45" pos:end="227:45">)</operator><name pos:start="227:46" pos:end="227:47">xx</name> <operator pos:start="227:49" pos:end="227:50">&lt;&lt;</operator> <literal type="number" pos:start="227:52" pos:end="227:53">17</literal><operator pos:start="227:54" pos:end="227:54">)</operator> <operator pos:start="227:56" pos:end="227:56">-</operator> <name pos:start="227:58" pos:end="227:66">xDstInSrc</name></expr></argument>)</argument_list></call><operator pos:start="227:68" pos:end="227:68">)</operator> <operator pos:start="227:70" pos:end="227:71">&lt;&lt;</operator> <literal type="number" pos:start="227:73" pos:end="227:74">13</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="229:17" pos:end="229:30"><decl pos:start="229:17" pos:end="229:29"><type pos:start="229:17" pos:end="229:22"><name pos:start="229:17" pos:end="229:22">double</name></type> <name pos:start="229:24" pos:end="229:29">floatd</name></decl>;</decl_stmt>

                <decl_stmt pos:start="231:17" pos:end="231:30"><decl pos:start="231:17" pos:end="231:29"><type pos:start="231:17" pos:end="231:23"><name pos:start="231:17" pos:end="231:23">int64_t</name></type> <name pos:start="231:25" pos:end="231:29">coeff</name></decl>;</decl_stmt>



                <if_stmt pos:start="235:17" pos:end="237:40"><if pos:start="235:17" pos:end="237:40">if <condition pos:start="235:20" pos:end="235:35">(<expr pos:start="235:21" pos:end="235:34"><name pos:start="235:21" pos:end="235:24">xInc</name> <operator pos:start="235:26" pos:end="235:26">&gt;</operator> <literal type="number" pos:start="235:28" pos:end="235:28">1</literal> <operator pos:start="235:30" pos:end="235:31">&lt;&lt;</operator> <literal type="number" pos:start="235:33" pos:end="235:34">16</literal></expr>)</condition><block type="pseudo" pos:start="237:21" pos:end="237:40"><block_content pos:start="237:21" pos:end="237:40">

                    <expr_stmt pos:start="237:21" pos:end="237:40"><expr pos:start="237:21" pos:end="237:39"><name pos:start="237:21" pos:end="237:21">d</name> <operator pos:start="237:23" pos:end="237:23">=</operator> <name pos:start="237:25" pos:end="237:25">d</name> <operator pos:start="237:27" pos:end="237:27">*</operator> <name pos:start="237:29" pos:end="237:32">dstW</name> <operator pos:start="237:34" pos:end="237:34">/</operator> <name pos:start="237:36" pos:end="237:39">srcW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:47"><expr pos:start="239:17" pos:end="239:46"><name pos:start="239:17" pos:end="239:22">floatd</name> <operator pos:start="239:24" pos:end="239:24">=</operator> <name pos:start="239:26" pos:end="239:26">d</name> <operator pos:start="239:28" pos:end="239:28">*</operator> <operator pos:start="239:30" pos:end="239:30">(</operator><literal type="number" pos:start="239:31" pos:end="239:33">1.0</literal> <operator pos:start="239:35" pos:end="239:35">/</operator> <operator pos:start="239:37" pos:end="239:37">(</operator><literal type="number" pos:start="239:38" pos:end="239:38">1</literal> <operator pos:start="239:40" pos:end="239:41">&lt;&lt;</operator> <literal type="number" pos:start="239:43" pos:end="239:44">30</literal><operator pos:start="239:45" pos:end="239:45">)</operator><operator pos:start="239:46" pos:end="239:46">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="243:17" pos:end="389:17"><if pos:start="243:17" pos:end="300:0">if <condition pos:start="243:20" pos:end="243:40">(<expr pos:start="243:21" pos:end="243:39"><name pos:start="243:21" pos:end="243:25">flags</name> <operator pos:start="243:27" pos:end="243:27">&amp;</operator> <name pos:start="243:29" pos:end="243:39">SWS_BICUBIC</name></expr>)</condition> <block pos:start="243:42" pos:end="300:0">{<block_content pos:start="245:21" pos:end="283:47">

                    <decl_stmt pos:start="245:21" pos:end="245:93"><decl pos:start="245:21" pos:end="245:92"><type pos:start="245:21" pos:end="245:27"><name pos:start="245:21" pos:end="245:27">int64_t</name></type> <name pos:start="245:29" pos:end="245:29">B</name> <init pos:start="245:31" pos:end="245:92">= <expr pos:start="245:33" pos:end="245:92"><operator pos:start="245:33" pos:end="245:33">(</operator><ternary pos:start="245:34" pos:end="245:79"><condition pos:start="245:34" pos:end="245:64"><expr pos:start="245:34" pos:end="245:62"><name pos:start="245:34" pos:end="245:41"><name pos:start="245:34" pos:end="245:38">param</name><index pos:start="245:39" pos:end="245:41">[<expr pos:start="245:40" pos:end="245:40"><literal type="number" pos:start="245:40" pos:end="245:40">0</literal></expr>]</index></name> <operator pos:start="245:43" pos:end="245:44">!=</operator> <name pos:start="245:46" pos:end="245:62">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="245:66" pos:end="245:73"> <expr pos:start="245:66" pos:end="245:73"><name pos:start="245:66" pos:end="245:73"><name pos:start="245:66" pos:end="245:70">param</name><index pos:start="245:71" pos:end="245:73">[<expr pos:start="245:72" pos:end="245:72"><literal type="number" pos:start="245:72" pos:end="245:72">0</literal></expr>]</index></name></expr> </then><else pos:start="245:75" pos:end="245:79">:   <expr pos:start="245:79" pos:end="245:79"><literal type="number" pos:start="245:79" pos:end="245:79">0</literal></expr></else></ternary><operator pos:start="245:80" pos:end="245:80">)</operator> <operator pos:start="245:82" pos:end="245:82">*</operator> <operator pos:start="245:84" pos:end="245:84">(</operator><literal type="number" pos:start="245:85" pos:end="245:85">1</literal> <operator pos:start="245:87" pos:end="245:88">&lt;&lt;</operator> <literal type="number" pos:start="245:90" pos:end="245:91">24</literal><operator pos:start="245:92" pos:end="245:92">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="247:21" pos:end="247:93"><decl pos:start="247:21" pos:end="247:92"><type pos:start="247:21" pos:end="247:27"><name pos:start="247:21" pos:end="247:27">int64_t</name></type> <name pos:start="247:29" pos:end="247:29">C</name> <init pos:start="247:31" pos:end="247:92">= <expr pos:start="247:33" pos:end="247:92"><operator pos:start="247:33" pos:end="247:33">(</operator><ternary pos:start="247:34" pos:end="247:79"><condition pos:start="247:34" pos:end="247:64"><expr pos:start="247:34" pos:end="247:62"><name pos:start="247:34" pos:end="247:41"><name pos:start="247:34" pos:end="247:38">param</name><index pos:start="247:39" pos:end="247:41">[<expr pos:start="247:40" pos:end="247:40"><literal type="number" pos:start="247:40" pos:end="247:40">1</literal></expr>]</index></name> <operator pos:start="247:43" pos:end="247:44">!=</operator> <name pos:start="247:46" pos:end="247:62">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="247:66" pos:end="247:73"> <expr pos:start="247:66" pos:end="247:73"><name pos:start="247:66" pos:end="247:73"><name pos:start="247:66" pos:end="247:70">param</name><index pos:start="247:71" pos:end="247:73">[<expr pos:start="247:72" pos:end="247:72"><literal type="number" pos:start="247:72" pos:end="247:72">1</literal></expr>]</index></name></expr> </then><else pos:start="247:75" pos:end="247:79">: <expr pos:start="247:77" pos:end="247:79"><literal type="number" pos:start="247:77" pos:end="247:79">0.6</literal></expr></else></ternary><operator pos:start="247:80" pos:end="247:80">)</operator> <operator pos:start="247:82" pos:end="247:82">*</operator> <operator pos:start="247:84" pos:end="247:84">(</operator><literal type="number" pos:start="247:85" pos:end="247:85">1</literal> <operator pos:start="247:87" pos:end="247:88">&lt;&lt;</operator> <literal type="number" pos:start="247:90" pos:end="247:91">24</literal><operator pos:start="247:92" pos:end="247:92">)</operator></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="251:21" pos:end="281:21"><if pos:start="251:21" pos:end="255:21">if <condition pos:start="251:24" pos:end="251:39">(<expr pos:start="251:25" pos:end="251:38"><name pos:start="251:25" pos:end="251:25">d</name> <operator pos:start="251:27" pos:end="251:28">&gt;=</operator> <literal type="number" pos:start="251:30" pos:end="251:32">1LL</literal> <operator pos:start="251:34" pos:end="251:35">&lt;&lt;</operator> <literal type="number" pos:start="251:37" pos:end="251:38">31</literal></expr>)</condition> <block pos:start="251:41" pos:end="255:21">{<block_content pos:start="253:25" pos:end="253:36">

                        <expr_stmt pos:start="253:25" pos:end="253:36"><expr pos:start="253:25" pos:end="253:35"><name pos:start="253:25" pos:end="253:29">coeff</name> <operator pos:start="253:31" pos:end="253:31">=</operator> <literal type="number" pos:start="253:33" pos:end="253:35">0.0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="255:23" pos:end="281:21">else <block pos:start="255:28" pos:end="281:21">{<block_content pos:start="257:25" pos:end="279:67">

                        <decl_stmt pos:start="257:25" pos:end="257:53"><decl pos:start="257:25" pos:end="257:52"><type pos:start="257:25" pos:end="257:31"><name pos:start="257:25" pos:end="257:31">int64_t</name></type> <name pos:start="257:33" pos:end="257:34">dd</name>  <init pos:start="257:37" pos:end="257:52">= <expr pos:start="257:39" pos:end="257:52"><operator pos:start="257:39" pos:end="257:39">(</operator><name pos:start="257:40" pos:end="257:40">d</name>  <operator pos:start="257:43" pos:end="257:43">*</operator> <name pos:start="257:45" pos:end="257:45">d</name><operator pos:start="257:46" pos:end="257:46">)</operator> <operator pos:start="257:48" pos:end="257:49">&gt;&gt;</operator> <literal type="number" pos:start="257:51" pos:end="257:52">30</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="259:25" pos:end="259:53"><decl pos:start="259:25" pos:end="259:52"><type pos:start="259:25" pos:end="259:31"><name pos:start="259:25" pos:end="259:31">int64_t</name></type> <name pos:start="259:33" pos:end="259:35">ddd</name> <init pos:start="259:37" pos:end="259:52">= <expr pos:start="259:39" pos:end="259:52"><operator pos:start="259:39" pos:end="259:39">(</operator><name pos:start="259:40" pos:end="259:41">dd</name> <operator pos:start="259:43" pos:end="259:43">*</operator> <name pos:start="259:45" pos:end="259:45">d</name><operator pos:start="259:46" pos:end="259:46">)</operator> <operator pos:start="259:48" pos:end="259:49">&gt;&gt;</operator> <literal type="number" pos:start="259:51" pos:end="259:52">30</literal></expr></init></decl>;</decl_stmt>



                        <if_stmt pos:start="263:25" pos:end="279:67"><if pos:start="263:25" pos:end="269:83">if <condition pos:start="263:28" pos:end="263:42">(<expr pos:start="263:29" pos:end="263:41"><name pos:start="263:29" pos:end="263:29">d</name> <operator pos:start="263:31" pos:end="263:31">&lt;</operator> <literal type="number" pos:start="263:33" pos:end="263:35">1LL</literal> <operator pos:start="263:37" pos:end="263:38">&lt;&lt;</operator> <literal type="number" pos:start="263:40" pos:end="263:41">30</literal></expr>)</condition><block type="pseudo" pos:start="265:29" pos:end="269:83"><block_content pos:start="265:29" pos:end="269:83">

                            <expr_stmt pos:start="265:29" pos:end="269:83"><expr pos:start="265:29" pos:end="269:82"><name pos:start="265:29" pos:end="265:33">coeff</name> <operator pos:start="265:35" pos:end="265:35">=</operator>  <operator pos:start="265:38" pos:end="265:38">(</operator><literal type="number" pos:start="265:39" pos:end="265:40">12</literal> <operator pos:start="265:42" pos:end="265:42">*</operator> <operator pos:start="265:44" pos:end="265:44">(</operator><literal type="number" pos:start="265:45" pos:end="265:45">1</literal> <operator pos:start="265:47" pos:end="265:48">&lt;&lt;</operator> <literal type="number" pos:start="265:50" pos:end="265:51">24</literal><operator pos:start="265:52" pos:end="265:52">)</operator> <operator pos:start="265:54" pos:end="265:54">-</operator>  <literal type="number" pos:start="265:57" pos:end="265:57">9</literal> <operator pos:start="265:59" pos:end="265:59">*</operator> <name pos:start="265:61" pos:end="265:61">B</name> <operator pos:start="265:63" pos:end="265:63">-</operator> <literal type="number" pos:start="265:65" pos:end="265:65">6</literal> <operator pos:start="265:67" pos:end="265:67">*</operator> <name pos:start="265:69" pos:end="265:69">C</name><operator pos:start="265:70" pos:end="265:70">)</operator> <operator pos:start="265:72" pos:end="265:72">*</operator> <name pos:start="265:74" pos:end="265:76">ddd</name> <operator pos:start="265:78" pos:end="265:78">+</operator>

                                    <operator pos:start="267:37" pos:end="267:37">(</operator><operator pos:start="267:38" pos:end="267:38">-</operator><literal type="number" pos:start="267:39" pos:end="267:40">18</literal> <operator pos:start="267:42" pos:end="267:42">*</operator> <operator pos:start="267:44" pos:end="267:44">(</operator><literal type="number" pos:start="267:45" pos:end="267:45">1</literal> <operator pos:start="267:47" pos:end="267:48">&lt;&lt;</operator> <literal type="number" pos:start="267:50" pos:end="267:51">24</literal><operator pos:start="267:52" pos:end="267:52">)</operator> <operator pos:start="267:54" pos:end="267:54">+</operator> <literal type="number" pos:start="267:56" pos:end="267:57">12</literal> <operator pos:start="267:59" pos:end="267:59">*</operator> <name pos:start="267:61" pos:end="267:61">B</name> <operator pos:start="267:63" pos:end="267:63">+</operator> <literal type="number" pos:start="267:65" pos:end="267:65">6</literal> <operator pos:start="267:67" pos:end="267:67">*</operator> <name pos:start="267:69" pos:end="267:69">C</name><operator pos:start="267:70" pos:end="267:70">)</operator> <operator pos:start="267:72" pos:end="267:72">*</operator>  <name pos:start="267:75" pos:end="267:76">dd</name> <operator pos:start="267:78" pos:end="267:78">+</operator>

                                      <operator pos:start="269:39" pos:end="269:39">(</operator><literal type="number" pos:start="269:40" pos:end="269:40">6</literal> <operator pos:start="269:42" pos:end="269:42">*</operator> <operator pos:start="269:44" pos:end="269:44">(</operator><literal type="number" pos:start="269:45" pos:end="269:45">1</literal> <operator pos:start="269:47" pos:end="269:48">&lt;&lt;</operator> <literal type="number" pos:start="269:50" pos:end="269:51">24</literal><operator pos:start="269:52" pos:end="269:52">)</operator> <operator pos:start="269:54" pos:end="269:54">-</operator>  <literal type="number" pos:start="269:57" pos:end="269:57">2</literal> <operator pos:start="269:59" pos:end="269:59">*</operator> <name pos:start="269:61" pos:end="269:61">B</name><operator pos:start="269:62" pos:end="269:62">)</operator>         <operator pos:start="269:72" pos:end="269:72">*</operator> <operator pos:start="269:74" pos:end="269:74">(</operator><literal type="number" pos:start="269:75" pos:end="269:75">1</literal> <operator pos:start="269:77" pos:end="269:78">&lt;&lt;</operator> <literal type="number" pos:start="269:80" pos:end="269:81">30</literal><operator pos:start="269:82" pos:end="269:82">)</operator></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="271:25" pos:end="279:67">else<block type="pseudo" pos:start="273:29" pos:end="279:67"><block_content pos:start="273:29" pos:end="279:67">

                            <expr_stmt pos:start="273:29" pos:end="279:67"><expr pos:start="273:29" pos:end="279:66"><name pos:start="273:29" pos:end="273:33">coeff</name> <operator pos:start="273:35" pos:end="273:35">=</operator>      <operator pos:start="273:42" pos:end="273:42">(</operator><operator pos:start="273:43" pos:end="273:43">-</operator><name pos:start="273:44" pos:end="273:44">B</name> <operator pos:start="273:46" pos:end="273:46">-</operator>  <literal type="number" pos:start="273:49" pos:end="273:49">6</literal> <operator pos:start="273:51" pos:end="273:51">*</operator> <name pos:start="273:53" pos:end="273:53">C</name><operator pos:start="273:54" pos:end="273:54">)</operator> <operator pos:start="273:56" pos:end="273:56">*</operator> <name pos:start="273:58" pos:end="273:60">ddd</name> <operator pos:start="273:62" pos:end="273:62">+</operator>

                                      <operator pos:start="275:39" pos:end="275:39">(</operator><literal type="number" pos:start="275:40" pos:end="275:40">6</literal> <operator pos:start="275:42" pos:end="275:42">*</operator> <name pos:start="275:44" pos:end="275:44">B</name> <operator pos:start="275:46" pos:end="275:46">+</operator> <literal type="number" pos:start="275:48" pos:end="275:49">30</literal> <operator pos:start="275:51" pos:end="275:51">*</operator> <name pos:start="275:53" pos:end="275:53">C</name><operator pos:start="275:54" pos:end="275:54">)</operator> <operator pos:start="275:56" pos:end="275:56">*</operator> <name pos:start="275:58" pos:end="275:59">dd</name>  <operator pos:start="275:62" pos:end="275:62">+</operator>

                                    <operator pos:start="277:37" pos:end="277:37">(</operator><operator pos:start="277:38" pos:end="277:38">-</operator><literal type="number" pos:start="277:39" pos:end="277:40">12</literal> <operator pos:start="277:42" pos:end="277:42">*</operator> <name pos:start="277:44" pos:end="277:44">B</name> <operator pos:start="277:46" pos:end="277:46">-</operator> <literal type="number" pos:start="277:48" pos:end="277:49">48</literal> <operator pos:start="277:51" pos:end="277:51">*</operator> <name pos:start="277:53" pos:end="277:53">C</name><operator pos:start="277:54" pos:end="277:54">)</operator> <operator pos:start="277:56" pos:end="277:56">*</operator> <name pos:start="277:58" pos:end="277:58">d</name>   <operator pos:start="277:62" pos:end="277:62">+</operator>

                                      <operator pos:start="279:39" pos:end="279:39">(</operator><literal type="number" pos:start="279:40" pos:end="279:40">8</literal> <operator pos:start="279:42" pos:end="279:42">*</operator> <name pos:start="279:44" pos:end="279:44">B</name> <operator pos:start="279:46" pos:end="279:46">+</operator> <literal type="number" pos:start="279:48" pos:end="279:49">24</literal> <operator pos:start="279:51" pos:end="279:51">*</operator> <name pos:start="279:53" pos:end="279:53">C</name><operator pos:start="279:54" pos:end="279:54">)</operator> <operator pos:start="279:56" pos:end="279:56">*</operator> <operator pos:start="279:58" pos:end="279:58">(</operator><literal type="number" pos:start="279:59" pos:end="279:59">1</literal> <operator pos:start="279:61" pos:end="279:62">&lt;&lt;</operator> <literal type="number" pos:start="279:64" pos:end="279:65">30</literal><operator pos:start="279:66" pos:end="279:66">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="283:21" pos:end="283:47"><expr pos:start="283:21" pos:end="283:46"><name pos:start="283:21" pos:end="283:25">coeff</name> <operator pos:start="283:27" pos:end="283:28">*=</operator> <name pos:start="283:30" pos:end="283:33">fone</name> <operator pos:start="283:35" pos:end="283:36">&gt;&gt;</operator> <operator pos:start="283:38" pos:end="283:38">(</operator><literal type="number" pos:start="283:39" pos:end="283:42">30</literal> <operator pos:start="283:42" pos:end="283:42">+</operator> <literal type="number" pos:start="283:44" pos:end="283:45">24</literal><operator pos:start="283:46" pos:end="283:46">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if>

<cpp:if pos:start="287:1" pos:end="287:5">#<cpp:directive pos:start="287:2" pos:end="287:3">if</cpp:directive> <expr pos:start="287:5" pos:end="287:5"><literal type="number" pos:start="287:5" pos:end="287:5">0</literal></expr></cpp:if>

                else if (flags &amp; SWS_X) {

                    double p  = param ? param * 0.01 : 0.3;

                    coeff     = d ? sin(d * M_PI) / (d * M_PI) : 1.0;

                    coeff    *= pow(2.0, -p * d * d);

                }

<cpp:endif pos:start="299:1" pos:end="299:6">#<cpp:directive pos:start="299:2" pos:end="299:6">endif</cpp:directive></cpp:endif>

                <if type="elseif" pos:start="301:17" pos:end="327:17">else if <condition pos:start="301:25" pos:end="301:39">(<expr pos:start="301:26" pos:end="301:38"><name pos:start="301:26" pos:end="301:30">flags</name> <operator pos:start="301:32" pos:end="301:32">&amp;</operator> <name pos:start="301:34" pos:end="301:38">SWS_X</name></expr>)</condition> <block pos:start="301:41" pos:end="327:17">{<block_content pos:start="303:21" pos:end="325:51">

                    <decl_stmt pos:start="303:21" pos:end="303:78"><decl pos:start="303:21" pos:end="303:77"><type pos:start="303:21" pos:end="303:26"><name pos:start="303:21" pos:end="303:26">double</name></type> <name pos:start="303:28" pos:end="303:28">A</name> <init pos:start="303:30" pos:end="303:77">= <expr pos:start="303:32" pos:end="303:77"><ternary pos:start="303:32" pos:end="303:77"><condition pos:start="303:32" pos:end="303:62"><expr pos:start="303:32" pos:end="303:60"><name pos:start="303:32" pos:end="303:39"><name pos:start="303:32" pos:end="303:36">param</name><index pos:start="303:37" pos:end="303:39">[<expr pos:start="303:38" pos:end="303:38"><literal type="number" pos:start="303:38" pos:end="303:38">0</literal></expr>]</index></name> <operator pos:start="303:41" pos:end="303:42">!=</operator> <name pos:start="303:44" pos:end="303:60">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="303:64" pos:end="303:71"> <expr pos:start="303:64" pos:end="303:71"><name pos:start="303:64" pos:end="303:71"><name pos:start="303:64" pos:end="303:68">param</name><index pos:start="303:69" pos:end="303:71">[<expr pos:start="303:70" pos:end="303:70"><literal type="number" pos:start="303:70" pos:end="303:70">0</literal></expr>]</index></name></expr> </then><else pos:start="303:73" pos:end="303:77">: <expr pos:start="303:75" pos:end="303:77"><literal type="number" pos:start="303:75" pos:end="303:77">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="305:21" pos:end="305:29"><decl pos:start="305:21" pos:end="305:28"><type pos:start="305:21" pos:end="305:26"><name pos:start="305:21" pos:end="305:26">double</name></type> <name pos:start="305:28" pos:end="305:28">c</name></decl>;</decl_stmt>



                    <if_stmt pos:start="309:21" pos:end="315:33"><if pos:start="309:21" pos:end="311:47">if <condition pos:start="309:24" pos:end="309:37">(<expr pos:start="309:25" pos:end="309:36"><name pos:start="309:25" pos:end="309:30">floatd</name> <operator pos:start="309:32" pos:end="309:32">&lt;</operator> <literal type="number" pos:start="309:34" pos:end="309:36">1.0</literal></expr>)</condition><block type="pseudo" pos:start="311:25" pos:end="311:47"><block_content pos:start="311:25" pos:end="311:47">

                        <expr_stmt pos:start="311:25" pos:end="311:47"><expr pos:start="311:25" pos:end="311:46"><name pos:start="311:25" pos:end="311:25">c</name> <operator pos:start="311:27" pos:end="311:27">=</operator> <call pos:start="311:29" pos:end="311:46"><name pos:start="311:29" pos:end="311:31">cos</name><argument_list pos:start="311:32" pos:end="311:46">(<argument pos:start="311:33" pos:end="311:45"><expr pos:start="311:33" pos:end="311:45"><name pos:start="311:33" pos:end="311:38">floatd</name> <operator pos:start="311:40" pos:end="311:40">*</operator> <name pos:start="311:42" pos:end="311:45">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="313:21" pos:end="315:33">else<block type="pseudo" pos:start="315:25" pos:end="315:33"><block_content pos:start="315:25" pos:end="315:33">

                        <expr_stmt pos:start="315:25" pos:end="315:33"><expr pos:start="315:25" pos:end="315:32"><name pos:start="315:25" pos:end="315:25">c</name> <operator pos:start="315:27" pos:end="315:27">=</operator> <operator pos:start="315:29" pos:end="315:29">-</operator><literal type="number" pos:start="315:30" pos:end="315:32">1.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt pos:start="317:21" pos:end="323:38"><if pos:start="317:21" pos:end="319:40">if <condition pos:start="317:24" pos:end="317:32">(<expr pos:start="317:25" pos:end="317:31"><name pos:start="317:25" pos:end="317:25">c</name> <operator pos:start="317:27" pos:end="317:27">&lt;</operator> <literal type="number" pos:start="317:29" pos:end="317:31">0.0</literal></expr>)</condition><block type="pseudo" pos:start="319:25" pos:end="319:40"><block_content pos:start="319:25" pos:end="319:40">

                        <expr_stmt pos:start="319:25" pos:end="319:40"><expr pos:start="319:25" pos:end="319:39"><name pos:start="319:25" pos:end="319:25">c</name> <operator pos:start="319:27" pos:end="319:27">=</operator> <operator pos:start="319:29" pos:end="319:29">-</operator><call pos:start="319:30" pos:end="319:39"><name pos:start="319:30" pos:end="319:32">pow</name><argument_list pos:start="319:33" pos:end="319:39">(<argument pos:start="319:34" pos:end="319:35"><expr pos:start="319:34" pos:end="319:35"><operator pos:start="319:34" pos:end="319:34">-</operator><name pos:start="319:35" pos:end="319:35">c</name></expr></argument>, <argument pos:start="319:38" pos:end="319:38"><expr pos:start="319:38" pos:end="319:38"><name pos:start="319:38" pos:end="319:38">A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="321:21" pos:end="323:38">else<block type="pseudo" pos:start="323:25" pos:end="323:38"><block_content pos:start="323:25" pos:end="323:38">

                        <expr_stmt pos:start="323:25" pos:end="323:38"><expr pos:start="323:25" pos:end="323:37"><name pos:start="323:25" pos:end="323:25">c</name> <operator pos:start="323:27" pos:end="323:27">=</operator> <call pos:start="323:29" pos:end="323:37"><name pos:start="323:29" pos:end="323:31">pow</name><argument_list pos:start="323:32" pos:end="323:37">(<argument pos:start="323:33" pos:end="323:33"><expr pos:start="323:33" pos:end="323:33"><name pos:start="323:33" pos:end="323:33">c</name></expr></argument>, <argument pos:start="323:36" pos:end="323:36"><expr pos:start="323:36" pos:end="323:36"><name pos:start="323:36" pos:end="323:36">A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="325:21" pos:end="325:51"><expr pos:start="325:21" pos:end="325:50"><name pos:start="325:21" pos:end="325:25">coeff</name> <operator pos:start="325:27" pos:end="325:27">=</operator> <operator pos:start="325:29" pos:end="325:29">(</operator><name pos:start="325:30" pos:end="325:30">c</name> <operator pos:start="325:32" pos:end="325:32">*</operator> <literal type="number" pos:start="325:34" pos:end="325:38">0.5</literal> <operator pos:start="325:38" pos:end="325:38">+</operator> <literal type="number" pos:start="325:40" pos:end="325:42">0.5</literal><operator pos:start="325:43" pos:end="325:43">)</operator> <operator pos:start="325:45" pos:end="325:45">*</operator> <name pos:start="325:47" pos:end="325:50">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="327:19" pos:end="345:17">else if <condition pos:start="327:27" pos:end="327:44">(<expr pos:start="327:28" pos:end="327:43"><name pos:start="327:28" pos:end="327:32">flags</name> <operator pos:start="327:34" pos:end="327:34">&amp;</operator> <name pos:start="327:36" pos:end="327:43">SWS_AREA</name></expr>)</condition> <block pos:start="327:46" pos:end="345:17">{<block_content pos:start="329:21" pos:end="343:47">

                    <decl_stmt pos:start="329:21" pos:end="329:47"><decl pos:start="329:21" pos:end="329:46"><type pos:start="329:21" pos:end="329:27"><name pos:start="329:21" pos:end="329:27">int64_t</name></type> <name pos:start="329:29" pos:end="329:30">d2</name> <init pos:start="329:32" pos:end="329:46">= <expr pos:start="329:34" pos:end="329:46"><name pos:start="329:34" pos:end="329:34">d</name> <operator pos:start="329:36" pos:end="329:36">-</operator> <operator pos:start="329:38" pos:end="329:38">(</operator><literal type="number" pos:start="329:39" pos:end="329:39">1</literal> <operator pos:start="329:41" pos:end="329:42">&lt;&lt;</operator> <literal type="number" pos:start="329:44" pos:end="329:45">29</literal><operator pos:start="329:46" pos:end="329:46">)</operator></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="331:21" pos:end="341:36"><if pos:start="331:21" pos:end="333:57">if <condition pos:start="331:24" pos:end="331:56">(<expr pos:start="331:25" pos:end="331:55"><name pos:start="331:25" pos:end="331:26">d2</name> <operator pos:start="331:28" pos:end="331:28">*</operator> <name pos:start="331:30" pos:end="331:33">xInc</name> <operator pos:start="331:35" pos:end="331:35">&lt;</operator> <operator pos:start="331:37" pos:end="331:37">-</operator><operator pos:start="331:38" pos:end="331:38">(</operator><literal type="number" pos:start="331:39" pos:end="331:41">1LL</literal> <operator pos:start="331:43" pos:end="331:44">&lt;&lt;</operator> <operator pos:start="331:46" pos:end="331:46">(</operator><literal type="number" pos:start="331:47" pos:end="331:50">29</literal> <operator pos:start="331:50" pos:end="331:50">+</operator> <literal type="number" pos:start="331:52" pos:end="331:53">16</literal><operator pos:start="331:54" pos:end="331:54">)</operator><operator pos:start="331:55" pos:end="331:55">)</operator></expr>)</condition><block type="pseudo" pos:start="333:25" pos:end="333:57"><block_content pos:start="333:25" pos:end="333:57">

                        <expr_stmt pos:start="333:25" pos:end="333:57"><expr pos:start="333:25" pos:end="333:56"><name pos:start="333:25" pos:end="333:29">coeff</name> <operator pos:start="333:31" pos:end="333:31">=</operator> <literal type="number" pos:start="333:33" pos:end="333:35">1.0</literal> <operator pos:start="333:37" pos:end="333:37">*</operator> <operator pos:start="333:39" pos:end="333:39">(</operator><literal type="number" pos:start="333:40" pos:end="333:42">1LL</literal> <operator pos:start="333:44" pos:end="333:45">&lt;&lt;</operator> <operator pos:start="333:47" pos:end="333:47">(</operator><literal type="number" pos:start="333:48" pos:end="333:51">30</literal> <operator pos:start="333:51" pos:end="333:51">+</operator> <literal type="number" pos:start="333:53" pos:end="333:54">16</literal><operator pos:start="333:55" pos:end="333:55">)</operator><operator pos:start="333:56" pos:end="333:56">)</operator></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="335:21" pos:end="337:64">else if <condition pos:start="335:29" pos:end="335:60">(<expr pos:start="335:30" pos:end="335:59"><name pos:start="335:30" pos:end="335:31">d2</name> <operator pos:start="335:33" pos:end="335:33">*</operator> <name pos:start="335:35" pos:end="335:38">xInc</name> <operator pos:start="335:40" pos:end="335:40">&lt;</operator> <operator pos:start="335:42" pos:end="335:42">(</operator><literal type="number" pos:start="335:43" pos:end="335:45">1LL</literal> <operator pos:start="335:47" pos:end="335:48">&lt;&lt;</operator> <operator pos:start="335:50" pos:end="335:50">(</operator><literal type="number" pos:start="335:51" pos:end="335:54">29</literal> <operator pos:start="335:54" pos:end="335:54">+</operator> <literal type="number" pos:start="335:56" pos:end="335:57">16</literal><operator pos:start="335:58" pos:end="335:58">)</operator><operator pos:start="335:59" pos:end="335:59">)</operator></expr>)</condition><block type="pseudo" pos:start="337:25" pos:end="337:64"><block_content pos:start="337:25" pos:end="337:64">

                        <expr_stmt pos:start="337:25" pos:end="337:64"><expr pos:start="337:25" pos:end="337:63"><name pos:start="337:25" pos:end="337:29">coeff</name> <operator pos:start="337:31" pos:end="337:31">=</operator> <operator pos:start="337:33" pos:end="337:33">-</operator><name pos:start="337:34" pos:end="337:35">d2</name> <operator pos:start="337:37" pos:end="337:37">*</operator> <name pos:start="337:39" pos:end="337:42">xInc</name> <operator pos:start="337:44" pos:end="337:44">+</operator> <operator pos:start="337:46" pos:end="337:46">(</operator><literal type="number" pos:start="337:47" pos:end="337:49">1LL</literal> <operator pos:start="337:51" pos:end="337:52">&lt;&lt;</operator> <operator pos:start="337:54" pos:end="337:54">(</operator><literal type="number" pos:start="337:55" pos:end="337:58">29</literal> <operator pos:start="337:58" pos:end="337:58">+</operator> <literal type="number" pos:start="337:60" pos:end="337:61">16</literal><operator pos:start="337:62" pos:end="337:62">)</operator><operator pos:start="337:63" pos:end="337:63">)</operator></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="339:21" pos:end="341:36">else<block type="pseudo" pos:start="341:25" pos:end="341:36"><block_content pos:start="341:25" pos:end="341:36">

                        <expr_stmt pos:start="341:25" pos:end="341:36"><expr pos:start="341:25" pos:end="341:35"><name pos:start="341:25" pos:end="341:29">coeff</name> <operator pos:start="341:31" pos:end="341:31">=</operator> <literal type="number" pos:start="341:33" pos:end="341:35">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="343:21" pos:end="343:47"><expr pos:start="343:21" pos:end="343:46"><name pos:start="343:21" pos:end="343:25">coeff</name> <operator pos:start="343:27" pos:end="343:28">*=</operator> <name pos:start="343:30" pos:end="343:33">fone</name> <operator pos:start="343:35" pos:end="343:36">&gt;&gt;</operator> <operator pos:start="343:38" pos:end="343:38">(</operator><literal type="number" pos:start="343:39" pos:end="343:42">30</literal> <operator pos:start="343:42" pos:end="343:42">+</operator> <literal type="number" pos:start="343:44" pos:end="343:45">16</literal><operator pos:start="343:46" pos:end="343:46">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="345:19" pos:end="351:17">else if <condition pos:start="345:27" pos:end="345:45">(<expr pos:start="345:28" pos:end="345:44"><name pos:start="345:28" pos:end="345:32">flags</name> <operator pos:start="345:34" pos:end="345:34">&amp;</operator> <name pos:start="345:36" pos:end="345:44">SWS_GAUSS</name></expr>)</condition> <block pos:start="345:47" pos:end="351:17">{<block_content pos:start="347:21" pos:end="349:68">

                    <decl_stmt pos:start="347:21" pos:end="347:78"><decl pos:start="347:21" pos:end="347:77"><type pos:start="347:21" pos:end="347:26"><name pos:start="347:21" pos:end="347:26">double</name></type> <name pos:start="347:28" pos:end="347:28">p</name> <init pos:start="347:30" pos:end="347:77">= <expr pos:start="347:32" pos:end="347:77"><ternary pos:start="347:32" pos:end="347:77"><condition pos:start="347:32" pos:end="347:62"><expr pos:start="347:32" pos:end="347:60"><name pos:start="347:32" pos:end="347:39"><name pos:start="347:32" pos:end="347:36">param</name><index pos:start="347:37" pos:end="347:39">[<expr pos:start="347:38" pos:end="347:38"><literal type="number" pos:start="347:38" pos:end="347:38">0</literal></expr>]</index></name> <operator pos:start="347:41" pos:end="347:42">!=</operator> <name pos:start="347:44" pos:end="347:60">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="347:64" pos:end="347:71"> <expr pos:start="347:64" pos:end="347:71"><name pos:start="347:64" pos:end="347:71"><name pos:start="347:64" pos:end="347:68">param</name><index pos:start="347:69" pos:end="347:71">[<expr pos:start="347:70" pos:end="347:70"><literal type="number" pos:start="347:70" pos:end="347:70">0</literal></expr>]</index></name></expr> </then><else pos:start="347:73" pos:end="347:77">: <expr pos:start="347:75" pos:end="347:77"><literal type="number" pos:start="347:75" pos:end="347:77">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="349:21" pos:end="349:68"><expr pos:start="349:21" pos:end="349:67"><name pos:start="349:21" pos:end="349:25">coeff</name> <operator pos:start="349:27" pos:end="349:27">=</operator> <operator pos:start="349:29" pos:end="349:29">(</operator><call pos:start="349:30" pos:end="349:59"><name pos:start="349:30" pos:end="349:32">pow</name><argument_list pos:start="349:33" pos:end="349:59">(<argument pos:start="349:34" pos:end="349:36"><expr pos:start="349:34" pos:end="349:36"><literal type="number" pos:start="349:34" pos:end="349:36">2.0</literal></expr></argument>, <argument pos:start="349:39" pos:end="349:58"><expr pos:start="349:39" pos:end="349:58"><operator pos:start="349:39" pos:end="349:39">-</operator><name pos:start="349:40" pos:end="349:40">p</name> <operator pos:start="349:42" pos:end="349:42">*</operator> <name pos:start="349:44" pos:end="349:49">floatd</name> <operator pos:start="349:51" pos:end="349:51">*</operator> <name pos:start="349:53" pos:end="349:58">floatd</name></expr></argument>)</argument_list></call><operator pos:start="349:60" pos:end="349:60">)</operator> <operator pos:start="349:62" pos:end="349:62">*</operator> <name pos:start="349:64" pos:end="349:67">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="351:19" pos:end="355:17">else if <condition pos:start="351:27" pos:end="351:44">(<expr pos:start="351:28" pos:end="351:43"><name pos:start="351:28" pos:end="351:32">flags</name> <operator pos:start="351:34" pos:end="351:34">&amp;</operator> <name pos:start="351:36" pos:end="351:43">SWS_SINC</name></expr>)</condition> <block pos:start="351:46" pos:end="355:17">{<block_content pos:start="353:21" pos:end="353:84">

                    <expr_stmt pos:start="353:21" pos:end="353:84"><expr pos:start="353:21" pos:end="353:83"><name pos:start="353:21" pos:end="353:25">coeff</name> <operator pos:start="353:27" pos:end="353:27">=</operator> <operator pos:start="353:29" pos:end="353:29">(</operator><ternary pos:start="353:30" pos:end="353:75"><condition pos:start="353:30" pos:end="353:32"><expr pos:start="353:30" pos:end="353:30"><name pos:start="353:30" pos:end="353:30">d</name></expr> ?</condition><then pos:start="353:34" pos:end="353:69"> <expr pos:start="353:34" pos:end="353:69"><call pos:start="353:34" pos:end="353:51"><name pos:start="353:34" pos:end="353:36">sin</name><argument_list pos:start="353:37" pos:end="353:51">(<argument pos:start="353:38" pos:end="353:50"><expr pos:start="353:38" pos:end="353:50"><name pos:start="353:38" pos:end="353:43">floatd</name> <operator pos:start="353:45" pos:end="353:45">*</operator> <name pos:start="353:47" pos:end="353:50">M_PI</name></expr></argument>)</argument_list></call> <operator pos:start="353:53" pos:end="353:53">/</operator> <operator pos:start="353:55" pos:end="353:55">(</operator><name pos:start="353:56" pos:end="353:61">floatd</name> <operator pos:start="353:63" pos:end="353:63">*</operator> <name pos:start="353:65" pos:end="353:68">M_PI</name><operator pos:start="353:69" pos:end="353:69">)</operator></expr> </then><else pos:start="353:71" pos:end="353:75">: <expr pos:start="353:73" pos:end="353:75"><literal type="number" pos:start="353:73" pos:end="353:75">1.0</literal></expr></else></ternary><operator pos:start="353:76" pos:end="353:76">)</operator> <operator pos:start="353:78" pos:end="353:78">*</operator> <name pos:start="353:80" pos:end="353:83">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="355:19" pos:end="367:17">else if <condition pos:start="355:27" pos:end="355:47">(<expr pos:start="355:28" pos:end="355:46"><name pos:start="355:28" pos:end="355:32">flags</name> <operator pos:start="355:34" pos:end="355:34">&amp;</operator> <name pos:start="355:36" pos:end="355:46">SWS_LANCZOS</name></expr>)</condition> <block pos:start="355:49" pos:end="367:17">{<block_content pos:start="357:21" pos:end="365:34">

                    <decl_stmt pos:start="357:21" pos:end="357:78"><decl pos:start="357:21" pos:end="357:77"><type pos:start="357:21" pos:end="357:26"><name pos:start="357:21" pos:end="357:26">double</name></type> <name pos:start="357:28" pos:end="357:28">p</name> <init pos:start="357:30" pos:end="357:77">= <expr pos:start="357:32" pos:end="357:77"><ternary pos:start="357:32" pos:end="357:77"><condition pos:start="357:32" pos:end="357:62"><expr pos:start="357:32" pos:end="357:60"><name pos:start="357:32" pos:end="357:39"><name pos:start="357:32" pos:end="357:36">param</name><index pos:start="357:37" pos:end="357:39">[<expr pos:start="357:38" pos:end="357:38"><literal type="number" pos:start="357:38" pos:end="357:38">0</literal></expr>]</index></name> <operator pos:start="357:41" pos:end="357:42">!=</operator> <name pos:start="357:44" pos:end="357:60">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="357:64" pos:end="357:71"> <expr pos:start="357:64" pos:end="357:71"><name pos:start="357:64" pos:end="357:71"><name pos:start="357:64" pos:end="357:68">param</name><index pos:start="357:69" pos:end="357:71">[<expr pos:start="357:70" pos:end="357:70"><literal type="number" pos:start="357:70" pos:end="357:70">0</literal></expr>]</index></name></expr> </then><else pos:start="357:73" pos:end="357:77">: <expr pos:start="357:75" pos:end="357:77"><literal type="number" pos:start="357:75" pos:end="357:77">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="359:21" pos:end="361:79"><expr pos:start="359:21" pos:end="361:78"><name pos:start="359:21" pos:end="359:25">coeff</name> <operator pos:start="359:27" pos:end="359:27">=</operator> <operator pos:start="359:29" pos:end="359:29">(</operator><ternary pos:start="359:30" pos:end="361:70"><condition pos:start="359:30" pos:end="359:32"><expr pos:start="359:30" pos:end="359:30"><name pos:start="359:30" pos:end="359:30">d</name></expr> ?</condition><then pos:start="359:34" pos:end="361:64"> <expr pos:start="359:34" pos:end="361:64"><call pos:start="359:34" pos:end="359:51"><name pos:start="359:34" pos:end="359:36">sin</name><argument_list pos:start="359:37" pos:end="359:51">(<argument pos:start="359:38" pos:end="359:50"><expr pos:start="359:38" pos:end="359:50"><name pos:start="359:38" pos:end="359:43">floatd</name> <operator pos:start="359:45" pos:end="359:45">*</operator> <name pos:start="359:47" pos:end="359:50">M_PI</name></expr></argument>)</argument_list></call> <operator pos:start="359:53" pos:end="359:53">*</operator> <call pos:start="359:55" pos:end="359:76"><name pos:start="359:55" pos:end="359:57">sin</name><argument_list pos:start="359:58" pos:end="359:76">(<argument pos:start="359:59" pos:end="359:75"><expr pos:start="359:59" pos:end="359:75"><name pos:start="359:59" pos:end="359:64">floatd</name> <operator pos:start="359:66" pos:end="359:66">*</operator> <name pos:start="359:68" pos:end="359:71">M_PI</name> <operator pos:start="359:73" pos:end="359:73">/</operator> <name pos:start="359:75" pos:end="359:75">p</name></expr></argument>)</argument_list></call> <operator pos:start="359:78" pos:end="359:78">/</operator>

                             <operator pos:start="361:30" pos:end="361:30">(</operator><name pos:start="361:31" pos:end="361:36">floatd</name> <operator pos:start="361:38" pos:end="361:38">*</operator> <name pos:start="361:40" pos:end="361:45">floatd</name> <operator pos:start="361:47" pos:end="361:47">*</operator> <name pos:start="361:49" pos:end="361:52">M_PI</name> <operator pos:start="361:54" pos:end="361:54">*</operator> <name pos:start="361:56" pos:end="361:59">M_PI</name> <operator pos:start="361:61" pos:end="361:61">/</operator> <name pos:start="361:63" pos:end="361:63">p</name><operator pos:start="361:64" pos:end="361:64">)</operator></expr> </then><else pos:start="361:66" pos:end="361:70">: <expr pos:start="361:68" pos:end="361:70"><literal type="number" pos:start="361:68" pos:end="361:70">1.0</literal></expr></else></ternary><operator pos:start="361:71" pos:end="361:71">)</operator> <operator pos:start="361:73" pos:end="361:73">*</operator> <name pos:start="361:75" pos:end="361:78">fone</name></expr>;</expr_stmt>

                    <if_stmt pos:start="363:21" pos:end="365:34"><if pos:start="363:21" pos:end="365:34">if <condition pos:start="363:24" pos:end="363:35">(<expr pos:start="363:25" pos:end="363:34"><name pos:start="363:25" pos:end="363:30">floatd</name> <operator pos:start="363:32" pos:end="363:32">&gt;</operator> <name pos:start="363:34" pos:end="363:34">p</name></expr>)</condition><block type="pseudo" pos:start="365:25" pos:end="365:34"><block_content pos:start="365:25" pos:end="365:34">

                        <expr_stmt pos:start="365:25" pos:end="365:34"><expr pos:start="365:25" pos:end="365:33"><name pos:start="365:25" pos:end="365:29">coeff</name> <operator pos:start="365:31" pos:end="365:31">=</operator> <literal type="number" pos:start="365:33" pos:end="365:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="367:19" pos:end="377:17">else if <condition pos:start="367:27" pos:end="367:48">(<expr pos:start="367:28" pos:end="367:47"><name pos:start="367:28" pos:end="367:32">flags</name> <operator pos:start="367:34" pos:end="367:34">&amp;</operator> <name pos:start="367:36" pos:end="367:47">SWS_BILINEAR</name></expr>)</condition> <block pos:start="367:50" pos:end="377:17">{<block_content pos:start="369:21" pos:end="375:40">

                    <expr_stmt pos:start="369:21" pos:end="369:42"><expr pos:start="369:21" pos:end="369:41"><name pos:start="369:21" pos:end="369:25">coeff</name> <operator pos:start="369:27" pos:end="369:27">=</operator> <operator pos:start="369:29" pos:end="369:29">(</operator><literal type="number" pos:start="369:30" pos:end="369:30">1</literal> <operator pos:start="369:32" pos:end="369:33">&lt;&lt;</operator> <literal type="number" pos:start="369:35" pos:end="369:36">30</literal><operator pos:start="369:37" pos:end="369:37">)</operator> <operator pos:start="369:39" pos:end="369:39">-</operator> <name pos:start="369:41" pos:end="369:41">d</name></expr>;</expr_stmt>

                    <if_stmt pos:start="371:21" pos:end="373:34"><if pos:start="371:21" pos:end="373:34">if <condition pos:start="371:24" pos:end="371:34">(<expr pos:start="371:25" pos:end="371:33"><name pos:start="371:25" pos:end="371:29">coeff</name> <operator pos:start="371:31" pos:end="371:31">&lt;</operator> <literal type="number" pos:start="371:33" pos:end="371:33">0</literal></expr>)</condition><block type="pseudo" pos:start="373:25" pos:end="373:34"><block_content pos:start="373:25" pos:end="373:34">

                        <expr_stmt pos:start="373:25" pos:end="373:34"><expr pos:start="373:25" pos:end="373:33"><name pos:start="373:25" pos:end="373:29">coeff</name> <operator pos:start="373:31" pos:end="373:31">=</operator> <literal type="number" pos:start="373:33" pos:end="373:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="375:21" pos:end="375:40"><expr pos:start="375:21" pos:end="375:39"><name pos:start="375:21" pos:end="375:25">coeff</name> <operator pos:start="375:27" pos:end="375:28">*=</operator> <name pos:start="375:30" pos:end="375:33">fone</name> <operator pos:start="375:35" pos:end="375:36">&gt;&gt;</operator> <literal type="number" pos:start="375:38" pos:end="375:39">30</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="377:19" pos:end="383:17">else if <condition pos:start="377:27" pos:end="377:46">(<expr pos:start="377:28" pos:end="377:45"><name pos:start="377:28" pos:end="377:32">flags</name> <operator pos:start="377:34" pos:end="377:34">&amp;</operator> <name pos:start="377:36" pos:end="377:45">SWS_SPLINE</name></expr>)</condition> <block pos:start="377:48" pos:end="383:17">{<block_content pos:start="379:21" pos:end="381:81">

                    <decl_stmt pos:start="379:21" pos:end="379:50"><decl pos:start="379:21" pos:end="379:49"><type pos:start="379:21" pos:end="379:26"><name pos:start="379:21" pos:end="379:26">double</name></type> <name pos:start="379:28" pos:end="379:28">p</name> <init pos:start="379:30" pos:end="379:49">= <expr pos:start="379:32" pos:end="379:49"><operator pos:start="379:32" pos:end="379:32">-</operator><literal type="number" pos:start="379:33" pos:end="379:49">2.196152422706632</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="381:21" pos:end="381:81"><expr pos:start="381:21" pos:end="381:80"><name pos:start="381:21" pos:end="381:25">coeff</name> <operator pos:start="381:27" pos:end="381:27">=</operator> <call pos:start="381:29" pos:end="381:73"><name pos:start="381:29" pos:end="381:42">getSplineCoeff</name><argument_list pos:start="381:43" pos:end="381:73">(<argument pos:start="381:44" pos:end="381:46"><expr pos:start="381:44" pos:end="381:46"><literal type="number" pos:start="381:44" pos:end="381:46">1.0</literal></expr></argument>, <argument pos:start="381:49" pos:end="381:51"><expr pos:start="381:49" pos:end="381:51"><literal type="number" pos:start="381:49" pos:end="381:51">0.0</literal></expr></argument>, <argument pos:start="381:54" pos:end="381:54"><expr pos:start="381:54" pos:end="381:54"><name pos:start="381:54" pos:end="381:54">p</name></expr></argument>, <argument pos:start="381:57" pos:end="381:64"><expr pos:start="381:57" pos:end="381:64"><operator pos:start="381:57" pos:end="381:57">-</operator><name pos:start="381:58" pos:end="381:58">p</name> <operator pos:start="381:60" pos:end="381:60">-</operator> <literal type="number" pos:start="381:62" pos:end="381:64">1.0</literal></expr></argument>, <argument pos:start="381:67" pos:end="381:72"><expr pos:start="381:67" pos:end="381:72"><name pos:start="381:67" pos:end="381:72">floatd</name></expr></argument>)</argument_list></call> <operator pos:start="381:75" pos:end="381:75">*</operator> <name pos:start="381:77" pos:end="381:80">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="383:19" pos:end="389:17">else <block pos:start="383:24" pos:end="389:17">{<block_content pos:start="385:21" pos:end="387:30">

                    <expr_stmt pos:start="385:21" pos:end="385:32"><expr pos:start="385:21" pos:end="385:31"><name pos:start="385:21" pos:end="385:25">coeff</name> <operator pos:start="385:27" pos:end="385:27">=</operator> <literal type="number" pos:start="385:29" pos:end="385:31">0.0</literal></expr>;</expr_stmt> <comment type="line" pos:start="385:34" pos:end="385:54">// GCC warning killer</comment>

                    <expr_stmt pos:start="387:21" pos:end="387:30"><expr pos:start="387:21" pos:end="387:29"><call pos:start="387:21" pos:end="387:29"><name pos:start="387:21" pos:end="387:26">assert</name><argument_list pos:start="387:27" pos:end="387:29">(<argument pos:start="387:28" pos:end="387:28"><expr pos:start="387:28" pos:end="387:28"><literal type="number" pos:start="387:28" pos:end="387:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="393:17" pos:end="393:51"><expr pos:start="393:17" pos:end="393:50"><name pos:start="393:17" pos:end="393:42"><name pos:start="393:17" pos:end="393:22">filter</name><index pos:start="393:23" pos:end="393:42">[<expr pos:start="393:24" pos:end="393:41"><name pos:start="393:24" pos:end="393:24">i</name> <operator pos:start="393:26" pos:end="393:26">*</operator> <name pos:start="393:28" pos:end="393:37">filterSize</name> <operator pos:start="393:39" pos:end="393:39">+</operator> <name pos:start="393:41" pos:end="393:41">j</name></expr>]</index></name> <operator pos:start="393:44" pos:end="393:44">=</operator> <name pos:start="393:46" pos:end="393:50">coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="395:17" pos:end="395:21"><expr pos:start="395:17" pos:end="395:20"><name pos:start="395:17" pos:end="395:18">xx</name><operator pos:start="395:19" pos:end="395:20">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="399:13" pos:end="399:34"><expr pos:start="399:13" pos:end="399:33"><name pos:start="399:13" pos:end="399:21">xDstInSrc</name> <operator pos:start="399:23" pos:end="399:24">+=</operator> <literal type="number" pos:start="399:26" pos:end="399:26">2</literal> <operator pos:start="399:28" pos:end="399:28">*</operator> <name pos:start="399:30" pos:end="399:33">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="407:5" pos:end="411:7">/* apply src &amp; dst Filter to filter -&gt; filter2

     * av_free(filter);

     */</comment>

    <expr_stmt pos:start="413:5" pos:end="413:27"><expr pos:start="413:5" pos:end="413:26"><call pos:start="413:5" pos:end="413:26"><name pos:start="413:5" pos:end="413:10">assert</name><argument_list pos:start="413:11" pos:end="413:26">(<argument pos:start="413:12" pos:end="413:25"><expr pos:start="413:12" pos:end="413:25"><name pos:start="413:12" pos:end="413:21">filterSize</name> <operator pos:start="413:23" pos:end="413:23">&gt;</operator> <literal type="number" pos:start="413:25" pos:end="413:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="415:5" pos:end="415:29"><expr pos:start="415:5" pos:end="415:28"><name pos:start="415:5" pos:end="415:15">filter2Size</name> <operator pos:start="415:17" pos:end="415:17">=</operator> <name pos:start="415:19" pos:end="415:28">filterSize</name></expr>;</expr_stmt>

    <if_stmt pos:start="417:5" pos:end="419:45"><if pos:start="417:5" pos:end="419:45">if <condition pos:start="417:8" pos:end="417:18">(<expr pos:start="417:9" pos:end="417:17"><name pos:start="417:9" pos:end="417:17">srcFilter</name></expr>)</condition><block type="pseudo" pos:start="419:9" pos:end="419:45"><block_content pos:start="419:9" pos:end="419:45">

        <expr_stmt pos:start="419:9" pos:end="419:45"><expr pos:start="419:9" pos:end="419:44"><name pos:start="419:9" pos:end="419:19">filter2Size</name> <operator pos:start="419:21" pos:end="419:22">+=</operator> <name pos:start="419:24" pos:end="419:40"><name pos:start="419:24" pos:end="419:32">srcFilter</name><operator pos:start="419:33" pos:end="419:34">-&gt;</operator><name pos:start="419:35" pos:end="419:40">length</name></name> <operator pos:start="419:42" pos:end="419:42">-</operator> <literal type="number" pos:start="419:44" pos:end="419:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="421:5" pos:end="423:45"><if pos:start="421:5" pos:end="423:45">if <condition pos:start="421:8" pos:end="421:18">(<expr pos:start="421:9" pos:end="421:17"><name pos:start="421:9" pos:end="421:17">dstFilter</name></expr>)</condition><block type="pseudo" pos:start="423:9" pos:end="423:45"><block_content pos:start="423:9" pos:end="423:45">

        <expr_stmt pos:start="423:9" pos:end="423:45"><expr pos:start="423:9" pos:end="423:44"><name pos:start="423:9" pos:end="423:19">filter2Size</name> <operator pos:start="423:21" pos:end="423:22">+=</operator> <name pos:start="423:24" pos:end="423:40"><name pos:start="423:24" pos:end="423:32">dstFilter</name><operator pos:start="423:33" pos:end="423:34">-&gt;</operator><name pos:start="423:35" pos:end="423:40">length</name></name> <operator pos:start="423:42" pos:end="423:42">-</operator> <literal type="number" pos:start="423:44" pos:end="423:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:28"><expr pos:start="425:5" pos:end="425:27"><call pos:start="425:5" pos:end="425:27"><name pos:start="425:5" pos:end="425:10">assert</name><argument_list pos:start="425:11" pos:end="425:27">(<argument pos:start="425:12" pos:end="425:26"><expr pos:start="425:12" pos:end="425:26"><name pos:start="425:12" pos:end="425:22">filter2Size</name> <operator pos:start="425:24" pos:end="425:24">&gt;</operator> <literal type="number" pos:start="425:26" pos:end="425:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:82"><expr pos:start="427:5" pos:end="427:81"><call pos:start="427:5" pos:end="427:81"><name pos:start="427:5" pos:end="427:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="427:22" pos:end="427:81">(<argument pos:start="427:23" pos:end="427:26"><expr pos:start="427:23" pos:end="427:26"><name pos:start="427:23" pos:end="427:26">NULL</name></expr></argument>, <argument pos:start="427:29" pos:end="427:35"><expr pos:start="427:29" pos:end="427:35"><name pos:start="427:29" pos:end="427:35">filter2</name></expr></argument>, <argument pos:start="427:38" pos:end="427:74"><expr pos:start="427:38" pos:end="427:74"><name pos:start="427:38" pos:end="427:48">filter2Size</name> <operator pos:start="427:50" pos:end="427:50">*</operator> <name pos:start="427:52" pos:end="427:55">dstW</name> <operator pos:start="427:57" pos:end="427:57">*</operator> <sizeof pos:start="427:59" pos:end="427:74">sizeof<argument_list pos:start="427:65" pos:end="427:74">(<argument pos:start="427:66" pos:end="427:73"><expr pos:start="427:66" pos:end="427:73"><operator pos:start="427:66" pos:end="427:66">*</operator><name pos:start="427:67" pos:end="427:73">filter2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="427:77" pos:end="427:80"><expr pos:start="427:77" pos:end="427:80"><name pos:start="427:77" pos:end="427:80">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="431:5" pos:end="463:5">for <control pos:start="431:9" pos:end="431:30">(<init pos:start="431:10" pos:end="431:15"><expr pos:start="431:10" pos:end="431:14"><name pos:start="431:10" pos:end="431:10">i</name> <operator pos:start="431:12" pos:end="431:12">=</operator> <literal type="number" pos:start="431:14" pos:end="431:14">0</literal></expr>;</init> <condition pos:start="431:17" pos:end="431:25"><expr pos:start="431:17" pos:end="431:24"><name pos:start="431:17" pos:end="431:17">i</name> <operator pos:start="431:19" pos:end="431:19">&lt;</operator> <name pos:start="431:21" pos:end="431:24">dstW</name></expr>;</condition> <incr pos:start="431:27" pos:end="431:29"><expr pos:start="431:27" pos:end="431:29"><name pos:start="431:27" pos:end="431:27">i</name><operator pos:start="431:28" pos:end="431:29">++</operator></expr></incr>)</control> <block pos:start="431:32" pos:end="463:5">{<block_content pos:start="433:9" pos:end="461:72">

        <decl_stmt pos:start="433:9" pos:end="433:17"><decl pos:start="433:9" pos:end="433:13"><type pos:start="433:9" pos:end="433:11"><name pos:start="433:9" pos:end="433:11">int</name></type> <name pos:start="433:13" pos:end="433:13">j</name></decl>, <decl pos:start="433:16" pos:end="433:16"><type ref="prev" pos:start="433:9" pos:end="433:11"/><name pos:start="433:16" pos:end="433:16">k</name></decl>;</decl_stmt>



        <if_stmt pos:start="437:9" pos:end="455:9"><if pos:start="437:9" pos:end="449:9">if <condition pos:start="437:12" pos:end="437:22">(<expr pos:start="437:13" pos:end="437:21"><name pos:start="437:13" pos:end="437:21">srcFilter</name></expr>)</condition> <block pos:start="437:24" pos:end="449:9">{<block_content pos:start="439:13" pos:end="447:13">

            <for pos:start="439:13" pos:end="447:13">for <control pos:start="439:17" pos:end="439:51">(<init pos:start="439:18" pos:end="439:23"><expr pos:start="439:18" pos:end="439:22"><name pos:start="439:18" pos:end="439:18">k</name> <operator pos:start="439:20" pos:end="439:20">=</operator> <literal type="number" pos:start="439:22" pos:end="439:22">0</literal></expr>;</init> <condition pos:start="439:25" pos:end="439:46"><expr pos:start="439:25" pos:end="439:45"><name pos:start="439:25" pos:end="439:25">k</name> <operator pos:start="439:27" pos:end="439:27">&lt;</operator> <name pos:start="439:29" pos:end="439:45"><name pos:start="439:29" pos:end="439:37">srcFilter</name><operator pos:start="439:38" pos:end="439:39">-&gt;</operator><name pos:start="439:40" pos:end="439:45">length</name></name></expr>;</condition> <incr pos:start="439:48" pos:end="439:50"><expr pos:start="439:48" pos:end="439:50"><name pos:start="439:48" pos:end="439:48">k</name><operator pos:start="439:49" pos:end="439:50">++</operator></expr></incr>)</control> <block pos:start="439:53" pos:end="447:13">{<block_content pos:start="441:17" pos:end="445:73">

                <for pos:start="441:17" pos:end="445:73">for <control pos:start="441:21" pos:end="441:48">(<init pos:start="441:22" pos:end="441:27"><expr pos:start="441:22" pos:end="441:26"><name pos:start="441:22" pos:end="441:22">j</name> <operator pos:start="441:24" pos:end="441:24">=</operator> <literal type="number" pos:start="441:26" pos:end="441:26">0</literal></expr>;</init> <condition pos:start="441:29" pos:end="441:43"><expr pos:start="441:29" pos:end="441:42"><name pos:start="441:29" pos:end="441:29">j</name> <operator pos:start="441:31" pos:end="441:31">&lt;</operator> <name pos:start="441:33" pos:end="441:42">filterSize</name></expr>;</condition> <incr pos:start="441:45" pos:end="441:47"><expr pos:start="441:45" pos:end="441:47"><name pos:start="441:45" pos:end="441:45">j</name><operator pos:start="441:46" pos:end="441:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="443:21" pos:end="445:73"><block_content pos:start="443:21" pos:end="445:73">

                    <expr_stmt pos:start="443:21" pos:end="445:73"><expr pos:start="443:21" pos:end="445:72"><name pos:start="443:21" pos:end="443:52"><name pos:start="443:21" pos:end="443:27">filter2</name><index pos:start="443:28" pos:end="443:52">[<expr pos:start="443:29" pos:end="443:51"><name pos:start="443:29" pos:end="443:29">i</name> <operator pos:start="443:31" pos:end="443:31">*</operator> <name pos:start="443:33" pos:end="443:43">filter2Size</name> <operator pos:start="443:45" pos:end="443:45">+</operator> <name pos:start="443:47" pos:end="443:47">k</name> <operator pos:start="443:49" pos:end="443:49">+</operator> <name pos:start="443:51" pos:end="443:51">j</name></expr>]</index></name> <operator pos:start="443:54" pos:end="443:55">+=</operator>

                        <name pos:start="445:25" pos:end="445:43"><name pos:start="445:25" pos:end="445:33">srcFilter</name><operator pos:start="445:34" pos:end="445:35">-&gt;</operator><name pos:start="445:36" pos:end="445:40">coeff</name><index pos:start="445:41" pos:end="445:43">[<expr pos:start="445:42" pos:end="445:42"><name pos:start="445:42" pos:end="445:42">k</name></expr>]</index></name> <operator pos:start="445:45" pos:end="445:45">*</operator> <name pos:start="445:47" pos:end="445:72"><name pos:start="445:47" pos:end="445:52">filter</name><index pos:start="445:53" pos:end="445:72">[<expr pos:start="445:54" pos:end="445:71"><name pos:start="445:54" pos:end="445:54">i</name> <operator pos:start="445:56" pos:end="445:56">*</operator> <name pos:start="445:58" pos:end="445:67">filterSize</name> <operator pos:start="445:69" pos:end="445:69">+</operator> <name pos:start="445:71" pos:end="445:71">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="449:11" pos:end="455:9">else <block pos:start="449:16" pos:end="455:9">{<block_content pos:start="451:13" pos:end="453:74">

            <for pos:start="451:13" pos:end="453:74">for <control pos:start="451:17" pos:end="451:44">(<init pos:start="451:18" pos:end="451:23"><expr pos:start="451:18" pos:end="451:22"><name pos:start="451:18" pos:end="451:18">j</name> <operator pos:start="451:20" pos:end="451:20">=</operator> <literal type="number" pos:start="451:22" pos:end="451:22">0</literal></expr>;</init> <condition pos:start="451:25" pos:end="451:39"><expr pos:start="451:25" pos:end="451:38"><name pos:start="451:25" pos:end="451:25">j</name> <operator pos:start="451:27" pos:end="451:27">&lt;</operator> <name pos:start="451:29" pos:end="451:38">filterSize</name></expr>;</condition> <incr pos:start="451:41" pos:end="451:43"><expr pos:start="451:41" pos:end="451:43"><name pos:start="451:41" pos:end="451:41">j</name><operator pos:start="451:42" pos:end="451:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="453:17" pos:end="453:74"><block_content pos:start="453:17" pos:end="453:74">

                <expr_stmt pos:start="453:17" pos:end="453:74"><expr pos:start="453:17" pos:end="453:73"><name pos:start="453:17" pos:end="453:44"><name pos:start="453:17" pos:end="453:23">filter2</name><index pos:start="453:24" pos:end="453:44">[<expr pos:start="453:25" pos:end="453:43"><name pos:start="453:25" pos:end="453:25">i</name> <operator pos:start="453:27" pos:end="453:27">*</operator> <name pos:start="453:29" pos:end="453:39">filter2Size</name> <operator pos:start="453:41" pos:end="453:41">+</operator> <name pos:start="453:43" pos:end="453:43">j</name></expr>]</index></name> <operator pos:start="453:46" pos:end="453:46">=</operator> <name pos:start="453:48" pos:end="453:73"><name pos:start="453:48" pos:end="453:53">filter</name><index pos:start="453:54" pos:end="453:73">[<expr pos:start="453:55" pos:end="453:72"><name pos:start="453:55" pos:end="453:55">i</name> <operator pos:start="453:57" pos:end="453:57">*</operator> <name pos:start="453:59" pos:end="453:68">filterSize</name> <operator pos:start="453:70" pos:end="453:70">+</operator> <name pos:start="453:72" pos:end="453:72">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <comment type="line" pos:start="457:9" pos:end="457:26">// FIXME dstFilter</comment>



        <expr_stmt pos:start="461:9" pos:end="461:72"><expr pos:start="461:9" pos:end="461:71"><operator pos:start="461:9" pos:end="461:9">(</operator><operator pos:start="461:10" pos:end="461:10">*</operator><name pos:start="461:11" pos:end="461:19">filterPos</name><operator pos:start="461:20" pos:end="461:20">)</operator><index pos:start="461:21" pos:end="461:23">[<expr pos:start="461:22" pos:end="461:22"><name pos:start="461:22" pos:end="461:22">i</name></expr>]</index> <operator pos:start="461:25" pos:end="461:26">+=</operator> <operator pos:start="461:28" pos:end="461:28">(</operator><name pos:start="461:29" pos:end="461:38">filterSize</name> <operator pos:start="461:40" pos:end="461:40">-</operator> <literal type="number" pos:start="461:42" pos:end="461:42">1</literal><operator pos:start="461:43" pos:end="461:43">)</operator> <operator pos:start="461:45" pos:end="461:45">/</operator> <literal type="number" pos:start="461:47" pos:end="461:49">2</literal> <operator pos:start="461:49" pos:end="461:49">-</operator> <operator pos:start="461:51" pos:end="461:51">(</operator><name pos:start="461:52" pos:end="461:62">filter2Size</name> <operator pos:start="461:64" pos:end="461:64">-</operator> <literal type="number" pos:start="461:66" pos:end="461:66">1</literal><operator pos:start="461:67" pos:end="461:67">)</operator> <operator pos:start="461:69" pos:end="461:69">/</operator> <literal type="number" pos:start="461:71" pos:end="461:71">2</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="465:5" pos:end="465:22"><expr pos:start="465:5" pos:end="465:21"><call pos:start="465:5" pos:end="465:21"><name pos:start="465:5" pos:end="465:12">av_freep</name><argument_list pos:start="465:13" pos:end="465:21">(<argument pos:start="465:14" pos:end="465:20"><expr pos:start="465:14" pos:end="465:20"><operator pos:start="465:14" pos:end="465:14">&amp;</operator><name pos:start="465:15" pos:end="465:20">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="469:5" pos:end="469:72">/* try to reduce the filter-size (step1 find size and shift left) */</comment>

    <comment type="line" pos:start="471:5" pos:end="471:76">// Assume it is near normalized (*0.5 or *2.0 is OK but * 0.001 is not).</comment>

    <expr_stmt pos:start="473:5" pos:end="473:22"><expr pos:start="473:5" pos:end="473:21"><name pos:start="473:5" pos:end="473:17">minFilterSize</name> <operator pos:start="473:19" pos:end="473:19">=</operator> <literal type="number" pos:start="473:21" pos:end="473:21">0</literal></expr>;</expr_stmt>

    <for pos:start="475:5" pos:end="549:5">for <control pos:start="475:9" pos:end="475:35">(<init pos:start="475:10" pos:end="475:22"><expr pos:start="475:10" pos:end="475:21"><name pos:start="475:10" pos:end="475:10">i</name> <operator pos:start="475:12" pos:end="475:12">=</operator> <name pos:start="475:14" pos:end="475:17">dstW</name> <operator pos:start="475:19" pos:end="475:19">-</operator> <literal type="number" pos:start="475:21" pos:end="475:21">1</literal></expr>;</init> <condition pos:start="475:24" pos:end="475:30"><expr pos:start="475:24" pos:end="475:29"><name pos:start="475:24" pos:end="475:24">i</name> <operator pos:start="475:26" pos:end="475:27">&gt;=</operator> <literal type="number" pos:start="475:29" pos:end="475:29">0</literal></expr>;</condition> <incr pos:start="475:32" pos:end="475:34"><expr pos:start="475:32" pos:end="475:34"><name pos:start="475:32" pos:end="475:32">i</name><operator pos:start="475:33" pos:end="475:34">--</operator></expr></incr>)</control> <block pos:start="475:37" pos:end="549:5">{<block_content pos:start="477:9" pos:end="547:32">

        <decl_stmt pos:start="477:9" pos:end="477:30"><decl pos:start="477:9" pos:end="477:29"><type pos:start="477:9" pos:end="477:11"><name pos:start="477:9" pos:end="477:11">int</name></type> <name pos:start="477:13" pos:end="477:15">min</name> <init pos:start="477:17" pos:end="477:29">= <expr pos:start="477:19" pos:end="477:29"><name pos:start="477:19" pos:end="477:29">filter2Size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="479:9" pos:end="479:14"><decl pos:start="479:9" pos:end="479:13"><type pos:start="479:9" pos:end="479:11"><name pos:start="479:9" pos:end="479:11">int</name></type> <name pos:start="479:13" pos:end="479:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="481:9" pos:end="481:29"><decl pos:start="481:9" pos:end="481:28"><type pos:start="481:9" pos:end="481:15"><name pos:start="481:9" pos:end="481:15">int64_t</name></type> <name pos:start="481:17" pos:end="481:22">cutOff</name> <init pos:start="481:24" pos:end="481:28">= <expr pos:start="481:26" pos:end="481:28"><literal type="number" pos:start="481:26" pos:end="481:28">0.0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="485:9" pos:end="485:72">/* get rid of near zero elements on the left by shifting left */</comment>

        <for pos:start="487:9" pos:end="521:9">for <control pos:start="487:13" pos:end="487:41">(<init pos:start="487:14" pos:end="487:19"><expr pos:start="487:14" pos:end="487:18"><name pos:start="487:14" pos:end="487:14">j</name> <operator pos:start="487:16" pos:end="487:16">=</operator> <literal type="number" pos:start="487:18" pos:end="487:18">0</literal></expr>;</init> <condition pos:start="487:21" pos:end="487:36"><expr pos:start="487:21" pos:end="487:35"><name pos:start="487:21" pos:end="487:21">j</name> <operator pos:start="487:23" pos:end="487:23">&lt;</operator> <name pos:start="487:25" pos:end="487:35">filter2Size</name></expr>;</condition> <incr pos:start="487:38" pos:end="487:40"><expr pos:start="487:38" pos:end="487:40"><name pos:start="487:38" pos:end="487:38">j</name><operator pos:start="487:39" pos:end="487:40">++</operator></expr></incr>)</control> <block pos:start="487:43" pos:end="521:9">{<block_content pos:start="489:13" pos:end="519:30">

            <decl_stmt pos:start="489:13" pos:end="489:18"><decl pos:start="489:13" pos:end="489:17"><type pos:start="489:13" pos:end="489:15"><name pos:start="489:13" pos:end="489:15">int</name></type> <name pos:start="489:17" pos:end="489:17">k</name></decl>;</decl_stmt>

            <expr_stmt pos:start="491:13" pos:end="491:54"><expr pos:start="491:13" pos:end="491:53"><name pos:start="491:13" pos:end="491:18">cutOff</name> <operator pos:start="491:20" pos:end="491:21">+=</operator> <call pos:start="491:23" pos:end="491:53"><name pos:start="491:23" pos:end="491:27">FFABS</name><argument_list pos:start="491:28" pos:end="491:53">(<argument pos:start="491:29" pos:end="491:52"><expr pos:start="491:29" pos:end="491:52"><name pos:start="491:29" pos:end="491:52"><name pos:start="491:29" pos:end="491:35">filter2</name><index pos:start="491:36" pos:end="491:52">[<expr pos:start="491:37" pos:end="491:51"><name pos:start="491:37" pos:end="491:37">i</name> <operator pos:start="491:39" pos:end="491:39">*</operator> <name pos:start="491:41" pos:end="491:51">filter2Size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="495:13" pos:end="497:22"><if pos:start="495:13" pos:end="497:22">if <condition pos:start="495:16" pos:end="495:54">(<expr pos:start="495:17" pos:end="495:53"><name pos:start="495:17" pos:end="495:22">cutOff</name> <operator pos:start="495:24" pos:end="495:24">&gt;</operator> <name pos:start="495:26" pos:end="495:46">SWS_MAX_REDUCE_CUTOFF</name> <operator pos:start="495:48" pos:end="495:48">*</operator> <name pos:start="495:50" pos:end="495:53">fone</name></expr>)</condition><block type="pseudo" pos:start="497:17" pos:end="497:22"><block_content pos:start="497:17" pos:end="497:22">

                <break pos:start="497:17" pos:end="497:22">break;</break></block_content></block></if></if_stmt>



            <comment type="block" pos:start="501:13" pos:end="503:34">/* preserve monotonicity because the core can't handle the

             * filter otherwise */</comment>

            <if_stmt pos:start="505:13" pos:end="507:22"><if pos:start="505:13" pos:end="507:22">if <condition pos:start="505:16" pos:end="505:71">(<expr pos:start="505:17" pos:end="505:70"><name pos:start="505:17" pos:end="505:17">i</name> <operator pos:start="505:19" pos:end="505:19">&lt;</operator> <name pos:start="505:21" pos:end="505:24">dstW</name> <operator pos:start="505:26" pos:end="505:26">-</operator> <literal type="number" pos:start="505:28" pos:end="505:28">1</literal> <operator pos:start="505:30" pos:end="505:31">&amp;&amp;</operator> <operator pos:start="505:33" pos:end="505:33">(</operator><operator pos:start="505:34" pos:end="505:34">*</operator><name pos:start="505:35" pos:end="505:43">filterPos</name><operator pos:start="505:44" pos:end="505:44">)</operator><index pos:start="505:45" pos:end="505:47">[<expr pos:start="505:46" pos:end="505:46"><name pos:start="505:46" pos:end="505:46">i</name></expr>]</index> <operator pos:start="505:49" pos:end="505:50">&gt;=</operator> <operator pos:start="505:52" pos:end="505:52">(</operator><operator pos:start="505:53" pos:end="505:53">*</operator><name pos:start="505:54" pos:end="505:62">filterPos</name><operator pos:start="505:63" pos:end="505:63">)</operator><index pos:start="505:64" pos:end="505:70">[<expr pos:start="505:65" pos:end="505:69"><name pos:start="505:65" pos:end="505:65">i</name> <operator pos:start="505:67" pos:end="505:67">+</operator> <literal type="number" pos:start="505:69" pos:end="505:69">1</literal></expr>]</index></expr>)</condition><block type="pseudo" pos:start="507:17" pos:end="507:22"><block_content pos:start="507:17" pos:end="507:22">

                <break pos:start="507:17" pos:end="507:22">break;</break></block_content></block></if></if_stmt>



            <comment type="line" pos:start="511:13" pos:end="511:44">// move filter coefficients left</comment>

            <for pos:start="513:13" pos:end="515:80">for <control pos:start="513:17" pos:end="513:45">(<init pos:start="513:18" pos:end="513:23"><expr pos:start="513:18" pos:end="513:22"><name pos:start="513:18" pos:end="513:18">k</name> <operator pos:start="513:20" pos:end="513:20">=</operator> <literal type="number" pos:start="513:22" pos:end="513:22">1</literal></expr>;</init> <condition pos:start="513:25" pos:end="513:40"><expr pos:start="513:25" pos:end="513:39"><name pos:start="513:25" pos:end="513:25">k</name> <operator pos:start="513:27" pos:end="513:27">&lt;</operator> <name pos:start="513:29" pos:end="513:39">filter2Size</name></expr>;</condition> <incr pos:start="513:42" pos:end="513:44"><expr pos:start="513:42" pos:end="513:44"><name pos:start="513:42" pos:end="513:42">k</name><operator pos:start="513:43" pos:end="513:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="515:17" pos:end="515:80"><block_content pos:start="515:17" pos:end="515:80">

                <expr_stmt pos:start="515:17" pos:end="515:80"><expr pos:start="515:17" pos:end="515:79"><name pos:start="515:17" pos:end="515:48"><name pos:start="515:17" pos:end="515:23">filter2</name><index pos:start="515:24" pos:end="515:48">[<expr pos:start="515:25" pos:end="515:47"><name pos:start="515:25" pos:end="515:25">i</name> <operator pos:start="515:27" pos:end="515:27">*</operator> <name pos:start="515:29" pos:end="515:39">filter2Size</name> <operator pos:start="515:41" pos:end="515:41">+</operator> <name pos:start="515:43" pos:end="515:43">k</name> <operator pos:start="515:45" pos:end="515:45">-</operator> <literal type="number" pos:start="515:47" pos:end="515:47">1</literal></expr>]</index></name> <operator pos:start="515:50" pos:end="515:50">=</operator> <name pos:start="515:52" pos:end="515:79"><name pos:start="515:52" pos:end="515:58">filter2</name><index pos:start="515:59" pos:end="515:79">[<expr pos:start="515:60" pos:end="515:78"><name pos:start="515:60" pos:end="515:60">i</name> <operator pos:start="515:62" pos:end="515:62">*</operator> <name pos:start="515:64" pos:end="515:74">filter2Size</name> <operator pos:start="515:76" pos:end="515:76">+</operator> <name pos:start="515:78" pos:end="515:78">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="517:13" pos:end="517:49"><expr pos:start="517:13" pos:end="517:48"><name pos:start="517:13" pos:end="517:44"><name pos:start="517:13" pos:end="517:19">filter2</name><index pos:start="517:20" pos:end="517:44">[<expr pos:start="517:21" pos:end="517:43"><name pos:start="517:21" pos:end="517:21">i</name> <operator pos:start="517:23" pos:end="517:23">*</operator> <name pos:start="517:25" pos:end="517:35">filter2Size</name> <operator pos:start="517:37" pos:end="517:37">+</operator> <name pos:start="517:39" pos:end="517:39">k</name> <operator pos:start="517:41" pos:end="517:41">-</operator> <literal type="number" pos:start="517:43" pos:end="517:43">1</literal></expr>]</index></name> <operator pos:start="517:46" pos:end="517:46">=</operator> <literal type="number" pos:start="517:48" pos:end="517:48">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="519:13" pos:end="519:30"><expr pos:start="519:13" pos:end="519:29"><operator pos:start="519:13" pos:end="519:13">(</operator><operator pos:start="519:14" pos:end="519:14">*</operator><name pos:start="519:15" pos:end="519:23">filterPos</name><operator pos:start="519:24" pos:end="519:24">)</operator><index pos:start="519:25" pos:end="519:27">[<expr pos:start="519:26" pos:end="519:26"><name pos:start="519:26" pos:end="519:26">i</name></expr>]</index><operator pos:start="519:28" pos:end="519:29">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="525:9" pos:end="525:19"><expr pos:start="525:9" pos:end="525:18"><name pos:start="525:9" pos:end="525:14">cutOff</name> <operator pos:start="525:16" pos:end="525:16">=</operator> <literal type="number" pos:start="525:18" pos:end="525:18">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="527:9" pos:end="527:43">/* count near zeros on the right */</comment>

        <for pos:start="529:9" pos:end="541:9">for <control pos:start="529:13" pos:end="529:45">(<init pos:start="529:14" pos:end="529:33"><expr pos:start="529:14" pos:end="529:32"><name pos:start="529:14" pos:end="529:14">j</name> <operator pos:start="529:16" pos:end="529:16">=</operator> <name pos:start="529:18" pos:end="529:28">filter2Size</name> <operator pos:start="529:30" pos:end="529:30">-</operator> <literal type="number" pos:start="529:32" pos:end="529:32">1</literal></expr>;</init> <condition pos:start="529:35" pos:end="529:40"><expr pos:start="529:35" pos:end="529:39"><name pos:start="529:35" pos:end="529:35">j</name> <operator pos:start="529:37" pos:end="529:37">&gt;</operator> <literal type="number" pos:start="529:39" pos:end="529:39">0</literal></expr>;</condition> <incr pos:start="529:42" pos:end="529:44"><expr pos:start="529:42" pos:end="529:44"><name pos:start="529:42" pos:end="529:42">j</name><operator pos:start="529:43" pos:end="529:44">--</operator></expr></incr>)</control> <block pos:start="529:47" pos:end="541:9">{<block_content pos:start="531:13" pos:end="539:18">

            <expr_stmt pos:start="531:13" pos:end="531:58"><expr pos:start="531:13" pos:end="531:57"><name pos:start="531:13" pos:end="531:18">cutOff</name> <operator pos:start="531:20" pos:end="531:21">+=</operator> <call pos:start="531:23" pos:end="531:57"><name pos:start="531:23" pos:end="531:27">FFABS</name><argument_list pos:start="531:28" pos:end="531:57">(<argument pos:start="531:29" pos:end="531:56"><expr pos:start="531:29" pos:end="531:56"><name pos:start="531:29" pos:end="531:56"><name pos:start="531:29" pos:end="531:35">filter2</name><index pos:start="531:36" pos:end="531:56">[<expr pos:start="531:37" pos:end="531:55"><name pos:start="531:37" pos:end="531:37">i</name> <operator pos:start="531:39" pos:end="531:39">*</operator> <name pos:start="531:41" pos:end="531:51">filter2Size</name> <operator pos:start="531:53" pos:end="531:53">+</operator> <name pos:start="531:55" pos:end="531:55">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="535:13" pos:end="537:22"><if pos:start="535:13" pos:end="537:22">if <condition pos:start="535:16" pos:end="535:54">(<expr pos:start="535:17" pos:end="535:53"><name pos:start="535:17" pos:end="535:22">cutOff</name> <operator pos:start="535:24" pos:end="535:24">&gt;</operator> <name pos:start="535:26" pos:end="535:46">SWS_MAX_REDUCE_CUTOFF</name> <operator pos:start="535:48" pos:end="535:48">*</operator> <name pos:start="535:50" pos:end="535:53">fone</name></expr>)</condition><block type="pseudo" pos:start="537:17" pos:end="537:22"><block_content pos:start="537:17" pos:end="537:22">

                <break pos:start="537:17" pos:end="537:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="539:13" pos:end="539:18"><expr pos:start="539:13" pos:end="539:17"><name pos:start="539:13" pos:end="539:15">min</name><operator pos:start="539:16" pos:end="539:17">--</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="545:9" pos:end="547:32"><if pos:start="545:9" pos:end="547:32">if <condition pos:start="545:12" pos:end="545:32">(<expr pos:start="545:13" pos:end="545:31"><name pos:start="545:13" pos:end="545:15">min</name> <operator pos:start="545:17" pos:end="545:17">&gt;</operator> <name pos:start="545:19" pos:end="545:31">minFilterSize</name></expr>)</condition><block type="pseudo" pos:start="547:13" pos:end="547:32"><block_content pos:start="547:13" pos:end="547:32">

            <expr_stmt pos:start="547:13" pos:end="547:32"><expr pos:start="547:13" pos:end="547:31"><name pos:start="547:13" pos:end="547:25">minFilterSize</name> <operator pos:start="547:27" pos:end="547:27">=</operator> <name pos:start="547:29" pos:end="547:31">min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="553:5" pos:end="573:5"><if pos:start="553:5" pos:end="573:5">if <condition pos:start="553:8" pos:end="553:56">(<expr pos:start="553:9" pos:end="553:55"><name pos:start="553:9" pos:end="553:20">HAVE_ALTIVEC</name> <operator pos:start="553:22" pos:end="553:23">&amp;&amp;</operator> <name pos:start="553:25" pos:end="553:33">cpu_flags</name> <operator pos:start="553:35" pos:end="553:35">&amp;</operator> <name pos:start="553:37" pos:end="553:55">AV_CPU_FLAG_ALTIVEC</name></expr>)</condition> <block pos:start="553:58" pos:end="573:5">{<block_content pos:start="557:9" pos:end="571:28">

        <comment type="line" pos:start="555:9" pos:end="555:78">// we can handle the special case 4, so we don't want to go the full 8</comment>

        <if_stmt pos:start="557:9" pos:end="559:28"><if pos:start="557:9" pos:end="559:28">if <condition pos:start="557:12" pos:end="557:30">(<expr pos:start="557:13" pos:end="557:29"><name pos:start="557:13" pos:end="557:25">minFilterSize</name> <operator pos:start="557:27" pos:end="557:27">&lt;</operator> <literal type="number" pos:start="557:29" pos:end="557:29">5</literal></expr>)</condition><block type="pseudo" pos:start="559:13" pos:end="559:28"><block_content pos:start="559:13" pos:end="559:28">

            <expr_stmt pos:start="559:13" pos:end="559:28"><expr pos:start="559:13" pos:end="559:27"><name pos:start="559:13" pos:end="559:23">filterAlign</name> <operator pos:start="559:25" pos:end="559:25">=</operator> <literal type="number" pos:start="559:27" pos:end="559:27">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="563:9" pos:end="567:77">/* We really don't want to waste our time doing useless computation, so

         * fall back on the scalar C code for very small filters.

         * Vectorizing is worth it only if you have a decent-sized vector. */</comment>

        <if_stmt pos:start="569:9" pos:end="571:28"><if pos:start="569:9" pos:end="571:28">if <condition pos:start="569:12" pos:end="569:30">(<expr pos:start="569:13" pos:end="569:29"><name pos:start="569:13" pos:end="569:25">minFilterSize</name> <operator pos:start="569:27" pos:end="569:27">&lt;</operator> <literal type="number" pos:start="569:29" pos:end="569:29">3</literal></expr>)</condition><block type="pseudo" pos:start="571:13" pos:end="571:28"><block_content pos:start="571:13" pos:end="571:28">

            <expr_stmt pos:start="571:13" pos:end="571:28"><expr pos:start="571:13" pos:end="571:27"><name pos:start="571:13" pos:end="571:23">filterAlign</name> <operator pos:start="571:25" pos:end="571:25">=</operator> <literal type="number" pos:start="571:27" pos:end="571:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="577:5" pos:end="585:5"><if pos:start="577:5" pos:end="585:5">if <condition pos:start="577:8" pos:end="577:30">(<expr pos:start="577:9" pos:end="577:29"><call pos:start="577:9" pos:end="577:29"><name pos:start="577:9" pos:end="577:18">INLINE_MMX</name><argument_list pos:start="577:19" pos:end="577:29">(<argument pos:start="577:20" pos:end="577:28"><expr pos:start="577:20" pos:end="577:28"><name pos:start="577:20" pos:end="577:28">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="577:32" pos:end="585:5">{<block_content pos:start="581:9" pos:end="583:28">

        <comment type="line" pos:start="579:9" pos:end="579:55">// special case for unscaled vertical filtering</comment>

        <if_stmt pos:start="581:9" pos:end="583:28"><if pos:start="581:9" pos:end="583:28">if <condition pos:start="581:12" pos:end="581:51">(<expr pos:start="581:13" pos:end="581:50"><name pos:start="581:13" pos:end="581:25">minFilterSize</name> <operator pos:start="581:27" pos:end="581:28">==</operator> <literal type="number" pos:start="581:30" pos:end="581:30">1</literal> <operator pos:start="581:32" pos:end="581:33">&amp;&amp;</operator> <name pos:start="581:35" pos:end="581:45">filterAlign</name> <operator pos:start="581:47" pos:end="581:48">==</operator> <literal type="number" pos:start="581:50" pos:end="581:50">2</literal></expr>)</condition><block type="pseudo" pos:start="583:13" pos:end="583:28"><block_content pos:start="583:13" pos:end="583:28">

            <expr_stmt pos:start="583:13" pos:end="583:28"><expr pos:start="583:13" pos:end="583:27"><name pos:start="583:13" pos:end="583:23">filterAlign</name> <operator pos:start="583:25" pos:end="583:25">=</operator> <literal type="number" pos:start="583:27" pos:end="583:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="589:5" pos:end="589:30"><expr pos:start="589:5" pos:end="589:29"><call pos:start="589:5" pos:end="589:29"><name pos:start="589:5" pos:end="589:10">assert</name><argument_list pos:start="589:11" pos:end="589:29">(<argument pos:start="589:12" pos:end="589:28"><expr pos:start="589:12" pos:end="589:28"><name pos:start="589:12" pos:end="589:24">minFilterSize</name> <operator pos:start="589:26" pos:end="589:26">&gt;</operator> <literal type="number" pos:start="589:28" pos:end="589:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="591:5" pos:end="591:76"><expr pos:start="591:5" pos:end="591:75"><name pos:start="591:5" pos:end="591:14">filterSize</name> <operator pos:start="591:16" pos:end="591:16">=</operator> <operator pos:start="591:18" pos:end="591:18">(</operator><name pos:start="591:19" pos:end="591:31">minFilterSize</name> <operator pos:start="591:33" pos:end="591:33">+</operator> <operator pos:start="591:35" pos:end="591:35">(</operator><name pos:start="591:36" pos:end="591:46">filterAlign</name> <operator pos:start="591:48" pos:end="591:48">-</operator> <literal type="number" pos:start="591:50" pos:end="591:50">1</literal><operator pos:start="591:51" pos:end="591:51">)</operator><operator pos:start="591:52" pos:end="591:52">)</operator> <operator pos:start="591:54" pos:end="591:54">&amp;</operator> <operator pos:start="591:56" pos:end="591:56">(</operator><operator pos:start="591:57" pos:end="591:57">~</operator><operator pos:start="591:58" pos:end="591:58">(</operator><name pos:start="591:59" pos:end="591:69">filterAlign</name> <operator pos:start="591:71" pos:end="591:71">-</operator> <literal type="number" pos:start="591:73" pos:end="591:73">1</literal><operator pos:start="591:74" pos:end="591:74">)</operator><operator pos:start="591:75" pos:end="591:75">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="593:5" pos:end="593:27"><expr pos:start="593:5" pos:end="593:26"><call pos:start="593:5" pos:end="593:26"><name pos:start="593:5" pos:end="593:10">assert</name><argument_list pos:start="593:11" pos:end="593:26">(<argument pos:start="593:12" pos:end="593:25"><expr pos:start="593:12" pos:end="593:25"><name pos:start="593:12" pos:end="593:21">filterSize</name> <operator pos:start="593:23" pos:end="593:23">&gt;</operator> <literal type="number" pos:start="593:25" pos:end="593:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="595:5" pos:end="595:60"><expr pos:start="595:5" pos:end="595:59"><name pos:start="595:5" pos:end="595:10">filter</name> <operator pos:start="595:12" pos:end="595:12">=</operator> <call pos:start="595:14" pos:end="595:59"><name pos:start="595:14" pos:end="595:22">av_malloc</name><argument_list pos:start="595:23" pos:end="595:59">(<argument pos:start="595:24" pos:end="595:58"><expr pos:start="595:24" pos:end="595:58"><name pos:start="595:24" pos:end="595:33">filterSize</name> <operator pos:start="595:35" pos:end="595:35">*</operator> <name pos:start="595:37" pos:end="595:40">dstW</name> <operator pos:start="595:42" pos:end="595:42">*</operator> <sizeof pos:start="595:44" pos:end="595:58">sizeof<argument_list pos:start="595:50" pos:end="595:58">(<argument pos:start="595:51" pos:end="595:57"><expr pos:start="595:51" pos:end="595:57"><operator pos:start="595:51" pos:end="595:51">*</operator><name pos:start="595:52" pos:end="595:57">filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="597:5" pos:end="601:18"><if pos:start="597:5" pos:end="601:18">if <condition pos:start="597:8" pos:end="599:79">(<expr pos:start="597:9" pos:end="599:78"><name pos:start="597:9" pos:end="597:18">filterSize</name> <operator pos:start="597:20" pos:end="597:21">&gt;=</operator> <name pos:start="597:23" pos:end="597:37">MAX_FILTER_SIZE</name> <operator pos:start="597:39" pos:end="597:39">*</operator> <literal type="number" pos:start="597:41" pos:end="597:42">16</literal> <operator pos:start="597:44" pos:end="597:44">/</operator>

                      <operator pos:start="599:23" pos:end="599:23">(</operator><ternary pos:start="599:24" pos:end="599:66"><condition pos:start="599:24" pos:end="599:51"><expr pos:start="599:24" pos:end="599:49"><operator pos:start="599:24" pos:end="599:24">(</operator><name pos:start="599:25" pos:end="599:29">flags</name> <operator pos:start="599:31" pos:end="599:31">&amp;</operator> <name pos:start="599:33" pos:end="599:48">SWS_ACCURATE_RND</name><operator pos:start="599:49" pos:end="599:49">)</operator></expr> ?</condition><then pos:start="599:53" pos:end="599:61"> <expr pos:start="599:53" pos:end="599:61"><name pos:start="599:53" pos:end="599:61">APCK_SIZE</name></expr> </then><else pos:start="599:63" pos:end="599:66">: <expr pos:start="599:65" pos:end="599:66"><literal type="number" pos:start="599:65" pos:end="599:66">16</literal></expr></else></ternary><operator pos:start="599:67" pos:end="599:67">)</operator> <operator pos:start="599:69" pos:end="599:70">||</operator> <operator pos:start="599:72" pos:end="599:72">!</operator><name pos:start="599:73" pos:end="599:78">filter</name></expr>)</condition><block type="pseudo" pos:start="601:9" pos:end="601:18"><block_content pos:start="601:9" pos:end="601:18">

        <goto pos:start="601:9" pos:end="601:18">goto <name pos:start="601:14" pos:end="601:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="603:5" pos:end="603:32"><expr pos:start="603:5" pos:end="603:31"><operator pos:start="603:5" pos:end="603:5">*</operator><name pos:start="603:6" pos:end="603:18">outFilterSize</name> <operator pos:start="603:20" pos:end="603:20">=</operator> <name pos:start="603:22" pos:end="603:31">filterSize</name></expr>;</expr_stmt>



    <if_stmt pos:start="607:5" pos:end="613:40"><if pos:start="607:5" pos:end="613:40">if <condition pos:start="607:8" pos:end="607:31">(<expr pos:start="607:9" pos:end="607:30"><name pos:start="607:9" pos:end="607:13">flags</name> <operator pos:start="607:15" pos:end="607:15">&amp;</operator> <name pos:start="607:17" pos:end="607:30">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="609:9" pos:end="613:40"><block_content pos:start="609:9" pos:end="613:40">

        <expr_stmt pos:start="609:9" pos:end="613:40"><expr pos:start="609:9" pos:end="613:39"><call pos:start="609:9" pos:end="613:39"><name pos:start="609:9" pos:end="609:14">av_log</name><argument_list pos:start="609:15" pos:end="613:39">(<argument pos:start="609:16" pos:end="609:19"><expr pos:start="609:16" pos:end="609:19"><name pos:start="609:16" pos:end="609:19">NULL</name></expr></argument>, <argument pos:start="609:22" pos:end="609:35"><expr pos:start="609:22" pos:end="609:35"><name pos:start="609:22" pos:end="609:35">AV_LOG_VERBOSE</name></expr></argument>,

               <argument pos:start="611:16" pos:end="611:68"><expr pos:start="611:16" pos:end="611:68"><literal type="string" pos:start="611:16" pos:end="611:68">"SwScaler: reducing / aligning filtersize %d -&gt; %d\n"</literal></expr></argument>,

               <argument pos:start="613:16" pos:end="613:26"><expr pos:start="613:16" pos:end="613:26"><name pos:start="613:16" pos:end="613:26">filter2Size</name></expr></argument>, <argument pos:start="613:29" pos:end="613:38"><expr pos:start="613:29" pos:end="613:38"><name pos:start="613:29" pos:end="613:38">filterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="615:5" pos:end="615:57">/* try to reduce the filter-size (step2 reduce it) */</comment>

    <for pos:start="617:5" pos:end="639:5">for <control pos:start="617:9" pos:end="617:30">(<init pos:start="617:10" pos:end="617:15"><expr pos:start="617:10" pos:end="617:14"><name pos:start="617:10" pos:end="617:10">i</name> <operator pos:start="617:12" pos:end="617:12">=</operator> <literal type="number" pos:start="617:14" pos:end="617:14">0</literal></expr>;</init> <condition pos:start="617:17" pos:end="617:25"><expr pos:start="617:17" pos:end="617:24"><name pos:start="617:17" pos:end="617:17">i</name> <operator pos:start="617:19" pos:end="617:19">&lt;</operator> <name pos:start="617:21" pos:end="617:24">dstW</name></expr>;</condition> <incr pos:start="617:27" pos:end="617:29"><expr pos:start="617:27" pos:end="617:29"><name pos:start="617:27" pos:end="617:27">i</name><operator pos:start="617:28" pos:end="617:29">++</operator></expr></incr>)</control> <block pos:start="617:32" pos:end="639:5">{<block_content pos:start="619:9" pos:end="637:9">

        <decl_stmt pos:start="619:9" pos:end="619:14"><decl pos:start="619:9" pos:end="619:13"><type pos:start="619:9" pos:end="619:11"><name pos:start="619:9" pos:end="619:11">int</name></type> <name pos:start="619:13" pos:end="619:13">j</name></decl>;</decl_stmt>



        <for pos:start="623:9" pos:end="637:9">for <control pos:start="623:13" pos:end="623:40">(<init pos:start="623:14" pos:end="623:19"><expr pos:start="623:14" pos:end="623:18"><name pos:start="623:14" pos:end="623:14">j</name> <operator pos:start="623:16" pos:end="623:16">=</operator> <literal type="number" pos:start="623:18" pos:end="623:18">0</literal></expr>;</init> <condition pos:start="623:21" pos:end="623:35"><expr pos:start="623:21" pos:end="623:34"><name pos:start="623:21" pos:end="623:21">j</name> <operator pos:start="623:23" pos:end="623:23">&lt;</operator> <name pos:start="623:25" pos:end="623:34">filterSize</name></expr>;</condition> <incr pos:start="623:37" pos:end="623:39"><expr pos:start="623:37" pos:end="623:39"><name pos:start="623:37" pos:end="623:37">j</name><operator pos:start="623:38" pos:end="623:39">++</operator></expr></incr>)</control> <block pos:start="623:42" pos:end="637:9">{<block_content pos:start="625:13" pos:end="635:47">

            <if_stmt pos:start="625:13" pos:end="631:74"><if pos:start="625:13" pos:end="627:47">if <condition pos:start="625:16" pos:end="625:33">(<expr pos:start="625:17" pos:end="625:32"><name pos:start="625:17" pos:end="625:17">j</name> <operator pos:start="625:19" pos:end="625:20">&gt;=</operator> <name pos:start="625:22" pos:end="625:32">filter2Size</name></expr>)</condition><block type="pseudo" pos:start="627:17" pos:end="627:47"><block_content pos:start="627:17" pos:end="627:47">

                <expr_stmt pos:start="627:17" pos:end="627:47"><expr pos:start="627:17" pos:end="627:46"><name pos:start="627:17" pos:end="627:42"><name pos:start="627:17" pos:end="627:22">filter</name><index pos:start="627:23" pos:end="627:42">[<expr pos:start="627:24" pos:end="627:41"><name pos:start="627:24" pos:end="627:24">i</name> <operator pos:start="627:26" pos:end="627:26">*</operator> <name pos:start="627:28" pos:end="627:37">filterSize</name> <operator pos:start="627:39" pos:end="627:39">+</operator> <name pos:start="627:41" pos:end="627:41">j</name></expr>]</index></name> <operator pos:start="627:44" pos:end="627:44">=</operator> <literal type="number" pos:start="627:46" pos:end="627:46">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="629:13" pos:end="631:74">else<block type="pseudo" pos:start="631:17" pos:end="631:74"><block_content pos:start="631:17" pos:end="631:74">

                <expr_stmt pos:start="631:17" pos:end="631:74"><expr pos:start="631:17" pos:end="631:73"><name pos:start="631:17" pos:end="631:42"><name pos:start="631:17" pos:end="631:22">filter</name><index pos:start="631:23" pos:end="631:42">[<expr pos:start="631:24" pos:end="631:41"><name pos:start="631:24" pos:end="631:24">i</name> <operator pos:start="631:26" pos:end="631:26">*</operator> <name pos:start="631:28" pos:end="631:37">filterSize</name> <operator pos:start="631:39" pos:end="631:39">+</operator> <name pos:start="631:41" pos:end="631:41">j</name></expr>]</index></name> <operator pos:start="631:44" pos:end="631:44">=</operator> <name pos:start="631:46" pos:end="631:73"><name pos:start="631:46" pos:end="631:52">filter2</name><index pos:start="631:53" pos:end="631:73">[<expr pos:start="631:54" pos:end="631:72"><name pos:start="631:54" pos:end="631:54">i</name> <operator pos:start="631:56" pos:end="631:56">*</operator> <name pos:start="631:58" pos:end="631:68">filter2Size</name> <operator pos:start="631:70" pos:end="631:70">+</operator> <name pos:start="631:72" pos:end="631:72">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="633:13" pos:end="635:47"><if pos:start="633:13" pos:end="635:47">if <condition pos:start="633:16" pos:end="633:61">(<expr pos:start="633:17" pos:end="633:60"><operator pos:start="633:17" pos:end="633:17">(</operator><name pos:start="633:18" pos:end="633:22">flags</name> <operator pos:start="633:24" pos:end="633:24">&amp;</operator> <name pos:start="633:26" pos:end="633:37">SWS_BITEXACT</name><operator pos:start="633:38" pos:end="633:38">)</operator> <operator pos:start="633:40" pos:end="633:41">&amp;&amp;</operator> <name pos:start="633:43" pos:end="633:43">j</name> <operator pos:start="633:45" pos:end="633:46">&gt;=</operator> <name pos:start="633:48" pos:end="633:60">minFilterSize</name></expr>)</condition><block type="pseudo" pos:start="635:17" pos:end="635:47"><block_content pos:start="635:17" pos:end="635:47">

                <expr_stmt pos:start="635:17" pos:end="635:47"><expr pos:start="635:17" pos:end="635:46"><name pos:start="635:17" pos:end="635:42"><name pos:start="635:17" pos:end="635:22">filter</name><index pos:start="635:23" pos:end="635:42">[<expr pos:start="635:24" pos:end="635:41"><name pos:start="635:24" pos:end="635:24">i</name> <operator pos:start="635:26" pos:end="635:26">*</operator> <name pos:start="635:28" pos:end="635:37">filterSize</name> <operator pos:start="635:39" pos:end="635:39">+</operator> <name pos:start="635:41" pos:end="635:41">j</name></expr>]</index></name> <operator pos:start="635:44" pos:end="635:44">=</operator> <literal type="number" pos:start="635:46" pos:end="635:46">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="line" pos:start="643:5" pos:end="643:47">// FIXME try to align filterPos if possible</comment>



    <comment type="line" pos:start="647:5" pos:end="647:18">// fix borders</comment>

    <if_stmt pos:start="649:5" pos:end="697:5"><if pos:start="649:5" pos:end="697:5">if <condition pos:start="649:8" pos:end="649:22">(<expr pos:start="649:9" pos:end="649:21"><name pos:start="649:9" pos:end="649:21">is_horizontal</name></expr>)</condition> <block pos:start="649:24" pos:end="697:5">{<block_content pos:start="651:9" pos:end="695:9">

        <for pos:start="651:9" pos:end="695:9">for <control pos:start="651:13" pos:end="651:34">(<init pos:start="651:14" pos:end="651:19"><expr pos:start="651:14" pos:end="651:18"><name pos:start="651:14" pos:end="651:14">i</name> <operator pos:start="651:16" pos:end="651:16">=</operator> <literal type="number" pos:start="651:18" pos:end="651:18">0</literal></expr>;</init> <condition pos:start="651:21" pos:end="651:29"><expr pos:start="651:21" pos:end="651:28"><name pos:start="651:21" pos:end="651:21">i</name> <operator pos:start="651:23" pos:end="651:23">&lt;</operator> <name pos:start="651:25" pos:end="651:28">dstW</name></expr>;</condition> <incr pos:start="651:31" pos:end="651:33"><expr pos:start="651:31" pos:end="651:33"><name pos:start="651:31" pos:end="651:31">i</name><operator pos:start="651:32" pos:end="651:33">++</operator></expr></incr>)</control> <block pos:start="651:36" pos:end="695:9">{<block_content pos:start="653:13" pos:end="693:13">

            <decl_stmt pos:start="653:13" pos:end="653:18"><decl pos:start="653:13" pos:end="653:17"><type pos:start="653:13" pos:end="653:15"><name pos:start="653:13" pos:end="653:15">int</name></type> <name pos:start="653:17" pos:end="653:17">j</name></decl>;</decl_stmt>

            <if_stmt pos:start="655:13" pos:end="671:13"><if pos:start="655:13" pos:end="671:13">if <condition pos:start="655:16" pos:end="655:36">(<expr pos:start="655:17" pos:end="655:35"><operator pos:start="655:17" pos:end="655:17">(</operator><operator pos:start="655:18" pos:end="655:18">*</operator><name pos:start="655:19" pos:end="655:27">filterPos</name><operator pos:start="655:28" pos:end="655:28">)</operator><index pos:start="655:29" pos:end="655:31">[<expr pos:start="655:30" pos:end="655:30"><name pos:start="655:30" pos:end="655:30">i</name></expr>]</index> <operator pos:start="655:33" pos:end="655:33">&lt;</operator> <literal type="number" pos:start="655:35" pos:end="655:35">0</literal></expr>)</condition> <block pos:start="655:38" pos:end="671:13">{<block_content pos:start="659:17" pos:end="669:36">

                <comment type="line" pos:start="657:17" pos:end="657:76">// move filter coefficients left to compensate for filterPos</comment>

                <for pos:start="659:17" pos:end="667:17">for <control pos:start="659:21" pos:end="659:48">(<init pos:start="659:22" pos:end="659:27"><expr pos:start="659:22" pos:end="659:26"><name pos:start="659:22" pos:end="659:22">j</name> <operator pos:start="659:24" pos:end="659:24">=</operator> <literal type="number" pos:start="659:26" pos:end="659:26">1</literal></expr>;</init> <condition pos:start="659:29" pos:end="659:43"><expr pos:start="659:29" pos:end="659:42"><name pos:start="659:29" pos:end="659:29">j</name> <operator pos:start="659:31" pos:end="659:31">&lt;</operator> <name pos:start="659:33" pos:end="659:42">filterSize</name></expr>;</condition> <incr pos:start="659:45" pos:end="659:47"><expr pos:start="659:45" pos:end="659:47"><name pos:start="659:45" pos:end="659:45">j</name><operator pos:start="659:46" pos:end="659:47">++</operator></expr></incr>)</control> <block pos:start="659:50" pos:end="667:17">{<block_content pos:start="661:21" pos:end="665:55">

                    <decl_stmt pos:start="661:21" pos:end="661:61"><decl pos:start="661:21" pos:end="661:60"><type pos:start="661:21" pos:end="661:23"><name pos:start="661:21" pos:end="661:23">int</name></type> <name pos:start="661:25" pos:end="661:28">left</name> <init pos:start="661:30" pos:end="661:60">= <expr pos:start="661:32" pos:end="661:60"><call pos:start="661:32" pos:end="661:60"><name pos:start="661:32" pos:end="661:36">FFMAX</name><argument_list pos:start="661:37" pos:end="661:60">(<argument pos:start="661:38" pos:end="661:56"><expr pos:start="661:38" pos:end="661:56"><name pos:start="661:38" pos:end="661:38">j</name> <operator pos:start="661:40" pos:end="661:40">+</operator> <operator pos:start="661:42" pos:end="661:42">(</operator><operator pos:start="661:43" pos:end="661:43">*</operator><name pos:start="661:44" pos:end="661:52">filterPos</name><operator pos:start="661:53" pos:end="661:53">)</operator><index pos:start="661:54" pos:end="661:56">[<expr pos:start="661:55" pos:end="661:55"><name pos:start="661:55" pos:end="661:55">i</name></expr>]</index></expr></argument>, <argument pos:start="661:59" pos:end="661:59"><expr pos:start="661:59" pos:end="661:59"><literal type="number" pos:start="661:59" pos:end="661:59">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="663:21" pos:end="663:80"><expr pos:start="663:21" pos:end="663:79"><name pos:start="663:21" pos:end="663:49"><name pos:start="663:21" pos:end="663:26">filter</name><index pos:start="663:27" pos:end="663:49">[<expr pos:start="663:28" pos:end="663:48"><name pos:start="663:28" pos:end="663:28">i</name> <operator pos:start="663:30" pos:end="663:30">*</operator> <name pos:start="663:32" pos:end="663:41">filterSize</name> <operator pos:start="663:43" pos:end="663:43">+</operator> <name pos:start="663:45" pos:end="663:48">left</name></expr>]</index></name> <operator pos:start="663:51" pos:end="663:52">+=</operator> <name pos:start="663:54" pos:end="663:79"><name pos:start="663:54" pos:end="663:59">filter</name><index pos:start="663:60" pos:end="663:79">[<expr pos:start="663:61" pos:end="663:78"><name pos:start="663:61" pos:end="663:61">i</name> <operator pos:start="663:63" pos:end="663:63">*</operator> <name pos:start="663:65" pos:end="663:74">filterSize</name> <operator pos:start="663:76" pos:end="663:76">+</operator> <name pos:start="663:78" pos:end="663:78">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="665:21" pos:end="665:55"><expr pos:start="665:21" pos:end="665:54"><name pos:start="665:21" pos:end="665:46"><name pos:start="665:21" pos:end="665:26">filter</name><index pos:start="665:27" pos:end="665:46">[<expr pos:start="665:28" pos:end="665:45"><name pos:start="665:28" pos:end="665:28">i</name> <operator pos:start="665:30" pos:end="665:30">*</operator> <name pos:start="665:32" pos:end="665:41">filterSize</name> <operator pos:start="665:43" pos:end="665:43">+</operator> <name pos:start="665:45" pos:end="665:45">j</name></expr>]</index></name>     <operator pos:start="665:52" pos:end="665:52">=</operator> <literal type="number" pos:start="665:54" pos:end="665:54">0</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="669:17" pos:end="669:36"><expr pos:start="669:17" pos:end="669:35"><operator pos:start="669:17" pos:end="669:17">(</operator><operator pos:start="669:18" pos:end="669:18">*</operator><name pos:start="669:19" pos:end="669:27">filterPos</name><operator pos:start="669:28" pos:end="669:28">)</operator><index pos:start="669:29" pos:end="669:31">[<expr pos:start="669:30" pos:end="669:30"><name pos:start="669:30" pos:end="669:30">i</name></expr>]</index> <operator pos:start="669:33" pos:end="669:33">=</operator> <literal type="number" pos:start="669:35" pos:end="669:35">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="675:13" pos:end="693:13"><if pos:start="675:13" pos:end="693:13">if <condition pos:start="675:16" pos:end="675:52">(<expr pos:start="675:17" pos:end="675:51"><operator pos:start="675:17" pos:end="675:17">(</operator><operator pos:start="675:18" pos:end="675:18">*</operator><name pos:start="675:19" pos:end="675:27">filterPos</name><operator pos:start="675:28" pos:end="675:28">)</operator><index pos:start="675:29" pos:end="675:31">[<expr pos:start="675:30" pos:end="675:30"><name pos:start="675:30" pos:end="675:30">i</name></expr>]</index> <operator pos:start="675:33" pos:end="675:33">+</operator> <name pos:start="675:35" pos:end="675:44">filterSize</name> <operator pos:start="675:46" pos:end="675:46">&gt;</operator> <name pos:start="675:48" pos:end="675:51">srcW</name></expr>)</condition> <block pos:start="675:54" pos:end="693:13">{<block_content pos:start="677:17" pos:end="691:52">

                <decl_stmt pos:start="677:17" pos:end="677:64"><decl pos:start="677:17" pos:end="677:63"><type pos:start="677:17" pos:end="677:19"><name pos:start="677:17" pos:end="677:19">int</name></type> <name pos:start="677:21" pos:end="677:25">shift</name> <init pos:start="677:27" pos:end="677:63">= <expr pos:start="677:29" pos:end="677:63"><operator pos:start="677:29" pos:end="677:29">(</operator><operator pos:start="677:30" pos:end="677:30">*</operator><name pos:start="677:31" pos:end="677:39">filterPos</name><operator pos:start="677:40" pos:end="677:40">)</operator><index pos:start="677:41" pos:end="677:43">[<expr pos:start="677:42" pos:end="677:42"><name pos:start="677:42" pos:end="677:42">i</name></expr>]</index> <operator pos:start="677:45" pos:end="677:45">+</operator> <name pos:start="677:47" pos:end="677:56">filterSize</name> <operator pos:start="677:58" pos:end="677:58">-</operator> <name pos:start="677:60" pos:end="677:63">srcW</name></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:start="679:17" pos:end="679:77">// move filter coefficients right to compensate for filterPos</comment>

                <for pos:start="681:17" pos:end="689:17">for <control pos:start="681:21" pos:end="681:53">(<init pos:start="681:22" pos:end="681:40"><expr pos:start="681:22" pos:end="681:39"><name pos:start="681:22" pos:end="681:22">j</name> <operator pos:start="681:24" pos:end="681:24">=</operator> <name pos:start="681:26" pos:end="681:35">filterSize</name> <operator pos:start="681:37" pos:end="681:37">-</operator> <literal type="number" pos:start="681:39" pos:end="681:39">2</literal></expr>;</init> <condition pos:start="681:42" pos:end="681:48"><expr pos:start="681:42" pos:end="681:47"><name pos:start="681:42" pos:end="681:42">j</name> <operator pos:start="681:44" pos:end="681:45">&gt;=</operator> <literal type="number" pos:start="681:47" pos:end="681:47">0</literal></expr>;</condition> <incr pos:start="681:50" pos:end="681:52"><expr pos:start="681:50" pos:end="681:52"><name pos:start="681:50" pos:end="681:50">j</name><operator pos:start="681:51" pos:end="681:52">--</operator></expr></incr>)</control> <block pos:start="681:55" pos:end="689:17">{<block_content pos:start="683:21" pos:end="687:56">

                    <decl_stmt pos:start="683:21" pos:end="683:65"><decl pos:start="683:21" pos:end="683:64"><type pos:start="683:21" pos:end="683:23"><name pos:start="683:21" pos:end="683:23">int</name></type> <name pos:start="683:25" pos:end="683:29">right</name> <init pos:start="683:31" pos:end="683:64">= <expr pos:start="683:33" pos:end="683:64"><call pos:start="683:33" pos:end="683:64"><name pos:start="683:33" pos:end="683:37">FFMIN</name><argument_list pos:start="683:38" pos:end="683:64">(<argument pos:start="683:39" pos:end="683:47"><expr pos:start="683:39" pos:end="683:47"><name pos:start="683:39" pos:end="683:39">j</name> <operator pos:start="683:41" pos:end="683:41">+</operator> <name pos:start="683:43" pos:end="683:47">shift</name></expr></argument>, <argument pos:start="683:50" pos:end="683:63"><expr pos:start="683:50" pos:end="683:63"><name pos:start="683:50" pos:end="683:59">filterSize</name> <operator pos:start="683:61" pos:end="683:61">-</operator> <literal type="number" pos:start="683:63" pos:end="683:63">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="685:21" pos:end="685:81"><expr pos:start="685:21" pos:end="685:80"><name pos:start="685:21" pos:end="685:50"><name pos:start="685:21" pos:end="685:26">filter</name><index pos:start="685:27" pos:end="685:50">[<expr pos:start="685:28" pos:end="685:49"><name pos:start="685:28" pos:end="685:28">i</name> <operator pos:start="685:30" pos:end="685:30">*</operator> <name pos:start="685:32" pos:end="685:41">filterSize</name> <operator pos:start="685:43" pos:end="685:43">+</operator> <name pos:start="685:45" pos:end="685:49">right</name></expr>]</index></name> <operator pos:start="685:52" pos:end="685:53">+=</operator> <name pos:start="685:55" pos:end="685:80"><name pos:start="685:55" pos:end="685:60">filter</name><index pos:start="685:61" pos:end="685:80">[<expr pos:start="685:62" pos:end="685:79"><name pos:start="685:62" pos:end="685:62">i</name> <operator pos:start="685:64" pos:end="685:64">*</operator> <name pos:start="685:66" pos:end="685:75">filterSize</name> <operator pos:start="685:77" pos:end="685:77">+</operator> <name pos:start="685:79" pos:end="685:79">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="687:21" pos:end="687:56"><expr pos:start="687:21" pos:end="687:55"><name pos:start="687:21" pos:end="687:46"><name pos:start="687:21" pos:end="687:26">filter</name><index pos:start="687:27" pos:end="687:46">[<expr pos:start="687:28" pos:end="687:45"><name pos:start="687:28" pos:end="687:28">i</name> <operator pos:start="687:30" pos:end="687:30">*</operator> <name pos:start="687:32" pos:end="687:41">filterSize</name> <operator pos:start="687:43" pos:end="687:43">+</operator> <name pos:start="687:45" pos:end="687:45">j</name></expr>]</index></name>      <operator pos:start="687:53" pos:end="687:53">=</operator> <literal type="number" pos:start="687:55" pos:end="687:55">0</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="691:17" pos:end="691:52"><expr pos:start="691:17" pos:end="691:51"><operator pos:start="691:17" pos:end="691:17">(</operator><operator pos:start="691:18" pos:end="691:18">*</operator><name pos:start="691:19" pos:end="691:27">filterPos</name><operator pos:start="691:28" pos:end="691:28">)</operator><index pos:start="691:29" pos:end="691:31">[<expr pos:start="691:30" pos:end="691:30"><name pos:start="691:30" pos:end="691:30">i</name></expr>]</index> <operator pos:start="691:33" pos:end="691:33">=</operator> <name pos:start="691:35" pos:end="691:38">srcW</name> <operator pos:start="691:40" pos:end="691:40">-</operator> <name pos:start="691:42" pos:end="691:51">filterSize</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="701:5" pos:end="701:65">// Note the +1 is for the MMX scaler which reads over the end</comment>

    <comment type="block" pos:start="703:5" pos:end="703:65">/* align at 16 for AltiVec (needed by hScale_altivec_real) */</comment>

    <expr_stmt pos:start="705:5" pos:end="707:75"><expr pos:start="705:5" pos:end="707:74"><call pos:start="705:5" pos:end="707:74"><name pos:start="705:5" pos:end="705:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="705:22" pos:end="707:74">(<argument pos:start="705:23" pos:end="705:26"><expr pos:start="705:23" pos:end="705:26"><name pos:start="705:23" pos:end="705:26">NULL</name></expr></argument>, <argument pos:start="705:29" pos:end="705:38"><expr pos:start="705:29" pos:end="705:38"><operator pos:start="705:29" pos:end="705:29">*</operator><name pos:start="705:30" pos:end="705:38">outFilter</name></expr></argument>,

                      <argument pos:start="707:23" pos:end="707:67"><expr pos:start="707:23" pos:end="707:67"><operator pos:start="707:23" pos:end="707:23">*</operator><name pos:start="707:24" pos:end="707:36">outFilterSize</name> <operator pos:start="707:38" pos:end="707:38">*</operator> <operator pos:start="707:40" pos:end="707:40">(</operator><name pos:start="707:41" pos:end="707:44">dstW</name> <operator pos:start="707:46" pos:end="707:46">+</operator> <literal type="number" pos:start="707:48" pos:end="707:48">3</literal><operator pos:start="707:49" pos:end="707:49">)</operator> <operator pos:start="707:51" pos:end="707:51">*</operator> <sizeof pos:start="707:53" pos:end="707:67">sizeof<argument_list pos:start="707:59" pos:end="707:67">(<argument pos:start="707:60" pos:end="707:66"><expr pos:start="707:60" pos:end="707:66"><name pos:start="707:60" pos:end="707:66">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="707:70" pos:end="707:73"><expr pos:start="707:70" pos:end="707:73"><name pos:start="707:70" pos:end="707:73">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="711:5" pos:end="711:40">/* normalize &amp; store in outFilter */</comment>

    <for pos:start="713:5" pos:end="743:5">for <control pos:start="713:9" pos:end="713:30">(<init pos:start="713:10" pos:end="713:15"><expr pos:start="713:10" pos:end="713:14"><name pos:start="713:10" pos:end="713:10">i</name> <operator pos:start="713:12" pos:end="713:12">=</operator> <literal type="number" pos:start="713:14" pos:end="713:14">0</literal></expr>;</init> <condition pos:start="713:17" pos:end="713:25"><expr pos:start="713:17" pos:end="713:24"><name pos:start="713:17" pos:end="713:17">i</name> <operator pos:start="713:19" pos:end="713:19">&lt;</operator> <name pos:start="713:21" pos:end="713:24">dstW</name></expr>;</condition> <incr pos:start="713:27" pos:end="713:29"><expr pos:start="713:27" pos:end="713:29"><name pos:start="713:27" pos:end="713:27">i</name><operator pos:start="713:28" pos:end="713:29">++</operator></expr></incr>)</control> <block pos:start="713:32" pos:end="743:5">{<block_content pos:start="715:9" pos:end="741:9">

        <decl_stmt pos:start="715:9" pos:end="715:14"><decl pos:start="715:9" pos:end="715:13"><type pos:start="715:9" pos:end="715:11"><name pos:start="715:9" pos:end="715:11">int</name></type> <name pos:start="715:13" pos:end="715:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="717:9" pos:end="717:26"><decl pos:start="717:9" pos:end="717:25"><type pos:start="717:9" pos:end="717:15"><name pos:start="717:9" pos:end="717:15">int64_t</name></type> <name pos:start="717:17" pos:end="717:21">error</name> <init pos:start="717:23" pos:end="717:25">= <expr pos:start="717:25" pos:end="717:25"><literal type="number" pos:start="717:25" pos:end="717:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="719:9" pos:end="719:26"><decl pos:start="719:9" pos:end="719:25"><type pos:start="719:9" pos:end="719:15"><name pos:start="719:9" pos:end="719:15">int64_t</name></type> <name pos:start="719:17" pos:end="719:19">sum</name>   <init pos:start="719:23" pos:end="719:25">= <expr pos:start="719:25" pos:end="719:25"><literal type="number" pos:start="719:25" pos:end="719:25">0</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="723:9" pos:end="727:9">for <control pos:start="723:13" pos:end="723:40">(<init pos:start="723:14" pos:end="723:19"><expr pos:start="723:14" pos:end="723:18"><name pos:start="723:14" pos:end="723:14">j</name> <operator pos:start="723:16" pos:end="723:16">=</operator> <literal type="number" pos:start="723:18" pos:end="723:18">0</literal></expr>;</init> <condition pos:start="723:21" pos:end="723:35"><expr pos:start="723:21" pos:end="723:34"><name pos:start="723:21" pos:end="723:21">j</name> <operator pos:start="723:23" pos:end="723:23">&lt;</operator> <name pos:start="723:25" pos:end="723:34">filterSize</name></expr>;</condition> <incr pos:start="723:37" pos:end="723:39"><expr pos:start="723:37" pos:end="723:39"><name pos:start="723:37" pos:end="723:37">j</name><operator pos:start="723:38" pos:end="723:39">++</operator></expr></incr>)</control> <block pos:start="723:42" pos:end="727:9">{<block_content pos:start="725:13" pos:end="725:46">

            <expr_stmt pos:start="725:13" pos:end="725:46"><expr pos:start="725:13" pos:end="725:45"><name pos:start="725:13" pos:end="725:15">sum</name> <operator pos:start="725:17" pos:end="725:18">+=</operator> <name pos:start="725:20" pos:end="725:45"><name pos:start="725:20" pos:end="725:25">filter</name><index pos:start="725:26" pos:end="725:45">[<expr pos:start="725:27" pos:end="725:44"><name pos:start="725:27" pos:end="725:27">i</name> <operator pos:start="725:29" pos:end="725:29">*</operator> <name pos:start="725:31" pos:end="725:40">filterSize</name> <operator pos:start="725:42" pos:end="725:42">+</operator> <name pos:start="725:44" pos:end="725:44">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="729:9" pos:end="729:36"><expr pos:start="729:9" pos:end="729:35"><name pos:start="729:9" pos:end="729:11">sum</name> <operator pos:start="729:13" pos:end="729:13">=</operator> <operator pos:start="729:15" pos:end="729:15">(</operator><name pos:start="729:16" pos:end="729:18">sum</name> <operator pos:start="729:20" pos:end="729:20">+</operator> <name pos:start="729:22" pos:end="729:24">one</name> <operator pos:start="729:26" pos:end="729:26">/</operator> <literal type="number" pos:start="729:28" pos:end="729:28">2</literal><operator pos:start="729:29" pos:end="729:29">)</operator> <operator pos:start="729:31" pos:end="729:31">/</operator> <name pos:start="729:33" pos:end="729:35">one</name></expr>;</expr_stmt>

        <for pos:start="731:9" pos:end="741:9">for <control pos:start="731:13" pos:end="731:44">(<init pos:start="731:14" pos:end="731:19"><expr pos:start="731:14" pos:end="731:18"><name pos:start="731:14" pos:end="731:14">j</name> <operator pos:start="731:16" pos:end="731:16">=</operator> <literal type="number" pos:start="731:18" pos:end="731:18">0</literal></expr>;</init> <condition pos:start="731:21" pos:end="731:39"><expr pos:start="731:21" pos:end="731:38"><name pos:start="731:21" pos:end="731:21">j</name> <operator pos:start="731:23" pos:end="731:23">&lt;</operator> <operator pos:start="731:25" pos:end="731:25">*</operator><name pos:start="731:26" pos:end="731:38">outFilterSize</name></expr>;</condition> <incr pos:start="731:41" pos:end="731:43"><expr pos:start="731:41" pos:end="731:43"><name pos:start="731:41" pos:end="731:41">j</name><operator pos:start="731:42" pos:end="731:43">++</operator></expr></incr>)</control> <block pos:start="731:46" pos:end="741:9">{<block_content pos:start="733:13" pos:end="739:68">

            <decl_stmt pos:start="733:13" pos:end="733:59"><decl pos:start="733:13" pos:end="733:58"><type pos:start="733:13" pos:end="733:19"><name pos:start="733:13" pos:end="733:19">int64_t</name></type> <name pos:start="733:21" pos:end="733:21">v</name> <init pos:start="733:23" pos:end="733:58">= <expr pos:start="733:25" pos:end="733:58"><name pos:start="733:25" pos:end="733:50"><name pos:start="733:25" pos:end="733:30">filter</name><index pos:start="733:31" pos:end="733:50">[<expr pos:start="733:32" pos:end="733:49"><name pos:start="733:32" pos:end="733:32">i</name> <operator pos:start="733:34" pos:end="733:34">*</operator> <name pos:start="733:36" pos:end="733:45">filterSize</name> <operator pos:start="733:47" pos:end="733:47">+</operator> <name pos:start="733:49" pos:end="733:49">j</name></expr>]</index></name> <operator pos:start="733:52" pos:end="733:52">+</operator> <name pos:start="733:54" pos:end="733:58">error</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="735:13" pos:end="735:44"><decl pos:start="735:13" pos:end="735:43"><type pos:start="735:13" pos:end="735:15"><name pos:start="735:13" pos:end="735:15">int</name></type> <name pos:start="735:17" pos:end="735:20">intV</name>  <init pos:start="735:23" pos:end="735:43">= <expr pos:start="735:25" pos:end="735:43"><call pos:start="735:25" pos:end="735:43"><name pos:start="735:25" pos:end="735:35">ROUNDED_DIV</name><argument_list pos:start="735:36" pos:end="735:43">(<argument pos:start="735:37" pos:end="735:37"><expr pos:start="735:37" pos:end="735:37"><name pos:start="735:37" pos:end="735:37">v</name></expr></argument>, <argument pos:start="735:40" pos:end="735:42"><expr pos:start="735:40" pos:end="735:42"><name pos:start="735:40" pos:end="735:42">sum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="737:13" pos:end="737:58"><expr pos:start="737:13" pos:end="737:57"><operator pos:start="737:13" pos:end="737:13">(</operator><operator pos:start="737:14" pos:end="737:14">*</operator><name pos:start="737:15" pos:end="737:23">outFilter</name><operator pos:start="737:24" pos:end="737:24">)</operator><index pos:start="737:25" pos:end="737:50">[<expr pos:start="737:26" pos:end="737:49"><name pos:start="737:26" pos:end="737:26">i</name> <operator pos:start="737:28" pos:end="737:28">*</operator> <operator pos:start="737:30" pos:end="737:30">(</operator><operator pos:start="737:31" pos:end="737:31">*</operator><name pos:start="737:32" pos:end="737:44">outFilterSize</name><operator pos:start="737:45" pos:end="737:45">)</operator> <operator pos:start="737:47" pos:end="737:47">+</operator> <name pos:start="737:49" pos:end="737:49">j</name></expr>]</index> <operator pos:start="737:52" pos:end="737:52">=</operator> <name pos:start="737:54" pos:end="737:57">intV</name></expr>;</expr_stmt>

            <expr_stmt pos:start="739:13" pos:end="739:68"><expr pos:start="739:13" pos:end="739:67"><name pos:start="739:13" pos:end="739:17">error</name>                                  <operator pos:start="739:52" pos:end="739:52">=</operator> <name pos:start="739:54" pos:end="739:54">v</name> <operator pos:start="739:56" pos:end="739:56">-</operator> <name pos:start="739:58" pos:end="739:61">intV</name> <operator pos:start="739:63" pos:end="739:63">*</operator> <name pos:start="739:65" pos:end="739:67">sum</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="747:5" pos:end="751:52"><expr pos:start="747:5" pos:end="751:51"><operator pos:start="747:5" pos:end="747:5">(</operator><operator pos:start="747:6" pos:end="747:6">*</operator><name pos:start="747:7" pos:end="747:15">filterPos</name><operator pos:start="747:16" pos:end="747:16">)</operator><index pos:start="747:17" pos:end="747:26">[<expr pos:start="747:18" pos:end="747:25"><name pos:start="747:18" pos:end="747:21">dstW</name> <operator pos:start="747:23" pos:end="747:23">+</operator> <literal type="number" pos:start="747:25" pos:end="747:25">0</literal></expr>]</index> <operator pos:start="747:28" pos:end="747:28">=</operator>

    <operator pos:start="749:5" pos:end="749:5">(</operator><operator pos:start="749:6" pos:end="749:6">*</operator><name pos:start="749:7" pos:end="749:15">filterPos</name><operator pos:start="749:16" pos:end="749:16">)</operator><index pos:start="749:17" pos:end="749:26">[<expr pos:start="749:18" pos:end="749:25"><name pos:start="749:18" pos:end="749:21">dstW</name> <operator pos:start="749:23" pos:end="749:23">+</operator> <literal type="number" pos:start="749:25" pos:end="749:25">1</literal></expr>]</index> <operator pos:start="749:28" pos:end="749:28">=</operator>

    <operator pos:start="751:5" pos:end="751:5">(</operator><operator pos:start="751:6" pos:end="751:6">*</operator><name pos:start="751:7" pos:end="751:15">filterPos</name><operator pos:start="751:16" pos:end="751:16">)</operator><index pos:start="751:17" pos:end="751:26">[<expr pos:start="751:18" pos:end="751:25"><name pos:start="751:18" pos:end="751:21">dstW</name> <operator pos:start="751:23" pos:end="751:23">+</operator> <literal type="number" pos:start="751:25" pos:end="751:25">2</literal></expr>]</index> <operator pos:start="751:28" pos:end="751:28">=</operator> <operator pos:start="751:30" pos:end="751:30">(</operator><operator pos:start="751:31" pos:end="751:31">*</operator><name pos:start="751:32" pos:end="751:40">filterPos</name><operator pos:start="751:41" pos:end="751:41">)</operator><index pos:start="751:42" pos:end="751:51">[<expr pos:start="751:43" pos:end="751:50"><name pos:start="751:43" pos:end="751:46">dstW</name> <operator pos:start="751:48" pos:end="751:48">-</operator> <literal type="number" pos:start="751:50" pos:end="751:50">1</literal></expr>]</index></expr>;</expr_stmt> <comment type="block" pos:start="751:54" pos:end="753:76">/* the MMX/SSE scaler will

                                                      * read over the end */</comment>

    <for pos:start="755:5" pos:end="765:5">for <control pos:start="755:9" pos:end="755:40">(<init pos:start="755:10" pos:end="755:15"><expr pos:start="755:10" pos:end="755:14"><name pos:start="755:10" pos:end="755:10">i</name> <operator pos:start="755:12" pos:end="755:12">=</operator> <literal type="number" pos:start="755:14" pos:end="755:14">0</literal></expr>;</init> <condition pos:start="755:17" pos:end="755:35"><expr pos:start="755:17" pos:end="755:34"><name pos:start="755:17" pos:end="755:17">i</name> <operator pos:start="755:19" pos:end="755:19">&lt;</operator> <operator pos:start="755:21" pos:end="755:21">*</operator><name pos:start="755:22" pos:end="755:34">outFilterSize</name></expr>;</condition> <incr pos:start="755:37" pos:end="755:39"><expr pos:start="755:37" pos:end="755:39"><name pos:start="755:37" pos:end="755:37">i</name><operator pos:start="755:38" pos:end="755:39">++</operator></expr></incr>)</control> <block pos:start="755:42" pos:end="765:5">{<block_content pos:start="757:9" pos:end="763:65">

        <decl_stmt pos:start="757:9" pos:end="757:50"><decl pos:start="757:9" pos:end="757:49"><type pos:start="757:9" pos:end="757:11"><name pos:start="757:9" pos:end="757:11">int</name></type> <name pos:start="757:13" pos:end="757:13">k</name> <init pos:start="757:15" pos:end="757:49">= <expr pos:start="757:17" pos:end="757:49"><operator pos:start="757:17" pos:end="757:17">(</operator><name pos:start="757:18" pos:end="757:21">dstW</name> <operator pos:start="757:23" pos:end="757:23">-</operator> <literal type="number" pos:start="757:25" pos:end="757:25">1</literal><operator pos:start="757:26" pos:end="757:26">)</operator> <operator pos:start="757:28" pos:end="757:28">*</operator> <operator pos:start="757:30" pos:end="757:30">(</operator><operator pos:start="757:31" pos:end="757:31">*</operator><name pos:start="757:32" pos:end="757:44">outFilterSize</name><operator pos:start="757:45" pos:end="757:45">)</operator> <operator pos:start="757:47" pos:end="757:47">+</operator> <name pos:start="757:49" pos:end="757:49">i</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="759:9" pos:end="763:65"><expr pos:start="759:9" pos:end="763:64"><operator pos:start="759:9" pos:end="759:9">(</operator><operator pos:start="759:10" pos:end="759:10">*</operator><name pos:start="759:11" pos:end="759:19">outFilter</name><operator pos:start="759:20" pos:end="759:20">)</operator><index pos:start="759:21" pos:end="759:46">[<expr pos:start="759:22" pos:end="759:45"><name pos:start="759:22" pos:end="759:22">k</name> <operator pos:start="759:24" pos:end="759:24">+</operator> <literal type="number" pos:start="759:26" pos:end="759:26">1</literal> <operator pos:start="759:28" pos:end="759:28">*</operator> <operator pos:start="759:30" pos:end="759:30">(</operator><operator pos:start="759:31" pos:end="759:31">*</operator><name pos:start="759:32" pos:end="759:44">outFilterSize</name><operator pos:start="759:45" pos:end="759:45">)</operator></expr>]</index> <operator pos:start="759:48" pos:end="759:48">=</operator>

        <operator pos:start="761:9" pos:end="761:9">(</operator><operator pos:start="761:10" pos:end="761:10">*</operator><name pos:start="761:11" pos:end="761:19">outFilter</name><operator pos:start="761:20" pos:end="761:20">)</operator><index pos:start="761:21" pos:end="761:46">[<expr pos:start="761:22" pos:end="761:45"><name pos:start="761:22" pos:end="761:22">k</name> <operator pos:start="761:24" pos:end="761:24">+</operator> <literal type="number" pos:start="761:26" pos:end="761:26">2</literal> <operator pos:start="761:28" pos:end="761:28">*</operator> <operator pos:start="761:30" pos:end="761:30">(</operator><operator pos:start="761:31" pos:end="761:31">*</operator><name pos:start="761:32" pos:end="761:44">outFilterSize</name><operator pos:start="761:45" pos:end="761:45">)</operator></expr>]</index> <operator pos:start="761:48" pos:end="761:48">=</operator>

        <operator pos:start="763:9" pos:end="763:9">(</operator><operator pos:start="763:10" pos:end="763:10">*</operator><name pos:start="763:11" pos:end="763:19">outFilter</name><operator pos:start="763:20" pos:end="763:20">)</operator><index pos:start="763:21" pos:end="763:46">[<expr pos:start="763:22" pos:end="763:45"><name pos:start="763:22" pos:end="763:22">k</name> <operator pos:start="763:24" pos:end="763:24">+</operator> <literal type="number" pos:start="763:26" pos:end="763:26">3</literal> <operator pos:start="763:28" pos:end="763:28">*</operator> <operator pos:start="763:30" pos:end="763:30">(</operator><operator pos:start="763:31" pos:end="763:31">*</operator><name pos:start="763:32" pos:end="763:44">outFilterSize</name><operator pos:start="763:45" pos:end="763:45">)</operator></expr>]</index> <operator pos:start="763:48" pos:end="763:48">=</operator> <operator pos:start="763:50" pos:end="763:50">(</operator><operator pos:start="763:51" pos:end="763:51">*</operator><name pos:start="763:52" pos:end="763:60">outFilter</name><operator pos:start="763:61" pos:end="763:61">)</operator><index pos:start="763:62" pos:end="763:64">[<expr pos:start="763:63" pos:end="763:63"><name pos:start="763:63" pos:end="763:63">k</name></expr>]</index></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="769:5" pos:end="769:12"><expr pos:start="769:5" pos:end="769:11"><name pos:start="769:5" pos:end="769:7">ret</name> <operator pos:start="769:9" pos:end="769:9">=</operator> <literal type="number" pos:start="769:11" pos:end="769:11">0</literal></expr>;</expr_stmt>



<label pos:start="773:1" pos:end="773:5"><name pos:start="773:1" pos:end="773:4">fail</name>:</label>

    <expr_stmt pos:start="775:5" pos:end="775:20"><expr pos:start="775:5" pos:end="775:19"><call pos:start="775:5" pos:end="775:19"><name pos:start="775:5" pos:end="775:11">av_free</name><argument_list pos:start="775:12" pos:end="775:19">(<argument pos:start="775:13" pos:end="775:18"><expr pos:start="775:13" pos:end="775:18"><name pos:start="775:13" pos:end="775:18">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="777:5" pos:end="777:21"><expr pos:start="777:5" pos:end="777:20"><call pos:start="777:5" pos:end="777:20"><name pos:start="777:5" pos:end="777:11">av_free</name><argument_list pos:start="777:12" pos:end="777:20">(<argument pos:start="777:13" pos:end="777:19"><expr pos:start="777:13" pos:end="777:19"><name pos:start="777:13" pos:end="777:19">filter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="779:5" pos:end="779:15">return <expr pos:start="779:12" pos:end="779:14"><name pos:start="779:12" pos:end="779:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
