<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25369.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">txd_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">got_frame</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:36">AVPacket</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">avpkt</name></decl></parameter>)</parameter_list> <block pos:start="3:46" pos:end="203:1">{<block_content pos:start="5:5" pos:end="201:32">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18">GetByteContext</name></type> <name pos:start="5:20" pos:end="5:21">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier> <specifier pos:start="7:15" pos:end="7:19">const</specifier></type> <name pos:start="7:21" pos:end="7:21">p</name> <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:65"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:24">version</name></decl>, <decl pos:start="9:27" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:27" pos:end="9:27">w</name></decl>, <decl pos:start="9:30" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:30" pos:end="9:30">h</name></decl>, <decl pos:start="9:33" pos:end="9:42"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:33" pos:end="9:42">d3d_format</name></decl>, <decl pos:start="9:45" pos:end="9:49"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:45" pos:end="9:49">depth</name></decl>, <decl pos:start="9:52" pos:end="9:57"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:52" pos:end="9:57">stride</name></decl>, <decl pos:start="9:60" pos:end="9:64"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:60" pos:end="9:64">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">y</name></decl>, <decl pos:start="11:21" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:21" pos:end="11:21">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint32_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">pal</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><call pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:20">bytestream2_init</name><argument_list pos:start="21:21" pos:end="21:51">(<argument pos:start="21:22" pos:end="21:24"><expr pos:start="21:22" pos:end="21:24"><operator pos:start="21:22" pos:end="21:22">&amp;</operator><name pos:start="21:23" pos:end="21:24">gb</name></expr></argument>, <argument pos:start="21:27" pos:end="21:37"><expr pos:start="21:27" pos:end="21:37"><name pos:start="21:27" pos:end="21:37"><name pos:start="21:27" pos:end="21:31">avpkt</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:37">data</name></name></expr></argument>, <argument pos:start="21:40" pos:end="21:50"><expr pos:start="21:40" pos:end="21:50"><name pos:start="21:40" pos:end="21:50"><name pos:start="21:40" pos:end="21:44">avpkt</name><operator pos:start="21:45" pos:end="21:46">-&gt;</operator><name pos:start="21:47" pos:end="21:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:48"><expr pos:start="23:5" pos:end="23:47"><name pos:start="23:5" pos:end="23:11">version</name>         <operator pos:start="23:21" pos:end="23:21">=</operator> <call pos:start="23:23" pos:end="23:47"><name pos:start="23:23" pos:end="23:42">bytestream2_get_le32</name><argument_list pos:start="23:43" pos:end="23:47">(<argument pos:start="23:44" pos:end="23:46"><expr pos:start="23:44" pos:end="23:46"><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><call pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:20">bytestream2_skip</name><argument_list pos:start="25:21" pos:end="25:29">(<argument pos:start="25:22" pos:end="25:24"><expr pos:start="25:22" pos:end="25:24"><operator pos:start="25:22" pos:end="25:22">&amp;</operator><name pos:start="25:23" pos:end="25:24">gb</name></expr></argument>, <argument pos:start="25:27" pos:end="25:28"><expr pos:start="25:27" pos:end="25:28"><literal type="number" pos:start="25:27" pos:end="25:28">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:48"><expr pos:start="27:5" pos:end="27:47"><name pos:start="27:5" pos:end="27:14">d3d_format</name>      <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:47"><name pos:start="27:23" pos:end="27:42">bytestream2_get_le32</name><argument_list pos:start="27:43" pos:end="27:47">(<argument pos:start="27:44" pos:end="27:46"><expr pos:start="27:44" pos:end="27:46"><operator pos:start="27:44" pos:end="27:44">&amp;</operator><name pos:start="27:45" pos:end="27:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:48"><expr pos:start="29:5" pos:end="29:47"><name pos:start="29:5" pos:end="29:5">w</name>               <operator pos:start="29:21" pos:end="29:21">=</operator> <call pos:start="29:23" pos:end="29:47"><name pos:start="29:23" pos:end="29:42">bytestream2_get_le16</name><argument_list pos:start="29:43" pos:end="29:47">(<argument pos:start="29:44" pos:end="29:46"><expr pos:start="29:44" pos:end="29:46"><operator pos:start="29:44" pos:end="29:44">&amp;</operator><name pos:start="29:45" pos:end="29:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:48"><expr pos:start="31:5" pos:end="31:47"><name pos:start="31:5" pos:end="31:5">h</name>               <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:47"><name pos:start="31:23" pos:end="31:42">bytestream2_get_le16</name><argument_list pos:start="31:43" pos:end="31:47">(<argument pos:start="31:44" pos:end="31:46"><expr pos:start="31:44" pos:end="31:46"><operator pos:start="31:44" pos:end="31:44">&amp;</operator><name pos:start="31:45" pos:end="31:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:9">depth</name>           <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:47"><name pos:start="33:23" pos:end="33:42">bytestream2_get_byte</name><argument_list pos:start="33:43" pos:end="33:47">(<argument pos:start="33:44" pos:end="33:46"><expr pos:start="33:44" pos:end="33:46"><operator pos:start="33:44" pos:end="33:44">&amp;</operator><name pos:start="33:45" pos:end="33:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:29"><expr pos:start="35:5" pos:end="35:28"><call pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:20">bytestream2_skip</name><argument_list pos:start="35:21" pos:end="35:28">(<argument pos:start="35:22" pos:end="35:24"><expr pos:start="35:22" pos:end="35:24"><operator pos:start="35:22" pos:end="35:22">&amp;</operator><name pos:start="35:23" pos:end="35:24">gb</name></expr></argument>, <argument pos:start="35:27" pos:end="35:27"><expr pos:start="35:27" pos:end="35:27"><literal type="number" pos:start="35:27" pos:end="35:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:9">flags</name>           <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:47"><name pos:start="37:23" pos:end="37:42">bytestream2_get_byte</name><argument_list pos:start="37:43" pos:end="37:47">(<argument pos:start="37:44" pos:end="37:46"><expr pos:start="37:44" pos:end="37:46"><operator pos:start="37:44" pos:end="37:44">&amp;</operator><name pos:start="37:45" pos:end="37:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:35">(<expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:15">version</name> <argument_list type="generic" pos:start="41:17" pos:end="41:32">&lt; <argument pos:start="41:19" pos:end="41:30"><expr pos:start="41:19" pos:end="41:30"><literal type="number" pos:start="41:19" pos:end="41:19">8</literal> <operator pos:start="41:21" pos:end="41:22">||</operator> <name pos:start="41:24" pos:end="41:30">version</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="41:34" pos:end="41:34">9</literal></expr>)</condition> <block pos:start="41:37" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:36">

        <expr_stmt pos:start="43:9" pos:end="45:77"><expr pos:start="43:9" pos:end="45:76"><call pos:start="43:9" pos:end="45:76"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="45:76">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:78"><expr pos:start="43:37" pos:end="43:78"><literal type="string" pos:start="43:37" pos:end="43:78">"texture data version %i is unsupported\n"</literal></expr></argument>,

                                                                    <argument pos:start="45:69" pos:end="45:75"><expr pos:start="45:69" pos:end="45:75"><name pos:start="45:69" pos:end="45:75">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:36">return <expr pos:start="47:16" pos:end="47:35"><name pos:start="47:16" pos:end="47:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="67:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:19">(<expr pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:13">depth</name> <operator pos:start="53:15" pos:end="53:16">==</operator> <literal type="number" pos:start="53:18" pos:end="53:18">8</literal></expr>)</condition> <block pos:start="53:21" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:41">

        <expr_stmt pos:start="55:9" pos:end="55:41"><expr pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:13">avctx</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:22">pix_fmt</name></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <name pos:start="55:26" pos:end="55:40">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="61:5">else if <condition pos:start="57:15" pos:end="57:42">(<expr pos:start="57:16" pos:end="57:41"><name pos:start="57:16" pos:end="57:20">depth</name> <operator pos:start="57:22" pos:end="57:23">==</operator> <literal type="number" pos:start="57:25" pos:end="57:26">16</literal> <operator pos:start="57:28" pos:end="57:29">||</operator> <name pos:start="57:31" pos:end="57:35">depth</name> <operator pos:start="57:37" pos:end="57:38">==</operator> <literal type="number" pos:start="57:40" pos:end="57:41">32</literal></expr>)</condition> <block pos:start="57:44" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:42">

        <expr_stmt pos:start="59:9" pos:end="59:42"><expr pos:start="59:9" pos:end="59:41"><name pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:13">avctx</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:22">pix_fmt</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:41">AV_PIX_FMT_RGB32</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="67:5">else <block pos:start="61:12" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:36">

        <expr_stmt pos:start="63:9" pos:end="63:75"><expr pos:start="63:9" pos:end="63:74"><call pos:start="63:9" pos:end="63:74"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:74">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:37" pos:end="63:66"><expr pos:start="63:37" pos:end="63:66"><literal type="string" pos:start="63:37" pos:end="63:66">"depth of %i is unsupported\n"</literal></expr></argument>, <argument pos:start="63:69" pos:end="63:73"><expr pos:start="63:69" pos:end="63:73"><name pos:start="63:69" pos:end="63:73">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:36">return <expr pos:start="65:16" pos:end="65:35"><name pos:start="65:16" pos:end="65:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="71:5" pos:end="73:19"><if pos:start="71:5" pos:end="73:19">if <condition pos:start="71:8" pos:end="71:51">(<expr pos:start="71:9" pos:end="71:50"><operator pos:start="71:9" pos:end="71:9">(</operator><name pos:start="71:10" pos:end="71:12">ret</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <call pos:start="71:16" pos:end="71:45"><name pos:start="71:16" pos:end="71:32">ff_set_dimensions</name><argument_list pos:start="71:33" pos:end="71:45">(<argument pos:start="71:34" pos:end="71:38"><expr pos:start="71:34" pos:end="71:38"><name pos:start="71:34" pos:end="71:38">avctx</name></expr></argument>, <argument pos:start="71:41" pos:end="71:41"><expr pos:start="71:41" pos:end="71:41"><name pos:start="71:41" pos:end="71:41">w</name></expr></argument>, <argument pos:start="71:44" pos:end="71:44"><expr pos:start="71:44" pos:end="71:44"><name pos:start="71:44" pos:end="71:44">h</name></expr></argument>)</argument_list></call><operator pos:start="71:46" pos:end="71:46">)</operator> <operator pos:start="71:48" pos:end="71:48">&lt;</operator> <literal type="number" pos:start="71:50" pos:end="71:50">0</literal></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:19"><block_content pos:start="73:9" pos:end="73:19">

        <return pos:start="73:9" pos:end="73:19">return <expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="79:19"><if pos:start="77:5" pos:end="79:19">if <condition pos:start="77:8" pos:end="77:47">(<expr pos:start="77:9" pos:end="77:46"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:12">ret</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:41"><name pos:start="77:16" pos:end="77:28">ff_get_buffer</name><argument_list pos:start="77:29" pos:end="77:41">(<argument pos:start="77:30" pos:end="77:34"><expr pos:start="77:30" pos:end="77:34"><name pos:start="77:30" pos:end="77:34">avctx</name></expr></argument>, <argument pos:start="77:37" pos:end="77:37"><expr pos:start="77:37" pos:end="77:37"><name pos:start="77:37" pos:end="77:37">p</name></expr></argument>, <argument pos:start="77:40" pos:end="77:40"><expr pos:start="77:40" pos:end="77:40"><literal type="number" pos:start="77:40" pos:end="77:40">0</literal></expr></argument>)</argument_list></call><operator pos:start="77:42" pos:end="77:42">)</operator> <operator pos:start="77:44" pos:end="77:44">&lt;</operator> <literal type="number" pos:start="77:46" pos:end="77:46">0</literal></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:19"><block_content pos:start="79:9" pos:end="79:19">

        <return pos:start="79:9" pos:end="79:19">return <expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:37"><expr pos:start="83:5" pos:end="83:36"><name pos:start="83:5" pos:end="83:16"><name pos:start="83:5" pos:end="83:5">p</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:16">pict_type</name></name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:24"><expr pos:start="87:5" pos:end="87:23"><name pos:start="87:5" pos:end="87:7">ptr</name>    <operator pos:start="87:12" pos:end="87:12">=</operator> <name pos:start="87:14" pos:end="87:23"><name pos:start="87:14" pos:end="87:14">p</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:20">data</name><index pos:start="87:21" pos:end="87:23">[<expr pos:start="87:22" pos:end="87:22"><literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:28"><expr pos:start="89:5" pos:end="89:27"><name pos:start="89:5" pos:end="89:10">stride</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <name pos:start="89:14" pos:end="89:27"><name pos:start="89:14" pos:end="89:14">p</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:24">linesize</name><index pos:start="89:25" pos:end="89:27">[<expr pos:start="89:26" pos:end="89:26"><literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="185:5"><if pos:start="93:5" pos:end="119:5">if <condition pos:start="93:8" pos:end="93:19">(<expr pos:start="93:9" pos:end="93:18"><name pos:start="93:9" pos:end="93:13">depth</name> <operator pos:start="93:15" pos:end="93:16">==</operator> <literal type="number" pos:start="93:18" pos:end="93:18">8</literal></expr>)</condition> <block pos:start="93:21" pos:end="119:5">{<block_content pos:start="95:9" pos:end="117:9">

        <expr_stmt pos:start="95:9" pos:end="95:38"><expr pos:start="95:9" pos:end="95:37"><name pos:start="95:9" pos:end="95:11">pal</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <operator pos:start="95:15" pos:end="95:15">(</operator><name pos:start="95:16" pos:end="95:23">uint32_t</name> <operator pos:start="95:25" pos:end="95:25">*</operator><operator pos:start="95:26" pos:end="95:26">)</operator> <name pos:start="95:28" pos:end="95:37"><name pos:start="95:28" pos:end="95:28">p</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:34">data</name><index pos:start="95:35" pos:end="95:37">[<expr pos:start="95:36" pos:end="95:36"><literal type="number" pos:start="95:36" pos:end="95:36">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="97:9" pos:end="103:9">for <control pos:start="97:13" pos:end="97:33">(<init pos:start="97:14" pos:end="97:19"><expr pos:start="97:14" pos:end="97:18"><name pos:start="97:14" pos:end="97:14">y</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr>;</init> <condition pos:start="97:21" pos:end="97:28"><expr pos:start="97:21" pos:end="97:27"><name pos:start="97:21" pos:end="97:21">y</name> <operator pos:start="97:23" pos:end="97:23">&lt;</operator> <literal type="number" pos:start="97:25" pos:end="97:27">256</literal></expr>;</condition> <incr pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><name pos:start="97:30" pos:end="97:30">y</name><operator pos:start="97:31" pos:end="97:32">++</operator></expr></incr>)</control> <block pos:start="97:35" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:42">

            <expr_stmt pos:start="99:13" pos:end="99:42"><expr pos:start="99:13" pos:end="99:41"><name pos:start="99:13" pos:end="99:13">v</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <call pos:start="99:17" pos:end="99:41"><name pos:start="99:17" pos:end="99:36">bytestream2_get_be32</name><argument_list pos:start="99:37" pos:end="99:41">(<argument pos:start="99:38" pos:end="99:40"><expr pos:start="99:38" pos:end="99:40"><operator pos:start="99:38" pos:end="99:38">&amp;</operator><name pos:start="99:39" pos:end="99:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:18"><name pos:start="101:13" pos:end="101:15">pal</name><index pos:start="101:16" pos:end="101:18">[<expr pos:start="101:17" pos:end="101:17"><name pos:start="101:17" pos:end="101:17">y</name></expr>]</index></name> <operator pos:start="101:20" pos:end="101:20">=</operator> <operator pos:start="101:22" pos:end="101:22">(</operator><name pos:start="101:23" pos:end="101:23">v</name> <operator pos:start="101:25" pos:end="101:26">&gt;&gt;</operator> <literal type="number" pos:start="101:28" pos:end="101:28">8</literal><operator pos:start="101:29" pos:end="101:29">)</operator> <operator pos:start="101:31" pos:end="101:31">+</operator> <operator pos:start="101:33" pos:end="101:33">(</operator><name pos:start="101:34" pos:end="101:34">v</name> <operator pos:start="101:36" pos:end="101:37">&lt;&lt;</operator> <literal type="number" pos:start="101:39" pos:end="101:40">24</literal><operator pos:start="101:41" pos:end="101:41">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="105:9" pos:end="107:39"><if pos:start="105:9" pos:end="107:39">if <condition pos:start="105:12" pos:end="105:52">(<expr pos:start="105:13" pos:end="105:51"><call pos:start="105:13" pos:end="105:43"><name pos:start="105:13" pos:end="105:38">bytestream2_get_bytes_left</name><argument_list pos:start="105:39" pos:end="105:43">(<argument pos:start="105:40" pos:end="105:42"><expr pos:start="105:40" pos:end="105:42"><operator pos:start="105:40" pos:end="105:40">&amp;</operator><name pos:start="105:41" pos:end="105:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="105:45" pos:end="105:45">&lt;</operator> <name pos:start="105:47" pos:end="105:47">w</name> <operator pos:start="105:49" pos:end="105:49">*</operator> <name pos:start="105:51" pos:end="105:51">h</name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:39"><block_content pos:start="107:13" pos:end="107:39">

            <return pos:start="107:13" pos:end="107:39">return <expr pos:start="107:20" pos:end="107:38"><name pos:start="107:20" pos:end="107:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:33"><expr pos:start="109:9" pos:end="109:32"><call pos:start="109:9" pos:end="109:32"><name pos:start="109:9" pos:end="109:24">bytestream2_skip</name><argument_list pos:start="109:25" pos:end="109:32">(<argument pos:start="109:26" pos:end="109:28"><expr pos:start="109:26" pos:end="109:28"><operator pos:start="109:26" pos:end="109:26">&amp;</operator><name pos:start="109:27" pos:end="109:28">gb</name></expr></argument>, <argument pos:start="109:31" pos:end="109:31"><expr pos:start="109:31" pos:end="109:31"><literal type="number" pos:start="109:31" pos:end="109:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="111:9" pos:end="117:9">for <control pos:start="111:13" pos:end="111:27">(<init pos:start="111:14" pos:end="111:17"><expr pos:start="111:14" pos:end="111:16"><name pos:start="111:14" pos:end="111:14">y</name><operator pos:start="111:15" pos:end="111:15">=</operator><literal type="number" pos:start="111:16" pos:end="111:16">0</literal></expr>;</init> <condition pos:start="111:19" pos:end="111:22"><expr pos:start="111:19" pos:end="111:21"><name pos:start="111:19" pos:end="111:19">y</name><operator pos:start="111:20" pos:end="111:20">&lt;</operator><name pos:start="111:21" pos:end="111:21">h</name></expr>;</condition> <incr pos:start="111:24" pos:end="111:26"><expr pos:start="111:24" pos:end="111:26"><name pos:start="111:24" pos:end="111:24">y</name><operator pos:start="111:25" pos:end="111:26">++</operator></expr></incr>)</control> <block pos:start="111:29" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:26">

            <expr_stmt pos:start="113:13" pos:end="113:48"><expr pos:start="113:13" pos:end="113:47"><call pos:start="113:13" pos:end="113:47"><name pos:start="113:13" pos:end="113:34">bytestream2_get_buffer</name><argument_list pos:start="113:35" pos:end="113:47">(<argument pos:start="113:36" pos:end="113:38"><expr pos:start="113:36" pos:end="113:38"><operator pos:start="113:36" pos:end="113:36">&amp;</operator><name pos:start="113:37" pos:end="113:38">gb</name></expr></argument>, <argument pos:start="113:41" pos:end="113:43"><expr pos:start="113:41" pos:end="113:43"><name pos:start="113:41" pos:end="113:43">ptr</name></expr></argument>, <argument pos:start="113:46" pos:end="113:46"><expr pos:start="113:46" pos:end="113:46"><name pos:start="113:46" pos:end="113:46">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:26"><expr pos:start="115:13" pos:end="115:25"><name pos:start="115:13" pos:end="115:15">ptr</name> <operator pos:start="115:17" pos:end="115:18">+=</operator> <name pos:start="115:20" pos:end="115:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="119:7" pos:end="157:5">else if <condition pos:start="119:15" pos:end="119:27">(<expr pos:start="119:16" pos:end="119:26"><name pos:start="119:16" pos:end="119:20">depth</name> <operator pos:start="119:22" pos:end="119:23">==</operator> <literal type="number" pos:start="119:25" pos:end="119:26">16</literal></expr>)</condition> <block pos:start="119:29" pos:end="157:5">{<block_content pos:start="121:9" pos:end="155:9">

        <expr_stmt pos:start="121:9" pos:end="121:33"><expr pos:start="121:9" pos:end="121:32"><call pos:start="121:9" pos:end="121:32"><name pos:start="121:9" pos:end="121:24">bytestream2_skip</name><argument_list pos:start="121:25" pos:end="121:32">(<argument pos:start="121:26" pos:end="121:28"><expr pos:start="121:26" pos:end="121:28"><operator pos:start="121:26" pos:end="121:26">&amp;</operator><name pos:start="121:27" pos:end="121:28">gb</name></expr></argument>, <argument pos:start="121:31" pos:end="121:31"><expr pos:start="121:31" pos:end="121:31"><literal type="number" pos:start="121:31" pos:end="121:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="123:9" pos:end="155:9">switch <condition pos:start="123:16" pos:end="123:27">(<expr pos:start="123:17" pos:end="123:26"><name pos:start="123:17" pos:end="123:26">d3d_format</name></expr>)</condition> <block pos:start="123:29" pos:end="155:9">{<block_content pos:start="125:9" pos:end="153:29">

        <case pos:start="125:9" pos:end="125:15">case <expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">0</literal></expr>:</case>

            <if_stmt pos:start="127:13" pos:end="129:33"><if pos:start="127:13" pos:end="129:33">if <condition pos:start="127:16" pos:end="127:29">(<expr pos:start="127:17" pos:end="127:28"><operator pos:start="127:17" pos:end="127:17">!</operator><operator pos:start="127:18" pos:end="127:18">(</operator><name pos:start="127:19" pos:end="127:23">flags</name> <operator pos:start="127:25" pos:end="127:25">&amp;</operator> <literal type="number" pos:start="127:27" pos:end="127:27">1</literal><operator pos:start="127:28" pos:end="127:28">)</operator></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:33"><block_content pos:start="129:17" pos:end="129:33">

                <goto pos:start="129:17" pos:end="129:33">goto <name pos:start="129:22" pos:end="129:32">unsupported</name>;</goto></block_content></block></if></if_stmt>

        <case pos:start="131:9" pos:end="131:26">case <expr pos:start="131:14" pos:end="131:25"><name pos:start="131:14" pos:end="131:25">FF_S3TC_DXT1</name></expr>:</case>

            <if_stmt pos:start="133:13" pos:end="135:43"><if pos:start="133:13" pos:end="135:43">if <condition pos:start="133:16" pos:end="133:68">(<expr pos:start="133:17" pos:end="133:67"><call pos:start="133:17" pos:end="133:47"><name pos:start="133:17" pos:end="133:42">bytestream2_get_bytes_left</name><argument_list pos:start="133:43" pos:end="133:47">(<argument pos:start="133:44" pos:end="133:46"><expr pos:start="133:44" pos:end="133:46"><operator pos:start="133:44" pos:end="133:44">&amp;</operator><name pos:start="133:45" pos:end="133:46">gb</name></expr></argument>)</argument_list></call> <operator pos:start="133:49" pos:end="133:49">&lt;</operator> <operator pos:start="133:51" pos:end="133:51">(</operator><name pos:start="133:52" pos:end="133:52">w</name><operator pos:start="133:53" pos:end="133:53">/</operator><literal type="number" pos:start="133:54" pos:end="133:54">4</literal><operator pos:start="133:55" pos:end="133:55">)</operator> <operator pos:start="133:57" pos:end="133:57">*</operator> <operator pos:start="133:59" pos:end="133:59">(</operator><name pos:start="133:60" pos:end="133:60">h</name><operator pos:start="133:61" pos:end="133:61">/</operator><literal type="number" pos:start="133:62" pos:end="133:62">4</literal><operator pos:start="133:63" pos:end="133:63">)</operator> <operator pos:start="133:65" pos:end="133:65">*</operator> <literal type="number" pos:start="133:67" pos:end="133:67">8</literal></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:43"><block_content pos:start="135:17" pos:end="135:43">

                <return pos:start="135:17" pos:end="135:43">return <expr pos:start="135:24" pos:end="135:42"><name pos:start="135:24" pos:end="135:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:51"><expr pos:start="137:13" pos:end="137:50"><call pos:start="137:13" pos:end="137:50"><name pos:start="137:13" pos:end="137:26">ff_decode_dxt1</name><argument_list pos:start="137:27" pos:end="137:50">(<argument pos:start="137:28" pos:end="137:30"><expr pos:start="137:28" pos:end="137:30"><operator pos:start="137:28" pos:end="137:28">&amp;</operator><name pos:start="137:29" pos:end="137:30">gb</name></expr></argument>, <argument pos:start="137:33" pos:end="137:35"><expr pos:start="137:33" pos:end="137:35"><name pos:start="137:33" pos:end="137:35">ptr</name></expr></argument>, <argument pos:start="137:38" pos:end="137:38"><expr pos:start="137:38" pos:end="137:38"><name pos:start="137:38" pos:end="137:38">w</name></expr></argument>, <argument pos:start="137:41" pos:end="137:41"><expr pos:start="137:41" pos:end="137:41"><name pos:start="137:41" pos:end="137:41">h</name></expr></argument>, <argument pos:start="137:44" pos:end="137:49"><expr pos:start="137:44" pos:end="137:49"><name pos:start="137:44" pos:end="137:49">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        <case pos:start="141:9" pos:end="141:26">case <expr pos:start="141:14" pos:end="141:25"><name pos:start="141:14" pos:end="141:25">FF_S3TC_DXT3</name></expr>:</case>

            <if_stmt pos:start="143:13" pos:end="145:43"><if pos:start="143:13" pos:end="145:43">if <condition pos:start="143:16" pos:end="143:69">(<expr pos:start="143:17" pos:end="143:68"><call pos:start="143:17" pos:end="143:47"><name pos:start="143:17" pos:end="143:42">bytestream2_get_bytes_left</name><argument_list pos:start="143:43" pos:end="143:47">(<argument pos:start="143:44" pos:end="143:46"><expr pos:start="143:44" pos:end="143:46"><operator pos:start="143:44" pos:end="143:44">&amp;</operator><name pos:start="143:45" pos:end="143:46">gb</name></expr></argument>)</argument_list></call> <operator pos:start="143:49" pos:end="143:49">&lt;</operator> <operator pos:start="143:51" pos:end="143:51">(</operator><name pos:start="143:52" pos:end="143:52">w</name><operator pos:start="143:53" pos:end="143:53">/</operator><literal type="number" pos:start="143:54" pos:end="143:54">4</literal><operator pos:start="143:55" pos:end="143:55">)</operator> <operator pos:start="143:57" pos:end="143:57">*</operator> <operator pos:start="143:59" pos:end="143:59">(</operator><name pos:start="143:60" pos:end="143:60">h</name><operator pos:start="143:61" pos:end="143:61">/</operator><literal type="number" pos:start="143:62" pos:end="143:62">4</literal><operator pos:start="143:63" pos:end="143:63">)</operator> <operator pos:start="143:65" pos:end="143:65">*</operator> <literal type="number" pos:start="143:67" pos:end="143:68">16</literal></expr>)</condition><block type="pseudo" pos:start="145:17" pos:end="145:43"><block_content pos:start="145:17" pos:end="145:43">

                <return pos:start="145:17" pos:end="145:43">return <expr pos:start="145:24" pos:end="145:42"><name pos:start="145:24" pos:end="145:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:51"><expr pos:start="147:13" pos:end="147:50"><call pos:start="147:13" pos:end="147:50"><name pos:start="147:13" pos:end="147:26">ff_decode_dxt3</name><argument_list pos:start="147:27" pos:end="147:50">(<argument pos:start="147:28" pos:end="147:30"><expr pos:start="147:28" pos:end="147:30"><operator pos:start="147:28" pos:end="147:28">&amp;</operator><name pos:start="147:29" pos:end="147:30">gb</name></expr></argument>, <argument pos:start="147:33" pos:end="147:35"><expr pos:start="147:33" pos:end="147:35"><name pos:start="147:33" pos:end="147:35">ptr</name></expr></argument>, <argument pos:start="147:38" pos:end="147:38"><expr pos:start="147:38" pos:end="147:38"><name pos:start="147:38" pos:end="147:38">w</name></expr></argument>, <argument pos:start="147:41" pos:end="147:41"><expr pos:start="147:41" pos:end="147:41"><name pos:start="147:41" pos:end="147:41">h</name></expr></argument>, <argument pos:start="147:44" pos:end="147:49"><expr pos:start="147:44" pos:end="147:49"><name pos:start="147:44" pos:end="147:49">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <default pos:start="151:9" pos:end="151:16">default:</default>

            <goto pos:start="153:13" pos:end="153:29">goto <name pos:start="153:18" pos:end="153:28">unsupported</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></if> <if type="elseif" pos:start="157:7" pos:end="185:5">else if <condition pos:start="157:15" pos:end="157:27">(<expr pos:start="157:16" pos:end="157:26"><name pos:start="157:16" pos:end="157:20">depth</name> <operator pos:start="157:22" pos:end="157:23">==</operator> <literal type="number" pos:start="157:25" pos:end="157:26">32</literal></expr>)</condition> <block pos:start="157:29" pos:end="185:5">{<block_content pos:start="159:9" pos:end="183:9">

        <switch pos:start="159:9" pos:end="183:9">switch <condition pos:start="159:16" pos:end="159:27">(<expr pos:start="159:17" pos:end="159:26"><name pos:start="159:17" pos:end="159:26">d3d_format</name></expr>)</condition> <block pos:start="159:29" pos:end="183:9">{<block_content pos:start="161:9" pos:end="181:29">

        <case pos:start="161:9" pos:end="161:18">case <expr pos:start="161:14" pos:end="161:17"><literal type="number" pos:start="161:14" pos:end="161:17">0x15</literal></expr>:</case>

        <case pos:start="163:9" pos:end="163:18">case <expr pos:start="163:14" pos:end="163:17"><literal type="number" pos:start="163:14" pos:end="163:17">0x16</literal></expr>:</case>

            <if_stmt pos:start="165:13" pos:end="167:43"><if pos:start="165:13" pos:end="167:43">if <condition pos:start="165:16" pos:end="165:60">(<expr pos:start="165:17" pos:end="165:59"><call pos:start="165:17" pos:end="165:47"><name pos:start="165:17" pos:end="165:42">bytestream2_get_bytes_left</name><argument_list pos:start="165:43" pos:end="165:47">(<argument pos:start="165:44" pos:end="165:46"><expr pos:start="165:44" pos:end="165:46"><operator pos:start="165:44" pos:end="165:44">&amp;</operator><name pos:start="165:45" pos:end="165:46">gb</name></expr></argument>)</argument_list></call> <operator pos:start="165:49" pos:end="165:49">&lt;</operator> <name pos:start="165:51" pos:end="165:51">h</name> <operator pos:start="165:53" pos:end="165:53">*</operator> <name pos:start="165:55" pos:end="165:55">w</name> <operator pos:start="165:57" pos:end="165:57">*</operator> <literal type="number" pos:start="165:59" pos:end="165:59">4</literal></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:43"><block_content pos:start="167:17" pos:end="167:43">

                <return pos:start="167:17" pos:end="167:43">return <expr pos:start="167:24" pos:end="167:42"><name pos:start="167:24" pos:end="167:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <for pos:start="169:13" pos:end="175:13">for <control pos:start="169:17" pos:end="169:31">(<init pos:start="169:18" pos:end="169:21"><expr pos:start="169:18" pos:end="169:20"><name pos:start="169:18" pos:end="169:18">y</name><operator pos:start="169:19" pos:end="169:19">=</operator><literal type="number" pos:start="169:20" pos:end="169:20">0</literal></expr>;</init> <condition pos:start="169:23" pos:end="169:26"><expr pos:start="169:23" pos:end="169:25"><name pos:start="169:23" pos:end="169:23">y</name><operator pos:start="169:24" pos:end="169:24">&lt;</operator><name pos:start="169:25" pos:end="169:25">h</name></expr>;</condition> <incr pos:start="169:28" pos:end="169:30"><expr pos:start="169:28" pos:end="169:30"><name pos:start="169:28" pos:end="169:28">y</name><operator pos:start="169:29" pos:end="169:30">++</operator></expr></incr>)</control> <block pos:start="169:33" pos:end="175:13">{<block_content pos:start="171:17" pos:end="173:30">

                <expr_stmt pos:start="171:17" pos:end="171:56"><expr pos:start="171:17" pos:end="171:55"><call pos:start="171:17" pos:end="171:55"><name pos:start="171:17" pos:end="171:38">bytestream2_get_buffer</name><argument_list pos:start="171:39" pos:end="171:55">(<argument pos:start="171:40" pos:end="171:42"><expr pos:start="171:40" pos:end="171:42"><operator pos:start="171:40" pos:end="171:40">&amp;</operator><name pos:start="171:41" pos:end="171:42">gb</name></expr></argument>, <argument pos:start="171:45" pos:end="171:47"><expr pos:start="171:45" pos:end="171:47"><name pos:start="171:45" pos:end="171:47">ptr</name></expr></argument>, <argument pos:start="171:50" pos:end="171:54"><expr pos:start="171:50" pos:end="171:54"><name pos:start="171:50" pos:end="171:50">w</name> <operator pos:start="171:52" pos:end="171:52">*</operator> <literal type="number" pos:start="171:54" pos:end="171:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:30"><expr pos:start="173:17" pos:end="173:29"><name pos:start="173:17" pos:end="173:19">ptr</name> <operator pos:start="173:21" pos:end="173:22">+=</operator> <name pos:start="173:24" pos:end="173:29">stride</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="177:13" pos:end="177:18">break;</break>

        <default pos:start="179:9" pos:end="179:16">default:</default>

            <goto pos:start="181:13" pos:end="181:29">goto <name pos:start="181:18" pos:end="181:28">unsupported</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:19"><expr pos:start="189:5" pos:end="189:18"><operator pos:start="189:5" pos:end="189:5">*</operator><name pos:start="189:6" pos:end="189:14">got_frame</name> <operator pos:start="189:16" pos:end="189:16">=</operator> <literal type="number" pos:start="189:18" pos:end="189:18">1</literal></expr>;</expr_stmt>



    <return pos:start="193:5" pos:end="193:23">return <expr pos:start="193:12" pos:end="193:22"><name pos:start="193:12" pos:end="193:22"><name pos:start="193:12" pos:end="193:16">avpkt</name><operator pos:start="193:17" pos:end="193:18">-&gt;</operator><name pos:start="193:19" pos:end="193:22">size</name></name></expr>;</return>



<label pos:start="197:1" pos:end="197:12"><name pos:start="197:1" pos:end="197:11">unsupported</name>:</label>

    <expr_stmt pos:start="199:5" pos:end="199:79"><expr pos:start="199:5" pos:end="199:78"><call pos:start="199:5" pos:end="199:78"><name pos:start="199:5" pos:end="199:10">av_log</name><argument_list pos:start="199:11" pos:end="199:78">(<argument pos:start="199:12" pos:end="199:16"><expr pos:start="199:12" pos:end="199:16"><name pos:start="199:12" pos:end="199:16">avctx</name></expr></argument>, <argument pos:start="199:19" pos:end="199:30"><expr pos:start="199:19" pos:end="199:30"><name pos:start="199:19" pos:end="199:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:33" pos:end="199:65"><expr pos:start="199:33" pos:end="199:65"><literal type="string" pos:start="199:33" pos:end="199:65">"unsupported d3d format (%08x)\n"</literal></expr></argument>, <argument pos:start="199:68" pos:end="199:77"><expr pos:start="199:68" pos:end="199:77"><name pos:start="199:68" pos:end="199:77">d3d_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="201:5" pos:end="201:32">return <expr pos:start="201:12" pos:end="201:31"><name pos:start="201:12" pos:end="201:31">AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></function>
</unit>
