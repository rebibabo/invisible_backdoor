<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23712.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:46"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">backup_start</name><parameter_list pos:start="1:18" pos:end="6:31">(<parameter pos:start="1:19" pos:end="1:38"><decl pos:start="1:19" pos:end="1:38"><type pos:start="1:19" pos:end="1:38"><name pos:start="1:19" pos:end="1:34">BlockDriverState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">bs</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:64"><decl pos:start="1:41" pos:end="1:64"><type pos:start="1:41" pos:end="1:64"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:64">target</name></decl></parameter>,
                  <parameter pos:start="2:19" pos:end="2:31"><decl pos:start="2:19" pos:end="2:31"><type pos:start="2:19" pos:end="2:31"><name pos:start="2:19" pos:end="2:25">int64_t</name></type> <name pos:start="2:27" pos:end="2:31">speed</name></decl></parameter>, <parameter pos:start="2:34" pos:end="2:57"><decl pos:start="2:34" pos:end="2:57"><type pos:start="2:34" pos:end="2:57"><name pos:start="2:34" pos:end="2:47">MirrorSyncMode</name></type> <name pos:start="2:49" pos:end="2:57">sync_mode</name></decl></parameter>,
                  <parameter pos:start="3:19" pos:end="3:49"><decl pos:start="3:19" pos:end="3:49"><type pos:start="3:19" pos:end="3:49"><name pos:start="3:19" pos:end="3:33">BlockdevOnError</name></type> <name pos:start="3:35" pos:end="3:49">on_source_error</name></decl></parameter>,
                  <parameter pos:start="4:19" pos:end="4:49"><decl pos:start="4:19" pos:end="4:49"><type pos:start="4:19" pos:end="4:49"><name pos:start="4:19" pos:end="4:33">BlockdevOnError</name></type> <name pos:start="4:35" pos:end="4:49">on_target_error</name></decl></parameter>,
                  <parameter pos:start="5:19" pos:end="5:41"><decl pos:start="5:19" pos:end="5:41"><type pos:start="5:19" pos:end="5:41"><name pos:start="5:19" pos:end="5:37">BlockCompletionFunc</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:41">cb</name></decl></parameter>, <parameter pos:start="5:44" pos:end="5:55"><decl pos:start="5:44" pos:end="5:55"><type pos:start="5:44" pos:end="5:55"><name pos:start="5:44" pos:end="5:47">void</name> <modifier pos:start="5:49" pos:end="5:49">*</modifier></type><name pos:start="5:50" pos:end="5:55">opaque</name></decl></parameter>,
                  <parameter pos:start="6:19" pos:end="6:30"><decl pos:start="6:19" pos:end="6:30"><type pos:start="6:19" pos:end="6:30"><name pos:start="6:19" pos:end="6:23">Error</name> <modifier pos:start="6:25" pos:end="6:25">*</modifier><modifier pos:start="6:26" pos:end="6:26">*</modifier></type><name pos:start="6:27" pos:end="6:30">errp</name></decl></parameter>)</parameter_list>
<block pos:start="7:1" pos:end="31:46">{<block_content pos:start="8:5" pos:end="31:46">
    <decl_stmt pos:start="8:5" pos:end="8:16"><decl pos:start="8:5" pos:end="8:15"><type pos:start="8:5" pos:end="8:11"><name pos:start="8:5" pos:end="8:11">int64_t</name></type> <name pos:start="8:13" pos:end="8:15">len</name></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:15"><expr pos:start="9:5" pos:end="9:14"><call pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:10">assert</name><argument_list pos:start="9:11" pos:end="9:14">(<argument pos:start="9:12" pos:end="9:13"><expr pos:start="9:12" pos:end="9:13"><name pos:start="9:12" pos:end="9:13">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:19"><expr pos:start="10:5" pos:end="10:18"><call pos:start="10:5" pos:end="10:18"><name pos:start="10:5" pos:end="10:10">assert</name><argument_list pos:start="10:11" pos:end="10:18">(<argument pos:start="10:12" pos:end="10:17"><expr pos:start="10:12" pos:end="10:17"><name pos:start="10:12" pos:end="10:17">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:15"><expr pos:start="11:5" pos:end="11:14"><call pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:14">(<argument pos:start="11:12" pos:end="11:13"><expr pos:start="11:12" pos:end="11:13"><name pos:start="11:12" pos:end="11:13">cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="12:5" pos:end="31:46"><if pos:start="12:5" pos:end="31:46">if <condition pos:start="12:8" pos:end="12:21">(<expr pos:start="12:9" pos:end="12:20"><name pos:start="12:9" pos:end="12:10">bs</name> <operator pos:start="12:12" pos:end="12:13">==</operator> <name pos:start="12:15" pos:end="12:20">target</name></expr>)</condition> <block pos:start="12:23" pos:end="31:46">{<block_content pos:start="13:9" pos:end="31:46">
        <expr_stmt pos:start="13:9" pos:end="13:65"><expr pos:start="13:9" pos:end="13:64"><call pos:start="13:9" pos:end="13:64"><name pos:start="13:9" pos:end="13:18">error_setg</name><argument_list pos:start="13:19" pos:end="13:64">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">errp</name></expr></argument>, <argument pos:start="13:26" pos:end="13:63"><expr pos:start="13:26" pos:end="13:63"><literal type="string" pos:start="13:26" pos:end="13:63">"Source and target cannot be the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="31:46"><if pos:start="14:5" pos:end="31:46">if <condition pos:start="14:8" pos:end="16:38">(<expr pos:start="14:9" pos:end="16:37"><operator pos:start="14:9" pos:end="14:9">(</operator><name pos:start="14:10" pos:end="14:24">on_source_error</name> <operator pos:start="14:26" pos:end="14:27">==</operator> <name pos:start="14:29" pos:end="14:50">BLOCKDEV_ON_ERROR_STOP</name> <operator pos:start="14:52" pos:end="14:53">||</operator>
         <name pos:start="15:10" pos:end="15:24">on_source_error</name> <operator pos:start="15:26" pos:end="15:27">==</operator> <name pos:start="15:29" pos:end="15:52">BLOCKDEV_ON_ERROR_ENOSPC</name><operator pos:start="15:53" pos:end="15:53">)</operator> <operator pos:start="15:55" pos:end="15:56">&amp;&amp;</operator>
        <operator pos:start="16:9" pos:end="16:9">!</operator><call pos:start="16:10" pos:end="16:37"><name pos:start="16:10" pos:end="16:33">bdrv_iostatus_is_enabled</name><argument_list pos:start="16:34" pos:end="16:37">(<argument pos:start="16:35" pos:end="16:36"><expr pos:start="16:35" pos:end="16:36"><name pos:start="16:35" pos:end="16:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="16:40" pos:end="31:46">{<block_content pos:start="17:9" pos:end="31:46">
        <expr_stmt pos:start="17:9" pos:end="17:67"><expr pos:start="17:9" pos:end="17:66"><call pos:start="17:9" pos:end="17:66"><name pos:start="17:9" pos:end="17:17">error_set</name><argument_list pos:start="17:18" pos:end="17:66">(<argument pos:start="17:19" pos:end="17:22"><expr pos:start="17:19" pos:end="17:22"><name pos:start="17:19" pos:end="17:22">errp</name></expr></argument>, <argument pos:start="17:25" pos:end="17:46"><expr pos:start="17:25" pos:end="17:46"><name pos:start="17:25" pos:end="17:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="17:49" pos:end="17:65"><expr pos:start="17:49" pos:end="17:65"><literal type="string" pos:start="17:49" pos:end="17:65">"on-source-error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:29"><expr pos:start="18:5" pos:end="18:28"><name pos:start="18:5" pos:end="18:7">len</name> <operator pos:start="18:9" pos:end="18:9">=</operator> <call pos:start="18:11" pos:end="18:28"><name pos:start="18:11" pos:end="18:24">bdrv_getlength</name><argument_list pos:start="18:25" pos:end="18:28">(<argument pos:start="18:26" pos:end="18:27"><expr pos:start="18:26" pos:end="18:27"><name pos:start="18:26" pos:end="18:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="19:5" pos:end="31:46"><if pos:start="19:5" pos:end="31:46">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">len</name> <operator pos:start="19:13" pos:end="19:13">&lt;</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>)</condition> <block pos:start="19:18" pos:end="31:46">{<block_content pos:start="20:9" pos:end="31:46">
        <macro pos:start="20:9" pos:end="31:46"><name pos:start="20:9" pos:end="20:24">error_setg_errno</name><argument_list pos:start="20:25" pos:end="31:46">(<argument pos:start="20:26" pos:end="20:29">errp</argument>, <argument pos:start="20:32" pos:end="20:35">-len</argument>, <argument pos:start="20:38" pos:end="20:68"><literal type="string" pos:start="20:38" pos:end="20:68">"unable to get length for '%s'"</literal></argument>,
    <argument pos:start="21:5" pos:end="31:46">BackupBlockJob *job = block_job_create(&amp;backup_job_driver, bs, speed,
                                           cb, opaque, errp);
    if (!job) {
    bdrv_op_block_all(target, job-&gt;common.blocker);
    job-&gt;on_source_error = on_source_error;
    job-&gt;on_target_error = on_target_error;
    job-&gt;target = target;
    job-&gt;sync_mode = sync_mode;
    job-&gt;common.len = len;
    job-&gt;common.co = qemu_coroutine_create(backup_run);
    qemu_coroutine_enter(job-&gt;common.co, job);</argument></argument_list></macro></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
