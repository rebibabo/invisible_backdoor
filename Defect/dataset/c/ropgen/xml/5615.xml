<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5615.c" pos:tabs="8"><function pos:start="1:1" pos:end="415:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">fsl_imx25_realize</name><parameter_list pos:start="1:30" pos:end="1:61">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:41">DeviceState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="415:1">{<block_content pos:start="5:5" pos:end="413:48">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">FslIMX25State</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:37">= <expr pos:start="5:24" pos:end="5:37"><call pos:start="5:24" pos:end="5:37"><name pos:start="5:24" pos:end="5:32">FSL_IMX25</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:70"><expr pos:start="13:5" pos:end="13:69"><call pos:start="13:5" pos:end="13:69"><name pos:start="13:5" pos:end="13:28">object_property_set_bool</name><argument_list pos:start="13:29" pos:end="13:69">(<argument pos:start="13:30" pos:end="13:44"><expr pos:start="13:30" pos:end="13:44"><call pos:start="13:30" pos:end="13:44"><name pos:start="13:30" pos:end="13:35">OBJECT</name><argument_list pos:start="13:36" pos:end="13:44">(<argument pos:start="13:37" pos:end="13:43"><expr pos:start="13:37" pos:end="13:43"><operator pos:start="13:37" pos:end="13:37">&amp;</operator><name pos:start="13:38" pos:end="13:43"><name pos:start="13:38" pos:end="13:38">s</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:43">cpu</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="13:47" pos:end="13:50"><expr pos:start="13:47" pos:end="13:50"><name pos:start="13:47" pos:end="13:50">true</name></expr></argument>, <argument pos:start="13:53" pos:end="13:62"><expr pos:start="13:53" pos:end="13:62"><literal type="string" pos:start="13:53" pos:end="13:62">"realized"</literal></expr></argument>, <argument pos:start="13:65" pos:end="13:68"><expr pos:start="13:65" pos:end="13:68"><operator pos:start="13:65" pos:end="13:65">&amp;</operator><name pos:start="13:66" pos:end="13:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">err</name></expr>)</condition> <block pos:start="15:14" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:35"><expr pos:start="17:9" pos:end="17:34"><call pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:23">error_propagate</name><argument_list pos:start="17:24" pos:end="17:34">(<argument pos:start="17:25" pos:end="17:28"><expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">errp</name></expr></argument>, <argument pos:start="17:31" pos:end="17:33"><expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:71"><expr pos:start="25:5" pos:end="25:70"><call pos:start="25:5" pos:end="25:70"><name pos:start="25:5" pos:end="25:28">object_property_set_bool</name><argument_list pos:start="25:29" pos:end="25:70">(<argument pos:start="25:30" pos:end="25:45"><expr pos:start="25:30" pos:end="25:45"><call pos:start="25:30" pos:end="25:45"><name pos:start="25:30" pos:end="25:35">OBJECT</name><argument_list pos:start="25:36" pos:end="25:45">(<argument pos:start="25:37" pos:end="25:44"><expr pos:start="25:37" pos:end="25:44"><operator pos:start="25:37" pos:end="25:37">&amp;</operator><name pos:start="25:38" pos:end="25:44"><name pos:start="25:38" pos:end="25:38">s</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:44">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:48" pos:end="25:51"><expr pos:start="25:48" pos:end="25:51"><name pos:start="25:48" pos:end="25:51">true</name></expr></argument>, <argument pos:start="25:54" pos:end="25:63"><expr pos:start="25:54" pos:end="25:63"><literal type="string" pos:start="25:54" pos:end="25:63">"realized"</literal></expr></argument>, <argument pos:start="25:66" pos:end="25:69"><expr pos:start="25:66" pos:end="25:69"><operator pos:start="25:66" pos:end="25:66">&amp;</operator><name pos:start="25:67" pos:end="25:69">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:12">(<expr pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">err</name></expr>)</condition> <block pos:start="27:14" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:15">

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><call pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:23">error_propagate</name><argument_list pos:start="29:24" pos:end="29:34">(<argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><name pos:start="29:25" pos:end="29:28">errp</name></expr></argument>, <argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:70"><expr pos:start="35:5" pos:end="35:69"><call pos:start="35:5" pos:end="35:69"><name pos:start="35:5" pos:end="35:19">sysbus_mmio_map</name><argument_list pos:start="35:20" pos:end="35:69">(<argument pos:start="35:21" pos:end="35:44"><expr pos:start="35:21" pos:end="35:44"><call pos:start="35:21" pos:end="35:44"><name pos:start="35:21" pos:end="35:34">SYS_BUS_DEVICE</name><argument_list pos:start="35:35" pos:end="35:44">(<argument pos:start="35:36" pos:end="35:43"><expr pos:start="35:36" pos:end="35:43"><operator pos:start="35:36" pos:end="35:36">&amp;</operator><name pos:start="35:37" pos:end="35:43"><name pos:start="35:37" pos:end="35:37">s</name><operator pos:start="35:38" pos:end="35:39">-&gt;</operator><name pos:start="35:40" pos:end="35:43">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:47" pos:end="35:47"><expr pos:start="35:47" pos:end="35:47"><literal type="number" pos:start="35:47" pos:end="35:47">0</literal></expr></argument>, <argument pos:start="35:50" pos:end="35:68"><expr pos:start="35:50" pos:end="35:68"><name pos:start="35:50" pos:end="35:68">FSL_IMX25_AVIC_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="39:71"><expr pos:start="37:5" pos:end="39:70"><call pos:start="37:5" pos:end="39:70"><name pos:start="37:5" pos:end="37:22">sysbus_connect_irq</name><argument_list pos:start="37:23" pos:end="39:70">(<argument pos:start="37:24" pos:end="37:47"><expr pos:start="37:24" pos:end="37:47"><call pos:start="37:24" pos:end="37:47"><name pos:start="37:24" pos:end="37:37">SYS_BUS_DEVICE</name><argument_list pos:start="37:38" pos:end="37:47">(<argument pos:start="37:39" pos:end="37:46"><expr pos:start="37:39" pos:end="37:46"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:46"><name pos:start="37:40" pos:end="37:40">s</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:46">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:50" pos:end="37:50"><expr pos:start="37:50" pos:end="37:50"><literal type="number" pos:start="37:50" pos:end="37:50">0</literal></expr></argument>,

                       <argument pos:start="39:24" pos:end="39:69"><expr pos:start="39:24" pos:end="39:69"><call pos:start="39:24" pos:end="39:69"><name pos:start="39:24" pos:end="39:39">qdev_get_gpio_in</name><argument_list pos:start="39:40" pos:end="39:69">(<argument pos:start="39:41" pos:end="39:55"><expr pos:start="39:41" pos:end="39:55"><call pos:start="39:41" pos:end="39:55"><name pos:start="39:41" pos:end="39:46">DEVICE</name><argument_list pos:start="39:47" pos:end="39:55">(<argument pos:start="39:48" pos:end="39:54"><expr pos:start="39:48" pos:end="39:54"><operator pos:start="39:48" pos:end="39:48">&amp;</operator><name pos:start="39:49" pos:end="39:54"><name pos:start="39:49" pos:end="39:49">s</name><operator pos:start="39:50" pos:end="39:51">-&gt;</operator><name pos:start="39:52" pos:end="39:54">cpu</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:58" pos:end="39:68"><expr pos:start="39:58" pos:end="39:68"><name pos:start="39:58" pos:end="39:68">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="43:71"><expr pos:start="41:5" pos:end="43:70"><call pos:start="41:5" pos:end="43:70"><name pos:start="41:5" pos:end="41:22">sysbus_connect_irq</name><argument_list pos:start="41:23" pos:end="43:70">(<argument pos:start="41:24" pos:end="41:47"><expr pos:start="41:24" pos:end="41:47"><call pos:start="41:24" pos:end="41:47"><name pos:start="41:24" pos:end="41:37">SYS_BUS_DEVICE</name><argument_list pos:start="41:38" pos:end="41:47">(<argument pos:start="41:39" pos:end="41:46"><expr pos:start="41:39" pos:end="41:46"><operator pos:start="41:39" pos:end="41:39">&amp;</operator><name pos:start="41:40" pos:end="41:46"><name pos:start="41:40" pos:end="41:40">s</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:46">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:50" pos:end="41:50"><expr pos:start="41:50" pos:end="41:50"><literal type="number" pos:start="41:50" pos:end="41:50">1</literal></expr></argument>,

                       <argument pos:start="43:24" pos:end="43:69"><expr pos:start="43:24" pos:end="43:69"><call pos:start="43:24" pos:end="43:69"><name pos:start="43:24" pos:end="43:39">qdev_get_gpio_in</name><argument_list pos:start="43:40" pos:end="43:69">(<argument pos:start="43:41" pos:end="43:55"><expr pos:start="43:41" pos:end="43:55"><call pos:start="43:41" pos:end="43:55"><name pos:start="43:41" pos:end="43:46">DEVICE</name><argument_list pos:start="43:47" pos:end="43:55">(<argument pos:start="43:48" pos:end="43:54"><expr pos:start="43:48" pos:end="43:54"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:54"><name pos:start="43:49" pos:end="43:49">s</name><operator pos:start="43:50" pos:end="43:51">-&gt;</operator><name pos:start="43:52" pos:end="43:54">cpu</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:58" pos:end="43:68"><expr pos:start="43:58" pos:end="43:68"><name pos:start="43:58" pos:end="43:68">ARM_CPU_FIQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:70"><expr pos:start="47:5" pos:end="47:69"><call pos:start="47:5" pos:end="47:69"><name pos:start="47:5" pos:end="47:28">object_property_set_bool</name><argument_list pos:start="47:29" pos:end="47:69">(<argument pos:start="47:30" pos:end="47:44"><expr pos:start="47:30" pos:end="47:44"><call pos:start="47:30" pos:end="47:44"><name pos:start="47:30" pos:end="47:35">OBJECT</name><argument_list pos:start="47:36" pos:end="47:44">(<argument pos:start="47:37" pos:end="47:43"><expr pos:start="47:37" pos:end="47:43"><operator pos:start="47:37" pos:end="47:37">&amp;</operator><name pos:start="47:38" pos:end="47:43"><name pos:start="47:38" pos:end="47:38">s</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:43">ccm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:47" pos:end="47:50"><expr pos:start="47:47" pos:end="47:50"><name pos:start="47:47" pos:end="47:50">true</name></expr></argument>, <argument pos:start="47:53" pos:end="47:62"><expr pos:start="47:53" pos:end="47:62"><literal type="string" pos:start="47:53" pos:end="47:62">"realized"</literal></expr></argument>, <argument pos:start="47:65" pos:end="47:68"><expr pos:start="47:65" pos:end="47:68"><operator pos:start="47:65" pos:end="47:65">&amp;</operator><name pos:start="47:66" pos:end="47:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">err</name></expr>)</condition> <block pos:start="49:14" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:15">

        <expr_stmt pos:start="51:9" pos:end="51:35"><expr pos:start="51:9" pos:end="51:34"><call pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:23">error_propagate</name><argument_list pos:start="51:24" pos:end="51:34">(<argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><name pos:start="51:25" pos:end="51:28">errp</name></expr></argument>, <argument pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><name pos:start="51:31" pos:end="51:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:68"><expr pos:start="57:5" pos:end="57:67"><call pos:start="57:5" pos:end="57:67"><name pos:start="57:5" pos:end="57:19">sysbus_mmio_map</name><argument_list pos:start="57:20" pos:end="57:67">(<argument pos:start="57:21" pos:end="57:43"><expr pos:start="57:21" pos:end="57:43"><call pos:start="57:21" pos:end="57:43"><name pos:start="57:21" pos:end="57:34">SYS_BUS_DEVICE</name><argument_list pos:start="57:35" pos:end="57:43">(<argument pos:start="57:36" pos:end="57:42"><expr pos:start="57:36" pos:end="57:42"><operator pos:start="57:36" pos:end="57:36">&amp;</operator><name pos:start="57:37" pos:end="57:42"><name pos:start="57:37" pos:end="57:37">s</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:42">ccm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="57:46" pos:end="57:46"><expr pos:start="57:46" pos:end="57:46"><literal type="number" pos:start="57:46" pos:end="57:46">0</literal></expr></argument>, <argument pos:start="57:49" pos:end="57:66"><expr pos:start="57:49" pos:end="57:66"><name pos:start="57:49" pos:end="57:66">FSL_IMX25_CCM_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:30">/* Initialize all UARTs */</comment>

    <for pos:start="63:5" pos:end="133:5">for <control pos:start="63:9" pos:end="63:45">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:40"><expr pos:start="63:17" pos:end="63:39"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:39">FSL_IMX25_NUM_UARTS</name></expr>;</condition> <incr pos:start="63:42" pos:end="63:44"><expr pos:start="63:42" pos:end="63:44"><name pos:start="63:42" pos:end="63:42">i</name><operator pos:start="63:43" pos:end="63:44">++</operator></expr></incr>)</control> <block pos:start="63:47" pos:end="133:5">{<block_content pos:start="65:9" pos:end="131:66">

        <struct pos:start="65:9" pos:end="83:10"><specifier pos:start="65:9" pos:end="65:14">static</specifier> <specifier pos:start="65:16" pos:end="65:20">const</specifier> struct <block pos:start="65:29" pos:end="71:9">{

            <decl_stmt pos:start="67:13" pos:end="67:24"><decl pos:start="67:13" pos:end="67:23"><type pos:start="67:13" pos:end="67:18"><name pos:start="67:13" pos:end="67:18">hwaddr</name></type> <name pos:start="67:20" pos:end="67:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="69:13" pos:end="69:29"><decl pos:start="69:13" pos:end="69:28"><type pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:20">unsigned</name> <name pos:start="69:22" pos:end="69:24">int</name></type> <name pos:start="69:26" pos:end="69:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="71:11" pos:end="83:9"><name pos:start="71:11" pos:end="71:43"><name pos:start="71:11" pos:end="71:22">serial_table</name><index pos:start="71:23" pos:end="71:43">[<expr pos:start="71:24" pos:end="71:42"><name pos:start="71:24" pos:end="71:42">FSL_IMX25_NUM_UARTS</name></expr>]</index></name> <init pos:start="71:45" pos:end="83:9">= <expr pos:start="71:47" pos:end="83:9"><block pos:start="71:47" pos:end="83:9">{

            <expr pos:start="73:13" pos:end="73:57"><block pos:start="73:13" pos:end="73:57">{ <expr pos:start="73:15" pos:end="73:34"><name pos:start="73:15" pos:end="73:34">FSL_IMX25_UART1_ADDR</name></expr>, <expr pos:start="73:37" pos:end="73:55"><name pos:start="73:37" pos:end="73:55">FSL_IMX25_UART1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="75:13" pos:end="75:57"><block pos:start="75:13" pos:end="75:57">{ <expr pos:start="75:15" pos:end="75:34"><name pos:start="75:15" pos:end="75:34">FSL_IMX25_UART2_ADDR</name></expr>, <expr pos:start="75:37" pos:end="75:55"><name pos:start="75:37" pos:end="75:55">FSL_IMX25_UART2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="77:13" pos:end="77:57"><block pos:start="77:13" pos:end="77:57">{ <expr pos:start="77:15" pos:end="77:34"><name pos:start="77:15" pos:end="77:34">FSL_IMX25_UART3_ADDR</name></expr>, <expr pos:start="77:37" pos:end="77:55"><name pos:start="77:37" pos:end="77:55">FSL_IMX25_UART3_IRQ</name></expr> }</block></expr>,

            <expr pos:start="79:13" pos:end="79:57"><block pos:start="79:13" pos:end="79:57">{ <expr pos:start="79:15" pos:end="79:34"><name pos:start="79:15" pos:end="79:34">FSL_IMX25_UART4_ADDR</name></expr>, <expr pos:start="79:37" pos:end="79:55"><name pos:start="79:37" pos:end="79:55">FSL_IMX25_UART4_IRQ</name></expr> }</block></expr>,

            <expr pos:start="81:13" pos:end="81:57"><block pos:start="81:13" pos:end="81:57">{ <expr pos:start="81:15" pos:end="81:34"><name pos:start="81:15" pos:end="81:34">FSL_IMX25_UART5_ADDR</name></expr>, <expr pos:start="81:37" pos:end="81:55"><name pos:start="81:37" pos:end="81:55">FSL_IMX25_UART5_IRQ</name></expr> }</block></expr>

        }</block></expr></init></decl>;</struct>



        <if_stmt pos:start="87:9" pos:end="111:9"><if pos:start="87:9" pos:end="111:9">if <condition pos:start="87:12" pos:end="87:33">(<expr pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:13">i</name> <operator pos:start="87:15" pos:end="87:15">&lt;</operator> <name pos:start="87:17" pos:end="87:32">MAX_SERIAL_PORTS</name></expr>)</condition> <block pos:start="87:35" pos:end="111:9">{<block_content pos:start="89:13" pos:end="109:67">

            <decl_stmt pos:start="89:13" pos:end="89:25"><decl pos:start="89:13" pos:end="89:24"><type pos:start="89:13" pos:end="89:21"><name pos:start="89:13" pos:end="89:19">Chardev</name> <modifier pos:start="89:21" pos:end="89:21">*</modifier></type><name pos:start="89:22" pos:end="89:24">chr</name></decl>;</decl_stmt>



            <expr_stmt pos:start="93:13" pos:end="93:32"><expr pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:15">chr</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:31"><name pos:start="93:19" pos:end="93:28">serial_hds</name><index pos:start="93:29" pos:end="93:31">[<expr pos:start="93:30" pos:end="93:30"><name pos:start="93:30" pos:end="93:30">i</name></expr>]</index></name></expr>;</expr_stmt>



            <if_stmt pos:start="97:13" pos:end="105:13"><if pos:start="97:13" pos:end="105:13">if <condition pos:start="97:16" pos:end="97:21">(<expr pos:start="97:17" pos:end="97:20"><operator pos:start="97:17" pos:end="97:17">!</operator><name pos:start="97:18" pos:end="97:20">chr</name></expr>)</condition> <block pos:start="97:23" pos:end="105:13">{<block_content pos:start="99:17" pos:end="103:50">

                <decl_stmt pos:start="99:17" pos:end="99:31"><decl pos:start="99:17" pos:end="99:30"><type pos:start="99:17" pos:end="99:20"><name pos:start="99:17" pos:end="99:20">char</name></type> <name pos:start="99:22" pos:end="99:30"><name pos:start="99:22" pos:end="99:26">label</name><index pos:start="99:27" pos:end="99:30">[<expr pos:start="99:28" pos:end="99:29"><literal type="number" pos:start="99:28" pos:end="99:29">20</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:66"><expr pos:start="101:17" pos:end="101:65"><call pos:start="101:17" pos:end="101:65"><name pos:start="101:17" pos:end="101:24">snprintf</name><argument_list pos:start="101:25" pos:end="101:65">(<argument pos:start="101:26" pos:end="101:30"><expr pos:start="101:26" pos:end="101:30"><name pos:start="101:26" pos:end="101:30">label</name></expr></argument>, <argument pos:start="101:33" pos:end="101:45"><expr pos:start="101:33" pos:end="101:45"><sizeof pos:start="101:33" pos:end="101:45">sizeof<argument_list pos:start="101:39" pos:end="101:45">(<argument pos:start="101:40" pos:end="101:44"><expr pos:start="101:40" pos:end="101:44"><name pos:start="101:40" pos:end="101:44">label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="101:48" pos:end="101:61"><expr pos:start="101:48" pos:end="101:61"><literal type="string" pos:start="101:48" pos:end="101:61">"imx31.uart%d"</literal></expr></argument>, <argument pos:start="101:64" pos:end="101:64"><expr pos:start="101:64" pos:end="101:64"><name pos:start="101:64" pos:end="101:64">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:50"><expr pos:start="103:17" pos:end="103:49"><name pos:start="103:17" pos:end="103:19">chr</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <call pos:start="103:23" pos:end="103:49"><name pos:start="103:23" pos:end="103:34">qemu_chr_new</name><argument_list pos:start="103:35" pos:end="103:49">(<argument pos:start="103:36" pos:end="103:40"><expr pos:start="103:36" pos:end="103:40"><name pos:start="103:36" pos:end="103:40">label</name></expr></argument>, <argument pos:start="103:43" pos:end="103:48"><expr pos:start="103:43" pos:end="103:48"><literal type="string" pos:start="103:43" pos:end="103:48">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:67"><expr pos:start="109:13" pos:end="109:66"><call pos:start="109:13" pos:end="109:66"><name pos:start="109:13" pos:end="109:29">qdev_prop_set_chr</name><argument_list pos:start="109:30" pos:end="109:66">(<argument pos:start="109:31" pos:end="109:49"><expr pos:start="109:31" pos:end="109:49"><call pos:start="109:31" pos:end="109:49"><name pos:start="109:31" pos:end="109:36">DEVICE</name><argument_list pos:start="109:37" pos:end="109:49">(<argument pos:start="109:38" pos:end="109:48"><expr pos:start="109:38" pos:end="109:48"><operator pos:start="109:38" pos:end="109:38">&amp;</operator><name pos:start="109:39" pos:end="109:48"><name pos:start="109:39" pos:end="109:39">s</name><operator pos:start="109:40" pos:end="109:41">-&gt;</operator><name pos:start="109:42" pos:end="109:45">uart</name><index pos:start="109:46" pos:end="109:48">[<expr pos:start="109:47" pos:end="109:47"><name pos:start="109:47" pos:end="109:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:52" pos:end="109:60"><expr pos:start="109:52" pos:end="109:60"><literal type="string" pos:start="109:52" pos:end="109:60">"chardev"</literal></expr></argument>, <argument pos:start="109:63" pos:end="109:65"><expr pos:start="109:63" pos:end="109:65"><name pos:start="109:63" pos:end="109:65">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:78"><expr pos:start="115:9" pos:end="115:77"><call pos:start="115:9" pos:end="115:77"><name pos:start="115:9" pos:end="115:32">object_property_set_bool</name><argument_list pos:start="115:33" pos:end="115:77">(<argument pos:start="115:34" pos:end="115:52"><expr pos:start="115:34" pos:end="115:52"><call pos:start="115:34" pos:end="115:52"><name pos:start="115:34" pos:end="115:39">OBJECT</name><argument_list pos:start="115:40" pos:end="115:52">(<argument pos:start="115:41" pos:end="115:51"><expr pos:start="115:41" pos:end="115:51"><operator pos:start="115:41" pos:end="115:41">&amp;</operator><name pos:start="115:42" pos:end="115:51"><name pos:start="115:42" pos:end="115:42">s</name><operator pos:start="115:43" pos:end="115:44">-&gt;</operator><name pos:start="115:45" pos:end="115:48">uart</name><index pos:start="115:49" pos:end="115:51">[<expr pos:start="115:50" pos:end="115:50"><name pos:start="115:50" pos:end="115:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:55" pos:end="115:58"><expr pos:start="115:55" pos:end="115:58"><name pos:start="115:55" pos:end="115:58">true</name></expr></argument>, <argument pos:start="115:61" pos:end="115:70"><expr pos:start="115:61" pos:end="115:70"><literal type="string" pos:start="115:61" pos:end="115:70">"realized"</literal></expr></argument>, <argument pos:start="115:73" pos:end="115:76"><expr pos:start="115:73" pos:end="115:76"><operator pos:start="115:73" pos:end="115:73">&amp;</operator><name pos:start="115:74" pos:end="115:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="123:9"><if pos:start="117:9" pos:end="123:9">if <condition pos:start="117:12" pos:end="117:16">(<expr pos:start="117:13" pos:end="117:15"><name pos:start="117:13" pos:end="117:15">err</name></expr>)</condition> <block pos:start="117:18" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:19">

            <expr_stmt pos:start="119:13" pos:end="119:39"><expr pos:start="119:13" pos:end="119:38"><call pos:start="119:13" pos:end="119:38"><name pos:start="119:13" pos:end="119:27">error_propagate</name><argument_list pos:start="119:28" pos:end="119:38">(<argument pos:start="119:29" pos:end="119:32"><expr pos:start="119:29" pos:end="119:32"><name pos:start="119:29" pos:end="119:32">errp</name></expr></argument>, <argument pos:start="119:35" pos:end="119:37"><expr pos:start="119:35" pos:end="119:37"><name pos:start="119:35" pos:end="119:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:78"><expr pos:start="125:9" pos:end="125:77"><call pos:start="125:9" pos:end="125:77"><name pos:start="125:9" pos:end="125:23">sysbus_mmio_map</name><argument_list pos:start="125:24" pos:end="125:77">(<argument pos:start="125:25" pos:end="125:51"><expr pos:start="125:25" pos:end="125:51"><call pos:start="125:25" pos:end="125:51"><name pos:start="125:25" pos:end="125:38">SYS_BUS_DEVICE</name><argument_list pos:start="125:39" pos:end="125:51">(<argument pos:start="125:40" pos:end="125:50"><expr pos:start="125:40" pos:end="125:50"><operator pos:start="125:40" pos:end="125:40">&amp;</operator><name pos:start="125:41" pos:end="125:50"><name pos:start="125:41" pos:end="125:41">s</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:47">uart</name><index pos:start="125:48" pos:end="125:50">[<expr pos:start="125:49" pos:end="125:49"><name pos:start="125:49" pos:end="125:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="125:54" pos:end="125:54"><expr pos:start="125:54" pos:end="125:54"><literal type="number" pos:start="125:54" pos:end="125:54">0</literal></expr></argument>, <argument pos:start="125:57" pos:end="125:76"><expr pos:start="125:57" pos:end="125:76"><name pos:start="125:57" pos:end="125:71"><name pos:start="125:57" pos:end="125:68">serial_table</name><index pos:start="125:69" pos:end="125:71">[<expr pos:start="125:70" pos:end="125:70"><name pos:start="125:70" pos:end="125:70">i</name></expr>]</index></name><operator pos:start="125:72" pos:end="125:72">.</operator><name pos:start="125:73" pos:end="125:76">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="131:66"><expr pos:start="127:9" pos:end="131:65"><call pos:start="127:9" pos:end="131:65"><name pos:start="127:9" pos:end="127:26">sysbus_connect_irq</name><argument_list pos:start="127:27" pos:end="131:65">(<argument pos:start="127:28" pos:end="127:54"><expr pos:start="127:28" pos:end="127:54"><call pos:start="127:28" pos:end="127:54"><name pos:start="127:28" pos:end="127:41">SYS_BUS_DEVICE</name><argument_list pos:start="127:42" pos:end="127:54">(<argument pos:start="127:43" pos:end="127:53"><expr pos:start="127:43" pos:end="127:53"><operator pos:start="127:43" pos:end="127:43">&amp;</operator><name pos:start="127:44" pos:end="127:53"><name pos:start="127:44" pos:end="127:44">s</name><operator pos:start="127:45" pos:end="127:46">-&gt;</operator><name pos:start="127:47" pos:end="127:50">uart</name><index pos:start="127:51" pos:end="127:53">[<expr pos:start="127:52" pos:end="127:52"><name pos:start="127:52" pos:end="127:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="127:57" pos:end="127:57"><expr pos:start="127:57" pos:end="127:57"><literal type="number" pos:start="127:57" pos:end="127:57">0</literal></expr></argument>,

                           <argument pos:start="129:28" pos:end="131:64"><expr pos:start="129:28" pos:end="131:64"><call pos:start="129:28" pos:end="131:64"><name pos:start="129:28" pos:end="129:43">qdev_get_gpio_in</name><argument_list pos:start="129:44" pos:end="131:64">(<argument pos:start="129:45" pos:end="129:60"><expr pos:start="129:45" pos:end="129:60"><call pos:start="129:45" pos:end="129:60"><name pos:start="129:45" pos:end="129:50">DEVICE</name><argument_list pos:start="129:51" pos:end="129:60">(<argument pos:start="129:52" pos:end="129:59"><expr pos:start="129:52" pos:end="129:59"><operator pos:start="129:52" pos:end="129:52">&amp;</operator><name pos:start="129:53" pos:end="129:59"><name pos:start="129:53" pos:end="129:53">s</name><operator pos:start="129:54" pos:end="129:55">-&gt;</operator><name pos:start="129:56" pos:end="129:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="131:45" pos:end="131:63"><expr pos:start="131:45" pos:end="131:63"><name pos:start="131:45" pos:end="131:59"><name pos:start="131:45" pos:end="131:56">serial_table</name><index pos:start="131:57" pos:end="131:59">[<expr pos:start="131:58" pos:end="131:58"><name pos:start="131:58" pos:end="131:58">i</name></expr>]</index></name><operator pos:start="131:60" pos:end="131:60">.</operator><name pos:start="131:61" pos:end="131:63">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="137:5" pos:end="137:35">/* Initialize all GPT timers */</comment>

    <for pos:start="139:5" pos:end="183:5">for <control pos:start="139:9" pos:end="139:44">(<init pos:start="139:10" pos:end="139:15"><expr pos:start="139:10" pos:end="139:14"><name pos:start="139:10" pos:end="139:10">i</name> <operator pos:start="139:12" pos:end="139:12">=</operator> <literal type="number" pos:start="139:14" pos:end="139:14">0</literal></expr>;</init> <condition pos:start="139:17" pos:end="139:39"><expr pos:start="139:17" pos:end="139:38"><name pos:start="139:17" pos:end="139:17">i</name> <operator pos:start="139:19" pos:end="139:19">&lt;</operator> <name pos:start="139:21" pos:end="139:38">FSL_IMX25_NUM_GPTS</name></expr>;</condition> <incr pos:start="139:41" pos:end="139:43"><expr pos:start="139:41" pos:end="139:43"><name pos:start="139:41" pos:end="139:41">i</name><operator pos:start="139:42" pos:end="139:43">++</operator></expr></incr>)</control> <block pos:start="139:46" pos:end="183:5">{<block_content pos:start="141:9" pos:end="181:63">

        <struct pos:start="141:9" pos:end="157:10"><specifier pos:start="141:9" pos:end="141:14">static</specifier> <specifier pos:start="141:16" pos:end="141:20">const</specifier> struct <block pos:start="141:29" pos:end="147:9">{

            <decl_stmt pos:start="143:13" pos:end="143:24"><decl pos:start="143:13" pos:end="143:23"><type pos:start="143:13" pos:end="143:18"><name pos:start="143:13" pos:end="143:18">hwaddr</name></type> <name pos:start="143:20" pos:end="143:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="145:13" pos:end="145:29"><decl pos:start="145:13" pos:end="145:28"><type pos:start="145:13" pos:end="145:24"><name pos:start="145:13" pos:end="145:20">unsigned</name> <name pos:start="145:22" pos:end="145:24">int</name></type> <name pos:start="145:26" pos:end="145:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="147:11" pos:end="157:9"><name pos:start="147:11" pos:end="147:39"><name pos:start="147:11" pos:end="147:19">gpt_table</name><index pos:start="147:20" pos:end="147:39">[<expr pos:start="147:21" pos:end="147:38"><name pos:start="147:21" pos:end="147:38">FSL_IMX25_NUM_GPTS</name></expr>]</index></name> <init pos:start="147:41" pos:end="157:9">= <expr pos:start="147:43" pos:end="157:9"><block pos:start="147:43" pos:end="157:9">{

            <expr pos:start="149:13" pos:end="149:55"><block pos:start="149:13" pos:end="149:55">{ <expr pos:start="149:15" pos:end="149:33"><name pos:start="149:15" pos:end="149:33">FSL_IMX25_GPT1_ADDR</name></expr>, <expr pos:start="149:36" pos:end="149:53"><name pos:start="149:36" pos:end="149:53">FSL_IMX25_GPT1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="151:13" pos:end="151:55"><block pos:start="151:13" pos:end="151:55">{ <expr pos:start="151:15" pos:end="151:33"><name pos:start="151:15" pos:end="151:33">FSL_IMX25_GPT2_ADDR</name></expr>, <expr pos:start="151:36" pos:end="151:53"><name pos:start="151:36" pos:end="151:53">FSL_IMX25_GPT2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="153:13" pos:end="153:55"><block pos:start="153:13" pos:end="153:55">{ <expr pos:start="153:15" pos:end="153:33"><name pos:start="153:15" pos:end="153:33">FSL_IMX25_GPT3_ADDR</name></expr>, <expr pos:start="153:36" pos:end="153:53"><name pos:start="153:36" pos:end="153:53">FSL_IMX25_GPT3_IRQ</name></expr> }</block></expr>,

            <expr pos:start="155:13" pos:end="155:55"><block pos:start="155:13" pos:end="155:55">{ <expr pos:start="155:15" pos:end="155:33"><name pos:start="155:15" pos:end="155:33">FSL_IMX25_GPT4_ADDR</name></expr>, <expr pos:start="155:36" pos:end="155:53"><name pos:start="155:36" pos:end="155:53">FSL_IMX25_GPT4_IRQ</name></expr> }</block></expr>

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="161:9" pos:end="161:41"><expr pos:start="161:9" pos:end="161:40"><name pos:start="161:9" pos:end="161:17"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:14">gpt</name><index pos:start="161:15" pos:end="161:17">[<expr pos:start="161:16" pos:end="161:16"><name pos:start="161:16" pos:end="161:16">i</name></expr>]</index></name><operator pos:start="161:18" pos:end="161:18">.</operator><name pos:start="161:19" pos:end="161:21">ccm</name> <operator pos:start="161:23" pos:end="161:23">=</operator> <call pos:start="161:25" pos:end="161:40"><name pos:start="161:25" pos:end="161:31">IMX_CCM</name><argument_list pos:start="161:32" pos:end="161:40">(<argument pos:start="161:33" pos:end="161:39"><expr pos:start="161:33" pos:end="161:39"><operator pos:start="161:33" pos:end="161:33">&amp;</operator><name pos:start="161:34" pos:end="161:39"><name pos:start="161:34" pos:end="161:34">s</name><operator pos:start="161:35" pos:end="161:36">-&gt;</operator><name pos:start="161:37" pos:end="161:39">ccm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:77"><expr pos:start="165:9" pos:end="165:76"><call pos:start="165:9" pos:end="165:76"><name pos:start="165:9" pos:end="165:32">object_property_set_bool</name><argument_list pos:start="165:33" pos:end="165:76">(<argument pos:start="165:34" pos:end="165:51"><expr pos:start="165:34" pos:end="165:51"><call pos:start="165:34" pos:end="165:51"><name pos:start="165:34" pos:end="165:39">OBJECT</name><argument_list pos:start="165:40" pos:end="165:51">(<argument pos:start="165:41" pos:end="165:50"><expr pos:start="165:41" pos:end="165:50"><operator pos:start="165:41" pos:end="165:41">&amp;</operator><name pos:start="165:42" pos:end="165:50"><name pos:start="165:42" pos:end="165:42">s</name><operator pos:start="165:43" pos:end="165:44">-&gt;</operator><name pos:start="165:45" pos:end="165:47">gpt</name><index pos:start="165:48" pos:end="165:50">[<expr pos:start="165:49" pos:end="165:49"><name pos:start="165:49" pos:end="165:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="165:54" pos:end="165:57"><expr pos:start="165:54" pos:end="165:57"><name pos:start="165:54" pos:end="165:57">true</name></expr></argument>, <argument pos:start="165:60" pos:end="165:69"><expr pos:start="165:60" pos:end="165:69"><literal type="string" pos:start="165:60" pos:end="165:69">"realized"</literal></expr></argument>, <argument pos:start="165:72" pos:end="165:75"><expr pos:start="165:72" pos:end="165:75"><operator pos:start="165:72" pos:end="165:72">&amp;</operator><name pos:start="165:73" pos:end="165:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="173:9"><if pos:start="167:9" pos:end="173:9">if <condition pos:start="167:12" pos:end="167:16">(<expr pos:start="167:13" pos:end="167:15"><name pos:start="167:13" pos:end="167:15">err</name></expr>)</condition> <block pos:start="167:18" pos:end="173:9">{<block_content pos:start="169:13" pos:end="171:19">

            <expr_stmt pos:start="169:13" pos:end="169:39"><expr pos:start="169:13" pos:end="169:38"><call pos:start="169:13" pos:end="169:38"><name pos:start="169:13" pos:end="169:27">error_propagate</name><argument_list pos:start="169:28" pos:end="169:38">(<argument pos:start="169:29" pos:end="169:32"><expr pos:start="169:29" pos:end="169:32"><name pos:start="169:29" pos:end="169:32">errp</name></expr></argument>, <argument pos:start="169:35" pos:end="169:37"><expr pos:start="169:35" pos:end="169:37"><name pos:start="169:35" pos:end="169:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="171:13" pos:end="171:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:74"><expr pos:start="175:9" pos:end="175:73"><call pos:start="175:9" pos:end="175:73"><name pos:start="175:9" pos:end="175:23">sysbus_mmio_map</name><argument_list pos:start="175:24" pos:end="175:73">(<argument pos:start="175:25" pos:end="175:50"><expr pos:start="175:25" pos:end="175:50"><call pos:start="175:25" pos:end="175:50"><name pos:start="175:25" pos:end="175:38">SYS_BUS_DEVICE</name><argument_list pos:start="175:39" pos:end="175:50">(<argument pos:start="175:40" pos:end="175:49"><expr pos:start="175:40" pos:end="175:49"><operator pos:start="175:40" pos:end="175:40">&amp;</operator><name pos:start="175:41" pos:end="175:49"><name pos:start="175:41" pos:end="175:41">s</name><operator pos:start="175:42" pos:end="175:43">-&gt;</operator><name pos:start="175:44" pos:end="175:46">gpt</name><index pos:start="175:47" pos:end="175:49">[<expr pos:start="175:48" pos:end="175:48"><name pos:start="175:48" pos:end="175:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="175:53" pos:end="175:53"><expr pos:start="175:53" pos:end="175:53"><literal type="number" pos:start="175:53" pos:end="175:53">0</literal></expr></argument>, <argument pos:start="175:56" pos:end="175:72"><expr pos:start="175:56" pos:end="175:72"><name pos:start="175:56" pos:end="175:67"><name pos:start="175:56" pos:end="175:64">gpt_table</name><index pos:start="175:65" pos:end="175:67">[<expr pos:start="175:66" pos:end="175:66"><name pos:start="175:66" pos:end="175:66">i</name></expr>]</index></name><operator pos:start="175:68" pos:end="175:68">.</operator><name pos:start="175:69" pos:end="175:72">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="181:63"><expr pos:start="177:9" pos:end="181:62"><call pos:start="177:9" pos:end="181:62"><name pos:start="177:9" pos:end="177:26">sysbus_connect_irq</name><argument_list pos:start="177:27" pos:end="181:62">(<argument pos:start="177:28" pos:end="177:53"><expr pos:start="177:28" pos:end="177:53"><call pos:start="177:28" pos:end="177:53"><name pos:start="177:28" pos:end="177:41">SYS_BUS_DEVICE</name><argument_list pos:start="177:42" pos:end="177:53">(<argument pos:start="177:43" pos:end="177:52"><expr pos:start="177:43" pos:end="177:52"><operator pos:start="177:43" pos:end="177:43">&amp;</operator><name pos:start="177:44" pos:end="177:52"><name pos:start="177:44" pos:end="177:44">s</name><operator pos:start="177:45" pos:end="177:46">-&gt;</operator><name pos:start="177:47" pos:end="177:49">gpt</name><index pos:start="177:50" pos:end="177:52">[<expr pos:start="177:51" pos:end="177:51"><name pos:start="177:51" pos:end="177:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="177:56" pos:end="177:56"><expr pos:start="177:56" pos:end="177:56"><literal type="number" pos:start="177:56" pos:end="177:56">0</literal></expr></argument>,

                           <argument pos:start="179:28" pos:end="181:61"><expr pos:start="179:28" pos:end="181:61"><call pos:start="179:28" pos:end="181:61"><name pos:start="179:28" pos:end="179:43">qdev_get_gpio_in</name><argument_list pos:start="179:44" pos:end="181:61">(<argument pos:start="179:45" pos:end="179:60"><expr pos:start="179:45" pos:end="179:60"><call pos:start="179:45" pos:end="179:60"><name pos:start="179:45" pos:end="179:50">DEVICE</name><argument_list pos:start="179:51" pos:end="179:60">(<argument pos:start="179:52" pos:end="179:59"><expr pos:start="179:52" pos:end="179:59"><operator pos:start="179:52" pos:end="179:52">&amp;</operator><name pos:start="179:53" pos:end="179:59"><name pos:start="179:53" pos:end="179:53">s</name><operator pos:start="179:54" pos:end="179:55">-&gt;</operator><name pos:start="179:56" pos:end="179:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="181:45" pos:end="181:60"><expr pos:start="181:45" pos:end="181:60"><name pos:start="181:45" pos:end="181:56"><name pos:start="181:45" pos:end="181:53">gpt_table</name><index pos:start="181:54" pos:end="181:56">[<expr pos:start="181:55" pos:end="181:55"><name pos:start="181:55" pos:end="181:55">i</name></expr>]</index></name><operator pos:start="181:57" pos:end="181:57">.</operator><name pos:start="181:58" pos:end="181:60">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="187:5" pos:end="187:36">/* Initialize all EPIT timers */</comment>

    <for pos:start="189:5" pos:end="229:5">for <control pos:start="189:9" pos:end="189:45">(<init pos:start="189:10" pos:end="189:15"><expr pos:start="189:10" pos:end="189:14"><name pos:start="189:10" pos:end="189:10">i</name> <operator pos:start="189:12" pos:end="189:12">=</operator> <literal type="number" pos:start="189:14" pos:end="189:14">0</literal></expr>;</init> <condition pos:start="189:17" pos:end="189:40"><expr pos:start="189:17" pos:end="189:39"><name pos:start="189:17" pos:end="189:17">i</name> <operator pos:start="189:19" pos:end="189:19">&lt;</operator> <name pos:start="189:21" pos:end="189:39">FSL_IMX25_NUM_EPITS</name></expr>;</condition> <incr pos:start="189:42" pos:end="189:44"><expr pos:start="189:42" pos:end="189:44"><name pos:start="189:42" pos:end="189:42">i</name><operator pos:start="189:43" pos:end="189:44">++</operator></expr></incr>)</control> <block pos:start="189:47" pos:end="229:5">{<block_content pos:start="191:9" pos:end="227:64">

        <struct pos:start="191:9" pos:end="203:10"><specifier pos:start="191:9" pos:end="191:14">static</specifier> <specifier pos:start="191:16" pos:end="191:20">const</specifier> struct <block pos:start="191:29" pos:end="197:9">{

            <decl_stmt pos:start="193:13" pos:end="193:24"><decl pos:start="193:13" pos:end="193:23"><type pos:start="193:13" pos:end="193:18"><name pos:start="193:13" pos:end="193:18">hwaddr</name></type> <name pos:start="193:20" pos:end="193:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="195:13" pos:end="195:29"><decl pos:start="195:13" pos:end="195:28"><type pos:start="195:13" pos:end="195:24"><name pos:start="195:13" pos:end="195:20">unsigned</name> <name pos:start="195:22" pos:end="195:24">int</name></type> <name pos:start="195:26" pos:end="195:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="197:11" pos:end="203:9"><name pos:start="197:11" pos:end="197:41"><name pos:start="197:11" pos:end="197:20">epit_table</name><index pos:start="197:21" pos:end="197:41">[<expr pos:start="197:22" pos:end="197:40"><name pos:start="197:22" pos:end="197:40">FSL_IMX25_NUM_EPITS</name></expr>]</index></name> <init pos:start="197:43" pos:end="203:9">= <expr pos:start="197:45" pos:end="203:9"><block pos:start="197:45" pos:end="203:9">{

            <expr pos:start="199:13" pos:end="199:57"><block pos:start="199:13" pos:end="199:57">{ <expr pos:start="199:15" pos:end="199:34"><name pos:start="199:15" pos:end="199:34">FSL_IMX25_EPIT1_ADDR</name></expr>, <expr pos:start="199:37" pos:end="199:55"><name pos:start="199:37" pos:end="199:55">FSL_IMX25_EPIT1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="201:13" pos:end="201:57"><block pos:start="201:13" pos:end="201:57">{ <expr pos:start="201:15" pos:end="201:34"><name pos:start="201:15" pos:end="201:34">FSL_IMX25_EPIT2_ADDR</name></expr>, <expr pos:start="201:37" pos:end="201:55"><name pos:start="201:37" pos:end="201:55">FSL_IMX25_EPIT2_IRQ</name></expr> }</block></expr>

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="207:9" pos:end="207:42"><expr pos:start="207:9" pos:end="207:41"><name pos:start="207:9" pos:end="207:18"><name pos:start="207:9" pos:end="207:9">s</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:15">epit</name><index pos:start="207:16" pos:end="207:18">[<expr pos:start="207:17" pos:end="207:17"><name pos:start="207:17" pos:end="207:17">i</name></expr>]</index></name><operator pos:start="207:19" pos:end="207:19">.</operator><name pos:start="207:20" pos:end="207:22">ccm</name> <operator pos:start="207:24" pos:end="207:24">=</operator> <call pos:start="207:26" pos:end="207:41"><name pos:start="207:26" pos:end="207:32">IMX_CCM</name><argument_list pos:start="207:33" pos:end="207:41">(<argument pos:start="207:34" pos:end="207:40"><expr pos:start="207:34" pos:end="207:40"><operator pos:start="207:34" pos:end="207:34">&amp;</operator><name pos:start="207:35" pos:end="207:40"><name pos:start="207:35" pos:end="207:35">s</name><operator pos:start="207:36" pos:end="207:37">-&gt;</operator><name pos:start="207:38" pos:end="207:40">ccm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="211:9" pos:end="211:78"><expr pos:start="211:9" pos:end="211:77"><call pos:start="211:9" pos:end="211:77"><name pos:start="211:9" pos:end="211:32">object_property_set_bool</name><argument_list pos:start="211:33" pos:end="211:77">(<argument pos:start="211:34" pos:end="211:52"><expr pos:start="211:34" pos:end="211:52"><call pos:start="211:34" pos:end="211:52"><name pos:start="211:34" pos:end="211:39">OBJECT</name><argument_list pos:start="211:40" pos:end="211:52">(<argument pos:start="211:41" pos:end="211:51"><expr pos:start="211:41" pos:end="211:51"><operator pos:start="211:41" pos:end="211:41">&amp;</operator><name pos:start="211:42" pos:end="211:51"><name pos:start="211:42" pos:end="211:42">s</name><operator pos:start="211:43" pos:end="211:44">-&gt;</operator><name pos:start="211:45" pos:end="211:48">epit</name><index pos:start="211:49" pos:end="211:51">[<expr pos:start="211:50" pos:end="211:50"><name pos:start="211:50" pos:end="211:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="211:55" pos:end="211:58"><expr pos:start="211:55" pos:end="211:58"><name pos:start="211:55" pos:end="211:58">true</name></expr></argument>, <argument pos:start="211:61" pos:end="211:70"><expr pos:start="211:61" pos:end="211:70"><literal type="string" pos:start="211:61" pos:end="211:70">"realized"</literal></expr></argument>, <argument pos:start="211:73" pos:end="211:76"><expr pos:start="211:73" pos:end="211:76"><operator pos:start="211:73" pos:end="211:73">&amp;</operator><name pos:start="211:74" pos:end="211:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="219:9"><if pos:start="213:9" pos:end="219:9">if <condition pos:start="213:12" pos:end="213:16">(<expr pos:start="213:13" pos:end="213:15"><name pos:start="213:13" pos:end="213:15">err</name></expr>)</condition> <block pos:start="213:18" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:19">

            <expr_stmt pos:start="215:13" pos:end="215:39"><expr pos:start="215:13" pos:end="215:38"><call pos:start="215:13" pos:end="215:38"><name pos:start="215:13" pos:end="215:27">error_propagate</name><argument_list pos:start="215:28" pos:end="215:38">(<argument pos:start="215:29" pos:end="215:32"><expr pos:start="215:29" pos:end="215:32"><name pos:start="215:29" pos:end="215:32">errp</name></expr></argument>, <argument pos:start="215:35" pos:end="215:37"><expr pos:start="215:35" pos:end="215:37"><name pos:start="215:35" pos:end="215:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="217:13" pos:end="217:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:76"><expr pos:start="221:9" pos:end="221:75"><call pos:start="221:9" pos:end="221:75"><name pos:start="221:9" pos:end="221:23">sysbus_mmio_map</name><argument_list pos:start="221:24" pos:end="221:75">(<argument pos:start="221:25" pos:end="221:51"><expr pos:start="221:25" pos:end="221:51"><call pos:start="221:25" pos:end="221:51"><name pos:start="221:25" pos:end="221:38">SYS_BUS_DEVICE</name><argument_list pos:start="221:39" pos:end="221:51">(<argument pos:start="221:40" pos:end="221:50"><expr pos:start="221:40" pos:end="221:50"><operator pos:start="221:40" pos:end="221:40">&amp;</operator><name pos:start="221:41" pos:end="221:50"><name pos:start="221:41" pos:end="221:41">s</name><operator pos:start="221:42" pos:end="221:43">-&gt;</operator><name pos:start="221:44" pos:end="221:47">epit</name><index pos:start="221:48" pos:end="221:50">[<expr pos:start="221:49" pos:end="221:49"><name pos:start="221:49" pos:end="221:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="221:54" pos:end="221:54"><expr pos:start="221:54" pos:end="221:54"><literal type="number" pos:start="221:54" pos:end="221:54">0</literal></expr></argument>, <argument pos:start="221:57" pos:end="221:74"><expr pos:start="221:57" pos:end="221:74"><name pos:start="221:57" pos:end="221:69"><name pos:start="221:57" pos:end="221:66">epit_table</name><index pos:start="221:67" pos:end="221:69">[<expr pos:start="221:68" pos:end="221:68"><name pos:start="221:68" pos:end="221:68">i</name></expr>]</index></name><operator pos:start="221:70" pos:end="221:70">.</operator><name pos:start="221:71" pos:end="221:74">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="227:64"><expr pos:start="223:9" pos:end="227:63"><call pos:start="223:9" pos:end="227:63"><name pos:start="223:9" pos:end="223:26">sysbus_connect_irq</name><argument_list pos:start="223:27" pos:end="227:63">(<argument pos:start="223:28" pos:end="223:54"><expr pos:start="223:28" pos:end="223:54"><call pos:start="223:28" pos:end="223:54"><name pos:start="223:28" pos:end="223:41">SYS_BUS_DEVICE</name><argument_list pos:start="223:42" pos:end="223:54">(<argument pos:start="223:43" pos:end="223:53"><expr pos:start="223:43" pos:end="223:53"><operator pos:start="223:43" pos:end="223:43">&amp;</operator><name pos:start="223:44" pos:end="223:53"><name pos:start="223:44" pos:end="223:44">s</name><operator pos:start="223:45" pos:end="223:46">-&gt;</operator><name pos:start="223:47" pos:end="223:50">epit</name><index pos:start="223:51" pos:end="223:53">[<expr pos:start="223:52" pos:end="223:52"><name pos:start="223:52" pos:end="223:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="223:57" pos:end="223:57"><expr pos:start="223:57" pos:end="223:57"><literal type="number" pos:start="223:57" pos:end="223:57">0</literal></expr></argument>,

                           <argument pos:start="225:28" pos:end="227:62"><expr pos:start="225:28" pos:end="227:62"><call pos:start="225:28" pos:end="227:62"><name pos:start="225:28" pos:end="225:43">qdev_get_gpio_in</name><argument_list pos:start="225:44" pos:end="227:62">(<argument pos:start="225:45" pos:end="225:60"><expr pos:start="225:45" pos:end="225:60"><call pos:start="225:45" pos:end="225:60"><name pos:start="225:45" pos:end="225:50">DEVICE</name><argument_list pos:start="225:51" pos:end="225:60">(<argument pos:start="225:52" pos:end="225:59"><expr pos:start="225:52" pos:end="225:59"><operator pos:start="225:52" pos:end="225:52">&amp;</operator><name pos:start="225:53" pos:end="225:59"><name pos:start="225:53" pos:end="225:53">s</name><operator pos:start="225:54" pos:end="225:55">-&gt;</operator><name pos:start="225:56" pos:end="225:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="227:45" pos:end="227:61"><expr pos:start="227:45" pos:end="227:61"><name pos:start="227:45" pos:end="227:57"><name pos:start="227:45" pos:end="227:54">epit_table</name><index pos:start="227:55" pos:end="227:57">[<expr pos:start="227:56" pos:end="227:56"><name pos:start="227:56" pos:end="227:56">i</name></expr>]</index></name><operator pos:start="227:58" pos:end="227:58">.</operator><name pos:start="227:59" pos:end="227:61">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="233:5" pos:end="233:59"><expr pos:start="233:5" pos:end="233:58"><call pos:start="233:5" pos:end="233:58"><name pos:start="233:5" pos:end="233:27">qdev_set_nic_properties</name><argument_list pos:start="233:28" pos:end="233:58">(<argument pos:start="233:29" pos:end="233:43"><expr pos:start="233:29" pos:end="233:43"><call pos:start="233:29" pos:end="233:43"><name pos:start="233:29" pos:end="233:34">DEVICE</name><argument_list pos:start="233:35" pos:end="233:43">(<argument pos:start="233:36" pos:end="233:42"><expr pos:start="233:36" pos:end="233:42"><operator pos:start="233:36" pos:end="233:36">&amp;</operator><name pos:start="233:37" pos:end="233:42"><name pos:start="233:37" pos:end="233:37">s</name><operator pos:start="233:38" pos:end="233:39">-&gt;</operator><name pos:start="233:40" pos:end="233:42">fec</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="233:46" pos:end="233:57"><expr pos:start="233:46" pos:end="233:57"><operator pos:start="233:46" pos:end="233:46">&amp;</operator><name pos:start="233:47" pos:end="233:57"><name pos:start="233:47" pos:end="233:54">nd_table</name><index pos:start="233:55" pos:end="233:57">[<expr pos:start="233:56" pos:end="233:56"><literal type="number" pos:start="233:56" pos:end="233:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="237:5" pos:end="237:70"><expr pos:start="237:5" pos:end="237:69"><call pos:start="237:5" pos:end="237:69"><name pos:start="237:5" pos:end="237:28">object_property_set_bool</name><argument_list pos:start="237:29" pos:end="237:69">(<argument pos:start="237:30" pos:end="237:44"><expr pos:start="237:30" pos:end="237:44"><call pos:start="237:30" pos:end="237:44"><name pos:start="237:30" pos:end="237:35">OBJECT</name><argument_list pos:start="237:36" pos:end="237:44">(<argument pos:start="237:37" pos:end="237:43"><expr pos:start="237:37" pos:end="237:43"><operator pos:start="237:37" pos:end="237:37">&amp;</operator><name pos:start="237:38" pos:end="237:43"><name pos:start="237:38" pos:end="237:38">s</name><operator pos:start="237:39" pos:end="237:40">-&gt;</operator><name pos:start="237:41" pos:end="237:43">fec</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="237:47" pos:end="237:50"><expr pos:start="237:47" pos:end="237:50"><name pos:start="237:47" pos:end="237:50">true</name></expr></argument>, <argument pos:start="237:53" pos:end="237:62"><expr pos:start="237:53" pos:end="237:62"><literal type="string" pos:start="237:53" pos:end="237:62">"realized"</literal></expr></argument>, <argument pos:start="237:65" pos:end="237:68"><expr pos:start="237:65" pos:end="237:68"><operator pos:start="237:65" pos:end="237:65">&amp;</operator><name pos:start="237:66" pos:end="237:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="239:5" pos:end="245:5"><if pos:start="239:5" pos:end="245:5">if <condition pos:start="239:8" pos:end="239:12">(<expr pos:start="239:9" pos:end="239:11"><name pos:start="239:9" pos:end="239:11">err</name></expr>)</condition> <block pos:start="239:14" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:15">

        <expr_stmt pos:start="241:9" pos:end="241:35"><expr pos:start="241:9" pos:end="241:34"><call pos:start="241:9" pos:end="241:34"><name pos:start="241:9" pos:end="241:23">error_propagate</name><argument_list pos:start="241:24" pos:end="241:34">(<argument pos:start="241:25" pos:end="241:28"><expr pos:start="241:25" pos:end="241:28"><name pos:start="241:25" pos:end="241:28">errp</name></expr></argument>, <argument pos:start="241:31" pos:end="241:33"><expr pos:start="241:31" pos:end="241:33"><name pos:start="241:31" pos:end="241:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="243:9" pos:end="243:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:68"><expr pos:start="247:5" pos:end="247:67"><call pos:start="247:5" pos:end="247:67"><name pos:start="247:5" pos:end="247:19">sysbus_mmio_map</name><argument_list pos:start="247:20" pos:end="247:67">(<argument pos:start="247:21" pos:end="247:43"><expr pos:start="247:21" pos:end="247:43"><call pos:start="247:21" pos:end="247:43"><name pos:start="247:21" pos:end="247:34">SYS_BUS_DEVICE</name><argument_list pos:start="247:35" pos:end="247:43">(<argument pos:start="247:36" pos:end="247:42"><expr pos:start="247:36" pos:end="247:42"><operator pos:start="247:36" pos:end="247:36">&amp;</operator><name pos:start="247:37" pos:end="247:42"><name pos:start="247:37" pos:end="247:37">s</name><operator pos:start="247:38" pos:end="247:39">-&gt;</operator><name pos:start="247:40" pos:end="247:42">fec</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="247:46" pos:end="247:46"><expr pos:start="247:46" pos:end="247:46"><literal type="number" pos:start="247:46" pos:end="247:46">0</literal></expr></argument>, <argument pos:start="247:49" pos:end="247:66"><expr pos:start="247:49" pos:end="247:66"><name pos:start="247:49" pos:end="247:66">FSL_IMX25_FEC_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="251:78"><expr pos:start="249:5" pos:end="251:77"><call pos:start="249:5" pos:end="251:77"><name pos:start="249:5" pos:end="249:22">sysbus_connect_irq</name><argument_list pos:start="249:23" pos:end="251:77">(<argument pos:start="249:24" pos:end="249:46"><expr pos:start="249:24" pos:end="249:46"><call pos:start="249:24" pos:end="249:46"><name pos:start="249:24" pos:end="249:37">SYS_BUS_DEVICE</name><argument_list pos:start="249:38" pos:end="249:46">(<argument pos:start="249:39" pos:end="249:45"><expr pos:start="249:39" pos:end="249:45"><operator pos:start="249:39" pos:end="249:39">&amp;</operator><name pos:start="249:40" pos:end="249:45"><name pos:start="249:40" pos:end="249:40">s</name><operator pos:start="249:41" pos:end="249:42">-&gt;</operator><name pos:start="249:43" pos:end="249:45">fec</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="249:49" pos:end="249:49"><expr pos:start="249:49" pos:end="249:49"><literal type="number" pos:start="249:49" pos:end="249:49">0</literal></expr></argument>,

                       <argument pos:start="251:24" pos:end="251:76"><expr pos:start="251:24" pos:end="251:76"><call pos:start="251:24" pos:end="251:76"><name pos:start="251:24" pos:end="251:39">qdev_get_gpio_in</name><argument_list pos:start="251:40" pos:end="251:76">(<argument pos:start="251:41" pos:end="251:56"><expr pos:start="251:41" pos:end="251:56"><call pos:start="251:41" pos:end="251:56"><name pos:start="251:41" pos:end="251:46">DEVICE</name><argument_list pos:start="251:47" pos:end="251:56">(<argument pos:start="251:48" pos:end="251:55"><expr pos:start="251:48" pos:end="251:55"><operator pos:start="251:48" pos:end="251:48">&amp;</operator><name pos:start="251:49" pos:end="251:55"><name pos:start="251:49" pos:end="251:49">s</name><operator pos:start="251:50" pos:end="251:51">-&gt;</operator><name pos:start="251:52" pos:end="251:55">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="251:59" pos:end="251:75"><expr pos:start="251:59" pos:end="251:75"><name pos:start="251:59" pos:end="251:75">FSL_IMX25_FEC_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" pos:start="257:5" pos:end="257:28">/* Initialize all I2C */</comment>

    <for pos:start="259:5" pos:end="297:5">for <control pos:start="259:9" pos:end="259:44">(<init pos:start="259:10" pos:end="259:15"><expr pos:start="259:10" pos:end="259:14"><name pos:start="259:10" pos:end="259:10">i</name> <operator pos:start="259:12" pos:end="259:12">=</operator> <literal type="number" pos:start="259:14" pos:end="259:14">0</literal></expr>;</init> <condition pos:start="259:17" pos:end="259:39"><expr pos:start="259:17" pos:end="259:38"><name pos:start="259:17" pos:end="259:17">i</name> <operator pos:start="259:19" pos:end="259:19">&lt;</operator> <name pos:start="259:21" pos:end="259:38">FSL_IMX25_NUM_I2CS</name></expr>;</condition> <incr pos:start="259:41" pos:end="259:43"><expr pos:start="259:41" pos:end="259:43"><name pos:start="259:41" pos:end="259:41">i</name><operator pos:start="259:42" pos:end="259:43">++</operator></expr></incr>)</control> <block pos:start="259:46" pos:end="297:5">{<block_content pos:start="261:9" pos:end="295:63">

        <struct pos:start="261:9" pos:end="275:10"><specifier pos:start="261:9" pos:end="261:14">static</specifier> <specifier pos:start="261:16" pos:end="261:20">const</specifier> struct <block pos:start="261:29" pos:end="267:9">{

            <decl_stmt pos:start="263:13" pos:end="263:24"><decl pos:start="263:13" pos:end="263:23"><type pos:start="263:13" pos:end="263:18"><name pos:start="263:13" pos:end="263:18">hwaddr</name></type> <name pos:start="263:20" pos:end="263:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="265:13" pos:end="265:29"><decl pos:start="265:13" pos:end="265:28"><type pos:start="265:13" pos:end="265:24"><name pos:start="265:13" pos:end="265:20">unsigned</name> <name pos:start="265:22" pos:end="265:24">int</name></type> <name pos:start="265:26" pos:end="265:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="267:11" pos:end="275:9"><name pos:start="267:11" pos:end="267:39"><name pos:start="267:11" pos:end="267:19">i2c_table</name><index pos:start="267:20" pos:end="267:39">[<expr pos:start="267:21" pos:end="267:38"><name pos:start="267:21" pos:end="267:38">FSL_IMX25_NUM_I2CS</name></expr>]</index></name> <init pos:start="267:41" pos:end="275:9">= <expr pos:start="267:43" pos:end="275:9"><block pos:start="267:43" pos:end="275:9">{

            <expr pos:start="269:13" pos:end="269:55"><block pos:start="269:13" pos:end="269:55">{ <expr pos:start="269:15" pos:end="269:33"><name pos:start="269:15" pos:end="269:33">FSL_IMX25_I2C1_ADDR</name></expr>, <expr pos:start="269:36" pos:end="269:53"><name pos:start="269:36" pos:end="269:53">FSL_IMX25_I2C1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="271:13" pos:end="271:55"><block pos:start="271:13" pos:end="271:55">{ <expr pos:start="271:15" pos:end="271:33"><name pos:start="271:15" pos:end="271:33">FSL_IMX25_I2C2_ADDR</name></expr>, <expr pos:start="271:36" pos:end="271:53"><name pos:start="271:36" pos:end="271:53">FSL_IMX25_I2C2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="273:13" pos:end="273:55"><block pos:start="273:13" pos:end="273:55">{ <expr pos:start="273:15" pos:end="273:33"><name pos:start="273:15" pos:end="273:33">FSL_IMX25_I2C3_ADDR</name></expr>, <expr pos:start="273:36" pos:end="273:53"><name pos:start="273:36" pos:end="273:53">FSL_IMX25_I2C3_IRQ</name></expr> }</block></expr>

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="279:9" pos:end="279:77"><expr pos:start="279:9" pos:end="279:76"><call pos:start="279:9" pos:end="279:76"><name pos:start="279:9" pos:end="279:32">object_property_set_bool</name><argument_list pos:start="279:33" pos:end="279:76">(<argument pos:start="279:34" pos:end="279:51"><expr pos:start="279:34" pos:end="279:51"><call pos:start="279:34" pos:end="279:51"><name pos:start="279:34" pos:end="279:39">OBJECT</name><argument_list pos:start="279:40" pos:end="279:51">(<argument pos:start="279:41" pos:end="279:50"><expr pos:start="279:41" pos:end="279:50"><operator pos:start="279:41" pos:end="279:41">&amp;</operator><name pos:start="279:42" pos:end="279:50"><name pos:start="279:42" pos:end="279:42">s</name><operator pos:start="279:43" pos:end="279:44">-&gt;</operator><name pos:start="279:45" pos:end="279:47">i2c</name><index pos:start="279:48" pos:end="279:50">[<expr pos:start="279:49" pos:end="279:49"><name pos:start="279:49" pos:end="279:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="279:54" pos:end="279:57"><expr pos:start="279:54" pos:end="279:57"><name pos:start="279:54" pos:end="279:57">true</name></expr></argument>, <argument pos:start="279:60" pos:end="279:69"><expr pos:start="279:60" pos:end="279:69"><literal type="string" pos:start="279:60" pos:end="279:69">"realized"</literal></expr></argument>, <argument pos:start="279:72" pos:end="279:75"><expr pos:start="279:72" pos:end="279:75"><operator pos:start="279:72" pos:end="279:72">&amp;</operator><name pos:start="279:73" pos:end="279:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="281:9" pos:end="287:9"><if pos:start="281:9" pos:end="287:9">if <condition pos:start="281:12" pos:end="281:16">(<expr pos:start="281:13" pos:end="281:15"><name pos:start="281:13" pos:end="281:15">err</name></expr>)</condition> <block pos:start="281:18" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:19">

            <expr_stmt pos:start="283:13" pos:end="283:39"><expr pos:start="283:13" pos:end="283:38"><call pos:start="283:13" pos:end="283:38"><name pos:start="283:13" pos:end="283:27">error_propagate</name><argument_list pos:start="283:28" pos:end="283:38">(<argument pos:start="283:29" pos:end="283:32"><expr pos:start="283:29" pos:end="283:32"><name pos:start="283:29" pos:end="283:32">errp</name></expr></argument>, <argument pos:start="283:35" pos:end="283:37"><expr pos:start="283:35" pos:end="283:37"><name pos:start="283:35" pos:end="283:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="285:13" pos:end="285:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:74"><expr pos:start="289:9" pos:end="289:73"><call pos:start="289:9" pos:end="289:73"><name pos:start="289:9" pos:end="289:23">sysbus_mmio_map</name><argument_list pos:start="289:24" pos:end="289:73">(<argument pos:start="289:25" pos:end="289:50"><expr pos:start="289:25" pos:end="289:50"><call pos:start="289:25" pos:end="289:50"><name pos:start="289:25" pos:end="289:38">SYS_BUS_DEVICE</name><argument_list pos:start="289:39" pos:end="289:50">(<argument pos:start="289:40" pos:end="289:49"><expr pos:start="289:40" pos:end="289:49"><operator pos:start="289:40" pos:end="289:40">&amp;</operator><name pos:start="289:41" pos:end="289:49"><name pos:start="289:41" pos:end="289:41">s</name><operator pos:start="289:42" pos:end="289:43">-&gt;</operator><name pos:start="289:44" pos:end="289:46">i2c</name><index pos:start="289:47" pos:end="289:49">[<expr pos:start="289:48" pos:end="289:48"><name pos:start="289:48" pos:end="289:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="289:53" pos:end="289:53"><expr pos:start="289:53" pos:end="289:53"><literal type="number" pos:start="289:53" pos:end="289:53">0</literal></expr></argument>, <argument pos:start="289:56" pos:end="289:72"><expr pos:start="289:56" pos:end="289:72"><name pos:start="289:56" pos:end="289:67"><name pos:start="289:56" pos:end="289:64">i2c_table</name><index pos:start="289:65" pos:end="289:67">[<expr pos:start="289:66" pos:end="289:66"><name pos:start="289:66" pos:end="289:66">i</name></expr>]</index></name><operator pos:start="289:68" pos:end="289:68">.</operator><name pos:start="289:69" pos:end="289:72">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="295:63"><expr pos:start="291:9" pos:end="295:62"><call pos:start="291:9" pos:end="295:62"><name pos:start="291:9" pos:end="291:26">sysbus_connect_irq</name><argument_list pos:start="291:27" pos:end="295:62">(<argument pos:start="291:28" pos:end="291:53"><expr pos:start="291:28" pos:end="291:53"><call pos:start="291:28" pos:end="291:53"><name pos:start="291:28" pos:end="291:41">SYS_BUS_DEVICE</name><argument_list pos:start="291:42" pos:end="291:53">(<argument pos:start="291:43" pos:end="291:52"><expr pos:start="291:43" pos:end="291:52"><operator pos:start="291:43" pos:end="291:43">&amp;</operator><name pos:start="291:44" pos:end="291:52"><name pos:start="291:44" pos:end="291:44">s</name><operator pos:start="291:45" pos:end="291:46">-&gt;</operator><name pos:start="291:47" pos:end="291:49">i2c</name><index pos:start="291:50" pos:end="291:52">[<expr pos:start="291:51" pos:end="291:51"><name pos:start="291:51" pos:end="291:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="291:56" pos:end="291:56"><expr pos:start="291:56" pos:end="291:56"><literal type="number" pos:start="291:56" pos:end="291:56">0</literal></expr></argument>,

                           <argument pos:start="293:28" pos:end="295:61"><expr pos:start="293:28" pos:end="295:61"><call pos:start="293:28" pos:end="295:61"><name pos:start="293:28" pos:end="293:43">qdev_get_gpio_in</name><argument_list pos:start="293:44" pos:end="295:61">(<argument pos:start="293:45" pos:end="293:60"><expr pos:start="293:45" pos:end="293:60"><call pos:start="293:45" pos:end="293:60"><name pos:start="293:45" pos:end="293:50">DEVICE</name><argument_list pos:start="293:51" pos:end="293:60">(<argument pos:start="293:52" pos:end="293:59"><expr pos:start="293:52" pos:end="293:59"><operator pos:start="293:52" pos:end="293:52">&amp;</operator><name pos:start="293:53" pos:end="293:59"><name pos:start="293:53" pos:end="293:53">s</name><operator pos:start="293:54" pos:end="293:55">-&gt;</operator><name pos:start="293:56" pos:end="293:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="295:45" pos:end="295:60"><expr pos:start="295:45" pos:end="295:60"><name pos:start="295:45" pos:end="295:56"><name pos:start="295:45" pos:end="295:53">i2c_table</name><index pos:start="295:54" pos:end="295:56">[<expr pos:start="295:55" pos:end="295:55"><name pos:start="295:55" pos:end="295:55">i</name></expr>]</index></name><operator pos:start="295:57" pos:end="295:57">.</operator><name pos:start="295:58" pos:end="295:60">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="301:5" pos:end="301:30">/* Initialize all GPIOs */</comment>

    <for pos:start="303:5" pos:end="345:5">for <control pos:start="303:9" pos:end="303:45">(<init pos:start="303:10" pos:end="303:15"><expr pos:start="303:10" pos:end="303:14"><name pos:start="303:10" pos:end="303:10">i</name> <operator pos:start="303:12" pos:end="303:12">=</operator> <literal type="number" pos:start="303:14" pos:end="303:14">0</literal></expr>;</init> <condition pos:start="303:17" pos:end="303:40"><expr pos:start="303:17" pos:end="303:39"><name pos:start="303:17" pos:end="303:17">i</name> <operator pos:start="303:19" pos:end="303:19">&lt;</operator> <name pos:start="303:21" pos:end="303:39">FSL_IMX25_NUM_GPIOS</name></expr>;</condition> <incr pos:start="303:42" pos:end="303:44"><expr pos:start="303:42" pos:end="303:44"><name pos:start="303:42" pos:end="303:42">i</name><operator pos:start="303:43" pos:end="303:44">++</operator></expr></incr>)</control> <block pos:start="303:47" pos:end="345:5">{<block_content pos:start="305:9" pos:end="343:64">

        <struct pos:start="305:9" pos:end="321:10"><specifier pos:start="305:9" pos:end="305:14">static</specifier> <specifier pos:start="305:16" pos:end="305:20">const</specifier> struct <block pos:start="305:29" pos:end="311:9">{

            <decl_stmt pos:start="307:13" pos:end="307:24"><decl pos:start="307:13" pos:end="307:23"><type pos:start="307:13" pos:end="307:18"><name pos:start="307:13" pos:end="307:18">hwaddr</name></type> <name pos:start="307:20" pos:end="307:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="309:13" pos:end="309:29"><decl pos:start="309:13" pos:end="309:28"><type pos:start="309:13" pos:end="309:24"><name pos:start="309:13" pos:end="309:20">unsigned</name> <name pos:start="309:22" pos:end="309:24">int</name></type> <name pos:start="309:26" pos:end="309:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="311:11" pos:end="321:9"><name pos:start="311:11" pos:end="311:41"><name pos:start="311:11" pos:end="311:20">gpio_table</name><index pos:start="311:21" pos:end="311:41">[<expr pos:start="311:22" pos:end="311:40"><name pos:start="311:22" pos:end="311:40">FSL_IMX25_NUM_GPIOS</name></expr>]</index></name> <init pos:start="311:43" pos:end="321:9">= <expr pos:start="311:45" pos:end="321:9"><block pos:start="311:45" pos:end="321:9">{

            <expr pos:start="313:13" pos:end="313:57"><block pos:start="313:13" pos:end="313:57">{ <expr pos:start="313:15" pos:end="313:34"><name pos:start="313:15" pos:end="313:34">FSL_IMX25_GPIO1_ADDR</name></expr>, <expr pos:start="313:37" pos:end="313:55"><name pos:start="313:37" pos:end="313:55">FSL_IMX25_GPIO1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="315:13" pos:end="315:57"><block pos:start="315:13" pos:end="315:57">{ <expr pos:start="315:15" pos:end="315:34"><name pos:start="315:15" pos:end="315:34">FSL_IMX25_GPIO2_ADDR</name></expr>, <expr pos:start="315:37" pos:end="315:55"><name pos:start="315:37" pos:end="315:55">FSL_IMX25_GPIO2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="317:13" pos:end="317:57"><block pos:start="317:13" pos:end="317:57">{ <expr pos:start="317:15" pos:end="317:34"><name pos:start="317:15" pos:end="317:34">FSL_IMX25_GPIO3_ADDR</name></expr>, <expr pos:start="317:37" pos:end="317:55"><name pos:start="317:37" pos:end="317:55">FSL_IMX25_GPIO3_IRQ</name></expr> }</block></expr>,

            <expr pos:start="319:13" pos:end="319:57"><block pos:start="319:13" pos:end="319:57">{ <expr pos:start="319:15" pos:end="319:34"><name pos:start="319:15" pos:end="319:34">FSL_IMX25_GPIO4_ADDR</name></expr>, <expr pos:start="319:37" pos:end="319:55"><name pos:start="319:37" pos:end="319:55">FSL_IMX25_GPIO4_IRQ</name></expr> }</block></expr>

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="325:9" pos:end="325:78"><expr pos:start="325:9" pos:end="325:77"><call pos:start="325:9" pos:end="325:77"><name pos:start="325:9" pos:end="325:32">object_property_set_bool</name><argument_list pos:start="325:33" pos:end="325:77">(<argument pos:start="325:34" pos:end="325:52"><expr pos:start="325:34" pos:end="325:52"><call pos:start="325:34" pos:end="325:52"><name pos:start="325:34" pos:end="325:39">OBJECT</name><argument_list pos:start="325:40" pos:end="325:52">(<argument pos:start="325:41" pos:end="325:51"><expr pos:start="325:41" pos:end="325:51"><operator pos:start="325:41" pos:end="325:41">&amp;</operator><name pos:start="325:42" pos:end="325:51"><name pos:start="325:42" pos:end="325:42">s</name><operator pos:start="325:43" pos:end="325:44">-&gt;</operator><name pos:start="325:45" pos:end="325:48">gpio</name><index pos:start="325:49" pos:end="325:51">[<expr pos:start="325:50" pos:end="325:50"><name pos:start="325:50" pos:end="325:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="325:55" pos:end="325:58"><expr pos:start="325:55" pos:end="325:58"><name pos:start="325:55" pos:end="325:58">true</name></expr></argument>, <argument pos:start="325:61" pos:end="325:70"><expr pos:start="325:61" pos:end="325:70"><literal type="string" pos:start="325:61" pos:end="325:70">"realized"</literal></expr></argument>, <argument pos:start="325:73" pos:end="325:76"><expr pos:start="325:73" pos:end="325:76"><operator pos:start="325:73" pos:end="325:73">&amp;</operator><name pos:start="325:74" pos:end="325:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="327:9" pos:end="333:9"><if pos:start="327:9" pos:end="333:9">if <condition pos:start="327:12" pos:end="327:16">(<expr pos:start="327:13" pos:end="327:15"><name pos:start="327:13" pos:end="327:15">err</name></expr>)</condition> <block pos:start="327:18" pos:end="333:9">{<block_content pos:start="329:13" pos:end="331:19">

            <expr_stmt pos:start="329:13" pos:end="329:39"><expr pos:start="329:13" pos:end="329:38"><call pos:start="329:13" pos:end="329:38"><name pos:start="329:13" pos:end="329:27">error_propagate</name><argument_list pos:start="329:28" pos:end="329:38">(<argument pos:start="329:29" pos:end="329:32"><expr pos:start="329:29" pos:end="329:32"><name pos:start="329:29" pos:end="329:32">errp</name></expr></argument>, <argument pos:start="329:35" pos:end="329:37"><expr pos:start="329:35" pos:end="329:37"><name pos:start="329:35" pos:end="329:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="331:13" pos:end="331:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:76"><expr pos:start="335:9" pos:end="335:75"><call pos:start="335:9" pos:end="335:75"><name pos:start="335:9" pos:end="335:23">sysbus_mmio_map</name><argument_list pos:start="335:24" pos:end="335:75">(<argument pos:start="335:25" pos:end="335:51"><expr pos:start="335:25" pos:end="335:51"><call pos:start="335:25" pos:end="335:51"><name pos:start="335:25" pos:end="335:38">SYS_BUS_DEVICE</name><argument_list pos:start="335:39" pos:end="335:51">(<argument pos:start="335:40" pos:end="335:50"><expr pos:start="335:40" pos:end="335:50"><operator pos:start="335:40" pos:end="335:40">&amp;</operator><name pos:start="335:41" pos:end="335:50"><name pos:start="335:41" pos:end="335:41">s</name><operator pos:start="335:42" pos:end="335:43">-&gt;</operator><name pos:start="335:44" pos:end="335:47">gpio</name><index pos:start="335:48" pos:end="335:50">[<expr pos:start="335:49" pos:end="335:49"><name pos:start="335:49" pos:end="335:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="335:54" pos:end="335:54"><expr pos:start="335:54" pos:end="335:54"><literal type="number" pos:start="335:54" pos:end="335:54">0</literal></expr></argument>, <argument pos:start="335:57" pos:end="335:74"><expr pos:start="335:57" pos:end="335:74"><name pos:start="335:57" pos:end="335:69"><name pos:start="335:57" pos:end="335:66">gpio_table</name><index pos:start="335:67" pos:end="335:69">[<expr pos:start="335:68" pos:end="335:68"><name pos:start="335:68" pos:end="335:68">i</name></expr>]</index></name><operator pos:start="335:70" pos:end="335:70">.</operator><name pos:start="335:71" pos:end="335:74">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="337:9" pos:end="337:37">/* Connect GPIO IRQ to PIC */</comment>

        <expr_stmt pos:start="339:9" pos:end="343:64"><expr pos:start="339:9" pos:end="343:63"><call pos:start="339:9" pos:end="343:63"><name pos:start="339:9" pos:end="339:26">sysbus_connect_irq</name><argument_list pos:start="339:27" pos:end="343:63">(<argument pos:start="339:28" pos:end="339:54"><expr pos:start="339:28" pos:end="339:54"><call pos:start="339:28" pos:end="339:54"><name pos:start="339:28" pos:end="339:41">SYS_BUS_DEVICE</name><argument_list pos:start="339:42" pos:end="339:54">(<argument pos:start="339:43" pos:end="339:53"><expr pos:start="339:43" pos:end="339:53"><operator pos:start="339:43" pos:end="339:43">&amp;</operator><name pos:start="339:44" pos:end="339:53"><name pos:start="339:44" pos:end="339:44">s</name><operator pos:start="339:45" pos:end="339:46">-&gt;</operator><name pos:start="339:47" pos:end="339:50">gpio</name><index pos:start="339:51" pos:end="339:53">[<expr pos:start="339:52" pos:end="339:52"><name pos:start="339:52" pos:end="339:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="339:57" pos:end="339:57"><expr pos:start="339:57" pos:end="339:57"><literal type="number" pos:start="339:57" pos:end="339:57">0</literal></expr></argument>,

                           <argument pos:start="341:28" pos:end="343:62"><expr pos:start="341:28" pos:end="343:62"><call pos:start="341:28" pos:end="343:62"><name pos:start="341:28" pos:end="341:43">qdev_get_gpio_in</name><argument_list pos:start="341:44" pos:end="343:62">(<argument pos:start="341:45" pos:end="341:60"><expr pos:start="341:45" pos:end="341:60"><call pos:start="341:45" pos:end="341:60"><name pos:start="341:45" pos:end="341:50">DEVICE</name><argument_list pos:start="341:51" pos:end="341:60">(<argument pos:start="341:52" pos:end="341:59"><expr pos:start="341:52" pos:end="341:59"><operator pos:start="341:52" pos:end="341:52">&amp;</operator><name pos:start="341:53" pos:end="341:59"><name pos:start="341:53" pos:end="341:53">s</name><operator pos:start="341:54" pos:end="341:55">-&gt;</operator><name pos:start="341:56" pos:end="341:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="343:45" pos:end="343:61"><expr pos:start="343:45" pos:end="343:61"><name pos:start="343:45" pos:end="343:57"><name pos:start="343:45" pos:end="343:54">gpio_table</name><index pos:start="343:55" pos:end="343:57">[<expr pos:start="343:56" pos:end="343:56"><name pos:start="343:56" pos:end="343:56">i</name></expr>]</index></name><operator pos:start="343:58" pos:end="343:58">.</operator><name pos:start="343:59" pos:end="343:61">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="349:5" pos:end="349:34">/* initialize 2 x 16 KB ROM */</comment>

    <expr_stmt pos:start="351:5" pos:end="353:68"><expr pos:start="351:5" pos:end="353:67"><call pos:start="351:5" pos:end="353:67"><name pos:start="351:5" pos:end="351:36">memory_region_init_rom_nomigrate</name><argument_list pos:start="351:37" pos:end="353:67">(<argument pos:start="351:38" pos:end="351:47"><expr pos:start="351:38" pos:end="351:47"><operator pos:start="351:38" pos:end="351:38">&amp;</operator><name pos:start="351:39" pos:end="351:47"><name pos:start="351:39" pos:end="351:39">s</name><operator pos:start="351:40" pos:end="351:41">-&gt;</operator><name pos:start="351:42" pos:end="351:44">rom</name><index pos:start="351:45" pos:end="351:47">[<expr pos:start="351:46" pos:end="351:46"><literal type="number" pos:start="351:46" pos:end="351:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="351:50" pos:end="351:53"><expr pos:start="351:50" pos:end="351:53"><name pos:start="351:50" pos:end="351:53">NULL</name></expr></argument>,

                           <argument pos:start="353:28" pos:end="353:39"><expr pos:start="353:28" pos:end="353:39"><literal type="string" pos:start="353:28" pos:end="353:39">"imx25.rom0"</literal></expr></argument>, <argument pos:start="353:42" pos:end="353:60"><expr pos:start="353:42" pos:end="353:60"><name pos:start="353:42" pos:end="353:60">FSL_IMX25_ROM0_SIZE</name></expr></argument>, <argument pos:start="353:63" pos:end="353:66"><expr pos:start="353:63" pos:end="353:66"><operator pos:start="353:63" pos:end="353:63">&amp;</operator><name pos:start="353:64" pos:end="353:66">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="355:5" pos:end="361:5"><if pos:start="355:5" pos:end="361:5">if <condition pos:start="355:8" pos:end="355:12">(<expr pos:start="355:9" pos:end="355:11"><name pos:start="355:9" pos:end="355:11">err</name></expr>)</condition> <block pos:start="355:14" pos:end="361:5">{<block_content pos:start="357:9" pos:end="359:15">

        <expr_stmt pos:start="357:9" pos:end="357:35"><expr pos:start="357:9" pos:end="357:34"><call pos:start="357:9" pos:end="357:34"><name pos:start="357:9" pos:end="357:23">error_propagate</name><argument_list pos:start="357:24" pos:end="357:34">(<argument pos:start="357:25" pos:end="357:28"><expr pos:start="357:25" pos:end="357:28"><name pos:start="357:25" pos:end="357:28">errp</name></expr></argument>, <argument pos:start="357:31" pos:end="357:33"><expr pos:start="357:31" pos:end="357:33"><name pos:start="357:31" pos:end="357:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="359:9" pos:end="359:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="363:5" pos:end="365:44"><expr pos:start="363:5" pos:end="365:43"><call pos:start="363:5" pos:end="365:43"><name pos:start="363:5" pos:end="363:31">memory_region_add_subregion</name><argument_list pos:start="363:32" pos:end="365:43">(<argument pos:start="363:33" pos:end="363:51"><expr pos:start="363:33" pos:end="363:51"><call pos:start="363:33" pos:end="363:51"><name pos:start="363:33" pos:end="363:49">get_system_memory</name><argument_list pos:start="363:50" pos:end="363:51">()</argument_list></call></expr></argument>, <argument pos:start="363:54" pos:end="363:72"><expr pos:start="363:54" pos:end="363:72"><name pos:start="363:54" pos:end="363:72">FSL_IMX25_ROM0_ADDR</name></expr></argument>,

                                <argument pos:start="365:33" pos:end="365:42"><expr pos:start="365:33" pos:end="365:42"><operator pos:start="365:33" pos:end="365:33">&amp;</operator><name pos:start="365:34" pos:end="365:42"><name pos:start="365:34" pos:end="365:34">s</name><operator pos:start="365:35" pos:end="365:36">-&gt;</operator><name pos:start="365:37" pos:end="365:39">rom</name><index pos:start="365:40" pos:end="365:42">[<expr pos:start="365:41" pos:end="365:41"><literal type="number" pos:start="365:41" pos:end="365:41">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="369:68"><expr pos:start="367:5" pos:end="369:67"><call pos:start="367:5" pos:end="369:67"><name pos:start="367:5" pos:end="367:36">memory_region_init_rom_nomigrate</name><argument_list pos:start="367:37" pos:end="369:67">(<argument pos:start="367:38" pos:end="367:47"><expr pos:start="367:38" pos:end="367:47"><operator pos:start="367:38" pos:end="367:38">&amp;</operator><name pos:start="367:39" pos:end="367:47"><name pos:start="367:39" pos:end="367:39">s</name><operator pos:start="367:40" pos:end="367:41">-&gt;</operator><name pos:start="367:42" pos:end="367:44">rom</name><index pos:start="367:45" pos:end="367:47">[<expr pos:start="367:46" pos:end="367:46"><literal type="number" pos:start="367:46" pos:end="367:46">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="367:50" pos:end="367:53"><expr pos:start="367:50" pos:end="367:53"><name pos:start="367:50" pos:end="367:53">NULL</name></expr></argument>,

                           <argument pos:start="369:28" pos:end="369:39"><expr pos:start="369:28" pos:end="369:39"><literal type="string" pos:start="369:28" pos:end="369:39">"imx25.rom1"</literal></expr></argument>, <argument pos:start="369:42" pos:end="369:60"><expr pos:start="369:42" pos:end="369:60"><name pos:start="369:42" pos:end="369:60">FSL_IMX25_ROM1_SIZE</name></expr></argument>, <argument pos:start="369:63" pos:end="369:66"><expr pos:start="369:63" pos:end="369:66"><operator pos:start="369:63" pos:end="369:63">&amp;</operator><name pos:start="369:64" pos:end="369:66">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="371:5" pos:end="377:5"><if pos:start="371:5" pos:end="377:5">if <condition pos:start="371:8" pos:end="371:12">(<expr pos:start="371:9" pos:end="371:11"><name pos:start="371:9" pos:end="371:11">err</name></expr>)</condition> <block pos:start="371:14" pos:end="377:5">{<block_content pos:start="373:9" pos:end="375:15">

        <expr_stmt pos:start="373:9" pos:end="373:35"><expr pos:start="373:9" pos:end="373:34"><call pos:start="373:9" pos:end="373:34"><name pos:start="373:9" pos:end="373:23">error_propagate</name><argument_list pos:start="373:24" pos:end="373:34">(<argument pos:start="373:25" pos:end="373:28"><expr pos:start="373:25" pos:end="373:28"><name pos:start="373:25" pos:end="373:28">errp</name></expr></argument>, <argument pos:start="373:31" pos:end="373:33"><expr pos:start="373:31" pos:end="373:33"><name pos:start="373:31" pos:end="373:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="375:9" pos:end="375:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="379:5" pos:end="381:44"><expr pos:start="379:5" pos:end="381:43"><call pos:start="379:5" pos:end="381:43"><name pos:start="379:5" pos:end="379:31">memory_region_add_subregion</name><argument_list pos:start="379:32" pos:end="381:43">(<argument pos:start="379:33" pos:end="379:51"><expr pos:start="379:33" pos:end="379:51"><call pos:start="379:33" pos:end="379:51"><name pos:start="379:33" pos:end="379:49">get_system_memory</name><argument_list pos:start="379:50" pos:end="379:51">()</argument_list></call></expr></argument>, <argument pos:start="379:54" pos:end="379:72"><expr pos:start="379:54" pos:end="379:72"><name pos:start="379:54" pos:end="379:72">FSL_IMX25_ROM1_ADDR</name></expr></argument>,

                                <argument pos:start="381:33" pos:end="381:42"><expr pos:start="381:33" pos:end="381:42"><operator pos:start="381:33" pos:end="381:33">&amp;</operator><name pos:start="381:34" pos:end="381:42"><name pos:start="381:34" pos:end="381:34">s</name><operator pos:start="381:35" pos:end="381:36">-&gt;</operator><name pos:start="381:37" pos:end="381:39">rom</name><index pos:start="381:40" pos:end="381:42">[<expr pos:start="381:41" pos:end="381:41"><literal type="number" pos:start="381:41" pos:end="381:41">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="385:5" pos:end="385:42">/* initialize internal RAM (128 KB) */</comment>

    <expr_stmt pos:start="387:5" pos:end="389:33"><expr pos:start="387:5" pos:end="389:32"><call pos:start="387:5" pos:end="389:32"><name pos:start="387:5" pos:end="387:26">memory_region_init_ram</name><argument_list pos:start="387:27" pos:end="389:32">(<argument pos:start="387:28" pos:end="387:35"><expr pos:start="387:28" pos:end="387:35"><operator pos:start="387:28" pos:end="387:28">&amp;</operator><name pos:start="387:29" pos:end="387:35"><name pos:start="387:29" pos:end="387:29">s</name><operator pos:start="387:30" pos:end="387:31">-&gt;</operator><name pos:start="387:32" pos:end="387:35">iram</name></name></expr></argument>, <argument pos:start="387:38" pos:end="387:41"><expr pos:start="387:38" pos:end="387:41"><name pos:start="387:38" pos:end="387:41">NULL</name></expr></argument>, <argument pos:start="387:44" pos:end="387:55"><expr pos:start="387:44" pos:end="387:55"><literal type="string" pos:start="387:44" pos:end="387:55">"imx25.iram"</literal></expr></argument>, <argument pos:start="387:58" pos:end="387:76"><expr pos:start="387:58" pos:end="387:76"><name pos:start="387:58" pos:end="387:76">FSL_IMX25_IRAM_SIZE</name></expr></argument>,

                           <argument pos:start="389:28" pos:end="389:31"><expr pos:start="389:28" pos:end="389:31"><operator pos:start="389:28" pos:end="389:28">&amp;</operator><name pos:start="389:29" pos:end="389:31">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="391:5" pos:end="397:5"><if pos:start="391:5" pos:end="397:5">if <condition pos:start="391:8" pos:end="391:12">(<expr pos:start="391:9" pos:end="391:11"><name pos:start="391:9" pos:end="391:11">err</name></expr>)</condition> <block pos:start="391:14" pos:end="397:5">{<block_content pos:start="393:9" pos:end="395:15">

        <expr_stmt pos:start="393:9" pos:end="393:35"><expr pos:start="393:9" pos:end="393:34"><call pos:start="393:9" pos:end="393:34"><name pos:start="393:9" pos:end="393:23">error_propagate</name><argument_list pos:start="393:24" pos:end="393:34">(<argument pos:start="393:25" pos:end="393:28"><expr pos:start="393:25" pos:end="393:28"><name pos:start="393:25" pos:end="393:28">errp</name></expr></argument>, <argument pos:start="393:31" pos:end="393:33"><expr pos:start="393:31" pos:end="393:33"><name pos:start="393:31" pos:end="393:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="395:9" pos:end="395:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="399:5" pos:end="401:42"><expr pos:start="399:5" pos:end="401:41"><call pos:start="399:5" pos:end="401:41"><name pos:start="399:5" pos:end="399:31">memory_region_add_subregion</name><argument_list pos:start="399:32" pos:end="401:41">(<argument pos:start="399:33" pos:end="399:51"><expr pos:start="399:33" pos:end="399:51"><call pos:start="399:33" pos:end="399:51"><name pos:start="399:33" pos:end="399:49">get_system_memory</name><argument_list pos:start="399:50" pos:end="399:51">()</argument_list></call></expr></argument>, <argument pos:start="399:54" pos:end="399:72"><expr pos:start="399:54" pos:end="399:72"><name pos:start="399:54" pos:end="399:72">FSL_IMX25_IRAM_ADDR</name></expr></argument>,

                                <argument pos:start="401:33" pos:end="401:40"><expr pos:start="401:33" pos:end="401:40"><operator pos:start="401:33" pos:end="401:33">&amp;</operator><name pos:start="401:34" pos:end="401:40"><name pos:start="401:34" pos:end="401:34">s</name><operator pos:start="401:35" pos:end="401:36">-&gt;</operator><name pos:start="401:37" pos:end="401:40">iram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="405:5" pos:end="405:63">/* internal RAM (128 KB) is aliased over 128 MB - 128 KB */</comment>

    <expr_stmt pos:start="407:5" pos:end="409:69"><expr pos:start="407:5" pos:end="409:68"><call pos:start="407:5" pos:end="409:68"><name pos:start="407:5" pos:end="407:28">memory_region_init_alias</name><argument_list pos:start="407:29" pos:end="409:68">(<argument pos:start="407:30" pos:end="407:43"><expr pos:start="407:30" pos:end="407:43"><operator pos:start="407:30" pos:end="407:30">&amp;</operator><name pos:start="407:31" pos:end="407:43"><name pos:start="407:31" pos:end="407:31">s</name><operator pos:start="407:32" pos:end="407:33">-&gt;</operator><name pos:start="407:34" pos:end="407:43">iram_alias</name></name></expr></argument>, <argument pos:start="407:46" pos:end="407:49"><expr pos:start="407:46" pos:end="407:49"><name pos:start="407:46" pos:end="407:49">NULL</name></expr></argument>, <argument pos:start="407:52" pos:end="407:69"><expr pos:start="407:52" pos:end="407:69"><literal type="string" pos:start="407:52" pos:end="407:69">"imx25.iram_alias"</literal></expr></argument>,

                             <argument pos:start="409:30" pos:end="409:37"><expr pos:start="409:30" pos:end="409:37"><operator pos:start="409:30" pos:end="409:30">&amp;</operator><name pos:start="409:31" pos:end="409:37"><name pos:start="409:31" pos:end="409:31">s</name><operator pos:start="409:32" pos:end="409:33">-&gt;</operator><name pos:start="409:34" pos:end="409:37">iram</name></name></expr></argument>, <argument pos:start="409:40" pos:end="409:40"><expr pos:start="409:40" pos:end="409:40"><literal type="number" pos:start="409:40" pos:end="409:40">0</literal></expr></argument>, <argument pos:start="409:43" pos:end="409:67"><expr pos:start="409:43" pos:end="409:67"><name pos:start="409:43" pos:end="409:67">FSL_IMX25_IRAM_ALIAS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="411:5" pos:end="413:48"><expr pos:start="411:5" pos:end="413:47"><call pos:start="411:5" pos:end="413:47"><name pos:start="411:5" pos:end="411:31">memory_region_add_subregion</name><argument_list pos:start="411:32" pos:end="413:47">(<argument pos:start="411:33" pos:end="411:51"><expr pos:start="411:33" pos:end="411:51"><call pos:start="411:33" pos:end="411:51"><name pos:start="411:33" pos:end="411:49">get_system_memory</name><argument_list pos:start="411:50" pos:end="411:51">()</argument_list></call></expr></argument>, <argument pos:start="411:54" pos:end="411:78"><expr pos:start="411:54" pos:end="411:78"><name pos:start="411:54" pos:end="411:78">FSL_IMX25_IRAM_ALIAS_ADDR</name></expr></argument>,

                                <argument pos:start="413:33" pos:end="413:46"><expr pos:start="413:33" pos:end="413:46"><operator pos:start="413:33" pos:end="413:33">&amp;</operator><name pos:start="413:34" pos:end="413:46"><name pos:start="413:34" pos:end="413:34">s</name><operator pos:start="413:35" pos:end="413:36">-&gt;</operator><name pos:start="413:37" pos:end="413:46">iram_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
