<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2173.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">set_boot_dev</name><parameter_list pos:start="1:24" pos:end="1:62">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:33">ISADevice</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">s</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:61"><decl pos:start="1:39" pos:end="1:61"><type pos:start="1:39" pos:end="1:61"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:48">char</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:61">boot_device</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="7:5" pos:end="43:14">

<cpp:define pos:start="5:1" pos:end="5:29">#<cpp:directive pos:start="5:2" pos:end="5:7">define</cpp:directive> <cpp:macro pos:start="5:9" pos:end="5:27"><name pos:start="5:9" pos:end="5:27">PC_MAX_BOOT_DEVICES</name></cpp:macro> <cpp:value pos:start="5:29" pos:end="5:29">3</cpp:value></cpp:define>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">nbds</name></decl>, <decl pos:start="7:15" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:20"><name pos:start="7:15" pos:end="7:17">bds</name><index pos:start="7:18" pos:end="7:20">[<expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">3</literal></expr>]</index></name> <init pos:start="7:22" pos:end="7:29">= <expr pos:start="7:24" pos:end="7:29"><block pos:start="7:24" pos:end="7:29">{ <expr pos:start="7:26" pos:end="7:26"><literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:8">nbds</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <call pos:start="13:12" pos:end="13:30"><name pos:start="13:12" pos:end="13:17">strlen</name><argument_list pos:start="13:18" pos:end="13:30">(<argument pos:start="13:19" pos:end="13:29"><expr pos:start="13:19" pos:end="13:29"><name pos:start="13:19" pos:end="13:29">boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:35">(<expr pos:start="15:9" pos:end="15:34"><name pos:start="15:9" pos:end="15:12">nbds</name> <operator pos:start="15:14" pos:end="15:14">&gt;</operator> <name pos:start="15:16" pos:end="15:34">PC_MAX_BOOT_DEVICES</name></expr>)</condition> <block pos:start="15:37" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:53"><expr pos:start="17:9" pos:end="17:52"><call pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:20">error_report</name><argument_list pos:start="17:21" pos:end="17:52">(<argument pos:start="17:22" pos:end="17:51"><expr pos:start="17:22" pos:end="17:51"><literal type="string" pos:start="17:22" pos:end="17:51">"Too many boot devices for PC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return<expr pos:start="19:15" pos:end="19:17"><operator pos:start="19:15" pos:end="19:15">(</operator><literal type="number" pos:start="19:16" pos:end="19:16">1</literal><operator pos:start="19:17" pos:end="19:17">)</operator></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="23:5" pos:end="37:5">for <control pos:start="23:9" pos:end="23:30">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:25"><expr pos:start="23:17" pos:end="23:24"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <name pos:start="23:21" pos:end="23:24">nbds</name></expr>;</condition> <incr pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:27">i</name><operator pos:start="23:28" pos:end="23:29">++</operator></expr></incr>)</control> <block pos:start="23:32" pos:end="37:5">{<block_content pos:start="25:9" pos:end="35:9">

        <expr_stmt pos:start="25:9" pos:end="25:52"><expr pos:start="25:9" pos:end="25:51"><name pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:11">bds</name><index pos:start="25:12" pos:end="25:14">[<expr pos:start="25:13" pos:end="25:13"><name pos:start="25:13" pos:end="25:13">i</name></expr>]</index></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="25:51"><name pos:start="25:18" pos:end="25:35">boot_device2nibble</name><argument_list pos:start="25:36" pos:end="25:51">(<argument pos:start="25:37" pos:end="25:50"><expr pos:start="25:37" pos:end="25:50"><name pos:start="25:37" pos:end="25:50"><name pos:start="25:37" pos:end="25:47">boot_device</name><index pos:start="25:48" pos:end="25:50">[<expr pos:start="25:49" pos:end="25:49"><name pos:start="25:49" pos:end="25:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="35:9"><if pos:start="27:9" pos:end="35:9">if <condition pos:start="27:12" pos:end="27:24">(<expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:15">bds</name><index pos:start="27:16" pos:end="27:18">[<expr pos:start="27:17" pos:end="27:17"><name pos:start="27:17" pos:end="27:17">i</name></expr>]</index></name> <operator pos:start="27:20" pos:end="27:21">==</operator> <literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr>)</condition> <block pos:start="27:26" pos:end="35:9">{<block_content pos:start="29:13" pos:end="33:22">

            <expr_stmt pos:start="29:13" pos:end="31:41"><expr pos:start="29:13" pos:end="31:40"><call pos:start="29:13" pos:end="31:40"><name pos:start="29:13" pos:end="29:24">error_report</name><argument_list pos:start="29:25" pos:end="31:40">(<argument pos:start="29:26" pos:end="29:59"><expr pos:start="29:26" pos:end="29:59"><literal type="string" pos:start="29:26" pos:end="29:59">"Invalid boot device for PC: '%c'"</literal></expr></argument>,

                         <argument pos:start="31:26" pos:end="31:39"><expr pos:start="31:26" pos:end="31:39"><name pos:start="31:26" pos:end="31:39"><name pos:start="31:26" pos:end="31:36">boot_device</name><index pos:start="31:37" pos:end="31:39">[<expr pos:start="31:38" pos:end="31:38"><name pos:start="31:38" pos:end="31:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:22">return<expr pos:start="33:19" pos:end="33:21"><operator pos:start="33:19" pos:end="33:19">(</operator><literal type="number" pos:start="33:20" pos:end="33:20">1</literal><operator pos:start="33:21" pos:end="33:21">)</operator></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="39:5" pos:end="39:52"><expr pos:start="39:5" pos:end="39:51"><call pos:start="39:5" pos:end="39:51"><name pos:start="39:5" pos:end="39:18">rtc_set_memory</name><argument_list pos:start="39:19" pos:end="39:51">(<argument pos:start="39:20" pos:end="39:20"><expr pos:start="39:20" pos:end="39:20"><name pos:start="39:20" pos:end="39:20">s</name></expr></argument>, <argument pos:start="39:23" pos:end="39:26"><expr pos:start="39:23" pos:end="39:26"><literal type="number" pos:start="39:23" pos:end="39:26">0x3d</literal></expr></argument>, <argument pos:start="39:29" pos:end="39:50"><expr pos:start="39:29" pos:end="39:50"><operator pos:start="39:29" pos:end="39:29">(</operator><name pos:start="39:30" pos:end="39:35"><name pos:start="39:30" pos:end="39:32">bds</name><index pos:start="39:33" pos:end="39:35">[<expr pos:start="39:34" pos:end="39:34"><literal type="number" pos:start="39:34" pos:end="39:34">1</literal></expr>]</index></name> <operator pos:start="39:37" pos:end="39:38">&lt;&lt;</operator> <literal type="number" pos:start="39:40" pos:end="39:40">4</literal><operator pos:start="39:41" pos:end="39:41">)</operator> <operator pos:start="39:43" pos:end="39:43">|</operator> <name pos:start="39:45" pos:end="39:50"><name pos:start="39:45" pos:end="39:47">bds</name><index pos:start="39:48" pos:end="39:50">[<expr pos:start="39:49" pos:end="39:49"><literal type="number" pos:start="39:49" pos:end="39:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:70"><expr pos:start="41:5" pos:end="41:69"><call pos:start="41:5" pos:end="41:69"><name pos:start="41:5" pos:end="41:18">rtc_set_memory</name><argument_list pos:start="41:19" pos:end="41:69">(<argument pos:start="41:20" pos:end="41:20"><expr pos:start="41:20" pos:end="41:20"><name pos:start="41:20" pos:end="41:20">s</name></expr></argument>, <argument pos:start="41:23" pos:end="41:26"><expr pos:start="41:23" pos:end="41:26"><literal type="number" pos:start="41:23" pos:end="41:26">0x38</literal></expr></argument>, <argument pos:start="41:29" pos:end="41:68"><expr pos:start="41:29" pos:end="41:68"><operator pos:start="41:29" pos:end="41:29">(</operator><name pos:start="41:30" pos:end="41:35"><name pos:start="41:30" pos:end="41:32">bds</name><index pos:start="41:33" pos:end="41:35">[<expr pos:start="41:34" pos:end="41:34"><literal type="number" pos:start="41:34" pos:end="41:34">2</literal></expr>]</index></name> <operator pos:start="41:37" pos:end="41:38">&lt;&lt;</operator> <literal type="number" pos:start="41:40" pos:end="41:40">4</literal><operator pos:start="41:41" pos:end="41:41">)</operator> <operator pos:start="41:43" pos:end="41:43">|</operator> <operator pos:start="41:45" pos:end="41:45">(</operator><ternary pos:start="41:46" pos:end="41:67"><condition pos:start="41:46" pos:end="41:57"><expr pos:start="41:46" pos:end="41:55"><name pos:start="41:46" pos:end="41:55">fd_bootchk</name></expr> ?</condition><then pos:start="41:59" pos:end="41:61"> <expr pos:start="41:59" pos:end="41:61"><literal type="number" pos:start="41:59" pos:end="41:61">0x0</literal></expr> </then><else pos:start="41:63" pos:end="41:67">: <expr pos:start="41:65" pos:end="41:67"><literal type="number" pos:start="41:65" pos:end="41:67">0x1</literal></expr></else></ternary><operator pos:start="41:68" pos:end="41:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="43:5" pos:end="43:14">return<expr pos:start="43:11" pos:end="43:13"><operator pos:start="43:11" pos:end="43:11">(</operator><literal type="number" pos:start="43:12" pos:end="43:12">0</literal><operator pos:start="43:13" pos:end="43:13">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
