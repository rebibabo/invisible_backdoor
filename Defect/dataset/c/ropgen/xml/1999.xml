<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1999.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">qemu_thread_create</name><parameter_list pos:start="1:24" pos:end="5:43">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:34">QemuThread</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">thread</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:54">char</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">name</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:52"><function_decl pos:start="3:24" pos:end="3:52"><type pos:start="3:24" pos:end="3:29"><name pos:start="3:24" pos:end="3:27">void</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type>(<modifier pos:start="3:31" pos:end="3:31">*</modifier><name pos:start="3:32" pos:end="3:44">start_routine</name>)<parameter_list pos:start="3:46" pos:end="3:52">(<parameter pos:start="3:47" pos:end="3:51"><decl pos:start="3:47" pos:end="3:51"><type pos:start="3:47" pos:end="3:51"><name pos:start="3:47" pos:end="3:50">void</name><modifier pos:start="3:51" pos:end="3:51">*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:32"><decl pos:start="5:24" pos:end="5:32"><type pos:start="5:24" pos:end="5:32"><name pos:start="5:24" pos:end="5:27">void</name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:32">arg</name></decl></parameter>, <parameter pos:start="5:35" pos:end="5:42"><decl pos:start="5:35" pos:end="5:42"><type pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:37">int</name></type> <name pos:start="5:39" pos:end="5:42">mode</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="67:1">{<block_content pos:start="9:5" pos:end="65:32">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">sigset_t</name></type> <name pos:start="9:14" pos:end="9:16">set</name></decl>, <decl pos:start="9:19" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:19" pos:end="9:24">oldset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">pthread_attr_t</name></type> <name pos:start="13:20" pos:end="13:23">attr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:35"><expr pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:7">err</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:34"><name pos:start="17:11" pos:end="17:27">pthread_attr_init</name><argument_list pos:start="17:28" pos:end="17:34">(<argument pos:start="17:29" pos:end="17:33"><expr pos:start="17:29" pos:end="17:33"><operator pos:start="17:29" pos:end="17:29">&amp;</operator><name pos:start="17:30" pos:end="17:33">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:12">(<expr pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">err</name></expr>)</condition> <block pos:start="19:14" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:34">

        <expr_stmt pos:start="21:9" pos:end="21:34"><expr pos:start="21:9" pos:end="21:33"><call pos:start="21:9" pos:end="21:33"><name pos:start="21:9" pos:end="21:18">error_exit</name><argument_list pos:start="21:19" pos:end="21:33">(<argument pos:start="21:20" pos:end="21:22"><expr pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">err</name></expr></argument>, <argument pos:start="21:25" pos:end="21:32"><expr pos:start="21:25" pos:end="21:32"><name pos:start="21:25" pos:end="21:32">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:37">(<expr pos:start="25:9" pos:end="25:36"><name pos:start="25:9" pos:end="25:12">mode</name> <operator pos:start="25:14" pos:end="25:15">==</operator> <name pos:start="25:17" pos:end="25:36">QEMU_THREAD_DETACHED</name></expr>)</condition> <block pos:start="25:39" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:9">

        <expr_stmt pos:start="27:9" pos:end="27:74"><expr pos:start="27:9" pos:end="27:73"><name pos:start="27:9" pos:end="27:11">err</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:73"><name pos:start="27:15" pos:end="27:41">pthread_attr_setdetachstate</name><argument_list pos:start="27:42" pos:end="27:73">(<argument pos:start="27:43" pos:end="27:47"><expr pos:start="27:43" pos:end="27:47"><operator pos:start="27:43" pos:end="27:43">&amp;</operator><name pos:start="27:44" pos:end="27:47">attr</name></expr></argument>, <argument pos:start="27:50" pos:end="27:72"><expr pos:start="27:50" pos:end="27:72"><name pos:start="27:50" pos:end="27:72">PTHREAD_CREATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:16">(<expr pos:start="29:13" pos:end="29:15"><name pos:start="29:13" pos:end="29:15">err</name></expr>)</condition> <block pos:start="29:18" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:38">

            <expr_stmt pos:start="31:13" pos:end="31:38"><expr pos:start="31:13" pos:end="31:37"><call pos:start="31:13" pos:end="31:37"><name pos:start="31:13" pos:end="31:22">error_exit</name><argument_list pos:start="31:23" pos:end="31:37">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">err</name></expr></argument>, <argument pos:start="31:29" pos:end="31:36"><expr pos:start="31:29" pos:end="31:36"><name pos:start="31:29" pos:end="31:36">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:49">/* Leave signal handling to the iothread.  */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:21"><expr pos:start="41:5" pos:end="41:20"><call pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:14">sigfillset</name><argument_list pos:start="41:15" pos:end="41:20">(<argument pos:start="41:16" pos:end="41:19"><expr pos:start="41:16" pos:end="41:19"><operator pos:start="41:16" pos:end="41:16">&amp;</operator><name pos:start="41:17" pos:end="41:19">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:48"><expr pos:start="43:5" pos:end="43:47"><call pos:start="43:5" pos:end="43:47"><name pos:start="43:5" pos:end="43:19">pthread_sigmask</name><argument_list pos:start="43:20" pos:end="43:47">(<argument pos:start="43:21" pos:end="43:31"><expr pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:31">SIG_SETMASK</name></expr></argument>, <argument pos:start="43:34" pos:end="43:37"><expr pos:start="43:34" pos:end="43:37"><operator pos:start="43:34" pos:end="43:34">&amp;</operator><name pos:start="43:35" pos:end="43:37">set</name></expr></argument>, <argument pos:start="43:40" pos:end="43:46"><expr pos:start="43:40" pos:end="43:46"><operator pos:start="43:40" pos:end="43:40">&amp;</operator><name pos:start="43:41" pos:end="43:46">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:69"><expr pos:start="45:5" pos:end="45:68"><name pos:start="45:5" pos:end="45:7">err</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:68"><name pos:start="45:11" pos:end="45:24">pthread_create</name><argument_list pos:start="45:25" pos:end="45:68">(<argument pos:start="45:26" pos:end="45:40"><expr pos:start="45:26" pos:end="45:40"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:40"><name pos:start="45:27" pos:end="45:32">thread</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:40">thread</name></name></expr></argument>, <argument pos:start="45:43" pos:end="45:47"><expr pos:start="45:43" pos:end="45:47"><operator pos:start="45:43" pos:end="45:43">&amp;</operator><name pos:start="45:44" pos:end="45:47">attr</name></expr></argument>, <argument pos:start="45:50" pos:end="45:62"><expr pos:start="45:50" pos:end="45:62"><name pos:start="45:50" pos:end="45:62">start_routine</name></expr></argument>, <argument pos:start="45:65" pos:end="45:67"><expr pos:start="45:65" pos:end="45:67"><name pos:start="45:65" pos:end="45:67">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:34"><if pos:start="47:5" pos:end="49:34">if <condition pos:start="47:8" pos:end="47:12">(<expr pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">err</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:34"><block_content pos:start="49:9" pos:end="49:34">

        <expr_stmt pos:start="49:9" pos:end="49:34"><expr pos:start="49:9" pos:end="49:33"><call pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:18">error_exit</name><argument_list pos:start="49:19" pos:end="49:33">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">err</name></expr></argument>, <argument pos:start="49:25" pos:end="49:32"><expr pos:start="49:25" pos:end="49:32"><name pos:start="49:25" pos:end="49:32">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:21">(<expr pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:20">name_threads</name></expr>)</condition> <block pos:start="53:23" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:43">

        <expr_stmt pos:start="55:9" pos:end="55:43"><expr pos:start="55:9" pos:end="55:42"><call pos:start="55:9" pos:end="55:42"><name pos:start="55:9" pos:end="55:28">qemu_thread_set_name</name><argument_list pos:start="55:29" pos:end="55:42">(<argument pos:start="55:30" pos:end="55:35"><expr pos:start="55:30" pos:end="55:35"><name pos:start="55:30" pos:end="55:35">thread</name></expr></argument>, <argument pos:start="55:38" pos:end="55:41"><expr pos:start="55:38" pos:end="55:41"><name pos:start="55:38" pos:end="55:41">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:48"><expr pos:start="61:5" pos:end="61:47"><call pos:start="61:5" pos:end="61:47"><name pos:start="61:5" pos:end="61:19">pthread_sigmask</name><argument_list pos:start="61:20" pos:end="61:47">(<argument pos:start="61:21" pos:end="61:31"><expr pos:start="61:21" pos:end="61:31"><name pos:start="61:21" pos:end="61:31">SIG_SETMASK</name></expr></argument>, <argument pos:start="61:34" pos:end="61:40"><expr pos:start="61:34" pos:end="61:40"><operator pos:start="61:34" pos:end="61:34">&amp;</operator><name pos:start="61:35" pos:end="61:40">oldset</name></expr></argument>, <argument pos:start="61:43" pos:end="61:46"><expr pos:start="61:43" pos:end="61:46"><name pos:start="61:43" pos:end="61:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:32"><expr pos:start="65:5" pos:end="65:31"><call pos:start="65:5" pos:end="65:31"><name pos:start="65:5" pos:end="65:24">pthread_attr_destroy</name><argument_list pos:start="65:25" pos:end="65:31">(<argument pos:start="65:26" pos:end="65:30"><expr pos:start="65:26" pos:end="65:30"><operator pos:start="65:26" pos:end="65:26">&amp;</operator><name pos:start="65:27" pos:end="65:30">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
