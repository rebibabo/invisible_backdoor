<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5073.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:45"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">av_always_inline</name> <name pos:start="1:25" pos:end="1:34">av_flatten</name> <name pos:start="1:36" pos:end="1:39">void</name> <name pos:start="1:41" pos:end="1:45">FUNCC</name></type>(<name pos:start="1:47" pos:end="1:67">h264_loop_filter_luma</name>)<parameter_list pos:start="1:69" pos:end="1:161">(<parameter pos:start="1:70" pos:end="1:83"><decl pos:start="1:70" pos:end="1:83"><type pos:start="1:70" pos:end="1:83"><name pos:start="1:70" pos:end="1:76">uint8_t</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:83">p_pix</name></decl></parameter>, <parameter pos:start="1:86" pos:end="1:96"><decl pos:start="1:86" pos:end="1:96"><type pos:start="1:86" pos:end="1:96"><name pos:start="1:86" pos:end="1:88">int</name></type> <name pos:start="1:90" pos:end="1:96">xstride</name></decl></parameter>, <parameter pos:start="1:99" pos:end="1:109"><decl pos:start="1:99" pos:end="1:109"><type pos:start="1:99" pos:end="1:109"><name pos:start="1:99" pos:end="1:101">int</name></type> <name pos:start="1:103" pos:end="1:109">ystride</name></decl></parameter>, <parameter pos:start="1:112" pos:end="1:126"><decl pos:start="1:112" pos:end="1:126"><type pos:start="1:112" pos:end="1:126"><name pos:start="1:112" pos:end="1:114">int</name></type> <name pos:start="1:116" pos:end="1:126">inner_iters</name></decl></parameter>, <parameter pos:start="1:129" pos:end="1:137"><decl pos:start="1:129" pos:end="1:137"><type pos:start="1:129" pos:end="1:137"><name pos:start="1:129" pos:end="1:131">int</name></type> <name pos:start="1:133" pos:end="1:137">alpha</name></decl></parameter>, <parameter pos:start="1:140" pos:end="1:147"><decl pos:start="1:140" pos:end="1:147"><type pos:start="1:140" pos:end="1:147"><name pos:start="1:140" pos:end="1:142">int</name></type> <name pos:start="1:144" pos:end="1:147">beta</name></decl></parameter>, <parameter pos:start="1:150" pos:end="1:160"><decl pos:start="1:150" pos:end="1:160"><type pos:start="1:150" pos:end="1:160"><name pos:start="1:150" pos:end="1:155">int8_t</name> <modifier pos:start="1:157" pos:end="1:157">*</modifier></type><name pos:start="1:158" pos:end="1:160">tc0</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">pixel</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:14">pix</name> <init pos:start="5:16" pos:end="5:30">= <expr pos:start="5:18" pos:end="5:30"><operator pos:start="5:18" pos:end="5:18">(</operator><name pos:start="5:19" pos:end="5:23">pixel</name><operator pos:start="5:24" pos:end="5:24">*</operator><operator pos:start="5:25" pos:end="5:25">)</operator><name pos:start="5:26" pos:end="5:30">p_pix</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">d</name></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:32"><expr pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:11">xstride</name> <operator pos:start="9:13" pos:end="9:15">&gt;&gt;=</operator> <sizeof pos:start="9:17" pos:end="9:29">sizeof<argument_list pos:start="9:23" pos:end="9:29">(<argument pos:start="9:24" pos:end="9:28"><expr pos:start="9:24" pos:end="9:28"><name pos:start="9:24" pos:end="9:28">pixel</name></expr></argument>)</argument_list></sizeof><operator pos:start="9:30" pos:end="9:30">-</operator><literal type="number" pos:start="9:31" pos:end="9:31">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:32"><expr pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:11">ystride</name> <operator pos:start="11:13" pos:end="11:15">&gt;&gt;=</operator> <sizeof pos:start="11:17" pos:end="11:29">sizeof<argument_list pos:start="11:23" pos:end="11:29">(<argument pos:start="11:24" pos:end="11:28"><expr pos:start="11:24" pos:end="11:28"><name pos:start="11:24" pos:end="11:28">pixel</name></expr></argument>)</argument_list></sizeof><operator pos:start="11:30" pos:end="11:30">-</operator><literal type="number" pos:start="11:31" pos:end="11:31">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:28"><expr pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:9">alpha</name> <operator pos:start="13:11" pos:end="13:13">&lt;&lt;=</operator> <name pos:start="13:15" pos:end="13:23">BIT_DEPTH</name> <operator pos:start="13:25" pos:end="13:25">-</operator> <literal type="number" pos:start="13:27" pos:end="13:27">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:28"><expr pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:8">beta</name>  <operator pos:start="15:11" pos:end="15:13">&lt;&lt;=</operator> <name pos:start="15:15" pos:end="15:23">BIT_DEPTH</name> <operator pos:start="15:25" pos:end="15:25">-</operator> <literal type="number" pos:start="15:27" pos:end="15:27">8</literal></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="93:5">for<control pos:start="17:8" pos:end="17:28">( <init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:22"><expr pos:start="17:17" pos:end="17:21"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <literal type="number" pos:start="17:21" pos:end="17:21">4</literal></expr>;</condition> <incr pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:24">i</name><operator pos:start="17:25" pos:end="17:26">++</operator></expr></incr> )</control> <block pos:start="17:30" pos:end="93:5">{<block_content pos:start="19:9" pos:end="91:9">

        <decl_stmt pos:start="19:9" pos:end="19:54"><decl pos:start="19:9" pos:end="19:53"><type pos:start="19:9" pos:end="19:17"><specifier pos:start="19:9" pos:end="19:13">const</specifier> <name pos:start="19:15" pos:end="19:17">int</name></type> <name pos:start="19:19" pos:end="19:25">tc_orig</name> <init pos:start="19:27" pos:end="19:53">= <expr pos:start="19:29" pos:end="19:53"><name pos:start="19:29" pos:end="19:34"><name pos:start="19:29" pos:end="19:31">tc0</name><index pos:start="19:32" pos:end="19:34">[<expr pos:start="19:33" pos:end="19:33"><name pos:start="19:33" pos:end="19:33">i</name></expr>]</index></name> <operator pos:start="19:36" pos:end="19:37">&lt;&lt;</operator> <operator pos:start="19:39" pos:end="19:39">(</operator><name pos:start="19:40" pos:end="19:48">BIT_DEPTH</name> <operator pos:start="19:50" pos:end="19:50">-</operator> <literal type="number" pos:start="19:52" pos:end="19:52">8</literal><operator pos:start="19:53" pos:end="19:53">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if<condition pos:start="21:11" pos:end="21:25">( <expr pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:19">tc_orig</name> <operator pos:start="21:21" pos:end="21:21">&lt;</operator> <literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr> )</condition> <block pos:start="21:27" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:21">

            <expr_stmt pos:start="23:13" pos:end="23:39"><expr pos:start="23:13" pos:end="23:38"><name pos:start="23:13" pos:end="23:15">pix</name> <operator pos:start="23:17" pos:end="23:18">+=</operator> <name pos:start="23:20" pos:end="23:30">inner_iters</name><operator pos:start="23:31" pos:end="23:31">*</operator><name pos:start="23:32" pos:end="23:38">ystride</name></expr>;</expr_stmt>

            <continue pos:start="25:13" pos:end="25:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <for pos:start="29:9" pos:end="91:9">for<control pos:start="29:12" pos:end="29:42">( <init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">d</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:36"><expr pos:start="29:21" pos:end="29:35"><name pos:start="29:21" pos:end="29:21">d</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <name pos:start="29:25" pos:end="29:35">inner_iters</name></expr>;</condition> <incr pos:start="29:38" pos:end="29:40"><expr pos:start="29:38" pos:end="29:40"><name pos:start="29:38" pos:end="29:38">d</name><operator pos:start="29:39" pos:end="29:40">++</operator></expr></incr> )</control> <block pos:start="29:44" pos:end="91:9">{<block_content pos:start="31:13" pos:end="89:27">

            <decl_stmt pos:start="31:13" pos:end="31:43"><decl pos:start="31:13" pos:end="31:42"><type pos:start="31:13" pos:end="31:21"><specifier pos:start="31:13" pos:end="31:17">const</specifier> <name pos:start="31:19" pos:end="31:21">int</name></type> <name pos:start="31:23" pos:end="31:24">p0</name> <init pos:start="31:26" pos:end="31:42">= <expr pos:start="31:28" pos:end="31:42"><name pos:start="31:28" pos:end="31:42"><name pos:start="31:28" pos:end="31:30">pix</name><index pos:start="31:31" pos:end="31:42">[<expr pos:start="31:32" pos:end="31:41"><operator pos:start="31:32" pos:end="31:32">-</operator><literal type="number" pos:start="31:33" pos:end="31:33">1</literal><operator pos:start="31:34" pos:end="31:34">*</operator><name pos:start="31:35" pos:end="31:41">xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="33:13" pos:end="33:43"><decl pos:start="33:13" pos:end="33:42"><type pos:start="33:13" pos:end="33:21"><specifier pos:start="33:13" pos:end="33:17">const</specifier> <name pos:start="33:19" pos:end="33:21">int</name></type> <name pos:start="33:23" pos:end="33:24">p1</name> <init pos:start="33:26" pos:end="33:42">= <expr pos:start="33:28" pos:end="33:42"><name pos:start="33:28" pos:end="33:42"><name pos:start="33:28" pos:end="33:30">pix</name><index pos:start="33:31" pos:end="33:42">[<expr pos:start="33:32" pos:end="33:41"><operator pos:start="33:32" pos:end="33:32">-</operator><literal type="number" pos:start="33:33" pos:end="33:33">2</literal><operator pos:start="33:34" pos:end="33:34">*</operator><name pos:start="33:35" pos:end="33:41">xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="35:13" pos:end="35:43"><decl pos:start="35:13" pos:end="35:42"><type pos:start="35:13" pos:end="35:21"><specifier pos:start="35:13" pos:end="35:17">const</specifier> <name pos:start="35:19" pos:end="35:21">int</name></type> <name pos:start="35:23" pos:end="35:24">p2</name> <init pos:start="35:26" pos:end="35:42">= <expr pos:start="35:28" pos:end="35:42"><name pos:start="35:28" pos:end="35:42"><name pos:start="35:28" pos:end="35:30">pix</name><index pos:start="35:31" pos:end="35:42">[<expr pos:start="35:32" pos:end="35:41"><operator pos:start="35:32" pos:end="35:32">-</operator><literal type="number" pos:start="35:33" pos:end="35:33">3</literal><operator pos:start="35:34" pos:end="35:34">*</operator><name pos:start="35:35" pos:end="35:41">xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="37:13" pos:end="37:34"><decl pos:start="37:13" pos:end="37:33"><type pos:start="37:13" pos:end="37:21"><specifier pos:start="37:13" pos:end="37:17">const</specifier> <name pos:start="37:19" pos:end="37:21">int</name></type> <name pos:start="37:23" pos:end="37:24">q0</name> <init pos:start="37:26" pos:end="37:33">= <expr pos:start="37:28" pos:end="37:33"><name pos:start="37:28" pos:end="37:33"><name pos:start="37:28" pos:end="37:30">pix</name><index pos:start="37:31" pos:end="37:33">[<expr pos:start="37:32" pos:end="37:32"><literal type="number" pos:start="37:32" pos:end="37:32">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="39:13" pos:end="39:42"><decl pos:start="39:13" pos:end="39:41"><type pos:start="39:13" pos:end="39:21"><specifier pos:start="39:13" pos:end="39:17">const</specifier> <name pos:start="39:19" pos:end="39:21">int</name></type> <name pos:start="39:23" pos:end="39:24">q1</name> <init pos:start="39:26" pos:end="39:41">= <expr pos:start="39:28" pos:end="39:41"><name pos:start="39:28" pos:end="39:41"><name pos:start="39:28" pos:end="39:30">pix</name><index pos:start="39:31" pos:end="39:41">[<expr pos:start="39:32" pos:end="39:40"><literal type="number" pos:start="39:32" pos:end="39:32">1</literal><operator pos:start="39:33" pos:end="39:33">*</operator><name pos:start="39:34" pos:end="39:40">xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="41:13" pos:end="41:42"><decl pos:start="41:13" pos:end="41:41"><type pos:start="41:13" pos:end="41:21"><specifier pos:start="41:13" pos:end="41:17">const</specifier> <name pos:start="41:19" pos:end="41:21">int</name></type> <name pos:start="41:23" pos:end="41:24">q2</name> <init pos:start="41:26" pos:end="41:41">= <expr pos:start="41:28" pos:end="41:41"><name pos:start="41:28" pos:end="41:41"><name pos:start="41:28" pos:end="41:30">pix</name><index pos:start="41:31" pos:end="41:41">[<expr pos:start="41:32" pos:end="41:40"><literal type="number" pos:start="41:32" pos:end="41:32">2</literal><operator pos:start="41:33" pos:end="41:33">*</operator><name pos:start="41:34" pos:end="41:40">xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="45:13" pos:end="87:13"><if pos:start="45:13" pos:end="87:13">if<condition pos:start="45:15" pos:end="49:41">( <expr pos:start="45:17" pos:end="49:39"><call pos:start="45:17" pos:end="45:32"><name pos:start="45:17" pos:end="45:21">FFABS</name><argument_list pos:start="45:22" pos:end="45:32">( <argument pos:start="45:24" pos:end="45:30"><expr pos:start="45:24" pos:end="45:30"><name pos:start="45:24" pos:end="45:25">p0</name> <operator pos:start="45:27" pos:end="45:27">-</operator> <name pos:start="45:29" pos:end="45:30">q0</name></expr></argument> )</argument_list></call> <operator pos:start="45:34" pos:end="45:34">&lt;</operator> <name pos:start="45:36" pos:end="45:40">alpha</name> <operator pos:start="45:42" pos:end="45:43">&amp;&amp;</operator>

                <call pos:start="47:17" pos:end="47:32"><name pos:start="47:17" pos:end="47:21">FFABS</name><argument_list pos:start="47:22" pos:end="47:32">( <argument pos:start="47:24" pos:end="47:30"><expr pos:start="47:24" pos:end="47:30"><name pos:start="47:24" pos:end="47:25">p1</name> <operator pos:start="47:27" pos:end="47:27">-</operator> <name pos:start="47:29" pos:end="47:30">p0</name></expr></argument> )</argument_list></call> <operator pos:start="47:34" pos:end="47:34">&lt;</operator> <name pos:start="47:36" pos:end="47:39">beta</name> <operator pos:start="47:41" pos:end="47:42">&amp;&amp;</operator>

                <call pos:start="49:17" pos:end="49:32"><name pos:start="49:17" pos:end="49:21">FFABS</name><argument_list pos:start="49:22" pos:end="49:32">( <argument pos:start="49:24" pos:end="49:30"><expr pos:start="49:24" pos:end="49:30"><name pos:start="49:24" pos:end="49:25">q1</name> <operator pos:start="49:27" pos:end="49:27">-</operator> <name pos:start="49:29" pos:end="49:30">q0</name></expr></argument> )</argument_list></call> <operator pos:start="49:34" pos:end="49:34">&lt;</operator> <name pos:start="49:36" pos:end="49:39">beta</name></expr> )</condition> <block pos:start="49:43" pos:end="87:13">{<block_content pos:start="53:17" pos:end="85:62">



                <decl_stmt pos:start="53:17" pos:end="53:33"><decl pos:start="53:17" pos:end="53:32"><type pos:start="53:17" pos:end="53:19"><name pos:start="53:17" pos:end="53:19">int</name></type> <name pos:start="53:21" pos:end="53:22">tc</name> <init pos:start="53:24" pos:end="53:32">= <expr pos:start="53:26" pos:end="53:32"><name pos:start="53:26" pos:end="53:32">tc_orig</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="55:17" pos:end="55:28"><decl pos:start="55:17" pos:end="55:27"><type pos:start="55:17" pos:end="55:19"><name pos:start="55:17" pos:end="55:19">int</name></type> <name pos:start="55:21" pos:end="55:27">i_delta</name></decl>;</decl_stmt>



                <if_stmt pos:start="59:17" pos:end="67:17"><if pos:start="59:17" pos:end="67:17">if<condition pos:start="59:19" pos:end="59:45">( <expr pos:start="59:21" pos:end="59:43"><call pos:start="59:21" pos:end="59:36"><name pos:start="59:21" pos:end="59:25">FFABS</name><argument_list pos:start="59:26" pos:end="59:36">( <argument pos:start="59:28" pos:end="59:34"><expr pos:start="59:28" pos:end="59:34"><name pos:start="59:28" pos:end="59:29">p2</name> <operator pos:start="59:31" pos:end="59:31">-</operator> <name pos:start="59:33" pos:end="59:34">p0</name></expr></argument> )</argument_list></call> <operator pos:start="59:38" pos:end="59:38">&lt;</operator> <name pos:start="59:40" pos:end="59:43">beta</name></expr> )</condition> <block pos:start="59:47" pos:end="67:17">{<block_content pos:start="61:21" pos:end="65:25">

                    <if_stmt pos:start="61:21" pos:end="63:119"><if pos:start="61:21" pos:end="63:119">if<condition pos:start="61:23" pos:end="61:31">(<expr pos:start="61:24" pos:end="61:30"><name pos:start="61:24" pos:end="61:30">tc_orig</name></expr>)</condition><block type="pseudo" pos:start="63:21" pos:end="63:119"><block_content pos:start="63:21" pos:end="63:119">

                    <expr_stmt pos:start="63:21" pos:end="63:119"><expr pos:start="63:21" pos:end="63:118"><name pos:start="63:21" pos:end="63:35"><name pos:start="63:21" pos:end="63:23">pix</name><index pos:start="63:24" pos:end="63:35">[<expr pos:start="63:25" pos:end="63:34"><operator pos:start="63:25" pos:end="63:25">-</operator><literal type="number" pos:start="63:26" pos:end="63:26">2</literal><operator pos:start="63:27" pos:end="63:27">*</operator><name pos:start="63:28" pos:end="63:34">xstride</name></expr>]</index></name> <operator pos:start="63:37" pos:end="63:37">=</operator> <name pos:start="63:39" pos:end="63:40">p1</name> <operator pos:start="63:42" pos:end="63:42">+</operator> <call pos:start="63:44" pos:end="63:118"><name pos:start="63:44" pos:end="63:50">av_clip</name><argument_list pos:start="63:51" pos:end="63:118">( <argument pos:start="63:53" pos:end="63:97"><expr pos:start="63:53" pos:end="63:97"><operator pos:start="63:53" pos:end="63:53">(</operator><operator pos:start="63:54" pos:end="63:54">(</operator> <name pos:start="63:56" pos:end="63:57">p2</name> <operator pos:start="63:59" pos:end="63:59">+</operator> <operator pos:start="63:61" pos:end="63:61">(</operator> <operator pos:start="63:63" pos:end="63:63">(</operator> <name pos:start="63:65" pos:end="63:66">p0</name> <operator pos:start="63:68" pos:end="63:68">+</operator> <name pos:start="63:70" pos:end="63:71">q0</name> <operator pos:start="63:73" pos:end="63:73">+</operator> <literal type="number" pos:start="63:75" pos:end="63:75">1</literal> <operator pos:start="63:77" pos:end="63:77">)</operator> <operator pos:start="63:79" pos:end="63:80">&gt;&gt;</operator> <literal type="number" pos:start="63:82" pos:end="63:82">1</literal> <operator pos:start="63:84" pos:end="63:84">)</operator> <operator pos:start="63:86" pos:end="63:86">)</operator> <operator pos:start="63:88" pos:end="63:89">&gt;&gt;</operator> <literal type="number" pos:start="63:91" pos:end="63:91">1</literal><operator pos:start="63:92" pos:end="63:92">)</operator> <operator pos:start="63:94" pos:end="63:94">-</operator> <name pos:start="63:96" pos:end="63:97">p1</name></expr></argument>, <argument pos:start="63:100" pos:end="63:107"><expr pos:start="63:100" pos:end="63:107"><operator pos:start="63:100" pos:end="63:100">-</operator><name pos:start="63:101" pos:end="63:107">tc_orig</name></expr></argument>, <argument pos:start="63:110" pos:end="63:116"><expr pos:start="63:110" pos:end="63:116"><name pos:start="63:110" pos:end="63:116">tc_orig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="65:21" pos:end="65:25"><expr pos:start="65:21" pos:end="65:24"><name pos:start="65:21" pos:end="65:22">tc</name><operator pos:start="65:23" pos:end="65:24">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="69:17" pos:end="77:17"><if pos:start="69:17" pos:end="77:17">if<condition pos:start="69:19" pos:end="69:45">( <expr pos:start="69:21" pos:end="69:43"><call pos:start="69:21" pos:end="69:36"><name pos:start="69:21" pos:end="69:25">FFABS</name><argument_list pos:start="69:26" pos:end="69:36">( <argument pos:start="69:28" pos:end="69:34"><expr pos:start="69:28" pos:end="69:34"><name pos:start="69:28" pos:end="69:29">q2</name> <operator pos:start="69:31" pos:end="69:31">-</operator> <name pos:start="69:33" pos:end="69:34">q0</name></expr></argument> )</argument_list></call> <operator pos:start="69:38" pos:end="69:38">&lt;</operator> <name pos:start="69:40" pos:end="69:43">beta</name></expr> )</condition> <block pos:start="69:47" pos:end="77:17">{<block_content pos:start="71:21" pos:end="75:25">

                    <if_stmt pos:start="71:21" pos:end="73:119"><if pos:start="71:21" pos:end="73:119">if<condition pos:start="71:23" pos:end="71:31">(<expr pos:start="71:24" pos:end="71:30"><name pos:start="71:24" pos:end="71:30">tc_orig</name></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:119"><block_content pos:start="73:21" pos:end="73:119">

                    <expr_stmt pos:start="73:21" pos:end="73:119"><expr pos:start="73:21" pos:end="73:118"><name pos:start="73:21" pos:end="73:35"><name pos:start="73:21" pos:end="73:23">pix</name><index pos:start="73:24" pos:end="73:35">[   <expr pos:start="73:28" pos:end="73:34"><name pos:start="73:28" pos:end="73:34">xstride</name></expr>]</index></name> <operator pos:start="73:37" pos:end="73:37">=</operator> <name pos:start="73:39" pos:end="73:40">q1</name> <operator pos:start="73:42" pos:end="73:42">+</operator> <call pos:start="73:44" pos:end="73:118"><name pos:start="73:44" pos:end="73:50">av_clip</name><argument_list pos:start="73:51" pos:end="73:118">( <argument pos:start="73:53" pos:end="73:97"><expr pos:start="73:53" pos:end="73:97"><operator pos:start="73:53" pos:end="73:53">(</operator><operator pos:start="73:54" pos:end="73:54">(</operator> <name pos:start="73:56" pos:end="73:57">q2</name> <operator pos:start="73:59" pos:end="73:59">+</operator> <operator pos:start="73:61" pos:end="73:61">(</operator> <operator pos:start="73:63" pos:end="73:63">(</operator> <name pos:start="73:65" pos:end="73:66">p0</name> <operator pos:start="73:68" pos:end="73:68">+</operator> <name pos:start="73:70" pos:end="73:71">q0</name> <operator pos:start="73:73" pos:end="73:73">+</operator> <literal type="number" pos:start="73:75" pos:end="73:75">1</literal> <operator pos:start="73:77" pos:end="73:77">)</operator> <operator pos:start="73:79" pos:end="73:80">&gt;&gt;</operator> <literal type="number" pos:start="73:82" pos:end="73:82">1</literal> <operator pos:start="73:84" pos:end="73:84">)</operator> <operator pos:start="73:86" pos:end="73:86">)</operator> <operator pos:start="73:88" pos:end="73:89">&gt;&gt;</operator> <literal type="number" pos:start="73:91" pos:end="73:91">1</literal><operator pos:start="73:92" pos:end="73:92">)</operator> <operator pos:start="73:94" pos:end="73:94">-</operator> <name pos:start="73:96" pos:end="73:97">q1</name></expr></argument>, <argument pos:start="73:100" pos:end="73:107"><expr pos:start="73:100" pos:end="73:107"><operator pos:start="73:100" pos:end="73:100">-</operator><name pos:start="73:101" pos:end="73:107">tc_orig</name></expr></argument>, <argument pos:start="73:110" pos:end="73:116"><expr pos:start="73:110" pos:end="73:116"><name pos:start="73:110" pos:end="73:116">tc_orig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="75:21" pos:end="75:25"><expr pos:start="75:21" pos:end="75:24"><name pos:start="75:21" pos:end="75:22">tc</name><operator pos:start="75:23" pos:end="75:24">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="81:17" pos:end="81:87"><expr pos:start="81:17" pos:end="81:86"><name pos:start="81:17" pos:end="81:23">i_delta</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <call pos:start="81:27" pos:end="81:86"><name pos:start="81:27" pos:end="81:33">av_clip</name><argument_list pos:start="81:34" pos:end="81:86">( <argument pos:start="81:36" pos:end="81:75"><expr pos:start="81:36" pos:end="81:75"><operator pos:start="81:36" pos:end="81:36">(</operator><operator pos:start="81:37" pos:end="81:37">(</operator><operator pos:start="81:38" pos:end="81:38">(</operator><name pos:start="81:39" pos:end="81:40">q0</name> <operator pos:start="81:42" pos:end="81:42">-</operator> <name pos:start="81:44" pos:end="81:45">p0</name> <operator pos:start="81:47" pos:end="81:47">)</operator> <operator pos:start="81:49" pos:end="81:50">&lt;&lt;</operator> <literal type="number" pos:start="81:52" pos:end="81:52">2</literal><operator pos:start="81:53" pos:end="81:53">)</operator> <operator pos:start="81:55" pos:end="81:55">+</operator> <operator pos:start="81:57" pos:end="81:57">(</operator><name pos:start="81:58" pos:end="81:59">p1</name> <operator pos:start="81:61" pos:end="81:61">-</operator> <name pos:start="81:63" pos:end="81:64">q1</name><operator pos:start="81:65" pos:end="81:65">)</operator> <operator pos:start="81:67" pos:end="81:67">+</operator> <literal type="number" pos:start="81:69" pos:end="81:69">4</literal><operator pos:start="81:70" pos:end="81:70">)</operator> <operator pos:start="81:72" pos:end="81:73">&gt;&gt;</operator> <literal type="number" pos:start="81:75" pos:end="81:75">3</literal></expr></argument>, <argument pos:start="81:78" pos:end="81:80"><expr pos:start="81:78" pos:end="81:80"><operator pos:start="81:78" pos:end="81:78">-</operator><name pos:start="81:79" pos:end="81:80">tc</name></expr></argument>, <argument pos:start="81:83" pos:end="81:84"><expr pos:start="81:83" pos:end="81:84"><name pos:start="81:83" pos:end="81:84">tc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:62"><expr pos:start="83:17" pos:end="83:61"><name pos:start="83:17" pos:end="83:29"><name pos:start="83:17" pos:end="83:19">pix</name><index pos:start="83:20" pos:end="83:29">[<expr pos:start="83:21" pos:end="83:28"><operator pos:start="83:21" pos:end="83:21">-</operator><name pos:start="83:22" pos:end="83:28">xstride</name></expr>]</index></name> <operator pos:start="83:31" pos:end="83:31">=</operator> <call pos:start="83:33" pos:end="83:61"><name pos:start="83:33" pos:end="83:45">av_clip_pixel</name><argument_list pos:start="83:46" pos:end="83:61">( <argument pos:start="83:48" pos:end="83:59"><expr pos:start="83:48" pos:end="83:59"><name pos:start="83:48" pos:end="83:49">p0</name> <operator pos:start="83:51" pos:end="83:51">+</operator> <name pos:start="83:53" pos:end="83:59">i_delta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="83:67" pos:end="83:75">/* p0' */</comment>

                <expr_stmt pos:start="85:17" pos:end="85:62"><expr pos:start="85:17" pos:end="85:61"><name pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:19">pix</name><index pos:start="85:20" pos:end="85:22">[<expr pos:start="85:21" pos:end="85:21"><literal type="number" pos:start="85:21" pos:end="85:21">0</literal></expr>]</index></name>        <operator pos:start="85:31" pos:end="85:31">=</operator> <call pos:start="85:33" pos:end="85:61"><name pos:start="85:33" pos:end="85:45">av_clip_pixel</name><argument_list pos:start="85:46" pos:end="85:61">( <argument pos:start="85:48" pos:end="85:59"><expr pos:start="85:48" pos:end="85:59"><name pos:start="85:48" pos:end="85:49">q0</name> <operator pos:start="85:51" pos:end="85:51">-</operator> <name pos:start="85:53" pos:end="85:59">i_delta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="85:67" pos:end="85:75">/* q0' */</comment>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:27"><expr pos:start="89:13" pos:end="89:26"><name pos:start="89:13" pos:end="89:15">pix</name> <operator pos:start="89:17" pos:end="89:18">+=</operator> <name pos:start="89:20" pos:end="89:26">ystride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
