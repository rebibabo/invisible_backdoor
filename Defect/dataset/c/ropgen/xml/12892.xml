<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12892.c" pos:tabs="8"><function pos:start="1:1" pos:end="453:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">mips_malta_init</name><parameter_list pos:start="1:21" pos:end="1:47">(<parameter pos:start="1:22" pos:end="1:46"><decl pos:start="1:22" pos:end="1:46"><type pos:start="1:22" pos:end="1:42"><name pos:start="1:22" pos:end="1:40">QEMUMachineInitArgs</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="453:1">{<block_content pos:start="5:5" pos:end="451:26">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:53">= <expr pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:37">args</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:55">= <expr pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:38">args</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">pflash_t</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">fl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:54"><decl pos:start="19:5" pos:end="19:53"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:31">system_memory</name> <init pos:start="19:33" pos:end="19:53">= <expr pos:start="19:35" pos:end="19:53"><call pos:start="19:35" pos:end="19:53"><name pos:start="19:35" pos:end="19:51">get_system_memory</name><argument_list pos:start="19:52" pos:end="19:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:46"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">ram</name> <init pos:start="21:23" pos:end="21:46">= <expr pos:start="21:25" pos:end="21:46"><call pos:start="21:25" pos:end="21:46"><name pos:start="21:25" pos:end="21:29">g_new</name><argument_list pos:start="21:30" pos:end="21:46">(<argument pos:start="21:31" pos:end="21:42"><expr pos:start="21:31" pos:end="21:42"><name pos:start="21:31" pos:end="21:42">MemoryRegion</name></expr></argument>, <argument pos:start="21:45" pos:end="21:45"><expr pos:start="21:45" pos:end="21:45"><literal type="number" pos:start="21:45" pos:end="21:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:60"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:22">bios</name></decl>, <decl pos:start="23:25" pos:end="23:59"><type ref="prev" pos:start="23:5" pos:end="23:18"><modifier pos:start="23:25" pos:end="23:25">*</modifier></type><name pos:start="23:26" pos:end="23:34">bios_copy</name> <init pos:start="23:36" pos:end="23:59">= <expr pos:start="23:38" pos:end="23:59"><call pos:start="23:38" pos:end="23:59"><name pos:start="23:38" pos:end="23:42">g_new</name><argument_list pos:start="23:43" pos:end="23:59">(<argument pos:start="23:44" pos:end="23:55"><expr pos:start="23:44" pos:end="23:55"><name pos:start="23:44" pos:end="23:55">MemoryRegion</name></expr></argument>, <argument pos:start="23:58" pos:end="23:58"><expr pos:start="23:58" pos:end="23:58"><literal type="number" pos:start="23:58" pos:end="23:58">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:39"><decl pos:start="25:5" pos:end="25:38"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:15">target_long</name></type> <name pos:start="25:17" pos:end="25:25">bios_size</name> <init pos:start="25:27" pos:end="25:38">= <expr pos:start="25:29" pos:end="25:38"><name pos:start="25:29" pos:end="25:38">FLASH_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">int64_t</name></type> <name pos:start="27:13" pos:end="27:24">kernel_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:10">PCIBus</name> <modifier pos:start="29:12" pos:end="29:12">*</modifier></type><name pos:start="29:13" pos:end="29:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:10">ISABus</name> <modifier pos:start="31:12" pos:end="31:12">*</modifier></type><name pos:start="31:13" pos:end="31:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:17"><decl pos:start="33:5" pos:end="33:16"><type pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:11">MIPSCPU</name> <modifier pos:start="33:13" pos:end="33:13">*</modifier></type><name pos:start="33:14" pos:end="33:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:22"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:16">CPUMIPSState</name> <modifier pos:start="35:18" pos:end="35:18">*</modifier></type><name pos:start="35:19" pos:end="35:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:22"><decl pos:start="37:5" pos:end="37:21"><type pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:12">qemu_irq</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:21">isa_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:27"><decl pos:start="39:5" pos:end="39:26"><type pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:12">qemu_irq</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:20"><decl pos:start="41:5" pos:end="41:19"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:19">piix4_devfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:19"><decl pos:start="43:5" pos:end="43:18"><type pos:start="43:5" pos:end="43:13"><name pos:start="43:5" pos:end="43:11">i2c_bus</name> <modifier pos:start="43:13" pos:end="43:13">*</modifier></type><name pos:start="43:14" pos:end="43:18">smbus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:10"><decl pos:start="45:5" pos:end="45:9"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:21"><decl pos:start="47:5" pos:end="47:20"><type pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:13">DriveInfo</name> <modifier pos:start="47:15" pos:end="47:15">*</modifier></type><name pos:start="47:16" pos:end="47:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:46"><decl pos:start="49:5" pos:end="49:45"><type pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:13">DriveInfo</name> <modifier pos:start="49:15" pos:end="49:15">*</modifier></type><name pos:start="49:16" pos:end="49:45"><name pos:start="49:16" pos:end="49:17">hd</name><index pos:start="49:18" pos:end="49:45">[<expr pos:start="49:19" pos:end="49:44"><name pos:start="49:19" pos:end="49:29">MAX_IDE_BUS</name> <operator pos:start="49:31" pos:end="49:31">*</operator> <name pos:start="49:33" pos:end="49:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:26"><decl pos:start="51:5" pos:end="51:25"><type pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:13">DriveInfo</name> <modifier pos:start="51:15" pos:end="51:15">*</modifier></type><name pos:start="51:16" pos:end="51:25"><name pos:start="51:16" pos:end="51:17">fd</name><index pos:start="51:18" pos:end="51:25">[<expr pos:start="51:19" pos:end="51:24"><name pos:start="51:19" pos:end="51:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:19"><decl pos:start="53:5" pos:end="53:18"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:14">fl_idx</name> <init pos:start="53:16" pos:end="53:18">= <expr pos:start="53:18" pos:end="53:18"><literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:37"><decl pos:start="55:5" pos:end="55:36"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:18">fl_sectors</name> <init pos:start="55:20" pos:end="55:36">= <expr pos:start="55:22" pos:end="55:36"><name pos:start="55:22" pos:end="55:30">bios_size</name> <operator pos:start="55:32" pos:end="55:33">&gt;&gt;</operator> <literal type="number" pos:start="55:35" pos:end="55:36">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:11"><decl pos:start="57:5" pos:end="57:10"><type pos:start="57:5" pos:end="57:7"><name pos:start="57:5" pos:end="57:7">int</name></type> <name pos:start="57:9" pos:end="57:10">be</name></decl>;</decl_stmt>



    <decl_stmt pos:start="61:5" pos:end="61:58"><decl pos:start="61:5" pos:end="61:57"><type pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:15">DeviceState</name> <modifier pos:start="61:17" pos:end="61:17">*</modifier></type><name pos:start="61:18" pos:end="61:20">dev</name> <init pos:start="61:22" pos:end="61:57">= <expr pos:start="61:24" pos:end="61:57"><call pos:start="61:24" pos:end="61:57"><name pos:start="61:24" pos:end="61:34">qdev_create</name><argument_list pos:start="61:35" pos:end="61:57">(<argument pos:start="61:36" pos:end="61:39"><expr pos:start="61:36" pos:end="61:39"><name pos:start="61:36" pos:end="61:39">NULL</name></expr></argument>, <argument pos:start="61:42" pos:end="61:56"><expr pos:start="61:42" pos:end="61:56"><name pos:start="61:42" pos:end="61:56">TYPE_MIPS_MALTA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:36"><decl pos:start="63:5" pos:end="63:35"><type pos:start="63:5" pos:end="63:16"><name pos:start="63:5" pos:end="63:14">MaltaState</name> <modifier pos:start="63:16" pos:end="63:16">*</modifier></type><name pos:start="63:17" pos:end="63:17">s</name> <init pos:start="63:19" pos:end="63:35">= <expr pos:start="63:21" pos:end="63:35"><call pos:start="63:21" pos:end="63:35"><name pos:start="63:21" pos:end="63:30">MIPS_MALTA</name><argument_list pos:start="63:31" pos:end="63:35">(<argument pos:start="63:32" pos:end="63:34"><expr pos:start="63:32" pos:end="63:34"><name pos:start="63:32" pos:end="63:34">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:26"><expr pos:start="67:5" pos:end="67:25"><call pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:20">qdev_init_nofail</name><argument_list pos:start="67:21" pos:end="67:25">(<argument pos:start="67:22" pos:end="67:24"><expr pos:start="67:22" pos:end="67:24"><name pos:start="67:22" pos:end="67:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:74">/* Make sure the first 3 serial ports are associated with a device. */</comment>

    <for pos:start="73:5" pos:end="85:5">for<control pos:start="73:8" pos:end="73:26">(<init pos:start="73:9" pos:end="73:14"><expr pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:9">i</name> <operator pos:start="73:11" pos:end="73:11">=</operator> <literal type="number" pos:start="73:13" pos:end="73:13">0</literal></expr>;</init> <condition pos:start="73:16" pos:end="73:21"><expr pos:start="73:16" pos:end="73:20"><name pos:start="73:16" pos:end="73:16">i</name> <operator pos:start="73:18" pos:end="73:18">&lt;</operator> <literal type="number" pos:start="73:20" pos:end="73:20">3</literal></expr>;</condition> <incr pos:start="73:23" pos:end="73:25"><expr pos:start="73:23" pos:end="73:25"><name pos:start="73:23" pos:end="73:23">i</name><operator pos:start="73:24" pos:end="73:25">++</operator></expr></incr>)</control> <block pos:start="73:28" pos:end="85:5">{<block_content pos:start="75:9" pos:end="83:9">

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:27">(<expr pos:start="75:13" pos:end="75:26"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:26"><name pos:start="75:14" pos:end="75:23">serial_hds</name><index pos:start="75:24" pos:end="75:26">[<expr pos:start="75:25" pos:end="75:25"><name pos:start="75:25" pos:end="75:25">i</name></expr>]</index></name></expr>)</condition> <block pos:start="75:29" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:62">

            <decl_stmt pos:start="77:13" pos:end="77:27"><decl pos:start="77:13" pos:end="77:26"><type pos:start="77:13" pos:end="77:16"><name pos:start="77:13" pos:end="77:16">char</name></type> <name pos:start="77:18" pos:end="77:26"><name pos:start="77:18" pos:end="77:22">label</name><index pos:start="77:23" pos:end="77:26">[<expr pos:start="77:24" pos:end="77:25"><literal type="number" pos:start="77:24" pos:end="77:25">32</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:58"><expr pos:start="79:13" pos:end="79:57"><call pos:start="79:13" pos:end="79:57"><name pos:start="79:13" pos:end="79:20">snprintf</name><argument_list pos:start="79:21" pos:end="79:57">(<argument pos:start="79:22" pos:end="79:26"><expr pos:start="79:22" pos:end="79:26"><name pos:start="79:22" pos:end="79:26">label</name></expr></argument>, <argument pos:start="79:29" pos:end="79:41"><expr pos:start="79:29" pos:end="79:41"><sizeof pos:start="79:29" pos:end="79:41">sizeof<argument_list pos:start="79:35" pos:end="79:41">(<argument pos:start="79:36" pos:end="79:40"><expr pos:start="79:36" pos:end="79:40"><name pos:start="79:36" pos:end="79:40">label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="79:44" pos:end="79:53"><expr pos:start="79:44" pos:end="79:53"><literal type="string" pos:start="79:44" pos:end="79:53">"serial%d"</literal></expr></argument>, <argument pos:start="79:56" pos:end="79:56"><expr pos:start="79:56" pos:end="79:56"><name pos:start="79:56" pos:end="79:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:62"><expr pos:start="81:13" pos:end="81:61"><name pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:22">serial_hds</name><index pos:start="81:23" pos:end="81:25">[<expr pos:start="81:24" pos:end="81:24"><name pos:start="81:24" pos:end="81:24">i</name></expr>]</index></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <call pos:start="81:29" pos:end="81:61"><name pos:start="81:29" pos:end="81:40">qemu_chr_new</name><argument_list pos:start="81:41" pos:end="81:61">(<argument pos:start="81:42" pos:end="81:46"><expr pos:start="81:42" pos:end="81:46"><name pos:start="81:42" pos:end="81:46">label</name></expr></argument>, <argument pos:start="81:49" pos:end="81:54"><expr pos:start="81:49" pos:end="81:54"><literal type="string" pos:start="81:49" pos:end="81:54">"null"</literal></expr></argument>, <argument pos:start="81:57" pos:end="81:60"><expr pos:start="81:57" pos:end="81:60"><name pos:start="81:57" pos:end="81:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="89:5" pos:end="89:19">/* init CPUs */</comment>

    <if_stmt pos:start="91:5" pos:end="103:5"><if pos:start="91:5" pos:end="103:5">if <condition pos:start="91:8" pos:end="91:26">(<expr pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:17">cpu_model</name> <operator pos:start="91:19" pos:end="91:20">==</operator> <name pos:start="91:22" pos:end="91:25">NULL</name></expr>)</condition> <block pos:start="91:28" pos:end="103:5">{<block_content pos:start="95:9" pos:end="102:0">

<cpp:ifdef pos:start="93:1" pos:end="93:20">#<cpp:directive pos:start="93:2" pos:end="93:6">ifdef</cpp:directive> <name pos:start="93:8" pos:end="93:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="95:9" pos:end="98:0"><expr pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:17">cpu_model</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <literal type="string" pos:start="95:21" pos:end="95:26">"20Kc"</literal></expr>;</expr_stmt>

<cpp:else pos:start="97:1" pos:end="97:5">#<cpp:directive pos:start="97:2" pos:end="97:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="99:9" pos:end="102:0"><expr pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:17">cpu_model</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <literal type="string" pos:start="99:21" pos:end="99:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <for pos:start="107:5" pos:end="131:5">for <control pos:start="107:9" pos:end="107:34">(<init pos:start="107:10" pos:end="107:15"><expr pos:start="107:10" pos:end="107:14"><name pos:start="107:10" pos:end="107:10">i</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <literal type="number" pos:start="107:14" pos:end="107:14">0</literal></expr>;</init> <condition pos:start="107:17" pos:end="107:29"><expr pos:start="107:17" pos:end="107:28"><name pos:start="107:17" pos:end="107:17">i</name> <operator pos:start="107:19" pos:end="107:19">&lt;</operator> <name pos:start="107:21" pos:end="107:28">smp_cpus</name></expr>;</condition> <incr pos:start="107:31" pos:end="107:33"><expr pos:start="107:31" pos:end="107:33"><name pos:start="107:31" pos:end="107:31">i</name><operator pos:start="107:32" pos:end="107:33">++</operator></expr></incr>)</control> <block pos:start="107:36" pos:end="131:5">{<block_content pos:start="109:9" pos:end="129:49">

        <expr_stmt pos:start="109:9" pos:end="109:39"><expr pos:start="109:9" pos:end="109:38"><name pos:start="109:9" pos:end="109:11">cpu</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="109:38"><name pos:start="109:15" pos:end="109:27">cpu_mips_init</name><argument_list pos:start="109:28" pos:end="109:38">(<argument pos:start="109:29" pos:end="109:37"><expr pos:start="109:29" pos:end="109:37"><name pos:start="109:29" pos:end="109:37">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:24">(<expr pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:15">cpu</name> <operator pos:start="111:17" pos:end="111:18">==</operator> <name pos:start="111:20" pos:end="111:23">NULL</name></expr>)</condition> <block pos:start="111:26" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:20">

            <expr_stmt pos:start="113:13" pos:end="113:63"><expr pos:start="113:13" pos:end="113:62"><call pos:start="113:13" pos:end="113:62"><name pos:start="113:13" pos:end="113:19">fprintf</name><argument_list pos:start="113:20" pos:end="113:62">(<argument pos:start="113:21" pos:end="113:26"><expr pos:start="113:21" pos:end="113:26"><name pos:start="113:21" pos:end="113:26">stderr</name></expr></argument>, <argument pos:start="113:29" pos:end="113:61"><expr pos:start="113:29" pos:end="113:61"><literal type="string" pos:start="113:29" pos:end="113:61">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:20"><expr pos:start="115:13" pos:end="115:19"><call pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:16">exit</name><argument_list pos:start="115:17" pos:end="115:19">(<argument pos:start="115:18" pos:end="115:18"><expr pos:start="115:18" pos:end="115:18"><literal type="number" pos:start="115:18" pos:end="115:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:24"><expr pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:11">env</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <operator pos:start="119:15" pos:end="119:15">&amp;</operator><name pos:start="119:16" pos:end="119:23"><name pos:start="119:16" pos:end="119:18">cpu</name><operator pos:start="119:19" pos:end="119:20">-&gt;</operator><name pos:start="119:21" pos:end="119:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="123:9" pos:end="123:35">/* Init internal devices */</comment>

        <expr_stmt pos:start="125:9" pos:end="125:35"><expr pos:start="125:9" pos:end="125:34"><call pos:start="125:9" pos:end="125:34"><name pos:start="125:9" pos:end="125:29">cpu_mips_irq_init_cpu</name><argument_list pos:start="125:30" pos:end="125:34">(<argument pos:start="125:31" pos:end="125:33"><expr pos:start="125:31" pos:end="125:33"><name pos:start="125:31" pos:end="125:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:33"><expr pos:start="127:9" pos:end="127:32"><call pos:start="127:9" pos:end="127:32"><name pos:start="127:9" pos:end="127:27">cpu_mips_clock_init</name><argument_list pos:start="127:28" pos:end="127:32">(<argument pos:start="127:29" pos:end="127:31"><expr pos:start="127:29" pos:end="127:31"><name pos:start="127:29" pos:end="127:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:49"><expr pos:start="129:9" pos:end="129:48"><call pos:start="129:9" pos:end="129:48"><name pos:start="129:9" pos:end="129:27">qemu_register_reset</name><argument_list pos:start="129:28" pos:end="129:48">(<argument pos:start="129:29" pos:end="129:42"><expr pos:start="129:29" pos:end="129:42"><name pos:start="129:29" pos:end="129:42">main_cpu_reset</name></expr></argument>, <argument pos:start="129:45" pos:end="129:47"><expr pos:start="129:45" pos:end="129:47"><name pos:start="129:45" pos:end="129:47">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="133:5" pos:end="133:30"><expr pos:start="133:5" pos:end="133:29"><name pos:start="133:5" pos:end="133:7">cpu</name> <operator pos:start="133:9" pos:end="133:9">=</operator> <call pos:start="133:11" pos:end="133:29"><name pos:start="133:11" pos:end="133:18">MIPS_CPU</name><argument_list pos:start="133:19" pos:end="133:29">(<argument pos:start="133:20" pos:end="133:28"><expr pos:start="133:20" pos:end="133:28"><name pos:start="133:20" pos:end="133:28">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:20"><expr pos:start="135:5" pos:end="135:19"><name pos:start="135:5" pos:end="135:7">env</name> <operator pos:start="135:9" pos:end="135:9">=</operator> <operator pos:start="135:11" pos:end="135:11">&amp;</operator><name pos:start="135:12" pos:end="135:19"><name pos:start="135:12" pos:end="135:14">cpu</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:19">env</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:22">/* allocate RAM */</comment>

    <if_stmt pos:start="141:5" pos:end="151:5"><if pos:start="141:5" pos:end="151:5">if <condition pos:start="141:8" pos:end="141:31">(<expr pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:16">ram_size</name> <operator pos:start="141:18" pos:end="141:18">&gt;</operator> <operator pos:start="141:20" pos:end="141:20">(</operator><literal type="number" pos:start="141:21" pos:end="141:23">256</literal> <operator pos:start="141:25" pos:end="141:26">&lt;&lt;</operator> <literal type="number" pos:start="141:28" pos:end="141:29">20</literal><operator pos:start="141:30" pos:end="141:30">)</operator></expr>)</condition> <block pos:start="141:33" pos:end="151:5">{<block_content pos:start="143:9" pos:end="149:16">

        <expr_stmt pos:start="143:9" pos:end="147:54"><expr pos:start="143:9" pos:end="147:53"><call pos:start="143:9" pos:end="147:53"><name pos:start="143:9" pos:end="143:15">fprintf</name><argument_list pos:start="143:16" pos:end="147:53">(<argument pos:start="143:17" pos:end="143:22"><expr pos:start="143:17" pos:end="143:22"><name pos:start="143:17" pos:end="143:22">stderr</name></expr></argument>,

                <argument pos:start="145:17" pos:end="145:81"><expr pos:start="145:17" pos:end="145:81"><literal type="string" pos:start="145:17" pos:end="145:81">"qemu: Too much memory for this machine: %d MB, maximum 256 MB\n"</literal></expr></argument>,

                <argument pos:start="147:17" pos:end="147:52"><expr pos:start="147:17" pos:end="147:52"><operator pos:start="147:17" pos:end="147:17">(</operator><operator pos:start="147:18" pos:end="147:18">(</operator><name pos:start="147:19" pos:end="147:26">unsigned</name> <name pos:start="147:28" pos:end="147:30">int</name><operator pos:start="147:31" pos:end="147:31">)</operator><name pos:start="147:32" pos:end="147:39">ram_size</name> <operator pos:start="147:41" pos:end="147:41">/</operator> <operator pos:start="147:43" pos:end="147:43">(</operator><literal type="number" pos:start="147:44" pos:end="147:44">1</literal> <operator pos:start="147:46" pos:end="147:47">&lt;&lt;</operator> <literal type="number" pos:start="147:49" pos:end="147:50">20</literal><operator pos:start="147:51" pos:end="147:51">)</operator><operator pos:start="147:52" pos:end="147:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:16"><expr pos:start="149:9" pos:end="149:15"><call pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:12">exit</name><argument_list pos:start="149:13" pos:end="149:15">(<argument pos:start="149:14" pos:end="149:14"><expr pos:start="149:14" pos:end="149:14"><literal type="number" pos:start="149:14" pos:end="149:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:66"><expr pos:start="153:5" pos:end="153:65"><call pos:start="153:5" pos:end="153:65"><name pos:start="153:5" pos:end="153:26">memory_region_init_ram</name><argument_list pos:start="153:27" pos:end="153:65">(<argument pos:start="153:28" pos:end="153:30"><expr pos:start="153:28" pos:end="153:30"><name pos:start="153:28" pos:end="153:30">ram</name></expr></argument>, <argument pos:start="153:33" pos:end="153:36"><expr pos:start="153:33" pos:end="153:36"><name pos:start="153:33" pos:end="153:36">NULL</name></expr></argument>, <argument pos:start="153:39" pos:end="153:54"><expr pos:start="153:39" pos:end="153:54"><literal type="string" pos:start="153:39" pos:end="153:54">"mips_malta.ram"</literal></expr></argument>, <argument pos:start="153:57" pos:end="153:64"><expr pos:start="153:57" pos:end="153:64"><name pos:start="153:57" pos:end="153:64">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:37"><expr pos:start="155:5" pos:end="155:36"><call pos:start="155:5" pos:end="155:36"><name pos:start="155:5" pos:end="155:31">vmstate_register_ram_global</name><argument_list pos:start="155:32" pos:end="155:36">(<argument pos:start="155:33" pos:end="155:35"><expr pos:start="155:33" pos:end="155:35"><name pos:start="155:33" pos:end="155:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:55"><expr pos:start="157:5" pos:end="157:54"><call pos:start="157:5" pos:end="157:54"><name pos:start="157:5" pos:end="157:31">memory_region_add_subregion</name><argument_list pos:start="157:32" pos:end="157:54">(<argument pos:start="157:33" pos:end="157:45"><expr pos:start="157:33" pos:end="157:45"><name pos:start="157:33" pos:end="157:45">system_memory</name></expr></argument>, <argument pos:start="157:48" pos:end="157:48"><expr pos:start="157:48" pos:end="157:48"><literal type="number" pos:start="157:48" pos:end="157:48">0</literal></expr></argument>, <argument pos:start="157:51" pos:end="157:53"><expr pos:start="157:51" pos:end="157:53"><name pos:start="157:51" pos:end="157:53">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="161:5" pos:end="161:34">/* generate SPD EEPROM data */</comment>

    <expr_stmt pos:start="163:5" pos:end="168:0"><expr pos:start="163:5" pos:end="163:38"><call pos:start="163:5" pos:end="163:38"><name pos:start="163:5" pos:end="163:19">eeprom_generate</name><argument_list pos:start="163:20" pos:end="163:38">(<argument pos:start="163:21" pos:end="163:27"><expr pos:start="163:21" pos:end="163:27"><operator pos:start="163:21" pos:end="163:21">&amp;</operator><name pos:start="163:22" pos:end="163:27">eeprom</name></expr></argument>, <argument pos:start="163:30" pos:end="163:37"><expr pos:start="163:30" pos:end="163:37"><name pos:start="163:30" pos:end="163:37">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="167:1" pos:end="167:29">#<cpp:directive pos:start="167:2" pos:end="167:6">ifdef</cpp:directive> <name pos:start="167:8" pos:end="167:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="169:5" pos:end="172:0"><expr pos:start="169:5" pos:end="169:10"><name pos:start="169:5" pos:end="169:6">be</name> <operator pos:start="169:8" pos:end="169:8">=</operator> <literal type="number" pos:start="169:10" pos:end="169:10">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="171:1" pos:end="171:5">#<cpp:directive pos:start="171:2" pos:end="171:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="173:5" pos:end="176:0"><expr pos:start="173:5" pos:end="173:10"><name pos:start="173:5" pos:end="173:6">be</name> <operator pos:start="173:8" pos:end="173:8">=</operator> <literal type="number" pos:start="173:10" pos:end="173:10">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="175:1" pos:end="175:6">#<cpp:directive pos:start="175:2" pos:end="175:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="177:5" pos:end="177:14">/* FPGA */</comment>

    <comment type="block" pos:start="179:5" pos:end="179:76">/* The CBUS UART is attached to the MIPS CPU INT2 pin, ie interrupt 4 */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:77"><expr pos:start="181:5" pos:end="181:76"><call pos:start="181:5" pos:end="181:76"><name pos:start="181:5" pos:end="181:19">malta_fpga_init</name><argument_list pos:start="181:20" pos:end="181:76">(<argument pos:start="181:21" pos:end="181:33"><expr pos:start="181:21" pos:end="181:33"><name pos:start="181:21" pos:end="181:33">system_memory</name></expr></argument>, <argument pos:start="181:36" pos:end="181:47"><expr pos:start="181:36" pos:end="181:47"><name pos:start="181:36" pos:end="181:47">FPGA_ADDRESS</name></expr></argument>, <argument pos:start="181:50" pos:end="181:60"><expr pos:start="181:50" pos:end="181:60"><name pos:start="181:50" pos:end="181:60"><name pos:start="181:50" pos:end="181:52">env</name><operator pos:start="181:53" pos:end="181:54">-&gt;</operator><name pos:start="181:55" pos:end="181:57">irq</name><index pos:start="181:58" pos:end="181:60">[<expr pos:start="181:59" pos:end="181:59"><literal type="number" pos:start="181:59" pos:end="181:59">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="181:63" pos:end="181:75"><expr pos:start="181:63" pos:end="181:75"><name pos:start="181:63" pos:end="181:75"><name pos:start="181:63" pos:end="181:72">serial_hds</name><index pos:start="181:73" pos:end="181:75">[<expr pos:start="181:74" pos:end="181:74"><literal type="number" pos:start="181:74" pos:end="181:74">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:40">/* Load firmware in flash / BIOS. */</comment>

    <expr_stmt pos:start="187:5" pos:end="190:0"><expr pos:start="187:5" pos:end="187:43"><name pos:start="187:5" pos:end="187:9">dinfo</name> <operator pos:start="187:11" pos:end="187:11">=</operator> <call pos:start="187:13" pos:end="187:43"><name pos:start="187:13" pos:end="187:21">drive_get</name><argument_list pos:start="187:22" pos:end="187:43">(<argument pos:start="187:23" pos:end="187:31"><expr pos:start="187:23" pos:end="187:31"><name pos:start="187:23" pos:end="187:31">IF_PFLASH</name></expr></argument>, <argument pos:start="187:34" pos:end="187:34"><expr pos:start="187:34" pos:end="187:34"><literal type="number" pos:start="187:34" pos:end="187:34">0</literal></expr></argument>, <argument pos:start="187:37" pos:end="187:42"><expr pos:start="187:37" pos:end="187:42"><name pos:start="187:37" pos:end="187:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="189:1" pos:end="189:23">#<cpp:directive pos:start="189:2" pos:end="189:6">ifdef</cpp:directive> <name pos:start="189:8" pos:end="189:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <if_stmt pos:start="191:5" pos:end="204:0"><if pos:start="191:5" pos:end="204:0">if <condition pos:start="191:8" pos:end="191:14">(<expr pos:start="191:9" pos:end="191:13"><name pos:start="191:9" pos:end="191:13">dinfo</name></expr>)</condition> <block pos:start="191:16" pos:end="204:0">{<block_content pos:start="193:9" pos:end="199:62">

        <expr_stmt pos:start="193:9" pos:end="199:62"><expr pos:start="193:9" pos:end="199:61"><call pos:start="193:9" pos:end="199:61"><name pos:start="193:9" pos:end="193:14">printf</name><argument_list pos:start="193:15" pos:end="199:61">(<argument pos:start="193:16" pos:end="195:38"><expr pos:start="193:16" pos:end="195:38"><literal type="string" pos:start="193:16" pos:end="193:49">"Register parallel flash %d size "</literal> <name pos:start="193:51" pos:end="193:63">TARGET_FMT_lx</name> <literal type="string" pos:start="193:65" pos:end="193:70">" at "</literal>

               <literal type="string" pos:start="195:16" pos:end="195:38">"addr %08llx '%s' %x\n"</literal></expr></argument>,

               <argument pos:start="197:16" pos:end="197:21"><expr pos:start="197:16" pos:end="197:21"><name pos:start="197:16" pos:end="197:21">fl_idx</name></expr></argument>, <argument pos:start="197:24" pos:end="197:32"><expr pos:start="197:24" pos:end="197:32"><name pos:start="197:24" pos:end="197:32">bios_size</name></expr></argument>, <argument pos:start="197:35" pos:end="197:47"><expr pos:start="197:35" pos:end="197:47"><name pos:start="197:35" pos:end="197:47">FLASH_ADDRESS</name></expr></argument>,

               <argument pos:start="199:16" pos:end="199:48"><expr pos:start="199:16" pos:end="199:48"><call pos:start="199:16" pos:end="199:48"><name pos:start="199:16" pos:end="199:35">bdrv_get_device_name</name><argument_list pos:start="199:36" pos:end="199:48">(<argument pos:start="199:37" pos:end="199:47"><expr pos:start="199:37" pos:end="199:47"><name pos:start="199:37" pos:end="199:47"><name pos:start="199:37" pos:end="199:41">dinfo</name><operator pos:start="199:42" pos:end="199:43">-&gt;</operator><name pos:start="199:44" pos:end="199:47">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="199:51" pos:end="199:60"><expr pos:start="199:51" pos:end="199:60"><name pos:start="199:51" pos:end="199:60">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="203:1" pos:end="203:6">#<cpp:directive pos:start="203:2" pos:end="203:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="205:5" pos:end="211:70"><expr pos:start="205:5" pos:end="211:69"><name pos:start="205:5" pos:end="205:6">fl</name> <operator pos:start="205:8" pos:end="205:8">=</operator> <call pos:start="205:10" pos:end="211:69"><name pos:start="205:10" pos:end="205:30">pflash_cfi01_register</name><argument_list pos:start="205:31" pos:end="211:69">(<argument pos:start="205:32" pos:end="205:44"><expr pos:start="205:32" pos:end="205:44"><name pos:start="205:32" pos:end="205:44">FLASH_ADDRESS</name></expr></argument>, <argument pos:start="205:47" pos:end="205:50"><expr pos:start="205:47" pos:end="205:50"><name pos:start="205:47" pos:end="205:50">NULL</name></expr></argument>, <argument pos:start="205:53" pos:end="205:69"><expr pos:start="205:53" pos:end="205:69"><literal type="string" pos:start="205:53" pos:end="205:69">"mips_malta.bios"</literal></expr></argument>,

                               <argument pos:start="207:32" pos:end="207:40"><expr pos:start="207:32" pos:end="207:40"><name pos:start="207:32" pos:end="207:40">BIOS_SIZE</name></expr></argument>, <argument pos:start="207:43" pos:end="207:68"><expr pos:start="207:43" pos:end="207:68"><ternary pos:start="207:43" pos:end="207:68"><condition pos:start="207:43" pos:end="207:49"><expr pos:start="207:43" pos:end="207:47"><name pos:start="207:43" pos:end="207:47">dinfo</name></expr> ?</condition><then pos:start="207:51" pos:end="207:61"> <expr pos:start="207:51" pos:end="207:61"><name pos:start="207:51" pos:end="207:61"><name pos:start="207:51" pos:end="207:55">dinfo</name><operator pos:start="207:56" pos:end="207:57">-&gt;</operator><name pos:start="207:58" pos:end="207:61">bdrv</name></name></expr> </then><else pos:start="207:63" pos:end="207:68">: <expr pos:start="207:65" pos:end="207:68"><name pos:start="207:65" pos:end="207:68">NULL</name></expr></else></ternary></expr></argument>,

                               <argument pos:start="209:32" pos:end="209:36"><expr pos:start="209:32" pos:end="209:36"><literal type="number" pos:start="209:32" pos:end="209:36">65536</literal></expr></argument>, <argument pos:start="209:39" pos:end="209:48"><expr pos:start="209:39" pos:end="209:48"><name pos:start="209:39" pos:end="209:48">fl_sectors</name></expr></argument>,

                               <argument pos:start="211:32" pos:end="211:32"><expr pos:start="211:32" pos:end="211:32"><literal type="number" pos:start="211:32" pos:end="211:32">4</literal></expr></argument>, <argument pos:start="211:35" pos:end="211:40"><expr pos:start="211:35" pos:end="211:40"><literal type="number" pos:start="211:35" pos:end="211:40">0x0000</literal></expr></argument>, <argument pos:start="211:43" pos:end="211:48"><expr pos:start="211:43" pos:end="211:48"><literal type="number" pos:start="211:43" pos:end="211:48">0x0000</literal></expr></argument>, <argument pos:start="211:51" pos:end="211:56"><expr pos:start="211:51" pos:end="211:56"><literal type="number" pos:start="211:51" pos:end="211:56">0x0000</literal></expr></argument>, <argument pos:start="211:59" pos:end="211:64"><expr pos:start="211:59" pos:end="211:64"><literal type="number" pos:start="211:59" pos:end="211:64">0x0000</literal></expr></argument>, <argument pos:start="211:67" pos:end="211:68"><expr pos:start="211:67" pos:end="211:68"><name pos:start="211:67" pos:end="211:68">be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:39"><expr pos:start="213:5" pos:end="213:38"><name pos:start="213:5" pos:end="213:8">bios</name> <operator pos:start="213:10" pos:end="213:10">=</operator> <call pos:start="213:12" pos:end="213:38"><name pos:start="213:12" pos:end="213:34">pflash_cfi01_get_memory</name><argument_list pos:start="213:35" pos:end="213:38">(<argument pos:start="213:36" pos:end="213:37"><expr pos:start="213:36" pos:end="213:37"><name pos:start="213:36" pos:end="213:37">fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:13"><expr pos:start="215:5" pos:end="215:12"><name pos:start="215:5" pos:end="215:10">fl_idx</name><operator pos:start="215:11" pos:end="215:12">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="217:5" pos:end="305:5"><if pos:start="217:5" pos:end="233:5">if <condition pos:start="217:8" pos:end="217:24">(<expr pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:23">kernel_filename</name></expr>)</condition> <block pos:start="217:26" pos:end="233:5">{<block_content pos:start="221:9" pos:end="231:77">

        <comment type="block" pos:start="219:9" pos:end="219:61">/* Write a small bootloader to the flash location. */</comment>

        <expr_stmt pos:start="221:9" pos:end="221:41"><expr pos:start="221:9" pos:end="221:40"><name pos:start="221:9" pos:end="221:29"><name pos:start="221:9" pos:end="221:20">loaderparams</name><operator pos:start="221:21" pos:end="221:21">.</operator><name pos:start="221:22" pos:end="221:29">ram_size</name></name> <operator pos:start="221:31" pos:end="221:31">=</operator> <name pos:start="221:33" pos:end="221:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:55"><expr pos:start="223:9" pos:end="223:54"><name pos:start="223:9" pos:end="223:36"><name pos:start="223:9" pos:end="223:20">loaderparams</name><operator pos:start="223:21" pos:end="223:21">.</operator><name pos:start="223:22" pos:end="223:36">kernel_filename</name></name> <operator pos:start="223:38" pos:end="223:38">=</operator> <name pos:start="223:40" pos:end="223:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:53"><expr pos:start="225:9" pos:end="225:52"><name pos:start="225:9" pos:end="225:35"><name pos:start="225:9" pos:end="225:20">loaderparams</name><operator pos:start="225:21" pos:end="225:21">.</operator><name pos:start="225:22" pos:end="225:35">kernel_cmdline</name></name> <operator pos:start="225:37" pos:end="225:37">=</operator> <name pos:start="225:39" pos:end="225:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:55"><expr pos:start="227:9" pos:end="227:54"><name pos:start="227:9" pos:end="227:36"><name pos:start="227:9" pos:end="227:20">loaderparams</name><operator pos:start="227:21" pos:end="227:21">.</operator><name pos:start="227:22" pos:end="227:36">initrd_filename</name></name> <operator pos:start="227:38" pos:end="227:38">=</operator> <name pos:start="227:40" pos:end="227:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:37"><expr pos:start="229:9" pos:end="229:36"><name pos:start="229:9" pos:end="229:20">kernel_entry</name> <operator pos:start="229:22" pos:end="229:22">=</operator> <call pos:start="229:24" pos:end="229:36"><name pos:start="229:24" pos:end="229:34">load_kernel</name><argument_list pos:start="229:35" pos:end="229:36">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:77"><expr pos:start="231:9" pos:end="231:76"><call pos:start="231:9" pos:end="231:76"><name pos:start="231:9" pos:end="231:24">write_bootloader</name><argument_list pos:start="231:25" pos:end="231:76">(<argument pos:start="231:26" pos:end="231:28"><expr pos:start="231:26" pos:end="231:28"><name pos:start="231:26" pos:end="231:28">env</name></expr></argument>, <argument pos:start="231:31" pos:end="231:61"><expr pos:start="231:31" pos:end="231:61"><call pos:start="231:31" pos:end="231:61"><name pos:start="231:31" pos:end="231:55">memory_region_get_ram_ptr</name><argument_list pos:start="231:56" pos:end="231:61">(<argument pos:start="231:57" pos:end="231:60"><expr pos:start="231:57" pos:end="231:60"><name pos:start="231:57" pos:end="231:60">bios</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="231:64" pos:end="231:75"><expr pos:start="231:64" pos:end="231:75"><name pos:start="231:64" pos:end="231:75">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="233:7" pos:end="305:5">else <block pos:start="233:12" pos:end="305:5">{<block_content pos:start="237:9" pos:end="304:0">

        <comment type="block" pos:start="235:9" pos:end="235:39">/* Load firmware from flash. */</comment>

        <if_stmt pos:start="237:9" pos:end="280:0"><if pos:start="237:9" pos:end="280:0">if <condition pos:start="237:12" pos:end="237:19">(<expr pos:start="237:13" pos:end="237:18"><operator pos:start="237:13" pos:end="237:13">!</operator><name pos:start="237:14" pos:end="237:18">dinfo</name></expr>)</condition> <block pos:start="237:21" pos:end="280:0">{<block_content pos:start="241:13" pos:end="271:13">

            <comment type="block" pos:start="239:13" pos:end="239:36">/* Load a BIOS image. */</comment>

            <if_stmt pos:start="241:13" pos:end="245:13"><if pos:start="241:13" pos:end="245:13">if <condition pos:start="241:16" pos:end="241:34">(<expr pos:start="241:17" pos:end="241:33"><name pos:start="241:17" pos:end="241:25">bios_name</name> <operator pos:start="241:27" pos:end="241:28">==</operator> <name pos:start="241:30" pos:end="241:33">NULL</name></expr>)</condition> <block pos:start="241:36" pos:end="245:13">{<block_content pos:start="243:17" pos:end="243:42">

                <expr_stmt pos:start="243:17" pos:end="243:42"><expr pos:start="243:17" pos:end="243:41"><name pos:start="243:17" pos:end="243:25">bios_name</name> <operator pos:start="243:27" pos:end="243:27">=</operator> <name pos:start="243:29" pos:end="243:41">BIOS_FILENAME</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:70"><expr pos:start="247:13" pos:end="247:69"><name pos:start="247:13" pos:end="247:20">filename</name> <operator pos:start="247:22" pos:end="247:22">=</operator> <call pos:start="247:24" pos:end="247:69"><name pos:start="247:24" pos:end="247:37">qemu_find_file</name><argument_list pos:start="247:38" pos:end="247:69">(<argument pos:start="247:39" pos:end="247:57"><expr pos:start="247:39" pos:end="247:57"><name pos:start="247:39" pos:end="247:57">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="247:60" pos:end="247:68"><expr pos:start="247:60" pos:end="247:68"><name pos:start="247:60" pos:end="247:68">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="261:13"><if pos:start="249:13" pos:end="257:13">if <condition pos:start="249:16" pos:end="249:25">(<expr pos:start="249:17" pos:end="249:24"><name pos:start="249:17" pos:end="249:24">filename</name></expr>)</condition> <block pos:start="249:27" pos:end="257:13">{<block_content pos:start="251:17" pos:end="255:33">

                <expr_stmt pos:start="251:17" pos:end="253:59"><expr pos:start="251:17" pos:end="253:58"><name pos:start="251:17" pos:end="251:25">bios_size</name> <operator pos:start="251:27" pos:end="251:27">=</operator> <call pos:start="251:29" pos:end="253:58"><name pos:start="251:29" pos:end="251:47">load_image_targphys</name><argument_list pos:start="251:48" pos:end="253:58">(<argument pos:start="251:49" pos:end="251:56"><expr pos:start="251:49" pos:end="251:56"><name pos:start="251:49" pos:end="251:56">filename</name></expr></argument>, <argument pos:start="251:59" pos:end="251:71"><expr pos:start="251:59" pos:end="251:71"><name pos:start="251:59" pos:end="251:71">FLASH_ADDRESS</name></expr></argument>,

                                                <argument pos:start="253:49" pos:end="253:57"><expr pos:start="253:49" pos:end="253:57"><name pos:start="253:49" pos:end="253:57">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:33"><expr pos:start="255:17" pos:end="255:32"><call pos:start="255:17" pos:end="255:32"><name pos:start="255:17" pos:end="255:22">g_free</name><argument_list pos:start="255:23" pos:end="255:32">(<argument pos:start="255:24" pos:end="255:31"><expr pos:start="255:24" pos:end="255:31"><name pos:start="255:24" pos:end="255:31">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="257:15" pos:end="261:13">else <block pos:start="257:20" pos:end="261:13">{<block_content pos:start="259:17" pos:end="259:31">

                <expr_stmt pos:start="259:17" pos:end="259:31"><expr pos:start="259:17" pos:end="259:30"><name pos:start="259:17" pos:end="259:25">bios_size</name> <operator pos:start="259:27" pos:end="259:27">=</operator> <operator pos:start="259:29" pos:end="259:29">-</operator><literal type="number" pos:start="259:30" pos:end="259:30">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="263:13" pos:end="271:13"><if pos:start="263:13" pos:end="271:13">if <condition pos:start="263:16" pos:end="263:77">(<expr pos:start="263:17" pos:end="263:76"><operator pos:start="263:17" pos:end="263:17">(</operator><name pos:start="263:18" pos:end="263:45"><name pos:start="263:18" pos:end="263:26">bios_size</name> <argument_list type="generic" pos:start="263:28" pos:end="263:45">&lt; <argument pos:start="263:30" pos:end="263:43"><expr pos:start="263:30" pos:end="263:43"><literal type="number" pos:start="263:30" pos:end="263:30">0</literal> <operator pos:start="263:32" pos:end="263:33">||</operator> <name pos:start="263:35" pos:end="263:43">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="263:47" pos:end="263:55">BIOS_SIZE</name><operator pos:start="263:56" pos:end="263:56">)</operator> <operator pos:start="263:58" pos:end="263:59">&amp;&amp;</operator> <operator pos:start="263:61" pos:end="263:61">!</operator><name pos:start="263:62" pos:end="263:76">kernel_filename</name></expr>)</condition> <block pos:start="263:79" pos:end="271:13">{<block_content pos:start="265:17" pos:end="269:35">

                <expr_stmt pos:start="265:17" pos:end="269:35"><expr pos:start="265:17" pos:end="269:34"><call pos:start="265:17" pos:end="269:34"><name pos:start="265:17" pos:end="265:23">fprintf</name><argument_list pos:start="265:24" pos:end="269:34">(<argument pos:start="265:25" pos:end="265:30"><expr pos:start="265:25" pos:end="265:30"><name pos:start="265:25" pos:end="265:30">stderr</name></expr></argument>,

                        <argument pos:start="267:25" pos:end="267:111"><expr pos:start="267:25" pos:end="267:111"><literal type="string" pos:start="267:25" pos:end="267:111">"qemu: Warning, could not load MIPS bios '%s', and no -kernel argument was specified\n"</literal></expr></argument>,

                        <argument pos:start="269:25" pos:end="269:33"><expr pos:start="269:25" pos:end="269:33"><name pos:start="269:25" pos:end="269:33">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="275:9" pos:end="277:59">/* In little endian mode the 32bit words in the bios are swapped,

           a neat trick which allows bi-endian firmware. */</comment>

<cpp:ifndef pos:start="279:1" pos:end="279:30">#<cpp:directive pos:start="279:2" pos:end="279:7">ifndef</cpp:directive> <name pos:start="279:9" pos:end="279:30">TARGET_WORDS_BIGENDIAN</name></cpp:ifndef>

        <block pos:start="281:9" pos:end="304:0">{<block_content pos:start="283:13" pos:end="299:13">

            <decl_stmt pos:start="283:13" pos:end="283:58"><decl pos:start="283:13" pos:end="283:25"><type pos:start="283:13" pos:end="283:22"><name pos:start="283:13" pos:end="283:20">uint32_t</name> <modifier pos:start="283:22" pos:end="283:22">*</modifier></type><name pos:start="283:23" pos:end="283:25">end</name></decl>, <decl pos:start="283:28" pos:end="283:57"><type ref="prev" pos:start="283:13" pos:end="283:22"><modifier pos:start="283:28" pos:end="283:28">*</modifier></type><name pos:start="283:29" pos:end="283:32">addr</name> <init pos:start="283:34" pos:end="283:57">= <expr pos:start="283:36" pos:end="283:57"><call pos:start="283:36" pos:end="283:57"><name pos:start="283:36" pos:end="283:42">rom_ptr</name><argument_list pos:start="283:43" pos:end="283:57">(<argument pos:start="283:44" pos:end="283:56"><expr pos:start="283:44" pos:end="283:56"><name pos:start="283:44" pos:end="283:56">FLASH_ADDRESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="285:13" pos:end="289:13"><if pos:start="285:13" pos:end="289:13">if <condition pos:start="285:16" pos:end="285:22">(<expr pos:start="285:17" pos:end="285:21"><operator pos:start="285:17" pos:end="285:17">!</operator><name pos:start="285:18" pos:end="285:21">addr</name></expr>)</condition> <block pos:start="285:24" pos:end="289:13">{<block_content pos:start="287:17" pos:end="287:55">

                <expr_stmt pos:start="287:17" pos:end="287:55"><expr pos:start="287:17" pos:end="287:54"><name pos:start="287:17" pos:end="287:20">addr</name> <operator pos:start="287:22" pos:end="287:22">=</operator> <call pos:start="287:24" pos:end="287:54"><name pos:start="287:24" pos:end="287:48">memory_region_get_ram_ptr</name><argument_list pos:start="287:49" pos:end="287:54">(<argument pos:start="287:50" pos:end="287:53"><expr pos:start="287:50" pos:end="287:53"><name pos:start="287:50" pos:end="287:53">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:58"><expr pos:start="291:13" pos:end="291:57"><name pos:start="291:13" pos:end="291:15">end</name> <operator pos:start="291:17" pos:end="291:17">=</operator> <operator pos:start="291:19" pos:end="291:19">(</operator><name pos:start="291:20" pos:end="291:23">void</name> <operator pos:start="291:25" pos:end="291:25">*</operator><operator pos:start="291:26" pos:end="291:26">)</operator><name pos:start="291:27" pos:end="291:30">addr</name> <operator pos:start="291:32" pos:end="291:32">+</operator> <call pos:start="291:34" pos:end="291:57"><name pos:start="291:34" pos:end="291:36">MIN</name><argument_list pos:start="291:37" pos:end="291:57">(<argument pos:start="291:38" pos:end="291:46"><expr pos:start="291:38" pos:end="291:46"><name pos:start="291:38" pos:end="291:46">bios_size</name></expr></argument>, <argument pos:start="291:49" pos:end="291:56"><expr pos:start="291:49" pos:end="291:56"><literal type="number" pos:start="291:49" pos:end="291:56">0x3e0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="293:13" pos:end="299:13">while <condition pos:start="293:19" pos:end="293:30">(<expr pos:start="293:20" pos:end="293:29"><name pos:start="293:20" pos:end="293:23">addr</name> <operator pos:start="293:25" pos:end="293:25">&lt;</operator> <name pos:start="293:27" pos:end="293:29">end</name></expr>)</condition> <block pos:start="293:32" pos:end="299:13">{<block_content pos:start="295:17" pos:end="297:23">

                <expr_stmt pos:start="295:17" pos:end="295:31"><expr pos:start="295:17" pos:end="295:30"><call pos:start="295:17" pos:end="295:30"><name pos:start="295:17" pos:end="295:24">bswap32s</name><argument_list pos:start="295:25" pos:end="295:30">(<argument pos:start="295:26" pos:end="295:29"><expr pos:start="295:26" pos:end="295:29"><name pos:start="295:26" pos:end="295:29">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:23"><expr pos:start="297:17" pos:end="297:22"><name pos:start="297:17" pos:end="297:20">addr</name><operator pos:start="297:21" pos:end="297:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block>

<cpp:endif pos:start="303:1" pos:end="303:6">#<cpp:directive pos:start="303:2" pos:end="303:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="309:5" pos:end="319:7">/*

     * Map the BIOS at a 2nd physical location, as on the real board.

     * Copy it so that we can patch in the MIPS revision, which cannot be

     * handled by an overlapping region as the resulting ROM code subpage

     * regions are not executable.

     */</comment>

    <expr_stmt pos:start="321:5" pos:end="321:67"><expr pos:start="321:5" pos:end="321:66"><call pos:start="321:5" pos:end="321:66"><name pos:start="321:5" pos:end="321:26">memory_region_init_ram</name><argument_list pos:start="321:27" pos:end="321:66">(<argument pos:start="321:28" pos:end="321:36"><expr pos:start="321:28" pos:end="321:36"><name pos:start="321:28" pos:end="321:36">bios_copy</name></expr></argument>, <argument pos:start="321:39" pos:end="321:42"><expr pos:start="321:39" pos:end="321:42"><name pos:start="321:39" pos:end="321:42">NULL</name></expr></argument>, <argument pos:start="321:45" pos:end="321:54"><expr pos:start="321:45" pos:end="321:54"><literal type="string" pos:start="321:45" pos:end="321:54">"bios.1fc"</literal></expr></argument>, <argument pos:start="321:57" pos:end="321:65"><expr pos:start="321:57" pos:end="321:65"><name pos:start="321:57" pos:end="321:65">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="323:5" pos:end="331:5"><if pos:start="323:5" pos:end="331:5">if <condition pos:start="323:8" pos:end="325:44">(<expr pos:start="323:9" pos:end="325:43"><operator pos:start="323:9" pos:end="323:9">!</operator><call pos:start="323:10" pos:end="325:43"><name pos:start="323:10" pos:end="323:17">rom_copy</name><argument_list pos:start="323:18" pos:end="325:43">(<argument pos:start="323:19" pos:end="323:54"><expr pos:start="323:19" pos:end="323:54"><call pos:start="323:19" pos:end="323:54"><name pos:start="323:19" pos:end="323:43">memory_region_get_ram_ptr</name><argument_list pos:start="323:44" pos:end="323:54">(<argument pos:start="323:45" pos:end="323:53"><expr pos:start="323:45" pos:end="323:53"><name pos:start="323:45" pos:end="323:53">bios_copy</name></expr></argument>)</argument_list></call></expr></argument>,

                  <argument pos:start="325:19" pos:end="325:31"><expr pos:start="325:19" pos:end="325:31"><name pos:start="325:19" pos:end="325:31">FLASH_ADDRESS</name></expr></argument>, <argument pos:start="325:34" pos:end="325:42"><expr pos:start="325:34" pos:end="325:42"><name pos:start="325:34" pos:end="325:42">bios_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="325:46" pos:end="331:5">{<block_content pos:start="327:9" pos:end="329:59">

        <expr_stmt pos:start="327:9" pos:end="329:59"><expr pos:start="327:9" pos:end="329:58"><call pos:start="327:9" pos:end="329:58"><name pos:start="327:9" pos:end="327:14">memcpy</name><argument_list pos:start="327:15" pos:end="329:58">(<argument pos:start="327:16" pos:end="327:51"><expr pos:start="327:16" pos:end="327:51"><call pos:start="327:16" pos:end="327:51"><name pos:start="327:16" pos:end="327:40">memory_region_get_ram_ptr</name><argument_list pos:start="327:41" pos:end="327:51">(<argument pos:start="327:42" pos:end="327:50"><expr pos:start="327:42" pos:end="327:50"><name pos:start="327:42" pos:end="327:50">bios_copy</name></expr></argument>)</argument_list></call></expr></argument>,

               <argument pos:start="329:16" pos:end="329:46"><expr pos:start="329:16" pos:end="329:46"><call pos:start="329:16" pos:end="329:46"><name pos:start="329:16" pos:end="329:40">memory_region_get_ram_ptr</name><argument_list pos:start="329:41" pos:end="329:46">(<argument pos:start="329:42" pos:end="329:45"><expr pos:start="329:42" pos:end="329:45"><name pos:start="329:42" pos:end="329:45">bios</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="329:49" pos:end="329:57"><expr pos:start="329:49" pos:end="329:57"><name pos:start="329:49" pos:end="329:57">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="333:5" pos:end="333:48"><expr pos:start="333:5" pos:end="333:47"><call pos:start="333:5" pos:end="333:47"><name pos:start="333:5" pos:end="333:30">memory_region_set_readonly</name><argument_list pos:start="333:31" pos:end="333:47">(<argument pos:start="333:32" pos:end="333:40"><expr pos:start="333:32" pos:end="333:40"><name pos:start="333:32" pos:end="333:40">bios_copy</name></expr></argument>, <argument pos:start="333:43" pos:end="333:46"><expr pos:start="333:43" pos:end="333:46"><name pos:start="333:43" pos:end="333:46">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="335:5" pos:end="335:73"><expr pos:start="335:5" pos:end="335:72"><call pos:start="335:5" pos:end="335:72"><name pos:start="335:5" pos:end="335:31">memory_region_add_subregion</name><argument_list pos:start="335:32" pos:end="335:72">(<argument pos:start="335:33" pos:end="335:45"><expr pos:start="335:33" pos:end="335:45"><name pos:start="335:33" pos:end="335:45">system_memory</name></expr></argument>, <argument pos:start="335:48" pos:end="335:60"><expr pos:start="335:48" pos:end="335:60"><name pos:start="335:48" pos:end="335:60">RESET_ADDRESS</name></expr></argument>, <argument pos:start="335:63" pos:end="335:71"><expr pos:start="335:63" pos:end="335:71"><name pos:start="335:63" pos:end="335:71">bios_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="339:5" pos:end="339:52">/* Board ID = 0x420 (Malta Board with CoreLV) */</comment>

    <expr_stmt pos:start="341:5" pos:end="341:67"><expr pos:start="341:5" pos:end="341:66"><call pos:start="341:5" pos:end="341:66"><name pos:start="341:5" pos:end="341:9">stl_p</name><argument_list pos:start="341:10" pos:end="341:66">(<argument pos:start="341:11" pos:end="341:53"><expr pos:start="341:11" pos:end="341:53"><call pos:start="341:11" pos:end="341:46"><name pos:start="341:11" pos:end="341:35">memory_region_get_ram_ptr</name><argument_list pos:start="341:36" pos:end="341:46">(<argument pos:start="341:37" pos:end="341:45"><expr pos:start="341:37" pos:end="341:45"><name pos:start="341:37" pos:end="341:45">bios_copy</name></expr></argument>)</argument_list></call> <operator pos:start="341:48" pos:end="341:48">+</operator> <literal type="number" pos:start="341:50" pos:end="341:53">0x10</literal></expr></argument>, <argument pos:start="341:56" pos:end="341:65"><expr pos:start="341:56" pos:end="341:65"><literal type="number" pos:start="341:56" pos:end="341:65">0x00000420</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="345:5" pos:end="345:31">/* Init internal devices */</comment>

    <expr_stmt pos:start="347:5" pos:end="347:31"><expr pos:start="347:5" pos:end="347:30"><call pos:start="347:5" pos:end="347:30"><name pos:start="347:5" pos:end="347:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="347:26" pos:end="347:30">(<argument pos:start="347:27" pos:end="347:29"><expr pos:start="347:27" pos:end="347:29"><name pos:start="347:27" pos:end="347:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:29"><expr pos:start="349:5" pos:end="349:28"><call pos:start="349:5" pos:end="349:28"><name pos:start="349:5" pos:end="349:23">cpu_mips_clock_init</name><argument_list pos:start="349:24" pos:end="349:28">(<argument pos:start="349:25" pos:end="349:27"><expr pos:start="349:25" pos:end="349:27"><name pos:start="349:25" pos:end="349:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="353:5" pos:end="365:7">/*

     * We have a circular dependency problem: pci_bus depends on isa_irq,

     * isa_irq is provided by i8259, i8259 depends on ISA, ISA depends

     * on piix4, and piix4 depends on pci_bus.  To stop the cycle we have

     * qemu_irq_proxy() adds an extra bit of indirection, allowing us

     * to resolve the isa_irq -&gt; i8259 dependency after i8259 is initialized.

     */</comment>

    <expr_stmt pos:start="367:5" pos:end="367:44"><expr pos:start="367:5" pos:end="367:43"><name pos:start="367:5" pos:end="367:11">isa_irq</name> <operator pos:start="367:13" pos:end="367:13">=</operator> <call pos:start="367:15" pos:end="367:43"><name pos:start="367:15" pos:end="367:28">qemu_irq_proxy</name><argument_list pos:start="367:29" pos:end="367:43">(<argument pos:start="367:30" pos:end="367:38"><expr pos:start="367:30" pos:end="367:38"><operator pos:start="367:30" pos:end="367:30">&amp;</operator><name pos:start="367:31" pos:end="367:38"><name pos:start="367:31" pos:end="367:31">s</name><operator pos:start="367:32" pos:end="367:33">-&gt;</operator><name pos:start="367:34" pos:end="367:38">i8259</name></name></expr></argument>, <argument pos:start="367:41" pos:end="367:42"><expr pos:start="367:41" pos:end="367:42"><literal type="number" pos:start="367:41" pos:end="367:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="371:5" pos:end="371:21">/* Northbridge */</comment>

    <expr_stmt pos:start="373:5" pos:end="373:40"><expr pos:start="373:5" pos:end="373:39"><name pos:start="373:5" pos:end="373:11">pci_bus</name> <operator pos:start="373:13" pos:end="373:13">=</operator> <call pos:start="373:15" pos:end="373:39"><name pos:start="373:15" pos:end="373:30">gt64120_register</name><argument_list pos:start="373:31" pos:end="373:39">(<argument pos:start="373:32" pos:end="373:38"><expr pos:start="373:32" pos:end="373:38"><name pos:start="373:32" pos:end="373:38">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="377:5" pos:end="377:21">/* Southbridge */</comment>

    <expr_stmt pos:start="379:5" pos:end="379:35"><expr pos:start="379:5" pos:end="379:34"><call pos:start="379:5" pos:end="379:34"><name pos:start="379:5" pos:end="379:17">ide_drive_get</name><argument_list pos:start="379:18" pos:end="379:34">(<argument pos:start="379:19" pos:end="379:20"><expr pos:start="379:19" pos:end="379:20"><name pos:start="379:19" pos:end="379:20">hd</name></expr></argument>, <argument pos:start="379:23" pos:end="379:33"><expr pos:start="379:23" pos:end="379:33"><name pos:start="379:23" pos:end="379:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="383:5" pos:end="383:52"><expr pos:start="383:5" pos:end="383:51"><name pos:start="383:5" pos:end="383:15">piix4_devfn</name> <operator pos:start="383:17" pos:end="383:17">=</operator> <call pos:start="383:19" pos:end="383:51"><name pos:start="383:19" pos:end="383:28">piix4_init</name><argument_list pos:start="383:29" pos:end="383:51">(<argument pos:start="383:30" pos:end="383:36"><expr pos:start="383:30" pos:end="383:36"><name pos:start="383:30" pos:end="383:36">pci_bus</name></expr></argument>, <argument pos:start="383:39" pos:end="383:46"><expr pos:start="383:39" pos:end="383:46"><operator pos:start="383:39" pos:end="383:39">&amp;</operator><name pos:start="383:40" pos:end="383:46">isa_bus</name></expr></argument>, <argument pos:start="383:49" pos:end="383:50"><expr pos:start="383:49" pos:end="383:50"><literal type="number" pos:start="383:49" pos:end="383:50">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="387:5" pos:end="387:30">/* Interrupt controller */</comment>

    <comment type="block" pos:start="389:5" pos:end="389:71">/* The 8259 is attached to the MIPS CPU INT0 pin, ie interrupt 2 */</comment>

    <expr_stmt pos:start="391:5" pos:end="391:48"><expr pos:start="391:5" pos:end="391:47"><name pos:start="391:5" pos:end="391:12"><name pos:start="391:5" pos:end="391:5">s</name><operator pos:start="391:6" pos:end="391:7">-&gt;</operator><name pos:start="391:8" pos:end="391:12">i8259</name></name> <operator pos:start="391:14" pos:end="391:14">=</operator> <call pos:start="391:16" pos:end="391:47"><name pos:start="391:16" pos:end="391:25">i8259_init</name><argument_list pos:start="391:26" pos:end="391:47">(<argument pos:start="391:27" pos:end="391:33"><expr pos:start="391:27" pos:end="391:33"><name pos:start="391:27" pos:end="391:33">isa_bus</name></expr></argument>, <argument pos:start="391:36" pos:end="391:46"><expr pos:start="391:36" pos:end="391:46"><name pos:start="391:36" pos:end="391:46"><name pos:start="391:36" pos:end="391:38">env</name><operator pos:start="391:39" pos:end="391:40">-&gt;</operator><name pos:start="391:41" pos:end="391:43">irq</name><index pos:start="391:44" pos:end="391:46">[<expr pos:start="391:45" pos:end="391:45"><literal type="number" pos:start="391:45" pos:end="391:45">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="395:5" pos:end="395:36"><expr pos:start="395:5" pos:end="395:35"><call pos:start="395:5" pos:end="395:35"><name pos:start="395:5" pos:end="395:16">isa_bus_irqs</name><argument_list pos:start="395:17" pos:end="395:35">(<argument pos:start="395:18" pos:end="395:24"><expr pos:start="395:18" pos:end="395:24"><name pos:start="395:18" pos:end="395:24">isa_bus</name></expr></argument>, <argument pos:start="395:27" pos:end="395:34"><expr pos:start="395:27" pos:end="395:34"><name pos:start="395:27" pos:end="395:34"><name pos:start="395:27" pos:end="395:27">s</name><operator pos:start="395:28" pos:end="395:29">-&gt;</operator><name pos:start="395:30" pos:end="395:34">i8259</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:53"><expr pos:start="397:5" pos:end="397:52"><call pos:start="397:5" pos:end="397:52"><name pos:start="397:5" pos:end="397:22">pci_piix4_ide_init</name><argument_list pos:start="397:23" pos:end="397:52">(<argument pos:start="397:24" pos:end="397:30"><expr pos:start="397:24" pos:end="397:30"><name pos:start="397:24" pos:end="397:30">pci_bus</name></expr></argument>, <argument pos:start="397:33" pos:end="397:34"><expr pos:start="397:33" pos:end="397:34"><name pos:start="397:33" pos:end="397:34">hd</name></expr></argument>, <argument pos:start="397:37" pos:end="397:51"><expr pos:start="397:37" pos:end="397:51"><name pos:start="397:37" pos:end="397:47">piix4_devfn</name> <operator pos:start="397:49" pos:end="397:49">+</operator> <literal type="number" pos:start="397:51" pos:end="397:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:66"><expr pos:start="399:5" pos:end="399:65"><call pos:start="399:5" pos:end="399:65"><name pos:start="399:5" pos:end="399:21">pci_create_simple</name><argument_list pos:start="399:22" pos:end="399:65">(<argument pos:start="399:23" pos:end="399:29"><expr pos:start="399:23" pos:end="399:29"><name pos:start="399:23" pos:end="399:29">pci_bus</name></expr></argument>, <argument pos:start="399:32" pos:end="399:46"><expr pos:start="399:32" pos:end="399:46"><name pos:start="399:32" pos:end="399:42">piix4_devfn</name> <operator pos:start="399:44" pos:end="399:44">+</operator> <literal type="number" pos:start="399:46" pos:end="399:46">2</literal></expr></argument>, <argument pos:start="399:49" pos:end="399:64"><expr pos:start="399:49" pos:end="399:64"><literal type="string" pos:start="399:49" pos:end="399:64">"piix4-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="403:63"><expr pos:start="401:5" pos:end="403:62"><name pos:start="401:5" pos:end="401:9">smbus</name> <operator pos:start="401:11" pos:end="401:11">=</operator> <call pos:start="401:13" pos:end="403:62"><name pos:start="401:13" pos:end="401:25">piix4_pm_init</name><argument_list pos:start="401:26" pos:end="403:62">(<argument pos:start="401:27" pos:end="401:33"><expr pos:start="401:27" pos:end="401:33"><name pos:start="401:27" pos:end="401:33">pci_bus</name></expr></argument>, <argument pos:start="401:36" pos:end="401:50"><expr pos:start="401:36" pos:end="401:50"><name pos:start="401:36" pos:end="401:46">piix4_devfn</name> <operator pos:start="401:48" pos:end="401:48">+</operator> <literal type="number" pos:start="401:50" pos:end="401:50">3</literal></expr></argument>, <argument pos:start="401:53" pos:end="401:58"><expr pos:start="401:53" pos:end="401:58"><literal type="number" pos:start="401:53" pos:end="401:58">0x1100</literal></expr></argument>,

                          <argument pos:start="403:27" pos:end="403:46"><expr pos:start="403:27" pos:end="403:46"><call pos:start="403:27" pos:end="403:46"><name pos:start="403:27" pos:end="403:37">isa_get_irq</name><argument_list pos:start="403:38" pos:end="403:46">(<argument pos:start="403:39" pos:end="403:42"><expr pos:start="403:39" pos:end="403:42"><name pos:start="403:39" pos:end="403:42">NULL</name></expr></argument>, <argument pos:start="403:45" pos:end="403:45"><expr pos:start="403:45" pos:end="403:45"><literal type="number" pos:start="403:45" pos:end="403:45">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="403:49" pos:end="403:52"><expr pos:start="403:49" pos:end="403:52"><name pos:start="403:49" pos:end="403:52">NULL</name></expr></argument>, <argument pos:start="403:55" pos:end="403:55"><expr pos:start="403:55" pos:end="403:55"><literal type="number" pos:start="403:55" pos:end="403:55">0</literal></expr></argument>, <argument pos:start="403:58" pos:end="403:61"><expr pos:start="403:58" pos:end="403:61"><name pos:start="403:58" pos:end="403:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="405:5" pos:end="405:42">/* TODO: Populate SPD eeprom data.  */</comment>

    <expr_stmt pos:start="407:5" pos:end="407:41"><expr pos:start="407:5" pos:end="407:40"><call pos:start="407:5" pos:end="407:40"><name pos:start="407:5" pos:end="407:21">smbus_eeprom_init</name><argument_list pos:start="407:22" pos:end="407:40">(<argument pos:start="407:23" pos:end="407:27"><expr pos:start="407:23" pos:end="407:27"><name pos:start="407:23" pos:end="407:27">smbus</name></expr></argument>, <argument pos:start="407:30" pos:end="407:30"><expr pos:start="407:30" pos:end="407:30"><literal type="number" pos:start="407:30" pos:end="407:30">8</literal></expr></argument>, <argument pos:start="407:33" pos:end="407:36"><expr pos:start="407:33" pos:end="407:36"><name pos:start="407:33" pos:end="407:36">NULL</name></expr></argument>, <argument pos:start="407:39" pos:end="407:39"><expr pos:start="407:39" pos:end="407:39"><literal type="number" pos:start="407:39" pos:end="407:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="409:5" pos:end="409:43"><expr pos:start="409:5" pos:end="409:42"><name pos:start="409:5" pos:end="409:7">pit</name> <operator pos:start="409:9" pos:end="409:9">=</operator> <call pos:start="409:11" pos:end="409:42"><name pos:start="409:11" pos:end="409:18">pit_init</name><argument_list pos:start="409:19" pos:end="409:42">(<argument pos:start="409:20" pos:end="409:26"><expr pos:start="409:20" pos:end="409:26"><name pos:start="409:20" pos:end="409:26">isa_bus</name></expr></argument>, <argument pos:start="409:29" pos:end="409:32"><expr pos:start="409:29" pos:end="409:32"><literal type="number" pos:start="409:29" pos:end="409:32">0x40</literal></expr></argument>, <argument pos:start="409:35" pos:end="409:35"><expr pos:start="409:35" pos:end="409:35"><literal type="number" pos:start="409:35" pos:end="409:35">0</literal></expr></argument>, <argument pos:start="409:38" pos:end="409:41"><expr pos:start="409:38" pos:end="409:41"><name pos:start="409:38" pos:end="409:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="411:5" pos:end="411:65"><expr pos:start="411:5" pos:end="411:64"><name pos:start="411:5" pos:end="411:16">cpu_exit_irq</name> <operator pos:start="411:18" pos:end="411:18">=</operator> <call pos:start="411:20" pos:end="411:64"><name pos:start="411:20" pos:end="411:37">qemu_allocate_irqs</name><argument_list pos:start="411:38" pos:end="411:64">(<argument pos:start="411:39" pos:end="411:54"><expr pos:start="411:39" pos:end="411:54"><name pos:start="411:39" pos:end="411:54">cpu_request_exit</name></expr></argument>, <argument pos:start="411:57" pos:end="411:60"><expr pos:start="411:57" pos:end="411:60"><name pos:start="411:57" pos:end="411:60">NULL</name></expr></argument>, <argument pos:start="411:63" pos:end="411:63"><expr pos:start="411:63" pos:end="411:63"><literal type="number" pos:start="411:63" pos:end="411:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="413:5" pos:end="413:30"><expr pos:start="413:5" pos:end="413:29"><call pos:start="413:5" pos:end="413:29"><name pos:start="413:5" pos:end="413:12">DMA_init</name><argument_list pos:start="413:13" pos:end="413:29">(<argument pos:start="413:14" pos:end="413:14"><expr pos:start="413:14" pos:end="413:14"><literal type="number" pos:start="413:14" pos:end="413:14">0</literal></expr></argument>, <argument pos:start="413:17" pos:end="413:28"><expr pos:start="413:17" pos:end="413:28"><name pos:start="413:17" pos:end="413:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="417:5" pos:end="417:19">/* Super I/O */</comment>

    <expr_stmt pos:start="419:5" pos:end="419:40"><expr pos:start="419:5" pos:end="419:39"><call pos:start="419:5" pos:end="419:39"><name pos:start="419:5" pos:end="419:21">isa_create_simple</name><argument_list pos:start="419:22" pos:end="419:39">(<argument pos:start="419:23" pos:end="419:29"><expr pos:start="419:23" pos:end="419:29"><name pos:start="419:23" pos:end="419:29">isa_bus</name></expr></argument>, <argument pos:start="419:32" pos:end="419:38"><expr pos:start="419:32" pos:end="419:38"><literal type="string" pos:start="419:32" pos:end="419:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="423:5" pos:end="423:34"><expr pos:start="423:5" pos:end="423:33"><call pos:start="423:5" pos:end="423:33"><name pos:start="423:5" pos:end="423:12">rtc_init</name><argument_list pos:start="423:13" pos:end="423:33">(<argument pos:start="423:14" pos:end="423:20"><expr pos:start="423:14" pos:end="423:20"><name pos:start="423:14" pos:end="423:20">isa_bus</name></expr></argument>, <argument pos:start="423:23" pos:end="423:26"><expr pos:start="423:23" pos:end="423:26"><literal type="number" pos:start="423:23" pos:end="423:26">2000</literal></expr></argument>, <argument pos:start="423:29" pos:end="423:32"><expr pos:start="423:29" pos:end="423:32"><name pos:start="423:29" pos:end="423:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:47"><expr pos:start="425:5" pos:end="425:46"><call pos:start="425:5" pos:end="425:46"><name pos:start="425:5" pos:end="425:19">serial_isa_init</name><argument_list pos:start="425:20" pos:end="425:46">(<argument pos:start="425:21" pos:end="425:27"><expr pos:start="425:21" pos:end="425:27"><name pos:start="425:21" pos:end="425:27">isa_bus</name></expr></argument>, <argument pos:start="425:30" pos:end="425:30"><expr pos:start="425:30" pos:end="425:30"><literal type="number" pos:start="425:30" pos:end="425:30">0</literal></expr></argument>, <argument pos:start="425:33" pos:end="425:45"><expr pos:start="425:33" pos:end="425:45"><name pos:start="425:33" pos:end="425:45"><name pos:start="425:33" pos:end="425:42">serial_hds</name><index pos:start="425:43" pos:end="425:45">[<expr pos:start="425:44" pos:end="425:44"><literal type="number" pos:start="425:44" pos:end="425:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:47"><expr pos:start="427:5" pos:end="427:46"><call pos:start="427:5" pos:end="427:46"><name pos:start="427:5" pos:end="427:19">serial_isa_init</name><argument_list pos:start="427:20" pos:end="427:46">(<argument pos:start="427:21" pos:end="427:27"><expr pos:start="427:21" pos:end="427:27"><name pos:start="427:21" pos:end="427:27">isa_bus</name></expr></argument>, <argument pos:start="427:30" pos:end="427:30"><expr pos:start="427:30" pos:end="427:30"><literal type="number" pos:start="427:30" pos:end="427:30">1</literal></expr></argument>, <argument pos:start="427:33" pos:end="427:45"><expr pos:start="427:33" pos:end="427:45"><name pos:start="427:33" pos:end="427:45"><name pos:start="427:33" pos:end="427:42">serial_hds</name><index pos:start="427:43" pos:end="427:45">[<expr pos:start="427:44" pos:end="427:44"><literal type="number" pos:start="427:44" pos:end="427:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="429:5" pos:end="431:51"><if pos:start="429:5" pos:end="431:51">if <condition pos:start="429:8" pos:end="429:24">(<expr pos:start="429:9" pos:end="429:23"><name pos:start="429:9" pos:end="429:23"><name pos:start="429:9" pos:end="429:20">parallel_hds</name><index pos:start="429:21" pos:end="429:23">[<expr pos:start="429:22" pos:end="429:22"><literal type="number" pos:start="429:22" pos:end="429:22">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="431:9" pos:end="431:51"><block_content pos:start="431:9" pos:end="431:51">

        <expr_stmt pos:start="431:9" pos:end="431:51"><expr pos:start="431:9" pos:end="431:50"><call pos:start="431:9" pos:end="431:50"><name pos:start="431:9" pos:end="431:21">parallel_init</name><argument_list pos:start="431:22" pos:end="431:50">(<argument pos:start="431:23" pos:end="431:29"><expr pos:start="431:23" pos:end="431:29"><name pos:start="431:23" pos:end="431:29">isa_bus</name></expr></argument>, <argument pos:start="431:32" pos:end="431:32"><expr pos:start="431:32" pos:end="431:32"><literal type="number" pos:start="431:32" pos:end="431:32">0</literal></expr></argument>, <argument pos:start="431:35" pos:end="431:49"><expr pos:start="431:35" pos:end="431:49"><name pos:start="431:35" pos:end="431:49"><name pos:start="431:35" pos:end="431:46">parallel_hds</name><index pos:start="431:47" pos:end="431:49">[<expr pos:start="431:48" pos:end="431:48"><literal type="number" pos:start="431:48" pos:end="431:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="433:5" pos:end="437:5">for<control pos:start="433:8" pos:end="433:31">(<init pos:start="433:9" pos:end="433:14"><expr pos:start="433:9" pos:end="433:13"><name pos:start="433:9" pos:end="433:9">i</name> <operator pos:start="433:11" pos:end="433:11">=</operator> <literal type="number" pos:start="433:13" pos:end="433:13">0</literal></expr>;</init> <condition pos:start="433:16" pos:end="433:26"><expr pos:start="433:16" pos:end="433:25"><name pos:start="433:16" pos:end="433:16">i</name> <operator pos:start="433:18" pos:end="433:18">&lt;</operator> <name pos:start="433:20" pos:end="433:25">MAX_FD</name></expr>;</condition> <incr pos:start="433:28" pos:end="433:30"><expr pos:start="433:28" pos:end="433:30"><name pos:start="433:28" pos:end="433:28">i</name><operator pos:start="433:29" pos:end="433:30">++</operator></expr></incr>)</control> <block pos:start="433:33" pos:end="437:5">{<block_content pos:start="435:9" pos:end="435:43">

        <expr_stmt pos:start="435:9" pos:end="435:43"><expr pos:start="435:9" pos:end="435:42"><name pos:start="435:9" pos:end="435:13"><name pos:start="435:9" pos:end="435:10">fd</name><index pos:start="435:11" pos:end="435:13">[<expr pos:start="435:12" pos:end="435:12"><name pos:start="435:12" pos:end="435:12">i</name></expr>]</index></name> <operator pos:start="435:15" pos:end="435:15">=</operator> <call pos:start="435:17" pos:end="435:42"><name pos:start="435:17" pos:end="435:25">drive_get</name><argument_list pos:start="435:26" pos:end="435:42">(<argument pos:start="435:27" pos:end="435:35"><expr pos:start="435:27" pos:end="435:35"><name pos:start="435:27" pos:end="435:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="435:38" pos:end="435:38"><expr pos:start="435:38" pos:end="435:38"><literal type="number" pos:start="435:38" pos:end="435:38">0</literal></expr></argument>, <argument pos:start="435:41" pos:end="435:41"><expr pos:start="435:41" pos:end="435:41"><name pos:start="435:41" pos:end="435:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="439:5" pos:end="439:33"><expr pos:start="439:5" pos:end="439:32"><call pos:start="439:5" pos:end="439:32"><name pos:start="439:5" pos:end="439:19">fdctrl_init_isa</name><argument_list pos:start="439:20" pos:end="439:32">(<argument pos:start="439:21" pos:end="439:27"><expr pos:start="439:21" pos:end="439:27"><name pos:start="439:21" pos:end="439:27">isa_bus</name></expr></argument>, <argument pos:start="439:30" pos:end="439:31"><expr pos:start="439:30" pos:end="439:31"><name pos:start="439:30" pos:end="439:31">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="443:5" pos:end="443:22">/* Network card */</comment>

    <expr_stmt pos:start="445:5" pos:end="445:26"><expr pos:start="445:5" pos:end="445:25"><call pos:start="445:5" pos:end="445:25"><name pos:start="445:5" pos:end="445:16">network_init</name><argument_list pos:start="445:17" pos:end="445:25">(<argument pos:start="445:18" pos:end="445:24"><expr pos:start="445:18" pos:end="445:24"><name pos:start="445:18" pos:end="445:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="449:5" pos:end="449:33">/* Optional PCI video card */</comment>

    <expr_stmt pos:start="451:5" pos:end="451:26"><expr pos:start="451:5" pos:end="451:25"><call pos:start="451:5" pos:end="451:25"><name pos:start="451:5" pos:end="451:16">pci_vga_init</name><argument_list pos:start="451:17" pos:end="451:25">(<argument pos:start="451:18" pos:end="451:24"><expr pos:start="451:18" pos:end="451:24"><name pos:start="451:18" pos:end="451:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
