<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18823.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">unix_listen_opts</name><parameter_list pos:start="1:21" pos:end="1:50">(<parameter pos:start="1:22" pos:end="1:35"><decl pos:start="1:22" pos:end="1:35"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:29">QemuOpts</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:35">opts</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:42">Error</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier><modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:14">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">sockaddr_un</name></name></type> <name pos:start="5:24" pos:end="5:25">un</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">path</name> <init pos:start="7:22" pos:end="7:49">= <expr pos:start="7:24" pos:end="7:49"><call pos:start="7:24" pos:end="7:49"><name pos:start="7:24" pos:end="7:35">qemu_opt_get</name><argument_list pos:start="7:36" pos:end="7:49">(<argument pos:start="7:37" pos:end="7:40"><expr pos:start="7:37" pos:end="7:40"><name pos:start="7:37" pos:end="7:40">opts</name></expr></argument>, <argument pos:start="7:43" pos:end="7:48"><expr pos:start="7:43" pos:end="7:48"><literal type="string" pos:start="7:43" pos:end="7:48">"path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">sock</name></decl>, <decl pos:start="9:15" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:16">fd</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:48"><expr pos:start="13:5" pos:end="13:47"><name pos:start="13:5" pos:end="13:8">sock</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <call pos:start="13:12" pos:end="13:47"><name pos:start="13:12" pos:end="13:22">qemu_socket</name><argument_list pos:start="13:23" pos:end="13:47">(<argument pos:start="13:24" pos:end="13:30"><expr pos:start="13:24" pos:end="13:30"><name pos:start="13:24" pos:end="13:30">PF_UNIX</name></expr></argument>, <argument pos:start="13:33" pos:end="13:43"><expr pos:start="13:33" pos:end="13:43"><name pos:start="13:33" pos:end="13:43">SOCK_STREAM</name></expr></argument>, <argument pos:start="13:46" pos:end="13:46"><expr pos:start="13:46" pos:end="13:46"><literal type="number" pos:start="13:46" pos:end="13:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:12">sock</name> <operator pos:start="15:14" pos:end="15:14">&lt;</operator> <literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>)</condition> <block pos:start="15:19" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:70"><expr pos:start="17:9" pos:end="17:69"><call pos:start="17:9" pos:end="17:69"><name pos:start="17:9" pos:end="17:24">error_setg_errno</name><argument_list pos:start="17:25" pos:end="17:69">(<argument pos:start="17:26" pos:end="17:29"><expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">errp</name></expr></argument>, <argument pos:start="17:32" pos:end="17:36"><expr pos:start="17:32" pos:end="17:36"><name pos:start="17:32" pos:end="17:36">errno</name></expr></argument>, <argument pos:start="17:39" pos:end="17:68"><expr pos:start="17:39" pos:end="17:68"><literal type="string" pos:start="17:39" pos:end="17:68">"Failed to create Unix socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><call pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:10">memset</name><argument_list pos:start="25:11" pos:end="25:30">(<argument pos:start="25:12" pos:end="25:14"><expr pos:start="25:12" pos:end="25:14"><operator pos:start="25:12" pos:end="25:12">&amp;</operator><name pos:start="25:13" pos:end="25:14">un</name></expr></argument>, <argument pos:start="25:17" pos:end="25:17"><expr pos:start="25:17" pos:end="25:17"><literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr></argument>, <argument pos:start="25:20" pos:end="25:29"><expr pos:start="25:20" pos:end="25:29"><sizeof pos:start="25:20" pos:end="25:29">sizeof<argument_list pos:start="25:26" pos:end="25:29">(<argument pos:start="25:27" pos:end="25:28"><expr pos:start="25:27" pos:end="25:28"><name pos:start="25:27" pos:end="25:28">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:28"><expr pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:6">un</name><operator pos:start="27:7" pos:end="27:7">.</operator><name pos:start="27:8" pos:end="27:17">sun_family</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:27">AF_UNIX</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="83:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:29">(<expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:12">path</name> <operator pos:start="29:14" pos:end="29:15">&amp;&amp;</operator> <call pos:start="29:17" pos:end="29:28"><name pos:start="29:17" pos:end="29:22">strlen</name><argument_list pos:start="29:23" pos:end="29:28">(<argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">path</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:31" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:63">

        <expr_stmt pos:start="31:9" pos:end="31:63"><expr pos:start="31:9" pos:end="31:62"><call pos:start="31:9" pos:end="31:62"><name pos:start="31:9" pos:end="31:16">snprintf</name><argument_list pos:start="31:17" pos:end="31:62">(<argument pos:start="31:18" pos:end="31:28"><expr pos:start="31:18" pos:end="31:28"><name pos:start="31:18" pos:end="31:28"><name pos:start="31:18" pos:end="31:19">un</name><operator pos:start="31:20" pos:end="31:20">.</operator><name pos:start="31:21" pos:end="31:28">sun_path</name></name></expr></argument>, <argument pos:start="31:31" pos:end="31:49"><expr pos:start="31:31" pos:end="31:49"><sizeof pos:start="31:31" pos:end="31:49">sizeof<argument_list pos:start="31:37" pos:end="31:49">(<argument pos:start="31:38" pos:end="31:48"><expr pos:start="31:38" pos:end="31:48"><name pos:start="31:38" pos:end="31:48"><name pos:start="31:38" pos:end="31:39">un</name><operator pos:start="31:40" pos:end="31:40">.</operator><name pos:start="31:41" pos:end="31:48">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:52" pos:end="31:55"><expr pos:start="31:52" pos:end="31:55"><literal type="string" pos:start="31:52" pos:end="31:55">"%s"</literal></expr></argument>, <argument pos:start="31:58" pos:end="31:61"><expr pos:start="31:58" pos:end="31:61"><name pos:start="31:58" pos:end="31:61">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="83:5">else <block pos:start="33:12" pos:end="83:5">{<block_content pos:start="35:9" pos:end="81:62">

        <decl_stmt pos:start="35:9" pos:end="35:46"><decl pos:start="35:9" pos:end="35:45"><type pos:start="35:9" pos:end="35:20"><specifier pos:start="35:9" pos:end="35:13">const</specifier> <name pos:start="35:15" pos:end="35:18">char</name> <modifier pos:start="35:20" pos:end="35:20">*</modifier></type><name pos:start="35:21" pos:end="35:26">tmpdir</name> <init pos:start="35:28" pos:end="35:45">= <expr pos:start="35:30" pos:end="35:45"><call pos:start="35:30" pos:end="35:45"><name pos:start="35:30" pos:end="35:35">getenv</name><argument_list pos:start="35:36" pos:end="35:45">(<argument pos:start="35:37" pos:end="35:44"><expr pos:start="35:37" pos:end="35:44"><literal type="string" pos:start="35:37" pos:end="35:44">"TMPDIR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:42"><expr pos:start="37:9" pos:end="37:41"><name pos:start="37:9" pos:end="37:14">tmpdir</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <ternary pos:start="37:18" pos:end="37:41"><condition pos:start="37:18" pos:end="37:25"><expr pos:start="37:18" pos:end="37:23"><name pos:start="37:18" pos:end="37:23">tmpdir</name></expr> ?</condition><then pos:start="37:27" pos:end="37:32"> <expr pos:start="37:27" pos:end="37:32"><name pos:start="37:27" pos:end="37:32">tmpdir</name></expr> </then><else pos:start="37:34" pos:end="37:41">: <expr pos:start="37:36" pos:end="37:41"><literal type="string" pos:start="37:36" pos:end="37:41">"/tmp"</literal></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="49:9"><if pos:start="39:9" pos:end="49:9">if <condition pos:start="39:12" pos:end="41:52">(<expr pos:start="39:13" pos:end="41:51"><call pos:start="39:13" pos:end="41:28"><name pos:start="39:13" pos:end="39:20">snprintf</name><argument_list pos:start="39:21" pos:end="41:28">(<argument pos:start="39:22" pos:end="39:32"><expr pos:start="39:22" pos:end="39:32"><name pos:start="39:22" pos:end="39:32"><name pos:start="39:22" pos:end="39:23">un</name><operator pos:start="39:24" pos:end="39:24">.</operator><name pos:start="39:25" pos:end="39:32">sun_path</name></name></expr></argument>, <argument pos:start="39:35" pos:end="39:53"><expr pos:start="39:35" pos:end="39:53"><sizeof pos:start="39:35" pos:end="39:53">sizeof<argument_list pos:start="39:41" pos:end="39:53">(<argument pos:start="39:42" pos:end="39:52"><expr pos:start="39:42" pos:end="39:52"><name pos:start="39:42" pos:end="39:52"><name pos:start="39:42" pos:end="39:43">un</name><operator pos:start="39:44" pos:end="39:44">.</operator><name pos:start="39:45" pos:end="39:52">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:56" pos:end="39:78"><expr pos:start="39:56" pos:end="39:78"><literal type="string" pos:start="39:56" pos:end="39:78">"%s/qemu-socket-XXXXXX"</literal></expr></argument>,

                     <argument pos:start="41:22" pos:end="41:27"><expr pos:start="41:22" pos:end="41:27"><name pos:start="41:22" pos:end="41:27">tmpdir</name></expr></argument>)</argument_list></call> <operator pos:start="41:30" pos:end="41:31">&gt;=</operator> <sizeof pos:start="41:33" pos:end="41:51">sizeof<argument_list pos:start="41:39" pos:end="41:51">(<argument pos:start="41:40" pos:end="41:50"><expr pos:start="41:40" pos:end="41:50"><name pos:start="41:40" pos:end="41:50"><name pos:start="41:40" pos:end="41:41">un</name><operator pos:start="41:42" pos:end="41:42">.</operator><name pos:start="41:43" pos:end="41:50">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="41:54" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:21">

            <expr_stmt pos:start="43:13" pos:end="45:83"><expr pos:start="43:13" pos:end="45:82"><call pos:start="43:13" pos:end="45:82"><name pos:start="43:13" pos:end="43:28">error_setg_errno</name><argument_list pos:start="43:29" pos:end="45:82">(<argument pos:start="43:30" pos:end="43:33"><expr pos:start="43:30" pos:end="43:33"><name pos:start="43:30" pos:end="43:33">errp</name></expr></argument>, <argument pos:start="43:36" pos:end="43:40"><expr pos:start="43:36" pos:end="43:40"><name pos:start="43:36" pos:end="43:40">errno</name></expr></argument>,

                             <argument pos:start="45:30" pos:end="45:73"><expr pos:start="45:30" pos:end="45:73"><literal type="string" pos:start="45:30" pos:end="45:73">"TMPDIR environment variable (%s) too large"</literal></expr></argument>, <argument pos:start="45:76" pos:end="45:81"><expr pos:start="45:76" pos:end="45:81"><name pos:start="45:76" pos:end="45:81">tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="47:13" pos:end="47:21">goto <name pos:start="47:18" pos:end="47:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="53:9" pos:end="65:11">/*

         * This dummy fd usage silences the mktemp() unsecure warning.

         * Using mkstemp() doesn't make things more secure here

         * though.  bind() complains about existing files, so we have

         * to unlink first and thus re-open the race window.  The

         * worst case possible is bind() failing, i.e. a DoS attack.

         */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:10">fd</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:33"><name pos:start="67:14" pos:end="67:20">mkstemp</name><argument_list pos:start="67:21" pos:end="67:33">(<argument pos:start="67:22" pos:end="67:32"><expr pos:start="67:22" pos:end="67:32"><name pos:start="67:22" pos:end="67:32"><name pos:start="67:22" pos:end="67:23">un</name><operator pos:start="67:24" pos:end="67:24">.</operator><name pos:start="67:25" pos:end="67:32">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="77:9"><if pos:start="69:9" pos:end="77:9">if <condition pos:start="69:12" pos:end="69:19">(<expr pos:start="69:13" pos:end="69:18"><name pos:start="69:13" pos:end="69:14">fd</name> <operator pos:start="69:16" pos:end="69:16">&lt;</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>)</condition> <block pos:start="69:21" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:21">

            <expr_stmt pos:start="71:13" pos:end="73:85"><expr pos:start="71:13" pos:end="73:84"><call pos:start="71:13" pos:end="73:84"><name pos:start="71:13" pos:end="71:28">error_setg_errno</name><argument_list pos:start="71:29" pos:end="73:84">(<argument pos:start="71:30" pos:end="71:33"><expr pos:start="71:30" pos:end="71:33"><name pos:start="71:30" pos:end="71:33">errp</name></expr></argument>, <argument pos:start="71:36" pos:end="71:40"><expr pos:start="71:36" pos:end="71:40"><name pos:start="71:36" pos:end="71:40">errno</name></expr></argument>,

                             <argument pos:start="73:30" pos:end="73:75"><expr pos:start="73:30" pos:end="73:75"><literal type="string" pos:start="73:30" pos:end="73:75">"Failed to make a temporary socket name in %s"</literal></expr></argument>, <argument pos:start="73:78" pos:end="73:83"><expr pos:start="73:78" pos:end="73:83"><name pos:start="73:78" pos:end="73:83">tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="75:13" pos:end="75:21">goto <name pos:start="75:18" pos:end="75:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:18"><expr pos:start="79:9" pos:end="79:17"><call pos:start="79:9" pos:end="79:17"><name pos:start="79:9" pos:end="79:13">close</name><argument_list pos:start="79:14" pos:end="79:17">(<argument pos:start="79:15" pos:end="79:16"><expr pos:start="79:15" pos:end="79:16"><name pos:start="79:15" pos:end="79:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:62"><expr pos:start="81:9" pos:end="81:61"><call pos:start="81:9" pos:end="81:61"><name pos:start="81:9" pos:end="81:20">qemu_opt_set</name><argument_list pos:start="81:21" pos:end="81:61">(<argument pos:start="81:22" pos:end="81:25"><expr pos:start="81:22" pos:end="81:25"><name pos:start="81:22" pos:end="81:25">opts</name></expr></argument>, <argument pos:start="81:28" pos:end="81:33"><expr pos:start="81:28" pos:end="81:33"><literal type="string" pos:start="81:28" pos:end="81:33">"path"</literal></expr></argument>, <argument pos:start="81:36" pos:end="81:46"><expr pos:start="81:36" pos:end="81:46"><name pos:start="81:36" pos:end="81:46"><name pos:start="81:36" pos:end="81:37">un</name><operator pos:start="81:38" pos:end="81:38">.</operator><name pos:start="81:39" pos:end="81:46">sun_path</name></name></expr></argument>, <argument pos:start="81:49" pos:end="81:60"><expr pos:start="81:49" pos:end="81:60"><operator pos:start="81:49" pos:end="81:49">&amp;</operator><name pos:start="81:50" pos:end="81:60">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="89:32">(<expr pos:start="87:9" pos:end="89:31"><operator pos:start="87:9" pos:end="87:9">(</operator><call pos:start="87:10" pos:end="87:34"><name pos:start="87:10" pos:end="87:15">access</name><argument_list pos:start="87:16" pos:end="87:34">(<argument pos:start="87:17" pos:end="87:27"><expr pos:start="87:17" pos:end="87:27"><name pos:start="87:17" pos:end="87:27"><name pos:start="87:17" pos:end="87:18">un</name><operator pos:start="87:19" pos:end="87:19">.</operator><name pos:start="87:20" pos:end="87:27">sun_path</name></name></expr></argument>, <argument pos:start="87:30" pos:end="87:33"><expr pos:start="87:30" pos:end="87:33"><name pos:start="87:30" pos:end="87:33">F_OK</name></expr></argument>)</argument_list></call> <operator pos:start="87:36" pos:end="87:37">==</operator> <literal type="number" pos:start="87:39" pos:end="87:39">0</literal><operator pos:start="87:40" pos:end="87:40">)</operator> <operator pos:start="87:42" pos:end="87:43">&amp;&amp;</operator>

        <call pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:14">unlink</name><argument_list pos:start="89:15" pos:end="89:27">(<argument pos:start="89:16" pos:end="89:26"><expr pos:start="89:16" pos:end="89:26"><name pos:start="89:16" pos:end="89:26"><name pos:start="89:16" pos:end="89:17">un</name><operator pos:start="89:18" pos:end="89:18">.</operator><name pos:start="89:19" pos:end="89:26">sun_path</name></name></expr></argument>)</argument_list></call> <operator pos:start="89:29" pos:end="89:29">&lt;</operator> <literal type="number" pos:start="89:31" pos:end="89:31">0</literal></expr>)</condition> <block pos:start="89:34" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:17">

        <expr_stmt pos:start="91:9" pos:end="93:68"><expr pos:start="91:9" pos:end="93:67"><call pos:start="91:9" pos:end="93:67"><name pos:start="91:9" pos:end="91:24">error_setg_errno</name><argument_list pos:start="91:25" pos:end="93:67">(<argument pos:start="91:26" pos:end="91:29"><expr pos:start="91:26" pos:end="91:29"><name pos:start="91:26" pos:end="91:29">errp</name></expr></argument>, <argument pos:start="91:32" pos:end="91:36"><expr pos:start="91:32" pos:end="91:36"><name pos:start="91:32" pos:end="91:36">errno</name></expr></argument>,

                         <argument pos:start="93:26" pos:end="93:53"><expr pos:start="93:26" pos:end="93:53"><literal type="string" pos:start="93:26" pos:end="93:53">"Failed to unlink socket %s"</literal></expr></argument>, <argument pos:start="93:56" pos:end="93:66"><expr pos:start="93:56" pos:end="93:66"><name pos:start="93:56" pos:end="93:66"><name pos:start="93:56" pos:end="93:57">un</name><operator pos:start="93:58" pos:end="93:58">.</operator><name pos:start="93:59" pos:end="93:66">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:17">goto <name pos:start="95:14" pos:end="95:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:59">(<expr pos:start="99:9" pos:end="99:58"><call pos:start="99:9" pos:end="99:54"><name pos:start="99:9" pos:end="99:12">bind</name><argument_list pos:start="99:13" pos:end="99:54">(<argument pos:start="99:14" pos:end="99:17"><expr pos:start="99:14" pos:end="99:17"><name pos:start="99:14" pos:end="99:17">sock</name></expr></argument>, <argument pos:start="99:20" pos:end="99:41"><expr pos:start="99:20" pos:end="99:41"><operator pos:start="99:20" pos:end="99:20">(</operator>struct <name pos:start="99:28" pos:end="99:35">sockaddr</name><operator pos:start="99:36" pos:end="99:36">*</operator><operator pos:start="99:37" pos:end="99:37">)</operator> <operator pos:start="99:39" pos:end="99:39">&amp;</operator><name pos:start="99:40" pos:end="99:41">un</name></expr></argument>, <argument pos:start="99:44" pos:end="99:53"><expr pos:start="99:44" pos:end="99:53"><sizeof pos:start="99:44" pos:end="99:53">sizeof<argument_list pos:start="99:50" pos:end="99:53">(<argument pos:start="99:51" pos:end="99:52"><expr pos:start="99:51" pos:end="99:52"><name pos:start="99:51" pos:end="99:52">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="99:56" pos:end="99:56">&lt;</operator> <literal type="number" pos:start="99:58" pos:end="99:58">0</literal></expr>)</condition> <block pos:start="99:61" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:17">

        <expr_stmt pos:start="101:9" pos:end="101:82"><expr pos:start="101:9" pos:end="101:81"><call pos:start="101:9" pos:end="101:81"><name pos:start="101:9" pos:end="101:24">error_setg_errno</name><argument_list pos:start="101:25" pos:end="101:81">(<argument pos:start="101:26" pos:end="101:29"><expr pos:start="101:26" pos:end="101:29"><name pos:start="101:26" pos:end="101:29">errp</name></expr></argument>, <argument pos:start="101:32" pos:end="101:36"><expr pos:start="101:32" pos:end="101:36"><name pos:start="101:32" pos:end="101:36">errno</name></expr></argument>, <argument pos:start="101:39" pos:end="101:67"><expr pos:start="101:39" pos:end="101:67"><literal type="string" pos:start="101:39" pos:end="101:67">"Failed to bind socket to %s"</literal></expr></argument>, <argument pos:start="101:70" pos:end="101:80"><expr pos:start="101:70" pos:end="101:80"><name pos:start="101:70" pos:end="101:80"><name pos:start="101:70" pos:end="101:71">un</name><operator pos:start="101:72" pos:end="101:72">.</operator><name pos:start="101:73" pos:end="101:80">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:28">(<expr pos:start="107:9" pos:end="107:27"><call pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:14">listen</name><argument_list pos:start="107:15" pos:end="107:23">(<argument pos:start="107:16" pos:end="107:19"><expr pos:start="107:16" pos:end="107:19"><name pos:start="107:16" pos:end="107:19">sock</name></expr></argument>, <argument pos:start="107:22" pos:end="107:22"><expr pos:start="107:22" pos:end="107:22"><literal type="number" pos:start="107:22" pos:end="107:22">1</literal></expr></argument>)</argument_list></call> <operator pos:start="107:25" pos:end="107:25">&lt;</operator> <literal type="number" pos:start="107:27" pos:end="107:27">0</literal></expr>)</condition> <block pos:start="107:30" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:17">

        <expr_stmt pos:start="109:9" pos:end="109:68"><expr pos:start="109:9" pos:end="109:67"><call pos:start="109:9" pos:end="109:67"><name pos:start="109:9" pos:end="109:24">error_setg_errno</name><argument_list pos:start="109:25" pos:end="109:67">(<argument pos:start="109:26" pos:end="109:29"><expr pos:start="109:26" pos:end="109:29"><name pos:start="109:26" pos:end="109:29">errp</name></expr></argument>, <argument pos:start="109:32" pos:end="109:36"><expr pos:start="109:32" pos:end="109:36"><name pos:start="109:32" pos:end="109:36">errno</name></expr></argument>, <argument pos:start="109:39" pos:end="109:66"><expr pos:start="109:39" pos:end="109:66"><literal type="string" pos:start="109:39" pos:end="109:66">"Failed to listen on socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:17">goto <name pos:start="111:14" pos:end="111:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="117:5" pos:end="117:16">return <expr pos:start="117:12" pos:end="117:15"><name pos:start="117:12" pos:end="117:15">sock</name></expr>;</return>



<label pos:start="121:1" pos:end="121:4"><name pos:start="121:1" pos:end="121:3">err</name>:</label>

    <expr_stmt pos:start="123:5" pos:end="123:22"><expr pos:start="123:5" pos:end="123:21"><call pos:start="123:5" pos:end="123:21"><name pos:start="123:5" pos:end="123:15">closesocket</name><argument_list pos:start="123:16" pos:end="123:21">(<argument pos:start="123:17" pos:end="123:20"><expr pos:start="123:17" pos:end="123:20"><name pos:start="123:17" pos:end="123:20">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:14">return <expr pos:start="125:12" pos:end="125:13"><operator pos:start="125:12" pos:end="125:12">-</operator><literal type="number" pos:start="125:13" pos:end="125:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
