<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2657.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">qxl_hard_reset</name><parameter_list pos:start="1:27" pos:end="1:55">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:39">PCIQXLDevice</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">d</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:54"><decl pos:start="1:45" pos:end="1:54"><type pos:start="1:45" pos:end="1:54"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:54">loadvm</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:45">

    <expr_stmt pos:start="5:5" pos:end="7:38"><expr pos:start="5:5" pos:end="7:37"><call pos:start="5:5" pos:end="7:37"><name pos:start="5:5" pos:end="5:10">dprint</name><argument_list pos:start="5:11" pos:end="7:37">(<argument pos:start="5:12" pos:end="5:12"><expr pos:start="5:12" pos:end="5:12"><name pos:start="5:12" pos:end="5:12">d</name></expr></argument>, <argument pos:start="5:15" pos:end="5:15"><expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">1</literal></expr></argument>, <argument pos:start="5:18" pos:end="5:32"><expr pos:start="5:18" pos:end="5:32"><literal type="string" pos:start="5:18" pos:end="5:32">"%s: start%s\n"</literal></expr></argument>, <argument pos:start="5:35" pos:end="5:46"><expr pos:start="5:35" pos:end="5:46"><name pos:start="5:35" pos:end="5:46">__FUNCTION__</name></expr></argument>,

           <argument pos:start="7:12" pos:end="7:36"><expr pos:start="7:12" pos:end="7:36"><ternary pos:start="7:12" pos:end="7:36"><condition pos:start="7:12" pos:end="7:19"><expr pos:start="7:12" pos:end="7:17"><name pos:start="7:12" pos:end="7:17">loadvm</name></expr> ?</condition><then pos:start="7:21" pos:end="7:31"> <expr pos:start="7:21" pos:end="7:31"><literal type="string" pos:start="7:21" pos:end="7:31">" (loadvm)"</literal></expr> </then><else pos:start="7:33" pos:end="7:36">: <expr pos:start="7:35" pos:end="7:36"><literal type="string" pos:start="7:35" pos:end="7:36">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:33"><expr pos:start="11:5" pos:end="11:32"><call pos:start="11:5" pos:end="11:32"><name pos:start="11:5" pos:end="11:30">qemu_mutex_unlock_iothread</name><argument_list pos:start="11:31" pos:end="11:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:47"><expr pos:start="13:5" pos:end="13:46"><call pos:start="13:5" pos:end="13:46"><name pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:5">d</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:10">ssd</name><operator pos:start="13:11" pos:end="13:11">.</operator><name pos:start="13:12" pos:end="13:17">worker</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:31">reset_cursor</name></name><argument_list pos:start="13:32" pos:end="13:46">(<argument pos:start="13:33" pos:end="13:45"><expr pos:start="13:33" pos:end="13:45"><name pos:start="13:33" pos:end="13:45"><name pos:start="13:33" pos:end="13:33">d</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:38">ssd</name><operator pos:start="13:39" pos:end="13:39">.</operator><name pos:start="13:40" pos:end="13:45">worker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:52"><expr pos:start="15:5" pos:end="15:51"><call pos:start="15:5" pos:end="15:51"><name pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:5">d</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:10">ssd</name><operator pos:start="15:11" pos:end="15:11">.</operator><name pos:start="15:12" pos:end="15:17">worker</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:36">reset_image_cache</name></name><argument_list pos:start="15:37" pos:end="15:51">(<argument pos:start="15:38" pos:end="15:50"><expr pos:start="15:38" pos:end="15:50"><name pos:start="15:38" pos:end="15:50"><name pos:start="15:38" pos:end="15:38">d</name><operator pos:start="15:39" pos:end="15:40">-&gt;</operator><name pos:start="15:41" pos:end="15:43">ssd</name><operator pos:start="15:44" pos:end="15:44">.</operator><name pos:start="15:45" pos:end="15:50">worker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><call pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:28">qemu_mutex_lock_iothread</name><argument_list pos:start="17:29" pos:end="17:30">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><call pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:22">qxl_reset_surfaces</name><argument_list pos:start="19:23" pos:end="19:25">(<argument pos:start="19:24" pos:end="19:24"><expr pos:start="19:24" pos:end="19:24"><name pos:start="19:24" pos:end="19:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:22">qxl_reset_memslots</name><argument_list pos:start="21:23" pos:end="21:25">(<argument pos:start="21:24" pos:end="21:24"><expr pos:start="21:24" pos:end="21:24"><name pos:start="21:24" pos:end="21:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="29:38">/* pre loadvm reset must not touch QXLRam.  This lives in

     * device memory, is migrated together with RAM and thus

     * already loaded at this point */</comment>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:15">loadvm</name></expr>)</condition> <block pos:start="31:18" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:27">

        <expr_stmt pos:start="33:9" pos:end="33:27"><expr pos:start="33:9" pos:end="33:26"><call pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:23">qxl_reset_state</name><argument_list pos:start="33:24" pos:end="33:26">(<argument pos:start="33:25" pos:end="33:25"><expr pos:start="33:25" pos:end="33:25"><name pos:start="33:25" pos:end="33:25">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><call pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:34">qemu_spice_create_host_memslot</name><argument_list pos:start="37:35" pos:end="37:43">(<argument pos:start="37:36" pos:end="37:42"><expr pos:start="37:36" pos:end="37:42"><operator pos:start="37:36" pos:end="37:36">&amp;</operator><name pos:start="37:37" pos:end="37:42"><name pos:start="37:37" pos:end="37:37">d</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:42">ssd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:22"><expr pos:start="39:5" pos:end="39:21"><call pos:start="39:5" pos:end="39:21"><name pos:start="39:5" pos:end="39:18">qxl_soft_reset</name><argument_list pos:start="39:19" pos:end="39:21">(<argument pos:start="39:20" pos:end="39:20"><expr pos:start="39:20" pos:end="39:20"><name pos:start="39:20" pos:end="39:20">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:45"><expr pos:start="43:5" pos:end="43:44"><call pos:start="43:5" pos:end="43:44"><name pos:start="43:5" pos:end="43:10">dprint</name><argument_list pos:start="43:11" pos:end="43:44">(<argument pos:start="43:12" pos:end="43:12"><expr pos:start="43:12" pos:end="43:12"><name pos:start="43:12" pos:end="43:12">d</name></expr></argument>, <argument pos:start="43:15" pos:end="43:15"><expr pos:start="43:15" pos:end="43:15"><literal type="number" pos:start="43:15" pos:end="43:15">1</literal></expr></argument>, <argument pos:start="43:18" pos:end="43:29"><expr pos:start="43:18" pos:end="43:29"><literal type="string" pos:start="43:18" pos:end="43:29">"%s: done\n"</literal></expr></argument>, <argument pos:start="43:32" pos:end="43:43"><expr pos:start="43:32" pos:end="43:43"><name pos:start="43:32" pos:end="43:43">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
