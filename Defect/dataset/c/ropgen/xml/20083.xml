<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20083.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">imx_avic_write</name><parameter_list pos:start="1:27" pos:end="3:54">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:66"><decl pos:start="1:42" pos:end="1:66"><type pos:start="1:42" pos:end="1:66"><name pos:start="1:42" pos:end="1:59">target_phys_addr_t</name></type> <name pos:start="1:61" pos:end="1:66">offset</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:38"><decl pos:start="3:27" pos:end="3:38"><type pos:start="3:27" pos:end="3:38"><name pos:start="3:27" pos:end="3:34">uint64_t</name></type> <name pos:start="3:36" pos:end="3:38">val</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:53"><decl pos:start="3:41" pos:end="3:53"><type pos:start="3:41" pos:end="3:53"><name pos:start="3:41" pos:end="3:48">unsigned</name></type> <name pos:start="3:50" pos:end="3:53">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="181:1">{<block_content pos:start="7:5" pos:end="179:23">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">IMXAVICState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:44">= <expr pos:start="7:23" pos:end="7:44"><operator pos:start="7:23" pos:end="7:23">(</operator><name pos:start="7:24" pos:end="7:35">IMXAVICState</name> <operator pos:start="7:37" pos:end="7:37">*</operator><operator pos:start="7:38" pos:end="7:38">)</operator><name pos:start="7:39" pos:end="7:44">opaque</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:44">/* Vector Registers not yet supported */</comment>

    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:43">(<expr pos:start="13:9" pos:end="13:42"><name pos:start="13:9" pos:end="13:14">offset</name> <operator pos:start="13:16" pos:end="13:17">&gt;=</operator> <literal type="number" pos:start="13:19" pos:end="13:23">0x100</literal> <operator pos:start="13:25" pos:end="13:26">&amp;&amp;</operator> <name pos:start="13:28" pos:end="13:33">offset</name> <operator pos:start="13:35" pos:end="13:36">&lt;=</operator> <literal type="number" pos:start="13:38" pos:end="13:42">0x2fc</literal></expr>)</condition> <block pos:start="13:45" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:15">

        <expr_stmt pos:start="15:9" pos:end="17:55"><expr pos:start="15:9" pos:end="17:54"><call pos:start="15:9" pos:end="17:54"><name pos:start="15:9" pos:end="15:15">IPRINTF</name><argument_list pos:start="15:16" pos:end="17:54">(<argument pos:start="15:17" pos:end="15:64"><expr pos:start="15:17" pos:end="15:64"><literal type="string" pos:start="15:17" pos:end="15:64">"imx_avic_write to vector register %d ignored\n"</literal></expr></argument>,

                <argument pos:start="17:17" pos:end="17:53"><expr pos:start="17:17" pos:end="17:53"><operator pos:start="17:17" pos:end="17:17">(</operator><name pos:start="17:18" pos:end="17:25">unsigned</name> <name pos:start="17:27" pos:end="17:29">int</name><operator pos:start="17:30" pos:end="17:30">)</operator><operator pos:start="17:31" pos:end="17:31">(</operator><operator pos:start="17:32" pos:end="17:32">(</operator><name pos:start="17:33" pos:end="17:38">offset</name> <operator pos:start="17:40" pos:end="17:40">-</operator> <literal type="number" pos:start="17:42" pos:end="17:46">0x100</literal><operator pos:start="17:47" pos:end="17:47">)</operator> <operator pos:start="17:49" pos:end="17:50">&gt;&gt;</operator> <literal type="number" pos:start="17:52" pos:end="17:52">2</literal><operator pos:start="17:53" pos:end="17:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="27:56"><expr pos:start="25:5" pos:end="27:55"><call pos:start="25:5" pos:end="27:55"><name pos:start="25:5" pos:end="25:11">DPRINTF</name><argument_list pos:start="25:12" pos:end="27:55">(<argument pos:start="25:13" pos:end="25:41"><expr pos:start="25:13" pos:end="25:41"><literal type="string" pos:start="25:13" pos:end="25:41">"imx_avic_write(0x%x) = %x\n"</literal></expr></argument>,

            <argument pos:start="27:13" pos:end="27:35"><expr pos:start="27:13" pos:end="27:35"><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:21">unsigned</name> <name pos:start="27:23" pos:end="27:25">int</name><operator pos:start="27:26" pos:end="27:26">)</operator><name pos:start="27:27" pos:end="27:32">offset</name><operator pos:start="27:33" pos:end="27:34">&gt;&gt;</operator><literal type="number" pos:start="27:35" pos:end="27:35">2</literal></expr></argument>, <argument pos:start="27:38" pos:end="27:54"><expr pos:start="27:38" pos:end="27:54"><operator pos:start="27:38" pos:end="27:38">(</operator><name pos:start="27:39" pos:end="27:46">unsigned</name> <name pos:start="27:48" pos:end="27:50">int</name><operator pos:start="27:51" pos:end="27:51">)</operator><name pos:start="27:52" pos:end="27:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="177:5">switch <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:18">offset</name> <operator pos:start="29:20" pos:end="29:21">&gt;&gt;</operator> <literal type="number" pos:start="29:23" pos:end="29:23">2</literal></expr>)</condition> <block pos:start="29:26" pos:end="177:5">{<block_content pos:start="31:5" pos:end="175:64">

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">0</literal></expr>:</case> <comment type="block" pos:start="31:13" pos:end="31:53">/* Interrupt Control Register, INTCNTL */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:70"><expr pos:start="33:9" pos:end="33:69"><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:18">intcntl</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:24">val</name> <operator pos:start="33:26" pos:end="33:26">&amp;</operator> <operator pos:start="33:28" pos:end="33:28">(</operator><name pos:start="33:29" pos:end="33:33">ABFEN</name> <operator pos:start="33:35" pos:end="33:35">|</operator> <name pos:start="33:37" pos:end="33:41">NIDIS</name> <operator pos:start="33:43" pos:end="33:43">|</operator> <name pos:start="33:45" pos:end="33:49">FIDIS</name> <operator pos:start="33:51" pos:end="33:51">|</operator> <name pos:start="33:53" pos:end="33:56">NIAD</name> <operator pos:start="33:58" pos:end="33:58">|</operator> <name pos:start="33:60" pos:end="33:63">FIAD</name> <operator pos:start="33:65" pos:end="33:65">|</operator> <name pos:start="33:67" pos:end="33:68">NM</name><operator pos:start="33:69" pos:end="33:69">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:31">(<expr pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:22">intcntl</name></name> <operator pos:start="35:24" pos:end="35:24">&amp;</operator> <name pos:start="35:26" pos:end="35:30">ABFEN</name></expr>)</condition> <block pos:start="35:33" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:42">

            <expr_stmt pos:start="37:13" pos:end="37:42"><expr pos:start="37:13" pos:end="37:41"><name pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:22">intcntl</name></name> <operator pos:start="37:24" pos:end="37:25">&amp;=</operator> <operator pos:start="37:27" pos:end="37:27">~</operator><operator pos:start="37:28" pos:end="37:28">(</operator><name pos:start="37:29" pos:end="37:31">val</name> <operator pos:start="37:33" pos:end="37:33">&amp;</operator> <name pos:start="37:35" pos:end="37:40">ABFLAG</name><operator pos:start="37:41" pos:end="37:41">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>



    <case pos:start="45:5" pos:end="45:11">case <expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">1</literal></expr>:</case> <comment type="block" pos:start="45:13" pos:end="45:56">/* Normal Interrupt Mask Register, NIMASK */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:32"><expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:18">intmask</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:24">val</name> <operator pos:start="47:26" pos:end="47:26">&amp;</operator> <literal type="number" pos:start="47:28" pos:end="47:31">0x1f</literal></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>



    <case pos:start="53:5" pos:end="53:11">case <expr pos:start="53:10" pos:end="53:10"><literal type="number" pos:start="53:10" pos:end="53:10">2</literal></expr>:</case> <comment type="block" pos:start="53:13" pos:end="53:60">/* Interrupt Enable Number Register, INTENNUM */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:42"><expr pos:start="55:9" pos:end="55:41"><call pos:start="55:9" pos:end="55:41"><name pos:start="55:9" pos:end="55:15">DPRINTF</name><argument_list pos:start="55:16" pos:end="55:41">(<argument pos:start="55:17" pos:end="55:30"><expr pos:start="55:17" pos:end="55:30"><literal type="string" pos:start="55:17" pos:end="55:30">"enable(%d)\n"</literal></expr></argument>, <argument pos:start="55:33" pos:end="55:40"><expr pos:start="55:33" pos:end="55:40"><operator pos:start="55:33" pos:end="55:33">(</operator><name pos:start="55:34" pos:end="55:36">int</name><operator pos:start="55:37" pos:end="55:37">)</operator><name pos:start="55:38" pos:end="55:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:20"><expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:11">val</name> <operator pos:start="57:13" pos:end="57:14">&amp;=</operator> <literal type="number" pos:start="57:16" pos:end="57:19">0x3f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:36"><expr pos:start="59:9" pos:end="59:35"><name pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:18">enabled</name></name> <operator pos:start="59:20" pos:end="59:21">|=</operator> <operator pos:start="59:23" pos:end="59:23">(</operator><literal type="number" pos:start="59:24" pos:end="59:27">1ULL</literal> <operator pos:start="59:29" pos:end="59:30">&lt;&lt;</operator> <name pos:start="59:32" pos:end="59:34">val</name><operator pos:start="59:35" pos:end="59:35">)</operator></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>



    <case pos:start="65:5" pos:end="65:11">case <expr pos:start="65:10" pos:end="65:10"><literal type="number" pos:start="65:10" pos:end="65:10">3</literal></expr>:</case> <comment type="block" pos:start="65:13" pos:end="65:62">/* Interrupt Disable Number Register, INTDISNUM */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><call pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:15">DPRINTF</name><argument_list pos:start="67:16" pos:end="67:42">(<argument pos:start="67:17" pos:end="67:31"><expr pos:start="67:17" pos:end="67:31"><literal type="string" pos:start="67:17" pos:end="67:31">"disable(%d)\n"</literal></expr></argument>, <argument pos:start="67:34" pos:end="67:41"><expr pos:start="67:34" pos:end="67:41"><operator pos:start="67:34" pos:end="67:34">(</operator><name pos:start="67:35" pos:end="67:37">int</name><operator pos:start="67:38" pos:end="67:38">)</operator><name pos:start="67:39" pos:end="67:41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:20"><expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:11">val</name> <operator pos:start="69:13" pos:end="69:14">&amp;=</operator> <literal type="number" pos:start="69:16" pos:end="69:19">0x3f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:37"><expr pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:18">enabled</name></name> <operator pos:start="71:20" pos:end="71:21">&amp;=</operator> <operator pos:start="71:23" pos:end="71:23">~</operator><operator pos:start="71:24" pos:end="71:24">(</operator><literal type="number" pos:start="71:25" pos:end="71:28">1ULL</literal> <operator pos:start="71:30" pos:end="71:31">&lt;&lt;</operator> <name pos:start="71:33" pos:end="71:35">val</name><operator pos:start="71:36" pos:end="71:36">)</operator></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>



    <case pos:start="77:5" pos:end="77:11">case <expr pos:start="77:10" pos:end="77:10"><literal type="number" pos:start="77:10" pos:end="77:10">4</literal></expr>:</case> <comment type="block" pos:start="77:13" pos:end="77:55">/* Interrupt Enable Number Register High */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:64"><expr pos:start="79:9" pos:end="79:63"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:18">enabled</name></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <operator pos:start="79:22" pos:end="79:22">(</operator><name pos:start="79:23" pos:end="79:32"><name pos:start="79:23" pos:end="79:23">s</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:32">enabled</name></name> <operator pos:start="79:34" pos:end="79:34">&amp;</operator> <literal type="number" pos:start="79:36" pos:end="79:48">0xffffffffULL</literal><operator pos:start="79:49" pos:end="79:49">)</operator> <operator pos:start="79:51" pos:end="79:51">|</operator> <operator pos:start="79:53" pos:end="79:53">(</operator><name pos:start="79:54" pos:end="79:56">val</name> <operator pos:start="79:58" pos:end="79:59">&lt;&lt;</operator> <literal type="number" pos:start="79:61" pos:end="79:62">32</literal><operator pos:start="79:63" pos:end="79:63">)</operator></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>



    <case pos:start="85:5" pos:end="85:11">case <expr pos:start="85:10" pos:end="85:10"><literal type="number" pos:start="85:10" pos:end="85:10">5</literal></expr>:</case> <comment type="block" pos:start="85:13" pos:end="85:54">/* Interrupt Enable Number Register Low */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:64"><expr pos:start="87:9" pos:end="87:63"><name pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:18">enabled</name></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <operator pos:start="87:22" pos:end="87:22">(</operator><name pos:start="87:23" pos:end="87:32"><name pos:start="87:23" pos:end="87:23">s</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:32">enabled</name></name> <operator pos:start="87:34" pos:end="87:34">&amp;</operator> <literal type="number" pos:start="87:36" pos:end="87:56">0xffffffff00000000ULL</literal><operator pos:start="87:57" pos:end="87:57">)</operator> <operator pos:start="87:59" pos:end="87:59">|</operator> <name pos:start="87:61" pos:end="87:63">val</name></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>



    <case pos:start="93:5" pos:end="93:11">case <expr pos:start="93:10" pos:end="93:10"><literal type="number" pos:start="93:10" pos:end="93:10">6</literal></expr>:</case> <comment type="block" pos:start="93:13" pos:end="93:46">/* Interrupt Type Register High */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:62"><expr pos:start="95:9" pos:end="95:61"><name pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:17">is_fiq</name></name> <operator pos:start="95:19" pos:end="95:19">=</operator> <operator pos:start="95:21" pos:end="95:21">(</operator><name pos:start="95:22" pos:end="95:30"><name pos:start="95:22" pos:end="95:22">s</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:30">is_fiq</name></name> <operator pos:start="95:32" pos:end="95:32">&amp;</operator> <literal type="number" pos:start="95:34" pos:end="95:46">0xffffffffULL</literal><operator pos:start="95:47" pos:end="95:47">)</operator> <operator pos:start="95:49" pos:end="95:49">|</operator> <operator pos:start="95:51" pos:end="95:51">(</operator><name pos:start="95:52" pos:end="95:54">val</name> <operator pos:start="95:56" pos:end="95:57">&lt;&lt;</operator> <literal type="number" pos:start="95:59" pos:end="95:60">32</literal><operator pos:start="95:61" pos:end="95:61">)</operator></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>



    <case pos:start="101:5" pos:end="101:11">case <expr pos:start="101:10" pos:end="101:10"><literal type="number" pos:start="101:10" pos:end="101:10">7</literal></expr>:</case> <comment type="block" pos:start="101:13" pos:end="101:45">/* Interrupt Type Register Low */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:62"><expr pos:start="103:9" pos:end="103:61"><name pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:17">is_fiq</name></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <operator pos:start="103:21" pos:end="103:21">(</operator><name pos:start="103:22" pos:end="103:30"><name pos:start="103:22" pos:end="103:22">s</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:30">is_fiq</name></name> <operator pos:start="103:32" pos:end="103:32">&amp;</operator> <literal type="number" pos:start="103:34" pos:end="103:54">0xffffffff00000000ULL</literal><operator pos:start="103:55" pos:end="103:55">)</operator> <operator pos:start="103:57" pos:end="103:57">|</operator> <name pos:start="103:59" pos:end="103:61">val</name></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>



    <case pos:start="109:5" pos:end="109:11">case <expr pos:start="109:10" pos:end="109:10"><literal type="number" pos:start="109:10" pos:end="109:10">8</literal></expr>:</case> <comment type="block" pos:start="109:13" pos:end="109:54">/* Normal Interrupt Priority Register 7 */</comment>

    <case pos:start="111:5" pos:end="111:11">case <expr pos:start="111:10" pos:end="111:10"><literal type="number" pos:start="111:10" pos:end="111:10">9</literal></expr>:</case> <comment type="block" pos:start="111:13" pos:end="111:54">/* Normal Interrupt Priority Register 6 */</comment>

    <case pos:start="113:5" pos:end="113:12">case <expr pos:start="113:10" pos:end="113:11"><literal type="number" pos:start="113:10" pos:end="113:11">10</literal></expr>:</case><comment type="block" pos:start="113:13" pos:end="113:54">/* Normal Interrupt Priority Register 5 */</comment>

    <case pos:start="115:5" pos:end="115:12">case <expr pos:start="115:10" pos:end="115:11"><literal type="number" pos:start="115:10" pos:end="115:11">11</literal></expr>:</case><comment type="block" pos:start="115:13" pos:end="115:54">/* Normal Interrupt Priority Register 4 */</comment>

    <case pos:start="117:5" pos:end="117:12">case <expr pos:start="117:10" pos:end="117:11"><literal type="number" pos:start="117:10" pos:end="117:11">12</literal></expr>:</case><comment type="block" pos:start="117:13" pos:end="117:54">/* Normal Interrupt Priority Register 3 */</comment>

    <case pos:start="119:5" pos:end="119:12">case <expr pos:start="119:10" pos:end="119:11"><literal type="number" pos:start="119:10" pos:end="119:11">13</literal></expr>:</case><comment type="block" pos:start="119:13" pos:end="119:54">/* Normal Interrupt Priority Register 2 */</comment>

    <case pos:start="121:5" pos:end="121:12">case <expr pos:start="121:10" pos:end="121:11"><literal type="number" pos:start="121:10" pos:end="121:11">14</literal></expr>:</case><comment type="block" pos:start="121:13" pos:end="121:54">/* Normal Interrupt Priority Register 1 */</comment>

    <case pos:start="123:5" pos:end="123:12">case <expr pos:start="123:10" pos:end="123:11"><literal type="number" pos:start="123:10" pos:end="123:11">15</literal></expr>:</case><comment type="block" pos:start="123:13" pos:end="123:54">/* Normal Interrupt Priority Register 0 */</comment>

        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:31"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:15">prio</name><index pos:start="125:16" pos:end="125:31">[<expr pos:start="125:17" pos:end="125:30"><literal type="number" pos:start="125:17" pos:end="125:18">15</literal><operator pos:start="125:19" pos:end="125:19">-</operator><operator pos:start="125:20" pos:end="125:20">(</operator><name pos:start="125:21" pos:end="125:26">offset</name><operator pos:start="125:27" pos:end="125:28">&gt;&gt;</operator><literal type="number" pos:start="125:29" pos:end="125:29">2</literal><operator pos:start="125:30" pos:end="125:30">)</operator></expr>]</index></name> <operator pos:start="125:33" pos:end="125:33">=</operator> <name pos:start="125:35" pos:end="125:37">val</name></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>



        <comment type="block" pos:start="131:9" pos:end="131:49">/* Read-only registers, writes ignored */</comment>

    <case pos:start="133:5" pos:end="133:12">case <expr pos:start="133:10" pos:end="133:11"><literal type="number" pos:start="133:10" pos:end="133:11">16</literal></expr>:</case><comment type="block" pos:start="133:13" pos:end="133:61">/* Normal Interrupt Vector and Status register */</comment>

    <case pos:start="135:5" pos:end="135:12">case <expr pos:start="135:10" pos:end="135:11"><literal type="number" pos:start="135:10" pos:end="135:11">17</literal></expr>:</case><comment type="block" pos:start="135:13" pos:end="135:59">/* Fast Interrupt vector and status register */</comment>

    <case pos:start="137:5" pos:end="137:12">case <expr pos:start="137:10" pos:end="137:11"><literal type="number" pos:start="137:10" pos:end="137:11">18</literal></expr>:</case><comment type="block" pos:start="137:13" pos:end="137:48">/* Interrupt source register high */</comment>

    <case pos:start="139:5" pos:end="139:12">case <expr pos:start="139:10" pos:end="139:11"><literal type="number" pos:start="139:10" pos:end="139:11">19</literal></expr>:</case><comment type="block" pos:start="139:13" pos:end="139:47">/* Interrupt source register low */</comment>

        <return pos:start="141:9" pos:end="141:15">return;</return>



    <case pos:start="145:5" pos:end="145:12">case <expr pos:start="145:10" pos:end="145:11"><literal type="number" pos:start="145:10" pos:end="145:11">20</literal></expr>:</case><comment type="block" pos:start="145:13" pos:end="145:47">/* Interrupt Force Register high */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:64"><expr pos:start="147:9" pos:end="147:63"><name pos:start="147:9" pos:end="147:18"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:18">pending</name></name> <operator pos:start="147:20" pos:end="147:20">=</operator> <operator pos:start="147:22" pos:end="147:22">(</operator><name pos:start="147:23" pos:end="147:32"><name pos:start="147:23" pos:end="147:23">s</name><operator pos:start="147:24" pos:end="147:25">-&gt;</operator><name pos:start="147:26" pos:end="147:32">pending</name></name> <operator pos:start="147:34" pos:end="147:34">&amp;</operator> <literal type="number" pos:start="147:36" pos:end="147:48">0xffffffffULL</literal><operator pos:start="147:49" pos:end="147:49">)</operator> <operator pos:start="147:51" pos:end="147:51">|</operator> <operator pos:start="147:53" pos:end="147:53">(</operator><name pos:start="147:54" pos:end="147:56">val</name> <operator pos:start="147:58" pos:end="147:59">&lt;&lt;</operator> <literal type="number" pos:start="147:61" pos:end="147:62">32</literal><operator pos:start="147:63" pos:end="147:63">)</operator></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>



    <case pos:start="153:5" pos:end="153:12">case <expr pos:start="153:10" pos:end="153:11"><literal type="number" pos:start="153:10" pos:end="153:11">21</literal></expr>:</case><comment type="block" pos:start="153:13" pos:end="153:46">/* Interrupt Force Register low */</comment>

        <expr_stmt pos:start="155:9" pos:end="155:64"><expr pos:start="155:9" pos:end="155:63"><name pos:start="155:9" pos:end="155:18"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:18">pending</name></name> <operator pos:start="155:20" pos:end="155:20">=</operator> <operator pos:start="155:22" pos:end="155:22">(</operator><name pos:start="155:23" pos:end="155:32"><name pos:start="155:23" pos:end="155:23">s</name><operator pos:start="155:24" pos:end="155:25">-&gt;</operator><name pos:start="155:26" pos:end="155:32">pending</name></name> <operator pos:start="155:34" pos:end="155:34">&amp;</operator> <literal type="number" pos:start="155:36" pos:end="155:56">0xffffffff00000000ULL</literal><operator pos:start="155:57" pos:end="155:57">)</operator> <operator pos:start="155:59" pos:end="155:59">|</operator> <name pos:start="155:61" pos:end="155:63">val</name></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>



    <case pos:start="161:5" pos:end="161:12">case <expr pos:start="161:10" pos:end="161:11"><literal type="number" pos:start="161:10" pos:end="161:11">22</literal></expr>:</case><comment type="block" pos:start="161:13" pos:end="161:56">/* Normal Interrupt Pending Register High */</comment>

    <case pos:start="163:5" pos:end="163:12">case <expr pos:start="163:10" pos:end="163:11"><literal type="number" pos:start="163:10" pos:end="163:11">23</literal></expr>:</case><comment type="block" pos:start="163:13" pos:end="163:55">/* Normal Interrupt Pending Register Low */</comment>

    <case pos:start="165:5" pos:end="165:12">case <expr pos:start="165:10" pos:end="165:11"><literal type="number" pos:start="165:10" pos:end="165:11">24</literal></expr>:</case> <comment type="block" pos:start="165:14" pos:end="165:56">/* Fast Interrupt Pending Register High  */</comment>

    <case pos:start="167:5" pos:end="167:12">case <expr pos:start="167:10" pos:end="167:11"><literal type="number" pos:start="167:10" pos:end="167:11">25</literal></expr>:</case> <comment type="block" pos:start="167:14" pos:end="167:55">/* Fast Interrupt Pending Register Low  */</comment>

        <return pos:start="169:9" pos:end="169:15">return;</return>



    <default pos:start="173:5" pos:end="173:12">default:</default>

        <expr_stmt pos:start="175:9" pos:end="175:64"><expr pos:start="175:9" pos:end="175:63"><call pos:start="175:9" pos:end="175:63"><name pos:start="175:9" pos:end="175:15">IPRINTF</name><argument_list pos:start="175:16" pos:end="175:63">(<argument pos:start="175:17" pos:end="175:49"><expr pos:start="175:17" pos:end="175:49"><literal type="string" pos:start="175:17" pos:end="175:49">"imx_avic_write: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="175:52" pos:end="175:62"><expr pos:start="175:52" pos:end="175:62"><operator pos:start="175:52" pos:end="175:52">(</operator><name pos:start="175:53" pos:end="175:55">int</name><operator pos:start="175:56" pos:end="175:56">)</operator><name pos:start="175:57" pos:end="175:62">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <expr_stmt pos:start="179:5" pos:end="179:23"><expr pos:start="179:5" pos:end="179:22"><call pos:start="179:5" pos:end="179:22"><name pos:start="179:5" pos:end="179:19">imx_avic_update</name><argument_list pos:start="179:20" pos:end="179:22">(<argument pos:start="179:21" pos:end="179:21"><expr pos:start="179:21" pos:end="179:21"><name pos:start="179:21" pos:end="179:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
