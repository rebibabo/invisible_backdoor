<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20921.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">bamboo_load_device_tree</name><parameter_list pos:start="1:35" pos:end="9:64">(<parameter pos:start="1:36" pos:end="1:46"><decl pos:start="1:36" pos:end="1:46"><type pos:start="1:36" pos:end="1:46"><name pos:start="1:36" pos:end="1:41">hwaddr</name></type> <name pos:start="1:43" pos:end="1:46">addr</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:53"><decl pos:start="3:38" pos:end="3:53"><type pos:start="3:38" pos:end="3:53"><name pos:start="3:38" pos:end="3:45">uint32_t</name></type> <name pos:start="3:47" pos:end="3:53">ramsize</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:55"><decl pos:start="5:38" pos:end="5:55"><type pos:start="5:38" pos:end="5:55"><name pos:start="5:38" pos:end="5:43">hwaddr</name></type> <name pos:start="5:45" pos:end="5:55">initrd_base</name></decl></parameter>,

                                     <parameter pos:start="7:38" pos:end="7:55"><decl pos:start="7:38" pos:end="7:55"><type pos:start="7:38" pos:end="7:55"><name pos:start="7:38" pos:end="7:43">hwaddr</name></type> <name pos:start="7:45" pos:end="7:55">initrd_size</name></decl></parameter>,

                                     <parameter pos:start="9:38" pos:end="9:63"><decl pos:start="9:38" pos:end="9:63"><type pos:start="9:38" pos:end="9:63"><specifier pos:start="9:38" pos:end="9:42">const</specifier> <name pos:start="9:44" pos:end="9:47">char</name> <modifier pos:start="9:49" pos:end="9:49">*</modifier></type><name pos:start="9:50" pos:end="9:63">kernel_cmdline</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="131:1">{<block_content pos:start="13:5" pos:end="129:15">

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:16">= <expr pos:start="13:15" pos:end="13:16"><operator pos:start="13:15" pos:end="13:15">-</operator><literal type="number" pos:start="13:16" pos:end="13:16">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:65"><decl pos:start="15:5" pos:end="15:64"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:31"><name pos:start="15:14" pos:end="15:29">mem_reg_property</name><index pos:start="15:30" pos:end="15:31">[]</index></name> <init pos:start="15:33" pos:end="15:64">= <expr pos:start="15:35" pos:end="15:64"><block pos:start="15:35" pos:end="15:64">{ <expr pos:start="15:37" pos:end="15:37"><literal type="number" pos:start="15:37" pos:end="15:37">0</literal></expr>, <expr pos:start="15:40" pos:end="15:40"><literal type="number" pos:start="15:40" pos:end="15:40">0</literal></expr>, <macro pos:start="15:43" pos:end="15:62"><name pos:start="15:43" pos:end="15:53">cpu_to_be32</name><argument_list pos:start="15:54" pos:end="15:62">(<argument pos:start="15:55" pos:end="15:61">ramsize</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:16">fdt_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">void</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:13">fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:33"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:20">tb_freq</name> <init pos:start="23:22" pos:end="23:32">= <expr pos:start="23:24" pos:end="23:32"><literal type="number" pos:start="23:24" pos:end="23:32">400000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:36"><decl pos:start="25:5" pos:end="25:35"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:23">clock_freq</name> <init pos:start="25:25" pos:end="25:35">= <expr pos:start="25:27" pos:end="25:35"><literal type="number" pos:start="25:27" pos:end="25:35">400000000</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:76"><expr pos:start="29:5" pos:end="29:75"><name pos:start="29:5" pos:end="29:12">filename</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:75"><name pos:start="29:16" pos:end="29:29">qemu_find_file</name><argument_list pos:start="29:30" pos:end="29:75">(<argument pos:start="29:31" pos:end="29:49"><expr pos:start="29:31" pos:end="29:49"><name pos:start="29:31" pos:end="29:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="29:52" pos:end="29:74"><expr pos:start="29:52" pos:end="29:74"><name pos:start="29:52" pos:end="29:74">BINARY_DEVICE_TREE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:17">filename</name></expr>)</condition> <block pos:start="31:20" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:17">

        <goto pos:start="33:9" pos:end="33:17">goto <name pos:start="33:14" pos:end="33:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:7">fdt</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:47"><name pos:start="37:11" pos:end="37:26">load_device_tree</name><argument_list pos:start="37:27" pos:end="37:47">(<argument pos:start="37:28" pos:end="37:35"><expr pos:start="37:28" pos:end="37:35"><name pos:start="37:28" pos:end="37:35">filename</name></expr></argument>, <argument pos:start="37:38" pos:end="37:46"><expr pos:start="37:38" pos:end="37:46"><operator pos:start="37:38" pos:end="37:38">&amp;</operator><name pos:start="37:39" pos:end="37:46">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><call pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:10">g_free</name><argument_list pos:start="39:11" pos:end="39:20">(<argument pos:start="39:12" pos:end="39:19"><expr pos:start="39:12" pos:end="39:19"><name pos:start="39:12" pos:end="39:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:20">(<expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:11">fdt</name> <operator pos:start="41:13" pos:end="41:14">==</operator> <name pos:start="41:16" pos:end="41:19">NULL</name></expr>)</condition> <block pos:start="41:22" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:17">

        <goto pos:start="43:9" pos:end="43:17">goto <name pos:start="43:14" pos:end="43:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:43">/* Manipulate device tree in memory. */</comment>



    <expr_stmt pos:start="53:5" pos:end="55:57"><expr pos:start="53:5" pos:end="55:56"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="55:56"><name pos:start="53:11" pos:end="53:30">qemu_devtree_setprop</name><argument_list pos:start="53:31" pos:end="55:56">(<argument pos:start="53:32" pos:end="53:34"><expr pos:start="53:32" pos:end="53:34"><name pos:start="53:32" pos:end="53:34">fdt</name></expr></argument>, <argument pos:start="53:37" pos:end="53:45"><expr pos:start="53:37" pos:end="53:45"><literal type="string" pos:start="53:37" pos:end="53:45">"/memory"</literal></expr></argument>, <argument pos:start="53:48" pos:end="53:52"><expr pos:start="53:48" pos:end="53:52"><literal type="string" pos:start="53:48" pos:end="53:52">"reg"</literal></expr></argument>, <argument pos:start="53:55" pos:end="53:70"><expr pos:start="53:55" pos:end="53:70"><name pos:start="53:55" pos:end="53:70">mem_reg_property</name></expr></argument>,

                               <argument pos:start="55:32" pos:end="55:55"><expr pos:start="55:32" pos:end="55:55"><sizeof pos:start="55:32" pos:end="55:55">sizeof<argument_list pos:start="55:38" pos:end="55:55">(<argument pos:start="55:39" pos:end="55:54"><expr pos:start="55:39" pos:end="55:54"><name pos:start="55:39" pos:end="55:54">mem_reg_property</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="59:54"><if pos:start="57:5" pos:end="59:54">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:54"><block_content pos:start="59:9" pos:end="59:54">

        <expr_stmt pos:start="59:9" pos:end="59:54"><expr pos:start="59:9" pos:end="59:53"><call pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:15">fprintf</name><argument_list pos:start="59:16" pos:end="59:53">(<argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">stderr</name></expr></argument>, <argument pos:start="59:25" pos:end="59:52"><expr pos:start="59:25" pos:end="59:52"><literal type="string" pos:start="59:25" pos:end="59:52">"couldn't set /memory/reg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="65:49"><expr pos:start="63:5" pos:end="65:48"><name pos:start="63:5" pos:end="63:7">ret</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="65:48"><name pos:start="63:11" pos:end="63:35">qemu_devtree_setprop_cell</name><argument_list pos:start="63:36" pos:end="65:48">(<argument pos:start="63:37" pos:end="63:39"><expr pos:start="63:37" pos:end="63:39"><name pos:start="63:37" pos:end="63:39">fdt</name></expr></argument>, <argument pos:start="63:42" pos:end="63:50"><expr pos:start="63:42" pos:end="63:50"><literal type="string" pos:start="63:42" pos:end="63:50">"/chosen"</literal></expr></argument>, <argument pos:start="63:53" pos:end="63:72"><expr pos:start="63:53" pos:end="63:72"><literal type="string" pos:start="63:53" pos:end="63:72">"linux,initrd-start"</literal></expr></argument>,

                                    <argument pos:start="65:37" pos:end="65:47"><expr pos:start="65:37" pos:end="65:47"><name pos:start="65:37" pos:end="65:47">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="69:69"><if pos:start="67:5" pos:end="69:69">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">&lt;</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:69"><block_content pos:start="69:9" pos:end="69:69">

        <expr_stmt pos:start="69:9" pos:end="69:69"><expr pos:start="69:9" pos:end="69:68"><call pos:start="69:9" pos:end="69:68"><name pos:start="69:9" pos:end="69:15">fprintf</name><argument_list pos:start="69:16" pos:end="69:68">(<argument pos:start="69:17" pos:end="69:22"><expr pos:start="69:17" pos:end="69:22"><name pos:start="69:17" pos:end="69:22">stderr</name></expr></argument>, <argument pos:start="69:25" pos:end="69:67"><expr pos:start="69:25" pos:end="69:67"><literal type="string" pos:start="69:25" pos:end="69:67">"couldn't set /chosen/linux,initrd-start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="75:65"><expr pos:start="73:5" pos:end="75:64"><name pos:start="73:5" pos:end="73:7">ret</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="75:64"><name pos:start="73:11" pos:end="73:35">qemu_devtree_setprop_cell</name><argument_list pos:start="73:36" pos:end="75:64">(<argument pos:start="73:37" pos:end="73:39"><expr pos:start="73:37" pos:end="73:39"><name pos:start="73:37" pos:end="73:39">fdt</name></expr></argument>, <argument pos:start="73:42" pos:end="73:50"><expr pos:start="73:42" pos:end="73:50"><literal type="string" pos:start="73:42" pos:end="73:50">"/chosen"</literal></expr></argument>, <argument pos:start="73:53" pos:end="73:70"><expr pos:start="73:53" pos:end="73:70"><literal type="string" pos:start="73:53" pos:end="73:70">"linux,initrd-end"</literal></expr></argument>,

                                    <argument pos:start="75:37" pos:end="75:63"><expr pos:start="75:37" pos:end="75:63"><operator pos:start="75:37" pos:end="75:37">(</operator><name pos:start="75:38" pos:end="75:48">initrd_base</name> <operator pos:start="75:50" pos:end="75:50">+</operator> <name pos:start="75:52" pos:end="75:62">initrd_size</name><operator pos:start="75:63" pos:end="75:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="79:67"><if pos:start="77:5" pos:end="79:67">if <condition pos:start="77:8" pos:end="77:16">(<expr pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">&lt;</operator> <literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:67"><block_content pos:start="79:9" pos:end="79:67">

        <expr_stmt pos:start="79:9" pos:end="79:67"><expr pos:start="79:9" pos:end="79:66"><call pos:start="79:9" pos:end="79:66"><name pos:start="79:9" pos:end="79:15">fprintf</name><argument_list pos:start="79:16" pos:end="79:66">(<argument pos:start="79:17" pos:end="79:22"><expr pos:start="79:17" pos:end="79:22"><name pos:start="79:17" pos:end="79:22">stderr</name></expr></argument>, <argument pos:start="79:25" pos:end="79:65"><expr pos:start="79:25" pos:end="79:65"><literal type="string" pos:start="79:25" pos:end="79:65">"couldn't set /chosen/linux,initrd-end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="85:54"><expr pos:start="83:5" pos:end="85:53"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="85:53"><name pos:start="83:11" pos:end="83:37">qemu_devtree_setprop_string</name><argument_list pos:start="83:38" pos:end="85:53">(<argument pos:start="83:39" pos:end="83:41"><expr pos:start="83:39" pos:end="83:41"><name pos:start="83:39" pos:end="83:41">fdt</name></expr></argument>, <argument pos:start="83:44" pos:end="83:52"><expr pos:start="83:44" pos:end="83:52"><literal type="string" pos:start="83:44" pos:end="83:52">"/chosen"</literal></expr></argument>, <argument pos:start="83:55" pos:end="83:64"><expr pos:start="83:55" pos:end="83:64"><literal type="string" pos:start="83:55" pos:end="83:64">"bootargs"</literal></expr></argument>,

                                      <argument pos:start="85:39" pos:end="85:52"><expr pos:start="85:39" pos:end="85:52"><name pos:start="85:39" pos:end="85:52">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="89:59"><if pos:start="87:5" pos:end="89:59">if <condition pos:start="87:8" pos:end="87:16">(<expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">&lt;</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:59"><block_content pos:start="89:9" pos:end="89:59">

        <expr_stmt pos:start="89:9" pos:end="89:59"><expr pos:start="89:9" pos:end="89:58"><call pos:start="89:9" pos:end="89:58"><name pos:start="89:9" pos:end="89:15">fprintf</name><argument_list pos:start="89:16" pos:end="89:58">(<argument pos:start="89:17" pos:end="89:22"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">stderr</name></expr></argument>, <argument pos:start="89:25" pos:end="89:57"><expr pos:start="89:25" pos:end="89:57"><literal type="string" pos:start="89:25" pos:end="89:57">"couldn't set /chosen/bootargs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="97:34">/* Copy data from the host device tree into the guest. Since the guest can

     * directly access the timebase without host involvement, we must expose

     * the correct frequencies. */</comment>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:22">(<expr pos:start="99:9" pos:end="99:21"><call pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:19">kvm_enabled</name><argument_list pos:start="99:20" pos:end="99:21">()</argument_list></call></expr>)</condition> <block pos:start="99:24" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:44">

        <expr_stmt pos:start="101:9" pos:end="101:38"><expr pos:start="101:9" pos:end="101:37"><name pos:start="101:9" pos:end="101:15">tb_freq</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:37"><name pos:start="101:19" pos:end="101:35">kvmppc_get_tbfreq</name><argument_list pos:start="101:36" pos:end="101:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:44"><expr pos:start="103:9" pos:end="103:43"><name pos:start="103:9" pos:end="103:18">clock_freq</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <call pos:start="103:22" pos:end="103:43"><name pos:start="103:22" pos:end="103:41">kvmppc_get_clockfreq</name><argument_list pos:start="103:42" pos:end="103:43">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="111:42"><expr pos:start="109:5" pos:end="111:41"><call pos:start="109:5" pos:end="111:41"><name pos:start="109:5" pos:end="109:29">qemu_devtree_setprop_cell</name><argument_list pos:start="109:30" pos:end="111:41">(<argument pos:start="109:31" pos:end="109:33"><expr pos:start="109:31" pos:end="109:33"><name pos:start="109:31" pos:end="109:33">fdt</name></expr></argument>, <argument pos:start="109:36" pos:end="109:48"><expr pos:start="109:36" pos:end="109:48"><literal type="string" pos:start="109:36" pos:end="109:48">"/cpus/cpu@0"</literal></expr></argument>, <argument pos:start="109:51" pos:end="109:67"><expr pos:start="109:51" pos:end="109:67"><literal type="string" pos:start="109:51" pos:end="109:67">"clock-frequency"</literal></expr></argument>,

                              <argument pos:start="111:31" pos:end="111:40"><expr pos:start="111:31" pos:end="111:40"><name pos:start="111:31" pos:end="111:40">clock_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="115:39"><expr pos:start="113:5" pos:end="115:38"><call pos:start="113:5" pos:end="115:38"><name pos:start="113:5" pos:end="113:29">qemu_devtree_setprop_cell</name><argument_list pos:start="113:30" pos:end="115:38">(<argument pos:start="113:31" pos:end="113:33"><expr pos:start="113:31" pos:end="113:33"><name pos:start="113:31" pos:end="113:33">fdt</name></expr></argument>, <argument pos:start="113:36" pos:end="113:48"><expr pos:start="113:36" pos:end="113:48"><literal type="string" pos:start="113:36" pos:end="113:48">"/cpus/cpu@0"</literal></expr></argument>, <argument pos:start="113:51" pos:end="113:70"><expr pos:start="113:51" pos:end="113:70"><literal type="string" pos:start="113:51" pos:end="113:70">"timebase-frequency"</literal></expr></argument>,

                              <argument pos:start="115:31" pos:end="115:37"><expr pos:start="115:31" pos:end="115:37"><name pos:start="115:31" pos:end="115:37">tb_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:75"><expr pos:start="119:5" pos:end="119:74"><name pos:start="119:5" pos:end="119:7">ret</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="119:74"><name pos:start="119:11" pos:end="119:28">rom_add_blob_fixed</name><argument_list pos:start="119:29" pos:end="119:74">(<argument pos:start="119:30" pos:end="119:52"><expr pos:start="119:30" pos:end="119:52"><name pos:start="119:30" pos:end="119:52">BINARY_DEVICE_TREE_FILE</name></expr></argument>, <argument pos:start="119:55" pos:end="119:57"><expr pos:start="119:55" pos:end="119:57"><name pos:start="119:55" pos:end="119:57">fdt</name></expr></argument>, <argument pos:start="119:60" pos:end="119:67"><expr pos:start="119:60" pos:end="119:67"><name pos:start="119:60" pos:end="119:67">fdt_size</name></expr></argument>, <argument pos:start="119:70" pos:end="119:73"><expr pos:start="119:70" pos:end="119:73"><name pos:start="119:70" pos:end="119:73">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:16"><expr pos:start="121:5" pos:end="121:15"><call pos:start="121:5" pos:end="121:15"><name pos:start="121:5" pos:end="121:10">g_free</name><argument_list pos:start="121:11" pos:end="121:15">(<argument pos:start="121:12" pos:end="121:14"><expr pos:start="121:12" pos:end="121:14"><name pos:start="121:12" pos:end="121:14">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="125:1" pos:end="125:4"><name pos:start="125:1" pos:end="125:3">out</name>:</label>



    <return pos:start="129:5" pos:end="129:15">return <expr pos:start="129:12" pos:end="129:14"><name pos:start="129:12" pos:end="129:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
