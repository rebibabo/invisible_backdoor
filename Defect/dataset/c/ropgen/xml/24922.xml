<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24922.c" pos:tabs="8"><function pos:start="1:1" pos:end="281:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">vhdx_create</name><parameter_list pos:start="1:23" pos:end="3:36">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:43">filename</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:73"><decl pos:start="1:46" pos:end="1:73"><type pos:start="1:46" pos:end="1:73"><name pos:start="1:46" pos:end="1:64">QEMUOptionParameter</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:73">options</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:28">Error</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier><modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:35">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="281:1">{<block_content pos:start="7:5" pos:end="279:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">image_size</name> <init pos:start="9:25" pos:end="9:44">= <expr pos:start="9:27" pos:end="9:44"><operator pos:start="9:27" pos:end="9:27">(</operator><name pos:start="9:28" pos:end="9:35">uint64_t</name><operator pos:start="9:36" pos:end="9:36">)</operator> <literal type="number" pos:start="9:38" pos:end="9:38">2</literal> <operator pos:start="9:40" pos:end="9:40">*</operator> <name pos:start="9:42" pos:end="9:44">GiB</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">log_size</name>   <init pos:start="11:25" pos:end="11:33">= <expr pos:start="11:27" pos:end="11:33"><literal type="number" pos:start="11:27" pos:end="11:27">1</literal> <operator pos:start="11:29" pos:end="11:29">*</operator> <name pos:start="11:31" pos:end="11:33">MiB</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:23">block_size</name> <init pos:start="13:25" pos:end="13:27">= <expr pos:start="13:27" pos:end="13:27"><literal type="number" pos:start="13:27" pos:end="13:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">signature</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:28">metadata_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:24">use_zero_blocks</name> <init pos:start="19:26" pos:end="19:32">= <expr pos:start="19:28" pos:end="19:32"><name pos:start="19:28" pos:end="19:32">false</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:13">gunichar2</name> <modifier pos:start="23:15" pos:end="23:15">*</modifier></type><name pos:start="23:16" pos:end="23:22">creator</name> <init pos:start="23:24" pos:end="23:29">= <expr pos:start="23:26" pos:end="23:29"><name pos:start="23:26" pos:end="23:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:9"><name pos:start="25:5" pos:end="25:9">glong</name></type> <name pos:start="25:11" pos:end="25:23">creator_items</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:20">BlockDriverState</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:20">type</name> <init pos:start="29:22" pos:end="29:27">= <expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:29"><decl pos:start="31:5" pos:end="31:28"><type pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:17">VHDXImageType</name></type> <name pos:start="31:19" pos:end="31:28">image_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:28"><decl pos:start="33:5" pos:end="33:27"><type pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:9">Error</name> <modifier pos:start="33:11" pos:end="33:11">*</modifier></type><name pos:start="33:12" pos:end="33:20">local_err</name> <init pos:start="33:22" pos:end="33:27">= <expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">NULL</name></expr></init></decl>;</decl_stmt>



    <while pos:start="37:5" pos:end="63:5">while <condition pos:start="37:11" pos:end="37:36">(<expr pos:start="37:12" pos:end="37:35"><name pos:start="37:12" pos:end="37:18">options</name> <operator pos:start="37:20" pos:end="37:21">&amp;&amp;</operator> <name pos:start="37:23" pos:end="37:35"><name pos:start="37:23" pos:end="37:29">options</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:35">name</name></name></expr>)</condition> <block pos:start="37:38" pos:end="63:5">{<block_content pos:start="39:9" pos:end="61:18">

        <if_stmt pos:start="39:9" pos:end="59:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:51">(<expr pos:start="39:13" pos:end="39:50"><operator pos:start="39:13" pos:end="39:13">!</operator><call pos:start="39:14" pos:end="39:50"><name pos:start="39:14" pos:end="39:19">strcmp</name><argument_list pos:start="39:20" pos:end="39:50">(<argument pos:start="39:21" pos:end="39:33"><expr pos:start="39:21" pos:end="39:33"><name pos:start="39:21" pos:end="39:33"><name pos:start="39:21" pos:end="39:27">options</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:33">name</name></name></expr></argument>, <argument pos:start="39:36" pos:end="39:49"><expr pos:start="39:36" pos:end="39:49"><name pos:start="39:36" pos:end="39:49">BLOCK_OPT_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:53" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:42">

            <expr_stmt pos:start="41:13" pos:end="41:42"><expr pos:start="41:13" pos:end="41:41"><name pos:start="41:13" pos:end="41:22">image_size</name> <operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:41"><name pos:start="41:26" pos:end="41:32">options</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:39">value</name><operator pos:start="41:40" pos:end="41:40">.</operator><name pos:start="41:41" pos:end="41:41">n</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="43:11" pos:end="47:9">else if <condition pos:start="43:19" pos:end="43:67">(<expr pos:start="43:20" pos:end="43:66"><operator pos:start="43:20" pos:end="43:20">!</operator><call pos:start="43:21" pos:end="43:66"><name pos:start="43:21" pos:end="43:26">strcmp</name><argument_list pos:start="43:27" pos:end="43:66">(<argument pos:start="43:28" pos:end="43:40"><expr pos:start="43:28" pos:end="43:40"><name pos:start="43:28" pos:end="43:40"><name pos:start="43:28" pos:end="43:34">options</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:40">name</name></name></expr></argument>, <argument pos:start="43:43" pos:end="43:65"><expr pos:start="43:43" pos:end="43:65"><name pos:start="43:43" pos:end="43:65">VHDX_BLOCK_OPT_LOG_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:69" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:40">

            <expr_stmt pos:start="45:13" pos:end="45:40"><expr pos:start="45:13" pos:end="45:39"><name pos:start="45:13" pos:end="45:20">log_size</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <name pos:start="45:24" pos:end="45:39"><name pos:start="45:24" pos:end="45:30">options</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:37">value</name><operator pos:start="45:38" pos:end="45:38">.</operator><name pos:start="45:39" pos:end="45:39">n</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="51:9">else if <condition pos:start="47:19" pos:end="47:69">(<expr pos:start="47:20" pos:end="47:68"><operator pos:start="47:20" pos:end="47:20">!</operator><call pos:start="47:21" pos:end="47:68"><name pos:start="47:21" pos:end="47:26">strcmp</name><argument_list pos:start="47:27" pos:end="47:68">(<argument pos:start="47:28" pos:end="47:40"><expr pos:start="47:28" pos:end="47:40"><name pos:start="47:28" pos:end="47:40"><name pos:start="47:28" pos:end="47:34">options</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:40">name</name></name></expr></argument>, <argument pos:start="47:43" pos:end="47:67"><expr pos:start="47:43" pos:end="47:67"><name pos:start="47:43" pos:end="47:67">VHDX_BLOCK_OPT_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:71" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:42">

            <expr_stmt pos:start="49:13" pos:end="49:42"><expr pos:start="49:13" pos:end="49:41"><name pos:start="49:13" pos:end="49:22">block_size</name> <operator pos:start="49:24" pos:end="49:24">=</operator> <name pos:start="49:26" pos:end="49:41"><name pos:start="49:26" pos:end="49:32">options</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:39">value</name><operator pos:start="49:40" pos:end="49:40">.</operator><name pos:start="49:41" pos:end="49:41">n</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="51:11" pos:end="55:9">else if <condition pos:start="51:19" pos:end="51:60">(<expr pos:start="51:20" pos:end="51:59"><operator pos:start="51:20" pos:end="51:20">!</operator><call pos:start="51:21" pos:end="51:59"><name pos:start="51:21" pos:end="51:26">strcmp</name><argument_list pos:start="51:27" pos:end="51:59">(<argument pos:start="51:28" pos:end="51:40"><expr pos:start="51:28" pos:end="51:40"><name pos:start="51:28" pos:end="51:40"><name pos:start="51:28" pos:end="51:34">options</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:40">name</name></name></expr></argument>, <argument pos:start="51:43" pos:end="51:58"><expr pos:start="51:43" pos:end="51:58"><name pos:start="51:43" pos:end="51:58">BLOCK_OPT_SUBFMT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:62" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:36">

            <expr_stmt pos:start="53:13" pos:end="53:36"><expr pos:start="53:13" pos:end="53:35"><name pos:start="53:13" pos:end="53:16">type</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:35"><name pos:start="53:20" pos:end="53:26">options</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:33">value</name><operator pos:start="53:34" pos:end="53:34">.</operator><name pos:start="53:35" pos:end="53:35">s</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="55:11" pos:end="59:9">else if <condition pos:start="55:19" pos:end="55:63">(<expr pos:start="55:20" pos:end="55:62"><operator pos:start="55:20" pos:end="55:20">!</operator><call pos:start="55:21" pos:end="55:62"><name pos:start="55:21" pos:end="55:26">strcmp</name><argument_list pos:start="55:27" pos:end="55:62">(<argument pos:start="55:28" pos:end="55:40"><expr pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:34">options</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:40">name</name></name></expr></argument>, <argument pos:start="55:43" pos:end="55:61"><expr pos:start="55:43" pos:end="55:61"><name pos:start="55:43" pos:end="55:61">VHDX_BLOCK_OPT_ZERO</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:65" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:52">

            <expr_stmt pos:start="57:13" pos:end="57:52"><expr pos:start="57:13" pos:end="57:51"><name pos:start="57:13" pos:end="57:27">use_zero_blocks</name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:46"><name pos:start="57:31" pos:end="57:37">options</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:44">value</name><operator pos:start="57:45" pos:end="57:45">.</operator><name pos:start="57:46" pos:end="57:46">n</name></name> <operator pos:start="57:48" pos:end="57:49">!=</operator> <literal type="number" pos:start="57:51" pos:end="57:51">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:18"><expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:15">options</name><operator pos:start="61:16" pos:end="61:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:41">(<expr pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:18">image_size</name> <operator pos:start="67:20" pos:end="67:20">&gt;</operator> <name pos:start="67:22" pos:end="67:40">VHDX_MAX_IMAGE_SIZE</name></expr>)</condition> <block pos:start="67:43" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:18">

        <expr_stmt pos:start="69:9" pos:end="69:76"><expr pos:start="69:9" pos:end="69:75"><call pos:start="69:9" pos:end="69:75"><name pos:start="69:9" pos:end="69:24">error_setg_errno</name><argument_list pos:start="69:25" pos:end="69:75">(<argument pos:start="69:26" pos:end="69:29"><expr pos:start="69:26" pos:end="69:29"><name pos:start="69:26" pos:end="69:29">errp</name></expr></argument>, <argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:37">EINVAL</name></expr></argument>, <argument pos:start="69:40" pos:end="69:74"><expr pos:start="69:40" pos:end="69:74"><literal type="string" pos:start="69:40" pos:end="69:74">"Image size too large; max of 64TB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><name pos:start="71:16" pos:end="71:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:21">(<expr pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:12">type</name> <operator pos:start="79:14" pos:end="79:15">==</operator> <name pos:start="79:17" pos:end="79:20">NULL</name></expr>)</condition> <block pos:start="79:23" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:25">

        <expr_stmt pos:start="81:9" pos:end="81:25"><expr pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:12">type</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <literal type="string" pos:start="81:16" pos:end="81:24">"dynamic"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="111:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:33">(<expr pos:start="87:9" pos:end="87:32"><operator pos:start="87:9" pos:end="87:9">!</operator><call pos:start="87:10" pos:end="87:32"><name pos:start="87:10" pos:end="87:15">strcmp</name><argument_list pos:start="87:16" pos:end="87:32">(<argument pos:start="87:17" pos:end="87:20"><expr pos:start="87:17" pos:end="87:20"><name pos:start="87:17" pos:end="87:20">type</name></expr></argument>, <argument pos:start="87:23" pos:end="87:31"><expr pos:start="87:23" pos:end="87:31"><literal type="string" pos:start="87:23" pos:end="87:31">"dynamic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:35" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:39">

        <expr_stmt pos:start="89:9" pos:end="89:39"><expr pos:start="89:9" pos:end="89:38"><name pos:start="89:9" pos:end="89:18">image_type</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:38">VHDX_TYPE_DYNAMIC</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="91:7" pos:end="95:5">else if <condition pos:start="91:15" pos:end="91:38">(<expr pos:start="91:16" pos:end="91:37"><operator pos:start="91:16" pos:end="91:16">!</operator><call pos:start="91:17" pos:end="91:37"><name pos:start="91:17" pos:end="91:22">strcmp</name><argument_list pos:start="91:23" pos:end="91:37">(<argument pos:start="91:24" pos:end="91:27"><expr pos:start="91:24" pos:end="91:27"><name pos:start="91:24" pos:end="91:27">type</name></expr></argument>, <argument pos:start="91:30" pos:end="91:36"><expr pos:start="91:30" pos:end="91:36"><literal type="string" pos:start="91:30" pos:end="91:36">"fixed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:40" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:37">

        <expr_stmt pos:start="93:9" pos:end="93:37"><expr pos:start="93:9" pos:end="93:36"><name pos:start="93:9" pos:end="93:18">image_type</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:36">VHDX_TYPE_FIXED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="105:5">else if <condition pos:start="95:15" pos:end="95:45">(<expr pos:start="95:16" pos:end="95:44"><operator pos:start="95:16" pos:end="95:16">!</operator><call pos:start="95:17" pos:end="95:44"><name pos:start="95:17" pos:end="95:22">strcmp</name><argument_list pos:start="95:23" pos:end="95:44">(<argument pos:start="95:24" pos:end="95:27"><expr pos:start="95:24" pos:end="95:27"><name pos:start="95:24" pos:end="95:27">type</name></expr></argument>, <argument pos:start="95:30" pos:end="95:43"><expr pos:start="95:30" pos:end="95:43"><literal type="string" pos:start="95:30" pos:end="95:43">"differencing"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:47" pos:end="105:5">{<block_content pos:start="97:9" pos:end="103:18">

        <expr_stmt pos:start="97:9" pos:end="99:65"><expr pos:start="97:9" pos:end="99:64"><call pos:start="97:9" pos:end="99:64"><name pos:start="97:9" pos:end="97:24">error_setg_errno</name><argument_list pos:start="97:25" pos:end="99:64">(<argument pos:start="97:26" pos:end="97:29"><expr pos:start="97:26" pos:end="97:29"><name pos:start="97:26" pos:end="97:29">errp</name></expr></argument>, <argument pos:start="97:32" pos:end="97:38"><expr pos:start="97:32" pos:end="97:38"><name pos:start="97:32" pos:end="97:38">ENOTSUP</name></expr></argument>,

                         <argument pos:start="99:26" pos:end="99:63"><expr pos:start="99:26" pos:end="99:63"><literal type="string" pos:start="99:26" pos:end="99:63">"Differencing files not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:23"><expr pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <operator pos:start="101:15" pos:end="101:15">-</operator><name pos:start="101:16" pos:end="101:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:18">goto <name pos:start="103:14" pos:end="103:17">exit</name>;</goto>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="111:5">else <block pos:start="105:12" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:18">

        <expr_stmt pos:start="107:9" pos:end="107:22"><expr pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <operator pos:start="107:15" pos:end="107:15">-</operator><name pos:start="107:16" pos:end="107:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:18">goto <name pos:start="109:14" pos:end="109:17">exit</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="117:42">/* These are pretty arbitrary, and mainly designed to keep the BAT

     * size reasonable to load into RAM */</comment>

    <if_stmt pos:start="119:5" pos:end="139:5"><if pos:start="119:5" pos:end="139:5">if <condition pos:start="119:8" pos:end="119:24">(<expr pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:18">block_size</name> <operator pos:start="119:20" pos:end="119:21">==</operator> <literal type="number" pos:start="119:23" pos:end="119:23">0</literal></expr>)</condition> <block pos:start="119:26" pos:end="139:5">{<block_content pos:start="121:9" pos:end="137:9">

        <if_stmt pos:start="121:9" pos:end="137:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:34">(<expr pos:start="121:13" pos:end="121:33"><name pos:start="121:13" pos:end="121:22">image_size</name> <operator pos:start="121:24" pos:end="121:24">&gt;</operator> <literal type="number" pos:start="121:26" pos:end="121:27">32</literal> <operator pos:start="121:29" pos:end="121:29">*</operator> <name pos:start="121:31" pos:end="121:33">TiB</name></expr>)</condition> <block pos:start="121:36" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:34">

            <expr_stmt pos:start="123:13" pos:end="123:34"><expr pos:start="123:13" pos:end="123:33"><name pos:start="123:13" pos:end="123:22">block_size</name> <operator pos:start="123:24" pos:end="123:24">=</operator> <literal type="number" pos:start="123:26" pos:end="123:27">64</literal> <operator pos:start="123:29" pos:end="123:29">*</operator> <name pos:start="123:31" pos:end="123:33">MiB</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="125:11" pos:end="129:9">else if <condition pos:start="125:19" pos:end="125:53">(<expr pos:start="125:20" pos:end="125:52"><name pos:start="125:20" pos:end="125:29">image_size</name> <operator pos:start="125:31" pos:end="125:31">&gt;</operator> <operator pos:start="125:33" pos:end="125:33">(</operator><name pos:start="125:34" pos:end="125:41">uint64_t</name><operator pos:start="125:42" pos:end="125:42">)</operator> <literal type="number" pos:start="125:44" pos:end="125:46">100</literal> <operator pos:start="125:48" pos:end="125:48">*</operator> <name pos:start="125:50" pos:end="125:52">GiB</name></expr>)</condition> <block pos:start="125:55" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:34">

            <expr_stmt pos:start="127:13" pos:end="127:34"><expr pos:start="127:13" pos:end="127:33"><name pos:start="127:13" pos:end="127:22">block_size</name> <operator pos:start="127:24" pos:end="127:24">=</operator> <literal type="number" pos:start="127:26" pos:end="127:27">32</literal> <operator pos:start="127:29" pos:end="127:29">*</operator> <name pos:start="127:31" pos:end="127:33">MiB</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="129:11" pos:end="133:9">else if <condition pos:start="129:19" pos:end="129:40">(<expr pos:start="129:20" pos:end="129:39"><name pos:start="129:20" pos:end="129:29">image_size</name> <operator pos:start="129:31" pos:end="129:31">&gt;</operator> <literal type="number" pos:start="129:33" pos:end="129:33">1</literal> <operator pos:start="129:35" pos:end="129:35">*</operator> <name pos:start="129:37" pos:end="129:39">GiB</name></expr>)</condition> <block pos:start="129:42" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:34">

            <expr_stmt pos:start="131:13" pos:end="131:34"><expr pos:start="131:13" pos:end="131:33"><name pos:start="131:13" pos:end="131:22">block_size</name> <operator pos:start="131:24" pos:end="131:24">=</operator> <literal type="number" pos:start="131:26" pos:end="131:27">16</literal> <operator pos:start="131:29" pos:end="131:29">*</operator> <name pos:start="131:31" pos:end="131:33">MiB</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="133:11" pos:end="137:9">else <block pos:start="133:16" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:33">

            <expr_stmt pos:start="135:13" pos:end="135:33"><expr pos:start="135:13" pos:end="135:32"><name pos:start="135:13" pos:end="135:22">block_size</name> <operator pos:start="135:24" pos:end="135:24">=</operator> <literal type="number" pos:start="135:26" pos:end="135:26">8</literal> <operator pos:start="135:28" pos:end="135:28">*</operator> <name pos:start="135:30" pos:end="135:32">MiB</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="145:5" pos:end="147:38">/* make the log size close to what was specified, but must be

     * min 1MB, and multiple of 1MB */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:39"><expr pos:start="149:5" pos:end="149:38"><name pos:start="149:5" pos:end="149:12">log_size</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:38"><name pos:start="149:16" pos:end="149:23">ROUND_UP</name><argument_list pos:start="149:24" pos:end="149:38">(<argument pos:start="149:25" pos:end="149:32"><expr pos:start="149:25" pos:end="149:32"><name pos:start="149:25" pos:end="149:32">log_size</name></expr></argument>, <argument pos:start="149:35" pos:end="149:37"><expr pos:start="149:35" pos:end="149:37"><name pos:start="149:35" pos:end="149:37">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:43"><expr pos:start="153:5" pos:end="153:42"><name pos:start="153:5" pos:end="153:14">block_size</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <call pos:start="153:18" pos:end="153:42"><name pos:start="153:18" pos:end="153:25">ROUND_UP</name><argument_list pos:start="153:26" pos:end="153:42">(<argument pos:start="153:27" pos:end="153:36"><expr pos:start="153:27" pos:end="153:36"><name pos:start="153:27" pos:end="153:36">block_size</name></expr></argument>, <argument pos:start="153:39" pos:end="153:41"><expr pos:start="153:39" pos:end="153:41"><name pos:start="153:39" pos:end="153:41">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="157:63"><expr pos:start="155:5" pos:end="157:62"><name pos:start="155:5" pos:end="155:14">block_size</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <ternary pos:start="155:18" pos:end="157:62"><condition pos:start="155:18" pos:end="155:51"><expr pos:start="155:18" pos:end="155:49"><name pos:start="155:18" pos:end="155:27">block_size</name> <operator pos:start="155:29" pos:end="155:29">&gt;</operator> <name pos:start="155:31" pos:end="155:49">VHDX_BLOCK_SIZE_MAX</name></expr> ?</condition><then pos:start="155:53" pos:end="155:71"> <expr pos:start="155:53" pos:end="155:71"><name pos:start="155:53" pos:end="155:71">VHDX_BLOCK_SIZE_MAX</name></expr> </then><else pos:start="155:73" pos:end="157:62">:

                                                    <expr pos:start="157:53" pos:end="157:62"><name pos:start="157:53" pos:end="157:62">block_size</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:58"><expr pos:start="161:5" pos:end="161:57"><name pos:start="161:5" pos:end="161:7">ret</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <call pos:start="161:11" pos:end="161:57"><name pos:start="161:11" pos:end="161:26">bdrv_create_file</name><argument_list pos:start="161:27" pos:end="161:57">(<argument pos:start="161:28" pos:end="161:35"><expr pos:start="161:28" pos:end="161:35"><name pos:start="161:28" pos:end="161:35">filename</name></expr></argument>, <argument pos:start="161:38" pos:end="161:44"><expr pos:start="161:38" pos:end="161:44"><name pos:start="161:38" pos:end="161:44">options</name></expr></argument>, <argument pos:start="161:47" pos:end="161:56"><expr pos:start="161:47" pos:end="161:56"><operator pos:start="161:47" pos:end="161:47">&amp;</operator><name pos:start="161:48" pos:end="161:56">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:16">(<expr pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">&lt;</operator> <literal type="number" pos:start="163:15" pos:end="163:15">0</literal></expr>)</condition> <block pos:start="163:18" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:18">

        <expr_stmt pos:start="165:9" pos:end="165:41"><expr pos:start="165:9" pos:end="165:40"><call pos:start="165:9" pos:end="165:40"><name pos:start="165:9" pos:end="165:23">error_propagate</name><argument_list pos:start="165:24" pos:end="165:40">(<argument pos:start="165:25" pos:end="165:28"><expr pos:start="165:25" pos:end="165:28"><name pos:start="165:25" pos:end="165:28">errp</name></expr></argument>, <argument pos:start="165:31" pos:end="165:39"><expr pos:start="165:31" pos:end="165:39"><name pos:start="165:31" pos:end="165:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="167:9" pos:end="167:18">goto <name pos:start="167:14" pos:end="167:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:77"><expr pos:start="173:5" pos:end="173:76"><name pos:start="173:5" pos:end="173:7">ret</name> <operator pos:start="173:9" pos:end="173:9">=</operator> <call pos:start="173:11" pos:end="173:76"><name pos:start="173:11" pos:end="173:24">bdrv_file_open</name><argument_list pos:start="173:25" pos:end="173:76">(<argument pos:start="173:26" pos:end="173:28"><expr pos:start="173:26" pos:end="173:28"><operator pos:start="173:26" pos:end="173:26">&amp;</operator><name pos:start="173:27" pos:end="173:28">bs</name></expr></argument>, <argument pos:start="173:31" pos:end="173:38"><expr pos:start="173:31" pos:end="173:38"><name pos:start="173:31" pos:end="173:38">filename</name></expr></argument>, <argument pos:start="173:41" pos:end="173:44"><expr pos:start="173:41" pos:end="173:44"><name pos:start="173:41" pos:end="173:44">NULL</name></expr></argument>, <argument pos:start="173:47" pos:end="173:50"><expr pos:start="173:47" pos:end="173:50"><name pos:start="173:47" pos:end="173:50">NULL</name></expr></argument>, <argument pos:start="173:53" pos:end="173:63"><expr pos:start="173:53" pos:end="173:63"><name pos:start="173:53" pos:end="173:63">BDRV_O_RDWR</name></expr></argument>, <argument pos:start="173:66" pos:end="173:75"><expr pos:start="173:66" pos:end="173:75"><operator pos:start="173:66" pos:end="173:66">&amp;</operator><name pos:start="173:67" pos:end="173:75">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="181:5"><if pos:start="175:5" pos:end="181:5">if <condition pos:start="175:8" pos:end="175:16">(<expr pos:start="175:9" pos:end="175:15"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">&lt;</operator> <literal type="number" pos:start="175:15" pos:end="175:15">0</literal></expr>)</condition> <block pos:start="175:18" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:18">

        <expr_stmt pos:start="177:9" pos:end="177:41"><expr pos:start="177:9" pos:end="177:40"><call pos:start="177:9" pos:end="177:40"><name pos:start="177:9" pos:end="177:23">error_propagate</name><argument_list pos:start="177:24" pos:end="177:40">(<argument pos:start="177:25" pos:end="177:28"><expr pos:start="177:25" pos:end="177:28"><name pos:start="177:25" pos:end="177:28">errp</name></expr></argument>, <argument pos:start="177:31" pos:end="177:39"><expr pos:start="177:31" pos:end="177:39"><name pos:start="177:31" pos:end="177:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="179:9" pos:end="179:18">goto <name pos:start="179:14" pos:end="179:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:20">/* Create (A) */</comment>



    <comment type="block" pos:start="189:5" pos:end="191:33">/* The creator field is optional, but may be useful for

     * debugging / diagnostics */</comment>

    <expr_stmt pos:start="193:5" pos:end="195:52"><expr pos:start="193:5" pos:end="195:51"><name pos:start="193:5" pos:end="193:11">creator</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <call pos:start="193:15" pos:end="195:51"><name pos:start="193:15" pos:end="193:29">g_utf8_to_utf16</name><argument_list pos:start="193:30" pos:end="195:51">(<argument pos:start="193:31" pos:end="193:51"><expr pos:start="193:31" pos:end="193:51"><literal type="string" pos:start="193:31" pos:end="193:38">"QEMU v"</literal> <name pos:start="193:40" pos:end="193:51">QEMU_VERSION</name></expr></argument>, <argument pos:start="193:54" pos:end="193:55"><expr pos:start="193:54" pos:end="193:55"><operator pos:start="193:54" pos:end="193:54">-</operator><literal type="number" pos:start="193:55" pos:end="193:55">1</literal></expr></argument>, <argument pos:start="193:58" pos:end="193:61"><expr pos:start="193:58" pos:end="193:61"><name pos:start="193:58" pos:end="193:61">NULL</name></expr></argument>,

                              <argument pos:start="195:31" pos:end="195:44"><expr pos:start="195:31" pos:end="195:44"><operator pos:start="195:31" pos:end="195:31">&amp;</operator><name pos:start="195:32" pos:end="195:44">creator_items</name></expr></argument>, <argument pos:start="195:47" pos:end="195:50"><expr pos:start="195:47" pos:end="195:50"><name pos:start="195:47" pos:end="195:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:49"><expr pos:start="197:5" pos:end="197:48"><name pos:start="197:5" pos:end="197:13">signature</name> <operator pos:start="197:15" pos:end="197:15">=</operator> <call pos:start="197:17" pos:end="197:48"><name pos:start="197:17" pos:end="197:27">cpu_to_le64</name><argument_list pos:start="197:28" pos:end="197:48">(<argument pos:start="197:29" pos:end="197:47"><expr pos:start="197:29" pos:end="197:47"><name pos:start="197:29" pos:end="197:47">VHDX_FILE_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:72"><expr pos:start="199:5" pos:end="199:71"><call pos:start="199:5" pos:end="199:71"><name pos:start="199:5" pos:end="199:15">bdrv_pwrite</name><argument_list pos:start="199:16" pos:end="199:71">(<argument pos:start="199:17" pos:end="199:18"><expr pos:start="199:17" pos:end="199:18"><name pos:start="199:17" pos:end="199:18">bs</name></expr></argument>, <argument pos:start="199:21" pos:end="199:39"><expr pos:start="199:21" pos:end="199:39"><name pos:start="199:21" pos:end="199:39">VHDX_FILE_ID_OFFSET</name></expr></argument>, <argument pos:start="199:42" pos:end="199:51"><expr pos:start="199:42" pos:end="199:51"><operator pos:start="199:42" pos:end="199:42">&amp;</operator><name pos:start="199:43" pos:end="199:51">signature</name></expr></argument>, <argument pos:start="199:54" pos:end="199:70"><expr pos:start="199:54" pos:end="199:70"><sizeof pos:start="199:54" pos:end="199:70">sizeof<argument_list pos:start="199:60" pos:end="199:70">(<argument pos:start="199:61" pos:end="199:69"><expr pos:start="199:61" pos:end="199:69"><name pos:start="199:61" pos:end="199:69">signature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="201:5" pos:end="205:5"><if pos:start="201:5" pos:end="205:5">if <condition pos:start="201:8" pos:end="201:16">(<expr pos:start="201:9" pos:end="201:15"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">&lt;</operator> <literal type="number" pos:start="201:15" pos:end="201:15">0</literal></expr>)</condition> <block pos:start="201:18" pos:end="205:5">{<block_content pos:start="203:9" pos:end="203:29">

        <goto pos:start="203:9" pos:end="203:29">goto <name pos:start="203:14" pos:end="203:28">delete_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="207:5" pos:end="219:5"><if pos:start="207:5" pos:end="219:5">if <condition pos:start="207:8" pos:end="207:16">(<expr pos:start="207:9" pos:end="207:15"><name pos:start="207:9" pos:end="207:15">creator</name></expr>)</condition> <block pos:start="207:18" pos:end="219:5">{<block_content pos:start="209:9" pos:end="217:9">

        <expr_stmt pos:start="209:9" pos:end="211:55"><expr pos:start="209:9" pos:end="211:54"><call pos:start="209:9" pos:end="211:54"><name pos:start="209:9" pos:end="209:19">bdrv_pwrite</name><argument_list pos:start="209:20" pos:end="211:54">(<argument pos:start="209:21" pos:end="209:22"><expr pos:start="209:21" pos:end="209:22"><name pos:start="209:21" pos:end="209:22">bs</name></expr></argument>, <argument pos:start="209:25" pos:end="209:63"><expr pos:start="209:25" pos:end="209:63"><name pos:start="209:25" pos:end="209:43">VHDX_FILE_ID_OFFSET</name> <operator pos:start="209:45" pos:end="209:45">+</operator> <sizeof pos:start="209:47" pos:end="209:63">sizeof<argument_list pos:start="209:53" pos:end="209:63">(<argument pos:start="209:54" pos:end="209:62"><expr pos:start="209:54" pos:end="209:62"><name pos:start="209:54" pos:end="209:62">signature</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="209:66" pos:end="209:72"><expr pos:start="209:66" pos:end="209:72"><name pos:start="209:66" pos:end="209:72">creator</name></expr></argument>,

                    <argument pos:start="211:21" pos:end="211:53"><expr pos:start="211:21" pos:end="211:53"><name pos:start="211:21" pos:end="211:33">creator_items</name> <operator pos:start="211:35" pos:end="211:35">*</operator> <sizeof pos:start="211:37" pos:end="211:53">sizeof<argument_list pos:start="211:43" pos:end="211:53">(<argument pos:start="211:44" pos:end="211:52"><expr pos:start="211:44" pos:end="211:52"><name pos:start="211:44" pos:end="211:52">gunichar2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="217:9"><if pos:start="213:9" pos:end="217:9">if <condition pos:start="213:12" pos:end="213:20">(<expr pos:start="213:13" pos:end="213:19"><name pos:start="213:13" pos:end="213:15">ret</name> <operator pos:start="213:17" pos:end="213:17">&lt;</operator> <literal type="number" pos:start="213:19" pos:end="213:19">0</literal></expr>)</condition> <block pos:start="213:22" pos:end="217:9">{<block_content pos:start="215:13" pos:end="215:33">

            <goto pos:start="215:13" pos:end="215:33">goto <name pos:start="215:18" pos:end="215:32">delete_and_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="225:5" pos:end="225:25">/* Creates (B),(C) */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:60"><expr pos:start="227:5" pos:end="227:59"><name pos:start="227:5" pos:end="227:7">ret</name> <operator pos:start="227:9" pos:end="227:9">=</operator> <call pos:start="227:11" pos:end="227:59"><name pos:start="227:11" pos:end="227:33">vhdx_create_new_headers</name><argument_list pos:start="227:34" pos:end="227:59">(<argument pos:start="227:35" pos:end="227:36"><expr pos:start="227:35" pos:end="227:36"><name pos:start="227:35" pos:end="227:36">bs</name></expr></argument>, <argument pos:start="227:39" pos:end="227:48"><expr pos:start="227:39" pos:end="227:48"><name pos:start="227:39" pos:end="227:48">image_size</name></expr></argument>, <argument pos:start="227:51" pos:end="227:58"><expr pos:start="227:51" pos:end="227:58"><name pos:start="227:51" pos:end="227:58">log_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="233:5"><if pos:start="229:5" pos:end="233:5">if <condition pos:start="229:8" pos:end="229:16">(<expr pos:start="229:9" pos:end="229:15"><name pos:start="229:9" pos:end="229:11">ret</name> <operator pos:start="229:13" pos:end="229:13">&lt;</operator> <literal type="number" pos:start="229:15" pos:end="229:15">0</literal></expr>)</condition> <block pos:start="229:18" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:29">

        <goto pos:start="231:9" pos:end="231:29">goto <name pos:start="231:14" pos:end="231:28">delete_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="237:5" pos:end="237:67">/* Creates (D),(E),(G) explicitly. (F) created as by-product */</comment>

    <expr_stmt pos:start="239:5" pos:end="243:57"><expr pos:start="239:5" pos:end="243:56"><name pos:start="239:5" pos:end="239:7">ret</name> <operator pos:start="239:9" pos:end="239:9">=</operator> <call pos:start="239:11" pos:end="243:56"><name pos:start="239:11" pos:end="239:38">vhdx_create_new_region_table</name><argument_list pos:start="239:39" pos:end="243:56">(<argument pos:start="239:40" pos:end="239:41"><expr pos:start="239:40" pos:end="239:41"><name pos:start="239:40" pos:end="239:41">bs</name></expr></argument>, <argument pos:start="239:44" pos:end="239:53"><expr pos:start="239:44" pos:end="239:53"><name pos:start="239:44" pos:end="239:53">image_size</name></expr></argument>, <argument pos:start="239:56" pos:end="239:65"><expr pos:start="239:56" pos:end="239:65"><name pos:start="239:56" pos:end="239:65">block_size</name></expr></argument>, <argument pos:start="239:68" pos:end="239:70"><expr pos:start="239:68" pos:end="239:70"><literal type="number" pos:start="239:68" pos:end="239:70">512</literal></expr></argument>,

                                       <argument pos:start="241:40" pos:end="241:47"><expr pos:start="241:40" pos:end="241:47"><name pos:start="241:40" pos:end="241:47">log_size</name></expr></argument>, <argument pos:start="241:50" pos:end="241:64"><expr pos:start="241:50" pos:end="241:64"><name pos:start="241:50" pos:end="241:64">use_zero_blocks</name></expr></argument>, <argument pos:start="241:67" pos:end="241:76"><expr pos:start="241:67" pos:end="241:76"><name pos:start="241:67" pos:end="241:76">image_type</name></expr></argument>,

                                       <argument pos:start="243:40" pos:end="243:55"><expr pos:start="243:40" pos:end="243:55"><operator pos:start="243:40" pos:end="243:40">&amp;</operator><name pos:start="243:41" pos:end="243:55">metadata_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="245:5" pos:end="249:5"><if pos:start="245:5" pos:end="249:5">if <condition pos:start="245:8" pos:end="245:16">(<expr pos:start="245:9" pos:end="245:15"><name pos:start="245:9" pos:end="245:11">ret</name> <operator pos:start="245:13" pos:end="245:13">&lt;</operator> <literal type="number" pos:start="245:15" pos:end="245:15">0</literal></expr>)</condition> <block pos:start="245:18" pos:end="249:5">{<block_content pos:start="247:9" pos:end="247:29">

        <goto pos:start="247:9" pos:end="247:29">goto <name pos:start="247:14" pos:end="247:28">delete_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="253:5" pos:end="253:21">/* Creates (H) */</comment>

    <expr_stmt pos:start="255:5" pos:end="257:64"><expr pos:start="255:5" pos:end="257:63"><name pos:start="255:5" pos:end="255:7">ret</name> <operator pos:start="255:9" pos:end="255:9">=</operator> <call pos:start="255:11" pos:end="257:63"><name pos:start="255:11" pos:end="255:34">vhdx_create_new_metadata</name><argument_list pos:start="255:35" pos:end="257:63">(<argument pos:start="255:36" pos:end="255:37"><expr pos:start="255:36" pos:end="255:37"><name pos:start="255:36" pos:end="255:37">bs</name></expr></argument>, <argument pos:start="255:40" pos:end="255:49"><expr pos:start="255:40" pos:end="255:49"><name pos:start="255:40" pos:end="255:49">image_size</name></expr></argument>, <argument pos:start="255:52" pos:end="255:61"><expr pos:start="255:52" pos:end="255:61"><name pos:start="255:52" pos:end="255:61">block_size</name></expr></argument>, <argument pos:start="255:64" pos:end="255:66"><expr pos:start="255:64" pos:end="255:66"><literal type="number" pos:start="255:64" pos:end="255:66">512</literal></expr></argument>,

                                   <argument pos:start="257:36" pos:end="257:50"><expr pos:start="257:36" pos:end="257:50"><name pos:start="257:36" pos:end="257:50">metadata_offset</name></expr></argument>, <argument pos:start="257:53" pos:end="257:62"><expr pos:start="257:53" pos:end="257:62"><name pos:start="257:53" pos:end="257:62">image_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="259:5" pos:end="263:5"><if pos:start="259:5" pos:end="263:5">if <condition pos:start="259:8" pos:end="259:16">(<expr pos:start="259:9" pos:end="259:15"><name pos:start="259:9" pos:end="259:11">ret</name> <operator pos:start="259:13" pos:end="259:13">&lt;</operator> <literal type="number" pos:start="259:15" pos:end="259:15">0</literal></expr>)</condition> <block pos:start="259:18" pos:end="263:5">{<block_content pos:start="261:9" pos:end="261:29">

        <goto pos:start="261:9" pos:end="261:29">goto <name pos:start="261:14" pos:end="261:28">delete_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>







<label pos:start="271:1" pos:end="271:16"><name pos:start="271:1" pos:end="271:15">delete_and_exit</name>:</label>

    <expr_stmt pos:start="273:5" pos:end="273:19"><expr pos:start="273:5" pos:end="273:18"><call pos:start="273:5" pos:end="273:18"><name pos:start="273:5" pos:end="273:14">bdrv_unref</name><argument_list pos:start="273:15" pos:end="273:18">(<argument pos:start="273:16" pos:end="273:17"><expr pos:start="273:16" pos:end="273:17"><name pos:start="273:16" pos:end="273:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="275:1" pos:end="275:5"><name pos:start="275:1" pos:end="275:4">exit</name>:</label>

    <expr_stmt pos:start="277:5" pos:end="277:20"><expr pos:start="277:5" pos:end="277:19"><call pos:start="277:5" pos:end="277:19"><name pos:start="277:5" pos:end="277:10">g_free</name><argument_list pos:start="277:11" pos:end="277:19">(<argument pos:start="277:12" pos:end="277:18"><expr pos:start="277:12" pos:end="277:18"><name pos:start="277:12" pos:end="277:18">creator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="279:5" pos:end="279:15">return <expr pos:start="279:12" pos:end="279:14"><name pos:start="279:12" pos:end="279:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
