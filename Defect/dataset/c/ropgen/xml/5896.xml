<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5896.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">machine_numa_finish_init</name><parameter_list pos:start="1:37" pos:end="1:59">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:49">MachineState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:27">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:24">default_mapping</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">GString</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">s</name> <init pos:start="9:16" pos:end="9:35">= <expr pos:start="9:18" pos:end="9:35"><call pos:start="9:18" pos:end="9:35"><name pos:start="9:18" pos:end="9:29">g_string_new</name><argument_list pos:start="9:30" pos:end="9:35">(<argument pos:start="9:31" pos:end="9:34"><expr pos:start="9:31" pos:end="9:34"><name pos:start="9:31" pos:end="9:34">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MachineClass</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mc</name> <init pos:start="11:22" pos:end="11:49">= <expr pos:start="11:24" pos:end="11:49"><call pos:start="11:24" pos:end="11:49"><name pos:start="11:24" pos:end="11:40">MACHINE_GET_CLASS</name><argument_list pos:start="11:41" pos:end="11:49">(<argument pos:start="11:42" pos:end="11:48"><expr pos:start="11:42" pos:end="11:48"><name pos:start="11:42" pos:end="11:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:76"><decl pos:start="13:5" pos:end="13:75"><type pos:start="13:5" pos:end="13:25"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:23">CPUArchIdList</name> <modifier pos:start="13:25" pos:end="13:25">*</modifier></type><name pos:start="13:26" pos:end="13:38">possible_cpus</name> <init pos:start="13:40" pos:end="13:75">= <expr pos:start="13:42" pos:end="13:75"><call pos:start="13:42" pos:end="13:75"><name pos:start="13:42" pos:end="13:66"><name pos:start="13:42" pos:end="13:43">mc</name><operator pos:start="13:44" pos:end="13:45">-&gt;</operator><name pos:start="13:46" pos:end="13:66">possible_cpu_arch_ids</name></name><argument_list pos:start="13:67" pos:end="13:75">(<argument pos:start="13:68" pos:end="13:74"><expr pos:start="13:68" pos:end="13:74"><name pos:start="13:68" pos:end="13:74">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><call pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:25">(<argument pos:start="17:12" pos:end="17:24"><expr pos:start="17:12" pos:end="17:24"><name pos:start="17:12" pos:end="17:24">nb_numa_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="19:5" pos:end="27:5">for <control pos:start="19:9" pos:end="19:44">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:39"><expr pos:start="19:17" pos:end="19:38"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:38"><name pos:start="19:21" pos:end="19:33">possible_cpus</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:38">len</name></name></expr>;</condition> <incr pos:start="19:41" pos:end="19:43"><expr pos:start="19:41" pos:end="19:43"><name pos:start="19:41" pos:end="19:41">i</name><operator pos:start="19:42" pos:end="19:43">++</operator></expr></incr>)</control> <block pos:start="19:46" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:9">

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:53">(<expr pos:start="21:13" pos:end="21:52"><name pos:start="21:13" pos:end="21:34"><name pos:start="21:13" pos:end="21:25">possible_cpus</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:31">cpus</name><index pos:start="21:32" pos:end="21:34">[<expr pos:start="21:33" pos:end="21:33"><name pos:start="21:33" pos:end="21:33">i</name></expr>]</index></name><operator pos:start="21:35" pos:end="21:35">.</operator><name pos:start="21:36" pos:end="21:52"><name pos:start="21:36" pos:end="21:40">props</name><operator pos:start="21:41" pos:end="21:41">.</operator><name pos:start="21:42" pos:end="21:52">has_node_id</name></name></expr>)</condition> <block pos:start="21:55" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:18">

            <break pos:start="23:13" pos:end="23:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="29:5" pos:end="29:48"><expr pos:start="29:5" pos:end="29:47"><name pos:start="29:5" pos:end="29:19">default_mapping</name> <operator pos:start="29:21" pos:end="29:21">=</operator> <operator pos:start="29:23" pos:end="29:23">(</operator><name pos:start="29:24" pos:end="29:24">i</name> <operator pos:start="29:26" pos:end="29:27">==</operator> <name pos:start="29:29" pos:end="29:46"><name pos:start="29:29" pos:end="29:41">possible_cpus</name><operator pos:start="29:42" pos:end="29:43">-&gt;</operator><name pos:start="29:44" pos:end="29:46">len</name></name><operator pos:start="29:47" pos:end="29:47">)</operator></expr>;</expr_stmt>



    <for pos:start="33:5" pos:end="69:5">for <control pos:start="33:9" pos:end="33:44">(<init pos:start="33:10" pos:end="33:15"><expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:10">i</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>;</init> <condition pos:start="33:17" pos:end="33:39"><expr pos:start="33:17" pos:end="33:38"><name pos:start="33:17" pos:end="33:17">i</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <name pos:start="33:21" pos:end="33:38"><name pos:start="33:21" pos:end="33:33">possible_cpus</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:38">len</name></name></expr>;</condition> <incr pos:start="33:41" pos:end="33:43"><expr pos:start="33:41" pos:end="33:43"><name pos:start="33:41" pos:end="33:41">i</name><operator pos:start="33:42" pos:end="33:43">++</operator></expr></incr>)</control> <block pos:start="33:46" pos:end="69:5">{<block_content pos:start="35:9" pos:end="67:9">

        <decl_stmt pos:start="35:9" pos:end="35:60"><decl pos:start="35:9" pos:end="35:59"><type pos:start="35:9" pos:end="35:25"><specifier pos:start="35:9" pos:end="35:13">const</specifier> <name pos:start="35:15" pos:end="35:23">CPUArchId</name> <modifier pos:start="35:25" pos:end="35:25">*</modifier></type><name pos:start="35:26" pos:end="35:33">cpu_slot</name> <init pos:start="35:35" pos:end="35:59">= <expr pos:start="35:37" pos:end="35:59"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:59"><name pos:start="35:38" pos:end="35:50">possible_cpus</name><operator pos:start="35:51" pos:end="35:52">-&gt;</operator><name pos:start="35:53" pos:end="35:56">cpus</name><index pos:start="35:57" pos:end="35:59">[<expr pos:start="35:58" pos:end="35:58"><name pos:start="35:58" pos:end="35:58">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="39:9" pos:end="67:9"><if pos:start="39:9" pos:end="67:9">if <condition pos:start="39:12" pos:end="39:41">(<expr pos:start="39:13" pos:end="39:40"><operator pos:start="39:13" pos:end="39:13">!</operator><name pos:start="39:14" pos:end="39:40"><name pos:start="39:14" pos:end="39:21">cpu_slot</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:28">props</name><operator pos:start="39:29" pos:end="39:29">.</operator><name pos:start="39:30" pos:end="39:40">has_node_id</name></name></expr>)</condition> <block pos:start="39:43" pos:end="67:9">{<block_content pos:start="41:13" pos:end="65:13">

            <if_stmt pos:start="41:13" pos:end="65:13"><if pos:start="41:13" pos:end="51:13">if <condition pos:start="41:16" pos:end="41:32">(<expr pos:start="41:17" pos:end="41:31"><name pos:start="41:17" pos:end="41:31">default_mapping</name></expr>)</condition> <block pos:start="41:34" pos:end="51:13">{<block_content pos:start="45:17" pos:end="49:73">

                <comment type="block" pos:start="43:17" pos:end="43:68">/* fetch default mapping from board and enable it */</comment>

                <decl_stmt pos:start="45:17" pos:end="45:62"><decl pos:start="45:17" pos:end="45:61"><type pos:start="45:17" pos:end="45:37"><name pos:start="45:17" pos:end="45:37">CpuInstanceProperties</name></type> <name pos:start="45:39" pos:end="45:43">props</name> <init pos:start="45:45" pos:end="45:61">= <expr pos:start="45:47" pos:end="45:61"><name pos:start="45:47" pos:end="45:61"><name pos:start="45:47" pos:end="45:54">cpu_slot</name><operator pos:start="45:55" pos:end="45:56">-&gt;</operator><name pos:start="45:57" pos:end="45:61">props</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:41"><expr pos:start="47:17" pos:end="47:40"><name pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:21">props</name><operator pos:start="47:22" pos:end="47:22">.</operator><name pos:start="47:23" pos:end="47:33">has_node_id</name></name> <operator pos:start="47:35" pos:end="47:35">=</operator> <name pos:start="47:37" pos:end="47:40">true</name></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:73"><expr pos:start="49:17" pos:end="49:72"><call pos:start="49:17" pos:end="49:72"><name pos:start="49:17" pos:end="49:41">machine_set_cpu_numa_node</name><argument_list pos:start="49:42" pos:end="49:72">(<argument pos:start="49:43" pos:end="49:49"><expr pos:start="49:43" pos:end="49:49"><name pos:start="49:43" pos:end="49:49">machine</name></expr></argument>, <argument pos:start="49:52" pos:end="49:57"><expr pos:start="49:52" pos:end="49:57"><operator pos:start="49:52" pos:end="49:52">&amp;</operator><name pos:start="49:53" pos:end="49:57">props</name></expr></argument>, <argument pos:start="49:60" pos:end="49:71"><expr pos:start="49:60" pos:end="49:71"><operator pos:start="49:60" pos:end="49:60">&amp;</operator><name pos:start="49:61" pos:end="49:71">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="65:13">else <block pos:start="51:20" pos:end="65:13">{<block_content pos:start="57:17" pos:end="63:32">

                <comment type="block" pos:start="53:17" pos:end="55:56">/* record slots with not set mapping,

                 * TODO: make it hard error in future */</comment>

                <decl_stmt pos:start="57:17" pos:end="57:61"><decl pos:start="57:17" pos:end="57:60"><type pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:20">char</name> <modifier pos:start="57:22" pos:end="57:22">*</modifier></type><name pos:start="57:23" pos:end="57:29">cpu_str</name> <init pos:start="57:31" pos:end="57:60">= <expr pos:start="57:33" pos:end="57:60"><call pos:start="57:33" pos:end="57:60"><name pos:start="57:33" pos:end="57:50">cpu_slot_to_string</name><argument_list pos:start="57:51" pos:end="57:60">(<argument pos:start="57:52" pos:end="57:59"><expr pos:start="57:52" pos:end="57:59"><name pos:start="57:52" pos:end="57:59">cpu_slot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="59:17" pos:end="61:71"><expr pos:start="59:17" pos:end="61:70"><call pos:start="59:17" pos:end="61:70"><name pos:start="59:17" pos:end="59:38">g_string_append_printf</name><argument_list pos:start="59:39" pos:end="61:70">(<argument pos:start="59:40" pos:end="59:40"><expr pos:start="59:40" pos:end="59:40"><name pos:start="59:40" pos:end="59:40">s</name></expr></argument>, <argument pos:start="59:43" pos:end="59:57"><expr pos:start="59:43" pos:end="59:57"><literal type="string" pos:start="59:43" pos:end="59:57">"%sCPU %d [%s]"</literal></expr></argument>,

                                       <argument pos:start="61:40" pos:end="61:57"><expr pos:start="61:40" pos:end="61:57"><ternary pos:start="61:40" pos:end="61:57"><condition pos:start="61:40" pos:end="61:47"><expr pos:start="61:40" pos:end="61:45"><name pos:start="61:40" pos:end="61:45"><name pos:start="61:40" pos:end="61:40">s</name><operator pos:start="61:41" pos:end="61:42">-&gt;</operator><name pos:start="61:43" pos:end="61:45">len</name></name></expr> ?</condition><then pos:start="61:49" pos:end="61:52"> <expr pos:start="61:49" pos:end="61:52"><literal type="string" pos:start="61:49" pos:end="61:52">", "</literal></expr> </then><else pos:start="61:54" pos:end="61:57">: <expr pos:start="61:56" pos:end="61:57"><literal type="string" pos:start="61:56" pos:end="61:57">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="61:60" pos:end="61:60"><expr pos:start="61:60" pos:end="61:60"><name pos:start="61:60" pos:end="61:60">i</name></expr></argument>, <argument pos:start="61:63" pos:end="61:69"><expr pos:start="61:63" pos:end="61:69"><name pos:start="61:63" pos:end="61:69">cpu_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:32"><expr pos:start="63:17" pos:end="63:31"><call pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:22">g_free</name><argument_list pos:start="63:23" pos:end="63:31">(<argument pos:start="63:24" pos:end="63:30"><expr pos:start="63:24" pos:end="63:30"><name pos:start="63:24" pos:end="63:30">cpu_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="71:5" pos:end="83:5"><if pos:start="71:5" pos:end="83:5">if <condition pos:start="71:8" pos:end="71:35">(<expr pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:14">len</name></name> <operator pos:start="71:16" pos:end="71:17">&amp;&amp;</operator> <operator pos:start="71:19" pos:end="71:19">!</operator><call pos:start="71:20" pos:end="71:34"><name pos:start="71:20" pos:end="71:32">qtest_enabled</name><argument_list pos:start="71:33" pos:end="71:34">()</argument_list></call></expr>)</condition> <block pos:start="71:37" pos:end="83:5">{<block_content pos:start="73:9" pos:end="81:76">

        <expr_stmt pos:start="73:9" pos:end="75:29"><expr pos:start="73:9" pos:end="75:28"><call pos:start="73:9" pos:end="75:28"><name pos:start="73:9" pos:end="73:20">error_report</name><argument_list pos:start="73:21" pos:end="75:28">(<argument pos:start="73:22" pos:end="73:72"><expr pos:start="73:22" pos:end="73:72"><literal type="string" pos:start="73:22" pos:end="73:72">"warning: CPU(s) not present in any NUMA nodes: %s"</literal></expr></argument>,

                     <argument pos:start="75:22" pos:end="75:27"><expr pos:start="75:22" pos:end="75:27"><name pos:start="75:22" pos:end="75:27"><name pos:start="75:22" pos:end="75:22">s</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:27">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="81:76"><expr pos:start="77:9" pos:end="81:75"><call pos:start="77:9" pos:end="81:75"><name pos:start="77:9" pos:end="77:20">error_report</name><argument_list pos:start="77:21" pos:end="81:75">(<argument pos:start="77:22" pos:end="81:74"><expr pos:start="77:22" pos:end="81:74"><literal type="string" pos:start="77:22" pos:end="77:77">"warning: All CPU(s) up to maxcpus should be described "</literal>

                     <literal type="string" pos:start="79:22" pos:end="79:77">"in NUMA config, ability to start up with partial NUMA "</literal>

                     <literal type="string" pos:start="81:22" pos:end="81:74">"mappings is obsoleted and will be removed in future"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:27"><expr pos:start="85:5" pos:end="85:26"><call pos:start="85:5" pos:end="85:26"><name pos:start="85:5" pos:end="85:17">g_string_free</name><argument_list pos:start="85:18" pos:end="85:26">(<argument pos:start="85:19" pos:end="85:19"><expr pos:start="85:19" pos:end="85:19"><name pos:start="85:19" pos:end="85:19">s</name></expr></argument>, <argument pos:start="85:22" pos:end="85:25"><expr pos:start="85:22" pos:end="85:25"><name pos:start="85:22" pos:end="85:25">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
