<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21908.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">net_socket_accept</name><parameter_list pos:start="1:30" pos:end="1:43">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:36"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:5">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:24">NetSocketListenState</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:27">s</name> <init pos:start="5:29" pos:end="5:36">= <expr pos:start="5:31" pos:end="5:36"><name pos:start="5:31" pos:end="5:36">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">NetSocketState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">s1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">sockaddr_in</name></name></type> <name pos:start="9:24" pos:end="9:28">saddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">socklen_t</name></type> <name pos:start="11:15" pos:end="11:17">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:11"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">fd</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="33:5">for<control pos:start="17:8" pos:end="17:11">(<init pos:start="17:9" pos:end="17:9">;</init><condition pos:start="17:10" pos:end="17:10">;</condition><incr/>)</control> <block pos:start="17:13" pos:end="33:5">{<block_content pos:start="19:9" pos:end="31:9">

        <expr_stmt pos:start="19:9" pos:end="19:28"><expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:11">len</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <sizeof pos:start="19:15" pos:end="19:27">sizeof<argument_list pos:start="19:21" pos:end="19:27">(<argument pos:start="19:22" pos:end="19:26"><expr pos:start="19:22" pos:end="19:26"><name pos:start="19:22" pos:end="19:26">saddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:10">fd</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="21:64"><name pos:start="21:14" pos:end="21:24">qemu_accept</name><argument_list pos:start="21:25" pos:end="21:64">(<argument pos:start="21:26" pos:end="21:30"><expr pos:start="21:26" pos:end="21:30"><name pos:start="21:26" pos:end="21:30"><name pos:start="21:26" pos:end="21:26">s</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:30">fd</name></name></expr></argument>, <argument pos:start="21:33" pos:end="21:57"><expr pos:start="21:33" pos:end="21:57"><operator pos:start="21:33" pos:end="21:33">(</operator>struct <name pos:start="21:41" pos:end="21:48">sockaddr</name> <operator pos:start="21:50" pos:end="21:50">*</operator><operator pos:start="21:51" pos:end="21:51">)</operator><operator pos:start="21:52" pos:end="21:52">&amp;</operator><name pos:start="21:53" pos:end="21:57">saddr</name></expr></argument>, <argument pos:start="21:60" pos:end="21:63"><expr pos:start="21:60" pos:end="21:63"><operator pos:start="21:60" pos:end="21:60">&amp;</operator><name pos:start="21:61" pos:end="21:63">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:37">(<expr pos:start="23:13" pos:end="23:36"><name pos:start="23:13" pos:end="23:14">fd</name> <operator pos:start="23:16" pos:end="23:16">&lt;</operator> <literal type="number" pos:start="23:18" pos:end="23:18">0</literal> <operator pos:start="23:20" pos:end="23:21">&amp;&amp;</operator> <name pos:start="23:23" pos:end="23:27">errno</name> <operator pos:start="23:29" pos:end="23:30">!=</operator> <name pos:start="23:32" pos:end="23:36">EINTR</name></expr>)</condition> <block pos:start="23:39" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:19">

            <return pos:start="25:13" pos:end="25:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="27:11" pos:end="31:9">else if <condition pos:start="27:19" pos:end="27:27">(<expr pos:start="27:20" pos:end="27:26"><name pos:start="27:20" pos:end="27:21">fd</name> <operator pos:start="27:23" pos:end="27:24">&gt;=</operator> <literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr>)</condition> <block pos:start="27:29" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:18">

            <break pos:start="29:13" pos:end="29:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="35:5" pos:end="35:63"><expr pos:start="35:5" pos:end="35:62"><name pos:start="35:5" pos:end="35:6">s1</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <call pos:start="35:10" pos:end="35:62"><name pos:start="35:10" pos:end="35:27">net_socket_fd_init</name><argument_list pos:start="35:28" pos:end="35:62">(<argument pos:start="35:29" pos:end="35:35"><expr pos:start="35:29" pos:end="35:35"><name pos:start="35:29" pos:end="35:35"><name pos:start="35:29" pos:end="35:29">s</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:35">vlan</name></name></expr></argument>, <argument pos:start="35:38" pos:end="35:45"><expr pos:start="35:38" pos:end="35:45"><name pos:start="35:38" pos:end="35:45"><name pos:start="35:38" pos:end="35:38">s</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:45">model</name></name></expr></argument>, <argument pos:start="35:48" pos:end="35:54"><expr pos:start="35:48" pos:end="35:54"><name pos:start="35:48" pos:end="35:54"><name pos:start="35:48" pos:end="35:48">s</name><operator pos:start="35:49" pos:end="35:50">-&gt;</operator><name pos:start="35:51" pos:end="35:54">name</name></name></expr></argument>, <argument pos:start="35:57" pos:end="35:58"><expr pos:start="35:57" pos:end="35:58"><name pos:start="35:57" pos:end="35:58">fd</name></expr></argument>, <argument pos:start="35:61" pos:end="35:61"><expr pos:start="35:61" pos:end="35:61"><literal type="number" pos:start="35:61" pos:end="35:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:12">(<expr pos:start="37:9" pos:end="37:11"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:11">s1</name></expr>)</condition> <block pos:start="37:14" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:24">

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><call pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:19">closesocket</name><argument_list pos:start="39:20" pos:end="39:23">(<argument pos:start="39:21" pos:end="39:22"><expr pos:start="39:21" pos:end="39:22"><name pos:start="39:21" pos:end="39:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="49:5">else <block pos:start="41:12" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:67">

        <expr_stmt pos:start="43:9" pos:end="47:67"><expr pos:start="43:9" pos:end="47:66"><call pos:start="43:9" pos:end="47:66"><name pos:start="43:9" pos:end="43:16">snprintf</name><argument_list pos:start="43:17" pos:end="47:66">(<argument pos:start="43:18" pos:end="43:32"><expr pos:start="43:18" pos:end="43:32"><name pos:start="43:18" pos:end="43:32"><name pos:start="43:18" pos:end="43:19">s1</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:23">nc</name><operator pos:start="43:24" pos:end="43:24">.</operator><name pos:start="43:25" pos:end="43:32">info_str</name></name></expr></argument>, <argument pos:start="43:35" pos:end="43:57"><expr pos:start="43:35" pos:end="43:57"><sizeof pos:start="43:35" pos:end="43:57">sizeof<argument_list pos:start="43:41" pos:end="43:57">(<argument pos:start="43:42" pos:end="43:56"><expr pos:start="43:42" pos:end="43:56"><name pos:start="43:42" pos:end="43:56"><name pos:start="43:42" pos:end="43:43">s1</name><operator pos:start="43:44" pos:end="43:45">-&gt;</operator><name pos:start="43:46" pos:end="43:47">nc</name><operator pos:start="43:48" pos:end="43:48">.</operator><name pos:start="43:49" pos:end="43:56">info_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="45:18" pos:end="45:48"><expr pos:start="45:18" pos:end="45:48"><literal type="string" pos:start="45:18" pos:end="45:48">"socket: connection from %s:%d"</literal></expr></argument>,

                 <argument pos:start="47:18" pos:end="47:42"><expr pos:start="47:18" pos:end="47:42"><call pos:start="47:18" pos:end="47:42"><name pos:start="47:18" pos:end="47:26">inet_ntoa</name><argument_list pos:start="47:27" pos:end="47:42">(<argument pos:start="47:28" pos:end="47:41"><expr pos:start="47:28" pos:end="47:41"><name pos:start="47:28" pos:end="47:41"><name pos:start="47:28" pos:end="47:32">saddr</name><operator pos:start="47:33" pos:end="47:33">.</operator><name pos:start="47:34" pos:end="47:41">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:45" pos:end="47:65"><expr pos:start="47:45" pos:end="47:65"><call pos:start="47:45" pos:end="47:65"><name pos:start="47:45" pos:end="47:49">ntohs</name><argument_list pos:start="47:50" pos:end="47:65">(<argument pos:start="47:51" pos:end="47:64"><expr pos:start="47:51" pos:end="47:64"><name pos:start="47:51" pos:end="47:64"><name pos:start="47:51" pos:end="47:55">saddr</name><operator pos:start="47:56" pos:end="47:56">.</operator><name pos:start="47:57" pos:end="47:64">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
