<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17108.c" pos:tabs="8"><function pos:start="1:1" pos:end="891:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">decode_mips16_opc</name> <parameter_list pos:start="1:30" pos:end="3:45">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:47"><name pos:start="1:31" pos:end="1:42">CPUMIPSState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:66"><decl pos:start="1:50" pos:end="1:66"><type pos:start="1:50" pos:end="1:66"><name pos:start="1:50" pos:end="1:61">DisasContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">ctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">is_branch</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="891:1">{<block_content pos:start="7:5" pos:end="889:19">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">rx</name></decl>, <decl pos:start="7:13" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:14">ry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">sa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">op</name></decl>, <decl pos:start="11:13" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:19">cnvt_op</name></decl>, <decl pos:start="11:22" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:24">op1</name></decl>, <decl pos:start="11:27" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:27" pos:end="11:32">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">funct</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">n_bytes</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:36"><expr pos:start="19:5" pos:end="19:35"><name pos:start="19:5" pos:end="19:6">op</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:21"><name pos:start="19:11" pos:end="19:13">ctx</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:21">opcode</name></name> <operator pos:start="19:23" pos:end="19:24">&gt;&gt;</operator> <literal type="number" pos:start="19:26" pos:end="19:27">11</literal><operator pos:start="19:28" pos:end="19:28">)</operator> <operator pos:start="19:30" pos:end="19:30">&amp;</operator> <literal type="number" pos:start="19:32" pos:end="19:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:6">sa</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:21"><name pos:start="21:11" pos:end="21:13">ctx</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:21">opcode</name></name> <operator pos:start="21:23" pos:end="21:24">&gt;&gt;</operator> <literal type="number" pos:start="21:26" pos:end="21:26">2</literal><operator pos:start="21:27" pos:end="21:27">)</operator> <operator pos:start="21:29" pos:end="21:29">&amp;</operator> <literal type="number" pos:start="21:31" pos:end="21:33">0x7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:6">sa</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <ternary pos:start="23:10" pos:end="23:25"><condition pos:start="23:10" pos:end="23:18"><expr pos:start="23:10" pos:end="23:16"><name pos:start="23:10" pos:end="23:11">sa</name> <operator pos:start="23:13" pos:end="23:14">==</operator> <literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr> ?</condition><then pos:start="23:20" pos:end="23:20"> <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">8</literal></expr> </then><else pos:start="23:22" pos:end="23:25">: <expr pos:start="23:24" pos:end="23:25"><name pos:start="23:24" pos:end="23:25">sa</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:6">rx</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:39"><name pos:start="25:10" pos:end="25:13">xlat</name><argument_list pos:start="25:14" pos:end="25:39">(<argument pos:start="25:15" pos:end="25:38"><expr pos:start="25:15" pos:end="25:38"><operator pos:start="25:15" pos:end="25:15">(</operator><name pos:start="25:16" pos:end="25:26"><name pos:start="25:16" pos:end="25:18">ctx</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:26">opcode</name></name> <operator pos:start="25:28" pos:end="25:29">&gt;&gt;</operator> <literal type="number" pos:start="25:31" pos:end="25:31">8</literal><operator pos:start="25:32" pos:end="25:32">)</operator> <operator pos:start="25:34" pos:end="25:34">&amp;</operator> <literal type="number" pos:start="25:36" pos:end="25:38">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:11">cnvt_op</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">(</operator><name pos:start="27:16" pos:end="27:26"><name pos:start="27:16" pos:end="27:18">ctx</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:26">opcode</name></name> <operator pos:start="27:28" pos:end="27:29">&gt;&gt;</operator> <literal type="number" pos:start="27:31" pos:end="27:31">5</literal><operator pos:start="27:32" pos:end="27:32">)</operator> <operator pos:start="27:34" pos:end="27:34">&amp;</operator> <literal type="number" pos:start="27:36" pos:end="27:38">0x7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:40"><expr pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:6">ry</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:39"><name pos:start="29:10" pos:end="29:13">xlat</name><argument_list pos:start="29:14" pos:end="29:39">(<argument pos:start="29:15" pos:end="29:38"><expr pos:start="29:15" pos:end="29:38"><operator pos:start="29:15" pos:end="29:15">(</operator><name pos:start="29:16" pos:end="29:26"><name pos:start="29:16" pos:end="29:18">ctx</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:26">opcode</name></name> <operator pos:start="29:28" pos:end="29:29">&gt;&gt;</operator> <literal type="number" pos:start="29:31" pos:end="29:31">5</literal><operator pos:start="29:32" pos:end="29:32">)</operator> <operator pos:start="29:34" pos:end="29:34">&amp;</operator> <literal type="number" pos:start="29:36" pos:end="29:38">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:7">op1</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <name pos:start="31:11" pos:end="31:16">offset</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:30"><name pos:start="31:20" pos:end="31:22">ctx</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:30">opcode</name></name> <operator pos:start="31:32" pos:end="31:32">&amp;</operator> <literal type="number" pos:start="31:34" pos:end="31:37">0x1f</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:16"><expr pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:11">n_bytes</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <literal type="number" pos:start="35:15" pos:end="35:15">2</literal></expr>;</expr_stmt>



    <switch pos:start="39:5" pos:end="885:5">switch <condition pos:start="39:12" pos:end="39:15">(<expr pos:start="39:13" pos:end="39:14"><name pos:start="39:13" pos:end="39:14">op</name></expr>)</condition> <block pos:start="39:17" pos:end="885:5">{<block_content pos:start="41:5" pos:end="883:14">

    <case pos:start="41:5" pos:end="41:25">case <expr pos:start="41:10" pos:end="41:24"><name pos:start="41:10" pos:end="41:24">M16_OPC_ADDIUSP</name></expr>:</case>

        <block pos:start="43:9" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:55">

            <decl_stmt pos:start="45:13" pos:end="45:55"><decl pos:start="45:13" pos:end="45:54"><type pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:19">int16_t</name></type> <name pos:start="45:21" pos:end="45:23">imm</name> <init pos:start="45:25" pos:end="45:54">= <expr pos:start="45:27" pos:end="45:54"><operator pos:start="45:27" pos:end="45:27">(</operator><operator pos:start="45:28" pos:end="45:28">(</operator><name pos:start="45:29" pos:end="45:35">uint8_t</name><operator pos:start="45:36" pos:end="45:36">)</operator> <name pos:start="45:38" pos:end="45:48"><name pos:start="45:38" pos:end="45:40">ctx</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:48">opcode</name></name><operator pos:start="45:49" pos:end="45:49">)</operator> <operator pos:start="45:51" pos:end="45:52">&lt;&lt;</operator> <literal type="number" pos:start="45:54" pos:end="45:54">2</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="49:13" pos:end="49:55"><expr pos:start="49:13" pos:end="49:54"><call pos:start="49:13" pos:end="49:54"><name pos:start="49:13" pos:end="49:25">gen_arith_imm</name><argument_list pos:start="49:26" pos:end="49:54">(<argument pos:start="49:27" pos:end="49:29"><expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:29">ctx</name></expr></argument>, <argument pos:start="49:32" pos:end="49:40"><expr pos:start="49:32" pos:end="49:40"><name pos:start="49:32" pos:end="49:40">OPC_ADDIU</name></expr></argument>, <argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><name pos:start="49:43" pos:end="49:44">rx</name></expr></argument>, <argument pos:start="49:47" pos:end="49:48"><expr pos:start="49:47" pos:end="49:48"><literal type="number" pos:start="49:47" pos:end="49:48">29</literal></expr></argument>, <argument pos:start="49:51" pos:end="49:53"><expr pos:start="49:51" pos:end="49:53"><name pos:start="49:51" pos:end="49:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:25">case <expr pos:start="55:10" pos:end="55:24"><name pos:start="55:10" pos:end="55:24">M16_OPC_ADDIUPC</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:65"><expr pos:start="57:9" pos:end="57:64"><call pos:start="57:9" pos:end="57:64"><name pos:start="57:9" pos:end="57:19">gen_addiupc</name><argument_list pos:start="57:20" pos:end="57:64">(<argument pos:start="57:21" pos:end="57:23"><expr pos:start="57:21" pos:end="57:23"><name pos:start="57:21" pos:end="57:23">ctx</name></expr></argument>, <argument pos:start="57:26" pos:end="57:27"><expr pos:start="57:26" pos:end="57:27"><name pos:start="57:26" pos:end="57:27">rx</name></expr></argument>, <argument pos:start="57:30" pos:end="57:57"><expr pos:start="57:30" pos:end="57:57"><operator pos:start="57:30" pos:end="57:30">(</operator><operator pos:start="57:31" pos:end="57:31">(</operator><name pos:start="57:32" pos:end="57:38">uint8_t</name><operator pos:start="57:39" pos:end="57:39">)</operator> <name pos:start="57:41" pos:end="57:51"><name pos:start="57:41" pos:end="57:43">ctx</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:51">opcode</name></name><operator pos:start="57:52" pos:end="57:52">)</operator> <operator pos:start="57:54" pos:end="57:55">&lt;&lt;</operator> <literal type="number" pos:start="57:57" pos:end="57:57">2</literal></expr></argument>, <argument pos:start="57:60" pos:end="57:60"><expr pos:start="57:60" pos:end="57:60"><literal type="number" pos:start="57:60" pos:end="57:60">0</literal></expr></argument>, <argument pos:start="57:63" pos:end="57:63"><expr pos:start="57:63" pos:end="57:63"><literal type="number" pos:start="57:63" pos:end="57:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:19">case <expr pos:start="61:10" pos:end="61:18"><name pos:start="61:10" pos:end="61:18">M16_OPC_B</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:44"><expr pos:start="63:9" pos:end="63:43"><name pos:start="63:9" pos:end="63:14">offset</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <operator pos:start="63:18" pos:end="63:18">(</operator><name pos:start="63:19" pos:end="63:29"><name pos:start="63:19" pos:end="63:21">ctx</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:29">opcode</name></name> <operator pos:start="63:31" pos:end="63:31">&amp;</operator> <literal type="number" pos:start="63:33" pos:end="63:37">0x7ff</literal><operator pos:start="63:38" pos:end="63:38">)</operator> <operator pos:start="63:40" pos:end="63:41">&lt;&lt;</operator> <literal type="number" pos:start="63:43" pos:end="63:43">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:14">offset</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <operator pos:start="65:18" pos:end="65:18">(</operator><name pos:start="65:19" pos:end="65:25">int16_t</name><operator pos:start="65:26" pos:end="65:26">)</operator><operator pos:start="65:27" pos:end="65:27">(</operator><name pos:start="65:28" pos:end="65:33">offset</name> <operator pos:start="65:35" pos:end="65:36">&lt;&lt;</operator> <literal type="number" pos:start="65:38" pos:end="65:38">4</literal><operator pos:start="65:39" pos:end="65:39">)</operator> <operator pos:start="65:41" pos:end="65:42">&gt;&gt;</operator> <literal type="number" pos:start="65:44" pos:end="65:44">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:58"><expr pos:start="67:9" pos:end="67:57"><call pos:start="67:9" pos:end="67:57"><name pos:start="67:9" pos:end="67:26">gen_compute_branch</name><argument_list pos:start="67:27" pos:end="67:57">(<argument pos:start="67:28" pos:end="67:30"><expr pos:start="67:28" pos:end="67:30"><name pos:start="67:28" pos:end="67:30">ctx</name></expr></argument>, <argument pos:start="67:33" pos:end="67:39"><expr pos:start="67:33" pos:end="67:39"><name pos:start="67:33" pos:end="67:39">OPC_BEQ</name></expr></argument>, <argument pos:start="67:42" pos:end="67:42"><expr pos:start="67:42" pos:end="67:42"><literal type="number" pos:start="67:42" pos:end="67:42">2</literal></expr></argument>, <argument pos:start="67:45" pos:end="67:45"><expr pos:start="67:45" pos:end="67:45"><literal type="number" pos:start="67:45" pos:end="67:45">0</literal></expr></argument>, <argument pos:start="67:48" pos:end="67:48"><expr pos:start="67:48" pos:end="67:48"><literal type="number" pos:start="67:48" pos:end="67:48">0</literal></expr></argument>, <argument pos:start="67:51" pos:end="67:56"><expr pos:start="67:51" pos:end="67:56"><name pos:start="67:51" pos:end="67:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="69:9" pos:end="69:68">/* No delay slot, so just process as a normal instruction */</comment>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:21">case <expr pos:start="73:10" pos:end="73:20"><name pos:start="73:10" pos:end="73:20">M16_OPC_JAL</name></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:49"><expr pos:start="75:9" pos:end="75:48"><name pos:start="75:9" pos:end="75:14">offset</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:48"><name pos:start="75:18" pos:end="75:30">cpu_lduw_code</name><argument_list pos:start="75:31" pos:end="75:48">(<argument pos:start="75:32" pos:end="75:34"><expr pos:start="75:32" pos:end="75:34"><name pos:start="75:32" pos:end="75:34">env</name></expr></argument>, <argument pos:start="75:37" pos:end="75:47"><expr pos:start="75:37" pos:end="75:47"><name pos:start="75:37" pos:end="75:43"><name pos:start="75:37" pos:end="75:39">ctx</name><operator pos:start="75:40" pos:end="75:41">-&gt;</operator><name pos:start="75:42" pos:end="75:43">pc</name></name> <operator pos:start="75:45" pos:end="75:45">+</operator> <literal type="number" pos:start="75:47" pos:end="75:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="81:33"><expr pos:start="77:9" pos:end="81:32"><name pos:start="77:9" pos:end="77:14">offset</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <operator pos:start="77:18" pos:end="77:18">(</operator><operator pos:start="77:19" pos:end="77:19">(</operator><operator pos:start="77:20" pos:end="77:20">(</operator><name pos:start="77:21" pos:end="77:31"><name pos:start="77:21" pos:end="77:23">ctx</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:31">opcode</name></name> <operator pos:start="77:33" pos:end="77:33">&amp;</operator> <literal type="number" pos:start="77:35" pos:end="77:38">0x1f</literal><operator pos:start="77:39" pos:end="77:39">)</operator> <operator pos:start="77:41" pos:end="77:42">&lt;&lt;</operator> <literal type="number" pos:start="77:44" pos:end="77:45">21</literal><operator pos:start="77:46" pos:end="77:46">)</operator>

                  <operator pos:start="79:19" pos:end="79:19">|</operator> <operator pos:start="79:21" pos:end="79:21">(</operator><operator pos:start="79:22" pos:end="79:22">(</operator><name pos:start="79:23" pos:end="79:33"><name pos:start="79:23" pos:end="79:25">ctx</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:33">opcode</name></name> <operator pos:start="79:35" pos:end="79:36">&gt;&gt;</operator> <literal type="number" pos:start="79:38" pos:end="79:38">5</literal><operator pos:start="79:39" pos:end="79:39">)</operator> <operator pos:start="79:41" pos:end="79:41">&amp;</operator> <literal type="number" pos:start="79:43" pos:end="79:46">0x1f</literal><operator pos:start="79:47" pos:end="79:47">)</operator> <operator pos:start="79:49" pos:end="79:50">&lt;&lt;</operator> <literal type="number" pos:start="79:52" pos:end="79:53">16</literal>

                  <operator pos:start="81:19" pos:end="81:19">|</operator> <name pos:start="81:21" pos:end="81:26">offset</name><operator pos:start="81:27" pos:end="81:27">)</operator> <operator pos:start="81:29" pos:end="81:30">&lt;&lt;</operator> <literal type="number" pos:start="81:32" pos:end="81:32">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:64"><expr pos:start="83:9" pos:end="83:63"><name pos:start="83:9" pos:end="83:10">op</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <ternary pos:start="83:14" pos:end="83:63"><condition pos:start="83:14" pos:end="83:42"><expr pos:start="83:14" pos:end="83:40"><operator pos:start="83:14" pos:end="83:14">(</operator><operator pos:start="83:15" pos:end="83:15">(</operator><name pos:start="83:16" pos:end="83:26"><name pos:start="83:16" pos:end="83:18">ctx</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:26">opcode</name></name> <operator pos:start="83:28" pos:end="83:29">&gt;&gt;</operator> <literal type="number" pos:start="83:31" pos:end="83:32">10</literal><operator pos:start="83:33" pos:end="83:33">)</operator> <operator pos:start="83:35" pos:end="83:35">&amp;</operator> <literal type="number" pos:start="83:37" pos:end="83:39">0x1</literal><operator pos:start="83:40" pos:end="83:40">)</operator></expr> ?</condition><then pos:start="83:44" pos:end="83:52"> <expr pos:start="83:44" pos:end="83:52"><name pos:start="83:44" pos:end="83:52">OPC_JALXS</name></expr> </then><else pos:start="83:54" pos:end="83:63">: <expr pos:start="83:56" pos:end="83:63"><name pos:start="83:56" pos:end="83:63">OPC_JALS</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:55"><expr pos:start="85:9" pos:end="85:54"><call pos:start="85:9" pos:end="85:54"><name pos:start="85:9" pos:end="85:26">gen_compute_branch</name><argument_list pos:start="85:27" pos:end="85:54">(<argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">ctx</name></expr></argument>, <argument pos:start="85:33" pos:end="85:34"><expr pos:start="85:33" pos:end="85:34"><name pos:start="85:33" pos:end="85:34">op</name></expr></argument>, <argument pos:start="85:37" pos:end="85:37"><expr pos:start="85:37" pos:end="85:37"><literal type="number" pos:start="85:37" pos:end="85:37">4</literal></expr></argument>, <argument pos:start="85:40" pos:end="85:41"><expr pos:start="85:40" pos:end="85:41"><name pos:start="85:40" pos:end="85:41">rx</name></expr></argument>, <argument pos:start="85:44" pos:end="85:45"><expr pos:start="85:44" pos:end="85:45"><name pos:start="85:44" pos:end="85:45">ry</name></expr></argument>, <argument pos:start="85:48" pos:end="85:53"><expr pos:start="85:48" pos:end="85:53"><name pos:start="85:48" pos:end="85:53">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:20"><expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:15">n_bytes</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <literal type="number" pos:start="87:19" pos:end="87:19">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><operator pos:start="89:9" pos:end="89:9">*</operator><name pos:start="89:10" pos:end="89:18">is_branch</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:22">1</literal></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:22">case <expr pos:start="93:10" pos:end="93:21"><name pos:start="93:10" pos:end="93:21">M16_OPC_BEQZ</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:79"><expr pos:start="95:9" pos:end="95:78"><call pos:start="95:9" pos:end="95:78"><name pos:start="95:9" pos:end="95:26">gen_compute_branch</name><argument_list pos:start="95:27" pos:end="95:78">(<argument pos:start="95:28" pos:end="95:30"><expr pos:start="95:28" pos:end="95:30"><name pos:start="95:28" pos:end="95:30">ctx</name></expr></argument>, <argument pos:start="95:33" pos:end="95:39"><expr pos:start="95:33" pos:end="95:39"><name pos:start="95:33" pos:end="95:39">OPC_BEQ</name></expr></argument>, <argument pos:start="95:42" pos:end="95:42"><expr pos:start="95:42" pos:end="95:42"><literal type="number" pos:start="95:42" pos:end="95:42">2</literal></expr></argument>, <argument pos:start="95:45" pos:end="95:46"><expr pos:start="95:45" pos:end="95:46"><name pos:start="95:45" pos:end="95:46">rx</name></expr></argument>, <argument pos:start="95:49" pos:end="95:49"><expr pos:start="95:49" pos:end="95:49"><literal type="number" pos:start="95:49" pos:end="95:49">0</literal></expr></argument>, <argument pos:start="95:52" pos:end="95:77"><expr pos:start="95:52" pos:end="95:77"><operator pos:start="95:52" pos:end="95:52">(</operator><operator pos:start="95:53" pos:end="95:53">(</operator><name pos:start="95:54" pos:end="95:59">int8_t</name><operator pos:start="95:60" pos:end="95:60">)</operator><name pos:start="95:61" pos:end="95:71"><name pos:start="95:61" pos:end="95:63">ctx</name><operator pos:start="95:64" pos:end="95:65">-&gt;</operator><name pos:start="95:66" pos:end="95:71">opcode</name></name><operator pos:start="95:72" pos:end="95:72">)</operator> <operator pos:start="95:74" pos:end="95:75">&lt;&lt;</operator> <literal type="number" pos:start="95:77" pos:end="95:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="97:9" pos:end="97:68">/* No delay slot, so just process as a normal instruction */</comment>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <case pos:start="101:5" pos:end="101:23">case <expr pos:start="101:10" pos:end="101:22"><name pos:start="101:10" pos:end="101:22">M16_OPC_BNEQZ</name></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:79"><expr pos:start="103:9" pos:end="103:78"><call pos:start="103:9" pos:end="103:78"><name pos:start="103:9" pos:end="103:26">gen_compute_branch</name><argument_list pos:start="103:27" pos:end="103:78">(<argument pos:start="103:28" pos:end="103:30"><expr pos:start="103:28" pos:end="103:30"><name pos:start="103:28" pos:end="103:30">ctx</name></expr></argument>, <argument pos:start="103:33" pos:end="103:39"><expr pos:start="103:33" pos:end="103:39"><name pos:start="103:33" pos:end="103:39">OPC_BNE</name></expr></argument>, <argument pos:start="103:42" pos:end="103:42"><expr pos:start="103:42" pos:end="103:42"><literal type="number" pos:start="103:42" pos:end="103:42">2</literal></expr></argument>, <argument pos:start="103:45" pos:end="103:46"><expr pos:start="103:45" pos:end="103:46"><name pos:start="103:45" pos:end="103:46">rx</name></expr></argument>, <argument pos:start="103:49" pos:end="103:49"><expr pos:start="103:49" pos:end="103:49"><literal type="number" pos:start="103:49" pos:end="103:49">0</literal></expr></argument>, <argument pos:start="103:52" pos:end="103:77"><expr pos:start="103:52" pos:end="103:77"><operator pos:start="103:52" pos:end="103:52">(</operator><operator pos:start="103:53" pos:end="103:53">(</operator><name pos:start="103:54" pos:end="103:59">int8_t</name><operator pos:start="103:60" pos:end="103:60">)</operator><name pos:start="103:61" pos:end="103:71"><name pos:start="103:61" pos:end="103:63">ctx</name><operator pos:start="103:64" pos:end="103:65">-&gt;</operator><name pos:start="103:66" pos:end="103:71">opcode</name></name><operator pos:start="103:72" pos:end="103:72">)</operator> <operator pos:start="103:74" pos:end="103:75">&lt;&lt;</operator> <literal type="number" pos:start="103:77" pos:end="103:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="105:9" pos:end="105:68">/* No delay slot, so just process as a normal instruction */</comment>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:23">case <expr pos:start="109:10" pos:end="109:22"><name pos:start="109:10" pos:end="109:22">M16_OPC_SHIFT</name></expr>:</case>

        <switch pos:start="111:9" pos:end="147:9">switch <condition pos:start="111:16" pos:end="111:34">(<expr pos:start="111:17" pos:end="111:33"><name pos:start="111:17" pos:end="111:27"><name pos:start="111:17" pos:end="111:19">ctx</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:27">opcode</name></name> <operator pos:start="111:29" pos:end="111:29">&amp;</operator> <literal type="number" pos:start="111:31" pos:end="111:33">0x3</literal></expr>)</condition> <block pos:start="111:36" pos:end="147:9">{<block_content pos:start="113:9" pos:end="145:18">

        <case pos:start="113:9" pos:end="113:17">case <expr pos:start="113:14" pos:end="113:16"><literal type="number" pos:start="113:14" pos:end="113:16">0x0</literal></expr>:</case>

            <expr_stmt pos:start="115:13" pos:end="115:52"><expr pos:start="115:13" pos:end="115:51"><call pos:start="115:13" pos:end="115:51"><name pos:start="115:13" pos:end="115:25">gen_shift_imm</name><argument_list pos:start="115:26" pos:end="115:51">(<argument pos:start="115:27" pos:end="115:29"><expr pos:start="115:27" pos:end="115:29"><name pos:start="115:27" pos:end="115:29">ctx</name></expr></argument>, <argument pos:start="115:32" pos:end="115:38"><expr pos:start="115:32" pos:end="115:38"><name pos:start="115:32" pos:end="115:38">OPC_SLL</name></expr></argument>, <argument pos:start="115:41" pos:end="115:42"><expr pos:start="115:41" pos:end="115:42"><name pos:start="115:41" pos:end="115:42">rx</name></expr></argument>, <argument pos:start="115:45" pos:end="115:46"><expr pos:start="115:45" pos:end="115:46"><name pos:start="115:45" pos:end="115:46">ry</name></expr></argument>, <argument pos:start="115:49" pos:end="115:50"><expr pos:start="115:49" pos:end="115:50"><name pos:start="115:49" pos:end="115:50">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <case pos:start="119:9" pos:end="122:0">case <expr pos:start="119:14" pos:end="119:16"><literal type="number" pos:start="119:14" pos:end="119:16">0x1</literal></expr>:</case>

<cpp:if pos:start="121:1" pos:end="121:26">#<cpp:directive pos:start="121:2" pos:end="121:3">if</cpp:directive> <expr pos:start="121:5" pos:end="121:26"><call pos:start="121:5" pos:end="121:26"><name pos:start="121:5" pos:end="121:11">defined</name><argument_list pos:start="121:12" pos:end="121:26">(<argument pos:start="121:13" pos:end="121:25"><expr pos:start="121:13" pos:end="121:25"><name pos:start="121:13" pos:end="121:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="123:13" pos:end="123:31"><expr pos:start="123:13" pos:end="123:30"><call pos:start="123:13" pos:end="123:30"><name pos:start="123:13" pos:end="123:25">check_mips_64</name><argument_list pos:start="123:26" pos:end="123:30">(<argument pos:start="123:27" pos:end="123:29"><expr pos:start="123:27" pos:end="123:29"><name pos:start="123:27" pos:end="123:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="128:0"><expr pos:start="125:13" pos:end="125:52"><call pos:start="125:13" pos:end="125:52"><name pos:start="125:13" pos:end="125:25">gen_shift_imm</name><argument_list pos:start="125:26" pos:end="125:52">(<argument pos:start="125:27" pos:end="125:29"><expr pos:start="125:27" pos:end="125:29"><name pos:start="125:27" pos:end="125:29">ctx</name></expr></argument>, <argument pos:start="125:32" pos:end="125:39"><expr pos:start="125:32" pos:end="125:39"><name pos:start="125:32" pos:end="125:39">OPC_DSLL</name></expr></argument>, <argument pos:start="125:42" pos:end="125:43"><expr pos:start="125:42" pos:end="125:43"><name pos:start="125:42" pos:end="125:43">rx</name></expr></argument>, <argument pos:start="125:46" pos:end="125:47"><expr pos:start="125:46" pos:end="125:47"><name pos:start="125:46" pos:end="125:47">ry</name></expr></argument>, <argument pos:start="125:50" pos:end="125:51"><expr pos:start="125:50" pos:end="125:51"><name pos:start="125:50" pos:end="125:51">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="127:1" pos:end="127:5">#<cpp:directive pos:start="127:2" pos:end="127:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="129:13" pos:end="132:0"><expr pos:start="129:13" pos:end="129:44"><call pos:start="129:13" pos:end="129:44"><name pos:start="129:13" pos:end="129:30">generate_exception</name><argument_list pos:start="129:31" pos:end="129:44">(<argument pos:start="129:32" pos:end="129:34"><expr pos:start="129:32" pos:end="129:34"><name pos:start="129:32" pos:end="129:34">ctx</name></expr></argument>, <argument pos:start="129:37" pos:end="129:43"><expr pos:start="129:37" pos:end="129:43"><name pos:start="129:37" pos:end="129:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:17">case <expr pos:start="135:14" pos:end="135:16"><literal type="number" pos:start="135:14" pos:end="135:16">0x2</literal></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:52"><expr pos:start="137:13" pos:end="137:51"><call pos:start="137:13" pos:end="137:51"><name pos:start="137:13" pos:end="137:25">gen_shift_imm</name><argument_list pos:start="137:26" pos:end="137:51">(<argument pos:start="137:27" pos:end="137:29"><expr pos:start="137:27" pos:end="137:29"><name pos:start="137:27" pos:end="137:29">ctx</name></expr></argument>, <argument pos:start="137:32" pos:end="137:38"><expr pos:start="137:32" pos:end="137:38"><name pos:start="137:32" pos:end="137:38">OPC_SRL</name></expr></argument>, <argument pos:start="137:41" pos:end="137:42"><expr pos:start="137:41" pos:end="137:42"><name pos:start="137:41" pos:end="137:42">rx</name></expr></argument>, <argument pos:start="137:45" pos:end="137:46"><expr pos:start="137:45" pos:end="137:46"><name pos:start="137:45" pos:end="137:46">ry</name></expr></argument>, <argument pos:start="137:49" pos:end="137:50"><expr pos:start="137:49" pos:end="137:50"><name pos:start="137:49" pos:end="137:50">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        <case pos:start="141:9" pos:end="141:17">case <expr pos:start="141:14" pos:end="141:16"><literal type="number" pos:start="141:14" pos:end="141:16">0x3</literal></expr>:</case>

            <expr_stmt pos:start="143:13" pos:end="143:52"><expr pos:start="143:13" pos:end="143:51"><call pos:start="143:13" pos:end="143:51"><name pos:start="143:13" pos:end="143:25">gen_shift_imm</name><argument_list pos:start="143:26" pos:end="143:51">(<argument pos:start="143:27" pos:end="143:29"><expr pos:start="143:27" pos:end="143:29"><name pos:start="143:27" pos:end="143:29">ctx</name></expr></argument>, <argument pos:start="143:32" pos:end="143:38"><expr pos:start="143:32" pos:end="143:38"><name pos:start="143:32" pos:end="143:38">OPC_SRA</name></expr></argument>, <argument pos:start="143:41" pos:end="143:42"><expr pos:start="143:41" pos:end="143:42"><name pos:start="143:41" pos:end="143:42">rx</name></expr></argument>, <argument pos:start="143:45" pos:end="143:46"><expr pos:start="143:45" pos:end="143:46"><name pos:start="143:45" pos:end="143:46">ry</name></expr></argument>, <argument pos:start="143:49" pos:end="143:50"><expr pos:start="143:49" pos:end="143:50"><name pos:start="143:49" pos:end="143:50">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="149:9" pos:end="152:0">break;</break>

<cpp:if pos:start="151:1" pos:end="151:26">#<cpp:directive pos:start="151:2" pos:end="151:3">if</cpp:directive> <expr pos:start="151:5" pos:end="151:26"><call pos:start="151:5" pos:end="151:26"><name pos:start="151:5" pos:end="151:11">defined</name><argument_list pos:start="151:12" pos:end="151:26">(<argument pos:start="151:13" pos:end="151:25"><expr pos:start="151:13" pos:end="151:25"><name pos:start="151:13" pos:end="151:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="153:5" pos:end="153:20">case <expr pos:start="153:10" pos:end="153:19"><name pos:start="153:10" pos:end="153:19">M16_OPC_LD</name></expr>:</case>

        <expr_stmt pos:start="155:9" pos:end="155:27"><expr pos:start="155:9" pos:end="155:26"><call pos:start="155:9" pos:end="155:26"><name pos:start="155:9" pos:end="155:21">check_mips_64</name><argument_list pos:start="155:22" pos:end="155:26">(<argument pos:start="155:23" pos:end="155:25"><expr pos:start="155:23" pos:end="155:25"><name pos:start="155:23" pos:end="155:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:49"><expr pos:start="157:9" pos:end="157:48"><call pos:start="157:9" pos:end="157:48"><name pos:start="157:9" pos:end="157:14">gen_ld</name><argument_list pos:start="157:15" pos:end="157:48">(<argument pos:start="157:16" pos:end="157:18"><expr pos:start="157:16" pos:end="157:18"><name pos:start="157:16" pos:end="157:18">ctx</name></expr></argument>, <argument pos:start="157:21" pos:end="157:26"><expr pos:start="157:21" pos:end="157:26"><name pos:start="157:21" pos:end="157:26">OPC_LD</name></expr></argument>, <argument pos:start="157:29" pos:end="157:30"><expr pos:start="157:29" pos:end="157:30"><name pos:start="157:29" pos:end="157:30">ry</name></expr></argument>, <argument pos:start="157:33" pos:end="157:34"><expr pos:start="157:33" pos:end="157:34"><name pos:start="157:33" pos:end="157:34">rx</name></expr></argument>, <argument pos:start="157:37" pos:end="157:47"><expr pos:start="157:37" pos:end="157:47"><name pos:start="157:37" pos:end="157:42">offset</name> <operator pos:start="157:44" pos:end="157:45">&lt;&lt;</operator> <literal type="number" pos:start="157:47" pos:end="157:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="162:0">break;</break>

<cpp:endif pos:start="161:1" pos:end="161:6">#<cpp:directive pos:start="161:2" pos:end="161:6">endif</cpp:directive></cpp:endif>

    <case pos:start="163:5" pos:end="163:22">case <expr pos:start="163:10" pos:end="163:21"><name pos:start="163:10" pos:end="163:21">M16_OPC_RRIA</name></expr>:</case>

        <block pos:start="165:9" pos:end="191:9">{<block_content pos:start="167:13" pos:end="189:13">

            <decl_stmt pos:start="167:13" pos:end="167:66"><decl pos:start="167:13" pos:end="167:65"><type pos:start="167:13" pos:end="167:19"><name pos:start="167:13" pos:end="167:19">int16_t</name></type> <name pos:start="167:21" pos:end="167:23">imm</name> <init pos:start="167:25" pos:end="167:65">= <expr pos:start="167:27" pos:end="167:65"><operator pos:start="167:27" pos:end="167:27">(</operator><name pos:start="167:28" pos:end="167:33">int8_t</name><operator pos:start="167:34" pos:end="167:34">)</operator><operator pos:start="167:35" pos:end="167:35">(</operator><operator pos:start="167:36" pos:end="167:36">(</operator><name pos:start="167:37" pos:end="167:47"><name pos:start="167:37" pos:end="167:39">ctx</name><operator pos:start="167:40" pos:end="167:41">-&gt;</operator><name pos:start="167:42" pos:end="167:47">opcode</name></name> <operator pos:start="167:49" pos:end="167:49">&amp;</operator> <literal type="number" pos:start="167:51" pos:end="167:53">0xf</literal><operator pos:start="167:54" pos:end="167:54">)</operator> <operator pos:start="167:56" pos:end="167:57">&lt;&lt;</operator> <literal type="number" pos:start="167:59" pos:end="167:59">4</literal><operator pos:start="167:60" pos:end="167:60">)</operator> <operator pos:start="167:62" pos:end="167:63">&gt;&gt;</operator> <literal type="number" pos:start="167:65" pos:end="167:65">4</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="171:13" pos:end="189:13"><if pos:start="171:13" pos:end="185:13">if <condition pos:start="171:16" pos:end="171:39">(<expr pos:start="171:17" pos:end="171:38"><operator pos:start="171:17" pos:end="171:17">(</operator><name pos:start="171:18" pos:end="171:28"><name pos:start="171:18" pos:end="171:20">ctx</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:28">opcode</name></name> <operator pos:start="171:30" pos:end="171:31">&gt;&gt;</operator> <literal type="number" pos:start="171:33" pos:end="171:33">4</literal><operator pos:start="171:34" pos:end="171:34">)</operator> <operator pos:start="171:36" pos:end="171:36">&amp;</operator> <literal type="number" pos:start="171:38" pos:end="171:38">1</literal></expr>)</condition> <block pos:start="171:41" pos:end="185:13">{<block_content pos:start="175:17" pos:end="184:0">

<cpp:if pos:start="173:1" pos:end="173:26">#<cpp:directive pos:start="173:2" pos:end="173:3">if</cpp:directive> <expr pos:start="173:5" pos:end="173:26"><call pos:start="173:5" pos:end="173:26"><name pos:start="173:5" pos:end="173:11">defined</name><argument_list pos:start="173:12" pos:end="173:26">(<argument pos:start="173:13" pos:end="173:25"><expr pos:start="173:13" pos:end="173:25"><name pos:start="173:13" pos:end="173:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <expr_stmt pos:start="175:17" pos:end="175:35"><expr pos:start="175:17" pos:end="175:34"><call pos:start="175:17" pos:end="175:34"><name pos:start="175:17" pos:end="175:29">check_mips_64</name><argument_list pos:start="175:30" pos:end="175:34">(<argument pos:start="175:31" pos:end="175:33"><expr pos:start="175:31" pos:end="175:33"><name pos:start="175:31" pos:end="175:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="180:0"><expr pos:start="177:17" pos:end="177:59"><call pos:start="177:17" pos:end="177:59"><name pos:start="177:17" pos:end="177:29">gen_arith_imm</name><argument_list pos:start="177:30" pos:end="177:59">(<argument pos:start="177:31" pos:end="177:33"><expr pos:start="177:31" pos:end="177:33"><name pos:start="177:31" pos:end="177:33">ctx</name></expr></argument>, <argument pos:start="177:36" pos:end="177:45"><expr pos:start="177:36" pos:end="177:45"><name pos:start="177:36" pos:end="177:45">OPC_DADDIU</name></expr></argument>, <argument pos:start="177:48" pos:end="177:49"><expr pos:start="177:48" pos:end="177:49"><name pos:start="177:48" pos:end="177:49">ry</name></expr></argument>, <argument pos:start="177:52" pos:end="177:53"><expr pos:start="177:52" pos:end="177:53"><name pos:start="177:52" pos:end="177:53">rx</name></expr></argument>, <argument pos:start="177:56" pos:end="177:58"><expr pos:start="177:56" pos:end="177:58"><name pos:start="177:56" pos:end="177:58">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="179:1" pos:end="179:5">#<cpp:directive pos:start="179:2" pos:end="179:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="181:17" pos:end="184:0"><expr pos:start="181:17" pos:end="181:48"><call pos:start="181:17" pos:end="181:48"><name pos:start="181:17" pos:end="181:34">generate_exception</name><argument_list pos:start="181:35" pos:end="181:48">(<argument pos:start="181:36" pos:end="181:38"><expr pos:start="181:36" pos:end="181:38"><name pos:start="181:36" pos:end="181:38">ctx</name></expr></argument>, <argument pos:start="181:41" pos:end="181:47"><expr pos:start="181:41" pos:end="181:47"><name pos:start="181:41" pos:end="181:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="185:15" pos:end="189:13">else <block pos:start="185:20" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:59">

                <expr_stmt pos:start="187:17" pos:end="187:59"><expr pos:start="187:17" pos:end="187:58"><call pos:start="187:17" pos:end="187:58"><name pos:start="187:17" pos:end="187:29">gen_arith_imm</name><argument_list pos:start="187:30" pos:end="187:58">(<argument pos:start="187:31" pos:end="187:33"><expr pos:start="187:31" pos:end="187:33"><name pos:start="187:31" pos:end="187:33">ctx</name></expr></argument>, <argument pos:start="187:36" pos:end="187:44"><expr pos:start="187:36" pos:end="187:44"><name pos:start="187:36" pos:end="187:44">OPC_ADDIU</name></expr></argument>, <argument pos:start="187:47" pos:end="187:48"><expr pos:start="187:47" pos:end="187:48"><name pos:start="187:47" pos:end="187:48">ry</name></expr></argument>, <argument pos:start="187:51" pos:end="187:52"><expr pos:start="187:51" pos:end="187:52"><name pos:start="187:51" pos:end="187:52">rx</name></expr></argument>, <argument pos:start="187:55" pos:end="187:57"><expr pos:start="187:55" pos:end="187:57"><name pos:start="187:55" pos:end="187:57">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <case pos:start="195:5" pos:end="195:24">case <expr pos:start="195:10" pos:end="195:23"><name pos:start="195:10" pos:end="195:23">M16_OPC_ADDIU8</name></expr>:</case>

        <block pos:start="197:9" pos:end="205:9">{<block_content pos:start="199:13" pos:end="203:55">

            <decl_stmt pos:start="199:13" pos:end="199:47"><decl pos:start="199:13" pos:end="199:46"><type pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:19">int16_t</name></type> <name pos:start="199:21" pos:end="199:23">imm</name> <init pos:start="199:25" pos:end="199:46">= <expr pos:start="199:27" pos:end="199:46"><operator pos:start="199:27" pos:end="199:27">(</operator><name pos:start="199:28" pos:end="199:33">int8_t</name><operator pos:start="199:34" pos:end="199:34">)</operator> <name pos:start="199:36" pos:end="199:46"><name pos:start="199:36" pos:end="199:38">ctx</name><operator pos:start="199:39" pos:end="199:40">-&gt;</operator><name pos:start="199:41" pos:end="199:46">opcode</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="203:13" pos:end="203:55"><expr pos:start="203:13" pos:end="203:54"><call pos:start="203:13" pos:end="203:54"><name pos:start="203:13" pos:end="203:25">gen_arith_imm</name><argument_list pos:start="203:26" pos:end="203:54">(<argument pos:start="203:27" pos:end="203:29"><expr pos:start="203:27" pos:end="203:29"><name pos:start="203:27" pos:end="203:29">ctx</name></expr></argument>, <argument pos:start="203:32" pos:end="203:40"><expr pos:start="203:32" pos:end="203:40"><name pos:start="203:32" pos:end="203:40">OPC_ADDIU</name></expr></argument>, <argument pos:start="203:43" pos:end="203:44"><expr pos:start="203:43" pos:end="203:44"><name pos:start="203:43" pos:end="203:44">rx</name></expr></argument>, <argument pos:start="203:47" pos:end="203:48"><expr pos:start="203:47" pos:end="203:48"><name pos:start="203:47" pos:end="203:48">rx</name></expr></argument>, <argument pos:start="203:51" pos:end="203:53"><expr pos:start="203:51" pos:end="203:53"><name pos:start="203:51" pos:end="203:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="207:9" pos:end="207:14">break;</break>

    <case pos:start="209:5" pos:end="209:22">case <expr pos:start="209:10" pos:end="209:21"><name pos:start="209:10" pos:end="209:21">M16_OPC_SLTI</name></expr>:</case>

        <block pos:start="211:9" pos:end="217:9">{<block_content pos:start="213:13" pos:end="215:52">

            <decl_stmt pos:start="213:13" pos:end="213:48"><decl pos:start="213:13" pos:end="213:47"><type pos:start="213:13" pos:end="213:19"><name pos:start="213:13" pos:end="213:19">int16_t</name></type> <name pos:start="213:21" pos:end="213:23">imm</name> <init pos:start="213:25" pos:end="213:47">= <expr pos:start="213:27" pos:end="213:47"><operator pos:start="213:27" pos:end="213:27">(</operator><name pos:start="213:28" pos:end="213:34">uint8_t</name><operator pos:start="213:35" pos:end="213:35">)</operator> <name pos:start="213:37" pos:end="213:47"><name pos:start="213:37" pos:end="213:39">ctx</name><operator pos:start="213:40" pos:end="213:41">-&gt;</operator><name pos:start="213:42" pos:end="213:47">opcode</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:52"><expr pos:start="215:13" pos:end="215:51"><call pos:start="215:13" pos:end="215:51"><name pos:start="215:13" pos:end="215:23">gen_slt_imm</name><argument_list pos:start="215:24" pos:end="215:51">(<argument pos:start="215:25" pos:end="215:27"><expr pos:start="215:25" pos:end="215:27"><name pos:start="215:25" pos:end="215:27">ctx</name></expr></argument>, <argument pos:start="215:30" pos:end="215:37"><expr pos:start="215:30" pos:end="215:37"><name pos:start="215:30" pos:end="215:37">OPC_SLTI</name></expr></argument>, <argument pos:start="215:40" pos:end="215:41"><expr pos:start="215:40" pos:end="215:41"><literal type="number" pos:start="215:40" pos:end="215:41">24</literal></expr></argument>, <argument pos:start="215:44" pos:end="215:45"><expr pos:start="215:44" pos:end="215:45"><name pos:start="215:44" pos:end="215:45">rx</name></expr></argument>, <argument pos:start="215:48" pos:end="215:50"><expr pos:start="215:48" pos:end="215:50"><name pos:start="215:48" pos:end="215:50">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="219:9" pos:end="219:14">break;</break>

    <case pos:start="221:5" pos:end="221:23">case <expr pos:start="221:10" pos:end="221:22"><name pos:start="221:10" pos:end="221:22">M16_OPC_SLTIU</name></expr>:</case>

        <block pos:start="223:9" pos:end="229:9">{<block_content pos:start="225:13" pos:end="227:53">

            <decl_stmt pos:start="225:13" pos:end="225:48"><decl pos:start="225:13" pos:end="225:47"><type pos:start="225:13" pos:end="225:19"><name pos:start="225:13" pos:end="225:19">int16_t</name></type> <name pos:start="225:21" pos:end="225:23">imm</name> <init pos:start="225:25" pos:end="225:47">= <expr pos:start="225:27" pos:end="225:47"><operator pos:start="225:27" pos:end="225:27">(</operator><name pos:start="225:28" pos:end="225:34">uint8_t</name><operator pos:start="225:35" pos:end="225:35">)</operator> <name pos:start="225:37" pos:end="225:47"><name pos:start="225:37" pos:end="225:39">ctx</name><operator pos:start="225:40" pos:end="225:41">-&gt;</operator><name pos:start="225:42" pos:end="225:47">opcode</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:53"><expr pos:start="227:13" pos:end="227:52"><call pos:start="227:13" pos:end="227:52"><name pos:start="227:13" pos:end="227:23">gen_slt_imm</name><argument_list pos:start="227:24" pos:end="227:52">(<argument pos:start="227:25" pos:end="227:27"><expr pos:start="227:25" pos:end="227:27"><name pos:start="227:25" pos:end="227:27">ctx</name></expr></argument>, <argument pos:start="227:30" pos:end="227:38"><expr pos:start="227:30" pos:end="227:38"><name pos:start="227:30" pos:end="227:38">OPC_SLTIU</name></expr></argument>, <argument pos:start="227:41" pos:end="227:42"><expr pos:start="227:41" pos:end="227:42"><literal type="number" pos:start="227:41" pos:end="227:42">24</literal></expr></argument>, <argument pos:start="227:45" pos:end="227:46"><expr pos:start="227:45" pos:end="227:46"><name pos:start="227:45" pos:end="227:46">rx</name></expr></argument>, <argument pos:start="227:49" pos:end="227:51"><expr pos:start="227:49" pos:end="227:51"><name pos:start="227:49" pos:end="227:51">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="231:9" pos:end="231:14">break;</break>

    <case pos:start="233:5" pos:end="233:20">case <expr pos:start="233:10" pos:end="233:19"><name pos:start="233:10" pos:end="233:19">M16_OPC_I8</name></expr>:</case>

        <block pos:start="235:9" pos:end="353:9">{<block_content pos:start="237:13" pos:end="351:13">

            <decl_stmt pos:start="237:13" pos:end="237:22"><decl pos:start="237:13" pos:end="237:21"><type pos:start="237:13" pos:end="237:15"><name pos:start="237:13" pos:end="237:15">int</name></type> <name pos:start="237:17" pos:end="237:21">reg32</name></decl>;</decl_stmt>



            <expr_stmt pos:start="241:13" pos:end="241:45"><expr pos:start="241:13" pos:end="241:44"><name pos:start="241:13" pos:end="241:17">funct</name> <operator pos:start="241:19" pos:end="241:19">=</operator> <operator pos:start="241:21" pos:end="241:21">(</operator><name pos:start="241:22" pos:end="241:32"><name pos:start="241:22" pos:end="241:24">ctx</name><operator pos:start="241:25" pos:end="241:26">-&gt;</operator><name pos:start="241:27" pos:end="241:32">opcode</name></name> <operator pos:start="241:34" pos:end="241:35">&gt;&gt;</operator> <literal type="number" pos:start="241:37" pos:end="241:37">8</literal><operator pos:start="241:38" pos:end="241:38">)</operator> <operator pos:start="241:40" pos:end="241:40">&amp;</operator> <literal type="number" pos:start="241:42" pos:end="241:44">0x7</literal></expr>;</expr_stmt>

            <switch pos:start="243:13" pos:end="351:13">switch <condition pos:start="243:20" pos:end="243:26">(<expr pos:start="243:21" pos:end="243:25"><name pos:start="243:21" pos:end="243:25">funct</name></expr>)</condition> <block pos:start="243:28" pos:end="351:13">{<block_content pos:start="245:13" pos:end="349:22">

            <case pos:start="245:13" pos:end="245:26">case <expr pos:start="245:18" pos:end="245:25"><name pos:start="245:18" pos:end="245:25">I8_BTEQZ</name></expr>:</case>

                <expr_stmt pos:start="247:17" pos:end="249:63"><expr pos:start="247:17" pos:end="249:62"><call pos:start="247:17" pos:end="249:62"><name pos:start="247:17" pos:end="247:34">gen_compute_branch</name><argument_list pos:start="247:35" pos:end="249:62">(<argument pos:start="247:36" pos:end="247:38"><expr pos:start="247:36" pos:end="247:38"><name pos:start="247:36" pos:end="247:38">ctx</name></expr></argument>, <argument pos:start="247:41" pos:end="247:47"><expr pos:start="247:41" pos:end="247:47"><name pos:start="247:41" pos:end="247:47">OPC_BEQ</name></expr></argument>, <argument pos:start="247:50" pos:end="247:50"><expr pos:start="247:50" pos:end="247:50"><literal type="number" pos:start="247:50" pos:end="247:50">2</literal></expr></argument>, <argument pos:start="247:53" pos:end="247:54"><expr pos:start="247:53" pos:end="247:54"><literal type="number" pos:start="247:53" pos:end="247:54">24</literal></expr></argument>, <argument pos:start="247:57" pos:end="247:57"><expr pos:start="247:57" pos:end="247:57"><literal type="number" pos:start="247:57" pos:end="247:57">0</literal></expr></argument>,

                                   <argument pos:start="249:36" pos:end="249:61"><expr pos:start="249:36" pos:end="249:61"><operator pos:start="249:36" pos:end="249:36">(</operator><operator pos:start="249:37" pos:end="249:37">(</operator><name pos:start="249:38" pos:end="249:43">int8_t</name><operator pos:start="249:44" pos:end="249:44">)</operator><name pos:start="249:45" pos:end="249:55"><name pos:start="249:45" pos:end="249:47">ctx</name><operator pos:start="249:48" pos:end="249:49">-&gt;</operator><name pos:start="249:50" pos:end="249:55">opcode</name></name><operator pos:start="249:56" pos:end="249:56">)</operator> <operator pos:start="249:58" pos:end="249:59">&lt;&lt;</operator> <literal type="number" pos:start="249:61" pos:end="249:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="251:17" pos:end="251:22">break;</break>

            <case pos:start="253:13" pos:end="253:26">case <expr pos:start="253:18" pos:end="253:25"><name pos:start="253:18" pos:end="253:25">I8_BTNEZ</name></expr>:</case>

                <expr_stmt pos:start="255:17" pos:end="257:63"><expr pos:start="255:17" pos:end="257:62"><call pos:start="255:17" pos:end="257:62"><name pos:start="255:17" pos:end="255:34">gen_compute_branch</name><argument_list pos:start="255:35" pos:end="257:62">(<argument pos:start="255:36" pos:end="255:38"><expr pos:start="255:36" pos:end="255:38"><name pos:start="255:36" pos:end="255:38">ctx</name></expr></argument>, <argument pos:start="255:41" pos:end="255:47"><expr pos:start="255:41" pos:end="255:47"><name pos:start="255:41" pos:end="255:47">OPC_BNE</name></expr></argument>, <argument pos:start="255:50" pos:end="255:50"><expr pos:start="255:50" pos:end="255:50"><literal type="number" pos:start="255:50" pos:end="255:50">2</literal></expr></argument>, <argument pos:start="255:53" pos:end="255:54"><expr pos:start="255:53" pos:end="255:54"><literal type="number" pos:start="255:53" pos:end="255:54">24</literal></expr></argument>, <argument pos:start="255:57" pos:end="255:57"><expr pos:start="255:57" pos:end="255:57"><literal type="number" pos:start="255:57" pos:end="255:57">0</literal></expr></argument>,

                                   <argument pos:start="257:36" pos:end="257:61"><expr pos:start="257:36" pos:end="257:61"><operator pos:start="257:36" pos:end="257:36">(</operator><operator pos:start="257:37" pos:end="257:37">(</operator><name pos:start="257:38" pos:end="257:43">int8_t</name><operator pos:start="257:44" pos:end="257:44">)</operator><name pos:start="257:45" pos:end="257:55"><name pos:start="257:45" pos:end="257:47">ctx</name><operator pos:start="257:48" pos:end="257:49">-&gt;</operator><name pos:start="257:50" pos:end="257:55">opcode</name></name><operator pos:start="257:56" pos:end="257:56">)</operator> <operator pos:start="257:58" pos:end="257:59">&lt;&lt;</operator> <literal type="number" pos:start="257:61" pos:end="257:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="259:17" pos:end="259:22">break;</break>

            <case pos:start="261:13" pos:end="261:27">case <expr pos:start="261:18" pos:end="261:26"><name pos:start="261:18" pos:end="261:26">I8_SWRASP</name></expr>:</case>

                <expr_stmt pos:start="263:17" pos:end="263:71"><expr pos:start="263:17" pos:end="263:70"><call pos:start="263:17" pos:end="263:70"><name pos:start="263:17" pos:end="263:22">gen_st</name><argument_list pos:start="263:23" pos:end="263:70">(<argument pos:start="263:24" pos:end="263:26"><expr pos:start="263:24" pos:end="263:26"><name pos:start="263:24" pos:end="263:26">ctx</name></expr></argument>, <argument pos:start="263:29" pos:end="263:34"><expr pos:start="263:29" pos:end="263:34"><name pos:start="263:29" pos:end="263:34">OPC_SW</name></expr></argument>, <argument pos:start="263:37" pos:end="263:38"><expr pos:start="263:37" pos:end="263:38"><literal type="number" pos:start="263:37" pos:end="263:38">31</literal></expr></argument>, <argument pos:start="263:41" pos:end="263:42"><expr pos:start="263:41" pos:end="263:42"><literal type="number" pos:start="263:41" pos:end="263:42">29</literal></expr></argument>, <argument pos:start="263:45" pos:end="263:69"><expr pos:start="263:45" pos:end="263:69"><operator pos:start="263:45" pos:end="263:45">(</operator><name pos:start="263:46" pos:end="263:56"><name pos:start="263:46" pos:end="263:48">ctx</name><operator pos:start="263:49" pos:end="263:50">-&gt;</operator><name pos:start="263:51" pos:end="263:56">opcode</name></name> <operator pos:start="263:58" pos:end="263:58">&amp;</operator> <literal type="number" pos:start="263:60" pos:end="263:63">0xff</literal><operator pos:start="263:64" pos:end="263:64">)</operator> <operator pos:start="263:66" pos:end="263:67">&lt;&lt;</operator> <literal type="number" pos:start="263:69" pos:end="263:69">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="265:17" pos:end="265:22">break;</break>

            <case pos:start="267:13" pos:end="267:26">case <expr pos:start="267:18" pos:end="267:25"><name pos:start="267:18" pos:end="267:25">I8_ADJSP</name></expr>:</case>

                <expr_stmt pos:start="269:17" pos:end="271:58"><expr pos:start="269:17" pos:end="271:57"><call pos:start="269:17" pos:end="271:57"><name pos:start="269:17" pos:end="269:29">gen_arith_imm</name><argument_list pos:start="269:30" pos:end="271:57">(<argument pos:start="269:31" pos:end="269:33"><expr pos:start="269:31" pos:end="269:33"><name pos:start="269:31" pos:end="269:33">ctx</name></expr></argument>, <argument pos:start="269:36" pos:end="269:44"><expr pos:start="269:36" pos:end="269:44"><name pos:start="269:36" pos:end="269:44">OPC_ADDIU</name></expr></argument>, <argument pos:start="269:47" pos:end="269:48"><expr pos:start="269:47" pos:end="269:48"><literal type="number" pos:start="269:47" pos:end="269:48">29</literal></expr></argument>, <argument pos:start="269:51" pos:end="269:52"><expr pos:start="269:51" pos:end="269:52"><literal type="number" pos:start="269:51" pos:end="269:52">29</literal></expr></argument>,

                              <argument pos:start="271:31" pos:end="271:56"><expr pos:start="271:31" pos:end="271:56"><operator pos:start="271:31" pos:end="271:31">(</operator><operator pos:start="271:32" pos:end="271:32">(</operator><name pos:start="271:33" pos:end="271:38">int8_t</name><operator pos:start="271:39" pos:end="271:39">)</operator><name pos:start="271:40" pos:end="271:50"><name pos:start="271:40" pos:end="271:42">ctx</name><operator pos:start="271:43" pos:end="271:44">-&gt;</operator><name pos:start="271:45" pos:end="271:50">opcode</name></name><operator pos:start="271:51" pos:end="271:51">)</operator> <operator pos:start="271:53" pos:end="271:54">&lt;&lt;</operator> <literal type="number" pos:start="271:56" pos:end="271:56">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="273:17" pos:end="273:22">break;</break>

            <case pos:start="275:13" pos:end="275:25">case <expr pos:start="275:18" pos:end="275:24"><name pos:start="275:18" pos:end="275:24">I8_SVRS</name></expr>:</case>

                <block pos:start="277:17" pos:end="315:17">{<block_content pos:start="279:21" pos:end="313:21">

                    <decl_stmt pos:start="279:21" pos:end="279:55"><decl pos:start="279:21" pos:end="279:54"><type pos:start="279:21" pos:end="279:23"><name pos:start="279:21" pos:end="279:23">int</name></type> <name pos:start="279:25" pos:end="279:29">do_ra</name> <init pos:start="279:31" pos:end="279:54">= <expr pos:start="279:33" pos:end="279:54"><name pos:start="279:33" pos:end="279:43"><name pos:start="279:33" pos:end="279:35">ctx</name><operator pos:start="279:36" pos:end="279:37">-&gt;</operator><name pos:start="279:38" pos:end="279:43">opcode</name></name> <operator pos:start="279:45" pos:end="279:45">&amp;</operator> <operator pos:start="279:47" pos:end="279:47">(</operator><literal type="number" pos:start="279:48" pos:end="279:48">1</literal> <operator pos:start="279:50" pos:end="279:51">&lt;&lt;</operator> <literal type="number" pos:start="279:53" pos:end="279:53">6</literal><operator pos:start="279:54" pos:end="279:54">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="281:21" pos:end="281:55"><decl pos:start="281:21" pos:end="281:54"><type pos:start="281:21" pos:end="281:23"><name pos:start="281:21" pos:end="281:23">int</name></type> <name pos:start="281:25" pos:end="281:29">do_s0</name> <init pos:start="281:31" pos:end="281:54">= <expr pos:start="281:33" pos:end="281:54"><name pos:start="281:33" pos:end="281:43"><name pos:start="281:33" pos:end="281:35">ctx</name><operator pos:start="281:36" pos:end="281:37">-&gt;</operator><name pos:start="281:38" pos:end="281:43">opcode</name></name> <operator pos:start="281:45" pos:end="281:45">&amp;</operator> <operator pos:start="281:47" pos:end="281:47">(</operator><literal type="number" pos:start="281:48" pos:end="281:48">1</literal> <operator pos:start="281:50" pos:end="281:51">&lt;&lt;</operator> <literal type="number" pos:start="281:53" pos:end="281:53">5</literal><operator pos:start="281:54" pos:end="281:54">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="283:21" pos:end="283:55"><decl pos:start="283:21" pos:end="283:54"><type pos:start="283:21" pos:end="283:23"><name pos:start="283:21" pos:end="283:23">int</name></type> <name pos:start="283:25" pos:end="283:29">do_s1</name> <init pos:start="283:31" pos:end="283:54">= <expr pos:start="283:33" pos:end="283:54"><name pos:start="283:33" pos:end="283:43"><name pos:start="283:33" pos:end="283:35">ctx</name><operator pos:start="283:36" pos:end="283:37">-&gt;</operator><name pos:start="283:38" pos:end="283:43">opcode</name></name> <operator pos:start="283:45" pos:end="283:45">&amp;</operator> <operator pos:start="283:47" pos:end="283:47">(</operator><literal type="number" pos:start="283:48" pos:end="283:48">1</literal> <operator pos:start="283:50" pos:end="283:51">&lt;&lt;</operator> <literal type="number" pos:start="283:53" pos:end="283:53">4</literal><operator pos:start="283:54" pos:end="283:54">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="285:21" pos:end="285:54"><decl pos:start="285:21" pos:end="285:53"><type pos:start="285:21" pos:end="285:23"><name pos:start="285:21" pos:end="285:23">int</name></type> <name pos:start="285:25" pos:end="285:33">framesize</name> <init pos:start="285:35" pos:end="285:53">= <expr pos:start="285:37" pos:end="285:53"><name pos:start="285:37" pos:end="285:47"><name pos:start="285:37" pos:end="285:39">ctx</name><operator pos:start="285:40" pos:end="285:41">-&gt;</operator><name pos:start="285:42" pos:end="285:47">opcode</name></name> <operator pos:start="285:49" pos:end="285:49">&amp;</operator> <literal type="number" pos:start="285:51" pos:end="285:53">0xf</literal></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="289:21" pos:end="297:21"><if pos:start="289:21" pos:end="293:21">if <condition pos:start="289:24" pos:end="289:39">(<expr pos:start="289:25" pos:end="289:38"><name pos:start="289:25" pos:end="289:33">framesize</name> <operator pos:start="289:35" pos:end="289:36">==</operator> <literal type="number" pos:start="289:38" pos:end="289:38">0</literal></expr>)</condition> <block pos:start="289:41" pos:end="293:21">{<block_content pos:start="291:25" pos:end="291:40">

                        <expr_stmt pos:start="291:25" pos:end="291:40"><expr pos:start="291:25" pos:end="291:39"><name pos:start="291:25" pos:end="291:33">framesize</name> <operator pos:start="291:35" pos:end="291:35">=</operator> <literal type="number" pos:start="291:37" pos:end="291:39">128</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="293:23" pos:end="297:21">else <block pos:start="293:28" pos:end="297:21">{<block_content pos:start="295:25" pos:end="295:51">

                        <expr_stmt pos:start="295:25" pos:end="295:51"><expr pos:start="295:25" pos:end="295:50"><name pos:start="295:25" pos:end="295:33">framesize</name> <operator pos:start="295:35" pos:end="295:35">=</operator> <name pos:start="295:37" pos:end="295:45">framesize</name> <operator pos:start="295:47" pos:end="295:48">&lt;&lt;</operator> <literal type="number" pos:start="295:50" pos:end="295:50">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <if_stmt pos:start="301:21" pos:end="313:21"><if pos:start="301:21" pos:end="307:21">if <condition pos:start="301:24" pos:end="301:47">(<expr pos:start="301:25" pos:end="301:46"><name pos:start="301:25" pos:end="301:35"><name pos:start="301:25" pos:end="301:27">ctx</name><operator pos:start="301:28" pos:end="301:29">-&gt;</operator><name pos:start="301:30" pos:end="301:35">opcode</name></name> <operator pos:start="301:37" pos:end="301:37">&amp;</operator> <operator pos:start="301:39" pos:end="301:39">(</operator><literal type="number" pos:start="301:40" pos:end="301:40">1</literal> <operator pos:start="301:42" pos:end="301:43">&lt;&lt;</operator> <literal type="number" pos:start="301:45" pos:end="301:45">7</literal><operator pos:start="301:46" pos:end="301:46">)</operator></expr>)</condition> <block pos:start="301:49" pos:end="307:21">{<block_content pos:start="303:25" pos:end="305:72">

                        <expr_stmt pos:start="303:25" pos:end="305:72"><expr pos:start="303:25" pos:end="305:71"><call pos:start="303:25" pos:end="305:71"><name pos:start="303:25" pos:end="303:39">gen_mips16_save</name><argument_list pos:start="303:40" pos:end="305:71">(<argument pos:start="303:41" pos:end="303:43"><expr pos:start="303:41" pos:end="303:43"><name pos:start="303:41" pos:end="303:43">ctx</name></expr></argument>, <argument pos:start="303:46" pos:end="303:46"><expr pos:start="303:46" pos:end="303:46"><literal type="number" pos:start="303:46" pos:end="303:46">0</literal></expr></argument>, <argument pos:start="303:49" pos:end="303:49"><expr pos:start="303:49" pos:end="303:49"><literal type="number" pos:start="303:49" pos:end="303:49">0</literal></expr></argument>,

                                        <argument pos:start="305:41" pos:end="305:45"><expr pos:start="305:41" pos:end="305:45"><name pos:start="305:41" pos:end="305:45">do_ra</name></expr></argument>, <argument pos:start="305:48" pos:end="305:52"><expr pos:start="305:48" pos:end="305:52"><name pos:start="305:48" pos:end="305:52">do_s0</name></expr></argument>, <argument pos:start="305:55" pos:end="305:59"><expr pos:start="305:55" pos:end="305:59"><name pos:start="305:55" pos:end="305:59">do_s1</name></expr></argument>, <argument pos:start="305:62" pos:end="305:70"><expr pos:start="305:62" pos:end="305:70"><name pos:start="305:62" pos:end="305:70">framesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="307:23" pos:end="313:21">else <block pos:start="307:28" pos:end="313:21">{<block_content pos:start="309:25" pos:end="311:75">

                        <expr_stmt pos:start="309:25" pos:end="311:75"><expr pos:start="309:25" pos:end="311:74"><call pos:start="309:25" pos:end="311:74"><name pos:start="309:25" pos:end="309:42">gen_mips16_restore</name><argument_list pos:start="309:43" pos:end="311:74">(<argument pos:start="309:44" pos:end="309:46"><expr pos:start="309:44" pos:end="309:46"><name pos:start="309:44" pos:end="309:46">ctx</name></expr></argument>, <argument pos:start="309:49" pos:end="309:49"><expr pos:start="309:49" pos:end="309:49"><literal type="number" pos:start="309:49" pos:end="309:49">0</literal></expr></argument>, <argument pos:start="309:52" pos:end="309:52"><expr pos:start="309:52" pos:end="309:52"><literal type="number" pos:start="309:52" pos:end="309:52">0</literal></expr></argument>,

                                           <argument pos:start="311:44" pos:end="311:48"><expr pos:start="311:44" pos:end="311:48"><name pos:start="311:44" pos:end="311:48">do_ra</name></expr></argument>, <argument pos:start="311:51" pos:end="311:55"><expr pos:start="311:51" pos:end="311:55"><name pos:start="311:51" pos:end="311:55">do_s0</name></expr></argument>, <argument pos:start="311:58" pos:end="311:62"><expr pos:start="311:58" pos:end="311:62"><name pos:start="311:58" pos:end="311:62">do_s1</name></expr></argument>, <argument pos:start="311:65" pos:end="311:73"><expr pos:start="311:65" pos:end="311:73"><name pos:start="311:65" pos:end="311:73">framesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="317:17" pos:end="317:22">break;</break>

            <case pos:start="319:13" pos:end="319:27">case <expr pos:start="319:18" pos:end="319:26"><name pos:start="319:18" pos:end="319:26">I8_MOV32R</name></expr>:</case>

                <block pos:start="321:17" pos:end="333:17">{<block_content pos:start="323:21" pos:end="331:59">

                    <decl_stmt pos:start="323:21" pos:end="323:53"><decl pos:start="323:21" pos:end="323:52"><type pos:start="323:21" pos:end="323:23"><name pos:start="323:21" pos:end="323:23">int</name></type> <name pos:start="323:25" pos:end="323:26">rz</name> <init pos:start="323:28" pos:end="323:52">= <expr pos:start="323:30" pos:end="323:52"><call pos:start="323:30" pos:end="323:52"><name pos:start="323:30" pos:end="323:33">xlat</name><argument_list pos:start="323:34" pos:end="323:52">(<argument pos:start="323:35" pos:end="323:51"><expr pos:start="323:35" pos:end="323:51"><name pos:start="323:35" pos:end="323:45"><name pos:start="323:35" pos:end="323:37">ctx</name><operator pos:start="323:38" pos:end="323:39">-&gt;</operator><name pos:start="323:40" pos:end="323:45">opcode</name></name> <operator pos:start="323:47" pos:end="323:47">&amp;</operator> <literal type="number" pos:start="323:49" pos:end="323:51">0x7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="327:21" pos:end="329:51"><expr pos:start="327:21" pos:end="329:50"><name pos:start="327:21" pos:end="327:25">reg32</name> <operator pos:start="327:27" pos:end="327:27">=</operator> <operator pos:start="327:29" pos:end="327:29">(</operator><operator pos:start="327:30" pos:end="327:30">(</operator><operator pos:start="327:31" pos:end="327:31">(</operator><name pos:start="327:32" pos:end="327:42"><name pos:start="327:32" pos:end="327:34">ctx</name><operator pos:start="327:35" pos:end="327:36">-&gt;</operator><name pos:start="327:37" pos:end="327:42">opcode</name></name> <operator pos:start="327:44" pos:end="327:45">&gt;&gt;</operator> <literal type="number" pos:start="327:47" pos:end="327:47">3</literal><operator pos:start="327:48" pos:end="327:48">)</operator> <operator pos:start="327:50" pos:end="327:50">&amp;</operator> <literal type="number" pos:start="327:52" pos:end="327:54">0x3</literal><operator pos:start="327:55" pos:end="327:55">)</operator> <operator pos:start="327:57" pos:end="327:58">&lt;&lt;</operator> <literal type="number" pos:start="327:60" pos:end="327:60">3</literal><operator pos:start="327:61" pos:end="327:61">)</operator> <operator pos:start="327:63" pos:end="327:63">|</operator>

                        <operator pos:start="329:25" pos:end="329:25">(</operator><operator pos:start="329:26" pos:end="329:26">(</operator><name pos:start="329:27" pos:end="329:37"><name pos:start="329:27" pos:end="329:29">ctx</name><operator pos:start="329:30" pos:end="329:31">-&gt;</operator><name pos:start="329:32" pos:end="329:37">opcode</name></name> <operator pos:start="329:39" pos:end="329:40">&gt;&gt;</operator> <literal type="number" pos:start="329:42" pos:end="329:42">5</literal><operator pos:start="329:43" pos:end="329:43">)</operator> <operator pos:start="329:45" pos:end="329:45">&amp;</operator> <literal type="number" pos:start="329:47" pos:end="329:49">0x7</literal><operator pos:start="329:50" pos:end="329:50">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="331:21" pos:end="331:59"><expr pos:start="331:21" pos:end="331:58"><call pos:start="331:21" pos:end="331:58"><name pos:start="331:21" pos:end="331:29">gen_arith</name><argument_list pos:start="331:30" pos:end="331:58">(<argument pos:start="331:31" pos:end="331:33"><expr pos:start="331:31" pos:end="331:33"><name pos:start="331:31" pos:end="331:33">ctx</name></expr></argument>, <argument pos:start="331:36" pos:end="331:43"><expr pos:start="331:36" pos:end="331:43"><name pos:start="331:36" pos:end="331:43">OPC_ADDU</name></expr></argument>, <argument pos:start="331:46" pos:end="331:50"><expr pos:start="331:46" pos:end="331:50"><name pos:start="331:46" pos:end="331:50">reg32</name></expr></argument>, <argument pos:start="331:53" pos:end="331:54"><expr pos:start="331:53" pos:end="331:54"><name pos:start="331:53" pos:end="331:54">rz</name></expr></argument>, <argument pos:start="331:57" pos:end="331:57"><expr pos:start="331:57" pos:end="331:57"><literal type="number" pos:start="331:57" pos:end="331:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="335:17" pos:end="335:22">break;</break>

            <case pos:start="337:13" pos:end="337:27">case <expr pos:start="337:18" pos:end="337:26"><name pos:start="337:18" pos:end="337:26">I8_MOVR32</name></expr>:</case>

                <expr_stmt pos:start="339:17" pos:end="339:43"><expr pos:start="339:17" pos:end="339:42"><name pos:start="339:17" pos:end="339:21">reg32</name> <operator pos:start="339:23" pos:end="339:23">=</operator> <name pos:start="339:25" pos:end="339:35"><name pos:start="339:25" pos:end="339:27">ctx</name><operator pos:start="339:28" pos:end="339:29">-&gt;</operator><name pos:start="339:30" pos:end="339:35">opcode</name></name> <operator pos:start="339:37" pos:end="339:37">&amp;</operator> <literal type="number" pos:start="339:39" pos:end="339:42">0x1f</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="341:17" pos:end="341:55"><expr pos:start="341:17" pos:end="341:54"><call pos:start="341:17" pos:end="341:54"><name pos:start="341:17" pos:end="341:25">gen_arith</name><argument_list pos:start="341:26" pos:end="341:54">(<argument pos:start="341:27" pos:end="341:29"><expr pos:start="341:27" pos:end="341:29"><name pos:start="341:27" pos:end="341:29">ctx</name></expr></argument>, <argument pos:start="341:32" pos:end="341:39"><expr pos:start="341:32" pos:end="341:39"><name pos:start="341:32" pos:end="341:39">OPC_ADDU</name></expr></argument>, <argument pos:start="341:42" pos:end="341:43"><expr pos:start="341:42" pos:end="341:43"><name pos:start="341:42" pos:end="341:43">ry</name></expr></argument>, <argument pos:start="341:46" pos:end="341:50"><expr pos:start="341:46" pos:end="341:50"><name pos:start="341:46" pos:end="341:50">reg32</name></expr></argument>, <argument pos:start="341:53" pos:end="341:53"><expr pos:start="341:53" pos:end="341:53"><literal type="number" pos:start="341:53" pos:end="341:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="343:17" pos:end="343:22">break;</break>

            <default pos:start="345:13" pos:end="345:20">default:</default>

                <expr_stmt pos:start="347:17" pos:end="347:49"><expr pos:start="347:17" pos:end="347:48"><call pos:start="347:17" pos:end="347:48"><name pos:start="347:17" pos:end="347:34">generate_exception</name><argument_list pos:start="347:35" pos:end="347:48">(<argument pos:start="347:36" pos:end="347:38"><expr pos:start="347:36" pos:end="347:38"><name pos:start="347:36" pos:end="347:38">ctx</name></expr></argument>, <argument pos:start="347:41" pos:end="347:47"><expr pos:start="347:41" pos:end="347:47"><name pos:start="347:41" pos:end="347:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="349:17" pos:end="349:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="355:9" pos:end="355:14">break;</break>

    <case pos:start="357:5" pos:end="357:20">case <expr pos:start="357:10" pos:end="357:19"><name pos:start="357:10" pos:end="357:19">M16_OPC_LI</name></expr>:</case>

        <block pos:start="359:9" pos:end="367:9">{<block_content pos:start="361:13" pos:end="365:54">

            <decl_stmt pos:start="361:13" pos:end="361:48"><decl pos:start="361:13" pos:end="361:47"><type pos:start="361:13" pos:end="361:19"><name pos:start="361:13" pos:end="361:19">int16_t</name></type> <name pos:start="361:21" pos:end="361:23">imm</name> <init pos:start="361:25" pos:end="361:47">= <expr pos:start="361:27" pos:end="361:47"><operator pos:start="361:27" pos:end="361:27">(</operator><name pos:start="361:28" pos:end="361:34">uint8_t</name><operator pos:start="361:35" pos:end="361:35">)</operator> <name pos:start="361:37" pos:end="361:47"><name pos:start="361:37" pos:end="361:39">ctx</name><operator pos:start="361:40" pos:end="361:41">-&gt;</operator><name pos:start="361:42" pos:end="361:47">opcode</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="365:13" pos:end="365:54"><expr pos:start="365:13" pos:end="365:53"><call pos:start="365:13" pos:end="365:53"><name pos:start="365:13" pos:end="365:25">gen_arith_imm</name><argument_list pos:start="365:26" pos:end="365:53">(<argument pos:start="365:27" pos:end="365:29"><expr pos:start="365:27" pos:end="365:29"><name pos:start="365:27" pos:end="365:29">ctx</name></expr></argument>, <argument pos:start="365:32" pos:end="365:40"><expr pos:start="365:32" pos:end="365:40"><name pos:start="365:32" pos:end="365:40">OPC_ADDIU</name></expr></argument>, <argument pos:start="365:43" pos:end="365:44"><expr pos:start="365:43" pos:end="365:44"><name pos:start="365:43" pos:end="365:44">rx</name></expr></argument>, <argument pos:start="365:47" pos:end="365:47"><expr pos:start="365:47" pos:end="365:47"><literal type="number" pos:start="365:47" pos:end="365:47">0</literal></expr></argument>, <argument pos:start="365:50" pos:end="365:52"><expr pos:start="365:50" pos:end="365:52"><name pos:start="365:50" pos:end="365:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="369:9" pos:end="369:14">break;</break>

    <case pos:start="371:5" pos:end="371:22">case <expr pos:start="371:10" pos:end="371:21"><name pos:start="371:10" pos:end="371:21">M16_OPC_CMPI</name></expr>:</case>

        <block pos:start="373:9" pos:end="379:9">{<block_content pos:start="375:13" pos:end="377:54">

            <decl_stmt pos:start="375:13" pos:end="375:48"><decl pos:start="375:13" pos:end="375:47"><type pos:start="375:13" pos:end="375:19"><name pos:start="375:13" pos:end="375:19">int16_t</name></type> <name pos:start="375:21" pos:end="375:23">imm</name> <init pos:start="375:25" pos:end="375:47">= <expr pos:start="375:27" pos:end="375:47"><operator pos:start="375:27" pos:end="375:27">(</operator><name pos:start="375:28" pos:end="375:34">uint8_t</name><operator pos:start="375:35" pos:end="375:35">)</operator> <name pos:start="375:37" pos:end="375:47"><name pos:start="375:37" pos:end="375:39">ctx</name><operator pos:start="375:40" pos:end="375:41">-&gt;</operator><name pos:start="375:42" pos:end="375:47">opcode</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="377:13" pos:end="377:54"><expr pos:start="377:13" pos:end="377:53"><call pos:start="377:13" pos:end="377:53"><name pos:start="377:13" pos:end="377:25">gen_logic_imm</name><argument_list pos:start="377:26" pos:end="377:53">(<argument pos:start="377:27" pos:end="377:29"><expr pos:start="377:27" pos:end="377:29"><name pos:start="377:27" pos:end="377:29">ctx</name></expr></argument>, <argument pos:start="377:32" pos:end="377:39"><expr pos:start="377:32" pos:end="377:39"><name pos:start="377:32" pos:end="377:39">OPC_XORI</name></expr></argument>, <argument pos:start="377:42" pos:end="377:43"><expr pos:start="377:42" pos:end="377:43"><literal type="number" pos:start="377:42" pos:end="377:43">24</literal></expr></argument>, <argument pos:start="377:46" pos:end="377:47"><expr pos:start="377:46" pos:end="377:47"><name pos:start="377:46" pos:end="377:47">rx</name></expr></argument>, <argument pos:start="377:50" pos:end="377:52"><expr pos:start="377:50" pos:end="377:52"><name pos:start="377:50" pos:end="377:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="381:9" pos:end="384:0">break;</break>

<cpp:if pos:start="383:1" pos:end="383:26">#<cpp:directive pos:start="383:2" pos:end="383:3">if</cpp:directive> <expr pos:start="383:5" pos:end="383:26"><call pos:start="383:5" pos:end="383:26"><name pos:start="383:5" pos:end="383:11">defined</name><argument_list pos:start="383:12" pos:end="383:26">(<argument pos:start="383:13" pos:end="383:25"><expr pos:start="383:13" pos:end="383:25"><name pos:start="383:13" pos:end="383:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="385:5" pos:end="385:20">case <expr pos:start="385:10" pos:end="385:19"><name pos:start="385:10" pos:end="385:19">M16_OPC_SD</name></expr>:</case>

        <expr_stmt pos:start="387:9" pos:end="387:27"><expr pos:start="387:9" pos:end="387:26"><call pos:start="387:9" pos:end="387:26"><name pos:start="387:9" pos:end="387:21">check_mips_64</name><argument_list pos:start="387:22" pos:end="387:26">(<argument pos:start="387:23" pos:end="387:25"><expr pos:start="387:23" pos:end="387:25"><name pos:start="387:23" pos:end="387:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:49"><expr pos:start="389:9" pos:end="389:48"><call pos:start="389:9" pos:end="389:48"><name pos:start="389:9" pos:end="389:14">gen_st</name><argument_list pos:start="389:15" pos:end="389:48">(<argument pos:start="389:16" pos:end="389:18"><expr pos:start="389:16" pos:end="389:18"><name pos:start="389:16" pos:end="389:18">ctx</name></expr></argument>, <argument pos:start="389:21" pos:end="389:26"><expr pos:start="389:21" pos:end="389:26"><name pos:start="389:21" pos:end="389:26">OPC_SD</name></expr></argument>, <argument pos:start="389:29" pos:end="389:30"><expr pos:start="389:29" pos:end="389:30"><name pos:start="389:29" pos:end="389:30">ry</name></expr></argument>, <argument pos:start="389:33" pos:end="389:34"><expr pos:start="389:33" pos:end="389:34"><name pos:start="389:33" pos:end="389:34">rx</name></expr></argument>, <argument pos:start="389:37" pos:end="389:47"><expr pos:start="389:37" pos:end="389:47"><name pos:start="389:37" pos:end="389:42">offset</name> <operator pos:start="389:44" pos:end="389:45">&lt;&lt;</operator> <literal type="number" pos:start="389:47" pos:end="389:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="391:9" pos:end="394:0">break;</break>

<cpp:endif pos:start="393:1" pos:end="393:6">#<cpp:directive pos:start="393:2" pos:end="393:6">endif</cpp:directive></cpp:endif>

    <case pos:start="395:5" pos:end="395:20">case <expr pos:start="395:10" pos:end="395:19"><name pos:start="395:10" pos:end="395:19">M16_OPC_LB</name></expr>:</case>

        <expr_stmt pos:start="397:9" pos:end="397:44"><expr pos:start="397:9" pos:end="397:43"><call pos:start="397:9" pos:end="397:43"><name pos:start="397:9" pos:end="397:14">gen_ld</name><argument_list pos:start="397:15" pos:end="397:43">(<argument pos:start="397:16" pos:end="397:18"><expr pos:start="397:16" pos:end="397:18"><name pos:start="397:16" pos:end="397:18">ctx</name></expr></argument>, <argument pos:start="397:21" pos:end="397:26"><expr pos:start="397:21" pos:end="397:26"><name pos:start="397:21" pos:end="397:26">OPC_LB</name></expr></argument>, <argument pos:start="397:29" pos:end="397:30"><expr pos:start="397:29" pos:end="397:30"><name pos:start="397:29" pos:end="397:30">ry</name></expr></argument>, <argument pos:start="397:33" pos:end="397:34"><expr pos:start="397:33" pos:end="397:34"><name pos:start="397:33" pos:end="397:34">rx</name></expr></argument>, <argument pos:start="397:37" pos:end="397:42"><expr pos:start="397:37" pos:end="397:42"><name pos:start="397:37" pos:end="397:42">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="399:9" pos:end="399:14">break;</break>

    <case pos:start="401:5" pos:end="401:20">case <expr pos:start="401:10" pos:end="401:19"><name pos:start="401:10" pos:end="401:19">M16_OPC_LH</name></expr>:</case>

        <expr_stmt pos:start="403:9" pos:end="403:49"><expr pos:start="403:9" pos:end="403:48"><call pos:start="403:9" pos:end="403:48"><name pos:start="403:9" pos:end="403:14">gen_ld</name><argument_list pos:start="403:15" pos:end="403:48">(<argument pos:start="403:16" pos:end="403:18"><expr pos:start="403:16" pos:end="403:18"><name pos:start="403:16" pos:end="403:18">ctx</name></expr></argument>, <argument pos:start="403:21" pos:end="403:26"><expr pos:start="403:21" pos:end="403:26"><name pos:start="403:21" pos:end="403:26">OPC_LH</name></expr></argument>, <argument pos:start="403:29" pos:end="403:30"><expr pos:start="403:29" pos:end="403:30"><name pos:start="403:29" pos:end="403:30">ry</name></expr></argument>, <argument pos:start="403:33" pos:end="403:34"><expr pos:start="403:33" pos:end="403:34"><name pos:start="403:33" pos:end="403:34">rx</name></expr></argument>, <argument pos:start="403:37" pos:end="403:47"><expr pos:start="403:37" pos:end="403:47"><name pos:start="403:37" pos:end="403:42">offset</name> <operator pos:start="403:44" pos:end="403:45">&lt;&lt;</operator> <literal type="number" pos:start="403:47" pos:end="403:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="405:9" pos:end="405:14">break;</break>

    <case pos:start="407:5" pos:end="407:22">case <expr pos:start="407:10" pos:end="407:21"><name pos:start="407:10" pos:end="407:21">M16_OPC_LWSP</name></expr>:</case>

        <expr_stmt pos:start="409:9" pos:end="409:65"><expr pos:start="409:9" pos:end="409:64"><call pos:start="409:9" pos:end="409:64"><name pos:start="409:9" pos:end="409:14">gen_ld</name><argument_list pos:start="409:15" pos:end="409:64">(<argument pos:start="409:16" pos:end="409:18"><expr pos:start="409:16" pos:end="409:18"><name pos:start="409:16" pos:end="409:18">ctx</name></expr></argument>, <argument pos:start="409:21" pos:end="409:26"><expr pos:start="409:21" pos:end="409:26"><name pos:start="409:21" pos:end="409:26">OPC_LW</name></expr></argument>, <argument pos:start="409:29" pos:end="409:30"><expr pos:start="409:29" pos:end="409:30"><name pos:start="409:29" pos:end="409:30">rx</name></expr></argument>, <argument pos:start="409:33" pos:end="409:34"><expr pos:start="409:33" pos:end="409:34"><literal type="number" pos:start="409:33" pos:end="409:34">29</literal></expr></argument>, <argument pos:start="409:37" pos:end="409:63"><expr pos:start="409:37" pos:end="409:63"><operator pos:start="409:37" pos:end="409:37">(</operator><operator pos:start="409:38" pos:end="409:38">(</operator><name pos:start="409:39" pos:end="409:45">uint8_t</name><operator pos:start="409:46" pos:end="409:46">)</operator><name pos:start="409:47" pos:end="409:57"><name pos:start="409:47" pos:end="409:49">ctx</name><operator pos:start="409:50" pos:end="409:51">-&gt;</operator><name pos:start="409:52" pos:end="409:57">opcode</name></name><operator pos:start="409:58" pos:end="409:58">)</operator> <operator pos:start="409:60" pos:end="409:61">&lt;&lt;</operator> <literal type="number" pos:start="409:63" pos:end="409:63">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="411:9" pos:end="411:14">break;</break>

    <case pos:start="413:5" pos:end="413:20">case <expr pos:start="413:10" pos:end="413:19"><name pos:start="413:10" pos:end="413:19">M16_OPC_LW</name></expr>:</case>

        <expr_stmt pos:start="415:9" pos:end="415:49"><expr pos:start="415:9" pos:end="415:48"><call pos:start="415:9" pos:end="415:48"><name pos:start="415:9" pos:end="415:14">gen_ld</name><argument_list pos:start="415:15" pos:end="415:48">(<argument pos:start="415:16" pos:end="415:18"><expr pos:start="415:16" pos:end="415:18"><name pos:start="415:16" pos:end="415:18">ctx</name></expr></argument>, <argument pos:start="415:21" pos:end="415:26"><expr pos:start="415:21" pos:end="415:26"><name pos:start="415:21" pos:end="415:26">OPC_LW</name></expr></argument>, <argument pos:start="415:29" pos:end="415:30"><expr pos:start="415:29" pos:end="415:30"><name pos:start="415:29" pos:end="415:30">ry</name></expr></argument>, <argument pos:start="415:33" pos:end="415:34"><expr pos:start="415:33" pos:end="415:34"><name pos:start="415:33" pos:end="415:34">rx</name></expr></argument>, <argument pos:start="415:37" pos:end="415:47"><expr pos:start="415:37" pos:end="415:47"><name pos:start="415:37" pos:end="415:42">offset</name> <operator pos:start="415:44" pos:end="415:45">&lt;&lt;</operator> <literal type="number" pos:start="415:47" pos:end="415:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="417:9" pos:end="417:14">break;</break>

    <case pos:start="419:5" pos:end="419:21">case <expr pos:start="419:10" pos:end="419:20"><name pos:start="419:10" pos:end="419:20">M16_OPC_LBU</name></expr>:</case>

        <expr_stmt pos:start="421:9" pos:end="421:45"><expr pos:start="421:9" pos:end="421:44"><call pos:start="421:9" pos:end="421:44"><name pos:start="421:9" pos:end="421:14">gen_ld</name><argument_list pos:start="421:15" pos:end="421:44">(<argument pos:start="421:16" pos:end="421:18"><expr pos:start="421:16" pos:end="421:18"><name pos:start="421:16" pos:end="421:18">ctx</name></expr></argument>, <argument pos:start="421:21" pos:end="421:27"><expr pos:start="421:21" pos:end="421:27"><name pos:start="421:21" pos:end="421:27">OPC_LBU</name></expr></argument>, <argument pos:start="421:30" pos:end="421:31"><expr pos:start="421:30" pos:end="421:31"><name pos:start="421:30" pos:end="421:31">ry</name></expr></argument>, <argument pos:start="421:34" pos:end="421:35"><expr pos:start="421:34" pos:end="421:35"><name pos:start="421:34" pos:end="421:35">rx</name></expr></argument>, <argument pos:start="421:38" pos:end="421:43"><expr pos:start="421:38" pos:end="421:43"><name pos:start="421:38" pos:end="421:43">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="423:9" pos:end="423:14">break;</break>

    <case pos:start="425:5" pos:end="425:21">case <expr pos:start="425:10" pos:end="425:20"><name pos:start="425:10" pos:end="425:20">M16_OPC_LHU</name></expr>:</case>

        <expr_stmt pos:start="427:9" pos:end="427:50"><expr pos:start="427:9" pos:end="427:49"><call pos:start="427:9" pos:end="427:49"><name pos:start="427:9" pos:end="427:14">gen_ld</name><argument_list pos:start="427:15" pos:end="427:49">(<argument pos:start="427:16" pos:end="427:18"><expr pos:start="427:16" pos:end="427:18"><name pos:start="427:16" pos:end="427:18">ctx</name></expr></argument>, <argument pos:start="427:21" pos:end="427:27"><expr pos:start="427:21" pos:end="427:27"><name pos:start="427:21" pos:end="427:27">OPC_LHU</name></expr></argument>, <argument pos:start="427:30" pos:end="427:31"><expr pos:start="427:30" pos:end="427:31"><name pos:start="427:30" pos:end="427:31">ry</name></expr></argument>, <argument pos:start="427:34" pos:end="427:35"><expr pos:start="427:34" pos:end="427:35"><name pos:start="427:34" pos:end="427:35">rx</name></expr></argument>, <argument pos:start="427:38" pos:end="427:48"><expr pos:start="427:38" pos:end="427:48"><name pos:start="427:38" pos:end="427:43">offset</name> <operator pos:start="427:45" pos:end="427:46">&lt;&lt;</operator> <literal type="number" pos:start="427:48" pos:end="427:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="429:9" pos:end="429:14">break;</break>

    <case pos:start="431:5" pos:end="431:22">case <expr pos:start="431:10" pos:end="431:21"><name pos:start="431:10" pos:end="431:21">M16_OPC_LWPC</name></expr>:</case>

        <expr_stmt pos:start="433:9" pos:end="433:66"><expr pos:start="433:9" pos:end="433:65"><call pos:start="433:9" pos:end="433:65"><name pos:start="433:9" pos:end="433:14">gen_ld</name><argument_list pos:start="433:15" pos:end="433:65">(<argument pos:start="433:16" pos:end="433:18"><expr pos:start="433:16" pos:end="433:18"><name pos:start="433:16" pos:end="433:18">ctx</name></expr></argument>, <argument pos:start="433:21" pos:end="433:28"><expr pos:start="433:21" pos:end="433:28"><name pos:start="433:21" pos:end="433:28">OPC_LWPC</name></expr></argument>, <argument pos:start="433:31" pos:end="433:32"><expr pos:start="433:31" pos:end="433:32"><name pos:start="433:31" pos:end="433:32">rx</name></expr></argument>, <argument pos:start="433:35" pos:end="433:35"><expr pos:start="433:35" pos:end="433:35"><literal type="number" pos:start="433:35" pos:end="433:35">0</literal></expr></argument>, <argument pos:start="433:38" pos:end="433:64"><expr pos:start="433:38" pos:end="433:64"><operator pos:start="433:38" pos:end="433:38">(</operator><operator pos:start="433:39" pos:end="433:39">(</operator><name pos:start="433:40" pos:end="433:46">uint8_t</name><operator pos:start="433:47" pos:end="433:47">)</operator><name pos:start="433:48" pos:end="433:58"><name pos:start="433:48" pos:end="433:50">ctx</name><operator pos:start="433:51" pos:end="433:52">-&gt;</operator><name pos:start="433:53" pos:end="433:58">opcode</name></name><operator pos:start="433:59" pos:end="433:59">)</operator> <operator pos:start="433:61" pos:end="433:62">&lt;&lt;</operator> <literal type="number" pos:start="433:64" pos:end="433:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="435:9" pos:end="438:0">break;</break>

<cpp:if pos:start="437:1" pos:end="437:27">#<cpp:directive pos:start="437:2" pos:end="437:3">if</cpp:directive> <expr pos:start="437:5" pos:end="437:27"><call pos:start="437:5" pos:end="437:27"><name pos:start="437:5" pos:end="437:11">defined</name> <argument_list pos:start="437:13" pos:end="437:27">(<argument pos:start="437:14" pos:end="437:26"><expr pos:start="437:14" pos:end="437:26"><name pos:start="437:14" pos:end="437:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="439:5" pos:end="439:21">case <expr pos:start="439:10" pos:end="439:20"><name pos:start="439:10" pos:end="439:20">M16_OPC_LWU</name></expr>:</case>

        <expr_stmt pos:start="441:9" pos:end="441:27"><expr pos:start="441:9" pos:end="441:26"><call pos:start="441:9" pos:end="441:26"><name pos:start="441:9" pos:end="441:21">check_mips_64</name><argument_list pos:start="441:22" pos:end="441:26">(<argument pos:start="441:23" pos:end="441:25"><expr pos:start="441:23" pos:end="441:25"><name pos:start="441:23" pos:end="441:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="443:9" pos:end="443:50"><expr pos:start="443:9" pos:end="443:49"><call pos:start="443:9" pos:end="443:49"><name pos:start="443:9" pos:end="443:14">gen_ld</name><argument_list pos:start="443:15" pos:end="443:49">(<argument pos:start="443:16" pos:end="443:18"><expr pos:start="443:16" pos:end="443:18"><name pos:start="443:16" pos:end="443:18">ctx</name></expr></argument>, <argument pos:start="443:21" pos:end="443:27"><expr pos:start="443:21" pos:end="443:27"><name pos:start="443:21" pos:end="443:27">OPC_LWU</name></expr></argument>, <argument pos:start="443:30" pos:end="443:31"><expr pos:start="443:30" pos:end="443:31"><name pos:start="443:30" pos:end="443:31">ry</name></expr></argument>, <argument pos:start="443:34" pos:end="443:35"><expr pos:start="443:34" pos:end="443:35"><name pos:start="443:34" pos:end="443:35">rx</name></expr></argument>, <argument pos:start="443:38" pos:end="443:48"><expr pos:start="443:38" pos:end="443:48"><name pos:start="443:38" pos:end="443:43">offset</name> <operator pos:start="443:45" pos:end="443:46">&lt;&lt;</operator> <literal type="number" pos:start="443:48" pos:end="443:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="445:9" pos:end="448:0">break;</break>

<cpp:endif pos:start="447:1" pos:end="447:6">#<cpp:directive pos:start="447:2" pos:end="447:6">endif</cpp:directive></cpp:endif>

    <case pos:start="449:5" pos:end="449:20">case <expr pos:start="449:10" pos:end="449:19"><name pos:start="449:10" pos:end="449:19">M16_OPC_SB</name></expr>:</case>

        <expr_stmt pos:start="451:9" pos:end="451:44"><expr pos:start="451:9" pos:end="451:43"><call pos:start="451:9" pos:end="451:43"><name pos:start="451:9" pos:end="451:14">gen_st</name><argument_list pos:start="451:15" pos:end="451:43">(<argument pos:start="451:16" pos:end="451:18"><expr pos:start="451:16" pos:end="451:18"><name pos:start="451:16" pos:end="451:18">ctx</name></expr></argument>, <argument pos:start="451:21" pos:end="451:26"><expr pos:start="451:21" pos:end="451:26"><name pos:start="451:21" pos:end="451:26">OPC_SB</name></expr></argument>, <argument pos:start="451:29" pos:end="451:30"><expr pos:start="451:29" pos:end="451:30"><name pos:start="451:29" pos:end="451:30">ry</name></expr></argument>, <argument pos:start="451:33" pos:end="451:34"><expr pos:start="451:33" pos:end="451:34"><name pos:start="451:33" pos:end="451:34">rx</name></expr></argument>, <argument pos:start="451:37" pos:end="451:42"><expr pos:start="451:37" pos:end="451:42"><name pos:start="451:37" pos:end="451:42">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="453:9" pos:end="453:14">break;</break>

    <case pos:start="455:5" pos:end="455:20">case <expr pos:start="455:10" pos:end="455:19"><name pos:start="455:10" pos:end="455:19">M16_OPC_SH</name></expr>:</case>

        <expr_stmt pos:start="457:9" pos:end="457:49"><expr pos:start="457:9" pos:end="457:48"><call pos:start="457:9" pos:end="457:48"><name pos:start="457:9" pos:end="457:14">gen_st</name><argument_list pos:start="457:15" pos:end="457:48">(<argument pos:start="457:16" pos:end="457:18"><expr pos:start="457:16" pos:end="457:18"><name pos:start="457:16" pos:end="457:18">ctx</name></expr></argument>, <argument pos:start="457:21" pos:end="457:26"><expr pos:start="457:21" pos:end="457:26"><name pos:start="457:21" pos:end="457:26">OPC_SH</name></expr></argument>, <argument pos:start="457:29" pos:end="457:30"><expr pos:start="457:29" pos:end="457:30"><name pos:start="457:29" pos:end="457:30">ry</name></expr></argument>, <argument pos:start="457:33" pos:end="457:34"><expr pos:start="457:33" pos:end="457:34"><name pos:start="457:33" pos:end="457:34">rx</name></expr></argument>, <argument pos:start="457:37" pos:end="457:47"><expr pos:start="457:37" pos:end="457:47"><name pos:start="457:37" pos:end="457:42">offset</name> <operator pos:start="457:44" pos:end="457:45">&lt;&lt;</operator> <literal type="number" pos:start="457:47" pos:end="457:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="459:9" pos:end="459:14">break;</break>

    <case pos:start="461:5" pos:end="461:22">case <expr pos:start="461:10" pos:end="461:21"><name pos:start="461:10" pos:end="461:21">M16_OPC_SWSP</name></expr>:</case>

        <expr_stmt pos:start="463:9" pos:end="463:65"><expr pos:start="463:9" pos:end="463:64"><call pos:start="463:9" pos:end="463:64"><name pos:start="463:9" pos:end="463:14">gen_st</name><argument_list pos:start="463:15" pos:end="463:64">(<argument pos:start="463:16" pos:end="463:18"><expr pos:start="463:16" pos:end="463:18"><name pos:start="463:16" pos:end="463:18">ctx</name></expr></argument>, <argument pos:start="463:21" pos:end="463:26"><expr pos:start="463:21" pos:end="463:26"><name pos:start="463:21" pos:end="463:26">OPC_SW</name></expr></argument>, <argument pos:start="463:29" pos:end="463:30"><expr pos:start="463:29" pos:end="463:30"><name pos:start="463:29" pos:end="463:30">rx</name></expr></argument>, <argument pos:start="463:33" pos:end="463:34"><expr pos:start="463:33" pos:end="463:34"><literal type="number" pos:start="463:33" pos:end="463:34">29</literal></expr></argument>, <argument pos:start="463:37" pos:end="463:63"><expr pos:start="463:37" pos:end="463:63"><operator pos:start="463:37" pos:end="463:37">(</operator><operator pos:start="463:38" pos:end="463:38">(</operator><name pos:start="463:39" pos:end="463:45">uint8_t</name><operator pos:start="463:46" pos:end="463:46">)</operator><name pos:start="463:47" pos:end="463:57"><name pos:start="463:47" pos:end="463:49">ctx</name><operator pos:start="463:50" pos:end="463:51">-&gt;</operator><name pos:start="463:52" pos:end="463:57">opcode</name></name><operator pos:start="463:58" pos:end="463:58">)</operator> <operator pos:start="463:60" pos:end="463:61">&lt;&lt;</operator> <literal type="number" pos:start="463:63" pos:end="463:63">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="465:9" pos:end="465:14">break;</break>

    <case pos:start="467:5" pos:end="467:20">case <expr pos:start="467:10" pos:end="467:19"><name pos:start="467:10" pos:end="467:19">M16_OPC_SW</name></expr>:</case>

        <expr_stmt pos:start="469:9" pos:end="469:49"><expr pos:start="469:9" pos:end="469:48"><call pos:start="469:9" pos:end="469:48"><name pos:start="469:9" pos:end="469:14">gen_st</name><argument_list pos:start="469:15" pos:end="469:48">(<argument pos:start="469:16" pos:end="469:18"><expr pos:start="469:16" pos:end="469:18"><name pos:start="469:16" pos:end="469:18">ctx</name></expr></argument>, <argument pos:start="469:21" pos:end="469:26"><expr pos:start="469:21" pos:end="469:26"><name pos:start="469:21" pos:end="469:26">OPC_SW</name></expr></argument>, <argument pos:start="469:29" pos:end="469:30"><expr pos:start="469:29" pos:end="469:30"><name pos:start="469:29" pos:end="469:30">ry</name></expr></argument>, <argument pos:start="469:33" pos:end="469:34"><expr pos:start="469:33" pos:end="469:34"><name pos:start="469:33" pos:end="469:34">rx</name></expr></argument>, <argument pos:start="469:37" pos:end="469:47"><expr pos:start="469:37" pos:end="469:47"><name pos:start="469:37" pos:end="469:42">offset</name> <operator pos:start="469:44" pos:end="469:45">&lt;&lt;</operator> <literal type="number" pos:start="469:47" pos:end="469:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="471:9" pos:end="471:14">break;</break>

    <case pos:start="473:5" pos:end="473:21">case <expr pos:start="473:10" pos:end="473:20"><name pos:start="473:10" pos:end="473:20">M16_OPC_RRR</name></expr>:</case>

        <block pos:start="475:9" pos:end="533:9">{<block_content pos:start="477:13" pos:end="531:13">

            <decl_stmt pos:start="477:13" pos:end="477:52"><decl pos:start="477:13" pos:end="477:51"><type pos:start="477:13" pos:end="477:15"><name pos:start="477:13" pos:end="477:15">int</name></type> <name pos:start="477:17" pos:end="477:18">rz</name> <init pos:start="477:20" pos:end="477:51">= <expr pos:start="477:22" pos:end="477:51"><call pos:start="477:22" pos:end="477:51"><name pos:start="477:22" pos:end="477:25">xlat</name><argument_list pos:start="477:26" pos:end="477:51">(<argument pos:start="477:27" pos:end="477:50"><expr pos:start="477:27" pos:end="477:50"><operator pos:start="477:27" pos:end="477:27">(</operator><name pos:start="477:28" pos:end="477:38"><name pos:start="477:28" pos:end="477:30">ctx</name><operator pos:start="477:31" pos:end="477:32">-&gt;</operator><name pos:start="477:33" pos:end="477:38">opcode</name></name> <operator pos:start="477:40" pos:end="477:41">&gt;&gt;</operator> <literal type="number" pos:start="477:43" pos:end="477:43">2</literal><operator pos:start="477:44" pos:end="477:44">)</operator> <operator pos:start="477:46" pos:end="477:46">&amp;</operator> <literal type="number" pos:start="477:48" pos:end="477:50">0x7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="479:13" pos:end="479:26"><decl pos:start="479:13" pos:end="479:25"><type pos:start="479:13" pos:end="479:15"><name pos:start="479:13" pos:end="479:15">int</name></type> <name pos:start="479:17" pos:end="479:25">mips32_op</name></decl>;</decl_stmt>



            <switch pos:start="483:13" pos:end="523:13">switch <condition pos:start="483:20" pos:end="483:38">(<expr pos:start="483:21" pos:end="483:37"><name pos:start="483:21" pos:end="483:31"><name pos:start="483:21" pos:end="483:23">ctx</name><operator pos:start="483:24" pos:end="483:25">-&gt;</operator><name pos:start="483:26" pos:end="483:31">opcode</name></name> <operator pos:start="483:33" pos:end="483:33">&amp;</operator> <literal type="number" pos:start="483:35" pos:end="483:37">0x3</literal></expr>)</condition> <block pos:start="483:40" pos:end="523:13">{<block_content pos:start="485:13" pos:end="521:26">

            <case pos:start="485:13" pos:end="485:26">case <expr pos:start="485:18" pos:end="485:25"><name pos:start="485:18" pos:end="485:25">RRR_ADDU</name></expr>:</case>

                <expr_stmt pos:start="487:17" pos:end="487:37"><expr pos:start="487:17" pos:end="487:36"><name pos:start="487:17" pos:end="487:25">mips32_op</name> <operator pos:start="487:27" pos:end="487:27">=</operator> <name pos:start="487:29" pos:end="487:36">OPC_ADDU</name></expr>;</expr_stmt>

                <break pos:start="489:17" pos:end="489:22">break;</break>

            <case pos:start="491:13" pos:end="491:26">case <expr pos:start="491:18" pos:end="491:25"><name pos:start="491:18" pos:end="491:25">RRR_SUBU</name></expr>:</case>

                <expr_stmt pos:start="493:17" pos:end="493:37"><expr pos:start="493:17" pos:end="493:36"><name pos:start="493:17" pos:end="493:25">mips32_op</name> <operator pos:start="493:27" pos:end="493:27">=</operator> <name pos:start="493:29" pos:end="493:36">OPC_SUBU</name></expr>;</expr_stmt>

                <break pos:start="495:17" pos:end="498:0">break;</break>

<cpp:if pos:start="497:1" pos:end="497:26">#<cpp:directive pos:start="497:2" pos:end="497:3">if</cpp:directive> <expr pos:start="497:5" pos:end="497:26"><call pos:start="497:5" pos:end="497:26"><name pos:start="497:5" pos:end="497:11">defined</name><argument_list pos:start="497:12" pos:end="497:26">(<argument pos:start="497:13" pos:end="497:25"><expr pos:start="497:13" pos:end="497:25"><name pos:start="497:13" pos:end="497:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <case pos:start="499:13" pos:end="499:27">case <expr pos:start="499:18" pos:end="499:26"><name pos:start="499:18" pos:end="499:26">RRR_DADDU</name></expr>:</case>

                <expr_stmt pos:start="501:17" pos:end="501:38"><expr pos:start="501:17" pos:end="501:37"><name pos:start="501:17" pos:end="501:25">mips32_op</name> <operator pos:start="501:27" pos:end="501:27">=</operator> <name pos:start="501:29" pos:end="501:37">OPC_DADDU</name></expr>;</expr_stmt>

                <expr_stmt pos:start="503:17" pos:end="503:35"><expr pos:start="503:17" pos:end="503:34"><call pos:start="503:17" pos:end="503:34"><name pos:start="503:17" pos:end="503:29">check_mips_64</name><argument_list pos:start="503:30" pos:end="503:34">(<argument pos:start="503:31" pos:end="503:33"><expr pos:start="503:31" pos:end="503:33"><name pos:start="503:31" pos:end="503:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="505:17" pos:end="505:22">break;</break>

            <case pos:start="507:13" pos:end="507:27">case <expr pos:start="507:18" pos:end="507:26"><name pos:start="507:18" pos:end="507:26">RRR_DSUBU</name></expr>:</case>

                <expr_stmt pos:start="509:17" pos:end="509:38"><expr pos:start="509:17" pos:end="509:37"><name pos:start="509:17" pos:end="509:25">mips32_op</name> <operator pos:start="509:27" pos:end="509:27">=</operator> <name pos:start="509:29" pos:end="509:37">OPC_DSUBU</name></expr>;</expr_stmt>

                <expr_stmt pos:start="511:17" pos:end="511:35"><expr pos:start="511:17" pos:end="511:34"><call pos:start="511:17" pos:end="511:34"><name pos:start="511:17" pos:end="511:29">check_mips_64</name><argument_list pos:start="511:30" pos:end="511:34">(<argument pos:start="511:31" pos:end="511:33"><expr pos:start="511:31" pos:end="511:33"><name pos:start="511:31" pos:end="511:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="513:17" pos:end="516:0">break;</break>

<cpp:endif pos:start="515:1" pos:end="515:6">#<cpp:directive pos:start="515:2" pos:end="515:6">endif</cpp:directive></cpp:endif>

            <default pos:start="517:13" pos:end="517:20">default:</default>

                <expr_stmt pos:start="519:17" pos:end="519:49"><expr pos:start="519:17" pos:end="519:48"><call pos:start="519:17" pos:end="519:48"><name pos:start="519:17" pos:end="519:34">generate_exception</name><argument_list pos:start="519:35" pos:end="519:48">(<argument pos:start="519:36" pos:end="519:38"><expr pos:start="519:36" pos:end="519:38"><name pos:start="519:36" pos:end="519:38">ctx</name></expr></argument>, <argument pos:start="519:41" pos:end="519:47"><expr pos:start="519:41" pos:end="519:47"><name pos:start="519:41" pos:end="519:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="521:17" pos:end="521:26">goto <name pos:start="521:22" pos:end="521:25">done</name>;</goto>

            </block_content>}</block></switch>



            <expr_stmt pos:start="527:13" pos:end="527:50"><expr pos:start="527:13" pos:end="527:49"><call pos:start="527:13" pos:end="527:49"><name pos:start="527:13" pos:end="527:21">gen_arith</name><argument_list pos:start="527:22" pos:end="527:49">(<argument pos:start="527:23" pos:end="527:25"><expr pos:start="527:23" pos:end="527:25"><name pos:start="527:23" pos:end="527:25">ctx</name></expr></argument>, <argument pos:start="527:28" pos:end="527:36"><expr pos:start="527:28" pos:end="527:36"><name pos:start="527:28" pos:end="527:36">mips32_op</name></expr></argument>, <argument pos:start="527:39" pos:end="527:40"><expr pos:start="527:39" pos:end="527:40"><name pos:start="527:39" pos:end="527:40">rz</name></expr></argument>, <argument pos:start="527:43" pos:end="527:44"><expr pos:start="527:43" pos:end="527:44"><name pos:start="527:43" pos:end="527:44">rx</name></expr></argument>, <argument pos:start="527:47" pos:end="527:48"><expr pos:start="527:47" pos:end="527:48"><name pos:start="527:47" pos:end="527:48">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="529:9" pos:end="529:13"><name pos:start="529:9" pos:end="529:12">done</name>:</label>

            <empty_stmt pos:start="531:13" pos:end="531:13">;</empty_stmt>

        </block_content>}</block>

        <break pos:start="535:9" pos:end="535:14">break;</break>

    <case pos:start="537:5" pos:end="537:20">case <expr pos:start="537:10" pos:end="537:19"><name pos:start="537:10" pos:end="537:19">M16_OPC_RR</name></expr>:</case>

        <switch pos:start="539:9" pos:end="855:9">switch <condition pos:start="539:16" pos:end="539:20">(<expr pos:start="539:17" pos:end="539:19"><name pos:start="539:17" pos:end="539:19">op1</name></expr>)</condition> <block pos:start="539:22" pos:end="855:9">{<block_content pos:start="541:9" pos:end="853:18">

        <case pos:start="541:9" pos:end="541:19">case <expr pos:start="541:14" pos:end="541:18"><name pos:start="541:14" pos:end="541:18">RR_JR</name></expr>:</case>

            <block pos:start="543:13" pos:end="573:13">{<block_content pos:start="545:17" pos:end="571:17">

                <decl_stmt pos:start="545:17" pos:end="545:50"><decl pos:start="545:17" pos:end="545:49"><type pos:start="545:17" pos:end="545:19"><name pos:start="545:17" pos:end="545:19">int</name></type> <name pos:start="545:21" pos:end="545:22">nd</name> <init pos:start="545:24" pos:end="545:49">= <expr pos:start="545:26" pos:end="545:49"><operator pos:start="545:26" pos:end="545:26">(</operator><name pos:start="545:27" pos:end="545:37"><name pos:start="545:27" pos:end="545:29">ctx</name><operator pos:start="545:30" pos:end="545:31">-&gt;</operator><name pos:start="545:32" pos:end="545:37">opcode</name></name> <operator pos:start="545:39" pos:end="545:40">&gt;&gt;</operator> <literal type="number" pos:start="545:42" pos:end="545:42">7</literal><operator pos:start="545:43" pos:end="545:43">)</operator> <operator pos:start="545:45" pos:end="545:45">&amp;</operator> <literal type="number" pos:start="545:47" pos:end="545:49">0x1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="547:17" pos:end="547:52"><decl pos:start="547:17" pos:end="547:51"><type pos:start="547:17" pos:end="547:19"><name pos:start="547:17" pos:end="547:19">int</name></type> <name pos:start="547:21" pos:end="547:24">link</name> <init pos:start="547:26" pos:end="547:51">= <expr pos:start="547:28" pos:end="547:51"><operator pos:start="547:28" pos:end="547:28">(</operator><name pos:start="547:29" pos:end="547:39"><name pos:start="547:29" pos:end="547:31">ctx</name><operator pos:start="547:32" pos:end="547:33">-&gt;</operator><name pos:start="547:34" pos:end="547:39">opcode</name></name> <operator pos:start="547:41" pos:end="547:42">&gt;&gt;</operator> <literal type="number" pos:start="547:44" pos:end="547:44">6</literal><operator pos:start="547:45" pos:end="547:45">)</operator> <operator pos:start="547:47" pos:end="547:47">&amp;</operator> <literal type="number" pos:start="547:49" pos:end="547:51">0x1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="549:17" pos:end="549:50"><decl pos:start="549:17" pos:end="549:49"><type pos:start="549:17" pos:end="549:19"><name pos:start="549:17" pos:end="549:19">int</name></type> <name pos:start="549:21" pos:end="549:22">ra</name> <init pos:start="549:24" pos:end="549:49">= <expr pos:start="549:26" pos:end="549:49"><operator pos:start="549:26" pos:end="549:26">(</operator><name pos:start="549:27" pos:end="549:37"><name pos:start="549:27" pos:end="549:29">ctx</name><operator pos:start="549:30" pos:end="549:31">-&gt;</operator><name pos:start="549:32" pos:end="549:37">opcode</name></name> <operator pos:start="549:39" pos:end="549:40">&gt;&gt;</operator> <literal type="number" pos:start="549:42" pos:end="549:42">5</literal><operator pos:start="549:43" pos:end="549:43">)</operator> <operator pos:start="549:45" pos:end="549:45">&amp;</operator> <literal type="number" pos:start="549:47" pos:end="549:49">0x1</literal></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="553:17" pos:end="561:17"><if pos:start="553:17" pos:end="557:17">if <condition pos:start="553:20" pos:end="553:25">(<expr pos:start="553:21" pos:end="553:24"><name pos:start="553:21" pos:end="553:24">link</name></expr>)</condition> <block pos:start="553:27" pos:end="557:17">{<block_content pos:start="555:21" pos:end="555:52">

                    <expr_stmt pos:start="555:21" pos:end="555:52"><expr pos:start="555:21" pos:end="555:51"><name pos:start="555:21" pos:end="555:22">op</name> <operator pos:start="555:24" pos:end="555:24">=</operator> <ternary pos:start="555:26" pos:end="555:51"><condition pos:start="555:26" pos:end="555:29"><expr pos:start="555:26" pos:end="555:27"><name pos:start="555:26" pos:end="555:27">nd</name></expr> ?</condition><then pos:start="555:31" pos:end="555:39"> <expr pos:start="555:31" pos:end="555:39"><name pos:start="555:31" pos:end="555:39">OPC_JALRC</name></expr> </then><else pos:start="555:41" pos:end="555:51">: <expr pos:start="555:43" pos:end="555:51"><name pos:start="555:43" pos:end="555:51">OPC_JALRS</name></expr></else></ternary></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="557:19" pos:end="561:17">else <block pos:start="557:24" pos:end="561:17">{<block_content pos:start="559:21" pos:end="559:32">

                    <expr_stmt pos:start="559:21" pos:end="559:32"><expr pos:start="559:21" pos:end="559:31"><name pos:start="559:21" pos:end="559:22">op</name> <operator pos:start="559:24" pos:end="559:24">=</operator> <name pos:start="559:26" pos:end="559:31">OPC_JR</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="565:17" pos:end="565:68"><expr pos:start="565:17" pos:end="565:67"><call pos:start="565:17" pos:end="565:67"><name pos:start="565:17" pos:end="565:34">gen_compute_branch</name><argument_list pos:start="565:35" pos:end="565:67">(<argument pos:start="565:36" pos:end="565:38"><expr pos:start="565:36" pos:end="565:38"><name pos:start="565:36" pos:end="565:38">ctx</name></expr></argument>, <argument pos:start="565:41" pos:end="565:42"><expr pos:start="565:41" pos:end="565:42"><name pos:start="565:41" pos:end="565:42">op</name></expr></argument>, <argument pos:start="565:45" pos:end="565:45"><expr pos:start="565:45" pos:end="565:45"><literal type="number" pos:start="565:45" pos:end="565:45">2</literal></expr></argument>, <argument pos:start="565:48" pos:end="565:59"><expr pos:start="565:48" pos:end="565:59"><ternary pos:start="565:48" pos:end="565:59"><condition pos:start="565:48" pos:end="565:51"><expr pos:start="565:48" pos:end="565:49"><name pos:start="565:48" pos:end="565:49">ra</name></expr> ?</condition><then pos:start="565:53" pos:end="565:54"> <expr pos:start="565:53" pos:end="565:54"><literal type="number" pos:start="565:53" pos:end="565:54">31</literal></expr> </then><else pos:start="565:56" pos:end="565:59">: <expr pos:start="565:58" pos:end="565:59"><name pos:start="565:58" pos:end="565:59">rx</name></expr></else></ternary></expr></argument>, <argument pos:start="565:62" pos:end="565:63"><expr pos:start="565:62" pos:end="565:63"><literal type="number" pos:start="565:62" pos:end="565:63">31</literal></expr></argument>, <argument pos:start="565:66" pos:end="565:66"><expr pos:start="565:66" pos:end="565:66"><literal type="number" pos:start="565:66" pos:end="565:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="567:17" pos:end="571:17"><if pos:start="567:17" pos:end="571:17">if <condition pos:start="567:20" pos:end="567:24">(<expr pos:start="567:21" pos:end="567:23"><operator pos:start="567:21" pos:end="567:21">!</operator><name pos:start="567:22" pos:end="567:23">nd</name></expr>)</condition> <block pos:start="567:26" pos:end="571:17">{<block_content pos:start="569:21" pos:end="569:35">

                    <expr_stmt pos:start="569:21" pos:end="569:35"><expr pos:start="569:21" pos:end="569:34"><operator pos:start="569:21" pos:end="569:21">*</operator><name pos:start="569:22" pos:end="569:30">is_branch</name> <operator pos:start="569:32" pos:end="569:32">=</operator> <literal type="number" pos:start="569:34" pos:end="569:34">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <break pos:start="575:13" pos:end="575:18">break;</break>

        <case pos:start="577:9" pos:end="577:22">case <expr pos:start="577:14" pos:end="577:21"><name pos:start="577:14" pos:end="577:21">RR_SDBBP</name></expr>:</case>

            <comment type="block" pos:start="579:13" pos:end="583:15">/* XXX: not clear which exception should be raised

             *      when in debug mode...

             */</comment>

            <expr_stmt pos:start="585:13" pos:end="585:40"><expr pos:start="585:13" pos:end="585:39"><call pos:start="585:13" pos:end="585:39"><name pos:start="585:13" pos:end="585:22">check_insn</name><argument_list pos:start="585:23" pos:end="585:39">(<argument pos:start="585:24" pos:end="585:26"><expr pos:start="585:24" pos:end="585:26"><name pos:start="585:24" pos:end="585:26">ctx</name></expr></argument>, <argument pos:start="585:29" pos:end="585:38"><expr pos:start="585:29" pos:end="585:38"><name pos:start="585:29" pos:end="585:38">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="587:13" pos:end="595:13"><if pos:start="587:13" pos:end="591:13">if <condition pos:start="587:16" pos:end="587:47">(<expr pos:start="587:17" pos:end="587:46"><operator pos:start="587:17" pos:end="587:17">!</operator><operator pos:start="587:18" pos:end="587:18">(</operator><name pos:start="587:19" pos:end="587:29"><name pos:start="587:19" pos:end="587:21">ctx</name><operator pos:start="587:22" pos:end="587:23">-&gt;</operator><name pos:start="587:24" pos:end="587:29">hflags</name></name> <operator pos:start="587:31" pos:end="587:31">&amp;</operator> <name pos:start="587:33" pos:end="587:45">MIPS_HFLAG_DM</name><operator pos:start="587:46" pos:end="587:46">)</operator></expr>)</condition> <block pos:start="587:49" pos:end="591:13">{<block_content pos:start="589:17" pos:end="589:50">

                <expr_stmt pos:start="589:17" pos:end="589:50"><expr pos:start="589:17" pos:end="589:49"><call pos:start="589:17" pos:end="589:49"><name pos:start="589:17" pos:end="589:34">generate_exception</name><argument_list pos:start="589:35" pos:end="589:49">(<argument pos:start="589:36" pos:end="589:38"><expr pos:start="589:36" pos:end="589:38"><name pos:start="589:36" pos:end="589:38">ctx</name></expr></argument>, <argument pos:start="589:41" pos:end="589:48"><expr pos:start="589:41" pos:end="589:48"><name pos:start="589:41" pos:end="589:48">EXCP_DBp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="591:15" pos:end="595:13">else <block pos:start="591:20" pos:end="595:13">{<block_content pos:start="593:17" pos:end="593:50">

                <expr_stmt pos:start="593:17" pos:end="593:50"><expr pos:start="593:17" pos:end="593:49"><call pos:start="593:17" pos:end="593:49"><name pos:start="593:17" pos:end="593:34">generate_exception</name><argument_list pos:start="593:35" pos:end="593:49">(<argument pos:start="593:36" pos:end="593:38"><expr pos:start="593:36" pos:end="593:38"><name pos:start="593:36" pos:end="593:38">ctx</name></expr></argument>, <argument pos:start="593:41" pos:end="593:48"><expr pos:start="593:41" pos:end="593:48"><name pos:start="593:41" pos:end="593:48">EXCP_DBp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="597:13" pos:end="597:18">break;</break>

        <case pos:start="599:9" pos:end="599:20">case <expr pos:start="599:14" pos:end="599:19"><name pos:start="599:14" pos:end="599:19">RR_SLT</name></expr>:</case>

            <expr_stmt pos:start="601:13" pos:end="601:46"><expr pos:start="601:13" pos:end="601:45"><call pos:start="601:13" pos:end="601:45"><name pos:start="601:13" pos:end="601:19">gen_slt</name><argument_list pos:start="601:20" pos:end="601:45">(<argument pos:start="601:21" pos:end="601:23"><expr pos:start="601:21" pos:end="601:23"><name pos:start="601:21" pos:end="601:23">ctx</name></expr></argument>, <argument pos:start="601:26" pos:end="601:32"><expr pos:start="601:26" pos:end="601:32"><name pos:start="601:26" pos:end="601:32">OPC_SLT</name></expr></argument>, <argument pos:start="601:35" pos:end="601:36"><expr pos:start="601:35" pos:end="601:36"><literal type="number" pos:start="601:35" pos:end="601:36">24</literal></expr></argument>, <argument pos:start="601:39" pos:end="601:40"><expr pos:start="601:39" pos:end="601:40"><name pos:start="601:39" pos:end="601:40">rx</name></expr></argument>, <argument pos:start="601:43" pos:end="601:44"><expr pos:start="601:43" pos:end="601:44"><name pos:start="601:43" pos:end="601:44">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="603:13" pos:end="603:18">break;</break>

        <case pos:start="605:9" pos:end="605:21">case <expr pos:start="605:14" pos:end="605:20"><name pos:start="605:14" pos:end="605:20">RR_SLTU</name></expr>:</case>

            <expr_stmt pos:start="607:13" pos:end="607:47"><expr pos:start="607:13" pos:end="607:46"><call pos:start="607:13" pos:end="607:46"><name pos:start="607:13" pos:end="607:19">gen_slt</name><argument_list pos:start="607:20" pos:end="607:46">(<argument pos:start="607:21" pos:end="607:23"><expr pos:start="607:21" pos:end="607:23"><name pos:start="607:21" pos:end="607:23">ctx</name></expr></argument>, <argument pos:start="607:26" pos:end="607:33"><expr pos:start="607:26" pos:end="607:33"><name pos:start="607:26" pos:end="607:33">OPC_SLTU</name></expr></argument>, <argument pos:start="607:36" pos:end="607:37"><expr pos:start="607:36" pos:end="607:37"><literal type="number" pos:start="607:36" pos:end="607:37">24</literal></expr></argument>, <argument pos:start="607:40" pos:end="607:41"><expr pos:start="607:40" pos:end="607:41"><name pos:start="607:40" pos:end="607:41">rx</name></expr></argument>, <argument pos:start="607:44" pos:end="607:45"><expr pos:start="607:44" pos:end="607:45"><name pos:start="607:44" pos:end="607:45">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="609:13" pos:end="609:18">break;</break>

        <case pos:start="611:9" pos:end="611:22">case <expr pos:start="611:14" pos:end="611:21"><name pos:start="611:14" pos:end="611:21">RR_BREAK</name></expr>:</case>

            <expr_stmt pos:start="613:13" pos:end="613:48"><expr pos:start="613:13" pos:end="613:47"><call pos:start="613:13" pos:end="613:47"><name pos:start="613:13" pos:end="613:30">generate_exception</name><argument_list pos:start="613:31" pos:end="613:47">(<argument pos:start="613:32" pos:end="613:34"><expr pos:start="613:32" pos:end="613:34"><name pos:start="613:32" pos:end="613:34">ctx</name></expr></argument>, <argument pos:start="613:37" pos:end="613:46"><expr pos:start="613:37" pos:end="613:46"><name pos:start="613:37" pos:end="613:46">EXCP_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="615:13" pos:end="615:18">break;</break>

        <case pos:start="617:9" pos:end="617:21">case <expr pos:start="617:14" pos:end="617:20"><name pos:start="617:14" pos:end="617:20">RR_SLLV</name></expr>:</case>

            <expr_stmt pos:start="619:13" pos:end="619:49"><expr pos:start="619:13" pos:end="619:48"><call pos:start="619:13" pos:end="619:48"><name pos:start="619:13" pos:end="619:21">gen_shift</name><argument_list pos:start="619:22" pos:end="619:48">(<argument pos:start="619:23" pos:end="619:25"><expr pos:start="619:23" pos:end="619:25"><name pos:start="619:23" pos:end="619:25">ctx</name></expr></argument>, <argument pos:start="619:28" pos:end="619:35"><expr pos:start="619:28" pos:end="619:35"><name pos:start="619:28" pos:end="619:35">OPC_SLLV</name></expr></argument>, <argument pos:start="619:38" pos:end="619:39"><expr pos:start="619:38" pos:end="619:39"><name pos:start="619:38" pos:end="619:39">ry</name></expr></argument>, <argument pos:start="619:42" pos:end="619:43"><expr pos:start="619:42" pos:end="619:43"><name pos:start="619:42" pos:end="619:43">rx</name></expr></argument>, <argument pos:start="619:46" pos:end="619:47"><expr pos:start="619:46" pos:end="619:47"><name pos:start="619:46" pos:end="619:47">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="621:13" pos:end="621:18">break;</break>

        <case pos:start="623:9" pos:end="623:21">case <expr pos:start="623:14" pos:end="623:20"><name pos:start="623:14" pos:end="623:20">RR_SRLV</name></expr>:</case>

            <expr_stmt pos:start="625:13" pos:end="625:49"><expr pos:start="625:13" pos:end="625:48"><call pos:start="625:13" pos:end="625:48"><name pos:start="625:13" pos:end="625:21">gen_shift</name><argument_list pos:start="625:22" pos:end="625:48">(<argument pos:start="625:23" pos:end="625:25"><expr pos:start="625:23" pos:end="625:25"><name pos:start="625:23" pos:end="625:25">ctx</name></expr></argument>, <argument pos:start="625:28" pos:end="625:35"><expr pos:start="625:28" pos:end="625:35"><name pos:start="625:28" pos:end="625:35">OPC_SRLV</name></expr></argument>, <argument pos:start="625:38" pos:end="625:39"><expr pos:start="625:38" pos:end="625:39"><name pos:start="625:38" pos:end="625:39">ry</name></expr></argument>, <argument pos:start="625:42" pos:end="625:43"><expr pos:start="625:42" pos:end="625:43"><name pos:start="625:42" pos:end="625:43">rx</name></expr></argument>, <argument pos:start="625:46" pos:end="625:47"><expr pos:start="625:46" pos:end="625:47"><name pos:start="625:46" pos:end="625:47">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="627:13" pos:end="627:18">break;</break>

        <case pos:start="629:9" pos:end="629:21">case <expr pos:start="629:14" pos:end="629:20"><name pos:start="629:14" pos:end="629:20">RR_SRAV</name></expr>:</case>

            <expr_stmt pos:start="631:13" pos:end="631:49"><expr pos:start="631:13" pos:end="631:48"><call pos:start="631:13" pos:end="631:48"><name pos:start="631:13" pos:end="631:21">gen_shift</name><argument_list pos:start="631:22" pos:end="631:48">(<argument pos:start="631:23" pos:end="631:25"><expr pos:start="631:23" pos:end="631:25"><name pos:start="631:23" pos:end="631:25">ctx</name></expr></argument>, <argument pos:start="631:28" pos:end="631:35"><expr pos:start="631:28" pos:end="631:35"><name pos:start="631:28" pos:end="631:35">OPC_SRAV</name></expr></argument>, <argument pos:start="631:38" pos:end="631:39"><expr pos:start="631:38" pos:end="631:39"><name pos:start="631:38" pos:end="631:39">ry</name></expr></argument>, <argument pos:start="631:42" pos:end="631:43"><expr pos:start="631:42" pos:end="631:43"><name pos:start="631:42" pos:end="631:43">rx</name></expr></argument>, <argument pos:start="631:46" pos:end="631:47"><expr pos:start="631:46" pos:end="631:47"><name pos:start="631:46" pos:end="631:47">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="633:13" pos:end="636:0">break;</break>

<cpp:if pos:start="635:1" pos:end="635:27">#<cpp:directive pos:start="635:2" pos:end="635:3">if</cpp:directive> <expr pos:start="635:5" pos:end="635:27"><call pos:start="635:5" pos:end="635:27"><name pos:start="635:5" pos:end="635:11">defined</name> <argument_list pos:start="635:13" pos:end="635:27">(<argument pos:start="635:14" pos:end="635:26"><expr pos:start="635:14" pos:end="635:26"><name pos:start="635:14" pos:end="635:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="637:9" pos:end="637:21">case <expr pos:start="637:14" pos:end="637:20"><name pos:start="637:14" pos:end="637:20">RR_DSRL</name></expr>:</case>

            <expr_stmt pos:start="639:13" pos:end="639:31"><expr pos:start="639:13" pos:end="639:30"><call pos:start="639:13" pos:end="639:30"><name pos:start="639:13" pos:end="639:25">check_mips_64</name><argument_list pos:start="639:26" pos:end="639:30">(<argument pos:start="639:27" pos:end="639:29"><expr pos:start="639:27" pos:end="639:29"><name pos:start="639:27" pos:end="639:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="641:13" pos:end="641:53"><expr pos:start="641:13" pos:end="641:52"><call pos:start="641:13" pos:end="641:52"><name pos:start="641:13" pos:end="641:25">gen_shift_imm</name><argument_list pos:start="641:26" pos:end="641:52">(<argument pos:start="641:27" pos:end="641:29"><expr pos:start="641:27" pos:end="641:29"><name pos:start="641:27" pos:end="641:29">ctx</name></expr></argument>, <argument pos:start="641:32" pos:end="641:39"><expr pos:start="641:32" pos:end="641:39"><name pos:start="641:32" pos:end="641:39">OPC_DSRL</name></expr></argument>, <argument pos:start="641:42" pos:end="641:43"><expr pos:start="641:42" pos:end="641:43"><name pos:start="641:42" pos:end="641:43">ry</name></expr></argument>, <argument pos:start="641:46" pos:end="641:47"><expr pos:start="641:46" pos:end="641:47"><name pos:start="641:46" pos:end="641:47">ry</name></expr></argument>, <argument pos:start="641:50" pos:end="641:51"><expr pos:start="641:50" pos:end="641:51"><name pos:start="641:50" pos:end="641:51">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="643:13" pos:end="646:0">break;</break>

<cpp:endif pos:start="645:1" pos:end="645:6">#<cpp:directive pos:start="645:2" pos:end="645:6">endif</cpp:directive></cpp:endif>

        <case pos:start="647:9" pos:end="647:20">case <expr pos:start="647:14" pos:end="647:19"><name pos:start="647:14" pos:end="647:19">RR_CMP</name></expr>:</case>

            <expr_stmt pos:start="649:13" pos:end="649:48"><expr pos:start="649:13" pos:end="649:47"><call pos:start="649:13" pos:end="649:47"><name pos:start="649:13" pos:end="649:21">gen_logic</name><argument_list pos:start="649:22" pos:end="649:47">(<argument pos:start="649:23" pos:end="649:25"><expr pos:start="649:23" pos:end="649:25"><name pos:start="649:23" pos:end="649:25">ctx</name></expr></argument>, <argument pos:start="649:28" pos:end="649:34"><expr pos:start="649:28" pos:end="649:34"><name pos:start="649:28" pos:end="649:34">OPC_XOR</name></expr></argument>, <argument pos:start="649:37" pos:end="649:38"><expr pos:start="649:37" pos:end="649:38"><literal type="number" pos:start="649:37" pos:end="649:38">24</literal></expr></argument>, <argument pos:start="649:41" pos:end="649:42"><expr pos:start="649:41" pos:end="649:42"><name pos:start="649:41" pos:end="649:42">rx</name></expr></argument>, <argument pos:start="649:45" pos:end="649:46"><expr pos:start="649:45" pos:end="649:46"><name pos:start="649:45" pos:end="649:46">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="651:13" pos:end="651:18">break;</break>

        <case pos:start="653:9" pos:end="653:20">case <expr pos:start="653:14" pos:end="653:19"><name pos:start="653:14" pos:end="653:19">RR_NEG</name></expr>:</case>

            <expr_stmt pos:start="655:13" pos:end="655:48"><expr pos:start="655:13" pos:end="655:47"><call pos:start="655:13" pos:end="655:47"><name pos:start="655:13" pos:end="655:21">gen_arith</name><argument_list pos:start="655:22" pos:end="655:47">(<argument pos:start="655:23" pos:end="655:25"><expr pos:start="655:23" pos:end="655:25"><name pos:start="655:23" pos:end="655:25">ctx</name></expr></argument>, <argument pos:start="655:28" pos:end="655:35"><expr pos:start="655:28" pos:end="655:35"><name pos:start="655:28" pos:end="655:35">OPC_SUBU</name></expr></argument>, <argument pos:start="655:38" pos:end="655:39"><expr pos:start="655:38" pos:end="655:39"><name pos:start="655:38" pos:end="655:39">rx</name></expr></argument>, <argument pos:start="655:42" pos:end="655:42"><expr pos:start="655:42" pos:end="655:42"><literal type="number" pos:start="655:42" pos:end="655:42">0</literal></expr></argument>, <argument pos:start="655:45" pos:end="655:46"><expr pos:start="655:45" pos:end="655:46"><name pos:start="655:45" pos:end="655:46">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="657:13" pos:end="657:18">break;</break>

        <case pos:start="659:9" pos:end="659:20">case <expr pos:start="659:14" pos:end="659:19"><name pos:start="659:14" pos:end="659:19">RR_AND</name></expr>:</case>

            <expr_stmt pos:start="661:13" pos:end="661:48"><expr pos:start="661:13" pos:end="661:47"><call pos:start="661:13" pos:end="661:47"><name pos:start="661:13" pos:end="661:21">gen_logic</name><argument_list pos:start="661:22" pos:end="661:47">(<argument pos:start="661:23" pos:end="661:25"><expr pos:start="661:23" pos:end="661:25"><name pos:start="661:23" pos:end="661:25">ctx</name></expr></argument>, <argument pos:start="661:28" pos:end="661:34"><expr pos:start="661:28" pos:end="661:34"><name pos:start="661:28" pos:end="661:34">OPC_AND</name></expr></argument>, <argument pos:start="661:37" pos:end="661:38"><expr pos:start="661:37" pos:end="661:38"><name pos:start="661:37" pos:end="661:38">rx</name></expr></argument>, <argument pos:start="661:41" pos:end="661:42"><expr pos:start="661:41" pos:end="661:42"><name pos:start="661:41" pos:end="661:42">rx</name></expr></argument>, <argument pos:start="661:45" pos:end="661:46"><expr pos:start="661:45" pos:end="661:46"><name pos:start="661:45" pos:end="661:46">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="663:13" pos:end="663:18">break;</break>

        <case pos:start="665:9" pos:end="665:19">case <expr pos:start="665:14" pos:end="665:18"><name pos:start="665:14" pos:end="665:18">RR_OR</name></expr>:</case>

            <expr_stmt pos:start="667:13" pos:end="667:47"><expr pos:start="667:13" pos:end="667:46"><call pos:start="667:13" pos:end="667:46"><name pos:start="667:13" pos:end="667:21">gen_logic</name><argument_list pos:start="667:22" pos:end="667:46">(<argument pos:start="667:23" pos:end="667:25"><expr pos:start="667:23" pos:end="667:25"><name pos:start="667:23" pos:end="667:25">ctx</name></expr></argument>, <argument pos:start="667:28" pos:end="667:33"><expr pos:start="667:28" pos:end="667:33"><name pos:start="667:28" pos:end="667:33">OPC_OR</name></expr></argument>, <argument pos:start="667:36" pos:end="667:37"><expr pos:start="667:36" pos:end="667:37"><name pos:start="667:36" pos:end="667:37">rx</name></expr></argument>, <argument pos:start="667:40" pos:end="667:41"><expr pos:start="667:40" pos:end="667:41"><name pos:start="667:40" pos:end="667:41">rx</name></expr></argument>, <argument pos:start="667:44" pos:end="667:45"><expr pos:start="667:44" pos:end="667:45"><name pos:start="667:44" pos:end="667:45">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="669:13" pos:end="669:18">break;</break>

        <case pos:start="671:9" pos:end="671:20">case <expr pos:start="671:14" pos:end="671:19"><name pos:start="671:14" pos:end="671:19">RR_XOR</name></expr>:</case>

            <expr_stmt pos:start="673:13" pos:end="673:48"><expr pos:start="673:13" pos:end="673:47"><call pos:start="673:13" pos:end="673:47"><name pos:start="673:13" pos:end="673:21">gen_logic</name><argument_list pos:start="673:22" pos:end="673:47">(<argument pos:start="673:23" pos:end="673:25"><expr pos:start="673:23" pos:end="673:25"><name pos:start="673:23" pos:end="673:25">ctx</name></expr></argument>, <argument pos:start="673:28" pos:end="673:34"><expr pos:start="673:28" pos:end="673:34"><name pos:start="673:28" pos:end="673:34">OPC_XOR</name></expr></argument>, <argument pos:start="673:37" pos:end="673:38"><expr pos:start="673:37" pos:end="673:38"><name pos:start="673:37" pos:end="673:38">rx</name></expr></argument>, <argument pos:start="673:41" pos:end="673:42"><expr pos:start="673:41" pos:end="673:42"><name pos:start="673:41" pos:end="673:42">rx</name></expr></argument>, <argument pos:start="673:45" pos:end="673:46"><expr pos:start="673:45" pos:end="673:46"><name pos:start="673:45" pos:end="673:46">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="675:13" pos:end="675:18">break;</break>

        <case pos:start="677:9" pos:end="677:20">case <expr pos:start="677:14" pos:end="677:19"><name pos:start="677:14" pos:end="677:19">RR_NOT</name></expr>:</case>

            <expr_stmt pos:start="679:13" pos:end="679:47"><expr pos:start="679:13" pos:end="679:46"><call pos:start="679:13" pos:end="679:46"><name pos:start="679:13" pos:end="679:21">gen_logic</name><argument_list pos:start="679:22" pos:end="679:46">(<argument pos:start="679:23" pos:end="679:25"><expr pos:start="679:23" pos:end="679:25"><name pos:start="679:23" pos:end="679:25">ctx</name></expr></argument>, <argument pos:start="679:28" pos:end="679:34"><expr pos:start="679:28" pos:end="679:34"><name pos:start="679:28" pos:end="679:34">OPC_NOR</name></expr></argument>, <argument pos:start="679:37" pos:end="679:38"><expr pos:start="679:37" pos:end="679:38"><name pos:start="679:37" pos:end="679:38">rx</name></expr></argument>, <argument pos:start="679:41" pos:end="679:42"><expr pos:start="679:41" pos:end="679:42"><name pos:start="679:41" pos:end="679:42">ry</name></expr></argument>, <argument pos:start="679:45" pos:end="679:45"><expr pos:start="679:45" pos:end="679:45"><literal type="number" pos:start="679:45" pos:end="679:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="681:13" pos:end="681:18">break;</break>

        <case pos:start="683:9" pos:end="683:21">case <expr pos:start="683:14" pos:end="683:20"><name pos:start="683:14" pos:end="683:20">RR_MFHI</name></expr>:</case>

            <expr_stmt pos:start="685:13" pos:end="685:43"><expr pos:start="685:13" pos:end="685:42"><call pos:start="685:13" pos:end="685:42"><name pos:start="685:13" pos:end="685:20">gen_HILO</name><argument_list pos:start="685:21" pos:end="685:42">(<argument pos:start="685:22" pos:end="685:24"><expr pos:start="685:22" pos:end="685:24"><name pos:start="685:22" pos:end="685:24">ctx</name></expr></argument>, <argument pos:start="685:27" pos:end="685:34"><expr pos:start="685:27" pos:end="685:34"><name pos:start="685:27" pos:end="685:34">OPC_MFHI</name></expr></argument>, <argument pos:start="685:37" pos:end="685:37"><expr pos:start="685:37" pos:end="685:37"><literal type="number" pos:start="685:37" pos:end="685:37">0</literal></expr></argument>, <argument pos:start="685:40" pos:end="685:41"><expr pos:start="685:40" pos:end="685:41"><name pos:start="685:40" pos:end="685:41">rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="687:13" pos:end="687:18">break;</break>

        <case pos:start="689:9" pos:end="689:21">case <expr pos:start="689:14" pos:end="689:20"><name pos:start="689:14" pos:end="689:20">RR_CNVT</name></expr>:</case>

            <switch pos:start="691:13" pos:end="743:13">switch <condition pos:start="691:20" pos:end="691:28">(<expr pos:start="691:21" pos:end="691:27"><name pos:start="691:21" pos:end="691:27">cnvt_op</name></expr>)</condition> <block pos:start="691:30" pos:end="743:13">{<block_content pos:start="693:13" pos:end="741:22">

            <case pos:start="693:13" pos:end="693:32">case <expr pos:start="693:18" pos:end="693:31"><name pos:start="693:18" pos:end="693:31">RR_RY_CNVT_ZEB</name></expr>:</case>

                <expr_stmt pos:start="695:17" pos:end="695:59"><expr pos:start="695:17" pos:end="695:58"><call pos:start="695:17" pos:end="695:58"><name pos:start="695:17" pos:end="695:32">tcg_gen_ext8u_tl</name><argument_list pos:start="695:33" pos:end="695:58">(<argument pos:start="695:34" pos:end="695:44"><expr pos:start="695:34" pos:end="695:44"><name pos:start="695:34" pos:end="695:44"><name pos:start="695:34" pos:end="695:40">cpu_gpr</name><index pos:start="695:41" pos:end="695:44">[<expr pos:start="695:42" pos:end="695:43"><name pos:start="695:42" pos:end="695:43">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="695:47" pos:end="695:57"><expr pos:start="695:47" pos:end="695:57"><name pos:start="695:47" pos:end="695:57"><name pos:start="695:47" pos:end="695:53">cpu_gpr</name><index pos:start="695:54" pos:end="695:57">[<expr pos:start="695:55" pos:end="695:56"><name pos:start="695:55" pos:end="695:56">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="697:17" pos:end="697:22">break;</break>

            <case pos:start="699:13" pos:end="699:32">case <expr pos:start="699:18" pos:end="699:31"><name pos:start="699:18" pos:end="699:31">RR_RY_CNVT_ZEH</name></expr>:</case>

                <expr_stmt pos:start="701:17" pos:end="701:60"><expr pos:start="701:17" pos:end="701:59"><call pos:start="701:17" pos:end="701:59"><name pos:start="701:17" pos:end="701:33">tcg_gen_ext16u_tl</name><argument_list pos:start="701:34" pos:end="701:59">(<argument pos:start="701:35" pos:end="701:45"><expr pos:start="701:35" pos:end="701:45"><name pos:start="701:35" pos:end="701:45"><name pos:start="701:35" pos:end="701:41">cpu_gpr</name><index pos:start="701:42" pos:end="701:45">[<expr pos:start="701:43" pos:end="701:44"><name pos:start="701:43" pos:end="701:44">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="701:48" pos:end="701:58"><expr pos:start="701:48" pos:end="701:58"><name pos:start="701:48" pos:end="701:58"><name pos:start="701:48" pos:end="701:54">cpu_gpr</name><index pos:start="701:55" pos:end="701:58">[<expr pos:start="701:56" pos:end="701:57"><name pos:start="701:56" pos:end="701:57">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="703:17" pos:end="703:22">break;</break>

            <case pos:start="705:13" pos:end="705:32">case <expr pos:start="705:18" pos:end="705:31"><name pos:start="705:18" pos:end="705:31">RR_RY_CNVT_SEB</name></expr>:</case>

                <expr_stmt pos:start="707:17" pos:end="707:59"><expr pos:start="707:17" pos:end="707:58"><call pos:start="707:17" pos:end="707:58"><name pos:start="707:17" pos:end="707:32">tcg_gen_ext8s_tl</name><argument_list pos:start="707:33" pos:end="707:58">(<argument pos:start="707:34" pos:end="707:44"><expr pos:start="707:34" pos:end="707:44"><name pos:start="707:34" pos:end="707:44"><name pos:start="707:34" pos:end="707:40">cpu_gpr</name><index pos:start="707:41" pos:end="707:44">[<expr pos:start="707:42" pos:end="707:43"><name pos:start="707:42" pos:end="707:43">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="707:47" pos:end="707:57"><expr pos:start="707:47" pos:end="707:57"><name pos:start="707:47" pos:end="707:57"><name pos:start="707:47" pos:end="707:53">cpu_gpr</name><index pos:start="707:54" pos:end="707:57">[<expr pos:start="707:55" pos:end="707:56"><name pos:start="707:55" pos:end="707:56">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="709:17" pos:end="709:22">break;</break>

            <case pos:start="711:13" pos:end="711:32">case <expr pos:start="711:18" pos:end="711:31"><name pos:start="711:18" pos:end="711:31">RR_RY_CNVT_SEH</name></expr>:</case>

                <expr_stmt pos:start="713:17" pos:end="713:60"><expr pos:start="713:17" pos:end="713:59"><call pos:start="713:17" pos:end="713:59"><name pos:start="713:17" pos:end="713:33">tcg_gen_ext16s_tl</name><argument_list pos:start="713:34" pos:end="713:59">(<argument pos:start="713:35" pos:end="713:45"><expr pos:start="713:35" pos:end="713:45"><name pos:start="713:35" pos:end="713:45"><name pos:start="713:35" pos:end="713:41">cpu_gpr</name><index pos:start="713:42" pos:end="713:45">[<expr pos:start="713:43" pos:end="713:44"><name pos:start="713:43" pos:end="713:44">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="713:48" pos:end="713:58"><expr pos:start="713:48" pos:end="713:58"><name pos:start="713:48" pos:end="713:58"><name pos:start="713:48" pos:end="713:54">cpu_gpr</name><index pos:start="713:55" pos:end="713:58">[<expr pos:start="713:56" pos:end="713:57"><name pos:start="713:56" pos:end="713:57">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="715:17" pos:end="718:0">break;</break>

<cpp:if pos:start="717:1" pos:end="717:27">#<cpp:directive pos:start="717:2" pos:end="717:3">if</cpp:directive> <expr pos:start="717:5" pos:end="717:27"><call pos:start="717:5" pos:end="717:27"><name pos:start="717:5" pos:end="717:11">defined</name> <argument_list pos:start="717:13" pos:end="717:27">(<argument pos:start="717:14" pos:end="717:26"><expr pos:start="717:14" pos:end="717:26"><name pos:start="717:14" pos:end="717:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <case pos:start="719:13" pos:end="719:32">case <expr pos:start="719:18" pos:end="719:31"><name pos:start="719:18" pos:end="719:31">RR_RY_CNVT_ZEW</name></expr>:</case>

                <expr_stmt pos:start="721:17" pos:end="721:35"><expr pos:start="721:17" pos:end="721:34"><call pos:start="721:17" pos:end="721:34"><name pos:start="721:17" pos:end="721:29">check_mips_64</name><argument_list pos:start="721:30" pos:end="721:34">(<argument pos:start="721:31" pos:end="721:33"><expr pos:start="721:31" pos:end="721:33"><name pos:start="721:31" pos:end="721:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="723:17" pos:end="723:60"><expr pos:start="723:17" pos:end="723:59"><call pos:start="723:17" pos:end="723:59"><name pos:start="723:17" pos:end="723:33">tcg_gen_ext32u_tl</name><argument_list pos:start="723:34" pos:end="723:59">(<argument pos:start="723:35" pos:end="723:45"><expr pos:start="723:35" pos:end="723:45"><name pos:start="723:35" pos:end="723:45"><name pos:start="723:35" pos:end="723:41">cpu_gpr</name><index pos:start="723:42" pos:end="723:45">[<expr pos:start="723:43" pos:end="723:44"><name pos:start="723:43" pos:end="723:44">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="723:48" pos:end="723:58"><expr pos:start="723:48" pos:end="723:58"><name pos:start="723:48" pos:end="723:58"><name pos:start="723:48" pos:end="723:54">cpu_gpr</name><index pos:start="723:55" pos:end="723:58">[<expr pos:start="723:56" pos:end="723:57"><name pos:start="723:56" pos:end="723:57">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="725:17" pos:end="725:22">break;</break>

            <case pos:start="727:13" pos:end="727:32">case <expr pos:start="727:18" pos:end="727:31"><name pos:start="727:18" pos:end="727:31">RR_RY_CNVT_SEW</name></expr>:</case>

                <expr_stmt pos:start="729:17" pos:end="729:35"><expr pos:start="729:17" pos:end="729:34"><call pos:start="729:17" pos:end="729:34"><name pos:start="729:17" pos:end="729:29">check_mips_64</name><argument_list pos:start="729:30" pos:end="729:34">(<argument pos:start="729:31" pos:end="729:33"><expr pos:start="729:31" pos:end="729:33"><name pos:start="729:31" pos:end="729:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="731:17" pos:end="731:60"><expr pos:start="731:17" pos:end="731:59"><call pos:start="731:17" pos:end="731:59"><name pos:start="731:17" pos:end="731:33">tcg_gen_ext32s_tl</name><argument_list pos:start="731:34" pos:end="731:59">(<argument pos:start="731:35" pos:end="731:45"><expr pos:start="731:35" pos:end="731:45"><name pos:start="731:35" pos:end="731:45"><name pos:start="731:35" pos:end="731:41">cpu_gpr</name><index pos:start="731:42" pos:end="731:45">[<expr pos:start="731:43" pos:end="731:44"><name pos:start="731:43" pos:end="731:44">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="731:48" pos:end="731:58"><expr pos:start="731:48" pos:end="731:58"><name pos:start="731:48" pos:end="731:58"><name pos:start="731:48" pos:end="731:54">cpu_gpr</name><index pos:start="731:55" pos:end="731:58">[<expr pos:start="731:56" pos:end="731:57"><name pos:start="731:56" pos:end="731:57">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="733:17" pos:end="736:0">break;</break>

<cpp:endif pos:start="735:1" pos:end="735:6">#<cpp:directive pos:start="735:2" pos:end="735:6">endif</cpp:directive></cpp:endif>

            <default pos:start="737:13" pos:end="737:20">default:</default>

                <expr_stmt pos:start="739:17" pos:end="739:49"><expr pos:start="739:17" pos:end="739:48"><call pos:start="739:17" pos:end="739:48"><name pos:start="739:17" pos:end="739:34">generate_exception</name><argument_list pos:start="739:35" pos:end="739:48">(<argument pos:start="739:36" pos:end="739:38"><expr pos:start="739:36" pos:end="739:38"><name pos:start="739:36" pos:end="739:38">ctx</name></expr></argument>, <argument pos:start="739:41" pos:end="739:47"><expr pos:start="739:41" pos:end="739:47"><name pos:start="739:41" pos:end="739:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="741:17" pos:end="741:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="745:13" pos:end="745:18">break;</break>

        <case pos:start="747:9" pos:end="747:21">case <expr pos:start="747:14" pos:end="747:20"><name pos:start="747:14" pos:end="747:20">RR_MFLO</name></expr>:</case>

            <expr_stmt pos:start="749:13" pos:end="749:43"><expr pos:start="749:13" pos:end="749:42"><call pos:start="749:13" pos:end="749:42"><name pos:start="749:13" pos:end="749:20">gen_HILO</name><argument_list pos:start="749:21" pos:end="749:42">(<argument pos:start="749:22" pos:end="749:24"><expr pos:start="749:22" pos:end="749:24"><name pos:start="749:22" pos:end="749:24">ctx</name></expr></argument>, <argument pos:start="749:27" pos:end="749:34"><expr pos:start="749:27" pos:end="749:34"><name pos:start="749:27" pos:end="749:34">OPC_MFLO</name></expr></argument>, <argument pos:start="749:37" pos:end="749:37"><expr pos:start="749:37" pos:end="749:37"><literal type="number" pos:start="749:37" pos:end="749:37">0</literal></expr></argument>, <argument pos:start="749:40" pos:end="749:41"><expr pos:start="749:40" pos:end="749:41"><name pos:start="749:40" pos:end="749:41">rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="751:13" pos:end="754:0">break;</break>

<cpp:if pos:start="753:1" pos:end="753:27">#<cpp:directive pos:start="753:2" pos:end="753:3">if</cpp:directive> <expr pos:start="753:5" pos:end="753:27"><call pos:start="753:5" pos:end="753:27"><name pos:start="753:5" pos:end="753:11">defined</name> <argument_list pos:start="753:13" pos:end="753:27">(<argument pos:start="753:14" pos:end="753:26"><expr pos:start="753:14" pos:end="753:26"><name pos:start="753:14" pos:end="753:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="755:9" pos:end="755:21">case <expr pos:start="755:14" pos:end="755:20"><name pos:start="755:14" pos:end="755:20">RR_DSRA</name></expr>:</case>

            <expr_stmt pos:start="757:13" pos:end="757:31"><expr pos:start="757:13" pos:end="757:30"><call pos:start="757:13" pos:end="757:30"><name pos:start="757:13" pos:end="757:25">check_mips_64</name><argument_list pos:start="757:26" pos:end="757:30">(<argument pos:start="757:27" pos:end="757:29"><expr pos:start="757:27" pos:end="757:29"><name pos:start="757:27" pos:end="757:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="759:13" pos:end="759:53"><expr pos:start="759:13" pos:end="759:52"><call pos:start="759:13" pos:end="759:52"><name pos:start="759:13" pos:end="759:25">gen_shift_imm</name><argument_list pos:start="759:26" pos:end="759:52">(<argument pos:start="759:27" pos:end="759:29"><expr pos:start="759:27" pos:end="759:29"><name pos:start="759:27" pos:end="759:29">ctx</name></expr></argument>, <argument pos:start="759:32" pos:end="759:39"><expr pos:start="759:32" pos:end="759:39"><name pos:start="759:32" pos:end="759:39">OPC_DSRA</name></expr></argument>, <argument pos:start="759:42" pos:end="759:43"><expr pos:start="759:42" pos:end="759:43"><name pos:start="759:42" pos:end="759:43">ry</name></expr></argument>, <argument pos:start="759:46" pos:end="759:47"><expr pos:start="759:46" pos:end="759:47"><name pos:start="759:46" pos:end="759:47">ry</name></expr></argument>, <argument pos:start="759:50" pos:end="759:51"><expr pos:start="759:50" pos:end="759:51"><name pos:start="759:50" pos:end="759:51">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="761:13" pos:end="761:18">break;</break>

        <case pos:start="763:9" pos:end="763:22">case <expr pos:start="763:14" pos:end="763:21"><name pos:start="763:14" pos:end="763:21">RR_DSLLV</name></expr>:</case>

            <expr_stmt pos:start="765:13" pos:end="765:31"><expr pos:start="765:13" pos:end="765:30"><call pos:start="765:13" pos:end="765:30"><name pos:start="765:13" pos:end="765:25">check_mips_64</name><argument_list pos:start="765:26" pos:end="765:30">(<argument pos:start="765:27" pos:end="765:29"><expr pos:start="765:27" pos:end="765:29"><name pos:start="765:27" pos:end="765:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="767:13" pos:end="767:50"><expr pos:start="767:13" pos:end="767:49"><call pos:start="767:13" pos:end="767:49"><name pos:start="767:13" pos:end="767:21">gen_shift</name><argument_list pos:start="767:22" pos:end="767:49">(<argument pos:start="767:23" pos:end="767:25"><expr pos:start="767:23" pos:end="767:25"><name pos:start="767:23" pos:end="767:25">ctx</name></expr></argument>, <argument pos:start="767:28" pos:end="767:36"><expr pos:start="767:28" pos:end="767:36"><name pos:start="767:28" pos:end="767:36">OPC_DSLLV</name></expr></argument>, <argument pos:start="767:39" pos:end="767:40"><expr pos:start="767:39" pos:end="767:40"><name pos:start="767:39" pos:end="767:40">ry</name></expr></argument>, <argument pos:start="767:43" pos:end="767:44"><expr pos:start="767:43" pos:end="767:44"><name pos:start="767:43" pos:end="767:44">rx</name></expr></argument>, <argument pos:start="767:47" pos:end="767:48"><expr pos:start="767:47" pos:end="767:48"><name pos:start="767:47" pos:end="767:48">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="769:13" pos:end="769:18">break;</break>

        <case pos:start="771:9" pos:end="771:22">case <expr pos:start="771:14" pos:end="771:21"><name pos:start="771:14" pos:end="771:21">RR_DSRLV</name></expr>:</case>

            <expr_stmt pos:start="773:13" pos:end="773:31"><expr pos:start="773:13" pos:end="773:30"><call pos:start="773:13" pos:end="773:30"><name pos:start="773:13" pos:end="773:25">check_mips_64</name><argument_list pos:start="773:26" pos:end="773:30">(<argument pos:start="773:27" pos:end="773:29"><expr pos:start="773:27" pos:end="773:29"><name pos:start="773:27" pos:end="773:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="775:13" pos:end="775:50"><expr pos:start="775:13" pos:end="775:49"><call pos:start="775:13" pos:end="775:49"><name pos:start="775:13" pos:end="775:21">gen_shift</name><argument_list pos:start="775:22" pos:end="775:49">(<argument pos:start="775:23" pos:end="775:25"><expr pos:start="775:23" pos:end="775:25"><name pos:start="775:23" pos:end="775:25">ctx</name></expr></argument>, <argument pos:start="775:28" pos:end="775:36"><expr pos:start="775:28" pos:end="775:36"><name pos:start="775:28" pos:end="775:36">OPC_DSRLV</name></expr></argument>, <argument pos:start="775:39" pos:end="775:40"><expr pos:start="775:39" pos:end="775:40"><name pos:start="775:39" pos:end="775:40">ry</name></expr></argument>, <argument pos:start="775:43" pos:end="775:44"><expr pos:start="775:43" pos:end="775:44"><name pos:start="775:43" pos:end="775:44">rx</name></expr></argument>, <argument pos:start="775:47" pos:end="775:48"><expr pos:start="775:47" pos:end="775:48"><name pos:start="775:47" pos:end="775:48">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="777:13" pos:end="777:18">break;</break>

        <case pos:start="779:9" pos:end="779:22">case <expr pos:start="779:14" pos:end="779:21"><name pos:start="779:14" pos:end="779:21">RR_DSRAV</name></expr>:</case>

            <expr_stmt pos:start="781:13" pos:end="781:31"><expr pos:start="781:13" pos:end="781:30"><call pos:start="781:13" pos:end="781:30"><name pos:start="781:13" pos:end="781:25">check_mips_64</name><argument_list pos:start="781:26" pos:end="781:30">(<argument pos:start="781:27" pos:end="781:29"><expr pos:start="781:27" pos:end="781:29"><name pos:start="781:27" pos:end="781:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="783:13" pos:end="783:50"><expr pos:start="783:13" pos:end="783:49"><call pos:start="783:13" pos:end="783:49"><name pos:start="783:13" pos:end="783:21">gen_shift</name><argument_list pos:start="783:22" pos:end="783:49">(<argument pos:start="783:23" pos:end="783:25"><expr pos:start="783:23" pos:end="783:25"><name pos:start="783:23" pos:end="783:25">ctx</name></expr></argument>, <argument pos:start="783:28" pos:end="783:36"><expr pos:start="783:28" pos:end="783:36"><name pos:start="783:28" pos:end="783:36">OPC_DSRAV</name></expr></argument>, <argument pos:start="783:39" pos:end="783:40"><expr pos:start="783:39" pos:end="783:40"><name pos:start="783:39" pos:end="783:40">ry</name></expr></argument>, <argument pos:start="783:43" pos:end="783:44"><expr pos:start="783:43" pos:end="783:44"><name pos:start="783:43" pos:end="783:44">rx</name></expr></argument>, <argument pos:start="783:47" pos:end="783:48"><expr pos:start="783:47" pos:end="783:48"><name pos:start="783:47" pos:end="783:48">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="785:13" pos:end="788:0">break;</break>

<cpp:endif pos:start="787:1" pos:end="787:6">#<cpp:directive pos:start="787:2" pos:end="787:6">endif</cpp:directive></cpp:endif>

        <case pos:start="789:9" pos:end="789:21">case <expr pos:start="789:14" pos:end="789:20"><name pos:start="789:14" pos:end="789:20">RR_MULT</name></expr>:</case>

            <expr_stmt pos:start="791:13" pos:end="791:49"><expr pos:start="791:13" pos:end="791:48"><call pos:start="791:13" pos:end="791:48"><name pos:start="791:13" pos:end="791:22">gen_muldiv</name><argument_list pos:start="791:23" pos:end="791:48">(<argument pos:start="791:24" pos:end="791:26"><expr pos:start="791:24" pos:end="791:26"><name pos:start="791:24" pos:end="791:26">ctx</name></expr></argument>, <argument pos:start="791:29" pos:end="791:36"><expr pos:start="791:29" pos:end="791:36"><name pos:start="791:29" pos:end="791:36">OPC_MULT</name></expr></argument>, <argument pos:start="791:39" pos:end="791:39"><expr pos:start="791:39" pos:end="791:39"><literal type="number" pos:start="791:39" pos:end="791:39">0</literal></expr></argument>, <argument pos:start="791:42" pos:end="791:43"><expr pos:start="791:42" pos:end="791:43"><name pos:start="791:42" pos:end="791:43">rx</name></expr></argument>, <argument pos:start="791:46" pos:end="791:47"><expr pos:start="791:46" pos:end="791:47"><name pos:start="791:46" pos:end="791:47">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="793:13" pos:end="793:18">break;</break>

        <case pos:start="795:9" pos:end="795:22">case <expr pos:start="795:14" pos:end="795:21"><name pos:start="795:14" pos:end="795:21">RR_MULTU</name></expr>:</case>

            <expr_stmt pos:start="797:13" pos:end="797:50"><expr pos:start="797:13" pos:end="797:49"><call pos:start="797:13" pos:end="797:49"><name pos:start="797:13" pos:end="797:22">gen_muldiv</name><argument_list pos:start="797:23" pos:end="797:49">(<argument pos:start="797:24" pos:end="797:26"><expr pos:start="797:24" pos:end="797:26"><name pos:start="797:24" pos:end="797:26">ctx</name></expr></argument>, <argument pos:start="797:29" pos:end="797:37"><expr pos:start="797:29" pos:end="797:37"><name pos:start="797:29" pos:end="797:37">OPC_MULTU</name></expr></argument>, <argument pos:start="797:40" pos:end="797:40"><expr pos:start="797:40" pos:end="797:40"><literal type="number" pos:start="797:40" pos:end="797:40">0</literal></expr></argument>, <argument pos:start="797:43" pos:end="797:44"><expr pos:start="797:43" pos:end="797:44"><name pos:start="797:43" pos:end="797:44">rx</name></expr></argument>, <argument pos:start="797:47" pos:end="797:48"><expr pos:start="797:47" pos:end="797:48"><name pos:start="797:47" pos:end="797:48">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="799:13" pos:end="799:18">break;</break>

        <case pos:start="801:9" pos:end="801:20">case <expr pos:start="801:14" pos:end="801:19"><name pos:start="801:14" pos:end="801:19">RR_DIV</name></expr>:</case>

            <expr_stmt pos:start="803:13" pos:end="803:48"><expr pos:start="803:13" pos:end="803:47"><call pos:start="803:13" pos:end="803:47"><name pos:start="803:13" pos:end="803:22">gen_muldiv</name><argument_list pos:start="803:23" pos:end="803:47">(<argument pos:start="803:24" pos:end="803:26"><expr pos:start="803:24" pos:end="803:26"><name pos:start="803:24" pos:end="803:26">ctx</name></expr></argument>, <argument pos:start="803:29" pos:end="803:35"><expr pos:start="803:29" pos:end="803:35"><name pos:start="803:29" pos:end="803:35">OPC_DIV</name></expr></argument>, <argument pos:start="803:38" pos:end="803:38"><expr pos:start="803:38" pos:end="803:38"><literal type="number" pos:start="803:38" pos:end="803:38">0</literal></expr></argument>, <argument pos:start="803:41" pos:end="803:42"><expr pos:start="803:41" pos:end="803:42"><name pos:start="803:41" pos:end="803:42">rx</name></expr></argument>, <argument pos:start="803:45" pos:end="803:46"><expr pos:start="803:45" pos:end="803:46"><name pos:start="803:45" pos:end="803:46">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="805:13" pos:end="805:18">break;</break>

        <case pos:start="807:9" pos:end="807:21">case <expr pos:start="807:14" pos:end="807:20"><name pos:start="807:14" pos:end="807:20">RR_DIVU</name></expr>:</case>

            <expr_stmt pos:start="809:13" pos:end="809:49"><expr pos:start="809:13" pos:end="809:48"><call pos:start="809:13" pos:end="809:48"><name pos:start="809:13" pos:end="809:22">gen_muldiv</name><argument_list pos:start="809:23" pos:end="809:48">(<argument pos:start="809:24" pos:end="809:26"><expr pos:start="809:24" pos:end="809:26"><name pos:start="809:24" pos:end="809:26">ctx</name></expr></argument>, <argument pos:start="809:29" pos:end="809:36"><expr pos:start="809:29" pos:end="809:36"><name pos:start="809:29" pos:end="809:36">OPC_DIVU</name></expr></argument>, <argument pos:start="809:39" pos:end="809:39"><expr pos:start="809:39" pos:end="809:39"><literal type="number" pos:start="809:39" pos:end="809:39">0</literal></expr></argument>, <argument pos:start="809:42" pos:end="809:43"><expr pos:start="809:42" pos:end="809:43"><name pos:start="809:42" pos:end="809:43">rx</name></expr></argument>, <argument pos:start="809:46" pos:end="809:47"><expr pos:start="809:46" pos:end="809:47"><name pos:start="809:46" pos:end="809:47">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="811:13" pos:end="814:0">break;</break>

<cpp:if pos:start="813:1" pos:end="813:27">#<cpp:directive pos:start="813:2" pos:end="813:3">if</cpp:directive> <expr pos:start="813:5" pos:end="813:27"><call pos:start="813:5" pos:end="813:27"><name pos:start="813:5" pos:end="813:11">defined</name> <argument_list pos:start="813:13" pos:end="813:27">(<argument pos:start="813:14" pos:end="813:26"><expr pos:start="813:14" pos:end="813:26"><name pos:start="813:14" pos:end="813:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="815:9" pos:end="815:22">case <expr pos:start="815:14" pos:end="815:21"><name pos:start="815:14" pos:end="815:21">RR_DMULT</name></expr>:</case>

            <expr_stmt pos:start="817:13" pos:end="817:31"><expr pos:start="817:13" pos:end="817:30"><call pos:start="817:13" pos:end="817:30"><name pos:start="817:13" pos:end="817:25">check_mips_64</name><argument_list pos:start="817:26" pos:end="817:30">(<argument pos:start="817:27" pos:end="817:29"><expr pos:start="817:27" pos:end="817:29"><name pos:start="817:27" pos:end="817:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="819:13" pos:end="819:50"><expr pos:start="819:13" pos:end="819:49"><call pos:start="819:13" pos:end="819:49"><name pos:start="819:13" pos:end="819:22">gen_muldiv</name><argument_list pos:start="819:23" pos:end="819:49">(<argument pos:start="819:24" pos:end="819:26"><expr pos:start="819:24" pos:end="819:26"><name pos:start="819:24" pos:end="819:26">ctx</name></expr></argument>, <argument pos:start="819:29" pos:end="819:37"><expr pos:start="819:29" pos:end="819:37"><name pos:start="819:29" pos:end="819:37">OPC_DMULT</name></expr></argument>, <argument pos:start="819:40" pos:end="819:40"><expr pos:start="819:40" pos:end="819:40"><literal type="number" pos:start="819:40" pos:end="819:40">0</literal></expr></argument>, <argument pos:start="819:43" pos:end="819:44"><expr pos:start="819:43" pos:end="819:44"><name pos:start="819:43" pos:end="819:44">rx</name></expr></argument>, <argument pos:start="819:47" pos:end="819:48"><expr pos:start="819:47" pos:end="819:48"><name pos:start="819:47" pos:end="819:48">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="821:13" pos:end="821:18">break;</break>

        <case pos:start="823:9" pos:end="823:23">case <expr pos:start="823:14" pos:end="823:22"><name pos:start="823:14" pos:end="823:22">RR_DMULTU</name></expr>:</case>

            <expr_stmt pos:start="825:13" pos:end="825:31"><expr pos:start="825:13" pos:end="825:30"><call pos:start="825:13" pos:end="825:30"><name pos:start="825:13" pos:end="825:25">check_mips_64</name><argument_list pos:start="825:26" pos:end="825:30">(<argument pos:start="825:27" pos:end="825:29"><expr pos:start="825:27" pos:end="825:29"><name pos:start="825:27" pos:end="825:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="827:13" pos:end="827:51"><expr pos:start="827:13" pos:end="827:50"><call pos:start="827:13" pos:end="827:50"><name pos:start="827:13" pos:end="827:22">gen_muldiv</name><argument_list pos:start="827:23" pos:end="827:50">(<argument pos:start="827:24" pos:end="827:26"><expr pos:start="827:24" pos:end="827:26"><name pos:start="827:24" pos:end="827:26">ctx</name></expr></argument>, <argument pos:start="827:29" pos:end="827:38"><expr pos:start="827:29" pos:end="827:38"><name pos:start="827:29" pos:end="827:38">OPC_DMULTU</name></expr></argument>, <argument pos:start="827:41" pos:end="827:41"><expr pos:start="827:41" pos:end="827:41"><literal type="number" pos:start="827:41" pos:end="827:41">0</literal></expr></argument>, <argument pos:start="827:44" pos:end="827:45"><expr pos:start="827:44" pos:end="827:45"><name pos:start="827:44" pos:end="827:45">rx</name></expr></argument>, <argument pos:start="827:48" pos:end="827:49"><expr pos:start="827:48" pos:end="827:49"><name pos:start="827:48" pos:end="827:49">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="829:13" pos:end="829:18">break;</break>

        <case pos:start="831:9" pos:end="831:21">case <expr pos:start="831:14" pos:end="831:20"><name pos:start="831:14" pos:end="831:20">RR_DDIV</name></expr>:</case>

            <expr_stmt pos:start="833:13" pos:end="833:31"><expr pos:start="833:13" pos:end="833:30"><call pos:start="833:13" pos:end="833:30"><name pos:start="833:13" pos:end="833:25">check_mips_64</name><argument_list pos:start="833:26" pos:end="833:30">(<argument pos:start="833:27" pos:end="833:29"><expr pos:start="833:27" pos:end="833:29"><name pos:start="833:27" pos:end="833:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="835:13" pos:end="835:49"><expr pos:start="835:13" pos:end="835:48"><call pos:start="835:13" pos:end="835:48"><name pos:start="835:13" pos:end="835:22">gen_muldiv</name><argument_list pos:start="835:23" pos:end="835:48">(<argument pos:start="835:24" pos:end="835:26"><expr pos:start="835:24" pos:end="835:26"><name pos:start="835:24" pos:end="835:26">ctx</name></expr></argument>, <argument pos:start="835:29" pos:end="835:36"><expr pos:start="835:29" pos:end="835:36"><name pos:start="835:29" pos:end="835:36">OPC_DDIV</name></expr></argument>, <argument pos:start="835:39" pos:end="835:39"><expr pos:start="835:39" pos:end="835:39"><literal type="number" pos:start="835:39" pos:end="835:39">0</literal></expr></argument>, <argument pos:start="835:42" pos:end="835:43"><expr pos:start="835:42" pos:end="835:43"><name pos:start="835:42" pos:end="835:43">rx</name></expr></argument>, <argument pos:start="835:46" pos:end="835:47"><expr pos:start="835:46" pos:end="835:47"><name pos:start="835:46" pos:end="835:47">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="837:13" pos:end="837:18">break;</break>

        <case pos:start="839:9" pos:end="839:22">case <expr pos:start="839:14" pos:end="839:21"><name pos:start="839:14" pos:end="839:21">RR_DDIVU</name></expr>:</case>

            <expr_stmt pos:start="841:13" pos:end="841:31"><expr pos:start="841:13" pos:end="841:30"><call pos:start="841:13" pos:end="841:30"><name pos:start="841:13" pos:end="841:25">check_mips_64</name><argument_list pos:start="841:26" pos:end="841:30">(<argument pos:start="841:27" pos:end="841:29"><expr pos:start="841:27" pos:end="841:29"><name pos:start="841:27" pos:end="841:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="843:13" pos:end="843:50"><expr pos:start="843:13" pos:end="843:49"><call pos:start="843:13" pos:end="843:49"><name pos:start="843:13" pos:end="843:22">gen_muldiv</name><argument_list pos:start="843:23" pos:end="843:49">(<argument pos:start="843:24" pos:end="843:26"><expr pos:start="843:24" pos:end="843:26"><name pos:start="843:24" pos:end="843:26">ctx</name></expr></argument>, <argument pos:start="843:29" pos:end="843:37"><expr pos:start="843:29" pos:end="843:37"><name pos:start="843:29" pos:end="843:37">OPC_DDIVU</name></expr></argument>, <argument pos:start="843:40" pos:end="843:40"><expr pos:start="843:40" pos:end="843:40"><literal type="number" pos:start="843:40" pos:end="843:40">0</literal></expr></argument>, <argument pos:start="843:43" pos:end="843:44"><expr pos:start="843:43" pos:end="843:44"><name pos:start="843:43" pos:end="843:44">rx</name></expr></argument>, <argument pos:start="843:47" pos:end="843:48"><expr pos:start="843:47" pos:end="843:48"><name pos:start="843:47" pos:end="843:48">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="845:13" pos:end="848:0">break;</break>

<cpp:endif pos:start="847:1" pos:end="847:6">#<cpp:directive pos:start="847:2" pos:end="847:6">endif</cpp:directive></cpp:endif>

        <default pos:start="849:9" pos:end="849:16">default:</default>

            <expr_stmt pos:start="851:13" pos:end="851:45"><expr pos:start="851:13" pos:end="851:44"><call pos:start="851:13" pos:end="851:44"><name pos:start="851:13" pos:end="851:30">generate_exception</name><argument_list pos:start="851:31" pos:end="851:44">(<argument pos:start="851:32" pos:end="851:34"><expr pos:start="851:32" pos:end="851:34"><name pos:start="851:32" pos:end="851:34">ctx</name></expr></argument>, <argument pos:start="851:37" pos:end="851:43"><expr pos:start="851:37" pos:end="851:43"><name pos:start="851:37" pos:end="851:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="853:13" pos:end="853:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="857:9" pos:end="857:14">break;</break>

    <case pos:start="859:5" pos:end="859:24">case <expr pos:start="859:10" pos:end="859:23"><name pos:start="859:10" pos:end="859:23">M16_OPC_EXTEND</name></expr>:</case>

        <expr_stmt pos:start="861:9" pos:end="861:56"><expr pos:start="861:9" pos:end="861:55"><call pos:start="861:9" pos:end="861:55"><name pos:start="861:9" pos:end="861:34">decode_extended_mips16_opc</name><argument_list pos:start="861:35" pos:end="861:55">(<argument pos:start="861:36" pos:end="861:38"><expr pos:start="861:36" pos:end="861:38"><name pos:start="861:36" pos:end="861:38">env</name></expr></argument>, <argument pos:start="861:41" pos:end="861:43"><expr pos:start="861:41" pos:end="861:43"><name pos:start="861:41" pos:end="861:43">ctx</name></expr></argument>, <argument pos:start="861:46" pos:end="861:54"><expr pos:start="861:46" pos:end="861:54"><name pos:start="861:46" pos:end="861:54">is_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="863:9" pos:end="863:20"><expr pos:start="863:9" pos:end="863:19"><name pos:start="863:9" pos:end="863:15">n_bytes</name> <operator pos:start="863:17" pos:end="863:17">=</operator> <literal type="number" pos:start="863:19" pos:end="863:19">4</literal></expr>;</expr_stmt>

        <break pos:start="865:9" pos:end="868:0">break;</break>

<cpp:if pos:start="867:1" pos:end="867:26">#<cpp:directive pos:start="867:2" pos:end="867:3">if</cpp:directive> <expr pos:start="867:5" pos:end="867:26"><call pos:start="867:5" pos:end="867:26"><name pos:start="867:5" pos:end="867:11">defined</name><argument_list pos:start="867:12" pos:end="867:26">(<argument pos:start="867:13" pos:end="867:25"><expr pos:start="867:13" pos:end="867:25"><name pos:start="867:13" pos:end="867:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="869:5" pos:end="869:21">case <expr pos:start="869:10" pos:end="869:20"><name pos:start="869:10" pos:end="869:20">M16_OPC_I64</name></expr>:</case>

        <expr_stmt pos:start="871:9" pos:end="871:41"><expr pos:start="871:9" pos:end="871:40"><name pos:start="871:9" pos:end="871:13">funct</name> <operator pos:start="871:15" pos:end="871:15">=</operator> <operator pos:start="871:17" pos:end="871:17">(</operator><name pos:start="871:18" pos:end="871:28"><name pos:start="871:18" pos:end="871:20">ctx</name><operator pos:start="871:21" pos:end="871:22">-&gt;</operator><name pos:start="871:23" pos:end="871:28">opcode</name></name> <operator pos:start="871:30" pos:end="871:31">&gt;&gt;</operator> <literal type="number" pos:start="871:33" pos:end="871:33">8</literal><operator pos:start="871:34" pos:end="871:34">)</operator> <operator pos:start="871:36" pos:end="871:36">&amp;</operator> <literal type="number" pos:start="871:38" pos:end="871:40">0x7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="873:9" pos:end="873:53"><expr pos:start="873:9" pos:end="873:52"><call pos:start="873:9" pos:end="873:52"><name pos:start="873:9" pos:end="873:25">decode_i64_mips16</name><argument_list pos:start="873:26" pos:end="873:52">(<argument pos:start="873:27" pos:end="873:29"><expr pos:start="873:27" pos:end="873:29"><name pos:start="873:27" pos:end="873:29">ctx</name></expr></argument>, <argument pos:start="873:32" pos:end="873:33"><expr pos:start="873:32" pos:end="873:33"><name pos:start="873:32" pos:end="873:33">ry</name></expr></argument>, <argument pos:start="873:36" pos:end="873:40"><expr pos:start="873:36" pos:end="873:40"><name pos:start="873:36" pos:end="873:40">funct</name></expr></argument>, <argument pos:start="873:43" pos:end="873:48"><expr pos:start="873:43" pos:end="873:48"><name pos:start="873:43" pos:end="873:48">offset</name></expr></argument>, <argument pos:start="873:51" pos:end="873:51"><expr pos:start="873:51" pos:end="873:51"><literal type="number" pos:start="873:51" pos:end="873:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="875:9" pos:end="878:0">break;</break>

<cpp:endif pos:start="877:1" pos:end="877:6">#<cpp:directive pos:start="877:2" pos:end="877:6">endif</cpp:directive></cpp:endif>

    <default pos:start="879:5" pos:end="879:12">default:</default>

        <expr_stmt pos:start="881:9" pos:end="881:41"><expr pos:start="881:9" pos:end="881:40"><call pos:start="881:9" pos:end="881:40"><name pos:start="881:9" pos:end="881:26">generate_exception</name><argument_list pos:start="881:27" pos:end="881:40">(<argument pos:start="881:28" pos:end="881:30"><expr pos:start="881:28" pos:end="881:30"><name pos:start="881:28" pos:end="881:30">ctx</name></expr></argument>, <argument pos:start="881:33" pos:end="881:39"><expr pos:start="881:33" pos:end="881:39"><name pos:start="881:33" pos:end="881:39">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="883:9" pos:end="883:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="889:5" pos:end="889:19">return <expr pos:start="889:12" pos:end="889:18"><name pos:start="889:12" pos:end="889:18">n_bytes</name></expr>;</return>

</block_content>}</block></function>
</unit>
