<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10967.c" pos:tabs="8"><function pos:start="1:1" pos:end="86:91"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_packet</name><parameter_list pos:start="1:25" pos:end="2:41">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">data</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:78"><decl pos:start="1:61" pos:end="1:78"><type pos:start="1:61" pos:end="1:78"><name pos:start="1:61" pos:end="1:63">int</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:78">got_frame_ptr</name></decl></parameter>,
                         <parameter pos:start="2:26" pos:end="2:40"><decl pos:start="2:26" pos:end="2:40"><type pos:start="2:26" pos:end="2:40"><name pos:start="2:26" pos:end="2:33">AVPacket</name><modifier pos:start="2:34" pos:end="2:34">*</modifier></type> <name pos:start="2:36" pos:end="2:40">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="86:91">{<block_content pos:start="4:5" pos:end="86:91">
    <decl_stmt pos:start="4:5" pos:end="4:41"><decl pos:start="4:5" pos:end="4:40"><type pos:start="4:5" pos:end="4:20"><name pos:start="4:5" pos:end="4:18">WmallDecodeCtx</name> <modifier pos:start="4:20" pos:end="4:20">*</modifier></type><name pos:start="4:21" pos:end="4:21">s</name> <init pos:start="4:23" pos:end="4:40">= <expr pos:start="4:25" pos:end="4:40"><name pos:start="4:25" pos:end="4:40"><name pos:start="4:25" pos:end="4:29">avctx</name><operator pos:start="4:30" pos:end="4:31">-&gt;</operator><name pos:start="4:32" pos:end="4:40">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:17">GetBitContext</name><modifier pos:start="5:18" pos:end="5:18">*</modifier></type> <name pos:start="5:20" pos:end="5:21">gb</name>  <init pos:start="5:24" pos:end="5:32">= <expr pos:start="5:26" pos:end="5:32"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:27">s</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:32">pgb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:37"><decl pos:start="6:5" pos:end="6:36"><type pos:start="6:5" pos:end="6:18"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:17">uint8_t</name><modifier pos:start="6:18" pos:end="6:18">*</modifier></type> <name pos:start="6:20" pos:end="6:22">buf</name> <init pos:start="6:24" pos:end="6:36">= <expr pos:start="6:26" pos:end="6:36"><name pos:start="6:26" pos:end="6:36"><name pos:start="6:26" pos:end="6:30">avpkt</name><operator pos:start="6:31" pos:end="6:32">-&gt;</operator><name pos:start="6:33" pos:end="6:36">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name>       <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:68"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:27">num_bits_prev_frame</name></decl>, <decl pos:start="8:30" pos:end="8:51"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:30" pos:end="8:51">packet_sequence_number</name></decl>, <decl pos:start="8:54" pos:end="8:67"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:54" pos:end="8:67">spliced_packet</name></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:29"><expr pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:5">s</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:12">frame</name><operator pos:start="9:13" pos:end="9:14">-&gt;</operator><name pos:start="9:15" pos:end="9:24">nb_samples</name></name> <operator pos:start="9:26" pos:end="9:26">=</operator> <literal type="number" pos:start="9:28" pos:end="9:28">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="10:5" pos:end="86:91"><if pos:start="10:5" pos:end="14:5">if <condition pos:start="10:8" pos:end="10:64">(<expr pos:start="10:9" pos:end="10:63"><operator pos:start="10:9" pos:end="10:9">!</operator><name pos:start="10:10" pos:end="10:17">buf_size</name> <operator pos:start="10:19" pos:end="10:20">&amp;&amp;</operator> <name pos:start="10:22" pos:end="10:38"><name pos:start="10:22" pos:end="10:22">s</name><operator pos:start="10:23" pos:end="10:24">-&gt;</operator><name pos:start="10:25" pos:end="10:38">num_saved_bits</name></name> <operator pos:start="10:40" pos:end="10:40">&gt;</operator> <call pos:start="10:42" pos:end="10:63"><name pos:start="10:42" pos:end="10:55">get_bits_count</name><argument_list pos:start="10:56" pos:end="10:63">(<argument pos:start="10:57" pos:end="10:62"><expr pos:start="10:57" pos:end="10:62"><operator pos:start="10:57" pos:end="10:57">&amp;</operator><name pos:start="10:58" pos:end="10:62"><name pos:start="10:58" pos:end="10:58">s</name><operator pos:start="10:59" pos:end="10:60">-&gt;</operator><name pos:start="10:61" pos:end="10:62">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="10:66" pos:end="14:5">{<block_content pos:start="11:9" pos:end="13:34">
        <expr_stmt pos:start="11:9" pos:end="11:27"><expr pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:22">packet_done</name></name> <operator pos:start="11:24" pos:end="11:24">=</operator> <literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="12:9" pos:end="13:34"><if pos:start="12:9" pos:end="13:34">if <condition pos:start="12:12" pos:end="12:29">(<expr pos:start="12:13" pos:end="12:28"><operator pos:start="12:13" pos:end="12:13">!</operator><call pos:start="12:14" pos:end="12:28"><name pos:start="12:14" pos:end="12:25">decode_frame</name><argument_list pos:start="12:26" pos:end="12:28">(<argument pos:start="12:27" pos:end="12:27"><expr pos:start="12:27" pos:end="12:27"><name pos:start="12:27" pos:end="12:27">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="13:13" pos:end="13:34"><block_content pos:start="13:13" pos:end="13:34">
            <expr_stmt pos:start="13:13" pos:end="13:34"><expr pos:start="13:13" pos:end="13:33"><name pos:start="13:13" pos:end="13:29"><name pos:start="13:13" pos:end="13:13">s</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:29">num_saved_bits</name></name> <operator pos:start="13:31" pos:end="13:31">=</operator> <literal type="number" pos:start="13:33" pos:end="13:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="14:7" pos:end="86:91">else if <condition pos:start="14:15" pos:end="14:48">(<expr pos:start="14:16" pos:end="14:47"><name pos:start="14:16" pos:end="14:29"><name pos:start="14:16" pos:end="14:16">s</name><operator pos:start="14:17" pos:end="14:18">-&gt;</operator><name pos:start="14:19" pos:end="14:29">packet_done</name></name> <operator pos:start="14:31" pos:end="14:32">||</operator> <name pos:start="14:34" pos:end="14:47"><name pos:start="14:34" pos:end="14:34">s</name><operator pos:start="14:35" pos:end="14:36">-&gt;</operator><name pos:start="14:37" pos:end="14:47">packet_loss</name></name></expr>)</condition> <block pos:start="14:50" pos:end="86:91">{<block_content pos:start="15:9" pos:end="86:91">
        <expr_stmt pos:start="15:9" pos:end="15:27"><expr pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:22">packet_done</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="16:9" pos:end="17:21"><if pos:start="16:9" pos:end="17:21">if <condition pos:start="16:12" pos:end="16:22">(<expr pos:start="16:13" pos:end="16:21"><operator pos:start="16:13" pos:end="16:13">!</operator><name pos:start="16:14" pos:end="16:21">buf_size</name></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:21"><block_content pos:start="17:13" pos:end="17:21">
            <return pos:start="17:13" pos:end="17:21">return <expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="18:9" pos:end="18:78"><expr pos:start="18:9" pos:end="18:77"><name pos:start="18:9" pos:end="18:28"><name pos:start="18:9" pos:end="18:9">s</name><operator pos:start="18:10" pos:end="18:11">-&gt;</operator><name pos:start="18:12" pos:end="18:28">next_packet_start</name></name> <operator pos:start="18:30" pos:end="18:30">=</operator> <name pos:start="18:32" pos:end="18:39">buf_size</name> <operator pos:start="18:41" pos:end="18:41">-</operator> <call pos:start="18:43" pos:end="18:77"><name pos:start="18:43" pos:end="18:47">FFMIN</name><argument_list pos:start="18:48" pos:end="18:77">(<argument pos:start="18:49" pos:end="18:66"><expr pos:start="18:49" pos:end="18:66"><name pos:start="18:49" pos:end="18:66"><name pos:start="18:49" pos:end="18:53">avctx</name><operator pos:start="18:54" pos:end="18:55">-&gt;</operator><name pos:start="18:56" pos:end="18:66">block_align</name></name></expr></argument>, <argument pos:start="18:69" pos:end="18:76"><expr pos:start="18:69" pos:end="18:76"><name pos:start="18:69" pos:end="18:76">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="19:9" pos:end="19:67"><expr pos:start="19:9" pos:end="19:66"><name pos:start="19:9" pos:end="19:16">buf_size</name>             <operator pos:start="19:30" pos:end="19:30">=</operator> <call pos:start="19:32" pos:end="19:66"><name pos:start="19:32" pos:end="19:36">FFMIN</name><argument_list pos:start="19:37" pos:end="19:66">(<argument pos:start="19:38" pos:end="19:55"><expr pos:start="19:38" pos:end="19:55"><name pos:start="19:38" pos:end="19:55"><name pos:start="19:38" pos:end="19:42">avctx</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:55">block_align</name></name></expr></argument>, <argument pos:start="19:58" pos:end="19:65"><expr pos:start="19:58" pos:end="19:65"><name pos:start="19:58" pos:end="19:65">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="20:9" pos:end="20:45"><expr pos:start="20:9" pos:end="20:44"><name pos:start="20:9" pos:end="20:23"><name pos:start="20:9" pos:end="20:9">s</name><operator pos:start="20:10" pos:end="20:11">-&gt;</operator><name pos:start="20:12" pos:end="20:23">buf_bit_size</name></name>      <operator pos:start="20:30" pos:end="20:30">=</operator> <name pos:start="20:32" pos:end="20:39">buf_size</name> <operator pos:start="20:41" pos:end="20:42">&lt;&lt;</operator> <literal type="number" pos:start="20:44" pos:end="20:44">3</literal></expr>;</expr_stmt>
        <comment type="block" pos:start="21:9" pos:end="21:33">/* parse packet header */</comment>
        <expr_stmt pos:start="22:9" pos:end="22:48"><expr pos:start="22:9" pos:end="22:47"><call pos:start="22:9" pos:end="22:47"><name pos:start="22:9" pos:end="22:21">init_get_bits</name><argument_list pos:start="22:22" pos:end="22:47">(<argument pos:start="22:23" pos:end="22:24"><expr pos:start="22:23" pos:end="22:24"><name pos:start="22:23" pos:end="22:24">gb</name></expr></argument>, <argument pos:start="22:27" pos:end="22:29"><expr pos:start="22:27" pos:end="22:29"><name pos:start="22:27" pos:end="22:29">buf</name></expr></argument>, <argument pos:start="22:32" pos:end="22:46"><expr pos:start="22:32" pos:end="22:46"><name pos:start="22:32" pos:end="22:46"><name pos:start="22:32" pos:end="22:32">s</name><operator pos:start="22:33" pos:end="22:34">-&gt;</operator><name pos:start="22:35" pos:end="22:46">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:49"><expr pos:start="23:9" pos:end="23:48"><name pos:start="23:9" pos:end="23:30">packet_sequence_number</name> <operator pos:start="23:32" pos:end="23:32">=</operator> <call pos:start="23:34" pos:end="23:48"><name pos:start="23:34" pos:end="23:41">get_bits</name><argument_list pos:start="23:42" pos:end="23:48">(<argument pos:start="23:43" pos:end="23:44"><expr pos:start="23:43" pos:end="23:44"><name pos:start="23:43" pos:end="23:44">gb</name></expr></argument>, <argument pos:start="23:47" pos:end="23:47"><expr pos:start="23:47" pos:end="23:47"><literal type="number" pos:start="23:47" pos:end="23:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="24:9" pos:end="24:25"><expr pos:start="24:9" pos:end="24:24"><call pos:start="24:9" pos:end="24:24"><name pos:start="24:9" pos:end="24:17">skip_bits</name><argument_list pos:start="24:18" pos:end="24:24">(<argument pos:start="24:19" pos:end="24:20"><expr pos:start="24:19" pos:end="24:20"><name pos:start="24:19" pos:end="24:20">gb</name></expr></argument>, <argument pos:start="24:23" pos:end="24:23"><expr pos:start="24:23" pos:end="24:23"><literal type="number" pos:start="24:23" pos:end="24:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="24:29" pos:end="24:78">// Skip seekable_frame_in_packet, currently unused</comment>
        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:22">spliced_packet</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="25:38"><name pos:start="25:26" pos:end="25:34">get_bits1</name><argument_list pos:start="25:35" pos:end="25:38">(<argument pos:start="25:36" pos:end="25:37"><expr pos:start="25:36" pos:end="25:37"><name pos:start="25:36" pos:end="25:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="26:9" pos:end="27:63"><if pos:start="26:9" pos:end="27:63">if <condition pos:start="26:12" pos:end="26:27">(<expr pos:start="26:13" pos:end="26:26"><name pos:start="26:13" pos:end="26:26">spliced_packet</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:63"><block_content pos:start="27:13" pos:end="27:63">
            <expr_stmt pos:start="27:13" pos:end="27:63"><expr pos:start="27:13" pos:end="27:62"><call pos:start="27:13" pos:end="27:62"><name pos:start="27:13" pos:end="27:33">avpriv_request_sample</name><argument_list pos:start="27:34" pos:end="27:62">(<argument pos:start="27:35" pos:end="27:39"><expr pos:start="27:35" pos:end="27:39"><name pos:start="27:35" pos:end="27:39">avctx</name></expr></argument>, <argument pos:start="27:42" pos:end="27:61"><expr pos:start="27:42" pos:end="27:61"><literal type="string" pos:start="27:42" pos:end="27:61">"Bitstream splicing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block" pos:start="28:9" pos:end="28:76">/* get number of bits that need to be added to the previous frame */</comment>
        <expr_stmt pos:start="29:9" pos:end="29:63"><expr pos:start="29:9" pos:end="29:62"><name pos:start="29:9" pos:end="29:27">num_bits_prev_frame</name> <operator pos:start="29:29" pos:end="29:29">=</operator> <call pos:start="29:31" pos:end="29:62"><name pos:start="29:31" pos:end="29:38">get_bits</name><argument_list pos:start="29:39" pos:end="29:62">(<argument pos:start="29:40" pos:end="29:41"><expr pos:start="29:40" pos:end="29:41"><name pos:start="29:40" pos:end="29:41">gb</name></expr></argument>, <argument pos:start="29:44" pos:end="29:61"><expr pos:start="29:44" pos:end="29:61"><name pos:start="29:44" pos:end="29:61"><name pos:start="29:44" pos:end="29:44">s</name><operator pos:start="29:45" pos:end="29:46">-&gt;</operator><name pos:start="29:47" pos:end="29:61">log2_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="30:9" pos:end="30:35">/* check for packet loss */</comment>
        <if_stmt pos:start="31:9" pos:end="86:91"><if pos:start="31:9" pos:end="86:91">if <condition pos:start="31:12" pos:end="32:78">(<expr pos:start="31:13" pos:end="32:77"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:27"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:27">packet_loss</name></name> <operator pos:start="31:29" pos:end="31:30">&amp;&amp;</operator>
            <operator pos:start="32:13" pos:end="32:13">(</operator><operator pos:start="32:14" pos:end="32:14">(</operator><name pos:start="32:15" pos:end="32:39"><name pos:start="32:15" pos:end="32:15">s</name><operator pos:start="32:16" pos:end="32:17">-&gt;</operator><name pos:start="32:18" pos:end="32:39">packet_sequence_number</name></name> <operator pos:start="32:41" pos:end="32:41">+</operator> <literal type="number" pos:start="32:43" pos:end="32:43">1</literal><operator pos:start="32:44" pos:end="32:44">)</operator> <operator pos:start="32:46" pos:end="32:46">&amp;</operator> <literal type="number" pos:start="32:48" pos:end="32:50">0xF</literal><operator pos:start="32:51" pos:end="32:51">)</operator> <operator pos:start="32:53" pos:end="32:54">!=</operator> <name pos:start="32:56" pos:end="32:77">packet_sequence_number</name></expr>)</condition> <block pos:start="32:80" pos:end="86:91">{<block_content pos:start="33:13" pos:end="86:91">
            <expr_stmt pos:start="33:13" pos:end="35:70"><expr pos:start="33:13" pos:end="35:69"><call pos:start="33:13" pos:end="35:69"><name pos:start="33:13" pos:end="33:18">av_log</name><argument_list pos:start="33:19" pos:end="35:69">(<argument pos:start="33:20" pos:end="33:24"><expr pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:24">avctx</name></expr></argument>, <argument pos:start="33:27" pos:end="33:38"><expr pos:start="33:27" pos:end="33:38"><name pos:start="33:27" pos:end="33:38">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="34:20" pos:end="34:63"><expr pos:start="34:20" pos:end="34:63"><literal type="string" pos:start="34:20" pos:end="34:48">"Packet loss detected! seq %"</literal><name pos:start="34:49" pos:end="34:53">PRIx8</name><literal type="string" pos:start="34:54" pos:end="34:63">" vs %x\n"</literal></expr></argument>,
                   <argument pos:start="35:20" pos:end="35:44"><expr pos:start="35:20" pos:end="35:44"><name pos:start="35:20" pos:end="35:44"><name pos:start="35:20" pos:end="35:20">s</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:44">packet_sequence_number</name></name></expr></argument>, <argument pos:start="35:47" pos:end="35:68"><expr pos:start="35:47" pos:end="35:68"><name pos:start="35:47" pos:end="35:68">packet_sequence_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="36:59"><expr pos:start="36:9" pos:end="36:58"><name pos:start="36:9" pos:end="36:33"><name pos:start="36:9" pos:end="36:9">s</name><operator pos:start="36:10" pos:end="36:11">-&gt;</operator><name pos:start="36:12" pos:end="36:33">packet_sequence_number</name></name> <operator pos:start="36:35" pos:end="36:35">=</operator> <name pos:start="36:37" pos:end="36:58">packet_sequence_number</name></expr>;</expr_stmt>
        <if_stmt pos:start="37:9" pos:end="86:91"><if pos:start="37:9" pos:end="86:91">if <condition pos:start="37:12" pos:end="37:36">(<expr pos:start="37:13" pos:end="37:35"><name pos:start="37:13" pos:end="37:31">num_bits_prev_frame</name> <operator pos:start="37:33" pos:end="37:33">&gt;</operator> <literal type="number" pos:start="37:35" pos:end="37:35">0</literal></expr>)</condition> <block pos:start="37:38" pos:end="86:91">{<block_content pos:start="38:13" pos:end="86:91">
            <decl_stmt pos:start="38:13" pos:end="38:77"><decl pos:start="38:13" pos:end="38:76"><type pos:start="38:13" pos:end="38:15"><name pos:start="38:13" pos:end="38:15">int</name></type> <name pos:start="38:17" pos:end="38:37">remaining_packet_bits</name> <init pos:start="38:39" pos:end="38:76">= <expr pos:start="38:41" pos:end="38:76"><name pos:start="38:41" pos:end="38:55"><name pos:start="38:41" pos:end="38:41">s</name><operator pos:start="38:42" pos:end="38:43">-&gt;</operator><name pos:start="38:44" pos:end="38:55">buf_bit_size</name></name> <operator pos:start="38:57" pos:end="38:57">-</operator> <call pos:start="38:59" pos:end="38:76"><name pos:start="38:59" pos:end="38:72">get_bits_count</name><argument_list pos:start="38:73" pos:end="38:76">(<argument pos:start="38:74" pos:end="38:75"><expr pos:start="38:74" pos:end="38:75"><name pos:start="38:74" pos:end="38:75">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="39:13" pos:end="86:91"><if pos:start="39:13" pos:end="48:9">if <condition pos:start="39:16" pos:end="39:61">(<expr pos:start="39:17" pos:end="39:60"><name pos:start="39:17" pos:end="39:35">num_bits_prev_frame</name> <operator pos:start="39:37" pos:end="39:38">&gt;=</operator> <name pos:start="39:40" pos:end="39:60">remaining_packet_bits</name></expr>)</condition> <block pos:start="39:63" pos:end="48:9">{<block_content pos:start="40:17" pos:end="47:32">
                <expr_stmt pos:start="40:17" pos:end="40:60"><expr pos:start="40:17" pos:end="40:59"><name pos:start="40:17" pos:end="40:35">num_bits_prev_frame</name> <operator pos:start="40:37" pos:end="40:37">=</operator> <name pos:start="40:39" pos:end="40:59">remaining_packet_bits</name></expr>;</expr_stmt>
                <expr_stmt pos:start="41:17" pos:end="41:35"><expr pos:start="41:17" pos:end="41:34"><name pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:30">packet_done</name></name> <operator pos:start="41:32" pos:end="41:32">=</operator> <literal type="number" pos:start="41:34" pos:end="41:34">1</literal></expr>;</expr_stmt>
            <comment type="block" pos:start="42:13" pos:end="43:57">/* Append the previous frame data to the remaining data from the
             * previous packet to create a full frame. */</comment>
            <expr_stmt pos:start="44:13" pos:end="44:53"><expr pos:start="44:13" pos:end="44:52"><call pos:start="44:13" pos:end="44:52"><name pos:start="44:13" pos:end="44:21">save_bits</name><argument_list pos:start="44:22" pos:end="44:52">(<argument pos:start="44:23" pos:end="44:23"><expr pos:start="44:23" pos:end="44:23"><name pos:start="44:23" pos:end="44:23">s</name></expr></argument>, <argument pos:start="44:26" pos:end="44:27"><expr pos:start="44:26" pos:end="44:27"><name pos:start="44:26" pos:end="44:27">gb</name></expr></argument>, <argument pos:start="44:30" pos:end="44:48"><expr pos:start="44:30" pos:end="44:48"><name pos:start="44:30" pos:end="44:48">num_bits_prev_frame</name></expr></argument>, <argument pos:start="44:51" pos:end="44:51"><expr pos:start="44:51" pos:end="44:51"><literal type="number" pos:start="44:51" pos:end="44:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="45:13" pos:end="45:62">/* decode the cross packet frame if it is valid */</comment>
            <if_stmt pos:start="46:13" pos:end="47:32"><if pos:start="46:13" pos:end="47:32">if <condition pos:start="46:16" pos:end="46:79">(<expr pos:start="46:17" pos:end="46:78"><name pos:start="46:17" pos:end="46:35">num_bits_prev_frame</name> <operator pos:start="46:37" pos:end="46:37">&lt;</operator> <name pos:start="46:39" pos:end="46:59">remaining_packet_bits</name> <operator pos:start="46:61" pos:end="46:62">&amp;&amp;</operator> <operator pos:start="46:64" pos:end="46:64">!</operator><name pos:start="46:65" pos:end="46:78"><name pos:start="46:65" pos:end="46:65">s</name><operator pos:start="46:66" pos:end="46:67">-&gt;</operator><name pos:start="46:68" pos:end="46:78">packet_loss</name></name></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:32"><block_content pos:start="47:17" pos:end="47:32">
                <expr_stmt pos:start="47:17" pos:end="47:32"><expr pos:start="47:17" pos:end="47:31"><call pos:start="47:17" pos:end="47:31"><name pos:start="47:17" pos:end="47:28">decode_frame</name><argument_list pos:start="47:29" pos:end="47:31">(<argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><name pos:start="47:30" pos:end="47:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="48:11" pos:end="86:91">else if <condition pos:start="48:19" pos:end="48:55">(<expr pos:start="48:20" pos:end="48:54"><name pos:start="48:20" pos:end="48:36"><name pos:start="48:20" pos:end="48:20">s</name><operator pos:start="48:21" pos:end="48:22">-&gt;</operator><name pos:start="48:23" pos:end="48:36">num_saved_bits</name></name> <operator pos:start="48:38" pos:end="48:38">-</operator> <name pos:start="48:40" pos:end="48:54"><name pos:start="48:40" pos:end="48:40">s</name><operator pos:start="48:41" pos:end="48:42">-&gt;</operator><name pos:start="48:43" pos:end="48:54">frame_offset</name></name></expr>)</condition> <block pos:start="48:57" pos:end="86:91">{<block_content pos:start="49:13" pos:end="86:91">
            <expr_stmt pos:start="49:13" pos:end="50:57"><expr pos:start="49:13" pos:end="50:56"><call pos:start="49:13" pos:end="50:56"><name pos:start="49:13" pos:end="49:19">ff_dlog</name><argument_list pos:start="49:20" pos:end="50:56">(<argument pos:start="49:21" pos:end="49:25"><expr pos:start="49:21" pos:end="49:25"><name pos:start="49:21" pos:end="49:25">avctx</name></expr></argument>, <argument pos:start="49:28" pos:end="49:64"><expr pos:start="49:28" pos:end="49:64"><literal type="string" pos:start="49:28" pos:end="49:64">"ignoring %x previously saved bits\n"</literal></expr></argument>,
                    <argument pos:start="50:21" pos:end="50:55"><expr pos:start="50:21" pos:end="50:55"><name pos:start="50:21" pos:end="50:37"><name pos:start="50:21" pos:end="50:21">s</name><operator pos:start="50:22" pos:end="50:23">-&gt;</operator><name pos:start="50:24" pos:end="50:37">num_saved_bits</name></name> <operator pos:start="50:39" pos:end="50:39">-</operator> <name pos:start="50:41" pos:end="50:55"><name pos:start="50:41" pos:end="50:41">s</name><operator pos:start="50:42" pos:end="50:43">-&gt;</operator><name pos:start="50:44" pos:end="50:55">frame_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="51:9" pos:end="86:91"><if pos:start="51:9" pos:end="57:5">if <condition pos:start="51:12" pos:end="51:27">(<expr pos:start="51:13" pos:end="51:26"><name pos:start="51:13" pos:end="51:26"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:26">packet_loss</name></name></expr>)</condition> <block pos:start="51:29" pos:end="57:5">{<block_content pos:start="54:13" pos:end="56:68">
            <comment type="block" pos:start="52:13" pos:end="53:77">/* Reset number of saved bits so that the decoder does not start
             * to decode incomplete frames in the s-&gt;len_prefix == 0 case. */</comment>
            <expr_stmt pos:start="54:13" pos:end="54:34"><expr pos:start="54:13" pos:end="54:33"><name pos:start="54:13" pos:end="54:29"><name pos:start="54:13" pos:end="54:13">s</name><operator pos:start="54:14" pos:end="54:15">-&gt;</operator><name pos:start="54:16" pos:end="54:29">num_saved_bits</name></name> <operator pos:start="54:31" pos:end="54:31">=</operator> <literal type="number" pos:start="54:33" pos:end="54:33">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="55:13" pos:end="55:34"><expr pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:26">packet_loss</name></name>    <operator pos:start="55:31" pos:end="55:31">=</operator> <literal type="number" pos:start="55:33" pos:end="55:33">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="56:13" pos:end="56:68"><expr pos:start="56:13" pos:end="56:67"><call pos:start="56:13" pos:end="56:67"><name pos:start="56:13" pos:end="56:25">init_put_bits</name><argument_list pos:start="56:26" pos:end="56:67">(<argument pos:start="56:27" pos:end="56:32"><expr pos:start="56:27" pos:end="56:32"><operator pos:start="56:27" pos:end="56:27">&amp;</operator><name pos:start="56:28" pos:end="56:32"><name pos:start="56:28" pos:end="56:28">s</name><operator pos:start="56:29" pos:end="56:30">-&gt;</operator><name pos:start="56:31" pos:end="56:32">pb</name></name></expr></argument>, <argument pos:start="56:35" pos:end="56:47"><expr pos:start="56:35" pos:end="56:47"><name pos:start="56:35" pos:end="56:47"><name pos:start="56:35" pos:end="56:35">s</name><operator pos:start="56:36" pos:end="56:37">-&gt;</operator><name pos:start="56:38" pos:end="56:47">frame_data</name></name></expr></argument>, <argument pos:start="56:50" pos:end="56:66"><expr pos:start="56:50" pos:end="56:66"><name pos:start="56:50" pos:end="56:66"><name pos:start="56:50" pos:end="56:50">s</name><operator pos:start="56:51" pos:end="56:52">-&gt;</operator><name pos:start="56:53" pos:end="56:66">max_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="57:7" pos:end="86:91">else <block pos:start="57:12" pos:end="86:91">{<block_content pos:start="58:9" pos:end="86:91">
        <decl_stmt pos:start="58:9" pos:end="58:23"><decl pos:start="58:9" pos:end="58:22"><type pos:start="58:9" pos:end="58:11"><name pos:start="58:9" pos:end="58:11">int</name></type> <name pos:start="58:13" pos:end="58:22">frame_size</name></decl>;</decl_stmt>
        <expr_stmt pos:start="59:9" pos:end="59:68"><expr pos:start="59:9" pos:end="59:67"><name pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:23">buf_bit_size</name></name> <operator pos:start="59:25" pos:end="59:25">=</operator> <operator pos:start="59:27" pos:end="59:27">(</operator><name pos:start="59:28" pos:end="59:38"><name pos:start="59:28" pos:end="59:32">avpkt</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:38">size</name></name> <operator pos:start="59:40" pos:end="59:40">-</operator> <name pos:start="59:42" pos:end="59:61"><name pos:start="59:42" pos:end="59:42">s</name><operator pos:start="59:43" pos:end="59:44">-&gt;</operator><name pos:start="59:45" pos:end="59:61">next_packet_start</name></name><operator pos:start="59:62" pos:end="59:62">)</operator> <operator pos:start="59:64" pos:end="59:65">&lt;&lt;</operator> <literal type="number" pos:start="59:67" pos:end="59:67">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:56"><expr pos:start="60:9" pos:end="60:55"><call pos:start="60:9" pos:end="60:55"><name pos:start="60:9" pos:end="60:21">init_get_bits</name><argument_list pos:start="60:22" pos:end="60:55">(<argument pos:start="60:23" pos:end="60:24"><expr pos:start="60:23" pos:end="60:24"><name pos:start="60:23" pos:end="60:24">gb</name></expr></argument>, <argument pos:start="60:27" pos:end="60:37"><expr pos:start="60:27" pos:end="60:37"><name pos:start="60:27" pos:end="60:37"><name pos:start="60:27" pos:end="60:31">avpkt</name><operator pos:start="60:32" pos:end="60:33">-&gt;</operator><name pos:start="60:34" pos:end="60:37">data</name></name></expr></argument>, <argument pos:start="60:40" pos:end="60:54"><expr pos:start="60:40" pos:end="60:54"><name pos:start="60:40" pos:end="60:54"><name pos:start="60:40" pos:end="60:40">s</name><operator pos:start="60:41" pos:end="60:42">-&gt;</operator><name pos:start="60:43" pos:end="60:54">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="61:9" pos:end="61:40"><expr pos:start="61:9" pos:end="61:39"><call pos:start="61:9" pos:end="61:39"><name pos:start="61:9" pos:end="61:17">skip_bits</name><argument_list pos:start="61:18" pos:end="61:39">(<argument pos:start="61:19" pos:end="61:20"><expr pos:start="61:19" pos:end="61:20"><name pos:start="61:19" pos:end="61:20">gb</name></expr></argument>, <argument pos:start="61:23" pos:end="61:38"><expr pos:start="61:23" pos:end="61:38"><name pos:start="61:23" pos:end="61:38"><name pos:start="61:23" pos:end="61:23">s</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:38">packet_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="62:9" pos:end="86:91"><if pos:start="62:9" pos:end="67:9">if <condition pos:start="62:12" pos:end="64:48">(<expr pos:start="62:13" pos:end="64:47"><name pos:start="62:13" pos:end="62:25"><name pos:start="62:13" pos:end="62:13">s</name><operator pos:start="62:14" pos:end="62:15">-&gt;</operator><name pos:start="62:16" pos:end="62:25">len_prefix</name></name> <operator pos:start="62:27" pos:end="62:28">&amp;&amp;</operator> <call pos:start="62:30" pos:end="62:50"><name pos:start="62:30" pos:end="62:43">remaining_bits</name><argument_list pos:start="62:44" pos:end="62:50">(<argument pos:start="62:45" pos:end="62:45"><expr pos:start="62:45" pos:end="62:45"><name pos:start="62:45" pos:end="62:45">s</name></expr></argument>, <argument pos:start="62:48" pos:end="62:49"><expr pos:start="62:48" pos:end="62:49"><name pos:start="62:48" pos:end="62:49">gb</name></expr></argument>)</argument_list></call> <operator pos:start="62:52" pos:end="62:52">&gt;</operator> <name pos:start="62:54" pos:end="62:71"><name pos:start="62:54" pos:end="62:54">s</name><operator pos:start="62:55" pos:end="62:56">-&gt;</operator><name pos:start="62:57" pos:end="62:71">log2_frame_size</name></name> <operator pos:start="62:73" pos:end="62:74">&amp;&amp;</operator>
            <operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:23">frame_size</name> <operator pos:start="63:25" pos:end="63:25">=</operator> <call pos:start="63:27" pos:end="63:59"><name pos:start="63:27" pos:end="63:35">show_bits</name><argument_list pos:start="63:36" pos:end="63:59">(<argument pos:start="63:37" pos:end="63:38"><expr pos:start="63:37" pos:end="63:38"><name pos:start="63:37" pos:end="63:38">gb</name></expr></argument>, <argument pos:start="63:41" pos:end="63:58"><expr pos:start="63:41" pos:end="63:58"><name pos:start="63:41" pos:end="63:58"><name pos:start="63:41" pos:end="63:41">s</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:58">log2_frame_size</name></name></expr></argument>)</argument_list></call><operator pos:start="63:60" pos:end="63:60">)</operator> <operator pos:start="63:62" pos:end="63:63">&amp;&amp;</operator>
            <name pos:start="64:13" pos:end="64:22">frame_size</name> <operator pos:start="64:24" pos:end="64:25">&lt;=</operator> <call pos:start="64:27" pos:end="64:47"><name pos:start="64:27" pos:end="64:40">remaining_bits</name><argument_list pos:start="64:41" pos:end="64:47">(<argument pos:start="64:42" pos:end="64:42"><expr pos:start="64:42" pos:end="64:42"><name pos:start="64:42" pos:end="64:42">s</name></expr></argument>, <argument pos:start="64:45" pos:end="64:46"><expr pos:start="64:45" pos:end="64:46"><name pos:start="64:45" pos:end="64:46">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="64:50" pos:end="67:9">{<block_content pos:start="65:13" pos:end="66:46">
            <expr_stmt pos:start="65:13" pos:end="65:44"><expr pos:start="65:13" pos:end="65:43"><call pos:start="65:13" pos:end="65:43"><name pos:start="65:13" pos:end="65:21">save_bits</name><argument_list pos:start="65:22" pos:end="65:43">(<argument pos:start="65:23" pos:end="65:23"><expr pos:start="65:23" pos:end="65:23"><name pos:start="65:23" pos:end="65:23">s</name></expr></argument>, <argument pos:start="65:26" pos:end="65:27"><expr pos:start="65:26" pos:end="65:27"><name pos:start="65:26" pos:end="65:27">gb</name></expr></argument>, <argument pos:start="65:30" pos:end="65:39"><expr pos:start="65:30" pos:end="65:39"><name pos:start="65:30" pos:end="65:39">frame_size</name></expr></argument>, <argument pos:start="65:42" pos:end="65:42"><expr pos:start="65:42" pos:end="65:42"><literal type="number" pos:start="65:42" pos:end="65:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="66:13" pos:end="66:46"><expr pos:start="66:13" pos:end="66:45"><name pos:start="66:13" pos:end="66:26"><name pos:start="66:13" pos:end="66:13">s</name><operator pos:start="66:14" pos:end="66:15">-&gt;</operator><name pos:start="66:16" pos:end="66:26">packet_done</name></name> <operator pos:start="66:28" pos:end="66:28">=</operator> <operator pos:start="66:30" pos:end="66:30">!</operator><call pos:start="66:31" pos:end="66:45"><name pos:start="66:31" pos:end="66:42">decode_frame</name><argument_list pos:start="66:43" pos:end="66:45">(<argument pos:start="66:44" pos:end="66:44"><expr pos:start="66:44" pos:end="66:44"><name pos:start="66:44" pos:end="66:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="67:11" pos:end="76:9">else if <condition pos:start="67:19" pos:end="68:65">(<expr pos:start="67:20" pos:end="68:64"><operator pos:start="67:20" pos:end="67:20">!</operator><name pos:start="67:21" pos:end="67:33"><name pos:start="67:21" pos:end="67:21">s</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:33">len_prefix</name></name>
                   <operator pos:start="68:20" pos:end="68:21">&amp;&amp;</operator> <name pos:start="68:23" pos:end="68:39"><name pos:start="68:23" pos:end="68:23">s</name><operator pos:start="68:24" pos:end="68:25">-&gt;</operator><name pos:start="68:26" pos:end="68:39">num_saved_bits</name></name> <operator pos:start="68:41" pos:end="68:41">&gt;</operator> <call pos:start="68:43" pos:end="68:64"><name pos:start="68:43" pos:end="68:56">get_bits_count</name><argument_list pos:start="68:57" pos:end="68:64">(<argument pos:start="68:58" pos:end="68:63"><expr pos:start="68:58" pos:end="68:63"><operator pos:start="68:58" pos:end="68:58">&amp;</operator><name pos:start="68:59" pos:end="68:63"><name pos:start="68:59" pos:end="68:59">s</name><operator pos:start="68:60" pos:end="68:61">-&gt;</operator><name pos:start="68:62" pos:end="68:63">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="68:67" pos:end="76:9">{<block_content pos:start="75:13" pos:end="75:46">
            <comment type="block" pos:start="69:13" pos:end="74:43">/* when the frames do not have a length prefix, we don't know the
             * compressed length of the individual frames however, we know what
             * part of a new packet belongs to the previous frame therefore we
             * save the incoming packet first, then we append the "previous
             * frame" data from the next packet so that we get a buffer that
             * only contains full frames */</comment>
            <expr_stmt pos:start="75:13" pos:end="75:46"><expr pos:start="75:13" pos:end="75:45"><name pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:13">s</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:26">packet_done</name></name> <operator pos:start="75:28" pos:end="75:28">=</operator> <operator pos:start="75:30" pos:end="75:30">!</operator><call pos:start="75:31" pos:end="75:45"><name pos:start="75:31" pos:end="75:42">decode_frame</name><argument_list pos:start="75:43" pos:end="75:45">(<argument pos:start="75:44" pos:end="75:44"><expr pos:start="75:44" pos:end="75:44"><name pos:start="75:44" pos:end="75:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="76:11" pos:end="86:91">else <block pos:start="76:16" pos:end="86:91">{<block_content pos:start="77:13" pos:end="86:91">
            <expr_stmt pos:start="77:13" pos:end="77:31"><expr pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:26">packet_done</name></name> <operator pos:start="77:28" pos:end="77:28">=</operator> <literal type="number" pos:start="77:30" pos:end="77:30">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="78:5" pos:end="86:91"><if pos:start="78:5" pos:end="86:91">if <condition pos:start="78:8" pos:end="79:34">(<expr pos:start="78:9" pos:end="79:33"><name pos:start="78:9" pos:end="78:22"><name pos:start="78:9" pos:end="78:9">s</name><operator pos:start="78:10" pos:end="78:11">-&gt;</operator><name pos:start="78:12" pos:end="78:22">packet_done</name></name> <operator pos:start="78:24" pos:end="78:25">&amp;&amp;</operator> <operator pos:start="78:27" pos:end="78:27">!</operator><name pos:start="78:28" pos:end="78:41"><name pos:start="78:28" pos:end="78:28">s</name><operator pos:start="78:29" pos:end="78:30">-&gt;</operator><name pos:start="78:31" pos:end="78:41">packet_loss</name></name> <operator pos:start="78:43" pos:end="78:44">&amp;&amp;</operator>
        <call pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:22">remaining_bits</name><argument_list pos:start="79:23" pos:end="79:29">(<argument pos:start="79:24" pos:end="79:24"><expr pos:start="79:24" pos:end="79:24"><name pos:start="79:24" pos:end="79:24">s</name></expr></argument>, <argument pos:start="79:27" pos:end="79:28"><expr pos:start="79:27" pos:end="79:28"><name pos:start="79:27" pos:end="79:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="79:31" pos:end="79:31">&gt;</operator> <literal type="number" pos:start="79:33" pos:end="79:33">0</literal></expr>)</condition> <block pos:start="79:36" pos:end="86:91">{<block_content pos:start="82:9" pos:end="86:91">
        <comment type="block" pos:start="80:9" pos:end="81:34">/* save the rest of the data so that it can be decoded
         * with the next packet */</comment>
        <expr_stmt pos:start="82:9" pos:end="82:51"><expr pos:start="82:9" pos:end="82:50"><call pos:start="82:9" pos:end="82:50"><name pos:start="82:9" pos:end="82:17">save_bits</name><argument_list pos:start="82:18" pos:end="82:50">(<argument pos:start="82:19" pos:end="82:19"><expr pos:start="82:19" pos:end="82:19"><name pos:start="82:19" pos:end="82:19">s</name></expr></argument>, <argument pos:start="82:22" pos:end="82:23"><expr pos:start="82:22" pos:end="82:23"><name pos:start="82:22" pos:end="82:23">gb</name></expr></argument>, <argument pos:start="82:26" pos:end="82:46"><expr pos:start="82:26" pos:end="82:46"><call pos:start="82:26" pos:end="82:46"><name pos:start="82:26" pos:end="82:39">remaining_bits</name><argument_list pos:start="82:40" pos:end="82:46">(<argument pos:start="82:41" pos:end="82:41"><expr pos:start="82:41" pos:end="82:41"><name pos:start="82:41" pos:end="82:41">s</name></expr></argument>, <argument pos:start="82:44" pos:end="82:45"><expr pos:start="82:44" pos:end="82:45"><name pos:start="82:44" pos:end="82:45">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="82:49" pos:end="82:49"><expr pos:start="82:49" pos:end="82:49"><literal type="number" pos:start="82:49" pos:end="82:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="83:5" pos:end="83:48"><expr pos:start="83:5" pos:end="83:47"><operator pos:start="83:5" pos:end="83:5">*</operator><name pos:start="83:6" pos:end="83:18">got_frame_ptr</name>   <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:43"><name pos:start="83:24" pos:end="83:24">s</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:31">frame</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:43">nb_samples</name></name> <operator pos:start="83:45" pos:end="83:45">&gt;</operator> <literal type="number" pos:start="83:47" pos:end="83:47">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="84:5" pos:end="84:38"><expr pos:start="84:5" pos:end="84:37"><call pos:start="84:5" pos:end="84:37"><name pos:start="84:5" pos:end="84:21">av_frame_move_ref</name><argument_list pos:start="84:22" pos:end="84:37">(<argument pos:start="84:23" pos:end="84:26"><expr pos:start="84:23" pos:end="84:26"><name pos:start="84:23" pos:end="84:26">data</name></expr></argument>, <argument pos:start="84:29" pos:end="84:36"><expr pos:start="84:29" pos:end="84:36"><name pos:start="84:29" pos:end="84:36"><name pos:start="84:29" pos:end="84:29">s</name><operator pos:start="84:30" pos:end="84:31">-&gt;</operator><name pos:start="84:32" pos:end="84:36">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="85:5" pos:end="85:46"><expr pos:start="85:5" pos:end="85:45"><name pos:start="85:5" pos:end="85:20"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:20">packet_offset</name></name> <operator pos:start="85:22" pos:end="85:22">=</operator> <call pos:start="85:24" pos:end="85:41"><name pos:start="85:24" pos:end="85:37">get_bits_count</name><argument_list pos:start="85:38" pos:end="85:41">(<argument pos:start="85:39" pos:end="85:40"><expr pos:start="85:39" pos:end="85:40"><name pos:start="85:39" pos:end="85:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="85:43" pos:end="85:43">&amp;</operator> <literal type="number" pos:start="85:45" pos:end="85:45">7</literal></expr>;</expr_stmt>
    <return pos:start="86:5" pos:end="86:91">return <expr pos:start="86:12" pos:end="86:90"><ternary pos:start="86:12" pos:end="86:90"><condition pos:start="86:12" pos:end="86:29"><expr pos:start="86:12" pos:end="86:27"><operator pos:start="86:12" pos:end="86:12">(</operator><name pos:start="86:13" pos:end="86:26"><name pos:start="86:13" pos:end="86:13">s</name><operator pos:start="86:14" pos:end="86:15">-&gt;</operator><name pos:start="86:16" pos:end="86:26">packet_loss</name></name><operator pos:start="86:27" pos:end="86:27">)</operator></expr> ?</condition><then pos:start="86:31" pos:end="86:49"> <expr pos:start="86:31" pos:end="86:49"><name pos:start="86:31" pos:end="86:49">AVERROR_INVALIDDATA</name></expr> </then><else pos:start="86:51" pos:end="86:90">: <expr pos:start="86:53" pos:end="86:90"><ternary pos:start="86:53" pos:end="86:90"><condition pos:start="86:53" pos:end="86:62"><expr pos:start="86:53" pos:end="86:60"><name pos:start="86:53" pos:end="86:60">buf_size</name></expr> ?</condition><then pos:start="86:64" pos:end="86:86"> <expr pos:start="86:64" pos:end="86:86"><call pos:start="86:64" pos:end="86:81"><name pos:start="86:64" pos:end="86:77">get_bits_count</name><argument_list pos:start="86:78" pos:end="86:81">(<argument pos:start="86:79" pos:end="86:80"><expr pos:start="86:79" pos:end="86:80"><name pos:start="86:79" pos:end="86:80">gb</name></expr></argument>)</argument_list></call> <operator pos:start="86:83" pos:end="86:84">&gt;&gt;</operator> <literal type="number" pos:start="86:86" pos:end="86:86">3</literal></expr> </then><else pos:start="86:88" pos:end="86:90">: <expr pos:start="86:90" pos:end="86:90"><literal type="number" pos:start="86:90" pos:end="86:90">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
