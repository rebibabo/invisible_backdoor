<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12850.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:38">avpriv_dca_parse_core_frame_header</name><parameter_list pos:start="1:39" pos:end="1:80">(<parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:52">GetBitContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">gb</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:79"><decl pos:start="1:59" pos:end="1:79"><type pos:start="1:59" pos:end="1:79"><name pos:start="1:59" pos:end="1:76">DCACoreFrameHeader</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:79">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:13">

    <if_stmt pos:start="5:5" pos:end="7:41"><if pos:start="5:5" pos:end="7:41">if <condition pos:start="5:8" pos:end="5:54">(<expr pos:start="5:9" pos:end="5:53"><call pos:start="5:9" pos:end="5:29"><name pos:start="5:9" pos:end="5:21">get_bits_long</name><argument_list pos:start="5:22" pos:end="5:29">(<argument pos:start="5:23" pos:end="5:24"><expr pos:start="5:23" pos:end="5:24"><name pos:start="5:23" pos:end="5:24">gb</name></expr></argument>, <argument pos:start="5:27" pos:end="5:28"><expr pos:start="5:27" pos:end="5:28"><literal type="number" pos:start="5:27" pos:end="5:28">32</literal></expr></argument>)</argument_list></call> <operator pos:start="5:31" pos:end="5:32">!=</operator> <name pos:start="5:34" pos:end="5:53">DCA_SYNCWORD_CORE_BE</name></expr>)</condition><block type="pseudo" pos:start="7:9" pos:end="7:41"><block_content pos:start="7:9" pos:end="7:41">

        <return pos:start="7:9" pos:end="7:41">return <expr pos:start="7:16" pos:end="7:40"><name pos:start="7:16" pos:end="7:40">DCA_PARSE_ERROR_SYNC_WORD</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:36"><expr pos:start="11:5" pos:end="11:35"><name pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:5">h</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:19">normal_frame</name></name> <operator pos:start="11:21" pos:end="11:21">=</operator> <call pos:start="11:23" pos:end="11:35"><name pos:start="11:23" pos:end="11:31">get_bits1</name><argument_list pos:start="11:32" pos:end="11:35">(<argument pos:start="11:33" pos:end="11:34"><expr pos:start="11:33" pos:end="11:34"><name pos:start="11:33" pos:end="11:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:5">h</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:22">deficit_samples</name></name> <operator pos:start="13:24" pos:end="13:24">=</operator> <call pos:start="13:26" pos:end="13:40"><name pos:start="13:26" pos:end="13:33">get_bits</name><argument_list pos:start="13:34" pos:end="13:40">(<argument pos:start="13:35" pos:end="13:36"><expr pos:start="13:35" pos:end="13:36"><name pos:start="13:35" pos:end="13:36">gb</name></expr></argument>, <argument pos:start="13:39" pos:end="13:39"><expr pos:start="13:39" pos:end="13:39"><literal type="number" pos:start="13:39" pos:end="13:39">5</literal></expr></argument>)</argument_list></call> <operator pos:start="13:42" pos:end="13:42">+</operator> <literal type="number" pos:start="13:44" pos:end="13:44">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:47"><if pos:start="15:5" pos:end="17:47">if <condition pos:start="15:8" pos:end="15:51">(<expr pos:start="15:9" pos:end="15:50"><name pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:9">h</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:26">deficit_samples</name></name> <operator pos:start="15:28" pos:end="15:29">!=</operator> <name pos:start="15:31" pos:end="15:50">DCA_PCMBLOCK_SAMPLES</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:47"><block_content pos:start="17:9" pos:end="17:47">

        <return pos:start="17:9" pos:end="17:47">return <expr pos:start="17:16" pos:end="17:46"><name pos:start="17:16" pos:end="17:46">DCA_PARSE_ERROR_DEFICIT_SAMPLES</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:5">h</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:18">crc_present</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <call pos:start="21:22" pos:end="21:34"><name pos:start="21:22" pos:end="21:30">get_bits1</name><argument_list pos:start="21:31" pos:end="21:34">(<argument pos:start="21:32" pos:end="21:33"><expr pos:start="21:32" pos:end="21:33"><name pos:start="21:32" pos:end="21:33">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:40"><expr pos:start="23:5" pos:end="23:39"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:5">h</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:17">npcmblocks</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="23:35"><name pos:start="23:21" pos:end="23:28">get_bits</name><argument_list pos:start="23:29" pos:end="23:35">(<argument pos:start="23:30" pos:end="23:31"><expr pos:start="23:30" pos:end="23:31"><name pos:start="23:30" pos:end="23:31">gb</name></expr></argument>, <argument pos:start="23:34" pos:end="23:34"><expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">7</literal></expr></argument>)</argument_list></call> <operator pos:start="23:37" pos:end="23:37">+</operator> <literal type="number" pos:start="23:39" pos:end="23:39">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:42"><if pos:start="25:5" pos:end="27:42">if <condition pos:start="25:8" pos:end="25:50">(<expr pos:start="25:9" pos:end="25:49"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:9">h</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:21">npcmblocks</name></name> <operator pos:start="25:23" pos:end="25:23">&amp;</operator> <operator pos:start="25:25" pos:end="25:25">(</operator><name pos:start="25:26" pos:end="25:44">DCA_SUBBAND_SAMPLES</name> <operator pos:start="25:46" pos:end="25:46">-</operator> <literal type="number" pos:start="25:48" pos:end="25:48">1</literal><operator pos:start="25:49" pos:end="25:49">)</operator></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:42"><block_content pos:start="27:9" pos:end="27:42">

        <return pos:start="27:9" pos:end="27:42">return <expr pos:start="27:16" pos:end="27:41"><name pos:start="27:16" pos:end="27:41">DCA_PARSE_ERROR_PCM_BLOCKS</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:5">h</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:17">frame_size</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <call pos:start="31:21" pos:end="31:36"><name pos:start="31:21" pos:end="31:28">get_bits</name><argument_list pos:start="31:29" pos:end="31:36">(<argument pos:start="31:30" pos:end="31:31"><expr pos:start="31:30" pos:end="31:31"><name pos:start="31:30" pos:end="31:31">gb</name></expr></argument>, <argument pos:start="31:34" pos:end="31:35"><expr pos:start="31:34" pos:end="31:35"><literal type="number" pos:start="31:34" pos:end="31:35">14</literal></expr></argument>)</argument_list></call> <operator pos:start="31:38" pos:end="31:38">+</operator> <literal type="number" pos:start="31:40" pos:end="31:40">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:42"><if pos:start="33:5" pos:end="35:42">if <condition pos:start="33:8" pos:end="33:27">(<expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:9">h</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:21">frame_size</name></name> <operator pos:start="33:23" pos:end="33:23">&lt;</operator> <literal type="number" pos:start="33:25" pos:end="33:26">96</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:42"><block_content pos:start="35:9" pos:end="35:42">

        <return pos:start="35:9" pos:end="35:42">return <expr pos:start="35:16" pos:end="35:41"><name pos:start="35:16" pos:end="35:41">DCA_PARSE_ERROR_FRAME_SIZE</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:5">h</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:17">audio_mode</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <call pos:start="39:21" pos:end="39:35"><name pos:start="39:21" pos:end="39:28">get_bits</name><argument_list pos:start="39:29" pos:end="39:35">(<argument pos:start="39:30" pos:end="39:31"><expr pos:start="39:30" pos:end="39:31"><name pos:start="39:30" pos:end="39:31">gb</name></expr></argument>, <argument pos:start="39:34" pos:end="39:34"><expr pos:start="39:34" pos:end="39:34"><literal type="number" pos:start="39:34" pos:end="39:34">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:37"><if pos:start="41:5" pos:end="43:37">if <condition pos:start="41:8" pos:end="41:41">(<expr pos:start="41:9" pos:end="41:40"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:9">h</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:21">audio_mode</name></name> <operator pos:start="41:23" pos:end="41:24">&gt;=</operator> <name pos:start="41:26" pos:end="41:40">DCA_AMODE_COUNT</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:37"><block_content pos:start="43:9" pos:end="43:37">

        <return pos:start="43:9" pos:end="43:37">return <expr pos:start="43:16" pos:end="43:36"><name pos:start="43:16" pos:end="43:36">DCA_PARSE_ERROR_AMODE</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:33"><expr pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:5">h</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:14">sr_code</name></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:32"><name pos:start="47:18" pos:end="47:25">get_bits</name><argument_list pos:start="47:26" pos:end="47:32">(<argument pos:start="47:27" pos:end="47:28"><expr pos:start="47:27" pos:end="47:28"><name pos:start="47:27" pos:end="47:28">gb</name></expr></argument>, <argument pos:start="47:31" pos:end="47:31"><expr pos:start="47:31" pos:end="47:31"><literal type="number" pos:start="47:31" pos:end="47:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="51:43"><if pos:start="49:5" pos:end="51:43">if <condition pos:start="49:8" pos:end="49:45">(<expr pos:start="49:9" pos:end="49:44"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:44"><name pos:start="49:10" pos:end="49:32">avpriv_dca_sample_rates</name><index pos:start="49:33" pos:end="49:44">[<expr pos:start="49:34" pos:end="49:43"><name pos:start="49:34" pos:end="49:43"><name pos:start="49:34" pos:end="49:34">h</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:43">sr_code</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:43"><block_content pos:start="51:9" pos:end="51:43">

        <return pos:start="51:9" pos:end="51:43">return <expr pos:start="51:16" pos:end="51:42"><name pos:start="51:16" pos:end="51:42">DCA_PARSE_ERROR_SAMPLE_RATE</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:14"><name pos:start="55:5" pos:end="55:5">h</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:14">br_code</name></name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:32"><name pos:start="55:18" pos:end="55:25">get_bits</name><argument_list pos:start="55:26" pos:end="55:32">(<argument pos:start="55:27" pos:end="55:28"><expr pos:start="55:27" pos:end="55:28"><name pos:start="55:27" pos:end="55:28">gb</name></expr></argument>, <argument pos:start="55:31" pos:end="55:31"><expr pos:start="55:31" pos:end="55:31"><literal type="number" pos:start="55:31" pos:end="55:31">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="59:44"><if pos:start="57:5" pos:end="59:44">if <condition pos:start="57:8" pos:end="57:22">(<expr pos:start="57:9" pos:end="57:21"><call pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:17">get_bits1</name><argument_list pos:start="57:18" pos:end="57:21">(<argument pos:start="57:19" pos:end="57:20"><expr pos:start="57:19" pos:end="57:20"><name pos:start="57:19" pos:end="57:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:44"><block_content pos:start="59:9" pos:end="59:44">

        <return pos:start="59:9" pos:end="59:44">return <expr pos:start="59:16" pos:end="59:43"><name pos:start="59:16" pos:end="59:43">DCA_PARSE_ERROR_RESERVED_BIT</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:5">h</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:18">drc_present</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <call pos:start="63:22" pos:end="63:34"><name pos:start="63:22" pos:end="63:30">get_bits1</name><argument_list pos:start="63:31" pos:end="63:34">(<argument pos:start="63:32" pos:end="63:33"><expr pos:start="63:32" pos:end="63:33"><name pos:start="63:32" pos:end="63:33">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:34"><expr pos:start="65:5" pos:end="65:33"><name pos:start="65:5" pos:end="65:17"><name pos:start="65:5" pos:end="65:5">h</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:17">ts_present</name></name> <operator pos:start="65:19" pos:end="65:19">=</operator> <call pos:start="65:21" pos:end="65:33"><name pos:start="65:21" pos:end="65:29">get_bits1</name><argument_list pos:start="65:30" pos:end="65:33">(<argument pos:start="65:31" pos:end="65:32"><expr pos:start="65:31" pos:end="65:32"><name pos:start="65:31" pos:end="65:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:18"><name pos:start="67:5" pos:end="67:5">h</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:18">aux_present</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <call pos:start="67:22" pos:end="67:34"><name pos:start="67:22" pos:end="67:30">get_bits1</name><argument_list pos:start="67:31" pos:end="67:34">(<argument pos:start="67:32" pos:end="67:33"><expr pos:start="67:32" pos:end="67:33"><name pos:start="67:32" pos:end="67:33">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:35"><expr pos:start="69:5" pos:end="69:34"><name pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:5">h</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:18">hdcd_master</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:34"><name pos:start="69:22" pos:end="69:30">get_bits1</name><argument_list pos:start="69:31" pos:end="69:34">(<argument pos:start="69:32" pos:end="69:33"><expr pos:start="69:32" pos:end="69:33"><name pos:start="69:32" pos:end="69:33">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:40"><expr pos:start="71:5" pos:end="71:39"><name pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:5">h</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:21">ext_audio_type</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <call pos:start="71:25" pos:end="71:39"><name pos:start="71:25" pos:end="71:32">get_bits</name><argument_list pos:start="71:33" pos:end="71:39">(<argument pos:start="71:34" pos:end="71:35"><expr pos:start="71:34" pos:end="71:35"><name pos:start="71:34" pos:end="71:35">gb</name></expr></argument>, <argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:41"><expr pos:start="73:5" pos:end="73:40"><name pos:start="73:5" pos:end="73:24"><name pos:start="73:5" pos:end="73:5">h</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:24">ext_audio_present</name></name> <operator pos:start="73:26" pos:end="73:26">=</operator> <call pos:start="73:28" pos:end="73:40"><name pos:start="73:28" pos:end="73:36">get_bits1</name><argument_list pos:start="73:37" pos:end="73:40">(<argument pos:start="73:38" pos:end="73:39"><expr pos:start="73:38" pos:end="73:39"><name pos:start="73:38" pos:end="73:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:32"><expr pos:start="75:5" pos:end="75:31"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:5">h</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:15">sync_ssf</name></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:31"><name pos:start="75:19" pos:end="75:27">get_bits1</name><argument_list pos:start="75:28" pos:end="75:31">(<argument pos:start="75:29" pos:end="75:30"><expr pos:start="75:29" pos:end="75:30"><name pos:start="75:29" pos:end="75:30">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:37"><expr pos:start="77:5" pos:end="77:36"><name pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:5">h</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:18">lfe_present</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <call pos:start="77:22" pos:end="77:36"><name pos:start="77:22" pos:end="77:29">get_bits</name><argument_list pos:start="77:30" pos:end="77:36">(<argument pos:start="77:31" pos:end="77:32"><expr pos:start="77:31" pos:end="77:32"><name pos:start="77:31" pos:end="77:32">gb</name></expr></argument>, <argument pos:start="77:35" pos:end="77:35"><expr pos:start="77:35" pos:end="77:35"><literal type="number" pos:start="77:35" pos:end="77:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="81:40"><if pos:start="79:5" pos:end="81:40">if <condition pos:start="79:8" pos:end="79:47">(<expr pos:start="79:9" pos:end="79:46"><name pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:9">h</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:22">lfe_present</name></name> <operator pos:start="79:24" pos:end="79:25">==</operator> <name pos:start="79:27" pos:end="79:46">DCA_LFE_FLAG_INVALID</name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:40"><block_content pos:start="81:9" pos:end="81:40">

        <return pos:start="81:9" pos:end="81:40">return <expr pos:start="81:16" pos:end="81:39"><name pos:start="81:16" pos:end="81:39">DCA_PARSE_ERROR_LFE_FLAG</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:41"><expr pos:start="85:5" pos:end="85:40"><name pos:start="85:5" pos:end="85:24"><name pos:start="85:5" pos:end="85:5">h</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:24">predictor_history</name></name> <operator pos:start="85:26" pos:end="85:26">=</operator> <call pos:start="85:28" pos:end="85:40"><name pos:start="85:28" pos:end="85:36">get_bits1</name><argument_list pos:start="85:37" pos:end="85:40">(<argument pos:start="85:38" pos:end="85:39"><expr pos:start="85:38" pos:end="85:39"><name pos:start="85:38" pos:end="85:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="89:26"><if pos:start="87:5" pos:end="89:26">if <condition pos:start="87:8" pos:end="87:23">(<expr pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:9">h</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:22">crc_present</name></name></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:26"><block_content pos:start="89:9" pos:end="89:26">

        <expr_stmt pos:start="89:9" pos:end="89:26"><expr pos:start="89:9" pos:end="89:25"><call pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:17">skip_bits</name><argument_list pos:start="89:18" pos:end="89:25">(<argument pos:start="89:19" pos:end="89:20"><expr pos:start="89:19" pos:end="89:20"><name pos:start="89:19" pos:end="89:20">gb</name></expr></argument>, <argument pos:start="89:23" pos:end="89:24"><expr pos:start="89:23" pos:end="89:24"><literal type="number" pos:start="89:23" pos:end="89:24">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:38"><expr pos:start="91:5" pos:end="91:37"><name pos:start="91:5" pos:end="91:21"><name pos:start="91:5" pos:end="91:5">h</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:21">filter_perfect</name></name> <operator pos:start="91:23" pos:end="91:23">=</operator> <call pos:start="91:25" pos:end="91:37"><name pos:start="91:25" pos:end="91:33">get_bits1</name><argument_list pos:start="91:34" pos:end="91:37">(<argument pos:start="91:35" pos:end="91:36"><expr pos:start="91:35" pos:end="91:36"><name pos:start="91:35" pos:end="91:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:37"><expr pos:start="93:5" pos:end="93:36"><name pos:start="93:5" pos:end="93:18"><name pos:start="93:5" pos:end="93:5">h</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:18">encoder_rev</name></name> <operator pos:start="93:20" pos:end="93:20">=</operator> <call pos:start="93:22" pos:end="93:36"><name pos:start="93:22" pos:end="93:29">get_bits</name><argument_list pos:start="93:30" pos:end="93:36">(<argument pos:start="93:31" pos:end="93:32"><expr pos:start="93:31" pos:end="93:32"><name pos:start="93:31" pos:end="93:32">gb</name></expr></argument>, <argument pos:start="93:35" pos:end="93:35"><expr pos:start="93:35" pos:end="93:35"><literal type="number" pos:start="93:35" pos:end="93:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:35"><expr pos:start="95:5" pos:end="95:34"><name pos:start="95:5" pos:end="95:16"><name pos:start="95:5" pos:end="95:5">h</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:16">copy_hist</name></name> <operator pos:start="95:18" pos:end="95:18">=</operator> <call pos:start="95:20" pos:end="95:34"><name pos:start="95:20" pos:end="95:27">get_bits</name><argument_list pos:start="95:28" pos:end="95:34">(<argument pos:start="95:29" pos:end="95:30"><expr pos:start="95:29" pos:end="95:30"><name pos:start="95:29" pos:end="95:30">gb</name></expr></argument>, <argument pos:start="95:33" pos:end="95:33"><expr pos:start="95:33" pos:end="95:33"><literal type="number" pos:start="95:33" pos:end="95:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:35"><expr pos:start="97:5" pos:end="97:34"><name pos:start="97:5" pos:end="97:16"><name pos:start="97:5" pos:end="97:5">h</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:16">pcmr_code</name></name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:34"><name pos:start="97:20" pos:end="97:27">get_bits</name><argument_list pos:start="97:28" pos:end="97:34">(<argument pos:start="97:29" pos:end="97:30"><expr pos:start="97:29" pos:end="97:30"><name pos:start="97:29" pos:end="97:30">gb</name></expr></argument>, <argument pos:start="97:33" pos:end="97:33"><expr pos:start="97:33" pos:end="97:33"><literal type="number" pos:start="97:33" pos:end="97:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="101:39"><if pos:start="99:5" pos:end="101:39">if <condition pos:start="99:8" pos:end="99:46">(<expr pos:start="99:9" pos:end="99:45"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:45"><name pos:start="99:10" pos:end="99:31">ff_dca_bits_per_sample</name><index pos:start="99:32" pos:end="99:45">[<expr pos:start="99:33" pos:end="99:44"><name pos:start="99:33" pos:end="99:44"><name pos:start="99:33" pos:end="99:33">h</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:44">pcmr_code</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:39"><block_content pos:start="101:9" pos:end="101:39">

        <return pos:start="101:9" pos:end="101:39">return <expr pos:start="101:16" pos:end="101:38"><name pos:start="101:16" pos:end="101:38">DCA_PARSE_ERROR_PCM_RES</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:37"><expr pos:start="105:5" pos:end="105:36"><name pos:start="105:5" pos:end="105:20"><name pos:start="105:5" pos:end="105:5">h</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:20">sumdiff_front</name></name> <operator pos:start="105:22" pos:end="105:22">=</operator> <call pos:start="105:24" pos:end="105:36"><name pos:start="105:24" pos:end="105:32">get_bits1</name><argument_list pos:start="105:33" pos:end="105:36">(<argument pos:start="105:34" pos:end="105:35"><expr pos:start="105:34" pos:end="105:35"><name pos:start="105:34" pos:end="105:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:40"><expr pos:start="107:5" pos:end="107:39"><name pos:start="107:5" pos:end="107:23"><name pos:start="107:5" pos:end="107:5">h</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:23">sumdiff_surround</name></name> <operator pos:start="107:25" pos:end="107:25">=</operator> <call pos:start="107:27" pos:end="107:39"><name pos:start="107:27" pos:end="107:35">get_bits1</name><argument_list pos:start="107:36" pos:end="107:39">(<argument pos:start="107:37" pos:end="107:38"><expr pos:start="107:37" pos:end="107:38"><name pos:start="107:37" pos:end="107:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:33"><expr pos:start="109:5" pos:end="109:32"><name pos:start="109:5" pos:end="109:14"><name pos:start="109:5" pos:end="109:5">h</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:14">dn_code</name></name> <operator pos:start="109:16" pos:end="109:16">=</operator> <call pos:start="109:18" pos:end="109:32"><name pos:start="109:18" pos:end="109:25">get_bits</name><argument_list pos:start="109:26" pos:end="109:32">(<argument pos:start="109:27" pos:end="109:28"><expr pos:start="109:27" pos:end="109:28"><name pos:start="109:27" pos:end="109:28">gb</name></expr></argument>, <argument pos:start="109:31" pos:end="109:31"><expr pos:start="109:31" pos:end="109:31"><literal type="number" pos:start="109:31" pos:end="109:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="111:5" pos:end="111:13">return <expr pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
