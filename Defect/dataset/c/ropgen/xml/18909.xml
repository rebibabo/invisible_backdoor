<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18909.c" pos:tabs="8"><function pos:start="1:1" pos:end="381:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">rkmpp_retrieve_frame</name><parameter_list pos:start="1:32" pos:end="1:70">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:69"><decl pos:start="1:56" pos:end="1:69"><type pos:start="1:56" pos:end="1:69"><name pos:start="1:56" pos:end="1:62">AVFrame</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">frame</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="381:1">{<block_content pos:start="5:5" pos:end="379:15">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">RKMPPDecodeContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:34">rk_context</name> <init pos:start="5:36" pos:end="5:53">= <expr pos:start="5:38" pos:end="5:53"><name pos:start="5:38" pos:end="5:53"><name pos:start="5:38" pos:end="5:42">avctx</name><operator pos:start="5:43" pos:end="5:44">-&gt;</operator><name pos:start="5:45" pos:end="5:53">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:74"><decl pos:start="7:5" pos:end="7:73"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">RKMPPDecoder</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">decoder</name> <init pos:start="7:27" pos:end="7:73">= <expr pos:start="7:29" pos:end="7:73"><operator pos:start="7:29" pos:end="7:29">(</operator><name pos:start="7:30" pos:end="7:41">RKMPPDecoder</name> <operator pos:start="7:43" pos:end="7:43">*</operator><operator pos:start="7:44" pos:end="7:44">)</operator><name pos:start="7:45" pos:end="7:73"><name pos:start="7:45" pos:end="7:54">rk_context</name><operator pos:start="7:55" pos:end="7:56">-&gt;</operator><name pos:start="7:57" pos:end="7:67">decoder_ref</name><operator pos:start="7:68" pos:end="7:69">-&gt;</operator><name pos:start="7:70" pos:end="7:73">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">RKMPPFrameContext</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:35">framecontext</name> <init pos:start="9:37" pos:end="9:42">= <expr pos:start="9:39" pos:end="9:42"><name pos:start="9:39" pos:end="9:42">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">AVBufferRef</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:32">framecontextref</name> <init pos:start="11:34" pos:end="11:39">= <expr pos:start="11:36" pos:end="11:39"><name pos:start="11:36" pos:end="11:39">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">MppFrame</name></type> <name pos:start="15:14" pos:end="15:21">mppframe</name> <init pos:start="15:23" pos:end="15:28">= <expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">MppBuffer</name></type> <name pos:start="17:15" pos:end="17:20">buffer</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:38"><decl pos:start="19:5" pos:end="19:37"><type pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:24">AVDRMFrameDescriptor</name> <modifier pos:start="19:26" pos:end="19:26">*</modifier></type><name pos:start="19:27" pos:end="19:30">desc</name> <init pos:start="19:32" pos:end="19:37">= <expr pos:start="19:34" pos:end="19:37"><name pos:start="19:34" pos:end="19:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:38"><type pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:24">AVDRMLayerDescriptor</name> <modifier pos:start="21:26" pos:end="21:26">*</modifier></type><name pos:start="21:27" pos:end="21:31">layer</name> <init pos:start="21:33" pos:end="21:38">= <expr pos:start="21:35" pos:end="21:38"><name pos:start="21:35" pos:end="21:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">retrycount</name> <init pos:start="23:20" pos:end="23:22">= <expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:13"><decl pos:start="25:5" pos:end="25:12"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:12">mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:29"><decl pos:start="27:5" pos:end="27:28"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:18">MppFrameFormat</name></type> <name pos:start="27:20" pos:end="27:28">mppformat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:22">drmformat</name></decl>;</decl_stmt>



    <comment type="line" pos:start="33:5" pos:end="33:80">// on start of decoding, MPP can return -1, which is supposed to be expected</comment>

    <comment type="line" pos:start="35:5" pos:end="35:78">// this is due to some internal MPP init which is not completed, that will</comment>

    <comment type="line" pos:start="37:5" pos:end="37:81">// only happen in the first few frames queries, but should not be interpreted</comment>

    <comment type="line" pos:start="39:5" pos:end="39:76">// as an error, Therefore we need to retry a couple times when we get -1</comment>

    <comment type="line" pos:start="41:5" pos:end="41:90">// in order to let it time to complete it's init, then we sleep a bit between retries.</comment>

<label pos:start="43:1" pos:end="43:16"><name pos:start="43:1" pos:end="43:15">retry_get_frame</name>:</label>

    <expr_stmt pos:start="45:5" pos:end="45:66"><expr pos:start="45:5" pos:end="45:65"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:65"><name pos:start="45:11" pos:end="45:40"><name pos:start="45:11" pos:end="45:17">decoder</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:22">mpi</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:40">decode_get_frame</name></name><argument_list pos:start="45:41" pos:end="45:65">(<argument pos:start="45:42" pos:end="45:53"><expr pos:start="45:42" pos:end="45:53"><name pos:start="45:42" pos:end="45:53"><name pos:start="45:42" pos:end="45:48">decoder</name><operator pos:start="45:49" pos:end="45:50">-&gt;</operator><name pos:start="45:51" pos:end="45:53">ctx</name></name></expr></argument>, <argument pos:start="45:56" pos:end="45:64"><expr pos:start="45:56" pos:end="45:64"><operator pos:start="45:56" pos:end="45:56">&amp;</operator><name pos:start="45:57" pos:end="45:64">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="67:5"><if pos:start="47:5" pos:end="67:5">if <condition pos:start="47:8" pos:end="47:73">(<expr pos:start="47:9" pos:end="47:72"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:14">!=</operator> <name pos:start="47:16" pos:end="47:21">MPP_OK</name> <operator pos:start="47:23" pos:end="47:24">&amp;&amp;</operator> <name pos:start="47:26" pos:end="47:28">ret</name> <operator pos:start="47:30" pos:end="47:31">!=</operator> <name pos:start="47:33" pos:end="47:47">MPP_ERR_TIMEOUT</name> <operator pos:start="47:49" pos:end="47:50">&amp;&amp;</operator> <operator pos:start="47:52" pos:end="47:52">!</operator><name pos:start="47:53" pos:end="47:72"><name pos:start="47:53" pos:end="47:59">decoder</name><operator pos:start="47:60" pos:end="47:61">-&gt;</operator><name pos:start="47:62" pos:end="47:72">first_frame</name></name></expr>)</condition> <block pos:start="47:75" pos:end="67:5">{<block_content pos:start="49:9" pos:end="65:9">

        <if_stmt pos:start="49:9" pos:end="65:9"><if pos:start="49:9" pos:end="59:9">if <condition pos:start="49:12" pos:end="49:27">(<expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:22">retrycount</name> <operator pos:start="49:24" pos:end="49:24">&lt;</operator> <literal type="number" pos:start="49:26" pos:end="49:26">5</literal></expr>)</condition> <block pos:start="49:29" pos:end="59:9">{<block_content pos:start="51:13" pos:end="57:33">

            <expr_stmt pos:start="51:13" pos:end="51:123"><expr pos:start="51:13" pos:end="51:122"><call pos:start="51:13" pos:end="51:122"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="51:122">(<argument pos:start="51:20" pos:end="51:24"><expr pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:24">avctx</name></expr></argument>, <argument pos:start="51:27" pos:end="51:38"><expr pos:start="51:27" pos:end="51:38"><name pos:start="51:27" pos:end="51:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="51:41" pos:end="51:104"><expr pos:start="51:41" pos:end="51:104"><literal type="string" pos:start="51:41" pos:end="51:104">"Failed to get a frame, retrying (code = %d, retrycount = %d)\n"</literal></expr></argument>, <argument pos:start="51:107" pos:end="51:109"><expr pos:start="51:107" pos:end="51:109"><name pos:start="51:107" pos:end="51:109">ret</name></expr></argument>, <argument pos:start="51:112" pos:end="51:121"><expr pos:start="51:112" pos:end="51:121"><name pos:start="51:112" pos:end="51:121">retrycount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:26"><expr pos:start="53:13" pos:end="53:25"><call pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:18">usleep</name><argument_list pos:start="53:19" pos:end="53:25">(<argument pos:start="53:20" pos:end="53:24"><expr pos:start="53:20" pos:end="53:24"><literal type="number" pos:start="53:20" pos:end="53:24">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:25"><expr pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:22">retrycount</name><operator pos:start="55:23" pos:end="55:24">++</operator></expr>;</expr_stmt>

            <goto pos:start="57:13" pos:end="57:33">goto <name pos:start="57:18" pos:end="57:32">retry_get_frame</name>;</goto>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="65:9">else <block pos:start="59:16" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:22">

            <expr_stmt pos:start="61:13" pos:end="61:93"><expr pos:start="61:13" pos:end="61:92"><call pos:start="61:13" pos:end="61:92"><name pos:start="61:13" pos:end="61:18">av_log</name><argument_list pos:start="61:19" pos:end="61:92">(<argument pos:start="61:20" pos:end="61:24"><expr pos:start="61:20" pos:end="61:24"><name pos:start="61:20" pos:end="61:24">avctx</name></expr></argument>, <argument pos:start="61:27" pos:end="61:38"><expr pos:start="61:27" pos:end="61:38"><name pos:start="61:27" pos:end="61:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:41" pos:end="61:86"><expr pos:start="61:41" pos:end="61:86"><literal type="string" pos:start="61:41" pos:end="61:86">"Failed to get a frame from MPP (code = %d)\n"</literal></expr></argument>, <argument pos:start="61:89" pos:end="61:91"><expr pos:start="61:89" pos:end="61:91"><name pos:start="61:89" pos:end="61:91">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="63:13" pos:end="63:22">goto <name pos:start="63:18" pos:end="63:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="345:5"><if pos:start="71:5" pos:end="337:5">if <condition pos:start="71:8" pos:end="71:17">(<expr pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:16">mppframe</name></expr>)</condition> <block pos:start="71:19" pos:end="337:5">{<block_content pos:start="75:9" pos:end="335:9">

        <comment type="line" pos:start="73:9" pos:end="73:54">// Check wether we have a special frame or not</comment>

        <if_stmt pos:start="75:9" pos:end="173:9"><if pos:start="75:9" pos:end="147:9">if <condition pos:start="75:12" pos:end="75:48">(<expr pos:start="75:13" pos:end="75:47"><call pos:start="75:13" pos:end="75:47"><name pos:start="75:13" pos:end="75:37">mpp_frame_get_info_change</name><argument_list pos:start="75:38" pos:end="75:47">(<argument pos:start="75:39" pos:end="75:46"><expr pos:start="75:39" pos:end="75:46"><name pos:start="75:39" pos:end="75:46">mppframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:50" pos:end="147:9">{<block_content pos:start="77:13" pos:end="145:22">

            <decl_stmt pos:start="77:13" pos:end="77:40"><decl pos:start="77:13" pos:end="77:39"><type pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:29">AVHWFramesContext</name> <modifier pos:start="77:31" pos:end="77:31">*</modifier></type><name pos:start="77:32" pos:end="77:39">hwframes</name></decl>;</decl_stmt>



            <expr_stmt pos:start="81:13" pos:end="85:74"><expr pos:start="81:13" pos:end="85:73"><call pos:start="81:13" pos:end="85:73"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="85:73">(<argument pos:start="81:20" pos:end="81:24"><expr pos:start="81:20" pos:end="81:24"><name pos:start="81:20" pos:end="81:24">avctx</name></expr></argument>, <argument pos:start="81:27" pos:end="81:37"><expr pos:start="81:27" pos:end="81:37"><name pos:start="81:27" pos:end="81:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="81:40" pos:end="81:92"><expr pos:start="81:40" pos:end="81:92"><literal type="string" pos:start="81:40" pos:end="81:92">"Decoder noticed an info change (%dx%d), format=%d\n"</literal></expr></argument>,

                                        <argument pos:start="83:41" pos:end="83:74"><expr pos:start="83:41" pos:end="83:74"><operator pos:start="83:41" pos:end="83:41">(</operator><name pos:start="83:42" pos:end="83:44">int</name><operator pos:start="83:45" pos:end="83:45">)</operator><call pos:start="83:46" pos:end="83:74"><name pos:start="83:46" pos:end="83:64">mpp_frame_get_width</name><argument_list pos:start="83:65" pos:end="83:74">(<argument pos:start="83:66" pos:end="83:73"><expr pos:start="83:66" pos:end="83:73"><name pos:start="83:66" pos:end="83:73">mppframe</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="83:77" pos:end="83:111"><expr pos:start="83:77" pos:end="83:111"><operator pos:start="83:77" pos:end="83:77">(</operator><name pos:start="83:78" pos:end="83:80">int</name><operator pos:start="83:81" pos:end="83:81">)</operator><call pos:start="83:82" pos:end="83:111"><name pos:start="83:82" pos:end="83:101">mpp_frame_get_height</name><argument_list pos:start="83:102" pos:end="83:111">(<argument pos:start="83:103" pos:end="83:110"><expr pos:start="83:103" pos:end="83:110"><name pos:start="83:103" pos:end="83:110">mppframe</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="85:41" pos:end="85:72"><expr pos:start="85:41" pos:end="85:72"><operator pos:start="85:41" pos:end="85:41">(</operator><name pos:start="85:42" pos:end="85:44">int</name><operator pos:start="85:45" pos:end="85:45">)</operator><call pos:start="85:46" pos:end="85:72"><name pos:start="85:46" pos:end="85:62">mpp_frame_get_fmt</name><argument_list pos:start="85:63" pos:end="85:72">(<argument pos:start="85:64" pos:end="85:71"><expr pos:start="85:64" pos:end="85:71"><name pos:start="85:64" pos:end="85:71">mppframe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="89:13" pos:end="89:57"><expr pos:start="89:13" pos:end="89:56"><name pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:17">avctx</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:24">width</name></name> <operator pos:start="89:26" pos:end="89:26">=</operator> <call pos:start="89:28" pos:end="89:56"><name pos:start="89:28" pos:end="89:46">mpp_frame_get_width</name><argument_list pos:start="89:47" pos:end="89:56">(<argument pos:start="89:48" pos:end="89:55"><expr pos:start="89:48" pos:end="89:55"><name pos:start="89:48" pos:end="89:55">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:59"><expr pos:start="91:13" pos:end="91:58"><name pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:17">avctx</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:25">height</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <call pos:start="91:29" pos:end="91:58"><name pos:start="91:29" pos:end="91:48">mpp_frame_get_height</name><argument_list pos:start="91:49" pos:end="91:58">(<argument pos:start="91:50" pos:end="91:57"><expr pos:start="91:50" pos:end="91:57"><name pos:start="91:50" pos:end="91:57">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:85"><expr pos:start="95:13" pos:end="95:84"><call pos:start="95:13" pos:end="95:84"><name pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:19">decoder</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:24">mpi</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:33">control</name></name><argument_list pos:start="95:34" pos:end="95:84">(<argument pos:start="95:35" pos:end="95:46"><expr pos:start="95:35" pos:end="95:46"><name pos:start="95:35" pos:end="95:46"><name pos:start="95:35" pos:end="95:41">decoder</name><operator pos:start="95:42" pos:end="95:43">-&gt;</operator><name pos:start="95:44" pos:end="95:46">ctx</name></name></expr></argument>, <argument pos:start="95:49" pos:end="95:77"><expr pos:start="95:49" pos:end="95:77"><name pos:start="95:49" pos:end="95:77">MPP_DEC_SET_INFO_CHANGE_READY</name></expr></argument>, <argument pos:start="95:80" pos:end="95:83"><expr pos:start="95:80" pos:end="95:83"><name pos:start="95:80" pos:end="95:83">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:37"><expr pos:start="97:13" pos:end="97:36"><name pos:start="97:13" pos:end="97:32"><name pos:start="97:13" pos:end="97:19">decoder</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:32">first_frame</name></name> <operator pos:start="97:34" pos:end="97:34">=</operator> <literal type="number" pos:start="97:36" pos:end="97:36">1</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:50"><expr pos:start="101:13" pos:end="101:49"><call pos:start="101:13" pos:end="101:49"><name pos:start="101:13" pos:end="101:27">av_buffer_unref</name><argument_list pos:start="101:28" pos:end="101:49">(<argument pos:start="101:29" pos:end="101:48"><expr pos:start="101:29" pos:end="101:48"><operator pos:start="101:29" pos:end="101:29">&amp;</operator><name pos:start="101:30" pos:end="101:48"><name pos:start="101:30" pos:end="101:36">decoder</name><operator pos:start="101:37" pos:end="101:38">-&gt;</operator><name pos:start="101:39" pos:end="101:48">frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="105:13" pos:end="105:76"><expr pos:start="105:13" pos:end="105:75"><name pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:19">decoder</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:31">frames_ref</name></name> <operator pos:start="105:33" pos:end="105:33">=</operator> <call pos:start="105:35" pos:end="105:75"><name pos:start="105:35" pos:end="105:54">av_hwframe_ctx_alloc</name><argument_list pos:start="105:55" pos:end="105:75">(<argument pos:start="105:56" pos:end="105:74"><expr pos:start="105:56" pos:end="105:74"><name pos:start="105:56" pos:end="105:74"><name pos:start="105:56" pos:end="105:62">decoder</name><operator pos:start="105:63" pos:end="105:64">-&gt;</operator><name pos:start="105:65" pos:end="105:74">device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="113:13"><if pos:start="107:13" pos:end="113:13">if <condition pos:start="107:16" pos:end="107:37">(<expr pos:start="107:17" pos:end="107:36"><operator pos:start="107:17" pos:end="107:17">!</operator><name pos:start="107:18" pos:end="107:36"><name pos:start="107:18" pos:end="107:24">decoder</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:36">frames_ref</name></name></expr>)</condition> <block pos:start="107:39" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:26">

                <expr_stmt pos:start="109:17" pos:end="109:38"><expr pos:start="109:17" pos:end="109:37"><name pos:start="109:17" pos:end="109:19">ret</name> <operator pos:start="109:21" pos:end="109:21">=</operator> <call pos:start="109:23" pos:end="109:37"><name pos:start="109:23" pos:end="109:29">AVERROR</name><argument_list pos:start="109:30" pos:end="109:37">(<argument pos:start="109:31" pos:end="109:36"><expr pos:start="109:31" pos:end="109:36"><name pos:start="109:31" pos:end="109:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="111:17" pos:end="111:26">goto <name pos:start="111:22" pos:end="111:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="117:13" pos:end="117:52"><expr pos:start="117:13" pos:end="117:51"><name pos:start="117:13" pos:end="117:21">mppformat</name> <operator pos:start="117:23" pos:end="117:23">=</operator> <call pos:start="117:25" pos:end="117:51"><name pos:start="117:25" pos:end="117:41">mpp_frame_get_fmt</name><argument_list pos:start="117:42" pos:end="117:51">(<argument pos:start="117:43" pos:end="117:50"><expr pos:start="117:43" pos:end="117:50"><name pos:start="117:43" pos:end="117:50">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:57"><expr pos:start="119:13" pos:end="119:56"><name pos:start="119:13" pos:end="119:21">drmformat</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <call pos:start="119:25" pos:end="119:56"><name pos:start="119:25" pos:end="119:45">rkmpp_get_frameformat</name><argument_list pos:start="119:46" pos:end="119:56">(<argument pos:start="119:47" pos:end="119:55"><expr pos:start="119:47" pos:end="119:55"><name pos:start="119:47" pos:end="119:55">mppformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="123:13" pos:end="123:69"><expr pos:start="123:13" pos:end="123:68"><name pos:start="123:13" pos:end="123:20">hwframes</name> <operator pos:start="123:22" pos:end="123:22">=</operator> <operator pos:start="123:24" pos:end="123:24">(</operator><name pos:start="123:25" pos:end="123:41">AVHWFramesContext</name><operator pos:start="123:42" pos:end="123:42">*</operator><operator pos:start="123:43" pos:end="123:43">)</operator><name pos:start="123:44" pos:end="123:68"><name pos:start="123:44" pos:end="123:50">decoder</name><operator pos:start="123:51" pos:end="123:52">-&gt;</operator><name pos:start="123:53" pos:end="123:62">frames_ref</name><operator pos:start="123:63" pos:end="123:64">-&gt;</operator><name pos:start="123:65" pos:end="123:68">data</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:55"><expr pos:start="125:13" pos:end="125:54"><name pos:start="125:13" pos:end="125:28"><name pos:start="125:13" pos:end="125:20">hwframes</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:28">format</name></name>    <operator pos:start="125:33" pos:end="125:33">=</operator> <name pos:start="125:35" pos:end="125:54">AV_PIX_FMT_DRM_PRIME</name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:99"><expr pos:start="127:13" pos:end="127:98"><name pos:start="127:13" pos:end="127:31"><name pos:start="127:13" pos:end="127:20">hwframes</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:31">sw_format</name></name> <operator pos:start="127:33" pos:end="127:33">=</operator> <ternary pos:start="127:35" pos:end="127:98"><condition pos:start="127:35" pos:end="127:64"><expr pos:start="127:35" pos:end="127:62"><name pos:start="127:35" pos:end="127:43">drmformat</name> <operator pos:start="127:45" pos:end="127:46">==</operator> <name pos:start="127:48" pos:end="127:62">DRM_FORMAT_NV12</name></expr> ?</condition><then pos:start="127:66" pos:end="127:80"> <expr pos:start="127:66" pos:end="127:80"><name pos:start="127:66" pos:end="127:80">AV_PIX_FMT_NV12</name></expr> </then><else pos:start="127:82" pos:end="127:98">: <expr pos:start="127:84" pos:end="127:98"><name pos:start="127:84" pos:end="127:98">AV_PIX_FMT_NONE</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:47"><expr pos:start="129:13" pos:end="129:46"><name pos:start="129:13" pos:end="129:27"><name pos:start="129:13" pos:end="129:20">hwframes</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:27">width</name></name>     <operator pos:start="129:33" pos:end="129:33">=</operator> <name pos:start="129:35" pos:end="129:46"><name pos:start="129:35" pos:end="129:39">avctx</name><operator pos:start="129:40" pos:end="129:41">-&gt;</operator><name pos:start="129:42" pos:end="129:46">width</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:48"><expr pos:start="131:13" pos:end="131:47"><name pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:20">hwframes</name><operator pos:start="131:21" pos:end="131:22">-&gt;</operator><name pos:start="131:23" pos:end="131:28">height</name></name>    <operator pos:start="131:33" pos:end="131:33">=</operator> <name pos:start="131:35" pos:end="131:47"><name pos:start="131:35" pos:end="131:39">avctx</name><operator pos:start="131:40" pos:end="131:41">-&gt;</operator><name pos:start="131:42" pos:end="131:47">height</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:59"><expr pos:start="133:13" pos:end="133:58"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <call pos:start="133:19" pos:end="133:58"><name pos:start="133:19" pos:end="133:37">av_hwframe_ctx_init</name><argument_list pos:start="133:38" pos:end="133:58">(<argument pos:start="133:39" pos:end="133:57"><expr pos:start="133:39" pos:end="133:57"><name pos:start="133:39" pos:end="133:57"><name pos:start="133:39" pos:end="133:45">decoder</name><operator pos:start="133:46" pos:end="133:47">-&gt;</operator><name pos:start="133:48" pos:end="133:57">frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="137:26"><if pos:start="135:13" pos:end="137:26">if <condition pos:start="135:16" pos:end="135:24">(<expr pos:start="135:17" pos:end="135:23"><name pos:start="135:17" pos:end="135:19">ret</name> <operator pos:start="135:21" pos:end="135:21">&lt;</operator> <literal type="number" pos:start="135:23" pos:end="135:23">0</literal></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:26"><block_content pos:start="137:17" pos:end="137:26">

                <goto pos:start="137:17" pos:end="137:26">goto <name pos:start="137:22" pos:end="137:25">fail</name>;</goto></block_content></block></if></if_stmt>



            <comment type="line" pos:start="141:13" pos:end="141:84">// here decoder is fully initialized, we need to feed it again with data</comment>

            <expr_stmt pos:start="143:13" pos:end="143:34"><expr pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <call pos:start="143:19" pos:end="143:33"><name pos:start="143:19" pos:end="143:25">AVERROR</name><argument_list pos:start="143:26" pos:end="143:33">(<argument pos:start="143:27" pos:end="143:32"><expr pos:start="143:27" pos:end="143:32"><name pos:start="143:27" pos:end="143:32">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="145:13" pos:end="145:22">goto <name pos:start="145:18" pos:end="145:21">fail</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="147:11" pos:end="157:9">else if <condition pos:start="147:19" pos:end="147:47">(<expr pos:start="147:20" pos:end="147:46"><call pos:start="147:20" pos:end="147:46"><name pos:start="147:20" pos:end="147:36">mpp_frame_get_eos</name><argument_list pos:start="147:37" pos:end="147:46">(<argument pos:start="147:38" pos:end="147:45"><expr pos:start="147:38" pos:end="147:45"><name pos:start="147:38" pos:end="147:45">mppframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:49" pos:end="157:9">{<block_content pos:start="149:13" pos:end="155:22">

            <expr_stmt pos:start="149:13" pos:end="149:67"><expr pos:start="149:13" pos:end="149:66"><call pos:start="149:13" pos:end="149:66"><name pos:start="149:13" pos:end="149:18">av_log</name><argument_list pos:start="149:19" pos:end="149:66">(<argument pos:start="149:20" pos:end="149:24"><expr pos:start="149:20" pos:end="149:24"><name pos:start="149:20" pos:end="149:24">avctx</name></expr></argument>, <argument pos:start="149:27" pos:end="149:38"><expr pos:start="149:27" pos:end="149:38"><name pos:start="149:27" pos:end="149:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="149:41" pos:end="149:65"><expr pos:start="149:41" pos:end="149:65"><literal type="string" pos:start="149:41" pos:end="149:65">"Received a EOS frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:37"><expr pos:start="151:13" pos:end="151:36"><name pos:start="151:13" pos:end="151:32"><name pos:start="151:13" pos:end="151:19">decoder</name><operator pos:start="151:20" pos:end="151:21">-&gt;</operator><name pos:start="151:22" pos:end="151:32">eos_reached</name></name> <operator pos:start="151:34" pos:end="151:34">=</operator> <literal type="number" pos:start="151:36" pos:end="151:36">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:30"><expr pos:start="153:13" pos:end="153:29"><name pos:start="153:13" pos:end="153:15">ret</name> <operator pos:start="153:17" pos:end="153:17">=</operator> <name pos:start="153:19" pos:end="153:29">AVERROR_EOF</name></expr>;</expr_stmt>

            <goto pos:start="155:13" pos:end="155:22">goto <name pos:start="155:18" pos:end="155:21">fail</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="157:11" pos:end="165:9">else if <condition pos:start="157:19" pos:end="157:51">(<expr pos:start="157:20" pos:end="157:50"><call pos:start="157:20" pos:end="157:50"><name pos:start="157:20" pos:end="157:40">mpp_frame_get_discard</name><argument_list pos:start="157:41" pos:end="157:50">(<argument pos:start="157:42" pos:end="157:49"><expr pos:start="157:42" pos:end="157:49"><name pos:start="157:42" pos:end="157:49">mppframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:53" pos:end="165:9">{<block_content pos:start="159:13" pos:end="163:22">

            <expr_stmt pos:start="159:13" pos:end="159:71"><expr pos:start="159:13" pos:end="159:70"><call pos:start="159:13" pos:end="159:70"><name pos:start="159:13" pos:end="159:18">av_log</name><argument_list pos:start="159:19" pos:end="159:70">(<argument pos:start="159:20" pos:end="159:24"><expr pos:start="159:20" pos:end="159:24"><name pos:start="159:20" pos:end="159:24">avctx</name></expr></argument>, <argument pos:start="159:27" pos:end="159:38"><expr pos:start="159:27" pos:end="159:38"><name pos:start="159:27" pos:end="159:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="159:41" pos:end="159:69"><expr pos:start="159:41" pos:end="159:69"><literal type="string" pos:start="159:41" pos:end="159:69">"Received a discard frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:34"><expr pos:start="161:13" pos:end="161:33"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:33"><name pos:start="161:19" pos:end="161:25">AVERROR</name><argument_list pos:start="161:26" pos:end="161:33">(<argument pos:start="161:27" pos:end="161:32"><expr pos:start="161:27" pos:end="161:32"><name pos:start="161:27" pos:end="161:32">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:22">goto <name pos:start="163:18" pos:end="163:21">fail</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="165:11" pos:end="173:9">else if <condition pos:start="165:19" pos:end="165:51">(<expr pos:start="165:20" pos:end="165:50"><call pos:start="165:20" pos:end="165:50"><name pos:start="165:20" pos:end="165:40">mpp_frame_get_errinfo</name><argument_list pos:start="165:41" pos:end="165:50">(<argument pos:start="165:42" pos:end="165:49"><expr pos:start="165:42" pos:end="165:49"><name pos:start="165:42" pos:end="165:49">mppframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:53" pos:end="173:9">{<block_content pos:start="167:13" pos:end="171:22">

            <expr_stmt pos:start="167:13" pos:end="167:71"><expr pos:start="167:13" pos:end="167:70"><call pos:start="167:13" pos:end="167:70"><name pos:start="167:13" pos:end="167:18">av_log</name><argument_list pos:start="167:19" pos:end="167:70">(<argument pos:start="167:20" pos:end="167:24"><expr pos:start="167:20" pos:end="167:24"><name pos:start="167:20" pos:end="167:24">avctx</name></expr></argument>, <argument pos:start="167:27" pos:end="167:38"><expr pos:start="167:27" pos:end="167:38"><name pos:start="167:27" pos:end="167:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:41" pos:end="167:69"><expr pos:start="167:41" pos:end="167:69"><literal type="string" pos:start="167:41" pos:end="167:69">"Received a errinfo frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:34"><expr pos:start="169:13" pos:end="169:33"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <name pos:start="169:19" pos:end="169:33">AVERROR_UNKNOWN</name></expr>;</expr_stmt>

            <goto pos:start="171:13" pos:end="171:22">goto <name pos:start="171:18" pos:end="171:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="177:9" pos:end="177:44">// here we should have a valid frame</comment>

        <expr_stmt pos:start="179:9" pos:end="179:59"><expr pos:start="179:9" pos:end="179:58"><call pos:start="179:9" pos:end="179:58"><name pos:start="179:9" pos:end="179:14">av_log</name><argument_list pos:start="179:15" pos:end="179:58">(<argument pos:start="179:16" pos:end="179:20"><expr pos:start="179:16" pos:end="179:20"><name pos:start="179:16" pos:end="179:20">avctx</name></expr></argument>, <argument pos:start="179:23" pos:end="179:34"><expr pos:start="179:23" pos:end="179:34"><name pos:start="179:23" pos:end="179:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="179:37" pos:end="179:57"><expr pos:start="179:37" pos:end="179:57"><literal type="string" pos:start="179:37" pos:end="179:57">"Received a frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="183:9" pos:end="183:37">// setup general frame fields</comment>

        <expr_stmt pos:start="185:9" pos:end="185:55"><expr pos:start="185:9" pos:end="185:54"><name pos:start="185:9" pos:end="185:21"><name pos:start="185:9" pos:end="185:13">frame</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:21">format</name></name>           <operator pos:start="185:33" pos:end="185:33">=</operator> <name pos:start="185:35" pos:end="185:54">AV_PIX_FMT_DRM_PRIME</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:64"><expr pos:start="187:9" pos:end="187:63"><name pos:start="187:9" pos:end="187:20"><name pos:start="187:9" pos:end="187:13">frame</name><operator pos:start="187:14" pos:end="187:15">-&gt;</operator><name pos:start="187:16" pos:end="187:20">width</name></name>            <operator pos:start="187:33" pos:end="187:33">=</operator> <call pos:start="187:35" pos:end="187:63"><name pos:start="187:35" pos:end="187:53">mpp_frame_get_width</name><argument_list pos:start="187:54" pos:end="187:63">(<argument pos:start="187:55" pos:end="187:62"><expr pos:start="187:55" pos:end="187:62"><name pos:start="187:55" pos:end="187:62">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:65"><expr pos:start="189:9" pos:end="189:64"><name pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:13">frame</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:21">height</name></name>           <operator pos:start="189:33" pos:end="189:33">=</operator> <call pos:start="189:35" pos:end="189:64"><name pos:start="189:35" pos:end="189:54">mpp_frame_get_height</name><argument_list pos:start="189:55" pos:end="189:64">(<argument pos:start="189:56" pos:end="189:63"><expr pos:start="189:56" pos:end="189:63"><name pos:start="189:56" pos:end="189:63">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:62"><expr pos:start="191:9" pos:end="191:61"><name pos:start="191:9" pos:end="191:18"><name pos:start="191:9" pos:end="191:13">frame</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:18">pts</name></name>              <operator pos:start="191:33" pos:end="191:33">=</operator> <call pos:start="191:35" pos:end="191:61"><name pos:start="191:35" pos:end="191:51">mpp_frame_get_pts</name><argument_list pos:start="191:52" pos:end="191:61">(<argument pos:start="191:53" pos:end="191:60"><expr pos:start="191:53" pos:end="191:60"><name pos:start="191:53" pos:end="191:60">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:70"><expr pos:start="193:9" pos:end="193:69"><name pos:start="193:9" pos:end="193:26"><name pos:start="193:9" pos:end="193:13">frame</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:26">color_range</name></name>      <operator pos:start="193:33" pos:end="193:33">=</operator> <call pos:start="193:35" pos:end="193:69"><name pos:start="193:35" pos:end="193:59">mpp_frame_get_color_range</name><argument_list pos:start="193:60" pos:end="193:69">(<argument pos:start="193:61" pos:end="193:68"><expr pos:start="193:61" pos:end="193:68"><name pos:start="193:61" pos:end="193:68">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:74"><expr pos:start="195:9" pos:end="195:73"><name pos:start="195:9" pos:end="195:30"><name pos:start="195:9" pos:end="195:13">frame</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:30">color_primaries</name></name>  <operator pos:start="195:33" pos:end="195:33">=</operator> <call pos:start="195:35" pos:end="195:73"><name pos:start="195:35" pos:end="195:63">mpp_frame_get_color_primaries</name><argument_list pos:start="195:64" pos:end="195:73">(<argument pos:start="195:65" pos:end="195:72"><expr pos:start="195:65" pos:end="195:72"><name pos:start="195:65" pos:end="195:72">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:68"><expr pos:start="197:9" pos:end="197:67"><name pos:start="197:9" pos:end="197:24"><name pos:start="197:9" pos:end="197:13">frame</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:24">color_trc</name></name>        <operator pos:start="197:33" pos:end="197:33">=</operator> <call pos:start="197:35" pos:end="197:67"><name pos:start="197:35" pos:end="197:57">mpp_frame_get_color_trc</name><argument_list pos:start="197:58" pos:end="197:67">(<argument pos:start="197:59" pos:end="197:66"><expr pos:start="197:59" pos:end="197:66"><name pos:start="197:59" pos:end="197:66">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:69"><expr pos:start="199:9" pos:end="199:68"><name pos:start="199:9" pos:end="199:25"><name pos:start="199:9" pos:end="199:13">frame</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:25">colorspace</name></name>       <operator pos:start="199:33" pos:end="199:33">=</operator> <call pos:start="199:35" pos:end="199:68"><name pos:start="199:35" pos:end="199:58">mpp_frame_get_colorspace</name><argument_list pos:start="199:59" pos:end="199:68">(<argument pos:start="199:60" pos:end="199:67"><expr pos:start="199:60" pos:end="199:67"><name pos:start="199:60" pos:end="199:67">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="203:9" pos:end="203:44"><expr pos:start="203:9" pos:end="203:43"><name pos:start="203:9" pos:end="203:12">mode</name> <operator pos:start="203:14" pos:end="203:14">=</operator> <call pos:start="203:16" pos:end="203:43"><name pos:start="203:16" pos:end="203:33">mpp_frame_get_mode</name><argument_list pos:start="203:34" pos:end="203:43">(<argument pos:start="203:35" pos:end="203:42"><expr pos:start="203:35" pos:end="203:42"><name pos:start="203:35" pos:end="203:42">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:108"><expr pos:start="205:9" pos:end="205:107"><name pos:start="205:9" pos:end="205:31"><name pos:start="205:9" pos:end="205:13">frame</name><operator pos:start="205:14" pos:end="205:15">-&gt;</operator><name pos:start="205:16" pos:end="205:31">interlaced_frame</name></name> <operator pos:start="205:33" pos:end="205:33">=</operator> <operator pos:start="205:35" pos:end="205:35">(</operator><operator pos:start="205:36" pos:end="205:36">(</operator><name pos:start="205:37" pos:end="205:40">mode</name> <operator pos:start="205:42" pos:end="205:42">&amp;</operator> <name pos:start="205:44" pos:end="205:74">MPP_FRAME_FLAG_FIELD_ORDER_MASK</name><operator pos:start="205:75" pos:end="205:75">)</operator> <operator pos:start="205:77" pos:end="205:78">==</operator> <name pos:start="205:80" pos:end="205:106">MPP_FRAME_FLAG_DEINTERLACED</name><operator pos:start="205:107" pos:end="205:107">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:105"><expr pos:start="207:9" pos:end="207:104"><name pos:start="207:9" pos:end="207:30"><name pos:start="207:9" pos:end="207:13">frame</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:30">top_field_first</name></name>  <operator pos:start="207:33" pos:end="207:33">=</operator> <operator pos:start="207:35" pos:end="207:35">(</operator><operator pos:start="207:36" pos:end="207:36">(</operator><name pos:start="207:37" pos:end="207:40">mode</name> <operator pos:start="207:42" pos:end="207:42">&amp;</operator> <name pos:start="207:44" pos:end="207:74">MPP_FRAME_FLAG_FIELD_ORDER_MASK</name><operator pos:start="207:75" pos:end="207:75">)</operator> <operator pos:start="207:77" pos:end="207:78">==</operator> <name pos:start="207:80" pos:end="207:103">MPP_FRAME_FLAG_TOP_FIRST</name><operator pos:start="207:104" pos:end="207:104">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="211:9" pos:end="211:48"><expr pos:start="211:9" pos:end="211:47"><name pos:start="211:9" pos:end="211:17">mppformat</name> <operator pos:start="211:19" pos:end="211:19">=</operator> <call pos:start="211:21" pos:end="211:47"><name pos:start="211:21" pos:end="211:37">mpp_frame_get_fmt</name><argument_list pos:start="211:38" pos:end="211:47">(<argument pos:start="211:39" pos:end="211:46"><expr pos:start="211:39" pos:end="211:46"><name pos:start="211:39" pos:end="211:46">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:53"><expr pos:start="213:9" pos:end="213:52"><name pos:start="213:9" pos:end="213:17">drmformat</name> <operator pos:start="213:19" pos:end="213:19">=</operator> <call pos:start="213:21" pos:end="213:52"><name pos:start="213:21" pos:end="213:41">rkmpp_get_frameformat</name><argument_list pos:start="213:42" pos:end="213:52">(<argument pos:start="213:43" pos:end="213:51"><expr pos:start="213:43" pos:end="213:51"><name pos:start="213:43" pos:end="213:51">mppformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="217:9" pos:end="217:42">// now setup the frame buffer info</comment>

        <expr_stmt pos:start="219:9" pos:end="219:48"><expr pos:start="219:9" pos:end="219:47"><name pos:start="219:9" pos:end="219:14">buffer</name> <operator pos:start="219:16" pos:end="219:16">=</operator> <call pos:start="219:18" pos:end="219:47"><name pos:start="219:18" pos:end="219:37">mpp_frame_get_buffer</name><argument_list pos:start="219:38" pos:end="219:47">(<argument pos:start="219:39" pos:end="219:46"><expr pos:start="219:39" pos:end="219:46"><name pos:start="219:39" pos:end="219:46">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="221:9" pos:end="335:9"><if pos:start="221:9" pos:end="329:9">if <condition pos:start="221:12" pos:end="221:19">(<expr pos:start="221:13" pos:end="221:18"><name pos:start="221:13" pos:end="221:18">buffer</name></expr>)</condition> <block pos:start="221:21" pos:end="329:9">{<block_content pos:start="223:13" pos:end="327:21">

            <expr_stmt pos:start="223:13" pos:end="223:60"><expr pos:start="223:13" pos:end="223:59"><name pos:start="223:13" pos:end="223:16">desc</name> <operator pos:start="223:18" pos:end="223:18">=</operator> <call pos:start="223:20" pos:end="223:59"><name pos:start="223:20" pos:end="223:29">av_mallocz</name><argument_list pos:start="223:30" pos:end="223:59">(<argument pos:start="223:31" pos:end="223:58"><expr pos:start="223:31" pos:end="223:58"><sizeof pos:start="223:31" pos:end="223:58">sizeof<argument_list pos:start="223:37" pos:end="223:58">(<argument pos:start="223:38" pos:end="223:57"><expr pos:start="223:38" pos:end="223:57"><name pos:start="223:38" pos:end="223:57">AVDRMFrameDescriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="231:13"><if pos:start="225:13" pos:end="231:13">if <condition pos:start="225:16" pos:end="225:22">(<expr pos:start="225:17" pos:end="225:21"><operator pos:start="225:17" pos:end="225:17">!</operator><name pos:start="225:18" pos:end="225:21">desc</name></expr>)</condition> <block pos:start="225:24" pos:end="231:13">{<block_content pos:start="227:17" pos:end="229:26">

                <expr_stmt pos:start="227:17" pos:end="227:38"><expr pos:start="227:17" pos:end="227:37"><name pos:start="227:17" pos:end="227:19">ret</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <call pos:start="227:23" pos:end="227:37"><name pos:start="227:23" pos:end="227:29">AVERROR</name><argument_list pos:start="227:30" pos:end="227:37">(<argument pos:start="227:31" pos:end="227:36"><expr pos:start="227:31" pos:end="227:36"><name pos:start="227:31" pos:end="227:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="229:17" pos:end="229:26">goto <name pos:start="229:22" pos:end="229:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="235:13" pos:end="235:33"><expr pos:start="235:13" pos:end="235:32"><name pos:start="235:13" pos:end="235:28"><name pos:start="235:13" pos:end="235:16">desc</name><operator pos:start="235:17" pos:end="235:18">-&gt;</operator><name pos:start="235:19" pos:end="235:28">nb_objects</name></name> <operator pos:start="235:30" pos:end="235:30">=</operator> <literal type="number" pos:start="235:32" pos:end="235:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:60"><expr pos:start="237:13" pos:end="237:59"><name pos:start="237:13" pos:end="237:28"><name pos:start="237:13" pos:end="237:16">desc</name><operator pos:start="237:17" pos:end="237:18">-&gt;</operator><name pos:start="237:19" pos:end="237:25">objects</name><index pos:start="237:26" pos:end="237:28">[<expr pos:start="237:27" pos:end="237:27"><literal type="number" pos:start="237:27" pos:end="237:27">0</literal></expr>]</index></name><operator pos:start="237:29" pos:end="237:29">.</operator><name pos:start="237:30" pos:end="237:31">fd</name> <operator pos:start="237:33" pos:end="237:33">=</operator> <call pos:start="237:35" pos:end="237:59"><name pos:start="237:35" pos:end="237:51">mpp_buffer_get_fd</name><argument_list pos:start="237:52" pos:end="237:59">(<argument pos:start="237:53" pos:end="237:58"><expr pos:start="237:53" pos:end="237:58"><name pos:start="237:53" pos:end="237:58">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:64"><expr pos:start="239:13" pos:end="239:63"><name pos:start="239:13" pos:end="239:28"><name pos:start="239:13" pos:end="239:16">desc</name><operator pos:start="239:17" pos:end="239:18">-&gt;</operator><name pos:start="239:19" pos:end="239:25">objects</name><index pos:start="239:26" pos:end="239:28">[<expr pos:start="239:27" pos:end="239:27"><literal type="number" pos:start="239:27" pos:end="239:27">0</literal></expr>]</index></name><operator pos:start="239:29" pos:end="239:29">.</operator><name pos:start="239:30" pos:end="239:33">size</name> <operator pos:start="239:35" pos:end="239:35">=</operator> <call pos:start="239:37" pos:end="239:63"><name pos:start="239:37" pos:end="239:55">mpp_buffer_get_size</name><argument_list pos:start="239:56" pos:end="239:63">(<argument pos:start="239:57" pos:end="239:62"><expr pos:start="239:57" pos:end="239:62"><name pos:start="239:57" pos:end="239:62">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="243:13" pos:end="243:32"><expr pos:start="243:13" pos:end="243:31"><name pos:start="243:13" pos:end="243:27"><name pos:start="243:13" pos:end="243:16">desc</name><operator pos:start="243:17" pos:end="243:18">-&gt;</operator><name pos:start="243:19" pos:end="243:27">nb_layers</name></name> <operator pos:start="243:29" pos:end="243:29">=</operator> <literal type="number" pos:start="243:31" pos:end="243:31">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:37"><expr pos:start="245:13" pos:end="245:36"><name pos:start="245:13" pos:end="245:17">layer</name> <operator pos:start="245:19" pos:end="245:19">=</operator> <operator pos:start="245:21" pos:end="245:21">&amp;</operator><name pos:start="245:22" pos:end="245:36"><name pos:start="245:22" pos:end="245:25">desc</name><operator pos:start="245:26" pos:end="245:27">-&gt;</operator><name pos:start="245:28" pos:end="245:33">layers</name><index pos:start="245:34" pos:end="245:36">[<expr pos:start="245:35" pos:end="245:35"><literal type="number" pos:start="245:35" pos:end="245:35">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:38"><expr pos:start="247:13" pos:end="247:37"><name pos:start="247:13" pos:end="247:25"><name pos:start="247:13" pos:end="247:17">layer</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:25">format</name></name> <operator pos:start="247:27" pos:end="247:27">=</operator> <name pos:start="247:29" pos:end="247:37">drmformat</name></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:33"><expr pos:start="249:13" pos:end="249:32"><name pos:start="249:13" pos:end="249:28"><name pos:start="249:13" pos:end="249:17">layer</name><operator pos:start="249:18" pos:end="249:19">-&gt;</operator><name pos:start="249:20" pos:end="249:28">nb_planes</name></name> <operator pos:start="249:30" pos:end="249:30">=</operator> <literal type="number" pos:start="249:32" pos:end="249:32">2</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="253:13" pos:end="253:46"><expr pos:start="253:13" pos:end="253:45"><name pos:start="253:13" pos:end="253:28"><name pos:start="253:13" pos:end="253:17">layer</name><operator pos:start="253:18" pos:end="253:19">-&gt;</operator><name pos:start="253:20" pos:end="253:25">planes</name><index pos:start="253:26" pos:end="253:28">[<expr pos:start="253:27" pos:end="253:27"><literal type="number" pos:start="253:27" pos:end="253:27">0</literal></expr>]</index></name><operator pos:start="253:29" pos:end="253:29">.</operator><name pos:start="253:30" pos:end="253:41">object_index</name> <operator pos:start="253:43" pos:end="253:43">=</operator> <literal type="number" pos:start="253:45" pos:end="253:45">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:40"><expr pos:start="255:13" pos:end="255:39"><name pos:start="255:13" pos:end="255:28"><name pos:start="255:13" pos:end="255:17">layer</name><operator pos:start="255:18" pos:end="255:19">-&gt;</operator><name pos:start="255:20" pos:end="255:25">planes</name><index pos:start="255:26" pos:end="255:28">[<expr pos:start="255:27" pos:end="255:27"><literal type="number" pos:start="255:27" pos:end="255:27">0</literal></expr>]</index></name><operator pos:start="255:29" pos:end="255:29">.</operator><name pos:start="255:30" pos:end="255:35">offset</name> <operator pos:start="255:37" pos:end="255:37">=</operator> <literal type="number" pos:start="255:39" pos:end="255:39">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:72"><expr pos:start="257:13" pos:end="257:71"><name pos:start="257:13" pos:end="257:28"><name pos:start="257:13" pos:end="257:17">layer</name><operator pos:start="257:18" pos:end="257:19">-&gt;</operator><name pos:start="257:20" pos:end="257:25">planes</name><index pos:start="257:26" pos:end="257:28">[<expr pos:start="257:27" pos:end="257:27"><literal type="number" pos:start="257:27" pos:end="257:27">0</literal></expr>]</index></name><operator pos:start="257:29" pos:end="257:29">.</operator><name pos:start="257:30" pos:end="257:34">pitch</name> <operator pos:start="257:36" pos:end="257:36">=</operator> <call pos:start="257:38" pos:end="257:71"><name pos:start="257:38" pos:end="257:61">mpp_frame_get_hor_stride</name><argument_list pos:start="257:62" pos:end="257:71">(<argument pos:start="257:63" pos:end="257:70"><expr pos:start="257:63" pos:end="257:70"><name pos:start="257:63" pos:end="257:70">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="261:13" pos:end="261:46"><expr pos:start="261:13" pos:end="261:45"><name pos:start="261:13" pos:end="261:28"><name pos:start="261:13" pos:end="261:17">layer</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:25">planes</name><index pos:start="261:26" pos:end="261:28">[<expr pos:start="261:27" pos:end="261:27"><literal type="number" pos:start="261:27" pos:end="261:27">1</literal></expr>]</index></name><operator pos:start="261:29" pos:end="261:29">.</operator><name pos:start="261:30" pos:end="261:41">object_index</name> <operator pos:start="261:43" pos:end="261:43">=</operator> <literal type="number" pos:start="261:45" pos:end="261:45">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:98"><expr pos:start="263:13" pos:end="263:97"><name pos:start="263:13" pos:end="263:28"><name pos:start="263:13" pos:end="263:17">layer</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:25">planes</name><index pos:start="263:26" pos:end="263:28">[<expr pos:start="263:27" pos:end="263:27"><literal type="number" pos:start="263:27" pos:end="263:27">1</literal></expr>]</index></name><operator pos:start="263:29" pos:end="263:29">.</operator><name pos:start="263:30" pos:end="263:35">offset</name> <operator pos:start="263:37" pos:end="263:37">=</operator> <name pos:start="263:39" pos:end="263:54"><name pos:start="263:39" pos:end="263:43">layer</name><operator pos:start="263:44" pos:end="263:45">-&gt;</operator><name pos:start="263:46" pos:end="263:51">planes</name><index pos:start="263:52" pos:end="263:54">[<expr pos:start="263:53" pos:end="263:53"><literal type="number" pos:start="263:53" pos:end="263:53">0</literal></expr>]</index></name><operator pos:start="263:55" pos:end="263:55">.</operator><name pos:start="263:56" pos:end="263:60">pitch</name> <operator pos:start="263:62" pos:end="263:62">*</operator> <call pos:start="263:64" pos:end="263:97"><name pos:start="263:64" pos:end="263:87">mpp_frame_get_ver_stride</name><argument_list pos:start="263:88" pos:end="263:97">(<argument pos:start="263:89" pos:end="263:96"><expr pos:start="263:89" pos:end="263:96"><name pos:start="263:89" pos:end="263:96">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:60"><expr pos:start="265:13" pos:end="265:59"><name pos:start="265:13" pos:end="265:28"><name pos:start="265:13" pos:end="265:17">layer</name><operator pos:start="265:18" pos:end="265:19">-&gt;</operator><name pos:start="265:20" pos:end="265:25">planes</name><index pos:start="265:26" pos:end="265:28">[<expr pos:start="265:27" pos:end="265:27"><literal type="number" pos:start="265:27" pos:end="265:27">1</literal></expr>]</index></name><operator pos:start="265:29" pos:end="265:29">.</operator><name pos:start="265:30" pos:end="265:34">pitch</name> <operator pos:start="265:36" pos:end="265:36">=</operator> <name pos:start="265:38" pos:end="265:53"><name pos:start="265:38" pos:end="265:42">layer</name><operator pos:start="265:43" pos:end="265:44">-&gt;</operator><name pos:start="265:45" pos:end="265:50">planes</name><index pos:start="265:51" pos:end="265:53">[<expr pos:start="265:52" pos:end="265:52"><literal type="number" pos:start="265:52" pos:end="265:52">0</literal></expr>]</index></name><operator pos:start="265:54" pos:end="265:54">.</operator><name pos:start="265:55" pos:end="265:59">pitch</name></expr>;</expr_stmt>



            <comment type="line" pos:start="269:13" pos:end="269:98">// we also allocate a struct in buf[0] that will allow to hold additionnal information</comment>

            <comment type="line" pos:start="271:13" pos:end="271:60">// for releasing properly MPP frames and decoder</comment>

            <expr_stmt pos:start="273:13" pos:end="273:70"><expr pos:start="273:13" pos:end="273:69"><name pos:start="273:13" pos:end="273:27">framecontextref</name> <operator pos:start="273:29" pos:end="273:29">=</operator> <call pos:start="273:31" pos:end="273:69"><name pos:start="273:31" pos:end="273:46">av_buffer_allocz</name><argument_list pos:start="273:47" pos:end="273:69">(<argument pos:start="273:48" pos:end="273:68"><expr pos:start="273:48" pos:end="273:68"><sizeof pos:start="273:48" pos:end="273:68">sizeof<argument_list pos:start="273:54" pos:end="273:68">(<argument pos:start="273:55" pos:end="273:67"><expr pos:start="273:55" pos:end="273:67"><operator pos:start="273:55" pos:end="273:55">*</operator><name pos:start="273:56" pos:end="273:67">framecontext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="275:13" pos:end="281:13"><if pos:start="275:13" pos:end="281:13">if <condition pos:start="275:16" pos:end="275:33">(<expr pos:start="275:17" pos:end="275:32"><operator pos:start="275:17" pos:end="275:17">!</operator><name pos:start="275:18" pos:end="275:32">framecontextref</name></expr>)</condition> <block pos:start="275:35" pos:end="281:13">{<block_content pos:start="277:17" pos:end="279:26">

                <expr_stmt pos:start="277:17" pos:end="277:38"><expr pos:start="277:17" pos:end="277:37"><name pos:start="277:17" pos:end="277:19">ret</name> <operator pos:start="277:21" pos:end="277:21">=</operator> <call pos:start="277:23" pos:end="277:37"><name pos:start="277:23" pos:end="277:29">AVERROR</name><argument_list pos:start="277:30" pos:end="277:37">(<argument pos:start="277:31" pos:end="277:36"><expr pos:start="277:31" pos:end="277:36"><name pos:start="277:31" pos:end="277:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="279:17" pos:end="279:26">goto <name pos:start="279:22" pos:end="279:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="285:13" pos:end="285:86">// MPP decoder needs to be closed only when all frames have been released.</comment>

            <expr_stmt pos:start="287:13" pos:end="287:70"><expr pos:start="287:13" pos:end="287:69"><name pos:start="287:13" pos:end="287:24">framecontext</name> <operator pos:start="287:26" pos:end="287:26">=</operator> <operator pos:start="287:28" pos:end="287:28">(</operator><name pos:start="287:29" pos:end="287:45">RKMPPFrameContext</name> <operator pos:start="287:47" pos:end="287:47">*</operator><operator pos:start="287:48" pos:end="287:48">)</operator><name pos:start="287:49" pos:end="287:69"><name pos:start="287:49" pos:end="287:63">framecontextref</name><operator pos:start="287:64" pos:end="287:65">-&gt;</operator><name pos:start="287:66" pos:end="287:69">data</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:79"><expr pos:start="289:13" pos:end="289:78"><name pos:start="289:13" pos:end="289:37"><name pos:start="289:13" pos:end="289:24">framecontext</name><operator pos:start="289:25" pos:end="289:26">-&gt;</operator><name pos:start="289:27" pos:end="289:37">decoder_ref</name></name> <operator pos:start="289:39" pos:end="289:39">=</operator> <call pos:start="289:41" pos:end="289:78"><name pos:start="289:41" pos:end="289:53">av_buffer_ref</name><argument_list pos:start="289:54" pos:end="289:78">(<argument pos:start="289:55" pos:end="289:77"><expr pos:start="289:55" pos:end="289:77"><name pos:start="289:55" pos:end="289:77"><name pos:start="289:55" pos:end="289:64">rk_context</name><operator pos:start="289:65" pos:end="289:66">-&gt;</operator><name pos:start="289:67" pos:end="289:77">decoder_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:43"><expr pos:start="291:13" pos:end="291:42"><name pos:start="291:13" pos:end="291:31"><name pos:start="291:13" pos:end="291:24">framecontext</name><operator pos:start="291:25" pos:end="291:26">-&gt;</operator><name pos:start="291:27" pos:end="291:31">frame</name></name> <operator pos:start="291:33" pos:end="291:33">=</operator> <name pos:start="291:35" pos:end="291:42">mppframe</name></expr>;</expr_stmt>



            <expr_stmt pos:start="295:13" pos:end="295:46"><expr pos:start="295:13" pos:end="295:45"><name pos:start="295:13" pos:end="295:26"><name pos:start="295:13" pos:end="295:17">frame</name><operator pos:start="295:18" pos:end="295:19">-&gt;</operator><name pos:start="295:20" pos:end="295:23">data</name><index pos:start="295:24" pos:end="295:26">[<expr pos:start="295:25" pos:end="295:25"><literal type="number" pos:start="295:25" pos:end="295:25">0</literal></expr>]</index></name>  <operator pos:start="295:29" pos:end="295:29">=</operator> <operator pos:start="295:31" pos:end="295:31">(</operator><name pos:start="295:32" pos:end="295:38">uint8_t</name> <operator pos:start="295:40" pos:end="295:40">*</operator><operator pos:start="295:41" pos:end="295:41">)</operator><name pos:start="295:42" pos:end="295:45">desc</name></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="299:89"><expr pos:start="297:13" pos:end="299:88"><name pos:start="297:13" pos:end="297:25"><name pos:start="297:13" pos:end="297:17">frame</name><operator pos:start="297:18" pos:end="297:19">-&gt;</operator><name pos:start="297:20" pos:end="297:22">buf</name><index pos:start="297:23" pos:end="297:25">[<expr pos:start="297:24" pos:end="297:24"><literal type="number" pos:start="297:24" pos:end="297:24">0</literal></expr>]</index></name>   <operator pos:start="297:29" pos:end="297:29">=</operator> <call pos:start="297:31" pos:end="299:88"><name pos:start="297:31" pos:end="297:46">av_buffer_create</name><argument_list pos:start="297:47" pos:end="299:88">(<argument pos:start="297:48" pos:end="297:62"><expr pos:start="297:48" pos:end="297:62"><operator pos:start="297:48" pos:end="297:48">(</operator><name pos:start="297:49" pos:end="297:55">uint8_t</name> <operator pos:start="297:57" pos:end="297:57">*</operator><operator pos:start="297:58" pos:end="297:58">)</operator><name pos:start="297:59" pos:end="297:62">desc</name></expr></argument>, <argument pos:start="297:65" pos:end="297:77"><expr pos:start="297:65" pos:end="297:77"><sizeof pos:start="297:65" pos:end="297:77">sizeof<argument_list pos:start="297:71" pos:end="297:77">(<argument pos:start="297:72" pos:end="297:76"><expr pos:start="297:72" pos:end="297:76"><operator pos:start="297:72" pos:end="297:72">*</operator><name pos:start="297:73" pos:end="297:76">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="297:80" pos:end="297:98"><expr pos:start="297:80" pos:end="297:98"><name pos:start="297:80" pos:end="297:98">rkmpp_release_frame</name></expr></argument>,

                                               <argument pos:start="299:48" pos:end="299:62"><expr pos:start="299:48" pos:end="299:62"><name pos:start="299:48" pos:end="299:62">framecontextref</name></expr></argument>, <argument pos:start="299:65" pos:end="299:87"><expr pos:start="299:65" pos:end="299:87"><name pos:start="299:65" pos:end="299:87">AV_BUFFER_FLAG_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="303:13" pos:end="309:13"><if pos:start="303:13" pos:end="309:13">if <condition pos:start="303:16" pos:end="303:31">(<expr pos:start="303:17" pos:end="303:30"><operator pos:start="303:17" pos:end="303:17">!</operator><name pos:start="303:18" pos:end="303:30"><name pos:start="303:18" pos:end="303:22">frame</name><operator pos:start="303:23" pos:end="303:24">-&gt;</operator><name pos:start="303:25" pos:end="303:27">buf</name><index pos:start="303:28" pos:end="303:30">[<expr pos:start="303:29" pos:end="303:29"><literal type="number" pos:start="303:29" pos:end="303:29">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="303:33" pos:end="309:13">{<block_content pos:start="305:17" pos:end="307:26">

                <expr_stmt pos:start="305:17" pos:end="305:38"><expr pos:start="305:17" pos:end="305:37"><name pos:start="305:17" pos:end="305:19">ret</name> <operator pos:start="305:21" pos:end="305:21">=</operator> <call pos:start="305:23" pos:end="305:37"><name pos:start="305:23" pos:end="305:29">AVERROR</name><argument_list pos:start="305:30" pos:end="305:37">(<argument pos:start="305:31" pos:end="305:36"><expr pos:start="305:31" pos:end="305:36"><name pos:start="305:31" pos:end="305:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="307:17" pos:end="307:26">goto <name pos:start="307:22" pos:end="307:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="313:13" pos:end="313:70"><expr pos:start="313:13" pos:end="313:69"><name pos:start="313:13" pos:end="313:32"><name pos:start="313:13" pos:end="313:17">frame</name><operator pos:start="313:18" pos:end="313:19">-&gt;</operator><name pos:start="313:20" pos:end="313:32">hw_frames_ctx</name></name> <operator pos:start="313:34" pos:end="313:34">=</operator> <call pos:start="313:36" pos:end="313:69"><name pos:start="313:36" pos:end="313:48">av_buffer_ref</name><argument_list pos:start="313:49" pos:end="313:69">(<argument pos:start="313:50" pos:end="313:68"><expr pos:start="313:50" pos:end="313:68"><name pos:start="313:50" pos:end="313:68"><name pos:start="313:50" pos:end="313:56">decoder</name><operator pos:start="313:57" pos:end="313:58">-&gt;</operator><name pos:start="313:59" pos:end="313:68">frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="315:13" pos:end="321:13"><if pos:start="315:13" pos:end="321:13">if <condition pos:start="315:16" pos:end="315:38">(<expr pos:start="315:17" pos:end="315:37"><operator pos:start="315:17" pos:end="315:17">!</operator><name pos:start="315:18" pos:end="315:37"><name pos:start="315:18" pos:end="315:22">frame</name><operator pos:start="315:23" pos:end="315:24">-&gt;</operator><name pos:start="315:25" pos:end="315:37">hw_frames_ctx</name></name></expr>)</condition> <block pos:start="315:40" pos:end="321:13">{<block_content pos:start="317:17" pos:end="319:26">

                <expr_stmt pos:start="317:17" pos:end="317:38"><expr pos:start="317:17" pos:end="317:37"><name pos:start="317:17" pos:end="317:19">ret</name> <operator pos:start="317:21" pos:end="317:21">=</operator> <call pos:start="317:23" pos:end="317:37"><name pos:start="317:23" pos:end="317:29">AVERROR</name><argument_list pos:start="317:30" pos:end="317:37">(<argument pos:start="317:31" pos:end="317:36"><expr pos:start="317:31" pos:end="317:36"><name pos:start="317:31" pos:end="317:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="319:17" pos:end="319:26">goto <name pos:start="319:22" pos:end="319:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="325:13" pos:end="325:37"><expr pos:start="325:13" pos:end="325:36"><name pos:start="325:13" pos:end="325:32"><name pos:start="325:13" pos:end="325:19">decoder</name><operator pos:start="325:20" pos:end="325:21">-&gt;</operator><name pos:start="325:22" pos:end="325:32">first_frame</name></name> <operator pos:start="325:34" pos:end="325:34">=</operator> <literal type="number" pos:start="325:36" pos:end="325:36">0</literal></expr>;</expr_stmt>

            <return pos:start="327:13" pos:end="327:21">return <expr pos:start="327:20" pos:end="327:20"><literal type="number" pos:start="327:20" pos:end="327:20">0</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="329:11" pos:end="335:9">else <block pos:start="329:16" pos:end="335:9">{<block_content pos:start="331:13" pos:end="333:40">

            <expr_stmt pos:start="331:13" pos:end="331:116"><expr pos:start="331:13" pos:end="331:115"><call pos:start="331:13" pos:end="331:115"><name pos:start="331:13" pos:end="331:18">av_log</name><argument_list pos:start="331:19" pos:end="331:115">(<argument pos:start="331:20" pos:end="331:24"><expr pos:start="331:20" pos:end="331:24"><name pos:start="331:20" pos:end="331:24">avctx</name></expr></argument>, <argument pos:start="331:27" pos:end="331:38"><expr pos:start="331:27" pos:end="331:38"><name pos:start="331:27" pos:end="331:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="331:41" pos:end="331:109"><expr pos:start="331:41" pos:end="331:109"><literal type="string" pos:start="331:41" pos:end="331:109">"Failed to retrieve the frame buffer, frame is dropped (code = %d)\n"</literal></expr></argument>, <argument pos:start="331:112" pos:end="331:114"><expr pos:start="331:112" pos:end="331:114"><name pos:start="331:112" pos:end="331:114">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:40"><expr pos:start="333:13" pos:end="333:39"><call pos:start="333:13" pos:end="333:39"><name pos:start="333:13" pos:end="333:28">mpp_frame_deinit</name><argument_list pos:start="333:29" pos:end="333:39">(<argument pos:start="333:30" pos:end="333:38"><expr pos:start="333:30" pos:end="333:38"><operator pos:start="333:30" pos:end="333:30">&amp;</operator><name pos:start="333:31" pos:end="333:38">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="337:7" pos:end="341:5">else if <condition pos:start="337:15" pos:end="337:36">(<expr pos:start="337:16" pos:end="337:35"><name pos:start="337:16" pos:end="337:35"><name pos:start="337:16" pos:end="337:22">decoder</name><operator pos:start="337:23" pos:end="337:24">-&gt;</operator><name pos:start="337:25" pos:end="337:35">eos_reached</name></name></expr>)</condition> <block pos:start="337:38" pos:end="341:5">{<block_content pos:start="339:9" pos:end="339:27">

        <return pos:start="339:9" pos:end="339:27">return <expr pos:start="339:16" pos:end="339:26"><name pos:start="339:16" pos:end="339:26">AVERROR_EOF</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="341:7" pos:end="345:5">else if <condition pos:start="341:15" pos:end="341:38">(<expr pos:start="341:16" pos:end="341:37"><name pos:start="341:16" pos:end="341:18">ret</name> <operator pos:start="341:20" pos:end="341:21">==</operator> <name pos:start="341:23" pos:end="341:37">MPP_ERR_TIMEOUT</name></expr>)</condition> <block pos:start="341:40" pos:end="345:5">{<block_content pos:start="343:9" pos:end="343:85">

        <expr_stmt pos:start="343:9" pos:end="343:85"><expr pos:start="343:9" pos:end="343:84"><call pos:start="343:9" pos:end="343:84"><name pos:start="343:9" pos:end="343:14">av_log</name><argument_list pos:start="343:15" pos:end="343:84">(<argument pos:start="343:16" pos:end="343:20"><expr pos:start="343:16" pos:end="343:20"><name pos:start="343:16" pos:end="343:20">avctx</name></expr></argument>, <argument pos:start="343:23" pos:end="343:34"><expr pos:start="343:23" pos:end="343:34"><name pos:start="343:23" pos:end="343:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="343:37" pos:end="343:83"><expr pos:start="343:37" pos:end="343:83"><literal type="string" pos:start="343:37" pos:end="343:83">"Timeout when trying to get a frame from MPP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="349:5" pos:end="349:27">return <expr pos:start="349:12" pos:end="349:26"><call pos:start="349:12" pos:end="349:26"><name pos:start="349:12" pos:end="349:18">AVERROR</name><argument_list pos:start="349:19" pos:end="349:26">(<argument pos:start="349:20" pos:end="349:25"><expr pos:start="349:20" pos:end="349:25"><name pos:start="349:20" pos:end="349:25">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>



<label pos:start="353:1" pos:end="353:5"><name pos:start="353:1" pos:end="353:4">fail</name>:</label>

    <if_stmt pos:start="355:5" pos:end="357:36"><if pos:start="355:5" pos:end="357:36">if <condition pos:start="355:8" pos:end="355:17">(<expr pos:start="355:9" pos:end="355:16"><name pos:start="355:9" pos:end="355:16">mppframe</name></expr>)</condition><block type="pseudo" pos:start="357:9" pos:end="357:36"><block_content pos:start="357:9" pos:end="357:36">

        <expr_stmt pos:start="357:9" pos:end="357:36"><expr pos:start="357:9" pos:end="357:35"><call pos:start="357:9" pos:end="357:35"><name pos:start="357:9" pos:end="357:24">mpp_frame_deinit</name><argument_list pos:start="357:25" pos:end="357:35">(<argument pos:start="357:26" pos:end="357:34"><expr pos:start="357:26" pos:end="357:34"><operator pos:start="357:26" pos:end="357:26">&amp;</operator><name pos:start="357:27" pos:end="357:34">mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="361:5" pos:end="363:52"><if pos:start="361:5" pos:end="363:52">if <condition pos:start="361:8" pos:end="361:21">(<expr pos:start="361:9" pos:end="361:20"><name pos:start="361:9" pos:end="361:20">framecontext</name></expr>)</condition><block type="pseudo" pos:start="363:9" pos:end="363:52"><block_content pos:start="363:9" pos:end="363:52">

        <expr_stmt pos:start="363:9" pos:end="363:52"><expr pos:start="363:9" pos:end="363:51"><call pos:start="363:9" pos:end="363:51"><name pos:start="363:9" pos:end="363:23">av_buffer_unref</name><argument_list pos:start="363:24" pos:end="363:51">(<argument pos:start="363:25" pos:end="363:50"><expr pos:start="363:25" pos:end="363:50"><operator pos:start="363:25" pos:end="363:25">&amp;</operator><name pos:start="363:26" pos:end="363:50"><name pos:start="363:26" pos:end="363:37">framecontext</name><operator pos:start="363:38" pos:end="363:39">-&gt;</operator><name pos:start="363:40" pos:end="363:50">decoder_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="367:5" pos:end="369:42"><if pos:start="367:5" pos:end="369:42">if <condition pos:start="367:8" pos:end="367:24">(<expr pos:start="367:9" pos:end="367:23"><name pos:start="367:9" pos:end="367:23">framecontextref</name></expr>)</condition><block type="pseudo" pos:start="369:9" pos:end="369:42"><block_content pos:start="369:9" pos:end="369:42">

        <expr_stmt pos:start="369:9" pos:end="369:42"><expr pos:start="369:9" pos:end="369:41"><call pos:start="369:9" pos:end="369:41"><name pos:start="369:9" pos:end="369:23">av_buffer_unref</name><argument_list pos:start="369:24" pos:end="369:41">(<argument pos:start="369:25" pos:end="369:40"><expr pos:start="369:25" pos:end="369:40"><operator pos:start="369:25" pos:end="369:25">&amp;</operator><name pos:start="369:26" pos:end="369:40">framecontextref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="373:5" pos:end="375:22"><if pos:start="373:5" pos:end="375:22">if <condition pos:start="373:8" pos:end="373:13">(<expr pos:start="373:9" pos:end="373:12"><name pos:start="373:9" pos:end="373:12">desc</name></expr>)</condition><block type="pseudo" pos:start="375:9" pos:end="375:22"><block_content pos:start="375:9" pos:end="375:22">

        <expr_stmt pos:start="375:9" pos:end="375:22"><expr pos:start="375:9" pos:end="375:21"><call pos:start="375:9" pos:end="375:21"><name pos:start="375:9" pos:end="375:15">av_free</name><argument_list pos:start="375:16" pos:end="375:21">(<argument pos:start="375:17" pos:end="375:20"><expr pos:start="375:17" pos:end="375:20"><name pos:start="375:17" pos:end="375:20">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="379:5" pos:end="379:15">return <expr pos:start="379:12" pos:end="379:14"><name pos:start="379:12" pos:end="379:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
