<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10302.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">bt_hid_interrupt_sdu</name><parameter_list pos:start="1:33" pos:end="1:76">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:66"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:60">uint8_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">data</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:75"><decl pos:start="1:69" pos:end="1:75"><type pos:start="1:69" pos:end="1:75"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:75">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:30">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:26">bt_hid_device_s</name></name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:31">hid</name> <init pos:start="5:33" pos:end="5:40">= <expr pos:start="5:35" pos:end="5:40"><name pos:start="5:35" pos:end="5:40">opaque</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:17"><if pos:start="9:5" pos:end="11:17">if <condition pos:start="9:8" pos:end="9:36">(<expr pos:start="9:9" pos:end="9:35"><name pos:start="9:9" pos:end="9:11">len</name> <operator pos:start="9:13" pos:end="9:13">&gt;</operator> <name pos:start="9:15" pos:end="9:24">BT_HID_MTU</name> <operator pos:start="9:26" pos:end="9:27">||</operator> <name pos:start="9:29" pos:end="9:31">len</name> <operator pos:start="9:33" pos:end="9:33">&lt;</operator> <literal type="number" pos:start="9:35" pos:end="9:35">1</literal></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:17"><block_content pos:start="11:9" pos:end="11:17">

        <goto pos:start="11:9" pos:end="11:17">goto <name pos:start="11:14" pos:end="11:16">bad</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:40">(<expr pos:start="13:9" pos:end="13:39"><operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:16"><name pos:start="13:10" pos:end="13:13">data</name><index pos:start="13:14" pos:end="13:16">[<expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr>]</index></name> <operator pos:start="13:18" pos:end="13:18">&amp;</operator> <literal type="number" pos:start="13:20" pos:end="13:20">3</literal><operator pos:start="13:21" pos:end="13:21">)</operator> <operator pos:start="13:23" pos:end="13:24">!=</operator> <name pos:start="13:26" pos:end="13:39">BT_DATA_OUTPUT</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <goto pos:start="15:9" pos:end="15:17">goto <name pos:start="15:14" pos:end="15:16">bad</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="37:17"><if pos:start="17:5" pos:end="29:5">if <condition pos:start="17:8" pos:end="17:34">(<expr pos:start="17:9" pos:end="17:33"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:16"><name pos:start="17:10" pos:end="17:13">data</name><index pos:start="17:14" pos:end="17:16">[<expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr>]</index></name> <operator pos:start="17:18" pos:end="17:19">&gt;&gt;</operator> <literal type="number" pos:start="17:21" pos:end="17:21">4</literal><operator pos:start="17:22" pos:end="17:22">)</operator> <operator pos:start="17:24" pos:end="17:25">==</operator> <name pos:start="17:27" pos:end="17:33">BT_DATA</name></expr>)</condition> <block pos:start="17:36" pos:end="29:5">{<block_content pos:start="19:9" pos:end="27:33">

        <if_stmt pos:start="19:9" pos:end="21:21"><if pos:start="19:9" pos:end="21:21">if <condition pos:start="19:12" pos:end="19:28">(<expr pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:15">hid</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:27">intr_state</name></name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:21"><block_content pos:start="21:13" pos:end="21:21">

            <goto pos:start="21:13" pos:end="21:21">goto <name pos:start="21:18" pos:end="21:20">bad</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:40"><expr pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:11">hid</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:22">data_type</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <name pos:start="25:26" pos:end="25:39">BT_DATA_OUTPUT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:11">hid</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:24">intrdataout</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:28">len</name></name> <operator pos:start="27:30" pos:end="27:30">=</operator> <literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="35:5">else if <condition pos:start="29:15" pos:end="29:41">(<expr pos:start="29:16" pos:end="29:40"><operator pos:start="29:16" pos:end="29:16">(</operator><name pos:start="29:17" pos:end="29:23"><name pos:start="29:17" pos:end="29:20">data</name><index pos:start="29:21" pos:end="29:23">[<expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr>]</index></name> <operator pos:start="29:25" pos:end="29:26">&gt;&gt;</operator> <literal type="number" pos:start="29:28" pos:end="29:28">4</literal><operator pos:start="29:29" pos:end="29:29">)</operator> <operator pos:start="29:31" pos:end="29:32">==</operator> <name pos:start="29:34" pos:end="29:40">BT_DATC</name></expr>)</condition> <block pos:start="29:43" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:21">

        <if_stmt pos:start="31:9" pos:end="33:21"><if pos:start="31:9" pos:end="33:21">if <condition pos:start="31:12" pos:end="31:29">(<expr pos:start="31:13" pos:end="31:28"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:28"><name pos:start="31:14" pos:end="31:16">hid</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:28">intr_state</name></name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:21"><block_content pos:start="33:13" pos:end="33:21">

            <goto pos:start="33:13" pos:end="33:21">goto <name pos:start="33:18" pos:end="33:20">bad</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="37:17">else<block type="pseudo" pos:start="37:9" pos:end="37:17"><block_content pos:start="37:9" pos:end="37:17">

        <goto pos:start="37:9" pos:end="37:17">goto <name pos:start="37:14" pos:end="37:16">bad</name>;</goto></block_content></block></else></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:78"><expr pos:start="41:5" pos:end="41:77"><call pos:start="41:5" pos:end="41:77"><name pos:start="41:5" pos:end="41:10">memcpy</name><argument_list pos:start="41:11" pos:end="41:77">(<argument pos:start="41:12" pos:end="41:57"><expr pos:start="41:12" pos:end="41:57"><name pos:start="41:12" pos:end="41:34"><name pos:start="41:12" pos:end="41:14">hid</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:27">intrdataout</name><operator pos:start="41:28" pos:end="41:28">.</operator><name pos:start="41:29" pos:end="41:34">buffer</name></name> <operator pos:start="41:36" pos:end="41:36">+</operator> <name pos:start="41:38" pos:end="41:57"><name pos:start="41:38" pos:end="41:40">hid</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:53">intrdataout</name><operator pos:start="41:54" pos:end="41:54">.</operator><name pos:start="41:55" pos:end="41:57">len</name></name></expr></argument>, <argument pos:start="41:60" pos:end="41:67"><expr pos:start="41:60" pos:end="41:67"><name pos:start="41:60" pos:end="41:63">data</name> <operator pos:start="41:65" pos:end="41:65">+</operator> <literal type="number" pos:start="41:67" pos:end="41:67">1</literal></expr></argument>, <argument pos:start="41:70" pos:end="41:76"><expr pos:start="41:70" pos:end="41:76"><name pos:start="41:70" pos:end="41:72">len</name> <operator pos:start="41:74" pos:end="41:74">-</operator> <literal type="number" pos:start="41:76" pos:end="41:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:36"><expr pos:start="43:5" pos:end="43:35"><name pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:7">hid</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:20">intrdataout</name><operator pos:start="43:21" pos:end="43:21">.</operator><name pos:start="43:22" pos:end="43:24">len</name></name> <operator pos:start="43:26" pos:end="43:27">+=</operator> <name pos:start="43:29" pos:end="43:31">len</name> <operator pos:start="43:33" pos:end="43:33">-</operator> <literal type="number" pos:start="43:35" pos:end="43:35">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:7">hid</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:19">intr_state</name></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <operator pos:start="45:23" pos:end="45:23">(</operator><name pos:start="45:24" pos:end="45:26">len</name> <operator pos:start="45:28" pos:end="45:29">==</operator> <name pos:start="45:31" pos:end="45:40">BT_HID_MTU</name><operator pos:start="45:41" pos:end="45:41">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:25">(<expr pos:start="47:9" pos:end="47:24"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:24"><name pos:start="47:10" pos:end="47:12">hid</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:24">intr_state</name></name></expr>)</condition> <block pos:start="47:27" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:24">

        <expr_stmt pos:start="49:9" pos:end="51:65"><expr pos:start="49:9" pos:end="51:64"><call pos:start="49:9" pos:end="51:64"><name pos:start="49:9" pos:end="49:14">memcpy</name><argument_list pos:start="49:15" pos:end="51:64">(<argument pos:start="49:16" pos:end="49:34"><expr pos:start="49:16" pos:end="49:34"><name pos:start="49:16" pos:end="49:34"><name pos:start="49:16" pos:end="49:18">hid</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:27">dataout</name><operator pos:start="49:28" pos:end="49:28">.</operator><name pos:start="49:29" pos:end="49:34">buffer</name></name></expr></argument>, <argument pos:start="49:37" pos:end="49:59"><expr pos:start="49:37" pos:end="49:59"><name pos:start="49:37" pos:end="49:59"><name pos:start="49:37" pos:end="49:39">hid</name><operator pos:start="49:40" pos:end="49:41">-&gt;</operator><name pos:start="49:42" pos:end="49:52">intrdataout</name><operator pos:start="49:53" pos:end="49:53">.</operator><name pos:start="49:54" pos:end="49:59">buffer</name></name></expr></argument>,

                        <argument pos:start="51:25" pos:end="51:63"><expr pos:start="51:25" pos:end="51:63"><name pos:start="51:25" pos:end="51:40"><name pos:start="51:25" pos:end="51:27">hid</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:36">dataout</name><operator pos:start="51:37" pos:end="51:37">.</operator><name pos:start="51:38" pos:end="51:40">len</name></name> <operator pos:start="51:42" pos:end="51:42">=</operator> <name pos:start="51:44" pos:end="51:63"><name pos:start="51:44" pos:end="51:46">hid</name><operator pos:start="51:47" pos:end="51:48">-&gt;</operator><name pos:start="51:49" pos:end="51:59">intrdataout</name><operator pos:start="51:60" pos:end="51:60">.</operator><name pos:start="51:61" pos:end="51:63">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:24"><expr pos:start="53:9" pos:end="53:23"><call pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:18">bt_hid_out</name><argument_list pos:start="53:19" pos:end="53:23">(<argument pos:start="53:20" pos:end="53:22"><expr pos:start="53:20" pos:end="53:22"><name pos:start="53:20" pos:end="53:22">hid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="59:5" pos:end="59:11">return;</return>

<label pos:start="61:1" pos:end="61:4"><name pos:start="61:1" pos:end="61:3">bad</name>:</label>

    <expr_stmt pos:start="63:5" pos:end="65:30"><expr pos:start="63:5" pos:end="65:29"><call pos:start="63:5" pos:end="65:29"><name pos:start="63:5" pos:end="63:11">fprintf</name><argument_list pos:start="63:12" pos:end="65:29">(<argument pos:start="63:13" pos:end="63:18"><expr pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:18">stderr</name></expr></argument>, <argument pos:start="63:21" pos:end="63:65"><expr pos:start="63:21" pos:end="63:65"><literal type="string" pos:start="63:21" pos:end="63:65">"%s: bad transaction on Interrupt channel.\n"</literal></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:28"><expr pos:start="65:21" pos:end="65:28"><name pos:start="65:21" pos:end="65:28">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
