<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18978.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">qemu_rdma_exchange_send</name><parameter_list pos:start="1:35" pos:end="7:70">(<parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:52"><name pos:start="1:36" pos:end="1:46">RDMAContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">rdma</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:77"><decl pos:start="1:55" pos:end="1:77"><type pos:start="1:55" pos:end="1:77"><name pos:start="1:55" pos:end="1:71">RDMAControlHeader</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:77">head</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:48"><decl pos:start="3:36" pos:end="3:48"><type pos:start="3:36" pos:end="3:48"><name pos:start="3:36" pos:end="3:42">uint8_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:48">data</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:73"><decl pos:start="3:51" pos:end="3:73"><type pos:start="3:51" pos:end="3:73"><name pos:start="3:51" pos:end="3:67">RDMAControlHeader</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:73">resp</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:48"><decl pos:start="5:36" pos:end="5:48"><type pos:start="5:36" pos:end="5:48"><name pos:start="5:36" pos:end="5:38">int</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:48">resp_idx</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:69"><function_decl pos:start="7:36" pos:end="7:69"><type pos:start="7:36" pos:end="7:38"><name pos:start="7:36" pos:end="7:38">int</name></type> (<modifier pos:start="7:41" pos:end="7:41">*</modifier><name pos:start="7:42" pos:end="7:49">callback</name>)<parameter_list pos:start="7:51" pos:end="7:69">(<parameter pos:start="7:52" pos:end="7:68"><decl pos:start="7:52" pos:end="7:68"><type pos:start="7:52" pos:end="7:64"><name pos:start="7:52" pos:end="7:62">RDMAContext</name> <modifier pos:start="7:64" pos:end="7:64">*</modifier></type><name pos:start="7:65" pos:end="7:68">rdma</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="163:1">{<block_content pos:start="11:5" pos:end="161:13">

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="21:7">/*

     * Wait until the dest is ready before attempting to deliver the message

     * by waiting for a READY message.

     */</comment>

    <if_stmt pos:start="23:5" pos:end="37:5"><if pos:start="23:5" pos:end="37:5">if <condition pos:start="23:8" pos:end="23:37">(<expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:12">rdma</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:36">control_ready_expected</name></name></expr>)</condition> <block pos:start="23:39" pos:end="37:5">{<block_content pos:start="25:9" pos:end="35:9">

        <decl_stmt pos:start="25:9" pos:end="25:31"><decl pos:start="25:9" pos:end="25:30"><type pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:25">RDMAControlHeader</name></type> <name pos:start="25:27" pos:end="25:30">resp</name></decl>;</decl_stmt>

        <expr_stmt pos:start="27:9" pos:end="29:80"><expr pos:start="27:9" pos:end="29:79"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="29:79"><name pos:start="27:15" pos:end="27:45">qemu_rdma_exchange_get_response</name><argument_list pos:start="27:46" pos:end="29:79">(<argument pos:start="27:47" pos:end="27:50"><expr pos:start="27:47" pos:end="27:50"><name pos:start="27:47" pos:end="27:50">rdma</name></expr></argument>,

                                    <argument pos:start="29:37" pos:end="29:41"><expr pos:start="29:37" pos:end="29:41"><operator pos:start="29:37" pos:end="29:37">&amp;</operator><name pos:start="29:38" pos:end="29:41">resp</name></expr></argument>, <argument pos:start="29:44" pos:end="29:61"><expr pos:start="29:44" pos:end="29:61"><name pos:start="29:44" pos:end="29:61">RDMA_CONTROL_READY</name></expr></argument>, <argument pos:start="29:64" pos:end="29:78"><expr pos:start="29:64" pos:end="29:78"><name pos:start="29:64" pos:end="29:78">RDMA_WRID_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:20">(<expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">&lt;</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>)</condition> <block pos:start="31:22" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:23">

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="45:7">/*

     * If the user is expecting a response, post a WR in anticipation of it.

     */</comment>

    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="61:5">if <condition pos:start="47:8" pos:end="47:13">(<expr pos:start="47:9" pos:end="47:12"><name pos:start="47:9" pos:end="47:12">resp</name></expr>)</condition> <block pos:start="47:15" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:9">

        <expr_stmt pos:start="49:9" pos:end="49:64"><expr pos:start="49:9" pos:end="49:63"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:63"><name pos:start="49:15" pos:end="49:41">qemu_rdma_post_recv_control</name><argument_list pos:start="49:42" pos:end="49:63">(<argument pos:start="49:43" pos:end="49:46"><expr pos:start="49:43" pos:end="49:46"><name pos:start="49:43" pos:end="49:46">rdma</name></expr></argument>, <argument pos:start="49:49" pos:end="49:62"><expr pos:start="49:49" pos:end="49:62"><name pos:start="49:49" pos:end="49:62">RDMA_WRID_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:16">(<expr pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">ret</name></expr>)</condition> <block pos:start="51:18" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:23">

            <expr_stmt pos:start="53:13" pos:end="55:67"><expr pos:start="53:13" pos:end="55:66"><call pos:start="53:13" pos:end="55:66"><name pos:start="53:13" pos:end="53:24">error_report</name><argument_list pos:start="53:25" pos:end="55:66">(<argument pos:start="53:26" pos:end="55:65"><expr pos:start="53:26" pos:end="55:65"><literal type="string" pos:start="53:26" pos:end="53:56">"rdma migration: error posting"</literal>

                    <literal type="string" pos:start="55:21" pos:end="55:65">" extra control recv for anticipated result!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:23">return <expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="69:7">/*

     * Post a WR to replace the one we just consumed for the READY message.

     */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:61"><expr pos:start="71:5" pos:end="71:60"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:60"><name pos:start="71:11" pos:end="71:37">qemu_rdma_post_recv_control</name><argument_list pos:start="71:38" pos:end="71:60">(<argument pos:start="71:39" pos:end="71:42"><expr pos:start="71:39" pos:end="71:42"><name pos:start="71:39" pos:end="71:42">rdma</name></expr></argument>, <argument pos:start="71:45" pos:end="71:59"><expr pos:start="71:45" pos:end="71:59"><name pos:start="71:45" pos:end="71:59">RDMA_WRID_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:12">(<expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">ret</name></expr>)</condition> <block pos:start="73:14" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:19">

        <expr_stmt pos:start="75:9" pos:end="75:74"><expr pos:start="75:9" pos:end="75:73"><call pos:start="75:9" pos:end="75:73"><name pos:start="75:9" pos:end="75:20">error_report</name><argument_list pos:start="75:21" pos:end="75:73">(<argument pos:start="75:22" pos:end="75:72"><expr pos:start="75:22" pos:end="75:72"><literal type="string" pos:start="75:22" pos:end="75:72">"rdma migration: error posting first control recv!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:19">return <expr pos:start="77:16" pos:end="77:18"><name pos:start="77:16" pos:end="77:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="87:7">/*

     * Deliver the control message that was requested.

     */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:56"><expr pos:start="89:5" pos:end="89:55"><name pos:start="89:5" pos:end="89:7">ret</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:55"><name pos:start="89:11" pos:end="89:37">qemu_rdma_post_send_control</name><argument_list pos:start="89:38" pos:end="89:55">(<argument pos:start="89:39" pos:end="89:42"><expr pos:start="89:39" pos:end="89:42"><name pos:start="89:39" pos:end="89:42">rdma</name></expr></argument>, <argument pos:start="89:45" pos:end="89:48"><expr pos:start="89:45" pos:end="89:48"><name pos:start="89:45" pos:end="89:48">data</name></expr></argument>, <argument pos:start="89:51" pos:end="89:54"><expr pos:start="89:51" pos:end="89:54"><name pos:start="89:51" pos:end="89:54">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:16">(<expr pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">&lt;</operator> <literal type="number" pos:start="93:15" pos:end="93:15">0</literal></expr>)</condition> <block pos:start="93:18" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:19">

        <expr_stmt pos:start="95:9" pos:end="95:55"><expr pos:start="95:9" pos:end="95:54"><call pos:start="95:9" pos:end="95:54"><name pos:start="95:9" pos:end="95:20">error_report</name><argument_list pos:start="95:21" pos:end="95:54">(<argument pos:start="95:22" pos:end="95:53"><expr pos:start="95:22" pos:end="95:53"><literal type="string" pos:start="95:22" pos:end="95:53">"Failed to send control buffer!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:19">return <expr pos:start="97:16" pos:end="97:18"><name pos:start="97:16" pos:end="97:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="107:7">/*

     * If we're expecting a response, block and wait for it.

     */</comment>

    <if_stmt pos:start="109:5" pos:end="153:5"><if pos:start="109:5" pos:end="153:5">if <condition pos:start="109:8" pos:end="109:13">(<expr pos:start="109:9" pos:end="109:12"><name pos:start="109:9" pos:end="109:12">resp</name></expr>)</condition> <block pos:start="109:15" pos:end="153:5">{<block_content pos:start="111:9" pos:end="151:73">

        <if_stmt pos:start="111:9" pos:end="123:9"><if pos:start="111:9" pos:end="123:9">if <condition pos:start="111:12" pos:end="111:21">(<expr pos:start="111:13" pos:end="111:20"><name pos:start="111:13" pos:end="111:20">callback</name></expr>)</condition> <block pos:start="111:23" pos:end="123:9">{<block_content pos:start="113:13" pos:end="121:13">

            <expr_stmt pos:start="113:13" pos:end="113:59"><expr pos:start="113:13" pos:end="113:58"><call pos:start="113:13" pos:end="113:58"><name pos:start="113:13" pos:end="113:56">trace_qemu_rdma_exchange_send_issue_callback</name><argument_list pos:start="113:57" pos:end="113:58">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:33"><expr pos:start="115:13" pos:end="115:32"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="115:32"><name pos:start="115:19" pos:end="115:26">callback</name><argument_list pos:start="115:27" pos:end="115:32">(<argument pos:start="115:28" pos:end="115:31"><expr pos:start="115:28" pos:end="115:31"><name pos:start="115:28" pos:end="115:31">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="121:13"><if pos:start="117:13" pos:end="121:13">if <condition pos:start="117:16" pos:end="117:24">(<expr pos:start="117:17" pos:end="117:23"><name pos:start="117:17" pos:end="117:19">ret</name> <operator pos:start="117:21" pos:end="117:21">&lt;</operator> <literal type="number" pos:start="117:23" pos:end="117:23">0</literal></expr>)</condition> <block pos:start="117:26" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:27">

                <return pos:start="119:17" pos:end="119:27">return <expr pos:start="119:24" pos:end="119:26"><name pos:start="119:24" pos:end="119:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:72"><expr pos:start="127:9" pos:end="127:71"><call pos:start="127:9" pos:end="127:71"><name pos:start="127:9" pos:end="127:45">trace_qemu_rdma_exchange_send_waiting</name><argument_list pos:start="127:46" pos:end="127:71">(<argument pos:start="127:47" pos:end="127:70"><expr pos:start="127:47" pos:end="127:70"><name pos:start="127:47" pos:end="127:70"><name pos:start="127:47" pos:end="127:58">control_desc</name><index pos:start="127:59" pos:end="127:70">[<expr pos:start="127:60" pos:end="127:69"><name pos:start="127:60" pos:end="127:69"><name pos:start="127:60" pos:end="127:63">resp</name><operator pos:start="127:64" pos:end="127:65">-&gt;</operator><name pos:start="127:66" pos:end="127:69">type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="131:74"><expr pos:start="129:9" pos:end="131:73"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="131:73"><name pos:start="129:15" pos:end="129:45">qemu_rdma_exchange_get_response</name><argument_list pos:start="129:46" pos:end="131:73">(<argument pos:start="129:47" pos:end="129:50"><expr pos:start="129:47" pos:end="129:50"><name pos:start="129:47" pos:end="129:50">rdma</name></expr></argument>, <argument pos:start="129:53" pos:end="129:56"><expr pos:start="129:53" pos:end="129:56"><name pos:start="129:53" pos:end="129:56">resp</name></expr></argument>,

                                              <argument pos:start="131:47" pos:end="131:56"><expr pos:start="131:47" pos:end="131:56"><name pos:start="131:47" pos:end="131:56"><name pos:start="131:47" pos:end="131:50">resp</name><operator pos:start="131:51" pos:end="131:52">-&gt;</operator><name pos:start="131:53" pos:end="131:56">type</name></name></expr></argument>, <argument pos:start="131:59" pos:end="131:72"><expr pos:start="131:59" pos:end="131:72"><name pos:start="131:59" pos:end="131:72">RDMA_WRID_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="135:9" pos:end="139:9"><if pos:start="135:9" pos:end="139:9">if <condition pos:start="135:12" pos:end="135:20">(<expr pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:15">ret</name> <operator pos:start="135:17" pos:end="135:17">&lt;</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>)</condition> <block pos:start="135:22" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:23">

            <return pos:start="137:13" pos:end="137:23">return <expr pos:start="137:20" pos:end="137:22"><name pos:start="137:20" pos:end="137:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:58"><expr pos:start="143:9" pos:end="143:57"><call pos:start="143:9" pos:end="143:57"><name pos:start="143:9" pos:end="143:29">qemu_rdma_move_header</name><argument_list pos:start="143:30" pos:end="143:57">(<argument pos:start="143:31" pos:end="143:34"><expr pos:start="143:31" pos:end="143:34"><name pos:start="143:31" pos:end="143:34">rdma</name></expr></argument>, <argument pos:start="143:37" pos:end="143:50"><expr pos:start="143:37" pos:end="143:50"><name pos:start="143:37" pos:end="143:50">RDMA_WRID_DATA</name></expr></argument>, <argument pos:start="143:53" pos:end="143:56"><expr pos:start="143:53" pos:end="143:56"><name pos:start="143:53" pos:end="143:56">resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:21">(<expr pos:start="145:13" pos:end="145:20"><name pos:start="145:13" pos:end="145:20">resp_idx</name></expr>)</condition> <block pos:start="145:23" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:39">

            <expr_stmt pos:start="147:13" pos:end="147:39"><expr pos:start="147:13" pos:end="147:38"><operator pos:start="147:13" pos:end="147:13">*</operator><name pos:start="147:14" pos:end="147:21">resp_idx</name> <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:38">RDMA_WRID_DATA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:73"><expr pos:start="151:9" pos:end="151:72"><call pos:start="151:9" pos:end="151:72"><name pos:start="151:9" pos:end="151:46">trace_qemu_rdma_exchange_send_received</name><argument_list pos:start="151:47" pos:end="151:72">(<argument pos:start="151:48" pos:end="151:71"><expr pos:start="151:48" pos:end="151:71"><name pos:start="151:48" pos:end="151:71"><name pos:start="151:48" pos:end="151:59">control_desc</name><index pos:start="151:60" pos:end="151:71">[<expr pos:start="151:61" pos:end="151:70"><name pos:start="151:61" pos:end="151:70"><name pos:start="151:61" pos:end="151:64">resp</name><operator pos:start="151:65" pos:end="151:66">-&gt;</operator><name pos:start="151:67" pos:end="151:70">type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:37"><expr pos:start="157:5" pos:end="157:36"><name pos:start="157:5" pos:end="157:32"><name pos:start="157:5" pos:end="157:8">rdma</name><operator pos:start="157:9" pos:end="157:10">-&gt;</operator><name pos:start="157:11" pos:end="157:32">control_ready_expected</name></name> <operator pos:start="157:34" pos:end="157:34">=</operator> <literal type="number" pos:start="157:36" pos:end="157:36">1</literal></expr>;</expr_stmt>



    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
