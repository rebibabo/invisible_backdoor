<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16300.c" pos:tabs="8"><function pos:start="1:1" pos:end="289:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">sunrast_decode_frame</name><parameter_list pos:start="1:32" pos:end="3:64">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:35">int</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:46">data_size</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list> <block pos:start="3:66" pos:end="289:1">{<block_content pos:start="5:5" pos:end="287:26">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:26">buf_end</name> <init pos:start="7:28" pos:end="7:54">= <expr pos:start="7:30" pos:end="7:54"><name pos:start="7:30" pos:end="7:40"><name pos:start="7:30" pos:end="7:34">avpkt</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:40">data</name></name> <operator pos:start="7:42" pos:end="7:42">+</operator> <name pos:start="7:44" pos:end="7:54"><name pos:start="7:44" pos:end="7:48">avpkt</name><operator pos:start="7:49" pos:end="7:50">-&gt;</operator><name pos:start="7:51" pos:end="7:54">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:47"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:18">SUNRASTContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier> <specifier pos:start="9:22" pos:end="9:26">const</specifier></type> <name pos:start="9:28" pos:end="9:28">s</name> <init pos:start="9:30" pos:end="9:47">= <expr pos:start="9:32" pos:end="9:47"><name pos:start="9:32" pos:end="9:47"><name pos:start="9:32" pos:end="9:36">avctx</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:47">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">picture</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier> <specifier pos:start="13:15" pos:end="13:19">const</specifier></type> <name pos:start="13:21" pos:end="13:21">p</name> <init pos:start="13:23" pos:end="13:35">= <expr pos:start="13:25" pos:end="13:35"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:35"><name pos:start="13:26" pos:end="13:26">s</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:35">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:80"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:18">w</name></decl>, <decl pos:start="15:21" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:21" pos:end="15:21">h</name></decl>, <decl pos:start="15:24" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:24" pos:end="15:28">depth</name></decl>, <decl pos:start="15:31" pos:end="15:34"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:31" pos:end="15:34">type</name></decl>, <decl pos:start="15:37" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:37" pos:end="15:43">maptype</name></decl>, <decl pos:start="15:46" pos:end="15:54"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:46" pos:end="15:54">maplength</name></decl>, <decl pos:start="15:57" pos:end="15:62"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:57" pos:end="15:62">stride</name></decl>, <decl pos:start="15:65" pos:end="15:65"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:65" pos:end="15:65">x</name></decl>, <decl pos:start="15:68" pos:end="15:68"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:68" pos:end="15:68">y</name></decl>, <decl pos:start="15:71" pos:end="15:73"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:71" pos:end="15:73">len</name></decl>, <decl pos:start="15:76" pos:end="15:79"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:76" pos:end="15:79">alen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:17">uint8_t</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:27">bufstart</name> <init pos:start="19:29" pos:end="19:33">= <expr pos:start="19:31" pos:end="19:33"><name pos:start="19:31" pos:end="19:33">buf</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:35"><if pos:start="23:5" pos:end="25:35">if <condition pos:start="23:8" pos:end="23:25">(<expr pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:13">avpkt</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:19">size</name></name> <operator pos:start="23:21" pos:end="23:21">&lt;</operator> <literal type="number" pos:start="23:23" pos:end="23:24">32</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:35"><block_content pos:start="25:9" pos:end="25:35">

        <return pos:start="25:9" pos:end="25:35">return <expr pos:start="25:16" pos:end="25:34"><name pos:start="25:16" pos:end="25:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:35">(<expr pos:start="29:9" pos:end="29:34"><call pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:15">AV_RB32</name><argument_list pos:start="29:16" pos:end="29:20">(<argument pos:start="29:17" pos:end="29:19"><expr pos:start="29:17" pos:end="29:19"><name pos:start="29:17" pos:end="29:19">buf</name></expr></argument>)</argument_list></call> <operator pos:start="29:22" pos:end="29:23">!=</operator> <literal type="number" pos:start="29:25" pos:end="29:34">0x59a66a95</literal></expr>)</condition> <block pos:start="29:37" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:73"><expr pos:start="31:9" pos:end="31:72"><call pos:start="31:9" pos:end="31:72"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:72">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:71"><expr pos:start="31:37" pos:end="31:71"><literal type="string" pos:start="31:37" pos:end="31:71">"this is not sunras encoded data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:5">w</name>         <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:23">AV_RB32</name><argument_list pos:start="39:24" pos:end="39:30">(<argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:27">buf</name><operator pos:start="39:28" pos:end="39:28">+</operator><literal type="number" pos:start="39:29" pos:end="39:29">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:31"><expr pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:5">h</name>         <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:23">AV_RB32</name><argument_list pos:start="41:24" pos:end="41:30">(<argument pos:start="41:25" pos:end="41:29"><expr pos:start="41:25" pos:end="41:29"><name pos:start="41:25" pos:end="41:27">buf</name><operator pos:start="41:28" pos:end="41:28">+</operator><literal type="number" pos:start="41:29" pos:end="41:29">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:32"><expr pos:start="43:5" pos:end="43:31"><name pos:start="43:5" pos:end="43:9">depth</name>     <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:31"><name pos:start="43:17" pos:end="43:23">AV_RB32</name><argument_list pos:start="43:24" pos:end="43:31">(<argument pos:start="43:25" pos:end="43:30"><expr pos:start="43:25" pos:end="43:30"><name pos:start="43:25" pos:end="43:27">buf</name><operator pos:start="43:28" pos:end="43:28">+</operator><literal type="number" pos:start="43:29" pos:end="43:30">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:32"><expr pos:start="45:5" pos:end="45:31"><name pos:start="45:5" pos:end="45:8">type</name>      <operator pos:start="45:15" pos:end="45:15">=</operator> <call pos:start="45:17" pos:end="45:31"><name pos:start="45:17" pos:end="45:23">AV_RB32</name><argument_list pos:start="45:24" pos:end="45:31">(<argument pos:start="45:25" pos:end="45:30"><expr pos:start="45:25" pos:end="45:30"><name pos:start="45:25" pos:end="45:27">buf</name><operator pos:start="45:28" pos:end="45:28">+</operator><literal type="number" pos:start="45:29" pos:end="45:30">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:11">maptype</name>   <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:31"><name pos:start="47:17" pos:end="47:23">AV_RB32</name><argument_list pos:start="47:24" pos:end="47:31">(<argument pos:start="47:25" pos:end="47:30"><expr pos:start="47:25" pos:end="47:30"><name pos:start="47:25" pos:end="47:27">buf</name><operator pos:start="47:28" pos:end="47:28">+</operator><literal type="number" pos:start="47:29" pos:end="47:30">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:32"><expr pos:start="49:5" pos:end="49:31"><name pos:start="49:5" pos:end="49:13">maplength</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:31"><name pos:start="49:17" pos:end="49:23">AV_RB32</name><argument_list pos:start="49:24" pos:end="49:31">(<argument pos:start="49:25" pos:end="49:30"><expr pos:start="49:25" pos:end="49:30"><name pos:start="49:25" pos:end="49:27">buf</name><operator pos:start="49:28" pos:end="49:28">+</operator><literal type="number" pos:start="49:29" pos:end="49:30">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:19"><expr pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:7">buf</name>      <operator pos:start="51:14" pos:end="51:15">+=</operator> <literal type="number" pos:start="51:17" pos:end="51:18">32</literal></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:56">(<expr pos:start="55:9" pos:end="55:55"><name pos:start="55:9" pos:end="55:12">type</name> <operator pos:start="55:14" pos:end="55:15">==</operator> <name pos:start="55:17" pos:end="55:30">RT_FORMAT_TIFF</name> <operator pos:start="55:32" pos:end="55:33">||</operator> <name pos:start="55:35" pos:end="55:38">type</name> <operator pos:start="55:40" pos:end="55:41">==</operator> <name pos:start="55:43" pos:end="55:55">RT_FORMAT_IFF</name></expr>)</condition> <block pos:start="55:58" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:18">

        <expr_stmt pos:start="57:9" pos:end="57:72"><expr pos:start="57:9" pos:end="57:71"><call pos:start="57:9" pos:end="57:71"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="57:71">(<argument pos:start="57:16" pos:end="57:20"><expr pos:start="57:16" pos:end="57:20"><name pos:start="57:16" pos:end="57:20">avctx</name></expr></argument>, <argument pos:start="57:23" pos:end="57:34"><expr pos:start="57:23" pos:end="57:34"><name pos:start="57:23" pos:end="57:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:37" pos:end="57:70"><expr pos:start="57:37" pos:end="57:70"><literal type="string" pos:start="57:37" pos:end="57:70">"unsupported (compression) type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:46">(<expr pos:start="63:9" pos:end="63:45"><name pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:12">type</name> <argument_list type="generic" pos:start="63:14" pos:end="63:31">&lt; <argument pos:start="63:16" pos:end="63:29"><expr pos:start="63:16" pos:end="63:29"><name pos:start="63:16" pos:end="63:21">RT_OLD</name> <operator pos:start="63:23" pos:end="63:24">||</operator> <name pos:start="63:26" pos:end="63:29">type</name></expr></argument> &gt;</argument_list></name> <name pos:start="63:33" pos:end="63:45">RT_FORMAT_IFF</name></expr>)</condition> <block pos:start="63:48" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:68"><expr pos:start="65:9" pos:end="65:67"><call pos:start="65:9" pos:end="65:67"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:67">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:37" pos:end="65:66"><expr pos:start="65:37" pos:end="65:66"><literal type="string" pos:start="65:37" pos:end="65:66">"invalid (compression) type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:44">(<expr pos:start="71:9" pos:end="71:43"><call pos:start="71:9" pos:end="71:43"><name pos:start="71:9" pos:end="71:27">av_image_check_size</name><argument_list pos:start="71:28" pos:end="71:43">(<argument pos:start="71:29" pos:end="71:29"><expr pos:start="71:29" pos:end="71:29"><name pos:start="71:29" pos:end="71:29">w</name></expr></argument>, <argument pos:start="71:32" pos:end="71:32"><expr pos:start="71:32" pos:end="71:32"><name pos:start="71:32" pos:end="71:32">h</name></expr></argument>, <argument pos:start="71:35" pos:end="71:35"><expr pos:start="71:35" pos:end="71:35"><literal type="number" pos:start="71:35" pos:end="71:35">0</literal></expr></argument>, <argument pos:start="71:38" pos:end="71:42"><expr pos:start="71:38" pos:end="71:42"><name pos:start="71:38" pos:end="71:42">avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:46" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:18">

        <expr_stmt pos:start="73:9" pos:end="73:60"><expr pos:start="73:9" pos:end="73:59"><call pos:start="73:9" pos:end="73:59"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="73:59">(<argument pos:start="73:16" pos:end="73:20"><expr pos:start="73:16" pos:end="73:20"><name pos:start="73:16" pos:end="73:20">avctx</name></expr></argument>, <argument pos:start="73:23" pos:end="73:34"><expr pos:start="73:23" pos:end="73:34"><name pos:start="73:23" pos:end="73:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:37" pos:end="73:58"><expr pos:start="73:37" pos:end="73:58"><literal type="string" pos:start="73:37" pos:end="73:58">"invalid image size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:18">return <expr pos:start="75:16" pos:end="75:17"><operator pos:start="75:16" pos:end="75:16">-</operator><literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:21">(<expr pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:15">maptype</name> <operator pos:start="79:17" pos:end="79:17">&amp;</operator> <operator pos:start="79:19" pos:end="79:19">~</operator><literal type="number" pos:start="79:20" pos:end="79:20">1</literal></expr>)</condition> <block pos:start="79:23" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:18">

        <expr_stmt pos:start="81:9" pos:end="81:63"><expr pos:start="81:9" pos:end="81:62"><call pos:start="81:9" pos:end="81:62"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="81:62">(<argument pos:start="81:16" pos:end="81:20"><expr pos:start="81:16" pos:end="81:20"><name pos:start="81:16" pos:end="81:20">avctx</name></expr></argument>, <argument pos:start="81:23" pos:end="81:34"><expr pos:start="81:23" pos:end="81:34"><name pos:start="81:23" pos:end="81:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:37" pos:end="81:61"><expr pos:start="81:37" pos:end="81:61"><literal type="string" pos:start="81:37" pos:end="81:61">"invalid colormap type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:18">return <expr pos:start="83:16" pos:end="83:17"><operator pos:start="83:16" pos:end="83:16">-</operator><literal type="number" pos:start="83:17" pos:end="83:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>





    <switch pos:start="91:5" pos:end="117:5">switch <condition pos:start="91:12" pos:end="91:18">(<expr pos:start="91:13" pos:end="91:17"><name pos:start="91:13" pos:end="91:17">depth</name></expr>)</condition> <block pos:start="91:20" pos:end="117:5">{<block_content pos:start="93:9" pos:end="115:22">

        <case pos:start="93:9" pos:end="93:15">case <expr pos:start="93:14" pos:end="93:14"><literal type="number" pos:start="93:14" pos:end="93:14">1</literal></expr>:</case>

            <expr_stmt pos:start="95:13" pos:end="95:47"><expr pos:start="95:13" pos:end="95:46"><name pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:17">avctx</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:26">pix_fmt</name></name> <operator pos:start="95:28" pos:end="95:28">=</operator> <name pos:start="95:30" pos:end="95:46">PIX_FMT_MONOWHITE</name></expr>;</expr_stmt>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:15">case <expr pos:start="99:14" pos:end="99:14"><literal type="number" pos:start="99:14" pos:end="99:14">8</literal></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:17">avctx</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:26">pix_fmt</name></name> <operator pos:start="101:28" pos:end="101:28">=</operator> <name pos:start="101:30" pos:end="101:41">PIX_FMT_PAL8</name></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        <case pos:start="105:9" pos:end="105:16">case <expr pos:start="105:14" pos:end="105:15"><literal type="number" pos:start="105:14" pos:end="105:15">24</literal></expr>:</case>

            <expr_stmt pos:start="107:13" pos:end="107:85"><expr pos:start="107:13" pos:end="107:84"><name pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:17">avctx</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:26">pix_fmt</name></name> <operator pos:start="107:28" pos:end="107:28">=</operator> <ternary pos:start="107:30" pos:end="107:84"><condition pos:start="107:30" pos:end="107:54"><expr pos:start="107:30" pos:end="107:52"><operator pos:start="107:30" pos:end="107:30">(</operator><name pos:start="107:31" pos:end="107:34">type</name> <operator pos:start="107:36" pos:end="107:37">==</operator> <name pos:start="107:39" pos:end="107:51">RT_FORMAT_RGB</name><operator pos:start="107:52" pos:end="107:52">)</operator></expr> ?</condition><then pos:start="107:56" pos:end="107:68"> <expr pos:start="107:56" pos:end="107:68"><name pos:start="107:56" pos:end="107:68">PIX_FMT_RGB24</name></expr> </then><else pos:start="107:70" pos:end="107:84">: <expr pos:start="107:72" pos:end="107:84"><name pos:start="107:72" pos:end="107:84">PIX_FMT_BGR24</name></expr></else></ternary></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        <default pos:start="111:9" pos:end="111:16">default:</default>

            <expr_stmt pos:start="113:13" pos:end="113:59"><expr pos:start="113:13" pos:end="113:58"><call pos:start="113:13" pos:end="113:58"><name pos:start="113:13" pos:end="113:18">av_log</name><argument_list pos:start="113:19" pos:end="113:58">(<argument pos:start="113:20" pos:end="113:24"><expr pos:start="113:20" pos:end="113:24"><name pos:start="113:20" pos:end="113:24">avctx</name></expr></argument>, <argument pos:start="113:27" pos:end="113:38"><expr pos:start="113:27" pos:end="113:38"><name pos:start="113:27" pos:end="113:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:41" pos:end="113:57"><expr pos:start="113:41" pos:end="113:57"><literal type="string" pos:start="113:41" pos:end="113:57">"invalid depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="115:13" pos:end="115:22">return <expr pos:start="115:20" pos:end="115:21"><operator pos:start="115:20" pos:end="115:20">-</operator><literal type="number" pos:start="115:21" pos:end="115:21">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="121:5" pos:end="123:40"><if pos:start="121:5" pos:end="123:40">if <condition pos:start="121:8" pos:end="121:19">(<expr pos:start="121:9" pos:end="121:18"><name pos:start="121:9" pos:end="121:18"><name pos:start="121:9" pos:end="121:9">p</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:15">data</name><index pos:start="121:16" pos:end="121:18">[<expr pos:start="121:17" pos:end="121:17"><literal type="number" pos:start="121:17" pos:end="121:17">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="123:9" pos:end="123:40"><block_content pos:start="123:9" pos:end="123:40">

        <expr_stmt pos:start="123:9" pos:end="123:40"><expr pos:start="123:9" pos:end="123:39"><call pos:start="123:9" pos:end="123:39"><name pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:13">avctx</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:29">release_buffer</name></name><argument_list pos:start="123:30" pos:end="123:39">(<argument pos:start="123:31" pos:end="123:35"><expr pos:start="123:31" pos:end="123:35"><name pos:start="123:31" pos:end="123:35">avctx</name></expr></argument>, <argument pos:start="123:38" pos:end="123:38"><expr pos:start="123:38" pos:end="123:38"><name pos:start="123:38" pos:end="123:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="127:5" pos:end="129:44"><if pos:start="127:5" pos:end="129:44">if <condition pos:start="127:8" pos:end="127:48">(<expr pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:9">w</name> <operator pos:start="127:11" pos:end="127:12">!=</operator> <name pos:start="127:14" pos:end="127:25"><name pos:start="127:14" pos:end="127:18">avctx</name><operator pos:start="127:19" pos:end="127:20">-&gt;</operator><name pos:start="127:21" pos:end="127:25">width</name></name> <operator pos:start="127:27" pos:end="127:28">||</operator> <name pos:start="127:30" pos:end="127:30">h</name> <operator pos:start="127:32" pos:end="127:33">!=</operator> <name pos:start="127:35" pos:end="127:47"><name pos:start="127:35" pos:end="127:39">avctx</name><operator pos:start="127:40" pos:end="127:41">-&gt;</operator><name pos:start="127:42" pos:end="127:47">height</name></name></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:44"><block_content pos:start="129:9" pos:end="129:44">

        <expr_stmt pos:start="129:9" pos:end="129:44"><expr pos:start="129:9" pos:end="129:43"><call pos:start="129:9" pos:end="129:43"><name pos:start="129:9" pos:end="129:30">avcodec_set_dimensions</name><argument_list pos:start="129:31" pos:end="129:43">(<argument pos:start="129:32" pos:end="129:36"><expr pos:start="129:32" pos:end="129:36"><name pos:start="129:32" pos:end="129:36">avctx</name></expr></argument>, <argument pos:start="129:39" pos:end="129:39"><expr pos:start="129:39" pos:end="129:39"><name pos:start="129:39" pos:end="129:39">w</name></expr></argument>, <argument pos:start="129:42" pos:end="129:42"><expr pos:start="129:42" pos:end="129:42"><name pos:start="129:42" pos:end="129:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="137:5"><if pos:start="131:5" pos:end="137:5">if <condition pos:start="131:8" pos:end="131:40">(<expr pos:start="131:9" pos:end="131:39"><call pos:start="131:9" pos:end="131:35"><name pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:13">avctx</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:25">get_buffer</name></name><argument_list pos:start="131:26" pos:end="131:35">(<argument pos:start="131:27" pos:end="131:31"><expr pos:start="131:27" pos:end="131:31"><name pos:start="131:27" pos:end="131:31">avctx</name></expr></argument>, <argument pos:start="131:34" pos:end="131:34"><expr pos:start="131:34" pos:end="131:34"><name pos:start="131:34" pos:end="131:34">p</name></expr></argument>)</argument_list></call> <operator pos:start="131:37" pos:end="131:37">&lt;</operator> <literal type="number" pos:start="131:39" pos:end="131:39">0</literal></expr>)</condition> <block pos:start="131:42" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:18">

        <expr_stmt pos:start="133:9" pos:end="133:61"><expr pos:start="133:9" pos:end="133:60"><call pos:start="133:9" pos:end="133:60"><name pos:start="133:9" pos:end="133:14">av_log</name><argument_list pos:start="133:15" pos:end="133:60">(<argument pos:start="133:16" pos:end="133:20"><expr pos:start="133:16" pos:end="133:20"><name pos:start="133:16" pos:end="133:20">avctx</name></expr></argument>, <argument pos:start="133:23" pos:end="133:34"><expr pos:start="133:23" pos:end="133:34"><name pos:start="133:23" pos:end="133:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:37" pos:end="133:59"><expr pos:start="133:37" pos:end="133:59"><literal type="string" pos:start="133:37" pos:end="133:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="135:9" pos:end="135:18">return <expr pos:start="135:16" pos:end="135:17"><operator pos:start="135:16" pos:end="135:16">-</operator><literal type="number" pos:start="135:17" pos:end="135:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:37"><expr pos:start="141:5" pos:end="141:36"><name pos:start="141:5" pos:end="141:16"><name pos:start="141:5" pos:end="141:5">p</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:16">pict_type</name></name> <operator pos:start="141:18" pos:end="141:18">=</operator> <name pos:start="141:20" pos:end="141:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <if_stmt pos:start="145:5" pos:end="147:35"><if pos:start="145:5" pos:end="147:35">if <condition pos:start="145:8" pos:end="145:34">(<expr pos:start="145:9" pos:end="145:33"><name pos:start="145:9" pos:end="145:15">buf_end</name> <operator pos:start="145:17" pos:end="145:17">-</operator> <name pos:start="145:19" pos:end="145:21">buf</name> <operator pos:start="145:23" pos:end="145:23">&lt;</operator> <name pos:start="145:25" pos:end="145:33">maplength</name></expr>)</condition><block type="pseudo" pos:start="147:9" pos:end="147:35"><block_content pos:start="147:9" pos:end="147:35">

        <return pos:start="147:9" pos:end="147:35">return <expr pos:start="147:16" pos:end="147:34"><name pos:start="147:16" pos:end="147:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="151:5" pos:end="187:5"><if pos:start="151:5" pos:end="157:5">if <condition pos:start="151:8" pos:end="151:32">(<expr pos:start="151:9" pos:end="151:31"><name pos:start="151:9" pos:end="151:13">depth</name> <operator pos:start="151:15" pos:end="151:16">!=</operator> <literal type="number" pos:start="151:18" pos:end="151:18">8</literal> <operator pos:start="151:20" pos:end="151:21">&amp;&amp;</operator> <name pos:start="151:23" pos:end="151:31">maplength</name></expr>)</condition> <block pos:start="151:34" pos:end="157:5">{<block_content pos:start="153:9" pos:end="153:106">

        <expr_stmt pos:start="153:9" pos:end="153:106"><expr pos:start="153:9" pos:end="153:105"><call pos:start="153:9" pos:end="153:105"><name pos:start="153:9" pos:end="153:14">av_log</name><argument_list pos:start="153:15" pos:end="153:105">(<argument pos:start="153:16" pos:end="153:20"><expr pos:start="153:16" pos:end="153:20"><name pos:start="153:16" pos:end="153:20">avctx</name></expr></argument>, <argument pos:start="153:23" pos:end="153:36"><expr pos:start="153:23" pos:end="153:36"><name pos:start="153:23" pos:end="153:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="153:39" pos:end="153:104"><expr pos:start="153:39" pos:end="153:104"><literal type="string" pos:start="153:39" pos:end="153:104">"useless colormap found or file is corrupted, trying to recover\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="157:7" pos:end="187:5">else if <condition pos:start="157:15" pos:end="157:26">(<expr pos:start="157:16" pos:end="157:25"><name pos:start="157:16" pos:end="157:20">depth</name> <operator pos:start="157:22" pos:end="157:23">==</operator> <literal type="number" pos:start="157:25" pos:end="157:25">8</literal></expr>)</condition> <block pos:start="157:28" pos:end="187:5">{<block_content pos:start="159:9" pos:end="185:79">

        <decl_stmt pos:start="159:9" pos:end="159:41"><decl pos:start="159:9" pos:end="159:40"><type pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:16">unsigned</name> <name pos:start="159:18" pos:end="159:20">int</name></type> <name pos:start="159:22" pos:end="159:24">len</name> <init pos:start="159:26" pos:end="159:40">= <expr pos:start="159:28" pos:end="159:40"><name pos:start="159:28" pos:end="159:36">maplength</name> <operator pos:start="159:38" pos:end="159:38">/</operator> <literal type="number" pos:start="159:40" pos:end="159:40">3</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="163:9" pos:end="169:9"><if pos:start="163:9" pos:end="169:9">if <condition pos:start="163:12" pos:end="163:23">(<expr pos:start="163:13" pos:end="163:22"><operator pos:start="163:13" pos:end="163:13">!</operator><name pos:start="163:14" pos:end="163:22">maplength</name></expr>)</condition> <block pos:start="163:25" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:22">

            <expr_stmt pos:start="165:13" pos:end="165:63"><expr pos:start="165:13" pos:end="165:62"><call pos:start="165:13" pos:end="165:62"><name pos:start="165:13" pos:end="165:18">av_log</name><argument_list pos:start="165:19" pos:end="165:62">(<argument pos:start="165:20" pos:end="165:24"><expr pos:start="165:20" pos:end="165:24"><name pos:start="165:20" pos:end="165:24">avctx</name></expr></argument>, <argument pos:start="165:27" pos:end="165:38"><expr pos:start="165:27" pos:end="165:38"><name pos:start="165:27" pos:end="165:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:41" pos:end="165:61"><expr pos:start="165:41" pos:end="165:61"><literal type="string" pos:start="165:41" pos:end="165:61">"colormap expected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="167:13" pos:end="167:22">return <expr pos:start="167:20" pos:end="167:21"><operator pos:start="167:20" pos:end="167:20">-</operator><literal type="number" pos:start="167:21" pos:end="167:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="171:9" pos:end="177:9"><if pos:start="171:9" pos:end="177:9">if <condition pos:start="171:12" pos:end="171:45">(<expr pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:21">maplength</name> <operator pos:start="171:23" pos:end="171:23">%</operator> <literal type="number" pos:start="171:25" pos:end="171:25">3</literal> <operator pos:start="171:27" pos:end="171:28">||</operator> <name pos:start="171:30" pos:end="171:38">maplength</name> <operator pos:start="171:40" pos:end="171:40">&gt;</operator> <literal type="number" pos:start="171:42" pos:end="171:44">768</literal></expr>)</condition> <block pos:start="171:47" pos:end="177:9">{<block_content pos:start="173:13" pos:end="175:22">

            <expr_stmt pos:start="173:13" pos:end="173:71"><expr pos:start="173:13" pos:end="173:70"><call pos:start="173:13" pos:end="173:70"><name pos:start="173:13" pos:end="173:18">av_log</name><argument_list pos:start="173:19" pos:end="173:70">(<argument pos:start="173:20" pos:end="173:24"><expr pos:start="173:20" pos:end="173:24"><name pos:start="173:20" pos:end="173:24">avctx</name></expr></argument>, <argument pos:start="173:27" pos:end="173:40"><expr pos:start="173:27" pos:end="173:40"><name pos:start="173:27" pos:end="173:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="173:43" pos:end="173:69"><expr pos:start="173:43" pos:end="173:69"><literal type="string" pos:start="173:43" pos:end="173:69">"invalid colormap length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="175:13" pos:end="175:22">return <expr pos:start="175:20" pos:end="175:21"><operator pos:start="175:20" pos:end="175:20">-</operator><literal type="number" pos:start="175:21" pos:end="175:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:25"><expr pos:start="181:9" pos:end="181:24"><name pos:start="181:9" pos:end="181:11">ptr</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <name pos:start="181:15" pos:end="181:24"><name pos:start="181:15" pos:end="181:15">p</name><operator pos:start="181:16" pos:end="181:17">-&gt;</operator><name pos:start="181:18" pos:end="181:21">data</name><index pos:start="181:22" pos:end="181:24">[<expr pos:start="181:23" pos:end="181:23"><literal type="number" pos:start="181:23" pos:end="181:23">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="183:9" pos:end="185:79">for <control pos:start="183:13" pos:end="183:37">(<init pos:start="183:14" pos:end="183:17"><expr pos:start="183:14" pos:end="183:16"><name pos:start="183:14" pos:end="183:14">x</name><operator pos:start="183:15" pos:end="183:15">=</operator><literal type="number" pos:start="183:16" pos:end="183:16">0</literal></expr>;</init> <condition pos:start="183:19" pos:end="183:24"><expr pos:start="183:19" pos:end="183:23"><name pos:start="183:19" pos:end="183:19">x</name><operator pos:start="183:20" pos:end="183:20">&lt;</operator><name pos:start="183:21" pos:end="183:23">len</name></expr>;</condition> <incr pos:start="183:26" pos:end="183:36"><expr pos:start="183:26" pos:end="183:28"><name pos:start="183:26" pos:end="183:26">x</name><operator pos:start="183:27" pos:end="183:28">++</operator></expr><operator pos:start="183:29" pos:end="183:29">,</operator> <expr pos:start="183:31" pos:end="183:36"><name pos:start="183:31" pos:end="183:33">ptr</name><operator pos:start="183:34" pos:end="183:35">+=</operator><literal type="number" pos:start="183:36" pos:end="183:36">4</literal></expr></incr>)</control><block type="pseudo" pos:start="185:13" pos:end="185:79"><block_content pos:start="185:13" pos:end="185:79">

            <expr_stmt pos:start="185:13" pos:end="185:79"><expr pos:start="185:13" pos:end="185:78"><operator pos:start="185:13" pos:end="185:13">*</operator><operator pos:start="185:14" pos:end="185:14">(</operator><name pos:start="185:15" pos:end="185:22">uint32_t</name> <operator pos:start="185:24" pos:end="185:24">*</operator><operator pos:start="185:25" pos:end="185:25">)</operator><name pos:start="185:26" pos:end="185:28">ptr</name> <operator pos:start="185:30" pos:end="185:30">=</operator> <operator pos:start="185:32" pos:end="185:32">(</operator><name pos:start="185:33" pos:end="185:38"><name pos:start="185:33" pos:end="185:35">buf</name><index pos:start="185:36" pos:end="185:38">[<expr pos:start="185:37" pos:end="185:37"><name pos:start="185:37" pos:end="185:37">x</name></expr>]</index></name><operator pos:start="185:39" pos:end="185:40">&lt;&lt;</operator><literal type="number" pos:start="185:41" pos:end="185:42">16</literal><operator pos:start="185:43" pos:end="185:43">)</operator> <operator pos:start="185:45" pos:end="185:45">+</operator> <operator pos:start="185:47" pos:end="185:47">(</operator><name pos:start="185:48" pos:end="185:57"><name pos:start="185:48" pos:end="185:50">buf</name><index pos:start="185:51" pos:end="185:57">[<expr pos:start="185:52" pos:end="185:56"><name pos:start="185:52" pos:end="185:54">len</name><operator pos:start="185:55" pos:end="185:55">+</operator><name pos:start="185:56" pos:end="185:56">x</name></expr>]</index></name><operator pos:start="185:58" pos:end="185:59">&lt;&lt;</operator><literal type="number" pos:start="185:60" pos:end="185:60">8</literal><operator pos:start="185:61" pos:end="185:61">)</operator> <operator pos:start="185:63" pos:end="185:63">+</operator> <name pos:start="185:65" pos:end="185:78"><name pos:start="185:65" pos:end="185:67">buf</name><index pos:start="185:68" pos:end="185:78">[<expr pos:start="185:69" pos:end="185:77"><name pos:start="185:69" pos:end="185:71">len</name><operator pos:start="185:72" pos:end="185:72">+</operator><name pos:start="185:73" pos:end="185:75">len</name><operator pos:start="185:76" pos:end="185:76">+</operator><name pos:start="185:77" pos:end="185:77">x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:21"><expr pos:start="191:5" pos:end="191:20"><name pos:start="191:5" pos:end="191:7">buf</name> <operator pos:start="191:9" pos:end="191:10">+=</operator> <name pos:start="191:12" pos:end="191:20">maplength</name></expr>;</expr_stmt>



    <expr_stmt pos:start="195:5" pos:end="195:24"><expr pos:start="195:5" pos:end="195:23"><name pos:start="195:5" pos:end="195:7">ptr</name>    <operator pos:start="195:12" pos:end="195:12">=</operator> <name pos:start="195:14" pos:end="195:23"><name pos:start="195:14" pos:end="195:14">p</name><operator pos:start="195:15" pos:end="195:16">-&gt;</operator><name pos:start="195:17" pos:end="195:20">data</name><index pos:start="195:21" pos:end="195:23">[<expr pos:start="195:22" pos:end="195:22"><literal type="number" pos:start="195:22" pos:end="195:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:28"><expr pos:start="197:5" pos:end="197:27"><name pos:start="197:5" pos:end="197:10">stride</name> <operator pos:start="197:12" pos:end="197:12">=</operator> <name pos:start="197:14" pos:end="197:27"><name pos:start="197:14" pos:end="197:14">p</name><operator pos:start="197:15" pos:end="197:16">-&gt;</operator><name pos:start="197:17" pos:end="197:24">linesize</name><index pos:start="197:25" pos:end="197:27">[<expr pos:start="197:26" pos:end="197:26"><literal type="number" pos:start="197:26" pos:end="197:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="201:5" pos:end="201:52">/* scanlines are aligned on 16 bit boundaries */</comment>

    <expr_stmt pos:start="203:5" pos:end="203:32"><expr pos:start="203:5" pos:end="203:31"><name pos:start="203:5" pos:end="203:7">len</name>  <operator pos:start="203:10" pos:end="203:10">=</operator> <operator pos:start="203:12" pos:end="203:12">(</operator><name pos:start="203:13" pos:end="203:17">depth</name> <operator pos:start="203:19" pos:end="203:19">*</operator> <name pos:start="203:21" pos:end="203:21">w</name> <operator pos:start="203:23" pos:end="203:23">+</operator> <literal type="number" pos:start="203:25" pos:end="203:25">7</literal><operator pos:start="203:26" pos:end="203:26">)</operator> <operator pos:start="203:28" pos:end="203:29">&gt;&gt;</operator> <literal type="number" pos:start="203:31" pos:end="203:31">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:25"><expr pos:start="205:5" pos:end="205:24"><name pos:start="205:5" pos:end="205:8">alen</name> <operator pos:start="205:10" pos:end="205:10">=</operator> <name pos:start="205:12" pos:end="205:14">len</name> <operator pos:start="205:16" pos:end="205:16">+</operator> <operator pos:start="205:18" pos:end="205:18">(</operator><name pos:start="205:19" pos:end="205:21">len</name><operator pos:start="205:22" pos:end="205:22">&amp;</operator><literal type="number" pos:start="205:23" pos:end="205:23">1</literal><operator pos:start="205:24" pos:end="205:24">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="209:5" pos:end="277:5"><if pos:start="209:5" pos:end="261:5">if <condition pos:start="209:8" pos:end="209:32">(<expr pos:start="209:9" pos:end="209:31"><name pos:start="209:9" pos:end="209:12">type</name> <operator pos:start="209:14" pos:end="209:15">==</operator> <name pos:start="209:17" pos:end="209:31">RT_BYTE_ENCODED</name></expr>)</condition> <block pos:start="209:34" pos:end="261:5">{<block_content pos:start="211:9" pos:end="259:9">

        <decl_stmt pos:start="211:9" pos:end="211:23"><decl pos:start="211:9" pos:end="211:17"><type pos:start="211:9" pos:end="211:11"><name pos:start="211:9" pos:end="211:11">int</name></type> <name pos:start="211:13" pos:end="211:17">value</name></decl>, <decl pos:start="211:20" pos:end="211:22"><type ref="prev" pos:start="211:9" pos:end="211:11"/><name pos:start="211:20" pos:end="211:22">run</name></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:38"><decl pos:start="213:9" pos:end="213:37"><type pos:start="213:9" pos:end="213:17"><name pos:start="213:9" pos:end="213:15">uint8_t</name> <modifier pos:start="213:17" pos:end="213:17">*</modifier></type><name pos:start="213:18" pos:end="213:20">end</name> <init pos:start="213:22" pos:end="213:37">= <expr pos:start="213:24" pos:end="213:37"><name pos:start="213:24" pos:end="213:26">ptr</name> <operator pos:start="213:28" pos:end="213:28">+</operator> <name pos:start="213:30" pos:end="213:30">h</name><operator pos:start="213:31" pos:end="213:31">*</operator><name pos:start="213:32" pos:end="213:37">stride</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="217:9" pos:end="217:14"><expr pos:start="217:9" pos:end="217:13"><name pos:start="217:9" pos:end="217:9">x</name> <operator pos:start="217:11" pos:end="217:11">=</operator> <literal type="number" pos:start="217:13" pos:end="217:13">0</literal></expr>;</expr_stmt>

        <while pos:start="219:9" pos:end="259:9">while <condition pos:start="219:15" pos:end="219:43">(<expr pos:start="219:16" pos:end="219:42"><name pos:start="219:16" pos:end="219:18">ptr</name> <operator pos:start="219:20" pos:end="219:21">!=</operator> <name pos:start="219:23" pos:end="219:25">end</name> <operator pos:start="219:27" pos:end="219:28">&amp;&amp;</operator> <name pos:start="219:30" pos:end="219:32">buf</name> <operator pos:start="219:34" pos:end="219:34">&lt;</operator> <name pos:start="219:36" pos:end="219:42">buf_end</name></expr>)</condition> <block pos:start="219:45" pos:end="259:9">{<block_content pos:start="221:13" pos:end="257:13">

            <expr_stmt pos:start="221:13" pos:end="221:20"><expr pos:start="221:13" pos:end="221:19"><name pos:start="221:13" pos:end="221:15">run</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <literal type="number" pos:start="221:19" pos:end="221:19">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="223:13" pos:end="225:43"><if pos:start="223:13" pos:end="225:43">if <condition pos:start="223:16" pos:end="223:34">(<expr pos:start="223:17" pos:end="223:33"><name pos:start="223:17" pos:end="223:23">buf_end</name> <operator pos:start="223:25" pos:end="223:25">-</operator> <name pos:start="223:27" pos:end="223:29">buf</name> <operator pos:start="223:31" pos:end="223:31">&lt;</operator> <literal type="number" pos:start="223:33" pos:end="223:33">1</literal></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="225:43"><block_content pos:start="225:17" pos:end="225:43">

                <return pos:start="225:17" pos:end="225:43">return <expr pos:start="225:24" pos:end="225:42"><name pos:start="225:24" pos:end="225:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="229:13" pos:end="237:13"><if pos:start="229:13" pos:end="237:13">if <condition pos:start="229:16" pos:end="229:41">(<expr pos:start="229:17" pos:end="229:40"><operator pos:start="229:17" pos:end="229:17">(</operator><name pos:start="229:18" pos:end="229:22">value</name> <operator pos:start="229:24" pos:end="229:24">=</operator> <operator pos:start="229:26" pos:end="229:26">*</operator><name pos:start="229:27" pos:end="229:29">buf</name><operator pos:start="229:30" pos:end="229:31">++</operator><operator pos:start="229:32" pos:end="229:32">)</operator> <operator pos:start="229:34" pos:end="229:35">==</operator> <literal type="number" pos:start="229:37" pos:end="229:40">0x80</literal></expr>)</condition> <block pos:start="229:43" pos:end="237:13">{<block_content pos:start="231:17" pos:end="235:35">

                <expr_stmt pos:start="231:17" pos:end="231:33"><expr pos:start="231:17" pos:end="231:32"><name pos:start="231:17" pos:end="231:19">run</name> <operator pos:start="231:21" pos:end="231:21">=</operator> <operator pos:start="231:23" pos:end="231:23">*</operator><name pos:start="231:24" pos:end="231:26">buf</name><operator pos:start="231:27" pos:end="231:28">++</operator> <operator pos:start="231:30" pos:end="231:30">+</operator> <literal type="number" pos:start="231:32" pos:end="231:32">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="233:17" pos:end="235:35"><if pos:start="233:17" pos:end="235:35">if <condition pos:start="233:20" pos:end="233:29">(<expr pos:start="233:21" pos:end="233:28"><name pos:start="233:21" pos:end="233:23">run</name> <operator pos:start="233:25" pos:end="233:26">!=</operator> <literal type="number" pos:start="233:28" pos:end="233:28">1</literal></expr>)</condition><block type="pseudo" pos:start="235:21" pos:end="235:35"><block_content pos:start="235:21" pos:end="235:35">

                    <expr_stmt pos:start="235:21" pos:end="235:35"><expr pos:start="235:21" pos:end="235:34"><name pos:start="235:21" pos:end="235:25">value</name> <operator pos:start="235:27" pos:end="235:27">=</operator> <operator pos:start="235:29" pos:end="235:29">*</operator><name pos:start="235:30" pos:end="235:32">buf</name><operator pos:start="235:33" pos:end="235:34">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <while pos:start="239:13" pos:end="257:13">while <condition pos:start="239:19" pos:end="239:25">(<expr pos:start="239:20" pos:end="239:24"><name pos:start="239:20" pos:end="239:22">run</name><operator pos:start="239:23" pos:end="239:24">--</operator></expr>)</condition> <block pos:start="239:27" pos:end="257:13">{<block_content pos:start="241:17" pos:end="255:17">

                <if_stmt pos:start="241:17" pos:end="243:35"><if pos:start="241:17" pos:end="243:35">if <condition pos:start="241:20" pos:end="241:28">(<expr pos:start="241:21" pos:end="241:27"><name pos:start="241:21" pos:end="241:21">x</name> <operator pos:start="241:23" pos:end="241:23">&lt;</operator> <name pos:start="241:25" pos:end="241:27">len</name></expr>)</condition><block type="pseudo" pos:start="243:21" pos:end="243:35"><block_content pos:start="243:21" pos:end="243:35">

                    <expr_stmt pos:start="243:21" pos:end="243:35"><expr pos:start="243:21" pos:end="243:34"><name pos:start="243:21" pos:end="243:26"><name pos:start="243:21" pos:end="243:23">ptr</name><index pos:start="243:24" pos:end="243:26">[<expr pos:start="243:25" pos:end="243:25"><name pos:start="243:25" pos:end="243:25">x</name></expr>]</index></name> <operator pos:start="243:28" pos:end="243:28">=</operator> <name pos:start="243:30" pos:end="243:34">value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="245:17" pos:end="255:17"><if pos:start="245:17" pos:end="255:17">if <condition pos:start="245:20" pos:end="245:32">(<expr pos:start="245:21" pos:end="245:31"><operator pos:start="245:21" pos:end="245:22">++</operator><name pos:start="245:23" pos:end="245:23">x</name> <operator pos:start="245:25" pos:end="245:26">&gt;=</operator> <name pos:start="245:28" pos:end="245:31">alen</name></expr>)</condition> <block pos:start="245:34" pos:end="255:17">{<block_content pos:start="247:21" pos:end="253:30">

                    <expr_stmt pos:start="247:21" pos:end="247:26"><expr pos:start="247:21" pos:end="247:25"><name pos:start="247:21" pos:end="247:21">x</name> <operator pos:start="247:23" pos:end="247:23">=</operator> <literal type="number" pos:start="247:25" pos:end="247:25">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="249:21" pos:end="249:34"><expr pos:start="249:21" pos:end="249:33"><name pos:start="249:21" pos:end="249:23">ptr</name> <operator pos:start="249:25" pos:end="249:26">+=</operator> <name pos:start="249:28" pos:end="249:33">stride</name></expr>;</expr_stmt>

                    <if_stmt pos:start="251:21" pos:end="253:30"><if pos:start="251:21" pos:end="253:30">if <condition pos:start="251:24" pos:end="251:35">(<expr pos:start="251:25" pos:end="251:34"><name pos:start="251:25" pos:end="251:27">ptr</name> <operator pos:start="251:29" pos:end="251:30">==</operator> <name pos:start="251:32" pos:end="251:34">end</name></expr>)</condition><block type="pseudo" pos:start="253:25" pos:end="253:30"><block_content pos:start="253:25" pos:end="253:30">

                        <break pos:start="253:25" pos:end="253:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></while>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="261:7" pos:end="277:5">else <block pos:start="261:12" pos:end="277:5">{<block_content pos:start="263:9" pos:end="275:9">

        <for pos:start="263:9" pos:end="275:9">for <control pos:start="263:13" pos:end="263:27">(<init pos:start="263:14" pos:end="263:17"><expr pos:start="263:14" pos:end="263:16"><name pos:start="263:14" pos:end="263:14">y</name><operator pos:start="263:15" pos:end="263:15">=</operator><literal type="number" pos:start="263:16" pos:end="263:16">0</literal></expr>;</init> <condition pos:start="263:19" pos:end="263:22"><expr pos:start="263:19" pos:end="263:21"><name pos:start="263:19" pos:end="263:19">y</name><operator pos:start="263:20" pos:end="263:20">&lt;</operator><name pos:start="263:21" pos:end="263:21">h</name></expr>;</condition> <incr pos:start="263:24" pos:end="263:26"><expr pos:start="263:24" pos:end="263:26"><name pos:start="263:24" pos:end="263:24">y</name><operator pos:start="263:25" pos:end="263:26">++</operator></expr></incr>)</control> <block pos:start="263:29" pos:end="275:9">{<block_content pos:start="265:13" pos:end="273:24">

            <if_stmt pos:start="265:13" pos:end="267:22"><if pos:start="265:13" pos:end="267:22">if <condition pos:start="265:16" pos:end="265:36">(<expr pos:start="265:17" pos:end="265:35"><name pos:start="265:17" pos:end="265:23">buf_end</name> <operator pos:start="265:25" pos:end="265:25">-</operator> <name pos:start="265:27" pos:end="265:29">buf</name> <operator pos:start="265:31" pos:end="265:31">&lt;</operator> <name pos:start="265:33" pos:end="265:35">len</name></expr>)</condition><block type="pseudo" pos:start="267:17" pos:end="267:22"><block_content pos:start="267:17" pos:end="267:22">

                <break pos:start="267:17" pos:end="267:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:34"><expr pos:start="269:13" pos:end="269:33"><call pos:start="269:13" pos:end="269:33"><name pos:start="269:13" pos:end="269:18">memcpy</name><argument_list pos:start="269:19" pos:end="269:33">(<argument pos:start="269:20" pos:end="269:22"><expr pos:start="269:20" pos:end="269:22"><name pos:start="269:20" pos:end="269:22">ptr</name></expr></argument>, <argument pos:start="269:25" pos:end="269:27"><expr pos:start="269:25" pos:end="269:27"><name pos:start="269:25" pos:end="269:27">buf</name></expr></argument>, <argument pos:start="269:30" pos:end="269:32"><expr pos:start="269:30" pos:end="269:32"><name pos:start="269:30" pos:end="269:32">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:26"><expr pos:start="271:13" pos:end="271:25"><name pos:start="271:13" pos:end="271:15">ptr</name> <operator pos:start="271:17" pos:end="271:18">+=</operator> <name pos:start="271:20" pos:end="271:25">stride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:24"><expr pos:start="273:13" pos:end="273:23"><name pos:start="273:13" pos:end="273:15">buf</name> <operator pos:start="273:17" pos:end="273:18">+=</operator> <name pos:start="273:20" pos:end="273:23">alen</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="281:5" pos:end="281:26"><expr pos:start="281:5" pos:end="281:25"><operator pos:start="281:5" pos:end="281:5">*</operator><name pos:start="281:6" pos:end="281:12">picture</name> <operator pos:start="281:14" pos:end="281:14">=</operator> <name pos:start="281:16" pos:end="281:25"><name pos:start="281:16" pos:end="281:16">s</name><operator pos:start="281:17" pos:end="281:18">-&gt;</operator><name pos:start="281:19" pos:end="281:25">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:33"><expr pos:start="283:5" pos:end="283:32"><operator pos:start="283:5" pos:end="283:5">*</operator><name pos:start="283:6" pos:end="283:14">data_size</name> <operator pos:start="283:16" pos:end="283:16">=</operator> <sizeof pos:start="283:18" pos:end="283:32">sizeof<argument_list pos:start="283:24" pos:end="283:32">(<argument pos:start="283:25" pos:end="283:31"><expr pos:start="283:25" pos:end="283:31"><name pos:start="283:25" pos:end="283:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="287:5" pos:end="287:26">return <expr pos:start="287:12" pos:end="287:25"><name pos:start="287:12" pos:end="287:14">buf</name> <operator pos:start="287:16" pos:end="287:16">-</operator> <name pos:start="287:18" pos:end="287:25">bufstart</name></expr>;</return>

</block_content>}</block></function>
</unit>
