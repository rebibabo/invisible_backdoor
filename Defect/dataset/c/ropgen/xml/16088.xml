<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16088.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">tap_send</name><parameter_list pos:start="1:21" pos:end="1:34">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:27"><name pos:start="1:22" pos:end="1:25">void</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:33">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">TAPState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">packets</name> <init pos:start="9:17" pos:end="9:19">= <expr pos:start="9:19" pos:end="9:19"><literal type="number" pos:start="9:19" pos:end="9:19">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="75:5">while <condition pos:start="13:11" pos:end="13:40">(<expr pos:start="13:12" pos:end="13:39"><call pos:start="13:12" pos:end="13:39"><name pos:start="13:12" pos:end="13:31">qemu_can_send_packet</name><argument_list pos:start="13:32" pos:end="13:39">(<argument pos:start="13:33" pos:end="13:38"><expr pos:start="13:33" pos:end="13:38"><operator pos:start="13:33" pos:end="13:33">&amp;</operator><name pos:start="13:34" pos:end="13:38"><name pos:start="13:34" pos:end="13:34">s</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:38">nc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:42" pos:end="75:5">{<block_content pos:start="15:9" pos:end="73:9">

        <decl_stmt pos:start="15:9" pos:end="15:30"><decl pos:start="15:9" pos:end="15:29"><type pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:15">uint8_t</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">buf</name> <init pos:start="15:22" pos:end="15:29">= <expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:29">buf</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:62"><expr pos:start="19:9" pos:end="19:61"><name pos:start="19:9" pos:end="19:12">size</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="19:61"><name pos:start="19:16" pos:end="19:30">tap_read_packet</name><argument_list pos:start="19:31" pos:end="19:61">(<argument pos:start="19:32" pos:end="19:36"><expr pos:start="19:32" pos:end="19:36"><name pos:start="19:32" pos:end="19:36"><name pos:start="19:32" pos:end="19:32">s</name><operator pos:start="19:33" pos:end="19:34">-&gt;</operator><name pos:start="19:35" pos:end="19:36">fd</name></name></expr></argument>, <argument pos:start="19:39" pos:end="19:44"><expr pos:start="19:39" pos:end="19:44"><name pos:start="19:39" pos:end="19:44"><name pos:start="19:39" pos:end="19:39">s</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:44">buf</name></name></expr></argument>, <argument pos:start="19:47" pos:end="19:60"><expr pos:start="19:47" pos:end="19:60"><sizeof pos:start="19:47" pos:end="19:60">sizeof<argument_list pos:start="19:53" pos:end="19:60">(<argument pos:start="19:54" pos:end="19:59"><expr pos:start="19:54" pos:end="19:59"><name pos:start="19:54" pos:end="19:59"><name pos:start="19:54" pos:end="19:54">s</name><operator pos:start="19:55" pos:end="19:56">-&gt;</operator><name pos:start="19:57" pos:end="19:59">buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:22">(<expr pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:16">size</name> <operator pos:start="21:18" pos:end="21:19">&lt;=</operator> <literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr>)</condition> <block pos:start="21:24" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:18">

            <break pos:start="23:13" pos:end="23:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:55">(<expr pos:start="29:13" pos:end="29:54"><name pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:32">host_vnet_hdr_len</name></name> <operator pos:start="29:34" pos:end="29:35">&amp;&amp;</operator> <operator pos:start="29:37" pos:end="29:37">!</operator><name pos:start="29:38" pos:end="29:54"><name pos:start="29:38" pos:end="29:38">s</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:54">using_vnet_hdr</name></name></expr>)</condition> <block pos:start="29:57" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:41">

            <expr_stmt pos:start="31:13" pos:end="31:41"><expr pos:start="31:13" pos:end="31:40"><name pos:start="31:13" pos:end="31:15">buf</name>  <operator pos:start="31:18" pos:end="31:19">+=</operator> <name pos:start="31:21" pos:end="31:40"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:40">host_vnet_hdr_len</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:41"><expr pos:start="33:13" pos:end="33:40"><name pos:start="33:13" pos:end="33:16">size</name> <operator pos:start="33:18" pos:end="33:19">-=</operator> <name pos:start="33:21" pos:end="33:40"><name pos:start="33:21" pos:end="33:21">s</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:40">host_vnet_hdr_len</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:77"><expr pos:start="39:9" pos:end="39:76"><name pos:start="39:9" pos:end="39:12">size</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:76"><name pos:start="39:16" pos:end="39:37">qemu_send_packet_async</name><argument_list pos:start="39:38" pos:end="39:76">(<argument pos:start="39:39" pos:end="39:44"><expr pos:start="39:39" pos:end="39:44"><operator pos:start="39:39" pos:end="39:39">&amp;</operator><name pos:start="39:40" pos:end="39:44"><name pos:start="39:40" pos:end="39:40">s</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:44">nc</name></name></expr></argument>, <argument pos:start="39:47" pos:end="39:49"><expr pos:start="39:47" pos:end="39:49"><name pos:start="39:47" pos:end="39:49">buf</name></expr></argument>, <argument pos:start="39:52" pos:end="39:55"><expr pos:start="39:52" pos:end="39:55"><name pos:start="39:52" pos:end="39:55">size</name></expr></argument>, <argument pos:start="39:58" pos:end="39:75"><expr pos:start="39:58" pos:end="39:75"><name pos:start="39:58" pos:end="39:75">tap_send_completed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="51:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:22">(<expr pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:16">size</name> <operator pos:start="41:18" pos:end="41:19">==</operator> <literal type="number" pos:start="41:21" pos:end="41:21">0</literal></expr>)</condition> <block pos:start="41:24" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:18">

            <expr_stmt pos:start="43:13" pos:end="43:36"><expr pos:start="43:13" pos:end="43:35"><call pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:25">tap_read_poll</name><argument_list pos:start="43:26" pos:end="43:35">(<argument pos:start="43:27" pos:end="43:27"><expr pos:start="43:27" pos:end="43:27"><name pos:start="43:27" pos:end="43:27">s</name></expr></argument>, <argument pos:start="43:30" pos:end="43:34"><expr pos:start="43:30" pos:end="43:34"><name pos:start="43:30" pos:end="43:34">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="51:9">else if <condition pos:start="47:19" pos:end="47:28">(<expr pos:start="47:20" pos:end="47:27"><name pos:start="47:20" pos:end="47:23">size</name> <operator pos:start="47:25" pos:end="47:25">&lt;</operator> <literal type="number" pos:start="47:27" pos:end="47:27">0</literal></expr>)</condition> <block pos:start="47:30" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:18">

            <break pos:start="49:13" pos:end="49:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="55:9" pos:end="65:11">/*

         * When the host keeps receiving more packets while tap_send() is

         * running we can hog the QEMU global mutex.  Limit the number of

         * packets that are processed per tap_send() callback to prevent

         * stalling the guest.

         */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:15">packets</name><operator pos:start="67:16" pos:end="67:17">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:26">(<expr pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:19">packets</name> <operator pos:start="69:21" pos:end="69:22">&gt;=</operator> <literal type="number" pos:start="69:24" pos:end="69:25">50</literal></expr>)</condition> <block pos:start="69:28" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:18">

            <break pos:start="71:13" pos:end="71:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
