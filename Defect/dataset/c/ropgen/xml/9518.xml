<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9518.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">ssize_t</name></type> <name pos:start="1:9" pos:end="1:21">iov_send_recv</name><parameter_list pos:start="1:22" pos:end="5:36">(<parameter pos:start="1:23" pos:end="1:32"><decl pos:start="1:23" pos:end="1:32"><type pos:start="1:23" pos:end="1:32"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:32">sockfd</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:51"><name pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:40">struct</name> <name pos:start="1:42" pos:end="1:46">iovec</name></name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">iov</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:28">size_t</name></type> <name pos:start="3:30" pos:end="3:35">offset</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:43">size_t</name></type> <name pos:start="3:45" pos:end="3:49">bytes</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:35"><decl pos:start="5:23" pos:end="5:35"><type pos:start="5:23" pos:end="5:35"><name pos:start="5:23" pos:end="5:26">bool</name></type> <name pos:start="5:28" pos:end="5:35">do_sendv</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="163:1">{<block_content pos:start="9:5" pos:end="161:15">

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">iovlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">ssize_t</name></type> <name pos:start="11:13" pos:end="11:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:15">diff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:16">iovec</name></name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:26">last_iov</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:52">/* last_iov is inclusive, so count from one.  */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:15"><expr pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:10">iovlen</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:19"><expr pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:12">last_iov</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:18">iov</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:20"><expr pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:9">bytes</name> <operator pos:start="25:11" pos:end="25:12">+=</operator> <name pos:start="25:14" pos:end="25:19">offset</name></expr>;</expr_stmt>



    <while pos:start="29:5" pos:end="39:5">while <condition pos:start="29:11" pos:end="29:37">(<expr pos:start="29:12" pos:end="29:36"><name pos:start="29:12" pos:end="29:28"><name pos:start="29:12" pos:end="29:19">last_iov</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:28">iov_len</name></name> <operator pos:start="29:30" pos:end="29:30">&lt;</operator> <name pos:start="29:32" pos:end="29:36">bytes</name></expr>)</condition> <block pos:start="29:39" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:17">

        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:13">bytes</name> <operator pos:start="31:15" pos:end="31:16">-=</operator> <name pos:start="31:18" pos:end="31:34"><name pos:start="31:18" pos:end="31:25">last_iov</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:34">iov_len</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:19"><expr pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:16">last_iov</name><operator pos:start="35:17" pos:end="35:18">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:17"><expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:14">iovlen</name><operator pos:start="37:15" pos:end="37:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:8">diff</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <name pos:start="43:12" pos:end="43:28"><name pos:start="43:12" pos:end="43:19">last_iov</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:28">iov_len</name></name> <operator pos:start="43:30" pos:end="43:30">-</operator> <name pos:start="43:32" pos:end="43:36">bytes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:12">last_iov</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:21">iov_len</name></name> <operator pos:start="45:23" pos:end="45:24">-=</operator> <name pos:start="45:26" pos:end="45:29">diff</name></expr>;</expr_stmt>



    <while pos:start="49:5" pos:end="59:5">while <condition pos:start="49:11" pos:end="49:34">(<expr pos:start="49:12" pos:end="49:33"><name pos:start="49:12" pos:end="49:23"><name pos:start="49:12" pos:end="49:14">iov</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:23">iov_len</name></name> <operator pos:start="49:25" pos:end="49:26">&lt;=</operator> <name pos:start="49:28" pos:end="49:33">offset</name></expr>)</condition> <block pos:start="49:36" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:17">

        <expr_stmt pos:start="51:9" pos:end="51:31"><expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:14">offset</name> <operator pos:start="51:16" pos:end="51:17">-=</operator> <name pos:start="51:19" pos:end="51:30"><name pos:start="51:19" pos:end="51:21">iov</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:30">iov_len</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:14"><expr pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:11">iov</name><operator pos:start="55:12" pos:end="55:13">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:17"><expr pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:14">iovlen</name><operator pos:start="57:15" pos:end="57:16">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="63:5" pos:end="63:52"><expr pos:start="63:5" pos:end="63:51"><name pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:7">iov</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:17">iov_base</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <operator pos:start="63:21" pos:end="63:21">(</operator><name pos:start="63:22" pos:end="63:25">char</name> <operator pos:start="63:27" pos:end="63:27">*</operator><operator pos:start="63:28" pos:end="63:28">)</operator> <name pos:start="63:30" pos:end="63:42"><name pos:start="63:30" pos:end="63:32">iov</name><operator pos:start="63:33" pos:end="63:34">-&gt;</operator><name pos:start="63:35" pos:end="63:42">iov_base</name></name> <operator pos:start="63:44" pos:end="63:44">+</operator> <name pos:start="63:46" pos:end="63:51">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:27"><expr pos:start="65:5" pos:end="65:26"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:7">iov</name><operator pos:start="65:8" pos:end="65:9">-&gt;</operator><name pos:start="65:10" pos:end="65:16">iov_len</name></name> <operator pos:start="65:18" pos:end="65:19">-=</operator> <name pos:start="65:21" pos:end="65:26">offset</name></expr>;</expr_stmt>



    <block pos:start="69:5" pos:end="149:5">{<block_content pos:start="73:9" pos:end="148:0">

<cpp:if pos:start="71:1" pos:end="71:48">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:48"><name pos:start="71:5" pos:end="71:11">defined</name> <name pos:start="71:13" pos:end="71:24">CONFIG_IOVEC</name> <operator pos:start="71:26" pos:end="71:27">&amp;&amp;</operator> <name pos:start="71:29" pos:end="71:35">defined</name> <name pos:start="71:37" pos:end="71:48">CONFIG_POSIX</name></expr></cpp:if>

        <decl_stmt pos:start="73:9" pos:end="73:26"><decl pos:start="73:9" pos:end="73:25"><type pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:14">struct</name> <name pos:start="73:16" pos:end="73:21">msghdr</name></name></type> <name pos:start="73:23" pos:end="73:25">msg</name></decl>;</decl_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:37"><expr pos:start="75:9" pos:end="75:36"><call pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:14">memset</name><argument_list pos:start="75:15" pos:end="75:36">(<argument pos:start="75:16" pos:end="75:19"><expr pos:start="75:16" pos:end="75:19"><operator pos:start="75:16" pos:end="75:16">&amp;</operator><name pos:start="75:17" pos:end="75:19">msg</name></expr></argument>, <argument pos:start="75:22" pos:end="75:22"><expr pos:start="75:22" pos:end="75:22"><literal type="number" pos:start="75:22" pos:end="75:22">0</literal></expr></argument>, <argument pos:start="75:25" pos:end="75:35"><expr pos:start="75:25" pos:end="75:35"><sizeof pos:start="75:25" pos:end="75:35">sizeof<argument_list pos:start="75:31" pos:end="75:35">(<argument pos:start="75:32" pos:end="75:34"><expr pos:start="75:32" pos:end="75:34"><name pos:start="75:32" pos:end="75:34">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:26"><expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:19"><name pos:start="77:9" pos:end="77:11">msg</name><operator pos:start="77:12" pos:end="77:12">.</operator><name pos:start="77:13" pos:end="77:19">msg_iov</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:25">iov</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:32"><expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:11">msg</name><operator pos:start="79:12" pos:end="79:12">.</operator><name pos:start="79:13" pos:end="79:22">msg_iovlen</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <name pos:start="79:26" pos:end="79:31">iovlen</name></expr>;</expr_stmt>



        <do pos:start="83:9" pos:end="98:0">do <block pos:start="83:12" pos:end="95:9">{<block_content pos:start="85:13" pos:end="93:13">

            <if_stmt pos:start="85:13" pos:end="93:13"><if pos:start="85:13" pos:end="89:13">if <condition pos:start="85:16" pos:end="85:25">(<expr pos:start="85:17" pos:end="85:24"><name pos:start="85:17" pos:end="85:24">do_sendv</name></expr>)</condition> <block pos:start="85:27" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:47">

                <expr_stmt pos:start="87:17" pos:end="87:47"><expr pos:start="87:17" pos:end="87:46"><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="87:46"><name pos:start="87:23" pos:end="87:29">sendmsg</name><argument_list pos:start="87:30" pos:end="87:46">(<argument pos:start="87:31" pos:end="87:36"><expr pos:start="87:31" pos:end="87:36"><name pos:start="87:31" pos:end="87:36">sockfd</name></expr></argument>, <argument pos:start="87:39" pos:end="87:42"><expr pos:start="87:39" pos:end="87:42"><operator pos:start="87:39" pos:end="87:39">&amp;</operator><name pos:start="87:40" pos:end="87:42">msg</name></expr></argument>, <argument pos:start="87:45" pos:end="87:45"><expr pos:start="87:45" pos:end="87:45"><literal type="number" pos:start="87:45" pos:end="87:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="89:15" pos:end="93:13">else <block pos:start="89:20" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:47">

                <expr_stmt pos:start="91:17" pos:end="91:47"><expr pos:start="91:17" pos:end="91:46"><name pos:start="91:17" pos:end="91:19">ret</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="91:46"><name pos:start="91:23" pos:end="91:29">recvmsg</name><argument_list pos:start="91:30" pos:end="91:46">(<argument pos:start="91:31" pos:end="91:36"><expr pos:start="91:31" pos:end="91:36"><name pos:start="91:31" pos:end="91:36">sockfd</name></expr></argument>, <argument pos:start="91:39" pos:end="91:42"><expr pos:start="91:39" pos:end="91:42"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:42">msg</name></expr></argument>, <argument pos:start="91:45" pos:end="91:45"><expr pos:start="91:45" pos:end="91:45"><literal type="number" pos:start="91:45" pos:end="91:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block> while <condition pos:start="95:17" pos:end="95:45">(<expr pos:start="95:18" pos:end="95:44"><name pos:start="95:18" pos:end="95:20">ret</name> <operator pos:start="95:22" pos:end="95:23">==</operator> <operator pos:start="95:25" pos:end="95:25">-</operator><literal type="number" pos:start="95:26" pos:end="95:26">1</literal> <operator pos:start="95:28" pos:end="95:29">&amp;&amp;</operator> <name pos:start="95:31" pos:end="95:35">errno</name> <operator pos:start="95:37" pos:end="95:38">==</operator> <name pos:start="95:40" pos:end="95:44">EINTR</name></expr>)</condition>;</do>

<cpp:else pos:start="97:1" pos:end="97:5">#<cpp:directive pos:start="97:2" pos:end="97:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="99:9" pos:end="99:30"><decl pos:start="99:9" pos:end="99:29"><type pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:20"><name pos:start="99:9" pos:end="99:14">struct</name> <name pos:start="99:16" pos:end="99:20">iovec</name></name> <modifier pos:start="99:22" pos:end="99:22">*</modifier></type><name pos:start="99:23" pos:end="99:23">p</name> <init pos:start="99:25" pos:end="99:29">= <expr pos:start="99:27" pos:end="99:29"><name pos:start="99:27" pos:end="99:29">iov</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:16"><expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <literal type="number" pos:start="101:15" pos:end="101:15">0</literal></expr>;</expr_stmt>

        <while pos:start="103:9" pos:end="148:0">while <condition pos:start="103:15" pos:end="103:26">(<expr pos:start="103:16" pos:end="103:25"><name pos:start="103:16" pos:end="103:21">iovlen</name> <operator pos:start="103:23" pos:end="103:23">&gt;</operator> <literal type="number" pos:start="103:25" pos:end="103:25">0</literal></expr>)</condition> <block pos:start="103:28" pos:end="148:0">{<block_content pos:start="105:13" pos:end="143:26">

            <decl_stmt pos:start="105:13" pos:end="105:19"><decl pos:start="105:13" pos:end="105:18"><type pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">int</name></type> <name pos:start="105:17" pos:end="105:18">rc</name></decl>;</decl_stmt>

            <if_stmt pos:start="107:13" pos:end="115:13"><if pos:start="107:13" pos:end="111:13">if <condition pos:start="107:16" pos:end="107:25">(<expr pos:start="107:17" pos:end="107:24"><name pos:start="107:17" pos:end="107:24">do_sendv</name></expr>)</condition> <block pos:start="107:27" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:62">

                <expr_stmt pos:start="109:17" pos:end="109:62"><expr pos:start="109:17" pos:end="109:61"><name pos:start="109:17" pos:end="109:18">rc</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <call pos:start="109:22" pos:end="109:61"><name pos:start="109:22" pos:end="109:25">send</name><argument_list pos:start="109:26" pos:end="109:61">(<argument pos:start="109:27" pos:end="109:32"><expr pos:start="109:27" pos:end="109:32"><name pos:start="109:27" pos:end="109:32">sockfd</name></expr></argument>, <argument pos:start="109:35" pos:end="109:45"><expr pos:start="109:35" pos:end="109:45"><name pos:start="109:35" pos:end="109:45"><name pos:start="109:35" pos:end="109:35">p</name><operator pos:start="109:36" pos:end="109:37">-&gt;</operator><name pos:start="109:38" pos:end="109:45">iov_base</name></name></expr></argument>, <argument pos:start="109:48" pos:end="109:57"><expr pos:start="109:48" pos:end="109:57"><name pos:start="109:48" pos:end="109:57"><name pos:start="109:48" pos:end="109:48">p</name><operator pos:start="109:49" pos:end="109:50">-&gt;</operator><name pos:start="109:51" pos:end="109:57">iov_len</name></name></expr></argument>, <argument pos:start="109:60" pos:end="109:60"><expr pos:start="109:60" pos:end="109:60"><literal type="number" pos:start="109:60" pos:end="109:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="111:15" pos:end="115:13">else <block pos:start="111:20" pos:end="115:13">{<block_content pos:start="113:17" pos:end="113:67">

                <expr_stmt pos:start="113:17" pos:end="113:67"><expr pos:start="113:17" pos:end="113:66"><name pos:start="113:17" pos:end="113:18">rc</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <call pos:start="113:22" pos:end="113:66"><name pos:start="113:22" pos:end="113:30">qemu_recv</name><argument_list pos:start="113:31" pos:end="113:66">(<argument pos:start="113:32" pos:end="113:37"><expr pos:start="113:32" pos:end="113:37"><name pos:start="113:32" pos:end="113:37">sockfd</name></expr></argument>, <argument pos:start="113:40" pos:end="113:50"><expr pos:start="113:40" pos:end="113:50"><name pos:start="113:40" pos:end="113:50"><name pos:start="113:40" pos:end="113:40">p</name><operator pos:start="113:41" pos:end="113:42">-&gt;</operator><name pos:start="113:43" pos:end="113:50">iov_base</name></name></expr></argument>, <argument pos:start="113:53" pos:end="113:62"><expr pos:start="113:53" pos:end="113:62"><name pos:start="113:53" pos:end="113:62"><name pos:start="113:53" pos:end="113:53">p</name><operator pos:start="113:54" pos:end="113:55">-&gt;</operator><name pos:start="113:56" pos:end="113:62">iov_len</name></name></expr></argument>, <argument pos:start="113:65" pos:end="113:65"><expr pos:start="113:65" pos:end="113:65"><literal type="number" pos:start="113:65" pos:end="113:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="117:13" pos:end="133:13"><if pos:start="117:13" pos:end="133:13">if <condition pos:start="117:16" pos:end="117:25">(<expr pos:start="117:17" pos:end="117:24"><name pos:start="117:17" pos:end="117:18">rc</name> <operator pos:start="117:20" pos:end="117:21">==</operator> <operator pos:start="117:23" pos:end="117:23">-</operator><literal type="number" pos:start="117:24" pos:end="117:24">1</literal></expr>)</condition> <block pos:start="117:27" pos:end="133:13">{<block_content pos:start="119:17" pos:end="131:22">

                <if_stmt pos:start="119:17" pos:end="123:17"><if pos:start="119:17" pos:end="123:17">if <condition pos:start="119:20" pos:end="119:35">(<expr pos:start="119:21" pos:end="119:34"><name pos:start="119:21" pos:end="119:25">errno</name> <operator pos:start="119:27" pos:end="119:28">==</operator> <name pos:start="119:30" pos:end="119:34">EINTR</name></expr>)</condition> <block pos:start="119:37" pos:end="123:17">{<block_content pos:start="121:21" pos:end="121:29">

                    <continue pos:start="121:21" pos:end="121:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="125:17" pos:end="129:17"><if pos:start="125:17" pos:end="129:17">if <condition pos:start="125:20" pos:end="125:29">(<expr pos:start="125:21" pos:end="125:28"><name pos:start="125:21" pos:end="125:23">ret</name> <operator pos:start="125:25" pos:end="125:26">==</operator> <literal type="number" pos:start="125:28" pos:end="125:28">0</literal></expr>)</condition> <block pos:start="125:31" pos:end="129:17">{<block_content pos:start="127:21" pos:end="127:29">

                    <expr_stmt pos:start="127:21" pos:end="127:29"><expr pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:23">ret</name> <operator pos:start="127:25" pos:end="127:25">=</operator> <operator pos:start="127:27" pos:end="127:27">-</operator><literal type="number" pos:start="127:28" pos:end="127:28">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="131:17" pos:end="131:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="135:13" pos:end="139:13"><if pos:start="135:13" pos:end="139:13">if <condition pos:start="135:16" pos:end="135:24">(<expr pos:start="135:17" pos:end="135:23"><name pos:start="135:17" pos:end="135:18">rc</name> <operator pos:start="135:20" pos:end="135:21">==</operator> <literal type="number" pos:start="135:23" pos:end="135:23">0</literal></expr>)</condition> <block pos:start="135:26" pos:end="139:13">{<block_content pos:start="137:17" pos:end="137:22">

                <break pos:start="137:17" pos:end="137:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:22"><expr pos:start="141:13" pos:end="141:21"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:18">+=</operator> <name pos:start="141:20" pos:end="141:21">rc</name></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:26"><expr pos:start="143:13" pos:end="143:20"><name pos:start="143:13" pos:end="143:18">iovlen</name><operator pos:start="143:19" pos:end="143:20">--</operator></expr><operator pos:start="143:21" pos:end="143:21">,</operator> <expr pos:start="143:23" pos:end="143:25"><name pos:start="143:23" pos:end="143:23">p</name><operator pos:start="143:24" pos:end="143:25">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block>



    <comment type="block" pos:start="153:5" pos:end="153:32">/* Undo the changes above */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:52"><expr pos:start="155:5" pos:end="155:51"><name pos:start="155:5" pos:end="155:17"><name pos:start="155:5" pos:end="155:7">iov</name><operator pos:start="155:8" pos:end="155:9">-&gt;</operator><name pos:start="155:10" pos:end="155:17">iov_base</name></name> <operator pos:start="155:19" pos:end="155:19">=</operator> <operator pos:start="155:21" pos:end="155:21">(</operator><name pos:start="155:22" pos:end="155:25">char</name> <operator pos:start="155:27" pos:end="155:27">*</operator><operator pos:start="155:28" pos:end="155:28">)</operator> <name pos:start="155:30" pos:end="155:42"><name pos:start="155:30" pos:end="155:32">iov</name><operator pos:start="155:33" pos:end="155:34">-&gt;</operator><name pos:start="155:35" pos:end="155:42">iov_base</name></name> <operator pos:start="155:44" pos:end="155:44">-</operator> <name pos:start="155:46" pos:end="155:51">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:27"><expr pos:start="157:5" pos:end="157:26"><name pos:start="157:5" pos:end="157:16"><name pos:start="157:5" pos:end="157:7">iov</name><operator pos:start="157:8" pos:end="157:9">-&gt;</operator><name pos:start="157:10" pos:end="157:16">iov_len</name></name> <operator pos:start="157:18" pos:end="157:19">+=</operator> <name pos:start="157:21" pos:end="157:26">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:30"><expr pos:start="159:5" pos:end="159:29"><name pos:start="159:5" pos:end="159:21"><name pos:start="159:5" pos:end="159:12">last_iov</name><operator pos:start="159:13" pos:end="159:14">-&gt;</operator><name pos:start="159:15" pos:end="159:21">iov_len</name></name> <operator pos:start="159:23" pos:end="159:24">+=</operator> <name pos:start="159:26" pos:end="159:29">diff</name></expr>;</expr_stmt>

    <return pos:start="161:5" pos:end="161:15">return <expr pos:start="161:12" pos:end="161:14"><name pos:start="161:12" pos:end="161:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
