<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23813.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">spapr_populate_pci_devices_dt</name><parameter_list pos:start="1:42" pos:end="3:55">(<parameter pos:start="1:43" pos:end="1:53"><decl pos:start="1:43" pos:end="1:53"><type pos:start="1:43" pos:end="1:53"><name pos:start="1:43" pos:end="1:48">PCIBus</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">bus</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:70"><decl pos:start="1:56" pos:end="1:70"><type pos:start="1:56" pos:end="1:70"><name pos:start="1:56" pos:end="1:64">PCIDevice</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">pdev</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:54"><decl pos:start="3:43" pos:end="3:54"><type pos:start="3:43" pos:end="3:54"><name pos:start="3:43" pos:end="3:46">void</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:54">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:32">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">PCIBus</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:19">sec_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">sPAPRFDT</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">p</name> <init pos:start="9:17" pos:end="9:24">= <expr pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">sPAPRFDT</name></type> <name pos:start="13:14" pos:end="13:18">s_fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:68"><decl pos:start="15:5" pos:end="15:67"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:22">drc_index</name> <init pos:start="15:24" pos:end="15:67">= <expr pos:start="15:26" pos:end="15:67"><call pos:start="15:26" pos:end="15:67"><name pos:start="15:26" pos:end="15:52">spapr_phb_get_pci_drc_index</name><argument_list pos:start="15:53" pos:end="15:67">(<argument pos:start="15:54" pos:end="15:60"><expr pos:start="15:54" pos:end="15:60"><name pos:start="15:54" pos:end="15:60"><name pos:start="15:54" pos:end="15:54">p</name><operator pos:start="15:55" pos:end="15:56">-&gt;</operator><name pos:start="15:57" pos:end="15:60">sphb</name></name></expr></argument>, <argument pos:start="15:63" pos:end="15:66"><expr pos:start="15:63" pos:end="15:66"><name pos:start="15:63" pos:end="15:66">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="23:60"><expr pos:start="19:5" pos:end="23:59"><name pos:start="19:5" pos:end="19:10">offset</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="23:59"><name pos:start="19:14" pos:end="19:38">spapr_create_pci_child_dt</name><argument_list pos:start="19:39" pos:end="23:59">(<argument pos:start="19:40" pos:end="19:46"><expr pos:start="19:40" pos:end="19:46"><name pos:start="19:40" pos:end="19:46"><name pos:start="19:40" pos:end="19:40">p</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:46">sphb</name></name></expr></argument>, <argument pos:start="19:49" pos:end="19:52"><expr pos:start="19:49" pos:end="19:52"><name pos:start="19:49" pos:end="19:52">pdev</name></expr></argument>,

                                       <argument pos:start="21:40" pos:end="21:48"><expr pos:start="21:40" pos:end="21:48"><name pos:start="21:40" pos:end="21:48">drc_index</name></expr></argument>, <argument pos:start="21:51" pos:end="21:54"><expr pos:start="21:51" pos:end="21:54"><name pos:start="21:51" pos:end="21:54">NULL</name></expr></argument>,

                                       <argument pos:start="23:40" pos:end="23:45"><expr pos:start="23:40" pos:end="23:45"><name pos:start="23:40" pos:end="23:45"><name pos:start="23:40" pos:end="23:40">p</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:45">fdt</name></name></expr></argument>, <argument pos:start="23:48" pos:end="23:58"><expr pos:start="23:48" pos:end="23:58"><name pos:start="23:48" pos:end="23:58"><name pos:start="23:48" pos:end="23:48">p</name><operator pos:start="23:49" pos:end="23:50">-&gt;</operator><name pos:start="23:51" pos:end="23:58">node_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:15">offset</name></expr>)</condition> <block pos:start="25:18" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:68"><expr pos:start="27:9" pos:end="27:67"><call pos:start="27:9" pos:end="27:67"><name pos:start="27:9" pos:end="27:20">error_report</name><argument_list pos:start="27:21" pos:end="27:67">(<argument pos:start="27:22" pos:end="27:66"><expr pos:start="27:22" pos:end="27:66"><literal type="string" pos:start="27:22" pos:end="27:66">"Failed to create pci child device tree node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="37:33">(<expr pos:start="35:9" pos:end="37:32"><operator pos:start="35:9" pos:end="35:9">(</operator><call pos:start="35:10" pos:end="35:58"><name pos:start="35:10" pos:end="35:32">pci_default_read_config</name><argument_list pos:start="35:33" pos:end="35:58">(<argument pos:start="35:34" pos:end="35:37"><expr pos:start="35:34" pos:end="35:37"><name pos:start="35:34" pos:end="35:37">pdev</name></expr></argument>, <argument pos:start="35:40" pos:end="35:54"><expr pos:start="35:40" pos:end="35:54"><name pos:start="35:40" pos:end="35:54">PCI_HEADER_TYPE</name></expr></argument>, <argument pos:start="35:57" pos:end="35:57"><expr pos:start="35:57" pos:end="35:57"><literal type="number" pos:start="35:57" pos:end="35:57">1</literal></expr></argument>)</argument_list></call> <operator pos:start="35:60" pos:end="35:61">!=</operator>

         <name pos:start="37:10" pos:end="37:31">PCI_HEADER_TYPE_BRIDGE</name><operator pos:start="37:32" pos:end="37:32">)</operator></expr>)</condition> <block pos:start="37:35" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:15">

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:55"><expr pos:start="45:5" pos:end="45:54"><name pos:start="45:5" pos:end="45:11">sec_bus</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:54"><name pos:start="45:15" pos:end="45:36">pci_bridge_get_sec_bus</name><argument_list pos:start="45:37" pos:end="45:54">(<argument pos:start="45:38" pos:end="45:53"><expr pos:start="45:38" pos:end="45:53"><call pos:start="45:38" pos:end="45:53"><name pos:start="45:38" pos:end="45:47">PCI_BRIDGE</name><argument_list pos:start="45:48" pos:end="45:53">(<argument pos:start="45:49" pos:end="45:52"><expr pos:start="45:49" pos:end="45:52"><name pos:start="45:49" pos:end="45:52">pdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:16">sec_bus</name></expr>)</condition> <block pos:start="47:19" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:15">

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:13"><name pos:start="55:5" pos:end="55:9">s_fdt</name><operator pos:start="55:10" pos:end="55:10">.</operator><name pos:start="55:11" pos:end="55:13">fdt</name></name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:17">p</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:22">fdt</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:28"><expr pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:9">s_fdt</name><operator pos:start="57:10" pos:end="57:10">.</operator><name pos:start="57:11" pos:end="57:18">node_off</name></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <name pos:start="57:22" pos:end="57:27">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:25"><expr pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:14"><name pos:start="59:5" pos:end="59:9">s_fdt</name><operator pos:start="59:10" pos:end="59:10">.</operator><name pos:start="59:11" pos:end="59:14">sphb</name></name> <operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:24"><name pos:start="59:18" pos:end="59:18">p</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:24">sphb</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="65:32"><expr pos:start="61:5" pos:end="65:31"><call pos:start="61:5" pos:end="65:31"><name pos:start="61:5" pos:end="61:23">pci_for_each_device</name><argument_list pos:start="61:24" pos:end="65:31">(<argument pos:start="61:25" pos:end="61:31"><expr pos:start="61:25" pos:end="61:31"><name pos:start="61:25" pos:end="61:31">sec_bus</name></expr></argument>, <argument pos:start="61:34" pos:end="61:53"><expr pos:start="61:34" pos:end="61:53"><call pos:start="61:34" pos:end="61:53"><name pos:start="61:34" pos:end="61:44">pci_bus_num</name><argument_list pos:start="61:45" pos:end="61:53">(<argument pos:start="61:46" pos:end="61:52"><expr pos:start="61:46" pos:end="61:52"><name pos:start="61:46" pos:end="61:52">sec_bus</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="63:25" pos:end="63:53"><expr pos:start="63:25" pos:end="63:53"><name pos:start="63:25" pos:end="63:53">spapr_populate_pci_devices_dt</name></expr></argument>,

                        <argument pos:start="65:25" pos:end="65:30"><expr pos:start="65:25" pos:end="65:30"><operator pos:start="65:25" pos:end="65:25">&amp;</operator><name pos:start="65:26" pos:end="65:30">s_fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
