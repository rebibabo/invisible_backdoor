<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25350.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">zynq_init</name><parameter_list pos:start="1:22" pos:end="1:44">(<parameter pos:start="1:23" pos:end="1:43"><decl pos:start="1:23" pos:end="1:43"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:34">MachineState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:43">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="283:1">{<block_content pos:start="5:5" pos:end="281:53">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">ObjectClass</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:23">cpu_oc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">ARMCPU</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:15">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:58"><decl pos:start="19:5" pos:end="19:57"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:35">address_space_mem</name> <init pos:start="19:37" pos:end="19:57">= <expr pos:start="19:39" pos:end="19:57"><call pos:start="19:39" pos:end="19:57"><name pos:start="19:39" pos:end="19:55">get_system_memory</name><argument_list pos:start="19:56" pos:end="19:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:51"><decl pos:start="21:5" pos:end="21:50"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:25">ext_ram</name> <init pos:start="21:27" pos:end="21:50">= <expr pos:start="21:29" pos:end="21:50"><call pos:start="21:29" pos:end="21:50"><name pos:start="21:29" pos:end="21:33">g_new</name><argument_list pos:start="21:34" pos:end="21:50">(<argument pos:start="21:35" pos:end="21:46"><expr pos:start="21:35" pos:end="21:46"><name pos:start="21:35" pos:end="21:46">MemoryRegion</name></expr></argument>, <argument pos:start="21:49" pos:end="21:49"><expr pos:start="21:49" pos:end="21:49"><literal type="number" pos:start="21:49" pos:end="21:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:51"><decl pos:start="23:5" pos:end="23:50"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:25">ocm_ram</name> <init pos:start="23:27" pos:end="23:50">= <expr pos:start="23:29" pos:end="23:50"><call pos:start="23:29" pos:end="23:50"><name pos:start="23:29" pos:end="23:33">g_new</name><argument_list pos:start="23:34" pos:end="23:50">(<argument pos:start="23:35" pos:end="23:46"><expr pos:start="23:35" pos:end="23:46"><name pos:start="23:35" pos:end="23:46">MemoryRegion</name></expr></argument>, <argument pos:start="23:49" pos:end="23:49"><expr pos:start="23:49" pos:end="23:49"><literal type="number" pos:start="23:49" pos:end="23:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:15">DeviceState</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">SysBusDevice</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:24">busdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">qemu_irq</name></type> <name pos:start="29:14" pos:end="29:20"><name pos:start="29:14" pos:end="29:16">pic</name><index pos:start="29:17" pos:end="29:20">[<expr pos:start="29:18" pos:end="29:19"><literal type="number" pos:start="29:18" pos:end="29:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:9">Error</name> <modifier pos:start="31:11" pos:end="31:11">*</modifier></type><name pos:start="31:12" pos:end="31:14">err</name> <init pos:start="31:16" pos:end="31:21">= <expr pos:start="31:18" pos:end="31:21"><name pos:start="31:18" pos:end="31:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:10"><decl pos:start="33:5" pos:end="33:9"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:18">cpu_model</name></expr>)</condition> <block pos:start="37:21" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:32">

        <expr_stmt pos:start="39:9" pos:end="39:32"><expr pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:17">cpu_model</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="string" pos:start="39:21" pos:end="39:31">"cortex-a9"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:56"><expr pos:start="43:5" pos:end="43:55"><name pos:start="43:5" pos:end="43:10">cpu_oc</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:55"><name pos:start="43:14" pos:end="43:30">cpu_class_by_name</name><argument_list pos:start="43:31" pos:end="43:55">(<argument pos:start="43:32" pos:end="43:43"><expr pos:start="43:32" pos:end="43:43"><name pos:start="43:32" pos:end="43:43">TYPE_ARM_CPU</name></expr></argument>, <argument pos:start="43:46" pos:end="43:54"><expr pos:start="43:46" pos:end="43:54"><name pos:start="43:46" pos:end="43:54">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:61"><expr pos:start="47:5" pos:end="47:60"><name pos:start="47:5" pos:end="47:7">cpu</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:60"><name pos:start="47:11" pos:end="47:17">ARM_CPU</name><argument_list pos:start="47:18" pos:end="47:60">(<argument pos:start="47:19" pos:end="47:59"><expr pos:start="47:19" pos:end="47:59"><call pos:start="47:19" pos:end="47:59"><name pos:start="47:19" pos:end="47:28">object_new</name><argument_list pos:start="47:29" pos:end="47:59">(<argument pos:start="47:30" pos:end="47:58"><expr pos:start="47:30" pos:end="47:58"><call pos:start="47:30" pos:end="47:58"><name pos:start="47:30" pos:end="47:50">object_class_get_name</name><argument_list pos:start="47:51" pos:end="47:58">(<argument pos:start="47:52" pos:end="47:57"><expr pos:start="47:52" pos:end="47:57"><name pos:start="47:52" pos:end="47:57">cpu_oc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:72"><expr pos:start="51:5" pos:end="51:71"><call pos:start="51:5" pos:end="51:71"><name pos:start="51:5" pos:end="51:27">object_property_set_int</name><argument_list pos:start="51:28" pos:end="51:71">(<argument pos:start="51:29" pos:end="51:39"><expr pos:start="51:29" pos:end="51:39"><call pos:start="51:29" pos:end="51:39"><name pos:start="51:29" pos:end="51:34">OBJECT</name><argument_list pos:start="51:35" pos:end="51:39">(<argument pos:start="51:36" pos:end="51:38"><expr pos:start="51:36" pos:end="51:38"><name pos:start="51:36" pos:end="51:38">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:42" pos:end="51:56"><expr pos:start="51:42" pos:end="51:56"><name pos:start="51:42" pos:end="51:56">ZYNQ_BOARD_MIDR</name></expr></argument>, <argument pos:start="51:59" pos:end="51:64"><expr pos:start="51:59" pos:end="51:64"><literal type="string" pos:start="51:59" pos:end="51:64">"midr"</literal></expr></argument>, <argument pos:start="51:67" pos:end="51:70"><expr pos:start="51:67" pos:end="51:70"><operator pos:start="51:67" pos:end="51:67">&amp;</operator><name pos:start="51:68" pos:end="51:70">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:12">(<expr pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">err</name></expr>)</condition> <block pos:start="53:14" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:16">

        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><call pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:20">error_report</name><argument_list pos:start="55:21" pos:end="55:49">(<argument pos:start="55:22" pos:end="55:25"><expr pos:start="55:22" pos:end="55:25"><literal type="string" pos:start="55:22" pos:end="55:25">"%s"</literal></expr></argument>, <argument pos:start="55:28" pos:end="55:48"><expr pos:start="55:28" pos:end="55:48"><call pos:start="55:28" pos:end="55:48"><name pos:start="55:28" pos:end="55:43">error_get_pretty</name><argument_list pos:start="55:44" pos:end="55:48">(<argument pos:start="55:45" pos:end="55:47"><expr pos:start="55:45" pos:end="55:47"><name pos:start="55:45" pos:end="55:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:15">(<argument pos:start="57:14" pos:end="57:14"><expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:80"><expr pos:start="63:5" pos:end="63:79"><call pos:start="63:5" pos:end="63:79"><name pos:start="63:5" pos:end="63:27">object_property_set_int</name><argument_list pos:start="63:28" pos:end="63:79">(<argument pos:start="63:29" pos:end="63:39"><expr pos:start="63:29" pos:end="63:39"><call pos:start="63:29" pos:end="63:39"><name pos:start="63:29" pos:end="63:34">OBJECT</name><argument_list pos:start="63:35" pos:end="63:39">(<argument pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><name pos:start="63:36" pos:end="63:38">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="63:42" pos:end="63:58"><expr pos:start="63:42" pos:end="63:58"><name pos:start="63:42" pos:end="63:58">MPCORE_PERIPHBASE</name></expr></argument>, <argument pos:start="63:61" pos:end="63:72"><expr pos:start="63:61" pos:end="63:72"><literal type="string" pos:start="63:61" pos:end="63:72">"reset-cbar"</literal></expr></argument>, <argument pos:start="63:75" pos:end="63:78"><expr pos:start="63:75" pos:end="63:78"><operator pos:start="63:75" pos:end="63:75">&amp;</operator><name pos:start="63:76" pos:end="63:78">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:12">(<expr pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">err</name></expr>)</condition> <block pos:start="65:14" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:16">

        <expr_stmt pos:start="67:9" pos:end="67:50"><expr pos:start="67:9" pos:end="67:49"><call pos:start="67:9" pos:end="67:49"><name pos:start="67:9" pos:end="67:20">error_report</name><argument_list pos:start="67:21" pos:end="67:49">(<argument pos:start="67:22" pos:end="67:25"><expr pos:start="67:22" pos:end="67:25"><literal type="string" pos:start="67:22" pos:end="67:25">"%s"</literal></expr></argument>, <argument pos:start="67:28" pos:end="67:48"><expr pos:start="67:28" pos:end="67:48"><call pos:start="67:28" pos:end="67:48"><name pos:start="67:28" pos:end="67:43">error_get_pretty</name><argument_list pos:start="67:44" pos:end="67:48">(<argument pos:start="67:45" pos:end="67:47"><expr pos:start="67:45" pos:end="67:47"><name pos:start="67:45" pos:end="67:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:16"><expr pos:start="69:9" pos:end="69:15"><call pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:12">exit</name><argument_list pos:start="69:13" pos:end="69:15">(<argument pos:start="69:14" pos:end="69:14"><expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:66"><expr pos:start="73:5" pos:end="73:65"><call pos:start="73:5" pos:end="73:65"><name pos:start="73:5" pos:end="73:28">object_property_set_bool</name><argument_list pos:start="73:29" pos:end="73:65">(<argument pos:start="73:30" pos:end="73:40"><expr pos:start="73:30" pos:end="73:40"><call pos:start="73:30" pos:end="73:40"><name pos:start="73:30" pos:end="73:35">OBJECT</name><argument_list pos:start="73:36" pos:end="73:40">(<argument pos:start="73:37" pos:end="73:39"><expr pos:start="73:37" pos:end="73:39"><name pos:start="73:37" pos:end="73:39">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:43" pos:end="73:46"><expr pos:start="73:43" pos:end="73:46"><name pos:start="73:43" pos:end="73:46">true</name></expr></argument>, <argument pos:start="73:49" pos:end="73:58"><expr pos:start="73:49" pos:end="73:58"><literal type="string" pos:start="73:49" pos:end="73:58">"realized"</literal></expr></argument>, <argument pos:start="73:61" pos:end="73:64"><expr pos:start="73:61" pos:end="73:64"><operator pos:start="73:61" pos:end="73:61">&amp;</operator><name pos:start="73:62" pos:end="73:64">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:12">(<expr pos:start="75:9" pos:end="75:11"><name pos:start="75:9" pos:end="75:11">err</name></expr>)</condition> <block pos:start="75:14" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:16">

        <expr_stmt pos:start="77:9" pos:end="77:50"><expr pos:start="77:9" pos:end="77:49"><call pos:start="77:9" pos:end="77:49"><name pos:start="77:9" pos:end="77:20">error_report</name><argument_list pos:start="77:21" pos:end="77:49">(<argument pos:start="77:22" pos:end="77:25"><expr pos:start="77:22" pos:end="77:25"><literal type="string" pos:start="77:22" pos:end="77:25">"%s"</literal></expr></argument>, <argument pos:start="77:28" pos:end="77:48"><expr pos:start="77:28" pos:end="77:48"><call pos:start="77:28" pos:end="77:48"><name pos:start="77:28" pos:end="77:43">error_get_pretty</name><argument_list pos:start="77:44" pos:end="77:48">(<argument pos:start="77:45" pos:end="77:47"><expr pos:start="77:45" pos:end="77:47"><name pos:start="77:45" pos:end="77:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:16"><expr pos:start="79:9" pos:end="79:15"><call pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:12">exit</name><argument_list pos:start="79:13" pos:end="79:15">(<argument pos:start="79:14" pos:end="79:14"><expr pos:start="79:14" pos:end="79:14"><literal type="number" pos:start="79:14" pos:end="79:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:21">/* max 2GB ram */</comment>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:30">(<expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:16">ram_size</name> <operator pos:start="87:18" pos:end="87:18">&gt;</operator> <literal type="number" pos:start="87:20" pos:end="87:29">0x80000000</literal></expr>)</condition> <block pos:start="87:32" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:30">

        <expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:16">ram_size</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <literal type="number" pos:start="89:20" pos:end="89:29">0x80000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:40">/* DDR remapped to address zero.  */</comment>

    <expr_stmt pos:start="97:5" pos:end="99:41"><expr pos:start="97:5" pos:end="99:40"><call pos:start="97:5" pos:end="99:40"><name pos:start="97:5" pos:end="97:26">memory_region_init_ram</name><argument_list pos:start="97:27" pos:end="99:40">(<argument pos:start="97:28" pos:end="97:34"><expr pos:start="97:28" pos:end="97:34"><name pos:start="97:28" pos:end="97:34">ext_ram</name></expr></argument>, <argument pos:start="97:37" pos:end="97:40"><expr pos:start="97:37" pos:end="97:40"><name pos:start="97:37" pos:end="97:40">NULL</name></expr></argument>, <argument pos:start="97:43" pos:end="97:56"><expr pos:start="97:43" pos:end="97:56"><literal type="string" pos:start="97:43" pos:end="97:56">"zynq.ext_ram"</literal></expr></argument>, <argument pos:start="97:59" pos:end="97:66"><expr pos:start="97:59" pos:end="97:66"><name pos:start="97:59" pos:end="97:66">ram_size</name></expr></argument>,

                           <argument pos:start="99:28" pos:end="99:39"><expr pos:start="99:28" pos:end="99:39"><operator pos:start="99:28" pos:end="99:28">&amp;</operator><name pos:start="99:29" pos:end="99:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:41"><expr pos:start="101:5" pos:end="101:40"><call pos:start="101:5" pos:end="101:40"><name pos:start="101:5" pos:end="101:31">vmstate_register_ram_global</name><argument_list pos:start="101:32" pos:end="101:40">(<argument pos:start="101:33" pos:end="101:39"><expr pos:start="101:33" pos:end="101:39"><name pos:start="101:33" pos:end="101:39">ext_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:63"><expr pos:start="103:5" pos:end="103:62"><call pos:start="103:5" pos:end="103:62"><name pos:start="103:5" pos:end="103:31">memory_region_add_subregion</name><argument_list pos:start="103:32" pos:end="103:62">(<argument pos:start="103:33" pos:end="103:49"><expr pos:start="103:33" pos:end="103:49"><name pos:start="103:33" pos:end="103:49">address_space_mem</name></expr></argument>, <argument pos:start="103:52" pos:end="103:52"><expr pos:start="103:52" pos:end="103:52"><literal type="number" pos:start="103:52" pos:end="103:52">0</literal></expr></argument>, <argument pos:start="103:55" pos:end="103:61"><expr pos:start="103:55" pos:end="103:61"><name pos:start="103:55" pos:end="103:61">ext_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:32">/* 256K of on-chip memory */</comment>

    <expr_stmt pos:start="109:5" pos:end="111:41"><expr pos:start="109:5" pos:end="111:40"><call pos:start="109:5" pos:end="111:40"><name pos:start="109:5" pos:end="109:26">memory_region_init_ram</name><argument_list pos:start="109:27" pos:end="111:40">(<argument pos:start="109:28" pos:end="109:34"><expr pos:start="109:28" pos:end="109:34"><name pos:start="109:28" pos:end="109:34">ocm_ram</name></expr></argument>, <argument pos:start="109:37" pos:end="109:40"><expr pos:start="109:37" pos:end="109:40"><name pos:start="109:37" pos:end="109:40">NULL</name></expr></argument>, <argument pos:start="109:43" pos:end="109:56"><expr pos:start="109:43" pos:end="109:56"><literal type="string" pos:start="109:43" pos:end="109:56">"zynq.ocm_ram"</literal></expr></argument>, <argument pos:start="109:59" pos:end="109:67"><expr pos:start="109:59" pos:end="109:67"><literal type="number" pos:start="109:59" pos:end="109:61">256</literal> <operator pos:start="109:63" pos:end="109:64">&lt;&lt;</operator> <literal type="number" pos:start="109:66" pos:end="109:67">10</literal></expr></argument>,

                           <argument pos:start="111:28" pos:end="111:39"><expr pos:start="111:28" pos:end="111:39"><operator pos:start="111:28" pos:end="111:28">&amp;</operator><name pos:start="111:29" pos:end="111:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:41"><expr pos:start="113:5" pos:end="113:40"><call pos:start="113:5" pos:end="113:40"><name pos:start="113:5" pos:end="113:31">vmstate_register_ram_global</name><argument_list pos:start="113:32" pos:end="113:40">(<argument pos:start="113:33" pos:end="113:39"><expr pos:start="113:33" pos:end="113:39"><name pos:start="113:33" pos:end="113:39">ocm_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:72"><expr pos:start="115:5" pos:end="115:71"><call pos:start="115:5" pos:end="115:71"><name pos:start="115:5" pos:end="115:31">memory_region_add_subregion</name><argument_list pos:start="115:32" pos:end="115:71">(<argument pos:start="115:33" pos:end="115:49"><expr pos:start="115:33" pos:end="115:49"><name pos:start="115:33" pos:end="115:49">address_space_mem</name></expr></argument>, <argument pos:start="115:52" pos:end="115:61"><expr pos:start="115:52" pos:end="115:61"><literal type="number" pos:start="115:52" pos:end="115:61">0xFFFC0000</literal></expr></argument>, <argument pos:start="115:64" pos:end="115:70"><expr pos:start="115:64" pos:end="115:70"><name pos:start="115:64" pos:end="115:70">ocm_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="119:5" pos:end="119:50"><decl pos:start="119:5" pos:end="119:49"><type pos:start="119:5" pos:end="119:15"><name pos:start="119:5" pos:end="119:13">DriveInfo</name> <modifier pos:start="119:15" pos:end="119:15">*</modifier></type><name pos:start="119:16" pos:end="119:20">dinfo</name> <init pos:start="119:22" pos:end="119:49">= <expr pos:start="119:24" pos:end="119:49"><call pos:start="119:24" pos:end="119:49"><name pos:start="119:24" pos:end="119:32">drive_get</name><argument_list pos:start="119:33" pos:end="119:49">(<argument pos:start="119:34" pos:end="119:42"><expr pos:start="119:34" pos:end="119:42"><name pos:start="119:34" pos:end="119:42">IF_PFLASH</name></expr></argument>, <argument pos:start="119:45" pos:end="119:45"><expr pos:start="119:45" pos:end="119:45"><literal type="number" pos:start="119:45" pos:end="119:45">0</literal></expr></argument>, <argument pos:start="119:48" pos:end="119:48"><expr pos:start="119:48" pos:end="119:48"><literal type="number" pos:start="119:48" pos:end="119:48">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:13">/* AMD */</comment>

    <expr_stmt pos:start="125:5" pos:end="135:33"><expr pos:start="125:5" pos:end="135:32"><call pos:start="125:5" pos:end="135:32"><name pos:start="125:5" pos:end="125:25">pflash_cfi02_register</name><argument_list pos:start="125:26" pos:end="135:32">(<argument pos:start="125:27" pos:end="125:36"><expr pos:start="125:27" pos:end="125:36"><literal type="number" pos:start="125:27" pos:end="125:36">0xe2000000</literal></expr></argument>, <argument pos:start="125:39" pos:end="125:42"><expr pos:start="125:39" pos:end="125:42"><name pos:start="125:39" pos:end="125:42">NULL</name></expr></argument>, <argument pos:start="125:45" pos:end="125:57"><expr pos:start="125:45" pos:end="125:57"><literal type="string" pos:start="125:45" pos:end="125:57">"zynq.pflash"</literal></expr></argument>, <argument pos:start="125:60" pos:end="125:69"><expr pos:start="125:60" pos:end="125:69"><name pos:start="125:60" pos:end="125:69">FLASH_SIZE</name></expr></argument>,

                          <argument pos:start="127:27" pos:end="127:75"><expr pos:start="127:27" pos:end="127:75"><ternary pos:start="127:27" pos:end="127:75"><condition pos:start="127:27" pos:end="127:33"><expr pos:start="127:27" pos:end="127:31"><name pos:start="127:27" pos:end="127:31">dinfo</name></expr> ?</condition><then pos:start="127:35" pos:end="127:68"> <expr pos:start="127:35" pos:end="127:68"><call pos:start="127:35" pos:end="127:68"><name pos:start="127:35" pos:end="127:40">blk_bs</name><argument_list pos:start="127:41" pos:end="127:68">(<argument pos:start="127:42" pos:end="127:67"><expr pos:start="127:42" pos:end="127:67"><call pos:start="127:42" pos:end="127:67"><name pos:start="127:42" pos:end="127:60">blk_by_legacy_dinfo</name><argument_list pos:start="127:61" pos:end="127:67">(<argument pos:start="127:62" pos:end="127:66"><expr pos:start="127:62" pos:end="127:66"><name pos:start="127:62" pos:end="127:66">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else pos:start="127:70" pos:end="127:75">: <expr pos:start="127:72" pos:end="127:75"><name pos:start="127:72" pos:end="127:75">NULL</name></expr></else></ternary></expr></argument>,

                          <argument pos:start="129:27" pos:end="129:43"><expr pos:start="129:27" pos:end="129:43"><name pos:start="129:27" pos:end="129:43">FLASH_SECTOR_SIZE</name></expr></argument>,

                          <argument pos:start="131:27" pos:end="131:54"><expr pos:start="131:27" pos:end="131:54"><name pos:start="131:27" pos:end="131:36">FLASH_SIZE</name><operator pos:start="131:37" pos:end="131:37">/</operator><name pos:start="131:38" pos:end="131:54">FLASH_SECTOR_SIZE</name></expr></argument>, <argument pos:start="131:57" pos:end="131:57"><expr pos:start="131:57" pos:end="131:57"><literal type="number" pos:start="131:57" pos:end="131:57">1</literal></expr></argument>,

                          <argument pos:start="133:27" pos:end="133:27"><expr pos:start="133:27" pos:end="133:27"><literal type="number" pos:start="133:27" pos:end="133:27">1</literal></expr></argument>, <argument pos:start="133:30" pos:end="133:35"><expr pos:start="133:30" pos:end="133:35"><literal type="number" pos:start="133:30" pos:end="133:35">0x0066</literal></expr></argument>, <argument pos:start="133:38" pos:end="133:43"><expr pos:start="133:38" pos:end="133:43"><literal type="number" pos:start="133:38" pos:end="133:43">0x0022</literal></expr></argument>, <argument pos:start="133:46" pos:end="133:51"><expr pos:start="133:46" pos:end="133:51"><literal type="number" pos:start="133:46" pos:end="133:51">0x0000</literal></expr></argument>, <argument pos:start="133:54" pos:end="133:59"><expr pos:start="133:54" pos:end="133:59"><literal type="number" pos:start="133:54" pos:end="133:59">0x0000</literal></expr></argument>, <argument pos:start="133:62" pos:end="133:67"><expr pos:start="133:62" pos:end="133:67"><literal type="number" pos:start="133:62" pos:end="133:67">0x0555</literal></expr></argument>, <argument pos:start="133:70" pos:end="133:74"><expr pos:start="133:70" pos:end="133:74"><literal type="number" pos:start="133:70" pos:end="133:74">0x2aa</literal></expr></argument>,

                              <argument pos:start="135:31" pos:end="135:31"><expr pos:start="135:31" pos:end="135:31"><literal type="number" pos:start="135:31" pos:end="135:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:48"><expr pos:start="139:5" pos:end="139:47"><name pos:start="139:5" pos:end="139:7">dev</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <call pos:start="139:11" pos:end="139:47"><name pos:start="139:11" pos:end="139:21">qdev_create</name><argument_list pos:start="139:22" pos:end="139:47">(<argument pos:start="139:23" pos:end="139:26"><expr pos:start="139:23" pos:end="139:26"><name pos:start="139:23" pos:end="139:26">NULL</name></expr></argument>, <argument pos:start="139:29" pos:end="139:46"><expr pos:start="139:29" pos:end="139:46"><literal type="string" pos:start="139:29" pos:end="139:46">"xilinx,zynq_slcr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:26"><expr pos:start="141:5" pos:end="141:25"><call pos:start="141:5" pos:end="141:25"><name pos:start="141:5" pos:end="141:20">qdev_init_nofail</name><argument_list pos:start="141:21" pos:end="141:25">(<argument pos:start="141:22" pos:end="141:24"><expr pos:start="141:22" pos:end="141:24"><name pos:start="141:22" pos:end="141:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:56"><expr pos:start="143:5" pos:end="143:55"><call pos:start="143:5" pos:end="143:55"><name pos:start="143:5" pos:end="143:19">sysbus_mmio_map</name><argument_list pos:start="143:20" pos:end="143:55">(<argument pos:start="143:21" pos:end="143:39"><expr pos:start="143:21" pos:end="143:39"><call pos:start="143:21" pos:end="143:39"><name pos:start="143:21" pos:end="143:34">SYS_BUS_DEVICE</name><argument_list pos:start="143:35" pos:end="143:39">(<argument pos:start="143:36" pos:end="143:38"><expr pos:start="143:36" pos:end="143:38"><name pos:start="143:36" pos:end="143:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="143:42" pos:end="143:42"><expr pos:start="143:42" pos:end="143:42"><literal type="number" pos:start="143:42" pos:end="143:42">0</literal></expr></argument>, <argument pos:start="143:45" pos:end="143:54"><expr pos:start="143:45" pos:end="143:54"><literal type="number" pos:start="143:45" pos:end="143:54">0xF8000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:45"><expr pos:start="147:5" pos:end="147:44"><name pos:start="147:5" pos:end="147:7">dev</name> <operator pos:start="147:9" pos:end="147:9">=</operator> <call pos:start="147:11" pos:end="147:44"><name pos:start="147:11" pos:end="147:21">qdev_create</name><argument_list pos:start="147:22" pos:end="147:44">(<argument pos:start="147:23" pos:end="147:26"><expr pos:start="147:23" pos:end="147:26"><name pos:start="147:23" pos:end="147:26">NULL</name></expr></argument>, <argument pos:start="147:29" pos:end="147:43"><expr pos:start="147:29" pos:end="147:43"><literal type="string" pos:start="147:29" pos:end="147:43">"a9mpcore_priv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:44"><expr pos:start="149:5" pos:end="149:43"><call pos:start="149:5" pos:end="149:43"><name pos:start="149:5" pos:end="149:24">qdev_prop_set_uint32</name><argument_list pos:start="149:25" pos:end="149:43">(<argument pos:start="149:26" pos:end="149:28"><expr pos:start="149:26" pos:end="149:28"><name pos:start="149:26" pos:end="149:28">dev</name></expr></argument>, <argument pos:start="149:31" pos:end="149:39"><expr pos:start="149:31" pos:end="149:39"><literal type="string" pos:start="149:31" pos:end="149:39">"num-cpu"</literal></expr></argument>, <argument pos:start="149:42" pos:end="149:42"><expr pos:start="149:42" pos:end="149:42"><literal type="number" pos:start="149:42" pos:end="149:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:26"><expr pos:start="151:5" pos:end="151:25"><call pos:start="151:5" pos:end="151:25"><name pos:start="151:5" pos:end="151:20">qdev_init_nofail</name><argument_list pos:start="151:21" pos:end="151:25">(<argument pos:start="151:22" pos:end="151:24"><expr pos:start="151:22" pos:end="151:24"><name pos:start="151:22" pos:end="151:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:33"><expr pos:start="153:5" pos:end="153:32"><name pos:start="153:5" pos:end="153:10">busdev</name> <operator pos:start="153:12" pos:end="153:12">=</operator> <call pos:start="153:14" pos:end="153:32"><name pos:start="153:14" pos:end="153:27">SYS_BUS_DEVICE</name><argument_list pos:start="153:28" pos:end="153:32">(<argument pos:start="153:29" pos:end="153:31"><expr pos:start="153:29" pos:end="153:31"><name pos:start="153:29" pos:end="153:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:50"><expr pos:start="155:5" pos:end="155:49"><call pos:start="155:5" pos:end="155:49"><name pos:start="155:5" pos:end="155:19">sysbus_mmio_map</name><argument_list pos:start="155:20" pos:end="155:49">(<argument pos:start="155:21" pos:end="155:26"><expr pos:start="155:21" pos:end="155:26"><name pos:start="155:21" pos:end="155:26">busdev</name></expr></argument>, <argument pos:start="155:29" pos:end="155:29"><expr pos:start="155:29" pos:end="155:29"><literal type="number" pos:start="155:29" pos:end="155:29">0</literal></expr></argument>, <argument pos:start="155:32" pos:end="155:48"><expr pos:start="155:32" pos:end="155:48"><name pos:start="155:32" pos:end="155:48">MPCORE_PERIPHBASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="159:67"><expr pos:start="157:5" pos:end="159:66"><call pos:start="157:5" pos:end="159:66"><name pos:start="157:5" pos:end="157:22">sysbus_connect_irq</name><argument_list pos:start="157:23" pos:end="159:66">(<argument pos:start="157:24" pos:end="157:29"><expr pos:start="157:24" pos:end="157:29"><name pos:start="157:24" pos:end="157:29">busdev</name></expr></argument>, <argument pos:start="157:32" pos:end="157:32"><expr pos:start="157:32" pos:end="157:32"><literal type="number" pos:start="157:32" pos:end="157:32">0</literal></expr></argument>,

                       <argument pos:start="159:24" pos:end="159:65"><expr pos:start="159:24" pos:end="159:65"><call pos:start="159:24" pos:end="159:65"><name pos:start="159:24" pos:end="159:39">qdev_get_gpio_in</name><argument_list pos:start="159:40" pos:end="159:65">(<argument pos:start="159:41" pos:end="159:51"><expr pos:start="159:41" pos:end="159:51"><call pos:start="159:41" pos:end="159:51"><name pos:start="159:41" pos:end="159:46">DEVICE</name><argument_list pos:start="159:47" pos:end="159:51">(<argument pos:start="159:48" pos:end="159:50"><expr pos:start="159:48" pos:end="159:50"><name pos:start="159:48" pos:end="159:50">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="159:54" pos:end="159:64"><expr pos:start="159:54" pos:end="159:64"><name pos:start="159:54" pos:end="159:64">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="163:5" pos:end="167:5">for <control pos:start="163:9" pos:end="163:28">(<init pos:start="163:10" pos:end="163:15"><expr pos:start="163:10" pos:end="163:14"><name pos:start="163:10" pos:end="163:10">n</name> <operator pos:start="163:12" pos:end="163:12">=</operator> <literal type="number" pos:start="163:14" pos:end="163:14">0</literal></expr>;</init> <condition pos:start="163:17" pos:end="163:23"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:17">n</name> <operator pos:start="163:19" pos:end="163:19">&lt;</operator> <literal type="number" pos:start="163:21" pos:end="163:22">64</literal></expr>;</condition> <incr pos:start="163:25" pos:end="163:27"><expr pos:start="163:25" pos:end="163:27"><name pos:start="163:25" pos:end="163:25">n</name><operator pos:start="163:26" pos:end="163:27">++</operator></expr></incr>)</control> <block pos:start="163:30" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:42">

        <expr_stmt pos:start="165:9" pos:end="165:42"><expr pos:start="165:9" pos:end="165:41"><name pos:start="165:9" pos:end="165:14"><name pos:start="165:9" pos:end="165:11">pic</name><index pos:start="165:12" pos:end="165:14">[<expr pos:start="165:13" pos:end="165:13"><name pos:start="165:13" pos:end="165:13">n</name></expr>]</index></name> <operator pos:start="165:16" pos:end="165:16">=</operator> <call pos:start="165:18" pos:end="165:41"><name pos:start="165:18" pos:end="165:33">qdev_get_gpio_in</name><argument_list pos:start="165:34" pos:end="165:41">(<argument pos:start="165:35" pos:end="165:37"><expr pos:start="165:35" pos:end="165:37"><name pos:start="165:35" pos:end="165:37">dev</name></expr></argument>, <argument pos:start="165:40" pos:end="165:40"><expr pos:start="165:40" pos:end="165:40"><name pos:start="165:40" pos:end="165:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="171:5" pos:end="171:65"><expr pos:start="171:5" pos:end="171:64"><call pos:start="171:5" pos:end="171:64"><name pos:start="171:5" pos:end="171:25">zynq_init_spi_flashes</name><argument_list pos:start="171:26" pos:end="171:64">(<argument pos:start="171:27" pos:end="171:36"><expr pos:start="171:27" pos:end="171:36"><literal type="number" pos:start="171:27" pos:end="171:36">0xE0006000</literal></expr></argument>, <argument pos:start="171:39" pos:end="171:56"><expr pos:start="171:39" pos:end="171:56"><name pos:start="171:39" pos:end="171:56"><name pos:start="171:39" pos:end="171:41">pic</name><index pos:start="171:42" pos:end="171:56">[<expr pos:start="171:43" pos:end="171:55"><literal type="number" pos:start="171:43" pos:end="171:45">58</literal><operator pos:start="171:45" pos:end="171:45">-</operator><name pos:start="171:46" pos:end="171:55">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="171:59" pos:end="171:63"><expr pos:start="171:59" pos:end="171:63"><name pos:start="171:59" pos:end="171:63">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:65"><expr pos:start="173:5" pos:end="173:64"><call pos:start="173:5" pos:end="173:64"><name pos:start="173:5" pos:end="173:25">zynq_init_spi_flashes</name><argument_list pos:start="173:26" pos:end="173:64">(<argument pos:start="173:27" pos:end="173:36"><expr pos:start="173:27" pos:end="173:36"><literal type="number" pos:start="173:27" pos:end="173:36">0xE0007000</literal></expr></argument>, <argument pos:start="173:39" pos:end="173:56"><expr pos:start="173:39" pos:end="173:56"><name pos:start="173:39" pos:end="173:56"><name pos:start="173:39" pos:end="173:41">pic</name><index pos:start="173:42" pos:end="173:56">[<expr pos:start="173:43" pos:end="173:55"><literal type="number" pos:start="173:43" pos:end="173:45">81</literal><operator pos:start="173:45" pos:end="173:45">-</operator><name pos:start="173:46" pos:end="173:55">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="173:59" pos:end="173:63"><expr pos:start="173:59" pos:end="173:63"><name pos:start="173:59" pos:end="173:63">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:64"><expr pos:start="175:5" pos:end="175:63"><call pos:start="175:5" pos:end="175:63"><name pos:start="175:5" pos:end="175:25">zynq_init_spi_flashes</name><argument_list pos:start="175:26" pos:end="175:63">(<argument pos:start="175:27" pos:end="175:36"><expr pos:start="175:27" pos:end="175:36"><literal type="number" pos:start="175:27" pos:end="175:36">0xE000D000</literal></expr></argument>, <argument pos:start="175:39" pos:end="175:56"><expr pos:start="175:39" pos:end="175:56"><name pos:start="175:39" pos:end="175:56"><name pos:start="175:39" pos:end="175:41">pic</name><index pos:start="175:42" pos:end="175:56">[<expr pos:start="175:43" pos:end="175:55"><literal type="number" pos:start="175:43" pos:end="175:45">51</literal><operator pos:start="175:45" pos:end="175:45">-</operator><name pos:start="175:46" pos:end="175:55">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="175:59" pos:end="175:62"><expr pos:start="175:59" pos:end="175:62"><name pos:start="175:59" pos:end="175:62">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:73"><expr pos:start="179:5" pos:end="179:72"><call pos:start="179:5" pos:end="179:72"><name pos:start="179:5" pos:end="179:24">sysbus_create_simple</name><argument_list pos:start="179:25" pos:end="179:72">(<argument pos:start="179:26" pos:end="179:39"><expr pos:start="179:26" pos:end="179:39"><literal type="string" pos:start="179:26" pos:end="179:39">"xlnx,ps7-usb"</literal></expr></argument>, <argument pos:start="179:42" pos:end="179:51"><expr pos:start="179:42" pos:end="179:51"><literal type="number" pos:start="179:42" pos:end="179:51">0xE0002000</literal></expr></argument>, <argument pos:start="179:54" pos:end="179:71"><expr pos:start="179:54" pos:end="179:71"><name pos:start="179:54" pos:end="179:71"><name pos:start="179:54" pos:end="179:56">pic</name><index pos:start="179:57" pos:end="179:71">[<expr pos:start="179:58" pos:end="179:70"><literal type="number" pos:start="179:58" pos:end="179:60">53</literal><operator pos:start="179:60" pos:end="179:60">-</operator><name pos:start="179:61" pos:end="179:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:73"><expr pos:start="181:5" pos:end="181:72"><call pos:start="181:5" pos:end="181:72"><name pos:start="181:5" pos:end="181:24">sysbus_create_simple</name><argument_list pos:start="181:25" pos:end="181:72">(<argument pos:start="181:26" pos:end="181:39"><expr pos:start="181:26" pos:end="181:39"><literal type="string" pos:start="181:26" pos:end="181:39">"xlnx,ps7-usb"</literal></expr></argument>, <argument pos:start="181:42" pos:end="181:51"><expr pos:start="181:42" pos:end="181:51"><literal type="number" pos:start="181:42" pos:end="181:51">0xE0003000</literal></expr></argument>, <argument pos:start="181:54" pos:end="181:71"><expr pos:start="181:54" pos:end="181:71"><name pos:start="181:54" pos:end="181:71"><name pos:start="181:54" pos:end="181:56">pic</name><index pos:start="181:57" pos:end="181:71">[<expr pos:start="181:58" pos:end="181:70"><literal type="number" pos:start="181:58" pos:end="181:60">76</literal><operator pos:start="181:60" pos:end="181:60">-</operator><name pos:start="181:61" pos:end="181:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:73"><expr pos:start="185:5" pos:end="185:72"><call pos:start="185:5" pos:end="185:72"><name pos:start="185:5" pos:end="185:24">sysbus_create_simple</name><argument_list pos:start="185:25" pos:end="185:72">(<argument pos:start="185:26" pos:end="185:39"><expr pos:start="185:26" pos:end="185:39"><literal type="string" pos:start="185:26" pos:end="185:39">"cadence_uart"</literal></expr></argument>, <argument pos:start="185:42" pos:end="185:51"><expr pos:start="185:42" pos:end="185:51"><literal type="number" pos:start="185:42" pos:end="185:51">0xE0000000</literal></expr></argument>, <argument pos:start="185:54" pos:end="185:71"><expr pos:start="185:54" pos:end="185:71"><name pos:start="185:54" pos:end="185:71"><name pos:start="185:54" pos:end="185:56">pic</name><index pos:start="185:57" pos:end="185:71">[<expr pos:start="185:58" pos:end="185:70"><literal type="number" pos:start="185:58" pos:end="185:60">59</literal><operator pos:start="185:60" pos:end="185:60">-</operator><name pos:start="185:61" pos:end="185:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:73"><expr pos:start="187:5" pos:end="187:72"><call pos:start="187:5" pos:end="187:72"><name pos:start="187:5" pos:end="187:24">sysbus_create_simple</name><argument_list pos:start="187:25" pos:end="187:72">(<argument pos:start="187:26" pos:end="187:39"><expr pos:start="187:26" pos:end="187:39"><literal type="string" pos:start="187:26" pos:end="187:39">"cadence_uart"</literal></expr></argument>, <argument pos:start="187:42" pos:end="187:51"><expr pos:start="187:42" pos:end="187:51"><literal type="number" pos:start="187:42" pos:end="187:51">0xE0001000</literal></expr></argument>, <argument pos:start="187:54" pos:end="187:71"><expr pos:start="187:54" pos:end="187:71"><name pos:start="187:54" pos:end="187:71"><name pos:start="187:54" pos:end="187:56">pic</name><index pos:start="187:57" pos:end="187:71">[<expr pos:start="187:58" pos:end="187:70"><literal type="number" pos:start="187:58" pos:end="187:60">82</literal><operator pos:start="187:60" pos:end="187:60">-</operator><name pos:start="187:61" pos:end="187:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="191:5" pos:end="193:78"><expr pos:start="191:5" pos:end="193:77"><call pos:start="191:5" pos:end="193:77"><name pos:start="191:5" pos:end="191:25">sysbus_create_varargs</name><argument_list pos:start="191:26" pos:end="193:77">(<argument pos:start="191:27" pos:end="191:39"><expr pos:start="191:27" pos:end="191:39"><literal type="string" pos:start="191:27" pos:end="191:39">"cadence_ttc"</literal></expr></argument>, <argument pos:start="191:42" pos:end="191:51"><expr pos:start="191:42" pos:end="191:51"><literal type="number" pos:start="191:42" pos:end="191:51">0xF8001000</literal></expr></argument>,

            <argument pos:start="193:13" pos:end="193:30"><expr pos:start="193:13" pos:end="193:30"><name pos:start="193:13" pos:end="193:30"><name pos:start="193:13" pos:end="193:15">pic</name><index pos:start="193:16" pos:end="193:30">[<expr pos:start="193:17" pos:end="193:29"><literal type="number" pos:start="193:17" pos:end="193:19">42</literal><operator pos:start="193:19" pos:end="193:19">-</operator><name pos:start="193:20" pos:end="193:29">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="193:33" pos:end="193:50"><expr pos:start="193:33" pos:end="193:50"><name pos:start="193:33" pos:end="193:50"><name pos:start="193:33" pos:end="193:35">pic</name><index pos:start="193:36" pos:end="193:50">[<expr pos:start="193:37" pos:end="193:49"><literal type="number" pos:start="193:37" pos:end="193:39">43</literal><operator pos:start="193:39" pos:end="193:39">-</operator><name pos:start="193:40" pos:end="193:49">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="193:53" pos:end="193:70"><expr pos:start="193:53" pos:end="193:70"><name pos:start="193:53" pos:end="193:70"><name pos:start="193:53" pos:end="193:55">pic</name><index pos:start="193:56" pos:end="193:70">[<expr pos:start="193:57" pos:end="193:69"><literal type="number" pos:start="193:57" pos:end="193:59">44</literal><operator pos:start="193:59" pos:end="193:59">-</operator><name pos:start="193:60" pos:end="193:69">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="193:73" pos:end="193:76"><expr pos:start="193:73" pos:end="193:76"><name pos:start="193:73" pos:end="193:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="197:78"><expr pos:start="195:5" pos:end="197:77"><call pos:start="195:5" pos:end="197:77"><name pos:start="195:5" pos:end="195:25">sysbus_create_varargs</name><argument_list pos:start="195:26" pos:end="197:77">(<argument pos:start="195:27" pos:end="195:39"><expr pos:start="195:27" pos:end="195:39"><literal type="string" pos:start="195:27" pos:end="195:39">"cadence_ttc"</literal></expr></argument>, <argument pos:start="195:42" pos:end="195:51"><expr pos:start="195:42" pos:end="195:51"><literal type="number" pos:start="195:42" pos:end="195:51">0xF8002000</literal></expr></argument>,

            <argument pos:start="197:13" pos:end="197:30"><expr pos:start="197:13" pos:end="197:30"><name pos:start="197:13" pos:end="197:30"><name pos:start="197:13" pos:end="197:15">pic</name><index pos:start="197:16" pos:end="197:30">[<expr pos:start="197:17" pos:end="197:29"><literal type="number" pos:start="197:17" pos:end="197:19">69</literal><operator pos:start="197:19" pos:end="197:19">-</operator><name pos:start="197:20" pos:end="197:29">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="197:33" pos:end="197:50"><expr pos:start="197:33" pos:end="197:50"><name pos:start="197:33" pos:end="197:50"><name pos:start="197:33" pos:end="197:35">pic</name><index pos:start="197:36" pos:end="197:50">[<expr pos:start="197:37" pos:end="197:49"><literal type="number" pos:start="197:37" pos:end="197:39">70</literal><operator pos:start="197:39" pos:end="197:39">-</operator><name pos:start="197:40" pos:end="197:49">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="197:53" pos:end="197:70"><expr pos:start="197:53" pos:end="197:70"><name pos:start="197:53" pos:end="197:70"><name pos:start="197:53" pos:end="197:55">pic</name><index pos:start="197:56" pos:end="197:70">[<expr pos:start="197:57" pos:end="197:69"><literal type="number" pos:start="197:57" pos:end="197:59">71</literal><operator pos:start="197:59" pos:end="197:59">-</operator><name pos:start="197:60" pos:end="197:69">IRQ_OFFSET</name></expr>]</index></name></expr></argument>, <argument pos:start="197:73" pos:end="197:76"><expr pos:start="197:73" pos:end="197:76"><name pos:start="197:73" pos:end="197:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:59"><expr pos:start="201:5" pos:end="201:58"><call pos:start="201:5" pos:end="201:58"><name pos:start="201:5" pos:end="201:12">gem_init</name><argument_list pos:start="201:13" pos:end="201:58">(<argument pos:start="201:14" pos:end="201:25"><expr pos:start="201:14" pos:end="201:25"><operator pos:start="201:14" pos:end="201:14">&amp;</operator><name pos:start="201:15" pos:end="201:25"><name pos:start="201:15" pos:end="201:22">nd_table</name><index pos:start="201:23" pos:end="201:25">[<expr pos:start="201:24" pos:end="201:24"><literal type="number" pos:start="201:24" pos:end="201:24">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="201:28" pos:end="201:37"><expr pos:start="201:28" pos:end="201:37"><literal type="number" pos:start="201:28" pos:end="201:37">0xE000B000</literal></expr></argument>, <argument pos:start="201:40" pos:end="201:57"><expr pos:start="201:40" pos:end="201:57"><name pos:start="201:40" pos:end="201:57"><name pos:start="201:40" pos:end="201:42">pic</name><index pos:start="201:43" pos:end="201:57">[<expr pos:start="201:44" pos:end="201:56"><literal type="number" pos:start="201:44" pos:end="201:46">54</literal><operator pos:start="201:46" pos:end="201:46">-</operator><name pos:start="201:47" pos:end="201:56">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:59"><expr pos:start="203:5" pos:end="203:58"><call pos:start="203:5" pos:end="203:58"><name pos:start="203:5" pos:end="203:12">gem_init</name><argument_list pos:start="203:13" pos:end="203:58">(<argument pos:start="203:14" pos:end="203:25"><expr pos:start="203:14" pos:end="203:25"><operator pos:start="203:14" pos:end="203:14">&amp;</operator><name pos:start="203:15" pos:end="203:25"><name pos:start="203:15" pos:end="203:22">nd_table</name><index pos:start="203:23" pos:end="203:25">[<expr pos:start="203:24" pos:end="203:24"><literal type="number" pos:start="203:24" pos:end="203:24">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="203:28" pos:end="203:37"><expr pos:start="203:28" pos:end="203:37"><literal type="number" pos:start="203:28" pos:end="203:37">0xE000C000</literal></expr></argument>, <argument pos:start="203:40" pos:end="203:57"><expr pos:start="203:40" pos:end="203:57"><name pos:start="203:40" pos:end="203:57"><name pos:start="203:40" pos:end="203:42">pic</name><index pos:start="203:43" pos:end="203:57">[<expr pos:start="203:44" pos:end="203:56"><literal type="number" pos:start="203:44" pos:end="203:46">77</literal><operator pos:start="203:46" pos:end="203:46">-</operator><name pos:start="203:47" pos:end="203:56">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:45"><expr pos:start="207:5" pos:end="207:44"><name pos:start="207:5" pos:end="207:7">dev</name> <operator pos:start="207:9" pos:end="207:9">=</operator> <call pos:start="207:11" pos:end="207:44"><name pos:start="207:11" pos:end="207:21">qdev_create</name><argument_list pos:start="207:22" pos:end="207:44">(<argument pos:start="207:23" pos:end="207:26"><expr pos:start="207:23" pos:end="207:26"><name pos:start="207:23" pos:end="207:26">NULL</name></expr></argument>, <argument pos:start="207:29" pos:end="207:43"><expr pos:start="207:29" pos:end="207:43"><literal type="string" pos:start="207:29" pos:end="207:43">"generic-sdhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:26"><expr pos:start="209:5" pos:end="209:25"><call pos:start="209:5" pos:end="209:25"><name pos:start="209:5" pos:end="209:20">qdev_init_nofail</name><argument_list pos:start="209:21" pos:end="209:25">(<argument pos:start="209:22" pos:end="209:24"><expr pos:start="209:22" pos:end="209:24"><name pos:start="209:22" pos:end="209:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:56"><expr pos:start="211:5" pos:end="211:55"><call pos:start="211:5" pos:end="211:55"><name pos:start="211:5" pos:end="211:19">sysbus_mmio_map</name><argument_list pos:start="211:20" pos:end="211:55">(<argument pos:start="211:21" pos:end="211:39"><expr pos:start="211:21" pos:end="211:39"><call pos:start="211:21" pos:end="211:39"><name pos:start="211:21" pos:end="211:34">SYS_BUS_DEVICE</name><argument_list pos:start="211:35" pos:end="211:39">(<argument pos:start="211:36" pos:end="211:38"><expr pos:start="211:36" pos:end="211:38"><name pos:start="211:36" pos:end="211:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="211:42" pos:end="211:42"><expr pos:start="211:42" pos:end="211:42"><literal type="number" pos:start="211:42" pos:end="211:42">0</literal></expr></argument>, <argument pos:start="211:45" pos:end="211:54"><expr pos:start="211:45" pos:end="211:54"><literal type="number" pos:start="211:45" pos:end="211:54">0xE0100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:67"><expr pos:start="213:5" pos:end="213:66"><call pos:start="213:5" pos:end="213:66"><name pos:start="213:5" pos:end="213:22">sysbus_connect_irq</name><argument_list pos:start="213:23" pos:end="213:66">(<argument pos:start="213:24" pos:end="213:42"><expr pos:start="213:24" pos:end="213:42"><call pos:start="213:24" pos:end="213:42"><name pos:start="213:24" pos:end="213:37">SYS_BUS_DEVICE</name><argument_list pos:start="213:38" pos:end="213:42">(<argument pos:start="213:39" pos:end="213:41"><expr pos:start="213:39" pos:end="213:41"><name pos:start="213:39" pos:end="213:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="213:45" pos:end="213:45"><expr pos:start="213:45" pos:end="213:45"><literal type="number" pos:start="213:45" pos:end="213:45">0</literal></expr></argument>, <argument pos:start="213:48" pos:end="213:65"><expr pos:start="213:48" pos:end="213:65"><name pos:start="213:48" pos:end="213:65"><name pos:start="213:48" pos:end="213:50">pic</name><index pos:start="213:51" pos:end="213:65">[<expr pos:start="213:52" pos:end="213:64"><literal type="number" pos:start="213:52" pos:end="213:54">56</literal><operator pos:start="213:54" pos:end="213:54">-</operator><name pos:start="213:55" pos:end="213:64">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:45"><expr pos:start="217:5" pos:end="217:44"><name pos:start="217:5" pos:end="217:7">dev</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <call pos:start="217:11" pos:end="217:44"><name pos:start="217:11" pos:end="217:21">qdev_create</name><argument_list pos:start="217:22" pos:end="217:44">(<argument pos:start="217:23" pos:end="217:26"><expr pos:start="217:23" pos:end="217:26"><name pos:start="217:23" pos:end="217:26">NULL</name></expr></argument>, <argument pos:start="217:29" pos:end="217:43"><expr pos:start="217:29" pos:end="217:43"><literal type="string" pos:start="217:29" pos:end="217:43">"generic-sdhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:26"><expr pos:start="219:5" pos:end="219:25"><call pos:start="219:5" pos:end="219:25"><name pos:start="219:5" pos:end="219:20">qdev_init_nofail</name><argument_list pos:start="219:21" pos:end="219:25">(<argument pos:start="219:22" pos:end="219:24"><expr pos:start="219:22" pos:end="219:24"><name pos:start="219:22" pos:end="219:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:56"><expr pos:start="221:5" pos:end="221:55"><call pos:start="221:5" pos:end="221:55"><name pos:start="221:5" pos:end="221:19">sysbus_mmio_map</name><argument_list pos:start="221:20" pos:end="221:55">(<argument pos:start="221:21" pos:end="221:39"><expr pos:start="221:21" pos:end="221:39"><call pos:start="221:21" pos:end="221:39"><name pos:start="221:21" pos:end="221:34">SYS_BUS_DEVICE</name><argument_list pos:start="221:35" pos:end="221:39">(<argument pos:start="221:36" pos:end="221:38"><expr pos:start="221:36" pos:end="221:38"><name pos:start="221:36" pos:end="221:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="221:42" pos:end="221:42"><expr pos:start="221:42" pos:end="221:42"><literal type="number" pos:start="221:42" pos:end="221:42">0</literal></expr></argument>, <argument pos:start="221:45" pos:end="221:54"><expr pos:start="221:45" pos:end="221:54"><literal type="number" pos:start="221:45" pos:end="221:54">0xE0101000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:67"><expr pos:start="223:5" pos:end="223:66"><call pos:start="223:5" pos:end="223:66"><name pos:start="223:5" pos:end="223:22">sysbus_connect_irq</name><argument_list pos:start="223:23" pos:end="223:66">(<argument pos:start="223:24" pos:end="223:42"><expr pos:start="223:24" pos:end="223:42"><call pos:start="223:24" pos:end="223:42"><name pos:start="223:24" pos:end="223:37">SYS_BUS_DEVICE</name><argument_list pos:start="223:38" pos:end="223:42">(<argument pos:start="223:39" pos:end="223:41"><expr pos:start="223:39" pos:end="223:41"><name pos:start="223:39" pos:end="223:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="223:45" pos:end="223:45"><expr pos:start="223:45" pos:end="223:45"><literal type="number" pos:start="223:45" pos:end="223:45">0</literal></expr></argument>, <argument pos:start="223:48" pos:end="223:65"><expr pos:start="223:48" pos:end="223:65"><name pos:start="223:48" pos:end="223:65"><name pos:start="223:48" pos:end="223:50">pic</name><index pos:start="223:51" pos:end="223:65">[<expr pos:start="223:52" pos:end="223:64"><literal type="number" pos:start="223:52" pos:end="223:54">79</literal><operator pos:start="223:54" pos:end="223:54">-</operator><name pos:start="223:55" pos:end="223:64">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="227:5" pos:end="227:37"><expr pos:start="227:5" pos:end="227:36"><name pos:start="227:5" pos:end="227:7">dev</name> <operator pos:start="227:9" pos:end="227:9">=</operator> <call pos:start="227:11" pos:end="227:36"><name pos:start="227:11" pos:end="227:21">qdev_create</name><argument_list pos:start="227:22" pos:end="227:36">(<argument pos:start="227:23" pos:end="227:26"><expr pos:start="227:23" pos:end="227:26"><name pos:start="227:23" pos:end="227:26">NULL</name></expr></argument>, <argument pos:start="227:29" pos:end="227:35"><expr pos:start="227:29" pos:end="227:35"><literal type="string" pos:start="227:29" pos:end="227:35">"pl330"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:46"><expr pos:start="229:5" pos:end="229:45"><call pos:start="229:5" pos:end="229:45"><name pos:start="229:5" pos:end="229:23">qdev_prop_set_uint8</name><argument_list pos:start="229:24" pos:end="229:45">(<argument pos:start="229:25" pos:end="229:27"><expr pos:start="229:25" pos:end="229:27"><name pos:start="229:25" pos:end="229:27">dev</name></expr></argument>, <argument pos:start="229:30" pos:end="229:40"><expr pos:start="229:30" pos:end="229:40"><literal type="string" pos:start="229:30" pos:end="229:40">"num_chnls"</literal></expr></argument>,  <argument pos:start="229:44" pos:end="229:44"><expr pos:start="229:44" pos:end="229:44"><literal type="number" pos:start="229:44" pos:end="229:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:51"><expr pos:start="231:5" pos:end="231:50"><call pos:start="231:5" pos:end="231:50"><name pos:start="231:5" pos:end="231:23">qdev_prop_set_uint8</name><argument_list pos:start="231:24" pos:end="231:50">(<argument pos:start="231:25" pos:end="231:27"><expr pos:start="231:25" pos:end="231:27"><name pos:start="231:25" pos:end="231:27">dev</name></expr></argument>, <argument pos:start="231:30" pos:end="231:45"><expr pos:start="231:30" pos:end="231:45"><literal type="string" pos:start="231:30" pos:end="231:45">"num_periph_req"</literal></expr></argument>,  <argument pos:start="231:49" pos:end="231:49"><expr pos:start="231:49" pos:end="231:49"><literal type="number" pos:start="231:49" pos:end="231:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:48"><expr pos:start="233:5" pos:end="233:47"><call pos:start="233:5" pos:end="233:47"><name pos:start="233:5" pos:end="233:23">qdev_prop_set_uint8</name><argument_list pos:start="233:24" pos:end="233:47">(<argument pos:start="233:25" pos:end="233:27"><expr pos:start="233:25" pos:end="233:27"><name pos:start="233:25" pos:end="233:27">dev</name></expr></argument>, <argument pos:start="233:30" pos:end="233:41"><expr pos:start="233:30" pos:end="233:41"><literal type="string" pos:start="233:30" pos:end="233:41">"num_events"</literal></expr></argument>,  <argument pos:start="233:45" pos:end="233:46"><expr pos:start="233:45" pos:end="233:46"><literal type="number" pos:start="233:45" pos:end="233:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="237:5" pos:end="237:48"><expr pos:start="237:5" pos:end="237:47"><call pos:start="237:5" pos:end="237:47"><name pos:start="237:5" pos:end="237:23">qdev_prop_set_uint8</name><argument_list pos:start="237:24" pos:end="237:47">(<argument pos:start="237:25" pos:end="237:27"><expr pos:start="237:25" pos:end="237:27"><name pos:start="237:25" pos:end="237:27">dev</name></expr></argument>, <argument pos:start="237:30" pos:end="237:41"><expr pos:start="237:30" pos:end="237:41"><literal type="string" pos:start="237:30" pos:end="237:41">"data_width"</literal></expr></argument>,  <argument pos:start="237:45" pos:end="237:46"><expr pos:start="237:45" pos:end="237:46"><literal type="number" pos:start="237:45" pos:end="237:46">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:43"><expr pos:start="239:5" pos:end="239:42"><call pos:start="239:5" pos:end="239:42"><name pos:start="239:5" pos:end="239:23">qdev_prop_set_uint8</name><argument_list pos:start="239:24" pos:end="239:42">(<argument pos:start="239:25" pos:end="239:27"><expr pos:start="239:25" pos:end="239:27"><name pos:start="239:25" pos:end="239:27">dev</name></expr></argument>, <argument pos:start="239:30" pos:end="239:37"><expr pos:start="239:30" pos:end="239:37"><literal type="string" pos:start="239:30" pos:end="239:37">"wr_cap"</literal></expr></argument>,  <argument pos:start="239:41" pos:end="239:41"><expr pos:start="239:41" pos:end="239:41"><literal type="number" pos:start="239:41" pos:end="239:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:46"><expr pos:start="241:5" pos:end="241:45"><call pos:start="241:5" pos:end="241:45"><name pos:start="241:5" pos:end="241:23">qdev_prop_set_uint8</name><argument_list pos:start="241:24" pos:end="241:45">(<argument pos:start="241:25" pos:end="241:27"><expr pos:start="241:25" pos:end="241:27"><name pos:start="241:25" pos:end="241:27">dev</name></expr></argument>, <argument pos:start="241:30" pos:end="241:39"><expr pos:start="241:30" pos:end="241:39"><literal type="string" pos:start="241:30" pos:end="241:39">"wr_q_dep"</literal></expr></argument>,  <argument pos:start="241:43" pos:end="241:44"><expr pos:start="241:43" pos:end="241:44"><literal type="number" pos:start="241:43" pos:end="241:44">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:43"><expr pos:start="243:5" pos:end="243:42"><call pos:start="243:5" pos:end="243:42"><name pos:start="243:5" pos:end="243:23">qdev_prop_set_uint8</name><argument_list pos:start="243:24" pos:end="243:42">(<argument pos:start="243:25" pos:end="243:27"><expr pos:start="243:25" pos:end="243:27"><name pos:start="243:25" pos:end="243:27">dev</name></expr></argument>, <argument pos:start="243:30" pos:end="243:37"><expr pos:start="243:30" pos:end="243:37"><literal type="string" pos:start="243:30" pos:end="243:37">"rd_cap"</literal></expr></argument>,  <argument pos:start="243:41" pos:end="243:41"><expr pos:start="243:41" pos:end="243:41"><literal type="number" pos:start="243:41" pos:end="243:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:46"><expr pos:start="245:5" pos:end="245:45"><call pos:start="245:5" pos:end="245:45"><name pos:start="245:5" pos:end="245:23">qdev_prop_set_uint8</name><argument_list pos:start="245:24" pos:end="245:45">(<argument pos:start="245:25" pos:end="245:27"><expr pos:start="245:25" pos:end="245:27"><name pos:start="245:25" pos:end="245:27">dev</name></expr></argument>, <argument pos:start="245:30" pos:end="245:39"><expr pos:start="245:30" pos:end="245:39"><literal type="string" pos:start="245:30" pos:end="245:39">"rd_q_dep"</literal></expr></argument>,  <argument pos:start="245:43" pos:end="245:44"><expr pos:start="245:43" pos:end="245:44"><literal type="number" pos:start="245:43" pos:end="245:44">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:55"><expr pos:start="247:5" pos:end="247:54"><call pos:start="247:5" pos:end="247:54"><name pos:start="247:5" pos:end="247:24">qdev_prop_set_uint16</name><argument_list pos:start="247:25" pos:end="247:54">(<argument pos:start="247:26" pos:end="247:28"><expr pos:start="247:26" pos:end="247:28"><name pos:start="247:26" pos:end="247:28">dev</name></expr></argument>, <argument pos:start="247:31" pos:end="247:47"><expr pos:start="247:31" pos:end="247:47"><literal type="string" pos:start="247:31" pos:end="247:47">"data_buffer_dep"</literal></expr></argument>,  <argument pos:start="247:51" pos:end="247:53"><expr pos:start="247:51" pos:end="247:53"><literal type="number" pos:start="247:51" pos:end="247:53">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:26"><expr pos:start="251:5" pos:end="251:25"><call pos:start="251:5" pos:end="251:25"><name pos:start="251:5" pos:end="251:20">qdev_init_nofail</name><argument_list pos:start="251:21" pos:end="251:25">(<argument pos:start="251:22" pos:end="251:24"><expr pos:start="251:22" pos:end="251:24"><name pos:start="251:22" pos:end="251:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:33"><expr pos:start="253:5" pos:end="253:32"><name pos:start="253:5" pos:end="253:10">busdev</name> <operator pos:start="253:12" pos:end="253:12">=</operator> <call pos:start="253:14" pos:end="253:32"><name pos:start="253:14" pos:end="253:27">SYS_BUS_DEVICE</name><argument_list pos:start="253:28" pos:end="253:32">(<argument pos:start="253:29" pos:end="253:31"><expr pos:start="253:29" pos:end="253:31"><name pos:start="253:29" pos:end="253:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:43"><expr pos:start="255:5" pos:end="255:42"><call pos:start="255:5" pos:end="255:42"><name pos:start="255:5" pos:end="255:19">sysbus_mmio_map</name><argument_list pos:start="255:20" pos:end="255:42">(<argument pos:start="255:21" pos:end="255:26"><expr pos:start="255:21" pos:end="255:26"><name pos:start="255:21" pos:end="255:26">busdev</name></expr></argument>, <argument pos:start="255:29" pos:end="255:29"><expr pos:start="255:29" pos:end="255:29"><literal type="number" pos:start="255:29" pos:end="255:29">0</literal></expr></argument>, <argument pos:start="255:32" pos:end="255:41"><expr pos:start="255:32" pos:end="255:41"><literal type="number" pos:start="255:32" pos:end="255:41">0xF8003000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:54"><expr pos:start="257:5" pos:end="257:53"><call pos:start="257:5" pos:end="257:53"><name pos:start="257:5" pos:end="257:22">sysbus_connect_irq</name><argument_list pos:start="257:23" pos:end="257:53">(<argument pos:start="257:24" pos:end="257:29"><expr pos:start="257:24" pos:end="257:29"><name pos:start="257:24" pos:end="257:29">busdev</name></expr></argument>, <argument pos:start="257:32" pos:end="257:32"><expr pos:start="257:32" pos:end="257:32"><literal type="number" pos:start="257:32" pos:end="257:32">0</literal></expr></argument>, <argument pos:start="257:35" pos:end="257:52"><expr pos:start="257:35" pos:end="257:52"><name pos:start="257:35" pos:end="257:52"><name pos:start="257:35" pos:end="257:37">pic</name><index pos:start="257:38" pos:end="257:52">[<expr pos:start="257:39" pos:end="257:51"><literal type="number" pos:start="257:39" pos:end="257:41">45</literal><operator pos:start="257:41" pos:end="257:41">-</operator><name pos:start="257:42" pos:end="257:51">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="257:56" pos:end="257:75">/* abort irq line */</comment>

    <for pos:start="259:5" pos:end="263:5">for <control pos:start="259:9" pos:end="259:27">(<init pos:start="259:10" pos:end="259:15"><expr pos:start="259:10" pos:end="259:14"><name pos:start="259:10" pos:end="259:10">n</name> <operator pos:start="259:12" pos:end="259:12">=</operator> <literal type="number" pos:start="259:14" pos:end="259:14">0</literal></expr>;</init> <condition pos:start="259:17" pos:end="259:22"><expr pos:start="259:17" pos:end="259:21"><name pos:start="259:17" pos:end="259:17">n</name> <operator pos:start="259:19" pos:end="259:19">&lt;</operator> <literal type="number" pos:start="259:21" pos:end="259:21">8</literal></expr>;</condition> <incr pos:start="259:24" pos:end="259:26"><expr pos:start="259:24" pos:end="259:26"><operator pos:start="259:24" pos:end="259:25">++</operator><name pos:start="259:26" pos:end="259:26">n</name></expr></incr>)</control> <block pos:start="259:29" pos:end="263:5">{<block_content pos:start="261:9" pos:end="261:73"> <comment type="block" pos:start="259:31" pos:end="259:46">/* event irqs */</comment>

        <expr_stmt pos:start="261:9" pos:end="261:73"><expr pos:start="261:9" pos:end="261:72"><call pos:start="261:9" pos:end="261:72"><name pos:start="261:9" pos:end="261:26">sysbus_connect_irq</name><argument_list pos:start="261:27" pos:end="261:72">(<argument pos:start="261:28" pos:end="261:33"><expr pos:start="261:28" pos:end="261:33"><name pos:start="261:28" pos:end="261:33">busdev</name></expr></argument>, <argument pos:start="261:36" pos:end="261:40"><expr pos:start="261:36" pos:end="261:40"><name pos:start="261:36" pos:end="261:36">n</name> <operator pos:start="261:38" pos:end="261:38">+</operator> <literal type="number" pos:start="261:40" pos:end="261:40">1</literal></expr></argument>, <argument pos:start="261:43" pos:end="261:71"><expr pos:start="261:43" pos:end="261:71"><name pos:start="261:43" pos:end="261:71"><name pos:start="261:43" pos:end="261:45">pic</name><index pos:start="261:46" pos:end="261:71">[<expr pos:start="261:47" pos:end="261:70"><name pos:start="261:47" pos:end="261:57"><name pos:start="261:47" pos:end="261:54">dma_irqs</name><index pos:start="261:55" pos:end="261:57">[<expr pos:start="261:56" pos:end="261:56"><name pos:start="261:56" pos:end="261:56">n</name></expr>]</index></name> <operator pos:start="261:59" pos:end="261:59">-</operator> <name pos:start="261:61" pos:end="261:70">IRQ_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="267:5" pos:end="267:35"><expr pos:start="267:5" pos:end="267:34"><name pos:start="267:5" pos:end="267:23"><name pos:start="267:5" pos:end="267:14">zynq_binfo</name><operator pos:start="267:15" pos:end="267:15">.</operator><name pos:start="267:16" pos:end="267:23">ram_size</name></name> <operator pos:start="267:25" pos:end="267:25">=</operator> <name pos:start="267:27" pos:end="267:34">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:49"><expr pos:start="269:5" pos:end="269:48"><name pos:start="269:5" pos:end="269:30"><name pos:start="269:5" pos:end="269:14">zynq_binfo</name><operator pos:start="269:15" pos:end="269:15">.</operator><name pos:start="269:16" pos:end="269:30">kernel_filename</name></name> <operator pos:start="269:32" pos:end="269:32">=</operator> <name pos:start="269:34" pos:end="269:48">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:47"><expr pos:start="271:5" pos:end="271:46"><name pos:start="271:5" pos:end="271:29"><name pos:start="271:5" pos:end="271:14">zynq_binfo</name><operator pos:start="271:15" pos:end="271:15">.</operator><name pos:start="271:16" pos:end="271:29">kernel_cmdline</name></name> <operator pos:start="271:31" pos:end="271:31">=</operator> <name pos:start="271:33" pos:end="271:46">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:49"><expr pos:start="273:5" pos:end="273:48"><name pos:start="273:5" pos:end="273:30"><name pos:start="273:5" pos:end="273:14">zynq_binfo</name><operator pos:start="273:15" pos:end="273:15">.</operator><name pos:start="273:16" pos:end="273:30">initrd_filename</name></name> <operator pos:start="273:32" pos:end="273:32">=</operator> <name pos:start="273:34" pos:end="273:48">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:27"><expr pos:start="275:5" pos:end="275:26"><name pos:start="275:5" pos:end="275:22"><name pos:start="275:5" pos:end="275:14">zynq_binfo</name><operator pos:start="275:15" pos:end="275:15">.</operator><name pos:start="275:16" pos:end="275:22">nb_cpus</name></name> <operator pos:start="275:24" pos:end="275:24">=</operator> <literal type="number" pos:start="275:26" pos:end="275:26">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:32"><expr pos:start="277:5" pos:end="277:31"><name pos:start="277:5" pos:end="277:23"><name pos:start="277:5" pos:end="277:14">zynq_binfo</name><operator pos:start="277:15" pos:end="277:15">.</operator><name pos:start="277:16" pos:end="277:23">board_id</name></name> <operator pos:start="277:25" pos:end="277:25">=</operator> <literal type="number" pos:start="277:27" pos:end="277:31">0xd32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:32"><expr pos:start="279:5" pos:end="279:31"><name pos:start="279:5" pos:end="279:27"><name pos:start="279:5" pos:end="279:14">zynq_binfo</name><operator pos:start="279:15" pos:end="279:15">.</operator><name pos:start="279:16" pos:end="279:27">loader_start</name></name> <operator pos:start="279:29" pos:end="279:29">=</operator> <literal type="number" pos:start="279:31" pos:end="279:31">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:53"><expr pos:start="281:5" pos:end="281:52"><call pos:start="281:5" pos:end="281:52"><name pos:start="281:5" pos:end="281:19">arm_load_kernel</name><argument_list pos:start="281:20" pos:end="281:52">(<argument pos:start="281:21" pos:end="281:38"><expr pos:start="281:21" pos:end="281:38"><call pos:start="281:21" pos:end="281:38"><name pos:start="281:21" pos:end="281:27">ARM_CPU</name><argument_list pos:start="281:28" pos:end="281:38">(<argument pos:start="281:29" pos:end="281:37"><expr pos:start="281:29" pos:end="281:37"><name pos:start="281:29" pos:end="281:37">first_cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="281:41" pos:end="281:51"><expr pos:start="281:41" pos:end="281:51"><operator pos:start="281:41" pos:end="281:41">&amp;</operator><name pos:start="281:42" pos:end="281:51">zynq_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
