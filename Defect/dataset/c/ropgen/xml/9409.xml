<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9409.c" pos:tabs="8"><function pos:start="1:1" pos:end="375:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">fsl_imx31_realize</name><parameter_list pos:start="1:30" pos:end="1:61">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:41">DeviceState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="375:1">{<block_content pos:start="5:5" pos:end="373:48">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">FslIMX31State</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:37">= <expr pos:start="5:24" pos:end="5:37"><call pos:start="5:24" pos:end="5:37"><name pos:start="5:24" pos:end="5:32">FSL_IMX31</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:70"><expr pos:start="13:5" pos:end="13:69"><call pos:start="13:5" pos:end="13:69"><name pos:start="13:5" pos:end="13:28">object_property_set_bool</name><argument_list pos:start="13:29" pos:end="13:69">(<argument pos:start="13:30" pos:end="13:44"><expr pos:start="13:30" pos:end="13:44"><call pos:start="13:30" pos:end="13:44"><name pos:start="13:30" pos:end="13:35">OBJECT</name><argument_list pos:start="13:36" pos:end="13:44">(<argument pos:start="13:37" pos:end="13:43"><expr pos:start="13:37" pos:end="13:43"><operator pos:start="13:37" pos:end="13:37">&amp;</operator><name pos:start="13:38" pos:end="13:43"><name pos:start="13:38" pos:end="13:38">s</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:43">cpu</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="13:47" pos:end="13:50"><expr pos:start="13:47" pos:end="13:50"><name pos:start="13:47" pos:end="13:50">true</name></expr></argument>, <argument pos:start="13:53" pos:end="13:62"><expr pos:start="13:53" pos:end="13:62"><literal type="string" pos:start="13:53" pos:end="13:62">"realized"</literal></expr></argument>, <argument pos:start="13:65" pos:end="13:68"><expr pos:start="13:65" pos:end="13:68"><operator pos:start="13:65" pos:end="13:65">&amp;</operator><name pos:start="13:66" pos:end="13:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">err</name></expr>)</condition> <block pos:start="15:14" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:35"><expr pos:start="17:9" pos:end="17:34"><call pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:23">error_propagate</name><argument_list pos:start="17:24" pos:end="17:34">(<argument pos:start="17:25" pos:end="17:28"><expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">errp</name></expr></argument>, <argument pos:start="17:31" pos:end="17:33"><expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:71"><expr pos:start="25:5" pos:end="25:70"><call pos:start="25:5" pos:end="25:70"><name pos:start="25:5" pos:end="25:28">object_property_set_bool</name><argument_list pos:start="25:29" pos:end="25:70">(<argument pos:start="25:30" pos:end="25:45"><expr pos:start="25:30" pos:end="25:45"><call pos:start="25:30" pos:end="25:45"><name pos:start="25:30" pos:end="25:35">OBJECT</name><argument_list pos:start="25:36" pos:end="25:45">(<argument pos:start="25:37" pos:end="25:44"><expr pos:start="25:37" pos:end="25:44"><operator pos:start="25:37" pos:end="25:37">&amp;</operator><name pos:start="25:38" pos:end="25:44"><name pos:start="25:38" pos:end="25:38">s</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:44">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:48" pos:end="25:51"><expr pos:start="25:48" pos:end="25:51"><name pos:start="25:48" pos:end="25:51">true</name></expr></argument>, <argument pos:start="25:54" pos:end="25:63"><expr pos:start="25:54" pos:end="25:63"><literal type="string" pos:start="25:54" pos:end="25:63">"realized"</literal></expr></argument>, <argument pos:start="25:66" pos:end="25:69"><expr pos:start="25:66" pos:end="25:69"><operator pos:start="25:66" pos:end="25:66">&amp;</operator><name pos:start="25:67" pos:end="25:69">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:12">(<expr pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">err</name></expr>)</condition> <block pos:start="27:14" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:15">

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><call pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:23">error_propagate</name><argument_list pos:start="29:24" pos:end="29:34">(<argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><name pos:start="29:25" pos:end="29:28">errp</name></expr></argument>, <argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:70"><expr pos:start="35:5" pos:end="35:69"><call pos:start="35:5" pos:end="35:69"><name pos:start="35:5" pos:end="35:19">sysbus_mmio_map</name><argument_list pos:start="35:20" pos:end="35:69">(<argument pos:start="35:21" pos:end="35:44"><expr pos:start="35:21" pos:end="35:44"><call pos:start="35:21" pos:end="35:44"><name pos:start="35:21" pos:end="35:34">SYS_BUS_DEVICE</name><argument_list pos:start="35:35" pos:end="35:44">(<argument pos:start="35:36" pos:end="35:43"><expr pos:start="35:36" pos:end="35:43"><operator pos:start="35:36" pos:end="35:36">&amp;</operator><name pos:start="35:37" pos:end="35:43"><name pos:start="35:37" pos:end="35:37">s</name><operator pos:start="35:38" pos:end="35:39">-&gt;</operator><name pos:start="35:40" pos:end="35:43">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:47" pos:end="35:47"><expr pos:start="35:47" pos:end="35:47"><literal type="number" pos:start="35:47" pos:end="35:47">0</literal></expr></argument>, <argument pos:start="35:50" pos:end="35:68"><expr pos:start="35:50" pos:end="35:68"><name pos:start="35:50" pos:end="35:68">FSL_IMX31_AVIC_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="39:71"><expr pos:start="37:5" pos:end="39:70"><call pos:start="37:5" pos:end="39:70"><name pos:start="37:5" pos:end="37:22">sysbus_connect_irq</name><argument_list pos:start="37:23" pos:end="39:70">(<argument pos:start="37:24" pos:end="37:47"><expr pos:start="37:24" pos:end="37:47"><call pos:start="37:24" pos:end="37:47"><name pos:start="37:24" pos:end="37:37">SYS_BUS_DEVICE</name><argument_list pos:start="37:38" pos:end="37:47">(<argument pos:start="37:39" pos:end="37:46"><expr pos:start="37:39" pos:end="37:46"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:46"><name pos:start="37:40" pos:end="37:40">s</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:46">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:50" pos:end="37:50"><expr pos:start="37:50" pos:end="37:50"><literal type="number" pos:start="37:50" pos:end="37:50">0</literal></expr></argument>,

                       <argument pos:start="39:24" pos:end="39:69"><expr pos:start="39:24" pos:end="39:69"><call pos:start="39:24" pos:end="39:69"><name pos:start="39:24" pos:end="39:39">qdev_get_gpio_in</name><argument_list pos:start="39:40" pos:end="39:69">(<argument pos:start="39:41" pos:end="39:55"><expr pos:start="39:41" pos:end="39:55"><call pos:start="39:41" pos:end="39:55"><name pos:start="39:41" pos:end="39:46">DEVICE</name><argument_list pos:start="39:47" pos:end="39:55">(<argument pos:start="39:48" pos:end="39:54"><expr pos:start="39:48" pos:end="39:54"><operator pos:start="39:48" pos:end="39:48">&amp;</operator><name pos:start="39:49" pos:end="39:54"><name pos:start="39:49" pos:end="39:49">s</name><operator pos:start="39:50" pos:end="39:51">-&gt;</operator><name pos:start="39:52" pos:end="39:54">cpu</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:58" pos:end="39:68"><expr pos:start="39:58" pos:end="39:68"><name pos:start="39:58" pos:end="39:68">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="43:71"><expr pos:start="41:5" pos:end="43:70"><call pos:start="41:5" pos:end="43:70"><name pos:start="41:5" pos:end="41:22">sysbus_connect_irq</name><argument_list pos:start="41:23" pos:end="43:70">(<argument pos:start="41:24" pos:end="41:47"><expr pos:start="41:24" pos:end="41:47"><call pos:start="41:24" pos:end="41:47"><name pos:start="41:24" pos:end="41:37">SYS_BUS_DEVICE</name><argument_list pos:start="41:38" pos:end="41:47">(<argument pos:start="41:39" pos:end="41:46"><expr pos:start="41:39" pos:end="41:46"><operator pos:start="41:39" pos:end="41:39">&amp;</operator><name pos:start="41:40" pos:end="41:46"><name pos:start="41:40" pos:end="41:40">s</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:46">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:50" pos:end="41:50"><expr pos:start="41:50" pos:end="41:50"><literal type="number" pos:start="41:50" pos:end="41:50">1</literal></expr></argument>,

                       <argument pos:start="43:24" pos:end="43:69"><expr pos:start="43:24" pos:end="43:69"><call pos:start="43:24" pos:end="43:69"><name pos:start="43:24" pos:end="43:39">qdev_get_gpio_in</name><argument_list pos:start="43:40" pos:end="43:69">(<argument pos:start="43:41" pos:end="43:55"><expr pos:start="43:41" pos:end="43:55"><call pos:start="43:41" pos:end="43:55"><name pos:start="43:41" pos:end="43:46">DEVICE</name><argument_list pos:start="43:47" pos:end="43:55">(<argument pos:start="43:48" pos:end="43:54"><expr pos:start="43:48" pos:end="43:54"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:54"><name pos:start="43:49" pos:end="43:49">s</name><operator pos:start="43:50" pos:end="43:51">-&gt;</operator><name pos:start="43:52" pos:end="43:54">cpu</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:58" pos:end="43:68"><expr pos:start="43:58" pos:end="43:68"><name pos:start="43:58" pos:end="43:68">ARM_CPU_FIQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:70"><expr pos:start="47:5" pos:end="47:69"><call pos:start="47:5" pos:end="47:69"><name pos:start="47:5" pos:end="47:28">object_property_set_bool</name><argument_list pos:start="47:29" pos:end="47:69">(<argument pos:start="47:30" pos:end="47:44"><expr pos:start="47:30" pos:end="47:44"><call pos:start="47:30" pos:end="47:44"><name pos:start="47:30" pos:end="47:35">OBJECT</name><argument_list pos:start="47:36" pos:end="47:44">(<argument pos:start="47:37" pos:end="47:43"><expr pos:start="47:37" pos:end="47:43"><operator pos:start="47:37" pos:end="47:37">&amp;</operator><name pos:start="47:38" pos:end="47:43"><name pos:start="47:38" pos:end="47:38">s</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:43">ccm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:47" pos:end="47:50"><expr pos:start="47:47" pos:end="47:50"><name pos:start="47:47" pos:end="47:50">true</name></expr></argument>, <argument pos:start="47:53" pos:end="47:62"><expr pos:start="47:53" pos:end="47:62"><literal type="string" pos:start="47:53" pos:end="47:62">"realized"</literal></expr></argument>, <argument pos:start="47:65" pos:end="47:68"><expr pos:start="47:65" pos:end="47:68"><operator pos:start="47:65" pos:end="47:65">&amp;</operator><name pos:start="47:66" pos:end="47:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">err</name></expr>)</condition> <block pos:start="49:14" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:15">

        <expr_stmt pos:start="51:9" pos:end="51:35"><expr pos:start="51:9" pos:end="51:34"><call pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:23">error_propagate</name><argument_list pos:start="51:24" pos:end="51:34">(<argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><name pos:start="51:25" pos:end="51:28">errp</name></expr></argument>, <argument pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><name pos:start="51:31" pos:end="51:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:68"><expr pos:start="57:5" pos:end="57:67"><call pos:start="57:5" pos:end="57:67"><name pos:start="57:5" pos:end="57:19">sysbus_mmio_map</name><argument_list pos:start="57:20" pos:end="57:67">(<argument pos:start="57:21" pos:end="57:43"><expr pos:start="57:21" pos:end="57:43"><call pos:start="57:21" pos:end="57:43"><name pos:start="57:21" pos:end="57:34">SYS_BUS_DEVICE</name><argument_list pos:start="57:35" pos:end="57:43">(<argument pos:start="57:36" pos:end="57:42"><expr pos:start="57:36" pos:end="57:42"><operator pos:start="57:36" pos:end="57:36">&amp;</operator><name pos:start="57:37" pos:end="57:42"><name pos:start="57:37" pos:end="57:37">s</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:42">ccm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="57:46" pos:end="57:46"><expr pos:start="57:46" pos:end="57:46"><literal type="number" pos:start="57:46" pos:end="57:46">0</literal></expr></argument>, <argument pos:start="57:49" pos:end="57:66"><expr pos:start="57:49" pos:end="57:66"><name pos:start="57:49" pos:end="57:66">FSL_IMX31_CCM_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:30">/* Initialize all UARTS */</comment>

    <for pos:start="63:5" pos:end="129:5">for <control pos:start="63:9" pos:end="63:45">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:40"><expr pos:start="63:17" pos:end="63:39"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:39">FSL_IMX31_NUM_UARTS</name></expr>;</condition> <incr pos:start="63:42" pos:end="63:44"><expr pos:start="63:42" pos:end="63:44"><name pos:start="63:42" pos:end="63:42">i</name><operator pos:start="63:43" pos:end="63:44">++</operator></expr></incr>)</control> <block pos:start="63:47" pos:end="129:5">{<block_content pos:start="65:9" pos:end="127:66">

        <struct pos:start="65:9" pos:end="77:10"><specifier pos:start="65:9" pos:end="65:14">static</specifier> <specifier pos:start="65:16" pos:end="65:20">const</specifier> struct <block pos:start="65:29" pos:end="71:9">{

            <decl_stmt pos:start="67:13" pos:end="67:24"><decl pos:start="67:13" pos:end="67:23"><type pos:start="67:13" pos:end="67:18"><name pos:start="67:13" pos:end="67:18">hwaddr</name></type> <name pos:start="67:20" pos:end="67:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="69:13" pos:end="69:29"><decl pos:start="69:13" pos:end="69:28"><type pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:20">unsigned</name> <name pos:start="69:22" pos:end="69:24">int</name></type> <name pos:start="69:26" pos:end="69:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="71:11" pos:end="77:9"><name pos:start="71:11" pos:end="71:43"><name pos:start="71:11" pos:end="71:22">serial_table</name><index pos:start="71:23" pos:end="71:43">[<expr pos:start="71:24" pos:end="71:42"><name pos:start="71:24" pos:end="71:42">FSL_IMX31_NUM_UARTS</name></expr>]</index></name> <init pos:start="71:45" pos:end="77:9">= <expr pos:start="71:47" pos:end="77:9"><block pos:start="71:47" pos:end="77:9">{

            <expr pos:start="73:13" pos:end="73:57"><block pos:start="73:13" pos:end="73:57">{ <expr pos:start="73:15" pos:end="73:34"><name pos:start="73:15" pos:end="73:34">FSL_IMX31_UART1_ADDR</name></expr>, <expr pos:start="73:37" pos:end="73:55"><name pos:start="73:37" pos:end="73:55">FSL_IMX31_UART1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="75:13" pos:end="75:57"><block pos:start="75:13" pos:end="75:57">{ <expr pos:start="75:15" pos:end="75:34"><name pos:start="75:15" pos:end="75:34">FSL_IMX31_UART2_ADDR</name></expr>, <expr pos:start="75:37" pos:end="75:55"><name pos:start="75:37" pos:end="75:55">FSL_IMX31_UART2_IRQ</name></expr> }</block></expr>,

        }</block></expr></init></decl>;</struct>



        <if_stmt pos:start="81:9" pos:end="105:9"><if pos:start="81:9" pos:end="105:9">if <condition pos:start="81:12" pos:end="81:33">(<expr pos:start="81:13" pos:end="81:32"><name pos:start="81:13" pos:end="81:13">i</name> <operator pos:start="81:15" pos:end="81:15">&lt;</operator> <name pos:start="81:17" pos:end="81:32">MAX_SERIAL_PORTS</name></expr>)</condition> <block pos:start="81:35" pos:end="105:9">{<block_content pos:start="83:13" pos:end="103:67">

            <decl_stmt pos:start="83:13" pos:end="83:25"><decl pos:start="83:13" pos:end="83:24"><type pos:start="83:13" pos:end="83:21"><name pos:start="83:13" pos:end="83:19">Chardev</name> <modifier pos:start="83:21" pos:end="83:21">*</modifier></type><name pos:start="83:22" pos:end="83:24">chr</name></decl>;</decl_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:32"><expr pos:start="87:13" pos:end="87:31"><name pos:start="87:13" pos:end="87:15">chr</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:31"><name pos:start="87:19" pos:end="87:28">serial_hds</name><index pos:start="87:29" pos:end="87:31">[<expr pos:start="87:30" pos:end="87:30"><name pos:start="87:30" pos:end="87:30">i</name></expr>]</index></name></expr>;</expr_stmt>



            <if_stmt pos:start="91:13" pos:end="99:13"><if pos:start="91:13" pos:end="99:13">if <condition pos:start="91:16" pos:end="91:21">(<expr pos:start="91:17" pos:end="91:20"><operator pos:start="91:17" pos:end="91:17">!</operator><name pos:start="91:18" pos:end="91:20">chr</name></expr>)</condition> <block pos:start="91:23" pos:end="99:13">{<block_content pos:start="93:17" pos:end="97:50">

                <decl_stmt pos:start="93:17" pos:end="93:31"><decl pos:start="93:17" pos:end="93:30"><type pos:start="93:17" pos:end="93:20"><name pos:start="93:17" pos:end="93:20">char</name></type> <name pos:start="93:22" pos:end="93:30"><name pos:start="93:22" pos:end="93:26">label</name><index pos:start="93:27" pos:end="93:30">[<expr pos:start="93:28" pos:end="93:29"><literal type="number" pos:start="93:28" pos:end="93:29">20</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:66"><expr pos:start="95:17" pos:end="95:65"><call pos:start="95:17" pos:end="95:65"><name pos:start="95:17" pos:end="95:24">snprintf</name><argument_list pos:start="95:25" pos:end="95:65">(<argument pos:start="95:26" pos:end="95:30"><expr pos:start="95:26" pos:end="95:30"><name pos:start="95:26" pos:end="95:30">label</name></expr></argument>, <argument pos:start="95:33" pos:end="95:45"><expr pos:start="95:33" pos:end="95:45"><sizeof pos:start="95:33" pos:end="95:45">sizeof<argument_list pos:start="95:39" pos:end="95:45">(<argument pos:start="95:40" pos:end="95:44"><expr pos:start="95:40" pos:end="95:44"><name pos:start="95:40" pos:end="95:44">label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:48" pos:end="95:61"><expr pos:start="95:48" pos:end="95:61"><literal type="string" pos:start="95:48" pos:end="95:61">"imx31.uart%d"</literal></expr></argument>, <argument pos:start="95:64" pos:end="95:64"><expr pos:start="95:64" pos:end="95:64"><name pos:start="95:64" pos:end="95:64">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:50"><expr pos:start="97:17" pos:end="97:49"><name pos:start="97:17" pos:end="97:19">chr</name> <operator pos:start="97:21" pos:end="97:21">=</operator> <call pos:start="97:23" pos:end="97:49"><name pos:start="97:23" pos:end="97:34">qemu_chr_new</name><argument_list pos:start="97:35" pos:end="97:49">(<argument pos:start="97:36" pos:end="97:40"><expr pos:start="97:36" pos:end="97:40"><name pos:start="97:36" pos:end="97:40">label</name></expr></argument>, <argument pos:start="97:43" pos:end="97:48"><expr pos:start="97:43" pos:end="97:48"><literal type="string" pos:start="97:43" pos:end="97:48">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="103:13" pos:end="103:67"><expr pos:start="103:13" pos:end="103:66"><call pos:start="103:13" pos:end="103:66"><name pos:start="103:13" pos:end="103:29">qdev_prop_set_chr</name><argument_list pos:start="103:30" pos:end="103:66">(<argument pos:start="103:31" pos:end="103:49"><expr pos:start="103:31" pos:end="103:49"><call pos:start="103:31" pos:end="103:49"><name pos:start="103:31" pos:end="103:36">DEVICE</name><argument_list pos:start="103:37" pos:end="103:49">(<argument pos:start="103:38" pos:end="103:48"><expr pos:start="103:38" pos:end="103:48"><operator pos:start="103:38" pos:end="103:38">&amp;</operator><name pos:start="103:39" pos:end="103:48"><name pos:start="103:39" pos:end="103:39">s</name><operator pos:start="103:40" pos:end="103:41">-&gt;</operator><name pos:start="103:42" pos:end="103:45">uart</name><index pos:start="103:46" pos:end="103:48">[<expr pos:start="103:47" pos:end="103:47"><name pos:start="103:47" pos:end="103:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="103:52" pos:end="103:60"><expr pos:start="103:52" pos:end="103:60"><literal type="string" pos:start="103:52" pos:end="103:60">"chardev"</literal></expr></argument>, <argument pos:start="103:63" pos:end="103:65"><expr pos:start="103:63" pos:end="103:65"><name pos:start="103:63" pos:end="103:65">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:78"><expr pos:start="109:9" pos:end="109:77"><call pos:start="109:9" pos:end="109:77"><name pos:start="109:9" pos:end="109:32">object_property_set_bool</name><argument_list pos:start="109:33" pos:end="109:77">(<argument pos:start="109:34" pos:end="109:52"><expr pos:start="109:34" pos:end="109:52"><call pos:start="109:34" pos:end="109:52"><name pos:start="109:34" pos:end="109:39">OBJECT</name><argument_list pos:start="109:40" pos:end="109:52">(<argument pos:start="109:41" pos:end="109:51"><expr pos:start="109:41" pos:end="109:51"><operator pos:start="109:41" pos:end="109:41">&amp;</operator><name pos:start="109:42" pos:end="109:51"><name pos:start="109:42" pos:end="109:42">s</name><operator pos:start="109:43" pos:end="109:44">-&gt;</operator><name pos:start="109:45" pos:end="109:48">uart</name><index pos:start="109:49" pos:end="109:51">[<expr pos:start="109:50" pos:end="109:50"><name pos:start="109:50" pos:end="109:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:55" pos:end="109:58"><expr pos:start="109:55" pos:end="109:58"><name pos:start="109:55" pos:end="109:58">true</name></expr></argument>, <argument pos:start="109:61" pos:end="109:70"><expr pos:start="109:61" pos:end="109:70"><literal type="string" pos:start="109:61" pos:end="109:70">"realized"</literal></expr></argument>, <argument pos:start="109:73" pos:end="109:76"><expr pos:start="109:73" pos:end="109:76"><operator pos:start="109:73" pos:end="109:73">&amp;</operator><name pos:start="109:74" pos:end="109:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:16">(<expr pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:15">err</name></expr>)</condition> <block pos:start="111:18" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:19">

            <expr_stmt pos:start="113:13" pos:end="113:39"><expr pos:start="113:13" pos:end="113:38"><call pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:27">error_propagate</name><argument_list pos:start="113:28" pos:end="113:38">(<argument pos:start="113:29" pos:end="113:32"><expr pos:start="113:29" pos:end="113:32"><name pos:start="113:29" pos:end="113:32">errp</name></expr></argument>, <argument pos:start="113:35" pos:end="113:37"><expr pos:start="113:35" pos:end="113:37"><name pos:start="113:35" pos:end="113:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="115:13" pos:end="115:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="121:9" pos:end="121:78"><expr pos:start="121:9" pos:end="121:77"><call pos:start="121:9" pos:end="121:77"><name pos:start="121:9" pos:end="121:23">sysbus_mmio_map</name><argument_list pos:start="121:24" pos:end="121:77">(<argument pos:start="121:25" pos:end="121:51"><expr pos:start="121:25" pos:end="121:51"><call pos:start="121:25" pos:end="121:51"><name pos:start="121:25" pos:end="121:38">SYS_BUS_DEVICE</name><argument_list pos:start="121:39" pos:end="121:51">(<argument pos:start="121:40" pos:end="121:50"><expr pos:start="121:40" pos:end="121:50"><operator pos:start="121:40" pos:end="121:40">&amp;</operator><name pos:start="121:41" pos:end="121:50"><name pos:start="121:41" pos:end="121:41">s</name><operator pos:start="121:42" pos:end="121:43">-&gt;</operator><name pos:start="121:44" pos:end="121:47">uart</name><index pos:start="121:48" pos:end="121:50">[<expr pos:start="121:49" pos:end="121:49"><name pos:start="121:49" pos:end="121:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:54" pos:end="121:54"><expr pos:start="121:54" pos:end="121:54"><literal type="number" pos:start="121:54" pos:end="121:54">0</literal></expr></argument>, <argument pos:start="121:57" pos:end="121:76"><expr pos:start="121:57" pos:end="121:76"><name pos:start="121:57" pos:end="121:71"><name pos:start="121:57" pos:end="121:68">serial_table</name><index pos:start="121:69" pos:end="121:71">[<expr pos:start="121:70" pos:end="121:70"><name pos:start="121:70" pos:end="121:70">i</name></expr>]</index></name><operator pos:start="121:72" pos:end="121:72">.</operator><name pos:start="121:73" pos:end="121:76">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="127:66"><expr pos:start="123:9" pos:end="127:65"><call pos:start="123:9" pos:end="127:65"><name pos:start="123:9" pos:end="123:26">sysbus_connect_irq</name><argument_list pos:start="123:27" pos:end="127:65">(<argument pos:start="123:28" pos:end="123:54"><expr pos:start="123:28" pos:end="123:54"><call pos:start="123:28" pos:end="123:54"><name pos:start="123:28" pos:end="123:41">SYS_BUS_DEVICE</name><argument_list pos:start="123:42" pos:end="123:54">(<argument pos:start="123:43" pos:end="123:53"><expr pos:start="123:43" pos:end="123:53"><operator pos:start="123:43" pos:end="123:43">&amp;</operator><name pos:start="123:44" pos:end="123:53"><name pos:start="123:44" pos:end="123:44">s</name><operator pos:start="123:45" pos:end="123:46">-&gt;</operator><name pos:start="123:47" pos:end="123:50">uart</name><index pos:start="123:51" pos:end="123:53">[<expr pos:start="123:52" pos:end="123:52"><name pos:start="123:52" pos:end="123:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:57" pos:end="123:57"><expr pos:start="123:57" pos:end="123:57"><literal type="number" pos:start="123:57" pos:end="123:57">0</literal></expr></argument>,

                           <argument pos:start="125:28" pos:end="127:64"><expr pos:start="125:28" pos:end="127:64"><call pos:start="125:28" pos:end="127:64"><name pos:start="125:28" pos:end="125:43">qdev_get_gpio_in</name><argument_list pos:start="125:44" pos:end="127:64">(<argument pos:start="125:45" pos:end="125:60"><expr pos:start="125:45" pos:end="125:60"><call pos:start="125:45" pos:end="125:60"><name pos:start="125:45" pos:end="125:50">DEVICE</name><argument_list pos:start="125:51" pos:end="125:60">(<argument pos:start="125:52" pos:end="125:59"><expr pos:start="125:52" pos:end="125:59"><operator pos:start="125:52" pos:end="125:52">&amp;</operator><name pos:start="125:53" pos:end="125:59"><name pos:start="125:53" pos:end="125:53">s</name><operator pos:start="125:54" pos:end="125:55">-&gt;</operator><name pos:start="125:56" pos:end="125:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="127:45" pos:end="127:63"><expr pos:start="127:45" pos:end="127:63"><name pos:start="127:45" pos:end="127:59"><name pos:start="127:45" pos:end="127:56">serial_table</name><index pos:start="127:57" pos:end="127:59">[<expr pos:start="127:58" pos:end="127:58"><name pos:start="127:58" pos:end="127:58">i</name></expr>]</index></name><operator pos:start="127:60" pos:end="127:60">.</operator><name pos:start="127:61" pos:end="127:63">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="133:5" pos:end="133:34"><expr pos:start="133:5" pos:end="133:33"><name pos:start="133:5" pos:end="133:14"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:10">gpt</name><operator pos:start="133:11" pos:end="133:11">.</operator><name pos:start="133:12" pos:end="133:14">ccm</name></name> <operator pos:start="133:16" pos:end="133:16">=</operator> <call pos:start="133:18" pos:end="133:33"><name pos:start="133:18" pos:end="133:24">IMX_CCM</name><argument_list pos:start="133:25" pos:end="133:33">(<argument pos:start="133:26" pos:end="133:32"><expr pos:start="133:26" pos:end="133:32"><operator pos:start="133:26" pos:end="133:26">&amp;</operator><name pos:start="133:27" pos:end="133:32"><name pos:start="133:27" pos:end="133:27">s</name><operator pos:start="133:28" pos:end="133:29">-&gt;</operator><name pos:start="133:30" pos:end="133:32">ccm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:70"><expr pos:start="137:5" pos:end="137:69"><call pos:start="137:5" pos:end="137:69"><name pos:start="137:5" pos:end="137:28">object_property_set_bool</name><argument_list pos:start="137:29" pos:end="137:69">(<argument pos:start="137:30" pos:end="137:44"><expr pos:start="137:30" pos:end="137:44"><call pos:start="137:30" pos:end="137:44"><name pos:start="137:30" pos:end="137:35">OBJECT</name><argument_list pos:start="137:36" pos:end="137:44">(<argument pos:start="137:37" pos:end="137:43"><expr pos:start="137:37" pos:end="137:43"><operator pos:start="137:37" pos:end="137:37">&amp;</operator><name pos:start="137:38" pos:end="137:43"><name pos:start="137:38" pos:end="137:38">s</name><operator pos:start="137:39" pos:end="137:40">-&gt;</operator><name pos:start="137:41" pos:end="137:43">gpt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="137:47" pos:end="137:50"><expr pos:start="137:47" pos:end="137:50"><name pos:start="137:47" pos:end="137:50">true</name></expr></argument>, <argument pos:start="137:53" pos:end="137:62"><expr pos:start="137:53" pos:end="137:62"><literal type="string" pos:start="137:53" pos:end="137:62">"realized"</literal></expr></argument>, <argument pos:start="137:65" pos:end="137:68"><expr pos:start="137:65" pos:end="137:68"><operator pos:start="137:65" pos:end="137:65">&amp;</operator><name pos:start="137:66" pos:end="137:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:12">(<expr pos:start="139:9" pos:end="139:11"><name pos:start="139:9" pos:end="139:11">err</name></expr>)</condition> <block pos:start="139:14" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:15">

        <expr_stmt pos:start="141:9" pos:end="141:35"><expr pos:start="141:9" pos:end="141:34"><call pos:start="141:9" pos:end="141:34"><name pos:start="141:9" pos:end="141:23">error_propagate</name><argument_list pos:start="141:24" pos:end="141:34">(<argument pos:start="141:25" pos:end="141:28"><expr pos:start="141:25" pos:end="141:28"><name pos:start="141:25" pos:end="141:28">errp</name></expr></argument>, <argument pos:start="141:31" pos:end="141:33"><expr pos:start="141:31" pos:end="141:33"><name pos:start="141:31" pos:end="141:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:68"><expr pos:start="149:5" pos:end="149:67"><call pos:start="149:5" pos:end="149:67"><name pos:start="149:5" pos:end="149:19">sysbus_mmio_map</name><argument_list pos:start="149:20" pos:end="149:67">(<argument pos:start="149:21" pos:end="149:43"><expr pos:start="149:21" pos:end="149:43"><call pos:start="149:21" pos:end="149:43"><name pos:start="149:21" pos:end="149:34">SYS_BUS_DEVICE</name><argument_list pos:start="149:35" pos:end="149:43">(<argument pos:start="149:36" pos:end="149:42"><expr pos:start="149:36" pos:end="149:42"><operator pos:start="149:36" pos:end="149:36">&amp;</operator><name pos:start="149:37" pos:end="149:42"><name pos:start="149:37" pos:end="149:37">s</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:42">gpt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="149:46" pos:end="149:46"><expr pos:start="149:46" pos:end="149:46"><literal type="number" pos:start="149:46" pos:end="149:46">0</literal></expr></argument>, <argument pos:start="149:49" pos:end="149:66"><expr pos:start="149:49" pos:end="149:66"><name pos:start="149:49" pos:end="149:66">FSL_IMX31_GPT_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="153:78"><expr pos:start="151:5" pos:end="153:77"><call pos:start="151:5" pos:end="153:77"><name pos:start="151:5" pos:end="151:22">sysbus_connect_irq</name><argument_list pos:start="151:23" pos:end="153:77">(<argument pos:start="151:24" pos:end="151:46"><expr pos:start="151:24" pos:end="151:46"><call pos:start="151:24" pos:end="151:46"><name pos:start="151:24" pos:end="151:37">SYS_BUS_DEVICE</name><argument_list pos:start="151:38" pos:end="151:46">(<argument pos:start="151:39" pos:end="151:45"><expr pos:start="151:39" pos:end="151:45"><operator pos:start="151:39" pos:end="151:39">&amp;</operator><name pos:start="151:40" pos:end="151:45"><name pos:start="151:40" pos:end="151:40">s</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:45">gpt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="151:49" pos:end="151:49"><expr pos:start="151:49" pos:end="151:49"><literal type="number" pos:start="151:49" pos:end="151:49">0</literal></expr></argument>,

                       <argument pos:start="153:24" pos:end="153:76"><expr pos:start="153:24" pos:end="153:76"><call pos:start="153:24" pos:end="153:76"><name pos:start="153:24" pos:end="153:39">qdev_get_gpio_in</name><argument_list pos:start="153:40" pos:end="153:76">(<argument pos:start="153:41" pos:end="153:56"><expr pos:start="153:41" pos:end="153:56"><call pos:start="153:41" pos:end="153:56"><name pos:start="153:41" pos:end="153:46">DEVICE</name><argument_list pos:start="153:47" pos:end="153:56">(<argument pos:start="153:48" pos:end="153:55"><expr pos:start="153:48" pos:end="153:55"><operator pos:start="153:48" pos:end="153:48">&amp;</operator><name pos:start="153:49" pos:end="153:55"><name pos:start="153:49" pos:end="153:49">s</name><operator pos:start="153:50" pos:end="153:51">-&gt;</operator><name pos:start="153:52" pos:end="153:55">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:59" pos:end="153:75"><expr pos:start="153:59" pos:end="153:75"><name pos:start="153:59" pos:end="153:75">FSL_IMX31_GPT_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:36">/* Initialize all EPIT timers */</comment>

    <for pos:start="159:5" pos:end="201:5">for <control pos:start="159:9" pos:end="159:45">(<init pos:start="159:10" pos:end="159:15"><expr pos:start="159:10" pos:end="159:14"><name pos:start="159:10" pos:end="159:10">i</name> <operator pos:start="159:12" pos:end="159:12">=</operator> <literal type="number" pos:start="159:14" pos:end="159:14">0</literal></expr>;</init> <condition pos:start="159:17" pos:end="159:40"><expr pos:start="159:17" pos:end="159:39"><name pos:start="159:17" pos:end="159:17">i</name> <operator pos:start="159:19" pos:end="159:19">&lt;</operator> <name pos:start="159:21" pos:end="159:39">FSL_IMX31_NUM_EPITS</name></expr>;</condition> <incr pos:start="159:42" pos:end="159:44"><expr pos:start="159:42" pos:end="159:44"><name pos:start="159:42" pos:end="159:42">i</name><operator pos:start="159:43" pos:end="159:44">++</operator></expr></incr>)</control> <block pos:start="159:47" pos:end="201:5">{<block_content pos:start="161:9" pos:end="199:64">

        <struct pos:start="161:9" pos:end="173:10"><specifier pos:start="161:9" pos:end="161:14">static</specifier> <specifier pos:start="161:16" pos:end="161:20">const</specifier> struct <block pos:start="161:29" pos:end="167:9">{

            <decl_stmt pos:start="163:13" pos:end="163:24"><decl pos:start="163:13" pos:end="163:23"><type pos:start="163:13" pos:end="163:18"><name pos:start="163:13" pos:end="163:18">hwaddr</name></type> <name pos:start="163:20" pos:end="163:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="165:13" pos:end="165:29"><decl pos:start="165:13" pos:end="165:28"><type pos:start="165:13" pos:end="165:24"><name pos:start="165:13" pos:end="165:20">unsigned</name> <name pos:start="165:22" pos:end="165:24">int</name></type> <name pos:start="165:26" pos:end="165:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="167:11" pos:end="173:9"><name pos:start="167:11" pos:end="167:41"><name pos:start="167:11" pos:end="167:20">epit_table</name><index pos:start="167:21" pos:end="167:41">[<expr pos:start="167:22" pos:end="167:40"><name pos:start="167:22" pos:end="167:40">FSL_IMX31_NUM_EPITS</name></expr>]</index></name> <init pos:start="167:43" pos:end="173:9">= <expr pos:start="167:45" pos:end="173:9"><block pos:start="167:45" pos:end="173:9">{

            <expr pos:start="169:13" pos:end="169:57"><block pos:start="169:13" pos:end="169:57">{ <expr pos:start="169:15" pos:end="169:34"><name pos:start="169:15" pos:end="169:34">FSL_IMX31_EPIT1_ADDR</name></expr>, <expr pos:start="169:37" pos:end="169:55"><name pos:start="169:37" pos:end="169:55">FSL_IMX31_EPIT1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="171:13" pos:end="171:57"><block pos:start="171:13" pos:end="171:57">{ <expr pos:start="171:15" pos:end="171:34"><name pos:start="171:15" pos:end="171:34">FSL_IMX31_EPIT2_ADDR</name></expr>, <expr pos:start="171:37" pos:end="171:55"><name pos:start="171:37" pos:end="171:55">FSL_IMX31_EPIT2_IRQ</name></expr> }</block></expr>,

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="177:9" pos:end="177:42"><expr pos:start="177:9" pos:end="177:41"><name pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:15">epit</name><index pos:start="177:16" pos:end="177:18">[<expr pos:start="177:17" pos:end="177:17"><name pos:start="177:17" pos:end="177:17">i</name></expr>]</index></name><operator pos:start="177:19" pos:end="177:19">.</operator><name pos:start="177:20" pos:end="177:22">ccm</name> <operator pos:start="177:24" pos:end="177:24">=</operator> <call pos:start="177:26" pos:end="177:41"><name pos:start="177:26" pos:end="177:32">IMX_CCM</name><argument_list pos:start="177:33" pos:end="177:41">(<argument pos:start="177:34" pos:end="177:40"><expr pos:start="177:34" pos:end="177:40"><operator pos:start="177:34" pos:end="177:34">&amp;</operator><name pos:start="177:35" pos:end="177:40"><name pos:start="177:35" pos:end="177:35">s</name><operator pos:start="177:36" pos:end="177:37">-&gt;</operator><name pos:start="177:38" pos:end="177:40">ccm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:78"><expr pos:start="181:9" pos:end="181:77"><call pos:start="181:9" pos:end="181:77"><name pos:start="181:9" pos:end="181:32">object_property_set_bool</name><argument_list pos:start="181:33" pos:end="181:77">(<argument pos:start="181:34" pos:end="181:52"><expr pos:start="181:34" pos:end="181:52"><call pos:start="181:34" pos:end="181:52"><name pos:start="181:34" pos:end="181:39">OBJECT</name><argument_list pos:start="181:40" pos:end="181:52">(<argument pos:start="181:41" pos:end="181:51"><expr pos:start="181:41" pos:end="181:51"><operator pos:start="181:41" pos:end="181:41">&amp;</operator><name pos:start="181:42" pos:end="181:51"><name pos:start="181:42" pos:end="181:42">s</name><operator pos:start="181:43" pos:end="181:44">-&gt;</operator><name pos:start="181:45" pos:end="181:48">epit</name><index pos:start="181:49" pos:end="181:51">[<expr pos:start="181:50" pos:end="181:50"><name pos:start="181:50" pos:end="181:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="181:55" pos:end="181:58"><expr pos:start="181:55" pos:end="181:58"><name pos:start="181:55" pos:end="181:58">true</name></expr></argument>, <argument pos:start="181:61" pos:end="181:70"><expr pos:start="181:61" pos:end="181:70"><literal type="string" pos:start="181:61" pos:end="181:70">"realized"</literal></expr></argument>, <argument pos:start="181:73" pos:end="181:76"><expr pos:start="181:73" pos:end="181:76"><operator pos:start="181:73" pos:end="181:73">&amp;</operator><name pos:start="181:74" pos:end="181:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="183:16">(<expr pos:start="183:13" pos:end="183:15"><name pos:start="183:13" pos:end="183:15">err</name></expr>)</condition> <block pos:start="183:18" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:19">

            <expr_stmt pos:start="185:13" pos:end="185:39"><expr pos:start="185:13" pos:end="185:38"><call pos:start="185:13" pos:end="185:38"><name pos:start="185:13" pos:end="185:27">error_propagate</name><argument_list pos:start="185:28" pos:end="185:38">(<argument pos:start="185:29" pos:end="185:32"><expr pos:start="185:29" pos:end="185:32"><name pos:start="185:29" pos:end="185:32">errp</name></expr></argument>, <argument pos:start="185:35" pos:end="185:37"><expr pos:start="185:35" pos:end="185:37"><name pos:start="185:35" pos:end="185:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="187:13" pos:end="187:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="193:9" pos:end="193:76"><expr pos:start="193:9" pos:end="193:75"><call pos:start="193:9" pos:end="193:75"><name pos:start="193:9" pos:end="193:23">sysbus_mmio_map</name><argument_list pos:start="193:24" pos:end="193:75">(<argument pos:start="193:25" pos:end="193:51"><expr pos:start="193:25" pos:end="193:51"><call pos:start="193:25" pos:end="193:51"><name pos:start="193:25" pos:end="193:38">SYS_BUS_DEVICE</name><argument_list pos:start="193:39" pos:end="193:51">(<argument pos:start="193:40" pos:end="193:50"><expr pos:start="193:40" pos:end="193:50"><operator pos:start="193:40" pos:end="193:40">&amp;</operator><name pos:start="193:41" pos:end="193:50"><name pos:start="193:41" pos:end="193:41">s</name><operator pos:start="193:42" pos:end="193:43">-&gt;</operator><name pos:start="193:44" pos:end="193:47">epit</name><index pos:start="193:48" pos:end="193:50">[<expr pos:start="193:49" pos:end="193:49"><name pos:start="193:49" pos:end="193:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:54" pos:end="193:54"><expr pos:start="193:54" pos:end="193:54"><literal type="number" pos:start="193:54" pos:end="193:54">0</literal></expr></argument>, <argument pos:start="193:57" pos:end="193:74"><expr pos:start="193:57" pos:end="193:74"><name pos:start="193:57" pos:end="193:69"><name pos:start="193:57" pos:end="193:66">epit_table</name><index pos:start="193:67" pos:end="193:69">[<expr pos:start="193:68" pos:end="193:68"><name pos:start="193:68" pos:end="193:68">i</name></expr>]</index></name><operator pos:start="193:70" pos:end="193:70">.</operator><name pos:start="193:71" pos:end="193:74">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="199:64"><expr pos:start="195:9" pos:end="199:63"><call pos:start="195:9" pos:end="199:63"><name pos:start="195:9" pos:end="195:26">sysbus_connect_irq</name><argument_list pos:start="195:27" pos:end="199:63">(<argument pos:start="195:28" pos:end="195:54"><expr pos:start="195:28" pos:end="195:54"><call pos:start="195:28" pos:end="195:54"><name pos:start="195:28" pos:end="195:41">SYS_BUS_DEVICE</name><argument_list pos:start="195:42" pos:end="195:54">(<argument pos:start="195:43" pos:end="195:53"><expr pos:start="195:43" pos:end="195:53"><operator pos:start="195:43" pos:end="195:43">&amp;</operator><name pos:start="195:44" pos:end="195:53"><name pos:start="195:44" pos:end="195:44">s</name><operator pos:start="195:45" pos:end="195:46">-&gt;</operator><name pos:start="195:47" pos:end="195:50">epit</name><index pos:start="195:51" pos:end="195:53">[<expr pos:start="195:52" pos:end="195:52"><name pos:start="195:52" pos:end="195:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="195:57" pos:end="195:57"><expr pos:start="195:57" pos:end="195:57"><literal type="number" pos:start="195:57" pos:end="195:57">0</literal></expr></argument>,

                           <argument pos:start="197:28" pos:end="199:62"><expr pos:start="197:28" pos:end="199:62"><call pos:start="197:28" pos:end="199:62"><name pos:start="197:28" pos:end="197:43">qdev_get_gpio_in</name><argument_list pos:start="197:44" pos:end="199:62">(<argument pos:start="197:45" pos:end="197:60"><expr pos:start="197:45" pos:end="197:60"><call pos:start="197:45" pos:end="197:60"><name pos:start="197:45" pos:end="197:50">DEVICE</name><argument_list pos:start="197:51" pos:end="197:60">(<argument pos:start="197:52" pos:end="197:59"><expr pos:start="197:52" pos:end="197:59"><operator pos:start="197:52" pos:end="197:52">&amp;</operator><name pos:start="197:53" pos:end="197:59"><name pos:start="197:53" pos:end="197:53">s</name><operator pos:start="197:54" pos:end="197:55">-&gt;</operator><name pos:start="197:56" pos:end="197:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="199:45" pos:end="199:61"><expr pos:start="199:45" pos:end="199:61"><name pos:start="199:45" pos:end="199:57"><name pos:start="199:45" pos:end="199:54">epit_table</name><index pos:start="199:55" pos:end="199:57">[<expr pos:start="199:56" pos:end="199:56"><name pos:start="199:56" pos:end="199:56">i</name></expr>]</index></name><operator pos:start="199:58" pos:end="199:58">.</operator><name pos:start="199:59" pos:end="199:61">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="205:5" pos:end="205:28">/* Initialize all I2C */</comment>

    <for pos:start="207:5" pos:end="251:5">for <control pos:start="207:9" pos:end="207:44">(<init pos:start="207:10" pos:end="207:15"><expr pos:start="207:10" pos:end="207:14"><name pos:start="207:10" pos:end="207:10">i</name> <operator pos:start="207:12" pos:end="207:12">=</operator> <literal type="number" pos:start="207:14" pos:end="207:14">0</literal></expr>;</init> <condition pos:start="207:17" pos:end="207:39"><expr pos:start="207:17" pos:end="207:38"><name pos:start="207:17" pos:end="207:17">i</name> <operator pos:start="207:19" pos:end="207:19">&lt;</operator> <name pos:start="207:21" pos:end="207:38">FSL_IMX31_NUM_I2CS</name></expr>;</condition> <incr pos:start="207:41" pos:end="207:43"><expr pos:start="207:41" pos:end="207:43"><name pos:start="207:41" pos:end="207:41">i</name><operator pos:start="207:42" pos:end="207:43">++</operator></expr></incr>)</control> <block pos:start="207:46" pos:end="251:5">{<block_content pos:start="209:9" pos:end="249:63">

        <struct pos:start="209:9" pos:end="223:10"><specifier pos:start="209:9" pos:end="209:14">static</specifier> <specifier pos:start="209:16" pos:end="209:20">const</specifier> struct <block pos:start="209:29" pos:end="215:9">{

            <decl_stmt pos:start="211:13" pos:end="211:24"><decl pos:start="211:13" pos:end="211:23"><type pos:start="211:13" pos:end="211:18"><name pos:start="211:13" pos:end="211:18">hwaddr</name></type> <name pos:start="211:20" pos:end="211:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="213:13" pos:end="213:29"><decl pos:start="213:13" pos:end="213:28"><type pos:start="213:13" pos:end="213:24"><name pos:start="213:13" pos:end="213:20">unsigned</name> <name pos:start="213:22" pos:end="213:24">int</name></type> <name pos:start="213:26" pos:end="213:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="215:11" pos:end="223:9"><name pos:start="215:11" pos:end="215:39"><name pos:start="215:11" pos:end="215:19">i2c_table</name><index pos:start="215:20" pos:end="215:39">[<expr pos:start="215:21" pos:end="215:38"><name pos:start="215:21" pos:end="215:38">FSL_IMX31_NUM_I2CS</name></expr>]</index></name> <init pos:start="215:41" pos:end="223:9">= <expr pos:start="215:43" pos:end="223:9"><block pos:start="215:43" pos:end="223:9">{

            <expr pos:start="217:13" pos:end="217:55"><block pos:start="217:13" pos:end="217:55">{ <expr pos:start="217:15" pos:end="217:33"><name pos:start="217:15" pos:end="217:33">FSL_IMX31_I2C1_ADDR</name></expr>, <expr pos:start="217:36" pos:end="217:53"><name pos:start="217:36" pos:end="217:53">FSL_IMX31_I2C1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="219:13" pos:end="219:55"><block pos:start="219:13" pos:end="219:55">{ <expr pos:start="219:15" pos:end="219:33"><name pos:start="219:15" pos:end="219:33">FSL_IMX31_I2C2_ADDR</name></expr>, <expr pos:start="219:36" pos:end="219:53"><name pos:start="219:36" pos:end="219:53">FSL_IMX31_I2C2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="221:13" pos:end="221:55"><block pos:start="221:13" pos:end="221:55">{ <expr pos:start="221:15" pos:end="221:33"><name pos:start="221:15" pos:end="221:33">FSL_IMX31_I2C3_ADDR</name></expr>, <expr pos:start="221:36" pos:end="221:53"><name pos:start="221:36" pos:end="221:53">FSL_IMX31_I2C3_IRQ</name></expr> }</block></expr>

        }</block></expr></init></decl>;</struct>



        <comment type="block" pos:start="227:9" pos:end="227:32">/* Initialize the I2C */</comment>

        <expr_stmt pos:start="229:9" pos:end="229:77"><expr pos:start="229:9" pos:end="229:76"><call pos:start="229:9" pos:end="229:76"><name pos:start="229:9" pos:end="229:32">object_property_set_bool</name><argument_list pos:start="229:33" pos:end="229:76">(<argument pos:start="229:34" pos:end="229:51"><expr pos:start="229:34" pos:end="229:51"><call pos:start="229:34" pos:end="229:51"><name pos:start="229:34" pos:end="229:39">OBJECT</name><argument_list pos:start="229:40" pos:end="229:51">(<argument pos:start="229:41" pos:end="229:50"><expr pos:start="229:41" pos:end="229:50"><operator pos:start="229:41" pos:end="229:41">&amp;</operator><name pos:start="229:42" pos:end="229:50"><name pos:start="229:42" pos:end="229:42">s</name><operator pos:start="229:43" pos:end="229:44">-&gt;</operator><name pos:start="229:45" pos:end="229:47">i2c</name><index pos:start="229:48" pos:end="229:50">[<expr pos:start="229:49" pos:end="229:49"><name pos:start="229:49" pos:end="229:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="229:54" pos:end="229:57"><expr pos:start="229:54" pos:end="229:57"><name pos:start="229:54" pos:end="229:57">true</name></expr></argument>, <argument pos:start="229:60" pos:end="229:69"><expr pos:start="229:60" pos:end="229:69"><literal type="string" pos:start="229:60" pos:end="229:69">"realized"</literal></expr></argument>, <argument pos:start="229:72" pos:end="229:75"><expr pos:start="229:72" pos:end="229:75"><operator pos:start="229:72" pos:end="229:72">&amp;</operator><name pos:start="229:73" pos:end="229:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="231:9" pos:end="237:9"><if pos:start="231:9" pos:end="237:9">if <condition pos:start="231:12" pos:end="231:16">(<expr pos:start="231:13" pos:end="231:15"><name pos:start="231:13" pos:end="231:15">err</name></expr>)</condition> <block pos:start="231:18" pos:end="237:9">{<block_content pos:start="233:13" pos:end="235:19">

            <expr_stmt pos:start="233:13" pos:end="233:39"><expr pos:start="233:13" pos:end="233:38"><call pos:start="233:13" pos:end="233:38"><name pos:start="233:13" pos:end="233:27">error_propagate</name><argument_list pos:start="233:28" pos:end="233:38">(<argument pos:start="233:29" pos:end="233:32"><expr pos:start="233:29" pos:end="233:32"><name pos:start="233:29" pos:end="233:32">errp</name></expr></argument>, <argument pos:start="233:35" pos:end="233:37"><expr pos:start="233:35" pos:end="233:37"><name pos:start="233:35" pos:end="233:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="235:13" pos:end="235:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="239:9" pos:end="239:28">/* Map I2C memory */</comment>

        <expr_stmt pos:start="241:9" pos:end="241:74"><expr pos:start="241:9" pos:end="241:73"><call pos:start="241:9" pos:end="241:73"><name pos:start="241:9" pos:end="241:23">sysbus_mmio_map</name><argument_list pos:start="241:24" pos:end="241:73">(<argument pos:start="241:25" pos:end="241:50"><expr pos:start="241:25" pos:end="241:50"><call pos:start="241:25" pos:end="241:50"><name pos:start="241:25" pos:end="241:38">SYS_BUS_DEVICE</name><argument_list pos:start="241:39" pos:end="241:50">(<argument pos:start="241:40" pos:end="241:49"><expr pos:start="241:40" pos:end="241:49"><operator pos:start="241:40" pos:end="241:40">&amp;</operator><name pos:start="241:41" pos:end="241:49"><name pos:start="241:41" pos:end="241:41">s</name><operator pos:start="241:42" pos:end="241:43">-&gt;</operator><name pos:start="241:44" pos:end="241:46">i2c</name><index pos:start="241:47" pos:end="241:49">[<expr pos:start="241:48" pos:end="241:48"><name pos:start="241:48" pos:end="241:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="241:53" pos:end="241:53"><expr pos:start="241:53" pos:end="241:53"><literal type="number" pos:start="241:53" pos:end="241:53">0</literal></expr></argument>, <argument pos:start="241:56" pos:end="241:72"><expr pos:start="241:56" pos:end="241:72"><name pos:start="241:56" pos:end="241:67"><name pos:start="241:56" pos:end="241:64">i2c_table</name><index pos:start="241:65" pos:end="241:67">[<expr pos:start="241:66" pos:end="241:66"><name pos:start="241:66" pos:end="241:66">i</name></expr>]</index></name><operator pos:start="241:68" pos:end="241:68">.</operator><name pos:start="241:69" pos:end="241:72">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="243:9" pos:end="243:36">/* Connect I2C IRQ to PIC */</comment>

        <expr_stmt pos:start="245:9" pos:end="249:63"><expr pos:start="245:9" pos:end="249:62"><call pos:start="245:9" pos:end="249:62"><name pos:start="245:9" pos:end="245:26">sysbus_connect_irq</name><argument_list pos:start="245:27" pos:end="249:62">(<argument pos:start="245:28" pos:end="245:53"><expr pos:start="245:28" pos:end="245:53"><call pos:start="245:28" pos:end="245:53"><name pos:start="245:28" pos:end="245:41">SYS_BUS_DEVICE</name><argument_list pos:start="245:42" pos:end="245:53">(<argument pos:start="245:43" pos:end="245:52"><expr pos:start="245:43" pos:end="245:52"><operator pos:start="245:43" pos:end="245:43">&amp;</operator><name pos:start="245:44" pos:end="245:52"><name pos:start="245:44" pos:end="245:44">s</name><operator pos:start="245:45" pos:end="245:46">-&gt;</operator><name pos:start="245:47" pos:end="245:49">i2c</name><index pos:start="245:50" pos:end="245:52">[<expr pos:start="245:51" pos:end="245:51"><name pos:start="245:51" pos:end="245:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:56" pos:end="245:56"><expr pos:start="245:56" pos:end="245:56"><literal type="number" pos:start="245:56" pos:end="245:56">0</literal></expr></argument>,

                           <argument pos:start="247:28" pos:end="249:61"><expr pos:start="247:28" pos:end="249:61"><call pos:start="247:28" pos:end="249:61"><name pos:start="247:28" pos:end="247:43">qdev_get_gpio_in</name><argument_list pos:start="247:44" pos:end="249:61">(<argument pos:start="247:45" pos:end="247:60"><expr pos:start="247:45" pos:end="247:60"><call pos:start="247:45" pos:end="247:60"><name pos:start="247:45" pos:end="247:50">DEVICE</name><argument_list pos:start="247:51" pos:end="247:60">(<argument pos:start="247:52" pos:end="247:59"><expr pos:start="247:52" pos:end="247:59"><operator pos:start="247:52" pos:end="247:52">&amp;</operator><name pos:start="247:53" pos:end="247:59"><name pos:start="247:53" pos:end="247:53">s</name><operator pos:start="247:54" pos:end="247:55">-&gt;</operator><name pos:start="247:56" pos:end="247:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="249:45" pos:end="249:60"><expr pos:start="249:45" pos:end="249:60"><name pos:start="249:45" pos:end="249:56"><name pos:start="249:45" pos:end="249:53">i2c_table</name><index pos:start="249:54" pos:end="249:56">[<expr pos:start="249:55" pos:end="249:55"><name pos:start="249:55" pos:end="249:55">i</name></expr>]</index></name><operator pos:start="249:57" pos:end="249:57">.</operator><name pos:start="249:58" pos:end="249:60">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="255:5" pos:end="255:30">/* Initialize all GPIOs */</comment>

    <for pos:start="257:5" pos:end="301:5">for <control pos:start="257:9" pos:end="257:45">(<init pos:start="257:10" pos:end="257:15"><expr pos:start="257:10" pos:end="257:14"><name pos:start="257:10" pos:end="257:10">i</name> <operator pos:start="257:12" pos:end="257:12">=</operator> <literal type="number" pos:start="257:14" pos:end="257:14">0</literal></expr>;</init> <condition pos:start="257:17" pos:end="257:40"><expr pos:start="257:17" pos:end="257:39"><name pos:start="257:17" pos:end="257:17">i</name> <operator pos:start="257:19" pos:end="257:19">&lt;</operator> <name pos:start="257:21" pos:end="257:39">FSL_IMX31_NUM_GPIOS</name></expr>;</condition> <incr pos:start="257:42" pos:end="257:44"><expr pos:start="257:42" pos:end="257:44"><name pos:start="257:42" pos:end="257:42">i</name><operator pos:start="257:43" pos:end="257:44">++</operator></expr></incr>)</control> <block pos:start="257:47" pos:end="301:5">{<block_content pos:start="259:9" pos:end="299:64">

        <struct pos:start="259:9" pos:end="273:10"><specifier pos:start="259:9" pos:end="259:14">static</specifier> <specifier pos:start="259:16" pos:end="259:20">const</specifier> struct <block pos:start="259:29" pos:end="265:9">{

            <decl_stmt pos:start="261:13" pos:end="261:24"><decl pos:start="261:13" pos:end="261:23"><type pos:start="261:13" pos:end="261:18"><name pos:start="261:13" pos:end="261:18">hwaddr</name></type> <name pos:start="261:20" pos:end="261:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="263:13" pos:end="263:29"><decl pos:start="263:13" pos:end="263:28"><type pos:start="263:13" pos:end="263:24"><name pos:start="263:13" pos:end="263:20">unsigned</name> <name pos:start="263:22" pos:end="263:24">int</name></type> <name pos:start="263:26" pos:end="263:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="265:11" pos:end="273:9"><name pos:start="265:11" pos:end="265:41"><name pos:start="265:11" pos:end="265:20">gpio_table</name><index pos:start="265:21" pos:end="265:41">[<expr pos:start="265:22" pos:end="265:40"><name pos:start="265:22" pos:end="265:40">FSL_IMX31_NUM_GPIOS</name></expr>]</index></name> <init pos:start="265:43" pos:end="273:9">= <expr pos:start="265:45" pos:end="273:9"><block pos:start="265:45" pos:end="273:9">{

            <expr pos:start="267:13" pos:end="267:57"><block pos:start="267:13" pos:end="267:57">{ <expr pos:start="267:15" pos:end="267:34"><name pos:start="267:15" pos:end="267:34">FSL_IMX31_GPIO1_ADDR</name></expr>, <expr pos:start="267:37" pos:end="267:55"><name pos:start="267:37" pos:end="267:55">FSL_IMX31_GPIO1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="269:13" pos:end="269:57"><block pos:start="269:13" pos:end="269:57">{ <expr pos:start="269:15" pos:end="269:34"><name pos:start="269:15" pos:end="269:34">FSL_IMX31_GPIO2_ADDR</name></expr>, <expr pos:start="269:37" pos:end="269:55"><name pos:start="269:37" pos:end="269:55">FSL_IMX31_GPIO2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="271:13" pos:end="271:57"><block pos:start="271:13" pos:end="271:57">{ <expr pos:start="271:15" pos:end="271:34"><name pos:start="271:15" pos:end="271:34">FSL_IMX31_GPIO3_ADDR</name></expr>, <expr pos:start="271:37" pos:end="271:55"><name pos:start="271:37" pos:end="271:55">FSL_IMX31_GPIO3_IRQ</name></expr> }</block></expr>

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="277:9" pos:end="279:47"><expr pos:start="277:9" pos:end="279:46"><call pos:start="277:9" pos:end="279:46"><name pos:start="277:9" pos:end="277:32">object_property_set_bool</name><argument_list pos:start="277:33" pos:end="279:46">(<argument pos:start="277:34" pos:end="277:52"><expr pos:start="277:34" pos:end="277:52"><call pos:start="277:34" pos:end="277:52"><name pos:start="277:34" pos:end="277:39">OBJECT</name><argument_list pos:start="277:40" pos:end="277:52">(<argument pos:start="277:41" pos:end="277:51"><expr pos:start="277:41" pos:end="277:51"><operator pos:start="277:41" pos:end="277:41">&amp;</operator><name pos:start="277:42" pos:end="277:51"><name pos:start="277:42" pos:end="277:42">s</name><operator pos:start="277:43" pos:end="277:44">-&gt;</operator><name pos:start="277:45" pos:end="277:48">gpio</name><index pos:start="277:49" pos:end="277:51">[<expr pos:start="277:50" pos:end="277:50"><name pos:start="277:50" pos:end="277:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="277:55" pos:end="277:59"><expr pos:start="277:55" pos:end="277:59"><name pos:start="277:55" pos:end="277:59">false</name></expr></argument>, <argument pos:start="277:62" pos:end="277:75"><expr pos:start="277:62" pos:end="277:75"><literal type="string" pos:start="277:62" pos:end="277:75">"has-edge-sel"</literal></expr></argument>,

                                 <argument pos:start="279:34" pos:end="279:45"><expr pos:start="279:34" pos:end="279:45"><operator pos:start="279:34" pos:end="279:34">&amp;</operator><name pos:start="279:35" pos:end="279:45">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:78"><expr pos:start="281:9" pos:end="281:77"><call pos:start="281:9" pos:end="281:77"><name pos:start="281:9" pos:end="281:32">object_property_set_bool</name><argument_list pos:start="281:33" pos:end="281:77">(<argument pos:start="281:34" pos:end="281:52"><expr pos:start="281:34" pos:end="281:52"><call pos:start="281:34" pos:end="281:52"><name pos:start="281:34" pos:end="281:39">OBJECT</name><argument_list pos:start="281:40" pos:end="281:52">(<argument pos:start="281:41" pos:end="281:51"><expr pos:start="281:41" pos:end="281:51"><operator pos:start="281:41" pos:end="281:41">&amp;</operator><name pos:start="281:42" pos:end="281:51"><name pos:start="281:42" pos:end="281:42">s</name><operator pos:start="281:43" pos:end="281:44">-&gt;</operator><name pos:start="281:45" pos:end="281:48">gpio</name><index pos:start="281:49" pos:end="281:51">[<expr pos:start="281:50" pos:end="281:50"><name pos:start="281:50" pos:end="281:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="281:55" pos:end="281:58"><expr pos:start="281:55" pos:end="281:58"><name pos:start="281:55" pos:end="281:58">true</name></expr></argument>, <argument pos:start="281:61" pos:end="281:70"><expr pos:start="281:61" pos:end="281:70"><literal type="string" pos:start="281:61" pos:end="281:70">"realized"</literal></expr></argument>, <argument pos:start="281:73" pos:end="281:76"><expr pos:start="281:73" pos:end="281:76"><operator pos:start="281:73" pos:end="281:73">&amp;</operator><name pos:start="281:74" pos:end="281:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="283:9" pos:end="289:9"><if pos:start="283:9" pos:end="289:9">if <condition pos:start="283:12" pos:end="283:16">(<expr pos:start="283:13" pos:end="283:15"><name pos:start="283:13" pos:end="283:15">err</name></expr>)</condition> <block pos:start="283:18" pos:end="289:9">{<block_content pos:start="285:13" pos:end="287:19">

            <expr_stmt pos:start="285:13" pos:end="285:39"><expr pos:start="285:13" pos:end="285:38"><call pos:start="285:13" pos:end="285:38"><name pos:start="285:13" pos:end="285:27">error_propagate</name><argument_list pos:start="285:28" pos:end="285:38">(<argument pos:start="285:29" pos:end="285:32"><expr pos:start="285:29" pos:end="285:32"><name pos:start="285:29" pos:end="285:32">errp</name></expr></argument>, <argument pos:start="285:35" pos:end="285:37"><expr pos:start="285:35" pos:end="285:37"><name pos:start="285:35" pos:end="285:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="287:13" pos:end="287:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:76"><expr pos:start="291:9" pos:end="291:75"><call pos:start="291:9" pos:end="291:75"><name pos:start="291:9" pos:end="291:23">sysbus_mmio_map</name><argument_list pos:start="291:24" pos:end="291:75">(<argument pos:start="291:25" pos:end="291:51"><expr pos:start="291:25" pos:end="291:51"><call pos:start="291:25" pos:end="291:51"><name pos:start="291:25" pos:end="291:38">SYS_BUS_DEVICE</name><argument_list pos:start="291:39" pos:end="291:51">(<argument pos:start="291:40" pos:end="291:50"><expr pos:start="291:40" pos:end="291:50"><operator pos:start="291:40" pos:end="291:40">&amp;</operator><name pos:start="291:41" pos:end="291:50"><name pos:start="291:41" pos:end="291:41">s</name><operator pos:start="291:42" pos:end="291:43">-&gt;</operator><name pos:start="291:44" pos:end="291:47">gpio</name><index pos:start="291:48" pos:end="291:50">[<expr pos:start="291:49" pos:end="291:49"><name pos:start="291:49" pos:end="291:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="291:54" pos:end="291:54"><expr pos:start="291:54" pos:end="291:54"><literal type="number" pos:start="291:54" pos:end="291:54">0</literal></expr></argument>, <argument pos:start="291:57" pos:end="291:74"><expr pos:start="291:57" pos:end="291:74"><name pos:start="291:57" pos:end="291:69"><name pos:start="291:57" pos:end="291:66">gpio_table</name><index pos:start="291:67" pos:end="291:69">[<expr pos:start="291:68" pos:end="291:68"><name pos:start="291:68" pos:end="291:68">i</name></expr>]</index></name><operator pos:start="291:70" pos:end="291:70">.</operator><name pos:start="291:71" pos:end="291:74">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="293:9" pos:end="293:37">/* Connect GPIO IRQ to PIC */</comment>

        <expr_stmt pos:start="295:9" pos:end="299:64"><expr pos:start="295:9" pos:end="299:63"><call pos:start="295:9" pos:end="299:63"><name pos:start="295:9" pos:end="295:26">sysbus_connect_irq</name><argument_list pos:start="295:27" pos:end="299:63">(<argument pos:start="295:28" pos:end="295:54"><expr pos:start="295:28" pos:end="295:54"><call pos:start="295:28" pos:end="295:54"><name pos:start="295:28" pos:end="295:41">SYS_BUS_DEVICE</name><argument_list pos:start="295:42" pos:end="295:54">(<argument pos:start="295:43" pos:end="295:53"><expr pos:start="295:43" pos:end="295:53"><operator pos:start="295:43" pos:end="295:43">&amp;</operator><name pos:start="295:44" pos:end="295:53"><name pos:start="295:44" pos:end="295:44">s</name><operator pos:start="295:45" pos:end="295:46">-&gt;</operator><name pos:start="295:47" pos:end="295:50">gpio</name><index pos:start="295:51" pos:end="295:53">[<expr pos:start="295:52" pos:end="295:52"><name pos:start="295:52" pos:end="295:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="295:57" pos:end="295:57"><expr pos:start="295:57" pos:end="295:57"><literal type="number" pos:start="295:57" pos:end="295:57">0</literal></expr></argument>,

                           <argument pos:start="297:28" pos:end="299:62"><expr pos:start="297:28" pos:end="299:62"><call pos:start="297:28" pos:end="299:62"><name pos:start="297:28" pos:end="297:43">qdev_get_gpio_in</name><argument_list pos:start="297:44" pos:end="299:62">(<argument pos:start="297:45" pos:end="297:60"><expr pos:start="297:45" pos:end="297:60"><call pos:start="297:45" pos:end="297:60"><name pos:start="297:45" pos:end="297:50">DEVICE</name><argument_list pos:start="297:51" pos:end="297:60">(<argument pos:start="297:52" pos:end="297:59"><expr pos:start="297:52" pos:end="297:59"><operator pos:start="297:52" pos:end="297:52">&amp;</operator><name pos:start="297:53" pos:end="297:59"><name pos:start="297:53" pos:end="297:53">s</name><operator pos:start="297:54" pos:end="297:55">-&gt;</operator><name pos:start="297:56" pos:end="297:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="299:45" pos:end="299:61"><expr pos:start="299:45" pos:end="299:61"><name pos:start="299:45" pos:end="299:57"><name pos:start="299:45" pos:end="299:54">gpio_table</name><index pos:start="299:55" pos:end="299:57">[<expr pos:start="299:56" pos:end="299:56"><name pos:start="299:56" pos:end="299:56">i</name></expr>]</index></name><operator pos:start="299:58" pos:end="299:58">.</operator><name pos:start="299:59" pos:end="299:61">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="305:5" pos:end="305:64">/* On a real system, the first 16k is a `secure boot rom' */</comment>

    <expr_stmt pos:start="307:5" pos:end="309:60"><expr pos:start="307:5" pos:end="309:59"><call pos:start="307:5" pos:end="309:59"><name pos:start="307:5" pos:end="307:36">memory_region_init_rom_nomigrate</name><argument_list pos:start="307:37" pos:end="309:59">(<argument pos:start="307:38" pos:end="307:51"><expr pos:start="307:38" pos:end="307:51"><operator pos:start="307:38" pos:end="307:38">&amp;</operator><name pos:start="307:39" pos:end="307:51"><name pos:start="307:39" pos:end="307:39">s</name><operator pos:start="307:40" pos:end="307:41">-&gt;</operator><name pos:start="307:42" pos:end="307:51">secure_rom</name></name></expr></argument>, <argument pos:start="307:54" pos:end="307:57"><expr pos:start="307:54" pos:end="307:57"><name pos:start="307:54" pos:end="307:57">NULL</name></expr></argument>, <argument pos:start="307:60" pos:end="307:77"><expr pos:start="307:60" pos:end="307:77"><literal type="string" pos:start="307:60" pos:end="307:77">"imx31.secure_rom"</literal></expr></argument>,

                           <argument pos:start="309:28" pos:end="309:52"><expr pos:start="309:28" pos:end="309:52"><name pos:start="309:28" pos:end="309:52">FSL_IMX31_SECURE_ROM_SIZE</name></expr></argument>, <argument pos:start="309:55" pos:end="309:58"><expr pos:start="309:55" pos:end="309:58"><operator pos:start="309:55" pos:end="309:55">&amp;</operator><name pos:start="309:56" pos:end="309:58">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="311:5" pos:end="317:5"><if pos:start="311:5" pos:end="317:5">if <condition pos:start="311:8" pos:end="311:12">(<expr pos:start="311:9" pos:end="311:11"><name pos:start="311:9" pos:end="311:11">err</name></expr>)</condition> <block pos:start="311:14" pos:end="317:5">{<block_content pos:start="313:9" pos:end="315:15">

        <expr_stmt pos:start="313:9" pos:end="313:35"><expr pos:start="313:9" pos:end="313:34"><call pos:start="313:9" pos:end="313:34"><name pos:start="313:9" pos:end="313:23">error_propagate</name><argument_list pos:start="313:24" pos:end="313:34">(<argument pos:start="313:25" pos:end="313:28"><expr pos:start="313:25" pos:end="313:28"><name pos:start="313:25" pos:end="313:28">errp</name></expr></argument>, <argument pos:start="313:31" pos:end="313:33"><expr pos:start="313:31" pos:end="313:33"><name pos:start="313:31" pos:end="313:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="315:9" pos:end="315:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="319:5" pos:end="321:48"><expr pos:start="319:5" pos:end="321:47"><call pos:start="319:5" pos:end="321:47"><name pos:start="319:5" pos:end="319:31">memory_region_add_subregion</name><argument_list pos:start="319:32" pos:end="321:47">(<argument pos:start="319:33" pos:end="319:51"><expr pos:start="319:33" pos:end="319:51"><call pos:start="319:33" pos:end="319:51"><name pos:start="319:33" pos:end="319:49">get_system_memory</name><argument_list pos:start="319:50" pos:end="319:51">()</argument_list></call></expr></argument>, <argument pos:start="319:54" pos:end="319:78"><expr pos:start="319:54" pos:end="319:78"><name pos:start="319:54" pos:end="319:78">FSL_IMX31_SECURE_ROM_ADDR</name></expr></argument>,

                                <argument pos:start="321:33" pos:end="321:46"><expr pos:start="321:33" pos:end="321:46"><operator pos:start="321:33" pos:end="321:33">&amp;</operator><name pos:start="321:34" pos:end="321:46"><name pos:start="321:34" pos:end="321:34">s</name><operator pos:start="321:35" pos:end="321:36">-&gt;</operator><name pos:start="321:37" pos:end="321:46">secure_rom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="325:5" pos:end="325:33">/* There is also a 16k ROM */</comment>

    <expr_stmt pos:start="327:5" pos:end="329:53"><expr pos:start="327:5" pos:end="329:52"><call pos:start="327:5" pos:end="329:52"><name pos:start="327:5" pos:end="327:36">memory_region_init_rom_nomigrate</name><argument_list pos:start="327:37" pos:end="329:52">(<argument pos:start="327:38" pos:end="327:44"><expr pos:start="327:38" pos:end="327:44"><operator pos:start="327:38" pos:end="327:38">&amp;</operator><name pos:start="327:39" pos:end="327:44"><name pos:start="327:39" pos:end="327:39">s</name><operator pos:start="327:40" pos:end="327:41">-&gt;</operator><name pos:start="327:42" pos:end="327:44">rom</name></name></expr></argument>, <argument pos:start="327:47" pos:end="327:50"><expr pos:start="327:47" pos:end="327:50"><name pos:start="327:47" pos:end="327:50">NULL</name></expr></argument>, <argument pos:start="327:53" pos:end="327:63"><expr pos:start="327:53" pos:end="327:63"><literal type="string" pos:start="327:53" pos:end="327:63">"imx31.rom"</literal></expr></argument>,

                           <argument pos:start="329:28" pos:end="329:45"><expr pos:start="329:28" pos:end="329:45"><name pos:start="329:28" pos:end="329:45">FSL_IMX31_ROM_SIZE</name></expr></argument>, <argument pos:start="329:48" pos:end="329:51"><expr pos:start="329:48" pos:end="329:51"><operator pos:start="329:48" pos:end="329:48">&amp;</operator><name pos:start="329:49" pos:end="329:51">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="331:5" pos:end="337:5"><if pos:start="331:5" pos:end="337:5">if <condition pos:start="331:8" pos:end="331:12">(<expr pos:start="331:9" pos:end="331:11"><name pos:start="331:9" pos:end="331:11">err</name></expr>)</condition> <block pos:start="331:14" pos:end="337:5">{<block_content pos:start="333:9" pos:end="335:15">

        <expr_stmt pos:start="333:9" pos:end="333:35"><expr pos:start="333:9" pos:end="333:34"><call pos:start="333:9" pos:end="333:34"><name pos:start="333:9" pos:end="333:23">error_propagate</name><argument_list pos:start="333:24" pos:end="333:34">(<argument pos:start="333:25" pos:end="333:28"><expr pos:start="333:25" pos:end="333:28"><name pos:start="333:25" pos:end="333:28">errp</name></expr></argument>, <argument pos:start="333:31" pos:end="333:33"><expr pos:start="333:31" pos:end="333:33"><name pos:start="333:31" pos:end="333:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="335:9" pos:end="335:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="339:5" pos:end="341:41"><expr pos:start="339:5" pos:end="341:40"><call pos:start="339:5" pos:end="341:40"><name pos:start="339:5" pos:end="339:31">memory_region_add_subregion</name><argument_list pos:start="339:32" pos:end="341:40">(<argument pos:start="339:33" pos:end="339:51"><expr pos:start="339:33" pos:end="339:51"><call pos:start="339:33" pos:end="339:51"><name pos:start="339:33" pos:end="339:49">get_system_memory</name><argument_list pos:start="339:50" pos:end="339:51">()</argument_list></call></expr></argument>, <argument pos:start="339:54" pos:end="339:71"><expr pos:start="339:54" pos:end="339:71"><name pos:start="339:54" pos:end="339:71">FSL_IMX31_ROM_ADDR</name></expr></argument>,

                                <argument pos:start="341:33" pos:end="341:39"><expr pos:start="341:33" pos:end="341:39"><operator pos:start="341:33" pos:end="341:33">&amp;</operator><name pos:start="341:34" pos:end="341:39"><name pos:start="341:34" pos:end="341:34">s</name><operator pos:start="341:35" pos:end="341:36">-&gt;</operator><name pos:start="341:37" pos:end="341:39">rom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="345:5" pos:end="345:41">/* initialize internal RAM (16 KB) */</comment>

    <expr_stmt pos:start="347:5" pos:end="349:33"><expr pos:start="347:5" pos:end="349:32"><call pos:start="347:5" pos:end="349:32"><name pos:start="347:5" pos:end="347:26">memory_region_init_ram</name><argument_list pos:start="347:27" pos:end="349:32">(<argument pos:start="347:28" pos:end="347:35"><expr pos:start="347:28" pos:end="347:35"><operator pos:start="347:28" pos:end="347:28">&amp;</operator><name pos:start="347:29" pos:end="347:35"><name pos:start="347:29" pos:end="347:29">s</name><operator pos:start="347:30" pos:end="347:31">-&gt;</operator><name pos:start="347:32" pos:end="347:35">iram</name></name></expr></argument>, <argument pos:start="347:38" pos:end="347:41"><expr pos:start="347:38" pos:end="347:41"><name pos:start="347:38" pos:end="347:41">NULL</name></expr></argument>, <argument pos:start="347:44" pos:end="347:55"><expr pos:start="347:44" pos:end="347:55"><literal type="string" pos:start="347:44" pos:end="347:55">"imx31.iram"</literal></expr></argument>, <argument pos:start="347:58" pos:end="347:76"><expr pos:start="347:58" pos:end="347:76"><name pos:start="347:58" pos:end="347:76">FSL_IMX31_IRAM_SIZE</name></expr></argument>,

                           <argument pos:start="349:28" pos:end="349:31"><expr pos:start="349:28" pos:end="349:31"><operator pos:start="349:28" pos:end="349:28">&amp;</operator><name pos:start="349:29" pos:end="349:31">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="351:5" pos:end="357:5"><if pos:start="351:5" pos:end="357:5">if <condition pos:start="351:8" pos:end="351:12">(<expr pos:start="351:9" pos:end="351:11"><name pos:start="351:9" pos:end="351:11">err</name></expr>)</condition> <block pos:start="351:14" pos:end="357:5">{<block_content pos:start="353:9" pos:end="355:15">

        <expr_stmt pos:start="353:9" pos:end="353:35"><expr pos:start="353:9" pos:end="353:34"><call pos:start="353:9" pos:end="353:34"><name pos:start="353:9" pos:end="353:23">error_propagate</name><argument_list pos:start="353:24" pos:end="353:34">(<argument pos:start="353:25" pos:end="353:28"><expr pos:start="353:25" pos:end="353:28"><name pos:start="353:25" pos:end="353:28">errp</name></expr></argument>, <argument pos:start="353:31" pos:end="353:33"><expr pos:start="353:31" pos:end="353:33"><name pos:start="353:31" pos:end="353:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="355:9" pos:end="355:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="359:5" pos:end="361:42"><expr pos:start="359:5" pos:end="361:41"><call pos:start="359:5" pos:end="361:41"><name pos:start="359:5" pos:end="359:31">memory_region_add_subregion</name><argument_list pos:start="359:32" pos:end="361:41">(<argument pos:start="359:33" pos:end="359:51"><expr pos:start="359:33" pos:end="359:51"><call pos:start="359:33" pos:end="359:51"><name pos:start="359:33" pos:end="359:49">get_system_memory</name><argument_list pos:start="359:50" pos:end="359:51">()</argument_list></call></expr></argument>, <argument pos:start="359:54" pos:end="359:72"><expr pos:start="359:54" pos:end="359:72"><name pos:start="359:54" pos:end="359:72">FSL_IMX31_IRAM_ADDR</name></expr></argument>,

                                <argument pos:start="361:33" pos:end="361:40"><expr pos:start="361:33" pos:end="361:40"><operator pos:start="361:33" pos:end="361:33">&amp;</operator><name pos:start="361:34" pos:end="361:40"><name pos:start="361:34" pos:end="361:34">s</name><operator pos:start="361:35" pos:end="361:36">-&gt;</operator><name pos:start="361:37" pos:end="361:40">iram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="365:5" pos:end="365:61">/* internal RAM (16 KB) is aliased over 256 MB - 16 KB */</comment>

    <expr_stmt pos:start="367:5" pos:end="369:69"><expr pos:start="367:5" pos:end="369:68"><call pos:start="367:5" pos:end="369:68"><name pos:start="367:5" pos:end="367:28">memory_region_init_alias</name><argument_list pos:start="367:29" pos:end="369:68">(<argument pos:start="367:30" pos:end="367:43"><expr pos:start="367:30" pos:end="367:43"><operator pos:start="367:30" pos:end="367:30">&amp;</operator><name pos:start="367:31" pos:end="367:43"><name pos:start="367:31" pos:end="367:31">s</name><operator pos:start="367:32" pos:end="367:33">-&gt;</operator><name pos:start="367:34" pos:end="367:43">iram_alias</name></name></expr></argument>, <argument pos:start="367:46" pos:end="367:49"><expr pos:start="367:46" pos:end="367:49"><name pos:start="367:46" pos:end="367:49">NULL</name></expr></argument>, <argument pos:start="367:52" pos:end="367:69"><expr pos:start="367:52" pos:end="367:69"><literal type="string" pos:start="367:52" pos:end="367:69">"imx31.iram_alias"</literal></expr></argument>,

                             <argument pos:start="369:30" pos:end="369:37"><expr pos:start="369:30" pos:end="369:37"><operator pos:start="369:30" pos:end="369:30">&amp;</operator><name pos:start="369:31" pos:end="369:37"><name pos:start="369:31" pos:end="369:31">s</name><operator pos:start="369:32" pos:end="369:33">-&gt;</operator><name pos:start="369:34" pos:end="369:37">iram</name></name></expr></argument>, <argument pos:start="369:40" pos:end="369:40"><expr pos:start="369:40" pos:end="369:40"><literal type="number" pos:start="369:40" pos:end="369:40">0</literal></expr></argument>, <argument pos:start="369:43" pos:end="369:67"><expr pos:start="369:43" pos:end="369:67"><name pos:start="369:43" pos:end="369:67">FSL_IMX31_IRAM_ALIAS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="373:48"><expr pos:start="371:5" pos:end="373:47"><call pos:start="371:5" pos:end="373:47"><name pos:start="371:5" pos:end="371:31">memory_region_add_subregion</name><argument_list pos:start="371:32" pos:end="373:47">(<argument pos:start="371:33" pos:end="371:51"><expr pos:start="371:33" pos:end="371:51"><call pos:start="371:33" pos:end="371:51"><name pos:start="371:33" pos:end="371:49">get_system_memory</name><argument_list pos:start="371:50" pos:end="371:51">()</argument_list></call></expr></argument>, <argument pos:start="371:54" pos:end="371:78"><expr pos:start="371:54" pos:end="371:78"><name pos:start="371:54" pos:end="371:78">FSL_IMX31_IRAM_ALIAS_ADDR</name></expr></argument>,

                                <argument pos:start="373:33" pos:end="373:46"><expr pos:start="373:33" pos:end="373:46"><operator pos:start="373:33" pos:end="373:33">&amp;</operator><name pos:start="373:34" pos:end="373:46"><name pos:start="373:34" pos:end="373:34">s</name><operator pos:start="373:35" pos:end="373:36">-&gt;</operator><name pos:start="373:37" pos:end="373:46">iram_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
