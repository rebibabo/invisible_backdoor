<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21065.c" pos:tabs="8"><function pos:start="1:1" pos:end="355:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">raw_open_common</name><parameter_list pos:start="1:27" pos:end="3:72">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:63"><decl pos:start="1:50" pos:end="1:63"><type pos:start="1:50" pos:end="1:63"><name pos:start="1:50" pos:end="1:54">QDict</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:63">options</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:41"><decl pos:start="3:28" pos:end="3:41"><type pos:start="3:28" pos:end="3:41"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:41">bdrv_flags</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:57"><decl pos:start="3:44" pos:end="3:57"><type pos:start="3:44" pos:end="3:57"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:57">open_flags</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:64">Error</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier><modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:71">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="355:1">{<block_content pos:start="7:5" pos:end="353:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QemuOpts</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:24">filename</name> <init pos:start="13:26" pos:end="13:31">= <expr pos:start="13:28" pos:end="13:31"><name pos:start="13:28" pos:end="13:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:40"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">BlockdevAioOptions</name></type> <name pos:start="15:24" pos:end="15:26">aio</name></decl>, <decl pos:start="15:29" pos:end="15:39"><type ref="prev" pos:start="15:5" pos:end="15:22"/><name pos:start="15:29" pos:end="15:39">aio_default</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">fd</name></decl>, <decl pos:start="17:13" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:13" pos:end="17:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:15">stat</name></name></type> <name pos:start="19:17" pos:end="19:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">OnOffAuto</name></type> <name pos:start="21:15" pos:end="21:21">locking</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:70"><expr pos:start="25:5" pos:end="25:69"><name pos:start="25:5" pos:end="25:8">opts</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <call pos:start="25:12" pos:end="25:69"><name pos:start="25:12" pos:end="25:27">qemu_opts_create</name><argument_list pos:start="25:28" pos:end="25:69">(<argument pos:start="25:29" pos:end="25:45"><expr pos:start="25:29" pos:end="25:45"><operator pos:start="25:29" pos:end="25:29">&amp;</operator><name pos:start="25:30" pos:end="25:45">raw_runtime_opts</name></expr></argument>, <argument pos:start="25:48" pos:end="25:51"><expr pos:start="25:48" pos:end="25:51"><name pos:start="25:48" pos:end="25:51">NULL</name></expr></argument>, <argument pos:start="25:54" pos:end="25:54"><expr pos:start="25:54" pos:end="25:54"><literal type="number" pos:start="25:54" pos:end="25:54">0</literal></expr></argument>, <argument pos:start="25:57" pos:end="25:68"><expr pos:start="25:57" pos:end="25:68"><operator pos:start="25:57" pos:end="25:57">&amp;</operator><name pos:start="25:58" pos:end="25:68">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:54"><expr pos:start="27:5" pos:end="27:53"><call pos:start="27:5" pos:end="27:53"><name pos:start="27:5" pos:end="27:26">qemu_opts_absorb_qdict</name><argument_list pos:start="27:27" pos:end="27:53">(<argument pos:start="27:28" pos:end="27:31"><expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:31">opts</name></expr></argument>, <argument pos:start="27:34" pos:end="27:40"><expr pos:start="27:34" pos:end="27:40"><name pos:start="27:34" pos:end="27:40">options</name></expr></argument>, <argument pos:start="27:43" pos:end="27:52"><expr pos:start="27:43" pos:end="27:52"><operator pos:start="27:43" pos:end="27:43">&amp;</operator><name pos:start="27:44" pos:end="27:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:17">local_err</name></expr>)</condition> <block pos:start="29:20" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:18">

        <expr_stmt pos:start="31:9" pos:end="31:41"><expr pos:start="31:9" pos:end="31:40"><call pos:start="31:9" pos:end="31:40"><name pos:start="31:9" pos:end="31:23">error_propagate</name><argument_list pos:start="31:24" pos:end="31:40">(<argument pos:start="31:25" pos:end="31:28"><expr pos:start="31:25" pos:end="31:28"><name pos:start="31:25" pos:end="31:28">errp</name></expr></argument>, <argument pos:start="31:31" pos:end="31:39"><expr pos:start="31:31" pos:end="31:39"><name pos:start="31:31" pos:end="31:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:22"><expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <operator pos:start="33:15" pos:end="33:15">-</operator><name pos:start="33:16" pos:end="33:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="35:9" pos:end="35:18">goto <name pos:start="35:14" pos:end="35:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:46"><expr pos:start="41:5" pos:end="41:45"><name pos:start="41:5" pos:end="41:12">filename</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:45"><name pos:start="41:16" pos:end="41:27">qemu_opt_get</name><argument_list pos:start="41:28" pos:end="41:45">(<argument pos:start="41:29" pos:end="41:32"><expr pos:start="41:29" pos:end="41:32"><name pos:start="41:29" pos:end="41:32">opts</name></expr></argument>, <argument pos:start="41:35" pos:end="41:44"><expr pos:start="41:35" pos:end="41:44"><literal type="string" pos:start="41:35" pos:end="41:44">"filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:45"><name pos:start="45:11" pos:end="45:34">raw_normalize_devicepath</name><argument_list pos:start="45:35" pos:end="45:45">(<argument pos:start="45:36" pos:end="45:44"><expr pos:start="45:36" pos:end="45:44"><operator pos:start="45:36" pos:end="45:36">&amp;</operator><name pos:start="45:37" pos:end="45:44">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:14">!=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>)</condition> <block pos:start="47:19" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:72"><expr pos:start="49:9" pos:end="49:71"><call pos:start="49:9" pos:end="49:71"><name pos:start="49:9" pos:end="49:24">error_setg_errno</name><argument_list pos:start="49:25" pos:end="49:71">(<argument pos:start="49:26" pos:end="49:29"><expr pos:start="49:26" pos:end="49:29"><name pos:start="49:26" pos:end="49:29">errp</name></expr></argument>, <argument pos:start="49:32" pos:end="49:35"><expr pos:start="49:32" pos:end="49:35"><operator pos:start="49:32" pos:end="49:32">-</operator><name pos:start="49:33" pos:end="49:35">ret</name></expr></argument>, <argument pos:start="49:38" pos:end="49:70"><expr pos:start="49:38" pos:end="49:70"><literal type="string" pos:start="49:38" pos:end="49:70">"Could not normalize device path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="61:49"><expr pos:start="57:5" pos:end="61:48"><name pos:start="57:5" pos:end="57:15">aio_default</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <ternary pos:start="57:19" pos:end="61:48"><condition pos:start="57:19" pos:end="59:19"><expr pos:start="57:19" pos:end="57:50"><operator pos:start="57:19" pos:end="57:19">(</operator><name pos:start="57:20" pos:end="57:29">bdrv_flags</name> <operator pos:start="57:31" pos:end="57:31">&amp;</operator> <name pos:start="57:33" pos:end="57:49">BDRV_O_NATIVE_AIO</name><operator pos:start="57:50" pos:end="57:50">)</operator></expr>

                  ?</condition><then pos:start="59:21" pos:end="59:47"> <expr pos:start="59:21" pos:end="59:47"><name pos:start="59:21" pos:end="59:47">BLOCKDEV_AIO_OPTIONS_NATIVE</name></expr>

                  </then><else pos:start="61:19" pos:end="61:48">: <expr pos:start="61:21" pos:end="61:48"><name pos:start="61:21" pos:end="61:48">BLOCKDEV_AIO_OPTIONS_THREADS</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="65:78"><expr pos:start="63:5" pos:end="65:77"><name pos:start="63:5" pos:end="63:7">aio</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="65:77"><name pos:start="63:11" pos:end="63:25">qapi_enum_parse</name><argument_list pos:start="63:26" pos:end="65:77">(<argument pos:start="63:27" pos:end="63:51"><expr pos:start="63:27" pos:end="63:51"><name pos:start="63:27" pos:end="63:51">BlockdevAioOptions_lookup</name></expr></argument>, <argument pos:start="63:54" pos:end="63:78"><expr pos:start="63:54" pos:end="63:78"><call pos:start="63:54" pos:end="63:78"><name pos:start="63:54" pos:end="63:65">qemu_opt_get</name><argument_list pos:start="63:66" pos:end="63:78">(<argument pos:start="63:67" pos:end="63:70"><expr pos:start="63:67" pos:end="63:70"><name pos:start="63:67" pos:end="63:70">opts</name></expr></argument>, <argument pos:start="63:73" pos:end="63:77"><expr pos:start="63:73" pos:end="63:77"><literal type="string" pos:start="63:73" pos:end="63:77">"aio"</literal></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="65:27" pos:end="65:51"><expr pos:start="65:27" pos:end="65:51"><name pos:start="65:27" pos:end="65:51">BLOCKDEV_AIO_OPTIONS__MAX</name></expr></argument>, <argument pos:start="65:54" pos:end="65:64"><expr pos:start="65:54" pos:end="65:64"><name pos:start="65:54" pos:end="65:64">aio_default</name></expr></argument>, <argument pos:start="65:67" pos:end="65:76"><expr pos:start="65:67" pos:end="65:76"><operator pos:start="65:67" pos:end="65:67">&amp;</operator><name pos:start="65:68" pos:end="65:76">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:18">(<expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:17">local_err</name></expr>)</condition> <block pos:start="67:20" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:18">

        <expr_stmt pos:start="69:9" pos:end="69:41"><expr pos:start="69:9" pos:end="69:40"><call pos:start="69:9" pos:end="69:40"><name pos:start="69:9" pos:end="69:23">error_propagate</name><argument_list pos:start="69:24" pos:end="69:40">(<argument pos:start="69:25" pos:end="69:28"><expr pos:start="69:25" pos:end="69:28"><name pos:start="69:25" pos:end="69:28">errp</name></expr></argument>, <argument pos:start="69:31" pos:end="69:39"><expr pos:start="69:31" pos:end="69:39"><name pos:start="69:31" pos:end="69:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><name pos:start="71:16" pos:end="71:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:60"><expr pos:start="77:5" pos:end="77:59"><name pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:20">use_linux_aio</name></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <operator pos:start="77:24" pos:end="77:24">(</operator><name pos:start="77:25" pos:end="77:27">aio</name> <operator pos:start="77:29" pos:end="77:30">==</operator> <name pos:start="77:32" pos:end="77:58">BLOCKDEV_AIO_OPTIONS_NATIVE</name><operator pos:start="77:59" pos:end="77:59">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="83:78"><expr pos:start="81:5" pos:end="83:77"><name pos:start="81:5" pos:end="81:11">locking</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="83:77"><name pos:start="81:15" pos:end="81:29">qapi_enum_parse</name><argument_list pos:start="81:30" pos:end="83:77">(<argument pos:start="81:31" pos:end="81:46"><expr pos:start="81:31" pos:end="81:46"><name pos:start="81:31" pos:end="81:46">OnOffAuto_lookup</name></expr></argument>, <argument pos:start="81:49" pos:end="81:77"><expr pos:start="81:49" pos:end="81:77"><call pos:start="81:49" pos:end="81:77"><name pos:start="81:49" pos:end="81:60">qemu_opt_get</name><argument_list pos:start="81:61" pos:end="81:77">(<argument pos:start="81:62" pos:end="81:65"><expr pos:start="81:62" pos:end="81:65"><name pos:start="81:62" pos:end="81:65">opts</name></expr></argument>, <argument pos:start="81:68" pos:end="81:76"><expr pos:start="81:68" pos:end="81:76"><literal type="string" pos:start="81:68" pos:end="81:76">"locking"</literal></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="83:31" pos:end="83:46"><expr pos:start="83:31" pos:end="83:46"><name pos:start="83:31" pos:end="83:46">ON_OFF_AUTO__MAX</name></expr></argument>, <argument pos:start="83:49" pos:end="83:64"><expr pos:start="83:49" pos:end="83:64"><name pos:start="83:49" pos:end="83:64">ON_OFF_AUTO_AUTO</name></expr></argument>, <argument pos:start="83:67" pos:end="83:76"><expr pos:start="83:67" pos:end="83:76"><operator pos:start="83:67" pos:end="83:67">&amp;</operator><name pos:start="83:68" pos:end="83:76">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if <condition pos:start="85:8" pos:end="85:18">(<expr pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:17">local_err</name></expr>)</condition> <block pos:start="85:20" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:18">

        <expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><call pos:start="87:9" pos:end="87:40"><name pos:start="87:9" pos:end="87:23">error_propagate</name><argument_list pos:start="87:24" pos:end="87:40">(<argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><name pos:start="87:25" pos:end="87:28">errp</name></expr></argument>, <argument pos:start="87:31" pos:end="87:39"><expr pos:start="87:31" pos:end="87:39"><name pos:start="87:31" pos:end="87:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:22"><expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <operator pos:start="89:15" pos:end="89:15">-</operator><name pos:start="89:16" pos:end="89:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="95:5" pos:end="139:5">switch <condition pos:start="95:12" pos:end="95:20">(<expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:19">locking</name></expr>)</condition> <block pos:start="95:22" pos:end="139:5">{<block_content pos:start="97:5" pos:end="137:16">

    <case pos:start="97:5" pos:end="97:24">case <expr pos:start="97:10" pos:end="97:23"><name pos:start="97:10" pos:end="97:23">ON_OFF_AUTO_ON</name></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="102:0"><expr pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:19">use_lock</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <name pos:start="99:23" pos:end="99:26">true</name></expr>;</expr_stmt>

<cpp:ifndef pos:start="101:1" pos:end="101:19">#<cpp:directive pos:start="101:2" pos:end="101:7">ifndef</cpp:directive> <name pos:start="101:9" pos:end="101:19">F_OFD_SETLK</name></cpp:ifndef>

        <expr_stmt pos:start="103:9" pos:end="112:0"><expr pos:start="103:9" pos:end="109:79"><call pos:start="103:9" pos:end="109:79"><name pos:start="103:9" pos:end="103:15">fprintf</name><argument_list pos:start="103:16" pos:end="109:79">(<argument pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:22">stderr</name></expr></argument>,

                <argument pos:start="105:17" pos:end="109:78"><expr pos:start="105:17" pos:end="109:78"><literal type="string" pos:start="105:17" pos:end="105:78">"File lock requested but OFD locking syscall is unavailable, "</literal>

                <literal type="string" pos:start="107:17" pos:end="107:53">"falling back to POSIX file locks.\n"</literal>

                <literal type="string" pos:start="109:17" pos:end="109:78">"Due to the implementation, locks can be lost unexpectedly.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:25">case <expr pos:start="115:10" pos:end="115:24"><name pos:start="115:10" pos:end="115:24">ON_OFF_AUTO_OFF</name></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:28"><expr pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:19">use_lock</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:27">false</name></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="124:0">case <expr pos:start="121:10" pos:end="121:25"><name pos:start="121:10" pos:end="121:25">ON_OFF_AUTO_AUTO</name></expr>:</case>

<cpp:ifdef pos:start="123:1" pos:end="123:18">#<cpp:directive pos:start="123:2" pos:end="123:6">ifdef</cpp:directive> <name pos:start="123:8" pos:end="123:18">F_OFD_SETLK</name></cpp:ifdef>

        <expr_stmt pos:start="125:9" pos:end="128:0"><expr pos:start="125:9" pos:end="125:26"><name pos:start="125:9" pos:end="125:19"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:19">use_lock</name></name> <operator pos:start="125:21" pos:end="125:21">=</operator> <name pos:start="125:23" pos:end="125:26">true</name></expr>;</expr_stmt>

<cpp:else pos:start="127:1" pos:end="127:5">#<cpp:directive pos:start="127:2" pos:end="127:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="129:9" pos:end="132:0"><expr pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:19">use_lock</name></name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:27">false</name></expr>;</expr_stmt>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <default pos:start="135:5" pos:end="135:12">default:</default>

        <expr_stmt pos:start="137:9" pos:end="137:16"><expr pos:start="137:9" pos:end="137:15"><call pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:13">abort</name><argument_list pos:start="137:14" pos:end="137:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="143:5" pos:end="143:31"><expr pos:start="143:5" pos:end="143:30"><name pos:start="143:5" pos:end="143:17"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:17">open_flags</name></name> <operator pos:start="143:19" pos:end="143:19">=</operator> <name pos:start="143:21" pos:end="143:30">open_flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:48"><expr pos:start="145:5" pos:end="145:47"><call pos:start="145:5" pos:end="145:47"><name pos:start="145:5" pos:end="145:19">raw_parse_flags</name><argument_list pos:start="145:20" pos:end="145:47">(<argument pos:start="145:21" pos:end="145:30"><expr pos:start="145:21" pos:end="145:30"><name pos:start="145:21" pos:end="145:30">bdrv_flags</name></expr></argument>, <argument pos:start="145:33" pos:end="145:46"><expr pos:start="145:33" pos:end="145:46"><operator pos:start="145:33" pos:end="145:33">&amp;</operator><name pos:start="145:34" pos:end="145:46"><name pos:start="145:34" pos:end="145:34">s</name><operator pos:start="145:35" pos:end="145:36">-&gt;</operator><name pos:start="145:37" pos:end="145:46">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:15"><expr pos:start="149:5" pos:end="149:14"><name pos:start="149:5" pos:end="149:9"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:9">fd</name></name> <operator pos:start="149:11" pos:end="149:11">=</operator> <operator pos:start="149:13" pos:end="149:13">-</operator><literal type="number" pos:start="149:14" pos:end="149:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:50"><expr pos:start="151:5" pos:end="151:49"><name pos:start="151:5" pos:end="151:6">fd</name> <operator pos:start="151:8" pos:end="151:8">=</operator> <call pos:start="151:10" pos:end="151:49"><name pos:start="151:10" pos:end="151:18">qemu_open</name><argument_list pos:start="151:19" pos:end="151:49">(<argument pos:start="151:20" pos:end="151:27"><expr pos:start="151:20" pos:end="151:27"><name pos:start="151:20" pos:end="151:27">filename</name></expr></argument>, <argument pos:start="151:30" pos:end="151:42"><expr pos:start="151:30" pos:end="151:42"><name pos:start="151:30" pos:end="151:42"><name pos:start="151:30" pos:end="151:30">s</name><operator pos:start="151:31" pos:end="151:32">-&gt;</operator><name pos:start="151:33" pos:end="151:42">open_flags</name></name></expr></argument>, <argument pos:start="151:45" pos:end="151:48"><expr pos:start="151:45" pos:end="151:48"><literal type="number" pos:start="151:45" pos:end="151:48">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="167:5"><if pos:start="153:5" pos:end="167:5">if <condition pos:start="153:8" pos:end="153:15">(<expr pos:start="153:9" pos:end="153:14"><name pos:start="153:9" pos:end="153:10">fd</name> <operator pos:start="153:12" pos:end="153:12">&lt;</operator> <literal type="number" pos:start="153:14" pos:end="153:14">0</literal></expr>)</condition> <block pos:start="153:17" pos:end="167:5">{<block_content pos:start="155:9" pos:end="165:18">

        <expr_stmt pos:start="155:9" pos:end="155:21"><expr pos:start="155:9" pos:end="155:20"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <operator pos:start="155:15" pos:end="155:15">-</operator><name pos:start="155:16" pos:end="155:20">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:71"><expr pos:start="157:9" pos:end="157:70"><call pos:start="157:9" pos:end="157:70"><name pos:start="157:9" pos:end="157:24">error_setg_errno</name><argument_list pos:start="157:25" pos:end="157:70">(<argument pos:start="157:26" pos:end="157:29"><expr pos:start="157:26" pos:end="157:29"><name pos:start="157:26" pos:end="157:29">errp</name></expr></argument>, <argument pos:start="157:32" pos:end="157:36"><expr pos:start="157:32" pos:end="157:36"><name pos:start="157:32" pos:end="157:36">errno</name></expr></argument>, <argument pos:start="157:39" pos:end="157:59"><expr pos:start="157:39" pos:end="157:59"><literal type="string" pos:start="157:39" pos:end="157:59">"Could not open '%s'"</literal></expr></argument>, <argument pos:start="157:62" pos:end="157:69"><expr pos:start="157:62" pos:end="157:69"><name pos:start="157:62" pos:end="157:69">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:26">(<expr pos:start="159:13" pos:end="159:25"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:18">==</operator> <operator pos:start="159:20" pos:end="159:20">-</operator><name pos:start="159:21" pos:end="159:25">EROFS</name></expr>)</condition> <block pos:start="159:28" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:26">

            <expr_stmt pos:start="161:13" pos:end="161:26"><expr pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <operator pos:start="161:19" pos:end="161:19">-</operator><name pos:start="161:20" pos:end="161:25">EACCES</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="165:9" pos:end="165:18">goto <name pos:start="165:14" pos:end="165:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:15"><expr pos:start="169:5" pos:end="169:14"><name pos:start="169:5" pos:end="169:9"><name pos:start="169:5" pos:end="169:5">s</name><operator pos:start="169:6" pos:end="169:7">-&gt;</operator><name pos:start="169:8" pos:end="169:9">fd</name></name> <operator pos:start="169:11" pos:end="169:11">=</operator> <name pos:start="169:13" pos:end="169:14">fd</name></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:20"><expr pos:start="173:5" pos:end="173:19"><name pos:start="173:5" pos:end="173:14"><name pos:start="173:5" pos:end="173:5">s</name><operator pos:start="173:6" pos:end="173:7">-&gt;</operator><name pos:start="173:8" pos:end="173:14">lock_fd</name></name> <operator pos:start="173:16" pos:end="173:16">=</operator> <operator pos:start="173:18" pos:end="173:18">-</operator><literal type="number" pos:start="173:19" pos:end="173:19">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="195:5"><if pos:start="175:5" pos:end="195:5">if <condition pos:start="175:8" pos:end="175:20">(<expr pos:start="175:9" pos:end="175:19"><name pos:start="175:9" pos:end="175:19"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:19">use_lock</name></name></expr>)</condition> <block pos:start="175:22" pos:end="195:5">{<block_content pos:start="177:9" pos:end="193:24">

        <expr_stmt pos:start="177:9" pos:end="177:48"><expr pos:start="177:9" pos:end="177:47"><name pos:start="177:9" pos:end="177:10">fd</name> <operator pos:start="177:12" pos:end="177:12">=</operator> <call pos:start="177:14" pos:end="177:47"><name pos:start="177:14" pos:end="177:22">qemu_open</name><argument_list pos:start="177:23" pos:end="177:47">(<argument pos:start="177:24" pos:end="177:31"><expr pos:start="177:24" pos:end="177:31"><name pos:start="177:24" pos:end="177:31">filename</name></expr></argument>, <argument pos:start="177:34" pos:end="177:46"><expr pos:start="177:34" pos:end="177:46"><name pos:start="177:34" pos:end="177:46"><name pos:start="177:34" pos:end="177:34">s</name><operator pos:start="177:35" pos:end="177:36">-&gt;</operator><name pos:start="177:37" pos:end="177:46">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="179:9" pos:end="191:9"><if pos:start="179:9" pos:end="191:9">if <condition pos:start="179:12" pos:end="179:19">(<expr pos:start="179:13" pos:end="179:18"><name pos:start="179:13" pos:end="179:14">fd</name> <operator pos:start="179:16" pos:end="179:16">&lt;</operator> <literal type="number" pos:start="179:18" pos:end="179:18">0</literal></expr>)</condition> <block pos:start="179:21" pos:end="191:9">{<block_content pos:start="181:13" pos:end="189:22">

            <expr_stmt pos:start="181:13" pos:end="181:25"><expr pos:start="181:13" pos:end="181:24"><name pos:start="181:13" pos:end="181:15">ret</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <operator pos:start="181:19" pos:end="181:19">-</operator><name pos:start="181:20" pos:end="181:24">errno</name></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="185:39"><expr pos:start="183:13" pos:end="185:38"><call pos:start="183:13" pos:end="185:38"><name pos:start="183:13" pos:end="183:28">error_setg_errno</name><argument_list pos:start="183:29" pos:end="185:38">(<argument pos:start="183:30" pos:end="183:33"><expr pos:start="183:30" pos:end="183:33"><name pos:start="183:30" pos:end="183:33">errp</name></expr></argument>, <argument pos:start="183:36" pos:end="183:40"><expr pos:start="183:36" pos:end="183:40"><name pos:start="183:36" pos:end="183:40">errno</name></expr></argument>, <argument pos:start="183:43" pos:end="183:75"><expr pos:start="183:43" pos:end="183:75"><literal type="string" pos:start="183:43" pos:end="183:75">"Could not open '%s' for locking"</literal></expr></argument>,

                             <argument pos:start="185:30" pos:end="185:37"><expr pos:start="185:30" pos:end="185:37"><name pos:start="185:30" pos:end="185:37">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:30"><expr pos:start="187:13" pos:end="187:29"><call pos:start="187:13" pos:end="187:29"><name pos:start="187:13" pos:end="187:22">qemu_close</name><argument_list pos:start="187:23" pos:end="187:29">(<argument pos:start="187:24" pos:end="187:28"><expr pos:start="187:24" pos:end="187:28"><name pos:start="187:24" pos:end="187:28"><name pos:start="187:24" pos:end="187:24">s</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:28">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="189:13" pos:end="189:22">goto <name pos:start="189:18" pos:end="189:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:24"><expr pos:start="193:9" pos:end="193:23"><name pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:18">lock_fd</name></name> <operator pos:start="193:20" pos:end="193:20">=</operator> <name pos:start="193:22" pos:end="193:23">fd</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:16"><expr pos:start="197:5" pos:end="197:15"><name pos:start="197:5" pos:end="197:11"><name pos:start="197:5" pos:end="197:5">s</name><operator pos:start="197:6" pos:end="197:7">-&gt;</operator><name pos:start="197:8" pos:end="197:11">perm</name></name> <operator pos:start="197:13" pos:end="197:13">=</operator> <literal type="number" pos:start="197:15" pos:end="197:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="204:0"><expr pos:start="199:5" pos:end="199:33"><name pos:start="199:5" pos:end="199:18"><name pos:start="199:5" pos:end="199:5">s</name><operator pos:start="199:6" pos:end="199:7">-&gt;</operator><name pos:start="199:8" pos:end="199:18">shared_perm</name></name> <operator pos:start="199:20" pos:end="199:20">=</operator> <name pos:start="199:22" pos:end="199:33">BLK_PERM_ALL</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="203:1" pos:end="203:23">#<cpp:directive pos:start="203:2" pos:end="203:6">ifdef</cpp:directive> <name pos:start="203:8" pos:end="203:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

     <comment type="block" pos:start="205:6" pos:end="205:71">/* Currently Linux does AIO only for files opened with O_DIRECT */</comment>

    <if_stmt pos:start="207:5" pos:end="220:0"><if pos:start="207:5" pos:end="220:0">if <condition pos:start="207:8" pos:end="207:56">(<expr pos:start="207:9" pos:end="207:55"><name pos:start="207:9" pos:end="207:24"><name pos:start="207:9" pos:end="207:9">s</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:24">use_linux_aio</name></name> <operator pos:start="207:26" pos:end="207:27">&amp;&amp;</operator> <operator pos:start="207:29" pos:end="207:29">!</operator><operator pos:start="207:30" pos:end="207:30">(</operator><name pos:start="207:31" pos:end="207:43"><name pos:start="207:31" pos:end="207:31">s</name><operator pos:start="207:32" pos:end="207:33">-&gt;</operator><name pos:start="207:34" pos:end="207:43">open_flags</name></name> <operator pos:start="207:45" pos:end="207:45">&amp;</operator> <name pos:start="207:47" pos:end="207:54">O_DIRECT</name><operator pos:start="207:55" pos:end="207:55">)</operator></expr>)</condition> <block pos:start="207:58" pos:end="220:0">{<block_content pos:start="209:9" pos:end="215:18">

        <expr_stmt pos:start="209:9" pos:end="211:70"><expr pos:start="209:9" pos:end="211:69"><call pos:start="209:9" pos:end="211:69"><name pos:start="209:9" pos:end="209:18">error_setg</name><argument_list pos:start="209:19" pos:end="211:69">(<argument pos:start="209:20" pos:end="209:23"><expr pos:start="209:20" pos:end="209:23"><name pos:start="209:20" pos:end="209:23">errp</name></expr></argument>, <argument pos:start="209:26" pos:end="211:68"><expr pos:start="209:26" pos:end="211:68"><literal type="string" pos:start="209:26" pos:end="209:69">"aio=native was specified, but it requires "</literal>

                         <literal type="string" pos:start="211:26" pos:end="211:68">"cache.direct=on, which was not specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:22"><expr pos:start="213:9" pos:end="213:21"><name pos:start="213:9" pos:end="213:11">ret</name> <operator pos:start="213:13" pos:end="213:13">=</operator> <operator pos:start="213:15" pos:end="213:15">-</operator><name pos:start="213:16" pos:end="213:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="215:9" pos:end="215:18">goto <name pos:start="215:14" pos:end="215:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="219:1" pos:end="219:5">#<cpp:directive pos:start="219:2" pos:end="219:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="221:5" pos:end="234:0"><if pos:start="221:5" pos:end="234:0">if <condition pos:start="221:8" pos:end="221:25">(<expr pos:start="221:9" pos:end="221:24"><name pos:start="221:9" pos:end="221:24"><name pos:start="221:9" pos:end="221:9">s</name><operator pos:start="221:10" pos:end="221:11">-&gt;</operator><name pos:start="221:12" pos:end="221:24">use_linux_aio</name></name></expr>)</condition> <block pos:start="221:27" pos:end="234:0">{<block_content pos:start="223:9" pos:end="229:18">

        <expr_stmt pos:start="223:9" pos:end="225:43"><expr pos:start="223:9" pos:end="225:42"><call pos:start="223:9" pos:end="225:42"><name pos:start="223:9" pos:end="223:18">error_setg</name><argument_list pos:start="223:19" pos:end="225:42">(<argument pos:start="223:20" pos:end="223:23"><expr pos:start="223:20" pos:end="223:23"><name pos:start="223:20" pos:end="223:23">errp</name></expr></argument>, <argument pos:start="223:26" pos:end="225:41"><expr pos:start="223:26" pos:end="225:41"><literal type="string" pos:start="223:26" pos:end="223:74">"aio=native was specified, but is not supported "</literal>

                         <literal type="string" pos:start="225:26" pos:end="225:41">"in this build."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:22"><expr pos:start="227:9" pos:end="227:21"><name pos:start="227:9" pos:end="227:11">ret</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <operator pos:start="227:15" pos:end="227:15">-</operator><name pos:start="227:16" pos:end="227:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="229:9" pos:end="229:18">goto <name pos:start="229:14" pos:end="229:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="233:1" pos:end="233:6">#<cpp:directive pos:start="233:2" pos:end="233:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="233:8" pos:end="233:39">/* !defined(CONFIG_LINUX_AIO) */</comment>



    <expr_stmt pos:start="237:5" pos:end="237:26"><expr pos:start="237:5" pos:end="237:25"><name pos:start="237:5" pos:end="237:18"><name pos:start="237:5" pos:end="237:5">s</name><operator pos:start="237:6" pos:end="237:7">-&gt;</operator><name pos:start="237:8" pos:end="237:18">has_discard</name></name> <operator pos:start="237:20" pos:end="237:20">=</operator> <name pos:start="237:22" pos:end="237:25">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:31"><expr pos:start="239:5" pos:end="239:30"><name pos:start="239:5" pos:end="239:23"><name pos:start="239:5" pos:end="239:5">s</name><operator pos:start="239:6" pos:end="239:7">-&gt;</operator><name pos:start="239:8" pos:end="239:23">has_write_zeroes</name></name> <operator pos:start="239:25" pos:end="239:25">=</operator> <name pos:start="239:27" pos:end="239:30">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:50"><expr pos:start="241:5" pos:end="241:49"><name pos:start="241:5" pos:end="241:28"><name pos:start="241:5" pos:end="241:6">bs</name><operator pos:start="241:7" pos:end="241:8">-&gt;</operator><name pos:start="241:9" pos:end="241:28">supported_zero_flags</name></name> <operator pos:start="241:30" pos:end="241:30">=</operator> <name pos:start="241:32" pos:end="241:49">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="247:5"><if pos:start="243:5" pos:end="247:5">if <condition pos:start="243:8" pos:end="243:47">(<expr pos:start="243:9" pos:end="243:46"><operator pos:start="243:9" pos:end="243:9">(</operator><name pos:start="243:10" pos:end="243:23"><name pos:start="243:10" pos:end="243:11">bs</name><operator pos:start="243:12" pos:end="243:13">-&gt;</operator><name pos:start="243:14" pos:end="243:23">open_flags</name></name> <operator pos:start="243:25" pos:end="243:25">&amp;</operator> <name pos:start="243:27" pos:end="243:40">BDRV_O_NOCACHE</name><operator pos:start="243:41" pos:end="243:41">)</operator> <operator pos:start="243:43" pos:end="243:44">!=</operator> <literal type="number" pos:start="243:46" pos:end="243:46">0</literal></expr>)</condition> <block pos:start="243:49" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:34">

        <expr_stmt pos:start="245:9" pos:end="245:34"><expr pos:start="245:9" pos:end="245:33"><name pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:9">s</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:26">needs_alignment</name></name> <operator pos:start="245:28" pos:end="245:28">=</operator> <name pos:start="245:30" pos:end="245:33">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="251:5" pos:end="259:5"><if pos:start="251:5" pos:end="259:5">if <condition pos:start="251:8" pos:end="251:30">(<expr pos:start="251:9" pos:end="251:29"><call pos:start="251:9" pos:end="251:25"><name pos:start="251:9" pos:end="251:13">fstat</name><argument_list pos:start="251:14" pos:end="251:25">(<argument pos:start="251:15" pos:end="251:19"><expr pos:start="251:15" pos:end="251:19"><name pos:start="251:15" pos:end="251:19"><name pos:start="251:15" pos:end="251:15">s</name><operator pos:start="251:16" pos:end="251:17">-&gt;</operator><name pos:start="251:18" pos:end="251:19">fd</name></name></expr></argument>, <argument pos:start="251:22" pos:end="251:24"><expr pos:start="251:22" pos:end="251:24"><operator pos:start="251:22" pos:end="251:22">&amp;</operator><name pos:start="251:23" pos:end="251:24">st</name></expr></argument>)</argument_list></call> <operator pos:start="251:27" pos:end="251:27">&lt;</operator> <literal type="number" pos:start="251:29" pos:end="251:29">0</literal></expr>)</condition> <block pos:start="251:32" pos:end="259:5">{<block_content pos:start="253:9" pos:end="257:18">

        <expr_stmt pos:start="253:9" pos:end="253:21"><expr pos:start="253:9" pos:end="253:20"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <operator pos:start="253:15" pos:end="253:15">-</operator><name pos:start="253:16" pos:end="253:20">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:61"><expr pos:start="255:9" pos:end="255:60"><call pos:start="255:9" pos:end="255:60"><name pos:start="255:9" pos:end="255:24">error_setg_errno</name><argument_list pos:start="255:25" pos:end="255:60">(<argument pos:start="255:26" pos:end="255:29"><expr pos:start="255:26" pos:end="255:29"><name pos:start="255:26" pos:end="255:29">errp</name></expr></argument>, <argument pos:start="255:32" pos:end="255:36"><expr pos:start="255:32" pos:end="255:36"><name pos:start="255:32" pos:end="255:36">errno</name></expr></argument>, <argument pos:start="255:39" pos:end="255:59"><expr pos:start="255:39" pos:end="255:59"><literal type="string" pos:start="255:39" pos:end="255:59">"Could not stat file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="257:9" pos:end="257:18">goto <name pos:start="257:14" pos:end="257:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="261:5" pos:end="267:5"><if pos:start="261:5" pos:end="267:5">if <condition pos:start="261:8" pos:end="261:28">(<expr pos:start="261:9" pos:end="261:27"><call pos:start="261:9" pos:end="261:27"><name pos:start="261:9" pos:end="261:15">S_ISREG</name><argument_list pos:start="261:16" pos:end="261:27">(<argument pos:start="261:17" pos:end="261:26"><expr pos:start="261:17" pos:end="261:26"><name pos:start="261:17" pos:end="261:26"><name pos:start="261:17" pos:end="261:18">st</name><operator pos:start="261:19" pos:end="261:19">.</operator><name pos:start="261:20" pos:end="261:26">st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="261:30" pos:end="267:5">{<block_content pos:start="263:9" pos:end="265:32">

        <expr_stmt pos:start="263:9" pos:end="263:33"><expr pos:start="263:9" pos:end="263:32"><name pos:start="263:9" pos:end="263:25"><name pos:start="263:9" pos:end="263:9">s</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:25">discard_zeroes</name></name> <operator pos:start="263:27" pos:end="263:27">=</operator> <name pos:start="263:29" pos:end="263:32">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:32"><expr pos:start="265:9" pos:end="265:31"><name pos:start="265:9" pos:end="265:24"><name pos:start="265:9" pos:end="265:9">s</name><operator pos:start="265:10" pos:end="265:11">-&gt;</operator><name pos:start="265:12" pos:end="265:24">has_fallocate</name></name> <operator pos:start="265:26" pos:end="265:26">=</operator> <name pos:start="265:28" pos:end="265:31">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="269:5" pos:end="306:0"><if pos:start="269:5" pos:end="306:0">if <condition pos:start="269:8" pos:end="269:28">(<expr pos:start="269:9" pos:end="269:27"><call pos:start="269:9" pos:end="269:27"><name pos:start="269:9" pos:end="269:15">S_ISBLK</name><argument_list pos:start="269:16" pos:end="269:27">(<argument pos:start="269:17" pos:end="269:26"><expr pos:start="269:17" pos:end="269:26"><name pos:start="269:17" pos:end="269:26"><name pos:start="269:17" pos:end="269:18">st</name><operator pos:start="269:19" pos:end="269:19">.</operator><name pos:start="269:20" pos:end="269:26">st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="269:30" pos:end="306:0">{<block_content pos:start="273:9" pos:end="302:0">

<cpp:ifdef pos:start="271:1" pos:end="271:23">#<cpp:directive pos:start="271:2" pos:end="271:6">ifdef</cpp:directive> <name pos:start="271:8" pos:end="271:23">BLKDISCARDZEROES</name></cpp:ifdef>

        <decl_stmt pos:start="273:9" pos:end="273:25"><decl pos:start="273:9" pos:end="273:24"><type pos:start="273:9" pos:end="273:20"><name pos:start="273:9" pos:end="273:16">unsigned</name> <name pos:start="273:18" pos:end="273:20">int</name></type> <name pos:start="273:22" pos:end="273:24">arg</name></decl>;</decl_stmt>

        <if_stmt pos:start="275:9" pos:end="284:0"><if pos:start="275:9" pos:end="284:0">if <condition pos:start="275:12" pos:end="275:61">(<expr pos:start="275:13" pos:end="275:60"><call pos:start="275:13" pos:end="275:48"><name pos:start="275:13" pos:end="275:17">ioctl</name><argument_list pos:start="275:18" pos:end="275:48">(<argument pos:start="275:19" pos:end="275:23"><expr pos:start="275:19" pos:end="275:23"><name pos:start="275:19" pos:end="275:23"><name pos:start="275:19" pos:end="275:19">s</name><operator pos:start="275:20" pos:end="275:21">-&gt;</operator><name pos:start="275:22" pos:end="275:23">fd</name></name></expr></argument>, <argument pos:start="275:26" pos:end="275:41"><expr pos:start="275:26" pos:end="275:41"><name pos:start="275:26" pos:end="275:41">BLKDISCARDZEROES</name></expr></argument>, <argument pos:start="275:44" pos:end="275:47"><expr pos:start="275:44" pos:end="275:47"><operator pos:start="275:44" pos:end="275:44">&amp;</operator><name pos:start="275:45" pos:end="275:47">arg</name></expr></argument>)</argument_list></call> <operator pos:start="275:50" pos:end="275:51">==</operator> <literal type="number" pos:start="275:53" pos:end="275:53">0</literal> <operator pos:start="275:55" pos:end="275:56">&amp;&amp;</operator> <name pos:start="275:58" pos:end="275:60">arg</name></expr>)</condition> <block pos:start="275:63" pos:end="284:0">{<block_content pos:start="277:13" pos:end="277:37">

            <expr_stmt pos:start="277:13" pos:end="277:37"><expr pos:start="277:13" pos:end="277:36"><name pos:start="277:13" pos:end="277:29"><name pos:start="277:13" pos:end="277:13">s</name><operator pos:start="277:14" pos:end="277:15">-&gt;</operator><name pos:start="277:16" pos:end="277:29">discard_zeroes</name></name> <operator pos:start="277:31" pos:end="277:31">=</operator> <name pos:start="277:33" pos:end="277:36">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="281:1" pos:end="281:6">#<cpp:directive pos:start="281:2" pos:end="281:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="283:1" pos:end="283:16">#<cpp:directive pos:start="283:2" pos:end="283:6">ifdef</cpp:directive> <name pos:start="283:8" pos:end="283:16">__linux__</name></cpp:ifdef>

        <comment type="block" pos:start="285:9" pos:end="291:11">/* On Linux 3.10, BLKDISCARD leaves stale data in the page cache.  Do

         * not rely on the contents of discarded blocks unless using O_DIRECT.

         * Same for BLKZEROOUT.

         */</comment>

        <if_stmt pos:start="293:9" pos:end="302:0"><if pos:start="293:9" pos:end="302:0">if <condition pos:start="293:12" pos:end="293:47">(<expr pos:start="293:13" pos:end="293:46"><operator pos:start="293:13" pos:end="293:13">!</operator><operator pos:start="293:14" pos:end="293:14">(</operator><name pos:start="293:15" pos:end="293:28"><name pos:start="293:15" pos:end="293:16">bs</name><operator pos:start="293:17" pos:end="293:18">-&gt;</operator><name pos:start="293:19" pos:end="293:28">open_flags</name></name> <operator pos:start="293:30" pos:end="293:30">&amp;</operator> <name pos:start="293:32" pos:end="293:45">BDRV_O_NOCACHE</name><operator pos:start="293:46" pos:end="293:46">)</operator></expr>)</condition> <block pos:start="293:49" pos:end="302:0">{<block_content pos:start="295:13" pos:end="297:40">

            <expr_stmt pos:start="295:13" pos:end="295:38"><expr pos:start="295:13" pos:end="295:37"><name pos:start="295:13" pos:end="295:29"><name pos:start="295:13" pos:end="295:13">s</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:29">discard_zeroes</name></name> <operator pos:start="295:31" pos:end="295:31">=</operator> <name pos:start="295:33" pos:end="295:37">false</name></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:40"><expr pos:start="297:13" pos:end="297:39"><name pos:start="297:13" pos:end="297:31"><name pos:start="297:13" pos:end="297:13">s</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:31">has_write_zeroes</name></name> <operator pos:start="297:33" pos:end="297:33">=</operator> <name pos:start="297:35" pos:end="297:39">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="301:1" pos:end="301:6">#<cpp:directive pos:start="301:2" pos:end="301:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="305:1" pos:end="305:18">#<cpp:directive pos:start="305:2" pos:end="305:6">ifdef</cpp:directive> <name pos:start="305:8" pos:end="305:18">__FreeBSD__</name></cpp:ifdef>

    <if_stmt pos:start="307:5" pos:end="330:0"><if pos:start="307:5" pos:end="330:0">if <condition pos:start="307:8" pos:end="307:28">(<expr pos:start="307:9" pos:end="307:27"><call pos:start="307:9" pos:end="307:27"><name pos:start="307:9" pos:end="307:15">S_ISCHR</name><argument_list pos:start="307:16" pos:end="307:27">(<argument pos:start="307:17" pos:end="307:26"><expr pos:start="307:17" pos:end="307:26"><name pos:start="307:17" pos:end="307:26"><name pos:start="307:17" pos:end="307:18">st</name><operator pos:start="307:19" pos:end="307:19">.</operator><name pos:start="307:20" pos:end="307:26">st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="307:30" pos:end="330:0">{<block_content pos:start="321:9" pos:end="321:34">

        <comment type="block" pos:start="309:9" pos:end="319:11">/*

         * The file is a char device (disk), which on FreeBSD isn't behind

         * a pager, so force all requests to be aligned. This is needed

         * so QEMU makes sure all IO operations on the device are aligned

         * to sector size, or else FreeBSD will reject them with EINVAL.

         */</comment>

        <expr_stmt pos:start="321:9" pos:end="321:34"><expr pos:start="321:9" pos:end="321:33"><name pos:start="321:9" pos:end="321:26"><name pos:start="321:9" pos:end="321:9">s</name><operator pos:start="321:10" pos:end="321:11">-&gt;</operator><name pos:start="321:12" pos:end="321:26">needs_alignment</name></name> <operator pos:start="321:28" pos:end="321:28">=</operator> <name pos:start="321:30" pos:end="321:33">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="325:1" pos:end="325:6">#<cpp:directive pos:start="325:2" pos:end="325:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="329:1" pos:end="329:17">#<cpp:directive pos:start="329:2" pos:end="329:6">ifdef</cpp:directive> <name pos:start="329:8" pos:end="329:17">CONFIG_XFS</name></cpp:ifdef>

    <if_stmt pos:start="331:5" pos:end="338:0"><if pos:start="331:5" pos:end="338:0">if <condition pos:start="331:8" pos:end="331:36">(<expr pos:start="331:9" pos:end="331:35"><call pos:start="331:9" pos:end="331:35"><name pos:start="331:9" pos:end="331:28">platform_test_xfs_fd</name><argument_list pos:start="331:29" pos:end="331:35">(<argument pos:start="331:30" pos:end="331:34"><expr pos:start="331:30" pos:end="331:34"><name pos:start="331:30" pos:end="331:34"><name pos:start="331:30" pos:end="331:30">s</name><operator pos:start="331:31" pos:end="331:32">-&gt;</operator><name pos:start="331:33" pos:end="331:34">fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="331:38" pos:end="338:0">{<block_content pos:start="333:9" pos:end="333:25">

        <expr_stmt pos:start="333:9" pos:end="333:25"><expr pos:start="333:9" pos:end="333:24"><name pos:start="333:9" pos:end="333:17"><name pos:start="333:9" pos:end="333:9">s</name><operator pos:start="333:10" pos:end="333:11">-&gt;</operator><name pos:start="333:12" pos:end="333:17">is_xfs</name></name> <operator pos:start="333:19" pos:end="333:19">=</operator> <name pos:start="333:21" pos:end="333:24">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="337:1" pos:end="337:6">#<cpp:directive pos:start="337:2" pos:end="337:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="341:5" pos:end="341:12"><expr pos:start="341:5" pos:end="341:11"><name pos:start="341:5" pos:end="341:7">ret</name> <operator pos:start="341:9" pos:end="341:9">=</operator> <literal type="number" pos:start="341:11" pos:end="341:11">0</literal></expr>;</expr_stmt>

<label pos:start="343:1" pos:end="343:5"><name pos:start="343:1" pos:end="343:4">fail</name>:</label>

    <if_stmt pos:start="345:5" pos:end="349:5"><if pos:start="345:5" pos:end="349:5">if <condition pos:start="345:8" pos:end="345:52">(<expr pos:start="345:9" pos:end="345:51"><name pos:start="345:9" pos:end="345:16">filename</name> <operator pos:start="345:18" pos:end="345:19">&amp;&amp;</operator> <operator pos:start="345:21" pos:end="345:21">(</operator><name pos:start="345:22" pos:end="345:31">bdrv_flags</name> <operator pos:start="345:33" pos:end="345:33">&amp;</operator> <name pos:start="345:35" pos:end="345:50">BDRV_O_TEMPORARY</name><operator pos:start="345:51" pos:end="345:51">)</operator></expr>)</condition> <block pos:start="345:54" pos:end="349:5">{<block_content pos:start="347:9" pos:end="347:25">

        <expr_stmt pos:start="347:9" pos:end="347:25"><expr pos:start="347:9" pos:end="347:24"><call pos:start="347:9" pos:end="347:24"><name pos:start="347:9" pos:end="347:14">unlink</name><argument_list pos:start="347:15" pos:end="347:24">(<argument pos:start="347:16" pos:end="347:23"><expr pos:start="347:16" pos:end="347:23"><name pos:start="347:16" pos:end="347:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="351:5" pos:end="351:24"><expr pos:start="351:5" pos:end="351:23"><call pos:start="351:5" pos:end="351:23"><name pos:start="351:5" pos:end="351:17">qemu_opts_del</name><argument_list pos:start="351:18" pos:end="351:23">(<argument pos:start="351:19" pos:end="351:22"><expr pos:start="351:19" pos:end="351:22"><name pos:start="351:19" pos:end="351:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="353:5" pos:end="353:15">return <expr pos:start="353:12" pos:end="353:14"><name pos:start="353:12" pos:end="353:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
