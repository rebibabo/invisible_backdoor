<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14319.c" pos:tabs="8"><function pos:start="1:1" pos:end="475:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">inline</specifier> <specifier pos:start="1:8" pos:end="1:13">static</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hcscale</name>)<parameter_list pos:start="1:35" pos:end="9:72">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:43">uint16_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dst</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:54">long</name></type> <name pos:start="1:56" pos:end="1:63">dstWidth</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:72">uint8_t</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:78">src1</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:93"><decl pos:start="1:81" pos:end="1:93"><type pos:start="1:81" pos:end="1:93"><name pos:start="1:81" pos:end="1:87">uint8_t</name> <modifier pos:start="1:89" pos:end="1:89">*</modifier></type><name pos:start="1:90" pos:end="1:93">src2</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:43"><decl pos:start="3:36" pos:end="3:43"><type pos:start="3:36" pos:end="3:43"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:43">srcW</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:53"><decl pos:start="3:46" pos:end="3:53"><type pos:start="3:46" pos:end="3:53"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:53">xInc</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:64"><decl pos:start="3:56" pos:end="3:64"><type pos:start="3:56" pos:end="3:64"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:64">flags</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:83"><decl pos:start="3:67" pos:end="3:83"><type pos:start="3:67" pos:end="3:83"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:83">canMMX2BeUsed</name></decl></parameter>, <parameter pos:start="3:86" pos:end="3:104"><decl pos:start="3:86" pos:end="3:104"><type pos:start="3:86" pos:end="3:104"><name pos:start="3:86" pos:end="3:92">int16_t</name> <modifier pos:start="3:94" pos:end="3:94">*</modifier></type><name pos:start="3:95" pos:end="3:104">hChrFilter</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:42">int16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:57">hChrFilterPos</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:77"><decl pos:start="5:60" pos:end="5:77"><type pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:77">hChrFilterSize</name></decl></parameter>, <parameter pos:start="5:80" pos:end="5:96"><decl pos:start="5:80" pos:end="5:96"><type pos:start="5:80" pos:end="5:96"><name pos:start="5:80" pos:end="5:83">void</name> <modifier pos:start="5:85" pos:end="5:85">*</modifier></type><name pos:start="5:86" pos:end="5:96">funnyUVCode</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:48"><decl pos:start="7:36" pos:end="7:48"><type pos:start="7:36" pos:end="7:48"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:48">srcFormat</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:75"><decl pos:start="7:51" pos:end="7:75"><type pos:start="7:51" pos:end="7:75"><name pos:start="7:51" pos:end="7:57">uint8_t</name> <modifier pos:start="7:59" pos:end="7:59">*</modifier></type><name pos:start="7:60" pos:end="7:75">formatConvBuffer</name></decl></parameter>, <parameter pos:start="7:78" pos:end="7:96"><decl pos:start="7:78" pos:end="7:96"><type pos:start="7:78" pos:end="7:96"><name pos:start="7:78" pos:end="7:84">int16_t</name> <modifier pos:start="7:86" pos:end="7:86">*</modifier></type><name pos:start="7:87" pos:end="7:96">mmx2Filter</name></decl></parameter>,

                                   <parameter pos:start="9:36" pos:end="9:57"><decl pos:start="9:36" pos:end="9:57"><type pos:start="9:36" pos:end="9:57"><name pos:start="9:36" pos:end="9:42">int32_t</name> <modifier pos:start="9:44" pos:end="9:44">*</modifier></type><name pos:start="9:45" pos:end="9:57">mmx2FilterPos</name></decl></parameter>, <parameter pos:start="9:60" pos:end="9:71"><decl pos:start="9:60" pos:end="9:71"><type pos:start="9:60" pos:end="9:71"><name pos:start="9:60" pos:end="9:66">uint8_t</name> <modifier pos:start="9:68" pos:end="9:68">*</modifier></type><name pos:start="9:69" pos:end="9:71">pal</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="475:1">{<block_content pos:start="13:5" pos:end="473:5">

    <if_stmt pos:start="13:5" pos:end="156:0"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><name pos:start="13:9" pos:end="13:17">srcFormat</name><operator pos:start="13:18" pos:end="13:19">==</operator><name pos:start="13:20" pos:end="13:34">PIX_FMT_YUYV422</name></expr>)</condition>

    <block pos:start="15:5" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:36">

        <expr_stmt pos:start="17:9" pos:end="17:84"><expr pos:start="17:9" pos:end="17:83"><call pos:start="17:9" pos:end="17:83"><call pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:14">RENAME</name><argument_list pos:start="17:15" pos:end="17:24">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23">yuy2ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="17:25" pos:end="17:83">(<argument pos:start="17:26" pos:end="17:41"><expr pos:start="17:26" pos:end="17:41"><name pos:start="17:26" pos:end="17:41">formatConvBuffer</name></expr></argument>, <argument pos:start="17:44" pos:end="17:64"><expr pos:start="17:44" pos:end="17:64"><name pos:start="17:44" pos:end="17:59">formatConvBuffer</name><operator pos:start="17:60" pos:end="17:60">+</operator><literal type="number" pos:start="17:61" pos:end="17:64">2048</literal></expr></argument>, <argument pos:start="17:67" pos:end="17:70"><expr pos:start="17:67" pos:end="17:70"><name pos:start="17:67" pos:end="17:70">src1</name></expr></argument>, <argument pos:start="17:73" pos:end="17:76"><expr pos:start="17:73" pos:end="17:76"><name pos:start="17:73" pos:end="17:76">src2</name></expr></argument>, <argument pos:start="17:79" pos:end="17:82"><expr pos:start="17:79" pos:end="17:82"><name pos:start="17:79" pos:end="17:82">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:31"><expr pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:12">src1</name><operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:12">src2</name><operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:30">formatConvBuffer</name><operator pos:start="21:31" pos:end="21:31">+</operator><literal type="number" pos:start="21:32" pos:end="21:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="25:5" pos:end="35:5">else if <condition pos:start="25:13" pos:end="25:40">(<expr pos:start="25:14" pos:end="25:39"><name pos:start="25:14" pos:end="25:22">srcFormat</name><operator pos:start="25:23" pos:end="25:24">==</operator><name pos:start="25:25" pos:end="25:39">PIX_FMT_UYVY422</name></expr>)</condition>

    <block pos:start="27:5" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:36">

        <expr_stmt pos:start="29:9" pos:end="29:84"><expr pos:start="29:9" pos:end="29:83"><call pos:start="29:9" pos:end="29:83"><call pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:14">RENAME</name><argument_list pos:start="29:15" pos:end="29:24">(<argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23">uyvyToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="29:25" pos:end="29:83">(<argument pos:start="29:26" pos:end="29:41"><expr pos:start="29:26" pos:end="29:41"><name pos:start="29:26" pos:end="29:41">formatConvBuffer</name></expr></argument>, <argument pos:start="29:44" pos:end="29:64"><expr pos:start="29:44" pos:end="29:64"><name pos:start="29:44" pos:end="29:59">formatConvBuffer</name><operator pos:start="29:60" pos:end="29:60">+</operator><literal type="number" pos:start="29:61" pos:end="29:64">2048</literal></expr></argument>, <argument pos:start="29:67" pos:end="29:70"><expr pos:start="29:67" pos:end="29:70"><name pos:start="29:67" pos:end="29:70">src1</name></expr></argument>, <argument pos:start="29:73" pos:end="29:76"><expr pos:start="29:73" pos:end="29:76"><name pos:start="29:73" pos:end="29:76">src2</name></expr></argument>, <argument pos:start="29:79" pos:end="29:82"><expr pos:start="29:79" pos:end="29:82"><name pos:start="29:79" pos:end="29:82">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:12">src1</name><operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:12">src2</name><operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:30">formatConvBuffer</name><operator pos:start="33:31" pos:end="33:31">+</operator><literal type="number" pos:start="33:32" pos:end="33:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="37:5" pos:end="47:5">else if <condition pos:start="37:13" pos:end="37:38">(<expr pos:start="37:14" pos:end="37:37"><name pos:start="37:14" pos:end="37:22">srcFormat</name><operator pos:start="37:23" pos:end="37:24">==</operator><name pos:start="37:25" pos:end="37:37">PIX_FMT_RGB32</name></expr>)</condition>

    <block pos:start="39:5" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:36">

        <expr_stmt pos:start="41:9" pos:end="41:85"><expr pos:start="41:9" pos:end="41:84"><call pos:start="41:9" pos:end="41:84"><call pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:14">RENAME</name><argument_list pos:start="41:15" pos:end="41:25">(<argument pos:start="41:16" pos:end="41:24"><expr pos:start="41:16" pos:end="41:24"><name pos:start="41:16" pos:end="41:24">bgr32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="41:26" pos:end="41:84">(<argument pos:start="41:27" pos:end="41:42"><expr pos:start="41:27" pos:end="41:42"><name pos:start="41:27" pos:end="41:42">formatConvBuffer</name></expr></argument>, <argument pos:start="41:45" pos:end="41:65"><expr pos:start="41:45" pos:end="41:65"><name pos:start="41:45" pos:end="41:60">formatConvBuffer</name><operator pos:start="41:61" pos:end="41:61">+</operator><literal type="number" pos:start="41:62" pos:end="41:65">2048</literal></expr></argument>, <argument pos:start="41:68" pos:end="41:71"><expr pos:start="41:68" pos:end="41:71"><name pos:start="41:68" pos:end="41:71">src1</name></expr></argument>, <argument pos:start="41:74" pos:end="41:77"><expr pos:start="41:74" pos:end="41:77"><name pos:start="41:74" pos:end="41:77">src2</name></expr></argument>, <argument pos:start="41:80" pos:end="41:83"><expr pos:start="41:80" pos:end="41:83"><name pos:start="41:80" pos:end="41:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:12">src1</name><operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:36"><expr pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:12">src2</name><operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:30">formatConvBuffer</name><operator pos:start="45:31" pos:end="45:31">+</operator><literal type="number" pos:start="45:32" pos:end="45:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="49:5" pos:end="59:5">else if <condition pos:start="49:13" pos:end="49:38">(<expr pos:start="49:14" pos:end="49:37"><name pos:start="49:14" pos:end="49:22">srcFormat</name><operator pos:start="49:23" pos:end="49:24">==</operator><name pos:start="49:25" pos:end="49:37">PIX_FMT_BGR24</name></expr>)</condition>

    <block pos:start="51:5" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:36">

        <expr_stmt pos:start="53:9" pos:end="53:85"><expr pos:start="53:9" pos:end="53:84"><call pos:start="53:9" pos:end="53:84"><call pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:14">RENAME</name><argument_list pos:start="53:15" pos:end="53:25">(<argument pos:start="53:16" pos:end="53:24"><expr pos:start="53:16" pos:end="53:24"><name pos:start="53:16" pos:end="53:24">bgr24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="53:26" pos:end="53:84">(<argument pos:start="53:27" pos:end="53:42"><expr pos:start="53:27" pos:end="53:42"><name pos:start="53:27" pos:end="53:42">formatConvBuffer</name></expr></argument>, <argument pos:start="53:45" pos:end="53:65"><expr pos:start="53:45" pos:end="53:65"><name pos:start="53:45" pos:end="53:60">formatConvBuffer</name><operator pos:start="53:61" pos:end="53:61">+</operator><literal type="number" pos:start="53:62" pos:end="53:65">2048</literal></expr></argument>, <argument pos:start="53:68" pos:end="53:71"><expr pos:start="53:68" pos:end="53:71"><name pos:start="53:68" pos:end="53:71">src1</name></expr></argument>, <argument pos:start="53:74" pos:end="53:77"><expr pos:start="53:74" pos:end="53:77"><name pos:start="53:74" pos:end="53:77">src2</name></expr></argument>, <argument pos:start="53:80" pos:end="53:83"><expr pos:start="53:80" pos:end="53:83"><name pos:start="53:80" pos:end="53:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:12">src1</name><operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:12">src2</name><operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:30">formatConvBuffer</name><operator pos:start="57:31" pos:end="57:31">+</operator><literal type="number" pos:start="57:32" pos:end="57:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="61:5" pos:end="71:5">else if <condition pos:start="61:13" pos:end="61:39">(<expr pos:start="61:14" pos:end="61:38"><name pos:start="61:14" pos:end="61:22">srcFormat</name><operator pos:start="61:23" pos:end="61:24">==</operator><name pos:start="61:25" pos:end="61:38">PIX_FMT_BGR565</name></expr>)</condition>

    <block pos:start="63:5" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:36">

        <expr_stmt pos:start="65:9" pos:end="65:85"><expr pos:start="65:9" pos:end="65:84"><call pos:start="65:9" pos:end="65:84"><call pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:14">RENAME</name><argument_list pos:start="65:15" pos:end="65:25">(<argument pos:start="65:16" pos:end="65:24"><expr pos:start="65:16" pos:end="65:24"><name pos:start="65:16" pos:end="65:24">bgr16ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="65:26" pos:end="65:84">(<argument pos:start="65:27" pos:end="65:42"><expr pos:start="65:27" pos:end="65:42"><name pos:start="65:27" pos:end="65:42">formatConvBuffer</name></expr></argument>, <argument pos:start="65:45" pos:end="65:65"><expr pos:start="65:45" pos:end="65:65"><name pos:start="65:45" pos:end="65:60">formatConvBuffer</name><operator pos:start="65:61" pos:end="65:61">+</operator><literal type="number" pos:start="65:62" pos:end="65:65">2048</literal></expr></argument>, <argument pos:start="65:68" pos:end="65:71"><expr pos:start="65:68" pos:end="65:71"><name pos:start="65:68" pos:end="65:71">src1</name></expr></argument>, <argument pos:start="65:74" pos:end="65:77"><expr pos:start="65:74" pos:end="65:77"><name pos:start="65:74" pos:end="65:77">src2</name></expr></argument>, <argument pos:start="65:80" pos:end="65:83"><expr pos:start="65:80" pos:end="65:83"><name pos:start="65:80" pos:end="65:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:31"><expr pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:12">src1</name><operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:36"><expr pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:12">src2</name><operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:30">formatConvBuffer</name><operator pos:start="69:31" pos:end="69:31">+</operator><literal type="number" pos:start="69:32" pos:end="69:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="73:5" pos:end="83:5">else if <condition pos:start="73:13" pos:end="73:39">(<expr pos:start="73:14" pos:end="73:38"><name pos:start="73:14" pos:end="73:22">srcFormat</name><operator pos:start="73:23" pos:end="73:24">==</operator><name pos:start="73:25" pos:end="73:38">PIX_FMT_BGR555</name></expr>)</condition>

    <block pos:start="75:5" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:36">

        <expr_stmt pos:start="77:9" pos:end="77:85"><expr pos:start="77:9" pos:end="77:84"><call pos:start="77:9" pos:end="77:84"><call pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:14">RENAME</name><argument_list pos:start="77:15" pos:end="77:25">(<argument pos:start="77:16" pos:end="77:24"><expr pos:start="77:16" pos:end="77:24"><name pos:start="77:16" pos:end="77:24">bgr15ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="77:26" pos:end="77:84">(<argument pos:start="77:27" pos:end="77:42"><expr pos:start="77:27" pos:end="77:42"><name pos:start="77:27" pos:end="77:42">formatConvBuffer</name></expr></argument>, <argument pos:start="77:45" pos:end="77:65"><expr pos:start="77:45" pos:end="77:65"><name pos:start="77:45" pos:end="77:60">formatConvBuffer</name><operator pos:start="77:61" pos:end="77:61">+</operator><literal type="number" pos:start="77:62" pos:end="77:65">2048</literal></expr></argument>, <argument pos:start="77:68" pos:end="77:71"><expr pos:start="77:68" pos:end="77:71"><name pos:start="77:68" pos:end="77:71">src1</name></expr></argument>, <argument pos:start="77:74" pos:end="77:77"><expr pos:start="77:74" pos:end="77:77"><name pos:start="77:74" pos:end="77:77">src2</name></expr></argument>, <argument pos:start="77:80" pos:end="77:83"><expr pos:start="77:80" pos:end="77:83"><name pos:start="77:80" pos:end="77:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:12">src1</name><operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:36"><expr pos:start="81:9" pos:end="81:35"><name pos:start="81:9" pos:end="81:12">src2</name><operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:30">formatConvBuffer</name><operator pos:start="81:31" pos:end="81:31">+</operator><literal type="number" pos:start="81:32" pos:end="81:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="85:5" pos:end="95:5">else if <condition pos:start="85:13" pos:end="85:38">(<expr pos:start="85:14" pos:end="85:37"><name pos:start="85:14" pos:end="85:22">srcFormat</name><operator pos:start="85:23" pos:end="85:24">==</operator><name pos:start="85:25" pos:end="85:37">PIX_FMT_BGR32</name></expr>)</condition>

    <block pos:start="87:5" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:36">

        <expr_stmt pos:start="89:9" pos:end="89:85"><expr pos:start="89:9" pos:end="89:84"><call pos:start="89:9" pos:end="89:84"><call pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:14">RENAME</name><argument_list pos:start="89:15" pos:end="89:25">(<argument pos:start="89:16" pos:end="89:24"><expr pos:start="89:16" pos:end="89:24"><name pos:start="89:16" pos:end="89:24">rgb32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="89:26" pos:end="89:84">(<argument pos:start="89:27" pos:end="89:42"><expr pos:start="89:27" pos:end="89:42"><name pos:start="89:27" pos:end="89:42">formatConvBuffer</name></expr></argument>, <argument pos:start="89:45" pos:end="89:65"><expr pos:start="89:45" pos:end="89:65"><name pos:start="89:45" pos:end="89:60">formatConvBuffer</name><operator pos:start="89:61" pos:end="89:61">+</operator><literal type="number" pos:start="89:62" pos:end="89:65">2048</literal></expr></argument>, <argument pos:start="89:68" pos:end="89:71"><expr pos:start="89:68" pos:end="89:71"><name pos:start="89:68" pos:end="89:71">src1</name></expr></argument>, <argument pos:start="89:74" pos:end="89:77"><expr pos:start="89:74" pos:end="89:77"><name pos:start="89:74" pos:end="89:77">src2</name></expr></argument>, <argument pos:start="89:80" pos:end="89:83"><expr pos:start="89:80" pos:end="89:83"><name pos:start="89:80" pos:end="89:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:31"><expr pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:12">src1</name><operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:12">src2</name><operator pos:start="93:13" pos:end="93:13">=</operator> <name pos:start="93:15" pos:end="93:30">formatConvBuffer</name><operator pos:start="93:31" pos:end="93:31">+</operator><literal type="number" pos:start="93:32" pos:end="93:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="97:5" pos:end="107:5">else if <condition pos:start="97:13" pos:end="97:38">(<expr pos:start="97:14" pos:end="97:37"><name pos:start="97:14" pos:end="97:22">srcFormat</name><operator pos:start="97:23" pos:end="97:24">==</operator><name pos:start="97:25" pos:end="97:37">PIX_FMT_RGB24</name></expr>)</condition>

    <block pos:start="99:5" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:36">

        <expr_stmt pos:start="101:9" pos:end="101:85"><expr pos:start="101:9" pos:end="101:84"><call pos:start="101:9" pos:end="101:84"><call pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:14">RENAME</name><argument_list pos:start="101:15" pos:end="101:25">(<argument pos:start="101:16" pos:end="101:24"><expr pos:start="101:16" pos:end="101:24"><name pos:start="101:16" pos:end="101:24">rgb24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="101:26" pos:end="101:84">(<argument pos:start="101:27" pos:end="101:42"><expr pos:start="101:27" pos:end="101:42"><name pos:start="101:27" pos:end="101:42">formatConvBuffer</name></expr></argument>, <argument pos:start="101:45" pos:end="101:65"><expr pos:start="101:45" pos:end="101:65"><name pos:start="101:45" pos:end="101:60">formatConvBuffer</name><operator pos:start="101:61" pos:end="101:61">+</operator><literal type="number" pos:start="101:62" pos:end="101:65">2048</literal></expr></argument>, <argument pos:start="101:68" pos:end="101:71"><expr pos:start="101:68" pos:end="101:71"><name pos:start="101:68" pos:end="101:71">src1</name></expr></argument>, <argument pos:start="101:74" pos:end="101:77"><expr pos:start="101:74" pos:end="101:77"><name pos:start="101:74" pos:end="101:77">src2</name></expr></argument>, <argument pos:start="101:80" pos:end="101:83"><expr pos:start="101:80" pos:end="101:83"><name pos:start="101:80" pos:end="101:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:31"><expr pos:start="103:9" pos:end="103:30"><name pos:start="103:9" pos:end="103:12">src1</name><operator pos:start="103:13" pos:end="103:13">=</operator> <name pos:start="103:15" pos:end="103:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:36"><expr pos:start="105:9" pos:end="105:35"><name pos:start="105:9" pos:end="105:12">src2</name><operator pos:start="105:13" pos:end="105:13">=</operator> <name pos:start="105:15" pos:end="105:30">formatConvBuffer</name><operator pos:start="105:31" pos:end="105:31">+</operator><literal type="number" pos:start="105:32" pos:end="105:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="109:5" pos:end="119:5">else if <condition pos:start="109:13" pos:end="109:39">(<expr pos:start="109:14" pos:end="109:38"><name pos:start="109:14" pos:end="109:22">srcFormat</name><operator pos:start="109:23" pos:end="109:24">==</operator><name pos:start="109:25" pos:end="109:38">PIX_FMT_RGB565</name></expr>)</condition>

    <block pos:start="111:5" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:36">

        <expr_stmt pos:start="113:9" pos:end="113:85"><expr pos:start="113:9" pos:end="113:84"><call pos:start="113:9" pos:end="113:84"><call pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:14">RENAME</name><argument_list pos:start="113:15" pos:end="113:25">(<argument pos:start="113:16" pos:end="113:24"><expr pos:start="113:16" pos:end="113:24"><name pos:start="113:16" pos:end="113:24">rgb16ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="113:26" pos:end="113:84">(<argument pos:start="113:27" pos:end="113:42"><expr pos:start="113:27" pos:end="113:42"><name pos:start="113:27" pos:end="113:42">formatConvBuffer</name></expr></argument>, <argument pos:start="113:45" pos:end="113:65"><expr pos:start="113:45" pos:end="113:65"><name pos:start="113:45" pos:end="113:60">formatConvBuffer</name><operator pos:start="113:61" pos:end="113:61">+</operator><literal type="number" pos:start="113:62" pos:end="113:65">2048</literal></expr></argument>, <argument pos:start="113:68" pos:end="113:71"><expr pos:start="113:68" pos:end="113:71"><name pos:start="113:68" pos:end="113:71">src1</name></expr></argument>, <argument pos:start="113:74" pos:end="113:77"><expr pos:start="113:74" pos:end="113:77"><name pos:start="113:74" pos:end="113:77">src2</name></expr></argument>, <argument pos:start="113:80" pos:end="113:83"><expr pos:start="113:80" pos:end="113:83"><name pos:start="113:80" pos:end="113:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:31"><expr pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:12">src1</name><operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:36"><expr pos:start="117:9" pos:end="117:35"><name pos:start="117:9" pos:end="117:12">src2</name><operator pos:start="117:13" pos:end="117:13">=</operator> <name pos:start="117:15" pos:end="117:30">formatConvBuffer</name><operator pos:start="117:31" pos:end="117:31">+</operator><literal type="number" pos:start="117:32" pos:end="117:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="121:5" pos:end="131:5">else if <condition pos:start="121:13" pos:end="121:39">(<expr pos:start="121:14" pos:end="121:38"><name pos:start="121:14" pos:end="121:22">srcFormat</name><operator pos:start="121:23" pos:end="121:24">==</operator><name pos:start="121:25" pos:end="121:38">PIX_FMT_RGB555</name></expr>)</condition>

    <block pos:start="123:5" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:36">

        <expr_stmt pos:start="125:9" pos:end="125:85"><expr pos:start="125:9" pos:end="125:84"><call pos:start="125:9" pos:end="125:84"><call pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:14">RENAME</name><argument_list pos:start="125:15" pos:end="125:25">(<argument pos:start="125:16" pos:end="125:24"><expr pos:start="125:16" pos:end="125:24"><name pos:start="125:16" pos:end="125:24">rgb15ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="125:26" pos:end="125:84">(<argument pos:start="125:27" pos:end="125:42"><expr pos:start="125:27" pos:end="125:42"><name pos:start="125:27" pos:end="125:42">formatConvBuffer</name></expr></argument>, <argument pos:start="125:45" pos:end="125:65"><expr pos:start="125:45" pos:end="125:65"><name pos:start="125:45" pos:end="125:60">formatConvBuffer</name><operator pos:start="125:61" pos:end="125:61">+</operator><literal type="number" pos:start="125:62" pos:end="125:65">2048</literal></expr></argument>, <argument pos:start="125:68" pos:end="125:71"><expr pos:start="125:68" pos:end="125:71"><name pos:start="125:68" pos:end="125:71">src1</name></expr></argument>, <argument pos:start="125:74" pos:end="125:77"><expr pos:start="125:74" pos:end="125:77"><name pos:start="125:74" pos:end="125:77">src2</name></expr></argument>, <argument pos:start="125:80" pos:end="125:83"><expr pos:start="125:80" pos:end="125:83"><name pos:start="125:80" pos:end="125:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:31"><expr pos:start="127:9" pos:end="127:30"><name pos:start="127:9" pos:end="127:12">src1</name><operator pos:start="127:13" pos:end="127:13">=</operator> <name pos:start="127:15" pos:end="127:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:36"><expr pos:start="129:9" pos:end="129:35"><name pos:start="129:9" pos:end="129:12">src2</name><operator pos:start="129:13" pos:end="129:13">=</operator> <name pos:start="129:15" pos:end="129:30">formatConvBuffer</name><operator pos:start="129:31" pos:end="129:31">+</operator><literal type="number" pos:start="129:32" pos:end="129:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="133:5" pos:end="139:5">else if <condition pos:start="133:13" pos:end="133:31">(<expr pos:start="133:14" pos:end="133:30"><call pos:start="133:14" pos:end="133:30"><name pos:start="133:14" pos:end="133:19">isGray</name><argument_list pos:start="133:20" pos:end="133:30">(<argument pos:start="133:21" pos:end="133:29"><expr pos:start="133:21" pos:end="133:29"><name pos:start="133:21" pos:end="133:29">srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="135:5" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:15">

        <return pos:start="137:9" pos:end="137:15">return;</return>

    </block_content>}</block></if>

    <if type="elseif" pos:start="141:5" pos:end="156:0">else if <condition pos:start="141:13" pos:end="141:156">(<expr pos:start="141:14" pos:end="141:155"><name pos:start="141:14" pos:end="141:22">srcFormat</name><operator pos:start="141:23" pos:end="141:24">==</operator><name pos:start="141:25" pos:end="141:36">PIX_FMT_RGB8</name> <operator pos:start="141:38" pos:end="141:39">||</operator> <name pos:start="141:41" pos:end="141:49">srcFormat</name><operator pos:start="141:50" pos:end="141:51">==</operator><name pos:start="141:52" pos:end="141:63">PIX_FMT_BGR8</name> <operator pos:start="141:65" pos:end="141:66">||</operator> <name pos:start="141:68" pos:end="141:76">srcFormat</name><operator pos:start="141:77" pos:end="141:78">==</operator><name pos:start="141:79" pos:end="141:90">PIX_FMT_PAL8</name> <operator pos:start="141:92" pos:end="141:93">||</operator> <name pos:start="141:95" pos:end="141:103">srcFormat</name><operator pos:start="141:104" pos:end="141:105">==</operator><name pos:start="141:106" pos:end="141:122">PIX_FMT_BGR4_BYTE</name>  <operator pos:start="141:125" pos:end="141:126">||</operator> <name pos:start="141:128" pos:end="141:136">srcFormat</name><operator pos:start="141:137" pos:end="141:138">==</operator><name pos:start="141:139" pos:end="141:155">PIX_FMT_RGB4_BYTE</name></expr>)</condition>

    <block pos:start="143:5" pos:end="156:0">{<block_content pos:start="145:9" pos:end="149:36">

        <expr_stmt pos:start="145:9" pos:end="145:88"><expr pos:start="145:9" pos:end="145:87"><call pos:start="145:9" pos:end="145:87"><call pos:start="145:9" pos:end="145:23"><name pos:start="145:9" pos:end="145:14">RENAME</name><argument_list pos:start="145:15" pos:end="145:23">(<argument pos:start="145:16" pos:end="145:22"><expr pos:start="145:16" pos:end="145:22"><name pos:start="145:16" pos:end="145:22">palToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="145:24" pos:end="145:87">(<argument pos:start="145:25" pos:end="145:40"><expr pos:start="145:25" pos:end="145:40"><name pos:start="145:25" pos:end="145:40">formatConvBuffer</name></expr></argument>, <argument pos:start="145:43" pos:end="145:63"><expr pos:start="145:43" pos:end="145:63"><name pos:start="145:43" pos:end="145:58">formatConvBuffer</name><operator pos:start="145:59" pos:end="145:59">+</operator><literal type="number" pos:start="145:60" pos:end="145:63">2048</literal></expr></argument>, <argument pos:start="145:66" pos:end="145:69"><expr pos:start="145:66" pos:end="145:69"><name pos:start="145:66" pos:end="145:69">src1</name></expr></argument>, <argument pos:start="145:72" pos:end="145:75"><expr pos:start="145:72" pos:end="145:75"><name pos:start="145:72" pos:end="145:75">src2</name></expr></argument>, <argument pos:start="145:78" pos:end="145:81"><expr pos:start="145:78" pos:end="145:81"><name pos:start="145:78" pos:end="145:81">srcW</name></expr></argument>, <argument pos:start="145:84" pos:end="145:86"><expr pos:start="145:84" pos:end="145:86"><name pos:start="145:84" pos:end="145:86">pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:31"><expr pos:start="147:9" pos:end="147:30"><name pos:start="147:9" pos:end="147:12">src1</name><operator pos:start="147:13" pos:end="147:13">=</operator> <name pos:start="147:15" pos:end="147:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:36"><expr pos:start="149:9" pos:end="149:35"><name pos:start="149:9" pos:end="149:12">src2</name><operator pos:start="149:13" pos:end="149:13">=</operator> <name pos:start="149:15" pos:end="149:30">formatConvBuffer</name><operator pos:start="149:31" pos:end="149:31">+</operator><literal type="number" pos:start="149:32" pos:end="149:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="155:1" pos:end="155:15">#<cpp:directive pos:start="155:2" pos:end="155:6">ifdef</cpp:directive> <name pos:start="155:8" pos:end="155:15">HAVE_MMX</name></cpp:ifdef>

    <comment type="line" pos:start="157:5" pos:end="157:91">// use the new MMX scaler if the mmx2 can't be used (it is faster than the x86 ASM one)</comment>

    <if_stmt pos:start="159:5" pos:end="473:5"><if pos:start="159:5" pos:end="473:5">if <condition pos:start="159:8" pos:end="162:0">(<expr pos:start="159:9" pos:end="159:54"><operator pos:start="159:9" pos:end="159:9">!</operator><operator pos:start="159:10" pos:end="159:10">(</operator><name pos:start="159:11" pos:end="159:15">flags</name><operator pos:start="159:16" pos:end="159:16">&amp;</operator><name pos:start="159:17" pos:end="159:33">SWS_FAST_BILINEAR</name><operator pos:start="159:34" pos:end="159:34">)</operator> <operator pos:start="159:36" pos:end="159:37">||</operator> <operator pos:start="159:39" pos:end="159:39">(</operator><operator pos:start="159:40" pos:end="159:40">!</operator><name pos:start="159:41" pos:end="159:53">canMMX2BeUsed</name><operator pos:start="159:54" pos:end="159:54">)</operator></expr>)</condition><block type="pseudo" pos:start="163:5" pos:end="473:5"><block_content pos:start="163:5" pos:end="473:5">

<cpp:else pos:start="161:1" pos:end="161:5">#<cpp:directive pos:start="161:2" pos:end="161:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="163:5" pos:end="473:5"><if pos:start="163:5" pos:end="173:5">if <condition pos:start="163:8" pos:end="166:0">(<expr pos:start="163:9" pos:end="163:34"><operator pos:start="163:9" pos:end="163:9">!</operator><operator pos:start="163:10" pos:end="163:10">(</operator><name pos:start="163:11" pos:end="163:15">flags</name><operator pos:start="163:16" pos:end="163:16">&amp;</operator><name pos:start="163:17" pos:end="163:33">SWS_FAST_BILINEAR</name><operator pos:start="163:34" pos:end="163:34">)</operator></expr>)</condition>

<cpp:endif pos:start="165:1" pos:end="165:6">#<cpp:directive pos:start="165:2" pos:end="165:6">endif</cpp:directive></cpp:endif>

    <block pos:start="167:5" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:104">

        <function_decl pos:start="169:9" pos:end="169:104"><type pos:start="169:9" pos:end="169:14"><name pos:start="169:9" pos:end="169:14">RENAME</name></type>(<name pos:start="169:16" pos:end="169:21">hScale</name>)<parameter_list pos:start="169:23" pos:end="169:103">(<parameter pos:start="169:24" pos:end="169:26"><decl pos:start="169:24" pos:end="169:26"><type pos:start="169:24" pos:end="169:26"><name pos:start="169:24" pos:end="169:26">dst</name></type></decl></parameter>     , <parameter pos:start="169:34" pos:end="169:41"><decl pos:start="169:34" pos:end="169:41"><type pos:start="169:34" pos:end="169:41"><name pos:start="169:34" pos:end="169:41">dstWidth</name></type></decl></parameter>, <parameter pos:start="169:44" pos:end="169:47"><decl pos:start="169:44" pos:end="169:47"><type pos:start="169:44" pos:end="169:47"><name pos:start="169:44" pos:end="169:47">src1</name></type></decl></parameter>, <parameter pos:start="169:50" pos:end="169:53"><decl pos:start="169:50" pos:end="169:53"><type pos:start="169:50" pos:end="169:53"><name pos:start="169:50" pos:end="169:53">srcW</name></type></decl></parameter>, <parameter pos:start="169:56" pos:end="169:59"><decl pos:start="169:56" pos:end="169:59"><type pos:start="169:56" pos:end="169:59"><name pos:start="169:56" pos:end="169:59">xInc</name></type></decl></parameter>, <parameter pos:start="169:62" pos:end="169:71"><decl pos:start="169:62" pos:end="169:71"><type pos:start="169:62" pos:end="169:71"><name pos:start="169:62" pos:end="169:71">hChrFilter</name></type></decl></parameter>, <parameter pos:start="169:74" pos:end="169:86"><decl pos:start="169:74" pos:end="169:86"><type pos:start="169:74" pos:end="169:86"><name pos:start="169:74" pos:end="169:86">hChrFilterPos</name></type></decl></parameter>, <parameter pos:start="169:89" pos:end="169:102"><decl pos:start="169:89" pos:end="169:102"><type pos:start="169:89" pos:end="169:102"><name pos:start="169:89" pos:end="169:102">hChrFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="171:9" pos:end="171:104"><expr pos:start="171:9" pos:end="171:103"><call pos:start="171:9" pos:end="171:103"><call pos:start="171:9" pos:end="171:22"><name pos:start="171:9" pos:end="171:14">RENAME</name><argument_list pos:start="171:15" pos:end="171:22">(<argument pos:start="171:16" pos:end="171:21"><expr pos:start="171:16" pos:end="171:21"><name pos:start="171:16" pos:end="171:21">hScale</name></expr></argument>)</argument_list></call><argument_list pos:start="171:23" pos:end="171:103">(<argument pos:start="171:24" pos:end="171:31"><expr pos:start="171:24" pos:end="171:31"><name pos:start="171:24" pos:end="171:26">dst</name><operator pos:start="171:27" pos:end="171:27">+</operator><literal type="number" pos:start="171:28" pos:end="171:31">2048</literal></expr></argument>, <argument pos:start="171:34" pos:end="171:41"><expr pos:start="171:34" pos:end="171:41"><name pos:start="171:34" pos:end="171:41">dstWidth</name></expr></argument>, <argument pos:start="171:44" pos:end="171:47"><expr pos:start="171:44" pos:end="171:47"><name pos:start="171:44" pos:end="171:47">src2</name></expr></argument>, <argument pos:start="171:50" pos:end="171:53"><expr pos:start="171:50" pos:end="171:53"><name pos:start="171:50" pos:end="171:53">srcW</name></expr></argument>, <argument pos:start="171:56" pos:end="171:59"><expr pos:start="171:56" pos:end="171:59"><name pos:start="171:56" pos:end="171:59">xInc</name></expr></argument>, <argument pos:start="171:62" pos:end="171:71"><expr pos:start="171:62" pos:end="171:71"><name pos:start="171:62" pos:end="171:71">hChrFilter</name></expr></argument>, <argument pos:start="171:74" pos:end="171:86"><expr pos:start="171:74" pos:end="171:86"><name pos:start="171:74" pos:end="171:86">hChrFilterPos</name></expr></argument>, <argument pos:start="171:89" pos:end="171:102"><expr pos:start="171:89" pos:end="171:102"><name pos:start="171:89" pos:end="171:102">hChrFilterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="175:5" pos:end="473:5">else <comment type="line" pos:start="175:10" pos:end="175:50">// Fast Bilinear upscale / crap downscale</comment>

    <block pos:start="177:5" pos:end="473:5">{<block_content pos:start="183:9" pos:end="472:0">

<cpp:if pos:start="179:1" pos:end="179:21">#<cpp:directive pos:start="179:2" pos:end="179:3">if</cpp:directive> <expr pos:start="179:5" pos:end="179:21"><call pos:start="179:5" pos:end="179:21"><name pos:start="179:5" pos:end="179:11">defined</name><argument_list pos:start="179:12" pos:end="179:21">(<argument pos:start="179:13" pos:end="179:20"><expr pos:start="179:13" pos:end="179:20"><name pos:start="179:13" pos:end="179:20">ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="181:1" pos:end="181:16">#<cpp:directive pos:start="181:2" pos:end="181:6">ifdef</cpp:directive> <name pos:start="181:8" pos:end="181:16">HAVE_MMX2</name></cpp:ifdef>

        <decl_stmt pos:start="183:9" pos:end="186:0"><decl pos:start="183:9" pos:end="183:13"><type pos:start="183:9" pos:end="183:11"><name pos:start="183:9" pos:end="183:11">int</name></type> <name pos:start="183:13" pos:end="183:13">i</name></decl>;</decl_stmt>

<cpp:if pos:start="185:1" pos:end="185:16">#<cpp:directive pos:start="185:2" pos:end="185:3">if</cpp:directive> <expr pos:start="185:5" pos:end="185:16"><call pos:start="185:5" pos:end="185:16"><name pos:start="185:5" pos:end="185:11">defined</name><argument_list pos:start="185:12" pos:end="185:16">(<argument pos:start="185:13" pos:end="185:15"><expr pos:start="185:13" pos:end="185:15"><name pos:start="185:13" pos:end="185:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="187:9" pos:end="190:0"><decl pos:start="187:9" pos:end="187:52"><type pos:start="187:9" pos:end="187:24"><name pos:start="187:9" pos:end="187:16">uint64_t</name> <name pos:start="187:18" pos:end="187:24">ebxsave</name></type> <name pos:start="187:26" pos:end="187:38">__attribute__</name><argument_list pos:start="187:39" pos:end="187:52">(<argument pos:start="187:40" pos:end="187:51"><expr pos:start="187:40" pos:end="187:51"><operator pos:start="187:40" pos:end="187:40">(</operator><call pos:start="187:41" pos:end="187:50"><name pos:start="187:41" pos:end="187:47">aligned</name><argument_list pos:start="187:48" pos:end="187:50">(<argument pos:start="187:49" pos:end="187:49"><expr pos:start="187:49" pos:end="187:49"><literal type="number" pos:start="187:49" pos:end="187:49">8</literal></expr></argument>)</argument_list></call><operator pos:start="187:51" pos:end="187:51">)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="191:9" pos:end="442:0"><if pos:start="191:9" pos:end="337:9">if <condition pos:start="191:12" pos:end="191:26">(<expr pos:start="191:13" pos:end="191:25"><name pos:start="191:13" pos:end="191:25">canMMX2BeUsed</name></expr>)</condition>

        <block pos:start="193:9" pos:end="337:9">{<block_content pos:start="195:13" pos:end="335:13">

            <asm pos:start="195:13" pos:end="323:14">asm <specifier pos:start="195:17" pos:end="195:24">volatile</specifier>(

<cpp:if pos:start="197:1" pos:end="197:16">#<cpp:directive pos:start="197:2" pos:end="197:3">if</cpp:directive> <expr pos:start="197:5" pos:end="197:16"><call pos:start="197:5" pos:end="197:16"><name pos:start="197:5" pos:end="197:11">defined</name><argument_list pos:start="197:12" pos:end="197:16">(<argument pos:start="197:13" pos:end="197:15"><expr pos:start="197:13" pos:end="197:15"><name pos:start="197:13" pos:end="197:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov          %%"REG_b", %6         \n\t"

<cpp:endif pos:start="201:1" pos:end="201:6">#<cpp:directive pos:start="201:2" pos:end="201:6">endif</cpp:directive></cpp:endif>

            "pxor             %%mm7, %%mm7      \n\t"

            "mov                 %0, %%"REG_c"  \n\t"

            "mov                 %1, %%"REG_D"  \n\t"

            "mov                 %2, %%"REG_d"  \n\t"

            "mov                 %3, %%"REG_b"  \n\t"

            "xor          %%"REG_a", %%"REG_a"  \n\t" <comment type="line" pos:start="213:55" pos:end="213:58">// i</comment>

            PREFETCH"   (%%"REG_c")             \n\t"

            PREFETCH" 32(%%"REG_c")             \n\t"

            PREFETCH" 64(%%"REG_c")             \n\t"



<cpp:ifdef pos:start="223:1" pos:end="223:18">#<cpp:directive pos:start="223:2" pos:end="223:6">ifdef</cpp:directive> <name pos:start="223:8" pos:end="223:18">ARCH_X86_64</name></cpp:ifdef>



<cpp:define pos:start="227:1" pos:end="243:5">#<cpp:directive pos:start="227:2" pos:end="227:7">define</cpp:directive> <cpp:macro pos:start="227:9" pos:end="227:21"><name pos:start="227:9" pos:end="227:21">FUNNY_UV_CODE</name></cpp:macro> \

            <cpp:value pos:start="229:13" pos:end="243:5">"movl       (%%"REG_b"), %%esi      \n\t"\

            "call               *%4             \n\t"\

            "movl (%%"REG_b", %%"REG_a"), %%esi \n\t"\

            "add          %%"REG_S", %%"REG_c"  \n\t"\

            "add          %%"REG_a", %%"REG_D"  \n\t"\

            "xor          %%"REG_a", %%"REG_a"  \n\t"\



#else</cpp:value></cpp:define>



<cpp:define pos:start="247:1" pos:end="261:6">#<cpp:directive pos:start="247:2" pos:end="247:7">define</cpp:directive> <cpp:macro pos:start="247:9" pos:end="247:21"><name pos:start="247:9" pos:end="247:21">FUNNY_UV_CODE</name></cpp:macro> \

            <cpp:value pos:start="249:13" pos:end="261:6">"movl       (%%"REG_b"), %%esi      \n\t"\

            "call               *%4             \n\t"\

            "addl (%%"REG_b", %%"REG_a"), %%"REG_c" \n\t"\

            "add          %%"REG_a", %%"REG_D"  \n\t"\

            "xor          %%"REG_a", %%"REG_a"  \n\t"\



#endif</cpp:value></cpp:define> <comment type="block" pos:start="261:8" pos:end="261:24">/* ARCH_X86_64 */</comment>



FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

            "xor          %%"REG_a", %%"REG_a"  \n\t" <comment type="line" pos:start="273:55" pos:end="273:58">// i</comment>

            "mov                 %5, %%"REG_c"  \n\t" <comment type="line" pos:start="275:55" pos:end="275:60">// src</comment>

            "mov                 %1, %%"REG_D"  \n\t" <comment type="line" pos:start="277:55" pos:end="277:61">// buf1</comment>

            "add              $4096, %%"REG_D"  \n\t"

            PREFETCH"   (%%"REG_c")             \n\t"

            PREFETCH" 32(%%"REG_c")             \n\t"

            PREFETCH" 64(%%"REG_c")             \n\t"



FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE



<cpp:if pos:start="299:1" pos:end="299:16">#<cpp:directive pos:start="299:2" pos:end="299:3">if</cpp:directive> <expr pos:start="299:5" pos:end="299:16"><call pos:start="299:5" pos:end="299:16"><name pos:start="299:5" pos:end="299:11">defined</name><argument_list pos:start="299:12" pos:end="299:16">(<argument pos:start="299:13" pos:end="299:15"><expr pos:start="299:13" pos:end="299:15"><name pos:start="299:13" pos:end="299:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov %6, %%"REG_b"    \n\t"

<cpp:endif pos:start="303:1" pos:end="303:6">#<cpp:directive pos:start="303:2" pos:end="303:6">endif</cpp:directive></cpp:endif>

            :: "m" (src1), "m" (dst), "m" (mmx2Filter), "m" (mmx2FilterPos),

            "m" (funnyUVCode), "m" (src2)

<cpp:if pos:start="309:1" pos:end="309:16">#<cpp:directive pos:start="309:2" pos:end="309:3">if</cpp:directive> <expr pos:start="309:5" pos:end="309:16"><call pos:start="309:5" pos:end="309:16"><name pos:start="309:5" pos:end="309:11">defined</name><argument_list pos:start="309:12" pos:end="309:16">(<argument pos:start="309:13" pos:end="309:15"><expr pos:start="309:13" pos:end="309:15"><name pos:start="309:13" pos:end="309:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            ,"m" (ebxsave)

<cpp:endif pos:start="313:1" pos:end="313:6">#<cpp:directive pos:start="313:2" pos:end="313:6">endif</cpp:directive></cpp:endif>

            : "%"REG_a, "%"REG_c, "%"REG_d, "%"REG_S, "%"REG_D

<cpp:if pos:start="317:1" pos:end="317:17">#<cpp:directive pos:start="317:2" pos:end="317:3">if</cpp:directive> <expr pos:start="317:5" pos:end="317:17"><operator pos:start="317:5" pos:end="317:5">!</operator><call pos:start="317:6" pos:end="317:17"><name pos:start="317:6" pos:end="317:12">defined</name><argument_list pos:start="317:13" pos:end="317:17">(<argument pos:start="317:14" pos:end="317:16"><expr pos:start="317:14" pos:end="317:16"><name pos:start="317:14" pos:end="317:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

             ,"%"REG_b

<cpp:endif pos:start="321:1" pos:end="321:6">#<cpp:directive pos:start="321:2" pos:end="321:6">endif</cpp:directive></cpp:endif>

            );</asm>

            <for pos:start="325:13" pos:end="335:13">for <control pos:start="325:17" pos:end="325:58">(<init pos:start="325:18" pos:end="325:30"><expr pos:start="325:18" pos:end="325:29"><name pos:start="325:18" pos:end="325:18">i</name><operator pos:start="325:19" pos:end="325:19">=</operator><name pos:start="325:20" pos:end="325:27">dstWidth</name><operator pos:start="325:28" pos:end="325:28">-</operator><literal type="number" pos:start="325:29" pos:end="325:29">1</literal></expr>;</init> <condition pos:start="325:32" pos:end="325:53"><expr pos:start="325:32" pos:end="325:52"><operator pos:start="325:32" pos:end="325:32">(</operator><name pos:start="325:33" pos:end="325:33">i</name><operator pos:start="325:34" pos:end="325:34">*</operator><name pos:start="325:35" pos:end="325:38">xInc</name><operator pos:start="325:39" pos:end="325:39">)</operator><operator pos:start="325:40" pos:end="325:41">&gt;&gt;</operator><literal type="number" pos:start="325:42" pos:end="325:43">16</literal> <operator pos:start="325:45" pos:end="325:46">&gt;=</operator><name pos:start="325:47" pos:end="325:50">srcW</name><operator pos:start="325:51" pos:end="325:51">-</operator><literal type="number" pos:start="325:52" pos:end="325:52">1</literal></expr>;</condition> <incr pos:start="325:55" pos:end="325:57"><expr pos:start="325:55" pos:end="325:57"><name pos:start="325:55" pos:end="325:55">i</name><operator pos:start="325:56" pos:end="325:57">--</operator></expr></incr>)</control>

            <block pos:start="327:13" pos:end="335:13">{<block_content pos:start="331:17" pos:end="333:47">

                <comment type="line" pos:start="329:17" pos:end="329:58">//printf("%d %d %d\n", dstWidth, i, srcW);</comment>

                <expr_stmt pos:start="331:17" pos:end="331:42"><expr pos:start="331:17" pos:end="331:41"><name pos:start="331:17" pos:end="331:22"><name pos:start="331:17" pos:end="331:19">dst</name><index pos:start="331:20" pos:end="331:22">[<expr pos:start="331:21" pos:end="331:21"><name pos:start="331:21" pos:end="331:21">i</name></expr>]</index></name> <operator pos:start="331:24" pos:end="331:24">=</operator> <name pos:start="331:26" pos:end="331:37"><name pos:start="331:26" pos:end="331:29">src1</name><index pos:start="331:30" pos:end="331:37">[<expr pos:start="331:31" pos:end="331:36"><name pos:start="331:31" pos:end="331:34">srcW</name><operator pos:start="331:35" pos:end="331:35">-</operator><literal type="number" pos:start="331:36" pos:end="331:36">1</literal></expr>]</index></name><operator pos:start="331:38" pos:end="331:38">*</operator><literal type="number" pos:start="331:39" pos:end="331:41">128</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="333:17" pos:end="333:47"><expr pos:start="333:17" pos:end="333:46"><name pos:start="333:17" pos:end="333:27"><name pos:start="333:17" pos:end="333:19">dst</name><index pos:start="333:20" pos:end="333:27">[<expr pos:start="333:21" pos:end="333:26"><name pos:start="333:21" pos:end="333:21">i</name><operator pos:start="333:22" pos:end="333:22">+</operator><literal type="number" pos:start="333:23" pos:end="333:26">2048</literal></expr>]</index></name> <operator pos:start="333:29" pos:end="333:29">=</operator> <name pos:start="333:31" pos:end="333:42"><name pos:start="333:31" pos:end="333:34">src2</name><index pos:start="333:35" pos:end="333:42">[<expr pos:start="333:36" pos:end="333:41"><name pos:start="333:36" pos:end="333:39">srcW</name><operator pos:start="333:40" pos:end="333:40">-</operator><literal type="number" pos:start="333:41" pos:end="333:41">1</literal></expr>]</index></name><operator pos:start="333:43" pos:end="333:43">*</operator><literal type="number" pos:start="333:44" pos:end="333:46">128</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <else pos:start="339:9" pos:end="442:0">else

        <block pos:start="341:9" pos:end="442:0">{<block_content pos:start="345:13" pos:end="436:0">

<cpp:endif pos:start="343:1" pos:end="343:6">#<cpp:directive pos:start="343:2" pos:end="343:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="343:8" pos:end="343:22">/* HAVE_MMX2 */</comment>

            <decl_stmt pos:start="345:13" pos:end="345:50"><decl pos:start="345:13" pos:end="345:49"><type pos:start="345:13" pos:end="345:16"><name pos:start="345:13" pos:end="345:16">long</name></type> <name pos:start="345:18" pos:end="345:27">xInc_shr16</name> <init pos:start="345:29" pos:end="345:49">= <expr pos:start="345:31" pos:end="345:49"><operator pos:start="345:31" pos:end="345:31">(</operator><name pos:start="345:32" pos:end="345:35">long</name><operator pos:start="345:36" pos:end="345:36">)</operator> <operator pos:start="345:38" pos:end="345:38">(</operator><name pos:start="345:39" pos:end="345:42">xInc</name> <operator pos:start="345:44" pos:end="345:45">&gt;&gt;</operator> <literal type="number" pos:start="345:47" pos:end="345:48">16</literal><operator pos:start="345:49" pos:end="345:49">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="347:13" pos:end="347:47"><decl pos:start="347:13" pos:end="347:46"><type pos:start="347:13" pos:end="347:20"><name pos:start="347:13" pos:end="347:20">uint16_t</name></type> <name pos:start="347:22" pos:end="347:30">xInc_mask</name> <init pos:start="347:32" pos:end="347:46">= <expr pos:start="347:34" pos:end="347:46"><name pos:start="347:34" pos:end="347:37">xInc</name> <operator pos:start="347:39" pos:end="347:39">&amp;</operator> <literal type="number" pos:start="347:41" pos:end="347:46">0xffff</literal></expr></init></decl>;</decl_stmt>

            <asm pos:start="349:13" pos:end="436:0">asm <specifier pos:start="349:17" pos:end="349:24">volatile</specifier>(

            "xor %%"REG_a", %%"REG_a"               \n\t" <comment type="line" pos:start="351:59" pos:end="351:62">// i</comment>

            "xor %%"REG_d", %%"REG_d"               \n\t" <comment type="line" pos:start="353:59" pos:end="353:63">// xx</comment>

            "xorl    %%ecx, %%ecx                   \n\t" <comment type="line" pos:start="355:59" pos:end="355:69">// 2*xalpha</comment>

            ASMALIGN(4)

            "1:                                     \n\t"

            "mov        %0, %%"REG_S"               \n\t"

            "movzbl  (%%"REG_S", %%"REG_d"), %%edi  \n\t" <comment type="line" pos:start="363:59" pos:end="363:67">//src[xx]</comment>

            "movzbl 1(%%"REG_S", %%"REG_d"), %%esi  \n\t" <comment type="line" pos:start="365:59" pos:end="365:69">//src[xx+1]</comment>

            "subl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="367:59" pos:end="367:79">//src[xx+1] - src[xx]</comment>

            "imull   %%ecx, %%esi                   \n\t" <comment type="line" pos:start="369:59" pos:end="369:90">//(src[xx+1] - src[xx])*2*xalpha</comment>

            "shll      $16, %%edi                   \n\t"

            "addl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="373:59" pos:end="373:101">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

            "mov        %1, %%"REG_D"               \n\t"

            "shrl       $9, %%esi                   \n\t"

            "movw     %%si, (%%"REG_D", %%"REG_a", 2)   \n\t"



            "movzbl    (%5, %%"REG_d"), %%edi       \n\t" <comment type="line" pos:start="383:59" pos:end="383:67">//src[xx]</comment>

            "movzbl   1(%5, %%"REG_d"), %%esi       \n\t" <comment type="line" pos:start="385:59" pos:end="385:69">//src[xx+1]</comment>

            "subl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="387:59" pos:end="387:79">//src[xx+1] - src[xx]</comment>

            "imull   %%ecx, %%esi                   \n\t" <comment type="line" pos:start="389:59" pos:end="389:90">//(src[xx+1] - src[xx])*2*xalpha</comment>

            "shll      $16, %%edi                   \n\t"

            "addl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="393:59" pos:end="393:101">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

            "mov        %1, %%"REG_D"               \n\t"

            "shrl       $9, %%esi                   \n\t"

            "movw     %%si, 4096(%%"REG_D", %%"REG_a", 2)   \n\t"



            "addw       %4, %%cx                    \n\t" <comment type="line" pos:start="403:59" pos:end="403:81">//2*xalpha += xInc&amp;0xFF</comment>

            "adc        %3, %%"REG_d"               \n\t" <comment type="line" pos:start="405:59" pos:end="405:80">//xx+= xInc&gt;&gt;8 + carry</comment>

            "add        $1, %%"REG_a"               \n\t"

            "cmp        %2, %%"REG_a"               \n\t"

            " jb        1b                          \n\t"



<comment type="block" pos:start="415:1" pos:end="417:40">/* GCC-3.3 makes MPlayer crash on IA-32 machines when using "g" operand here,

   which is needed to support GCC-4.0 */</comment>

<cpp:if pos:start="419:1" pos:end="419:86">#<cpp:directive pos:start="419:2" pos:end="419:3">if</cpp:directive> <expr pos:start="419:5" pos:end="419:86"><call pos:start="419:5" pos:end="419:24"><name pos:start="419:5" pos:end="419:11">defined</name><argument_list pos:start="419:12" pos:end="419:24">(<argument pos:start="419:13" pos:end="419:23"><expr pos:start="419:13" pos:end="419:23"><name pos:start="419:13" pos:end="419:23">ARCH_X86_64</name></expr></argument>)</argument_list></call> <operator pos:start="419:26" pos:end="419:27">&amp;&amp;</operator> <operator pos:start="419:29" pos:end="419:29">(</operator><operator pos:start="419:30" pos:end="419:30">(</operator><name pos:start="419:31" pos:end="419:38">__GNUC__</name> <operator pos:start="419:40" pos:end="419:40">&gt;</operator> <literal type="number" pos:start="419:42" pos:end="419:42">3</literal><operator pos:start="419:43" pos:end="419:43">)</operator> <operator pos:start="419:45" pos:end="419:46">||</operator> <operator pos:start="419:48" pos:end="419:48">(</operator><name pos:start="419:49" pos:end="419:56">__GNUC__</name> <operator pos:start="419:58" pos:end="419:59">==</operator> <literal type="number" pos:start="419:61" pos:end="419:61">3</literal> <operator pos:start="419:63" pos:end="419:64">&amp;&amp;</operator> <name pos:start="419:66" pos:end="419:79">__GNUC_MINOR__</name> <operator pos:start="419:81" pos:end="419:82">&gt;=</operator> <literal type="number" pos:start="419:84" pos:end="419:84">4</literal><operator pos:start="419:85" pos:end="419:85">)</operator><operator pos:start="419:86" pos:end="419:86">)</operator></expr></cpp:if>

            :: "m" (src1), "m" (dst), "g" ((long)dstWidth), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:else pos:start="423:1" pos:end="423:5">#<cpp:directive pos:start="423:2" pos:end="423:5">else</cpp:directive></cpp:else>

            :: "m" (src1), "m" (dst), "m" ((long)dstWidth), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:endif pos:start="427:1" pos:end="427:6">#<cpp:directive pos:start="427:2" pos:end="427:6">endif</cpp:directive></cpp:endif>

            "r" (src2)

            : "%"REG_a, "%"REG_d, "%ecx", "%"REG_D, "%esi"

            );</asm>

<cpp:ifdef pos:start="435:1" pos:end="435:16">#<cpp:directive pos:start="435:2" pos:end="435:6">ifdef</cpp:directive> <name pos:start="435:8" pos:end="435:16">HAVE_MMX2</name></cpp:ifdef>

        </block_content>}</block></else></if_stmt> <comment type="line" pos:start="437:11" pos:end="437:33">//if MMX2 can't be used</comment>

<cpp:endif pos:start="439:1" pos:end="439:6">#<cpp:directive pos:start="439:2" pos:end="439:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="441:1" pos:end="441:5">#<cpp:directive pos:start="441:2" pos:end="441:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="443:9" pos:end="443:14"><decl pos:start="443:9" pos:end="443:13"><type pos:start="443:9" pos:end="443:11"><name pos:start="443:9" pos:end="443:11">int</name></type> <name pos:start="443:13" pos:end="443:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="445:9" pos:end="445:28"><decl pos:start="445:9" pos:end="445:27"><type pos:start="445:9" pos:end="445:20"><name pos:start="445:9" pos:end="445:16">unsigned</name> <name pos:start="445:18" pos:end="445:20">int</name></type> <name pos:start="445:22" pos:end="445:25">xpos</name><init pos:start="445:26" pos:end="445:27">=<expr pos:start="445:27" pos:end="445:27"><literal type="number" pos:start="445:27" pos:end="445:27">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="447:9" pos:end="472:0">for <control pos:start="447:13" pos:end="447:32">(<init pos:start="447:14" pos:end="447:17"><expr pos:start="447:14" pos:end="447:16"><name pos:start="447:14" pos:end="447:14">i</name><operator pos:start="447:15" pos:end="447:15">=</operator><literal type="number" pos:start="447:16" pos:end="447:16">0</literal></expr>;</init><condition pos:start="447:18" pos:end="447:28"><expr pos:start="447:18" pos:end="447:27"><name pos:start="447:18" pos:end="447:18">i</name><operator pos:start="447:19" pos:end="447:19">&lt;</operator><name pos:start="447:20" pos:end="447:27">dstWidth</name></expr>;</condition><incr pos:start="447:29" pos:end="447:31"><expr pos:start="447:29" pos:end="447:31"><name pos:start="447:29" pos:end="447:29">i</name><operator pos:start="447:30" pos:end="447:31">++</operator></expr></incr>)</control>

        <block pos:start="449:9" pos:end="472:0">{<block_content pos:start="451:13" pos:end="467:23">

            <decl_stmt pos:start="451:13" pos:end="451:46"><decl pos:start="451:13" pos:end="451:45"><type pos:start="451:13" pos:end="451:33"><specifier pos:start="451:13" pos:end="451:20">register</specifier> <name pos:start="451:22" pos:end="451:29">unsigned</name> <name pos:start="451:31" pos:end="451:33">int</name></type> <name pos:start="451:35" pos:end="451:36">xx</name><init pos:start="451:37" pos:end="451:45">=<expr pos:start="451:38" pos:end="451:45"><name pos:start="451:38" pos:end="451:41">xpos</name><operator pos:start="451:42" pos:end="451:43">&gt;&gt;</operator><literal type="number" pos:start="451:44" pos:end="451:45">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="453:13" pos:end="453:58"><decl pos:start="453:13" pos:end="453:57"><type pos:start="453:13" pos:end="453:33"><specifier pos:start="453:13" pos:end="453:20">register</specifier> <name pos:start="453:22" pos:end="453:29">unsigned</name> <name pos:start="453:31" pos:end="453:33">int</name></type> <name pos:start="453:35" pos:end="453:40">xalpha</name><init pos:start="453:41" pos:end="453:57">=<expr pos:start="453:42" pos:end="453:57"><operator pos:start="453:42" pos:end="453:42">(</operator><name pos:start="453:43" pos:end="453:46">xpos</name><operator pos:start="453:47" pos:end="453:47">&amp;</operator><literal type="number" pos:start="453:48" pos:end="453:53">0xFFFF</literal><operator pos:start="453:54" pos:end="453:54">)</operator><operator pos:start="453:55" pos:end="453:56">&gt;&gt;</operator><literal type="number" pos:start="453:57" pos:end="453:57">9</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:61"><expr pos:start="455:13" pos:end="455:60"><name pos:start="455:13" pos:end="455:18"><name pos:start="455:13" pos:end="455:15">dst</name><index pos:start="455:16" pos:end="455:18">[<expr pos:start="455:17" pos:end="455:17"><name pos:start="455:17" pos:end="455:17">i</name></expr>]</index></name><operator pos:start="455:19" pos:end="455:19">=</operator><operator pos:start="455:20" pos:end="455:20">(</operator><name pos:start="455:21" pos:end="455:28"><name pos:start="455:21" pos:end="455:24">src1</name><index pos:start="455:25" pos:end="455:28">[<expr pos:start="455:26" pos:end="455:27"><name pos:start="455:26" pos:end="455:27">xx</name></expr>]</index></name><operator pos:start="455:29" pos:end="455:29">*</operator><operator pos:start="455:30" pos:end="455:30">(</operator><name pos:start="455:31" pos:end="455:36">xalpha</name><operator pos:start="455:37" pos:end="455:37">^</operator><literal type="number" pos:start="455:38" pos:end="455:40">127</literal><operator pos:start="455:41" pos:end="455:41">)</operator><operator pos:start="455:42" pos:end="455:42">+</operator><name pos:start="455:43" pos:end="455:52"><name pos:start="455:43" pos:end="455:46">src1</name><index pos:start="455:47" pos:end="455:52">[<expr pos:start="455:48" pos:end="455:51"><name pos:start="455:48" pos:end="455:49">xx</name><operator pos:start="455:50" pos:end="455:50">+</operator><literal type="number" pos:start="455:51" pos:end="455:51">1</literal></expr>]</index></name><operator pos:start="455:53" pos:end="455:53">*</operator><name pos:start="455:54" pos:end="455:59">xalpha</name><operator pos:start="455:60" pos:end="455:60">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:66"><expr pos:start="457:13" pos:end="457:65"><name pos:start="457:13" pos:end="457:23"><name pos:start="457:13" pos:end="457:15">dst</name><index pos:start="457:16" pos:end="457:23">[<expr pos:start="457:17" pos:end="457:22"><name pos:start="457:17" pos:end="457:17">i</name><operator pos:start="457:18" pos:end="457:18">+</operator><literal type="number" pos:start="457:19" pos:end="457:22">2048</literal></expr>]</index></name><operator pos:start="457:24" pos:end="457:24">=</operator><operator pos:start="457:25" pos:end="457:25">(</operator><name pos:start="457:26" pos:end="457:33"><name pos:start="457:26" pos:end="457:29">src2</name><index pos:start="457:30" pos:end="457:33">[<expr pos:start="457:31" pos:end="457:32"><name pos:start="457:31" pos:end="457:32">xx</name></expr>]</index></name><operator pos:start="457:34" pos:end="457:34">*</operator><operator pos:start="457:35" pos:end="457:35">(</operator><name pos:start="457:36" pos:end="457:41">xalpha</name><operator pos:start="457:42" pos:end="457:42">^</operator><literal type="number" pos:start="457:43" pos:end="457:45">127</literal><operator pos:start="457:46" pos:end="457:46">)</operator><operator pos:start="457:47" pos:end="457:47">+</operator><name pos:start="457:48" pos:end="457:57"><name pos:start="457:48" pos:end="457:51">src2</name><index pos:start="457:52" pos:end="457:57">[<expr pos:start="457:53" pos:end="457:56"><name pos:start="457:53" pos:end="457:54">xx</name><operator pos:start="457:55" pos:end="457:55">+</operator><literal type="number" pos:start="457:56" pos:end="457:56">1</literal></expr>]</index></name><operator pos:start="457:58" pos:end="457:58">*</operator><name pos:start="457:59" pos:end="457:64">xalpha</name><operator pos:start="457:65" pos:end="457:65">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="459:13" pos:end="465:14">/* slower

            dst[i]= (src1[xx]&lt;&lt;7) + (src1[xx+1] - src1[xx])*xalpha;

            dst[i+2048]=(src2[xx]&lt;&lt;7) + (src2[xx+1] - src2[xx])*xalpha;

            */</comment>

            <expr_stmt pos:start="467:13" pos:end="467:23"><expr pos:start="467:13" pos:end="467:22"><name pos:start="467:13" pos:end="467:16">xpos</name><operator pos:start="467:17" pos:end="467:18">+=</operator><name pos:start="467:19" pos:end="467:22">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:endif pos:start="471:1" pos:end="471:6">#<cpp:directive pos:start="471:2" pos:end="471:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="471:8" pos:end="471:30">/* defined(ARCH_X86) */</comment>

    </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
