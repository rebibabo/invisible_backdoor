<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20490.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">vfio_pci_write_config</name><parameter_list pos:start="1:34" pos:end="3:56">(<parameter pos:start="1:35" pos:end="1:49"><decl pos:start="1:35" pos:end="1:49"><type pos:start="1:35" pos:end="1:49"><name pos:start="1:35" pos:end="1:43">PCIDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">pdev</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:64">addr</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:42">uint32_t</name></type> <name pos:start="3:44" pos:end="3:46">val</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:55"><decl pos:start="3:49" pos:end="3:55"><type pos:start="3:49" pos:end="3:55"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:55">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:5">

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">VFIODevice</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">vdev</name> <init pos:start="7:22" pos:end="7:56">= <expr pos:start="7:24" pos:end="7:56"><call pos:start="7:24" pos:end="7:56"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:56">(<argument pos:start="7:34" pos:end="7:43"><expr pos:start="7:34" pos:end="7:43"><name pos:start="7:34" pos:end="7:43">VFIODevice</name></expr></argument>, <argument pos:start="7:46" pos:end="7:49"><expr pos:start="7:46" pos:end="7:49"><name pos:start="7:46" pos:end="7:49">pdev</name></expr></argument>, <argument pos:start="7:52" pos:end="7:55"><expr pos:start="7:52" pos:end="7:55"><name pos:start="7:52" pos:end="7:55">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:19">val_le</name> <init pos:start="9:21" pos:end="9:38">= <expr pos:start="9:23" pos:end="9:38"><call pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:33">cpu_to_le32</name><argument_list pos:start="9:34" pos:end="9:38">(<argument pos:start="9:35" pos:end="9:37"><expr pos:start="9:35" pos:end="9:37"><name pos:start="9:35" pos:end="9:37">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="17:49"><expr pos:start="13:5" pos:end="17:48"><call pos:start="13:5" pos:end="17:48"><name pos:start="13:5" pos:end="13:11">DPRINTF</name><argument_list pos:start="13:12" pos:end="17:48">(<argument pos:start="13:13" pos:end="13:60"><expr pos:start="13:13" pos:end="13:60"><literal type="string" pos:start="13:13" pos:end="13:60">"%s(%04x:%02x:%02x.%x, @0x%x, 0x%x, len=0x%x)\n"</literal></expr></argument>, <argument pos:start="13:63" pos:end="13:70"><expr pos:start="13:63" pos:end="13:70"><name pos:start="13:63" pos:end="13:70">__func__</name></expr></argument>,

            <argument pos:start="15:13" pos:end="15:29"><expr pos:start="15:13" pos:end="15:29"><name pos:start="15:13" pos:end="15:29"><name pos:start="15:13" pos:end="15:16">vdev</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:22">host</name><operator pos:start="15:23" pos:end="15:23">.</operator><name pos:start="15:24" pos:end="15:29">domain</name></name></expr></argument>, <argument pos:start="15:32" pos:end="15:45"><expr pos:start="15:32" pos:end="15:45"><name pos:start="15:32" pos:end="15:45"><name pos:start="15:32" pos:end="15:35">vdev</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:41">host</name><operator pos:start="15:42" pos:end="15:42">.</operator><name pos:start="15:43" pos:end="15:45">bus</name></name></expr></argument>, <argument pos:start="15:48" pos:end="15:62"><expr pos:start="15:48" pos:end="15:62"><name pos:start="15:48" pos:end="15:62"><name pos:start="15:48" pos:end="15:51">vdev</name><operator pos:start="15:52" pos:end="15:53">-&gt;</operator><name pos:start="15:54" pos:end="15:57">host</name><operator pos:start="15:58" pos:end="15:58">.</operator><name pos:start="15:59" pos:end="15:62">slot</name></name></expr></argument>,

            <argument pos:start="17:13" pos:end="17:31"><expr pos:start="17:13" pos:end="17:31"><name pos:start="17:13" pos:end="17:31"><name pos:start="17:13" pos:end="17:16">vdev</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:22">host</name><operator pos:start="17:23" pos:end="17:23">.</operator><name pos:start="17:24" pos:end="17:31">function</name></name></expr></argument>, <argument pos:start="17:34" pos:end="17:37"><expr pos:start="17:34" pos:end="17:37"><name pos:start="17:34" pos:end="17:37">addr</name></expr></argument>, <argument pos:start="17:40" pos:end="17:42"><expr pos:start="17:40" pos:end="17:42"><name pos:start="17:40" pos:end="17:42">val</name></expr></argument>, <argument pos:start="17:45" pos:end="17:47"><expr pos:start="17:45" pos:end="17:47"><name pos:start="17:45" pos:end="17:47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:73">/* Write everything to VFIO, let it filter out what we can't write */</comment>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:74">(<expr pos:start="23:9" pos:end="23:73"><call pos:start="23:9" pos:end="23:66"><name pos:start="23:9" pos:end="23:14">pwrite</name><argument_list pos:start="23:15" pos:end="23:66">(<argument pos:start="23:16" pos:end="23:23"><expr pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:19">vdev</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:23">fd</name></name></expr></argument>, <argument pos:start="23:26" pos:end="23:32"><expr pos:start="23:26" pos:end="23:32"><operator pos:start="23:26" pos:end="23:26">&amp;</operator><name pos:start="23:27" pos:end="23:32">val_le</name></expr></argument>, <argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><name pos:start="23:35" pos:end="23:37">len</name></expr></argument>, <argument pos:start="23:40" pos:end="23:65"><expr pos:start="23:40" pos:end="23:65"><name pos:start="23:40" pos:end="23:58"><name pos:start="23:40" pos:end="23:43">vdev</name><operator pos:start="23:44" pos:end="23:45">-&gt;</operator><name pos:start="23:46" pos:end="23:58">config_offset</name></name> <operator pos:start="23:60" pos:end="23:60">+</operator> <name pos:start="23:62" pos:end="23:65">addr</name></expr></argument>)</argument_list></call> <operator pos:start="23:68" pos:end="23:69">!=</operator> <name pos:start="23:71" pos:end="23:73">len</name></expr>)</condition> <block pos:start="23:76" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:75">

        <expr_stmt pos:start="25:9" pos:end="29:75"><expr pos:start="25:9" pos:end="29:74"><call pos:start="25:9" pos:end="29:74"><name pos:start="25:9" pos:end="25:20">error_report</name><argument_list pos:start="25:21" pos:end="29:74">(<argument pos:start="25:22" pos:end="25:73"><expr pos:start="25:22" pos:end="25:73"><literal type="string" pos:start="25:22" pos:end="25:73">"%s(%04x:%02x:%02x.%x, 0x%x, 0x%x, 0x%x) failed: %m"</literal></expr></argument>,

                     <argument pos:start="27:22" pos:end="27:29"><expr pos:start="27:22" pos:end="27:29"><name pos:start="27:22" pos:end="27:29">__func__</name></expr></argument>, <argument pos:start="27:32" pos:end="27:48"><expr pos:start="27:32" pos:end="27:48"><name pos:start="27:32" pos:end="27:48"><name pos:start="27:32" pos:end="27:35">vdev</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:41">host</name><operator pos:start="27:42" pos:end="27:42">.</operator><name pos:start="27:43" pos:end="27:48">domain</name></name></expr></argument>, <argument pos:start="27:51" pos:end="27:64"><expr pos:start="27:51" pos:end="27:64"><name pos:start="27:51" pos:end="27:64"><name pos:start="27:51" pos:end="27:54">vdev</name><operator pos:start="27:55" pos:end="27:56">-&gt;</operator><name pos:start="27:57" pos:end="27:60">host</name><operator pos:start="27:61" pos:end="27:61">.</operator><name pos:start="27:62" pos:end="27:64">bus</name></name></expr></argument>,

                     <argument pos:start="29:22" pos:end="29:36"><expr pos:start="29:22" pos:end="29:36"><name pos:start="29:22" pos:end="29:36"><name pos:start="29:22" pos:end="29:25">vdev</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:31">host</name><operator pos:start="29:32" pos:end="29:32">.</operator><name pos:start="29:33" pos:end="29:36">slot</name></name></expr></argument>, <argument pos:start="29:39" pos:end="29:57"><expr pos:start="29:39" pos:end="29:57"><name pos:start="29:39" pos:end="29:57"><name pos:start="29:39" pos:end="29:42">vdev</name><operator pos:start="29:43" pos:end="29:44">-&gt;</operator><name pos:start="29:45" pos:end="29:48">host</name><operator pos:start="29:49" pos:end="29:49">.</operator><name pos:start="29:50" pos:end="29:57">function</name></name></expr></argument>, <argument pos:start="29:60" pos:end="29:63"><expr pos:start="29:60" pos:end="29:63"><name pos:start="29:60" pos:end="29:63">addr</name></expr></argument>, <argument pos:start="29:66" pos:end="29:68"><expr pos:start="29:66" pos:end="29:68"><name pos:start="29:66" pos:end="29:68">val</name></expr></argument>, <argument pos:start="29:71" pos:end="29:73"><expr pos:start="29:71" pos:end="29:73"><name pos:start="29:71" pos:end="29:73">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:49">/* Write standard header bits to emulation */</comment>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:38">(<expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:12">addr</name> <operator pos:start="37:14" pos:end="37:14">&lt;</operator> <name pos:start="37:16" pos:end="37:37">PCI_CONFIG_HEADER_SIZE</name></expr>)</condition> <block pos:start="37:40" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:15">

        <expr_stmt pos:start="39:9" pos:end="39:55"><expr pos:start="39:9" pos:end="39:54"><call pos:start="39:9" pos:end="39:54"><name pos:start="39:9" pos:end="39:32">pci_default_write_config</name><argument_list pos:start="39:33" pos:end="39:54">(<argument pos:start="39:34" pos:end="39:37"><expr pos:start="39:34" pos:end="39:37"><name pos:start="39:34" pos:end="39:37">pdev</name></expr></argument>, <argument pos:start="39:40" pos:end="39:43"><expr pos:start="39:40" pos:end="39:43"><name pos:start="39:40" pos:end="39:43">addr</name></expr></argument>, <argument pos:start="39:46" pos:end="39:48"><expr pos:start="39:46" pos:end="39:48"><name pos:start="39:46" pos:end="39:48">val</name></expr></argument>, <argument pos:start="39:51" pos:end="39:53"><expr pos:start="39:51" pos:end="39:53"><name pos:start="39:51" pos:end="39:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:38">/* MSI/MSI-X Enabling/Disabling */</comment>

    <if_stmt pos:start="49:5" pos:end="75:5"><if pos:start="49:5" pos:end="75:5">if <condition pos:start="49:8" pos:end="51:69">(<expr pos:start="49:9" pos:end="51:68"><name pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:12">pdev</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:25">cap_present</name></name> <operator pos:start="49:27" pos:end="49:27">&amp;</operator> <name pos:start="49:29" pos:end="49:44">QEMU_PCI_CAP_MSI</name> <operator pos:start="49:46" pos:end="49:47">&amp;&amp;</operator>

        <call pos:start="51:9" pos:end="51:68"><name pos:start="51:9" pos:end="51:22">ranges_overlap</name><argument_list pos:start="51:23" pos:end="51:68">(<argument pos:start="51:24" pos:end="51:27"><expr pos:start="51:24" pos:end="51:27"><name pos:start="51:24" pos:end="51:27">addr</name></expr></argument>, <argument pos:start="51:30" pos:end="51:32"><expr pos:start="51:30" pos:end="51:32"><name pos:start="51:30" pos:end="51:32">len</name></expr></argument>, <argument pos:start="51:35" pos:end="51:47"><expr pos:start="51:35" pos:end="51:47"><name pos:start="51:35" pos:end="51:47"><name pos:start="51:35" pos:end="51:38">pdev</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:47">msi_cap</name></name></expr></argument>, <argument pos:start="51:50" pos:end="51:67"><expr pos:start="51:50" pos:end="51:67"><name pos:start="51:50" pos:end="51:67"><name pos:start="51:50" pos:end="51:53">vdev</name><operator pos:start="51:54" pos:end="51:55">-&gt;</operator><name pos:start="51:56" pos:end="51:67">msi_cap_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:71" pos:end="75:5">{<block_content pos:start="53:9" pos:end="73:9">

        <decl_stmt pos:start="53:9" pos:end="53:56"><decl pos:start="53:9" pos:end="53:22"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:22">is_enabled</name></decl>, <decl pos:start="53:25" pos:end="53:55"><type ref="prev" pos:start="53:9" pos:end="53:11"/><name pos:start="53:25" pos:end="53:35">was_enabled</name> <init pos:start="53:37" pos:end="53:55">= <expr pos:start="53:39" pos:end="53:55"><call pos:start="53:39" pos:end="53:55"><name pos:start="53:39" pos:end="53:49">msi_enabled</name><argument_list pos:start="53:50" pos:end="53:55">(<argument pos:start="53:51" pos:end="53:54"><expr pos:start="53:51" pos:end="53:54"><name pos:start="53:51" pos:end="53:54">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:55"><expr pos:start="57:9" pos:end="57:54"><call pos:start="57:9" pos:end="57:54"><name pos:start="57:9" pos:end="57:32">pci_default_write_config</name><argument_list pos:start="57:33" pos:end="57:54">(<argument pos:start="57:34" pos:end="57:37"><expr pos:start="57:34" pos:end="57:37"><name pos:start="57:34" pos:end="57:37">pdev</name></expr></argument>, <argument pos:start="57:40" pos:end="57:43"><expr pos:start="57:40" pos:end="57:43"><name pos:start="57:40" pos:end="57:43">addr</name></expr></argument>, <argument pos:start="57:46" pos:end="57:48"><expr pos:start="57:46" pos:end="57:48"><name pos:start="57:46" pos:end="57:48">val</name></expr></argument>, <argument pos:start="57:51" pos:end="57:53"><expr pos:start="57:51" pos:end="57:53"><name pos:start="57:51" pos:end="57:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:39"><expr pos:start="61:9" pos:end="61:38"><name pos:start="61:9" pos:end="61:18">is_enabled</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <call pos:start="61:22" pos:end="61:38"><name pos:start="61:22" pos:end="61:32">msi_enabled</name><argument_list pos:start="61:33" pos:end="61:38">(<argument pos:start="61:34" pos:end="61:37"><expr pos:start="61:34" pos:end="61:37"><name pos:start="61:34" pos:end="61:37">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:39">(<expr pos:start="65:13" pos:end="65:38"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:24">was_enabled</name> <operator pos:start="65:26" pos:end="65:27">&amp;&amp;</operator> <name pos:start="65:29" pos:end="65:38">is_enabled</name></expr>)</condition> <block pos:start="65:41" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:34">

            <expr_stmt pos:start="67:13" pos:end="67:34"><expr pos:start="67:13" pos:end="67:33"><call pos:start="67:13" pos:end="67:33"><name pos:start="67:13" pos:end="67:27">vfio_enable_msi</name><argument_list pos:start="67:28" pos:end="67:33">(<argument pos:start="67:29" pos:end="67:32"><expr pos:start="67:29" pos:end="67:32"><name pos:start="67:29" pos:end="67:32">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="69:11" pos:end="73:9">else if <condition pos:start="69:19" pos:end="69:46">(<expr pos:start="69:20" pos:end="69:45"><name pos:start="69:20" pos:end="69:30">was_enabled</name> <operator pos:start="69:32" pos:end="69:33">&amp;&amp;</operator> <operator pos:start="69:35" pos:end="69:35">!</operator><name pos:start="69:36" pos:end="69:45">is_enabled</name></expr>)</condition> <block pos:start="69:48" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:35">

            <expr_stmt pos:start="71:13" pos:end="71:35"><expr pos:start="71:13" pos:end="71:34"><call pos:start="71:13" pos:end="71:34"><name pos:start="71:13" pos:end="71:28">vfio_disable_msi</name><argument_list pos:start="71:29" pos:end="71:34">(<argument pos:start="71:30" pos:end="71:33"><expr pos:start="71:30" pos:end="71:33"><name pos:start="71:30" pos:end="71:33">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="105:5"><if pos:start="79:5" pos:end="105:5">if <condition pos:start="79:8" pos:end="81:67">(<expr pos:start="79:9" pos:end="81:66"><name pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:12">pdev</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:25">cap_present</name></name> <operator pos:start="79:27" pos:end="79:27">&amp;</operator> <name pos:start="79:29" pos:end="79:45">QEMU_PCI_CAP_MSIX</name> <operator pos:start="79:47" pos:end="79:48">&amp;&amp;</operator>

        <call pos:start="81:9" pos:end="81:66"><name pos:start="81:9" pos:end="81:22">ranges_overlap</name><argument_list pos:start="81:23" pos:end="81:66">(<argument pos:start="81:24" pos:end="81:27"><expr pos:start="81:24" pos:end="81:27"><name pos:start="81:24" pos:end="81:27">addr</name></expr></argument>, <argument pos:start="81:30" pos:end="81:32"><expr pos:start="81:30" pos:end="81:32"><name pos:start="81:30" pos:end="81:32">len</name></expr></argument>, <argument pos:start="81:35" pos:end="81:48"><expr pos:start="81:35" pos:end="81:48"><name pos:start="81:35" pos:end="81:48"><name pos:start="81:35" pos:end="81:38">pdev</name><operator pos:start="81:39" pos:end="81:40">-&gt;</operator><name pos:start="81:41" pos:end="81:48">msix_cap</name></name></expr></argument>, <argument pos:start="81:51" pos:end="81:65"><expr pos:start="81:51" pos:end="81:65"><name pos:start="81:51" pos:end="81:65">MSIX_CAP_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:69" pos:end="105:5">{<block_content pos:start="83:9" pos:end="103:9">

        <decl_stmt pos:start="83:9" pos:end="83:57"><decl pos:start="83:9" pos:end="83:22"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:22">is_enabled</name></decl>, <decl pos:start="83:25" pos:end="83:56"><type ref="prev" pos:start="83:9" pos:end="83:11"/><name pos:start="83:25" pos:end="83:35">was_enabled</name> <init pos:start="83:37" pos:end="83:56">= <expr pos:start="83:39" pos:end="83:56"><call pos:start="83:39" pos:end="83:56"><name pos:start="83:39" pos:end="83:50">msix_enabled</name><argument_list pos:start="83:51" pos:end="83:56">(<argument pos:start="83:52" pos:end="83:55"><expr pos:start="83:52" pos:end="83:55"><name pos:start="83:52" pos:end="83:55">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:55"><expr pos:start="87:9" pos:end="87:54"><call pos:start="87:9" pos:end="87:54"><name pos:start="87:9" pos:end="87:32">pci_default_write_config</name><argument_list pos:start="87:33" pos:end="87:54">(<argument pos:start="87:34" pos:end="87:37"><expr pos:start="87:34" pos:end="87:37"><name pos:start="87:34" pos:end="87:37">pdev</name></expr></argument>, <argument pos:start="87:40" pos:end="87:43"><expr pos:start="87:40" pos:end="87:43"><name pos:start="87:40" pos:end="87:43">addr</name></expr></argument>, <argument pos:start="87:46" pos:end="87:48"><expr pos:start="87:46" pos:end="87:48"><name pos:start="87:46" pos:end="87:48">val</name></expr></argument>, <argument pos:start="87:51" pos:end="87:53"><expr pos:start="87:51" pos:end="87:53"><name pos:start="87:51" pos:end="87:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:40"><expr pos:start="91:9" pos:end="91:39"><name pos:start="91:9" pos:end="91:18">is_enabled</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <call pos:start="91:22" pos:end="91:39"><name pos:start="91:22" pos:end="91:33">msix_enabled</name><argument_list pos:start="91:34" pos:end="91:39">(<argument pos:start="91:35" pos:end="91:38"><expr pos:start="91:35" pos:end="91:38"><name pos:start="91:35" pos:end="91:38">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="95:9" pos:end="103:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:39">(<expr pos:start="95:13" pos:end="95:38"><operator pos:start="95:13" pos:end="95:13">!</operator><name pos:start="95:14" pos:end="95:24">was_enabled</name> <operator pos:start="95:26" pos:end="95:27">&amp;&amp;</operator> <name pos:start="95:29" pos:end="95:38">is_enabled</name></expr>)</condition> <block pos:start="95:41" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:35">

            <expr_stmt pos:start="97:13" pos:end="97:35"><expr pos:start="97:13" pos:end="97:34"><call pos:start="97:13" pos:end="97:34"><name pos:start="97:13" pos:end="97:28">vfio_enable_msix</name><argument_list pos:start="97:29" pos:end="97:34">(<argument pos:start="97:30" pos:end="97:33"><expr pos:start="97:30" pos:end="97:33"><name pos:start="97:30" pos:end="97:33">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="99:11" pos:end="103:9">else if <condition pos:start="99:19" pos:end="99:46">(<expr pos:start="99:20" pos:end="99:45"><name pos:start="99:20" pos:end="99:30">was_enabled</name> <operator pos:start="99:32" pos:end="99:33">&amp;&amp;</operator> <operator pos:start="99:35" pos:end="99:35">!</operator><name pos:start="99:36" pos:end="99:45">is_enabled</name></expr>)</condition> <block pos:start="99:48" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:36">

            <expr_stmt pos:start="101:13" pos:end="101:36"><expr pos:start="101:13" pos:end="101:35"><call pos:start="101:13" pos:end="101:35"><name pos:start="101:13" pos:end="101:29">vfio_disable_msix</name><argument_list pos:start="101:30" pos:end="101:35">(<argument pos:start="101:31" pos:end="101:34"><expr pos:start="101:31" pos:end="101:34"><name pos:start="101:31" pos:end="101:34">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
