<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23741.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">inet_connect_opts</name><parameter_list pos:start="1:22" pos:end="1:51">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:43">Error</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier><modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="167:1">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">addrinfo</name></name></type> <name pos:start="5:21" pos:end="5:22">ai</name></decl>,<decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">res</name></decl>,<decl pos:start="5:29" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:20">port</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:34"><name pos:start="11:10" pos:end="11:14">uaddr</name><index pos:start="11:15" pos:end="11:34">[<expr pos:start="11:16" pos:end="11:33"><name pos:start="11:16" pos:end="11:31">INET6_ADDRSTRLEN</name><operator pos:start="11:32" pos:end="11:32">+</operator><literal type="number" pos:start="11:33" pos:end="11:33">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:14">uport</name><index pos:start="13:15" pos:end="13:18">[<expr pos:start="13:16" pos:end="13:17"><literal type="number" pos:start="13:16" pos:end="13:17">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">sock</name></decl>,<decl pos:start="15:14" pos:end="15:15"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:15">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:14">block</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:30"><expr pos:start="21:5" pos:end="21:29"><call pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:10">memset</name><argument_list pos:start="21:11" pos:end="21:29">(<argument pos:start="21:12" pos:end="21:14"><expr pos:start="21:12" pos:end="21:14"><operator pos:start="21:12" pos:end="21:12">&amp;</operator><name pos:start="21:13" pos:end="21:14">ai</name></expr></argument>,<argument pos:start="21:16" pos:end="21:16"><expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr></argument>, <argument pos:start="21:19" pos:end="21:28"><expr pos:start="21:19" pos:end="21:28"><sizeof pos:start="21:19" pos:end="21:28">sizeof<argument_list pos:start="21:25" pos:end="21:28">(<argument pos:start="21:26" pos:end="21:27"><expr pos:start="21:26" pos:end="21:27"><name pos:start="21:26" pos:end="21:27">ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:6">ai</name><operator pos:start="23:7" pos:end="23:7">.</operator><name pos:start="23:8" pos:end="23:15">ai_flags</name></name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:30">AI_CANONNAME</name> <operator pos:start="23:32" pos:end="23:32">|</operator> <name pos:start="23:34" pos:end="23:46">AI_ADDRCONFIG</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:6">ai</name><operator pos:start="25:7" pos:end="25:7">.</operator><name pos:start="25:8" pos:end="25:16">ai_family</name></name> <operator pos:start="25:18" pos:end="25:18">=</operator> <name pos:start="25:20" pos:end="25:28">PF_UNSPEC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:6">ai</name><operator pos:start="27:7" pos:end="27:7">.</operator><name pos:start="27:8" pos:end="27:18">ai_socktype</name></name> <operator pos:start="27:20" pos:end="27:20">=</operator> <name pos:start="27:22" pos:end="27:32">SOCK_STREAM</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:8">addr</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:37"><name pos:start="31:12" pos:end="31:23">qemu_opt_get</name><argument_list pos:start="31:24" pos:end="31:37">(<argument pos:start="31:25" pos:end="31:28"><expr pos:start="31:25" pos:end="31:28"><name pos:start="31:25" pos:end="31:28">opts</name></expr></argument>, <argument pos:start="31:31" pos:end="31:36"><expr pos:start="31:31" pos:end="31:36"><literal type="string" pos:start="31:31" pos:end="31:36">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:8">port</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:37"><name pos:start="33:12" pos:end="33:23">qemu_opt_get</name><argument_list pos:start="33:24" pos:end="33:37">(<argument pos:start="33:25" pos:end="33:28"><expr pos:start="33:25" pos:end="33:28"><name pos:start="33:25" pos:end="33:28">opts</name></expr></argument>, <argument pos:start="33:31" pos:end="33:36"><expr pos:start="33:31" pos:end="33:36"><literal type="string" pos:start="33:31" pos:end="33:36">"port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:48"><expr pos:start="35:5" pos:end="35:47"><name pos:start="35:5" pos:end="35:9">block</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:47"><name pos:start="35:13" pos:end="35:29">qemu_opt_get_bool</name><argument_list pos:start="35:30" pos:end="35:47">(<argument pos:start="35:31" pos:end="35:34"><expr pos:start="35:31" pos:end="35:34"><name pos:start="35:31" pos:end="35:34">opts</name></expr></argument>, <argument pos:start="35:37" pos:end="35:43"><expr pos:start="35:37" pos:end="35:43"><literal type="string" pos:start="35:37" pos:end="35:43">"block"</literal></expr></argument>, <argument pos:start="35:46" pos:end="35:46"><expr pos:start="35:46" pos:end="35:46"><literal type="number" pos:start="35:46" pos:end="35:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:37">(<expr pos:start="37:9" pos:end="37:36"><name pos:start="37:9" pos:end="37:12">addr</name> <operator pos:start="37:14" pos:end="37:15">==</operator> <name pos:start="37:17" pos:end="37:20">NULL</name> <operator pos:start="37:22" pos:end="37:23">||</operator> <name pos:start="37:25" pos:end="37:28">port</name> <operator pos:start="37:30" pos:end="37:31">==</operator> <name pos:start="37:33" pos:end="37:36">NULL</name></expr>)</condition> <block pos:start="37:39" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:18">

        <expr_stmt pos:start="39:9" pos:end="39:74"><expr pos:start="39:9" pos:end="39:73"><call pos:start="39:9" pos:end="39:73"><name pos:start="39:9" pos:end="39:15">fprintf</name><argument_list pos:start="39:16" pos:end="39:73">(<argument pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:22">stderr</name></expr></argument>, <argument pos:start="39:25" pos:end="39:72"><expr pos:start="39:25" pos:end="39:72"><literal type="string" pos:start="39:25" pos:end="39:72">"inet_connect: host and/or port not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:51"><expr pos:start="41:9" pos:end="41:50"><call pos:start="41:9" pos:end="41:50"><name pos:start="41:9" pos:end="41:17">error_set</name><argument_list pos:start="41:18" pos:end="41:50">(<argument pos:start="41:19" pos:end="41:22"><expr pos:start="41:19" pos:end="41:22"><name pos:start="41:19" pos:end="41:22">errp</name></expr></argument>, <argument pos:start="41:25" pos:end="41:49"><expr pos:start="41:25" pos:end="41:49"><name pos:start="41:25" pos:end="41:49">QERR_SOCKET_CREATE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="51:31"><if pos:start="49:5" pos:end="51:31">if <condition pos:start="49:8" pos:end="49:43">(<expr pos:start="49:9" pos:end="49:42"><call pos:start="49:9" pos:end="49:42"><name pos:start="49:9" pos:end="49:25">qemu_opt_get_bool</name><argument_list pos:start="49:26" pos:end="49:42">(<argument pos:start="49:27" pos:end="49:30"><expr pos:start="49:27" pos:end="49:30"><name pos:start="49:27" pos:end="49:30">opts</name></expr></argument>, <argument pos:start="49:33" pos:end="49:38"><expr pos:start="49:33" pos:end="49:38"><literal type="string" pos:start="49:33" pos:end="49:38">"ipv4"</literal></expr></argument>, <argument pos:start="49:41" pos:end="49:41"><expr pos:start="49:41" pos:end="49:41"><literal type="number" pos:start="49:41" pos:end="49:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:31"><block_content pos:start="51:9" pos:end="51:31">

        <expr_stmt pos:start="51:9" pos:end="51:31"><expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:10">ai</name><operator pos:start="51:11" pos:end="51:11">.</operator><name pos:start="51:12" pos:end="51:20">ai_family</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:30">PF_INET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="55:32"><if pos:start="53:5" pos:end="55:32">if <condition pos:start="53:8" pos:end="53:43">(<expr pos:start="53:9" pos:end="53:42"><call pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:25">qemu_opt_get_bool</name><argument_list pos:start="53:26" pos:end="53:42">(<argument pos:start="53:27" pos:end="53:30"><expr pos:start="53:27" pos:end="53:30"><name pos:start="53:27" pos:end="53:30">opts</name></expr></argument>, <argument pos:start="53:33" pos:end="53:38"><expr pos:start="53:33" pos:end="53:38"><literal type="string" pos:start="53:33" pos:end="53:38">"ipv6"</literal></expr></argument>, <argument pos:start="53:41" pos:end="53:41"><expr pos:start="53:41" pos:end="53:41"><literal type="number" pos:start="53:41" pos:end="53:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:32"><block_content pos:start="55:9" pos:end="55:32">

        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:10">ai</name><operator pos:start="55:11" pos:end="55:11">.</operator><name pos:start="55:12" pos:end="55:20">ai_family</name></name> <operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:31">PF_INET6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:16">/* lookup */</comment>

    <if_stmt pos:start="61:5" pos:end="71:5"><if pos:start="61:5" pos:end="71:5">if <condition pos:start="61:8" pos:end="61:55">(<expr pos:start="61:9" pos:end="61:54"><literal type="number" pos:start="61:9" pos:end="61:9">0</literal> <operator pos:start="61:11" pos:end="61:12">!=</operator> <operator pos:start="61:14" pos:end="61:14">(</operator><name pos:start="61:15" pos:end="61:16">rc</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:53"><name pos:start="61:20" pos:end="61:30">getaddrinfo</name><argument_list pos:start="61:31" pos:end="61:53">(<argument pos:start="61:32" pos:end="61:35"><expr pos:start="61:32" pos:end="61:35"><name pos:start="61:32" pos:end="61:35">addr</name></expr></argument>, <argument pos:start="61:38" pos:end="61:41"><expr pos:start="61:38" pos:end="61:41"><name pos:start="61:38" pos:end="61:41">port</name></expr></argument>, <argument pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><operator pos:start="61:44" pos:end="61:44">&amp;</operator><name pos:start="61:45" pos:end="61:46">ai</name></expr></argument>, <argument pos:start="61:49" pos:end="61:52"><expr pos:start="61:49" pos:end="61:52"><operator pos:start="61:49" pos:end="61:49">&amp;</operator><name pos:start="61:50" pos:end="61:52">res</name></expr></argument>)</argument_list></call><operator pos:start="61:54" pos:end="61:54">)</operator></expr>)</condition> <block pos:start="61:57" pos:end="71:5">{<block_content pos:start="63:9" pos:end="69:18">

        <expr_stmt pos:start="63:9" pos:end="65:34"><expr pos:start="63:9" pos:end="65:33"><call pos:start="63:9" pos:end="65:33"><name pos:start="63:9" pos:end="63:15">fprintf</name><argument_list pos:start="63:16" pos:end="65:33">(<argument pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:22">stderr</name></expr></argument>,<argument pos:start="63:24" pos:end="63:49"><expr pos:start="63:24" pos:end="63:49"><literal type="string" pos:start="63:24" pos:end="63:49">"getaddrinfo(%s,%s): %s\n"</literal></expr></argument>, <argument pos:start="63:52" pos:end="63:55"><expr pos:start="63:52" pos:end="63:55"><name pos:start="63:52" pos:end="63:55">addr</name></expr></argument>, <argument pos:start="63:58" pos:end="63:61"><expr pos:start="63:58" pos:end="63:61"><name pos:start="63:58" pos:end="63:61">port</name></expr></argument>,

                <argument pos:start="65:17" pos:end="65:32"><expr pos:start="65:17" pos:end="65:32"><call pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:28">gai_strerror</name><argument_list pos:start="65:29" pos:end="65:32">(<argument pos:start="65:30" pos:end="65:31"><expr pos:start="65:30" pos:end="65:31"><name pos:start="65:30" pos:end="65:31">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><call pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:17">error_set</name><argument_list pos:start="67:18" pos:end="67:50">(<argument pos:start="67:19" pos:end="67:22"><expr pos:start="67:19" pos:end="67:22"><name pos:start="67:19" pos:end="67:22">errp</name></expr></argument>, <argument pos:start="67:25" pos:end="67:49"><expr pos:start="67:25" pos:end="67:49"><name pos:start="67:25" pos:end="67:49">QERR_SOCKET_CREATE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="75:5" pos:end="167:1">for <control pos:start="75:9" pos:end="75:44">(<init pos:start="75:10" pos:end="75:17"><expr pos:start="75:10" pos:end="75:16"><name pos:start="75:10" pos:end="75:10">e</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:16">res</name></expr>;</init> <condition pos:start="75:19" pos:end="75:28"><expr pos:start="75:19" pos:end="75:27"><name pos:start="75:19" pos:end="75:19">e</name> <operator pos:start="75:21" pos:end="75:22">!=</operator> <name pos:start="75:24" pos:end="75:27">NULL</name></expr>;</condition> <incr pos:start="75:30" pos:end="75:43"><expr pos:start="75:30" pos:end="75:43"><name pos:start="75:30" pos:end="75:30">e</name> <operator pos:start="75:32" pos:end="75:32">=</operator> <name pos:start="75:34" pos:end="75:43"><name pos:start="75:34" pos:end="75:34">e</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:43">ai_next</name></name></expr></incr>)</control> <block pos:start="75:46" pos:end="167:1">{<block_content pos:start="77:9" pos:end="165:14">

        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="81:66">(<expr pos:start="77:13" pos:end="81:65"><call pos:start="77:13" pos:end="81:60"><name pos:start="77:13" pos:end="77:23">getnameinfo</name><argument_list pos:start="77:24" pos:end="81:60">(<argument pos:start="77:25" pos:end="77:52"><expr pos:start="77:25" pos:end="77:52"><operator pos:start="77:25" pos:end="77:25">(</operator>struct <name pos:start="77:33" pos:end="77:40">sockaddr</name><operator pos:start="77:41" pos:end="77:41">*</operator><operator pos:start="77:42" pos:end="77:42">)</operator><name pos:start="77:43" pos:end="77:52"><name pos:start="77:43" pos:end="77:43">e</name><operator pos:start="77:44" pos:end="77:45">-&gt;</operator><name pos:start="77:46" pos:end="77:52">ai_addr</name></name></expr></argument>,<argument pos:start="77:54" pos:end="77:66"><expr pos:start="77:54" pos:end="77:66"><name pos:start="77:54" pos:end="77:66"><name pos:start="77:54" pos:end="77:54">e</name><operator pos:start="77:55" pos:end="77:56">-&gt;</operator><name pos:start="77:57" pos:end="77:66">ai_addrlen</name></name></expr></argument>,

                            <argument pos:start="79:29" pos:end="79:33"><expr pos:start="79:29" pos:end="79:33"><name pos:start="79:29" pos:end="79:33">uaddr</name></expr></argument>,<argument pos:start="79:35" pos:end="79:50"><expr pos:start="79:35" pos:end="79:50"><name pos:start="79:35" pos:end="79:50">INET6_ADDRSTRLEN</name></expr></argument>,<argument pos:start="79:52" pos:end="79:56"><expr pos:start="79:52" pos:end="79:56"><name pos:start="79:52" pos:end="79:56">uport</name></expr></argument>,<argument pos:start="79:58" pos:end="79:59"><expr pos:start="79:58" pos:end="79:59"><literal type="number" pos:start="79:58" pos:end="79:59">32</literal></expr></argument>,

                            <argument pos:start="81:29" pos:end="81:59"><expr pos:start="81:29" pos:end="81:59"><name pos:start="81:29" pos:end="81:42">NI_NUMERICHOST</name> <operator pos:start="81:44" pos:end="81:44">|</operator> <name pos:start="81:46" pos:end="81:59">NI_NUMERICSERV</name></expr></argument>)</argument_list></call> <operator pos:start="81:62" pos:end="81:63">!=</operator> <literal type="number" pos:start="81:65" pos:end="81:65">0</literal></expr>)</condition> <block pos:start="81:68" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:21">

            <expr_stmt pos:start="83:13" pos:end="83:68"><expr pos:start="83:13" pos:end="83:67"><call pos:start="83:13" pos:end="83:67"><name pos:start="83:13" pos:end="83:19">fprintf</name><argument_list pos:start="83:20" pos:end="83:67">(<argument pos:start="83:21" pos:end="83:26"><expr pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:26">stderr</name></expr></argument>,<argument pos:start="83:28" pos:end="83:52"><expr pos:start="83:28" pos:end="83:52"><literal type="string" pos:start="83:28" pos:end="83:52">"%s: getnameinfo: oops\n"</literal></expr></argument>, <argument pos:start="83:55" pos:end="83:66"><expr pos:start="83:55" pos:end="83:66"><name pos:start="83:55" pos:end="83:66">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="85:13" pos:end="85:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:73"><expr pos:start="89:9" pos:end="89:72"><name pos:start="89:9" pos:end="89:12">sock</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <call pos:start="89:16" pos:end="89:72"><name pos:start="89:16" pos:end="89:26">qemu_socket</name><argument_list pos:start="89:27" pos:end="89:72">(<argument pos:start="89:28" pos:end="89:39"><expr pos:start="89:28" pos:end="89:39"><name pos:start="89:28" pos:end="89:39"><name pos:start="89:28" pos:end="89:28">e</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:39">ai_family</name></name></expr></argument>, <argument pos:start="89:42" pos:end="89:55"><expr pos:start="89:42" pos:end="89:55"><name pos:start="89:42" pos:end="89:55"><name pos:start="89:42" pos:end="89:42">e</name><operator pos:start="89:43" pos:end="89:44">-&gt;</operator><name pos:start="89:45" pos:end="89:55">ai_socktype</name></name></expr></argument>, <argument pos:start="89:58" pos:end="89:71"><expr pos:start="89:58" pos:end="89:71"><name pos:start="89:58" pos:end="89:71"><name pos:start="89:58" pos:end="89:58">e</name><operator pos:start="89:59" pos:end="89:60">-&gt;</operator><name pos:start="89:61" pos:end="89:71">ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="99:9"><if pos:start="91:9" pos:end="99:9">if <condition pos:start="91:12" pos:end="91:21">(<expr pos:start="91:13" pos:end="91:20"><name pos:start="91:13" pos:end="91:16">sock</name> <operator pos:start="91:18" pos:end="91:18">&lt;</operator> <literal type="number" pos:start="91:20" pos:end="91:20">0</literal></expr>)</condition> <block pos:start="91:23" pos:end="99:9">{<block_content pos:start="93:13" pos:end="97:21">

            <expr_stmt pos:start="93:13" pos:end="95:59"><expr pos:start="93:13" pos:end="95:58"><call pos:start="93:13" pos:end="95:58"><name pos:start="93:13" pos:end="93:19">fprintf</name><argument_list pos:start="93:20" pos:end="95:58">(<argument pos:start="93:21" pos:end="93:26"><expr pos:start="93:21" pos:end="93:26"><name pos:start="93:21" pos:end="93:26">stderr</name></expr></argument>,<argument pos:start="93:28" pos:end="93:49"><expr pos:start="93:28" pos:end="93:49"><literal type="string" pos:start="93:28" pos:end="93:49">"%s: socket(%s): %s\n"</literal></expr></argument>, <argument pos:start="93:52" pos:end="93:63"><expr pos:start="93:52" pos:end="93:63"><name pos:start="93:52" pos:end="93:63">__FUNCTION__</name></expr></argument>,

            <argument pos:start="95:13" pos:end="95:40"><expr pos:start="95:13" pos:end="95:40"><call pos:start="95:13" pos:end="95:40"><name pos:start="95:13" pos:end="95:26">inet_strfamily</name><argument_list pos:start="95:27" pos:end="95:40">(<argument pos:start="95:28" pos:end="95:39"><expr pos:start="95:28" pos:end="95:39"><name pos:start="95:28" pos:end="95:39"><name pos:start="95:28" pos:end="95:28">e</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:39">ai_family</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:43" pos:end="95:57"><expr pos:start="95:43" pos:end="95:57"><call pos:start="95:43" pos:end="95:57"><name pos:start="95:43" pos:end="95:50">strerror</name><argument_list pos:start="95:51" pos:end="95:57">(<argument pos:start="95:52" pos:end="95:56"><expr pos:start="95:52" pos:end="95:56"><name pos:start="95:52" pos:end="95:56">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="97:13" pos:end="97:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:71"><expr pos:start="101:9" pos:end="101:70"><call pos:start="101:9" pos:end="101:70"><name pos:start="101:9" pos:end="101:18">setsockopt</name><argument_list pos:start="101:19" pos:end="101:70">(<argument pos:start="101:20" pos:end="101:23"><expr pos:start="101:20" pos:end="101:23"><name pos:start="101:20" pos:end="101:23">sock</name></expr></argument>,<argument pos:start="101:25" pos:end="101:34"><expr pos:start="101:25" pos:end="101:34"><name pos:start="101:25" pos:end="101:34">SOL_SOCKET</name></expr></argument>,<argument pos:start="101:36" pos:end="101:47"><expr pos:start="101:36" pos:end="101:47"><name pos:start="101:36" pos:end="101:47">SO_REUSEADDR</name></expr></argument>,<argument pos:start="101:49" pos:end="101:58"><expr pos:start="101:49" pos:end="101:58"><operator pos:start="101:49" pos:end="101:49">(</operator><name pos:start="101:50" pos:end="101:53">void</name><operator pos:start="101:54" pos:end="101:54">*</operator><operator pos:start="101:55" pos:end="101:55">)</operator><operator pos:start="101:56" pos:end="101:56">&amp;</operator><name pos:start="101:57" pos:end="101:58">on</name></expr></argument>,<argument pos:start="101:60" pos:end="101:69"><expr pos:start="101:60" pos:end="101:69"><sizeof pos:start="101:60" pos:end="101:69">sizeof<argument_list pos:start="101:66" pos:end="101:69">(<argument pos:start="101:67" pos:end="101:68"><expr pos:start="101:67" pos:end="101:68"><name pos:start="101:67" pos:end="101:68">on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:19">(<expr pos:start="103:13" pos:end="103:18"><operator pos:start="103:13" pos:end="103:13">!</operator><name pos:start="103:14" pos:end="103:18">block</name></expr>)</condition> <block pos:start="103:21" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:38">

            <expr_stmt pos:start="105:13" pos:end="105:38"><expr pos:start="105:13" pos:end="105:37"><call pos:start="105:13" pos:end="105:37"><name pos:start="105:13" pos:end="105:31">socket_set_nonblock</name><argument_list pos:start="105:32" pos:end="105:37">(<argument pos:start="105:33" pos:end="105:36"><expr pos:start="105:33" pos:end="105:36"><name pos:start="105:33" pos:end="105:36">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="109:9" pos:end="109:29">/* connect to peer */</comment>

        <do pos:start="111:9" pos:end="126:0">do <block pos:start="111:12" pos:end="121:9">{<block_content pos:start="113:13" pos:end="119:13">

            <expr_stmt pos:start="113:13" pos:end="113:19"><expr pos:start="113:13" pos:end="113:18"><name pos:start="113:13" pos:end="113:14">rc</name> <operator pos:start="113:16" pos:end="113:16">=</operator> <literal type="number" pos:start="113:18" pos:end="113:18">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="119:13"><if pos:start="115:13" pos:end="119:13">if <condition pos:start="115:16" pos:end="115:61">(<expr pos:start="115:17" pos:end="115:60"><call pos:start="115:17" pos:end="115:56"><name pos:start="115:17" pos:end="115:23">connect</name><argument_list pos:start="115:24" pos:end="115:56">(<argument pos:start="115:25" pos:end="115:28"><expr pos:start="115:25" pos:end="115:28"><name pos:start="115:25" pos:end="115:28">sock</name></expr></argument>, <argument pos:start="115:31" pos:end="115:40"><expr pos:start="115:31" pos:end="115:40"><name pos:start="115:31" pos:end="115:40"><name pos:start="115:31" pos:end="115:31">e</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:40">ai_addr</name></name></expr></argument>, <argument pos:start="115:43" pos:end="115:55"><expr pos:start="115:43" pos:end="115:55"><name pos:start="115:43" pos:end="115:55"><name pos:start="115:43" pos:end="115:43">e</name><operator pos:start="115:44" pos:end="115:45">-&gt;</operator><name pos:start="115:46" pos:end="115:55">ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator pos:start="115:58" pos:end="115:58">&lt;</operator> <literal type="number" pos:start="115:60" pos:end="115:60">0</literal></expr>)</condition> <block pos:start="115:63" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:37">

                <expr_stmt pos:start="117:17" pos:end="117:37"><expr pos:start="117:17" pos:end="117:36"><name pos:start="117:17" pos:end="117:18">rc</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <operator pos:start="117:22" pos:end="117:22">-</operator><call pos:start="117:23" pos:end="117:36"><name pos:start="117:23" pos:end="117:34">socket_error</name><argument_list pos:start="117:35" pos:end="117:36">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="121:17" pos:end="121:30">(<expr pos:start="121:18" pos:end="121:29"><name pos:start="121:18" pos:end="121:19">rc</name> <operator pos:start="121:21" pos:end="121:22">==</operator> <operator pos:start="121:24" pos:end="121:24">-</operator><name pos:start="121:25" pos:end="121:29">EINTR</name></expr>)</condition>;</do>



  <cpp:ifdef pos:start="125:3" pos:end="125:15">#<cpp:directive pos:start="125:4" pos:end="125:8">ifdef</cpp:directive> <name pos:start="125:10" pos:end="125:15">_WIN32</name></cpp:ifdef>

        <if_stmt pos:start="127:9" pos:end="159:5"><if pos:start="127:9" pos:end="159:5">if <condition pos:start="127:12" pos:end="129:46">(<expr pos:start="127:13" pos:end="129:45"><operator pos:start="127:13" pos:end="127:13">!</operator><name pos:start="127:14" pos:end="127:18">block</name> <operator pos:start="127:20" pos:end="127:21">&amp;&amp;</operator> <operator pos:start="127:23" pos:end="127:23">(</operator><name pos:start="127:24" pos:end="127:25">rc</name> <operator pos:start="127:27" pos:end="127:28">==</operator> <operator pos:start="127:30" pos:end="127:30">-</operator><name pos:start="127:31" pos:end="127:41">EINPROGRESS</name> <operator pos:start="127:43" pos:end="127:44">||</operator> <name pos:start="127:46" pos:end="127:47">rc</name> <operator pos:start="127:49" pos:end="127:50">==</operator> <operator pos:start="127:52" pos:end="127:52">-</operator><name pos:start="127:53" pos:end="127:63">EWOULDBLOCK</name>

                       <operator pos:start="129:24" pos:end="129:25">||</operator> <name pos:start="129:27" pos:end="129:28">rc</name> <operator pos:start="129:30" pos:end="129:31">==</operator> <operator pos:start="129:33" pos:end="129:33">-</operator><name pos:start="129:34" pos:end="129:44">WSAEALREADY</name><operator pos:start="129:45" pos:end="129:45">)</operator></expr>)</condition> <block pos:start="129:48" pos:end="159:5">{<block_content pos:start="133:9" pos:end="157:20">

  <cpp:else pos:start="131:3" pos:end="131:7">#<cpp:directive pos:start="131:4" pos:end="131:7">else</cpp:directive></cpp:else>

        <if_stmt pos:start="133:9" pos:end="153:9"><if pos:start="133:9" pos:end="139:9">if <condition pos:start="133:12" pos:end="133:43">(<expr pos:start="133:13" pos:end="133:42"><operator pos:start="133:13" pos:end="133:13">!</operator><name pos:start="133:14" pos:end="133:18">block</name> <operator pos:start="133:20" pos:end="133:21">&amp;&amp;</operator> <operator pos:start="133:23" pos:end="133:23">(</operator><name pos:start="133:24" pos:end="133:25">rc</name> <operator pos:start="133:27" pos:end="133:28">==</operator> <operator pos:start="133:30" pos:end="133:30">-</operator><name pos:start="133:31" pos:end="133:41">EINPROGRESS</name><operator pos:start="133:42" pos:end="133:42">)</operator></expr>)</condition> <block pos:start="133:45" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:61">

  <cpp:endif pos:start="135:3" pos:end="135:8">#<cpp:directive pos:start="135:4" pos:end="135:8">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="137:13" pos:end="137:61"><expr pos:start="137:13" pos:end="137:60"><call pos:start="137:13" pos:end="137:60"><name pos:start="137:13" pos:end="137:21">error_set</name><argument_list pos:start="137:22" pos:end="137:60">(<argument pos:start="137:23" pos:end="137:26"><expr pos:start="137:23" pos:end="137:26"><name pos:start="137:23" pos:end="137:26">errp</name></expr></argument>, <argument pos:start="137:29" pos:end="137:59"><expr pos:start="137:29" pos:end="137:59"><name pos:start="137:29" pos:end="137:59">QERR_SOCKET_CONNECT_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="139:11" pos:end="153:9">else if <condition pos:start="139:19" pos:end="139:26">(<expr pos:start="139:20" pos:end="139:25"><name pos:start="139:20" pos:end="139:21">rc</name> <operator pos:start="139:23" pos:end="139:23">&lt;</operator> <literal type="number" pos:start="139:25" pos:end="139:25">0</literal></expr>)</condition> <block pos:start="139:28" pos:end="153:9">{<block_content pos:start="141:13" pos:end="151:21">

            <if_stmt pos:start="141:13" pos:end="147:72"><if pos:start="141:13" pos:end="147:72">if <condition pos:start="141:16" pos:end="141:35">(<expr pos:start="141:17" pos:end="141:34"><name pos:start="141:17" pos:end="141:20">NULL</name> <operator pos:start="141:22" pos:end="141:23">==</operator> <name pos:start="141:25" pos:end="141:34"><name pos:start="141:25" pos:end="141:25">e</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:34">ai_next</name></name></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="147:72"><block_content pos:start="143:17" pos:end="147:72">

                <expr_stmt pos:start="143:17" pos:end="147:72"><expr pos:start="143:17" pos:end="147:71"><call pos:start="143:17" pos:end="147:71"><name pos:start="143:17" pos:end="143:23">fprintf</name><argument_list pos:start="143:24" pos:end="147:71">(<argument pos:start="143:25" pos:end="143:30"><expr pos:start="143:25" pos:end="143:30"><name pos:start="143:25" pos:end="143:30">stderr</name></expr></argument>, <argument pos:start="143:33" pos:end="143:64"><expr pos:start="143:33" pos:end="143:64"><literal type="string" pos:start="143:33" pos:end="143:64">"%s: connect(%s,%s,%s,%s): %s\n"</literal></expr></argument>, <argument pos:start="143:67" pos:end="143:78"><expr pos:start="143:67" pos:end="143:78"><name pos:start="143:67" pos:end="143:78">__FUNCTION__</name></expr></argument>,

                        <argument pos:start="145:25" pos:end="145:52"><expr pos:start="145:25" pos:end="145:52"><call pos:start="145:25" pos:end="145:52"><name pos:start="145:25" pos:end="145:38">inet_strfamily</name><argument_list pos:start="145:39" pos:end="145:52">(<argument pos:start="145:40" pos:end="145:51"><expr pos:start="145:40" pos:end="145:51"><name pos:start="145:40" pos:end="145:51"><name pos:start="145:40" pos:end="145:40">e</name><operator pos:start="145:41" pos:end="145:42">-&gt;</operator><name pos:start="145:43" pos:end="145:51">ai_family</name></name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="147:25" pos:end="147:39"><expr pos:start="147:25" pos:end="147:39"><name pos:start="147:25" pos:end="147:39"><name pos:start="147:25" pos:end="147:25">e</name><operator pos:start="147:26" pos:end="147:27">-&gt;</operator><name pos:start="147:28" pos:end="147:39">ai_canonname</name></name></expr></argument>, <argument pos:start="147:42" pos:end="147:46"><expr pos:start="147:42" pos:end="147:46"><name pos:start="147:42" pos:end="147:46">uaddr</name></expr></argument>, <argument pos:start="147:49" pos:end="147:53"><expr pos:start="147:49" pos:end="147:53"><name pos:start="147:49" pos:end="147:53">uport</name></expr></argument>, <argument pos:start="147:56" pos:end="147:70"><expr pos:start="147:56" pos:end="147:70"><call pos:start="147:56" pos:end="147:70"><name pos:start="147:56" pos:end="147:63">strerror</name><argument_list pos:start="147:64" pos:end="147:70">(<argument pos:start="147:65" pos:end="147:69"><expr pos:start="147:65" pos:end="147:69"><name pos:start="147:65" pos:end="147:69">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:30"><expr pos:start="149:13" pos:end="149:29"><call pos:start="149:13" pos:end="149:29"><name pos:start="149:13" pos:end="149:23">closesocket</name><argument_list pos:start="149:24" pos:end="149:29">(<argument pos:start="149:25" pos:end="149:28"><expr pos:start="149:25" pos:end="149:28"><name pos:start="149:25" pos:end="149:28">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="151:13" pos:end="151:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:26"><expr pos:start="155:9" pos:end="155:25"><call pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:20">freeaddrinfo</name><argument_list pos:start="155:21" pos:end="155:25">(<argument pos:start="155:22" pos:end="155:24"><expr pos:start="155:22" pos:end="155:24"><name pos:start="155:22" pos:end="155:24">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:20">return <expr pos:start="157:16" pos:end="157:19"><name pos:start="157:16" pos:end="157:19">sock</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:48"><expr pos:start="161:5" pos:end="161:47"><call pos:start="161:5" pos:end="161:47"><name pos:start="161:5" pos:end="161:13">error_set</name><argument_list pos:start="161:14" pos:end="161:47">(<argument pos:start="161:15" pos:end="161:18"><expr pos:start="161:15" pos:end="161:18"><name pos:start="161:15" pos:end="161:18">errp</name></expr></argument>, <argument pos:start="161:21" pos:end="161:46"><expr pos:start="161:21" pos:end="161:46"><name pos:start="161:21" pos:end="161:46">QERR_SOCKET_CONNECT_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:22"><expr pos:start="163:5" pos:end="163:21"><call pos:start="163:5" pos:end="163:21"><name pos:start="163:5" pos:end="163:16">freeaddrinfo</name><argument_list pos:start="163:17" pos:end="163:21">(<argument pos:start="163:18" pos:end="163:20"><expr pos:start="163:18" pos:end="163:20"><name pos:start="163:18" pos:end="163:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="165:5" pos:end="165:14">return <expr pos:start="165:12" pos:end="165:13"><operator pos:start="165:12" pos:end="165:12">-</operator><literal type="number" pos:start="165:13" pos:end="165:13">1</literal></expr>;</return>

</block_content>}</block></for></block_content></block></function>
</unit>
