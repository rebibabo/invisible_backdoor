<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8352.c" pos:tabs="8"><function pos:start="1:1" pos:end="60:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">qmp_guest_set_time</name><parameter_list pos:start="1:24" pos:end="1:69">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:28">bool</name></type> <name pos:start="1:30" pos:end="1:37">has_time</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:54"><decl pos:start="1:40" pos:end="1:54"><type pos:start="1:40" pos:end="1:54"><name pos:start="1:40" pos:end="1:46">int64_t</name></type> <name pos:start="1:48" pos:end="1:54">time_ns</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:61">Error</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier><modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">errp</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="60:1">{<block_content pos:start="3:5" pos:end="59:5">
    <decl_stmt pos:start="3:5" pos:end="3:12"><decl pos:start="3:5" pos:end="3:11"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:15"><decl pos:start="4:5" pos:end="4:14"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:14">status</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:9"><name pos:start="5:5" pos:end="5:9">pid_t</name></type> <name pos:start="5:11" pos:end="5:13">pid</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:28"><decl pos:start="6:5" pos:end="6:27"><type pos:start="6:5" pos:end="6:11"><name pos:start="6:5" pos:end="6:9">Error</name> <modifier pos:start="6:11" pos:end="6:11">*</modifier></type><name pos:start="6:12" pos:end="6:20">local_err</name> <init pos:start="6:22" pos:end="6:27">= <expr pos:start="6:24" pos:end="6:27"><name pos:start="6:24" pos:end="6:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:18">timeval</name></name></type> <name pos:start="7:20" pos:end="7:21">tv</name></decl>;</decl_stmt>
    <comment type="block" pos:start="8:5" pos:end="8:57">/* If user has passed a time, validate and set it. */</comment>
    <if_stmt pos:start="9:5" pos:end="27:5"><if pos:start="9:5" pos:end="27:5">if <condition pos:start="9:8" pos:end="9:17">(<expr pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">has_time</name></expr>)</condition> <block pos:start="9:19" pos:end="27:5">{<block_content pos:start="11:9" pos:end="26:9">
        <comment type="block" pos:start="10:9" pos:end="10:61">/* year-2038 will overflow in case time_t is 32bit */</comment>
        <if_stmt pos:start="11:9" pos:end="14:9"><if pos:start="11:9" pos:end="14:9">if <condition pos:start="11:12" pos:end="11:67">(<expr pos:start="11:13" pos:end="11:66"><name pos:start="11:13" pos:end="11:19">time_ns</name> <operator pos:start="11:21" pos:end="11:21">/</operator> <literal type="number" pos:start="11:23" pos:end="11:32">1000000000</literal> <operator pos:start="11:34" pos:end="11:35">!=</operator> <operator pos:start="11:37" pos:end="11:37">(</operator><name pos:start="11:38" pos:end="11:43">time_t</name><operator pos:start="11:44" pos:end="11:44">)</operator><operator pos:start="11:45" pos:end="11:45">(</operator><name pos:start="11:46" pos:end="11:52">time_ns</name> <operator pos:start="11:54" pos:end="11:54">/</operator> <literal type="number" pos:start="11:56" pos:end="11:65">1000000000</literal><operator pos:start="11:66" pos:end="11:66">)</operator></expr>)</condition> <block pos:start="11:69" pos:end="14:9">{<block_content pos:start="12:13" pos:end="13:19">
            <expr_stmt pos:start="12:13" pos:end="12:71"><expr pos:start="12:13" pos:end="12:70"><call pos:start="12:13" pos:end="12:70"><name pos:start="12:13" pos:end="12:22">error_setg</name><argument_list pos:start="12:23" pos:end="12:70">(<argument pos:start="12:24" pos:end="12:27"><expr pos:start="12:24" pos:end="12:27"><name pos:start="12:24" pos:end="12:27">errp</name></expr></argument>, <argument pos:start="12:30" pos:end="12:60"><expr pos:start="12:30" pos:end="12:60"><literal type="string" pos:start="12:30" pos:end="12:37">"Time %"</literal> <name pos:start="12:39" pos:end="12:44">PRId64</name> <literal type="string" pos:start="12:46" pos:end="12:60">" is too large"</literal></expr></argument>, <argument pos:start="12:63" pos:end="12:69"><expr pos:start="12:63" pos:end="12:69"><name pos:start="12:63" pos:end="12:69">time_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="13:13" pos:end="13:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="15:9" pos:end="15:41"><expr pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:10">tv</name><operator pos:start="15:11" pos:end="15:11">.</operator><name pos:start="15:12" pos:end="15:17">tv_sec</name></name> <operator pos:start="15:19" pos:end="15:19">=</operator> <name pos:start="15:21" pos:end="15:27">time_ns</name> <operator pos:start="15:29" pos:end="15:29">/</operator> <literal type="number" pos:start="15:31" pos:end="15:40">1000000000</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:51"><expr pos:start="16:9" pos:end="16:50"><name pos:start="16:9" pos:end="16:18"><name pos:start="16:9" pos:end="16:10">tv</name><operator pos:start="16:11" pos:end="16:11">.</operator><name pos:start="16:12" pos:end="16:18">tv_usec</name></name> <operator pos:start="16:20" pos:end="16:20">=</operator> <operator pos:start="16:22" pos:end="16:22">(</operator><name pos:start="16:23" pos:end="16:29">time_ns</name> <operator pos:start="16:31" pos:end="16:31">%</operator> <literal type="number" pos:start="16:33" pos:end="16:42">1000000000</literal><operator pos:start="16:43" pos:end="16:43">)</operator> <operator pos:start="16:45" pos:end="16:45">/</operator> <literal type="number" pos:start="16:47" pos:end="16:50">1000</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:44"><expr pos:start="17:9" pos:end="17:43"><call pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:25">g_date_set_time_t</name><argument_list pos:start="17:26" pos:end="17:43">(<argument pos:start="17:27" pos:end="17:31"><expr pos:start="17:27" pos:end="17:31"><operator pos:start="17:27" pos:end="17:27">&amp;</operator><name pos:start="17:28" pos:end="17:31">date</name></expr></argument>, <argument pos:start="17:34" pos:end="17:42"><expr pos:start="17:34" pos:end="17:42"><name pos:start="17:34" pos:end="17:42"><name pos:start="17:34" pos:end="17:35">tv</name><operator pos:start="17:36" pos:end="17:36">.</operator><name pos:start="17:37" pos:end="17:42">tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="18:9" pos:end="21:9"><if pos:start="18:9" pos:end="21:9">if <condition pos:start="18:12" pos:end="18:50">(<expr pos:start="18:13" pos:end="18:49"><name pos:start="18:13" pos:end="18:21"><name pos:start="18:13" pos:end="18:16">date</name><operator pos:start="18:17" pos:end="18:17">.</operator><name pos:start="18:18" pos:end="18:21">year</name></name> <operator pos:start="18:23" pos:end="18:23">&lt;</operator> <literal type="number" pos:start="18:25" pos:end="18:28">1970</literal> <operator pos:start="18:30" pos:end="18:31">||</operator> <name pos:start="18:33" pos:end="18:41"><name pos:start="18:33" pos:end="18:36">date</name><operator pos:start="18:37" pos:end="18:37">.</operator><name pos:start="18:38" pos:end="18:41">year</name></name> <operator pos:start="18:43" pos:end="18:44">&gt;=</operator> <literal type="number" pos:start="18:46" pos:end="18:49">2070</literal></expr>)</condition> <block pos:start="18:52" pos:end="21:9">{<block_content pos:start="19:13" pos:end="20:19">
            <expr_stmt pos:start="19:13" pos:end="19:58"><expr pos:start="19:13" pos:end="19:57"><call pos:start="19:13" pos:end="19:57"><name pos:start="19:13" pos:end="19:28">error_setg_errno</name><argument_list pos:start="19:29" pos:end="19:57">(<argument pos:start="19:30" pos:end="19:33"><expr pos:start="19:30" pos:end="19:33"><name pos:start="19:30" pos:end="19:33">errp</name></expr></argument>, <argument pos:start="19:36" pos:end="19:40"><expr pos:start="19:36" pos:end="19:40"><name pos:start="19:36" pos:end="19:40">errno</name></expr></argument>, <argument pos:start="19:43" pos:end="19:56"><expr pos:start="19:43" pos:end="19:56"><literal type="string" pos:start="19:43" pos:end="19:56">"Invalid time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="20:13" pos:end="20:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="22:9" pos:end="22:38"><expr pos:start="22:9" pos:end="22:37"><name pos:start="22:9" pos:end="22:11">ret</name> <operator pos:start="22:13" pos:end="22:13">=</operator> <call pos:start="22:15" pos:end="22:37"><name pos:start="22:15" pos:end="22:26">settimeofday</name><argument_list pos:start="22:27" pos:end="22:37">(<argument pos:start="22:28" pos:end="22:30"><expr pos:start="22:28" pos:end="22:30"><operator pos:start="22:28" pos:end="22:28">&amp;</operator><name pos:start="22:29" pos:end="22:30">tv</name></expr></argument>, <argument pos:start="22:33" pos:end="22:36"><expr pos:start="22:33" pos:end="22:36"><name pos:start="22:33" pos:end="22:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="23:9" pos:end="26:9"><if pos:start="23:9" pos:end="26:9">if <condition pos:start="23:12" pos:end="23:20">(<expr pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:15">ret</name> <operator pos:start="23:17" pos:end="23:17">&lt;</operator> <literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr>)</condition> <block pos:start="23:22" pos:end="26:9">{<block_content pos:start="24:13" pos:end="25:19">
            <expr_stmt pos:start="24:13" pos:end="24:73"><expr pos:start="24:13" pos:end="24:72"><call pos:start="24:13" pos:end="24:72"><name pos:start="24:13" pos:end="24:28">error_setg_errno</name><argument_list pos:start="24:29" pos:end="24:72">(<argument pos:start="24:30" pos:end="24:33"><expr pos:start="24:30" pos:end="24:33"><name pos:start="24:30" pos:end="24:33">errp</name></expr></argument>, <argument pos:start="24:36" pos:end="24:40"><expr pos:start="24:36" pos:end="24:40"><name pos:start="24:36" pos:end="24:40">errno</name></expr></argument>, <argument pos:start="24:43" pos:end="24:71"><expr pos:start="24:43" pos:end="24:71"><literal type="string" pos:start="24:43" pos:end="24:71">"Failed to set time to guest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="25:13" pos:end="25:19">return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="28:5" pos:end="31:31">/* Now, if user has passed a time to set and the system time is set, we
     * just need to synchronize the hardware clock. However, if no time was
     * passed, user is requesting the opposite: set the system time from the
     * hardware clock (RTC). */</comment>
    <expr_stmt pos:start="32:5" pos:end="32:17"><expr pos:start="32:5" pos:end="32:16"><name pos:start="32:5" pos:end="32:7">pid</name> <operator pos:start="32:9" pos:end="32:9">=</operator> <call pos:start="32:11" pos:end="32:16"><name pos:start="32:11" pos:end="32:14">fork</name><argument_list pos:start="32:15" pos:end="32:16">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="33:5" pos:end="46:5"><if pos:start="33:5" pos:end="43:5">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:11">pid</name> <operator pos:start="33:13" pos:end="33:14">==</operator> <literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>)</condition> <block pos:start="33:19" pos:end="43:5">{<block_content pos:start="34:9" pos:end="42:28">
        <expr_stmt pos:start="34:9" pos:end="34:17"><expr pos:start="34:9" pos:end="34:16"><call pos:start="34:9" pos:end="34:16"><name pos:start="34:9" pos:end="34:14">setsid</name><argument_list pos:start="34:15" pos:end="34:16">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:29"><expr pos:start="35:9" pos:end="35:28"><call pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:25">reopen_fd_to_null</name><argument_list pos:start="35:26" pos:end="35:28">(<argument pos:start="35:27" pos:end="35:27"><expr pos:start="35:27" pos:end="35:27"><literal type="number" pos:start="35:27" pos:end="35:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="36:29"><expr pos:start="36:9" pos:end="36:28"><call pos:start="36:9" pos:end="36:28"><name pos:start="36:9" pos:end="36:25">reopen_fd_to_null</name><argument_list pos:start="36:26" pos:end="36:28">(<argument pos:start="36:27" pos:end="36:27"><expr pos:start="36:27" pos:end="36:27"><literal type="number" pos:start="36:27" pos:end="36:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><call pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:25">reopen_fd_to_null</name><argument_list pos:start="37:26" pos:end="37:28">(<argument pos:start="37:27" pos:end="37:27"><expr pos:start="37:27" pos:end="37:27"><literal type="number" pos:start="37:27" pos:end="37:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="38:9" pos:end="39:68">/* Use '/sbin/hwclock -w' to set RTC from the system time,
         * or '/sbin/hwclock -s' to set the system time from RTC. */</comment>
        <expr_stmt pos:start="40:9" pos:end="41:30"><expr pos:start="40:9" pos:end="41:29"><call pos:start="40:9" pos:end="41:29"><name pos:start="40:9" pos:end="40:14">execle</name><argument_list pos:start="40:15" pos:end="41:29">(<argument pos:start="40:16" pos:end="40:30"><expr pos:start="40:16" pos:end="40:30"><literal type="string" pos:start="40:16" pos:end="40:30">"/sbin/hwclock"</literal></expr></argument>, <argument pos:start="40:33" pos:end="40:41"><expr pos:start="40:33" pos:end="40:41"><literal type="string" pos:start="40:33" pos:end="40:41">"hwclock"</literal></expr></argument>, <argument pos:start="40:44" pos:end="40:65"><expr pos:start="40:44" pos:end="40:65"><ternary pos:start="40:44" pos:end="40:65"><condition pos:start="40:44" pos:end="40:53"><expr pos:start="40:44" pos:end="40:51"><name pos:start="40:44" pos:end="40:51">has_time</name></expr> ?</condition><then pos:start="40:55" pos:end="40:58"> <expr pos:start="40:55" pos:end="40:58"><literal type="string" pos:start="40:55" pos:end="40:58">"-w"</literal></expr> </then><else pos:start="40:60" pos:end="40:65">: <expr pos:start="40:62" pos:end="40:65"><literal type="string" pos:start="40:62" pos:end="40:65">"-s"</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="41:16" pos:end="41:19"><expr pos:start="41:16" pos:end="41:19"><name pos:start="41:16" pos:end="41:19">NULL</name></expr></argument>, <argument pos:start="41:22" pos:end="41:28"><expr pos:start="41:22" pos:end="41:28"><name pos:start="41:22" pos:end="41:28">environ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:28"><expr pos:start="42:9" pos:end="42:27"><call pos:start="42:9" pos:end="42:27"><name pos:start="42:9" pos:end="42:13">_exit</name><argument_list pos:start="42:14" pos:end="42:27">(<argument pos:start="42:15" pos:end="42:26"><expr pos:start="42:15" pos:end="42:26"><name pos:start="42:15" pos:end="42:26">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="43:7" pos:end="46:5">else if <condition pos:start="43:15" pos:end="43:23">(<expr pos:start="43:16" pos:end="43:22"><name pos:start="43:16" pos:end="43:18">pid</name> <operator pos:start="43:20" pos:end="43:20">&lt;</operator> <literal type="number" pos:start="43:22" pos:end="43:22">0</literal></expr>)</condition> <block pos:start="43:25" pos:end="46:5">{<block_content pos:start="44:9" pos:end="45:15">
        <expr_stmt pos:start="44:9" pos:end="44:72"><expr pos:start="44:9" pos:end="44:71"><call pos:start="44:9" pos:end="44:71"><name pos:start="44:9" pos:end="44:24">error_setg_errno</name><argument_list pos:start="44:25" pos:end="44:71">(<argument pos:start="44:26" pos:end="44:29"><expr pos:start="44:26" pos:end="44:29"><name pos:start="44:26" pos:end="44:29">errp</name></expr></argument>, <argument pos:start="44:32" pos:end="44:36"><expr pos:start="44:32" pos:end="44:36"><name pos:start="44:32" pos:end="44:36">errno</name></expr></argument>, <argument pos:start="44:39" pos:end="44:70"><expr pos:start="44:39" pos:end="44:70"><literal type="string" pos:start="44:39" pos:end="44:70">"failed to create child process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="45:9" pos:end="45:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:44"><expr pos:start="47:5" pos:end="47:43"><call pos:start="47:5" pos:end="47:43"><name pos:start="47:5" pos:end="47:17">ga_wait_child</name><argument_list pos:start="47:18" pos:end="47:43">(<argument pos:start="47:19" pos:end="47:21"><expr pos:start="47:19" pos:end="47:21"><name pos:start="47:19" pos:end="47:21">pid</name></expr></argument>, <argument pos:start="47:24" pos:end="47:30"><expr pos:start="47:24" pos:end="47:30"><operator pos:start="47:24" pos:end="47:24">&amp;</operator><name pos:start="47:25" pos:end="47:30">status</name></expr></argument>, <argument pos:start="47:33" pos:end="47:42"><expr pos:start="47:33" pos:end="47:42"><operator pos:start="47:33" pos:end="47:33">&amp;</operator><name pos:start="47:34" pos:end="47:42">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="48:5" pos:end="51:5"><if pos:start="48:5" pos:end="51:5">if <condition pos:start="48:8" pos:end="48:18">(<expr pos:start="48:9" pos:end="48:17"><name pos:start="48:9" pos:end="48:17">local_err</name></expr>)</condition> <block pos:start="48:20" pos:end="51:5">{<block_content pos:start="49:9" pos:end="50:15">
        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><call pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:23">error_propagate</name><argument_list pos:start="49:24" pos:end="49:40">(<argument pos:start="49:25" pos:end="49:28"><expr pos:start="49:25" pos:end="49:28"><name pos:start="49:25" pos:end="49:28">errp</name></expr></argument>, <argument pos:start="49:31" pos:end="49:39"><expr pos:start="49:31" pos:end="49:39"><name pos:start="49:31" pos:end="49:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="50:9" pos:end="50:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="52:5" pos:end="55:5"><if pos:start="52:5" pos:end="55:5">if <condition pos:start="52:8" pos:end="52:27">(<expr pos:start="52:9" pos:end="52:26"><operator pos:start="52:9" pos:end="52:9">!</operator><call pos:start="52:10" pos:end="52:26"><name pos:start="52:10" pos:end="52:18">WIFEXITED</name><argument_list pos:start="52:19" pos:end="52:26">(<argument pos:start="52:20" pos:end="52:25"><expr pos:start="52:20" pos:end="52:25"><name pos:start="52:20" pos:end="52:25">status</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="52:29" pos:end="55:5">{<block_content pos:start="53:9" pos:end="54:15">
        <expr_stmt pos:start="53:9" pos:end="53:68"><expr pos:start="53:9" pos:end="53:67"><call pos:start="53:9" pos:end="53:67"><name pos:start="53:9" pos:end="53:18">error_setg</name><argument_list pos:start="53:19" pos:end="53:67">(<argument pos:start="53:20" pos:end="53:23"><expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">errp</name></expr></argument>, <argument pos:start="53:26" pos:end="53:66"><expr pos:start="53:26" pos:end="53:66"><literal type="string" pos:start="53:26" pos:end="53:66">"child process has terminated abnormally"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="54:9" pos:end="54:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="56:5" pos:end="59:5"><if pos:start="56:5" pos:end="59:5">if <condition pos:start="56:8" pos:end="56:28">(<expr pos:start="56:9" pos:end="56:27"><call pos:start="56:9" pos:end="56:27"><name pos:start="56:9" pos:end="56:19">WEXITSTATUS</name><argument_list pos:start="56:20" pos:end="56:27">(<argument pos:start="56:21" pos:end="56:26"><expr pos:start="56:21" pos:end="56:26"><name pos:start="56:21" pos:end="56:26">status</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="56:30" pos:end="59:5">{<block_content pos:start="57:9" pos:end="58:15">
        <expr_stmt pos:start="57:9" pos:end="57:80"><expr pos:start="57:9" pos:end="57:79"><call pos:start="57:9" pos:end="57:79"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="57:79">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>, <argument pos:start="57:26" pos:end="57:78"><expr pos:start="57:26" pos:end="57:78"><literal type="string" pos:start="57:26" pos:end="57:78">"hwclock failed to set hardware clock to system time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="58:9" pos:end="58:15">return;</return>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></unit>
