<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/492.c" pos:tabs="8"><function pos:start="1:1" pos:end="26:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:54">wait_for_overlapping_requests</name><parameter_list pos:start="1:55" pos:end="2:43">(<parameter pos:start="1:56" pos:end="1:75"><decl pos:start="1:56" pos:end="1:75"><type pos:start="1:56" pos:end="1:75"><name pos:start="1:56" pos:end="1:71">BlockDriverState</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:75">bs</name></decl></parameter>,
        <parameter pos:start="2:9" pos:end="2:26"><decl pos:start="2:9" pos:end="2:26"><type pos:start="2:9" pos:end="2:26"><name pos:start="2:9" pos:end="2:15">int64_t</name></type> <name pos:start="2:17" pos:end="2:26">sector_num</name></decl></parameter>, <parameter pos:start="2:29" pos:end="2:42"><decl pos:start="2:29" pos:end="2:42"><type pos:start="2:29" pos:end="2:42"><name pos:start="2:29" pos:end="2:31">int</name></type> <name pos:start="2:33" pos:end="2:42">nb_sectors</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="7:15">{<block_content pos:start="4:5" pos:end="7:15">
    <decl_stmt pos:start="4:5" pos:end="4:28"><decl pos:start="4:5" pos:end="4:27"><type pos:start="4:5" pos:end="4:24"><name pos:start="4:5" pos:end="4:22">BdrvTrackedRequest</name> <modifier pos:start="4:24" pos:end="4:24">*</modifier></type><name pos:start="4:25" pos:end="4:27">req</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:30">cluster_sector_num</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:27"><decl pos:start="6:5" pos:end="6:26"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:26">cluster_nb_sectors</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:14">retry</name></decl>;</decl_stmt></block_content></block></function>
    <comment type="block">/* If we touch the same cluster it counts as an overlap.  This guarantees
     * that allocating writes will be serialized and not race with each other
     * for the same cluster.  For example, in copy-on-read it ensures that the
     * CoR read and write operations are atomic and guest writes cannot
     * interleave between them.
    round_to_clusters(bs, sector_num, nb_sectors,
                      &amp;cluster_sector_num, &amp;cluster_nb_sectors);
    do {
        retry = false;
        QLIST_FOREACH(req, &amp;bs-&gt;tracked_requests, list) {
            if (tracked_request_overlaps(req, cluster_sector_num,
                                         cluster_nb_sectors)) {
                qemu_co_queue_wait(&amp;req-&gt;wait_queue);
                retry = true;
                break;
            }
        }
    } while (retry);
}</comment></unit>
