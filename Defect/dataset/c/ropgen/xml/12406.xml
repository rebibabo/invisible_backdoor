<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12406.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:23">init</name><parameter_list pos:start="1:24" pos:end="1:64">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:39">AVFilterContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><specifier pos:start="1:47" pos:end="1:51">const</specifier> <name pos:start="1:53" pos:end="1:56">char</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:63">args0</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="177:1">{<block_content pos:start="5:5" pos:end="175:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:14">PanContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier><specifier pos:start="5:17" pos:end="5:21">const</specifier></type> <name pos:start="5:23" pos:end="5:25">pan</name> <init pos:start="5:27" pos:end="5:37">= <expr pos:start="5:29" pos:end="5:37"><name pos:start="5:29" pos:end="5:37"><name pos:start="5:29" pos:end="5:31">ctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:37">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">arg</name></decl>, <decl pos:start="7:16" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">arg0</name></decl>, <decl pos:start="7:23" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:32">tokenizer</name></decl>, <decl pos:start="7:35" pos:end="7:58"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:39">args</name> <init pos:start="7:41" pos:end="7:58">= <expr pos:start="7:43" pos:end="7:58"><call pos:start="7:43" pos:end="7:58"><name pos:start="7:43" pos:end="7:51">av_strdup</name><argument_list pos:start="7:52" pos:end="7:58">(<argument pos:start="7:53" pos:end="7:57"><expr pos:start="7:53" pos:end="7:57"><name pos:start="7:53" pos:end="7:57">args0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">out_ch_id</name></decl>, <decl pos:start="9:20" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:27">in_ch_id</name></decl>, <decl pos:start="9:30" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:32">len</name></decl>, <decl pos:start="9:35" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:35" pos:end="9:39">named</name></decl>, <decl pos:start="9:42" pos:end="9:44"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:42" pos:end="9:44">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:22">nb_in_channels</name><index pos:start="11:23" pos:end="11:25">[<expr pos:start="11:24" pos:end="11:24"><literal type="number" pos:start="11:24" pos:end="11:24">2</literal></expr>]</index></name> <init pos:start="11:27" pos:end="11:36">= <expr pos:start="11:29" pos:end="11:36"><block pos:start="11:29" pos:end="11:36">{ <expr pos:start="11:31" pos:end="11:31"><literal type="number" pos:start="11:31" pos:end="11:31">0</literal></expr>, <expr pos:start="11:34" pos:end="11:34"><literal type="number" pos:start="11:34" pos:end="11:34">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="11:39" pos:end="11:83">// number of unnamed and named input channels</comment>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">double</name></type> <name pos:start="13:12" pos:end="13:15">gain</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:15">(<expr pos:start="17:9" pos:end="17:14"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:14">args0</name></expr>)</condition> <block pos:start="17:17" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:31">

        <expr_stmt pos:start="19:9" pos:end="23:57"><expr pos:start="19:9" pos:end="23:56"><call pos:start="19:9" pos:end="23:56"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="23:56">(<argument pos:start="19:16" pos:end="19:18"><expr pos:start="19:16" pos:end="19:18"><name pos:start="19:16" pos:end="19:18">ctx</name></expr></argument>, <argument pos:start="19:21" pos:end="19:32"><expr pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="21:16" pos:end="23:55"><expr pos:start="21:16" pos:end="23:55"><literal type="string" pos:start="21:16" pos:end="21:61">"pan filter needs a channel layout and a set "</literal>

               <literal type="string" pos:start="23:16" pos:end="23:55">"of channels definitions as parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:31">return <expr pos:start="25:16" pos:end="25:30"><call pos:start="25:16" pos:end="25:30"><name pos:start="25:16" pos:end="25:22">AVERROR</name><argument_list pos:start="25:23" pos:end="25:30">(<argument pos:start="25:24" pos:end="25:29"><expr pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="31:31"><if pos:start="29:5" pos:end="31:31">if <condition pos:start="29:8" pos:end="29:14">(<expr pos:start="29:9" pos:end="29:13"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:13">args</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:31"><block_content pos:start="31:9" pos:end="31:31">

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:7">arg</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:42"><name pos:start="33:11" pos:end="33:19">av_strtok</name><argument_list pos:start="33:20" pos:end="33:42">(<argument pos:start="33:21" pos:end="33:24"><expr pos:start="33:21" pos:end="33:24"><name pos:start="33:21" pos:end="33:24">args</name></expr></argument>, <argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><literal type="string" pos:start="33:27" pos:end="33:29">":"</literal></expr></argument>, <argument pos:start="33:32" pos:end="33:41"><expr pos:start="33:32" pos:end="33:41"><operator pos:start="33:32" pos:end="33:32">&amp;</operator><name pos:start="33:33" pos:end="33:41">tokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:70"><expr pos:start="35:5" pos:end="35:69"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:69"><name pos:start="35:11" pos:end="35:33">ff_parse_channel_layout</name><argument_list pos:start="35:34" pos:end="35:69">(<argument pos:start="35:35" pos:end="35:58"><expr pos:start="35:35" pos:end="35:58"><operator pos:start="35:35" pos:end="35:35">&amp;</operator><name pos:start="35:36" pos:end="35:58"><name pos:start="35:36" pos:end="35:38">pan</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:58">out_channel_layout</name></name></expr></argument>, <argument pos:start="35:61" pos:end="35:63"><expr pos:start="35:61" pos:end="35:63"><name pos:start="35:61" pos:end="35:63">arg</name></expr></argument>, <argument pos:start="35:66" pos:end="35:68"><expr pos:start="35:66" pos:end="35:68"><name pos:start="35:66" pos:end="35:68">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:19"><if pos:start="37:5" pos:end="39:19">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:19"><block_content pos:start="39:9" pos:end="39:19">

        <return pos:start="39:9" pos:end="39:19">return <expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:89"><expr pos:start="41:5" pos:end="41:88"><name pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:7">pan</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:27">nb_output_channels</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <call pos:start="41:31" pos:end="41:88"><name pos:start="41:31" pos:end="41:63">av_get_channel_layout_nb_channels</name><argument_list pos:start="41:64" pos:end="41:88">(<argument pos:start="41:65" pos:end="41:87"><expr pos:start="41:65" pos:end="41:87"><name pos:start="41:65" pos:end="41:87"><name pos:start="41:65" pos:end="41:67">pan</name><operator pos:start="41:68" pos:end="41:69">-&gt;</operator><name pos:start="41:70" pos:end="41:87">out_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:38">/* parse channel specifications */</comment>

    <while pos:start="47:5" pos:end="167:5">while <condition pos:start="47:11" pos:end="47:59">(<expr pos:start="47:12" pos:end="47:58"><operator pos:start="47:12" pos:end="47:12">(</operator><name pos:start="47:13" pos:end="47:15">arg</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:22">arg0</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <call pos:start="47:26" pos:end="47:57"><name pos:start="47:26" pos:end="47:34">av_strtok</name><argument_list pos:start="47:35" pos:end="47:57">(<argument pos:start="47:36" pos:end="47:39"><expr pos:start="47:36" pos:end="47:39"><name pos:start="47:36" pos:end="47:39">NULL</name></expr></argument>, <argument pos:start="47:42" pos:end="47:44"><expr pos:start="47:42" pos:end="47:44"><literal type="string" pos:start="47:42" pos:end="47:44">":"</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:56"><expr pos:start="47:47" pos:end="47:56"><operator pos:start="47:47" pos:end="47:47">&amp;</operator><name pos:start="47:48" pos:end="47:56">tokenizer</name></expr></argument>)</argument_list></call><operator pos:start="47:58" pos:end="47:58">)</operator></expr>)</condition> <block pos:start="47:61" pos:end="167:5">{<block_content pos:start="51:9" pos:end="165:9">

        <comment type="block" pos:start="49:9" pos:end="49:26">/* channel name */</comment>

        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:57">(<expr pos:start="51:13" pos:end="51:56"><call pos:start="51:13" pos:end="51:56"><name pos:start="51:13" pos:end="51:30">parse_channel_name</name><argument_list pos:start="51:31" pos:end="51:56">(<argument pos:start="51:32" pos:end="51:35"><expr pos:start="51:32" pos:end="51:35"><operator pos:start="51:32" pos:end="51:32">&amp;</operator><name pos:start="51:33" pos:end="51:35">arg</name></expr></argument>, <argument pos:start="51:38" pos:end="51:47"><expr pos:start="51:38" pos:end="51:47"><operator pos:start="51:38" pos:end="51:38">&amp;</operator><name pos:start="51:39" pos:end="51:47">out_ch_id</name></expr></argument>, <argument pos:start="51:50" pos:end="51:55"><expr pos:start="51:50" pos:end="51:55"><operator pos:start="51:50" pos:end="51:50">&amp;</operator><name pos:start="51:51" pos:end="51:55">named</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:59" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:35">

            <expr_stmt pos:start="53:13" pos:end="55:69"><expr pos:start="53:13" pos:end="55:68"><call pos:start="53:13" pos:end="55:68"><name pos:start="53:13" pos:end="53:18">av_log</name><argument_list pos:start="53:19" pos:end="55:68">(<argument pos:start="53:20" pos:end="53:22"><expr pos:start="53:20" pos:end="53:22"><name pos:start="53:20" pos:end="53:22">ctx</name></expr></argument>, <argument pos:start="53:25" pos:end="53:36"><expr pos:start="53:25" pos:end="53:36"><name pos:start="53:25" pos:end="53:36">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="55:20" pos:end="55:62"><expr pos:start="55:20" pos:end="55:62"><literal type="string" pos:start="55:20" pos:end="55:62">"Expected out channel name, got \"%.8s\"\n"</literal></expr></argument>, <argument pos:start="55:65" pos:end="55:67"><expr pos:start="55:65" pos:end="55:67"><name pos:start="55:65" pos:end="55:67">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:35">return <expr pos:start="57:20" pos:end="57:34"><call pos:start="57:20" pos:end="57:34"><name pos:start="57:20" pos:end="57:26">AVERROR</name><argument_list pos:start="57:27" pos:end="57:34">(<argument pos:start="57:28" pos:end="57:33"><expr pos:start="57:28" pos:end="57:33"><name pos:start="57:28" pos:end="57:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="83:9"><if pos:start="61:9" pos:end="83:9">if <condition pos:start="61:12" pos:end="61:18">(<expr pos:start="61:13" pos:end="61:17"><name pos:start="61:13" pos:end="61:17">named</name></expr>)</condition> <block pos:start="61:20" pos:end="83:9">{<block_content pos:start="63:13" pos:end="81:117">

            <if_stmt pos:start="63:13" pos:end="71:13"><if pos:start="63:13" pos:end="71:13">if <condition pos:start="63:16" pos:end="63:62">(<expr pos:start="63:17" pos:end="63:61"><operator pos:start="63:17" pos:end="63:17">!</operator><operator pos:start="63:18" pos:end="63:18">(</operator><operator pos:start="63:19" pos:end="63:19">(</operator><name pos:start="63:20" pos:end="63:42"><name pos:start="63:20" pos:end="63:22">pan</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:42">out_channel_layout</name></name> <operator pos:start="63:44" pos:end="63:45">&gt;&gt;</operator> <name pos:start="63:47" pos:end="63:55">out_ch_id</name><operator pos:start="63:56" pos:end="63:56">)</operator> <operator pos:start="63:58" pos:end="63:58">&amp;</operator> <literal type="number" pos:start="63:60" pos:end="63:60">1</literal><operator pos:start="63:61" pos:end="63:61">)</operator></expr>)</condition> <block pos:start="63:64" pos:end="71:13">{<block_content pos:start="65:17" pos:end="69:39">

                <expr_stmt pos:start="65:17" pos:end="67:87"><expr pos:start="65:17" pos:end="67:86"><call pos:start="65:17" pos:end="67:86"><name pos:start="65:17" pos:end="65:22">av_log</name><argument_list pos:start="65:23" pos:end="67:86">(<argument pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">ctx</name></expr></argument>, <argument pos:start="65:29" pos:end="65:40"><expr pos:start="65:29" pos:end="65:40"><name pos:start="65:29" pos:end="65:40">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="67:24" pos:end="67:79"><expr pos:start="67:24" pos:end="67:79"><literal type="string" pos:start="67:24" pos:end="67:79">"Channel \"%.8s\" does not exist in the chosen layout\n"</literal></expr></argument>, <argument pos:start="67:82" pos:end="67:85"><expr pos:start="67:82" pos:end="67:85"><name pos:start="67:82" pos:end="67:85">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="69:17" pos:end="69:39">return <expr pos:start="69:24" pos:end="69:38"><call pos:start="69:24" pos:end="69:38"><name pos:start="69:24" pos:end="69:30">AVERROR</name><argument_list pos:start="69:31" pos:end="69:38">(<argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="73:13" pos:end="79:58">/* get the channel number in the output channel layout:

             * out_channel_layout &amp; ((1 &lt;&lt; out_ch_id) - 1) are all the

             * channels that come before out_ch_id,

             * so their count is the index of out_ch_id */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:117"><expr pos:start="81:13" pos:end="81:116"><name pos:start="81:13" pos:end="81:21">out_ch_id</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <call pos:start="81:25" pos:end="81:116"><name pos:start="81:25" pos:end="81:57">av_get_channel_layout_nb_channels</name><argument_list pos:start="81:58" pos:end="81:116">(<argument pos:start="81:59" pos:end="81:115"><expr pos:start="81:59" pos:end="81:115"><name pos:start="81:59" pos:end="81:81"><name pos:start="81:59" pos:end="81:61">pan</name><operator pos:start="81:62" pos:end="81:63">-&gt;</operator><name pos:start="81:64" pos:end="81:81">out_channel_layout</name></name> <operator pos:start="81:83" pos:end="81:83">&amp;</operator> <operator pos:start="81:85" pos:end="81:85">(</operator><operator pos:start="81:86" pos:end="81:86">(</operator><operator pos:start="81:87" pos:end="81:87">(</operator><name pos:start="81:88" pos:end="81:94">int64_t</name><operator pos:start="81:95" pos:end="81:95">)</operator><literal type="number" pos:start="81:96" pos:end="81:96">1</literal> <operator pos:start="81:98" pos:end="81:99">&lt;&lt;</operator> <name pos:start="81:101" pos:end="81:109">out_ch_id</name><operator pos:start="81:110" pos:end="81:110">)</operator> <operator pos:start="81:112" pos:end="81:112">-</operator> <literal type="number" pos:start="81:114" pos:end="81:114">1</literal><operator pos:start="81:115" pos:end="81:115">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:66">(<expr pos:start="85:13" pos:end="85:65"><name pos:start="85:13" pos:end="85:21">out_ch_id</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <literal type="number" pos:start="85:25" pos:end="85:25">0</literal> <operator pos:start="85:27" pos:end="85:28">||</operator> <name pos:start="85:30" pos:end="85:38">out_ch_id</name> <operator pos:start="85:40" pos:end="85:41">&gt;=</operator> <name pos:start="85:43" pos:end="85:65"><name pos:start="85:43" pos:end="85:45">pan</name><operator pos:start="85:46" pos:end="85:47">-&gt;</operator><name pos:start="85:48" pos:end="85:65">nb_output_channels</name></name></expr>)</condition> <block pos:start="85:68" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:35">

            <expr_stmt pos:start="87:13" pos:end="89:64"><expr pos:start="87:13" pos:end="89:63"><call pos:start="87:13" pos:end="89:63"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="89:63">(<argument pos:start="87:20" pos:end="87:22"><expr pos:start="87:20" pos:end="87:22"><name pos:start="87:20" pos:end="87:22">ctx</name></expr></argument>, <argument pos:start="87:25" pos:end="87:36"><expr pos:start="87:25" pos:end="87:36"><name pos:start="87:25" pos:end="87:36">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="89:20" pos:end="89:56"><expr pos:start="89:20" pos:end="89:56"><literal type="string" pos:start="89:20" pos:end="89:56">"Invalid out channel name \"%.8s\"\n"</literal></expr></argument>, <argument pos:start="89:59" pos:end="89:62"><expr pos:start="89:59" pos:end="89:62"><name pos:start="89:59" pos:end="89:62">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:35">return <expr pos:start="91:20" pos:end="91:34"><call pos:start="91:20" pos:end="91:34"><name pos:start="91:20" pos:end="91:26">AVERROR</name><argument_list pos:start="91:27" pos:end="91:34">(<argument pos:start="91:28" pos:end="91:33"><expr pos:start="91:28" pos:end="91:33"><name pos:start="91:28" pos:end="91:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="113:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:24">(<expr pos:start="95:13" pos:end="95:23"><operator pos:start="95:13" pos:end="95:13">*</operator><name pos:start="95:14" pos:end="95:16">arg</name> <operator pos:start="95:18" pos:end="95:19">==</operator> <literal type="char" pos:start="95:21" pos:end="95:23">'='</literal></expr>)</condition> <block pos:start="95:26" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:18">

            <expr_stmt pos:start="97:13" pos:end="97:18"><expr pos:start="97:13" pos:end="97:17"><name pos:start="97:13" pos:end="97:15">arg</name><operator pos:start="97:16" pos:end="97:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="99:11" pos:end="105:9">else if <condition pos:start="99:19" pos:end="99:31">(<expr pos:start="99:20" pos:end="99:30"><operator pos:start="99:20" pos:end="99:20">*</operator><name pos:start="99:21" pos:end="99:23">arg</name> <operator pos:start="99:25" pos:end="99:26">==</operator> <literal type="char" pos:start="99:28" pos:end="99:30">'&lt;'</literal></expr>)</condition> <block pos:start="99:33" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:18">

            <expr_stmt pos:start="101:13" pos:end="101:56"><expr pos:start="101:13" pos:end="101:55"><name pos:start="101:13" pos:end="101:28"><name pos:start="101:13" pos:end="101:15">pan</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:28">need_renorm</name></name> <operator pos:start="101:30" pos:end="101:31">|=</operator> <operator pos:start="101:33" pos:end="101:33">(</operator><name pos:start="101:34" pos:end="101:40">int64_t</name><operator pos:start="101:41" pos:end="101:41">)</operator><literal type="number" pos:start="101:42" pos:end="101:42">1</literal> <operator pos:start="101:44" pos:end="101:45">&lt;&lt;</operator> <name pos:start="101:47" pos:end="101:55">out_ch_id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:18"><expr pos:start="103:13" pos:end="103:17"><name pos:start="103:13" pos:end="103:15">arg</name><operator pos:start="103:16" pos:end="103:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="113:9">else <block pos:start="105:16" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:35">

            <expr_stmt pos:start="107:13" pos:end="109:74"><expr pos:start="107:13" pos:end="109:73"><call pos:start="107:13" pos:end="109:73"><name pos:start="107:13" pos:end="107:18">av_log</name><argument_list pos:start="107:19" pos:end="109:73">(<argument pos:start="107:20" pos:end="107:22"><expr pos:start="107:20" pos:end="107:22"><name pos:start="107:20" pos:end="107:22">ctx</name></expr></argument>, <argument pos:start="107:25" pos:end="107:36"><expr pos:start="107:25" pos:end="107:36"><name pos:start="107:25" pos:end="107:36">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:66"><expr pos:start="109:20" pos:end="109:66"><literal type="string" pos:start="109:20" pos:end="109:66">"Syntax error after channel name in \"%.8s\"\n"</literal></expr></argument>, <argument pos:start="109:69" pos:end="109:72"><expr pos:start="109:69" pos:end="109:72"><name pos:start="109:69" pos:end="109:72">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:35">return <expr pos:start="111:20" pos:end="111:34"><call pos:start="111:20" pos:end="111:34"><name pos:start="111:20" pos:end="111:26">AVERROR</name><argument_list pos:start="111:27" pos:end="111:34">(<argument pos:start="111:28" pos:end="111:33"><expr pos:start="111:28" pos:end="111:33"><name pos:start="111:28" pos:end="111:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="115:9" pos:end="115:19">/* gains */</comment>

        <while pos:start="117:9" pos:end="165:9">while <condition pos:start="117:15" pos:end="117:17">(<expr pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">1</literal></expr>)</condition> <block pos:start="117:19" pos:end="165:9">{<block_content pos:start="119:13" pos:end="163:30">

            <expr_stmt pos:start="119:13" pos:end="119:21"><expr pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:16">gain</name> <operator pos:start="119:18" pos:end="119:18">=</operator> <literal type="number" pos:start="119:20" pos:end="119:20">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="123:27"><if pos:start="121:13" pos:end="123:27">if <condition pos:start="121:16" pos:end="121:62">(<expr pos:start="121:17" pos:end="121:61"><call pos:start="121:17" pos:end="121:61"><name pos:start="121:17" pos:end="121:22">sscanf</name><argument_list pos:start="121:23" pos:end="121:61">(<argument pos:start="121:24" pos:end="121:26"><expr pos:start="121:24" pos:end="121:26"><name pos:start="121:24" pos:end="121:26">arg</name></expr></argument>, <argument pos:start="121:29" pos:end="121:41"><expr pos:start="121:29" pos:end="121:41"><literal type="string" pos:start="121:29" pos:end="121:41">" %lf %n* %n"</literal></expr></argument>, <argument pos:start="121:44" pos:end="121:48"><expr pos:start="121:44" pos:end="121:48"><operator pos:start="121:44" pos:end="121:44">&amp;</operator><name pos:start="121:45" pos:end="121:48">gain</name></expr></argument>, <argument pos:start="121:51" pos:end="121:54"><expr pos:start="121:51" pos:end="121:54"><operator pos:start="121:51" pos:end="121:51">&amp;</operator><name pos:start="121:52" pos:end="121:54">len</name></expr></argument>, <argument pos:start="121:57" pos:end="121:60"><expr pos:start="121:57" pos:end="121:60"><operator pos:start="121:57" pos:end="121:57">&amp;</operator><name pos:start="121:58" pos:end="121:60">len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:27"><block_content pos:start="123:17" pos:end="123:27">

                <expr_stmt pos:start="123:17" pos:end="123:27"><expr pos:start="123:17" pos:end="123:26"><name pos:start="123:17" pos:end="123:19">arg</name> <operator pos:start="123:21" pos:end="123:22">+=</operator> <name pos:start="123:24" pos:end="123:26">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="125:13" pos:end="133:13"><if pos:start="125:13" pos:end="133:13">if <condition pos:start="125:16" pos:end="125:60">(<expr pos:start="125:17" pos:end="125:59"><call pos:start="125:17" pos:end="125:59"><name pos:start="125:17" pos:end="125:34">parse_channel_name</name><argument_list pos:start="125:35" pos:end="125:59">(<argument pos:start="125:36" pos:end="125:39"><expr pos:start="125:36" pos:end="125:39"><operator pos:start="125:36" pos:end="125:36">&amp;</operator><name pos:start="125:37" pos:end="125:39">arg</name></expr></argument>, <argument pos:start="125:42" pos:end="125:50"><expr pos:start="125:42" pos:end="125:50"><operator pos:start="125:42" pos:end="125:42">&amp;</operator><name pos:start="125:43" pos:end="125:50">in_ch_id</name></expr></argument>, <argument pos:start="125:53" pos:end="125:58"><expr pos:start="125:53" pos:end="125:58"><operator pos:start="125:53" pos:end="125:53">&amp;</operator><name pos:start="125:54" pos:end="125:58">named</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="125:61" pos:end="133:13">{<block_content pos:start="127:17" pos:end="131:39">

                <expr_stmt pos:start="127:17" pos:end="129:72"><expr pos:start="127:17" pos:end="129:71"><call pos:start="127:17" pos:end="129:71"><name pos:start="127:17" pos:end="127:22">av_log</name><argument_list pos:start="127:23" pos:end="129:71">(<argument pos:start="127:24" pos:end="127:26"><expr pos:start="127:24" pos:end="127:26"><name pos:start="127:24" pos:end="127:26">ctx</name></expr></argument>, <argument pos:start="127:29" pos:end="127:40"><expr pos:start="127:29" pos:end="127:40"><name pos:start="127:29" pos:end="127:40">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="129:24" pos:end="129:65"><expr pos:start="129:24" pos:end="129:65"><literal type="string" pos:start="129:24" pos:end="129:65">"Expected in channel name, got \"%.8s\"\n"</literal></expr></argument>, <argument pos:start="129:68" pos:end="129:70"><expr pos:start="129:68" pos:end="129:70"><name pos:start="129:68" pos:end="129:70">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="131:17" pos:end="131:39">return <expr pos:start="131:24" pos:end="131:38"><call pos:start="131:24" pos:end="131:38"><name pos:start="131:24" pos:end="131:30">AVERROR</name><argument_list pos:start="131:31" pos:end="131:38">(<argument pos:start="131:32" pos:end="131:37"><expr pos:start="131:32" pos:end="131:37"><name pos:start="131:32" pos:end="131:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:36"><expr pos:start="135:13" pos:end="135:35"><name pos:start="135:13" pos:end="135:33"><name pos:start="135:13" pos:end="135:26">nb_in_channels</name><index pos:start="135:27" pos:end="135:33">[<expr pos:start="135:28" pos:end="135:32"><name pos:start="135:28" pos:end="135:32">named</name></expr>]</index></name><operator pos:start="135:34" pos:end="135:35">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="145:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:39">(<expr pos:start="137:17" pos:end="137:38"><name pos:start="137:17" pos:end="137:38"><name pos:start="137:17" pos:end="137:30">nb_in_channels</name><index pos:start="137:31" pos:end="137:38">[<expr pos:start="137:32" pos:end="137:37"><operator pos:start="137:32" pos:end="137:32">!</operator><name pos:start="137:33" pos:end="137:37">named</name></expr>]</index></name></expr>)</condition> <block pos:start="137:41" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:39">

                <expr_stmt pos:start="139:17" pos:end="141:68"><expr pos:start="139:17" pos:end="141:67"><call pos:start="139:17" pos:end="141:67"><name pos:start="139:17" pos:end="139:22">av_log</name><argument_list pos:start="139:23" pos:end="141:67">(<argument pos:start="139:24" pos:end="139:26"><expr pos:start="139:24" pos:end="139:26"><name pos:start="139:24" pos:end="139:26">ctx</name></expr></argument>, <argument pos:start="139:29" pos:end="139:40"><expr pos:start="139:29" pos:end="139:40"><name pos:start="139:29" pos:end="139:40">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="141:24" pos:end="141:66"><expr pos:start="141:24" pos:end="141:66"><literal type="string" pos:start="141:24" pos:end="141:66">"Can not mix named and numbered channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="143:17" pos:end="143:39">return <expr pos:start="143:24" pos:end="143:38"><call pos:start="143:24" pos:end="143:38"><name pos:start="143:24" pos:end="143:30">AVERROR</name><argument_list pos:start="143:31" pos:end="143:38">(<argument pos:start="143:32" pos:end="143:37"><expr pos:start="143:32" pos:end="143:37"><name pos:start="143:32" pos:end="143:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:50"><expr pos:start="147:13" pos:end="147:49"><name pos:start="147:13" pos:end="147:42"><name pos:start="147:13" pos:end="147:15">pan</name><operator pos:start="147:16" pos:end="147:17">-&gt;</operator><name pos:start="147:18" pos:end="147:21">gain</name><index pos:start="147:22" pos:end="147:32">[<expr pos:start="147:23" pos:end="147:31"><name pos:start="147:23" pos:end="147:31">out_ch_id</name></expr>]</index><index pos:start="147:33" pos:end="147:42">[<expr pos:start="147:34" pos:end="147:41"><name pos:start="147:34" pos:end="147:41">in_ch_id</name></expr>]</index></name> <operator pos:start="147:44" pos:end="147:44">=</operator> <name pos:start="147:46" pos:end="147:49">gain</name></expr>;</expr_stmt>

            <if_stmt pos:start="149:13" pos:end="151:22"><if pos:start="149:13" pos:end="151:22">if <condition pos:start="149:16" pos:end="149:22">(<expr pos:start="149:17" pos:end="149:21"><operator pos:start="149:17" pos:end="149:17">!</operator><operator pos:start="149:18" pos:end="149:18">*</operator><name pos:start="149:19" pos:end="149:21">arg</name></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:22"><block_content pos:start="151:17" pos:end="151:22">

                <break pos:start="151:17" pos:end="151:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="153:13" pos:end="159:13"><if pos:start="153:13" pos:end="159:13">if <condition pos:start="153:16" pos:end="153:28">(<expr pos:start="153:17" pos:end="153:27"><operator pos:start="153:17" pos:end="153:17">*</operator><name pos:start="153:18" pos:end="153:20">arg</name> <operator pos:start="153:22" pos:end="153:23">!=</operator> <literal type="char" pos:start="153:25" pos:end="153:27">'+'</literal></expr>)</condition> <block pos:start="153:30" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:39">

                <expr_stmt pos:start="155:17" pos:end="155:79"><expr pos:start="155:17" pos:end="155:78"><call pos:start="155:17" pos:end="155:78"><name pos:start="155:17" pos:end="155:22">av_log</name><argument_list pos:start="155:23" pos:end="155:78">(<argument pos:start="155:24" pos:end="155:26"><expr pos:start="155:24" pos:end="155:26"><name pos:start="155:24" pos:end="155:26">ctx</name></expr></argument>, <argument pos:start="155:29" pos:end="155:40"><expr pos:start="155:29" pos:end="155:40"><name pos:start="155:29" pos:end="155:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="155:43" pos:end="155:72"><expr pos:start="155:43" pos:end="155:72"><literal type="string" pos:start="155:43" pos:end="155:72">"Syntax error near \"%.8s\"\n"</literal></expr></argument>, <argument pos:start="155:75" pos:end="155:77"><expr pos:start="155:75" pos:end="155:77"><name pos:start="155:75" pos:end="155:77">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="157:17" pos:end="157:39">return <expr pos:start="157:24" pos:end="157:38"><call pos:start="157:24" pos:end="157:38"><name pos:start="157:24" pos:end="157:30">AVERROR</name><argument_list pos:start="157:31" pos:end="157:38">(<argument pos:start="157:32" pos:end="157:37"><expr pos:start="157:32" pos:end="157:37"><name pos:start="157:32" pos:end="157:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:18"><expr pos:start="161:13" pos:end="161:17"><name pos:start="161:13" pos:end="161:15">arg</name><operator pos:start="161:16" pos:end="161:17">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:30"><expr pos:start="163:13" pos:end="163:29"><call pos:start="163:13" pos:end="163:29"><name pos:start="163:13" pos:end="163:23">skip_spaces</name><argument_list pos:start="163:24" pos:end="163:29">(<argument pos:start="163:25" pos:end="163:28"><expr pos:start="163:25" pos:end="163:28"><operator pos:start="163:25" pos:end="163:25">&amp;</operator><name pos:start="163:26" pos:end="163:28">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></while>

    <expr_stmt pos:start="169:5" pos:end="169:45"><expr pos:start="169:5" pos:end="169:44"><name pos:start="169:5" pos:end="169:22"><name pos:start="169:5" pos:end="169:7">pan</name><operator pos:start="169:8" pos:end="169:9">-&gt;</operator><name pos:start="169:10" pos:end="169:22">need_renumber</name></name> <operator pos:start="169:24" pos:end="169:24">=</operator> <operator pos:start="169:26" pos:end="169:26">!</operator><operator pos:start="169:27" pos:end="169:27">!</operator><name pos:start="169:28" pos:end="169:44"><name pos:start="169:28" pos:end="169:41">nb_in_channels</name><index pos:start="169:42" pos:end="169:44">[<expr pos:start="169:43" pos:end="169:43"><literal type="number" pos:start="169:43" pos:end="169:43">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:18"><expr pos:start="173:5" pos:end="173:17"><call pos:start="173:5" pos:end="173:17"><name pos:start="173:5" pos:end="173:11">av_free</name><argument_list pos:start="173:12" pos:end="173:17">(<argument pos:start="173:13" pos:end="173:16"><expr pos:start="173:13" pos:end="173:16"><name pos:start="173:13" pos:end="173:16">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:13">return <expr pos:start="175:12" pos:end="175:12"><literal type="number" pos:start="175:12" pos:end="175:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
