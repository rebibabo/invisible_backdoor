<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12331.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">omap_tcmi_write</name><parameter_list pos:start="1:28" pos:end="3:58">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:65"><decl pos:start="1:43" pos:end="1:65"><type pos:start="1:43" pos:end="1:65"><name pos:start="1:43" pos:end="1:60">target_phys_addr_t</name></type> <name pos:start="1:62" pos:end="1:65">addr</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:36">uint64_t</name></type> <name pos:start="3:38" pos:end="3:42">value</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:52">unsigned</name></type> <name pos:start="3:54" pos:end="3:57">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:5">

    <decl_stmt pos:start="7:5" pos:end="7:68"><decl pos:start="7:5" pos:end="7:67"><type pos:start="7:5" pos:end="7:29"><name pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:27">omap_mpu_state_s</name></name> <modifier pos:start="7:29" pos:end="7:29">*</modifier></type><name pos:start="7:30" pos:end="7:30">s</name> <init pos:start="7:32" pos:end="7:67">= <expr pos:start="7:34" pos:end="7:67"><operator pos:start="7:34" pos:end="7:34">(</operator>struct <name pos:start="7:42" pos:end="7:57">omap_mpu_state_s</name> <operator pos:start="7:59" pos:end="7:59">*</operator><operator pos:start="7:60" pos:end="7:60">)</operator> <name pos:start="7:62" pos:end="7:67">opaque</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:18">(<expr pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:12">size</name> <operator pos:start="11:14" pos:end="11:15">!=</operator> <literal type="number" pos:start="11:17" pos:end="11:17">4</literal></expr>)</condition> <block pos:start="11:20" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:58">

        <return pos:start="13:9" pos:end="13:58">return <expr pos:start="13:16" pos:end="13:57"><call pos:start="13:16" pos:end="13:57"><name pos:start="13:16" pos:end="13:36">omap_badwidth_write32</name><argument_list pos:start="13:37" pos:end="13:57">(<argument pos:start="13:38" pos:end="13:43"><expr pos:start="13:38" pos:end="13:43"><name pos:start="13:38" pos:end="13:43">opaque</name></expr></argument>, <argument pos:start="13:46" pos:end="13:49"><expr pos:start="13:46" pos:end="13:49"><name pos:start="13:46" pos:end="13:49">addr</name></expr></argument>, <argument pos:start="13:52" pos:end="13:56"><expr pos:start="13:52" pos:end="13:56"><name pos:start="13:52" pos:end="13:56">value</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="19:5" pos:end="65:5">switch <condition pos:start="19:12" pos:end="19:17">(<expr pos:start="19:13" pos:end="19:16"><name pos:start="19:13" pos:end="19:16">addr</name></expr>)</condition> <block pos:start="19:19" pos:end="65:5">{<block_content pos:start="21:5" pos:end="63:27">

    <case pos:start="21:5" pos:end="21:14">case <expr pos:start="21:10" pos:end="21:13"><literal type="number" pos:start="21:10" pos:end="21:13">0x00</literal></expr>:</case>	<comment type="block" pos:start="21:17" pos:end="21:31">/* IMIF_PRIO */</comment>

    <case pos:start="23:5" pos:end="23:14">case <expr pos:start="23:10" pos:end="23:13"><literal type="number" pos:start="23:10" pos:end="23:13">0x04</literal></expr>:</case>	<comment type="block" pos:start="23:17" pos:end="23:32">/* EMIFS_PRIO */</comment>

    <case pos:start="25:5" pos:end="25:14">case <expr pos:start="25:10" pos:end="25:13"><literal type="number" pos:start="25:10" pos:end="25:13">0x08</literal></expr>:</case>	<comment type="block" pos:start="25:17" pos:end="25:32">/* EMIFF_PRIO */</comment>

    <case pos:start="27:5" pos:end="27:14">case <expr pos:start="27:10" pos:end="27:13"><literal type="number" pos:start="27:10" pos:end="27:13">0x10</literal></expr>:</case>	<comment type="block" pos:start="27:17" pos:end="27:38">/* EMIFS_CS0_CONFIG */</comment>

    <case pos:start="29:5" pos:end="29:14">case <expr pos:start="29:10" pos:end="29:13"><literal type="number" pos:start="29:10" pos:end="29:13">0x14</literal></expr>:</case>	<comment type="block" pos:start="29:17" pos:end="29:38">/* EMIFS_CS1_CONFIG */</comment>

    <case pos:start="31:5" pos:end="31:14">case <expr pos:start="31:10" pos:end="31:13"><literal type="number" pos:start="31:10" pos:end="31:13">0x18</literal></expr>:</case>	<comment type="block" pos:start="31:17" pos:end="31:38">/* EMIFS_CS2_CONFIG */</comment>

    <case pos:start="33:5" pos:end="33:14">case <expr pos:start="33:10" pos:end="33:13"><literal type="number" pos:start="33:10" pos:end="33:13">0x1c</literal></expr>:</case>	<comment type="block" pos:start="33:17" pos:end="33:38">/* EMIFS_CS3_CONFIG */</comment>

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0x20</literal></expr>:</case>	<comment type="block" pos:start="35:17" pos:end="35:40">/* EMIFF_SDRAM_CONFIG */</comment>

    <case pos:start="37:5" pos:end="37:14">case <expr pos:start="37:10" pos:end="37:13"><literal type="number" pos:start="37:10" pos:end="37:13">0x24</literal></expr>:</case>	<comment type="block" pos:start="37:17" pos:end="37:31">/* EMIFF_MRS */</comment>

    <case pos:start="39:5" pos:end="39:14">case <expr pos:start="39:10" pos:end="39:13"><literal type="number" pos:start="39:10" pos:end="39:13">0x28</literal></expr>:</case>	<comment type="block" pos:start="39:17" pos:end="39:30">/* TIMEOUT1 */</comment>

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0x2c</literal></expr>:</case>	<comment type="block" pos:start="41:17" pos:end="41:30">/* TIMEOUT2 */</comment>

    <case pos:start="43:5" pos:end="43:14">case <expr pos:start="43:10" pos:end="43:13"><literal type="number" pos:start="43:10" pos:end="43:13">0x30</literal></expr>:</case>	<comment type="block" pos:start="43:17" pos:end="43:30">/* TIMEOUT3 */</comment>

    <case pos:start="45:5" pos:end="45:14">case <expr pos:start="45:10" pos:end="45:13"><literal type="number" pos:start="45:10" pos:end="45:13">0x3c</literal></expr>:</case>	<comment type="block" pos:start="45:17" pos:end="45:42">/* EMIFF_SDRAM_CONFIG_2 */</comment>

    <case pos:start="47:5" pos:end="47:14">case <expr pos:start="47:10" pos:end="47:13"><literal type="number" pos:start="47:10" pos:end="47:13">0x40</literal></expr>:</case>	<comment type="block" pos:start="47:17" pos:end="47:40">/* EMIFS_CFG_DYN_WAIT */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:20">tcmi_regs</name><index pos:start="49:21" pos:end="49:31">[<expr pos:start="49:22" pos:end="49:30"><name pos:start="49:22" pos:end="49:25">addr</name> <operator pos:start="49:27" pos:end="49:28">&gt;&gt;</operator> <literal type="number" pos:start="49:30" pos:end="49:30">2</literal></expr>]</index></name> <operator pos:start="49:33" pos:end="49:33">=</operator> <name pos:start="49:35" pos:end="49:39">value</name></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:14">case <expr pos:start="53:10" pos:end="53:13"><literal type="number" pos:start="53:10" pos:end="53:13">0x0c</literal></expr>:</case>	<comment type="block" pos:start="53:17" pos:end="53:34">/* EMIFS_CONFIG */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:59"><expr pos:start="55:9" pos:end="55:58"><name pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:20">tcmi_regs</name><index pos:start="55:21" pos:end="55:31">[<expr pos:start="55:22" pos:end="55:30"><name pos:start="55:22" pos:end="55:25">addr</name> <operator pos:start="55:27" pos:end="55:28">&gt;&gt;</operator> <literal type="number" pos:start="55:30" pos:end="55:30">2</literal></expr>]</index></name> <operator pos:start="55:33" pos:end="55:33">=</operator> <operator pos:start="55:35" pos:end="55:35">(</operator><name pos:start="55:36" pos:end="55:40">value</name> <operator pos:start="55:42" pos:end="55:42">&amp;</operator> <literal type="number" pos:start="55:44" pos:end="55:46">0xf</literal><operator pos:start="55:47" pos:end="55:47">)</operator> <operator pos:start="55:49" pos:end="55:49">|</operator> <operator pos:start="55:51" pos:end="55:51">(</operator><literal type="number" pos:start="55:52" pos:end="55:52">1</literal> <operator pos:start="55:54" pos:end="55:55">&lt;&lt;</operator> <literal type="number" pos:start="55:57" pos:end="55:57">4</literal><operator pos:start="55:58" pos:end="55:58">)</operator></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>



    <default pos:start="61:5" pos:end="61:12">default:</default>

        <expr_stmt pos:start="63:9" pos:end="63:27"><expr pos:start="63:9" pos:end="63:26"><call pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:20">OMAP_BAD_REG</name><argument_list pos:start="63:21" pos:end="63:26">(<argument pos:start="63:22" pos:end="63:25"><expr pos:start="63:22" pos:end="63:25"><name pos:start="63:22" pos:end="63:25">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
