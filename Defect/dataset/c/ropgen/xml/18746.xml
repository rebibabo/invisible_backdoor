<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18746.c" pos:tabs="8"><function pos:start="1:1" pos:end="679:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="9:60">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:31">ram_addr_t</name></type> <name pos:start="1:33" pos:end="1:40">ram_size</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:58"><decl pos:start="1:43" pos:end="1:58"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:58">vga_ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:62"><decl pos:start="3:47" pos:end="3:62"><type pos:start="3:47" pos:end="3:62"><name pos:start="3:47" pos:end="3:58">DisplayState</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:62">ds</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>,

                     <parameter pos:start="9:22" pos:end="9:36"><decl pos:start="9:22" pos:end="9:36"><type pos:start="9:22" pos:end="9:36"><name pos:start="9:22" pos:end="9:24">int</name></type> <name pos:start="9:26" pos:end="9:36">pci_enabled</name></decl></parameter>, <parameter pos:start="9:39" pos:end="9:59"><decl pos:start="9:39" pos:end="9:59"><type pos:start="9:39" pos:end="9:59"><specifier pos:start="9:39" pos:end="9:43">const</specifier> <name pos:start="9:45" pos:end="9:48">char</name> <modifier pos:start="9:50" pos:end="9:50">*</modifier></type><name pos:start="9:51" pos:end="9:59">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="679:1">{<block_content pos:start="13:5" pos:end="677:5">

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:12">buf</name><index pos:start="13:13" pos:end="13:18">[<expr pos:start="13:14" pos:end="13:17"><literal type="number" pos:start="13:14" pos:end="13:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:23">linux_boot</name></decl>, <decl pos:start="15:26" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:26" pos:end="15:26">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:68"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">ram_addr_t</name></type> <name pos:start="17:16" pos:end="17:23">ram_addr</name></decl>, <decl pos:start="17:26" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:26" pos:end="17:37">vga_ram_addr</name></decl>, <decl pos:start="17:40" pos:end="17:50"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:40" pos:end="17:50">bios_offset</name></decl>, <decl pos:start="17:53" pos:end="17:67"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:53" pos:end="17:67">vga_bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:56"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:14">ram_addr_t</name></type> <name pos:start="19:16" pos:end="19:32">below_4g_mem_size</name></decl>, <decl pos:start="19:35" pos:end="19:55"><type ref="prev" pos:start="19:5" pos:end="19:14"/><name pos:start="19:35" pos:end="19:51">above_4g_mem_size</name> <init pos:start="19:53" pos:end="19:55">= <expr pos:start="19:55" pos:end="19:55"><literal type="number" pos:start="19:55" pos:end="19:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:48"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:17">bios_size</name></decl>, <decl pos:start="21:20" pos:end="21:32"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:20" pos:end="21:32">isa_bios_size</name></decl>, <decl pos:start="21:35" pos:end="21:47"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:35" pos:end="21:47">vga_bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:10">PCIBus</name> <modifier pos:start="23:12" pos:end="23:12">*</modifier></type><name pos:start="23:13" pos:end="23:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:19">piix3_devfn</name> <init pos:start="25:21" pos:end="25:24">= <expr pos:start="25:23" pos:end="25:24"><operator pos:start="25:23" pos:end="25:23">-</operator><literal type="number" pos:start="25:24" pos:end="25:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">CPUState</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:16"><decl pos:start="29:5" pos:end="29:15"><type pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:11">NICInfo</name> <modifier pos:start="29:13" pos:end="29:13">*</modifier></type><name pos:start="29:14" pos:end="29:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">qemu_irq</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:14"><decl pos:start="35:5" pos:end="35:13"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:53"><decl pos:start="37:5" pos:end="37:52"><type pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:20">BlockDriverState</name> <modifier pos:start="37:22" pos:end="37:22">*</modifier></type><name pos:start="37:23" pos:end="37:52"><name pos:start="37:23" pos:end="37:24">hd</name><index pos:start="37:25" pos:end="37:52">[<expr pos:start="37:26" pos:end="37:51"><name pos:start="37:26" pos:end="37:36">MAX_IDE_BUS</name> <operator pos:start="37:38" pos:end="37:38">*</operator> <name pos:start="37:40" pos:end="37:51">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:33"><decl pos:start="39:5" pos:end="39:32"><type pos:start="39:5" pos:end="39:22"><name pos:start="39:5" pos:end="39:20">BlockDriverState</name> <modifier pos:start="39:22" pos:end="39:22">*</modifier></type><name pos:start="39:23" pos:end="39:32"><name pos:start="39:23" pos:end="39:24">fd</name><index pos:start="39:25" pos:end="39:32">[<expr pos:start="39:26" pos:end="39:31"><name pos:start="39:26" pos:end="39:31">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:32">(<expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:16">ram_size</name> <operator pos:start="43:18" pos:end="43:19">&gt;=</operator> <literal type="number" pos:start="43:21" pos:end="43:30">0xe0000000</literal></expr> )</condition> <block pos:start="43:34" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:39">

        <expr_stmt pos:start="45:9" pos:end="45:50"><expr pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:25">above_4g_mem_size</name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:36">ram_size</name> <operator pos:start="45:38" pos:end="45:38">-</operator> <literal type="number" pos:start="45:40" pos:end="45:49">0xe0000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:25">below_4g_mem_size</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <literal type="number" pos:start="47:29" pos:end="47:38">0xe0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="53:5">else <block pos:start="49:12" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:37">

        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:25">below_4g_mem_size</name> <operator pos:start="51:27" pos:end="51:27">=</operator> <name pos:start="51:29" pos:end="51:36">ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:14">linux_boot</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:33">kernel_filename</name> <operator pos:start="57:35" pos:end="57:36">!=</operator> <name pos:start="57:38" pos:end="57:41">NULL</name><operator pos:start="57:42" pos:end="57:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:19">/* init CPUs */</comment>

    <if_stmt pos:start="63:5" pos:end="75:5"><if pos:start="63:5" pos:end="75:5">if <condition pos:start="63:8" pos:end="63:26">(<expr pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:17">cpu_model</name> <operator pos:start="63:19" pos:end="63:20">==</operator> <name pos:start="63:22" pos:end="63:25">NULL</name></expr>)</condition> <block pos:start="63:28" pos:end="75:5">{<block_content pos:start="67:9" pos:end="74:0">

<cpp:ifdef pos:start="65:1" pos:end="65:20">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:20">TARGET_X86_64</name></cpp:ifdef>

        <expr_stmt pos:start="67:9" pos:end="70:0"><expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:17">cpu_model</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="string" pos:start="67:21" pos:end="67:28">"qemu64"</literal></expr>;</expr_stmt>

<cpp:else pos:start="69:1" pos:end="69:5">#<cpp:directive pos:start="69:2" pos:end="69:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="71:9" pos:end="74:0"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:17">cpu_model</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <literal type="string" pos:start="71:21" pos:end="71:28">"qemu32"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    

    <for pos:start="79:5" pos:end="111:5">for<control pos:start="79:8" pos:end="79:33">(<init pos:start="79:9" pos:end="79:14"><expr pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:9">i</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <literal type="number" pos:start="79:13" pos:end="79:13">0</literal></expr>;</init> <condition pos:start="79:16" pos:end="79:28"><expr pos:start="79:16" pos:end="79:27"><name pos:start="79:16" pos:end="79:16">i</name> <operator pos:start="79:18" pos:end="79:18">&lt;</operator> <name pos:start="79:20" pos:end="79:27">smp_cpus</name></expr>;</condition> <incr pos:start="79:30" pos:end="79:32"><expr pos:start="79:30" pos:end="79:32"><name pos:start="79:30" pos:end="79:30">i</name><operator pos:start="79:31" pos:end="79:32">++</operator></expr></incr>)</control> <block pos:start="79:35" pos:end="111:5">{<block_content pos:start="81:9" pos:end="109:9">

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:11">env</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:33"><name pos:start="81:15" pos:end="81:22">cpu_init</name><argument_list pos:start="81:23" pos:end="81:33">(<argument pos:start="81:24" pos:end="81:32"><expr pos:start="81:24" pos:end="81:32"><name pos:start="81:24" pos:end="81:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:17">(<expr pos:start="83:13" pos:end="83:16"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:16">env</name></expr>)</condition> <block pos:start="83:19" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:20">

            <expr_stmt pos:start="85:13" pos:end="85:67"><expr pos:start="85:13" pos:end="85:66"><call pos:start="85:13" pos:end="85:66"><name pos:start="85:13" pos:end="85:19">fprintf</name><argument_list pos:start="85:20" pos:end="85:66">(<argument pos:start="85:21" pos:end="85:26"><expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">stderr</name></expr></argument>, <argument pos:start="85:29" pos:end="85:65"><expr pos:start="85:29" pos:end="85:65"><literal type="string" pos:start="85:29" pos:end="85:65">"Unable to find x86 CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><call pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:16">exit</name><argument_list pos:start="87:17" pos:end="87:19">(<argument pos:start="87:18" pos:end="87:18"><expr pos:start="87:18" pos:end="87:18"><literal type="number" pos:start="87:18" pos:end="87:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="93:28"><if pos:start="91:9" pos:end="93:28">if <condition pos:start="91:12" pos:end="91:19">(<expr pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:13">i</name> <operator pos:start="91:15" pos:end="91:16">!=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:28"><block_content pos:start="93:13" pos:end="93:28">

            <expr_stmt pos:start="93:13" pos:end="93:28"><expr pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:15">env</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:23">halted</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <literal type="number" pos:start="93:27" pos:end="93:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:25">(<expr pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:20">smp_cpus</name> <operator pos:start="95:22" pos:end="95:22">&gt;</operator> <literal type="number" pos:start="95:24" pos:end="95:24">1</literal></expr>)</condition> <block pos:start="95:27" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:46">

            <comment type="block" pos:start="97:13" pos:end="97:45">/* XXX: enable it in all cases */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:46"><expr pos:start="99:13" pos:end="99:45"><name pos:start="99:13" pos:end="99:31"><name pos:start="99:13" pos:end="99:15">env</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:31">cpuid_features</name></name> <operator pos:start="99:33" pos:end="99:34">|=</operator> <name pos:start="99:36" pos:end="99:45">CPUID_APIC</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:49"><expr pos:start="103:9" pos:end="103:48"><call pos:start="103:9" pos:end="103:48"><name pos:start="103:9" pos:end="103:27">qemu_register_reset</name><argument_list pos:start="103:28" pos:end="103:48">(<argument pos:start="103:29" pos:end="103:42"><expr pos:start="103:29" pos:end="103:42"><name pos:start="103:29" pos:end="103:42">main_cpu_reset</name></expr></argument>, <argument pos:start="103:45" pos:end="103:47"><expr pos:start="103:45" pos:end="103:47"><name pos:start="103:45" pos:end="103:47">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:24">(<expr pos:start="105:13" pos:end="105:23"><name pos:start="105:13" pos:end="105:23">pci_enabled</name></expr>)</condition> <block pos:start="105:26" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:27">

            <expr_stmt pos:start="107:13" pos:end="107:27"><expr pos:start="107:13" pos:end="107:26"><call pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:21">apic_init</name><argument_list pos:start="107:22" pos:end="107:26">(<argument pos:start="107:23" pos:end="107:25"><expr pos:start="107:23" pos:end="107:25"><name pos:start="107:23" pos:end="107:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="115:5" pos:end="115:18"><expr pos:start="115:5" pos:end="115:17"><call pos:start="115:5" pos:end="115:17"><name pos:start="115:5" pos:end="115:15">vmport_init</name><argument_list pos:start="115:16" pos:end="115:17">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:39"><expr pos:start="121:5" pos:end="121:38"><name pos:start="121:5" pos:end="121:12">ram_addr</name> <operator pos:start="121:14" pos:end="121:14">=</operator> <call pos:start="121:16" pos:end="121:38"><name pos:start="121:16" pos:end="121:29">qemu_ram_alloc</name><argument_list pos:start="121:30" pos:end="121:38">(<argument pos:start="121:31" pos:end="121:37"><expr pos:start="121:31" pos:end="121:37"><literal type="number" pos:start="121:31" pos:end="121:37">0xa0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:55"><expr pos:start="123:5" pos:end="123:54"><call pos:start="123:5" pos:end="123:54"><name pos:start="123:5" pos:end="123:32">cpu_register_physical_memory</name><argument_list pos:start="123:33" pos:end="123:54">(<argument pos:start="123:34" pos:end="123:34"><expr pos:start="123:34" pos:end="123:34"><literal type="number" pos:start="123:34" pos:end="123:34">0</literal></expr></argument>, <argument pos:start="123:37" pos:end="123:43"><expr pos:start="123:37" pos:end="123:43"><literal type="number" pos:start="123:37" pos:end="123:43">0xa0000</literal></expr></argument>, <argument pos:start="123:46" pos:end="123:53"><expr pos:start="123:46" pos:end="123:53"><name pos:start="123:46" pos:end="123:53">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="133:7">/* Allocate, even though we won't register, so we don't break the

     * phys_ram_base + PA assumption. This range includes vga (0xa0000 - 0xc0000),

     * and some bios areas, which will be registered later

     */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:50"><expr pos:start="135:5" pos:end="135:49"><name pos:start="135:5" pos:end="135:12">ram_addr</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <call pos:start="135:16" pos:end="135:49"><name pos:start="135:16" pos:end="135:29">qemu_ram_alloc</name><argument_list pos:start="135:30" pos:end="135:49">(<argument pos:start="135:31" pos:end="135:48"><expr pos:start="135:31" pos:end="135:48"><literal type="number" pos:start="135:31" pos:end="135:40">0x100000</literal> <operator pos:start="135:40" pos:end="135:40">-</operator> <literal type="number" pos:start="135:42" pos:end="135:48">0xa0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:60"><expr pos:start="137:5" pos:end="137:59"><name pos:start="137:5" pos:end="137:12">ram_addr</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <call pos:start="137:16" pos:end="137:59"><name pos:start="137:16" pos:end="137:29">qemu_ram_alloc</name><argument_list pos:start="137:30" pos:end="137:59">(<argument pos:start="137:31" pos:end="137:58"><expr pos:start="137:31" pos:end="137:58"><name pos:start="137:31" pos:end="137:47">below_4g_mem_size</name> <operator pos:start="137:49" pos:end="137:49">-</operator> <literal type="number" pos:start="137:51" pos:end="137:58">0x100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="143:27"><expr pos:start="139:5" pos:end="143:26"><call pos:start="139:5" pos:end="143:26"><name pos:start="139:5" pos:end="139:32">cpu_register_physical_memory</name><argument_list pos:start="139:33" pos:end="143:26">(<argument pos:start="139:34" pos:end="139:41"><expr pos:start="139:34" pos:end="139:41"><literal type="number" pos:start="139:34" pos:end="139:41">0x100000</literal></expr></argument>,

                 <argument pos:start="141:18" pos:end="141:45"><expr pos:start="141:18" pos:end="141:45"><name pos:start="141:18" pos:end="141:34">below_4g_mem_size</name> <operator pos:start="141:36" pos:end="141:36">-</operator> <literal type="number" pos:start="141:38" pos:end="141:45">0x100000</literal></expr></argument>,

                 <argument pos:start="143:18" pos:end="143:25"><expr pos:start="143:18" pos:end="143:25"><name pos:start="143:18" pos:end="143:25">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:39">/* above 4giga memory allocation */</comment>

    <if_stmt pos:start="149:5" pos:end="159:5"><if pos:start="149:5" pos:end="159:5">if <condition pos:start="149:8" pos:end="149:30">(<expr pos:start="149:9" pos:end="149:29"><name pos:start="149:9" pos:end="149:25">above_4g_mem_size</name> <operator pos:start="149:27" pos:end="149:27">&gt;</operator> <literal type="number" pos:start="149:29" pos:end="149:29">0</literal></expr>)</condition> <block pos:start="149:32" pos:end="159:5">{<block_content pos:start="151:9" pos:end="157:47">

        <expr_stmt pos:start="151:9" pos:end="151:53"><expr pos:start="151:9" pos:end="151:52"><name pos:start="151:9" pos:end="151:16">ram_addr</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <call pos:start="151:20" pos:end="151:52"><name pos:start="151:20" pos:end="151:33">qemu_ram_alloc</name><argument_list pos:start="151:34" pos:end="151:52">(<argument pos:start="151:35" pos:end="151:51"><expr pos:start="151:35" pos:end="151:51"><name pos:start="151:35" pos:end="151:51">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="157:47"><expr pos:start="153:9" pos:end="157:46"><call pos:start="153:9" pos:end="157:46"><name pos:start="153:9" pos:end="153:36">cpu_register_physical_memory</name><argument_list pos:start="153:37" pos:end="157:46">(<argument pos:start="153:38" pos:end="153:51"><expr pos:start="153:38" pos:end="153:51"><literal type="number" pos:start="153:38" pos:end="153:51">0x100000000ULL</literal></expr></argument>,

                                     <argument pos:start="155:38" pos:end="155:54"><expr pos:start="155:38" pos:end="155:54"><name pos:start="155:38" pos:end="155:54">above_4g_mem_size</name></expr></argument>,

                                     <argument pos:start="157:38" pos:end="157:45"><expr pos:start="157:38" pos:end="157:45"><name pos:start="157:38" pos:end="157:45">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="165:5" pos:end="165:26">/* allocate VGA RAM */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:48"><expr pos:start="167:5" pos:end="167:47"><name pos:start="167:5" pos:end="167:16">vga_ram_addr</name> <operator pos:start="167:18" pos:end="167:18">=</operator> <call pos:start="167:20" pos:end="167:47"><name pos:start="167:20" pos:end="167:33">qemu_ram_alloc</name><argument_list pos:start="167:34" pos:end="167:47">(<argument pos:start="167:35" pos:end="167:46"><expr pos:start="167:35" pos:end="167:46"><name pos:start="167:35" pos:end="167:46">vga_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:19">/* BIOS load */</comment>

    <if_stmt pos:start="173:5" pos:end="175:34"><if pos:start="173:5" pos:end="175:34">if <condition pos:start="173:8" pos:end="173:26">(<expr pos:start="173:9" pos:end="173:25"><name pos:start="173:9" pos:end="173:17">bios_name</name> <operator pos:start="173:19" pos:end="173:20">==</operator> <name pos:start="173:22" pos:end="173:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:34"><block_content pos:start="175:9" pos:end="175:34">

        <expr_stmt pos:start="175:9" pos:end="175:34"><expr pos:start="175:9" pos:end="175:33"><name pos:start="175:9" pos:end="175:17">bios_name</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <name pos:start="175:21" pos:end="175:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:61"><expr pos:start="177:5" pos:end="177:60"><call pos:start="177:5" pos:end="177:60"><name pos:start="177:5" pos:end="177:12">snprintf</name><argument_list pos:start="177:13" pos:end="177:60">(<argument pos:start="177:14" pos:end="177:16"><expr pos:start="177:14" pos:end="177:16"><name pos:start="177:14" pos:end="177:16">buf</name></expr></argument>, <argument pos:start="177:19" pos:end="177:29"><expr pos:start="177:19" pos:end="177:29"><sizeof pos:start="177:19" pos:end="177:29">sizeof<argument_list pos:start="177:25" pos:end="177:29">(<argument pos:start="177:26" pos:end="177:28"><expr pos:start="177:26" pos:end="177:28"><name pos:start="177:26" pos:end="177:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="177:32" pos:end="177:38"><expr pos:start="177:32" pos:end="177:38"><literal type="string" pos:start="177:32" pos:end="177:38">"%s/%s"</literal></expr></argument>, <argument pos:start="177:41" pos:end="177:48"><expr pos:start="177:41" pos:end="177:48"><name pos:start="177:41" pos:end="177:48">bios_dir</name></expr></argument>, <argument pos:start="177:51" pos:end="177:59"><expr pos:start="177:51" pos:end="177:59"><name pos:start="177:51" pos:end="177:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:36"><expr pos:start="179:5" pos:end="179:35"><name pos:start="179:5" pos:end="179:13">bios_size</name> <operator pos:start="179:15" pos:end="179:15">=</operator> <call pos:start="179:17" pos:end="179:35"><name pos:start="179:17" pos:end="179:30">get_image_size</name><argument_list pos:start="179:31" pos:end="179:35">(<argument pos:start="179:32" pos:end="179:34"><expr pos:start="179:32" pos:end="179:34"><name pos:start="179:32" pos:end="179:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if <condition pos:start="181:8" pos:end="183:33">(<expr pos:start="181:9" pos:end="183:32"><name pos:start="181:9" pos:end="181:17">bios_size</name> <operator pos:start="181:19" pos:end="181:20">&lt;=</operator> <literal type="number" pos:start="181:22" pos:end="181:22">0</literal> <operator pos:start="181:24" pos:end="181:25">||</operator>

        <operator pos:start="183:9" pos:end="183:9">(</operator><name pos:start="183:10" pos:end="183:18">bios_size</name> <operator pos:start="183:20" pos:end="183:20">%</operator> <literal type="number" pos:start="183:22" pos:end="183:26">65536</literal><operator pos:start="183:27" pos:end="183:27">)</operator> <operator pos:start="183:29" pos:end="183:30">!=</operator> <literal type="number" pos:start="183:32" pos:end="183:32">0</literal></expr>)</condition> <block pos:start="183:35" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:24">

        <goto pos:start="185:9" pos:end="185:24">goto <name pos:start="185:14" pos:end="185:23">bios_error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:44"><expr pos:start="189:5" pos:end="189:43"><name pos:start="189:5" pos:end="189:15">bios_offset</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:43"><name pos:start="189:19" pos:end="189:32">qemu_ram_alloc</name><argument_list pos:start="189:33" pos:end="189:43">(<argument pos:start="189:34" pos:end="189:42"><expr pos:start="189:34" pos:end="189:42"><name pos:start="189:34" pos:end="189:42">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:55"><expr pos:start="191:5" pos:end="191:54"><name pos:start="191:5" pos:end="191:7">ret</name> <operator pos:start="191:9" pos:end="191:9">=</operator> <call pos:start="191:11" pos:end="191:54"><name pos:start="191:11" pos:end="191:20">load_image</name><argument_list pos:start="191:21" pos:end="191:54">(<argument pos:start="191:22" pos:end="191:24"><expr pos:start="191:22" pos:end="191:24"><name pos:start="191:22" pos:end="191:24">buf</name></expr></argument>, <argument pos:start="191:27" pos:end="191:53"><expr pos:start="191:27" pos:end="191:53"><name pos:start="191:27" pos:end="191:39">phys_ram_base</name> <operator pos:start="191:41" pos:end="191:41">+</operator> <name pos:start="191:43" pos:end="191:53">bios_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="201:5"><if pos:start="193:5" pos:end="201:5">if <condition pos:start="193:8" pos:end="193:25">(<expr pos:start="193:9" pos:end="193:24"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:14">!=</operator> <name pos:start="193:16" pos:end="193:24">bios_size</name></expr>)</condition> <block pos:start="193:27" pos:end="201:5">{<block_content pos:start="195:5" pos:end="199:16">

    <label pos:start="195:5" pos:end="195:15"><name pos:start="195:5" pos:end="195:14">bios_error</name>:</label>

        <expr_stmt pos:start="197:9" pos:end="197:68"><expr pos:start="197:9" pos:end="197:67"><call pos:start="197:9" pos:end="197:67"><name pos:start="197:9" pos:end="197:15">fprintf</name><argument_list pos:start="197:16" pos:end="197:67">(<argument pos:start="197:17" pos:end="197:22"><expr pos:start="197:17" pos:end="197:22"><name pos:start="197:17" pos:end="197:22">stderr</name></expr></argument>, <argument pos:start="197:25" pos:end="197:61"><expr pos:start="197:25" pos:end="197:61"><literal type="string" pos:start="197:25" pos:end="197:61">"qemu: could not load PC BIOS '%s'\n"</literal></expr></argument>, <argument pos:start="197:64" pos:end="197:66"><expr pos:start="197:64" pos:end="197:66"><name pos:start="197:64" pos:end="197:66">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:16"><expr pos:start="199:9" pos:end="199:15"><call pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:12">exit</name><argument_list pos:start="199:13" pos:end="199:15">(<argument pos:start="199:14" pos:end="199:14"><expr pos:start="199:14" pos:end="199:14"><literal type="number" pos:start="199:14" pos:end="199:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="205:5" pos:end="205:23">/* VGA BIOS load */</comment>

    <if_stmt pos:start="207:5" pos:end="215:5"><if pos:start="207:5" pos:end="211:5">if <condition pos:start="207:8" pos:end="207:27">(<expr pos:start="207:9" pos:end="207:26"><name pos:start="207:9" pos:end="207:26">cirrus_vga_enabled</name></expr>)</condition> <block pos:start="207:29" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:79">

        <expr_stmt pos:start="209:9" pos:end="209:79"><expr pos:start="209:9" pos:end="209:78"><call pos:start="209:9" pos:end="209:78"><name pos:start="209:9" pos:end="209:16">snprintf</name><argument_list pos:start="209:17" pos:end="209:78">(<argument pos:start="209:18" pos:end="209:20"><expr pos:start="209:18" pos:end="209:20"><name pos:start="209:18" pos:end="209:20">buf</name></expr></argument>, <argument pos:start="209:23" pos:end="209:33"><expr pos:start="209:23" pos:end="209:33"><sizeof pos:start="209:23" pos:end="209:33">sizeof<argument_list pos:start="209:29" pos:end="209:33">(<argument pos:start="209:30" pos:end="209:32"><expr pos:start="209:30" pos:end="209:32"><name pos:start="209:30" pos:end="209:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="209:36" pos:end="209:42"><expr pos:start="209:36" pos:end="209:42"><literal type="string" pos:start="209:36" pos:end="209:42">"%s/%s"</literal></expr></argument>, <argument pos:start="209:45" pos:end="209:52"><expr pos:start="209:45" pos:end="209:52"><name pos:start="209:45" pos:end="209:52">bios_dir</name></expr></argument>, <argument pos:start="209:55" pos:end="209:77"><expr pos:start="209:55" pos:end="209:77"><name pos:start="209:55" pos:end="209:77">VGABIOS_CIRRUS_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="211:7" pos:end="215:5">else <block pos:start="211:12" pos:end="215:5">{<block_content pos:start="213:9" pos:end="213:72">

        <expr_stmt pos:start="213:9" pos:end="213:72"><expr pos:start="213:9" pos:end="213:71"><call pos:start="213:9" pos:end="213:71"><name pos:start="213:9" pos:end="213:16">snprintf</name><argument_list pos:start="213:17" pos:end="213:71">(<argument pos:start="213:18" pos:end="213:20"><expr pos:start="213:18" pos:end="213:20"><name pos:start="213:18" pos:end="213:20">buf</name></expr></argument>, <argument pos:start="213:23" pos:end="213:33"><expr pos:start="213:23" pos:end="213:33"><sizeof pos:start="213:23" pos:end="213:33">sizeof<argument_list pos:start="213:29" pos:end="213:33">(<argument pos:start="213:30" pos:end="213:32"><expr pos:start="213:30" pos:end="213:32"><name pos:start="213:30" pos:end="213:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="213:36" pos:end="213:42"><expr pos:start="213:36" pos:end="213:42"><literal type="string" pos:start="213:36" pos:end="213:42">"%s/%s"</literal></expr></argument>, <argument pos:start="213:45" pos:end="213:52"><expr pos:start="213:45" pos:end="213:52"><name pos:start="213:45" pos:end="213:52">bios_dir</name></expr></argument>, <argument pos:start="213:55" pos:end="213:70"><expr pos:start="213:55" pos:end="213:70"><name pos:start="213:55" pos:end="213:70">VGABIOS_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:40"><expr pos:start="217:5" pos:end="217:39"><name pos:start="217:5" pos:end="217:17">vga_bios_size</name> <operator pos:start="217:19" pos:end="217:19">=</operator> <call pos:start="217:21" pos:end="217:39"><name pos:start="217:21" pos:end="217:34">get_image_size</name><argument_list pos:start="217:35" pos:end="217:39">(<argument pos:start="217:36" pos:end="217:38"><expr pos:start="217:36" pos:end="217:38"><name pos:start="217:36" pos:end="217:38">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="221:28"><if pos:start="219:5" pos:end="221:28">if <condition pos:start="219:8" pos:end="219:52">(<expr pos:start="219:9" pos:end="219:51"><name pos:start="219:9" pos:end="219:21">vga_bios_size</name> <operator pos:start="219:23" pos:end="219:24">&lt;=</operator> <literal type="number" pos:start="219:26" pos:end="219:26">0</literal> <operator pos:start="219:28" pos:end="219:29">||</operator> <name pos:start="219:31" pos:end="219:43">vga_bios_size</name> <operator pos:start="219:45" pos:end="219:45">&gt;</operator> <literal type="number" pos:start="219:47" pos:end="219:51">65536</literal></expr>)</condition><block type="pseudo" pos:start="221:9" pos:end="221:28"><block_content pos:start="221:9" pos:end="221:28">

        <goto pos:start="221:9" pos:end="221:28">goto <name pos:start="221:14" pos:end="221:27">vga_bios_error</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:44"><expr pos:start="223:5" pos:end="223:43"><name pos:start="223:5" pos:end="223:19">vga_bios_offset</name> <operator pos:start="223:21" pos:end="223:21">=</operator> <call pos:start="223:23" pos:end="223:43"><name pos:start="223:23" pos:end="223:36">qemu_ram_alloc</name><argument_list pos:start="223:37" pos:end="223:43">(<argument pos:start="223:38" pos:end="223:42"><expr pos:start="223:38" pos:end="223:42"><literal type="number" pos:start="223:38" pos:end="223:42">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="227:5" pos:end="227:59"><expr pos:start="227:5" pos:end="227:58"><name pos:start="227:5" pos:end="227:7">ret</name> <operator pos:start="227:9" pos:end="227:9">=</operator> <call pos:start="227:11" pos:end="227:58"><name pos:start="227:11" pos:end="227:20">load_image</name><argument_list pos:start="227:21" pos:end="227:58">(<argument pos:start="227:22" pos:end="227:24"><expr pos:start="227:22" pos:end="227:24"><name pos:start="227:22" pos:end="227:24">buf</name></expr></argument>, <argument pos:start="227:27" pos:end="227:57"><expr pos:start="227:27" pos:end="227:57"><name pos:start="227:27" pos:end="227:39">phys_ram_base</name> <operator pos:start="227:41" pos:end="227:41">+</operator> <name pos:start="227:43" pos:end="227:57">vga_bios_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="237:5"><if pos:start="229:5" pos:end="237:5">if <condition pos:start="229:8" pos:end="229:29">(<expr pos:start="229:9" pos:end="229:28"><name pos:start="229:9" pos:end="229:11">ret</name> <operator pos:start="229:13" pos:end="229:14">!=</operator> <name pos:start="229:16" pos:end="229:28">vga_bios_size</name></expr>)</condition> <block pos:start="229:31" pos:end="237:5">{<block_content pos:start="231:5" pos:end="235:16">

    <label pos:start="231:5" pos:end="231:19"><name pos:start="231:5" pos:end="231:18">vga_bios_error</name>:</label>

        <expr_stmt pos:start="233:9" pos:end="233:69"><expr pos:start="233:9" pos:end="233:68"><call pos:start="233:9" pos:end="233:68"><name pos:start="233:9" pos:end="233:15">fprintf</name><argument_list pos:start="233:16" pos:end="233:68">(<argument pos:start="233:17" pos:end="233:22"><expr pos:start="233:17" pos:end="233:22"><name pos:start="233:17" pos:end="233:22">stderr</name></expr></argument>, <argument pos:start="233:25" pos:end="233:62"><expr pos:start="233:25" pos:end="233:62"><literal type="string" pos:start="233:25" pos:end="233:62">"qemu: could not load VGA BIOS '%s'\n"</literal></expr></argument>, <argument pos:start="233:65" pos:end="233:67"><expr pos:start="233:65" pos:end="233:67"><name pos:start="233:65" pos:end="233:67">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:16"><expr pos:start="235:9" pos:end="235:15"><call pos:start="235:9" pos:end="235:15"><name pos:start="235:9" pos:end="235:12">exit</name><argument_list pos:start="235:13" pos:end="235:15">(<argument pos:start="235:14" pos:end="235:14"><expr pos:start="235:14" pos:end="235:14"><literal type="number" pos:start="235:14" pos:end="235:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:35">/* setup basic memory access */</comment>

    <expr_stmt pos:start="243:5" pos:end="245:63"><expr pos:start="243:5" pos:end="245:62"><call pos:start="243:5" pos:end="245:62"><name pos:start="243:5" pos:end="243:32">cpu_register_physical_memory</name><argument_list pos:start="243:33" pos:end="245:62">(<argument pos:start="243:34" pos:end="243:40"><expr pos:start="243:34" pos:end="243:40"><literal type="number" pos:start="243:34" pos:end="243:40">0xc0000</literal></expr></argument>, <argument pos:start="243:43" pos:end="243:49"><expr pos:start="243:43" pos:end="243:49"><literal type="number" pos:start="243:43" pos:end="243:49">0x10000</literal></expr></argument>,

                                 <argument pos:start="245:34" pos:end="245:61"><expr pos:start="245:34" pos:end="245:61"><name pos:start="245:34" pos:end="245:48">vga_bios_offset</name> <operator pos:start="245:50" pos:end="245:50">|</operator> <name pos:start="245:52" pos:end="245:61">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="249:5" pos:end="249:53">/* map the last 128KB of the BIOS in ISA space */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:30"><expr pos:start="251:5" pos:end="251:29"><name pos:start="251:5" pos:end="251:17">isa_bios_size</name> <operator pos:start="251:19" pos:end="251:19">=</operator> <name pos:start="251:21" pos:end="251:29">bios_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="253:5" pos:end="255:35"><if pos:start="253:5" pos:end="255:35">if <condition pos:start="253:8" pos:end="253:37">(<expr pos:start="253:9" pos:end="253:36"><name pos:start="253:9" pos:end="253:21">isa_bios_size</name> <operator pos:start="253:23" pos:end="253:23">&gt;</operator> <operator pos:start="253:25" pos:end="253:25">(</operator><literal type="number" pos:start="253:26" pos:end="253:28">128</literal> <operator pos:start="253:30" pos:end="253:30">*</operator> <literal type="number" pos:start="253:32" pos:end="253:35">1024</literal><operator pos:start="253:36" pos:end="253:36">)</operator></expr>)</condition><block type="pseudo" pos:start="255:9" pos:end="255:35"><block_content pos:start="255:9" pos:end="255:35">

        <expr_stmt pos:start="255:9" pos:end="255:35"><expr pos:start="255:9" pos:end="255:34"><name pos:start="255:9" pos:end="255:21">isa_bios_size</name> <operator pos:start="255:23" pos:end="255:23">=</operator> <literal type="number" pos:start="255:25" pos:end="255:27">128</literal> <operator pos:start="255:29" pos:end="255:29">*</operator> <literal type="number" pos:start="255:31" pos:end="255:34">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="257:5" pos:end="261:89"><expr pos:start="257:5" pos:end="261:88"><call pos:start="257:5" pos:end="261:88"><name pos:start="257:5" pos:end="257:32">cpu_register_physical_memory</name><argument_list pos:start="257:33" pos:end="261:88">(<argument pos:start="257:34" pos:end="257:57"><expr pos:start="257:34" pos:end="257:57"><literal type="number" pos:start="257:34" pos:end="257:43">0x100000</literal> <operator pos:start="257:43" pos:end="257:43">-</operator> <name pos:start="257:45" pos:end="257:57">isa_bios_size</name></expr></argument>,

                                 <argument pos:start="259:34" pos:end="259:46"><expr pos:start="259:34" pos:end="259:46"><name pos:start="259:34" pos:end="259:46">isa_bios_size</name></expr></argument>,

                                 <argument pos:start="261:34" pos:end="261:87"><expr pos:start="261:34" pos:end="261:87"><operator pos:start="261:34" pos:end="261:34">(</operator><name pos:start="261:35" pos:end="261:45">bios_offset</name> <operator pos:start="261:47" pos:end="261:47">+</operator> <name pos:start="261:49" pos:end="261:57">bios_size</name> <operator pos:start="261:59" pos:end="261:59">-</operator> <name pos:start="261:61" pos:end="261:73">isa_bios_size</name><operator pos:start="261:74" pos:end="261:74">)</operator> <operator pos:start="261:76" pos:end="261:76">|</operator> <name pos:start="261:78" pos:end="261:87">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <block pos:start="265:5" pos:end="317:5">{<block_content pos:start="267:9" pos:end="315:9">

        <decl_stmt pos:start="267:9" pos:end="267:37"><decl pos:start="267:9" pos:end="267:36"><type pos:start="267:9" pos:end="267:18"><name pos:start="267:9" pos:end="267:18">ram_addr_t</name></type> <name pos:start="267:20" pos:end="267:36">option_rom_offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="269:9" pos:end="269:25"><decl pos:start="269:9" pos:end="269:16"><type pos:start="269:9" pos:end="269:11"><name pos:start="269:9" pos:end="269:11">int</name></type> <name pos:start="269:13" pos:end="269:16">size</name></decl>, <decl pos:start="269:19" pos:end="269:24"><type ref="prev" pos:start="269:9" pos:end="269:11"/><name pos:start="269:19" pos:end="269:24">offset</name></decl>;</decl_stmt>



        <expr_stmt pos:start="273:9" pos:end="273:19"><expr pos:start="273:9" pos:end="273:18"><name pos:start="273:9" pos:end="273:14">offset</name> <operator pos:start="273:16" pos:end="273:16">=</operator> <literal type="number" pos:start="273:18" pos:end="273:18">0</literal></expr>;</expr_stmt>

        <for pos:start="275:9" pos:end="315:9">for <control pos:start="275:13" pos:end="275:44">(<init pos:start="275:14" pos:end="275:19"><expr pos:start="275:14" pos:end="275:18"><name pos:start="275:14" pos:end="275:14">i</name> <operator pos:start="275:16" pos:end="275:16">=</operator> <literal type="number" pos:start="275:18" pos:end="275:18">0</literal></expr>;</init> <condition pos:start="275:21" pos:end="275:39"><expr pos:start="275:21" pos:end="275:38"><name pos:start="275:21" pos:end="275:21">i</name> <operator pos:start="275:23" pos:end="275:23">&lt;</operator> <name pos:start="275:25" pos:end="275:38">nb_option_roms</name></expr>;</condition> <incr pos:start="275:41" pos:end="275:43"><expr pos:start="275:41" pos:end="275:43"><name pos:start="275:41" pos:end="275:41">i</name><operator pos:start="275:42" pos:end="275:43">++</operator></expr></incr>)</control> <block pos:start="275:46" pos:end="315:9">{<block_content pos:start="277:13" pos:end="313:27">

            <expr_stmt pos:start="277:13" pos:end="277:49"><expr pos:start="277:13" pos:end="277:48"><name pos:start="277:13" pos:end="277:16">size</name> <operator pos:start="277:18" pos:end="277:18">=</operator> <call pos:start="277:20" pos:end="277:48"><name pos:start="277:20" pos:end="277:33">get_image_size</name><argument_list pos:start="277:34" pos:end="277:48">(<argument pos:start="277:35" pos:end="277:47"><expr pos:start="277:35" pos:end="277:47"><name pos:start="277:35" pos:end="277:47"><name pos:start="277:35" pos:end="277:44">option_rom</name><index pos:start="277:45" pos:end="277:47">[<expr pos:start="277:46" pos:end="277:46"><name pos:start="277:46" pos:end="277:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="279:13" pos:end="287:13"><if pos:start="279:13" pos:end="287:13">if <condition pos:start="279:16" pos:end="279:25">(<expr pos:start="279:17" pos:end="279:24"><name pos:start="279:17" pos:end="279:20">size</name> <operator pos:start="279:22" pos:end="279:22">&lt;</operator> <literal type="number" pos:start="279:24" pos:end="279:24">0</literal></expr>)</condition> <block pos:start="279:27" pos:end="287:13">{<block_content pos:start="281:17" pos:end="285:24">

                <expr_stmt pos:start="281:17" pos:end="283:39"><expr pos:start="281:17" pos:end="283:38"><call pos:start="281:17" pos:end="283:38"><name pos:start="281:17" pos:end="281:23">fprintf</name><argument_list pos:start="281:24" pos:end="283:38">(<argument pos:start="281:25" pos:end="281:30"><expr pos:start="281:25" pos:end="281:30"><name pos:start="281:25" pos:end="281:30">stderr</name></expr></argument>, <argument pos:start="281:33" pos:end="281:66"><expr pos:start="281:33" pos:end="281:66"><literal type="string" pos:start="281:33" pos:end="281:66">"Could not load option rom '%s'\n"</literal></expr></argument>,

                        <argument pos:start="283:25" pos:end="283:37"><expr pos:start="283:25" pos:end="283:37"><name pos:start="283:25" pos:end="283:37"><name pos:start="283:25" pos:end="283:34">option_rom</name><index pos:start="283:35" pos:end="283:37">[<expr pos:start="283:36" pos:end="283:36"><name pos:start="283:36" pos:end="283:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:24"><expr pos:start="285:17" pos:end="285:23"><call pos:start="285:17" pos:end="285:23"><name pos:start="285:17" pos:end="285:20">exit</name><argument_list pos:start="285:21" pos:end="285:23">(<argument pos:start="285:22" pos:end="285:22"><expr pos:start="285:22" pos:end="285:22"><literal type="number" pos:start="285:22" pos:end="285:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="289:13" pos:end="291:38"><if pos:start="289:13" pos:end="291:38">if <condition pos:start="289:16" pos:end="289:42">(<expr pos:start="289:17" pos:end="289:41"><name pos:start="289:17" pos:end="289:20">size</name> <operator pos:start="289:22" pos:end="289:22">&gt;</operator> <operator pos:start="289:24" pos:end="289:24">(</operator><literal type="number" pos:start="289:25" pos:end="289:33">0x10000</literal> <operator pos:start="289:33" pos:end="289:33">-</operator> <name pos:start="289:35" pos:end="289:40">offset</name><operator pos:start="289:41" pos:end="289:41">)</operator></expr>)</condition><block type="pseudo" pos:start="291:17" pos:end="291:38"><block_content pos:start="291:17" pos:end="291:38">

                <goto pos:start="291:17" pos:end="291:38">goto <name pos:start="291:22" pos:end="291:37">option_rom_error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:53"><expr pos:start="293:13" pos:end="293:52"><name pos:start="293:13" pos:end="293:29">option_rom_offset</name> <operator pos:start="293:31" pos:end="293:31">=</operator> <call pos:start="293:33" pos:end="293:52"><name pos:start="293:33" pos:end="293:46">qemu_ram_alloc</name><argument_list pos:start="293:47" pos:end="293:52">(<argument pos:start="293:48" pos:end="293:51"><expr pos:start="293:48" pos:end="293:51"><name pos:start="293:48" pos:end="293:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:79"><expr pos:start="295:13" pos:end="295:78"><name pos:start="295:13" pos:end="295:15">ret</name> <operator pos:start="295:17" pos:end="295:17">=</operator> <call pos:start="295:19" pos:end="295:78"><name pos:start="295:19" pos:end="295:28">load_image</name><argument_list pos:start="295:29" pos:end="295:78">(<argument pos:start="295:30" pos:end="295:42"><expr pos:start="295:30" pos:end="295:42"><name pos:start="295:30" pos:end="295:42"><name pos:start="295:30" pos:end="295:39">option_rom</name><index pos:start="295:40" pos:end="295:42">[<expr pos:start="295:41" pos:end="295:41"><name pos:start="295:41" pos:end="295:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="295:45" pos:end="295:77"><expr pos:start="295:45" pos:end="295:77"><name pos:start="295:45" pos:end="295:57">phys_ram_base</name> <operator pos:start="295:59" pos:end="295:59">+</operator> <name pos:start="295:61" pos:end="295:77">option_rom_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="297:13" pos:end="305:13"><if pos:start="297:13" pos:end="305:13">if <condition pos:start="297:16" pos:end="297:28">(<expr pos:start="297:17" pos:end="297:27"><name pos:start="297:17" pos:end="297:19">ret</name> <operator pos:start="297:21" pos:end="297:22">!=</operator> <name pos:start="297:24" pos:end="297:27">size</name></expr>)</condition> <block pos:start="297:30" pos:end="305:13">{<block_content pos:start="299:13" pos:end="303:24">

            <label pos:start="299:13" pos:end="299:29"><name pos:start="299:13" pos:end="299:28">option_rom_error</name>:</label>

                <expr_stmt pos:start="301:17" pos:end="301:58"><expr pos:start="301:17" pos:end="301:57"><call pos:start="301:17" pos:end="301:57"><name pos:start="301:17" pos:end="301:23">fprintf</name><argument_list pos:start="301:24" pos:end="301:57">(<argument pos:start="301:25" pos:end="301:30"><expr pos:start="301:25" pos:end="301:30"><name pos:start="301:25" pos:end="301:30">stderr</name></expr></argument>, <argument pos:start="301:33" pos:end="301:56"><expr pos:start="301:33" pos:end="301:56"><literal type="string" pos:start="301:33" pos:end="301:56">"Too many option ROMS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="303:24"><expr pos:start="303:17" pos:end="303:23"><call pos:start="303:17" pos:end="303:23"><name pos:start="303:17" pos:end="303:20">exit</name><argument_list pos:start="303:21" pos:end="303:23">(<argument pos:start="303:22" pos:end="303:22"><expr pos:start="303:22" pos:end="303:22"><literal type="number" pos:start="303:22" pos:end="303:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:41"><expr pos:start="307:13" pos:end="307:40"><name pos:start="307:13" pos:end="307:16">size</name> <operator pos:start="307:18" pos:end="307:18">=</operator> <operator pos:start="307:20" pos:end="307:20">(</operator><name pos:start="307:21" pos:end="307:24">size</name> <operator pos:start="307:26" pos:end="307:26">+</operator> <literal type="number" pos:start="307:28" pos:end="307:31">4095</literal><operator pos:start="307:32" pos:end="307:32">)</operator> <operator pos:start="307:34" pos:end="307:34">&amp;</operator> <operator pos:start="307:36" pos:end="307:36">~</operator><literal type="number" pos:start="307:37" pos:end="307:40">4095</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="311:79"><expr pos:start="309:13" pos:end="311:78"><call pos:start="309:13" pos:end="311:78"><name pos:start="309:13" pos:end="309:40">cpu_register_physical_memory</name><argument_list pos:start="309:41" pos:end="311:78">(<argument pos:start="309:42" pos:end="309:57"><expr pos:start="309:42" pos:end="309:57"><literal type="number" pos:start="309:42" pos:end="309:50">0xd0000</literal> <operator pos:start="309:50" pos:end="309:50">+</operator> <name pos:start="309:52" pos:end="309:57">offset</name></expr></argument>,

                                         <argument pos:start="311:42" pos:end="311:45"><expr pos:start="311:42" pos:end="311:45"><name pos:start="311:42" pos:end="311:45">size</name></expr></argument>, <argument pos:start="311:48" pos:end="311:77"><expr pos:start="311:48" pos:end="311:77"><name pos:start="311:48" pos:end="311:64">option_rom_offset</name> <operator pos:start="311:66" pos:end="311:66">|</operator> <name pos:start="311:68" pos:end="311:77">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:27"><expr pos:start="313:13" pos:end="313:26"><name pos:start="313:13" pos:end="313:18">offset</name> <operator pos:start="313:20" pos:end="313:21">+=</operator> <name pos:start="313:23" pos:end="313:26">size</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <comment type="block" pos:start="321:5" pos:end="321:47">/* map all the bios at the top of memory */</comment>

    <expr_stmt pos:start="323:5" pos:end="325:70"><expr pos:start="323:5" pos:end="325:69"><call pos:start="323:5" pos:end="325:69"><name pos:start="323:5" pos:end="323:32">cpu_register_physical_memory</name><argument_list pos:start="323:33" pos:end="325:69">(<argument pos:start="323:34" pos:end="323:55"><expr pos:start="323:34" pos:end="323:55"><operator pos:start="323:34" pos:end="323:34">(</operator><name pos:start="323:35" pos:end="323:42">uint32_t</name><operator pos:start="323:43" pos:end="323:43">)</operator><operator pos:start="323:44" pos:end="323:44">(</operator><operator pos:start="323:45" pos:end="323:45">-</operator><name pos:start="323:46" pos:end="323:54">bios_size</name><operator pos:start="323:55" pos:end="323:55">)</operator></expr></argument>,

                                 <argument pos:start="325:34" pos:end="325:42"><expr pos:start="325:34" pos:end="325:42"><name pos:start="325:34" pos:end="325:42">bios_size</name></expr></argument>, <argument pos:start="325:45" pos:end="325:68"><expr pos:start="325:45" pos:end="325:68"><name pos:start="325:45" pos:end="325:55">bios_offset</name> <operator pos:start="325:57" pos:end="325:57">|</operator> <name pos:start="325:59" pos:end="325:68">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:22"><expr pos:start="329:5" pos:end="329:21"><call pos:start="329:5" pos:end="329:21"><name pos:start="329:5" pos:end="329:19">bochs_bios_init</name><argument_list pos:start="329:20" pos:end="329:21">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="333:5" pos:end="335:69"><if pos:start="333:5" pos:end="335:69">if <condition pos:start="333:8" pos:end="333:19">(<expr pos:start="333:9" pos:end="333:18"><name pos:start="333:9" pos:end="333:18">linux_boot</name></expr>)</condition><block type="pseudo" pos:start="335:9" pos:end="335:69"><block_content pos:start="335:9" pos:end="335:69">

	<expr_stmt pos:start="335:9" pos:end="335:69"><expr pos:start="335:9" pos:end="335:68"><call pos:start="335:9" pos:end="335:68"><name pos:start="335:9" pos:end="335:18">load_linux</name><argument_list pos:start="335:19" pos:end="335:68">(<argument pos:start="335:20" pos:end="335:34"><expr pos:start="335:20" pos:end="335:34"><name pos:start="335:20" pos:end="335:34">kernel_filename</name></expr></argument>, <argument pos:start="335:37" pos:end="335:51"><expr pos:start="335:37" pos:end="335:51"><name pos:start="335:37" pos:end="335:51">initrd_filename</name></expr></argument>, <argument pos:start="335:54" pos:end="335:67"><expr pos:start="335:54" pos:end="335:67"><name pos:start="335:54" pos:end="335:67">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="339:5" pos:end="339:59"><expr pos:start="339:5" pos:end="339:58"><name pos:start="339:5" pos:end="339:11">cpu_irq</name> <operator pos:start="339:13" pos:end="339:13">=</operator> <call pos:start="339:15" pos:end="339:58"><name pos:start="339:15" pos:end="339:32">qemu_allocate_irqs</name><argument_list pos:start="339:33" pos:end="339:58">(<argument pos:start="339:34" pos:end="339:48"><expr pos:start="339:34" pos:end="339:48"><name pos:start="339:34" pos:end="339:48">pic_irq_request</name></expr></argument>, <argument pos:start="339:51" pos:end="339:54"><expr pos:start="339:51" pos:end="339:54"><name pos:start="339:51" pos:end="339:54">NULL</name></expr></argument>, <argument pos:start="339:57" pos:end="339:57"><expr pos:start="339:57" pos:end="339:57"><literal type="number" pos:start="339:57" pos:end="339:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:35"><expr pos:start="341:5" pos:end="341:34"><name pos:start="341:5" pos:end="341:9">i8259</name> <operator pos:start="341:11" pos:end="341:11">=</operator> <call pos:start="341:13" pos:end="341:34"><name pos:start="341:13" pos:end="341:22">i8259_init</name><argument_list pos:start="341:23" pos:end="341:34">(<argument pos:start="341:24" pos:end="341:33"><expr pos:start="341:24" pos:end="341:33"><name pos:start="341:24" pos:end="341:33"><name pos:start="341:24" pos:end="341:30">cpu_irq</name><index pos:start="341:31" pos:end="341:33">[<expr pos:start="341:32" pos:end="341:32"><literal type="number" pos:start="341:32" pos:end="341:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="343:5" pos:end="343:25"><expr pos:start="343:5" pos:end="343:24"><name pos:start="343:5" pos:end="343:12">ferr_irq</name> <operator pos:start="343:14" pos:end="343:14">=</operator> <name pos:start="343:16" pos:end="343:24"><name pos:start="343:16" pos:end="343:20">i8259</name><index pos:start="343:21" pos:end="343:24">[<expr pos:start="343:22" pos:end="343:23"><literal type="number" pos:start="343:22" pos:end="343:23">13</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="347:5" pos:end="357:5"><if pos:start="347:5" pos:end="353:5">if <condition pos:start="347:8" pos:end="347:20">(<expr pos:start="347:9" pos:end="347:19"><name pos:start="347:9" pos:end="347:19">pci_enabled</name></expr>)</condition> <block pos:start="347:22" pos:end="353:5">{<block_content pos:start="349:9" pos:end="351:46">

        <expr_stmt pos:start="349:9" pos:end="349:52"><expr pos:start="349:9" pos:end="349:51"><name pos:start="349:9" pos:end="349:15">pci_bus</name> <operator pos:start="349:17" pos:end="349:17">=</operator> <call pos:start="349:19" pos:end="349:51"><name pos:start="349:19" pos:end="349:29">i440fx_init</name><argument_list pos:start="349:30" pos:end="349:51">(<argument pos:start="349:31" pos:end="349:43"><expr pos:start="349:31" pos:end="349:43"><operator pos:start="349:31" pos:end="349:31">&amp;</operator><name pos:start="349:32" pos:end="349:43">i440fx_state</name></expr></argument>, <argument pos:start="349:46" pos:end="349:50"><expr pos:start="349:46" pos:end="349:50"><name pos:start="349:46" pos:end="349:50">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:46"><expr pos:start="351:9" pos:end="351:45"><name pos:start="351:9" pos:end="351:19">piix3_devfn</name> <operator pos:start="351:21" pos:end="351:21">=</operator> <call pos:start="351:23" pos:end="351:45"><name pos:start="351:23" pos:end="351:32">piix3_init</name><argument_list pos:start="351:33" pos:end="351:45">(<argument pos:start="351:34" pos:end="351:40"><expr pos:start="351:34" pos:end="351:40"><name pos:start="351:34" pos:end="351:40">pci_bus</name></expr></argument>, <argument pos:start="351:43" pos:end="351:44"><expr pos:start="351:43" pos:end="351:44"><operator pos:start="351:43" pos:end="351:43">-</operator><literal type="number" pos:start="351:44" pos:end="351:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="353:7" pos:end="357:5">else <block pos:start="353:12" pos:end="357:5">{<block_content pos:start="355:9" pos:end="355:23">

        <expr_stmt pos:start="355:9" pos:end="355:23"><expr pos:start="355:9" pos:end="355:22"><name pos:start="355:9" pos:end="355:15">pci_bus</name> <operator pos:start="355:17" pos:end="355:17">=</operator> <name pos:start="355:19" pos:end="355:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="361:5" pos:end="361:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="363:5" pos:end="363:60"><expr pos:start="363:5" pos:end="363:59"><call pos:start="363:5" pos:end="363:59"><name pos:start="363:5" pos:end="363:25">register_ioport_write</name><argument_list pos:start="363:26" pos:end="363:59">(<argument pos:start="363:27" pos:end="363:30"><expr pos:start="363:27" pos:end="363:30"><literal type="number" pos:start="363:27" pos:end="363:30">0x80</literal></expr></argument>, <argument pos:start="363:33" pos:end="363:33"><expr pos:start="363:33" pos:end="363:33"><literal type="number" pos:start="363:33" pos:end="363:33">1</literal></expr></argument>, <argument pos:start="363:36" pos:end="363:36"><expr pos:start="363:36" pos:end="363:36"><literal type="number" pos:start="363:36" pos:end="363:36">1</literal></expr></argument>, <argument pos:start="363:39" pos:end="363:52"><expr pos:start="363:39" pos:end="363:52"><name pos:start="363:39" pos:end="363:52">ioport80_write</name></expr></argument>, <argument pos:start="363:55" pos:end="363:58"><expr pos:start="363:55" pos:end="363:58"><name pos:start="363:55" pos:end="363:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="367:5" pos:end="367:60"><expr pos:start="367:5" pos:end="367:59"><call pos:start="367:5" pos:end="367:59"><name pos:start="367:5" pos:end="367:25">register_ioport_write</name><argument_list pos:start="367:26" pos:end="367:59">(<argument pos:start="367:27" pos:end="367:30"><expr pos:start="367:27" pos:end="367:30"><literal type="number" pos:start="367:27" pos:end="367:30">0xf0</literal></expr></argument>, <argument pos:start="367:33" pos:end="367:33"><expr pos:start="367:33" pos:end="367:33"><literal type="number" pos:start="367:33" pos:end="367:33">1</literal></expr></argument>, <argument pos:start="367:36" pos:end="367:36"><expr pos:start="367:36" pos:end="367:36"><literal type="number" pos:start="367:36" pos:end="367:36">1</literal></expr></argument>, <argument pos:start="367:39" pos:end="367:52"><expr pos:start="367:39" pos:end="367:52"><name pos:start="367:39" pos:end="367:52">ioportF0_write</name></expr></argument>, <argument pos:start="367:55" pos:end="367:58"><expr pos:start="367:55" pos:end="367:58"><name pos:start="367:55" pos:end="367:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="371:5" pos:end="417:5"><if pos:start="371:5" pos:end="389:5">if <condition pos:start="371:8" pos:end="371:27">(<expr pos:start="371:9" pos:end="371:26"><name pos:start="371:9" pos:end="371:26">cirrus_vga_enabled</name></expr>)</condition> <block pos:start="371:29" pos:end="389:5">{<block_content pos:start="373:9" pos:end="387:9">

        <if_stmt pos:start="373:9" pos:end="387:9"><if pos:start="373:9" pos:end="381:9">if <condition pos:start="373:12" pos:end="373:24">(<expr pos:start="373:13" pos:end="373:23"><name pos:start="373:13" pos:end="373:23">pci_enabled</name></expr>)</condition> <block pos:start="373:26" pos:end="381:9">{<block_content pos:start="375:13" pos:end="379:60">

            <expr_stmt pos:start="375:13" pos:end="379:60"><expr pos:start="375:13" pos:end="379:59"><call pos:start="375:13" pos:end="379:59"><name pos:start="375:13" pos:end="375:31">pci_cirrus_vga_init</name><argument_list pos:start="375:32" pos:end="379:59">(<argument pos:start="375:33" pos:end="375:39"><expr pos:start="375:33" pos:end="375:39"><name pos:start="375:33" pos:end="375:39">pci_bus</name></expr></argument>,

                                <argument pos:start="377:33" pos:end="377:34"><expr pos:start="377:33" pos:end="377:34"><name pos:start="377:33" pos:end="377:34">ds</name></expr></argument>, <argument pos:start="377:37" pos:end="377:64"><expr pos:start="377:37" pos:end="377:64"><name pos:start="377:37" pos:end="377:49">phys_ram_base</name> <operator pos:start="377:51" pos:end="377:51">+</operator> <name pos:start="377:53" pos:end="377:64">vga_ram_addr</name></expr></argument>,

                                <argument pos:start="379:33" pos:end="379:44"><expr pos:start="379:33" pos:end="379:44"><name pos:start="379:33" pos:end="379:44">vga_ram_addr</name></expr></argument>, <argument pos:start="379:47" pos:end="379:58"><expr pos:start="379:47" pos:end="379:58"><name pos:start="379:47" pos:end="379:58">vga_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="381:11" pos:end="387:9">else <block pos:start="381:16" pos:end="387:9">{<block_content pos:start="383:13" pos:end="385:60">

            <expr_stmt pos:start="383:13" pos:end="385:60"><expr pos:start="383:13" pos:end="385:59"><call pos:start="383:13" pos:end="385:59"><name pos:start="383:13" pos:end="383:31">isa_cirrus_vga_init</name><argument_list pos:start="383:32" pos:end="385:59">(<argument pos:start="383:33" pos:end="383:34"><expr pos:start="383:33" pos:end="383:34"><name pos:start="383:33" pos:end="383:34">ds</name></expr></argument>, <argument pos:start="383:37" pos:end="383:64"><expr pos:start="383:37" pos:end="383:64"><name pos:start="383:37" pos:end="383:49">phys_ram_base</name> <operator pos:start="383:51" pos:end="383:51">+</operator> <name pos:start="383:53" pos:end="383:64">vga_ram_addr</name></expr></argument>,

                                <argument pos:start="385:33" pos:end="385:44"><expr pos:start="385:33" pos:end="385:44"><name pos:start="385:33" pos:end="385:44">vga_ram_addr</name></expr></argument>, <argument pos:start="385:47" pos:end="385:58"><expr pos:start="385:47" pos:end="385:58"><name pos:start="385:47" pos:end="385:58">vga_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="389:7" pos:end="401:5">else if <condition pos:start="389:15" pos:end="389:30">(<expr pos:start="389:16" pos:end="389:29"><name pos:start="389:16" pos:end="389:29">vmsvga_enabled</name></expr>)</condition> <block pos:start="389:32" pos:end="401:5">{<block_content pos:start="391:9" pos:end="399:74">

        <if_stmt pos:start="391:9" pos:end="399:74"><if pos:start="391:9" pos:end="395:56">if <condition pos:start="391:12" pos:end="391:24">(<expr pos:start="391:13" pos:end="391:23"><name pos:start="391:13" pos:end="391:23">pci_enabled</name></expr>)</condition><block type="pseudo" pos:start="393:13" pos:end="395:56"><block_content pos:start="393:13" pos:end="395:56">

            <expr_stmt pos:start="393:13" pos:end="395:56"><expr pos:start="393:13" pos:end="395:55"><call pos:start="393:13" pos:end="395:55"><name pos:start="393:13" pos:end="393:27">pci_vmsvga_init</name><argument_list pos:start="393:28" pos:end="395:55">(<argument pos:start="393:29" pos:end="393:35"><expr pos:start="393:29" pos:end="393:35"><name pos:start="393:29" pos:end="393:35">pci_bus</name></expr></argument>, <argument pos:start="393:38" pos:end="393:39"><expr pos:start="393:38" pos:end="393:39"><name pos:start="393:38" pos:end="393:39">ds</name></expr></argument>, <argument pos:start="393:42" pos:end="393:69"><expr pos:start="393:42" pos:end="393:69"><name pos:start="393:42" pos:end="393:54">phys_ram_base</name> <operator pos:start="393:56" pos:end="393:56">+</operator> <name pos:start="393:58" pos:end="393:69">vga_ram_addr</name></expr></argument>,

                            <argument pos:start="395:29" pos:end="395:40"><expr pos:start="395:29" pos:end="395:40"><name pos:start="395:29" pos:end="395:40">vga_ram_addr</name></expr></argument>, <argument pos:start="395:43" pos:end="395:54"><expr pos:start="395:43" pos:end="395:54"><name pos:start="395:43" pos:end="395:54">vga_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="397:9" pos:end="399:74">else<block type="pseudo" pos:start="399:13" pos:end="399:74"><block_content pos:start="399:13" pos:end="399:74">

            <expr_stmt pos:start="399:13" pos:end="399:74"><expr pos:start="399:13" pos:end="399:73"><call pos:start="399:13" pos:end="399:73"><name pos:start="399:13" pos:end="399:19">fprintf</name><argument_list pos:start="399:20" pos:end="399:73">(<argument pos:start="399:21" pos:end="399:26"><expr pos:start="399:21" pos:end="399:26"><name pos:start="399:21" pos:end="399:26">stderr</name></expr></argument>, <argument pos:start="399:29" pos:end="399:58"><expr pos:start="399:29" pos:end="399:58"><literal type="string" pos:start="399:29" pos:end="399:58">"%s: vmware_vga: no PCI bus\n"</literal></expr></argument>, <argument pos:start="399:61" pos:end="399:72"><expr pos:start="399:61" pos:end="399:72"><name pos:start="399:61" pos:end="399:72">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="401:7" pos:end="417:5">else <block pos:start="401:12" pos:end="417:5">{<block_content pos:start="403:9" pos:end="415:9">

        <if_stmt pos:start="403:9" pos:end="415:9"><if pos:start="403:9" pos:end="409:9">if <condition pos:start="403:12" pos:end="403:24">(<expr pos:start="403:13" pos:end="403:23"><name pos:start="403:13" pos:end="403:23">pci_enabled</name></expr>)</condition> <block pos:start="403:26" pos:end="409:9">{<block_content pos:start="405:13" pos:end="407:59">

            <expr_stmt pos:start="405:13" pos:end="407:59"><expr pos:start="405:13" pos:end="407:58"><call pos:start="405:13" pos:end="407:58"><name pos:start="405:13" pos:end="405:24">pci_vga_init</name><argument_list pos:start="405:25" pos:end="407:58">(<argument pos:start="405:26" pos:end="405:32"><expr pos:start="405:26" pos:end="405:32"><name pos:start="405:26" pos:end="405:32">pci_bus</name></expr></argument>, <argument pos:start="405:35" pos:end="405:36"><expr pos:start="405:35" pos:end="405:36"><name pos:start="405:35" pos:end="405:36">ds</name></expr></argument>, <argument pos:start="405:39" pos:end="405:66"><expr pos:start="405:39" pos:end="405:66"><name pos:start="405:39" pos:end="405:51">phys_ram_base</name> <operator pos:start="405:53" pos:end="405:53">+</operator> <name pos:start="405:55" pos:end="405:66">vga_ram_addr</name></expr></argument>,

                         <argument pos:start="407:26" pos:end="407:37"><expr pos:start="407:26" pos:end="407:37"><name pos:start="407:26" pos:end="407:37">vga_ram_addr</name></expr></argument>, <argument pos:start="407:40" pos:end="407:51"><expr pos:start="407:40" pos:end="407:51"><name pos:start="407:40" pos:end="407:51">vga_ram_size</name></expr></argument>, <argument pos:start="407:54" pos:end="407:54"><expr pos:start="407:54" pos:end="407:54"><literal type="number" pos:start="407:54" pos:end="407:54">0</literal></expr></argument>, <argument pos:start="407:57" pos:end="407:57"><expr pos:start="407:57" pos:end="407:57"><literal type="number" pos:start="407:57" pos:end="407:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="409:11" pos:end="415:9">else <block pos:start="409:16" pos:end="415:9">{<block_content pos:start="411:13" pos:end="413:53">

            <expr_stmt pos:start="411:13" pos:end="413:53"><expr pos:start="411:13" pos:end="413:52"><call pos:start="411:13" pos:end="413:52"><name pos:start="411:13" pos:end="411:24">isa_vga_init</name><argument_list pos:start="411:25" pos:end="413:52">(<argument pos:start="411:26" pos:end="411:27"><expr pos:start="411:26" pos:end="411:27"><name pos:start="411:26" pos:end="411:27">ds</name></expr></argument>, <argument pos:start="411:30" pos:end="411:57"><expr pos:start="411:30" pos:end="411:57"><name pos:start="411:30" pos:end="411:42">phys_ram_base</name> <operator pos:start="411:44" pos:end="411:44">+</operator> <name pos:start="411:46" pos:end="411:57">vga_ram_addr</name></expr></argument>,

                         <argument pos:start="413:26" pos:end="413:37"><expr pos:start="413:26" pos:end="413:37"><name pos:start="413:26" pos:end="413:37">vga_ram_addr</name></expr></argument>, <argument pos:start="413:40" pos:end="413:51"><expr pos:start="413:40" pos:end="413:51"><name pos:start="413:40" pos:end="413:51">vga_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="421:5" pos:end="421:41"><expr pos:start="421:5" pos:end="421:40"><name pos:start="421:5" pos:end="421:13">rtc_state</name> <operator pos:start="421:15" pos:end="421:15">=</operator> <call pos:start="421:17" pos:end="421:40"><name pos:start="421:17" pos:end="421:24">rtc_init</name><argument_list pos:start="421:25" pos:end="421:40">(<argument pos:start="421:26" pos:end="421:29"><expr pos:start="421:26" pos:end="421:29"><literal type="number" pos:start="421:26" pos:end="421:29">0x70</literal></expr></argument>, <argument pos:start="421:32" pos:end="421:39"><expr pos:start="421:32" pos:end="421:39"><name pos:start="421:32" pos:end="421:39"><name pos:start="421:32" pos:end="421:36">i8259</name><index pos:start="421:37" pos:end="421:39">[<expr pos:start="421:38" pos:end="421:38"><literal type="number" pos:start="421:38" pos:end="421:38">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="425:5" pos:end="425:51"><expr pos:start="425:5" pos:end="425:50"><call pos:start="425:5" pos:end="425:50"><name pos:start="425:5" pos:end="425:26">qemu_register_boot_set</name><argument_list pos:start="425:27" pos:end="425:50">(<argument pos:start="425:28" pos:end="425:38"><expr pos:start="425:28" pos:end="425:38"><name pos:start="425:28" pos:end="425:38">pc_boot_set</name></expr></argument>, <argument pos:start="425:41" pos:end="425:49"><expr pos:start="425:41" pos:end="425:49"><name pos:start="425:41" pos:end="425:49">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="429:5" pos:end="429:58"><expr pos:start="429:5" pos:end="429:57"><call pos:start="429:5" pos:end="429:57"><name pos:start="429:5" pos:end="429:24">register_ioport_read</name><argument_list pos:start="429:25" pos:end="429:57">(<argument pos:start="429:26" pos:end="429:29"><expr pos:start="429:26" pos:end="429:29"><literal type="number" pos:start="429:26" pos:end="429:29">0x92</literal></expr></argument>, <argument pos:start="429:32" pos:end="429:32"><expr pos:start="429:32" pos:end="429:32"><literal type="number" pos:start="429:32" pos:end="429:32">1</literal></expr></argument>, <argument pos:start="429:35" pos:end="429:35"><expr pos:start="429:35" pos:end="429:35"><literal type="number" pos:start="429:35" pos:end="429:35">1</literal></expr></argument>, <argument pos:start="429:38" pos:end="429:50"><expr pos:start="429:38" pos:end="429:50"><name pos:start="429:38" pos:end="429:50">ioport92_read</name></expr></argument>, <argument pos:start="429:53" pos:end="429:56"><expr pos:start="429:53" pos:end="429:56"><name pos:start="429:53" pos:end="429:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:60"><expr pos:start="431:5" pos:end="431:59"><call pos:start="431:5" pos:end="431:59"><name pos:start="431:5" pos:end="431:25">register_ioport_write</name><argument_list pos:start="431:26" pos:end="431:59">(<argument pos:start="431:27" pos:end="431:30"><expr pos:start="431:27" pos:end="431:30"><literal type="number" pos:start="431:27" pos:end="431:30">0x92</literal></expr></argument>, <argument pos:start="431:33" pos:end="431:33"><expr pos:start="431:33" pos:end="431:33"><literal type="number" pos:start="431:33" pos:end="431:33">1</literal></expr></argument>, <argument pos:start="431:36" pos:end="431:36"><expr pos:start="431:36" pos:end="431:36"><literal type="number" pos:start="431:36" pos:end="431:36">1</literal></expr></argument>, <argument pos:start="431:39" pos:end="431:52"><expr pos:start="431:39" pos:end="431:52"><name pos:start="431:39" pos:end="431:52">ioport92_write</name></expr></argument>, <argument pos:start="431:55" pos:end="431:58"><expr pos:start="431:55" pos:end="431:58"><name pos:start="431:55" pos:end="431:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="435:5" pos:end="439:5"><if pos:start="435:5" pos:end="439:5">if <condition pos:start="435:8" pos:end="435:20">(<expr pos:start="435:9" pos:end="435:19"><name pos:start="435:9" pos:end="435:19">pci_enabled</name></expr>)</condition> <block pos:start="435:22" pos:end="439:5">{<block_content pos:start="437:9" pos:end="437:31">

        <expr_stmt pos:start="437:9" pos:end="437:31"><expr pos:start="437:9" pos:end="437:30"><name pos:start="437:9" pos:end="437:14">ioapic</name> <operator pos:start="437:16" pos:end="437:16">=</operator> <call pos:start="437:18" pos:end="437:30"><name pos:start="437:18" pos:end="437:28">ioapic_init</name><argument_list pos:start="437:29" pos:end="437:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:35"><expr pos:start="441:5" pos:end="441:34"><name pos:start="441:5" pos:end="441:7">pit</name> <operator pos:start="441:9" pos:end="441:9">=</operator> <call pos:start="441:11" pos:end="441:34"><name pos:start="441:11" pos:end="441:18">pit_init</name><argument_list pos:start="441:19" pos:end="441:34">(<argument pos:start="441:20" pos:end="441:23"><expr pos:start="441:20" pos:end="441:23"><literal type="number" pos:start="441:20" pos:end="441:23">0x40</literal></expr></argument>, <argument pos:start="441:26" pos:end="441:33"><expr pos:start="441:26" pos:end="441:33"><name pos:start="441:26" pos:end="441:33"><name pos:start="441:26" pos:end="441:30">i8259</name><index pos:start="441:31" pos:end="441:33">[<expr pos:start="441:32" pos:end="441:32"><literal type="number" pos:start="441:32" pos:end="441:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="443:5" pos:end="443:20"><expr pos:start="443:5" pos:end="443:19"><call pos:start="443:5" pos:end="443:19"><name pos:start="443:5" pos:end="443:14">pcspk_init</name><argument_list pos:start="443:15" pos:end="443:19">(<argument pos:start="443:16" pos:end="443:18"><expr pos:start="443:16" pos:end="443:18"><name pos:start="443:16" pos:end="443:18">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="445:5" pos:end="449:5"><if pos:start="445:5" pos:end="449:5">if <condition pos:start="445:8" pos:end="445:20">(<expr pos:start="445:9" pos:end="445:19"><name pos:start="445:9" pos:end="445:19">pci_enabled</name></expr>)</condition> <block pos:start="445:22" pos:end="449:5">{<block_content pos:start="447:9" pos:end="447:62">

        <expr_stmt pos:start="447:9" pos:end="447:62"><expr pos:start="447:9" pos:end="447:61"><call pos:start="447:9" pos:end="447:61"><name pos:start="447:9" pos:end="447:28">pic_set_alt_irq_func</name><argument_list pos:start="447:29" pos:end="447:61">(<argument pos:start="447:30" pos:end="447:36"><expr pos:start="447:30" pos:end="447:36"><name pos:start="447:30" pos:end="447:36">isa_pic</name></expr></argument>, <argument pos:start="447:39" pos:end="447:52"><expr pos:start="447:39" pos:end="447:52"><name pos:start="447:39" pos:end="447:52">ioapic_set_irq</name></expr></argument>, <argument pos:start="447:55" pos:end="447:60"><expr pos:start="447:55" pos:end="447:60"><name pos:start="447:55" pos:end="447:60">ioapic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="453:5" pos:end="463:5">for<control pos:start="453:8" pos:end="453:41">(<init pos:start="453:9" pos:end="453:14"><expr pos:start="453:9" pos:end="453:13"><name pos:start="453:9" pos:end="453:9">i</name> <operator pos:start="453:11" pos:end="453:11">=</operator> <literal type="number" pos:start="453:13" pos:end="453:13">0</literal></expr>;</init> <condition pos:start="453:16" pos:end="453:36"><expr pos:start="453:16" pos:end="453:35"><name pos:start="453:16" pos:end="453:16">i</name> <operator pos:start="453:18" pos:end="453:18">&lt;</operator> <name pos:start="453:20" pos:end="453:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="453:38" pos:end="453:40"><expr pos:start="453:38" pos:end="453:40"><name pos:start="453:38" pos:end="453:38">i</name><operator pos:start="453:39" pos:end="453:40">++</operator></expr></incr>)</control> <block pos:start="453:43" pos:end="463:5">{<block_content pos:start="455:9" pos:end="461:9">

        <if_stmt pos:start="455:9" pos:end="461:9"><if pos:start="455:9" pos:end="461:9">if <condition pos:start="455:12" pos:end="455:26">(<expr pos:start="455:13" pos:end="455:25"><name pos:start="455:13" pos:end="455:25"><name pos:start="455:13" pos:end="455:22">serial_hds</name><index pos:start="455:23" pos:end="455:25">[<expr pos:start="455:24" pos:end="455:24"><name pos:start="455:24" pos:end="455:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="455:28" pos:end="461:9">{<block_content pos:start="457:13" pos:end="459:39">

            <expr_stmt pos:start="457:13" pos:end="459:39"><expr pos:start="457:13" pos:end="459:38"><call pos:start="457:13" pos:end="459:38"><name pos:start="457:13" pos:end="457:23">serial_init</name><argument_list pos:start="457:24" pos:end="459:38">(<argument pos:start="457:25" pos:end="457:36"><expr pos:start="457:25" pos:end="457:36"><name pos:start="457:25" pos:end="457:36"><name pos:start="457:25" pos:end="457:33">serial_io</name><index pos:start="457:34" pos:end="457:36">[<expr pos:start="457:35" pos:end="457:35"><name pos:start="457:35" pos:end="457:35">i</name></expr>]</index></name></expr></argument>, <argument pos:start="457:39" pos:end="457:58"><expr pos:start="457:39" pos:end="457:58"><name pos:start="457:39" pos:end="457:58"><name pos:start="457:39" pos:end="457:43">i8259</name><index pos:start="457:44" pos:end="457:58">[<expr pos:start="457:45" pos:end="457:57"><name pos:start="457:45" pos:end="457:57"><name pos:start="457:45" pos:end="457:54">serial_irq</name><index pos:start="457:55" pos:end="457:57">[<expr pos:start="457:56" pos:end="457:56"><name pos:start="457:56" pos:end="457:56">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="457:61" pos:end="457:66"><expr pos:start="457:61" pos:end="457:66"><literal type="number" pos:start="457:61" pos:end="457:66">115200</literal></expr></argument>,

                        <argument pos:start="459:25" pos:end="459:37"><expr pos:start="459:25" pos:end="459:37"><name pos:start="459:25" pos:end="459:37"><name pos:start="459:25" pos:end="459:34">serial_hds</name><index pos:start="459:35" pos:end="459:37">[<expr pos:start="459:36" pos:end="459:36"><name pos:start="459:36" pos:end="459:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="467:5" pos:end="477:5">for<control pos:start="467:8" pos:end="467:43">(<init pos:start="467:9" pos:end="467:14"><expr pos:start="467:9" pos:end="467:13"><name pos:start="467:9" pos:end="467:9">i</name> <operator pos:start="467:11" pos:end="467:11">=</operator> <literal type="number" pos:start="467:13" pos:end="467:13">0</literal></expr>;</init> <condition pos:start="467:16" pos:end="467:38"><expr pos:start="467:16" pos:end="467:37"><name pos:start="467:16" pos:end="467:16">i</name> <operator pos:start="467:18" pos:end="467:18">&lt;</operator> <name pos:start="467:20" pos:end="467:37">MAX_PARALLEL_PORTS</name></expr>;</condition> <incr pos:start="467:40" pos:end="467:42"><expr pos:start="467:40" pos:end="467:42"><name pos:start="467:40" pos:end="467:40">i</name><operator pos:start="467:41" pos:end="467:42">++</operator></expr></incr>)</control> <block pos:start="467:45" pos:end="477:5">{<block_content pos:start="469:9" pos:end="475:9">

        <if_stmt pos:start="469:9" pos:end="475:9"><if pos:start="469:9" pos:end="475:9">if <condition pos:start="469:12" pos:end="469:28">(<expr pos:start="469:13" pos:end="469:27"><name pos:start="469:13" pos:end="469:27"><name pos:start="469:13" pos:end="469:24">parallel_hds</name><index pos:start="469:25" pos:end="469:27">[<expr pos:start="469:26" pos:end="469:26"><name pos:start="469:26" pos:end="469:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="469:30" pos:end="475:9">{<block_content pos:start="471:13" pos:end="473:43">

            <expr_stmt pos:start="471:13" pos:end="473:43"><expr pos:start="471:13" pos:end="473:42"><call pos:start="471:13" pos:end="473:42"><name pos:start="471:13" pos:end="471:25">parallel_init</name><argument_list pos:start="471:26" pos:end="473:42">(<argument pos:start="471:27" pos:end="471:40"><expr pos:start="471:27" pos:end="471:40"><name pos:start="471:27" pos:end="471:40"><name pos:start="471:27" pos:end="471:37">parallel_io</name><index pos:start="471:38" pos:end="471:40">[<expr pos:start="471:39" pos:end="471:39"><name pos:start="471:39" pos:end="471:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="471:43" pos:end="471:64"><expr pos:start="471:43" pos:end="471:64"><name pos:start="471:43" pos:end="471:64"><name pos:start="471:43" pos:end="471:47">i8259</name><index pos:start="471:48" pos:end="471:64">[<expr pos:start="471:49" pos:end="471:63"><name pos:start="471:49" pos:end="471:63"><name pos:start="471:49" pos:end="471:60">parallel_irq</name><index pos:start="471:61" pos:end="471:63">[<expr pos:start="471:62" pos:end="471:62"><name pos:start="471:62" pos:end="471:62">i</name></expr>]</index></name></expr>]</index></name></expr></argument>,

                          <argument pos:start="473:27" pos:end="473:41"><expr pos:start="473:27" pos:end="473:41"><name pos:start="473:27" pos:end="473:41"><name pos:start="473:27" pos:end="473:38">parallel_hds</name><index pos:start="473:39" pos:end="473:41">[<expr pos:start="473:40" pos:end="473:40"><name pos:start="473:40" pos:end="473:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="481:5" pos:end="525:5">for<control pos:start="481:8" pos:end="481:32">(<init pos:start="481:9" pos:end="481:14"><expr pos:start="481:9" pos:end="481:13"><name pos:start="481:9" pos:end="481:9">i</name> <operator pos:start="481:11" pos:end="481:11">=</operator> <literal type="number" pos:start="481:13" pos:end="481:13">0</literal></expr>;</init> <condition pos:start="481:16" pos:end="481:27"><expr pos:start="481:16" pos:end="481:26"><name pos:start="481:16" pos:end="481:16">i</name> <operator pos:start="481:18" pos:end="481:18">&lt;</operator> <name pos:start="481:20" pos:end="481:26">nb_nics</name></expr>;</condition> <incr pos:start="481:29" pos:end="481:31"><expr pos:start="481:29" pos:end="481:31"><name pos:start="481:29" pos:end="481:29">i</name><operator pos:start="481:30" pos:end="481:31">++</operator></expr></incr>)</control> <block pos:start="481:34" pos:end="525:5">{<block_content pos:start="483:9" pos:end="523:9">

        <expr_stmt pos:start="483:9" pos:end="483:26"><expr pos:start="483:9" pos:end="483:25"><name pos:start="483:9" pos:end="483:10">nd</name> <operator pos:start="483:12" pos:end="483:12">=</operator> <operator pos:start="483:14" pos:end="483:14">&amp;</operator><name pos:start="483:15" pos:end="483:25"><name pos:start="483:15" pos:end="483:22">nd_table</name><index pos:start="483:23" pos:end="483:25">[<expr pos:start="483:24" pos:end="483:24"><name pos:start="483:24" pos:end="483:24">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="485:9" pos:end="497:9"><if pos:start="485:9" pos:end="497:9">if <condition pos:start="485:12" pos:end="485:23">(<expr pos:start="485:13" pos:end="485:22"><operator pos:start="485:13" pos:end="485:13">!</operator><name pos:start="485:14" pos:end="485:22"><name pos:start="485:14" pos:end="485:15">nd</name><operator pos:start="485:16" pos:end="485:17">-&gt;</operator><name pos:start="485:18" pos:end="485:22">model</name></name></expr>)</condition> <block pos:start="485:25" pos:end="497:9">{<block_content pos:start="487:13" pos:end="495:13">

            <if_stmt pos:start="487:13" pos:end="495:13"><if pos:start="487:13" pos:end="491:13">if <condition pos:start="487:16" pos:end="487:28">(<expr pos:start="487:17" pos:end="487:27"><name pos:start="487:17" pos:end="487:27">pci_enabled</name></expr>)</condition> <block pos:start="487:30" pos:end="491:13">{<block_content pos:start="489:17" pos:end="489:39">

                <expr_stmt pos:start="489:17" pos:end="489:39"><expr pos:start="489:17" pos:end="489:38"><name pos:start="489:17" pos:end="489:25"><name pos:start="489:17" pos:end="489:18">nd</name><operator pos:start="489:19" pos:end="489:20">-&gt;</operator><name pos:start="489:21" pos:end="489:25">model</name></name> <operator pos:start="489:27" pos:end="489:27">=</operator> <literal type="string" pos:start="489:29" pos:end="489:38">"ne2k_pci"</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="491:15" pos:end="495:13">else <block pos:start="491:20" pos:end="495:13">{<block_content pos:start="493:17" pos:end="493:39">

                <expr_stmt pos:start="493:17" pos:end="493:39"><expr pos:start="493:17" pos:end="493:38"><name pos:start="493:17" pos:end="493:25"><name pos:start="493:17" pos:end="493:18">nd</name><operator pos:start="493:19" pos:end="493:20">-&gt;</operator><name pos:start="493:21" pos:end="493:25">model</name></name> <operator pos:start="493:27" pos:end="493:27">=</operator> <literal type="string" pos:start="493:29" pos:end="493:38">"ne2k_isa"</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="499:9" pos:end="523:9"><if pos:start="499:9" pos:end="503:9">if <condition pos:start="499:12" pos:end="499:47">(<expr pos:start="499:13" pos:end="499:46"><call pos:start="499:13" pos:end="499:41"><name pos:start="499:13" pos:end="499:18">strcmp</name><argument_list pos:start="499:19" pos:end="499:41">(<argument pos:start="499:20" pos:end="499:28"><expr pos:start="499:20" pos:end="499:28"><name pos:start="499:20" pos:end="499:28"><name pos:start="499:20" pos:end="499:21">nd</name><operator pos:start="499:22" pos:end="499:23">-&gt;</operator><name pos:start="499:24" pos:end="499:28">model</name></name></expr></argument>, <argument pos:start="499:31" pos:end="499:40"><expr pos:start="499:31" pos:end="499:40"><literal type="string" pos:start="499:31" pos:end="499:40">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="499:43" pos:end="499:44">==</operator> <literal type="number" pos:start="499:46" pos:end="499:46">0</literal></expr>)</condition> <block pos:start="499:49" pos:end="503:9">{<block_content pos:start="501:13" pos:end="501:40">

            <expr_stmt pos:start="501:13" pos:end="501:40"><expr pos:start="501:13" pos:end="501:39"><call pos:start="501:13" pos:end="501:39"><name pos:start="501:13" pos:end="501:28">pc_init_ne2k_isa</name><argument_list pos:start="501:29" pos:end="501:39">(<argument pos:start="501:30" pos:end="501:31"><expr pos:start="501:30" pos:end="501:31"><name pos:start="501:30" pos:end="501:31">nd</name></expr></argument>, <argument pos:start="501:34" pos:end="501:38"><expr pos:start="501:34" pos:end="501:38"><name pos:start="501:34" pos:end="501:38">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="503:11" pos:end="511:9">else if <condition pos:start="503:19" pos:end="503:31">(<expr pos:start="503:20" pos:end="503:30"><name pos:start="503:20" pos:end="503:30">pci_enabled</name></expr>)</condition> <block pos:start="503:33" pos:end="511:9">{<block_content pos:start="505:13" pos:end="509:42">

            <if_stmt pos:start="505:13" pos:end="507:72"><if pos:start="505:13" pos:end="507:72">if <condition pos:start="505:16" pos:end="505:44">(<expr pos:start="505:17" pos:end="505:43"><call pos:start="505:17" pos:end="505:38"><name pos:start="505:17" pos:end="505:22">strcmp</name><argument_list pos:start="505:23" pos:end="505:38">(<argument pos:start="505:24" pos:end="505:32"><expr pos:start="505:24" pos:end="505:32"><name pos:start="505:24" pos:end="505:32"><name pos:start="505:24" pos:end="505:25">nd</name><operator pos:start="505:26" pos:end="505:27">-&gt;</operator><name pos:start="505:28" pos:end="505:32">model</name></name></expr></argument>, <argument pos:start="505:35" pos:end="505:37"><expr pos:start="505:35" pos:end="505:37"><literal type="string" pos:start="505:35" pos:end="505:37">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="505:40" pos:end="505:41">==</operator> <literal type="number" pos:start="505:43" pos:end="505:43">0</literal></expr>)</condition><block type="pseudo" pos:start="507:17" pos:end="507:72"><block_content pos:start="507:17" pos:end="507:72">

                <expr_stmt pos:start="507:17" pos:end="507:72"><expr pos:start="507:17" pos:end="507:71"><call pos:start="507:17" pos:end="507:71"><name pos:start="507:17" pos:end="507:23">fprintf</name><argument_list pos:start="507:24" pos:end="507:71">(<argument pos:start="507:25" pos:end="507:30"><expr pos:start="507:25" pos:end="507:30"><name pos:start="507:25" pos:end="507:30">stderr</name></expr></argument>, <argument pos:start="507:33" pos:end="507:70"><expr pos:start="507:33" pos:end="507:70"><literal type="string" pos:start="507:33" pos:end="507:70">"qemu: Supported ISA NICs: ne2k_isa\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:42"><expr pos:start="509:13" pos:end="509:41"><call pos:start="509:13" pos:end="509:41"><name pos:start="509:13" pos:end="509:24">pci_nic_init</name><argument_list pos:start="509:25" pos:end="509:41">(<argument pos:start="509:26" pos:end="509:32"><expr pos:start="509:26" pos:end="509:32"><name pos:start="509:26" pos:end="509:32">pci_bus</name></expr></argument>, <argument pos:start="509:35" pos:end="509:36"><expr pos:start="509:35" pos:end="509:36"><name pos:start="509:35" pos:end="509:36">nd</name></expr></argument>, <argument pos:start="509:39" pos:end="509:40"><expr pos:start="509:39" pos:end="509:40"><operator pos:start="509:39" pos:end="509:39">-</operator><literal type="number" pos:start="509:40" pos:end="509:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="511:11" pos:end="517:9">else if <condition pos:start="511:19" pos:end="511:47">(<expr pos:start="511:20" pos:end="511:46"><call pos:start="511:20" pos:end="511:41"><name pos:start="511:20" pos:end="511:25">strcmp</name><argument_list pos:start="511:26" pos:end="511:41">(<argument pos:start="511:27" pos:end="511:35"><expr pos:start="511:27" pos:end="511:35"><name pos:start="511:27" pos:end="511:35"><name pos:start="511:27" pos:end="511:28">nd</name><operator pos:start="511:29" pos:end="511:30">-&gt;</operator><name pos:start="511:31" pos:end="511:35">model</name></name></expr></argument>, <argument pos:start="511:38" pos:end="511:40"><expr pos:start="511:38" pos:end="511:40"><literal type="string" pos:start="511:38" pos:end="511:40">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="511:43" pos:end="511:44">==</operator> <literal type="number" pos:start="511:46" pos:end="511:46">0</literal></expr>)</condition> <block pos:start="511:49" pos:end="517:9">{<block_content pos:start="513:13" pos:end="515:20">

            <expr_stmt pos:start="513:13" pos:end="513:68"><expr pos:start="513:13" pos:end="513:67"><call pos:start="513:13" pos:end="513:67"><name pos:start="513:13" pos:end="513:19">fprintf</name><argument_list pos:start="513:20" pos:end="513:67">(<argument pos:start="513:21" pos:end="513:26"><expr pos:start="513:21" pos:end="513:26"><name pos:start="513:21" pos:end="513:26">stderr</name></expr></argument>, <argument pos:start="513:29" pos:end="513:66"><expr pos:start="513:29" pos:end="513:66"><literal type="string" pos:start="513:29" pos:end="513:66">"qemu: Supported ISA NICs: ne2k_isa\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="515:13" pos:end="515:20"><expr pos:start="515:13" pos:end="515:19"><call pos:start="515:13" pos:end="515:19"><name pos:start="515:13" pos:end="515:16">exit</name><argument_list pos:start="515:17" pos:end="515:19">(<argument pos:start="515:18" pos:end="515:18"><expr pos:start="515:18" pos:end="515:18"><literal type="number" pos:start="515:18" pos:end="515:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="517:11" pos:end="523:9">else <block pos:start="517:16" pos:end="523:9">{<block_content pos:start="519:13" pos:end="521:20">

            <expr_stmt pos:start="519:13" pos:end="519:70"><expr pos:start="519:13" pos:end="519:69"><call pos:start="519:13" pos:end="519:69"><name pos:start="519:13" pos:end="519:19">fprintf</name><argument_list pos:start="519:20" pos:end="519:69">(<argument pos:start="519:21" pos:end="519:26"><expr pos:start="519:21" pos:end="519:26"><name pos:start="519:21" pos:end="519:26">stderr</name></expr></argument>, <argument pos:start="519:29" pos:end="519:57"><expr pos:start="519:29" pos:end="519:57"><literal type="string" pos:start="519:29" pos:end="519:57">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="519:60" pos:end="519:68"><expr pos:start="519:60" pos:end="519:68"><name pos:start="519:60" pos:end="519:68"><name pos:start="519:60" pos:end="519:61">nd</name><operator pos:start="519:62" pos:end="519:63">-&gt;</operator><name pos:start="519:64" pos:end="519:68">model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="521:13" pos:end="521:20"><expr pos:start="521:13" pos:end="521:19"><call pos:start="521:13" pos:end="521:19"><name pos:start="521:13" pos:end="521:16">exit</name><argument_list pos:start="521:17" pos:end="521:19">(<argument pos:start="521:18" pos:end="521:18"><expr pos:start="521:18" pos:end="521:18"><literal type="number" pos:start="521:18" pos:end="521:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="529:5" pos:end="535:5"><if pos:start="529:5" pos:end="535:5">if <condition pos:start="529:8" pos:end="529:49">(<expr pos:start="529:9" pos:end="529:48"><call pos:start="529:9" pos:end="529:33"><name pos:start="529:9" pos:end="529:25">drive_get_max_bus</name><argument_list pos:start="529:26" pos:end="529:33">(<argument pos:start="529:27" pos:end="529:32"><expr pos:start="529:27" pos:end="529:32"><name pos:start="529:27" pos:end="529:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="529:35" pos:end="529:36">&gt;=</operator> <name pos:start="529:38" pos:end="529:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="529:51" pos:end="535:5">{<block_content pos:start="531:9" pos:end="533:16">

        <expr_stmt pos:start="531:9" pos:end="531:52"><expr pos:start="531:9" pos:end="531:51"><call pos:start="531:9" pos:end="531:51"><name pos:start="531:9" pos:end="531:15">fprintf</name><argument_list pos:start="531:16" pos:end="531:51">(<argument pos:start="531:17" pos:end="531:22"><expr pos:start="531:17" pos:end="531:22"><name pos:start="531:17" pos:end="531:22">stderr</name></expr></argument>, <argument pos:start="531:25" pos:end="531:50"><expr pos:start="531:25" pos:end="531:50"><literal type="string" pos:start="531:25" pos:end="531:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="533:9" pos:end="533:16"><expr pos:start="533:9" pos:end="533:15"><call pos:start="533:9" pos:end="533:15"><name pos:start="533:9" pos:end="533:12">exit</name><argument_list pos:start="533:13" pos:end="533:15">(<argument pos:start="533:14" pos:end="533:14"><expr pos:start="533:14" pos:end="533:14"><literal type="number" pos:start="533:14" pos:end="533:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="539:5" pos:end="551:5">for<control pos:start="539:8" pos:end="539:51">(<init pos:start="539:9" pos:end="539:14"><expr pos:start="539:9" pos:end="539:13"><name pos:start="539:9" pos:end="539:9">i</name> <operator pos:start="539:11" pos:end="539:11">=</operator> <literal type="number" pos:start="539:13" pos:end="539:13">0</literal></expr>;</init> <condition pos:start="539:16" pos:end="539:46"><expr pos:start="539:16" pos:end="539:45"><name pos:start="539:16" pos:end="539:16">i</name> <operator pos:start="539:18" pos:end="539:18">&lt;</operator> <name pos:start="539:20" pos:end="539:30">MAX_IDE_BUS</name> <operator pos:start="539:32" pos:end="539:32">*</operator> <name pos:start="539:34" pos:end="539:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="539:48" pos:end="539:50"><expr pos:start="539:48" pos:end="539:50"><name pos:start="539:48" pos:end="539:48">i</name><operator pos:start="539:49" pos:end="539:50">++</operator></expr></incr>)</control> <block pos:start="539:53" pos:end="551:5">{<block_content pos:start="541:9" pos:end="549:25">

        <expr_stmt pos:start="541:9" pos:end="541:76"><expr pos:start="541:9" pos:end="541:75"><name pos:start="541:9" pos:end="541:13">index</name> <operator pos:start="541:15" pos:end="541:15">=</operator> <call pos:start="541:17" pos:end="541:75"><name pos:start="541:17" pos:end="541:31">drive_get_index</name><argument_list pos:start="541:32" pos:end="541:75">(<argument pos:start="541:33" pos:end="541:38"><expr pos:start="541:33" pos:end="541:38"><name pos:start="541:33" pos:end="541:38">IF_IDE</name></expr></argument>, <argument pos:start="541:41" pos:end="541:56"><expr pos:start="541:41" pos:end="541:56"><name pos:start="541:41" pos:end="541:41">i</name> <operator pos:start="541:43" pos:end="541:43">/</operator> <name pos:start="541:45" pos:end="541:56">MAX_IDE_DEVS</name></expr></argument>, <argument pos:start="541:59" pos:end="541:74"><expr pos:start="541:59" pos:end="541:74"><name pos:start="541:59" pos:end="541:59">i</name> <operator pos:start="541:61" pos:end="541:61">%</operator> <name pos:start="541:63" pos:end="541:74">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="543:9" pos:end="549:25"><if pos:start="543:9" pos:end="545:45">if <condition pos:start="543:12" pos:end="543:24">(<expr pos:start="543:13" pos:end="543:23"><name pos:start="543:13" pos:end="543:17">index</name> <operator pos:start="543:19" pos:end="543:20">!=</operator> <operator pos:start="543:22" pos:end="543:22">-</operator><literal type="number" pos:start="543:23" pos:end="543:23">1</literal></expr>)</condition><block type="pseudo" pos:start="545:13" pos:end="545:45"><block_content pos:start="545:13" pos:end="545:45">

	    <expr_stmt pos:start="545:13" pos:end="545:45"><expr pos:start="545:13" pos:end="545:44"><name pos:start="545:13" pos:end="545:17"><name pos:start="545:13" pos:end="545:14">hd</name><index pos:start="545:15" pos:end="545:17">[<expr pos:start="545:16" pos:end="545:16"><name pos:start="545:16" pos:end="545:16">i</name></expr>]</index></name> <operator pos:start="545:19" pos:end="545:19">=</operator> <name pos:start="545:21" pos:end="545:39"><name pos:start="545:21" pos:end="545:32">drives_table</name><index pos:start="545:33" pos:end="545:39">[<expr pos:start="545:34" pos:end="545:38"><name pos:start="545:34" pos:end="545:38">index</name></expr>]</index></name><operator pos:start="545:40" pos:end="545:40">.</operator><name pos:start="545:41" pos:end="545:44">bdrv</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="547:9" pos:end="549:25">else<block type="pseudo" pos:start="549:13" pos:end="549:25"><block_content pos:start="549:13" pos:end="549:25">

	    <expr_stmt pos:start="549:13" pos:end="549:25"><expr pos:start="549:13" pos:end="549:24"><name pos:start="549:13" pos:end="549:17"><name pos:start="549:13" pos:end="549:14">hd</name><index pos:start="549:15" pos:end="549:17">[<expr pos:start="549:16" pos:end="549:16"><name pos:start="549:16" pos:end="549:16">i</name></expr>]</index></name> <operator pos:start="549:19" pos:end="549:19">=</operator> <name pos:start="549:21" pos:end="549:24">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="555:5" pos:end="569:5"><if pos:start="555:5" pos:end="559:5">if <condition pos:start="555:8" pos:end="555:20">(<expr pos:start="555:9" pos:end="555:19"><name pos:start="555:9" pos:end="555:19">pci_enabled</name></expr>)</condition> <block pos:start="555:22" pos:end="559:5">{<block_content pos:start="557:9" pos:end="557:64">

        <expr_stmt pos:start="557:9" pos:end="557:64"><expr pos:start="557:9" pos:end="557:63"><call pos:start="557:9" pos:end="557:63"><name pos:start="557:9" pos:end="557:26">pci_piix3_ide_init</name><argument_list pos:start="557:27" pos:end="557:63">(<argument pos:start="557:28" pos:end="557:34"><expr pos:start="557:28" pos:end="557:34"><name pos:start="557:28" pos:end="557:34">pci_bus</name></expr></argument>, <argument pos:start="557:37" pos:end="557:38"><expr pos:start="557:37" pos:end="557:38"><name pos:start="557:37" pos:end="557:38">hd</name></expr></argument>, <argument pos:start="557:41" pos:end="557:55"><expr pos:start="557:41" pos:end="557:55"><name pos:start="557:41" pos:end="557:51">piix3_devfn</name> <operator pos:start="557:53" pos:end="557:53">+</operator> <literal type="number" pos:start="557:55" pos:end="557:55">1</literal></expr></argument>, <argument pos:start="557:58" pos:end="557:62"><expr pos:start="557:58" pos:end="557:62"><name pos:start="557:58" pos:end="557:62">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="559:7" pos:end="569:5">else <block pos:start="559:12" pos:end="569:5">{<block_content pos:start="561:9" pos:end="567:9">

        <for pos:start="561:9" pos:end="567:9">for<control pos:start="561:12" pos:end="561:40">(<init pos:start="561:13" pos:end="561:18"><expr pos:start="561:13" pos:end="561:17"><name pos:start="561:13" pos:end="561:13">i</name> <operator pos:start="561:15" pos:end="561:15">=</operator> <literal type="number" pos:start="561:17" pos:end="561:17">0</literal></expr>;</init> <condition pos:start="561:20" pos:end="561:35"><expr pos:start="561:20" pos:end="561:34"><name pos:start="561:20" pos:end="561:20">i</name> <operator pos:start="561:22" pos:end="561:22">&lt;</operator> <name pos:start="561:24" pos:end="561:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="561:37" pos:end="561:39"><expr pos:start="561:37" pos:end="561:39"><name pos:start="561:37" pos:end="561:37">i</name><operator pos:start="561:38" pos:end="561:39">++</operator></expr></incr>)</control> <block pos:start="561:42" pos:end="567:9">{<block_content pos:start="563:13" pos:end="565:73">

            <expr_stmt pos:start="563:13" pos:end="565:73"><expr pos:start="563:13" pos:end="565:72"><call pos:start="563:13" pos:end="565:72"><name pos:start="563:13" pos:end="563:24">isa_ide_init</name><argument_list pos:start="563:25" pos:end="565:72">(<argument pos:start="563:26" pos:end="563:38"><expr pos:start="563:26" pos:end="563:38"><name pos:start="563:26" pos:end="563:38"><name pos:start="563:26" pos:end="563:35">ide_iobase</name><index pos:start="563:36" pos:end="563:38">[<expr pos:start="563:37" pos:end="563:37"><name pos:start="563:37" pos:end="563:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="563:41" pos:end="563:54"><expr pos:start="563:41" pos:end="563:54"><name pos:start="563:41" pos:end="563:54"><name pos:start="563:41" pos:end="563:51">ide_iobase2</name><index pos:start="563:52" pos:end="563:54">[<expr pos:start="563:53" pos:end="563:53"><name pos:start="563:53" pos:end="563:53">i</name></expr>]</index></name></expr></argument>, <argument pos:start="563:57" pos:end="563:73"><expr pos:start="563:57" pos:end="563:73"><name pos:start="563:57" pos:end="563:73"><name pos:start="563:57" pos:end="563:61">i8259</name><index pos:start="563:62" pos:end="563:73">[<expr pos:start="563:63" pos:end="563:72"><name pos:start="563:63" pos:end="563:72"><name pos:start="563:63" pos:end="563:69">ide_irq</name><index pos:start="563:70" pos:end="563:72">[<expr pos:start="563:71" pos:end="563:71"><name pos:start="563:71" pos:end="563:71">i</name></expr>]</index></name></expr>]</index></name></expr></argument>,

	                 <argument pos:start="565:26" pos:end="565:45"><expr pos:start="565:26" pos:end="565:45"><name pos:start="565:26" pos:end="565:45"><name pos:start="565:26" pos:end="565:27">hd</name><index pos:start="565:28" pos:end="565:45">[<expr pos:start="565:29" pos:end="565:44"><name pos:start="565:29" pos:end="565:40">MAX_IDE_DEVS</name> <operator pos:start="565:42" pos:end="565:42">*</operator> <name pos:start="565:44" pos:end="565:44">i</name></expr>]</index></name></expr></argument>, <argument pos:start="565:48" pos:end="565:71"><expr pos:start="565:48" pos:end="565:71"><name pos:start="565:48" pos:end="565:71"><name pos:start="565:48" pos:end="565:49">hd</name><index pos:start="565:50" pos:end="565:71">[<expr pos:start="565:51" pos:end="565:70"><name pos:start="565:51" pos:end="565:62">MAX_IDE_DEVS</name> <operator pos:start="565:64" pos:end="565:64">*</operator> <name pos:start="565:66" pos:end="565:66">i</name> <operator pos:start="565:68" pos:end="565:68">+</operator> <literal type="number" pos:start="565:70" pos:end="565:70">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="573:5" pos:end="573:42"><expr pos:start="573:5" pos:end="573:41"><call pos:start="573:5" pos:end="573:41"><name pos:start="573:5" pos:end="573:14">i8042_init</name><argument_list pos:start="573:15" pos:end="573:41">(<argument pos:start="573:16" pos:end="573:23"><expr pos:start="573:16" pos:end="573:23"><name pos:start="573:16" pos:end="573:23"><name pos:start="573:16" pos:end="573:20">i8259</name><index pos:start="573:21" pos:end="573:23">[<expr pos:start="573:22" pos:end="573:22"><literal type="number" pos:start="573:22" pos:end="573:22">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="573:26" pos:end="573:34"><expr pos:start="573:26" pos:end="573:34"><name pos:start="573:26" pos:end="573:34"><name pos:start="573:26" pos:end="573:30">i8259</name><index pos:start="573:31" pos:end="573:34">[<expr pos:start="573:32" pos:end="573:33"><literal type="number" pos:start="573:32" pos:end="573:33">12</literal></expr>]</index></name></expr></argument>, <argument pos:start="573:37" pos:end="573:40"><expr pos:start="573:37" pos:end="573:40"><literal type="number" pos:start="573:37" pos:end="573:40">0x60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="575:5" pos:end="578:0"><expr pos:start="575:5" pos:end="575:15"><call pos:start="575:5" pos:end="575:15"><name pos:start="575:5" pos:end="575:12">DMA_init</name><argument_list pos:start="575:13" pos:end="575:15">(<argument pos:start="575:14" pos:end="575:14"><expr pos:start="575:14" pos:end="575:14"><literal type="number" pos:start="575:14" pos:end="575:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="577:1" pos:end="577:16">#<cpp:directive pos:start="577:2" pos:end="577:6">ifdef</cpp:directive> <name pos:start="577:8" pos:end="577:16">HAS_AUDIO</name></cpp:ifdef>

    <expr_stmt pos:start="579:5" pos:end="582:0"><expr pos:start="579:5" pos:end="579:51"><call pos:start="579:5" pos:end="579:51"><name pos:start="579:5" pos:end="579:14">audio_init</name><argument_list pos:start="579:15" pos:end="579:51">(<argument pos:start="579:16" pos:end="579:43"><expr pos:start="579:16" pos:end="579:43"><ternary pos:start="579:16" pos:end="579:43"><condition pos:start="579:16" pos:end="579:28"><expr pos:start="579:16" pos:end="579:26"><name pos:start="579:16" pos:end="579:26">pci_enabled</name></expr> ?</condition><then pos:start="579:30" pos:end="579:36"> <expr pos:start="579:30" pos:end="579:36"><name pos:start="579:30" pos:end="579:36">pci_bus</name></expr> </then><else pos:start="579:38" pos:end="579:43">: <expr pos:start="579:40" pos:end="579:43"><name pos:start="579:40" pos:end="579:43">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="579:46" pos:end="579:50"><expr pos:start="579:46" pos:end="579:50"><name pos:start="579:46" pos:end="579:50">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="581:1" pos:end="581:6">#<cpp:directive pos:start="581:2" pos:end="581:6">endif</cpp:directive></cpp:endif>



    <for pos:start="585:5" pos:end="597:5">for<control pos:start="585:8" pos:end="585:31">(<init pos:start="585:9" pos:end="585:14"><expr pos:start="585:9" pos:end="585:13"><name pos:start="585:9" pos:end="585:9">i</name> <operator pos:start="585:11" pos:end="585:11">=</operator> <literal type="number" pos:start="585:13" pos:end="585:13">0</literal></expr>;</init> <condition pos:start="585:16" pos:end="585:26"><expr pos:start="585:16" pos:end="585:25"><name pos:start="585:16" pos:end="585:16">i</name> <operator pos:start="585:18" pos:end="585:18">&lt;</operator> <name pos:start="585:20" pos:end="585:25">MAX_FD</name></expr>;</condition> <incr pos:start="585:28" pos:end="585:30"><expr pos:start="585:28" pos:end="585:30"><name pos:start="585:28" pos:end="585:28">i</name><operator pos:start="585:29" pos:end="585:30">++</operator></expr></incr>)</control> <block pos:start="585:33" pos:end="597:5">{<block_content pos:start="587:9" pos:end="595:25">

        <expr_stmt pos:start="587:9" pos:end="587:49"><expr pos:start="587:9" pos:end="587:48"><name pos:start="587:9" pos:end="587:13">index</name> <operator pos:start="587:15" pos:end="587:15">=</operator> <call pos:start="587:17" pos:end="587:48"><name pos:start="587:17" pos:end="587:31">drive_get_index</name><argument_list pos:start="587:32" pos:end="587:48">(<argument pos:start="587:33" pos:end="587:41"><expr pos:start="587:33" pos:end="587:41"><name pos:start="587:33" pos:end="587:41">IF_FLOPPY</name></expr></argument>, <argument pos:start="587:44" pos:end="587:44"><expr pos:start="587:44" pos:end="587:44"><literal type="number" pos:start="587:44" pos:end="587:44">0</literal></expr></argument>, <argument pos:start="587:47" pos:end="587:47"><expr pos:start="587:47" pos:end="587:47"><name pos:start="587:47" pos:end="587:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="589:9" pos:end="595:25"><if pos:start="589:9" pos:end="591:45">if <condition pos:start="589:12" pos:end="589:24">(<expr pos:start="589:13" pos:end="589:23"><name pos:start="589:13" pos:end="589:17">index</name> <operator pos:start="589:19" pos:end="589:20">!=</operator> <operator pos:start="589:22" pos:end="589:22">-</operator><literal type="number" pos:start="589:23" pos:end="589:23">1</literal></expr>)</condition><block type="pseudo" pos:start="591:13" pos:end="591:45"><block_content pos:start="591:13" pos:end="591:45">

	    <expr_stmt pos:start="591:13" pos:end="591:45"><expr pos:start="591:13" pos:end="591:44"><name pos:start="591:13" pos:end="591:17"><name pos:start="591:13" pos:end="591:14">fd</name><index pos:start="591:15" pos:end="591:17">[<expr pos:start="591:16" pos:end="591:16"><name pos:start="591:16" pos:end="591:16">i</name></expr>]</index></name> <operator pos:start="591:19" pos:end="591:19">=</operator> <name pos:start="591:21" pos:end="591:39"><name pos:start="591:21" pos:end="591:32">drives_table</name><index pos:start="591:33" pos:end="591:39">[<expr pos:start="591:34" pos:end="591:38"><name pos:start="591:34" pos:end="591:38">index</name></expr>]</index></name><operator pos:start="591:40" pos:end="591:40">.</operator><name pos:start="591:41" pos:end="591:44">bdrv</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="593:9" pos:end="595:25">else<block type="pseudo" pos:start="595:13" pos:end="595:25"><block_content pos:start="595:13" pos:end="595:25">

	    <expr_stmt pos:start="595:13" pos:end="595:25"><expr pos:start="595:13" pos:end="595:24"><name pos:start="595:13" pos:end="595:17"><name pos:start="595:13" pos:end="595:14">fd</name><index pos:start="595:15" pos:end="595:17">[<expr pos:start="595:16" pos:end="595:16"><name pos:start="595:16" pos:end="595:16">i</name></expr>]</index></name> <operator pos:start="595:19" pos:end="595:19">=</operator> <name pos:start="595:21" pos:end="595:24">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="599:5" pos:end="599:63"><expr pos:start="599:5" pos:end="599:62"><name pos:start="599:5" pos:end="599:21">floppy_controller</name> <operator pos:start="599:23" pos:end="599:23">=</operator> <call pos:start="599:25" pos:end="599:62"><name pos:start="599:25" pos:end="599:35">fdctrl_init</name><argument_list pos:start="599:36" pos:end="599:62">(<argument pos:start="599:37" pos:end="599:44"><expr pos:start="599:37" pos:end="599:44"><name pos:start="599:37" pos:end="599:44"><name pos:start="599:37" pos:end="599:41">i8259</name><index pos:start="599:42" pos:end="599:44">[<expr pos:start="599:43" pos:end="599:43"><literal type="number" pos:start="599:43" pos:end="599:43">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="599:47" pos:end="599:47"><expr pos:start="599:47" pos:end="599:47"><literal type="number" pos:start="599:47" pos:end="599:47">2</literal></expr></argument>, <argument pos:start="599:50" pos:end="599:50"><expr pos:start="599:50" pos:end="599:50"><literal type="number" pos:start="599:50" pos:end="599:50">0</literal></expr></argument>, <argument pos:start="599:53" pos:end="599:57"><expr pos:start="599:53" pos:end="599:57"><literal type="number" pos:start="599:53" pos:end="599:57">0x3f0</literal></expr></argument>, <argument pos:start="599:60" pos:end="599:61"><expr pos:start="599:60" pos:end="599:61"><name pos:start="599:60" pos:end="599:61">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="603:5" pos:end="603:69"><expr pos:start="603:5" pos:end="603:68"><call pos:start="603:5" pos:end="603:68"><name pos:start="603:5" pos:end="603:13">cmos_init</name><argument_list pos:start="603:14" pos:end="603:68">(<argument pos:start="603:15" pos:end="603:31"><expr pos:start="603:15" pos:end="603:31"><name pos:start="603:15" pos:end="603:31">below_4g_mem_size</name></expr></argument>, <argument pos:start="603:34" pos:end="603:50"><expr pos:start="603:34" pos:end="603:50"><name pos:start="603:34" pos:end="603:50">above_4g_mem_size</name></expr></argument>, <argument pos:start="603:53" pos:end="603:63"><expr pos:start="603:53" pos:end="603:63"><name pos:start="603:53" pos:end="603:63">boot_device</name></expr></argument>, <argument pos:start="603:66" pos:end="603:67"><expr pos:start="603:66" pos:end="603:67"><name pos:start="603:66" pos:end="603:67">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="607:5" pos:end="611:5"><if pos:start="607:5" pos:end="611:5">if <condition pos:start="607:8" pos:end="607:35">(<expr pos:start="607:9" pos:end="607:34"><name pos:start="607:9" pos:end="607:19">pci_enabled</name> <operator pos:start="607:21" pos:end="607:22">&amp;&amp;</operator> <name pos:start="607:24" pos:end="607:34">usb_enabled</name></expr>)</condition> <block pos:start="607:37" pos:end="611:5">{<block_content pos:start="609:9" pos:end="609:54">

        <expr_stmt pos:start="609:9" pos:end="609:54"><expr pos:start="609:9" pos:end="609:53"><call pos:start="609:9" pos:end="609:53"><name pos:start="609:9" pos:end="609:27">usb_uhci_piix3_init</name><argument_list pos:start="609:28" pos:end="609:53">(<argument pos:start="609:29" pos:end="609:35"><expr pos:start="609:29" pos:end="609:35"><name pos:start="609:29" pos:end="609:35">pci_bus</name></expr></argument>, <argument pos:start="609:38" pos:end="609:52"><expr pos:start="609:38" pos:end="609:52"><name pos:start="609:38" pos:end="609:48">piix3_devfn</name> <operator pos:start="609:50" pos:end="609:50">+</operator> <literal type="number" pos:start="609:52" pos:end="609:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="615:5" pos:end="633:5"><if pos:start="615:5" pos:end="633:5">if <condition pos:start="615:8" pos:end="615:36">(<expr pos:start="615:9" pos:end="615:35"><name pos:start="615:9" pos:end="615:19">pci_enabled</name> <operator pos:start="615:21" pos:end="615:22">&amp;&amp;</operator> <name pos:start="615:24" pos:end="615:35">acpi_enabled</name></expr>)</condition> <block pos:start="615:38" pos:end="633:5">{<block_content pos:start="617:9" pos:end="631:9">

        <decl_stmt pos:start="617:9" pos:end="617:52"><decl pos:start="617:9" pos:end="617:51"><type pos:start="617:9" pos:end="617:17"><name pos:start="617:9" pos:end="617:15">uint8_t</name> <modifier pos:start="617:17" pos:end="617:17">*</modifier></type><name pos:start="617:18" pos:end="617:27">eeprom_buf</name> <init pos:start="617:29" pos:end="617:51">= <expr pos:start="617:31" pos:end="617:51"><call pos:start="617:31" pos:end="617:51"><name pos:start="617:31" pos:end="617:42">qemu_mallocz</name><argument_list pos:start="617:43" pos:end="617:51">(<argument pos:start="617:44" pos:end="617:50"><expr pos:start="617:44" pos:end="617:50"><literal type="number" pos:start="617:44" pos:end="617:44">8</literal> <operator pos:start="617:46" pos:end="617:46">*</operator> <literal type="number" pos:start="617:48" pos:end="617:50">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="617:54" pos:end="617:84">/* XXX: make this persistent */</comment>

        <decl_stmt pos:start="619:9" pos:end="619:23"><decl pos:start="619:9" pos:end="619:22"><type pos:start="619:9" pos:end="619:17"><name pos:start="619:9" pos:end="619:15">i2c_bus</name> <modifier pos:start="619:17" pos:end="619:17">*</modifier></type><name pos:start="619:18" pos:end="619:22">smbus</name></decl>;</decl_stmt>



        <comment type="block" pos:start="623:9" pos:end="623:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="625:9" pos:end="625:74"><expr pos:start="625:9" pos:end="625:73"><name pos:start="625:9" pos:end="625:13">smbus</name> <operator pos:start="625:15" pos:end="625:15">=</operator> <call pos:start="625:17" pos:end="625:73"><name pos:start="625:17" pos:end="625:29">piix4_pm_init</name><argument_list pos:start="625:30" pos:end="625:73">(<argument pos:start="625:31" pos:end="625:37"><expr pos:start="625:31" pos:end="625:37"><name pos:start="625:31" pos:end="625:37">pci_bus</name></expr></argument>, <argument pos:start="625:40" pos:end="625:54"><expr pos:start="625:40" pos:end="625:54"><name pos:start="625:40" pos:end="625:50">piix3_devfn</name> <operator pos:start="625:52" pos:end="625:52">+</operator> <literal type="number" pos:start="625:54" pos:end="625:54">3</literal></expr></argument>, <argument pos:start="625:57" pos:end="625:62"><expr pos:start="625:57" pos:end="625:62"><literal type="number" pos:start="625:57" pos:end="625:62">0xb100</literal></expr></argument>, <argument pos:start="625:65" pos:end="625:72"><expr pos:start="625:65" pos:end="625:72"><name pos:start="625:65" pos:end="625:72"><name pos:start="625:65" pos:end="625:69">i8259</name><index pos:start="625:70" pos:end="625:72">[<expr pos:start="625:71" pos:end="625:71"><literal type="number" pos:start="625:71" pos:end="625:71">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="627:9" pos:end="631:9">for <control pos:start="627:13" pos:end="627:31">(<init pos:start="627:14" pos:end="627:19"><expr pos:start="627:14" pos:end="627:18"><name pos:start="627:14" pos:end="627:14">i</name> <operator pos:start="627:16" pos:end="627:16">=</operator> <literal type="number" pos:start="627:18" pos:end="627:18">0</literal></expr>;</init> <condition pos:start="627:21" pos:end="627:26"><expr pos:start="627:21" pos:end="627:25"><name pos:start="627:21" pos:end="627:21">i</name> <operator pos:start="627:23" pos:end="627:23">&lt;</operator> <literal type="number" pos:start="627:25" pos:end="627:25">8</literal></expr>;</condition> <incr pos:start="627:28" pos:end="627:30"><expr pos:start="627:28" pos:end="627:30"><name pos:start="627:28" pos:end="627:28">i</name><operator pos:start="627:29" pos:end="627:30">++</operator></expr></incr>)</control> <block pos:start="627:33" pos:end="631:9">{<block_content pos:start="629:13" pos:end="629:78">

            <expr_stmt pos:start="629:13" pos:end="629:78"><expr pos:start="629:13" pos:end="629:77"><call pos:start="629:13" pos:end="629:77"><name pos:start="629:13" pos:end="629:36">smbus_eeprom_device_init</name><argument_list pos:start="629:37" pos:end="629:77">(<argument pos:start="629:38" pos:end="629:42"><expr pos:start="629:38" pos:end="629:42"><name pos:start="629:38" pos:end="629:42">smbus</name></expr></argument>, <argument pos:start="629:45" pos:end="629:52"><expr pos:start="629:45" pos:end="629:52"><literal type="number" pos:start="629:45" pos:end="629:50">0x50</literal> <operator pos:start="629:50" pos:end="629:50">+</operator> <name pos:start="629:52" pos:end="629:52">i</name></expr></argument>, <argument pos:start="629:55" pos:end="629:76"><expr pos:start="629:55" pos:end="629:76"><name pos:start="629:55" pos:end="629:64">eeprom_buf</name> <operator pos:start="629:66" pos:end="629:66">+</operator> <operator pos:start="629:68" pos:end="629:68">(</operator><name pos:start="629:69" pos:end="629:69">i</name> <operator pos:start="629:71" pos:end="629:71">*</operator> <literal type="number" pos:start="629:73" pos:end="629:75">256</literal><operator pos:start="629:76" pos:end="629:76">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="637:5" pos:end="641:5"><if pos:start="637:5" pos:end="641:5">if <condition pos:start="637:8" pos:end="637:21">(<expr pos:start="637:9" pos:end="637:20"><name pos:start="637:9" pos:end="637:20">i440fx_state</name></expr>)</condition> <block pos:start="637:23" pos:end="641:5">{<block_content pos:start="639:9" pos:end="639:50">

        <expr_stmt pos:start="639:9" pos:end="639:50"><expr pos:start="639:9" pos:end="639:49"><call pos:start="639:9" pos:end="639:49"><name pos:start="639:9" pos:end="639:35">i440fx_init_memory_mappings</name><argument_list pos:start="639:36" pos:end="639:49">(<argument pos:start="639:37" pos:end="639:48"><expr pos:start="639:37" pos:end="639:48"><name pos:start="639:37" pos:end="639:48">i440fx_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="645:5" pos:end="677:5"><if pos:start="645:5" pos:end="677:5">if <condition pos:start="645:8" pos:end="645:20">(<expr pos:start="645:9" pos:end="645:19"><name pos:start="645:9" pos:end="645:19">pci_enabled</name></expr>)</condition> <block pos:start="645:22" pos:end="677:5">{<block_content pos:start="647:9" pos:end="675:9">

	<decl_stmt pos:start="647:9" pos:end="647:20"><decl pos:start="647:9" pos:end="647:19"><type pos:start="647:9" pos:end="647:11"><name pos:start="647:9" pos:end="647:11">int</name></type> <name pos:start="647:13" pos:end="647:19">max_bus</name></decl>;</decl_stmt>

        <decl_stmt pos:start="649:9" pos:end="649:22"><decl pos:start="649:9" pos:end="649:15"><type pos:start="649:9" pos:end="649:11"><name pos:start="649:9" pos:end="649:11">int</name></type> <name pos:start="649:13" pos:end="649:15">bus</name></decl>, <decl pos:start="649:18" pos:end="649:21"><type ref="prev" pos:start="649:9" pos:end="649:11"/><name pos:start="649:18" pos:end="649:21">unit</name></decl>;</decl_stmt>

        <decl_stmt pos:start="651:9" pos:end="651:19"><decl pos:start="651:9" pos:end="651:18"><type pos:start="651:9" pos:end="651:14"><name pos:start="651:9" pos:end="651:12">void</name> <modifier pos:start="651:14" pos:end="651:14">*</modifier></type><name pos:start="651:15" pos:end="651:18">scsi</name></decl>;</decl_stmt>



        <expr_stmt pos:start="655:9" pos:end="655:45"><expr pos:start="655:9" pos:end="655:44"><name pos:start="655:9" pos:end="655:15">max_bus</name> <operator pos:start="655:17" pos:end="655:17">=</operator> <call pos:start="655:19" pos:end="655:44"><name pos:start="655:19" pos:end="655:35">drive_get_max_bus</name><argument_list pos:start="655:36" pos:end="655:44">(<argument pos:start="655:37" pos:end="655:43"><expr pos:start="655:37" pos:end="655:43"><name pos:start="655:37" pos:end="655:43">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<for pos:start="659:9" pos:end="675:9">for <control pos:start="659:13" pos:end="659:44">(<init pos:start="659:14" pos:end="659:21"><expr pos:start="659:14" pos:end="659:20"><name pos:start="659:14" pos:end="659:16">bus</name> <operator pos:start="659:18" pos:end="659:18">=</operator> <literal type="number" pos:start="659:20" pos:end="659:20">0</literal></expr>;</init> <condition pos:start="659:23" pos:end="659:37"><expr pos:start="659:23" pos:end="659:36"><name pos:start="659:23" pos:end="659:25">bus</name> <operator pos:start="659:27" pos:end="659:28">&lt;=</operator> <name pos:start="659:30" pos:end="659:36">max_bus</name></expr>;</condition> <incr pos:start="659:39" pos:end="659:43"><expr pos:start="659:39" pos:end="659:43"><name pos:start="659:39" pos:end="659:41">bus</name><operator pos:start="659:42" pos:end="659:43">++</operator></expr></incr>)</control> <block pos:start="659:46" pos:end="675:9">{<block_content pos:start="661:13" pos:end="673:13">

            <expr_stmt pos:start="661:13" pos:end="661:46"><expr pos:start="661:13" pos:end="661:45"><name pos:start="661:13" pos:end="661:16">scsi</name> <operator pos:start="661:18" pos:end="661:18">=</operator> <call pos:start="661:20" pos:end="661:45"><name pos:start="661:20" pos:end="661:32">lsi_scsi_init</name><argument_list pos:start="661:33" pos:end="661:45">(<argument pos:start="661:34" pos:end="661:40"><expr pos:start="661:34" pos:end="661:40"><name pos:start="661:34" pos:end="661:40">pci_bus</name></expr></argument>, <argument pos:start="661:43" pos:end="661:44"><expr pos:start="661:43" pos:end="661:44"><operator pos:start="661:43" pos:end="661:43">-</operator><literal type="number" pos:start="661:44" pos:end="661:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="663:13" pos:end="673:13">for <control pos:start="663:17" pos:end="663:55">(<init pos:start="663:18" pos:end="663:26"><expr pos:start="663:18" pos:end="663:25"><name pos:start="663:18" pos:end="663:21">unit</name> <operator pos:start="663:23" pos:end="663:23">=</operator> <literal type="number" pos:start="663:25" pos:end="663:25">0</literal></expr>;</init> <condition pos:start="663:28" pos:end="663:47"><expr pos:start="663:28" pos:end="663:46"><name pos:start="663:28" pos:end="663:31">unit</name> <operator pos:start="663:33" pos:end="663:33">&lt;</operator> <name pos:start="663:35" pos:end="663:46">LSI_MAX_DEVS</name></expr>;</condition> <incr pos:start="663:49" pos:end="663:54"><expr pos:start="663:49" pos:end="663:54"><name pos:start="663:49" pos:end="663:52">unit</name><operator pos:start="663:53" pos:end="663:54">++</operator></expr></incr>)</control> <block pos:start="663:57" pos:end="673:13">{<block_content pos:start="665:17" pos:end="671:70">

	        <expr_stmt pos:start="665:17" pos:end="665:60"><expr pos:start="665:17" pos:end="665:59"><name pos:start="665:17" pos:end="665:21">index</name> <operator pos:start="665:23" pos:end="665:23">=</operator> <call pos:start="665:25" pos:end="665:59"><name pos:start="665:25" pos:end="665:39">drive_get_index</name><argument_list pos:start="665:40" pos:end="665:59">(<argument pos:start="665:41" pos:end="665:47"><expr pos:start="665:41" pos:end="665:47"><name pos:start="665:41" pos:end="665:47">IF_SCSI</name></expr></argument>, <argument pos:start="665:50" pos:end="665:52"><expr pos:start="665:50" pos:end="665:52"><name pos:start="665:50" pos:end="665:52">bus</name></expr></argument>, <argument pos:start="665:55" pos:end="665:58"><expr pos:start="665:55" pos:end="665:58"><name pos:start="665:55" pos:end="665:58">unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="667:17" pos:end="669:29"><if pos:start="667:17" pos:end="669:29">if <condition pos:start="667:20" pos:end="667:32">(<expr pos:start="667:21" pos:end="667:31"><name pos:start="667:21" pos:end="667:25">index</name> <operator pos:start="667:27" pos:end="667:28">==</operator> <operator pos:start="667:30" pos:end="667:30">-</operator><literal type="number" pos:start="667:31" pos:end="667:31">1</literal></expr>)</condition><block type="pseudo" pos:start="669:21" pos:end="669:29"><block_content pos:start="669:21" pos:end="669:29">

		    <continue pos:start="669:21" pos:end="669:29">continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt pos:start="671:17" pos:end="671:70"><expr pos:start="671:17" pos:end="671:69"><call pos:start="671:17" pos:end="671:69"><name pos:start="671:17" pos:end="671:31">lsi_scsi_attach</name><argument_list pos:start="671:32" pos:end="671:69">(<argument pos:start="671:33" pos:end="671:36"><expr pos:start="671:33" pos:end="671:36"><name pos:start="671:33" pos:end="671:36">scsi</name></expr></argument>, <argument pos:start="671:39" pos:end="671:62"><expr pos:start="671:39" pos:end="671:62"><name pos:start="671:39" pos:end="671:57"><name pos:start="671:39" pos:end="671:50">drives_table</name><index pos:start="671:51" pos:end="671:57">[<expr pos:start="671:52" pos:end="671:56"><name pos:start="671:52" pos:end="671:56">index</name></expr>]</index></name><operator pos:start="671:58" pos:end="671:58">.</operator><name pos:start="671:59" pos:end="671:62">bdrv</name></expr></argument>, <argument pos:start="671:65" pos:end="671:68"><expr pos:start="671:65" pos:end="671:68"><name pos:start="671:65" pos:end="671:68">unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
