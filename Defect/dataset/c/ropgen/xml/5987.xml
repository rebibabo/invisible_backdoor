<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5987.c" pos:tabs="8"><function pos:start="1:1" pos:end="266:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">ahci_hba_enable</name><parameter_list pos:start="1:21" pos:end="1:38">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:31">AHCIQState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:37">ahci</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="266:1">{<block_content pos:start="23:5" pos:end="255:37">

    <comment type="block" pos:start="5:5" pos:end="21:7">/* Bits of interest in this section:

     * GHC.AE     Global Host Control / AHCI Enable

     * PxCMD.ST   Port Command: Start

     * PxCMD.SUD  "Spin Up Device"

     * PxCMD.POD  "Power On Device"

     * PxCMD.FRE  "FIS Receive Enable"

     * PxCMD.FR   "FIS Receive Running"

     * PxCMD.CR   "Command List Running"

     */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:16">reg</name></decl>, <decl pos:start="23:19" pos:end="23:28"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:19" pos:end="23:28">ports_impl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:15"><decl pos:start="25:5" pos:end="25:14"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint16_t</name></type> <name pos:start="25:14" pos:end="25:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">uint8_t</name></type> <name pos:start="27:13" pos:end="27:25">num_cmd_slots</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:27"><expr pos:start="31:5" pos:end="31:26"><call pos:start="31:5" pos:end="31:26"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="31:26">(<argument pos:start="31:14" pos:end="31:25"><expr pos:start="31:14" pos:end="31:25"><name pos:start="31:14" pos:end="31:17">ahci</name> <operator pos:start="31:19" pos:end="31:20">!=</operator> <name pos:start="31:22" pos:end="31:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:25">/* Set GHC.AE to 1 */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><call pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:12">ahci_set</name><argument_list pos:start="37:13" pos:end="37:41">(<argument pos:start="37:14" pos:end="37:17"><expr pos:start="37:14" pos:end="37:17"><name pos:start="37:14" pos:end="37:17">ahci</name></expr></argument>, <argument pos:start="37:20" pos:end="37:27"><expr pos:start="37:20" pos:end="37:27"><name pos:start="37:20" pos:end="37:27">AHCI_GHC</name></expr></argument>, <argument pos:start="37:30" pos:end="37:40"><expr pos:start="37:30" pos:end="37:40"><name pos:start="37:30" pos:end="37:40">AHCI_GHC_AE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:7">reg</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:35"><name pos:start="39:11" pos:end="39:19">ahci_rreg</name><argument_list pos:start="39:20" pos:end="39:35">(<argument pos:start="39:21" pos:end="39:24"><expr pos:start="39:21" pos:end="39:24"><name pos:start="39:21" pos:end="39:24">ahci</name></expr></argument>, <argument pos:start="39:27" pos:end="39:34"><expr pos:start="39:27" pos:end="39:34"><name pos:start="39:27" pos:end="39:34">AHCI_GHC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:37"><expr pos:start="41:5" pos:end="41:36"><call pos:start="41:5" pos:end="41:36"><name pos:start="41:5" pos:end="41:18">ASSERT_BIT_SET</name><argument_list pos:start="41:19" pos:end="41:36">(<argument pos:start="41:20" pos:end="41:22"><expr pos:start="41:20" pos:end="41:22"><name pos:start="41:20" pos:end="41:22">reg</name></expr></argument>, <argument pos:start="41:25" pos:end="41:35"><expr pos:start="41:25" pos:end="41:35"><name pos:start="41:25" pos:end="41:35">AHCI_GHC_AE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:29">/* Cache CAP and CAP2. */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:8">ahci</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:13">cap</name></name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:41"><name pos:start="47:17" pos:end="47:25">ahci_rreg</name><argument_list pos:start="47:26" pos:end="47:41">(<argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">ahci</name></expr></argument>, <argument pos:start="47:33" pos:end="47:40"><expr pos:start="47:33" pos:end="47:40"><name pos:start="47:33" pos:end="47:40">AHCI_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:8">ahci</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:14">cap2</name></name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:43"><name pos:start="49:18" pos:end="49:26">ahci_rreg</name><argument_list pos:start="49:27" pos:end="49:43">(<argument pos:start="49:28" pos:end="49:31"><expr pos:start="49:28" pos:end="49:31"><name pos:start="49:28" pos:end="49:31">ahci</name></expr></argument>, <argument pos:start="49:34" pos:end="49:42"><expr pos:start="49:34" pos:end="49:42"><name pos:start="49:34" pos:end="49:42">AHCI_CAP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:58">/* Read CAP.NCS, how many command slots do we have? */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:75"><expr pos:start="55:5" pos:end="55:74"><name pos:start="55:5" pos:end="55:17">num_cmd_slots</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <operator pos:start="55:21" pos:end="55:21">(</operator><operator pos:start="55:22" pos:end="55:22">(</operator><name pos:start="55:23" pos:end="55:31"><name pos:start="55:23" pos:end="55:26">ahci</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:31">cap</name></name> <operator pos:start="55:33" pos:end="55:33">&amp;</operator> <name pos:start="55:35" pos:end="55:46">AHCI_CAP_NCS</name><operator pos:start="55:47" pos:end="55:47">)</operator> <operator pos:start="55:49" pos:end="55:50">&gt;&gt;</operator> <call pos:start="55:52" pos:end="55:69"><name pos:start="55:52" pos:end="55:55">ctzl</name><argument_list pos:start="55:56" pos:end="55:69">(<argument pos:start="55:57" pos:end="55:68"><expr pos:start="55:57" pos:end="55:68"><name pos:start="55:57" pos:end="55:68">AHCI_CAP_NCS</name></expr></argument>)</argument_list></call><operator pos:start="55:70" pos:end="55:70">)</operator> <operator pos:start="55:72" pos:end="55:72">+</operator> <literal type="number" pos:start="55:74" pos:end="55:74">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:65"><expr pos:start="57:5" pos:end="57:64"><call pos:start="57:5" pos:end="57:64"><name pos:start="57:5" pos:end="57:18">g_test_message</name><argument_list pos:start="57:19" pos:end="57:64">(<argument pos:start="57:20" pos:end="57:48"><expr pos:start="57:20" pos:end="57:48"><literal type="string" pos:start="57:20" pos:end="57:48">"Number of Command Slots: %u"</literal></expr></argument>, <argument pos:start="57:51" pos:end="57:63"><expr pos:start="57:51" pos:end="57:63"><name pos:start="57:51" pos:end="57:63">num_cmd_slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:48">/* Determine which ports are implemented. */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:42"><expr pos:start="63:5" pos:end="63:41"><name pos:start="63:5" pos:end="63:14">ports_impl</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <call pos:start="63:18" pos:end="63:41"><name pos:start="63:18" pos:end="63:26">ahci_rreg</name><argument_list pos:start="63:27" pos:end="63:41">(<argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><name pos:start="63:28" pos:end="63:31">ahci</name></expr></argument>, <argument pos:start="63:34" pos:end="63:40"><expr pos:start="63:34" pos:end="63:40"><name pos:start="63:34" pos:end="63:40">AHCI_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="67:5" pos:end="245:5">for <control pos:start="67:9" pos:end="67:50">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:27"><expr pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:26">ports_impl</name></expr>;</condition> <incr pos:start="67:29" pos:end="67:49"><expr pos:start="67:29" pos:end="67:44"><name pos:start="67:29" pos:end="67:38">ports_impl</name> <operator pos:start="67:40" pos:end="67:42">&gt;&gt;=</operator> <literal type="number" pos:start="67:44" pos:end="67:44">1</literal></expr><operator pos:start="67:45" pos:end="67:45">,</operator> <expr pos:start="67:47" pos:end="67:49"><operator pos:start="67:47" pos:end="67:48">++</operator><name pos:start="67:49" pos:end="67:49">i</name></expr></incr>)</control> <block pos:start="67:52" pos:end="245:5">{<block_content pos:start="69:9" pos:end="243:9">

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:33">(<expr pos:start="69:13" pos:end="69:32"><operator pos:start="69:13" pos:end="69:13">!</operator><operator pos:start="69:14" pos:end="69:14">(</operator><name pos:start="69:15" pos:end="69:24">ports_impl</name> <operator pos:start="69:26" pos:end="69:26">&amp;</operator> <literal type="number" pos:start="69:28" pos:end="69:31">0x01</literal><operator pos:start="69:32" pos:end="69:32">)</operator></expr>)</condition> <block pos:start="69:35" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:21">

            <continue pos:start="71:13" pos:end="71:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:50"><expr pos:start="77:9" pos:end="77:49"><call pos:start="77:9" pos:end="77:49"><name pos:start="77:9" pos:end="77:22">g_test_message</name><argument_list pos:start="77:23" pos:end="77:49">(<argument pos:start="77:24" pos:end="77:45"><expr pos:start="77:24" pos:end="77:45"><literal type="string" pos:start="77:24" pos:end="77:45">"Initializing port %u"</literal></expr></argument>, <argument pos:start="77:48" pos:end="77:48"><expr pos:start="77:48" pos:end="77:48"><name pos:start="77:48" pos:end="77:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:49"><expr pos:start="81:9" pos:end="81:48"><name pos:start="81:9" pos:end="81:11">reg</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:48"><name pos:start="81:15" pos:end="81:26">ahci_px_rreg</name><argument_list pos:start="81:27" pos:end="81:48">(<argument pos:start="81:28" pos:end="81:31"><expr pos:start="81:28" pos:end="81:31"><name pos:start="81:28" pos:end="81:31">ahci</name></expr></argument>, <argument pos:start="81:34" pos:end="81:34"><expr pos:start="81:34" pos:end="81:34"><name pos:start="81:34" pos:end="81:34">i</name></expr></argument>, <argument pos:start="81:37" pos:end="81:47"><expr pos:start="81:37" pos:end="81:47"><name pos:start="81:37" pos:end="81:47">AHCI_PX_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="113:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="85:53">(<expr pos:start="83:13" pos:end="85:52"><call pos:start="83:13" pos:end="85:52"><name pos:start="83:13" pos:end="83:18">BITCLR</name><argument_list pos:start="83:19" pos:end="85:52">(<argument pos:start="83:20" pos:end="83:22"><expr pos:start="83:20" pos:end="83:22"><name pos:start="83:20" pos:end="83:22">reg</name></expr></argument>, <argument pos:start="83:25" pos:end="85:51"><expr pos:start="83:25" pos:end="85:51"><name pos:start="83:25" pos:end="83:38">AHCI_PX_CMD_ST</name> <operator pos:start="83:40" pos:end="83:40">|</operator> <name pos:start="83:42" pos:end="83:55">AHCI_PX_CMD_CR</name> <operator pos:start="83:57" pos:end="83:57">|</operator>

                   <name pos:start="85:20" pos:end="85:34">AHCI_PX_CMD_FRE</name> <operator pos:start="85:36" pos:end="85:36">|</operator> <name pos:start="85:38" pos:end="85:51">AHCI_PX_CMD_FR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:55" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:43">

            <expr_stmt pos:start="87:13" pos:end="87:43"><expr pos:start="87:13" pos:end="87:42"><call pos:start="87:13" pos:end="87:42"><name pos:start="87:13" pos:end="87:26">g_test_message</name><argument_list pos:start="87:27" pos:end="87:42">(<argument pos:start="87:28" pos:end="87:41"><expr pos:start="87:28" pos:end="87:41"><literal type="string" pos:start="87:28" pos:end="87:41">"port is idle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="113:9">else <block pos:start="89:16" pos:end="113:9">{<block_content pos:start="91:13" pos:end="107:47">

            <expr_stmt pos:start="91:13" pos:end="91:53"><expr pos:start="91:13" pos:end="91:52"><call pos:start="91:13" pos:end="91:52"><name pos:start="91:13" pos:end="91:26">g_test_message</name><argument_list pos:start="91:27" pos:end="91:52">(<argument pos:start="91:28" pos:end="91:51"><expr pos:start="91:28" pos:end="91:51"><literal type="string" pos:start="91:28" pos:end="91:51">"port needs to be idled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="95:60"><expr pos:start="93:13" pos:end="95:59"><call pos:start="93:13" pos:end="95:59"><name pos:start="93:13" pos:end="93:23">ahci_px_clr</name><argument_list pos:start="93:24" pos:end="95:59">(<argument pos:start="93:25" pos:end="93:28"><expr pos:start="93:25" pos:end="93:28"><name pos:start="93:25" pos:end="93:28">ahci</name></expr></argument>, <argument pos:start="93:31" pos:end="93:31"><expr pos:start="93:31" pos:end="93:31"><name pos:start="93:31" pos:end="93:31">i</name></expr></argument>, <argument pos:start="93:34" pos:end="93:44"><expr pos:start="93:34" pos:end="93:44"><name pos:start="93:34" pos:end="93:44">AHCI_PX_CMD</name></expr></argument>,

                        <argument pos:start="95:25" pos:end="95:58"><expr pos:start="95:25" pos:end="95:58"><operator pos:start="95:25" pos:end="95:25">(</operator><name pos:start="95:26" pos:end="95:39">AHCI_PX_CMD_ST</name> <operator pos:start="95:41" pos:end="95:41">|</operator> <name pos:start="95:43" pos:end="95:57">AHCI_PX_CMD_FRE</name><operator pos:start="95:58" pos:end="95:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="97:13" pos:end="97:50">/* The port has 500ms to disengage. */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:27"><expr pos:start="99:13" pos:end="99:26"><call pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:18">usleep</name><argument_list pos:start="99:19" pos:end="99:26">(<argument pos:start="99:20" pos:end="99:25"><expr pos:start="99:20" pos:end="99:25"><literal type="number" pos:start="99:20" pos:end="99:25">500000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:53"><expr pos:start="101:13" pos:end="101:52"><name pos:start="101:13" pos:end="101:15">reg</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:52"><name pos:start="101:19" pos:end="101:30">ahci_px_rreg</name><argument_list pos:start="101:31" pos:end="101:52">(<argument pos:start="101:32" pos:end="101:35"><expr pos:start="101:32" pos:end="101:35"><name pos:start="101:32" pos:end="101:35">ahci</name></expr></argument>, <argument pos:start="101:38" pos:end="101:38"><expr pos:start="101:38" pos:end="101:38"><name pos:start="101:38" pos:end="101:38">i</name></expr></argument>, <argument pos:start="101:41" pos:end="101:51"><expr pos:start="101:41" pos:end="101:51"><name pos:start="101:41" pos:end="101:51">AHCI_PX_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:50"><expr pos:start="103:13" pos:end="103:49"><call pos:start="103:13" pos:end="103:49"><name pos:start="103:13" pos:end="103:28">ASSERT_BIT_CLEAR</name><argument_list pos:start="103:29" pos:end="103:49">(<argument pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><name pos:start="103:30" pos:end="103:32">reg</name></expr></argument>, <argument pos:start="103:35" pos:end="103:48"><expr pos:start="103:35" pos:end="103:48"><name pos:start="103:35" pos:end="103:48">AHCI_PX_CMD_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:50"><expr pos:start="105:13" pos:end="105:49"><call pos:start="105:13" pos:end="105:49"><name pos:start="105:13" pos:end="105:28">ASSERT_BIT_CLEAR</name><argument_list pos:start="105:29" pos:end="105:49">(<argument pos:start="105:30" pos:end="105:32"><expr pos:start="105:30" pos:end="105:32"><name pos:start="105:30" pos:end="105:32">reg</name></expr></argument>, <argument pos:start="105:35" pos:end="105:48"><expr pos:start="105:35" pos:end="105:48"><name pos:start="105:35" pos:end="105:48">AHCI_PX_CMD_FR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:47"><expr pos:start="107:13" pos:end="107:46"><call pos:start="107:13" pos:end="107:46"><name pos:start="107:13" pos:end="107:26">g_test_message</name><argument_list pos:start="107:27" pos:end="107:46">(<argument pos:start="107:28" pos:end="107:45"><expr pos:start="107:28" pos:end="107:45"><literal type="string" pos:start="107:28" pos:end="107:45">"port is now idle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="109:13" pos:end="111:59">/* The spec does allow for possibly needing a PORT RESET

             * or HBA reset if we fail to idle the port. */</comment>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="117:9" pos:end="117:70">/* Allocate Memory for the Command List Buffer &amp; FIS Buffer */</comment>

        <comment type="block" pos:start="119:9" pos:end="119:64">/* PxCLB space ... 0x20 per command, as in 4.2.2 p 36 */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:67"><expr pos:start="121:9" pos:end="121:66"><name pos:start="121:9" pos:end="121:21"><name pos:start="121:9" pos:end="121:12">ahci</name><operator pos:start="121:13" pos:end="121:14">-&gt;</operator><name pos:start="121:15" pos:end="121:18">port</name><index pos:start="121:19" pos:end="121:21">[<expr pos:start="121:20" pos:end="121:20"><name pos:start="121:20" pos:end="121:20">i</name></expr>]</index></name><operator pos:start="121:22" pos:end="121:22">.</operator><name pos:start="121:23" pos:end="121:25">clb</name> <operator pos:start="121:27" pos:end="121:27">=</operator> <call pos:start="121:29" pos:end="121:66"><name pos:start="121:29" pos:end="121:38">ahci_alloc</name><argument_list pos:start="121:39" pos:end="121:66">(<argument pos:start="121:40" pos:end="121:43"><expr pos:start="121:40" pos:end="121:43"><name pos:start="121:40" pos:end="121:43">ahci</name></expr></argument>, <argument pos:start="121:46" pos:end="121:65"><expr pos:start="121:46" pos:end="121:65"><name pos:start="121:46" pos:end="121:58">num_cmd_slots</name> <operator pos:start="121:60" pos:end="121:60">*</operator> <literal type="number" pos:start="121:62" pos:end="121:65">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:63"><expr pos:start="123:9" pos:end="123:62"><call pos:start="123:9" pos:end="123:62"><name pos:start="123:9" pos:end="123:15">qmemset</name><argument_list pos:start="123:16" pos:end="123:62">(<argument pos:start="123:17" pos:end="123:33"><expr pos:start="123:17" pos:end="123:33"><name pos:start="123:17" pos:end="123:29"><name pos:start="123:17" pos:end="123:20">ahci</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:26">port</name><index pos:start="123:27" pos:end="123:29">[<expr pos:start="123:28" pos:end="123:28"><name pos:start="123:28" pos:end="123:28">i</name></expr>]</index></name><operator pos:start="123:30" pos:end="123:30">.</operator><name pos:start="123:31" pos:end="123:33">clb</name></expr></argument>, <argument pos:start="123:36" pos:end="123:39"><expr pos:start="123:36" pos:end="123:39"><literal type="number" pos:start="123:36" pos:end="123:39">0x00</literal></expr></argument>, <argument pos:start="123:42" pos:end="123:61"><expr pos:start="123:42" pos:end="123:61"><name pos:start="123:42" pos:end="123:54">num_cmd_slots</name> <operator pos:start="123:56" pos:end="123:56">*</operator> <literal type="number" pos:start="123:58" pos:end="123:61">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:63"><expr pos:start="125:9" pos:end="125:62"><call pos:start="125:9" pos:end="125:62"><name pos:start="125:9" pos:end="125:22">g_test_message</name><argument_list pos:start="125:23" pos:end="125:62">(<argument pos:start="125:24" pos:end="125:42"><expr pos:start="125:24" pos:end="125:42"><literal type="string" pos:start="125:24" pos:end="125:35">"CLB: 0x%08"</literal> <name pos:start="125:37" pos:end="125:42">PRIx64</name></expr></argument>, <argument pos:start="125:45" pos:end="125:61"><expr pos:start="125:45" pos:end="125:61"><name pos:start="125:45" pos:end="125:57"><name pos:start="125:45" pos:end="125:48">ahci</name><operator pos:start="125:49" pos:end="125:50">-&gt;</operator><name pos:start="125:51" pos:end="125:54">port</name><index pos:start="125:55" pos:end="125:57">[<expr pos:start="125:56" pos:end="125:56"><name pos:start="125:56" pos:end="125:56">i</name></expr>]</index></name><operator pos:start="125:58" pos:end="125:58">.</operator><name pos:start="125:59" pos:end="125:61">clb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:62"><expr pos:start="127:9" pos:end="127:61"><call pos:start="127:9" pos:end="127:61"><name pos:start="127:9" pos:end="127:20">ahci_px_wreg</name><argument_list pos:start="127:21" pos:end="127:61">(<argument pos:start="127:22" pos:end="127:25"><expr pos:start="127:22" pos:end="127:25"><name pos:start="127:22" pos:end="127:25">ahci</name></expr></argument>, <argument pos:start="127:28" pos:end="127:28"><expr pos:start="127:28" pos:end="127:28"><name pos:start="127:28" pos:end="127:28">i</name></expr></argument>, <argument pos:start="127:31" pos:end="127:41"><expr pos:start="127:31" pos:end="127:41"><name pos:start="127:31" pos:end="127:41">AHCI_PX_CLB</name></expr></argument>, <argument pos:start="127:44" pos:end="127:60"><expr pos:start="127:44" pos:end="127:60"><name pos:start="127:44" pos:end="127:56"><name pos:start="127:44" pos:end="127:47">ahci</name><operator pos:start="127:48" pos:end="127:49">-&gt;</operator><name pos:start="127:50" pos:end="127:53">port</name><index pos:start="127:54" pos:end="127:56">[<expr pos:start="127:55" pos:end="127:55"><name pos:start="127:55" pos:end="127:55">i</name></expr>]</index></name><operator pos:start="127:57" pos:end="127:57">.</operator><name pos:start="127:58" pos:end="127:60">clb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="131:60"><expr pos:start="129:9" pos:end="131:59"><call pos:start="129:9" pos:end="131:59"><name pos:start="129:9" pos:end="129:23">g_assert_cmphex</name><argument_list pos:start="129:24" pos:end="131:59">(<argument pos:start="129:25" pos:end="129:41"><expr pos:start="129:25" pos:end="129:41"><name pos:start="129:25" pos:end="129:37"><name pos:start="129:25" pos:end="129:28">ahci</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:34">port</name><index pos:start="129:35" pos:end="129:37">[<expr pos:start="129:36" pos:end="129:36"><name pos:start="129:36" pos:end="129:36">i</name></expr>]</index></name><operator pos:start="129:38" pos:end="129:38">.</operator><name pos:start="129:39" pos:end="129:41">clb</name></expr></argument>, <argument pos:start="129:44" pos:end="129:45"><expr pos:start="129:44" pos:end="129:45"><operator pos:start="129:44" pos:end="129:45">==</operator></expr></argument>,

                        <argument pos:start="131:25" pos:end="131:58"><expr pos:start="131:25" pos:end="131:58"><call pos:start="131:25" pos:end="131:58"><name pos:start="131:25" pos:end="131:36">ahci_px_rreg</name><argument_list pos:start="131:37" pos:end="131:58">(<argument pos:start="131:38" pos:end="131:41"><expr pos:start="131:38" pos:end="131:41"><name pos:start="131:38" pos:end="131:41">ahci</name></expr></argument>, <argument pos:start="131:44" pos:end="131:44"><expr pos:start="131:44" pos:end="131:44"><name pos:start="131:44" pos:end="131:44">i</name></expr></argument>, <argument pos:start="131:47" pos:end="131:57"><expr pos:start="131:47" pos:end="131:57"><name pos:start="131:47" pos:end="131:57">AHCI_PX_CLB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="135:9" pos:end="135:52">/* PxFB space ... 0x100, as in 4.2.1 p 35 */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:51"><expr pos:start="137:9" pos:end="137:50"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:12">ahci</name><operator pos:start="137:13" pos:end="137:14">-&gt;</operator><name pos:start="137:15" pos:end="137:18">port</name><index pos:start="137:19" pos:end="137:21">[<expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">i</name></expr>]</index></name><operator pos:start="137:22" pos:end="137:22">.</operator><name pos:start="137:23" pos:end="137:24">fb</name> <operator pos:start="137:26" pos:end="137:26">=</operator> <call pos:start="137:28" pos:end="137:50"><name pos:start="137:28" pos:end="137:37">ahci_alloc</name><argument_list pos:start="137:38" pos:end="137:50">(<argument pos:start="137:39" pos:end="137:42"><expr pos:start="137:39" pos:end="137:42"><name pos:start="137:39" pos:end="137:42">ahci</name></expr></argument>, <argument pos:start="137:45" pos:end="137:49"><expr pos:start="137:45" pos:end="137:49"><literal type="number" pos:start="137:45" pos:end="137:49">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:47"><expr pos:start="139:9" pos:end="139:46"><call pos:start="139:9" pos:end="139:46"><name pos:start="139:9" pos:end="139:15">qmemset</name><argument_list pos:start="139:16" pos:end="139:46">(<argument pos:start="139:17" pos:end="139:32"><expr pos:start="139:17" pos:end="139:32"><name pos:start="139:17" pos:end="139:29"><name pos:start="139:17" pos:end="139:20">ahci</name><operator pos:start="139:21" pos:end="139:22">-&gt;</operator><name pos:start="139:23" pos:end="139:26">port</name><index pos:start="139:27" pos:end="139:29">[<expr pos:start="139:28" pos:end="139:28"><name pos:start="139:28" pos:end="139:28">i</name></expr>]</index></name><operator pos:start="139:30" pos:end="139:30">.</operator><name pos:start="139:31" pos:end="139:32">fb</name></expr></argument>, <argument pos:start="139:35" pos:end="139:38"><expr pos:start="139:35" pos:end="139:38"><literal type="number" pos:start="139:35" pos:end="139:38">0x00</literal></expr></argument>, <argument pos:start="139:41" pos:end="139:45"><expr pos:start="139:41" pos:end="139:45"><literal type="number" pos:start="139:41" pos:end="139:45">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:61"><expr pos:start="141:9" pos:end="141:60"><call pos:start="141:9" pos:end="141:60"><name pos:start="141:9" pos:end="141:22">g_test_message</name><argument_list pos:start="141:23" pos:end="141:60">(<argument pos:start="141:24" pos:end="141:41"><expr pos:start="141:24" pos:end="141:41"><literal type="string" pos:start="141:24" pos:end="141:34">"FB: 0x%08"</literal> <name pos:start="141:36" pos:end="141:41">PRIx64</name></expr></argument>, <argument pos:start="141:44" pos:end="141:59"><expr pos:start="141:44" pos:end="141:59"><name pos:start="141:44" pos:end="141:56"><name pos:start="141:44" pos:end="141:47">ahci</name><operator pos:start="141:48" pos:end="141:49">-&gt;</operator><name pos:start="141:50" pos:end="141:53">port</name><index pos:start="141:54" pos:end="141:56">[<expr pos:start="141:55" pos:end="141:55"><name pos:start="141:55" pos:end="141:55">i</name></expr>]</index></name><operator pos:start="141:57" pos:end="141:57">.</operator><name pos:start="141:58" pos:end="141:59">fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:60"><expr pos:start="143:9" pos:end="143:59"><call pos:start="143:9" pos:end="143:59"><name pos:start="143:9" pos:end="143:20">ahci_px_wreg</name><argument_list pos:start="143:21" pos:end="143:59">(<argument pos:start="143:22" pos:end="143:25"><expr pos:start="143:22" pos:end="143:25"><name pos:start="143:22" pos:end="143:25">ahci</name></expr></argument>, <argument pos:start="143:28" pos:end="143:28"><expr pos:start="143:28" pos:end="143:28"><name pos:start="143:28" pos:end="143:28">i</name></expr></argument>, <argument pos:start="143:31" pos:end="143:40"><expr pos:start="143:31" pos:end="143:40"><name pos:start="143:31" pos:end="143:40">AHCI_PX_FB</name></expr></argument>, <argument pos:start="143:43" pos:end="143:58"><expr pos:start="143:43" pos:end="143:58"><name pos:start="143:43" pos:end="143:55"><name pos:start="143:43" pos:end="143:46">ahci</name><operator pos:start="143:47" pos:end="143:48">-&gt;</operator><name pos:start="143:49" pos:end="143:52">port</name><index pos:start="143:53" pos:end="143:55">[<expr pos:start="143:54" pos:end="143:54"><name pos:start="143:54" pos:end="143:54">i</name></expr>]</index></name><operator pos:start="143:56" pos:end="143:56">.</operator><name pos:start="143:57" pos:end="143:58">fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="147:59"><expr pos:start="145:9" pos:end="147:58"><call pos:start="145:9" pos:end="147:58"><name pos:start="145:9" pos:end="145:23">g_assert_cmphex</name><argument_list pos:start="145:24" pos:end="147:58">(<argument pos:start="145:25" pos:end="145:40"><expr pos:start="145:25" pos:end="145:40"><name pos:start="145:25" pos:end="145:37"><name pos:start="145:25" pos:end="145:28">ahci</name><operator pos:start="145:29" pos:end="145:30">-&gt;</operator><name pos:start="145:31" pos:end="145:34">port</name><index pos:start="145:35" pos:end="145:37">[<expr pos:start="145:36" pos:end="145:36"><name pos:start="145:36" pos:end="145:36">i</name></expr>]</index></name><operator pos:start="145:38" pos:end="145:38">.</operator><name pos:start="145:39" pos:end="145:40">fb</name></expr></argument>, <argument pos:start="145:43" pos:end="145:44"><expr pos:start="145:43" pos:end="145:44"><operator pos:start="145:43" pos:end="145:44">==</operator></expr></argument>,

                        <argument pos:start="147:25" pos:end="147:57"><expr pos:start="147:25" pos:end="147:57"><call pos:start="147:25" pos:end="147:57"><name pos:start="147:25" pos:end="147:36">ahci_px_rreg</name><argument_list pos:start="147:37" pos:end="147:57">(<argument pos:start="147:38" pos:end="147:41"><expr pos:start="147:38" pos:end="147:41"><name pos:start="147:38" pos:end="147:41">ahci</name></expr></argument>, <argument pos:start="147:44" pos:end="147:44"><expr pos:start="147:44" pos:end="147:44"><name pos:start="147:44" pos:end="147:44">i</name></expr></argument>, <argument pos:start="147:47" pos:end="147:56"><expr pos:start="147:47" pos:end="147:56"><name pos:start="147:47" pos:end="147:56">AHCI_PX_FB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="151:9" pos:end="151:65">/* Clear PxSERR, PxIS, then IS.IPS[x] by writing '1's. */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:56"><expr pos:start="153:9" pos:end="153:55"><call pos:start="153:9" pos:end="153:55"><name pos:start="153:9" pos:end="153:20">ahci_px_wreg</name><argument_list pos:start="153:21" pos:end="153:55">(<argument pos:start="153:22" pos:end="153:25"><expr pos:start="153:22" pos:end="153:25"><name pos:start="153:22" pos:end="153:25">ahci</name></expr></argument>, <argument pos:start="153:28" pos:end="153:28"><expr pos:start="153:28" pos:end="153:28"><name pos:start="153:28" pos:end="153:28">i</name></expr></argument>, <argument pos:start="153:31" pos:end="153:42"><expr pos:start="153:31" pos:end="153:42"><name pos:start="153:31" pos:end="153:42">AHCI_PX_SERR</name></expr></argument>, <argument pos:start="153:45" pos:end="153:54"><expr pos:start="153:45" pos:end="153:54"><literal type="number" pos:start="153:45" pos:end="153:54">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:54"><expr pos:start="155:9" pos:end="155:53"><call pos:start="155:9" pos:end="155:53"><name pos:start="155:9" pos:end="155:20">ahci_px_wreg</name><argument_list pos:start="155:21" pos:end="155:53">(<argument pos:start="155:22" pos:end="155:25"><expr pos:start="155:22" pos:end="155:25"><name pos:start="155:22" pos:end="155:25">ahci</name></expr></argument>, <argument pos:start="155:28" pos:end="155:28"><expr pos:start="155:28" pos:end="155:28"><name pos:start="155:28" pos:end="155:28">i</name></expr></argument>, <argument pos:start="155:31" pos:end="155:40"><expr pos:start="155:31" pos:end="155:40"><name pos:start="155:31" pos:end="155:40">AHCI_PX_IS</name></expr></argument>, <argument pos:start="155:43" pos:end="155:52"><expr pos:start="155:43" pos:end="155:52"><literal type="number" pos:start="155:43" pos:end="155:52">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:43"><expr pos:start="157:9" pos:end="157:42"><call pos:start="157:9" pos:end="157:42"><name pos:start="157:9" pos:end="157:17">ahci_wreg</name><argument_list pos:start="157:18" pos:end="157:42">(<argument pos:start="157:19" pos:end="157:22"><expr pos:start="157:19" pos:end="157:22"><name pos:start="157:19" pos:end="157:22">ahci</name></expr></argument>, <argument pos:start="157:25" pos:end="157:31"><expr pos:start="157:25" pos:end="157:31"><name pos:start="157:25" pos:end="157:31">AHCI_IS</name></expr></argument>, <argument pos:start="157:34" pos:end="157:41"><expr pos:start="157:34" pos:end="157:41"><operator pos:start="157:34" pos:end="157:34">(</operator><literal type="number" pos:start="157:35" pos:end="157:35">1</literal> <operator pos:start="157:37" pos:end="157:38">&lt;&lt;</operator> <name pos:start="157:40" pos:end="157:40">i</name><operator pos:start="157:41" pos:end="157:41">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="161:9" pos:end="161:39">/* Verify Interrupts Cleared */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:50"><expr pos:start="163:9" pos:end="163:49"><name pos:start="163:9" pos:end="163:11">reg</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="163:49"><name pos:start="163:15" pos:end="163:26">ahci_px_rreg</name><argument_list pos:start="163:27" pos:end="163:49">(<argument pos:start="163:28" pos:end="163:31"><expr pos:start="163:28" pos:end="163:31"><name pos:start="163:28" pos:end="163:31">ahci</name></expr></argument>, <argument pos:start="163:34" pos:end="163:34"><expr pos:start="163:34" pos:end="163:34"><name pos:start="163:34" pos:end="163:34">i</name></expr></argument>, <argument pos:start="163:37" pos:end="163:48"><expr pos:start="163:37" pos:end="163:48"><name pos:start="163:37" pos:end="163:48">AHCI_PX_SERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:36"><expr pos:start="165:9" pos:end="165:35"><call pos:start="165:9" pos:end="165:35"><name pos:start="165:9" pos:end="165:23">g_assert_cmphex</name><argument_list pos:start="165:24" pos:end="165:35">(<argument pos:start="165:25" pos:end="165:27"><expr pos:start="165:25" pos:end="165:27"><name pos:start="165:25" pos:end="165:27">reg</name></expr></argument>, <argument pos:start="165:30" pos:end="165:31"><expr pos:start="165:30" pos:end="165:31"><operator pos:start="165:30" pos:end="165:31">==</operator></expr></argument>, <argument pos:start="165:34" pos:end="165:34"><expr pos:start="165:34" pos:end="165:34"><literal type="number" pos:start="165:34" pos:end="165:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:48"><expr pos:start="169:9" pos:end="169:47"><name pos:start="169:9" pos:end="169:11">reg</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:47"><name pos:start="169:15" pos:end="169:26">ahci_px_rreg</name><argument_list pos:start="169:27" pos:end="169:47">(<argument pos:start="169:28" pos:end="169:31"><expr pos:start="169:28" pos:end="169:31"><name pos:start="169:28" pos:end="169:31">ahci</name></expr></argument>, <argument pos:start="169:34" pos:end="169:34"><expr pos:start="169:34" pos:end="169:34"><name pos:start="169:34" pos:end="169:34">i</name></expr></argument>, <argument pos:start="169:37" pos:end="169:46"><expr pos:start="169:37" pos:end="169:46"><name pos:start="169:37" pos:end="169:46">AHCI_PX_IS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:36"><expr pos:start="171:9" pos:end="171:35"><call pos:start="171:9" pos:end="171:35"><name pos:start="171:9" pos:end="171:23">g_assert_cmphex</name><argument_list pos:start="171:24" pos:end="171:35">(<argument pos:start="171:25" pos:end="171:27"><expr pos:start="171:25" pos:end="171:27"><name pos:start="171:25" pos:end="171:27">reg</name></expr></argument>, <argument pos:start="171:30" pos:end="171:31"><expr pos:start="171:30" pos:end="171:31"><operator pos:start="171:30" pos:end="171:31">==</operator></expr></argument>, <argument pos:start="171:34" pos:end="171:34"><expr pos:start="171:34" pos:end="171:34"><literal type="number" pos:start="171:34" pos:end="171:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:39"><expr pos:start="175:9" pos:end="175:38"><name pos:start="175:9" pos:end="175:11">reg</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:38"><name pos:start="175:15" pos:end="175:23">ahci_rreg</name><argument_list pos:start="175:24" pos:end="175:38">(<argument pos:start="175:25" pos:end="175:28"><expr pos:start="175:25" pos:end="175:28"><name pos:start="175:25" pos:end="175:28">ahci</name></expr></argument>, <argument pos:start="175:31" pos:end="175:37"><expr pos:start="175:31" pos:end="175:37"><name pos:start="175:31" pos:end="175:37">AHCI_IS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:40"><expr pos:start="177:9" pos:end="177:39"><call pos:start="177:9" pos:end="177:39"><name pos:start="177:9" pos:end="177:24">ASSERT_BIT_CLEAR</name><argument_list pos:start="177:25" pos:end="177:39">(<argument pos:start="177:26" pos:end="177:28"><expr pos:start="177:26" pos:end="177:28"><name pos:start="177:26" pos:end="177:28">reg</name></expr></argument>, <argument pos:start="177:31" pos:end="177:38"><expr pos:start="177:31" pos:end="177:38"><operator pos:start="177:31" pos:end="177:31">(</operator><literal type="number" pos:start="177:32" pos:end="177:32">1</literal> <operator pos:start="177:34" pos:end="177:35">&lt;&lt;</operator> <name pos:start="177:37" pos:end="177:37">i</name><operator pos:start="177:38" pos:end="177:38">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="181:9" pos:end="181:36">/* Enable All Interrupts: */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:54"><expr pos:start="183:9" pos:end="183:53"><call pos:start="183:9" pos:end="183:53"><name pos:start="183:9" pos:end="183:20">ahci_px_wreg</name><argument_list pos:start="183:21" pos:end="183:53">(<argument pos:start="183:22" pos:end="183:25"><expr pos:start="183:22" pos:end="183:25"><name pos:start="183:22" pos:end="183:25">ahci</name></expr></argument>, <argument pos:start="183:28" pos:end="183:28"><expr pos:start="183:28" pos:end="183:28"><name pos:start="183:28" pos:end="183:28">i</name></expr></argument>, <argument pos:start="183:31" pos:end="183:40"><expr pos:start="183:31" pos:end="183:40"><name pos:start="183:31" pos:end="183:40">AHCI_PX_IE</name></expr></argument>, <argument pos:start="183:43" pos:end="183:52"><expr pos:start="183:43" pos:end="183:52"><literal type="number" pos:start="183:43" pos:end="183:52">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:48"><expr pos:start="185:9" pos:end="185:47"><name pos:start="185:9" pos:end="185:11">reg</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="185:47"><name pos:start="185:15" pos:end="185:26">ahci_px_rreg</name><argument_list pos:start="185:27" pos:end="185:47">(<argument pos:start="185:28" pos:end="185:31"><expr pos:start="185:28" pos:end="185:31"><name pos:start="185:28" pos:end="185:31">ahci</name></expr></argument>, <argument pos:start="185:34" pos:end="185:34"><expr pos:start="185:34" pos:end="185:34"><name pos:start="185:34" pos:end="185:34">i</name></expr></argument>, <argument pos:start="185:37" pos:end="185:46"><expr pos:start="185:37" pos:end="185:46"><name pos:start="185:37" pos:end="185:46">AHCI_PX_IE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:67"><expr pos:start="187:9" pos:end="187:66"><call pos:start="187:9" pos:end="187:66"><name pos:start="187:9" pos:end="187:23">g_assert_cmphex</name><argument_list pos:start="187:24" pos:end="187:66">(<argument pos:start="187:25" pos:end="187:27"><expr pos:start="187:25" pos:end="187:27"><name pos:start="187:25" pos:end="187:27">reg</name></expr></argument>, <argument pos:start="187:30" pos:end="187:31"><expr pos:start="187:30" pos:end="187:31"><operator pos:start="187:30" pos:end="187:31">==</operator></expr></argument>, <argument pos:start="187:34" pos:end="187:65"><expr pos:start="187:34" pos:end="187:65"><operator pos:start="187:34" pos:end="187:34">~</operator><operator pos:start="187:35" pos:end="187:35">(</operator><operator pos:start="187:36" pos:end="187:36">(</operator><name pos:start="187:37" pos:end="187:44">uint32_t</name><operator pos:start="187:45" pos:end="187:45">)</operator><name pos:start="187:46" pos:end="187:64">AHCI_PX_IE_RESERVED</name><operator pos:start="187:65" pos:end="187:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="191:9" pos:end="191:44">/* Enable the FIS Receive Engine. */</comment>

        <expr_stmt pos:start="193:9" pos:end="193:59"><expr pos:start="193:9" pos:end="193:58"><call pos:start="193:9" pos:end="193:58"><name pos:start="193:9" pos:end="193:19">ahci_px_set</name><argument_list pos:start="193:20" pos:end="193:58">(<argument pos:start="193:21" pos:end="193:24"><expr pos:start="193:21" pos:end="193:24"><name pos:start="193:21" pos:end="193:24">ahci</name></expr></argument>, <argument pos:start="193:27" pos:end="193:27"><expr pos:start="193:27" pos:end="193:27"><name pos:start="193:27" pos:end="193:27">i</name></expr></argument>, <argument pos:start="193:30" pos:end="193:40"><expr pos:start="193:30" pos:end="193:40"><name pos:start="193:30" pos:end="193:40">AHCI_PX_CMD</name></expr></argument>, <argument pos:start="193:43" pos:end="193:57"><expr pos:start="193:43" pos:end="193:57"><name pos:start="193:43" pos:end="193:57">AHCI_PX_CMD_FRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:49"><expr pos:start="195:9" pos:end="195:48"><name pos:start="195:9" pos:end="195:11">reg</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <call pos:start="195:15" pos:end="195:48"><name pos:start="195:15" pos:end="195:26">ahci_px_rreg</name><argument_list pos:start="195:27" pos:end="195:48">(<argument pos:start="195:28" pos:end="195:31"><expr pos:start="195:28" pos:end="195:31"><name pos:start="195:28" pos:end="195:31">ahci</name></expr></argument>, <argument pos:start="195:34" pos:end="195:34"><expr pos:start="195:34" pos:end="195:34"><name pos:start="195:34" pos:end="195:34">i</name></expr></argument>, <argument pos:start="195:37" pos:end="195:47"><expr pos:start="195:37" pos:end="195:47"><name pos:start="195:37" pos:end="195:47">AHCI_PX_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:44"><expr pos:start="197:9" pos:end="197:43"><call pos:start="197:9" pos:end="197:43"><name pos:start="197:9" pos:end="197:22">ASSERT_BIT_SET</name><argument_list pos:start="197:23" pos:end="197:43">(<argument pos:start="197:24" pos:end="197:26"><expr pos:start="197:24" pos:end="197:26"><name pos:start="197:24" pos:end="197:26">reg</name></expr></argument>, <argument pos:start="197:29" pos:end="197:42"><expr pos:start="197:29" pos:end="197:42"><name pos:start="197:29" pos:end="197:42">AHCI_PX_CMD_FR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="201:9" pos:end="205:62">/* AHCI 1.3 spec: if !STS.BSY, !STS.DRQ and PxSSTS.DET indicates

         * physical presence, a device is present and may be started. However,

         * PxSERR.DIAG.X /may/ need to be cleared a priori. */</comment>

        <expr_stmt pos:start="207:9" pos:end="207:50"><expr pos:start="207:9" pos:end="207:49"><name pos:start="207:9" pos:end="207:11">reg</name> <operator pos:start="207:13" pos:end="207:13">=</operator> <call pos:start="207:15" pos:end="207:49"><name pos:start="207:15" pos:end="207:26">ahci_px_rreg</name><argument_list pos:start="207:27" pos:end="207:49">(<argument pos:start="207:28" pos:end="207:31"><expr pos:start="207:28" pos:end="207:31"><name pos:start="207:28" pos:end="207:31">ahci</name></expr></argument>, <argument pos:start="207:34" pos:end="207:34"><expr pos:start="207:34" pos:end="207:34"><name pos:start="207:34" pos:end="207:34">i</name></expr></argument>, <argument pos:start="207:37" pos:end="207:48"><expr pos:start="207:37" pos:end="207:48"><name pos:start="207:37" pos:end="207:48">AHCI_PX_SERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="209:9" pos:end="213:9"><if pos:start="209:9" pos:end="213:9">if <condition pos:start="209:12" pos:end="209:45">(<expr pos:start="209:13" pos:end="209:44"><call pos:start="209:13" pos:end="209:44"><name pos:start="209:13" pos:end="209:18">BITSET</name><argument_list pos:start="209:19" pos:end="209:44">(<argument pos:start="209:20" pos:end="209:22"><expr pos:start="209:20" pos:end="209:22"><name pos:start="209:20" pos:end="209:22">reg</name></expr></argument>, <argument pos:start="209:25" pos:end="209:43"><expr pos:start="209:25" pos:end="209:43"><name pos:start="209:25" pos:end="209:43">AHCI_PX_SERR_DIAG_X</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="209:47" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:68">

            <expr_stmt pos:start="211:13" pos:end="211:68"><expr pos:start="211:13" pos:end="211:67"><call pos:start="211:13" pos:end="211:67"><name pos:start="211:13" pos:end="211:23">ahci_px_set</name><argument_list pos:start="211:24" pos:end="211:67">(<argument pos:start="211:25" pos:end="211:28"><expr pos:start="211:25" pos:end="211:28"><name pos:start="211:25" pos:end="211:28">ahci</name></expr></argument>, <argument pos:start="211:31" pos:end="211:31"><expr pos:start="211:31" pos:end="211:31"><name pos:start="211:31" pos:end="211:31">i</name></expr></argument>, <argument pos:start="211:34" pos:end="211:45"><expr pos:start="211:34" pos:end="211:45"><name pos:start="211:34" pos:end="211:45">AHCI_PX_SERR</name></expr></argument>, <argument pos:start="211:48" pos:end="211:66"><expr pos:start="211:48" pos:end="211:66"><name pos:start="211:48" pos:end="211:66">AHCI_PX_SERR_DIAG_X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="217:9" pos:end="217:49"><expr pos:start="217:9" pos:end="217:48"><name pos:start="217:9" pos:end="217:11">reg</name> <operator pos:start="217:13" pos:end="217:13">=</operator> <call pos:start="217:15" pos:end="217:48"><name pos:start="217:15" pos:end="217:26">ahci_px_rreg</name><argument_list pos:start="217:27" pos:end="217:48">(<argument pos:start="217:28" pos:end="217:31"><expr pos:start="217:28" pos:end="217:31"><name pos:start="217:28" pos:end="217:31">ahci</name></expr></argument>, <argument pos:start="217:34" pos:end="217:34"><expr pos:start="217:34" pos:end="217:34"><name pos:start="217:34" pos:end="217:34">i</name></expr></argument>, <argument pos:start="217:37" pos:end="217:47"><expr pos:start="217:37" pos:end="217:47"><name pos:start="217:37" pos:end="217:47">AHCI_PX_TFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="219:9" pos:end="243:9"><if pos:start="219:9" pos:end="243:9">if <condition pos:start="219:12" pos:end="219:67">(<expr pos:start="219:13" pos:end="219:66"><call pos:start="219:13" pos:end="219:66"><name pos:start="219:13" pos:end="219:18">BITCLR</name><argument_list pos:start="219:19" pos:end="219:66">(<argument pos:start="219:20" pos:end="219:22"><expr pos:start="219:20" pos:end="219:22"><name pos:start="219:20" pos:end="219:22">reg</name></expr></argument>, <argument pos:start="219:25" pos:end="219:65"><expr pos:start="219:25" pos:end="219:65"><name pos:start="219:25" pos:end="219:43">AHCI_PX_TFD_STS_BSY</name> <operator pos:start="219:45" pos:end="219:45">|</operator> <name pos:start="219:47" pos:end="219:65">AHCI_PX_TFD_STS_DRQ</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="219:69" pos:end="243:9">{<block_content pos:start="221:13" pos:end="241:13">

            <expr_stmt pos:start="221:13" pos:end="221:54"><expr pos:start="221:13" pos:end="221:53"><name pos:start="221:13" pos:end="221:15">reg</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <call pos:start="221:19" pos:end="221:53"><name pos:start="221:19" pos:end="221:30">ahci_px_rreg</name><argument_list pos:start="221:31" pos:end="221:53">(<argument pos:start="221:32" pos:end="221:35"><expr pos:start="221:32" pos:end="221:35"><name pos:start="221:32" pos:end="221:35">ahci</name></expr></argument>, <argument pos:start="221:38" pos:end="221:38"><expr pos:start="221:38" pos:end="221:38"><name pos:start="221:38" pos:end="221:38">i</name></expr></argument>, <argument pos:start="221:41" pos:end="221:52"><expr pos:start="221:41" pos:end="221:52"><name pos:start="221:41" pos:end="221:52">AHCI_PX_SSTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="223:13" pos:end="241:13"><if pos:start="223:13" pos:end="235:13">if <condition pos:start="223:16" pos:end="223:65">(<expr pos:start="223:17" pos:end="223:64"><operator pos:start="223:17" pos:end="223:17">(</operator><name pos:start="223:18" pos:end="223:20">reg</name> <operator pos:start="223:22" pos:end="223:22">&amp;</operator> <name pos:start="223:24" pos:end="223:39">AHCI_PX_SSTS_DET</name><operator pos:start="223:40" pos:end="223:40">)</operator> <operator pos:start="223:42" pos:end="223:43">==</operator> <name pos:start="223:45" pos:end="223:64">SSTS_DET_ESTABLISHED</name></expr>)</condition> <block pos:start="223:67" pos:end="235:13">{<block_content pos:start="227:17" pos:end="233:55">

                <comment type="block" pos:start="225:17" pos:end="225:53">/* Device Found: set PxCMD.ST := 1 */</comment>

                <expr_stmt pos:start="227:17" pos:end="227:66"><expr pos:start="227:17" pos:end="227:65"><call pos:start="227:17" pos:end="227:65"><name pos:start="227:17" pos:end="227:27">ahci_px_set</name><argument_list pos:start="227:28" pos:end="227:65">(<argument pos:start="227:29" pos:end="227:32"><expr pos:start="227:29" pos:end="227:32"><name pos:start="227:29" pos:end="227:32">ahci</name></expr></argument>, <argument pos:start="227:35" pos:end="227:35"><expr pos:start="227:35" pos:end="227:35"><name pos:start="227:35" pos:end="227:35">i</name></expr></argument>, <argument pos:start="227:38" pos:end="227:48"><expr pos:start="227:38" pos:end="227:48"><name pos:start="227:38" pos:end="227:48">AHCI_PX_CMD</name></expr></argument>, <argument pos:start="227:51" pos:end="227:64"><expr pos:start="227:51" pos:end="227:64"><name pos:start="227:51" pos:end="227:64">AHCI_PX_CMD_ST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="229:17" pos:end="231:47"><expr pos:start="229:17" pos:end="231:46"><call pos:start="229:17" pos:end="231:46"><name pos:start="229:17" pos:end="229:30">ASSERT_BIT_SET</name><argument_list pos:start="229:31" pos:end="231:46">(<argument pos:start="229:32" pos:end="229:65"><expr pos:start="229:32" pos:end="229:65"><call pos:start="229:32" pos:end="229:65"><name pos:start="229:32" pos:end="229:43">ahci_px_rreg</name><argument_list pos:start="229:44" pos:end="229:65">(<argument pos:start="229:45" pos:end="229:48"><expr pos:start="229:45" pos:end="229:48"><name pos:start="229:45" pos:end="229:48">ahci</name></expr></argument>, <argument pos:start="229:51" pos:end="229:51"><expr pos:start="229:51" pos:end="229:51"><name pos:start="229:51" pos:end="229:51">i</name></expr></argument>, <argument pos:start="229:54" pos:end="229:64"><expr pos:start="229:54" pos:end="229:64"><name pos:start="229:54" pos:end="229:64">AHCI_PX_CMD</name></expr></argument>)</argument_list></call></expr></argument>,

                               <argument pos:start="231:32" pos:end="231:45"><expr pos:start="231:32" pos:end="231:45"><name pos:start="231:32" pos:end="231:45">AHCI_PX_CMD_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:55"><expr pos:start="233:17" pos:end="233:54"><call pos:start="233:17" pos:end="233:54"><name pos:start="233:17" pos:end="233:30">g_test_message</name><argument_list pos:start="233:31" pos:end="233:54">(<argument pos:start="233:32" pos:end="233:50"><expr pos:start="233:32" pos:end="233:50"><literal type="string" pos:start="233:32" pos:end="233:50">"Started Device %u"</literal></expr></argument>, <argument pos:start="233:53" pos:end="233:53"><expr pos:start="233:53" pos:end="233:53"><name pos:start="233:53" pos:end="233:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="235:15" pos:end="241:13">else if <condition pos:start="235:23" pos:end="235:48">(<expr pos:start="235:24" pos:end="235:47"><operator pos:start="235:24" pos:end="235:24">(</operator><name pos:start="235:25" pos:end="235:27">reg</name> <operator pos:start="235:29" pos:end="235:29">&amp;</operator> <name pos:start="235:31" pos:end="235:46">AHCI_PX_SSTS_DET</name><operator pos:start="235:47" pos:end="235:47">)</operator></expr>)</condition> <block pos:start="235:50" pos:end="241:13">{<block_content pos:start="239:17" pos:end="239:39">

                <comment type="block" pos:start="237:17" pos:end="237:64">/* Device present, but in some unknown state. */</comment>

                <expr_stmt pos:start="239:17" pos:end="239:39"><expr pos:start="239:17" pos:end="239:38"><call pos:start="239:17" pos:end="239:38"><name pos:start="239:17" pos:end="239:36">g_assert_not_reached</name><argument_list pos:start="239:37" pos:end="239:38">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="249:5" pos:end="249:23">/* Enable GHC.IE */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:42"><expr pos:start="251:5" pos:end="251:41"><call pos:start="251:5" pos:end="251:41"><name pos:start="251:5" pos:end="251:12">ahci_set</name><argument_list pos:start="251:13" pos:end="251:41">(<argument pos:start="251:14" pos:end="251:17"><expr pos:start="251:14" pos:end="251:17"><name pos:start="251:14" pos:end="251:17">ahci</name></expr></argument>, <argument pos:start="251:20" pos:end="251:27"><expr pos:start="251:20" pos:end="251:27"><name pos:start="251:20" pos:end="251:27">AHCI_GHC</name></expr></argument>, <argument pos:start="251:30" pos:end="251:40"><expr pos:start="251:30" pos:end="251:40"><name pos:start="251:30" pos:end="251:40">AHCI_GHC_IE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:36"><expr pos:start="253:5" pos:end="253:35"><name pos:start="253:5" pos:end="253:7">reg</name> <operator pos:start="253:9" pos:end="253:9">=</operator> <call pos:start="253:11" pos:end="253:35"><name pos:start="253:11" pos:end="253:19">ahci_rreg</name><argument_list pos:start="253:20" pos:end="253:35">(<argument pos:start="253:21" pos:end="253:24"><expr pos:start="253:21" pos:end="253:24"><name pos:start="253:21" pos:end="253:24">ahci</name></expr></argument>, <argument pos:start="253:27" pos:end="253:34"><expr pos:start="253:27" pos:end="253:34"><name pos:start="253:27" pos:end="253:34">AHCI_GHC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:37"><expr pos:start="255:5" pos:end="255:36"><call pos:start="255:5" pos:end="255:36"><name pos:start="255:5" pos:end="255:18">ASSERT_BIT_SET</name><argument_list pos:start="255:19" pos:end="255:36">(<argument pos:start="255:20" pos:end="255:22"><expr pos:start="255:20" pos:end="255:22"><name pos:start="255:20" pos:end="255:22">reg</name></expr></argument>, <argument pos:start="255:25" pos:end="255:35"><expr pos:start="255:25" pos:end="255:35"><name pos:start="255:25" pos:end="255:35">AHCI_GHC_IE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="block" pos:start="260:5" pos:end="264:57">/* TODO: The device should now be idling and waiting for commands.

     * In the future, a small test-case to inspect the Register D2H FIS

     * and clear the initial interrupts might be good. */</comment>

</block_content>}</block></function></unit>
