<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5857.c" pos:tabs="8"><function pos:start="1:1" pos:end="323:48"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">ide_atapi_cmd</name><parameter_list pos:start="1:26" pos:end="1:38">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:36"><name pos:start="1:27" pos:end="1:34">IDEState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="323:48">{<block_content pos:start="3:5" pos:end="323:48">
    <decl_stmt pos:start="3:5" pos:end="3:26"><decl pos:start="3:5" pos:end="3:25"><type pos:start="3:5" pos:end="3:19"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:17">uint8_t</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:25">packet</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:17"><decl pos:start="4:5" pos:end="4:16"><type pos:start="4:5" pos:end="4:13"><name pos:start="4:5" pos:end="4:11">uint8_t</name> <modifier pos:start="4:13" pos:end="4:13">*</modifier></type><name pos:start="4:14" pos:end="4:16">buf</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:15">max_len</name></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:26"><expr pos:start="6:5" pos:end="6:25"><name pos:start="6:5" pos:end="6:10">packet</name> <operator pos:start="6:12" pos:end="6:12">=</operator> <name pos:start="6:14" pos:end="6:25"><name pos:start="6:14" pos:end="6:14">s</name><operator pos:start="6:15" pos:end="6:16">-&gt;</operator><name pos:start="6:17" pos:end="6:25">io_buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="9:0"><expr pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:7">buf</name> <operator pos:start="7:9" pos:end="7:9">=</operator> <name pos:start="7:11" pos:end="7:22"><name pos:start="7:11" pos:end="7:11">s</name><operator pos:start="7:12" pos:end="7:13">-&gt;</operator><name pos:start="7:14" pos:end="7:22">io_buffer</name></name></expr>;</expr_stmt>
<cpp:ifdef pos:start="8:1" pos:end="8:22">#<cpp:directive pos:start="8:2" pos:end="8:6">ifdef</cpp:directive> <name pos:start="8:8" pos:end="8:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>
    <block pos:start="9:5" pos:end="323:48">{<block_content pos:start="10:9" pos:end="323:48">
        <decl_stmt pos:start="10:9" pos:end="10:14"><decl pos:start="10:9" pos:end="10:13"><type pos:start="10:9" pos:end="10:11"><name pos:start="10:9" pos:end="10:11">int</name></type> <name pos:start="10:13" pos:end="10:13">i</name></decl>;</decl_stmt>
        <expr_stmt pos:start="11:9" pos:end="11:69"><expr pos:start="11:9" pos:end="11:68"><call pos:start="11:9" pos:end="11:68"><name pos:start="11:9" pos:end="11:14">printf</name><argument_list pos:start="11:15" pos:end="11:68">(<argument pos:start="11:16" pos:end="11:41"><expr pos:start="11:16" pos:end="11:41"><literal type="string" pos:start="11:16" pos:end="11:41">"ATAPI limit=0x%x packet:"</literal></expr></argument>, <argument pos:start="11:44" pos:end="11:67"><expr pos:start="11:44" pos:end="11:67"><name pos:start="11:44" pos:end="11:50"><name pos:start="11:44" pos:end="11:44">s</name><operator pos:start="11:45" pos:end="11:46">-&gt;</operator><name pos:start="11:47" pos:end="11:50">lcyl</name></name> <operator pos:start="11:52" pos:end="11:52">|</operator> <operator pos:start="11:54" pos:end="11:54">(</operator><name pos:start="11:55" pos:end="11:61"><name pos:start="11:55" pos:end="11:55">s</name><operator pos:start="11:56" pos:end="11:57">-&gt;</operator><name pos:start="11:58" pos:end="11:61">hcyl</name></name> <operator pos:start="11:63" pos:end="11:64">&lt;&lt;</operator> <literal type="number" pos:start="11:66" pos:end="11:66">8</literal><operator pos:start="11:67" pos:end="11:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="12:9" pos:end="323:48">for<control pos:start="12:12" pos:end="12:46">(<init pos:start="12:13" pos:end="12:18"><expr pos:start="12:13" pos:end="12:17"><name pos:start="12:13" pos:end="12:13">i</name> <operator pos:start="12:15" pos:end="12:15">=</operator> <literal type="number" pos:start="12:17" pos:end="12:17">0</literal></expr>;</init> <condition pos:start="12:20" pos:end="12:41"><expr pos:start="12:20" pos:end="12:40"><name pos:start="12:20" pos:end="12:20">i</name> <operator pos:start="12:22" pos:end="12:22">&lt;</operator> <name pos:start="12:24" pos:end="12:40">ATAPI_PACKET_SIZE</name></expr>;</condition> <incr pos:start="12:43" pos:end="12:45"><expr pos:start="12:43" pos:end="12:45"><name pos:start="12:43" pos:end="12:43">i</name><operator pos:start="12:44" pos:end="12:45">++</operator></expr></incr>)</control> <block pos:start="12:48" pos:end="323:48">{<block_content pos:start="13:13" pos:end="323:48">
            <expr_stmt pos:start="13:13" pos:end="13:39"><expr pos:start="13:13" pos:end="13:38"><call pos:start="13:13" pos:end="13:38"><name pos:start="13:13" pos:end="13:18">printf</name><argument_list pos:start="13:19" pos:end="13:38">(<argument pos:start="13:20" pos:end="13:26"><expr pos:start="13:20" pos:end="13:26"><literal type="string" pos:start="13:20" pos:end="13:26">" %02x"</literal></expr></argument>, <argument pos:start="13:29" pos:end="13:37"><expr pos:start="13:29" pos:end="13:37"><name pos:start="13:29" pos:end="13:37"><name pos:start="13:29" pos:end="13:34">packet</name><index pos:start="13:35" pos:end="13:37">[<expr pos:start="13:36" pos:end="13:36"><name pos:start="13:36" pos:end="13:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="14:9" pos:end="16:0"><expr pos:start="14:9" pos:end="14:20"><call pos:start="14:9" pos:end="14:20"><name pos:start="14:9" pos:end="14:14">printf</name><argument_list pos:start="14:15" pos:end="14:20">(<argument pos:start="14:16" pos:end="14:19"><expr pos:start="14:16" pos:end="14:19"><literal type="string" pos:start="14:16" pos:end="14:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>
    <comment type="block" pos:start="16:5" pos:end="17:69">/* If there's a UNIT_ATTENTION condition pending, only
       REQUEST_SENSE and INQUIRY commands are allowed to complete. */</comment>
    <if_stmt pos:start="18:5" pos:end="323:48"><if pos:start="18:5" pos:end="323:48">if <condition pos:start="18:8" pos:end="20:41">(<expr pos:start="18:9" pos:end="20:40"><name pos:start="18:9" pos:end="18:20"><name pos:start="18:9" pos:end="18:9">s</name><operator pos:start="18:10" pos:end="18:11">-&gt;</operator><name pos:start="18:12" pos:end="18:20">sense_key</name></name> <operator pos:start="18:22" pos:end="18:23">==</operator> <name pos:start="18:25" pos:end="18:44">SENSE_UNIT_ATTENTION</name> <operator pos:start="18:46" pos:end="18:47">&amp;&amp;</operator>
	<name pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:20">io_buffer</name><index pos:start="19:21" pos:end="19:23">[<expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr>]</index></name> <operator pos:start="19:25" pos:end="19:26">!=</operator> <name pos:start="19:28" pos:end="19:46">GPCMD_REQUEST_SENSE</name> <operator pos:start="19:48" pos:end="19:49">&amp;&amp;</operator>
	<name pos:start="20:9" pos:end="20:23"><name pos:start="20:9" pos:end="20:9">s</name><operator pos:start="20:10" pos:end="20:11">-&gt;</operator><name pos:start="20:12" pos:end="20:20">io_buffer</name><index pos:start="20:21" pos:end="20:23">[<expr pos:start="20:22" pos:end="20:22"><literal type="number" pos:start="20:22" pos:end="20:22">0</literal></expr>]</index></name> <operator pos:start="20:25" pos:end="20:26">!=</operator> <name pos:start="20:28" pos:end="20:40">GPCMD_INQUIRY</name></expr>)</condition> <block pos:start="20:43" pos:end="323:48">{<block_content pos:start="21:9" pos:end="323:48">
	<expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><call pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:34">ide_atapi_cmd_check_status</name><argument_list pos:start="21:35" pos:end="21:37">(<argument pos:start="21:36" pos:end="21:36"><expr pos:start="21:36" pos:end="21:36"><name pos:start="21:36" pos:end="21:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="22:9" pos:end="22:15">return;</return>
    <switch pos:start="23:5" pos:end="323:48">switch<condition pos:start="23:11" pos:end="23:27">(<expr pos:start="23:12" pos:end="23:26"><name pos:start="23:12" pos:end="23:26"><name pos:start="23:12" pos:end="23:12">s</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:23">io_buffer</name><index pos:start="23:24" pos:end="23:26">[<expr pos:start="23:25" pos:end="23:25"><literal type="number" pos:start="23:25" pos:end="23:25">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="23:29" pos:end="323:48">{<block_content pos:start="24:5" pos:end="323:48">
    <case pos:start="24:5" pos:end="24:31">case <expr pos:start="24:10" pos:end="24:30"><name pos:start="24:10" pos:end="24:30">GPCMD_TEST_UNIT_READY</name></expr>:</case>
        <if_stmt pos:start="25:9" pos:end="323:48"><if pos:start="25:9" pos:end="27:9">if <condition pos:start="25:12" pos:end="25:57">(<expr pos:start="25:13" pos:end="25:56"><call pos:start="25:13" pos:end="25:35"><name pos:start="25:13" pos:end="25:28">bdrv_is_inserted</name><argument_list pos:start="25:29" pos:end="25:35">(<argument pos:start="25:30" pos:end="25:34"><expr pos:start="25:30" pos:end="25:34"><name pos:start="25:30" pos:end="25:34"><name pos:start="25:30" pos:end="25:30">s</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:34">bs</name></name></expr></argument>)</argument_list></call> <operator pos:start="25:37" pos:end="25:38">&amp;&amp;</operator> <operator pos:start="25:40" pos:end="25:40">!</operator><name pos:start="25:41" pos:end="25:56"><name pos:start="25:41" pos:end="25:41">s</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:56">cdrom_changed</name></name></expr>)</condition> <block pos:start="25:59" pos:end="27:9">{<block_content pos:start="26:13" pos:end="26:32">
            <expr_stmt pos:start="26:13" pos:end="26:32"><expr pos:start="26:13" pos:end="26:31"><call pos:start="26:13" pos:end="26:31"><name pos:start="26:13" pos:end="26:28">ide_atapi_cmd_ok</name><argument_list pos:start="26:29" pos:end="26:31">(<argument pos:start="26:30" pos:end="26:30"><expr pos:start="26:30" pos:end="26:30"><name pos:start="26:30" pos:end="26:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="27:11" pos:end="323:48">else <block pos:start="27:16" pos:end="323:48">{<block_content pos:start="28:13" pos:end="323:48">
            <expr_stmt pos:start="28:13" pos:end="28:33"><expr pos:start="28:13" pos:end="28:32"><name pos:start="28:13" pos:end="28:28"><name pos:start="28:13" pos:end="28:13">s</name><operator pos:start="28:14" pos:end="28:15">-&gt;</operator><name pos:start="28:16" pos:end="28:28">cdrom_changed</name></name> <operator pos:start="28:30" pos:end="28:30">=</operator> <literal type="number" pos:start="28:32" pos:end="28:32">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="29:13" pos:end="30:56"><expr pos:start="29:13" pos:end="30:55"><call pos:start="29:13" pos:end="30:55"><name pos:start="29:13" pos:end="29:31">ide_atapi_cmd_error</name><argument_list pos:start="29:32" pos:end="30:55">(<argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">s</name></expr></argument>, <argument pos:start="29:36" pos:end="29:50"><expr pos:start="29:36" pos:end="29:50"><name pos:start="29:36" pos:end="29:50">SENSE_NOT_READY</name></expr></argument>,
                                <argument pos:start="30:33" pos:end="30:54"><expr pos:start="30:33" pos:end="30:54"><name pos:start="30:33" pos:end="30:54">ASC_MEDIUM_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="31:5" pos:end="31:28">case <expr pos:start="31:10" pos:end="31:27"><name pos:start="31:10" pos:end="31:27">GPCMD_MODE_SENSE_6</name></expr>:</case>
    <case pos:start="32:5" pos:end="32:29">case <expr pos:start="32:10" pos:end="32:28"><name pos:start="32:10" pos:end="32:28">GPCMD_MODE_SENSE_10</name></expr>:</case>
        <block pos:start="33:9" pos:end="323:48">{<block_content pos:start="34:13" pos:end="323:48">
            <decl_stmt pos:start="34:13" pos:end="34:29"><decl pos:start="34:13" pos:end="34:22"><type pos:start="34:13" pos:end="34:15"><name pos:start="34:13" pos:end="34:15">int</name></type> <name pos:start="34:17" pos:end="34:22">action</name></decl>, <decl pos:start="34:25" pos:end="34:28"><type ref="prev" pos:start="34:13" pos:end="34:15"/><name pos:start="34:25" pos:end="34:28">code</name></decl>;</decl_stmt>
            <if_stmt pos:start="35:13" pos:end="37:36"><if pos:start="35:13" pos:end="37:36">if <condition pos:start="35:16" pos:end="35:49">(<expr pos:start="35:17" pos:end="35:48"><name pos:start="35:17" pos:end="35:25"><name pos:start="35:17" pos:end="35:22">packet</name><index pos:start="35:23" pos:end="35:25">[<expr pos:start="35:24" pos:end="35:24"><literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>]</index></name> <operator pos:start="35:27" pos:end="35:28">==</operator> <name pos:start="35:30" pos:end="35:48">GPCMD_MODE_SENSE_10</name></expr>)</condition><block type="pseudo" pos:start="36:13" pos:end="37:36"><block_content pos:start="36:13" pos:end="37:36">
            <if_stmt pos:start="36:13" pos:end="37:36"><else pos:start="36:13" pos:end="37:36">else<block type="pseudo" pos:start="37:17" pos:end="37:36"><block_content pos:start="37:17" pos:end="37:36">
                <expr_stmt pos:start="37:17" pos:end="37:36"><expr pos:start="37:17" pos:end="37:35"><name pos:start="37:17" pos:end="37:23">max_len</name> <operator pos:start="37:25" pos:end="37:25">=</operator> <name pos:start="37:27" pos:end="37:35"><name pos:start="37:27" pos:end="37:32">packet</name><index pos:start="37:33" pos:end="37:35">[<expr pos:start="37:34" pos:end="37:34"><literal type="number" pos:start="37:34" pos:end="37:34">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="38:13" pos:end="38:36"><expr pos:start="38:13" pos:end="38:35"><name pos:start="38:13" pos:end="38:18">action</name> <operator pos:start="38:20" pos:end="38:20">=</operator> <name pos:start="38:22" pos:end="38:30"><name pos:start="38:22" pos:end="38:27">packet</name><index pos:start="38:28" pos:end="38:30">[<expr pos:start="38:29" pos:end="38:29"><literal type="number" pos:start="38:29" pos:end="38:29">2</literal></expr>]</index></name> <operator pos:start="38:32" pos:end="38:33">&gt;&gt;</operator> <literal type="number" pos:start="38:35" pos:end="38:35">6</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="39:13" pos:end="39:36"><expr pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:16">code</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:25">packet</name><index pos:start="39:26" pos:end="39:28">[<expr pos:start="39:27" pos:end="39:27"><literal type="number" pos:start="39:27" pos:end="39:27">2</literal></expr>]</index></name> <operator pos:start="39:30" pos:end="39:30">&amp;</operator> <literal type="number" pos:start="39:32" pos:end="39:35">0x3f</literal></expr>;</expr_stmt>
            <switch pos:start="40:13" pos:end="323:48">switch<condition pos:start="40:19" pos:end="40:26">(<expr pos:start="40:20" pos:end="40:25"><name pos:start="40:20" pos:end="40:25">action</name></expr>)</condition> <block pos:start="40:28" pos:end="323:48">{<block_content pos:start="41:13" pos:end="323:48">
            <case pos:start="41:13" pos:end="41:19">case <expr pos:start="41:18" pos:end="41:18"><literal type="number" pos:start="41:18" pos:end="41:18">0</literal></expr>:</case> <comment type="block" pos:start="41:21" pos:end="41:40">/* current values */</comment>
                <switch pos:start="42:17" pos:end="112:73">switch<condition pos:start="42:23" pos:end="42:28">(<expr pos:start="42:24" pos:end="42:27"><name pos:start="42:24" pos:end="42:27">code</name></expr>)</condition> <block pos:start="42:30" pos:end="112:72">{<block_content pos:start="43:17" pos:end="112:72">
                <case pos:start="43:17" pos:end="43:43">case <expr pos:start="43:22" pos:end="43:42"><name pos:start="43:22" pos:end="43:42">GPMODE_R_W_ERROR_PAGE</name></expr>:</case> <comment type="block" pos:start="43:45" pos:end="43:64">/* error recovery */</comment>
                    <expr_stmt pos:start="44:21" pos:end="44:50"><expr pos:start="44:21" pos:end="44:49"><call pos:start="44:21" pos:end="44:49"><name pos:start="44:21" pos:end="44:32">cpu_to_ube16</name><argument_list pos:start="44:33" pos:end="44:49">(<argument pos:start="44:34" pos:end="44:40"><expr pos:start="44:34" pos:end="44:40"><operator pos:start="44:34" pos:end="44:34">&amp;</operator><name pos:start="44:35" pos:end="44:40"><name pos:start="44:35" pos:end="44:37">buf</name><index pos:start="44:38" pos:end="44:40">[<expr pos:start="44:39" pos:end="44:39"><literal type="number" pos:start="44:39" pos:end="44:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="44:43" pos:end="44:48"><expr pos:start="44:43" pos:end="44:48"><literal type="number" pos:start="44:43" pos:end="44:46">16</literal> <operator pos:start="44:46" pos:end="44:46">+</operator> <literal type="number" pos:start="44:48" pos:end="44:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="45:21" pos:end="45:34"><expr pos:start="45:21" pos:end="45:33"><name pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:23">buf</name><index pos:start="45:24" pos:end="45:26">[<expr pos:start="45:25" pos:end="45:25"><literal type="number" pos:start="45:25" pos:end="45:25">2</literal></expr>]</index></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <literal type="number" pos:start="45:30" pos:end="45:33">0x70</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="46:21" pos:end="46:31"><expr pos:start="46:21" pos:end="46:30"><name pos:start="46:21" pos:end="46:26"><name pos:start="46:21" pos:end="46:23">buf</name><index pos:start="46:24" pos:end="46:26">[<expr pos:start="46:25" pos:end="46:25"><literal type="number" pos:start="46:25" pos:end="46:25">3</literal></expr>]</index></name> <operator pos:start="46:28" pos:end="46:28">=</operator> <literal type="number" pos:start="46:30" pos:end="46:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="47:21" pos:end="47:31"><expr pos:start="47:21" pos:end="47:30"><name pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:23">buf</name><index pos:start="47:24" pos:end="47:26">[<expr pos:start="47:25" pos:end="47:25"><literal type="number" pos:start="47:25" pos:end="47:25">4</literal></expr>]</index></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <literal type="number" pos:start="47:30" pos:end="47:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="48:21" pos:end="48:31"><expr pos:start="48:21" pos:end="48:30"><name pos:start="48:21" pos:end="48:26"><name pos:start="48:21" pos:end="48:23">buf</name><index pos:start="48:24" pos:end="48:26">[<expr pos:start="48:25" pos:end="48:25"><literal type="number" pos:start="48:25" pos:end="48:25">5</literal></expr>]</index></name> <operator pos:start="48:28" pos:end="48:28">=</operator> <literal type="number" pos:start="48:30" pos:end="48:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="49:21" pos:end="49:31"><expr pos:start="49:21" pos:end="49:30"><name pos:start="49:21" pos:end="49:26"><name pos:start="49:21" pos:end="49:23">buf</name><index pos:start="49:24" pos:end="49:26">[<expr pos:start="49:25" pos:end="49:25"><literal type="number" pos:start="49:25" pos:end="49:25">6</literal></expr>]</index></name> <operator pos:start="49:28" pos:end="49:28">=</operator> <literal type="number" pos:start="49:30" pos:end="49:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="50:21" pos:end="50:31"><expr pos:start="50:21" pos:end="50:30"><name pos:start="50:21" pos:end="50:26"><name pos:start="50:21" pos:end="50:23">buf</name><index pos:start="50:24" pos:end="50:26">[<expr pos:start="50:25" pos:end="50:25"><literal type="number" pos:start="50:25" pos:end="50:25">7</literal></expr>]</index></name> <operator pos:start="50:28" pos:end="50:28">=</operator> <literal type="number" pos:start="50:30" pos:end="50:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="51:21" pos:end="51:34"><expr pos:start="51:21" pos:end="51:33"><name pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:23">buf</name><index pos:start="51:24" pos:end="51:26">[<expr pos:start="51:25" pos:end="51:25"><literal type="number" pos:start="51:25" pos:end="51:25">8</literal></expr>]</index></name> <operator pos:start="51:28" pos:end="51:28">=</operator> <literal type="number" pos:start="51:30" pos:end="51:33">0x01</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="52:21" pos:end="52:34"><expr pos:start="52:21" pos:end="52:33"><name pos:start="52:21" pos:end="52:26"><name pos:start="52:21" pos:end="52:23">buf</name><index pos:start="52:24" pos:end="52:26">[<expr pos:start="52:25" pos:end="52:25"><literal type="number" pos:start="52:25" pos:end="52:25">9</literal></expr>]</index></name> <operator pos:start="52:28" pos:end="52:28">=</operator> <literal type="number" pos:start="52:30" pos:end="52:33">0x06</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="53:21" pos:end="53:35"><expr pos:start="53:21" pos:end="53:34"><name pos:start="53:21" pos:end="53:27"><name pos:start="53:21" pos:end="53:23">buf</name><index pos:start="53:24" pos:end="53:27">[<expr pos:start="53:25" pos:end="53:26"><literal type="number" pos:start="53:25" pos:end="53:26">10</literal></expr>]</index></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <literal type="number" pos:start="53:31" pos:end="53:34">0x00</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="54:21" pos:end="54:35"><expr pos:start="54:21" pos:end="54:34"><name pos:start="54:21" pos:end="54:27"><name pos:start="54:21" pos:end="54:23">buf</name><index pos:start="54:24" pos:end="54:27">[<expr pos:start="54:25" pos:end="54:26"><literal type="number" pos:start="54:25" pos:end="54:26">11</literal></expr>]</index></name> <operator pos:start="54:29" pos:end="54:29">=</operator> <literal type="number" pos:start="54:31" pos:end="54:34">0x05</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="55:21" pos:end="55:35"><expr pos:start="55:21" pos:end="55:34"><name pos:start="55:21" pos:end="55:27"><name pos:start="55:21" pos:end="55:23">buf</name><index pos:start="55:24" pos:end="55:27">[<expr pos:start="55:25" pos:end="55:26"><literal type="number" pos:start="55:25" pos:end="55:26">12</literal></expr>]</index></name> <operator pos:start="55:29" pos:end="55:29">=</operator> <literal type="number" pos:start="55:31" pos:end="55:34">0x00</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="56:21" pos:end="56:35"><expr pos:start="56:21" pos:end="56:34"><name pos:start="56:21" pos:end="56:27"><name pos:start="56:21" pos:end="56:23">buf</name><index pos:start="56:24" pos:end="56:27">[<expr pos:start="56:25" pos:end="56:26"><literal type="number" pos:start="56:25" pos:end="56:26">13</literal></expr>]</index></name> <operator pos:start="56:29" pos:end="56:29">=</operator> <literal type="number" pos:start="56:31" pos:end="56:34">0x00</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="57:21" pos:end="57:35"><expr pos:start="57:21" pos:end="57:34"><name pos:start="57:21" pos:end="57:27"><name pos:start="57:21" pos:end="57:23">buf</name><index pos:start="57:24" pos:end="57:27">[<expr pos:start="57:25" pos:end="57:26"><literal type="number" pos:start="57:25" pos:end="57:26">14</literal></expr>]</index></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <literal type="number" pos:start="57:31" pos:end="57:34">0x00</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="58:21" pos:end="58:35"><expr pos:start="58:21" pos:end="58:34"><name pos:start="58:21" pos:end="58:27"><name pos:start="58:21" pos:end="58:23">buf</name><index pos:start="58:24" pos:end="58:27">[<expr pos:start="58:25" pos:end="58:26"><literal type="number" pos:start="58:25" pos:end="58:26">15</literal></expr>]</index></name> <operator pos:start="58:29" pos:end="58:29">=</operator> <literal type="number" pos:start="58:31" pos:end="58:34">0x00</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="59:21" pos:end="59:56"><expr pos:start="59:21" pos:end="59:55"><call pos:start="59:21" pos:end="59:55"><name pos:start="59:21" pos:end="59:39">ide_atapi_cmd_reply</name><argument_list pos:start="59:40" pos:end="59:55">(<argument pos:start="59:41" pos:end="59:41"><expr pos:start="59:41" pos:end="59:41"><name pos:start="59:41" pos:end="59:41">s</name></expr></argument>, <argument pos:start="59:44" pos:end="59:45"><expr pos:start="59:44" pos:end="59:45"><literal type="number" pos:start="59:44" pos:end="59:45">16</literal></expr></argument>, <argument pos:start="59:48" pos:end="59:54"><expr pos:start="59:48" pos:end="59:54"><name pos:start="59:48" pos:end="59:54">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <case pos:start="60:17" pos:end="60:43">case <expr pos:start="60:22" pos:end="60:42"><name pos:start="60:22" pos:end="60:42">GPMODE_AUDIO_CTL_PAGE</name></expr>:</case>
                    <expr_stmt pos:start="61:21" pos:end="61:50"><expr pos:start="61:21" pos:end="61:49"><call pos:start="61:21" pos:end="61:49"><name pos:start="61:21" pos:end="61:32">cpu_to_ube16</name><argument_list pos:start="61:33" pos:end="61:49">(<argument pos:start="61:34" pos:end="61:40"><expr pos:start="61:34" pos:end="61:40"><operator pos:start="61:34" pos:end="61:34">&amp;</operator><name pos:start="61:35" pos:end="61:40"><name pos:start="61:35" pos:end="61:37">buf</name><index pos:start="61:38" pos:end="61:40">[<expr pos:start="61:39" pos:end="61:39"><literal type="number" pos:start="61:39" pos:end="61:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="61:43" pos:end="61:48"><expr pos:start="61:43" pos:end="61:48"><literal type="number" pos:start="61:43" pos:end="61:46">24</literal> <operator pos:start="61:46" pos:end="61:46">+</operator> <literal type="number" pos:start="61:48" pos:end="61:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="62:21" pos:end="62:34"><expr pos:start="62:21" pos:end="62:33"><name pos:start="62:21" pos:end="62:26"><name pos:start="62:21" pos:end="62:23">buf</name><index pos:start="62:24" pos:end="62:26">[<expr pos:start="62:25" pos:end="62:25"><literal type="number" pos:start="62:25" pos:end="62:25">2</literal></expr>]</index></name> <operator pos:start="62:28" pos:end="62:28">=</operator> <literal type="number" pos:start="62:30" pos:end="62:33">0x70</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="63:21" pos:end="63:31"><expr pos:start="63:21" pos:end="63:30"><name pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:23">buf</name><index pos:start="63:24" pos:end="63:26">[<expr pos:start="63:25" pos:end="63:25"><literal type="number" pos:start="63:25" pos:end="63:25">3</literal></expr>]</index></name> <operator pos:start="63:28" pos:end="63:28">=</operator> <literal type="number" pos:start="63:30" pos:end="63:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="64:21" pos:end="64:31"><expr pos:start="64:21" pos:end="64:30"><name pos:start="64:21" pos:end="64:26"><name pos:start="64:21" pos:end="64:23">buf</name><index pos:start="64:24" pos:end="64:26">[<expr pos:start="64:25" pos:end="64:25"><literal type="number" pos:start="64:25" pos:end="64:25">4</literal></expr>]</index></name> <operator pos:start="64:28" pos:end="64:28">=</operator> <literal type="number" pos:start="64:30" pos:end="64:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="65:21" pos:end="65:31"><expr pos:start="65:21" pos:end="65:30"><name pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:23">buf</name><index pos:start="65:24" pos:end="65:26">[<expr pos:start="65:25" pos:end="65:25"><literal type="number" pos:start="65:25" pos:end="65:25">5</literal></expr>]</index></name> <operator pos:start="65:28" pos:end="65:28">=</operator> <literal type="number" pos:start="65:30" pos:end="65:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="66:21" pos:end="66:31"><expr pos:start="66:21" pos:end="66:30"><name pos:start="66:21" pos:end="66:26"><name pos:start="66:21" pos:end="66:23">buf</name><index pos:start="66:24" pos:end="66:26">[<expr pos:start="66:25" pos:end="66:25"><literal type="number" pos:start="66:25" pos:end="66:25">6</literal></expr>]</index></name> <operator pos:start="66:28" pos:end="66:28">=</operator> <literal type="number" pos:start="66:30" pos:end="66:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="67:21" pos:end="67:31"><expr pos:start="67:21" pos:end="67:30"><name pos:start="67:21" pos:end="67:26"><name pos:start="67:21" pos:end="67:23">buf</name><index pos:start="67:24" pos:end="67:26">[<expr pos:start="67:25" pos:end="67:25"><literal type="number" pos:start="67:25" pos:end="67:25">7</literal></expr>]</index></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <literal type="number" pos:start="67:30" pos:end="67:30">0</literal></expr>;</expr_stmt>
                    <comment type="block" pos:start="68:21" pos:end="68:54">/* Fill with CDROM audio volume */</comment>
                    <expr_stmt pos:start="69:21" pos:end="69:32"><expr pos:start="69:21" pos:end="69:31"><name pos:start="69:21" pos:end="69:27"><name pos:start="69:21" pos:end="69:23">buf</name><index pos:start="69:24" pos:end="69:27">[<expr pos:start="69:25" pos:end="69:26"><literal type="number" pos:start="69:25" pos:end="69:26">17</literal></expr>]</index></name> <operator pos:start="69:29" pos:end="69:29">=</operator> <literal type="number" pos:start="69:31" pos:end="69:31">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="70:21" pos:end="70:32"><expr pos:start="70:21" pos:end="70:31"><name pos:start="70:21" pos:end="70:27"><name pos:start="70:21" pos:end="70:23">buf</name><index pos:start="70:24" pos:end="70:27">[<expr pos:start="70:25" pos:end="70:26"><literal type="number" pos:start="70:25" pos:end="70:26">19</literal></expr>]</index></name> <operator pos:start="70:29" pos:end="70:29">=</operator> <literal type="number" pos:start="70:31" pos:end="70:31">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="71:21" pos:end="71:32"><expr pos:start="71:21" pos:end="71:31"><name pos:start="71:21" pos:end="71:27"><name pos:start="71:21" pos:end="71:23">buf</name><index pos:start="71:24" pos:end="71:27">[<expr pos:start="71:25" pos:end="71:26"><literal type="number" pos:start="71:25" pos:end="71:26">21</literal></expr>]</index></name> <operator pos:start="71:29" pos:end="71:29">=</operator> <literal type="number" pos:start="71:31" pos:end="71:31">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="72:21" pos:end="72:32"><expr pos:start="72:21" pos:end="72:31"><name pos:start="72:21" pos:end="72:27"><name pos:start="72:21" pos:end="72:23">buf</name><index pos:start="72:24" pos:end="72:27">[<expr pos:start="72:25" pos:end="72:26"><literal type="number" pos:start="72:25" pos:end="72:26">23</literal></expr>]</index></name> <operator pos:start="72:29" pos:end="72:29">=</operator> <literal type="number" pos:start="72:31" pos:end="72:31">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="73:21" pos:end="73:56"><expr pos:start="73:21" pos:end="73:55"><call pos:start="73:21" pos:end="73:55"><name pos:start="73:21" pos:end="73:39">ide_atapi_cmd_reply</name><argument_list pos:start="73:40" pos:end="73:55">(<argument pos:start="73:41" pos:end="73:41"><expr pos:start="73:41" pos:end="73:41"><name pos:start="73:41" pos:end="73:41">s</name></expr></argument>, <argument pos:start="73:44" pos:end="73:45"><expr pos:start="73:44" pos:end="73:45"><literal type="number" pos:start="73:44" pos:end="73:45">24</literal></expr></argument>, <argument pos:start="73:48" pos:end="73:54"><expr pos:start="73:48" pos:end="73:54"><name pos:start="73:48" pos:end="73:54">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <case pos:start="74:17" pos:end="74:46">case <expr pos:start="74:22" pos:end="74:45"><name pos:start="74:22" pos:end="74:45">GPMODE_CAPABILITIES_PAGE</name></expr>:</case>
                    <expr_stmt pos:start="75:21" pos:end="75:50"><expr pos:start="75:21" pos:end="75:49"><call pos:start="75:21" pos:end="75:49"><name pos:start="75:21" pos:end="75:32">cpu_to_ube16</name><argument_list pos:start="75:33" pos:end="75:49">(<argument pos:start="75:34" pos:end="75:40"><expr pos:start="75:34" pos:end="75:40"><operator pos:start="75:34" pos:end="75:34">&amp;</operator><name pos:start="75:35" pos:end="75:40"><name pos:start="75:35" pos:end="75:37">buf</name><index pos:start="75:38" pos:end="75:40">[<expr pos:start="75:39" pos:end="75:39"><literal type="number" pos:start="75:39" pos:end="75:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="75:43" pos:end="75:48"><expr pos:start="75:43" pos:end="75:48"><literal type="number" pos:start="75:43" pos:end="75:46">28</literal> <operator pos:start="75:46" pos:end="75:46">+</operator> <literal type="number" pos:start="75:48" pos:end="75:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="76:21" pos:end="76:34"><expr pos:start="76:21" pos:end="76:33"><name pos:start="76:21" pos:end="76:26"><name pos:start="76:21" pos:end="76:23">buf</name><index pos:start="76:24" pos:end="76:26">[<expr pos:start="76:25" pos:end="76:25"><literal type="number" pos:start="76:25" pos:end="76:25">2</literal></expr>]</index></name> <operator pos:start="76:28" pos:end="76:28">=</operator> <literal type="number" pos:start="76:30" pos:end="76:33">0x70</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="77:21" pos:end="77:31"><expr pos:start="77:21" pos:end="77:30"><name pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:23">buf</name><index pos:start="77:24" pos:end="77:26">[<expr pos:start="77:25" pos:end="77:25"><literal type="number" pos:start="77:25" pos:end="77:25">3</literal></expr>]</index></name> <operator pos:start="77:28" pos:end="77:28">=</operator> <literal type="number" pos:start="77:30" pos:end="77:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="78:21" pos:end="78:31"><expr pos:start="78:21" pos:end="78:30"><name pos:start="78:21" pos:end="78:26"><name pos:start="78:21" pos:end="78:23">buf</name><index pos:start="78:24" pos:end="78:26">[<expr pos:start="78:25" pos:end="78:25"><literal type="number" pos:start="78:25" pos:end="78:25">4</literal></expr>]</index></name> <operator pos:start="78:28" pos:end="78:28">=</operator> <literal type="number" pos:start="78:30" pos:end="78:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="79:21" pos:end="79:31"><expr pos:start="79:21" pos:end="79:30"><name pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:23">buf</name><index pos:start="79:24" pos:end="79:26">[<expr pos:start="79:25" pos:end="79:25"><literal type="number" pos:start="79:25" pos:end="79:25">5</literal></expr>]</index></name> <operator pos:start="79:28" pos:end="79:28">=</operator> <literal type="number" pos:start="79:30" pos:end="79:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="80:21" pos:end="80:31"><expr pos:start="80:21" pos:end="80:30"><name pos:start="80:21" pos:end="80:26"><name pos:start="80:21" pos:end="80:23">buf</name><index pos:start="80:24" pos:end="80:26">[<expr pos:start="80:25" pos:end="80:25"><literal type="number" pos:start="80:25" pos:end="80:25">6</literal></expr>]</index></name> <operator pos:start="80:28" pos:end="80:28">=</operator> <literal type="number" pos:start="80:30" pos:end="80:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="81:21" pos:end="81:31"><expr pos:start="81:21" pos:end="81:30"><name pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:23">buf</name><index pos:start="81:24" pos:end="81:26">[<expr pos:start="81:25" pos:end="81:25"><literal type="number" pos:start="81:25" pos:end="81:25">7</literal></expr>]</index></name> <operator pos:start="81:28" pos:end="81:28">=</operator> <literal type="number" pos:start="81:30" pos:end="81:30">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="82:21" pos:end="82:34"><expr pos:start="82:21" pos:end="82:33"><name pos:start="82:21" pos:end="82:26"><name pos:start="82:21" pos:end="82:23">buf</name><index pos:start="82:24" pos:end="82:26">[<expr pos:start="82:25" pos:end="82:25"><literal type="number" pos:start="82:25" pos:end="82:25">8</literal></expr>]</index></name> <operator pos:start="82:28" pos:end="82:28">=</operator> <literal type="number" pos:start="82:30" pos:end="82:33">0x2a</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="83:21" pos:end="83:34"><expr pos:start="83:21" pos:end="83:33"><name pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:23">buf</name><index pos:start="83:24" pos:end="83:26">[<expr pos:start="83:25" pos:end="83:25"><literal type="number" pos:start="83:25" pos:end="83:25">9</literal></expr>]</index></name> <operator pos:start="83:28" pos:end="83:28">=</operator> <literal type="number" pos:start="83:30" pos:end="83:33">0x12</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="84:21" pos:end="84:35"><expr pos:start="84:21" pos:end="84:34"><name pos:start="84:21" pos:end="84:27"><name pos:start="84:21" pos:end="84:23">buf</name><index pos:start="84:24" pos:end="84:27">[<expr pos:start="84:25" pos:end="84:26"><literal type="number" pos:start="84:25" pos:end="84:26">10</literal></expr>]</index></name> <operator pos:start="84:29" pos:end="84:29">=</operator> <literal type="number" pos:start="84:31" pos:end="84:34">0x00</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="85:21" pos:end="85:35"><expr pos:start="85:21" pos:end="85:34"><name pos:start="85:21" pos:end="85:27"><name pos:start="85:21" pos:end="85:23">buf</name><index pos:start="85:24" pos:end="85:27">[<expr pos:start="85:25" pos:end="85:26"><literal type="number" pos:start="85:25" pos:end="85:26">11</literal></expr>]</index></name> <operator pos:start="85:29" pos:end="85:29">=</operator> <literal type="number" pos:start="85:31" pos:end="85:34">0x00</literal></expr>;</expr_stmt>
                    <comment type="block" pos:start="86:21" pos:end="87:66">/* Claim PLAY_AUDIO capability (0x01) since some Linux
                       code checks for this to automount media. */</comment>
                    <expr_stmt pos:start="88:21" pos:end="88:35"><expr pos:start="88:21" pos:end="88:34"><name pos:start="88:21" pos:end="88:27"><name pos:start="88:21" pos:end="88:23">buf</name><index pos:start="88:24" pos:end="88:27">[<expr pos:start="88:25" pos:end="88:26"><literal type="number" pos:start="88:25" pos:end="88:26">12</literal></expr>]</index></name> <operator pos:start="88:29" pos:end="88:29">=</operator> <literal type="number" pos:start="88:31" pos:end="88:34">0x71</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="89:21" pos:end="89:37"><expr pos:start="89:21" pos:end="89:36"><name pos:start="89:21" pos:end="89:27"><name pos:start="89:21" pos:end="89:23">buf</name><index pos:start="89:24" pos:end="89:27">[<expr pos:start="89:25" pos:end="89:26"><literal type="number" pos:start="89:25" pos:end="89:26">13</literal></expr>]</index></name> <operator pos:start="89:29" pos:end="89:29">=</operator> <literal type="number" pos:start="89:31" pos:end="89:31">3</literal> <operator pos:start="89:33" pos:end="89:34">&lt;&lt;</operator> <literal type="number" pos:start="89:36" pos:end="89:36">5</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="90:21" pos:end="90:61"><expr pos:start="90:21" pos:end="90:60"><name pos:start="90:21" pos:end="90:27"><name pos:start="90:21" pos:end="90:23">buf</name><index pos:start="90:24" pos:end="90:27">[<expr pos:start="90:25" pos:end="90:26"><literal type="number" pos:start="90:25" pos:end="90:26">14</literal></expr>]</index></name> <operator pos:start="90:29" pos:end="90:29">=</operator> <operator pos:start="90:31" pos:end="90:31">(</operator><literal type="number" pos:start="90:32" pos:end="90:32">1</literal> <operator pos:start="90:34" pos:end="90:35">&lt;&lt;</operator> <literal type="number" pos:start="90:37" pos:end="90:37">0</literal><operator pos:start="90:38" pos:end="90:38">)</operator> <operator pos:start="90:40" pos:end="90:40">|</operator> <operator pos:start="90:42" pos:end="90:42">(</operator><literal type="number" pos:start="90:43" pos:end="90:43">1</literal> <operator pos:start="90:45" pos:end="90:46">&lt;&lt;</operator> <literal type="number" pos:start="90:48" pos:end="90:48">3</literal><operator pos:start="90:49" pos:end="90:49">)</operator> <operator pos:start="90:51" pos:end="90:51">|</operator> <operator pos:start="90:53" pos:end="90:53">(</operator><literal type="number" pos:start="90:54" pos:end="90:54">1</literal> <operator pos:start="90:56" pos:end="90:57">&lt;&lt;</operator> <literal type="number" pos:start="90:59" pos:end="90:59">5</literal><operator pos:start="90:60" pos:end="90:60">)</operator></expr>;</expr_stmt>
                    <if_stmt pos:start="91:21" pos:end="92:41"><if pos:start="91:21" pos:end="92:41">if <condition pos:start="91:24" pos:end="91:46">(<expr pos:start="91:25" pos:end="91:45"><call pos:start="91:25" pos:end="91:45"><name pos:start="91:25" pos:end="91:38">bdrv_is_locked</name><argument_list pos:start="91:39" pos:end="91:45">(<argument pos:start="91:40" pos:end="91:44"><expr pos:start="91:40" pos:end="91:44"><name pos:start="91:40" pos:end="91:44"><name pos:start="91:40" pos:end="91:40">s</name><operator pos:start="91:41" pos:end="91:42">-&gt;</operator><name pos:start="91:43" pos:end="91:44">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="92:25" pos:end="92:41"><block_content pos:start="92:25" pos:end="92:41">
                        <expr_stmt pos:start="92:25" pos:end="92:41"><expr pos:start="92:25" pos:end="92:40"><name pos:start="92:25" pos:end="92:30"><name pos:start="92:25" pos:end="92:27">buf</name><index pos:start="92:28" pos:end="92:30">[<expr pos:start="92:29" pos:end="92:29"><literal type="number" pos:start="92:29" pos:end="92:29">6</literal></expr>]</index></name> <operator pos:start="92:32" pos:end="92:33">|=</operator> <literal type="number" pos:start="92:35" pos:end="92:35">1</literal> <operator pos:start="92:37" pos:end="92:38">&lt;&lt;</operator> <literal type="number" pos:start="92:40" pos:end="92:40">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="93:21" pos:end="93:35"><expr pos:start="93:21" pos:end="93:34"><name pos:start="93:21" pos:end="93:27"><name pos:start="93:21" pos:end="93:23">buf</name><index pos:start="93:24" pos:end="93:27">[<expr pos:start="93:25" pos:end="93:26"><literal type="number" pos:start="93:25" pos:end="93:26">15</literal></expr>]</index></name> <operator pos:start="93:29" pos:end="93:29">=</operator> <literal type="number" pos:start="93:31" pos:end="93:34">0x00</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="94:21" pos:end="94:48"><expr pos:start="94:21" pos:end="94:47"><call pos:start="94:21" pos:end="94:47"><name pos:start="94:21" pos:end="94:32">cpu_to_ube16</name><argument_list pos:start="94:33" pos:end="94:47">(<argument pos:start="94:34" pos:end="94:41"><expr pos:start="94:34" pos:end="94:41"><operator pos:start="94:34" pos:end="94:34">&amp;</operator><name pos:start="94:35" pos:end="94:41"><name pos:start="94:35" pos:end="94:37">buf</name><index pos:start="94:38" pos:end="94:41">[<expr pos:start="94:39" pos:end="94:40"><literal type="number" pos:start="94:39" pos:end="94:40">16</literal></expr>]</index></name></expr></argument>, <argument pos:start="94:44" pos:end="94:46"><expr pos:start="94:44" pos:end="94:46"><literal type="number" pos:start="94:44" pos:end="94:46">706</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="95:21" pos:end="95:32"><expr pos:start="95:21" pos:end="95:31"><name pos:start="95:21" pos:end="95:27"><name pos:start="95:21" pos:end="95:23">buf</name><index pos:start="95:24" pos:end="95:27">[<expr pos:start="95:25" pos:end="95:26"><literal type="number" pos:start="95:25" pos:end="95:26">18</literal></expr>]</index></name> <operator pos:start="95:29" pos:end="95:29">=</operator> <literal type="number" pos:start="95:31" pos:end="95:31">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="96:21" pos:end="96:32"><expr pos:start="96:21" pos:end="96:31"><name pos:start="96:21" pos:end="96:27"><name pos:start="96:21" pos:end="96:23">buf</name><index pos:start="96:24" pos:end="96:27">[<expr pos:start="96:25" pos:end="96:26"><literal type="number" pos:start="96:25" pos:end="96:26">19</literal></expr>]</index></name> <operator pos:start="96:29" pos:end="96:29">=</operator> <literal type="number" pos:start="96:31" pos:end="96:31">2</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="97:21" pos:end="97:48"><expr pos:start="97:21" pos:end="97:47"><call pos:start="97:21" pos:end="97:47"><name pos:start="97:21" pos:end="97:32">cpu_to_ube16</name><argument_list pos:start="97:33" pos:end="97:47">(<argument pos:start="97:34" pos:end="97:41"><expr pos:start="97:34" pos:end="97:41"><operator pos:start="97:34" pos:end="97:34">&amp;</operator><name pos:start="97:35" pos:end="97:41"><name pos:start="97:35" pos:end="97:37">buf</name><index pos:start="97:38" pos:end="97:41">[<expr pos:start="97:39" pos:end="97:40"><literal type="number" pos:start="97:39" pos:end="97:40">20</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:44" pos:end="97:46"><expr pos:start="97:44" pos:end="97:46"><literal type="number" pos:start="97:44" pos:end="97:46">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="98:21" pos:end="98:48"><expr pos:start="98:21" pos:end="98:47"><call pos:start="98:21" pos:end="98:47"><name pos:start="98:21" pos:end="98:32">cpu_to_ube16</name><argument_list pos:start="98:33" pos:end="98:47">(<argument pos:start="98:34" pos:end="98:41"><expr pos:start="98:34" pos:end="98:41"><operator pos:start="98:34" pos:end="98:34">&amp;</operator><name pos:start="98:35" pos:end="98:41"><name pos:start="98:35" pos:end="98:37">buf</name><index pos:start="98:38" pos:end="98:41">[<expr pos:start="98:39" pos:end="98:40"><literal type="number" pos:start="98:39" pos:end="98:40">22</literal></expr>]</index></name></expr></argument>, <argument pos:start="98:44" pos:end="98:46"><expr pos:start="98:44" pos:end="98:46"><literal type="number" pos:start="98:44" pos:end="98:46">706</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="99:21" pos:end="99:32"><expr pos:start="99:21" pos:end="99:31"><name pos:start="99:21" pos:end="99:27"><name pos:start="99:21" pos:end="99:23">buf</name><index pos:start="99:24" pos:end="99:27">[<expr pos:start="99:25" pos:end="99:26"><literal type="number" pos:start="99:25" pos:end="99:26">24</literal></expr>]</index></name> <operator pos:start="99:29" pos:end="99:29">=</operator> <literal type="number" pos:start="99:31" pos:end="99:31">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="100:21" pos:end="100:32"><expr pos:start="100:21" pos:end="100:31"><name pos:start="100:21" pos:end="100:27"><name pos:start="100:21" pos:end="100:23">buf</name><index pos:start="100:24" pos:end="100:27">[<expr pos:start="100:25" pos:end="100:26"><literal type="number" pos:start="100:25" pos:end="100:26">25</literal></expr>]</index></name> <operator pos:start="100:29" pos:end="100:29">=</operator> <literal type="number" pos:start="100:31" pos:end="100:31">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="101:21" pos:end="101:32"><expr pos:start="101:21" pos:end="101:31"><name pos:start="101:21" pos:end="101:27"><name pos:start="101:21" pos:end="101:23">buf</name><index pos:start="101:24" pos:end="101:27">[<expr pos:start="101:25" pos:end="101:26"><literal type="number" pos:start="101:25" pos:end="101:26">26</literal></expr>]</index></name> <operator pos:start="101:29" pos:end="101:29">=</operator> <literal type="number" pos:start="101:31" pos:end="101:31">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="102:21" pos:end="102:32"><expr pos:start="102:21" pos:end="102:31"><name pos:start="102:21" pos:end="102:27"><name pos:start="102:21" pos:end="102:23">buf</name><index pos:start="102:24" pos:end="102:27">[<expr pos:start="102:25" pos:end="102:26"><literal type="number" pos:start="102:25" pos:end="102:26">27</literal></expr>]</index></name> <operator pos:start="102:29" pos:end="102:29">=</operator> <literal type="number" pos:start="102:31" pos:end="102:31">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="103:21" pos:end="103:56"><expr pos:start="103:21" pos:end="103:55"><call pos:start="103:21" pos:end="103:55"><name pos:start="103:21" pos:end="103:39">ide_atapi_cmd_reply</name><argument_list pos:start="103:40" pos:end="103:55">(<argument pos:start="103:41" pos:end="103:41"><expr pos:start="103:41" pos:end="103:41"><name pos:start="103:41" pos:end="103:41">s</name></expr></argument>, <argument pos:start="103:44" pos:end="103:45"><expr pos:start="103:44" pos:end="103:45"><literal type="number" pos:start="103:44" pos:end="103:45">28</literal></expr></argument>, <argument pos:start="103:48" pos:end="103:54"><expr pos:start="103:48" pos:end="103:54"><name pos:start="103:48" pos:end="103:54">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <default pos:start="104:17" pos:end="104:24">default:</default>
                    <goto pos:start="105:21" pos:end="105:35">goto <name pos:start="105:26" pos:end="105:34">error_cmd</name>;</goto>
            <case pos:start="106:13" pos:end="106:19">case <expr pos:start="106:18" pos:end="106:18"><literal type="number" pos:start="106:18" pos:end="106:18">1</literal></expr>:</case> <comment type="block" pos:start="106:21" pos:end="106:43">/* changeable values */</comment>
                <goto pos:start="107:17" pos:end="107:31">goto <name pos:start="107:22" pos:end="107:30">error_cmd</name>;</goto>
            <case pos:start="108:13" pos:end="108:19">case <expr pos:start="108:18" pos:end="108:18"><literal type="number" pos:start="108:18" pos:end="108:18">2</literal></expr>:</case> <comment type="block" pos:start="108:21" pos:end="108:40">/* default values */</comment>
                <goto pos:start="109:17" pos:end="109:31">goto <name pos:start="109:22" pos:end="109:30">error_cmd</name>;</goto>
            <default pos:start="110:13" pos:end="110:20">default:</default>
            <case pos:start="111:13" pos:end="111:19">case <expr pos:start="111:18" pos:end="111:18"><literal type="number" pos:start="111:18" pos:end="111:18">3</literal></expr>:</case> <comment type="block" pos:start="111:21" pos:end="111:38">/* saved values */</comment>
                                    <expr_stmt pos:start="112:37" pos:end="112:71"><expr pos:start="112:37" pos:end="112:71"><name pos:start="112:37" pos:end="112:71">ASC_SAVING_PARAMETERS_NOT_SUPPORTED</name></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="112:73" pos:end="112:73">;</empty_stmt></switch>
    <case pos:start="113:5" pos:end="113:29">case <expr pos:start="113:10" pos:end="113:28"><name pos:start="113:10" pos:end="113:28">GPCMD_REQUEST_SENSE</name></expr>:</case>
        <expr_stmt pos:start="114:9" pos:end="114:28"><expr pos:start="114:9" pos:end="114:27"><name pos:start="114:9" pos:end="114:15">max_len</name> <operator pos:start="114:17" pos:end="114:17">=</operator> <name pos:start="114:19" pos:end="114:27"><name pos:start="114:19" pos:end="114:24">packet</name><index pos:start="114:25" pos:end="114:27">[<expr pos:start="114:26" pos:end="114:26"><literal type="number" pos:start="114:26" pos:end="114:26">4</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="115:9" pos:end="115:27"><expr pos:start="115:9" pos:end="115:26"><call pos:start="115:9" pos:end="115:26"><name pos:start="115:9" pos:end="115:14">memset</name><argument_list pos:start="115:15" pos:end="115:26">(<argument pos:start="115:16" pos:end="115:18"><expr pos:start="115:16" pos:end="115:18"><name pos:start="115:16" pos:end="115:18">buf</name></expr></argument>, <argument pos:start="115:21" pos:end="115:21"><expr pos:start="115:21" pos:end="115:21"><literal type="number" pos:start="115:21" pos:end="115:21">0</literal></expr></argument>, <argument pos:start="115:24" pos:end="115:25"><expr pos:start="115:24" pos:end="115:25"><literal type="number" pos:start="115:24" pos:end="115:25">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="116:9" pos:end="116:33"><expr pos:start="116:9" pos:end="116:32"><name pos:start="116:9" pos:end="116:14"><name pos:start="116:9" pos:end="116:11">buf</name><index pos:start="116:12" pos:end="116:14">[<expr pos:start="116:13" pos:end="116:13"><literal type="number" pos:start="116:13" pos:end="116:13">0</literal></expr>]</index></name> <operator pos:start="116:16" pos:end="116:16">=</operator> <literal type="number" pos:start="116:18" pos:end="116:21">0x70</literal> <operator pos:start="116:23" pos:end="116:23">|</operator> <operator pos:start="116:25" pos:end="116:25">(</operator><literal type="number" pos:start="116:26" pos:end="116:26">1</literal> <operator pos:start="116:28" pos:end="116:29">&lt;&lt;</operator> <literal type="number" pos:start="116:31" pos:end="116:31">7</literal><operator pos:start="116:32" pos:end="116:32">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="117:9" pos:end="117:30"><expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:11">buf</name><index pos:start="117:12" pos:end="117:14">[<expr pos:start="117:13" pos:end="117:13"><literal type="number" pos:start="117:13" pos:end="117:13">2</literal></expr>]</index></name> <operator pos:start="117:16" pos:end="117:16">=</operator> <name pos:start="117:18" pos:end="117:29"><name pos:start="117:18" pos:end="117:18">s</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:29">sense_key</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="118:9" pos:end="118:20"><expr pos:start="118:9" pos:end="118:19"><name pos:start="118:9" pos:end="118:14"><name pos:start="118:9" pos:end="118:11">buf</name><index pos:start="118:12" pos:end="118:14">[<expr pos:start="118:13" pos:end="118:13"><literal type="number" pos:start="118:13" pos:end="118:13">7</literal></expr>]</index></name> <operator pos:start="118:16" pos:end="118:16">=</operator> <literal type="number" pos:start="118:18" pos:end="118:19">10</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="119:9" pos:end="119:25"><expr pos:start="119:9" pos:end="119:24"><name pos:start="119:9" pos:end="119:15"><name pos:start="119:9" pos:end="119:11">buf</name><index pos:start="119:12" pos:end="119:15">[<expr pos:start="119:13" pos:end="119:14"><literal type="number" pos:start="119:13" pos:end="119:14">12</literal></expr>]</index></name> <operator pos:start="119:17" pos:end="119:17">=</operator> <name pos:start="119:19" pos:end="119:24"><name pos:start="119:19" pos:end="119:19">s</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:24">asc</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="120:9" pos:end="121:38"><if pos:start="120:9" pos:end="121:38">if <condition pos:start="120:12" pos:end="120:49">(<expr pos:start="120:13" pos:end="120:48"><name pos:start="120:13" pos:end="120:24"><name pos:start="120:13" pos:end="120:13">s</name><operator pos:start="120:14" pos:end="120:15">-&gt;</operator><name pos:start="120:16" pos:end="120:24">sense_key</name></name> <operator pos:start="120:26" pos:end="120:27">==</operator> <name pos:start="120:29" pos:end="120:48">SENSE_UNIT_ATTENTION</name></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:38"><block_content pos:start="121:13" pos:end="121:38">
            <expr_stmt pos:start="121:13" pos:end="121:38"><expr pos:start="121:13" pos:end="121:37"><name pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:24">sense_key</name></name> <operator pos:start="121:26" pos:end="121:26">=</operator> <name pos:start="121:28" pos:end="121:37">SENSE_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="122:9" pos:end="122:44"><expr pos:start="122:9" pos:end="122:43"><call pos:start="122:9" pos:end="122:43"><name pos:start="122:9" pos:end="122:27">ide_atapi_cmd_reply</name><argument_list pos:start="122:28" pos:end="122:43">(<argument pos:start="122:29" pos:end="122:29"><expr pos:start="122:29" pos:end="122:29"><name pos:start="122:29" pos:end="122:29">s</name></expr></argument>, <argument pos:start="122:32" pos:end="122:33"><expr pos:start="122:32" pos:end="122:33"><literal type="number" pos:start="122:32" pos:end="122:33">18</literal></expr></argument>, <argument pos:start="122:36" pos:end="122:42"><expr pos:start="122:36" pos:end="122:42"><name pos:start="122:36" pos:end="122:42">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="123:5" pos:end="123:44">case <expr pos:start="123:10" pos:end="123:43"><name pos:start="123:10" pos:end="123:43">GPCMD_PREVENT_ALLOW_MEDIUM_REMOVAL</name></expr>:</case>
        <if_stmt pos:start="124:9" pos:end="323:48"><if pos:start="124:9" pos:end="127:9">if <condition pos:start="124:12" pos:end="124:36">(<expr pos:start="124:13" pos:end="124:35"><call pos:start="124:13" pos:end="124:35"><name pos:start="124:13" pos:end="124:28">bdrv_is_inserted</name><argument_list pos:start="124:29" pos:end="124:35">(<argument pos:start="124:30" pos:end="124:34"><expr pos:start="124:30" pos:end="124:34"><name pos:start="124:30" pos:end="124:34"><name pos:start="124:30" pos:end="124:30">s</name><operator pos:start="124:31" pos:end="124:32">-&gt;</operator><name pos:start="124:33" pos:end="124:34">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="124:38" pos:end="127:9">{<block_content pos:start="125:13" pos:end="126:32">
            <expr_stmt pos:start="125:13" pos:end="125:50"><expr pos:start="125:13" pos:end="125:49"><call pos:start="125:13" pos:end="125:49"><name pos:start="125:13" pos:end="125:27">bdrv_set_locked</name><argument_list pos:start="125:28" pos:end="125:49">(<argument pos:start="125:29" pos:end="125:33"><expr pos:start="125:29" pos:end="125:33"><name pos:start="125:29" pos:end="125:33"><name pos:start="125:29" pos:end="125:29">s</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:33">bs</name></name></expr></argument>, <argument pos:start="125:36" pos:end="125:48"><expr pos:start="125:36" pos:end="125:48"><name pos:start="125:36" pos:end="125:44"><name pos:start="125:36" pos:end="125:41">packet</name><index pos:start="125:42" pos:end="125:44">[<expr pos:start="125:43" pos:end="125:43"><literal type="number" pos:start="125:43" pos:end="125:43">4</literal></expr>]</index></name> <operator pos:start="125:46" pos:end="125:46">&amp;</operator> <literal type="number" pos:start="125:48" pos:end="125:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="126:13" pos:end="126:32"><expr pos:start="126:13" pos:end="126:31"><call pos:start="126:13" pos:end="126:31"><name pos:start="126:13" pos:end="126:28">ide_atapi_cmd_ok</name><argument_list pos:start="126:29" pos:end="126:31">(<argument pos:start="126:30" pos:end="126:30"><expr pos:start="126:30" pos:end="126:30"><name pos:start="126:30" pos:end="126:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="127:11" pos:end="323:48">else <block pos:start="127:16" pos:end="323:48">{<block_content pos:start="128:13" pos:end="323:48">
            <expr_stmt pos:start="128:13" pos:end="129:56"><expr pos:start="128:13" pos:end="129:55"><call pos:start="128:13" pos:end="129:55"><name pos:start="128:13" pos:end="128:31">ide_atapi_cmd_error</name><argument_list pos:start="128:32" pos:end="129:55">(<argument pos:start="128:33" pos:end="128:33"><expr pos:start="128:33" pos:end="128:33"><name pos:start="128:33" pos:end="128:33">s</name></expr></argument>, <argument pos:start="128:36" pos:end="128:50"><expr pos:start="128:36" pos:end="128:50"><name pos:start="128:36" pos:end="128:50">SENSE_NOT_READY</name></expr></argument>,
                                <argument pos:start="129:33" pos:end="129:54"><expr pos:start="129:33" pos:end="129:54"><name pos:start="129:33" pos:end="129:54">ASC_MEDIUM_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="130:5" pos:end="130:23">case <expr pos:start="130:10" pos:end="130:22"><name pos:start="130:10" pos:end="130:22">GPCMD_READ_10</name></expr>:</case>
    <case pos:start="131:5" pos:end="131:23">case <expr pos:start="131:10" pos:end="131:22"><name pos:start="131:10" pos:end="131:22">GPCMD_READ_12</name></expr>:</case>
        <block pos:start="132:9" pos:end="323:48">{<block_content pos:start="133:13" pos:end="323:48">
            <decl_stmt pos:start="133:13" pos:end="133:32"><decl pos:start="133:13" pos:end="133:26"><type pos:start="133:13" pos:end="133:15"><name pos:start="133:13" pos:end="133:15">int</name></type> <name pos:start="133:17" pos:end="133:26">nb_sectors</name></decl>, <decl pos:start="133:29" pos:end="133:31"><type ref="prev" pos:start="133:13" pos:end="133:15"/><name pos:start="133:29" pos:end="133:31">lba</name></decl>;</decl_stmt>
            <if_stmt pos:start="134:13" pos:end="137:54"><if pos:start="134:13" pos:end="135:54">if <condition pos:start="134:16" pos:end="134:43">(<expr pos:start="134:17" pos:end="134:42"><name pos:start="134:17" pos:end="134:25"><name pos:start="134:17" pos:end="134:22">packet</name><index pos:start="134:23" pos:end="134:25">[<expr pos:start="134:24" pos:end="134:24"><literal type="number" pos:start="134:24" pos:end="134:24">0</literal></expr>]</index></name> <operator pos:start="134:27" pos:end="134:28">==</operator> <name pos:start="134:30" pos:end="134:42">GPCMD_READ_10</name></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:54"><block_content pos:start="135:17" pos:end="135:54">
                <expr_stmt pos:start="135:17" pos:end="135:54"><expr pos:start="135:17" pos:end="135:53"><name pos:start="135:17" pos:end="135:26">nb_sectors</name> <operator pos:start="135:28" pos:end="135:28">=</operator> <call pos:start="135:30" pos:end="135:53"><name pos:start="135:30" pos:end="135:41">ube16_to_cpu</name><argument_list pos:start="135:42" pos:end="135:53">(<argument pos:start="135:43" pos:end="135:52"><expr pos:start="135:43" pos:end="135:52"><name pos:start="135:43" pos:end="135:48">packet</name> <operator pos:start="135:50" pos:end="135:50">+</operator> <literal type="number" pos:start="135:52" pos:end="135:52">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="136:13" pos:end="137:54">else<block type="pseudo" pos:start="137:17" pos:end="137:54"><block_content pos:start="137:17" pos:end="137:54">
                <expr_stmt pos:start="137:17" pos:end="137:54"><expr pos:start="137:17" pos:end="137:53"><name pos:start="137:17" pos:end="137:26">nb_sectors</name> <operator pos:start="137:28" pos:end="137:28">=</operator> <call pos:start="137:30" pos:end="137:53"><name pos:start="137:30" pos:end="137:41">ube32_to_cpu</name><argument_list pos:start="137:42" pos:end="137:53">(<argument pos:start="137:43" pos:end="137:52"><expr pos:start="137:43" pos:end="137:52"><name pos:start="137:43" pos:end="137:48">packet</name> <operator pos:start="137:50" pos:end="137:50">+</operator> <literal type="number" pos:start="137:52" pos:end="137:52">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="138:13" pos:end="138:43"><expr pos:start="138:13" pos:end="138:42"><name pos:start="138:13" pos:end="138:15">lba</name> <operator pos:start="138:17" pos:end="138:17">=</operator> <call pos:start="138:19" pos:end="138:42"><name pos:start="138:19" pos:end="138:30">ube32_to_cpu</name><argument_list pos:start="138:31" pos:end="138:42">(<argument pos:start="138:32" pos:end="138:41"><expr pos:start="138:32" pos:end="138:41"><name pos:start="138:32" pos:end="138:37">packet</name> <operator pos:start="138:39" pos:end="138:39">+</operator> <literal type="number" pos:start="138:41" pos:end="138:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="139:13" pos:end="323:48"><if pos:start="139:13" pos:end="323:48">if <condition pos:start="139:16" pos:end="139:32">(<expr pos:start="139:17" pos:end="139:31"><name pos:start="139:17" pos:end="139:26">nb_sectors</name> <operator pos:start="139:28" pos:end="139:29">==</operator> <literal type="number" pos:start="139:31" pos:end="139:31">0</literal></expr>)</condition> <block pos:start="139:34" pos:end="323:48">{<block_content pos:start="140:17" pos:end="323:48">
                <expr_stmt pos:start="140:17" pos:end="140:36"><expr pos:start="140:17" pos:end="140:35"><call pos:start="140:17" pos:end="140:35"><name pos:start="140:17" pos:end="140:32">ide_atapi_cmd_ok</name><argument_list pos:start="140:33" pos:end="140:35">(<argument pos:start="140:34" pos:end="140:34"><expr pos:start="140:34" pos:end="140:34"><name pos:start="140:34" pos:end="140:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="141:13" pos:end="141:57"><expr pos:start="141:13" pos:end="141:56"><call pos:start="141:13" pos:end="141:56"><name pos:start="141:13" pos:end="141:30">ide_atapi_cmd_read</name><argument_list pos:start="141:31" pos:end="141:56">(<argument pos:start="141:32" pos:end="141:32"><expr pos:start="141:32" pos:end="141:32"><name pos:start="141:32" pos:end="141:32">s</name></expr></argument>, <argument pos:start="141:35" pos:end="141:37"><expr pos:start="141:35" pos:end="141:37"><name pos:start="141:35" pos:end="141:37">lba</name></expr></argument>, <argument pos:start="141:40" pos:end="141:49"><expr pos:start="141:40" pos:end="141:49"><name pos:start="141:40" pos:end="141:49">nb_sectors</name></expr></argument>, <argument pos:start="141:52" pos:end="141:55"><expr pos:start="141:52" pos:end="141:55"><literal type="number" pos:start="141:52" pos:end="141:55">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="142:5" pos:end="142:23">case <expr pos:start="142:10" pos:end="142:22"><name pos:start="142:10" pos:end="142:22">GPCMD_READ_CD</name></expr>:</case>
        <block pos:start="143:9" pos:end="323:48">{<block_content pos:start="144:13" pos:end="323:48">
            <decl_stmt pos:start="144:13" pos:end="144:50"><decl pos:start="144:13" pos:end="144:26"><type pos:start="144:13" pos:end="144:15"><name pos:start="144:13" pos:end="144:15">int</name></type> <name pos:start="144:17" pos:end="144:26">nb_sectors</name></decl>, <decl pos:start="144:29" pos:end="144:31"><type ref="prev" pos:start="144:13" pos:end="144:15"/><name pos:start="144:29" pos:end="144:31">lba</name></decl>, <decl pos:start="144:34" pos:end="144:49"><type ref="prev" pos:start="144:13" pos:end="144:15"/><name pos:start="144:34" pos:end="144:49">transfer_request</name></decl>;</decl_stmt>
            <expr_stmt pos:start="145:13" pos:end="145:74"><expr pos:start="145:13" pos:end="145:73"><name pos:start="145:13" pos:end="145:22">nb_sectors</name> <operator pos:start="145:24" pos:end="145:24">=</operator> <operator pos:start="145:26" pos:end="145:26">(</operator><name pos:start="145:27" pos:end="145:35"><name pos:start="145:27" pos:end="145:32">packet</name><index pos:start="145:33" pos:end="145:35">[<expr pos:start="145:34" pos:end="145:34"><literal type="number" pos:start="145:34" pos:end="145:34">6</literal></expr>]</index></name> <operator pos:start="145:37" pos:end="145:38">&lt;&lt;</operator> <literal type="number" pos:start="145:40" pos:end="145:41">16</literal><operator pos:start="145:42" pos:end="145:42">)</operator> <operator pos:start="145:44" pos:end="145:44">|</operator> <operator pos:start="145:46" pos:end="145:46">(</operator><name pos:start="145:47" pos:end="145:55"><name pos:start="145:47" pos:end="145:52">packet</name><index pos:start="145:53" pos:end="145:55">[<expr pos:start="145:54" pos:end="145:54"><literal type="number" pos:start="145:54" pos:end="145:54">7</literal></expr>]</index></name> <operator pos:start="145:57" pos:end="145:58">&lt;&lt;</operator> <literal type="number" pos:start="145:60" pos:end="145:60">8</literal><operator pos:start="145:61" pos:end="145:61">)</operator> <operator pos:start="145:63" pos:end="145:63">|</operator> <name pos:start="145:65" pos:end="145:73"><name pos:start="145:65" pos:end="145:70">packet</name><index pos:start="145:71" pos:end="145:73">[<expr pos:start="145:72" pos:end="145:72"><literal type="number" pos:start="145:72" pos:end="145:72">8</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="146:13" pos:end="146:43"><expr pos:start="146:13" pos:end="146:42"><name pos:start="146:13" pos:end="146:15">lba</name> <operator pos:start="146:17" pos:end="146:17">=</operator> <call pos:start="146:19" pos:end="146:42"><name pos:start="146:19" pos:end="146:30">ube32_to_cpu</name><argument_list pos:start="146:31" pos:end="146:42">(<argument pos:start="146:32" pos:end="146:41"><expr pos:start="146:32" pos:end="146:41"><name pos:start="146:32" pos:end="146:37">packet</name> <operator pos:start="146:39" pos:end="146:39">+</operator> <literal type="number" pos:start="146:41" pos:end="146:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="147:13" pos:end="323:48"><if pos:start="147:13" pos:end="323:48">if <condition pos:start="147:16" pos:end="147:32">(<expr pos:start="147:17" pos:end="147:31"><name pos:start="147:17" pos:end="147:26">nb_sectors</name> <operator pos:start="147:28" pos:end="147:29">==</operator> <literal type="number" pos:start="147:31" pos:end="147:31">0</literal></expr>)</condition> <block pos:start="147:34" pos:end="323:48">{<block_content pos:start="148:17" pos:end="323:48">
                <expr_stmt pos:start="148:17" pos:end="148:36"><expr pos:start="148:17" pos:end="148:35"><call pos:start="148:17" pos:end="148:35"><name pos:start="148:17" pos:end="148:32">ide_atapi_cmd_ok</name><argument_list pos:start="148:33" pos:end="148:35">(<argument pos:start="148:34" pos:end="148:34"><expr pos:start="148:34" pos:end="148:34"><name pos:start="148:34" pos:end="148:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="149:13" pos:end="149:41"><expr pos:start="149:13" pos:end="149:40"><name pos:start="149:13" pos:end="149:28">transfer_request</name> <operator pos:start="149:30" pos:end="149:30">=</operator> <name pos:start="149:32" pos:end="149:40"><name pos:start="149:32" pos:end="149:37">packet</name><index pos:start="149:38" pos:end="149:40">[<expr pos:start="149:39" pos:end="149:39"><literal type="number" pos:start="149:39" pos:end="149:39">9</literal></expr>]</index></name></expr>;</expr_stmt>
            <switch pos:start="150:13" pos:end="323:48">switch<condition pos:start="150:19" pos:end="150:43">(<expr pos:start="150:20" pos:end="150:42"><name pos:start="150:20" pos:end="150:35">transfer_request</name> <operator pos:start="150:37" pos:end="150:37">&amp;</operator> <literal type="number" pos:start="150:39" pos:end="150:42">0xf8</literal></expr>)</condition> <block pos:start="150:45" pos:end="323:48">{<block_content pos:start="151:13" pos:end="323:48">
            <case pos:start="151:13" pos:end="151:22">case <expr pos:start="151:18" pos:end="151:21"><literal type="number" pos:start="151:18" pos:end="151:21">0x00</literal></expr>:</case>
                <comment type="block" pos:start="152:17" pos:end="152:29">/* nothing */</comment>
                <expr_stmt pos:start="153:17" pos:end="153:36"><expr pos:start="153:17" pos:end="153:35"><call pos:start="153:17" pos:end="153:35"><name pos:start="153:17" pos:end="153:32">ide_atapi_cmd_ok</name><argument_list pos:start="153:33" pos:end="153:35">(<argument pos:start="153:34" pos:end="153:34"><expr pos:start="153:34" pos:end="153:34"><name pos:start="153:34" pos:end="153:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="154:13" pos:end="154:22">case <expr pos:start="154:18" pos:end="154:21"><literal type="number" pos:start="154:18" pos:end="154:21">0x10</literal></expr>:</case>
                <comment type="block" pos:start="155:17" pos:end="155:33">/* normal read */</comment>
                <expr_stmt pos:start="156:17" pos:end="156:61"><expr pos:start="156:17" pos:end="156:60"><call pos:start="156:17" pos:end="156:60"><name pos:start="156:17" pos:end="156:34">ide_atapi_cmd_read</name><argument_list pos:start="156:35" pos:end="156:60">(<argument pos:start="156:36" pos:end="156:36"><expr pos:start="156:36" pos:end="156:36"><name pos:start="156:36" pos:end="156:36">s</name></expr></argument>, <argument pos:start="156:39" pos:end="156:41"><expr pos:start="156:39" pos:end="156:41"><name pos:start="156:39" pos:end="156:41">lba</name></expr></argument>, <argument pos:start="156:44" pos:end="156:53"><expr pos:start="156:44" pos:end="156:53"><name pos:start="156:44" pos:end="156:53">nb_sectors</name></expr></argument>, <argument pos:start="156:56" pos:end="156:59"><expr pos:start="156:56" pos:end="156:59"><literal type="number" pos:start="156:56" pos:end="156:59">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="157:13" pos:end="157:22">case <expr pos:start="157:18" pos:end="157:21"><literal type="number" pos:start="157:18" pos:end="157:21">0xf8</literal></expr>:</case>
                <comment type="block" pos:start="158:17" pos:end="158:35">/* read all data */</comment>
                <expr_stmt pos:start="159:17" pos:end="159:61"><expr pos:start="159:17" pos:end="159:60"><call pos:start="159:17" pos:end="159:60"><name pos:start="159:17" pos:end="159:34">ide_atapi_cmd_read</name><argument_list pos:start="159:35" pos:end="159:60">(<argument pos:start="159:36" pos:end="159:36"><expr pos:start="159:36" pos:end="159:36"><name pos:start="159:36" pos:end="159:36">s</name></expr></argument>, <argument pos:start="159:39" pos:end="159:41"><expr pos:start="159:39" pos:end="159:41"><name pos:start="159:39" pos:end="159:41">lba</name></expr></argument>, <argument pos:start="159:44" pos:end="159:53"><expr pos:start="159:44" pos:end="159:53"><name pos:start="159:44" pos:end="159:53">nb_sectors</name></expr></argument>, <argument pos:start="159:56" pos:end="159:59"><expr pos:start="159:56" pos:end="159:59"><literal type="number" pos:start="159:56" pos:end="159:59">2352</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <default pos:start="160:13" pos:end="160:20">default:</default>
    <case pos:start="161:5" pos:end="161:20">case <expr pos:start="161:10" pos:end="161:19"><name pos:start="161:10" pos:end="161:19">GPCMD_SEEK</name></expr>:</case>
        <block pos:start="162:9" pos:end="323:48">{<block_content pos:start="163:13" pos:end="323:48">
            <decl_stmt pos:start="163:13" pos:end="163:29"><decl pos:start="163:13" pos:end="163:28"><type pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:20">unsigned</name> <name pos:start="163:22" pos:end="163:24">int</name></type> <name pos:start="163:26" pos:end="163:28">lba</name></decl>;</decl_stmt>
            <decl_stmt pos:start="164:13" pos:end="164:35"><decl pos:start="164:13" pos:end="164:34"><type pos:start="164:13" pos:end="164:20"><name pos:start="164:13" pos:end="164:20">uint64_t</name></type> <name pos:start="164:22" pos:end="164:34">total_sectors</name></decl>;</decl_stmt>
            <expr_stmt pos:start="165:13" pos:end="165:53"><expr pos:start="165:13" pos:end="165:52"><call pos:start="165:13" pos:end="165:52"><name pos:start="165:13" pos:end="165:29">bdrv_get_geometry</name><argument_list pos:start="165:30" pos:end="165:52">(<argument pos:start="165:31" pos:end="165:35"><expr pos:start="165:31" pos:end="165:35"><name pos:start="165:31" pos:end="165:35"><name pos:start="165:31" pos:end="165:31">s</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:35">bs</name></name></expr></argument>, <argument pos:start="165:38" pos:end="165:51"><expr pos:start="165:38" pos:end="165:51"><operator pos:start="165:38" pos:end="165:38">&amp;</operator><name pos:start="165:39" pos:end="165:51">total_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="166:13" pos:end="166:32"><expr pos:start="166:13" pos:end="166:31"><name pos:start="166:13" pos:end="166:25">total_sectors</name> <operator pos:start="166:27" pos:end="166:29">&gt;&gt;=</operator> <literal type="number" pos:start="166:31" pos:end="166:31">2</literal></expr>;</expr_stmt>
            <if_stmt pos:start="167:13" pos:end="323:48"><if pos:start="167:13" pos:end="323:48">if <condition pos:start="167:16" pos:end="167:35">(<expr pos:start="167:17" pos:end="167:34"><name pos:start="167:17" pos:end="167:29">total_sectors</name> <operator pos:start="167:31" pos:end="167:32">==</operator> <literal type="number" pos:start="167:34" pos:end="167:34">0</literal></expr>)</condition> <block pos:start="167:37" pos:end="323:48">{<block_content pos:start="168:17" pos:end="323:48">
                <expr_stmt pos:start="168:17" pos:end="169:60"><expr pos:start="168:17" pos:end="169:59"><call pos:start="168:17" pos:end="169:59"><name pos:start="168:17" pos:end="168:35">ide_atapi_cmd_error</name><argument_list pos:start="168:36" pos:end="169:59">(<argument pos:start="168:37" pos:end="168:37"><expr pos:start="168:37" pos:end="168:37"><name pos:start="168:37" pos:end="168:37">s</name></expr></argument>, <argument pos:start="168:40" pos:end="168:54"><expr pos:start="168:40" pos:end="168:54"><name pos:start="168:40" pos:end="168:54">SENSE_NOT_READY</name></expr></argument>,
                                    <argument pos:start="169:37" pos:end="169:58"><expr pos:start="169:37" pos:end="169:58"><name pos:start="169:37" pos:end="169:58">ASC_MEDIUM_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="170:13" pos:end="170:43"><expr pos:start="170:13" pos:end="170:42"><name pos:start="170:13" pos:end="170:15">lba</name> <operator pos:start="170:17" pos:end="170:17">=</operator> <call pos:start="170:19" pos:end="170:42"><name pos:start="170:19" pos:end="170:30">ube32_to_cpu</name><argument_list pos:start="170:31" pos:end="170:42">(<argument pos:start="170:32" pos:end="170:41"><expr pos:start="170:32" pos:end="170:41"><name pos:start="170:32" pos:end="170:37">packet</name> <operator pos:start="170:39" pos:end="170:39">+</operator> <literal type="number" pos:start="170:41" pos:end="170:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="171:13" pos:end="172:59"><if pos:start="171:13" pos:end="172:59">if <condition pos:start="171:16" pos:end="171:37">(<expr pos:start="171:17" pos:end="171:36"><name pos:start="171:17" pos:end="171:19">lba</name> <operator pos:start="171:21" pos:end="171:22">&gt;=</operator> <name pos:start="171:24" pos:end="171:36">total_sectors</name></expr>)</condition> <block pos:start="171:39" pos:end="172:58">{<block_content pos:start="172:37" pos:end="172:58">
                                    <expr_stmt pos:start="172:37" pos:end="172:57"><expr pos:start="172:37" pos:end="172:57"><name pos:start="172:37" pos:end="172:57">ASC_LOGICAL_BLOCK_OOR</name></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="172:59" pos:end="172:59">;</empty_stmt></if></if_stmt>
            <expr_stmt pos:start="173:13" pos:end="173:32"><expr pos:start="173:13" pos:end="173:31"><call pos:start="173:13" pos:end="173:31"><name pos:start="173:13" pos:end="173:28">ide_atapi_cmd_ok</name><argument_list pos:start="173:29" pos:end="173:31">(<argument pos:start="173:30" pos:end="173:30"><expr pos:start="173:30" pos:end="173:30"><name pos:start="173:30" pos:end="173:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="174:5" pos:end="174:31">case <expr pos:start="174:10" pos:end="174:30"><name pos:start="174:10" pos:end="174:30">GPCMD_START_STOP_UNIT</name></expr>:</case>
        <block pos:start="175:9" pos:end="323:48">{<block_content pos:start="176:13" pos:end="323:48">
            <decl_stmt pos:start="176:13" pos:end="176:38"><decl pos:start="176:13" pos:end="176:21"><type pos:start="176:13" pos:end="176:15"><name pos:start="176:13" pos:end="176:15">int</name></type> <name pos:start="176:17" pos:end="176:21">start</name></decl>, <decl pos:start="176:24" pos:end="176:28"><type ref="prev" pos:start="176:13" pos:end="176:15"/><name pos:start="176:24" pos:end="176:28">eject</name></decl>, <decl pos:start="176:31" pos:end="176:37"><type ref="prev" pos:start="176:13" pos:end="176:15"/><name pos:start="176:31" pos:end="176:33">err</name> <init pos:start="176:35" pos:end="176:37">= <expr pos:start="176:37" pos:end="176:37"><literal type="number" pos:start="176:37" pos:end="176:37">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="177:13" pos:end="177:34"><expr pos:start="177:13" pos:end="177:33"><name pos:start="177:13" pos:end="177:17">start</name> <operator pos:start="177:19" pos:end="177:19">=</operator> <name pos:start="177:21" pos:end="177:29"><name pos:start="177:21" pos:end="177:26">packet</name><index pos:start="177:27" pos:end="177:29">[<expr pos:start="177:28" pos:end="177:28"><literal type="number" pos:start="177:28" pos:end="177:28">4</literal></expr>]</index></name> <operator pos:start="177:31" pos:end="177:31">&amp;</operator> <literal type="number" pos:start="177:33" pos:end="177:33">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="178:13" pos:end="178:41"><expr pos:start="178:13" pos:end="178:40"><name pos:start="178:13" pos:end="178:17">eject</name> <operator pos:start="178:19" pos:end="178:19">=</operator> <operator pos:start="178:21" pos:end="178:21">(</operator><name pos:start="178:22" pos:end="178:30"><name pos:start="178:22" pos:end="178:27">packet</name><index pos:start="178:28" pos:end="178:30">[<expr pos:start="178:29" pos:end="178:29"><literal type="number" pos:start="178:29" pos:end="178:29">4</literal></expr>]</index></name> <operator pos:start="178:32" pos:end="178:33">&gt;&gt;</operator> <literal type="number" pos:start="178:35" pos:end="178:35">1</literal><operator pos:start="178:36" pos:end="178:36">)</operator> <operator pos:start="178:38" pos:end="178:38">&amp;</operator> <literal type="number" pos:start="178:40" pos:end="178:40">1</literal></expr>;</expr_stmt>
            <if_stmt pos:start="179:13" pos:end="323:48"><if pos:start="179:13" pos:end="323:48">if <condition pos:start="179:16" pos:end="179:22">(<expr pos:start="179:17" pos:end="179:21"><name pos:start="179:17" pos:end="179:21">eject</name></expr>)</condition> <block pos:start="179:24" pos:end="323:48">{<block_content pos:start="180:17" pos:end="323:48">
                <expr_stmt pos:start="180:17" pos:end="180:48"><expr pos:start="180:17" pos:end="180:47"><name pos:start="180:17" pos:end="180:19">err</name> <operator pos:start="180:21" pos:end="180:21">=</operator> <call pos:start="180:23" pos:end="180:47"><name pos:start="180:23" pos:end="180:32">bdrv_eject</name><argument_list pos:start="180:33" pos:end="180:47">(<argument pos:start="180:34" pos:end="180:38"><expr pos:start="180:34" pos:end="180:38"><name pos:start="180:34" pos:end="180:38"><name pos:start="180:34" pos:end="180:34">s</name><operator pos:start="180:35" pos:end="180:36">-&gt;</operator><name pos:start="180:37" pos:end="180:38">bs</name></name></expr></argument>, <argument pos:start="180:41" pos:end="180:46"><expr pos:start="180:41" pos:end="180:46"><operator pos:start="180:41" pos:end="180:41">!</operator><name pos:start="180:42" pos:end="180:46">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="181:13" pos:end="323:48">switch <condition pos:start="181:20" pos:end="181:24">(<expr pos:start="181:21" pos:end="181:23"><name pos:start="181:21" pos:end="181:23">err</name></expr>)</condition> <block pos:start="181:26" pos:end="323:48">{<block_content pos:start="182:13" pos:end="323:48">
            <case pos:start="182:13" pos:end="182:19">case <expr pos:start="182:18" pos:end="182:18"><literal type="number" pos:start="182:18" pos:end="182:18">0</literal></expr>:</case>
                <expr_stmt pos:start="183:17" pos:end="183:36"><expr pos:start="183:17" pos:end="183:35"><call pos:start="183:17" pos:end="183:35"><name pos:start="183:17" pos:end="183:32">ide_atapi_cmd_ok</name><argument_list pos:start="183:33" pos:end="183:35">(<argument pos:start="183:34" pos:end="183:34"><expr pos:start="183:34" pos:end="183:34"><name pos:start="183:34" pos:end="183:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="184:13" pos:end="184:24">case <expr pos:start="184:18" pos:end="184:23"><operator pos:start="184:18" pos:end="184:18">-</operator><name pos:start="184:19" pos:end="184:23">EBUSY</name></expr>:</case>
                <expr_stmt pos:start="185:17" pos:end="186:65"><expr pos:start="185:17" pos:end="186:64"><call pos:start="185:17" pos:end="186:64"><name pos:start="185:17" pos:end="185:35">ide_atapi_cmd_error</name><argument_list pos:start="185:36" pos:end="186:64">(<argument pos:start="185:37" pos:end="185:37"><expr pos:start="185:37" pos:end="185:37"><name pos:start="185:37" pos:end="185:37">s</name></expr></argument>, <argument pos:start="185:40" pos:end="185:54"><expr pos:start="185:40" pos:end="185:54"><name pos:start="185:40" pos:end="185:54">SENSE_NOT_READY</name></expr></argument>,
                                    <argument pos:start="186:37" pos:end="186:63"><expr pos:start="186:37" pos:end="186:63"><name pos:start="186:37" pos:end="186:63">ASC_MEDIA_REMOVAL_PREVENTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <default pos:start="187:13" pos:end="187:20">default:</default>
                <expr_stmt pos:start="188:17" pos:end="189:60"><expr pos:start="188:17" pos:end="189:59"><call pos:start="188:17" pos:end="189:59"><name pos:start="188:17" pos:end="188:35">ide_atapi_cmd_error</name><argument_list pos:start="188:36" pos:end="189:59">(<argument pos:start="188:37" pos:end="188:37"><expr pos:start="188:37" pos:end="188:37"><name pos:start="188:37" pos:end="188:37">s</name></expr></argument>, <argument pos:start="188:40" pos:end="188:54"><expr pos:start="188:40" pos:end="188:54"><name pos:start="188:40" pos:end="188:54">SENSE_NOT_READY</name></expr></argument>,
                                    <argument pos:start="189:37" pos:end="189:58"><expr pos:start="189:37" pos:end="189:58"><name pos:start="189:37" pos:end="189:58">ASC_MEDIUM_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="190:5" pos:end="190:32">case <expr pos:start="190:10" pos:end="190:31"><name pos:start="190:10" pos:end="190:31">GPCMD_MECHANISM_STATUS</name></expr>:</case>
        <block pos:start="191:9" pos:end="323:48">{<block_content pos:start="192:13" pos:end="323:48">
            <expr_stmt pos:start="192:13" pos:end="192:47"><expr pos:start="192:13" pos:end="192:46"><name pos:start="192:13" pos:end="192:19">max_len</name> <operator pos:start="192:21" pos:end="192:21">=</operator> <call pos:start="192:23" pos:end="192:46"><name pos:start="192:23" pos:end="192:34">ube16_to_cpu</name><argument_list pos:start="192:35" pos:end="192:46">(<argument pos:start="192:36" pos:end="192:45"><expr pos:start="192:36" pos:end="192:45"><name pos:start="192:36" pos:end="192:41">packet</name> <operator pos:start="192:43" pos:end="192:43">+</operator> <literal type="number" pos:start="192:45" pos:end="192:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="193:13" pos:end="193:33"><expr pos:start="193:13" pos:end="193:32"><call pos:start="193:13" pos:end="193:32"><name pos:start="193:13" pos:end="193:24">cpu_to_ube16</name><argument_list pos:start="193:25" pos:end="193:32">(<argument pos:start="193:26" pos:end="193:28"><expr pos:start="193:26" pos:end="193:28"><name pos:start="193:26" pos:end="193:28">buf</name></expr></argument>, <argument pos:start="193:31" pos:end="193:31"><expr pos:start="193:31" pos:end="193:31"><literal type="number" pos:start="193:31" pos:end="193:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="194:13" pos:end="194:32">/* no current LBA */</comment>
            <expr_stmt pos:start="195:13" pos:end="195:23"><expr pos:start="195:13" pos:end="195:22"><name pos:start="195:13" pos:end="195:18"><name pos:start="195:13" pos:end="195:15">buf</name><index pos:start="195:16" pos:end="195:18">[<expr pos:start="195:17" pos:end="195:17"><literal type="number" pos:start="195:17" pos:end="195:17">2</literal></expr>]</index></name> <operator pos:start="195:20" pos:end="195:20">=</operator> <literal type="number" pos:start="195:22" pos:end="195:22">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="196:13" pos:end="196:23"><expr pos:start="196:13" pos:end="196:22"><name pos:start="196:13" pos:end="196:18"><name pos:start="196:13" pos:end="196:15">buf</name><index pos:start="196:16" pos:end="196:18">[<expr pos:start="196:17" pos:end="196:17"><literal type="number" pos:start="196:17" pos:end="196:17">3</literal></expr>]</index></name> <operator pos:start="196:20" pos:end="196:20">=</operator> <literal type="number" pos:start="196:22" pos:end="196:22">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="197:13" pos:end="197:23"><expr pos:start="197:13" pos:end="197:22"><name pos:start="197:13" pos:end="197:18"><name pos:start="197:13" pos:end="197:15">buf</name><index pos:start="197:16" pos:end="197:18">[<expr pos:start="197:17" pos:end="197:17"><literal type="number" pos:start="197:17" pos:end="197:17">4</literal></expr>]</index></name> <operator pos:start="197:20" pos:end="197:20">=</operator> <literal type="number" pos:start="197:22" pos:end="197:22">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="198:13" pos:end="198:23"><expr pos:start="198:13" pos:end="198:22"><name pos:start="198:13" pos:end="198:18"><name pos:start="198:13" pos:end="198:15">buf</name><index pos:start="198:16" pos:end="198:18">[<expr pos:start="198:17" pos:end="198:17"><literal type="number" pos:start="198:17" pos:end="198:17">5</literal></expr>]</index></name> <operator pos:start="198:20" pos:end="198:20">=</operator> <literal type="number" pos:start="198:22" pos:end="198:22">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="199:13" pos:end="199:37"><expr pos:start="199:13" pos:end="199:36"><call pos:start="199:13" pos:end="199:36"><name pos:start="199:13" pos:end="199:24">cpu_to_ube16</name><argument_list pos:start="199:25" pos:end="199:36">(<argument pos:start="199:26" pos:end="199:32"><expr pos:start="199:26" pos:end="199:32"><name pos:start="199:26" pos:end="199:28">buf</name> <operator pos:start="199:30" pos:end="199:30">+</operator> <literal type="number" pos:start="199:32" pos:end="199:32">6</literal></expr></argument>, <argument pos:start="199:35" pos:end="199:35"><expr pos:start="199:35" pos:end="199:35"><literal type="number" pos:start="199:35" pos:end="199:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="200:13" pos:end="200:47"><expr pos:start="200:13" pos:end="200:46"><call pos:start="200:13" pos:end="200:46"><name pos:start="200:13" pos:end="200:31">ide_atapi_cmd_reply</name><argument_list pos:start="200:32" pos:end="200:46">(<argument pos:start="200:33" pos:end="200:33"><expr pos:start="200:33" pos:end="200:33"><name pos:start="200:33" pos:end="200:33">s</name></expr></argument>, <argument pos:start="200:36" pos:end="200:36"><expr pos:start="200:36" pos:end="200:36"><literal type="number" pos:start="200:36" pos:end="200:36">8</literal></expr></argument>, <argument pos:start="200:39" pos:end="200:45"><expr pos:start="200:39" pos:end="200:45"><name pos:start="200:39" pos:end="200:45">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="201:5" pos:end="201:33">case <expr pos:start="201:10" pos:end="201:32"><name pos:start="201:10" pos:end="201:32">GPCMD_READ_TOC_PMA_ATIP</name></expr>:</case>
        <block pos:start="202:9" pos:end="323:48">{<block_content pos:start="203:13" pos:end="323:48">
            <decl_stmt pos:start="203:13" pos:end="203:46"><decl pos:start="203:13" pos:end="203:22"><type pos:start="203:13" pos:end="203:15"><name pos:start="203:13" pos:end="203:15">int</name></type> <name pos:start="203:17" pos:end="203:22">format</name></decl>, <decl pos:start="203:25" pos:end="203:27"><type ref="prev" pos:start="203:13" pos:end="203:15"/><name pos:start="203:25" pos:end="203:27">msf</name></decl>, <decl pos:start="203:30" pos:end="203:40"><type ref="prev" pos:start="203:13" pos:end="203:15"/><name pos:start="203:30" pos:end="203:40">start_track</name></decl>, <decl pos:start="203:43" pos:end="203:45"><type ref="prev" pos:start="203:13" pos:end="203:15"/><name pos:start="203:43" pos:end="203:45">len</name></decl>;</decl_stmt>
            <decl_stmt pos:start="204:13" pos:end="204:35"><decl pos:start="204:13" pos:end="204:34"><type pos:start="204:13" pos:end="204:20"><name pos:start="204:13" pos:end="204:20">uint64_t</name></type> <name pos:start="204:22" pos:end="204:34">total_sectors</name></decl>;</decl_stmt>
            <expr_stmt pos:start="205:13" pos:end="205:53"><expr pos:start="205:13" pos:end="205:52"><call pos:start="205:13" pos:end="205:52"><name pos:start="205:13" pos:end="205:29">bdrv_get_geometry</name><argument_list pos:start="205:30" pos:end="205:52">(<argument pos:start="205:31" pos:end="205:35"><expr pos:start="205:31" pos:end="205:35"><name pos:start="205:31" pos:end="205:35"><name pos:start="205:31" pos:end="205:31">s</name><operator pos:start="205:32" pos:end="205:33">-&gt;</operator><name pos:start="205:34" pos:end="205:35">bs</name></name></expr></argument>, <argument pos:start="205:38" pos:end="205:51"><expr pos:start="205:38" pos:end="205:51"><operator pos:start="205:38" pos:end="205:38">&amp;</operator><name pos:start="205:39" pos:end="205:51">total_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="206:13" pos:end="206:32"><expr pos:start="206:13" pos:end="206:31"><name pos:start="206:13" pos:end="206:25">total_sectors</name> <operator pos:start="206:27" pos:end="206:29">&gt;&gt;=</operator> <literal type="number" pos:start="206:31" pos:end="206:31">2</literal></expr>;</expr_stmt>
            <if_stmt pos:start="207:13" pos:end="323:48"><if pos:start="207:13" pos:end="323:48">if <condition pos:start="207:16" pos:end="207:35">(<expr pos:start="207:17" pos:end="207:34"><name pos:start="207:17" pos:end="207:29">total_sectors</name> <operator pos:start="207:31" pos:end="207:32">==</operator> <literal type="number" pos:start="207:34" pos:end="207:34">0</literal></expr>)</condition> <block pos:start="207:37" pos:end="323:48">{<block_content pos:start="208:17" pos:end="323:48">
                <expr_stmt pos:start="208:17" pos:end="209:60"><expr pos:start="208:17" pos:end="209:59"><call pos:start="208:17" pos:end="209:59"><name pos:start="208:17" pos:end="208:35">ide_atapi_cmd_error</name><argument_list pos:start="208:36" pos:end="209:59">(<argument pos:start="208:37" pos:end="208:37"><expr pos:start="208:37" pos:end="208:37"><name pos:start="208:37" pos:end="208:37">s</name></expr></argument>, <argument pos:start="208:40" pos:end="208:54"><expr pos:start="208:40" pos:end="208:54"><name pos:start="208:40" pos:end="208:54">SENSE_NOT_READY</name></expr></argument>,
                                    <argument pos:start="209:37" pos:end="209:58"><expr pos:start="209:37" pos:end="209:58"><name pos:start="209:37" pos:end="209:58">ASC_MEDIUM_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="210:13" pos:end="210:36"><expr pos:start="210:13" pos:end="210:35"><name pos:start="210:13" pos:end="210:18">format</name> <operator pos:start="210:20" pos:end="210:20">=</operator> <name pos:start="210:22" pos:end="210:30"><name pos:start="210:22" pos:end="210:27">packet</name><index pos:start="210:28" pos:end="210:30">[<expr pos:start="210:29" pos:end="210:29"><literal type="number" pos:start="210:29" pos:end="210:29">9</literal></expr>]</index></name> <operator pos:start="210:32" pos:end="210:33">&gt;&gt;</operator> <literal type="number" pos:start="210:35" pos:end="210:35">6</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="211:13" pos:end="211:39"><expr pos:start="211:13" pos:end="211:38"><name pos:start="211:13" pos:end="211:15">msf</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <operator pos:start="211:19" pos:end="211:19">(</operator><name pos:start="211:20" pos:end="211:28"><name pos:start="211:20" pos:end="211:25">packet</name><index pos:start="211:26" pos:end="211:28">[<expr pos:start="211:27" pos:end="211:27"><literal type="number" pos:start="211:27" pos:end="211:27">1</literal></expr>]</index></name> <operator pos:start="211:30" pos:end="211:31">&gt;&gt;</operator> <literal type="number" pos:start="211:33" pos:end="211:33">1</literal><operator pos:start="211:34" pos:end="211:34">)</operator> <operator pos:start="211:36" pos:end="211:36">&amp;</operator> <literal type="number" pos:start="211:38" pos:end="211:38">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="212:13" pos:end="212:36"><expr pos:start="212:13" pos:end="212:35"><name pos:start="212:13" pos:end="212:23">start_track</name> <operator pos:start="212:25" pos:end="212:25">=</operator> <name pos:start="212:27" pos:end="212:35"><name pos:start="212:27" pos:end="212:32">packet</name><index pos:start="212:33" pos:end="212:35">[<expr pos:start="212:34" pos:end="212:34"><literal type="number" pos:start="212:34" pos:end="212:34">6</literal></expr>]</index></name></expr>;</expr_stmt>
            <switch pos:start="213:13" pos:end="323:48">switch<condition pos:start="213:19" pos:end="213:26">(<expr pos:start="213:20" pos:end="213:25"><name pos:start="213:20" pos:end="213:25">format</name></expr>)</condition> <block pos:start="213:28" pos:end="323:48">{<block_content pos:start="214:13" pos:end="323:48">
            <case pos:start="214:13" pos:end="214:19">case <expr pos:start="214:18" pos:end="214:18"><literal type="number" pos:start="214:18" pos:end="214:18">0</literal></expr>:</case>
                <expr_stmt pos:start="215:17" pos:end="215:75"><expr pos:start="215:17" pos:end="215:74"><name pos:start="215:17" pos:end="215:19">len</name> <operator pos:start="215:21" pos:end="215:21">=</operator> <call pos:start="215:23" pos:end="215:74"><name pos:start="215:23" pos:end="215:36">cdrom_read_toc</name><argument_list pos:start="215:37" pos:end="215:74">(<argument pos:start="215:38" pos:end="215:50"><expr pos:start="215:38" pos:end="215:50"><name pos:start="215:38" pos:end="215:50">total_sectors</name></expr></argument>, <argument pos:start="215:53" pos:end="215:55"><expr pos:start="215:53" pos:end="215:55"><name pos:start="215:53" pos:end="215:55">buf</name></expr></argument>, <argument pos:start="215:58" pos:end="215:60"><expr pos:start="215:58" pos:end="215:60"><name pos:start="215:58" pos:end="215:60">msf</name></expr></argument>, <argument pos:start="215:63" pos:end="215:73"><expr pos:start="215:63" pos:end="215:73"><name pos:start="215:63" pos:end="215:73">start_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="216:17" pos:end="217:35"><if pos:start="216:17" pos:end="217:35">if <condition pos:start="216:20" pos:end="216:28">(<expr pos:start="216:21" pos:end="216:27"><name pos:start="216:21" pos:end="216:23">len</name> <operator pos:start="216:25" pos:end="216:25">&lt;</operator> <literal type="number" pos:start="216:27" pos:end="216:27">0</literal></expr>)</condition><block type="pseudo" pos:start="217:21" pos:end="217:35"><block_content pos:start="217:21" pos:end="217:35">
                    <goto pos:start="217:21" pos:end="217:35">goto <name pos:start="217:26" pos:end="217:34">error_cmd</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="218:17" pos:end="218:53"><expr pos:start="218:17" pos:end="218:52"><call pos:start="218:17" pos:end="218:52"><name pos:start="218:17" pos:end="218:35">ide_atapi_cmd_reply</name><argument_list pos:start="218:36" pos:end="218:52">(<argument pos:start="218:37" pos:end="218:37"><expr pos:start="218:37" pos:end="218:37"><name pos:start="218:37" pos:end="218:37">s</name></expr></argument>, <argument pos:start="218:40" pos:end="218:42"><expr pos:start="218:40" pos:end="218:42"><name pos:start="218:40" pos:end="218:42">len</name></expr></argument>, <argument pos:start="218:45" pos:end="218:51"><expr pos:start="218:45" pos:end="218:51"><name pos:start="218:45" pos:end="218:51">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="219:13" pos:end="219:19">case <expr pos:start="219:18" pos:end="219:18"><literal type="number" pos:start="219:18" pos:end="219:18">1</literal></expr>:</case>
                <comment type="block" pos:start="220:17" pos:end="220:67">/* multi session : only a single session defined */</comment>
                <expr_stmt pos:start="221:17" pos:end="221:35"><expr pos:start="221:17" pos:end="221:34"><call pos:start="221:17" pos:end="221:34"><name pos:start="221:17" pos:end="221:22">memset</name><argument_list pos:start="221:23" pos:end="221:34">(<argument pos:start="221:24" pos:end="221:26"><expr pos:start="221:24" pos:end="221:26"><name pos:start="221:24" pos:end="221:26">buf</name></expr></argument>, <argument pos:start="221:29" pos:end="221:29"><expr pos:start="221:29" pos:end="221:29"><literal type="number" pos:start="221:29" pos:end="221:29">0</literal></expr></argument>, <argument pos:start="221:32" pos:end="221:33"><expr pos:start="221:32" pos:end="221:33"><literal type="number" pos:start="221:32" pos:end="221:33">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="222:17" pos:end="222:30"><expr pos:start="222:17" pos:end="222:29"><name pos:start="222:17" pos:end="222:22"><name pos:start="222:17" pos:end="222:19">buf</name><index pos:start="222:20" pos:end="222:22">[<expr pos:start="222:21" pos:end="222:21"><literal type="number" pos:start="222:21" pos:end="222:21">1</literal></expr>]</index></name> <operator pos:start="222:24" pos:end="222:24">=</operator> <literal type="number" pos:start="222:26" pos:end="222:29">0x0a</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="223:17" pos:end="223:30"><expr pos:start="223:17" pos:end="223:29"><name pos:start="223:17" pos:end="223:22"><name pos:start="223:17" pos:end="223:19">buf</name><index pos:start="223:20" pos:end="223:22">[<expr pos:start="223:21" pos:end="223:21"><literal type="number" pos:start="223:21" pos:end="223:21">2</literal></expr>]</index></name> <operator pos:start="223:24" pos:end="223:24">=</operator> <literal type="number" pos:start="223:26" pos:end="223:29">0x01</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="224:17" pos:end="224:30"><expr pos:start="224:17" pos:end="224:29"><name pos:start="224:17" pos:end="224:22"><name pos:start="224:17" pos:end="224:19">buf</name><index pos:start="224:20" pos:end="224:22">[<expr pos:start="224:21" pos:end="224:21"><literal type="number" pos:start="224:21" pos:end="224:21">3</literal></expr>]</index></name> <operator pos:start="224:24" pos:end="224:24">=</operator> <literal type="number" pos:start="224:26" pos:end="224:29">0x01</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="225:17" pos:end="225:52"><expr pos:start="225:17" pos:end="225:51"><call pos:start="225:17" pos:end="225:51"><name pos:start="225:17" pos:end="225:35">ide_atapi_cmd_reply</name><argument_list pos:start="225:36" pos:end="225:51">(<argument pos:start="225:37" pos:end="225:37"><expr pos:start="225:37" pos:end="225:37"><name pos:start="225:37" pos:end="225:37">s</name></expr></argument>, <argument pos:start="225:40" pos:end="225:41"><expr pos:start="225:40" pos:end="225:41"><literal type="number" pos:start="225:40" pos:end="225:41">12</literal></expr></argument>, <argument pos:start="225:44" pos:end="225:50"><expr pos:start="225:44" pos:end="225:50"><name pos:start="225:44" pos:end="225:50">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="226:13" pos:end="226:19">case <expr pos:start="226:18" pos:end="226:18"><literal type="number" pos:start="226:18" pos:end="226:18">2</literal></expr>:</case>
                <expr_stmt pos:start="227:17" pos:end="227:79"><expr pos:start="227:17" pos:end="227:78"><name pos:start="227:17" pos:end="227:19">len</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <call pos:start="227:23" pos:end="227:78"><name pos:start="227:23" pos:end="227:40">cdrom_read_toc_raw</name><argument_list pos:start="227:41" pos:end="227:78">(<argument pos:start="227:42" pos:end="227:54"><expr pos:start="227:42" pos:end="227:54"><name pos:start="227:42" pos:end="227:54">total_sectors</name></expr></argument>, <argument pos:start="227:57" pos:end="227:59"><expr pos:start="227:57" pos:end="227:59"><name pos:start="227:57" pos:end="227:59">buf</name></expr></argument>, <argument pos:start="227:62" pos:end="227:64"><expr pos:start="227:62" pos:end="227:64"><name pos:start="227:62" pos:end="227:64">msf</name></expr></argument>, <argument pos:start="227:67" pos:end="227:77"><expr pos:start="227:67" pos:end="227:77"><name pos:start="227:67" pos:end="227:77">start_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="228:17" pos:end="229:35"><if pos:start="228:17" pos:end="229:35">if <condition pos:start="228:20" pos:end="228:28">(<expr pos:start="228:21" pos:end="228:27"><name pos:start="228:21" pos:end="228:23">len</name> <operator pos:start="228:25" pos:end="228:25">&lt;</operator> <literal type="number" pos:start="228:27" pos:end="228:27">0</literal></expr>)</condition><block type="pseudo" pos:start="229:21" pos:end="229:35"><block_content pos:start="229:21" pos:end="229:35">
                    <goto pos:start="229:21" pos:end="229:35">goto <name pos:start="229:26" pos:end="229:34">error_cmd</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="230:17" pos:end="230:53"><expr pos:start="230:17" pos:end="230:52"><call pos:start="230:17" pos:end="230:52"><name pos:start="230:17" pos:end="230:35">ide_atapi_cmd_reply</name><argument_list pos:start="230:36" pos:end="230:52">(<argument pos:start="230:37" pos:end="230:37"><expr pos:start="230:37" pos:end="230:37"><name pos:start="230:37" pos:end="230:37">s</name></expr></argument>, <argument pos:start="230:40" pos:end="230:42"><expr pos:start="230:40" pos:end="230:42"><name pos:start="230:40" pos:end="230:42">len</name></expr></argument>, <argument pos:start="230:45" pos:end="230:51"><expr pos:start="230:45" pos:end="230:51"><name pos:start="230:45" pos:end="230:51">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <default pos:start="231:13" pos:end="231:20">default:</default>
            <label pos:start="232:13" pos:end="232:22"><name pos:start="232:13" pos:end="232:21">error_cmd</name>:</label>
    <case pos:start="233:5" pos:end="233:34">case <expr pos:start="233:10" pos:end="233:33"><name pos:start="233:10" pos:end="233:33">GPCMD_READ_CDVD_CAPACITY</name></expr>:</case>
        <block pos:start="234:9" pos:end="323:48">{<block_content pos:start="235:13" pos:end="323:48">
            <decl_stmt pos:start="235:13" pos:end="235:35"><decl pos:start="235:13" pos:end="235:34"><type pos:start="235:13" pos:end="235:20"><name pos:start="235:13" pos:end="235:20">uint64_t</name></type> <name pos:start="235:22" pos:end="235:34">total_sectors</name></decl>;</decl_stmt>
            <expr_stmt pos:start="236:13" pos:end="236:53"><expr pos:start="236:13" pos:end="236:52"><call pos:start="236:13" pos:end="236:52"><name pos:start="236:13" pos:end="236:29">bdrv_get_geometry</name><argument_list pos:start="236:30" pos:end="236:52">(<argument pos:start="236:31" pos:end="236:35"><expr pos:start="236:31" pos:end="236:35"><name pos:start="236:31" pos:end="236:35"><name pos:start="236:31" pos:end="236:31">s</name><operator pos:start="236:32" pos:end="236:33">-&gt;</operator><name pos:start="236:34" pos:end="236:35">bs</name></name></expr></argument>, <argument pos:start="236:38" pos:end="236:51"><expr pos:start="236:38" pos:end="236:51"><operator pos:start="236:38" pos:end="236:38">&amp;</operator><name pos:start="236:39" pos:end="236:51">total_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="237:13" pos:end="237:32"><expr pos:start="237:13" pos:end="237:31"><name pos:start="237:13" pos:end="237:25">total_sectors</name> <operator pos:start="237:27" pos:end="237:29">&gt;&gt;=</operator> <literal type="number" pos:start="237:31" pos:end="237:31">2</literal></expr>;</expr_stmt>
            <if_stmt pos:start="238:13" pos:end="323:48"><if pos:start="238:13" pos:end="323:48">if <condition pos:start="238:16" pos:end="238:35">(<expr pos:start="238:17" pos:end="238:34"><name pos:start="238:17" pos:end="238:29">total_sectors</name> <operator pos:start="238:31" pos:end="238:32">==</operator> <literal type="number" pos:start="238:34" pos:end="238:34">0</literal></expr>)</condition> <block pos:start="238:37" pos:end="323:48">{<block_content pos:start="239:17" pos:end="323:48">
                <expr_stmt pos:start="239:17" pos:end="240:60"><expr pos:start="239:17" pos:end="240:59"><call pos:start="239:17" pos:end="240:59"><name pos:start="239:17" pos:end="239:35">ide_atapi_cmd_error</name><argument_list pos:start="239:36" pos:end="240:59">(<argument pos:start="239:37" pos:end="239:37"><expr pos:start="239:37" pos:end="239:37"><name pos:start="239:37" pos:end="239:37">s</name></expr></argument>, <argument pos:start="239:40" pos:end="239:54"><expr pos:start="239:40" pos:end="239:54"><name pos:start="239:40" pos:end="239:54">SENSE_NOT_READY</name></expr></argument>,
                                    <argument pos:start="240:37" pos:end="240:58"><expr pos:start="240:37" pos:end="240:58"><name pos:start="240:37" pos:end="240:58">ASC_MEDIUM_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="241:13" pos:end="241:66">/* NOTE: it is really the number of sectors minus 1 */</comment>
            <expr_stmt pos:start="242:13" pos:end="242:49"><expr pos:start="242:13" pos:end="242:48"><call pos:start="242:13" pos:end="242:48"><name pos:start="242:13" pos:end="242:24">cpu_to_ube32</name><argument_list pos:start="242:25" pos:end="242:48">(<argument pos:start="242:26" pos:end="242:28"><expr pos:start="242:26" pos:end="242:28"><name pos:start="242:26" pos:end="242:28">buf</name></expr></argument>, <argument pos:start="242:31" pos:end="242:47"><expr pos:start="242:31" pos:end="242:47"><name pos:start="242:31" pos:end="242:43">total_sectors</name> <operator pos:start="242:45" pos:end="242:45">-</operator> <literal type="number" pos:start="242:47" pos:end="242:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="243:13" pos:end="243:40"><expr pos:start="243:13" pos:end="243:39"><call pos:start="243:13" pos:end="243:39"><name pos:start="243:13" pos:end="243:24">cpu_to_ube32</name><argument_list pos:start="243:25" pos:end="243:39">(<argument pos:start="243:26" pos:end="243:32"><expr pos:start="243:26" pos:end="243:32"><name pos:start="243:26" pos:end="243:28">buf</name> <operator pos:start="243:30" pos:end="243:30">+</operator> <literal type="number" pos:start="243:32" pos:end="243:32">4</literal></expr></argument>, <argument pos:start="243:35" pos:end="243:38"><expr pos:start="243:35" pos:end="243:38"><literal type="number" pos:start="243:35" pos:end="243:38">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="244:13" pos:end="244:41"><expr pos:start="244:13" pos:end="244:40"><call pos:start="244:13" pos:end="244:40"><name pos:start="244:13" pos:end="244:31">ide_atapi_cmd_reply</name><argument_list pos:start="244:32" pos:end="244:40">(<argument pos:start="244:33" pos:end="244:33"><expr pos:start="244:33" pos:end="244:33"><name pos:start="244:33" pos:end="244:33">s</name></expr></argument>, <argument pos:start="244:36" pos:end="244:36"><expr pos:start="244:36" pos:end="244:36"><literal type="number" pos:start="244:36" pos:end="244:36">8</literal></expr></argument>, <argument pos:start="244:39" pos:end="244:39"><expr pos:start="244:39" pos:end="244:39"><literal type="number" pos:start="244:39" pos:end="244:39">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="245:5" pos:end="245:34">case <expr pos:start="245:10" pos:end="245:33"><name pos:start="245:10" pos:end="245:33">GPCMD_READ_DVD_STRUCTURE</name></expr>:</case>
        <block pos:start="246:9" pos:end="323:48">{<block_content pos:start="247:13" pos:end="323:48">
            <decl_stmt pos:start="247:13" pos:end="247:34"><decl pos:start="247:13" pos:end="247:33"><type pos:start="247:13" pos:end="247:15"><name pos:start="247:13" pos:end="247:15">int</name></type> <name pos:start="247:17" pos:end="247:21">media</name> <init pos:start="247:23" pos:end="247:33">= <expr pos:start="247:25" pos:end="247:33"><name pos:start="247:25" pos:end="247:33"><name pos:start="247:25" pos:end="247:30">packet</name><index pos:start="247:31" pos:end="247:33">[<expr pos:start="247:32" pos:end="247:32"><literal type="number" pos:start="247:32" pos:end="247:32">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="248:13" pos:end="248:35"><decl pos:start="248:13" pos:end="248:34"><type pos:start="248:13" pos:end="248:15"><name pos:start="248:13" pos:end="248:15">int</name></type> <name pos:start="248:17" pos:end="248:22">format</name> <init pos:start="248:24" pos:end="248:34">= <expr pos:start="248:26" pos:end="248:34"><name pos:start="248:26" pos:end="248:34"><name pos:start="248:26" pos:end="248:31">packet</name><index pos:start="248:32" pos:end="248:34">[<expr pos:start="248:33" pos:end="248:33"><literal type="number" pos:start="248:33" pos:end="248:33">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="249:13" pos:end="249:20"><decl pos:start="249:13" pos:end="249:19"><type pos:start="249:13" pos:end="249:15"><name pos:start="249:13" pos:end="249:15">int</name></type> <name pos:start="249:17" pos:end="249:19">ret</name></decl>;</decl_stmt>
            <expr_stmt pos:start="250:13" pos:end="250:47"><expr pos:start="250:13" pos:end="250:46"><name pos:start="250:13" pos:end="250:19">max_len</name> <operator pos:start="250:21" pos:end="250:21">=</operator> <call pos:start="250:23" pos:end="250:46"><name pos:start="250:23" pos:end="250:34">ube16_to_cpu</name><argument_list pos:start="250:35" pos:end="250:46">(<argument pos:start="250:36" pos:end="250:45"><expr pos:start="250:36" pos:end="250:45"><name pos:start="250:36" pos:end="250:41">packet</name> <operator pos:start="250:43" pos:end="250:43">+</operator> <literal type="number" pos:start="250:45" pos:end="250:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="251:13" pos:end="323:48"><if pos:start="251:13" pos:end="254:17">if <condition pos:start="251:16" pos:end="251:30">(<expr pos:start="251:17" pos:end="251:29"><name pos:start="251:17" pos:end="251:22">format</name> <operator pos:start="251:24" pos:end="251:24">&lt;</operator> <literal type="number" pos:start="251:26" pos:end="251:29">0xff</literal></expr>)</condition> <block pos:start="251:32" pos:end="254:17">{<block_content pos:start="252:17" pos:end="253:65">
                <if_stmt pos:start="252:17" pos:end="253:65"><if pos:start="252:17" pos:end="253:65">if <condition pos:start="252:20" pos:end="252:35">(<expr pos:start="252:21" pos:end="252:34"><call pos:start="252:21" pos:end="252:34"><name pos:start="252:21" pos:end="252:31">media_is_cd</name><argument_list pos:start="252:32" pos:end="252:34">(<argument pos:start="252:33" pos:end="252:33"><expr pos:start="252:33" pos:end="252:33"><name pos:start="252:33" pos:end="252:33">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="252:37" pos:end="253:64">{<block_content pos:start="253:41" pos:end="253:64">
                                        <expr_stmt pos:start="253:41" pos:end="253:63"><expr pos:start="253:41" pos:end="253:63"><name pos:start="253:41" pos:end="253:63">ASC_INCOMPATIBLE_FORMAT</name></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="253:65" pos:end="253:65">;</empty_stmt></if></if_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="254:19" pos:end="323:48">else if <condition pos:start="254:27" pos:end="254:45">(<expr pos:start="254:28" pos:end="254:44"><operator pos:start="254:28" pos:end="254:28">!</operator><call pos:start="254:29" pos:end="254:44"><name pos:start="254:29" pos:end="254:41">media_present</name><argument_list pos:start="254:42" pos:end="254:44">(<argument pos:start="254:43" pos:end="254:43"><expr pos:start="254:43" pos:end="254:43"><name pos:start="254:43" pos:end="254:43">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="254:47" pos:end="323:48">{<block_content pos:start="255:13" pos:end="323:48">
            <expr_stmt pos:start="255:13" pos:end="256:60"><expr pos:start="255:13" pos:end="256:59"><call pos:start="255:13" pos:end="256:59"><name pos:start="255:13" pos:end="255:18">memset</name><argument_list pos:start="255:19" pos:end="256:59">(<argument pos:start="255:20" pos:end="255:22"><expr pos:start="255:20" pos:end="255:22"><name pos:start="255:20" pos:end="255:22">buf</name></expr></argument>, <argument pos:start="255:25" pos:end="255:25"><expr pos:start="255:25" pos:end="255:25"><literal type="number" pos:start="255:25" pos:end="255:25">0</literal></expr></argument>, <argument pos:start="255:28" pos:end="256:58"><expr pos:start="255:28" pos:end="256:58"><ternary pos:start="255:28" pos:end="256:58"><condition pos:start="255:28" pos:end="255:68"><expr pos:start="255:28" pos:end="255:66"><name pos:start="255:28" pos:end="255:34">max_len</name> <operator pos:start="255:36" pos:end="255:36">&gt;</operator> <name pos:start="255:38" pos:end="255:56">IDE_DMA_BUF_SECTORS</name> <operator pos:start="255:58" pos:end="255:58">*</operator> <literal type="number" pos:start="255:60" pos:end="255:64">512</literal> <operator pos:start="255:64" pos:end="255:64">+</operator> <literal type="number" pos:start="255:66" pos:end="255:66">4</literal></expr> ?</condition><then pos:start="256:20" pos:end="256:48">
                   <expr pos:start="256:20" pos:end="256:48"><name pos:start="256:20" pos:end="256:38">IDE_DMA_BUF_SECTORS</name> <operator pos:start="256:40" pos:end="256:40">*</operator> <literal type="number" pos:start="256:42" pos:end="256:46">512</literal> <operator pos:start="256:46" pos:end="256:46">+</operator> <literal type="number" pos:start="256:48" pos:end="256:48">4</literal></expr> </then><else pos:start="256:50" pos:end="256:58">: <expr pos:start="256:52" pos:end="256:58"><name pos:start="256:52" pos:end="256:58">max_len</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="257:13" pos:end="323:48">switch <condition pos:start="257:20" pos:end="257:27">(<expr pos:start="257:21" pos:end="257:26"><name pos:start="257:21" pos:end="257:26">format</name></expr>)</condition> <block pos:start="257:29" pos:end="323:48">{<block_content pos:start="258:17" pos:end="323:48">
                <case pos:start="258:17" pos:end="258:35">case <expr pos:start="258:22" pos:end="258:34"><literal type="number" pos:start="258:22" pos:end="258:25">0x00</literal> <operator pos:start="258:27" pos:end="258:29">...</operator> <literal type="number" pos:start="258:31" pos:end="258:34">0x7f</literal></expr>:</case>
                <case pos:start="259:17" pos:end="259:26">case <expr pos:start="259:22" pos:end="259:25"><literal type="number" pos:start="259:22" pos:end="259:25">0xff</literal></expr>:</case>
                    <if_stmt pos:start="260:21" pos:end="323:48"><if pos:start="260:21" pos:end="323:48">if <condition pos:start="260:24" pos:end="260:35">(<expr pos:start="260:25" pos:end="260:34"><name pos:start="260:25" pos:end="260:29">media</name> <operator pos:start="260:31" pos:end="260:32">==</operator> <literal type="number" pos:start="260:34" pos:end="260:34">0</literal></expr>)</condition> <block pos:start="260:37" pos:end="323:48">{<block_content pos:start="261:25" pos:end="323:48">
                        <expr_stmt pos:start="261:25" pos:end="261:77"><expr pos:start="261:25" pos:end="261:76"><name pos:start="261:25" pos:end="261:27">ret</name> <operator pos:start="261:29" pos:end="261:29">=</operator> <call pos:start="261:31" pos:end="261:76"><name pos:start="261:31" pos:end="261:52">ide_dvd_read_structure</name><argument_list pos:start="261:53" pos:end="261:76">(<argument pos:start="261:54" pos:end="261:54"><expr pos:start="261:54" pos:end="261:54"><name pos:start="261:54" pos:end="261:54">s</name></expr></argument>, <argument pos:start="261:57" pos:end="261:62"><expr pos:start="261:57" pos:end="261:62"><name pos:start="261:57" pos:end="261:62">format</name></expr></argument>, <argument pos:start="261:65" pos:end="261:70"><expr pos:start="261:65" pos:end="261:70"><name pos:start="261:65" pos:end="261:70">packet</name></expr></argument>, <argument pos:start="261:73" pos:end="261:75"><expr pos:start="261:73" pos:end="261:75"><name pos:start="261:73" pos:end="261:75">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="262:25" pos:end="265:65"><if pos:start="262:25" pos:end="263:80">if <condition pos:start="262:28" pos:end="262:36">(<expr pos:start="262:29" pos:end="262:35"><name pos:start="262:29" pos:end="262:31">ret</name> <operator pos:start="262:33" pos:end="262:33">&lt;</operator> <literal type="number" pos:start="262:35" pos:end="262:35">0</literal></expr>)</condition><block type="pseudo" pos:start="263:29" pos:end="263:80"><block_content pos:start="263:29" pos:end="263:80">
                            <expr_stmt pos:start="263:29" pos:end="263:80"><expr pos:start="263:29" pos:end="263:79"><call pos:start="263:29" pos:end="263:79"><name pos:start="263:29" pos:end="263:47">ide_atapi_cmd_error</name><argument_list pos:start="263:48" pos:end="263:79">(<argument pos:start="263:49" pos:end="263:49"><expr pos:start="263:49" pos:end="263:49"><name pos:start="263:49" pos:end="263:49">s</name></expr></argument>, <argument pos:start="263:52" pos:end="263:72"><expr pos:start="263:52" pos:end="263:72"><name pos:start="263:52" pos:end="263:72">SENSE_ILLEGAL_REQUEST</name></expr></argument>, <argument pos:start="263:75" pos:end="263:78"><expr pos:start="263:75" pos:end="263:78"><operator pos:start="263:75" pos:end="263:75">-</operator><name pos:start="263:76" pos:end="263:78">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                        <else pos:start="264:25" pos:end="265:65">else<block type="pseudo" pos:start="265:29" pos:end="265:65"><block_content pos:start="265:29" pos:end="265:65">
                            <expr_stmt pos:start="265:29" pos:end="265:65"><expr pos:start="265:29" pos:end="265:64"><call pos:start="265:29" pos:end="265:64"><name pos:start="265:29" pos:end="265:47">ide_atapi_cmd_reply</name><argument_list pos:start="265:48" pos:end="265:64">(<argument pos:start="265:49" pos:end="265:49"><expr pos:start="265:49" pos:end="265:49"><name pos:start="265:49" pos:end="265:49">s</name></expr></argument>, <argument pos:start="265:52" pos:end="265:54"><expr pos:start="265:52" pos:end="265:54"><name pos:start="265:52" pos:end="265:54">ret</name></expr></argument>, <argument pos:start="265:57" pos:end="265:63"><expr pos:start="265:57" pos:end="265:63"><name pos:start="265:57" pos:end="265:63">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                    <comment type="block" pos:start="266:21" pos:end="266:64">/* TODO: BD support, fall through for now */</comment>
                <comment type="block" pos:start="267:17" pos:end="267:45">/* Generic disk structures */</comment>
                <case pos:start="268:17" pos:end="268:26">case <expr pos:start="268:22" pos:end="268:25"><literal type="number" pos:start="268:22" pos:end="268:25">0x80</literal></expr>:</case> <comment type="block" pos:start="268:28" pos:end="268:61">/* TODO: AACS volume identifier */</comment>
                <case pos:start="269:17" pos:end="269:26">case <expr pos:start="269:22" pos:end="269:25"><literal type="number" pos:start="269:22" pos:end="269:25">0x81</literal></expr>:</case> <comment type="block" pos:start="269:28" pos:end="269:63">/* TODO: AACS media serial number */</comment>
                <case pos:start="270:17" pos:end="270:26">case <expr pos:start="270:22" pos:end="270:25"><literal type="number" pos:start="270:22" pos:end="270:25">0x82</literal></expr>:</case> <comment type="block" pos:start="270:28" pos:end="270:60">/* TODO: AACS media identifier */</comment>
                <case pos:start="271:17" pos:end="271:26">case <expr pos:start="271:22" pos:end="271:25"><literal type="number" pos:start="271:22" pos:end="271:25">0x83</literal></expr>:</case> <comment type="block" pos:start="271:28" pos:end="271:59">/* TODO: AACS media key block */</comment>
                <case pos:start="272:17" pos:end="272:26">case <expr pos:start="272:22" pos:end="272:25"><literal type="number" pos:start="272:22" pos:end="272:25">0x90</literal></expr>:</case> <comment type="block" pos:start="272:28" pos:end="272:71">/* TODO: List of recognized format layers */</comment>
                <case pos:start="273:17" pos:end="273:26">case <expr pos:start="273:22" pos:end="273:25"><literal type="number" pos:start="273:22" pos:end="273:25">0xc0</literal></expr>:</case> <comment type="block" pos:start="273:28" pos:end="273:62">/* TODO: Write protection status */</comment>
                <default pos:start="274:17" pos:end="274:24">default:</default>
    <case pos:start="275:5" pos:end="275:25">case <expr pos:start="275:10" pos:end="275:24"><name pos:start="275:10" pos:end="275:24">GPCMD_SET_SPEED</name></expr>:</case>
        <expr_stmt pos:start="276:9" pos:end="276:28"><expr pos:start="276:9" pos:end="276:27"><call pos:start="276:9" pos:end="276:27"><name pos:start="276:9" pos:end="276:24">ide_atapi_cmd_ok</name><argument_list pos:start="276:25" pos:end="276:27">(<argument pos:start="276:26" pos:end="276:26"><expr pos:start="276:26" pos:end="276:26"><name pos:start="276:26" pos:end="276:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="277:5" pos:end="277:23">case <expr pos:start="277:10" pos:end="277:22"><name pos:start="277:10" pos:end="277:22">GPCMD_INQUIRY</name></expr>:</case>
        <expr_stmt pos:start="278:9" pos:end="278:28"><expr pos:start="278:9" pos:end="278:27"><name pos:start="278:9" pos:end="278:15">max_len</name> <operator pos:start="278:17" pos:end="278:17">=</operator> <name pos:start="278:19" pos:end="278:27"><name pos:start="278:19" pos:end="278:24">packet</name><index pos:start="278:25" pos:end="278:27">[<expr pos:start="278:26" pos:end="278:26"><literal type="number" pos:start="278:26" pos:end="278:26">4</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="279:9" pos:end="279:22"><expr pos:start="279:9" pos:end="279:21"><name pos:start="279:9" pos:end="279:14"><name pos:start="279:9" pos:end="279:11">buf</name><index pos:start="279:12" pos:end="279:14">[<expr pos:start="279:13" pos:end="279:13"><literal type="number" pos:start="279:13" pos:end="279:13">0</literal></expr>]</index></name> <operator pos:start="279:16" pos:end="279:16">=</operator> <literal type="number" pos:start="279:18" pos:end="279:21">0x05</literal></expr>;</expr_stmt> <comment type="block" pos:start="279:24" pos:end="279:35">/* CD-ROM */</comment>
        <expr_stmt pos:start="280:9" pos:end="280:22"><expr pos:start="280:9" pos:end="280:21"><name pos:start="280:9" pos:end="280:14"><name pos:start="280:9" pos:end="280:11">buf</name><index pos:start="280:12" pos:end="280:14">[<expr pos:start="280:13" pos:end="280:13"><literal type="number" pos:start="280:13" pos:end="280:13">1</literal></expr>]</index></name> <operator pos:start="280:16" pos:end="280:16">=</operator> <literal type="number" pos:start="280:18" pos:end="280:21">0x80</literal></expr>;</expr_stmt> <comment type="block" pos:start="280:24" pos:end="280:38">/* removable */</comment>
        <expr_stmt pos:start="281:9" pos:end="281:22"><expr pos:start="281:9" pos:end="281:21"><name pos:start="281:9" pos:end="281:14"><name pos:start="281:9" pos:end="281:11">buf</name><index pos:start="281:12" pos:end="281:14">[<expr pos:start="281:13" pos:end="281:13"><literal type="number" pos:start="281:13" pos:end="281:13">2</literal></expr>]</index></name> <operator pos:start="281:16" pos:end="281:16">=</operator> <literal type="number" pos:start="281:18" pos:end="281:21">0x00</literal></expr>;</expr_stmt> <comment type="block" pos:start="281:24" pos:end="281:32">/* ISO */</comment>
        <expr_stmt pos:start="282:9" pos:end="282:22"><expr pos:start="282:9" pos:end="282:21"><name pos:start="282:9" pos:end="282:14"><name pos:start="282:9" pos:end="282:11">buf</name><index pos:start="282:12" pos:end="282:14">[<expr pos:start="282:13" pos:end="282:13"><literal type="number" pos:start="282:13" pos:end="282:13">3</literal></expr>]</index></name> <operator pos:start="282:16" pos:end="282:16">=</operator> <literal type="number" pos:start="282:18" pos:end="282:21">0x21</literal></expr>;</expr_stmt> <comment type="block" pos:start="282:24" pos:end="282:57">/* ATAPI-2 (XXX: put ATAPI-4 ?) */</comment>
        <expr_stmt pos:start="283:9" pos:end="283:20"><expr pos:start="283:9" pos:end="283:19"><name pos:start="283:9" pos:end="283:14"><name pos:start="283:9" pos:end="283:11">buf</name><index pos:start="283:12" pos:end="283:14">[<expr pos:start="283:13" pos:end="283:13"><literal type="number" pos:start="283:13" pos:end="283:13">4</literal></expr>]</index></name> <operator pos:start="283:16" pos:end="283:16">=</operator> <literal type="number" pos:start="283:18" pos:end="283:19">31</literal></expr>;</expr_stmt> <comment type="block" pos:start="283:22" pos:end="283:44">/* additional length */</comment>
        <expr_stmt pos:start="284:9" pos:end="284:19"><expr pos:start="284:9" pos:end="284:18"><name pos:start="284:9" pos:end="284:14"><name pos:start="284:9" pos:end="284:11">buf</name><index pos:start="284:12" pos:end="284:14">[<expr pos:start="284:13" pos:end="284:13"><literal type="number" pos:start="284:13" pos:end="284:13">5</literal></expr>]</index></name> <operator pos:start="284:16" pos:end="284:16">=</operator> <literal type="number" pos:start="284:18" pos:end="284:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="284:21" pos:end="284:34">/* reserved */</comment>
        <expr_stmt pos:start="285:9" pos:end="285:19"><expr pos:start="285:9" pos:end="285:18"><name pos:start="285:9" pos:end="285:14"><name pos:start="285:9" pos:end="285:11">buf</name><index pos:start="285:12" pos:end="285:14">[<expr pos:start="285:13" pos:end="285:13"><literal type="number" pos:start="285:13" pos:end="285:13">6</literal></expr>]</index></name> <operator pos:start="285:16" pos:end="285:16">=</operator> <literal type="number" pos:start="285:18" pos:end="285:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="285:21" pos:end="285:34">/* reserved */</comment>
        <expr_stmt pos:start="286:9" pos:end="286:19"><expr pos:start="286:9" pos:end="286:18"><name pos:start="286:9" pos:end="286:14"><name pos:start="286:9" pos:end="286:11">buf</name><index pos:start="286:12" pos:end="286:14">[<expr pos:start="286:13" pos:end="286:13"><literal type="number" pos:start="286:13" pos:end="286:13">7</literal></expr>]</index></name> <operator pos:start="286:16" pos:end="286:16">=</operator> <literal type="number" pos:start="286:18" pos:end="286:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="286:21" pos:end="286:34">/* reserved */</comment>
        <expr_stmt pos:start="287:9" pos:end="287:36"><expr pos:start="287:9" pos:end="287:35"><call pos:start="287:9" pos:end="287:35"><name pos:start="287:9" pos:end="287:15">padstr8</name><argument_list pos:start="287:16" pos:end="287:35">(<argument pos:start="287:17" pos:end="287:23"><expr pos:start="287:17" pos:end="287:23"><name pos:start="287:17" pos:end="287:19">buf</name> <operator pos:start="287:21" pos:end="287:21">+</operator> <literal type="number" pos:start="287:23" pos:end="287:23">8</literal></expr></argument>, <argument pos:start="287:26" pos:end="287:26"><expr pos:start="287:26" pos:end="287:26"><literal type="number" pos:start="287:26" pos:end="287:26">8</literal></expr></argument>, <argument pos:start="287:29" pos:end="287:34"><expr pos:start="287:29" pos:end="287:34"><literal type="string" pos:start="287:29" pos:end="287:34">"QEMU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="288:9" pos:end="288:46"><expr pos:start="288:9" pos:end="288:45"><call pos:start="288:9" pos:end="288:45"><name pos:start="288:9" pos:end="288:15">padstr8</name><argument_list pos:start="288:16" pos:end="288:45">(<argument pos:start="288:17" pos:end="288:24"><expr pos:start="288:17" pos:end="288:24"><name pos:start="288:17" pos:end="288:19">buf</name> <operator pos:start="288:21" pos:end="288:21">+</operator> <literal type="number" pos:start="288:23" pos:end="288:24">16</literal></expr></argument>, <argument pos:start="288:27" pos:end="288:28"><expr pos:start="288:27" pos:end="288:28"><literal type="number" pos:start="288:27" pos:end="288:28">16</literal></expr></argument>, <argument pos:start="288:31" pos:end="288:44"><expr pos:start="288:31" pos:end="288:44"><literal type="string" pos:start="288:31" pos:end="288:44">"QEMU DVD-ROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="289:9" pos:end="289:41"><expr pos:start="289:9" pos:end="289:40"><call pos:start="289:9" pos:end="289:40"><name pos:start="289:9" pos:end="289:15">padstr8</name><argument_list pos:start="289:16" pos:end="289:40">(<argument pos:start="289:17" pos:end="289:24"><expr pos:start="289:17" pos:end="289:24"><name pos:start="289:17" pos:end="289:19">buf</name> <operator pos:start="289:21" pos:end="289:21">+</operator> <literal type="number" pos:start="289:23" pos:end="289:24">32</literal></expr></argument>, <argument pos:start="289:27" pos:end="289:27"><expr pos:start="289:27" pos:end="289:27"><literal type="number" pos:start="289:27" pos:end="289:27">4</literal></expr></argument>, <argument pos:start="289:30" pos:end="289:39"><expr pos:start="289:30" pos:end="289:39"><name pos:start="289:30" pos:end="289:39"><name pos:start="289:30" pos:end="289:30">s</name><operator pos:start="289:31" pos:end="289:32">-&gt;</operator><name pos:start="289:33" pos:end="289:39">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="290:9" pos:end="290:44"><expr pos:start="290:9" pos:end="290:43"><call pos:start="290:9" pos:end="290:43"><name pos:start="290:9" pos:end="290:27">ide_atapi_cmd_reply</name><argument_list pos:start="290:28" pos:end="290:43">(<argument pos:start="290:29" pos:end="290:29"><expr pos:start="290:29" pos:end="290:29"><name pos:start="290:29" pos:end="290:29">s</name></expr></argument>, <argument pos:start="290:32" pos:end="290:33"><expr pos:start="290:32" pos:end="290:33"><literal type="number" pos:start="290:32" pos:end="290:33">36</literal></expr></argument>, <argument pos:start="290:36" pos:end="290:42"><expr pos:start="290:36" pos:end="290:42"><name pos:start="290:36" pos:end="290:42">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="291:5" pos:end="291:33">case <expr pos:start="291:10" pos:end="291:32"><name pos:start="291:10" pos:end="291:32">GPCMD_GET_CONFIGURATION</name></expr>:</case>
        <block pos:start="292:9" pos:end="323:48">{<block_content pos:start="293:13" pos:end="323:48">
            <decl_stmt pos:start="293:13" pos:end="293:25"><decl pos:start="293:13" pos:end="293:24"><type pos:start="293:13" pos:end="293:20"><name pos:start="293:13" pos:end="293:20">uint32_t</name></type> <name pos:start="293:22" pos:end="293:24">len</name></decl>;</decl_stmt>
            <decl_stmt pos:start="294:13" pos:end="294:30"><decl pos:start="294:13" pos:end="294:29"><type pos:start="294:13" pos:end="294:19"><name pos:start="294:13" pos:end="294:19">uint8_t</name></type> <name pos:start="294:21" pos:end="294:25">index</name> <init pos:start="294:27" pos:end="294:29">= <expr pos:start="294:29" pos:end="294:29"><literal type="number" pos:start="294:29" pos:end="294:29">0</literal></expr></init></decl>;</decl_stmt>
            <comment type="block" pos:start="295:13" pos:end="295:45">/* only feature 0 is supported */</comment>
            <if_stmt pos:start="296:13" pos:end="323:48"><if pos:start="296:13" pos:end="323:48">if <condition pos:start="296:16" pos:end="296:49">(<expr pos:start="296:17" pos:end="296:48"><name pos:start="296:17" pos:end="296:25"><name pos:start="296:17" pos:end="296:22">packet</name><index pos:start="296:23" pos:end="296:25">[<expr pos:start="296:24" pos:end="296:24"><literal type="number" pos:start="296:24" pos:end="296:24">2</literal></expr>]</index></name> <operator pos:start="296:27" pos:end="296:28">!=</operator> <literal type="number" pos:start="296:30" pos:end="296:30">0</literal> <operator pos:start="296:32" pos:end="296:33">||</operator> <name pos:start="296:35" pos:end="296:43"><name pos:start="296:35" pos:end="296:40">packet</name><index pos:start="296:41" pos:end="296:43">[<expr pos:start="296:42" pos:end="296:42"><literal type="number" pos:start="296:42" pos:end="296:42">3</literal></expr>]</index></name> <operator pos:start="296:45" pos:end="296:46">!=</operator> <literal type="number" pos:start="296:48" pos:end="296:48">0</literal></expr>)</condition> <block pos:start="296:51" pos:end="323:47">{<block_content pos:start="305:13" pos:end="323:47">
            <comment type="block" pos:start="297:13" pos:end="297:79">/* XXX: could result in alignment problems in some architectures */</comment>
            <comment type="block" pos:start="298:13" pos:end="304:15">/*
             * XXX: avoid overflow for io_buffer if max_len is bigger than
             *      the size of that buffer (dimensioned to max number of
             *      sectors to transfer at once)
             *
             *      Only a problem if the feature/profiles grow.
             */</comment>
            <if_stmt pos:start="305:13" pos:end="306:30"><if pos:start="305:13" pos:end="306:30">if <condition pos:start="305:16" pos:end="305:30">(<expr pos:start="305:17" pos:end="305:29"><name pos:start="305:17" pos:end="305:23">max_len</name> <operator pos:start="305:25" pos:end="305:25">&gt;</operator> <literal type="number" pos:start="305:27" pos:end="305:29">512</literal></expr>)</condition><block type="pseudo" pos:start="306:17" pos:end="306:30"><block_content pos:start="306:17" pos:end="306:30"> <comment type="block" pos:start="305:32" pos:end="305:57">/* XXX: assume 1 sector */</comment>
                <expr_stmt pos:start="306:17" pos:end="306:30"><expr pos:start="306:17" pos:end="306:29"><name pos:start="306:17" pos:end="306:23">max_len</name> <operator pos:start="306:25" pos:end="306:25">=</operator> <literal type="number" pos:start="306:27" pos:end="306:29">512</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="307:13" pos:end="307:36"><expr pos:start="307:13" pos:end="307:35"><call pos:start="307:13" pos:end="307:35"><name pos:start="307:13" pos:end="307:18">memset</name><argument_list pos:start="307:19" pos:end="307:35">(<argument pos:start="307:20" pos:end="307:22"><expr pos:start="307:20" pos:end="307:22"><name pos:start="307:20" pos:end="307:22">buf</name></expr></argument>, <argument pos:start="307:25" pos:end="307:25"><expr pos:start="307:25" pos:end="307:25"><literal type="number" pos:start="307:25" pos:end="307:25">0</literal></expr></argument>, <argument pos:start="307:28" pos:end="307:34"><expr pos:start="307:28" pos:end="307:34"><name pos:start="307:28" pos:end="307:34">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="308:13" pos:end="311:15">/* 
             * the number of sectors from the media tells us which profile
             * to use as current.  0 means there is no media
             */</comment>
            <if_stmt pos:start="312:13" pos:end="315:58"><if pos:start="312:13" pos:end="313:59">if <condition pos:start="312:16" pos:end="312:32">(<expr pos:start="312:17" pos:end="312:31"><call pos:start="312:17" pos:end="312:31"><name pos:start="312:17" pos:end="312:28">media_is_dvd</name><argument_list pos:start="312:29" pos:end="312:31">(<argument pos:start="312:30" pos:end="312:30"><expr pos:start="312:30" pos:end="312:30"><name pos:start="312:30" pos:end="312:30">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="313:17" pos:end="313:59"><block_content pos:start="313:17" pos:end="313:59">
                <expr_stmt pos:start="313:17" pos:end="313:59"><expr pos:start="313:17" pos:end="313:58"><call pos:start="313:17" pos:end="313:58"><name pos:start="313:17" pos:end="313:28">cpu_to_ube16</name><argument_list pos:start="313:29" pos:end="313:58">(<argument pos:start="313:30" pos:end="313:36"><expr pos:start="313:30" pos:end="313:36"><name pos:start="313:30" pos:end="313:32">buf</name> <operator pos:start="313:34" pos:end="313:34">+</operator> <literal type="number" pos:start="313:36" pos:end="313:36">6</literal></expr></argument>, <argument pos:start="313:39" pos:end="313:57"><expr pos:start="313:39" pos:end="313:57"><name pos:start="313:39" pos:end="313:57">MMC_PROFILE_DVD_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="314:13" pos:end="315:58">else if <condition pos:start="314:21" pos:end="314:36">(<expr pos:start="314:22" pos:end="314:35"><call pos:start="314:22" pos:end="314:35"><name pos:start="314:22" pos:end="314:32">media_is_cd</name><argument_list pos:start="314:33" pos:end="314:35">(<argument pos:start="314:34" pos:end="314:34"><expr pos:start="314:34" pos:end="314:34"><name pos:start="314:34" pos:end="314:34">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="315:17" pos:end="315:58"><block_content pos:start="315:17" pos:end="315:58">
                <expr_stmt pos:start="315:17" pos:end="315:58"><expr pos:start="315:17" pos:end="315:57"><call pos:start="315:17" pos:end="315:57"><name pos:start="315:17" pos:end="315:28">cpu_to_ube16</name><argument_list pos:start="315:29" pos:end="315:57">(<argument pos:start="315:30" pos:end="315:36"><expr pos:start="315:30" pos:end="315:36"><name pos:start="315:30" pos:end="315:32">buf</name> <operator pos:start="315:34" pos:end="315:34">+</operator> <literal type="number" pos:start="315:36" pos:end="315:36">6</literal></expr></argument>, <argument pos:start="315:39" pos:end="315:56"><expr pos:start="315:39" pos:end="315:56"><name pos:start="315:39" pos:end="315:56">MMC_PROFILE_CD_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="316:13" pos:end="316:34"><expr pos:start="316:13" pos:end="316:33"><name pos:start="316:13" pos:end="316:19"><name pos:start="316:13" pos:end="316:15">buf</name><index pos:start="316:16" pos:end="316:19">[<expr pos:start="316:17" pos:end="316:18"><literal type="number" pos:start="316:17" pos:end="316:18">10</literal></expr>]</index></name> <operator pos:start="316:21" pos:end="316:21">=</operator> <literal type="number" pos:start="316:23" pos:end="316:26">0x02</literal> <operator pos:start="316:28" pos:end="316:28">|</operator> <literal type="number" pos:start="316:30" pos:end="316:33">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="316:36" pos:end="316:63">/* persistent and current */</comment>
            <expr_stmt pos:start="317:13" pos:end="317:21"><expr pos:start="317:13" pos:end="317:20"><name pos:start="317:13" pos:end="317:15">len</name> <operator pos:start="317:17" pos:end="317:17">=</operator> <literal type="number" pos:start="317:19" pos:end="317:20">12</literal></expr>;</expr_stmt> <comment type="block" pos:start="317:23" pos:end="317:42">/* headers: 8 + 4 */</comment>
            <expr_stmt pos:start="318:13" pos:end="318:75"><expr pos:start="318:13" pos:end="318:74"><name pos:start="318:13" pos:end="318:15">len</name> <operator pos:start="318:17" pos:end="318:18">+=</operator> <call pos:start="318:20" pos:end="318:74"><name pos:start="318:20" pos:end="318:40">ide_atapi_set_profile</name><argument_list pos:start="318:41" pos:end="318:74">(<argument pos:start="318:42" pos:end="318:44"><expr pos:start="318:42" pos:end="318:44"><name pos:start="318:42" pos:end="318:44">buf</name></expr></argument>, <argument pos:start="318:47" pos:end="318:52"><expr pos:start="318:47" pos:end="318:52"><operator pos:start="318:47" pos:end="318:47">&amp;</operator><name pos:start="318:48" pos:end="318:52">index</name></expr></argument>, <argument pos:start="318:55" pos:end="318:73"><expr pos:start="318:55" pos:end="318:73"><name pos:start="318:55" pos:end="318:73">MMC_PROFILE_DVD_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="319:13" pos:end="319:74"><expr pos:start="319:13" pos:end="319:73"><name pos:start="319:13" pos:end="319:15">len</name> <operator pos:start="319:17" pos:end="319:18">+=</operator> <call pos:start="319:20" pos:end="319:73"><name pos:start="319:20" pos:end="319:40">ide_atapi_set_profile</name><argument_list pos:start="319:41" pos:end="319:73">(<argument pos:start="319:42" pos:end="319:44"><expr pos:start="319:42" pos:end="319:44"><name pos:start="319:42" pos:end="319:44">buf</name></expr></argument>, <argument pos:start="319:47" pos:end="319:52"><expr pos:start="319:47" pos:end="319:52"><operator pos:start="319:47" pos:end="319:47">&amp;</operator><name pos:start="319:48" pos:end="319:52">index</name></expr></argument>, <argument pos:start="319:55" pos:end="319:72"><expr pos:start="319:55" pos:end="319:72"><name pos:start="319:55" pos:end="319:72">MMC_PROFILE_CD_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="320:13" pos:end="320:39"><expr pos:start="320:13" pos:end="320:38"><call pos:start="320:13" pos:end="320:38"><name pos:start="320:13" pos:end="320:24">cpu_to_ube32</name><argument_list pos:start="320:25" pos:end="320:38">(<argument pos:start="320:26" pos:end="320:28"><expr pos:start="320:26" pos:end="320:28"><name pos:start="320:26" pos:end="320:28">buf</name></expr></argument>, <argument pos:start="320:31" pos:end="320:37"><expr pos:start="320:31" pos:end="320:37"><name pos:start="320:31" pos:end="320:33">len</name> <operator pos:start="320:35" pos:end="320:35">-</operator> <literal type="number" pos:start="320:37" pos:end="320:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="320:41" pos:end="320:57">/* data length */</comment>
            <expr_stmt pos:start="321:13" pos:end="321:49"><expr pos:start="321:13" pos:end="321:48"><call pos:start="321:13" pos:end="321:48"><name pos:start="321:13" pos:end="321:31">ide_atapi_cmd_reply</name><argument_list pos:start="321:32" pos:end="321:48">(<argument pos:start="321:33" pos:end="321:33"><expr pos:start="321:33" pos:end="321:33"><name pos:start="321:33" pos:end="321:33">s</name></expr></argument>, <argument pos:start="321:36" pos:end="321:38"><expr pos:start="321:36" pos:end="321:38"><name pos:start="321:36" pos:end="321:38">len</name></expr></argument>, <argument pos:start="321:41" pos:end="321:47"><expr pos:start="321:41" pos:end="321:47"><name pos:start="321:41" pos:end="321:47">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <default pos:start="322:5" pos:end="322:12">default:</default>
                            <expr_stmt pos:start="323:29" pos:end="323:46"><expr pos:start="323:29" pos:end="323:46"><name pos:start="323:29" pos:end="323:46">ASC_ILLEGAL_OPCODE</name></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="323:48" pos:end="323:48">;</empty_stmt></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></for></block_content></block></block_content></block></function></unit>
