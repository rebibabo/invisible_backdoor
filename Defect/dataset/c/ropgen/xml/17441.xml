<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17441.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">get_cluster_table</name><parameter_list pos:start="1:29" pos:end="5:47">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:45">BlockDriverState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">bs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:66"><decl pos:start="1:52" pos:end="1:66"><type pos:start="1:52" pos:end="1:66"><name pos:start="1:52" pos:end="1:59">uint64_t</name></type> <name pos:start="1:61" pos:end="1:66">offset</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:52"><decl pos:start="3:30" pos:end="3:52"><type pos:start="3:30" pos:end="3:52"><name pos:start="3:30" pos:end="3:37">uint64_t</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier><modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:52">new_l2_table</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:46"><decl pos:start="5:30" pos:end="5:46"><type pos:start="5:30" pos:end="5:46"><name pos:start="5:30" pos:end="5:32">int</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:46">new_l2_index</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="103:1">{<block_content pos:start="9:5" pos:end="101:13">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVQcowState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:25">l1_index</name></decl>, <decl pos:start="11:28" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:28" pos:end="11:35">l2_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">l2_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint64_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:22">l2_table</name> <init pos:start="15:24" pos:end="15:29">= <expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:48">/* seek the the l2 offset in the l1 table */</comment>



    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:12">l1_index</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:21">offset</name> <operator pos:start="25:23" pos:end="25:24">&gt;&gt;</operator> <operator pos:start="25:26" pos:end="25:26">(</operator><name pos:start="25:27" pos:end="25:36"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:36">l2_bits</name></name> <operator pos:start="25:38" pos:end="25:38">+</operator> <name pos:start="25:40" pos:end="25:54"><name pos:start="25:40" pos:end="25:40">s</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:54">cluster_bits</name></name><operator pos:start="25:55" pos:end="25:55">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:31">(<expr pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:16">l1_index</name> <operator pos:start="27:18" pos:end="27:19">&gt;=</operator> <name pos:start="27:21" pos:end="27:30"><name pos:start="27:21" pos:end="27:21">s</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:30">l1_size</name></name></expr>)</condition> <block pos:start="27:33" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:9">

        <expr_stmt pos:start="29:9" pos:end="29:59"><expr pos:start="29:9" pos:end="29:58"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:58"><name pos:start="29:15" pos:end="29:33">qcow2_grow_l1_table</name><argument_list pos:start="29:34" pos:end="29:58">(<argument pos:start="29:35" pos:end="29:36"><expr pos:start="29:35" pos:end="29:36"><name pos:start="29:35" pos:end="29:36">bs</name></expr></argument>, <argument pos:start="29:39" pos:end="29:50"><expr pos:start="29:39" pos:end="29:50"><name pos:start="29:39" pos:end="29:46">l1_index</name> <operator pos:start="29:48" pos:end="29:48">+</operator> <literal type="number" pos:start="29:50" pos:end="29:50">1</literal></expr></argument>, <argument pos:start="29:53" pos:end="29:57"><expr pos:start="29:53" pos:end="29:57"><name pos:start="29:53" pos:end="29:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:20">(<expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">&lt;</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>)</condition> <block pos:start="31:22" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:23">

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:56"><expr pos:start="41:5" pos:end="41:55"><name pos:start="41:5" pos:end="41:13">l2_offset</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:37"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:27">l1_table</name><index pos:start="41:28" pos:end="41:37">[<expr pos:start="41:29" pos:end="41:36"><name pos:start="41:29" pos:end="41:36">l1_index</name></expr>]</index></name> <operator pos:start="41:39" pos:end="41:39">&amp;</operator> <name pos:start="41:41" pos:end="41:55">L1E_OFFSET_MASK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:50">/* seek the l2 table of the given l2 offset */</comment>



    <if_stmt pos:start="49:5" pos:end="83:5"><if pos:start="49:5" pos:end="61:5">if <condition pos:start="49:8" pos:end="49:50">(<expr pos:start="49:9" pos:end="49:49"><name pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:19">l1_table</name><index pos:start="49:20" pos:end="49:29">[<expr pos:start="49:21" pos:end="49:28"><name pos:start="49:21" pos:end="49:28">l1_index</name></expr>]</index></name> <operator pos:start="49:31" pos:end="49:31">&amp;</operator> <name pos:start="49:33" pos:end="49:49">QCOW_OFLAG_COPIED</name></expr>)</condition> <block pos:start="49:52" pos:end="61:5">{<block_content pos:start="53:9" pos:end="59:9">

        <comment type="block" pos:start="51:9" pos:end="51:41">/* load the l2 table in memory */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:48"><expr pos:start="53:9" pos:end="53:47"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:47"><name pos:start="53:15" pos:end="53:21">l2_load</name><argument_list pos:start="53:22" pos:end="53:47">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">bs</name></expr></argument>, <argument pos:start="53:27" pos:end="53:35"><expr pos:start="53:27" pos:end="53:35"><name pos:start="53:27" pos:end="53:35">l2_offset</name></expr></argument>, <argument pos:start="53:38" pos:end="53:46"><expr pos:start="53:38" pos:end="53:46"><operator pos:start="53:38" pos:end="53:38">&amp;</operator><name pos:start="53:39" pos:end="53:46">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:23">

            <return pos:start="57:13" pos:end="57:23">return <expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="83:5">else <block pos:start="61:12" pos:end="83:5">{<block_content pos:start="65:9" pos:end="81:9">

        <comment type="block" pos:start="63:9" pos:end="63:66">/* First allocate a new L2 table (and do COW if needed) */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:51"><expr pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:50"><name pos:start="65:15" pos:end="65:25">l2_allocate</name><argument_list pos:start="65:26" pos:end="65:50">(<argument pos:start="65:27" pos:end="65:28"><expr pos:start="65:27" pos:end="65:28"><name pos:start="65:27" pos:end="65:28">bs</name></expr></argument>, <argument pos:start="65:31" pos:end="65:38"><expr pos:start="65:31" pos:end="65:38"><name pos:start="65:31" pos:end="65:38">l1_index</name></expr></argument>, <argument pos:start="65:41" pos:end="65:49"><expr pos:start="65:41" pos:end="65:49"><operator pos:start="65:41" pos:end="65:41">&amp;</operator><name pos:start="65:42" pos:end="65:49">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:20">(<expr pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">&lt;</operator> <literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>)</condition> <block pos:start="67:22" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:23">

            <return pos:start="69:13" pos:end="69:23">return <expr pos:start="69:20" pos:end="69:22"><name pos:start="69:20" pos:end="69:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="75:9" pos:end="75:57">/* Then decrease the refcount of the old table */</comment>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:22">(<expr pos:start="77:13" pos:end="77:21"><name pos:start="77:13" pos:end="77:21">l2_offset</name></expr>)</condition> <block pos:start="77:24" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:78">

            <expr_stmt pos:start="79:13" pos:end="79:78"><expr pos:start="79:13" pos:end="79:77"><call pos:start="79:13" pos:end="79:77"><name pos:start="79:13" pos:end="79:31">qcow2_free_clusters</name><argument_list pos:start="79:32" pos:end="79:77">(<argument pos:start="79:33" pos:end="79:34"><expr pos:start="79:33" pos:end="79:34"><name pos:start="79:33" pos:end="79:34">bs</name></expr></argument>, <argument pos:start="79:37" pos:end="79:45"><expr pos:start="79:37" pos:end="79:45"><name pos:start="79:37" pos:end="79:45">l2_offset</name></expr></argument>, <argument pos:start="79:48" pos:end="79:76"><expr pos:start="79:48" pos:end="79:76"><name pos:start="79:48" pos:end="79:57"><name pos:start="79:48" pos:end="79:48">s</name><operator pos:start="79:49" pos:end="79:50">-&gt;</operator><name pos:start="79:51" pos:end="79:57">l2_size</name></name> <operator pos:start="79:59" pos:end="79:59">*</operator> <sizeof pos:start="79:61" pos:end="79:76">sizeof<argument_list pos:start="79:67" pos:end="79:76">(<argument pos:start="79:68" pos:end="79:75"><expr pos:start="79:68" pos:end="79:75"><name pos:start="79:68" pos:end="79:75">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:59">/* find the cluster offset for the given disk offset */</comment>



    <expr_stmt pos:start="91:5" pos:end="91:62"><expr pos:start="91:5" pos:end="91:61"><name pos:start="91:5" pos:end="91:12">l2_index</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <operator pos:start="91:16" pos:end="91:16">(</operator><name pos:start="91:17" pos:end="91:22">offset</name> <operator pos:start="91:24" pos:end="91:25">&gt;&gt;</operator> <name pos:start="91:27" pos:end="91:41"><name pos:start="91:27" pos:end="91:27">s</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:41">cluster_bits</name></name><operator pos:start="91:42" pos:end="91:42">)</operator> <operator pos:start="91:44" pos:end="91:44">&amp;</operator> <operator pos:start="91:46" pos:end="91:46">(</operator><name pos:start="91:47" pos:end="91:56"><name pos:start="91:47" pos:end="91:47">s</name><operator pos:start="91:48" pos:end="91:49">-&gt;</operator><name pos:start="91:50" pos:end="91:56">l2_size</name></name> <operator pos:start="91:58" pos:end="91:58">-</operator> <literal type="number" pos:start="91:60" pos:end="91:60">1</literal><operator pos:start="91:61" pos:end="91:61">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:29"><expr pos:start="95:5" pos:end="95:28"><operator pos:start="95:5" pos:end="95:5">*</operator><name pos:start="95:6" pos:end="95:17">new_l2_table</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <name pos:start="95:21" pos:end="95:28">l2_table</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><operator pos:start="97:5" pos:end="97:5">*</operator><name pos:start="97:6" pos:end="97:17">new_l2_index</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:28">l2_index</name></expr>;</expr_stmt>



    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
