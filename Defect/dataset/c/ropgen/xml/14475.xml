<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14475.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:35">qemu_tcg_cpu_thread_fn</name><parameter_list pos:start="1:36" pos:end="1:46">(<parameter pos:start="1:37" pos:end="1:45"><decl pos:start="1:37" pos:end="1:45"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:16">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:23">= <expr pos:start="5:21" pos:end="5:23"><name pos:start="5:21" pos:end="5:23">arg</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:32"><expr pos:start="9:5" pos:end="9:31"><call pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:29">qemu_tcg_init_cpu_signals</name><argument_list pos:start="9:30" pos:end="9:31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:38"><expr pos:start="11:5" pos:end="11:37"><call pos:start="11:5" pos:end="11:37"><name pos:start="11:5" pos:end="11:24">qemu_thread_get_self</name><argument_list pos:start="11:25" pos:end="11:37">(<argument pos:start="11:26" pos:end="11:36"><expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:28">cpu</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:36">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:40"><expr pos:start="15:5" pos:end="15:39"><call pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:19">qemu_mutex_lock</name><argument_list pos:start="15:20" pos:end="15:39">(<argument pos:start="15:21" pos:end="15:38"><expr pos:start="15:21" pos:end="15:38"><operator pos:start="15:21" pos:end="15:21">&amp;</operator><name pos:start="15:22" pos:end="15:38">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:15">CPU_FOREACH</name><argument_list pos:start="17:16" pos:end="17:20">(<argument pos:start="17:17" pos:end="17:19">cpu</argument>)</argument_list></macro> <block pos:start="17:22" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:27">

        <expr_stmt pos:start="19:9" pos:end="19:46"><expr pos:start="19:9" pos:end="19:45"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:11">cpu</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:22">thread_id</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <call pos:start="19:26" pos:end="19:45"><name pos:start="19:26" pos:end="19:43">qemu_get_thread_id</name><argument_list pos:start="19:44" pos:end="19:45">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:28"><expr pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:11">cpu</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:20">created</name></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <name pos:start="21:24" pos:end="21:27">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:34"><expr pos:start="23:9" pos:end="23:33"><name pos:start="23:9" pos:end="23:28"><name pos:start="23:9" pos:end="23:11">cpu</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:28">exception_index</name></name> <operator pos:start="23:30" pos:end="23:30">=</operator> <operator pos:start="23:32" pos:end="23:32">-</operator><literal type="number" pos:start="23:33" pos:end="23:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:11">cpu</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:22">can_do_io</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><call pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:20">qemu_cond_signal</name><argument_list pos:start="29:21" pos:end="29:36">(<argument pos:start="29:22" pos:end="29:35"><expr pos:start="29:22" pos:end="29:35"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:35">qemu_cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:55">/* wait for initial kick-off after machine start */</comment>

    <while pos:start="35:5" pos:end="49:5">while <condition pos:start="35:11" pos:end="35:40">(<expr pos:start="35:12" pos:end="35:39"><call pos:start="35:12" pos:end="35:30"><name pos:start="35:12" pos:end="35:23">QTAILQ_FIRST</name><argument_list pos:start="35:24" pos:end="35:30">(<argument pos:start="35:25" pos:end="35:29"><expr pos:start="35:25" pos:end="35:29"><operator pos:start="35:25" pos:end="35:25">&amp;</operator><name pos:start="35:26" pos:end="35:29">cpus</name></expr></argument>)</argument_list></call><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:39">stopped</name></expr>)</condition> <block pos:start="35:42" pos:end="49:5">{<block_content pos:start="37:9" pos:end="47:9">

        <expr_stmt pos:start="37:9" pos:end="37:58"><expr pos:start="37:9" pos:end="37:57"><call pos:start="37:9" pos:end="37:57"><name pos:start="37:9" pos:end="37:22">qemu_cond_wait</name><argument_list pos:start="37:23" pos:end="37:57">(<argument pos:start="37:24" pos:end="37:36"><expr pos:start="37:24" pos:end="37:36"><name pos:start="37:24" pos:end="37:36">tcg_halt_cond</name></expr></argument>, <argument pos:start="37:39" pos:end="37:56"><expr pos:start="37:39" pos:end="37:56"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:56">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:38">/* process any pending work */</comment>

        <macro pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:19">CPU_FOREACH</name><argument_list pos:start="43:20" pos:end="43:24">(<argument pos:start="43:21" pos:end="43:23">cpu</argument>)</argument_list></macro> <block pos:start="43:26" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:43">

            <expr_stmt pos:start="45:13" pos:end="45:43"><expr pos:start="45:13" pos:end="45:42"><call pos:start="45:13" pos:end="45:42"><name pos:start="45:13" pos:end="45:37">qemu_wait_io_event_common</name><argument_list pos:start="45:38" pos:end="45:42">(<argument pos:start="45:39" pos:end="45:41"><expr pos:start="45:39" pos:end="45:41"><name pos:start="45:39" pos:end="45:41">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></while>



    <while pos:start="53:5" pos:end="75:5">while <condition pos:start="53:11" pos:end="53:13">(<expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">1</literal></expr>)</condition> <block pos:start="53:15" pos:end="75:5">{<block_content pos:start="55:9" pos:end="73:33">

        <expr_stmt pos:start="55:9" pos:end="55:23"><expr pos:start="55:9" pos:end="55:22"><call pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:20">tcg_exec_all</name><argument_list pos:start="55:21" pos:end="55:22">()</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="71:9"><if pos:start="59:9" pos:end="71:9">if <condition pos:start="59:12" pos:end="59:23">(<expr pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:22">use_icount</name></expr>)</condition> <block pos:start="59:25" pos:end="71:9">{<block_content pos:start="61:13" pos:end="69:13">

            <decl_stmt pos:start="61:13" pos:end="61:78"><decl pos:start="61:13" pos:end="61:77"><type pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:19">int64_t</name></type> <name pos:start="61:21" pos:end="61:28">deadline</name> <init pos:start="61:30" pos:end="61:77">= <expr pos:start="61:32" pos:end="61:77"><call pos:start="61:32" pos:end="61:77"><name pos:start="61:32" pos:end="61:57">qemu_clock_deadline_ns_all</name><argument_list pos:start="61:58" pos:end="61:77">(<argument pos:start="61:59" pos:end="61:76"><expr pos:start="61:59" pos:end="61:76"><name pos:start="61:59" pos:end="61:76">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="65:13" pos:end="69:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:30">(<expr pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:24">deadline</name> <operator pos:start="65:26" pos:end="65:27">==</operator> <literal type="number" pos:start="65:29" pos:end="65:29">0</literal></expr>)</condition> <block pos:start="65:32" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:54">

                <expr_stmt pos:start="67:17" pos:end="67:54"><expr pos:start="67:17" pos:end="67:53"><call pos:start="67:17" pos:end="67:53"><name pos:start="67:17" pos:end="67:33">qemu_clock_notify</name><argument_list pos:start="67:34" pos:end="67:53">(<argument pos:start="67:35" pos:end="67:52"><expr pos:start="67:35" pos:end="67:52"><name pos:start="67:35" pos:end="67:52">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:33"><expr pos:start="73:9" pos:end="73:32"><call pos:start="73:9" pos:end="73:32"><name pos:start="73:9" pos:end="73:30">qemu_tcg_wait_io_event</name><argument_list pos:start="73:31" pos:end="73:32">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="79:5" pos:end="79:16">return <expr pos:start="79:12" pos:end="79:15"><name pos:start="79:12" pos:end="79:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
