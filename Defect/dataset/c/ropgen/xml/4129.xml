<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4129.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mirror_start_job</name><parameter_list pos:start="1:29" pos:end="21:71">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:45">BlockDriverState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">bs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:75"><decl pos:start="1:52" pos:end="1:75"><type pos:start="1:52" pos:end="1:75"><name pos:start="1:52" pos:end="1:67">BlockDriverState</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:75">target</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:49"><decl pos:start="3:30" pos:end="3:49"><type pos:start="3:30" pos:end="3:49"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:39">char</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:49">replaces</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:42"><decl pos:start="5:30" pos:end="5:42"><type pos:start="5:30" pos:end="5:42"><name pos:start="5:30" pos:end="5:36">int64_t</name></type> <name pos:start="5:38" pos:end="5:42">speed</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:64"><decl pos:start="5:45" pos:end="5:64"><type pos:start="5:45" pos:end="5:64"><name pos:start="5:45" pos:end="5:52">uint32_t</name></type> <name pos:start="5:54" pos:end="5:64">granularity</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:45"><decl pos:start="7:30" pos:end="7:45"><type pos:start="7:30" pos:end="7:45"><name pos:start="7:30" pos:end="7:36">int64_t</name></type> <name pos:start="7:38" pos:end="7:45">buf_size</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:60"><decl pos:start="9:30" pos:end="9:60"><type pos:start="9:30" pos:end="9:60"><name pos:start="9:30" pos:end="9:44">BlockdevOnError</name></type> <name pos:start="9:46" pos:end="9:60">on_source_error</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:60"><decl pos:start="11:30" pos:end="11:60"><type pos:start="11:30" pos:end="11:60"><name pos:start="11:30" pos:end="11:44">BlockdevOnError</name></type> <name pos:start="11:46" pos:end="11:60">on_target_error</name></decl></parameter>,

                             <parameter pos:start="13:30" pos:end="13:39"><decl pos:start="13:30" pos:end="13:39"><type pos:start="13:30" pos:end="13:39"><name pos:start="13:30" pos:end="13:33">bool</name></type> <name pos:start="13:35" pos:end="13:39">unmap</name></decl></parameter>,

                             <parameter pos:start="15:30" pos:end="15:52"><decl pos:start="15:30" pos:end="15:52"><type pos:start="15:30" pos:end="15:52"><name pos:start="15:30" pos:end="15:48">BlockCompletionFunc</name> <modifier pos:start="15:50" pos:end="15:50">*</modifier></type><name pos:start="15:51" pos:end="15:52">cb</name></decl></parameter>,

                             <parameter pos:start="17:30" pos:end="17:41"><decl pos:start="17:30" pos:end="17:41"><type pos:start="17:30" pos:end="17:41"><name pos:start="17:30" pos:end="17:33">void</name> <modifier pos:start="17:35" pos:end="17:35">*</modifier></type><name pos:start="17:36" pos:end="17:41">opaque</name></decl></parameter>, <parameter pos:start="17:44" pos:end="17:55"><decl pos:start="17:44" pos:end="17:55"><type pos:start="17:44" pos:end="17:55"><name pos:start="17:44" pos:end="17:48">Error</name> <modifier pos:start="17:50" pos:end="17:50">*</modifier><modifier pos:start="17:51" pos:end="17:51">*</modifier></type><name pos:start="17:52" pos:end="17:55">errp</name></decl></parameter>,

                             <parameter pos:start="19:30" pos:end="19:57"><decl pos:start="19:30" pos:end="19:57"><type pos:start="19:30" pos:end="19:57"><specifier pos:start="19:30" pos:end="19:34">const</specifier> <name pos:start="19:36" pos:end="19:49">BlockJobDriver</name> <modifier pos:start="19:51" pos:end="19:51">*</modifier></type><name pos:start="19:52" pos:end="19:57">driver</name></decl></parameter>,

                             <parameter pos:start="21:30" pos:end="21:46"><decl pos:start="21:30" pos:end="21:46"><type pos:start="21:30" pos:end="21:46"><name pos:start="21:30" pos:end="21:33">bool</name></type> <name pos:start="21:35" pos:end="21:46">is_none_mode</name></decl></parameter>, <parameter pos:start="21:49" pos:end="21:70"><decl pos:start="21:49" pos:end="21:70"><type pos:start="21:49" pos:end="21:70"><name pos:start="21:49" pos:end="21:64">BlockDriverState</name> <modifier pos:start="21:66" pos:end="21:66">*</modifier></type><name pos:start="21:67" pos:end="21:70">base</name></decl></parameter>)</parameter_list>

<block pos:start="23:1" pos:end="145:1">{<block_content pos:start="25:5" pos:end="143:42">

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:18">MirrorBlockJob</name> <modifier pos:start="25:20" pos:end="25:20">*</modifier></type><name pos:start="25:21" pos:end="25:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:34"><decl pos:start="27:5" pos:end="27:33"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:20">BlockDriverState</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:33">replaced_bs</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:25">(<expr pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:19">granularity</name> <operator pos:start="31:21" pos:end="31:22">==</operator> <literal type="number" pos:start="31:24" pos:end="31:24">0</literal></expr>)</condition> <block pos:start="31:27" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:66">

        <expr_stmt pos:start="33:9" pos:end="33:66"><expr pos:start="33:9" pos:end="33:65"><name pos:start="33:9" pos:end="33:19">granularity</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:65"><name pos:start="33:23" pos:end="33:57">bdrv_get_default_bitmap_granularity</name><argument_list pos:start="33:58" pos:end="33:65">(<argument pos:start="33:59" pos:end="33:64"><expr pos:start="33:59" pos:end="33:64"><name pos:start="33:59" pos:end="33:64">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:52"><expr pos:start="39:5" pos:end="39:51"><call pos:start="39:5" pos:end="39:51"><name pos:start="39:5" pos:end="39:10">assert</name> <argument_list pos:start="39:12" pos:end="39:51">(<argument pos:start="39:13" pos:end="39:50"><expr pos:start="39:13" pos:end="39:50"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:24">granularity</name> <operator pos:start="39:26" pos:end="39:26">&amp;</operator> <operator pos:start="39:28" pos:end="39:28">(</operator><name pos:start="39:29" pos:end="39:39">granularity</name> <operator pos:start="39:41" pos:end="39:41">-</operator> <literal type="number" pos:start="39:43" pos:end="39:43">1</literal><operator pos:start="39:44" pos:end="39:44">)</operator><operator pos:start="39:45" pos:end="39:45">)</operator> <operator pos:start="39:47" pos:end="39:48">==</operator> <literal type="number" pos:start="39:50" pos:end="39:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:21">(<expr pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:16">buf_size</name> <operator pos:start="43:18" pos:end="43:18">&lt;</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>)</condition> <block pos:start="43:23" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:15">

        <expr_stmt pos:start="45:9" pos:end="45:57"><expr pos:start="45:9" pos:end="45:56"><call pos:start="45:9" pos:end="45:56"><name pos:start="45:9" pos:end="45:18">error_setg</name><argument_list pos:start="45:19" pos:end="45:56">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">errp</name></expr></argument>, <argument pos:start="45:26" pos:end="45:55"><expr pos:start="45:26" pos:end="45:55"><literal type="string" pos:start="45:26" pos:end="45:55">"Invalid parameter 'buf-size'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:22">(<expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:16">buf_size</name> <operator pos:start="53:18" pos:end="53:19">==</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>)</condition> <block pos:start="53:24" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:43">

        <expr_stmt pos:start="55:9" pos:end="55:43"><expr pos:start="55:9" pos:end="55:42"><name pos:start="55:9" pos:end="55:16">buf_size</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:42">DEFAULT_MIRROR_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="63:54">/* We can't support this case as long as the block layer can't handle

     * multiple BlockBackends per BlockDriverState. */</comment>

    <if_stmt pos:start="65:5" pos:end="79:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">replaces</name></expr>)</condition> <block pos:start="65:19" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:9">

        <expr_stmt pos:start="67:9" pos:end="67:63"><expr pos:start="67:9" pos:end="67:62"><name pos:start="67:9" pos:end="67:19">replaced_bs</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:62"><name pos:start="67:23" pos:end="67:36">bdrv_lookup_bs</name><argument_list pos:start="67:37" pos:end="67:62">(<argument pos:start="67:38" pos:end="67:45"><expr pos:start="67:38" pos:end="67:45"><name pos:start="67:38" pos:end="67:45">replaces</name></expr></argument>, <argument pos:start="67:48" pos:end="67:55"><expr pos:start="67:48" pos:end="67:55"><name pos:start="67:48" pos:end="67:55">replaces</name></expr></argument>, <argument pos:start="67:58" pos:end="67:61"><expr pos:start="67:58" pos:end="67:61"><name pos:start="67:58" pos:end="67:61">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:32">(<expr pos:start="69:13" pos:end="69:31"><name pos:start="69:13" pos:end="69:23">replaced_bs</name> <operator pos:start="69:25" pos:end="69:26">==</operator> <name pos:start="69:28" pos:end="69:31">NULL</name></expr>)</condition> <block pos:start="69:34" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:19">

            <return pos:start="71:13" pos:end="71:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:25">

        <expr_stmt pos:start="77:9" pos:end="77:25"><expr pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:19">replaced_bs</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:24">bs</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:40">(<expr pos:start="81:9" pos:end="81:39"><name pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:19">replaced_bs</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:24">blk</name></name> <operator pos:start="81:26" pos:end="81:27">&amp;&amp;</operator> <name pos:start="81:29" pos:end="81:39"><name pos:start="81:29" pos:end="81:34">target</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:39">blk</name></name></expr>)</condition> <block pos:start="81:42" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:15">

        <expr_stmt pos:start="83:9" pos:end="83:69"><expr pos:start="83:9" pos:end="83:68"><call pos:start="83:9" pos:end="83:68"><name pos:start="83:9" pos:end="83:18">error_setg</name><argument_list pos:start="83:19" pos:end="83:68">(<argument pos:start="83:20" pos:end="83:23"><expr pos:start="83:20" pos:end="83:23"><name pos:start="83:20" pos:end="83:23">errp</name></expr></argument>, <argument pos:start="83:26" pos:end="83:67"><expr pos:start="83:26" pos:end="83:67"><literal type="string" pos:start="83:26" pos:end="83:67">"Can't create node with two BlockBackends"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:62"><expr pos:start="91:5" pos:end="91:61"><name pos:start="91:5" pos:end="91:5">s</name> <operator pos:start="91:7" pos:end="91:7">=</operator> <call pos:start="91:9" pos:end="91:61"><name pos:start="91:9" pos:end="91:24">block_job_create</name><argument_list pos:start="91:25" pos:end="91:61">(<argument pos:start="91:26" pos:end="91:31"><expr pos:start="91:26" pos:end="91:31"><name pos:start="91:26" pos:end="91:31">driver</name></expr></argument>, <argument pos:start="91:34" pos:end="91:35"><expr pos:start="91:34" pos:end="91:35"><name pos:start="91:34" pos:end="91:35">bs</name></expr></argument>, <argument pos:start="91:38" pos:end="91:42"><expr pos:start="91:38" pos:end="91:42"><name pos:start="91:38" pos:end="91:42">speed</name></expr></argument>, <argument pos:start="91:45" pos:end="91:46"><expr pos:start="91:45" pos:end="91:46"><name pos:start="91:45" pos:end="91:46">cb</name></expr></argument>, <argument pos:start="91:49" pos:end="91:54"><expr pos:start="91:49" pos:end="91:54"><name pos:start="91:49" pos:end="91:54">opaque</name></expr></argument>, <argument pos:start="91:57" pos:end="91:60"><expr pos:start="91:57" pos:end="91:60"><name pos:start="91:57" pos:end="91:60">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:11">(<expr pos:start="93:9" pos:end="93:10"><operator pos:start="93:9" pos:end="93:9">!</operator><name pos:start="93:10" pos:end="93:10">s</name></expr>)</condition> <block pos:start="93:13" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:15">

        <return pos:start="95:9" pos:end="95:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:37"><expr pos:start="101:5" pos:end="101:36"><name pos:start="101:5" pos:end="101:15"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:15">replaces</name></name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:36"><name pos:start="101:19" pos:end="101:26">g_strdup</name><argument_list pos:start="101:27" pos:end="101:36">(<argument pos:start="101:28" pos:end="101:35"><expr pos:start="101:28" pos:end="101:35"><name pos:start="101:28" pos:end="101:35">replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:22"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:22">on_source_error</name></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <name pos:start="103:26" pos:end="103:40">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:41"><expr pos:start="105:5" pos:end="105:40"><name pos:start="105:5" pos:end="105:22"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:22">on_target_error</name></name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:40">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:23"><expr pos:start="107:5" pos:end="107:22"><name pos:start="107:5" pos:end="107:13"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:13">target</name></name> <operator pos:start="107:15" pos:end="107:15">=</operator> <name pos:start="107:17" pos:end="107:22">target</name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:35"><expr pos:start="109:5" pos:end="109:34"><name pos:start="109:5" pos:end="109:19"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:19">is_none_mode</name></name> <operator pos:start="109:21" pos:end="109:21">=</operator> <name pos:start="109:23" pos:end="109:34">is_none_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:19"><expr pos:start="111:5" pos:end="111:18"><name pos:start="111:5" pos:end="111:11"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:11">base</name></name> <operator pos:start="111:13" pos:end="111:13">=</operator> <name pos:start="111:15" pos:end="111:18">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:33"><expr pos:start="113:5" pos:end="113:32"><name pos:start="113:5" pos:end="113:18"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:18">granularity</name></name> <operator pos:start="113:20" pos:end="113:20">=</operator> <name pos:start="113:22" pos:end="113:32">granularity</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:50"><expr pos:start="115:5" pos:end="115:49"><name pos:start="115:5" pos:end="115:15"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:15">buf_size</name></name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="115:49"><name pos:start="115:19" pos:end="115:26">ROUND_UP</name><argument_list pos:start="115:27" pos:end="115:49">(<argument pos:start="115:28" pos:end="115:35"><expr pos:start="115:28" pos:end="115:35"><name pos:start="115:28" pos:end="115:35">buf_size</name></expr></argument>, <argument pos:start="115:38" pos:end="115:48"><expr pos:start="115:38" pos:end="115:48"><name pos:start="115:38" pos:end="115:48">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:21"><expr pos:start="117:5" pos:end="117:20"><name pos:start="117:5" pos:end="117:12"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:12">unmap</name></name> <operator pos:start="117:14" pos:end="117:14">=</operator> <name pos:start="117:16" pos:end="117:20">unmap</name></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:76"><expr pos:start="121:5" pos:end="121:75"><name pos:start="121:5" pos:end="121:19"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:19">dirty_bitmap</name></name> <operator pos:start="121:21" pos:end="121:21">=</operator> <call pos:start="121:23" pos:end="121:75"><name pos:start="121:23" pos:end="121:46">bdrv_create_dirty_bitmap</name><argument_list pos:start="121:47" pos:end="121:75">(<argument pos:start="121:48" pos:end="121:49"><expr pos:start="121:48" pos:end="121:49"><name pos:start="121:48" pos:end="121:49">bs</name></expr></argument>, <argument pos:start="121:52" pos:end="121:62"><expr pos:start="121:52" pos:end="121:62"><name pos:start="121:52" pos:end="121:62">granularity</name></expr></argument>, <argument pos:start="121:65" pos:end="121:68"><expr pos:start="121:65" pos:end="121:68"><name pos:start="121:65" pos:end="121:68">NULL</name></expr></argument>, <argument pos:start="121:71" pos:end="121:74"><expr pos:start="121:71" pos:end="121:74"><name pos:start="121:71" pos:end="121:74">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:25">(<expr pos:start="123:9" pos:end="123:24"><operator pos:start="123:9" pos:end="123:9">!</operator><name pos:start="123:10" pos:end="123:24"><name pos:start="123:10" pos:end="123:10">s</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:24">dirty_bitmap</name></name></expr>)</condition> <block pos:start="123:27" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:15">

        <expr_stmt pos:start="125:9" pos:end="125:28"><expr pos:start="125:9" pos:end="125:27"><call pos:start="125:9" pos:end="125:27"><name pos:start="125:9" pos:end="125:14">g_free</name><argument_list pos:start="125:15" pos:end="125:27">(<argument pos:start="125:16" pos:end="125:26"><expr pos:start="125:16" pos:end="125:26"><name pos:start="125:16" pos:end="125:26"><name pos:start="125:16" pos:end="125:16">s</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:26">replaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:36"><expr pos:start="127:9" pos:end="127:35"><call pos:start="127:9" pos:end="127:35"><name pos:start="127:9" pos:end="127:23">block_job_unref</name><argument_list pos:start="127:24" pos:end="127:35">(<argument pos:start="127:25" pos:end="127:34"><expr pos:start="127:25" pos:end="127:34"><operator pos:start="127:25" pos:end="127:25">&amp;</operator><name pos:start="127:26" pos:end="127:34"><name pos:start="127:26" pos:end="127:26">s</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:34">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:52"><expr pos:start="135:5" pos:end="135:51"><call pos:start="135:5" pos:end="135:51"><name pos:start="135:5" pos:end="135:21">bdrv_op_block_all</name><argument_list pos:start="135:22" pos:end="135:51">(<argument pos:start="135:23" pos:end="135:31"><expr pos:start="135:23" pos:end="135:31"><name pos:start="135:23" pos:end="135:31"><name pos:start="135:23" pos:end="135:23">s</name><operator pos:start="135:24" pos:end="135:25">-&gt;</operator><name pos:start="135:26" pos:end="135:31">target</name></name></expr></argument>, <argument pos:start="135:34" pos:end="135:50"><expr pos:start="135:34" pos:end="135:50"><name pos:start="135:34" pos:end="135:50"><name pos:start="135:34" pos:end="135:34">s</name><operator pos:start="135:35" pos:end="135:36">-&gt;</operator><name pos:start="135:37" pos:end="135:42">common</name><operator pos:start="135:43" pos:end="135:43">.</operator><name pos:start="135:44" pos:end="135:50">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:53"><expr pos:start="139:5" pos:end="139:52"><name pos:start="139:5" pos:end="139:16"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:13">common</name><operator pos:start="139:14" pos:end="139:14">.</operator><name pos:start="139:15" pos:end="139:16">co</name></name> <operator pos:start="139:18" pos:end="139:18">=</operator> <call pos:start="139:20" pos:end="139:52"><name pos:start="139:20" pos:end="139:40">qemu_coroutine_create</name><argument_list pos:start="139:41" pos:end="139:52">(<argument pos:start="139:42" pos:end="139:51"><expr pos:start="139:42" pos:end="139:51"><name pos:start="139:42" pos:end="139:51">mirror_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:52"><expr pos:start="141:5" pos:end="141:51"><call pos:start="141:5" pos:end="141:51"><name pos:start="141:5" pos:end="141:22">trace_mirror_start</name><argument_list pos:start="141:23" pos:end="141:51">(<argument pos:start="141:24" pos:end="141:25"><expr pos:start="141:24" pos:end="141:25"><name pos:start="141:24" pos:end="141:25">bs</name></expr></argument>, <argument pos:start="141:28" pos:end="141:28"><expr pos:start="141:28" pos:end="141:28"><name pos:start="141:28" pos:end="141:28">s</name></expr></argument>, <argument pos:start="141:31" pos:end="141:42"><expr pos:start="141:31" pos:end="141:42"><name pos:start="141:31" pos:end="141:42"><name pos:start="141:31" pos:end="141:31">s</name><operator pos:start="141:32" pos:end="141:33">-&gt;</operator><name pos:start="141:34" pos:end="141:39">common</name><operator pos:start="141:40" pos:end="141:40">.</operator><name pos:start="141:41" pos:end="141:42">co</name></name></expr></argument>, <argument pos:start="141:45" pos:end="141:50"><expr pos:start="141:45" pos:end="141:50"><name pos:start="141:45" pos:end="141:50">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:42"><expr pos:start="143:5" pos:end="143:41"><call pos:start="143:5" pos:end="143:41"><name pos:start="143:5" pos:end="143:24">qemu_coroutine_enter</name><argument_list pos:start="143:25" pos:end="143:41">(<argument pos:start="143:26" pos:end="143:37"><expr pos:start="143:26" pos:end="143:37"><name pos:start="143:26" pos:end="143:37"><name pos:start="143:26" pos:end="143:26">s</name><operator pos:start="143:27" pos:end="143:28">-&gt;</operator><name pos:start="143:29" pos:end="143:34">common</name><operator pos:start="143:35" pos:end="143:35">.</operator><name pos:start="143:36" pos:end="143:37">co</name></name></expr></argument>, <argument pos:start="143:40" pos:end="143:40"><expr pos:start="143:40" pos:end="143:40"><name pos:start="143:40" pos:end="143:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
