<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15821.c" pos:tabs="8"><function pos:start="1:1" pos:end="345:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mirror_start_job</name><parameter_list pos:start="1:29" pos:end="29:42">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">job_id</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">BlockDriverState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">bs</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:47">creation_flags</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:73"><decl pos:start="3:50" pos:end="3:73"><type pos:start="3:50" pos:end="3:73"><name pos:start="3:50" pos:end="3:65">BlockDriverState</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:73">target</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:49"><decl pos:start="5:30" pos:end="5:49"><type pos:start="5:30" pos:end="5:49"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:39">char</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:49">replaces</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:64"><decl pos:start="5:52" pos:end="5:64"><type pos:start="5:52" pos:end="5:64"><name pos:start="5:52" pos:end="5:58">int64_t</name></type> <name pos:start="5:60" pos:end="5:64">speed</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:49"><decl pos:start="7:30" pos:end="7:49"><type pos:start="7:30" pos:end="7:49"><name pos:start="7:30" pos:end="7:37">uint32_t</name></type> <name pos:start="7:39" pos:end="7:49">granularity</name></decl></parameter>, <parameter pos:start="7:52" pos:end="7:67"><decl pos:start="7:52" pos:end="7:67"><type pos:start="7:52" pos:end="7:67"><name pos:start="7:52" pos:end="7:58">int64_t</name></type> <name pos:start="7:60" pos:end="7:67">buf_size</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:64"><decl pos:start="9:30" pos:end="9:64"><type pos:start="9:30" pos:end="9:64"><name pos:start="9:30" pos:end="9:51">BlockMirrorBackingMode</name></type> <name pos:start="9:53" pos:end="9:64">backing_mode</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:60"><decl pos:start="11:30" pos:end="11:60"><type pos:start="11:30" pos:end="11:60"><name pos:start="11:30" pos:end="11:44">BlockdevOnError</name></type> <name pos:start="11:46" pos:end="11:60">on_source_error</name></decl></parameter>,

                             <parameter pos:start="13:30" pos:end="13:60"><decl pos:start="13:30" pos:end="13:60"><type pos:start="13:30" pos:end="13:60"><name pos:start="13:30" pos:end="13:44">BlockdevOnError</name></type> <name pos:start="13:46" pos:end="13:60">on_target_error</name></decl></parameter>,

                             <parameter pos:start="15:30" pos:end="15:39"><decl pos:start="15:30" pos:end="15:39"><type pos:start="15:30" pos:end="15:39"><name pos:start="15:30" pos:end="15:33">bool</name></type> <name pos:start="15:35" pos:end="15:39">unmap</name></decl></parameter>,

                             <parameter pos:start="17:30" pos:end="17:52"><decl pos:start="17:30" pos:end="17:52"><type pos:start="17:30" pos:end="17:52"><name pos:start="17:30" pos:end="17:48">BlockCompletionFunc</name> <modifier pos:start="17:50" pos:end="17:50">*</modifier></type><name pos:start="17:51" pos:end="17:52">cb</name></decl></parameter>,

                             <parameter pos:start="19:30" pos:end="19:41"><decl pos:start="19:30" pos:end="19:41"><type pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:33">void</name> <modifier pos:start="19:35" pos:end="19:35">*</modifier></type><name pos:start="19:36" pos:end="19:41">opaque</name></decl></parameter>,

                             <parameter pos:start="21:30" pos:end="21:57"><decl pos:start="21:30" pos:end="21:57"><type pos:start="21:30" pos:end="21:57"><specifier pos:start="21:30" pos:end="21:34">const</specifier> <name pos:start="21:36" pos:end="21:49">BlockJobDriver</name> <modifier pos:start="21:51" pos:end="21:51">*</modifier></type><name pos:start="21:52" pos:end="21:57">driver</name></decl></parameter>,

                             <parameter pos:start="23:30" pos:end="23:46"><decl pos:start="23:30" pos:end="23:46"><type pos:start="23:30" pos:end="23:46"><name pos:start="23:30" pos:end="23:33">bool</name></type> <name pos:start="23:35" pos:end="23:46">is_none_mode</name></decl></parameter>, <parameter pos:start="23:49" pos:end="23:70"><decl pos:start="23:49" pos:end="23:70"><type pos:start="23:49" pos:end="23:70"><name pos:start="23:49" pos:end="23:64">BlockDriverState</name> <modifier pos:start="23:66" pos:end="23:66">*</modifier></type><name pos:start="23:67" pos:end="23:70">base</name></decl></parameter>,

                             <parameter pos:start="25:30" pos:end="25:47"><decl pos:start="25:30" pos:end="25:47"><type pos:start="25:30" pos:end="25:47"><name pos:start="25:30" pos:end="25:33">bool</name></type> <name pos:start="25:35" pos:end="25:47">auto_complete</name></decl></parameter>, <parameter pos:start="25:50" pos:end="25:77"><decl pos:start="25:50" pos:end="25:77"><type pos:start="25:50" pos:end="25:77"><specifier pos:start="25:50" pos:end="25:54">const</specifier> <name pos:start="25:56" pos:end="25:59">char</name> <modifier pos:start="25:61" pos:end="25:61">*</modifier></type><name pos:start="25:62" pos:end="25:77">filter_node_name</name></decl></parameter>,

                             <parameter pos:start="27:30" pos:end="27:43"><decl pos:start="27:30" pos:end="27:43"><type pos:start="27:30" pos:end="27:43"><name pos:start="27:30" pos:end="27:33">bool</name></type> <name pos:start="27:35" pos:end="27:43">is_mirror</name></decl></parameter>,

                             <parameter pos:start="29:30" pos:end="29:41"><decl pos:start="29:30" pos:end="29:41"><type pos:start="29:30" pos:end="29:41"><name pos:start="29:30" pos:end="29:34">Error</name> <modifier pos:start="29:36" pos:end="29:36">*</modifier><modifier pos:start="29:37" pos:end="29:37">*</modifier></type><name pos:start="29:38" pos:end="29:41">errp</name></decl></parameter>)</parameter_list>

<block pos:start="31:1" pos:end="345:1">{<block_content pos:start="33:5" pos:end="343:30">

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:18">MirrorBlockJob</name> <modifier pos:start="33:20" pos:end="33:20">*</modifier></type><name pos:start="33:21" pos:end="33:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:36"><decl pos:start="35:5" pos:end="35:35"><type pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:20">BlockDriverState</name> <modifier pos:start="35:22" pos:end="35:22">*</modifier></type><name pos:start="35:23" pos:end="35:35">mirror_top_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:26"><decl pos:start="37:5" pos:end="37:25"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">bool</name></type> <name pos:start="37:10" pos:end="37:25">target_graph_mod</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:27"><decl pos:start="39:5" pos:end="39:26"><type pos:start="39:5" pos:end="39:8"><name pos:start="39:5" pos:end="39:8">bool</name></type> <name pos:start="39:10" pos:end="39:26">target_is_backing</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:28"><decl pos:start="41:5" pos:end="41:27"><type pos:start="41:5" pos:end="41:11"><name pos:start="41:5" pos:end="41:9">Error</name> <modifier pos:start="41:11" pos:end="41:11">*</modifier></type><name pos:start="41:12" pos:end="41:20">local_err</name> <init pos:start="41:22" pos:end="41:27">= <expr pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:12"><decl pos:start="43:5" pos:end="43:11"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:25">(<expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:19">granularity</name> <operator pos:start="47:21" pos:end="47:22">==</operator> <literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>)</condition> <block pos:start="47:27" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:66">

        <expr_stmt pos:start="49:9" pos:end="49:66"><expr pos:start="49:9" pos:end="49:65"><name pos:start="49:9" pos:end="49:19">granularity</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <call pos:start="49:23" pos:end="49:65"><name pos:start="49:23" pos:end="49:57">bdrv_get_default_bitmap_granularity</name><argument_list pos:start="49:58" pos:end="49:65">(<argument pos:start="49:59" pos:end="49:64"><expr pos:start="49:59" pos:end="49:64"><name pos:start="49:59" pos:end="49:64">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:52"><expr pos:start="55:5" pos:end="55:51"><call pos:start="55:5" pos:end="55:51"><name pos:start="55:5" pos:end="55:10">assert</name> <argument_list pos:start="55:12" pos:end="55:51">(<argument pos:start="55:13" pos:end="55:50"><expr pos:start="55:13" pos:end="55:50"><operator pos:start="55:13" pos:end="55:13">(</operator><name pos:start="55:14" pos:end="55:24">granularity</name> <operator pos:start="55:26" pos:end="55:26">&amp;</operator> <operator pos:start="55:28" pos:end="55:28">(</operator><name pos:start="55:29" pos:end="55:39">granularity</name> <operator pos:start="55:41" pos:end="55:41">-</operator> <literal type="number" pos:start="55:43" pos:end="55:43">1</literal><operator pos:start="55:44" pos:end="55:44">)</operator><operator pos:start="55:45" pos:end="55:45">)</operator> <operator pos:start="55:47" pos:end="55:48">==</operator> <literal type="number" pos:start="55:50" pos:end="55:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:72">/* Granularity must be large enough for sector-based dirty bitmap */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:44"><expr pos:start="59:5" pos:end="59:43"><call pos:start="59:5" pos:end="59:43"><name pos:start="59:5" pos:end="59:10">assert</name><argument_list pos:start="59:11" pos:end="59:43">(<argument pos:start="59:12" pos:end="59:42"><expr pos:start="59:12" pos:end="59:42"><name pos:start="59:12" pos:end="59:22">granularity</name> <operator pos:start="59:24" pos:end="59:25">&gt;=</operator> <name pos:start="59:27" pos:end="59:42">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:21">(<expr pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:16">buf_size</name> <operator pos:start="63:18" pos:end="63:18">&lt;</operator> <literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr>)</condition> <block pos:start="63:23" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:15">

        <expr_stmt pos:start="65:9" pos:end="65:57"><expr pos:start="65:9" pos:end="65:56"><call pos:start="65:9" pos:end="65:56"><name pos:start="65:9" pos:end="65:18">error_setg</name><argument_list pos:start="65:19" pos:end="65:56">(<argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">errp</name></expr></argument>, <argument pos:start="65:26" pos:end="65:55"><expr pos:start="65:26" pos:end="65:55"><literal type="string" pos:start="65:26" pos:end="65:55">"Invalid parameter 'buf-size'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:22">(<expr pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:16">buf_size</name> <operator pos:start="73:18" pos:end="73:19">==</operator> <literal type="number" pos:start="73:21" pos:end="73:21">0</literal></expr>)</condition> <block pos:start="73:24" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:43">

        <expr_stmt pos:start="75:9" pos:end="75:43"><expr pos:start="75:9" pos:end="75:42"><name pos:start="75:9" pos:end="75:16">buf_size</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <name pos:start="75:20" pos:end="75:42">DEFAULT_MIRROR_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="81:5" pos:end="85:37">/* In the case of active commit, add dummy driver to provide consistent

     * reads on the top, while disabling it in the intermediate nodes, and make

     * the backing chain writable. */</comment>

    <expr_stmt pos:start="87:5" pos:end="89:60"><expr pos:start="87:5" pos:end="89:59"><name pos:start="87:5" pos:end="87:17">mirror_top_bs</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <call pos:start="87:21" pos:end="89:59"><name pos:start="87:21" pos:end="87:40">bdrv_new_open_driver</name><argument_list pos:start="87:41" pos:end="89:59">(<argument pos:start="87:42" pos:end="87:57"><expr pos:start="87:42" pos:end="87:57"><operator pos:start="87:42" pos:end="87:42">&amp;</operator><name pos:start="87:43" pos:end="87:57">bdrv_mirror_top</name></expr></argument>, <argument pos:start="87:60" pos:end="87:75"><expr pos:start="87:60" pos:end="87:75"><name pos:start="87:60" pos:end="87:75">filter_node_name</name></expr></argument>,

                                         <argument pos:start="89:42" pos:end="89:52"><expr pos:start="89:42" pos:end="89:52"><name pos:start="89:42" pos:end="89:52">BDRV_O_RDWR</name></expr></argument>, <argument pos:start="89:55" pos:end="89:58"><expr pos:start="89:55" pos:end="89:58"><name pos:start="89:55" pos:end="89:58">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:30">(<expr pos:start="91:9" pos:end="91:29"><name pos:start="91:9" pos:end="91:21">mirror_top_bs</name> <operator pos:start="91:23" pos:end="91:24">==</operator> <name pos:start="91:26" pos:end="91:29">NULL</name></expr>)</condition> <block pos:start="91:32" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:15">

        <return pos:start="93:9" pos:end="93:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:26">(<expr pos:start="97:9" pos:end="97:25"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:25">filter_node_name</name></expr>)</condition> <block pos:start="97:28" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:39">

        <expr_stmt pos:start="99:9" pos:end="99:39"><expr pos:start="99:9" pos:end="99:38"><name pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:21">mirror_top_bs</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:31">implicit</name></name> <operator pos:start="99:33" pos:end="99:33">=</operator> <name pos:start="99:35" pos:end="99:38">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:53"><expr pos:start="103:5" pos:end="103:52"><name pos:start="103:5" pos:end="103:32"><name pos:start="103:5" pos:end="103:17">mirror_top_bs</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:32">total_sectors</name></name> <operator pos:start="103:34" pos:end="103:34">=</operator> <name pos:start="103:36" pos:end="103:52"><name pos:start="103:36" pos:end="103:37">bs</name><operator pos:start="103:38" pos:end="103:39">-&gt;</operator><name pos:start="103:40" pos:end="103:52">total_sectors</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:66"><expr pos:start="105:5" pos:end="105:65"><call pos:start="105:5" pos:end="105:65"><name pos:start="105:5" pos:end="105:24">bdrv_set_aio_context</name><argument_list pos:start="105:25" pos:end="105:65">(<argument pos:start="105:26" pos:end="105:38"><expr pos:start="105:26" pos:end="105:38"><name pos:start="105:26" pos:end="105:38">mirror_top_bs</name></expr></argument>, <argument pos:start="105:41" pos:end="105:64"><expr pos:start="105:41" pos:end="105:64"><call pos:start="105:41" pos:end="105:64"><name pos:start="105:41" pos:end="105:60">bdrv_get_aio_context</name><argument_list pos:start="105:61" pos:end="105:64">(<argument pos:start="105:62" pos:end="105:63"><expr pos:start="105:62" pos:end="105:63"><name pos:start="105:62" pos:end="105:63">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="111:78">/* bdrv_append takes ownership of the mirror_top_bs reference, need to keep

     * it alive until block_job_create() succeeds even if bs has no parent. */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:28"><expr pos:start="113:5" pos:end="113:27"><call pos:start="113:5" pos:end="113:27"><name pos:start="113:5" pos:end="113:12">bdrv_ref</name><argument_list pos:start="113:13" pos:end="113:27">(<argument pos:start="113:14" pos:end="113:26"><expr pos:start="113:14" pos:end="113:26"><name pos:start="113:14" pos:end="113:26">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:27"><expr pos:start="115:5" pos:end="115:26"><call pos:start="115:5" pos:end="115:26"><name pos:start="115:5" pos:end="115:22">bdrv_drained_begin</name><argument_list pos:start="115:23" pos:end="115:26">(<argument pos:start="115:24" pos:end="115:25"><expr pos:start="115:24" pos:end="115:25"><name pos:start="115:24" pos:end="115:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:47"><expr pos:start="117:5" pos:end="117:46"><call pos:start="117:5" pos:end="117:46"><name pos:start="117:5" pos:end="117:15">bdrv_append</name><argument_list pos:start="117:16" pos:end="117:46">(<argument pos:start="117:17" pos:end="117:29"><expr pos:start="117:17" pos:end="117:29"><name pos:start="117:17" pos:end="117:29">mirror_top_bs</name></expr></argument>, <argument pos:start="117:32" pos:end="117:33"><expr pos:start="117:32" pos:end="117:33"><name pos:start="117:32" pos:end="117:33">bs</name></expr></argument>, <argument pos:start="117:36" pos:end="117:45"><expr pos:start="117:36" pos:end="117:45"><operator pos:start="117:36" pos:end="117:36">&amp;</operator><name pos:start="117:37" pos:end="117:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:25"><expr pos:start="119:5" pos:end="119:24"><call pos:start="119:5" pos:end="119:24"><name pos:start="119:5" pos:end="119:20">bdrv_drained_end</name><argument_list pos:start="119:21" pos:end="119:24">(<argument pos:start="119:22" pos:end="119:23"><expr pos:start="119:22" pos:end="119:23"><name pos:start="119:22" pos:end="119:23">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:18">(<expr pos:start="123:9" pos:end="123:17"><name pos:start="123:9" pos:end="123:17">local_err</name></expr>)</condition> <block pos:start="123:20" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:15">

        <expr_stmt pos:start="125:9" pos:end="125:34"><expr pos:start="125:9" pos:end="125:33"><call pos:start="125:9" pos:end="125:33"><name pos:start="125:9" pos:end="125:18">bdrv_unref</name><argument_list pos:start="125:19" pos:end="125:33">(<argument pos:start="125:20" pos:end="125:32"><expr pos:start="125:20" pos:end="125:32"><name pos:start="125:20" pos:end="125:32">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:41"><expr pos:start="127:9" pos:end="127:40"><call pos:start="127:9" pos:end="127:40"><name pos:start="127:9" pos:end="127:23">error_propagate</name><argument_list pos:start="127:24" pos:end="127:40">(<argument pos:start="127:25" pos:end="127:28"><expr pos:start="127:25" pos:end="127:28"><name pos:start="127:25" pos:end="127:28">errp</name></expr></argument>, <argument pos:start="127:31" pos:end="127:39"><expr pos:start="127:31" pos:end="127:39"><name pos:start="127:31" pos:end="127:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:75">/* Make sure that the source is not resized while the job is running */</comment>

    <expr_stmt pos:start="137:5" pos:end="145:59"><expr pos:start="137:5" pos:end="145:58"><name pos:start="137:5" pos:end="137:5">s</name> <operator pos:start="137:7" pos:end="137:7">=</operator> <call pos:start="137:9" pos:end="145:58"><name pos:start="137:9" pos:end="137:24">block_job_create</name><argument_list pos:start="137:25" pos:end="145:58">(<argument pos:start="137:26" pos:end="137:31"><expr pos:start="137:26" pos:end="137:31"><name pos:start="137:26" pos:end="137:31">job_id</name></expr></argument>, <argument pos:start="137:34" pos:end="137:39"><expr pos:start="137:34" pos:end="137:39"><name pos:start="137:34" pos:end="137:39">driver</name></expr></argument>, <argument pos:start="137:42" pos:end="137:54"><expr pos:start="137:42" pos:end="137:54"><name pos:start="137:42" pos:end="137:54">mirror_top_bs</name></expr></argument>,

                         <argument pos:start="139:26" pos:end="139:49"><expr pos:start="139:26" pos:end="139:49"><name pos:start="139:26" pos:end="139:49">BLK_PERM_CONSISTENT_READ</name></expr></argument>,

                         <argument pos:start="141:26" pos:end="143:60"><expr pos:start="141:26" pos:end="143:60"><name pos:start="141:26" pos:end="141:49">BLK_PERM_CONSISTENT_READ</name> <operator pos:start="141:51" pos:end="141:51">|</operator> <name pos:start="141:53" pos:end="141:76">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="141:78" pos:end="141:78">|</operator>

                         <name pos:start="143:26" pos:end="143:39">BLK_PERM_WRITE</name> <operator pos:start="143:41" pos:end="143:41">|</operator> <name pos:start="143:43" pos:end="143:60">BLK_PERM_GRAPH_MOD</name></expr></argument>, <argument pos:start="143:63" pos:end="143:67"><expr pos:start="143:63" pos:end="143:67"><name pos:start="143:63" pos:end="143:67">speed</name></expr></argument>,

                         <argument pos:start="145:26" pos:end="145:39"><expr pos:start="145:26" pos:end="145:39"><name pos:start="145:26" pos:end="145:39">creation_flags</name></expr></argument>, <argument pos:start="145:42" pos:end="145:43"><expr pos:start="145:42" pos:end="145:43"><name pos:start="145:42" pos:end="145:43">cb</name></expr></argument>, <argument pos:start="145:46" pos:end="145:51"><expr pos:start="145:46" pos:end="145:51"><name pos:start="145:46" pos:end="145:51">opaque</name></expr></argument>, <argument pos:start="145:54" pos:end="145:57"><expr pos:start="145:54" pos:end="145:57"><name pos:start="145:54" pos:end="145:57">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:11">(<expr pos:start="147:9" pos:end="147:10"><operator pos:start="147:9" pos:end="147:9">!</operator><name pos:start="147:10" pos:end="147:10">s</name></expr>)</condition> <block pos:start="147:13" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:18">

        <goto pos:start="149:9" pos:end="149:18">goto <name pos:start="149:14" pos:end="149:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="153:5" pos:end="153:56">/* The block job now has a reference to this node */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:30"><expr pos:start="155:5" pos:end="155:29"><call pos:start="155:5" pos:end="155:29"><name pos:start="155:5" pos:end="155:14">bdrv_unref</name><argument_list pos:start="155:15" pos:end="155:29">(<argument pos:start="155:16" pos:end="155:28"><expr pos:start="155:16" pos:end="155:28"><name pos:start="155:16" pos:end="155:28">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:19"><expr pos:start="159:5" pos:end="159:18"><name pos:start="159:5" pos:end="159:13"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:13">source</name></name> <operator pos:start="159:15" pos:end="159:15">=</operator> <name pos:start="159:17" pos:end="159:18">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:37"><expr pos:start="161:5" pos:end="161:36"><name pos:start="161:5" pos:end="161:20"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:20">mirror_top_bs</name></name> <operator pos:start="161:22" pos:end="161:22">=</operator> <name pos:start="161:24" pos:end="161:36">mirror_top_bs</name></expr>;</expr_stmt>



    <comment type="block" pos:start="165:5" pos:end="179:51">/* No resize for the target either; while the mirror is still running, a

     * consistent read isn't necessarily possible. We could possibly allow

     * writes and graph modifications, though it would likely defeat the

     * purpose of a mirror, so leave them blocked for now.

     *

     * In the case of active commit, things look a bit different, though,

     * because the target is an already populated backing file in active use.

     * We can allow anything except resize there.*/</comment>

    <expr_stmt pos:start="181:5" pos:end="181:56"><expr pos:start="181:5" pos:end="181:55"><name pos:start="181:5" pos:end="181:21">target_is_backing</name> <operator pos:start="181:23" pos:end="181:23">=</operator> <call pos:start="181:25" pos:end="181:55"><name pos:start="181:25" pos:end="181:43">bdrv_chain_contains</name><argument_list pos:start="181:44" pos:end="181:55">(<argument pos:start="181:45" pos:end="181:46"><expr pos:start="181:45" pos:end="181:46"><name pos:start="181:45" pos:end="181:46">bs</name></expr></argument>, <argument pos:start="181:49" pos:end="181:54"><expr pos:start="181:49" pos:end="181:54"><name pos:start="181:49" pos:end="181:54">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:68"><expr pos:start="183:5" pos:end="183:67"><name pos:start="183:5" pos:end="183:20">target_graph_mod</name> <operator pos:start="183:22" pos:end="183:22">=</operator> <operator pos:start="183:24" pos:end="183:24">(</operator><name pos:start="183:25" pos:end="183:36">backing_mode</name> <operator pos:start="183:38" pos:end="183:39">!=</operator> <name pos:start="183:41" pos:end="183:66">MIRROR_LEAVE_BACKING_CHAIN</name><operator pos:start="183:67" pos:end="183:67">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="195:70"><expr pos:start="185:5" pos:end="195:69"><name pos:start="185:5" pos:end="185:13"><name pos:start="185:5" pos:end="185:5">s</name><operator pos:start="185:6" pos:end="185:7">-&gt;</operator><name pos:start="185:8" pos:end="185:13">target</name></name> <operator pos:start="185:15" pos:end="185:15">=</operator> <call pos:start="185:17" pos:end="195:69"><name pos:start="185:17" pos:end="185:23">blk_new</name><argument_list pos:start="185:24" pos:end="195:69">(<argument pos:start="185:25" pos:end="187:67"><expr pos:start="185:25" pos:end="187:67"><name pos:start="185:25" pos:end="185:38">BLK_PERM_WRITE</name> <operator pos:start="185:40" pos:end="185:40">|</operator> <name pos:start="185:42" pos:end="185:56">BLK_PERM_RESIZE</name> <operator pos:start="185:58" pos:end="185:58">|</operator>

                        <operator pos:start="187:25" pos:end="187:25">(</operator><ternary pos:start="187:26" pos:end="187:66"><condition pos:start="187:26" pos:end="187:43"><expr pos:start="187:26" pos:end="187:41"><name pos:start="187:26" pos:end="187:41">target_graph_mod</name></expr> ?</condition><then pos:start="187:45" pos:end="187:62"> <expr pos:start="187:45" pos:end="187:62"><name pos:start="187:45" pos:end="187:62">BLK_PERM_GRAPH_MOD</name></expr> </then><else pos:start="187:64" pos:end="187:66">: <expr pos:start="187:66" pos:end="187:66"><literal type="number" pos:start="187:66" pos:end="187:66">0</literal></expr></else></ternary><operator pos:start="187:67" pos:end="187:67">)</operator></expr></argument>,

                        <argument pos:start="189:25" pos:end="195:68"><expr pos:start="189:25" pos:end="195:68"><name pos:start="189:25" pos:end="189:48">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="189:50" pos:end="189:50">|</operator>

                        <operator pos:start="191:25" pos:end="191:25">(</operator><ternary pos:start="191:26" pos:end="195:67"><condition pos:start="191:26" pos:end="191:44"><expr pos:start="191:26" pos:end="191:42"><name pos:start="191:26" pos:end="191:42">target_is_backing</name></expr> ?</condition><then pos:start="191:46" pos:end="195:63"> <expr pos:start="191:46" pos:end="195:63"><name pos:start="191:46" pos:end="191:69">BLK_PERM_CONSISTENT_READ</name> <operator pos:start="191:71" pos:end="191:71">|</operator>

                                             <name pos:start="193:46" pos:end="193:59">BLK_PERM_WRITE</name> <operator pos:start="193:61" pos:end="193:61">|</operator>

                                             <name pos:start="195:46" pos:end="195:63">BLK_PERM_GRAPH_MOD</name></expr> </then><else pos:start="195:65" pos:end="195:67">: <expr pos:start="195:67" pos:end="195:67"><literal type="number" pos:start="195:67" pos:end="195:67">0</literal></expr></else></ternary><operator pos:start="195:68" pos:end="195:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:49"><expr pos:start="197:5" pos:end="197:48"><name pos:start="197:5" pos:end="197:7">ret</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <call pos:start="197:11" pos:end="197:48"><name pos:start="197:11" pos:end="197:23">blk_insert_bs</name><argument_list pos:start="197:24" pos:end="197:48">(<argument pos:start="197:25" pos:end="197:33"><expr pos:start="197:25" pos:end="197:33"><name pos:start="197:25" pos:end="197:33"><name pos:start="197:25" pos:end="197:25">s</name><operator pos:start="197:26" pos:end="197:27">-&gt;</operator><name pos:start="197:28" pos:end="197:33">target</name></name></expr></argument>, <argument pos:start="197:36" pos:end="197:41"><expr pos:start="197:36" pos:end="197:41"><name pos:start="197:36" pos:end="197:41">target</name></expr></argument>, <argument pos:start="197:44" pos:end="197:47"><expr pos:start="197:44" pos:end="197:47"><name pos:start="197:44" pos:end="197:47">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="203:5"><if pos:start="199:5" pos:end="203:5">if <condition pos:start="199:8" pos:end="199:16">(<expr pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:11">ret</name> <operator pos:start="199:13" pos:end="199:13">&lt;</operator> <literal type="number" pos:start="199:15" pos:end="199:15">0</literal></expr>)</condition> <block pos:start="199:18" pos:end="203:5">{<block_content pos:start="201:9" pos:end="201:18">

        <goto pos:start="201:9" pos:end="201:18">goto <name pos:start="201:14" pos:end="201:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="205:5" pos:end="221:5"><if pos:start="205:5" pos:end="221:5">if <condition pos:start="205:8" pos:end="205:18">(<expr pos:start="205:9" pos:end="205:17"><name pos:start="205:9" pos:end="205:17">is_mirror</name></expr>)</condition> <block pos:start="205:20" pos:end="221:5">{<block_content pos:start="219:9" pos:end="219:50">

        <comment type="block" pos:start="207:9" pos:end="217:26">/* XXX: Mirror target could be a NBD server of target QEMU in the case

         * of non-shared block migration. To allow migration completion, we

         * have to allow "inactivate" of the target BB.  When that happens, we

         * know the job is drained, and the vcpus are stopped, so no write

         * operation will be performed. Block layer already has assertions to

         * ensure that. */</comment>

        <expr_stmt pos:start="219:9" pos:end="219:50"><expr pos:start="219:9" pos:end="219:49"><call pos:start="219:9" pos:end="219:49"><name pos:start="219:9" pos:end="219:38">blk_set_force_allow_inactivate</name><argument_list pos:start="219:39" pos:end="219:49">(<argument pos:start="219:40" pos:end="219:48"><expr pos:start="219:40" pos:end="219:48"><name pos:start="219:40" pos:end="219:48"><name pos:start="219:40" pos:end="219:40">s</name><operator pos:start="219:41" pos:end="219:42">-&gt;</operator><name pos:start="219:43" pos:end="219:48">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:37"><expr pos:start="225:5" pos:end="225:36"><name pos:start="225:5" pos:end="225:15"><name pos:start="225:5" pos:end="225:5">s</name><operator pos:start="225:6" pos:end="225:7">-&gt;</operator><name pos:start="225:8" pos:end="225:15">replaces</name></name> <operator pos:start="225:17" pos:end="225:17">=</operator> <call pos:start="225:19" pos:end="225:36"><name pos:start="225:19" pos:end="225:26">g_strdup</name><argument_list pos:start="225:27" pos:end="225:36">(<argument pos:start="225:28" pos:end="225:35"><expr pos:start="225:28" pos:end="225:35"><name pos:start="225:28" pos:end="225:35">replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:41"><expr pos:start="227:5" pos:end="227:40"><name pos:start="227:5" pos:end="227:22"><name pos:start="227:5" pos:end="227:5">s</name><operator pos:start="227:6" pos:end="227:7">-&gt;</operator><name pos:start="227:8" pos:end="227:22">on_source_error</name></name> <operator pos:start="227:24" pos:end="227:24">=</operator> <name pos:start="227:26" pos:end="227:40">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:41"><expr pos:start="229:5" pos:end="229:40"><name pos:start="229:5" pos:end="229:22"><name pos:start="229:5" pos:end="229:5">s</name><operator pos:start="229:6" pos:end="229:7">-&gt;</operator><name pos:start="229:8" pos:end="229:22">on_target_error</name></name> <operator pos:start="229:24" pos:end="229:24">=</operator> <name pos:start="229:26" pos:end="229:40">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:35"><expr pos:start="231:5" pos:end="231:34"><name pos:start="231:5" pos:end="231:19"><name pos:start="231:5" pos:end="231:5">s</name><operator pos:start="231:6" pos:end="231:7">-&gt;</operator><name pos:start="231:8" pos:end="231:19">is_none_mode</name></name> <operator pos:start="231:21" pos:end="231:21">=</operator> <name pos:start="231:23" pos:end="231:34">is_none_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:35"><expr pos:start="233:5" pos:end="233:34"><name pos:start="233:5" pos:end="233:19"><name pos:start="233:5" pos:end="233:5">s</name><operator pos:start="233:6" pos:end="233:7">-&gt;</operator><name pos:start="233:8" pos:end="233:19">backing_mode</name></name> <operator pos:start="233:21" pos:end="233:21">=</operator> <name pos:start="233:23" pos:end="233:34">backing_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:19"><expr pos:start="235:5" pos:end="235:18"><name pos:start="235:5" pos:end="235:11"><name pos:start="235:5" pos:end="235:5">s</name><operator pos:start="235:6" pos:end="235:7">-&gt;</operator><name pos:start="235:8" pos:end="235:11">base</name></name> <operator pos:start="235:13" pos:end="235:13">=</operator> <name pos:start="235:15" pos:end="235:18">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:33"><expr pos:start="237:5" pos:end="237:32"><name pos:start="237:5" pos:end="237:18"><name pos:start="237:5" pos:end="237:5">s</name><operator pos:start="237:6" pos:end="237:7">-&gt;</operator><name pos:start="237:8" pos:end="237:18">granularity</name></name> <operator pos:start="237:20" pos:end="237:20">=</operator> <name pos:start="237:22" pos:end="237:32">granularity</name></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:50"><expr pos:start="239:5" pos:end="239:49"><name pos:start="239:5" pos:end="239:15"><name pos:start="239:5" pos:end="239:5">s</name><operator pos:start="239:6" pos:end="239:7">-&gt;</operator><name pos:start="239:8" pos:end="239:15">buf_size</name></name> <operator pos:start="239:17" pos:end="239:17">=</operator> <call pos:start="239:19" pos:end="239:49"><name pos:start="239:19" pos:end="239:26">ROUND_UP</name><argument_list pos:start="239:27" pos:end="239:49">(<argument pos:start="239:28" pos:end="239:35"><expr pos:start="239:28" pos:end="239:35"><name pos:start="239:28" pos:end="239:35">buf_size</name></expr></argument>, <argument pos:start="239:38" pos:end="239:48"><expr pos:start="239:38" pos:end="239:48"><name pos:start="239:38" pos:end="239:48">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:21"><expr pos:start="241:5" pos:end="241:20"><name pos:start="241:5" pos:end="241:12"><name pos:start="241:5" pos:end="241:5">s</name><operator pos:start="241:6" pos:end="241:7">-&gt;</operator><name pos:start="241:8" pos:end="241:12">unmap</name></name> <operator pos:start="241:14" pos:end="241:14">=</operator> <name pos:start="241:16" pos:end="241:20">unmap</name></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="247:5"><if pos:start="243:5" pos:end="247:5">if <condition pos:start="243:8" pos:end="243:22">(<expr pos:start="243:9" pos:end="243:21"><name pos:start="243:9" pos:end="243:21">auto_complete</name></expr>)</condition> <block pos:start="243:24" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:34">

        <expr_stmt pos:start="245:9" pos:end="245:34"><expr pos:start="245:9" pos:end="245:33"><name pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:9">s</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:26">should_complete</name></name> <operator pos:start="245:28" pos:end="245:28">=</operator> <name pos:start="245:30" pos:end="245:33">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:76"><expr pos:start="251:5" pos:end="251:75"><name pos:start="251:5" pos:end="251:19"><name pos:start="251:5" pos:end="251:5">s</name><operator pos:start="251:6" pos:end="251:7">-&gt;</operator><name pos:start="251:8" pos:end="251:19">dirty_bitmap</name></name> <operator pos:start="251:21" pos:end="251:21">=</operator> <call pos:start="251:23" pos:end="251:75"><name pos:start="251:23" pos:end="251:46">bdrv_create_dirty_bitmap</name><argument_list pos:start="251:47" pos:end="251:75">(<argument pos:start="251:48" pos:end="251:49"><expr pos:start="251:48" pos:end="251:49"><name pos:start="251:48" pos:end="251:49">bs</name></expr></argument>, <argument pos:start="251:52" pos:end="251:62"><expr pos:start="251:52" pos:end="251:62"><name pos:start="251:52" pos:end="251:62">granularity</name></expr></argument>, <argument pos:start="251:65" pos:end="251:68"><expr pos:start="251:65" pos:end="251:68"><name pos:start="251:65" pos:end="251:68">NULL</name></expr></argument>, <argument pos:start="251:71" pos:end="251:74"><expr pos:start="251:71" pos:end="251:74"><name pos:start="251:71" pos:end="251:74">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="253:5" pos:end="257:5"><if pos:start="253:5" pos:end="257:5">if <condition pos:start="253:8" pos:end="253:25">(<expr pos:start="253:9" pos:end="253:24"><operator pos:start="253:9" pos:end="253:9">!</operator><name pos:start="253:10" pos:end="253:24"><name pos:start="253:10" pos:end="253:10">s</name><operator pos:start="253:11" pos:end="253:12">-&gt;</operator><name pos:start="253:13" pos:end="253:24">dirty_bitmap</name></name></expr>)</condition> <block pos:start="253:27" pos:end="257:5">{<block_content pos:start="255:9" pos:end="255:18">

        <goto pos:start="255:9" pos:end="255:18">goto <name pos:start="255:14" pos:end="255:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="261:5" pos:end="261:63">/* Required permissions are already taken with blk_new() */</comment>

    <expr_stmt pos:start="263:5" pos:end="265:37"><expr pos:start="263:5" pos:end="265:36"><call pos:start="263:5" pos:end="265:36"><name pos:start="263:5" pos:end="263:22">block_job_add_bdrv</name><argument_list pos:start="263:23" pos:end="265:36">(<argument pos:start="263:24" pos:end="263:33"><expr pos:start="263:24" pos:end="263:33"><operator pos:start="263:24" pos:end="263:24">&amp;</operator><name pos:start="263:25" pos:end="263:33"><name pos:start="263:25" pos:end="263:25">s</name><operator pos:start="263:26" pos:end="263:27">-&gt;</operator><name pos:start="263:28" pos:end="263:33">common</name></name></expr></argument>, <argument pos:start="263:36" pos:end="263:43"><expr pos:start="263:36" pos:end="263:43"><literal type="string" pos:start="263:36" pos:end="263:43">"target"</literal></expr></argument>, <argument pos:start="263:46" pos:end="263:51"><expr pos:start="263:46" pos:end="263:51"><name pos:start="263:46" pos:end="263:51">target</name></expr></argument>, <argument pos:start="263:54" pos:end="263:54"><expr pos:start="263:54" pos:end="263:54"><literal type="number" pos:start="263:54" pos:end="263:54">0</literal></expr></argument>, <argument pos:start="263:57" pos:end="263:68"><expr pos:start="263:57" pos:end="263:68"><name pos:start="263:57" pos:end="263:68">BLK_PERM_ALL</name></expr></argument>,

                       <argument pos:start="265:24" pos:end="265:35"><expr pos:start="265:24" pos:end="265:35"><operator pos:start="265:24" pos:end="265:24">&amp;</operator><name pos:start="265:25" pos:end="265:35">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="269:5" pos:end="271:42">/* In commit_active_start() all intermediate nodes disappear, so

     * any jobs in them must be blocked */</comment>

    <if_stmt pos:start="273:5" pos:end="301:5"><if pos:start="273:5" pos:end="301:5">if <condition pos:start="273:8" pos:end="273:26">(<expr pos:start="273:9" pos:end="273:25"><name pos:start="273:9" pos:end="273:25">target_is_backing</name></expr>)</condition> <block pos:start="273:28" pos:end="301:5">{<block_content pos:start="275:9" pos:end="299:9">

        <decl_stmt pos:start="275:9" pos:end="275:31"><decl pos:start="275:9" pos:end="275:30"><type pos:start="275:9" pos:end="275:26"><name pos:start="275:9" pos:end="275:24">BlockDriverState</name> <modifier pos:start="275:26" pos:end="275:26">*</modifier></type><name pos:start="275:27" pos:end="275:30">iter</name></decl>;</decl_stmt>

        <for pos:start="277:9" pos:end="299:9">for <control pos:start="277:13" pos:end="277:76">(<init pos:start="277:14" pos:end="277:35"><expr pos:start="277:14" pos:end="277:34"><name pos:start="277:14" pos:end="277:17">iter</name> <operator pos:start="277:19" pos:end="277:19">=</operator> <call pos:start="277:21" pos:end="277:34"><name pos:start="277:21" pos:end="277:30">backing_bs</name><argument_list pos:start="277:31" pos:end="277:34">(<argument pos:start="277:32" pos:end="277:33"><expr pos:start="277:32" pos:end="277:33"><name pos:start="277:32" pos:end="277:33">bs</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="277:37" pos:end="277:51"><expr pos:start="277:37" pos:end="277:50"><name pos:start="277:37" pos:end="277:40">iter</name> <operator pos:start="277:42" pos:end="277:43">!=</operator> <name pos:start="277:45" pos:end="277:50">target</name></expr>;</condition> <incr pos:start="277:53" pos:end="277:75"><expr pos:start="277:53" pos:end="277:75"><name pos:start="277:53" pos:end="277:56">iter</name> <operator pos:start="277:58" pos:end="277:58">=</operator> <call pos:start="277:60" pos:end="277:75"><name pos:start="277:60" pos:end="277:69">backing_bs</name><argument_list pos:start="277:70" pos:end="277:75">(<argument pos:start="277:71" pos:end="277:74"><expr pos:start="277:71" pos:end="277:74"><name pos:start="277:71" pos:end="277:74">iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="277:78" pos:end="299:9">{<block_content pos:start="287:13" pos:end="297:13">

            <comment type="block" pos:start="279:13" pos:end="285:65">/* XXX BLK_PERM_WRITE needs to be allowed so we don't block

             * ourselves at s-&gt;base (if writes are blocked for a node, they are

             * also blocked for its backing file). The other options would be a

             * second filter driver above s-&gt;base (== target). */</comment>

            <expr_stmt pos:start="287:13" pos:end="291:43"><expr pos:start="287:13" pos:end="291:42"><name pos:start="287:13" pos:end="287:15">ret</name> <operator pos:start="287:17" pos:end="287:17">=</operator> <call pos:start="287:19" pos:end="291:42"><name pos:start="287:19" pos:end="287:36">block_job_add_bdrv</name><argument_list pos:start="287:37" pos:end="291:42">(<argument pos:start="287:38" pos:end="287:47"><expr pos:start="287:38" pos:end="287:47"><operator pos:start="287:38" pos:end="287:38">&amp;</operator><name pos:start="287:39" pos:end="287:47"><name pos:start="287:39" pos:end="287:39">s</name><operator pos:start="287:40" pos:end="287:41">-&gt;</operator><name pos:start="287:42" pos:end="287:47">common</name></name></expr></argument>, <argument pos:start="287:50" pos:end="287:68"><expr pos:start="287:50" pos:end="287:68"><literal type="string" pos:start="287:50" pos:end="287:68">"intermediate node"</literal></expr></argument>, <argument pos:start="287:71" pos:end="287:74"><expr pos:start="287:71" pos:end="287:74"><name pos:start="287:71" pos:end="287:74">iter</name></expr></argument>, <argument pos:start="287:77" pos:end="287:77"><expr pos:start="287:77" pos:end="287:77"><literal type="number" pos:start="287:77" pos:end="287:77">0</literal></expr></argument>,

                                     <argument pos:start="289:38" pos:end="289:78"><expr pos:start="289:38" pos:end="289:78"><name pos:start="289:38" pos:end="289:61">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="289:63" pos:end="289:63">|</operator> <name pos:start="289:65" pos:end="289:78">BLK_PERM_WRITE</name></expr></argument>,

                                     <argument pos:start="291:38" pos:end="291:41"><expr pos:start="291:38" pos:end="291:41"><name pos:start="291:38" pos:end="291:41">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="293:13" pos:end="297:13"><if pos:start="293:13" pos:end="297:13">if <condition pos:start="293:16" pos:end="293:24">(<expr pos:start="293:17" pos:end="293:23"><name pos:start="293:17" pos:end="293:19">ret</name> <operator pos:start="293:21" pos:end="293:21">&lt;</operator> <literal type="number" pos:start="293:23" pos:end="293:23">0</literal></expr>)</condition> <block pos:start="293:26" pos:end="297:13">{<block_content pos:start="295:17" pos:end="295:26">

                <goto pos:start="295:17" pos:end="295:26">goto <name pos:start="295:22" pos:end="295:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="305:5" pos:end="305:38"><expr pos:start="305:5" pos:end="305:37"><call pos:start="305:5" pos:end="305:37"><name pos:start="305:5" pos:end="305:22">trace_mirror_start</name><argument_list pos:start="305:23" pos:end="305:37">(<argument pos:start="305:24" pos:end="305:25"><expr pos:start="305:24" pos:end="305:25"><name pos:start="305:24" pos:end="305:25">bs</name></expr></argument>, <argument pos:start="305:28" pos:end="305:28"><expr pos:start="305:28" pos:end="305:28"><name pos:start="305:28" pos:end="305:28">s</name></expr></argument>, <argument pos:start="305:31" pos:end="305:36"><expr pos:start="305:31" pos:end="305:36"><name pos:start="305:31" pos:end="305:36">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:32"><expr pos:start="307:5" pos:end="307:31"><call pos:start="307:5" pos:end="307:31"><name pos:start="307:5" pos:end="307:19">block_job_start</name><argument_list pos:start="307:20" pos:end="307:31">(<argument pos:start="307:21" pos:end="307:30"><expr pos:start="307:21" pos:end="307:30"><operator pos:start="307:21" pos:end="307:21">&amp;</operator><name pos:start="307:22" pos:end="307:30"><name pos:start="307:22" pos:end="307:22">s</name><operator pos:start="307:23" pos:end="307:24">-&gt;</operator><name pos:start="307:25" pos:end="307:30">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="309:5" pos:end="309:11">return;</return>



<label pos:start="313:1" pos:end="313:5"><name pos:start="313:1" pos:end="313:4">fail</name>:</label>

    <if_stmt pos:start="315:5" pos:end="331:5"><if pos:start="315:5" pos:end="331:5">if <condition pos:start="315:8" pos:end="315:10">(<expr pos:start="315:9" pos:end="315:9"><name pos:start="315:9" pos:end="315:9">s</name></expr>)</condition> <block pos:start="315:12" pos:end="331:5">{<block_content pos:start="321:9" pos:end="329:41">

        <comment type="block" pos:start="317:9" pos:end="319:27">/* Make sure this BDS does not go away until we have completed the graph

         * changes below */</comment>

        <expr_stmt pos:start="321:9" pos:end="321:32"><expr pos:start="321:9" pos:end="321:31"><call pos:start="321:9" pos:end="321:31"><name pos:start="321:9" pos:end="321:16">bdrv_ref</name><argument_list pos:start="321:17" pos:end="321:31">(<argument pos:start="321:18" pos:end="321:30"><expr pos:start="321:18" pos:end="321:30"><name pos:start="321:18" pos:end="321:30">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="325:9" pos:end="325:28"><expr pos:start="325:9" pos:end="325:27"><call pos:start="325:9" pos:end="325:27"><name pos:start="325:9" pos:end="325:14">g_free</name><argument_list pos:start="325:15" pos:end="325:27">(<argument pos:start="325:16" pos:end="325:26"><expr pos:start="325:16" pos:end="325:26"><name pos:start="325:16" pos:end="325:26"><name pos:start="325:16" pos:end="325:16">s</name><operator pos:start="325:17" pos:end="325:18">-&gt;</operator><name pos:start="325:19" pos:end="325:26">replaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:29"><expr pos:start="327:9" pos:end="327:28"><call pos:start="327:9" pos:end="327:28"><name pos:start="327:9" pos:end="327:17">blk_unref</name><argument_list pos:start="327:18" pos:end="327:28">(<argument pos:start="327:19" pos:end="327:27"><expr pos:start="327:19" pos:end="327:27"><name pos:start="327:19" pos:end="327:27"><name pos:start="327:19" pos:end="327:19">s</name><operator pos:start="327:20" pos:end="327:21">-&gt;</operator><name pos:start="327:22" pos:end="327:27">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:41"><expr pos:start="329:9" pos:end="329:40"><call pos:start="329:9" pos:end="329:40"><name pos:start="329:9" pos:end="329:28">block_job_early_fail</name><argument_list pos:start="329:29" pos:end="329:40">(<argument pos:start="329:30" pos:end="329:39"><expr pos:start="329:30" pos:end="329:39"><operator pos:start="329:30" pos:end="329:30">&amp;</operator><name pos:start="329:31" pos:end="329:39"><name pos:start="329:31" pos:end="329:31">s</name><operator pos:start="329:32" pos:end="329:33">-&gt;</operator><name pos:start="329:34" pos:end="329:39">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="335:5" pos:end="337:42"><expr pos:start="335:5" pos:end="337:41"><call pos:start="335:5" pos:end="337:41"><name pos:start="335:5" pos:end="335:27">bdrv_child_try_set_perm</name><argument_list pos:start="335:28" pos:end="337:41">(<argument pos:start="335:29" pos:end="335:50"><expr pos:start="335:29" pos:end="335:50"><name pos:start="335:29" pos:end="335:50"><name pos:start="335:29" pos:end="335:41">mirror_top_bs</name><operator pos:start="335:42" pos:end="335:43">-&gt;</operator><name pos:start="335:44" pos:end="335:50">backing</name></name></expr></argument>, <argument pos:start="335:53" pos:end="335:53"><expr pos:start="335:53" pos:end="335:53"><literal type="number" pos:start="335:53" pos:end="335:53">0</literal></expr></argument>, <argument pos:start="335:56" pos:end="335:67"><expr pos:start="335:56" pos:end="335:67"><name pos:start="335:56" pos:end="335:67">BLK_PERM_ALL</name></expr></argument>,

                            <argument pos:start="337:29" pos:end="337:40"><expr pos:start="337:29" pos:end="337:40"><operator pos:start="337:29" pos:end="337:29">&amp;</operator><name pos:start="337:30" pos:end="337:40">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:78"><expr pos:start="339:5" pos:end="339:77"><call pos:start="339:5" pos:end="339:77"><name pos:start="339:5" pos:end="339:21">bdrv_replace_node</name><argument_list pos:start="339:22" pos:end="339:77">(<argument pos:start="339:23" pos:end="339:35"><expr pos:start="339:23" pos:end="339:35"><name pos:start="339:23" pos:end="339:35">mirror_top_bs</name></expr></argument>, <argument pos:start="339:38" pos:end="339:62"><expr pos:start="339:38" pos:end="339:62"><call pos:start="339:38" pos:end="339:62"><name pos:start="339:38" pos:end="339:47">backing_bs</name><argument_list pos:start="339:48" pos:end="339:62">(<argument pos:start="339:49" pos:end="339:61"><expr pos:start="339:49" pos:end="339:61"><name pos:start="339:49" pos:end="339:61">mirror_top_bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="339:65" pos:end="339:76"><expr pos:start="339:65" pos:end="339:76"><operator pos:start="339:65" pos:end="339:65">&amp;</operator><name pos:start="339:66" pos:end="339:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:30"><expr pos:start="343:5" pos:end="343:29"><call pos:start="343:5" pos:end="343:29"><name pos:start="343:5" pos:end="343:14">bdrv_unref</name><argument_list pos:start="343:15" pos:end="343:29">(<argument pos:start="343:16" pos:end="343:28"><expr pos:start="343:16" pos:end="343:28"><name pos:start="343:16" pos:end="343:28">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
