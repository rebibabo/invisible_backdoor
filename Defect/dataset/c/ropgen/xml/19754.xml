<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19754.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">assert_codec_experimental</name><parameter_list pos:start="1:38" pos:end="1:69">(<parameter pos:start="1:39" pos:end="1:55"><decl pos:start="1:39" pos:end="1:55"><type pos:start="1:39" pos:end="1:55"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">c</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:68"><decl pos:start="1:58" pos:end="1:68"><type pos:start="1:58" pos:end="1:68"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:68">encoder</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="5:5" pos:end="29:5">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:28">codec_string</name> <init pos:start="5:30" pos:end="5:62">= <expr pos:start="5:32" pos:end="5:62"><ternary pos:start="5:32" pos:end="5:62"><condition pos:start="5:32" pos:end="5:40"><expr pos:start="5:32" pos:end="5:38"><name pos:start="5:32" pos:end="5:38">encoder</name></expr> ?</condition><then pos:start="5:42" pos:end="5:50"> <expr pos:start="5:42" pos:end="5:50"><literal type="string" pos:start="5:42" pos:end="5:50">"encoder"</literal></expr> </then><else pos:start="5:52" pos:end="5:62">: <expr pos:start="5:54" pos:end="5:62"><literal type="string" pos:start="5:54" pos:end="5:62">"decoder"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVCodec</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">codec</name></decl>;</decl_stmt>

    <if_stmt pos:start="9:5" pos:end="29:5"><if pos:start="9:5" pos:end="29:5">if <condition pos:start="9:8" pos:end="11:62">(<expr pos:start="9:9" pos:end="11:61"><name pos:start="9:9" pos:end="9:30"><name pos:start="9:9" pos:end="9:9">c</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:16">codec</name><operator pos:start="9:17" pos:end="9:18">-&gt;</operator><name pos:start="9:19" pos:end="9:30">capabilities</name></name> <operator pos:start="9:32" pos:end="9:32">&amp;</operator> <name pos:start="9:34" pos:end="9:55">CODEC_CAP_EXPERIMENTAL</name> <operator pos:start="9:57" pos:end="9:58">&amp;&amp;</operator>

        <name pos:start="11:9" pos:end="11:32"><name pos:start="11:9" pos:end="11:9">c</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:32">strict_std_compliance</name></name> <operator pos:start="11:34" pos:end="11:34">&gt;</operator> <name pos:start="11:36" pos:end="11:61">FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block pos:start="11:64" pos:end="29:5">{<block_content pos:start="13:9" pos:end="27:16">

        <expr_stmt pos:start="13:9" pos:end="17:46"><expr pos:start="13:9" pos:end="17:45"><call pos:start="13:9" pos:end="17:45"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="17:45">(<argument pos:start="13:16" pos:end="13:19"><expr pos:start="13:16" pos:end="13:19"><name pos:start="13:16" pos:end="13:19">NULL</name></expr></argument>, <argument pos:start="13:22" pos:end="13:33"><expr pos:start="13:22" pos:end="13:33"><name pos:start="13:22" pos:end="13:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="13:36" pos:end="15:79"><expr pos:start="13:36" pos:end="15:79"><literal type="string" pos:start="13:36" pos:end="13:83">"%s '%s' is experimental and might produce bad "</literal>

                <literal type="string" pos:start="15:17" pos:end="15:79">"results.\nAdd '-strict experimental' if you want to use it.\n"</literal></expr></argument>,

                <argument pos:start="17:17" pos:end="17:28"><expr pos:start="17:17" pos:end="17:28"><name pos:start="17:17" pos:end="17:28">codec_string</name></expr></argument>, <argument pos:start="17:31" pos:end="17:44"><expr pos:start="17:31" pos:end="17:44"><name pos:start="17:31" pos:end="17:44"><name pos:start="17:31" pos:end="17:31">c</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:38">codec</name><operator pos:start="17:39" pos:end="17:40">-&gt;</operator><name pos:start="17:41" pos:end="17:44">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:98"><expr pos:start="19:9" pos:end="19:97"><name pos:start="19:9" pos:end="19:13">codec</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <ternary pos:start="19:17" pos:end="19:97"><condition pos:start="19:17" pos:end="19:25"><expr pos:start="19:17" pos:end="19:23"><name pos:start="19:17" pos:end="19:23">encoder</name></expr> ?</condition><then pos:start="19:27" pos:end="19:60"> <expr pos:start="19:27" pos:end="19:60"><call pos:start="19:27" pos:end="19:60"><name pos:start="19:27" pos:end="19:46">avcodec_find_encoder</name><argument_list pos:start="19:47" pos:end="19:60">(<argument pos:start="19:48" pos:end="19:59"><expr pos:start="19:48" pos:end="19:59"><name pos:start="19:48" pos:end="19:59"><name pos:start="19:48" pos:end="19:48">c</name><operator pos:start="19:49" pos:end="19:50">-&gt;</operator><name pos:start="19:51" pos:end="19:55">codec</name><operator pos:start="19:56" pos:end="19:57">-&gt;</operator><name pos:start="19:58" pos:end="19:59">id</name></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="19:62" pos:end="19:97">: <expr pos:start="19:64" pos:end="19:97"><call pos:start="19:64" pos:end="19:97"><name pos:start="19:64" pos:end="19:83">avcodec_find_decoder</name><argument_list pos:start="19:84" pos:end="19:97">(<argument pos:start="19:85" pos:end="19:96"><expr pos:start="19:85" pos:end="19:96"><name pos:start="19:85" pos:end="19:96"><name pos:start="19:85" pos:end="19:85">c</name><operator pos:start="19:86" pos:end="19:87">-&gt;</operator><name pos:start="19:88" pos:end="19:92">codec</name><operator pos:start="19:93" pos:end="19:94">-&gt;</operator><name pos:start="19:95" pos:end="19:96">id</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:46"><if pos:start="21:9" pos:end="25:46">if <condition pos:start="21:12" pos:end="21:60">(<expr pos:start="21:13" pos:end="21:59"><operator pos:start="21:13" pos:end="21:13">!</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:33"><name pos:start="21:15" pos:end="21:19">codec</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:33">capabilities</name></name> <operator pos:start="21:35" pos:end="21:35">&amp;</operator> <name pos:start="21:37" pos:end="21:58">CODEC_CAP_EXPERIMENTAL</name><operator pos:start="21:59" pos:end="21:59">)</operator></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="25:46"><block_content pos:start="23:13" pos:end="25:46">

            <expr_stmt pos:start="23:13" pos:end="25:46"><expr pos:start="23:13" pos:end="25:45"><call pos:start="23:13" pos:end="25:45"><name pos:start="23:13" pos:end="23:18">av_log</name><argument_list pos:start="23:19" pos:end="25:45">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">NULL</name></expr></argument>, <argument pos:start="23:26" pos:end="23:37"><expr pos:start="23:26" pos:end="23:37"><name pos:start="23:26" pos:end="23:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="23:40" pos:end="23:79"><expr pos:start="23:40" pos:end="23:79"><literal type="string" pos:start="23:40" pos:end="23:79">"Or use the non experimental %s '%s'.\n"</literal></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:31"><expr pos:start="25:20" pos:end="25:31"><name pos:start="25:20" pos:end="25:31">codec_string</name></expr></argument>, <argument pos:start="25:34" pos:end="25:44"><expr pos:start="25:34" pos:end="25:44"><name pos:start="25:34" pos:end="25:44"><name pos:start="25:34" pos:end="25:38">codec</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:44">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><call pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">exit</name><argument_list pos:start="27:13" pos:end="27:15">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
