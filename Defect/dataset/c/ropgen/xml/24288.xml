<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24288.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">find_and_decode_index</name><parameter_list pos:start="1:33" pos:end="1:49">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:43">NUTContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">nut</name></decl></parameter>)</parameter_list><block pos:start="1:50" pos:end="177:1">{<block_content pos:start="3:5" pos:end="175:13">

    <decl_stmt pos:start="3:5" pos:end="3:33"><decl pos:start="3:5" pos:end="3:32"><type pos:start="3:5" pos:end="3:21"><name pos:start="3:5" pos:end="3:19">AVFormatContext</name> <modifier pos:start="3:21" pos:end="3:21">*</modifier></type><name pos:start="3:22" pos:end="3:22">s</name><init pos:start="3:23" pos:end="3:32">= <expr pos:start="3:25" pos:end="3:32"><name pos:start="3:25" pos:end="3:32"><name pos:start="3:25" pos:end="3:27">nut</name><operator pos:start="3:28" pos:end="3:29">-&gt;</operator><name pos:start="3:30" pos:end="3:32">avf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">ByteIOContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">bc</name> <init pos:start="5:23" pos:end="5:29">= <expr pos:start="5:25" pos:end="5:29"><name pos:start="5:25" pos:end="5:29"><name pos:start="5:25" pos:end="5:25">s</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:29">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">tmp</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:19" pos:end="7:21">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:29">syncpoint_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:20">filesize</name><init pos:start="11:21" pos:end="11:35">= <expr pos:start="11:23" pos:end="11:35"><call pos:start="11:23" pos:end="11:35"><name pos:start="11:23" pos:end="11:31">url_fsize</name><argument_list pos:start="11:32" pos:end="11:35">(<argument pos:start="11:33" pos:end="11:34"><expr pos:start="11:33" pos:end="11:34"><name pos:start="11:33" pos:end="11:34">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int64_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:23">syncpoints</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">int8_t</name> <modifier pos:start="15:12" pos:end="15:12">*</modifier></type><name pos:start="15:13" pos:end="15:24">has_keyframe</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><call pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:13">url_fseek</name><argument_list pos:start="19:14" pos:end="19:40">(<argument pos:start="19:15" pos:end="19:16"><expr pos:start="19:15" pos:end="19:16"><name pos:start="19:15" pos:end="19:16">bc</name></expr></argument>, <argument pos:start="19:19" pos:end="19:29"><expr pos:start="19:19" pos:end="19:29"><name pos:start="19:19" pos:end="19:26">filesize</name><operator pos:start="19:27" pos:end="19:27">-</operator><literal type="number" pos:start="19:28" pos:end="19:29">12</literal></expr></argument>, <argument pos:start="19:32" pos:end="19:39"><expr pos:start="19:32" pos:end="19:39"><name pos:start="19:32" pos:end="19:39">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><call pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:13">url_fseek</name><argument_list pos:start="21:14" pos:end="21:50">(<argument pos:start="21:15" pos:end="21:16"><expr pos:start="21:15" pos:end="21:16"><name pos:start="21:15" pos:end="21:16">bc</name></expr></argument>, <argument pos:start="21:19" pos:end="21:39"><expr pos:start="21:19" pos:end="21:39"><name pos:start="21:19" pos:end="21:26">filesize</name><operator pos:start="21:27" pos:end="21:27">-</operator><call pos:start="21:28" pos:end="21:39"><name pos:start="21:28" pos:end="21:35">get_be64</name><argument_list pos:start="21:36" pos:end="21:39">(<argument pos:start="21:37" pos:end="21:38"><expr pos:start="21:37" pos:end="21:38"><name pos:start="21:37" pos:end="21:38">bc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:42" pos:end="21:49"><expr pos:start="21:42" pos:end="21:49"><name pos:start="21:42" pos:end="21:49">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if<condition pos:start="23:7" pos:end="23:39">(<expr pos:start="23:8" pos:end="23:38"><call pos:start="23:8" pos:end="23:19"><name pos:start="23:8" pos:end="23:15">get_be64</name><argument_list pos:start="23:16" pos:end="23:19">(<argument pos:start="23:17" pos:end="23:18"><expr pos:start="23:17" pos:end="23:18"><name pos:start="23:17" pos:end="23:18">bc</name></expr></argument>)</argument_list></call> <operator pos:start="23:21" pos:end="23:22">!=</operator> <name pos:start="23:24" pos:end="23:38">INDEX_STARTCODE</name></expr>)</condition><block pos:start="23:40" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:57"><expr pos:start="25:9" pos:end="25:56"><call pos:start="25:9" pos:end="25:56"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:56">(<argument pos:start="25:16" pos:end="25:16"><expr pos:start="25:16" pos:end="25:16"><name pos:start="25:16" pos:end="25:16">s</name></expr></argument>, <argument pos:start="25:19" pos:end="25:30"><expr pos:start="25:19" pos:end="25:30"><name pos:start="25:19" pos:end="25:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:33" pos:end="25:55"><expr pos:start="25:33" pos:end="25:55"><literal type="string" pos:start="25:33" pos:end="25:55">"no index at the end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:55"><expr pos:start="33:5" pos:end="33:54"><name pos:start="33:5" pos:end="33:7">end</name><operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:54"><name pos:start="33:10" pos:end="33:25">get_packetheader</name><argument_list pos:start="33:26" pos:end="33:54">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">nut</name></expr></argument>, <argument pos:start="33:32" pos:end="33:33"><expr pos:start="33:32" pos:end="33:33"><name pos:start="33:32" pos:end="33:33">bc</name></expr></argument>, <argument pos:start="33:36" pos:end="33:36"><expr pos:start="33:36" pos:end="33:36"><literal type="number" pos:start="33:36" pos:end="33:36">1</literal></expr></argument>, <argument pos:start="33:39" pos:end="33:53"><expr pos:start="33:39" pos:end="33:53"><name pos:start="33:39" pos:end="33:53">INDEX_STARTCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:7">end</name> <operator pos:start="35:9" pos:end="35:10">+=</operator> <call pos:start="35:12" pos:end="35:24"><name pos:start="35:12" pos:end="35:20">url_ftell</name><argument_list pos:start="35:21" pos:end="35:24">(<argument pos:start="35:22" pos:end="35:23"><expr pos:start="35:22" pos:end="35:23"><name pos:start="35:22" pos:end="35:23">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><call pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:12">ff_get_v</name><argument_list pos:start="39:13" pos:end="39:16">(<argument pos:start="39:14" pos:end="39:15"><expr pos:start="39:14" pos:end="39:15"><name pos:start="39:14" pos:end="39:15">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="39:19" pos:end="39:27">//max_pts</comment>

    <macro pos:start="41:5" pos:end="41:54"><name pos:start="41:5" pos:end="41:9">GET_V</name><argument_list pos:start="41:10" pos:end="41:54">(<argument pos:start="41:11" pos:end="41:25">syncpoint_count</argument>, <argument pos:start="41:28" pos:end="41:53">tmp &lt; INT_MAX/<literal type="number" pos:start="41:42" pos:end="41:42">8</literal> &amp;&amp; tmp &gt; <literal type="number" pos:start="41:53" pos:end="41:53">0</literal></argument>)</argument_list></macro>

    <expr_stmt pos:start="43:5" pos:end="43:59"><expr pos:start="43:5" pos:end="43:58"><name pos:start="43:5" pos:end="43:14">syncpoints</name><operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:58"><name pos:start="43:17" pos:end="43:25">av_malloc</name><argument_list pos:start="43:26" pos:end="43:58">(<argument pos:start="43:27" pos:end="43:57"><expr pos:start="43:27" pos:end="43:57"><sizeof pos:start="43:27" pos:end="43:41">sizeof<argument_list pos:start="43:33" pos:end="43:41">(<argument pos:start="43:34" pos:end="43:40"><expr pos:start="43:34" pos:end="43:40"><name pos:start="43:34" pos:end="43:40">int64_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="43:42" pos:end="43:42">*</operator><name pos:start="43:43" pos:end="43:57">syncpoint_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:64"><expr pos:start="45:5" pos:end="45:63"><name pos:start="45:5" pos:end="45:16">has_keyframe</name><operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:63"><name pos:start="45:19" pos:end="45:27">av_malloc</name><argument_list pos:start="45:28" pos:end="45:63">(<argument pos:start="45:29" pos:end="45:62"><expr pos:start="45:29" pos:end="45:62"><sizeof pos:start="45:29" pos:end="45:42">sizeof<argument_list pos:start="45:35" pos:end="45:42">(<argument pos:start="45:36" pos:end="45:41"><expr pos:start="45:36" pos:end="45:41"><name pos:start="45:36" pos:end="45:41">int8_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="45:43" pos:end="45:43">*</operator><operator pos:start="45:44" pos:end="45:44">(</operator><name pos:start="45:45" pos:end="45:59">syncpoint_count</name><operator pos:start="45:60" pos:end="45:60">+</operator><literal type="number" pos:start="45:61" pos:end="45:61">1</literal><operator pos:start="45:62" pos:end="45:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="55:5">for<control pos:start="47:8" pos:end="47:36">(<init pos:start="47:9" pos:end="47:12"><expr pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:9">i</name><operator pos:start="47:10" pos:end="47:10">=</operator><literal type="number" pos:start="47:11" pos:end="47:11">0</literal></expr>;</init> <condition pos:start="47:14" pos:end="47:31"><expr pos:start="47:14" pos:end="47:30"><name pos:start="47:14" pos:end="47:14">i</name><operator pos:start="47:15" pos:end="47:15">&lt;</operator><name pos:start="47:16" pos:end="47:30">syncpoint_count</name></expr>;</condition> <incr pos:start="47:33" pos:end="47:35"><expr pos:start="47:33" pos:end="47:35"><name pos:start="47:33" pos:end="47:33">i</name><operator pos:start="47:34" pos:end="47:35">++</operator></expr></incr>)</control><block pos:start="47:37" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:45">

        <macro pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:13">GET_V</name><argument_list pos:start="49:14" pos:end="49:35">(<argument pos:start="49:15" pos:end="49:27">syncpoints[i]</argument>, <argument pos:start="49:30" pos:end="49:34">tmp&gt;<literal type="number" pos:start="49:34" pos:end="49:34">0</literal></argument>)</argument_list></macro>

        <if_stmt pos:start="51:9" pos:end="53:45"><if pos:start="51:9" pos:end="53:45">if<condition pos:start="51:11" pos:end="51:13">(<expr pos:start="51:12" pos:end="51:12"><name pos:start="51:12" pos:end="51:12">i</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:45"><block_content pos:start="53:13" pos:end="53:45">

            <expr_stmt pos:start="53:13" pos:end="53:45"><expr pos:start="53:13" pos:end="53:44"><name pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:22">syncpoints</name><index pos:start="53:23" pos:end="53:25">[<expr pos:start="53:24" pos:end="53:24"><name pos:start="53:24" pos:end="53:24">i</name></expr>]</index></name> <operator pos:start="53:27" pos:end="53:28">+=</operator> <name pos:start="53:30" pos:end="53:44"><name pos:start="53:30" pos:end="53:39">syncpoints</name><index pos:start="53:40" pos:end="53:44">[<expr pos:start="53:41" pos:end="53:43"><name pos:start="53:41" pos:end="53:41">i</name><operator pos:start="53:42" pos:end="53:42">-</operator><literal type="number" pos:start="53:43" pos:end="53:43">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="59:5" pos:end="163:5">for<control pos:start="59:8" pos:end="59:34">(<init pos:start="59:9" pos:end="59:12"><expr pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:9">i</name><operator pos:start="59:10" pos:end="59:10">=</operator><literal type="number" pos:start="59:11" pos:end="59:11">0</literal></expr>;</init> <condition pos:start="59:14" pos:end="59:29"><expr pos:start="59:14" pos:end="59:28"><name pos:start="59:14" pos:end="59:14">i</name><operator pos:start="59:15" pos:end="59:15">&lt;</operator><name pos:start="59:16" pos:end="59:28"><name pos:start="59:16" pos:end="59:16">s</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:28">nb_streams</name></name></expr>;</condition> <incr pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:31">i</name><operator pos:start="59:32" pos:end="59:33">++</operator></expr></incr>)</control><block pos:start="59:35" pos:end="163:5">{<block_content pos:start="61:9" pos:end="161:9">

        <decl_stmt pos:start="61:9" pos:end="61:29"><decl pos:start="61:9" pos:end="61:28"><type pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:15">int64_t</name></type> <name pos:start="61:17" pos:end="61:24">last_pts</name><init pos:start="61:25" pos:end="61:28">= <expr pos:start="61:27" pos:end="61:28"><operator pos:start="61:27" pos:end="61:27">-</operator><literal type="number" pos:start="61:28" pos:end="61:28">1</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="63:9" pos:end="161:9">for<control pos:start="63:12" pos:end="63:36">(<init pos:start="63:13" pos:end="63:16"><expr pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:13">j</name><operator pos:start="63:14" pos:end="63:14">=</operator><literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>;</init> <condition pos:start="63:18" pos:end="63:35"><expr pos:start="63:18" pos:end="63:34"><name pos:start="63:18" pos:end="63:18">j</name><operator pos:start="63:19" pos:end="63:19">&lt;</operator><name pos:start="63:20" pos:end="63:34">syncpoint_count</name></expr>;</condition><incr/>)</control><block pos:start="63:37" pos:end="161:9">{<block_content pos:start="65:13" pos:end="159:13">

            <decl_stmt pos:start="65:13" pos:end="65:37"><decl pos:start="65:13" pos:end="65:36"><type pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:20">uint64_t</name></type> <name pos:start="65:22" pos:end="65:22">x</name><init pos:start="65:23" pos:end="65:36">= <expr pos:start="65:25" pos:end="65:36"><call pos:start="65:25" pos:end="65:36"><name pos:start="65:25" pos:end="65:32">ff_get_v</name><argument_list pos:start="65:33" pos:end="65:36">(<argument pos:start="65:34" pos:end="65:35"><expr pos:start="65:34" pos:end="65:35"><name pos:start="65:34" pos:end="65:35">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="67:13" pos:end="67:26"><decl pos:start="67:13" pos:end="67:25"><type pos:start="67:13" pos:end="67:15"><name pos:start="67:13" pos:end="67:15">int</name></type> <name pos:start="67:17" pos:end="67:20">type</name><init pos:start="67:21" pos:end="67:25">= <expr pos:start="67:23" pos:end="67:25"><name pos:start="67:23" pos:end="67:23">x</name><operator pos:start="67:24" pos:end="67:24">&amp;</operator><literal type="number" pos:start="67:25" pos:end="67:25">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="69:13" pos:end="69:21"><decl pos:start="69:13" pos:end="69:20"><type pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">int</name></type> <name pos:start="69:17" pos:end="69:17">n</name><init pos:start="69:18" pos:end="69:20">= <expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">j</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:18"><expr pos:start="71:13" pos:end="71:17"><name pos:start="71:13" pos:end="71:13">x</name><operator pos:start="71:14" pos:end="71:16">&gt;&gt;=</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="111:13"><if pos:start="73:13" pos:end="93:13">if<condition pos:start="73:15" pos:end="73:20">(<expr pos:start="73:16" pos:end="73:19"><name pos:start="73:16" pos:end="73:19">type</name></expr>)</condition><block pos:start="73:21" pos:end="93:13">{<block_content pos:start="75:17" pos:end="91:41">

                <decl_stmt pos:start="75:17" pos:end="75:30"><decl pos:start="75:17" pos:end="75:29"><type pos:start="75:17" pos:end="75:19"><name pos:start="75:17" pos:end="75:19">int</name></type> <name pos:start="75:21" pos:end="75:24">flag</name><init pos:start="75:25" pos:end="75:29">= <expr pos:start="75:27" pos:end="75:29"><name pos:start="75:27" pos:end="75:27">x</name><operator pos:start="75:28" pos:end="75:28">&amp;</operator><literal type="number" pos:start="75:29" pos:end="75:29">1</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:21"><name pos:start="77:17" pos:end="77:17">x</name><operator pos:start="77:18" pos:end="77:20">&gt;&gt;=</operator><literal type="number" pos:start="77:21" pos:end="77:21">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="79:17" pos:end="85:17"><if pos:start="79:17" pos:end="85:17">if<condition pos:start="79:19" pos:end="79:46">(<expr pos:start="79:20" pos:end="79:45"><name pos:start="79:20" pos:end="79:20">n</name><operator pos:start="79:21" pos:end="79:21">+</operator><name pos:start="79:22" pos:end="79:22">x</name> <operator pos:start="79:24" pos:end="79:25">&gt;=</operator> <name pos:start="79:27" pos:end="79:41">syncpoint_count</name> <operator pos:start="79:43" pos:end="79:43">+</operator> <literal type="number" pos:start="79:45" pos:end="79:45">1</literal></expr>)</condition><block pos:start="79:47" pos:end="85:17">{<block_content pos:start="81:21" pos:end="83:30">

                    <expr_stmt pos:start="81:21" pos:end="81:66"><expr pos:start="81:21" pos:end="81:65"><call pos:start="81:21" pos:end="81:65"><name pos:start="81:21" pos:end="81:26">av_log</name><argument_list pos:start="81:27" pos:end="81:65">(<argument pos:start="81:28" pos:end="81:28"><expr pos:start="81:28" pos:end="81:28"><name pos:start="81:28" pos:end="81:28">s</name></expr></argument>, <argument pos:start="81:31" pos:end="81:42"><expr pos:start="81:31" pos:end="81:42"><name pos:start="81:31" pos:end="81:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:45" pos:end="81:64"><expr pos:start="81:45" pos:end="81:64"><literal type="string" pos:start="81:45" pos:end="81:64">"index overflow A\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="83:21" pos:end="83:30">return <expr pos:start="83:28" pos:end="83:29"><operator pos:start="83:28" pos:end="83:28">-</operator><literal type="number" pos:start="83:29" pos:end="83:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <while pos:start="87:17" pos:end="89:44">while<condition pos:start="87:22" pos:end="87:26">(<expr pos:start="87:23" pos:end="87:25"><name pos:start="87:23" pos:end="87:23">x</name><operator pos:start="87:24" pos:end="87:25">--</operator></expr>)</condition><block type="pseudo" pos:start="89:21" pos:end="89:44"><block_content pos:start="89:21" pos:end="89:44">

                    <expr_stmt pos:start="89:21" pos:end="89:44"><expr pos:start="89:21" pos:end="89:43"><name pos:start="89:21" pos:end="89:37"><name pos:start="89:21" pos:end="89:32">has_keyframe</name><index pos:start="89:33" pos:end="89:37">[<expr pos:start="89:34" pos:end="89:36"><name pos:start="89:34" pos:end="89:34">n</name><operator pos:start="89:35" pos:end="89:36">++</operator></expr>]</index></name><operator pos:start="89:38" pos:end="89:38">=</operator> <name pos:start="89:40" pos:end="89:43">flag</name></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="91:17" pos:end="91:41"><expr pos:start="91:17" pos:end="91:40"><name pos:start="91:17" pos:end="91:33"><name pos:start="91:17" pos:end="91:28">has_keyframe</name><index pos:start="91:29" pos:end="91:33">[<expr pos:start="91:30" pos:end="91:32"><name pos:start="91:30" pos:end="91:30">n</name><operator pos:start="91:31" pos:end="91:32">++</operator></expr>]</index></name><operator pos:start="91:34" pos:end="91:34">=</operator> <operator pos:start="91:36" pos:end="91:36">!</operator><name pos:start="91:37" pos:end="91:40">flag</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="93:14" pos:end="111:13">else<block pos:start="93:18" pos:end="111:13">{<block_content pos:start="95:17" pos:end="109:17">

                <while pos:start="95:17" pos:end="109:17">while<condition pos:start="95:22" pos:end="95:29">(<expr pos:start="95:23" pos:end="95:28"><name pos:start="95:23" pos:end="95:23">x</name> <operator pos:start="95:25" pos:end="95:26">!=</operator> <literal type="number" pos:start="95:28" pos:end="95:28">1</literal></expr>)</condition><block pos:start="95:30" pos:end="109:17">{<block_content pos:start="97:21" pos:end="107:26">

                    <if_stmt pos:start="97:21" pos:end="103:21"><if pos:start="97:21" pos:end="103:21">if<condition pos:start="97:23" pos:end="97:46">(<expr pos:start="97:24" pos:end="97:45"><name pos:start="97:24" pos:end="97:24">n</name><operator pos:start="97:25" pos:end="97:26">&gt;=</operator><name pos:start="97:27" pos:end="97:41">syncpoint_count</name> <operator pos:start="97:43" pos:end="97:43">+</operator> <literal type="number" pos:start="97:45" pos:end="97:45">1</literal></expr>)</condition><block pos:start="97:47" pos:end="103:21">{<block_content pos:start="99:25" pos:end="101:34">

                        <expr_stmt pos:start="99:25" pos:end="99:70"><expr pos:start="99:25" pos:end="99:69"><call pos:start="99:25" pos:end="99:69"><name pos:start="99:25" pos:end="99:30">av_log</name><argument_list pos:start="99:31" pos:end="99:69">(<argument pos:start="99:32" pos:end="99:32"><expr pos:start="99:32" pos:end="99:32"><name pos:start="99:32" pos:end="99:32">s</name></expr></argument>, <argument pos:start="99:35" pos:end="99:46"><expr pos:start="99:35" pos:end="99:46"><name pos:start="99:35" pos:end="99:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:49" pos:end="99:68"><expr pos:start="99:49" pos:end="99:68"><literal type="string" pos:start="99:49" pos:end="99:68">"index overflow B\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="101:25" pos:end="101:34">return <expr pos:start="101:32" pos:end="101:33"><operator pos:start="101:32" pos:end="101:32">-</operator><literal type="number" pos:start="101:33" pos:end="101:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:43"><expr pos:start="105:21" pos:end="105:42"><name pos:start="105:21" pos:end="105:37"><name pos:start="105:21" pos:end="105:32">has_keyframe</name><index pos:start="105:33" pos:end="105:37">[<expr pos:start="105:34" pos:end="105:36"><name pos:start="105:34" pos:end="105:34">n</name><operator pos:start="105:35" pos:end="105:36">++</operator></expr>]</index></name><operator pos:start="105:38" pos:end="105:38">=</operator> <name pos:start="105:40" pos:end="105:40">x</name><operator pos:start="105:41" pos:end="105:41">&amp;</operator><literal type="number" pos:start="105:42" pos:end="105:42">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:26"><expr pos:start="107:21" pos:end="107:25"><name pos:start="107:21" pos:end="107:21">x</name><operator pos:start="107:22" pos:end="107:24">&gt;&gt;=</operator><literal type="number" pos:start="107:25" pos:end="107:25">1</literal></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if<condition pos:start="113:15" pos:end="113:31">(<expr pos:start="113:16" pos:end="113:30"><name pos:start="113:16" pos:end="113:30"><name pos:start="113:16" pos:end="113:27">has_keyframe</name><index pos:start="113:28" pos:end="113:30">[<expr pos:start="113:29" pos:end="113:29"><literal type="number" pos:start="113:29" pos:end="113:29">0</literal></expr>]</index></name></expr>)</condition><block pos:start="113:32" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:26">

                <expr_stmt pos:start="115:17" pos:end="115:86"><expr pos:start="115:17" pos:end="115:85"><call pos:start="115:17" pos:end="115:85"><name pos:start="115:17" pos:end="115:22">av_log</name><argument_list pos:start="115:23" pos:end="115:85">(<argument pos:start="115:24" pos:end="115:24"><expr pos:start="115:24" pos:end="115:24"><name pos:start="115:24" pos:end="115:24">s</name></expr></argument>, <argument pos:start="115:27" pos:end="115:38"><expr pos:start="115:27" pos:end="115:38"><name pos:start="115:27" pos:end="115:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:41" pos:end="115:84"><expr pos:start="115:41" pos:end="115:84"><literal type="string" pos:start="115:41" pos:end="115:84">"keyframe before first syncpoint in index\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="117:17" pos:end="117:26">return <expr pos:start="117:24" pos:end="117:25"><operator pos:start="117:24" pos:end="117:24">-</operator><literal type="number" pos:start="117:25" pos:end="117:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:41"><expr pos:start="121:13" pos:end="121:40"><call pos:start="121:13" pos:end="121:40"><name pos:start="121:13" pos:end="121:18">assert</name><argument_list pos:start="121:19" pos:end="121:40">(<argument pos:start="121:20" pos:end="121:39"><expr pos:start="121:20" pos:end="121:39"><name pos:start="121:20" pos:end="121:20">n</name><operator pos:start="121:21" pos:end="121:22">&lt;=</operator><name pos:start="121:23" pos:end="121:37">syncpoint_count</name><operator pos:start="121:38" pos:end="121:38">+</operator><literal type="number" pos:start="121:39" pos:end="121:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="123:13" pos:end="159:13">for<control pos:start="123:16" pos:end="123:27">(<init pos:start="123:17" pos:end="123:17">;</init> <condition pos:start="123:19" pos:end="123:22"><expr pos:start="123:19" pos:end="123:21"><name pos:start="123:19" pos:end="123:19">j</name><operator pos:start="123:20" pos:end="123:20">&lt;</operator><name pos:start="123:21" pos:end="123:21">n</name></expr>;</condition> <incr pos:start="123:24" pos:end="123:26"><expr pos:start="123:24" pos:end="123:26"><name pos:start="123:24" pos:end="123:24">j</name><operator pos:start="123:25" pos:end="123:26">++</operator></expr></incr>)</control><block pos:start="123:28" pos:end="159:13">{<block_content pos:start="125:17" pos:end="157:17">

                <if_stmt pos:start="125:17" pos:end="157:17"><if pos:start="125:17" pos:end="157:17">if<condition pos:start="125:19" pos:end="125:35">(<expr pos:start="125:20" pos:end="125:34"><name pos:start="125:20" pos:end="125:34"><name pos:start="125:20" pos:end="125:31">has_keyframe</name><index pos:start="125:32" pos:end="125:34">[<expr pos:start="125:33" pos:end="125:33"><name pos:start="125:33" pos:end="125:33">j</name></expr>]</index></name></expr>)</condition><block pos:start="125:36" pos:end="157:17">{<block_content pos:start="127:21" pos:end="155:38">

                    <decl_stmt pos:start="127:21" pos:end="127:48"><decl pos:start="127:21" pos:end="127:30"><type pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:28">uint64_t</name></type> <name pos:start="127:30" pos:end="127:30">B</name></decl>, <decl pos:start="127:33" pos:end="127:47"><type ref="prev" pos:start="127:21" pos:end="127:28"/><name pos:start="127:33" pos:end="127:33">A</name><init pos:start="127:34" pos:end="127:47">= <expr pos:start="127:36" pos:end="127:47"><call pos:start="127:36" pos:end="127:47"><name pos:start="127:36" pos:end="127:43">ff_get_v</name><argument_list pos:start="127:44" pos:end="127:47">(<argument pos:start="127:45" pos:end="127:46"><expr pos:start="127:45" pos:end="127:46"><name pos:start="127:45" pos:end="127:46">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="129:21" pos:end="139:29"><if pos:start="129:21" pos:end="137:21">if<condition pos:start="129:23" pos:end="129:26">(<expr pos:start="129:24" pos:end="129:25"><operator pos:start="129:24" pos:end="129:24">!</operator><name pos:start="129:25" pos:end="129:25">A</name></expr>)</condition><block pos:start="129:27" pos:end="137:21">{<block_content pos:start="131:25" pos:end="133:40">

                        <expr_stmt pos:start="131:25" pos:end="131:40"><expr pos:start="131:25" pos:end="131:39"><name pos:start="131:25" pos:end="131:25">A</name><operator pos:start="131:26" pos:end="131:26">=</operator> <call pos:start="131:28" pos:end="131:39"><name pos:start="131:28" pos:end="131:35">ff_get_v</name><argument_list pos:start="131:36" pos:end="131:39">(<argument pos:start="131:37" pos:end="131:38"><expr pos:start="131:37" pos:end="131:38"><name pos:start="131:37" pos:end="131:38">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="133:25" pos:end="133:40"><expr pos:start="133:25" pos:end="133:39"><name pos:start="133:25" pos:end="133:25">B</name><operator pos:start="133:26" pos:end="133:26">=</operator> <call pos:start="133:28" pos:end="133:39"><name pos:start="133:28" pos:end="133:35">ff_get_v</name><argument_list pos:start="133:36" pos:end="133:39">(<argument pos:start="133:37" pos:end="133:38"><expr pos:start="133:37" pos:end="133:38"><name pos:start="133:37" pos:end="133:38">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line" pos:start="135:25" pos:end="135:58">//eor_pts[j][i] = last_pts + A + B</comment>

                    </block_content>}</block></if><else pos:start="137:22" pos:end="139:29">else<block type="pseudo" pos:start="139:25" pos:end="139:29"><block_content pos:start="139:25" pos:end="139:29">

                        <expr_stmt pos:start="139:25" pos:end="139:29"><expr pos:start="139:25" pos:end="139:28"><name pos:start="139:25" pos:end="139:25">B</name><operator pos:start="139:26" pos:end="139:26">=</operator> <literal type="number" pos:start="139:28" pos:end="139:28">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="141:21" pos:end="153:42"><expr pos:start="141:21" pos:end="153:41"><call pos:start="141:21" pos:end="153:41"><name pos:start="141:21" pos:end="141:38">av_add_index_entry</name><argument_list pos:start="141:39" pos:end="153:41">(

                        <argument pos:start="143:25" pos:end="143:37"><expr pos:start="143:25" pos:end="143:37"><name pos:start="143:25" pos:end="143:37"><name pos:start="143:25" pos:end="143:25">s</name><operator pos:start="143:26" pos:end="143:27">-&gt;</operator><name pos:start="143:28" pos:end="143:34">streams</name><index pos:start="143:35" pos:end="143:37">[<expr pos:start="143:36" pos:end="143:36"><name pos:start="143:36" pos:end="143:36">i</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="145:25" pos:end="145:42"><expr pos:start="145:25" pos:end="145:42"><literal type="number" pos:start="145:25" pos:end="145:26">16</literal><operator pos:start="145:27" pos:end="145:27">*</operator><name pos:start="145:28" pos:end="145:42"><name pos:start="145:28" pos:end="145:37">syncpoints</name><index pos:start="145:38" pos:end="145:42">[<expr pos:start="145:39" pos:end="145:41"><name pos:start="145:39" pos:end="145:39">j</name><operator pos:start="145:40" pos:end="145:40">-</operator><literal type="number" pos:start="145:41" pos:end="145:41">1</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="147:25" pos:end="147:36"><expr pos:start="147:25" pos:end="147:36"><name pos:start="147:25" pos:end="147:32">last_pts</name> <operator pos:start="147:34" pos:end="147:34">+</operator> <name pos:start="147:36" pos:end="147:36">A</name></expr></argument>,

                        <argument pos:start="149:25" pos:end="149:25"><expr pos:start="149:25" pos:end="149:25"><literal type="number" pos:start="149:25" pos:end="149:25">0</literal></expr></argument>,

                        <argument pos:start="151:25" pos:end="151:25"><expr pos:start="151:25" pos:end="151:25"><literal type="number" pos:start="151:25" pos:end="151:25">0</literal></expr></argument>,

                        <argument pos:start="153:25" pos:end="153:40"><expr pos:start="153:25" pos:end="153:40"><name pos:start="153:25" pos:end="153:40">AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="155:21" pos:end="155:38"><expr pos:start="155:21" pos:end="155:37"><name pos:start="155:21" pos:end="155:28">last_pts</name> <operator pos:start="155:30" pos:end="155:31">+=</operator> <name pos:start="155:33" pos:end="155:33">A</name> <operator pos:start="155:35" pos:end="155:35">+</operator> <name pos:start="155:37" pos:end="155:37">B</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if<condition pos:start="167:7" pos:end="167:50">(<expr pos:start="167:8" pos:end="167:49"><call pos:start="167:8" pos:end="167:29"><name pos:start="167:8" pos:end="167:20">skip_reserved</name><argument_list pos:start="167:21" pos:end="167:29">(<argument pos:start="167:22" pos:end="167:23"><expr pos:start="167:22" pos:end="167:23"><name pos:start="167:22" pos:end="167:23">bc</name></expr></argument>, <argument pos:start="167:26" pos:end="167:28"><expr pos:start="167:26" pos:end="167:28"><name pos:start="167:26" pos:end="167:28">end</name></expr></argument>)</argument_list></call> <operator pos:start="167:31" pos:end="167:32">||</operator> <call pos:start="167:34" pos:end="167:49"><name pos:start="167:34" pos:end="167:45">get_checksum</name><argument_list pos:start="167:46" pos:end="167:49">(<argument pos:start="167:47" pos:end="167:48"><expr pos:start="167:47" pos:end="167:48"><name pos:start="167:47" pos:end="167:48">bc</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="167:51" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:18">

        <expr_stmt pos:start="169:9" pos:end="169:61"><expr pos:start="169:9" pos:end="169:60"><call pos:start="169:9" pos:end="169:60"><name pos:start="169:9" pos:end="169:14">av_log</name><argument_list pos:start="169:15" pos:end="169:60">(<argument pos:start="169:16" pos:end="169:16"><expr pos:start="169:16" pos:end="169:16"><name pos:start="169:16" pos:end="169:16">s</name></expr></argument>, <argument pos:start="169:19" pos:end="169:30"><expr pos:start="169:19" pos:end="169:30"><name pos:start="169:19" pos:end="169:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="169:33" pos:end="169:59"><expr pos:start="169:33" pos:end="169:59"><literal type="string" pos:start="169:33" pos:end="169:59">"index checksum mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="171:9" pos:end="171:18">return <expr pos:start="171:16" pos:end="171:17"><operator pos:start="171:16" pos:end="171:16">-</operator><literal type="number" pos:start="171:17" pos:end="171:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="175:5" pos:end="175:13">return <expr pos:start="175:12" pos:end="175:12"><literal type="number" pos:start="175:12" pos:end="175:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
