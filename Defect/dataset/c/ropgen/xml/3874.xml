<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3874.c" pos:tabs="8"><function pos:start="1:1" pos:end="114:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:44">bdrv_aligned_pwritev</name><parameter_list pos:start="1:45" pos:end="5:49">(<parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><name pos:start="1:46" pos:end="1:61">BlockDriverState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:27"><decl pos:start="3:5" pos:end="3:27"><type pos:start="3:5" pos:end="3:27"><name pos:start="3:5" pos:end="3:22">BdrvTrackedRequest</name> <modifier pos:start="3:24" pos:end="3:24">*</modifier></type><name pos:start="3:25" pos:end="3:27">req</name></decl></parameter>, <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:36">int64_t</name></type> <name pos:start="3:38" pos:end="3:43">offset</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:63"><decl pos:start="3:46" pos:end="3:63"><type pos:start="3:46" pos:end="3:63"><name pos:start="3:46" pos:end="3:53">unsigned</name> <name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:63">bytes</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:17">align</name></decl></parameter>, <parameter pos:start="5:20" pos:end="5:37"><decl pos:start="5:20" pos:end="5:37"><type pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:31">QEMUIOVector</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:37">qiov</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:48"><decl pos:start="5:40" pos:end="5:48"><type pos:start="5:40" pos:end="5:48"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:48">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="114:1">{<block_content pos:start="9:5" pos:end="112:15">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">BlockDriver</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">drv</name> <init pos:start="9:22" pos:end="9:30">= <expr pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:15">waited</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:54"><decl pos:start="17:5" pos:end="17:53"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:24">start_sector</name> <init pos:start="17:26" pos:end="17:53">= <expr pos:start="17:28" pos:end="17:53"><name pos:start="17:28" pos:end="17:33">offset</name> <operator pos:start="17:35" pos:end="17:36">&gt;&gt;</operator> <name pos:start="17:38" pos:end="17:53">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:72"><decl pos:start="19:5" pos:end="19:71"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:22">end_sector</name> <init pos:start="19:24" pos:end="19:71">= <expr pos:start="19:26" pos:end="19:71"><call pos:start="19:26" pos:end="19:71"><name pos:start="19:26" pos:end="19:37">DIV_ROUND_UP</name><argument_list pos:start="19:38" pos:end="19:71">(<argument pos:start="19:39" pos:end="19:52"><expr pos:start="19:39" pos:end="19:52"><name pos:start="19:39" pos:end="19:44">offset</name> <operator pos:start="19:46" pos:end="19:46">+</operator> <name pos:start="19:48" pos:end="19:52">bytes</name></expr></argument>, <argument pos:start="19:55" pos:end="19:70"><expr pos:start="19:55" pos:end="19:70"><name pos:start="19:55" pos:end="19:70">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><call pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:32">(<argument pos:start="23:12" pos:end="23:31"><expr pos:start="23:12" pos:end="23:31"><call pos:start="23:12" pos:end="23:31"><name pos:start="23:12" pos:end="23:24">is_power_of_2</name><argument_list pos:start="23:25" pos:end="23:31">(<argument pos:start="23:26" pos:end="23:30"><expr pos:start="23:26" pos:end="23:30"><name pos:start="23:26" pos:end="23:30">align</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><call pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:39">(<argument pos:start="25:12" pos:end="25:38"><expr pos:start="25:12" pos:end="25:38"><operator pos:start="25:12" pos:end="25:12">(</operator><name pos:start="25:13" pos:end="25:18">offset</name> <operator pos:start="25:20" pos:end="25:20">&amp;</operator> <operator pos:start="25:22" pos:end="25:22">(</operator><name pos:start="25:23" pos:end="25:27">align</name> <operator pos:start="25:29" pos:end="25:29">-</operator> <literal type="number" pos:start="25:31" pos:end="25:31">1</literal><operator pos:start="25:32" pos:end="25:32">)</operator><operator pos:start="25:33" pos:end="25:33">)</operator> <operator pos:start="25:35" pos:end="25:36">==</operator> <literal type="number" pos:start="25:38" pos:end="25:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><call pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:38">(<argument pos:start="27:12" pos:end="27:37"><expr pos:start="27:12" pos:end="27:37"><operator pos:start="27:12" pos:end="27:12">(</operator><name pos:start="27:13" pos:end="27:17">bytes</name> <operator pos:start="27:19" pos:end="27:19">&amp;</operator> <operator pos:start="27:21" pos:end="27:21">(</operator><name pos:start="27:22" pos:end="27:26">align</name> <operator pos:start="27:28" pos:end="27:28">-</operator> <literal type="number" pos:start="27:30" pos:end="27:30">1</literal><operator pos:start="27:31" pos:end="27:31">)</operator><operator pos:start="27:32" pos:end="27:32">)</operator> <operator pos:start="27:34" pos:end="27:35">==</operator> <literal type="number" pos:start="27:37" pos:end="27:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><call pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:40">(<argument pos:start="29:12" pos:end="29:39"><expr pos:start="29:12" pos:end="29:39"><operator pos:start="29:12" pos:end="29:12">!</operator><name pos:start="29:13" pos:end="29:16">qiov</name> <operator pos:start="29:18" pos:end="29:19">||</operator> <name pos:start="29:21" pos:end="29:25">bytes</name> <operator pos:start="29:27" pos:end="29:28">==</operator> <name pos:start="29:30" pos:end="29:39"><name pos:start="29:30" pos:end="29:33">qiov</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:39">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:49"><expr pos:start="31:5" pos:end="31:48"><call pos:start="31:5" pos:end="31:48"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:48">(<argument pos:start="31:12" pos:end="31:47"><expr pos:start="31:12" pos:end="31:47"><operator pos:start="31:12" pos:end="31:12">(</operator><name pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:14">bs</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:26">open_flags</name></name> <operator pos:start="31:28" pos:end="31:28">&amp;</operator> <name pos:start="31:30" pos:end="31:41">BDRV_O_NO_IO</name><operator pos:start="31:42" pos:end="31:42">)</operator> <operator pos:start="31:44" pos:end="31:45">==</operator> <literal type="number" pos:start="31:47" pos:end="31:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><call pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:37">(<argument pos:start="33:12" pos:end="33:36"><expr pos:start="33:12" pos:end="33:36"><operator pos:start="33:12" pos:end="33:12">!</operator><operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:18">flags</name> <operator pos:start="33:20" pos:end="33:20">&amp;</operator> <operator pos:start="33:22" pos:end="33:22">~</operator><name pos:start="33:23" pos:end="33:35">BDRV_REQ_MASK</name><operator pos:start="33:36" pos:end="33:36">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:10">waited</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:43"><name pos:start="37:14" pos:end="37:38">wait_serialising_requests</name><argument_list pos:start="37:39" pos:end="37:43">(<argument pos:start="37:40" pos:end="37:42"><expr pos:start="37:40" pos:end="37:42"><name pos:start="37:40" pos:end="37:42">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><call pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:40">(<argument pos:start="39:12" pos:end="39:39"><expr pos:start="39:12" pos:end="39:39"><operator pos:start="39:12" pos:end="39:12">!</operator><name pos:start="39:13" pos:end="39:18">waited</name> <operator pos:start="39:20" pos:end="39:21">||</operator> <operator pos:start="39:23" pos:end="39:23">!</operator><name pos:start="39:24" pos:end="39:39"><name pos:start="39:24" pos:end="39:26">req</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:39">serialising</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:42"><expr pos:start="41:5" pos:end="41:41"><call pos:start="41:5" pos:end="41:41"><name pos:start="41:5" pos:end="41:10">assert</name><argument_list pos:start="41:11" pos:end="41:41">(<argument pos:start="41:12" pos:end="41:40"><expr pos:start="41:12" pos:end="41:40"><name pos:start="41:12" pos:end="41:30"><name pos:start="41:12" pos:end="41:14">req</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:30">overlap_offset</name></name> <operator pos:start="41:32" pos:end="41:33">&lt;=</operator> <name pos:start="41:35" pos:end="41:40">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:71"><expr pos:start="43:5" pos:end="43:70"><call pos:start="43:5" pos:end="43:70"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:70">(<argument pos:start="43:12" pos:end="43:69"><expr pos:start="43:12" pos:end="43:69"><name pos:start="43:12" pos:end="43:17">offset</name> <operator pos:start="43:19" pos:end="43:19">+</operator> <name pos:start="43:21" pos:end="43:25">bytes</name> <operator pos:start="43:27" pos:end="43:28">&lt;=</operator> <name pos:start="43:30" pos:end="43:48"><name pos:start="43:30" pos:end="43:32">req</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:48">overlap_offset</name></name> <operator pos:start="43:50" pos:end="43:50">+</operator> <name pos:start="43:52" pos:end="43:69"><name pos:start="43:52" pos:end="43:54">req</name><operator pos:start="43:55" pos:end="43:56">-&gt;</operator><name pos:start="43:57" pos:end="43:69">overlap_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:77"><expr pos:start="47:5" pos:end="47:76"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:76"><name pos:start="47:11" pos:end="47:42">notifier_with_return_list_notify</name><argument_list pos:start="47:43" pos:end="47:76">(<argument pos:start="47:44" pos:end="47:70"><expr pos:start="47:44" pos:end="47:70"><operator pos:start="47:44" pos:end="47:44">&amp;</operator><name pos:start="47:45" pos:end="47:70"><name pos:start="47:45" pos:end="47:46">bs</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:70">before_write_notifiers</name></name></expr></argument>, <argument pos:start="47:73" pos:end="47:75"><expr pos:start="47:73" pos:end="47:75"><name pos:start="47:73" pos:end="47:75">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="65:5"><if pos:start="51:5" pos:end="65:5">if <condition pos:start="51:8" pos:end="55:33">(<expr pos:start="51:9" pos:end="55:32"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:12">ret</name> <operator pos:start="51:14" pos:end="51:15">&amp;&amp;</operator> <name pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:18">bs</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:33">detect_zeroes</name></name> <operator pos:start="51:35" pos:end="51:36">!=</operator> <name pos:start="51:38" pos:end="51:71">BLOCKDEV_DETECT_ZEROES_OPTIONS_OFF</name> <operator pos:start="51:73" pos:end="51:74">&amp;&amp;</operator>

        <operator pos:start="53:9" pos:end="53:9">!</operator><operator pos:start="53:10" pos:end="53:10">(</operator><name pos:start="53:11" pos:end="53:15">flags</name> <operator pos:start="53:17" pos:end="53:17">&amp;</operator> <name pos:start="53:19" pos:end="53:37">BDRV_REQ_ZERO_WRITE</name><operator pos:start="53:38" pos:end="53:38">)</operator> <operator pos:start="53:40" pos:end="53:41">&amp;&amp;</operator> <name pos:start="53:43" pos:end="53:68"><name pos:start="53:43" pos:end="53:45">drv</name><operator pos:start="53:46" pos:end="53:47">-&gt;</operator><name pos:start="53:48" pos:end="53:68">bdrv_co_pwrite_zeroes</name></name> <operator pos:start="53:70" pos:end="53:71">&amp;&amp;</operator>

        <call pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:26">qemu_iovec_is_zero</name><argument_list pos:start="55:27" pos:end="55:32">(<argument pos:start="55:28" pos:end="55:31"><expr pos:start="55:28" pos:end="55:31"><name pos:start="55:28" pos:end="55:31">qiov</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:35" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:9">

        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:13">flags</name> <operator pos:start="57:15" pos:end="57:16">|=</operator> <name pos:start="57:18" pos:end="57:36">BDRV_REQ_ZERO_WRITE</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:70">(<expr pos:start="59:13" pos:end="59:69"><name pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:14">bs</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:29">detect_zeroes</name></name> <operator pos:start="59:31" pos:end="59:32">==</operator> <name pos:start="59:34" pos:end="59:69">BLOCKDEV_DETECT_ZEROES_OPTIONS_UNMAP</name></expr>)</condition> <block pos:start="59:72" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:40">

            <expr_stmt pos:start="61:13" pos:end="61:40"><expr pos:start="61:13" pos:end="61:39"><name pos:start="61:13" pos:end="61:17">flags</name> <operator pos:start="61:19" pos:end="61:20">|=</operator> <name pos:start="61:22" pos:end="61:39">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="85:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:16">(<expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">&lt;</operator> <literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>)</condition> <block pos:start="69:18" pos:end="73:5">{<block_content>

        <comment type="block" pos:start="71:9" pos:end="71:69">/* Do nothing, write notifier decided to fail this request */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="79:5">else if <condition pos:start="73:15" pos:end="73:43">(<expr pos:start="73:16" pos:end="73:42"><name pos:start="73:16" pos:end="73:20">flags</name> <operator pos:start="73:22" pos:end="73:22">&amp;</operator> <name pos:start="73:24" pos:end="73:42">BDRV_REQ_ZERO_WRITE</name></expr>)</condition> <block pos:start="73:45" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:65">

        <expr_stmt pos:start="75:9" pos:end="75:50"><expr pos:start="75:9" pos:end="75:49"><call pos:start="75:9" pos:end="75:49"><name pos:start="75:9" pos:end="75:24">bdrv_debug_event</name><argument_list pos:start="75:25" pos:end="75:49">(<argument pos:start="75:26" pos:end="75:27"><expr pos:start="75:26" pos:end="75:27"><name pos:start="75:26" pos:end="75:27">bs</name></expr></argument>, <argument pos:start="75:30" pos:end="75:48"><expr pos:start="75:30" pos:end="75:48"><name pos:start="75:30" pos:end="75:48">BLKDBG_PWRITEV_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:65"><expr pos:start="77:9" pos:end="77:64"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:64"><name pos:start="77:15" pos:end="77:38">bdrv_co_do_pwrite_zeroes</name><argument_list pos:start="77:39" pos:end="77:64">(<argument pos:start="77:40" pos:end="77:41"><expr pos:start="77:40" pos:end="77:41"><name pos:start="77:40" pos:end="77:41">bs</name></expr></argument>, <argument pos:start="77:44" pos:end="77:49"><expr pos:start="77:44" pos:end="77:49"><name pos:start="77:44" pos:end="77:49">offset</name></expr></argument>, <argument pos:start="77:52" pos:end="77:56"><expr pos:start="77:52" pos:end="77:56"><name pos:start="77:52" pos:end="77:56">bytes</name></expr></argument>, <argument pos:start="77:59" pos:end="77:63"><expr pos:start="77:59" pos:end="77:63"><name pos:start="77:59" pos:end="77:63">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="79:7" pos:end="85:5">else <block pos:start="79:12" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:66">

        <expr_stmt pos:start="81:9" pos:end="81:45"><expr pos:start="81:9" pos:end="81:44"><call pos:start="81:9" pos:end="81:44"><name pos:start="81:9" pos:end="81:24">bdrv_debug_event</name><argument_list pos:start="81:25" pos:end="81:44">(<argument pos:start="81:26" pos:end="81:27"><expr pos:start="81:26" pos:end="81:27"><name pos:start="81:26" pos:end="81:27">bs</name></expr></argument>, <argument pos:start="81:30" pos:end="81:43"><expr pos:start="81:30" pos:end="81:43"><name pos:start="81:30" pos:end="81:43">BLKDBG_PWRITEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:66"><expr pos:start="83:9" pos:end="83:65"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:65"><name pos:start="83:15" pos:end="83:33">bdrv_driver_pwritev</name><argument_list pos:start="83:34" pos:end="83:65">(<argument pos:start="83:35" pos:end="83:36"><expr pos:start="83:35" pos:end="83:36"><name pos:start="83:35" pos:end="83:36">bs</name></expr></argument>, <argument pos:start="83:39" pos:end="83:44"><expr pos:start="83:39" pos:end="83:44"><name pos:start="83:39" pos:end="83:44">offset</name></expr></argument>, <argument pos:start="83:47" pos:end="83:51"><expr pos:start="83:47" pos:end="83:51"><name pos:start="83:47" pos:end="83:51">bytes</name></expr></argument>, <argument pos:start="83:54" pos:end="83:57"><expr pos:start="83:54" pos:end="83:57"><name pos:start="83:54" pos:end="83:57">qiov</name></expr></argument>, <argument pos:start="83:60" pos:end="83:64"><expr pos:start="83:60" pos:end="83:64"><name pos:start="83:60" pos:end="83:64">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:46"><expr pos:start="87:5" pos:end="87:45"><call pos:start="87:5" pos:end="87:45"><name pos:start="87:5" pos:end="87:20">bdrv_debug_event</name><argument_list pos:start="87:21" pos:end="87:45">(<argument pos:start="87:22" pos:end="87:23"><expr pos:start="87:22" pos:end="87:23"><name pos:start="87:22" pos:end="87:23">bs</name></expr></argument>, <argument pos:start="87:26" pos:end="87:44"><expr pos:start="87:26" pos:end="87:44"><name pos:start="87:26" pos:end="87:44">BLKDBG_PWRITEV_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="92:5" pos:end="92:64"><expr pos:start="92:5" pos:end="92:63"><call pos:start="92:5" pos:end="92:63"><name pos:start="92:5" pos:end="92:18">bdrv_set_dirty</name><argument_list pos:start="92:19" pos:end="92:63">(<argument pos:start="92:20" pos:end="92:21"><expr pos:start="92:20" pos:end="92:21"><name pos:start="92:20" pos:end="92:21">bs</name></expr></argument>, <argument pos:start="92:24" pos:end="92:35"><expr pos:start="92:24" pos:end="92:35"><name pos:start="92:24" pos:end="92:35">start_sector</name></expr></argument>, <argument pos:start="92:38" pos:end="92:62"><expr pos:start="92:38" pos:end="92:62"><name pos:start="92:38" pos:end="92:47">end_sector</name> <operator pos:start="92:49" pos:end="92:49">-</operator> <name pos:start="92:51" pos:end="92:62">start_sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="96:5" pos:end="100:5"><if pos:start="96:5" pos:end="100:5">if <condition pos:start="96:8" pos:end="96:47">(<expr pos:start="96:9" pos:end="96:46"><name pos:start="96:9" pos:end="96:29"><name pos:start="96:9" pos:end="96:10">bs</name><operator pos:start="96:11" pos:end="96:12">-&gt;</operator><name pos:start="96:13" pos:end="96:29">wr_highest_offset</name></name> <operator pos:start="96:31" pos:end="96:31">&lt;</operator> <name pos:start="96:33" pos:end="96:38">offset</name> <operator pos:start="96:40" pos:end="96:40">+</operator> <name pos:start="96:42" pos:end="96:46">bytes</name></expr>)</condition> <block pos:start="96:49" pos:end="100:5">{<block_content pos:start="98:9" pos:end="98:47">

        <expr_stmt pos:start="98:9" pos:end="98:47"><expr pos:start="98:9" pos:end="98:46"><name pos:start="98:9" pos:end="98:29"><name pos:start="98:9" pos:end="98:10">bs</name><operator pos:start="98:11" pos:end="98:12">-&gt;</operator><name pos:start="98:13" pos:end="98:29">wr_highest_offset</name></name> <operator pos:start="98:31" pos:end="98:31">=</operator> <name pos:start="98:33" pos:end="98:38">offset</name> <operator pos:start="98:40" pos:end="98:40">+</operator> <name pos:start="98:42" pos:end="98:46">bytes</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="104:5" pos:end="108:5"><if pos:start="104:5" pos:end="108:5">if <condition pos:start="104:8" pos:end="104:17">(<expr pos:start="104:9" pos:end="104:16"><name pos:start="104:9" pos:end="104:11">ret</name> <operator pos:start="104:13" pos:end="104:14">&gt;=</operator> <literal type="number" pos:start="104:16" pos:end="104:16">0</literal></expr>)</condition> <block pos:start="104:19" pos:end="108:5">{<block_content pos:start="106:9" pos:end="106:63">

        <expr_stmt pos:start="106:9" pos:end="106:63"><expr pos:start="106:9" pos:end="106:62"><name pos:start="106:9" pos:end="106:25"><name pos:start="106:9" pos:end="106:10">bs</name><operator pos:start="106:11" pos:end="106:12">-&gt;</operator><name pos:start="106:13" pos:end="106:25">total_sectors</name></name> <operator pos:start="106:27" pos:end="106:27">=</operator> <call pos:start="106:29" pos:end="106:62"><name pos:start="106:29" pos:end="106:31">MAX</name><argument_list pos:start="106:32" pos:end="106:62">(<argument pos:start="106:33" pos:end="106:49"><expr pos:start="106:33" pos:end="106:49"><name pos:start="106:33" pos:end="106:49"><name pos:start="106:33" pos:end="106:34">bs</name><operator pos:start="106:35" pos:end="106:36">-&gt;</operator><name pos:start="106:37" pos:end="106:49">total_sectors</name></name></expr></argument>, <argument pos:start="106:52" pos:end="106:61"><expr pos:start="106:52" pos:end="106:61"><name pos:start="106:52" pos:end="106:61">end_sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="112:5" pos:end="112:15">return <expr pos:start="112:12" pos:end="112:14"><name pos:start="112:12" pos:end="112:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
