<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23950.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:16">cpu_set_log</name><parameter_list pos:start="1:17" pos:end="1:31">(<parameter pos:start="1:18" pos:end="1:30"><decl pos:start="1:18" pos:end="1:30"><type pos:start="1:18" pos:end="1:20"><name pos:start="1:18" pos:end="1:20">int</name></type> <name pos:start="1:22" pos:end="1:30">log_flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:5">

    <expr_stmt pos:start="5:5" pos:end="5:25"><expr pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:12">loglevel</name> <operator pos:start="5:14" pos:end="5:14">=</operator> <name pos:start="5:16" pos:end="5:24">log_flags</name></expr>;</expr_stmt>

    <if_stmt pos:start="7:5" pos:end="41:5"><if pos:start="7:5" pos:end="41:5">if <condition pos:start="7:8" pos:end="7:29">(<expr pos:start="7:9" pos:end="7:28"><name pos:start="7:9" pos:end="7:16">loglevel</name> <operator pos:start="7:18" pos:end="7:19">&amp;&amp;</operator> <operator pos:start="7:21" pos:end="7:21">!</operator><name pos:start="7:22" pos:end="7:28">logfile</name></expr>)</condition> <block pos:start="7:31" pos:end="41:5">{<block_content pos:start="9:9" pos:end="39:23">

        <expr_stmt pos:start="9:9" pos:end="9:61"><expr pos:start="9:9" pos:end="9:60"><name pos:start="9:9" pos:end="9:15">logfile</name> <operator pos:start="9:17" pos:end="9:17">=</operator> <call pos:start="9:19" pos:end="9:60"><name pos:start="9:19" pos:end="9:23">fopen</name><argument_list pos:start="9:24" pos:end="9:60">(<argument pos:start="9:25" pos:end="9:35"><expr pos:start="9:25" pos:end="9:35"><name pos:start="9:25" pos:end="9:35">logfilename</name></expr></argument>, <argument pos:start="9:38" pos:end="9:59"><expr pos:start="9:38" pos:end="9:59"><ternary pos:start="9:38" pos:end="9:59"><condition pos:start="9:38" pos:end="9:49"><expr pos:start="9:38" pos:end="9:47"><name pos:start="9:38" pos:end="9:47">log_append</name></expr> ?</condition><then pos:start="9:51" pos:end="9:53"> <expr pos:start="9:51" pos:end="9:53"><literal type="string" pos:start="9:51" pos:end="9:53">"a"</literal></expr> </then><else pos:start="9:55" pos:end="9:59">: <expr pos:start="9:57" pos:end="9:59"><literal type="string" pos:start="9:57" pos:end="9:59">"w"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="11:9" pos:end="20:0"><if pos:start="11:9" pos:end="20:0">if <condition pos:start="11:12" pos:end="11:21">(<expr pos:start="11:13" pos:end="11:20"><operator pos:start="11:13" pos:end="11:13">!</operator><name pos:start="11:14" pos:end="11:20">logfile</name></expr>)</condition> <block pos:start="11:23" pos:end="20:0">{<block_content pos:start="13:13" pos:end="15:21">

            <expr_stmt pos:start="13:13" pos:end="13:32"><expr pos:start="13:13" pos:end="13:31"><call pos:start="13:13" pos:end="13:31"><name pos:start="13:13" pos:end="13:18">perror</name><argument_list pos:start="13:19" pos:end="13:31">(<argument pos:start="13:20" pos:end="13:30"><expr pos:start="13:20" pos:end="13:30"><name pos:start="13:20" pos:end="13:30">logfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="15:13" pos:end="15:21"><expr pos:start="15:13" pos:end="15:20"><call pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:17">_exit</name><argument_list pos:start="15:18" pos:end="15:20">(<argument pos:start="15:19" pos:end="15:19"><expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="19:1" pos:end="19:28">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:28"><operator pos:start="19:5" pos:end="19:5">!</operator><call pos:start="19:6" pos:end="19:28"><name pos:start="19:6" pos:end="19:12">defined</name><argument_list pos:start="19:13" pos:end="19:28">(<argument pos:start="19:14" pos:end="19:27"><expr pos:start="19:14" pos:end="19:27"><name pos:start="19:14" pos:end="19:27">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="21:9" pos:end="21:76">/* must avoid mmap() usage of glibc by setting a buffer "by hand" */</comment>

        <block pos:start="23:9" pos:end="32:0">{<block_content pos:start="25:13" pos:end="27:71">

            <decl_stmt pos:start="25:13" pos:end="25:42"><decl pos:start="25:13" pos:end="25:41"><type pos:start="25:13" pos:end="25:23"><specifier pos:start="25:13" pos:end="25:18">static</specifier> <name pos:start="25:20" pos:end="25:23">char</name></type> <name pos:start="25:25" pos:end="25:41"><name pos:start="25:25" pos:end="25:35">logfile_buf</name><index pos:start="25:36" pos:end="25:41">[<expr pos:start="25:37" pos:end="25:40"><literal type="number" pos:start="25:37" pos:end="25:40">4096</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:71"><expr pos:start="27:13" pos:end="27:70"><call pos:start="27:13" pos:end="27:70"><name pos:start="27:13" pos:end="27:19">setvbuf</name><argument_list pos:start="27:20" pos:end="27:70">(<argument pos:start="27:21" pos:end="27:27"><expr pos:start="27:21" pos:end="27:27"><name pos:start="27:21" pos:end="27:27">logfile</name></expr></argument>, <argument pos:start="27:30" pos:end="27:40"><expr pos:start="27:30" pos:end="27:40"><name pos:start="27:30" pos:end="27:40">logfile_buf</name></expr></argument>, <argument pos:start="27:43" pos:end="27:48"><expr pos:start="27:43" pos:end="27:48"><name pos:start="27:43" pos:end="27:48">_IOLBF</name></expr></argument>, <argument pos:start="27:51" pos:end="27:69"><expr pos:start="27:51" pos:end="27:69"><sizeof pos:start="27:51" pos:end="27:69">sizeof<argument_list pos:start="27:57" pos:end="27:69">(<argument pos:start="27:58" pos:end="27:68"><expr pos:start="27:58" pos:end="27:68"><name pos:start="27:58" pos:end="27:68">logfile_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:elif pos:start="31:1" pos:end="31:22">#<cpp:directive pos:start="31:2" pos:end="31:5">elif</cpp:directive> <expr pos:start="31:7" pos:end="31:22"><operator pos:start="31:7" pos:end="31:7">!</operator><call pos:start="31:8" pos:end="31:22"><name pos:start="31:8" pos:end="31:14">defined</name><argument_list pos:start="31:15" pos:end="31:22">(<argument pos:start="31:16" pos:end="31:21"><expr pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:21">_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <comment type="block" pos:start="33:9" pos:end="33:73">/* Win32 doesn't support line-buffering and requires size &gt;= 2 */</comment>

        <expr_stmt pos:start="35:9" pos:end="38:0"><expr pos:start="35:9" pos:end="35:41"><call pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:15">setvbuf</name><argument_list pos:start="35:16" pos:end="35:41">(<argument pos:start="35:17" pos:end="35:23"><expr pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:23">logfile</name></expr></argument>, <argument pos:start="35:26" pos:end="35:29"><expr pos:start="35:26" pos:end="35:29"><name pos:start="35:26" pos:end="35:29">NULL</name></expr></argument>, <argument pos:start="35:32" pos:end="35:37"><expr pos:start="35:32" pos:end="35:37"><name pos:start="35:32" pos:end="35:37">_IOLBF</name></expr></argument>, <argument pos:start="35:40" pos:end="35:40"><expr pos:start="35:40" pos:end="35:40"><literal type="number" pos:start="35:40" pos:end="35:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="39:9" pos:end="39:23"><expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:18">log_append</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <literal type="number" pos:start="39:22" pos:end="39:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:29">(<expr pos:start="43:9" pos:end="43:28"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:17">loglevel</name> <operator pos:start="43:19" pos:end="43:20">&amp;&amp;</operator> <name pos:start="43:22" pos:end="43:28">logfile</name></expr>)</condition> <block pos:start="43:31" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:23">

        <expr_stmt pos:start="45:9" pos:end="45:24"><expr pos:start="45:9" pos:end="45:23"><call pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:14">fclose</name><argument_list pos:start="45:15" pos:end="45:23">(<argument pos:start="45:16" pos:end="45:22"><expr pos:start="45:16" pos:end="45:22"><name pos:start="45:16" pos:end="45:22">logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:15">logfile</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
