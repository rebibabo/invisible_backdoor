<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20100.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">xen_domain_watcher</name><parameter_list pos:start="1:30" pos:end="1:35">(<parameter pos:start="1:31" pos:end="1:34"><decl pos:start="1:31" pos:end="1:34"><type pos:start="1:31" pos:end="1:34"><name pos:start="1:31" pos:end="1:34">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">qemu_running</name> <init pos:start="5:22" pos:end="5:24">= <expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13"><name pos:start="7:9" pos:end="7:10">fd</name><index pos:start="7:11" pos:end="7:13">[<expr pos:start="7:12" pos:end="7:12"><literal type="number" pos:start="7:12" pos:end="7:12">2</literal></expr>]</index></name></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">i</name></decl>, <decl pos:start="7:19" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:19">n</name></decl>, <decl pos:start="7:22" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:23">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:13">byte</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><call pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:12">pipe</name><argument_list pos:start="13:13" pos:end="13:16">(<argument pos:start="13:14" pos:end="13:15"><expr pos:start="13:14" pos:end="13:15"><name pos:start="13:14" pos:end="13:15">fd</name></expr></argument>)</argument_list></call> <operator pos:start="13:18" pos:end="13:19">!=</operator> <literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr>)</condition> <block pos:start="13:24" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:77"><expr pos:start="15:9" pos:end="15:76"><call pos:start="15:9" pos:end="15:76"><name pos:start="15:9" pos:end="15:16">qemu_log</name><argument_list pos:start="15:17" pos:end="15:76">(<argument pos:start="15:18" pos:end="15:44"><expr pos:start="15:18" pos:end="15:44"><literal type="string" pos:start="15:18" pos:end="15:44">"%s: Huh? pipe error: %s\n"</literal></expr></argument>, <argument pos:start="15:47" pos:end="15:58"><expr pos:start="15:47" pos:end="15:58"><name pos:start="15:47" pos:end="15:58">__FUNCTION__</name></expr></argument>, <argument pos:start="15:61" pos:end="15:75"><expr pos:start="15:61" pos:end="15:75"><call pos:start="15:61" pos:end="15:75"><name pos:start="15:61" pos:end="15:68">strerror</name><argument_list pos:start="15:69" pos:end="15:75">(<argument pos:start="15:70" pos:end="15:74"><expr pos:start="15:70" pos:end="15:74"><name pos:start="15:70" pos:end="15:74">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="23:17"><if pos:start="21:5" pos:end="23:17">if <condition pos:start="21:8" pos:end="21:20">(<expr pos:start="21:9" pos:end="21:19"><call pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:12">fork</name><argument_list pos:start="21:13" pos:end="21:14">()</argument_list></call> <operator pos:start="21:16" pos:end="21:17">!=</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:17"><block_content pos:start="23:9" pos:end="23:17">

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="23:19" pos:end="23:33">/* not child */</comment>



    <comment type="block" pos:start="27:5" pos:end="29:53">/* close all file handles, except stdio/out/err,

     * our watch pipe and the xen interface handle */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:24"><expr pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:5">n</name> <operator pos:start="31:7" pos:end="31:7">=</operator> <call pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:21">getdtablesize</name><argument_list pos:start="31:22" pos:end="31:23">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="33:5" pos:end="45:5">for <control pos:start="33:9" pos:end="33:27">(<init pos:start="33:10" pos:end="33:15"><expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:10">i</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">3</literal></expr>;</init> <condition pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:21"><name pos:start="33:17" pos:end="33:17">i</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <name pos:start="33:21" pos:end="33:21">n</name></expr>;</condition> <incr pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:24">i</name><operator pos:start="33:25" pos:end="33:26">++</operator></expr></incr>)</control> <block pos:start="33:29" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:17">

        <if_stmt pos:start="35:9" pos:end="37:21"><if pos:start="35:9" pos:end="37:21">if <condition pos:start="35:12" pos:end="35:23">(<expr pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:13">i</name> <operator pos:start="35:15" pos:end="35:16">==</operator> <name pos:start="35:18" pos:end="35:22"><name pos:start="35:18" pos:end="35:19">fd</name><index pos:start="35:20" pos:end="35:22">[<expr pos:start="35:21" pos:end="35:21"><literal type="number" pos:start="35:21" pos:end="35:21">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:21"><block_content pos:start="37:13" pos:end="37:21">

            <continue pos:start="37:13" pos:end="37:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="41:21"><if pos:start="39:9" pos:end="41:21">if <condition pos:start="39:12" pos:end="39:24">(<expr pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:13">i</name> <operator pos:start="39:15" pos:end="39:16">==</operator> <name pos:start="39:18" pos:end="39:23">xen_xc</name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:21"><block_content pos:start="41:13" pos:end="41:21">

            <continue pos:start="41:13" pos:end="41:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:17"><expr pos:start="43:9" pos:end="43:16"><call pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:13">close</name><argument_list pos:start="43:14" pos:end="43:16">(<argument pos:start="43:15" pos:end="43:15"><expr pos:start="43:15" pos:end="43:15"><name pos:start="43:15" pos:end="43:15">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="49:5" pos:end="49:29">/* ignore term signals */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:29"><expr pos:start="51:5" pos:end="51:28"><call pos:start="51:5" pos:end="51:28"><name pos:start="51:5" pos:end="51:10">signal</name><argument_list pos:start="51:11" pos:end="51:28">(<argument pos:start="51:12" pos:end="51:17"><expr pos:start="51:12" pos:end="51:17"><name pos:start="51:12" pos:end="51:17">SIGINT</name></expr></argument>,  <argument pos:start="51:21" pos:end="51:27"><expr pos:start="51:21" pos:end="51:27"><name pos:start="51:21" pos:end="51:27">SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:29"><expr pos:start="53:5" pos:end="53:28"><call pos:start="53:5" pos:end="53:28"><name pos:start="53:5" pos:end="53:10">signal</name><argument_list pos:start="53:11" pos:end="53:28">(<argument pos:start="53:12" pos:end="53:18"><expr pos:start="53:12" pos:end="53:18"><name pos:start="53:12" pos:end="53:18">SIGTERM</name></expr></argument>, <argument pos:start="53:21" pos:end="53:27"><expr pos:start="53:21" pos:end="53:27"><name pos:start="53:21" pos:end="53:27">SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:31">/* wait for qemu exiting */</comment>

    <while pos:start="59:5" pos:end="93:5">while <condition pos:start="59:11" pos:end="59:24">(<expr pos:start="59:12" pos:end="59:23"><name pos:start="59:12" pos:end="59:23">qemu_running</name></expr>)</condition> <block pos:start="59:26" pos:end="93:5">{<block_content pos:start="61:9" pos:end="91:9">

        <expr_stmt pos:start="61:9" pos:end="61:35"><expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:10">rc</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <call pos:start="61:14" pos:end="61:34"><name pos:start="61:14" pos:end="61:17">read</name><argument_list pos:start="61:18" pos:end="61:34">(<argument pos:start="61:19" pos:end="61:23"><expr pos:start="61:19" pos:end="61:23"><name pos:start="61:19" pos:end="61:23"><name pos:start="61:19" pos:end="61:20">fd</name><index pos:start="61:21" pos:end="61:23">[<expr pos:start="61:22" pos:end="61:22"><literal type="number" pos:start="61:22" pos:end="61:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="61:26" pos:end="61:30"><expr pos:start="61:26" pos:end="61:30"><operator pos:start="61:26" pos:end="61:26">&amp;</operator><name pos:start="61:27" pos:end="61:30">byte</name></expr></argument>, <argument pos:start="61:33" pos:end="61:33"><expr pos:start="61:33" pos:end="61:33"><literal type="number" pos:start="61:33" pos:end="61:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="63:9" pos:end="91:9">switch <condition pos:start="63:16" pos:end="63:19">(<expr pos:start="63:17" pos:end="63:18"><name pos:start="63:17" pos:end="63:18">rc</name></expr>)</condition> <block pos:start="63:21" pos:end="91:9">{<block_content pos:start="65:9" pos:end="89:18">

        <case pos:start="65:9" pos:end="65:16">case <expr pos:start="65:14" pos:end="65:15"><operator pos:start="65:14" pos:end="65:14">-</operator><literal type="number" pos:start="65:15" pos:end="65:15">1</literal></expr>:</case>

            <if_stmt pos:start="67:13" pos:end="69:25"><if pos:start="67:13" pos:end="69:25">if <condition pos:start="67:16" pos:end="67:31">(<expr pos:start="67:17" pos:end="67:30"><name pos:start="67:17" pos:end="67:21">errno</name> <operator pos:start="67:23" pos:end="67:24">==</operator> <name pos:start="67:26" pos:end="67:30">EINTR</name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:25"><block_content pos:start="69:17" pos:end="69:25">

                <continue pos:start="69:17" pos:end="69:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:81"><expr pos:start="71:13" pos:end="71:80"><call pos:start="71:13" pos:end="71:80"><name pos:start="71:13" pos:end="71:20">qemu_log</name><argument_list pos:start="71:21" pos:end="71:80">(<argument pos:start="71:22" pos:end="71:48"><expr pos:start="71:22" pos:end="71:48"><literal type="string" pos:start="71:22" pos:end="71:48">"%s: Huh? read error: %s\n"</literal></expr></argument>, <argument pos:start="71:51" pos:end="71:62"><expr pos:start="71:51" pos:end="71:62"><name pos:start="71:51" pos:end="71:62">__FUNCTION__</name></expr></argument>, <argument pos:start="71:65" pos:end="71:79"><expr pos:start="71:65" pos:end="71:79"><call pos:start="71:65" pos:end="71:79"><name pos:start="71:65" pos:end="71:72">strerror</name><argument_list pos:start="71:73" pos:end="71:79">(<argument pos:start="71:74" pos:end="71:78"><expr pos:start="71:74" pos:end="71:78"><name pos:start="71:74" pos:end="71:78">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:29"><expr pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:24">qemu_running</name> <operator pos:start="73:26" pos:end="73:26">=</operator> <literal type="number" pos:start="73:28" pos:end="73:28">0</literal></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:15">case <expr pos:start="77:14" pos:end="77:14"><literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>:</case>

            <comment type="block" pos:start="79:13" pos:end="79:36">/* EOF -&gt; qemu exited */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:29"><expr pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:24">qemu_running</name> <operator pos:start="81:26" pos:end="81:26">=</operator> <literal type="number" pos:start="81:28" pos:end="81:28">0</literal></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <default pos:start="85:9" pos:end="85:16">default:</default>

            <expr_stmt pos:start="87:13" pos:end="87:73"><expr pos:start="87:13" pos:end="87:72"><call pos:start="87:13" pos:end="87:72"><name pos:start="87:13" pos:end="87:20">qemu_log</name><argument_list pos:start="87:21" pos:end="87:72">(<argument pos:start="87:22" pos:end="87:57"><expr pos:start="87:22" pos:end="87:57"><literal type="string" pos:start="87:22" pos:end="87:57">"%s: Huh? data on the watch pipe?\n"</literal></expr></argument>, <argument pos:start="87:60" pos:end="87:71"><expr pos:start="87:60" pos:end="87:71"><name pos:start="87:60" pos:end="87:71">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <comment type="block" pos:start="97:5" pos:end="97:17">/* cleanup */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:65"><expr pos:start="99:5" pos:end="99:64"><call pos:start="99:5" pos:end="99:64"><name pos:start="99:5" pos:end="99:12">qemu_log</name><argument_list pos:start="99:13" pos:end="99:64">(<argument pos:start="99:14" pos:end="99:38"><expr pos:start="99:14" pos:end="99:38"><literal type="string" pos:start="99:14" pos:end="99:38">"%s: destroy domain %d\n"</literal></expr></argument>, <argument pos:start="99:41" pos:end="99:52"><expr pos:start="99:41" pos:end="99:52"><name pos:start="99:41" pos:end="99:52">__FUNCTION__</name></expr></argument>, <argument pos:start="99:55" pos:end="99:63"><expr pos:start="99:55" pos:end="99:63"><name pos:start="99:55" pos:end="99:63">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:41"><expr pos:start="101:5" pos:end="101:40"><call pos:start="101:5" pos:end="101:40"><name pos:start="101:5" pos:end="101:21">xc_domain_destroy</name><argument_list pos:start="101:22" pos:end="101:40">(<argument pos:start="101:23" pos:end="101:28"><expr pos:start="101:23" pos:end="101:28"><name pos:start="101:23" pos:end="101:28">xen_xc</name></expr></argument>, <argument pos:start="101:31" pos:end="101:39"><expr pos:start="101:31" pos:end="101:39"><name pos:start="101:31" pos:end="101:39">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:13"><expr pos:start="103:5" pos:end="103:12"><call pos:start="103:5" pos:end="103:12"><name pos:start="103:5" pos:end="103:9">_exit</name><argument_list pos:start="103:10" pos:end="103:12">(<argument pos:start="103:11" pos:end="103:11"><expr pos:start="103:11" pos:end="103:11"><literal type="number" pos:start="103:11" pos:end="103:11">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
