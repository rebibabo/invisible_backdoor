<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21277.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">xen_pt_msgctrl_reg_write</name><parameter_list pos:start="1:36" pos:end="5:76">(<parameter pos:start="1:37" pos:end="1:61"><decl pos:start="1:37" pos:end="1:61"><type pos:start="1:37" pos:end="1:61"><name pos:start="1:37" pos:end="1:58">XenPCIPassthroughState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:55"><decl pos:start="3:37" pos:end="3:55"><type pos:start="3:37" pos:end="3:55"><name pos:start="3:37" pos:end="3:44">XenPTReg</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">cfg_entry</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:70"><decl pos:start="3:58" pos:end="3:70"><type pos:start="3:58" pos:end="3:70"><name pos:start="3:58" pos:end="3:65">uint16_t</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:70">val</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:54"><decl pos:start="5:37" pos:end="5:54"><type pos:start="5:37" pos:end="5:54"><name pos:start="5:37" pos:end="5:44">uint16_t</name></type> <name pos:start="5:46" pos:end="5:54">dev_value</name></decl></parameter>, <parameter pos:start="5:57" pos:end="5:75"><decl pos:start="5:57" pos:end="5:75"><type pos:start="5:57" pos:end="5:75"><name pos:start="5:57" pos:end="5:64">uint16_t</name></type> <name pos:start="5:66" pos:end="5:75">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="105:1">{<block_content pos:start="9:5" pos:end="103:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">XenPTMSI</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">msi</name> <init pos:start="11:19" pos:end="11:26">= <expr pos:start="11:21" pos:end="11:26"><name pos:start="11:21" pos:end="11:26"><name pos:start="11:21" pos:end="11:21">s</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:26">msi</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:26">writable_mask</name> <init pos:start="13:28" pos:end="13:30">= <expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:73"><decl pos:start="15:5" pos:end="15:72"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:29">throughable_mask</name> <init pos:start="15:31" pos:end="15:72">= <expr pos:start="15:33" pos:end="15:72"><call pos:start="15:33" pos:end="15:72"><name pos:start="15:33" pos:end="15:52">get_throughable_mask</name><argument_list pos:start="15:53" pos:end="15:72">(<argument pos:start="15:54" pos:end="15:54"><expr pos:start="15:54" pos:end="15:54"><name pos:start="15:54" pos:end="15:54">s</name></expr></argument>, <argument pos:start="15:57" pos:end="15:59"><expr pos:start="15:57" pos:end="15:59"><name pos:start="15:57" pos:end="15:59">reg</name></expr></argument>, <argument pos:start="15:62" pos:end="15:71"><expr pos:start="15:62" pos:end="15:71"><name pos:start="15:62" pos:end="15:71">valid_mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:47">/* Currently no support for multi-vector */</comment>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:35">(<expr pos:start="21:9" pos:end="21:34"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:12">val</name> <operator pos:start="21:14" pos:end="21:14">&amp;</operator> <name pos:start="21:16" pos:end="21:34">PCI_MSI_FLAGS_QSIZE</name></expr>)</condition> <block pos:start="21:37" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:80">

        <expr_stmt pos:start="23:9" pos:end="23:80"><expr pos:start="23:9" pos:end="23:79"><call pos:start="23:9" pos:end="23:79"><name pos:start="23:9" pos:end="23:19">XEN_PT_WARN</name><argument_list pos:start="23:20" pos:end="23:79">(<argument pos:start="23:21" pos:end="23:27"><expr pos:start="23:21" pos:end="23:27"><operator pos:start="23:21" pos:end="23:21">&amp;</operator><name pos:start="23:22" pos:end="23:27"><name pos:start="23:22" pos:end="23:22">s</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:27">dev</name></name></expr></argument>, <argument pos:start="23:30" pos:end="23:72"><expr pos:start="23:30" pos:end="23:72"><literal type="string" pos:start="23:30" pos:end="23:72">"Tries to set more than 1 vector ctrl %x\n"</literal></expr></argument>, <argument pos:start="23:75" pos:end="23:78"><expr pos:start="23:75" pos:end="23:78"><operator pos:start="23:75" pos:end="23:75">*</operator><name pos:start="23:76" pos:end="23:78">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:63"><expr pos:start="31:5" pos:end="31:62"><name pos:start="31:5" pos:end="31:17">writable_mask</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:33"><name pos:start="31:21" pos:end="31:23">reg</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:33">emu_mask</name></name> <operator pos:start="31:35" pos:end="31:35">&amp;</operator> <operator pos:start="31:37" pos:end="31:37">~</operator><name pos:start="31:38" pos:end="31:49"><name pos:start="31:38" pos:end="31:40">reg</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:49">ro_mask</name></name> <operator pos:start="31:51" pos:end="31:51">&amp;</operator> <name pos:start="31:53" pos:end="31:62">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:79"><expr pos:start="33:5" pos:end="33:78"><name pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:13">cfg_entry</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:19">data</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:78"><name pos:start="33:23" pos:end="33:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="33:41" pos:end="33:78">(<argument pos:start="33:42" pos:end="33:45"><expr pos:start="33:42" pos:end="33:45"><operator pos:start="33:42" pos:end="33:42">*</operator><name pos:start="33:43" pos:end="33:45">val</name></expr></argument>, <argument pos:start="33:48" pos:end="33:62"><expr pos:start="33:48" pos:end="33:62"><name pos:start="33:48" pos:end="33:62"><name pos:start="33:48" pos:end="33:56">cfg_entry</name><operator pos:start="33:57" pos:end="33:58">-&gt;</operator><name pos:start="33:59" pos:end="33:62">data</name></name></expr></argument>, <argument pos:start="33:65" pos:end="33:77"><expr pos:start="33:65" pos:end="33:77"><name pos:start="33:65" pos:end="33:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:58"><expr pos:start="35:5" pos:end="35:57"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:7">msi</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:14">flags</name></name> <operator pos:start="35:16" pos:end="35:17">|=</operator> <name pos:start="35:19" pos:end="35:33"><name pos:start="35:19" pos:end="35:27">cfg_entry</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:33">data</name></name> <operator pos:start="35:35" pos:end="35:35">&amp;</operator> <operator pos:start="35:37" pos:end="35:37">~</operator><name pos:start="35:38" pos:end="35:57">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:57">/* create value for writing to I/O device register */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:65"><expr pos:start="41:5" pos:end="41:64"><operator pos:start="41:5" pos:end="41:5">*</operator><name pos:start="41:6" pos:end="41:8">val</name> <operator pos:start="41:10" pos:end="41:10">=</operator> <call pos:start="41:12" pos:end="41:64"><name pos:start="41:12" pos:end="41:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="41:30" pos:end="41:64">(<argument pos:start="41:31" pos:end="41:34"><expr pos:start="41:31" pos:end="41:34"><operator pos:start="41:31" pos:end="41:31">*</operator><name pos:start="41:32" pos:end="41:34">val</name></expr></argument>, <argument pos:start="41:37" pos:end="41:45"><expr pos:start="41:37" pos:end="41:45"><name pos:start="41:37" pos:end="41:45">dev_value</name></expr></argument>, <argument pos:start="41:48" pos:end="41:63"><expr pos:start="41:48" pos:end="41:63"><name pos:start="41:48" pos:end="41:63">throughable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:20">/* update MSI */</comment>

    <if_stmt pos:start="47:5" pos:end="99:5"><if pos:start="47:5" pos:end="95:5">if <condition pos:start="47:8" pos:end="47:36">(<expr pos:start="47:9" pos:end="47:35"><operator pos:start="47:9" pos:end="47:9">*</operator><name pos:start="47:10" pos:end="47:12">val</name> <operator pos:start="47:14" pos:end="47:14">&amp;</operator> <name pos:start="47:16" pos:end="47:35">PCI_MSI_FLAGS_ENABLE</name></expr>)</condition> <block pos:start="47:38" pos:end="95:5">{<block_content pos:start="51:9" pos:end="93:43">

        <comment type="block" pos:start="49:9" pos:end="49:47">/* setup MSI pirq for the first time */</comment>

        <if_stmt pos:start="51:9" pos:end="91:9"><if pos:start="51:9" pos:end="91:9">if <condition pos:start="51:12" pos:end="51:30">(<expr pos:start="51:13" pos:end="51:29"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:29"><name pos:start="51:14" pos:end="51:16">msi</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:29">initialized</name></name></expr>)</condition> <block pos:start="51:32" pos:end="91:9">{<block_content pos:start="55:13" pos:end="89:31">

            <comment type="block" pos:start="53:13" pos:end="53:35">/* Init physical one */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:69"><expr pos:start="55:13" pos:end="55:68"><call pos:start="55:13" pos:end="55:68"><name pos:start="55:13" pos:end="55:22">XEN_PT_LOG</name><argument_list pos:start="55:23" pos:end="55:68">(<argument pos:start="55:24" pos:end="55:30"><expr pos:start="55:24" pos:end="55:30"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:30"><name pos:start="55:25" pos:end="55:25">s</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:30">dev</name></name></expr></argument>, <argument pos:start="55:33" pos:end="55:61"><expr pos:start="55:33" pos:end="55:61"><literal type="string" pos:start="55:33" pos:end="55:61">"setup MSI (register: %x).\n"</literal></expr></argument>, <argument pos:start="55:64" pos:end="55:67"><expr pos:start="55:64" pos:end="55:67"><operator pos:start="55:64" pos:end="55:64">*</operator><name pos:start="55:65" pos:end="55:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="75:13"><if pos:start="57:13" pos:end="75:13">if <condition pos:start="57:16" pos:end="57:36">(<expr pos:start="57:17" pos:end="57:35"><call pos:start="57:17" pos:end="57:35"><name pos:start="57:17" pos:end="57:32">xen_pt_msi_setup</name><argument_list pos:start="57:33" pos:end="57:35">(<argument pos:start="57:34" pos:end="57:34"><expr pos:start="57:34" pos:end="57:34"><name pos:start="57:34" pos:end="57:34">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:38" pos:end="75:13">{<block_content pos:start="69:17" pos:end="73:25">

                <comment type="block" pos:start="59:17" pos:end="67:19">/* We do not broadcast the error to the framework code, so

                 * that MSI errors are contained in MSI emulation code and

                 * QEMU can go on running.

                 * Guest MSI would be actually not working.

                 */</comment>

                <expr_stmt pos:start="69:17" pos:end="69:46"><expr pos:start="69:17" pos:end="69:45"><operator pos:start="69:17" pos:end="69:17">*</operator><name pos:start="69:18" pos:end="69:20">val</name> <operator pos:start="69:22" pos:end="69:23">&amp;=</operator> <operator pos:start="69:25" pos:end="69:25">~</operator><name pos:start="69:26" pos:end="69:45">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:80"><expr pos:start="71:17" pos:end="71:79"><call pos:start="71:17" pos:end="71:79"><name pos:start="71:17" pos:end="71:27">XEN_PT_WARN</name><argument_list pos:start="71:28" pos:end="71:79">(<argument pos:start="71:29" pos:end="71:35"><expr pos:start="71:29" pos:end="71:35"><operator pos:start="71:29" pos:end="71:29">&amp;</operator><name pos:start="71:30" pos:end="71:35"><name pos:start="71:30" pos:end="71:30">s</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:35">dev</name></name></expr></argument>, <argument pos:start="71:38" pos:end="71:72"><expr pos:start="71:38" pos:end="71:72"><literal type="string" pos:start="71:38" pos:end="71:72">"Can not map MSI (register: %x)!\n"</literal></expr></argument>, <argument pos:start="71:75" pos:end="71:78"><expr pos:start="71:75" pos:end="71:78"><operator pos:start="71:75" pos:end="71:75">*</operator><name pos:start="71:76" pos:end="71:78">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="73:17" pos:end="73:25">return <expr pos:start="73:24" pos:end="73:24"><literal type="number" pos:start="73:24" pos:end="73:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="77:13" pos:end="85:13"><if pos:start="77:13" pos:end="85:13">if <condition pos:start="77:16" pos:end="77:37">(<expr pos:start="77:17" pos:end="77:36"><call pos:start="77:17" pos:end="77:36"><name pos:start="77:17" pos:end="77:33">xen_pt_msi_update</name><argument_list pos:start="77:34" pos:end="77:36">(<argument pos:start="77:35" pos:end="77:35"><expr pos:start="77:35" pos:end="77:35"><name pos:start="77:35" pos:end="77:35">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:39" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:25">

                <expr_stmt pos:start="79:17" pos:end="79:46"><expr pos:start="79:17" pos:end="79:45"><operator pos:start="79:17" pos:end="79:17">*</operator><name pos:start="79:18" pos:end="79:20">val</name> <operator pos:start="79:22" pos:end="79:23">&amp;=</operator> <operator pos:start="79:25" pos:end="79:25">~</operator><name pos:start="79:26" pos:end="79:45">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:81"><expr pos:start="81:17" pos:end="81:80"><call pos:start="81:17" pos:end="81:80"><name pos:start="81:17" pos:end="81:27">XEN_PT_WARN</name><argument_list pos:start="81:28" pos:end="81:80">(<argument pos:start="81:29" pos:end="81:35"><expr pos:start="81:29" pos:end="81:35"><operator pos:start="81:29" pos:end="81:29">&amp;</operator><name pos:start="81:30" pos:end="81:35"><name pos:start="81:30" pos:end="81:30">s</name><operator pos:start="81:31" pos:end="81:32">-&gt;</operator><name pos:start="81:33" pos:end="81:35">dev</name></name></expr></argument>, <argument pos:start="81:38" pos:end="81:73"><expr pos:start="81:38" pos:end="81:73"><literal type="string" pos:start="81:38" pos:end="81:73">"Can not bind MSI (register: %x)!\n"</literal></expr></argument>, <argument pos:start="81:76" pos:end="81:79"><expr pos:start="81:76" pos:end="81:79"><operator pos:start="81:76" pos:end="81:76">*</operator><name pos:start="81:77" pos:end="81:79">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="83:17" pos:end="83:25">return <expr pos:start="83:24" pos:end="83:24"><literal type="number" pos:start="83:24" pos:end="83:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:36"><expr pos:start="87:13" pos:end="87:35"><name pos:start="87:13" pos:end="87:28"><name pos:start="87:13" pos:end="87:15">msi</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:28">initialized</name></name> <operator pos:start="87:30" pos:end="87:30">=</operator> <name pos:start="87:32" pos:end="87:35">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:31"><expr pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:15">msi</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:23">mapped</name></name> <operator pos:start="89:25" pos:end="89:25">=</operator> <name pos:start="89:27" pos:end="89:30">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:43"><expr pos:start="93:9" pos:end="93:42"><name pos:start="93:9" pos:end="93:18"><name pos:start="93:9" pos:end="93:11">msi</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:18">flags</name></name> <operator pos:start="93:20" pos:end="93:21">|=</operator> <name pos:start="93:23" pos:end="93:42">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="99:5">else if <condition pos:start="95:15" pos:end="95:27">(<expr pos:start="95:16" pos:end="95:26"><name pos:start="95:16" pos:end="95:26"><name pos:start="95:16" pos:end="95:18">msi</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:26">mapped</name></name></expr>)</condition> <block pos:start="95:29" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:30">

        <expr_stmt pos:start="97:9" pos:end="97:30"><expr pos:start="97:9" pos:end="97:29"><call pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:26">xen_pt_msi_disable</name><argument_list pos:start="97:27" pos:end="97:29">(<argument pos:start="97:28" pos:end="97:28"><expr pos:start="97:28" pos:end="97:28"><name pos:start="97:28" pos:end="97:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
