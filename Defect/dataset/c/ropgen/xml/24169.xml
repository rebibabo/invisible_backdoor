<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24169.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">ebml_parse_elem</name><parameter_list pos:start="1:27" pos:end="3:58">(<parameter pos:start="1:28" pos:end="1:57"><decl pos:start="1:28" pos:end="1:57"><type pos:start="1:28" pos:end="1:57"><name pos:start="1:28" pos:end="1:47">MatroskaDemuxContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:57">matroska</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:45"><decl pos:start="3:28" pos:end="3:45"><type pos:start="3:28" pos:end="3:45"><name pos:start="3:28" pos:end="3:37">EbmlSyntax</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:45">syntax</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:57"><decl pos:start="3:48" pos:end="3:57"><type pos:start="3:48" pos:end="3:57"><name pos:start="3:48" pos:end="3:51">void</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:57">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="119:1">{<block_content pos:start="7:5" pos:end="117:15">

    <decl_stmt pos:start="7:5" pos:end="25:6"><decl pos:start="7:5" pos:end="25:5"><type pos:start="7:5" pos:end="7:25"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:25">uint64_t</name></type> <name pos:start="7:27" pos:end="7:54"><name pos:start="7:27" pos:end="7:37">max_lengths</name><index pos:start="7:38" pos:end="7:54">[<expr pos:start="7:39" pos:end="7:53"><name pos:start="7:39" pos:end="7:53">EBML_TYPE_COUNT</name></expr>]</index></name> <init pos:start="7:56" pos:end="25:5">= <expr pos:start="7:58" pos:end="25:5"><block pos:start="7:58" pos:end="25:5">{

        <expr pos:start="9:9" pos:end="9:24"><index pos:start="9:9" pos:end="9:19">[<expr pos:start="9:10" pos:end="9:18"><name pos:start="9:10" pos:end="9:18">EBML_UINT</name></expr>]</index>  <operator pos:start="9:22" pos:end="9:22">=</operator> <literal type="number" pos:start="9:24" pos:end="9:24">8</literal></expr>,

        <expr pos:start="11:9" pos:end="11:24"><index pos:start="11:9" pos:end="11:20">[<expr pos:start="11:10" pos:end="11:19"><name pos:start="11:10" pos:end="11:19">EBML_FLOAT</name></expr>]</index> <operator pos:start="11:22" pos:end="11:22">=</operator> <literal type="number" pos:start="11:24" pos:end="11:24">8</literal></expr>,

        <comment type="line" pos:start="13:9" pos:end="13:33">// max. 16 MB for strings</comment>

        <expr pos:start="15:9" pos:end="15:32"><index pos:start="15:9" pos:end="15:18">[<expr pos:start="15:10" pos:end="15:17"><name pos:start="15:10" pos:end="15:17">EBML_STR</name></expr>]</index>   <operator pos:start="15:22" pos:end="15:22">=</operator> <literal type="number" pos:start="15:24" pos:end="15:32">0x1000000</literal></expr>,

        <expr pos:start="17:9" pos:end="17:32"><index pos:start="17:9" pos:end="17:19">[<expr pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:18">EBML_UTF8</name></expr>]</index>  <operator pos:start="17:22" pos:end="17:22">=</operator> <literal type="number" pos:start="17:24" pos:end="17:32">0x1000000</literal></expr>,

        <comment type="line" pos:start="19:9" pos:end="19:38">// max. 256 MB for binary data</comment>

        <expr pos:start="21:9" pos:end="21:33"><index pos:start="21:9" pos:end="21:18">[<expr pos:start="21:10" pos:end="21:17"><name pos:start="21:10" pos:end="21:17">EBML_BIN</name></expr>]</index>   <operator pos:start="21:22" pos:end="21:22">=</operator> <literal type="number" pos:start="21:24" pos:end="21:33">0x10000000</literal></expr>,

        <comment type="line" pos:start="23:9" pos:end="23:38">// no limits for anything else</comment>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:40"><decl pos:start="27:5" pos:end="27:39"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">AVIOContext</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:19">pb</name> <init pos:start="27:21" pos:end="27:39">= <expr pos:start="27:23" pos:end="27:39"><name pos:start="27:23" pos:end="27:39"><name pos:start="27:23" pos:end="27:30">matroska</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:35">ctx</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:39">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:29"><decl pos:start="29:5" pos:end="29:28"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:15">id</name> <init pos:start="29:17" pos:end="29:28">= <expr pos:start="29:19" pos:end="29:28"><name pos:start="29:19" pos:end="29:28"><name pos:start="29:19" pos:end="29:24">syntax</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:28">id</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">uint64_t</name></type> <name pos:start="31:14" pos:end="31:19">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:12"><decl pos:start="33:5" pos:end="33:11"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:11">res</name></decl>;</decl_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:8">data</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <operator pos:start="37:12" pos:end="37:12">(</operator><name pos:start="37:13" pos:end="37:16">char</name> <operator pos:start="37:18" pos:end="37:18">*</operator><operator pos:start="37:19" pos:end="37:19">)</operator><name pos:start="37:20" pos:end="37:23">data</name> <operator pos:start="37:25" pos:end="37:25">+</operator> <name pos:start="37:27" pos:end="37:45"><name pos:start="37:27" pos:end="37:32">syntax</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:45">data_offset</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:14">syntax</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:30">list_elem_size</name></name></expr>)</condition> <block pos:start="39:33" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:24">

        <decl_stmt pos:start="41:9" pos:end="41:30"><decl pos:start="41:9" pos:end="41:29"><type pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:16">EbmlList</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:22">list</name> <init pos:start="41:24" pos:end="41:29">= <expr pos:start="41:26" pos:end="41:29"><name pos:start="41:26" pos:end="41:29">data</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:86"><expr pos:start="43:9" pos:end="43:85"><name pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:12">list</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:18">elem</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:85"><name pos:start="43:22" pos:end="43:31">av_realloc</name><argument_list pos:start="43:32" pos:end="43:85">(<argument pos:start="43:33" pos:end="43:42"><expr pos:start="43:33" pos:end="43:42"><name pos:start="43:33" pos:end="43:42"><name pos:start="43:33" pos:end="43:36">list</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:42">elem</name></name></expr></argument>, <argument pos:start="43:45" pos:end="43:84"><expr pos:start="43:45" pos:end="43:84"><operator pos:start="43:45" pos:end="43:45">(</operator><name pos:start="43:46" pos:end="43:58"><name pos:start="43:46" pos:end="43:49">list</name><operator pos:start="43:50" pos:end="43:51">-&gt;</operator><name pos:start="43:52" pos:end="43:58">nb_elem</name></name><operator pos:start="43:59" pos:end="43:59">+</operator><literal type="number" pos:start="43:60" pos:end="43:60">1</literal><operator pos:start="43:61" pos:end="43:61">)</operator><operator pos:start="43:62" pos:end="43:62">*</operator><name pos:start="43:63" pos:end="43:84"><name pos:start="43:63" pos:end="43:68">syntax</name><operator pos:start="43:69" pos:end="43:70">-&gt;</operator><name pos:start="43:71" pos:end="43:84">list_elem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:72"><expr pos:start="45:9" pos:end="45:71"><name pos:start="45:9" pos:end="45:12">data</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <operator pos:start="45:16" pos:end="45:16">(</operator><name pos:start="45:17" pos:end="45:20">char</name><operator pos:start="45:21" pos:end="45:21">*</operator><operator pos:start="45:22" pos:end="45:22">)</operator><name pos:start="45:23" pos:end="45:32"><name pos:start="45:23" pos:end="45:26">list</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:32">elem</name></name> <operator pos:start="45:34" pos:end="45:34">+</operator> <name pos:start="45:36" pos:end="45:48"><name pos:start="45:36" pos:end="45:39">list</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:48">nb_elem</name></name><operator pos:start="45:49" pos:end="45:49">*</operator><name pos:start="45:50" pos:end="45:71"><name pos:start="45:50" pos:end="45:55">syntax</name><operator pos:start="45:56" pos:end="45:57">-&gt;</operator><name pos:start="45:58" pos:end="45:71">list_elem_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:48"><expr pos:start="47:9" pos:end="47:47"><call pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:14">memset</name><argument_list pos:start="47:15" pos:end="47:47">(<argument pos:start="47:16" pos:end="47:19"><expr pos:start="47:16" pos:end="47:19"><name pos:start="47:16" pos:end="47:19">data</name></expr></argument>, <argument pos:start="47:22" pos:end="47:22"><expr pos:start="47:22" pos:end="47:22"><literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr></argument>, <argument pos:start="47:25" pos:end="47:46"><expr pos:start="47:25" pos:end="47:46"><name pos:start="47:25" pos:end="47:46"><name pos:start="47:25" pos:end="47:30">syntax</name><operator pos:start="47:31" pos:end="47:32">-&gt;</operator><name pos:start="47:33" pos:end="47:46">list_elem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:24"><expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:12">list</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:21">nb_elem</name></name><operator pos:start="49:22" pos:end="49:23">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="75:5"><if pos:start="55:5" pos:end="75:5">if <condition pos:start="55:8" pos:end="55:63">(<expr pos:start="55:9" pos:end="55:62"><name pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:14">syntax</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:20">type</name></name> <operator pos:start="55:22" pos:end="55:23">!=</operator> <name pos:start="55:25" pos:end="55:33">EBML_PASS</name> <operator pos:start="55:35" pos:end="55:36">&amp;&amp;</operator> <name pos:start="55:38" pos:end="55:49"><name pos:start="55:38" pos:end="55:43">syntax</name><operator pos:start="55:44" pos:end="55:45">-&gt;</operator><name pos:start="55:46" pos:end="55:49">type</name></name> <operator pos:start="55:51" pos:end="55:52">!=</operator> <name pos:start="55:54" pos:end="55:62">EBML_STOP</name></expr>)</condition> <block pos:start="55:65" pos:end="75:5">{<block_content pos:start="57:9" pos:end="73:9">

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:16">matroska</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:28">current_id</name></name> <operator pos:start="57:30" pos:end="57:30">=</operator> <literal type="number" pos:start="57:32" pos:end="57:32">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="61:23"><if pos:start="59:9" pos:end="61:23">if <condition pos:start="59:12" pos:end="59:64">(<expr pos:start="59:13" pos:end="59:63"><operator pos:start="59:13" pos:end="59:13">(</operator><name pos:start="59:14" pos:end="59:16">res</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <call pos:start="59:20" pos:end="59:58"><name pos:start="59:20" pos:end="59:35">ebml_read_length</name><argument_list pos:start="59:36" pos:end="59:58">(<argument pos:start="59:37" pos:end="59:44"><expr pos:start="59:37" pos:end="59:44"><name pos:start="59:37" pos:end="59:44">matroska</name></expr></argument>, <argument pos:start="59:47" pos:end="59:48"><expr pos:start="59:47" pos:end="59:48"><name pos:start="59:47" pos:end="59:48">pb</name></expr></argument>, <argument pos:start="59:51" pos:end="59:57"><expr pos:start="59:51" pos:end="59:57"><operator pos:start="59:51" pos:end="59:51">&amp;</operator><name pos:start="59:52" pos:end="59:57">length</name></expr></argument>)</argument_list></call><operator pos:start="59:59" pos:end="59:59">)</operator> <operator pos:start="59:61" pos:end="59:61">&lt;</operator> <literal type="number" pos:start="59:63" pos:end="59:63">0</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:23"><block_content pos:start="61:13" pos:end="61:23">

            <return pos:start="61:13" pos:end="61:23">return <expr pos:start="61:20" pos:end="61:22"><name pos:start="61:20" pos:end="61:22">res</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="73:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:76">(<expr pos:start="63:13" pos:end="63:75"><name pos:start="63:13" pos:end="63:37"><name pos:start="63:13" pos:end="63:23">max_lengths</name><index pos:start="63:24" pos:end="63:37">[<expr pos:start="63:25" pos:end="63:36"><name pos:start="63:25" pos:end="63:36"><name pos:start="63:25" pos:end="63:30">syntax</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:36">type</name></name></expr>]</index></name> <operator pos:start="63:39" pos:end="63:40">&amp;&amp;</operator> <name pos:start="63:42" pos:end="63:47">length</name> <operator pos:start="63:49" pos:end="63:49">&gt;</operator> <name pos:start="63:51" pos:end="63:75"><name pos:start="63:51" pos:end="63:61">max_lengths</name><index pos:start="63:62" pos:end="63:75">[<expr pos:start="63:63" pos:end="63:74"><name pos:start="63:63" pos:end="63:74"><name pos:start="63:63" pos:end="63:68">syntax</name><operator pos:start="63:69" pos:end="63:70">-&gt;</operator><name pos:start="63:71" pos:end="63:74">type</name></name></expr>]</index></name></expr>)</condition> <block pos:start="63:78" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:39">

            <expr_stmt pos:start="65:13" pos:end="69:68"><expr pos:start="65:13" pos:end="69:67"><call pos:start="65:13" pos:end="69:67"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="69:67">(<argument pos:start="65:20" pos:end="65:32"><expr pos:start="65:20" pos:end="65:32"><name pos:start="65:20" pos:end="65:32"><name pos:start="65:20" pos:end="65:27">matroska</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:32">ctx</name></name></expr></argument>, <argument pos:start="65:35" pos:end="65:46"><expr pos:start="65:35" pos:end="65:46"><name pos:start="65:35" pos:end="65:46">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:85"><expr pos:start="67:20" pos:end="67:85"><literal type="string" pos:start="67:20" pos:end="67:39">"Invalid length 0x%"</literal><name pos:start="67:40" pos:end="67:45">PRIx64</name><literal type="string" pos:start="67:46" pos:end="67:53">" &gt; 0x%"</literal><name pos:start="67:54" pos:end="67:59">PRIx64</name><literal type="string" pos:start="67:60" pos:end="67:85">" for syntax element %i\n"</literal></expr></argument>,

                   <argument pos:start="69:20" pos:end="69:25"><expr pos:start="69:20" pos:end="69:25"><name pos:start="69:20" pos:end="69:25">length</name></expr></argument>, <argument pos:start="69:28" pos:end="69:52"><expr pos:start="69:28" pos:end="69:52"><name pos:start="69:28" pos:end="69:52"><name pos:start="69:28" pos:end="69:38">max_lengths</name><index pos:start="69:39" pos:end="69:52">[<expr pos:start="69:40" pos:end="69:51"><name pos:start="69:40" pos:end="69:51"><name pos:start="69:40" pos:end="69:45">syntax</name><operator pos:start="69:46" pos:end="69:47">-&gt;</operator><name pos:start="69:48" pos:end="69:51">type</name></name></expr>]</index></name></expr></argument>, <argument pos:start="69:55" pos:end="69:66"><expr pos:start="69:55" pos:end="69:66"><name pos:start="69:55" pos:end="69:66"><name pos:start="69:55" pos:end="69:60">syntax</name><operator pos:start="69:61" pos:end="69:62">-&gt;</operator><name pos:start="69:63" pos:end="69:66">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:39">return <expr pos:start="71:20" pos:end="71:38"><name pos:start="71:20" pos:end="71:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="79:5" pos:end="107:5">switch <condition pos:start="79:12" pos:end="79:25">(<expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:18">syntax</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:24">type</name></name></expr>)</condition> <block pos:start="79:27" pos:end="107:5">{<block_content pos:start="81:5" pos:end="105:70">

    <case pos:start="81:5" pos:end="81:19">case <expr pos:start="81:10" pos:end="81:18"><name pos:start="81:10" pos:end="81:18">EBML_UINT</name></expr>:</case>  <expr_stmt pos:start="81:22" pos:end="81:62"><expr pos:start="81:22" pos:end="81:61"><name pos:start="81:22" pos:end="81:24">res</name> <operator pos:start="81:26" pos:end="81:26">=</operator> <call pos:start="81:28" pos:end="81:61"><name pos:start="81:28" pos:end="81:41">ebml_read_uint</name>  <argument_list pos:start="81:44" pos:end="81:61">(<argument pos:start="81:45" pos:end="81:46"><expr pos:start="81:45" pos:end="81:46"><name pos:start="81:45" pos:end="81:46">pb</name></expr></argument>, <argument pos:start="81:49" pos:end="81:54"><expr pos:start="81:49" pos:end="81:54"><name pos:start="81:49" pos:end="81:54">length</name></expr></argument>, <argument pos:start="81:57" pos:end="81:60"><expr pos:start="81:57" pos:end="81:60"><name pos:start="81:57" pos:end="81:60">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <break pos:start="81:65" pos:end="81:70">break;</break>

    <case pos:start="83:5" pos:end="83:20">case <expr pos:start="83:10" pos:end="83:19"><name pos:start="83:10" pos:end="83:19">EBML_FLOAT</name></expr>:</case> <expr_stmt pos:start="83:22" pos:end="83:62"><expr pos:start="83:22" pos:end="83:61"><name pos:start="83:22" pos:end="83:24">res</name> <operator pos:start="83:26" pos:end="83:26">=</operator> <call pos:start="83:28" pos:end="83:61"><name pos:start="83:28" pos:end="83:42">ebml_read_float</name> <argument_list pos:start="83:44" pos:end="83:61">(<argument pos:start="83:45" pos:end="83:46"><expr pos:start="83:45" pos:end="83:46"><name pos:start="83:45" pos:end="83:46">pb</name></expr></argument>, <argument pos:start="83:49" pos:end="83:54"><expr pos:start="83:49" pos:end="83:54"><name pos:start="83:49" pos:end="83:54">length</name></expr></argument>, <argument pos:start="83:57" pos:end="83:60"><expr pos:start="83:57" pos:end="83:60"><name pos:start="83:57" pos:end="83:60">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <break pos:start="83:65" pos:end="83:70">break;</break>

    <case pos:start="85:5" pos:end="85:18">case <expr pos:start="85:10" pos:end="85:17"><name pos:start="85:10" pos:end="85:17">EBML_STR</name></expr>:</case>

    <case pos:start="87:5" pos:end="87:19">case <expr pos:start="87:10" pos:end="87:18"><name pos:start="87:10" pos:end="87:18">EBML_UTF8</name></expr>:</case>  <expr_stmt pos:start="87:22" pos:end="87:62"><expr pos:start="87:22" pos:end="87:61"><name pos:start="87:22" pos:end="87:24">res</name> <operator pos:start="87:26" pos:end="87:26">=</operator> <call pos:start="87:28" pos:end="87:61"><name pos:start="87:28" pos:end="87:42">ebml_read_ascii</name> <argument_list pos:start="87:44" pos:end="87:61">(<argument pos:start="87:45" pos:end="87:46"><expr pos:start="87:45" pos:end="87:46"><name pos:start="87:45" pos:end="87:46">pb</name></expr></argument>, <argument pos:start="87:49" pos:end="87:54"><expr pos:start="87:49" pos:end="87:54"><name pos:start="87:49" pos:end="87:54">length</name></expr></argument>, <argument pos:start="87:57" pos:end="87:60"><expr pos:start="87:57" pos:end="87:60"><name pos:start="87:57" pos:end="87:60">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <break pos:start="87:65" pos:end="87:70">break;</break>

    <case pos:start="89:5" pos:end="89:18">case <expr pos:start="89:10" pos:end="89:17"><name pos:start="89:10" pos:end="89:17">EBML_BIN</name></expr>:</case>   <expr_stmt pos:start="89:22" pos:end="89:62"><expr pos:start="89:22" pos:end="89:61"><name pos:start="89:22" pos:end="89:24">res</name> <operator pos:start="89:26" pos:end="89:26">=</operator> <call pos:start="89:28" pos:end="89:61"><name pos:start="89:28" pos:end="89:43">ebml_read_binary</name><argument_list pos:start="89:44" pos:end="89:61">(<argument pos:start="89:45" pos:end="89:46"><expr pos:start="89:45" pos:end="89:46"><name pos:start="89:45" pos:end="89:46">pb</name></expr></argument>, <argument pos:start="89:49" pos:end="89:54"><expr pos:start="89:49" pos:end="89:54"><name pos:start="89:49" pos:end="89:54">length</name></expr></argument>, <argument pos:start="89:57" pos:end="89:60"><expr pos:start="89:57" pos:end="89:60"><name pos:start="89:57" pos:end="89:60">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <break pos:start="89:65" pos:end="89:70">break;</break>

    <case pos:start="91:5" pos:end="91:19">case <expr pos:start="91:10" pos:end="91:18"><name pos:start="91:10" pos:end="91:18">EBML_NEST</name></expr>:</case>  <if_stmt pos:start="91:22" pos:end="93:36"><if pos:start="91:22" pos:end="93:36">if <condition pos:start="91:25" pos:end="91:70">(<expr pos:start="91:26" pos:end="91:69"><operator pos:start="91:26" pos:end="91:26">(</operator><name pos:start="91:27" pos:end="91:29">res</name><operator pos:start="91:30" pos:end="91:30">=</operator><call pos:start="91:31" pos:end="91:64"><name pos:start="91:31" pos:end="91:46">ebml_read_master</name><argument_list pos:start="91:47" pos:end="91:64">(<argument pos:start="91:48" pos:end="91:55"><expr pos:start="91:48" pos:end="91:55"><name pos:start="91:48" pos:end="91:55">matroska</name></expr></argument>, <argument pos:start="91:58" pos:end="91:63"><expr pos:start="91:58" pos:end="91:63"><name pos:start="91:58" pos:end="91:63">length</name></expr></argument>)</argument_list></call><operator pos:start="91:65" pos:end="91:65">)</operator> <operator pos:start="91:67" pos:end="91:67">&lt;</operator> <literal type="number" pos:start="91:69" pos:end="91:69">0</literal></expr>)</condition><block type="pseudo" pos:start="93:26" pos:end="93:36"><block_content pos:start="93:26" pos:end="93:36">

                         <return pos:start="93:26" pos:end="93:36">return <expr pos:start="93:33" pos:end="93:35"><name pos:start="93:33" pos:end="93:35">res</name></expr>;</return></block_content></block></if></if_stmt>

                     <if_stmt pos:start="95:22" pos:end="97:80"><if pos:start="95:22" pos:end="97:80">if <condition pos:start="95:25" pos:end="95:51">(<expr pos:start="95:26" pos:end="95:50"><name pos:start="95:26" pos:end="95:27">id</name> <operator pos:start="95:29" pos:end="95:30">==</operator> <name pos:start="95:32" pos:end="95:50">MATROSKA_ID_SEGMENT</name></expr>)</condition><block type="pseudo" pos:start="97:26" pos:end="97:80"><block_content pos:start="97:26" pos:end="97:80">

                         <expr_stmt pos:start="97:26" pos:end="97:80"><expr pos:start="97:26" pos:end="97:79"><name pos:start="97:26" pos:end="97:48"><name pos:start="97:26" pos:end="97:33">matroska</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:48">segment_start</name></name> <operator pos:start="97:50" pos:end="97:50">=</operator> <call pos:start="97:52" pos:end="97:79"><name pos:start="97:52" pos:end="97:60">avio_tell</name><argument_list pos:start="97:61" pos:end="97:79">(<argument pos:start="97:62" pos:end="97:78"><expr pos:start="97:62" pos:end="97:78"><name pos:start="97:62" pos:end="97:78"><name pos:start="97:62" pos:end="97:69">matroska</name><operator pos:start="97:70" pos:end="97:71">-&gt;</operator><name pos:start="97:72" pos:end="97:74">ctx</name><operator pos:start="97:75" pos:end="97:76">-&gt;</operator><name pos:start="97:77" pos:end="97:78">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                     <return pos:start="99:22" pos:end="99:75">return <expr pos:start="99:29" pos:end="99:74"><call pos:start="99:29" pos:end="99:74"><name pos:start="99:29" pos:end="99:43">ebml_parse_nest</name><argument_list pos:start="99:44" pos:end="99:74">(<argument pos:start="99:45" pos:end="99:52"><expr pos:start="99:45" pos:end="99:52"><name pos:start="99:45" pos:end="99:52">matroska</name></expr></argument>, <argument pos:start="99:55" pos:end="99:67"><expr pos:start="99:55" pos:end="99:67"><name pos:start="99:55" pos:end="99:67"><name pos:start="99:55" pos:end="99:60">syntax</name><operator pos:start="99:61" pos:end="99:62">-&gt;</operator><name pos:start="99:63" pos:end="99:65">def</name><operator pos:start="99:66" pos:end="99:66">.</operator><name pos:start="99:67" pos:end="99:67">n</name></name></expr></argument>, <argument pos:start="99:70" pos:end="99:73"><expr pos:start="99:70" pos:end="99:73"><name pos:start="99:70" pos:end="99:73">data</name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="101:5" pos:end="101:19">case <expr pos:start="101:10" pos:end="101:18"><name pos:start="101:10" pos:end="101:18">EBML_PASS</name></expr>:</case>  <return pos:start="101:22" pos:end="101:77">return <expr pos:start="101:29" pos:end="101:76"><call pos:start="101:29" pos:end="101:76"><name pos:start="101:29" pos:end="101:41">ebml_parse_id</name><argument_list pos:start="101:42" pos:end="101:76">(<argument pos:start="101:43" pos:end="101:50"><expr pos:start="101:43" pos:end="101:50"><name pos:start="101:43" pos:end="101:50">matroska</name></expr></argument>, <argument pos:start="101:53" pos:end="101:65"><expr pos:start="101:53" pos:end="101:65"><name pos:start="101:53" pos:end="101:65"><name pos:start="101:53" pos:end="101:58">syntax</name><operator pos:start="101:59" pos:end="101:60">-&gt;</operator><name pos:start="101:61" pos:end="101:63">def</name><operator pos:start="101:64" pos:end="101:64">.</operator><name pos:start="101:65" pos:end="101:65">n</name></name></expr></argument>, <argument pos:start="101:68" pos:end="101:69"><expr pos:start="101:68" pos:end="101:69"><name pos:start="101:68" pos:end="101:69">id</name></expr></argument>, <argument pos:start="101:72" pos:end="101:75"><expr pos:start="101:72" pos:end="101:75"><name pos:start="101:72" pos:end="101:75">data</name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="103:5" pos:end="103:19">case <expr pos:start="103:10" pos:end="103:18"><name pos:start="103:10" pos:end="103:18">EBML_STOP</name></expr>:</case>  <return pos:start="103:22" pos:end="103:30">return <expr pos:start="103:29" pos:end="103:29"><literal type="number" pos:start="103:29" pos:end="103:29">1</literal></expr>;</return>

    <default pos:start="105:5" pos:end="105:12">default:</default>         <return pos:start="105:22" pos:end="105:70">return <expr pos:start="105:29" pos:end="105:69"><ternary pos:start="105:29" pos:end="105:69"><condition pos:start="105:29" pos:end="105:52"><expr pos:start="105:29" pos:end="105:50"><call pos:start="105:29" pos:end="105:48"><name pos:start="105:29" pos:end="105:37">avio_skip</name><argument_list pos:start="105:38" pos:end="105:48">(<argument pos:start="105:39" pos:end="105:40"><expr pos:start="105:39" pos:end="105:40"><name pos:start="105:39" pos:end="105:40">pb</name></expr></argument>,<argument pos:start="105:42" pos:end="105:47"><expr pos:start="105:42" pos:end="105:47"><name pos:start="105:42" pos:end="105:47">length</name></expr></argument>)</argument_list></call><operator pos:start="105:49" pos:end="105:49">&lt;</operator><literal type="number" pos:start="105:50" pos:end="105:50">0</literal></expr> ?</condition><then pos:start="105:54" pos:end="105:65"> <expr pos:start="105:54" pos:end="105:65"><call pos:start="105:54" pos:end="105:65"><name pos:start="105:54" pos:end="105:60">AVERROR</name><argument_list pos:start="105:61" pos:end="105:65">(<argument pos:start="105:62" pos:end="105:64"><expr pos:start="105:62" pos:end="105:64"><name pos:start="105:62" pos:end="105:64">EIO</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="105:67" pos:end="105:69">: <expr pos:start="105:69" pos:end="105:69"><literal type="number" pos:start="105:69" pos:end="105:69">0</literal></expr></else></ternary></expr>;</return>

    </block_content>}</block></switch>

    <if_stmt pos:start="109:5" pos:end="115:60"><if pos:start="109:5" pos:end="111:65">if <condition pos:start="109:8" pos:end="109:35">(<expr pos:start="109:9" pos:end="109:34"><name pos:start="109:9" pos:end="109:11">res</name> <operator pos:start="109:13" pos:end="109:14">==</operator> <name pos:start="109:16" pos:end="109:34">AVERROR_INVALIDDATA</name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:65"><block_content pos:start="111:9" pos:end="111:65">

        <expr_stmt pos:start="111:9" pos:end="111:65"><expr pos:start="111:9" pos:end="111:64"><call pos:start="111:9" pos:end="111:64"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="111:64">(<argument pos:start="111:16" pos:end="111:28"><expr pos:start="111:16" pos:end="111:28"><name pos:start="111:16" pos:end="111:28"><name pos:start="111:16" pos:end="111:23">matroska</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:28">ctx</name></name></expr></argument>, <argument pos:start="111:31" pos:end="111:42"><expr pos:start="111:31" pos:end="111:42"><name pos:start="111:31" pos:end="111:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:45" pos:end="111:63"><expr pos:start="111:45" pos:end="111:63"><literal type="string" pos:start="111:45" pos:end="111:63">"Invalid element\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="113:5" pos:end="115:60">else if <condition pos:start="113:13" pos:end="113:33">(<expr pos:start="113:14" pos:end="113:32"><name pos:start="113:14" pos:end="113:16">res</name> <operator pos:start="113:18" pos:end="113:19">==</operator> <call pos:start="113:21" pos:end="113:32"><name pos:start="113:21" pos:end="113:27">AVERROR</name><argument_list pos:start="113:28" pos:end="113:32">(<argument pos:start="113:29" pos:end="113:31"><expr pos:start="113:29" pos:end="113:31"><name pos:start="113:29" pos:end="113:31">EIO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:60"><block_content pos:start="115:9" pos:end="115:60">

        <expr_stmt pos:start="115:9" pos:end="115:60"><expr pos:start="115:9" pos:end="115:59"><call pos:start="115:9" pos:end="115:59"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="115:59">(<argument pos:start="115:16" pos:end="115:28"><expr pos:start="115:16" pos:end="115:28"><name pos:start="115:16" pos:end="115:28"><name pos:start="115:16" pos:end="115:23">matroska</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:28">ctx</name></name></expr></argument>, <argument pos:start="115:31" pos:end="115:42"><expr pos:start="115:31" pos:end="115:42"><name pos:start="115:31" pos:end="115:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:45" pos:end="115:58"><expr pos:start="115:45" pos:end="115:58"><literal type="string" pos:start="115:45" pos:end="115:58">"Read error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="117:5" pos:end="117:15">return <expr pos:start="117:12" pos:end="117:14"><name pos:start="117:12" pos:end="117:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
