<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18406.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">decode_tsw1</name><parameter_list pos:start="1:23" pos:end="1:81">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:37">GetByteContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">gb</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">frame</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">width</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:80"><decl pos:start="1:71" pos:end="1:80"><type pos:start="1:71" pos:end="1:80"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:80">height</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:30">frame_start</name> <init pos:start="5:32" pos:end="5:38">= <expr pos:start="5:34" pos:end="5:38"><name pos:start="5:34" pos:end="5:38">frame</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">frame_end</name>   <init pos:start="7:32" pos:end="7:55">= <expr pos:start="7:34" pos:end="7:55"><name pos:start="7:34" pos:end="7:38">frame</name> <operator pos:start="7:40" pos:end="7:40">+</operator> <name pos:start="7:42" pos:end="7:46">width</name> <operator pos:start="7:48" pos:end="7:48">*</operator> <name pos:start="7:50" pos:end="7:55">height</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">mask</name> <init pos:start="9:14" pos:end="9:22">= <expr pos:start="9:16" pos:end="9:22"><literal type="number" pos:start="9:16" pos:end="9:22">0x10000</literal></expr></init></decl>, <decl pos:start="9:25" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:30">bitbuf</name> <init pos:start="9:32" pos:end="9:34">= <expr pos:start="9:34" pos:end="9:34"><literal type="number" pos:start="9:34" pos:end="9:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">v</name></decl>, <decl pos:start="11:12" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:16">count</name></decl>, <decl pos:start="11:19" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:26">segments</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:19">offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:12">segments</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:39"><name pos:start="17:16" pos:end="17:35">bytestream2_get_le32</name><argument_list pos:start="17:36" pos:end="17:39">(<argument pos:start="17:37" pos:end="17:38"><expr pos:start="17:37" pos:end="17:38"><name pos:start="17:37" pos:end="17:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:10">offset</name>   <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="19:39"><name pos:start="19:16" pos:end="19:35">bytestream2_get_le32</name><argument_list pos:start="19:36" pos:end="19:39">(<argument pos:start="19:37" pos:end="19:38"><expr pos:start="19:37" pos:end="19:38"><name pos:start="19:37" pos:end="19:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:17"><if pos:start="21:5" pos:end="23:17">if <condition pos:start="21:8" pos:end="21:53">(<expr pos:start="21:9" pos:end="21:52"><name pos:start="21:9" pos:end="21:16">segments</name> <operator pos:start="21:18" pos:end="21:19">==</operator> <literal type="number" pos:start="21:21" pos:end="21:21">0</literal> <operator pos:start="21:23" pos:end="21:24">&amp;&amp;</operator> <name pos:start="21:26" pos:end="21:31">offset</name> <operator pos:start="21:33" pos:end="21:34">==</operator> <name pos:start="21:36" pos:end="21:44">frame_end</name> <operator pos:start="21:46" pos:end="21:46">-</operator> <name pos:start="21:48" pos:end="21:52">frame</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:17"><block_content pos:start="23:9" pos:end="23:17">

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="23:19" pos:end="23:31">// skip frame</comment>

    <if_stmt pos:start="25:5" pos:end="27:35"><if pos:start="25:5" pos:end="27:35">if <condition pos:start="25:8" pos:end="25:36">(<expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:17">frame_end</name> <operator pos:start="25:19" pos:end="25:19">-</operator> <name pos:start="25:21" pos:end="25:25">frame</name> <operator pos:start="25:27" pos:end="25:28">&lt;=</operator> <name pos:start="25:30" pos:end="25:35">offset</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:35"><block_content pos:start="27:9" pos:end="27:35">

        <return pos:start="27:9" pos:end="27:35">return <expr pos:start="27:16" pos:end="27:34"><name pos:start="27:16" pos:end="27:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:20"><expr pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:9">frame</name> <operator pos:start="29:11" pos:end="29:12">+=</operator> <name pos:start="29:14" pos:end="29:19">offset</name></expr>;</expr_stmt>

    <while pos:start="31:5" pos:end="75:5">while <condition pos:start="31:11" pos:end="31:22">(<expr pos:start="31:12" pos:end="31:21"><name pos:start="31:12" pos:end="31:19">segments</name><operator pos:start="31:20" pos:end="31:21">--</operator></expr>)</condition> <block pos:start="31:24" pos:end="75:5">{<block_content pos:start="33:9" pos:end="73:19">

        <if_stmt pos:start="33:9" pos:end="35:39"><if pos:start="33:9" pos:end="35:39">if <condition pos:start="33:12" pos:end="33:47">(<expr pos:start="33:13" pos:end="33:46"><call pos:start="33:13" pos:end="33:42"><name pos:start="33:13" pos:end="33:38">bytestream2_get_bytes_left</name><argument_list pos:start="33:39" pos:end="33:42">(<argument pos:start="33:40" pos:end="33:41"><expr pos:start="33:40" pos:end="33:41"><name pos:start="33:40" pos:end="33:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="33:44" pos:end="33:44">&lt;</operator> <literal type="number" pos:start="33:46" pos:end="33:46">2</literal></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:39"><block_content pos:start="35:13" pos:end="35:39">

            <return pos:start="35:13" pos:end="35:39">return <expr pos:start="35:20" pos:end="35:38"><name pos:start="35:20" pos:end="35:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:28">(<expr pos:start="37:13" pos:end="37:27"><name pos:start="37:13" pos:end="37:16">mask</name> <operator pos:start="37:18" pos:end="37:19">==</operator> <literal type="number" pos:start="37:21" pos:end="37:27">0x10000</literal></expr>)</condition> <block pos:start="37:30" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:21">

            <expr_stmt pos:start="39:13" pos:end="39:47"><expr pos:start="39:13" pos:end="39:46"><name pos:start="39:13" pos:end="39:18">bitbuf</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <call pos:start="39:22" pos:end="39:46"><name pos:start="39:22" pos:end="39:42">bytestream2_get_le16u</name><argument_list pos:start="39:43" pos:end="39:46">(<argument pos:start="39:44" pos:end="39:45"><expr pos:start="39:44" pos:end="39:45"><name pos:start="39:44" pos:end="39:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:21"><expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:16">mask</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <literal type="number" pos:start="41:20" pos:end="41:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="47:39"><if pos:start="45:9" pos:end="47:39">if <condition pos:start="45:12" pos:end="45:34">(<expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:21">frame_end</name> <operator pos:start="45:23" pos:end="45:23">-</operator> <name pos:start="45:25" pos:end="45:29">frame</name> <operator pos:start="45:31" pos:end="45:31">&lt;</operator> <literal type="number" pos:start="45:33" pos:end="45:33">2</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:39"><block_content pos:start="47:13" pos:end="47:39">

            <return pos:start="47:13" pos:end="47:39">return <expr pos:start="47:20" pos:end="47:38"><name pos:start="47:20" pos:end="47:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="71:9"><if pos:start="49:9" pos:end="65:9">if <condition pos:start="49:12" pos:end="49:26">(<expr pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:18">bitbuf</name> <operator pos:start="49:20" pos:end="49:20">&amp;</operator> <name pos:start="49:22" pos:end="49:25">mask</name></expr>)</condition> <block pos:start="49:28" pos:end="65:9">{<block_content pos:start="51:13" pos:end="63:27">

            <expr_stmt pos:start="51:13" pos:end="51:41"><expr pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:13">v</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:40"><name pos:start="51:17" pos:end="51:36">bytestream2_get_le16</name><argument_list pos:start="51:37" pos:end="51:40">(<argument pos:start="51:38" pos:end="51:39"><expr pos:start="51:38" pos:end="51:39"><name pos:start="51:38" pos:end="51:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:39"><expr pos:start="53:13" pos:end="53:38"><name pos:start="53:13" pos:end="53:18">offset</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <operator pos:start="53:22" pos:end="53:22">(</operator><name pos:start="53:23" pos:end="53:23">v</name> <operator pos:start="53:25" pos:end="53:25">&amp;</operator> <literal type="number" pos:start="53:27" pos:end="53:32">0x1FFF</literal><operator pos:start="53:33" pos:end="53:33">)</operator> <operator pos:start="53:35" pos:end="53:36">&lt;&lt;</operator> <literal type="number" pos:start="53:38" pos:end="53:38">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:41"><expr pos:start="55:13" pos:end="55:40"><name pos:start="55:13" pos:end="55:17">count</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <operator pos:start="55:21" pos:end="55:21">(</operator><operator pos:start="55:22" pos:end="55:22">(</operator><name pos:start="55:23" pos:end="55:23">v</name> <operator pos:start="55:25" pos:end="55:26">&gt;&gt;</operator> <literal type="number" pos:start="55:28" pos:end="55:29">13</literal><operator pos:start="55:30" pos:end="55:30">)</operator> <operator pos:start="55:32" pos:end="55:32">+</operator> <literal type="number" pos:start="55:34" pos:end="55:34">2</literal><operator pos:start="55:35" pos:end="55:35">)</operator> <operator pos:start="55:37" pos:end="55:38">&lt;&lt;</operator> <literal type="number" pos:start="55:40" pos:end="55:40">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="59:43"><if pos:start="57:13" pos:end="59:43">if <condition pos:start="57:16" pos:end="57:74">(<expr pos:start="57:17" pos:end="57:73"><name pos:start="57:17" pos:end="57:21">frame</name> <operator pos:start="57:23" pos:end="57:23">-</operator> <name pos:start="57:25" pos:end="57:35">frame_start</name> <operator pos:start="57:37" pos:end="57:37">&lt;</operator> <name pos:start="57:39" pos:end="57:44">offset</name> <operator pos:start="57:46" pos:end="57:47">||</operator> <name pos:start="57:49" pos:end="57:57">frame_end</name> <operator pos:start="57:59" pos:end="57:59">-</operator> <name pos:start="57:61" pos:end="57:65">frame</name> <operator pos:start="57:67" pos:end="57:67">&lt;</operator> <name pos:start="57:69" pos:end="57:73">count</name></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:43"><block_content pos:start="59:17" pos:end="59:43">

                <return pos:start="59:17" pos:end="59:43">return <expr pos:start="59:24" pos:end="59:42"><name pos:start="59:24" pos:end="59:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:52"><expr pos:start="61:13" pos:end="61:51"><call pos:start="61:13" pos:end="61:51"><name pos:start="61:13" pos:end="61:29">av_memcpy_backptr</name><argument_list pos:start="61:30" pos:end="61:51">(<argument pos:start="61:31" pos:end="61:35"><expr pos:start="61:31" pos:end="61:35"><name pos:start="61:31" pos:end="61:35">frame</name></expr></argument>, <argument pos:start="61:38" pos:end="61:43"><expr pos:start="61:38" pos:end="61:43"><name pos:start="61:38" pos:end="61:43">offset</name></expr></argument>, <argument pos:start="61:46" pos:end="61:50"><expr pos:start="61:46" pos:end="61:50"><name pos:start="61:46" pos:end="61:50">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:27"><expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:17">frame</name> <operator pos:start="63:19" pos:end="63:20">+=</operator> <name pos:start="63:22" pos:end="63:26">count</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="71:9">else <block pos:start="65:16" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:48">

            <expr_stmt pos:start="67:13" pos:end="67:48"><expr pos:start="67:13" pos:end="67:47"><operator pos:start="67:13" pos:end="67:13">*</operator><name pos:start="67:14" pos:end="67:18">frame</name><operator pos:start="67:19" pos:end="67:20">++</operator> <operator pos:start="67:22" pos:end="67:22">=</operator> <call pos:start="67:24" pos:end="67:47"><name pos:start="67:24" pos:end="67:43">bytestream2_get_byte</name><argument_list pos:start="67:44" pos:end="67:47">(<argument pos:start="67:45" pos:end="67:46"><expr pos:start="67:45" pos:end="67:46"><name pos:start="67:45" pos:end="67:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:48"><expr pos:start="69:13" pos:end="69:47"><operator pos:start="69:13" pos:end="69:13">*</operator><name pos:start="69:14" pos:end="69:18">frame</name><operator pos:start="69:19" pos:end="69:20">++</operator> <operator pos:start="69:22" pos:end="69:22">=</operator> <call pos:start="69:24" pos:end="69:47"><name pos:start="69:24" pos:end="69:43">bytestream2_get_byte</name><argument_list pos:start="69:44" pos:end="69:47">(<argument pos:start="69:45" pos:end="69:46"><expr pos:start="69:45" pos:end="69:46"><name pos:start="69:45" pos:end="69:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:19"><expr pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:12">mask</name> <operator pos:start="73:14" pos:end="73:16">&lt;&lt;=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
