<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21602.c" pos:tabs="8"><function pos:start="1:1" pos:end="803:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_h263_decode_frame</name><parameter_list pos:start="1:25" pos:end="5:45">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:44"><decl pos:start="5:30" pos:end="5:44"><type pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:37">AVPacket</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="803:1">{<block_content pos:start="9:5" pos:end="801:43">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">MpegEncContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:40">= <expr pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:29">avctx</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="22:0"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">AVFrame</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:17">pict</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">data</name></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="21:1" pos:end="21:23">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:23">PRINT_FRAME_TIME</name></cpp:ifdef>

<decl_stmt pos:start="23:1" pos:end="28:0"><decl pos:start="23:1" pos:end="23:22"><type pos:start="23:1" pos:end="23:8"><name pos:start="23:1" pos:end="23:8">uint64_t</name></type> <name pos:start="23:10" pos:end="23:13">time</name><init pos:start="23:14" pos:end="23:22">= <expr pos:start="23:16" pos:end="23:22"><call pos:start="23:16" pos:end="23:22"><name pos:start="23:16" pos:end="23:20">rdtsc</name><argument_list pos:start="23:21" pos:end="23:22">()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="27:1" pos:end="27:12">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="29:5" pos:end="29:90"><expr pos:start="29:5" pos:end="29:89"><call pos:start="29:5" pos:end="29:89"><name pos:start="29:5" pos:end="29:10">av_log</name><argument_list pos:start="29:11" pos:end="29:89">(<argument pos:start="29:12" pos:end="29:16"><expr pos:start="29:12" pos:end="29:16"><name pos:start="29:12" pos:end="29:16">avctx</name></expr></argument>, <argument pos:start="29:19" pos:end="29:30"><expr pos:start="29:19" pos:end="29:30"><name pos:start="29:19" pos:end="29:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="29:33" pos:end="29:57"><expr pos:start="29:33" pos:end="29:57"><literal type="string" pos:start="29:33" pos:end="29:57">"*****frame %d size=%d\n"</literal></expr></argument>, <argument pos:start="29:60" pos:end="29:78"><expr pos:start="29:60" pos:end="29:78"><name pos:start="29:60" pos:end="29:78"><name pos:start="29:60" pos:end="29:64">avctx</name><operator pos:start="29:65" pos:end="29:66">-&gt;</operator><name pos:start="29:67" pos:end="29:78">frame_number</name></name></expr></argument>, <argument pos:start="29:81" pos:end="29:88"><expr pos:start="29:81" pos:end="29:88"><name pos:start="29:81" pos:end="29:88">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="36:0"><if pos:start="31:5" pos:end="36:0">if<condition pos:start="31:7" pos:end="31:18">(<expr pos:start="31:8" pos:end="31:17"><name pos:start="31:8" pos:end="31:15">buf_size</name><operator pos:start="31:16" pos:end="31:16">&gt;</operator><literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="36:0"><block_content pos:start="33:9" pos:end="36:0">

        <expr_stmt pos:start="33:9" pos:end="36:0"><expr pos:start="33:9" pos:end="33:90"><call pos:start="33:9" pos:end="33:90"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:90">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">avctx</name></expr></argument>, <argument pos:start="33:23" pos:end="33:34"><expr pos:start="33:23" pos:end="33:34"><name pos:start="33:23" pos:end="33:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="33:37" pos:end="33:57"><expr pos:start="33:37" pos:end="33:57"><literal type="string" pos:start="33:37" pos:end="33:57">"bytes=%x %x %x %x\n"</literal></expr></argument>, <argument pos:start="33:60" pos:end="33:65"><expr pos:start="33:60" pos:end="33:65"><name pos:start="33:60" pos:end="33:65"><name pos:start="33:60" pos:end="33:62">buf</name><index pos:start="33:63" pos:end="33:65">[<expr pos:start="33:64" pos:end="33:64"><literal type="number" pos:start="33:64" pos:end="33:64">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="33:68" pos:end="33:73"><expr pos:start="33:68" pos:end="33:73"><name pos:start="33:68" pos:end="33:73"><name pos:start="33:68" pos:end="33:70">buf</name><index pos:start="33:71" pos:end="33:73">[<expr pos:start="33:72" pos:end="33:72"><literal type="number" pos:start="33:72" pos:end="33:72">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="33:76" pos:end="33:81"><expr pos:start="33:76" pos:end="33:81"><name pos:start="33:76" pos:end="33:81"><name pos:start="33:76" pos:end="33:78">buf</name><index pos:start="33:79" pos:end="33:81">[<expr pos:start="33:80" pos:end="33:80"><literal type="number" pos:start="33:80" pos:end="33:80">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="33:84" pos:end="33:89"><expr pos:start="33:84" pos:end="33:89"><name pos:start="33:84" pos:end="33:89"><name pos:start="33:84" pos:end="33:86">buf</name><index pos:start="33:87" pos:end="33:89">[<expr pos:start="33:88" pos:end="33:88"><literal type="number" pos:start="33:88" pos:end="33:88">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:12">flags</name></name><operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:26"><name pos:start="37:15" pos:end="37:19">avctx</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:13">flags2</name></name><operator pos:start="39:14" pos:end="39:14">=</operator> <name pos:start="39:16" pos:end="39:28"><name pos:start="39:16" pos:end="39:20">avctx</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:28">flags2</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="45:5" pos:end="65:5"><if pos:start="45:5" pos:end="65:5">if <condition pos:start="45:8" pos:end="45:22">(<expr pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:16">buf_size</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <literal type="number" pos:start="45:21" pos:end="45:21">0</literal></expr>)</condition> <block pos:start="45:24" pos:end="65:5">{<block_content pos:start="49:9" pos:end="63:17">

        <comment type="block" pos:start="47:9" pos:end="47:43">/* special case for last picture */</comment>

        <if_stmt pos:start="49:9" pos:end="59:9"><if pos:start="49:9" pos:end="59:9">if <condition pos:start="49:12" pos:end="49:51">(<expr pos:start="49:13" pos:end="49:50"><name pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:24">low_delay</name></name><operator pos:start="49:25" pos:end="49:26">==</operator><literal type="number" pos:start="49:27" pos:end="49:27">0</literal> <operator pos:start="49:29" pos:end="49:30">&amp;&amp;</operator> <name pos:start="49:32" pos:end="49:50"><name pos:start="49:32" pos:end="49:32">s</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:50">next_picture_ptr</name></name></expr>)</condition> <block pos:start="49:53" pos:end="59:9">{<block_content pos:start="51:13" pos:end="57:41">

            <expr_stmt pos:start="51:13" pos:end="51:50"><expr pos:start="51:13" pos:end="51:49"><operator pos:start="51:13" pos:end="51:13">*</operator><name pos:start="51:14" pos:end="51:17">pict</name><operator pos:start="51:18" pos:end="51:18">=</operator> <operator pos:start="51:20" pos:end="51:20">*</operator><operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:28">AVFrame</name><operator pos:start="51:29" pos:end="51:29">*</operator><operator pos:start="51:30" pos:end="51:30">)</operator><name pos:start="51:31" pos:end="51:49"><name pos:start="51:31" pos:end="51:31">s</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:49">next_picture_ptr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:38"><expr pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:31"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:31">next_picture_ptr</name></name><operator pos:start="53:32" pos:end="53:32">=</operator> <name pos:start="53:34" pos:end="53:37">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="57:13" pos:end="57:41"><expr pos:start="57:13" pos:end="57:40"><operator pos:start="57:13" pos:end="57:13">*</operator><name pos:start="57:14" pos:end="57:22">data_size</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <sizeof pos:start="57:26" pos:end="57:40">sizeof<argument_list pos:start="57:32" pos:end="57:40">(<argument pos:start="57:33" pos:end="57:39"><expr pos:start="57:33" pos:end="57:39"><name pos:start="57:33" pos:end="57:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="97:5"><if pos:start="69:5" pos:end="97:5">if<condition pos:start="69:7" pos:end="69:37">(<expr pos:start="69:8" pos:end="69:36"><name pos:start="69:8" pos:end="69:15"><name pos:start="69:8" pos:end="69:8">s</name><operator pos:start="69:9" pos:end="69:10">-&gt;</operator><name pos:start="69:11" pos:end="69:15">flags</name></name><operator pos:start="69:16" pos:end="69:16">&amp;</operator><name pos:start="69:17" pos:end="69:36">CODEC_FLAG_TRUNCATED</name></expr>)</condition><block pos:start="69:38" pos:end="97:5">{<block_content pos:start="71:9" pos:end="95:28">

        <decl_stmt pos:start="71:9" pos:end="71:17"><decl pos:start="71:9" pos:end="71:16"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:16">next</name></decl>;</decl_stmt>



        <if_stmt pos:start="75:9" pos:end="89:9"><if pos:start="75:9" pos:end="79:9">if<condition pos:start="75:11" pos:end="75:63">(<expr pos:start="75:12" pos:end="75:62"><name pos:start="75:12" pos:end="75:31">CONFIG_MPEG4_DECODER</name> <operator pos:start="75:33" pos:end="75:34">&amp;&amp;</operator> <name pos:start="75:36" pos:end="75:46"><name pos:start="75:36" pos:end="75:36">s</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:46">codec_id</name></name><operator pos:start="75:47" pos:end="75:48">==</operator><name pos:start="75:49" pos:end="75:62">CODEC_ID_MPEG4</name></expr>)</condition><block pos:start="75:64" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:76">

            <expr_stmt pos:start="77:13" pos:end="77:76"><expr pos:start="77:13" pos:end="77:75"><name pos:start="77:13" pos:end="77:16">next</name><operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:75"><name pos:start="77:19" pos:end="77:41">ff_mpeg4_find_frame_end</name><argument_list pos:start="77:42" pos:end="77:75">(<argument pos:start="77:43" pos:end="77:59"><expr pos:start="77:43" pos:end="77:59"><operator pos:start="77:43" pos:end="77:43">&amp;</operator><name pos:start="77:44" pos:end="77:59"><name pos:start="77:44" pos:end="77:44">s</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:59">parse_context</name></name></expr></argument>, <argument pos:start="77:62" pos:end="77:64"><expr pos:start="77:62" pos:end="77:64"><name pos:start="77:62" pos:end="77:64">buf</name></expr></argument>, <argument pos:start="77:67" pos:end="77:74"><expr pos:start="77:67" pos:end="77:74"><name pos:start="77:67" pos:end="77:74">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="79:10" pos:end="83:9">else if<condition pos:start="79:17" pos:end="79:67">(<expr pos:start="79:18" pos:end="79:66"><name pos:start="79:18" pos:end="79:36">CONFIG_H263_DECODER</name> <operator pos:start="79:38" pos:end="79:39">&amp;&amp;</operator> <name pos:start="79:41" pos:end="79:51"><name pos:start="79:41" pos:end="79:41">s</name><operator pos:start="79:42" pos:end="79:43">-&gt;</operator><name pos:start="79:44" pos:end="79:51">codec_id</name></name><operator pos:start="79:52" pos:end="79:53">==</operator><name pos:start="79:54" pos:end="79:66">CODEC_ID_H263</name></expr>)</condition><block pos:start="79:68" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:75">

            <expr_stmt pos:start="81:13" pos:end="81:75"><expr pos:start="81:13" pos:end="81:74"><name pos:start="81:13" pos:end="81:16">next</name><operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:74"><name pos:start="81:19" pos:end="81:40">ff_h263_find_frame_end</name><argument_list pos:start="81:41" pos:end="81:74">(<argument pos:start="81:42" pos:end="81:58"><expr pos:start="81:42" pos:end="81:58"><operator pos:start="81:42" pos:end="81:42">&amp;</operator><name pos:start="81:43" pos:end="81:58"><name pos:start="81:43" pos:end="81:43">s</name><operator pos:start="81:44" pos:end="81:45">-&gt;</operator><name pos:start="81:46" pos:end="81:58">parse_context</name></name></expr></argument>, <argument pos:start="81:61" pos:end="81:63"><expr pos:start="81:61" pos:end="81:63"><name pos:start="81:61" pos:end="81:63">buf</name></expr></argument>, <argument pos:start="81:66" pos:end="81:73"><expr pos:start="81:66" pos:end="81:73"><name pos:start="81:66" pos:end="81:73">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="83:10" pos:end="89:9">else<block pos:start="83:14" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:22">

            <expr_stmt pos:start="85:13" pos:end="85:97"><expr pos:start="85:13" pos:end="85:96"><call pos:start="85:13" pos:end="85:96"><name pos:start="85:13" pos:end="85:18">av_log</name><argument_list pos:start="85:19" pos:end="85:96">(<argument pos:start="85:20" pos:end="85:27"><expr pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:20">s</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:27">avctx</name></name></expr></argument>, <argument pos:start="85:30" pos:end="85:41"><expr pos:start="85:30" pos:end="85:41"><name pos:start="85:30" pos:end="85:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:44" pos:end="85:95"><expr pos:start="85:44" pos:end="85:95"><literal type="string" pos:start="85:44" pos:end="85:95">"this codec does not support truncated bitstreams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:22">return <expr pos:start="87:20" pos:end="87:21"><operator pos:start="87:20" pos:end="87:20">-</operator><literal type="number" pos:start="87:21" pos:end="87:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="93:9" pos:end="95:28"><if pos:start="93:9" pos:end="95:28">if<condition pos:start="93:11" pos:end="93:94">( <expr pos:start="93:13" pos:end="93:92"><call pos:start="93:13" pos:end="93:88"><name pos:start="93:13" pos:end="93:28">ff_combine_frame</name><argument_list pos:start="93:29" pos:end="93:88">(<argument pos:start="93:30" pos:end="93:46"><expr pos:start="93:30" pos:end="93:46"><operator pos:start="93:30" pos:end="93:30">&amp;</operator><name pos:start="93:31" pos:end="93:46"><name pos:start="93:31" pos:end="93:31">s</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:46">parse_context</name></name></expr></argument>, <argument pos:start="93:49" pos:end="93:52"><expr pos:start="93:49" pos:end="93:52"><name pos:start="93:49" pos:end="93:52">next</name></expr></argument>, <argument pos:start="93:55" pos:end="93:76"><expr pos:start="93:55" pos:end="93:76"><operator pos:start="93:55" pos:end="93:55">(</operator><specifier pos:start="93:56" pos:end="93:60">const</specifier> <name pos:start="93:62" pos:end="93:68">uint8_t</name> <operator pos:start="93:70" pos:end="93:70">*</operator><operator pos:start="93:71" pos:end="93:71">*</operator><operator pos:start="93:72" pos:end="93:72">)</operator><operator pos:start="93:73" pos:end="93:73">&amp;</operator><name pos:start="93:74" pos:end="93:76">buf</name></expr></argument>, <argument pos:start="93:79" pos:end="93:87"><expr pos:start="93:79" pos:end="93:87"><operator pos:start="93:79" pos:end="93:79">&amp;</operator><name pos:start="93:80" pos:end="93:87">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="93:90" pos:end="93:90">&lt;</operator> <literal type="number" pos:start="93:92" pos:end="93:92">0</literal></expr> )</condition><block type="pseudo" pos:start="95:13" pos:end="95:28"><block_content pos:start="95:13" pos:end="95:28">

            <return pos:start="95:13" pos:end="95:28">return <expr pos:start="95:20" pos:end="95:27"><name pos:start="95:20" pos:end="95:27">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





<label pos:start="103:1" pos:end="103:6"><name pos:start="103:1" pos:end="103:5">retry</name>:</label>



    <if_stmt pos:start="107:5" pos:end="113:47"><if pos:start="107:5" pos:end="111:5">if<condition pos:start="107:7" pos:end="107:67">(<expr pos:start="107:8" pos:end="107:66"><name pos:start="107:8" pos:end="107:31"><name pos:start="107:8" pos:end="107:8">s</name><operator pos:start="107:9" pos:end="107:10">-&gt;</operator><name pos:start="107:11" pos:end="107:31">bitstream_buffer_size</name></name> <operator pos:start="107:33" pos:end="107:34">&amp;&amp;</operator> <operator pos:start="107:36" pos:end="107:36">(</operator><name pos:start="107:37" pos:end="107:50"><name pos:start="107:37" pos:end="107:37">s</name><operator pos:start="107:38" pos:end="107:39">-&gt;</operator><name pos:start="107:40" pos:end="107:50">divx_packed</name></name> <operator pos:start="107:52" pos:end="107:53">||</operator> <name pos:start="107:55" pos:end="107:62">buf_size</name><operator pos:start="107:63" pos:end="107:63">&lt;</operator><literal type="number" pos:start="107:64" pos:end="107:65">20</literal><operator pos:start="107:66" pos:end="107:66">)</operator></expr>)</condition><block pos:start="107:68" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:79"> <comment type="line" pos:start="107:70" pos:end="107:100">//divx 5.01+/xvid frame reorder</comment>

        <expr_stmt pos:start="109:9" pos:end="109:79"><expr pos:start="109:9" pos:end="109:78"><call pos:start="109:9" pos:end="109:78"><name pos:start="109:9" pos:end="109:21">init_get_bits</name><argument_list pos:start="109:22" pos:end="109:78">(<argument pos:start="109:23" pos:end="109:28"><expr pos:start="109:23" pos:end="109:28"><operator pos:start="109:23" pos:end="109:23">&amp;</operator><name pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:24">s</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:28">gb</name></name></expr></argument>, <argument pos:start="109:31" pos:end="109:49"><expr pos:start="109:31" pos:end="109:49"><name pos:start="109:31" pos:end="109:49"><name pos:start="109:31" pos:end="109:31">s</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:49">bitstream_buffer</name></name></expr></argument>, <argument pos:start="109:52" pos:end="109:77"><expr pos:start="109:52" pos:end="109:77"><name pos:start="109:52" pos:end="109:75"><name pos:start="109:52" pos:end="109:52">s</name><operator pos:start="109:53" pos:end="109:54">-&gt;</operator><name pos:start="109:55" pos:end="109:75">bitstream_buffer_size</name></name><operator pos:start="109:76" pos:end="109:76">*</operator><literal type="number" pos:start="109:77" pos:end="109:77">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="111:6" pos:end="113:47">else<block type="pseudo" pos:start="113:9" pos:end="113:47"><block_content pos:start="113:9" pos:end="113:47">

        <expr_stmt pos:start="113:9" pos:end="113:47"><expr pos:start="113:9" pos:end="113:46"><call pos:start="113:9" pos:end="113:46"><name pos:start="113:9" pos:end="113:21">init_get_bits</name><argument_list pos:start="113:22" pos:end="113:46">(<argument pos:start="113:23" pos:end="113:28"><expr pos:start="113:23" pos:end="113:28"><operator pos:start="113:23" pos:end="113:23">&amp;</operator><name pos:start="113:24" pos:end="113:28"><name pos:start="113:24" pos:end="113:24">s</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:28">gb</name></name></expr></argument>, <argument pos:start="113:31" pos:end="113:33"><expr pos:start="113:31" pos:end="113:33"><name pos:start="113:31" pos:end="113:33">buf</name></expr></argument>, <argument pos:start="113:36" pos:end="113:45"><expr pos:start="113:36" pos:end="113:45"><name pos:start="113:36" pos:end="113:43">buf_size</name><operator pos:start="113:44" pos:end="113:44">*</operator><literal type="number" pos:start="113:45" pos:end="113:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:31"><expr pos:start="115:5" pos:end="115:30"><name pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:28">bitstream_buffer_size</name></name><operator pos:start="115:29" pos:end="115:29">=</operator><literal type="number" pos:start="115:30" pos:end="115:30">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:32">(<expr pos:start="119:9" pos:end="119:31"><operator pos:start="119:9" pos:end="119:9">!</operator><name pos:start="119:10" pos:end="119:31"><name pos:start="119:10" pos:end="119:10">s</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:31">context_initialized</name></name></expr>)</condition> <block pos:start="119:34" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:22">

        <if_stmt pos:start="121:9" pos:end="123:22"><if pos:start="121:9" pos:end="123:22">if <condition pos:start="121:12" pos:end="121:35">(<expr pos:start="121:13" pos:end="121:34"><call pos:start="121:13" pos:end="121:30"><name pos:start="121:13" pos:end="121:27">MPV_common_init</name><argument_list pos:start="121:28" pos:end="121:30">(<argument pos:start="121:29" pos:end="121:29"><expr pos:start="121:29" pos:end="121:29"><name pos:start="121:29" pos:end="121:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="121:32" pos:end="121:32">&lt;</operator> <literal type="number" pos:start="121:34" pos:end="121:34">0</literal></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:22"><block_content pos:start="123:13" pos:end="123:22"> <comment type="line" pos:start="121:37" pos:end="121:93">//we need the idct permutaton for reading a custom matrix</comment>

            <return pos:start="123:13" pos:end="123:22">return <expr pos:start="123:20" pos:end="123:21"><operator pos:start="123:20" pos:end="123:20">-</operator><literal type="number" pos:start="123:21" pos:end="123:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="129:5" pos:end="131:52">/* We need to set current_picture_ptr before reading the header,

     * otherwise we cannot store anyting in there */</comment>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if<condition pos:start="133:7" pos:end="133:71">(<expr pos:start="133:8" pos:end="133:70"><name pos:start="133:8" pos:end="133:29"><name pos:start="133:8" pos:end="133:8">s</name><operator pos:start="133:9" pos:end="133:10">-&gt;</operator><name pos:start="133:11" pos:end="133:29">current_picture_ptr</name></name><operator pos:start="133:30" pos:end="133:31">==</operator><name pos:start="133:32" pos:end="133:35">NULL</name> <operator pos:start="133:37" pos:end="133:38">||</operator> <name pos:start="133:40" pos:end="133:70"><name pos:start="133:40" pos:end="133:40">s</name><operator pos:start="133:41" pos:end="133:42">-&gt;</operator><name pos:start="133:43" pos:end="133:61">current_picture_ptr</name><operator pos:start="133:62" pos:end="133:63">-&gt;</operator><name pos:start="133:64" pos:end="133:67">data</name><index pos:start="133:68" pos:end="133:70">[<expr pos:start="133:69" pos:end="133:69"><literal type="number" pos:start="133:69" pos:end="133:69">0</literal></expr>]</index></name></expr>)</condition><block pos:start="133:72" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:47">

        <decl_stmt pos:start="135:9" pos:end="135:44"><decl pos:start="135:9" pos:end="135:43"><type pos:start="135:9" pos:end="135:11"><name pos:start="135:9" pos:end="135:11">int</name></type> <name pos:start="135:13" pos:end="135:13">i</name><init pos:start="135:14" pos:end="135:43">= <expr pos:start="135:16" pos:end="135:43"><call pos:start="135:16" pos:end="135:43"><name pos:start="135:16" pos:end="135:37">ff_find_unused_picture</name><argument_list pos:start="135:38" pos:end="135:43">(<argument pos:start="135:39" pos:end="135:39"><expr pos:start="135:39" pos:end="135:39"><name pos:start="135:39" pos:end="135:39">s</name></expr></argument>, <argument pos:start="135:42" pos:end="135:42"><expr pos:start="135:42" pos:end="135:42"><literal type="number" pos:start="135:42" pos:end="135:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:47"><expr pos:start="137:9" pos:end="137:46"><name pos:start="137:9" pos:end="137:30"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:30">current_picture_ptr</name></name><operator pos:start="137:31" pos:end="137:31">=</operator> <operator pos:start="137:33" pos:end="137:33">&amp;</operator><name pos:start="137:34" pos:end="137:46"><name pos:start="137:34" pos:end="137:34">s</name><operator pos:start="137:35" pos:end="137:36">-&gt;</operator><name pos:start="137:37" pos:end="137:43">picture</name><index pos:start="137:44" pos:end="137:46">[<expr pos:start="137:45" pos:end="137:45"><name pos:start="137:45" pos:end="137:45">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:22">/* let's go :-) */</comment>

    <if_stmt pos:start="145:5" pos:end="181:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:53">(<expr pos:start="145:9" pos:end="145:52"><name pos:start="145:9" pos:end="145:27">CONFIG_WMV2_DECODER</name> <operator pos:start="145:29" pos:end="145:30">&amp;&amp;</operator> <name pos:start="145:32" pos:end="145:49"><name pos:start="145:32" pos:end="145:32">s</name><operator pos:start="145:33" pos:end="145:34">-&gt;</operator><name pos:start="145:35" pos:end="145:49">msmpeg4_version</name></name><operator pos:start="145:50" pos:end="145:51">==</operator><literal type="number" pos:start="145:52" pos:end="145:52">5</literal></expr>)</condition> <block pos:start="145:55" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:46">

        <expr_stmt pos:start="147:9" pos:end="147:46"><expr pos:start="147:9" pos:end="147:45"><name pos:start="147:9" pos:end="147:11">ret</name><operator pos:start="147:12" pos:end="147:12">=</operator> <call pos:start="147:14" pos:end="147:45"><name pos:start="147:14" pos:end="147:42">ff_wmv2_decode_picture_header</name><argument_list pos:start="147:43" pos:end="147:45">(<argument pos:start="147:44" pos:end="147:44"><expr pos:start="147:44" pos:end="147:44"><name pos:start="147:44" pos:end="147:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="149:7" pos:end="153:5">else if <condition pos:start="149:15" pos:end="149:60">(<expr pos:start="149:16" pos:end="149:59"><name pos:start="149:16" pos:end="149:37">CONFIG_MSMPEG4_DECODER</name> <operator pos:start="149:39" pos:end="149:40">&amp;&amp;</operator> <name pos:start="149:42" pos:end="149:59"><name pos:start="149:42" pos:end="149:42">s</name><operator pos:start="149:43" pos:end="149:44">-&gt;</operator><name pos:start="149:45" pos:end="149:59">msmpeg4_version</name></name></expr>)</condition> <block pos:start="149:62" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:47">

        <expr_stmt pos:start="151:9" pos:end="151:47"><expr pos:start="151:9" pos:end="151:46"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <call pos:start="151:15" pos:end="151:46"><name pos:start="151:15" pos:end="151:43">msmpeg4_decode_picture_header</name><argument_list pos:start="151:44" pos:end="151:46">(<argument pos:start="151:45" pos:end="151:45"><expr pos:start="151:45" pos:end="151:45"><name pos:start="151:45" pos:end="151:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="153:7" pos:end="169:5">else if <condition pos:start="153:15" pos:end="153:28">(<expr pos:start="153:16" pos:end="153:27"><name pos:start="153:16" pos:end="153:27"><name pos:start="153:16" pos:end="153:16">s</name><operator pos:start="153:17" pos:end="153:18">-&gt;</operator><name pos:start="153:19" pos:end="153:27">h263_pred</name></name></expr>)</condition> <block pos:start="153:30" pos:end="169:5">{<block_content pos:start="155:9" pos:end="167:56">

        <if_stmt pos:start="155:9" pos:end="165:9"><if pos:start="155:9" pos:end="165:9">if<condition pos:start="155:11" pos:end="155:60">(<expr pos:start="155:12" pos:end="155:59"><name pos:start="155:12" pos:end="155:35"><name pos:start="155:12" pos:end="155:12">s</name><operator pos:start="155:13" pos:end="155:14">-&gt;</operator><name pos:start="155:15" pos:end="155:19">avctx</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:35">extradata_size</name></name> <operator pos:start="155:37" pos:end="155:38">&amp;&amp;</operator> <name pos:start="155:40" pos:end="155:56"><name pos:start="155:40" pos:end="155:40">s</name><operator pos:start="155:41" pos:end="155:42">-&gt;</operator><name pos:start="155:43" pos:end="155:56">picture_number</name></name><operator pos:start="155:57" pos:end="155:58">==</operator><literal type="number" pos:start="155:59" pos:end="155:59">0</literal></expr>)</condition><block pos:start="155:61" pos:end="165:9">{<block_content pos:start="157:13" pos:end="163:57">

            <decl_stmt pos:start="157:13" pos:end="157:29"><decl pos:start="157:13" pos:end="157:28"><type pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:25">GetBitContext</name></type> <name pos:start="157:27" pos:end="157:28">gb</name></decl>;</decl_stmt>



            <expr_stmt pos:start="161:13" pos:end="161:80"><expr pos:start="161:13" pos:end="161:79"><call pos:start="161:13" pos:end="161:79"><name pos:start="161:13" pos:end="161:25">init_get_bits</name><argument_list pos:start="161:26" pos:end="161:79">(<argument pos:start="161:27" pos:end="161:29"><expr pos:start="161:27" pos:end="161:29"><operator pos:start="161:27" pos:end="161:27">&amp;</operator><name pos:start="161:28" pos:end="161:29">gb</name></expr></argument>, <argument pos:start="161:32" pos:end="161:50"><expr pos:start="161:32" pos:end="161:50"><name pos:start="161:32" pos:end="161:50"><name pos:start="161:32" pos:end="161:32">s</name><operator pos:start="161:33" pos:end="161:34">-&gt;</operator><name pos:start="161:35" pos:end="161:39">avctx</name><operator pos:start="161:40" pos:end="161:41">-&gt;</operator><name pos:start="161:42" pos:end="161:50">extradata</name></name></expr></argument>, <argument pos:start="161:53" pos:end="161:78"><expr pos:start="161:53" pos:end="161:78"><name pos:start="161:53" pos:end="161:76"><name pos:start="161:53" pos:end="161:53">s</name><operator pos:start="161:54" pos:end="161:55">-&gt;</operator><name pos:start="161:56" pos:end="161:60">avctx</name><operator pos:start="161:61" pos:end="161:62">-&gt;</operator><name pos:start="161:63" pos:end="161:76">extradata_size</name></name><operator pos:start="161:77" pos:end="161:77">*</operator><literal type="number" pos:start="161:78" pos:end="161:78">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:57"><expr pos:start="163:13" pos:end="163:56"><name pos:start="163:13" pos:end="163:15">ret</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <call pos:start="163:19" pos:end="163:56"><name pos:start="163:19" pos:end="163:48">ff_mpeg4_decode_picture_header</name><argument_list pos:start="163:49" pos:end="163:56">(<argument pos:start="163:50" pos:end="163:50"><expr pos:start="163:50" pos:end="163:50"><name pos:start="163:50" pos:end="163:50">s</name></expr></argument>, <argument pos:start="163:53" pos:end="163:55"><expr pos:start="163:53" pos:end="163:55"><operator pos:start="163:53" pos:end="163:53">&amp;</operator><name pos:start="163:54" pos:end="163:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:56"><expr pos:start="167:9" pos:end="167:55"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <call pos:start="167:15" pos:end="167:55"><name pos:start="167:15" pos:end="167:44">ff_mpeg4_decode_picture_header</name><argument_list pos:start="167:45" pos:end="167:55">(<argument pos:start="167:46" pos:end="167:46"><expr pos:start="167:46" pos:end="167:46"><name pos:start="167:46" pos:end="167:46">s</name></expr></argument>, <argument pos:start="167:49" pos:end="167:54"><expr pos:start="167:49" pos:end="167:54"><operator pos:start="167:49" pos:end="167:49">&amp;</operator><name pos:start="167:50" pos:end="167:54"><name pos:start="167:50" pos:end="167:50">s</name><operator pos:start="167:51" pos:end="167:52">-&gt;</operator><name pos:start="167:53" pos:end="167:54">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="169:7" pos:end="173:5">else if <condition pos:start="169:15" pos:end="169:45">(<expr pos:start="169:16" pos:end="169:44"><name pos:start="169:16" pos:end="169:26"><name pos:start="169:16" pos:end="169:16">s</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:26">codec_id</name></name> <operator pos:start="169:28" pos:end="169:29">==</operator> <name pos:start="169:31" pos:end="169:44">CODEC_ID_H263I</name></expr>)</condition> <block pos:start="169:47" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:50">

        <expr_stmt pos:start="171:9" pos:end="171:50"><expr pos:start="171:9" pos:end="171:49"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <call pos:start="171:15" pos:end="171:49"><name pos:start="171:15" pos:end="171:46">intel_h263_decode_picture_header</name><argument_list pos:start="171:47" pos:end="171:49">(<argument pos:start="171:48" pos:end="171:48"><expr pos:start="171:48" pos:end="171:48"><name pos:start="171:48" pos:end="171:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="173:7" pos:end="177:5">else if <condition pos:start="173:15" pos:end="173:27">(<expr pos:start="173:16" pos:end="173:26"><name pos:start="173:16" pos:end="173:26"><name pos:start="173:16" pos:end="173:16">s</name><operator pos:start="173:17" pos:end="173:18">-&gt;</operator><name pos:start="173:19" pos:end="173:26">h263_flv</name></name></expr>)</condition> <block pos:start="173:29" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:48">

        <expr_stmt pos:start="175:9" pos:end="175:48"><expr pos:start="175:9" pos:end="175:47"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:47"><name pos:start="175:15" pos:end="175:44">flv_h263_decode_picture_header</name><argument_list pos:start="175:45" pos:end="175:47">(<argument pos:start="175:46" pos:end="175:46"><expr pos:start="175:46" pos:end="175:46"><name pos:start="175:46" pos:end="175:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="177:7" pos:end="181:5">else <block pos:start="177:12" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:44">

        <expr_stmt pos:start="179:9" pos:end="179:44"><expr pos:start="179:9" pos:end="179:43"><name pos:start="179:9" pos:end="179:11">ret</name> <operator pos:start="179:13" pos:end="179:13">=</operator> <call pos:start="179:15" pos:end="179:43"><name pos:start="179:15" pos:end="179:40">h263_decode_picture_header</name><argument_list pos:start="179:41" pos:end="179:43">(<argument pos:start="179:42" pos:end="179:42"><expr pos:start="179:42" pos:end="179:42"><name pos:start="179:42" pos:end="179:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="185:5" pos:end="185:66"><if pos:start="185:5" pos:end="185:66">if<condition pos:start="185:7" pos:end="185:26">(<expr pos:start="185:8" pos:end="185:25"><name pos:start="185:8" pos:end="185:10">ret</name><operator pos:start="185:11" pos:end="185:12">==</operator><name pos:start="185:13" pos:end="185:25">FRAME_SKIPPED</name></expr>)</condition><block type="pseudo" pos:start="185:28" pos:end="185:66"><block_content pos:start="185:28" pos:end="185:66"> <return pos:start="185:28" pos:end="185:66">return <expr pos:start="185:35" pos:end="185:65"><call pos:start="185:35" pos:end="185:65"><name pos:start="185:35" pos:end="185:52">get_consumed_bytes</name><argument_list pos:start="185:53" pos:end="185:65">(<argument pos:start="185:54" pos:end="185:54"><expr pos:start="185:54" pos:end="185:54"><name pos:start="185:54" pos:end="185:54">s</name></expr></argument>, <argument pos:start="185:57" pos:end="185:64"><expr pos:start="185:57" pos:end="185:64"><name pos:start="185:57" pos:end="185:64">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:41">/* skip if the header was thrashed */</comment>

    <if_stmt pos:start="191:5" pos:end="197:5"><if pos:start="191:5" pos:end="197:5">if <condition pos:start="191:8" pos:end="191:16">(<expr pos:start="191:9" pos:end="191:15"><name pos:start="191:9" pos:end="191:11">ret</name> <operator pos:start="191:13" pos:end="191:13">&lt;</operator> <literal type="number" pos:start="191:15" pos:end="191:15">0</literal></expr>)</condition><block pos:start="191:17" pos:end="197:5">{<block_content pos:start="193:9" pos:end="195:18">

        <expr_stmt pos:start="193:9" pos:end="193:59"><expr pos:start="193:9" pos:end="193:58"><call pos:start="193:9" pos:end="193:58"><name pos:start="193:9" pos:end="193:14">av_log</name><argument_list pos:start="193:15" pos:end="193:58">(<argument pos:start="193:16" pos:end="193:23"><expr pos:start="193:16" pos:end="193:23"><name pos:start="193:16" pos:end="193:23"><name pos:start="193:16" pos:end="193:16">s</name><operator pos:start="193:17" pos:end="193:18">-&gt;</operator><name pos:start="193:19" pos:end="193:23">avctx</name></name></expr></argument>, <argument pos:start="193:26" pos:end="193:37"><expr pos:start="193:26" pos:end="193:37"><name pos:start="193:26" pos:end="193:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:40" pos:end="193:57"><expr pos:start="193:40" pos:end="193:57"><literal type="string" pos:start="193:40" pos:end="193:57">"header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="195:9" pos:end="195:18">return <expr pos:start="195:16" pos:end="195:17"><operator pos:start="195:16" pos:end="195:16">-</operator><literal type="number" pos:start="195:17" pos:end="195:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:39"><expr pos:start="201:5" pos:end="201:38"><name pos:start="201:5" pos:end="201:23"><name pos:start="201:5" pos:end="201:9">avctx</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:23">has_b_frames</name></name><operator pos:start="201:24" pos:end="201:24">=</operator> <operator pos:start="201:26" pos:end="201:26">!</operator><name pos:start="201:27" pos:end="201:38"><name pos:start="201:27" pos:end="201:27">s</name><operator pos:start="201:28" pos:end="201:29">-&gt;</operator><name pos:start="201:30" pos:end="201:38">low_delay</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="205:5" pos:end="225:5"><if pos:start="205:5" pos:end="225:5">if<condition pos:start="205:7" pos:end="205:66">(<expr pos:start="205:8" pos:end="205:65"><name pos:start="205:8" pos:end="205:20"><name pos:start="205:8" pos:end="205:8">s</name><operator pos:start="205:9" pos:end="205:10">-&gt;</operator><name pos:start="205:11" pos:end="205:20">xvid_build</name></name><operator pos:start="205:21" pos:end="205:22">==</operator><literal type="number" pos:start="205:23" pos:end="205:23">0</literal> <operator pos:start="205:25" pos:end="205:26">&amp;&amp;</operator> <name pos:start="205:28" pos:end="205:42"><name pos:start="205:28" pos:end="205:28">s</name><operator pos:start="205:29" pos:end="205:30">-&gt;</operator><name pos:start="205:31" pos:end="205:42">divx_version</name></name><operator pos:start="205:43" pos:end="205:44">==</operator><literal type="number" pos:start="205:45" pos:end="205:45">0</literal> <operator pos:start="205:47" pos:end="205:48">&amp;&amp;</operator> <name pos:start="205:50" pos:end="205:62"><name pos:start="205:50" pos:end="205:50">s</name><operator pos:start="205:51" pos:end="205:52">-&gt;</operator><name pos:start="205:53" pos:end="205:62">lavc_build</name></name><operator pos:start="205:63" pos:end="205:64">==</operator><literal type="number" pos:start="205:65" pos:end="205:65">0</literal></expr>)</condition><block pos:start="205:67" pos:end="225:5">{<block_content pos:start="207:9" pos:end="224:0">

        <if_stmt pos:start="207:9" pos:end="224:0"><if pos:start="207:9" pos:end="224:0">if<condition pos:start="207:11" pos:end="211:43">(<expr pos:start="207:12" pos:end="211:42"><name pos:start="207:12" pos:end="207:30"><name pos:start="207:12" pos:end="207:12">s</name><operator pos:start="207:13" pos:end="207:14">-&gt;</operator><name pos:start="207:15" pos:end="207:30">stream_codec_tag</name></name> <operator pos:start="207:32" pos:end="207:33">==</operator> <call pos:start="207:35" pos:end="207:49"><name pos:start="207:35" pos:end="207:41">AV_RL32</name><argument_list pos:start="207:42" pos:end="207:49">(<argument pos:start="207:43" pos:end="207:48"><expr pos:start="207:43" pos:end="207:48"><literal type="string" pos:start="207:43" pos:end="207:48">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="207:51" pos:end="207:52">||</operator>

           <name pos:start="209:12" pos:end="209:23"><name pos:start="209:12" pos:end="209:12">s</name><operator pos:start="209:13" pos:end="209:14">-&gt;</operator><name pos:start="209:15" pos:end="209:23">codec_tag</name></name> <operator pos:start="209:25" pos:end="209:26">==</operator> <call pos:start="209:28" pos:end="209:42"><name pos:start="209:28" pos:end="209:34">AV_RL32</name><argument_list pos:start="209:35" pos:end="209:42">(<argument pos:start="209:36" pos:end="209:41"><expr pos:start="209:36" pos:end="209:41"><literal type="string" pos:start="209:36" pos:end="209:41">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="209:44" pos:end="209:45">||</operator> <name pos:start="209:47" pos:end="209:58"><name pos:start="209:47" pos:end="209:47">s</name><operator pos:start="209:48" pos:end="209:49">-&gt;</operator><name pos:start="209:50" pos:end="209:58">codec_tag</name></name> <operator pos:start="209:60" pos:end="209:61">==</operator> <call pos:start="209:63" pos:end="209:77"><name pos:start="209:63" pos:end="209:69">AV_RL32</name><argument_list pos:start="209:70" pos:end="209:77">(<argument pos:start="209:71" pos:end="209:76"><expr pos:start="209:71" pos:end="209:76"><literal type="string" pos:start="209:71" pos:end="209:76">"XVIX"</literal></expr></argument>)</argument_list></call> <operator pos:start="209:79" pos:end="209:80">||</operator>

           <name pos:start="211:12" pos:end="211:23"><name pos:start="211:12" pos:end="211:12">s</name><operator pos:start="211:13" pos:end="211:14">-&gt;</operator><name pos:start="211:15" pos:end="211:23">codec_tag</name></name> <operator pos:start="211:25" pos:end="211:26">==</operator> <call pos:start="211:28" pos:end="211:42"><name pos:start="211:28" pos:end="211:34">AV_RL32</name><argument_list pos:start="211:35" pos:end="211:42">(<argument pos:start="211:36" pos:end="211:41"><expr pos:start="211:36" pos:end="211:41"><literal type="string" pos:start="211:36" pos:end="211:41">"RMP4"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="224:0"><block_content pos:start="213:13" pos:end="224:0">

            <expr_stmt pos:start="213:13" pos:end="224:0"><expr pos:start="213:13" pos:end="213:29"><name pos:start="213:13" pos:end="213:25"><name pos:start="213:13" pos:end="213:13">s</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:25">xvid_build</name></name><operator pos:start="213:26" pos:end="213:26">=</operator> <operator pos:start="213:28" pos:end="213:28">-</operator><literal type="number" pos:start="213:29" pos:end="213:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="215:1" pos:end="215:5">#<cpp:directive pos:start="215:2" pos:end="215:3">if</cpp:directive> <expr pos:start="215:5" pos:end="215:5"><literal type="number" pos:start="215:5" pos:end="215:5">0</literal></expr></cpp:if>

        if(s-&gt;codec_tag == AV_RL32("DIVX") &amp;&amp; s-&gt;vo_type==0 &amp;&amp; s-&gt;vol_control_parameters==1

           &amp;&amp; s-&gt;padding_bug_score &gt; 0 &amp;&amp; s-&gt;low_delay) <comment type="line" pos:start="219:57" pos:end="219:84">// XVID with modified fourcc</comment>

            s-&gt;xvid_build= -1;

<cpp:endif pos:start="223:1" pos:end="223:6">#<cpp:directive pos:start="223:2" pos:end="223:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="229:5" pos:end="235:5"><if pos:start="229:5" pos:end="235:5">if<condition pos:start="229:7" pos:end="229:66">(<expr pos:start="229:8" pos:end="229:65"><name pos:start="229:8" pos:end="229:20"><name pos:start="229:8" pos:end="229:8">s</name><operator pos:start="229:9" pos:end="229:10">-&gt;</operator><name pos:start="229:11" pos:end="229:20">xvid_build</name></name><operator pos:start="229:21" pos:end="229:22">==</operator><literal type="number" pos:start="229:23" pos:end="229:23">0</literal> <operator pos:start="229:25" pos:end="229:26">&amp;&amp;</operator> <name pos:start="229:28" pos:end="229:42"><name pos:start="229:28" pos:end="229:28">s</name><operator pos:start="229:29" pos:end="229:30">-&gt;</operator><name pos:start="229:31" pos:end="229:42">divx_version</name></name><operator pos:start="229:43" pos:end="229:44">==</operator><literal type="number" pos:start="229:45" pos:end="229:45">0</literal> <operator pos:start="229:47" pos:end="229:48">&amp;&amp;</operator> <name pos:start="229:50" pos:end="229:62"><name pos:start="229:50" pos:end="229:50">s</name><operator pos:start="229:51" pos:end="229:52">-&gt;</operator><name pos:start="229:53" pos:end="229:62">lavc_build</name></name><operator pos:start="229:63" pos:end="229:64">==</operator><literal type="number" pos:start="229:65" pos:end="229:65">0</literal></expr>)</condition><block pos:start="229:67" pos:end="235:5">{<block_content pos:start="231:9" pos:end="233:33">

        <if_stmt pos:start="231:9" pos:end="233:33"><if pos:start="231:9" pos:end="233:33">if<condition pos:start="231:11" pos:end="231:92">(<expr pos:start="231:12" pos:end="231:91"><name pos:start="231:12" pos:end="231:23"><name pos:start="231:12" pos:end="231:12">s</name><operator pos:start="231:13" pos:end="231:14">-&gt;</operator><name pos:start="231:15" pos:end="231:23">codec_tag</name></name> <operator pos:start="231:25" pos:end="231:26">==</operator> <call pos:start="231:28" pos:end="231:42"><name pos:start="231:28" pos:end="231:34">AV_RL32</name><argument_list pos:start="231:35" pos:end="231:42">(<argument pos:start="231:36" pos:end="231:41"><expr pos:start="231:36" pos:end="231:41"><literal type="string" pos:start="231:36" pos:end="231:41">"DIVX"</literal></expr></argument>)</argument_list></call> <operator pos:start="231:44" pos:end="231:45">&amp;&amp;</operator> <name pos:start="231:47" pos:end="231:56"><name pos:start="231:47" pos:end="231:47">s</name><operator pos:start="231:48" pos:end="231:49">-&gt;</operator><name pos:start="231:50" pos:end="231:56">vo_type</name></name><operator pos:start="231:57" pos:end="231:58">==</operator><literal type="number" pos:start="231:59" pos:end="231:59">0</literal> <operator pos:start="231:61" pos:end="231:62">&amp;&amp;</operator> <name pos:start="231:64" pos:end="231:88"><name pos:start="231:64" pos:end="231:64">s</name><operator pos:start="231:65" pos:end="231:66">-&gt;</operator><name pos:start="231:67" pos:end="231:88">vol_control_parameters</name></name><operator pos:start="231:89" pos:end="231:90">==</operator><literal type="number" pos:start="231:91" pos:end="231:91">0</literal></expr>)</condition><block type="pseudo" pos:start="233:13" pos:end="233:33"><block_content pos:start="233:13" pos:end="233:33">

            <expr_stmt pos:start="233:13" pos:end="233:33"><expr pos:start="233:13" pos:end="233:32"><name pos:start="233:13" pos:end="233:27"><name pos:start="233:13" pos:end="233:13">s</name><operator pos:start="233:14" pos:end="233:15">-&gt;</operator><name pos:start="233:16" pos:end="233:27">divx_version</name></name><operator pos:start="233:28" pos:end="233:28">=</operator> <literal type="number" pos:start="233:30" pos:end="233:32">400</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="233:35" pos:end="233:42">//divx 4</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="245:5"><if pos:start="239:5" pos:end="245:5">if<condition pos:start="239:7" pos:end="239:40">(<expr pos:start="239:8" pos:end="239:39"><name pos:start="239:8" pos:end="239:20"><name pos:start="239:8" pos:end="239:8">s</name><operator pos:start="239:9" pos:end="239:10">-&gt;</operator><name pos:start="239:11" pos:end="239:20">xvid_build</name></name> <operator pos:start="239:22" pos:end="239:23">&amp;&amp;</operator> <name pos:start="239:25" pos:end="239:39"><name pos:start="239:25" pos:end="239:25">s</name><operator pos:start="239:26" pos:end="239:27">-&gt;</operator><name pos:start="239:28" pos:end="239:39">divx_version</name></name></expr>)</condition><block pos:start="239:41" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:25">

        <expr_stmt pos:start="241:9" pos:end="243:25"><expr pos:start="241:9" pos:end="243:24"><name pos:start="241:9" pos:end="241:23"><name pos:start="241:9" pos:end="241:9">s</name><operator pos:start="241:10" pos:end="241:11">-&gt;</operator><name pos:start="241:12" pos:end="241:23">divx_version</name></name><operator pos:start="241:24" pos:end="241:24">=</operator>

        <name pos:start="243:9" pos:end="243:21"><name pos:start="243:9" pos:end="243:9">s</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:21">divx_build</name></name><operator pos:start="243:22" pos:end="243:22">=</operator> <literal type="number" pos:start="243:24" pos:end="243:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="249:5" pos:end="393:5"><if pos:start="249:5" pos:end="393:5">if<condition pos:start="249:7" pos:end="249:44">(<expr pos:start="249:8" pos:end="249:43"><name pos:start="249:8" pos:end="249:25"><name pos:start="249:8" pos:end="249:8">s</name><operator pos:start="249:9" pos:end="249:10">-&gt;</operator><name pos:start="249:11" pos:end="249:25">workaround_bugs</name></name><operator pos:start="249:26" pos:end="249:26">&amp;</operator><name pos:start="249:27" pos:end="249:43">FF_BUG_AUTODETECT</name></expr>)</condition><block pos:start="249:45" pos:end="393:5">{<block_content pos:start="251:9" pos:end="392:0">

        <if_stmt pos:start="251:9" pos:end="253:51"><if pos:start="251:9" pos:end="253:51">if<condition pos:start="251:11" pos:end="251:43">(<expr pos:start="251:12" pos:end="251:42"><name pos:start="251:12" pos:end="251:23"><name pos:start="251:12" pos:end="251:12">s</name><operator pos:start="251:13" pos:end="251:14">-&gt;</operator><name pos:start="251:15" pos:end="251:23">codec_tag</name></name> <operator pos:start="251:25" pos:end="251:26">==</operator> <call pos:start="251:28" pos:end="251:42"><name pos:start="251:28" pos:end="251:34">AV_RL32</name><argument_list pos:start="251:35" pos:end="251:42">(<argument pos:start="251:36" pos:end="251:41"><expr pos:start="251:36" pos:end="251:41"><literal type="string" pos:start="251:36" pos:end="251:41">"XVIX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="253:13" pos:end="253:51"><block_content pos:start="253:13" pos:end="253:51">

            <expr_stmt pos:start="253:13" pos:end="253:51"><expr pos:start="253:13" pos:end="253:50"><name pos:start="253:13" pos:end="253:30"><name pos:start="253:13" pos:end="253:13">s</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:30">workaround_bugs</name></name><operator pos:start="253:31" pos:end="253:32">|=</operator> <name pos:start="253:34" pos:end="253:50">FF_BUG_XVID_ILACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="257:9" pos:end="261:9"><if pos:start="257:9" pos:end="261:9">if<condition pos:start="257:11" pos:end="257:43">(<expr pos:start="257:12" pos:end="257:42"><name pos:start="257:12" pos:end="257:23"><name pos:start="257:12" pos:end="257:12">s</name><operator pos:start="257:13" pos:end="257:14">-&gt;</operator><name pos:start="257:15" pos:end="257:23">codec_tag</name></name> <operator pos:start="257:25" pos:end="257:26">==</operator> <call pos:start="257:28" pos:end="257:42"><name pos:start="257:28" pos:end="257:34">AV_RL32</name><argument_list pos:start="257:35" pos:end="257:42">(<argument pos:start="257:36" pos:end="257:41"><expr pos:start="257:36" pos:end="257:41"><literal type="string" pos:start="257:36" pos:end="257:41">"UMP4"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="257:44" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:45">

            <expr_stmt pos:start="259:13" pos:end="259:45"><expr pos:start="259:13" pos:end="259:44"><name pos:start="259:13" pos:end="259:30"><name pos:start="259:13" pos:end="259:13">s</name><operator pos:start="259:14" pos:end="259:15">-&gt;</operator><name pos:start="259:16" pos:end="259:30">workaround_bugs</name></name><operator pos:start="259:31" pos:end="259:32">|=</operator> <name pos:start="259:34" pos:end="259:44">FF_BUG_UMP4</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="265:9" pos:end="269:9"><if pos:start="265:9" pos:end="269:9">if<condition pos:start="265:11" pos:end="265:54">(<expr pos:start="265:12" pos:end="265:53"><name pos:start="265:12" pos:end="265:26"><name pos:start="265:12" pos:end="265:12">s</name><operator pos:start="265:13" pos:end="265:14">-&gt;</operator><name pos:start="265:15" pos:end="265:26">divx_version</name></name><operator pos:start="265:27" pos:end="265:28">&gt;=</operator><literal type="number" pos:start="265:29" pos:end="265:31">500</literal> <operator pos:start="265:33" pos:end="265:34">&amp;&amp;</operator> <name pos:start="265:36" pos:end="265:48"><name pos:start="265:36" pos:end="265:36">s</name><operator pos:start="265:37" pos:end="265:38">-&gt;</operator><name pos:start="265:39" pos:end="265:48">divx_build</name></name><operator pos:start="265:49" pos:end="265:49">&lt;</operator><literal type="number" pos:start="265:50" pos:end="265:53">1814</literal></expr>)</condition><block pos:start="265:55" pos:end="269:9">{<block_content pos:start="267:13" pos:end="267:52">

            <expr_stmt pos:start="267:13" pos:end="267:52"><expr pos:start="267:13" pos:end="267:51"><name pos:start="267:13" pos:end="267:30"><name pos:start="267:13" pos:end="267:13">s</name><operator pos:start="267:14" pos:end="267:15">-&gt;</operator><name pos:start="267:16" pos:end="267:30">workaround_bugs</name></name><operator pos:start="267:31" pos:end="267:32">|=</operator> <name pos:start="267:34" pos:end="267:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="273:9" pos:end="277:9"><if pos:start="273:9" pos:end="277:9">if<condition pos:start="273:11" pos:end="273:53">(<expr pos:start="273:12" pos:end="273:52"><name pos:start="273:12" pos:end="273:26"><name pos:start="273:12" pos:end="273:12">s</name><operator pos:start="273:13" pos:end="273:14">-&gt;</operator><name pos:start="273:15" pos:end="273:26">divx_version</name></name><operator pos:start="273:27" pos:end="273:27">&gt;</operator><literal type="number" pos:start="273:28" pos:end="273:30">502</literal> <operator pos:start="273:32" pos:end="273:33">&amp;&amp;</operator> <name pos:start="273:35" pos:end="273:47"><name pos:start="273:35" pos:end="273:35">s</name><operator pos:start="273:36" pos:end="273:37">-&gt;</operator><name pos:start="273:38" pos:end="273:47">divx_build</name></name><operator pos:start="273:48" pos:end="273:48">&lt;</operator><literal type="number" pos:start="273:49" pos:end="273:52">1814</literal></expr>)</condition><block pos:start="273:54" pos:end="277:9">{<block_content pos:start="275:13" pos:end="275:53">

            <expr_stmt pos:start="275:13" pos:end="275:53"><expr pos:start="275:13" pos:end="275:52"><name pos:start="275:13" pos:end="275:30"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:30">workaround_bugs</name></name><operator pos:start="275:31" pos:end="275:32">|=</operator> <name pos:start="275:34" pos:end="275:52">FF_BUG_QPEL_CHROMA2</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="281:9" pos:end="283:49"><if pos:start="281:9" pos:end="283:49">if<condition pos:start="281:11" pos:end="281:45">(<expr pos:start="281:12" pos:end="281:44"><name pos:start="281:12" pos:end="281:24"><name pos:start="281:12" pos:end="281:12">s</name><operator pos:start="281:13" pos:end="281:14">-&gt;</operator><name pos:start="281:15" pos:end="281:24">xvid_build</name></name> <operator pos:start="281:26" pos:end="281:27">&amp;&amp;</operator> <name pos:start="281:29" pos:end="281:41"><name pos:start="281:29" pos:end="281:29">s</name><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:41">xvid_build</name></name><operator pos:start="281:42" pos:end="281:43">&lt;=</operator><literal type="number" pos:start="281:44" pos:end="281:44">3</literal></expr>)</condition><block type="pseudo" pos:start="283:13" pos:end="283:49"><block_content pos:start="283:13" pos:end="283:49">

            <expr_stmt pos:start="283:13" pos:end="283:49"><expr pos:start="283:13" pos:end="283:48"><name pos:start="283:13" pos:end="283:32"><name pos:start="283:13" pos:end="283:13">s</name><operator pos:start="283:14" pos:end="283:15">-&gt;</operator><name pos:start="283:16" pos:end="283:32">padding_bug_score</name></name><operator pos:start="283:33" pos:end="283:33">=</operator> <literal type="number" pos:start="283:35" pos:end="283:37">256</literal><operator pos:start="283:38" pos:end="283:38">*</operator><literal type="number" pos:start="283:39" pos:end="283:41">256</literal><operator pos:start="283:42" pos:end="283:42">*</operator><literal type="number" pos:start="283:43" pos:end="283:45">256</literal><operator pos:start="283:46" pos:end="283:46">*</operator><literal type="number" pos:start="283:47" pos:end="283:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="287:9" pos:end="289:52"><if pos:start="287:9" pos:end="289:52">if<condition pos:start="287:11" pos:end="287:45">(<expr pos:start="287:12" pos:end="287:44"><name pos:start="287:12" pos:end="287:24"><name pos:start="287:12" pos:end="287:12">s</name><operator pos:start="287:13" pos:end="287:14">-&gt;</operator><name pos:start="287:15" pos:end="287:24">xvid_build</name></name> <operator pos:start="287:26" pos:end="287:27">&amp;&amp;</operator> <name pos:start="287:29" pos:end="287:41"><name pos:start="287:29" pos:end="287:29">s</name><operator pos:start="287:30" pos:end="287:31">-&gt;</operator><name pos:start="287:32" pos:end="287:41">xvid_build</name></name><operator pos:start="287:42" pos:end="287:43">&lt;=</operator><literal type="number" pos:start="287:44" pos:end="287:44">1</literal></expr>)</condition><block type="pseudo" pos:start="289:13" pos:end="289:52"><block_content pos:start="289:13" pos:end="289:52">

            <expr_stmt pos:start="289:13" pos:end="289:52"><expr pos:start="289:13" pos:end="289:51"><name pos:start="289:13" pos:end="289:30"><name pos:start="289:13" pos:end="289:13">s</name><operator pos:start="289:14" pos:end="289:15">-&gt;</operator><name pos:start="289:16" pos:end="289:30">workaround_bugs</name></name><operator pos:start="289:31" pos:end="289:32">|=</operator> <name pos:start="289:34" pos:end="289:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="293:9" pos:end="295:45"><if pos:start="293:9" pos:end="295:45">if<condition pos:start="293:11" pos:end="293:46">(<expr pos:start="293:12" pos:end="293:45"><name pos:start="293:12" pos:end="293:24"><name pos:start="293:12" pos:end="293:12">s</name><operator pos:start="293:13" pos:end="293:14">-&gt;</operator><name pos:start="293:15" pos:end="293:24">xvid_build</name></name> <operator pos:start="293:26" pos:end="293:27">&amp;&amp;</operator> <name pos:start="293:29" pos:end="293:41"><name pos:start="293:29" pos:end="293:29">s</name><operator pos:start="293:30" pos:end="293:31">-&gt;</operator><name pos:start="293:32" pos:end="293:41">xvid_build</name></name><operator pos:start="293:42" pos:end="293:43">&lt;=</operator><literal type="number" pos:start="293:44" pos:end="293:45">12</literal></expr>)</condition><block type="pseudo" pos:start="295:13" pos:end="295:45"><block_content pos:start="295:13" pos:end="295:45">

            <expr_stmt pos:start="295:13" pos:end="295:45"><expr pos:start="295:13" pos:end="295:44"><name pos:start="295:13" pos:end="295:30"><name pos:start="295:13" pos:end="295:13">s</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:30">workaround_bugs</name></name><operator pos:start="295:31" pos:end="295:32">|=</operator> <name pos:start="295:34" pos:end="295:44">FF_BUG_EDGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="299:9" pos:end="312:0"><if pos:start="299:9" pos:end="312:0">if<condition pos:start="299:11" pos:end="299:46">(<expr pos:start="299:12" pos:end="299:45"><name pos:start="299:12" pos:end="299:24"><name pos:start="299:12" pos:end="299:12">s</name><operator pos:start="299:13" pos:end="299:14">-&gt;</operator><name pos:start="299:15" pos:end="299:24">xvid_build</name></name> <operator pos:start="299:26" pos:end="299:27">&amp;&amp;</operator> <name pos:start="299:29" pos:end="299:41"><name pos:start="299:29" pos:end="299:29">s</name><operator pos:start="299:30" pos:end="299:31">-&gt;</operator><name pos:start="299:32" pos:end="299:41">xvid_build</name></name><operator pos:start="299:42" pos:end="299:43">&lt;=</operator><literal type="number" pos:start="299:44" pos:end="299:45">32</literal></expr>)</condition><block type="pseudo" pos:start="301:13" pos:end="312:0"><block_content pos:start="301:13" pos:end="312:0">

            <expr_stmt pos:start="301:13" pos:end="312:0"><expr pos:start="301:13" pos:end="301:47"><name pos:start="301:13" pos:end="301:30"><name pos:start="301:13" pos:end="301:13">s</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:30">workaround_bugs</name></name><operator pos:start="301:31" pos:end="301:32">|=</operator> <name pos:start="301:34" pos:end="301:47">FF_BUG_DC_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="305:1" pos:end="311:50">#<cpp:directive pos:start="305:2" pos:end="305:7">define</cpp:directive> <cpp:macro pos:start="305:9" pos:end="305:41"><name pos:start="305:9" pos:end="305:21">SET_QPEL_FUNC</name><parameter_list pos:start="305:22" pos:end="305:41">(<parameter pos:start="305:23" pos:end="305:30"><type pos:start="305:23" pos:end="305:30"><name pos:start="305:23" pos:end="305:30">postfix1</name></type></parameter>, <parameter pos:start="305:33" pos:end="305:40"><type pos:start="305:33" pos:end="305:40"><name pos:start="305:33" pos:end="305:40">postfix2</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="307:5" pos:end="311:50">s-&gt;dsp.put_ ## postfix1 = ff_put_ ## postfix2;\

    s-&gt;dsp.put_no_rnd_ ## postfix1 = ff_put_no_rnd_ ## postfix2;\

    s-&gt;dsp.avg_ ## postfix1 = ff_avg_ ## postfix2;</cpp:value></cpp:define>



        <if_stmt pos:start="315:9" pos:end="317:49"><if pos:start="315:9" pos:end="317:49">if<condition pos:start="315:11" pos:end="315:47">(<expr pos:start="315:12" pos:end="315:46"><name pos:start="315:12" pos:end="315:24"><name pos:start="315:12" pos:end="315:12">s</name><operator pos:start="315:13" pos:end="315:14">-&gt;</operator><name pos:start="315:15" pos:end="315:24">lavc_build</name></name> <operator pos:start="315:26" pos:end="315:27">&amp;&amp;</operator> <name pos:start="315:29" pos:end="315:41"><name pos:start="315:29" pos:end="315:29">s</name><operator pos:start="315:30" pos:end="315:31">-&gt;</operator><name pos:start="315:32" pos:end="315:41">lavc_build</name></name><operator pos:start="315:42" pos:end="315:42">&lt;</operator><literal type="number" pos:start="315:43" pos:end="315:46">4653</literal></expr>)</condition><block type="pseudo" pos:start="317:13" pos:end="317:49"><block_content pos:start="317:13" pos:end="317:49">

            <expr_stmt pos:start="317:13" pos:end="317:49"><expr pos:start="317:13" pos:end="317:48"><name pos:start="317:13" pos:end="317:30"><name pos:start="317:13" pos:end="317:13">s</name><operator pos:start="317:14" pos:end="317:15">-&gt;</operator><name pos:start="317:16" pos:end="317:30">workaround_bugs</name></name><operator pos:start="317:31" pos:end="317:32">|=</operator> <name pos:start="317:34" pos:end="317:48">FF_BUG_STD_QPEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="321:9" pos:end="323:57"><if pos:start="321:9" pos:end="323:57">if<condition pos:start="321:11" pos:end="321:47">(<expr pos:start="321:12" pos:end="321:46"><name pos:start="321:12" pos:end="321:24"><name pos:start="321:12" pos:end="321:12">s</name><operator pos:start="321:13" pos:end="321:14">-&gt;</operator><name pos:start="321:15" pos:end="321:24">lavc_build</name></name> <operator pos:start="321:26" pos:end="321:27">&amp;&amp;</operator> <name pos:start="321:29" pos:end="321:41"><name pos:start="321:29" pos:end="321:29">s</name><operator pos:start="321:30" pos:end="321:31">-&gt;</operator><name pos:start="321:32" pos:end="321:41">lavc_build</name></name><operator pos:start="321:42" pos:end="321:42">&lt;</operator><literal type="number" pos:start="321:43" pos:end="321:46">4655</literal></expr>)</condition><block type="pseudo" pos:start="323:13" pos:end="323:57"><block_content pos:start="323:13" pos:end="323:57">

            <expr_stmt pos:start="323:13" pos:end="323:57"><expr pos:start="323:13" pos:end="323:56"><name pos:start="323:13" pos:end="323:30"><name pos:start="323:13" pos:end="323:13">s</name><operator pos:start="323:14" pos:end="323:15">-&gt;</operator><name pos:start="323:16" pos:end="323:30">workaround_bugs</name></name><operator pos:start="323:31" pos:end="323:32">|=</operator> <name pos:start="323:34" pos:end="323:56">FF_BUG_DIRECT_BLOCKSIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="327:9" pos:end="331:9"><if pos:start="327:9" pos:end="331:9">if<condition pos:start="327:11" pos:end="327:47">(<expr pos:start="327:12" pos:end="327:46"><name pos:start="327:12" pos:end="327:24"><name pos:start="327:12" pos:end="327:12">s</name><operator pos:start="327:13" pos:end="327:14">-&gt;</operator><name pos:start="327:15" pos:end="327:24">lavc_build</name></name> <operator pos:start="327:26" pos:end="327:27">&amp;&amp;</operator> <name pos:start="327:29" pos:end="327:41"><name pos:start="327:29" pos:end="327:29">s</name><operator pos:start="327:30" pos:end="327:31">-&gt;</operator><name pos:start="327:32" pos:end="327:41">lavc_build</name></name><operator pos:start="327:42" pos:end="327:42">&lt;</operator><literal type="number" pos:start="327:43" pos:end="327:46">4670</literal></expr>)</condition><block pos:start="327:48" pos:end="331:9">{<block_content pos:start="329:13" pos:end="329:45">

            <expr_stmt pos:start="329:13" pos:end="329:45"><expr pos:start="329:13" pos:end="329:44"><name pos:start="329:13" pos:end="329:30"><name pos:start="329:13" pos:end="329:13">s</name><operator pos:start="329:14" pos:end="329:15">-&gt;</operator><name pos:start="329:16" pos:end="329:30">workaround_bugs</name></name><operator pos:start="329:31" pos:end="329:32">|=</operator> <name pos:start="329:34" pos:end="329:44">FF_BUG_EDGE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="335:9" pos:end="337:48"><if pos:start="335:9" pos:end="337:48">if<condition pos:start="335:11" pos:end="335:48">(<expr pos:start="335:12" pos:end="335:47"><name pos:start="335:12" pos:end="335:24"><name pos:start="335:12" pos:end="335:12">s</name><operator pos:start="335:13" pos:end="335:14">-&gt;</operator><name pos:start="335:15" pos:end="335:24">lavc_build</name></name> <operator pos:start="335:26" pos:end="335:27">&amp;&amp;</operator> <name pos:start="335:29" pos:end="335:41"><name pos:start="335:29" pos:end="335:29">s</name><operator pos:start="335:30" pos:end="335:31">-&gt;</operator><name pos:start="335:32" pos:end="335:41">lavc_build</name></name><operator pos:start="335:42" pos:end="335:43">&lt;=</operator><literal type="number" pos:start="335:44" pos:end="335:47">4712</literal></expr>)</condition><block type="pseudo" pos:start="337:13" pos:end="337:48"><block_content pos:start="337:13" pos:end="337:48">

            <expr_stmt pos:start="337:13" pos:end="337:48"><expr pos:start="337:13" pos:end="337:47"><name pos:start="337:13" pos:end="337:30"><name pos:start="337:13" pos:end="337:13">s</name><operator pos:start="337:14" pos:end="337:15">-&gt;</operator><name pos:start="337:16" pos:end="337:30">workaround_bugs</name></name><operator pos:start="337:31" pos:end="337:32">|=</operator> <name pos:start="337:34" pos:end="337:47">FF_BUG_DC_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="341:9" pos:end="343:57"><if pos:start="341:9" pos:end="343:57">if<condition pos:start="341:11" pos:end="341:27">(<expr pos:start="341:12" pos:end="341:26"><name pos:start="341:12" pos:end="341:26"><name pos:start="341:12" pos:end="341:12">s</name><operator pos:start="341:13" pos:end="341:14">-&gt;</operator><name pos:start="341:15" pos:end="341:26">divx_version</name></name></expr>)</condition><block type="pseudo" pos:start="343:13" pos:end="343:57"><block_content pos:start="343:13" pos:end="343:57">

            <expr_stmt pos:start="343:13" pos:end="343:57"><expr pos:start="343:13" pos:end="343:56"><name pos:start="343:13" pos:end="343:30"><name pos:start="343:13" pos:end="343:13">s</name><operator pos:start="343:14" pos:end="343:15">-&gt;</operator><name pos:start="343:16" pos:end="343:30">workaround_bugs</name></name><operator pos:start="343:31" pos:end="343:32">|=</operator> <name pos:start="343:34" pos:end="343:56">FF_BUG_DIRECT_BLOCKSIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="line" pos:start="345:1" pos:end="345:58">//printf("padding_bug_score: %d\n", s-&gt;padding_bug_score);</comment>

        <if_stmt pos:start="347:9" pos:end="349:49"><if pos:start="347:9" pos:end="349:49">if<condition pos:start="347:11" pos:end="347:59">(<expr pos:start="347:12" pos:end="347:58"><name pos:start="347:12" pos:end="347:26"><name pos:start="347:12" pos:end="347:12">s</name><operator pos:start="347:13" pos:end="347:14">-&gt;</operator><name pos:start="347:15" pos:end="347:26">divx_version</name></name><operator pos:start="347:27" pos:end="347:28">==</operator><literal type="number" pos:start="347:29" pos:end="347:31">501</literal> <operator pos:start="347:33" pos:end="347:34">&amp;&amp;</operator> <name pos:start="347:36" pos:end="347:48"><name pos:start="347:36" pos:end="347:36">s</name><operator pos:start="347:37" pos:end="347:38">-&gt;</operator><name pos:start="347:39" pos:end="347:48">divx_build</name></name><operator pos:start="347:49" pos:end="347:50">==</operator><literal type="number" pos:start="347:51" pos:end="347:58">20020416</literal></expr>)</condition><block type="pseudo" pos:start="349:13" pos:end="349:49"><block_content pos:start="349:13" pos:end="349:49">

            <expr_stmt pos:start="349:13" pos:end="349:49"><expr pos:start="349:13" pos:end="349:48"><name pos:start="349:13" pos:end="349:32"><name pos:start="349:13" pos:end="349:13">s</name><operator pos:start="349:14" pos:end="349:15">-&gt;</operator><name pos:start="349:16" pos:end="349:32">padding_bug_score</name></name><operator pos:start="349:33" pos:end="349:33">=</operator> <literal type="number" pos:start="349:35" pos:end="349:37">256</literal><operator pos:start="349:38" pos:end="349:38">*</operator><literal type="number" pos:start="349:39" pos:end="349:41">256</literal><operator pos:start="349:42" pos:end="349:42">*</operator><literal type="number" pos:start="349:43" pos:end="349:45">256</literal><operator pos:start="349:46" pos:end="349:46">*</operator><literal type="number" pos:start="349:47" pos:end="349:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="353:9" pos:end="357:9"><if pos:start="353:9" pos:end="357:9">if<condition pos:start="353:11" pos:end="353:50">(<expr pos:start="353:12" pos:end="353:49"><name pos:start="353:12" pos:end="353:26"><name pos:start="353:12" pos:end="353:12">s</name><operator pos:start="353:13" pos:end="353:14">-&gt;</operator><name pos:start="353:15" pos:end="353:26">divx_version</name></name> <operator pos:start="353:28" pos:end="353:29">&amp;&amp;</operator> <name pos:start="353:31" pos:end="353:45"><name pos:start="353:31" pos:end="353:31">s</name><operator pos:start="353:32" pos:end="353:33">-&gt;</operator><name pos:start="353:34" pos:end="353:45">divx_version</name></name><operator pos:start="353:46" pos:end="353:46">&lt;</operator><literal type="number" pos:start="353:47" pos:end="353:49">500</literal></expr>)</condition><block pos:start="353:51" pos:end="357:9">{<block_content pos:start="355:13" pos:end="355:45">

            <expr_stmt pos:start="355:13" pos:end="355:45"><expr pos:start="355:13" pos:end="355:44"><name pos:start="355:13" pos:end="355:30"><name pos:start="355:13" pos:end="355:13">s</name><operator pos:start="355:14" pos:end="355:15">-&gt;</operator><name pos:start="355:16" pos:end="355:30">workaround_bugs</name></name><operator pos:start="355:31" pos:end="355:32">|=</operator> <name pos:start="355:34" pos:end="355:44">FF_BUG_EDGE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="361:9" pos:end="392:0"><if pos:start="361:9" pos:end="392:0">if<condition pos:start="361:11" pos:end="361:27">(<expr pos:start="361:12" pos:end="361:26"><name pos:start="361:12" pos:end="361:26"><name pos:start="361:12" pos:end="361:12">s</name><operator pos:start="361:13" pos:end="361:14">-&gt;</operator><name pos:start="361:15" pos:end="361:26">divx_version</name></name></expr>)</condition><block type="pseudo" pos:start="363:13" pos:end="392:0"><block_content pos:start="363:13" pos:end="392:0">

            <expr_stmt pos:start="363:13" pos:end="392:0"><expr pos:start="363:13" pos:end="363:51"><name pos:start="363:13" pos:end="363:30"><name pos:start="363:13" pos:end="363:13">s</name><operator pos:start="363:14" pos:end="363:15">-&gt;</operator><name pos:start="363:16" pos:end="363:30">workaround_bugs</name></name><operator pos:start="363:31" pos:end="363:32">|=</operator> <name pos:start="363:34" pos:end="363:51">FF_BUG_HPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="365:1" pos:end="365:5">#<cpp:directive pos:start="365:2" pos:end="365:3">if</cpp:directive> <expr pos:start="365:5" pos:end="365:5"><literal type="number" pos:start="365:5" pos:end="365:5">0</literal></expr></cpp:if>

        if(s-&gt;divx_version==500)

            s-&gt;padding_bug_score= 256*256*256*64;



        <comment type="block" pos:start="373:9" pos:end="377:11">/* very ugly XVID padding bug detection FIXME/XXX solve this differently

         * Let us hope this at least works.

         */</comment>

        if(   s-&gt;resync_marker==0 &amp;&amp; s-&gt;data_partitioning==0 &amp;&amp; s-&gt;divx_version==0

           &amp;&amp; s-&gt;codec_id==CODEC_ID_MPEG4 &amp;&amp; s-&gt;vo_type==0)

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;



        if(s-&gt;lavc_build &amp;&amp; s-&gt;lavc_build&lt;4609) <comment type="line" pos:start="387:49" pos:end="387:111">//FIXME not sure about the version num but a 4609 file seems ok</comment>

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;

<cpp:endif pos:start="391:1" pos:end="391:6">#<cpp:directive pos:start="391:2" pos:end="391:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="397:5" pos:end="425:5"><if pos:start="397:5" pos:end="425:5">if<condition pos:start="397:7" pos:end="397:43">(<expr pos:start="397:8" pos:end="397:42"><name pos:start="397:8" pos:end="397:25"><name pos:start="397:8" pos:end="397:8">s</name><operator pos:start="397:9" pos:end="397:10">-&gt;</operator><name pos:start="397:11" pos:end="397:25">workaround_bugs</name></name><operator pos:start="397:26" pos:end="397:26">&amp;</operator> <name pos:start="397:28" pos:end="397:42">FF_BUG_STD_QPEL</name></expr>)</condition><block pos:start="397:44" pos:end="425:5">{<block_content pos:start="399:9" pos:end="423:63">

        <macro pos:start="399:9" pos:end="399:64"><name pos:start="399:9" pos:end="399:21">SET_QPEL_FUNC</name><argument_list pos:start="399:22" pos:end="399:64">(<argument pos:start="399:23" pos:end="399:44">qpel_pixels_tab[<literal type="number" pos:start="399:39" pos:end="399:39">0</literal>][ <literal type="number" pos:start="399:43" pos:end="399:43">5</literal>]</argument>, <argument pos:start="399:47" pos:end="399:63">qpel16_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="401:9" pos:end="401:64"><name pos:start="401:9" pos:end="401:21">SET_QPEL_FUNC</name><argument_list pos:start="401:22" pos:end="401:64">(<argument pos:start="401:23" pos:end="401:44">qpel_pixels_tab[<literal type="number" pos:start="401:39" pos:end="401:39">0</literal>][ <literal type="number" pos:start="401:43" pos:end="401:43">7</literal>]</argument>, <argument pos:start="401:47" pos:end="401:63">qpel16_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="403:9" pos:end="403:64"><name pos:start="403:9" pos:end="403:21">SET_QPEL_FUNC</name><argument_list pos:start="403:22" pos:end="403:64">(<argument pos:start="403:23" pos:end="403:44">qpel_pixels_tab[<literal type="number" pos:start="403:39" pos:end="403:39">0</literal>][ <literal type="number" pos:start="403:43" pos:end="403:43">9</literal>]</argument>, <argument pos:start="403:47" pos:end="403:63">qpel16_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="405:9" pos:end="405:64"><name pos:start="405:9" pos:end="405:21">SET_QPEL_FUNC</name><argument_list pos:start="405:22" pos:end="405:64">(<argument pos:start="405:23" pos:end="405:44">qpel_pixels_tab[<literal type="number" pos:start="405:39" pos:end="405:39">0</literal>][<literal type="number" pos:start="405:42" pos:end="405:43">11</literal>]</argument>, <argument pos:start="405:47" pos:end="405:63">qpel16_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="407:9" pos:end="407:64"><name pos:start="407:9" pos:end="407:21">SET_QPEL_FUNC</name><argument_list pos:start="407:22" pos:end="407:64">(<argument pos:start="407:23" pos:end="407:44">qpel_pixels_tab[<literal type="number" pos:start="407:39" pos:end="407:39">0</literal>][<literal type="number" pos:start="407:42" pos:end="407:43">13</literal>]</argument>, <argument pos:start="407:47" pos:end="407:63">qpel16_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="409:9" pos:end="409:64"><name pos:start="409:9" pos:end="409:21">SET_QPEL_FUNC</name><argument_list pos:start="409:22" pos:end="409:64">(<argument pos:start="409:23" pos:end="409:44">qpel_pixels_tab[<literal type="number" pos:start="409:39" pos:end="409:39">0</literal>][<literal type="number" pos:start="409:42" pos:end="409:43">15</literal>]</argument>, <argument pos:start="409:47" pos:end="409:63">qpel16_mc33_old_c</argument>)</argument_list></macro>



        <macro pos:start="413:9" pos:end="413:63"><name pos:start="413:9" pos:end="413:21">SET_QPEL_FUNC</name><argument_list pos:start="413:22" pos:end="413:63">(<argument pos:start="413:23" pos:end="413:44">qpel_pixels_tab[<literal type="number" pos:start="413:39" pos:end="413:39">1</literal>][ <literal type="number" pos:start="413:43" pos:end="413:43">5</literal>]</argument>, <argument pos:start="413:47" pos:end="413:62">qpel8_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="415:9" pos:end="415:63"><name pos:start="415:9" pos:end="415:21">SET_QPEL_FUNC</name><argument_list pos:start="415:22" pos:end="415:63">(<argument pos:start="415:23" pos:end="415:44">qpel_pixels_tab[<literal type="number" pos:start="415:39" pos:end="415:39">1</literal>][ <literal type="number" pos:start="415:43" pos:end="415:43">7</literal>]</argument>, <argument pos:start="415:47" pos:end="415:62">qpel8_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="417:9" pos:end="417:63"><name pos:start="417:9" pos:end="417:21">SET_QPEL_FUNC</name><argument_list pos:start="417:22" pos:end="417:63">(<argument pos:start="417:23" pos:end="417:44">qpel_pixels_tab[<literal type="number" pos:start="417:39" pos:end="417:39">1</literal>][ <literal type="number" pos:start="417:43" pos:end="417:43">9</literal>]</argument>, <argument pos:start="417:47" pos:end="417:62">qpel8_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="419:9" pos:end="419:63"><name pos:start="419:9" pos:end="419:21">SET_QPEL_FUNC</name><argument_list pos:start="419:22" pos:end="419:63">(<argument pos:start="419:23" pos:end="419:44">qpel_pixels_tab[<literal type="number" pos:start="419:39" pos:end="419:39">1</literal>][<literal type="number" pos:start="419:42" pos:end="419:43">11</literal>]</argument>, <argument pos:start="419:47" pos:end="419:62">qpel8_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="421:9" pos:end="421:63"><name pos:start="421:9" pos:end="421:21">SET_QPEL_FUNC</name><argument_list pos:start="421:22" pos:end="421:63">(<argument pos:start="421:23" pos:end="421:44">qpel_pixels_tab[<literal type="number" pos:start="421:39" pos:end="421:39">1</literal>][<literal type="number" pos:start="421:42" pos:end="421:43">13</literal>]</argument>, <argument pos:start="421:47" pos:end="421:62">qpel8_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="423:9" pos:end="423:63"><name pos:start="423:9" pos:end="423:21">SET_QPEL_FUNC</name><argument_list pos:start="423:22" pos:end="423:63">(<argument pos:start="423:23" pos:end="423:44">qpel_pixels_tab[<literal type="number" pos:start="423:39" pos:end="423:39">1</literal>][<literal type="number" pos:start="423:42" pos:end="423:43">15</literal>]</argument>, <argument pos:start="423:47" pos:end="423:62">qpel8_mc33_old_c</argument>)</argument_list></macro>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="429:5" pos:end="456:0"><if pos:start="429:5" pos:end="456:0">if<condition pos:start="429:7" pos:end="429:36">(<expr pos:start="429:8" pos:end="429:35"><name pos:start="429:8" pos:end="429:19"><name pos:start="429:8" pos:end="429:12">avctx</name><operator pos:start="429:13" pos:end="429:14">-&gt;</operator><name pos:start="429:15" pos:end="429:19">debug</name></name> <operator pos:start="429:21" pos:end="429:21">&amp;</operator> <name pos:start="429:23" pos:end="429:35">FF_DEBUG_BUGS</name></expr>)</condition><block type="pseudo" pos:start="431:9" pos:end="456:0"><block_content pos:start="431:9" pos:end="456:0">

        <expr_stmt pos:start="431:9" pos:end="456:0"><expr pos:start="431:9" pos:end="435:41"><call pos:start="431:9" pos:end="435:41"><name pos:start="431:9" pos:end="431:14">av_log</name><argument_list pos:start="431:15" pos:end="435:41">(<argument pos:start="431:16" pos:end="431:23"><expr pos:start="431:16" pos:end="431:23"><name pos:start="431:16" pos:end="431:23"><name pos:start="431:16" pos:end="431:16">s</name><operator pos:start="431:17" pos:end="431:18">-&gt;</operator><name pos:start="431:19" pos:end="431:23">avctx</name></name></expr></argument>, <argument pos:start="431:26" pos:end="431:37"><expr pos:start="431:26" pos:end="431:37"><name pos:start="431:26" pos:end="431:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="431:40" pos:end="431:112"><expr pos:start="431:40" pos:end="431:112"><literal type="string" pos:start="431:40" pos:end="431:112">"bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n"</literal></expr></argument>,

               <argument pos:start="433:16" pos:end="433:33"><expr pos:start="433:16" pos:end="433:33"><name pos:start="433:16" pos:end="433:33"><name pos:start="433:16" pos:end="433:16">s</name><operator pos:start="433:17" pos:end="433:18">-&gt;</operator><name pos:start="433:19" pos:end="433:33">workaround_bugs</name></name></expr></argument>, <argument pos:start="433:36" pos:end="433:48"><expr pos:start="433:36" pos:end="433:48"><name pos:start="433:36" pos:end="433:48"><name pos:start="433:36" pos:end="433:36">s</name><operator pos:start="433:37" pos:end="433:38">-&gt;</operator><name pos:start="433:39" pos:end="433:48">lavc_build</name></name></expr></argument>, <argument pos:start="433:51" pos:end="433:63"><expr pos:start="433:51" pos:end="433:63"><name pos:start="433:51" pos:end="433:63"><name pos:start="433:51" pos:end="433:51">s</name><operator pos:start="433:52" pos:end="433:53">-&gt;</operator><name pos:start="433:54" pos:end="433:63">xvid_build</name></name></expr></argument>, <argument pos:start="433:66" pos:end="433:80"><expr pos:start="433:66" pos:end="433:80"><name pos:start="433:66" pos:end="433:80"><name pos:start="433:66" pos:end="433:66">s</name><operator pos:start="433:67" pos:end="433:68">-&gt;</operator><name pos:start="433:69" pos:end="433:80">divx_version</name></name></expr></argument>, <argument pos:start="433:83" pos:end="433:95"><expr pos:start="433:83" pos:end="433:95"><name pos:start="433:83" pos:end="433:95"><name pos:start="433:83" pos:end="433:83">s</name><operator pos:start="433:84" pos:end="433:85">-&gt;</operator><name pos:start="433:86" pos:end="433:95">divx_build</name></name></expr></argument>,

               <argument pos:start="435:16" pos:end="435:40"><expr pos:start="435:16" pos:end="435:40"><ternary pos:start="435:16" pos:end="435:40"><condition pos:start="435:16" pos:end="435:31"><expr pos:start="435:16" pos:end="435:29"><name pos:start="435:16" pos:end="435:29"><name pos:start="435:16" pos:end="435:16">s</name><operator pos:start="435:17" pos:end="435:18">-&gt;</operator><name pos:start="435:19" pos:end="435:29">divx_packed</name></name></expr> ?</condition><then pos:start="435:33" pos:end="435:35"> <expr pos:start="435:33" pos:end="435:35"><literal type="string" pos:start="435:33" pos:end="435:35">"p"</literal></expr> </then><else pos:start="435:37" pos:end="435:40">: <expr pos:start="435:39" pos:end="435:40"><literal type="string" pos:start="435:39" pos:end="435:40">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:if pos:start="439:1" pos:end="439:5">#<cpp:directive pos:start="439:2" pos:end="439:3">if</cpp:directive> <expr pos:start="439:5" pos:end="439:5"><literal type="number" pos:start="439:5" pos:end="439:5">0</literal></expr></cpp:if> <comment type="line" pos:start="439:7" pos:end="439:46">// dump bits per frame / qp / complexity</comment>

{

    static FILE *f=NULL;

    if(!f) f=fopen("rate_qp_cplx.txt", "w");

    fprintf(f, "%d %d %f\n", buf_size, s-&gt;qscale, buf_size*(double)s-&gt;qscale);

}

<cpp:endif pos:start="451:1" pos:end="451:6">#<cpp:directive pos:start="451:2" pos:end="451:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="455:1" pos:end="455:12">#<cpp:directive pos:start="455:2" pos:end="455:3">if</cpp:directive> <expr pos:start="455:5" pos:end="455:12"><name pos:start="455:5" pos:end="455:12">HAVE_MMX</name></expr></cpp:if>

    <if_stmt pos:start="457:5" pos:end="470:0"><if pos:start="457:5" pos:end="470:0">if<condition pos:start="457:7" pos:end="457:116">(<expr pos:start="457:8" pos:end="457:115"><name pos:start="457:8" pos:end="457:18"><name pos:start="457:8" pos:end="457:8">s</name><operator pos:start="457:9" pos:end="457:10">-&gt;</operator><name pos:start="457:11" pos:end="457:18">codec_id</name></name> <operator pos:start="457:20" pos:end="457:21">==</operator> <name pos:start="457:23" pos:end="457:36">CODEC_ID_MPEG4</name> <operator pos:start="457:38" pos:end="457:39">&amp;&amp;</operator> <name pos:start="457:41" pos:end="457:53"><name pos:start="457:41" pos:end="457:41">s</name><operator pos:start="457:42" pos:end="457:43">-&gt;</operator><name pos:start="457:44" pos:end="457:53">xvid_build</name></name> <operator pos:start="457:55" pos:end="457:56">&amp;&amp;</operator> <name pos:start="457:58" pos:end="457:73"><name pos:start="457:58" pos:end="457:62">avctx</name><operator pos:start="457:63" pos:end="457:64">-&gt;</operator><name pos:start="457:65" pos:end="457:73">idct_algo</name></name> <operator pos:start="457:75" pos:end="457:76">==</operator> <name pos:start="457:78" pos:end="457:89">FF_IDCT_AUTO</name> <operator pos:start="457:91" pos:end="457:92">&amp;&amp;</operator> <operator pos:start="457:94" pos:end="457:94">(</operator><name pos:start="457:95" pos:end="457:102">mm_flags</name> <operator pos:start="457:104" pos:end="457:104">&amp;</operator> <name pos:start="457:106" pos:end="457:114">FF_MM_MMX</name><operator pos:start="457:115" pos:end="457:115">)</operator></expr>)</condition><block pos:start="457:117" pos:end="470:0">{<block_content pos:start="459:9" pos:end="465:28">

        <expr_stmt pos:start="459:9" pos:end="459:42"><expr pos:start="459:9" pos:end="459:41"><name pos:start="459:9" pos:end="459:24"><name pos:start="459:9" pos:end="459:13">avctx</name><operator pos:start="459:14" pos:end="459:15">-&gt;</operator><name pos:start="459:16" pos:end="459:24">idct_algo</name></name><operator pos:start="459:25" pos:end="459:25">=</operator> <name pos:start="459:27" pos:end="459:41">FF_IDCT_XVIDMMX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="461:9" pos:end="461:30"><expr pos:start="461:9" pos:end="461:29"><name pos:start="461:9" pos:end="461:26"><name pos:start="461:9" pos:end="461:13">avctx</name><operator pos:start="461:14" pos:end="461:15">-&gt;</operator><name pos:start="461:16" pos:end="461:26">coded_width</name></name><operator pos:start="461:27" pos:end="461:27">=</operator> <literal type="number" pos:start="461:29" pos:end="461:29">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="461:32" pos:end="461:46">// force reinit</comment>

<comment type="line" pos:start="463:1" pos:end="463:39">//        dsputil_init(&amp;s-&gt;dsp, avctx);</comment>

        <expr_stmt pos:start="465:9" pos:end="465:28"><expr pos:start="465:9" pos:end="465:27"><name pos:start="465:9" pos:end="465:25"><name pos:start="465:9" pos:end="465:9">s</name><operator pos:start="465:10" pos:end="465:11">-&gt;</operator><name pos:start="465:12" pos:end="465:25">picture_number</name></name><operator pos:start="465:26" pos:end="465:26">=</operator><literal type="number" pos:start="465:27" pos:end="465:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="469:1" pos:end="469:6">#<cpp:directive pos:start="469:2" pos:end="469:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="473:9" pos:end="473:72">/* After H263 &amp; mpeg4 header decode we have the height, width,*/</comment>

        <comment type="block" pos:start="475:9" pos:end="475:71">/* and other parameters. So then we could init the picture   */</comment>

        <comment type="block" pos:start="477:9" pos:end="477:71">/* FIXME: By the way H263 decoder is evolving it should have */</comment>

        <comment type="block" pos:start="479:9" pos:end="479:71">/* an H263EncContext                                         */</comment>



    <if_stmt pos:start="483:5" pos:end="497:5"><if pos:start="483:5" pos:end="497:5">if <condition pos:start="483:8" pos:end="485:44">(   <expr pos:start="483:12" pos:end="485:43"><name pos:start="483:12" pos:end="483:19"><name pos:start="483:12" pos:end="483:12">s</name><operator pos:start="483:13" pos:end="483:14">-&gt;</operator><name pos:start="483:15" pos:end="483:19">width</name></name>  <operator pos:start="483:22" pos:end="483:23">!=</operator> <name pos:start="483:25" pos:end="483:42"><name pos:start="483:25" pos:end="483:29">avctx</name><operator pos:start="483:30" pos:end="483:31">-&gt;</operator><name pos:start="483:32" pos:end="483:42">coded_width</name></name>

        <operator pos:start="485:9" pos:end="485:10">||</operator> <name pos:start="485:12" pos:end="485:20"><name pos:start="485:12" pos:end="485:12">s</name><operator pos:start="485:13" pos:end="485:14">-&gt;</operator><name pos:start="485:15" pos:end="485:20">height</name></name> <operator pos:start="485:22" pos:end="485:23">!=</operator> <name pos:start="485:25" pos:end="485:43"><name pos:start="485:25" pos:end="485:29">avctx</name><operator pos:start="485:30" pos:end="485:31">-&gt;</operator><name pos:start="485:32" pos:end="485:43">coded_height</name></name></expr>)</condition> <block pos:start="485:46" pos:end="497:5">{<block_content pos:start="489:9" pos:end="495:29">

        <comment type="block" pos:start="487:9" pos:end="487:54">/* H.263 could change picture size any time */</comment>

        <decl_stmt pos:start="489:9" pos:end="489:42"><decl pos:start="489:9" pos:end="489:41"><type pos:start="489:9" pos:end="489:20"><name pos:start="489:9" pos:end="489:20">ParseContext</name></type> <name pos:start="489:22" pos:end="489:23">pc</name><init pos:start="489:24" pos:end="489:41">= <expr pos:start="489:26" pos:end="489:41"><name pos:start="489:26" pos:end="489:41"><name pos:start="489:26" pos:end="489:26">s</name><operator pos:start="489:27" pos:end="489:28">-&gt;</operator><name pos:start="489:29" pos:end="489:41">parse_context</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="489:44" pos:end="489:86">//FIXME move these demuxng hack to avformat</comment>

        <expr_stmt pos:start="491:9" pos:end="491:34"><expr pos:start="491:9" pos:end="491:33"><name pos:start="491:9" pos:end="491:31"><name pos:start="491:9" pos:end="491:9">s</name><operator pos:start="491:10" pos:end="491:11">-&gt;</operator><name pos:start="491:12" pos:end="491:24">parse_context</name><operator pos:start="491:25" pos:end="491:25">.</operator><name pos:start="491:26" pos:end="491:31">buffer</name></name><operator pos:start="491:32" pos:end="491:32">=</operator><literal type="number" pos:start="491:33" pos:end="491:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="493:9" pos:end="493:26"><expr pos:start="493:9" pos:end="493:25"><call pos:start="493:9" pos:end="493:25"><name pos:start="493:9" pos:end="493:22">MPV_common_end</name><argument_list pos:start="493:23" pos:end="493:25">(<argument pos:start="493:24" pos:end="493:24"><expr pos:start="493:24" pos:end="493:24"><name pos:start="493:24" pos:end="493:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="495:9" pos:end="495:29"><expr pos:start="495:9" pos:end="495:28"><name pos:start="495:9" pos:end="495:24"><name pos:start="495:9" pos:end="495:9">s</name><operator pos:start="495:10" pos:end="495:11">-&gt;</operator><name pos:start="495:12" pos:end="495:24">parse_context</name></name><operator pos:start="495:25" pos:end="495:25">=</operator> <name pos:start="495:27" pos:end="495:28">pc</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="499:5" pos:end="507:5"><if pos:start="499:5" pos:end="507:5">if <condition pos:start="499:8" pos:end="499:32">(<expr pos:start="499:9" pos:end="499:31"><operator pos:start="499:9" pos:end="499:9">!</operator><name pos:start="499:10" pos:end="499:31"><name pos:start="499:10" pos:end="499:10">s</name><operator pos:start="499:11" pos:end="499:12">-&gt;</operator><name pos:start="499:13" pos:end="499:31">context_initialized</name></name></expr>)</condition> <block pos:start="499:34" pos:end="507:5">{<block_content pos:start="501:9" pos:end="505:19">

        <expr_stmt pos:start="501:9" pos:end="501:59"><expr pos:start="501:9" pos:end="501:58"><call pos:start="501:9" pos:end="501:58"><name pos:start="501:9" pos:end="501:30">avcodec_set_dimensions</name><argument_list pos:start="501:31" pos:end="501:58">(<argument pos:start="501:32" pos:end="501:36"><expr pos:start="501:32" pos:end="501:36"><name pos:start="501:32" pos:end="501:36">avctx</name></expr></argument>, <argument pos:start="501:39" pos:end="501:46"><expr pos:start="501:39" pos:end="501:46"><name pos:start="501:39" pos:end="501:46"><name pos:start="501:39" pos:end="501:39">s</name><operator pos:start="501:40" pos:end="501:41">-&gt;</operator><name pos:start="501:42" pos:end="501:46">width</name></name></expr></argument>, <argument pos:start="501:49" pos:end="501:57"><expr pos:start="501:49" pos:end="501:57"><name pos:start="501:49" pos:end="501:57"><name pos:start="501:49" pos:end="501:49">s</name><operator pos:start="501:50" pos:end="501:51">-&gt;</operator><name pos:start="501:52" pos:end="501:57">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <goto pos:start="505:9" pos:end="505:19">goto <name pos:start="505:14" pos:end="505:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="511:5" pos:end="513:49"><if pos:start="511:5" pos:end="513:49">if<condition pos:start="511:7" pos:end="511:100">(<expr pos:start="511:8" pos:end="511:99"><operator pos:start="511:8" pos:end="511:8">(</operator><name pos:start="511:9" pos:end="511:19"><name pos:start="511:9" pos:end="511:9">s</name><operator pos:start="511:10" pos:end="511:11">-&gt;</operator><name pos:start="511:12" pos:end="511:19">codec_id</name></name><operator pos:start="511:20" pos:end="511:21">==</operator><name pos:start="511:22" pos:end="511:34">CODEC_ID_H263</name> <operator pos:start="511:36" pos:end="511:37">||</operator> <name pos:start="511:39" pos:end="511:49"><name pos:start="511:39" pos:end="511:39">s</name><operator pos:start="511:40" pos:end="511:41">-&gt;</operator><name pos:start="511:42" pos:end="511:49">codec_id</name></name><operator pos:start="511:50" pos:end="511:51">==</operator><name pos:start="511:52" pos:end="511:65">CODEC_ID_H263P</name> <operator pos:start="511:67" pos:end="511:68">||</operator> <name pos:start="511:70" pos:end="511:80"><name pos:start="511:70" pos:end="511:70">s</name><operator pos:start="511:71" pos:end="511:72">-&gt;</operator><name pos:start="511:73" pos:end="511:80">codec_id</name></name> <operator pos:start="511:82" pos:end="511:83">==</operator> <name pos:start="511:85" pos:end="511:98">CODEC_ID_H263I</name><operator pos:start="511:99" pos:end="511:99">)</operator></expr>)</condition><block type="pseudo" pos:start="513:9" pos:end="513:49"><block_content pos:start="513:9" pos:end="513:49">

        <expr_stmt pos:start="513:9" pos:end="513:49"><expr pos:start="513:9" pos:end="513:48"><name pos:start="513:9" pos:end="513:20"><name pos:start="513:9" pos:end="513:9">s</name><operator pos:start="513:10" pos:end="513:11">-&gt;</operator><name pos:start="513:12" pos:end="513:20">gob_index</name></name> <operator pos:start="513:22" pos:end="513:22">=</operator> <call pos:start="513:24" pos:end="513:48"><name pos:start="513:24" pos:end="513:45">ff_h263_get_gob_height</name><argument_list pos:start="513:46" pos:end="513:48">(<argument pos:start="513:47" pos:end="513:47"><expr pos:start="513:47" pos:end="513:47"><name pos:start="513:47" pos:end="513:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="517:5" pos:end="517:22">// for hurry_up==5</comment>

    <expr_stmt pos:start="519:5" pos:end="519:47"><expr pos:start="519:5" pos:end="519:46"><name pos:start="519:5" pos:end="519:32"><name pos:start="519:5" pos:end="519:5">s</name><operator pos:start="519:6" pos:end="519:7">-&gt;</operator><name pos:start="519:8" pos:end="519:22">current_picture</name><operator pos:start="519:23" pos:end="519:23">.</operator><name pos:start="519:24" pos:end="519:32">pict_type</name></name><operator pos:start="519:33" pos:end="519:33">=</operator> <name pos:start="519:35" pos:end="519:46"><name pos:start="519:35" pos:end="519:35">s</name><operator pos:start="519:36" pos:end="519:37">-&gt;</operator><name pos:start="519:38" pos:end="519:46">pict_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:60"><expr pos:start="521:5" pos:end="521:59"><name pos:start="521:5" pos:end="521:32"><name pos:start="521:5" pos:end="521:5">s</name><operator pos:start="521:6" pos:end="521:7">-&gt;</operator><name pos:start="521:8" pos:end="521:22">current_picture</name><operator pos:start="521:23" pos:end="521:23">.</operator><name pos:start="521:24" pos:end="521:32">key_frame</name></name><operator pos:start="521:33" pos:end="521:33">=</operator> <name pos:start="521:35" pos:end="521:46"><name pos:start="521:35" pos:end="521:35">s</name><operator pos:start="521:36" pos:end="521:37">-&gt;</operator><name pos:start="521:38" pos:end="521:46">pict_type</name></name> <operator pos:start="521:48" pos:end="521:49">==</operator> <name pos:start="521:51" pos:end="521:59">FF_I_TYPE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="525:5" pos:end="525:57">/* skip B-frames if we don't have reference frames */</comment>

    <if_stmt pos:start="527:5" pos:end="527:117"><if pos:start="527:5" pos:end="527:117">if<condition pos:start="527:7" pos:end="527:77">(<expr pos:start="527:8" pos:end="527:76"><name pos:start="527:8" pos:end="527:26"><name pos:start="527:8" pos:end="527:8">s</name><operator pos:start="527:9" pos:end="527:10">-&gt;</operator><name pos:start="527:11" pos:end="527:26">last_picture_ptr</name></name><operator pos:start="527:27" pos:end="527:28">==</operator><name pos:start="527:29" pos:end="527:32">NULL</name> <operator pos:start="527:34" pos:end="527:35">&amp;&amp;</operator> <operator pos:start="527:37" pos:end="527:37">(</operator><name pos:start="527:38" pos:end="527:49"><name pos:start="527:38" pos:end="527:38">s</name><operator pos:start="527:39" pos:end="527:40">-&gt;</operator><name pos:start="527:41" pos:end="527:49">pict_type</name></name><operator pos:start="527:50" pos:end="527:51">==</operator><name pos:start="527:52" pos:end="527:60">FF_B_TYPE</name> <operator pos:start="527:62" pos:end="527:63">||</operator> <name pos:start="527:65" pos:end="527:75"><name pos:start="527:65" pos:end="527:65">s</name><operator pos:start="527:66" pos:end="527:67">-&gt;</operator><name pos:start="527:68" pos:end="527:75">dropable</name></name><operator pos:start="527:76" pos:end="527:76">)</operator></expr>)</condition><block type="pseudo" pos:start="527:79" pos:end="527:117"><block_content pos:start="527:79" pos:end="527:117"> <return pos:start="527:79" pos:end="527:117">return <expr pos:start="527:86" pos:end="527:116"><call pos:start="527:86" pos:end="527:116"><name pos:start="527:86" pos:end="527:103">get_consumed_bytes</name><argument_list pos:start="527:104" pos:end="527:116">(<argument pos:start="527:105" pos:end="527:105"><expr pos:start="527:105" pos:end="527:105"><name pos:start="527:105" pos:end="527:105">s</name></expr></argument>, <argument pos:start="527:108" pos:end="527:115"><expr pos:start="527:108" pos:end="527:115"><name pos:start="527:108" pos:end="527:115">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="529:5" pos:end="529:44">/* skip b frames if we are in a hurry */</comment>

    <if_stmt pos:start="531:5" pos:end="531:90"><if pos:start="531:5" pos:end="531:90">if<condition pos:start="531:7" pos:end="531:50">(<expr pos:start="531:8" pos:end="531:49"><name pos:start="531:8" pos:end="531:22"><name pos:start="531:8" pos:end="531:12">avctx</name><operator pos:start="531:13" pos:end="531:14">-&gt;</operator><name pos:start="531:15" pos:end="531:22">hurry_up</name></name> <operator pos:start="531:24" pos:end="531:25">&amp;&amp;</operator> <name pos:start="531:27" pos:end="531:38"><name pos:start="531:27" pos:end="531:27">s</name><operator pos:start="531:28" pos:end="531:29">-&gt;</operator><name pos:start="531:30" pos:end="531:38">pict_type</name></name><operator pos:start="531:39" pos:end="531:40">==</operator><name pos:start="531:41" pos:end="531:49">FF_B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="531:52" pos:end="531:90"><block_content pos:start="531:52" pos:end="531:90"> <return pos:start="531:52" pos:end="531:90">return <expr pos:start="531:59" pos:end="531:89"><call pos:start="531:59" pos:end="531:89"><name pos:start="531:59" pos:end="531:76">get_consumed_bytes</name><argument_list pos:start="531:77" pos:end="531:89">(<argument pos:start="531:78" pos:end="531:78"><expr pos:start="531:78" pos:end="531:78"><name pos:start="531:78" pos:end="531:78">s</name></expr></argument>, <argument pos:start="531:81" pos:end="531:88"><expr pos:start="531:81" pos:end="531:88"><name pos:start="531:81" pos:end="531:88">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="533:5" pos:end="539:47"><if pos:start="533:5" pos:end="539:47">if<condition pos:start="533:7" pos:end="537:46">(   <expr pos:start="533:11" pos:end="537:45"><operator pos:start="533:11" pos:end="533:11">(</operator><name pos:start="533:12" pos:end="533:28"><name pos:start="533:12" pos:end="533:16">avctx</name><operator pos:start="533:17" pos:end="533:18">-&gt;</operator><name pos:start="533:19" pos:end="533:28">skip_frame</name></name> <operator pos:start="533:30" pos:end="533:31">&gt;=</operator> <name pos:start="533:33" pos:end="533:48">AVDISCARD_NONREF</name> <operator pos:start="533:50" pos:end="533:51">&amp;&amp;</operator> <name pos:start="533:53" pos:end="533:64"><name pos:start="533:53" pos:end="533:53">s</name><operator pos:start="533:54" pos:end="533:55">-&gt;</operator><name pos:start="533:56" pos:end="533:64">pict_type</name></name><operator pos:start="533:65" pos:end="533:66">==</operator><name pos:start="533:67" pos:end="533:75">FF_B_TYPE</name><operator pos:start="533:76" pos:end="533:76">)</operator>

       <operator pos:start="535:8" pos:end="535:9">||</operator> <operator pos:start="535:11" pos:end="535:11">(</operator><name pos:start="535:12" pos:end="535:28"><name pos:start="535:12" pos:end="535:16">avctx</name><operator pos:start="535:17" pos:end="535:18">-&gt;</operator><name pos:start="535:19" pos:end="535:28">skip_frame</name></name> <operator pos:start="535:30" pos:end="535:31">&gt;=</operator> <name pos:start="535:33" pos:end="535:48">AVDISCARD_NONKEY</name> <operator pos:start="535:50" pos:end="535:51">&amp;&amp;</operator> <name pos:start="535:53" pos:end="535:64"><name pos:start="535:53" pos:end="535:53">s</name><operator pos:start="535:54" pos:end="535:55">-&gt;</operator><name pos:start="535:56" pos:end="535:64">pict_type</name></name><operator pos:start="535:65" pos:end="535:66">!=</operator><name pos:start="535:67" pos:end="535:75">FF_I_TYPE</name><operator pos:start="535:76" pos:end="535:76">)</operator>

       <operator pos:start="537:8" pos:end="537:9">||</operator>  <name pos:start="537:12" pos:end="537:28"><name pos:start="537:12" pos:end="537:16">avctx</name><operator pos:start="537:17" pos:end="537:18">-&gt;</operator><name pos:start="537:19" pos:end="537:28">skip_frame</name></name> <operator pos:start="537:30" pos:end="537:31">&gt;=</operator> <name pos:start="537:33" pos:end="537:45">AVDISCARD_ALL</name></expr>)</condition><block type="pseudo" pos:start="539:9" pos:end="539:47"><block_content pos:start="539:9" pos:end="539:47">

        <return pos:start="539:9" pos:end="539:47">return <expr pos:start="539:16" pos:end="539:46"><call pos:start="539:16" pos:end="539:46"><name pos:start="539:16" pos:end="539:33">get_consumed_bytes</name><argument_list pos:start="539:34" pos:end="539:46">(<argument pos:start="539:35" pos:end="539:35"><expr pos:start="539:35" pos:end="539:35"><name pos:start="539:35" pos:end="539:35">s</name></expr></argument>, <argument pos:start="539:38" pos:end="539:45"><expr pos:start="539:38" pos:end="539:45"><name pos:start="539:38" pos:end="539:45">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="541:5" pos:end="541:49">/* skip everything if we are in a hurry&gt;=5 */</comment>

    <if_stmt pos:start="543:5" pos:end="543:66"><if pos:start="543:5" pos:end="543:66">if<condition pos:start="543:7" pos:end="543:26">(<expr pos:start="543:8" pos:end="543:25"><name pos:start="543:8" pos:end="543:22"><name pos:start="543:8" pos:end="543:12">avctx</name><operator pos:start="543:13" pos:end="543:14">-&gt;</operator><name pos:start="543:15" pos:end="543:22">hurry_up</name></name><operator pos:start="543:23" pos:end="543:24">&gt;=</operator><literal type="number" pos:start="543:25" pos:end="543:25">5</literal></expr>)</condition><block type="pseudo" pos:start="543:28" pos:end="543:66"><block_content pos:start="543:28" pos:end="543:66"> <return pos:start="543:28" pos:end="543:66">return <expr pos:start="543:35" pos:end="543:65"><call pos:start="543:35" pos:end="543:65"><name pos:start="543:35" pos:end="543:52">get_consumed_bytes</name><argument_list pos:start="543:53" pos:end="543:65">(<argument pos:start="543:54" pos:end="543:54"><expr pos:start="543:54" pos:end="543:54"><name pos:start="543:54" pos:end="543:54">s</name></expr></argument>, <argument pos:start="543:57" pos:end="543:64"><expr pos:start="543:57" pos:end="543:64"><name pos:start="543:57" pos:end="543:64">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="547:5" pos:end="557:5"><if pos:start="547:5" pos:end="557:5">if<condition pos:start="547:7" pos:end="547:31">(<expr pos:start="547:8" pos:end="547:30"><name pos:start="547:8" pos:end="547:30"><name pos:start="547:8" pos:end="547:8">s</name><operator pos:start="547:9" pos:end="547:10">-&gt;</operator><name pos:start="547:11" pos:end="547:30">next_p_frame_damaged</name></name></expr>)</condition><block pos:start="547:32" pos:end="557:5">{<block_content pos:start="549:9" pos:end="555:38">

        <if_stmt pos:start="549:9" pos:end="555:38"><if pos:start="549:9" pos:end="551:51">if<condition pos:start="549:11" pos:end="549:35">(<expr pos:start="549:12" pos:end="549:34"><name pos:start="549:12" pos:end="549:23"><name pos:start="549:12" pos:end="549:12">s</name><operator pos:start="549:13" pos:end="549:14">-&gt;</operator><name pos:start="549:15" pos:end="549:23">pict_type</name></name><operator pos:start="549:24" pos:end="549:25">==</operator><name pos:start="549:26" pos:end="549:34">FF_B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="551:13" pos:end="551:51"><block_content pos:start="551:13" pos:end="551:51">

            <return pos:start="551:13" pos:end="551:51">return <expr pos:start="551:20" pos:end="551:50"><call pos:start="551:20" pos:end="551:50"><name pos:start="551:20" pos:end="551:37">get_consumed_bytes</name><argument_list pos:start="551:38" pos:end="551:50">(<argument pos:start="551:39" pos:end="551:39"><expr pos:start="551:39" pos:end="551:39"><name pos:start="551:39" pos:end="551:39">s</name></expr></argument>, <argument pos:start="551:42" pos:end="551:49"><expr pos:start="551:42" pos:end="551:49"><name pos:start="551:42" pos:end="551:49">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

        <else pos:start="553:9" pos:end="555:38">else<block type="pseudo" pos:start="555:13" pos:end="555:38"><block_content pos:start="555:13" pos:end="555:38">

            <expr_stmt pos:start="555:13" pos:end="555:38"><expr pos:start="555:13" pos:end="555:37"><name pos:start="555:13" pos:end="555:35"><name pos:start="555:13" pos:end="555:13">s</name><operator pos:start="555:14" pos:end="555:15">-&gt;</operator><name pos:start="555:16" pos:end="555:35">next_p_frame_damaged</name></name><operator pos:start="555:36" pos:end="555:36">=</operator><literal type="number" pos:start="555:37" pos:end="555:37">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="561:5" pos:end="579:5"><if pos:start="561:5" pos:end="567:5">if<condition pos:start="561:7" pos:end="561:72">(<expr pos:start="561:8" pos:end="561:71"><operator pos:start="561:8" pos:end="561:8">(</operator><name pos:start="561:9" pos:end="561:24"><name pos:start="561:9" pos:end="561:9">s</name><operator pos:start="561:10" pos:end="561:11">-&gt;</operator><name pos:start="561:12" pos:end="561:16">avctx</name><operator pos:start="561:17" pos:end="561:18">-&gt;</operator><name pos:start="561:19" pos:end="561:24">flags2</name></name> <operator pos:start="561:26" pos:end="561:26">&amp;</operator> <name pos:start="561:28" pos:end="561:43">CODEC_FLAG2_FAST</name><operator pos:start="561:44" pos:end="561:44">)</operator> <operator pos:start="561:46" pos:end="561:47">&amp;&amp;</operator> <name pos:start="561:49" pos:end="561:60"><name pos:start="561:49" pos:end="561:49">s</name><operator pos:start="561:50" pos:end="561:51">-&gt;</operator><name pos:start="561:52" pos:end="561:60">pict_type</name></name><operator pos:start="561:61" pos:end="561:62">==</operator><name pos:start="561:63" pos:end="561:71">FF_B_TYPE</name></expr>)</condition><block pos:start="561:73" pos:end="567:5">{<block_content pos:start="563:9" pos:end="565:56">

        <expr_stmt pos:start="563:9" pos:end="563:56"><expr pos:start="563:9" pos:end="563:55"><name pos:start="563:9" pos:end="563:22"><name pos:start="563:9" pos:end="563:9">s</name><operator pos:start="563:10" pos:end="563:11">-&gt;</operator><name pos:start="563:12" pos:end="563:13">me</name><operator pos:start="563:14" pos:end="563:14">.</operator><name pos:start="563:15" pos:end="563:22">qpel_put</name></name><operator pos:start="563:23" pos:end="563:23">=</operator> <name pos:start="563:25" pos:end="563:55"><name pos:start="563:25" pos:end="563:25">s</name><operator pos:start="563:26" pos:end="563:27">-&gt;</operator><name pos:start="563:28" pos:end="563:30">dsp</name><operator pos:start="563:31" pos:end="563:31">.</operator><name pos:start="563:32" pos:end="563:55">put_2tap_qpel_pixels_tab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="565:9" pos:end="565:56"><expr pos:start="565:9" pos:end="565:55"><name pos:start="565:9" pos:end="565:22"><name pos:start="565:9" pos:end="565:9">s</name><operator pos:start="565:10" pos:end="565:11">-&gt;</operator><name pos:start="565:12" pos:end="565:13">me</name><operator pos:start="565:14" pos:end="565:14">.</operator><name pos:start="565:15" pos:end="565:22">qpel_avg</name></name><operator pos:start="565:23" pos:end="565:23">=</operator> <name pos:start="565:25" pos:end="565:55"><name pos:start="565:25" pos:end="565:25">s</name><operator pos:start="565:26" pos:end="565:27">-&gt;</operator><name pos:start="565:28" pos:end="565:30">dsp</name><operator pos:start="565:31" pos:end="565:31">.</operator><name pos:start="565:32" pos:end="565:55">avg_2tap_qpel_pixels_tab</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="567:6" pos:end="573:5">else if<condition pos:start="567:13" pos:end="567:58">(<expr pos:start="567:14" pos:end="567:57"><operator pos:start="567:14" pos:end="567:14">(</operator><operator pos:start="567:15" pos:end="567:15">!</operator><name pos:start="567:16" pos:end="567:29"><name pos:start="567:16" pos:end="567:16">s</name><operator pos:start="567:17" pos:end="567:18">-&gt;</operator><name pos:start="567:19" pos:end="567:29">no_rounding</name></name><operator pos:start="567:30" pos:end="567:30">)</operator> <operator pos:start="567:32" pos:end="567:33">||</operator> <name pos:start="567:35" pos:end="567:46"><name pos:start="567:35" pos:end="567:35">s</name><operator pos:start="567:36" pos:end="567:37">-&gt;</operator><name pos:start="567:38" pos:end="567:46">pict_type</name></name><operator pos:start="567:47" pos:end="567:48">==</operator><name pos:start="567:49" pos:end="567:57">FF_B_TYPE</name></expr>)</condition><block pos:start="567:59" pos:end="573:5">{<block_content pos:start="569:9" pos:end="571:51">

        <expr_stmt pos:start="569:9" pos:end="569:51"><expr pos:start="569:9" pos:end="569:50"><name pos:start="569:9" pos:end="569:22"><name pos:start="569:9" pos:end="569:9">s</name><operator pos:start="569:10" pos:end="569:11">-&gt;</operator><name pos:start="569:12" pos:end="569:13">me</name><operator pos:start="569:14" pos:end="569:14">.</operator><name pos:start="569:15" pos:end="569:22">qpel_put</name></name><operator pos:start="569:23" pos:end="569:23">=</operator> <name pos:start="569:25" pos:end="569:50"><name pos:start="569:25" pos:end="569:25">s</name><operator pos:start="569:26" pos:end="569:27">-&gt;</operator><name pos:start="569:28" pos:end="569:30">dsp</name><operator pos:start="569:31" pos:end="569:31">.</operator><name pos:start="569:32" pos:end="569:50">put_qpel_pixels_tab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="571:9" pos:end="571:51"><expr pos:start="571:9" pos:end="571:50"><name pos:start="571:9" pos:end="571:22"><name pos:start="571:9" pos:end="571:9">s</name><operator pos:start="571:10" pos:end="571:11">-&gt;</operator><name pos:start="571:12" pos:end="571:13">me</name><operator pos:start="571:14" pos:end="571:14">.</operator><name pos:start="571:15" pos:end="571:22">qpel_avg</name></name><operator pos:start="571:23" pos:end="571:23">=</operator> <name pos:start="571:25" pos:end="571:50"><name pos:start="571:25" pos:end="571:25">s</name><operator pos:start="571:26" pos:end="571:27">-&gt;</operator><name pos:start="571:28" pos:end="571:30">dsp</name><operator pos:start="571:31" pos:end="571:31">.</operator><name pos:start="571:32" pos:end="571:50">avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="573:6" pos:end="579:5">else<block pos:start="573:10" pos:end="579:5">{<block_content pos:start="575:9" pos:end="577:51">

        <expr_stmt pos:start="575:9" pos:end="575:58"><expr pos:start="575:9" pos:end="575:57"><name pos:start="575:9" pos:end="575:22"><name pos:start="575:9" pos:end="575:9">s</name><operator pos:start="575:10" pos:end="575:11">-&gt;</operator><name pos:start="575:12" pos:end="575:13">me</name><operator pos:start="575:14" pos:end="575:14">.</operator><name pos:start="575:15" pos:end="575:22">qpel_put</name></name><operator pos:start="575:23" pos:end="575:23">=</operator> <name pos:start="575:25" pos:end="575:57"><name pos:start="575:25" pos:end="575:25">s</name><operator pos:start="575:26" pos:end="575:27">-&gt;</operator><name pos:start="575:28" pos:end="575:30">dsp</name><operator pos:start="575:31" pos:end="575:31">.</operator><name pos:start="575:32" pos:end="575:57">put_no_rnd_qpel_pixels_tab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="577:9" pos:end="577:51"><expr pos:start="577:9" pos:end="577:50"><name pos:start="577:9" pos:end="577:22"><name pos:start="577:9" pos:end="577:9">s</name><operator pos:start="577:10" pos:end="577:11">-&gt;</operator><name pos:start="577:12" pos:end="577:13">me</name><operator pos:start="577:14" pos:end="577:14">.</operator><name pos:start="577:15" pos:end="577:22">qpel_avg</name></name><operator pos:start="577:23" pos:end="577:23">=</operator> <name pos:start="577:25" pos:end="577:50"><name pos:start="577:25" pos:end="577:25">s</name><operator pos:start="577:26" pos:end="577:27">-&gt;</operator><name pos:start="577:28" pos:end="577:30">dsp</name><operator pos:start="577:31" pos:end="577:31">.</operator><name pos:start="577:32" pos:end="577:50">avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="583:5" pos:end="585:18"><if pos:start="583:5" pos:end="585:18">if<condition pos:start="583:7" pos:end="583:37">(<expr pos:start="583:8" pos:end="583:36"><call pos:start="583:8" pos:end="583:32"><name pos:start="583:8" pos:end="583:22">MPV_frame_start</name><argument_list pos:start="583:23" pos:end="583:32">(<argument pos:start="583:24" pos:end="583:24"><expr pos:start="583:24" pos:end="583:24"><name pos:start="583:24" pos:end="583:24">s</name></expr></argument>, <argument pos:start="583:27" pos:end="583:31"><expr pos:start="583:27" pos:end="583:31"><name pos:start="583:27" pos:end="583:31">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="583:34" pos:end="583:34">&lt;</operator> <literal type="number" pos:start="583:36" pos:end="583:36">0</literal></expr>)</condition><block type="pseudo" pos:start="585:9" pos:end="585:18"><block_content pos:start="585:9" pos:end="585:18">

        <return pos:start="585:9" pos:end="585:18">return <expr pos:start="585:16" pos:end="585:17"><operator pos:start="585:16" pos:end="585:16">-</operator><literal type="number" pos:start="585:17" pos:end="585:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="589:5" pos:end="600:0"><if pos:start="589:5" pos:end="600:0">if <condition pos:start="589:8" pos:end="589:23">(<expr pos:start="589:9" pos:end="589:22"><name pos:start="589:9" pos:end="589:22"><name pos:start="589:9" pos:end="589:13">avctx</name><operator pos:start="589:14" pos:end="589:15">-&gt;</operator><name pos:start="589:16" pos:end="589:22">hwaccel</name></name></expr>)</condition> <block pos:start="589:25" pos:end="600:0">{<block_content pos:start="591:9" pos:end="593:22">

        <if_stmt pos:start="591:9" pos:end="593:22"><if pos:start="591:9" pos:end="593:22">if <condition pos:start="591:12" pos:end="591:66">(<expr pos:start="591:13" pos:end="591:65"><call pos:start="591:13" pos:end="591:61"><name pos:start="591:13" pos:end="591:39"><name pos:start="591:13" pos:end="591:17">avctx</name><operator pos:start="591:18" pos:end="591:19">-&gt;</operator><name pos:start="591:20" pos:end="591:26">hwaccel</name><operator pos:start="591:27" pos:end="591:28">-&gt;</operator><name pos:start="591:29" pos:end="591:39">start_frame</name></name><argument_list pos:start="591:40" pos:end="591:61">(<argument pos:start="591:41" pos:end="591:45"><expr pos:start="591:41" pos:end="591:45"><name pos:start="591:41" pos:end="591:45">avctx</name></expr></argument>, <argument pos:start="591:48" pos:end="591:50"><expr pos:start="591:48" pos:end="591:50"><name pos:start="591:48" pos:end="591:50">buf</name></expr></argument>, <argument pos:start="591:53" pos:end="591:60"><expr pos:start="591:53" pos:end="591:60"><name pos:start="591:53" pos:end="591:60">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="591:63" pos:end="591:63">&lt;</operator> <literal type="number" pos:start="591:65" pos:end="591:65">0</literal></expr>)</condition><block type="pseudo" pos:start="593:13" pos:end="593:22"><block_content pos:start="593:13" pos:end="593:22">

            <return pos:start="593:13" pos:end="593:22">return <expr pos:start="593:20" pos:end="593:21"><operator pos:start="593:20" pos:end="593:20">-</operator><literal type="number" pos:start="593:21" pos:end="593:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="599:1" pos:end="599:12">#<cpp:directive pos:start="599:2" pos:end="599:6">ifdef</cpp:directive> <name pos:start="599:8" pos:end="599:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="601:5" pos:end="604:0"><expr pos:start="601:5" pos:end="601:57"><call pos:start="601:5" pos:end="601:57"><name pos:start="601:5" pos:end="601:10">av_log</name><argument_list pos:start="601:11" pos:end="601:57">(<argument pos:start="601:12" pos:end="601:16"><expr pos:start="601:12" pos:end="601:16"><name pos:start="601:12" pos:end="601:16">avctx</name></expr></argument>, <argument pos:start="601:19" pos:end="601:30"><expr pos:start="601:19" pos:end="601:30"><name pos:start="601:19" pos:end="601:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="601:33" pos:end="601:45"><expr pos:start="601:33" pos:end="601:45"><literal type="string" pos:start="601:33" pos:end="601:45">"qscale=%d\n"</literal></expr></argument>, <argument pos:start="601:48" pos:end="601:56"><expr pos:start="601:48" pos:end="601:56"><name pos:start="601:48" pos:end="601:56"><name pos:start="601:48" pos:end="601:48">s</name><operator pos:start="601:49" pos:end="601:50">-&gt;</operator><name pos:start="601:51" pos:end="601:56">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="603:1" pos:end="603:6">#<cpp:directive pos:start="603:2" pos:end="603:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="607:5" pos:end="607:25"><expr pos:start="607:5" pos:end="607:24"><call pos:start="607:5" pos:end="607:24"><name pos:start="607:5" pos:end="607:21">ff_er_frame_start</name><argument_list pos:start="607:22" pos:end="607:24">(<argument pos:start="607:23" pos:end="607:23"><expr pos:start="607:23" pos:end="607:23"><name pos:start="607:23" pos:end="607:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="611:5" pos:end="611:111">//the second part of the wmv2 header contains the MB skip bits which are stored in current_picture-&gt;mb_type</comment>

    <comment type="line" pos:start="613:5" pos:end="613:53">//which is not available before MPV_frame_start()</comment>

    <if_stmt pos:start="615:5" pos:end="623:5"><if pos:start="615:5" pos:end="623:5">if <condition pos:start="615:8" pos:end="615:53">(<expr pos:start="615:9" pos:end="615:52"><name pos:start="615:9" pos:end="615:27">CONFIG_WMV2_DECODER</name> <operator pos:start="615:29" pos:end="615:30">&amp;&amp;</operator> <name pos:start="615:32" pos:end="615:49"><name pos:start="615:32" pos:end="615:32">s</name><operator pos:start="615:33" pos:end="615:34">-&gt;</operator><name pos:start="615:35" pos:end="615:49">msmpeg4_version</name></name><operator pos:start="615:50" pos:end="615:51">==</operator><literal type="number" pos:start="615:52" pos:end="615:52">5</literal></expr>)</condition><block pos:start="615:54" pos:end="623:5">{<block_content pos:start="617:9" pos:end="621:40">

        <expr_stmt pos:start="617:9" pos:end="617:57"><expr pos:start="617:9" pos:end="617:56"><name pos:start="617:9" pos:end="617:11">ret</name> <operator pos:start="617:13" pos:end="617:13">=</operator> <call pos:start="617:15" pos:end="617:56"><name pos:start="617:15" pos:end="617:53">ff_wmv2_decode_secondary_picture_header</name><argument_list pos:start="617:54" pos:end="617:56">(<argument pos:start="617:55" pos:end="617:55"><expr pos:start="617:55" pos:end="617:55"><name pos:start="617:55" pos:end="617:55">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="619:9" pos:end="619:29"><if pos:start="619:9" pos:end="619:29">if<condition pos:start="619:11" pos:end="619:17">(<expr pos:start="619:12" pos:end="619:16"><name pos:start="619:12" pos:end="619:14">ret</name><operator pos:start="619:15" pos:end="619:15">&lt;</operator><literal type="number" pos:start="619:16" pos:end="619:16">0</literal></expr>)</condition><block type="pseudo" pos:start="619:19" pos:end="619:29"><block_content pos:start="619:19" pos:end="619:29"> <return pos:start="619:19" pos:end="619:29">return <expr pos:start="619:26" pos:end="619:28"><name pos:start="619:26" pos:end="619:28">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="621:9" pos:end="621:40"><if pos:start="621:9" pos:end="621:40">if<condition pos:start="621:11" pos:end="621:18">(<expr pos:start="621:12" pos:end="621:17"><name pos:start="621:12" pos:end="621:14">ret</name><operator pos:start="621:15" pos:end="621:16">==</operator><literal type="number" pos:start="621:17" pos:end="621:17">1</literal></expr>)</condition><block type="pseudo" pos:start="621:20" pos:end="621:40"><block_content pos:start="621:20" pos:end="621:40"> <goto pos:start="621:20" pos:end="621:40">goto <name pos:start="621:25" pos:end="621:39">intrax8_decoded</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="627:5" pos:end="627:32">/* decode each macroblock */</comment>

    <expr_stmt pos:start="629:5" pos:end="629:14"><expr pos:start="629:5" pos:end="629:13"><name pos:start="629:5" pos:end="629:11"><name pos:start="629:5" pos:end="629:5">s</name><operator pos:start="629:6" pos:end="629:7">-&gt;</operator><name pos:start="629:8" pos:end="629:11">mb_x</name></name><operator pos:start="629:12" pos:end="629:12">=</operator><literal type="number" pos:start="629:13" pos:end="629:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="631:5" pos:end="631:14"><expr pos:start="631:5" pos:end="631:13"><name pos:start="631:5" pos:end="631:11"><name pos:start="631:5" pos:end="631:5">s</name><operator pos:start="631:6" pos:end="631:7">-&gt;</operator><name pos:start="631:8" pos:end="631:11">mb_y</name></name><operator pos:start="631:12" pos:end="631:12">=</operator><literal type="number" pos:start="631:13" pos:end="631:13">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="635:5" pos:end="635:20"><expr pos:start="635:5" pos:end="635:19"><call pos:start="635:5" pos:end="635:19"><name pos:start="635:5" pos:end="635:16">decode_slice</name><argument_list pos:start="635:17" pos:end="635:19">(<argument pos:start="635:18" pos:end="635:18"><expr pos:start="635:18" pos:end="635:18"><name pos:start="635:18" pos:end="635:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="637:5" pos:end="663:5">while<condition pos:start="637:10" pos:end="637:31">(<expr pos:start="637:11" pos:end="637:30"><name pos:start="637:11" pos:end="637:17"><name pos:start="637:11" pos:end="637:11">s</name><operator pos:start="637:12" pos:end="637:13">-&gt;</operator><name pos:start="637:14" pos:end="637:17">mb_y</name></name><operator pos:start="637:18" pos:end="637:18">&lt;</operator><name pos:start="637:19" pos:end="637:30"><name pos:start="637:19" pos:end="637:19">s</name><operator pos:start="637:20" pos:end="637:21">-&gt;</operator><name pos:start="637:22" pos:end="637:30">mb_height</name></name></expr>)</condition><block pos:start="637:32" pos:end="663:5">{<block_content pos:start="639:9" pos:end="661:24">

        <if_stmt pos:start="639:9" pos:end="651:9"><if pos:start="639:9" pos:end="645:9">if<condition pos:start="639:11" pos:end="639:30">(<expr pos:start="639:12" pos:end="639:29"><name pos:start="639:12" pos:end="639:29"><name pos:start="639:12" pos:end="639:12">s</name><operator pos:start="639:13" pos:end="639:14">-&gt;</operator><name pos:start="639:15" pos:end="639:29">msmpeg4_version</name></name></expr>)</condition><block pos:start="639:31" pos:end="645:9">{<block_content pos:start="641:13" pos:end="643:22">

            <if_stmt pos:start="641:13" pos:end="643:22"><if pos:start="641:13" pos:end="643:22">if<condition pos:start="641:15" pos:end="641:127">(<expr pos:start="641:16" pos:end="641:126"><name pos:start="641:16" pos:end="641:30"><name pos:start="641:16" pos:end="641:16">s</name><operator pos:start="641:17" pos:end="641:18">-&gt;</operator><name pos:start="641:19" pos:end="641:30">slice_height</name></name><operator pos:start="641:31" pos:end="641:32">==</operator><literal type="number" pos:start="641:33" pos:end="641:33">0</literal> <operator pos:start="641:35" pos:end="641:36">||</operator> <name pos:start="641:38" pos:end="641:44"><name pos:start="641:38" pos:end="641:38">s</name><operator pos:start="641:39" pos:end="641:40">-&gt;</operator><name pos:start="641:41" pos:end="641:44">mb_x</name></name><operator pos:start="641:45" pos:end="641:46">!=</operator><literal type="number" pos:start="641:47" pos:end="641:47">0</literal> <operator pos:start="641:49" pos:end="641:50">||</operator> <operator pos:start="641:52" pos:end="641:52">(</operator><name pos:start="641:53" pos:end="641:59"><name pos:start="641:53" pos:end="641:53">s</name><operator pos:start="641:54" pos:end="641:55">-&gt;</operator><name pos:start="641:56" pos:end="641:59">mb_y</name></name><operator pos:start="641:60" pos:end="641:60">%</operator><name pos:start="641:61" pos:end="641:75"><name pos:start="641:61" pos:end="641:61">s</name><operator pos:start="641:62" pos:end="641:63">-&gt;</operator><name pos:start="641:64" pos:end="641:75">slice_height</name></name><operator pos:start="641:76" pos:end="641:76">)</operator><operator pos:start="641:77" pos:end="641:78">!=</operator><literal type="number" pos:start="641:79" pos:end="641:79">0</literal> <operator pos:start="641:81" pos:end="641:82">||</operator> <call pos:start="641:84" pos:end="641:105"><name pos:start="641:84" pos:end="641:97">get_bits_count</name><argument_list pos:start="641:98" pos:end="641:105">(<argument pos:start="641:99" pos:end="641:104"><expr pos:start="641:99" pos:end="641:104"><operator pos:start="641:99" pos:end="641:99">&amp;</operator><name pos:start="641:100" pos:end="641:104"><name pos:start="641:100" pos:end="641:100">s</name><operator pos:start="641:101" pos:end="641:102">-&gt;</operator><name pos:start="641:103" pos:end="641:104">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="641:107" pos:end="641:107">&gt;</operator> <name pos:start="641:109" pos:end="641:126"><name pos:start="641:109" pos:end="641:109">s</name><operator pos:start="641:110" pos:end="641:111">-&gt;</operator><name pos:start="641:112" pos:end="641:113">gb</name><operator pos:start="641:114" pos:end="641:114">.</operator><name pos:start="641:115" pos:end="641:126">size_in_bits</name></name></expr>)</condition><block type="pseudo" pos:start="643:17" pos:end="643:22"><block_content pos:start="643:17" pos:end="643:22">

                <break pos:start="643:17" pos:end="643:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if><else pos:start="645:10" pos:end="651:9">else<block pos:start="645:14" pos:end="651:9">{<block_content pos:start="647:13" pos:end="649:22">

            <if_stmt pos:start="647:13" pos:end="649:22"><if pos:start="647:13" pos:end="649:22">if<condition pos:start="647:15" pos:end="647:35">(<expr pos:start="647:16" pos:end="647:34"><call pos:start="647:16" pos:end="647:32"><name pos:start="647:16" pos:end="647:29">ff_h263_resync</name><argument_list pos:start="647:30" pos:end="647:32">(<argument pos:start="647:31" pos:end="647:31"><expr pos:start="647:31" pos:end="647:31"><name pos:start="647:31" pos:end="647:31">s</name></expr></argument>)</argument_list></call><operator pos:start="647:33" pos:end="647:33">&lt;</operator><literal type="number" pos:start="647:34" pos:end="647:34">0</literal></expr>)</condition><block type="pseudo" pos:start="649:17" pos:end="649:22"><block_content pos:start="649:17" pos:end="649:22">

                <break pos:start="649:17" pos:end="649:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="655:9" pos:end="657:38"><if pos:start="655:9" pos:end="657:38">if<condition pos:start="655:11" pos:end="655:48">(<expr pos:start="655:12" pos:end="655:47"><name pos:start="655:12" pos:end="655:29"><name pos:start="655:12" pos:end="655:12">s</name><operator pos:start="655:13" pos:end="655:14">-&gt;</operator><name pos:start="655:15" pos:end="655:29">msmpeg4_version</name></name><operator pos:start="655:30" pos:end="655:30">&lt;</operator><literal type="number" pos:start="655:31" pos:end="655:31">4</literal> <operator pos:start="655:33" pos:end="655:34">&amp;&amp;</operator> <name pos:start="655:36" pos:end="655:47"><name pos:start="655:36" pos:end="655:36">s</name><operator pos:start="655:37" pos:end="655:38">-&gt;</operator><name pos:start="655:39" pos:end="655:47">h263_pred</name></name></expr>)</condition><block type="pseudo" pos:start="657:13" pos:end="657:38"><block_content pos:start="657:13" pos:end="657:38">

            <expr_stmt pos:start="657:13" pos:end="657:38"><expr pos:start="657:13" pos:end="657:37"><call pos:start="657:13" pos:end="657:37"><name pos:start="657:13" pos:end="657:34">ff_mpeg4_clean_buffers</name><argument_list pos:start="657:35" pos:end="657:37">(<argument pos:start="657:36" pos:end="657:36"><expr pos:start="657:36" pos:end="657:36"><name pos:start="657:36" pos:end="657:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="661:9" pos:end="661:24"><expr pos:start="661:9" pos:end="661:23"><call pos:start="661:9" pos:end="661:23"><name pos:start="661:9" pos:end="661:20">decode_slice</name><argument_list pos:start="661:21" pos:end="661:23">(<argument pos:start="661:22" pos:end="661:22"><expr pos:start="661:22" pos:end="661:22"><name pos:start="661:22" pos:end="661:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="667:5" pos:end="673:9"><if pos:start="667:5" pos:end="673:9">if <condition pos:start="667:8" pos:end="667:75">(<expr pos:start="667:9" pos:end="667:74"><name pos:start="667:9" pos:end="667:23"><name pos:start="667:9" pos:end="667:9">s</name><operator pos:start="667:10" pos:end="667:11">-&gt;</operator><name pos:start="667:12" pos:end="667:23">h263_msmpeg4</name></name> <operator pos:start="667:25" pos:end="667:26">&amp;&amp;</operator> <name pos:start="667:28" pos:end="667:45"><name pos:start="667:28" pos:end="667:28">s</name><operator pos:start="667:29" pos:end="667:30">-&gt;</operator><name pos:start="667:31" pos:end="667:45">msmpeg4_version</name></name><operator pos:start="667:46" pos:end="667:46">&lt;</operator><literal type="number" pos:start="667:47" pos:end="667:47">4</literal> <operator pos:start="667:49" pos:end="667:50">&amp;&amp;</operator> <name pos:start="667:52" pos:end="667:63"><name pos:start="667:52" pos:end="667:52">s</name><operator pos:start="667:53" pos:end="667:54">-&gt;</operator><name pos:start="667:55" pos:end="667:63">pict_type</name></name><operator pos:start="667:64" pos:end="667:65">==</operator><name pos:start="667:66" pos:end="667:74">FF_I_TYPE</name></expr>)</condition><block type="pseudo" pos:start="669:9" pos:end="673:9"><block_content pos:start="669:9" pos:end="673:9">

        <if_stmt pos:start="669:9" pos:end="673:9"><if pos:start="669:9" pos:end="673:9">if<condition pos:start="669:11" pos:end="669:81">(<expr pos:start="669:12" pos:end="669:80"><operator pos:start="669:12" pos:end="669:12">!</operator><name pos:start="669:13" pos:end="669:34">CONFIG_MSMPEG4_DECODER</name> <operator pos:start="669:36" pos:end="669:37">||</operator> <call pos:start="669:39" pos:end="669:76"><name pos:start="669:39" pos:end="669:63">msmpeg4_decode_ext_header</name><argument_list pos:start="669:64" pos:end="669:76">(<argument pos:start="669:65" pos:end="669:65"><expr pos:start="669:65" pos:end="669:65"><name pos:start="669:65" pos:end="669:65">s</name></expr></argument>, <argument pos:start="669:68" pos:end="669:75"><expr pos:start="669:68" pos:end="669:75"><name pos:start="669:68" pos:end="669:75">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="669:78" pos:end="669:78">&lt;</operator> <literal type="number" pos:start="669:80" pos:end="669:80">0</literal></expr>)</condition><block pos:start="669:82" pos:end="673:9">{<block_content pos:start="671:13" pos:end="671:75">

            <expr_stmt pos:start="671:13" pos:end="671:75"><expr pos:start="671:13" pos:end="671:74"><name pos:start="671:13" pos:end="671:46"><name pos:start="671:13" pos:end="671:13">s</name><operator pos:start="671:14" pos:end="671:15">-&gt;</operator><name pos:start="671:16" pos:end="671:33">error_status_table</name><index pos:start="671:34" pos:end="671:46">[<expr pos:start="671:35" pos:end="671:45"><name pos:start="671:35" pos:end="671:43"><name pos:start="671:35" pos:end="671:35">s</name><operator pos:start="671:36" pos:end="671:37">-&gt;</operator><name pos:start="671:38" pos:end="671:43">mb_num</name></name><operator pos:start="671:44" pos:end="671:44">-</operator><literal type="number" pos:start="671:45" pos:end="671:45">1</literal></expr>]</index></name><operator pos:start="671:47" pos:end="671:47">=</operator> <name pos:start="671:49" pos:end="671:56">AC_ERROR</name><operator pos:start="671:57" pos:end="671:57">|</operator><name pos:start="671:58" pos:end="671:65">DC_ERROR</name><operator pos:start="671:66" pos:end="671:66">|</operator><name pos:start="671:67" pos:end="671:74">MV_ERROR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="677:5" pos:end="677:43">/* divx 5.01+ bistream reorder stuff */</comment>

    <if_stmt pos:start="679:5" pos:end="735:5"><if pos:start="679:5" pos:end="735:5">if<condition pos:start="679:7" pos:end="679:84">(<expr pos:start="679:8" pos:end="679:83"><name pos:start="679:8" pos:end="679:18"><name pos:start="679:8" pos:end="679:8">s</name><operator pos:start="679:9" pos:end="679:10">-&gt;</operator><name pos:start="679:11" pos:end="679:18">codec_id</name></name><operator pos:start="679:19" pos:end="679:20">==</operator><name pos:start="679:21" pos:end="679:34">CODEC_ID_MPEG4</name> <operator pos:start="679:36" pos:end="679:37">&amp;&amp;</operator> <name pos:start="679:39" pos:end="679:62"><name pos:start="679:39" pos:end="679:39">s</name><operator pos:start="679:40" pos:end="679:41">-&gt;</operator><name pos:start="679:42" pos:end="679:62">bitstream_buffer_size</name></name><operator pos:start="679:63" pos:end="679:64">==</operator><literal type="number" pos:start="679:65" pos:end="679:65">0</literal> <operator pos:start="679:67" pos:end="679:68">&amp;&amp;</operator> <name pos:start="679:70" pos:end="679:83"><name pos:start="679:70" pos:end="679:70">s</name><operator pos:start="679:71" pos:end="679:72">-&gt;</operator><name pos:start="679:73" pos:end="679:83">divx_packed</name></name></expr>)</condition><block pos:start="679:85" pos:end="735:5">{<block_content pos:start="681:9" pos:end="733:9">

        <decl_stmt pos:start="681:9" pos:end="681:51"><decl pos:start="681:9" pos:end="681:50"><type pos:start="681:9" pos:end="681:11"><name pos:start="681:9" pos:end="681:11">int</name></type> <name pos:start="681:13" pos:end="681:23">current_pos</name><init pos:start="681:24" pos:end="681:50">= <expr pos:start="681:26" pos:end="681:50"><call pos:start="681:26" pos:end="681:47"><name pos:start="681:26" pos:end="681:39">get_bits_count</name><argument_list pos:start="681:40" pos:end="681:47">(<argument pos:start="681:41" pos:end="681:46"><expr pos:start="681:41" pos:end="681:46"><operator pos:start="681:41" pos:end="681:41">&amp;</operator><name pos:start="681:42" pos:end="681:46"><name pos:start="681:42" pos:end="681:42">s</name><operator pos:start="681:43" pos:end="681:44">-&gt;</operator><name pos:start="681:45" pos:end="681:46">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="681:48" pos:end="681:49">&gt;&gt;</operator><literal type="number" pos:start="681:50" pos:end="681:50">3</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="683:9" pos:end="683:30"><decl pos:start="683:9" pos:end="683:29"><type pos:start="683:9" pos:end="683:11"><name pos:start="683:9" pos:end="683:11">int</name></type> <name pos:start="683:13" pos:end="683:27">startcode_found</name><init pos:start="683:28" pos:end="683:29">=<expr pos:start="683:29" pos:end="683:29"><literal type="number" pos:start="683:29" pos:end="683:29">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="687:9" pos:end="703:9"><if pos:start="687:9" pos:end="703:9">if<condition pos:start="687:11" pos:end="687:38">(<expr pos:start="687:12" pos:end="687:37"><name pos:start="687:12" pos:end="687:19">buf_size</name> <operator pos:start="687:21" pos:end="687:21">-</operator> <name pos:start="687:23" pos:end="687:33">current_pos</name> <operator pos:start="687:35" pos:end="687:35">&gt;</operator> <literal type="number" pos:start="687:37" pos:end="687:37">5</literal></expr>)</condition><block pos:start="687:39" pos:end="703:9">{<block_content pos:start="689:13" pos:end="701:13">

            <decl_stmt pos:start="689:13" pos:end="689:18"><decl pos:start="689:13" pos:end="689:17"><type pos:start="689:13" pos:end="689:15"><name pos:start="689:13" pos:end="689:15">int</name></type> <name pos:start="689:17" pos:end="689:17">i</name></decl>;</decl_stmt>

            <for pos:start="691:13" pos:end="701:13">for<control pos:start="691:16" pos:end="691:49">(<init pos:start="691:17" pos:end="691:30"><expr pos:start="691:17" pos:end="691:29"><name pos:start="691:17" pos:end="691:17">i</name><operator pos:start="691:18" pos:end="691:18">=</operator><name pos:start="691:19" pos:end="691:29">current_pos</name></expr>;</init> <condition pos:start="691:32" pos:end="691:44"><expr pos:start="691:32" pos:end="691:43"><name pos:start="691:32" pos:end="691:32">i</name><operator pos:start="691:33" pos:end="691:33">&lt;</operator><name pos:start="691:34" pos:end="691:41">buf_size</name><operator pos:start="691:42" pos:end="691:42">-</operator><literal type="number" pos:start="691:43" pos:end="691:43">3</literal></expr>;</condition> <incr pos:start="691:46" pos:end="691:48"><expr pos:start="691:46" pos:end="691:48"><name pos:start="691:46" pos:end="691:46">i</name><operator pos:start="691:47" pos:end="691:48">++</operator></expr></incr>)</control><block pos:start="691:50" pos:end="701:13">{<block_content pos:start="693:17" pos:end="699:17">

                <if_stmt pos:start="693:17" pos:end="699:17"><if pos:start="693:17" pos:end="699:17">if<condition pos:start="693:19" pos:end="693:77">(<expr pos:start="693:20" pos:end="693:76"><name pos:start="693:20" pos:end="693:25"><name pos:start="693:20" pos:end="693:22">buf</name><index pos:start="693:23" pos:end="693:25">[<expr pos:start="693:24" pos:end="693:24"><name pos:start="693:24" pos:end="693:24">i</name></expr>]</index></name><operator pos:start="693:26" pos:end="693:27">==</operator><literal type="number" pos:start="693:28" pos:end="693:28">0</literal> <operator pos:start="693:30" pos:end="693:31">&amp;&amp;</operator> <name pos:start="693:33" pos:end="693:40"><name pos:start="693:33" pos:end="693:35">buf</name><index pos:start="693:36" pos:end="693:40">[<expr pos:start="693:37" pos:end="693:39"><name pos:start="693:37" pos:end="693:37">i</name><operator pos:start="693:38" pos:end="693:38">+</operator><literal type="number" pos:start="693:39" pos:end="693:39">1</literal></expr>]</index></name><operator pos:start="693:41" pos:end="693:42">==</operator><literal type="number" pos:start="693:43" pos:end="693:43">0</literal> <operator pos:start="693:45" pos:end="693:46">&amp;&amp;</operator> <name pos:start="693:48" pos:end="693:55"><name pos:start="693:48" pos:end="693:50">buf</name><index pos:start="693:51" pos:end="693:55">[<expr pos:start="693:52" pos:end="693:54"><name pos:start="693:52" pos:end="693:52">i</name><operator pos:start="693:53" pos:end="693:53">+</operator><literal type="number" pos:start="693:54" pos:end="693:54">2</literal></expr>]</index></name><operator pos:start="693:56" pos:end="693:57">==</operator><literal type="number" pos:start="693:58" pos:end="693:58">1</literal> <operator pos:start="693:60" pos:end="693:61">&amp;&amp;</operator> <name pos:start="693:63" pos:end="693:70"><name pos:start="693:63" pos:end="693:65">buf</name><index pos:start="693:66" pos:end="693:70">[<expr pos:start="693:67" pos:end="693:69"><name pos:start="693:67" pos:end="693:67">i</name><operator pos:start="693:68" pos:end="693:68">+</operator><literal type="number" pos:start="693:69" pos:end="693:69">3</literal></expr>]</index></name><operator pos:start="693:71" pos:end="693:72">==</operator><literal type="number" pos:start="693:73" pos:end="693:76">0xB6</literal></expr>)</condition><block pos:start="693:78" pos:end="699:17">{<block_content pos:start="695:21" pos:end="697:26">

                    <expr_stmt pos:start="695:21" pos:end="695:38"><expr pos:start="695:21" pos:end="695:37"><name pos:start="695:21" pos:end="695:35">startcode_found</name><operator pos:start="695:36" pos:end="695:36">=</operator><literal type="number" pos:start="695:37" pos:end="695:37">1</literal></expr>;</expr_stmt>

                    <break pos:start="697:21" pos:end="697:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="705:9" pos:end="711:9"><if pos:start="705:9" pos:end="711:9">if<condition pos:start="705:11" pos:end="705:62">(<expr pos:start="705:12" pos:end="705:61"><name pos:start="705:12" pos:end="705:23"><name pos:start="705:12" pos:end="705:12">s</name><operator pos:start="705:13" pos:end="705:14">-&gt;</operator><name pos:start="705:15" pos:end="705:16">gb</name><operator pos:start="705:17" pos:end="705:17">.</operator><name pos:start="705:18" pos:end="705:23">buffer</name></name> <operator pos:start="705:25" pos:end="705:26">==</operator> <name pos:start="705:28" pos:end="705:46"><name pos:start="705:28" pos:end="705:28">s</name><operator pos:start="705:29" pos:end="705:30">-&gt;</operator><name pos:start="705:31" pos:end="705:46">bitstream_buffer</name></name> <operator pos:start="705:48" pos:end="705:49">&amp;&amp;</operator> <name pos:start="705:51" pos:end="705:58">buf_size</name><operator pos:start="705:59" pos:end="705:59">&gt;</operator><literal type="number" pos:start="705:60" pos:end="705:61">20</literal></expr>)</condition><block pos:start="705:63" pos:end="711:9">{<block_content pos:start="707:13" pos:end="709:26"> <comment type="line" pos:start="705:65" pos:end="705:76">//xvid style</comment>

            <expr_stmt pos:start="707:13" pos:end="707:30"><expr pos:start="707:13" pos:end="707:29"><name pos:start="707:13" pos:end="707:27">startcode_found</name><operator pos:start="707:28" pos:end="707:28">=</operator><literal type="number" pos:start="707:29" pos:end="707:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="709:13" pos:end="709:26"><expr pos:start="709:13" pos:end="709:25"><name pos:start="709:13" pos:end="709:23">current_pos</name><operator pos:start="709:24" pos:end="709:24">=</operator><literal type="number" pos:start="709:25" pos:end="709:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="715:9" pos:end="733:9"><if pos:start="715:9" pos:end="733:9">if<condition pos:start="715:11" pos:end="715:27">(<expr pos:start="715:12" pos:end="715:26"><name pos:start="715:12" pos:end="715:26">startcode_found</name></expr>)</condition><block pos:start="715:28" pos:end="733:9">{<block_content pos:start="717:13" pos:end="731:61">

            <expr_stmt pos:start="717:13" pos:end="723:71"><expr pos:start="717:13" pos:end="723:70"><call pos:start="717:13" pos:end="723:70"><name pos:start="717:13" pos:end="717:26">av_fast_malloc</name><argument_list pos:start="717:27" pos:end="723:70">(

                <argument pos:start="719:17" pos:end="719:36"><expr pos:start="719:17" pos:end="719:36"><operator pos:start="719:17" pos:end="719:17">&amp;</operator><name pos:start="719:18" pos:end="719:36"><name pos:start="719:18" pos:end="719:18">s</name><operator pos:start="719:19" pos:end="719:20">-&gt;</operator><name pos:start="719:21" pos:end="719:36">bitstream_buffer</name></name></expr></argument>,

                <argument pos:start="721:17" pos:end="721:51"><expr pos:start="721:17" pos:end="721:51"><operator pos:start="721:17" pos:end="721:17">&amp;</operator><name pos:start="721:18" pos:end="721:51"><name pos:start="721:18" pos:end="721:18">s</name><operator pos:start="721:19" pos:end="721:20">-&gt;</operator><name pos:start="721:21" pos:end="721:51">allocated_bitstream_buffer_size</name></name></expr></argument>,

                <argument pos:start="723:17" pos:end="723:69"><expr pos:start="723:17" pos:end="723:69"><name pos:start="723:17" pos:end="723:24">buf_size</name> <operator pos:start="723:26" pos:end="723:26">-</operator> <name pos:start="723:28" pos:end="723:38">current_pos</name> <operator pos:start="723:40" pos:end="723:40">+</operator> <name pos:start="723:42" pos:end="723:69">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="725:13" pos:end="727:39"><if pos:start="725:13" pos:end="727:39">if <condition pos:start="725:16" pos:end="725:37">(<expr pos:start="725:17" pos:end="725:36"><operator pos:start="725:17" pos:end="725:17">!</operator><name pos:start="725:18" pos:end="725:36"><name pos:start="725:18" pos:end="725:18">s</name><operator pos:start="725:19" pos:end="725:20">-&gt;</operator><name pos:start="725:21" pos:end="725:36">bitstream_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="727:17" pos:end="727:39"><block_content pos:start="727:17" pos:end="727:39">

                <return pos:start="727:17" pos:end="727:39">return <expr pos:start="727:24" pos:end="727:38"><call pos:start="727:24" pos:end="727:38"><name pos:start="727:24" pos:end="727:30">AVERROR</name><argument_list pos:start="727:31" pos:end="727:38">(<argument pos:start="727:32" pos:end="727:37"><expr pos:start="727:32" pos:end="727:37"><name pos:start="727:32" pos:end="727:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="729:13" pos:end="729:83"><expr pos:start="729:13" pos:end="729:82"><call pos:start="729:13" pos:end="729:82"><name pos:start="729:13" pos:end="729:18">memcpy</name><argument_list pos:start="729:19" pos:end="729:82">(<argument pos:start="729:20" pos:end="729:38"><expr pos:start="729:20" pos:end="729:38"><name pos:start="729:20" pos:end="729:38"><name pos:start="729:20" pos:end="729:20">s</name><operator pos:start="729:21" pos:end="729:22">-&gt;</operator><name pos:start="729:23" pos:end="729:38">bitstream_buffer</name></name></expr></argument>, <argument pos:start="729:41" pos:end="729:57"><expr pos:start="729:41" pos:end="729:57"><name pos:start="729:41" pos:end="729:43">buf</name> <operator pos:start="729:45" pos:end="729:45">+</operator> <name pos:start="729:47" pos:end="729:57">current_pos</name></expr></argument>, <argument pos:start="729:60" pos:end="729:81"><expr pos:start="729:60" pos:end="729:81"><name pos:start="729:60" pos:end="729:67">buf_size</name> <operator pos:start="729:69" pos:end="729:69">-</operator> <name pos:start="729:71" pos:end="729:81">current_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="731:13" pos:end="731:61"><expr pos:start="731:13" pos:end="731:60"><name pos:start="731:13" pos:end="731:36"><name pos:start="731:13" pos:end="731:13">s</name><operator pos:start="731:14" pos:end="731:15">-&gt;</operator><name pos:start="731:16" pos:end="731:36">bitstream_buffer_size</name></name><operator pos:start="731:37" pos:end="731:37">=</operator> <name pos:start="731:39" pos:end="731:46">buf_size</name> <operator pos:start="731:48" pos:end="731:48">-</operator> <name pos:start="731:50" pos:end="731:60">current_pos</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="739:1" pos:end="739:16"><name pos:start="739:1" pos:end="739:15">intrax8_decoded</name>:</label>

    <expr_stmt pos:start="741:5" pos:end="741:23"><expr pos:start="741:5" pos:end="741:22"><call pos:start="741:5" pos:end="741:22"><name pos:start="741:5" pos:end="741:19">ff_er_frame_end</name><argument_list pos:start="741:20" pos:end="741:22">(<argument pos:start="741:21" pos:end="741:21"><expr pos:start="741:21" pos:end="741:21"><name pos:start="741:21" pos:end="741:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="745:5" pos:end="751:5"><if pos:start="745:5" pos:end="751:5">if <condition pos:start="745:8" pos:end="745:23">(<expr pos:start="745:9" pos:end="745:22"><name pos:start="745:9" pos:end="745:22"><name pos:start="745:9" pos:end="745:13">avctx</name><operator pos:start="745:14" pos:end="745:15">-&gt;</operator><name pos:start="745:16" pos:end="745:22">hwaccel</name></name></expr>)</condition> <block pos:start="745:25" pos:end="751:5">{<block_content pos:start="747:9" pos:end="749:22">

        <if_stmt pos:start="747:9" pos:end="749:22"><if pos:start="747:9" pos:end="749:22">if <condition pos:start="747:12" pos:end="747:49">(<expr pos:start="747:13" pos:end="747:48"><call pos:start="747:13" pos:end="747:44"><name pos:start="747:13" pos:end="747:37"><name pos:start="747:13" pos:end="747:17">avctx</name><operator pos:start="747:18" pos:end="747:19">-&gt;</operator><name pos:start="747:20" pos:end="747:26">hwaccel</name><operator pos:start="747:27" pos:end="747:28">-&gt;</operator><name pos:start="747:29" pos:end="747:37">end_frame</name></name><argument_list pos:start="747:38" pos:end="747:44">(<argument pos:start="747:39" pos:end="747:43"><expr pos:start="747:39" pos:end="747:43"><name pos:start="747:39" pos:end="747:43">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="747:46" pos:end="747:46">&lt;</operator> <literal type="number" pos:start="747:48" pos:end="747:48">0</literal></expr>)</condition><block type="pseudo" pos:start="749:13" pos:end="749:22"><block_content pos:start="749:13" pos:end="749:22">

            <return pos:start="749:13" pos:end="749:22">return <expr pos:start="749:20" pos:end="749:21"><operator pos:start="749:20" pos:end="749:20">-</operator><literal type="number" pos:start="749:21" pos:end="749:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="755:5" pos:end="755:21"><expr pos:start="755:5" pos:end="755:20"><call pos:start="755:5" pos:end="755:20"><name pos:start="755:5" pos:end="755:17">MPV_frame_end</name><argument_list pos:start="755:18" pos:end="755:20">(<argument pos:start="755:19" pos:end="755:19"><expr pos:start="755:19" pos:end="755:19"><name pos:start="755:19" pos:end="755:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt pos:start="759:1" pos:end="759:74"><expr pos:start="759:1" pos:end="759:73"><call pos:start="759:1" pos:end="759:73"><name pos:start="759:1" pos:end="759:6">assert</name><argument_list pos:start="759:7" pos:end="759:73">(<argument pos:start="759:8" pos:end="759:72"><expr pos:start="759:8" pos:end="759:72"><name pos:start="759:8" pos:end="759:35"><name pos:start="759:8" pos:end="759:8">s</name><operator pos:start="759:9" pos:end="759:10">-&gt;</operator><name pos:start="759:11" pos:end="759:25">current_picture</name><operator pos:start="759:26" pos:end="759:26">.</operator><name pos:start="759:27" pos:end="759:35">pict_type</name></name> <operator pos:start="759:37" pos:end="759:38">==</operator> <name pos:start="759:40" pos:end="759:72"><name pos:start="759:40" pos:end="759:40">s</name><operator pos:start="759:41" pos:end="759:42">-&gt;</operator><name pos:start="759:43" pos:end="759:61">current_picture_ptr</name><operator pos:start="759:62" pos:end="759:63">-&gt;</operator><name pos:start="759:64" pos:end="759:72">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt pos:start="761:1" pos:end="761:53"><expr pos:start="761:1" pos:end="761:52"><call pos:start="761:1" pos:end="761:52"><name pos:start="761:1" pos:end="761:6">assert</name><argument_list pos:start="761:7" pos:end="761:52">(<argument pos:start="761:8" pos:end="761:51"><expr pos:start="761:8" pos:end="761:51"><name pos:start="761:8" pos:end="761:35"><name pos:start="761:8" pos:end="761:8">s</name><operator pos:start="761:9" pos:end="761:10">-&gt;</operator><name pos:start="761:11" pos:end="761:25">current_picture</name><operator pos:start="761:26" pos:end="761:26">.</operator><name pos:start="761:27" pos:end="761:35">pict_type</name></name> <operator pos:start="761:37" pos:end="761:38">==</operator> <name pos:start="761:40" pos:end="761:51"><name pos:start="761:40" pos:end="761:40">s</name><operator pos:start="761:41" pos:end="761:42">-&gt;</operator><name pos:start="761:43" pos:end="761:51">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="763:5" pos:end="771:5"><if pos:start="763:5" pos:end="767:5">if <condition pos:start="763:8" pos:end="763:50">(<expr pos:start="763:9" pos:end="763:49"><name pos:start="763:9" pos:end="763:20"><name pos:start="763:9" pos:end="763:9">s</name><operator pos:start="763:10" pos:end="763:11">-&gt;</operator><name pos:start="763:12" pos:end="763:20">pict_type</name></name> <operator pos:start="763:22" pos:end="763:23">==</operator> <name pos:start="763:25" pos:end="763:33">FF_B_TYPE</name> <operator pos:start="763:35" pos:end="763:36">||</operator> <name pos:start="763:38" pos:end="763:49"><name pos:start="763:38" pos:end="763:38">s</name><operator pos:start="763:39" pos:end="763:40">-&gt;</operator><name pos:start="763:41" pos:end="763:49">low_delay</name></name></expr>)</condition> <block pos:start="763:52" pos:end="767:5">{<block_content pos:start="765:9" pos:end="765:49">

        <expr_stmt pos:start="765:9" pos:end="765:49"><expr pos:start="765:9" pos:end="765:48"><operator pos:start="765:9" pos:end="765:9">*</operator><name pos:start="765:10" pos:end="765:13">pict</name><operator pos:start="765:14" pos:end="765:14">=</operator> <operator pos:start="765:16" pos:end="765:16">*</operator><operator pos:start="765:17" pos:end="765:17">(</operator><name pos:start="765:18" pos:end="765:24">AVFrame</name><operator pos:start="765:25" pos:end="765:25">*</operator><operator pos:start="765:26" pos:end="765:26">)</operator><name pos:start="765:27" pos:end="765:48"><name pos:start="765:27" pos:end="765:27">s</name><operator pos:start="765:28" pos:end="765:29">-&gt;</operator><name pos:start="765:30" pos:end="765:48">current_picture_ptr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="767:7" pos:end="771:5">else if <condition pos:start="767:15" pos:end="767:43">(<expr pos:start="767:16" pos:end="767:42"><name pos:start="767:16" pos:end="767:34"><name pos:start="767:16" pos:end="767:16">s</name><operator pos:start="767:17" pos:end="767:18">-&gt;</operator><name pos:start="767:19" pos:end="767:34">last_picture_ptr</name></name> <operator pos:start="767:36" pos:end="767:37">!=</operator> <name pos:start="767:39" pos:end="767:42">NULL</name></expr>)</condition> <block pos:start="767:45" pos:end="771:5">{<block_content pos:start="769:9" pos:end="769:46">

        <expr_stmt pos:start="769:9" pos:end="769:46"><expr pos:start="769:9" pos:end="769:45"><operator pos:start="769:9" pos:end="769:9">*</operator><name pos:start="769:10" pos:end="769:13">pict</name><operator pos:start="769:14" pos:end="769:14">=</operator> <operator pos:start="769:16" pos:end="769:16">*</operator><operator pos:start="769:17" pos:end="769:17">(</operator><name pos:start="769:18" pos:end="769:24">AVFrame</name><operator pos:start="769:25" pos:end="769:25">*</operator><operator pos:start="769:26" pos:end="769:26">)</operator><name pos:start="769:27" pos:end="769:45"><name pos:start="769:27" pos:end="769:27">s</name><operator pos:start="769:28" pos:end="769:29">-&gt;</operator><name pos:start="769:30" pos:end="769:45">last_picture_ptr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="775:5" pos:end="781:5"><if pos:start="775:5" pos:end="781:5">if<condition pos:start="775:7" pos:end="775:43">(<expr pos:start="775:8" pos:end="775:42"><name pos:start="775:8" pos:end="775:26"><name pos:start="775:8" pos:end="775:8">s</name><operator pos:start="775:9" pos:end="775:10">-&gt;</operator><name pos:start="775:11" pos:end="775:26">last_picture_ptr</name></name> <operator pos:start="775:28" pos:end="775:29">||</operator> <name pos:start="775:31" pos:end="775:42"><name pos:start="775:31" pos:end="775:31">s</name><operator pos:start="775:32" pos:end="775:33">-&gt;</operator><name pos:start="775:34" pos:end="775:42">low_delay</name></name></expr>)</condition><block pos:start="775:44" pos:end="781:5">{<block_content pos:start="777:9" pos:end="779:37">

        <expr_stmt pos:start="777:9" pos:end="777:37"><expr pos:start="777:9" pos:end="777:36"><operator pos:start="777:9" pos:end="777:9">*</operator><name pos:start="777:10" pos:end="777:18">data_size</name> <operator pos:start="777:20" pos:end="777:20">=</operator> <sizeof pos:start="777:22" pos:end="777:36">sizeof<argument_list pos:start="777:28" pos:end="777:36">(<argument pos:start="777:29" pos:end="777:35"><expr pos:start="777:29" pos:end="777:35"><name pos:start="777:29" pos:end="777:35">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="779:9" pos:end="779:37"><expr pos:start="779:9" pos:end="779:36"><call pos:start="779:9" pos:end="779:36"><name pos:start="779:9" pos:end="779:27">ff_print_debug_info</name><argument_list pos:start="779:28" pos:end="779:36">(<argument pos:start="779:29" pos:end="779:29"><expr pos:start="779:29" pos:end="779:29"><name pos:start="779:29" pos:end="779:29">s</name></expr></argument>, <argument pos:start="779:32" pos:end="779:35"><expr pos:start="779:32" pos:end="779:35"><name pos:start="779:32" pos:end="779:35">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="785:5" pos:end="785:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="787:5" pos:end="787:58">/* we subtract 1 because it is added on utils.c     */</comment>

    <expr_stmt pos:start="789:5" pos:end="794:0"><expr pos:start="789:5" pos:end="789:47"><name pos:start="789:5" pos:end="789:23"><name pos:start="789:5" pos:end="789:9">avctx</name><operator pos:start="789:10" pos:end="789:11">-&gt;</operator><name pos:start="789:12" pos:end="789:23">frame_number</name></name> <operator pos:start="789:25" pos:end="789:25">=</operator> <name pos:start="789:27" pos:end="789:43"><name pos:start="789:27" pos:end="789:27">s</name><operator pos:start="789:28" pos:end="789:29">-&gt;</operator><name pos:start="789:30" pos:end="789:43">picture_number</name></name> <operator pos:start="789:45" pos:end="789:45">-</operator> <literal type="number" pos:start="789:47" pos:end="789:47">1</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="793:1" pos:end="793:23">#<cpp:directive pos:start="793:2" pos:end="793:6">ifdef</cpp:directive> <name pos:start="793:8" pos:end="793:23">PRINT_FRAME_TIME</name></cpp:ifdef>

<expr_stmt pos:start="795:1" pos:end="798:0"><expr pos:start="795:1" pos:end="795:56"><call pos:start="795:1" pos:end="795:56"><name pos:start="795:1" pos:end="795:6">av_log</name><argument_list pos:start="795:7" pos:end="795:56">(<argument pos:start="795:8" pos:end="795:12"><expr pos:start="795:8" pos:end="795:12"><name pos:start="795:8" pos:end="795:12">avctx</name></expr></argument>, <argument pos:start="795:15" pos:end="795:26"><expr pos:start="795:15" pos:end="795:26"><name pos:start="795:15" pos:end="795:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="795:29" pos:end="795:41"><expr pos:start="795:29" pos:end="795:41"><literal type="string" pos:start="795:29" pos:end="795:31">"%"</literal><name pos:start="795:32" pos:end="795:37">PRId64</name><literal type="string" pos:start="795:38" pos:end="795:41">"\n"</literal></expr></argument>, <argument pos:start="795:44" pos:end="795:55"><expr pos:start="795:44" pos:end="795:55"><call pos:start="795:44" pos:end="795:50"><name pos:start="795:44" pos:end="795:48">rdtsc</name><argument_list pos:start="795:49" pos:end="795:50">()</argument_list></call><operator pos:start="795:51" pos:end="795:51">-</operator><name pos:start="795:52" pos:end="795:55">time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="797:1" pos:end="797:6">#<cpp:directive pos:start="797:2" pos:end="797:6">endif</cpp:directive></cpp:endif>



    <return pos:start="801:5" pos:end="801:43">return <expr pos:start="801:12" pos:end="801:42"><call pos:start="801:12" pos:end="801:42"><name pos:start="801:12" pos:end="801:29">get_consumed_bytes</name><argument_list pos:start="801:30" pos:end="801:42">(<argument pos:start="801:31" pos:end="801:31"><expr pos:start="801:31" pos:end="801:31"><name pos:start="801:31" pos:end="801:31">s</name></expr></argument>, <argument pos:start="801:34" pos:end="801:41"><expr pos:start="801:34" pos:end="801:41"><name pos:start="801:34" pos:end="801:41">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
