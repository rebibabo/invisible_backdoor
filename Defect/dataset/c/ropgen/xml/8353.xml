<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8353.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">posix_aio_init</name><parameter_list pos:start="1:26" pos:end="1:31">(<parameter pos:start="1:27" pos:end="1:30"><decl pos:start="1:27" pos:end="1:30"><type pos:start="1:27" pos:end="1:30"><name pos:start="1:27" pos:end="1:30">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">sigset_t</name></type> <name pos:start="5:14" pos:end="5:17">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">PosixAioState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name></decl>;</decl_stmt>

  

    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:24">(<expr pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:23">posix_aio_state</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:43"><expr pos:start="17:5" pos:end="17:42"><name pos:start="17:5" pos:end="17:5">s</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:42"><name pos:start="17:9" pos:end="17:19">qemu_malloc</name><argument_list pos:start="17:20" pos:end="17:42">(<argument pos:start="17:21" pos:end="17:41"><expr pos:start="17:21" pos:end="17:41"><sizeof pos:start="17:21" pos:end="17:41">sizeof<argument_list pos:start="17:27" pos:end="17:41">(<argument pos:start="17:28" pos:end="17:40"><expr pos:start="17:28" pos:end="17:40"><name pos:start="17:28" pos:end="17:40">PosixAioState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:23"><if pos:start="19:5" pos:end="21:23">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:9">s</name> <operator pos:start="19:11" pos:end="19:12">==</operator> <name pos:start="19:14" pos:end="19:17">NULL</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:23"><block_content pos:start="21:9" pos:end="21:23">

        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:22">ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:39">/* Make sure to block AIO signal */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><call pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:15">sigemptyset</name><argument_list pos:start="27:16" pos:end="27:22">(<argument pos:start="27:17" pos:end="27:21"><expr pos:start="27:17" pos:end="27:21"><operator pos:start="27:17" pos:end="27:17">&amp;</operator><name pos:start="27:18" pos:end="27:21">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><call pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:13">sigaddset</name><argument_list pos:start="29:14" pos:end="29:29">(<argument pos:start="29:15" pos:end="29:19"><expr pos:start="29:15" pos:end="29:19"><operator pos:start="29:15" pos:end="29:15">&amp;</operator><name pos:start="29:16" pos:end="29:19">mask</name></expr></argument>, <argument pos:start="29:22" pos:end="29:28"><expr pos:start="29:22" pos:end="29:28"><name pos:start="29:22" pos:end="29:28">SIGUSR2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:40"><expr pos:start="31:5" pos:end="31:39"><call pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:15">sigprocmask</name><argument_list pos:start="31:16" pos:end="31:39">(<argument pos:start="31:17" pos:end="31:25"><expr pos:start="31:17" pos:end="31:25"><name pos:start="31:17" pos:end="31:25">SIG_BLOCK</name></expr></argument>, <argument pos:start="31:28" pos:end="31:32"><expr pos:start="31:28" pos:end="31:32"><operator pos:start="31:28" pos:end="31:28">&amp;</operator><name pos:start="31:29" pos:end="31:32">mask</name></expr></argument>, <argument pos:start="31:35" pos:end="31:38"><expr pos:start="31:35" pos:end="31:38"><name pos:start="31:35" pos:end="31:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:16">first_aio</name></name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:23">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:9"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:9">fd</name></name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:25">qemu_signalfd</name><argument_list pos:start="37:26" pos:end="37:32">(<argument pos:start="37:27" pos:end="37:31"><expr pos:start="37:27" pos:end="37:31"><operator pos:start="37:27" pos:end="37:27">&amp;</operator><name pos:start="37:28" pos:end="37:31">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:20">(<expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:13"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:13">fd</name></name> <operator pos:start="39:15" pos:end="39:16">==</operator> <operator pos:start="39:18" pos:end="39:18">-</operator><literal type="number" pos:start="39:19" pos:end="39:19">1</literal></expr>)</condition> <block pos:start="39:22" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:22">

        <expr_stmt pos:start="41:9" pos:end="41:55"><expr pos:start="41:9" pos:end="41:54"><call pos:start="41:9" pos:end="41:54"><name pos:start="41:9" pos:end="41:15">fprintf</name><argument_list pos:start="41:16" pos:end="41:54">(<argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">stderr</name></expr></argument>, <argument pos:start="41:25" pos:end="41:53"><expr pos:start="41:25" pos:end="41:53"><literal type="string" pos:start="41:25" pos:end="41:53">"failed to create signalfd\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:22">return <expr pos:start="43:16" pos:end="43:21"><operator pos:start="43:16" pos:end="43:16">-</operator><name pos:start="43:17" pos:end="43:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:38"><expr pos:start="49:5" pos:end="49:37"><call pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:9">fcntl</name><argument_list pos:start="49:10" pos:end="49:37">(<argument pos:start="49:11" pos:end="49:15"><expr pos:start="49:11" pos:end="49:15"><name pos:start="49:11" pos:end="49:15"><name pos:start="49:11" pos:end="49:11">s</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:15">fd</name></name></expr></argument>, <argument pos:start="49:18" pos:end="49:24"><expr pos:start="49:18" pos:end="49:24"><name pos:start="49:18" pos:end="49:24">F_SETFL</name></expr></argument>, <argument pos:start="49:27" pos:end="49:36"><expr pos:start="49:27" pos:end="49:36"><name pos:start="49:27" pos:end="49:36">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="58:0"><expr pos:start="53:5" pos:end="53:76"><call pos:start="53:5" pos:end="53:76"><name pos:start="53:5" pos:end="53:27">qemu_aio_set_fd_handler</name><argument_list pos:start="53:28" pos:end="53:76">(<argument pos:start="53:29" pos:end="53:33"><expr pos:start="53:29" pos:end="53:33"><name pos:start="53:29" pos:end="53:33"><name pos:start="53:29" pos:end="53:29">s</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:33">fd</name></name></expr></argument>, <argument pos:start="53:36" pos:end="53:49"><expr pos:start="53:36" pos:end="53:49"><name pos:start="53:36" pos:end="53:49">posix_aio_read</name></expr></argument>, <argument pos:start="53:52" pos:end="53:55"><expr pos:start="53:52" pos:end="53:55"><name pos:start="53:52" pos:end="53:55">NULL</name></expr></argument>, <argument pos:start="53:58" pos:end="53:72"><expr pos:start="53:58" pos:end="53:72"><name pos:start="53:58" pos:end="53:72">posix_aio_flush</name></expr></argument>, <argument pos:start="53:75" pos:end="53:75"><expr pos:start="53:75" pos:end="53:75"><name pos:start="53:75" pos:end="53:75">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="57:1" pos:end="57:22">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:22"><call pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:11">defined</name><argument_list pos:start="57:12" pos:end="57:22">(<argument pos:start="57:13" pos:end="57:21"><expr pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:21">__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <block pos:start="59:5" pos:end="92:0">{<block_content pos:start="61:9" pos:end="87:22">

        <decl_stmt pos:start="61:9" pos:end="61:26"><decl pos:start="61:9" pos:end="61:25"><type pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:14">struct</name> <name pos:start="61:16" pos:end="61:22">aioinit</name></name></type> <name pos:start="61:24" pos:end="61:25">ai</name></decl>;</decl_stmt>



        <expr_stmt pos:start="65:9" pos:end="68:0"><expr pos:start="65:9" pos:end="65:34"><call pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:14">memset</name><argument_list pos:start="65:15" pos:end="65:34">(<argument pos:start="65:16" pos:end="65:18"><expr pos:start="65:16" pos:end="65:18"><operator pos:start="65:16" pos:end="65:16">&amp;</operator><name pos:start="65:17" pos:end="65:18">ai</name></expr></argument>, <argument pos:start="65:21" pos:end="65:21"><expr pos:start="65:21" pos:end="65:21"><literal type="number" pos:start="65:21" pos:end="65:21">0</literal></expr></argument>, <argument pos:start="65:24" pos:end="65:33"><expr pos:start="65:24" pos:end="65:33"><sizeof pos:start="65:24" pos:end="65:33">sizeof<argument_list pos:start="65:30" pos:end="65:33">(<argument pos:start="65:31" pos:end="65:32"><expr pos:start="65:31" pos:end="65:32"><name pos:start="65:31" pos:end="65:32">ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="67:1" pos:end="67:51">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:51"><call pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:11">defined</name><argument_list pos:start="67:12" pos:end="67:27">(<argument pos:start="67:13" pos:end="67:26"><expr pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:26">__GLIBC_PREREQ</name></expr></argument>)</argument_list></call> <operator pos:start="67:29" pos:end="67:30">&amp;&amp;</operator> <call pos:start="67:32" pos:end="67:51"><name pos:start="67:32" pos:end="67:45">__GLIBC_PREREQ</name><argument_list pos:start="67:46" pos:end="67:51">(<argument pos:start="67:47" pos:end="67:50"><expr pos:start="67:47" pos:end="67:50"><literal type="number" pos:start="67:47" pos:end="67:47">2</literal><operator pos:start="67:48" pos:end="67:48">,</operator> <literal type="number" pos:start="67:50" pos:end="67:50">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="69:9" pos:end="69:28"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:10">ai</name><operator pos:start="69:11" pos:end="69:11">.</operator><name pos:start="69:12" pos:end="69:22">aio_threads</name></name> <operator pos:start="69:24" pos:end="69:24">=</operator> <literal type="number" pos:start="69:26" pos:end="69:27">64</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="74:0"><expr pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:10">ai</name><operator pos:start="71:11" pos:end="71:11">.</operator><name pos:start="71:12" pos:end="71:18">aio_num</name></name> <operator pos:start="71:20" pos:end="71:20">=</operator> <literal type="number" pos:start="71:22" pos:end="71:23">64</literal></expr>;</expr_stmt>

<cpp:else pos:start="73:1" pos:end="73:5">#<cpp:directive pos:start="73:2" pos:end="73:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="75:9" pos:end="77:39">/* XXX: aio thread exit seems to hang on RedHat 9 and this init

           seems to fix the problem. */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:27"><expr pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:10">ai</name><operator pos:start="79:11" pos:end="79:11">.</operator><name pos:start="79:12" pos:end="79:22">aio_threads</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <literal type="number" pos:start="79:26" pos:end="79:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:23"><expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:10">ai</name><operator pos:start="81:11" pos:end="81:11">.</operator><name pos:start="81:12" pos:end="81:18">aio_num</name></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <literal type="number" pos:start="81:22" pos:end="81:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="86:0"><expr pos:start="83:9" pos:end="83:39"><name pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:10">ai</name><operator pos:start="83:11" pos:end="83:11">.</operator><name pos:start="83:12" pos:end="83:24">aio_idle_time</name></name> <operator pos:start="83:26" pos:end="83:26">=</operator> <literal type="number" pos:start="83:28" pos:end="83:30">365</literal> <operator pos:start="83:32" pos:end="83:32">*</operator> <literal type="number" pos:start="83:34" pos:end="83:39">100000</literal></expr>;</expr_stmt>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="87:9" pos:end="87:22"><expr pos:start="87:9" pos:end="87:21"><call pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:16">aio_init</name><argument_list pos:start="87:17" pos:end="87:21">(<argument pos:start="87:18" pos:end="87:20"><expr pos:start="87:18" pos:end="87:20"><operator pos:start="87:18" pos:end="87:18">&amp;</operator><name pos:start="87:19" pos:end="87:20">ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="93:5" pos:end="93:24"><expr pos:start="93:5" pos:end="93:23"><name pos:start="93:5" pos:end="93:19">posix_aio_state</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <name pos:start="93:23" pos:end="93:23">s</name></expr>;</expr_stmt>



    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
