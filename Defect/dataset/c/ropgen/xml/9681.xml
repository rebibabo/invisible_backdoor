<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9681.c" pos:tabs="8"><function pos:start="1:1" pos:end="413:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">ppce500_init</name><parameter_list pos:start="1:18" pos:end="1:63">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:39"><name pos:start="1:19" pos:end="1:30">MachineState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:39">machine</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:62"><decl pos:start="1:42" pos:end="1:62"><type pos:start="1:42" pos:end="1:62"><name pos:start="1:42" pos:end="1:54">PPCE500Params</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:62">params</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="413:1">{<block_content pos:start="5:5" pos:end="411:5">

    <decl_stmt pos:start="5:5" pos:end="5:58"><decl pos:start="5:5" pos:end="5:57"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MemoryRegion</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:35">address_space_mem</name> <init pos:start="5:37" pos:end="5:57">= <expr pos:start="5:39" pos:end="5:57"><call pos:start="5:39" pos:end="5:57"><name pos:start="5:39" pos:end="5:55">get_system_memory</name><argument_list pos:start="5:56" pos:end="5:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">ram</name> <init pos:start="7:23" pos:end="7:46">= <expr pos:start="7:25" pos:end="7:46"><call pos:start="7:25" pos:end="7:46"><name pos:start="7:25" pos:end="7:29">g_new</name><argument_list pos:start="7:30" pos:end="7:46">(<argument pos:start="7:31" pos:end="7:42"><expr pos:start="7:31" pos:end="7:42"><name pos:start="7:31" pos:end="7:42">MemoryRegion</name></expr></argument>, <argument pos:start="7:45" pos:end="7:45"><expr pos:start="7:45" pos:end="7:45"><literal type="number" pos:start="7:45" pos:end="7:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">PCIBus</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUPPCState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:24">elf_lowaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">hwaddr</name></type> <name pos:start="17:12" pos:end="17:16">entry</name><init pos:start="17:17" pos:end="17:18">=<expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">hwaddr</name></type> <name pos:start="19:12" pos:end="19:19">loadaddr</name><init pos:start="19:20" pos:end="19:36">=<expr pos:start="19:21" pos:end="19:36"><name pos:start="19:21" pos:end="19:36">UIMAGE_LOAD_BASE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:15">target_long</name></type> <name pos:start="21:17" pos:end="21:27">kernel_size</name><init pos:start="21:28" pos:end="21:29">=<expr pos:start="21:29" pos:end="21:29"><literal type="number" pos:start="21:29" pos:end="21:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16">target_ulong</name></type> <name pos:start="23:18" pos:end="23:24">dt_base</name> <init pos:start="23:26" pos:end="23:28">= <expr pos:start="23:28" pos:end="23:28"><literal type="number" pos:start="23:28" pos:end="23:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">target_ulong</name></type> <name pos:start="25:18" pos:end="25:28">initrd_base</name> <init pos:start="25:30" pos:end="25:32">= <expr pos:start="25:32" pos:end="25:32"><literal type="number" pos:start="25:32" pos:end="25:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:32"><decl pos:start="27:5" pos:end="27:31"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:15">target_long</name></type> <name pos:start="27:17" pos:end="27:27">initrd_size</name> <init pos:start="27:29" pos:end="27:31">= <expr pos:start="27:31" pos:end="27:31"><literal type="number" pos:start="27:31" pos:end="27:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:30"><decl pos:start="29:5" pos:end="29:29"><type pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:16">target_ulong</name></type> <name pos:start="29:18" pos:end="29:25">cur_base</name> <init pos:start="29:27" pos:end="29:29">= <expr pos:start="29:29" pos:end="29:29"><literal type="number" pos:start="29:29" pos:end="29:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:10"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">i</name></decl>;</decl_stmt>

    <comment type="block" pos:start="33:5" pos:end="35:24">/* irq num for pin INTA, INTB, INTC and INTD is 1, 2, 3 and

     * 4 respectively */</comment>

    <decl_stmt pos:start="37:5" pos:end="37:58"><decl pos:start="37:5" pos:end="37:57"><type pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:12">unsigned</name> <name pos:start="37:14" pos:end="37:16">int</name></type> <name pos:start="37:18" pos:end="37:42"><name pos:start="37:18" pos:end="37:28">pci_irq_nrs</name><index pos:start="37:29" pos:end="37:42">[<expr pos:start="37:30" pos:end="37:41"><name pos:start="37:30" pos:end="37:41">PCI_NUM_PINS</name></expr>]</index></name> <init pos:start="37:44" pos:end="37:57">= <expr pos:start="37:46" pos:end="37:57"><block pos:start="37:46" pos:end="37:57">{<expr pos:start="37:47" pos:end="37:47"><literal type="number" pos:start="37:47" pos:end="37:47">1</literal></expr>, <expr pos:start="37:50" pos:end="37:50"><literal type="number" pos:start="37:50" pos:end="37:50">2</literal></expr>, <expr pos:start="37:53" pos:end="37:53"><literal type="number" pos:start="37:53" pos:end="37:53">3</literal></expr>, <expr pos:start="37:56" pos:end="37:56"><literal type="number" pos:start="37:56" pos:end="37:56">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:27"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:12">qemu_irq</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier><modifier pos:start="39:15" pos:end="39:15">*</modifier></type><name pos:start="39:16" pos:end="39:19">irqs</name></decl>, <decl pos:start="39:22" pos:end="39:26"><type ref="prev" pos:start="39:5" pos:end="39:15"><modifier pos:start="39:22" pos:end="39:22">*</modifier></type><name pos:start="39:23" pos:end="39:26">mpic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:21"><decl pos:start="41:5" pos:end="41:20"><type pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:15">DeviceState</name> <modifier pos:start="41:17" pos:end="41:17">*</modifier></type><name pos:start="41:18" pos:end="41:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:33"><decl pos:start="43:5" pos:end="43:32"><type pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:15">CPUPPCState</name> <modifier pos:start="43:17" pos:end="43:17">*</modifier></type><name pos:start="43:18" pos:end="43:25">firstenv</name> <init pos:start="43:27" pos:end="43:32">= <expr pos:start="43:29" pos:end="43:32"><name pos:start="43:29" pos:end="43:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:34"><decl pos:start="45:5" pos:end="45:33"><type pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:16">MemoryRegion</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:33">ccsr_addr_space</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:20"><decl pos:start="47:5" pos:end="47:19"><type pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:16">SysBusDevice</name> <modifier pos:start="47:18" pos:end="47:18">*</modifier></type><name pos:start="47:19" pos:end="47:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:27"><decl pos:start="49:5" pos:end="49:26"><type pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:20">PPCE500CCSRState</name> <modifier pos:start="49:22" pos:end="49:22">*</modifier></type><name pos:start="49:23" pos:end="49:26">ccsr</name></decl>;</decl_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:20">/* Setup CPUs */</comment>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:35">(<expr pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:15">machine</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:26">cpu_model</name></name> <operator pos:start="55:28" pos:end="55:29">==</operator> <name pos:start="55:31" pos:end="55:34">NULL</name></expr>)</condition> <block pos:start="55:37" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:42">

        <expr_stmt pos:start="57:9" pos:end="57:42"><expr pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:15">machine</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:26">cpu_model</name></name> <operator pos:start="57:28" pos:end="57:28">=</operator> <literal type="string" pos:start="57:30" pos:end="57:41">"e500v2_v30"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:52"><expr pos:start="63:5" pos:end="63:51"><name pos:start="63:5" pos:end="63:8">irqs</name> <operator pos:start="63:10" pos:end="63:10">=</operator> <call pos:start="63:12" pos:end="63:51"><name pos:start="63:12" pos:end="63:20">g_malloc0</name><argument_list pos:start="63:21" pos:end="63:51">(<argument pos:start="63:22" pos:end="63:50"><expr pos:start="63:22" pos:end="63:50"><name pos:start="63:22" pos:end="63:29">smp_cpus</name> <operator pos:start="63:31" pos:end="63:31">*</operator> <sizeof pos:start="63:33" pos:end="63:50">sizeof<argument_list pos:start="63:39" pos:end="63:50">(<argument pos:start="63:40" pos:end="63:49"><expr pos:start="63:40" pos:end="63:49"><name pos:start="63:40" pos:end="63:47">qemu_irq</name> <operator pos:start="63:49" pos:end="63:49">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:73"><expr pos:start="65:5" pos:end="65:72"><name pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:8">irqs</name><index pos:start="65:9" pos:end="65:11">[<expr pos:start="65:10" pos:end="65:10"><literal type="number" pos:start="65:10" pos:end="65:10">0</literal></expr>]</index></name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:72"><name pos:start="65:15" pos:end="65:23">g_malloc0</name><argument_list pos:start="65:24" pos:end="65:72">(<argument pos:start="65:25" pos:end="65:71"><expr pos:start="65:25" pos:end="65:71"><name pos:start="65:25" pos:end="65:32">smp_cpus</name> <operator pos:start="65:34" pos:end="65:34">*</operator> <sizeof pos:start="65:36" pos:end="65:51">sizeof<argument_list pos:start="65:42" pos:end="65:51">(<argument pos:start="65:43" pos:end="65:50"><expr pos:start="65:43" pos:end="65:50"><name pos:start="65:43" pos:end="65:50">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="65:53" pos:end="65:53">*</operator> <name pos:start="65:55" pos:end="65:71">OPENPIC_OUTPUT_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="143:5">for <control pos:start="67:9" pos:end="67:34">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:29"><expr pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:28">smp_cpus</name></expr>;</condition> <incr pos:start="67:31" pos:end="67:33"><expr pos:start="67:31" pos:end="67:33"><name pos:start="67:31" pos:end="67:31">i</name><operator pos:start="67:32" pos:end="67:33">++</operator></expr></incr>)</control> <block pos:start="67:36" pos:end="143:5">{<block_content pos:start="69:9" pos:end="141:9">

        <decl_stmt pos:start="69:9" pos:end="69:24"><decl pos:start="69:9" pos:end="69:23"><type pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:18">PowerPCCPU</name> <modifier pos:start="69:20" pos:end="69:20">*</modifier></type><name pos:start="69:21" pos:end="69:23">cpu</name></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:21"><decl pos:start="71:9" pos:end="71:20"><type pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:16">CPUState</name> <modifier pos:start="71:18" pos:end="71:18">*</modifier></type><name pos:start="71:19" pos:end="71:20">cs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:24"><decl pos:start="73:9" pos:end="73:23"><type pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:16">qemu_irq</name> <modifier pos:start="73:18" pos:end="73:18">*</modifier></type><name pos:start="73:19" pos:end="73:23">input</name></decl>;</decl_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:47"><expr pos:start="77:9" pos:end="77:46"><name pos:start="77:9" pos:end="77:11">cpu</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:46"><name pos:start="77:15" pos:end="77:26">cpu_ppc_init</name><argument_list pos:start="77:27" pos:end="77:46">(<argument pos:start="77:28" pos:end="77:45"><expr pos:start="77:28" pos:end="77:45"><name pos:start="77:28" pos:end="77:45"><name pos:start="77:28" pos:end="77:34">machine</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:45">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:24">(<expr pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:15">cpu</name> <operator pos:start="79:17" pos:end="79:18">==</operator> <name pos:start="79:20" pos:end="79:23">NULL</name></expr>)</condition> <block pos:start="79:26" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:20">

            <expr_stmt pos:start="81:13" pos:end="81:59"><expr pos:start="81:13" pos:end="81:58"><call pos:start="81:13" pos:end="81:58"><name pos:start="81:13" pos:end="81:19">fprintf</name><argument_list pos:start="81:20" pos:end="81:58">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26">stderr</name></expr></argument>, <argument pos:start="81:29" pos:end="81:57"><expr pos:start="81:29" pos:end="81:57"><literal type="string" pos:start="81:29" pos:end="81:57">"Unable to initialize CPU!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:20"><expr pos:start="83:13" pos:end="83:19"><call pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:16">exit</name><argument_list pos:start="83:17" pos:end="83:19">(<argument pos:start="83:18" pos:end="83:18"><expr pos:start="83:18" pos:end="83:18"><literal type="number" pos:start="83:18" pos:end="83:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:24"><expr pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:11">env</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <operator pos:start="87:15" pos:end="87:15">&amp;</operator><name pos:start="87:16" pos:end="87:23"><name pos:start="87:16" pos:end="87:18">cpu</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:23">env</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:22"><expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:10">cs</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <call pos:start="89:14" pos:end="89:21"><name pos:start="89:14" pos:end="89:16">CPU</name><argument_list pos:start="89:17" pos:end="89:21">(<argument pos:start="89:18" pos:end="89:20"><expr pos:start="89:18" pos:end="89:20"><name pos:start="89:18" pos:end="89:20">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:22">(<expr pos:start="93:13" pos:end="93:21"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:21">firstenv</name></expr>)</condition> <block pos:start="93:24" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:27">

            <expr_stmt pos:start="95:13" pos:end="95:27"><expr pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:20">firstenv</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <name pos:start="95:24" pos:end="95:26">env</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:52"><expr pos:start="101:9" pos:end="101:51"><name pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:12">irqs</name><index pos:start="101:13" pos:end="101:15">[<expr pos:start="101:14" pos:end="101:14"><name pos:start="101:14" pos:end="101:14">i</name></expr>]</index></name> <operator pos:start="101:17" pos:end="101:17">=</operator> <name pos:start="101:19" pos:end="101:25"><name pos:start="101:19" pos:end="101:22">irqs</name><index pos:start="101:23" pos:end="101:25">[<expr pos:start="101:24" pos:end="101:24"><literal type="number" pos:start="101:24" pos:end="101:24">0</literal></expr>]</index></name> <operator pos:start="101:27" pos:end="101:27">+</operator> <operator pos:start="101:29" pos:end="101:29">(</operator><name pos:start="101:30" pos:end="101:30">i</name> <operator pos:start="101:32" pos:end="101:32">*</operator> <name pos:start="101:34" pos:end="101:50">OPENPIC_OUTPUT_NB</name><operator pos:start="101:51" pos:end="101:51">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:44"><expr pos:start="103:9" pos:end="103:43"><name pos:start="103:9" pos:end="103:13">input</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <operator pos:start="103:17" pos:end="103:17">(</operator><name pos:start="103:18" pos:end="103:25">qemu_irq</name> <operator pos:start="103:27" pos:end="103:27">*</operator><operator pos:start="103:28" pos:end="103:28">)</operator><name pos:start="103:29" pos:end="103:43"><name pos:start="103:29" pos:end="103:31">env</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:43">irq_inputs</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:63"><expr pos:start="105:9" pos:end="105:62"><name pos:start="105:9" pos:end="105:35"><name pos:start="105:9" pos:end="105:12">irqs</name><index pos:start="105:13" pos:end="105:15">[<expr pos:start="105:14" pos:end="105:14"><name pos:start="105:14" pos:end="105:14">i</name></expr>]</index><index pos:start="105:16" pos:end="105:35">[<expr pos:start="105:17" pos:end="105:34"><name pos:start="105:17" pos:end="105:34">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="105:37" pos:end="105:37">=</operator> <name pos:start="105:39" pos:end="105:62"><name pos:start="105:39" pos:end="105:43">input</name><index pos:start="105:44" pos:end="105:62">[<expr pos:start="105:45" pos:end="105:61"><name pos:start="105:45" pos:end="105:61">PPCE500_INPUT_INT</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:65"><expr pos:start="107:9" pos:end="107:64"><name pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:12">irqs</name><index pos:start="107:13" pos:end="107:15">[<expr pos:start="107:14" pos:end="107:14"><name pos:start="107:14" pos:end="107:14">i</name></expr>]</index><index pos:start="107:16" pos:end="107:36">[<expr pos:start="107:17" pos:end="107:35"><name pos:start="107:17" pos:end="107:35">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="107:38" pos:end="107:38">=</operator> <name pos:start="107:40" pos:end="107:64"><name pos:start="107:40" pos:end="107:44">input</name><index pos:start="107:45" pos:end="107:64">[<expr pos:start="107:46" pos:end="107:63"><name pos:start="107:46" pos:end="107:63">PPCE500_INPUT_CINT</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:69"><expr pos:start="109:9" pos:end="109:68"><name pos:start="109:9" pos:end="109:34"><name pos:start="109:9" pos:end="109:11">env</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:19">spr_cb</name><index pos:start="109:20" pos:end="109:34">[<expr pos:start="109:21" pos:end="109:33"><name pos:start="109:21" pos:end="109:33">SPR_BOOKE_PIR</name></expr>]</index></name><operator pos:start="109:35" pos:end="109:35">.</operator><name pos:start="109:36" pos:end="109:48">default_value</name> <operator pos:start="109:50" pos:end="109:50">=</operator> <name pos:start="109:52" pos:end="109:64"><name pos:start="109:52" pos:end="109:53">cs</name><operator pos:start="109:54" pos:end="109:55">-&gt;</operator><name pos:start="109:56" pos:end="109:64">cpu_index</name></name> <operator pos:start="109:66" pos:end="109:66">=</operator> <name pos:start="109:68" pos:end="109:68">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="113:57"><expr pos:start="111:9" pos:end="113:56"><name pos:start="111:9" pos:end="111:22"><name pos:start="111:9" pos:end="111:11">env</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:22">mpic_iack</name></name> <operator pos:start="111:24" pos:end="111:24">=</operator> <name pos:start="111:26" pos:end="111:45">MPC8544_CCSRBAR_BASE</name> <operator pos:start="111:47" pos:end="111:47">+</operator>

                         <name pos:start="113:26" pos:end="113:49">MPC8544_MPIC_REGS_OFFSET</name> <operator pos:start="113:51" pos:end="113:51">+</operator> <literal type="number" pos:start="113:53" pos:end="113:56">0xa0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:62"><expr pos:start="117:9" pos:end="117:61"><call pos:start="117:9" pos:end="117:61"><name pos:start="117:9" pos:end="117:29">ppc_booke_timers_init</name><argument_list pos:start="117:30" pos:end="117:61">(<argument pos:start="117:31" pos:end="117:33"><expr pos:start="117:31" pos:end="117:33"><name pos:start="117:31" pos:end="117:33">cpu</name></expr></argument>, <argument pos:start="117:36" pos:end="117:44"><expr pos:start="117:36" pos:end="117:44"><literal type="number" pos:start="117:36" pos:end="117:44">400000000</literal></expr></argument>, <argument pos:start="117:47" pos:end="117:60"><expr pos:start="117:47" pos:end="117:60"><name pos:start="117:47" pos:end="117:60">PPC_TIMER_E500</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:36">/* Register reset handler */</comment>

        <if_stmt pos:start="123:9" pos:end="141:9"><if pos:start="123:9" pos:end="135:9">if <condition pos:start="123:12" pos:end="123:15">(<expr pos:start="123:13" pos:end="123:14"><operator pos:start="123:13" pos:end="123:13">!</operator><name pos:start="123:14" pos:end="123:14">i</name></expr>)</condition> <block pos:start="123:17" pos:end="135:9">{<block_content pos:start="127:13" pos:end="133:39">

            <comment type="block" pos:start="125:13" pos:end="125:29">/* Primary CPU */</comment>

            <decl_stmt pos:start="127:13" pos:end="127:40"><decl pos:start="127:13" pos:end="127:39"><type pos:start="127:13" pos:end="127:30"><name pos:start="127:13" pos:end="127:28"><name pos:start="127:13" pos:end="127:18">struct</name> <name pos:start="127:20" pos:end="127:28">boot_info</name></name> <modifier pos:start="127:30" pos:end="127:30">*</modifier></type><name pos:start="127:31" pos:end="127:39">boot_info</name></decl>;</decl_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:60"><expr pos:start="129:13" pos:end="129:59"><name pos:start="129:13" pos:end="129:21">boot_info</name> <operator pos:start="129:23" pos:end="129:23">=</operator> <call pos:start="129:25" pos:end="129:59"><name pos:start="129:25" pos:end="129:33">g_malloc0</name><argument_list pos:start="129:34" pos:end="129:59">(<argument pos:start="129:35" pos:end="129:58"><expr pos:start="129:35" pos:end="129:58"><sizeof pos:start="129:35" pos:end="129:58">sizeof<argument_list pos:start="129:41" pos:end="129:58">(<argument pos:start="129:42" pos:end="129:57"><expr pos:start="129:42" pos:end="129:57">struct <name pos:start="129:49" pos:end="129:57">boot_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:56"><expr pos:start="131:13" pos:end="131:55"><call pos:start="131:13" pos:end="131:55"><name pos:start="131:13" pos:end="131:31">qemu_register_reset</name><argument_list pos:start="131:32" pos:end="131:55">(<argument pos:start="131:33" pos:end="131:49"><expr pos:start="131:33" pos:end="131:49"><name pos:start="131:33" pos:end="131:49">ppce500_cpu_reset</name></expr></argument>, <argument pos:start="131:52" pos:end="131:54"><expr pos:start="131:52" pos:end="131:54"><name pos:start="131:52" pos:end="131:54">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:39"><expr pos:start="133:13" pos:end="133:38"><name pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:15">env</name><operator pos:start="133:16" pos:end="133:17">-&gt;</operator><name pos:start="133:18" pos:end="133:26">load_info</name></name> <operator pos:start="133:28" pos:end="133:28">=</operator> <name pos:start="133:30" pos:end="133:38">boot_info</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="141:9">else <block pos:start="135:16" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:60">

            <comment type="block" pos:start="137:13" pos:end="137:32">/* Secondary CPUs */</comment>

            <expr_stmt pos:start="139:13" pos:end="139:60"><expr pos:start="139:13" pos:end="139:59"><call pos:start="139:13" pos:end="139:59"><name pos:start="139:13" pos:end="139:31">qemu_register_reset</name><argument_list pos:start="139:32" pos:end="139:59">(<argument pos:start="139:33" pos:end="139:53"><expr pos:start="139:33" pos:end="139:53"><name pos:start="139:33" pos:end="139:53">ppce500_cpu_reset_sec</name></expr></argument>, <argument pos:start="139:56" pos:end="139:58"><expr pos:start="139:56" pos:end="139:58"><name pos:start="139:56" pos:end="139:58">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="147:5" pos:end="147:19"><expr pos:start="147:5" pos:end="147:18"><name pos:start="147:5" pos:end="147:7">env</name> <operator pos:start="147:9" pos:end="147:9">=</operator> <name pos:start="147:11" pos:end="147:18">firstenv</name></expr>;</expr_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:51">/* Fixup Memory size on a alignment boundary */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:39"><expr pos:start="153:5" pos:end="153:38"><name pos:start="153:5" pos:end="153:12">ram_size</name> <operator pos:start="153:14" pos:end="153:15">&amp;=</operator> <operator pos:start="153:17" pos:end="153:17">~</operator><operator pos:start="153:18" pos:end="153:18">(</operator><name pos:start="153:19" pos:end="153:33">RAM_SIZES_ALIGN</name> <operator pos:start="153:35" pos:end="153:35">-</operator> <literal type="number" pos:start="153:37" pos:end="153:37">1</literal><operator pos:start="153:38" pos:end="153:38">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:33"><expr pos:start="155:5" pos:end="155:32"><name pos:start="155:5" pos:end="155:21"><name pos:start="155:5" pos:end="155:11">machine</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:21">ram_size</name></name> <operator pos:start="155:23" pos:end="155:23">=</operator> <name pos:start="155:25" pos:end="155:32">ram_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:25">/* Register Memory */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:65"><expr pos:start="161:5" pos:end="161:64"><call pos:start="161:5" pos:end="161:64"><name pos:start="161:5" pos:end="161:26">memory_region_init_ram</name><argument_list pos:start="161:27" pos:end="161:64">(<argument pos:start="161:28" pos:end="161:30"><expr pos:start="161:28" pos:end="161:30"><name pos:start="161:28" pos:end="161:30">ram</name></expr></argument>, <argument pos:start="161:33" pos:end="161:36"><expr pos:start="161:33" pos:end="161:36"><name pos:start="161:33" pos:end="161:36">NULL</name></expr></argument>, <argument pos:start="161:39" pos:end="161:53"><expr pos:start="161:39" pos:end="161:53"><literal type="string" pos:start="161:39" pos:end="161:53">"mpc8544ds.ram"</literal></expr></argument>, <argument pos:start="161:56" pos:end="161:63"><expr pos:start="161:56" pos:end="161:63"><name pos:start="161:56" pos:end="161:63">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:37"><expr pos:start="163:5" pos:end="163:36"><call pos:start="163:5" pos:end="163:36"><name pos:start="163:5" pos:end="163:31">vmstate_register_ram_global</name><argument_list pos:start="163:32" pos:end="163:36">(<argument pos:start="163:33" pos:end="163:35"><expr pos:start="163:33" pos:end="163:35"><name pos:start="163:33" pos:end="163:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:59"><expr pos:start="165:5" pos:end="165:58"><call pos:start="165:5" pos:end="165:58"><name pos:start="165:5" pos:end="165:31">memory_region_add_subregion</name><argument_list pos:start="165:32" pos:end="165:58">(<argument pos:start="165:33" pos:end="165:49"><expr pos:start="165:33" pos:end="165:49"><name pos:start="165:33" pos:end="165:49">address_space_mem</name></expr></argument>, <argument pos:start="165:52" pos:end="165:52"><expr pos:start="165:52" pos:end="165:52"><literal type="number" pos:start="165:52" pos:end="165:52">0</literal></expr></argument>, <argument pos:start="165:55" pos:end="165:57"><expr pos:start="165:55" pos:end="165:57"><name pos:start="165:55" pos:end="165:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:41"><expr pos:start="169:5" pos:end="169:40"><name pos:start="169:5" pos:end="169:7">dev</name> <operator pos:start="169:9" pos:end="169:9">=</operator> <call pos:start="169:11" pos:end="169:40"><name pos:start="169:11" pos:end="169:21">qdev_create</name><argument_list pos:start="169:22" pos:end="169:40">(<argument pos:start="169:23" pos:end="169:26"><expr pos:start="169:23" pos:end="169:26"><name pos:start="169:23" pos:end="169:26">NULL</name></expr></argument>, <argument pos:start="169:29" pos:end="169:39"><expr pos:start="169:29" pos:end="169:39"><literal type="string" pos:start="169:29" pos:end="169:39">"e500-ccsr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="173:49"><expr pos:start="171:5" pos:end="173:48"><call pos:start="171:5" pos:end="173:48"><name pos:start="171:5" pos:end="171:29">object_property_add_child</name><argument_list pos:start="171:30" pos:end="173:48">(<argument pos:start="171:31" pos:end="171:48"><expr pos:start="171:31" pos:end="171:48"><call pos:start="171:31" pos:end="171:48"><name pos:start="171:31" pos:end="171:46">qdev_get_machine</name><argument_list pos:start="171:47" pos:end="171:48">()</argument_list></call></expr></argument>, <argument pos:start="171:51" pos:end="171:61"><expr pos:start="171:51" pos:end="171:61"><literal type="string" pos:start="171:51" pos:end="171:61">"e500-ccsr"</literal></expr></argument>,

                              <argument pos:start="173:31" pos:end="173:41"><expr pos:start="173:31" pos:end="173:41"><call pos:start="173:31" pos:end="173:41"><name pos:start="173:31" pos:end="173:36">OBJECT</name><argument_list pos:start="173:37" pos:end="173:41">(<argument pos:start="173:38" pos:end="173:40"><expr pos:start="173:38" pos:end="173:40"><name pos:start="173:38" pos:end="173:40">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="173:44" pos:end="173:47"><expr pos:start="173:44" pos:end="173:47"><name pos:start="173:44" pos:end="173:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:26"><expr pos:start="175:5" pos:end="175:25"><call pos:start="175:5" pos:end="175:25"><name pos:start="175:5" pos:end="175:20">qdev_init_nofail</name><argument_list pos:start="175:21" pos:end="175:25">(<argument pos:start="175:22" pos:end="175:24"><expr pos:start="175:22" pos:end="175:24"><name pos:start="175:22" pos:end="175:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:21"><expr pos:start="177:5" pos:end="177:20"><name pos:start="177:5" pos:end="177:8">ccsr</name> <operator pos:start="177:10" pos:end="177:10">=</operator> <call pos:start="177:12" pos:end="177:20"><name pos:start="177:12" pos:end="177:15">CCSR</name><argument_list pos:start="177:16" pos:end="177:20">(<argument pos:start="177:17" pos:end="177:19"><expr pos:start="177:17" pos:end="177:19"><name pos:start="177:17" pos:end="177:19">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:40"><expr pos:start="179:5" pos:end="179:39"><name pos:start="179:5" pos:end="179:19">ccsr_addr_space</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <operator pos:start="179:23" pos:end="179:23">&amp;</operator><name pos:start="179:24" pos:end="179:39"><name pos:start="179:24" pos:end="179:27">ccsr</name><operator pos:start="179:28" pos:end="179:29">-&gt;</operator><name pos:start="179:30" pos:end="179:39">ccsr_space</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="183:49"><expr pos:start="181:5" pos:end="183:48"><call pos:start="181:5" pos:end="183:48"><name pos:start="181:5" pos:end="181:31">memory_region_add_subregion</name><argument_list pos:start="181:32" pos:end="183:48">(<argument pos:start="181:33" pos:end="181:49"><expr pos:start="181:33" pos:end="181:49"><name pos:start="181:33" pos:end="181:49">address_space_mem</name></expr></argument>, <argument pos:start="181:52" pos:end="181:71"><expr pos:start="181:52" pos:end="181:71"><name pos:start="181:52" pos:end="181:71">MPC8544_CCSRBAR_BASE</name></expr></argument>,

                                <argument pos:start="183:33" pos:end="183:47"><expr pos:start="183:33" pos:end="183:47"><name pos:start="183:33" pos:end="183:47">ccsr_addr_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:60"><expr pos:start="187:5" pos:end="187:59"><name pos:start="187:5" pos:end="187:8">mpic</name> <operator pos:start="187:10" pos:end="187:10">=</operator> <call pos:start="187:12" pos:end="187:59"><name pos:start="187:12" pos:end="187:28">ppce500_init_mpic</name><argument_list pos:start="187:29" pos:end="187:59">(<argument pos:start="187:30" pos:end="187:35"><expr pos:start="187:30" pos:end="187:35"><name pos:start="187:30" pos:end="187:35">params</name></expr></argument>, <argument pos:start="187:38" pos:end="187:52"><expr pos:start="187:38" pos:end="187:52"><name pos:start="187:38" pos:end="187:52">ccsr_addr_space</name></expr></argument>, <argument pos:start="187:55" pos:end="187:58"><expr pos:start="187:55" pos:end="187:58"><name pos:start="187:55" pos:end="187:58">irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:16">/* Serial */</comment>

    <if_stmt pos:start="193:5" pos:end="201:5"><if pos:start="193:5" pos:end="201:5">if <condition pos:start="193:8" pos:end="193:22">(<expr pos:start="193:9" pos:end="193:21"><name pos:start="193:9" pos:end="193:21"><name pos:start="193:9" pos:end="193:18">serial_hds</name><index pos:start="193:19" pos:end="193:21">[<expr pos:start="193:20" pos:end="193:20"><literal type="number" pos:start="193:20" pos:end="193:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="193:24" pos:end="201:5">{<block_content pos:start="195:9" pos:end="199:57">

        <expr_stmt pos:start="195:9" pos:end="199:57"><expr pos:start="195:9" pos:end="199:56"><call pos:start="195:9" pos:end="199:56"><name pos:start="195:9" pos:end="195:22">serial_mm_init</name><argument_list pos:start="195:23" pos:end="199:56">(<argument pos:start="195:24" pos:end="195:38"><expr pos:start="195:24" pos:end="195:38"><name pos:start="195:24" pos:end="195:38">ccsr_addr_space</name></expr></argument>, <argument pos:start="195:41" pos:end="195:67"><expr pos:start="195:41" pos:end="195:67"><name pos:start="195:41" pos:end="195:67">MPC8544_SERIAL0_REGS_OFFSET</name></expr></argument>,

                       <argument pos:start="197:24" pos:end="197:24"><expr pos:start="197:24" pos:end="197:24"><literal type="number" pos:start="197:24" pos:end="197:24">0</literal></expr></argument>, <argument pos:start="197:27" pos:end="197:34"><expr pos:start="197:27" pos:end="197:34"><name pos:start="197:27" pos:end="197:34"><name pos:start="197:27" pos:end="197:30">mpic</name><index pos:start="197:31" pos:end="197:34">[<expr pos:start="197:32" pos:end="197:33"><literal type="number" pos:start="197:32" pos:end="197:33">42</literal></expr>]</index></name></expr></argument>, <argument pos:start="197:37" pos:end="197:42"><expr pos:start="197:37" pos:end="197:42"><literal type="number" pos:start="197:37" pos:end="197:42">399193</literal></expr></argument>,

                       <argument pos:start="199:24" pos:end="199:36"><expr pos:start="199:24" pos:end="199:36"><name pos:start="199:24" pos:end="199:36"><name pos:start="199:24" pos:end="199:33">serial_hds</name><index pos:start="199:34" pos:end="199:36">[<expr pos:start="199:35" pos:end="199:35"><literal type="number" pos:start="199:35" pos:end="199:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="199:39" pos:end="199:55"><expr pos:start="199:39" pos:end="199:55"><name pos:start="199:39" pos:end="199:55">DEVICE_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="205:5" pos:end="213:5"><if pos:start="205:5" pos:end="213:5">if <condition pos:start="205:8" pos:end="205:22">(<expr pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:18">serial_hds</name><index pos:start="205:19" pos:end="205:21">[<expr pos:start="205:20" pos:end="205:20"><literal type="number" pos:start="205:20" pos:end="205:20">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="205:24" pos:end="213:5">{<block_content pos:start="207:9" pos:end="211:57">

        <expr_stmt pos:start="207:9" pos:end="211:57"><expr pos:start="207:9" pos:end="211:56"><call pos:start="207:9" pos:end="211:56"><name pos:start="207:9" pos:end="207:22">serial_mm_init</name><argument_list pos:start="207:23" pos:end="211:56">(<argument pos:start="207:24" pos:end="207:38"><expr pos:start="207:24" pos:end="207:38"><name pos:start="207:24" pos:end="207:38">ccsr_addr_space</name></expr></argument>, <argument pos:start="207:41" pos:end="207:67"><expr pos:start="207:41" pos:end="207:67"><name pos:start="207:41" pos:end="207:67">MPC8544_SERIAL1_REGS_OFFSET</name></expr></argument>,

                       <argument pos:start="209:24" pos:end="209:24"><expr pos:start="209:24" pos:end="209:24"><literal type="number" pos:start="209:24" pos:end="209:24">0</literal></expr></argument>, <argument pos:start="209:27" pos:end="209:34"><expr pos:start="209:27" pos:end="209:34"><name pos:start="209:27" pos:end="209:34"><name pos:start="209:27" pos:end="209:30">mpic</name><index pos:start="209:31" pos:end="209:34">[<expr pos:start="209:32" pos:end="209:33"><literal type="number" pos:start="209:32" pos:end="209:33">42</literal></expr>]</index></name></expr></argument>, <argument pos:start="209:37" pos:end="209:42"><expr pos:start="209:37" pos:end="209:42"><literal type="number" pos:start="209:37" pos:end="209:42">399193</literal></expr></argument>,

                       <argument pos:start="211:24" pos:end="211:36"><expr pos:start="211:24" pos:end="211:36"><name pos:start="211:24" pos:end="211:36"><name pos:start="211:24" pos:end="211:33">serial_hds</name><index pos:start="211:34" pos:end="211:36">[<expr pos:start="211:35" pos:end="211:35"><literal type="number" pos:start="211:35" pos:end="211:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="211:39" pos:end="211:55"><expr pos:start="211:39" pos:end="211:55"><name pos:start="211:39" pos:end="211:55">DEVICE_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="217:5" pos:end="217:32">/* General Utility device */</comment>

    <expr_stmt pos:start="219:5" pos:end="219:44"><expr pos:start="219:5" pos:end="219:43"><name pos:start="219:5" pos:end="219:7">dev</name> <operator pos:start="219:9" pos:end="219:9">=</operator> <call pos:start="219:11" pos:end="219:43"><name pos:start="219:11" pos:end="219:21">qdev_create</name><argument_list pos:start="219:22" pos:end="219:43">(<argument pos:start="219:23" pos:end="219:26"><expr pos:start="219:23" pos:end="219:26"><name pos:start="219:23" pos:end="219:26">NULL</name></expr></argument>, <argument pos:start="219:29" pos:end="219:42"><expr pos:start="219:29" pos:end="219:42"><literal type="string" pos:start="219:29" pos:end="219:42">"mpc8544-guts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:26"><expr pos:start="221:5" pos:end="221:25"><call pos:start="221:5" pos:end="221:25"><name pos:start="221:5" pos:end="221:20">qdev_init_nofail</name><argument_list pos:start="221:21" pos:end="221:25">(<argument pos:start="221:22" pos:end="221:24"><expr pos:start="221:22" pos:end="221:24"><name pos:start="221:22" pos:end="221:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:28"><expr pos:start="223:5" pos:end="223:27"><name pos:start="223:5" pos:end="223:5">s</name> <operator pos:start="223:7" pos:end="223:7">=</operator> <call pos:start="223:9" pos:end="223:27"><name pos:start="223:9" pos:end="223:22">SYS_BUS_DEVICE</name><argument_list pos:start="223:23" pos:end="223:27">(<argument pos:start="223:24" pos:end="223:26"><expr pos:start="223:24" pos:end="223:26"><name pos:start="223:24" pos:end="223:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="227:62"><expr pos:start="225:5" pos:end="227:61"><call pos:start="225:5" pos:end="227:61"><name pos:start="225:5" pos:end="225:31">memory_region_add_subregion</name><argument_list pos:start="225:32" pos:end="227:61">(<argument pos:start="225:33" pos:end="225:47"><expr pos:start="225:33" pos:end="225:47"><name pos:start="225:33" pos:end="225:47">ccsr_addr_space</name></expr></argument>, <argument pos:start="225:50" pos:end="225:68"><expr pos:start="225:50" pos:end="225:68"><name pos:start="225:50" pos:end="225:68">MPC8544_UTIL_OFFSET</name></expr></argument>,

                                <argument pos:start="227:33" pos:end="227:60"><expr pos:start="227:33" pos:end="227:60"><call pos:start="227:33" pos:end="227:60"><name pos:start="227:33" pos:end="227:54">sysbus_mmio_get_region</name><argument_list pos:start="227:55" pos:end="227:60">(<argument pos:start="227:56" pos:end="227:56"><expr pos:start="227:56" pos:end="227:56"><name pos:start="227:56" pos:end="227:56">s</name></expr></argument>, <argument pos:start="227:59" pos:end="227:59"><expr pos:start="227:59" pos:end="227:59"><literal type="number" pos:start="227:59" pos:end="227:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:13">/* PCI */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:44"><expr pos:start="233:5" pos:end="233:43"><name pos:start="233:5" pos:end="233:7">dev</name> <operator pos:start="233:9" pos:end="233:9">=</operator> <call pos:start="233:11" pos:end="233:43"><name pos:start="233:11" pos:end="233:21">qdev_create</name><argument_list pos:start="233:22" pos:end="233:43">(<argument pos:start="233:23" pos:end="233:26"><expr pos:start="233:23" pos:end="233:26"><name pos:start="233:23" pos:end="233:26">NULL</name></expr></argument>, <argument pos:start="233:29" pos:end="233:42"><expr pos:start="233:29" pos:end="233:42"><literal type="string" pos:start="233:29" pos:end="233:42">"e500-pcihost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:68"><expr pos:start="235:5" pos:end="235:67"><call pos:start="235:5" pos:end="235:67"><name pos:start="235:5" pos:end="235:24">qdev_prop_set_uint32</name><argument_list pos:start="235:25" pos:end="235:67">(<argument pos:start="235:26" pos:end="235:28"><expr pos:start="235:26" pos:end="235:28"><name pos:start="235:26" pos:end="235:28">dev</name></expr></argument>, <argument pos:start="235:31" pos:end="235:42"><expr pos:start="235:31" pos:end="235:42"><literal type="string" pos:start="235:31" pos:end="235:42">"first_slot"</literal></expr></argument>, <argument pos:start="235:45" pos:end="235:66"><expr pos:start="235:45" pos:end="235:66"><name pos:start="235:45" pos:end="235:66"><name pos:start="235:45" pos:end="235:50">params</name><operator pos:start="235:51" pos:end="235:52">-&gt;</operator><name pos:start="235:53" pos:end="235:66">pci_first_slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:63"><expr pos:start="237:5" pos:end="237:62"><call pos:start="237:5" pos:end="237:62"><name pos:start="237:5" pos:end="237:24">qdev_prop_set_uint32</name><argument_list pos:start="237:25" pos:end="237:62">(<argument pos:start="237:26" pos:end="237:28"><expr pos:start="237:26" pos:end="237:28"><name pos:start="237:26" pos:end="237:28">dev</name></expr></argument>, <argument pos:start="237:31" pos:end="237:45"><expr pos:start="237:31" pos:end="237:45"><literal type="string" pos:start="237:31" pos:end="237:45">"first_pin_irq"</literal></expr></argument>, <argument pos:start="237:48" pos:end="237:61"><expr pos:start="237:48" pos:end="237:61"><name pos:start="237:48" pos:end="237:61"><name pos:start="237:48" pos:end="237:58">pci_irq_nrs</name><index pos:start="237:59" pos:end="237:61">[<expr pos:start="237:60" pos:end="237:60"><literal type="number" pos:start="237:60" pos:end="237:60">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:26"><expr pos:start="239:5" pos:end="239:25"><call pos:start="239:5" pos:end="239:25"><name pos:start="239:5" pos:end="239:20">qdev_init_nofail</name><argument_list pos:start="239:21" pos:end="239:25">(<argument pos:start="239:22" pos:end="239:24"><expr pos:start="239:22" pos:end="239:24"><name pos:start="239:22" pos:end="239:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:28"><expr pos:start="241:5" pos:end="241:27"><name pos:start="241:5" pos:end="241:5">s</name> <operator pos:start="241:7" pos:end="241:7">=</operator> <call pos:start="241:9" pos:end="241:27"><name pos:start="241:9" pos:end="241:22">SYS_BUS_DEVICE</name><argument_list pos:start="241:23" pos:end="241:27">(<argument pos:start="241:24" pos:end="241:26"><expr pos:start="241:24" pos:end="241:26"><name pos:start="241:24" pos:end="241:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="243:5" pos:end="247:5">for <control pos:start="243:9" pos:end="243:38">(<init pos:start="243:10" pos:end="243:15"><expr pos:start="243:10" pos:end="243:14"><name pos:start="243:10" pos:end="243:10">i</name> <operator pos:start="243:12" pos:end="243:12">=</operator> <literal type="number" pos:start="243:14" pos:end="243:14">0</literal></expr>;</init> <condition pos:start="243:17" pos:end="243:33"><expr pos:start="243:17" pos:end="243:32"><name pos:start="243:17" pos:end="243:17">i</name> <operator pos:start="243:19" pos:end="243:19">&lt;</operator> <name pos:start="243:21" pos:end="243:32">PCI_NUM_PINS</name></expr>;</condition> <incr pos:start="243:35" pos:end="243:37"><expr pos:start="243:35" pos:end="243:37"><name pos:start="243:35" pos:end="243:35">i</name><operator pos:start="243:36" pos:end="243:37">++</operator></expr></incr>)</control> <block pos:start="243:40" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:55">

        <expr_stmt pos:start="245:9" pos:end="245:55"><expr pos:start="245:9" pos:end="245:54"><call pos:start="245:9" pos:end="245:54"><name pos:start="245:9" pos:end="245:26">sysbus_connect_irq</name><argument_list pos:start="245:27" pos:end="245:54">(<argument pos:start="245:28" pos:end="245:28"><expr pos:start="245:28" pos:end="245:28"><name pos:start="245:28" pos:end="245:28">s</name></expr></argument>, <argument pos:start="245:31" pos:end="245:31"><expr pos:start="245:31" pos:end="245:31"><name pos:start="245:31" pos:end="245:31">i</name></expr></argument>, <argument pos:start="245:34" pos:end="245:53"><expr pos:start="245:34" pos:end="245:53"><name pos:start="245:34" pos:end="245:53"><name pos:start="245:34" pos:end="245:37">mpic</name><index pos:start="245:38" pos:end="245:53">[<expr pos:start="245:39" pos:end="245:52"><name pos:start="245:39" pos:end="245:52"><name pos:start="245:39" pos:end="245:49">pci_irq_nrs</name><index pos:start="245:50" pos:end="245:52">[<expr pos:start="245:51" pos:end="245:51"><name pos:start="245:51" pos:end="245:51">i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="251:5" pos:end="253:62"><expr pos:start="251:5" pos:end="253:61"><call pos:start="251:5" pos:end="253:61"><name pos:start="251:5" pos:end="251:31">memory_region_add_subregion</name><argument_list pos:start="251:32" pos:end="253:61">(<argument pos:start="251:33" pos:end="251:47"><expr pos:start="251:33" pos:end="251:47"><name pos:start="251:33" pos:end="251:47">ccsr_addr_space</name></expr></argument>, <argument pos:start="251:50" pos:end="251:72"><expr pos:start="251:50" pos:end="251:72"><name pos:start="251:50" pos:end="251:72">MPC8544_PCI_REGS_OFFSET</name></expr></argument>,

                                <argument pos:start="253:33" pos:end="253:60"><expr pos:start="253:33" pos:end="253:60"><call pos:start="253:33" pos:end="253:60"><name pos:start="253:33" pos:end="253:54">sysbus_mmio_get_region</name><argument_list pos:start="253:55" pos:end="253:60">(<argument pos:start="253:56" pos:end="253:56"><expr pos:start="253:56" pos:end="253:56"><name pos:start="253:56" pos:end="253:56">s</name></expr></argument>, <argument pos:start="253:59" pos:end="253:59"><expr pos:start="253:59" pos:end="253:59"><literal type="number" pos:start="253:59" pos:end="253:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="257:5" pos:end="257:57"><expr pos:start="257:5" pos:end="257:56"><name pos:start="257:5" pos:end="257:11">pci_bus</name> <operator pos:start="257:13" pos:end="257:13">=</operator> <operator pos:start="257:15" pos:end="257:15">(</operator><name pos:start="257:16" pos:end="257:21">PCIBus</name> <operator pos:start="257:23" pos:end="257:23">*</operator><operator pos:start="257:24" pos:end="257:24">)</operator><call pos:start="257:25" pos:end="257:56"><name pos:start="257:25" pos:end="257:42">qdev_get_child_bus</name><argument_list pos:start="257:43" pos:end="257:56">(<argument pos:start="257:44" pos:end="257:46"><expr pos:start="257:44" pos:end="257:46"><name pos:start="257:44" pos:end="257:46">dev</name></expr></argument>, <argument pos:start="257:49" pos:end="257:55"><expr pos:start="257:49" pos:end="257:55"><literal type="string" pos:start="257:49" pos:end="257:55">"pci.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="259:5" pos:end="261:52"><if pos:start="259:5" pos:end="261:52">if <condition pos:start="259:8" pos:end="259:17">(<expr pos:start="259:9" pos:end="259:16"><operator pos:start="259:9" pos:end="259:9">!</operator><name pos:start="259:10" pos:end="259:16">pci_bus</name></expr>)</condition><block type="pseudo" pos:start="261:9" pos:end="261:52"><block_content pos:start="261:9" pos:end="261:52">

        <expr_stmt pos:start="261:9" pos:end="261:52"><expr pos:start="261:9" pos:end="261:51"><call pos:start="261:9" pos:end="261:51"><name pos:start="261:9" pos:end="261:14">printf</name><argument_list pos:start="261:15" pos:end="261:51">(<argument pos:start="261:16" pos:end="261:50"><expr pos:start="261:16" pos:end="261:50"><literal type="string" pos:start="261:16" pos:end="261:50">"couldn't create PCI controller!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="265:5" pos:end="265:60"><expr pos:start="265:5" pos:end="265:59"><call pos:start="265:5" pos:end="265:59"><name pos:start="265:5" pos:end="265:19">sysbus_mmio_map</name><argument_list pos:start="265:20" pos:end="265:59">(<argument pos:start="265:21" pos:end="265:39"><expr pos:start="265:21" pos:end="265:39"><call pos:start="265:21" pos:end="265:39"><name pos:start="265:21" pos:end="265:34">SYS_BUS_DEVICE</name><argument_list pos:start="265:35" pos:end="265:39">(<argument pos:start="265:36" pos:end="265:38"><expr pos:start="265:36" pos:end="265:38"><name pos:start="265:36" pos:end="265:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="265:42" pos:end="265:42"><expr pos:start="265:42" pos:end="265:42"><literal type="number" pos:start="265:42" pos:end="265:42">1</literal></expr></argument>, <argument pos:start="265:45" pos:end="265:58"><expr pos:start="265:45" pos:end="265:58"><name pos:start="265:45" pos:end="265:58">MPC8544_PCI_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="269:5" pos:end="279:5"><if pos:start="269:5" pos:end="279:5">if <condition pos:start="269:8" pos:end="269:16">(<expr pos:start="269:9" pos:end="269:15"><name pos:start="269:9" pos:end="269:15">pci_bus</name></expr>)</condition> <block pos:start="269:18" pos:end="279:5">{<block_content pos:start="273:9" pos:end="277:9">

        <comment type="block" pos:start="271:9" pos:end="271:42">/* Register network interfaces. */</comment>

        <for pos:start="273:9" pos:end="277:9">for <control pos:start="273:13" pos:end="273:37">(<init pos:start="273:14" pos:end="273:19"><expr pos:start="273:14" pos:end="273:18"><name pos:start="273:14" pos:end="273:14">i</name> <operator pos:start="273:16" pos:end="273:16">=</operator> <literal type="number" pos:start="273:18" pos:end="273:18">0</literal></expr>;</init> <condition pos:start="273:21" pos:end="273:32"><expr pos:start="273:21" pos:end="273:31"><name pos:start="273:21" pos:end="273:21">i</name> <operator pos:start="273:23" pos:end="273:23">&lt;</operator> <name pos:start="273:25" pos:end="273:31">nb_nics</name></expr>;</condition> <incr pos:start="273:34" pos:end="273:36"><expr pos:start="273:34" pos:end="273:36"><name pos:start="273:34" pos:end="273:34">i</name><operator pos:start="273:35" pos:end="273:36">++</operator></expr></incr>)</control> <block pos:start="273:39" pos:end="277:9">{<block_content pos:start="275:13" pos:end="275:71">

            <expr_stmt pos:start="275:13" pos:end="275:71"><expr pos:start="275:13" pos:end="275:70"><call pos:start="275:13" pos:end="275:70"><name pos:start="275:13" pos:end="275:31">pci_nic_init_nofail</name><argument_list pos:start="275:32" pos:end="275:70">(<argument pos:start="275:33" pos:end="275:44"><expr pos:start="275:33" pos:end="275:44"><operator pos:start="275:33" pos:end="275:33">&amp;</operator><name pos:start="275:34" pos:end="275:44"><name pos:start="275:34" pos:end="275:41">nd_table</name><index pos:start="275:42" pos:end="275:44">[<expr pos:start="275:43" pos:end="275:43"><name pos:start="275:43" pos:end="275:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="275:47" pos:end="275:53"><expr pos:start="275:47" pos:end="275:53"><name pos:start="275:47" pos:end="275:53">pci_bus</name></expr></argument>, <argument pos:start="275:56" pos:end="275:63"><expr pos:start="275:56" pos:end="275:63"><literal type="string" pos:start="275:56" pos:end="275:63">"virtio"</literal></expr></argument>, <argument pos:start="275:66" pos:end="275:69"><expr pos:start="275:66" pos:end="275:69"><name pos:start="275:66" pos:end="275:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="283:5" pos:end="283:34">/* Register spinning region */</comment>

    <expr_stmt pos:start="285:5" pos:end="285:63"><expr pos:start="285:5" pos:end="285:62"><call pos:start="285:5" pos:end="285:62"><name pos:start="285:5" pos:end="285:24">sysbus_create_simple</name><argument_list pos:start="285:25" pos:end="285:62">(<argument pos:start="285:26" pos:end="285:36"><expr pos:start="285:26" pos:end="285:36"><literal type="string" pos:start="285:26" pos:end="285:36">"e500-spin"</literal></expr></argument>, <argument pos:start="285:39" pos:end="285:55"><expr pos:start="285:39" pos:end="285:55"><name pos:start="285:39" pos:end="285:55">MPC8544_SPIN_BASE</name></expr></argument>, <argument pos:start="285:58" pos:end="285:61"><expr pos:start="285:58" pos:end="285:61"><name pos:start="285:58" pos:end="285:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="289:5" pos:end="289:22">/* Load kernel. */</comment>

    <if_stmt pos:start="291:5" pos:end="335:5"><if pos:start="291:5" pos:end="335:5">if <condition pos:start="291:8" pos:end="291:33">(<expr pos:start="291:9" pos:end="291:32"><name pos:start="291:9" pos:end="291:32"><name pos:start="291:9" pos:end="291:15">machine</name><operator pos:start="291:16" pos:end="291:17">-&gt;</operator><name pos:start="291:18" pos:end="291:32">kernel_filename</name></name></expr>)</condition> <block pos:start="291:35" pos:end="335:5">{<block_content pos:start="293:9" pos:end="333:33">

        <expr_stmt pos:start="293:9" pos:end="295:51"><expr pos:start="293:9" pos:end="295:50"><name pos:start="293:9" pos:end="293:19">kernel_size</name> <operator pos:start="293:21" pos:end="293:21">=</operator> <call pos:start="293:23" pos:end="295:50"><name pos:start="293:23" pos:end="293:33">load_uimage</name><argument_list pos:start="293:34" pos:end="295:50">(<argument pos:start="293:35" pos:end="293:58"><expr pos:start="293:35" pos:end="293:58"><name pos:start="293:35" pos:end="293:58"><name pos:start="293:35" pos:end="293:41">machine</name><operator pos:start="293:42" pos:end="293:43">-&gt;</operator><name pos:start="293:44" pos:end="293:58">kernel_filename</name></name></expr></argument>, <argument pos:start="293:61" pos:end="293:66"><expr pos:start="293:61" pos:end="293:66"><operator pos:start="293:61" pos:end="293:61">&amp;</operator><name pos:start="293:62" pos:end="293:66">entry</name></expr></argument>,

                                  <argument pos:start="295:35" pos:end="295:43"><expr pos:start="295:35" pos:end="295:43"><operator pos:start="295:35" pos:end="295:35">&amp;</operator><name pos:start="295:36" pos:end="295:43">loadaddr</name></expr></argument>, <argument pos:start="295:46" pos:end="295:49"><expr pos:start="295:46" pos:end="295:49"><name pos:start="295:46" pos:end="295:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="297:9" pos:end="309:9"><if pos:start="297:9" pos:end="309:9">if <condition pos:start="297:12" pos:end="297:28">(<expr pos:start="297:13" pos:end="297:27"><name pos:start="297:13" pos:end="297:23">kernel_size</name> <operator pos:start="297:25" pos:end="297:25">&lt;</operator> <literal type="number" pos:start="297:27" pos:end="297:27">0</literal></expr>)</condition> <block pos:start="297:30" pos:end="309:9">{<block_content pos:start="299:13" pos:end="307:35">

            <expr_stmt pos:start="299:13" pos:end="303:51"><expr pos:start="299:13" pos:end="303:50"><name pos:start="299:13" pos:end="299:23">kernel_size</name> <operator pos:start="299:25" pos:end="299:25">=</operator> <call pos:start="299:27" pos:end="303:50"><name pos:start="299:27" pos:end="299:34">load_elf</name><argument_list pos:start="299:35" pos:end="303:50">(<argument pos:start="299:36" pos:end="299:59"><expr pos:start="299:36" pos:end="299:59"><name pos:start="299:36" pos:end="299:59"><name pos:start="299:36" pos:end="299:42">machine</name><operator pos:start="299:43" pos:end="299:44">-&gt;</operator><name pos:start="299:45" pos:end="299:59">kernel_filename</name></name></expr></argument>, <argument pos:start="299:62" pos:end="299:65"><expr pos:start="299:62" pos:end="299:65"><name pos:start="299:62" pos:end="299:65">NULL</name></expr></argument>, <argument pos:start="299:68" pos:end="299:71"><expr pos:start="299:68" pos:end="299:71"><name pos:start="299:68" pos:end="299:71">NULL</name></expr></argument>,

                                   <argument pos:start="301:36" pos:end="301:45"><expr pos:start="301:36" pos:end="301:45"><operator pos:start="301:36" pos:end="301:36">&amp;</operator><name pos:start="301:37" pos:end="301:45">elf_entry</name></expr></argument>, <argument pos:start="301:48" pos:end="301:59"><expr pos:start="301:48" pos:end="301:59"><operator pos:start="301:48" pos:end="301:48">&amp;</operator><name pos:start="301:49" pos:end="301:59">elf_lowaddr</name></expr></argument>, <argument pos:start="301:62" pos:end="301:65"><expr pos:start="301:62" pos:end="301:65"><name pos:start="301:62" pos:end="301:65">NULL</name></expr></argument>, <argument pos:start="301:68" pos:end="301:68"><expr pos:start="301:68" pos:end="301:68"><literal type="number" pos:start="301:68" pos:end="301:68">1</literal></expr></argument>,

                                   <argument pos:start="303:36" pos:end="303:46"><expr pos:start="303:36" pos:end="303:46"><name pos:start="303:36" pos:end="303:46">ELF_MACHINE</name></expr></argument>, <argument pos:start="303:49" pos:end="303:49"><expr pos:start="303:49" pos:end="303:49"><literal type="number" pos:start="303:49" pos:end="303:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:30"><expr pos:start="305:13" pos:end="305:29"><name pos:start="305:13" pos:end="305:17">entry</name> <operator pos:start="305:19" pos:end="305:19">=</operator> <name pos:start="305:21" pos:end="305:29">elf_entry</name></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:35"><expr pos:start="307:13" pos:end="307:34"><name pos:start="307:13" pos:end="307:20">loadaddr</name> <operator pos:start="307:22" pos:end="307:22">=</operator> <name pos:start="307:24" pos:end="307:34">elf_lowaddr</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="311:9" pos:end="311:37">/* XXX try again as binary */</comment>

        <if_stmt pos:start="313:9" pos:end="321:9"><if pos:start="313:9" pos:end="321:9">if <condition pos:start="313:12" pos:end="313:28">(<expr pos:start="313:13" pos:end="313:27"><name pos:start="313:13" pos:end="313:23">kernel_size</name> <operator pos:start="313:25" pos:end="313:25">&lt;</operator> <literal type="number" pos:start="313:27" pos:end="313:27">0</literal></expr>)</condition> <block pos:start="313:30" pos:end="321:9">{<block_content pos:start="315:13" pos:end="319:20">

            <expr_stmt pos:start="315:13" pos:end="317:46"><expr pos:start="315:13" pos:end="317:45"><call pos:start="315:13" pos:end="317:45"><name pos:start="315:13" pos:end="315:19">fprintf</name><argument_list pos:start="315:20" pos:end="317:45">(<argument pos:start="315:21" pos:end="315:26"><expr pos:start="315:21" pos:end="315:26"><name pos:start="315:21" pos:end="315:26">stderr</name></expr></argument>, <argument pos:start="315:29" pos:end="315:64"><expr pos:start="315:29" pos:end="315:64"><literal type="string" pos:start="315:29" pos:end="315:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="317:21" pos:end="317:44"><expr pos:start="317:21" pos:end="317:44"><name pos:start="317:21" pos:end="317:44"><name pos:start="317:21" pos:end="317:27">machine</name><operator pos:start="317:28" pos:end="317:29">-&gt;</operator><name pos:start="317:30" pos:end="317:44">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:20"><expr pos:start="319:13" pos:end="319:19"><call pos:start="319:13" pos:end="319:19"><name pos:start="319:13" pos:end="319:16">exit</name><argument_list pos:start="319:17" pos:end="319:19">(<argument pos:start="319:18" pos:end="319:18"><expr pos:start="319:18" pos:end="319:18"><literal type="number" pos:start="319:18" pos:end="319:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="325:9" pos:end="325:42"><expr pos:start="325:9" pos:end="325:41"><name pos:start="325:9" pos:end="325:16">cur_base</name> <operator pos:start="325:18" pos:end="325:18">=</operator> <name pos:start="325:20" pos:end="325:27">loadaddr</name> <operator pos:start="325:29" pos:end="325:29">+</operator> <name pos:start="325:31" pos:end="325:41">kernel_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="329:9" pos:end="329:35">/* Reserve space for dtb */</comment>

        <expr_stmt pos:start="331:9" pos:end="331:60"><expr pos:start="331:9" pos:end="331:59"><name pos:start="331:9" pos:end="331:15">dt_base</name> <operator pos:start="331:17" pos:end="331:17">=</operator> <operator pos:start="331:19" pos:end="331:19">(</operator><name pos:start="331:20" pos:end="331:27">cur_base</name> <operator pos:start="331:29" pos:end="331:29">+</operator> <name pos:start="331:31" pos:end="331:42">DTC_LOAD_PAD</name><operator pos:start="331:43" pos:end="331:43">)</operator> <operator pos:start="331:45" pos:end="331:45">&amp;</operator> <operator pos:start="331:47" pos:end="331:47">~</operator><name pos:start="331:48" pos:end="331:59">DTC_PAD_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:33"><expr pos:start="333:9" pos:end="333:32"><name pos:start="333:9" pos:end="333:16">cur_base</name> <operator pos:start="333:18" pos:end="333:19">+=</operator> <name pos:start="333:21" pos:end="333:32">DTB_MAX_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="339:5" pos:end="339:22">/* Load initrd. */</comment>

    <if_stmt pos:start="341:5" pos:end="365:5"><if pos:start="341:5" pos:end="365:5">if <condition pos:start="341:8" pos:end="341:33">(<expr pos:start="341:9" pos:end="341:32"><name pos:start="341:9" pos:end="341:32"><name pos:start="341:9" pos:end="341:15">machine</name><operator pos:start="341:16" pos:end="341:17">-&gt;</operator><name pos:start="341:18" pos:end="341:32">initrd_filename</name></name></expr>)</condition> <block pos:start="341:35" pos:end="365:5">{<block_content pos:start="343:9" pos:end="363:45">

        <expr_stmt pos:start="343:9" pos:end="343:70"><expr pos:start="343:9" pos:end="343:69"><name pos:start="343:9" pos:end="343:19">initrd_base</name> <operator pos:start="343:21" pos:end="343:21">=</operator> <operator pos:start="343:23" pos:end="343:23">(</operator><name pos:start="343:24" pos:end="343:31">cur_base</name> <operator pos:start="343:33" pos:end="343:33">+</operator> <name pos:start="343:35" pos:end="343:49">INITRD_LOAD_PAD</name><operator pos:start="343:50" pos:end="343:50">)</operator> <operator pos:start="343:52" pos:end="343:52">&amp;</operator> <operator pos:start="343:54" pos:end="343:54">~</operator><name pos:start="343:55" pos:end="343:69">INITRD_PAD_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="347:66"><expr pos:start="345:9" pos:end="347:65"><name pos:start="345:9" pos:end="345:19">initrd_size</name> <operator pos:start="345:21" pos:end="345:21">=</operator> <call pos:start="345:23" pos:end="347:65"><name pos:start="345:23" pos:end="345:41">load_image_targphys</name><argument_list pos:start="345:42" pos:end="347:65">(<argument pos:start="345:43" pos:end="345:66"><expr pos:start="345:43" pos:end="345:66"><name pos:start="345:43" pos:end="345:66"><name pos:start="345:43" pos:end="345:49">machine</name><operator pos:start="345:50" pos:end="345:51">-&gt;</operator><name pos:start="345:52" pos:end="345:66">initrd_filename</name></name></expr></argument>, <argument pos:start="345:69" pos:end="345:79"><expr pos:start="345:69" pos:end="345:79"><name pos:start="345:69" pos:end="345:79">initrd_base</name></expr></argument>,

                                          <argument pos:start="347:43" pos:end="347:64"><expr pos:start="347:43" pos:end="347:64"><name pos:start="347:43" pos:end="347:50">ram_size</name> <operator pos:start="347:52" pos:end="347:52">-</operator> <name pos:start="347:54" pos:end="347:64">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="351:9" pos:end="359:9"><if pos:start="351:9" pos:end="359:9">if <condition pos:start="351:12" pos:end="351:28">(<expr pos:start="351:13" pos:end="351:27"><name pos:start="351:13" pos:end="351:23">initrd_size</name> <operator pos:start="351:25" pos:end="351:25">&lt;</operator> <literal type="number" pos:start="351:27" pos:end="351:27">0</literal></expr>)</condition> <block pos:start="351:30" pos:end="359:9">{<block_content pos:start="353:13" pos:end="357:20">

            <expr_stmt pos:start="353:13" pos:end="355:46"><expr pos:start="353:13" pos:end="355:45"><call pos:start="353:13" pos:end="355:45"><name pos:start="353:13" pos:end="353:19">fprintf</name><argument_list pos:start="353:20" pos:end="355:45">(<argument pos:start="353:21" pos:end="353:26"><expr pos:start="353:21" pos:end="353:26"><name pos:start="353:21" pos:end="353:26">stderr</name></expr></argument>, <argument pos:start="353:29" pos:end="353:74"><expr pos:start="353:29" pos:end="353:74"><literal type="string" pos:start="353:29" pos:end="353:74">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                    <argument pos:start="355:21" pos:end="355:44"><expr pos:start="355:21" pos:end="355:44"><name pos:start="355:21" pos:end="355:44"><name pos:start="355:21" pos:end="355:27">machine</name><operator pos:start="355:28" pos:end="355:29">-&gt;</operator><name pos:start="355:30" pos:end="355:44">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:20"><expr pos:start="357:13" pos:end="357:19"><call pos:start="357:13" pos:end="357:19"><name pos:start="357:13" pos:end="357:16">exit</name><argument_list pos:start="357:17" pos:end="357:19">(<argument pos:start="357:18" pos:end="357:18"><expr pos:start="357:18" pos:end="357:18"><literal type="number" pos:start="357:18" pos:end="357:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="363:9" pos:end="363:45"><expr pos:start="363:9" pos:end="363:44"><name pos:start="363:9" pos:end="363:16">cur_base</name> <operator pos:start="363:18" pos:end="363:18">=</operator> <name pos:start="363:20" pos:end="363:30">initrd_base</name> <operator pos:start="363:32" pos:end="363:32">+</operator> <name pos:start="363:34" pos:end="363:44">initrd_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="369:5" pos:end="369:79">/* If we're loading a kernel directly, we must load the device tree too. */</comment>

    <if_stmt pos:start="371:5" pos:end="403:5"><if pos:start="371:5" pos:end="403:5">if <condition pos:start="371:8" pos:end="371:33">(<expr pos:start="371:9" pos:end="371:32"><name pos:start="371:9" pos:end="371:32"><name pos:start="371:9" pos:end="371:15">machine</name><operator pos:start="371:16" pos:end="371:17">-&gt;</operator><name pos:start="371:18" pos:end="371:32">kernel_filename</name></name></expr>)</condition> <block pos:start="371:35" pos:end="403:5">{<block_content pos:start="373:9" pos:end="401:37">

        <decl_stmt pos:start="373:9" pos:end="373:36"><decl pos:start="373:9" pos:end="373:35"><type pos:start="373:9" pos:end="373:26"><name pos:start="373:9" pos:end="373:24"><name pos:start="373:9" pos:end="373:14">struct</name> <name pos:start="373:16" pos:end="373:24">boot_info</name></name> <modifier pos:start="373:26" pos:end="373:26">*</modifier></type><name pos:start="373:27" pos:end="373:35">boot_info</name></decl>;</decl_stmt>

        <decl_stmt pos:start="375:9" pos:end="375:20"><decl pos:start="375:9" pos:end="375:19"><type pos:start="375:9" pos:end="375:11"><name pos:start="375:9" pos:end="375:11">int</name></type> <name pos:start="375:13" pos:end="375:19">dt_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="379:9" pos:end="381:69"><expr pos:start="379:9" pos:end="381:68"><name pos:start="379:9" pos:end="379:15">dt_size</name> <operator pos:start="379:17" pos:end="379:17">=</operator> <call pos:start="379:19" pos:end="381:68"><name pos:start="379:19" pos:end="379:42">ppce500_prep_device_tree</name><argument_list pos:start="379:43" pos:end="381:68">(<argument pos:start="379:44" pos:end="379:50"><expr pos:start="379:44" pos:end="379:50"><name pos:start="379:44" pos:end="379:50">machine</name></expr></argument>, <argument pos:start="379:53" pos:end="379:58"><expr pos:start="379:53" pos:end="379:58"><name pos:start="379:53" pos:end="379:58">params</name></expr></argument>, <argument pos:start="379:61" pos:end="379:67"><expr pos:start="379:61" pos:end="379:67"><name pos:start="379:61" pos:end="379:67">dt_base</name></expr></argument>,

                                           <argument pos:start="381:44" pos:end="381:54"><expr pos:start="381:44" pos:end="381:54"><name pos:start="381:44" pos:end="381:54">initrd_base</name></expr></argument>, <argument pos:start="381:57" pos:end="381:67"><expr pos:start="381:57" pos:end="381:67"><name pos:start="381:57" pos:end="381:67">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="383:9" pos:end="389:9"><if pos:start="383:9" pos:end="389:9">if <condition pos:start="383:12" pos:end="383:24">(<expr pos:start="383:13" pos:end="383:23"><name pos:start="383:13" pos:end="383:19">dt_size</name> <operator pos:start="383:21" pos:end="383:21">&lt;</operator> <literal type="number" pos:start="383:23" pos:end="383:23">0</literal></expr>)</condition> <block pos:start="383:26" pos:end="389:9">{<block_content pos:start="385:13" pos:end="387:20">

            <expr_stmt pos:start="385:13" pos:end="385:59"><expr pos:start="385:13" pos:end="385:58"><call pos:start="385:13" pos:end="385:58"><name pos:start="385:13" pos:end="385:19">fprintf</name><argument_list pos:start="385:20" pos:end="385:58">(<argument pos:start="385:21" pos:end="385:26"><expr pos:start="385:21" pos:end="385:26"><name pos:start="385:21" pos:end="385:26">stderr</name></expr></argument>, <argument pos:start="385:29" pos:end="385:57"><expr pos:start="385:29" pos:end="385:57"><literal type="string" pos:start="385:29" pos:end="385:57">"couldn't load device tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:20"><expr pos:start="387:13" pos:end="387:19"><call pos:start="387:13" pos:end="387:19"><name pos:start="387:13" pos:end="387:16">exit</name><argument_list pos:start="387:17" pos:end="387:19">(<argument pos:start="387:18" pos:end="387:18"><expr pos:start="387:18" pos:end="387:18"><literal type="number" pos:start="387:18" pos:end="387:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:39"><expr pos:start="391:9" pos:end="391:38"><call pos:start="391:9" pos:end="391:38"><name pos:start="391:9" pos:end="391:14">assert</name><argument_list pos:start="391:15" pos:end="391:38">(<argument pos:start="391:16" pos:end="391:37"><expr pos:start="391:16" pos:end="391:37"><name pos:start="391:16" pos:end="391:22">dt_size</name> <operator pos:start="391:24" pos:end="391:24">&lt;</operator> <name pos:start="391:26" pos:end="391:37">DTB_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="395:9" pos:end="395:35"><expr pos:start="395:9" pos:end="395:34"><name pos:start="395:9" pos:end="395:17">boot_info</name> <operator pos:start="395:19" pos:end="395:19">=</operator> <name pos:start="395:21" pos:end="395:34"><name pos:start="395:21" pos:end="395:23">env</name><operator pos:start="395:24" pos:end="395:25">-&gt;</operator><name pos:start="395:26" pos:end="395:34">load_info</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="397:9" pos:end="397:33"><expr pos:start="397:9" pos:end="397:32"><name pos:start="397:9" pos:end="397:24"><name pos:start="397:9" pos:end="397:17">boot_info</name><operator pos:start="397:18" pos:end="397:19">-&gt;</operator><name pos:start="397:20" pos:end="397:24">entry</name></name> <operator pos:start="397:26" pos:end="397:26">=</operator> <name pos:start="397:28" pos:end="397:32">entry</name></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:37"><expr pos:start="399:9" pos:end="399:36"><name pos:start="399:9" pos:end="399:26"><name pos:start="399:9" pos:end="399:17">boot_info</name><operator pos:start="399:18" pos:end="399:19">-&gt;</operator><name pos:start="399:20" pos:end="399:26">dt_base</name></name> <operator pos:start="399:28" pos:end="399:28">=</operator> <name pos:start="399:30" pos:end="399:36">dt_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:37"><expr pos:start="401:9" pos:end="401:36"><name pos:start="401:9" pos:end="401:26"><name pos:start="401:9" pos:end="401:17">boot_info</name><operator pos:start="401:18" pos:end="401:19">-&gt;</operator><name pos:start="401:20" pos:end="401:26">dt_size</name></name> <operator pos:start="401:28" pos:end="401:28">=</operator> <name pos:start="401:30" pos:end="401:36">dt_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="407:5" pos:end="411:5"><if pos:start="407:5" pos:end="411:5">if <condition pos:start="407:8" pos:end="407:22">(<expr pos:start="407:9" pos:end="407:21"><call pos:start="407:9" pos:end="407:21"><name pos:start="407:9" pos:end="407:19">kvm_enabled</name><argument_list pos:start="407:20" pos:end="407:21">()</argument_list></call></expr>)</condition> <block pos:start="407:24" pos:end="411:5">{<block_content pos:start="409:9" pos:end="409:22">

        <expr_stmt pos:start="409:9" pos:end="409:22"><expr pos:start="409:9" pos:end="409:21"><call pos:start="409:9" pos:end="409:21"><name pos:start="409:9" pos:end="409:19">kvmppc_init</name><argument_list pos:start="409:20" pos:end="409:21">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
