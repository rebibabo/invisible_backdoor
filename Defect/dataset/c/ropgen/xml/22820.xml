<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22820.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">tm2_read_stream</name><parameter_list pos:start="1:27" pos:end="1:92">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:37">TM2Context</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:77"><decl pos:start="1:65" pos:end="1:77"><type pos:start="1:65" pos:end="1:77"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:77">stream_id</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:91"><decl pos:start="1:80" pos:end="1:91"><type pos:start="1:80" pos:end="1:91"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:91">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="197:1">{<block_content pos:start="5:5" pos:end="195:16">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">skip</name> <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>, <decl pos:start="9:14" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:17">toks</name></decl>, <decl pos:start="9:20" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:22">pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TM2Codes</name></type> <name pos:start="11:14" pos:end="11:18">codes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">GetByteContext</name></type> <name pos:start="13:20" pos:end="13:21">gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:21">(<expr pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:16">buf_size</name> <operator pos:start="17:18" pos:end="17:18">&lt;</operator> <literal type="number" pos:start="17:20" pos:end="17:20">4</literal></expr>)</condition> <block pos:start="17:23" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:35">

        <expr_stmt pos:start="19:9" pos:end="19:76"><expr pos:start="19:9" pos:end="19:75"><call pos:start="19:9" pos:end="19:75"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:75">(<argument pos:start="19:16" pos:end="19:25"><expr pos:start="19:16" pos:end="19:25"><name pos:start="19:16" pos:end="19:25"><name pos:start="19:16" pos:end="19:18">ctx</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:25">avctx</name></name></expr></argument>, <argument pos:start="19:28" pos:end="19:39"><expr pos:start="19:28" pos:end="19:39"><name pos:start="19:28" pos:end="19:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:42" pos:end="19:74"><expr pos:start="19:42" pos:end="19:74"><literal type="string" pos:start="19:42" pos:end="19:74">"not enough space for len left\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:35">return <expr pos:start="21:16" pos:end="21:34"><name pos:start="21:16" pos:end="21:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:37">/* get stream length in dwords */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><call pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:20">bytestream2_init</name><argument_list pos:start="29:21" pos:end="29:40">(<argument pos:start="29:22" pos:end="29:24"><expr pos:start="29:22" pos:end="29:24"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:24">gb</name></expr></argument>, <argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">buf</name></expr></argument>, <argument pos:start="29:32" pos:end="29:39"><expr pos:start="29:32" pos:end="29:39"><name pos:start="29:32" pos:end="29:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:7">len</name>  <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:36"><name pos:start="31:12" pos:end="31:31">bytestream2_get_be32</name><argument_list pos:start="31:32" pos:end="31:36">(<argument pos:start="31:33" pos:end="31:35"><expr pos:start="31:33" pos:end="31:35"><operator pos:start="31:33" pos:end="31:33">&amp;</operator><name pos:start="31:34" pos:end="31:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:8">skip</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <name pos:start="33:12" pos:end="33:14">len</name> <operator pos:start="33:16" pos:end="33:16">*</operator> <literal type="number" pos:start="33:18" pos:end="33:20">4</literal> <operator pos:start="33:20" pos:end="33:20">+</operator> <literal type="number" pos:start="33:22" pos:end="33:22">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="39:17"><if pos:start="37:5" pos:end="39:17">if<condition pos:start="37:7" pos:end="37:16">(<expr pos:start="37:8" pos:end="37:15"><name pos:start="37:8" pos:end="37:10">len</name> <operator pos:start="37:12" pos:end="37:13">==</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:17"><block_content pos:start="39:9" pos:end="39:17">

        <return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">4</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:57">(<expr pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:11">len</name> <operator pos:start="43:13" pos:end="43:14">&gt;=</operator> <name pos:start="43:16" pos:end="43:22">INT_MAX</name><operator pos:start="43:23" pos:end="43:23">/</operator><literal type="number" pos:start="43:24" pos:end="43:25">4</literal><operator pos:start="43:25" pos:end="43:25">-</operator><literal type="number" pos:start="43:26" pos:end="43:26">1</literal> <operator pos:start="43:28" pos:end="43:29">||</operator> <name pos:start="43:31" pos:end="43:47"><name pos:start="43:31" pos:end="43:33">len</name> <argument_list type="generic" pos:start="43:35" pos:end="43:47">&lt; <argument pos:start="43:37" pos:end="43:45"><expr pos:start="43:37" pos:end="43:45"><literal type="number" pos:start="43:37" pos:end="43:37">0</literal> <operator pos:start="43:39" pos:end="43:40">||</operator> <name pos:start="43:42" pos:end="43:45">skip</name></expr></argument> &gt;</argument_list></name> <name pos:start="43:49" pos:end="43:56">buf_size</name></expr>)</condition> <block pos:start="43:59" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:35">

        <expr_stmt pos:start="45:9" pos:end="45:66"><expr pos:start="45:9" pos:end="45:65"><call pos:start="45:9" pos:end="45:65"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:65">(<argument pos:start="45:16" pos:end="45:25"><expr pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:18">ctx</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:25">avctx</name></name></expr></argument>, <argument pos:start="45:28" pos:end="45:39"><expr pos:start="45:28" pos:end="45:39"><name pos:start="45:28" pos:end="45:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:42" pos:end="45:64"><expr pos:start="45:42" pos:end="45:64"><literal type="string" pos:start="45:42" pos:end="45:64">"invalid stream size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:35">return <expr pos:start="47:16" pos:end="47:34"><name pos:start="47:16" pos:end="47:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:8">toks</name> <operator pos:start="53:10" pos:end="53:10">=</operator> <call pos:start="53:12" pos:end="53:36"><name pos:start="53:12" pos:end="53:31">bytestream2_get_be32</name><argument_list pos:start="53:32" pos:end="53:36">(<argument pos:start="53:33" pos:end="53:35"><expr pos:start="53:33" pos:end="53:35"><operator pos:start="53:33" pos:end="53:33">&amp;</operator><name pos:start="53:34" pos:end="53:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="83:5"><if pos:start="55:5" pos:end="83:5">if<condition pos:start="55:7" pos:end="55:16">(<expr pos:start="55:8" pos:end="55:15"><name pos:start="55:8" pos:end="55:11">toks</name> <operator pos:start="55:13" pos:end="55:13">&amp;</operator> <literal type="number" pos:start="55:15" pos:end="55:15">1</literal></expr>)</condition> <block pos:start="55:18" pos:end="83:5">{<block_content pos:start="57:9" pos:end="81:9">

        <expr_stmt pos:start="57:9" pos:end="57:40"><expr pos:start="57:9" pos:end="57:39"><name pos:start="57:9" pos:end="57:11">len</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:39"><name pos:start="57:15" pos:end="57:34">bytestream2_get_be32</name><argument_list pos:start="57:35" pos:end="57:39">(<argument pos:start="57:36" pos:end="57:38"><expr pos:start="57:36" pos:end="57:38"><operator pos:start="57:36" pos:end="57:36">&amp;</operator><name pos:start="57:37" pos:end="57:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if<condition pos:start="59:11" pos:end="59:29">(<expr pos:start="59:12" pos:end="59:28"><name pos:start="59:12" pos:end="59:14">len</name> <operator pos:start="59:16" pos:end="59:17">==</operator> <name pos:start="59:19" pos:end="59:28">TM2_ESCAPE</name></expr>)</condition> <block pos:start="59:31" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:44">

            <expr_stmt pos:start="61:13" pos:end="61:44"><expr pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:15">len</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:43"><name pos:start="61:19" pos:end="61:38">bytestream2_get_be32</name><argument_list pos:start="61:39" pos:end="61:43">(<argument pos:start="61:40" pos:end="61:42"><expr pos:start="61:40" pos:end="61:42"><operator pos:start="61:40" pos:end="61:40">&amp;</operator><name pos:start="61:41" pos:end="61:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="81:9"><if pos:start="65:9" pos:end="81:9">if<condition pos:start="65:11" pos:end="65:19">(<expr pos:start="65:12" pos:end="65:18"><name pos:start="65:12" pos:end="65:14">len</name> <operator pos:start="65:16" pos:end="65:16">&gt;</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>)</condition> <block pos:start="65:21" pos:end="81:9">{<block_content pos:start="67:13" pos:end="79:79">

            <expr_stmt pos:start="67:13" pos:end="67:40"><expr pos:start="67:13" pos:end="67:39"><name pos:start="67:13" pos:end="67:15">pos</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:39"><name pos:start="67:19" pos:end="67:34">bytestream2_tell</name><argument_list pos:start="67:35" pos:end="67:39">(<argument pos:start="67:36" pos:end="67:38"><expr pos:start="67:36" pos:end="67:38"><operator pos:start="67:36" pos:end="67:36">&amp;</operator><name pos:start="67:37" pos:end="67:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="71:43"><if pos:start="69:13" pos:end="71:43">if <condition pos:start="69:16" pos:end="69:28">(<expr pos:start="69:17" pos:end="69:27"><name pos:start="69:17" pos:end="69:20">skip</name> <operator pos:start="69:22" pos:end="69:23">&lt;=</operator> <name pos:start="69:25" pos:end="69:27">pos</name></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:43"><block_content pos:start="71:17" pos:end="71:43">

                <return pos:start="71:17" pos:end="71:43">return <expr pos:start="71:24" pos:end="71:42"><name pos:start="71:24" pos:end="71:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:65"><expr pos:start="73:13" pos:end="73:64"><call pos:start="73:13" pos:end="73:64"><name pos:start="73:13" pos:end="73:25">init_get_bits</name><argument_list pos:start="73:26" pos:end="73:64">(<argument pos:start="73:27" pos:end="73:34"><expr pos:start="73:27" pos:end="73:34"><operator pos:start="73:27" pos:end="73:27">&amp;</operator><name pos:start="73:28" pos:end="73:34"><name pos:start="73:28" pos:end="73:30">ctx</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:34">gb</name></name></expr></argument>, <argument pos:start="73:37" pos:end="73:45"><expr pos:start="73:37" pos:end="73:45"><name pos:start="73:37" pos:end="73:39">buf</name> <operator pos:start="73:41" pos:end="73:41">+</operator> <name pos:start="73:43" pos:end="73:45">pos</name></expr></argument>, <argument pos:start="73:48" pos:end="73:63"><expr pos:start="73:48" pos:end="73:63"><operator pos:start="73:48" pos:end="73:48">(</operator><name pos:start="73:49" pos:end="73:52">skip</name> <operator pos:start="73:54" pos:end="73:54">-</operator> <name pos:start="73:56" pos:end="73:58">pos</name><operator pos:start="73:59" pos:end="73:59">)</operator> <operator pos:start="73:61" pos:end="73:61">*</operator> <literal type="number" pos:start="73:63" pos:end="73:63">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="77:43"><if pos:start="75:13" pos:end="77:43">if<condition pos:start="75:15" pos:end="75:53">(<expr pos:start="75:16" pos:end="75:52"><call pos:start="75:16" pos:end="75:46"><name pos:start="75:16" pos:end="75:30">tm2_read_deltas</name><argument_list pos:start="75:31" pos:end="75:46">(<argument pos:start="75:32" pos:end="75:34"><expr pos:start="75:32" pos:end="75:34"><name pos:start="75:32" pos:end="75:34">ctx</name></expr></argument>, <argument pos:start="75:37" pos:end="75:45"><expr pos:start="75:37" pos:end="75:45"><name pos:start="75:37" pos:end="75:45">stream_id</name></expr></argument>)</argument_list></call> <operator pos:start="75:48" pos:end="75:49">==</operator> <operator pos:start="75:51" pos:end="75:51">-</operator><literal type="number" pos:start="75:52" pos:end="75:52">1</literal></expr>)</condition><block type="pseudo" pos:start="77:17" pos:end="77:43"><block_content pos:start="77:17" pos:end="77:43">

                <return pos:start="77:17" pos:end="77:43">return <expr pos:start="77:24" pos:end="77:42"><name pos:start="77:24" pos:end="77:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:79"><expr pos:start="79:13" pos:end="79:78"><call pos:start="79:13" pos:end="79:78"><name pos:start="79:13" pos:end="79:28">bytestream2_skip</name><argument_list pos:start="79:29" pos:end="79:78">(<argument pos:start="79:30" pos:end="79:32"><expr pos:start="79:30" pos:end="79:32"><operator pos:start="79:30" pos:end="79:30">&amp;</operator><name pos:start="79:31" pos:end="79:32">gb</name></expr></argument>, <argument pos:start="79:35" pos:end="79:77"><expr pos:start="79:35" pos:end="79:77"><operator pos:start="79:35" pos:end="79:35">(</operator><operator pos:start="79:36" pos:end="79:36">(</operator><call pos:start="79:37" pos:end="79:60"><name pos:start="79:37" pos:end="79:50">get_bits_count</name><argument_list pos:start="79:51" pos:end="79:60">(<argument pos:start="79:52" pos:end="79:59"><expr pos:start="79:52" pos:end="79:59"><operator pos:start="79:52" pos:end="79:52">&amp;</operator><name pos:start="79:53" pos:end="79:59"><name pos:start="79:53" pos:end="79:55">ctx</name><operator pos:start="79:56" pos:end="79:57">-&gt;</operator><name pos:start="79:58" pos:end="79:59">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:62" pos:end="79:62">+</operator> <literal type="number" pos:start="79:64" pos:end="79:65">31</literal><operator pos:start="79:66" pos:end="79:66">)</operator> <operator pos:start="79:68" pos:end="79:69">&gt;&gt;</operator> <literal type="number" pos:start="79:71" pos:end="79:71">5</literal><operator pos:start="79:72" pos:end="79:72">)</operator> <operator pos:start="79:74" pos:end="79:75">&lt;&lt;</operator> <literal type="number" pos:start="79:77" pos:end="79:77">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="85:5" pos:end="85:28">/* skip unused fields */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:36"><expr pos:start="87:5" pos:end="87:35"><name pos:start="87:5" pos:end="87:7">len</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:35"><name pos:start="87:11" pos:end="87:30">bytestream2_get_be32</name><argument_list pos:start="87:31" pos:end="87:35">(<argument pos:start="87:32" pos:end="87:34"><expr pos:start="87:32" pos:end="87:34"><operator pos:start="87:32" pos:end="87:32">&amp;</operator><name pos:start="87:33" pos:end="87:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="93:5">if<condition pos:start="89:7" pos:end="89:25">(<expr pos:start="89:8" pos:end="89:24"><name pos:start="89:8" pos:end="89:10">len</name> <operator pos:start="89:12" pos:end="89:13">==</operator> <name pos:start="89:15" pos:end="89:24">TM2_ESCAPE</name></expr>)</condition> <block pos:start="89:27" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:33"> <comment type="block" pos:start="89:29" pos:end="89:76">/* some unknown length - could be escaped too */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><call pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:24">bytestream2_skip</name><argument_list pos:start="91:25" pos:end="91:32">(<argument pos:start="91:26" pos:end="91:28"><expr pos:start="91:26" pos:end="91:28"><operator pos:start="91:26" pos:end="91:26">&amp;</operator><name pos:start="91:27" pos:end="91:28">gb</name></expr></argument>, <argument pos:start="91:31" pos:end="91:31"><expr pos:start="91:31" pos:end="91:31"><literal type="number" pos:start="91:31" pos:end="91:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="91:35" pos:end="91:57">/* unused by decoder */</comment>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="97:5">else <block pos:start="93:12" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:33">

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><call pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:24">bytestream2_skip</name><argument_list pos:start="95:25" pos:end="95:32">(<argument pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><operator pos:start="95:26" pos:end="95:26">&amp;</operator><name pos:start="95:27" pos:end="95:28">gb</name></expr></argument>, <argument pos:start="95:31" pos:end="95:31"><expr pos:start="95:31" pos:end="95:31"><literal type="number" pos:start="95:31" pos:end="95:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="95:35" pos:end="95:57">/* unused by decoder */</comment>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:32"><expr pos:start="101:5" pos:end="101:31"><name pos:start="101:5" pos:end="101:7">pos</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:31"><name pos:start="101:11" pos:end="101:26">bytestream2_tell</name><argument_list pos:start="101:27" pos:end="101:31">(<argument pos:start="101:28" pos:end="101:30"><expr pos:start="101:28" pos:end="101:30"><operator pos:start="101:28" pos:end="101:28">&amp;</operator><name pos:start="101:29" pos:end="101:30">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="105:35"><if pos:start="103:5" pos:end="105:35">if <condition pos:start="103:8" pos:end="103:20">(<expr pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:12">skip</name> <operator pos:start="103:14" pos:end="103:15">&lt;=</operator> <name pos:start="103:17" pos:end="103:19">pos</name></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:35"><block_content pos:start="105:9" pos:end="105:35">

        <return pos:start="105:9" pos:end="105:35">return <expr pos:start="105:16" pos:end="105:34"><name pos:start="105:16" pos:end="105:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:57"><expr pos:start="107:5" pos:end="107:56"><call pos:start="107:5" pos:end="107:56"><name pos:start="107:5" pos:end="107:17">init_get_bits</name><argument_list pos:start="107:18" pos:end="107:56">(<argument pos:start="107:19" pos:end="107:26"><expr pos:start="107:19" pos:end="107:26"><operator pos:start="107:19" pos:end="107:19">&amp;</operator><name pos:start="107:20" pos:end="107:26"><name pos:start="107:20" pos:end="107:22">ctx</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:26">gb</name></name></expr></argument>, <argument pos:start="107:29" pos:end="107:37"><expr pos:start="107:29" pos:end="107:37"><name pos:start="107:29" pos:end="107:31">buf</name> <operator pos:start="107:33" pos:end="107:33">+</operator> <name pos:start="107:35" pos:end="107:37">pos</name></expr></argument>, <argument pos:start="107:40" pos:end="107:55"><expr pos:start="107:40" pos:end="107:55"><operator pos:start="107:40" pos:end="107:40">(</operator><name pos:start="107:41" pos:end="107:44">skip</name> <operator pos:start="107:46" pos:end="107:46">-</operator> <name pos:start="107:48" pos:end="107:50">pos</name><operator pos:start="107:51" pos:end="107:51">)</operator> <operator pos:start="107:53" pos:end="107:53">*</operator> <literal type="number" pos:start="107:55" pos:end="107:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="111:35"><if pos:start="109:5" pos:end="111:35">if<condition pos:start="109:7" pos:end="109:47">(<expr pos:start="109:8" pos:end="109:46"><call pos:start="109:8" pos:end="109:40"><name pos:start="109:8" pos:end="109:27">tm2_build_huff_table</name><argument_list pos:start="109:28" pos:end="109:40">(<argument pos:start="109:29" pos:end="109:31"><expr pos:start="109:29" pos:end="109:31"><name pos:start="109:29" pos:end="109:31">ctx</name></expr></argument>, <argument pos:start="109:34" pos:end="109:39"><expr pos:start="109:34" pos:end="109:39"><operator pos:start="109:34" pos:end="109:34">&amp;</operator><name pos:start="109:35" pos:end="109:39">codes</name></expr></argument>)</argument_list></call> <operator pos:start="109:42" pos:end="109:43">==</operator> <operator pos:start="109:45" pos:end="109:45">-</operator><literal type="number" pos:start="109:46" pos:end="109:46">1</literal></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:35"><block_content pos:start="111:9" pos:end="111:35">

        <return pos:start="111:9" pos:end="111:35">return <expr pos:start="111:16" pos:end="111:34"><name pos:start="111:16" pos:end="111:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:71"><expr pos:start="113:5" pos:end="113:70"><call pos:start="113:5" pos:end="113:70"><name pos:start="113:5" pos:end="113:20">bytestream2_skip</name><argument_list pos:start="113:21" pos:end="113:70">(<argument pos:start="113:22" pos:end="113:24"><expr pos:start="113:22" pos:end="113:24"><operator pos:start="113:22" pos:end="113:22">&amp;</operator><name pos:start="113:23" pos:end="113:24">gb</name></expr></argument>, <argument pos:start="113:27" pos:end="113:69"><expr pos:start="113:27" pos:end="113:69"><operator pos:start="113:27" pos:end="113:27">(</operator><operator pos:start="113:28" pos:end="113:28">(</operator><call pos:start="113:29" pos:end="113:52"><name pos:start="113:29" pos:end="113:42">get_bits_count</name><argument_list pos:start="113:43" pos:end="113:52">(<argument pos:start="113:44" pos:end="113:51"><expr pos:start="113:44" pos:end="113:51"><operator pos:start="113:44" pos:end="113:44">&amp;</operator><name pos:start="113:45" pos:end="113:51"><name pos:start="113:45" pos:end="113:47">ctx</name><operator pos:start="113:48" pos:end="113:49">-&gt;</operator><name pos:start="113:50" pos:end="113:51">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:54" pos:end="113:54">+</operator> <literal type="number" pos:start="113:56" pos:end="113:57">31</literal><operator pos:start="113:58" pos:end="113:58">)</operator> <operator pos:start="113:60" pos:end="113:61">&gt;&gt;</operator> <literal type="number" pos:start="113:63" pos:end="113:63">5</literal><operator pos:start="113:64" pos:end="113:64">)</operator> <operator pos:start="113:66" pos:end="113:67">&lt;&lt;</operator> <literal type="number" pos:start="113:69" pos:end="113:69">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:15"><expr pos:start="117:5" pos:end="117:14"><name pos:start="117:5" pos:end="117:8">toks</name> <operator pos:start="117:10" pos:end="117:12">&gt;&gt;=</operator> <literal type="number" pos:start="117:14" pos:end="117:14">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="119:5" pos:end="119:48">/* check if we have sane number of tokens */</comment>

    <if_stmt pos:start="121:5" pos:end="129:5"><if pos:start="121:5" pos:end="129:5">if<condition pos:start="121:7" pos:end="121:39">(<expr pos:start="121:8" pos:end="121:38"><operator pos:start="121:8" pos:end="121:8">(</operator><name pos:start="121:9" pos:end="121:12">toks</name> <operator pos:start="121:14" pos:end="121:14">&lt;</operator> <literal type="number" pos:start="121:16" pos:end="121:16">0</literal><operator pos:start="121:17" pos:end="121:17">)</operator> <operator pos:start="121:19" pos:end="121:20">||</operator> <operator pos:start="121:22" pos:end="121:22">(</operator><name pos:start="121:23" pos:end="121:26">toks</name> <operator pos:start="121:28" pos:end="121:28">&gt;</operator> <literal type="number" pos:start="121:30" pos:end="121:37">0xFFFFFF</literal><operator pos:start="121:38" pos:end="121:38">)</operator></expr>)</condition><block pos:start="121:40" pos:end="129:5">{<block_content pos:start="123:9" pos:end="127:35">

        <expr_stmt pos:start="123:9" pos:end="123:83"><expr pos:start="123:9" pos:end="123:82"><call pos:start="123:9" pos:end="123:82"><name pos:start="123:9" pos:end="123:14">av_log</name><argument_list pos:start="123:15" pos:end="123:82">(<argument pos:start="123:16" pos:end="123:25"><expr pos:start="123:16" pos:end="123:25"><name pos:start="123:16" pos:end="123:25"><name pos:start="123:16" pos:end="123:18">ctx</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:25">avctx</name></name></expr></argument>, <argument pos:start="123:28" pos:end="123:39"><expr pos:start="123:28" pos:end="123:39"><name pos:start="123:28" pos:end="123:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="123:42" pos:end="123:75"><expr pos:start="123:42" pos:end="123:75"><literal type="string" pos:start="123:42" pos:end="123:75">"Incorrect number of tokens: %i\n"</literal></expr></argument>, <argument pos:start="123:78" pos:end="123:81"><expr pos:start="123:78" pos:end="123:81"><name pos:start="123:78" pos:end="123:81">toks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:31"><expr pos:start="125:9" pos:end="125:30"><call pos:start="125:9" pos:end="125:30"><name pos:start="125:9" pos:end="125:22">tm2_free_codes</name><argument_list pos:start="125:23" pos:end="125:30">(<argument pos:start="125:24" pos:end="125:29"><expr pos:start="125:24" pos:end="125:29"><operator pos:start="125:24" pos:end="125:24">&amp;</operator><name pos:start="125:25" pos:end="125:29">codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:35">return <expr pos:start="127:16" pos:end="127:34"><name pos:start="127:16" pos:end="127:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:84"><expr pos:start="131:5" pos:end="131:83"><name pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:7">ctx</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:15">tokens</name><index pos:start="131:16" pos:end="131:26">[<expr pos:start="131:17" pos:end="131:25"><name pos:start="131:17" pos:end="131:25">stream_id</name></expr>]</index></name> <operator pos:start="131:28" pos:end="131:28">=</operator> <call pos:start="131:30" pos:end="131:83"><name pos:start="131:30" pos:end="131:39">av_realloc</name><argument_list pos:start="131:40" pos:end="131:83">(<argument pos:start="131:41" pos:end="131:62"><expr pos:start="131:41" pos:end="131:62"><name pos:start="131:41" pos:end="131:62"><name pos:start="131:41" pos:end="131:43">ctx</name><operator pos:start="131:44" pos:end="131:45">-&gt;</operator><name pos:start="131:46" pos:end="131:51">tokens</name><index pos:start="131:52" pos:end="131:62">[<expr pos:start="131:53" pos:end="131:61"><name pos:start="131:53" pos:end="131:61">stream_id</name></expr>]</index></name></expr></argument>, <argument pos:start="131:65" pos:end="131:82"><expr pos:start="131:65" pos:end="131:82"><name pos:start="131:65" pos:end="131:68">toks</name> <operator pos:start="131:70" pos:end="131:70">*</operator> <sizeof pos:start="131:72" pos:end="131:82">sizeof<argument_list pos:start="131:78" pos:end="131:82">(<argument pos:start="131:79" pos:end="131:81"><expr pos:start="131:79" pos:end="131:81"><name pos:start="131:79" pos:end="131:81">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:36"><expr pos:start="133:5" pos:end="133:35"><name pos:start="133:5" pos:end="133:28"><name pos:start="133:5" pos:end="133:7">ctx</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:17">tok_lens</name><index pos:start="133:18" pos:end="133:28">[<expr pos:start="133:19" pos:end="133:27"><name pos:start="133:19" pos:end="133:27">stream_id</name></expr>]</index></name> <operator pos:start="133:30" pos:end="133:30">=</operator> <name pos:start="133:32" pos:end="133:35">toks</name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:36"><expr pos:start="135:5" pos:end="135:35"><name pos:start="135:5" pos:end="135:7">len</name> <operator pos:start="135:9" pos:end="135:9">=</operator> <call pos:start="135:11" pos:end="135:35"><name pos:start="135:11" pos:end="135:30">bytestream2_get_be32</name><argument_list pos:start="135:31" pos:end="135:35">(<argument pos:start="135:32" pos:end="135:34"><expr pos:start="135:32" pos:end="135:34"><operator pos:start="135:32" pos:end="135:32">&amp;</operator><name pos:start="135:33" pos:end="135:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="189:5"><if pos:start="137:5" pos:end="171:5">if<condition pos:start="137:7" pos:end="137:15">(<expr pos:start="137:8" pos:end="137:14"><name pos:start="137:8" pos:end="137:10">len</name> <operator pos:start="137:12" pos:end="137:12">&gt;</operator> <literal type="number" pos:start="137:14" pos:end="137:14">0</literal></expr>)</condition> <block pos:start="137:17" pos:end="171:5">{<block_content pos:start="139:9" pos:end="169:9">

        <expr_stmt pos:start="139:9" pos:end="139:36"><expr pos:start="139:9" pos:end="139:35"><name pos:start="139:9" pos:end="139:11">pos</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="139:35"><name pos:start="139:15" pos:end="139:30">bytestream2_tell</name><argument_list pos:start="139:31" pos:end="139:35">(<argument pos:start="139:32" pos:end="139:34"><expr pos:start="139:32" pos:end="139:34"><operator pos:start="139:32" pos:end="139:32">&amp;</operator><name pos:start="139:33" pos:end="139:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="143:39"><if pos:start="141:9" pos:end="143:39">if <condition pos:start="141:12" pos:end="141:24">(<expr pos:start="141:13" pos:end="141:23"><name pos:start="141:13" pos:end="141:16">skip</name> <operator pos:start="141:18" pos:end="141:19">&lt;=</operator> <name pos:start="141:21" pos:end="141:23">pos</name></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:39"><block_content pos:start="143:13" pos:end="143:39">

            <return pos:start="143:13" pos:end="143:39">return <expr pos:start="143:20" pos:end="143:38"><name pos:start="143:20" pos:end="143:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:61"><expr pos:start="145:9" pos:end="145:60"><call pos:start="145:9" pos:end="145:60"><name pos:start="145:9" pos:end="145:21">init_get_bits</name><argument_list pos:start="145:22" pos:end="145:60">(<argument pos:start="145:23" pos:end="145:30"><expr pos:start="145:23" pos:end="145:30"><operator pos:start="145:23" pos:end="145:23">&amp;</operator><name pos:start="145:24" pos:end="145:30"><name pos:start="145:24" pos:end="145:26">ctx</name><operator pos:start="145:27" pos:end="145:28">-&gt;</operator><name pos:start="145:29" pos:end="145:30">gb</name></name></expr></argument>, <argument pos:start="145:33" pos:end="145:41"><expr pos:start="145:33" pos:end="145:41"><name pos:start="145:33" pos:end="145:35">buf</name> <operator pos:start="145:37" pos:end="145:37">+</operator> <name pos:start="145:39" pos:end="145:41">pos</name></expr></argument>, <argument pos:start="145:44" pos:end="145:59"><expr pos:start="145:44" pos:end="145:59"><operator pos:start="145:44" pos:end="145:44">(</operator><name pos:start="145:45" pos:end="145:48">skip</name> <operator pos:start="145:50" pos:end="145:50">-</operator> <name pos:start="145:52" pos:end="145:54">pos</name><operator pos:start="145:55" pos:end="145:55">)</operator> <operator pos:start="145:57" pos:end="145:57">*</operator> <literal type="number" pos:start="145:59" pos:end="145:59">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="147:9" pos:end="169:9">for<control pos:start="147:12" pos:end="147:33">(<init pos:start="147:13" pos:end="147:18"><expr pos:start="147:13" pos:end="147:17"><name pos:start="147:13" pos:end="147:13">i</name> <operator pos:start="147:15" pos:end="147:15">=</operator> <literal type="number" pos:start="147:17" pos:end="147:17">0</literal></expr>;</init> <condition pos:start="147:20" pos:end="147:28"><expr pos:start="147:20" pos:end="147:27"><name pos:start="147:20" pos:end="147:20">i</name> <operator pos:start="147:22" pos:end="147:22">&lt;</operator> <name pos:start="147:24" pos:end="147:27">toks</name></expr>;</condition> <incr pos:start="147:30" pos:end="147:32"><expr pos:start="147:30" pos:end="147:32"><name pos:start="147:30" pos:end="147:30">i</name><operator pos:start="147:31" pos:end="147:32">++</operator></expr></incr>)</control> <block pos:start="147:35" pos:end="169:9">{<block_content pos:start="149:13" pos:end="167:13">

            <if_stmt pos:start="149:13" pos:end="155:13"><if pos:start="149:13" pos:end="155:13">if <condition pos:start="149:16" pos:end="149:45">(<expr pos:start="149:17" pos:end="149:44"><call pos:start="149:17" pos:end="149:39"><name pos:start="149:17" pos:end="149:29">get_bits_left</name><argument_list pos:start="149:30" pos:end="149:39">(<argument pos:start="149:31" pos:end="149:38"><expr pos:start="149:31" pos:end="149:38"><operator pos:start="149:31" pos:end="149:31">&amp;</operator><name pos:start="149:32" pos:end="149:38"><name pos:start="149:32" pos:end="149:34">ctx</name><operator pos:start="149:35" pos:end="149:36">-&gt;</operator><name pos:start="149:37" pos:end="149:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="149:41" pos:end="149:42">&lt;=</operator> <literal type="number" pos:start="149:44" pos:end="149:44">0</literal></expr>)</condition> <block pos:start="149:47" pos:end="155:13">{<block_content pos:start="151:17" pos:end="153:43">

                <expr_stmt pos:start="151:17" pos:end="151:91"><expr pos:start="151:17" pos:end="151:90"><call pos:start="151:17" pos:end="151:90"><name pos:start="151:17" pos:end="151:22">av_log</name><argument_list pos:start="151:23" pos:end="151:90">(<argument pos:start="151:24" pos:end="151:33"><expr pos:start="151:24" pos:end="151:33"><name pos:start="151:24" pos:end="151:33"><name pos:start="151:24" pos:end="151:26">ctx</name><operator pos:start="151:27" pos:end="151:28">-&gt;</operator><name pos:start="151:29" pos:end="151:33">avctx</name></name></expr></argument>, <argument pos:start="151:36" pos:end="151:47"><expr pos:start="151:36" pos:end="151:47"><name pos:start="151:36" pos:end="151:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:50" pos:end="151:83"><expr pos:start="151:50" pos:end="151:83"><literal type="string" pos:start="151:50" pos:end="151:83">"Incorrect number of tokens: %i\n"</literal></expr></argument>, <argument pos:start="151:86" pos:end="151:89"><expr pos:start="151:86" pos:end="151:89"><name pos:start="151:86" pos:end="151:89">toks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="153:17" pos:end="153:43">return <expr pos:start="153:24" pos:end="153:42"><name pos:start="153:24" pos:end="153:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:72"><expr pos:start="157:13" pos:end="157:71"><name pos:start="157:13" pos:end="157:37"><name pos:start="157:13" pos:end="157:15">ctx</name><operator pos:start="157:16" pos:end="157:17">-&gt;</operator><name pos:start="157:18" pos:end="157:23">tokens</name><index pos:start="157:24" pos:end="157:34">[<expr pos:start="157:25" pos:end="157:33"><name pos:start="157:25" pos:end="157:33">stream_id</name></expr>]</index><index pos:start="157:35" pos:end="157:37">[<expr pos:start="157:36" pos:end="157:36"><name pos:start="157:36" pos:end="157:36">i</name></expr>]</index></name> <operator pos:start="157:39" pos:end="157:39">=</operator> <call pos:start="157:41" pos:end="157:71"><name pos:start="157:41" pos:end="157:53">tm2_get_token</name><argument_list pos:start="157:54" pos:end="157:71">(<argument pos:start="157:55" pos:end="157:62"><expr pos:start="157:55" pos:end="157:62"><operator pos:start="157:55" pos:end="157:55">&amp;</operator><name pos:start="157:56" pos:end="157:62"><name pos:start="157:56" pos:end="157:58">ctx</name><operator pos:start="157:59" pos:end="157:60">-&gt;</operator><name pos:start="157:61" pos:end="157:62">gb</name></name></expr></argument>, <argument pos:start="157:65" pos:end="157:70"><expr pos:start="157:65" pos:end="157:70"><operator pos:start="157:65" pos:end="157:65">&amp;</operator><name pos:start="157:66" pos:end="157:70">codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="159:13" pos:end="167:13"><if pos:start="159:13" pos:end="167:13">if <condition pos:start="159:16" pos:end="159:80">(<expr pos:start="159:17" pos:end="159:79"><name pos:start="159:17" pos:end="159:25">stream_id</name> <operator pos:start="159:27" pos:end="159:28">&lt;=</operator> <name pos:start="159:30" pos:end="159:36">TM2_MOT</name> <operator pos:start="159:38" pos:end="159:39">&amp;&amp;</operator> <name pos:start="159:41" pos:end="159:65"><name pos:start="159:41" pos:end="159:43">ctx</name><operator pos:start="159:44" pos:end="159:45">-&gt;</operator><name pos:start="159:46" pos:end="159:51">tokens</name><index pos:start="159:52" pos:end="159:62">[<expr pos:start="159:53" pos:end="159:61"><name pos:start="159:53" pos:end="159:61">stream_id</name></expr>]</index><index pos:start="159:63" pos:end="159:65">[<expr pos:start="159:64" pos:end="159:64"><name pos:start="159:64" pos:end="159:64">i</name></expr>]</index></name> <operator pos:start="159:67" pos:end="159:68">&gt;=</operator> <name pos:start="159:70" pos:end="159:79">TM2_DELTAS</name></expr>)</condition> <block pos:start="159:82" pos:end="167:13">{<block_content pos:start="161:17" pos:end="165:43">

                <expr_stmt pos:start="161:17" pos:end="163:64"><expr pos:start="161:17" pos:end="163:63"><call pos:start="161:17" pos:end="163:63"><name pos:start="161:17" pos:end="161:22">av_log</name><argument_list pos:start="161:23" pos:end="163:63">(<argument pos:start="161:24" pos:end="161:33"><expr pos:start="161:24" pos:end="161:33"><name pos:start="161:24" pos:end="161:33"><name pos:start="161:24" pos:end="161:26">ctx</name><operator pos:start="161:27" pos:end="161:28">-&gt;</operator><name pos:start="161:29" pos:end="161:33">avctx</name></name></expr></argument>, <argument pos:start="161:36" pos:end="161:47"><expr pos:start="161:36" pos:end="161:47"><name pos:start="161:36" pos:end="161:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:50" pos:end="161:99"><expr pos:start="161:50" pos:end="161:99"><literal type="string" pos:start="161:50" pos:end="161:99">"Invalid delta token index %d for type %d, n=%d\n"</literal></expr></argument>,

                       <argument pos:start="163:24" pos:end="163:48"><expr pos:start="163:24" pos:end="163:48"><name pos:start="163:24" pos:end="163:48"><name pos:start="163:24" pos:end="163:26">ctx</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:34">tokens</name><index pos:start="163:35" pos:end="163:45">[<expr pos:start="163:36" pos:end="163:44"><name pos:start="163:36" pos:end="163:44">stream_id</name></expr>]</index><index pos:start="163:46" pos:end="163:48">[<expr pos:start="163:47" pos:end="163:47"><name pos:start="163:47" pos:end="163:47">i</name></expr>]</index></name></expr></argument>, <argument pos:start="163:51" pos:end="163:59"><expr pos:start="163:51" pos:end="163:59"><name pos:start="163:51" pos:end="163:59">stream_id</name></expr></argument>, <argument pos:start="163:62" pos:end="163:62"><expr pos:start="163:62" pos:end="163:62"><name pos:start="163:62" pos:end="163:62">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="165:17" pos:end="165:43">return <expr pos:start="165:24" pos:end="165:42"><name pos:start="165:24" pos:end="165:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="171:7" pos:end="189:5">else <block pos:start="171:12" pos:end="189:5">{<block_content pos:start="173:9" pos:end="187:9">

        <for pos:start="173:9" pos:end="187:9">for<control pos:start="173:12" pos:end="173:33">(<init pos:start="173:13" pos:end="173:18"><expr pos:start="173:13" pos:end="173:17"><name pos:start="173:13" pos:end="173:13">i</name> <operator pos:start="173:15" pos:end="173:15">=</operator> <literal type="number" pos:start="173:17" pos:end="173:17">0</literal></expr>;</init> <condition pos:start="173:20" pos:end="173:28"><expr pos:start="173:20" pos:end="173:27"><name pos:start="173:20" pos:end="173:20">i</name> <operator pos:start="173:22" pos:end="173:22">&lt;</operator> <name pos:start="173:24" pos:end="173:27">toks</name></expr>;</condition> <incr pos:start="173:30" pos:end="173:32"><expr pos:start="173:30" pos:end="173:32"><name pos:start="173:30" pos:end="173:30">i</name><operator pos:start="173:31" pos:end="173:32">++</operator></expr></incr>)</control> <block pos:start="173:35" pos:end="187:9">{<block_content pos:start="175:13" pos:end="185:13">

            <expr_stmt pos:start="175:13" pos:end="175:56"><expr pos:start="175:13" pos:end="175:55"><name pos:start="175:13" pos:end="175:37"><name pos:start="175:13" pos:end="175:15">ctx</name><operator pos:start="175:16" pos:end="175:17">-&gt;</operator><name pos:start="175:18" pos:end="175:23">tokens</name><index pos:start="175:24" pos:end="175:34">[<expr pos:start="175:25" pos:end="175:33"><name pos:start="175:25" pos:end="175:33">stream_id</name></expr>]</index><index pos:start="175:35" pos:end="175:37">[<expr pos:start="175:36" pos:end="175:36"><name pos:start="175:36" pos:end="175:36">i</name></expr>]</index></name> <operator pos:start="175:39" pos:end="175:39">=</operator> <name pos:start="175:41" pos:end="175:55"><name pos:start="175:41" pos:end="175:45">codes</name><operator pos:start="175:46" pos:end="175:46">.</operator><name pos:start="175:47" pos:end="175:52">recode</name><index pos:start="175:53" pos:end="175:55">[<expr pos:start="175:54" pos:end="175:54"><literal type="number" pos:start="175:54" pos:end="175:54">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="185:13"><if pos:start="177:13" pos:end="185:13">if <condition pos:start="177:16" pos:end="177:80">(<expr pos:start="177:17" pos:end="177:79"><name pos:start="177:17" pos:end="177:25">stream_id</name> <operator pos:start="177:27" pos:end="177:28">&lt;=</operator> <name pos:start="177:30" pos:end="177:36">TM2_MOT</name> <operator pos:start="177:38" pos:end="177:39">&amp;&amp;</operator> <name pos:start="177:41" pos:end="177:65"><name pos:start="177:41" pos:end="177:43">ctx</name><operator pos:start="177:44" pos:end="177:45">-&gt;</operator><name pos:start="177:46" pos:end="177:51">tokens</name><index pos:start="177:52" pos:end="177:62">[<expr pos:start="177:53" pos:end="177:61"><name pos:start="177:53" pos:end="177:61">stream_id</name></expr>]</index><index pos:start="177:63" pos:end="177:65">[<expr pos:start="177:64" pos:end="177:64"><name pos:start="177:64" pos:end="177:64">i</name></expr>]</index></name> <operator pos:start="177:67" pos:end="177:68">&gt;=</operator> <name pos:start="177:70" pos:end="177:79">TM2_DELTAS</name></expr>)</condition> <block pos:start="177:82" pos:end="185:13">{<block_content pos:start="179:17" pos:end="183:43">

                <expr_stmt pos:start="179:17" pos:end="181:64"><expr pos:start="179:17" pos:end="181:63"><call pos:start="179:17" pos:end="181:63"><name pos:start="179:17" pos:end="179:22">av_log</name><argument_list pos:start="179:23" pos:end="181:63">(<argument pos:start="179:24" pos:end="179:33"><expr pos:start="179:24" pos:end="179:33"><name pos:start="179:24" pos:end="179:33"><name pos:start="179:24" pos:end="179:26">ctx</name><operator pos:start="179:27" pos:end="179:28">-&gt;</operator><name pos:start="179:29" pos:end="179:33">avctx</name></name></expr></argument>, <argument pos:start="179:36" pos:end="179:47"><expr pos:start="179:36" pos:end="179:47"><name pos:start="179:36" pos:end="179:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:50" pos:end="179:99"><expr pos:start="179:50" pos:end="179:99"><literal type="string" pos:start="179:50" pos:end="179:99">"Invalid delta token index %d for type %d, n=%d\n"</literal></expr></argument>,

                       <argument pos:start="181:24" pos:end="181:48"><expr pos:start="181:24" pos:end="181:48"><name pos:start="181:24" pos:end="181:48"><name pos:start="181:24" pos:end="181:26">ctx</name><operator pos:start="181:27" pos:end="181:28">-&gt;</operator><name pos:start="181:29" pos:end="181:34">tokens</name><index pos:start="181:35" pos:end="181:45">[<expr pos:start="181:36" pos:end="181:44"><name pos:start="181:36" pos:end="181:44">stream_id</name></expr>]</index><index pos:start="181:46" pos:end="181:48">[<expr pos:start="181:47" pos:end="181:47"><name pos:start="181:47" pos:end="181:47">i</name></expr>]</index></name></expr></argument>, <argument pos:start="181:51" pos:end="181:59"><expr pos:start="181:51" pos:end="181:59"><name pos:start="181:51" pos:end="181:59">stream_id</name></expr></argument>, <argument pos:start="181:62" pos:end="181:62"><expr pos:start="181:62" pos:end="181:62"><name pos:start="181:62" pos:end="181:62">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="183:17" pos:end="183:43">return <expr pos:start="183:24" pos:end="183:42"><name pos:start="183:24" pos:end="183:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:27"><expr pos:start="191:5" pos:end="191:26"><call pos:start="191:5" pos:end="191:26"><name pos:start="191:5" pos:end="191:18">tm2_free_codes</name><argument_list pos:start="191:19" pos:end="191:26">(<argument pos:start="191:20" pos:end="191:25"><expr pos:start="191:20" pos:end="191:25"><operator pos:start="191:20" pos:end="191:20">&amp;</operator><name pos:start="191:21" pos:end="191:25">codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="195:5" pos:end="195:16">return <expr pos:start="195:12" pos:end="195:15"><name pos:start="195:12" pos:end="195:15">skip</name></expr>;</return>

</block_content>}</block></function>
</unit>
