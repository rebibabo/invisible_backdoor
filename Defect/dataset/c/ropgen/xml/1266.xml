<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1266.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint16_t</name></type> <name pos:start="1:17" pos:end="1:23">nvme_rw</name><parameter_list pos:start="1:24" pos:end="3:21">(<parameter pos:start="1:25" pos:end="1:35"><decl pos:start="1:25" pos:end="1:35"><type pos:start="1:25" pos:end="1:35"><name pos:start="1:25" pos:end="1:32">NvmeCtrl</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:35">n</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:50">NvmeNamespace</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">ns</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:63">NvmeCmd</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">cmd</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:20"><decl pos:start="3:5" pos:end="3:20"><type pos:start="3:5" pos:end="3:20"><name pos:start="3:5" pos:end="3:15">NvmeRequest</name> <modifier pos:start="3:17" pos:end="3:17">*</modifier></type><name pos:start="3:18" pos:end="3:20">req</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:28">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">NvmeRwCmd</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:17">rw</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><operator pos:start="7:21" pos:end="7:21">(</operator><name pos:start="7:22" pos:end="7:30">NvmeRwCmd</name> <operator pos:start="7:32" pos:end="7:32">*</operator><operator pos:start="7:33" pos:end="7:33">)</operator><name pos:start="7:34" pos:end="7:36">cmd</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">nlb</name>  <init pos:start="9:19" pos:end="9:44">= <expr pos:start="9:21" pos:end="9:44"><call pos:start="9:21" pos:end="9:40"><name pos:start="9:21" pos:end="9:31">le32_to_cpu</name><argument_list pos:start="9:32" pos:end="9:40">(<argument pos:start="9:33" pos:end="9:39"><expr pos:start="9:33" pos:end="9:39"><name pos:start="9:33" pos:end="9:39"><name pos:start="9:33" pos:end="9:34">rw</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:39">nlb</name></name></expr></argument>)</argument_list></call> <operator pos:start="9:42" pos:end="9:42">+</operator> <literal type="number" pos:start="9:44" pos:end="9:44">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">slba</name> <init pos:start="11:19" pos:end="11:41">= <expr pos:start="11:21" pos:end="11:41"><call pos:start="11:21" pos:end="11:41"><name pos:start="11:21" pos:end="11:31">le64_to_cpu</name><argument_list pos:start="11:32" pos:end="11:41">(<argument pos:start="11:33" pos:end="11:40"><expr pos:start="11:33" pos:end="11:40"><name pos:start="11:33" pos:end="11:40"><name pos:start="11:33" pos:end="11:34">rw</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:40">slba</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:17">prp1</name> <init pos:start="13:19" pos:end="13:41">= <expr pos:start="13:21" pos:end="13:41"><call pos:start="13:21" pos:end="13:41"><name pos:start="13:21" pos:end="13:31">le64_to_cpu</name><argument_list pos:start="13:32" pos:end="13:41">(<argument pos:start="13:33" pos:end="13:40"><expr pos:start="13:33" pos:end="13:40"><name pos:start="13:33" pos:end="13:40"><name pos:start="13:33" pos:end="13:34">rw</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">prp1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:41"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:17">prp2</name> <init pos:start="15:19" pos:end="15:41">= <expr pos:start="15:21" pos:end="15:41"><call pos:start="15:21" pos:end="15:41"><name pos:start="15:21" pos:end="15:31">le64_to_cpu</name><argument_list pos:start="15:32" pos:end="15:41">(<argument pos:start="15:33" pos:end="15:40"><expr pos:start="15:33" pos:end="15:40"><name pos:start="15:33" pos:end="15:40"><name pos:start="15:33" pos:end="15:34">rw</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:40">prp2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="19:5" pos:end="19:65"><decl pos:start="19:5" pos:end="19:64"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:21">lba_index</name>  <init pos:start="19:24" pos:end="19:64">= <expr pos:start="19:26" pos:end="19:64"><call pos:start="19:26" pos:end="19:64"><name pos:start="19:26" pos:end="19:47">NVME_ID_NS_FLBAS_INDEX</name><argument_list pos:start="19:48" pos:end="19:64">(<argument pos:start="19:49" pos:end="19:63"><expr pos:start="19:49" pos:end="19:63"><name pos:start="19:49" pos:end="19:63"><name pos:start="19:49" pos:end="19:50">ns</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:57">id_ns</name><operator pos:start="19:58" pos:end="19:58">.</operator><name pos:start="19:59" pos:end="19:63">flbas</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:54"><decl pos:start="21:5" pos:end="21:53"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:22">data_shift</name> <init pos:start="21:24" pos:end="21:53">= <expr pos:start="21:26" pos:end="21:53"><name pos:start="21:26" pos:end="21:50"><name pos:start="21:26" pos:end="21:27">ns</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:34">id_ns</name><operator pos:start="21:35" pos:end="21:35">.</operator><name pos:start="21:36" pos:end="21:39">lbaf</name><index pos:start="21:40" pos:end="21:50">[<expr pos:start="21:41" pos:end="21:49"><name pos:start="21:41" pos:end="21:49">lba_index</name></expr>]</index></name><operator pos:start="21:51" pos:end="21:51">.</operator><name pos:start="21:52" pos:end="21:53">ds</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:43"><decl pos:start="23:5" pos:end="23:42"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:22">data_size</name> <init pos:start="23:24" pos:end="23:42">= <expr pos:start="23:26" pos:end="23:42"><name pos:start="23:26" pos:end="23:28">nlb</name> <operator pos:start="23:30" pos:end="23:31">&lt;&lt;</operator> <name pos:start="23:33" pos:end="23:42">data_shift</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:65"><decl pos:start="25:5" pos:end="25:64"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint64_t</name></type> <name pos:start="25:14" pos:end="25:21">aio_slba</name>  <init pos:start="25:24" pos:end="25:64">= <expr pos:start="25:26" pos:end="25:64"><name pos:start="25:26" pos:end="25:29">slba</name> <operator pos:start="25:31" pos:end="25:32">&lt;&lt;</operator> <operator pos:start="25:34" pos:end="25:34">(</operator><name pos:start="25:35" pos:end="25:44">data_shift</name> <operator pos:start="25:46" pos:end="25:46">-</operator> <name pos:start="25:48" pos:end="25:63">BDRV_SECTOR_BITS</name><operator pos:start="25:64" pos:end="25:64">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:56"><decl pos:start="27:5" pos:end="27:55"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:16">is_write</name> <init pos:start="27:18" pos:end="27:55">= <expr pos:start="27:20" pos:end="27:55"><ternary pos:start="27:20" pos:end="27:55"><condition pos:start="27:20" pos:end="27:49"><expr pos:start="27:20" pos:end="27:47"><name pos:start="27:20" pos:end="27:29"><name pos:start="27:20" pos:end="27:21">rw</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:29">opcode</name></name> <operator pos:start="27:31" pos:end="27:32">==</operator> <name pos:start="27:34" pos:end="27:47">NVME_CMD_WRITE</name></expr> ?</condition><then pos:start="27:51" pos:end="27:51"> <expr pos:start="27:51" pos:end="27:51"><literal type="number" pos:start="27:51" pos:end="27:51">1</literal></expr> </then><else pos:start="27:53" pos:end="27:55">: <expr pos:start="27:55" pos:end="27:55"><literal type="number" pos:start="27:55" pos:end="27:55">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:38">(<expr pos:start="31:9" pos:end="31:37"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:13">slba</name> <operator pos:start="31:15" pos:end="31:15">+</operator> <name pos:start="31:17" pos:end="31:19">nlb</name><operator pos:start="31:20" pos:end="31:20">)</operator> <operator pos:start="31:22" pos:end="31:22">&gt;</operator> <name pos:start="31:24" pos:end="31:37"><name pos:start="31:24" pos:end="31:25">ns</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:32">id_ns</name><operator pos:start="31:33" pos:end="31:33">.</operator><name pos:start="31:34" pos:end="31:37">nsze</name></name></expr>)</condition> <block pos:start="31:40" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:41">

        <return pos:start="33:9" pos:end="33:41">return <expr pos:start="33:16" pos:end="33:40"><name pos:start="33:16" pos:end="33:29">NVME_LBA_RANGE</name> <operator pos:start="33:31" pos:end="33:31">|</operator> <name pos:start="33:33" pos:end="33:40">NVME_DNR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:58">(<expr pos:start="37:9" pos:end="37:57"><call pos:start="37:9" pos:end="37:57"><name pos:start="37:9" pos:end="37:20">nvme_map_prp</name><argument_list pos:start="37:21" pos:end="37:57">(<argument pos:start="37:22" pos:end="37:30"><expr pos:start="37:22" pos:end="37:30"><operator pos:start="37:22" pos:end="37:22">&amp;</operator><name pos:start="37:23" pos:end="37:30"><name pos:start="37:23" pos:end="37:25">req</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:30">qsg</name></name></expr></argument>, <argument pos:start="37:33" pos:end="37:36"><expr pos:start="37:33" pos:end="37:36"><name pos:start="37:33" pos:end="37:36">prp1</name></expr></argument>, <argument pos:start="37:39" pos:end="37:42"><expr pos:start="37:39" pos:end="37:42"><name pos:start="37:39" pos:end="37:42">prp2</name></expr></argument>, <argument pos:start="37:45" pos:end="37:53"><expr pos:start="37:45" pos:end="37:53"><name pos:start="37:45" pos:end="37:53">data_size</name></expr></argument>, <argument pos:start="37:56" pos:end="37:56"><expr pos:start="37:56" pos:end="37:56"><name pos:start="37:56" pos:end="37:56">n</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:60" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:45">

        <return pos:start="39:9" pos:end="39:45">return <expr pos:start="39:16" pos:end="39:44"><name pos:start="39:16" pos:end="39:33">NVME_INVALID_FIELD</name> <operator pos:start="39:35" pos:end="39:35">|</operator> <name pos:start="39:37" pos:end="39:44">NVME_DNR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:49"><expr pos:start="43:5" pos:end="43:48"><call pos:start="43:5" pos:end="43:48"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:48">(<argument pos:start="43:12" pos:end="43:47"><expr pos:start="43:12" pos:end="43:47"><operator pos:start="43:12" pos:end="43:12">(</operator><name pos:start="43:13" pos:end="43:15">nlb</name> <operator pos:start="43:17" pos:end="43:18">&lt;&lt;</operator> <name pos:start="43:20" pos:end="43:29">data_shift</name><operator pos:start="43:30" pos:end="43:30">)</operator> <operator pos:start="43:32" pos:end="43:33">==</operator> <name pos:start="43:35" pos:end="43:47"><name pos:start="43:35" pos:end="43:37">req</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:42">qsg</name><operator pos:start="43:43" pos:end="43:43">.</operator><name pos:start="43:44" pos:end="43:47">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="49:44"><expr pos:start="47:5" pos:end="49:43"><call pos:start="47:5" pos:end="49:43"><name pos:start="47:5" pos:end="47:18">dma_acct_start</name><argument_list pos:start="47:19" pos:end="49:43">(<argument pos:start="47:20" pos:end="47:29"><expr pos:start="47:20" pos:end="47:29"><name pos:start="47:20" pos:end="47:29"><name pos:start="47:20" pos:end="47:20">n</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:26">conf</name><operator pos:start="47:27" pos:end="47:27">.</operator><name pos:start="47:28" pos:end="47:29">bs</name></name></expr></argument>, <argument pos:start="47:32" pos:end="47:41"><expr pos:start="47:32" pos:end="47:41"><operator pos:start="47:32" pos:end="47:32">&amp;</operator><name pos:start="47:33" pos:end="47:41"><name pos:start="47:33" pos:end="47:35">req</name><operator pos:start="47:36" pos:end="47:37">-&gt;</operator><name pos:start="47:38" pos:end="47:41">acct</name></name></expr></argument>, <argument pos:start="47:44" pos:end="47:52"><expr pos:start="47:44" pos:end="47:52"><operator pos:start="47:44" pos:end="47:44">&amp;</operator><name pos:start="47:45" pos:end="47:52"><name pos:start="47:45" pos:end="47:47">req</name><operator pos:start="47:48" pos:end="47:49">-&gt;</operator><name pos:start="47:50" pos:end="47:52">qsg</name></name></expr></argument>, <argument pos:start="47:55" pos:end="49:42"><expr pos:start="47:55" pos:end="49:42"><ternary pos:start="47:55" pos:end="49:42"><condition pos:start="47:55" pos:end="47:64"><expr pos:start="47:55" pos:end="47:62"><name pos:start="47:55" pos:end="47:62">is_write</name></expr> ?</condition><then pos:start="49:9" pos:end="49:24">

        <expr pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:24">BLOCK_ACCT_WRITE</name></expr> </then><else pos:start="49:26" pos:end="49:42">: <expr pos:start="49:28" pos:end="49:42"><name pos:start="49:28" pos:end="49:42">BLOCK_ACCT_READ</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="55:72"><expr pos:start="51:5" pos:end="55:71"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:7">req</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:14">aiocb</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <ternary pos:start="51:18" pos:end="55:71"><condition pos:start="51:18" pos:end="51:27"><expr pos:start="51:18" pos:end="51:25"><name pos:start="51:18" pos:end="51:25">is_write</name></expr> ?</condition><then pos:start="53:9" pos:end="53:72">

        <expr pos:start="53:9" pos:end="53:72"><call pos:start="53:9" pos:end="53:72"><name pos:start="53:9" pos:end="53:22">dma_bdrv_write</name><argument_list pos:start="53:23" pos:end="53:72">(<argument pos:start="53:24" pos:end="53:33"><expr pos:start="53:24" pos:end="53:33"><name pos:start="53:24" pos:end="53:33"><name pos:start="53:24" pos:end="53:24">n</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:30">conf</name><operator pos:start="53:31" pos:end="53:31">.</operator><name pos:start="53:32" pos:end="53:33">bs</name></name></expr></argument>, <argument pos:start="53:36" pos:end="53:44"><expr pos:start="53:36" pos:end="53:44"><operator pos:start="53:36" pos:end="53:36">&amp;</operator><name pos:start="53:37" pos:end="53:44"><name pos:start="53:37" pos:end="53:39">req</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:44">qsg</name></name></expr></argument>, <argument pos:start="53:47" pos:end="53:54"><expr pos:start="53:47" pos:end="53:54"><name pos:start="53:47" pos:end="53:54">aio_slba</name></expr></argument>, <argument pos:start="53:57" pos:end="53:66"><expr pos:start="53:57" pos:end="53:66"><name pos:start="53:57" pos:end="53:66">nvme_rw_cb</name></expr></argument>, <argument pos:start="53:69" pos:end="53:71"><expr pos:start="53:69" pos:end="53:71"><name pos:start="53:69" pos:end="53:71">req</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="53:74" pos:end="55:71">:

        <expr pos:start="55:9" pos:end="55:71"><call pos:start="55:9" pos:end="55:71"><name pos:start="55:9" pos:end="55:21">dma_bdrv_read</name><argument_list pos:start="55:22" pos:end="55:71">(<argument pos:start="55:23" pos:end="55:32"><expr pos:start="55:23" pos:end="55:32"><name pos:start="55:23" pos:end="55:32"><name pos:start="55:23" pos:end="55:23">n</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:29">conf</name><operator pos:start="55:30" pos:end="55:30">.</operator><name pos:start="55:31" pos:end="55:32">bs</name></name></expr></argument>, <argument pos:start="55:35" pos:end="55:43"><expr pos:start="55:35" pos:end="55:43"><operator pos:start="55:35" pos:end="55:35">&amp;</operator><name pos:start="55:36" pos:end="55:43"><name pos:start="55:36" pos:end="55:38">req</name><operator pos:start="55:39" pos:end="55:40">-&gt;</operator><name pos:start="55:41" pos:end="55:43">qsg</name></name></expr></argument>, <argument pos:start="55:46" pos:end="55:53"><expr pos:start="55:46" pos:end="55:53"><name pos:start="55:46" pos:end="55:53">aio_slba</name></expr></argument>, <argument pos:start="55:56" pos:end="55:65"><expr pos:start="55:56" pos:end="55:65"><name pos:start="55:56" pos:end="55:65">nvme_rw_cb</name></expr></argument>, <argument pos:start="55:68" pos:end="55:70"><expr pos:start="55:68" pos:end="55:70"><name pos:start="55:68" pos:end="55:70">req</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>



    <return pos:start="59:5" pos:end="59:28">return <expr pos:start="59:12" pos:end="59:27"><name pos:start="59:12" pos:end="59:27">NVME_NO_COMPLETE</name></expr>;</return>

</block_content>}</block></function>
</unit>
