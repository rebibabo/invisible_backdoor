<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21011.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">usbredir_buffered_bulk_packet</name><parameter_list pos:start="1:42" pos:end="5:32">(<parameter pos:start="1:43" pos:end="1:52"><decl pos:start="1:43" pos:end="1:52"><type pos:start="1:43" pos:end="1:52"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">priv</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:65"><decl pos:start="1:55" pos:end="1:65"><type pos:start="1:55" pos:end="1:65"><name pos:start="1:55" pos:end="1:62">uint64_t</name></type> <name pos:start="1:64" pos:end="1:65">id</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:70"><decl pos:start="3:5" pos:end="3:70"><type pos:start="3:5" pos:end="3:70"><name pos:start="3:5" pos:end="3:48"><name pos:start="3:5" pos:end="3:10">struct</name> <name pos:start="3:12" pos:end="3:48">usb_redir_buffered_bulk_packet_header</name></name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:70">buffered_bulk_packet</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:17">data</name></decl></parameter>, <parameter pos:start="5:20" pos:end="5:31"><decl pos:start="5:20" pos:end="5:31"><type pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:22">int</name></type> <name pos:start="5:24" pos:end="5:31">data_len</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="89:1">{<block_content pos:start="9:5" pos:end="87:5">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">USBRedirDevice</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">dev</name> <init pos:start="9:25" pos:end="9:30">= <expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">priv</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:18">status</name></decl>, <decl pos:start="11:21" pos:end="11:55"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:21" pos:end="11:22">ep</name> <init pos:start="11:24" pos:end="11:55">= <expr pos:start="11:26" pos:end="11:55"><name pos:start="11:26" pos:end="11:55"><name pos:start="11:26" pos:end="11:45">buffered_bulk_packet</name><operator pos:start="11:46" pos:end="11:47">-&gt;</operator><name pos:start="11:48" pos:end="11:55">endpoint</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:25">free_on_destroy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:14">len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:60"><expr pos:start="19:5" pos:end="21:59"><call pos:start="19:5" pos:end="21:59"><name pos:start="19:5" pos:end="19:11">DPRINTF</name><argument_list pos:start="19:12" pos:end="21:59">(<argument pos:start="19:13" pos:end="19:70"><expr pos:start="19:13" pos:end="19:70"><literal type="string" pos:start="19:13" pos:end="19:60">"buffered-bulk-in status %d ep %02X len %d id %"</literal><name pos:start="19:61" pos:end="19:66">PRIu64</name><literal type="string" pos:start="19:67" pos:end="19:70">"\n"</literal></expr></argument>,

            <argument pos:start="21:13" pos:end="21:40"><expr pos:start="21:13" pos:end="21:40"><name pos:start="21:13" pos:end="21:40"><name pos:start="21:13" pos:end="21:32">buffered_bulk_packet</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:40">status</name></name></expr></argument>, <argument pos:start="21:43" pos:end="21:44"><expr pos:start="21:43" pos:end="21:44"><name pos:start="21:43" pos:end="21:44">ep</name></expr></argument>, <argument pos:start="21:47" pos:end="21:54"><expr pos:start="21:47" pos:end="21:54"><name pos:start="21:47" pos:end="21:54">data_len</name></expr></argument>, <argument pos:start="21:57" pos:end="21:58"><expr pos:start="21:57" pos:end="21:58"><name pos:start="21:57" pos:end="21:58">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:63">(<expr pos:start="25:9" pos:end="25:62"><name pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:11">dev</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:21">endpoint</name><index pos:start="25:22" pos:end="25:31">[<expr pos:start="25:23" pos:end="25:30"><call pos:start="25:23" pos:end="25:30"><name pos:start="25:23" pos:end="25:26">EP2I</name><argument_list pos:start="25:27" pos:end="25:30">(<argument pos:start="25:28" pos:end="25:29"><expr pos:start="25:28" pos:end="25:29"><name pos:start="25:28" pos:end="25:29">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="25:32" pos:end="25:32">.</operator><name pos:start="25:33" pos:end="25:36">type</name> <operator pos:start="25:38" pos:end="25:39">!=</operator> <name pos:start="25:41" pos:end="25:62">USB_ENDPOINT_XFER_BULK</name></expr>)</condition> <block pos:start="25:65" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:15">

        <expr_stmt pos:start="27:9" pos:end="27:74"><expr pos:start="27:9" pos:end="27:73"><call pos:start="27:9" pos:end="27:73"><name pos:start="27:9" pos:end="27:13">ERROR</name><argument_list pos:start="27:14" pos:end="27:73">(<argument pos:start="27:15" pos:end="27:68"><expr pos:start="27:15" pos:end="27:68"><literal type="string" pos:start="27:15" pos:end="27:68">"received buffered-bulk packet for non bulk ep %02X\n"</literal></expr></argument>, <argument pos:start="27:71" pos:end="27:72"><expr pos:start="27:71" pos:end="27:72"><name pos:start="27:71" pos:end="27:72">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:19"><expr pos:start="29:9" pos:end="29:18"><call pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:12">free</name><argument_list pos:start="29:13" pos:end="29:18">(<argument pos:start="29:14" pos:end="29:17"><expr pos:start="29:14" pos:end="29:17"><name pos:start="29:14" pos:end="29:17">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:60">(<expr pos:start="37:9" pos:end="37:59"><name pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:11">dev</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:21">endpoint</name><index pos:start="37:22" pos:end="37:31">[<expr pos:start="37:23" pos:end="37:30"><call pos:start="37:23" pos:end="37:30"><name pos:start="37:23" pos:end="37:26">EP2I</name><argument_list pos:start="37:27" pos:end="37:30">(<argument pos:start="37:28" pos:end="37:29"><expr pos:start="37:28" pos:end="37:29"><name pos:start="37:28" pos:end="37:29">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="37:32" pos:end="37:32">.</operator><name pos:start="37:33" pos:end="37:54">bulk_receiving_started</name> <operator pos:start="37:56" pos:end="37:57">==</operator> <literal type="number" pos:start="37:59" pos:end="37:59">0</literal></expr>)</condition> <block pos:start="37:62" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:15">

        <expr_stmt pos:start="39:9" pos:end="39:78"><expr pos:start="39:9" pos:end="39:77"><call pos:start="39:9" pos:end="39:77"><name pos:start="39:9" pos:end="39:15">DPRINTF</name><argument_list pos:start="39:16" pos:end="39:77">(<argument pos:start="39:17" pos:end="39:72"><expr pos:start="39:17" pos:end="39:72"><literal type="string" pos:start="39:17" pos:end="39:72">"received buffered-bulk packet on not started ep %02X\n"</literal></expr></argument>, <argument pos:start="39:75" pos:end="39:76"><expr pos:start="39:75" pos:end="39:76"><name pos:start="39:75" pos:end="39:76">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:19"><expr pos:start="41:9" pos:end="41:18"><call pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:12">free</name><argument_list pos:start="41:13" pos:end="41:18">(<argument pos:start="41:14" pos:end="41:17"><expr pos:start="41:14" pos:end="41:17"><name pos:start="41:14" pos:end="41:17">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:76">/* Data must be in maxp chunks for buffered_bulk_add_*_data_to_packet */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:50"><expr pos:start="51:5" pos:end="51:49"><name pos:start="51:5" pos:end="51:7">len</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <name pos:start="51:11" pos:end="51:33"><name pos:start="51:11" pos:end="51:13">dev</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:23">endpoint</name><index pos:start="51:24" pos:end="51:33">[<expr pos:start="51:25" pos:end="51:32"><call pos:start="51:25" pos:end="51:32"><name pos:start="51:25" pos:end="51:28">EP2I</name><argument_list pos:start="51:29" pos:end="51:32">(<argument pos:start="51:30" pos:end="51:31"><expr pos:start="51:30" pos:end="51:31"><name pos:start="51:30" pos:end="51:31">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="51:34" pos:end="51:34">.</operator><name pos:start="51:35" pos:end="51:49">max_packet_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:10">status</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:30">usb_redir_success</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:27"><expr pos:start="55:5" pos:end="55:26"><name pos:start="55:5" pos:end="55:19">free_on_destroy</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:26">NULL</name></expr>;</expr_stmt>

    <for pos:start="57:5" pos:end="73:5">for <control pos:start="57:9" pos:end="57:39">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:29"><expr pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:28">data_len</name></expr>;</condition> <incr pos:start="57:31" pos:end="57:38"><expr pos:start="57:31" pos:end="57:38"><name pos:start="57:31" pos:end="57:31">i</name> <operator pos:start="57:33" pos:end="57:34">+=</operator> <name pos:start="57:36" pos:end="57:38">len</name></expr></incr>)</control> <block pos:start="57:41" pos:end="73:5">{<block_content pos:start="59:9" pos:end="71:68">

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:34">(<expr pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:15">len</name> <operator pos:start="59:17" pos:end="59:18">&gt;=</operator> <operator pos:start="59:20" pos:end="59:20">(</operator><name pos:start="59:21" pos:end="59:28">data_len</name> <operator pos:start="59:30" pos:end="59:30">-</operator> <name pos:start="59:32" pos:end="59:32">i</name><operator pos:start="59:33" pos:end="59:33">)</operator></expr>)</condition> <block pos:start="59:36" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:35">

            <expr_stmt pos:start="61:13" pos:end="61:31"><expr pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:15">len</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:26">data_len</name> <operator pos:start="61:28" pos:end="61:28">-</operator> <name pos:start="61:30" pos:end="61:30">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:50"><expr pos:start="63:13" pos:end="63:49"><name pos:start="63:13" pos:end="63:18">status</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:49"><name pos:start="63:22" pos:end="63:41">buffered_bulk_packet</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:49">status</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:35"><expr pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:27">free_on_destroy</name> <operator pos:start="65:29" pos:end="65:29">=</operator> <name pos:start="65:31" pos:end="65:34">data</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="69:9" pos:end="69:61">/* bufp_alloc also adds the packet to the ep queue */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:68"><expr pos:start="71:9" pos:end="71:67"><call pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:18">bufp_alloc</name><argument_list pos:start="71:19" pos:end="71:67">(<argument pos:start="71:20" pos:end="71:22"><expr pos:start="71:20" pos:end="71:22"><name pos:start="71:20" pos:end="71:22">dev</name></expr></argument>, <argument pos:start="71:25" pos:end="71:32"><expr pos:start="71:25" pos:end="71:32"><name pos:start="71:25" pos:end="71:28">data</name> <operator pos:start="71:30" pos:end="71:30">+</operator> <name pos:start="71:32" pos:end="71:32">i</name></expr></argument>, <argument pos:start="71:35" pos:end="71:37"><expr pos:start="71:35" pos:end="71:37"><name pos:start="71:35" pos:end="71:37">len</name></expr></argument>, <argument pos:start="71:40" pos:end="71:45"><expr pos:start="71:40" pos:end="71:45"><name pos:start="71:40" pos:end="71:45">status</name></expr></argument>, <argument pos:start="71:48" pos:end="71:49"><expr pos:start="71:48" pos:end="71:49"><name pos:start="71:48" pos:end="71:49">ep</name></expr></argument>, <argument pos:start="71:52" pos:end="71:66"><expr pos:start="71:52" pos:end="71:66"><name pos:start="71:52" pos:end="71:66">free_on_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="77:5" pos:end="87:5"><if pos:start="77:5" pos:end="87:5">if <condition pos:start="77:8" pos:end="77:53">(<expr pos:start="77:9" pos:end="77:52"><name pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:11">dev</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:21">endpoint</name><index pos:start="77:22" pos:end="77:31">[<expr pos:start="77:23" pos:end="77:30"><call pos:start="77:23" pos:end="77:30"><name pos:start="77:23" pos:end="77:26">EP2I</name><argument_list pos:start="77:27" pos:end="77:30">(<argument pos:start="77:28" pos:end="77:29"><expr pos:start="77:28" pos:end="77:29"><name pos:start="77:28" pos:end="77:29">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="77:32" pos:end="77:32">.</operator><name pos:start="77:33" pos:end="77:52">pending_async_packet</name></expr>)</condition> <block pos:start="77:55" pos:end="87:5">{<block_content pos:start="79:9" pos:end="85:42">

        <decl_stmt pos:start="79:9" pos:end="79:68"><decl pos:start="79:9" pos:end="79:67"><type pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:17">USBPacket</name> <modifier pos:start="79:19" pos:end="79:19">*</modifier></type><name pos:start="79:20" pos:end="79:20">p</name> <init pos:start="79:22" pos:end="79:67">= <expr pos:start="79:24" pos:end="79:67"><name pos:start="79:24" pos:end="79:46"><name pos:start="79:24" pos:end="79:26">dev</name><operator pos:start="79:27" pos:end="79:28">-&gt;</operator><name pos:start="79:29" pos:end="79:36">endpoint</name><index pos:start="79:37" pos:end="79:46">[<expr pos:start="79:38" pos:end="79:45"><call pos:start="79:38" pos:end="79:45"><name pos:start="79:38" pos:end="79:41">EP2I</name><argument_list pos:start="79:42" pos:end="79:45">(<argument pos:start="79:43" pos:end="79:44"><expr pos:start="79:43" pos:end="79:44"><name pos:start="79:43" pos:end="79:44">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="79:47" pos:end="79:47">.</operator><name pos:start="79:48" pos:end="79:67">pending_async_packet</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:11">dev</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:21">endpoint</name><index pos:start="81:22" pos:end="81:31">[<expr pos:start="81:23" pos:end="81:30"><call pos:start="81:23" pos:end="81:30"><name pos:start="81:23" pos:end="81:26">EP2I</name><argument_list pos:start="81:27" pos:end="81:30">(<argument pos:start="81:28" pos:end="81:29"><expr pos:start="81:28" pos:end="81:29"><name pos:start="81:28" pos:end="81:29">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="81:32" pos:end="81:32">.</operator><name pos:start="81:33" pos:end="81:52">pending_async_packet</name> <operator pos:start="81:54" pos:end="81:54">=</operator> <name pos:start="81:56" pos:end="81:59">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:55"><expr pos:start="83:9" pos:end="83:54"><call pos:start="83:9" pos:end="83:54"><name pos:start="83:9" pos:end="83:42">usbredir_buffered_bulk_in_complete</name><argument_list pos:start="83:43" pos:end="83:54">(<argument pos:start="83:44" pos:end="83:46"><expr pos:start="83:44" pos:end="83:46"><name pos:start="83:44" pos:end="83:46">dev</name></expr></argument>, <argument pos:start="83:49" pos:end="83:49"><expr pos:start="83:49" pos:end="83:49"><name pos:start="83:49" pos:end="83:49">p</name></expr></argument>, <argument pos:start="83:52" pos:end="83:53"><expr pos:start="83:52" pos:end="83:53"><name pos:start="83:52" pos:end="83:53">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:42"><expr pos:start="85:9" pos:end="85:41"><call pos:start="85:9" pos:end="85:41"><name pos:start="85:9" pos:end="85:27">usb_packet_complete</name><argument_list pos:start="85:28" pos:end="85:41">(<argument pos:start="85:29" pos:end="85:37"><expr pos:start="85:29" pos:end="85:37"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:37"><name pos:start="85:30" pos:end="85:32">dev</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:37">dev</name></name></expr></argument>, <argument pos:start="85:40" pos:end="85:40"><expr pos:start="85:40" pos:end="85:40"><name pos:start="85:40" pos:end="85:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
