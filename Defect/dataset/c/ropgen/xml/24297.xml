<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24297.c" pos:tabs="8"><function pos:start="1:1" pos:end="30:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:25">do_rfi</name><parameter_list pos:start="1:26" pos:end="2:59">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:37">CPUPPCState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">env</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:56">target_ulong</name></type> <name pos:start="1:58" pos:end="1:60">nip</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:78"><decl pos:start="1:63" pos:end="1:78"><type pos:start="1:63" pos:end="1:78"><name pos:start="1:63" pos:end="1:74">target_ulong</name></type> <name pos:start="1:76" pos:end="1:78">msr</name></decl></parameter>,
                          <parameter pos:start="2:27" pos:end="2:43"><decl pos:start="2:27" pos:end="2:43"><type pos:start="2:27" pos:end="2:43"><name pos:start="2:27" pos:end="2:38">target_ulong</name></type> <name pos:start="2:40" pos:end="2:43">msrm</name></decl></parameter>, <parameter pos:start="2:46" pos:end="2:58"><decl pos:start="2:46" pos:end="2:58"><type pos:start="2:46" pos:end="2:58"><name pos:start="2:46" pos:end="2:48">int</name></type> <name pos:start="2:50" pos:end="2:58">keep_msrh</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="30:1">{<block_content pos:start="4:5" pos:end="29:50">
    <decl_stmt pos:start="4:5" pos:end="6:0"><decl pos:start="4:5" pos:end="4:44"><type pos:start="4:5" pos:end="4:14"><name pos:start="4:5" pos:end="4:12">CPUState</name> <modifier pos:start="4:14" pos:end="4:14">*</modifier></type><name pos:start="4:15" pos:end="4:16">cs</name> <init pos:start="4:18" pos:end="4:44">= <expr pos:start="4:20" pos:end="4:44"><call pos:start="4:20" pos:end="4:44"><name pos:start="4:20" pos:end="4:22">CPU</name><argument_list pos:start="4:23" pos:end="4:44">(<argument pos:start="4:24" pos:end="4:43"><expr pos:start="4:24" pos:end="4:43"><call pos:start="4:24" pos:end="4:43"><name pos:start="4:24" pos:end="4:38">ppc_env_get_cpu</name><argument_list pos:start="4:39" pos:end="4:43">(<argument pos:start="4:40" pos:end="4:42"><expr pos:start="4:40" pos:end="4:42"><name pos:start="4:40" pos:end="4:42">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if pos:start="5:1" pos:end="5:25">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:25"><call pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:25">(<argument pos:start="5:13" pos:end="5:24"><expr pos:start="5:13" pos:end="5:24"><name pos:start="5:13" pos:end="5:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt pos:start="6:5" pos:end="17:0"><if pos:start="6:5" pos:end="9:5">if <condition pos:start="6:8" pos:end="6:31">(<expr pos:start="6:9" pos:end="6:30"><call pos:start="6:9" pos:end="6:30"><name pos:start="6:9" pos:end="6:20">msr_is_64bit</name><argument_list pos:start="6:21" pos:end="6:30">(<argument pos:start="6:22" pos:end="6:24"><expr pos:start="6:22" pos:end="6:24"><name pos:start="6:22" pos:end="6:24">env</name></expr></argument>, <argument pos:start="6:27" pos:end="6:29"><expr pos:start="6:27" pos:end="6:29"><name pos:start="6:27" pos:end="6:29">msr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6:33" pos:end="9:5">{<block_content pos:start="7:9" pos:end="8:30">
        <expr_stmt pos:start="7:9" pos:end="7:28"><expr pos:start="7:9" pos:end="7:27"><name pos:start="7:9" pos:end="7:11">nip</name> <operator pos:start="7:13" pos:end="7:13">=</operator> <operator pos:start="7:15" pos:end="7:15">(</operator><name pos:start="7:16" pos:end="7:23">uint64_t</name><operator pos:start="7:24" pos:end="7:24">)</operator><name pos:start="7:25" pos:end="7:27">nip</name></expr>;</expr_stmt>
        <expr_stmt pos:start="8:9" pos:end="8:30"><expr pos:start="8:9" pos:end="8:29"><name pos:start="8:9" pos:end="8:11">msr</name> <operator pos:start="8:13" pos:end="8:14">&amp;=</operator> <operator pos:start="8:16" pos:end="8:16">(</operator><name pos:start="8:17" pos:end="8:24">uint64_t</name><operator pos:start="8:25" pos:end="8:25">)</operator><name pos:start="8:26" pos:end="8:29">msrm</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="9:7" pos:end="17:0">else <block pos:start="9:12" pos:end="17:0">{<block_content pos:start="10:9" pos:end="14:9">
        <expr_stmt pos:start="10:9" pos:end="10:28"><expr pos:start="10:9" pos:end="10:27"><name pos:start="10:9" pos:end="10:11">nip</name> <operator pos:start="10:13" pos:end="10:13">=</operator> <operator pos:start="10:15" pos:end="10:15">(</operator><name pos:start="10:16" pos:end="10:23">uint32_t</name><operator pos:start="10:24" pos:end="10:24">)</operator><name pos:start="10:25" pos:end="10:27">nip</name></expr>;</expr_stmt>
        <expr_stmt pos:start="11:9" pos:end="11:37"><expr pos:start="11:9" pos:end="11:36"><name pos:start="11:9" pos:end="11:11">msr</name> <operator pos:start="11:13" pos:end="11:13">=</operator> <operator pos:start="11:15" pos:end="11:15">(</operator><name pos:start="11:16" pos:end="11:23">uint32_t</name><operator pos:start="11:24" pos:end="11:24">)</operator><operator pos:start="11:25" pos:end="11:25">(</operator><name pos:start="11:26" pos:end="11:28">msr</name> <operator pos:start="11:30" pos:end="11:30">&amp;</operator> <name pos:start="11:32" pos:end="11:35">msrm</name><operator pos:start="11:36" pos:end="11:36">)</operator></expr>;</expr_stmt>
        <if_stmt pos:start="12:9" pos:end="14:9"><if pos:start="12:9" pos:end="14:9">if <condition pos:start="12:12" pos:end="12:22">(<expr pos:start="12:13" pos:end="12:21"><name pos:start="12:13" pos:end="12:21">keep_msrh</name></expr>)</condition> <block pos:start="12:24" pos:end="14:9">{<block_content pos:start="13:13" pos:end="13:54">
            <expr_stmt pos:start="13:13" pos:end="13:54"><expr pos:start="13:13" pos:end="13:53"><name pos:start="13:13" pos:end="13:15">msr</name> <operator pos:start="13:17" pos:end="13:18">|=</operator> <name pos:start="13:20" pos:end="13:27"><name pos:start="13:20" pos:end="13:22">env</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:27">msr</name></name> <operator pos:start="13:29" pos:end="13:29">&amp;</operator> <operator pos:start="13:31" pos:end="13:31">~</operator><operator pos:start="13:32" pos:end="13:32">(</operator><operator pos:start="13:33" pos:end="13:33">(</operator><name pos:start="13:34" pos:end="13:41">uint64_t</name><operator pos:start="13:42" pos:end="13:42">)</operator><literal type="number" pos:start="13:43" pos:end="13:52">0xFFFFFFFF</literal><operator pos:start="13:53" pos:end="13:53">)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else pos:start="16:1" pos:end="16:5">#<cpp:directive pos:start="16:2" pos:end="16:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="17:5" pos:end="17:24"><expr pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:7">nip</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <operator pos:start="17:11" pos:end="17:11">(</operator><name pos:start="17:12" pos:end="17:19">uint32_t</name><operator pos:start="17:20" pos:end="17:20">)</operator><name pos:start="17:21" pos:end="17:23">nip</name></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="20:0"><expr pos:start="18:5" pos:end="18:25"><name pos:start="18:5" pos:end="18:7">msr</name> <operator pos:start="18:9" pos:end="18:10">&amp;=</operator> <operator pos:start="18:12" pos:end="18:12">(</operator><name pos:start="18:13" pos:end="18:20">uint32_t</name><operator pos:start="18:21" pos:end="18:21">)</operator><name pos:start="18:22" pos:end="18:25">msrm</name></expr>;</expr_stmt>
<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>
    <comment type="block" pos:start="20:5" pos:end="20:56">/* XXX: beware: this is false if VLE is supported */</comment>
    <expr_stmt pos:start="21:5" pos:end="21:49"><expr pos:start="21:5" pos:end="21:48"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:7">env</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:12">nip</name></name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:18">nip</name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <operator pos:start="21:22" pos:end="21:22">~</operator><operator pos:start="21:23" pos:end="21:23">(</operator><operator pos:start="21:24" pos:end="21:24">(</operator><name pos:start="21:25" pos:end="21:36">target_ulong</name><operator pos:start="21:37" pos:end="21:37">)</operator><literal type="number" pos:start="21:38" pos:end="21:47">0x00000003</literal><operator pos:start="21:48" pos:end="21:48">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="24:0"><expr pos:start="22:5" pos:end="22:31"><call pos:start="22:5" pos:end="22:31"><name pos:start="22:5" pos:end="22:18">hreg_store_msr</name><argument_list pos:start="22:19" pos:end="22:31">(<argument pos:start="22:20" pos:end="22:22"><expr pos:start="22:20" pos:end="22:22"><name pos:start="22:20" pos:end="22:22">env</name></expr></argument>, <argument pos:start="22:25" pos:end="22:27"><expr pos:start="22:25" pos:end="22:27"><name pos:start="22:25" pos:end="22:27">msr</name></expr></argument>, <argument pos:start="22:30" pos:end="22:30"><expr pos:start="22:30" pos:end="22:30"><literal type="number" pos:start="22:30" pos:end="22:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="23:1" pos:end="23:21">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:21"><call pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:11">defined</name><argument_list pos:start="23:12" pos:end="23:21">(<argument pos:start="23:13" pos:end="23:20"><expr pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:20">DEBUG_OP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt pos:start="24:5" pos:end="26:0"><expr pos:start="24:5" pos:end="24:36"><call pos:start="24:5" pos:end="24:36"><name pos:start="24:5" pos:end="24:16">cpu_dump_rfi</name><argument_list pos:start="24:17" pos:end="24:36">(<argument pos:start="24:18" pos:end="24:25"><expr pos:start="24:18" pos:end="24:25"><name pos:start="24:18" pos:end="24:25"><name pos:start="24:18" pos:end="24:20">env</name><operator pos:start="24:21" pos:end="24:22">-&gt;</operator><name pos:start="24:23" pos:end="24:25">nip</name></name></expr></argument>, <argument pos:start="24:28" pos:end="24:35"><expr pos:start="24:28" pos:end="24:35"><name pos:start="24:28" pos:end="24:35"><name pos:start="24:28" pos:end="24:30">env</name><operator pos:start="24:31" pos:end="24:32">-&gt;</operator><name pos:start="24:33" pos:end="24:35">msr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>
    <comment type="block" pos:start="26:5" pos:end="28:7">/* No need to raise an exception here,
     * as rfi is always the last insn of a TB
     */</comment>
    <expr_stmt pos:start="29:5" pos:end="29:50"><expr pos:start="29:5" pos:end="29:49"><name pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:6">cs</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:25">interrupt_request</name></name> <operator pos:start="29:27" pos:end="29:28">|=</operator> <name pos:start="29:30" pos:end="29:49">CPU_INTERRUPT_EXITTB</name></expr>;</expr_stmt>
</block_content>}</block></function></unit>
