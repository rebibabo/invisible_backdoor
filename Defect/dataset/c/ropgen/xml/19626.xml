<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19626.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vc9_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:55">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:40"><decl pos:start="5:29" pos:end="5:40"><type pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="193:1">{<block_content pos:start="9:5" pos:end="191:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">VC9Context</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">v</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:26">= <expr pos:start="11:15" pos:end="11:26"><name pos:start="11:15" pos:end="11:26">FRAME_SKIPED</name></expr></init></decl>, <decl pos:start="11:29" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:29" pos:end="11:31">len</name></decl>, <decl pos:start="11:34" pos:end="11:43"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:34" pos:end="11:43">start_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">tmp_buf</name></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:5">v</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:12">avctx</name></name> <operator pos:start="17:14" pos:end="17:14">=</operator> <name pos:start="17:16" pos:end="17:20">avctx</name></expr>;</expr_stmt>



    <comment type="line" pos:start="21:5" pos:end="21:32">//buf_size = 0 -&gt; last frame</comment>

    <if_stmt pos:start="23:5" pos:end="23:28"><if pos:start="23:5" pos:end="23:28">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:17">buf_size</name></expr>)</condition><block type="pseudo" pos:start="23:20" pos:end="23:28"><block_content pos:start="23:20" pos:end="23:28"> <return pos:start="23:20" pos:end="23:28">return <expr pos:start="23:27" pos:end="23:27"><literal type="number" pos:start="23:27" pos:end="23:27">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="29:44"><expr pos:start="27:5" pos:end="29:43"><name pos:start="27:5" pos:end="27:7">len</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="29:43"><name pos:start="27:11" pos:end="27:28">avpicture_get_size</name><argument_list pos:start="27:29" pos:end="29:43">(<argument pos:start="27:30" pos:end="27:43"><expr pos:start="27:30" pos:end="27:43"><name pos:start="27:30" pos:end="27:43"><name pos:start="27:30" pos:end="27:34">avctx</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:43">pix_fmt</name></name></expr></argument>, <argument pos:start="27:46" pos:end="27:57"><expr pos:start="27:46" pos:end="27:57"><name pos:start="27:46" pos:end="27:57"><name pos:start="27:46" pos:end="27:50">avctx</name><operator pos:start="27:51" pos:end="27:52">-&gt;</operator><name pos:start="27:53" pos:end="27:57">width</name></name></expr></argument>,

                             <argument pos:start="29:30" pos:end="29:42"><expr pos:start="29:30" pos:end="29:42"><name pos:start="29:30" pos:end="29:42"><name pos:start="29:30" pos:end="29:34">avctx</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:42">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:11">tmp_buf</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <operator pos:start="31:15" pos:end="31:15">(</operator><name pos:start="31:16" pos:end="31:22">uint8_t</name> <operator pos:start="31:24" pos:end="31:24">*</operator><operator pos:start="31:25" pos:end="31:25">)</operator><call pos:start="31:26" pos:end="31:40"><name pos:start="31:26" pos:end="31:35">av_mallocz</name><argument_list pos:start="31:36" pos:end="31:40">(<argument pos:start="31:37" pos:end="31:39"><expr pos:start="31:37" pos:end="31:39"><name pos:start="31:37" pos:end="31:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="35:48"><expr pos:start="33:5" pos:end="35:47"><call pos:start="33:5" pos:end="35:47"><name pos:start="33:5" pos:end="33:18">avpicture_fill</name><argument_list pos:start="33:19" pos:end="35:47">(<argument pos:start="33:20" pos:end="33:36"><expr pos:start="33:20" pos:end="33:36"><operator pos:start="33:20" pos:end="33:20">(</operator><name pos:start="33:21" pos:end="33:29">AVPicture</name> <operator pos:start="33:31" pos:end="33:31">*</operator><operator pos:start="33:32" pos:end="33:32">)</operator><name pos:start="33:33" pos:end="33:36">pict</name></expr></argument>, <argument pos:start="33:39" pos:end="33:45"><expr pos:start="33:39" pos:end="33:45"><name pos:start="33:39" pos:end="33:45">tmp_buf</name></expr></argument>, <argument pos:start="33:48" pos:end="33:61"><expr pos:start="33:48" pos:end="33:61"><name pos:start="33:48" pos:end="33:61"><name pos:start="33:48" pos:end="33:52">avctx</name><operator pos:start="33:53" pos:end="33:54">-&gt;</operator><name pos:start="33:55" pos:end="33:61">pix_fmt</name></name></expr></argument>,

                   <argument pos:start="35:20" pos:end="35:31"><expr pos:start="35:20" pos:end="35:31"><name pos:start="35:20" pos:end="35:31"><name pos:start="35:20" pos:end="35:24">avctx</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:31">width</name></name></expr></argument>, <argument pos:start="35:34" pos:end="35:46"><expr pos:start="35:34" pos:end="35:46"><name pos:start="35:34" pos:end="35:46"><name pos:start="35:34" pos:end="35:38">avctx</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:46">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="181:5"><if pos:start="39:5" pos:end="113:5">if <condition pos:start="39:8" pos:end="39:41">(<expr pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:13">avctx</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:23">codec_id</name></name> <operator pos:start="39:25" pos:end="39:26">==</operator> <name pos:start="39:28" pos:end="39:40">CODEC_ID_WMV3</name></expr>)</condition>

    <block pos:start="41:5" pos:end="113:5">{<block_content pos:start="43:9" pos:end="111:47">

	<expr_stmt pos:start="43:9" pos:end="43:47"><expr pos:start="43:9" pos:end="43:46"><call pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:21">init_get_bits</name><argument_list pos:start="43:22" pos:end="43:46">(<argument pos:start="43:23" pos:end="43:28"><expr pos:start="43:23" pos:end="43:28"><operator pos:start="43:23" pos:end="43:23">&amp;</operator><name pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:24">v</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:28">gb</name></name></expr></argument>, <argument pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><name pos:start="43:31" pos:end="43:33">buf</name></expr></argument>, <argument pos:start="43:36" pos:end="43:45"><expr pos:start="43:36" pos:end="43:45"><name pos:start="43:36" pos:end="43:43">buf_size</name><operator pos:start="43:44" pos:end="43:44">*</operator><literal type="number" pos:start="43:45" pos:end="43:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="45:9" pos:end="50:0"><expr pos:start="45:9" pos:end="45:76"><call pos:start="45:9" pos:end="45:76"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:76">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">avctx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:33"><expr pos:start="45:23" pos:end="45:33"><name pos:start="45:23" pos:end="45:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="45:36" pos:end="45:63"><expr pos:start="45:36" pos:end="45:63"><literal type="string" pos:start="45:36" pos:end="45:63">"Frame: %i bits to decode\n"</literal></expr></argument>, <argument pos:start="45:66" pos:end="45:75"><expr pos:start="45:66" pos:end="45:75"><name pos:start="45:66" pos:end="45:73">buf_size</name><operator pos:start="45:74" pos:end="45:74">*</operator><literal type="number" pos:start="45:75" pos:end="45:75">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

<cpp:if pos:start="49:1" pos:end="49:24">#<cpp:directive pos:start="49:2" pos:end="49:3">if</cpp:directive> <expr pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:24">HAS_ADVANCED_PROFILE</name></expr></cpp:if>

	<if_stmt pos:start="51:9" pos:end="103:9"><if pos:start="51:9" pos:end="75:9">if <condition pos:start="51:12" pos:end="51:38">(<expr pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:13">v</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:22">profile</name></name> <operator pos:start="51:24" pos:end="51:24">&gt;</operator> <name pos:start="51:26" pos:end="51:37">PROFILE_MAIN</name></expr>)</condition>

	<block pos:start="53:9" pos:end="75:9">{<block_content pos:start="55:13" pos:end="73:53">

    	    <if_stmt pos:start="55:13" pos:end="55:83"><if pos:start="55:13" pos:end="55:83">if <condition pos:start="55:16" pos:end="55:66">(<expr pos:start="55:17" pos:end="55:65"><call pos:start="55:17" pos:end="55:49"><name pos:start="55:17" pos:end="55:46">advanced_decode_picture_header</name><argument_list pos:start="55:47" pos:end="55:49">(<argument pos:start="55:48" pos:end="55:48"><expr pos:start="55:48" pos:end="55:48"><name pos:start="55:48" pos:end="55:48">v</name></expr></argument>)</argument_list></call> <operator pos:start="55:51" pos:end="55:52">==</operator> <name pos:start="55:54" pos:end="55:65">FRAME_SKIPED</name></expr>)</condition><block type="pseudo" pos:start="55:68" pos:end="55:83"><block_content pos:start="55:68" pos:end="55:83"> <return pos:start="55:68" pos:end="55:83">return <expr pos:start="55:75" pos:end="55:82"><name pos:start="55:75" pos:end="55:82">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

    	    <switch pos:start="57:13" pos:end="71:13">switch<condition pos:start="57:19" pos:end="57:32">(<expr pos:start="57:20" pos:end="57:31"><name pos:start="57:20" pos:end="57:31"><name pos:start="57:20" pos:end="57:20">v</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:31">pict_type</name></name></expr>)</condition>

    	    <block pos:start="59:13" pos:end="71:13">{<block_content pos:start="61:17" pos:end="69:44">

    		<case pos:start="61:17" pos:end="61:28">case <expr pos:start="61:22" pos:end="61:27"><name pos:start="61:22" pos:end="61:27">I_TYPE</name></expr>:</case> <expr_stmt pos:start="61:30" pos:end="61:60"><expr pos:start="61:30" pos:end="61:59"><name pos:start="61:30" pos:end="61:32">ret</name> <operator pos:start="61:34" pos:end="61:34">=</operator> <call pos:start="61:36" pos:end="61:59"><name pos:start="61:36" pos:end="61:56">advanced_decode_i_mbs</name><argument_list pos:start="61:57" pos:end="61:59">(<argument pos:start="61:58" pos:end="61:58"><expr pos:start="61:58" pos:end="61:58"><name pos:start="61:58" pos:end="61:58">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="61:62" pos:end="61:67">break;</break>

	        <case pos:start="63:17" pos:end="63:28">case <expr pos:start="63:22" pos:end="63:27"><name pos:start="63:22" pos:end="63:27">P_TYPE</name></expr>:</case> <expr_stmt pos:start="63:30" pos:end="63:51"><expr pos:start="63:30" pos:end="63:50"><name pos:start="63:30" pos:end="63:32">ret</name> <operator pos:start="63:34" pos:end="63:34">=</operator> <call pos:start="63:36" pos:end="63:50"><name pos:start="63:36" pos:end="63:47">decode_p_mbs</name><argument_list pos:start="63:48" pos:end="63:50">(<argument pos:start="63:49" pos:end="63:49"><expr pos:start="63:49" pos:end="63:49"><name pos:start="63:49" pos:end="63:49">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="63:53" pos:end="63:58">break;</break>

    		<case pos:start="65:17" pos:end="65:28">case <expr pos:start="65:22" pos:end="65:27"><name pos:start="65:22" pos:end="65:27">B_TYPE</name></expr>:</case>

    		<case pos:start="67:17" pos:end="67:29">case <expr pos:start="67:22" pos:end="67:28"><name pos:start="67:22" pos:end="67:28">BI_TYPE</name></expr>:</case> <expr_stmt pos:start="67:31" pos:end="67:52"><expr pos:start="67:31" pos:end="67:51"><name pos:start="67:31" pos:end="67:33">ret</name> <operator pos:start="67:35" pos:end="67:35">=</operator> <call pos:start="67:37" pos:end="67:51"><name pos:start="67:37" pos:end="67:48">decode_b_mbs</name><argument_list pos:start="67:49" pos:end="67:51">(<argument pos:start="67:50" pos:end="67:50"><expr pos:start="67:50" pos:end="67:50"><name pos:start="67:50" pos:end="67:50">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="67:54" pos:end="67:59">break;</break>

    		<default pos:start="69:17" pos:end="69:24">default:</default> <expr_stmt pos:start="69:26" pos:end="69:44"><expr pos:start="69:26" pos:end="69:43"><name pos:start="69:26" pos:end="69:28">ret</name> <operator pos:start="69:30" pos:end="69:30">=</operator> <name pos:start="69:32" pos:end="69:43">FRAME_SKIPED</name></expr>;</expr_stmt>

    	    </block_content>}</block></switch>

    	    <if_stmt pos:start="73:13" pos:end="73:53"><if pos:start="73:13" pos:end="73:53">if <condition pos:start="73:16" pos:end="73:36">(<expr pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:19">ret</name> <operator pos:start="73:21" pos:end="73:22">==</operator> <name pos:start="73:24" pos:end="73:35">FRAME_SKIPED</name></expr>)</condition><block type="pseudo" pos:start="73:38" pos:end="73:53"><block_content pos:start="73:38" pos:end="73:53"> <return pos:start="73:38" pos:end="73:53">return <expr pos:start="73:45" pos:end="73:52"><name pos:start="73:45" pos:end="73:52">buf_size</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="73:55" pos:end="73:82">//We ignore for now failures</comment>

	</block_content>}</block></if>

	<else pos:start="77:9" pos:end="103:9">else

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

	<block pos:start="81:9" pos:end="103:9">{<block_content pos:start="83:13" pos:end="101:53">

    	    <if_stmt pos:start="83:13" pos:end="83:83"><if pos:start="83:13" pos:end="83:83">if <condition pos:start="83:16" pos:end="83:66">(<expr pos:start="83:17" pos:end="83:65"><call pos:start="83:17" pos:end="83:49"><name pos:start="83:17" pos:end="83:46">standard_decode_picture_header</name><argument_list pos:start="83:47" pos:end="83:49">(<argument pos:start="83:48" pos:end="83:48"><expr pos:start="83:48" pos:end="83:48"><name pos:start="83:48" pos:end="83:48">v</name></expr></argument>)</argument_list></call> <operator pos:start="83:51" pos:end="83:52">==</operator> <name pos:start="83:54" pos:end="83:65">FRAME_SKIPED</name></expr>)</condition><block type="pseudo" pos:start="83:68" pos:end="83:83"><block_content pos:start="83:68" pos:end="83:83"> <return pos:start="83:68" pos:end="83:83">return <expr pos:start="83:75" pos:end="83:82"><name pos:start="83:75" pos:end="83:82">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

    	    <switch pos:start="85:13" pos:end="99:13">switch<condition pos:start="85:19" pos:end="85:32">(<expr pos:start="85:20" pos:end="85:31"><name pos:start="85:20" pos:end="85:31"><name pos:start="85:20" pos:end="85:20">v</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:31">pict_type</name></name></expr>)</condition>

	    <block pos:start="87:13" pos:end="99:13">{<block_content pos:start="89:17" pos:end="97:44">

    		<case pos:start="89:17" pos:end="89:28">case <expr pos:start="89:22" pos:end="89:27"><name pos:start="89:22" pos:end="89:27">I_TYPE</name></expr>:</case> <expr_stmt pos:start="89:30" pos:end="89:60"><expr pos:start="89:30" pos:end="89:59"><name pos:start="89:30" pos:end="89:32">ret</name> <operator pos:start="89:34" pos:end="89:34">=</operator> <call pos:start="89:36" pos:end="89:59"><name pos:start="89:36" pos:end="89:56">standard_decode_i_mbs</name><argument_list pos:start="89:57" pos:end="89:59">(<argument pos:start="89:58" pos:end="89:58"><expr pos:start="89:58" pos:end="89:58"><name pos:start="89:58" pos:end="89:58">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="89:62" pos:end="89:67">break;</break>

    		<case pos:start="91:17" pos:end="91:28">case <expr pos:start="91:22" pos:end="91:27"><name pos:start="91:22" pos:end="91:27">P_TYPE</name></expr>:</case> <expr_stmt pos:start="91:30" pos:end="91:51"><expr pos:start="91:30" pos:end="91:50"><name pos:start="91:30" pos:end="91:32">ret</name> <operator pos:start="91:34" pos:end="91:34">=</operator> <call pos:start="91:36" pos:end="91:50"><name pos:start="91:36" pos:end="91:47">decode_p_mbs</name><argument_list pos:start="91:48" pos:end="91:50">(<argument pos:start="91:49" pos:end="91:49"><expr pos:start="91:49" pos:end="91:49"><name pos:start="91:49" pos:end="91:49">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="91:53" pos:end="91:58">break;</break>

    		<case pos:start="93:17" pos:end="93:28">case <expr pos:start="93:22" pos:end="93:27"><name pos:start="93:22" pos:end="93:27">B_TYPE</name></expr>:</case>

    		<case pos:start="95:17" pos:end="95:29">case <expr pos:start="95:22" pos:end="95:28"><name pos:start="95:22" pos:end="95:28">BI_TYPE</name></expr>:</case> <expr_stmt pos:start="95:31" pos:end="95:52"><expr pos:start="95:31" pos:end="95:51"><name pos:start="95:31" pos:end="95:33">ret</name> <operator pos:start="95:35" pos:end="95:35">=</operator> <call pos:start="95:37" pos:end="95:51"><name pos:start="95:37" pos:end="95:48">decode_b_mbs</name><argument_list pos:start="95:49" pos:end="95:51">(<argument pos:start="95:50" pos:end="95:50"><expr pos:start="95:50" pos:end="95:50"><name pos:start="95:50" pos:end="95:50">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="95:54" pos:end="95:59">break;</break>

    		<default pos:start="97:17" pos:end="97:24">default:</default> <expr_stmt pos:start="97:26" pos:end="97:44"><expr pos:start="97:26" pos:end="97:43"><name pos:start="97:26" pos:end="97:28">ret</name> <operator pos:start="97:30" pos:end="97:30">=</operator> <name pos:start="97:32" pos:end="97:43">FRAME_SKIPED</name></expr>;</expr_stmt>

    	    </block_content>}</block></switch>

    	    <if_stmt pos:start="101:13" pos:end="101:53"><if pos:start="101:13" pos:end="101:53">if <condition pos:start="101:16" pos:end="101:36">(<expr pos:start="101:17" pos:end="101:35"><name pos:start="101:17" pos:end="101:19">ret</name> <operator pos:start="101:21" pos:end="101:22">==</operator> <name pos:start="101:24" pos:end="101:35">FRAME_SKIPED</name></expr>)</condition><block type="pseudo" pos:start="101:38" pos:end="101:53"><block_content pos:start="101:38" pos:end="101:53"> <return pos:start="101:38" pos:end="101:53">return <expr pos:start="101:45" pos:end="101:52"><name pos:start="101:45" pos:end="101:52">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

	</block_content>}</block></else></if_stmt>



	<comment type="block" pos:start="107:9" pos:end="107:45">/* Size of the output data = image */</comment>

	<expr_stmt pos:start="109:9" pos:end="111:47"><expr pos:start="109:9" pos:end="111:46"><call pos:start="109:9" pos:end="111:46"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="111:46">(<argument pos:start="109:16" pos:end="109:20"><expr pos:start="109:16" pos:end="109:20"><name pos:start="109:16" pos:end="109:20">avctx</name></expr></argument>, <argument pos:start="109:23" pos:end="109:34"><expr pos:start="109:23" pos:end="109:34"><name pos:start="109:23" pos:end="109:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="109:37" pos:end="109:59"><expr pos:start="109:37" pos:end="109:59"><literal type="string" pos:start="109:37" pos:end="109:59">"Consumed %i/%i bits\n"</literal></expr></argument>,

           <argument pos:start="111:12" pos:end="111:33"><expr pos:start="111:12" pos:end="111:33"><call pos:start="111:12" pos:end="111:33"><name pos:start="111:12" pos:end="111:25">get_bits_count</name><argument_list pos:start="111:26" pos:end="111:33">(<argument pos:start="111:27" pos:end="111:32"><expr pos:start="111:27" pos:end="111:32"><operator pos:start="111:27" pos:end="111:27">&amp;</operator><name pos:start="111:28" pos:end="111:32"><name pos:start="111:28" pos:end="111:28">v</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:32">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:36" pos:end="111:45"><expr pos:start="111:36" pos:end="111:45"><name pos:start="111:36" pos:end="111:43">buf_size</name><operator pos:start="111:44" pos:end="111:44">*</operator><literal type="number" pos:start="111:45" pos:end="111:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="115:5" pos:end="181:5">else

    <block pos:start="117:5" pos:end="181:5">{<block_content pos:start="177:9" pos:end="180:0">

<cpp:if pos:start="119:1" pos:end="119:5">#<cpp:directive pos:start="119:2" pos:end="119:3">if</cpp:directive> <expr pos:start="119:5" pos:end="119:5"><literal type="number" pos:start="119:5" pos:end="119:5">0</literal></expr></cpp:if>

	<comment type="line" pos:start="121:9" pos:end="121:27">// search for IDU's</comment>

	<comment type="line" pos:start="123:9" pos:end="123:16">// FIXME</comment>

	uint32_t scp = 0;

	int scs = 0, i = 0;



	while (i &lt; buf_size)

	{

	    for (; i &lt; buf_size &amp;&amp; scp != 0x000001; i++)

		scp = ((scp&lt;&lt;8)|buf[i])&amp;0xffffff;



	    if (scp != 0x000001)

		break; <comment type="line" pos:start="143:24" pos:end="143:31">// eof ?</comment>

	

	    scs = buf[i++];	



	    init_get_bits(&amp;v-&gt;gb, buf+i, (buf_size-i)*8);

	

	    switch(scs)

	    {

		case 0xf:

		    decode_sequence_header(avctx, &amp;v-&gt;gb);

		    break;

		<comment type="line" pos:start="165:17" pos:end="165:33">// to be finished</comment>

	    }

	    

	    i += get_bits_count(&amp;v-&gt;gb)*8;

	}

<cpp:else pos:start="175:1" pos:end="175:5">#<cpp:directive pos:start="175:2" pos:end="175:5">else</cpp:directive></cpp:else>

	<expr_stmt pos:start="177:9" pos:end="180:0"><expr pos:start="177:9" pos:end="177:18"><call pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:16">av_abort</name><argument_list pos:start="177:17" pos:end="177:18">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="179:1" pos:end="179:6">#<cpp:directive pos:start="179:2" pos:end="179:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:21"><expr pos:start="185:5" pos:end="185:20"><operator pos:start="185:5" pos:end="185:5">*</operator><name pos:start="185:6" pos:end="185:14">data_size</name> <operator pos:start="185:16" pos:end="185:16">=</operator> <name pos:start="185:18" pos:end="185:20">len</name></expr>;</expr_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:38">/* Fake consumption of all data */</comment>

    <return pos:start="191:5" pos:end="191:20">return <expr pos:start="191:12" pos:end="191:19"><name pos:start="191:12" pos:end="191:19">buf_size</name></expr>;</return> <comment type="line" pos:start="191:22" pos:end="191:47">//Number of bytes consumed</comment>

</block_content>}</block></function>
</unit>
