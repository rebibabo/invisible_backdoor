<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/470.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:14"><name pos:start="1:1" pos:end="1:8">if_start</name><argument_list pos:start="1:9" pos:end="1:14">(<argument pos:start="1:10" pos:end="1:13">void</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:9" pos:end="109:22">

	<decl_stmt pos:start="5:9" pos:end="5:32"><decl pos:start="5:9" pos:end="5:24"><type pos:start="5:9" pos:end="5:21"><name pos:start="5:9" pos:end="5:19"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:19">mbuf</name></name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">ifm</name></decl>, <decl pos:start="5:27" pos:end="5:31"><type ref="prev" pos:start="5:9" pos:end="5:21"><modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:31">ifqt</name></decl>;</decl_stmt>



	<expr_stmt pos:start="9:9" pos:end="9:31"><expr pos:start="9:9" pos:end="9:30"><call pos:start="9:9" pos:end="9:30"><name pos:start="9:9" pos:end="9:18">DEBUG_CALL</name><argument_list pos:start="9:19" pos:end="9:30">(<argument pos:start="9:20" pos:end="9:29"><expr pos:start="9:20" pos:end="9:29"><literal type="string" pos:start="9:20" pos:end="9:29">"if_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="13:9" pos:end="15:18"><if pos:start="13:9" pos:end="15:18">if <condition pos:start="13:12" pos:end="13:27">(<expr pos:start="13:13" pos:end="13:26"><name pos:start="13:13" pos:end="13:21">if_queued</name> <operator pos:start="13:23" pos:end="13:24">==</operator> <literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr>)</condition><block type="pseudo" pos:start="15:12" pos:end="15:18"><block_content pos:start="15:12" pos:end="15:18">

	   <return pos:start="15:12" pos:end="15:18">return;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="15:20" pos:end="15:38">/* Nothing to do */</comment>



 <label pos:start="19:2" pos:end="19:7"><name pos:start="19:2" pos:end="19:6">again</name>:</label>

        <comment type="block" pos:start="21:9" pos:end="21:43">/* check if we can really output */</comment>

        <if_stmt pos:start="23:9" pos:end="25:19"><if pos:start="23:9" pos:end="25:19">if <condition pos:start="23:12" pos:end="23:32">(<expr pos:start="23:13" pos:end="23:31"><operator pos:start="23:13" pos:end="23:13">!</operator><call pos:start="23:14" pos:end="23:31"><name pos:start="23:14" pos:end="23:29">slirp_can_output</name><argument_list pos:start="23:30" pos:end="23:31">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:19"><block_content pos:start="25:13" pos:end="25:19">

            <return pos:start="25:13" pos:end="25:19">return;</return></block_content></block></if></if_stmt>



	<comment type="block" pos:start="29:9" pos:end="35:11">/*

	 * See which queue to get next packet from

	 * If there's something in the fastq, select it immediately

	 */</comment>

	<if_stmt pos:start="37:9" pos:end="59:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:43">(<expr pos:start="37:13" pos:end="37:42"><name pos:start="37:13" pos:end="37:29"><name pos:start="37:13" pos:end="37:20">if_fastq</name><operator pos:start="37:21" pos:end="37:21">.</operator><name pos:start="37:22" pos:end="37:29">ifq_next</name></name> <operator pos:start="37:31" pos:end="37:32">!=</operator> <operator pos:start="37:34" pos:end="37:34">&amp;</operator><name pos:start="37:35" pos:end="37:42">if_fastq</name></expr>)</condition> <block pos:start="37:45" pos:end="41:9">{<block_content pos:start="39:17" pos:end="39:40">

		<expr_stmt pos:start="39:17" pos:end="39:40"><expr pos:start="39:17" pos:end="39:39"><name pos:start="39:17" pos:end="39:19">ifm</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:39"><name pos:start="39:23" pos:end="39:30">if_fastq</name><operator pos:start="39:31" pos:end="39:31">.</operator><name pos:start="39:32" pos:end="39:39">ifq_next</name></name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="41:11" pos:end="59:9">else <block pos:start="41:16" pos:end="59:9">{<block_content pos:start="45:17" pos:end="57:39">

		<comment type="block" pos:start="43:17" pos:end="43:62">/* Nothing on fastq, see if next_m is valid */</comment>

		<if_stmt pos:start="45:17" pos:end="51:44"><if pos:start="45:17" pos:end="47:32">if <condition pos:start="45:20" pos:end="45:41">(<expr pos:start="45:21" pos:end="45:40"><name pos:start="45:21" pos:end="45:26">next_m</name> <operator pos:start="45:28" pos:end="45:29">!=</operator> <operator pos:start="45:31" pos:end="45:31">&amp;</operator><name pos:start="45:32" pos:end="45:40">if_batchq</name></expr>)</condition><block type="pseudo" pos:start="47:20" pos:end="47:32"><block_content pos:start="47:20" pos:end="47:32">

		   <expr_stmt pos:start="47:20" pos:end="47:32"><expr pos:start="47:20" pos:end="47:31"><name pos:start="47:20" pos:end="47:22">ifm</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:31">next_m</name></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="49:17" pos:end="51:44">else<block type="pseudo" pos:start="51:20" pos:end="51:44"><block_content pos:start="51:20" pos:end="51:44">

		   <expr_stmt pos:start="51:20" pos:end="51:44"><expr pos:start="51:20" pos:end="51:43"><name pos:start="51:20" pos:end="51:22">ifm</name> <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:43"><name pos:start="51:26" pos:end="51:34">if_batchq</name><operator pos:start="51:35" pos:end="51:35">.</operator><name pos:start="51:36" pos:end="51:43">ifq_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



		<comment type="block" pos:start="55:17" pos:end="55:64">/* Set which packet to send on next iteration */</comment>

		<expr_stmt pos:start="57:17" pos:end="57:39"><expr pos:start="57:17" pos:end="57:38"><name pos:start="57:17" pos:end="57:22">next_m</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:38"><name pos:start="57:26" pos:end="57:28">ifm</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:38">ifq_next</name></name></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<comment type="block" pos:start="61:9" pos:end="61:38">/* Remove it from the queue */</comment>

	<expr_stmt pos:start="63:9" pos:end="63:29"><expr pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:12">ifqt</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <name pos:start="63:16" pos:end="63:28"><name pos:start="63:16" pos:end="63:18">ifm</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:28">ifq_prev</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="65:9" pos:end="65:20"><expr pos:start="65:9" pos:end="65:19"><call pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:14">remque</name><argument_list pos:start="65:15" pos:end="65:19">(<argument pos:start="65:16" pos:end="65:18"><expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ifm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="67:9" pos:end="67:20"><expr pos:start="67:9" pos:end="67:19"><operator pos:start="67:9" pos:end="67:10">--</operator><name pos:start="67:11" pos:end="67:19">if_queued</name></expr>;</expr_stmt>



	<comment type="block" pos:start="71:9" pos:end="71:71">/* If there are more packets for this session, re-queue them */</comment>

	<if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:56">(<expr pos:start="73:13" pos:end="73:55"><name pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:15">ifm</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:25">ifs_next</name></name> <operator pos:start="73:27" pos:end="73:28">!=</operator> <comment type="block" pos:start="73:30" pos:end="73:51">/* ifm-&gt;ifs_prev != */</comment> <name pos:start="73:53" pos:end="73:55">ifm</name></expr>)</condition> <block pos:start="73:58" pos:end="79:9">{<block_content pos:start="75:17" pos:end="77:32">

		<expr_stmt pos:start="75:17" pos:end="75:44"><expr pos:start="75:17" pos:end="75:43"><call pos:start="75:17" pos:end="75:43"><name pos:start="75:17" pos:end="75:22">insque</name><argument_list pos:start="75:23" pos:end="75:43">(<argument pos:start="75:24" pos:end="75:36"><expr pos:start="75:24" pos:end="75:36"><name pos:start="75:24" pos:end="75:36"><name pos:start="75:24" pos:end="75:26">ifm</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:36">ifs_next</name></name></expr></argument>, <argument pos:start="75:39" pos:end="75:42"><expr pos:start="75:39" pos:end="75:42"><name pos:start="75:39" pos:end="75:42">ifqt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="77:17" pos:end="77:32"><expr pos:start="77:17" pos:end="77:31"><call pos:start="77:17" pos:end="77:31"><name pos:start="77:17" pos:end="77:26">ifs_remque</name><argument_list pos:start="77:27" pos:end="77:31">(<argument pos:start="77:28" pos:end="77:30"><expr pos:start="77:28" pos:end="77:30"><name pos:start="77:28" pos:end="77:30">ifm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="83:9" pos:end="83:30">/* Update so_queued */</comment>

	<if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:24">(<expr pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:15">ifm</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:23">ifq_so</name></name></expr>)</condition> <block pos:start="85:26" pos:end="93:9">{<block_content pos:start="87:17" pos:end="91:47">

		<if_stmt pos:start="87:17" pos:end="91:47"><if pos:start="87:17" pos:end="91:47">if <condition pos:start="87:20" pos:end="87:50">(<expr pos:start="87:21" pos:end="87:49"><operator pos:start="87:21" pos:end="87:22">--</operator><name pos:start="87:23" pos:end="87:44"><name pos:start="87:23" pos:end="87:25">ifm</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:33">ifq_so</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:44">so_queued</name></name> <operator pos:start="87:46" pos:end="87:47">==</operator> <literal type="number" pos:start="87:49" pos:end="87:49">0</literal></expr>)</condition><block type="pseudo" pos:start="91:20" pos:end="91:47"><block_content pos:start="91:20" pos:end="91:47">

		   <comment type="block" pos:start="89:20" pos:end="89:65">/* If there's no more queued, reset nqueued */</comment>

		   <expr_stmt pos:start="91:20" pos:end="91:47"><expr pos:start="91:20" pos:end="91:46"><name pos:start="91:20" pos:end="91:42"><name pos:start="91:20" pos:end="91:22">ifm</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:30">ifq_so</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:42">so_nqueued</name></name> <operator pos:start="91:44" pos:end="91:44">=</operator> <literal type="number" pos:start="91:46" pos:end="91:46">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="97:9" pos:end="97:48">/* Encapsulate the packet for sending */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:42"><expr pos:start="99:9" pos:end="99:41"><call pos:start="99:9" pos:end="99:41"><name pos:start="99:9" pos:end="99:16">if_encap</name><argument_list pos:start="99:17" pos:end="99:41">(<argument pos:start="99:18" pos:end="99:28"><expr pos:start="99:18" pos:end="99:28"><name pos:start="99:18" pos:end="99:28"><name pos:start="99:18" pos:end="99:20">ifm</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:28">m_data</name></name></expr></argument>, <argument pos:start="99:31" pos:end="99:40"><expr pos:start="99:31" pos:end="99:40"><name pos:start="99:31" pos:end="99:40"><name pos:start="99:31" pos:end="99:33">ifm</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:40">m_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:20"><expr pos:start="103:9" pos:end="103:19"><call pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:14">m_free</name><argument_list pos:start="103:15" pos:end="103:19">(<argument pos:start="103:16" pos:end="103:18"><expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ifm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="107:9" pos:end="109:22"><if pos:start="107:9" pos:end="109:22">if <condition pos:start="107:12" pos:end="107:22">(<expr pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:21">if_queued</name></expr>)</condition><block type="pseudo" pos:start="109:12" pos:end="109:22"><block_content pos:start="109:12" pos:end="109:22">

	   <goto pos:start="109:12" pos:end="109:22">goto <name pos:start="109:17" pos:end="109:21">again</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block>
</unit>
