<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25122.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:16">BlockDriverAIOCB</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:34">win32_aio_submit</name><parameter_list pos:start="1:35" pos:end="7:62">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:30"><decl pos:start="3:9" pos:end="3:30"><type pos:start="3:9" pos:end="3:30"><name pos:start="3:9" pos:end="3:25">QEMUWin32AIOState</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:30">aio</name></decl></parameter>, <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:38">HANDLE</name></type> <name pos:start="3:40" pos:end="3:44">hfile</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:26"><decl pos:start="5:9" pos:end="5:26"><type pos:start="5:9" pos:end="5:26"><name pos:start="5:9" pos:end="5:15">int64_t</name></type> <name pos:start="5:17" pos:end="5:26">sector_num</name></decl></parameter>, <parameter pos:start="5:29" pos:end="5:46"><decl pos:start="5:29" pos:end="5:46"><type pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:40">QEMUIOVector</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:46">qiov</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:62"><decl pos:start="5:49" pos:end="5:62"><type pos:start="5:49" pos:end="5:62"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:62">nb_sectors</name></decl></parameter>,

        <parameter pos:start="7:9" pos:end="7:37"><decl pos:start="7:9" pos:end="7:37"><type pos:start="7:9" pos:end="7:37"><name pos:start="7:9" pos:end="7:33">BlockDriverCompletionFunc</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:37">cb</name></decl></parameter>, <parameter pos:start="7:40" pos:end="7:51"><decl pos:start="7:40" pos:end="7:51"><type pos:start="7:40" pos:end="7:51"><name pos:start="7:40" pos:end="7:43">void</name> <modifier pos:start="7:45" pos:end="7:45">*</modifier></type><name pos:start="7:46" pos:end="7:51">opaque</name></decl></parameter>, <parameter pos:start="7:54" pos:end="7:61"><decl pos:start="7:54" pos:end="7:61"><type pos:start="7:54" pos:end="7:61"><name pos:start="7:54" pos:end="7:56">int</name></type> <name pos:start="7:58" pos:end="7:61">type</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="93:1">{<block_content pos:start="11:5" pos:end="91:16">

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:25">QEMUWin32AIOCB</name></name> <modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:33">waiocb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:19">offset</name> <init pos:start="13:21" pos:end="13:38">= <expr pos:start="13:23" pos:end="13:38"><name pos:start="13:23" pos:end="13:32">sector_num</name> <operator pos:start="13:34" pos:end="13:34">*</operator> <literal type="number" pos:start="13:36" pos:end="13:38">512</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">DWORD</name></type> <name pos:start="15:11" pos:end="15:12">rc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:61"><expr pos:start="19:5" pos:end="19:60"><name pos:start="19:5" pos:end="19:10">waiocb</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:60"><name pos:start="19:14" pos:end="19:25">qemu_aio_get</name><argument_list pos:start="19:26" pos:end="19:60">(<argument pos:start="19:27" pos:end="19:43"><expr pos:start="19:27" pos:end="19:43"><operator pos:start="19:27" pos:end="19:27">&amp;</operator><name pos:start="19:28" pos:end="19:43">win32_aiocb_info</name></expr></argument>, <argument pos:start="19:46" pos:end="19:47"><expr pos:start="19:46" pos:end="19:47"><name pos:start="19:46" pos:end="19:47">bs</name></expr></argument>, <argument pos:start="19:50" pos:end="19:51"><expr pos:start="19:50" pos:end="19:51"><name pos:start="19:50" pos:end="19:51">cb</name></expr></argument>, <argument pos:start="19:54" pos:end="19:59"><expr pos:start="19:54" pos:end="19:59"><name pos:start="19:54" pos:end="19:59">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:38"><expr pos:start="21:5" pos:end="21:37"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:10">waiocb</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:18">nbytes</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <name pos:start="21:22" pos:end="21:31">nb_sectors</name> <operator pos:start="21:33" pos:end="21:33">*</operator> <literal type="number" pos:start="21:35" pos:end="21:37">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:24"><expr pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:10">waiocb</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:16">qiov</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:23">qiov</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:46"><expr pos:start="25:5" pos:end="25:45"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:10">waiocb</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:19">is_read</name></name> <operator pos:start="25:21" pos:end="25:21">=</operator> <operator pos:start="25:23" pos:end="25:23">(</operator><name pos:start="25:24" pos:end="25:27">type</name> <operator pos:start="25:29" pos:end="25:30">==</operator> <name pos:start="25:32" pos:end="25:44">QEMU_AIO_READ</name><operator pos:start="25:45" pos:end="25:45">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="47:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:23">(<expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:12">qiov</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:18">niov</name></name> <operator pos:start="29:20" pos:end="29:20">&gt;</operator> <literal type="number" pos:start="29:22" pos:end="29:22">1</literal></expr>)</condition> <block pos:start="29:25" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:34">

        <expr_stmt pos:start="31:9" pos:end="31:54"><expr pos:start="31:9" pos:end="31:53"><name pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:14">waiocb</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:19">buf</name></name> <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:53"><name pos:start="31:23" pos:end="31:37">qemu_blockalign</name><argument_list pos:start="31:38" pos:end="31:53">(<argument pos:start="31:39" pos:end="31:40"><expr pos:start="31:39" pos:end="31:40"><name pos:start="31:39" pos:end="31:40">bs</name></expr></argument>, <argument pos:start="31:43" pos:end="31:52"><expr pos:start="31:43" pos:end="31:52"><name pos:start="31:43" pos:end="31:52"><name pos:start="31:43" pos:end="31:46">qiov</name><operator pos:start="31:47" pos:end="31:48">-&gt;</operator><name pos:start="31:49" pos:end="31:52">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:34">(<expr pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:16">type</name> <operator pos:start="33:18" pos:end="33:18">&amp;</operator> <name pos:start="33:20" pos:end="33:33">QEMU_AIO_WRITE</name></expr>)</condition> <block pos:start="33:36" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:74">

            <expr_stmt pos:start="35:13" pos:end="35:74"><expr pos:start="35:13" pos:end="35:73"><call pos:start="35:13" pos:end="35:73"><name pos:start="35:13" pos:end="35:22">iov_to_buf</name><argument_list pos:start="35:23" pos:end="35:73">(<argument pos:start="35:24" pos:end="35:32"><expr pos:start="35:24" pos:end="35:32"><name pos:start="35:24" pos:end="35:32"><name pos:start="35:24" pos:end="35:27">qiov</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:32">iov</name></name></expr></argument>, <argument pos:start="35:35" pos:end="35:44"><expr pos:start="35:35" pos:end="35:44"><name pos:start="35:35" pos:end="35:44"><name pos:start="35:35" pos:end="35:38">qiov</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:44">niov</name></name></expr></argument>, <argument pos:start="35:47" pos:end="35:47"><expr pos:start="35:47" pos:end="35:47"><literal type="number" pos:start="35:47" pos:end="35:47">0</literal></expr></argument>, <argument pos:start="35:50" pos:end="35:60"><expr pos:start="35:50" pos:end="35:60"><name pos:start="35:50" pos:end="35:60"><name pos:start="35:50" pos:end="35:55">waiocb</name><operator pos:start="35:56" pos:end="35:57">-&gt;</operator><name pos:start="35:58" pos:end="35:60">buf</name></name></expr></argument>, <argument pos:start="35:63" pos:end="35:72"><expr pos:start="35:63" pos:end="35:72"><name pos:start="35:63" pos:end="35:72"><name pos:start="35:63" pos:end="35:66">qiov</name><operator pos:start="35:67" pos:end="35:68">-&gt;</operator><name pos:start="35:69" pos:end="35:72">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:14">waiocb</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:25">is_linear</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:33">false</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="47:5">else <block pos:start="41:12" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:33">

        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:14">waiocb</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:19">buf</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <name pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:26">qiov</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:31">iov</name><index pos:start="43:32" pos:end="43:34">[<expr pos:start="43:33" pos:end="43:33"><literal type="number" pos:start="43:33" pos:end="43:33">0</literal></expr>]</index></name><operator pos:start="43:35" pos:end="43:35">.</operator><name pos:start="43:36" pos:end="43:43">iov_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:33"><expr pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:14">waiocb</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:25">is_linear</name></name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:32">true</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:47"><expr pos:start="51:5" pos:end="51:46"><call pos:start="51:5" pos:end="51:46"><name pos:start="51:5" pos:end="51:10">memset</name><argument_list pos:start="51:11" pos:end="51:46">(<argument pos:start="51:12" pos:end="51:22"><expr pos:start="51:12" pos:end="51:22"><operator pos:start="51:12" pos:end="51:12">&amp;</operator><name pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:18">waiocb</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:22">ov</name></name></expr></argument>, <argument pos:start="51:25" pos:end="51:25"><expr pos:start="51:25" pos:end="51:25"><literal type="number" pos:start="51:25" pos:end="51:25">0</literal></expr></argument>, <argument pos:start="51:28" pos:end="51:45"><expr pos:start="51:28" pos:end="51:45"><sizeof pos:start="51:28" pos:end="51:45">sizeof<argument_list pos:start="51:34" pos:end="51:45">(<argument pos:start="51:35" pos:end="51:44"><expr pos:start="51:35" pos:end="51:44"><name pos:start="51:35" pos:end="51:44"><name pos:start="51:35" pos:end="51:40">waiocb</name><operator pos:start="51:41" pos:end="51:42">-&gt;</operator><name pos:start="51:43" pos:end="51:44">ov</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:38"><expr pos:start="53:5" pos:end="53:37"><name pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:10">waiocb</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:14">ov</name><operator pos:start="53:15" pos:end="53:15">.</operator><name pos:start="53:16" pos:end="53:21">Offset</name></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <operator pos:start="53:25" pos:end="53:25">(</operator><name pos:start="53:26" pos:end="53:30">DWORD</name><operator pos:start="53:31" pos:end="53:31">)</operator><name pos:start="53:32" pos:end="53:37">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:50"><expr pos:start="55:5" pos:end="55:49"><name pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:10">waiocb</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:14">ov</name><operator pos:start="55:15" pos:end="55:15">.</operator><name pos:start="55:16" pos:end="55:25">OffsetHigh</name></name> <operator pos:start="55:27" pos:end="55:27">=</operator> <operator pos:start="55:29" pos:end="55:29">(</operator><name pos:start="55:30" pos:end="55:34">DWORD</name><operator pos:start="55:35" pos:end="55:35">)</operator><operator pos:start="55:36" pos:end="55:36">(</operator><name pos:start="55:37" pos:end="55:42">offset</name> <operator pos:start="55:44" pos:end="55:45">&gt;&gt;</operator> <literal type="number" pos:start="55:47" pos:end="55:48">32</literal><operator pos:start="55:49" pos:end="55:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:59"><expr pos:start="57:5" pos:end="57:58"><name pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:10">waiocb</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:14">ov</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:21">hEvent</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <call pos:start="57:25" pos:end="57:58"><name pos:start="57:25" pos:end="57:49">event_notifier_get_handle</name><argument_list pos:start="57:50" pos:end="57:58">(<argument pos:start="57:51" pos:end="57:57"><expr pos:start="57:51" pos:end="57:57"><operator pos:start="57:51" pos:end="57:51">&amp;</operator><name pos:start="57:52" pos:end="57:57"><name pos:start="57:52" pos:end="57:54">aio</name><operator pos:start="57:55" pos:end="57:56">-&gt;</operator><name pos:start="57:57" pos:end="57:57">e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:17"><expr pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:7">aio</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:14">count</name></name><operator pos:start="61:15" pos:end="61:16">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:29">(<expr pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:12">type</name> <operator pos:start="65:14" pos:end="65:14">&amp;</operator> <name pos:start="65:16" pos:end="65:28">QEMU_AIO_READ</name></expr>)</condition> <block pos:start="65:31" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:77">

        <expr_stmt pos:start="67:9" pos:end="67:77"><expr pos:start="67:9" pos:end="67:76"><name pos:start="67:9" pos:end="67:10">rc</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:76"><name pos:start="67:14" pos:end="67:21">ReadFile</name><argument_list pos:start="67:22" pos:end="67:76">(<argument pos:start="67:23" pos:end="67:27"><expr pos:start="67:23" pos:end="67:27"><name pos:start="67:23" pos:end="67:27">hfile</name></expr></argument>, <argument pos:start="67:30" pos:end="67:40"><expr pos:start="67:30" pos:end="67:40"><name pos:start="67:30" pos:end="67:40"><name pos:start="67:30" pos:end="67:35">waiocb</name><operator pos:start="67:36" pos:end="67:37">-&gt;</operator><name pos:start="67:38" pos:end="67:40">buf</name></name></expr></argument>, <argument pos:start="67:43" pos:end="67:56"><expr pos:start="67:43" pos:end="67:56"><name pos:start="67:43" pos:end="67:56"><name pos:start="67:43" pos:end="67:48">waiocb</name><operator pos:start="67:49" pos:end="67:50">-&gt;</operator><name pos:start="67:51" pos:end="67:56">nbytes</name></name></expr></argument>, <argument pos:start="67:59" pos:end="67:62"><expr pos:start="67:59" pos:end="67:62"><name pos:start="67:59" pos:end="67:62">NULL</name></expr></argument>, <argument pos:start="67:65" pos:end="67:75"><expr pos:start="67:65" pos:end="67:75"><operator pos:start="67:65" pos:end="67:65">&amp;</operator><name pos:start="67:66" pos:end="67:75"><name pos:start="67:66" pos:end="67:71">waiocb</name><operator pos:start="67:72" pos:end="67:73">-&gt;</operator><name pos:start="67:74" pos:end="67:75">ov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:78">

        <expr_stmt pos:start="71:9" pos:end="71:78"><expr pos:start="71:9" pos:end="71:77"><name pos:start="71:9" pos:end="71:10">rc</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <call pos:start="71:14" pos:end="71:77"><name pos:start="71:14" pos:end="71:22">WriteFile</name><argument_list pos:start="71:23" pos:end="71:77">(<argument pos:start="71:24" pos:end="71:28"><expr pos:start="71:24" pos:end="71:28"><name pos:start="71:24" pos:end="71:28">hfile</name></expr></argument>, <argument pos:start="71:31" pos:end="71:41"><expr pos:start="71:31" pos:end="71:41"><name pos:start="71:31" pos:end="71:41"><name pos:start="71:31" pos:end="71:36">waiocb</name><operator pos:start="71:37" pos:end="71:38">-&gt;</operator><name pos:start="71:39" pos:end="71:41">buf</name></name></expr></argument>, <argument pos:start="71:44" pos:end="71:57"><expr pos:start="71:44" pos:end="71:57"><name pos:start="71:44" pos:end="71:57"><name pos:start="71:44" pos:end="71:49">waiocb</name><operator pos:start="71:50" pos:end="71:51">-&gt;</operator><name pos:start="71:52" pos:end="71:57">nbytes</name></name></expr></argument>, <argument pos:start="71:60" pos:end="71:63"><expr pos:start="71:60" pos:end="71:63"><name pos:start="71:60" pos:end="71:63">NULL</name></expr></argument>, <argument pos:start="71:66" pos:end="71:76"><expr pos:start="71:66" pos:end="71:76"><operator pos:start="71:66" pos:end="71:66">&amp;</operator><name pos:start="71:67" pos:end="71:76"><name pos:start="71:67" pos:end="71:72">waiocb</name><operator pos:start="71:73" pos:end="71:74">-&gt;</operator><name pos:start="71:75" pos:end="71:76">ov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if<condition pos:start="75:7" pos:end="75:53">(<expr pos:start="75:8" pos:end="75:52"><name pos:start="75:8" pos:end="75:9">rc</name> <operator pos:start="75:11" pos:end="75:12">==</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal> <operator pos:start="75:16" pos:end="75:17">&amp;&amp;</operator> <call pos:start="75:19" pos:end="75:32"><name pos:start="75:19" pos:end="75:30">GetLastError</name><argument_list pos:start="75:31" pos:end="75:32">()</argument_list></call> <operator pos:start="75:34" pos:end="75:35">!=</operator> <name pos:start="75:37" pos:end="75:52">ERROR_IO_PENDING</name></expr>)</condition> <block pos:start="75:55" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:27">

        <goto pos:start="77:9" pos:end="77:27">goto <name pos:start="77:14" pos:end="77:26">out_dec_count</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <return pos:start="81:5" pos:end="81:27">return <expr pos:start="81:12" pos:end="81:26"><operator pos:start="81:12" pos:end="81:12">&amp;</operator><name pos:start="81:13" pos:end="81:26"><name pos:start="81:13" pos:end="81:18">waiocb</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:26">common</name></name></expr>;</return>



<label pos:start="85:1" pos:end="85:14"><name pos:start="85:1" pos:end="85:13">out_dec_count</name>:</label>

    <expr_stmt pos:start="87:5" pos:end="87:17"><expr pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:14"><name pos:start="87:5" pos:end="87:7">aio</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:14">count</name></name><operator pos:start="87:15" pos:end="87:16">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:29"><expr pos:start="89:5" pos:end="89:28"><call pos:start="89:5" pos:end="89:28"><name pos:start="89:5" pos:end="89:20">qemu_aio_release</name><argument_list pos:start="89:21" pos:end="89:28">(<argument pos:start="89:22" pos:end="89:27"><expr pos:start="89:22" pos:end="89:27"><name pos:start="89:22" pos:end="89:27">waiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="91:5" pos:end="91:16">return <expr pos:start="91:12" pos:end="91:15"><name pos:start="91:12" pos:end="91:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
