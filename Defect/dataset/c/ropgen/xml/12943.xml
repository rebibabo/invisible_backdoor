<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12943.c" pos:tabs="8"><function pos:start="1:1" pos:end="453:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">ff_rtsp_connect</name><parameter_list pos:start="1:20" pos:end="1:39">(<parameter pos:start="1:21" pos:end="1:38"><decl pos:start="1:21" pos:end="1:38"><type pos:start="1:21" pos:end="1:37"><name pos:start="1:21" pos:end="1:35">AVFormatContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="453:1">{<block_content pos:start="5:5" pos:end="451:15">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">RTSPState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">rt</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">s</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:69"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:19"><name pos:start="7:10" pos:end="7:13">host</name><index pos:start="7:14" pos:end="7:19">[<expr pos:start="7:15" pos:end="7:18"><literal type="number" pos:start="7:15" pos:end="7:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="7:22" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:22" pos:end="7:31"><name pos:start="7:22" pos:end="7:25">path</name><index pos:start="7:26" pos:end="7:31">[<expr pos:start="7:27" pos:end="7:30"><literal type="number" pos:start="7:27" pos:end="7:30">1024</literal></expr>]</index></name></decl>, <decl pos:start="7:34" pos:end="7:46"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:40">tcpname</name><index pos:start="7:41" pos:end="7:46">[<expr pos:start="7:42" pos:end="7:45"><literal type="number" pos:start="7:42" pos:end="7:45">1024</literal></expr>]</index></name></decl>, <decl pos:start="7:49" pos:end="7:57"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:49" pos:end="7:57"><name pos:start="7:49" pos:end="7:51">cmd</name><index pos:start="7:52" pos:end="7:57">[<expr pos:start="7:53" pos:end="7:56"><literal type="number" pos:start="7:53" pos:end="7:56">2048</literal></expr>]</index></name></decl>, <decl pos:start="7:60" pos:end="7:68"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:60" pos:end="7:68"><name pos:start="7:60" pos:end="7:63">auth</name><index pos:start="7:64" pos:end="7:68">[<expr pos:start="7:65" pos:end="7:67"><literal type="number" pos:start="7:65" pos:end="7:67">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:21">option_list</name></decl>, <decl pos:start="9:24" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:30">option</name></decl>, <decl pos:start="9:33" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:41">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">URLContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:23">rtsp_hd</name></decl>, <decl pos:start="11:26" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:37">rtsp_hd_out</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">port</name></decl>, <decl pos:start="13:15" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:17">err</name></decl>, <decl pos:start="13:20" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:25">tcp_fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:21">RTSPMessageHeader</name></type> <name pos:start="15:23" pos:end="15:28">reply1</name> <init pos:start="15:30" pos:end="15:33">= <expr pos:start="15:32" pos:end="15:33"><block pos:start="15:32" pos:end="15:33">{}</block></expr></init></decl>, <decl pos:start="15:36" pos:end="15:51"><type ref="prev" pos:start="15:5" pos:end="15:21"><modifier pos:start="15:36" pos:end="15:36">*</modifier></type><name pos:start="15:37" pos:end="15:41">reply</name> <init pos:start="15:43" pos:end="15:51">= <expr pos:start="15:45" pos:end="15:51"><operator pos:start="15:45" pos:end="15:45">&amp;</operator><name pos:start="15:46" pos:end="15:51">reply1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:28">lower_transport_mask</name> <init pos:start="17:30" pos:end="17:32">= <expr pos:start="17:32" pos:end="17:32"><literal type="number" pos:start="17:32" pos:end="17:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:27"><name pos:start="19:10" pos:end="19:23">real_challenge</name><index pos:start="19:24" pos:end="19:27">[<expr pos:start="19:25" pos:end="19:26"><literal type="number" pos:start="19:25" pos:end="19:26">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:27">sockaddr_storage</name></name></type> <name pos:start="21:29" pos:end="21:32">peer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:38"><decl pos:start="23:5" pos:end="23:37"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:13">socklen_t</name></type> <name pos:start="23:15" pos:end="23:22">peer_len</name> <init pos:start="23:24" pos:end="23:37">= <expr pos:start="23:26" pos:end="23:37"><sizeof pos:start="23:26" pos:end="23:37">sizeof<argument_list pos:start="23:32" pos:end="23:37">(<argument pos:start="23:33" pos:end="23:36"><expr pos:start="23:33" pos:end="23:36"><name pos:start="23:33" pos:end="23:36">peer</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:28"><if pos:start="27:5" pos:end="29:28">if <condition pos:start="27:8" pos:end="27:27">(<expr pos:start="27:9" pos:end="27:26"><operator pos:start="27:9" pos:end="27:9">!</operator><call pos:start="27:10" pos:end="27:26"><name pos:start="27:10" pos:end="27:24">ff_network_init</name><argument_list pos:start="27:25" pos:end="27:26">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:28"><block_content pos:start="29:9" pos:end="29:28">

        <return pos:start="29:9" pos:end="29:28">return <expr pos:start="29:16" pos:end="29:27"><call pos:start="29:16" pos:end="29:27"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:27">(<argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<label pos:start="31:1" pos:end="31:9"><name pos:start="31:1" pos:end="31:8">redirect</name>:</label>

    <expr_stmt pos:start="33:5" pos:end="33:44"><expr pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:6">rt</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:25">control_transport</name></name> <operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:43">RTSP_MODE_PLAIN</name></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:35">/* extract hostname and port */</comment>

    <expr_stmt pos:start="37:5" pos:end="39:77"><expr pos:start="37:5" pos:end="39:76"><call pos:start="37:5" pos:end="39:76"><name pos:start="37:5" pos:end="37:16">ff_url_split</name><argument_list pos:start="37:17" pos:end="39:76">(<argument pos:start="37:18" pos:end="37:21"><expr pos:start="37:18" pos:end="37:21"><name pos:start="37:18" pos:end="37:21">NULL</name></expr></argument>, <argument pos:start="37:24" pos:end="37:24"><expr pos:start="37:24" pos:end="37:24"><literal type="number" pos:start="37:24" pos:end="37:24">0</literal></expr></argument>, <argument pos:start="37:27" pos:end="37:30"><expr pos:start="37:27" pos:end="37:30"><name pos:start="37:27" pos:end="37:30">auth</name></expr></argument>, <argument pos:start="37:33" pos:end="37:44"><expr pos:start="37:33" pos:end="37:44"><sizeof pos:start="37:33" pos:end="37:44">sizeof<argument_list pos:start="37:39" pos:end="37:44">(<argument pos:start="37:40" pos:end="37:43"><expr pos:start="37:40" pos:end="37:43"><name pos:start="37:40" pos:end="37:43">auth</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="39:18" pos:end="39:21"><expr pos:start="39:18" pos:end="39:21"><name pos:start="39:18" pos:end="39:21">host</name></expr></argument>, <argument pos:start="39:24" pos:end="39:35"><expr pos:start="39:24" pos:end="39:35"><sizeof pos:start="39:24" pos:end="39:35">sizeof<argument_list pos:start="39:30" pos:end="39:35">(<argument pos:start="39:31" pos:end="39:34"><expr pos:start="39:31" pos:end="39:34"><name pos:start="39:31" pos:end="39:34">host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:38" pos:end="39:42"><expr pos:start="39:38" pos:end="39:42"><operator pos:start="39:38" pos:end="39:38">&amp;</operator><name pos:start="39:39" pos:end="39:42">port</name></expr></argument>, <argument pos:start="39:45" pos:end="39:48"><expr pos:start="39:45" pos:end="39:48"><name pos:start="39:45" pos:end="39:48">path</name></expr></argument>, <argument pos:start="39:51" pos:end="39:62"><expr pos:start="39:51" pos:end="39:62"><sizeof pos:start="39:51" pos:end="39:62">sizeof<argument_list pos:start="39:57" pos:end="39:62">(<argument pos:start="39:58" pos:end="39:61"><expr pos:start="39:58" pos:end="39:61"><name pos:start="39:58" pos:end="39:61">path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:65" pos:end="39:75"><expr pos:start="39:65" pos:end="39:75"><name pos:start="39:65" pos:end="39:75"><name pos:start="39:65" pos:end="39:65">s</name><operator pos:start="39:66" pos:end="39:67">-&gt;</operator><name pos:start="39:68" pos:end="39:75">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:14">(<expr pos:start="41:9" pos:end="41:13"><operator pos:start="41:9" pos:end="41:9">*</operator><name pos:start="41:10" pos:end="41:13">auth</name></expr>)</condition> <block pos:start="41:16" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:53">

        <expr_stmt pos:start="43:9" pos:end="43:53"><expr pos:start="43:9" pos:end="43:52"><call pos:start="43:9" pos:end="43:52"><name pos:start="43:9" pos:end="43:18">av_strlcpy</name><argument_list pos:start="43:19" pos:end="43:52">(<argument pos:start="43:20" pos:end="43:27"><expr pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:21">rt</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:27">auth</name></name></expr></argument>, <argument pos:start="43:30" pos:end="43:33"><expr pos:start="43:30" pos:end="43:33"><name pos:start="43:30" pos:end="43:33">auth</name></expr></argument>, <argument pos:start="43:36" pos:end="43:51"><expr pos:start="43:36" pos:end="43:51"><sizeof pos:start="43:36" pos:end="43:51">sizeof<argument_list pos:start="43:42" pos:end="43:51">(<argument pos:start="43:43" pos:end="43:50"><expr pos:start="43:43" pos:end="43:50"><name pos:start="43:43" pos:end="43:50"><name pos:start="43:43" pos:end="43:44">rt</name><operator pos:start="43:45" pos:end="43:46">-&gt;</operator><name pos:start="43:47" pos:end="43:50">auth</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="49:33"><if pos:start="47:5" pos:end="49:33">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:12">port</name> <operator pos:start="47:14" pos:end="47:14">&lt;</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:33"><block_content pos:start="49:9" pos:end="49:33">

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:12">port</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:32">RTSP_DEFAULT_PORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:28">/* search for options */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:37"><expr pos:start="55:5" pos:end="55:36"><name pos:start="55:5" pos:end="55:15">option_list</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:36"><name pos:start="55:19" pos:end="55:25">strrchr</name><argument_list pos:start="55:26" pos:end="55:36">(<argument pos:start="55:27" pos:end="55:30"><expr pos:start="55:27" pos:end="55:30"><name pos:start="55:27" pos:end="55:30">path</name></expr></argument>, <argument pos:start="55:33" pos:end="55:35"><expr pos:start="55:33" pos:end="55:35"><literal type="char" pos:start="55:33" pos:end="55:35">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="119:5"><if pos:start="57:5" pos:end="119:5">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:19">option_list</name></expr>)</condition> <block pos:start="57:22" pos:end="119:5">{<block_content pos:start="63:9" pos:end="117:22">

        <comment type="block" pos:start="59:9" pos:end="61:52">/* Strip out the RTSP specific options, write out the rest of

         * the options back into the same string. */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:31"><expr pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:16">filename</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:30">option_list</name></expr>;</expr_stmt>

        <while pos:start="65:9" pos:end="115:9">while <condition pos:start="65:15" pos:end="65:27">(<expr pos:start="65:16" pos:end="65:26"><name pos:start="65:16" pos:end="65:26">option_list</name></expr>)</condition> <block pos:start="65:29" pos:end="115:9">{<block_content pos:start="69:13" pos:end="113:13">

            <comment type="block" pos:start="67:13" pos:end="67:41">/* move the option pointer */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:35"><expr pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:18">option</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <operator pos:start="69:22" pos:end="69:23">++</operator><name pos:start="69:24" pos:end="69:34">option_list</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:51"><expr pos:start="71:13" pos:end="71:50"><name pos:start="71:13" pos:end="71:23">option_list</name> <operator pos:start="71:25" pos:end="71:25">=</operator> <call pos:start="71:27" pos:end="71:50"><name pos:start="71:27" pos:end="71:32">strchr</name><argument_list pos:start="71:33" pos:end="71:50">(<argument pos:start="71:34" pos:end="71:44"><expr pos:start="71:34" pos:end="71:44"><name pos:start="71:34" pos:end="71:44">option_list</name></expr></argument>, <argument pos:start="71:47" pos:end="71:49"><expr pos:start="71:47" pos:end="71:49"><literal type="char" pos:start="71:47" pos:end="71:49">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="75:33"><if pos:start="73:13" pos:end="75:33">if <condition pos:start="73:16" pos:end="73:28">(<expr pos:start="73:17" pos:end="73:27"><name pos:start="73:17" pos:end="73:27">option_list</name></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:33"><block_content pos:start="75:17" pos:end="75:33">

                <expr_stmt pos:start="75:17" pos:end="75:33"><expr pos:start="75:17" pos:end="75:32"><operator pos:start="75:17" pos:end="75:17">*</operator><name pos:start="75:18" pos:end="75:28">option_list</name> <operator pos:start="75:30" pos:end="75:30">=</operator> <literal type="number" pos:start="75:32" pos:end="75:32">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="79:13" pos:end="79:36">/* handle the options */</comment>

            <if_stmt pos:start="81:13" pos:end="113:13"><if pos:start="81:13" pos:end="85:13">if <condition pos:start="81:16" pos:end="81:39">(<expr pos:start="81:17" pos:end="81:38"><operator pos:start="81:17" pos:end="81:17">!</operator><call pos:start="81:18" pos:end="81:38"><name pos:start="81:18" pos:end="81:23">strcmp</name><argument_list pos:start="81:24" pos:end="81:38">(<argument pos:start="81:25" pos:end="81:30"><expr pos:start="81:25" pos:end="81:30"><name pos:start="81:25" pos:end="81:30">option</name></expr></argument>, <argument pos:start="81:33" pos:end="81:37"><expr pos:start="81:33" pos:end="81:37"><literal type="string" pos:start="81:33" pos:end="81:37">"udp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:41" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:71">

                <expr_stmt pos:start="83:17" pos:end="83:71"><expr pos:start="83:17" pos:end="83:70"><name pos:start="83:17" pos:end="83:36">lower_transport_mask</name> <operator pos:start="83:38" pos:end="83:39">|=</operator> <operator pos:start="83:41" pos:end="83:41">(</operator><literal type="number" pos:start="83:42" pos:end="83:42">1</literal><operator pos:start="83:43" pos:end="83:44">&lt;&lt;</operator> <name pos:start="83:46" pos:end="83:69">RTSP_LOWER_TRANSPORT_UDP</name><operator pos:start="83:70" pos:end="83:70">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="85:15" pos:end="89:13">else if <condition pos:start="85:23" pos:end="85:52">(<expr pos:start="85:24" pos:end="85:51"><operator pos:start="85:24" pos:end="85:24">!</operator><call pos:start="85:25" pos:end="85:51"><name pos:start="85:25" pos:end="85:30">strcmp</name><argument_list pos:start="85:31" pos:end="85:51">(<argument pos:start="85:32" pos:end="85:37"><expr pos:start="85:32" pos:end="85:37"><name pos:start="85:32" pos:end="85:37">option</name></expr></argument>, <argument pos:start="85:40" pos:end="85:50"><expr pos:start="85:40" pos:end="85:50"><literal type="string" pos:start="85:40" pos:end="85:50">"multicast"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:54" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:81">

                <expr_stmt pos:start="87:17" pos:end="87:81"><expr pos:start="87:17" pos:end="87:80"><name pos:start="87:17" pos:end="87:36">lower_transport_mask</name> <operator pos:start="87:38" pos:end="87:39">|=</operator> <operator pos:start="87:41" pos:end="87:41">(</operator><literal type="number" pos:start="87:42" pos:end="87:42">1</literal><operator pos:start="87:43" pos:end="87:44">&lt;&lt;</operator> <name pos:start="87:46" pos:end="87:79">RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name><operator pos:start="87:80" pos:end="87:80">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="89:15" pos:end="93:13">else if <condition pos:start="89:23" pos:end="89:46">(<expr pos:start="89:24" pos:end="89:45"><operator pos:start="89:24" pos:end="89:24">!</operator><call pos:start="89:25" pos:end="89:45"><name pos:start="89:25" pos:end="89:30">strcmp</name><argument_list pos:start="89:31" pos:end="89:45">(<argument pos:start="89:32" pos:end="89:37"><expr pos:start="89:32" pos:end="89:37"><name pos:start="89:32" pos:end="89:37">option</name></expr></argument>, <argument pos:start="89:40" pos:end="89:44"><expr pos:start="89:40" pos:end="89:44"><literal type="string" pos:start="89:40" pos:end="89:44">"tcp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:48" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:71">

                <expr_stmt pos:start="91:17" pos:end="91:71"><expr pos:start="91:17" pos:end="91:70"><name pos:start="91:17" pos:end="91:36">lower_transport_mask</name> <operator pos:start="91:38" pos:end="91:39">|=</operator> <operator pos:start="91:41" pos:end="91:41">(</operator><literal type="number" pos:start="91:42" pos:end="91:42">1</literal><operator pos:start="91:43" pos:end="91:44">&lt;&lt;</operator> <name pos:start="91:46" pos:end="91:69">RTSP_LOWER_TRANSPORT_TCP</name><operator pos:start="91:70" pos:end="91:70">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="93:15" pos:end="99:13">else if<condition pos:start="93:22" pos:end="93:46">(<expr pos:start="93:23" pos:end="93:45"><operator pos:start="93:23" pos:end="93:23">!</operator><call pos:start="93:24" pos:end="93:45"><name pos:start="93:24" pos:end="93:29">strcmp</name><argument_list pos:start="93:30" pos:end="93:45">(<argument pos:start="93:31" pos:end="93:36"><expr pos:start="93:31" pos:end="93:36"><name pos:start="93:31" pos:end="93:36">option</name></expr></argument>, <argument pos:start="93:39" pos:end="93:44"><expr pos:start="93:39" pos:end="93:44"><literal type="string" pos:start="93:39" pos:end="93:44">"http"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:48" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:57">

                <expr_stmt pos:start="95:17" pos:end="95:71"><expr pos:start="95:17" pos:end="95:70"><name pos:start="95:17" pos:end="95:36">lower_transport_mask</name> <operator pos:start="95:38" pos:end="95:39">|=</operator> <operator pos:start="95:41" pos:end="95:41">(</operator><literal type="number" pos:start="95:42" pos:end="95:42">1</literal><operator pos:start="95:43" pos:end="95:44">&lt;&lt;</operator> <name pos:start="95:46" pos:end="95:69">RTSP_LOWER_TRANSPORT_TCP</name><operator pos:start="95:70" pos:end="95:70">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:57"><expr pos:start="97:17" pos:end="97:56"><name pos:start="97:17" pos:end="97:37"><name pos:start="97:17" pos:end="97:18">rt</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:37">control_transport</name></name> <operator pos:start="97:39" pos:end="97:39">=</operator> <name pos:start="97:41" pos:end="97:56">RTSP_MODE_TUNNEL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="99:15" pos:end="113:13">else <block pos:start="99:20" pos:end="113:13">{<block_content pos:start="105:17" pos:end="111:49">

                <comment type="block" pos:start="101:17" pos:end="103:62">/* Write options back into the buffer, using memmove instead

                 * of strcpy since the strings may overlap. */</comment>

                <decl_stmt pos:start="105:17" pos:end="105:41"><decl pos:start="105:17" pos:end="105:40"><type pos:start="105:17" pos:end="105:19"><name pos:start="105:17" pos:end="105:19">int</name></type> <name pos:start="105:21" pos:end="105:23">len</name> <init pos:start="105:25" pos:end="105:40">= <expr pos:start="105:27" pos:end="105:40"><call pos:start="105:27" pos:end="105:40"><name pos:start="105:27" pos:end="105:32">strlen</name><argument_list pos:start="105:33" pos:end="105:40">(<argument pos:start="105:34" pos:end="105:39"><expr pos:start="105:34" pos:end="105:39"><name pos:start="105:34" pos:end="105:39">option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:49"><expr pos:start="107:17" pos:end="107:48"><call pos:start="107:17" pos:end="107:48"><name pos:start="107:17" pos:end="107:23">memmove</name><argument_list pos:start="107:24" pos:end="107:48">(<argument pos:start="107:25" pos:end="107:34"><expr pos:start="107:25" pos:end="107:34"><operator pos:start="107:25" pos:end="107:26">++</operator><name pos:start="107:27" pos:end="107:34">filename</name></expr></argument>, <argument pos:start="107:37" pos:end="107:42"><expr pos:start="107:37" pos:end="107:42"><name pos:start="107:37" pos:end="107:42">option</name></expr></argument>, <argument pos:start="107:45" pos:end="107:47"><expr pos:start="107:45" pos:end="107:47"><name pos:start="107:45" pos:end="107:47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:32"><expr pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:24">filename</name> <operator pos:start="109:26" pos:end="109:27">+=</operator> <name pos:start="109:29" pos:end="109:31">len</name></expr>;</expr_stmt>

                <if_stmt pos:start="111:17" pos:end="111:49"><if pos:start="111:17" pos:end="111:49">if <condition pos:start="111:20" pos:end="111:32">(<expr pos:start="111:21" pos:end="111:31"><name pos:start="111:21" pos:end="111:31">option_list</name></expr>)</condition><block type="pseudo" pos:start="111:34" pos:end="111:49"><block_content pos:start="111:34" pos:end="111:49"> <expr_stmt pos:start="111:34" pos:end="111:49"><expr pos:start="111:34" pos:end="111:48"><operator pos:start="111:34" pos:end="111:34">*</operator><name pos:start="111:35" pos:end="111:42">filename</name> <operator pos:start="111:44" pos:end="111:44">=</operator> <literal type="char" pos:start="111:46" pos:end="111:48">'&amp;'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="117:9" pos:end="117:22"><expr pos:start="117:9" pos:end="117:21"><operator pos:start="117:9" pos:end="117:9">*</operator><name pos:start="117:10" pos:end="117:17">filename</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <literal type="number" pos:start="117:21" pos:end="117:21">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="125:66"><if pos:start="123:5" pos:end="125:66">if <condition pos:start="123:8" pos:end="123:30">(<expr pos:start="123:9" pos:end="123:29"><operator pos:start="123:9" pos:end="123:9">!</operator><name pos:start="123:10" pos:end="123:29">lower_transport_mask</name></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:66"><block_content pos:start="125:9" pos:end="125:66">

        <expr_stmt pos:start="125:9" pos:end="125:66"><expr pos:start="125:9" pos:end="125:65"><name pos:start="125:9" pos:end="125:28">lower_transport_mask</name> <operator pos:start="125:30" pos:end="125:30">=</operator> <operator pos:start="125:32" pos:end="125:32">(</operator><literal type="number" pos:start="125:33" pos:end="125:33">1</literal> <operator pos:start="125:35" pos:end="125:36">&lt;&lt;</operator> <name pos:start="125:38" pos:end="125:60">RTSP_LOWER_TRANSPORT_NB</name><operator pos:start="125:61" pos:end="125:61">)</operator> <operator pos:start="125:63" pos:end="125:63">-</operator> <literal type="number" pos:start="125:65" pos:end="125:65">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="129:5" pos:end="149:5"><if pos:start="129:5" pos:end="149:5">if <condition pos:start="129:8" pos:end="129:19">(<expr pos:start="129:9" pos:end="129:18"><name pos:start="129:9" pos:end="129:18"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:18">oformat</name></name></expr>)</condition> <block pos:start="129:21" pos:end="149:5">{<block_content pos:start="133:9" pos:end="147:9">

        <comment type="block" pos:start="131:9" pos:end="131:62">/* Only UDP or TCP - UDP multicast isn't supported. */</comment>

        <expr_stmt pos:start="133:9" pos:end="135:64"><expr pos:start="133:9" pos:end="135:63"><name pos:start="133:9" pos:end="133:28">lower_transport_mask</name> <operator pos:start="133:30" pos:end="133:31">&amp;=</operator> <operator pos:start="133:33" pos:end="133:33">(</operator><literal type="number" pos:start="133:34" pos:end="133:34">1</literal> <operator pos:start="133:36" pos:end="133:37">&lt;&lt;</operator> <name pos:start="133:39" pos:end="133:62">RTSP_LOWER_TRANSPORT_UDP</name><operator pos:start="133:63" pos:end="133:63">)</operator> <operator pos:start="133:65" pos:end="133:65">|</operator>

                                <operator pos:start="135:33" pos:end="135:33">(</operator><literal type="number" pos:start="135:34" pos:end="135:34">1</literal> <operator pos:start="135:36" pos:end="135:37">&lt;&lt;</operator> <name pos:start="135:39" pos:end="135:62">RTSP_LOWER_TRANSPORT_TCP</name><operator pos:start="135:63" pos:end="135:63">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="147:9"><if pos:start="137:9" pos:end="147:9">if <condition pos:start="137:12" pos:end="137:79">(<expr pos:start="137:13" pos:end="137:78"><operator pos:start="137:13" pos:end="137:13">!</operator><name pos:start="137:14" pos:end="137:33">lower_transport_mask</name> <operator pos:start="137:35" pos:end="137:36">||</operator> <name pos:start="137:38" pos:end="137:58"><name pos:start="137:38" pos:end="137:39">rt</name><operator pos:start="137:40" pos:end="137:41">-&gt;</operator><name pos:start="137:42" pos:end="137:58">control_transport</name></name> <operator pos:start="137:60" pos:end="137:61">==</operator> <name pos:start="137:63" pos:end="137:78">RTSP_MODE_TUNNEL</name></expr>)</condition> <block pos:start="137:81" pos:end="147:9">{<block_content pos:start="139:13" pos:end="145:22">

            <expr_stmt pos:start="139:13" pos:end="141:84"><expr pos:start="139:13" pos:end="141:83"><call pos:start="139:13" pos:end="141:83"><name pos:start="139:13" pos:end="139:18">av_log</name><argument_list pos:start="139:19" pos:end="141:83">(<argument pos:start="139:20" pos:end="139:20"><expr pos:start="139:20" pos:end="139:20"><name pos:start="139:20" pos:end="139:20">s</name></expr></argument>, <argument pos:start="139:23" pos:end="139:34"><expr pos:start="139:23" pos:end="139:34"><name pos:start="139:23" pos:end="139:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:37" pos:end="141:82"><expr pos:start="139:37" pos:end="141:82"><literal type="string" pos:start="139:37" pos:end="139:74">"Unsupported lower transport method, "</literal>

                                    <literal type="string" pos:start="141:37" pos:end="141:82">"only UDP and TCP are supported for output.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:34"><expr pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:15">err</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <call pos:start="143:19" pos:end="143:33"><name pos:start="143:19" pos:end="143:25">AVERROR</name><argument_list pos:start="143:26" pos:end="143:33">(<argument pos:start="143:27" pos:end="143:32"><expr pos:start="143:27" pos:end="143:32"><name pos:start="143:27" pos:end="143:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="145:13" pos:end="145:22">goto <name pos:start="145:18" pos:end="145:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="157:23">/* Construct the URI used in request; this is similar to s-&gt;filename,

     * but with authentication credentials removed and RTSP specific options

     * stripped out. */</comment>

    <expr_stmt pos:start="159:5" pos:end="161:40"><expr pos:start="159:5" pos:end="161:39"><call pos:start="159:5" pos:end="161:39"><name pos:start="159:5" pos:end="159:15">ff_url_join</name><argument_list pos:start="159:16" pos:end="161:39">(<argument pos:start="159:17" pos:end="159:31"><expr pos:start="159:17" pos:end="159:31"><name pos:start="159:17" pos:end="159:31"><name pos:start="159:17" pos:end="159:18">rt</name><operator pos:start="159:19" pos:end="159:20">-&gt;</operator><name pos:start="159:21" pos:end="159:31">control_uri</name></name></expr></argument>, <argument pos:start="159:34" pos:end="159:56"><expr pos:start="159:34" pos:end="159:56"><sizeof pos:start="159:34" pos:end="159:56">sizeof<argument_list pos:start="159:40" pos:end="159:56">(<argument pos:start="159:41" pos:end="159:55"><expr pos:start="159:41" pos:end="159:55"><name pos:start="159:41" pos:end="159:55"><name pos:start="159:41" pos:end="159:42">rt</name><operator pos:start="159:43" pos:end="159:44">-&gt;</operator><name pos:start="159:45" pos:end="159:55">control_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="159:59" pos:end="159:64"><expr pos:start="159:59" pos:end="159:64"><literal type="string" pos:start="159:59" pos:end="159:64">"rtsp"</literal></expr></argument>, <argument pos:start="159:67" pos:end="159:70"><expr pos:start="159:67" pos:end="159:70"><name pos:start="159:67" pos:end="159:70">NULL</name></expr></argument>,

                <argument pos:start="161:17" pos:end="161:20"><expr pos:start="161:17" pos:end="161:20"><name pos:start="161:17" pos:end="161:20">host</name></expr></argument>, <argument pos:start="161:23" pos:end="161:26"><expr pos:start="161:23" pos:end="161:26"><name pos:start="161:23" pos:end="161:26">port</name></expr></argument>, <argument pos:start="161:29" pos:end="161:32"><expr pos:start="161:29" pos:end="161:32"><literal type="string" pos:start="161:29" pos:end="161:32">"%s"</literal></expr></argument>, <argument pos:start="161:35" pos:end="161:38"><expr pos:start="161:35" pos:end="161:38"><name pos:start="161:35" pos:end="161:38">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="165:5" pos:end="281:5"><if pos:start="165:5" pos:end="265:5">if <condition pos:start="165:8" pos:end="165:50">(<expr pos:start="165:9" pos:end="165:49"><name pos:start="165:9" pos:end="165:29"><name pos:start="165:9" pos:end="165:10">rt</name><operator pos:start="165:11" pos:end="165:12">-&gt;</operator><name pos:start="165:13" pos:end="165:29">control_transport</name></name> <operator pos:start="165:31" pos:end="165:32">==</operator> <name pos:start="165:34" pos:end="165:49">RTSP_MODE_TUNNEL</name></expr>)</condition> <block pos:start="165:52" pos:end="265:5">{<block_content pos:start="169:9" pos:end="261:62">

        <comment type="block" pos:start="167:9" pos:end="167:52">/* set up initial handshake for tunneling */</comment>

        <decl_stmt pos:start="169:9" pos:end="169:28"><decl pos:start="169:9" pos:end="169:27"><type pos:start="169:9" pos:end="169:12"><name pos:start="169:9" pos:end="169:12">char</name></type> <name pos:start="169:14" pos:end="169:27"><name pos:start="169:14" pos:end="169:21">httpname</name><index pos:start="169:22" pos:end="169:27">[<expr pos:start="169:23" pos:end="169:26"><literal type="number" pos:start="169:23" pos:end="169:26">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="171:9" pos:end="171:31"><decl pos:start="171:9" pos:end="171:30"><type pos:start="171:9" pos:end="171:12"><name pos:start="171:9" pos:end="171:12">char</name></type> <name pos:start="171:14" pos:end="171:30"><name pos:start="171:14" pos:end="171:26">sessioncookie</name><index pos:start="171:27" pos:end="171:30">[<expr pos:start="171:28" pos:end="171:29"><literal type="number" pos:start="171:28" pos:end="171:29">17</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="173:9" pos:end="173:27"><decl pos:start="173:9" pos:end="173:26"><type pos:start="173:9" pos:end="173:12"><name pos:start="173:9" pos:end="173:12">char</name></type> <name pos:start="173:14" pos:end="173:26"><name pos:start="173:14" pos:end="173:20">headers</name><index pos:start="173:21" pos:end="173:26">[<expr pos:start="173:22" pos:end="173:25"><literal type="number" pos:start="173:22" pos:end="173:25">1024</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:86"><expr pos:start="177:9" pos:end="177:85"><call pos:start="177:9" pos:end="177:85"><name pos:start="177:9" pos:end="177:19">ff_url_join</name><argument_list pos:start="177:20" pos:end="177:85">(<argument pos:start="177:21" pos:end="177:28"><expr pos:start="177:21" pos:end="177:28"><name pos:start="177:21" pos:end="177:28">httpname</name></expr></argument>, <argument pos:start="177:31" pos:end="177:46"><expr pos:start="177:31" pos:end="177:46"><sizeof pos:start="177:31" pos:end="177:46">sizeof<argument_list pos:start="177:37" pos:end="177:46">(<argument pos:start="177:38" pos:end="177:45"><expr pos:start="177:38" pos:end="177:45"><name pos:start="177:38" pos:end="177:45">httpname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="177:49" pos:end="177:54"><expr pos:start="177:49" pos:end="177:54"><literal type="string" pos:start="177:49" pos:end="177:54">"http"</literal></expr></argument>, <argument pos:start="177:57" pos:end="177:60"><expr pos:start="177:57" pos:end="177:60"><name pos:start="177:57" pos:end="177:60">NULL</name></expr></argument>, <argument pos:start="177:63" pos:end="177:66"><expr pos:start="177:63" pos:end="177:66"><name pos:start="177:63" pos:end="177:66">host</name></expr></argument>, <argument pos:start="177:69" pos:end="177:72"><expr pos:start="177:69" pos:end="177:72"><name pos:start="177:69" pos:end="177:72">port</name></expr></argument>, <argument pos:start="177:75" pos:end="177:78"><expr pos:start="177:75" pos:end="177:78"><literal type="string" pos:start="177:75" pos:end="177:78">"%s"</literal></expr></argument>, <argument pos:start="177:81" pos:end="177:84"><expr pos:start="177:81" pos:end="177:84"><name pos:start="177:81" pos:end="177:84">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="181:61"><expr pos:start="179:9" pos:end="181:60"><call pos:start="179:9" pos:end="181:60"><name pos:start="179:9" pos:end="179:16">snprintf</name><argument_list pos:start="179:17" pos:end="181:60">(<argument pos:start="179:18" pos:end="179:30"><expr pos:start="179:18" pos:end="179:30"><name pos:start="179:18" pos:end="179:30">sessioncookie</name></expr></argument>, <argument pos:start="179:33" pos:end="179:53"><expr pos:start="179:33" pos:end="179:53"><sizeof pos:start="179:33" pos:end="179:53">sizeof<argument_list pos:start="179:39" pos:end="179:53">(<argument pos:start="179:40" pos:end="179:52"><expr pos:start="179:40" pos:end="179:52"><name pos:start="179:40" pos:end="179:52">sessioncookie</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="179:56" pos:end="179:65"><expr pos:start="179:56" pos:end="179:65"><literal type="string" pos:start="179:56" pos:end="179:65">"%08x%08x"</literal></expr></argument>,

                 <argument pos:start="181:18" pos:end="181:37"><expr pos:start="181:18" pos:end="181:37"><call pos:start="181:18" pos:end="181:37"><name pos:start="181:18" pos:end="181:35">av_get_random_seed</name><argument_list pos:start="181:36" pos:end="181:37">()</argument_list></call></expr></argument>, <argument pos:start="181:40" pos:end="181:59"><expr pos:start="181:40" pos:end="181:59"><call pos:start="181:40" pos:end="181:59"><name pos:start="181:40" pos:end="181:57">av_get_random_seed</name><argument_list pos:start="181:58" pos:end="181:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="185:9" pos:end="185:26">/* GET requests */</comment>

        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:57">(<expr pos:start="187:13" pos:end="187:56"><call pos:start="187:13" pos:end="187:52"><name pos:start="187:13" pos:end="187:20">url_open</name><argument_list pos:start="187:21" pos:end="187:52">(<argument pos:start="187:22" pos:end="187:29"><expr pos:start="187:22" pos:end="187:29"><operator pos:start="187:22" pos:end="187:22">&amp;</operator><name pos:start="187:23" pos:end="187:29">rtsp_hd</name></expr></argument>, <argument pos:start="187:32" pos:end="187:39"><expr pos:start="187:32" pos:end="187:39"><name pos:start="187:32" pos:end="187:39">httpname</name></expr></argument>, <argument pos:start="187:42" pos:end="187:51"><expr pos:start="187:42" pos:end="187:51"><name pos:start="187:42" pos:end="187:51">URL_RDONLY</name></expr></argument>)</argument_list></call> <operator pos:start="187:54" pos:end="187:54">&lt;</operator> <literal type="number" pos:start="187:56" pos:end="187:56">0</literal></expr>)</condition> <block pos:start="187:59" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:22">

            <expr_stmt pos:start="189:13" pos:end="189:31"><expr pos:start="189:13" pos:end="189:30"><name pos:start="189:13" pos:end="189:15">err</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:30"><name pos:start="189:19" pos:end="189:25">AVERROR</name><argument_list pos:start="189:26" pos:end="189:30">(<argument pos:start="189:27" pos:end="189:29"><expr pos:start="189:27" pos:end="189:29"><name pos:start="189:27" pos:end="189:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="191:13" pos:end="191:22">goto <name pos:start="191:18" pos:end="191:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="197:9" pos:end="197:34">/* generate GET headers */</comment>

        <expr_stmt pos:start="199:9" pos:end="209:32"><expr pos:start="199:9" pos:end="209:31"><call pos:start="199:9" pos:end="209:31"><name pos:start="199:9" pos:end="199:16">snprintf</name><argument_list pos:start="199:17" pos:end="209:31">(<argument pos:start="199:18" pos:end="199:24"><expr pos:start="199:18" pos:end="199:24"><name pos:start="199:18" pos:end="199:24">headers</name></expr></argument>, <argument pos:start="199:27" pos:end="199:41"><expr pos:start="199:27" pos:end="199:41"><sizeof pos:start="199:27" pos:end="199:41">sizeof<argument_list pos:start="199:33" pos:end="199:41">(<argument pos:start="199:34" pos:end="199:40"><expr pos:start="199:34" pos:end="199:40"><name pos:start="199:34" pos:end="199:40">headers</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="201:18" pos:end="207:46"><expr pos:start="201:18" pos:end="207:46"><literal type="string" pos:start="201:18" pos:end="201:42">"x-sessioncookie: %s\r\n"</literal>

                 <literal type="string" pos:start="203:18" pos:end="203:59">"Accept: application/x-rtsp-tunnelled\r\n"</literal>

                 <literal type="string" pos:start="205:18" pos:end="205:39">"Pragma: no-cache\r\n"</literal>

                 <literal type="string" pos:start="207:18" pos:end="207:46">"Cache-Control: no-cache\r\n"</literal></expr></argument>,

                 <argument pos:start="209:18" pos:end="209:30"><expr pos:start="209:18" pos:end="209:30"><name pos:start="209:18" pos:end="209:30">sessioncookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:46"><expr pos:start="211:9" pos:end="211:45"><call pos:start="211:9" pos:end="211:45"><name pos:start="211:9" pos:end="211:27">ff_http_set_headers</name><argument_list pos:start="211:28" pos:end="211:45">(<argument pos:start="211:29" pos:end="211:35"><expr pos:start="211:29" pos:end="211:35"><name pos:start="211:29" pos:end="211:35">rtsp_hd</name></expr></argument>, <argument pos:start="211:38" pos:end="211:44"><expr pos:start="211:38" pos:end="211:44"><name pos:start="211:38" pos:end="211:44">headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="215:9" pos:end="215:37">/* complete the connection */</comment>

        <if_stmt pos:start="217:9" pos:end="224:9"><if pos:start="217:9" pos:end="224:9">if <condition pos:start="217:12" pos:end="217:39">(<expr pos:start="217:13" pos:end="217:38"><call pos:start="217:13" pos:end="217:38"><name pos:start="217:13" pos:end="217:20">url_read</name><argument_list pos:start="217:21" pos:end="217:38">(<argument pos:start="217:22" pos:end="217:28"><expr pos:start="217:22" pos:end="217:28"><name pos:start="217:22" pos:end="217:28">rtsp_hd</name></expr></argument>, <argument pos:start="217:31" pos:end="217:34"><expr pos:start="217:31" pos:end="217:34"><name pos:start="217:31" pos:end="217:34">NULL</name></expr></argument>, <argument pos:start="217:37" pos:end="217:37"><expr pos:start="217:37" pos:end="217:37"><literal type="number" pos:start="217:37" pos:end="217:37">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:41" pos:end="224:9">{<block_content pos:start="220:13" pos:end="222:22">


            <expr_stmt pos:start="220:13" pos:end="220:31"><expr pos:start="220:13" pos:end="220:30"><name pos:start="220:13" pos:end="220:15">err</name> <operator pos:start="220:17" pos:end="220:17">=</operator> <call pos:start="220:19" pos:end="220:30"><name pos:start="220:19" pos:end="220:25">AVERROR</name><argument_list pos:start="220:26" pos:end="220:30">(<argument pos:start="220:27" pos:end="220:29"><expr pos:start="220:27" pos:end="220:29"><name pos:start="220:27" pos:end="220:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="222:13" pos:end="222:22">goto <name pos:start="222:18" pos:end="222:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="228:9" pos:end="228:27">/* POST requests */</comment>

        <if_stmt pos:start="230:9" pos:end="237:9"><if pos:start="230:9" pos:end="237:9">if <condition pos:start="230:12" pos:end="230:62">(<expr pos:start="230:13" pos:end="230:60"><call pos:start="230:13" pos:end="230:56"><name pos:start="230:13" pos:end="230:20">url_open</name><argument_list pos:start="230:21" pos:end="230:56">(<argument pos:start="230:22" pos:end="230:33"><expr pos:start="230:22" pos:end="230:33"><operator pos:start="230:22" pos:end="230:22">&amp;</operator><name pos:start="230:23" pos:end="230:33">rtsp_hd_out</name></expr></argument>, <argument pos:start="230:36" pos:end="230:43"><expr pos:start="230:36" pos:end="230:43"><name pos:start="230:36" pos:end="230:43">httpname</name></expr></argument>, <argument pos:start="230:46" pos:end="230:55"><expr pos:start="230:46" pos:end="230:55"><name pos:start="230:46" pos:end="230:55">URL_WRONLY</name></expr></argument>)</argument_list></call> <operator pos:start="230:58" pos:end="230:58">&lt;</operator> <literal type="number" pos:start="230:60" pos:end="230:60">0</literal></expr> )</condition> <block pos:start="230:64" pos:end="237:9">{<block_content pos:start="233:13" pos:end="235:22">


            <expr_stmt pos:start="233:13" pos:end="233:31"><expr pos:start="233:13" pos:end="233:30"><name pos:start="233:13" pos:end="233:15">err</name> <operator pos:start="233:17" pos:end="233:17">=</operator> <call pos:start="233:19" pos:end="233:30"><name pos:start="233:19" pos:end="233:25">AVERROR</name><argument_list pos:start="233:26" pos:end="233:30">(<argument pos:start="233:27" pos:end="233:29"><expr pos:start="233:27" pos:end="233:29"><name pos:start="233:27" pos:end="233:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="235:13" pos:end="235:22">goto <name pos:start="235:18" pos:end="235:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="241:9" pos:end="241:35">/* generate POST headers */</comment>

        <expr_stmt pos:start="243:9" pos:end="257:32"><expr pos:start="243:9" pos:end="257:31"><call pos:start="243:9" pos:end="257:31"><name pos:start="243:9" pos:end="243:16">snprintf</name><argument_list pos:start="243:17" pos:end="257:31">(<argument pos:start="243:18" pos:end="243:24"><expr pos:start="243:18" pos:end="243:24"><name pos:start="243:18" pos:end="243:24">headers</name></expr></argument>, <argument pos:start="243:27" pos:end="243:41"><expr pos:start="243:27" pos:end="243:41"><sizeof pos:start="243:27" pos:end="243:41">sizeof<argument_list pos:start="243:33" pos:end="243:41">(<argument pos:start="243:34" pos:end="243:40"><expr pos:start="243:34" pos:end="243:40"><name pos:start="243:34" pos:end="243:40">headers</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="245:18" pos:end="255:60"><expr pos:start="245:18" pos:end="255:60"><literal type="string" pos:start="245:18" pos:end="245:42">"x-sessioncookie: %s\r\n"</literal>

                 <literal type="string" pos:start="247:18" pos:end="247:65">"Content-Type: application/x-rtsp-tunnelled\r\n"</literal>

                 <literal type="string" pos:start="249:18" pos:end="249:39">"Pragma: no-cache\r\n"</literal>

                 <literal type="string" pos:start="251:18" pos:end="251:46">"Cache-Control: no-cache\r\n"</literal>

                 <literal type="string" pos:start="253:18" pos:end="253:44">"Content-Length: 32767\r\n"</literal>

                 <literal type="string" pos:start="255:18" pos:end="255:60">"Expires: Sun, 9 Jan 1972 00:00:00 GMT\r\n"</literal></expr></argument>,

                 <argument pos:start="257:18" pos:end="257:30"><expr pos:start="257:18" pos:end="257:30"><name pos:start="257:18" pos:end="257:30">sessioncookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:50"><expr pos:start="259:9" pos:end="259:49"><call pos:start="259:9" pos:end="259:49"><name pos:start="259:9" pos:end="259:27">ff_http_set_headers</name><argument_list pos:start="259:28" pos:end="259:49">(<argument pos:start="259:29" pos:end="259:39"><expr pos:start="259:29" pos:end="259:39"><name pos:start="259:29" pos:end="259:39">rtsp_hd_out</name></expr></argument>, <argument pos:start="259:42" pos:end="259:48"><expr pos:start="259:42" pos:end="259:48"><name pos:start="259:42" pos:end="259:48">headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:62"><expr pos:start="261:9" pos:end="261:61"><call pos:start="261:9" pos:end="261:61"><name pos:start="261:9" pos:end="261:45">ff_http_set_chunked_transfer_encoding</name><argument_list pos:start="261:46" pos:end="261:61">(<argument pos:start="261:47" pos:end="261:57"><expr pos:start="261:47" pos:end="261:57"><name pos:start="261:47" pos:end="261:57">rtsp_hd_out</name></expr></argument>, <argument pos:start="261:60" pos:end="261:60"><expr pos:start="261:60" pos:end="261:60"><literal type="number" pos:start="261:60" pos:end="261:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="265:7" pos:end="281:5">else <block pos:start="265:12" pos:end="281:5">{<block_content pos:start="269:9" pos:end="279:30">

        <comment type="block" pos:start="267:9" pos:end="267:37">/* open the tcp connection */</comment>

        <expr_stmt pos:start="269:9" pos:end="269:77"><expr pos:start="269:9" pos:end="269:76"><call pos:start="269:9" pos:end="269:76"><name pos:start="269:9" pos:end="269:19">ff_url_join</name><argument_list pos:start="269:20" pos:end="269:76">(<argument pos:start="269:21" pos:end="269:27"><expr pos:start="269:21" pos:end="269:27"><name pos:start="269:21" pos:end="269:27">tcpname</name></expr></argument>, <argument pos:start="269:30" pos:end="269:44"><expr pos:start="269:30" pos:end="269:44"><sizeof pos:start="269:30" pos:end="269:44">sizeof<argument_list pos:start="269:36" pos:end="269:44">(<argument pos:start="269:37" pos:end="269:43"><expr pos:start="269:37" pos:end="269:43"><name pos:start="269:37" pos:end="269:43">tcpname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="269:47" pos:end="269:51"><expr pos:start="269:47" pos:end="269:51"><literal type="string" pos:start="269:47" pos:end="269:51">"tcp"</literal></expr></argument>, <argument pos:start="269:54" pos:end="269:57"><expr pos:start="269:54" pos:end="269:57"><name pos:start="269:54" pos:end="269:57">NULL</name></expr></argument>, <argument pos:start="269:60" pos:end="269:63"><expr pos:start="269:60" pos:end="269:63"><name pos:start="269:60" pos:end="269:63">host</name></expr></argument>, <argument pos:start="269:66" pos:end="269:69"><expr pos:start="269:66" pos:end="269:69"><name pos:start="269:66" pos:end="269:69">port</name></expr></argument>, <argument pos:start="269:72" pos:end="269:75"><expr pos:start="269:72" pos:end="269:75"><name pos:start="269:72" pos:end="269:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="271:9" pos:end="277:9"><if pos:start="271:9" pos:end="277:9">if <condition pos:start="271:12" pos:end="271:54">(<expr pos:start="271:13" pos:end="271:53"><call pos:start="271:13" pos:end="271:49"><name pos:start="271:13" pos:end="271:20">url_open</name><argument_list pos:start="271:21" pos:end="271:49">(<argument pos:start="271:22" pos:end="271:29"><expr pos:start="271:22" pos:end="271:29"><operator pos:start="271:22" pos:end="271:22">&amp;</operator><name pos:start="271:23" pos:end="271:29">rtsp_hd</name></expr></argument>, <argument pos:start="271:32" pos:end="271:38"><expr pos:start="271:32" pos:end="271:38"><name pos:start="271:32" pos:end="271:38">tcpname</name></expr></argument>, <argument pos:start="271:41" pos:end="271:48"><expr pos:start="271:41" pos:end="271:48"><name pos:start="271:41" pos:end="271:48">URL_RDWR</name></expr></argument>)</argument_list></call> <operator pos:start="271:51" pos:end="271:51">&lt;</operator> <literal type="number" pos:start="271:53" pos:end="271:53">0</literal></expr>)</condition> <block pos:start="271:56" pos:end="277:9">{<block_content pos:start="273:13" pos:end="275:22">

            <expr_stmt pos:start="273:13" pos:end="273:31"><expr pos:start="273:13" pos:end="273:30"><name pos:start="273:13" pos:end="273:15">err</name> <operator pos:start="273:17" pos:end="273:17">=</operator> <call pos:start="273:19" pos:end="273:30"><name pos:start="273:19" pos:end="273:25">AVERROR</name><argument_list pos:start="273:26" pos:end="273:30">(<argument pos:start="273:27" pos:end="273:29"><expr pos:start="273:27" pos:end="273:29"><name pos:start="273:27" pos:end="273:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="275:13" pos:end="275:22">goto <name pos:start="275:18" pos:end="275:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:30"><expr pos:start="279:9" pos:end="279:29"><name pos:start="279:9" pos:end="279:19">rtsp_hd_out</name> <operator pos:start="279:21" pos:end="279:21">=</operator> <name pos:start="279:23" pos:end="279:29">rtsp_hd</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:26"><expr pos:start="283:5" pos:end="283:25"><name pos:start="283:5" pos:end="283:15"><name pos:start="283:5" pos:end="283:6">rt</name><operator pos:start="283:7" pos:end="283:8">-&gt;</operator><name pos:start="283:9" pos:end="283:15">rtsp_hd</name></name> <operator pos:start="283:17" pos:end="283:17">=</operator> <name pos:start="283:19" pos:end="283:25">rtsp_hd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:34"><expr pos:start="285:5" pos:end="285:33"><name pos:start="285:5" pos:end="285:19"><name pos:start="285:5" pos:end="285:6">rt</name><operator pos:start="285:7" pos:end="285:8">-&gt;</operator><name pos:start="285:9" pos:end="285:19">rtsp_hd_out</name></name> <operator pos:start="285:21" pos:end="285:21">=</operator> <name pos:start="285:23" pos:end="285:33">rtsp_hd_out</name></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:16"><expr pos:start="287:5" pos:end="287:15"><name pos:start="287:5" pos:end="287:11"><name pos:start="287:5" pos:end="287:6">rt</name><operator pos:start="287:7" pos:end="287:8">-&gt;</operator><name pos:start="287:9" pos:end="287:11">seq</name></name> <operator pos:start="287:13" pos:end="287:13">=</operator> <literal type="number" pos:start="287:15" pos:end="287:15">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="291:5" pos:end="291:42"><expr pos:start="291:5" pos:end="291:41"><name pos:start="291:5" pos:end="291:10">tcp_fd</name> <operator pos:start="291:12" pos:end="291:12">=</operator> <call pos:start="291:14" pos:end="291:41"><name pos:start="291:14" pos:end="291:32">url_get_file_handle</name><argument_list pos:start="291:33" pos:end="291:41">(<argument pos:start="291:34" pos:end="291:40"><expr pos:start="291:34" pos:end="291:40"><name pos:start="291:34" pos:end="291:40">rtsp_hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:66">(<expr pos:start="293:9" pos:end="293:65"><operator pos:start="293:9" pos:end="293:9">!</operator><call pos:start="293:10" pos:end="293:65"><name pos:start="293:10" pos:end="293:20">getpeername</name><argument_list pos:start="293:21" pos:end="293:65">(<argument pos:start="293:22" pos:end="293:27"><expr pos:start="293:22" pos:end="293:27"><name pos:start="293:22" pos:end="293:27">tcp_fd</name></expr></argument>, <argument pos:start="293:30" pos:end="293:53"><expr pos:start="293:30" pos:end="293:53"><operator pos:start="293:30" pos:end="293:30">(</operator>struct <name pos:start="293:38" pos:end="293:45">sockaddr</name><operator pos:start="293:46" pos:end="293:46">*</operator><operator pos:start="293:47" pos:end="293:47">)</operator> <operator pos:start="293:49" pos:end="293:49">&amp;</operator><name pos:start="293:50" pos:end="293:53">peer</name></expr></argument>, <argument pos:start="293:56" pos:end="293:64"><expr pos:start="293:56" pos:end="293:64"><operator pos:start="293:56" pos:end="293:56">&amp;</operator><name pos:start="293:57" pos:end="293:64">peer_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="293:68" pos:end="299:5">{<block_content pos:start="295:9" pos:end="297:45">

        <expr_stmt pos:start="295:9" pos:end="297:45"><expr pos:start="295:9" pos:end="297:44"><call pos:start="295:9" pos:end="297:44"><name pos:start="295:9" pos:end="295:19">getnameinfo</name><argument_list pos:start="295:20" pos:end="297:44">(<argument pos:start="295:21" pos:end="295:44"><expr pos:start="295:21" pos:end="295:44"><operator pos:start="295:21" pos:end="295:21">(</operator>struct <name pos:start="295:29" pos:end="295:36">sockaddr</name><operator pos:start="295:37" pos:end="295:37">*</operator><operator pos:start="295:38" pos:end="295:38">)</operator> <operator pos:start="295:40" pos:end="295:40">&amp;</operator><name pos:start="295:41" pos:end="295:44">peer</name></expr></argument>, <argument pos:start="295:47" pos:end="295:54"><expr pos:start="295:47" pos:end="295:54"><name pos:start="295:47" pos:end="295:54">peer_len</name></expr></argument>, <argument pos:start="295:57" pos:end="295:60"><expr pos:start="295:57" pos:end="295:60"><name pos:start="295:57" pos:end="295:60">host</name></expr></argument>, <argument pos:start="295:63" pos:end="295:74"><expr pos:start="295:63" pos:end="295:74"><sizeof pos:start="295:63" pos:end="295:74">sizeof<argument_list pos:start="295:69" pos:end="295:74">(<argument pos:start="295:70" pos:end="295:73"><expr pos:start="295:70" pos:end="295:73"><name pos:start="295:70" pos:end="295:73">host</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                    <argument pos:start="297:21" pos:end="297:24"><expr pos:start="297:21" pos:end="297:24"><name pos:start="297:21" pos:end="297:24">NULL</name></expr></argument>, <argument pos:start="297:27" pos:end="297:27"><expr pos:start="297:27" pos:end="297:27"><literal type="number" pos:start="297:27" pos:end="297:27">0</literal></expr></argument>, <argument pos:start="297:30" pos:end="297:43"><expr pos:start="297:30" pos:end="297:43"><name pos:start="297:30" pos:end="297:43">NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="303:5" pos:end="305:14">/* request options supported by the server; this also detects server

     * type */</comment>

    <for pos:start="307:5" pos:end="373:5">for <control pos:start="307:9" pos:end="307:45">(<init pos:start="307:10" pos:end="307:43"><expr pos:start="307:10" pos:end="307:42"><name pos:start="307:10" pos:end="307:24"><name pos:start="307:10" pos:end="307:11">rt</name><operator pos:start="307:12" pos:end="307:13">-&gt;</operator><name pos:start="307:14" pos:end="307:24">server_type</name></name> <operator pos:start="307:26" pos:end="307:26">=</operator> <name pos:start="307:28" pos:end="307:42">RTSP_SERVER_RTP</name></expr>;</init><condition pos:start="307:44" pos:end="307:44">;</condition><incr/>)</control> <block pos:start="307:47" pos:end="373:5">{<block_content pos:start="309:9" pos:end="371:14">

        <expr_stmt pos:start="309:9" pos:end="309:19"><expr pos:start="309:9" pos:end="309:18"><name pos:start="309:9" pos:end="309:14"><name pos:start="309:9" pos:end="309:11">cmd</name><index pos:start="309:12" pos:end="309:14">[<expr pos:start="309:13" pos:end="309:13"><literal type="number" pos:start="309:13" pos:end="309:13">0</literal></expr>]</index></name> <operator pos:start="309:16" pos:end="309:16">=</operator> <literal type="number" pos:start="309:18" pos:end="309:18">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="311:9" pos:end="341:36"><if pos:start="311:9" pos:end="341:36">if <condition pos:start="311:12" pos:end="311:48">(<expr pos:start="311:13" pos:end="311:47"><name pos:start="311:13" pos:end="311:27"><name pos:start="311:13" pos:end="311:14">rt</name><operator pos:start="311:15" pos:end="311:16">-&gt;</operator><name pos:start="311:17" pos:end="311:27">server_type</name></name> <operator pos:start="311:29" pos:end="311:30">==</operator> <name pos:start="311:32" pos:end="311:47">RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo" pos:start="313:13" pos:end="341:36"><block_content pos:start="313:13" pos:end="341:36">

            <expr_stmt pos:start="313:13" pos:end="341:36"><expr pos:start="313:13" pos:end="341:35"><call pos:start="313:13" pos:end="341:35"><name pos:start="313:13" pos:end="313:22">av_strlcat</name><argument_list pos:start="313:23" pos:end="341:35">(<argument pos:start="313:24" pos:end="313:26"><expr pos:start="313:24" pos:end="313:26"><name pos:start="313:24" pos:end="313:26">cmd</name></expr></argument>,

                       <comment type="block" format="doxygen" pos:start="315:24" pos:end="331:26">/**

                        * The following entries are required for proper

                        * streaming from a Realmedia server. They are

                        * interdependent in some way although we currently

                        * don't quite understand how. Values were copied

                        * from mplayer SVN r23589.

                        * @param CompanyID is a 16-byte ID in base64

                        * @param ClientChallenge is a 16-byte ID in hex

                        */</comment>

                       <argument pos:start="333:24" pos:end="339:71"><expr pos:start="333:24" pos:end="339:71"><literal type="string" pos:start="333:24" pos:end="333:78">"ClientChallenge: 9e26d33f2984236010ef6253fb1887f7\r\n"</literal>

                       <literal type="string" pos:start="335:24" pos:end="335:73">"PlayerStarttime: [28/03/2003:22:50:23 00:00]\r\n"</literal>

                       <literal type="string" pos:start="337:24" pos:end="337:64">"CompanyID: KnKV4M4I/B2FjJ1TToLycw==\r\n"</literal>

                       <literal type="string" pos:start="339:24" pos:end="339:71">"GUID: 00000000-0000-0000-0000-000000000000\r\n"</literal></expr></argument>,

                       <argument pos:start="341:24" pos:end="341:34"><expr pos:start="341:24" pos:end="341:34"><sizeof pos:start="341:24" pos:end="341:34">sizeof<argument_list pos:start="341:30" pos:end="341:34">(<argument pos:start="341:31" pos:end="341:33"><expr pos:start="341:31" pos:end="341:33"><name pos:start="341:31" pos:end="341:33">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:74"><expr pos:start="343:9" pos:end="343:73"><call pos:start="343:9" pos:end="343:73"><name pos:start="343:9" pos:end="343:24">ff_rtsp_send_cmd</name><argument_list pos:start="343:25" pos:end="343:73">(<argument pos:start="343:26" pos:end="343:26"><expr pos:start="343:26" pos:end="343:26"><name pos:start="343:26" pos:end="343:26">s</name></expr></argument>, <argument pos:start="343:29" pos:end="343:37"><expr pos:start="343:29" pos:end="343:37"><literal type="string" pos:start="343:29" pos:end="343:37">"OPTIONS"</literal></expr></argument>, <argument pos:start="343:40" pos:end="343:54"><expr pos:start="343:40" pos:end="343:54"><name pos:start="343:40" pos:end="343:54"><name pos:start="343:40" pos:end="343:41">rt</name><operator pos:start="343:42" pos:end="343:43">-&gt;</operator><name pos:start="343:44" pos:end="343:54">control_uri</name></name></expr></argument>, <argument pos:start="343:57" pos:end="343:59"><expr pos:start="343:57" pos:end="343:59"><name pos:start="343:57" pos:end="343:59">cmd</name></expr></argument>, <argument pos:start="343:62" pos:end="343:66"><expr pos:start="343:62" pos:end="343:66"><name pos:start="343:62" pos:end="343:66">reply</name></expr></argument>, <argument pos:start="343:69" pos:end="343:72"><expr pos:start="343:69" pos:end="343:72"><name pos:start="343:69" pos:end="343:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="345:9" pos:end="351:9"><if pos:start="345:9" pos:end="351:9">if <condition pos:start="345:12" pos:end="345:49">(<expr pos:start="345:13" pos:end="345:48"><name pos:start="345:13" pos:end="345:30"><name pos:start="345:13" pos:end="345:17">reply</name><operator pos:start="345:18" pos:end="345:19">-&gt;</operator><name pos:start="345:20" pos:end="345:30">status_code</name></name> <operator pos:start="345:32" pos:end="345:33">!=</operator> <name pos:start="345:35" pos:end="345:48">RTSP_STATUS_OK</name></expr>)</condition> <block pos:start="345:51" pos:end="351:9">{<block_content pos:start="347:13" pos:end="349:22">

            <expr_stmt pos:start="347:13" pos:end="347:38"><expr pos:start="347:13" pos:end="347:37"><name pos:start="347:13" pos:end="347:15">err</name> <operator pos:start="347:17" pos:end="347:17">=</operator> <name pos:start="347:19" pos:end="347:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="349:13" pos:end="349:22">goto <name pos:start="349:18" pos:end="349:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="355:9" pos:end="355:62">/* detect server type if not standard-compliant RTP */</comment>

        <if_stmt pos:start="357:9" pos:end="369:58"><if pos:start="357:9" pos:end="363:9">if <condition pos:start="357:12" pos:end="357:76">(<expr pos:start="357:13" pos:end="357:75"><name pos:start="357:13" pos:end="357:27"><name pos:start="357:13" pos:end="357:14">rt</name><operator pos:start="357:15" pos:end="357:16">-&gt;</operator><name pos:start="357:17" pos:end="357:27">server_type</name></name> <operator pos:start="357:29" pos:end="357:30">!=</operator> <name pos:start="357:32" pos:end="357:47">RTSP_SERVER_REAL</name> <operator pos:start="357:49" pos:end="357:50">&amp;&amp;</operator> <name pos:start="357:52" pos:end="357:75"><name pos:start="357:52" pos:end="357:56">reply</name><operator pos:start="357:57" pos:end="357:58">-&gt;</operator><name pos:start="357:59" pos:end="357:72">real_challenge</name><index pos:start="357:73" pos:end="357:75">[<expr pos:start="357:74" pos:end="357:74"><literal type="number" pos:start="357:74" pos:end="357:74">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="357:78" pos:end="363:9">{<block_content pos:start="359:13" pos:end="361:21">

            <expr_stmt pos:start="359:13" pos:end="359:47"><expr pos:start="359:13" pos:end="359:46"><name pos:start="359:13" pos:end="359:27"><name pos:start="359:13" pos:end="359:14">rt</name><operator pos:start="359:15" pos:end="359:16">-&gt;</operator><name pos:start="359:17" pos:end="359:27">server_type</name></name> <operator pos:start="359:29" pos:end="359:29">=</operator> <name pos:start="359:31" pos:end="359:46">RTSP_SERVER_REAL</name></expr>;</expr_stmt>

            <continue pos:start="361:13" pos:end="361:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="363:11" pos:end="367:9">else if <condition pos:start="363:19" pos:end="363:63">(<expr pos:start="363:20" pos:end="363:62"><operator pos:start="363:20" pos:end="363:20">!</operator><call pos:start="363:21" pos:end="363:62"><name pos:start="363:21" pos:end="363:31">strncasecmp</name><argument_list pos:start="363:32" pos:end="363:62">(<argument pos:start="363:33" pos:end="363:45"><expr pos:start="363:33" pos:end="363:45"><name pos:start="363:33" pos:end="363:45"><name pos:start="363:33" pos:end="363:37">reply</name><operator pos:start="363:38" pos:end="363:39">-&gt;</operator><name pos:start="363:40" pos:end="363:45">server</name></name></expr></argument>, <argument pos:start="363:48" pos:end="363:58"><expr pos:start="363:48" pos:end="363:58"><literal type="string" pos:start="363:48" pos:end="363:58">"WMServer/"</literal></expr></argument>, <argument pos:start="363:61" pos:end="363:61"><expr pos:start="363:61" pos:end="363:61"><literal type="number" pos:start="363:61" pos:end="363:61">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="363:65" pos:end="367:9">{<block_content pos:start="365:13" pos:end="365:46">

            <expr_stmt pos:start="365:13" pos:end="365:46"><expr pos:start="365:13" pos:end="365:45"><name pos:start="365:13" pos:end="365:27"><name pos:start="365:13" pos:end="365:14">rt</name><operator pos:start="365:15" pos:end="365:16">-&gt;</operator><name pos:start="365:17" pos:end="365:27">server_type</name></name> <operator pos:start="365:29" pos:end="365:29">=</operator> <name pos:start="365:31" pos:end="365:45">RTSP_SERVER_WMS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="367:11" pos:end="369:58">else if <condition pos:start="367:19" pos:end="367:55">(<expr pos:start="367:20" pos:end="367:54"><name pos:start="367:20" pos:end="367:34"><name pos:start="367:20" pos:end="367:21">rt</name><operator pos:start="367:22" pos:end="367:23">-&gt;</operator><name pos:start="367:24" pos:end="367:34">server_type</name></name> <operator pos:start="367:36" pos:end="367:37">==</operator> <name pos:start="367:39" pos:end="367:54">RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo" pos:start="369:13" pos:end="369:58"><block_content pos:start="369:13" pos:end="369:58">

            <expr_stmt pos:start="369:13" pos:end="369:58"><expr pos:start="369:13" pos:end="369:57"><call pos:start="369:13" pos:end="369:57"><name pos:start="369:13" pos:end="369:18">strcpy</name><argument_list pos:start="369:19" pos:end="369:57">(<argument pos:start="369:20" pos:end="369:33"><expr pos:start="369:20" pos:end="369:33"><name pos:start="369:20" pos:end="369:33">real_challenge</name></expr></argument>, <argument pos:start="369:36" pos:end="369:56"><expr pos:start="369:36" pos:end="369:56"><name pos:start="369:36" pos:end="369:56"><name pos:start="369:36" pos:end="369:40">reply</name><operator pos:start="369:41" pos:end="369:42">-&gt;</operator><name pos:start="369:43" pos:end="369:56">real_challenge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="371:9" pos:end="371:14">break;</break>

    </block_content>}</block></for>



    <if_stmt pos:start="377:5" pos:end="383:49"><if pos:start="377:5" pos:end="379:49">if <condition pos:start="377:8" pos:end="377:19">(<expr pos:start="377:9" pos:end="377:18"><name pos:start="377:9" pos:end="377:18"><name pos:start="377:9" pos:end="377:9">s</name><operator pos:start="377:10" pos:end="377:11">-&gt;</operator><name pos:start="377:12" pos:end="377:18">iformat</name></name></expr>)</condition><block type="pseudo" pos:start="379:9" pos:end="379:49"><block_content pos:start="379:9" pos:end="379:49">

        <expr_stmt pos:start="379:9" pos:end="379:49"><expr pos:start="379:9" pos:end="379:48"><name pos:start="379:9" pos:end="379:11">err</name> <operator pos:start="379:13" pos:end="379:13">=</operator> <call pos:start="379:15" pos:end="379:48"><name pos:start="379:15" pos:end="379:38">rtsp_setup_input_streams</name><argument_list pos:start="379:39" pos:end="379:48">(<argument pos:start="379:40" pos:end="379:40"><expr pos:start="379:40" pos:end="379:40"><name pos:start="379:40" pos:end="379:40">s</name></expr></argument>, <argument pos:start="379:43" pos:end="379:47"><expr pos:start="379:43" pos:end="379:47"><name pos:start="379:43" pos:end="379:47">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="381:5" pos:end="383:49">else<block type="pseudo" pos:start="383:9" pos:end="383:49"><block_content pos:start="383:9" pos:end="383:49">

        <expr_stmt pos:start="383:9" pos:end="383:49"><expr pos:start="383:9" pos:end="383:48"><name pos:start="383:9" pos:end="383:11">err</name> <operator pos:start="383:13" pos:end="383:13">=</operator> <call pos:start="383:15" pos:end="383:48"><name pos:start="383:15" pos:end="383:39">rtsp_setup_output_streams</name><argument_list pos:start="383:40" pos:end="383:48">(<argument pos:start="383:41" pos:end="383:41"><expr pos:start="383:41" pos:end="383:41"><name pos:start="383:41" pos:end="383:41">s</name></expr></argument>, <argument pos:start="383:44" pos:end="383:47"><expr pos:start="383:44" pos:end="383:47"><name pos:start="383:44" pos:end="383:47">host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="385:5" pos:end="387:18"><if pos:start="385:5" pos:end="387:18">if <condition pos:start="385:8" pos:end="385:12">(<expr pos:start="385:9" pos:end="385:11"><name pos:start="385:9" pos:end="385:11">err</name></expr>)</condition><block type="pseudo" pos:start="387:9" pos:end="387:18"><block_content pos:start="387:9" pos:end="387:18">

        <goto pos:start="387:9" pos:end="387:18">goto <name pos:start="387:14" pos:end="387:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <do pos:start="391:5" pos:end="419:18">do <block pos:start="391:8" pos:end="419:5">{<block_content pos:start="393:9" pos:end="417:9">

        <decl_stmt pos:start="393:9" pos:end="395:63"><decl pos:start="393:9" pos:end="395:62"><type pos:start="393:9" pos:end="393:11"><name pos:start="393:9" pos:end="393:11">int</name></type> <name pos:start="393:13" pos:end="393:27">lower_transport</name> <init pos:start="393:29" pos:end="395:62">= <expr pos:start="393:31" pos:end="395:62"><name pos:start="393:31" pos:end="395:62"><name pos:start="393:31" pos:end="393:41">ff_log2_tab</name><index pos:start="393:42" pos:end="395:62">[<expr pos:start="393:43" pos:end="395:61"><name pos:start="393:43" pos:end="393:62">lower_transport_mask</name> <operator pos:start="393:64" pos:end="393:64">&amp;</operator>

                                  <operator pos:start="395:35" pos:end="395:35">~</operator><operator pos:start="395:36" pos:end="395:36">(</operator><name pos:start="395:37" pos:end="395:56">lower_transport_mask</name> <operator pos:start="395:58" pos:end="395:58">-</operator> <literal type="number" pos:start="395:60" pos:end="395:60">1</literal><operator pos:start="395:61" pos:end="395:61">)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="399:9" pos:end="403:60"><expr pos:start="399:9" pos:end="403:59"><name pos:start="399:9" pos:end="399:11">err</name> <operator pos:start="399:13" pos:end="399:13">=</operator> <call pos:start="399:15" pos:end="403:59"><name pos:start="399:15" pos:end="399:32">make_setup_request</name><argument_list pos:start="399:33" pos:end="403:59">(<argument pos:start="399:34" pos:end="399:34"><expr pos:start="399:34" pos:end="399:34"><name pos:start="399:34" pos:end="399:34">s</name></expr></argument>, <argument pos:start="399:37" pos:end="399:40"><expr pos:start="399:37" pos:end="399:40"><name pos:start="399:37" pos:end="399:40">host</name></expr></argument>, <argument pos:start="399:43" pos:end="399:46"><expr pos:start="399:43" pos:end="399:46"><name pos:start="399:43" pos:end="399:46">port</name></expr></argument>, <argument pos:start="399:49" pos:end="399:63"><expr pos:start="399:49" pos:end="399:63"><name pos:start="399:49" pos:end="399:63">lower_transport</name></expr></argument>,

                                 <argument pos:start="401:34" pos:end="403:58"><expr pos:start="401:34" pos:end="403:58"><ternary pos:start="401:34" pos:end="403:58"><condition pos:start="401:34" pos:end="401:70"><expr pos:start="401:34" pos:end="401:68"><name pos:start="401:34" pos:end="401:48"><name pos:start="401:34" pos:end="401:35">rt</name><operator pos:start="401:36" pos:end="401:37">-&gt;</operator><name pos:start="401:38" pos:end="401:48">server_type</name></name> <operator pos:start="401:50" pos:end="401:51">==</operator> <name pos:start="401:53" pos:end="401:68">RTSP_SERVER_REAL</name></expr> ?</condition><then pos:start="403:38" pos:end="403:51">

                                     <expr pos:start="403:38" pos:end="403:51"><name pos:start="403:38" pos:end="403:51">real_challenge</name></expr> </then><else pos:start="403:53" pos:end="403:58">: <expr pos:start="403:55" pos:end="403:58"><name pos:start="403:55" pos:end="403:58">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="405:9" pos:end="407:22"><if pos:start="405:9" pos:end="407:22">if <condition pos:start="405:12" pos:end="405:20">(<expr pos:start="405:13" pos:end="405:19"><name pos:start="405:13" pos:end="405:15">err</name> <operator pos:start="405:17" pos:end="405:17">&lt;</operator> <literal type="number" pos:start="405:19" pos:end="405:19">0</literal></expr>)</condition><block type="pseudo" pos:start="407:13" pos:end="407:22"><block_content pos:start="407:13" pos:end="407:22">

            <goto pos:start="407:13" pos:end="407:22">goto <name pos:start="407:18" pos:end="407:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="409:9" pos:end="409:56"><expr pos:start="409:9" pos:end="409:55"><name pos:start="409:9" pos:end="409:28">lower_transport_mask</name> <operator pos:start="409:30" pos:end="409:31">&amp;=</operator> <operator pos:start="409:33" pos:end="409:33">~</operator><operator pos:start="409:34" pos:end="409:34">(</operator><literal type="number" pos:start="409:35" pos:end="409:35">1</literal> <operator pos:start="409:37" pos:end="409:38">&lt;&lt;</operator> <name pos:start="409:40" pos:end="409:54">lower_transport</name><operator pos:start="409:55" pos:end="409:55">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="411:9" pos:end="417:9"><if pos:start="411:9" pos:end="417:9">if <condition pos:start="411:12" pos:end="411:50">(<expr pos:start="411:13" pos:end="411:49"><name pos:start="411:13" pos:end="411:32">lower_transport_mask</name> <operator pos:start="411:34" pos:end="411:35">==</operator> <literal type="number" pos:start="411:37" pos:end="411:37">0</literal> <operator pos:start="411:39" pos:end="411:40">&amp;&amp;</operator> <name pos:start="411:42" pos:end="411:44">err</name> <operator pos:start="411:46" pos:end="411:47">==</operator> <literal type="number" pos:start="411:49" pos:end="411:49">1</literal></expr>)</condition> <block pos:start="411:52" pos:end="417:9">{<block_content pos:start="413:13" pos:end="415:22">

            <expr_stmt pos:start="413:13" pos:end="413:47"><expr pos:start="413:13" pos:end="413:46"><name pos:start="413:13" pos:end="413:15">err</name> <operator pos:start="413:17" pos:end="413:17">=</operator> <call pos:start="413:19" pos:end="413:46"><name pos:start="413:19" pos:end="413:29">FF_NETERROR</name><argument_list pos:start="413:30" pos:end="413:46">(<argument pos:start="413:31" pos:end="413:45"><expr pos:start="413:31" pos:end="413:45"><name pos:start="413:31" pos:end="413:45">EPROTONOSUPPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="415:13" pos:end="415:22">goto <name pos:start="415:18" pos:end="415:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="419:13" pos:end="419:17">(<expr pos:start="419:14" pos:end="419:16"><name pos:start="419:14" pos:end="419:16">err</name></expr>)</condition>;</do>



    <expr_stmt pos:start="423:5" pos:end="423:32"><expr pos:start="423:5" pos:end="423:31"><name pos:start="423:5" pos:end="423:13"><name pos:start="423:5" pos:end="423:6">rt</name><operator pos:start="423:7" pos:end="423:8">-&gt;</operator><name pos:start="423:9" pos:end="423:13">state</name></name> <operator pos:start="423:15" pos:end="423:15">=</operator> <name pos:start="423:17" pos:end="423:31">RTSP_STATE_IDLE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:27"><expr pos:start="425:5" pos:end="425:26"><name pos:start="425:5" pos:end="425:22"><name pos:start="425:5" pos:end="425:6">rt</name><operator pos:start="425:7" pos:end="425:8">-&gt;</operator><name pos:start="425:9" pos:end="425:22">seek_timestamp</name></name> <operator pos:start="425:24" pos:end="425:24">=</operator> <literal type="number" pos:start="425:26" pos:end="425:26">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="425:29" pos:end="425:77">/* default is to start stream at position zero */</comment>

    <return pos:start="427:5" pos:end="427:13">return <expr pos:start="427:12" pos:end="427:12"><literal type="number" pos:start="427:12" pos:end="427:12">0</literal></expr>;</return>

 <label pos:start="429:2" pos:end="429:6"><name pos:start="429:2" pos:end="429:5">fail</name>:</label>

    <expr_stmt pos:start="431:5" pos:end="431:29"><expr pos:start="431:5" pos:end="431:28"><call pos:start="431:5" pos:end="431:28"><name pos:start="431:5" pos:end="431:25">ff_rtsp_close_streams</name><argument_list pos:start="431:26" pos:end="431:28">(<argument pos:start="431:27" pos:end="431:27"><expr pos:start="431:27" pos:end="431:27"><name pos:start="431:27" pos:end="431:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:33"><expr pos:start="433:5" pos:end="433:32"><call pos:start="433:5" pos:end="433:32"><name pos:start="433:5" pos:end="433:29">ff_rtsp_close_connections</name><argument_list pos:start="433:30" pos:end="433:32">(<argument pos:start="433:31" pos:end="433:31"><expr pos:start="433:31" pos:end="433:31"><name pos:start="433:31" pos:end="433:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="435:5" pos:end="447:5"><if pos:start="435:5" pos:end="447:5">if <condition pos:start="435:8" pos:end="435:75">(<expr pos:start="435:9" pos:end="435:74"><name pos:start="435:9" pos:end="435:26"><name pos:start="435:9" pos:end="435:13">reply</name><operator pos:start="435:14" pos:end="435:15">-&gt;</operator><name pos:start="435:16" pos:end="435:26">status_code</name></name> <operator pos:start="435:28" pos:end="435:29">&gt;=</operator><literal type="number" pos:start="435:30" pos:end="435:32">300</literal> <operator pos:start="435:34" pos:end="435:35">&amp;&amp;</operator> <name pos:start="435:37" pos:end="435:54"><name pos:start="435:37" pos:end="435:41">reply</name><operator pos:start="435:42" pos:end="435:43">-&gt;</operator><name pos:start="435:44" pos:end="435:54">status_code</name></name> <operator pos:start="435:56" pos:end="435:56">&lt;</operator> <literal type="number" pos:start="435:58" pos:end="435:60">400</literal> <operator pos:start="435:62" pos:end="435:63">&amp;&amp;</operator> <name pos:start="435:65" pos:end="435:74"><name pos:start="435:65" pos:end="435:65">s</name><operator pos:start="435:66" pos:end="435:67">-&gt;</operator><name pos:start="435:68" pos:end="435:74">iformat</name></name></expr>)</condition> <block pos:start="435:77" pos:end="447:5">{<block_content pos:start="437:9" pos:end="445:22">

        <expr_stmt pos:start="437:9" pos:end="437:70"><expr pos:start="437:9" pos:end="437:69"><call pos:start="437:9" pos:end="437:69"><name pos:start="437:9" pos:end="437:18">av_strlcpy</name><argument_list pos:start="437:19" pos:end="437:69">(<argument pos:start="437:20" pos:end="437:30"><expr pos:start="437:20" pos:end="437:30"><name pos:start="437:20" pos:end="437:30"><name pos:start="437:20" pos:end="437:20">s</name><operator pos:start="437:21" pos:end="437:22">-&gt;</operator><name pos:start="437:23" pos:end="437:30">filename</name></name></expr></argument>, <argument pos:start="437:33" pos:end="437:47"><expr pos:start="437:33" pos:end="437:47"><name pos:start="437:33" pos:end="437:47"><name pos:start="437:33" pos:end="437:37">reply</name><operator pos:start="437:38" pos:end="437:39">-&gt;</operator><name pos:start="437:40" pos:end="437:47">location</name></name></expr></argument>, <argument pos:start="437:50" pos:end="437:68"><expr pos:start="437:50" pos:end="437:68"><sizeof pos:start="437:50" pos:end="437:68">sizeof<argument_list pos:start="437:56" pos:end="437:68">(<argument pos:start="437:57" pos:end="437:67"><expr pos:start="437:57" pos:end="437:67"><name pos:start="437:57" pos:end="437:67"><name pos:start="437:57" pos:end="437:57">s</name><operator pos:start="437:58" pos:end="437:59">-&gt;</operator><name pos:start="437:60" pos:end="437:67">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="439:9" pos:end="443:28"><expr pos:start="439:9" pos:end="443:27"><call pos:start="439:9" pos:end="443:27"><name pos:start="439:9" pos:end="439:14">av_log</name><argument_list pos:start="439:15" pos:end="443:27">(<argument pos:start="439:16" pos:end="439:16"><expr pos:start="439:16" pos:end="439:16"><name pos:start="439:16" pos:end="439:16">s</name></expr></argument>, <argument pos:start="439:19" pos:end="439:29"><expr pos:start="439:19" pos:end="439:29"><name pos:start="439:19" pos:end="439:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="439:32" pos:end="439:63"><expr pos:start="439:32" pos:end="439:63"><literal type="string" pos:start="439:32" pos:end="439:63">"Status %d: Redirecting to %s\n"</literal></expr></argument>,

               <argument pos:start="441:16" pos:end="441:33"><expr pos:start="441:16" pos:end="441:33"><name pos:start="441:16" pos:end="441:33"><name pos:start="441:16" pos:end="441:20">reply</name><operator pos:start="441:21" pos:end="441:22">-&gt;</operator><name pos:start="441:23" pos:end="441:33">status_code</name></name></expr></argument>,

               <argument pos:start="443:16" pos:end="443:26"><expr pos:start="443:16" pos:end="443:26"><name pos:start="443:16" pos:end="443:26"><name pos:start="443:16" pos:end="443:16">s</name><operator pos:start="443:17" pos:end="443:18">-&gt;</operator><name pos:start="443:19" pos:end="443:26">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="445:9" pos:end="445:22">goto <name pos:start="445:14" pos:end="445:21">redirect</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="449:5" pos:end="449:23"><expr pos:start="449:5" pos:end="449:22"><call pos:start="449:5" pos:end="449:22"><name pos:start="449:5" pos:end="449:20">ff_network_close</name><argument_list pos:start="449:21" pos:end="449:22">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="451:5" pos:end="451:15">return <expr pos:start="451:12" pos:end="451:14"><name pos:start="451:12" pos:end="451:14">err</name></expr>;</return>

</block_content>}</block></function></unit>
