<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14960.c" pos:tabs="8"><function pos:start="1:1" pos:end="307:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">arm_sysctl_write</name><parameter_list pos:start="1:29" pos:end="3:57">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:68"><decl pos:start="1:44" pos:end="1:68"><type pos:start="1:44" pos:end="1:68"><name pos:start="1:44" pos:end="1:61">target_phys_addr_t</name></type> <name pos:start="1:63" pos:end="1:68">offset</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:41">val</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:56"><decl pos:start="3:44" pos:end="3:56"><type pos:start="3:44" pos:end="3:56"><name pos:start="3:44" pos:end="3:51">unsigned</name></type> <name pos:start="3:53" pos:end="3:56">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="307:1">{<block_content pos:start="7:5" pos:end="305:5">

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">arm_sysctl_state</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:23">s</name> <init pos:start="7:25" pos:end="7:52">= <expr pos:start="7:27" pos:end="7:52"><operator pos:start="7:27" pos:end="7:27">(</operator><name pos:start="7:28" pos:end="7:43">arm_sysctl_state</name> <operator pos:start="7:45" pos:end="7:45">*</operator><operator pos:start="7:46" pos:end="7:46">)</operator><name pos:start="7:47" pos:end="7:52">opaque</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="305:5">switch <condition pos:start="11:12" pos:end="11:19">(<expr pos:start="11:13" pos:end="11:18"><name pos:start="11:13" pos:end="11:18">offset</name></expr>)</condition> <block pos:start="11:21" pos:end="305:5">{<block_content pos:start="13:5" pos:end="303:15">

    <case pos:start="13:5" pos:end="13:14">case <expr pos:start="13:10" pos:end="13:13"><literal type="number" pos:start="13:10" pos:end="13:13">0x08</literal></expr>:</case> <comment type="block" pos:start="13:16" pos:end="13:24">/* LED */</comment>

        <expr_stmt pos:start="15:9" pos:end="15:22"><expr pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:15">leds</name></name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:21">val</name></expr>;</expr_stmt>

    <case pos:start="17:5" pos:end="17:14">case <expr pos:start="17:10" pos:end="17:13"><literal type="number" pos:start="17:10" pos:end="17:13">0x0c</literal></expr>:</case> <comment type="block" pos:start="17:16" pos:end="17:25">/* OSC0 */</comment>

    <case pos:start="19:5" pos:end="19:14">case <expr pos:start="19:10" pos:end="19:13"><literal type="number" pos:start="19:10" pos:end="19:13">0x10</literal></expr>:</case> <comment type="block" pos:start="19:16" pos:end="19:25">/* OSC1 */</comment>

    <case pos:start="21:5" pos:end="21:14">case <expr pos:start="21:10" pos:end="21:13"><literal type="number" pos:start="21:10" pos:end="21:13">0x14</literal></expr>:</case> <comment type="block" pos:start="21:16" pos:end="21:25">/* OSC2 */</comment>

    <case pos:start="23:5" pos:end="23:14">case <expr pos:start="23:10" pos:end="23:13"><literal type="number" pos:start="23:10" pos:end="23:13">0x18</literal></expr>:</case> <comment type="block" pos:start="23:16" pos:end="23:25">/* OSC3 */</comment>

    <case pos:start="25:5" pos:end="25:14">case <expr pos:start="25:10" pos:end="25:13"><literal type="number" pos:start="25:10" pos:end="25:13">0x1c</literal></expr>:</case> <comment type="block" pos:start="25:16" pos:end="25:25">/* OSC4 */</comment>

        <comment type="block" pos:start="27:9" pos:end="27:17">/* ??? */</comment>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:14">case <expr pos:start="31:10" pos:end="31:13"><literal type="number" pos:start="31:10" pos:end="31:13">0x20</literal></expr>:</case> <comment type="block" pos:start="31:16" pos:end="31:25">/* LOCK */</comment>

        <if_stmt pos:start="33:9" pos:end="39:38"><if pos:start="33:9" pos:end="35:29">if <condition pos:start="33:12" pos:end="33:30">(<expr pos:start="33:13" pos:end="33:29"><name pos:start="33:13" pos:end="33:15">val</name> <operator pos:start="33:17" pos:end="33:18">==</operator> <name pos:start="33:20" pos:end="33:29">LOCK_VALUE</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:29"><block_content pos:start="35:13" pos:end="35:29">

            <expr_stmt pos:start="35:13" pos:end="35:29"><expr pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:22">lockval</name></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <name pos:start="35:26" pos:end="35:28">val</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="37:9" pos:end="39:38">else<block type="pseudo" pos:start="39:13" pos:end="39:38"><block_content pos:start="39:13" pos:end="39:38">

            <expr_stmt pos:start="39:13" pos:end="39:38"><expr pos:start="39:13" pos:end="39:37"><name pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:22">lockval</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:28">val</name> <operator pos:start="39:30" pos:end="39:30">&amp;</operator> <literal type="number" pos:start="39:32" pos:end="39:37">0x7fff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:14">case <expr pos:start="43:10" pos:end="43:13"><literal type="number" pos:start="43:10" pos:end="43:13">0x28</literal></expr>:</case> <comment type="block" pos:start="43:16" pos:end="43:29">/* CFGDATA1 */</comment>

        <comment type="block" pos:start="45:9" pos:end="45:42">/* ??? Need to implement this.  */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:26"><expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:19">cfgdata1</name></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <name pos:start="47:23" pos:end="47:25">val</name></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:14">case <expr pos:start="51:10" pos:end="51:13"><literal type="number" pos:start="51:10" pos:end="51:13">0x2c</literal></expr>:</case> <comment type="block" pos:start="51:16" pos:end="51:29">/* CFGDATA2 */</comment>

        <comment type="block" pos:start="53:9" pos:end="53:42">/* ??? Need to implement this.  */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:19">cfgdata2</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:25">val</name></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:14">case <expr pos:start="59:10" pos:end="59:13"><literal type="number" pos:start="59:10" pos:end="59:13">0x30</literal></expr>:</case> <comment type="block" pos:start="59:16" pos:end="59:29">/* FLAGSSET */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:24"><expr pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:16">flags</name></name> <operator pos:start="61:18" pos:end="61:19">|=</operator> <name pos:start="61:21" pos:end="61:23">val</name></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:14">case <expr pos:start="65:10" pos:end="65:13"><literal type="number" pos:start="65:10" pos:end="65:13">0x34</literal></expr>:</case> <comment type="block" pos:start="65:16" pos:end="65:29">/* FLAGSCLR */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:25"><expr pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:16">flags</name></name> <operator pos:start="67:18" pos:end="67:19">&amp;=</operator> <operator pos:start="67:21" pos:end="67:21">~</operator><name pos:start="67:22" pos:end="67:24">val</name></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:14">case <expr pos:start="71:10" pos:end="71:13"><literal type="number" pos:start="71:10" pos:end="71:13">0x38</literal></expr>:</case> <comment type="block" pos:start="71:16" pos:end="71:31">/* NVFLAGSSET */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:18">nvflags</name></name> <operator pos:start="73:20" pos:end="73:21">|=</operator> <name pos:start="73:23" pos:end="73:25">val</name></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:14">case <expr pos:start="77:10" pos:end="77:13"><literal type="number" pos:start="77:10" pos:end="77:13">0x3c</literal></expr>:</case> <comment type="block" pos:start="77:16" pos:end="77:31">/* NVFLAGSCLR */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:27"><expr pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:18">nvflags</name></name> <operator pos:start="79:20" pos:end="79:21">&amp;=</operator> <operator pos:start="79:23" pos:end="79:23">~</operator><name pos:start="79:24" pos:end="79:26">val</name></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:14">case <expr pos:start="83:10" pos:end="83:13"><literal type="number" pos:start="83:10" pos:end="83:13">0x40</literal></expr>:</case> <comment type="block" pos:start="83:16" pos:end="83:29">/* RESETCTL */</comment>

        <switch pos:start="85:9" pos:end="131:9">switch <condition pos:start="85:16" pos:end="85:28">(<expr pos:start="85:17" pos:end="85:27"><call pos:start="85:17" pos:end="85:27"><name pos:start="85:17" pos:end="85:24">board_id</name><argument_list pos:start="85:25" pos:end="85:27">(<argument pos:start="85:26" pos:end="85:26"><expr pos:start="85:26" pos:end="85:26"><name pos:start="85:26" pos:end="85:26">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:30" pos:end="131:9">{<block_content pos:start="87:9" pos:end="129:18">

        <case pos:start="87:9" pos:end="87:28">case <expr pos:start="87:14" pos:end="87:27"><name pos:start="87:14" pos:end="87:27">BOARD_ID_PB926</name></expr>:</case>

            <if_stmt pos:start="89:13" pos:end="99:13"><if pos:start="89:13" pos:end="99:13">if <condition pos:start="89:16" pos:end="89:41">(<expr pos:start="89:17" pos:end="89:40"><name pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:17">s</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:26">lockval</name></name> <operator pos:start="89:28" pos:end="89:29">==</operator> <name pos:start="89:31" pos:end="89:40">LOCK_VALUE</name></expr>)</condition> <block pos:start="89:43" pos:end="99:13">{<block_content pos:start="91:17" pos:end="97:17">

                <expr_stmt pos:start="91:17" pos:end="91:36"><expr pos:start="91:17" pos:end="91:35"><name pos:start="91:17" pos:end="91:29"><name pos:start="91:17" pos:end="91:17">s</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:29">resetlevel</name></name> <operator pos:start="91:31" pos:end="91:31">=</operator> <name pos:start="91:33" pos:end="91:35">val</name></expr>;</expr_stmt>

                <if_stmt pos:start="93:17" pos:end="97:17"><if pos:start="93:17" pos:end="97:17">if <condition pos:start="93:20" pos:end="93:32">(<expr pos:start="93:21" pos:end="93:31"><name pos:start="93:21" pos:end="93:23">val</name> <operator pos:start="93:25" pos:end="93:25">&amp;</operator> <literal type="number" pos:start="93:27" pos:end="93:31">0x100</literal></expr>)</condition> <block pos:start="93:34" pos:end="97:17">{<block_content pos:start="95:21" pos:end="95:48">

                    <expr_stmt pos:start="95:21" pos:end="95:48"><expr pos:start="95:21" pos:end="95:47"><call pos:start="95:21" pos:end="95:47"><name pos:start="95:21" pos:end="95:45">qemu_system_reset_request</name><argument_list pos:start="95:46" pos:end="95:47">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:26">case <expr pos:start="103:14" pos:end="103:25"><name pos:start="103:14" pos:end="103:25">BOARD_ID_PBX</name></expr>:</case>

        <case pos:start="105:9" pos:end="105:27">case <expr pos:start="105:14" pos:end="105:26"><name pos:start="105:14" pos:end="105:26">BOARD_ID_PBA8</name></expr>:</case>

            <if_stmt pos:start="107:13" pos:end="117:13"><if pos:start="107:13" pos:end="117:13">if <condition pos:start="107:16" pos:end="107:41">(<expr pos:start="107:17" pos:end="107:40"><name pos:start="107:17" pos:end="107:26"><name pos:start="107:17" pos:end="107:17">s</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:26">lockval</name></name> <operator pos:start="107:28" pos:end="107:29">==</operator> <name pos:start="107:31" pos:end="107:40">LOCK_VALUE</name></expr>)</condition> <block pos:start="107:43" pos:end="117:13">{<block_content pos:start="109:17" pos:end="115:17">

                <expr_stmt pos:start="109:17" pos:end="109:36"><expr pos:start="109:17" pos:end="109:35"><name pos:start="109:17" pos:end="109:29"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:29">resetlevel</name></name> <operator pos:start="109:31" pos:end="109:31">=</operator> <name pos:start="109:33" pos:end="109:35">val</name></expr>;</expr_stmt>

                <if_stmt pos:start="111:17" pos:end="115:17"><if pos:start="111:17" pos:end="115:17">if <condition pos:start="111:20" pos:end="111:31">(<expr pos:start="111:21" pos:end="111:30"><name pos:start="111:21" pos:end="111:23">val</name> <operator pos:start="111:25" pos:end="111:25">&amp;</operator> <literal type="number" pos:start="111:27" pos:end="111:30">0x04</literal></expr>)</condition> <block pos:start="111:33" pos:end="115:17">{<block_content pos:start="113:21" pos:end="113:48">

                    <expr_stmt pos:start="113:21" pos:end="113:48"><expr pos:start="113:21" pos:end="113:47"><call pos:start="113:21" pos:end="113:47"><name pos:start="113:21" pos:end="113:45">qemu_system_reset_request</name><argument_list pos:start="113:46" pos:end="113:47">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="119:13" pos:end="119:18">break;</break>

        <case pos:start="121:9" pos:end="121:31">case <expr pos:start="121:14" pos:end="121:30"><name pos:start="121:14" pos:end="121:30">BOARD_ID_VEXPRESS</name></expr>:</case>

        <case pos:start="123:9" pos:end="123:25">case <expr pos:start="123:14" pos:end="123:24"><name pos:start="123:14" pos:end="123:24">BOARD_ID_EB</name></expr>:</case>

        <default pos:start="125:9" pos:end="125:16">default:</default>

            <comment type="block" pos:start="127:13" pos:end="127:34">/* reserved: RAZ/WI */</comment>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:14">case <expr pos:start="135:10" pos:end="135:13"><literal type="number" pos:start="135:10" pos:end="135:13">0x44</literal></expr>:</case> <comment type="block" pos:start="135:16" pos:end="135:27">/* PCICTL */</comment>

        <comment type="block" pos:start="137:9" pos:end="137:29">/* nothing to do.  */</comment>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <case pos:start="141:5" pos:end="141:14">case <expr pos:start="141:10" pos:end="141:13"><literal type="number" pos:start="141:10" pos:end="141:13">0x4c</literal></expr>:</case> <comment type="block" pos:start="141:16" pos:end="141:26">/* FLASH */</comment>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:14">case <expr pos:start="145:10" pos:end="145:13"><literal type="number" pos:start="145:10" pos:end="145:13">0x50</literal></expr>:</case> <comment type="block" pos:start="145:16" pos:end="145:25">/* CLCD */</comment>

        <switch pos:start="147:9" pos:end="207:9">switch <condition pos:start="147:16" pos:end="147:28">(<expr pos:start="147:17" pos:end="147:27"><call pos:start="147:17" pos:end="147:27"><name pos:start="147:17" pos:end="147:24">board_id</name><argument_list pos:start="147:25" pos:end="147:27">(<argument pos:start="147:26" pos:end="147:26"><expr pos:start="147:26" pos:end="147:26"><name pos:start="147:26" pos:end="147:26">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:30" pos:end="207:9">{<block_content pos:start="149:9" pos:end="205:18">

        <case pos:start="149:9" pos:end="149:28">case <expr pos:start="149:14" pos:end="149:27"><name pos:start="149:14" pos:end="149:27">BOARD_ID_PB926</name></expr>:</case>

            <comment type="block" pos:start="151:13" pos:end="159:15">/* On 926 bits 13:8 are R/O, bits 1:0 control

             * the mux that defines how to interpret the PL110

             * graphics format, and other bits are r/w but we

             * don't implement them to do anything.

             */</comment>

            <expr_stmt pos:start="161:13" pos:end="161:34"><expr pos:start="161:13" pos:end="161:33"><name pos:start="161:13" pos:end="161:23"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:23">sys_clcd</name></name> <operator pos:start="161:25" pos:end="161:26">&amp;=</operator> <literal type="number" pos:start="161:28" pos:end="161:33">0x3f00</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:41"><expr pos:start="163:13" pos:end="163:40"><name pos:start="163:13" pos:end="163:23"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:23">sys_clcd</name></name> <operator pos:start="163:25" pos:end="163:26">|=</operator> <name pos:start="163:28" pos:end="163:30">val</name> <operator pos:start="163:32" pos:end="163:32">&amp;</operator> <operator pos:start="163:34" pos:end="163:34">~</operator><literal type="number" pos:start="163:35" pos:end="163:40">0x3f00</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:53"><expr pos:start="165:13" pos:end="165:52"><call pos:start="165:13" pos:end="165:52"><name pos:start="165:13" pos:end="165:24">qemu_set_irq</name><argument_list pos:start="165:25" pos:end="165:52">(<argument pos:start="165:26" pos:end="165:42"><expr pos:start="165:26" pos:end="165:42"><name pos:start="165:26" pos:end="165:42"><name pos:start="165:26" pos:end="165:26">s</name><operator pos:start="165:27" pos:end="165:28">-&gt;</operator><name pos:start="165:29" pos:end="165:42">pl110_mux_ctrl</name></name></expr></argument>, <argument pos:start="165:45" pos:end="165:51"><expr pos:start="165:45" pos:end="165:51"><name pos:start="165:45" pos:end="165:47">val</name> <operator pos:start="165:49" pos:end="165:49">&amp;</operator> <literal type="number" pos:start="165:51" pos:end="165:51">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="167:13" pos:end="167:18">break;</break>

        <case pos:start="169:9" pos:end="169:25">case <expr pos:start="169:14" pos:end="169:24"><name pos:start="169:14" pos:end="169:24">BOARD_ID_EB</name></expr>:</case>

            <comment type="block" pos:start="171:13" pos:end="175:15">/* The EB is the same except that there is no mux since

             * the EB has a PL111.

             */</comment>

            <expr_stmt pos:start="177:13" pos:end="177:34"><expr pos:start="177:13" pos:end="177:33"><name pos:start="177:13" pos:end="177:23"><name pos:start="177:13" pos:end="177:13">s</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:23">sys_clcd</name></name> <operator pos:start="177:25" pos:end="177:26">&amp;=</operator> <literal type="number" pos:start="177:28" pos:end="177:33">0x3f00</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:41"><expr pos:start="179:13" pos:end="179:40"><name pos:start="179:13" pos:end="179:23"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:23">sys_clcd</name></name> <operator pos:start="179:25" pos:end="179:26">|=</operator> <name pos:start="179:28" pos:end="179:30">val</name> <operator pos:start="179:32" pos:end="179:32">&amp;</operator> <operator pos:start="179:34" pos:end="179:34">~</operator><literal type="number" pos:start="179:35" pos:end="179:40">0x3f00</literal></expr>;</expr_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <case pos:start="183:9" pos:end="183:27">case <expr pos:start="183:14" pos:end="183:26"><name pos:start="183:14" pos:end="183:26">BOARD_ID_PBA8</name></expr>:</case>

        <case pos:start="185:9" pos:end="185:26">case <expr pos:start="185:14" pos:end="185:25"><name pos:start="185:14" pos:end="185:25">BOARD_ID_PBX</name></expr>:</case>

            <comment type="block" pos:start="187:13" pos:end="191:15">/* On PBA8 and PBX bit 7 is r/w and all other bits

             * are either r/o or RAZ/WI.

             */</comment>

            <expr_stmt pos:start="193:13" pos:end="193:36"><expr pos:start="193:13" pos:end="193:35"><name pos:start="193:13" pos:end="193:23"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:23">sys_clcd</name></name> <operator pos:start="193:25" pos:end="193:26">&amp;=</operator> <operator pos:start="193:28" pos:end="193:28">(</operator><literal type="number" pos:start="193:29" pos:end="193:29">1</literal> <operator pos:start="193:31" pos:end="193:32">&lt;&lt;</operator> <literal type="number" pos:start="193:34" pos:end="193:34">7</literal><operator pos:start="193:35" pos:end="193:35">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:43"><expr pos:start="195:13" pos:end="195:42"><name pos:start="195:13" pos:end="195:23"><name pos:start="195:13" pos:end="195:13">s</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:23">sys_clcd</name></name> <operator pos:start="195:25" pos:end="195:26">|=</operator> <name pos:start="195:28" pos:end="195:30">val</name> <operator pos:start="195:32" pos:end="195:32">&amp;</operator> <operator pos:start="195:34" pos:end="195:34">~</operator><operator pos:start="195:35" pos:end="195:35">(</operator><literal type="number" pos:start="195:36" pos:end="195:36">1</literal> <operator pos:start="195:38" pos:end="195:39">&lt;&lt;</operator> <literal type="number" pos:start="195:41" pos:end="195:41">7</literal><operator pos:start="195:42" pos:end="195:42">)</operator></expr>;</expr_stmt>

            <break pos:start="197:13" pos:end="197:18">break;</break>

        <case pos:start="199:9" pos:end="199:31">case <expr pos:start="199:14" pos:end="199:30"><name pos:start="199:14" pos:end="199:30">BOARD_ID_VEXPRESS</name></expr>:</case>

        <default pos:start="201:9" pos:end="201:16">default:</default>

            <comment type="block" pos:start="203:13" pos:end="203:76">/* On VExpress this register is unimplemented and will RAZ/WI */</comment>

            <break pos:start="205:13" pos:end="205:18">break;</break>

        </block_content>}</block></switch>

    <case pos:start="209:5" pos:end="209:14">case <expr pos:start="209:10" pos:end="209:13"><literal type="number" pos:start="209:10" pos:end="209:13">0x54</literal></expr>:</case> <comment type="block" pos:start="209:16" pos:end="209:28">/* CLCDSER */</comment>

    <case pos:start="211:5" pos:end="211:14">case <expr pos:start="211:10" pos:end="211:13"><literal type="number" pos:start="211:10" pos:end="211:13">0x64</literal></expr>:</case> <comment type="block" pos:start="211:16" pos:end="211:28">/* DMAPSR0 */</comment>

    <case pos:start="213:5" pos:end="213:14">case <expr pos:start="213:10" pos:end="213:13"><literal type="number" pos:start="213:10" pos:end="213:13">0x68</literal></expr>:</case> <comment type="block" pos:start="213:16" pos:end="213:28">/* DMAPSR1 */</comment>

    <case pos:start="215:5" pos:end="215:14">case <expr pos:start="215:10" pos:end="215:13"><literal type="number" pos:start="215:10" pos:end="215:13">0x6c</literal></expr>:</case> <comment type="block" pos:start="215:16" pos:end="215:28">/* DMAPSR2 */</comment>

    <case pos:start="217:5" pos:end="217:14">case <expr pos:start="217:10" pos:end="217:13"><literal type="number" pos:start="217:10" pos:end="217:13">0x70</literal></expr>:</case> <comment type="block" pos:start="217:16" pos:end="217:26">/* IOSEL */</comment>

    <case pos:start="219:5" pos:end="219:14">case <expr pos:start="219:10" pos:end="219:13"><literal type="number" pos:start="219:10" pos:end="219:13">0x74</literal></expr>:</case> <comment type="block" pos:start="219:16" pos:end="219:27">/* PLDCTL */</comment>

    <case pos:start="221:5" pos:end="221:14">case <expr pos:start="221:10" pos:end="221:13"><literal type="number" pos:start="221:10" pos:end="221:13">0x80</literal></expr>:</case> <comment type="block" pos:start="221:16" pos:end="221:26">/* BUSID */</comment>

    <case pos:start="223:5" pos:end="223:14">case <expr pos:start="223:10" pos:end="223:13"><literal type="number" pos:start="223:10" pos:end="223:13">0x84</literal></expr>:</case> <comment type="block" pos:start="223:16" pos:end="223:28">/* PROCID0 */</comment>

    <case pos:start="225:5" pos:end="225:14">case <expr pos:start="225:10" pos:end="225:13"><literal type="number" pos:start="225:10" pos:end="225:13">0x88</literal></expr>:</case> <comment type="block" pos:start="225:16" pos:end="225:28">/* PROCID1 */</comment>

    <case pos:start="227:5" pos:end="227:14">case <expr pos:start="227:10" pos:end="227:13"><literal type="number" pos:start="227:10" pos:end="227:13">0x8c</literal></expr>:</case> <comment type="block" pos:start="227:16" pos:end="227:30">/* OSCRESET0 */</comment>

    <case pos:start="229:5" pos:end="229:14">case <expr pos:start="229:10" pos:end="229:13"><literal type="number" pos:start="229:10" pos:end="229:13">0x90</literal></expr>:</case> <comment type="block" pos:start="229:16" pos:end="229:30">/* OSCRESET1 */</comment>

    <case pos:start="231:5" pos:end="231:14">case <expr pos:start="231:10" pos:end="231:13"><literal type="number" pos:start="231:10" pos:end="231:13">0x94</literal></expr>:</case> <comment type="block" pos:start="231:16" pos:end="231:30">/* OSCRESET2 */</comment>

    <case pos:start="233:5" pos:end="233:14">case <expr pos:start="233:10" pos:end="233:13"><literal type="number" pos:start="233:10" pos:end="233:13">0x98</literal></expr>:</case> <comment type="block" pos:start="233:16" pos:end="233:30">/* OSCRESET3 */</comment>

    <case pos:start="235:5" pos:end="235:14">case <expr pos:start="235:10" pos:end="235:13"><literal type="number" pos:start="235:10" pos:end="235:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="235:16" pos:end="235:30">/* OSCRESET4 */</comment>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <case pos:start="239:5" pos:end="239:14">case <expr pos:start="239:10" pos:end="239:13"><literal type="number" pos:start="239:10" pos:end="239:13">0xa0</literal></expr>:</case> <comment type="block" pos:start="239:16" pos:end="239:32">/* SYS_CFGDATA */</comment>

        <if_stmt pos:start="241:9" pos:end="245:9"><if pos:start="241:9" pos:end="245:9">if <condition pos:start="241:12" pos:end="241:45">(<expr pos:start="241:13" pos:end="241:44"><call pos:start="241:13" pos:end="241:23"><name pos:start="241:13" pos:end="241:20">board_id</name><argument_list pos:start="241:21" pos:end="241:23">(<argument pos:start="241:22" pos:end="241:22"><expr pos:start="241:22" pos:end="241:22"><name pos:start="241:22" pos:end="241:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="241:25" pos:end="241:26">!=</operator> <name pos:start="241:28" pos:end="241:44">BOARD_ID_VEXPRESS</name></expr>)</condition> <block pos:start="241:47" pos:end="245:9">{<block_content pos:start="243:13" pos:end="243:25">

            <goto pos:start="243:13" pos:end="243:25">goto <name pos:start="243:18" pos:end="243:24">bad_reg</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:29"><expr pos:start="247:9" pos:end="247:28"><name pos:start="247:9" pos:end="247:22"><name pos:start="247:9" pos:end="247:9">s</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:22">sys_cfgdata</name></name> <operator pos:start="247:24" pos:end="247:24">=</operator> <name pos:start="247:26" pos:end="247:28">val</name></expr>;</expr_stmt>

        <return pos:start="249:9" pos:end="249:15">return;</return>

    <case pos:start="251:5" pos:end="251:14">case <expr pos:start="251:10" pos:end="251:13"><literal type="number" pos:start="251:10" pos:end="251:13">0xa4</literal></expr>:</case> <comment type="block" pos:start="251:16" pos:end="251:32">/* SYS_CFGCTRL */</comment>

        <if_stmt pos:start="253:9" pos:end="257:9"><if pos:start="253:9" pos:end="257:9">if <condition pos:start="253:12" pos:end="253:45">(<expr pos:start="253:13" pos:end="253:44"><call pos:start="253:13" pos:end="253:23"><name pos:start="253:13" pos:end="253:20">board_id</name><argument_list pos:start="253:21" pos:end="253:23">(<argument pos:start="253:22" pos:end="253:22"><expr pos:start="253:22" pos:end="253:22"><name pos:start="253:22" pos:end="253:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="253:25" pos:end="253:26">!=</operator> <name pos:start="253:28" pos:end="253:44">BOARD_ID_VEXPRESS</name></expr>)</condition> <block pos:start="253:47" pos:end="257:9">{<block_content pos:start="255:13" pos:end="255:25">

            <goto pos:start="255:13" pos:end="255:25">goto <name pos:start="255:18" pos:end="255:24">bad_reg</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:42"><expr pos:start="259:9" pos:end="259:41"><name pos:start="259:9" pos:end="259:22"><name pos:start="259:9" pos:end="259:9">s</name><operator pos:start="259:10" pos:end="259:11">-&gt;</operator><name pos:start="259:12" pos:end="259:22">sys_cfgctrl</name></name> <operator pos:start="259:24" pos:end="259:24">=</operator> <name pos:start="259:26" pos:end="259:28">val</name> <operator pos:start="259:30" pos:end="259:30">&amp;</operator> <operator pos:start="259:32" pos:end="259:32">~</operator><operator pos:start="259:33" pos:end="259:33">(</operator><literal type="number" pos:start="259:34" pos:end="259:34">3</literal> <operator pos:start="259:36" pos:end="259:37">&lt;&lt;</operator> <literal type="number" pos:start="259:39" pos:end="259:40">18</literal><operator pos:start="259:41" pos:end="259:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:27"><expr pos:start="261:9" pos:end="261:26"><name pos:start="261:9" pos:end="261:22"><name pos:start="261:9" pos:end="261:9">s</name><operator pos:start="261:10" pos:end="261:11">-&gt;</operator><name pos:start="261:12" pos:end="261:22">sys_cfgstat</name></name> <operator pos:start="261:24" pos:end="261:24">=</operator> <literal type="number" pos:start="261:26" pos:end="261:26">1</literal></expr>;</expr_stmt>            <comment type="block" pos:start="261:40" pos:end="261:53">/* complete */</comment>

        <switch pos:start="263:9" pos:end="281:9">switch <condition pos:start="263:16" pos:end="263:31">(<expr pos:start="263:17" pos:end="263:30"><name pos:start="263:17" pos:end="263:30"><name pos:start="263:17" pos:end="263:17">s</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:30">sys_cfgctrl</name></name></expr>)</condition> <block pos:start="263:33" pos:end="281:9">{<block_content pos:start="265:9" pos:end="279:32">

        <case pos:start="265:9" pos:end="265:24">case <expr pos:start="265:14" pos:end="265:23"><literal type="number" pos:start="265:14" pos:end="265:23">0xc0800000</literal></expr>:</case>            <comment type="block" pos:start="265:37" pos:end="265:73">/* SYS_CFG_SHUTDOWN to motherboard */</comment>

            <expr_stmt pos:start="267:13" pos:end="267:43"><expr pos:start="267:13" pos:end="267:42"><call pos:start="267:13" pos:end="267:42"><name pos:start="267:13" pos:end="267:40">qemu_system_shutdown_request</name><argument_list pos:start="267:41" pos:end="267:42">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="269:13" pos:end="269:18">break;</break>

        <case pos:start="271:9" pos:end="271:24">case <expr pos:start="271:14" pos:end="271:23"><literal type="number" pos:start="271:14" pos:end="271:23">0xc0900000</literal></expr>:</case>            <comment type="block" pos:start="271:37" pos:end="271:71">/* SYS_CFG_REBOOT to motherboard */</comment>

            <expr_stmt pos:start="273:13" pos:end="273:40"><expr pos:start="273:13" pos:end="273:39"><call pos:start="273:13" pos:end="273:39"><name pos:start="273:13" pos:end="273:37">qemu_system_reset_request</name><argument_list pos:start="273:38" pos:end="273:39">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="275:13" pos:end="275:18">break;</break>

        <default pos:start="277:9" pos:end="277:16">default:</default>

            <expr_stmt pos:start="279:13" pos:end="279:32"><expr pos:start="279:13" pos:end="279:31"><name pos:start="279:13" pos:end="279:26"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:26">sys_cfgstat</name></name> <operator pos:start="279:28" pos:end="279:29">|=</operator> <literal type="number" pos:start="279:31" pos:end="279:31">2</literal></expr>;</expr_stmt>        <comment type="block" pos:start="279:41" pos:end="279:51">/* error */</comment>

        </block_content>}</block></switch>

        <return pos:start="283:9" pos:end="283:15">return;</return>

    <case pos:start="285:5" pos:end="285:14">case <expr pos:start="285:10" pos:end="285:13"><literal type="number" pos:start="285:10" pos:end="285:13">0xa8</literal></expr>:</case> <comment type="block" pos:start="285:16" pos:end="285:32">/* SYS_CFGSTAT */</comment>

        <if_stmt pos:start="287:9" pos:end="291:9"><if pos:start="287:9" pos:end="291:9">if <condition pos:start="287:12" pos:end="287:45">(<expr pos:start="287:13" pos:end="287:44"><call pos:start="287:13" pos:end="287:23"><name pos:start="287:13" pos:end="287:20">board_id</name><argument_list pos:start="287:21" pos:end="287:23">(<argument pos:start="287:22" pos:end="287:22"><expr pos:start="287:22" pos:end="287:22"><name pos:start="287:22" pos:end="287:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="287:25" pos:end="287:26">!=</operator> <name pos:start="287:28" pos:end="287:44">BOARD_ID_VEXPRESS</name></expr>)</condition> <block pos:start="287:47" pos:end="291:9">{<block_content pos:start="289:13" pos:end="289:25">

            <goto pos:start="289:13" pos:end="289:25">goto <name pos:start="289:18" pos:end="289:24">bad_reg</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:33"><expr pos:start="293:9" pos:end="293:32"><name pos:start="293:9" pos:end="293:22"><name pos:start="293:9" pos:end="293:9">s</name><operator pos:start="293:10" pos:end="293:11">-&gt;</operator><name pos:start="293:12" pos:end="293:22">sys_cfgstat</name></name> <operator pos:start="293:24" pos:end="293:24">=</operator> <name pos:start="293:26" pos:end="293:28">val</name> <operator pos:start="293:30" pos:end="293:30">&amp;</operator> <literal type="number" pos:start="293:32" pos:end="293:32">3</literal></expr>;</expr_stmt>

        <return pos:start="295:9" pos:end="295:15">return;</return>

    <default pos:start="297:5" pos:end="297:12">default:</default>

    <label pos:start="299:5" pos:end="299:12"><name pos:start="299:5" pos:end="299:11">bad_reg</name>:</label>

        <expr_stmt pos:start="301:9" pos:end="301:77"><expr pos:start="301:9" pos:end="301:76"><call pos:start="301:9" pos:end="301:76"><name pos:start="301:9" pos:end="301:14">printf</name> <argument_list pos:start="301:16" pos:end="301:76">(<argument pos:start="301:17" pos:end="301:62"><expr pos:start="301:17" pos:end="301:62"><literal type="string" pos:start="301:17" pos:end="301:62">"arm_sysctl_write: Bad register offset 0x%x\n"</literal></expr></argument>, <argument pos:start="301:65" pos:end="301:75"><expr pos:start="301:65" pos:end="301:75"><operator pos:start="301:65" pos:end="301:65">(</operator><name pos:start="301:66" pos:end="301:68">int</name><operator pos:start="301:69" pos:end="301:69">)</operator><name pos:start="301:70" pos:end="301:75">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="303:9" pos:end="303:15">return;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
