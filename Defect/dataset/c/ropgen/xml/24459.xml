<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24459.c" pos:tabs="8"><function pos:start="1:1" pos:end="553:39"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_nal_units</name><parameter_list pos:start="1:28" pos:end="3:48">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">H264Context</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">h</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:76"><decl pos:start="1:65" pos:end="1:76"><type pos:start="1:65" pos:end="1:76"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:76">buf_size</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:47"><decl pos:start="3:29" pos:end="3:47"><type pos:start="3:29" pos:end="3:47"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:47">parse_extradata</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="553:39">{<block_content pos:start="7:5" pos:end="553:39">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier><specifier pos:start="7:21" pos:end="7:25">const</specifier></type> <name pos:start="7:27" pos:end="7:31">avctx</name> <init pos:start="7:33" pos:end="7:42">= <expr pos:start="7:35" pos:end="7:42"><name pos:start="7:35" pos:end="7:42"><name pos:start="7:35" pos:end="7:35">h</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:42">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">H264SliceContext</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">sl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">buf_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:26">context_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">next_avc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">nals_needed</name> <init pos:start="17:21" pos:end="17:23">= <expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr></init></decl>;</decl_stmt> <comment type="line" format="doxygen" pos:start="17:26" pos:end="17:99">///&lt; number of NALs that need decoding before the next frame thread starts</comment>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">nal_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:19">idr_cleared</name><init pos:start="21:20" pos:end="21:21">=<expr pos:start="21:21" pos:end="21:21"><literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:24"><expr pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:5">h</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:20">nal_unit_type</name></name><operator pos:start="27:21" pos:end="27:21">=</operator> <literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="33:35"><if pos:start="31:5" pos:end="33:35">if<condition pos:start="31:7" pos:end="31:31">(<expr pos:start="31:8" pos:end="31:30"><operator pos:start="31:8" pos:end="31:8">!</operator><name pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:9">h</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:30">slice_context_count</name></name></expr>)</condition><block type="pseudo" pos:start="33:10" pos:end="33:35"><block_content pos:start="33:10" pos:end="33:35">

         <expr_stmt pos:start="33:10" pos:end="33:35"><expr pos:start="33:10" pos:end="33:34"><name pos:start="33:10" pos:end="33:31"><name pos:start="33:10" pos:end="33:10">h</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:31">slice_context_count</name></name><operator pos:start="33:32" pos:end="33:32">=</operator> <literal type="number" pos:start="33:34" pos:end="33:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:5">h</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:19">max_contexts</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:44"><name pos:start="35:23" pos:end="35:23">h</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:44">slice_context_count</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="553:39"><if pos:start="37:5" pos:end="553:39">if <condition pos:start="37:8" pos:end="37:46">(<expr pos:start="37:9" pos:end="37:45"><operator pos:start="37:9" pos:end="37:9">!</operator><operator pos:start="37:10" pos:end="37:10">(</operator><name pos:start="37:11" pos:end="37:23"><name pos:start="37:11" pos:end="37:15">avctx</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:23">flags2</name></name> <operator pos:start="37:25" pos:end="37:25">&amp;</operator> <name pos:start="37:27" pos:end="37:44">CODEC_FLAG2_CHUNKS</name><operator pos:start="37:45" pos:end="37:45">)</operator></expr>)</condition> <block pos:start="37:48" pos:end="553:39">{<block_content pos:start="39:9" pos:end="553:39">

        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:9">h</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:24">current_slice</name></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <literal type="number" pos:start="39:28" pos:end="39:28">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:34"><if pos:start="41:9" pos:end="43:34">if <condition pos:start="41:12" pos:end="41:28">(<expr pos:start="41:13" pos:end="41:27"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:27"><name pos:start="41:14" pos:end="41:14">h</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:27">first_field</name></name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:34"><block_content pos:start="43:13" pos:end="43:34">

            <expr_stmt pos:start="43:13" pos:end="43:34"><expr pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:13">h</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:26">cur_pic_ptr</name></name> <operator pos:start="43:28" pos:end="43:28">=</operator> <name pos:start="43:30" pos:end="43:33">NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><call pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:25">ff_h264_reset_sei</name><argument_list pos:start="45:26" pos:end="45:28">(<argument pos:start="45:27" pos:end="45:27"><expr pos:start="45:27" pos:end="45:27"><name pos:start="45:27" pos:end="45:27">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <if_stmt pos:start="50:5" pos:end="553:39"><if pos:start="50:5" pos:end="553:39">if <condition pos:start="50:8" pos:end="50:32">(<expr pos:start="50:9" pos:end="50:31"><name pos:start="50:9" pos:end="50:26"><name pos:start="50:9" pos:end="50:9">h</name><operator pos:start="50:10" pos:end="50:11">-&gt;</operator><name pos:start="50:12" pos:end="50:26">nal_length_size</name></name> <operator pos:start="50:28" pos:end="50:29">==</operator> <literal type="number" pos:start="50:31" pos:end="50:31">4</literal></expr>)</condition> <block pos:start="50:34" pos:end="553:39">{<block_content pos:start="52:9" pos:end="553:39">

        <if_stmt pos:start="52:9" pos:end="58:26"><if pos:start="52:9" pos:end="56:9">if <condition pos:start="52:12" pos:end="52:85">(<expr pos:start="52:13" pos:end="52:84"><name pos:start="52:13" pos:end="52:20">buf_size</name> <operator pos:start="52:22" pos:end="52:22">&gt;</operator> <literal type="number" pos:start="52:24" pos:end="52:24">8</literal> <operator pos:start="52:26" pos:end="52:27">&amp;&amp;</operator> <call pos:start="52:29" pos:end="52:40"><name pos:start="52:29" pos:end="52:35">AV_RB32</name><argument_list pos:start="52:36" pos:end="52:40">(<argument pos:start="52:37" pos:end="52:39"><expr pos:start="52:37" pos:end="52:39"><name pos:start="52:37" pos:end="52:39">buf</name></expr></argument>)</argument_list></call> <operator pos:start="52:42" pos:end="52:43">==</operator> <literal type="number" pos:start="52:45" pos:end="52:45">1</literal> <operator pos:start="52:47" pos:end="52:48">&amp;&amp;</operator> <call pos:start="52:50" pos:end="52:63"><name pos:start="52:50" pos:end="52:56">AV_RB32</name><argument_list pos:start="52:57" pos:end="52:63">(<argument pos:start="52:58" pos:end="52:62"><expr pos:start="52:58" pos:end="52:62"><name pos:start="52:58" pos:end="52:60">buf</name><operator pos:start="52:61" pos:end="52:61">+</operator><literal type="number" pos:start="52:62" pos:end="52:62">5</literal></expr></argument>)</argument_list></call> <operator pos:start="52:65" pos:end="52:65">&gt;</operator> <operator pos:start="52:67" pos:end="52:67">(</operator><name pos:start="52:68" pos:end="52:75">unsigned</name><operator pos:start="52:76" pos:end="52:76">)</operator><name pos:start="52:77" pos:end="52:84">buf_size</name></expr>)</condition> <block pos:start="52:87" pos:end="56:9">{<block_content pos:start="54:13" pos:end="54:26">

            <expr_stmt pos:start="54:13" pos:end="54:26"><expr pos:start="54:13" pos:end="54:25"><name pos:start="54:13" pos:end="54:21"><name pos:start="54:13" pos:end="54:13">h</name><operator pos:start="54:14" pos:end="54:15">-&gt;</operator><name pos:start="54:16" pos:end="54:21">is_avc</name></name> <operator pos:start="54:23" pos:end="54:23">=</operator> <literal type="number" pos:start="54:25" pos:end="54:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="56:10" pos:end="58:26">else if<condition pos:start="56:17" pos:end="56:88">(<expr pos:start="56:18" pos:end="56:87"><name pos:start="56:18" pos:end="56:25">buf_size</name> <operator pos:start="56:27" pos:end="56:27">&gt;</operator> <literal type="number" pos:start="56:29" pos:end="56:29">3</literal> <operator pos:start="56:31" pos:end="56:32">&amp;&amp;</operator> <call pos:start="56:34" pos:end="56:45"><name pos:start="56:34" pos:end="56:40">AV_RB32</name><argument_list pos:start="56:41" pos:end="56:45">(<argument pos:start="56:42" pos:end="56:44"><expr pos:start="56:42" pos:end="56:44"><name pos:start="56:42" pos:end="56:44">buf</name></expr></argument>)</argument_list></call> <operator pos:start="56:47" pos:end="56:47">&gt;</operator> <literal type="number" pos:start="56:49" pos:end="56:49">1</literal> <operator pos:start="56:51" pos:end="56:52">&amp;&amp;</operator> <call pos:start="56:54" pos:end="56:65"><name pos:start="56:54" pos:end="56:60">AV_RB32</name><argument_list pos:start="56:61" pos:end="56:65">(<argument pos:start="56:62" pos:end="56:64"><expr pos:start="56:62" pos:end="56:64"><name pos:start="56:62" pos:end="56:64">buf</name></expr></argument>)</argument_list></call> <operator pos:start="56:67" pos:end="56:68">&lt;=</operator> <operator pos:start="56:70" pos:end="56:70">(</operator><name pos:start="56:71" pos:end="56:78">unsigned</name><operator pos:start="56:79" pos:end="56:79">)</operator><name pos:start="56:80" pos:end="56:87">buf_size</name></expr>)</condition><block type="pseudo" pos:start="58:13" pos:end="58:26"><block_content pos:start="58:13" pos:end="58:26">

            <expr_stmt pos:start="58:13" pos:end="58:26"><expr pos:start="58:13" pos:end="58:25"><name pos:start="58:13" pos:end="58:21"><name pos:start="58:13" pos:end="58:13">h</name><operator pos:start="58:14" pos:end="58:15">-&gt;</operator><name pos:start="58:16" pos:end="58:21">is_avc</name></name> <operator pos:start="58:23" pos:end="58:23">=</operator> <literal type="number" pos:start="58:25" pos:end="58:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




    <if_stmt pos:start="63:5" pos:end="65:60"><if pos:start="63:5" pos:end="65:60">if <condition pos:start="63:8" pos:end="63:52">(<expr pos:start="63:9" pos:end="63:51"><name pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:13">avctx</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:33">active_thread_type</name></name> <operator pos:start="63:35" pos:end="63:35">&amp;</operator> <name pos:start="63:37" pos:end="63:51">FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:60"><block_content pos:start="65:9" pos:end="65:60">

        <expr_stmt pos:start="65:9" pos:end="65:60"><expr pos:start="65:9" pos:end="65:59"><name pos:start="65:9" pos:end="65:19">nals_needed</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:59"><name pos:start="65:23" pos:end="65:41">get_last_needed_nal</name><argument_list pos:start="65:42" pos:end="65:59">(<argument pos:start="65:43" pos:end="65:43"><expr pos:start="65:43" pos:end="65:43"><name pos:start="65:43" pos:end="65:43">h</name></expr></argument>, <argument pos:start="65:46" pos:end="65:48"><expr pos:start="65:46" pos:end="65:48"><name pos:start="65:46" pos:end="65:48">buf</name></expr></argument>, <argument pos:start="65:51" pos:end="65:58"><expr pos:start="65:51" pos:end="65:58"><name pos:start="65:51" pos:end="65:58">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <block pos:start="69:5" pos:end="553:39">{<block_content pos:start="71:9" pos:end="553:39">

        <expr_stmt pos:start="71:9" pos:end="71:26"><expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:17">buf_index</name>     <operator pos:start="71:23" pos:end="71:23">=</operator> <literal type="number" pos:start="71:25" pos:end="71:25">0</literal></expr>;</expr_stmt>


        <expr_stmt pos:start="74:9" pos:end="74:49"><expr pos:start="74:9" pos:end="74:48"><name pos:start="74:9" pos:end="74:16">next_avc</name>      <operator pos:start="74:23" pos:end="74:23">=</operator> <ternary pos:start="74:25" pos:end="74:48"><condition pos:start="74:25" pos:end="74:35"><expr pos:start="74:25" pos:end="74:33"><name pos:start="74:25" pos:end="74:33"><name pos:start="74:25" pos:end="74:25">h</name><operator pos:start="74:26" pos:end="74:27">-&gt;</operator><name pos:start="74:28" pos:end="74:33">is_avc</name></name></expr> ?</condition><then pos:start="74:37" pos:end="74:37"> <expr pos:start="74:37" pos:end="74:37"><literal type="number" pos:start="74:37" pos:end="74:37">0</literal></expr> </then><else pos:start="74:39" pos:end="74:48">: <expr pos:start="74:41" pos:end="74:48"><name pos:start="74:41" pos:end="74:48">buf_size</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="76:9" pos:end="76:26"><expr pos:start="76:9" pos:end="76:25"><name pos:start="76:9" pos:end="76:17">nal_index</name>     <operator pos:start="76:23" pos:end="76:23">=</operator> <literal type="number" pos:start="76:25" pos:end="76:25">0</literal></expr>;</expr_stmt>

        <for pos:start="78:9" pos:end="553:39">for <control pos:start="78:13" pos:end="78:16">(<init pos:start="78:14" pos:end="78:14">;</init><condition pos:start="78:15" pos:end="78:15">;</condition><incr/>)</control> <block pos:start="78:18" pos:end="553:39">{<block_content pos:start="80:13" pos:end="553:39">

            <decl_stmt pos:start="80:13" pos:end="80:25"><decl pos:start="80:13" pos:end="80:24"><type pos:start="80:13" pos:end="80:15"><name pos:start="80:13" pos:end="80:15">int</name></type> <name pos:start="80:17" pos:end="80:24">consumed</name></decl>;</decl_stmt>

            <decl_stmt pos:start="82:13" pos:end="82:27"><decl pos:start="82:13" pos:end="82:26"><type pos:start="82:13" pos:end="82:15"><name pos:start="82:13" pos:end="82:15">int</name></type> <name pos:start="82:17" pos:end="82:26">dst_length</name></decl>;</decl_stmt>

            <decl_stmt pos:start="84:13" pos:end="84:27"><decl pos:start="84:13" pos:end="84:26"><type pos:start="84:13" pos:end="84:15"><name pos:start="84:13" pos:end="84:15">int</name></type> <name pos:start="84:17" pos:end="84:26">bit_length</name></decl>;</decl_stmt>

            <decl_stmt pos:start="86:13" pos:end="86:31"><decl pos:start="86:13" pos:end="86:30"><type pos:start="86:13" pos:end="86:27"><specifier pos:start="86:13" pos:end="86:17">const</specifier> <name pos:start="86:19" pos:end="86:25">uint8_t</name> <modifier pos:start="86:27" pos:end="86:27">*</modifier></type><name pos:start="86:28" pos:end="86:30">ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="88:13" pos:end="88:28"><decl pos:start="88:13" pos:end="88:27"><type pos:start="88:13" pos:end="88:15"><name pos:start="88:13" pos:end="88:15">int</name></type> <name pos:start="88:17" pos:end="88:23">nalsize</name> <init pos:start="88:25" pos:end="88:27">= <expr pos:start="88:27" pos:end="88:27"><literal type="number" pos:start="88:27" pos:end="88:27">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="90:13" pos:end="90:20"><decl pos:start="90:13" pos:end="90:19"><type pos:start="90:13" pos:end="90:15"><name pos:start="90:13" pos:end="90:15">int</name></type> <name pos:start="90:17" pos:end="90:19">err</name></decl>;</decl_stmt>



            <if_stmt pos:start="94:13" pos:end="553:39"><if pos:start="94:13" pos:end="104:13">if <condition pos:start="94:16" pos:end="94:38">(<expr pos:start="94:17" pos:end="94:37"><name pos:start="94:17" pos:end="94:25">buf_index</name> <operator pos:start="94:27" pos:end="94:28">&gt;=</operator> <name pos:start="94:30" pos:end="94:37">next_avc</name></expr>)</condition> <block pos:start="94:40" pos:end="104:13">{<block_content pos:start="96:17" pos:end="102:47">

                <expr_stmt pos:start="96:17" pos:end="96:72"><expr pos:start="96:17" pos:end="96:71"><name pos:start="96:17" pos:end="96:23">nalsize</name> <operator pos:start="96:25" pos:end="96:25">=</operator> <call pos:start="96:27" pos:end="96:71"><name pos:start="96:27" pos:end="96:41">get_avc_nalsize</name><argument_list pos:start="96:42" pos:end="96:71">(<argument pos:start="96:43" pos:end="96:43"><expr pos:start="96:43" pos:end="96:43"><name pos:start="96:43" pos:end="96:43">h</name></expr></argument>, <argument pos:start="96:46" pos:end="96:48"><expr pos:start="96:46" pos:end="96:48"><name pos:start="96:46" pos:end="96:48">buf</name></expr></argument>, <argument pos:start="96:51" pos:end="96:58"><expr pos:start="96:51" pos:end="96:58"><name pos:start="96:51" pos:end="96:58">buf_size</name></expr></argument>, <argument pos:start="96:61" pos:end="96:70"><expr pos:start="96:61" pos:end="96:70"><operator pos:start="96:61" pos:end="96:61">&amp;</operator><name pos:start="96:62" pos:end="96:70">buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="98:17" pos:end="100:26"><if pos:start="98:17" pos:end="100:26">if <condition pos:start="98:20" pos:end="98:32">(<expr pos:start="98:21" pos:end="98:31"><name pos:start="98:21" pos:end="98:27">nalsize</name> <operator pos:start="98:29" pos:end="98:29">&lt;</operator> <literal type="number" pos:start="98:31" pos:end="98:31">0</literal></expr>)</condition><block type="pseudo" pos:start="100:21" pos:end="100:26"><block_content pos:start="100:21" pos:end="100:26">

                    <break pos:start="100:21" pos:end="100:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="102:17" pos:end="102:47"><expr pos:start="102:17" pos:end="102:46"><name pos:start="102:17" pos:end="102:24">next_avc</name> <operator pos:start="102:26" pos:end="102:26">=</operator> <name pos:start="102:28" pos:end="102:36">buf_index</name> <operator pos:start="102:38" pos:end="102:38">+</operator> <name pos:start="102:40" pos:end="102:46">nalsize</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="104:15" pos:end="553:39">else <block pos:start="104:20" pos:end="553:39">{<block_content pos:start="106:17" pos:end="553:39">

                <expr_stmt pos:start="106:17" pos:end="106:80"><expr pos:start="106:17" pos:end="106:79"><name pos:start="106:17" pos:end="106:25">buf_index</name> <operator pos:start="106:27" pos:end="106:27">=</operator> <call pos:start="106:29" pos:end="106:79"><name pos:start="106:29" pos:end="106:43">find_start_code</name><argument_list pos:start="106:44" pos:end="106:79">(<argument pos:start="106:45" pos:end="106:47"><expr pos:start="106:45" pos:end="106:47"><name pos:start="106:45" pos:end="106:47">buf</name></expr></argument>, <argument pos:start="106:50" pos:end="106:57"><expr pos:start="106:50" pos:end="106:57"><name pos:start="106:50" pos:end="106:57">buf_size</name></expr></argument>, <argument pos:start="106:60" pos:end="106:68"><expr pos:start="106:60" pos:end="106:68"><name pos:start="106:60" pos:end="106:68">buf_index</name></expr></argument>, <argument pos:start="106:71" pos:end="106:78"><expr pos:start="106:71" pos:end="106:78"><name pos:start="106:71" pos:end="106:78">next_avc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="108:17" pos:end="110:26"><if pos:start="108:17" pos:end="110:26">if <condition pos:start="108:20" pos:end="108:42">(<expr pos:start="108:21" pos:end="108:41"><name pos:start="108:21" pos:end="108:29">buf_index</name> <operator pos:start="108:31" pos:end="108:32">&gt;=</operator> <name pos:start="108:34" pos:end="108:41">buf_size</name></expr>)</condition><block type="pseudo" pos:start="110:21" pos:end="110:26"><block_content pos:start="110:21" pos:end="110:26">

                    <break pos:start="110:21" pos:end="110:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="112:17" pos:end="114:29"><if pos:start="112:17" pos:end="114:29">if <condition pos:start="112:20" pos:end="112:42">(<expr pos:start="112:21" pos:end="112:41"><name pos:start="112:21" pos:end="112:29">buf_index</name> <operator pos:start="112:31" pos:end="112:32">&gt;=</operator> <name pos:start="112:34" pos:end="112:41">next_avc</name></expr>)</condition><block type="pseudo" pos:start="114:21" pos:end="114:29"><block_content pos:start="114:21" pos:end="114:29">

                    <continue pos:start="114:21" pos:end="114:29">continue;</continue></block_content></block></if></if_stmt>




            <expr_stmt pos:start="119:13" pos:end="119:46"><expr pos:start="119:13" pos:end="119:45"><name pos:start="119:13" pos:end="119:14">sl</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <operator pos:start="119:18" pos:end="119:18">&amp;</operator><name pos:start="119:19" pos:end="119:45"><name pos:start="119:19" pos:end="119:19">h</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:30">slice_ctx</name><index pos:start="119:31" pos:end="119:45">[<expr pos:start="119:32" pos:end="119:44"><name pos:start="119:32" pos:end="119:44">context_count</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="123:13" pos:end="125:70"><expr pos:start="123:13" pos:end="125:69"><name pos:start="123:13" pos:end="123:15">ptr</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="125:69"><name pos:start="123:19" pos:end="123:36">ff_h264_decode_nal</name><argument_list pos:start="123:37" pos:end="125:69">(<argument pos:start="123:38" pos:end="123:38"><expr pos:start="123:38" pos:end="123:38"><name pos:start="123:38" pos:end="123:38">h</name></expr></argument>, <argument pos:start="123:41" pos:end="123:42"><expr pos:start="123:41" pos:end="123:42"><name pos:start="123:41" pos:end="123:42">sl</name></expr></argument>, <argument pos:start="123:45" pos:end="123:59"><expr pos:start="123:45" pos:end="123:59"><name pos:start="123:45" pos:end="123:47">buf</name> <operator pos:start="123:49" pos:end="123:49">+</operator> <name pos:start="123:51" pos:end="123:59">buf_index</name></expr></argument>, <argument pos:start="123:62" pos:end="123:72"><expr pos:start="123:62" pos:end="123:72"><operator pos:start="123:62" pos:end="123:62">&amp;</operator><name pos:start="123:63" pos:end="123:72">dst_length</name></expr></argument>,

                                     <argument pos:start="125:38" pos:end="125:46"><expr pos:start="125:38" pos:end="125:46"><operator pos:start="125:38" pos:end="125:38">&amp;</operator><name pos:start="125:39" pos:end="125:46">consumed</name></expr></argument>, <argument pos:start="125:49" pos:end="125:68"><expr pos:start="125:49" pos:end="125:68"><name pos:start="125:49" pos:end="125:56">next_avc</name> <operator pos:start="125:58" pos:end="125:58">-</operator> <name pos:start="125:60" pos:end="125:68">buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="553:39"><if pos:start="127:13" pos:end="553:39">if <condition pos:start="127:16" pos:end="127:39">(<expr pos:start="127:17" pos:end="127:38"><operator pos:start="127:17" pos:end="127:17">!</operator><name pos:start="127:18" pos:end="127:20">ptr</name> <operator pos:start="127:22" pos:end="127:23">||</operator> <name pos:start="127:25" pos:end="127:34">dst_length</name> <operator pos:start="127:36" pos:end="127:36">&lt;</operator> <literal type="number" pos:start="127:38" pos:end="127:38">0</literal></expr>)</condition> <block pos:start="127:41" pos:end="553:39">{<block_content pos:start="129:17" pos:end="553:39">

                <expr_stmt pos:start="129:17" pos:end="129:25"><expr pos:start="129:17" pos:end="129:24"><name pos:start="129:17" pos:end="129:19">ret</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <operator pos:start="129:23" pos:end="129:23">-</operator><literal type="number" pos:start="129:24" pos:end="129:24">1</literal></expr>;</expr_stmt>





            <expr_stmt pos:start="135:13" pos:end="137:72"><expr pos:start="135:13" pos:end="137:71"><name pos:start="135:13" pos:end="135:22">bit_length</name> <operator pos:start="135:24" pos:end="135:24">=</operator> <call pos:start="135:26" pos:end="137:71"><name pos:start="135:26" pos:end="135:39">get_bit_length</name><argument_list pos:start="135:40" pos:end="137:71">(<argument pos:start="135:41" pos:end="135:41"><expr pos:start="135:41" pos:end="135:41"><name pos:start="135:41" pos:end="135:41">h</name></expr></argument>, <argument pos:start="135:44" pos:end="135:46"><expr pos:start="135:44" pos:end="135:46"><name pos:start="135:44" pos:end="135:46">buf</name></expr></argument>, <argument pos:start="135:49" pos:end="135:51"><expr pos:start="135:49" pos:end="135:51"><name pos:start="135:49" pos:end="135:51">ptr</name></expr></argument>, <argument pos:start="135:54" pos:end="135:63"><expr pos:start="135:54" pos:end="135:63"><name pos:start="135:54" pos:end="135:63">dst_length</name></expr></argument>,

                                        <argument pos:start="137:41" pos:end="137:60"><expr pos:start="137:41" pos:end="137:60"><name pos:start="137:41" pos:end="137:49">buf_index</name> <operator pos:start="137:51" pos:end="137:51">+</operator> <name pos:start="137:53" pos:end="137:60">consumed</name></expr></argument>, <argument pos:start="137:63" pos:end="137:70"><expr pos:start="137:63" pos:end="137:70"><name pos:start="137:63" pos:end="137:70">next_avc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="141:13" pos:end="147:90"><if pos:start="141:13" pos:end="147:90">if <condition pos:start="141:16" pos:end="141:53">(<expr pos:start="141:17" pos:end="141:52"><name pos:start="141:17" pos:end="141:31"><name pos:start="141:17" pos:end="141:17">h</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:24">avctx</name><operator pos:start="141:25" pos:end="141:26">-&gt;</operator><name pos:start="141:27" pos:end="141:31">debug</name></name> <operator pos:start="141:33" pos:end="141:33">&amp;</operator> <name pos:start="141:35" pos:end="141:52">FF_DEBUG_STARTCODE</name></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="147:90"><block_content pos:start="143:17" pos:end="147:90">

                <expr_stmt pos:start="143:17" pos:end="147:90"><expr pos:start="143:17" pos:end="147:89"><call pos:start="143:17" pos:end="147:89"><name pos:start="143:17" pos:end="143:22">av_log</name><argument_list pos:start="143:23" pos:end="147:89">(<argument pos:start="143:24" pos:end="143:31"><expr pos:start="143:24" pos:end="143:31"><name pos:start="143:24" pos:end="143:31"><name pos:start="143:24" pos:end="143:24">h</name><operator pos:start="143:25" pos:end="143:26">-&gt;</operator><name pos:start="143:27" pos:end="143:31">avctx</name></name></expr></argument>, <argument pos:start="143:34" pos:end="143:45"><expr pos:start="143:34" pos:end="143:45"><name pos:start="143:34" pos:end="143:45">AV_LOG_DEBUG</name></expr></argument>,

                       <argument pos:start="145:24" pos:end="145:55"><expr pos:start="145:24" pos:end="145:55"><literal type="string" pos:start="145:24" pos:end="145:55">"NAL %d/%d at %d/%d length %d\n"</literal></expr></argument>,

                       <argument pos:start="147:24" pos:end="147:39"><expr pos:start="147:24" pos:end="147:39"><name pos:start="147:24" pos:end="147:39"><name pos:start="147:24" pos:end="147:24">h</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:39">nal_unit_type</name></name></expr></argument>, <argument pos:start="147:42" pos:end="147:55"><expr pos:start="147:42" pos:end="147:55"><name pos:start="147:42" pos:end="147:55"><name pos:start="147:42" pos:end="147:42">h</name><operator pos:start="147:43" pos:end="147:44">-&gt;</operator><name pos:start="147:45" pos:end="147:55">nal_ref_idc</name></name></expr></argument>, <argument pos:start="147:58" pos:end="147:66"><expr pos:start="147:58" pos:end="147:66"><name pos:start="147:58" pos:end="147:66">buf_index</name></expr></argument>, <argument pos:start="147:69" pos:end="147:76"><expr pos:start="147:69" pos:end="147:76"><name pos:start="147:69" pos:end="147:76">buf_size</name></expr></argument>, <argument pos:start="147:79" pos:end="147:88"><expr pos:start="147:79" pos:end="147:88"><name pos:start="147:79" pos:end="147:88">dst_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="151:13" pos:end="157:42"><if pos:start="151:13" pos:end="157:42">if <condition pos:start="151:16" pos:end="151:62">(<expr pos:start="151:17" pos:end="151:61"><name pos:start="151:17" pos:end="151:25"><name pos:start="151:17" pos:end="151:17">h</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:25">is_avc</name></name> <operator pos:start="151:27" pos:end="151:28">&amp;&amp;</operator> <operator pos:start="151:30" pos:end="151:30">(</operator><name pos:start="151:31" pos:end="151:37">nalsize</name> <operator pos:start="151:39" pos:end="151:40">!=</operator> <name pos:start="151:42" pos:end="151:49">consumed</name><operator pos:start="151:50" pos:end="151:50">)</operator> <operator pos:start="151:52" pos:end="151:53">&amp;&amp;</operator> <name pos:start="151:55" pos:end="151:61">nalsize</name></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="157:42"><block_content pos:start="153:17" pos:end="157:42">

                <expr_stmt pos:start="153:17" pos:end="157:42"><expr pos:start="153:17" pos:end="157:41"><call pos:start="153:17" pos:end="157:41"><name pos:start="153:17" pos:end="153:22">av_log</name><argument_list pos:start="153:23" pos:end="157:41">(<argument pos:start="153:24" pos:end="153:31"><expr pos:start="153:24" pos:end="153:31"><name pos:start="153:24" pos:end="153:31"><name pos:start="153:24" pos:end="153:24">h</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:31">avctx</name></name></expr></argument>, <argument pos:start="153:34" pos:end="153:45"><expr pos:start="153:34" pos:end="153:45"><name pos:start="153:34" pos:end="153:45">AV_LOG_DEBUG</name></expr></argument>,

                       <argument pos:start="155:24" pos:end="155:68"><expr pos:start="155:24" pos:end="155:68"><literal type="string" pos:start="155:24" pos:end="155:68">"AVC: Consumed only %d bytes instead of %d\n"</literal></expr></argument>,

                       <argument pos:start="157:24" pos:end="157:31"><expr pos:start="157:24" pos:end="157:31"><name pos:start="157:24" pos:end="157:31">consumed</name></expr></argument>, <argument pos:start="157:34" pos:end="157:40"><expr pos:start="157:34" pos:end="157:40"><name pos:start="157:34" pos:end="157:40">nalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="161:13" pos:end="161:34"><expr pos:start="161:13" pos:end="161:33"><name pos:start="161:13" pos:end="161:21">buf_index</name> <operator pos:start="161:23" pos:end="161:24">+=</operator> <name pos:start="161:26" pos:end="161:33">consumed</name></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:24"><expr pos:start="163:13" pos:end="163:23"><name pos:start="163:13" pos:end="163:21">nal_index</name><operator pos:start="163:22" pos:end="163:23">++</operator></expr>;</expr_stmt>



            <if_stmt pos:start="167:13" pos:end="173:25"><if pos:start="167:13" pos:end="173:25">if <condition pos:start="167:16" pos:end="171:44">(<expr pos:start="167:17" pos:end="171:43"><name pos:start="167:17" pos:end="167:33"><name pos:start="167:17" pos:end="167:21">avctx</name><operator pos:start="167:22" pos:end="167:23">-&gt;</operator><name pos:start="167:24" pos:end="167:33">skip_frame</name></name> <operator pos:start="167:35" pos:end="167:36">&gt;=</operator> <name pos:start="167:38" pos:end="167:53">AVDISCARD_NONREF</name> <operator pos:start="167:55" pos:end="167:56">&amp;&amp;</operator>

                <name pos:start="169:17" pos:end="169:30"><name pos:start="169:17" pos:end="169:17">h</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:30">nal_ref_idc</name></name> <operator pos:start="169:32" pos:end="169:33">==</operator> <literal type="number" pos:start="169:35" pos:end="169:35">0</literal> <operator pos:start="169:37" pos:end="169:38">&amp;&amp;</operator>

                <name pos:start="171:17" pos:end="171:32"><name pos:start="171:17" pos:end="171:17">h</name><operator pos:start="171:18" pos:end="171:19">-&gt;</operator><name pos:start="171:20" pos:end="171:32">nal_unit_type</name></name> <operator pos:start="171:34" pos:end="171:35">!=</operator> <name pos:start="171:37" pos:end="171:43">NAL_SEI</name></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="173:25"><block_content pos:start="173:17" pos:end="173:25">

                <continue pos:start="173:17" pos:end="173:25">continue;</continue></block_content></block></if></if_stmt>



<label pos:start="177:1" pos:end="177:6"><name pos:start="177:1" pos:end="177:5">again</name>:</label>

            <if_stmt pos:start="179:13" pos:end="183:34"><if pos:start="179:13" pos:end="183:34">if <condition pos:start="179:16" pos:end="181:37">(   <expr pos:start="179:20" pos:end="181:36"><operator pos:start="179:20" pos:end="179:20">(</operator><operator pos:start="179:21" pos:end="179:21">!</operator><operator pos:start="179:22" pos:end="179:22">(</operator><name pos:start="179:23" pos:end="179:47"><name pos:start="179:23" pos:end="179:27">avctx</name><operator pos:start="179:28" pos:end="179:29">-&gt;</operator><name pos:start="179:30" pos:end="179:47">active_thread_type</name></name> <operator pos:start="179:49" pos:end="179:49">&amp;</operator> <name pos:start="179:51" pos:end="179:65">FF_THREAD_FRAME</name><operator pos:start="179:66" pos:end="179:66">)</operator> <operator pos:start="179:68" pos:end="179:69">||</operator> <name pos:start="179:71" pos:end="179:81">nals_needed</name> <operator pos:start="179:83" pos:end="179:84">&gt;=</operator> <name pos:start="179:86" pos:end="179:94">nal_index</name><operator pos:start="179:95" pos:end="179:95">)</operator>

                <operator pos:start="181:17" pos:end="181:18">&amp;&amp;</operator> <operator pos:start="181:20" pos:end="181:20">!</operator><name pos:start="181:21" pos:end="181:36"><name pos:start="181:21" pos:end="181:21">h</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:36">current_slice</name></name></expr>)</condition><block type="pseudo" pos:start="183:17" pos:end="183:34"><block_content pos:start="183:17" pos:end="183:34">

                <expr_stmt pos:start="183:17" pos:end="183:34"><expr pos:start="183:17" pos:end="183:33"><name pos:start="183:17" pos:end="183:28"><name pos:start="183:17" pos:end="183:17">h</name><operator pos:start="183:18" pos:end="183:19">-&gt;</operator><name pos:start="183:20" pos:end="183:28">au_pps_id</name></name> <operator pos:start="183:30" pos:end="183:30">=</operator> <operator pos:start="183:32" pos:end="183:32">-</operator><literal type="number" pos:start="183:33" pos:end="183:33">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="185:13" pos:end="189:31">/* Ignore per frame NAL unit type during extradata

             * parsing. Decoding slices is not possible in codec init

             * with frame-mt */</comment>

            <if_stmt pos:start="191:13" pos:end="553:39"><if pos:start="191:13" pos:end="553:39">if <condition pos:start="191:16" pos:end="191:32">(<expr pos:start="191:17" pos:end="191:31"><name pos:start="191:17" pos:end="191:31">parse_extradata</name></expr>)</condition> <block pos:start="191:34" pos:end="553:39">{<block_content pos:start="193:17" pos:end="553:39">

                <switch pos:start="193:17" pos:end="553:39">switch <condition pos:start="193:24" pos:end="193:41">(<expr pos:start="193:25" pos:end="193:40"><name pos:start="193:25" pos:end="193:40"><name pos:start="193:25" pos:end="193:25">h</name><operator pos:start="193:26" pos:end="193:27">-&gt;</operator><name pos:start="193:28" pos:end="193:40">nal_unit_type</name></name></expr>)</condition> <block pos:start="193:43" pos:end="553:39">{<block_content pos:start="195:17" pos:end="553:39">

                <case pos:start="195:17" pos:end="195:35">case <expr pos:start="195:22" pos:end="195:34"><name pos:start="195:22" pos:end="195:34">NAL_IDR_SLICE</name></expr>:</case>

                <case pos:start="197:17" pos:end="197:31">case <expr pos:start="197:22" pos:end="197:30"><name pos:start="197:22" pos:end="197:30">NAL_SLICE</name></expr>:</case>

                <case pos:start="199:17" pos:end="199:29">case <expr pos:start="199:22" pos:end="199:28"><name pos:start="199:22" pos:end="199:28">NAL_DPA</name></expr>:</case>

                <case pos:start="201:17" pos:end="201:29">case <expr pos:start="201:22" pos:end="201:28"><name pos:start="201:22" pos:end="201:28">NAL_DPB</name></expr>:</case>

                <case pos:start="203:17" pos:end="203:29">case <expr pos:start="203:22" pos:end="203:28"><name pos:start="203:22" pos:end="203:28">NAL_DPC</name></expr>:</case>

                    <expr_stmt pos:start="205:21" pos:end="209:45"><expr pos:start="205:21" pos:end="209:44"><call pos:start="205:21" pos:end="209:44"><name pos:start="205:21" pos:end="205:26">av_log</name><argument_list pos:start="205:27" pos:end="209:44">(<argument pos:start="205:28" pos:end="205:35"><expr pos:start="205:28" pos:end="205:35"><name pos:start="205:28" pos:end="205:35"><name pos:start="205:28" pos:end="205:28">h</name><operator pos:start="205:29" pos:end="205:30">-&gt;</operator><name pos:start="205:31" pos:end="205:35">avctx</name></name></expr></argument>, <argument pos:start="205:38" pos:end="205:51"><expr pos:start="205:38" pos:end="205:51"><name pos:start="205:38" pos:end="205:51">AV_LOG_WARNING</name></expr></argument>,

                           <argument pos:start="207:28" pos:end="207:73"><expr pos:start="207:28" pos:end="207:73"><literal type="string" pos:start="207:28" pos:end="207:73">"Ignoring NAL %d in global header/extradata\n"</literal></expr></argument>,

                           <argument pos:start="209:28" pos:end="209:43"><expr pos:start="209:28" pos:end="209:43"><name pos:start="209:28" pos:end="209:43"><name pos:start="209:28" pos:end="209:28">h</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:43">nal_unit_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line" pos:start="211:21" pos:end="211:48">// fall through to next case</comment>

                <case pos:start="213:17" pos:end="213:41">case <expr pos:start="213:22" pos:end="213:40"><name pos:start="213:22" pos:end="213:40">NAL_AUXILIARY_SLICE</name></expr>:</case>

                    <expr_stmt pos:start="215:21" pos:end="215:53"><expr pos:start="215:21" pos:end="215:52"><name pos:start="215:21" pos:end="215:36"><name pos:start="215:21" pos:end="215:21">h</name><operator pos:start="215:22" pos:end="215:23">-&gt;</operator><name pos:start="215:24" pos:end="215:36">nal_unit_type</name></name> <operator pos:start="215:38" pos:end="215:38">=</operator> <name pos:start="215:40" pos:end="215:52">NAL_FF_IGNORE</name></expr>;</expr_stmt>





            <expr_stmt pos:start="221:13" pos:end="221:20"><expr pos:start="221:13" pos:end="221:19"><name pos:start="221:13" pos:end="221:15">err</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <literal type="number" pos:start="221:19" pos:end="221:19">0</literal></expr>;</expr_stmt>



            <switch pos:start="225:13" pos:end="553:39">switch <condition pos:start="225:20" pos:end="225:37">(<expr pos:start="225:21" pos:end="225:36"><name pos:start="225:21" pos:end="225:36"><name pos:start="225:21" pos:end="225:21">h</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:36">nal_unit_type</name></name></expr>)</condition> <block pos:start="225:39" pos:end="553:39">{<block_content pos:start="227:13" pos:end="553:39">

            <case pos:start="227:13" pos:end="227:31">case <expr pos:start="227:18" pos:end="227:30"><name pos:start="227:18" pos:end="227:30">NAL_IDR_SLICE</name></expr>:</case>

                <if_stmt pos:start="229:17" pos:end="553:39"><if pos:start="229:17" pos:end="553:39">if <condition pos:start="229:20" pos:end="229:44">(<expr pos:start="229:21" pos:end="229:43"><operator pos:start="229:21" pos:end="229:21">(</operator><name pos:start="229:22" pos:end="229:27"><name pos:start="229:22" pos:end="229:24">ptr</name><index pos:start="229:25" pos:end="229:27">[<expr pos:start="229:26" pos:end="229:26"><literal type="number" pos:start="229:26" pos:end="229:26">0</literal></expr>]</index></name> <operator pos:start="229:29" pos:end="229:29">&amp;</operator> <literal type="number" pos:start="229:31" pos:end="229:34">0xFC</literal><operator pos:start="229:35" pos:end="229:35">)</operator> <operator pos:start="229:37" pos:end="229:38">==</operator> <literal type="number" pos:start="229:40" pos:end="229:43">0x98</literal></expr>)</condition> <block pos:start="229:46" pos:end="553:39">{<block_content pos:start="231:21" pos:end="553:39">

                    <expr_stmt pos:start="231:21" pos:end="231:80"><expr pos:start="231:21" pos:end="231:79"><call pos:start="231:21" pos:end="231:79"><name pos:start="231:21" pos:end="231:26">av_log</name><argument_list pos:start="231:27" pos:end="231:79">(<argument pos:start="231:28" pos:end="231:35"><expr pos:start="231:28" pos:end="231:35"><name pos:start="231:28" pos:end="231:35"><name pos:start="231:28" pos:end="231:28">h</name><operator pos:start="231:29" pos:end="231:30">-&gt;</operator><name pos:start="231:31" pos:end="231:35">avctx</name></name></expr></argument>, <argument pos:start="231:38" pos:end="231:49"><expr pos:start="231:38" pos:end="231:49"><name pos:start="231:38" pos:end="231:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:52" pos:end="231:78"><expr pos:start="231:52" pos:end="231:78"><literal type="string" pos:start="231:52" pos:end="231:78">"Invalid inter IDR frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:51"><expr pos:start="233:21" pos:end="233:50"><name pos:start="233:21" pos:end="233:40"><name pos:start="233:21" pos:end="233:21">h</name><operator pos:start="233:22" pos:end="233:23">-&gt;</operator><name pos:start="233:24" pos:end="233:40">next_outputed_poc</name></name> <operator pos:start="233:42" pos:end="233:42">=</operator> <name pos:start="233:44" pos:end="233:50">INT_MIN</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="235:21" pos:end="235:29"><expr pos:start="235:21" pos:end="235:28"><name pos:start="235:21" pos:end="235:23">ret</name> <operator pos:start="235:25" pos:end="235:25">=</operator> <operator pos:start="235:27" pos:end="235:27">-</operator><literal type="number" pos:start="235:28" pos:end="235:28">1</literal></expr>;</expr_stmt>



                <if_stmt pos:start="239:17" pos:end="553:39"><if pos:start="239:17" pos:end="553:39">if <condition pos:start="239:20" pos:end="239:54">(<expr pos:start="239:21" pos:end="239:53"><name pos:start="239:21" pos:end="239:36"><name pos:start="239:21" pos:end="239:21">h</name><operator pos:start="239:22" pos:end="239:23">-&gt;</operator><name pos:start="239:24" pos:end="239:36">nal_unit_type</name></name> <operator pos:start="239:38" pos:end="239:39">!=</operator> <name pos:start="239:41" pos:end="239:53">NAL_IDR_SLICE</name></expr>)</condition> <block pos:start="239:56" pos:end="553:39">{<block_content pos:start="241:21" pos:end="553:39">

                    <expr_stmt pos:start="241:21" pos:end="243:70"><expr pos:start="241:21" pos:end="243:69"><call pos:start="241:21" pos:end="243:69"><name pos:start="241:21" pos:end="241:26">av_log</name><argument_list pos:start="241:27" pos:end="243:69">(<argument pos:start="241:28" pos:end="241:35"><expr pos:start="241:28" pos:end="241:35"><name pos:start="241:28" pos:end="241:35"><name pos:start="241:28" pos:end="241:28">h</name><operator pos:start="241:29" pos:end="241:30">-&gt;</operator><name pos:start="241:31" pos:end="241:35">avctx</name></name></expr></argument>, <argument pos:start="241:38" pos:end="241:49"><expr pos:start="241:38" pos:end="241:49"><name pos:start="241:38" pos:end="241:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="243:28" pos:end="243:68"><expr pos:start="243:28" pos:end="243:68"><literal type="string" pos:start="243:28" pos:end="243:68">"Invalid mix of idr and non-idr slices\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="245:21" pos:end="245:29"><expr pos:start="245:21" pos:end="245:28"><name pos:start="245:21" pos:end="245:23">ret</name> <operator pos:start="245:25" pos:end="245:25">=</operator> <operator pos:start="245:27" pos:end="245:27">-</operator><literal type="number" pos:start="245:28" pos:end="245:28">1</literal></expr>;</expr_stmt>



                <if_stmt pos:start="249:17" pos:end="553:39"><if pos:start="249:17" pos:end="553:39">if<condition pos:start="249:19" pos:end="249:32">(<expr pos:start="249:20" pos:end="249:31"><operator pos:start="249:20" pos:end="249:20">!</operator><name pos:start="249:21" pos:end="249:31">idr_cleared</name></expr>)</condition> <block pos:start="249:34" pos:end="553:39">{<block_content pos:start="251:21" pos:end="553:39">

                    <if_stmt pos:start="251:21" pos:end="553:39"><if pos:start="251:21" pos:end="553:39">if <condition pos:start="251:24" pos:end="251:90">(<expr pos:start="251:25" pos:end="251:89"><name pos:start="251:25" pos:end="251:40"><name pos:start="251:25" pos:end="251:25">h</name><operator pos:start="251:26" pos:end="251:27">-&gt;</operator><name pos:start="251:28" pos:end="251:40">current_slice</name></name> <operator pos:start="251:42" pos:end="251:43">&amp;&amp;</operator> <operator pos:start="251:45" pos:end="251:45">(</operator><name pos:start="251:46" pos:end="251:70"><name pos:start="251:46" pos:end="251:50">avctx</name><operator pos:start="251:51" pos:end="251:52">-&gt;</operator><name pos:start="251:53" pos:end="251:70">active_thread_type</name></name> <operator pos:start="251:72" pos:end="251:72">&amp;</operator> <name pos:start="251:74" pos:end="251:88">FF_THREAD_SLICE</name><operator pos:start="251:89" pos:end="251:89">)</operator></expr>)</condition> <block pos:start="251:92" pos:end="553:39">{<block_content pos:start="253:25" pos:end="553:39">

                        <expr_stmt pos:start="253:25" pos:end="253:135"><expr pos:start="253:25" pos:end="253:134"><call pos:start="253:25" pos:end="253:134"><name pos:start="253:25" pos:end="253:30">av_log</name><argument_list pos:start="253:31" pos:end="253:134">(<argument pos:start="253:32" pos:end="253:32"><expr pos:start="253:32" pos:end="253:32"><name pos:start="253:32" pos:end="253:32">h</name></expr></argument>, <argument pos:start="253:35" pos:end="253:46"><expr pos:start="253:35" pos:end="253:46"><name pos:start="253:35" pos:end="253:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="253:49" pos:end="253:133"><expr pos:start="253:49" pos:end="253:133"><literal type="string" pos:start="253:49" pos:end="253:133">"invalid mixed IDR / non IDR frames cannot be decoded in slice multithreading mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="255:25" pos:end="255:50"><expr pos:start="255:25" pos:end="255:49"><name pos:start="255:25" pos:end="255:27">ret</name> <operator pos:start="255:29" pos:end="255:29">=</operator> <name pos:start="255:31" pos:end="255:49">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="259:21" pos:end="259:27"><expr pos:start="259:21" pos:end="259:26"><call pos:start="259:21" pos:end="259:26"><name pos:start="259:21" pos:end="259:23">idr</name><argument_list pos:start="259:24" pos:end="259:26">(<argument pos:start="259:25" pos:end="259:25"><expr pos:start="259:25" pos:end="259:25"><name pos:start="259:25" pos:end="259:25">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="259:29" pos:end="259:92">// FIXME ensure we don't lose some frames if there is reordering</comment>


                <expr_stmt pos:start="262:17" pos:end="262:32"><expr pos:start="262:17" pos:end="262:31"><name pos:start="262:17" pos:end="262:27">idr_cleared</name> <operator pos:start="262:29" pos:end="262:29">=</operator> <literal type="number" pos:start="262:31" pos:end="262:31">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="264:17" pos:end="264:42"><expr pos:start="264:17" pos:end="264:41"><name pos:start="264:17" pos:end="264:37"><name pos:start="264:17" pos:end="264:17">h</name><operator pos:start="264:18" pos:end="264:19">-&gt;</operator><name pos:start="264:20" pos:end="264:37">has_recovery_point</name></name> <operator pos:start="264:39" pos:end="264:39">=</operator> <literal type="number" pos:start="264:41" pos:end="264:41">1</literal></expr>;</expr_stmt>

            <case pos:start="266:13" pos:end="266:27">case <expr pos:start="266:18" pos:end="266:26"><name pos:start="266:18" pos:end="266:26">NAL_SLICE</name></expr>:</case>

                <expr_stmt pos:start="268:17" pos:end="268:56"><expr pos:start="268:17" pos:end="268:55"><call pos:start="268:17" pos:end="268:55"><name pos:start="268:17" pos:end="268:29">init_get_bits</name><argument_list pos:start="268:30" pos:end="268:55">(<argument pos:start="268:31" pos:end="268:37"><expr pos:start="268:31" pos:end="268:37"><operator pos:start="268:31" pos:end="268:31">&amp;</operator><name pos:start="268:32" pos:end="268:37"><name pos:start="268:32" pos:end="268:33">sl</name><operator pos:start="268:34" pos:end="268:35">-&gt;</operator><name pos:start="268:36" pos:end="268:37">gb</name></name></expr></argument>, <argument pos:start="268:40" pos:end="268:42"><expr pos:start="268:40" pos:end="268:42"><name pos:start="268:40" pos:end="268:42">ptr</name></expr></argument>, <argument pos:start="268:45" pos:end="268:54"><expr pos:start="268:45" pos:end="268:54"><name pos:start="268:45" pos:end="268:54">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="272:17" pos:end="274:26"><if pos:start="272:17" pos:end="274:26">if <condition pos:start="272:20" pos:end="272:63">(<expr pos:start="272:21" pos:end="272:62"><operator pos:start="272:21" pos:end="272:21">(</operator><name pos:start="272:22" pos:end="272:24">err</name> <operator pos:start="272:26" pos:end="272:26">=</operator> <call pos:start="272:28" pos:end="272:61"><name pos:start="272:28" pos:end="272:54">ff_h264_decode_slice_header</name><argument_list pos:start="272:55" pos:end="272:61">(<argument pos:start="272:56" pos:end="272:56"><expr pos:start="272:56" pos:end="272:56"><name pos:start="272:56" pos:end="272:56">h</name></expr></argument>, <argument pos:start="272:59" pos:end="272:60"><expr pos:start="272:59" pos:end="272:60"><name pos:start="272:59" pos:end="272:60">sl</name></expr></argument>)</argument_list></call><operator pos:start="272:62" pos:end="272:62">)</operator></expr>)</condition><block type="pseudo" pos:start="274:21" pos:end="274:26"><block_content pos:start="274:21" pos:end="274:26">

                    <break pos:start="274:21" pos:end="274:26">break;</break></block_content></block></if></if_stmt>



                <if_stmt pos:start="278:17" pos:end="553:39"><if pos:start="278:17" pos:end="553:39">if <condition pos:start="278:20" pos:end="278:51">(<expr pos:start="278:21" pos:end="278:50"><name pos:start="278:21" pos:end="278:45"><name pos:start="278:21" pos:end="278:21">h</name><operator pos:start="278:22" pos:end="278:23">-&gt;</operator><name pos:start="278:24" pos:end="278:45">sei_recovery_frame_cnt</name></name> <operator pos:start="278:47" pos:end="278:48">&gt;=</operator> <literal type="number" pos:start="278:50" pos:end="278:50">0</literal></expr>)</condition> <block pos:start="278:53" pos:end="553:39">{<block_content pos:start="280:21" pos:end="553:39">

                    <if_stmt pos:start="280:21" pos:end="282:52"><if pos:start="280:21" pos:end="282:52">if <condition pos:start="280:24" pos:end="280:109">(<expr pos:start="280:25" pos:end="280:108"><name pos:start="280:25" pos:end="280:36"><name pos:start="280:25" pos:end="280:25">h</name><operator pos:start="280:26" pos:end="280:27">-&gt;</operator><name pos:start="280:28" pos:end="280:36">frame_num</name></name> <operator pos:start="280:38" pos:end="280:39">!=</operator> <name pos:start="280:41" pos:end="280:65"><name pos:start="280:41" pos:end="280:41">h</name><operator pos:start="280:42" pos:end="280:43">-&gt;</operator><name pos:start="280:44" pos:end="280:65">sei_recovery_frame_cnt</name></name> <operator pos:start="280:67" pos:end="280:68">||</operator> <name pos:start="280:70" pos:end="280:87"><name pos:start="280:70" pos:end="280:71">sl</name><operator pos:start="280:72" pos:end="280:73">-&gt;</operator><name pos:start="280:74" pos:end="280:87">slice_type_nos</name></name> <operator pos:start="280:89" pos:end="280:90">!=</operator> <name pos:start="280:92" pos:end="280:108">AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo" pos:start="282:25" pos:end="282:52"><block_content pos:start="282:25" pos:end="282:52">

                        <expr_stmt pos:start="282:25" pos:end="282:52"><expr pos:start="282:25" pos:end="282:51"><name pos:start="282:25" pos:end="282:47"><name pos:start="282:25" pos:end="282:25">h</name><operator pos:start="282:26" pos:end="282:27">-&gt;</operator><name pos:start="282:28" pos:end="282:47">valid_recovery_point</name></name> <operator pos:start="282:49" pos:end="282:49">=</operator> <literal type="number" pos:start="282:51" pos:end="282:51">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <if_stmt pos:start="286:21" pos:end="553:39"><if pos:start="286:21" pos:end="553:39">if <condition pos:start="286:24" pos:end="288:131">(   <expr pos:start="286:28" pos:end="288:130"><name pos:start="286:28" pos:end="286:44"><name pos:start="286:28" pos:end="286:28">h</name><operator pos:start="286:29" pos:end="286:30">-&gt;</operator><name pos:start="286:31" pos:end="286:44">recovery_frame</name></name> <operator pos:start="286:46" pos:end="286:46">&lt;</operator> <literal type="number" pos:start="286:48" pos:end="286:48">0</literal>

                        <operator pos:start="288:25" pos:end="288:26">||</operator> <operator pos:start="288:28" pos:end="288:28">(</operator><operator pos:start="288:29" pos:end="288:29">(</operator><name pos:start="288:30" pos:end="288:46"><name pos:start="288:30" pos:end="288:30">h</name><operator pos:start="288:31" pos:end="288:32">-&gt;</operator><name pos:start="288:33" pos:end="288:46">recovery_frame</name></name> <operator pos:start="288:48" pos:end="288:48">-</operator> <name pos:start="288:50" pos:end="288:61"><name pos:start="288:50" pos:end="288:50">h</name><operator pos:start="288:51" pos:end="288:52">-&gt;</operator><name pos:start="288:53" pos:end="288:61">frame_num</name></name><operator pos:start="288:62" pos:end="288:62">)</operator> <operator pos:start="288:64" pos:end="288:64">&amp;</operator> <operator pos:start="288:66" pos:end="288:66">(</operator><operator pos:start="288:67" pos:end="288:67">(</operator><literal type="number" pos:start="288:68" pos:end="288:68">1</literal> <operator pos:start="288:70" pos:end="288:71">&lt;&lt;</operator> <name pos:start="288:73" pos:end="288:97"><name pos:start="288:73" pos:end="288:73">h</name><operator pos:start="288:74" pos:end="288:75">-&gt;</operator><name pos:start="288:76" pos:end="288:78">sps</name><operator pos:start="288:79" pos:end="288:79">.</operator><name pos:start="288:80" pos:end="288:97">log2_max_frame_num</name></name><operator pos:start="288:98" pos:end="288:98">)</operator><operator pos:start="288:99" pos:end="288:99">-</operator><literal type="number" pos:start="288:100" pos:end="288:100">1</literal><operator pos:start="288:101" pos:end="288:101">)</operator><operator pos:start="288:102" pos:end="288:102">)</operator> <operator pos:start="288:104" pos:end="288:104">&gt;</operator> <name pos:start="288:106" pos:end="288:130"><name pos:start="288:106" pos:end="288:106">h</name><operator pos:start="288:107" pos:end="288:108">-&gt;</operator><name pos:start="288:109" pos:end="288:130">sei_recovery_frame_cnt</name></name></expr>)</condition> <block pos:start="288:133" pos:end="553:39">{<block_content pos:start="290:25" pos:end="553:39">

                        <expr_stmt pos:start="290:25" pos:end="292:83"><expr pos:start="290:25" pos:end="292:82"><name pos:start="290:25" pos:end="290:41"><name pos:start="290:25" pos:end="290:25">h</name><operator pos:start="290:26" pos:end="290:27">-&gt;</operator><name pos:start="290:28" pos:end="290:41">recovery_frame</name></name> <operator pos:start="290:43" pos:end="290:43">=</operator> <operator pos:start="290:45" pos:end="290:45">(</operator><name pos:start="290:46" pos:end="290:57"><name pos:start="290:46" pos:end="290:46">h</name><operator pos:start="290:47" pos:end="290:48">-&gt;</operator><name pos:start="290:49" pos:end="290:57">frame_num</name></name> <operator pos:start="290:59" pos:end="290:59">+</operator> <name pos:start="290:61" pos:end="290:85"><name pos:start="290:61" pos:end="290:61">h</name><operator pos:start="290:62" pos:end="290:63">-&gt;</operator><name pos:start="290:64" pos:end="290:85">sei_recovery_frame_cnt</name></name><operator pos:start="290:86" pos:end="290:86">)</operator> <operator pos:start="290:88" pos:end="290:88">&amp;</operator>

                                            <operator pos:start="292:45" pos:end="292:45">(</operator><operator pos:start="292:46" pos:end="292:46">(</operator><literal type="number" pos:start="292:47" pos:end="292:47">1</literal> <operator pos:start="292:49" pos:end="292:50">&lt;&lt;</operator> <name pos:start="292:52" pos:end="292:76"><name pos:start="292:52" pos:end="292:52">h</name><operator pos:start="292:53" pos:end="292:54">-&gt;</operator><name pos:start="292:55" pos:end="292:57">sps</name><operator pos:start="292:58" pos:end="292:58">.</operator><name pos:start="292:59" pos:end="292:76">log2_max_frame_num</name></name><operator pos:start="292:77" pos:end="292:77">)</operator> <operator pos:start="292:79" pos:end="292:79">-</operator> <literal type="number" pos:start="292:81" pos:end="292:81">1</literal><operator pos:start="292:82" pos:end="292:82">)</operator></expr>;</expr_stmt>



                        <if_stmt pos:start="296:25" pos:end="298:61"><if pos:start="296:25" pos:end="298:61">if <condition pos:start="296:28" pos:end="296:53">(<expr pos:start="296:29" pos:end="296:52"><operator pos:start="296:29" pos:end="296:29">!</operator><name pos:start="296:30" pos:end="296:52"><name pos:start="296:30" pos:end="296:30">h</name><operator pos:start="296:31" pos:end="296:32">-&gt;</operator><name pos:start="296:33" pos:end="296:52">valid_recovery_point</name></name></expr>)</condition><block type="pseudo" pos:start="298:29" pos:end="298:61"><block_content pos:start="298:29" pos:end="298:61">

                            <expr_stmt pos:start="298:29" pos:end="298:61"><expr pos:start="298:29" pos:end="298:60"><name pos:start="298:29" pos:end="298:45"><name pos:start="298:29" pos:end="298:29">h</name><operator pos:start="298:30" pos:end="298:31">-&gt;</operator><name pos:start="298:32" pos:end="298:45">recovery_frame</name></name> <operator pos:start="298:47" pos:end="298:47">=</operator> <name pos:start="298:49" pos:end="298:60"><name pos:start="298:49" pos:end="298:49">h</name><operator pos:start="298:50" pos:end="298:51">-&gt;</operator><name pos:start="298:52" pos:end="298:60">frame_num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>





                <expr_stmt pos:start="304:17" pos:end="306:56"><expr pos:start="304:17" pos:end="306:55"><name pos:start="304:17" pos:end="304:43"><name pos:start="304:17" pos:end="304:17">h</name><operator pos:start="304:18" pos:end="304:19">-&gt;</operator><name pos:start="304:20" pos:end="304:30">cur_pic_ptr</name><operator pos:start="304:31" pos:end="304:32">-&gt;</operator><name pos:start="304:33" pos:end="304:33">f</name><operator pos:start="304:34" pos:end="304:34">.</operator><name pos:start="304:35" pos:end="304:43">key_frame</name></name> <operator pos:start="304:45" pos:end="304:46">|=</operator>

                    <operator pos:start="306:21" pos:end="306:21">(</operator><name pos:start="306:22" pos:end="306:37"><name pos:start="306:22" pos:end="306:22">h</name><operator pos:start="306:23" pos:end="306:24">-&gt;</operator><name pos:start="306:25" pos:end="306:37">nal_unit_type</name></name> <operator pos:start="306:39" pos:end="306:40">==</operator> <name pos:start="306:42" pos:end="306:54">NAL_IDR_SLICE</name><operator pos:start="306:55" pos:end="306:55">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="310:17" pos:end="553:39"><if pos:start="310:17" pos:end="553:39">if <condition pos:start="310:20" pos:end="312:54">(<expr pos:start="310:21" pos:end="312:53"><name pos:start="310:21" pos:end="310:36"><name pos:start="310:21" pos:end="310:21">h</name><operator pos:start="310:22" pos:end="310:23">-&gt;</operator><name pos:start="310:24" pos:end="310:36">nal_unit_type</name></name> <operator pos:start="310:38" pos:end="310:39">==</operator> <name pos:start="310:41" pos:end="310:53">NAL_IDR_SLICE</name> <operator pos:start="310:55" pos:end="310:56">||</operator>

                    <name pos:start="312:21" pos:end="312:37"><name pos:start="312:21" pos:end="312:21">h</name><operator pos:start="312:22" pos:end="312:23">-&gt;</operator><name pos:start="312:24" pos:end="312:37">recovery_frame</name></name> <operator pos:start="312:39" pos:end="312:40">==</operator> <name pos:start="312:42" pos:end="312:53"><name pos:start="312:42" pos:end="312:42">h</name><operator pos:start="312:43" pos:end="312:44">-&gt;</operator><name pos:start="312:45" pos:end="312:53">frame_num</name></name></expr>)</condition> <block pos:start="312:56" pos:end="553:39">{<block_content pos:start="314:21" pos:end="553:39">

                    <expr_stmt pos:start="314:21" pos:end="314:51"><expr pos:start="314:21" pos:end="314:50"><name pos:start="314:21" pos:end="314:37"><name pos:start="314:21" pos:end="314:21">h</name><operator pos:start="314:22" pos:end="314:23">-&gt;</operator><name pos:start="314:24" pos:end="314:37">recovery_frame</name></name>         <operator pos:start="314:47" pos:end="314:47">=</operator> <operator pos:start="314:49" pos:end="314:49">-</operator><literal type="number" pos:start="314:50" pos:end="314:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="316:21" pos:end="316:50"><expr pos:start="316:21" pos:end="316:49"><name pos:start="316:21" pos:end="316:45"><name pos:start="316:21" pos:end="316:21">h</name><operator pos:start="316:22" pos:end="316:23">-&gt;</operator><name pos:start="316:24" pos:end="316:34">cur_pic_ptr</name><operator pos:start="316:35" pos:end="316:36">-&gt;</operator><name pos:start="316:37" pos:end="316:45">recovered</name></name> <operator pos:start="316:47" pos:end="316:47">=</operator> <literal type="number" pos:start="316:49" pos:end="316:49">1</literal></expr>;</expr_stmt>


                <comment type="line" pos:start="319:17" pos:end="319:78">// If we have an IDR, all frames after it in decoded order are</comment>

                <comment type="line" pos:start="321:17" pos:end="321:31">// "recovered".</comment>

                <if_stmt pos:start="323:17" pos:end="325:62"><if pos:start="323:17" pos:end="325:62">if <condition pos:start="323:20" pos:end="323:54">(<expr pos:start="323:21" pos:end="323:53"><name pos:start="323:21" pos:end="323:36"><name pos:start="323:21" pos:end="323:21">h</name><operator pos:start="323:22" pos:end="323:23">-&gt;</operator><name pos:start="323:24" pos:end="323:36">nal_unit_type</name></name> <operator pos:start="323:38" pos:end="323:39">==</operator> <name pos:start="323:41" pos:end="323:53">NAL_IDR_SLICE</name></expr>)</condition><block type="pseudo" pos:start="325:21" pos:end="325:62"><block_content pos:start="325:21" pos:end="325:62">

                    <expr_stmt pos:start="325:21" pos:end="325:62"><expr pos:start="325:21" pos:end="325:61"><name pos:start="325:21" pos:end="325:38"><name pos:start="325:21" pos:end="325:21">h</name><operator pos:start="325:22" pos:end="325:23">-&gt;</operator><name pos:start="325:24" pos:end="325:38">frame_recovered</name></name> <operator pos:start="325:40" pos:end="325:41">|=</operator> <name pos:start="325:43" pos:end="325:61">FRAME_RECOVERED_IDR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:81"><expr pos:start="327:17" pos:end="327:80"><name pos:start="327:17" pos:end="327:34"><name pos:start="327:17" pos:end="327:17">h</name><operator pos:start="327:18" pos:end="327:19">-&gt;</operator><name pos:start="327:20" pos:end="327:34">frame_recovered</name></name> <operator pos:start="327:36" pos:end="327:37">|=</operator> <literal type="number" pos:start="327:39" pos:end="327:39">3</literal><operator pos:start="327:40" pos:end="327:40">*</operator><operator pos:start="327:41" pos:end="327:41">!</operator><operator pos:start="327:42" pos:end="327:42">!</operator><operator pos:start="327:43" pos:end="327:43">(</operator><name pos:start="327:44" pos:end="327:56"><name pos:start="327:44" pos:end="327:48">avctx</name><operator pos:start="327:49" pos:end="327:50">-&gt;</operator><name pos:start="327:51" pos:end="327:56">flags2</name></name> <operator pos:start="327:58" pos:end="327:58">&amp;</operator> <name pos:start="327:60" pos:end="327:79">CODEC_FLAG2_SHOW_ALL</name><operator pos:start="327:80" pos:end="327:80">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="332:0"><expr pos:start="329:17" pos:end="329:84"><name pos:start="329:17" pos:end="329:34"><name pos:start="329:17" pos:end="329:17">h</name><operator pos:start="329:18" pos:end="329:19">-&gt;</operator><name pos:start="329:20" pos:end="329:34">frame_recovered</name></name> <operator pos:start="329:36" pos:end="329:37">|=</operator> <literal type="number" pos:start="329:39" pos:end="329:39">3</literal><operator pos:start="329:40" pos:end="329:40">*</operator><operator pos:start="329:41" pos:end="329:41">!</operator><operator pos:start="329:42" pos:end="329:42">!</operator><operator pos:start="329:43" pos:end="329:43">(</operator><name pos:start="329:44" pos:end="329:55"><name pos:start="329:44" pos:end="329:48">avctx</name><operator pos:start="329:49" pos:end="329:50">-&gt;</operator><name pos:start="329:51" pos:end="329:55">flags</name></name> <operator pos:start="329:57" pos:end="329:57">&amp;</operator> <name pos:start="329:59" pos:end="329:83">CODEC_FLAG_OUTPUT_CORRUPT</name><operator pos:start="329:84" pos:end="329:84">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="331:1" pos:end="331:5">#<cpp:directive pos:start="331:2" pos:end="331:3">if</cpp:directive> <expr pos:start="331:5" pos:end="331:5"><literal type="number" pos:start="331:5" pos:end="331:5">1</literal></expr></cpp:if>

                <expr_stmt pos:start="333:17" pos:end="336:0"><expr pos:start="333:17" pos:end="333:63"><name pos:start="333:17" pos:end="333:41"><name pos:start="333:17" pos:end="333:17">h</name><operator pos:start="333:18" pos:end="333:19">-&gt;</operator><name pos:start="333:20" pos:end="333:30">cur_pic_ptr</name><operator pos:start="333:31" pos:end="333:32">-&gt;</operator><name pos:start="333:33" pos:end="333:41">recovered</name></name> <operator pos:start="333:43" pos:end="333:44">|=</operator> <name pos:start="333:46" pos:end="333:63"><name pos:start="333:46" pos:end="333:46">h</name><operator pos:start="333:47" pos:end="333:48">-&gt;</operator><name pos:start="333:49" pos:end="333:63">frame_recovered</name></name></expr>;</expr_stmt>

<cpp:else pos:start="335:1" pos:end="335:5">#<cpp:directive pos:start="335:2" pos:end="335:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="337:17" pos:end="340:0"><expr pos:start="337:17" pos:end="337:89"><name pos:start="337:17" pos:end="337:41"><name pos:start="337:17" pos:end="337:17">h</name><operator pos:start="337:18" pos:end="337:19">-&gt;</operator><name pos:start="337:20" pos:end="337:30">cur_pic_ptr</name><operator pos:start="337:31" pos:end="337:32">-&gt;</operator><name pos:start="337:33" pos:end="337:41">recovered</name></name> <operator pos:start="337:43" pos:end="337:44">|=</operator> <operator pos:start="337:46" pos:end="337:46">!</operator><operator pos:start="337:47" pos:end="337:47">!</operator><operator pos:start="337:48" pos:end="337:48">(</operator><name pos:start="337:49" pos:end="337:66"><name pos:start="337:49" pos:end="337:49">h</name><operator pos:start="337:50" pos:end="337:51">-&gt;</operator><name pos:start="337:52" pos:end="337:66">frame_recovered</name></name> <operator pos:start="337:68" pos:end="337:68">&amp;</operator> <name pos:start="337:70" pos:end="337:88">FRAME_RECOVERED_IDR</name><operator pos:start="337:89" pos:end="337:89">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="339:1" pos:end="339:6">#<cpp:directive pos:start="339:2" pos:end="339:6">endif</cpp:directive></cpp:endif>



                <if_stmt pos:start="343:17" pos:end="553:39"><if pos:start="343:17" pos:end="553:39">if <condition pos:start="343:20" pos:end="343:42">(<expr pos:start="343:21" pos:end="343:41"><name pos:start="343:21" pos:end="343:36"><name pos:start="343:21" pos:end="343:21">h</name><operator pos:start="343:22" pos:end="343:23">-&gt;</operator><name pos:start="343:24" pos:end="343:36">current_slice</name></name> <operator pos:start="343:38" pos:end="343:39">==</operator> <literal type="number" pos:start="343:41" pos:end="343:41">1</literal></expr>)</condition> <block pos:start="343:44" pos:end="553:39">{<block_content pos:start="345:21" pos:end="553:39">

                    <if_stmt pos:start="345:21" pos:end="347:69"><if pos:start="345:21" pos:end="347:69">if <condition pos:start="345:24" pos:end="345:62">(<expr pos:start="345:25" pos:end="345:61"><operator pos:start="345:25" pos:end="345:25">!</operator><operator pos:start="345:26" pos:end="345:26">(</operator><name pos:start="345:27" pos:end="345:39"><name pos:start="345:27" pos:end="345:31">avctx</name><operator pos:start="345:32" pos:end="345:33">-&gt;</operator><name pos:start="345:34" pos:end="345:39">flags2</name></name> <operator pos:start="345:41" pos:end="345:41">&amp;</operator> <name pos:start="345:43" pos:end="345:60">CODEC_FLAG2_CHUNKS</name><operator pos:start="345:61" pos:end="345:61">)</operator></expr>)</condition><block type="pseudo" pos:start="347:25" pos:end="347:69"><block_content pos:start="347:25" pos:end="347:69">

                        <expr_stmt pos:start="347:25" pos:end="347:69"><expr pos:start="347:25" pos:end="347:68"><call pos:start="347:25" pos:end="347:68"><name pos:start="347:25" pos:end="347:39">decode_postinit</name><argument_list pos:start="347:40" pos:end="347:68">(<argument pos:start="347:41" pos:end="347:41"><expr pos:start="347:41" pos:end="347:41"><name pos:start="347:41" pos:end="347:41">h</name></expr></argument>, <argument pos:start="347:44" pos:end="347:67"><expr pos:start="347:44" pos:end="347:67"><name pos:start="347:44" pos:end="347:52">nal_index</name> <operator pos:start="347:54" pos:end="347:55">&gt;=</operator> <name pos:start="347:57" pos:end="347:67">nals_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <if_stmt pos:start="351:21" pos:end="360:55"><if pos:start="351:21" pos:end="360:55">if <condition pos:start="351:24" pos:end="353:92">(<expr pos:start="351:25" pos:end="353:91"><name pos:start="351:25" pos:end="351:41"><name pos:start="351:25" pos:end="351:25">h</name><operator pos:start="351:26" pos:end="351:27">-&gt;</operator><name pos:start="351:28" pos:end="351:32">avctx</name><operator pos:start="351:33" pos:end="351:34">-&gt;</operator><name pos:start="351:35" pos:end="351:41">hwaccel</name></name> <operator pos:start="351:43" pos:end="351:44">&amp;&amp;</operator>

                        <operator pos:start="353:25" pos:end="353:25">(</operator><name pos:start="353:26" pos:end="353:28">ret</name> <operator pos:start="353:30" pos:end="353:30">=</operator> <call pos:start="353:32" pos:end="353:86"><name pos:start="353:32" pos:end="353:61"><name pos:start="353:32" pos:end="353:32">h</name><operator pos:start="353:33" pos:end="353:34">-&gt;</operator><name pos:start="353:35" pos:end="353:39">avctx</name><operator pos:start="353:40" pos:end="353:41">-&gt;</operator><name pos:start="353:42" pos:end="353:48">hwaccel</name><operator pos:start="353:49" pos:end="353:50">-&gt;</operator><name pos:start="353:51" pos:end="353:61">start_frame</name></name><argument_list pos:start="353:62" pos:end="353:86">(<argument pos:start="353:63" pos:end="353:70"><expr pos:start="353:63" pos:end="353:70"><name pos:start="353:63" pos:end="353:70"><name pos:start="353:63" pos:end="353:63">h</name><operator pos:start="353:64" pos:end="353:65">-&gt;</operator><name pos:start="353:66" pos:end="353:70">avctx</name></name></expr></argument>, <argument pos:start="353:73" pos:end="353:75"><expr pos:start="353:73" pos:end="353:75"><name pos:start="353:73" pos:end="353:75">buf</name></expr></argument>, <argument pos:start="353:78" pos:end="353:85"><expr pos:start="353:78" pos:end="353:85"><name pos:start="353:78" pos:end="353:85">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="353:87" pos:end="353:87">)</operator> <operator pos:start="353:89" pos:end="353:89">&lt;</operator> <literal type="number" pos:start="353:91" pos:end="353:91">0</literal></expr>)</condition><block type="pseudo" pos:start="356:21" pos:end="360:55"><block_content pos:start="356:21" pos:end="360:55">


                    <if_stmt pos:start="356:21" pos:end="360:55"><if pos:start="356:21" pos:end="360:55">if <condition pos:start="356:24" pos:end="358:80">(<expr pos:start="356:25" pos:end="358:79"><name pos:start="356:25" pos:end="356:49">CONFIG_H264_VDPAU_DECODER</name> <operator pos:start="356:51" pos:end="356:52">&amp;&amp;</operator>

                        <name pos:start="358:25" pos:end="358:53"><name pos:start="358:25" pos:end="358:25">h</name><operator pos:start="358:26" pos:end="358:27">-&gt;</operator><name pos:start="358:28" pos:end="358:32">avctx</name><operator pos:start="358:33" pos:end="358:34">-&gt;</operator><name pos:start="358:35" pos:end="358:39">codec</name><operator pos:start="358:40" pos:end="358:41">-&gt;</operator><name pos:start="358:42" pos:end="358:53">capabilities</name></name> <operator pos:start="358:55" pos:end="358:55">&amp;</operator> <name pos:start="358:57" pos:end="358:79">CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition><block type="pseudo" pos:start="360:25" pos:end="360:55"><block_content pos:start="360:25" pos:end="360:55">

                        <expr_stmt pos:start="360:25" pos:end="360:55"><expr pos:start="360:25" pos:end="360:54"><call pos:start="360:25" pos:end="360:54"><name pos:start="360:25" pos:end="360:51">ff_vdpau_h264_picture_start</name><argument_list pos:start="360:52" pos:end="360:54">(<argument pos:start="360:53" pos:end="360:53"><expr pos:start="360:53" pos:end="360:53"><name pos:start="360:53" pos:end="360:53">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>




                <if_stmt pos:start="365:17" pos:end="553:39"><if pos:start="365:17" pos:end="553:39">if <condition pos:start="365:20" pos:end="365:49">(<expr pos:start="365:21" pos:end="365:48"><name pos:start="365:21" pos:end="365:43"><name pos:start="365:21" pos:end="365:22">sl</name><operator pos:start="365:23" pos:end="365:24">-&gt;</operator><name pos:start="365:25" pos:end="365:43">redundant_pic_count</name></name> <operator pos:start="365:45" pos:end="365:46">==</operator> <literal type="number" pos:start="365:48" pos:end="365:48">0</literal></expr>)</condition> <block pos:start="365:51" pos:end="553:39">{<block_content pos:start="367:21" pos:end="553:39">

                    <if_stmt pos:start="367:21" pos:end="396:40"><if pos:start="367:21" pos:end="378:21">if <condition pos:start="367:24" pos:end="367:39">(<expr pos:start="367:25" pos:end="367:38"><name pos:start="367:25" pos:end="367:38"><name pos:start="367:25" pos:end="367:29">avctx</name><operator pos:start="367:30" pos:end="367:31">-&gt;</operator><name pos:start="367:32" pos:end="367:38">hwaccel</name></name></expr>)</condition> <block pos:start="367:41" pos:end="378:21">{<block_content pos:start="369:25" pos:end="375:36">

                        <expr_stmt pos:start="369:25" pos:end="373:69"><expr pos:start="369:25" pos:end="373:68"><name pos:start="369:25" pos:end="369:27">ret</name> <operator pos:start="369:29" pos:end="369:29">=</operator> <call pos:start="369:31" pos:end="373:68"><name pos:start="369:31" pos:end="369:58"><name pos:start="369:31" pos:end="369:35">avctx</name><operator pos:start="369:36" pos:end="369:37">-&gt;</operator><name pos:start="369:38" pos:end="369:44">hwaccel</name><operator pos:start="369:45" pos:end="369:46">-&gt;</operator><name pos:start="369:47" pos:end="369:58">decode_slice</name></name><argument_list pos:start="369:59" pos:end="373:68">(<argument pos:start="369:60" pos:end="369:64"><expr pos:start="369:60" pos:end="369:64"><name pos:start="369:60" pos:end="369:64">avctx</name></expr></argument>,

                                                           <argument pos:start="371:60" pos:end="371:85"><expr pos:start="371:60" pos:end="371:85"><operator pos:start="371:60" pos:end="371:60">&amp;</operator><name pos:start="371:61" pos:end="371:85"><name pos:start="371:61" pos:end="371:63">buf</name><index pos:start="371:64" pos:end="371:85">[<expr pos:start="371:65" pos:end="371:84"><name pos:start="371:65" pos:end="371:73">buf_index</name> <operator pos:start="371:75" pos:end="371:75">-</operator> <name pos:start="371:77" pos:end="371:84">consumed</name></expr>]</index></name></expr></argument>,

                                                           <argument pos:start="373:60" pos:end="373:67"><expr pos:start="373:60" pos:end="373:67"><name pos:start="373:60" pos:end="373:67">consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="375:25" pos:end="375:36"><if pos:start="375:25" pos:end="375:36">if <condition pos:start="375:28" pos:end="375:36">(<expr pos:start="375:29" pos:end="375:35"><name pos:start="375:29" pos:end="375:31">ret</name> <operator pos:start="375:33" pos:end="375:33">&lt;</operator> <literal type="number" pos:start="375:35" pos:end="375:35">0</literal></expr>)</condition><block type="pseudo"><block_content/></block></if></if_stmt>


                    </block_content>}</block></if> <if type="elseif" pos:start="378:23" pos:end="394:21">else if <condition pos:start="378:31" pos:end="380:87">(<expr pos:start="378:32" pos:end="380:86"><name pos:start="378:32" pos:end="378:56">CONFIG_H264_VDPAU_DECODER</name> <operator pos:start="378:58" pos:end="378:59">&amp;&amp;</operator>

                               <name pos:start="380:32" pos:end="380:60"><name pos:start="380:32" pos:end="380:32">h</name><operator pos:start="380:33" pos:end="380:34">-&gt;</operator><name pos:start="380:35" pos:end="380:39">avctx</name><operator pos:start="380:40" pos:end="380:41">-&gt;</operator><name pos:start="380:42" pos:end="380:46">codec</name><operator pos:start="380:47" pos:end="380:48">-&gt;</operator><name pos:start="380:49" pos:end="380:60">capabilities</name></name> <operator pos:start="380:62" pos:end="380:62">&amp;</operator> <name pos:start="380:64" pos:end="380:86">CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition> <block pos:start="380:89" pos:end="394:21">{<block_content pos:start="382:25" pos:end="392:58">

                        <expr_stmt pos:start="382:25" pos:end="386:68"><expr pos:start="382:25" pos:end="386:67"><call pos:start="382:25" pos:end="386:67"><name pos:start="382:25" pos:end="382:47">ff_vdpau_add_data_chunk</name><argument_list pos:start="382:48" pos:end="386:67">(<argument pos:start="382:49" pos:end="382:73"><expr pos:start="382:49" pos:end="382:73"><name pos:start="382:49" pos:end="382:73"><name pos:start="382:49" pos:end="382:49">h</name><operator pos:start="382:50" pos:end="382:51">-&gt;</operator><name pos:start="382:52" pos:end="382:62">cur_pic_ptr</name><operator pos:start="382:63" pos:end="382:64">-&gt;</operator><name pos:start="382:65" pos:end="382:65">f</name><operator pos:start="382:66" pos:end="382:66">.</operator><name pos:start="382:67" pos:end="382:70">data</name><index pos:start="382:71" pos:end="382:73">[<expr pos:start="382:72" pos:end="382:72"><literal type="number" pos:start="382:72" pos:end="382:72">0</literal></expr>]</index></name></expr></argument>,

                                                <argument pos:start="384:49" pos:end="384:58"><expr pos:start="384:49" pos:end="384:58"><name pos:start="384:49" pos:end="384:58">start_code</name></expr></argument>,

                                                <argument pos:start="386:49" pos:end="386:66"><expr pos:start="386:49" pos:end="386:66"><sizeof pos:start="386:49" pos:end="386:66">sizeof<argument_list pos:start="386:55" pos:end="386:66">(<argument pos:start="386:56" pos:end="386:65"><expr pos:start="386:56" pos:end="386:65"><name pos:start="386:56" pos:end="386:65">start_code</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="388:25" pos:end="392:58"><expr pos:start="388:25" pos:end="392:57"><call pos:start="388:25" pos:end="392:57"><name pos:start="388:25" pos:end="388:47">ff_vdpau_add_data_chunk</name><argument_list pos:start="388:48" pos:end="392:57">(<argument pos:start="388:49" pos:end="388:73"><expr pos:start="388:49" pos:end="388:73"><name pos:start="388:49" pos:end="388:73"><name pos:start="388:49" pos:end="388:49">h</name><operator pos:start="388:50" pos:end="388:51">-&gt;</operator><name pos:start="388:52" pos:end="388:62">cur_pic_ptr</name><operator pos:start="388:63" pos:end="388:64">-&gt;</operator><name pos:start="388:65" pos:end="388:65">f</name><operator pos:start="388:66" pos:end="388:66">.</operator><name pos:start="388:67" pos:end="388:70">data</name><index pos:start="388:71" pos:end="388:73">[<expr pos:start="388:72" pos:end="388:72"><literal type="number" pos:start="388:72" pos:end="388:72">0</literal></expr>]</index></name></expr></argument>,

                                                <argument pos:start="390:49" pos:end="390:74"><expr pos:start="390:49" pos:end="390:74"><operator pos:start="390:49" pos:end="390:49">&amp;</operator><name pos:start="390:50" pos:end="390:74"><name pos:start="390:50" pos:end="390:52">buf</name><index pos:start="390:53" pos:end="390:74">[<expr pos:start="390:54" pos:end="390:73"><name pos:start="390:54" pos:end="390:62">buf_index</name> <operator pos:start="390:64" pos:end="390:64">-</operator> <name pos:start="390:66" pos:end="390:73">consumed</name></expr>]</index></name></expr></argument>,

                                                <argument pos:start="392:49" pos:end="392:56"><expr pos:start="392:49" pos:end="392:56"><name pos:start="392:49" pos:end="392:56">consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="394:23" pos:end="396:40">else<block type="pseudo" pos:start="396:25" pos:end="396:40"><block_content pos:start="396:25" pos:end="396:40">

                        <expr_stmt pos:start="396:25" pos:end="396:40"><expr pos:start="396:25" pos:end="396:39"><name pos:start="396:25" pos:end="396:37">context_count</name><operator pos:start="396:38" pos:end="396:39">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>


                <break pos:start="399:17" pos:end="399:22">break;</break>

            <case pos:start="401:13" pos:end="401:25">case <expr pos:start="401:18" pos:end="401:24"><name pos:start="401:18" pos:end="401:24">NAL_DPA</name></expr>:</case>

            <case pos:start="403:13" pos:end="403:25">case <expr pos:start="403:18" pos:end="403:24"><name pos:start="403:18" pos:end="403:24">NAL_DPB</name></expr>:</case>

            <case pos:start="405:13" pos:end="405:25">case <expr pos:start="405:18" pos:end="405:24"><name pos:start="405:18" pos:end="405:24">NAL_DPC</name></expr>:</case>

                <expr_stmt pos:start="407:17" pos:end="407:66"><expr pos:start="407:17" pos:end="407:65"><call pos:start="407:17" pos:end="407:65"><name pos:start="407:17" pos:end="407:37">avpriv_request_sample</name><argument_list pos:start="407:38" pos:end="407:65">(<argument pos:start="407:39" pos:end="407:43"><expr pos:start="407:39" pos:end="407:43"><name pos:start="407:39" pos:end="407:43">avctx</name></expr></argument>, <argument pos:start="407:46" pos:end="407:64"><expr pos:start="407:46" pos:end="407:64"><literal type="string" pos:start="407:46" pos:end="407:64">"data partitioning"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="409:38"><expr pos:start="409:17" pos:end="409:37"><name pos:start="409:17" pos:end="409:19">ret</name> <operator pos:start="409:21" pos:end="409:21">=</operator> <call pos:start="409:23" pos:end="409:37"><name pos:start="409:23" pos:end="409:29">AVERROR</name><argument_list pos:start="409:30" pos:end="409:37">(<argument pos:start="409:31" pos:end="409:36"><expr pos:start="409:31" pos:end="409:36"><name pos:start="409:31" pos:end="409:36">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <break pos:start="412:17" pos:end="412:22">break;</break>

            <case pos:start="414:13" pos:end="414:25">case <expr pos:start="414:18" pos:end="414:24"><name pos:start="414:18" pos:end="414:24">NAL_SEI</name></expr>:</case>

                <expr_stmt pos:start="416:17" pos:end="416:55"><expr pos:start="416:17" pos:end="416:54"><call pos:start="416:17" pos:end="416:54"><name pos:start="416:17" pos:end="416:29">init_get_bits</name><argument_list pos:start="416:30" pos:end="416:54">(<argument pos:start="416:31" pos:end="416:36"><expr pos:start="416:31" pos:end="416:36"><operator pos:start="416:31" pos:end="416:31">&amp;</operator><name pos:start="416:32" pos:end="416:36"><name pos:start="416:32" pos:end="416:32">h</name><operator pos:start="416:33" pos:end="416:34">-&gt;</operator><name pos:start="416:35" pos:end="416:36">gb</name></name></expr></argument>, <argument pos:start="416:39" pos:end="416:41"><expr pos:start="416:39" pos:end="416:41"><name pos:start="416:39" pos:end="416:41">ptr</name></expr></argument>, <argument pos:start="416:44" pos:end="416:53"><expr pos:start="416:44" pos:end="416:53"><name pos:start="416:44" pos:end="416:53">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="418:17" pos:end="418:44"><expr pos:start="418:17" pos:end="418:43"><name pos:start="418:17" pos:end="418:19">ret</name> <operator pos:start="418:21" pos:end="418:21">=</operator> <call pos:start="418:23" pos:end="418:43"><name pos:start="418:23" pos:end="418:40">ff_h264_decode_sei</name><argument_list pos:start="418:41" pos:end="418:43">(<argument pos:start="418:42" pos:end="418:42"><expr pos:start="418:42" pos:end="418:42"><name pos:start="418:42" pos:end="418:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <break pos:start="422:17" pos:end="422:22">break;</break>

            <case pos:start="424:13" pos:end="424:25">case <expr pos:start="424:18" pos:end="424:24"><name pos:start="424:18" pos:end="424:24">NAL_SPS</name></expr>:</case>

                <expr_stmt pos:start="426:17" pos:end="426:55"><expr pos:start="426:17" pos:end="426:54"><call pos:start="426:17" pos:end="426:54"><name pos:start="426:17" pos:end="426:29">init_get_bits</name><argument_list pos:start="426:30" pos:end="426:54">(<argument pos:start="426:31" pos:end="426:36"><expr pos:start="426:31" pos:end="426:36"><operator pos:start="426:31" pos:end="426:31">&amp;</operator><name pos:start="426:32" pos:end="426:36"><name pos:start="426:32" pos:end="426:32">h</name><operator pos:start="426:33" pos:end="426:34">-&gt;</operator><name pos:start="426:35" pos:end="426:36">gb</name></name></expr></argument>, <argument pos:start="426:39" pos:end="426:41"><expr pos:start="426:39" pos:end="426:41"><name pos:start="426:39" pos:end="426:41">ptr</name></expr></argument>, <argument pos:start="426:44" pos:end="426:53"><expr pos:start="426:44" pos:end="426:53"><name pos:start="426:44" pos:end="426:53">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="428:17" pos:end="553:39"><if pos:start="428:17" pos:end="553:39">if <condition pos:start="428:20" pos:end="428:89">(<expr pos:start="428:21" pos:end="428:88"><call pos:start="428:21" pos:end="428:55"><name pos:start="428:21" pos:end="428:52">ff_h264_decode_seq_parameter_set</name><argument_list pos:start="428:53" pos:end="428:55">(<argument pos:start="428:54" pos:end="428:54"><expr pos:start="428:54" pos:end="428:54"><name pos:start="428:54" pos:end="428:54">h</name></expr></argument>)</argument_list></call> <operator pos:start="428:57" pos:end="428:57">&lt;</operator> <literal type="number" pos:start="428:59" pos:end="428:59">0</literal> <operator pos:start="428:61" pos:end="428:62">&amp;&amp;</operator> <operator pos:start="428:64" pos:end="428:64">(</operator><ternary pos:start="428:65" pos:end="428:87"><condition pos:start="428:65" pos:end="428:75"><expr pos:start="428:65" pos:end="428:73"><name pos:start="428:65" pos:end="428:73"><name pos:start="428:65" pos:end="428:65">h</name><operator pos:start="428:66" pos:end="428:67">-&gt;</operator><name pos:start="428:68" pos:end="428:73">is_avc</name></name></expr> ?</condition><then pos:start="428:77" pos:end="428:83"> <expr pos:start="428:77" pos:end="428:83"><name pos:start="428:77" pos:end="428:83">nalsize</name></expr> </then><else pos:start="428:85" pos:end="428:87">: <expr pos:start="428:87" pos:end="428:87"><literal type="number" pos:start="428:87" pos:end="428:87">1</literal></expr></else></ternary><operator pos:start="428:88" pos:end="428:88">)</operator></expr>)</condition> <block pos:start="428:91" pos:end="553:39">{<block_content pos:start="430:21" pos:end="553:39">

                    <expr_stmt pos:start="430:21" pos:end="432:89"><expr pos:start="430:21" pos:end="432:88"><call pos:start="430:21" pos:end="432:88"><name pos:start="430:21" pos:end="430:26">av_log</name><argument_list pos:start="430:27" pos:end="432:88">(<argument pos:start="430:28" pos:end="430:35"><expr pos:start="430:28" pos:end="430:35"><name pos:start="430:28" pos:end="430:35"><name pos:start="430:28" pos:end="430:28">h</name><operator pos:start="430:29" pos:end="430:30">-&gt;</operator><name pos:start="430:31" pos:end="430:35">avctx</name></name></expr></argument>, <argument pos:start="430:38" pos:end="430:49"><expr pos:start="430:38" pos:end="430:49"><name pos:start="430:38" pos:end="430:49">AV_LOG_DEBUG</name></expr></argument>,

                           <argument pos:start="432:28" pos:end="432:87"><expr pos:start="432:28" pos:end="432:87"><literal type="string" pos:start="432:28" pos:end="432:87">"SPS decoding failure, trying again with the complete NAL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="434:21" pos:end="436:79"><if pos:start="434:21" pos:end="436:79">if <condition pos:start="434:24" pos:end="434:34">(<expr pos:start="434:25" pos:end="434:33"><name pos:start="434:25" pos:end="434:33"><name pos:start="434:25" pos:end="434:25">h</name><operator pos:start="434:26" pos:end="434:27">-&gt;</operator><name pos:start="434:28" pos:end="434:33">is_avc</name></name></expr>)</condition><block type="pseudo" pos:start="436:25" pos:end="436:79"><block_content pos:start="436:25" pos:end="436:79">

                        <expr_stmt pos:start="436:25" pos:end="436:79"><expr pos:start="436:25" pos:end="436:78"><call pos:start="436:25" pos:end="436:78"><name pos:start="436:25" pos:end="436:34">av_assert0</name><argument_list pos:start="436:35" pos:end="436:78">(<argument pos:start="436:36" pos:end="436:77"><expr pos:start="436:36" pos:end="436:77"><name pos:start="436:36" pos:end="436:43">next_avc</name> <operator pos:start="436:45" pos:end="436:45">-</operator> <name pos:start="436:47" pos:end="436:55">buf_index</name> <operator pos:start="436:57" pos:end="436:57">+</operator> <name pos:start="436:59" pos:end="436:66">consumed</name> <operator pos:start="436:68" pos:end="436:69">==</operator> <name pos:start="436:71" pos:end="436:77">nalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="438:21" pos:end="440:30"><if pos:start="438:21" pos:end="440:30">if <condition pos:start="438:24" pos:end="438:75">(<expr pos:start="438:25" pos:end="438:74"><operator pos:start="438:25" pos:end="438:25">(</operator><name pos:start="438:26" pos:end="438:33">next_avc</name> <operator pos:start="438:35" pos:end="438:35">-</operator> <name pos:start="438:37" pos:end="438:45">buf_index</name> <operator pos:start="438:47" pos:end="438:47">+</operator> <name pos:start="438:49" pos:end="438:56">consumed</name> <operator pos:start="438:58" pos:end="438:58">-</operator> <literal type="number" pos:start="438:60" pos:end="438:60">1</literal><operator pos:start="438:61" pos:end="438:61">)</operator> <operator pos:start="438:63" pos:end="438:64">&gt;=</operator> <name pos:start="438:66" pos:end="438:72">INT_MAX</name><operator pos:start="438:73" pos:end="438:73">/</operator><literal type="number" pos:start="438:74" pos:end="438:74">8</literal></expr>)</condition><block type="pseudo" pos:start="440:25" pos:end="440:30"><block_content pos:start="440:25" pos:end="440:30">

                        <break pos:start="440:25" pos:end="440:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="442:21" pos:end="444:75"><expr pos:start="442:21" pos:end="444:74"><call pos:start="442:21" pos:end="444:74"><name pos:start="442:21" pos:end="442:33">init_get_bits</name><argument_list pos:start="442:34" pos:end="444:74">(<argument pos:start="442:35" pos:end="442:40"><expr pos:start="442:35" pos:end="442:40"><operator pos:start="442:35" pos:end="442:35">&amp;</operator><name pos:start="442:36" pos:end="442:40"><name pos:start="442:36" pos:end="442:36">h</name><operator pos:start="442:37" pos:end="442:38">-&gt;</operator><name pos:start="442:39" pos:end="442:40">gb</name></name></expr></argument>, <argument pos:start="442:43" pos:end="442:72"><expr pos:start="442:43" pos:end="442:72"><operator pos:start="442:43" pos:end="442:43">&amp;</operator><name pos:start="442:44" pos:end="442:72"><name pos:start="442:44" pos:end="442:46">buf</name><index pos:start="442:47" pos:end="442:72">[<expr pos:start="442:48" pos:end="442:71"><name pos:start="442:48" pos:end="442:56">buf_index</name> <operator pos:start="442:58" pos:end="442:58">+</operator> <literal type="number" pos:start="442:60" pos:end="442:62">1</literal> <operator pos:start="442:62" pos:end="442:62">-</operator> <name pos:start="442:64" pos:end="442:71">consumed</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="444:35" pos:end="444:73"><expr pos:start="444:35" pos:end="444:73"><literal type="number" pos:start="444:35" pos:end="444:35">8</literal><operator pos:start="444:36" pos:end="444:36">*</operator><operator pos:start="444:37" pos:end="444:37">(</operator><name pos:start="444:38" pos:end="444:45">next_avc</name> <operator pos:start="444:47" pos:end="444:47">-</operator> <name pos:start="444:49" pos:end="444:57">buf_index</name> <operator pos:start="444:59" pos:end="444:59">+</operator> <name pos:start="444:61" pos:end="444:68">consumed</name> <operator pos:start="444:70" pos:end="444:70">-</operator> <literal type="number" pos:start="444:72" pos:end="444:72">1</literal><operator pos:start="444:73" pos:end="444:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="446:21" pos:end="446:56"><expr pos:start="446:21" pos:end="446:55"><call pos:start="446:21" pos:end="446:55"><name pos:start="446:21" pos:end="446:52">ff_h264_decode_seq_parameter_set</name><argument_list pos:start="446:53" pos:end="446:55">(<argument pos:start="446:54" pos:end="446:54"><expr pos:start="446:54" pos:end="446:54"><name pos:start="446:54" pos:end="446:54">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




                <break pos:start="451:17" pos:end="451:22">break;</break>

            <case pos:start="453:13" pos:end="453:25">case <expr pos:start="453:18" pos:end="453:24"><name pos:start="453:18" pos:end="453:24">NAL_PPS</name></expr>:</case>

                <expr_stmt pos:start="455:17" pos:end="455:55"><expr pos:start="455:17" pos:end="455:54"><call pos:start="455:17" pos:end="455:54"><name pos:start="455:17" pos:end="455:29">init_get_bits</name><argument_list pos:start="455:30" pos:end="455:54">(<argument pos:start="455:31" pos:end="455:36"><expr pos:start="455:31" pos:end="455:36"><operator pos:start="455:31" pos:end="455:31">&amp;</operator><name pos:start="455:32" pos:end="455:36"><name pos:start="455:32" pos:end="455:32">h</name><operator pos:start="455:33" pos:end="455:34">-&gt;</operator><name pos:start="455:35" pos:end="455:36">gb</name></name></expr></argument>, <argument pos:start="455:39" pos:end="455:41"><expr pos:start="455:39" pos:end="455:41"><name pos:start="455:39" pos:end="455:41">ptr</name></expr></argument>, <argument pos:start="455:44" pos:end="455:53"><expr pos:start="455:44" pos:end="455:53"><name pos:start="455:44" pos:end="455:53">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="457:17" pos:end="457:74"><expr pos:start="457:17" pos:end="457:73"><name pos:start="457:17" pos:end="457:19">ret</name> <operator pos:start="457:21" pos:end="457:21">=</operator> <call pos:start="457:23" pos:end="457:73"><name pos:start="457:23" pos:end="457:58">ff_h264_decode_picture_parameter_set</name><argument_list pos:start="457:59" pos:end="457:73">(<argument pos:start="457:60" pos:end="457:60"><expr pos:start="457:60" pos:end="457:60"><name pos:start="457:60" pos:end="457:60">h</name></expr></argument>, <argument pos:start="457:63" pos:end="457:72"><expr pos:start="457:63" pos:end="457:72"><name pos:start="457:63" pos:end="457:72">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <break pos:start="461:17" pos:end="461:22">break;</break>

            <case pos:start="463:13" pos:end="463:25">case <expr pos:start="463:18" pos:end="463:24"><name pos:start="463:18" pos:end="463:24">NAL_AUD</name></expr>:</case>

            <case pos:start="465:13" pos:end="465:34">case <expr pos:start="465:18" pos:end="465:33"><name pos:start="465:18" pos:end="465:33">NAL_END_SEQUENCE</name></expr>:</case>

            <case pos:start="467:13" pos:end="467:32">case <expr pos:start="467:18" pos:end="467:31"><name pos:start="467:18" pos:end="467:31">NAL_END_STREAM</name></expr>:</case>

            <case pos:start="469:13" pos:end="469:33">case <expr pos:start="469:18" pos:end="469:32"><name pos:start="469:18" pos:end="469:32">NAL_FILLER_DATA</name></expr>:</case>

            <case pos:start="471:13" pos:end="471:29">case <expr pos:start="471:18" pos:end="471:28"><name pos:start="471:18" pos:end="471:28">NAL_SPS_EXT</name></expr>:</case>

            <case pos:start="473:13" pos:end="473:37">case <expr pos:start="473:18" pos:end="473:36"><name pos:start="473:18" pos:end="473:36">NAL_AUXILIARY_SLICE</name></expr>:</case>

                <break pos:start="475:17" pos:end="475:22">break;</break>

            <case pos:start="477:13" pos:end="477:31">case <expr pos:start="477:18" pos:end="477:30"><name pos:start="477:18" pos:end="477:30">NAL_FF_IGNORE</name></expr>:</case>

                <break pos:start="479:17" pos:end="479:22">break;</break>

            <default pos:start="481:13" pos:end="481:20">default:</default>

                <expr_stmt pos:start="483:17" pos:end="485:53"><expr pos:start="483:17" pos:end="485:52"><call pos:start="483:17" pos:end="485:52"><name pos:start="483:17" pos:end="483:22">av_log</name><argument_list pos:start="483:23" pos:end="485:52">(<argument pos:start="483:24" pos:end="483:28"><expr pos:start="483:24" pos:end="483:28"><name pos:start="483:24" pos:end="483:28">avctx</name></expr></argument>, <argument pos:start="483:31" pos:end="483:42"><expr pos:start="483:31" pos:end="483:42"><name pos:start="483:31" pos:end="483:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="483:45" pos:end="483:78"><expr pos:start="483:45" pos:end="483:78"><literal type="string" pos:start="483:45" pos:end="483:78">"Unknown NAL code: %d (%d bits)\n"</literal></expr></argument>,

                       <argument pos:start="485:24" pos:end="485:39"><expr pos:start="485:24" pos:end="485:39"><name pos:start="485:24" pos:end="485:39"><name pos:start="485:24" pos:end="485:24">h</name><operator pos:start="485:25" pos:end="485:26">-&gt;</operator><name pos:start="485:27" pos:end="485:39">nal_unit_type</name></name></expr></argument>, <argument pos:start="485:42" pos:end="485:51"><expr pos:start="485:42" pos:end="485:51"><name pos:start="485:42" pos:end="485:51">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




            <if_stmt pos:start="490:13" pos:end="553:39"><if pos:start="490:13" pos:end="553:39">if <condition pos:start="490:16" pos:end="490:49">(<expr pos:start="490:17" pos:end="490:48"><name pos:start="490:17" pos:end="490:29">context_count</name> <operator pos:start="490:31" pos:end="490:32">==</operator> <name pos:start="490:34" pos:end="490:48"><name pos:start="490:34" pos:end="490:34">h</name><operator pos:start="490:35" pos:end="490:36">-&gt;</operator><name pos:start="490:37" pos:end="490:48">max_contexts</name></name></expr>)</condition> <block pos:start="490:51" pos:end="553:39">{<block_content pos:start="492:17" pos:end="553:39">

                <expr_stmt pos:start="492:17" pos:end="492:70"><expr pos:start="492:17" pos:end="492:69"><name pos:start="492:17" pos:end="492:19">ret</name> <operator pos:start="492:21" pos:end="492:21">=</operator> <call pos:start="492:23" pos:end="492:69"><name pos:start="492:23" pos:end="492:51">ff_h264_execute_decode_slices</name><argument_list pos:start="492:52" pos:end="492:69">(<argument pos:start="492:53" pos:end="492:53"><expr pos:start="492:53" pos:end="492:53"><name pos:start="492:53" pos:end="492:53">h</name></expr></argument>, <argument pos:start="492:56" pos:end="492:68"><expr pos:start="492:56" pos:end="492:68"><name pos:start="492:56" pos:end="492:68">context_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







            <if_stmt pos:start="500:13" pos:end="553:39"><if pos:start="500:13" pos:end="508:13">if <condition pos:start="500:16" pos:end="500:47">(<expr pos:start="500:17" pos:end="500:46"><name pos:start="500:17" pos:end="500:19">err</name> <operator pos:start="500:21" pos:end="500:21">&lt;</operator> <literal type="number" pos:start="500:23" pos:end="500:23">0</literal> <operator pos:start="500:25" pos:end="500:26">||</operator> <name pos:start="500:28" pos:end="500:30">err</name> <operator pos:start="500:32" pos:end="500:33">==</operator> <name pos:start="500:35" pos:end="500:46">SLICE_SKIPED</name></expr>)</condition> <block pos:start="500:49" pos:end="508:13">{<block_content pos:start="502:17" pos:end="506:73">

                <if_stmt pos:start="502:17" pos:end="504:82"><if pos:start="502:17" pos:end="504:82">if <condition pos:start="502:20" pos:end="502:28">(<expr pos:start="502:21" pos:end="502:27"><name pos:start="502:21" pos:end="502:23">err</name> <operator pos:start="502:25" pos:end="502:25">&lt;</operator> <literal type="number" pos:start="502:27" pos:end="502:27">0</literal></expr>)</condition><block type="pseudo" pos:start="504:21" pos:end="504:82"><block_content pos:start="504:21" pos:end="504:82">

                    <expr_stmt pos:start="504:21" pos:end="504:82"><expr pos:start="504:21" pos:end="504:81"><call pos:start="504:21" pos:end="504:81"><name pos:start="504:21" pos:end="504:26">av_log</name><argument_list pos:start="504:27" pos:end="504:81">(<argument pos:start="504:28" pos:end="504:35"><expr pos:start="504:28" pos:end="504:35"><name pos:start="504:28" pos:end="504:35"><name pos:start="504:28" pos:end="504:28">h</name><operator pos:start="504:29" pos:end="504:30">-&gt;</operator><name pos:start="504:31" pos:end="504:35">avctx</name></name></expr></argument>, <argument pos:start="504:38" pos:end="504:49"><expr pos:start="504:38" pos:end="504:49"><name pos:start="504:38" pos:end="504:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="504:52" pos:end="504:80"><expr pos:start="504:52" pos:end="504:80"><literal type="string" pos:start="504:52" pos:end="504:80">"decode_slice_header error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="506:17" pos:end="506:73"><expr pos:start="506:17" pos:end="506:72"><name pos:start="506:17" pos:end="506:32"><name pos:start="506:17" pos:end="506:18">sl</name><operator pos:start="506:19" pos:end="506:20">-&gt;</operator><name pos:start="506:21" pos:end="506:29">ref_count</name><index pos:start="506:30" pos:end="506:32">[<expr pos:start="506:31" pos:end="506:31"><literal type="number" pos:start="506:31" pos:end="506:31">0</literal></expr>]</index></name> <operator pos:start="506:34" pos:end="506:34">=</operator> <name pos:start="506:36" pos:end="506:51"><name pos:start="506:36" pos:end="506:37">sl</name><operator pos:start="506:38" pos:end="506:39">-&gt;</operator><name pos:start="506:40" pos:end="506:48">ref_count</name><index pos:start="506:49" pos:end="506:51">[<expr pos:start="506:50" pos:end="506:50"><literal type="number" pos:start="506:50" pos:end="506:50">1</literal></expr>]</index></name> <operator pos:start="506:53" pos:end="506:53">=</operator> <name pos:start="506:55" pos:end="506:68"><name pos:start="506:55" pos:end="506:56">sl</name><operator pos:start="506:57" pos:end="506:58">-&gt;</operator><name pos:start="506:59" pos:end="506:68">list_count</name></name> <operator pos:start="506:70" pos:end="506:70">=</operator> <literal type="number" pos:start="506:72" pos:end="506:72">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="508:15" pos:end="553:39">else if <condition pos:start="508:23" pos:end="508:49">(<expr pos:start="508:24" pos:end="508:48"><name pos:start="508:24" pos:end="508:26">err</name> <operator pos:start="508:28" pos:end="508:29">==</operator> <name pos:start="508:31" pos:end="508:48">SLICE_SINGLETHREAD</name></expr>)</condition> <block pos:start="508:51" pos:end="553:39">{<block_content pos:start="522:17" pos:end="553:39">







                <comment type="block" pos:start="516:17" pos:end="520:71">/* Slice could not be decoded in parallel mode, restart. Note

                 * that rbsp_buffer is not transferred, but since we no longer

                 * run in parallel mode this should not be an issue. */</comment>

                <expr_stmt pos:start="522:17" pos:end="522:52"><expr pos:start="522:17" pos:end="522:51"><name pos:start="522:17" pos:end="522:18">sl</name>               <operator pos:start="522:34" pos:end="522:34">=</operator> <operator pos:start="522:36" pos:end="522:36">&amp;</operator><name pos:start="522:37" pos:end="522:51"><name pos:start="522:37" pos:end="522:37">h</name><operator pos:start="522:38" pos:end="522:39">-&gt;</operator><name pos:start="522:40" pos:end="522:48">slice_ctx</name><index pos:start="522:49" pos:end="522:51">[<expr pos:start="522:50" pos:end="522:50"><literal type="number" pos:start="522:50" pos:end="522:50">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <goto pos:start="524:17" pos:end="524:27">goto <name pos:start="524:22" pos:end="524:26">again</name>;</goto>




    <if_stmt pos:start="529:5" pos:end="553:39"><if pos:start="529:5" pos:end="553:39">if <condition pos:start="529:8" pos:end="529:22">(<expr pos:start="529:9" pos:end="529:21"><name pos:start="529:9" pos:end="529:21">context_count</name></expr>)</condition> <block pos:start="529:24" pos:end="553:39">{<block_content pos:start="531:9" pos:end="553:39">

        <expr_stmt pos:start="531:9" pos:end="531:62"><expr pos:start="531:9" pos:end="531:61"><name pos:start="531:9" pos:end="531:11">ret</name> <operator pos:start="531:13" pos:end="531:13">=</operator> <call pos:start="531:15" pos:end="531:61"><name pos:start="531:15" pos:end="531:43">ff_h264_execute_decode_slices</name><argument_list pos:start="531:44" pos:end="531:61">(<argument pos:start="531:45" pos:end="531:45"><expr pos:start="531:45" pos:end="531:45"><name pos:start="531:45" pos:end="531:45">h</name></expr></argument>, <argument pos:start="531:48" pos:end="531:60"><expr pos:start="531:48" pos:end="531:60"><name pos:start="531:48" pos:end="531:60">context_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






    <expr_stmt pos:start="538:5" pos:end="538:12"><expr pos:start="538:5" pos:end="538:11"><name pos:start="538:5" pos:end="538:7">ret</name> <operator pos:start="538:9" pos:end="538:9">=</operator> <literal type="number" pos:start="538:11" pos:end="538:11">0</literal></expr>;</expr_stmt>

<label pos:start="540:1" pos:end="540:4"><name pos:start="540:1" pos:end="540:3">end</name>:</label>

    <comment type="block" pos:start="542:5" pos:end="542:18">/* clean up */</comment>

    <if_stmt pos:start="544:5" pos:end="553:39"><if pos:start="544:5" pos:end="553:39">if <condition pos:start="544:8" pos:end="544:40">(<expr pos:start="544:9" pos:end="544:39"><name pos:start="544:9" pos:end="544:22"><name pos:start="544:9" pos:end="544:9">h</name><operator pos:start="544:10" pos:end="544:11">-&gt;</operator><name pos:start="544:12" pos:end="544:22">cur_pic_ptr</name></name> <operator pos:start="544:24" pos:end="544:25">&amp;&amp;</operator> <operator pos:start="544:27" pos:end="544:27">!</operator><name pos:start="544:28" pos:end="544:39"><name pos:start="544:28" pos:end="544:28">h</name><operator pos:start="544:29" pos:end="544:30">-&gt;</operator><name pos:start="544:31" pos:end="544:39">droppable</name></name></expr>)</condition> <block pos:start="544:42" pos:end="553:39">{<block_content pos:start="546:9" pos:end="553:39">

        <expr_stmt pos:start="546:9" pos:end="548:77"><expr pos:start="546:9" pos:end="548:76"><call pos:start="546:9" pos:end="548:76"><name pos:start="546:9" pos:end="546:33">ff_thread_report_progress</name><argument_list pos:start="546:34" pos:end="548:76">(<argument pos:start="546:35" pos:end="546:53"><expr pos:start="546:35" pos:end="546:53"><operator pos:start="546:35" pos:end="546:35">&amp;</operator><name pos:start="546:36" pos:end="546:53"><name pos:start="546:36" pos:end="546:36">h</name><operator pos:start="546:37" pos:end="546:38">-&gt;</operator><name pos:start="546:39" pos:end="546:49">cur_pic_ptr</name><operator pos:start="546:50" pos:end="546:51">-&gt;</operator><name pos:start="546:52" pos:end="546:53">tf</name></name></expr></argument>, <argument pos:start="546:56" pos:end="546:62"><expr pos:start="546:56" pos:end="546:62"><name pos:start="546:56" pos:end="546:62">INT_MAX</name></expr></argument>,

                                  <argument pos:start="548:35" pos:end="548:75"><expr pos:start="548:35" pos:end="548:75"><name pos:start="548:35" pos:end="548:54"><name pos:start="548:35" pos:end="548:35">h</name><operator pos:start="548:36" pos:end="548:37">-&gt;</operator><name pos:start="548:38" pos:end="548:54">picture_structure</name></name> <operator pos:start="548:56" pos:end="548:57">==</operator> <name pos:start="548:59" pos:end="548:75">PICT_BOTTOM_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <return pos:start="553:5" pos:end="553:39">return <expr pos:start="553:12" pos:end="553:38"><ternary pos:start="553:12" pos:end="553:38"><condition pos:start="553:12" pos:end="553:22"><expr pos:start="553:12" pos:end="553:20"><operator pos:start="553:12" pos:end="553:12">(</operator><name pos:start="553:13" pos:end="553:15">ret</name> <operator pos:start="553:17" pos:end="553:17">&lt;</operator> <literal type="number" pos:start="553:19" pos:end="553:19">0</literal><operator pos:start="553:20" pos:end="553:20">)</operator></expr> ?</condition><then pos:start="553:24" pos:end="553:26"> <expr pos:start="553:24" pos:end="553:26"><name pos:start="553:24" pos:end="553:26">ret</name></expr> </then><else pos:start="553:28" pos:end="553:38">: <expr pos:start="553:30" pos:end="553:38"><name pos:start="553:30" pos:end="553:38">buf_index</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
