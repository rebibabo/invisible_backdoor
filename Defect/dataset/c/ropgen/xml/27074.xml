<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27074.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">decode_block_progressive</name><parameter_list pos:start="1:36" pos:end="7:72">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:57"><name pos:start="1:37" pos:end="1:54">MJpegDecodeContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:66">int16_t</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:73">block</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:53"><decl pos:start="3:37" pos:end="3:53"><type pos:start="3:37" pos:end="3:53"><name pos:start="3:37" pos:end="3:43">uint8_t</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:53">last_nnz</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:67"><decl pos:start="3:56" pos:end="3:67"><type pos:start="3:56" pos:end="3:67"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:67">ac_index</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:57"><decl pos:start="5:37" pos:end="5:57"><type pos:start="5:37" pos:end="5:57"><name pos:start="5:37" pos:end="5:43">int16_t</name> <modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:57">quant_matrix</name></decl></parameter>,

                                    <parameter pos:start="7:37" pos:end="7:42"><decl pos:start="7:37" pos:end="7:42"><type pos:start="7:37" pos:end="7:42"><name pos:start="7:37" pos:end="7:39">int</name></type> <name pos:start="7:41" pos:end="7:42">ss</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:50"><decl pos:start="7:45" pos:end="7:50"><type pos:start="7:45" pos:end="7:50"><name pos:start="7:45" pos:end="7:47">int</name></type> <name pos:start="7:49" pos:end="7:50">se</name></decl></parameter>, <parameter pos:start="7:53" pos:end="7:58"><decl pos:start="7:53" pos:end="7:58"><type pos:start="7:53" pos:end="7:58"><name pos:start="7:53" pos:end="7:55">int</name></type> <name pos:start="7:57" pos:end="7:58">Al</name></decl></parameter>, <parameter pos:start="7:61" pos:end="7:71"><decl pos:start="7:61" pos:end="7:71"><type pos:start="7:61" pos:end="7:71"><name pos:start="7:61" pos:end="7:63">int</name> <modifier pos:start="7:65" pos:end="7:65">*</modifier></type><name pos:start="7:66" pos:end="7:71">EOBRUN</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="141:1">{<block_content pos:start="11:5" pos:end="139:13">

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">code</name></decl>, <decl pos:start="11:15" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:15">i</name></decl>, <decl pos:start="11:18" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:18">j</name></decl>, <decl pos:start="11:21" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:21" pos:end="11:25">level</name></decl>, <decl pos:start="11:28" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:28" pos:end="11:30">val</name></decl>, <decl pos:start="11:33" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:33" pos:end="11:35">run</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><operator pos:start="15:9" pos:end="15:9">*</operator><name pos:start="15:10" pos:end="15:15">EOBRUN</name></expr>)</condition> <block pos:start="15:18" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:17">

        <expr_stmt pos:start="17:9" pos:end="17:20"><expr pos:start="17:9" pos:end="17:19"><operator pos:start="17:9" pos:end="17:9">(</operator><operator pos:start="17:10" pos:end="17:10">*</operator><name pos:start="17:11" pos:end="17:16">EOBRUN</name><operator pos:start="17:17" pos:end="17:17">)</operator><operator pos:start="17:18" pos:end="17:19">--</operator></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <block pos:start="25:5" pos:end="129:5">{<block_content pos:start="27:9" pos:end="127:33">

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><call pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:19">OPEN_READER</name><argument_list pos:start="27:20" pos:end="27:31">(<argument pos:start="27:21" pos:end="27:22"><expr pos:start="27:21" pos:end="27:22"><name pos:start="27:21" pos:end="27:22">re</name></expr></argument>, <argument pos:start="27:25" pos:end="27:30"><expr pos:start="27:25" pos:end="27:30"><operator pos:start="27:25" pos:end="27:25">&amp;</operator><name pos:start="27:26" pos:end="27:30"><name pos:start="27:26" pos:end="27:26">s</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:30">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="29:9" pos:end="125:9">for <control pos:start="29:13" pos:end="29:27">(<init pos:start="29:14" pos:end="29:20"><expr pos:start="29:14" pos:end="29:19"><name pos:start="29:14" pos:end="29:14">i</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <name pos:start="29:18" pos:end="29:19">ss</name></expr>;</init> <condition pos:start="29:22" pos:end="29:22">;</condition> <incr pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:24">i</name><operator pos:start="29:25" pos:end="29:26">++</operator></expr></incr>)</control> <block pos:start="29:29" pos:end="125:9">{<block_content pos:start="31:13" pos:end="123:13">

            <expr_stmt pos:start="31:13" pos:end="31:37"><expr pos:start="31:13" pos:end="31:36"><call pos:start="31:13" pos:end="31:36"><name pos:start="31:13" pos:end="31:24">UPDATE_CACHE</name><argument_list pos:start="31:25" pos:end="31:36">(<argument pos:start="31:26" pos:end="31:27"><expr pos:start="31:26" pos:end="31:27"><name pos:start="31:26" pos:end="31:27">re</name></expr></argument>, <argument pos:start="31:30" pos:end="31:35"><expr pos:start="31:30" pos:end="31:35"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:35"><name pos:start="31:31" pos:end="31:31">s</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:72"><expr pos:start="33:13" pos:end="33:71"><call pos:start="33:13" pos:end="33:71"><name pos:start="33:13" pos:end="33:19">GET_VLC</name><argument_list pos:start="33:20" pos:end="33:71">(<argument pos:start="33:21" pos:end="33:24"><expr pos:start="33:21" pos:end="33:24"><name pos:start="33:21" pos:end="33:24">code</name></expr></argument>, <argument pos:start="33:27" pos:end="33:28"><expr pos:start="33:27" pos:end="33:28"><name pos:start="33:27" pos:end="33:28">re</name></expr></argument>, <argument pos:start="33:31" pos:end="33:36"><expr pos:start="33:31" pos:end="33:36"><operator pos:start="33:31" pos:end="33:31">&amp;</operator><name pos:start="33:32" pos:end="33:36"><name pos:start="33:32" pos:end="33:32">s</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:36">gb</name></name></expr></argument>, <argument pos:start="33:39" pos:end="33:64"><expr pos:start="33:39" pos:end="33:64"><name pos:start="33:39" pos:end="33:58"><name pos:start="33:39" pos:end="33:39">s</name><operator pos:start="33:40" pos:end="33:41">-&gt;</operator><name pos:start="33:42" pos:end="33:45">vlcs</name><index pos:start="33:46" pos:end="33:48">[<expr pos:start="33:47" pos:end="33:47"><literal type="number" pos:start="33:47" pos:end="33:47">2</literal></expr>]</index><index pos:start="33:49" pos:end="33:58">[<expr pos:start="33:50" pos:end="33:57"><name pos:start="33:50" pos:end="33:57">ac_index</name></expr>]</index></name><operator pos:start="33:59" pos:end="33:59">.</operator><name pos:start="33:60" pos:end="33:64">table</name></expr></argument>, <argument pos:start="33:67" pos:end="33:67"><expr pos:start="33:67" pos:end="33:67"><literal type="number" pos:start="33:67" pos:end="33:67">9</literal></expr></argument>, <argument pos:start="33:70" pos:end="33:70"><expr pos:start="33:70" pos:end="33:70"><literal type="number" pos:start="33:70" pos:end="33:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="37:13" pos:end="37:41"><expr pos:start="37:13" pos:end="37:40"><name pos:start="37:13" pos:end="37:15">run</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <operator pos:start="37:19" pos:end="37:19">(</operator><operator pos:start="37:20" pos:end="37:20">(</operator><name pos:start="37:21" pos:end="37:28">unsigned</name><operator pos:start="37:29" pos:end="37:29">)</operator> <name pos:start="37:31" pos:end="37:34">code</name><operator pos:start="37:35" pos:end="37:35">)</operator> <operator pos:start="37:37" pos:end="37:38">&gt;&gt;</operator> <literal type="number" pos:start="37:40" pos:end="37:40">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:24"><expr pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:16">code</name> <operator pos:start="39:18" pos:end="39:19">&amp;=</operator> <literal type="number" pos:start="39:21" pos:end="39:23">0xF</literal></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="123:13"><if pos:start="41:13" pos:end="89:13">if <condition pos:start="41:16" pos:end="41:21">(<expr pos:start="41:17" pos:end="41:20"><name pos:start="41:17" pos:end="41:20">code</name></expr>)</condition> <block pos:start="41:23" pos:end="89:13">{<block_content pos:start="43:17" pos:end="87:57">

                <expr_stmt pos:start="43:17" pos:end="43:25"><expr pos:start="43:17" pos:end="43:24"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:20">+=</operator> <name pos:start="43:22" pos:end="43:24">run</name></expr>;</expr_stmt>

                <if_stmt pos:start="45:17" pos:end="47:45"><if pos:start="45:17" pos:end="47:45">if <condition pos:start="45:20" pos:end="45:47">(<expr pos:start="45:21" pos:end="45:46"><name pos:start="45:21" pos:end="45:24">code</name> <operator pos:start="45:26" pos:end="45:26">&gt;</operator> <name pos:start="45:28" pos:end="45:41">MIN_CACHE_BITS</name> <operator pos:start="45:43" pos:end="45:43">-</operator> <literal type="number" pos:start="45:45" pos:end="45:46">16</literal></expr>)</condition><block type="pseudo" pos:start="47:21" pos:end="47:45"><block_content pos:start="47:21" pos:end="47:45">

                    <expr_stmt pos:start="47:21" pos:end="47:45"><expr pos:start="47:21" pos:end="47:44"><call pos:start="47:21" pos:end="47:44"><name pos:start="47:21" pos:end="47:32">UPDATE_CACHE</name><argument_list pos:start="47:33" pos:end="47:44">(<argument pos:start="47:34" pos:end="47:35"><expr pos:start="47:34" pos:end="47:35"><name pos:start="47:34" pos:end="47:35">re</name></expr></argument>, <argument pos:start="47:38" pos:end="47:43"><expr pos:start="47:38" pos:end="47:43"><operator pos:start="47:38" pos:end="47:38">&amp;</operator><name pos:start="47:39" pos:end="47:43"><name pos:start="47:39" pos:end="47:39">s</name><operator pos:start="47:40" pos:end="47:41">-&gt;</operator><name pos:start="47:42" pos:end="47:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <block pos:start="51:17" pos:end="59:17">{<block_content pos:start="53:21" pos:end="57:77">

                    <decl_stmt pos:start="53:21" pos:end="53:54"><decl pos:start="53:21" pos:end="53:53"><type pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:23">int</name></type> <name pos:start="53:25" pos:end="53:29">cache</name> <init pos:start="53:31" pos:end="53:53">= <expr pos:start="53:33" pos:end="53:53"><call pos:start="53:33" pos:end="53:53"><name pos:start="53:33" pos:end="53:41">GET_CACHE</name><argument_list pos:start="53:42" pos:end="53:53">(<argument pos:start="53:43" pos:end="53:44"><expr pos:start="53:43" pos:end="53:44"><name pos:start="53:43" pos:end="53:44">re</name></expr></argument>, <argument pos:start="53:47" pos:end="53:52"><expr pos:start="53:47" pos:end="53:52"><operator pos:start="53:47" pos:end="53:47">&amp;</operator><name pos:start="53:48" pos:end="53:52"><name pos:start="53:48" pos:end="53:48">s</name><operator pos:start="53:49" pos:end="53:50">-&gt;</operator><name pos:start="53:51" pos:end="53:52">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="55:21" pos:end="55:47"><decl pos:start="55:21" pos:end="55:46"><type pos:start="55:21" pos:end="55:23"><name pos:start="55:21" pos:end="55:23">int</name></type> <name pos:start="55:25" pos:end="55:28">sign</name>  <init pos:start="55:31" pos:end="55:46">= <expr pos:start="55:33" pos:end="55:46"><operator pos:start="55:33" pos:end="55:33">(</operator><operator pos:start="55:34" pos:end="55:34">~</operator><name pos:start="55:35" pos:end="55:39">cache</name><operator pos:start="55:40" pos:end="55:40">)</operator> <operator pos:start="55:42" pos:end="55:43">&gt;&gt;</operator> <literal type="number" pos:start="55:45" pos:end="55:46">31</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:77"><expr pos:start="57:21" pos:end="57:76"><name pos:start="57:21" pos:end="57:25">level</name>     <operator pos:start="57:31" pos:end="57:31">=</operator> <operator pos:start="57:33" pos:end="57:33">(</operator><call pos:start="57:34" pos:end="57:61"><name pos:start="57:34" pos:end="57:42">NEG_USR32</name><argument_list pos:start="57:43" pos:end="57:61">(<argument pos:start="57:44" pos:end="57:55"><expr pos:start="57:44" pos:end="57:55"><name pos:start="57:44" pos:end="57:47">sign</name> <operator pos:start="57:49" pos:end="57:49">^</operator> <name pos:start="57:51" pos:end="57:55">cache</name></expr></argument>,<argument pos:start="57:57" pos:end="57:60"><expr pos:start="57:57" pos:end="57:60"><name pos:start="57:57" pos:end="57:60">code</name></expr></argument>)</argument_list></call> <operator pos:start="57:63" pos:end="57:63">^</operator> <name pos:start="57:65" pos:end="57:68">sign</name><operator pos:start="57:69" pos:end="57:69">)</operator> <operator pos:start="57:71" pos:end="57:71">-</operator> <name pos:start="57:73" pos:end="57:76">sign</name></expr>;</expr_stmt>

                </block_content>}</block>



                <expr_stmt pos:start="63:17" pos:end="63:49"><expr pos:start="63:17" pos:end="63:48"><call pos:start="63:17" pos:end="63:48"><name pos:start="63:17" pos:end="63:30">LAST_SKIP_BITS</name><argument_list pos:start="63:31" pos:end="63:48">(<argument pos:start="63:32" pos:end="63:33"><expr pos:start="63:32" pos:end="63:33"><name pos:start="63:32" pos:end="63:33">re</name></expr></argument>, <argument pos:start="63:36" pos:end="63:41"><expr pos:start="63:36" pos:end="63:41"><operator pos:start="63:36" pos:end="63:36">&amp;</operator><name pos:start="63:37" pos:end="63:41"><name pos:start="63:37" pos:end="63:37">s</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:41">gb</name></name></expr></argument>, <argument pos:start="63:44" pos:end="63:47"><expr pos:start="63:44" pos:end="63:47"><name pos:start="63:44" pos:end="63:47">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="67:17" pos:end="83:17"><if pos:start="67:17" pos:end="83:17">if <condition pos:start="67:20" pos:end="67:28">(<expr pos:start="67:21" pos:end="67:27"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:24">&gt;=</operator> <name pos:start="67:26" pos:end="67:27">se</name></expr>)</condition> <block pos:start="67:30" pos:end="83:17">{<block_content pos:start="69:21" pos:end="81:47">

                    <if_stmt pos:start="69:21" pos:end="77:21"><if pos:start="69:21" pos:end="77:21">if <condition pos:start="69:24" pos:end="69:32">(<expr pos:start="69:25" pos:end="69:31"><name pos:start="69:25" pos:end="69:25">i</name> <operator pos:start="69:27" pos:end="69:28">==</operator> <name pos:start="69:30" pos:end="69:31">se</name></expr>)</condition> <block pos:start="69:34" pos:end="77:21">{<block_content pos:start="71:25" pos:end="75:30">

                        <expr_stmt pos:start="71:25" pos:end="71:56"><expr pos:start="71:25" pos:end="71:55"><name pos:start="71:25" pos:end="71:25">j</name> <operator pos:start="71:27" pos:end="71:27">=</operator> <name pos:start="71:29" pos:end="71:55"><name pos:start="71:29" pos:end="71:29">s</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:40">scantable</name><operator pos:start="71:41" pos:end="71:41">.</operator><name pos:start="71:42" pos:end="71:51">permutated</name><index pos:start="71:52" pos:end="71:55">[<expr pos:start="71:53" pos:end="71:54"><name pos:start="71:53" pos:end="71:54">se</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="73:25" pos:end="73:65"><expr pos:start="73:25" pos:end="73:64"><name pos:start="73:25" pos:end="73:32"><name pos:start="73:25" pos:end="73:29">block</name><index pos:start="73:30" pos:end="73:32">[<expr pos:start="73:31" pos:end="73:31"><name pos:start="73:31" pos:end="73:31">j</name></expr>]</index></name> <operator pos:start="73:34" pos:end="73:34">=</operator> <name pos:start="73:36" pos:end="73:40">level</name> <operator pos:start="73:42" pos:end="73:42">*</operator> <name pos:start="73:44" pos:end="73:58"><name pos:start="73:44" pos:end="73:55">quant_matrix</name><index pos:start="73:56" pos:end="73:58">[<expr pos:start="73:57" pos:end="73:57"><name pos:start="73:57" pos:end="73:57">j</name></expr>]</index></name> <operator pos:start="73:60" pos:end="73:61">&lt;&lt;</operator> <name pos:start="73:63" pos:end="73:64">Al</name></expr>;</expr_stmt>

                        <break pos:start="75:25" pos:end="75:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="79:21" pos:end="79:75"><expr pos:start="79:21" pos:end="79:74"><call pos:start="79:21" pos:end="79:74"><name pos:start="79:21" pos:end="79:26">av_log</name><argument_list pos:start="79:27" pos:end="79:74">(<argument pos:start="79:28" pos:end="79:35"><expr pos:start="79:28" pos:end="79:35"><name pos:start="79:28" pos:end="79:35"><name pos:start="79:28" pos:end="79:28">s</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:35">avctx</name></name></expr></argument>, <argument pos:start="79:38" pos:end="79:49"><expr pos:start="79:38" pos:end="79:49"><name pos:start="79:38" pos:end="79:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:52" pos:end="79:70"><expr pos:start="79:52" pos:end="79:70"><literal type="string" pos:start="79:52" pos:end="79:70">"error count: %d\n"</literal></expr></argument>, <argument pos:start="79:73" pos:end="79:73"><expr pos:start="79:73" pos:end="79:73"><name pos:start="79:73" pos:end="79:73">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="81:21" pos:end="81:47">return <expr pos:start="81:28" pos:end="81:46"><name pos:start="81:28" pos:end="81:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:47"><expr pos:start="85:17" pos:end="85:46"><name pos:start="85:17" pos:end="85:17">j</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <name pos:start="85:21" pos:end="85:46"><name pos:start="85:21" pos:end="85:21">s</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:32">scantable</name><operator pos:start="85:33" pos:end="85:33">.</operator><name pos:start="85:34" pos:end="85:43">permutated</name><index pos:start="85:44" pos:end="85:46">[<expr pos:start="85:45" pos:end="85:45"><name pos:start="85:45" pos:end="85:45">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:57"><expr pos:start="87:17" pos:end="87:56"><name pos:start="87:17" pos:end="87:24"><name pos:start="87:17" pos:end="87:21">block</name><index pos:start="87:22" pos:end="87:24">[<expr pos:start="87:23" pos:end="87:23"><name pos:start="87:23" pos:end="87:23">j</name></expr>]</index></name> <operator pos:start="87:26" pos:end="87:26">=</operator> <name pos:start="87:28" pos:end="87:32">level</name> <operator pos:start="87:34" pos:end="87:34">*</operator> <name pos:start="87:36" pos:end="87:50"><name pos:start="87:36" pos:end="87:47">quant_matrix</name><index pos:start="87:48" pos:end="87:50">[<expr pos:start="87:49" pos:end="87:49"><name pos:start="87:49" pos:end="87:49">j</name></expr>]</index></name> <operator pos:start="87:52" pos:end="87:53">&lt;&lt;</operator> <name pos:start="87:55" pos:end="87:56">Al</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="89:15" pos:end="123:13">else <block pos:start="89:20" pos:end="123:13">{<block_content pos:start="91:17" pos:end="121:17">

                <if_stmt pos:start="91:17" pos:end="121:17"><if pos:start="91:17" pos:end="103:17">if <condition pos:start="91:20" pos:end="91:31">(<expr pos:start="91:21" pos:end="91:30"><name pos:start="91:21" pos:end="91:23">run</name> <operator pos:start="91:25" pos:end="91:26">==</operator> <literal type="number" pos:start="91:28" pos:end="91:30">0xF</literal></expr>)</condition> <block pos:start="91:33" pos:end="103:17">{<block_content pos:start="93:21" pos:end="101:21"><comment type="line" pos:start="91:34" pos:end="91:62">// ZRL - skip 15 coefficients</comment>

                    <expr_stmt pos:start="93:21" pos:end="93:28"><expr pos:start="93:21" pos:end="93:27"><name pos:start="93:21" pos:end="93:21">i</name> <operator pos:start="93:23" pos:end="93:24">+=</operator> <literal type="number" pos:start="93:26" pos:end="93:27">15</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="95:21" pos:end="101:21"><if pos:start="95:21" pos:end="101:21">if <condition pos:start="95:24" pos:end="95:32">(<expr pos:start="95:25" pos:end="95:31"><name pos:start="95:25" pos:end="95:25">i</name> <operator pos:start="95:27" pos:end="95:28">&gt;=</operator> <name pos:start="95:30" pos:end="95:31">se</name></expr>)</condition> <block pos:start="95:34" pos:end="101:21">{<block_content pos:start="97:25" pos:end="99:51">

                        <expr_stmt pos:start="97:25" pos:end="97:80"><expr pos:start="97:25" pos:end="97:79"><call pos:start="97:25" pos:end="97:79"><name pos:start="97:25" pos:end="97:30">av_log</name><argument_list pos:start="97:31" pos:end="97:79">(<argument pos:start="97:32" pos:end="97:39"><expr pos:start="97:32" pos:end="97:39"><name pos:start="97:32" pos:end="97:39"><name pos:start="97:32" pos:end="97:32">s</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:39">avctx</name></name></expr></argument>, <argument pos:start="97:42" pos:end="97:53"><expr pos:start="97:42" pos:end="97:53"><name pos:start="97:42" pos:end="97:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:56" pos:end="97:75"><expr pos:start="97:56" pos:end="97:75"><literal type="string" pos:start="97:56" pos:end="97:75">"ZRL overflow: %d\n"</literal></expr></argument>, <argument pos:start="97:78" pos:end="97:78"><expr pos:start="97:78" pos:end="97:78"><name pos:start="97:78" pos:end="97:78">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="99:25" pos:end="99:51">return <expr pos:start="99:32" pos:end="99:50"><name pos:start="99:32" pos:end="99:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="103:19" pos:end="121:17">else <block pos:start="103:24" pos:end="121:17">{<block_content pos:start="105:21" pos:end="119:26">

                    <expr_stmt pos:start="105:21" pos:end="105:37"><expr pos:start="105:21" pos:end="105:36"><name pos:start="105:21" pos:end="105:23">val</name> <operator pos:start="105:25" pos:end="105:25">=</operator> <operator pos:start="105:27" pos:end="105:27">(</operator><literal type="number" pos:start="105:28" pos:end="105:28">1</literal> <operator pos:start="105:30" pos:end="105:31">&lt;&lt;</operator> <name pos:start="105:33" pos:end="105:35">run</name><operator pos:start="105:36" pos:end="105:36">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="107:21" pos:end="115:21"><if pos:start="107:21" pos:end="115:21">if <condition pos:start="107:24" pos:end="107:28">(<expr pos:start="107:25" pos:end="107:27"><name pos:start="107:25" pos:end="107:27">run</name></expr>)</condition> <block pos:start="107:30" pos:end="115:21">{<block_content pos:start="109:25" pos:end="113:56">

                        <expr_stmt pos:start="109:25" pos:end="109:49"><expr pos:start="109:25" pos:end="109:48"><call pos:start="109:25" pos:end="109:48"><name pos:start="109:25" pos:end="109:36">UPDATE_CACHE</name><argument_list pos:start="109:37" pos:end="109:48">(<argument pos:start="109:38" pos:end="109:39"><expr pos:start="109:38" pos:end="109:39"><name pos:start="109:38" pos:end="109:39">re</name></expr></argument>, <argument pos:start="109:42" pos:end="109:47"><expr pos:start="109:42" pos:end="109:47"><operator pos:start="109:42" pos:end="109:42">&amp;</operator><name pos:start="109:43" pos:end="109:47"><name pos:start="109:43" pos:end="109:43">s</name><operator pos:start="109:44" pos:end="109:45">-&gt;</operator><name pos:start="109:46" pos:end="109:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="111:25" pos:end="111:69"><expr pos:start="111:25" pos:end="111:68"><name pos:start="111:25" pos:end="111:27">val</name> <operator pos:start="111:29" pos:end="111:30">+=</operator> <call pos:start="111:32" pos:end="111:68"><name pos:start="111:32" pos:end="111:40">NEG_USR32</name><argument_list pos:start="111:41" pos:end="111:68">(<argument pos:start="111:42" pos:end="111:62"><expr pos:start="111:42" pos:end="111:62"><call pos:start="111:42" pos:end="111:62"><name pos:start="111:42" pos:end="111:50">GET_CACHE</name><argument_list pos:start="111:51" pos:end="111:62">(<argument pos:start="111:52" pos:end="111:53"><expr pos:start="111:52" pos:end="111:53"><name pos:start="111:52" pos:end="111:53">re</name></expr></argument>, <argument pos:start="111:56" pos:end="111:61"><expr pos:start="111:56" pos:end="111:61"><operator pos:start="111:56" pos:end="111:56">&amp;</operator><name pos:start="111:57" pos:end="111:61"><name pos:start="111:57" pos:end="111:57">s</name><operator pos:start="111:58" pos:end="111:59">-&gt;</operator><name pos:start="111:60" pos:end="111:61">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:65" pos:end="111:67"><expr pos:start="111:65" pos:end="111:67"><name pos:start="111:65" pos:end="111:67">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="113:25" pos:end="113:56"><expr pos:start="113:25" pos:end="113:55"><call pos:start="113:25" pos:end="113:55"><name pos:start="113:25" pos:end="113:38">LAST_SKIP_BITS</name><argument_list pos:start="113:39" pos:end="113:55">(<argument pos:start="113:40" pos:end="113:41"><expr pos:start="113:40" pos:end="113:41"><name pos:start="113:40" pos:end="113:41">re</name></expr></argument>, <argument pos:start="113:44" pos:end="113:49"><expr pos:start="113:44" pos:end="113:49"><operator pos:start="113:44" pos:end="113:44">&amp;</operator><name pos:start="113:45" pos:end="113:49"><name pos:start="113:45" pos:end="113:45">s</name><operator pos:start="113:46" pos:end="113:47">-&gt;</operator><name pos:start="113:48" pos:end="113:49">gb</name></name></expr></argument>, <argument pos:start="113:52" pos:end="113:54"><expr pos:start="113:52" pos:end="113:54"><name pos:start="113:52" pos:end="113:54">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:38"><expr pos:start="117:21" pos:end="117:37"><operator pos:start="117:21" pos:end="117:21">*</operator><name pos:start="117:22" pos:end="117:27">EOBRUN</name> <operator pos:start="117:29" pos:end="117:29">=</operator> <name pos:start="117:31" pos:end="117:33">val</name> <operator pos:start="117:35" pos:end="117:35">-</operator> <literal type="number" pos:start="117:37" pos:end="117:37">1</literal></expr>;</expr_stmt>

                    <break pos:start="119:21" pos:end="119:26">break;</break>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="127:9" pos:end="127:33"><expr pos:start="127:9" pos:end="127:32"><call pos:start="127:9" pos:end="127:32"><name pos:start="127:9" pos:end="127:20">CLOSE_READER</name><argument_list pos:start="127:21" pos:end="127:32">(<argument pos:start="127:22" pos:end="127:23"><expr pos:start="127:22" pos:end="127:23"><name pos:start="127:22" pos:end="127:23">re</name></expr></argument>, <argument pos:start="127:26" pos:end="127:31"><expr pos:start="127:26" pos:end="127:31"><operator pos:start="127:26" pos:end="127:26">&amp;</operator><name pos:start="127:27" pos:end="127:31"><name pos:start="127:27" pos:end="127:27">s</name><operator pos:start="127:28" pos:end="127:29">-&gt;</operator><name pos:start="127:30" pos:end="127:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <if_stmt pos:start="133:5" pos:end="135:22"><if pos:start="133:5" pos:end="135:22">if <condition pos:start="133:8" pos:end="133:22">(<expr pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:9">i</name> <operator pos:start="133:11" pos:end="133:11">&gt;</operator> <operator pos:start="133:13" pos:end="133:13">*</operator><name pos:start="133:14" pos:end="133:21">last_nnz</name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:22"><block_content pos:start="135:9" pos:end="135:22">

        <expr_stmt pos:start="135:9" pos:end="135:22"><expr pos:start="135:9" pos:end="135:21"><operator pos:start="135:9" pos:end="135:9">*</operator><name pos:start="135:10" pos:end="135:17">last_nnz</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <name pos:start="135:21" pos:end="135:21">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="139:5" pos:end="139:13">return <expr pos:start="139:12" pos:end="139:12"><literal type="number" pos:start="139:12" pos:end="139:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
