<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23548.c" pos:tabs="8"><function pos:start="1:1" pos:end="289:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:37">yuv2packed2</name>)<parameter_list pos:start="1:39" pos:end="3:128">(<parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:49">SwsContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">c</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:74"><decl pos:start="1:55" pos:end="1:74"><type pos:start="1:55" pos:end="1:74"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:68">uint16_t</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">buf0</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:96"><decl pos:start="1:77" pos:end="1:96"><type pos:start="1:77" pos:end="1:96"><specifier pos:start="1:77" pos:end="1:81">const</specifier> <name pos:start="1:83" pos:end="1:90">uint16_t</name> <modifier pos:start="1:92" pos:end="1:92">*</modifier></type><name pos:start="1:93" pos:end="1:96">buf1</name></decl></parameter>, <parameter pos:start="1:99" pos:end="1:120"><decl pos:start="1:99" pos:end="1:120"><type pos:start="1:99" pos:end="1:120"><specifier pos:start="1:99" pos:end="1:103">const</specifier> <name pos:start="1:105" pos:end="1:112">uint16_t</name> <modifier pos:start="1:114" pos:end="1:114">*</modifier></type><name pos:start="1:115" pos:end="1:120">uvbuf0</name></decl></parameter>, <parameter pos:start="1:123" pos:end="1:144"><decl pos:start="1:123" pos:end="1:144"><type pos:start="1:123" pos:end="1:144"><specifier pos:start="1:123" pos:end="1:127">const</specifier> <name pos:start="1:129" pos:end="1:136">uint16_t</name> <modifier pos:start="1:138" pos:end="1:138">*</modifier></type><name pos:start="1:139" pos:end="1:144">uvbuf1</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:40">uint16_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:47">abuf0</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:70"><decl pos:start="3:50" pos:end="3:70"><type pos:start="3:50" pos:end="3:70"><specifier pos:start="3:50" pos:end="3:54">const</specifier> <name pos:start="3:56" pos:end="3:63">uint16_t</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:70">abuf1</name></decl></parameter>, <parameter pos:start="3:73" pos:end="3:85"><decl pos:start="3:73" pos:end="3:85"><type pos:start="3:73" pos:end="3:85"><name pos:start="3:73" pos:end="3:79">uint8_t</name> <modifier pos:start="3:81" pos:end="3:81">*</modifier></type><name pos:start="3:82" pos:end="3:85">dest</name></decl></parameter>, <parameter pos:start="3:88" pos:end="3:95"><decl pos:start="3:88" pos:end="3:95"><type pos:start="3:88" pos:end="3:95"><name pos:start="3:88" pos:end="3:90">int</name></type> <name pos:start="3:92" pos:end="3:95">dstW</name></decl></parameter>, <parameter pos:start="3:98" pos:end="3:107"><decl pos:start="3:98" pos:end="3:107"><type pos:start="3:98" pos:end="3:107"><name pos:start="3:98" pos:end="3:100">int</name></type> <name pos:start="3:102" pos:end="3:107">yalpha</name></decl></parameter>, <parameter pos:start="3:110" pos:end="3:120"><decl pos:start="3:110" pos:end="3:120"><type pos:start="3:110" pos:end="3:120"><name pos:start="3:110" pos:end="3:112">int</name></type> <name pos:start="3:114" pos:end="3:120">uvalpha</name></decl></parameter>, <parameter pos:start="3:123" pos:end="3:127"><decl pos:start="3:123" pos:end="3:127"><type pos:start="3:123" pos:end="3:127"><name pos:start="3:123" pos:end="3:125">int</name></type> <name pos:start="3:127" pos:end="3:127">y</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="289:1">{<block_content pos:start="7:5" pos:end="287:125">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type>  <name pos:start="7:10" pos:end="7:16">yalpha1</name><init pos:start="7:17" pos:end="7:29">=<expr pos:start="7:18" pos:end="7:29"><literal type="number" pos:start="7:18" pos:end="7:22">4095</literal><operator pos:start="7:22" pos:end="7:22">-</operator> <name pos:start="7:24" pos:end="7:29">yalpha</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">uvalpha1</name><init pos:start="9:17" pos:end="9:29">=<expr pos:start="9:18" pos:end="9:29"><literal type="number" pos:start="9:18" pos:end="9:22">4095</literal><operator pos:start="9:22" pos:end="9:22">-</operator><name pos:start="9:23" pos:end="9:29">uvalpha</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:24">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <if_stmt pos:start="17:5" pos:end="286:0"><if pos:start="17:5" pos:end="286:0">if<condition pos:start="17:7" pos:end="17:34">(<expr pos:start="17:8" pos:end="17:33"><operator pos:start="17:8" pos:end="17:8">!</operator><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:10">c</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:17">flags</name></name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <name pos:start="17:21" pos:end="17:32">SWS_BITEXACT</name><operator pos:start="17:33" pos:end="17:33">)</operator></expr>)</condition> <block pos:start="17:36" pos:end="286:0">{<block_content pos:start="19:9" pos:end="281:9">

        <switch pos:start="19:9" pos:end="281:9">switch<condition pos:start="19:15" pos:end="19:28">(<expr pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:16">c</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:27">dstFormat</name></name></expr>)</condition> <block pos:start="19:30" pos:end="281:9">{<block_content pos:start="23:9" pos:end="279:23">

        <comment type="line" pos:start="21:9" pos:end="21:82">//Note 8280 == DSTW_OFFSET but the preprocessor can't handle that there :(</comment>

        <case pos:start="23:9" pos:end="23:27">case <expr pos:start="23:14" pos:end="23:26"><name pos:start="23:14" pos:end="23:26">PIX_FMT_RGB32</name></expr>:</case>

            <if_stmt pos:start="25:13" pos:end="135:13"><if pos:start="25:13" pos:end="107:13">if <condition pos:start="25:16" pos:end="25:53">(<expr pos:start="25:17" pos:end="25:52"><name pos:start="25:17" pos:end="25:36">CONFIG_SWSCALE_ALPHA</name> <operator pos:start="25:38" pos:end="25:39">&amp;&amp;</operator> <name pos:start="25:41" pos:end="25:52"><name pos:start="25:41" pos:end="25:41">c</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:52">alpPixBuf</name></name></expr>)</condition> <block pos:start="25:55" pos:end="107:13">{<block_content pos:start="29:17" pos:end="106:0">

<cpp:if pos:start="27:1" pos:end="27:15">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:15">ARCH_X86_64</name></expr></cpp:if>

                <asm pos:start="29:17" pos:end="56:0">__asm__ <specifier pos:start="29:25" pos:end="29:32">volatile</specifier>(

                    YSCALEYUV2RGB(%%r8, %5)

                    YSCALEYUV2RGB_YA(%%r8, %5, %6, %7)

                    "psraw                  $3, %%mm1       \n\t" <comment type="block" pos:start="35:67" pos:end="35:98">/* abuf0[eax] - abuf1[eax] &gt;&gt;7*/</comment>

                    "psraw                  $3, %%mm7       \n\t" <comment type="block" pos:start="37:67" pos:end="37:98">/* abuf0[eax] - abuf1[eax] &gt;&gt;7*/</comment>

                    "packuswb            %%mm7, %%mm1       \n\t"

                    WRITEBGR32(%4, 8280(%5), %%r8, %%mm2, %%mm4, %%mm5, %%mm1, %%mm0, %%mm7, %%mm3, %%mm6)



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "r" (dest),

                    "a" (&amp;c-&gt;redDither)

                    ,"r" (abuf0), "r" (abuf1)

                    : "%r8"

                );</asm>

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="57:17" pos:end="57:42"><expr pos:start="57:17" pos:end="57:41"><name pos:start="57:17" pos:end="57:25"><name pos:start="57:17" pos:end="57:17">c</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:25">u_temp</name></name><operator pos:start="57:26" pos:end="57:26">=</operator><operator pos:start="57:27" pos:end="57:27">(</operator><name pos:start="57:28" pos:end="57:35">intptr_t</name><operator pos:start="57:36" pos:end="57:36">)</operator><name pos:start="57:37" pos:end="57:41">abuf0</name></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:42"><expr pos:start="59:17" pos:end="59:41"><name pos:start="59:17" pos:end="59:25"><name pos:start="59:17" pos:end="59:17">c</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:25">v_temp</name></name><operator pos:start="59:26" pos:end="59:26">=</operator><operator pos:start="59:27" pos:end="59:27">(</operator><name pos:start="59:28" pos:end="59:35">intptr_t</name><operator pos:start="59:36" pos:end="59:36">)</operator><name pos:start="59:37" pos:end="59:41">abuf1</name></expr>;</expr_stmt>

                <asm pos:start="61:17" pos:end="106:0">__asm__ <specifier pos:start="61:25" pos:end="61:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2RGB(%%REGBP, %5)

                    "push                   %0              \n\t"

                    "push                   %1              \n\t"

                    "mov          "U_TEMP"(%5), %0          \n\t"

                    "mov          "V_TEMP"(%5), %1          \n\t"

                    YSCALEYUV2RGB_YA(%%REGBP, %5, %0, %1)

                    "psraw                  $3, %%mm1       \n\t" <comment type="block" pos:start="81:67" pos:end="81:98">/* abuf0[eax] - abuf1[eax] &gt;&gt;7*/</comment>

                    "psraw                  $3, %%mm7       \n\t" <comment type="block" pos:start="83:67" pos:end="83:98">/* abuf0[eax] - abuf1[eax] &gt;&gt;7*/</comment>

                    "packuswb            %%mm7, %%mm1       \n\t"

                    "pop                    %1              \n\t"

                    "pop                    %0              \n\t"

                    WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm1, %%mm0, %%mm7, %%mm3, %%mm6)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="107:15" pos:end="135:13">else <block pos:start="107:20" pos:end="135:13">{<block_content pos:start="109:17" pos:end="133:18">

                <asm pos:start="109:17" pos:end="133:18">__asm__ <specifier pos:start="109:25" pos:end="109:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2RGB(%%REGBP, %5)

                    "pcmpeqd %%mm7, %%mm7                   \n\t"

                    WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

            </block_content>}</block></else></if_stmt>

            <return pos:start="137:13" pos:end="137:19">return;</return>

        <case pos:start="139:9" pos:end="139:27">case <expr pos:start="139:14" pos:end="139:26"><name pos:start="139:14" pos:end="139:26">PIX_FMT_BGR24</name></expr>:</case>

            <asm pos:start="141:13" pos:end="163:14">__asm__ <specifier pos:start="141:21" pos:end="141:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB(%%REGBP, %5)

                "pxor    %%mm7, %%mm7                   \n\t"

                WRITEBGR24(%%REGb, 8280(%5), %%REGBP)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                "a" (&amp;c-&gt;redDither)

            );</asm>

            <return pos:start="165:13" pos:end="165:19">return;</return>

        <case pos:start="167:9" pos:end="167:28">case <expr pos:start="167:14" pos:end="167:27"><name pos:start="167:14" pos:end="167:27">PIX_FMT_RGB555</name></expr>:</case>

            <asm pos:start="169:13" pos:end="207:14">__asm__ <specifier pos:start="169:21" pos:end="169:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB(%%REGBP, %5)

                "pxor    %%mm7, %%mm7                   \n\t"

                <comment type="block" pos:start="181:17" pos:end="181:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="183:1" pos:end="183:18">#<cpp:directive pos:start="183:2" pos:end="183:6">ifdef</cpp:directive> <name pos:start="183:8" pos:end="183:18">DITHER1XBPP</name></cpp:ifdef>

                "paddusb "BLUE_DITHER"(%5), %%mm2      \n\t"

                "paddusb "GREEN_DITHER"(%5), %%mm4      \n\t"

                "paddusb "RED_DITHER"(%5), %%mm5      \n\t"

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>



                WRITERGB15(%%REGb, 8280(%5), %%REGBP)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                "a" (&amp;c-&gt;redDither)

            );</asm>

            <return pos:start="209:13" pos:end="209:19">return;</return>

        <case pos:start="211:9" pos:end="211:28">case <expr pos:start="211:14" pos:end="211:27"><name pos:start="211:14" pos:end="211:27">PIX_FMT_RGB565</name></expr>:</case>

            <asm pos:start="213:13" pos:end="249:14">__asm__ <specifier pos:start="213:21" pos:end="213:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB(%%REGBP, %5)

                "pxor    %%mm7, %%mm7                   \n\t"

                <comment type="block" pos:start="225:17" pos:end="225:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="227:1" pos:end="227:18">#<cpp:directive pos:start="227:2" pos:end="227:6">ifdef</cpp:directive> <name pos:start="227:8" pos:end="227:18">DITHER1XBPP</name></cpp:ifdef>

                "paddusb "BLUE_DITHER"(%5), %%mm2      \n\t"

                "paddusb "GREEN_DITHER"(%5), %%mm4      \n\t"

                "paddusb "RED_DITHER"(%5), %%mm5      \n\t"

<cpp:endif pos:start="235:1" pos:end="235:6">#<cpp:directive pos:start="235:2" pos:end="235:6">endif</cpp:directive></cpp:endif>



                WRITERGB16(%%REGb, 8280(%5), %%REGBP)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                "a" (&amp;c-&gt;redDither)

            );</asm>

            <return pos:start="251:13" pos:end="251:19">return;</return>

        <case pos:start="253:9" pos:end="253:29">case <expr pos:start="253:14" pos:end="253:28"><name pos:start="253:14" pos:end="253:28">PIX_FMT_YUYV422</name></expr>:</case>

            <asm pos:start="255:13" pos:end="275:14">__asm__ <specifier pos:start="255:21" pos:end="255:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov %4, %%"REG_b"                        \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2PACKED(%%REGBP, %5)

                WRITEYUY2(%%REGb, 8280(%5), %%REGBP)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                "a" (&amp;c-&gt;redDither)

            );</asm>

            <return pos:start="277:13" pos:end="277:19">return;</return>

        <default pos:start="279:9" pos:end="279:16">default:</default> <break pos:start="279:18" pos:end="279:23">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="285:1" pos:end="285:6">#<cpp:directive pos:start="285:2" pos:end="285:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="285:8" pos:end="285:29">//COMPILE_TEMPLATE_MMX</comment>

    <macro pos:start="287:5" pos:end="287:125"><name pos:start="287:5" pos:end="287:25">YSCALE_YUV_2_ANYRGB_C</name><argument_list pos:start="287:26" pos:end="287:125">(<argument pos:start="287:27" pos:end="287:45">YSCALE_YUV_2_RGB2_C</argument>, <argument pos:start="287:48" pos:end="287:77">YSCALE_YUV_2_PACKED2_C(void,<literal type="number" pos:start="287:76" pos:end="287:76">0</literal>)</argument>, <argument pos:start="287:80" pos:end="287:102">YSCALE_YUV_2_GRAY16_2_C</argument>, <argument pos:start="287:105" pos:end="287:124">YSCALE_YUV_2_MONO2_C</argument>)</argument_list></macro>

</block_content>}</block></function>
</unit>
