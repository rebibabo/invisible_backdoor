<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4854.c" pos:tabs="8"><function pos:start="1:1" pos:end="441:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mps2_common_init</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:41">MachineState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:50">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="441:1">{<block_content pos:start="5:5" pos:end="439:33">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:49"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">MPS2MachineState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:25">mms</name> <init pos:start="5:27" pos:end="5:49">= <expr pos:start="5:29" pos:end="5:49"><call pos:start="5:29" pos:end="5:49"><name pos:start="5:29" pos:end="5:40">MPS2_MACHINE</name><argument_list pos:start="5:41" pos:end="5:49">(<argument pos:start="5:42" pos:end="5:48"><expr pos:start="5:42" pos:end="5:48"><name pos:start="5:42" pos:end="5:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:59"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MPS2MachineClass</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">mmc</name> <init pos:start="7:27" pos:end="7:59">= <expr pos:start="7:29" pos:end="7:59"><call pos:start="7:29" pos:end="7:59"><name pos:start="7:29" pos:end="7:50">MPS2_MACHINE_GET_CLASS</name><argument_list pos:start="7:51" pos:end="7:59">(<argument pos:start="7:52" pos:end="7:58"><expr pos:start="7:52" pos:end="7:58"><name pos:start="7:52" pos:end="7:58">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:31">system_memory</name> <init pos:start="9:33" pos:end="9:53">= <expr pos:start="9:35" pos:end="9:53"><call pos:start="9:35" pos:end="9:53"><name pos:start="9:35" pos:end="9:51">get_system_memory</name><argument_list pos:start="9:52" pos:end="9:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">DeviceState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:23">armv7m</name></decl>, <decl pos:start="11:26" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:17"><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:32">sccdev</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:28">(<expr pos:start="15:9" pos:end="15:27"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:27"><name pos:start="15:10" pos:end="15:16">machine</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:27">cpu_model</name></name></expr>)</condition> <block pos:start="15:30" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:44">

        <expr_stmt pos:start="17:9" pos:end="17:44"><expr pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:15">machine</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:26">cpu_model</name></name> <operator pos:start="17:28" pos:end="17:28">=</operator> <name pos:start="17:30" pos:end="17:43"><name pos:start="17:30" pos:end="17:32">mmc</name><operator pos:start="17:33" pos:end="17:34">-&gt;</operator><name pos:start="17:35" pos:end="17:43">cpu_model</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:56">(<expr pos:start="23:9" pos:end="23:55"><call pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:14">strcmp</name><argument_list pos:start="23:15" pos:end="23:50">(<argument pos:start="23:16" pos:end="23:33"><expr pos:start="23:16" pos:end="23:33"><name pos:start="23:16" pos:end="23:33"><name pos:start="23:16" pos:end="23:22">machine</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:33">cpu_model</name></name></expr></argument>, <argument pos:start="23:36" pos:end="23:49"><expr pos:start="23:36" pos:end="23:49"><name pos:start="23:36" pos:end="23:49"><name pos:start="23:36" pos:end="23:38">mmc</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:49">cpu_model</name></name></expr></argument>)</argument_list></call> <operator pos:start="23:52" pos:end="23:53">!=</operator> <literal type="number" pos:start="23:55" pos:end="23:55">0</literal></expr>)</condition> <block pos:start="23:58" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:16">

        <expr_stmt pos:start="25:9" pos:end="25:80"><expr pos:start="25:9" pos:end="25:79"><call pos:start="25:9" pos:end="25:79"><name pos:start="25:9" pos:end="25:20">error_report</name><argument_list pos:start="25:21" pos:end="25:79">(<argument pos:start="25:22" pos:end="25:62"><expr pos:start="25:22" pos:end="25:62"><literal type="string" pos:start="25:22" pos:end="25:62">"This board can only be used with CPU %s"</literal></expr></argument>, <argument pos:start="25:65" pos:end="25:78"><expr pos:start="25:65" pos:end="25:78"><name pos:start="25:65" pos:end="25:78"><name pos:start="25:65" pos:end="25:67">mmc</name><operator pos:start="25:68" pos:end="25:69">-&gt;</operator><name pos:start="25:70" pos:end="25:78">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><call pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">exit</name><argument_list pos:start="27:13" pos:end="27:15">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="87:7">/* The FPGA images have an odd combination of different RAMs,

     * because in hardware they are different implementations and

     * connected to different buses, giving varying performance/size

     * tradeoffs. For QEMU they're all just RAM, though. We arbitrarily

     * call the 16MB our "system memory", as it's the largest lump.

     *

     * Common to both boards:

     *  0x21000000..0x21ffffff : PSRAM (16MB)

     * AN385 only:

     *  0x00000000 .. 0x003fffff : ZBT SSRAM1

     *  0x00400000 .. 0x007fffff : mirror of ZBT SSRAM1

     *  0x20000000 .. 0x203fffff : ZBT SSRAM 2&amp;3

     *  0x20400000 .. 0x207fffff : mirror of ZBT SSRAM 2&amp;3

     *  0x01000000 .. 0x01003fff : block RAM (16K)

     *  0x01004000 .. 0x01007fff : mirror of above

     *  0x01008000 .. 0x0100bfff : mirror of above

     *  0x0100c000 .. 0x0100ffff : mirror of above

     * AN511 only:

     *  0x00000000 .. 0x0003ffff : FPGA block RAM

     *  0x00400000 .. 0x007fffff : ZBT SSRAM1

     *  0x20000000 .. 0x2001ffff : SRAM

     *  0x20400000 .. 0x207fffff : ZBT SSRAM 2&amp;3

     *

     * The AN385 has a feature where the lowest 16K can be mapped

     * either to the bottom of the ZBT SSRAM1 or to the block RAM.

     * This is of no use for QEMU so we don't implement it (as if

     * zbt_boot_ctrl is always zero).

     */</comment>

    <expr_stmt pos:start="89:5" pos:end="91:69"><expr pos:start="89:5" pos:end="91:68"><call pos:start="89:5" pos:end="91:68"><name pos:start="89:5" pos:end="89:40">memory_region_allocate_system_memory</name><argument_list pos:start="89:41" pos:end="91:68">(<argument pos:start="89:42" pos:end="89:52"><expr pos:start="89:42" pos:end="89:52"><operator pos:start="89:42" pos:end="89:42">&amp;</operator><name pos:start="89:43" pos:end="89:52"><name pos:start="89:43" pos:end="89:45">mms</name><operator pos:start="89:46" pos:end="89:47">-&gt;</operator><name pos:start="89:48" pos:end="89:52">psram</name></name></expr></argument>,

                                         <argument pos:start="91:42" pos:end="91:45"><expr pos:start="91:42" pos:end="91:45"><name pos:start="91:42" pos:end="91:45">NULL</name></expr></argument>, <argument pos:start="91:48" pos:end="91:56"><expr pos:start="91:48" pos:end="91:56"><literal type="string" pos:start="91:48" pos:end="91:56">"mps.ram"</literal></expr></argument>, <argument pos:start="91:59" pos:end="91:67"><expr pos:start="91:59" pos:end="91:67"><literal type="number" pos:start="91:59" pos:end="91:67">0x1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:72"><expr pos:start="93:5" pos:end="93:71"><call pos:start="93:5" pos:end="93:71"><name pos:start="93:5" pos:end="93:31">memory_region_add_subregion</name><argument_list pos:start="93:32" pos:end="93:71">(<argument pos:start="93:33" pos:end="93:45"><expr pos:start="93:33" pos:end="93:45"><name pos:start="93:33" pos:end="93:45">system_memory</name></expr></argument>, <argument pos:start="93:48" pos:end="93:57"><expr pos:start="93:48" pos:end="93:57"><literal type="number" pos:start="93:48" pos:end="93:57">0x21000000</literal></expr></argument>, <argument pos:start="93:60" pos:end="93:70"><expr pos:start="93:60" pos:end="93:70"><operator pos:start="93:60" pos:end="93:60">&amp;</operator><name pos:start="93:61" pos:end="93:70"><name pos:start="93:61" pos:end="93:63">mms</name><operator pos:start="93:64" pos:end="93:65">-&gt;</operator><name pos:start="93:66" pos:end="93:70">psram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="97:5" pos:end="143:5">switch <condition pos:start="97:12" pos:end="97:27">(<expr pos:start="97:13" pos:end="97:26"><name pos:start="97:13" pos:end="97:26"><name pos:start="97:13" pos:end="97:15">mmc</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:26">fpga_type</name></name></expr>)</condition> <block pos:start="97:29" pos:end="143:5">{<block_content pos:start="99:5" pos:end="141:31">

    <case pos:start="99:5" pos:end="99:20">case <expr pos:start="99:10" pos:end="99:19"><name pos:start="99:10" pos:end="99:19">FPGA_AN385</name></expr>:</case>

        <expr_stmt pos:start="101:9" pos:end="101:60"><expr pos:start="101:9" pos:end="101:59"><call pos:start="101:9" pos:end="101:59"><name pos:start="101:9" pos:end="101:16">make_ram</name><argument_list pos:start="101:17" pos:end="101:59">(<argument pos:start="101:18" pos:end="101:29"><expr pos:start="101:18" pos:end="101:29"><operator pos:start="101:18" pos:end="101:18">&amp;</operator><name pos:start="101:19" pos:end="101:29"><name pos:start="101:19" pos:end="101:21">mms</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:29">ssram1</name></name></expr></argument>, <argument pos:start="101:32" pos:end="101:43"><expr pos:start="101:32" pos:end="101:43"><literal type="string" pos:start="101:32" pos:end="101:43">"mps.ssram1"</literal></expr></argument>, <argument pos:start="101:46" pos:end="101:48"><expr pos:start="101:46" pos:end="101:48"><literal type="number" pos:start="101:46" pos:end="101:48">0x0</literal></expr></argument>, <argument pos:start="101:51" pos:end="101:58"><expr pos:start="101:51" pos:end="101:58"><literal type="number" pos:start="101:51" pos:end="101:58">0x400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:79"><expr pos:start="103:9" pos:end="103:78"><call pos:start="103:9" pos:end="103:78"><name pos:start="103:9" pos:end="103:22">make_ram_alias</name><argument_list pos:start="103:23" pos:end="103:78">(<argument pos:start="103:24" pos:end="103:37"><expr pos:start="103:24" pos:end="103:37"><operator pos:start="103:24" pos:end="103:24">&amp;</operator><name pos:start="103:25" pos:end="103:37"><name pos:start="103:25" pos:end="103:27">mms</name><operator pos:start="103:28" pos:end="103:29">-&gt;</operator><name pos:start="103:30" pos:end="103:37">ssram1_m</name></name></expr></argument>, <argument pos:start="103:40" pos:end="103:53"><expr pos:start="103:40" pos:end="103:53"><literal type="string" pos:start="103:40" pos:end="103:53">"mps.ssram1_m"</literal></expr></argument>, <argument pos:start="103:56" pos:end="103:67"><expr pos:start="103:56" pos:end="103:67"><operator pos:start="103:56" pos:end="103:56">&amp;</operator><name pos:start="103:57" pos:end="103:67"><name pos:start="103:57" pos:end="103:59">mms</name><operator pos:start="103:60" pos:end="103:61">-&gt;</operator><name pos:start="103:62" pos:end="103:67">ssram1</name></name></expr></argument>, <argument pos:start="103:70" pos:end="103:77"><expr pos:start="103:70" pos:end="103:77"><literal type="number" pos:start="103:70" pos:end="103:77">0x400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:69"><expr pos:start="105:9" pos:end="105:68"><call pos:start="105:9" pos:end="105:68"><name pos:start="105:9" pos:end="105:16">make_ram</name><argument_list pos:start="105:17" pos:end="105:68">(<argument pos:start="105:18" pos:end="105:30"><expr pos:start="105:18" pos:end="105:30"><operator pos:start="105:18" pos:end="105:18">&amp;</operator><name pos:start="105:19" pos:end="105:30"><name pos:start="105:19" pos:end="105:21">mms</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:30">ssram23</name></name></expr></argument>, <argument pos:start="105:33" pos:end="105:45"><expr pos:start="105:33" pos:end="105:45"><literal type="string" pos:start="105:33" pos:end="105:45">"mps.ssram23"</literal></expr></argument>, <argument pos:start="105:48" pos:end="105:57"><expr pos:start="105:48" pos:end="105:57"><literal type="number" pos:start="105:48" pos:end="105:57">0x20000000</literal></expr></argument>, <argument pos:start="105:60" pos:end="105:67"><expr pos:start="105:60" pos:end="105:67"><literal type="number" pos:start="105:60" pos:end="105:67">0x400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:50"><expr pos:start="107:9" pos:end="109:49"><call pos:start="107:9" pos:end="109:49"><name pos:start="107:9" pos:end="107:22">make_ram_alias</name><argument_list pos:start="107:23" pos:end="109:49">(<argument pos:start="107:24" pos:end="107:38"><expr pos:start="107:24" pos:end="107:38"><operator pos:start="107:24" pos:end="107:24">&amp;</operator><name pos:start="107:25" pos:end="107:38"><name pos:start="107:25" pos:end="107:27">mms</name><operator pos:start="107:28" pos:end="107:29">-&gt;</operator><name pos:start="107:30" pos:end="107:38">ssram23_m</name></name></expr></argument>, <argument pos:start="107:41" pos:end="107:55"><expr pos:start="107:41" pos:end="107:55"><literal type="string" pos:start="107:41" pos:end="107:55">"mps.ssram23_m"</literal></expr></argument>,

                       <argument pos:start="109:24" pos:end="109:36"><expr pos:start="109:24" pos:end="109:36"><operator pos:start="109:24" pos:end="109:24">&amp;</operator><name pos:start="109:25" pos:end="109:36"><name pos:start="109:25" pos:end="109:27">mms</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:36">ssram23</name></name></expr></argument>, <argument pos:start="109:39" pos:end="109:48"><expr pos:start="109:39" pos:end="109:48"><literal type="number" pos:start="109:39" pos:end="109:48">0x20400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:69"><expr pos:start="111:9" pos:end="111:68"><call pos:start="111:9" pos:end="111:68"><name pos:start="111:9" pos:end="111:16">make_ram</name><argument_list pos:start="111:17" pos:end="111:68">(<argument pos:start="111:18" pos:end="111:31"><expr pos:start="111:18" pos:end="111:31"><operator pos:start="111:18" pos:end="111:18">&amp;</operator><name pos:start="111:19" pos:end="111:31"><name pos:start="111:19" pos:end="111:21">mms</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:31">blockram</name></name></expr></argument>, <argument pos:start="111:34" pos:end="111:47"><expr pos:start="111:34" pos:end="111:47"><literal type="string" pos:start="111:34" pos:end="111:47">"mps.blockram"</literal></expr></argument>, <argument pos:start="111:50" pos:end="111:59"><expr pos:start="111:50" pos:end="111:59"><literal type="number" pos:start="111:50" pos:end="111:59">0x01000000</literal></expr></argument>, <argument pos:start="111:62" pos:end="111:67"><expr pos:start="111:62" pos:end="111:67"><literal type="number" pos:start="111:62" pos:end="111:67">0x4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="115:51"><expr pos:start="113:9" pos:end="115:50"><call pos:start="113:9" pos:end="115:50"><name pos:start="113:9" pos:end="113:22">make_ram_alias</name><argument_list pos:start="113:23" pos:end="115:50">(<argument pos:start="113:24" pos:end="113:40"><expr pos:start="113:24" pos:end="113:40"><operator pos:start="113:24" pos:end="113:24">&amp;</operator><name pos:start="113:25" pos:end="113:40"><name pos:start="113:25" pos:end="113:27">mms</name><operator pos:start="113:28" pos:end="113:29">-&gt;</operator><name pos:start="113:30" pos:end="113:40">blockram_m1</name></name></expr></argument>, <argument pos:start="113:43" pos:end="113:59"><expr pos:start="113:43" pos:end="113:59"><literal type="string" pos:start="113:43" pos:end="113:59">"mps.blockram_m1"</literal></expr></argument>,

                       <argument pos:start="115:24" pos:end="115:37"><expr pos:start="115:24" pos:end="115:37"><operator pos:start="115:24" pos:end="115:24">&amp;</operator><name pos:start="115:25" pos:end="115:37"><name pos:start="115:25" pos:end="115:27">mms</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:37">blockram</name></name></expr></argument>, <argument pos:start="115:40" pos:end="115:49"><expr pos:start="115:40" pos:end="115:49"><literal type="number" pos:start="115:40" pos:end="115:49">0x01004000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="119:51"><expr pos:start="117:9" pos:end="119:50"><call pos:start="117:9" pos:end="119:50"><name pos:start="117:9" pos:end="117:22">make_ram_alias</name><argument_list pos:start="117:23" pos:end="119:50">(<argument pos:start="117:24" pos:end="117:40"><expr pos:start="117:24" pos:end="117:40"><operator pos:start="117:24" pos:end="117:24">&amp;</operator><name pos:start="117:25" pos:end="117:40"><name pos:start="117:25" pos:end="117:27">mms</name><operator pos:start="117:28" pos:end="117:29">-&gt;</operator><name pos:start="117:30" pos:end="117:40">blockram_m2</name></name></expr></argument>, <argument pos:start="117:43" pos:end="117:59"><expr pos:start="117:43" pos:end="117:59"><literal type="string" pos:start="117:43" pos:end="117:59">"mps.blockram_m2"</literal></expr></argument>,

                       <argument pos:start="119:24" pos:end="119:37"><expr pos:start="119:24" pos:end="119:37"><operator pos:start="119:24" pos:end="119:24">&amp;</operator><name pos:start="119:25" pos:end="119:37"><name pos:start="119:25" pos:end="119:27">mms</name><operator pos:start="119:28" pos:end="119:29">-&gt;</operator><name pos:start="119:30" pos:end="119:37">blockram</name></name></expr></argument>, <argument pos:start="119:40" pos:end="119:49"><expr pos:start="119:40" pos:end="119:49"><literal type="number" pos:start="119:40" pos:end="119:49">0x01008000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="123:51"><expr pos:start="121:9" pos:end="123:50"><call pos:start="121:9" pos:end="123:50"><name pos:start="121:9" pos:end="121:22">make_ram_alias</name><argument_list pos:start="121:23" pos:end="123:50">(<argument pos:start="121:24" pos:end="121:40"><expr pos:start="121:24" pos:end="121:40"><operator pos:start="121:24" pos:end="121:24">&amp;</operator><name pos:start="121:25" pos:end="121:40"><name pos:start="121:25" pos:end="121:27">mms</name><operator pos:start="121:28" pos:end="121:29">-&gt;</operator><name pos:start="121:30" pos:end="121:40">blockram_m3</name></name></expr></argument>, <argument pos:start="121:43" pos:end="121:59"><expr pos:start="121:43" pos:end="121:59"><literal type="string" pos:start="121:43" pos:end="121:59">"mps.blockram_m3"</literal></expr></argument>,

                       <argument pos:start="123:24" pos:end="123:37"><expr pos:start="123:24" pos:end="123:37"><operator pos:start="123:24" pos:end="123:24">&amp;</operator><name pos:start="123:25" pos:end="123:37"><name pos:start="123:25" pos:end="123:27">mms</name><operator pos:start="123:28" pos:end="123:29">-&gt;</operator><name pos:start="123:30" pos:end="123:37">blockram</name></name></expr></argument>, <argument pos:start="123:40" pos:end="123:49"><expr pos:start="123:40" pos:end="123:49"><literal type="number" pos:start="123:40" pos:end="123:49">0x0100c000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:20">case <expr pos:start="127:10" pos:end="127:19"><name pos:start="127:10" pos:end="127:19">FPGA_AN511</name></expr>:</case>

        <expr_stmt pos:start="129:9" pos:end="129:63"><expr pos:start="129:9" pos:end="129:62"><call pos:start="129:9" pos:end="129:62"><name pos:start="129:9" pos:end="129:16">make_ram</name><argument_list pos:start="129:17" pos:end="129:62">(<argument pos:start="129:18" pos:end="129:31"><expr pos:start="129:18" pos:end="129:31"><operator pos:start="129:18" pos:end="129:18">&amp;</operator><name pos:start="129:19" pos:end="129:31"><name pos:start="129:19" pos:end="129:21">mms</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:31">blockram</name></name></expr></argument>, <argument pos:start="129:34" pos:end="129:47"><expr pos:start="129:34" pos:end="129:47"><literal type="string" pos:start="129:34" pos:end="129:47">"mps.blockram"</literal></expr></argument>, <argument pos:start="129:50" pos:end="129:52"><expr pos:start="129:50" pos:end="129:52"><literal type="number" pos:start="129:50" pos:end="129:52">0x0</literal></expr></argument>, <argument pos:start="129:55" pos:end="129:61"><expr pos:start="129:55" pos:end="129:61"><literal type="number" pos:start="129:55" pos:end="129:61">0x40000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:69"><expr pos:start="131:9" pos:end="131:68"><call pos:start="131:9" pos:end="131:68"><name pos:start="131:9" pos:end="131:16">make_ram</name><argument_list pos:start="131:17" pos:end="131:68">(<argument pos:start="131:18" pos:end="131:29"><expr pos:start="131:18" pos:end="131:29"><operator pos:start="131:18" pos:end="131:18">&amp;</operator><name pos:start="131:19" pos:end="131:29"><name pos:start="131:19" pos:end="131:21">mms</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:29">ssram1</name></name></expr></argument>, <argument pos:start="131:32" pos:end="131:43"><expr pos:start="131:32" pos:end="131:43"><literal type="string" pos:start="131:32" pos:end="131:43">"mps.ssram1"</literal></expr></argument>, <argument pos:start="131:46" pos:end="131:55"><expr pos:start="131:46" pos:end="131:55"><literal type="number" pos:start="131:46" pos:end="131:55">0x00400000</literal></expr></argument>, <argument pos:start="131:58" pos:end="131:67"><expr pos:start="131:58" pos:end="131:67"><literal type="number" pos:start="131:58" pos:end="131:67">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:62"><expr pos:start="133:9" pos:end="133:61"><call pos:start="133:9" pos:end="133:61"><name pos:start="133:9" pos:end="133:16">make_ram</name><argument_list pos:start="133:17" pos:end="133:61">(<argument pos:start="133:18" pos:end="133:27"><expr pos:start="133:18" pos:end="133:27"><operator pos:start="133:18" pos:end="133:18">&amp;</operator><name pos:start="133:19" pos:end="133:27"><name pos:start="133:19" pos:end="133:21">mms</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:27">sram</name></name></expr></argument>, <argument pos:start="133:30" pos:end="133:39"><expr pos:start="133:30" pos:end="133:39"><literal type="string" pos:start="133:30" pos:end="133:39">"mps.sram"</literal></expr></argument>, <argument pos:start="133:42" pos:end="133:51"><expr pos:start="133:42" pos:end="133:51"><literal type="number" pos:start="133:42" pos:end="133:51">0x20000000</literal></expr></argument>, <argument pos:start="133:54" pos:end="133:60"><expr pos:start="133:54" pos:end="133:60"><literal type="number" pos:start="133:54" pos:end="133:60">0x20000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:69"><expr pos:start="135:9" pos:end="135:68"><call pos:start="135:9" pos:end="135:68"><name pos:start="135:9" pos:end="135:16">make_ram</name><argument_list pos:start="135:17" pos:end="135:68">(<argument pos:start="135:18" pos:end="135:30"><expr pos:start="135:18" pos:end="135:30"><operator pos:start="135:18" pos:end="135:18">&amp;</operator><name pos:start="135:19" pos:end="135:30"><name pos:start="135:19" pos:end="135:21">mms</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:30">ssram23</name></name></expr></argument>, <argument pos:start="135:33" pos:end="135:45"><expr pos:start="135:33" pos:end="135:45"><literal type="string" pos:start="135:33" pos:end="135:45">"mps.ssram23"</literal></expr></argument>, <argument pos:start="135:48" pos:end="135:57"><expr pos:start="135:48" pos:end="135:57"><literal type="number" pos:start="135:48" pos:end="135:57">0x20400000</literal></expr></argument>, <argument pos:start="135:60" pos:end="135:67"><expr pos:start="135:60" pos:end="135:67"><literal type="number" pos:start="135:60" pos:end="135:67">0x400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    <default pos:start="139:5" pos:end="139:12">default:</default>

        <expr_stmt pos:start="141:9" pos:end="141:31"><expr pos:start="141:9" pos:end="141:30"><call pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:28">g_assert_not_reached</name><argument_list pos:start="141:29" pos:end="141:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="147:5" pos:end="147:70"><expr pos:start="147:5" pos:end="147:69"><call pos:start="147:5" pos:end="147:69"><name pos:start="147:5" pos:end="147:21">object_initialize</name><argument_list pos:start="147:22" pos:end="147:69">(<argument pos:start="147:23" pos:end="147:34"><expr pos:start="147:23" pos:end="147:34"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:34"><name pos:start="147:24" pos:end="147:26">mms</name><operator pos:start="147:27" pos:end="147:28">-&gt;</operator><name pos:start="147:29" pos:end="147:34">armv7m</name></name></expr></argument>, <argument pos:start="147:37" pos:end="147:55"><expr pos:start="147:37" pos:end="147:55"><sizeof pos:start="147:37" pos:end="147:55">sizeof<argument_list pos:start="147:43" pos:end="147:55">(<argument pos:start="147:44" pos:end="147:54"><expr pos:start="147:44" pos:end="147:54"><name pos:start="147:44" pos:end="147:54"><name pos:start="147:44" pos:end="147:46">mms</name><operator pos:start="147:47" pos:end="147:48">-&gt;</operator><name pos:start="147:49" pos:end="147:54">armv7m</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="147:58" pos:end="147:68"><expr pos:start="147:58" pos:end="147:68"><name pos:start="147:58" pos:end="147:68">TYPE_ARMV7M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:34"><expr pos:start="149:5" pos:end="149:33"><name pos:start="149:5" pos:end="149:10">armv7m</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <call pos:start="149:14" pos:end="149:33"><name pos:start="149:14" pos:end="149:19">DEVICE</name><argument_list pos:start="149:20" pos:end="149:33">(<argument pos:start="149:21" pos:end="149:32"><expr pos:start="149:21" pos:end="149:32"><operator pos:start="149:21" pos:end="149:21">&amp;</operator><name pos:start="149:22" pos:end="149:32"><name pos:start="149:22" pos:end="149:24">mms</name><operator pos:start="149:25" pos:end="149:26">-&gt;</operator><name pos:start="149:27" pos:end="149:32">armv7m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:54"><expr pos:start="151:5" pos:end="151:53"><call pos:start="151:5" pos:end="151:53"><name pos:start="151:5" pos:end="151:23">qdev_set_parent_bus</name><argument_list pos:start="151:24" pos:end="151:53">(<argument pos:start="151:25" pos:end="151:30"><expr pos:start="151:25" pos:end="151:30"><name pos:start="151:25" pos:end="151:30">armv7m</name></expr></argument>, <argument pos:start="151:33" pos:end="151:52"><expr pos:start="151:33" pos:end="151:52"><call pos:start="151:33" pos:end="151:52"><name pos:start="151:33" pos:end="151:50">sysbus_get_default</name><argument_list pos:start="151:51" pos:end="151:52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="153:5" pos:end="171:5">switch <condition pos:start="153:12" pos:end="153:27">(<expr pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:15">mmc</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:26">fpga_type</name></name></expr>)</condition> <block pos:start="153:29" pos:end="171:5">{<block_content pos:start="155:5" pos:end="169:31">

    <case pos:start="155:5" pos:end="155:20">case <expr pos:start="155:10" pos:end="155:19"><name pos:start="155:10" pos:end="155:19">FPGA_AN385</name></expr>:</case>

        <expr_stmt pos:start="157:9" pos:end="157:52"><expr pos:start="157:9" pos:end="157:51"><call pos:start="157:9" pos:end="157:51"><name pos:start="157:9" pos:end="157:28">qdev_prop_set_uint32</name><argument_list pos:start="157:29" pos:end="157:51">(<argument pos:start="157:30" pos:end="157:35"><expr pos:start="157:30" pos:end="157:35"><name pos:start="157:30" pos:end="157:35">armv7m</name></expr></argument>, <argument pos:start="157:38" pos:end="157:46"><expr pos:start="157:38" pos:end="157:46"><literal type="string" pos:start="157:38" pos:end="157:46">"num-irq"</literal></expr></argument>, <argument pos:start="157:49" pos:end="157:50"><expr pos:start="157:49" pos:end="157:50"><literal type="number" pos:start="157:49" pos:end="157:50">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    <case pos:start="161:5" pos:end="161:20">case <expr pos:start="161:10" pos:end="161:19"><name pos:start="161:10" pos:end="161:19">FPGA_AN511</name></expr>:</case>

        <expr_stmt pos:start="163:9" pos:end="163:52"><expr pos:start="163:9" pos:end="163:51"><call pos:start="163:9" pos:end="163:51"><name pos:start="163:9" pos:end="163:28">qdev_prop_set_uint32</name><argument_list pos:start="163:29" pos:end="163:51">(<argument pos:start="163:30" pos:end="163:35"><expr pos:start="163:30" pos:end="163:35"><name pos:start="163:30" pos:end="163:35">armv7m</name></expr></argument>, <argument pos:start="163:38" pos:end="163:46"><expr pos:start="163:38" pos:end="163:46"><literal type="string" pos:start="163:38" pos:end="163:46">"num-irq"</literal></expr></argument>, <argument pos:start="163:49" pos:end="163:50"><expr pos:start="163:49" pos:end="163:50"><literal type="number" pos:start="163:49" pos:end="163:50">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <default pos:start="167:5" pos:end="167:12">default:</default>

        <expr_stmt pos:start="169:9" pos:end="169:31"><expr pos:start="169:9" pos:end="169:30"><call pos:start="169:9" pos:end="169:30"><name pos:start="169:9" pos:end="169:28">g_assert_not_reached</name><argument_list pos:start="169:29" pos:end="169:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <expr_stmt pos:start="173:5" pos:end="173:66"><expr pos:start="173:5" pos:end="173:65"><call pos:start="173:5" pos:end="173:65"><name pos:start="173:5" pos:end="173:24">qdev_prop_set_string</name><argument_list pos:start="173:25" pos:end="173:65">(<argument pos:start="173:26" pos:end="173:31"><expr pos:start="173:26" pos:end="173:31"><name pos:start="173:26" pos:end="173:31">armv7m</name></expr></argument>, <argument pos:start="173:34" pos:end="173:44"><expr pos:start="173:34" pos:end="173:44"><literal type="string" pos:start="173:34" pos:end="173:44">"cpu-model"</literal></expr></argument>, <argument pos:start="173:47" pos:end="173:64"><expr pos:start="173:47" pos:end="173:64"><name pos:start="173:47" pos:end="173:64"><name pos:start="173:47" pos:end="173:53">machine</name><operator pos:start="173:54" pos:end="173:55">-&gt;</operator><name pos:start="173:56" pos:end="173:64">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="177:53"><expr pos:start="175:5" pos:end="177:52"><call pos:start="175:5" pos:end="177:52"><name pos:start="175:5" pos:end="175:28">object_property_set_link</name><argument_list pos:start="175:29" pos:end="177:52">(<argument pos:start="175:30" pos:end="175:49"><expr pos:start="175:30" pos:end="175:49"><call pos:start="175:30" pos:end="175:49"><name pos:start="175:30" pos:end="175:35">OBJECT</name><argument_list pos:start="175:36" pos:end="175:49">(<argument pos:start="175:37" pos:end="175:48"><expr pos:start="175:37" pos:end="175:48"><operator pos:start="175:37" pos:end="175:37">&amp;</operator><name pos:start="175:38" pos:end="175:48"><name pos:start="175:38" pos:end="175:40">mms</name><operator pos:start="175:41" pos:end="175:42">-&gt;</operator><name pos:start="175:43" pos:end="175:48">armv7m</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="175:52" pos:end="175:72"><expr pos:start="175:52" pos:end="175:72"><call pos:start="175:52" pos:end="175:72"><name pos:start="175:52" pos:end="175:57">OBJECT</name><argument_list pos:start="175:58" pos:end="175:72">(<argument pos:start="175:59" pos:end="175:71"><expr pos:start="175:59" pos:end="175:71"><name pos:start="175:59" pos:end="175:71">system_memory</name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="177:30" pos:end="177:37"><expr pos:start="177:30" pos:end="177:37"><literal type="string" pos:start="177:30" pos:end="177:37">"memory"</literal></expr></argument>, <argument pos:start="177:40" pos:end="177:51"><expr pos:start="177:40" pos:end="177:51"><operator pos:start="177:40" pos:end="177:40">&amp;</operator><name pos:start="177:41" pos:end="177:51">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="181:43"><expr pos:start="179:5" pos:end="181:42"><call pos:start="179:5" pos:end="181:42"><name pos:start="179:5" pos:end="179:28">object_property_set_bool</name><argument_list pos:start="179:29" pos:end="181:42">(<argument pos:start="179:30" pos:end="179:49"><expr pos:start="179:30" pos:end="179:49"><call pos:start="179:30" pos:end="179:49"><name pos:start="179:30" pos:end="179:35">OBJECT</name><argument_list pos:start="179:36" pos:end="179:49">(<argument pos:start="179:37" pos:end="179:48"><expr pos:start="179:37" pos:end="179:48"><operator pos:start="179:37" pos:end="179:37">&amp;</operator><name pos:start="179:38" pos:end="179:48"><name pos:start="179:38" pos:end="179:40">mms</name><operator pos:start="179:41" pos:end="179:42">-&gt;</operator><name pos:start="179:43" pos:end="179:48">armv7m</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="179:52" pos:end="179:55"><expr pos:start="179:52" pos:end="179:55"><name pos:start="179:52" pos:end="179:55">true</name></expr></argument>, <argument pos:start="179:58" pos:end="179:67"><expr pos:start="179:58" pos:end="179:67"><literal type="string" pos:start="179:58" pos:end="179:67">"realized"</literal></expr></argument>,

                             <argument pos:start="181:30" pos:end="181:41"><expr pos:start="181:30" pos:end="181:41"><operator pos:start="181:30" pos:end="181:30">&amp;</operator><name pos:start="181:31" pos:end="181:41">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:75"><expr pos:start="185:5" pos:end="185:74"><call pos:start="185:5" pos:end="185:74"><name pos:start="185:5" pos:end="185:31">create_unimplemented_device</name><argument_list pos:start="185:32" pos:end="185:74">(<argument pos:start="185:33" pos:end="185:49"><expr pos:start="185:33" pos:end="185:49"><literal type="string" pos:start="185:33" pos:end="185:49">"zbtsmram mirror"</literal></expr></argument>, <argument pos:start="185:52" pos:end="185:61"><expr pos:start="185:52" pos:end="185:61"><literal type="number" pos:start="185:52" pos:end="185:61">0x00400000</literal></expr></argument>, <argument pos:start="185:64" pos:end="185:73"><expr pos:start="185:64" pos:end="185:73"><literal type="number" pos:start="185:64" pos:end="185:73">0x00400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:70"><expr pos:start="187:5" pos:end="187:69"><call pos:start="187:5" pos:end="187:69"><name pos:start="187:5" pos:end="187:31">create_unimplemented_device</name><argument_list pos:start="187:32" pos:end="187:69">(<argument pos:start="187:33" pos:end="187:44"><expr pos:start="187:33" pos:end="187:44"><literal type="string" pos:start="187:33" pos:end="187:44">"RESERVED 1"</literal></expr></argument>, <argument pos:start="187:47" pos:end="187:56"><expr pos:start="187:47" pos:end="187:56"><literal type="number" pos:start="187:47" pos:end="187:56">0x00800000</literal></expr></argument>, <argument pos:start="187:59" pos:end="187:68"><expr pos:start="187:59" pos:end="187:68"><literal type="number" pos:start="187:59" pos:end="187:68">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:69"><expr pos:start="189:5" pos:end="189:68"><call pos:start="189:5" pos:end="189:68"><name pos:start="189:5" pos:end="189:31">create_unimplemented_device</name><argument_list pos:start="189:32" pos:end="189:68">(<argument pos:start="189:33" pos:end="189:43"><expr pos:start="189:33" pos:end="189:43"><literal type="string" pos:start="189:33" pos:end="189:43">"Block RAM"</literal></expr></argument>, <argument pos:start="189:46" pos:end="189:55"><expr pos:start="189:46" pos:end="189:55"><literal type="number" pos:start="189:46" pos:end="189:55">0x01000000</literal></expr></argument>, <argument pos:start="189:58" pos:end="189:67"><expr pos:start="189:58" pos:end="189:67"><literal type="number" pos:start="189:58" pos:end="189:67">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:70"><expr pos:start="191:5" pos:end="191:69"><call pos:start="191:5" pos:end="191:69"><name pos:start="191:5" pos:end="191:31">create_unimplemented_device</name><argument_list pos:start="191:32" pos:end="191:69">(<argument pos:start="191:33" pos:end="191:44"><expr pos:start="191:33" pos:end="191:44"><literal type="string" pos:start="191:33" pos:end="191:44">"RESERVED 2"</literal></expr></argument>, <argument pos:start="191:47" pos:end="191:56"><expr pos:start="191:47" pos:end="191:56"><literal type="number" pos:start="191:47" pos:end="191:56">0x01010000</literal></expr></argument>, <argument pos:start="191:59" pos:end="191:68"><expr pos:start="191:59" pos:end="191:68"><literal type="number" pos:start="191:59" pos:end="191:68">0x1EFF0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:70"><expr pos:start="193:5" pos:end="193:69"><call pos:start="193:5" pos:end="193:69"><name pos:start="193:5" pos:end="193:31">create_unimplemented_device</name><argument_list pos:start="193:32" pos:end="193:69">(<argument pos:start="193:33" pos:end="193:44"><expr pos:start="193:33" pos:end="193:44"><literal type="string" pos:start="193:33" pos:end="193:44">"RESERVED 3"</literal></expr></argument>, <argument pos:start="193:47" pos:end="193:56"><expr pos:start="193:47" pos:end="193:56"><literal type="number" pos:start="193:47" pos:end="193:56">0x20800000</literal></expr></argument>, <argument pos:start="193:59" pos:end="193:68"><expr pos:start="193:59" pos:end="193:68"><literal type="number" pos:start="193:59" pos:end="193:68">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:65"><expr pos:start="195:5" pos:end="195:64"><call pos:start="195:5" pos:end="195:64"><name pos:start="195:5" pos:end="195:31">create_unimplemented_device</name><argument_list pos:start="195:32" pos:end="195:64">(<argument pos:start="195:33" pos:end="195:39"><expr pos:start="195:33" pos:end="195:39"><literal type="string" pos:start="195:33" pos:end="195:39">"PSRAM"</literal></expr></argument>, <argument pos:start="195:42" pos:end="195:51"><expr pos:start="195:42" pos:end="195:51"><literal type="number" pos:start="195:42" pos:end="195:51">0x21000000</literal></expr></argument>, <argument pos:start="195:54" pos:end="195:63"><expr pos:start="195:54" pos:end="195:63"><literal type="number" pos:start="195:54" pos:end="195:63">0x01000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="197:5" pos:end="203:7">/* These three ranges all cover multiple devices; we may implement

     * some of them below (in which case the real device takes precedence

     * over the unimplemented-region mapping).

     */</comment>

    <expr_stmt pos:start="205:5" pos:end="207:56"><expr pos:start="205:5" pos:end="207:55"><call pos:start="205:5" pos:end="207:55"><name pos:start="205:5" pos:end="205:31">create_unimplemented_device</name><argument_list pos:start="205:32" pos:end="207:55">(<argument pos:start="205:33" pos:end="205:73"><expr pos:start="205:33" pos:end="205:73"><literal type="string" pos:start="205:33" pos:end="205:73">"CMSDK APB peripheral region @0x40000000"</literal></expr></argument>,

                                <argument pos:start="207:33" pos:end="207:42"><expr pos:start="207:33" pos:end="207:42"><literal type="number" pos:start="207:33" pos:end="207:42">0x40000000</literal></expr></argument>, <argument pos:start="207:45" pos:end="207:54"><expr pos:start="207:45" pos:end="207:54"><literal type="number" pos:start="207:45" pos:end="207:54">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="211:56"><expr pos:start="209:5" pos:end="211:55"><call pos:start="209:5" pos:end="211:55"><name pos:start="209:5" pos:end="209:31">create_unimplemented_device</name><argument_list pos:start="209:32" pos:end="211:55">(<argument pos:start="209:33" pos:end="209:69"><expr pos:start="209:33" pos:end="209:69"><literal type="string" pos:start="209:33" pos:end="209:69">"CMSDK peripheral region @0x40010000"</literal></expr></argument>,

                                <argument pos:start="211:33" pos:end="211:42"><expr pos:start="211:33" pos:end="211:42"><literal type="number" pos:start="211:33" pos:end="211:42">0x40010000</literal></expr></argument>, <argument pos:start="211:45" pos:end="211:54"><expr pos:start="211:45" pos:end="211:54"><literal type="number" pos:start="211:45" pos:end="211:54">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="215:56"><expr pos:start="213:5" pos:end="215:55"><call pos:start="213:5" pos:end="215:55"><name pos:start="213:5" pos:end="213:31">create_unimplemented_device</name><argument_list pos:start="213:32" pos:end="215:55">(<argument pos:start="213:33" pos:end="213:69"><expr pos:start="213:33" pos:end="213:69"><literal type="string" pos:start="213:33" pos:end="213:69">"Extra peripheral region @0x40020000"</literal></expr></argument>,

                                <argument pos:start="215:33" pos:end="215:42"><expr pos:start="215:33" pos:end="215:42"><literal type="number" pos:start="215:33" pos:end="215:42">0x40020000</literal></expr></argument>, <argument pos:start="215:45" pos:end="215:54"><expr pos:start="215:45" pos:end="215:54"><literal type="number" pos:start="215:45" pos:end="215:54">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:70"><expr pos:start="217:5" pos:end="217:69"><call pos:start="217:5" pos:end="217:69"><name pos:start="217:5" pos:end="217:31">create_unimplemented_device</name><argument_list pos:start="217:32" pos:end="217:69">(<argument pos:start="217:33" pos:end="217:44"><expr pos:start="217:33" pos:end="217:44"><literal type="string" pos:start="217:33" pos:end="217:44">"RESERVED 4"</literal></expr></argument>, <argument pos:start="217:47" pos:end="217:56"><expr pos:start="217:47" pos:end="217:56"><literal type="number" pos:start="217:47" pos:end="217:56">0x40030000</literal></expr></argument>, <argument pos:start="217:59" pos:end="217:68"><expr pos:start="217:59" pos:end="217:68"><literal type="number" pos:start="217:59" pos:end="217:68">0x001D0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:62"><expr pos:start="219:5" pos:end="219:61"><call pos:start="219:5" pos:end="219:61"><name pos:start="219:5" pos:end="219:31">create_unimplemented_device</name><argument_list pos:start="219:32" pos:end="219:61">(<argument pos:start="219:33" pos:end="219:37"><expr pos:start="219:33" pos:end="219:37"><literal type="string" pos:start="219:33" pos:end="219:37">"VGA"</literal></expr></argument>, <argument pos:start="219:40" pos:end="219:49"><expr pos:start="219:40" pos:end="219:49"><literal type="number" pos:start="219:40" pos:end="219:49">0x41000000</literal></expr></argument>, <argument pos:start="219:52" pos:end="219:60"><expr pos:start="219:52" pos:end="219:60"><literal type="number" pos:start="219:52" pos:end="219:60">0x0200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="223:5" pos:end="389:5">switch <condition pos:start="223:12" pos:end="223:27">(<expr pos:start="223:13" pos:end="223:26"><name pos:start="223:13" pos:end="223:26"><name pos:start="223:13" pos:end="223:15">mmc</name><operator pos:start="223:16" pos:end="223:17">-&gt;</operator><name pos:start="223:18" pos:end="223:26">fpga_type</name></name></expr>)</condition> <block pos:start="223:29" pos:end="389:5">{<block_content pos:start="225:5" pos:end="387:31">

    <case pos:start="225:5" pos:end="225:20">case <expr pos:start="225:10" pos:end="225:19"><name pos:start="225:10" pos:end="225:19">FPGA_AN385</name></expr>:</case>

    <block pos:start="227:5" pos:end="299:5">{<block_content pos:start="235:9" pos:end="297:14">

        <comment type="block" pos:start="229:9" pos:end="233:11">/* The overflow IRQs for UARTs 0, 1 and 2 are ORed together.

         * Overflow for UARTs 4 and 5 doesn't trigger any interrupt.

         */</comment>

        <decl_stmt pos:start="235:9" pos:end="235:23"><decl pos:start="235:9" pos:end="235:22"><type pos:start="235:9" pos:end="235:16"><name pos:start="235:9" pos:end="235:14">Object</name> <modifier pos:start="235:16" pos:end="235:16">*</modifier></type><name pos:start="235:17" pos:end="235:22">orgate</name></decl>;</decl_stmt>

        <decl_stmt pos:start="237:9" pos:end="237:32"><decl pos:start="237:9" pos:end="237:31"><type pos:start="237:9" pos:end="237:21"><name pos:start="237:9" pos:end="237:19">DeviceState</name> <modifier pos:start="237:21" pos:end="237:21">*</modifier></type><name pos:start="237:22" pos:end="237:31">orgate_dev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="239:9" pos:end="239:14"><decl pos:start="239:9" pos:end="239:13"><type pos:start="239:9" pos:end="239:11"><name pos:start="239:9" pos:end="239:11">int</name></type> <name pos:start="239:13" pos:end="239:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="243:9" pos:end="243:41"><expr pos:start="243:9" pos:end="243:40"><name pos:start="243:9" pos:end="243:14">orgate</name> <operator pos:start="243:16" pos:end="243:16">=</operator> <call pos:start="243:18" pos:end="243:40"><name pos:start="243:18" pos:end="243:27">object_new</name><argument_list pos:start="243:28" pos:end="243:40">(<argument pos:start="243:29" pos:end="243:39"><expr pos:start="243:29" pos:end="243:39"><name pos:start="243:29" pos:end="243:39">TYPE_OR_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:70"><expr pos:start="245:9" pos:end="245:69"><call pos:start="245:9" pos:end="245:69"><name pos:start="245:9" pos:end="245:31">object_property_set_int</name><argument_list pos:start="245:32" pos:end="245:69">(<argument pos:start="245:33" pos:end="245:38"><expr pos:start="245:33" pos:end="245:38"><name pos:start="245:33" pos:end="245:38">orgate</name></expr></argument>, <argument pos:start="245:41" pos:end="245:41"><expr pos:start="245:41" pos:end="245:41"><literal type="number" pos:start="245:41" pos:end="245:41">6</literal></expr></argument>, <argument pos:start="245:44" pos:end="245:54"><expr pos:start="245:44" pos:end="245:54"><literal type="string" pos:start="245:44" pos:end="245:54">"num-lines"</literal></expr></argument>, <argument pos:start="245:57" pos:end="245:68"><expr pos:start="245:57" pos:end="245:68"><operator pos:start="245:57" pos:end="245:57">&amp;</operator><name pos:start="245:58" pos:end="245:68">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:73"><expr pos:start="247:9" pos:end="247:72"><call pos:start="247:9" pos:end="247:72"><name pos:start="247:9" pos:end="247:32">object_property_set_bool</name><argument_list pos:start="247:33" pos:end="247:72">(<argument pos:start="247:34" pos:end="247:39"><expr pos:start="247:34" pos:end="247:39"><name pos:start="247:34" pos:end="247:39">orgate</name></expr></argument>, <argument pos:start="247:42" pos:end="247:45"><expr pos:start="247:42" pos:end="247:45"><name pos:start="247:42" pos:end="247:45">true</name></expr></argument>, <argument pos:start="247:48" pos:end="247:57"><expr pos:start="247:48" pos:end="247:57"><literal type="string" pos:start="247:48" pos:end="247:57">"realized"</literal></expr></argument>, <argument pos:start="247:60" pos:end="247:71"><expr pos:start="247:60" pos:end="247:71"><operator pos:start="247:60" pos:end="247:60">&amp;</operator><name pos:start="247:61" pos:end="247:71">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:36"><expr pos:start="249:9" pos:end="249:35"><name pos:start="249:9" pos:end="249:18">orgate_dev</name> <operator pos:start="249:20" pos:end="249:20">=</operator> <call pos:start="249:22" pos:end="249:35"><name pos:start="249:22" pos:end="249:27">DEVICE</name><argument_list pos:start="249:28" pos:end="249:35">(<argument pos:start="249:29" pos:end="249:34"><expr pos:start="249:29" pos:end="249:34"><name pos:start="249:29" pos:end="249:34">orgate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:75"><expr pos:start="251:9" pos:end="251:74"><call pos:start="251:9" pos:end="251:74"><name pos:start="251:9" pos:end="251:29">qdev_connect_gpio_out</name><argument_list pos:start="251:30" pos:end="251:74">(<argument pos:start="251:31" pos:end="251:40"><expr pos:start="251:31" pos:end="251:40"><name pos:start="251:31" pos:end="251:40">orgate_dev</name></expr></argument>, <argument pos:start="251:43" pos:end="251:43"><expr pos:start="251:43" pos:end="251:43"><literal type="number" pos:start="251:43" pos:end="251:43">0</literal></expr></argument>, <argument pos:start="251:46" pos:end="251:73"><expr pos:start="251:46" pos:end="251:73"><call pos:start="251:46" pos:end="251:73"><name pos:start="251:46" pos:end="251:61">qdev_get_gpio_in</name><argument_list pos:start="251:62" pos:end="251:73">(<argument pos:start="251:63" pos:end="251:68"><expr pos:start="251:63" pos:end="251:68"><name pos:start="251:63" pos:end="251:68">armv7m</name></expr></argument>, <argument pos:start="251:71" pos:end="251:72"><expr pos:start="251:71" pos:end="251:72"><literal type="number" pos:start="251:71" pos:end="251:72">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="255:9" pos:end="295:9">for <control pos:start="255:13" pos:end="255:31">(<init pos:start="255:14" pos:end="255:19"><expr pos:start="255:14" pos:end="255:18"><name pos:start="255:14" pos:end="255:14">i</name> <operator pos:start="255:16" pos:end="255:16">=</operator> <literal type="number" pos:start="255:18" pos:end="255:18">0</literal></expr>;</init> <condition pos:start="255:21" pos:end="255:26"><expr pos:start="255:21" pos:end="255:25"><name pos:start="255:21" pos:end="255:21">i</name> <operator pos:start="255:23" pos:end="255:23">&lt;</operator> <literal type="number" pos:start="255:25" pos:end="255:25">5</literal></expr>;</condition> <incr pos:start="255:28" pos:end="255:30"><expr pos:start="255:28" pos:end="255:30"><name pos:start="255:28" pos:end="255:28">i</name><operator pos:start="255:29" pos:end="255:30">++</operator></expr></incr>)</control> <block pos:start="255:33" pos:end="295:9">{<block_content pos:start="257:13" pos:end="293:55">

            <decl_stmt pos:start="257:13" pos:end="261:58"><decl pos:start="257:13" pos:end="261:57"><type pos:start="257:13" pos:end="257:31"><specifier pos:start="257:13" pos:end="257:18">static</specifier> <specifier pos:start="257:20" pos:end="257:24">const</specifier> <name pos:start="257:26" pos:end="257:31">hwaddr</name></type> <name pos:start="257:33" pos:end="257:42"><name pos:start="257:33" pos:end="257:40">uartbase</name><index pos:start="257:41" pos:end="257:42">[]</index></name> <init pos:start="257:44" pos:end="261:57">= <expr pos:start="257:46" pos:end="261:57"><block pos:start="257:46" pos:end="261:57">{<expr pos:start="257:47" pos:end="257:56"><literal type="number" pos:start="257:47" pos:end="257:56">0x40004000</literal></expr>, <expr pos:start="257:59" pos:end="257:68"><literal type="number" pos:start="257:59" pos:end="257:68">0x40005000</literal></expr>,

                                              <expr pos:start="259:47" pos:end="259:56"><literal type="number" pos:start="259:47" pos:end="259:56">0x40006000</literal></expr>, <expr pos:start="259:59" pos:end="259:68"><literal type="number" pos:start="259:59" pos:end="259:68">0x40007000</literal></expr>,

                                              <expr pos:start="261:47" pos:end="261:56"><literal type="number" pos:start="261:47" pos:end="261:56">0x40009000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="263:13" pos:end="263:75"><decl pos:start="263:13" pos:end="263:74"><type pos:start="263:13" pos:end="263:21"><name pos:start="263:13" pos:end="263:19">Chardev</name> <modifier pos:start="263:21" pos:end="263:21">*</modifier></type><name pos:start="263:22" pos:end="263:28">uartchr</name> <init pos:start="263:30" pos:end="263:74">= <expr pos:start="263:32" pos:end="263:74"><ternary pos:start="263:32" pos:end="263:74"><condition pos:start="263:32" pos:end="263:53"><expr pos:start="263:32" pos:end="263:51"><name pos:start="263:32" pos:end="263:32">i</name> <operator pos:start="263:34" pos:end="263:34">&lt;</operator> <name pos:start="263:36" pos:end="263:51">MAX_SERIAL_PORTS</name></expr> ?</condition><then pos:start="263:55" pos:end="263:67"> <expr pos:start="263:55" pos:end="263:67"><name pos:start="263:55" pos:end="263:67"><name pos:start="263:55" pos:end="263:64">serial_hds</name><index pos:start="263:65" pos:end="263:67">[<expr pos:start="263:66" pos:end="263:66"><name pos:start="263:66" pos:end="263:66">i</name></expr>]</index></name></expr> </then><else pos:start="263:69" pos:end="263:74">: <expr pos:start="263:71" pos:end="263:74"><name pos:start="263:71" pos:end="263:74">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="265:13" pos:end="265:61">/* RX irq number; TX irq is always one greater */</comment>

            <decl_stmt pos:start="267:13" pos:end="267:59"><decl pos:start="267:13" pos:end="267:58"><type pos:start="267:13" pos:end="267:28"><specifier pos:start="267:13" pos:end="267:18">static</specifier> <specifier pos:start="267:20" pos:end="267:24">const</specifier> <name pos:start="267:26" pos:end="267:28">int</name></type> <name pos:start="267:30" pos:end="267:38"><name pos:start="267:30" pos:end="267:36">uartirq</name><index pos:start="267:37" pos:end="267:38">[]</index></name> <init pos:start="267:40" pos:end="267:58">= <expr pos:start="267:42" pos:end="267:58"><block pos:start="267:42" pos:end="267:58">{<expr pos:start="267:43" pos:end="267:43"><literal type="number" pos:start="267:43" pos:end="267:43">0</literal></expr>, <expr pos:start="267:46" pos:end="267:46"><literal type="number" pos:start="267:46" pos:end="267:46">2</literal></expr>, <expr pos:start="267:49" pos:end="267:49"><literal type="number" pos:start="267:49" pos:end="267:49">4</literal></expr>, <expr pos:start="267:52" pos:end="267:53"><literal type="number" pos:start="267:52" pos:end="267:53">18</literal></expr>, <expr pos:start="267:56" pos:end="267:57"><literal type="number" pos:start="267:56" pos:end="267:57">20</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="269:13" pos:end="269:54"><decl pos:start="269:13" pos:end="269:36"><type pos:start="269:13" pos:end="269:20"><name pos:start="269:13" pos:end="269:20">qemu_irq</name></type> <name pos:start="269:22" pos:end="269:29">txovrint</name> <init pos:start="269:31" pos:end="269:36">= <expr pos:start="269:33" pos:end="269:36"><name pos:start="269:33" pos:end="269:36">NULL</name></expr></init></decl>, <decl pos:start="269:39" pos:end="269:53"><type ref="prev" pos:start="269:13" pos:end="269:20"/><name pos:start="269:39" pos:end="269:46">rxovrint</name> <init pos:start="269:48" pos:end="269:53">= <expr pos:start="269:50" pos:end="269:53"><name pos:start="269:50" pos:end="269:53">NULL</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="273:13" pos:end="279:13"><if pos:start="273:13" pos:end="279:13">if <condition pos:start="273:16" pos:end="273:22">(<expr pos:start="273:17" pos:end="273:21"><name pos:start="273:17" pos:end="273:17">i</name> <operator pos:start="273:19" pos:end="273:19">&lt;</operator> <literal type="number" pos:start="273:21" pos:end="273:21">3</literal></expr>)</condition> <block pos:start="273:24" pos:end="279:13">{<block_content pos:start="275:17" pos:end="277:67">

                <expr_stmt pos:start="275:17" pos:end="275:63"><expr pos:start="275:17" pos:end="275:62"><name pos:start="275:17" pos:end="275:24">txovrint</name> <operator pos:start="275:26" pos:end="275:26">=</operator> <call pos:start="275:28" pos:end="275:62"><name pos:start="275:28" pos:end="275:43">qdev_get_gpio_in</name><argument_list pos:start="275:44" pos:end="275:62">(<argument pos:start="275:45" pos:end="275:54"><expr pos:start="275:45" pos:end="275:54"><name pos:start="275:45" pos:end="275:54">orgate_dev</name></expr></argument>, <argument pos:start="275:57" pos:end="275:61"><expr pos:start="275:57" pos:end="275:61"><name pos:start="275:57" pos:end="275:57">i</name> <operator pos:start="275:59" pos:end="275:59">*</operator> <literal type="number" pos:start="275:61" pos:end="275:61">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:67"><expr pos:start="277:17" pos:end="277:66"><name pos:start="277:17" pos:end="277:24">rxovrint</name> <operator pos:start="277:26" pos:end="277:26">=</operator> <call pos:start="277:28" pos:end="277:66"><name pos:start="277:28" pos:end="277:43">qdev_get_gpio_in</name><argument_list pos:start="277:44" pos:end="277:66">(<argument pos:start="277:45" pos:end="277:54"><expr pos:start="277:45" pos:end="277:54"><name pos:start="277:45" pos:end="277:54">orgate_dev</name></expr></argument>, <argument pos:start="277:57" pos:end="277:65"><expr pos:start="277:57" pos:end="277:65"><name pos:start="277:57" pos:end="277:57">i</name> <operator pos:start="277:59" pos:end="277:59">*</operator> <literal type="number" pos:start="277:61" pos:end="277:63">2</literal> <operator pos:start="277:63" pos:end="277:63">+</operator> <literal type="number" pos:start="277:65" pos:end="277:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="283:13" pos:end="293:55"><expr pos:start="283:13" pos:end="293:54"><call pos:start="283:13" pos:end="293:54"><name pos:start="283:13" pos:end="283:33">cmsdk_apb_uart_create</name><argument_list pos:start="283:34" pos:end="293:54">(<argument pos:start="283:35" pos:end="283:45"><expr pos:start="283:35" pos:end="283:45"><name pos:start="283:35" pos:end="283:45"><name pos:start="283:35" pos:end="283:42">uartbase</name><index pos:start="283:43" pos:end="283:45">[<expr pos:start="283:44" pos:end="283:44"><name pos:start="283:44" pos:end="283:44">i</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="285:35" pos:end="285:74"><expr pos:start="285:35" pos:end="285:74"><call pos:start="285:35" pos:end="285:74"><name pos:start="285:35" pos:end="285:50">qdev_get_gpio_in</name><argument_list pos:start="285:51" pos:end="285:74">(<argument pos:start="285:52" pos:end="285:57"><expr pos:start="285:52" pos:end="285:57"><name pos:start="285:52" pos:end="285:57">armv7m</name></expr></argument>, <argument pos:start="285:60" pos:end="285:73"><expr pos:start="285:60" pos:end="285:73"><name pos:start="285:60" pos:end="285:69"><name pos:start="285:60" pos:end="285:66">uartirq</name><index pos:start="285:67" pos:end="285:69">[<expr pos:start="285:68" pos:end="285:68"><name pos:start="285:68" pos:end="285:68">i</name></expr>]</index></name> <operator pos:start="285:71" pos:end="285:71">+</operator> <literal type="number" pos:start="285:73" pos:end="285:73">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="287:35" pos:end="287:70"><expr pos:start="287:35" pos:end="287:70"><call pos:start="287:35" pos:end="287:70"><name pos:start="287:35" pos:end="287:50">qdev_get_gpio_in</name><argument_list pos:start="287:51" pos:end="287:70">(<argument pos:start="287:52" pos:end="287:57"><expr pos:start="287:52" pos:end="287:57"><name pos:start="287:52" pos:end="287:57">armv7m</name></expr></argument>, <argument pos:start="287:60" pos:end="287:69"><expr pos:start="287:60" pos:end="287:69"><name pos:start="287:60" pos:end="287:69"><name pos:start="287:60" pos:end="287:66">uartirq</name><index pos:start="287:67" pos:end="287:69">[<expr pos:start="287:68" pos:end="287:68"><name pos:start="287:68" pos:end="287:68">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="289:35" pos:end="289:42"><expr pos:start="289:35" pos:end="289:42"><name pos:start="289:35" pos:end="289:42">txovrint</name></expr></argument>, <argument pos:start="289:45" pos:end="289:52"><expr pos:start="289:45" pos:end="289:52"><name pos:start="289:45" pos:end="289:52">rxovrint</name></expr></argument>,

                                  <argument pos:start="291:35" pos:end="291:38"><expr pos:start="291:35" pos:end="291:38"><name pos:start="291:35" pos:end="291:38">NULL</name></expr></argument>,

                                  <argument pos:start="293:35" pos:end="293:41"><expr pos:start="293:35" pos:end="293:41"><name pos:start="293:35" pos:end="293:41">uartchr</name></expr></argument>, <argument pos:start="293:44" pos:end="293:53"><expr pos:start="293:44" pos:end="293:53"><name pos:start="293:44" pos:end="293:53">SYSCLK_FRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="297:9" pos:end="297:14">break;</break>

    </block_content>}</block>

    <case pos:start="301:5" pos:end="301:20">case <expr pos:start="301:10" pos:end="301:19"><name pos:start="301:10" pos:end="301:19">FPGA_AN511</name></expr>:</case>

    <block pos:start="303:5" pos:end="383:5">{<block_content pos:start="311:9" pos:end="381:14">

        <comment type="block" pos:start="305:9" pos:end="309:11">/* The overflow IRQs for all UARTs are ORed together.

         * Tx and Rx IRQs for each UART are ORed together.

         */</comment>

        <decl_stmt pos:start="311:9" pos:end="311:23"><decl pos:start="311:9" pos:end="311:22"><type pos:start="311:9" pos:end="311:16"><name pos:start="311:9" pos:end="311:14">Object</name> <modifier pos:start="311:16" pos:end="311:16">*</modifier></type><name pos:start="311:17" pos:end="311:22">orgate</name></decl>;</decl_stmt>

        <decl_stmt pos:start="313:9" pos:end="313:32"><decl pos:start="313:9" pos:end="313:31"><type pos:start="313:9" pos:end="313:21"><name pos:start="313:9" pos:end="313:19">DeviceState</name> <modifier pos:start="313:21" pos:end="313:21">*</modifier></type><name pos:start="313:22" pos:end="313:31">orgate_dev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="315:9" pos:end="315:14"><decl pos:start="315:9" pos:end="315:13"><type pos:start="315:9" pos:end="315:11"><name pos:start="315:9" pos:end="315:11">int</name></type> <name pos:start="315:13" pos:end="315:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="319:9" pos:end="319:41"><expr pos:start="319:9" pos:end="319:40"><name pos:start="319:9" pos:end="319:14">orgate</name> <operator pos:start="319:16" pos:end="319:16">=</operator> <call pos:start="319:18" pos:end="319:40"><name pos:start="319:18" pos:end="319:27">object_new</name><argument_list pos:start="319:28" pos:end="319:40">(<argument pos:start="319:29" pos:end="319:39"><expr pos:start="319:29" pos:end="319:39"><name pos:start="319:29" pos:end="319:39">TYPE_OR_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:71"><expr pos:start="321:9" pos:end="321:70"><call pos:start="321:9" pos:end="321:70"><name pos:start="321:9" pos:end="321:31">object_property_set_int</name><argument_list pos:start="321:32" pos:end="321:70">(<argument pos:start="321:33" pos:end="321:38"><expr pos:start="321:33" pos:end="321:38"><name pos:start="321:33" pos:end="321:38">orgate</name></expr></argument>, <argument pos:start="321:41" pos:end="321:42"><expr pos:start="321:41" pos:end="321:42"><literal type="number" pos:start="321:41" pos:end="321:42">10</literal></expr></argument>, <argument pos:start="321:45" pos:end="321:55"><expr pos:start="321:45" pos:end="321:55"><literal type="string" pos:start="321:45" pos:end="321:55">"num-lines"</literal></expr></argument>, <argument pos:start="321:58" pos:end="321:69"><expr pos:start="321:58" pos:end="321:69"><operator pos:start="321:58" pos:end="321:58">&amp;</operator><name pos:start="321:59" pos:end="321:69">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:73"><expr pos:start="323:9" pos:end="323:72"><call pos:start="323:9" pos:end="323:72"><name pos:start="323:9" pos:end="323:32">object_property_set_bool</name><argument_list pos:start="323:33" pos:end="323:72">(<argument pos:start="323:34" pos:end="323:39"><expr pos:start="323:34" pos:end="323:39"><name pos:start="323:34" pos:end="323:39">orgate</name></expr></argument>, <argument pos:start="323:42" pos:end="323:45"><expr pos:start="323:42" pos:end="323:45"><name pos:start="323:42" pos:end="323:45">true</name></expr></argument>, <argument pos:start="323:48" pos:end="323:57"><expr pos:start="323:48" pos:end="323:57"><literal type="string" pos:start="323:48" pos:end="323:57">"realized"</literal></expr></argument>, <argument pos:start="323:60" pos:end="323:71"><expr pos:start="323:60" pos:end="323:71"><operator pos:start="323:60" pos:end="323:60">&amp;</operator><name pos:start="323:61" pos:end="323:71">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:36"><expr pos:start="325:9" pos:end="325:35"><name pos:start="325:9" pos:end="325:18">orgate_dev</name> <operator pos:start="325:20" pos:end="325:20">=</operator> <call pos:start="325:22" pos:end="325:35"><name pos:start="325:22" pos:end="325:27">DEVICE</name><argument_list pos:start="325:28" pos:end="325:35">(<argument pos:start="325:29" pos:end="325:34"><expr pos:start="325:29" pos:end="325:34"><name pos:start="325:29" pos:end="325:34">orgate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:75"><expr pos:start="327:9" pos:end="327:74"><call pos:start="327:9" pos:end="327:74"><name pos:start="327:9" pos:end="327:29">qdev_connect_gpio_out</name><argument_list pos:start="327:30" pos:end="327:74">(<argument pos:start="327:31" pos:end="327:40"><expr pos:start="327:31" pos:end="327:40"><name pos:start="327:31" pos:end="327:40">orgate_dev</name></expr></argument>, <argument pos:start="327:43" pos:end="327:43"><expr pos:start="327:43" pos:end="327:43"><literal type="number" pos:start="327:43" pos:end="327:43">0</literal></expr></argument>, <argument pos:start="327:46" pos:end="327:73"><expr pos:start="327:46" pos:end="327:73"><call pos:start="327:46" pos:end="327:73"><name pos:start="327:46" pos:end="327:61">qdev_get_gpio_in</name><argument_list pos:start="327:62" pos:end="327:73">(<argument pos:start="327:63" pos:end="327:68"><expr pos:start="327:63" pos:end="327:68"><name pos:start="327:63" pos:end="327:68">armv7m</name></expr></argument>, <argument pos:start="327:71" pos:end="327:72"><expr pos:start="327:71" pos:end="327:72"><literal type="number" pos:start="327:71" pos:end="327:72">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="331:9" pos:end="379:9">for <control pos:start="331:13" pos:end="331:31">(<init pos:start="331:14" pos:end="331:19"><expr pos:start="331:14" pos:end="331:18"><name pos:start="331:14" pos:end="331:14">i</name> <operator pos:start="331:16" pos:end="331:16">=</operator> <literal type="number" pos:start="331:18" pos:end="331:18">0</literal></expr>;</init> <condition pos:start="331:21" pos:end="331:26"><expr pos:start="331:21" pos:end="331:25"><name pos:start="331:21" pos:end="331:21">i</name> <operator pos:start="331:23" pos:end="331:23">&lt;</operator> <literal type="number" pos:start="331:25" pos:end="331:25">5</literal></expr>;</condition> <incr pos:start="331:28" pos:end="331:30"><expr pos:start="331:28" pos:end="331:30"><name pos:start="331:28" pos:end="331:28">i</name><operator pos:start="331:29" pos:end="331:30">++</operator></expr></incr>)</control> <block pos:start="331:33" pos:end="379:9">{<block_content pos:start="335:13" pos:end="377:55">

            <comment type="block" pos:start="333:13" pos:end="333:73">/* system irq numbers for the combined tx/rx for each UART */</comment>

            <decl_stmt pos:start="335:13" pos:end="335:68"><decl pos:start="335:13" pos:end="335:67"><type pos:start="335:13" pos:end="335:28"><specifier pos:start="335:13" pos:end="335:18">static</specifier> <specifier pos:start="335:20" pos:end="335:24">const</specifier> <name pos:start="335:26" pos:end="335:28">int</name></type> <name pos:start="335:30" pos:end="335:46"><name pos:start="335:30" pos:end="335:44">uart_txrx_irqno</name><index pos:start="335:45" pos:end="335:46">[]</index></name> <init pos:start="335:48" pos:end="335:67">= <expr pos:start="335:50" pos:end="335:67"><block pos:start="335:50" pos:end="335:67">{<expr pos:start="335:51" pos:end="335:51"><literal type="number" pos:start="335:51" pos:end="335:51">0</literal></expr>, <expr pos:start="335:54" pos:end="335:54"><literal type="number" pos:start="335:54" pos:end="335:54">2</literal></expr>, <expr pos:start="335:57" pos:end="335:58"><literal type="number" pos:start="335:57" pos:end="335:58">45</literal></expr>, <expr pos:start="335:61" pos:end="335:62"><literal type="number" pos:start="335:61" pos:end="335:62">46</literal></expr>, <expr pos:start="335:65" pos:end="335:66"><literal type="number" pos:start="335:65" pos:end="335:66">56</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="337:13" pos:end="341:58"><decl pos:start="337:13" pos:end="341:57"><type pos:start="337:13" pos:end="337:31"><specifier pos:start="337:13" pos:end="337:18">static</specifier> <specifier pos:start="337:20" pos:end="337:24">const</specifier> <name pos:start="337:26" pos:end="337:31">hwaddr</name></type> <name pos:start="337:33" pos:end="337:42"><name pos:start="337:33" pos:end="337:40">uartbase</name><index pos:start="337:41" pos:end="337:42">[]</index></name> <init pos:start="337:44" pos:end="341:57">= <expr pos:start="337:46" pos:end="341:57"><block pos:start="337:46" pos:end="341:57">{<expr pos:start="337:47" pos:end="337:56"><literal type="number" pos:start="337:47" pos:end="337:56">0x40004000</literal></expr>, <expr pos:start="337:59" pos:end="337:68"><literal type="number" pos:start="337:59" pos:end="337:68">0x40005000</literal></expr>,

                                              <expr pos:start="339:47" pos:end="339:56"><literal type="number" pos:start="339:47" pos:end="339:56">0x4002c000</literal></expr>, <expr pos:start="339:59" pos:end="339:68"><literal type="number" pos:start="339:59" pos:end="339:68">0x4002d000</literal></expr>,

                                              <expr pos:start="341:47" pos:end="341:56"><literal type="number" pos:start="341:47" pos:end="341:56">0x4002e000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="343:13" pos:end="343:75"><decl pos:start="343:13" pos:end="343:74"><type pos:start="343:13" pos:end="343:21"><name pos:start="343:13" pos:end="343:19">Chardev</name> <modifier pos:start="343:21" pos:end="343:21">*</modifier></type><name pos:start="343:22" pos:end="343:28">uartchr</name> <init pos:start="343:30" pos:end="343:74">= <expr pos:start="343:32" pos:end="343:74"><ternary pos:start="343:32" pos:end="343:74"><condition pos:start="343:32" pos:end="343:53"><expr pos:start="343:32" pos:end="343:51"><name pos:start="343:32" pos:end="343:32">i</name> <operator pos:start="343:34" pos:end="343:34">&lt;</operator> <name pos:start="343:36" pos:end="343:51">MAX_SERIAL_PORTS</name></expr> ?</condition><then pos:start="343:55" pos:end="343:67"> <expr pos:start="343:55" pos:end="343:67"><name pos:start="343:55" pos:end="343:67"><name pos:start="343:55" pos:end="343:64">serial_hds</name><index pos:start="343:65" pos:end="343:67">[<expr pos:start="343:66" pos:end="343:66"><name pos:start="343:66" pos:end="343:66">i</name></expr>]</index></name></expr> </then><else pos:start="343:69" pos:end="343:74">: <expr pos:start="343:71" pos:end="343:74"><name pos:start="343:71" pos:end="343:74">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="345:13" pos:end="345:32"><decl pos:start="345:13" pos:end="345:31"><type pos:start="345:13" pos:end="345:20"><name pos:start="345:13" pos:end="345:18">Object</name> <modifier pos:start="345:20" pos:end="345:20">*</modifier></type><name pos:start="345:21" pos:end="345:31">txrx_orgate</name></decl>;</decl_stmt>

            <decl_stmt pos:start="347:13" pos:end="347:41"><decl pos:start="347:13" pos:end="347:40"><type pos:start="347:13" pos:end="347:25"><name pos:start="347:13" pos:end="347:23">DeviceState</name> <modifier pos:start="347:25" pos:end="347:25">*</modifier></type><name pos:start="347:26" pos:end="347:40">txrx_orgate_dev</name></decl>;</decl_stmt>



            <expr_stmt pos:start="351:13" pos:end="351:50"><expr pos:start="351:13" pos:end="351:49"><name pos:start="351:13" pos:end="351:23">txrx_orgate</name> <operator pos:start="351:25" pos:end="351:25">=</operator> <call pos:start="351:27" pos:end="351:49"><name pos:start="351:27" pos:end="351:36">object_new</name><argument_list pos:start="351:37" pos:end="351:49">(<argument pos:start="351:38" pos:end="351:48"><expr pos:start="351:38" pos:end="351:48"><name pos:start="351:38" pos:end="351:48">TYPE_OR_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:79"><expr pos:start="353:13" pos:end="353:78"><call pos:start="353:13" pos:end="353:78"><name pos:start="353:13" pos:end="353:35">object_property_set_int</name><argument_list pos:start="353:36" pos:end="353:78">(<argument pos:start="353:37" pos:end="353:47"><expr pos:start="353:37" pos:end="353:47"><name pos:start="353:37" pos:end="353:47">txrx_orgate</name></expr></argument>, <argument pos:start="353:50" pos:end="353:50"><expr pos:start="353:50" pos:end="353:50"><literal type="number" pos:start="353:50" pos:end="353:50">2</literal></expr></argument>, <argument pos:start="353:53" pos:end="353:63"><expr pos:start="353:53" pos:end="353:63"><literal type="string" pos:start="353:53" pos:end="353:63">"num-lines"</literal></expr></argument>, <argument pos:start="353:66" pos:end="353:77"><expr pos:start="353:66" pos:end="353:77"><operator pos:start="353:66" pos:end="353:66">&amp;</operator><name pos:start="353:67" pos:end="353:77">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="357:51"><expr pos:start="355:13" pos:end="357:50"><call pos:start="355:13" pos:end="357:50"><name pos:start="355:13" pos:end="355:36">object_property_set_bool</name><argument_list pos:start="355:37" pos:end="357:50">(<argument pos:start="355:38" pos:end="355:48"><expr pos:start="355:38" pos:end="355:48"><name pos:start="355:38" pos:end="355:48">txrx_orgate</name></expr></argument>, <argument pos:start="355:51" pos:end="355:54"><expr pos:start="355:51" pos:end="355:54"><name pos:start="355:51" pos:end="355:54">true</name></expr></argument>, <argument pos:start="355:57" pos:end="355:66"><expr pos:start="355:57" pos:end="355:66"><literal type="string" pos:start="355:57" pos:end="355:66">"realized"</literal></expr></argument>,

                                     <argument pos:start="357:38" pos:end="357:49"><expr pos:start="357:38" pos:end="357:49"><operator pos:start="357:38" pos:end="357:38">&amp;</operator><name pos:start="357:39" pos:end="357:49">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:50"><expr pos:start="359:13" pos:end="359:49"><name pos:start="359:13" pos:end="359:27">txrx_orgate_dev</name> <operator pos:start="359:29" pos:end="359:29">=</operator> <call pos:start="359:31" pos:end="359:49"><name pos:start="359:31" pos:end="359:36">DEVICE</name><argument_list pos:start="359:37" pos:end="359:49">(<argument pos:start="359:38" pos:end="359:48"><expr pos:start="359:38" pos:end="359:48"><name pos:start="359:38" pos:end="359:48">txrx_orgate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="361:13" pos:end="363:80"><expr pos:start="361:13" pos:end="363:79"><call pos:start="361:13" pos:end="363:79"><name pos:start="361:13" pos:end="361:33">qdev_connect_gpio_out</name><argument_list pos:start="361:34" pos:end="363:79">(<argument pos:start="361:35" pos:end="361:49"><expr pos:start="361:35" pos:end="361:49"><name pos:start="361:35" pos:end="361:49">txrx_orgate_dev</name></expr></argument>, <argument pos:start="361:52" pos:end="361:52"><expr pos:start="361:52" pos:end="361:52"><literal type="number" pos:start="361:52" pos:end="361:52">0</literal></expr></argument>,

                                  <argument pos:start="363:35" pos:end="363:78"><expr pos:start="363:35" pos:end="363:78"><call pos:start="363:35" pos:end="363:78"><name pos:start="363:35" pos:end="363:50">qdev_get_gpio_in</name><argument_list pos:start="363:51" pos:end="363:78">(<argument pos:start="363:52" pos:end="363:57"><expr pos:start="363:52" pos:end="363:57"><name pos:start="363:52" pos:end="363:57">armv7m</name></expr></argument>, <argument pos:start="363:60" pos:end="363:77"><expr pos:start="363:60" pos:end="363:77"><name pos:start="363:60" pos:end="363:77"><name pos:start="363:60" pos:end="363:74">uart_txrx_irqno</name><index pos:start="363:75" pos:end="363:77">[<expr pos:start="363:76" pos:end="363:76"><name pos:start="363:76" pos:end="363:76">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="365:13" pos:end="377:55"><expr pos:start="365:13" pos:end="377:54"><call pos:start="365:13" pos:end="377:54"><name pos:start="365:13" pos:end="365:33">cmsdk_apb_uart_create</name><argument_list pos:start="365:34" pos:end="377:54">(<argument pos:start="365:35" pos:end="365:45"><expr pos:start="365:35" pos:end="365:45"><name pos:start="365:35" pos:end="365:45"><name pos:start="365:35" pos:end="365:42">uartbase</name><index pos:start="365:43" pos:end="365:45">[<expr pos:start="365:44" pos:end="365:44"><name pos:start="365:44" pos:end="365:44">i</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="367:35" pos:end="367:70"><expr pos:start="367:35" pos:end="367:70"><call pos:start="367:35" pos:end="367:70"><name pos:start="367:35" pos:end="367:50">qdev_get_gpio_in</name><argument_list pos:start="367:51" pos:end="367:70">(<argument pos:start="367:52" pos:end="367:66"><expr pos:start="367:52" pos:end="367:66"><name pos:start="367:52" pos:end="367:66">txrx_orgate_dev</name></expr></argument>, <argument pos:start="367:69" pos:end="367:69"><expr pos:start="367:69" pos:end="367:69"><literal type="number" pos:start="367:69" pos:end="367:69">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="369:35" pos:end="369:70"><expr pos:start="369:35" pos:end="369:70"><call pos:start="369:35" pos:end="369:70"><name pos:start="369:35" pos:end="369:50">qdev_get_gpio_in</name><argument_list pos:start="369:51" pos:end="369:70">(<argument pos:start="369:52" pos:end="369:66"><expr pos:start="369:52" pos:end="369:66"><name pos:start="369:52" pos:end="369:66">txrx_orgate_dev</name></expr></argument>, <argument pos:start="369:69" pos:end="369:69"><expr pos:start="369:69" pos:end="369:69"><literal type="number" pos:start="369:69" pos:end="369:69">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="371:35" pos:end="371:65"><expr pos:start="371:35" pos:end="371:65"><call pos:start="371:35" pos:end="371:65"><name pos:start="371:35" pos:end="371:50">qdev_get_gpio_in</name><argument_list pos:start="371:51" pos:end="371:65">(<argument pos:start="371:52" pos:end="371:61"><expr pos:start="371:52" pos:end="371:61"><name pos:start="371:52" pos:end="371:61">orgate_dev</name></expr></argument>, <argument pos:start="371:64" pos:end="371:64"><expr pos:start="371:64" pos:end="371:64"><literal type="number" pos:start="371:64" pos:end="371:64">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="373:35" pos:end="373:65"><expr pos:start="373:35" pos:end="373:65"><call pos:start="373:35" pos:end="373:65"><name pos:start="373:35" pos:end="373:50">qdev_get_gpio_in</name><argument_list pos:start="373:51" pos:end="373:65">(<argument pos:start="373:52" pos:end="373:61"><expr pos:start="373:52" pos:end="373:61"><name pos:start="373:52" pos:end="373:61">orgate_dev</name></expr></argument>, <argument pos:start="373:64" pos:end="373:64"><expr pos:start="373:64" pos:end="373:64"><literal type="number" pos:start="373:64" pos:end="373:64">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="375:35" pos:end="375:38"><expr pos:start="375:35" pos:end="375:38"><name pos:start="375:35" pos:end="375:38">NULL</name></expr></argument>,

                                  <argument pos:start="377:35" pos:end="377:41"><expr pos:start="377:35" pos:end="377:41"><name pos:start="377:35" pos:end="377:41">uartchr</name></expr></argument>, <argument pos:start="377:44" pos:end="377:53"><expr pos:start="377:44" pos:end="377:53"><name pos:start="377:44" pos:end="377:53">SYSCLK_FRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="381:9" pos:end="381:14">break;</break>

    </block_content>}</block>

    <default pos:start="385:5" pos:end="385:12">default:</default>

        <expr_stmt pos:start="387:9" pos:end="387:31"><expr pos:start="387:9" pos:end="387:30"><call pos:start="387:9" pos:end="387:30"><name pos:start="387:9" pos:end="387:28">g_assert_not_reached</name><argument_list pos:start="387:29" pos:end="387:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="393:5" pos:end="393:80"><expr pos:start="393:5" pos:end="393:79"><call pos:start="393:5" pos:end="393:79"><name pos:start="393:5" pos:end="393:26">cmsdk_apb_timer_create</name><argument_list pos:start="393:27" pos:end="393:79">(<argument pos:start="393:28" pos:end="393:37"><expr pos:start="393:28" pos:end="393:37"><literal type="number" pos:start="393:28" pos:end="393:37">0x40000000</literal></expr></argument>, <argument pos:start="393:40" pos:end="393:66"><expr pos:start="393:40" pos:end="393:66"><call pos:start="393:40" pos:end="393:66"><name pos:start="393:40" pos:end="393:55">qdev_get_gpio_in</name><argument_list pos:start="393:56" pos:end="393:66">(<argument pos:start="393:57" pos:end="393:62"><expr pos:start="393:57" pos:end="393:62"><name pos:start="393:57" pos:end="393:62">armv7m</name></expr></argument>, <argument pos:start="393:65" pos:end="393:65"><expr pos:start="393:65" pos:end="393:65"><literal type="number" pos:start="393:65" pos:end="393:65">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="393:69" pos:end="393:78"><expr pos:start="393:69" pos:end="393:78"><name pos:start="393:69" pos:end="393:78">SYSCLK_FRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:80"><expr pos:start="395:5" pos:end="395:79"><call pos:start="395:5" pos:end="395:79"><name pos:start="395:5" pos:end="395:26">cmsdk_apb_timer_create</name><argument_list pos:start="395:27" pos:end="395:79">(<argument pos:start="395:28" pos:end="395:37"><expr pos:start="395:28" pos:end="395:37"><literal type="number" pos:start="395:28" pos:end="395:37">0x40001000</literal></expr></argument>, <argument pos:start="395:40" pos:end="395:66"><expr pos:start="395:40" pos:end="395:66"><call pos:start="395:40" pos:end="395:66"><name pos:start="395:40" pos:end="395:55">qdev_get_gpio_in</name><argument_list pos:start="395:56" pos:end="395:66">(<argument pos:start="395:57" pos:end="395:62"><expr pos:start="395:57" pos:end="395:62"><name pos:start="395:57" pos:end="395:62">armv7m</name></expr></argument>, <argument pos:start="395:65" pos:end="395:65"><expr pos:start="395:65" pos:end="395:65"><literal type="number" pos:start="395:65" pos:end="395:65">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="395:69" pos:end="395:78"><expr pos:start="395:69" pos:end="395:78"><name pos:start="395:69" pos:end="395:78">SYSCLK_FRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="399:5" pos:end="399:66"><expr pos:start="399:5" pos:end="399:65"><call pos:start="399:5" pos:end="399:65"><name pos:start="399:5" pos:end="399:21">object_initialize</name><argument_list pos:start="399:22" pos:end="399:65">(<argument pos:start="399:23" pos:end="399:31"><expr pos:start="399:23" pos:end="399:31"><operator pos:start="399:23" pos:end="399:23">&amp;</operator><name pos:start="399:24" pos:end="399:31"><name pos:start="399:24" pos:end="399:26">mms</name><operator pos:start="399:27" pos:end="399:28">-&gt;</operator><name pos:start="399:29" pos:end="399:31">scc</name></name></expr></argument>, <argument pos:start="399:34" pos:end="399:49"><expr pos:start="399:34" pos:end="399:49"><sizeof pos:start="399:34" pos:end="399:49">sizeof<argument_list pos:start="399:40" pos:end="399:49">(<argument pos:start="399:41" pos:end="399:48"><expr pos:start="399:41" pos:end="399:48"><name pos:start="399:41" pos:end="399:48"><name pos:start="399:41" pos:end="399:43">mms</name><operator pos:start="399:44" pos:end="399:45">-&gt;</operator><name pos:start="399:46" pos:end="399:48">scc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="399:52" pos:end="399:64"><expr pos:start="399:52" pos:end="399:64"><name pos:start="399:52" pos:end="399:64">TYPE_MPS2_SCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:31"><expr pos:start="401:5" pos:end="401:30"><name pos:start="401:5" pos:end="401:10">sccdev</name> <operator pos:start="401:12" pos:end="401:12">=</operator> <call pos:start="401:14" pos:end="401:30"><name pos:start="401:14" pos:end="401:19">DEVICE</name><argument_list pos:start="401:20" pos:end="401:30">(<argument pos:start="401:21" pos:end="401:29"><expr pos:start="401:21" pos:end="401:29"><operator pos:start="401:21" pos:end="401:21">&amp;</operator><name pos:start="401:22" pos:end="401:29"><name pos:start="401:22" pos:end="401:24">mms</name><operator pos:start="401:25" pos:end="401:26">-&gt;</operator><name pos:start="401:27" pos:end="401:29">scc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:54"><expr pos:start="403:5" pos:end="403:53"><call pos:start="403:5" pos:end="403:53"><name pos:start="403:5" pos:end="403:23">qdev_set_parent_bus</name><argument_list pos:start="403:24" pos:end="403:53">(<argument pos:start="403:25" pos:end="403:30"><expr pos:start="403:25" pos:end="403:30"><name pos:start="403:25" pos:end="403:30">sccdev</name></expr></argument>, <argument pos:start="403:33" pos:end="403:52"><expr pos:start="403:33" pos:end="403:52"><call pos:start="403:33" pos:end="403:52"><name pos:start="403:33" pos:end="403:50">sysbus_get_default</name><argument_list pos:start="403:51" pos:end="403:52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="405:50"><expr pos:start="405:5" pos:end="405:49"><call pos:start="405:5" pos:end="405:49"><name pos:start="405:5" pos:end="405:24">qdev_prop_set_uint32</name><argument_list pos:start="405:25" pos:end="405:49">(<argument pos:start="405:26" pos:end="405:31"><expr pos:start="405:26" pos:end="405:31"><name pos:start="405:26" pos:end="405:31">sccdev</name></expr></argument>, <argument pos:start="405:34" pos:end="405:43"><expr pos:start="405:34" pos:end="405:43"><literal type="string" pos:start="405:34" pos:end="405:43">"scc-cfg4"</literal></expr></argument>, <argument pos:start="405:46" pos:end="405:48"><expr pos:start="405:46" pos:end="405:48"><literal type="number" pos:start="405:46" pos:end="405:48">0x2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="407:5" pos:end="407:56"><expr pos:start="407:5" pos:end="407:55"><call pos:start="407:5" pos:end="407:55"><name pos:start="407:5" pos:end="407:24">qdev_prop_set_uint32</name><argument_list pos:start="407:25" pos:end="407:55">(<argument pos:start="407:26" pos:end="407:31"><expr pos:start="407:26" pos:end="407:31"><name pos:start="407:26" pos:end="407:31">sccdev</name></expr></argument>, <argument pos:start="407:34" pos:end="407:42"><expr pos:start="407:34" pos:end="407:42"><literal type="string" pos:start="407:34" pos:end="407:42">"scc-aid"</literal></expr></argument>, <argument pos:start="407:45" pos:end="407:54"><expr pos:start="407:45" pos:end="407:54"><literal type="number" pos:start="407:45" pos:end="407:54">0x02000008</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="409:5" pos:end="409:56"><expr pos:start="409:5" pos:end="409:55"><call pos:start="409:5" pos:end="409:55"><name pos:start="409:5" pos:end="409:24">qdev_prop_set_uint32</name><argument_list pos:start="409:25" pos:end="409:55">(<argument pos:start="409:26" pos:end="409:31"><expr pos:start="409:26" pos:end="409:31"><name pos:start="409:26" pos:end="409:31">sccdev</name></expr></argument>, <argument pos:start="409:34" pos:end="409:41"><expr pos:start="409:34" pos:end="409:41"><literal type="string" pos:start="409:34" pos:end="409:41">"scc-id"</literal></expr></argument>, <argument pos:start="409:44" pos:end="409:54"><expr pos:start="409:44" pos:end="409:54"><name pos:start="409:44" pos:end="409:54"><name pos:start="409:44" pos:end="409:46">mmc</name><operator pos:start="409:47" pos:end="409:48">-&gt;</operator><name pos:start="409:49" pos:end="409:54">scc_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="411:5" pos:end="413:43"><expr pos:start="411:5" pos:end="413:42"><call pos:start="411:5" pos:end="413:42"><name pos:start="411:5" pos:end="411:28">object_property_set_bool</name><argument_list pos:start="411:29" pos:end="413:42">(<argument pos:start="411:30" pos:end="411:46"><expr pos:start="411:30" pos:end="411:46"><call pos:start="411:30" pos:end="411:46"><name pos:start="411:30" pos:end="411:35">OBJECT</name><argument_list pos:start="411:36" pos:end="411:46">(<argument pos:start="411:37" pos:end="411:45"><expr pos:start="411:37" pos:end="411:45"><operator pos:start="411:37" pos:end="411:37">&amp;</operator><name pos:start="411:38" pos:end="411:45"><name pos:start="411:38" pos:end="411:40">mms</name><operator pos:start="411:41" pos:end="411:42">-&gt;</operator><name pos:start="411:43" pos:end="411:45">scc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="411:49" pos:end="411:52"><expr pos:start="411:49" pos:end="411:52"><name pos:start="411:49" pos:end="411:52">true</name></expr></argument>, <argument pos:start="411:55" pos:end="411:64"><expr pos:start="411:55" pos:end="411:64"><literal type="string" pos:start="411:55" pos:end="411:64">"realized"</literal></expr></argument>,

                             <argument pos:start="413:30" pos:end="413:41"><expr pos:start="413:30" pos:end="413:41"><operator pos:start="413:30" pos:end="413:30">&amp;</operator><name pos:start="413:31" pos:end="413:41">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="415:5" pos:end="415:59"><expr pos:start="415:5" pos:end="415:58"><call pos:start="415:5" pos:end="415:58"><name pos:start="415:5" pos:end="415:19">sysbus_mmio_map</name><argument_list pos:start="415:20" pos:end="415:58">(<argument pos:start="415:21" pos:end="415:42"><expr pos:start="415:21" pos:end="415:42"><call pos:start="415:21" pos:end="415:42"><name pos:start="415:21" pos:end="415:34">SYS_BUS_DEVICE</name><argument_list pos:start="415:35" pos:end="415:42">(<argument pos:start="415:36" pos:end="415:41"><expr pos:start="415:36" pos:end="415:41"><name pos:start="415:36" pos:end="415:41">sccdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="415:45" pos:end="415:45"><expr pos:start="415:45" pos:end="415:45"><literal type="number" pos:start="415:45" pos:end="415:45">0</literal></expr></argument>, <argument pos:start="415:48" pos:end="415:57"><expr pos:start="415:48" pos:end="415:57"><literal type="number" pos:start="415:48" pos:end="415:57">0x4002f000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="419:5" pos:end="423:7">/* In hardware this is a LAN9220; the LAN9118 is software compatible

     * except that it doesn't support the checksum-offload feature.

     */</comment>

    <expr_stmt pos:start="425:5" pos:end="429:75"><expr pos:start="425:5" pos:end="429:74"><call pos:start="425:5" pos:end="429:74"><name pos:start="425:5" pos:end="425:16">lan9118_init</name><argument_list pos:start="425:17" pos:end="429:74">(<argument pos:start="425:18" pos:end="425:29"><expr pos:start="425:18" pos:end="425:29"><operator pos:start="425:18" pos:end="425:18">&amp;</operator><name pos:start="425:19" pos:end="425:29"><name pos:start="425:19" pos:end="425:26">nd_table</name><index pos:start="425:27" pos:end="425:29">[<expr pos:start="425:28" pos:end="425:28"><literal type="number" pos:start="425:28" pos:end="425:28">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="425:32" pos:end="425:41"><expr pos:start="425:32" pos:end="425:41"><literal type="number" pos:start="425:32" pos:end="425:41">0x40200000</literal></expr></argument>,

                 <argument pos:start="427:18" pos:end="429:73"><expr pos:start="427:18" pos:end="429:73"><call pos:start="427:18" pos:end="429:73"><name pos:start="427:18" pos:end="427:33">qdev_get_gpio_in</name><argument_list pos:start="427:34" pos:end="429:73">(<argument pos:start="427:35" pos:end="427:40"><expr pos:start="427:35" pos:end="427:40"><name pos:start="427:35" pos:end="427:40">armv7m</name></expr></argument>,

                                  <argument pos:start="429:35" pos:end="429:72"><expr pos:start="429:35" pos:end="429:72"><ternary pos:start="429:35" pos:end="429:72"><condition pos:start="429:35" pos:end="429:64"><expr pos:start="429:35" pos:end="429:62"><name pos:start="429:35" pos:end="429:48"><name pos:start="429:35" pos:end="429:37">mmc</name><operator pos:start="429:38" pos:end="429:39">-&gt;</operator><name pos:start="429:40" pos:end="429:48">fpga_type</name></name> <operator pos:start="429:50" pos:end="429:51">==</operator> <name pos:start="429:53" pos:end="429:62">FPGA_AN385</name></expr> ?</condition><then pos:start="429:66" pos:end="429:67"> <expr pos:start="429:66" pos:end="429:67"><literal type="number" pos:start="429:66" pos:end="429:67">13</literal></expr> </then><else pos:start="429:69" pos:end="429:72">: <expr pos:start="429:71" pos:end="429:72"><literal type="number" pos:start="429:71" pos:end="429:72">47</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="433:5" pos:end="433:61"><expr pos:start="433:5" pos:end="433:60"><name pos:start="433:5" pos:end="433:22">system_clock_scale</name> <operator pos:start="433:24" pos:end="433:24">=</operator> <name pos:start="433:26" pos:end="433:47">NANOSECONDS_PER_SECOND</name> <operator pos:start="433:49" pos:end="433:49">/</operator> <name pos:start="433:51" pos:end="433:60">SYSCLK_FRQ</name></expr>;</expr_stmt>



    <expr_stmt pos:start="437:5" pos:end="439:33"><expr pos:start="437:5" pos:end="439:32"><call pos:start="437:5" pos:end="439:32"><name pos:start="437:5" pos:end="437:22">armv7m_load_kernel</name><argument_list pos:start="437:23" pos:end="439:32">(<argument pos:start="437:24" pos:end="437:41"><expr pos:start="437:24" pos:end="437:41"><call pos:start="437:24" pos:end="437:41"><name pos:start="437:24" pos:end="437:30">ARM_CPU</name><argument_list pos:start="437:31" pos:end="437:41">(<argument pos:start="437:32" pos:end="437:40"><expr pos:start="437:32" pos:end="437:40"><name pos:start="437:32" pos:end="437:40">first_cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="437:44" pos:end="437:67"><expr pos:start="437:44" pos:end="437:67"><name pos:start="437:44" pos:end="437:67"><name pos:start="437:44" pos:end="437:50">machine</name><operator pos:start="437:51" pos:end="437:52">-&gt;</operator><name pos:start="437:53" pos:end="437:67">kernel_filename</name></name></expr></argument>,

                       <argument pos:start="439:24" pos:end="439:31"><expr pos:start="439:24" pos:end="439:31"><literal type="number" pos:start="439:24" pos:end="439:31">0x400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
