<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4179.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:19">qemu_ram_mmap</name><parameter_list pos:start="1:20" pos:end="1:67">(<parameter pos:start="1:21" pos:end="1:26"><decl pos:start="1:21" pos:end="1:26"><type pos:start="1:21" pos:end="1:26"><name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:26">fd</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:39"><name pos:start="1:29" pos:end="1:34">size_t</name></type> <name pos:start="1:36" pos:end="1:39">size</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:47">size_t</name></type> <name pos:start="1:49" pos:end="1:53">align</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:66"><decl pos:start="1:56" pos:end="1:66"><type pos:start="1:56" pos:end="1:66"><name pos:start="1:56" pos:end="1:59">bool</name></type> <name pos:start="1:61" pos:end="1:66">shared</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="13:5" pos:end="117:15">

    <comment type="block" pos:start="5:5" pos:end="11:7">/*

     * Note: this always allocates at least one extra page of virtual address

     * space, even if size is already aligned.

     */</comment>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:16">total</name> <init pos:start="13:18" pos:end="13:31">= <expr pos:start="13:20" pos:end="13:31"><name pos:start="13:20" pos:end="13:23">size</name> <operator pos:start="13:25" pos:end="13:25">+</operator> <name pos:start="13:27" pos:end="13:31">align</name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="15:1" pos:end="15:48">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:48"><call pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:26">(<argument pos:start="15:13" pos:end="15:25"><expr pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:25">__powerpc64__</name></expr></argument>)</argument_list></call> <operator pos:start="15:28" pos:end="15:29">&amp;&amp;</operator> <call pos:start="15:31" pos:end="15:48"><name pos:start="15:31" pos:end="15:37">defined</name><argument_list pos:start="15:38" pos:end="15:48">(<argument pos:start="15:39" pos:end="15:47"><expr pos:start="15:39" pos:end="15:47"><name pos:start="15:39" pos:end="15:47">__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="17:5" pos:end="29:7">/* On ppc64 mappings in the same segment (aka slice) must share the same

     * page size. Since we will be re-allocating part of this segment

     * from the supplied fd, we should make sure to use the same page size,

     * unless we are using the system page size, in which case anonymous memory

     * is OK. Use align as a hint for the page size.

     * In this case, set MAP_NORESERVE to avoid allocating backing store memory.

     */</comment>

    <decl_stmt pos:start="31:5" pos:end="31:80"><decl pos:start="31:5" pos:end="31:79"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:14">anonfd</name> <init pos:start="31:16" pos:end="31:79">= <expr pos:start="31:18" pos:end="31:79"><ternary pos:start="31:18" pos:end="31:79"><condition pos:start="31:18" pos:end="31:71"><expr pos:start="31:18" pos:end="31:69"><name pos:start="31:18" pos:end="31:19">fd</name> <operator pos:start="31:21" pos:end="31:22">==</operator> <operator pos:start="31:24" pos:end="31:24">-</operator><literal type="number" pos:start="31:25" pos:end="31:25">1</literal> <operator pos:start="31:27" pos:end="31:28">||</operator> <call pos:start="31:30" pos:end="31:52"><name pos:start="31:30" pos:end="31:48">qemu_fd_getpagesize</name><argument_list pos:start="31:49" pos:end="31:52">(<argument pos:start="31:50" pos:end="31:51"><expr pos:start="31:50" pos:end="31:51"><name pos:start="31:50" pos:end="31:51">fd</name></expr></argument>)</argument_list></call> <operator pos:start="31:54" pos:end="31:55">==</operator> <call pos:start="31:57" pos:end="31:69"><name pos:start="31:57" pos:end="31:67">getpagesize</name><argument_list pos:start="31:68" pos:end="31:69">()</argument_list></call></expr> ?</condition><then pos:start="31:73" pos:end="31:74"> <expr pos:start="31:73" pos:end="31:74"><operator pos:start="31:73" pos:end="31:73">-</operator><literal type="number" pos:start="31:74" pos:end="31:74">1</literal></expr> </then><else pos:start="31:76" pos:end="31:79">: <expr pos:start="31:78" pos:end="31:79"><name pos:start="31:78" pos:end="31:79">fd</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:61"><decl pos:start="33:5" pos:end="33:60"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:13">flags</name> <init pos:start="33:15" pos:end="33:60">= <expr pos:start="33:17" pos:end="33:60"><ternary pos:start="33:17" pos:end="33:60"><condition pos:start="33:17" pos:end="33:30"><expr pos:start="33:17" pos:end="33:28"><name pos:start="33:17" pos:end="33:22">anonfd</name> <operator pos:start="33:24" pos:end="33:25">==</operator> <operator pos:start="33:27" pos:end="33:27">-</operator><literal type="number" pos:start="33:28" pos:end="33:28">1</literal></expr> ?</condition><then pos:start="33:32" pos:end="33:44"> <expr pos:start="33:32" pos:end="33:44"><name pos:start="33:32" pos:end="33:44">MAP_ANONYMOUS</name></expr> </then><else pos:start="33:46" pos:end="33:60">: <expr pos:start="33:48" pos:end="33:60"><name pos:start="33:48" pos:end="33:60">MAP_NORESERVE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="38:0"><decl pos:start="35:5" pos:end="35:73"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:8">void</name> <modifier pos:start="35:10" pos:end="35:10">*</modifier></type><name pos:start="35:11" pos:end="35:13">ptr</name> <init pos:start="35:15" pos:end="35:73">= <expr pos:start="35:17" pos:end="35:73"><call pos:start="35:17" pos:end="35:73"><name pos:start="35:17" pos:end="35:20">mmap</name><argument_list pos:start="35:21" pos:end="35:73">(<argument pos:start="35:22" pos:end="35:22"><expr pos:start="35:22" pos:end="35:22"><literal type="number" pos:start="35:22" pos:end="35:22">0</literal></expr></argument>, <argument pos:start="35:25" pos:end="35:29"><expr pos:start="35:25" pos:end="35:29"><name pos:start="35:25" pos:end="35:29">total</name></expr></argument>, <argument pos:start="35:32" pos:end="35:40"><expr pos:start="35:32" pos:end="35:40"><name pos:start="35:32" pos:end="35:40">PROT_NONE</name></expr></argument>, <argument pos:start="35:43" pos:end="35:61"><expr pos:start="35:43" pos:end="35:61"><name pos:start="35:43" pos:end="35:47">flags</name> <operator pos:start="35:49" pos:end="35:49">|</operator> <name pos:start="35:51" pos:end="35:61">MAP_PRIVATE</name></expr></argument>, <argument pos:start="35:64" pos:end="35:69"><expr pos:start="35:64" pos:end="35:69"><name pos:start="35:64" pos:end="35:69">anonfd</name></expr></argument>, <argument pos:start="35:72" pos:end="35:72"><expr pos:start="35:72" pos:end="35:72"><literal type="number" pos:start="35:72" pos:end="35:72">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="37:1" pos:end="37:5">#<cpp:directive pos:start="37:2" pos:end="37:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="39:5" pos:end="42:0"><decl pos:start="39:5" pos:end="39:77"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:8">void</name> <modifier pos:start="39:10" pos:end="39:10">*</modifier></type><name pos:start="39:11" pos:end="39:13">ptr</name> <init pos:start="39:15" pos:end="39:77">= <expr pos:start="39:17" pos:end="39:77"><call pos:start="39:17" pos:end="39:77"><name pos:start="39:17" pos:end="39:20">mmap</name><argument_list pos:start="39:21" pos:end="39:77">(<argument pos:start="39:22" pos:end="39:22"><expr pos:start="39:22" pos:end="39:22"><literal type="number" pos:start="39:22" pos:end="39:22">0</literal></expr></argument>, <argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:29">total</name></expr></argument>, <argument pos:start="39:32" pos:end="39:40"><expr pos:start="39:32" pos:end="39:40"><name pos:start="39:32" pos:end="39:40">PROT_NONE</name></expr></argument>, <argument pos:start="39:43" pos:end="39:69"><expr pos:start="39:43" pos:end="39:69"><name pos:start="39:43" pos:end="39:55">MAP_ANONYMOUS</name> <operator pos:start="39:57" pos:end="39:57">|</operator> <name pos:start="39:59" pos:end="39:69">MAP_PRIVATE</name></expr></argument>, <argument pos:start="39:72" pos:end="39:73"><expr pos:start="39:72" pos:end="39:73"><operator pos:start="39:72" pos:end="39:72">-</operator><literal type="number" pos:start="39:73" pos:end="39:73">1</literal></expr></argument>, <argument pos:start="39:76" pos:end="39:76"><expr pos:start="39:76" pos:end="39:76"><literal type="number" pos:start="39:76" pos:end="39:76">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="43:5" pos:end="43:74"><decl pos:start="43:5" pos:end="43:73"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:10">size_t</name></type> <name pos:start="43:12" pos:end="43:17">offset</name> <init pos:start="43:19" pos:end="43:73">= <expr pos:start="43:21" pos:end="43:73"><call pos:start="43:21" pos:end="43:56"><name pos:start="43:21" pos:end="43:33">QEMU_ALIGN_UP</name><argument_list pos:start="43:34" pos:end="43:56">(<argument pos:start="43:35" pos:end="43:48"><expr pos:start="43:35" pos:end="43:48"><operator pos:start="43:35" pos:end="43:35">(</operator><name pos:start="43:36" pos:end="43:44">uintptr_t</name><operator pos:start="43:45" pos:end="43:45">)</operator><name pos:start="43:46" pos:end="43:48">ptr</name></expr></argument>, <argument pos:start="43:51" pos:end="43:55"><expr pos:start="43:51" pos:end="43:55"><name pos:start="43:51" pos:end="43:55">align</name></expr></argument>)</argument_list></call> <operator pos:start="43:58" pos:end="43:58">-</operator> <operator pos:start="43:60" pos:end="43:60">(</operator><name pos:start="43:61" pos:end="43:69">uintptr_t</name><operator pos:start="43:70" pos:end="43:70">)</operator><name pos:start="43:71" pos:end="43:73">ptr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:15"><decl pos:start="45:5" pos:end="45:14"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:8">void</name> <modifier pos:start="45:10" pos:end="45:10">*</modifier></type><name pos:start="45:11" pos:end="45:14">ptr1</name></decl>;</decl_stmt>



    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:26">(<expr pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:11">ptr</name> <operator pos:start="49:13" pos:end="49:14">==</operator> <name pos:start="49:16" pos:end="49:25">MAP_FAILED</name></expr>)</condition> <block pos:start="49:28" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:26">

        <return pos:start="51:9" pos:end="51:26">return <expr pos:start="51:16" pos:end="51:25"><name pos:start="51:16" pos:end="51:25">MAP_FAILED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:41">/* Make sure align is a power of 2 */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:35"><expr pos:start="59:5" pos:end="59:34"><call pos:start="59:5" pos:end="59:34"><name pos:start="59:5" pos:end="59:10">assert</name><argument_list pos:start="59:11" pos:end="59:34">(<argument pos:start="59:12" pos:end="59:33"><expr pos:start="59:12" pos:end="59:33"><operator pos:start="59:12" pos:end="59:12">!</operator><operator pos:start="59:13" pos:end="59:13">(</operator><name pos:start="59:14" pos:end="59:18">align</name> <operator pos:start="59:20" pos:end="59:20">&amp;</operator> <operator pos:start="59:22" pos:end="59:22">(</operator><name pos:start="59:23" pos:end="59:27">align</name> <operator pos:start="59:29" pos:end="59:29">-</operator> <literal type="number" pos:start="59:31" pos:end="59:31">1</literal><operator pos:start="59:32" pos:end="59:32">)</operator><operator pos:start="59:33" pos:end="59:33">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:40">/* Always align to host page size */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><call pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:10">assert</name><argument_list pos:start="63:11" pos:end="63:34">(<argument pos:start="63:12" pos:end="63:33"><expr pos:start="63:12" pos:end="63:33"><name pos:start="63:12" pos:end="63:16">align</name> <operator pos:start="63:18" pos:end="63:19">&gt;=</operator> <call pos:start="63:21" pos:end="63:33"><name pos:start="63:21" pos:end="63:31">getpagesize</name><argument_list pos:start="63:32" pos:end="63:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="75:23"><expr pos:start="67:5" pos:end="75:22"><name pos:start="67:5" pos:end="67:8">ptr1</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <call pos:start="67:12" pos:end="75:22"><name pos:start="67:12" pos:end="67:15">mmap</name><argument_list pos:start="67:16" pos:end="75:22">(<argument pos:start="67:17" pos:end="67:28"><expr pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:19">ptr</name> <operator pos:start="67:21" pos:end="67:21">+</operator> <name pos:start="67:23" pos:end="67:28">offset</name></expr></argument>, <argument pos:start="67:31" pos:end="67:34"><expr pos:start="67:31" pos:end="67:34"><name pos:start="67:31" pos:end="67:34">size</name></expr></argument>, <argument pos:start="67:37" pos:end="67:58"><expr pos:start="67:37" pos:end="67:58"><name pos:start="67:37" pos:end="67:45">PROT_READ</name> <operator pos:start="67:47" pos:end="67:47">|</operator> <name pos:start="67:49" pos:end="67:58">PROT_WRITE</name></expr></argument>,

                <argument pos:start="69:17" pos:end="73:51"><expr pos:start="69:17" pos:end="73:51"><name pos:start="69:17" pos:end="69:25">MAP_FIXED</name> <operator pos:start="69:27" pos:end="69:27">|</operator>

                <operator pos:start="71:17" pos:end="71:17">(</operator><ternary pos:start="71:18" pos:end="71:45"><condition pos:start="71:18" pos:end="71:27"><expr pos:start="71:18" pos:end="71:25"><name pos:start="71:18" pos:end="71:19">fd</name> <operator pos:start="71:21" pos:end="71:22">==</operator> <operator pos:start="71:24" pos:end="71:24">-</operator><literal type="number" pos:start="71:25" pos:end="71:25">1</literal></expr> ?</condition><then pos:start="71:29" pos:end="71:41"> <expr pos:start="71:29" pos:end="71:41"><name pos:start="71:29" pos:end="71:41">MAP_ANONYMOUS</name></expr> </then><else pos:start="71:43" pos:end="71:45">: <expr pos:start="71:45" pos:end="71:45"><literal type="number" pos:start="71:45" pos:end="71:45">0</literal></expr></else></ternary><operator pos:start="71:46" pos:end="71:46">)</operator> <operator pos:start="71:48" pos:end="71:48">|</operator>

                <operator pos:start="73:17" pos:end="73:17">(</operator><ternary pos:start="73:18" pos:end="73:50"><condition pos:start="73:18" pos:end="73:25"><expr pos:start="73:18" pos:end="73:23"><name pos:start="73:18" pos:end="73:23">shared</name></expr> ?</condition><then pos:start="73:27" pos:end="73:36"> <expr pos:start="73:27" pos:end="73:36"><name pos:start="73:27" pos:end="73:36">MAP_SHARED</name></expr> </then><else pos:start="73:38" pos:end="73:50">: <expr pos:start="73:40" pos:end="73:50"><name pos:start="73:40" pos:end="73:50">MAP_PRIVATE</name></expr></else></ternary><operator pos:start="73:51" pos:end="73:51">)</operator></expr></argument>,

                <argument pos:start="75:17" pos:end="75:18"><expr pos:start="75:17" pos:end="75:18"><name pos:start="75:17" pos:end="75:18">fd</name></expr></argument>, <argument pos:start="75:21" pos:end="75:21"><expr pos:start="75:21" pos:end="75:21"><literal type="number" pos:start="75:21" pos:end="75:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:27">(<expr pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:12">ptr1</name> <operator pos:start="77:14" pos:end="77:15">==</operator> <name pos:start="77:17" pos:end="77:26">MAP_FAILED</name></expr>)</condition> <block pos:start="77:29" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:26">

        <expr_stmt pos:start="79:9" pos:end="79:27"><expr pos:start="79:9" pos:end="79:26"><call pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:14">munmap</name><argument_list pos:start="79:15" pos:end="79:26">(<argument pos:start="79:16" pos:end="79:18"><expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ptr</name></expr></argument>, <argument pos:start="79:21" pos:end="79:25"><expr pos:start="79:21" pos:end="79:25"><name pos:start="79:21" pos:end="79:25">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:26">return <expr pos:start="81:16" pos:end="81:25"><name pos:start="81:16" pos:end="81:25">MAP_FAILED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:18"><expr pos:start="87:5" pos:end="87:17"><name pos:start="87:5" pos:end="87:7">ptr</name> <operator pos:start="87:9" pos:end="87:10">+=</operator> <name pos:start="87:12" pos:end="87:17">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:20"><expr pos:start="89:5" pos:end="89:19"><name pos:start="89:5" pos:end="89:9">total</name> <operator pos:start="89:11" pos:end="89:12">-=</operator> <name pos:start="89:14" pos:end="89:19">offset</name></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:19">(<expr pos:start="93:9" pos:end="93:18"><name pos:start="93:9" pos:end="93:14">offset</name> <operator pos:start="93:16" pos:end="93:16">&gt;</operator> <literal type="number" pos:start="93:18" pos:end="93:18">0</literal></expr>)</condition> <block pos:start="93:21" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:37">

        <expr_stmt pos:start="95:9" pos:end="95:37"><expr pos:start="95:9" pos:end="95:36"><call pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:14">munmap</name><argument_list pos:start="95:15" pos:end="95:36">(<argument pos:start="95:16" pos:end="95:27"><expr pos:start="95:16" pos:end="95:27"><name pos:start="95:16" pos:end="95:18">ptr</name> <operator pos:start="95:20" pos:end="95:20">-</operator> <name pos:start="95:22" pos:end="95:27">offset</name></expr></argument>, <argument pos:start="95:30" pos:end="95:35"><expr pos:start="95:30" pos:end="95:35"><name pos:start="95:30" pos:end="95:35">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="107:7">/*

     * Leave a single PROT_NONE page allocated after the RAM block, to serve as

     * a guard page guarding against potential buffer overflows.

     */</comment>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:37">(<expr pos:start="109:9" pos:end="109:36"><name pos:start="109:9" pos:end="109:13">total</name> <operator pos:start="109:15" pos:end="109:15">&gt;</operator> <name pos:start="109:17" pos:end="109:20">size</name> <operator pos:start="109:22" pos:end="109:22">+</operator> <call pos:start="109:24" pos:end="109:36"><name pos:start="109:24" pos:end="109:34">getpagesize</name><argument_list pos:start="109:35" pos:end="109:36">()</argument_list></call></expr>)</condition> <block pos:start="109:39" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:73">

        <expr_stmt pos:start="111:9" pos:end="111:73"><expr pos:start="111:9" pos:end="111:72"><call pos:start="111:9" pos:end="111:72"><name pos:start="111:9" pos:end="111:14">munmap</name><argument_list pos:start="111:15" pos:end="111:72">(<argument pos:start="111:16" pos:end="111:41"><expr pos:start="111:16" pos:end="111:41"><name pos:start="111:16" pos:end="111:18">ptr</name> <operator pos:start="111:20" pos:end="111:20">+</operator> <name pos:start="111:22" pos:end="111:25">size</name> <operator pos:start="111:27" pos:end="111:27">+</operator> <call pos:start="111:29" pos:end="111:41"><name pos:start="111:29" pos:end="111:39">getpagesize</name><argument_list pos:start="111:40" pos:end="111:41">()</argument_list></call></expr></argument>, <argument pos:start="111:44" pos:end="111:71"><expr pos:start="111:44" pos:end="111:71"><name pos:start="111:44" pos:end="111:48">total</name> <operator pos:start="111:50" pos:end="111:50">-</operator> <name pos:start="111:52" pos:end="111:55">size</name> <operator pos:start="111:57" pos:end="111:57">-</operator> <call pos:start="111:59" pos:end="111:71"><name pos:start="111:59" pos:end="111:69">getpagesize</name><argument_list pos:start="111:70" pos:end="111:71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="117:5" pos:end="117:15">return <expr pos:start="117:12" pos:end="117:14"><name pos:start="117:12" pos:end="117:14">ptr</name></expr>;</return>

</block_content>}</block></function>
</unit>
