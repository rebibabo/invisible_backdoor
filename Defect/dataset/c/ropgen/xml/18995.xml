<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18995.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:15"><name pos:start="1:1" pos:end="1:13">ChardevReturn</name> <modifier pos:start="1:15" pos:end="1:15">*</modifier></type><name pos:start="1:16" pos:end="1:30">qmp_chardev_add</name><parameter_list pos:start="1:31" pos:end="3:44">(<parameter pos:start="1:32" pos:end="1:45"><decl pos:start="1:32" pos:end="1:45"><type pos:start="1:32" pos:end="1:45"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">id</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:70"><decl pos:start="1:48" pos:end="1:70"><type pos:start="1:48" pos:end="1:70"><name pos:start="1:48" pos:end="1:61">ChardevBackend</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:70">backend</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:36">Error</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier><modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:43">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="159:5">

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ChardevReturn</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">ret</name> <init pos:start="7:24" pos:end="7:49">= <expr pos:start="7:26" pos:end="7:49"><call pos:start="7:26" pos:end="7:49"><name pos:start="7:26" pos:end="7:31">g_new0</name><argument_list pos:start="7:32" pos:end="7:49">(<argument pos:start="7:33" pos:end="7:45"><expr pos:start="7:33" pos:end="7:45"><name pos:start="7:33" pos:end="7:45">ChardevReturn</name></expr></argument>, <argument pos:start="7:48" pos:end="7:48"><expr pos:start="7:48" pos:end="7:48"><literal type="number" pos:start="7:48" pos:end="7:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">CharDriverState</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:25">base</name></decl>, <decl pos:start="9:28" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:21"><modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:31">chr</name> <init pos:start="9:33" pos:end="9:38">= <expr pos:start="9:35" pos:end="9:38"><name pos:start="9:35" pos:end="9:38">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:28"><expr pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:7">chr</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:27"><name pos:start="13:11" pos:end="13:23">qemu_chr_find</name><argument_list pos:start="13:24" pos:end="13:27">(<argument pos:start="13:25" pos:end="13:26"><expr pos:start="13:25" pos:end="13:26"><name pos:start="13:25" pos:end="13:26">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">chr</name></expr>)</condition> <block pos:start="15:14" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:20">

        <expr_stmt pos:start="17:9" pos:end="17:60"><expr pos:start="17:9" pos:end="17:59"><call pos:start="17:9" pos:end="17:59"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:59">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:54"><expr pos:start="17:26" pos:end="17:54"><literal type="string" pos:start="17:26" pos:end="17:54">"Chardev '%s' already exists"</literal></expr></argument>, <argument pos:start="17:57" pos:end="17:58"><expr pos:start="17:57" pos:end="17:58"><name pos:start="17:57" pos:end="17:58">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:20"><expr pos:start="19:9" pos:end="19:19"><call pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:14">g_free</name><argument_list pos:start="19:15" pos:end="19:19">(<argument pos:start="19:16" pos:end="19:18"><expr pos:start="19:16" pos:end="19:18"><name pos:start="19:16" pos:end="19:18">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:20">return <expr pos:start="21:16" pos:end="21:19"><name pos:start="21:16" pos:end="21:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="27:5" pos:end="131:5">switch <condition pos:start="27:12" pos:end="27:26">(<expr pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:19">backend</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:25">kind</name></name></expr>)</condition> <block pos:start="27:28" pos:end="131:5">{<block_content pos:start="29:5" pos:end="129:14">

    <case pos:start="29:5" pos:end="29:35">case <expr pos:start="29:10" pos:end="29:34"><name pos:start="29:10" pos:end="29:34">CHARDEV_BACKEND_KIND_FILE</name></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:57"><expr pos:start="31:9" pos:end="31:56"><name pos:start="31:9" pos:end="31:11">chr</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:56"><name pos:start="31:15" pos:end="31:35">qmp_chardev_open_file</name><argument_list pos:start="31:36" pos:end="31:56">(<argument pos:start="31:37" pos:end="31:49"><expr pos:start="31:37" pos:end="31:49"><name pos:start="31:37" pos:end="31:49"><name pos:start="31:37" pos:end="31:43">backend</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:49">file</name></name></expr></argument>, <argument pos:start="31:52" pos:end="31:55"><expr pos:start="31:52" pos:end="31:55"><name pos:start="31:52" pos:end="31:55">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:37">case <expr pos:start="35:10" pos:end="35:36"><name pos:start="35:10" pos:end="35:36">CHARDEV_BACKEND_KIND_SERIAL</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:11">chr</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:60"><name pos:start="37:15" pos:end="37:37">qmp_chardev_open_serial</name><argument_list pos:start="37:38" pos:end="37:60">(<argument pos:start="37:39" pos:end="37:53"><expr pos:start="37:39" pos:end="37:53"><name pos:start="37:39" pos:end="37:53"><name pos:start="37:39" pos:end="37:45">backend</name><operator pos:start="37:46" pos:end="37:47">-&gt;</operator><name pos:start="37:48" pos:end="37:53">serial</name></name></expr></argument>, <argument pos:start="37:56" pos:end="37:59"><expr pos:start="37:56" pos:end="37:59"><name pos:start="37:56" pos:end="37:59">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:39">case <expr pos:start="41:10" pos:end="41:38"><name pos:start="41:10" pos:end="41:38">CHARDEV_BACKEND_KIND_PARALLEL</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:65"><expr pos:start="43:9" pos:end="43:64"><name pos:start="43:9" pos:end="43:11">chr</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:64"><name pos:start="43:15" pos:end="43:39">qmp_chardev_open_parallel</name><argument_list pos:start="43:40" pos:end="43:64">(<argument pos:start="43:41" pos:end="43:57"><expr pos:start="43:41" pos:end="43:57"><name pos:start="43:41" pos:end="43:57"><name pos:start="43:41" pos:end="43:47">backend</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:57">parallel</name></name></expr></argument>, <argument pos:start="43:60" pos:end="43:63"><expr pos:start="43:60" pos:end="43:63"><name pos:start="43:60" pos:end="43:63">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:37">case <expr pos:start="47:10" pos:end="47:36"><name pos:start="47:10" pos:end="47:36">CHARDEV_BACKEND_KIND_SOCKET</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:61"><expr pos:start="49:9" pos:end="49:60"><name pos:start="49:9" pos:end="49:11">chr</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:60"><name pos:start="49:15" pos:end="49:37">qmp_chardev_open_socket</name><argument_list pos:start="49:38" pos:end="49:60">(<argument pos:start="49:39" pos:end="49:53"><expr pos:start="49:39" pos:end="49:53"><name pos:start="49:39" pos:end="49:53"><name pos:start="49:39" pos:end="49:45">backend</name><operator pos:start="49:46" pos:end="49:47">-&gt;</operator><name pos:start="49:48" pos:end="49:53">socket</name></name></expr></argument>, <argument pos:start="49:56" pos:end="49:59"><expr pos:start="49:56" pos:end="49:59"><name pos:start="49:56" pos:end="49:59">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="54:0">break;</break>

<cpp:ifdef pos:start="53:1" pos:end="53:23">#<cpp:directive pos:start="53:2" pos:end="53:6">ifdef</cpp:directive> <name pos:start="53:8" pos:end="53:23">HAVE_CHARDEV_TTY</name></cpp:ifdef>

    <case pos:start="55:5" pos:end="55:34">case <expr pos:start="55:10" pos:end="55:33"><name pos:start="55:10" pos:end="55:33">CHARDEV_BACKEND_KIND_PTY</name></expr>:</case>

    <block pos:start="57:5" pos:end="78:0">{<block_content pos:start="61:9" pos:end="73:14">

        <comment type="block" pos:start="59:9" pos:end="59:51">/* qemu_chr_open_pty sets "path" in opts */</comment>

        <decl_stmt pos:start="61:9" pos:end="61:23"><decl pos:start="61:9" pos:end="61:22"><type pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:16">QemuOpts</name> <modifier pos:start="61:18" pos:end="61:18">*</modifier></type><name pos:start="61:19" pos:end="61:22">opts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:66"><expr pos:start="63:9" pos:end="63:65"><name pos:start="63:9" pos:end="63:12">opts</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:65"><name pos:start="63:16" pos:end="63:38">qemu_opts_create_nofail</name><argument_list pos:start="63:39" pos:end="63:65">(<argument pos:start="63:40" pos:end="63:64"><expr pos:start="63:40" pos:end="63:64"><call pos:start="63:40" pos:end="63:64"><name pos:start="63:40" pos:end="63:53">qemu_find_opts</name><argument_list pos:start="63:54" pos:end="63:64">(<argument pos:start="63:55" pos:end="63:63"><expr pos:start="63:55" pos:end="63:63"><literal type="string" pos:start="63:55" pos:end="63:63">"chardev"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:38"><expr pos:start="65:9" pos:end="65:37"><name pos:start="65:9" pos:end="65:11">chr</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:37"><name pos:start="65:15" pos:end="65:31">qemu_chr_open_pty</name><argument_list pos:start="65:32" pos:end="65:37">(<argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:56"><expr pos:start="67:9" pos:end="67:55"><name pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:11">ret</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:16">pty</name></name> <operator pos:start="67:18" pos:end="67:18">=</operator> <call pos:start="67:20" pos:end="67:55"><name pos:start="67:20" pos:end="67:27">g_strdup</name><argument_list pos:start="67:28" pos:end="67:55">(<argument pos:start="67:29" pos:end="67:54"><expr pos:start="67:29" pos:end="67:54"><call pos:start="67:29" pos:end="67:54"><name pos:start="67:29" pos:end="67:40">qemu_opt_get</name><argument_list pos:start="67:41" pos:end="67:54">(<argument pos:start="67:42" pos:end="67:45"><expr pos:start="67:42" pos:end="67:45"><name pos:start="67:42" pos:end="67:45">opts</name></expr></argument>, <argument pos:start="67:48" pos:end="67:53"><expr pos:start="67:48" pos:end="67:53"><literal type="string" pos:start="67:48" pos:end="67:53">"path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:28"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:11">ret</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:20">has_pty</name></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <name pos:start="69:24" pos:end="69:27">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:28"><expr pos:start="71:9" pos:end="71:27"><call pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:21">qemu_opts_del</name><argument_list pos:start="71:22" pos:end="71:27">(<argument pos:start="71:23" pos:end="71:26"><expr pos:start="71:23" pos:end="71:26"><name pos:start="71:23" pos:end="71:26">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

    <case pos:start="79:5" pos:end="79:35">case <expr pos:start="79:10" pos:end="79:34"><name pos:start="79:10" pos:end="79:34">CHARDEV_BACKEND_KIND_NULL</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:35"><expr pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:11">chr</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:34"><name pos:start="81:15" pos:end="81:32">qemu_chr_open_null</name><argument_list pos:start="81:33" pos:end="81:34">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:34">case <expr pos:start="85:10" pos:end="85:33"><name pos:start="85:10" pos:end="85:33">CHARDEV_BACKEND_KIND_MUX</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:52"><expr pos:start="87:9" pos:end="87:51"><name pos:start="87:9" pos:end="87:12">base</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <call pos:start="87:16" pos:end="87:51"><name pos:start="87:16" pos:end="87:28">qemu_chr_find</name><argument_list pos:start="87:29" pos:end="87:51">(<argument pos:start="87:30" pos:end="87:50"><expr pos:start="87:30" pos:end="87:50"><name pos:start="87:30" pos:end="87:50"><name pos:start="87:30" pos:end="87:36">backend</name><operator pos:start="87:37" pos:end="87:38">-&gt;</operator><name pos:start="87:39" pos:end="87:41">mux</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:50">chardev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="97:9"><if pos:start="89:9" pos:end="97:9">if <condition pos:start="89:12" pos:end="89:25">(<expr pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:16">base</name> <operator pos:start="89:18" pos:end="89:19">==</operator> <name pos:start="89:21" pos:end="89:24">NULL</name></expr>)</condition> <block pos:start="89:27" pos:end="97:9">{<block_content pos:start="91:13" pos:end="95:18">

            <expr_stmt pos:start="91:13" pos:end="93:46"><expr pos:start="91:13" pos:end="93:45"><call pos:start="91:13" pos:end="93:45"><name pos:start="91:13" pos:end="91:22">error_setg</name><argument_list pos:start="91:23" pos:end="93:45">(<argument pos:start="91:24" pos:end="91:27"><expr pos:start="91:24" pos:end="91:27"><name pos:start="91:24" pos:end="91:27">errp</name></expr></argument>, <argument pos:start="91:30" pos:end="91:61"><expr pos:start="91:30" pos:end="91:61"><literal type="string" pos:start="91:30" pos:end="91:61">"mux: base chardev %s not found"</literal></expr></argument>,

                       <argument pos:start="93:24" pos:end="93:44"><expr pos:start="93:24" pos:end="93:44"><name pos:start="93:24" pos:end="93:44"><name pos:start="93:24" pos:end="93:30">backend</name><operator pos:start="93:31" pos:end="93:32">-&gt;</operator><name pos:start="93:33" pos:end="93:35">mux</name><operator pos:start="93:36" pos:end="93:37">-&gt;</operator><name pos:start="93:38" pos:end="93:44">chardev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:38"><expr pos:start="99:9" pos:end="99:37"><name pos:start="99:9" pos:end="99:11">chr</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="99:37"><name pos:start="99:15" pos:end="99:31">qemu_chr_open_mux</name><argument_list pos:start="99:32" pos:end="99:37">(<argument pos:start="99:33" pos:end="99:36"><expr pos:start="99:33" pos:end="99:36"><name pos:start="99:33" pos:end="99:36">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:38">case <expr pos:start="103:10" pos:end="103:37"><name pos:start="103:10" pos:end="103:37">CHARDEV_BACKEND_KIND_MSMOUSE</name></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:38"><expr pos:start="105:9" pos:end="105:37"><name pos:start="105:9" pos:end="105:11">chr</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:37"><name pos:start="105:15" pos:end="105:35">qemu_chr_open_msmouse</name><argument_list pos:start="105:36" pos:end="105:37">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="110:0">break;</break>

<cpp:ifdef pos:start="109:1" pos:end="109:20">#<cpp:directive pos:start="109:2" pos:end="109:6">ifdef</cpp:directive> <name pos:start="109:8" pos:end="109:20">CONFIG_BRLAPI</name></cpp:ifdef>

    <case pos:start="111:5" pos:end="111:38">case <expr pos:start="111:10" pos:end="111:37"><name pos:start="111:10" pos:end="111:37">CHARDEV_BACKEND_KIND_BRAILLE</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:30"><expr pos:start="113:9" pos:end="113:29"><name pos:start="113:9" pos:end="113:11">chr</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:29"><name pos:start="113:15" pos:end="113:27">chr_baum_init</name><argument_list pos:start="113:28" pos:end="113:29">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="118:0">break;</break>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

    <case pos:start="119:5" pos:end="119:36">case <expr pos:start="119:10" pos:end="119:35"><name pos:start="119:10" pos:end="119:35">CHARDEV_BACKEND_KIND_STDIO</name></expr>:</case>

        <expr_stmt pos:start="121:9" pos:end="121:50"><expr pos:start="121:9" pos:end="121:49"><name pos:start="121:9" pos:end="121:11">chr</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <call pos:start="121:15" pos:end="121:49"><name pos:start="121:15" pos:end="121:33">qemu_chr_open_stdio</name><argument_list pos:start="121:34" pos:end="121:49">(<argument pos:start="121:35" pos:end="121:48"><expr pos:start="121:35" pos:end="121:48"><name pos:start="121:35" pos:end="121:48"><name pos:start="121:35" pos:end="121:41">backend</name><operator pos:start="121:42" pos:end="121:43">-&gt;</operator><name pos:start="121:44" pos:end="121:48">stdio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <default pos:start="125:5" pos:end="125:12">default:</default>

        <expr_stmt pos:start="127:9" pos:end="127:72"><expr pos:start="127:9" pos:end="127:71"><call pos:start="127:9" pos:end="127:71"><name pos:start="127:9" pos:end="127:18">error_setg</name><argument_list pos:start="127:19" pos:end="127:71">(<argument pos:start="127:20" pos:end="127:23"><expr pos:start="127:20" pos:end="127:23"><name pos:start="127:20" pos:end="127:23">errp</name></expr></argument>, <argument pos:start="127:26" pos:end="127:55"><expr pos:start="127:26" pos:end="127:55"><literal type="string" pos:start="127:26" pos:end="127:55">"unknown chardev backend (%d)"</literal></expr></argument>, <argument pos:start="127:58" pos:end="127:70"><expr pos:start="127:58" pos:end="127:70"><name pos:start="127:58" pos:end="127:70"><name pos:start="127:58" pos:end="127:64">backend</name><operator pos:start="127:65" pos:end="127:66">-&gt;</operator><name pos:start="127:67" pos:end="127:70">kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="135:5" pos:end="139:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:43">(<expr pos:start="135:9" pos:end="135:42"><name pos:start="135:9" pos:end="135:11">chr</name> <operator pos:start="135:13" pos:end="135:14">==</operator> <name pos:start="135:16" pos:end="135:19">NULL</name> <operator pos:start="135:21" pos:end="135:22">&amp;&amp;</operator> <operator pos:start="135:24" pos:end="135:24">!</operator><call pos:start="135:25" pos:end="135:42"><name pos:start="135:25" pos:end="135:36">error_is_set</name><argument_list pos:start="135:37" pos:end="135:42">(<argument pos:start="135:38" pos:end="135:41"><expr pos:start="135:38" pos:end="135:41"><name pos:start="135:38" pos:end="135:41">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:45" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:53">

        <expr_stmt pos:start="137:9" pos:end="137:53"><expr pos:start="137:9" pos:end="137:52"><call pos:start="137:9" pos:end="137:52"><name pos:start="137:9" pos:end="137:18">error_setg</name><argument_list pos:start="137:19" pos:end="137:52">(<argument pos:start="137:20" pos:end="137:23"><expr pos:start="137:20" pos:end="137:23"><name pos:start="137:20" pos:end="137:23">errp</name></expr></argument>, <argument pos:start="137:26" pos:end="137:51"><expr pos:start="137:26" pos:end="137:51"><literal type="string" pos:start="137:26" pos:end="137:51">"Failed to create chardev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="141:5" pos:end="159:5"><if pos:start="141:5" pos:end="153:5">if <condition pos:start="141:8" pos:end="141:12">(<expr pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">chr</name></expr>)</condition> <block pos:start="141:14" pos:end="153:5">{<block_content pos:start="143:9" pos:end="151:19">

        <expr_stmt pos:start="143:9" pos:end="143:34"><expr pos:start="143:9" pos:end="143:33"><name pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:11">chr</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:18">label</name></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <call pos:start="143:22" pos:end="143:33"><name pos:start="143:22" pos:end="143:29">g_strdup</name><argument_list pos:start="143:30" pos:end="143:33">(<argument pos:start="143:31" pos:end="143:32"><expr pos:start="143:31" pos:end="143:32"><name pos:start="143:31" pos:end="143:32">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="147:70"><expr pos:start="145:9" pos:end="147:69"><name pos:start="145:9" pos:end="145:30"><name pos:start="145:9" pos:end="145:11">chr</name><operator pos:start="145:12" pos:end="145:13">-&gt;</operator><name pos:start="145:14" pos:end="145:30">avail_connections</name></name> <operator pos:start="145:32" pos:end="145:32">=</operator>

            <ternary pos:start="147:13" pos:end="147:69"><condition pos:start="147:13" pos:end="147:57"><expr pos:start="147:13" pos:end="147:55"><operator pos:start="147:13" pos:end="147:13">(</operator><name pos:start="147:14" pos:end="147:26"><name pos:start="147:14" pos:end="147:20">backend</name><operator pos:start="147:21" pos:end="147:22">-&gt;</operator><name pos:start="147:23" pos:end="147:26">kind</name></name> <operator pos:start="147:28" pos:end="147:29">==</operator> <name pos:start="147:31" pos:end="147:54">CHARDEV_BACKEND_KIND_MUX</name><operator pos:start="147:55" pos:end="147:55">)</operator></expr> ?</condition><then pos:start="147:59" pos:end="147:65"> <expr pos:start="147:59" pos:end="147:65"><name pos:start="147:59" pos:end="147:65">MAX_MUX</name></expr> </then><else pos:start="147:67" pos:end="147:69">: <expr pos:start="147:69" pos:end="147:69"><literal type="number" pos:start="147:69" pos:end="147:69">1</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:49"><expr pos:start="149:9" pos:end="149:48"><call pos:start="149:9" pos:end="149:48"><name pos:start="149:9" pos:end="149:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="149:27" pos:end="149:48">(<argument pos:start="149:28" pos:end="149:36"><expr pos:start="149:28" pos:end="149:36"><operator pos:start="149:28" pos:end="149:28">&amp;</operator><name pos:start="149:29" pos:end="149:36">chardevs</name></expr></argument>, <argument pos:start="149:39" pos:end="149:41"><expr pos:start="149:39" pos:end="149:41"><name pos:start="149:39" pos:end="149:41">chr</name></expr></argument>, <argument pos:start="149:44" pos:end="149:47"><expr pos:start="149:44" pos:end="149:47"><name pos:start="149:44" pos:end="149:47">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="151:9" pos:end="151:19">return <expr pos:start="151:16" pos:end="151:18"><name pos:start="151:16" pos:end="151:18">ret</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="153:7" pos:end="159:5">else <block pos:start="153:12" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:20">

        <expr_stmt pos:start="155:9" pos:end="155:20"><expr pos:start="155:9" pos:end="155:19"><call pos:start="155:9" pos:end="155:19"><name pos:start="155:9" pos:end="155:14">g_free</name><argument_list pos:start="155:15" pos:end="155:19">(<argument pos:start="155:16" pos:end="155:18"><expr pos:start="155:16" pos:end="155:18"><name pos:start="155:16" pos:end="155:18">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:20">return <expr pos:start="157:16" pos:end="157:19"><name pos:start="157:16" pos:end="157:19">NULL</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
