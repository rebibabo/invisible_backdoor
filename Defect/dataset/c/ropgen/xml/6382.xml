<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6382.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">test_io</name><parameter_list pos:start="1:20" pos:end="1:25">(<parameter pos:start="1:21" pos:end="1:24"><decl pos:start="1:21" pos:end="1:24"><type pos:start="1:21" pos:end="1:24"><name pos:start="1:21" pos:end="1:24">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="215:1">{<block_content pos:start="11:5" pos:end="214:0">

<cpp:ifndef pos:start="5:1" pos:end="5:14">#<cpp:directive pos:start="5:2" pos:end="5:7">ifndef</cpp:directive> <name pos:start="5:9" pos:end="5:14">_WIN32</name></cpp:ifndef>

<comment type="block" pos:start="7:1" pos:end="7:57">/* socketpair(PF_UNIX) which does not exist on windows */</comment>



    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13"><name pos:start="11:9" pos:end="11:10">sv</name><index pos:start="11:11" pos:end="11:13">[<expr pos:start="11:12" pos:end="11:12"><literal type="number" pos:start="11:12" pos:end="11:12">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:14">i</name></decl>, <decl pos:start="15:17" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:17" pos:end="15:17">j</name></decl>, <decl pos:start="15:20" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:20" pos:end="15:20">k</name></decl>, <decl pos:start="15:23" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:23" pos:end="15:23">s</name></decl>, <decl pos:start="15:26" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:26" pos:end="15:26">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">fd_set</name></type> <name pos:start="17:12" pos:end="17:14">fds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">unsigned</name></type> <name pos:start="19:14" pos:end="19:17">niov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:16">iovec</name></name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">iov</name></decl>, <decl pos:start="21:24" pos:end="21:28"><type ref="prev" pos:start="21:5" pos:end="21:18"><modifier pos:start="21:24" pos:end="21:24">*</modifier></type><name pos:start="21:25" pos:end="21:28">siov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:17">char</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:22">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">size_t</name></type> <name pos:start="25:12" pos:end="25:13">sz</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><call pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:14">iov_random</name><argument_list pos:start="29:15" pos:end="29:27">(<argument pos:start="29:16" pos:end="29:19"><expr pos:start="29:16" pos:end="29:19"><operator pos:start="29:16" pos:end="29:16">&amp;</operator><name pos:start="29:17" pos:end="29:19">iov</name></expr></argument>, <argument pos:start="29:22" pos:end="29:26"><expr pos:start="29:22" pos:end="29:26"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:26">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:6">sz</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:28"><name pos:start="31:10" pos:end="31:17">iov_size</name><argument_list pos:start="31:18" pos:end="31:28">(<argument pos:start="31:19" pos:end="31:21"><expr pos:start="31:19" pos:end="31:21"><name pos:start="31:19" pos:end="31:21">iov</name></expr></argument>, <argument pos:start="31:24" pos:end="31:27"><expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:7">buf</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:22"><name pos:start="33:11" pos:end="33:18">g_malloc</name><argument_list pos:start="33:19" pos:end="33:22">(<argument pos:start="33:20" pos:end="33:21"><expr pos:start="33:20" pos:end="33:21"><name pos:start="33:20" pos:end="33:21">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="35:5" pos:end="39:5">for <control pos:start="35:9" pos:end="35:28">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:23"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:19">&lt;</operator> <name pos:start="35:21" pos:end="35:22">sz</name></expr>;</condition> <incr pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><operator pos:start="35:25" pos:end="35:26">++</operator><name pos:start="35:27" pos:end="35:27">i</name></expr></incr>)</control> <block pos:start="35:30" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:25">

        <expr_stmt pos:start="37:9" pos:end="37:25"><expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:11">buf</name><index pos:start="37:12" pos:end="37:14">[<expr pos:start="37:13" pos:end="37:13"><name pos:start="37:13" pos:end="37:13">i</name></expr>]</index></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:18">i</name> <operator pos:start="37:20" pos:end="37:20">&amp;</operator> <literal type="number" pos:start="37:22" pos:end="37:24">255</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><call pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:16">iov_from_buf</name><argument_list pos:start="41:17" pos:end="41:39">(<argument pos:start="41:18" pos:end="41:20"><expr pos:start="41:18" pos:end="41:20"><name pos:start="41:18" pos:end="41:20">iov</name></expr></argument>, <argument pos:start="41:23" pos:end="41:26"><expr pos:start="41:23" pos:end="41:26"><name pos:start="41:23" pos:end="41:26">niov</name></expr></argument>, <argument pos:start="41:29" pos:end="41:29"><expr pos:start="41:29" pos:end="41:29"><literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr></argument>, <argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:34">buf</name></expr></argument>, <argument pos:start="41:37" pos:end="41:38"><expr pos:start="41:37" pos:end="41:38"><name pos:start="41:37" pos:end="41:38">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:8">siov</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:40"><name pos:start="45:12" pos:end="45:19">g_malloc</name><argument_list pos:start="45:20" pos:end="45:40">(<argument pos:start="45:21" pos:end="45:39"><expr pos:start="45:21" pos:end="45:39"><sizeof pos:start="45:21" pos:end="45:32">sizeof<argument_list pos:start="45:27" pos:end="45:32">(<argument pos:start="45:28" pos:end="45:31"><expr pos:start="45:28" pos:end="45:31"><operator pos:start="45:28" pos:end="45:28">*</operator><name pos:start="45:29" pos:end="45:31">iov</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:34" pos:end="45:34">*</operator> <name pos:start="45:36" pos:end="45:39">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><call pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:10">memcpy</name><argument_list pos:start="47:11" pos:end="47:42">(<argument pos:start="47:12" pos:end="47:15"><expr pos:start="47:12" pos:end="47:15"><name pos:start="47:12" pos:end="47:15">siov</name></expr></argument>, <argument pos:start="47:18" pos:end="47:20"><expr pos:start="47:18" pos:end="47:20"><name pos:start="47:18" pos:end="47:20">iov</name></expr></argument>, <argument pos:start="47:23" pos:end="47:41"><expr pos:start="47:23" pos:end="47:41"><sizeof pos:start="47:23" pos:end="47:34">sizeof<argument_list pos:start="47:29" pos:end="47:34">(<argument pos:start="47:30" pos:end="47:33"><expr pos:start="47:30" pos:end="47:33"><operator pos:start="47:30" pos:end="47:30">*</operator><name pos:start="47:31" pos:end="47:33">iov</name></expr></argument>)</argument_list></sizeof> <operator pos:start="47:36" pos:end="47:36">*</operator> <name pos:start="47:38" pos:end="47:41">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:52">(<expr pos:start="51:9" pos:end="51:51"><call pos:start="51:9" pos:end="51:47"><name pos:start="51:9" pos:end="51:18">socketpair</name><argument_list pos:start="51:19" pos:end="51:47">(<argument pos:start="51:20" pos:end="51:26"><expr pos:start="51:20" pos:end="51:26"><name pos:start="51:20" pos:end="51:26">PF_UNIX</name></expr></argument>, <argument pos:start="51:29" pos:end="51:39"><expr pos:start="51:29" pos:end="51:39"><name pos:start="51:29" pos:end="51:39">SOCK_STREAM</name></expr></argument>, <argument pos:start="51:42" pos:end="51:42"><expr pos:start="51:42" pos:end="51:42"><literal type="number" pos:start="51:42" pos:end="51:42">0</literal></expr></argument>, <argument pos:start="51:45" pos:end="51:46"><expr pos:start="51:45" pos:end="51:46"><name pos:start="51:45" pos:end="51:46">sv</name></expr></argument>)</argument_list></call> <operator pos:start="51:49" pos:end="51:49">&lt;</operator> <literal type="number" pos:start="51:51" pos:end="51:51">0</literal></expr>)</condition> <block pos:start="51:54" pos:end="57:5">{<block_content pos:start="53:8" pos:end="55:15">

       <expr_stmt pos:start="53:8" pos:end="53:28"><expr pos:start="53:8" pos:end="53:27"><call pos:start="53:8" pos:end="53:27"><name pos:start="53:8" pos:end="53:13">perror</name><argument_list pos:start="53:14" pos:end="53:27">(<argument pos:start="53:15" pos:end="53:26"><expr pos:start="53:15" pos:end="53:26"><literal type="string" pos:start="53:15" pos:end="53:26">"socketpair"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="55:8" pos:end="55:15"><expr pos:start="55:8" pos:end="55:14"><call pos:start="55:8" pos:end="55:14"><name pos:start="55:8" pos:end="55:11">exit</name><argument_list pos:start="55:12" pos:end="55:14">(<argument pos:start="55:13" pos:end="55:13"><expr pos:start="55:13" pos:end="55:13"><literal type="number" pos:start="55:13" pos:end="55:13">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:18"><expr pos:start="61:5" pos:end="61:17"><call pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:11">FD_ZERO</name><argument_list pos:start="61:12" pos:end="61:17">(<argument pos:start="61:13" pos:end="61:16"><expr pos:start="61:13" pos:end="61:16"><operator pos:start="61:13" pos:end="61:13">&amp;</operator><name pos:start="61:14" pos:end="61:16">fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:10"><expr pos:start="65:5" pos:end="65:9"><name pos:start="65:5" pos:end="65:5">t</name> <operator pos:start="65:7" pos:end="65:7">=</operator> <literal type="number" pos:start="65:9" pos:end="65:9">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="214:0"><if pos:start="67:5" pos:end="134:5">if <condition pos:start="67:8" pos:end="67:20">(<expr pos:start="67:9" pos:end="67:19"><call pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:12">fork</name><argument_list pos:start="67:13" pos:end="67:14">()</argument_list></call> <operator pos:start="67:16" pos:end="67:17">==</operator> <literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>)</condition> <block pos:start="67:22" pos:end="134:5">{<block_content pos:start="73:8" pos:end="130:15">

       <comment type="block" pos:start="69:8" pos:end="69:19">/* writer */</comment>



       <expr_stmt pos:start="73:8" pos:end="73:20"><expr pos:start="73:8" pos:end="73:19"><call pos:start="73:8" pos:end="73:19"><name pos:start="73:8" pos:end="73:12">close</name><argument_list pos:start="73:13" pos:end="73:19">(<argument pos:start="73:14" pos:end="73:18"><expr pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:15">sv</name><index pos:start="73:16" pos:end="73:18">[<expr pos:start="73:17" pos:end="73:17"><literal type="number" pos:start="73:17" pos:end="73:17">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="75:8" pos:end="75:27"><expr pos:start="75:8" pos:end="75:26"><call pos:start="75:8" pos:end="75:26"><name pos:start="75:8" pos:end="75:13">FD_SET</name><argument_list pos:start="75:14" pos:end="75:26">(<argument pos:start="75:15" pos:end="75:19"><expr pos:start="75:15" pos:end="75:19"><name pos:start="75:15" pos:end="75:19"><name pos:start="75:15" pos:end="75:16">sv</name><index pos:start="75:17" pos:end="75:19">[<expr pos:start="75:18" pos:end="75:18"><literal type="number" pos:start="75:18" pos:end="75:18">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="75:22" pos:end="75:25"><expr pos:start="75:22" pos:end="75:25"><operator pos:start="75:22" pos:end="75:22">&amp;</operator><name pos:start="75:23" pos:end="75:25">fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="77:8" pos:end="77:48"><expr pos:start="77:8" pos:end="77:47"><call pos:start="77:8" pos:end="77:47"><name pos:start="77:8" pos:end="77:12">fcntl</name><argument_list pos:start="77:13" pos:end="77:47">(<argument pos:start="77:14" pos:end="77:18"><expr pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:15">sv</name><index pos:start="77:16" pos:end="77:18">[<expr pos:start="77:17" pos:end="77:17"><literal type="number" pos:start="77:17" pos:end="77:17">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:21" pos:end="77:27"><expr pos:start="77:21" pos:end="77:27"><name pos:start="77:21" pos:end="77:27">F_SETFL</name></expr></argument>, <argument pos:start="77:30" pos:end="77:46"><expr pos:start="77:30" pos:end="77:46"><name pos:start="77:30" pos:end="77:35">O_RDWR</name><operator pos:start="77:36" pos:end="77:36">|</operator><name pos:start="77:37" pos:end="77:46">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="79:8" pos:end="79:45"><expr pos:start="79:8" pos:end="79:44"><name pos:start="79:8" pos:end="79:8">r</name> <operator pos:start="79:10" pos:end="79:10">=</operator> <call pos:start="79:12" pos:end="79:44"><name pos:start="79:12" pos:end="79:32">g_test_rand_int_range</name><argument_list pos:start="79:33" pos:end="79:44">(<argument pos:start="79:34" pos:end="79:39"><expr pos:start="79:34" pos:end="79:39"><name pos:start="79:34" pos:end="79:35">sz</name> <operator pos:start="79:37" pos:end="79:37">/</operator> <literal type="number" pos:start="79:39" pos:end="79:39">2</literal></expr></argument>, <argument pos:start="79:42" pos:end="79:43"><expr pos:start="79:42" pos:end="79:43"><name pos:start="79:42" pos:end="79:43">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="81:8" pos:end="81:63"><expr pos:start="81:8" pos:end="81:62"><call pos:start="81:8" pos:end="81:62"><name pos:start="81:8" pos:end="81:17">setsockopt</name><argument_list pos:start="81:18" pos:end="81:62">(<argument pos:start="81:19" pos:end="81:23"><expr pos:start="81:19" pos:end="81:23"><name pos:start="81:19" pos:end="81:23"><name pos:start="81:19" pos:end="81:20">sv</name><index pos:start="81:21" pos:end="81:23">[<expr pos:start="81:22" pos:end="81:22"><literal type="number" pos:start="81:22" pos:end="81:22">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="81:26" pos:end="81:35"><expr pos:start="81:26" pos:end="81:35"><name pos:start="81:26" pos:end="81:35">SOL_SOCKET</name></expr></argument>, <argument pos:start="81:38" pos:end="81:46"><expr pos:start="81:38" pos:end="81:46"><name pos:start="81:38" pos:end="81:46">SO_SNDBUF</name></expr></argument>, <argument pos:start="81:49" pos:end="81:50"><expr pos:start="81:49" pos:end="81:50"><operator pos:start="81:49" pos:end="81:49">&amp;</operator><name pos:start="81:50" pos:end="81:50">r</name></expr></argument>, <argument pos:start="81:53" pos:end="81:61"><expr pos:start="81:53" pos:end="81:61"><sizeof pos:start="81:53" pos:end="81:61">sizeof<argument_list pos:start="81:59" pos:end="81:61">(<argument pos:start="81:60" pos:end="81:60"><expr pos:start="81:60" pos:end="81:60"><name pos:start="81:60" pos:end="81:60">r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



       <for pos:start="85:8" pos:end="125:8">for <control pos:start="85:12" pos:end="85:32">(<init pos:start="85:13" pos:end="85:18"><expr pos:start="85:13" pos:end="85:17"><name pos:start="85:13" pos:end="85:13">i</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <literal type="number" pos:start="85:17" pos:end="85:17">0</literal></expr>;</init> <condition pos:start="85:20" pos:end="85:27"><expr pos:start="85:20" pos:end="85:26"><name pos:start="85:20" pos:end="85:20">i</name> <operator pos:start="85:22" pos:end="85:23">&lt;=</operator> <name pos:start="85:25" pos:end="85:26">sz</name></expr>;</condition> <incr pos:start="85:29" pos:end="85:31"><expr pos:start="85:29" pos:end="85:31"><operator pos:start="85:29" pos:end="85:30">++</operator><name pos:start="85:31" pos:end="85:31">i</name></expr></incr>)</control> <block pos:start="85:34" pos:end="125:8">{<block_content pos:start="87:12" pos:end="123:12">

           <for pos:start="87:12" pos:end="123:12">for <control pos:start="87:16" pos:end="87:36">(<init pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:21"><name pos:start="87:17" pos:end="87:17">j</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <name pos:start="87:21" pos:end="87:21">i</name></expr>;</init> <condition pos:start="87:24" pos:end="87:31"><expr pos:start="87:24" pos:end="87:30"><name pos:start="87:24" pos:end="87:24">j</name> <operator pos:start="87:26" pos:end="87:27">&lt;=</operator> <name pos:start="87:29" pos:end="87:30">sz</name></expr>;</condition> <incr pos:start="87:33" pos:end="87:35"><expr pos:start="87:33" pos:end="87:35"><operator pos:start="87:33" pos:end="87:34">++</operator><name pos:start="87:35" pos:end="87:35">j</name></expr></incr>)</control> <block pos:start="87:38" pos:end="123:12">{<block_content pos:start="89:16" pos:end="121:30">

               <expr_stmt pos:start="89:16" pos:end="89:21"><expr pos:start="89:16" pos:end="89:20"><name pos:start="89:16" pos:end="89:16">k</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <name pos:start="89:20" pos:end="89:20">i</name></expr>;</expr_stmt>

               <do pos:start="91:16" pos:end="121:30">do <block pos:start="91:19" pos:end="121:16">{<block_content pos:start="93:20" pos:end="119:20">

                   <expr_stmt pos:start="93:20" pos:end="93:59"><expr pos:start="93:20" pos:end="93:58"><name pos:start="93:20" pos:end="93:20">s</name> <operator pos:start="93:22" pos:end="93:22">=</operator> <call pos:start="93:24" pos:end="93:58"><name pos:start="93:24" pos:end="93:44">g_test_rand_int_range</name><argument_list pos:start="93:45" pos:end="93:58">(<argument pos:start="93:46" pos:end="93:46"><expr pos:start="93:46" pos:end="93:46"><literal type="number" pos:start="93:46" pos:end="93:46">0</literal></expr></argument>, <argument pos:start="93:49" pos:end="93:57"><expr pos:start="93:49" pos:end="93:57"><name pos:start="93:49" pos:end="93:49">j</name> <operator pos:start="93:51" pos:end="93:51">-</operator> <name pos:start="93:53" pos:end="93:53">k</name> <operator pos:start="93:55" pos:end="93:55">+</operator> <literal type="number" pos:start="93:57" pos:end="93:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="95:20" pos:end="95:56"><expr pos:start="95:20" pos:end="95:55"><name pos:start="95:20" pos:end="95:20">r</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <call pos:start="95:24" pos:end="95:55"><name pos:start="95:24" pos:end="95:31">iov_send</name><argument_list pos:start="95:32" pos:end="95:55">(<argument pos:start="95:33" pos:end="95:37"><expr pos:start="95:33" pos:end="95:37"><name pos:start="95:33" pos:end="95:37"><name pos:start="95:33" pos:end="95:34">sv</name><index pos:start="95:35" pos:end="95:37">[<expr pos:start="95:36" pos:end="95:36"><literal type="number" pos:start="95:36" pos:end="95:36">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="95:40" pos:end="95:42"><expr pos:start="95:40" pos:end="95:42"><name pos:start="95:40" pos:end="95:42">iov</name></expr></argument>, <argument pos:start="95:45" pos:end="95:48"><expr pos:start="95:45" pos:end="95:48"><name pos:start="95:45" pos:end="95:48">niov</name></expr></argument>, <argument pos:start="95:51" pos:end="95:51"><expr pos:start="95:51" pos:end="95:51"><name pos:start="95:51" pos:end="95:51">k</name></expr></argument>, <argument pos:start="95:54" pos:end="95:54"><expr pos:start="95:54" pos:end="95:54"><name pos:start="95:54" pos:end="95:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="97:20" pos:end="97:71"><expr pos:start="97:20" pos:end="97:70"><call pos:start="97:20" pos:end="97:70"><name pos:start="97:20" pos:end="97:27">g_assert</name><argument_list pos:start="97:28" pos:end="97:70">(<argument pos:start="97:29" pos:end="97:69"><expr pos:start="97:29" pos:end="97:69"><call pos:start="97:29" pos:end="97:64"><name pos:start="97:29" pos:end="97:34">memcmp</name><argument_list pos:start="97:35" pos:end="97:64">(<argument pos:start="97:36" pos:end="97:38"><expr pos:start="97:36" pos:end="97:38"><name pos:start="97:36" pos:end="97:38">iov</name></expr></argument>, <argument pos:start="97:41" pos:end="97:44"><expr pos:start="97:41" pos:end="97:44"><name pos:start="97:41" pos:end="97:44">siov</name></expr></argument>, <argument pos:start="97:47" pos:end="97:63"><expr pos:start="97:47" pos:end="97:63"><sizeof pos:start="97:47" pos:end="97:58">sizeof<argument_list pos:start="97:53" pos:end="97:58">(<argument pos:start="97:54" pos:end="97:57"><expr pos:start="97:54" pos:end="97:57"><operator pos:start="97:54" pos:end="97:54">*</operator><name pos:start="97:55" pos:end="97:57">iov</name></expr></argument>)</argument_list></sizeof><operator pos:start="97:59" pos:end="97:59">*</operator><name pos:start="97:60" pos:end="97:63">niov</name></expr></argument>)</argument_list></call> <operator pos:start="97:66" pos:end="97:67">==</operator> <literal type="number" pos:start="97:69" pos:end="97:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <if_stmt pos:start="99:20" pos:end="119:20"><if pos:start="99:20" pos:end="107:20">if <condition pos:start="99:23" pos:end="99:30">(<expr pos:start="99:24" pos:end="99:29"><name pos:start="99:24" pos:end="99:24">r</name> <operator pos:start="99:26" pos:end="99:27">&gt;=</operator> <literal type="number" pos:start="99:29" pos:end="99:29">0</literal></expr>)</condition> <block pos:start="99:32" pos:end="107:20">{<block_content pos:start="101:24" pos:end="105:60">

                       <expr_stmt pos:start="101:24" pos:end="101:30"><expr pos:start="101:24" pos:end="101:29"><name pos:start="101:24" pos:end="101:24">k</name> <operator pos:start="101:26" pos:end="101:27">+=</operator> <name pos:start="101:29" pos:end="101:29">r</name></expr>;</expr_stmt>

                       <expr_stmt pos:start="103:24" pos:end="103:30"><expr pos:start="103:24" pos:end="103:29"><name pos:start="103:24" pos:end="103:24">t</name> <operator pos:start="103:26" pos:end="103:27">+=</operator> <name pos:start="103:29" pos:end="103:29">r</name></expr>;</expr_stmt>

                       <expr_stmt pos:start="105:24" pos:end="105:60"><expr pos:start="105:24" pos:end="105:59"><call pos:start="105:24" pos:end="105:59"><name pos:start="105:24" pos:end="105:29">usleep</name><argument_list pos:start="105:30" pos:end="105:59">(<argument pos:start="105:31" pos:end="105:58"><expr pos:start="105:31" pos:end="105:58"><call pos:start="105:31" pos:end="105:58"><name pos:start="105:31" pos:end="105:51">g_test_rand_int_range</name><argument_list pos:start="105:52" pos:end="105:58">(<argument pos:start="105:53" pos:end="105:53"><expr pos:start="105:53" pos:end="105:53"><literal type="number" pos:start="105:53" pos:end="105:53">0</literal></expr></argument>, <argument pos:start="105:56" pos:end="105:57"><expr pos:start="105:56" pos:end="105:57"><literal type="number" pos:start="105:56" pos:end="105:57">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   </block_content>}</block></if> <if type="elseif" pos:start="107:22" pos:end="113:20">else if <condition pos:start="107:30" pos:end="107:46">(<expr pos:start="107:31" pos:end="107:45"><name pos:start="107:31" pos:end="107:35">errno</name> <operator pos:start="107:37" pos:end="107:38">==</operator> <name pos:start="107:40" pos:end="107:45">EAGAIN</name></expr>)</condition> <block pos:start="107:48" pos:end="113:20">{<block_content pos:start="109:24" pos:end="111:32">

                       <expr_stmt pos:start="109:24" pos:end="109:63"><expr pos:start="109:24" pos:end="109:62"><call pos:start="109:24" pos:end="109:62"><name pos:start="109:24" pos:end="109:29">select</name><argument_list pos:start="109:30" pos:end="109:62">(<argument pos:start="109:31" pos:end="109:37"><expr pos:start="109:31" pos:end="109:37"><name pos:start="109:31" pos:end="109:35"><name pos:start="109:31" pos:end="109:32">sv</name><index pos:start="109:33" pos:end="109:35">[<expr pos:start="109:34" pos:end="109:34"><literal type="number" pos:start="109:34" pos:end="109:34">1</literal></expr>]</index></name><operator pos:start="109:36" pos:end="109:36">+</operator><literal type="number" pos:start="109:37" pos:end="109:37">1</literal></expr></argument>, <argument pos:start="109:40" pos:end="109:43"><expr pos:start="109:40" pos:end="109:43"><name pos:start="109:40" pos:end="109:43">NULL</name></expr></argument>, <argument pos:start="109:46" pos:end="109:49"><expr pos:start="109:46" pos:end="109:49"><operator pos:start="109:46" pos:end="109:46">&amp;</operator><name pos:start="109:47" pos:end="109:49">fds</name></expr></argument>, <argument pos:start="109:52" pos:end="109:55"><expr pos:start="109:52" pos:end="109:55"><name pos:start="109:52" pos:end="109:55">NULL</name></expr></argument>, <argument pos:start="109:58" pos:end="109:61"><expr pos:start="109:58" pos:end="109:61"><name pos:start="109:58" pos:end="109:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                       <continue pos:start="111:24" pos:end="111:32">continue;</continue>

                   </block_content>}</block></if> <else pos:start="113:22" pos:end="119:20">else <block pos:start="113:27" pos:end="119:20">{<block_content pos:start="115:24" pos:end="117:31">

                       <expr_stmt pos:start="115:24" pos:end="115:38"><expr pos:start="115:24" pos:end="115:37"><call pos:start="115:24" pos:end="115:37"><name pos:start="115:24" pos:end="115:29">perror</name><argument_list pos:start="115:30" pos:end="115:37">(<argument pos:start="115:31" pos:end="115:36"><expr pos:start="115:31" pos:end="115:36"><literal type="string" pos:start="115:31" pos:end="115:36">"send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                       <expr_stmt pos:start="117:24" pos:end="117:31"><expr pos:start="117:24" pos:end="117:30"><call pos:start="117:24" pos:end="117:30"><name pos:start="117:24" pos:end="117:27">exit</name><argument_list pos:start="117:28" pos:end="117:30">(<argument pos:start="117:29" pos:end="117:29"><expr pos:start="117:29" pos:end="117:29"><literal type="number" pos:start="117:29" pos:end="117:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   </block_content>}</block></else></if_stmt>

               </block_content>}</block> while<condition pos:start="121:23" pos:end="121:29">(<expr pos:start="121:24" pos:end="121:28"><name pos:start="121:24" pos:end="121:24">k</name> <operator pos:start="121:26" pos:end="121:26">&lt;</operator> <name pos:start="121:28" pos:end="121:28">j</name></expr>)</condition>;</do>

           </block_content>}</block></for>

       </block_content>}</block></for>




       <expr_stmt pos:start="130:8" pos:end="130:15"><expr pos:start="130:8" pos:end="130:14"><call pos:start="130:8" pos:end="130:14"><name pos:start="130:8" pos:end="130:11">exit</name><argument_list pos:start="130:12" pos:end="130:14">(<argument pos:start="130:13" pos:end="130:13"><expr pos:start="130:13" pos:end="130:13"><literal type="number" pos:start="130:13" pos:end="130:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="134:7" pos:end="214:0">else <block pos:start="134:12" pos:end="214:0">{<block_content pos:start="140:8" pos:end="204:9">

       <comment type="block" pos:start="136:8" pos:end="136:30">/* reader &amp; verifier */</comment>



       <expr_stmt pos:start="140:8" pos:end="140:20"><expr pos:start="140:8" pos:end="140:19"><call pos:start="140:8" pos:end="140:19"><name pos:start="140:8" pos:end="140:12">close</name><argument_list pos:start="140:13" pos:end="140:19">(<argument pos:start="140:14" pos:end="140:18"><expr pos:start="140:14" pos:end="140:18"><name pos:start="140:14" pos:end="140:18"><name pos:start="140:14" pos:end="140:15">sv</name><index pos:start="140:16" pos:end="140:18">[<expr pos:start="140:17" pos:end="140:17"><literal type="number" pos:start="140:17" pos:end="140:17">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="142:8" pos:end="142:27"><expr pos:start="142:8" pos:end="142:26"><call pos:start="142:8" pos:end="142:26"><name pos:start="142:8" pos:end="142:13">FD_SET</name><argument_list pos:start="142:14" pos:end="142:26">(<argument pos:start="142:15" pos:end="142:19"><expr pos:start="142:15" pos:end="142:19"><name pos:start="142:15" pos:end="142:19"><name pos:start="142:15" pos:end="142:16">sv</name><index pos:start="142:17" pos:end="142:19">[<expr pos:start="142:18" pos:end="142:18"><literal type="number" pos:start="142:18" pos:end="142:18">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="142:22" pos:end="142:25"><expr pos:start="142:22" pos:end="142:25"><operator pos:start="142:22" pos:end="142:22">&amp;</operator><name pos:start="142:23" pos:end="142:25">fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="144:8" pos:end="144:48"><expr pos:start="144:8" pos:end="144:47"><call pos:start="144:8" pos:end="144:47"><name pos:start="144:8" pos:end="144:12">fcntl</name><argument_list pos:start="144:13" pos:end="144:47">(<argument pos:start="144:14" pos:end="144:18"><expr pos:start="144:14" pos:end="144:18"><name pos:start="144:14" pos:end="144:18"><name pos:start="144:14" pos:end="144:15">sv</name><index pos:start="144:16" pos:end="144:18">[<expr pos:start="144:17" pos:end="144:17"><literal type="number" pos:start="144:17" pos:end="144:17">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="144:21" pos:end="144:27"><expr pos:start="144:21" pos:end="144:27"><name pos:start="144:21" pos:end="144:27">F_SETFL</name></expr></argument>, <argument pos:start="144:30" pos:end="144:46"><expr pos:start="144:30" pos:end="144:46"><name pos:start="144:30" pos:end="144:35">O_RDWR</name><operator pos:start="144:36" pos:end="144:36">|</operator><name pos:start="144:37" pos:end="144:46">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="146:8" pos:end="146:45"><expr pos:start="146:8" pos:end="146:44"><name pos:start="146:8" pos:end="146:8">r</name> <operator pos:start="146:10" pos:end="146:10">=</operator> <call pos:start="146:12" pos:end="146:44"><name pos:start="146:12" pos:end="146:32">g_test_rand_int_range</name><argument_list pos:start="146:33" pos:end="146:44">(<argument pos:start="146:34" pos:end="146:39"><expr pos:start="146:34" pos:end="146:39"><name pos:start="146:34" pos:end="146:35">sz</name> <operator pos:start="146:37" pos:end="146:37">/</operator> <literal type="number" pos:start="146:39" pos:end="146:39">2</literal></expr></argument>, <argument pos:start="146:42" pos:end="146:43"><expr pos:start="146:42" pos:end="146:43"><name pos:start="146:42" pos:end="146:43">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="148:8" pos:end="148:63"><expr pos:start="148:8" pos:end="148:62"><call pos:start="148:8" pos:end="148:62"><name pos:start="148:8" pos:end="148:17">setsockopt</name><argument_list pos:start="148:18" pos:end="148:62">(<argument pos:start="148:19" pos:end="148:23"><expr pos:start="148:19" pos:end="148:23"><name pos:start="148:19" pos:end="148:23"><name pos:start="148:19" pos:end="148:20">sv</name><index pos:start="148:21" pos:end="148:23">[<expr pos:start="148:22" pos:end="148:22"><literal type="number" pos:start="148:22" pos:end="148:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="148:26" pos:end="148:35"><expr pos:start="148:26" pos:end="148:35"><name pos:start="148:26" pos:end="148:35">SOL_SOCKET</name></expr></argument>, <argument pos:start="148:38" pos:end="148:46"><expr pos:start="148:38" pos:end="148:46"><name pos:start="148:38" pos:end="148:46">SO_RCVBUF</name></expr></argument>, <argument pos:start="148:49" pos:end="148:50"><expr pos:start="148:49" pos:end="148:50"><operator pos:start="148:49" pos:end="148:49">&amp;</operator><name pos:start="148:50" pos:end="148:50">r</name></expr></argument>, <argument pos:start="148:53" pos:end="148:61"><expr pos:start="148:53" pos:end="148:61"><sizeof pos:start="148:53" pos:end="148:61">sizeof<argument_list pos:start="148:59" pos:end="148:61">(<argument pos:start="148:60" pos:end="148:60"><expr pos:start="148:60" pos:end="148:60"><name pos:start="148:60" pos:end="148:60">r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="150:8" pos:end="150:22"><expr pos:start="150:8" pos:end="150:21"><call pos:start="150:8" pos:end="150:21"><name pos:start="150:8" pos:end="150:13">usleep</name><argument_list pos:start="150:14" pos:end="150:21">(<argument pos:start="150:15" pos:end="150:20"><expr pos:start="150:15" pos:end="150:20"><literal type="number" pos:start="150:15" pos:end="150:20">500000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



       <for pos:start="154:8" pos:end="204:9">for <control pos:start="154:12" pos:end="154:32">(<init pos:start="154:13" pos:end="154:18"><expr pos:start="154:13" pos:end="154:17"><name pos:start="154:13" pos:end="154:13">i</name> <operator pos:start="154:15" pos:end="154:15">=</operator> <literal type="number" pos:start="154:17" pos:end="154:17">0</literal></expr>;</init> <condition pos:start="154:20" pos:end="154:27"><expr pos:start="154:20" pos:end="154:26"><name pos:start="154:20" pos:end="154:20">i</name> <operator pos:start="154:22" pos:end="154:23">&lt;=</operator> <name pos:start="154:25" pos:end="154:26">sz</name></expr>;</condition> <incr pos:start="154:29" pos:end="154:31"><expr pos:start="154:29" pos:end="154:31"><operator pos:start="154:29" pos:end="154:30">++</operator><name pos:start="154:31" pos:end="154:31">i</name></expr></incr>)</control> <block pos:start="154:34" pos:end="204:9">{<block_content pos:start="156:12" pos:end="202:12">

           <for pos:start="156:12" pos:end="202:12">for <control pos:start="156:16" pos:end="156:36">(<init pos:start="156:17" pos:end="156:22"><expr pos:start="156:17" pos:end="156:21"><name pos:start="156:17" pos:end="156:17">j</name> <operator pos:start="156:19" pos:end="156:19">=</operator> <name pos:start="156:21" pos:end="156:21">i</name></expr>;</init> <condition pos:start="156:24" pos:end="156:31"><expr pos:start="156:24" pos:end="156:30"><name pos:start="156:24" pos:end="156:24">j</name> <operator pos:start="156:26" pos:end="156:27">&lt;=</operator> <name pos:start="156:29" pos:end="156:30">sz</name></expr>;</condition> <incr pos:start="156:33" pos:end="156:35"><expr pos:start="156:33" pos:end="156:35"><operator pos:start="156:33" pos:end="156:34">++</operator><name pos:start="156:35" pos:end="156:35">j</name></expr></incr>)</control> <block pos:start="156:38" pos:end="202:12">{<block_content pos:start="158:16" pos:end="200:51">

               <expr_stmt pos:start="158:16" pos:end="158:21"><expr pos:start="158:16" pos:end="158:20"><name pos:start="158:16" pos:end="158:16">k</name> <operator pos:start="158:18" pos:end="158:18">=</operator> <name pos:start="158:20" pos:end="158:20">i</name></expr>;</expr_stmt>

               <expr_stmt pos:start="160:16" pos:end="160:50"><expr pos:start="160:16" pos:end="160:49"><call pos:start="160:16" pos:end="160:49"><name pos:start="160:16" pos:end="160:25">iov_memset</name><argument_list pos:start="160:26" pos:end="160:49">(<argument pos:start="160:27" pos:end="160:29"><expr pos:start="160:27" pos:end="160:29"><name pos:start="160:27" pos:end="160:29">iov</name></expr></argument>, <argument pos:start="160:32" pos:end="160:35"><expr pos:start="160:32" pos:end="160:35"><name pos:start="160:32" pos:end="160:35">niov</name></expr></argument>, <argument pos:start="160:38" pos:end="160:38"><expr pos:start="160:38" pos:end="160:38"><literal type="number" pos:start="160:38" pos:end="160:38">0</literal></expr></argument>, <argument pos:start="160:41" pos:end="160:44"><expr pos:start="160:41" pos:end="160:44"><literal type="number" pos:start="160:41" pos:end="160:44">0xff</literal></expr></argument>, <argument pos:start="160:47" pos:end="160:48"><expr pos:start="160:47" pos:end="160:48"><operator pos:start="160:47" pos:end="160:47">-</operator><literal type="number" pos:start="160:48" pos:end="160:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <do pos:start="162:16" pos:end="198:30">do <block pos:start="162:19" pos:end="198:16">{<block_content pos:start="164:20" pos:end="196:20">

                   <expr_stmt pos:start="164:20" pos:end="164:59"><expr pos:start="164:20" pos:end="164:58"><name pos:start="164:20" pos:end="164:20">s</name> <operator pos:start="164:22" pos:end="164:22">=</operator> <call pos:start="164:24" pos:end="164:58"><name pos:start="164:24" pos:end="164:44">g_test_rand_int_range</name><argument_list pos:start="164:45" pos:end="164:58">(<argument pos:start="164:46" pos:end="164:46"><expr pos:start="164:46" pos:end="164:46"><literal type="number" pos:start="164:46" pos:end="164:46">0</literal></expr></argument>, <argument pos:start="164:49" pos:end="164:57"><expr pos:start="164:49" pos:end="164:57"><name pos:start="164:49" pos:end="164:49">j</name> <operator pos:start="164:51" pos:end="164:51">-</operator> <name pos:start="164:53" pos:end="164:53">k</name> <operator pos:start="164:55" pos:end="164:55">+</operator> <literal type="number" pos:start="164:57" pos:end="164:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="166:20" pos:end="166:56"><expr pos:start="166:20" pos:end="166:55"><name pos:start="166:20" pos:end="166:20">r</name> <operator pos:start="166:22" pos:end="166:22">=</operator> <call pos:start="166:24" pos:end="166:55"><name pos:start="166:24" pos:end="166:31">iov_recv</name><argument_list pos:start="166:32" pos:end="166:55">(<argument pos:start="166:33" pos:end="166:37"><expr pos:start="166:33" pos:end="166:37"><name pos:start="166:33" pos:end="166:37"><name pos:start="166:33" pos:end="166:34">sv</name><index pos:start="166:35" pos:end="166:37">[<expr pos:start="166:36" pos:end="166:36"><literal type="number" pos:start="166:36" pos:end="166:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="166:40" pos:end="166:42"><expr pos:start="166:40" pos:end="166:42"><name pos:start="166:40" pos:end="166:42">iov</name></expr></argument>, <argument pos:start="166:45" pos:end="166:48"><expr pos:start="166:45" pos:end="166:48"><name pos:start="166:45" pos:end="166:48">niov</name></expr></argument>, <argument pos:start="166:51" pos:end="166:51"><expr pos:start="166:51" pos:end="166:51"><name pos:start="166:51" pos:end="166:51">k</name></expr></argument>, <argument pos:start="166:54" pos:end="166:54"><expr pos:start="166:54" pos:end="166:54"><name pos:start="166:54" pos:end="166:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="168:20" pos:end="168:71"><expr pos:start="168:20" pos:end="168:70"><call pos:start="168:20" pos:end="168:70"><name pos:start="168:20" pos:end="168:27">g_assert</name><argument_list pos:start="168:28" pos:end="168:70">(<argument pos:start="168:29" pos:end="168:69"><expr pos:start="168:29" pos:end="168:69"><call pos:start="168:29" pos:end="168:64"><name pos:start="168:29" pos:end="168:34">memcmp</name><argument_list pos:start="168:35" pos:end="168:64">(<argument pos:start="168:36" pos:end="168:38"><expr pos:start="168:36" pos:end="168:38"><name pos:start="168:36" pos:end="168:38">iov</name></expr></argument>, <argument pos:start="168:41" pos:end="168:44"><expr pos:start="168:41" pos:end="168:44"><name pos:start="168:41" pos:end="168:44">siov</name></expr></argument>, <argument pos:start="168:47" pos:end="168:63"><expr pos:start="168:47" pos:end="168:63"><sizeof pos:start="168:47" pos:end="168:58">sizeof<argument_list pos:start="168:53" pos:end="168:58">(<argument pos:start="168:54" pos:end="168:57"><expr pos:start="168:54" pos:end="168:57"><operator pos:start="168:54" pos:end="168:54">*</operator><name pos:start="168:55" pos:end="168:57">iov</name></expr></argument>)</argument_list></sizeof><operator pos:start="168:59" pos:end="168:59">*</operator><name pos:start="168:60" pos:end="168:63">niov</name></expr></argument>)</argument_list></call> <operator pos:start="168:66" pos:end="168:67">==</operator> <literal type="number" pos:start="168:69" pos:end="168:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <if_stmt pos:start="170:20" pos:end="196:20"><if pos:start="170:20" pos:end="176:20">if <condition pos:start="170:23" pos:end="170:29">(<expr pos:start="170:24" pos:end="170:28"><name pos:start="170:24" pos:end="170:24">r</name> <operator pos:start="170:26" pos:end="170:26">&gt;</operator> <literal type="number" pos:start="170:28" pos:end="170:28">0</literal></expr>)</condition> <block pos:start="170:31" pos:end="176:20">{<block_content pos:start="172:24" pos:end="174:30">

                       <expr_stmt pos:start="172:24" pos:end="172:30"><expr pos:start="172:24" pos:end="172:29"><name pos:start="172:24" pos:end="172:24">k</name> <operator pos:start="172:26" pos:end="172:27">+=</operator> <name pos:start="172:29" pos:end="172:29">r</name></expr>;</expr_stmt>

                       <expr_stmt pos:start="174:24" pos:end="174:30"><expr pos:start="174:24" pos:end="174:29"><name pos:start="174:24" pos:end="174:24">t</name> <operator pos:start="174:26" pos:end="174:27">+=</operator> <name pos:start="174:29" pos:end="174:29">r</name></expr>;</expr_stmt>

                   </block_content>}</block></if> <if type="elseif" pos:start="176:22" pos:end="184:20">else if <condition pos:start="176:30" pos:end="176:33">(<expr pos:start="176:31" pos:end="176:32"><operator pos:start="176:31" pos:end="176:31">!</operator><name pos:start="176:32" pos:end="176:32">r</name></expr>)</condition> <block pos:start="176:35" pos:end="184:20">{<block_content pos:start="178:24" pos:end="182:24">

                       <if_stmt pos:start="178:24" pos:end="182:24"><if pos:start="178:24" pos:end="182:24">if <condition pos:start="178:27" pos:end="178:29">(<expr pos:start="178:28" pos:end="178:28"><name pos:start="178:28" pos:end="178:28">s</name></expr>)</condition> <block pos:start="178:31" pos:end="182:24">{<block_content pos:start="180:28" pos:end="180:33">

                           <break pos:start="180:28" pos:end="180:33">break;</break>

                       </block_content>}</block></if></if_stmt>

                   </block_content>}</block></if> <if type="elseif" pos:start="184:22" pos:end="190:20">else if <condition pos:start="184:30" pos:end="184:46">(<expr pos:start="184:31" pos:end="184:45"><name pos:start="184:31" pos:end="184:35">errno</name> <operator pos:start="184:37" pos:end="184:38">==</operator> <name pos:start="184:40" pos:end="184:45">EAGAIN</name></expr>)</condition> <block pos:start="184:48" pos:end="190:20">{<block_content pos:start="186:24" pos:end="188:32">

                       <expr_stmt pos:start="186:24" pos:end="186:63"><expr pos:start="186:24" pos:end="186:62"><call pos:start="186:24" pos:end="186:62"><name pos:start="186:24" pos:end="186:29">select</name><argument_list pos:start="186:30" pos:end="186:62">(<argument pos:start="186:31" pos:end="186:37"><expr pos:start="186:31" pos:end="186:37"><name pos:start="186:31" pos:end="186:35"><name pos:start="186:31" pos:end="186:32">sv</name><index pos:start="186:33" pos:end="186:35">[<expr pos:start="186:34" pos:end="186:34"><literal type="number" pos:start="186:34" pos:end="186:34">0</literal></expr>]</index></name><operator pos:start="186:36" pos:end="186:36">+</operator><literal type="number" pos:start="186:37" pos:end="186:37">1</literal></expr></argument>, <argument pos:start="186:40" pos:end="186:43"><expr pos:start="186:40" pos:end="186:43"><operator pos:start="186:40" pos:end="186:40">&amp;</operator><name pos:start="186:41" pos:end="186:43">fds</name></expr></argument>, <argument pos:start="186:46" pos:end="186:49"><expr pos:start="186:46" pos:end="186:49"><name pos:start="186:46" pos:end="186:49">NULL</name></expr></argument>, <argument pos:start="186:52" pos:end="186:55"><expr pos:start="186:52" pos:end="186:55"><name pos:start="186:52" pos:end="186:55">NULL</name></expr></argument>, <argument pos:start="186:58" pos:end="186:61"><expr pos:start="186:58" pos:end="186:61"><name pos:start="186:58" pos:end="186:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                       <continue pos:start="188:24" pos:end="188:32">continue;</continue>

                   </block_content>}</block></if> <else pos:start="190:22" pos:end="196:20">else <block pos:start="190:27" pos:end="196:20">{<block_content pos:start="192:24" pos:end="194:31">

                       <expr_stmt pos:start="192:24" pos:end="192:38"><expr pos:start="192:24" pos:end="192:37"><call pos:start="192:24" pos:end="192:37"><name pos:start="192:24" pos:end="192:29">perror</name><argument_list pos:start="192:30" pos:end="192:37">(<argument pos:start="192:31" pos:end="192:36"><expr pos:start="192:31" pos:end="192:36"><literal type="string" pos:start="192:31" pos:end="192:36">"recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                       <expr_stmt pos:start="194:24" pos:end="194:31"><expr pos:start="194:24" pos:end="194:30"><call pos:start="194:24" pos:end="194:30"><name pos:start="194:24" pos:end="194:27">exit</name><argument_list pos:start="194:28" pos:end="194:30">(<argument pos:start="194:29" pos:end="194:29"><expr pos:start="194:29" pos:end="194:29"><literal type="number" pos:start="194:29" pos:end="194:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   </block_content>}</block></else></if_stmt>

               </block_content>}</block> while<condition pos:start="198:23" pos:end="198:29">(<expr pos:start="198:24" pos:end="198:28"><name pos:start="198:24" pos:end="198:24">k</name> <operator pos:start="198:26" pos:end="198:26">&lt;</operator> <name pos:start="198:28" pos:end="198:28">j</name></expr>)</condition>;</do>

               <expr_stmt pos:start="200:16" pos:end="200:51"><expr pos:start="200:16" pos:end="200:50"><call pos:start="200:16" pos:end="200:50"><name pos:start="200:16" pos:end="200:29">test_iov_bytes</name><argument_list pos:start="200:30" pos:end="200:50">(<argument pos:start="200:31" pos:end="200:33"><expr pos:start="200:31" pos:end="200:33"><name pos:start="200:31" pos:end="200:33">iov</name></expr></argument>, <argument pos:start="200:36" pos:end="200:39"><expr pos:start="200:36" pos:end="200:39"><name pos:start="200:36" pos:end="200:39">niov</name></expr></argument>, <argument pos:start="200:42" pos:end="200:42"><expr pos:start="200:42" pos:end="200:42"><name pos:start="200:42" pos:end="200:42">i</name></expr></argument>, <argument pos:start="200:45" pos:end="200:49"><expr pos:start="200:45" pos:end="200:49"><name pos:start="200:45" pos:end="200:45">j</name> <operator pos:start="200:47" pos:end="200:47">-</operator> <name pos:start="200:49" pos:end="200:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           </block_content>}</block></for>

        </block_content>}</block></for>






     </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function></unit>
