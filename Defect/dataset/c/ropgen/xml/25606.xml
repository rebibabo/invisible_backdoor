<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25606.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:43">bdrv_aligned_preadv</name><parameter_list pos:start="1:44" pos:end="5:49">(<parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:64"><name pos:start="1:45" pos:end="1:60">BlockDriverState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:27"><decl pos:start="3:5" pos:end="3:27"><type pos:start="3:5" pos:end="3:27"><name pos:start="3:5" pos:end="3:22">BdrvTrackedRequest</name> <modifier pos:start="3:24" pos:end="3:24">*</modifier></type><name pos:start="3:25" pos:end="3:27">req</name></decl></parameter>, <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:36">int64_t</name></type> <name pos:start="3:38" pos:end="3:43">offset</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:63"><decl pos:start="3:46" pos:end="3:63"><type pos:start="3:46" pos:end="3:63"><name pos:start="3:46" pos:end="3:53">unsigned</name> <name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:63">bytes</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:17">align</name></decl></parameter>, <parameter pos:start="5:20" pos:end="5:37"><decl pos:start="5:20" pos:end="5:37"><type pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:31">QEMUIOVector</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:37">qiov</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:48"><decl pos:start="5:40" pos:end="5:48"><type pos:start="5:40" pos:end="5:48"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:48">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="147:1">{<block_content pos:start="9:5" pos:end="145:15">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">BlockDriver</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">drv</name> <init pos:start="9:22" pos:end="9:30">= <expr pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:22">sector_num</name> <init pos:start="15:24" pos:end="15:51">= <expr pos:start="15:26" pos:end="15:51"><name pos:start="15:26" pos:end="15:31">offset</name> <operator pos:start="15:33" pos:end="15:34">&gt;&gt;</operator> <name pos:start="15:36" pos:end="15:51">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:55"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:27">nb_sectors</name> <init pos:start="17:29" pos:end="17:55">= <expr pos:start="17:31" pos:end="17:55"><name pos:start="17:31" pos:end="17:35">bytes</name> <operator pos:start="17:37" pos:end="17:38">&gt;&gt;</operator> <name pos:start="17:40" pos:end="17:55">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><call pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:50">(<argument pos:start="21:12" pos:end="21:49"><expr pos:start="21:12" pos:end="21:49"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:18">offset</name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:38">BDRV_SECTOR_SIZE</name> <operator pos:start="21:40" pos:end="21:40">-</operator> <literal type="number" pos:start="21:42" pos:end="21:42">1</literal><operator pos:start="21:43" pos:end="21:43">)</operator><operator pos:start="21:44" pos:end="21:44">)</operator> <operator pos:start="21:46" pos:end="21:47">==</operator> <literal type="number" pos:start="21:49" pos:end="21:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><call pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:49">(<argument pos:start="23:12" pos:end="23:48"><expr pos:start="23:12" pos:end="23:48"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:17">bytes</name> <operator pos:start="23:19" pos:end="23:19">&amp;</operator> <operator pos:start="23:21" pos:end="23:21">(</operator><name pos:start="23:22" pos:end="23:37">BDRV_SECTOR_SIZE</name> <operator pos:start="23:39" pos:end="23:39">-</operator> <literal type="number" pos:start="23:41" pos:end="23:41">1</literal><operator pos:start="23:42" pos:end="23:42">)</operator><operator pos:start="23:43" pos:end="23:43">)</operator> <operator pos:start="23:45" pos:end="23:46">==</operator> <literal type="number" pos:start="23:48" pos:end="23:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:58">/* Handle Copy on Read and associated serialisation */</comment>

    <if_stmt pos:start="29:5" pos:end="43:5"><if pos:start="29:5" pos:end="43:5">if <condition pos:start="29:8" pos:end="29:38">(<expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:13">flags</name> <operator pos:start="29:15" pos:end="29:15">&amp;</operator> <name pos:start="29:17" pos:end="29:37">BDRV_REQ_COPY_ON_READ</name></expr>)</condition> <block pos:start="29:40" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:65">

        <comment type="block" pos:start="31:9" pos:end="39:58">/* If we touch the same cluster it counts as an overlap.  This

         * guarantees that allocating writes will be serialized and not race

         * with each other for the same cluster.  For example, in copy-on-read

         * it ensures that the CoR read and write operations are atomic and

         * guest writes cannot interleave between them. */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:65"><expr pos:start="41:9" pos:end="41:64"><call pos:start="41:9" pos:end="41:64"><name pos:start="41:9" pos:end="41:32">mark_request_serialising</name><argument_list pos:start="41:33" pos:end="41:64">(<argument pos:start="41:34" pos:end="41:36"><expr pos:start="41:34" pos:end="41:36"><name pos:start="41:34" pos:end="41:36">req</name></expr></argument>, <argument pos:start="41:39" pos:end="41:63"><expr pos:start="41:39" pos:end="41:63"><call pos:start="41:39" pos:end="41:63"><name pos:start="41:39" pos:end="41:59">bdrv_get_cluster_size</name><argument_list pos:start="41:60" pos:end="41:63">(<argument pos:start="41:61" pos:end="41:62"><expr pos:start="41:61" pos:end="41:62"><name pos:start="41:61" pos:end="41:62">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><call pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:29">wait_serialising_requests</name><argument_list pos:start="47:30" pos:end="47:34">(<argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><name pos:start="47:31" pos:end="47:33">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="75:5"><if pos:start="51:5" pos:end="75:5">if <condition pos:start="51:8" pos:end="51:38">(<expr pos:start="51:9" pos:end="51:37"><name pos:start="51:9" pos:end="51:13">flags</name> <operator pos:start="51:15" pos:end="51:15">&amp;</operator> <name pos:start="51:17" pos:end="51:37">BDRV_REQ_COPY_ON_READ</name></expr>)</condition> <block pos:start="51:40" pos:end="75:5">{<block_content pos:start="53:9" pos:end="73:9">

        <decl_stmt pos:start="53:9" pos:end="53:17"><decl pos:start="53:9" pos:end="53:16"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:16">pnum</name></decl>;</decl_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:67"><expr pos:start="57:9" pos:end="57:66"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:66"><name pos:start="57:15" pos:end="57:31">bdrv_is_allocated</name><argument_list pos:start="57:32" pos:end="57:66">(<argument pos:start="57:33" pos:end="57:34"><expr pos:start="57:33" pos:end="57:34"><name pos:start="57:33" pos:end="57:34">bs</name></expr></argument>, <argument pos:start="57:37" pos:end="57:46"><expr pos:start="57:37" pos:end="57:46"><name pos:start="57:37" pos:end="57:46">sector_num</name></expr></argument>, <argument pos:start="57:49" pos:end="57:58"><expr pos:start="57:49" pos:end="57:58"><name pos:start="57:49" pos:end="57:58">nb_sectors</name></expr></argument>, <argument pos:start="57:61" pos:end="57:65"><expr pos:start="57:61" pos:end="57:65"><operator pos:start="57:61" pos:end="57:61">&amp;</operator><name pos:start="57:62" pos:end="57:65">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:20">(<expr pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">&lt;</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>)</condition> <block pos:start="59:22" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:21">

            <goto pos:start="61:13" pos:end="61:21">goto <name pos:start="61:18" pos:end="61:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:39">(<expr pos:start="67:13" pos:end="67:38"><operator pos:start="67:13" pos:end="67:13">!</operator><name pos:start="67:14" pos:end="67:16">ret</name> <operator pos:start="67:18" pos:end="67:19">||</operator> <name pos:start="67:21" pos:end="67:24">pnum</name> <operator pos:start="67:26" pos:end="67:27">!=</operator> <name pos:start="67:29" pos:end="67:38">nb_sectors</name></expr>)</condition> <block pos:start="67:41" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:21">

            <expr_stmt pos:start="69:13" pos:end="69:77"><expr pos:start="69:13" pos:end="69:76"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="69:76"><name pos:start="69:19" pos:end="69:42">bdrv_co_do_copy_on_readv</name><argument_list pos:start="69:43" pos:end="69:76">(<argument pos:start="69:44" pos:end="69:45"><expr pos:start="69:44" pos:end="69:45"><name pos:start="69:44" pos:end="69:45">bs</name></expr></argument>, <argument pos:start="69:48" pos:end="69:57"><expr pos:start="69:48" pos:end="69:57"><name pos:start="69:48" pos:end="69:57">sector_num</name></expr></argument>, <argument pos:start="69:60" pos:end="69:69"><expr pos:start="69:60" pos:end="69:69"><name pos:start="69:60" pos:end="69:69">nb_sectors</name></expr></argument>, <argument pos:start="69:72" pos:end="69:75"><expr pos:start="69:72" pos:end="69:75"><name pos:start="69:72" pos:end="69:75">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="71:13" pos:end="71:21">goto <name pos:start="71:18" pos:end="71:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:48">/* Forward the request to the BlockDriver */</comment>

    <if_stmt pos:start="81:5" pos:end="139:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:47">(<expr pos:start="81:9" pos:end="81:46"><operator pos:start="81:9" pos:end="81:9">!</operator><operator pos:start="81:10" pos:end="81:10">(</operator><name pos:start="81:11" pos:end="81:29"><name pos:start="81:11" pos:end="81:12">bs</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:29">zero_beyond_eof</name></name> <operator pos:start="81:31" pos:end="81:32">&amp;&amp;</operator> <name pos:start="81:34" pos:end="81:45"><name pos:start="81:34" pos:end="81:35">bs</name><operator pos:start="81:36" pos:end="81:37">-&gt;</operator><name pos:start="81:38" pos:end="81:45">growable</name></name><operator pos:start="81:46" pos:end="81:46">)</operator></expr>)</condition> <block pos:start="81:49" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:67">

        <expr_stmt pos:start="83:9" pos:end="83:67"><expr pos:start="83:9" pos:end="83:66"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:66"><name pos:start="83:15" pos:end="83:32"><name pos:start="83:15" pos:end="83:17">drv</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:32">bdrv_co_readv</name></name><argument_list pos:start="83:33" pos:end="83:66">(<argument pos:start="83:34" pos:end="83:35"><expr pos:start="83:34" pos:end="83:35"><name pos:start="83:34" pos:end="83:35">bs</name></expr></argument>, <argument pos:start="83:38" pos:end="83:47"><expr pos:start="83:38" pos:end="83:47"><name pos:start="83:38" pos:end="83:47">sector_num</name></expr></argument>, <argument pos:start="83:50" pos:end="83:59"><expr pos:start="83:50" pos:end="83:59"><name pos:start="83:50" pos:end="83:59">nb_sectors</name></expr></argument>, <argument pos:start="83:62" pos:end="83:65"><expr pos:start="83:62" pos:end="83:65"><name pos:start="83:62" pos:end="83:65">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="139:5">else <block pos:start="85:12" pos:end="139:5">{<block_content pos:start="89:9" pos:end="137:9">

        <comment type="block" pos:start="87:9" pos:end="87:52">/* Read zeros after EOF of growable BDSes */</comment>

        <decl_stmt pos:start="89:9" pos:end="89:51"><decl pos:start="89:9" pos:end="89:19"><type pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:15">int64_t</name></type> <name pos:start="89:17" pos:end="89:19">len</name></decl>, <decl pos:start="89:22" pos:end="89:34"><type ref="prev" pos:start="89:9" pos:end="89:15"/><name pos:start="89:22" pos:end="89:34">total_sectors</name></decl>, <decl pos:start="89:37" pos:end="89:50"><type ref="prev" pos:start="89:9" pos:end="89:15"/><name pos:start="89:37" pos:end="89:50">max_nb_sectors</name></decl>;</decl_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:33"><expr pos:start="93:9" pos:end="93:32"><name pos:start="93:9" pos:end="93:11">len</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:32"><name pos:start="93:15" pos:end="93:28">bdrv_getlength</name><argument_list pos:start="93:29" pos:end="93:32">(<argument pos:start="93:30" pos:end="93:31"><expr pos:start="93:30" pos:end="93:31"><name pos:start="93:30" pos:end="93:31">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:20">(<expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:15">len</name> <operator pos:start="95:17" pos:end="95:17">&lt;</operator> <literal type="number" pos:start="95:19" pos:end="95:19">0</literal></expr>)</condition> <block pos:start="95:22" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:21">

            <expr_stmt pos:start="97:13" pos:end="97:22"><expr pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <name pos:start="97:19" pos:end="97:21">len</name></expr>;</expr_stmt>

            <goto pos:start="99:13" pos:end="99:21">goto <name pos:start="99:18" pos:end="99:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:60"><expr pos:start="105:9" pos:end="105:59"><name pos:start="105:9" pos:end="105:21">total_sectors</name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:59"><name pos:start="105:25" pos:end="105:36">DIV_ROUND_UP</name><argument_list pos:start="105:37" pos:end="105:59">(<argument pos:start="105:38" pos:end="105:40"><expr pos:start="105:38" pos:end="105:40"><name pos:start="105:38" pos:end="105:40">len</name></expr></argument>, <argument pos:start="105:43" pos:end="105:58"><expr pos:start="105:43" pos:end="105:58"><name pos:start="105:43" pos:end="105:58">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:61"><expr pos:start="107:9" pos:end="109:60"><name pos:start="107:9" pos:end="107:22">max_nb_sectors</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <call pos:start="107:26" pos:end="109:60"><name pos:start="107:26" pos:end="107:33">ROUND_UP</name><argument_list pos:start="107:34" pos:end="109:60">(<argument pos:start="107:35" pos:end="107:68"><expr pos:start="107:35" pos:end="107:68"><call pos:start="107:35" pos:end="107:68"><name pos:start="107:35" pos:end="107:37">MAX</name><argument_list pos:start="107:38" pos:end="107:68">(<argument pos:start="107:39" pos:end="107:39"><expr pos:start="107:39" pos:end="107:39"><literal type="number" pos:start="107:39" pos:end="107:39">0</literal></expr></argument>, <argument pos:start="107:42" pos:end="107:67"><expr pos:start="107:42" pos:end="107:67"><name pos:start="107:42" pos:end="107:54">total_sectors</name> <operator pos:start="107:56" pos:end="107:56">-</operator> <name pos:start="107:58" pos:end="107:67">sector_num</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="109:35" pos:end="109:59"><expr pos:start="109:35" pos:end="109:59"><name pos:start="109:35" pos:end="109:39">align</name> <operator pos:start="109:41" pos:end="109:42">&gt;&gt;</operator> <name pos:start="109:44" pos:end="109:59">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="121:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:31">(<expr pos:start="111:13" pos:end="111:30"><name pos:start="111:13" pos:end="111:26">max_nb_sectors</name> <operator pos:start="111:28" pos:end="111:28">&gt;</operator> <literal type="number" pos:start="111:30" pos:end="111:30">0</literal></expr>)</condition> <block pos:start="111:33" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:76">

            <expr_stmt pos:start="113:13" pos:end="115:76"><expr pos:start="113:13" pos:end="115:75"><name pos:start="113:13" pos:end="113:15">ret</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <call pos:start="113:19" pos:end="115:75"><name pos:start="113:19" pos:end="113:36"><name pos:start="113:19" pos:end="113:21">drv</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:36">bdrv_co_readv</name></name><argument_list pos:start="113:37" pos:end="115:75">(<argument pos:start="113:38" pos:end="113:39"><expr pos:start="113:38" pos:end="113:39"><name pos:start="113:38" pos:end="113:39">bs</name></expr></argument>, <argument pos:start="113:42" pos:end="113:51"><expr pos:start="113:42" pos:end="113:51"><name pos:start="113:42" pos:end="113:51">sector_num</name></expr></argument>,

                                     <argument pos:start="115:38" pos:end="115:68"><expr pos:start="115:38" pos:end="115:68"><call pos:start="115:38" pos:end="115:68"><name pos:start="115:38" pos:end="115:40">MIN</name><argument_list pos:start="115:41" pos:end="115:68">(<argument pos:start="115:42" pos:end="115:51"><expr pos:start="115:42" pos:end="115:51"><name pos:start="115:42" pos:end="115:51">nb_sectors</name></expr></argument>, <argument pos:start="115:54" pos:end="115:67"><expr pos:start="115:54" pos:end="115:67"><name pos:start="115:54" pos:end="115:67">max_nb_sectors</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:71" pos:end="115:74"><expr pos:start="115:71" pos:end="115:74"><name pos:start="115:71" pos:end="115:74">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="117:11" pos:end="121:9">else <block pos:start="117:16" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:20">

            <expr_stmt pos:start="119:13" pos:end="119:20"><expr pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:15">ret</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <literal type="number" pos:start="119:19" pos:end="119:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="125:9" pos:end="125:70">/* Reading beyond end of file is supposed to produce zeroes */</comment>

        <if_stmt pos:start="127:9" pos:end="137:9"><if pos:start="127:9" pos:end="137:9">if <condition pos:start="127:12" pos:end="127:64">(<expr pos:start="127:13" pos:end="127:63"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:18">==</operator> <literal type="number" pos:start="127:20" pos:end="127:20">0</literal> <operator pos:start="127:22" pos:end="127:23">&amp;&amp;</operator> <name pos:start="127:25" pos:end="127:37">total_sectors</name> <operator pos:start="127:39" pos:end="127:39">&lt;</operator> <name pos:start="127:41" pos:end="127:50">sector_num</name> <operator pos:start="127:52" pos:end="127:52">+</operator> <name pos:start="127:54" pos:end="127:63">nb_sectors</name></expr>)</condition> <block pos:start="127:66" pos:end="137:9">{<block_content pos:start="129:13" pos:end="135:73">

            <decl_stmt pos:start="129:13" pos:end="129:65"><decl pos:start="129:13" pos:end="129:64"><type pos:start="129:13" pos:end="129:20"><name pos:start="129:13" pos:end="129:20">uint64_t</name></type> <name pos:start="129:22" pos:end="129:27">offset</name> <init pos:start="129:29" pos:end="129:64">= <expr pos:start="129:31" pos:end="129:64"><call pos:start="129:31" pos:end="129:64"><name pos:start="129:31" pos:end="129:33">MAX</name><argument_list pos:start="129:34" pos:end="129:64">(<argument pos:start="129:35" pos:end="129:35"><expr pos:start="129:35" pos:end="129:35"><literal type="number" pos:start="129:35" pos:end="129:35">0</literal></expr></argument>, <argument pos:start="129:38" pos:end="129:63"><expr pos:start="129:38" pos:end="129:63"><name pos:start="129:38" pos:end="129:50">total_sectors</name> <operator pos:start="129:52" pos:end="129:52">-</operator> <name pos:start="129:54" pos:end="129:63">sector_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="131:13" pos:end="133:47"><decl pos:start="131:13" pos:end="133:46"><type pos:start="131:13" pos:end="131:20"><name pos:start="131:13" pos:end="131:20">uint64_t</name></type> <name pos:start="131:22" pos:end="131:26">bytes</name> <init pos:start="131:28" pos:end="133:46">= <expr pos:start="131:30" pos:end="133:46"><operator pos:start="131:30" pos:end="131:30">(</operator><name pos:start="131:31" pos:end="131:40">sector_num</name> <operator pos:start="131:42" pos:end="131:42">+</operator> <name pos:start="131:44" pos:end="131:53">nb_sectors</name> <operator pos:start="131:55" pos:end="131:55">-</operator> <name pos:start="131:57" pos:end="131:62">offset</name><operator pos:start="131:63" pos:end="131:63">)</operator> <operator pos:start="131:65" pos:end="131:65">*</operator>

                              <name pos:start="133:31" pos:end="133:46">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:73"><expr pos:start="135:13" pos:end="135:72"><call pos:start="135:13" pos:end="135:72"><name pos:start="135:13" pos:end="135:29">qemu_iovec_memset</name><argument_list pos:start="135:30" pos:end="135:72">(<argument pos:start="135:31" pos:end="135:34"><expr pos:start="135:31" pos:end="135:34"><name pos:start="135:31" pos:end="135:34">qiov</name></expr></argument>, <argument pos:start="135:37" pos:end="135:61"><expr pos:start="135:37" pos:end="135:61"><name pos:start="135:37" pos:end="135:42">offset</name> <operator pos:start="135:44" pos:end="135:44">*</operator> <name pos:start="135:46" pos:end="135:61">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="135:64" pos:end="135:64"><expr pos:start="135:64" pos:end="135:64"><literal type="number" pos:start="135:64" pos:end="135:64">0</literal></expr></argument>, <argument pos:start="135:67" pos:end="135:71"><expr pos:start="135:67" pos:end="135:71"><name pos:start="135:67" pos:end="135:71">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="143:1" pos:end="143:4"><name pos:start="143:1" pos:end="143:3">out</name>:</label>

    <return pos:start="145:5" pos:end="145:15">return <expr pos:start="145:12" pos:end="145:14"><name pos:start="145:12" pos:end="145:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
