<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19870.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:37">vmsvga_update_rect</name><parameter_list pos:start="1:38" pos:end="3:65">(<parameter pos:start="1:39" pos:end="1:62"><decl pos:start="1:39" pos:end="1:62"><type pos:start="1:39" pos:end="1:62"><name pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:44">struct</name> <name pos:start="1:46" pos:end="1:59">vmsvga_state_s</name></name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">s</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:43"><decl pos:start="3:39" pos:end="3:43"><type pos:start="3:39" pos:end="3:43"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:43">x</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:50"><decl pos:start="3:46" pos:end="3:50"><type pos:start="3:46" pos:end="3:50"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:50">y</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:57"><decl pos:start="3:53" pos:end="3:57"><type pos:start="3:53" pos:end="3:57"><name pos:start="3:53" pos:end="3:55">int</name></type> <name pos:start="3:57" pos:end="3:57">w</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:64"><decl pos:start="3:60" pos:end="3:64"><type pos:start="3:60" pos:end="3:64"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:64">h</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:43">

    <decl_stmt pos:start="7:5" pos:end="7:63"><decl pos:start="7:5" pos:end="7:62"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">DisplaySurface</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:27">surface</name> <init pos:start="7:29" pos:end="7:62">= <expr pos:start="7:31" pos:end="7:62"><call pos:start="7:31" pos:end="7:62"><name pos:start="7:31" pos:end="7:50">qemu_console_surface</name><argument_list pos:start="7:51" pos:end="7:62">(<argument pos:start="7:52" pos:end="7:61"><expr pos:start="7:52" pos:end="7:61"><name pos:start="7:52" pos:end="7:61"><name pos:start="7:52" pos:end="7:52">s</name><operator pos:start="7:53" pos:end="7:54">-&gt;</operator><name pos:start="7:55" pos:end="7:57">vga</name><operator pos:start="7:58" pos:end="7:58">.</operator><name pos:start="7:59" pos:end="7:61">con</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">bypl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">width</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:16">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">dst</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:14">(<expr pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:9">x</name> <operator pos:start="23:11" pos:end="23:11">&lt;</operator> <literal type="number" pos:start="23:13" pos:end="23:13">0</literal></expr>)</condition> <block pos:start="23:16" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:14">

        <expr_stmt pos:start="25:9" pos:end="25:68"><expr pos:start="25:9" pos:end="25:67"><call pos:start="25:9" pos:end="25:67"><name pos:start="25:9" pos:end="25:15">fprintf</name><argument_list pos:start="25:16" pos:end="25:67">(<argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22">stderr</name></expr></argument>, <argument pos:start="25:25" pos:end="25:53"><expr pos:start="25:25" pos:end="25:53"><literal type="string" pos:start="25:25" pos:end="25:53">"%s: update x was &lt; 0 (%d)\n"</literal></expr></argument>, <argument pos:start="25:56" pos:end="25:63"><expr pos:start="25:56" pos:end="25:63"><name pos:start="25:56" pos:end="25:63">__func__</name></expr></argument>, <argument pos:start="25:66" pos:end="25:66"><expr pos:start="25:66" pos:end="25:66"><name pos:start="25:66" pos:end="25:66">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:15"><expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:9">w</name> <operator pos:start="27:11" pos:end="27:12">+=</operator> <name pos:start="27:14" pos:end="27:14">x</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:14"><expr pos:start="29:9" pos:end="29:13"><name pos:start="29:9" pos:end="29:9">x</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <literal type="number" pos:start="29:13" pos:end="29:13">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:14">(<expr pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:9">w</name> <operator pos:start="33:11" pos:end="33:11">&lt;</operator> <literal type="number" pos:start="33:13" pos:end="33:13">0</literal></expr>)</condition> <block pos:start="33:16" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:14">

        <expr_stmt pos:start="35:9" pos:end="35:68"><expr pos:start="35:9" pos:end="35:67"><call pos:start="35:9" pos:end="35:67"><name pos:start="35:9" pos:end="35:15">fprintf</name><argument_list pos:start="35:16" pos:end="35:67">(<argument pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">stderr</name></expr></argument>, <argument pos:start="35:25" pos:end="35:53"><expr pos:start="35:25" pos:end="35:53"><literal type="string" pos:start="35:25" pos:end="35:53">"%s: update w was &lt; 0 (%d)\n"</literal></expr></argument>, <argument pos:start="35:56" pos:end="35:63"><expr pos:start="35:56" pos:end="35:63"><name pos:start="35:56" pos:end="35:63">__func__</name></expr></argument>, <argument pos:start="35:66" pos:end="35:66"><expr pos:start="35:66" pos:end="35:66"><name pos:start="35:66" pos:end="35:66">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:14"><expr pos:start="37:9" pos:end="37:13"><name pos:start="37:9" pos:end="37:9">w</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <literal type="number" pos:start="37:13" pos:end="37:13">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="51:5"><if pos:start="41:5" pos:end="51:5">if <condition pos:start="41:8" pos:end="41:39">(<expr pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:9">x</name> <operator pos:start="41:11" pos:end="41:11">+</operator> <name pos:start="41:13" pos:end="41:13">w</name> <operator pos:start="41:15" pos:end="41:15">&gt;</operator> <call pos:start="41:17" pos:end="41:38"><name pos:start="41:17" pos:end="41:29">surface_width</name><argument_list pos:start="41:30" pos:end="41:38">(<argument pos:start="41:31" pos:end="41:37"><expr pos:start="41:31" pos:end="41:37"><name pos:start="41:31" pos:end="41:37">surface</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:41" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:39">

        <expr_stmt pos:start="43:9" pos:end="45:32"><expr pos:start="43:9" pos:end="45:31"><call pos:start="43:9" pos:end="45:31"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="45:31">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:67"><expr pos:start="43:25" pos:end="43:67"><literal type="string" pos:start="43:25" pos:end="43:67">"%s: update width too large x: %d, w: %d\n"</literal></expr></argument>,

                <argument pos:start="45:17" pos:end="45:24"><expr pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:24">__func__</name></expr></argument>, <argument pos:start="45:27" pos:end="45:27"><expr pos:start="45:27" pos:end="45:27"><name pos:start="45:27" pos:end="45:27">x</name></expr></argument>, <argument pos:start="45:30" pos:end="45:30"><expr pos:start="45:30" pos:end="45:30"><name pos:start="45:30" pos:end="45:30">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:43"><expr pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:9">x</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:42"><name pos:start="47:13" pos:end="47:15">MIN</name><argument_list pos:start="47:16" pos:end="47:42">(<argument pos:start="47:17" pos:end="47:17"><expr pos:start="47:17" pos:end="47:17"><name pos:start="47:17" pos:end="47:17">x</name></expr></argument>, <argument pos:start="47:20" pos:end="47:41"><expr pos:start="47:20" pos:end="47:41"><call pos:start="47:20" pos:end="47:41"><name pos:start="47:20" pos:end="47:32">surface_width</name><argument_list pos:start="47:33" pos:end="47:41">(<argument pos:start="47:34" pos:end="47:40"><expr pos:start="47:34" pos:end="47:40"><name pos:start="47:34" pos:end="47:40">surface</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:9">w</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:34"><name pos:start="49:13" pos:end="49:25">surface_width</name><argument_list pos:start="49:26" pos:end="49:34">(<argument pos:start="49:27" pos:end="49:33"><expr pos:start="49:27" pos:end="49:33"><name pos:start="49:27" pos:end="49:33">surface</name></expr></argument>)</argument_list></call> <operator pos:start="49:36" pos:end="49:36">-</operator> <name pos:start="49:38" pos:end="49:38">x</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:14">(<expr pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:9">y</name> <operator pos:start="55:11" pos:end="55:11">&lt;</operator> <literal type="number" pos:start="55:13" pos:end="55:13">0</literal></expr>)</condition> <block pos:start="55:16" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:14">

        <expr_stmt pos:start="57:9" pos:end="57:69"><expr pos:start="57:9" pos:end="57:68"><call pos:start="57:9" pos:end="57:68"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="57:68">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="57:53"><expr pos:start="57:25" pos:end="57:53"><literal type="string" pos:start="57:25" pos:end="57:53">"%s: update y was &lt; 0 (%d)\n"</literal></expr></argument>,  <argument pos:start="57:57" pos:end="57:64"><expr pos:start="57:57" pos:end="57:64"><name pos:start="57:57" pos:end="57:64">__func__</name></expr></argument>, <argument pos:start="57:67" pos:end="57:67"><expr pos:start="57:67" pos:end="57:67"><name pos:start="57:67" pos:end="57:67">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:15"><expr pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:9">h</name> <operator pos:start="59:11" pos:end="59:12">+=</operator> <name pos:start="59:14" pos:end="59:14">y</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:14"><expr pos:start="61:9" pos:end="61:13"><name pos:start="61:9" pos:end="61:9">y</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <literal type="number" pos:start="61:13" pos:end="61:13">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:14">(<expr pos:start="65:9" pos:end="65:13"><name pos:start="65:9" pos:end="65:9">h</name> <operator pos:start="65:11" pos:end="65:11">&lt;</operator> <literal type="number" pos:start="65:13" pos:end="65:13">0</literal></expr>)</condition> <block pos:start="65:16" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:14">

        <expr_stmt pos:start="67:9" pos:end="67:69"><expr pos:start="67:9" pos:end="67:68"><call pos:start="67:9" pos:end="67:68"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="67:68">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="67:53"><expr pos:start="67:25" pos:end="67:53"><literal type="string" pos:start="67:25" pos:end="67:53">"%s: update h was &lt; 0 (%d)\n"</literal></expr></argument>,  <argument pos:start="67:57" pos:end="67:64"><expr pos:start="67:57" pos:end="67:64"><name pos:start="67:57" pos:end="67:64">__func__</name></expr></argument>, <argument pos:start="67:67" pos:end="67:67"><expr pos:start="67:67" pos:end="67:67"><name pos:start="67:67" pos:end="67:67">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:14"><expr pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:9">h</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <literal type="number" pos:start="69:13" pos:end="69:13">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="73:5" pos:end="83:5"><if pos:start="73:5" pos:end="83:5">if <condition pos:start="73:8" pos:end="73:40">(<expr pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:9">y</name> <operator pos:start="73:11" pos:end="73:11">+</operator> <name pos:start="73:13" pos:end="73:13">h</name> <operator pos:start="73:15" pos:end="73:15">&gt;</operator> <call pos:start="73:17" pos:end="73:39"><name pos:start="73:17" pos:end="73:30">surface_height</name><argument_list pos:start="73:31" pos:end="73:39">(<argument pos:start="73:32" pos:end="73:38"><expr pos:start="73:32" pos:end="73:38"><name pos:start="73:32" pos:end="73:38">surface</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:42" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:40">

        <expr_stmt pos:start="75:9" pos:end="77:32"><expr pos:start="75:9" pos:end="77:31"><call pos:start="75:9" pos:end="77:31"><name pos:start="75:9" pos:end="75:15">fprintf</name><argument_list pos:start="75:16" pos:end="77:31">(<argument pos:start="75:17" pos:end="75:22"><expr pos:start="75:17" pos:end="75:22"><name pos:start="75:17" pos:end="75:22">stderr</name></expr></argument>, <argument pos:start="75:25" pos:end="75:68"><expr pos:start="75:25" pos:end="75:68"><literal type="string" pos:start="75:25" pos:end="75:68">"%s: update height too large y: %d, h: %d\n"</literal></expr></argument>,

                <argument pos:start="77:17" pos:end="77:24"><expr pos:start="77:17" pos:end="77:24"><name pos:start="77:17" pos:end="77:24">__func__</name></expr></argument>, <argument pos:start="77:27" pos:end="77:27"><expr pos:start="77:27" pos:end="77:27"><name pos:start="77:27" pos:end="77:27">y</name></expr></argument>, <argument pos:start="77:30" pos:end="77:30"><expr pos:start="77:30" pos:end="77:30"><name pos:start="77:30" pos:end="77:30">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:44"><expr pos:start="79:9" pos:end="79:43"><name pos:start="79:9" pos:end="79:9">y</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <call pos:start="79:13" pos:end="79:43"><name pos:start="79:13" pos:end="79:15">MIN</name><argument_list pos:start="79:16" pos:end="79:43">(<argument pos:start="79:17" pos:end="79:17"><expr pos:start="79:17" pos:end="79:17"><name pos:start="79:17" pos:end="79:17">y</name></expr></argument>, <argument pos:start="79:20" pos:end="79:42"><expr pos:start="79:20" pos:end="79:42"><call pos:start="79:20" pos:end="79:42"><name pos:start="79:20" pos:end="79:33">surface_height</name><argument_list pos:start="79:34" pos:end="79:42">(<argument pos:start="79:35" pos:end="79:41"><expr pos:start="79:35" pos:end="79:41"><name pos:start="79:35" pos:end="79:41">surface</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:40"><expr pos:start="81:9" pos:end="81:39"><name pos:start="81:9" pos:end="81:9">h</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <call pos:start="81:13" pos:end="81:35"><name pos:start="81:13" pos:end="81:26">surface_height</name><argument_list pos:start="81:27" pos:end="81:35">(<argument pos:start="81:28" pos:end="81:34"><expr pos:start="81:28" pos:end="81:34"><name pos:start="81:28" pos:end="81:34">surface</name></expr></argument>)</argument_list></call> <operator pos:start="81:37" pos:end="81:37">-</operator> <name pos:start="81:39" pos:end="81:39">y</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:35"><expr pos:start="87:5" pos:end="87:34"><name pos:start="87:5" pos:end="87:8">bypl</name> <operator pos:start="87:10" pos:end="87:10">=</operator> <call pos:start="87:12" pos:end="87:34"><name pos:start="87:12" pos:end="87:25">surface_stride</name><argument_list pos:start="87:26" pos:end="87:34">(<argument pos:start="87:27" pos:end="87:33"><expr pos:start="87:27" pos:end="87:33"><name pos:start="87:27" pos:end="87:33">surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:49"><expr pos:start="89:5" pos:end="89:48"><name pos:start="89:5" pos:end="89:9">width</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <call pos:start="89:13" pos:end="89:44"><name pos:start="89:13" pos:end="89:35">surface_bytes_per_pixel</name><argument_list pos:start="89:36" pos:end="89:44">(<argument pos:start="89:37" pos:end="89:43"><expr pos:start="89:37" pos:end="89:43"><name pos:start="89:37" pos:end="89:43">surface</name></expr></argument>)</argument_list></call> <operator pos:start="89:46" pos:end="89:46">*</operator> <name pos:start="89:48" pos:end="89:48">w</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:60"><expr pos:start="91:5" pos:end="91:59"><name pos:start="91:5" pos:end="91:9">start</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <call pos:start="91:13" pos:end="91:44"><name pos:start="91:13" pos:end="91:35">surface_bytes_per_pixel</name><argument_list pos:start="91:36" pos:end="91:44">(<argument pos:start="91:37" pos:end="91:43"><expr pos:start="91:37" pos:end="91:43"><name pos:start="91:37" pos:end="91:43">surface</name></expr></argument>)</argument_list></call> <operator pos:start="91:46" pos:end="91:46">*</operator> <name pos:start="91:48" pos:end="91:48">x</name> <operator pos:start="91:50" pos:end="91:50">+</operator> <name pos:start="91:52" pos:end="91:55">bypl</name> <operator pos:start="91:57" pos:end="91:57">*</operator> <name pos:start="91:59" pos:end="91:59">y</name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:34"><expr pos:start="93:5" pos:end="93:33"><name pos:start="93:5" pos:end="93:7">src</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <name pos:start="93:11" pos:end="93:25"><name pos:start="93:11" pos:end="93:11">s</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:16">vga</name><operator pos:start="93:17" pos:end="93:17">.</operator><name pos:start="93:18" pos:end="93:25">vram_ptr</name></name> <operator pos:start="93:27" pos:end="93:27">+</operator> <name pos:start="93:29" pos:end="93:33">start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:40"><expr pos:start="95:5" pos:end="95:39"><name pos:start="95:5" pos:end="95:7">dst</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:31"><name pos:start="95:11" pos:end="95:22">surface_data</name><argument_list pos:start="95:23" pos:end="95:31">(<argument pos:start="95:24" pos:end="95:30"><expr pos:start="95:24" pos:end="95:30"><name pos:start="95:24" pos:end="95:30">surface</name></expr></argument>)</argument_list></call> <operator pos:start="95:33" pos:end="95:33">+</operator> <name pos:start="95:35" pos:end="95:39">start</name></expr>;</expr_stmt>



    <for pos:start="99:5" pos:end="103:5">for <control pos:start="99:9" pos:end="99:62">(<init pos:start="99:10" pos:end="99:18"><expr pos:start="99:10" pos:end="99:17"><name pos:start="99:10" pos:end="99:13">line</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <name pos:start="99:17" pos:end="99:17">h</name></expr>;</init> <condition pos:start="99:20" pos:end="99:28"><expr pos:start="99:20" pos:end="99:27"><name pos:start="99:20" pos:end="99:23">line</name> <operator pos:start="99:25" pos:end="99:25">&gt;</operator> <literal type="number" pos:start="99:27" pos:end="99:27">0</literal></expr>;</condition> <incr pos:start="99:30" pos:end="99:61"><expr pos:start="99:30" pos:end="99:35"><name pos:start="99:30" pos:end="99:33">line</name><operator pos:start="99:34" pos:end="99:35">--</operator></expr><operator pos:start="99:36" pos:end="99:36">,</operator> <expr pos:start="99:38" pos:end="99:48"><name pos:start="99:38" pos:end="99:40">src</name> <operator pos:start="99:42" pos:end="99:43">+=</operator> <name pos:start="99:45" pos:end="99:48">bypl</name></expr><operator pos:start="99:49" pos:end="99:49">,</operator> <expr pos:start="99:51" pos:end="99:61"><name pos:start="99:51" pos:end="99:53">dst</name> <operator pos:start="99:55" pos:end="99:56">+=</operator> <name pos:start="99:58" pos:end="99:61">bypl</name></expr></incr>)</control> <block pos:start="99:64" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:32">

        <expr_stmt pos:start="101:9" pos:end="101:32"><expr pos:start="101:9" pos:end="101:31"><call pos:start="101:9" pos:end="101:31"><name pos:start="101:9" pos:end="101:14">memcpy</name><argument_list pos:start="101:15" pos:end="101:31">(<argument pos:start="101:16" pos:end="101:18"><expr pos:start="101:16" pos:end="101:18"><name pos:start="101:16" pos:end="101:18">dst</name></expr></argument>, <argument pos:start="101:21" pos:end="101:23"><expr pos:start="101:21" pos:end="101:23"><name pos:start="101:21" pos:end="101:23">src</name></expr></argument>, <argument pos:start="101:26" pos:end="101:30"><expr pos:start="101:26" pos:end="101:30"><name pos:start="101:26" pos:end="101:30">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="105:5" pos:end="105:43"><expr pos:start="105:5" pos:end="105:42"><call pos:start="105:5" pos:end="105:42"><name pos:start="105:5" pos:end="105:18">dpy_gfx_update</name><argument_list pos:start="105:19" pos:end="105:42">(<argument pos:start="105:20" pos:end="105:29"><expr pos:start="105:20" pos:end="105:29"><name pos:start="105:20" pos:end="105:29"><name pos:start="105:20" pos:end="105:20">s</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:25">vga</name><operator pos:start="105:26" pos:end="105:26">.</operator><name pos:start="105:27" pos:end="105:29">con</name></name></expr></argument>, <argument pos:start="105:32" pos:end="105:32"><expr pos:start="105:32" pos:end="105:32"><name pos:start="105:32" pos:end="105:32">x</name></expr></argument>, <argument pos:start="105:35" pos:end="105:35"><expr pos:start="105:35" pos:end="105:35"><name pos:start="105:35" pos:end="105:35">y</name></expr></argument>, <argument pos:start="105:38" pos:end="105:38"><expr pos:start="105:38" pos:end="105:38"><name pos:start="105:38" pos:end="105:38">w</name></expr></argument>, <argument pos:start="105:41" pos:end="105:41"><expr pos:start="105:41" pos:end="105:41"><name pos:start="105:41" pos:end="105:41">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
