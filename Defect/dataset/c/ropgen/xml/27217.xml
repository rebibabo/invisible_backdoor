<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27217.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">flac_encode_frame</name><parameter_list pos:start="1:29" pos:end="3:54">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:66"><decl pos:start="1:53" pos:end="1:66"><type pos:start="1:53" pos:end="1:66"><name pos:start="1:53" pos:end="1:59">uint8_t</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:66">frame</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:41">buf_size</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:53"><decl pos:start="3:44" pos:end="3:53"><type pos:start="3:44" pos:end="3:53"><name pos:start="3:44" pos:end="3:47">void</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="117:1">{<block_content pos:start="7:5" pos:end="115:21">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">FlacEncodeContext</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:24">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">int16_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:26">samples</name> <init pos:start="9:28" pos:end="9:33">= <expr pos:start="9:30" pos:end="9:33"><name pos:start="9:30" pos:end="9:33">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">frame_bytes</name></decl>, <decl pos:start="11:22" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:30">out_bytes</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:5">s</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <name pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:13">avctx</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:24">priv_data</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:72">/* when the last block is reached, update the header in extradata */</comment>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:13">data</name></expr>)</condition> <block pos:start="21:16" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:17">

        <expr_stmt pos:start="23:9" pos:end="23:52"><expr pos:start="23:9" pos:end="23:51"><name pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:24">max_framesize</name></name> <operator pos:start="23:26" pos:end="23:26">=</operator> <name pos:start="23:28" pos:end="23:51"><name pos:start="23:28" pos:end="23:28">s</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:51">max_encoded_framesize</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:43"><expr pos:start="25:9" pos:end="25:42"><call pos:start="25:9" pos:end="25:42"><name pos:start="25:9" pos:end="25:20">av_md5_final</name><argument_list pos:start="25:21" pos:end="25:42">(<argument pos:start="25:22" pos:end="25:30"><expr pos:start="25:22" pos:end="25:30"><name pos:start="25:22" pos:end="25:30"><name pos:start="25:22" pos:end="25:22">s</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:30">md5ctx</name></name></expr></argument>, <argument pos:start="25:33" pos:end="25:41"><expr pos:start="25:33" pos:end="25:41"><name pos:start="25:33" pos:end="25:41"><name pos:start="25:33" pos:end="25:33">s</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:41">md5sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:46"><expr pos:start="27:9" pos:end="27:45"><call pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:24">write_streaminfo</name><argument_list pos:start="27:25" pos:end="27:45">(<argument pos:start="27:26" pos:end="27:26"><expr pos:start="27:26" pos:end="27:26"><name pos:start="27:26" pos:end="27:26">s</name></expr></argument>, <argument pos:start="27:29" pos:end="27:44"><expr pos:start="27:29" pos:end="27:44"><name pos:start="27:29" pos:end="27:44"><name pos:start="27:29" pos:end="27:33">avctx</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:44">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:52">/* change max_framesize for small final frame */</comment>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:47">(<expr pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:25">frame_size</name></name> <operator pos:start="37:27" pos:end="37:27">&lt;</operator> <name pos:start="37:29" pos:end="37:46"><name pos:start="37:29" pos:end="37:29">s</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:36">frame</name><operator pos:start="37:37" pos:end="37:37">.</operator><name pos:start="37:38" pos:end="37:46">blocksize</name></name></expr>)</condition> <block pos:start="37:49" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:71">

        <expr_stmt pos:start="39:9" pos:end="41:71"><expr pos:start="39:9" pos:end="41:70"><name pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:24">max_framesize</name></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <call pos:start="39:28" pos:end="41:70"><name pos:start="39:28" pos:end="39:53">ff_flac_get_max_frame_size</name><argument_list pos:start="39:54" pos:end="41:70">(<argument pos:start="39:55" pos:end="39:71"><expr pos:start="39:55" pos:end="39:71"><name pos:start="39:55" pos:end="39:71"><name pos:start="39:55" pos:end="39:59">avctx</name><operator pos:start="39:60" pos:end="39:61">-&gt;</operator><name pos:start="39:62" pos:end="39:71">frame_size</name></name></expr></argument>,

                                                      <argument pos:start="41:55" pos:end="41:65"><expr pos:start="41:55" pos:end="41:65"><name pos:start="41:55" pos:end="41:65"><name pos:start="41:55" pos:end="41:55">s</name><operator pos:start="41:56" pos:end="41:57">-&gt;</operator><name pos:start="41:58" pos:end="41:65">channels</name></name></expr></argument>, <argument pos:start="41:68" pos:end="41:69"><expr pos:start="41:68" pos:end="41:69"><literal type="number" pos:start="41:68" pos:end="41:69">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:18"><expr pos:start="47:5" pos:end="47:17"><call pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:14">init_frame</name><argument_list pos:start="47:15" pos:end="47:17">(<argument pos:start="47:16" pos:end="47:16"><expr pos:start="47:16" pos:end="47:16"><name pos:start="47:16" pos:end="47:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:29"><expr pos:start="51:5" pos:end="51:28"><call pos:start="51:5" pos:end="51:28"><name pos:start="51:5" pos:end="51:16">copy_samples</name><argument_list pos:start="51:17" pos:end="51:28">(<argument pos:start="51:18" pos:end="51:18"><expr pos:start="51:18" pos:end="51:18"><name pos:start="51:18" pos:end="51:18">s</name></expr></argument>, <argument pos:start="51:21" pos:end="51:27"><expr pos:start="51:21" pos:end="51:27"><name pos:start="51:21" pos:end="51:27">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:29"><expr pos:start="55:5" pos:end="55:28"><call pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:25">channel_decorrelation</name><argument_list pos:start="55:26" pos:end="55:28">(<argument pos:start="55:27" pos:end="55:27"><expr pos:start="55:27" pos:end="55:27"><name pos:start="55:27" pos:end="55:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:34"><expr pos:start="59:5" pos:end="59:33"><name pos:start="59:5" pos:end="59:15">frame_bytes</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:33"><name pos:start="59:19" pos:end="59:30">encode_frame</name><argument_list pos:start="59:31" pos:end="59:33">(<argument pos:start="59:32" pos:end="59:32"><expr pos:start="59:32" pos:end="59:32"><name pos:start="59:32" pos:end="59:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:31">(<expr pos:start="61:9" pos:end="61:30"><name pos:start="61:9" pos:end="61:16">buf_size</name> <operator pos:start="61:18" pos:end="61:18">&lt;</operator> <name pos:start="61:20" pos:end="61:30">frame_bytes</name></expr>)</condition> <block pos:start="61:33" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:17">

        <expr_stmt pos:start="63:9" pos:end="63:65"><expr pos:start="63:9" pos:end="63:64"><call pos:start="63:9" pos:end="63:64"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:64">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:37" pos:end="63:63"><expr pos:start="63:37" pos:end="63:63"><literal type="string" pos:start="63:37" pos:end="63:63">"output buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:17">return <expr pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:48"><expr pos:start="69:5" pos:end="69:47"><name pos:start="69:5" pos:end="69:13">out_bytes</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <call pos:start="69:17" pos:end="69:47"><name pos:start="69:17" pos:end="69:27">write_frame</name><argument_list pos:start="69:28" pos:end="69:47">(<argument pos:start="69:29" pos:end="69:29"><expr pos:start="69:29" pos:end="69:29"><name pos:start="69:29" pos:end="69:29">s</name></expr></argument>, <argument pos:start="69:32" pos:end="69:36"><expr pos:start="69:32" pos:end="69:36"><name pos:start="69:32" pos:end="69:36">frame</name></expr></argument>, <argument pos:start="69:39" pos:end="69:46"><expr pos:start="69:39" pos:end="69:46"><name pos:start="69:39" pos:end="69:46">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="75:43">/* fallback to verbatim mode if the compressed frame is larger than it

       would be if encoded uncompressed. */</comment>

    <if_stmt pos:start="77:5" pos:end="93:5"><if pos:start="77:5" pos:end="93:5">if <condition pos:start="77:8" pos:end="77:37">(<expr pos:start="77:9" pos:end="77:36"><name pos:start="77:9" pos:end="77:17">out_bytes</name> <operator pos:start="77:19" pos:end="77:19">&gt;</operator> <name pos:start="77:21" pos:end="77:36"><name pos:start="77:21" pos:end="77:21">s</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:36">max_framesize</name></name></expr>)</condition> <block pos:start="77:39" pos:end="93:5">{<block_content pos:start="79:9" pos:end="91:52">

        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">frame</name><operator pos:start="79:17" pos:end="79:17">.</operator><name pos:start="79:18" pos:end="79:30">verbatim_only</name></name> <operator pos:start="79:32" pos:end="79:32">=</operator> <literal type="number" pos:start="79:34" pos:end="79:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:38"><expr pos:start="81:9" pos:end="81:37"><name pos:start="81:9" pos:end="81:19">frame_bytes</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:37"><name pos:start="81:23" pos:end="81:34">encode_frame</name><argument_list pos:start="81:35" pos:end="81:37">(<argument pos:start="81:36" pos:end="81:36"><expr pos:start="81:36" pos:end="81:36"><name pos:start="81:36" pos:end="81:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:35">(<expr pos:start="83:13" pos:end="83:34"><name pos:start="83:13" pos:end="83:20">buf_size</name> <operator pos:start="83:22" pos:end="83:22">&lt;</operator> <name pos:start="83:24" pos:end="83:34">frame_bytes</name></expr>)</condition> <block pos:start="83:37" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:21">

            <expr_stmt pos:start="85:13" pos:end="85:69"><expr pos:start="85:13" pos:end="85:68"><call pos:start="85:13" pos:end="85:68"><name pos:start="85:13" pos:end="85:18">av_log</name><argument_list pos:start="85:19" pos:end="85:68">(<argument pos:start="85:20" pos:end="85:24"><expr pos:start="85:20" pos:end="85:24"><name pos:start="85:20" pos:end="85:24">avctx</name></expr></argument>, <argument pos:start="85:27" pos:end="85:38"><expr pos:start="85:27" pos:end="85:38"><name pos:start="85:27" pos:end="85:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:41" pos:end="85:67"><expr pos:start="85:41" pos:end="85:67"><literal type="string" pos:start="85:41" pos:end="85:67">"output buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:21">return <expr pos:start="87:20" pos:end="87:20"><literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:52"><expr pos:start="91:9" pos:end="91:51"><name pos:start="91:9" pos:end="91:17">out_bytes</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <call pos:start="91:21" pos:end="91:51"><name pos:start="91:21" pos:end="91:31">write_frame</name><argument_list pos:start="91:32" pos:end="91:51">(<argument pos:start="91:33" pos:end="91:33"><expr pos:start="91:33" pos:end="91:33"><name pos:start="91:33" pos:end="91:33">s</name></expr></argument>, <argument pos:start="91:36" pos:end="91:40"><expr pos:start="91:36" pos:end="91:40"><name pos:start="91:36" pos:end="91:40">frame</name></expr></argument>, <argument pos:start="91:43" pos:end="91:50"><expr pos:start="91:43" pos:end="91:50"><name pos:start="91:43" pos:end="91:50">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:21"><expr pos:start="97:5" pos:end="97:20"><name pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:18">frame_count</name></name><operator pos:start="97:19" pos:end="97:20">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:46"><expr pos:start="99:5" pos:end="99:45"><name pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:9">avctx</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:22">coded_frame</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:27">pts</name></name> <operator pos:start="99:29" pos:end="99:29">=</operator> <name pos:start="99:31" pos:end="99:45"><name pos:start="99:31" pos:end="99:31">s</name><operator pos:start="99:32" pos:end="99:33">-&gt;</operator><name pos:start="99:34" pos:end="99:45">sample_count</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:41"><expr pos:start="101:5" pos:end="101:40"><name pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:19">sample_count</name></name> <operator pos:start="101:21" pos:end="101:22">+=</operator> <name pos:start="101:24" pos:end="101:40"><name pos:start="101:24" pos:end="101:28">avctx</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:40">frame_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:31"><expr pos:start="103:5" pos:end="103:30"><call pos:start="103:5" pos:end="103:30"><name pos:start="103:5" pos:end="103:18">update_md5_sum</name><argument_list pos:start="103:19" pos:end="103:30">(<argument pos:start="103:20" pos:end="103:20"><expr pos:start="103:20" pos:end="103:20"><name pos:start="103:20" pos:end="103:20">s</name></expr></argument>, <argument pos:start="103:23" pos:end="103:29"><expr pos:start="103:23" pos:end="103:29"><name pos:start="103:23" pos:end="103:29">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="107:45"><if pos:start="105:5" pos:end="107:45">if <condition pos:start="105:8" pos:end="105:45">(<expr pos:start="105:9" pos:end="105:44"><name pos:start="105:9" pos:end="105:17">out_bytes</name> <operator pos:start="105:19" pos:end="105:19">&gt;</operator> <name pos:start="105:21" pos:end="105:44"><name pos:start="105:21" pos:end="105:21">s</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:44">max_encoded_framesize</name></name></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:45"><block_content pos:start="107:9" pos:end="107:45">

        <expr_stmt pos:start="107:9" pos:end="107:45"><expr pos:start="107:9" pos:end="107:44"><name pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:32">max_encoded_framesize</name></name> <operator pos:start="107:34" pos:end="107:34">=</operator> <name pos:start="107:36" pos:end="107:44">out_bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="111:37"><if pos:start="109:5" pos:end="111:37">if <condition pos:start="109:8" pos:end="109:37">(<expr pos:start="109:9" pos:end="109:36"><name pos:start="109:9" pos:end="109:17">out_bytes</name> <operator pos:start="109:19" pos:end="109:19">&lt;</operator> <name pos:start="109:21" pos:end="109:36"><name pos:start="109:21" pos:end="109:21">s</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:36">min_framesize</name></name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:37"><block_content pos:start="111:9" pos:end="111:37">

        <expr_stmt pos:start="111:9" pos:end="111:37"><expr pos:start="111:9" pos:end="111:36"><name pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:24">min_framesize</name></name> <operator pos:start="111:26" pos:end="111:26">=</operator> <name pos:start="111:28" pos:end="111:36">out_bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="115:5" pos:end="115:21">return <expr pos:start="115:12" pos:end="115:20"><name pos:start="115:12" pos:end="115:20">out_bytes</name></expr>;</return>

</block_content>}</block></function>
</unit>
